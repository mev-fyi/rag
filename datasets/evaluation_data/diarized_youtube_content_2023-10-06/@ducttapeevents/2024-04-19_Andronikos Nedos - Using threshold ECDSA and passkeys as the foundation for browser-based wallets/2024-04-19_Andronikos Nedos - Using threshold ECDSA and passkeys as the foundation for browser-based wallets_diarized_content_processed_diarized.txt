00:00:00.560 - 00:00:31.738, Speaker A: Well, the morning slot is mine. Thank you all for coming. Yeah, it's hard to be here in 10:00 a.m. And I'll try not to. Well, I'll try to keep you awake. So I want to talk about web wallets, or you might have heard of web wallets as well, particularly self custody web wallets. You might have heard of them as smart account wallets or account abstraction wallets.
00:00:31.738 - 00:01:11.974, Speaker A: So before I start, any show of hands, anyone here that has used at least once a self custody web wallet or an account abstraction wallet? Two, three, four. Nice. Okay, five. And anyone here that uses account abstraction wallets regularly? Good. Okay. All right, so I like web wallets. So before we proceed, let's do a brief taxonomy of wallets.
00:01:11.974 - 00:02:24.314, Speaker A: Right? So typically users, they have to choose between user experience. Okay, so before that, like the fundamental as a wallet builder or as a wallet user, you have a choice to make and the choice is really where the private key is going to be stored. So what we're facing is that we can choose between a good user experience, or for example on the left hand side, where your private keys are going to be owned by an institution. And you have Kraken, Coinbase, fire blocks, and with good user experience. On the right hand side, you have your usual self custodial wallets, metamask, Exodus, the Coinbase wallet Argentina. You can make a case that Azure should really be at the center. And here what you are faced with as a user is that you have to download something.
00:02:24.314 - 00:03:16.932, Speaker A: You have to download an app on your desktop, you have to download a mobile app, and so the user experience suffers. And I'll go more into it in later slides. So this has been the situation up until maybe ten months ago or like a year ago. And then account abstraction, EAP 4337 came into being and the situation has changed. So now in Ethereum, there is a rapid pace of development on web wallets, and we are in the middle category now where we have, the users no longer have to choose. You can get great security and great ux. So we have already, in twelve months, we have a lot of choice.
00:03:16.932 - 00:04:09.000, Speaker A: We have wallets like umbire, like Dymo, like Sol wallet. So what is so great about web wallets? Right? Onboarding, I would say, is vastly improved. I'll talk about onboarding in the next few slides. We have no reliance on desktop or mobile apps. Why is that important? This makes a big difference in locales where crypto wallets might be legal, right? And so you get stopped in the street, they set your phone and they find a mobile app in your wallet. Like this is not great. With a web wallet, you can have an incognito browser, you can transact in crypto, you can own your assets and no one can find out about it.
00:04:09.000 - 00:04:52.248, Speaker A: They also work in jurisdictions where you don't have access to App Stores as well, which also is an important point. I would also argue that there is. The speed of development really is a key differentiator in web wallets. Like web wallet development is web development. So web wallets have an ecosystem that has been in progress for 30 years with all the libraries and the, the thousands of people really that participate in it. Simple to test. With a web wallet, you can clone the GitHub repo, you run, NPM run, and suddenly you have the web wallet right there in your browser to test it.
00:04:52.248 - 00:06:00.664, Speaker A: You can extend it very easily. And I think this is really contributing to this renaissance in wallet development. I would also say that it makes composition easier. I think we are not that far away from a situation where we have component libraries just for wallets, like the same way that we have undesigned, for example, for general UX. I think this is where the ecosystem is going, you know, where there's going to be a lot of reducibility, a lot of safe components, and I think this is all great. I also want to make the case that with web wallets, security will become a UX issue. This is a conjecture, but what I mean by that is that we have been hampered by really complicated development practice.
00:06:00.664 - 00:07:14.174, Speaker A: And I think with the web wallet, we can iterate very quickly on uxs that are easy to use, safe and secure. So onboarding problems, and I just want to further motivate web wallets. Right. So why are they great? Like, first of all, seed phrases? I mean, it's not hard to, you know, to consider seed phrases a problem. If any of you have seen the latest wallet Connect report 2020, 1% of users in the report, they claim to have lost access to the wallet because they lost their password and the seed phrase. And another staggering 11%, they claim to have lost access to the wallets because they were victims of phishing attacks. So we can do a lot better.
00:07:14.174 - 00:08:03.164, Speaker A: Like, we're never really going to solve the problem in crypto wallets if users, current users, are used to logging into their bank account with a face id, and then we expect them to take note of complicated seed phrases and remembering passwords. So very quickly, what are the problems with seed phrases? So, yes, they can be lost. They are liable to phasing attacks. They're physically vulnerable. You write them down, put them in your jeans, you put your jeans in your washing machine, your seed phrase is gone. And they're also prone to human error. And really the same problems exist with passwords.
00:08:03.164 - 00:08:41.614, Speaker A: Passwords disrupt the user process. They force users to remember. And if you don't really want to remember, then you use the same password. With all the problems that this entails, passwords are also easily forgotten and they can be easily hijacked. So, okay, so now we have web wallets. Are we done? You know, is this it? I would say that there is still some work to be done. Let's take one example.
00:08:41.614 - 00:09:32.082, Speaker A: For example, you incorporate you as a wallet builder, incorporate past keys into your Ethereum smart account wallet. The signature verification for Webauthn is not natively supported by Ethereum. The P 256, you have to support P 256 in a smart contract. That smart contract is going to be expensive to run. It's also going to be error prone. There are efforts out there to have the P 256 verification as a precompile, which I think is great, but we're not there yet, as last I knew is going to be deployed, is already deployed in Polygon, I would say. Really, for me, the biggest problem is that ethereum account abstraction wallets rather, can only hold ethereum.
00:09:32.082 - 00:10:30.734, Speaker A: So if we believe in a multi chain and a cross chain future, then we as wallet builders, we want to allow our users to hold any asset that they want. Right? And I would also say that account abstraction has really, it has not simplified, unfortunately, gas management, it has made it a lot more complex. This is on the base layer. I think with layer twos this situation is different. And I think we're starting to see a lot of gas subsidies really on layer two. So in the end, I think we're going to have account abstraction wallets in layer two s whether users don't have to pay for gas. But for now, the gas management situation is complicated and the smart account wallets have to be written in solidity.
00:10:30.734 - 00:11:48.484, Speaker A: That's not necessarily a bad thing. But can we do better? Can we bring, can we enlarge the ecosystem of wallet developers? Can we have smart contract wallets, the front end, the back end, written in different languages? So, yes. Can we do better? Can we have a web wallet that is cross chain, so it can hold not only ethereum assets, but can hold bitcoin, it can hold ICP, for example. It can hold Solana that is fully on chain. So the browser can verify that the static assets of the wallet are legit, where we avoid seed phrase and passwords. So it works with pass keys where we have like gas subsidies, so it's effectively free to use and where we don't have to use solidity, the ecosystem of rust developers about an order of magnitude greater than than solidity. So if you can develop your wallets in say rust or python or typescript, then you have expanded the ecosystem.
00:11:48.484 - 00:13:07.124, Speaker A: So I want to talk to you about how we do it in dfinity, where we develop a showcase wallet called doisy, where it can hold not only Ethereum but ICP assets. You can go to it right now@oise.com. And so I want to talk to you about how this is possible by using threshold signatures, some facilities on the Internet computer and then internal identity. So Internet computer first. How many of you have heard about the Internet computer? Good. So what is the Internet computer protocol is a platform that is built with and for applications of threshold crypto. What this means is that the Internet computer, the inner workings of the ICP, of the Internet computer protocol works with threshold cryptography, but it also allows applications built on top of it to use it to use threshold crypto very quickly.
00:13:07.124 - 00:14:32.232, Speaker A: The ICP works with independent known providers, whether he have node machines in their own data centers like worldwide. And it's based on the premise of sovereign hardware, much like bitcoin for example. So there are no node machines that are hosted on big tech cloud. ICP also combines nodes in order to form efficient and very performant subnets. We have a thing that is called deterministic centralizations, where the placement of node machines in a particular subnet is controlled by a DAO. And the Dariel takes into account the node providers, the data centers, the geography, jurisdiction, in order to have a heterogeneous subnet, as heterogeneous subnet as possible. So what is this complicated slide with like a lot of lines? This is really there to say that you as, as a smart contract developer, you create a smart contract on ICP, you deploy it, it's going to go into a subnet.
00:14:32.232 - 00:15:43.304, Speaker A: But the ICP provides the routing infrastructure necessary to interact with any other smart contract on the ICP network. So it routes messages like across updates. So and here we're going into a more complicated slide. I would say the two things to remember from here is that in ICP consensus works across consensus works across threshold crypto, and there is a root subnet and then we have multiple subnets and every subnet has their own public key. So what have we achieved. We have subnets with their own public key, too many public keys. Can we do something about it? So the root subnet on ICP certifies the public keys of every subnet that is being spawned.
00:15:43.304 - 00:17:14.440, Speaker A: That is. So what this creates is a situation where messages on any subnet can be very easily verified. And not only that, but a very, very light client can validate any message on the Internet computer simply by having the root public key of the root subnet and the delegation and the certificate. So that's fine. So what's the big deal with that? Right before we go into that, from the requirements that I stated, what have we achieved so far? So yes, we have a web wallet. We haven't really explained why it is cross trained yet, but we know that it is fully on chain and it is fully on chain because with threshold cryptography we can assert that contents on the Internet computer, they are legit. So with threshold cryptography we sign the contents of the web wallet and because of the delegation from the root subnet to the, to the other subnet, a browser can very, very quickly verify that the web wallet assets, they're verified.
00:17:14.440 - 00:18:32.120, Speaker A: Right? So ICP also allows, it has the reverse gas model, so developers pay for gas and you can create smart contracts on ICP in rust or Python or typescript. Okay, so next I'm going to talk about threshold cryptography. So I'm not a cryptographer, but I have a piece in distributed systems. But, so I'm going to try my best to stay high level for the next couple of minutes and describe threshold cryptography. So what is a threshold cryptography and particularly threshold CDSA? Threshold CDSA is a protocol that is part of the ICP chinky signature toolbox. Signatures are computed using secret shares and the privacy is never reconstructed. What this means is that every canister, so canister is a smart contract on ICP has control over unique CDSA key pair.
00:18:32.120 - 00:19:44.464, Speaker A: It can request signatures on behalf of users and their corresponding private key is never revealed. And so this is a key difference between ICP and Ethereum is that canisters on ICP, they can sign transactions on behalf of authenticated users. There is some confusion really on what is threshold cryptography versus multisig? Really. If we take a group, like a group setting, we say some members in Multisig situation, every member of the group, they have their own public and private key. Then a subset of that group signs a message and then it is down to the receiving party blockchain. So in the case of bitcoin, the blockchain itself can validate Maltisig. In the case of ethereum, there is a smart contract can do that, but it is down to a smart contract, the blockchain, to verify that the message is signed by m out of n participants.
00:19:44.464 - 00:20:47.234, Speaker A: So this is in direct contrast really with threshold signature. In threshold signature, in threshold signatures there is one public key that represents a group, and then the private key is fragmented across all the members of the group. It is never reconstructed, never revealed. And so when you sign a message with threshold cryptography, it is indistinguishable from signing a message from a particular user with a private key. And that is a key difference. Like our head of product and dfinity makes a very nice analogy, that threshold cryptography is akin to the limited liability corporation, while Multisig is akin to a partnership. So here really the only thing to know is that smart contracts on ICP, they can own crypto, they can sign transactions on behalf of users.
00:20:47.234 - 00:21:24.394, Speaker A: And so going back to the requirements, what do we have? Now we have a web wallet. Now we know that it can hold assets across multiple chains. So it is cross chain. We said that this fully on chain. We haven't really talked about the pasty part, but the reverse cast model is by default on ICP. And we can also call the wallet in Rust and JavaScript. And the last thing I want to talk about briefly is Internet identity.
00:21:24.394 - 00:22:11.740, Speaker A: So what is Internet identity? Two things really to take from it. Internet identity is another smart contract on ICP. It is controlled by a DaO, it is hold on a special subnet. And what it does, it is effectively abstracts away the pain of dealing with passages. And so it offers features like onboarding, like device management, like device recovery. And so it is used as an authentication layer and as a session management layer. And here we have completed sort of the list of requirements.
00:22:11.740 - 00:22:44.390, Speaker A: So using threshold cryptography, Internet identity and some of the features of ICP, we can have a web wallet that holds crypto assets. Maybe I'll stop here. Okay, so I have a couple of other slides that I can go quickly on. Noisy, you go tooz.com, you see the landing page. If you're on your mobile, you can log into Oz with just face id. The wallet is initialized and then that's how it looks.
00:22:44.390 - 00:23:09.554, Speaker A: So you can see here that you can select between Internet computer and Ethereum mainnet and your assets are there. And any transaction that you do is going to be threshold signed either with threshold bls or threshold DC DSA, depending on the network that you're at I'm not going to go through the account setup and transacting. I want to stop here and maybe leave some time for questions.
00:23:12.694 - 00:23:21.184, Speaker B: Andronicus, we thank you very much and congratulations for such a good presentation. Does anyone here have a question? We are going to take the microphone towards you.
00:23:26.284 - 00:23:58.204, Speaker C: Hello, thank you for this presentation. I would be worried about censorship. What are your countermeasures to censorship? I mean, we know we heard a presentation on Friday that Ethereum validators are already banning transactions to mixers. And in this case the account could even be frozen. So what are your countermeasures there?
00:23:58.784 - 00:24:56.590, Speaker A: Yeah, and this is a difficult problem. Thanks for the question. Right now, where we rely on censorship is simply the heterogeneity of node providers on every subnet. So the DAO attempts at least to have subnets that are as diverse in terms of the organizations that own the nodes, their geographies. And so just from that we try to avoid censorship and collusion. Like both censorship and collusions are very high in our list on how to avoid, and how to prevent and avoid them. So we don't have any other than that.
00:24:56.590 - 00:25:02.834, Speaker A: Like this is right now the solution to have as diverse subnets as possible.
00:25:10.614 - 00:25:12.994, Speaker B: We have just one last final question here.
00:25:17.174 - 00:25:44.394, Speaker D: I don't know much about ICP, but maybe you can tell us if you have a way to ensure that all the parts of the private key so understand they are running on some random vms somewhere. Do you have a way to ensure that not all the parts of the key are landing on a property of the same company or the same data center?
00:25:46.134 - 00:26:26.554, Speaker A: Yeah, yeah, no, that's an excellent question. I mean, so the only thing to say on this is that the, say the founders of threshold cryptography work in dfinity, you know, the people that have really led the field on threshold cryptography, the other thing to say is that the code is open source and the protocols have been published in conferences. Right? So like what really? So they're open for public scrutiny? That they do indeed. That the private key is never reconstructed. That is really the, that is really the risk. Right?
00:26:27.704 - 00:26:30.684, Speaker D: If someone gets like physically access to the machine.
00:26:32.784 - 00:27:02.704, Speaker A: Yeah, I mean, if you. Yeah. So the protocols, the protocols are designed so they tolerate malicious nodes, right? And so threshold cryptography really means that like there is a super majority of nodes on a particular subnet agree, and then they, and then they sign. So any, it can tolerate malicious nodes that are less than the supermajority of nodes. Right? So if there is collusion with the super majority, then the game is lost, but like it can tolerate malicious nodes.
00:27:06.484 - 00:27:11.244, Speaker B: Okay, thank you very much. And then we can conclude. Our section congratulates Andrew Nicos. Thank you.
