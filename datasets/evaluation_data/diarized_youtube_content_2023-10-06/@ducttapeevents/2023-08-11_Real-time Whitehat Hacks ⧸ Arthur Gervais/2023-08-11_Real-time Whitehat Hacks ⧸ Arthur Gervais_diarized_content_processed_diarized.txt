00:00:12.200 - 00:00:43.854, Speaker A: Yeah, sorry, I should have gone to the green room, but, yeah, missed that. So thank you for your understanding. Today we're going to discuss white hat hacks. So who lost money in hacks? Really nobody. So who made money in hacks house? And nobody. Okay, this is a surprise, but so in general, like, we don't really have a clear definition of what a hack is, at least not a formal definition. Right.
00:00:43.854 - 00:01:14.510, Speaker A: So I kind of, like, would like to put it in the bucket of MeV for now. Right. So we have this minor extractable value that most of you, I guess, are familiar with. It's this concept where, well, you do have a blockchain state, different liquidity pools, different amounts that can be traded, different bonding curves, and you can extract value from that. One possible mev source is arbitrage. Right. Liquidation sandwich attacks.
00:01:14.510 - 00:01:40.962, Speaker A: All these sources are really mev, and attacks are somewhat in between. There may be also arbitrage, and there may also be partly liquidations. Right. So we don't really have any formal definition. So really take this with a grain of salt. When I speak about attacks, don't take it too formally, because we don't really know so far. Okay.
00:01:40.962 - 00:02:27.448, Speaker A: So how many of these attacks are actually happening out there in the real world? We did look into the last four years of Defi, and we found about 181 defi attacks. So these are not all the attacks. So this is not an exhaustive study, but we've tried to be as, let's say, scientific as possible. So we try to categorize attacks in this so called Sok paper, systemization of knowledge paper. We have big tables there and a lot of analyzers. I won't bore you with the details today we're just going to discuss about a few key points that are interesting, but I do invite you to check out the paper if you want to look deeper. The total amount of losses are about $3.24
00:02:27.448 - 00:03:04.674, Speaker A: billion. So that's not a small amount. And the practitioners community has equally published numbers that are quite helpful. So here, for example, I'm citing Defi llama, which has a great interface, and they're also trying to categorize attacks in similar timeframes. But again, we don't really know what an attack is. So typically, when some people are losing money and they're crying about losing money and somebody is winning money, then sometimes this is labeled as an attack. But again, we do not have any formal definition of what an attack really is.
00:03:04.674 - 00:03:32.456, Speaker A: So how does an attack actually look like? So what is the kind of the architecture of an attack, so to speak. So I'm just going to depict one example. It's a bit of more ancient example. It's actually one of the very first flesh loan attacks. Maybe you've heard about it. BZX was attacked twice, actually, in the beginning of 2020. And this is actually one example of how an attack looks like.
00:03:32.456 - 00:04:11.790, Speaker A: I don't really want to go too deep into the details here, but we can, if you want, if you have any questions here. But on a high level, right, the attacker is taking a flash loan. In point number one, he's doing some exchanges, then a lending position, and then he's paying back the flash loan. So that's on a very high level, what this attack does. So the attacker in this particular attack had to spend about $120 in transaction fees, and he got out $634,000, roughly. Do you think he took all the money he could have taken? He didn't. Right.
00:04:11.790 - 00:04:32.318, Speaker A: So we tried to analyze this attack back then, and here's also the link to the paper. He could have gotten 1.1 million if he would have executed the attack with the optimal parameters. So, please, if you do execute an attack, at least optimize your parameters. Right. Don't leave money on the table for the backgrounders. Right.
00:04:32.318 - 00:05:06.440, Speaker A: It's just no point. All right, so this is just how an attack looks like. How the architecture of an attack looks like in this particular example of a flashlaw, and many similar attacks nowadays that are Flechelon based are really similar in the overall architecture. But now, you may wonder, well, there are these flashbots and peer to peer and front runners. So how are these attacks actually executed nowadays? Right. Back in the day, there was no flashbots, actually. So everything went over the peer to peer network.
00:05:06.440 - 00:05:58.986, Speaker A: But how does the supply chain, so to speak, look like today? How is an attack executed nowadays? If you look at the x axis here, we have the time. And if you have an attacker, if he's submitting a transaction to the network, you can see here that this transaction, TXA, may be visible to everyone. So that's not a private transaction. If an attacker goes over the public P two P network, that's a publicly visible attack. And this is still happening today, by the way. We have, I think, just two or three days ago, there was one attack that went over the public peer to peer network. Can't recall the name right now, but roughly 50% of the attackers nowadays go over so called private relayers.
00:05:58.986 - 00:07:09.054, Speaker A: Okay? But here, in this particular example, if we see an attack on the peer to peer network, what could happen? Well, an arbitrageur or frontrunner could detect this transaction and then perform two things. Either a back running bundle, so bundling the attack, and back running the transaction with an arbitrage. Or the frontrunner could try to replace the attack with its own attack and diverting the revenue towards its own address instead of giving it to the original attacker. This is also something called generalized front running or imitation attacks, if you want to look this up. What's interesting here is why do we. Why do we have here this part where these transactions may also be sent over the public peer to peer layer? Anybody an idea why we would do that? Why wouldn't we just go over private relayers? Much safer. No, it's not public.
00:07:09.054 - 00:07:55.804, Speaker A: Any idea why we would? Even if we're using private relayers, such as flashbots, blockxroute, etcetera, why would we still try to want to go over the public peer to peer network anyhow? It's because of the market share of the relayer. So roughly 90% are using this proposal builder separation. Nowadays, it's PBS. So 10% of the miners are still, or validators are still vanilla, so to speak. Validators. Right. So, if you want to increase our odds of actually making it into the next block, we should still go onto the public peer to peer network.
00:07:55.804 - 00:08:44.184, Speaker A: Right. Okay, cool. So, we've looked into these 181 attacks that I mentioned at the beginning, and we found that 81 are effectively executed over the fleshbots API. That accounts for roughly $600 million. So it's not a small amount, but some of these attacks, I may note here, for example, sorbet finance, actually, and this was rather a white hat hack. So the project at the time found the bug and then executed themselves, and they went over flashbots in order to prevent these generalized frontrunners. So they used the private infrastructure, so to speak, to secure their rescue operation, if you will.
00:08:44.184 - 00:09:04.228, Speaker A: So. But what's funny is we found that six out of these 18 were effectively accelerated by arbitrage traders. So the attacker. Or, I mean, we don't have any ground truth, right? So whatever I'm presenting today is based on my evidence. But maybe that's wrong, right? So I don't have the ground truth. The attacker didn't tell me that. Yes, they did that.
00:09:04.228 - 00:09:35.514, Speaker A: So. But based on our evidence, we found that six out of these 18 accelerated attacks were bundled by an arbitrage bot. And background over, for example, a flashbots relay. So they got kind of helped. They got help from the arbitrage trader. And here, again, this brings us back to the initial attack. If you perform an attack, not only you should optimize your parameters, but please also do arbitrage behind.
00:09:35.514 - 00:10:31.014, Speaker A: Why leave money on the table? Okay, so another interesting insight that we found from the study is that the, like, 56% of the attacks are not executed atomically. So even if you use a flash loan, the attack itself may not be atomic, because maybe you first deploy an attacker contract that I could detect right, minutes before you do execute the attack. So there's this lifecycle where we have, initially, we have a contract deployment. Then after some time, typically minutes, sometimes days even, there is the first attack transaction, and then there may be many attack transactions until the last attack transaction. So just to give you an example, the Euler finance hack, I'm sure you heard it right. Roughly 200 million lost. Luckily, everything went back recently.
00:10:31.014 - 00:11:20.922, Speaker A: The first attacker transaction of the Euler hack only took about $9 million. And I think the second transaction hit after ten minutes or so. Ten minutes is an awful long time. Right? Why didn't we exit the liquidity pools? It just doesn't make any sense. Like, why did we watch what happens and what unfolded in front of our eyes? Right? I mean, we should have had automated intrusion detection and prevention systems here in place that automatically remove liquidity from these poot. Okay. And I mentioned to you, well, we can observe when the attacker is deploying a contract, but you might say, well, it's hard to understand what the contract is doing without having a transaction that executes one of the functions and so on.
00:11:20.922 - 00:12:01.504, Speaker A: Yeah, sure, I understand. But what we can do is we can learn from past attacks by conducting a similarity analysis between past attacker contracts and past vulnerable contracts as well, and then try to somewhat see whether there's some similarity, and then ring the bells. We did a very simple study. I'm sure you can come up with much more fancy and probably more accurate schemes. But we took the bytecode of these, for example, victim contracts as well as adversary contracts. We chopped them into n grams. We created some embeddings and then tried to see how similar they are.
00:12:01.504 - 00:12:55.364, Speaker A: And at least according to our naive analyzers here, we do see that quite a few of these adversary contracts and victim contracts are very similar. So, again, what are we doing? Right. Why are we not looking at the data and trying to correlate it to past events? And we can really improve security by quite a bit. All right, so I want to dive into two case studies. The first one is a bit more elaborate, the second a bit quicker, and we will start with actually so to speak, a cross chain attack. Maybe you've heard about the elastic swap attack in December 13 of last year? It happened on Avalanche and on Ethereum. Elasticswap had a vulnerable contract, a similar contract deployed on two chains, and it got first attacked on avalanche.
00:12:55.364 - 00:13:21.804, Speaker A: Right. So here, this red logo is avalanche. This here is Ethereum. And we have four transactions. The green checkmark indicates that the transaction executed successfully. The red check mark indicates that the transaction failed. So what we saw first here is transaction zero, that we have a function name called go.
00:13:21.804 - 00:13:46.344, Speaker A: I labeled this as an attacker. I don't know whether it's the original attacker, but I assume, based on the evidence that I have, that this is the original attacker. And we have found then three transactions on Ethereum here. So why do you think that transaction one failed? Based on the evidence provided here.
00:14:00.704 - 00:14:01.128, Speaker B: Maybe.
00:14:01.176 - 00:14:03.324, Speaker A: Some network specific configuration.
00:14:05.184 - 00:14:07.244, Speaker B: That was correct for avalanche.
00:14:10.264 - 00:14:20.744, Speaker A: So the attacker was successful on avalanche. Right. And he was apparently the only one. There was only one entity, so to speak. Right. So he had success there. Right.
00:14:20.744 - 00:15:06.754, Speaker A: And you're right that on Ethereum there was a bit different setting. It's not about a configuration, but rather competition. So we have here on Ethereum, we have what we labeled as the original attacker. Then we have a white hat hacker labeled as white hat hacker. Again, we don't have ground truth, but that's what we believe there is. The attacker here tried to execute, apparently a similar function, similar to the attack that he previously did on Avalanche. Maybe this indication helps you.
00:15:06.754 - 00:16:17.292, Speaker A: Yeah, I guess that the wide attacker used fast model like this. Absolutely. So transaction two here was front running transaction one because it went over a relayer. It went over a private relay in this particular example, and due to the fact that transaction two was mined before transaction one, which I understand may not be visible in this representation, but from an on chain perspective, transaction two is effectively front running transaction one. Therefore, transaction one can no longer execute with the parameters that it wanted to because probably it touched some liquidity pools that were empty then. But then why do we have this third transaction, this fourth transaction here, transaction four. This goes back to the previous slides where we discussed.
00:16:17.292 - 00:17:12.118, Speaker A: Why should we go over both networks, the relayer networks, and the public peer networks, do you remember? So this transaction here went over the peer to peer network, and this transaction went over relayer. So it seems like we have an adversary here who's playing two games, right? He's going once over the public peer to peer network and once over relay network. Okay, I want to emphasize that this time difference here is quite important. What we found is that the attacker and the white hat hacker, they only appeared within 250 milliseconds. So what we conclude from this is that we have a white hat hacker who is bilingual, so he can both speak peer to peer network and private relayer. He's apparently doing some generalized front running because 250 milliseconds is rather quick. Right? That's automated, for sure.
00:17:12.118 - 00:17:42.000, Speaker A: It's still not high frequency trading. Fast, maybe, but it's quick, and he's quite good at bribing, too. So out of the 523 ether that were vulnerable in this particular attack, he paid 15% as a bribe. It's not little. And then he took a 10% bounty, and he paid back the rest. That's why we label him white hat hacker. Don't ask me where this 10% comes from.
00:17:42.000 - 00:18:21.894, Speaker A: It's somewhat a decentralized agreement among white attackers and victims, apparently, at the moment. Okay, what about the second incident? So, the second incident was the saddle case in April 30 last year. Saddle is similar to curve. It's an pectcoin amm. And so here, an attacker took money, and then later, a bit later, the bloksack team were able to secure another $3.8 million. And if you look on chain, this is what we can see.
00:18:21.894 - 00:19:15.496, Speaker A: Now, I have a question for you. Why can the white hat, in this case, extract another 3.8 million, although the attacker already took 9.2 million? What the hell happened here? Again? Yeah, very good point. So the attacker probably didn't take the arbitrage that it could have taken, but in this particular case, it was actually the parameters, again, from the attack that were not chosen optimally. So, again, the attacker here just left money on the table, and by tweaking the parameters, we investigated this attack. Actually, there were two or three parameters that you needed to tweak to get the remaining 3.8
00:19:15.496 - 00:19:36.084, Speaker A: million. And due to the 24 minutes time difference, this was apparently not executed atomic, like, automatically through some program, but through very quick manual inspection and reaction, really fast for humans. All right, cool. Thank you so much for your attention.
00:19:43.244 - 00:19:51.104, Speaker C: Thank you so much. There's still some time, so if people in the audience have any questions, now is the right time. So we have that.
00:19:52.284 - 00:20:37.062, Speaker A: As you mentioned, there are sometimes, like, test hacks on chain before doing big hack. What could be the reason? I mean, the attacker could do this locally in the local fork to test the hack. Why hackers do test hacks on chain, right? It's beyond my understanding. I'm not sure why, like, you can so easily connect to an archive. Okay. I mean, maybe they don't have access to an archive node, but even that, that would be weird, so to speak, right? I mean, there's no reason why, why not to connect to an archive node, fetch a later state, and see how much profit you can extract or even as an attacker. Right? You, you can, over time you can estimate.
00:20:37.062 - 00:21:13.734, Speaker A: Okay, should I hit today or maybe tomorrow is the all time high. You don't know how much liquidity there will be tomorrow in the pools. So I'm not sure to understand when they're not optimizing attacks and why they're not executing them atomically. I don't want to give tips to hackers, but we need to understand what we can do to prevent the attacks. And that's why we need to understand where they default to. Right. It's a cat and mouse game at the end of the day, at least, when doing these kinds of white hat hacks.
00:21:17.554 - 00:21:18.730, Speaker C: Any more questions?
00:21:18.882 - 00:21:19.934, Speaker B: Oh, there's one.
00:21:21.834 - 00:21:23.854, Speaker C: Sorry, can you wait for the microphone?
00:21:27.294 - 00:21:27.654, Speaker A: Hi.
00:21:27.694 - 00:21:32.114, Speaker B: So you mentioned we need to prevent attacks. What can we do to prevent attacks?
00:21:32.614 - 00:21:55.818, Speaker A: Thank you. Very, very relevant question. So security is an in depth, I mean, defense in depth approach really. Right. So the more layers you have, the more likely is that you will defend your assets. And that means an audit is the first layer. But it's only the first, right? And it's not the only, it shouldn't be only the only layer.
00:21:55.818 - 00:23:01.206, Speaker A: So in Defi in particular, I believe it's crucial to have real time defense mechanisms. So for example, you can have a monitoring system where if there's a certain amount of liquidity being extracted from a pool that you're invested in, then you should have an automated process to take that money out. Or if you see an incoming transaction on the network layer, you need to have some kind of intrusion detection system that classifies how abnormal is that transaction, and then you may want to pause, trigger an emergency pause of the DeFi protocol if you can. So 50% of the DeFi protocols we looked at are having emergency pause mechanisms. They are often, unfortunately very centralized, but according to our data, they triggered on average in 6 hours, only the pause after an attack. So there's literally seemingly no automation so far. And I think if we just have more layers, more defense layers, really.
00:23:01.206 - 00:23:10.514, Speaker A: And we don't just like naively stand by an attack being executed over hours, we should be much better off in DeFi and secure the space.
00:23:15.714 - 00:23:27.254, Speaker B: Very cool presentation. And based on your data, which defined protocols are being attacked most often and which users like normal traders, LP's, arbitrageurs.
00:23:29.634 - 00:24:09.274, Speaker A: Excellent question. So we have a table, actually, in the paper where we categorize which deFi protocol type is being attacked the most often in terms of frequency as well as in value lost. I think in both dimensions, bridges are the most brittle. So both in terms of. I know, actually the yield farming, I think, has the most hits, but the same lost value as bridges, while bridges have roughly half of the number of hits in terms of attacks as yield. Farming protocols. Yeah, roughly speaking, these are the worst.
00:24:09.274 - 00:24:10.014, Speaker A: Yeah.
00:24:12.634 - 00:24:19.974, Speaker C: So I think we have time for one or two more questions, if there are any. There is one.
00:24:24.434 - 00:24:39.944, Speaker B: Do you think that all mef attacks are bad? Because you might also think about them like, I mean, they are like a Robin Hood. They are like robbing the rich and giving back to the poor, especially if the rewards are distributed through liquid staking to others.
00:24:40.764 - 00:25:00.904, Speaker A: Right. I'll try to not judge whether an attack is good or bad. I'm sorry? Like, it's like asking, is a sandwich attack good or bad? Right. Is it okay to take money away from sandwich attackers or not? I'm not sure, so I refrain from judging. But it's true. That's a good question that everybody should ask themselves. And.
00:25:00.904 - 00:25:58.396, Speaker A: Yeah, it's not clear. I think it's very subjective, so to speak, as a question. So how would you judge the security of Defi as compared to traditional finance, then? I'm not an expert in traditional finance, so I wouldn't want to pretend I am there. I see the space being very unmaturish still with respect to real time security, really, because audits, I think the community has gotten really good at doing audits. But through the experience that we have seen, through the empirical data that we have seen, it should be very clear. That can't be everything. And it doesn't make sense that the bridge, for example, is allowed, or a user is allowed to take out all the money off a bridge in one single transaction.
00:25:58.396 - 00:26:22.404, Speaker A: Why not have some kind of a circuit breaker there? So they're very simple means to improve overall defi security through these different layers. So, circuit breakers, real time intrusion detection systems, real time pause activations. If your protocol already has it, why not? And so on. So I feel it's still very amateurish at the moment.
00:26:24.124 - 00:26:25.544, Speaker C: Well, thank you so much again.
00:26:25.964 - 00:26:26.364, Speaker A: Thank you.
