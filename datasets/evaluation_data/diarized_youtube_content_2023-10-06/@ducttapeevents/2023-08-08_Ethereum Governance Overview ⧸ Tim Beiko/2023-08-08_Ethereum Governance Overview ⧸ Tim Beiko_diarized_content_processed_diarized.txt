00:00:01.000 - 00:00:27.984, Speaker A: Hey, everyone, can you hear me? Is there a way to confirm that? Hopefully. Awesome. Well, yeah. I'm Tim Baco. I work with the Ethereum foundation. And the main thing I do there is facilitate the awkward apps calls. And so today I want to take the time to walk through basically the entire process of how Ethereum governance works, who are different actors in the process, and sort of where we're at in terms of the evolution of the governance processes today.
00:00:27.984 - 00:01:11.616, Speaker A: So I think that the right place to start this is to just kind of define what is being governed when we talk about Ethereum governance. And I think there's effectively two things that we end up kind of discussing and doing the active governance over. The first is the set of Ethereum protocol rules. So the Ethereum protocol is like a set of instructions that are defined, and there's effectively two types of protocol rules. There's the ones which every single node on the network must agree to. So these are what we call consensus rules, the defining things like the yellow paper, the beacon chain spec, the Python spec and eips. And basically, if your node does not follow these rules, it's effectively separate from the rest of the Ethereum protocol.
00:01:11.616 - 00:02:10.624, Speaker A: So this is kind of the most important part of protocol rules we need to agree on. We also have another set of rules that are more, you can think of them as nice to have. So these are like, these are all of the APIs that nodes expose to interact with infrastructure, or even that nodes use to communicate between each other. So things like networking APIs, the engine API for the consensus layer to communicate with the execution layer, and so on. All these are also things we govern on, but they don't strictly define the rules of consensus on the network. And then the other thing I think is important to caveat is that the Ethereum protocol is like the set of rules which can be instantiated in many different contexts. And so when we talk about Ethereum governance, we usually discuss like the governance of the Ethereum main net, or what's like the network with chain id, one where there's all of the accounts and balances and contracts that we care about, and obviously all of the applications that people use.
00:02:10.624 - 00:03:03.524, Speaker A: So this is effectively what gets governed through Ethereum's governance process. And so most of this talk will cover who governs Ethereum. And effectively, this is my sort of outline, and we'll start from the core and make our way out. So if we just define like the Ethereum protocol, what's being governed, and then I'll walk through every one of these stakeholders and kind of explain their role in the process to hopefully give you a better understanding of the whole thing. So first, if you think of core devs. So there's not a hard and fast definition here, but it's effectively a mix of all of the people, like the client developer researchers and others who spend all of their time contributing to the Ethereum protocol. Most of the actual client developers are spread out across ten different teams which are nested in different types of organizations, spread out around large parts of the world.
00:03:03.524 - 00:04:08.330, Speaker A: And similarly on the research side, we have people who are from academia, from VC funds nods, people working at companies, people at the EF and so on. And the entire process around governing Ethereum and core dev discussion is mostly open, so we tend to get a lot of people who just show up in the discord. I posted four examples here on the slide, folks who over the years have showed up and made really good contributions. So first little bubble here is Danny Ryan, who came with no context of Ethereum and over the years helped ship the beacon chain, the merge, and now coordinates a lot of the work. On the proof of stake and research side, there's also POTUS, who is just a random person who showed up in the discord to discuss Ethereum and then now works with the prismatic team. Proto Lambda similarity with someone who just showed up even before we had a discord, helped set it up and worked on some of our research problems and eventually ended up doing a lot of really valuable work on the Beacon chain, on obviously proto dank charting, and now on l two s. This last example I really like.
00:04:08.330 - 00:05:00.196, Speaker A: So we had this person called Seamonkey who showed up during the merge, who literally ran every possible client combination on their home computer to see if there were any issues or bugs and kind of report those and no one had ever met them before. It's really kind of this ecosystem of people who come together and just end up solving protocol problems, but there's not a ton of barriers to get people in, and I'll give a quick shout now if this is something you'd be interested in doing. We've started a fellowship program which is basically a four month. You can think of it as like an internship or grant for people to come in and work on open protocol problems. We have an application open right now, so if you scan this QR code or you just go to blog dot ethereum.org comma, you can see the application, you can apply and get paid to do this stuff for the next four months. But yeah, so high level core dev is this very rough group.
00:05:00.196 - 00:05:54.692, Speaker A: There's not a clear definition. The way I think about it is people who are focused on the Ethereum protocol beyond just a single EIP. So they're not coming here just to push a single change, but they really care about it over a long period of time. And this generally means they take responsibility for the security of the system as a whole. And those are the people who come to consensus on like, what changes should we make, the specs, the implementations, and should we propose these in the network upgrade to Ethereum? And I think this is a very loose definition, but there's a ton of value in actually keeping this loosely defined. Afri said it better than I ever could in a GitHub comment on another project who wanted to have a more closed and formal definition of core devs. But I think he hits on all the points why this is actually quite valuable to have it be a vague group, even though it's harder to paint a picture of exactly who is a court of, and some things we do to keep it open.
00:05:54.692 - 00:06:27.170, Speaker A: So one, all of the calls end up recorded or live streamed so people can follow them, even though they're not necessarily in touch with everyone on the calls. And we also have these forums like ETH research and ETH magicians, where a lot of the ideas and proposals get discussed in public, and anyone can come in and opine on them. So the next kind of stakeholder set in the governance process is EIP champion. So similarly to core development, anyone can sort of write an EIP. There's a template that eapstallethore.org dot. If you don't know EIP stands for Ethereum improvement proposal.
00:06:27.170 - 00:07:29.894, Speaker A: And the idea there is like this is the formal process to make a specification for a change you'd like to do. In practice, the larger the change you want to propose, the more you're going to have to work closely with the different client and research teams to understand the full impact that it has on Ethereum. And if you do take this on, I think the role as an EIP champion is, can you demonstrate that this is a valuable change and that it's not going to break Ethereum and then show that there's momentum and there's a desire in the community to see this change. And the way this usually goes is people come up with a new idea for Ethereum and then this would be super valuable, but it has a security risk, often a DoS risk. I just did a quick search on ETH magicians, and you can see if I search for dos, pretty much every major EIP that we've been talking about recently has a form thread about dos. So you have the account abstraction 14844, you have the withdrawal EIP. So this is where a lot of the actual work ends up happening, figuring out a design for your EIP that's actually safe for Mainnet.
00:07:29.894 - 00:08:43.072, Speaker A: And then if you do everything right, then your EIP would might be included in an upgrade eventually. And here's an example that I think recaps the whole process quite well from EIP 1153, which folks from the Uniswap team championed. They did all the implementations, they added a bunch of tests, they kind of gathered support by different projects that this was valuable. And then they spent a ton of time just going back and forth with the different client teams and trying to see are there any objections here? Does this make sense to prioritize? Is there anything they can do to help with the process? So one question that usually comes up at this point is like, so if the core devs and EIP champions write all the specs, write all the code, doesn't this mean they effectively control Ethereum's governance? And my answer is no. So rest of the talk will focus on everyone else beyond those two groups and the impact that they can have on the Ethereum governance process. So first, if you start expanding outward, the next logical step is consensus participants. So these are either, you know, miners on a proof of work network or validators on Ethereum proof of stake today.
00:08:43.072 - 00:09:20.374, Speaker A: And so if you have a set of change that core devs and EIP champions agree, we're going to propose this network upgrade. You need at least one of the consensus participants to agree to run this software for the network to upgrade. Otherwise the upgrade just never happens on chain. So this is really like the bare minimum requirement where consensus participants are required to at least buy into the upgrade. Otherwise you can't have this new feature happen. And obviously, if only part of the consensus participants upgrade, and not all of them, then we effectively get a chain split on Mainnet. And the way this would work on Ethereum.
00:09:20.374 - 00:10:15.818, Speaker A: So under the proof of stake algorithm is if the consensus participants on both side of the fork disagree with each other, they'll simply start leaking or burning the ETH of the validators on the other side until they represent less than a third of the stake, so that each chain can like respectively finalize on their own end. And one thing that's worth highlighting in Ethereum is that core devs as like a whole just don't run a significant percentage of consensus nodes. So here are just some quick back of the envelope numbers. About a year or so ago, two years now, ago, we announced this client incentive program, which the EF basically granted a bunch of validators to all of the client teams. So this was about a total of like 1400 validators. But imagine client teams are secretly colluding and they have like ten x more validators than this hidden somewhere that no one knows about. So this would put them at about 14,000 validators.
00:10:15.818 - 00:10:48.384, Speaker A: Today, there's about 600,000 validators on the network. So, you know, anywhere within this 1400 to 40,000 bound gives you like about 0.2 to 2.5% of the network that, like core devs, could effectively upgrade to if they wanted. This still means like the vast majority of the Ethereum network just wouldn't follow their upgrade, and there'd be a small minority of the consensus share. And then imagine a world where even the EF decides to join forces with them, and the EF's ETH balance is public. It's about 320,000 ETH.
00:10:48.384 - 00:11:27.980, Speaker A: First of all, this balance is not staked. So the EF would have to deposit all of this, activate all those validators, which would delay things. But even if you went through this entire process and had this worst case secret should always scenario for core devs, you have about 4% of the network with the EF and core devs. So this shows you the overwhelming majority of the consensus participants are folks external to this. And so this acts as a sort of check where, you know, these are the people that need to be convinced that this upgrade is worthwhile to run. But even if this happens, consensus participants don't necessarily get a final say on the state of the network. So the other thing that's really important on Ethereum is node operators.
00:11:27.980 - 00:12:12.794, Speaker A: And this is why we spend so much time talking about decentralization and like the gas limit and stuff like that. And the reason is that on ethereum, every single node on the network validates every single transaction. And a little sidebar here is that validator is therefore a terrible term, because it sort of implies they're the only ones who make sure the chain is valid. And this is not true. Like, every single node that you can run, you don't need 32 ETH for this, you just need to run. The software will run through every transaction it receives and make sure it's valid. So if you have a blockchain network where only the validators are the one running nodes, they can collude and change the protocol rules without anyone noticing, because nobody's standing checking that those things are actually, that those transactions and those blocks are actually valid.
00:12:12.794 - 00:13:36.068, Speaker A: And the smaller your validator set is, then the easier it is for them to collude, obviously. And collusion is kind of the negative version of this, but you could imagine a less malicious version which is just having a correlated block. They all run the same software in the same environment or whatever, and then there's this issue, and that affects the stability of the whole network, or kind of creates a bug in the entire network. So if we have a blockchain network where instead the non staking nodes are abundant, when you propose a block as a validator, you know that if it's invalid, say you mint yourself like 1000 ETH, it'll be rejected by both the other staking nodes who are different to you, and the non staking nodes which validates the network or validate the blocks every time they see it. And again, sorry for the terminal, for the terrible terminology here. So sort of that you can think of like the benefit you provide when you run a node is you're sharing your view of what the correct chain and correct protocol rules should be to all your peers on the network and helping like counter any malicious block that would pass in, and having enough of these acts as like a deterrent to any validator to propose an invalid block, because they know that they'll just get rejected from the chain and they'll forego the rewards they could have had if they would have proposed. And again, here I'll show a quick grants nodes that the EF announced yesterday, where they want to try and get folks who historically haven't run nodes or in different contexts want to set up nodes to do so.
00:13:36.068 - 00:14:31.474, Speaker A: So if you haven't run a node, or you have a community somewhere that like, would like to get into this, again, scan this QR code or go to esp dot ethereum.org. And yeah, you can apply for a grant to run a node. So if we have, okay, so we have the, you know, core devs, vip champions, consensus participants, node operators, and what's like the next steps in government, in governance, then that would be the users of Ethereum. And the way this, this question often comes up is, you know, can a single project decide which Ethereum fork wins if there is like a good nettress fork? And here it's just worth explaining real quick what happens if there is a fork on the network for all of the smart contracts and users on the network. So at a high level, at the point of the fork. So when there's like a disagreement about the state of the chain, the entire network state would be duplicated. So every balance, every contract, every token, every NFT will end up on both sides of the chain.
00:14:31.474 - 00:15:00.164, Speaker A: And there's things for which this is like mostly fine. So for example, like the ETH asset itself can be on different chains and have a different price. So this is what you see with ETH versus ethereum. Classic. When the fork happened, both assets sort of went on their own way and they just trade differently. You can imagine some on chain nfts being the same, where they don't have a dependency on anything else. So the community can choose which one is right or wrong, or maybe there's a market between the two where one is just more valuable than the other.
00:15:00.164 - 00:16:04.262, Speaker A: But there are some projects which really have to make a decision, because they depend on something outside the chain that can't be duplicated. So any sort of real world asset, including stable coins, if there's just $1 in a bank account, it obviously can't map to two dollar redemption tokens on chain if you have an oracle. Similarly, if it's reporting like the value of ETH on a centralized exchange, it needs to decide which ticker from which centralized exchange maps to which chain, and similarly things like bridges. Obviously, if you're depositing funds from chain a to chain b, you want to make sure that there's only one place the funds can be coming to and being sent back to. So this means that if there is a fork like this, obviously as a whole, all of the users of Ethereum and projects built on it have a huge say in governance, because they can coordinate on which fork they should use. And the better their coordination is, the less issues there will be with the actual transition. But this also implies that it's extremely hard for a single project to do this if you have 99% of the projects going on fork a.
00:16:04.262 - 00:17:04.350, Speaker A: Even if a major project decides to go on fork b, it doesn't guarantee that all these other projects have to follow it. It just means that it'll create some friction during this transition. But yeah, there's really an element here of this. Loose coordination within the ecosystem is extremely powerful, but also very hard to align on because there's not a single formal process to do so. And I think if you go even a step beyond this to what we often call the community or bankless people will call layer zero, um, you have an even more like, I guess, um, high level version of this idea, which is that like at the end of the day, Ethereum and, you know, a bunch of other systems are just like the shared concept we agree to. Um, and, you know, like that we sort of come to consensus on as humans, uh, as having a different set of properties. And when we have, you know, changes we want to do in like a happy case, we can easily define processes for this.
00:17:04.350 - 00:18:14.024, Speaker A: So we have, you know, the EIP process to like specify things and network upgrade process to actually activate changes and so on. But if there are extreme cases, you know, things like contentious works or social slashings or whatnot, then it becomes much more of a social question of like what does the community want and what second order impacts are they willing to tolerate around this? So obviously, you know, anytime there's like a fork and the DaO on Ethereum is probably the best example, it affects the credible neutrality of the platform. Like can you actually build something on this and have it not change? If there's forks all the time, or if people can't have good guarantees about the stuff that they've deployed on chain sort of remaining there, then it hurts away at the platform. Stability of Ethereum. There's no official constitution or written social contract on this, but this is effectively what the community ends up agreeing to. And it can massively move like what Ethereum is if there's enough of a desire to change what we coordinate on. And the reason why this is possible is these systems are permissionless and open.
00:18:14.024 - 00:19:12.954, Speaker A: If the Ethereum foundation or any client team owned everything and no one could take it and run with it, it would be much harder for a community to do this. One example I thought of Ethereum about this is bitcoin as like official website. So bitcoin had like this bitcoin cash fork many years ago, and today there's two sort of, I would call like first tier one domains, bitcoin.com and bitcoin.org. And they point to completely different projects. And regardless of what you think about bitcoin cash versus bitcoin, the fact that this is even possible shows you the sort of power of these permissionless systems where like a fraction of the community is able to come and like sort of disagree with the rest and set up their own kind of alternative fork and come to consensus that this is what they want to call bitcoin or this is what they don't want to call bitcoin. So hopefully this gives a good overview of the different stakeholders in the system.
00:19:12.954 - 00:19:58.822, Speaker A: I think that maybe the takeaway here is that we have these groups that are closer to the protocol that have more formalized processes. And oftentimes these appear to have a greater influence on the network just because we're able to formalize their actions a bit more. But I would argue that the more you grow outside of this circle, the more power there actually is within these groups. But the coordination costs just grow more and more. It's a harder power to wield in a way, but there's a ton of value in having this. The rest of the talk will sort of walk through what would happen if we didn't, or how in practice it has been used on Ethereum. And yeah, I guess I front ran my slides here, but.
00:19:58.822 - 00:21:02.596, Speaker A: So, yeah, so, like, why don't we actually feel these stakeholders more? And I think part of the reason is like, core devs try to listen to other parts of the community and have like a strong incentive to not push an upgrade that's contentious or could break the network, because if they do so and like, the network splits and, you know, things are chaos for like the next six months, they're the ones who actually have to, like fix this and deal with it over by writing the actual software. And I think it's going over a couple examples of contentious eips that's been proposed and how they've ended or not ended up in upgrades. I mentioned this earlier, the DAO is probably the first big contentious thing in Ethereum's history. Definitely the most contentious. So there was this huge hack, about 15% of the ETH supply was affected there. What was interesting is core devs actually took a pretty neutral stance where they put out software that let users flag whether or not they wanted to run a network upgrade that would help repair the damages caused by the hack. And they let the users decide whether or not they wanted to activate the software.
00:21:02.596 - 00:21:48.684, Speaker A: The vast majority of users decided that they wanted to, and this is what we still call Ethereum today, but a subset of the community did not want, and this is where Ethereum classic comes from. Then after that, there was this large hack or bug, I guess, in Multisig wallet that was developed by parity, which effectively bricked all of the funds that were held in any parity multisig wallet deployed at that time. And there was an EIP proposed to address this EIP 999. And one thing that's interesting here is this was a pretty huge hack. It affected the second most used client team. So parity and the leader of the parity team, Gavin, was one of Ethereum's co founders. So it's hard to think of a bug that would affect the party that's more central to Ethereum development or like history in a way.
00:21:48.684 - 00:22:32.704, Speaker A: And despite all of this, the client teams never proposed EIP 990 in an upgrade because of the strong community pushback. So this is an example where like, obviously the interests of, you know, some of the core team were like strongly aligned with having this change through. But like, the community pushing back meant that core devs didn't even try to like run it through the upgrade process and potentially get a fork because it felt like the odds of the fork actually working. And, you know, people koala sitting around this pneumonia theorem were quite low. And one, I'd say, less extreme example a bit after that was progpal. So EIP 1015, seven. The idea here was to change how proof of work worked on Ethereum to keep it more ASIC resistant, which was stated as a goal in Ethereum's yellow paper.
00:22:32.704 - 00:23:31.284, Speaker A: I'd say there was some mild to moderately high support within the core dev community for this, but it never got proposed in the network upgrade again due to community pushback around not wanting to change the change, like the way that the market structure was developing on proof of work. And then lastly, I'd say the merge was this huge transition to the network. So we moved from proof of work to proof of stake. And this is something that had been part of Ethereum, like quote unquote roadmap since day one, where it was always a goal of trying to get Ethereum off proof of work. And I think because of this, there was tons of community support. Obviously, miners were the only ones who were opposed to this because it ended their proof of work business. But I think this was a case where cordevs felt strongly enough to propose this upgrade, thinking that you'd have the vast majority of the community adopt it.
00:23:31.284 - 00:24:20.850, Speaker A: And this is effectively what happened. There was still a tiny minority that decided not to upgrade called w. I guess Ethereum works. It still exists, like, chugging along, but I think today, you know, the over 99% of like value and whatnot is all on Ethereum, which is transition to proven stake. So I think it's worth like, just pausing and highlighting, like, what are the pros and cons of, like, the system of governance that we have? One pro, and I've tried to emphasize this a couple times, just like, because it's permissionless, anyone can show up and participate. So there's no sort of, like no sort of formal gate you have to cross or like, you know, like checkbox, you have to fill to participate in Ethereum governance. And I'd say, you know, the failure mode of something like this is like best encapsulated in this essay, tyranny of the structurelessness.
00:24:20.850 - 00:25:45.634, Speaker A: If you've never read it, the strongly recommended which talks about all the ways structures like this can go wrong. And then one thing that's also very good about this process, it's, I would consider it quite capture resistant, where if there is an attack on the governance process because it's not extremely formalized, like, oh, you have to do thing a, thing b thing c, and then your change can happen, then we can change the process in response to attacks. And this means though, that if you come in as an outsider and you don't have a ton of context, it's really hard to understand the governance process really well because again, there's not like this checklist that tells you exactly the things you need to do. And then the last pro, I'll say is this process where we have all these different stakeholders which each can affect the outcome of governance, gives us a lot of checks and balances by different parts of the community, which helps changes when they are adopted, be adopted by all of Ethereum and make sure that everyone has buy in into this. And then obviously the flip side of this is because we have this huge diverse group of different actors with different incentives, it's really hard to gauge what the community consensus is when there is a more contentious change. I'll end with just some thoughts on where we're at in terms of Ethereum governance and what the potential like future looks like. So one thing I've noticed in the past couple of years is there's more and more stakeholders who are involved in this.
00:25:45.634 - 00:26:33.024, Speaker A: So we've gone from a world where like, you know, no one builds on Ethereum, but like, we have a lot of apps on Ethereum, and I think today we're like in this third phase where we have a lot of applications and infrastructure built around Ethereum who are wanting to start to contribute back to help build this infrastructure. So we have l two s, infrastructure teams, major applications that each want to like contribute back to the protocol and help, you know, improve things. In parallel to that, though, a lot of like the easy, low hanging fruits that we could do to make Ethereum better have basically been done. So we have what are left. I call this like high hanging fruits, where, you know, all these new proposals and like larger changes we want to do. They do involve complex trade offs which like have reasonable arguments on both sides of it. And there's not as many, just like net wins without any potential downsides.
00:26:33.024 - 00:27:31.302, Speaker A: So if you combine those two things together, you know, you have more people that need to agree on stuff, and the things they need to agree on have like more trade offs. It does make it harder to move things forward. There's more friction in like changing Ethereum, and in addition to this, there's more value built on Ethereum, there's more users and whatnot. So it means that like by default things sort of slow down. And one open question here is like, is the end game or like natural path to ossify by default? Is there like another alternative here? Is this sort of doom to ossify? And I think, you know, while we're like thinking about the big question, there's a few tiny things that myself and my team and others have been trying to like, do at the margin to help make governance a little bit better and a little bit cleaner. So first is just trying to get an align the specification format on the consensus and execution layer. So both these parts of the networks started in very different circumstances, which led them to use different tools.
00:27:31.302 - 00:28:58.840, Speaker A: And hopefully we can align all of that together so that if someone wants to make a change to Ethereum, or reason about the changes proposed to Ethereum, there's a single coherent place they can look at, rather than four different things that may or may not look like each other. I think another thing that's really important is trying to be a bit more asynch in our process and a bit more long lived. I mentioned ETH magicians before, so trying to use this as a way to gather feedback, signal changes and collect opinions rather than things like calls, or even worse, like comments on call agendas. Because hopefully it's a bit more lasting and it lets people kind of get a record of what happened and understand the context a bit more. And then one larger moonshot that we're trying is this summer of protocols initiatives, where the EF is funding about 30 ish people to spend the entire summer thinking about hard problems and protocols, not even just in blockchain, but across any domain, with the hope that some of those insights are useful to figuring out what we do to Ethereum. I guess some of the open questions, or just things I've been thinking on is how do we trade off this speed versus stability? If we are going to a world where it's going to get harder and harder to make changes in the future, this implies we should do a lot of the changes we want to do now so that we can. But this kind of comes at the cost of stability, where there's more stuff built on the network and we want to make sure that we're not breaking everything.
00:28:58.840 - 00:30:11.996, Speaker A: You're requiring people to upgrade way too often. I think the other big question is how should we think about l one and l two, standardization, if at all? Is there something there that if ethereum l one stops changing or becomes much slower? Are there parts of the ethereum governance that should extend the l two while at the same time leaving the room for l two s to create way more diverse ecosystems where they're not all constrained by the same processes? And then lastly, I sort of touched on this already, but is there a way that we can make this entire process less focused on live calls? I think the calls are great because they give us momentum. They are forcing function for people to show up every week or two and make progress. But they are obviously kind of a bit restrictive in that you have to be awake when they happen, you have to speak English and be comfortable speaking on the spot and debating things on the fly. So is there a way we can slowly move things to be a bit more async without hopefully losing too much momentum? And that's all I had. Thank you so much for listening. I don't know if there's time or a way to do questions.
00:30:11.996 - 00:30:22.944, Speaker A: Happy to do so if we can. Otherwise, I'm Tim Baco on Twitter. Or you can write to me tim.org. I'm happy to chat about governance in those spaces. Yeah, thank you very much.
