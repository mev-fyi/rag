00:00:00.680 - 00:00:24.194, Speaker A: Okay, I just wanted to introduce you first, Jargo. You are so eager to talk. Welcome again everyone to the flower stage in East Prague on Saturday. The next talk will be from Jarko Sakinen. He will be talking about logging to Linux using Ethereum name service. So a big round of applause for Jarko.
00:00:25.254 - 00:00:46.864, Speaker B: Ok, thank you. So, ok, I'm Jarko Sakinen and. Okay, those are visible there. Okay, perfect. I'm a software developer, Linux kernel hacker and also Linux kernel maintainer. I maintain mostly crypto stuff. I'm a co maintainer for Linux keyring.
00:00:46.864 - 00:02:13.324, Speaker B: I'm co maintainer for TPM two and Intel STX and that sort of stuff. So when it comes to Ethereum, I'm not really interested on Ethereum per se, but I'm more interested because I'm the person, if you for example, set a new key type to kernel, I'm the person with the veto right for that key type because I review all that stuff. So when it comes to ethereum, my main interest is to find something in that ecosystem that will also be like for the benefit for other ecosystem that use, for example similar basic like crypto keys. In the case of Ethereum it would be the p curve that also bitcoin uses and some other blockchains. I don't know if the estonian government uses those also for their ids, but it could be possible. I don't know, but anyway it's very common. So from that perspective it would make sense to enable that curve, for example in the kernel and some other like even in some like standard hardware chips and stuff like that.
00:02:13.324 - 00:03:57.610, Speaker B: So my original idea was to develop a PEM module for Linux, which is basically like a shared library module. You can put it in the config file and it will give based on credentials like yes no answer to you and you can pile them up and all the session managers like GDM in GNOME and others use those to make the decision that you get in or out. And Ethereum ecosystem has some tools for it. For instance, this Ethereum service that can be used basically like corporates use LDAP store key value storage where you can store data per person and use that for authentication. And then there's this kind of key exchange or authentication theme called Cive. And that in particular would be in my opinion suitable for OpensSH, which already has this feature that you can have multiple different ways to exchange. The problem implementing that for OpensSh comes down to that ens does not provide any C libraries which would be like, I think with all these technologies it's a huge minus that almost none of them have any basic C libraries.
00:03:57.610 - 00:05:29.364, Speaker B: It's super important if you want to get the data centers and the Internet background still today to have C libraries because then when you have the CA libraries like the legacy but still wisely used like DNS daemons and software like that would just take those CE libraries and add in, you know, the Ethereum shenanigans in the existing like software which is not today possible because basically all of it is implemented with web technologies. So I would highly promote to also do standard basic C libraries. I did some experiments with lip curl, lip sodium and there was one third library, I don't remember what it was, but anyway mostly with lip curl and lip solo. All right, and lip chili JSON and I could do like basic quite within like hour. I could do like basic like lookups from it ens and basic transactions and stuff like that. So, so it wouldn't be that huge of an effort. And if you had the C library then you could easily, easily move into extending like openssh to support cive for example.
00:05:29.364 - 00:06:44.646, Speaker B: But the main problem for me came out by identifying the two roles. Well this exists like in any remote attestation or authentication scheme. So you have basically two roles. You have the user who is logging in and then you have the machine which also should have an identity. And here the problem is that both parties need a private key, but neither of those private keys should be exposed. So I kind of gave up implementing anything the module because I thought that this is much more like important problem to solve. So how to store the identities? Well there's, there's this whole market of these crypto wallets and they probably work for you if you are particularly interested in Ethereum.
00:06:44.646 - 00:07:30.954, Speaker B: But they don't work for me because I haven't eaten yet. The red peel. I do have a yubikey, but I use that for my, when I access for kernel.org I use Yubikey for SSH authentication. I use it because I have to use it. So something is needed that could bring almost like equivalent characteristics as crypto wallet, but with a lower barrier. So I think tpms, especially the new TPM two standard or seminar, it's ten years old, but like as an industry standard, still quite new.
00:07:30.954 - 00:08:36.074, Speaker B: Every PC has one of these and all of them did today support TPM two, its primary key. It doesn't store any primary key, it actually stores like a few random seeds. So that way the trusted computing group can add new algorithms to the standard without changing the hardware. Hardware only needs basically a firmware update. So if they want to add a new elliptic curve type, they first make the decision in this cross corporate industry group called TcH that, ok, we want to add this. Then they update this single specification. Hold on, I can open it here and I'll find it out.
00:08:36.074 - 00:09:27.416, Speaker B: Okay, so, and they have four x and four elliptic curves. They have this table that these are like at the moment, TPM chips support this set of elliptic curves. So the one curve is obvious, curve is missing. There's the Nist curve p here, NIST p 256, 256 R one and. But, but the blockchain stand, semi standard curve p two five six k one is non existent. So. And also already today, TBM two chips can do like ECDSA, but only with these elliptic curves.
00:09:27.416 - 00:10:51.788, Speaker B: So ECDSA is supported. They support elliptic curves. So they have all the like the computational tools to also support like this curve that bitcoin and ethereum use. So it's mainly just get that thing decided in TCT level. And I talked with one like pretty senior member of that group, and it was not like that, at least from that person that he said that it was not like that he would be against adding this curve because block says or whatever it was, only that he did not know that anyone uses p two five six k one. Because if you do your crypto stuff here and are not involved in blockchain there, then you might sometimes see some curve lacking from some standard. It might be just because of pure ignorance, not because they evil corporation don't want to add it or NSA wants to prevent adding it or whatever ever.
00:10:51.788 - 00:11:47.172, Speaker B: I heard this Internet rumor that the curve does not exist in this table because NSA does not want it to be there. But I don't believe so because that was based on that. Because K one is based on prime numbers that for some reason NSA would only want to have composite number, but that cannot hold because also two 5519 curve is based on prime numbers and at this it's claimed to be more secure p. So, so that kind of, kind of disapproves that that Internet rumor. So where. Okay, true set computing. It's trusted computing anyway.
00:11:47.172 - 00:13:55.124, Speaker B: So I think a good call for ethereum to make it spread more easily and get the same benefits as with crypto wallets, like to every PC and even a lot of Android devices, like a huge spread would be to get an id to that PDF file that would like enable most of the laptops in the world to have a hardware crypto wallet. So it would have like huge volume and yeah, it would bring equal benefit for both bitcoin and Ethereum and all sorts of blockchains that are based on this. So one thing that I maintain in the Linux kernel is Linux kernel keyring. It's runtime keying and it's used for when you log into gnome or whatever to store some sessions keys and stuff like that. You can define various key rings in it and key hierarchies. And it also has an asymmetric key type that can import like X 509 ASN one encoded, pretty standard stuff. And the current currently, for no particular reason, even in software, it only does ECDSA verification and only for the NIST curves I'm planning to at some point implement also signing for ECDSA just in software, and at least in software also support for this blockchain curve type.
00:13:55.124 - 00:15:31.864, Speaker B: But the first thing that I started working on was this kernel path set that can sign stuff with the private key in the TPM boat using RSA letters are in the wrong order. PKC has one batcheme because you need to pat what you sign in RSA to get it actually secure. And then also I implemented ECDSA for the NIST curves because those are in the table and here I don't. So it's going quite well. So it's relatively simple now to create. Normally you would have this primary key here already, like in, so you usually, when you use TPM two, you don't usually use its non volatile memory. You only use the non volatile memory in TPM for like, like to have some, some primary keys or like root keys for the TPM itself for like creating other keys.
00:15:31.864 - 00:16:34.186, Speaker B: So this is just for the remote demo. I create like a simple primary key here and then I export it out of the TPM. And then I create like a elliptical curve with openssl. And what does this do? Okay, then I import that, then I convert that back to do various steps. I don't remember exactly all the details from this, but anyway through these steps I create the key and finally export ASN, one that is only loadable by the TPM chip itself. So it exists in the hard drive, but it's sealed with the TPM. Only the TPM can unseal it when it does an operation.
00:16:34.186 - 00:17:41.794, Speaker B: So basic gist when using TPM for signing operations is that you don't keep the key always in the TPM. They have very low memory. But instead when you sign, you load the key inside the TPM, it will open it up inside the TPM. Then you do the sign operation and then you flush the loaded key out of the TPM and. Okay, so for NIST curves I have now like. So hold on. Okay, so to make this less confusing, these operations here are all like for doing necessary conversions, an encryption for a key that was originally created by OpenSSL and not TPM by itself.
00:17:41.794 - 00:19:07.174, Speaker B: So this whole framework support importing the existing private keys for the STPM keys. Okay, so anyway with this NiST curve based keys I can now do like perfectly signing and verification operation, which is like the whole gist of what it needs also for blockchains. So and basically all this code that I've done for this would only need like few line modifications to be able to sign. Also like p curves. So I'm planning to get this feature upstream for Linux 6.11. So at that point at least the software stack almost super easy. There's my easy DSA encoding code.
00:19:07.174 - 00:20:27.130, Speaker B: So, but anyway, so after this is in, if TCT added that one algorithm id to their table, then Linux could superven in few months. Also like signing these blockchains. And whether that's worth it or not, I would think it from this perspective, would the world be better place if dbms could sign blockchains or not? I think crypto wallet might make sense for some, but I think this could be more inviting way to do it because then anyone then you could easily for example have even for Windows, a crypto wallet app that would automatically like just like with Bitlocker, it would just automatically use the hardware ceiling. Yeah. So in this example. Hold on. Okay, yeah, I'm almost done.
00:20:27.130 - 00:21:23.136, Speaker B: So in this example, as you can see there. Okay, no, that's RSA example there. It's Nisq. But if I change that whole transcript by creating like six P, which is the one that Ethereum uses at the moment it is not accepted by the TPM. So this constant, this is what would make a lot of sense for all blockchain technologies and I think it's possible to do so. Okay, so, okay. TC members is quite costly.
00:21:23.136 - 00:22:06.024, Speaker B: So it at most would make sense for Ethereum foundation or bitcoin foundation as the whole. But Ethereum has like members of companies like Microsoft who invest a lot to Ethereum. So if I was active in Ethereum, I would contact these companies who have investment in Ethereum and talk them about this issue and then they could within DTC meetings bring this up. So I think that might be possibly the best road to get this in. But yeah, so questions.
00:22:12.044 - 00:22:26.864, Speaker A: Thank you very much, Jarko. We have four minutes for questions. If we have questions from the audience. Feel free to ask. Don't be afraid. Yes, one question here. Mike is coming.
00:22:31.164 - 00:22:33.156, Speaker B: Yeah. Do you have any idea about the.
00:22:33.220 - 00:22:35.204, Speaker C: Details of the process for getting stuff.
00:22:35.244 - 00:22:37.356, Speaker D: Through the TCG and how long it takes?
00:22:37.380 - 00:23:08.564, Speaker B: Normally I don't know, but for intel it's just like that when they otherwise do like a BIOS update and they will also, that will also like include like the update for their, for their firmware TPM. So depends. But I would say that within like at least six month timeline it is quite probable that it would end up so not that huge timeline. Thank you.
00:23:09.944 - 00:23:13.084, Speaker A: Any other questions? One more over here.
00:23:16.314 - 00:23:35.874, Speaker D: Thanks a lot for the work. Two years ago I was talking to a guy who was, who wants to, who was like planning on building lightweight ethereum wallet. Thanks. With Yubikey's actually, or some other. So I think it's very related to what you are talking here about. So I would love to get you in touch.
00:23:36.034 - 00:23:36.594, Speaker B: Okay.
00:23:36.674 - 00:23:43.698, Speaker D: Yeah, but the question is, are you personally looking for a grant on working on this as well?
00:23:43.866 - 00:24:06.774, Speaker B: Yeah. So in the sense that I spent last nine days implementing the basic feature for kernel like TPM, two asymmetric keys and it can already do ECDSA with the NIST curse and it would be quite easy to add later on some new, new car types.
00:24:06.934 - 00:24:08.222, Speaker D: Amazing work. Thanks.
00:24:08.358 - 00:24:09.634, Speaker B: Yeah, thanks.
00:24:12.054 - 00:24:19.794, Speaker A: More questions? We have two more minutes, if there are any. The last. Yeah, there we go.
00:24:22.534 - 00:24:28.034, Speaker C: Do you intend on doing anything more on this and if so, what? Or like.
00:24:28.494 - 00:25:09.024, Speaker B: Yeah, so since, since DCT does not yet support this curve type, so after this patch goes to the main line, I was thinking so that at least for some prototyping it would make sense to have the ECDSA for this curve type supported by the kernel in software. No? So I was thinking to implement that next, such as software keys for easy DSA signing.
00:25:13.684 - 00:25:15.984, Speaker C: Where, where do you need help?
00:25:16.764 - 00:25:17.824, Speaker B: I don't know.
00:25:20.124 - 00:25:23.584, Speaker C: If there's anyone in the room who's interested in supporting this.
00:25:24.724 - 00:25:55.714, Speaker B: Well, I think I don't have time and energy to fight with TCT, so there must be, for example, Microsoft is investing to both TPM, two as a technology, and also to Ethereum in the data center. So if I was active in Ethereum, I would talk to Microsoft, maybe.
00:25:58.114 - 00:25:58.786, Speaker A: Cool.
00:25:58.930 - 00:26:07.054, Speaker B: Because I think for Microsoft it would make a lot of sense to have this, especially if they use it in the data centers.
00:26:10.914 - 00:26:32.824, Speaker A: Cool. Thank you everyone for your questions. If you have other questions, you can catch Jarco. We have to continue with the schedule, but big round of applause for Jarko for this thought provoking talk. And our stage will continue in four minutes at 1130 with the schedule. See you in four minutes.
