00:00:00.320 - 00:00:57.544, Speaker A: Hey guys. So a big word in this space is composability. In this talk, I'm going to go through some of the high level smart contract architecture, like network architecture and how they fit together. I'm going to talk about some of the changes we've made with my team at Shell protocol and then we'll talk about how, how that has ripple effects for the user experience. So this is the problem, how we talk about DeFi and the user experience that we're all familiar with today. For a quick example, imagine that you want to use bitcoin as collateral to buy an NFT. In our dream of money Legos, you can stake, borrow, swap, swap again and buy your NFT all in one transaction.
00:00:57.544 - 00:01:57.684, Speaker A: This is the reality. You have to use multiple apps, go to multiple websites. Worst of all, make multiple transactions at every step along the way. You're spending lots of gas and you're vulnerable to Mev. So how has DeFi dealt with this so far? The first model that we've, that we've noticed is we've called this the sequencer adapter model. And so basically the way it's set up, there's a superficial problem which is that users can only interact with one smart contract at a time. So you get a special purpose smart contract whose job it is to talk to each different defi primitive on behalf of the user.
00:01:57.684 - 00:02:36.384, Speaker A: Of course, it's not that simple. You also need to write special adapter contracts to interface with each DeFi primitive along the way. And so here you can see our diagram of how this works. There's the sequencer that the sequencer contract which coordinates and executes interactions with each primitive. And then there's each adapter contract along the way. So yeah, Dex aggregators work like this, like one engine paraswap and other protocols like instadap and Zapper do this to compose together lending pools. Also with Amms.
00:02:36.384 - 00:03:21.764, Speaker A: The problem with this, with this model is that it's not scalable. You have to write new contracts for every primitive you interact with, and it is also not that secure because you're writing a lot of extra code. So the deeper problem is that first of all, every token lives on its own smart contract. So ERC 20 is they work really well if you want to transfer a token from one person to another. But as soon as you're interacting with multiple different tokens, it starts to get expensive. Every time you talk to a new contract, token contract, you have to pay for that. Every time you update the balances, you have to pay for that.
00:03:21.764 - 00:04:37.934, Speaker A: And related, every defi primitive is built in a monolithic way rather than a modular way. And that basically, yeah, you can think of it as like, each primitive consists of accounting logic and business logic. So what we've done with shell is like, well, okay, this is, if you're an amm, the business logic is basically the part that computes the exchange rate between two tokens. The accounting logic is the part that moves the resulting balances from one account to the other. So an intermediary solution that protocols like Uniswap and Balancer have done is set up something that we are referring to as the vault router model. This theoretically simplifies the complexity of the system. It basically, all the tokens are held under one contract, and the Amms are able to share their accounting in one contract as well.
00:04:37.934 - 00:05:23.492, Speaker A: However, there's some incidental code complexity to this system, and worse, there's sort of a walled garden effect. So, like, uniswap amms can only compose with other uniswap amms in this way. And same with balancer. Our solution is what we call the ocean. It's a multi token ledger, first of all. So it holds all different types of tokens in one shared ledger, in one shared contract. It also serves as an accounting framework for primitives to share the accounting logic, and it's on top of that, a system for composing primitives together.
00:05:23.492 - 00:06:26.964, Speaker A: So if you want to use multiple defi primitives, it doesn't matter. Lending pools, amms, whatever, you can compose them with the same logic. This is theoretically simplifying things not just for developers, but also there are ripple effects for the end users. And, well, here's a diagram of the ocean. It looks more complicated than it is, so let's just jump ahead and see some of the things that you can do with the shell app. First of all, multi NFT swaps. So because the architecture is designed like this, it's actually not a big deal to swap from a bunch of, you know, you pick out three different nfts that you want to get rid of from one collection, some nfts from another collection, and you can just sell that in one transaction.
00:06:26.964 - 00:07:31.974, Speaker A: Here we're using the government toucan, which is our special NFT Michelle ecosystem. You can also migrate seamlessly from one LP position to another in a single transaction. Here, you're just moving 100 Lp tokens from the ETH USD pool to stable pool, which is, yeah, Dai USDC USDT. So it doesn't actually matter how many different amms that transfer has to go through. And withdrawals and deposits, it all happens in one transaction. And by the same logic, you can do that and add another token to the mix, whatever you want to do. So that's what you can do right now, in the future, there are all sorts of things we can do because every transaction is atomic.
00:07:31.974 - 00:08:13.424, Speaker A: You can have gasless execution, you could have things like auto rebalancing portfolios. You just need to sign a message and let somebody else take care of that for you. And you could have a sort of mev resistance system via what we're calling like generalized limit orders. Yeah. Basically you just set the end state of what you want your portfolio to look like, sign a message, and someone could fulfill that for you as the market changes. That's it. Thank you.
00:08:13.424 - 00:08:21.164, Speaker A: Any questions?
00:08:24.424 - 00:08:26.764, Speaker B: Thank you. Does the ocean already exist?
00:08:27.064 - 00:08:27.884, Speaker A: Yes.
00:08:34.304 - 00:08:46.404, Speaker B: Do you also provide developer support? Like if we want to develop something like this, would you offer a single point of contact which can help us implement these kind of functionalities? Because they looked quite complicated.
00:08:47.704 - 00:08:52.004, Speaker A: Yeah. You want developer support? There's that guy over there.
00:08:53.104 - 00:08:54.884, Speaker B: I'm going to sit next to him then.
00:08:56.104 - 00:09:02.324, Speaker A: Yeah. Also jump in our discord, and we're very active there.
00:09:04.864 - 00:09:09.484, Speaker C: Yeah. Could you tell us more about your discord and your social communities?
00:09:12.004 - 00:09:28.348, Speaker A: Well, we've got a hopping discord and a great Twitter account that is run by a hilarious Hollywood guy. Okay.
00:09:28.396 - 00:09:30.904, Speaker C: So we'll definitely have to stay in touch.
00:09:32.004 - 00:09:35.864, Speaker A: Yeah, please follow us. I think I'm supposed to say that.
00:09:36.164 - 00:09:41.904, Speaker C: Perfect, and thank you so much. We'll move on to our next speaker in a moment.
00:09:42.924 - 00:09:43.404, Speaker A: Thanks, guys.
