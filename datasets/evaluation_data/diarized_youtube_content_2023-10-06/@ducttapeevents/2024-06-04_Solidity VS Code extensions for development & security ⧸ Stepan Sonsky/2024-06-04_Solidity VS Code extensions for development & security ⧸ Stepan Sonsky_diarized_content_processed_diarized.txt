00:00:13.960 - 00:01:22.934, Speaker A: Okay, so everyone happy to see you there. And today we gonna learn something about solidity versus code extensions. My name is Japan and I'm a team lead ethical hacker and developer in Aki blockchain security. We are based here in Prague and we are mainly focused to security audits and development of open source security tools, namely wake and tools for solidity, which we will talk about them later. And also we are teaching solid EVM and related security at Czech Technical University. Okay, these are some of our well known clients. We work for example with one inch lido safe, Axelar or Rhinestone recently, and also we received some grants for our open source tools.
00:01:22.934 - 00:02:20.824, Speaker A: Okay, when it comes to solidity versus code extensions, we have to ask what are our requirements? Because different people have different needs. So today we will focus basically on two areas. The first one is development. Are there any developers out there? Hands up. Okay, cool. So if you are a developer, what do you need from the extension syntax? Highlighting, of course, to highlight, for example, functions, state variables, etcetera. Some code navigation to better navigate across the code, like go to definition, go to type definition, find all references, or go to implementation code completion because we are lazy and we don't want to write every character in the code.
00:02:20.824 - 00:03:00.614, Speaker A: Some code actions for quick sys in the code, code formatting to make our code pre tier, and some refactoring features like renaming symbols, et cetera. And of course we need compilation during development. Yeah. And finally debugging because developers don't like bugs, but auditors do. Are there any security auditors out there? Hands up. Okay. Not so many competitors in the room.
00:03:00.614 - 00:04:02.368, Speaker A: Well, if you are a security engineer, what do you need from the extension syntax? Highlighting, of course, code navigation. And here comes the interesting part, static analysis. We will talk about it later in detail. Basically, static analysis allows you to automatically detect vulnerabilities in the code and show them directly in the IDE versus code. These vulnerabilities can be highlighted directly in the code. And graphs. Yeah, graphs are pretty interesting during auditing because they allow you to see the code in a different way, not just lines of code, but more visualized graphs.
00:04:02.368 - 00:04:46.616, Speaker A: I will show examples on the next slide. Okay. And when you are auditing, you need to write some notes into the code and track the issues. It's pretty useful. And also unit test, fast test and test coverage. Okay, now let's take a look to the extent existing versus code extensions which are available on the market. So the first one is solidity by Juan Blanco.
00:04:46.616 - 00:05:31.664, Speaker A: It's like golden standard in the space. It's the most popular extension for developing in solidity. It has more than 1 million installations. It features basic stuff around the code, so code navigation, code completion, code formatting and code actions. There's also some linting using solvent and eatlint. It has an integration with Etherscan, so you can download the source or API from the etherscan and of course compilation. The next one is solidity bionomic foundation.
00:05:31.664 - 00:06:22.264, Speaker A: It's really focused to hard that integration, so if you are a hard developer, this is the way to go. It features also basic stuff around the code. So navigation, code completion, code formatting and code actions. Yeah, some refactoring features like symbol renaming and there's also hover for the help. So when you hover over some parts of code you can get a help or documentation. For example for Openzeppelin contracts and compilation. Of course the next extension is visual developer by consensys.
00:06:22.264 - 00:07:03.574, Speaker A: The name is self explanatory. It's very visual. It contains a lot of types of graphs which are even interactive. You can generate UML diagrams, etcetera. You can also generate reports from your contracts where you can see for example lines of code, lines of assembly code, number of public external functions, etcetera. It's pretty useful for example for estimates. There's also cockpit view which allows you to navigate better in bigger projects.
00:07:03.574 - 00:08:01.844, Speaker A: Outline view where you can see all the functions there, visibility, modifiers, et cetera. You can also write your inline bookmarks. Actually this extension was previously named visual auditor and then consensus renamed it to visual developer. So it's focused also to auditing code lens. We haven't been talked about this feature yet, so code lens are like little buttons above the functions or contracts where you can execute some actions like find all references or generating graphs. And there's also integration with Etherscan, so you can see balances of the contracts. Or you can download ABI or the source from Etherscan.
00:08:01.844 - 00:09:02.184, Speaker A: The next extension is slither which is a well known static analyzer and this extension is basically the front end for it. So you can see output from the static analysis from slitter directly in the versus code. And there is a what slider here. Slide twelve. Yeah, thank you. So yeah, you can filter issues by type in the extension and yeah, now we can move to the next one, Metex by consensys. It's also static analyzer, but unfortunately it was discontinued recently.
00:09:02.184 - 00:10:03.134, Speaker A: It was very helpful for our early auditing days, and also it was a great inspiration for us for developing Wake framework. So thank you consensus for your good work. The next extension is not focused to the development or security itself, but more on more seamless auditing process. So it's a collaborative code review tool where the team of auditors can collaborate and make notes to the code. And it has a very good GitHub issues integration. So from the extension you can create a new GitHub issues, you can mark reviewed files and this progress is even shared across the auditor's team. And also there are some daily logs when you can see your progress by reviewed lines of code.
00:10:03.134 - 00:10:41.906, Speaker A: Okay, and now I would like to tell you something about our tools for solidity extension, which is powered by Wake. At the beginning I would like to shortly describe what Wake is. We will have also talk about the wake itself on Sunday 02:00 p.m. at root stage. So wake is basically a python based development and testing framework. It contains static analyzer. There is also a lot of powerful stuff around fuzzing.
00:10:41.906 - 00:11:41.070, Speaker A: Fuzzing is like putting random values into your contracts and functions. Then you run them for a couple hundreds of thousand cycles and then you can discover some hidden issues which cannot be or they are very hard to discover by manual review. Also we have a interactive debugger with detailed code phrases. And finally there's LSP server which is like backend for our extension. And yeah, the clicker is somehow broken. Okay, and now about the tools for solidity itself. It's on the opposite front end from the bake.
00:11:41.070 - 00:12:32.576, Speaker A: So one of the main features is static analysis and our detections UI where you can see your vulnerability detections directly in the versus code. I will show it on the next slide. And yeah, you can see these potential vulnerabilities highlighted directly in the code. We have some graphs, I'll show them on the next slide as well. You can see coverage of your tests and also we've recently introduced versus code printers. And I will describe this feature also in a few, in a few minutes. Also we have basic stuff around the code.
00:12:32.576 - 00:13:26.354, Speaker A: So code navigation go to references, implementation, vital references, colon actions and compilation. Okay, and now let's take a look to the detail of some interesting features. So this is our detections UI where you can see the detections from the static analysis directly in the versus code. You can filter them by impact or confidence. You can group them by detector or these criteria. And these are some of the examples of our two dimensional icons. So we are evaluating impact of the vulnerability and how confident the detector is about this finding.
00:13:26.354 - 00:14:05.304, Speaker A: So I think it's pretty clear. High impact, high confidence, high impact, low confidence, etcetera. Yeah, and these vulnerabilities, as I said, are highlighted directly in the code. So we have underlined the part of code which can be potentially exploitable. This is an example for re entrancy and in a detail you can see from which contract and which function it is potentially exploitable. Yep. Now here comes the graphs.
00:14:05.304 - 00:15:30.914, Speaker A: Graphs are pretty useful if you are auditing bigger projects and you want to see see the overview of the project. Like here is the example for inheritance. So inheritance graph can transform this inheritance chain to this inheritance tree control flow graph. Here we have a simple transfer function when we changing the balances of sender and recipient and control flow graph can transform this code into this graph. This is pretty simple example, but for more complicated algorithms and functions it's pretty useful to see all the executing part of the code. Yeah, here's the test coverage and we are supporting even real time test coverage during the fuzzing and yeah, versus codeprinters. It's our recent feature in Toolsforce solidity and versus code printers allows us to execute native commands in the versus code from the LSP server.
00:15:30.914 - 00:16:10.984, Speaker A: Here is the example for code lent for public functions above the contract. So when you click on it you can see public functions and you can navigate to them. And a lot of new features regarding the versus code printers are coming soon. Okay, and today we would like to exclusively for the Eat Prague announce one new interesting feature. So let me invite to the stage Luke, the developer of project Sake to tell you more.
00:16:17.604 - 00:17:27.364, Speaker B: Hi guys, I'm Lucas, I'm an auditor and developer at Ackee and I am the developer behind our newest project Sake. So to start, who here is familiar with remix ide? All right, I see that many of you know what I'm talking about. For those unfamiliar, remix is a web based code editor made specifically for solidity development, featuring a very intuitive UI for thanks. Featuring a very intuitive UI for compilation, deployment and interaction with your smart contracts on a usually local chain. So we loved what remix was doing with the user experience for the developers. However, we all know that it can be a bit of a hassle to use multiple ideas for different development, and that's the reason why we started to develop Sake, which is a remix like UI. However, in your own versus code.
00:17:27.364 - 00:18:22.264, Speaker B: So to start, imagine you have a workspace with a few solidity files. And firstly, you might want to start with compilation, right? Sake is a able to automatically locate all the solidity files you have in your workspace and it compiles them all in bulk. We are able to do this because of Wake's underlying very speedy compilation. It also is able to automatically select the correct Solsi compiler version, so the compilation is really as easy as it gets. Then once compiled, you can deploy these compiled contracts on a local chain. You can deploy them on the local chain. Then if we go to the run tab, this is the place where you can interact with these deployed contracts.
00:18:22.264 - 00:19:32.334, Speaker B: You can see a very familiar interface. We didn't really want to reinvent the wheel here, and since so many developers are familiar with what remix provides, we decided to build up on that. So you see some information about your contracts, the addresses, the balances, some controls, and mainly you can see an interface which gets generated from the contract API featuring all the callable functions together with their respective input fields. And you can use this interface to make seamless contract calls to the local chain and get the results, call traces, events and so on immediately back and all inside your versus code sake should be available later this year I think, and it will be available as part of our already existing tools for solidity extensions. So if you are already user, you can expect all of this to come to you without any additional setup needed from your side. Yeah, thanks to Stephan and I will give him back the stage.
00:19:39.454 - 00:20:41.624, Speaker A: Yeah, thank you Lukash. I'm super excited to see these features coming to our extension. Looking forward and now back to the summary of extensions we've talked about today. Every extension has some strengths and weaknesses, advantages and disadvantages, even ours, but we are working hard to cover all of these areas, development, security and auditing in our tools for solidity. So the perfect one extension does not exist. And today you have a bigger overview around some of the most famous popular and you can pick the ones which suits your workflow. So thank you very much and I would like to invite you if you are interested in fuzzing today.
00:20:41.624 - 00:20:57.274, Speaker A: Andre has a workshop in Hacker House at 430 and Sunday 02:00 p.m. at root stage Michal will have a talk about our wake framework. So thank you very much and see you at the bar.
