00:00:00.200 - 00:01:04.934, Speaker A: All right, good morning everyone. So maybe a quick question. So who of you has worked with Ethereum or another EVM chain before? So, did some solidity coding? And who of you has worked with ICP before and built a canister? Okay, a couple. I know these guys already. Yeah. Okay, so today I want to talk a bit about how Ethereum applications and Ethereum, or EVM developers can utilize some of the cool features of the Internet computer to extend their decentralized applications. And I will give also a bit of an intro about the Internet computer, that everyone is a bit on the same page and then show a couple of examples and do also a bit of not really coding, but yeah, we will see some code and you can try interactively to follow some steps, or you can also just watch and enjoy the show.
00:01:04.934 - 00:01:56.040, Speaker A: And hopefully at a later point in time at home, with some more time, you install DFx, the command line tool, to interact with the Internet computer and begin your real journey. So. But before starting. So I was introduced as from ICP, but I'm officially employed with the Dfinity foundation. We are actually here in Zurich, close to the lake. We are a swiss foundation founded in 2016 and with the goal to build this Internet computer, this world computer platform that can host really powerful smart contracts. We are around 250 people around the world.
00:01:56.040 - 00:02:26.168, Speaker A: Most of them are actually here in Zurich. So we have also a lot of events in our offices. So you should come join and talk to us. Or you can also hit me up and we can have a lunch at the headquarters. Mostly we have a lot of cryptographers in distributed system experts and also formal verification and so on. But there is also me. So I work as a solutions architect, and I'm working mostly with the ecosystem team.
00:02:26.168 - 00:03:20.574, Speaker A: So all those builders and entrepreneurs who want to build the next cool thing, and for that, want to leverage a truly decentralized platform. I'm here in Zurich, but originally from Germany, and I've been in the crypto space for quite some time. Started during my PhD here at ETH Zurich, where I came across bitcoin and was totally fascinated. Then later on with Ethereum, and now finally, I'm trying to work with all of them, but from the safe corners of the Internet computer. Yeah, so let's get back in time a bit. So almost like, what is it, 15 years ago? Almost. There was this breakthrough that we could build a digital currency and payment system that is purely peer to peer, without a central party, without a central issuer.
00:03:20.574 - 00:04:18.554, Speaker A: And of course, in the beginning, it took quite some time until people figured could wrap their head around, and I still think many people still haven't. But also in the early years, a lot of people thought about, what can I do else with this technology? And there were little experiments like building a DNS like system, namecoin. Or there were experiments like building a decentralized file storage system. So siacoin, for example, and like all these experiments where you had to build a whole trust network from scratch, and it turns out this is really hard. So then Vitalik and others came around. What could we do to make basically a decentralized platform platform where you can then just build decentralized applications on top, just as apps. You don't need to have built your own chain and trust model.
00:04:18.554 - 00:05:13.478, Speaker A: You can just build smart contracts. And so the idea of Ethereum was born and the goal was to build a world computer. But as we know now, I'm not really sure if this goal has been achieved. So when you look at Ethereum smart contracts, they're like, Ethereum is the most important smart contract platform, but it's still, it's about, yeah, building new types of digital currencies, new types of digital assets, and how to manage them and move them around. Now there's another use case on storing blocks and verifying zero knowledge proofs from higher layer structures. But still, you're fundamentally very limited what you can do. So when you've worked with solidity and on the EVM, you notice it's not like building a traditional program on a computer.
00:05:13.478 - 00:05:55.296, Speaker A: You have like severe limited memory, you have severe limited computational capacity, you have often high fees, and they are unpredictable. In a way. You have a pretty high latency. So block until it's finalized on Ethereum are like 15 seconds. Yeah. And you're also limited in the sense that you really have only access to what's currently in the state. You don't have any information about the history on chain, and you don't have a good access to the state of all those hyper structures, L2 s that are built on top of it.
00:05:55.296 - 00:07:02.020, Speaker A: We have the oracle problem, so we can't just like, yeah, call out and get, I don't know, weather information or price information. And with all those L2s, we also face fractured liquidity. And lastly, it's also hard to host your user interface on it. So you always have this centralization point. And we will see later that this is really a problem, especially in the DeFi world. So Dominic Williams, the other dom that like in the early days, were in the Ethereum community and was part of this effort to build like Ethereum version two, so to say, the original sharded idea of Ethereum, but like division diverged a bit. And so he started off and assembled an awesome team to build the Internet computer, which is essentially the idea to build a crypto cloud.
00:07:02.020 - 00:07:58.264, Speaker A: So this means you have all those features that a blockchain or a crypto smart contract platform has, like the resiliency, censorship, resistance, tamper proofness and the ability to tokenize things. But on the other hand, you have the cloud like scalability model. So you can, with more demand, you can increase the capacity of the system. And now we look a bit, let's maybe first start with that. So the basic fundamental unit that runs on the Internet computer are called canisters, and we often call them canister smart contracts, because similar to Ethereum, they run on this tamper proof blockchain infrastructure. So they have similar trust guarantees, but they are much more powerful. And I want to give a couple of examples.
00:07:58.264 - 00:08:36.884, Speaker A: So the Internet computer is not an ethereum virtual machine. We will see. You can build actually an Ethereum virtual machine inside such a canister, but at its core it's webassembly, code and memory. So webassembly is a w three c standard, and it's a bytecode standard, and it's very fast, so close to real barebone metal, so not that convoluted than the EVM. And you can program in the languages that you know already. For example, Motoko. No, probably you don't know Motoko.
00:08:36.884 - 00:09:19.764, Speaker A: So Motoko was actually the first language that target the Internet computer, and is the most elegant way to build on the Internet computer. And it was designed by Andreas Rosberg, who is also one of the main architects of webassembly itself. And he was part of dfinity for a couple of years. But you can also use JavaScript, rust, Python and C to build applications. And later we will do a bit of programming in rust. The whole canister model is inspired by the actor model. So those canisters interact with each other by sending messages between each other.
00:09:19.764 - 00:10:39.884, Speaker A: We also have what is called the reverse gas model. And what this means is when you have interacted with Ethereum or other chains, you always, as the end user, you need to use a wallet and you need to have the gas token basically to pay for every interaction with that chain. On the Internet computer, we turn that around so that you can put cycles in this canister. So gas in our language is called cycles, and we put them in this smart contract and then users don't need any wallet, any specific gas token to interact with the smart contract. So it's a bit like one part of the account abstraction discussion is already solved here at the core on the Internet computer. Then the other part is you can directly interact from the browser with it or with other traditional applications because canister smart contracts can process HTTP requests directly and they can also perform outgoing HTTP requests. So you can call web APIs and get data.
00:10:39.884 - 00:11:22.904, Speaker A: We will come to that later on because it's also very useful to talk to other chains. Then it also, the system provides access to timers. So it can be really an autonomous smart contract. So you don't need to peek it from the outside. It can run cron jobs basically and it has access to unbiable randomness directly from our threshold cryptography consensus protocol. Coming to that, it has also access to a lot of cool threshold cryptography features that are always extended over time. So currently you have mainly access to threshold ECDSA.
00:11:22.904 - 00:12:24.114, Speaker A: So ECDSA is a particular digital signature signing algorithm that is widely used in the web3 ecosystem. So bitcoin used it because there were patents on a much better digital signature algorithm. And so Ethereum and a lot of other chains copied this. So ECDSA is what is used to authenticate transactions in a lot of blockchains. Canisters can basically sign messages. So the Internet computer has the ability to facilitate signing on behalf of the canisters. And another cool feature of this whole threshold cryptography is that the state and all the messages from the Internet computer are also certified by a BLS multisigna or threshold signature.
00:12:24.114 - 00:13:27.554, Speaker A: And what this allows is that a user outside of the Internet computer basically just needs 148 byte public key to verify all the state and all the messages from the Internet computer. So you don't need to calculate the whole blockchain history, you can just verify a signature. And the canisters allow for a very flexible control model. So not only immutability as an ethereum, but by default the developer is the controller. And then you can build things like either building canisters that are owned by the end user eventually so user owned applications or you can give control over to a DAO, we call that SNS. Or like the main framework used in the Internet computer is called service network system SNS. But you can also remove all controllers and then it's essentially immutable.
00:13:27.554 - 00:14:38.424, Speaker A: So with that, so how is this possible? Let's talk a bit about the architecture of the Internet computer. So as always, you start off with some nodes and on the Internet computer, it's not like anonymous people running nodes on virtual machines owned by AWS or Google Cloud, but it's really independent node providers that are doxed. So they have public identities. They need to buy quite expensive hardware to contribute to the Internet computer. So there is a specific specification that you need to have, and you need to be in a proper professional data center with proper Internet connectivity. So it's really not the run your note at home type of network, but targeted for really high performance applications. So it's also not allowed to run your node on a virtual machine or on a public cloud.
00:14:38.424 - 00:15:51.130, Speaker A: And then the Internet computer protocol assigns these nodes in a manner that we call deterministic decentralization into subnets. Each subnet is essentially its own blockchain. So we don't have like in Ethereum one chain and a huge replication factor, not 10,000 nodes running the same computation and storing the same data. But we have smaller blockchains where we only have like 13 to like 40 or 50 nodes. So we have much higher efficiency because of that. And the deterministic decentralization factor means that the Internet computer protocol, and we see later with how that really works, tries to make those nodes as independent from a jurisdictional and geolocation point of view. And yet this is the cloud like feature.
00:15:51.130 - 00:16:49.594, Speaker A: So we can add ever more of these subnets and increase capacity. And all these subnets together form one uniform computing environment to run these canister smart contracts. And there's, from a programming point of view, no difference if two canisters when they send messages between each other, if they are on the same subnet or if they are on different subnets. And in many real world use cases, you actually interact with a lot of canisters on a lot of different subnets, and you even know about that. There is of course, when messages are sent between those subnets, you have much higher latency than when it can run on a single machine, basically. But from a programming point of view, you don't notice it. So as I said, this is the idea of ICP as the crypto cloud.
00:16:49.594 - 00:17:49.300, Speaker A: And this whole network is governed by a daO, the network nervous system. So in this dao to participate, when you have ICP tokens, you can in what is called a neuron, and depending on how much you stake in that and for how long you stake it and for how long you have staked it, you have a certain voting power. And when you vote, so you help govern the network and you get a reward for that. And when these proposals are accepted, then it gets automatically executed in the network. And this is like at the moment how this deterministic decentralization works. So people are like making that basically by hand and proposing it to the Dao in the future. We hope that many more of these things can really execute it autonomously.
00:17:49.300 - 00:18:40.938, Speaker A: So everything is calculated basically on the Internet computer itself, and you don't need so many human interaction that is then approved by a DAO. The cool thing about that is since the whole network is really governed by a DAO, this allows to have a real adaptive evolution of the network. So essentially we have a new release of the Internet computer software every week. And people outside also dfinity are verifying these updates and proposals. And when it gets accepted, then it gets really automatically enrolled on all the subnets of the Internet computer. Ok, now a very quick comparison. I hope it's big enough, but it also doesn't matter that much.
00:18:40.938 - 00:20:05.718, Speaker A: So quick comparison with Ethereum. So there are a couple of stats basically, but what it basically tells you is Ethereum is very, very limited and the Internet computer is like from a cloud perspective it's still a bit limited, but in comparison to what you know from blockchains, it's like a huge difference. So for example, when you look at how much data you can store in a canister or how much memory you have, it's a few kilobyte in Ethereum smart contract and it's currently 404gb in a canister. And I want to move that a bit in the perspective, like on the right side here, you see on the left is like a single server and then Ethereum, then the Internet computer and Ethereum. And we have these two axes, or these axes about scalability and decentralization. So of course when you have a single, single server, it's very scalable basically. Or I mean you can still add additional additional servers there, but controlled by a single entity, you have a high capacity and scalability, but you have very low decentralization.
00:20:05.718 - 00:21:01.774, Speaker A: And Ethereum is on the complete other end of that spectrum. Who really wants that? Everyone on earth can run its own node and can be part of the network. And the Internet computer makes a trade off between the two. It aims for sufficient decentralization, but to provide also really a good computing environment where you can actually build stuff. All right, so what can we do with that? So I said we can process HTTP requests with canisters. So this was a tweet by Roon this week. So Roon is the founder of maker this over collateralized stablecoin that is very popular dai on Ethereum.
00:21:01.774 - 00:22:04.030, Speaker A: And there is new regulation upcoming in Europe that essentially every, everyone that hosts a defi front end for a defi application needs a Mika license. So it is like a big deal. So how can we use the Internet computer to do something about it? So we can host your defi front end on the Internet computer. And if you want you can join me to essentially as a demo, deploy the Uniswap front end as it is live right now on the Internet computer. But you can also just follow me doing it. Let's see. Okay, here I have like yesterday forked a version of the Uniswap frontend.
00:22:04.030 - 00:22:52.384, Speaker A: So they're under GitHub Uniswap interface. There is the Uniswap interface, and it turns out it's broken. So I had to fork it and fix a couple of things to make it actually work. And I also added, if you know, gitpod, it's like a visual studio code kind of thing in the cloud. So you can just, it doesn't work for me on Chrome, that's why I have to use it on safari. So it basically loads up an editor and a virtual machine where all the dependencies that we need are already installed. And it will probably take some time.
00:22:52.384 - 00:24:04.122, Speaker A: So again, the goal is to take an existing front end of some ethereum defi protocol, and we want to deploy it on a decentralized cloud, the Internet computer. Right, still loading. So when you look at this repository, I added also the things you still need to do to make it work. So you need to have this DFX installed, which is in this environment then already installed or it should be installed. This happened hopefully somewhere here and now we are still like normal deployment steps of this uniswap application. So yarn installs all the JavaScript dependencies and then we build a production asset. And what you need to do is let's open here a new terminal.
00:24:04.122 - 00:24:28.704, Speaker A: Can you see that actually, is this fine? All right. Okay. Open your terminal. And we need a configuration file for the Internet computer. And this is called Dfx JSON. So we create a new file, Dfx JSON, this is now here. And then we just copy paste this here and I will explain it in a second.
00:24:28.704 - 00:25:11.434, Speaker A: All right, so this basically is a configuration files of the canisters that we want to deploy on the Internet computer. And we have one canister that we call interface. It will be a front end type or asset type canister. And what we will need to give him here is basically where here in this directory he can find those the build artifacts. So the final minified HTML, GSs, CSs and so on. And it needs also the entry point. So what HTML should the actual domain paint .2
00:25:11.434 - 00:26:38.122, Speaker A: so this is still taking some time, this build process. Maybe we can use this time. Is there any questions so far on the Internet computer on what I'm showing here? All good? No, no, no. So not really. Yeah, someone needs to pay for it, but like everyone can top up a canister. So it's a completely permissionless process. You basically, there are services where you basically send ICP and it will convert it to this cycles, this gas form and then put it into a canister.
00:26:38.122 - 00:27:03.924, Speaker A: And this is like totally in the crypto world. So you don't need any identity around that. The bigger problem we are having here still is the domain. So if you want to. Yeah, a human friendly domain. Yeah, you still have, need someone having that domain. We are also working on that.
00:27:03.924 - 00:27:46.084, Speaker A: It's been a bit paused. We are working on something called a chain name system, which is a decentralized naming system on the Internet computer that will be DNS compatible, but it's currently on hold because of other priorities. But this is something we are looking into and one to solve as well. Okay. Is someone trying that as well right now? Yeah. Okay. Maybe I should have not done it in gitpod because when you do it locally it will be faster.
00:27:46.084 - 00:28:36.120, Speaker A: But we're getting close here. One cool thing that we introduced recently, so we don't have a testnet on the Internet computer. A lot of web3 developers always want to deploy on a testnet and we don't have it because the Internet computer is also, because it is like these many chains, it's hard to provide a proper copy basically of it. So what we have is you can run a local version of a single Internet computer instance basically on your local machine. And we also have a playground. These are basically some pre provisioned canisters on the Internet computer that you can basically rent for 20 minutes. And this is what we will do here.
00:28:36.120 - 00:29:29.284, Speaker A: So we deploy this application on one of these pre provisioned canisters. So it's really there on the Internet computer and everyone in the world can interact with it, but in 20 minutes it will be gone again. So let's see if this works. Okay, we have DFX. So when this is then finally ready, it's still optimizing. What time is it? So earlier you showed the advantages of ICP in comparison to Ethereum. Does that imply that in your opinion in a few years, ICP is going to replace Ethereum? I don't think so.
00:29:29.284 - 00:30:01.314, Speaker A: I think that there is real value in this, like massive replication for certain. Very important, yeah. Assets and smart contracts. So this is also why I want to frame this as how the Internet computer extends Ethereum. And this is one example of that. And we will see when we have the time to see a couple more. But I don't think, I think there's real value in a system where if there's a takedown.
00:30:01.314 - 00:30:44.524, Speaker A: Now, a lot of nodes are of course on AWS and so on, but I think it's a bit self healing. So to have this property that when there is a takedown on AWS, you can just run your node at home. I think this is very valuable to have this, but this limits what you can do with it. So there is place for both of these types of systems. All right, it is ready. So hopefully. So what I'm doing now is with this DfX command line tool, there is the deploy command.
00:30:44.524 - 00:31:32.652, Speaker A: And this will read this DFX JSon and do what's in there. And we will use this playground flag, as I explained to deployed in this playground canisters. And also typically you need to set up like an identity. This does that in the background. So basically it creates a new private public key pair, of course, to authenticate against the Internet computer. And when you really want to deploy on the Internet computer itself, you also need to have some cycles in your account to pay for creating a canister and uploading stuff to it. And you can learn that on the developer portal in internetcomputer.org,
00:31:32.652 - 00:32:35.006, Speaker A: comma, how that works. But you can also get started like that without anything using this playground flag. So what it's currently doing, the asset canister that hosts these static assets, is like a rust built canister with some features. And we now like chunk up these quite big assets of uniswap. I don't know, I think it's a couple of hundred megabytes for this simple application and chunks it up in small pieces and then uploads these pieces to this canister on the Internet computer. So this also takes a bit of time, that shouldn't take too long. And this asset canister also directly supports what we call certification for this.
00:32:35.006 - 00:33:56.832, Speaker A: All these assets will be stored in a hash tree, in this canister. And so the root of this hash tree will be part of the system hash tree of the Internet computer, which every second, basically of the subnet gets signed by a BLS threshold signature. So when you have a client that supports this verification, it can really check that these assets are authentic from the Internet computer by again calculating the hash tree root and verifying this one signature from the Internet computer. And this is really taking so long because it's really a couple hundred megabyte. Yeah. Okay. Yeah.
00:33:56.832 - 00:34:58.879, Speaker A: The SSL certificates, this is something else. So like the verification that's happening here is on, on application layer, basically the SSL certification, this is actually what it's terminated at. The Internet computer currently has boundary nodes, and they, like dds are mainly, or at the moment that they are still run by dfinity, we're in the process of decentralizing them as well. So adding them to the protocol and they terminate the, the SSL connection. But the actual assets can be verified on application layer, so you don't need to trust the SSL connection and the boundary nodes. And if you run a local proxy, there's always this issue on trust on first use. Here we are basically downloading also the thing that actually verifies those signatures.
00:34:58.879 - 00:36:06.932, Speaker A: But when you run it locally and we have the tooling, then you can be really sure. Okay, so now we have uploaded the Uniswap interface to the Internet computer, and there it is. So for the next 20 minutes, you can enjoy uniswap from a really decentralized architecture. All right, what else can we do? Canisters are really powerful, so you can also build what you typically in application use, then a node JS backend or something like this for it. You can also build that on the Internet computer. And yeah, it expands really what's possible on chain. So like, I think last week or two weeks ago, there was a video, demo video of Dominic Williams, our founder, which got really viral where he showed that you can run AI inference on the Internet computer.
00:36:06.932 - 00:37:08.654, Speaker A: So image recognition, it's not a super huge AI model, but we are also at the beginning here. But it really shows how far you can go with building things on the Internet computer. And at our booth outside, you can also. And what's cool is because we have the reverse guest model and we have a community project that implemented sign in with Ethereum, like a cool library and a canister that you can just use in your application. You can basically create an experience for Ethereum used people. I would say that they don't even know that they are interacting with the Internet computer because they don't need ICP or cycles or anything. And they can just use metamask or their other wallet as of their choice to interact with this application.
00:37:08.654 - 00:38:07.452, Speaker A: And so I think I'm here now with Mainnet. So this is like the demo application, a reaction application. Now it should actually work, I think, and takes a bit long. It also shows you that you can use, for ethereum application, you can also use the Internet computer like as a decentralized database. So this is here is only a simple example of a key value store in the end. But there are people who have also ported SQL Lite on the Internet computer, for example. I don't know why it takes now so long to load, but yeah, we can maybe revisit later.
00:38:07.452 - 00:39:09.156, Speaker A: It's also, if it's decentralized, does it mean also public all the time? No. So the blockchains, the many blockchains of the Internet computer are not public because you don't need to verify the history to trust the Internet computer. You verify those signatures. So actually only what you expose as an API in the canister is public. If you have no authentication, then you can basically choose what to public. One thing at the moment, of course node providers can in principle similarly then rvs, AWS engineers or operators can look into what's running on AWS node providers can in principle access the data. But we are working on putting basically the whole Internet computer software stack into trusted execution environments.
00:39:09.156 - 00:40:45.504, Speaker A: So there is thing called AmDsCV SNP which allows really to host a whole virtual machine inside a trusted execution environment. And the goal is to really have the Internet computer replica running in this trusted execution environment that even the node providers can't peek into the state. And what I quickly want to mention here, so with the, that from an ethereum point of view, where we have built a lot of daos, but mostly treasury management is on chain and the backends that are needed and the frontends that are needed are still centralized and you need some guy with a credit card to keep it running. The Internet computer now allows really to expand the reach of daos and build full stack daos. So really Internet services that aren't controlled by a single entity and can't shut off by a single entity, and you can make them immutable or you can what's practically you need to change those things, you need to evolve with a changing environment. So the model that is used on the Internet computer is to have dao control like the Internet computer itself, to evolve those applications and hindered behind this QR code. You see a lot of these daos that have launched on the Internet computer with this framework called service network system.
00:40:45.504 - 00:41:57.740, Speaker A: So now I want to mention a couple of those real superpowers of the Internet computer. So I mentioned it before, we have something called threshold cryptography, which enables chain signatures so that the chain can do signatures on behalf of canister smart contracts. So we have certain subnets on the Internet computer where key material is sharded like one, a master key. One or more master keys are sharded between those nodes with complex cryptographic protocols, but it allows them to do a multiparty computation to create signatures. And not just for this one master key, but you can derive, so every canister can derive basically an unlimited number of public keys on that and ask for signatures on that. And this means that you can interact directly with other chains. You can directly call Ethereum smart contracts, you can hold bitcoin, you can talk to cosmos chains.
00:41:57.740 - 00:43:17.824, Speaker A: And currently we only have threshold ECDSA, but we are currently working on implementing threshold schnor, which then also allows to do bitcoin taproot transactions, which is important for ordinal inscriptions and runes, but also interaction with Solana Cardano and the Polkadot ecosystem. Also the threshold schnor is also important to maybe implement something like a decentralized certificate authority in the classical sense, because there also these EDDSA signatures are used. And you can really like build trusted systems for the traditional world. And you have a very simple API inside the Internet computer to interact with that system from any canister. So you can get your public key and you can sign messages. So we can sign, but how can we get data from other chains? How can we get state? And I mentioned already that canisters can use HTTP out calls, so you can call various web services. And one thing that you can do is call public RPC endpoints of other chains.
00:43:17.824 - 00:44:10.734, Speaker A: So from infuria anchor and the like. And you can call multiple of those to increase security. So you can call three or five or whatever your trust model requires, so you can be really sure that you get authentic information on them. There's also experiments, or there is a proof of concept of building a theorem lite client on the Internet computer. And other people are working on other light clients on the Internet computer, but this gives you a very fast access to start experimentation. Maybe not the highest security, but you can make it very high with increasing the number of services you call. And one convenience canister that we have on the Internet computer that we've built is the EVM RPC canister.
00:44:10.734 - 00:45:04.484, Speaker A: So it's a canister that manages API keys for multiple of this, for a really long list of these cloud service providers. And it basically allows the canister on the Internet computer to, to call an ethereum, or not only Ethereum, but all the l two s and other evms, as if they were a smart contract on the Internet computer itself and as a site. Yeah. Can I ask a question about the basic details? Yeah, yeah. So this is what I mentioned here. This EVM RPC canister has those API keys stored in the canister. Are they public? They aren't public.
00:45:04.484 - 00:45:43.104, Speaker A: They can be accessed by the node providers in principle. So you should, when you do something like that, you should have an eye on the usage of those, that you can revoke API keys if it gets misused. So this is like. Yeah, an issue like a trade off you have right now. When we had service providers that would basically allow, for example, that we do an authentication based on ECDSA signatures, then we could really make it super nice. This is like a practical trade off we need right now. And this practical trade off gets much better when we have this trusted execution environments.
00:45:43.104 - 00:46:33.324, Speaker A: All right. Need to speed up a bit. So one quick side note I want to mention, because in a couple of weeks there is the great bitcoin halfening event. So with bitcoin we went one step further and there is a subnet on the Internet computer where on the side of the Internet computer replicas. We run part of the bitcoin protocol stack and we have a bitcoin canister on the Internet computer that is kind of a lite client for bitcoin. And it exposes the whole bitcoin utxo set, plus some utility functions to see how are the fees currently on bitcoin. So you can really build easily build smart contracts or canisters that interact with the bitcoin network natively.
00:46:33.324 - 00:47:34.992, Speaker A: And the main example I wanted to show you today is using a canister on the Internet computer as a co processor for EVM smart contracts. And this idea of coprocessors is an old one. So you have this general, like the Ethereum general purpose smart contract, but for many things you see that you are very much limited because of the things I mentioned on the very first slide. So you want to put some of that work you have to do to another computing environment with minimal trust requirements. And as it turns out, it's relatively easy. So I've built that in a day. To build such a system that basically allows you to access all the things the Internet computer can do, like access huge amounts of memory, it can run long running computations.
00:47:34.992 - 00:48:47.944, Speaker A: So we have something that is called deterministic time slicing, which allows the computation be running over multiple blocks. So you are not restricted by the block gas limit, so to speak. You can call all the external APIs, also other chains, you can access historical data and so on and so forth. And the idea is pretty simple. So we have a simple smart contract on Ethereum that you can send a job towards it and it basically emits an event. And on the Internet computer we use the timer to periodically fetch the event log from Ethereum, look for those events, do the computation, or do the stuff that the Ethereum smart contract wants to do. Maybe it wants to run some AI inference, who knows? And then use threshold ECDSA to create a transaction and send it back to the Ethereum smart contract.
00:48:47.944 - 00:49:42.494, Speaker A: And yeah, when you look at this behind this QR code or behind this URL, there is like a first simple version of that. It has some issues, but I think it's a pretty cool start. And when you look in this repository, so it's now rust based. So maybe first. So in this repository you find the solidity smart contract, which is very very simple, as I said. And you have then the Internet computer projects, we also have this DFX JSon and we see we have one canister, this coprocessor canister. We also make use of this EVM RPC canister to get the locks and so on.
00:49:42.494 - 00:50:40.958, Speaker A: And that's it on the Internet computer side. Then when we look at the configuration of the rust project for this canister, you will see besides the classical stuff that you need to work with Ethereum, like ethers, we have this IC CDK. This is the rust based SDK or canister development kit. Like a library to interact with. Yeah, with the system API of the Internet computer and implement the interface of the canisters. And we also have two other convenience libraries. One is this library to create these timers, and then one is not so important at the moment, but data structures to keep data available.
00:50:40.958 - 00:51:35.564, Speaker A: When you upgrade a canister. And then when we look at the domain code, it's pretty simple. So we have these macros from the CDK. So this is getting called when the canister gets deployed, and in there we will spawn this interval. So here every 60, every 60 seconds, every minute we do something and what we do, we sync locks. So this is where we use the EVM RPC canister to basically fetch the Ethereum lock and parse the event. And when there is a new event we call process change.
00:51:35.564 - 00:52:27.472, Speaker A: And here we can do all kinds of things, but I've did something very simple. So I used the randomness system API to fetch some randomness of the Internet computer and then submit the result back to Ethereum. So I prepare a transaction. Then there is a bit of the issue to do proper gas calculation, which is also on the sepolia testnet, a bit of a nerve wracking process at some time to get that right for all cases. And then we use the EVM RPC canister to send the transaction. And yeah, I wanted to show the demo as well but we don't have that much time. Unfortunate.
00:52:27.472 - 00:53:47.964, Speaker A: One thing I want to mention is based on a similar kind of architecture, we have built a nice and useful product called Cketh and CkErC 20. So these are basically representations of ETH and ERC 20 tokens on the Internet computer and they are fully smart, contract controlled. So no, a non custodial bridge you can say. And then when you move your ETH or your ERC 20 tokens to the Internet computer, you can really utilize the low fee environment of the Internet computer and the low latency. So 1 second finality in contrast to 14 or 15 seconds, and you can plug into the smaller defi ecosystem on the Internet computer if you want. Cool. So if you are now ICP built and want to get started and extend your ethereum applications with the superpowers of the Internet computer, I invite you to use some of those links.
00:53:47.964 - 00:54:19.974, Speaker A: So the first one is the developer portal which gives you all the documentation. Then we recently did the zero to depth series with encode where a lot of the engineers at Dfinity gave lectures, which gives you an overview of all the core concepts of the Internet computer. You should join the forum on the dev discord. So there. I'm also very active. So I'm Dom w there. So hope to see you around there.
00:54:19.974 - 00:55:18.124, Speaker A: And yeah, thanks a lot. You can also get this presentation behind this QR code. We have a couple more minutes, do you want to take any questions? Sure. Anyone? Are there any questions? There's one, yeah, I mean like did these things. I mean this is like a very non straightforward forward process, how this all evolves. So I think at the moment the incentives are very much like that. There is a lot of incentive behind creating your new chain, your new system.
00:55:18.124 - 00:56:34.626, Speaker A: So for the next couple of years I think we will have a lot of new chains, layer ones, L2s. This is already happening. And the Internet computer fits in this world by providing the connectivity glue behind that which with HTTP out calls and threshold cryptography, you can orchestrate all the systems from the Internet computer. I think eventually we will also see some kind of consolidation, but I think these ideas of building basically some applications as verifiable chains, I think that this will be a pervasive concept over the years and there will be the possibility to build your own chains on top of Ethereum to inherit some security. And there will be also the way to much easier build chains on top of the Internet computer. And hopefully all of those will connect very well. But I think smart contracts and this idea of public verifiable secure computation and dao controlled or user controlled systems, I think this genie is out of the bottle.
00:56:34.626 - 00:57:55.494, Speaker A: And yeah, a lot more software of the world will be created in that way. Thank you. Anyone else? One more minute. So like everything, what happens on Ethereum of course, doesn't include any cycles, right? But for fetching the locks you need to pay cycles. What's pretty cool when you look at this project in a bit more detail, one thing it is included is when someone sends a job request, like a processing job request on the EVM site to this contract, it requests some ETH as payment and it will directly move those ETH to the account controlled by the canister. So the canister can then easily pay for the Ethereum transaction. But you could easily also put some part of it and basically in CKE and from Cketh convert it into cycles on the Internet computer and fuel your canister with it.
00:57:55.494 - 00:58:02.614, Speaker A: So you can really build like an autonomous system that can be paid by the actual users without human interval.
