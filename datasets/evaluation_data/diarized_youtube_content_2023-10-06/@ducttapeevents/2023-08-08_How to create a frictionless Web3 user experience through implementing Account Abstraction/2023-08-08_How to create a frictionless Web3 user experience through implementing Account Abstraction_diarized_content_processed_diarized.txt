00:00:00.120 - 00:00:47.666, Speaker A: I'm sorry guys for the delay and shoddy presentation I'm going to give you because the system is not working properly. I'll try and make a go of it. But what I wanted to do was talk to you guys about account abstraction. Really the whole point was to highlight the problem to you guys TLDR and showcase a little bit of our journey to solve it and show you a couple of video clips where account abstraction has been helpful in solving the UX issues in web3. And then at the end show you a little bit about a toolkit that would help you in integrating account abstraction solutions in your dapp development. And wrap up. So I know it doesn't look great with this format, but you have to bear with me.
00:00:47.666 - 00:01:50.684, Speaker A: I blame them. So what we, when we have a problem in this space, when we talk about account abstraction, as you can see, we bring a massive number of users and we give them a way to centralize players. And there is a reason why that is happening. The reason is we tell users, hang on a minute, you are your own bank, because we are decentralized as your own bank. You have to have your own recovery phrase, don't lose it. And we tell them, don't worry, we've got a nice way to store your asset called hardware wallet, really a glorified memory stick that anyone can snatch away from us. So what is the solution then? Where do we stand? Well, in fact, before I even do that, let me take you through a use case where you have 200 USD synosis and you want to stack that on Klimadao, a carbon offsetting service which is on polygon.
00:01:50.684 - 00:02:25.516, Speaker A: Now with this cross chain service, you would have to go through hoops to be able to do it. It's far too complex. Why? I know this looks terrible, but this is meant to be an on click action. So it means you have to get. Just to show you this, you have to get the USDC and you have to get a bridge. Once you get a bridge, you cross it over to Polygon. Once you cross it over to Polygon, you have to get yourself something like matic to pay for the gas.
00:02:25.516 - 00:03:29.648, Speaker A: Then you have to get the klima and you will be able to stake it on. I'm trying to. It is just that this laptop is broken. So it is meant to be an actual presentation, not just a standalone slide the way it is. Thank you. So what is meant to be happening is you go and find your USDC to stake. You bridge it.
00:03:29.648 - 00:04:05.250, Speaker A: Once you bridge it, then you go and get the matic. With the matic you can pay for the gas, then the 200 USDC you have, you go to the local Dex and convert it to Klima token, then you stake. Now all this would take you about nine signatures. And there is no way in hell we will talk about mass adaption with such a convoluted UX that we have in the web3 space. So we use account abstraction. And what the heck is account abstraction? Well, it is a smart contract technology that would allow us to do that. We use smart wallet technologies.
00:04:05.250 - 00:04:49.244, Speaker A: In fact, we've been using this since 2018 in the pillar wallet, where we wanted to take advantage of smart contract technologies, where we wanted to add spending limits and multiple recovery and so forth, and started using smart contract technologies as a counter abstraction in 2018. Then it was easy for us to use because gas was cheap, one to two gray on Mainnet. Then we had a problem. We had a problem because gas went up to about, before I even go to the gas issue, we even had a payment channel, and we still do. Payment channel is where you do not pay gas. It's an off chain transaction. You can tip someone.
00:04:49.244 - 00:05:19.604, Speaker A: If you've got a discord community that can tip each other, you do not pay gas. And we even implemented that. Then we came across a problem. Gas went north of hundred guys. It meant getting a smart wallet was so expensive, you paid a minimum of $50 and the times $200. And when I can get an EOA for free, why the hell would I want to touch your smart wallet and do counter obstruction? It means it was not going to happen. A counter obstruction on Mainnet.
00:05:19.604 - 00:06:02.568, Speaker A: Then the advent of roll ups and EVM chains made it happen again. There is a dependency on the gas price being low, because with the counter abstraction solutions where it is not part, the smart contract is not part of the protocol. You have to deploy a smart wallet for it to be going, and that costs money. Hence having the roll ups and the EVM chains help it a lot. And, but we have to remember, we are dependent on the gas prices, on them being cheap. But this would give us, give us a lot of functionalities, which I will show you in this case. Then through this experience, we created ethersport.
00:06:02.568 - 00:06:52.324, Speaker A: So what we did is we abstracted away the smart contract technologies from a wallet, the wallet app, and packaged it as an SDK so that anyone can consume it, any Dapp can consume it. And we figured out ways for Dapps to consume it. They can consume it using SDK, they can consume it using a widget. We have created which enables the cross chain transaction far easier. And we have even created a react library for any dapp developer, even a web two Dapp developer to use. I'll show you those in a minute. So what you would get then with the counter abstraction solution, you will get social login, one click action transactions and the ability to abstract away the gas payment and all these features I'm talking about.
00:06:52.324 - 00:07:57.214, Speaker A: I will show you a couple of video clips. These features being implemented in real life dapps and applications in the web3 space benefiting from the account abstraction solutions. So now we have this one. So I hope I can get access to the Internet. So which one do I click to play the video? Video? Yep, there is a video attached to it. It was tested as the pds in Windows. Oh man, this is.
00:07:57.214 - 00:09:07.190, Speaker A: I'm sorry guys. I was going to show you a video that shows the Klima experience I've told you, being used utilized in an account abstraction solution where the user only signs twice and they don't need to bother about bridging or any other solutions like that. So let me try and see if I can get to this thing. I suppose the next video is not going to play either. I'm really sorry about this guys. I can't play the videos and I will just tell you, I will send you the links for the videos. Maybe at the end it is unfortunate that I can't play the videos to you guys.
00:09:07.190 - 00:10:07.444, Speaker A: So one of the toolkits that we have is called transaction kit. It is a react library that makes it easy for any Dapp developer to integrate account abstraction solution to their uis. If you have a react component, you can auto generate an account abstraction code. And for instance, let's say you have a DAP that needs to add liquidity to a certain liquidity pool and you add the liquidity in terms of you add the USDC and the liquidity pool token. And you have to have these steps involved in doing this. You can literally wrap it around these tags and the code, the web3 code, the account abstraction code will be generated which is suitable for your UI React UI. So you can, any web two developer or even web3 developers can easily get on with the account abstraction without breaking a lot of sweat.
00:10:07.444 - 00:10:49.250, Speaker A: And again, the backward compatibility, if you had seen the video, would have made sense. Which this means is if you are developing ADAP, it doesn't mean, oh, because I'm using an account abstraction solution, I have to give up on EOA users, metamask users or etcetera. No, this solution works even if you have an eOa, you can combine it. It works with those end. Unfortunately, I haven't been able to show it to you on the video, so that's one aspect I wanted to highlight to you guys. And of course it would be remiss of me if I don't talk about a little bit about 4337. After talking about account abstraction.
00:10:49.250 - 00:11:41.104, Speaker A: And for us, considering we've been going since the account abstraction solution we have since 2018, we look at it as account abstraction v one and account abstraction v two in v one. The difference is it does everything 4337 does. However, the biggest points are censorship resistance. In the v one you have these things called relayers. Now anyone can attack or someone can sanction for you to screen out certain transactions from those relay. Whereas with 4337 it decentralizes that it would have bundlers, bundlers that can talk to each other. In fact, our team is the one responsible for creating the p two p protocol within bundlers, so that when you send a transaction to a specific bundler, it has to relay that to x amount of other bundlers.
00:11:41.104 - 00:12:34.304, Speaker A: And if this bundler is taken out for whatever reason, the others will propagate the transaction. So it is censorship resistant and it also has redundancy built into it. And the upshot of it is the more transactions you aggregate in a bundler, you would effectively make each transaction cheaper. So this is one of the biggest advantages of ERC 4337 that we have in this, and our bundle service is called Skanda. And if you guys are involved in a hackathon or quick testing out of things, you can use the testing deployments we have in Guarelli, Mumbai, and I think another one as well. You can even download a bundler and run it for yourself. You can run your own bundler service, and that is one of the censorship resistance angles where you can run your own service.
00:12:34.304 - 00:13:26.610, Speaker A: And one of the bigger things about the mass adaption, we talk about the ERC 4337 account abstraction. Without the adaption of EIP 1271 by Dapps, it wouldn't work. Dapps have to deploy EIP 1271. It is a simple change, but not a lot of dapps do it. If you were to follow this QR code or go to EIP 1271 IO, you would see quite a lot of dapps that do not support EIP 1271. You can click on them and put pressure on them to be able to support this. Otherwise, when we talk about wave three and mass adaption, if web one was view only, web two was interactive, where you have your own, say, in terms of posting messages, videos, et cetera.
00:13:26.610 - 00:13:59.436, Speaker A: Web three is about ownership. But when you use web one and web two services, you just say, oh, I'm using the web, I'm doing something. You don't really call them web one, web two. So for web3 to be that useful to the average person, it has to go past being web3 and it has to be adapted by the players so that it is useful to the everyday person without knowing the technicalities. So please go to 1271 IO and put pressure on them. And thank you. And I'm sorry I couldn't play the videos I wanted.
00:13:59.436 - 00:14:24.924, Speaker A: And if you want to see more of the links that I have, you can find them in there. And that's my tag. Thank you very much and I appreciate your time, guys. And if anyone has any question, I'm happy to answer. Thank you.
00:14:29.924 - 00:14:40.944, Speaker B: So what's happening with ERC 4337 now? Like, where is account abstraction? Where are we in terms of the process? I don't see it being used.
00:14:42.404 - 00:15:03.680, Speaker A: Some services are using it. I mean, it's beginning to get used. So in the videos I really wanted to show you was a couple of applications that have implemented account abstraction. Say there is a service called Bookmaker XYZ. They have implemented account abstraction. And when you make a bet, it's a betting service, decentralized betting service. It really feels like you're doing web two betting.
00:15:03.680 - 00:15:43.568, Speaker A: You just go select a bet, then place your amount and that's that. So with ERC 4337, even though some aspects of it are still being developed, it is there for teams to use. So it's just optimizing. How many transactions do I bundle together? Because the 4337, what it does is because of the signature scheme change, you can bundle transactions, say ten of us in here are submitting transactions, different people, you can bundle them together and sign them once. Hence, instead of ten signatures, you only sign once. You can make a saving in the gas payment. So it is.
00:15:43.568 - 00:15:58.524, Speaker A: You would see this happening more and more in the coming months. Thank you. Any more questions? Okay, thank you guys. Thanks a lot for this interesting.
