00:00:25.840 - 00:01:02.374, Speaker A: Hello everyone, I'm Thor. There are my slides. Yeah, welcome to talk. It is a cryptography talk and the math will be scrutable, I hope. We're going to be talking about threshold signatures today, which you can download a free blog post that I wrote about a month ago. In particular, that blog post will cover a thing that I'm going to kind of brush over, which is the key generation step of threshold signatures. So there will be another chance to get that blog post at the very end of the talk.
00:01:02.374 - 00:01:46.994, Speaker A: But first, hype. We know a thing up to about hype. We cryptographers made cryptocurrencies possible, and so I'm going to briefly hype cryptography. Cryptography is really pretty neat because it allows us to have trustless assumptions that don't need to be like, second guessed. We have math and it also lets us make great memes on Twitter about the unsecured ports that we use above 8000. We should only use primes above 8000 because cryptography, it's a joke. So today we're going to learn what the heck is a TSS threshold signature.
00:01:46.994 - 00:02:38.714, Speaker A: And we're going to run through a couple of them. EcDSA kind of hard mode, schnorr less hard mode, BLs, a doge with a hat. So TSS is three algorithms, well abstracted. It is a distributed key generation step where you and a bunch of other people are going to arrive at some secret shares which go together into a. You can think of a private key as being composed of those secret chairs, a signing step and a verification step. Like I said, we're going to basically skip over the DKG step, except for just a quick bit. So slowing down here, like Bitcoin's block time, the DKG step is kind of the shared step between the three signature schemes that we're going to talk about.
00:02:38.714 - 00:03:38.082, Speaker A: It's kind of useful to understand mentally, and it's really pretty simple. It's just combining a shamir sneaker sharing, and you get to a DKG. So not TSS. If we have kind of a multi signature model, we want Alice and Bob to be able to produce two signatures, and that kind of sucks. The verifier says, nah, because he has to verify two signatures, he'd rather verify one signature. And he says, yeah, better for him. So how does he do that? Well, we need distributed key generation, so we could say let the shared secret, this is kind of analogous to our private key before be the sum of s one and s two, which are Alice's Share and Bob Share, then maybe we want more than two parties.
00:03:38.082 - 00:04:31.802, Speaker A: Maybe we want several parties. Well, we let Carol in and so maybe we say we want t secret shares and we just add them all together. And this basically is like the concept of. So if s is the private key and we want to reconstruct the private key in some way, then we want to do some operation over everyone's secret shares such that we get the private key back, but no one gets to hold onto the private key because they never saw it in the first place. And so this Scheme kind of sucks because we have to have all t of those S's. But if we did it better, we would have only t of like a broader set of like n esses, so that you only needed like some threshold out of the total number, which is basically what you do with a multi signature. So you want to get actually s plus some other things.
00:04:31.802 - 00:05:16.040, Speaker A: Sorry, s equals s one up to st. You wanna recombine those into a share using DKGs and Shamir secret sharing, which is what the blog post is about, onto distributed key generation. When we get that, we've got our t of n signing and we've got our, we wanna move on to signatures creation, which I'm gonna present three different ways that we can construct signatures. After we assume that everyone has their own secret shares, additive secret shares. So now we hit ECDSA. So ecDSA is kind of hard mode. The algorithm for ECDSA basically looks like that.
00:05:16.040 - 00:06:02.184, Speaker A: You sign, you got a message, you got a secret key, you verify, you got a message, you got a public key, and you do that. And I'm kind of short on time, so otherwise I would let you look at that and maybe talk about it a bit more. But bye. The best in class recent ECDSA stuff is CGGMP 21. But really the only actually not trash threshold signature scheme ever, the first to be ever, was like GG 18 on ECDSA, which is like pretty recent cryptography. That's like, huh? That was recent. And it lets us do this stuff.
00:06:02.184 - 00:06:36.394, Speaker A: This is the other I'm going to brush over point in my stock because ECDSA threshold stuff is kind of a lot. I'd have to kind of go through all that to get there. So instead of that, I'm going to compare it to schnorr or EDDSA and BLS and try to get you there. If you want to hit up more about what ECDSA is about, definitely check out that talk or that paper or talk to me afterwards. So I've copped out onto Schnorr. So schnorr is actually simpler. This slide is simpler.
00:06:36.394 - 00:07:37.294, Speaker A: You can tell by my face that the slide is simpler. And the reason it's simpler is in particular because of the way we are constructing s. Um, so the neat thing about Schnor compared to ECDSA. Schnor and EDDSA are the same thing, is that we have linear coefficients, and we can actually fairly easily split up the schnorr coefficients of s into additive shares that everyone holds a piece of. That's why the difference between the ECDSA threshold signature takes four pre signing steps, where this EDDSA signature takes one pre signing step, and the pre signing step is mostly due to we want to get everyone these, these linear components. There'll be, I'll publish the slides to Twitter also. So if you want to catch up on that later, you can do that.
00:07:37.294 - 00:08:43.094, Speaker A: But the best in class old world signature, where we're going to get to BLS, which is kind of like new world signature, the best we can kind of do with the old signature techniques is like Frost, which is the EdDSA paper published in 2020, which has one round of pre signing and one round of signing, compared to cGMP, which has somewhere between four and seven rounds of pre signing and one round of signing, depending on the protocol you implement. And so Schnorr signing basically looks like this. We need to take everyone's private keys in a sort of sneaky way where no one else gets to learn what everyone else's private keys are. And each player does the following. They retrieve some random information that they got in their pre signing round, which I'm going to kind of brush over. They get some random information and they compute the group. They compute what their adjustment for the group they are as.
00:08:43.094 - 00:09:31.264, Speaker A: So they could actually be out of a group of n. They could be any t players in a group of n. The Lambdas, there are the adjustments for the fact that they're net players and they broadcast zi. And Zi is the sort of partial of the total signature, and at the very end, the signature is just the sum of all of their partial signatures. And this is pretty elegant because we kind of get to say, hey, everyone, all we need to do is agree on some random nonsense beforehand. In our pre signing round, take one round, be great. And then we have an o to get to a final signature, a threshold signature, something that we needed to be verified, because at the end of the day, a transaction is just a signature.
00:09:31.264 - 00:10:12.754, Speaker A: I'm not lying. A transaction is really a signature. Yes, I'm slightly lying. A schnor signature process is a bit more than I've described, because there's also a requirement on some zero knowledge proofs to say each of the players in that scheme needs to convince the others that they did the right thing. Because if they don't know who screwed the pooch, then everyone's looking at each other like, who's evil out of us? And then you've got like a pointing guns mexican standoff. So we get to BLS. I should have convinced you that schnor is maybe slightly less hard than ACDSA, but now we're going to get to BLS, which is even slightly less hard than schnor.
00:10:12.754 - 00:11:06.034, Speaker A: So the question we ask with BLS is, what if we got to modify verification in the two schemes beforehand? We basically stuck to an already existing scheme, which is, here's some format for creating a single signature. Not a threshold signature, a single signature. What if we got to change our verifier to say, I'm going to accept an entirely new type of signature and I'm going to invent some elliptic curve cryptography? Sounds like fun. So the type of elliptic curve cryptography we're talking about is pairing cryptography, and it specifically means one thing. We want e. We want a function e that says okay, so here's an element in group one and an element in group two. I want a bilinear pairing between an element in group one.
00:11:06.034 - 00:12:09.304, Speaker A: An element in group two you can think of when I say an element in group one and an element group two is like they're numbers between one and some prime. That's that. And we want to be able to exponentiate x or y or all of it and say it's all the same because it gives us really neat cryptography. And there's been a way to do this since the 1940s, invented by a guy named Andrew Whale. So with our new fancy math tool in hand, we're going to create some secret sauce. We do a new, even simpler signature scheme and we say, sign a message, hash it and exponentiate it, send it. And the verifier just says, ok, so does this pairing equal that pairing? And this is real easy because it makes for a really easy aggregatable signature.
00:12:09.304 - 00:13:18.728, Speaker A: We just say, hey everyone, multiply your public keys and we'll aggregate them all and have a signature. Because multiplication in the base is addition in the exponent. I've lied. That was a lie when I said multiplication in the base is addition in the exponential. I wasn't lying about that, but I was lying that this is a secure scheme because we've just combined everyone's public keys and said we got a secure signature. And that was a lie because we actually want multiplication in the base to be exponentiation in the base, because then we actually have to use our private keys, and that's kind of important. With a very simple modification, we say, okay, everyone needs to choose a secret, share a one through at, and then we need to pair them, and we output a valid signature.
00:13:18.728 - 00:14:00.644, Speaker A: And that's pretty much it. That's pretty elegant. And that's why we're talking about using it in Ethereum, too. So one of the neat things about block validation is that you might like to have a couple validators, or a couple hundred validators, or a couple thousand validators. One of the applications of this is that you can have as many validators as you want. It's really easy to check their signatures and compute them. So what learn? I ask, finally, what's a tss? It's a threshold signature, but you knew that.
00:14:00.644 - 00:14:36.182, Speaker A: Why is ECDSA hard? Because it's old and because Satoshi used it. What's the deal with Schnorr? It's less hard, but I didn't give you enough time to read the math. Why is BLS easy? Does the nice things. Aggregates goes together like glue, but good. What happens when post quantum? Oh, everything broken. But fortunately, these guys broke in two. This came out last week.
00:14:36.182 - 00:15:17.086, Speaker A: A multibillion dollar quantum computing company revealed that they were totally lying about everything that they had claimed to be able to do. So, quantum computing, kind of scary. At least there are as bad scammers there as there are here. And that's my talk free blog post if anyone wants it. And thanks for coming. I'm cryptographor on Twitter. If anyone missed that, last chance for the blog post, I can show you later.
00:15:17.086 - 00:15:40.334, Speaker A: And I work at a project called Entropy. We're using threshold signatures to do asset custodian stuff, which is sort of like what your multi signature does and sort of like what a central bank does, but in a decentralized, trustless way. So if you're interested in that at all, come talk to me afterward about entropy. And that's me on Twitter. All right, see y'all.
