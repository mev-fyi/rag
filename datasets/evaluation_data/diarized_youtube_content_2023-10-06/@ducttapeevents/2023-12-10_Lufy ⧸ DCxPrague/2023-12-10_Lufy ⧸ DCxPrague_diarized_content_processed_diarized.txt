00:00:00.120 - 00:01:11.194, Speaker A: Go. All right, so once again, hey everyone, I'm Luffy from sushi. I'm a developer and this is my presentation. I've been trying to come up with a good topic to talk about for a while now, and, well, here we are. This is something that I think that might be finally interesting for you guys, and I hope that you find it as interesting as I do. So I'm sure that many of you are aware of bridges and you guys know how they work, but there might be a lot of stuff you might not have heard about yet in this space. The thing that everyone knows, right, is that you can transfer assets across bridges, but with, let's say, recent, not so recent in this space, but recent improvements, you can do much more than that.
00:01:11.194 - 00:02:10.350, Speaker A: But not everyone knows all that much about bridges, which I made sure of by bringing a couple of friends here. So I'll just start with the basics. So, as I said, the classic thing that everyone knows is the transfer of assets across chains. That was the initial, initial focus, that was the initial point of bridges. But yeah, again, lately it's become much more than that. But let's just go through the classic stuff first before moving on. There are three basic models for bridges.
00:02:10.350 - 00:03:54.314, Speaker A: The oldest one is lock and mint. It works by locking the native asset on the native source chain and then minting a backed token on the destination chain. A good example of this is Reb bitcoin or WBTC, where a trusted custodian receives and locks, probably in a spreadsheet, but locks a bitcoin on bitcoin and then proceeds to mint WBTC on Ethereum and they send it to whoever sent them the bitcoin on the bitcoin blockchain. Very similar, but kind of different model is burn and mint. It still works by somehow kind of locking the token on the chain you're transferring from, but instead of actually locking, it's being burnt and then minted on the new chain. The difference here is that the token stops existing on the source chain, but it's still that same token and it's still backed. Because if you burn it and you mint the same amount somewhere else, and if the token supports it, that's very important, then you pretty much have the same result.
00:03:54.314 - 00:05:09.094, Speaker A: If you try doing this without explicit support from the token, you would be burning something you can't get back anymore. I remember there was, it was called TBTC and they tried introducing a new, let's say, bridging mechanism for bitcoin by straight up burning the bitcoin on the bitcoin blockchain and then minting TBTC on Ethereum. But as you might imagine, something like that, it's just not gonna work, because the value of the bitcoin is kind of lost because you can't then get it back by bridging back and actually selling it as bitcoin. So that was a very much failed experiment. And if I, I think they don't exist anymore. They failed a couple of months after launching. So, yeah, it has to be supported by the token, and it has to be expected that this is going to be the case, that the source token is going to be burnt and the new one is going to be minted.
00:05:09.094 - 00:06:56.574, Speaker A: The third model is deposit and withdraw. It's probably the most widely used one nowadays, and I called it deposit and withdraw because it uses liquidity pools. It uses a liquidity pool on the source chain, and it uses a liquidity pool on the destination chain, and it allows for usually much faster bridging than native bridges, because the assets don't actually move from one chain to another, but they are deposited on the source chain. And then a different, but essentially the same token is sent to you on the destination chain. This is very useful for things like stablecoins, because you might have native stablecoins issued on both chains by circle, for example, or tefer. And while it is the same token, the native bridge usually, or any bridge for that matter, might not be able to replicate this. So if USDC is native on both the source chain and the destination chain, the only way to actually transfer tokens across the chains is by the use of liquidity pools.
00:06:56.574 - 00:07:52.124, Speaker A: All right, so that's that. Of course, nowadays most bridges are not as simple as the red bitcoin one, because that's pretty much the simplest solution for the problem. Nowadays. You've got bridges that are faster, that are kind of more secure and trustless. Bitcoin is pretty much none of this, because, again, it's managed by a couple of custodians who theoretically can be compromised. You have to trust them to actually have the bitcoin and to not do anything with it, to keep it locked. And the process itself, of course, involves humans, so it's just going to be slow.
00:07:52.124 - 00:08:39.074, Speaker A: Of course, all of these improvements introduce a lot of complexity into bridgings. Complexity also, of course, brings security implications with it. So it's kind of a pick your poison thing. But there was another improvement, another layer of complexity, let's say, which was the introduction of messaging, cross chain messaging. It's kind of a generalization of the process where before it was the information that was passed from one chain to another was sent. X amount of tokens here and here. Pretty much.
00:08:39.074 - 00:10:18.794, Speaker A: With messaging you can send arbitrary information across chains, which means that in said message you can include, for example, a payload for a contract execution, which means that you can do much more with it than just straight up simple token transfers. So a couple of examples. Crosstream tokens with something like deposits, not deposit, lock and mint. You'll lock the tokens on the source chain, right? And then you'll mint that bridges specific token on the destination chain. Now this is of course an issue, because if you have free bridges, you'll have free resulting token versions, which is pretty bad for liquidity fragmentation. It's bad for, I guess, lending protocols, because they then have to choose which one they actually want to use, which kind of becomes the canonical bridged version of the token. I've noticed an issue with any swap, because they just have random, random tokens everywhere and it kind of becomes a mess.
00:10:18.794 - 00:11:51.524, Speaker A: What's nice about cross chain tokens is that they operate under the burn and mint model, where the tokens are destroyed in one place and created in another, which avoids liquidity pools and the fees associated with them, because you don't have to pay the liquidity providers and they also don't lock you into a specific bridge because the token's owner can specify a list of bridges which can mint and burn the token. So you can choose a wide range of bridges and you unlocked into a specific one, which I consider quite a problem, because in this space everything moves so quickly. Like bridges get hacked, protocols shut down. So if you use something like Layer Zero's omni chain token standard and layer zero shuts down, your token just gets stuck wherever it is, and there's nothing you can do with it anymore. With this standard. With ERC 7281, you can just pick a new bridge and you can continue. All right, and that's cross chain landing.
00:11:51.524 - 00:13:19.618, Speaker A: It's a pretty complex solution, but it's still quite interesting. I think you can very often see wildly different rates across chains. Like somewhere you could borrow USDC for 5% and then on another chain it's going to be 20. So being able to utilize the bat array is of course beneficial for you and for everyone else as well. The other thing is, different chains usually offer different protocols, and even if you've got one protocol across a couple chains, the parameters for collateral also vary. Like for example, these are not accurate numbers, probably, but you could have aave on polygon where it would offer 80% loan to value, something like that. And then you could have the same thing on Ethereum, where this percentage could be something completely different.
00:13:19.618 - 00:14:54.614, Speaker A: So you really would prefer to have the higher loan to value. And you can do this very easily with cross chain lending. How it works is you could have a transaction that bridges your collateral to the chain with better parameters. There you have a contract which deposits your collateral, it borrows whatever you want to borrow, and what you want to borrow is bridged back to whatever chain you are on. So it's like this nice easy experience for you. And then governance, it's probably not as fun or as interesting as the others, but cross chain governance with the rise of daos and community involvement, this is the cross chain. The cross chain life is quite annoying for those people who want to actually participate in the Dao's voting processes, because if you had your tokens, for example, sushi on Polygon, you wouldn't be able to actually vote on snapshot, because that's kind of locked into Ethereum.
00:14:54.614 - 00:17:03.974, Speaker A: Aave has already kind of solved this exactly with cross chain messaging, and they now allow you to both from Ethereum and polygon, which means that you can have your tokens on a cheap chain, you can use it as collateral, whatever you want, pretty much, if it supports it properly, and you can still participate in the governance process, which I think is quite important for the health of the ecosystem. And then there's cross chain of swaps. Those work with liquidity pools. The problem with straight up bridging for the use of liquidity pools is that you have to have liquidity on both sides, or, well, at least the destination side, which if you're bridging a stablecoin or a major token like ETH, it's not really an issue because there's going to be a lot of people who are bridging the specific token, which means there's going to be quite a lot of, quite a lot of liquidity. However, if you're trying to breach something less popular, let's say, I don't know, the arbitrum token, nobody really does that straight up. So liquidity providers just won't care to provide liquidity for it. So the way to fix that is to, before you actually do the bridge itself, you could swap to a token that is actually supported by a liquidity pool, usually against stablecoins.
00:17:03.974 - 00:18:07.222, Speaker A: You then bridge those stablecoins, and on the other side you swap back to whatever token you might want. Of course this brings with it trade fees, but it's pretty much the only fast way to move tokens that are not really popular, or at least are less popular across chains. Yeah, so that's kind of what I'm going to be talking about for the rest, because sushi has a cross chain swap product. It's called Xswap. It's pretty simple, I would think. You just select your source chain, your source token, and then you select the destination chain and the destination token. As you can see, you can choose pretty much any token you might want and any token that has liquidity on both chains.
00:18:07.222 - 00:19:58.734, Speaker A: So you could swap from, I don't know, maker on Ethereum into, let's say, arp on arbitrum, which is a pretty seamless experience, I would think, compared to having to do the swaps yourself, then bridging and then doing another swap on the other side. What's also nice is that Xswap offers aggregation. We've decided to implement that because sushi doesn't have liquidity across all tokens, and being able to capture trades that might at least partially go through sushi and then possibly through, for example, uni or curve is more beneficial to us than leaving the whole trace to uni. So it's kind of an optimization for users and an optimization for us, because again, if we didn't have the full liquidity that the user requires, they're just not going to swap with us at all. So we'll just pull some liquidity from other sources and ideally keep a part of the trade on the sushi side. And what's cool again about XswaP is that this aggregation happens both on the source chain and on the destination chain. I think it currently supports bridge aggregation as well.
00:19:58.734 - 00:21:27.744, Speaker A: Basically, it will try to pick the best bridge that it can, including the swap as well. So if there was a good deal for an Eve bridge, it would see if it makes sense to swap into ETH instead of a stablecoin, and then it would use USDC as the bridging token. But I think we actually don't currently use bridge aggregation because it doesn't really make sense because layer zero offers the best rates at the moment, if I understood it correctly. And how it works is we've got a data cache, it's called extractor. It finds and keeps an up to date record of all the pools that we might be wanting to swap through. It listens for events, and every time a swap happens somewhere, it updates the data locally. If we tried to fetch all this data on demand, when someone tries to swap, it would just take too long to fetch everything that might possibly be relevant.
00:21:27.744 - 00:22:07.574, Speaker A: So we just keep a record at all times. This data is then fed into an engine we call science. Tyinz actually handles the routing itself. It finds the best path for the tokens. Well, it finds the best path through the liquidity pools. It's a bunch of math that I totally understand, but, yeah, it's cool. It's cool for sure.
00:22:07.574 - 00:23:09.934, Speaker A: Anyway, Tynes spits out a root that's fed into root processor, which is what we call our router, I would say. It's named quite creatively because it processes routes. So I think it's a good name for router, I guess. Anyway, so what happens is you get a route, it's fed into root processor, you get it swaps the token to whatever you are bridging, then it goes through the bridge. And then when you get all the confirmations you need from the bridge, the tokens are received by a contract that calls root processor on the destination chain and sends the tokens you requested to your wallet. Yeah. Okay.
00:23:09.934 - 00:24:24.178, Speaker A: I had an ending slide there. Anyway, that's it for me. Do you guys have any questions? Nomad Bridge. There's been so many hacks that it's kind of hard to keep track of them. Yeah, I think that's going to be that model. Yeah, that's usually what those bridges use. Like wormhole, which got hacked, also used exactly this model, Ronin, from, what are they called? The Ronin bridge.
00:24:24.178 - 00:25:17.944, Speaker A: It's a game. I don't really, I can't remember now. Well, it depends, because you can have different implementations. Let's say if you have the arbitrum bridge, which runs pretty much straight up on Ethereum, even though it's a lock and mint bridge, it's very secure because it's on chain straight up on chain straight up on Ethereum. So it's secured by Ethereum. But if you have the same model for something like, I don't know if you're into Solana, which is wormhole. Right.
00:25:17.944 - 00:26:10.754, Speaker A: And it's again, as well, the lock and mint model, since it's not secured by Ethereum, I think wormhole is a multisig bridge. The security implications are totally different and much worse, as we've seen. So it really depends what you are actually doing. So I would say if it's a native bridge, ideally from Ethereum to a roll up, then the safest one is going to be the native one, whatever is offered by the roll up. And otherwise I would probably go with the withdrawal and deposit, deposit and withdraw model. Anything else?
00:26:31.234 - 00:26:57.094, Speaker B: There's no communication on the actual website that it was offline, a sensible amount of funds, and then later there were a lot of transponding transactions, and then the discover that it was offline through Twitter. So in terms of communications, I guess, say, for example, the multi chain website was decentralized, or the.
00:27:28.714 - 00:27:58.984, Speaker A: Yeah, that's going to be the issue with decentralization. It's just inherently slower than a centralized approach. So while they could have implemented something like a flag that a centralized entity controls, that would just say something's wrong. Check out Twitter. It's just. It's a trade off, you know, like either. Either it's like fully decentralized or it's not.
00:27:58.984 - 00:28:23.944, Speaker A: And it offers these, these comforts. But yeah, the. The multi chain situation was really not handled properly, I would say. And if it was due to lack of foresight that some. Something like this might happen or anything else, that's hard to say. But yeah, bridges are honestly kind of scary in this regard. You just.
00:28:23.944 - 00:29:04.744, Speaker A: It's usually just a black box that you can't see into. If it's a multi sig. You don't know who these people are. You don't know if. Even if you know who the people are, if they don't actually, like share the keys or something, you just don't know. So, like, if I had to recommend something, it's just native bridges, like the one from ethereum to arbitrum. But of course that's annoying because when you try to withdraw from arbitrum back to ethereum, it's going to take a week, which is terrible experience.
00:29:04.744 - 00:29:58.464, Speaker A: Well, thanks for listening. I wanted to mention all of the XswaP stuff is open source, so if you want to check it out, you can have a look. The aggregation, everything. Yeah, I'm actually not sure what MPC is actually. I haven't heard about that. I'll have a look. I'm sorry, I can't answer the question though.
00:29:58.464 - 00:30:21.024, Speaker A: Right. Yeah, I haven't heard about that, but I'll have a look. Yeah, thanks. Right, yeah, that's it. Thank you.
