00:00:01.200 - 00:00:50.334, Speaker A: Okay, so I think we're ready to get started. Okay, so my name is David, I'm from Carmine Finance and we have built options amm on Starknet and we think that Starknet is really beautiful l two, and it works perfectly. So today I'm going to show you how to jumpstart your app. So if you're thinking about building decentralized app and you're looking for an l two, Starknet is an amazing choice. And I'm going to show you here in under an hour how to get started. Connect to Starknet. Let your users connect their Starknet wallets and everything.
00:00:50.334 - 00:01:29.938, Speaker A: It's meant as a code along session. So if you want to, you could take out your laptop and code with me. If not, there's going to be a recording so you can get back to it anytime. And if you ever need some help you can just ask me for anything. Right, so what we are going to need to create our app, obviously some id and terminal. We going to need to know some JavaScript NPM which is like the node package manager for JavaScript packages and reactions. You don't need to build it in react, but react is the most widespread front end framework.
00:01:29.938 - 00:02:07.384, Speaker A: So I'm building it in react. And there are many nice libraries for React, but you can use any front end framework or you can build it in vanilla JavaScript. I mean that would be a bit hard, but you could do it, no worries about that. So in this example we're using React and so there are three milestones. I think we can do all three of them within like 40 minutes or something. But if not we can do the first one, no problem. We're going to read some data from Starknet blockchain, then we're going to connect user's wallet, which would be pretty easy given all the beautiful libraries that Starknet has available.
00:02:07.384 - 00:02:46.824, Speaker A: And should we have enough time we're going to write some data to Starknet. Let's get started. I have created a starter project, so if you want to code along you can just like show of hands, is anybody going to do the code along? Yeah. All right, awesome. So I created a bitly link so that you don't have to write the whole damn thing. But if you go to my GitHub you can find Starknet Dappdemo. Just going to quickly show it's right here.
00:02:46.824 - 00:04:17.164, Speaker A: So you can clone it or fork it or whatever. Sorry. And after clonate you need to run NPM install in your terminal to install all the dependencies such as react and stuff. And after that, if you run nupumo Rundev, it should start your development server and you should see a website like this. So for those coding era along, did you manage to clone it? Ah yeah. Do Wi Fi, the ultimate nemesis. Are you also coding your own? You will be.
00:04:17.164 - 00:06:11.864, Speaker A: Don't worry, it's super simple. If you get past the Wi Fi, you're fine. It okay, so how's it looking? Ah, awesome. Awesome. Okay, so maybe while we're cloning it and installing dependencies, I'm going to walk you through the project. I created it by running we create react app. So we j's is just a JavaScript bundler.
00:06:11.864 - 00:06:41.104, Speaker A: If you're familiar with JavaScript and frontend development, you probably know those. And we did pretty quick. So I chose this one. And so what I did is I just ran NPM create with at latest, and as a template I used react typescript. So react, yes. So that's the starter that you guys are cloning right now. And I edit some files to sort of jumpstart us.
00:06:41.104 - 00:07:29.884, Speaker A: So if you're familiar with react, your starting point is this like app. So I just created a div and gave it a background image. Also added some little bit of css into the index CSS. So once you get this going, you should see a website like this for the newcomers. Do you guys want to code along? We're going to be building an app on Starknet. Yeah. So if you go to my GitHub, or you can just use bit ly Starknet starter, you can just clone it and then install dependencies and run the dev server.
00:07:29.884 - 00:08:18.684, Speaker A: It's not mandatory, you can just look. But if you want to code along, you can. So how are we looking? Perfect. What about you? Sorry about that. Sorry. Yeah. Oh, damn.
00:08:18.684 - 00:09:17.976, Speaker A: Yeah, yeah. Or you can maybe try to connect to a phone. Can somebody make a hotspot for you maybe? Yeah, I mean, JavaScript dependencies, that's like heavy duty download right there. Well, anyway, once you guys are ready. So this is our app. I have created this API ts. This is where we'll be making requests.
00:09:17.976 - 00:10:03.814, Speaker A: And then there's the components folder, and these are the three components that we. Yeah, sure. It might be too much, huh? Yeah, this is. Okay. Okay, so we're gonna start with the total supply. So ideally this component would show us the total supply of Eve on Starknet Testnet. So first thing I'm going to do is I'm going to add this component here and I'm using versus code and it's super smart, so it's already telling me that I have this component here, but basically you need to import it from components total supply.
00:10:03.814 - 00:10:38.164, Speaker A: And we should now see it right here. Yeah, so there's ETH total supply, but it's not currently showing us the total supply because it's not talking to the blockchain yet. So this is where the magic happens. In the API ts. We're going to use library starknetjs, which here we can see the documentation. It's just starknetjs.com. And if you go to get started here, we can have a look at the provider object.
00:10:38.164 - 00:11:06.884, Speaker A: Wait. Yeah, and here's some graph. So you have the Starknet blockchain and the provider is what helps you communicate with Starknet. And then there's like the contract and account. We're going to talk about that down the line. And here's our website. So first we're going to need a provider and I think it's easier than to just go new provider and it suggests to import provider from Startnet.
00:11:06.884 - 00:11:47.864, Speaker A: So basically provider describes the provider of the connection to the blockchain. So we need to pass it some props to describe the provider. Also we're going to need to create a provider like this. And now it used to be that you would use sequencer, but that was like the Starknet sequencer gateway, but they are being phased out. I think you no longer can use them on Testnet. I think they're still usable on the main net. But now you want to use RPC provider, which is, well, the decentralization.
00:11:47.864 - 00:12:28.104, Speaker A: There are many RPC providers, so if one goes down, it still works. Right? Whereas back when it was just the sequencer, there was this single point of entry which could be prone to errors if it were shut down somehow. So now we need to use some RPC provider. And to describe RPC provider we need to provide node URL. And I have in my project created this file, constants, ts that holds some constants that we're going to need. And one of those is RPC provider address. So we're going to specify node URL as RPC provider address.
00:12:28.104 - 00:12:50.004, Speaker A: We're going to import that from constants. Okay, so now we have a provider. We can also specify chain id. We don't really need to because if you look at this address. Oh wait, that's the wrong one. This isn't one I wanted to use. Hold on.
00:12:50.004 - 00:13:31.954, Speaker A: Well, we can look for public starknet RPC provider and there's plenty of those to go around. Well, the one you can see here is actually our carmine finance which is the one that I in the end decided not to show you. But I guess I didn't change it. Damn. Okay, nevermind. Okay, so that's the RPC provider address. We can specify the chain id which we need to import constants from Starknet and Starknet chain id.
00:13:31.954 - 00:14:17.404, Speaker A: And we're going to be doing this on Testnet because the final step is sending some ETH to a different wallet. And, and I don't want you guys to send your mainnet ETH to someone else. So we're going to be on SN Goerlay, which means Startnet Goerly, that's the Testnet network. So now we have a provider. The next thing that we need is a contract because we are going to be asking a smart contract for some data. So we'll create new contract and contract needs an ABI. Now ABi means applications, binary interface, and I have already created here Abi Json.
00:14:17.404 - 00:14:59.822, Speaker A: And this basically describes the functions that you can call on the contract as well as some variables and a lot of stuff. And what we are interested in is the total supply. We can have a look at Testnet Starkscan. This is where you can interact with these smart contracts. And the one smart contract that we're going to be working with is the ethereum. And notice that this isn't the l one ethereum, this is the l two version of Ethereum on Starknet. And our goal right now is to call this function total supply and get the response that should look like this.
00:14:59.822 - 00:15:53.412, Speaker A: Okay, so first we need to create an instance of this contract. So we're going to pass in the Abi. So we have to import the Abi from Abi JsON and we'll pass it here as the first parameter. The second one is the contract address. We can find that here. So if you go to Starkscan and you just type in ETH, it's going to find Stargate Eve, which is the Starknet Ethereum. I have it open here so I can copy this address, or I have already put it here in the constants file, so I can just import ETH address, which is easier to read if it's just the variable and not the full address, which is like 64 characters.
00:15:53.412 - 00:17:08.356, Speaker A: And the last one is we're going to need provider or account. Right now we need just the provider. So I'm going to give it the provider that we have created, sorry, not this one, this provider that we have created. So this will create an instance of contract that knows what the contract looks like because it's described in the API, it knows where to find the contract because there's the address of the contract and it's got a provider, so it knows how to talk to the blockchain. And so now all we got to do is I'm going to do const response equals we're going to take the contract and we're going to call a method, and the method we're calling, as we have looked here is total supply and then we're going to give it call data, which is like for example, if you have here balance off, you need to give it the account that you're asking for balance off. But the total supply doesn't need any arguments. So we can just put empty array here.
00:17:08.356 - 00:17:48.804, Speaker A: Okay, now this is an async call, so we need to await it. And yeah, that's pretty much it. And now we just return the response as beginned. Now obviously you want to do some error handling in case you cannot connect or something like you could do like try catch. If you're like a JavaScript developer, this is just a quick demo, so we're going to assume that everything works. We're going to just go dehapy path. So are you guys coding along this? Oh damn, really sorry, sorry.
00:17:48.804 - 00:18:52.774, Speaker A: Okay, sorry. Okay, okay. Okay, so I'm going to go back to the component total supply and I'm going to import the function that I've just created and I'm going to call it in the useeffect. I don't know how experience are with JavaScript, but like, or rather react because useeffect is like the react hook that you use to call something when the page loads. So here we're gonna call the get total supply and it's gonna yield us some response which we are going to use to set data and we are going to need another hook with the total supply. Again, this is like react stuff. If you know react, you've written this thousand times and you don't even need to think about it.
00:18:52.774 - 00:19:40.768, Speaker A: But if you don't know react and you're looking at this, it might look a bit like dark magic, but the only thing you can't use, like if you were to do let total supply equals, I don't know, zero, and then you would just set this variable to different value. The problem is that every time you interact with the website, the react component is re rendered and it would always set the value back to zero, which is why you need to use use state, which keeps the state of the component across re renders. So it's just a bit of dark magic that react needs to work properly. So here we can do set total supply to the response. Yeah. Rests. Yeah.
00:19:40.768 - 00:20:42.158, Speaker A: So the first time the component is rendered, this triggers, which calls the get total supply, and then it sets the total supply, this variable, to the rest. Okay. And so now what we are going to do is if there is no total supply. Ah, sorry, sorry. You can use whatever it just react is the most common one and the one I have the most experience with, so I'm like, you know, confident in this one, but you can use whatever, you could use one JavaScript. It would probably be quite difficult to get into some nitty gritty logic, but yeah, you could use anything. Yeah, I mean like the important part is this.
00:20:42.158 - 00:20:59.014, Speaker A: This is where you talking with the blockchain. Right. And then you can display that information that you get as a response in whatever way you want. Or just here choosing react. Right. So even the typescript is no more. Yeah, yeah, no typescript.
00:20:59.014 - 00:22:09.514, Speaker A: Typescript just makes it less error prone, like it's easier to find mistakes with typescript. So again, it's just, it's my tech of choice, it's not required if you start. Well, I actually have no idea what are the percentages of usage on Starknet per se, but I have to say I haven't seen an app that would be written in something else than react on starknet so far. I'm not saying there aren't any apps written in different frameworks than react, I just haven't seen any, I don't think. But there are many amazing frameworks. But it's just react is so widespread that whatever problem you run into, somebody has built a react library for that problem. Whereas if you use, for example, svelte, I'm not sure how many web, three apps that are written in svelte.
00:22:09.514 - 00:23:02.468, Speaker A: So there might not be so many libraries that would solve some of the problems that you might run into. Yeah. So if you're starting, starting with react makes the most sense, it's really straightforward. And then maybe once you're comfortable, you could switch to something other and build maybe some libraries yourself for other users of that framework, maybe. No, thank you. Okay, so how are we doing? Yeah, so, okay, so we have a total supply that is initialized as undefined, and in this hook it is set to whatever comes as a response from get total supply function. So if we don't have any total supply, we're going to return a null, and if we do have some total supply, we're going to show it here.
00:23:02.468 - 00:23:46.800, Speaker A: And so, okay, the value that's being returned is big int, which is JavaScript native representation of big numbers. Because if you were to use regular number, you could get such a large number that you get an overflow. And, well, normally you would get an error, which is like, okay, but here you would get a huge negative number because it overflows and goes back to minus. That's why it's using bigint. So we need to do to string because it doesn't know how to display bigint, so you need to do to string. And this is like the Redx, so you can do base ten, base 16, whatever. Okay, so live coding demo.
00:23:46.800 - 00:24:29.984, Speaker A: Let's see if it works. Chances are it might not, but oh, no, it was. So here you can see total supply, and it's the same number that we saw here. So does it work for you guys? Okay, okay. Okay. But yeah, I mean, it might seem like not such a big deal that we just see Eve total supply and some number here, but we just queried the starknet blockchain through contract and through provider. And, yeah, it was fairly quick, I'd say, and easy, right? It's easy.
00:24:29.984 - 00:25:05.050, Speaker A: Okay, so that's our first milestone. We have managed to show the total supply of ETH. If you're thinking that this number is kind of weird, you need to divide it by ten to the power 18 to get, like, the ETH. This is actually way like the sort of like the sense of ETH. And if you think that the number still doesn't fit, this is like the Starknet ETH. It's like how much Starknet, how much ETH is bridged to the Starknet. It's not the supply of ETH on l one, it's supply of eve on l two, and on testnet of l two.
00:25:05.050 - 00:25:42.152, Speaker A: So, like, this number, like, pretty much doesn't mean anything, but it's a nice number that we got from Starknet. Okay, so let's get to the milestone. Number two, which is connecting wallet. So there are two major wallets on Starknet. One is Argentx, the other is Braavos. As you can see, I have both. And, okay, so to connect wallet, we're going to use a dependency called Starknetgate, which has been built by the argent team quite recently.
00:25:42.152 - 00:26:36.284, Speaker A: I think, like two weeks back, they did a demo on it, and I thought it was a nice demo, so I put it into my demo. So we're going to move into the next component, which is connect wallet. And here we have a button that says connect wallet. So we're going to add it to our app TSX. And now we can see this connect wallet button, only it doesn't do anything yet. Okay, so again, if you're familiar with react, we're going to use some hooks again because we need to keep track of the wallet that is or is not connected. So we're going to create wallet and set wallet use state.
00:26:36.284 - 00:27:29.594, Speaker A: So again, this is to keep track of this variable across renders and re renders. If you're a front end developer, you know, if you're not a front end developer, then tell your front end developer to build this for you. And so we're going to need to pass the wallet into this, into this component. So we're going to have wallet, which is a connected startnetwindow object. Okay, so now this might seem a bit cryptic, but basically startnetJs exposes this interface connected StartNetwork window object. And if you want to have a look at what such a connected startnetwindow object looks like, you can actually just go into your devtools. And I'm gonna try to make it a bit bigger.
00:27:29.594 - 00:28:08.754, Speaker A: Never mind, maybe not. Ah, it zooms the page, not the console. Anyways, so basically if you have wallets in your browser, they are exported on the window object. So you can do like window starknet. And here's both Bravos and argent. And basically, so this is just like an object that's right here and you can see is connected false. So currently I am not connected to my starknet Argent, but ideally we would like to change that.
00:28:08.754 - 00:28:58.158, Speaker A: So back to the connect wallet component. So we're gonna need the wallet and we're going to have this function, set wallet, which takes wallet, which is either connected, starting to window object or undefined. If we want to sort of disconnect the wallet. And this just means that there's no return value for this function. So, okay, and here we can do props of type props. So now if you go to up here, you can see that it's complaining that it takes some props and we don't have any. Oh, by the way, this can be undefined.
00:28:58.158 - 00:29:37.488, Speaker A: So I'm going to put in the question mark, which means wallet either isset or is not both is. Okay. And now here we set wallet equals wallet and setwallet equals setwallet. Yeah, so this is known as the probes. Drilling where we have probes here in the app and we drill them into the components. Oh, I didn't specify the type here again, connected starting to window object or undefined. So as you can see, it's not much code.
00:29:37.488 - 00:30:21.450, Speaker A: It's maybe a bit fast and confusing. Sorry about that. Okay, so here we're gonna get wallet and setwallet from props. Beautiful. And if there is no wallet, we want to show the button that says connect wallet. But otherwise, if we do have a wallet, we want to show button that says disconnect. Yeah.
00:30:21.450 - 00:31:27.644, Speaker A: So if the wallet is set, it's not undefined, then we show, wait, if the wallet is not set, because this is negation, we'll show connect wallet. Otherwise, if the code doesn't stop at this return, it moves to this return and returns a. Well, this, this button, this says disconnect. Right? Because we want to either connect or disconnect. And now these buttons will have to do either handle connect, which it will be an async function, or we need to handle disconnect. Okay, so when handling connect, we're going to get a wallet by calling connect function. Now this connect function is from Starknetkit.
00:31:27.644 - 00:32:31.954, Speaker A: So basically all the difficult stuff, all the logic behind it, it's handled by this third party library that is developed by Argentine. And all we have to do is just call this function and we can provide it some sort of, as a parameter, we can give it some options how we want it to behave. I'm going to set modal mode to always ask just so that it can like ask us which wallet we want to connect and we can look how beautiful the model displayed is. So this will give us a wallet object and it can be, as I showed here with window starknet Argent, it has, this is connected, which is right now false. And after we call connect, we would like it to be true. So we're going to check that that happens. So we're going to go wallet isconnected.
00:32:31.954 - 00:33:25.894, Speaker A: And if that's true, then we are going to call set wallet wallet. So what that's going to do is it's going to call this function here in the app and it's going to set state to disconnected Starknetwindow object. That's the wallet. Okay, so yeah, and in handledisconnect we're going to call the function disconnect. That's again, again from start Netgit. And then we are going to set wallet to undefined because no wallet is connected anymore. And now we're just going to set that here, this button, when we click it, we set onclick event, we're going to call handle connect.
00:33:25.894 - 00:34:02.884, Speaker A: And here when we click this button, we're going to call handle disconnect. Okay? And we're going to check if it works. Connect wallet. Ah, so we didn't have to write any of this model, any of these connectors. And we can already see that there's like continue with email. That's the argent email wallet, there's mobile wallet, there's the regular argent x wallet and the Braavos wallet. So I'm going to connect my argent wallet.
00:34:02.884 - 00:34:51.384, Speaker A: Now. Normally the wallet would pop up and ask you if you want to connect and if you want to allow this application to interact with your wallet. I already did that, so it's not asking me anymore. But now you can see that the button turned from connect wallet to disconnect. So we are now connected and we can double check that by going here again and looking at Startnet Argentx, I'm not sure if you can read it is connected and you can see that it's now true. So yes, we are connected and I'm just to like show you that we are really connected. I'm gonna go here to the app TSX and I'm just gonna do a quick thingy.
00:34:51.384 - 00:36:05.334, Speaker A: So if the wallet is set, I'm going to show a div just like the basic building block. I'm going to give it a class name of container. I have created some CSS rules for class containers, so it looks like same as the other containers. And inside there's going to be paragraph that says your address is. And here we're going to go to wallet account address. And again, because we're using typescript, you can have a look at this interface and you can see that on this wallet interface you have account which is of type account interface which has address which is a string and then has a signer and Cairo version. So I mean, it might look like a magic when I'm just like saying, yo, we're going to show wallet account address, but you can find it all inside the code, or you can go to the startnetjs and here you can have a look at the classes and there's the account interface which has the address amongst other things.
00:36:05.334 - 00:36:30.554, Speaker A: So you can find it all here. But if you've never built any decentralized app and now your boss is like, hey dude, I want you to build this decentralized app. You might be a bit like confused and don't know what to do. So that's what this demo is for. You can always have a look at this video and find it within minutes, hopefully. Anyway, back to my demo. We should see the address.
00:36:30.554 - 00:36:48.006, Speaker A: Oh, and here it is. My address is zero x 29 af. And if I open my argent wallet. You can see that it really is 29 a. And it ends with f zero eight. Yeah. So that's milestone number two.
00:36:48.006 - 00:37:11.404, Speaker A: Our wallet is connected. We can see our address. Everything is awesome. So you guys still trying? I mean, it should be like, there should be a recording so you can have a look at it and try it at home. A bit slower. What about you? Are you keeping up with the demo? Yeah. No, I mean, it makes sense.
00:37:11.404 - 00:38:00.162, Speaker A: I was going a bit too quickly. I'm sorry about that. Okay, so that's our wallet connected and we can jump onto the last milestone, which is we're going to transfer some if from your testnet wallet to my testnet wallet. We got to send it somewhere, right? So I have created this transfer component and I'm going to add it to the app. I named the component transfer. So we can see it here. This is where you put the address you want to.
00:38:00.162 - 00:38:22.770, Speaker A: It's kind of small. Make it bigger. Give me a sec. You can't see the starknet now, but you can see the app. So this is where we put some address and this is where we put some amount that we want to send. And here's the send button. Right now it doesn't do anything right, because this is just like the template that I created to get started with.
00:38:22.770 - 00:39:00.024, Speaker A: And in the template you can see there's this div, that's the container, and we have to address and amount. So that's what we see here. And there's the button which onclick calls handleclick. So now it is up to us to implement this function where we send the amount of money to the address specified. So we're going to go back to API ts. And now we need to write a write function that will actually write data to the blockchain. So again, I'm going to create a function, let's call it centef.
00:39:00.024 - 00:39:36.850, Speaker A: It's definitely going to be async. And now. So what we are going to need is a. An account, because the account, as you can see here, the account interface has the signer. So in order to send some, if you need to sign the transaction. And the account is what's going to sign that. So I'm going to say that this account is the account interface.
00:39:36.850 - 00:40:21.464, Speaker A: I'm going to pass in amount, which is actually a string, because you write it into an input box. So even though you're writing a number, it's actually a string. And there's going to be the toaddress, which is also a string. Nice. Okay, now we have this contract, which is the ETH contract, which is the one contract that we want to interact with, but we need to connect it to our account to give it a signer to sign transactions with. Okay, so we're going to do contract, and contract has a method called connect. Is there some recommendation? Attach to new provider or account.
00:40:21.464 - 00:40:42.544, Speaker A: Wow. That's exactly what we want to do. We want to connect it to the account that we have passed into this function. I mean, we haven't yet, but we will. And now we can do contract, and it's either invoke or execute invoke. Right. So here when we were getting total supply, we called contract call.
00:40:42.544 - 00:41:19.784, Speaker A: So if you do contract call, you're calling a read function. If you do contract invoke, you're doing a write function. You can see that here on starkscan, you have the read functions, and here you have the write functions. And we want to call the transfer function it. Yeah. So we're gonna invoke, first parameter is the method that's transfer, and the second one is arguments. Now, it might get a little confusing.
00:41:19.784 - 00:41:44.916, Speaker A: We're gonna look at the ABI, which is again the application binary interface. And we're going to find the transfer function. It's right here. And here we can see the inputs. So the first input is recipient, which is a contract address. And the second input is amount. And the amount is supposed to be unsigned integer 256.
00:41:44.916 - 00:42:40.516, Speaker A: So 256 bit or byte bit integer. So we actually need to turn the amount, that's a string into a UN 256. So we're going to do amount U 256 equals. And again we're going to use starknetjs, which has here amongst classes we should find, let me see, eight, no, it's actually in namespaces. There's UN 256, and we need to turn big number into UN 256. And it takes as a parameter anything of type big numeric, which is string number or bigint. We have a string, so it should work fine.
00:42:40.516 - 00:43:32.054, Speaker A: So we're going to go u into 56, bn two u into 56, and we're going to pass it the amount, and hopefully this should be amount as unsigned integer 256. So here we're going to go to address and amount, and we can do, and store it as a response. And we should await it because again, it's asynchronous call. And maybe we can console log it to CD response. Okay, awesome. We're going to go back to the transfer component, and now that we have this function, we want to call it here. So what did I name it? Senteath and it takes.
00:43:32.054 - 00:44:08.774, Speaker A: All right. It actually needs a wallet. So we're going to need a wallet. And again, we need to do the whole props drilling. So we need to send wallet in here and. Yeah, so we're going to go here. Props wallet account, this bank here.
00:44:08.774 - 00:44:30.386, Speaker A: It means that I know that the wallet is not undefined. It can be undefined because the transfer component is rendered even when the wallet is disconnected. Right. So right now it would be undefined. But I mean, we're gonna handle that. No worries. Okay, so this is the account.
00:44:30.386 - 00:45:14.816, Speaker A: And now we need amount and two address. So that's the handle click function inside the transfer component. And when you click this button, it's going to call this handle click. And we should probably do something like disabled. So if there is no wallet, so the button should be disabled props wallet. Which is why we now inside the handle click, can be certain that the wallet is actually fined. Okay, that was quite.
00:45:14.816 - 00:45:45.014, Speaker A: Oh, I actually used the wrong amount here. Quite a bit of code without checking if it works or not. What do you guys think? Is it going to work? So I am connected with my argent wallet and I need to send my money to a different wallet. Or actually I think I can send it to the same wallet, but it doesn't make sense. So I'm going to go into my Bravos wallet. I got to switch to the testnet. So startnet, go early.
00:45:45.014 - 00:46:08.654, Speaker A: And this is my account address. So I'm going to put it here. And now I'm going to send some crazy amount of if. Again, you got to keep in mind that this is like, if you need to divide it by ten to the power 18 to get ETH. So if it's got 18 zeros, that's one if. So this is like the button is disabled right now. Let me check this.
00:46:08.654 - 00:46:23.314, Speaker A: So it's disabled. Oh, wait, that's weird. Oh, no, never mind. I didn't. Yeah, I need to pass the wallet here. Sorry. Sorry about that.
00:46:23.314 - 00:46:51.444, Speaker A: Yeah, live coding, always fun. And here we are. So now my argent wallet is asking me to confirm to send the money here. You can see some details. It's on testnet. It's being sent to my Braavos wallet. And now I can just click confirm and you can see that the transaction is happening right here.
00:46:51.444 - 00:47:21.124, Speaker A: I think it's already finished. It's way too quick. So now I have more if than I had before. But I don't think I showed you how much if I had before. But yeah, yeah. We have successfully built a decentralized app that allows you to send ETH from your wallet to whomever you want. And yeah, we did it in about 42 minutes, which is like pretty good, I'd say.
00:47:21.124 - 00:48:00.620, Speaker A: So, yeah, sorry, I went a bit too fast. So the guys who were brave enough to code along got lost eventually. Sorry about that. But if you want to check out the final product again, if you go to my GitHub, I need to find it quickly. So there's the stocknet Dapp demo. Well, the wifi really is slow here. You can go to branch final, and this is where you can find the final product.
00:48:00.620 - 00:48:43.470, Speaker A: So if you clone the project and you switch to branch, finally everything should be implemented here and working. Let's just have a quick look at the transfer. Yeah, yeah. So everything works. If you want to build a decentralized app on Starknet, it takes 42 minutes. Also, the next step right now would be so you can probably see that we have the wallet defined here in the root root component up, and we are pretty much drilling it into the connect wallet and into the transfer. As your application grows, there's more and more components, and this becomes really cumbersome.
00:48:43.470 - 00:49:46.004, Speaker A: So you like, this isn't a particular good solution. It's a simple solution if you want to build something quickly, but if you want to go more in depth, I would tell you to use Starknet react, which, which is a library built by Apybara team, and they have just announced like yesterday, version 2.0, I think, and this will give you Starknet provider, and then you can use their custom hooks across your app, and it's a bit more difficult to set it up. It's like five minutes. But if I were to show it live, it would look like crazy because it's some black magic, and then it allows you to use your wallet across your entire app, which is like pretty great. So, yeah, so if you want to start with these starter and then move forward and build something bigger, you should probably use Starknet react. There was the question before, if you have to use react, if you can't use like svelte or solid J's or something else.
00:49:46.004 - 00:50:06.100, Speaker A: If you use something else, you cannot use Starknet react. But everything else works like. Yeah, pretty much, yeah. So, yeah, I think that's pretty much all I wanted to show you. You can have a look at our beautiful options. You can read our Twitter and or X. It's now called x.
00:50:06.100 - 00:50:16.884, Speaker A: Or you can find me on x. And if you have any questions, I'm here. No questions. Thank you. Thank you.
