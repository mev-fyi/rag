00:00:21.640 - 00:00:33.424, Speaker A: Afternoon, part of flower stage. My name is Mickey. I'm the moderator, and I promised Tim that I won't take much of his time, so let me just. Welcome to the stage Tim Robinson.
00:00:37.124 - 00:01:00.652, Speaker B: Thanks. Hey, everyone. So I'm Tim. I'm the head of crypto research at Blueyard Capital, and I've spent the last few months looking into every way that we can solve liquidity fragmentation across L2 s, basically exploring every piece of technology that will help us out. And I want to give an overview of that now. So this is the problem we're trying to solve. We want to use an app.
00:01:00.652 - 00:01:25.154, Speaker B: We have money. It's somewhere in Ethereum. It's on a L2. It's in some token. How do we get that money to the app in a way that we want? How do we make Ethereum feel like using one chain in addition to the problem? This is my wallet. We have lots of little tokens across lots of networks. How do we console these together? Dealing with this is painful.
00:01:25.154 - 00:02:02.194, Speaker B: We really want to make all the L2s feel like using one chain. You have your assets, you can use them in whatever app you want. It should figure out how to get there. So bridging currently is kind of painful. This is the UI can be improved over time, and it's getting better. But the main problem with using third party bridges is that you need to lock liquidity on every chain that is supporting that bridge. And so if we have a future where we have 100 or a thousand different L2s, the liquidity is kind of fragmented between all of them, and it's hard to move your assets around.
00:02:02.194 - 00:02:26.882, Speaker B: And so wallets do want to improve this experience. We've talked to different wallet protocols and different people, but the underlining infrastructure needs to be improved. And like, this is getting better, like we have recently, after ERP 4844, I could move some money from base optimism. It took 4 seconds. It cost 1.7 cents. So things are improving.
00:02:26.882 - 00:02:55.436, Speaker B: We just need to improve the UX, and we need to make this better for moving large amounts of money across different networks. So this can be made a lot better. So let's look at the solutions that are out there. So there's three main ways, three main upgrades that are going to happen to L2 s over the next few years. The first one is the shared ecosystem bridge. So this is the polygon ag layer, the optimism super chain. Zksync is also working on this.
00:02:55.436 - 00:03:29.270, Speaker B: Lots of these ecosystems are creating this shared bridge. The second is when we have these ecosystems where liquidity moves seamlessly between them. How do we bridge between these ecosystems? And so we'll talk about that. And the third is mint burn tokens. So there's USDC now there's a standard called Xerc 20 that will help with this in the future. Um, so, um, currently when you bridge to lih bridge, um, you basically lock your tokens in that bridge. It gets minted on the chain.
00:03:29.270 - 00:04:17.864, Speaker B: If you want to move tokens between any of these chains, you have to use a third party bridge or you have to go back to ethereum. Um, this is kind of painful because then you have to pay ethereum gas. If you want to move large amounts of money, you have to either pay lots of slippage or you have to pay a high amount of gas, um, to move between these chains. Um, so there's these ecosystem bridges that are basically the next step in making liquidity flow between L2 s. Um, so the polygon ag layer is probably the furthest ahead at the moment. Um, and the idea is that instead of having a bridge for every chain, you have a bridge to the entire ecosystem. So, um, you, when you bridge your funds to, say polygon zkevm, it locks your tokens in the interop layer, now called the ag layer or the super chain, has this kind of same ecosystem bridge.
00:04:17.864 - 00:05:10.434, Speaker B: And then the tokens that are minted on the destination chain are controlled by that interop layer or this ag layer, basically. And what this allows is that you can move your tokens between any bridge in an ecosystem. So in the entire polygon ecosystem, you'll be able to move unlimited amounts of liquidity for free with no slippage and within ten to 20 seconds. And the way that works is that you burn the tokens on one of the chains because the original underlying token is actually locked in the aG layer. It creates a ZK proof that this token is burnt, and then it uses that ZK proof to mint the token on another connected chain. And so the actual underlying token is still locked in the same bridge. It's just basically like an ephemeral token moves between all of the connected chains.
00:05:10.434 - 00:05:53.162, Speaker B: And so this will be amazing once it's implemented for moving within an ecosystem. So if you move between, say, Polygon PoS or OKX X one chain, then it'll work great. But it's not so great if you want to move between ecosystems. Like if you want to move from a polygon chain to base or something like that. And so these are, yeah, fast, simple, standard way you can move any amount of tokens. This will replace most third party bridges within an ecosystem. The disadvantages is, as I mentioned, it's only one ecosystem, and also you need to basically, you need to implement this from the beginning.
00:05:53.162 - 00:06:45.244, Speaker B: It's very hard to migrate existing chains to this system. It can be done and they're working on it at the moment. And there is also the single point of failure problem, which is similar to like a native bridge today. That bridge can fail and the whole network can be compromised. But these bridges are somewhat simple, so it's unlikely. So if we want to move tokens between ecosystems, say you want to move from the linear ecosystem to the scroll ecosystem. If these bridges are secure, and these teams believe they can't be rugged, like they trust each other, you can actually basically move tokens by burning them on the first chain, waiting for finalization on Ethereum, and then having the second chain see that proof that the token has been burnt on Ethereum and mincing it on the next chain.
00:06:45.244 - 00:07:42.000, Speaker B: This solves the gas costs of moving back to Ethereum, and it takes about the same amount of time because you still have to wait for finalization, but it just makes things a lot cheaper. And so this will happen once bridges are a lot more well established and they don't have multisig upgrades, things like that. So this is a bit further out. An even better upgrade to this would be using the cosmos IBC bridge. So this, in this case, um, this diagram's a little wrong. The user wouldn't burn the token. The user would basically lock a token on one ecosystem and then send, um, the, uh, ag layer bridge, or the ecosystem bridge will finalize, and then it will send that, um, proof of lock via like an IBC relayer, in the same way that tokens move around cosmos, um, and then that can send that to, say, the optimism super chain, say, hey, this token has been locked.
00:07:42.000 - 00:08:35.334, Speaker B: The optimism super chain ag layer thing can then mint that token to any connected chain that the user wants to move to. And it can treat these IBC tokens as essentially the same as if they were natively bridged from Ethereum. And so this can be very quick, this can be efficient. So this can be done in 30 seconds or so. It does require the chains themselves to have some kind of strong economic finality because you don't want, essentially, if they didn't have that, there could be double the spending attacks where someone says they locked, but they really didn't, because IBC relies on the chain to be finalized before it can move a token. And so this will be great for actually connecting up all these ecosystems. So we'll have ag layers that connect chains within ecosystems and then IBC to connect ecosystems to each other.
00:08:35.334 - 00:09:36.454, Speaker B: Um, so the advantages of this is that you can move, tokens can move freely between any trusted chains, um, so once they're secure enough, um, the disadvantage is that if one bridge is compromised, it could compromise many bridges at once. So this, uh, does require a lot more, um, I guess build up over time of security. Um, and there is a downside of when you move these tokens in this way, the chains will actually have a different amount of tokens on them than what is locked in their native bridge. But this can be resolved with just UI changes, essentially. Um, and so the third way that we can, um, fix liquidity issues is with these basically mint burn tokens. And so these work very similarly to the ways described before, except that instead of an ecosystem needing to have some kind of ag layer, um, you can basically add that to the token itself. So USDC works like this.
00:09:36.454 - 00:10:38.414, Speaker B: If you've moved USDC between any L2 s recently, um, you'll notice that you can get essentially exactly the same amount on another chain. And that's because the USDC is basically burnt on the source chain. Um, it's sent, a message is sent through the CCTP, uh, through circle, and then it is minted on the next chain. And the reason that circle can do this and be so far ahead of everyone else is because they have, uh, it's a centralized token and so they can fix any problems if they're, if something goes wrong. Um, so there is a standard basically to do this across all chains, and that's the XErc 20 standard. And basically you could uh, deploy an xerc 20 for say, dai, and then um, you could wrap dai in this x erc 20 standard and then you can move it between any chains, um, by burning it on one chain using any kind of relayer like layer zero or chainlink CcIp or synapse two, you can send a message to another chain saying hey, this token has been burnt, please create a new one. And it will create it from the same contract on that other chain.
00:10:38.414 - 00:11:36.556, Speaker B: The downside of this is it requires finality on Ethereum, so it still takes 2025 minutes or so for this to happen. Yeah, and so the advantage of this is tokens can freely move across any l two, even if they don't have their egg layer. These can move between lesser known l two s pretty easily. Um, but there is one major disadvantage is that if a chain is not secure. If there is some way, some flaw that you can mint unlimited tokens, um, that can be exploited and used to mint tokens across all the chains which can break that token basically ecosystem wide. Um, so these chains will probably need uh, like zk proofs, um, and some amount of time to show that they're secure before, um, these kind of tokens will be implanted, implemented on them. Um, and so there is another upgrade.
00:11:36.556 - 00:12:25.326, Speaker B: Um, so the, there are the three different ways that we can improve liquidity flowing. Um, there is a better new upgrade coming, which is a faster finality layer. So um, Nia project is working on this and also um, I think it's omnichain and some others are working on similar kind of projects. And the idea is that rather than having to wait for these things to finalize on Ethereum, you have this fast finality layer that's secured by eigen layer and by slashing. And then when you move tokens using the mint burn tokens or other ways, they finalize on this fast finality layer and can be minted on the other chain within like 10 seconds or so. And this would be great. This will make things much faster so that uh, tokens can move seamlessly between all the chains within a few seconds.
00:12:25.326 - 00:13:21.904, Speaker B: Um, there is one flaw with that though, and the big flaw, the big disadvantage is that slashing punishes the wrong person. So if, um, you move, if somebody attempts to exploit this layer and basically double spend, um, by posting to the fast finality layer that they have burnt a token, um, they um, that person can still mint on another layer and they can get away with basically double spending. Cool, thanks. Oh, maybe this is working again. Okay, I guess it's working again. So yeah, the problem is that if someone double spends, the person that is staking on the fast finality layer will get slashed. And that is not the person that exploited the protocol.
00:13:21.904 - 00:13:53.364, Speaker B: And uh, so the idea is that if there is a slashing, it kind of incentivizes the stakers on this layer to make sure it is secure so that they can't get double spent and get slashed. Um, but there is still that risk there. And then the other risk is that it's not Ethereum. So there is um, some downsides of that. It's not at quite as secure. Yeah. So there all the different ways that liquidity can flow quickly and seamlessly in unlimited size, cheaply and within a few seconds.
00:13:53.364 - 00:14:39.804, Speaker B: And then we can use a lot of these to improve the UI of wallets because like once we have this underlying infrastructure improved, then there is still a few more UI issues to fix, and so I'll go over them now. So the first one is there's a bunch of new wallets with accountabstracton wallets. And the problem that a lot of people have is you have a bit of eth across like ten different l two s to make your transactions with these wallets. Instead of having that problem, you basically pay one paymaster. You give them some money and then they allow you to transact on any connected chain using that same paymaster. And so you don't need little tiny bits of gas all over the place. Um, and these will help a lot with that.
00:14:39.804 - 00:15:20.480, Speaker B: And then the second is there is a project called Bungie refuel that just gives you a little bit of gas on many different chains at once. Uh, this is kind of a stopgap solution until we have, um, a lot of account abstracted wallets. Um, the second thing that is becoming huge now that l two s are very cheap, is, um, apps that just cover the gas fees for the user. So these are two of my favorite apps at the moment. The first one is called demo, and it's basically venmo, but decentralized and on base. The second one is pay, which is very similar, but the transactions are all private. So these are both two venmo equivalents.
00:15:20.480 - 00:15:57.580, Speaker B: Both of them don't have any mentions of gas at all. You can just send money to your friends and receive it, just like using Venmo. And they cover all the fees. And because the fees are so cheap, they can make money in other ways. So they'll often make money with onboarding and off boarding instead of like actually transfers on the network. The one flaw of apps covering gas fees is you need some kind of cyber protection because otherwise some malicious user could spin up a billion different accounts and send a bunch of requests around and basically spend your whole balance. Um, so this is where worldcoin is useful.
00:15:57.580 - 00:16:49.170, Speaker B: Um, Coinbase is useful. So for example, with dymo, um, or with some Coinbase apps, they'll cover your gas fees if you have a Coinbase account. Um, and get coin passport as well, to basically prove that you're human and not sibling these, um, these programs. Um, and so the other flaw that we have is that when you use an app, that app is just on one chain and it doesn't know about your tokens on other chains. So even if you have this great bridging movement system underlying, like, how does your app actually know what you can spend with it? So basically this apps shouldn't have to be multi chain aware. Instead, we can solve this at the wallet level. So there is a EIP 22 56, and this is essentially a API so that an app can just reach out to your wallet and be like, hey, what tokens do you have? Display spend.
00:16:49.170 - 00:17:40.398, Speaker B: And the wallet can give the app a list of tokens and then it can figure out what it wants to use to pay for things. And then in this way, wallets that are multi chain aware can say, hey, I have these tokens that are currently on other chains. But when you make the interaction with the app, the wallet can bridge them just in time beforehand and then basically send them out to the app. So the app doesn't even know that the tokens were previously on another chain. That'll be very helpful. And then there's another company called Orblabs that recently came out and they're actually producing a dev kit and SDK to help connect apps and wallets in this way to make them multi chain aware so that they can interact with each other. Lastly, this could be a whole talk in itself, but there is kind of a way around this problem with intents.
00:17:40.398 - 00:18:34.534, Speaker B: And so the idea of an intent is that rather than your apps and wallets having to figure out how to interact with each other and do all these things, things manually, basically you can just say, I want to interact with this app. Here's some messages, I'll sign them, please someone solve this problem for me. And that goes out to a solver network. These market makers, or solvers that have liquidity across many networks, will perform that app interaction for you on your behalf, and then collect the money from you later from wherever it originally is. And so if you're interested in intents, this will be basically a completely separate system to making this work. They will use the same bridges in the background, but users don't have to worry as much. There is a good framework called the cake framework by frontier tech that covers a lot of the trade offs in this space and how we can make good intent frameworks.
00:18:34.534 - 00:19:21.294, Speaker B: Yeah, and the main downside of intents though, is that often you don't know how long something will take. Like if you're doing some exotic token send and bridging and stuff, it may take a while, and it's hard to tell if there's actually a solver out there that can solve this problem. But as these become more and more common, then most common use cases will work fine. Yeah, so this is the end of my talk. I'm putting together a telegram group just in the last week, we started collecting everyone that we have talked to that is working on these problems. Building apps, building bridges, layers, everything to solve fragmentation across Ethereum. So if you're working on something or just want to keep up a chat, let me know.
00:19:21.294 - 00:19:43.154, Speaker B: I am Tim J. Robinson on basically every social media. Happy to chat about this. Thank you. Do we have any questions? Hey, I can bring it to you.
00:19:46.654 - 00:20:07.014, Speaker C: Thank you. Really great presentation, summarization and all the ideas. I have a short question for bridges between ecosystems with IBC. Which projects can you name here for IBC part? I can only recall penumbra, but it's primarily focused on shielding.
00:20:07.474 - 00:20:24.674, Speaker B: Yeah, there was. Man, there's one I was talking to the other day. It was polysomething, but I don't remember the second part of that. I'll let you know. Yeah, there is a project doing IBC on Ethereum. Yeah, it was poly something. There's a lot of poly projects that.
00:20:24.674 - 00:20:26.050, Speaker B: Yeah. Okay.
00:20:26.202 - 00:20:26.698, Speaker C: Yep.
00:20:26.786 - 00:20:48.184, Speaker B: And I was talking to the. Well, we've talked to some of these l two projects, and they're interested in doing this as well, which is cool. Thank you. Anyone else? Okay, cool. Thank you.
