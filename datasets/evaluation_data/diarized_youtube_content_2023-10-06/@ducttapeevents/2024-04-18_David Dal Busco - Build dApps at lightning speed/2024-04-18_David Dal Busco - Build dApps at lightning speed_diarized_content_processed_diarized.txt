00:00:00.120 - 00:00:17.674, Speaker A: Hi, I'm David. Thanks for the intro. I'm a freelance web developer. I live in Zurich. I come from the french part of the country. You can probably hear that from my accent. And I created Juno, which we're gonna try today.
00:00:17.674 - 00:01:28.404, Speaker A: So what's Juno? Juno is a blockchain as a service solution which aims to make developers to give them the ability to build applications super easily on web3. It's basically the goal and to give you a bit, something more like a picture, basically. You know, like on a. If you have developed apps, website, whatever, in normal stack, you know, there is that concept of serverless where you have like Google Firebase or Supabase, that gives you wonderful tool where you can have your database, your front end, your function, and so on, and you don't have to care about the infrastructure and basically what those Juno the same, but on blockchain. So that's the idea, like, to have the same ease to build project without even knowing what's happening underneath. And what makes Juno different is that the developers are in control of what they do. Like they are the central point.
00:01:28.404 - 00:01:59.164, Speaker A: We will show that later. But basically, me, as the developer of Juno, cannot operate anything in their project. It's a usage based pricing, meaning that since it's a reverse gas model, you pay in advance for what's consumed. So you're not going to have, like, one month, $40,000 bill because you forget that some spam is coming to your app. So, I mean, if you put $5 and then it's gone. It's gone. But, yeah, it's nice.
00:01:59.164 - 00:02:38.530, Speaker A: It's open source, of course, because. I don't know, other way. And, yeah, it's one of the goal I have. I hope that soon it will become a DaO because it kind of doesn't make sense that I am the provider of everything and I think it should be governed by all the community. And, yeah, that's basically my goal for the next few months. So, yeah, what I want to emphasize is that Juno is not an infrastructure. Juno is using the Internet computer.
00:02:38.530 - 00:03:13.346, Speaker A: Like, basically, Juno is a set of smart contract and tools to build other smart contracts. There is currently no infrastructure, no chains itself in Juno. It's like, just like a level of abstraction over the Internet computer that makes everything kind of easy. I mean, yeah, of course I'm b's because I build everything. So for me, it's going to be a bit easy, but yeah, I hope so. You're going to have share that with me. So how does it work? So you see I really like beautiful Shima.
00:03:13.346 - 00:04:16.114, Speaker A: And so basically, a developer that comes to Juno signing in an administration console, like you like any administration console. And once you have done, let's say, an account, you're going to have what I call the mission control, which is basically a smart contract. And from that smart contract, the developer can create other smart contracts that are either the application or analytics and so on. And as soon as the developer has that mission control, me as the provider Juno or David or whatever, I cannot do anything. I can provide code so that the developer can install, upgrade and so on. But for example, I cannot stop anything, I cannot access anything. So it's kind of, for me, it's an interesting architecture, or, I don't know, parading that I provide services, but I cannot do anything except providing, which is kind of nice.
00:04:16.114 - 00:05:16.996, Speaker A: Yeah. And because it's supposed to provide the same as the tools I listed before in Juno, you got an authentication, a data store, which is basically, it's not a database, like a key store thing. So you can store data that are up to two mega, but you can also have a storage, like for example, if you want to store images that are ten mega or more. I would not store videos yet because you cannot stream videos, but it's like a file storage you got hosting, because at the end you also want to have your dapps that are accessible on the web. You can register custom domain. There is also a module, an analytics module, which kind of also looks like a simple open source Google Analytics tool. You can also extend capabilities with serverless.
00:05:16.996 - 00:05:52.170, Speaker A: There is also monitoring because like I say, you pay in advance. So if it goes low, you probably want to get an email to know that your project going to be stopped soon and so on and so on. So, yeah, I've built a quite few things. All right. I don't like slide. So anyone has a question up to here, or we jump. All right, so what I'm suggesting is that we try to build a note taking app.
00:05:52.170 - 00:06:28.520, Speaker A: If we have more time at the end, we can go fancy and build even more stuff. But my goal is that we try to build that. Okay, and is anyone interested to follow at the same pace or you're interested to do it on your laptop? Yeah, just to get to know if I should go straight or not. Okay, so at the start I gonna assume that some of you gonna build it too. And if no one does it, I just gonna continue. Okay, sorry, question on what level of. You know, so if you have.
00:06:28.520 - 00:06:58.294, Speaker A: Do you, if you have no G's, if you can run node G's on your machine and you have an editor. You're gonna be fine. If we have no gsm. Yeah. Right? Yeah. So, but beside that, it's like no level because the workshop is basically getting an app and doing search and replace. All right.
00:06:58.294 - 00:07:32.774, Speaker A: So for those who want to follow, you can fork the repo. It's like GitHub. Juno builds workshops. I gonna do that here. Okay, not bad. Okay, big enough? Yeah, not bad. Okay, so I cloned the repo.
00:07:32.774 - 00:08:11.190, Speaker A: I have to say that here we are exploring. We are following our workshop. Of course, it's not necessarily the experience you have when you start developing. You can convert an existing app or you can start a new app, but here we are using something existing and in workshop we gonna use react because that's the only one I've styled so far. And when we are there, we install the dependency. Okay. And once we have installed the dependency, we can start the app.
00:08:11.190 - 00:09:04.638, Speaker A: Okay, super. And I think that's the problem for those who follow. Are you there? Right, okay. So of course now we cannot do anything because like I said, we can search and replace. And also here you see, like, nothing happens. So what we want to do is first we're going to be a bit like, let's say we're going to be a bit like Yolo and we're going to develop against production, against Mainnet. You can develop locally, but here, so that I can show you also the console and so on.
00:09:04.638 - 00:09:35.922, Speaker A: We're going to go to the production directly. Okay. So what you do, you go to console Juno, build. All right. This good. Okay. When we are here, we're gonna sign in and we gonna create that smart contract administration thing.
00:09:35.922 - 00:10:08.644, Speaker A: So here we sign in with Internet entity. I guess that most of you don't necessarily have an Internet identity yet. So what I gonna do, I craft one. So Internet identity is the decentralized authentication protocol app and so on, on the Internet computer. So what I gonna do, I'm gonna create one. I gonna create a passkey. So it works with.
00:10:08.644 - 00:11:13.404, Speaker A: I'm gonna use this one. It works with either the touch id or Face ID and so on and so on. So that means that there is no password and yeah, of course I have to create this one and I'm good. So at that point, my entity created. And what's important is that I save that number somewhere because that's basically my anonymous number that I use each time I want to sign in. So if you do that at home, yeah, it's good that you really save that and in addition, if you do that for real, you would also set up all these things like phrase key and so on, so that if you forget the number, you can find it back and so on and so on. But we're gonna skip that part in that presentation because I'm not here to present Internet entity.
00:11:13.404 - 00:11:52.748, Speaker A: But I mean, yeah, it took 30 seconds to make one. So it's pretty nice. If I'm back in the console. That means that at this point, if I go back to my wonderful shema, where is it at this point here that mission control has been created. So of course, I'm myself, so. Yeah, but everything happened in the backend. But that means that here the console is already speaking with a smart contract.
00:11:52.748 - 00:12:23.266, Speaker A: That is the smart contract of the developer. Okay, good, everybody, it's fine. Okay, now that we have our mission control, we want to create an app. Okay? Or a Dapp. So what we do, we're going to create a satellite. So yeah, you know, like a satellite is a smart contract on the Internet computer. But that smart contract is not empty.
00:12:23.266 - 00:12:48.366, Speaker A: It comes with all the features that you need to operate the things I've displayed before in Juno. So here we're gonna name it, for example, ethereum theory. Okay, ethereum. Maybe that's better. Yeah. All right. Yeah.
00:12:48.366 - 00:13:29.144, Speaker A: It takes like a few seconds to provision it because again, here we are really on production, like on Mainnet. Okay, so it's done. So if you are at that point, information should be loading. You see here I got my name. And what's really important for our presentation is our satellite id, which is the unique id of that contract. Okay, so far so good. I assume that if no one scream, it's all right.
00:13:29.144 - 00:14:46.744, Speaker A: Otherwise you say, okay, so what we gonna do now? I gonna open my application in my editor and I cannot zoom because otherwise, why is that? This one big enough or a bit bigger? It's okay. Okay, super. So here we really begin the phase where we just find stuff. I explain a bit what it is and we develop all this feature of that taking app. So now that we have our smart contract, what we want to do is basically connect our app that runs locally. So, so that the app can discuss with that particular smart contract. So we take the step one and within our code we search it.
00:14:46.744 - 00:15:31.876, Speaker A: We're going to uncomment that. Oh, sorry, I'm super bad at shortcuts. I should really learn it. So here you see, we have to replace that satellite id. So I go back to my console, I take the id, I go back to the editor, and I put it right. So at that point, what we have said is our react app use a Juno library that I provide. And we said at library, you have to speak with that smart contract.
00:15:31.876 - 00:16:34.084, Speaker A: And that's the initialization from there, I guess we want to implement that sign in, right? Because as I said here, we cannot do anything at the moment. So what I gonna do is we gonna search for the step two, all right? And basically, we take that on click, and we put it there. So you see, it's like sign in, come from the library. We just initialized. So we defer to the library, all the work to know what's happening and so on. So if I go back here and I click sign in, you see, we have the authentication that is opening, by the way, I should really save the number. Sorry, I forgot to do that before.
00:16:34.084 - 00:17:08.638, Speaker A: I gonna do it here. So ventra. Because otherwise, after the workshop, I don't remember what, what identity I created. Okay, sorry for that. So here we can sign in. And that's what I said before. If you do it that for real, when you go home afterwards, you're going to set up a recovery phrase so that you're sure that you don't lose your anatomy someday.
00:17:08.638 - 00:17:48.524, Speaker A: But we are in a yellow mode, and we go straight to the point. Okay, all right. So the sign in worked out, but nothing happens in our app, because in our app, we don't get the user and say, okay, now we are signing it. Let's see what's happening. So what we do, we actually take the step four. And in the step four, we're going to uncomment those lines. So the library provides a callback that always gives you the user.
00:17:48.524 - 00:18:21.336, Speaker A: So the user is authenticated. The user is not authenticated. And so on, and so on. So when I go back here, you see, no, I'm in the app because the user has come. And we can also, since we are there, we can take the step three and command the logout. Because if you have a login, it's probably useful to have a logout, too. All right, and if I go kanban e, I can log out and I can sign in.
00:18:21.336 - 00:18:55.574, Speaker A: Super. And what's interesting here is, like, since I got user sign in, I maybe want to see if people sign in my app. So if I go to the console and I go to authentication, if. Yeah, it works. So here I see that one user signed in. So, of course, it's fully anonymous. There is like a denote, which is what we call the principal id.
00:18:55.574 - 00:19:17.734, Speaker A: It's basically a public key. And that's everything I know about the user. I don't track NaSR when they sign in, when they sign out. I mean, just. Yeah, maybe we can, but I don't see the point. So I did not did it. But you see, when they created their identity.
00:19:17.734 - 00:20:11.796, Speaker A: And of course, if I sign in with another. I mean, if I sign in with one of my other identity, maybe, maybe not. Maybe if I go back, I should really implement a refresh button one of those days. You see, now there is two and so on and so on. So I guess it's pretty clear what's happening here. Okay, right. So we have an authentication, and what's interesting here is, like, based on this authentication, we can use the other feature of Juno by providing a certain level of permission.
00:20:11.796 - 00:20:49.224, Speaker A: Like, we can create services that are public, or we can create services where we say no. Only the people that have registered can accept those services. So, yeah, let's try to use one of those services. In the app here we have an entry and the id is notetaking app. So I can register things. Okay, so we want to register this data. And to do that, we have to implement the submit button, as we did for the.
00:20:49.224 - 00:21:33.126, Speaker A: So what we do is we take the step five here and we command the step four. So what's happening here? It's a function that comes from the library where I said, I want to save a document. A document is like an entity that I want to save. In my smart contract, I give a destination, which is, like, within that smart contract, I want to save that in a collection called notes. And here it's just the text. And you see here we want to save to a collection note. So that's particular to Juno.
00:21:33.126 - 00:22:09.174, Speaker A: That means that. Ooh, funny winter. Nothing is happening right now, or I should have an error, because we don't have created yet that collection. Okay, so if we go back to the console and we go to the data store, which is like that simple key pair dump database. Let's call it like that. We go to collection. And here we're going to create that particular note collection.
00:22:09.174 - 00:22:43.468, Speaker A: So I can create how many collections I want. And that's what I told you before. You can set different privileges, like, say, I want to have it public. I want just the user to be able to see their data, or I can see manage, which is basically the user. And me, as the administrator can see the things, or me, as a controller, as an administrator, can edit stuff. So here we're gonna tick manage, which is the default. The memory is like, you got two types of memory.
00:22:43.468 - 00:23:17.498, Speaker A: They are both different advantages. And basically stable is the one where you can really grow, like you can have. I don't know, it's multiple giga, but with a collection, I would not go that far. I would rather do small collection to have data that are fast. And you got an heap, which are more like, let's say stable is more like chrome, memory in computer. And heap is a bit more like chrome, let's call it like that. And you can also set a max capacity which is in that collection.
00:23:17.498 - 00:23:55.034, Speaker A: I just want, for example, hundred entries. And when it, when there is like the 101, the first one is popped out and so on, kind of to have like a queue and you can make things immutable if you want. All right, so we are good. I'm going to create that collection. So that's not normal. Oh, yeah, just a bit slow. So if we go back here and I try again, when I do submit, should popups enter this data in that collection? Yeah, it succeeded.
00:23:55.034 - 00:24:27.524, Speaker A: If I go back to my console, then I jump to data. I'm going to have the collection here. You see, I got now my entry with the hello world. Okay, so then every time you enter, there is no data in it and so on. But now I can list that in the console. That would be interesting to list those also in my, in my apps. I mean, it's like, if I can enter data, I generally like to see them.
00:24:27.524 - 00:25:32.474, Speaker A: So what you do is we go to the step six and we gonna uncomment this one, which is, I mean, it's like if we have a set doc, then we have a list docs. And if we enter the data in the collection nodes, then we query the data from the collection nodes. Okay, and if I go back here, you see, I should have an entry. Okay, so far so good, good. So let me just check my workshop things. But I think, yeah, as I told you before, you can have this smallish kind of database entries, but you can have also files. Okay, so what we're gonna do, we also gonna try to save a file within our project.
00:25:32.474 - 00:26:42.144, Speaker A: So what we do is where do we begin? Yeah, by the code. So we take the step seven and we uncomment the step seven here, I remove the previous line and what gonna be. I mean, it's not, it's not really, it has nothing to do with Juno. It's more like particular to that app. What we're gonna do is we take the step eight and we put it here next within the set doc. So that way we can upload a file, we get a link back to the file, and then when we save the document, we save the document with the link to the file so that when I display the documents in the UI, I can add a link to the document. It's more like because I choose like a simple pattern for the app than something really clever.
00:26:42.144 - 00:27:41.712, Speaker A: Okay, so here I gonna take like a small screenshot of that so that I got some materials to upload. Okay. Of course here, if we would like now to select the file and click submit, nothing will happen because for the same reason as before, we are first to open a collection for the file that has to be uploaded. So what we do, we jump to storage, which is the file storage, and it's the same mechanism. I go to collection, start the collection, except that if it's not called notes but it's called images, you got the same id with the permission. The difference is like that anything that is uploaded to the storage is public on the web. So through the web URL, you're going to find those.
00:27:41.712 - 00:28:51.082, Speaker A: So coding wise, you can make those private by, we don't do that in the demo, but if you could potentially add something like a token where you, for example, give like a super complex long hash id or whatever, something really difficult to brute force or hack. So that way these files are available on the web, but only queryable if you provide that as a query parameter. That way they are per se, not per se, not private. But if no one knows the address, no one can find those and brute force those. All right? And you can also put like a maximal size because maybe you don't want like an attacker that begins to upload Giga and Giga of data. Right? And here what I gonna do, so I'm gonna submit. And of course it takes a bit more time because the file has to be chunk and then all the chunks are sent to the smart contract.
00:28:51.082 - 00:29:27.422, Speaker A: But I mean, it's acceptable, I would say. But yeah, it's madhrop point of view. All right. And yeah, we got our second notes and that's the link I told you, which I, which I implemented. If we click here, then we have our screenshots. And if I go to the console, you see that here, if I go to storage, is the same id where I click on images. Maybe I should really implement a spinner there too.
00:29:27.422 - 00:30:05.306, Speaker A: And you see you have the link and so on and so on. So like you would have like the token and. Yeah, so the token, which is like the privacy. All right, so the app is actually ready it's nice. We are all good. Okay, should we try to deploy it on Mainnet? I mean since we are already there. So what we gonna do? We gonna install Cli.
00:30:05.306 - 00:30:56.204, Speaker A: Okay, so again, that's a workshop in, let's say in real life. I don't know. In real life I rarely use the Cli because I got a GitHub action and I put GitHub action in my project and that's my action that publishing some release basically. But since we are there, let's do it manually. So we install a ClI globally for our project. Yeah, it's a bit like, it's a bit heavy, but you can do lots of things with it like deploying and clearing and upgrading and so on and so on. And once we are done, we gonna do a login.
00:30:56.204 - 00:31:38.150, Speaker A: And because I got multiple browser here, I just gonna specify that I want to start in Chrome. It supports Chrome, Firefox and edge. I think at the moment I use the library to do that. And here. So you probably don't have that question, but I have it, it's because I'm already locked in on my laptop. So it just asks me if I want to add one more project to my account or if I want to create a brand new identity or control. And I just going to do a new to show you how it works.
00:31:38.150 - 00:32:25.736, Speaker A: So. All right, so here. Yeah, you see I got like, I got a few, but I'm not in my incognito browser. Sorry. Yeah, that's better. So what it does, it basically says the CLI has generated a private public key on my terminal and it sends the public key to the console. And there I say, do I want to grant access to my smart contracts, my project to the public key basically.
00:32:25.736 - 00:32:49.134, Speaker A: And here it's like the mission control and the project we have created. Int is just like something that is displayed if you begin to have multiple projects so that you know which one is which one. And then you say authorize because. Yeah, I mean, I want to operate it here. Right? Okay. Yeah. Okay.
00:32:49.134 - 00:33:27.098, Speaker A: All right, I'm good. So if I go back here, we are logged in. So that means that from my terminal I can operate my app. So I gonna build it and now we gonna deploy it. So I do a Juno deploy and I gonna delete that because otherwise gonna. So I deleted the existing Juno configuration file in the repo because I forgot to delete it in the repo before coming to do the workshop. So sorry for that.
00:33:27.098 - 00:33:54.872, Speaker A: So if you have a Juno config in the project, you can delete it. Sorry for that. Okay, so here it says, okay, it's not configured. So where do you want to deploy that stuff? And if you have multiple projects, then it's going to show you the list and you can select the one you want. And here I just have one. So I select demo, then you don't have that question. We can have a look later.
00:33:54.872 - 00:34:48.633, Speaker A: It's for the analytics if you set the build folder. So in our case I've built to the disposal folder. So when I do NPM run build where the file goes, so I do this. And that's the funny things, I can choose which types of language I want to use for my configuration file. So I gonna use JavaScript and if everything goes according plan. Yeah, so start to deploy and yeah, I mean it use the same, you know, we have uploaded the images to the file storage, so basically deploying the app, it's the same thing. It deploys those assets to the file storage and then it's the file storage that is served on the web.
00:34:48.633 - 00:35:57.164, Speaker A: And yeah, we are good. So now if I do a Chuno open, we have our app that is deployed on Mainnet. So I'm going to take it here to use the same browser. And one interesting thing is now when I sign in on the deployed app is that even though I use the same identity, it's going to generate another pair of key. That way I actually have two users in the application I got like the one I use locally and the one I use now on the one that is deployed. And the reason behind is like you have one entity, but regardless where you sign in on the Internet computer, you always have a different, that way you cannot track people. And yeah, something I actually really like.
00:35:57.164 - 00:36:26.874, Speaker A: And if you set for example, then a custom domain, like let's say we're gonna have a sample junoapp.com, then when you sign in it's gonna be another one. But soon I think as of next week, if you want to have like samplejunoapp.com or vvv dot samplejunoapp.com, then there is a way to, to have the same person. So there is some ways to do it. But per default, if you jump is anonymous.
00:36:26.874 - 00:37:35.048, Speaker A: And yeah, here since we have already worked against Mainnet, I mean, oh, I mean we don't have anything to configure since we already done the configuration on Mainnet. So that's for the basic, I would say like that's the id. So I don't know if you managed to follow, if anyone has question yeah, I was wondering who is paying for the cycles for this service. So thanks for asking. So when you. The cycles are paid by the developers, but the two first smart contracts you get there also these two, this one and the app we have created are paid right now by me. And then you get a bit of cycle so that you see you have enough to experiment and so on.
00:37:35.048 - 00:38:07.248, Speaker A: And currently doing queries on the web are basically free. So that means like if you want to have your, your website on the IC, we are far away of this $5 a month that was displayed in the previous talk. It's like, I don't know, like the Juno website. So I mean everything is in, is in the IC and hardly had cycles. So. Yeah, and, but then. Yeah, what I wanted to, to answer your question.
00:38:07.248 - 00:38:44.014, Speaker A: So then do the developers pay for the cycles and if you start to build more project like another one, another one, then you have currently it's 0.3 ICP to start a new things. It's not indexed right now. It's just me that changed the price. And basically it's like every ten I go with the price lower. So as soon as we are stable at 20, then it's going to be a bit lower and it's the same. If you start the analytics then it's also the same price.
00:38:44.014 - 00:39:35.470, Speaker A: And yeah, speaking of, maybe I can show you that. So the analytics is. It was the same way like you start a smart contract, you add a library to your project and then it just, it basically works. And once you are done, you can have something like this if it loads. Yeah, maybe. Yeah, you see, so here I'm actually tracking all the metrics of the website of Juno you see here. So here I can see like you would have like in a, you know, in any analytics tool.
00:39:35.470 - 00:40:03.482, Speaker A: So you have the number of sessions, the Unix view and so on. You can see what are your top ten referer and so on. The control like. Yeah, you see more people using chrome and so on, so on. So of course you can use another tool. But it's kind of interesting to have all these smart contracts that you own. Those, that's your data and no one else.
00:40:03.482 - 00:40:58.934, Speaker A: And yeah, I kind of like it. Any other question? Yeah, so I think, I think, for example, you cannot have like right now, the data store, the simple database there. It's not super optimized for having like a lot of entries. Like doing a get document is going to be fast, but if you want to have like, I don't know, thousand and thousands and thousands and then do a list of that, then I think it's limited. So, for example, I don't think you can build a Twitter feed. You know what I mean? It's more like. I think it works super well for websites or super well for a note taking app, this kind of thing, or even maybe a wallet.
00:40:58.934 - 00:41:43.072, Speaker A: But you cannot build a ledger, I would say, like, that. I don't have the exact numbers because I'm a bit lazy on the statistics. So if anyone is hearing and want to do some benchmark to tell me where are the limits, you are welcome. And, yeah, I'm a bit B's, but for me, it's a great tool also to prototype. Like, if you want to build something on web3, like, just on a weekend, it's like. I mean, it's really work. Well, all right, since we have a bit more minute, I can maybe show you all we can.
00:41:43.072 - 00:42:00.272, Speaker A: I think we still got time, right? Yeah, 20. Yeah. You see, it's too fast to build stuff on Juno. It's incredible. I'm a good marketer. That was not meant to be so fast. All right, I can show you.
00:42:00.272 - 00:42:34.934, Speaker A: Basically, we have seen all the stuff that you can make from the front end, but since a few months now, you can also extend the capabilities of Juno and basically opening everything you can do on the IC by supercharging the features. Okay, so of course I prepare something. So let's do that. All right. I'm not sure it's gonna be. Yeah, I'm just gonna do it. I'm not sure you can follow by coding at the same time because I'm probably gonna make some errors, too.
00:42:34.934 - 00:42:57.894, Speaker A: So let's do it. So first thing first is if I always develop against. Against. No, actually, we can do it without. Yeah, let's try it. I always develop against Mainnet, but we can also do it locally. All right, so to do that, I need Docker.
00:42:57.894 - 00:43:51.474, Speaker A: And here I gonna go to my configuration, and I gonna say that I want to use Juno locally, which is I want to use a container. I'm gonna start this. And here I gonna start the developer environment of Juno. So here, because it's not set, he asked me what I want to to do and so on and so on. So it starts simulated Internet computer on my machine, and it deploys things I need. Okay. And now that we are there, I can go to my configuration and, you know, we have that console for Mainnet, which I don't have locally.
00:43:51.474 - 00:44:33.494, Speaker A: So here I have to create collection, which was notes, I think, with what we have, we had write permission which was managed. Read permission which was managed. What do we have that was stable? I think that my field. And that was true. Okay. Okay. Of course.
00:44:33.494 - 00:45:23.786, Speaker A: So it detects that I changed my configuration and it tries to update the things, which of course doesn't work because it's a demo that I prepared, you know, so I just gonna do that. Sorry. I gonna. I'll try to start with a fresh docker container. And if it doesn't work, I just gonna skip the local development and we're gonna go straight to my. To my funny part. Okay.
00:45:23.786 - 00:45:50.434, Speaker A: So here, you see, developed. Deployed the satellites he developed and so on the smart contract we had. Oh, it worked out. So when I go to the. I'm gonna switch gear. You see, now when I'm developing. Ah, still not good.
00:45:50.434 - 00:46:26.786, Speaker A: It's because here. Yeah, true. And I need the id. There is a for real project. There is a vid plugin that inject the environment variables, but I don't have configured it here, so I just gonna. No, but I'm stupid. It's documented.
00:46:26.786 - 00:46:56.664, Speaker A: Yeah, sorry for that. So here. All right, plugin. Do I have the address here? No. No. All right. Anyway, sorry for that.
00:46:56.664 - 00:47:35.614, Speaker A: You don't have to believe me, but I swear it's better when you do it with a bit of preparation. Anyway, so here, if I sign in, you see, now it's using local host. Okay. So when I create an identity now locally, there is no. It's just like Internet identity. The authentication provider is also deployed locally. So, yeah, I don't have to create like a crazy pass key and so on.
00:47:35.614 - 00:48:24.814, Speaker A: Okay, and now where it gonna begin? Where the funds gonna begin? What we gonna do is we gonna eject the satellites. We say we don't want to use just the normal Juno. We want to eject it so that we can add some stuff in it. All right. And now I gonna open rust Rover because this project is. Is actually on rust. So was it called workshop? Yes, react.
00:48:24.814 - 00:49:15.914, Speaker A: Okay. You see, now here in my project, I got a library, and it comes with a set of hook. So what we can do now is like, instead of starting for a blog page, we start with functions that are going to be triggered when something happens. So the idea is that. Where was I? I was here. If I enter a document that the smart contracts call itself asynchronously to start a job in the backend where I can do stuff, basically. So what we can try to do is like, I enter hello, world, but I get another text back when it's finished.
00:49:15.914 - 00:50:34.700, Speaker A: So I gonna take an example because I'm not fully crazy. And we're gonna do that. So here what we do is like the nodes that we enter, right? And when we enter that, we enter, I think we enter. Where is it table? Where is our set, doc? So you see we have a text and maybe an URL, right? And it's the data. Okay, so we have a text and we have a new URL. Just gonna skip it for sake of simplicity. And what we can do is we can get this and already print it.
00:50:34.700 - 00:51:11.504, Speaker A: That would be a good start. I think so. Tick tag. Okay, so what we do is like here, we say when a document is saved in my database, I want the smart contracts to call itself. And right now just decode those data that have been persisted and print out who has done that. I think it's a start. So what we do is we build our smart contract.
00:51:11.504 - 00:52:25.664, Speaker A: And what you're going to do once it's ready, you're gonna update the local server, replica Internet computer that is running up. All right. So yeah, the good thing is it do that once. So after that we're gonna be fine. And, yeah, and what's interesting there is like, there are few things that you don't want to do in your front end. You know, like for example, if you want to check the balance of an address to see if they are, if there is ICP or if you want to do like a call to ethereum or something like where you really want to have like a safe and trust, then you're going to do that in the back end and not in the front end. So satellite has been compiled and here we see that it has been upgraded.
00:52:25.664 - 00:53:16.236, Speaker A: So I'm not sure, I don't have a bug. But if I save here, if everything goes well, yeah, you see we have our call here. Okay, so of course now that I feel a bit better, because I know it works. So what we gonna do is I just gonna copy that code and I'm gonna explain to you. So what we do is we take our data that we have recyved and leave. We, I say hello world. And instead of hello world, we're going to overwrite the text that is given and we add chequered at the end and then we convert back the data.
00:53:16.236 - 00:54:08.518, Speaker A: I prepare those and here we save back the data in the store. Okay, so if I go here and I compile, then you should upgrade and. Oh, okay. That's surprising because it was super fast. Now the thing is like the, the backend code is asynchronous. So it's possible that you get the answer with what you have entered and that it kicks afterwards and that you don't see it if you don't refresh the state on the front end side. But here it was so fast that.
00:54:08.518 - 00:54:31.794, Speaker A: Yeah, it was already there. So it works. It's a pair. So we still have time. Okay, five minutes. Okay, do you have question? No. Okay, do you want to go? Okay, we have five minutes.
00:54:31.794 - 00:54:55.954, Speaker A: We go crazy. And I propose that we derive an Ethereum address just for fun. Okay. Since it's an ethereum conference and I have to do something for ethereum, otherwise. All right, so, okay, I don't know if I can make it in five minutes, but let's try it. So I've prepared that, that example beginning of the week. So we're gonna need a bit some library.
00:54:55.954 - 00:56:04.194, Speaker A: So I just need ethercore and this at the end, that should be a crate, but yeah, it's what I need. So I go here and I add those two, that and I hope you're gonna install those. And in my library I'm gonna take this two module because right now it's not explained. I cannot show you that in a second. All right. Okay, so what we do is suggest that what we do is here, we use that function I just imported to generate an ETH address and we gonna add it here. Right? Yeah.
00:56:04.194 - 00:57:00.882, Speaker A: So to explain what's happening, what we do is basically we use the. I'm not the specialist of that kind of things. I stole the code in a wallet for which I work for, because I do the front end part and I know that's the code that work. And I think today, no, tomorrow or Sunday, there is a presentation from the foundation, the dfinity foundation, about the Oisi wallet. So basically I stole the code from there. So go to that presentation, they will explain how it works. Okay, but long story short is what we do is basically the canisters, the smart contracts, derives an ethereum address from my public key, my authentication, my principal, the one I use when I sign in, you know, and then that way when I don't have to save something, I don't have to save a private key.
00:57:00.882 - 00:57:38.184, Speaker A: In my browser, it's like the derivation happens in the smart contract. And that way I can sign in on my phone or I can sign in on the same wallet on my laptop. And I always gonna have the same Ethereum ID securely. Okay, so that's not clear at all. That's why there is a presentation this weekend. Okay, but anyway, what we do is like, I use what's called the EcDsa for the derivation. And there is like an ethereum part there that is there to use that to generate my Ethereum public key.
00:57:38.184 - 00:58:20.448, Speaker A: Okay. On sepolia. So if I build that stuff, it does not work. Of course. What do I do? Can I do that? No. Okay, so iter, core it. All right, so here, I got this one.
00:58:20.448 - 00:58:40.604, Speaker A: Got this one. So here, I gonna try again. Better. Oh no, again. 200 module. Yeah. So it's okay.
00:58:40.604 - 00:58:52.892, Speaker A: Okay, good. Yeah, yeah, I still have 1 minute. We can do it. Yeah, it's not bad. Yeah. Okay. Okay.
00:58:52.892 - 00:59:13.884, Speaker A: Okay. Yeah, it's like, it's like, it's like JavaScript. Once you have the module, then you are fine. It's been just like the first time and. Yeah, almost there. I'm a bit ashamed that it's like the juno one. That takes the more time.
00:59:13.884 - 00:59:40.114, Speaker A: All right, so it deploys. Oh, funny things. So let's try. Does it work? So here, I guess that's going to be too slow. Right. So I just gonna check that there is no mistakes. So here.
00:59:40.114 - 01:00:12.222, Speaker A: Ah, incredible. And yeah, so that, that's, that's a real address on Sepolia. I mean, I can really go to my metamask, transfer things and I would get the money and. Yeah, that's a cool thing because now, like, I don't remember which address I've used here, but if I would jump in in another browser, sign in, then I would get that address too. So it's kind of convenient. So, yeah, so it's, that's it. Yeah.
01:00:12.222 - 01:00:36.648, Speaker A: You mentioned it's asynchronous, the hooks. Yeah, yeah. But in the sense that you do, how do you handle it? You handle it. You don't handle it in the same update code, right? Yeah, exactly. It's not in the same update call. It's a timer set to zero. Yeah, exactly.
01:00:36.648 - 01:01:03.380, Speaker A: Yeah. So it's maybe not the cheap, but I wanted to have that. I didn't want it to block things. I didn't want it to cause too much execution. And you can also, you can disable, like if you start on Juno, it's disabled. And you can also go to the, you see, for example, you can have a collection and say, I want just that collection or just that. And that collection with a comma.
01:01:03.380 - 01:01:35.104, Speaker A: And here actually in the Ethereum demo that I have in my repo, I hooked on when the user is created. So when the user is created, I derive the Ethereum address and I save the address in a profile, basically. And what's also new is since last version, there is assertion, too. So that's synchronous. And that happens before the document is entered in the smart contract. So that way the developer can also. Yeah.
01:01:35.104 - 01:02:06.250, Speaker A: Define own rules. So. But that's synchronous. Yeah, exactly. Yeah, so, yeah, and the thing is, like, you got your function and at the end of the create, you got just include the satellite, which basically includes everything and. Yeah, and then if you want to upgrade, like. I mean, I won't upgrade it since we added that ether home key and so on.
01:02:06.250 - 01:02:32.680, Speaker A: Well, no, actually I can. I don't care. So here you just do, you know, upgrade target satellite minus s, the file that we just compiled and. Yeah, and let's go. And the thing is, like, now there is like, you get the version of Juno and you get your own version. So you kind of follow the library version. Kind of.
01:02:32.680 - 01:02:54.334, Speaker A: And then you can also have your own version, which is kind of nice. So. And you're gonna. So that. Yeah, that's a bit slow. Yeah, but every time I do. No, no.
01:02:54.334 - 01:03:19.194, Speaker A: Yeah, yeah, yeah. So you mean. You mean like this? Yeah, so that's just locally. So it's basically a cargo builder. Yeah, yeah, but you said you can follow both. Yeah. So you go here in your console.
01:03:19.194 - 01:03:44.484, Speaker A: So there is in the console and the CLI. So here a version gonna tell you where you are if your cli is up to date and so on and so on. You see here my cli is. Yeah. I don't know why. And here you see. Yeah.
01:03:44.484 - 01:04:13.576, Speaker A: And this happens because in the demo version I did here, I guess. Yeah. I don't know what. What's happening here. I may have used, like, a previous version to make the demo, and that's why here I got, like, previous version and that's my version. And then you got that big warning. And if you want to upgrade here, then the console's gonna tell you.
01:04:13.576 - 01:04:30.974, Speaker A: Are you really sure? Because that's not the Juno version. It's like your own version. If you do that, you lose your function. So you got like, alcohol. Yeah. That's why there is that warning, to remind you that maybe you don't want to do that. Yeah.
01:04:30.974 - 01:04:46.474, Speaker A: Any other question? All right, so thank you for your time. Yeah, enjoy the apparel and your weekend. Thank you.
