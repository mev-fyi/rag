00:00:00.360 - 00:00:34.484, Speaker A: Beautiful. So hello everyone. It's very weird to be in university that way, but cool. So I'm Michael from Brocker where we do automated liquidity management and building some cool year strategies. But today I'm here to talk about what we learned while we were building Uniswap V four hooks. Because last year we received a grant from Uniswap foundation to build four V four to build four POC hooks. So just out of curiosity, how many of you have heard of Uniswap before and know WhatsApp? Cool.
00:00:34.484 - 00:01:11.534, Speaker A: Mostly all of you. Cool. So I won't go into that much details. Univor is launching later this year. There are those three cool features like the Singleton contract that consolidates all the contracts into one so tokens don't have to transfer between the tokens between the contracts. Flash accounting that changed the transactions so further reducing the gas costs and finally the hooks. There is a mom here, basically like the pool plugins, similar to browser plugins that can completely change how the pool operates.
00:01:11.534 - 00:02:04.104, Speaker A: And there are some cool use cases like building an order book amm on top of uniswap doing native bitcoin trading through torchain, or combining or tying the mechanics of pol or with governance directly with the pool, and much more like KYC to your pool. Right? But from what we built at Brocker we focus on profitable liquidity management. So that's what we wanted to do with the hooks as well. So we build the liquidity locking and incentives. So the user locks their liquidity and gets rewarded with tokens or nfts. And also incentives will be a major tool to attract liquidity from the previous versions before. So I think you can expect a lot of incentives programs on v four when it launches.
00:02:04.104 - 00:02:56.584, Speaker A: We also did the dynamic fees hook because liquidity providers are struggling with profitability, especially during high volatility periods. So the dynamic fees can completely change their profitability and can solve that with our case or with our hook. We did it through volume that we use as a proxy for volatility. So when volatility increases, the volume increases or should increase and the fee increases as well. They also did liquidity management hook. This one acts as an automated liquid manager. User deposits liquidity into the pool or into the hook and the hook automatically manages the liquidity for them, automatically rebalances and auto compounds the fees.
00:02:56.584 - 00:04:07.074, Speaker A: And we also combined the liquid locking with the dynamic fees. So the hook automatically adjusts the fees and lets the user log their tokens and reward them. This is especially interesting for builders because this shows how you can combine multiple hooks together so you can build very complex, even protocols on top of Uniswap, which kind of makes it an infrastructure layer. So it would be pretty cool to see what people have built on top of uniswap right now. But what did we learn? Details matter. This is especially important when you are combining hooks together, because it's never as simple as you might think, because you inherit all the good stuff, all the bad stuff from the underlying hooks, and you need to align their features to make it work in that one bigger hook. So, for example, in the hook we were using, in the combo hook, you have the liquid locking and the dynamic fees.
00:04:07.074 - 00:04:58.274, Speaker A: So when you look at it, they're completely unrelated. But it's not the case completely because we are using the uniswap function, partial swaps for auto compounding the fees in the liquid locking hook. This is a feature that enables partial fills of the swaps. So let's say you have an order for one k, but for some reason, you will get an order on the $400, the whole order, or it's recorded. The volume is for one k, which is an issue if you have dynamic fees hook that's based on volume. And we had this function disable it on that hook. So we had to redesign this feature to kind of fit both of those.
00:04:58.274 - 00:05:53.330, Speaker A: And this is just a simple example of two hooks that are completely unrelated. If you have hooks that are more complicated, they affect each other. This becomes much more complex, much harder, and you need to track a lot of things and make sure that their features are aligned. Otherwise it won't work as expected. But it's not only about the builders, it's also about the protocols themselves. Because we are already seeing that protocols are struggling with opening the V three pool and setting it up properly, which is also the reason why majority of the pools, or newly opened pools, are opened on V two instead of V three. And if you add hooks on top, that's another layer of complexity and a lot more moving parts that you have to set up and somehow adjust.
00:05:53.330 - 00:07:08.280, Speaker A: And if you have no idea what you're doing, this becomes more complicated. And you might spend a lot of time doing some theory crafting, because there's also no best practice at the moment. And multiple issues like the MEV stuff have multiple solutions. So, for example, the dynamic V hook, that can be done in five different ways, and nobody is 100% sure what's the best way, how to do it. And also tied with the or linked with the hooks and what you can build with them because you can rebuild basically anything. You will struggle with interoperability because if you can have completely customized hooks with custom features, then you might also need some customized interface to operate those pools, because without that you won't be able to guarantee that the pool will work as it should or experience working with the pool that will work as it should. So for example, if you are, I know, some yield aggregator or asset manager right now, you have some kind of standard.
00:07:08.280 - 00:08:22.162, Speaker A: When you are integrating the v three pool with v four and the hooks and customized pool, you will struggle with that because one pool could have liquidity management, another one could have dynamic fees, another one could have order book on top, another one could have combination of multiple hooks. And it won't be that easy to do that. And the last thing, what we believe is that eventually all liquidity will lead to v four, because you can build anything on v four. If you want a v two pool, you can have a V two pool or basically a pool that will act as a v two pool, even like with the liquid locking hook that we built, that forces you into an infinite range. So basically a v two pool and we just added liquid incentives on top. And if you want a v three pool like v four, is v three on steroids, so there's no problem there. So why would you go back to the previous versions when you can do everything that you need on V four and get all the benefits from V four, like the singleton, flash, accounting, native assets and more generally.
00:08:22.162 - 00:08:53.334, Speaker A: It will be also interesting how this develops further because pancake is also launching there before algebra has already launched their version of hooks, so it's becoming more competitive. But that's it from my side. If you are interested in reading more about the hooks under the QR code, you can find all the details or you can just catch up with me after. Thanks.
00:08:56.914 - 00:09:02.826, Speaker B: Thanks a lot. Michael, would you still be available for a question or two if we have any from the audience? Any questions?
00:09:02.890 - 00:09:03.274, Speaker C: Perfect.
00:09:03.354 - 00:09:04.774, Speaker B: First questions about that.
00:09:08.514 - 00:09:40.334, Speaker C: Thanks for the talk. Do you think that in general V four is a good way to work on your new version due to its opportunities? So many opportunities that it opens, or rather not very good idea because of so many issues like security related and UX related. So the question is, would you rather say that it's a good path or a bit wrong one?
