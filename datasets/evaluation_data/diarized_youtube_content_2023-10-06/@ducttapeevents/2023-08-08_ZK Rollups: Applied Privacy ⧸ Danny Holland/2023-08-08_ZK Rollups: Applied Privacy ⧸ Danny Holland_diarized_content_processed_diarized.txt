00:00:00.520 - 00:00:25.230, Speaker A: Everyone ready? Hi, everybody, I'm Danny Holland. I'm with Vega protocol. I'm a smart contract developer for the last six years full time, that's all I've been doing. The main job I've been doing. I've also recently taken a real deep dive into AI. Local large language models running locally, things like this. I'm also a musician and I'm just all around a nerd.
00:00:25.230 - 00:00:49.724, Speaker A: So if you ever want to chat about literally any nerdy topic, I'm up for it. As I said, I'm with Vega protocol. They're a fully decentralized derivatives platform running on a tendermint base. And the big news is, Alpha Mainnet is live after five years. We've been at this for five years, since 2018. So this is a big deal. So Vega XYZ, that's all the shilling I'll do.
00:00:49.724 - 00:01:06.400, Speaker A: And next. Whoa. Hey, now back. The clicker's dead, guys. Come on. Yeah, this is fun. Okay.
00:01:06.400 - 00:01:39.002, Speaker A: Help. Is it? Okay, good. Back one. Here we go. Okay. What are ZK proofs? Well, there's been a lot of talks on ZK zero knowledge proofs here over the week and whatnot. So, long story short, zero knowledge proof is just an ability to prove that you have a piece of information or you have done a piece of compute without showing the information or without showing the compute.
00:01:39.002 - 00:02:16.162, Speaker A: But just handing a proof of that to a verifier and they know for a fact, because of black magic math, that it is accurate. So that's effectively what a ZK proof is. Okay, so why does it matter for Ethereum? Well, you can use this offloading of compute to massively scale Ethereum. Last time I was here, I gave a talk on how to scale Ethereum, doing actual, like, you know, real world examples of how to do it. And yeah, it's useful. It's great. Everybody talks about that.
00:02:16.162 - 00:03:03.654, Speaker A: It can scale Ethereum, but no one says how you can scale Ethereum. So I did that last year. This year I'm talking about ZK privacy because again, everybody says, oh, well, with zero knowledge stuff because there's zero knowledge transferred from me to someone else. You can use it for privacy, but no one says how. So I'm going to start with a quote from Edward Snowden arguing that you don't care about the rights of privacy because you have nothing to hide is no different than saying you don't care about free speech because you have nothing to say. To which I would like to point out, Eric Schmidt, the former CEO of Google, if you have something that you don't want anyone to know. Maybe you shouldn't be doing it in the first place.
00:03:03.654 - 00:03:41.070, Speaker A: So obviously Eric has nothing to say. All right, so the main way, or at least the way I make the ZK rollups at the moment, is with a technology called ZK Snarks. It's been talked about a lot. It comes from, it works with Ethereum. You can put the validators on Ethereum or the verifiers on Ethereum and you can verify a proof with very little gas cost. And the language we use for this or that I use for this. There's a couple languages that compile to this, but is circumflex fairly complicated? It's really niche.
00:03:41.070 - 00:04:18.564, Speaker A: It doesn't work like most languages. Kind of a pain, but you can protect the user privacy and protect all the data, which is great. And the verifications are very, very efficient to verify on Ethereum. It doesn't cost a lot of gas and the input values are only four un, two hundred fifty six s and then whatever parameters you need to do business logic. Alright, so we're going to start with a toy example. The first one is age verification. So if you go to the United States and you go to a bar, you got to be over 21 to drink at that bar, which I know for most of you in here, like really 21.
00:04:18.564 - 00:04:42.600, Speaker A: Come on. Well, the bartender is going to ask you for your id. Now think for a second. How much data is on your passport. There's your name, your phone number, there's a just, just, or maybe not phone numbers. There's your, all the demographic information. But what's actually required from the bartender, they need an image to know that you are the person that you say you are.
00:04:42.600 - 00:05:12.156, Speaker A: And that's the person in front of them. And they need a simple boolean value. A thumbs up or a thumbs down. Are they over 21 or, you know, 18 if you're in Europe? This is the information you leak. This is the information you leak. You leak your name, your address, your signature, your donor status, your veteran status, your gender, your height, weight, hair color, eye color, place of residence, everything. This is all the information you leak.
00:05:12.156 - 00:05:39.284, Speaker A: Just to get a beer. Probably not helpful using ZK rollups. You can do this. Oh good. It shows up pretty well here. So first up, the user will submit all of their demographic information, all of their id information to some authority figure, some third party who will verify that yes, this is you are who you say you are. And they will hash that.
00:05:39.284 - 00:06:32.854, Speaker A: They will salt the edit information and they will hash it and they will store it on a smart contract. Well, after you do that, the user, when they go to the bar or go to wherever they will, they can, on their phone, on their device, they can put in all their information, all the information that is on their id card, on their device, and they can generate a proof. And all that comes out of the proof is the actual proof, the four uint, two hundred and fifty six s, and the hash of the image that they just handed the bartender. Well, they give the user hands the proof and the image to the bartender. Bartender verifies the image hash and then runs the proof through the smart contract. And the smart contract will validate and will verify that it's an accurate proof. And if it verifies, the person must be of age.
00:06:32.854 - 00:06:59.530, Speaker A: You don't need to know anything else. So all you've given them is just that image and that's it. That's all the knowledge they have, which, you know, it's much better than leaking all your other information. So what are the benefits of this? Well, you keep your personal information under your control. It's on your device, it never leaves your device. And if you've got a secure enclave and whatnot, it's, it's safe. I mean, you know, except for the NSA, but yeah, we're not going to talk about that anyway.
00:06:59.530 - 00:07:46.602, Speaker A: It hides all unnecessary demographic information, which lowers your individual attack profile because your data, less of your information is out there. But the interesting one that a lot of people that have not heard anyone else talk about is cover your ass. Works both ways. You can't leak what you don't have. So all of these hacks, all of these breaches, all of these, all the data getting leaked everywhere, if they didn't have the data, it couldn't get leaked. So there's benefits here. Okay, what are some of the challenges? Well, as I said, it requires a one time third party authority, which is slightly a problem for a lot of the people out here, given that we're fairly authority averse, but there's not really good solutions.
00:07:46.602 - 00:08:25.068, Speaker A: There's like Internet of trust and things like that, or network of trust, whatever. It's not super useful, so you end up needing an authority. Plus there's always the authority and the law and whatnot that you have to deal with. There's no guarantee that a verifier deleted your picture. So the bard center might keep your picture. So you did leak a little bit of information and they might not delete it, and that might be a problem, but it's minimal and then I did put this on here, the potential repetition attack. I put it up there because I was thinking, hey, if you try to go to the bar and it says no, well, you've sick, you've signaled no that you can't do it.
00:08:25.068 - 00:09:03.308, Speaker A: And then one day it works. Well then, hey, they now have your birthday. However, if you build a circuit in such a way that it doesn't even generate a proof, unless the user is over 21, then you're good. And so the repetition attack isn't even an option. Okay, so toy example two, a more realistic problem. Okay, so you go to buy a house, say you are of a demographic, you are of a minority, you are of something that is typically discriminated against. Well, you go to buy a house, and what is the required information that the loan officer needs.
00:09:03.308 - 00:09:37.988, Speaker A: They only need to know if you qualify for the loan. Nothing else. Literally nothing else. And in the process, if any of you have ever bought a home, you leak all the things on your id, plus job history, relationship status, blood type, everything. You leak all of your information which has been, can be, and has been used against people. And it allows people to discriminate, because now we know everything about you. All right, so solution, sorry, solution to this problem is actually less complicated than the previous one.
00:09:37.988 - 00:10:34.284, Speaker A: So the user submits all their documents through the circuit again on their device to the which generates the proof. And all that comes out of the proof is the document hash and the four UN 256s again. So the user takes that proof, the loan officer takes that proof and puts it into the ZK, the verification contract. The verification contract says, yep, this is valid. And then afterwards, if you can audit all of that data, the user can then after they're already approved, prove every document to the loan officer, which is great. So you've already made the decision whether or not you approve of this loan, and it's already too late to discriminate. So what are the benefits? All the data is hidden during the approval process.
00:10:34.284 - 00:11:12.414, Speaker A: It protects the user's right to privacy, especially if they get decline because they don't meet the requirements. And everything is post hoc auditable. So the loan on the bank and everything can be happy that yes, we did our due diligence and everything is as they said it was. None of them are forged documents or whatever. But the great thing is verifiers, the loan officers, the bank and whatever can't discriminate despite themselves. So even if they want to, even if that individual loan officer wants to discriminate, it protects the bank as well as protecting the person applying for the loan. So not too bad.
00:11:12.414 - 00:11:53.044, Speaker A: Remaining challenges here requires that all the documents be available to be audited, or you go back to the previous problem where you verify each document through a trusted authority. So either way, you end up having this potential of data leakage elsewhere. But you can mitigate that. There is no guarantee that once you reveal the information that it will be deleted. There's no way to deal with that. As of now, although I do know a good cryptographer who probably has some good examples or good solutions to that problem. And as of now, there is nothing that currently compels parties to abide by the output of the proof.
00:11:53.044 - 00:12:37.944, Speaker A: So, you know, we make the agreement, it's approved, they see I'm something they don't like and they go, oh well, no, nevermind, there's nothing to force them to do that. And worst of all, the regulatory frameworks are super slow to adapt. And if you look at things like mortgages, at least in the United States, I know that's one of the most regulated things ever. So there's that. Okay, so here's a couple potential ideas. There's software integrity. You can have a software publisher prove that their software meets certain requirements, it does certain calculations, it doesn't do certain other things based on how you build up this proof.
00:12:37.944 - 00:13:12.388, Speaker A: And so you as the downloader who needs to use the software, you can trust the software. You know, you can trust the software because it meets your requirements without any having to look at the source code or anything like that. I'm a big fan of open source software, but it's not 100% necessary. And this is a way to good middle ground. Another one is online gaming. If you set it up right, you can prove that all the moves that all the players are using are legal moves. Everything's accurate, everything's fair.
00:13:12.388 - 00:14:25.762, Speaker A: And not leak the information of each of the players, which of course is necessary because people get really angry during these games, and people have literally tracked other people down and killed them because someone looted the wrong World of Warcraft item. So there's that medical research, obviously there's all this demographic information in there, and it's highly confidential, and there's lots and lots of laws protecting this, but the researchers need the data and they need to know that it's accurate. So this is another potential use of this, okay? And the one I'm most excited about is neural networks. So everyone's used GPT four. Everyone have used these tools by now and say that you have a specific prompt and you need a specific output, or you need the output from a very specific model. But say, like OpenAI, they don't want to give their models out publicly. As of right now, they can make any changes they want to it, and you have no control, you have no knowledge of which specific model they're putting your information through, they're running your prompt through.
00:14:25.762 - 00:14:56.758, Speaker A: Well, you can use a zero knowledge proof to guarantee that the output you received was based on the input you put in and came from that exact model. So challenges remaining. The zero knowledge proofs are very expensive to compute. There's always going to be the data availability problem. I mean, it's kind of this chicken egg thing. Like, do we want to hide the data or do we not want to hide the data? So if you need to recompute things, it gets a little hectic there. There's not a lot of people looking at this right now.
00:14:56.758 - 00:15:27.514, Speaker A: It's much better than it was last year, but it's still a problem. We don't have the infrastructure. The stack overflow isn't like super robust for Sircom at the moment. There's no auditors, which, of course, you in crypto, if you've ever done a smart contract in what you need auditing, and it's all new crypto. So it's new hash functions, it's new signing functions. And what's the first rule of crypto? Don't roll your own crypto. So these are the challenges that remain.
00:15:27.514 - 00:15:59.844, Speaker A: So my call to action is come experiment. Like, if you have any interest in any of these things I just said, or zero knowledge proofs in general, or if you have a cool application, come try it. Like, come out play, because that's the only way we're going to get the community. That's the only way we're going to get past these hurdles. We are with zero knowledge stuff where the whole Ethereum ecosystem was when I first started in 2017. So, like, we can get there, but people have to come and play. So come and play.
00:15:59.844 - 00:16:26.894, Speaker A: All right, any questions? Okay. It is a unit of liquidity we call the Cisca because of the guy who figured out the, the equation. He's a member of the team. Yeah, he doesn't like that we use that name, and that's why we use that name.
00:16:31.714 - 00:17:06.284, Speaker B: Thanks, Danny. Great. Hello? Yeah, thanks, Danny. Great talk. I'm trying to still formulate the question, but I'm wondering, like, you talk to a lot of people, you must do about zero knowledge, and yet there are still a lot of people who have zero knowledge about zero knowledge. And is there any wisdom you feel you can share about if people want to start or people? I mean, this has been a great talk to give some sort of primitives, but how can we all get better at zero knowledge? Because clearly everyone thinks it's going to be a big thing.
00:17:07.184 - 00:17:39.754, Speaker A: Watch my talk from last year because it was about how to apply it and to scale Ethereum. So there's some code in there, there's some very specific toy examples and whatnot. Yeah, watch my talk last year, back to the community thing. Start posting on forums, start asking the questions, because every stack overflow thing starts with a question. So ask that question. Otherwise, I don't know. And if you find something, let me know and I'll add it for the next time I give this.
00:17:39.754 - 00:17:56.318, Speaker A: So if there is no further questions, thank you again. I'm Danny. I go by sacrificial pancakes on Twitter and everywhere else. I also make music. I'm on all the streaming if you want to. And again with Vega protocol, please come try. It's fun.
00:17:56.318 - 00:18:00.094, Speaker A: We've got this great testnet that allows you to play around and whatnot.
00:18:00.214 - 00:18:00.814, Speaker B: That's it.
00:18:00.894 - 00:18:01.214, Speaker A: Thank you.
