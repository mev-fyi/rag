00:00:01.360 - 00:00:20.542, Speaker A: Thank you. It's nice to see you all today. Thanks for showing up in this beautiful weather. And also thanks for showing interest in the topic. Maybe before I get started with the topic, a few words to myself. My name is Michael Kunz. I'm a legal partner at MmE, which is a legal and tax consulting firm in Zurich and Souk.
00:00:20.542 - 00:00:44.398, Speaker A: And we've actually had the pleasure to work with quite a lot of crypto companies in the past. We've most famously helped establish the Ethereum foundation around ten years ago. And then I have been seeing quite a lot in this space. A lot of good and a lot of bad things. Yeah. And I hope that you're going to like this presentation. So we're here to talk about IP protection and open source and how to protect your software.
00:00:44.398 - 00:01:22.504, Speaker A: But I actually want to start with something else. Who of you has heard of vampire attacks? Ok, a few. Ok, so in a vampire attack, there are a few definitions out there, but a good one that I found is that basically, if a protocol attacks another protocol and tries to assume its place by offering more attractive incentives. Now, more interesting than that is actually what's happening in a vampire attack. And so basically, in Defi, when you talk about a vampire attack, there's three things that are targeted. So the first thing is it takes away the liquidity of a protocol. The second thing is it takes away its users.
00:01:22.504 - 00:02:04.220, Speaker A: And the third thing is that it takes away a trading volume and therefore the profit of the investors. Now, towards the end of the presentation, we're going to look at the question as to whether vampire attacks are actually legal. And you should be able to answer that question towards the end. But maybe to answer the question, it should be helpful to actually look at an example of a vampire attack. And I think the best example is the sushiswap attack on Uniswap, which took place actually, it was like four and a half years ago. So, as most of you know, Uniswap is an automated market maker. And what's special about automated market makers is that there are exchanges, but they don't actually connect buyers and sellers by matching orders.
00:02:04.220 - 00:03:01.964, Speaker A: They have liquidity pools and therefore need liquidity providers. So people who say, I'm going to give you the tokens so that other people can actually use them for their trades, now, how does that work? So people actually give liquidity in the form of ERC, 20 tokens, usually, and have to actually provide liquidity in both sides equally to make sure that the pool remains balanced. In return for that liquidity, they get a so called LP token. The LP token is a receipt that they can use to get the liquidity back at any time. And the third step is that the swappers, those who actually want to make the conversions, they can use the liquidity pool to turn one token into the other. Now what's important is that the liquidity pool is better if there's more liquidity, because if you want to make large trades, you're going to have what's called slippage when you have little liquidity in the pool. So that's why in this space it's not kind of a winner takes it all mentality.
00:03:01.964 - 00:03:45.154, Speaker A: But those pools that have the most liquidity are actually usually doing the best. Now what happened in the ATT and Ck? Actually, let's look for this Uniswap. What's interesting is that Uniswap was launched by a company called Uniswap Labs, and it was reported by quite notable VC investors. The investments were around $11 million. And what's interesting is that Uniswap Lab didn't have a token at the time, so the investors actually bought into the equity of the company. So they bought shares of the company, which means that it's a pretty centralized setup, right? It's pretty traditional that the investors come and buy the shares and that is it. So it's kind of like a web two way of investments.
00:03:45.154 - 00:04:23.884, Speaker A: And that's also what Sushiswap thought. So an anonymous guy called Chefnomi basically came along and said, you know, guys, let's do another Uniswap, but let's do one that is actually governed by the community. And so what he did is that he launched a competing protocol with a twist. And that twist is that he added a sushi token. And the sushi token actually had two purposes. First, it should allow people to govern the protocol collectively. And second, most importantly, it had a fee share function, which meant that holders of the sushi token actually got a 6th of all the trading fees that are collected throughout the entire protocol.
00:04:23.884 - 00:05:06.792, Speaker A: Now how did the attack work? So in the first step, it was basically just a marketing campaign. So Sushi Token was airdropped to users of Uniswap and they probably woke up in the morning and said, wait, you know, I have this new token. So what's that? They googled it. And then the step two was the launch of a yield farming campaign. And that was ingenious because the idea there was to say, okay, all you liquidity providers in Uniswap, you have your liquidity deposited, you have your LP token that sits idle and doesn't do anything. Why don't you deposit those LP tokens in my protocol? You get another LP token from my protocol, plus you get more sushi tokens, which means more profits for you towards the end. And people said, look, I mean, I have an LP token, doesn't do anything.
00:05:06.792 - 00:05:39.024, Speaker A: I can get more sushi if I deposit it. So let's do it. In the third step, all the liquidity in Uniswap represented by those LP tokens was moved from Uniswap to Sushiswap. And then in the fourth step to Sushiswap, automated marker liquidity pools were launched. Now, what did happen in that attack? So, commercially, it's interesting to see that Uniswap had around $500 million in liquidity before the attack started. It went up to 2 billion because everybody wanted to actually get those sushi tokens. Then he went down again.
00:05:39.024 - 00:06:13.704, Speaker A: And you can see in the second graph that it didn't really last. Right. It hasn't really caused a lot of damage to Uniswap, but it did give a tremendous boost to sushi. Nevertheless, Uniswap did do one thing. They said, you know what this is? This argument that we're not community governed, that we're web two, and we're kind of like the bad guys. Let's counter this by actually launching our Unitoken. So the unitoken was launched to the users of Uniswap that used it before the attack, obviously, because after that there was all these other users that they didn't want to actually reward.
00:06:13.704 - 00:06:56.560, Speaker A: Now, what's interesting is that the Uniswap token also has a governance function, which is, let's say, limited to the backend, doesn't have anything to do with the front end operated by Uniswap labs. But it actually always talked about this revenue share, which never happened, like this fee switch. You know, you probably heard about this, you know, the community really wants it, but then again, they don't really want to have it. And it's an ongoing story. There is right now, no fees, no revenue share. And the main reason is that it would actually make uni security token, which is a problem for all the investors and for the company, because they don't want to have issues with the SEC because they're based, I think, in the United States, or at least many of the investors are. So let's look at the legal perspective.
00:06:56.560 - 00:07:43.774, Speaker A: Was this attack legal? Now, as I mentioned initially, the vampire attack targets three separate things. The first thing is, well, you go after the users. Is that legal? Well, the good thing is that on the Ethereum blockchain, it's a public blockchain, which means anybody can do chain analysis and actually figure out user behavior and say, you know what, these are the best users of Uniswap, or those are all users of uniswap. I'm going to airdrop tokens to them. Absolutely legal. The second thing is that they move the liquidity. Were they allowed to take the liquidity? Well, as a matter of fact, I would say yes, because everybody who deposited the LP tokens in the sushiswap pools did so voluntarily because they wanted to make more money knowing that those tokens actually allow anybody who controls them to take out liquidity and move it.
00:07:43.774 - 00:08:32.034, Speaker A: And the third thing is the trading volume which is generated by the swappers. Was that legal? Well, obviously, because swappers can use whatever protocol they like. So end good, all good. We're not at the end. The most important question is, was it legal that Sushiswap was basically an exact copy of Uniswap? So when you look at that, it's basically Sushiswap had almost exact source code, with a few notable differences, which basically all concerned these community focused benefits. And so from a legal perspective, it's important to see that the source code of Uniswap version two at that time actually was owned by Uniswap Labs. It was available, it was published on GitHub, it was licensed under an open source license.
00:08:32.034 - 00:09:18.678, Speaker A: But does that alone mean that you can just go along, grab the code, redeploy it, and basically create your competitor? To understand that, we have to understand how software is protected. So in a nutshell, whenever you create software, it automatically is granted copyright protection. You don't have to do anything, at least in Switzerland, I think in the US there are some registration requirements. But the most important thing here is that copyright only protects the source code. It doesn't protect the idea. So if somebody actually comes along and takes away the idea of having liquidity pools and doing, swapping with those pools, that alone anybody can do, as long as they don't steal your code. If you want to protect the idea behind your product, you have to get a patent.
00:09:18.678 - 00:10:04.316, Speaker A: And it's possible to get a software patent also in the European Union, even though a lot of people think that that's not possible, that it is possible, but the software needs to offer a technical solution to a technical problem, which is I'm not a patent attorney, but let's say I would assume that you could actually get a patent for what Uniswap created here. Now what is a license agreement? So basically when you have copyrights, you can prevent anybody from taking your code, copying it, changing it. If you want people allow, give them grants and rights to do something with your code, you give them a license. So the slicers can be comprehensive, that they can do whatever they want. They can be very granular. So if you buy a video game, you have to install it on your desktop. That's a copy of the source code, that's all you can do, but you have to do it to play video games.
00:10:04.316 - 00:10:59.338, Speaker A: You get a very, very small license. So the range is very wide. Now what's important is that any use of source code or copyrighted source code of others that does not actually grab is not based on a license, is a copyright infringement, which can lead to very high damages. So open source licenses are basically nothing different. They're just licenses that are standardized for making easy for people to understand what the rules are, right? If you see GPL, MIT, you know, okay, that's a GPL license, MIT license, I kind of seen those before. So it makes it very easy to actually distribute software. What's important about the open source license is that there's no final definition, but there's the open source initiative that basically says open source must meet ten requirements and only if all those requirements are met, the license can actually be called an open source license.
00:10:59.338 - 00:11:34.434, Speaker A: In short, I would say that the license must allow the code to be used, modified, copied and distributed freely. Only then do we talk about an open source license. Now, what's important? Two things. First of all, very very large misconception. Open source does not mean public domain. So an open source product, an open source software always has an owner and has a licensor that actually gives you a license. So when you take open source code from the Internet, you are a licensee and somebody owns that code and gives you rights to use it as opposed to public domain.
00:11:34.434 - 00:12:10.648, Speaker A: You can also say, you know, I don't want to have anything to do with that code, I gift it to the world. You say, I put my code into the public domain and I renounce ownership. People can do whatever they want. One big difference between the two is liability. Because if you open source the code and it damages, causes damages, you are still liable if that damage is caused with gross negligence or intentionally, which shouldn't happen, but gross negligence at least is possible. And the other thing is that publication doesn't mean licensing. That's another thing that a lot of people don't know is that people publish code on GitHub all the time.
00:12:10.648 - 00:12:45.834, Speaker A: But there's many reasons to do so. So one reason to do so is because you want to allow community audits because, you know, people maybe trust, put more trust in code that can actually review themselves, or that is at least, you know, that is at least released in a transparent manner. You only have a license and a right to use the code on GitHub. If there's a license file that says you are allowed to use the code and these are the rules, et cetera, right. There's also often license files that says you don't have to write it anything, right, just to make things clear. So actually every repository should always have a license file just to make things clear. Many don't, but yeah, that's for a separate topic.
00:12:45.834 - 00:13:28.404, Speaker A: So there's different open source licenses. And I'm going to make this short, I know this is probably taking a lot of time away, but the point is, as you see in the graph, most software is actually licensed under one of four licenses. So we have the MIT license, we have the Apache GPL and the BSD license, and that's basically more than three quarters. There's plenty of others, but most of them are not used very often. Now how do they separate? There's two families of open source licenses. There are copyleft licenses and permissive licenses. And the copyleft license, like the GPL basically says, you can do all these things that you have to do to be open source, free distribution, pre changing and all these things.
00:13:28.404 - 00:14:02.508, Speaker A: But if you take the code, you change it or you add to it or you take it and put it into your code, you must release your product under the exact same license to make sure the code must remain open. Permissive licenses, which are also called academic licenses, don't have that rule there. You can do whatever you want. You can take the code, repackage it and sell it for a million dollars. Completely legal, right. No rules regarding how you can actually distribute it. Now when you look at the layer one blockchains, most of them actually have a permissive license chosen.
00:14:02.508 - 00:14:33.416, Speaker A: The exceptions are binance, smart chain and Polkadot which have chosen copyleft. That's not a better or worse thing, it's just different. So understanding that if you actually want to change the code, the source code of binance smart chain, well, you have to actually open source your contribution as well. If you want to contribute and make changes to the code of Ethereum, you're free to actually sell it for whatever money you want. Which brings me to the next topic. Actually brings me to another topic first. What are the alternatives so you don't have to open source.
00:14:33.416 - 00:15:20.376, Speaker A: You can still say, you know, I like open source, but maybe I don't want to give it all away like that. There's three different models. One is called Opencore, which basically says it's kind of like a smaller version of the code is out there. But if you want to have more like upgrades or you want to have more features, then you have to pay for those kind of freemium, as we know. Then there's a family of licenses which are called source available licenses. And the definition there is that the source code is publicly available, but certain usage rights are restricted, which is against the open source idea that you actually restrict rights in any way. So they basically cannot be called open source, for example, the business source license, or we have the server side public license which are used by many, many projects.
00:15:20.376 - 00:15:46.276, Speaker A: And there's interesting switch happening. So a lot of open source projects move away because they say, we're doing all this work. People take it, make a lot of money. You know, we need to change something. So a lot of products and software actually moved away from open source to source available. And another thing which is very interesting is dual licensing, which means that you're the copyright owner. You can basically license it in one way, two way, three ways, combine it this way combinations.
00:15:46.276 - 00:16:30.604, Speaker A: And one combination is very often chosen is that people say, I give it to you with a hard copy left rule, which is, you know, it sucks for corporations because they say, okay, I mean, I use that, but then basically my contribution has to be open sourced. I don't like that. Well, if you don't like it, you pay for it, right? So it's either with copyleft or it's free. You can do whatever you want, but then you have to pay money. Now what does it mean? You know, when you talk about open source software, is it free? You know, people hear that often, and you often hear probably it's free as in freedom, not as in free beer. But what does that mean? And so to keep it short is that the software must be freely available to anyone in source code form, right? Binary is not enough. It needs to be the human readable source code.
00:16:30.604 - 00:16:56.442, Speaker A: That is the one requirement that does not mean that you cannot make money with it. So what does that mean? If you have a permissive license, you can do whatever you want, you can sell it. You can even say, I'm going to hide my code behind a paywall. I kind of have it on GitHub and on my own paywall where I charge $1,000. Completely legal. But with copyleft, it's a bit more difficult. But the one thing you cannot do is you cannot charge a software license because, you know, the software rights are given away freely.
00:16:56.442 - 00:17:17.667, Speaker A: But you can charge for providing support. You can charge for warranty that you offer additional warranty. You can actually say that you charge for, you know, compiling the code and actually selling the binary. You know, people do that. Or you can say, I put the code on the CD, which people used earlier, and they sold the cpu for $1,000. It's all possible. Just take that one takeaway.
00:17:17.667 - 00:17:49.404, Speaker A: Doesn't mean that everything must be for free. Now, let's come back to our topic, forking protocols. The question is, can anybody take uniswap v two and just fork it and create a copy? As a matter of fact, yes, because the source code was licensed under the GPL, open source license. Now, remember, what did Sushiswap do? They took it, they changed it. So, making changes, modification, they redistributed it by deploying it. Both of that is allowed under the GPL license. What they would have to do, and I didn't check that.
00:17:49.404 - 00:18:36.904, Speaker A: They would have to actually open source their contributions under the GPL license as well. I'm not sure if they did that, but in principle, it's not a copyright violation, so everybody is happy. But how do blockchain protocols deal with that problem? Uniswap learned, changed at least our approach, because he said, you know what? We don't want that to happen again. So Uniswap v three and v four were actually released under the business source license, which says no competitive use or commercial use for four years. After that, it becomes an MIT license. You can use it freely, but we have the four year competitive advantage. Bancor did the same also with a new product, carbon, which some of you may know, also under the business source license and curve, which says no license at all.
00:18:36.904 - 00:19:22.728, Speaker A: I only publish for informational purposes. Now, people may think, oh, wait, what about the open source ethos? Isn't everything supposed to be open source? Well, the reality is there's too much money in Defi for the open source ethos. And actually, I've had an interesting conversation earlier that apparently research shows that a lot of code is not even published in GitHub, so they're doing a PhD, and around 5% of the code of defi protocols is actually published the other 95% is completely proprietary and not even shared. So much for the open source ethos. Now, some final thoughts. What are the differences between web two and web three companies? And I think that's if you take. Have you any takeaway, then that's that one.
00:19:22.728 - 00:19:55.678, Speaker A: What's the difference? The difference is that a web two company like Google or Facebook, has two assets that make it really valuable. It's user data, the data you give for free that they sell, which is super valuable. The other thing is the code base. Right? It's not open source usually, and that's also the algorithms and everything they have that's protected by trade secrets. That's why it's difficult to actually make a second Facebook or a second Google, because the algorithms are secret. So that's pretty hard. Now, vampire attacks against web three companies are ultimately possible because the user data is out there, right.
00:19:55.678 - 00:20:04.912, Speaker A: Anybody can actually just check out the users and there drop tokens to them. Okay, that's not protected. What else? Codebase. Yeah. Also public. Also out there. People can just take it.
00:20:04.912 - 00:20:44.274, Speaker A: So what does that mean? How can a web three company protect its intellectual property and avoid being copied like that? There's a few things they could do, but none of them are really satisfying. So one thing is, you use a permission chain. Sure, you can do that, but the whole benefit of having these money legos completely goes out of the window. The second thing is, you don't publish the source code, as we've heard, a lot of people do that, and a lot of people don't care. But it actually does have an impact on trust that is given by users. The third thing is, you don't give a license. Sure, you can do that, but people can just take the code anyways.
00:20:44.274 - 00:21:01.916, Speaker A: Look at sushiswap Chef nomi. We don't know who that was. Even if Uniswap was not licensable at all. What do you do? So, after Chef knowme, it's pretty difficult. Another thing that people thought about is technical limitations, right. You basically say, okay, if you want to withdraw liquidity, you have to wait two months. Right.
00:21:01.916 - 00:21:37.390, Speaker A: That's also not really working, because there's going to be a better product that doesn't have this. And so, you know, you have a competitive disadvantage. Which brings me to my final statement, which I quote from a client that I very much like. The difference between web two and web three is actually that in DeFi or in that way, in web three three, you don't win by being first. You only win by continuously being best. And I think that's actually in the best interest of users because while Facebook and other companies basically sit on their throne and are never challenged in the web three company, that's very different. Okay, I used more time.
00:21:37.390 - 00:21:43.034, Speaker A: I hope you learned something today. And, yeah, happy to answer questions.
00:21:45.254 - 00:21:57.394, Speaker B: Amazing space for one question if anyone in the audience wants to ask. If not. Well, thank you so much, Michael.
00:22:01.374 - 00:22:02.086, Speaker A: Oh, okay.
00:22:02.110 - 00:22:06.554, Speaker B: So there might be, there might be one. There might be one question. Let me, let me just quickly run there.
00:22:14.594 - 00:22:33.146, Speaker C: Sorry. Thanks so much, Michael. I only watched the last part, but it was super interesting. As a legal firm, you're basically saying that licensing your tech isn't helpful. You still need to make it open source. So kind of what is the solution and what does Mme then propose as their business case in web three?
00:22:33.250 - 00:22:58.812, Speaker A: Yeah, it really depends on what you're building. I mean, l one s, we generally say open source, right? You want it to be open source. That's why most of them do it. For Dapps, it's a bit different. Many of them say, yeah, sure, it's fine. The thing is that I do believe that what I've heard from a lot of clients is that they say people are going to use our software if they don't know what the code really does. It is a problem.
00:22:58.812 - 00:23:29.994, Speaker A: And so they have to publish. And once it's out there, anybody can take it. So you're just going to, regardless of how you're going to deal with it regarding licensing, if you're not willing to go after the infringers, well, at least it may actually keep people off. But there's so many copycats that are synonymous that it's very difficult to do something. So I do personally think that continuously innovate is the best solution. And I think that's just the reality that a lot of these companies have to deal with. Thank you.
