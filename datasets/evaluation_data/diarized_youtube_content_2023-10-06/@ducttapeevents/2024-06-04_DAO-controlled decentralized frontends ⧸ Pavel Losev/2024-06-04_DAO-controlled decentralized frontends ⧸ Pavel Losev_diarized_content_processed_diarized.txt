00:00:15.280 - 00:00:39.204, Speaker A: Okay. Okay. Hello, my name is Pavel. Today I'm going to talk about delos control, decentralized front ends here. So the content of the stock first energies. Oops, it's not showing. It's not mine.
00:00:39.204 - 00:01:19.314, Speaker A: Yeah, here it is. Okay, so today we're going to talk about central web infrastructure and the problems that come with it. Look at decentralized frontends and how to set them up, compare different approaches of how you can do that. And at the end I'm going to show a live demo of a tool I built that lets you set up a decentralized website and if you have some time left, maybe do a qa. So a little about me, I'm Pavel, I work at Ens. Before that I worked with fleek as a backend developer. I have a passion for decentralized technologies that give more freedom to developers and users and decrease the reliance on central authorities.
00:01:19.314 - 00:02:09.674, Speaker A: I also do some open source stuff. Here's my GitHub. So let's remember about the issues cost based on west infrastructure. So in Defi there has always been exploits. Most of them were smart contract based, but there were also ones that were surfaced based on frontend. Just in the recent few years there was a number of attacks on DNS where Defi projects had their DNS compromised or the register got social engineer got attacks with the social engineering. Also years ago there was an outage at AWS and it impacted huge amount of websites, including one of them that was Didx, which is Dex.
00:02:09.674 - 00:02:54.624, Speaker A: They hosted their frontend on AWS that suffered an outage as well. So how can we avoid all these issues and minimize the risks of stuff breaking and leading that to your stuff breaking? We can move stuff to global networks. First of all we should move our files to global networks and host our websites there. Primarily. Some of them are like ipfs arweave. There is also swarm, use any storage layer you want and if possible don't rely on DNS because it's really central. The register can just take your name and close it and do anything they want with it.
00:02:54.624 - 00:03:41.824, Speaker A: Use a blockchain powered naming system for example ens. There is others as well, but DNS is the most popular and the most common one. And later I'll just discuss about put in a multisig wallet on top of ENS domain. So yeah, that's it. And on the right just like you can see that like a website using an IPFS id and also like an Enos domain setup. So let's compare decentralized, decentralized networks and how in the context of frontend, so decentralized frontend is website just files. They're hosted by peers across a network of anybody who just copies your website and also hosted.
00:03:41.824 - 00:04:14.726, Speaker A: Each piece of content is verifiable because it has a unique id that IPFs or Arviv gives them. So you can always just locally download the front end and verify that the website is legit. Because content id used on the website, the production website is the same. So it means they're all good. You can also open this device website through a number of gateways. There is no reliance on just DNS. You can open it through NS Gateway, through any of the IPFS gateways, review gateways and so on.
00:04:14.726 - 00:04:51.444, Speaker A: The only central part here is the gateway, but the content is always distributed and always decentralized. And anyone can replicate it and help you host the website. And you can do it as well. You can just set it up on multiple servers independent from each other. But it's pretty hard to do on central servers because if you want to do distributed hosting, you probably gonna use a CDN or some sort, which is usually corporate. It's like owned by AWs or some other CDn company. So they manage your stuff like you don't have control over it, you can just decide to remove it or anything like that.
00:04:51.444 - 00:05:32.174, Speaker A: It's also mutable obviously, and you can't verify directly. There is no hashing mechanism built in to DNS or HTTP. You have to, I don't know, download the website to compute the maybe Sha hash and then just compare it. But it would be not reliable and there's no replication built in. Unless you maybe set up some kind of a load balancer or some sort. Maybe it would work, but it's not as straightforward as with ipfs where you just import the content id and it just works. So let's go through some of the approaches of how you can set up a decentralized website.
00:05:32.174 - 00:06:16.082, Speaker A: The first common is using some kind of a cloud service, then an ipns that would connect to NNS name. For context. IPns is just like a mutable pointer to ipfs which lets you have mutable content which would point to immutable content. So this way you could only update your ens once your domain to point to your website and never worry about it again. And the cloud service would deploy and build the website for you. But this approach comes with a number of risks. First of all is that IPNs requires you to have a private key to update it, and maybe you could lose it accidentally or somebody could steal it.
00:06:16.082 - 00:06:56.152, Speaker A: But the biggest issue with it is a tiny network. Unlike IPFS, which has nodes all over the world. IPNS is offered by two companies, I think, and nobody makes sure that your PNS files stay on the network. So it really slow and may take a few hours for the network to propagate. And also of course the cloud service that you're using is obviously centralized because there's no way to have a decentralized backend like that that would build the website for you. You don't have control over the infrastructure in that case. And you also have to trust that the cloud service stores all the keys securely in encrypted form and so on.
00:06:56.152 - 00:07:55.594, Speaker A: And it could also maybe compromise your DNS since you store the private key of it as well. Second approach, we could just ditch both IPNs and the cloud service and just update it directly through some kind of XCI script or a local script that just runs the transaction and builds it manually. But I don't recommend doing that. It's super risky because first of all you could accidentally do some stupid shit and just break your PNS and make it point to something else. If you use a CI provider somehow, maybe there could be just a compromise of the private key, somebody could steal it and so on. But there is one thing that you could do, make it a little better. You could set up a different owner and manager so that the owner of the domain would be different from the manager.
00:07:55.594 - 00:09:02.576, Speaker A: Manager is the address that basically manages the Nsname and you have a manager, you could split the access and only manager would have access to update the name, but then you would still have to have a private key somewhere. And if somebody steals it, they also take all your eth from the manager. And the issue with just updating ens directly would be also high network fees because it happens on the mainnet will probably cost around $5. And like if you have a blog with a few posts, updating it every time and paying $5 is a little bit of a stretch. And also, yeah, the private key is going to be, might be potentially stolen or something is going to happen to it. So what if we just take all the good parts from most approaches and remove the bad parts? And we could do this with Multisig, we could connect DNS to multisig wallet, for example, save. In short, multisig is just a wallet that is connected to a few other external wallets and each of them has to sign a transaction for it to get approved.
00:09:02.576 - 00:09:39.754, Speaker A: So this removes a problem where the private key of a wallet would get compromised and then Enes would be compromised and so on. There's no such thing because in safe you have to have multiple parties to approve the transaction. So it removes this risk. So how could this work? There would be like a delegate address. Delegate is a special type of address in safe that doesn't have access to the main. It only can propose transactions. So, well, I'm proposing updating NS to point a new version of the app and then safe owner just say like hello, yes, sure.
00:09:39.754 - 00:10:27.878, Speaker A: Or they can just say no, I don't want to reject the update of the website. So in case, for example, delegate gets compromised, nothing's going to happen. You just remove the delegate from the list of delegates and reject the transaction and set up a new one. So yeah, this is it. And also in context of daos, you could implement a mechanism where frontend would be updated based on the votes. Safe and other multi 60 implement modules for daos. Safe has a governor model and based on that you could for example implement a mechanism where based on votes, for example 50% of votes say yes to the updates.
00:10:27.878 - 00:10:58.706, Speaker A: Then the website will be updated automatically. So yes, I haven't seen anybody using it. Only a few Defi projects manually update front end based on DaO decision, but that's very rare. So I would like to present my own project. It's called Blumen. It solves this issue with the difficulties of updating your decentralized website and also integrates with multic. So you can set up this whole thing and just work with one comment and it will just work.
00:10:58.706 - 00:11:30.664, Speaker A: And basically how it would work is you would have a delegate that would offer a transaction to the safe and then the safe will just approve it and the RNS would be updated. And also it supports multiple ipfs providers, so you don't have to re upload it all the time. Okay. And now it's gonna be the live demo. Okay, here it is. So here's the comment. Probably nothing is feasible here, little better.
00:11:30.664 - 00:12:11.240, Speaker A: Not really. So here I just deploy hello world on my bluemodender, on Cipolle network with the save and I will just deploy fetch, fail to know, whatever. I don't know what I'm gonna do, what might be. No, it's not dead. But I mean I can show, we just tested, before the talk, there was this, yes, before the talk we tested it. So with another piece of content, it updated DNS from here. From here, yes.
00:12:11.240 - 00:12:41.164, Speaker A: So pretend that this worked. So yeah, here it updated the NS with the IP hash. And you can see it here in the records. If you open it, it should load, I hope. Yay. So yeah, this is the demo. It's all done through the multisig, you can see here, it's just multisig and the transaction was proposed by delegate, which you can see here.
00:12:41.164 - 00:13:18.754, Speaker A: So yes, it's all distributed. There is no central party that would be able to like hijack anything. So yeah, this is it. And if a moment. So if you want to test it yourself, here's the link to the repl. I'm also on some social networks and forecaster and if you have any questions, please let me know. Raise your hand and that's it.
00:13:18.754 - 00:13:31.394, Speaker A: And beforehand, if you want to ask a question, use a microphone so we'll hear you.
00:13:35.214 - 00:13:40.634, Speaker B: Sorry, could you reiterate what's the difference between your tool and ipns?
00:13:41.164 - 00:13:41.612, Speaker A: Sorry?
00:13:41.668 - 00:13:42.732, Speaker B: You didn't use it?
00:13:42.868 - 00:14:12.144, Speaker A: Right. My tool doesn't use ipns because IP would require you to store the private keys somewhere, which is not nice. And it's also really slow, so there's no benefit to it that much, to be honest. My tool doesn't use ipns at all, it just directly updates ipfs. Yeah, you would have to pay the gas, but there is a safe mode testing that actually executes the transaction. So ipns is not used at all, it's just direct apfs updates.
00:14:12.924 - 00:14:16.304, Speaker B: Okay, thanks. And so is your tool free to use?
00:14:16.764 - 00:14:27.384, Speaker A: Yes, it's completely free. It doesn't rely on any service. It's just a CLI that just wraps a few Ethereum APIs and has integrations for providers. Does it like there's no server involved?
00:14:28.724 - 00:14:29.164, Speaker B: Okay.
00:14:29.204 - 00:14:30.464, Speaker A: No logins or anything.
00:14:31.324 - 00:14:50.974, Speaker B: And so far in the presentation, we talked already talked about, let's say keeping their website online. And how's that on the privacy front end on those solutions, to what extent do they maintain the privacy of the service or the hosting party?
00:14:51.434 - 00:15:31.148, Speaker A: I mean the website is hosted publicly by public nodes. They usually have some kind of identifier. I will show one of my slides has demonstration of it. It's here to the left. You can see this is just arbitrary random services that have their own id and you can see their host name. Yeah, it's not really private in the sense, I guess it's all public, it's public infrastructure. The whole point is that anyone can host any website and anyone who wants it, who can replicate it and just will contribute to the network and increase performance of the website, increase decentralization.
00:15:31.148 - 00:15:34.984, Speaker A: So like if one of the nodes goes down, two others can get your back.
00:15:37.604 - 00:15:38.452, Speaker B: Okay. Thanks.
00:15:38.588 - 00:15:39.424, Speaker A: Thank you.
00:15:43.844 - 00:15:49.704, Speaker B: So blumen uploads to ibfs. What are the current providers that you support?
00:15:50.444 - 00:16:21.700, Speaker A: We have file based, which works only on paid plan because they disabled upload the websites because people abused it to believe in. There's vector little storage. You can also use your own opinion API if it implements the spec. And there's also Gateway three, which works the best right now because it immediately shows up in the content because battery storage now is very sluggish. But Gateway three, when you upload the website, is immediately available. So. Yeah, those are awesome.
00:16:21.772 - 00:16:22.260, Speaker B: Thank you.
00:16:22.332 - 00:16:36.204, Speaker A: Thank you. Anybody else? No. So I guess that's it. Yeah, that's it.
