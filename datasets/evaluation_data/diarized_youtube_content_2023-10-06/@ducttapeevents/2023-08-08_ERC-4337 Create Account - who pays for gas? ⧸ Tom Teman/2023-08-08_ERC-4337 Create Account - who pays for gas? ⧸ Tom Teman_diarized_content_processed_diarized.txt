00:00:00.200 - 00:00:18.914, Speaker A: Yeah. Okay. So, hi, everyone. Welcome to my presentation without a deck. So my name is Tom Tiemann. So a little bit about myself. I founded Portis back in 2018, which was acquired by Shapeshift in 2020.
00:00:18.914 - 00:01:02.314, Speaker A: And I joined the foundation in the beginning of this year to work around account abstraction to act as a product manager. So when we're talking about account abstraction, we generally want to get around the problem of eoas. And as we all know, eoas externally owned accounts are challenging, to say the least. So some of the challenges, and I'll go over them briefly, because this isn't a talk about account abstraction in general. I'm going to go briefly over that for people who are not that, you know, familiar with it. But there's something more interesting which I want to get into. And we're also a little bit short for time, so hopefully we'll get there quickly.
00:01:02.314 - 00:01:38.546, Speaker A: So eoas are mostly a problem because of the fact, the big problem is that it's one key. You know, you have this one key to rule them all. You lose your one key, you lose your funds, you make too many copies, someone can get a hold of them, you lose your funds. And so there's, it's really problematic in terms of ux, but a bigger challenge, I think, in the world of Ethereum is the fact that there's no key rotation. For instance, with bitcoin, if you fail your keys compromise, you can just easily say, okay, I'm just moving all my assets to a different wallet. That's it. With Ethereum, it's not just your key that you own, it's also your address, your public key, which is known in different contracts.
00:01:38.546 - 00:02:10.918, Speaker A: So if you want to rotate your key, there's no easy way of doing that. And sometimes it's not even possible. Some contracts may say, oh, look, there's a time delay for a year if you want to change your wallet or whatever. So it's a big problem. And recovery is also a big issue. We noticed that a lot importers, because we were a self custody wallet, if someone lost their password, didn't write down their seed phrase, we would be in a situation where we would be like, well, we're sorry, there's not much we can do about that. In addition, there's no granular control, right.
00:02:10.918 - 00:02:49.164, Speaker A: If we're talking about just one single key, it means it's one single key that does everything. And in the world of web two, when you're using bank accounts, stuff like that, you have a lot of safeguards in place, which we don't have with just one single key. So no multisig, no spending policies, no nothing. This one key does everything. No granular control. Also, in terms of gas payment, well, when you want to sign a transaction, then you got to have some ETH in your wallet. That's a huge challenge, both from an onboarding perspective, but also from a privacy perspective.
00:02:49.164 - 00:03:12.800, Speaker A: If I want to just claim an NFT with a wallet, with a brand new wallet, I need to have some ETH in that wallet, which means that ETH had to originate from somewhere, which might be kyc'd. So I'm losing that privacy. With paymasters, we can have the gas be paid by a third party. So I can just create a new wallet. Someone else pays for gas. That wallet remains pristine in the sense that it's not never, nobody knows where it came from. Right.
00:03:12.800 - 00:03:53.798, Speaker A: We can have that privacy that we want. And also for Dapps, eos are a challenge because there's no flexibility, like there's no batching, there's no stuff like automation if you want to have a recurring payment. So I want my wallet to listen to an event, a trade that happens and automatically do something. There are ways to accomplish that, but they require usually some sort of centralization or trust, which we don't like that much. We were trying to avoid stuff like that. So with account abstraction, we're basically abstracting three things. The validation of your transactions, which I would break down into two, which is the authentication and authorization.
00:03:53.798 - 00:04:31.884, Speaker A: Authentication. Is, is this key valid? And what we're changing here, it doesn't have to be just an ECSDA key. It can be any key we want. And we're seeing wallets doing, using either their secure enclave, which is a great option, or which basically turns every smartphone into a hardware wallet, or sign in with Google if you want. That's fine for whatever that key can do, which is the second part, which is the authorization. What can. Yes, the authorization which says, what is this key allowed to do? So thanks to account abstraction, we can have this much better control over permissions, something we're used to from web two.
00:04:31.884 - 00:05:01.804, Speaker A: Right, acLs, stuff like that. We're getting the same concepts, which we need to have. There's good reason why they came about execution, which I mentioned, the automation, the batching of transaction. That is also something that we are allowing to abstract. Even nonsense is something that we're semi abstracting, which allows you greater flexibility when you're talking about signing transactions at the same time from multiple entities, et cetera. Oh, wait, we got slides. Okay, great.
00:05:01.804 - 00:05:39.720, Speaker A: So this is where I am right now. Close this. And finally, I think I mentioned gas payment. So allowing third parties to pay for gas fees, either fully subsidize it or they accept USDC and they pay the ETH. This has been a very big challenge for DapPs and wallets in general, and having something which is part of the protocol, something that is standardized, really, really helps user adoption. Which brings us to ERC 4337. So I mentioned what we get out of the full account abstraction.
00:05:39.720 - 00:06:20.958, Speaker A: I won't go over that again. The censorship resistance is very important. So a lot of account abstraction proposals or not proposals, but solutions that are out there right now, they have some sort of centralization element to them, mostly around relaying the transaction, because Ethereum is still Ethereum. You still need an EOA wallet to sign a transaction because that's how the protocol works. So there is some sort of centralization because you don't have the equivalents of bundlers and everything that ERC 4337 has. Speaking of bundlers, we're also very adamant about this being a robust infrastructure, just like how you have a lot of Ethereum clients. We also want to have a lot of bundler clients which keep in mind they're very similar.
00:06:20.958 - 00:06:46.174, Speaker A: Okay. Bundlers are block builders in a sense, or are working with blockchain builders. They are not submitting the big transaction that is full of user ops to the mempool. They are submitting it as the next block. Otherwise there's all kind of front running and problems like that. So we want to make sure this is very robust and there's a lot of implementations. And currently we have typescript go rust.
00:06:46.174 - 00:07:12.548, Speaker A: I'm missing a few, but a lot. Okay. And this is part of the great thing about ERC 4337. There is no protocol change. Okay. And I see we have not a lot of time left, so I'm not going to dwell on this too much, but you can check out the new website we have, and you can have a lot of resources there and a lot of information. Okay, so we're getting to the interesting part of the conversation of the talk, which is beyond the counteraction, let's say we've made it.
00:07:12.548 - 00:07:44.070, Speaker A: Okay? Let's say that everybody uses ERC 4337 and, you know, killer dapps are here, and we're going for 1 billion users, you know. Whoo. Okay, we've done it. We have some killer dapps out there, and they want to get to mainstream adoption. The image is upside down. That's kind of funny. Okay, so a spoiler this information will not really matter once we move beyond ERC 4337 into an EAP, meaning this is actually enshrined in a protocol.
00:07:44.070 - 00:08:24.060, Speaker A: But we don't expect this to happen for at least a couple of years. And this is something, we can't just wait for that to happen. If we want to get to mainstream adoption soon, we have to account for things, which I'm going to talk about in this conversation. A part of creating an account with account abstraction with ERC 4337 is deploying a smart contract. And deploying smart contracts is quite expensive. And when we calculate how much that can end up costing on each network, and these are rough estimates, and also the prices changed in the last two days. So things are different.
00:08:24.060 - 00:09:23.874, Speaker A: But these are roughly the prices per network. Some of them, the calculation is a bit different if we're talking about networks like optimism. Arbitrum, it's not exactly the calculation I showed beforehand, but these are roughly the costs. Now this raises a question, like who pays for that? First of all, there's a problem with the fact that it costs as much as it does in the sense that just imagine on web two, just creating a user account cost you like fifty cents per user. Just creating the user, just like putting that DB entry in your centralized server would be that expensive. But there's a bigger problem here, because you're not just paying a lot, relatively a lot, you're also sponsoring the next DAP that comes along, assuming that the DAP pays that through a paymaster, which is a very reasonable thing to assume, because right now wallets like, let's say for example, argent are paying for deploying the contract. But that's because they're aiming at traders, people who are not exactly the average person.
00:09:23.874 - 00:10:12.208, Speaker A: If we're talking about someone just onboarding to application and fulfilling that hopeful dream that they don't even know it's blockchain, it has to be transparent to them. It's not like a trade or wallet. So the application will pick up the tab, but then the user goes to the next application and well, that's great, they get that bonus for free, right? And from a product perspective, from a business perspective, that is something we have to resolve for the applications because they will have an issue with that. Like saying, like, why do I pay for the next guy? Right? There are some caveats here. First of all, you don't have to create the wallet right away. You can do, we can using create two. You can have the address of the contract in advance.
00:10:12.208 - 00:11:02.310, Speaker A: So if you want to just receive funds or whatever before that and have just an address without paying the deployment costs, we can have that. But until EAP 649, two, or any other solution is implemented that allows signatures for pre deployed contracts to be created and adopted by the networks, there are some solutions there. And you often from our team, came up with a lot of great ideas around that. It's, you know, signing messages is something that is essential in the onboarding process. And until we have that, we still have to think about, ok, how do we solve the cost of deploying a contract? Because until you deploy the contract, there's not much you can do. So one approach is ious. I mentioned Arjun, okay, so we're like, okay, we'll deploy the contract.
00:11:02.310 - 00:11:50.548, Speaker A: And once you start actually spending your hard earned cash on buying stuff, then you owe us a little bit. Pay us back. The problem there, the challenge is that there's risk, because who's to say that user will end up buying anything? So you put up the money first, but then he doesn't end up paying you. And if we're talking mainstream adoption, millions of users, percentage wise, that becomes a game of numbers, which can be very difficult. Another approach is ads, right? We can have the user see ads. We all don't like ads that much, but, you know, it works. Then we can have this kind of like triangular approach where the user sees ads and the paymasters gets compensated from the ad agency and they pay for the cost.
00:11:50.548 - 00:12:20.788, Speaker A: So the DApp isn't even a part of that, right? It's like all between the wallet and the Paymaster. And it's like super simple for the Dapp. But there is a cost here as well, when you think about it, which is the brand, right? Because seeing ads isn't fun. So I'm going on application one, I'm seeing a lot of ads to create my account. Then when I'm going on application two, I see nothing. So the first application also paid something for the next application in a sense, which is diluting its brand. The second application has a great experience.
00:12:20.788 - 00:12:44.476, Speaker A: So that's also not so great in just ignoring that fact that the first application pays for everything. Again, the images flip outside. It's even better this way. I think the issue remains. There's the word in Hebrew, which is friar. Friar means to be a sucker. But it's a big part of our culture that nobody wants to be the sucker.
00:12:44.476 - 00:13:22.082, Speaker A: And in this case, the first application is the sucker. It's paying somehow, either directly with its brand or by assuming risk. So what can we do about it? So one approach, which I think is a nice way to think about it, is amortization, which is something from finance. It's not exactly like amortization, but it kind of gets the idea across, which is where everybody pitches in as more dapps join in. Okay, so the rules, the basic rules. And this is not something, you know, this is just like a beginning of a conversation here. Okay, so accounts.
00:13:22.082 - 00:14:11.930, Speaker A: When you create a new account as a user through a DAP, first you're limited to only using DAPP, okay? You can only interact with its contract because it paid for it. You can still do basic stuff like send money to your friends or receive funds, whatever, but you can't interact with other contracts. You can always buy your freedom, pay back the Dap what it paid, and you get back full control of your account. And as more dapps join, they also are able to allow the user to interact with their contract. At some point, you open up the contract completely, because from a gas payment, doing all that calculations just doesn't make sense anymore. So this is a pretty straightforward approach. Assuming, like, g is the gas cost of the initial deployment, this is how much DAP number I will pay.
00:14:11.930 - 00:14:31.624, Speaker A: Okay. The first Dap pays g. The next one will pay half the. Sorry, sorry. Half the gas cost to the first app. And moving forward, you can also see how much it will pay for each individual DAp. Now, this is a little hard to understand like this, so I created a nice little animation, which I hope will work after all the shenanigans.
00:14:31.624 - 00:14:53.492, Speaker A: So it will look like this, but let's see. Great. Okay, it seems like it's working. So the first DAP pays for the ease of understanding, let's assume the gas cost is one, one of whatever, doesn't really matter. So the first one pays one, then the second one pays half to dap one. So now dap one, in essence, paid half. The second one paid half.
00:14:53.492 - 00:15:16.334, Speaker A: They're like equal partners in how much they paid. The third dap will pay a third divided between each one. So it's one 6th and one 6th. You do the math. You see, everybody paid a third, and we're all equal partners in how much we paid. Moving forward, you get the point. It's one fourth, one 12th to each one, and slowly, over time, everybody's pitching in in the same way.
00:15:16.334 - 00:15:46.366, Speaker A: And. Yeah, and once ten dapps have paid, have pitched in, like, the user already logged into ten different dapps, and they all pitched in, you'll see that the original deployer only paid 10% of the original cost. Making this a lot easier for them to swallow. Also, from a business perspective, they know all the other dapps paid 10%, so they can feel a lot better about it. From a game theory perspective, they don't feel like they came out as a flyer. Okay. It then starts to taper off, right.
00:15:46.366 - 00:16:05.608, Speaker A: Then it takes another ten dapps to only get five more percent. So it doesn't really make sense. Also from the calculation. And how exactly is this implemented in terms of the contract itself? There's a lot of cool ways to do it. It wouldn't make sense to calculate and pay every time. Obviously there will be. Each dapp can kind of put up a lot of money.
00:16:05.608 - 00:16:42.336, Speaker A: You can just keep track of how many dapps have participated. And whenever a Dap wants to cash out, it can. But most of the time things can even out because it pays to onboard a new user. But it also got paid from a previous Dapp. So probably it doesn't make sense to constantly pay each other. Obviously from a gas perspective, can we do more? Well, obviously, but like just some food for thought when you walk out of here. So maybe we want to ask new Dapps to also account for the interest of how much like they paid one month ago.
00:16:42.336 - 00:17:31.546, Speaker A: If they put that money into some sort of staking mechanism, they would have earned interest on it. So maybe the next DAP also has to pay for that interest to make it completely fair. And maybe we can have a more sophisticated, we definitely can have a more sophisticated amortization mechanism, something less linear, maybe a bit more accounting for all kinds of edge cases, et cetera. What we're starting to see in the ecosystem is wallets that are very modular. And you have this basic smart account and you have models that can, models can plug into. So maybe this is a way to also compensate those models. And another way of managing the balance that I talked about is maybe through paymasters, which can reduce a lot of the gas cost because it happens off chain, but can be done in a way which still maintains security and not a problem of trust.
00:17:31.546 - 00:17:50.402, Speaker A: I have 10 seconds, so I'll just wrap up with this. Web three makes us rethink how we approach things that in web two seems like completely basic problems. Check out our website or follow us on Twitter. And let's go for those 1 billion users. Thank you very much.
00:17:50.538 - 00:18:02.654, Speaker B: Wonderful. Thank you, Tom. Give me a round of applause. What a fantastic talk, mate. I'm afraid we don't have time for questions, unfortunately. But you can put them online. If you can go back to and put them online.
00:18:02.654 - 00:18:09.174, Speaker B: Next up, we have Leonardo, who's talking about data availability? We'll be back in a second.
