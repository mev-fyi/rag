00:00:12.680 - 00:00:43.742, Speaker A: Hi everyone. It's so good to be back here at East Prague. This is the only conference that I had a dog in the audience, so it has a special place in my heart. Yeah. So today we're going to talk about web3 product guide to the DX Galaxy. So I am Sascha Tanase Luka. I am a product designer and a researcher.
00:00:43.742 - 00:01:58.970, Speaker A: I am one of the co founders of the web3 UX user research panels and currently I am a research ops at thesis with a focus on Meson Network, which is an economic layer for bitcoin. In the past I led the UX and design research for the threshold network and I was part of the team who built TBTC, the first fully decentralized representation of bitcoin on Ethereum. I like to say about my job that I transform extremely complex products into palatable bits, but you can also imagine me as a psychic that is channeling the user's voice at the product seance. Okay, so today's talk is an onboarding to the DX and dev rel concepts and it's supposed to spark curiosity. It's not a step by step guide, however, it provides some best practices. So this talk should be helpful to anyone who is building developer facing products in web3. Like this can be new l two s, new blockchains, new networks, devtools, integratable protocols and whatnot.
00:01:58.970 - 00:02:39.404, Speaker A: So before we start, I would like to get a raise of hands of who knows what Dx is. Oh wow. Quite a few people. Good. Next slide please. So developer experience is the equivalent of user experience when the primary user of the product is a developer. A developer is a highly technical user profile and sometimes this might become an excuse for having overly complicated user journeys which lead to a traumatic experience.
00:02:39.404 - 00:03:36.654, Speaker A: So let's shake hands with the shadowy, super mythical creature that we have all heard about but never met. The almighty developer wearing the user cloak. He knows everything and can read minds, so he never needs explanations. Jokes aside, due to the fact that developers are more of a technical Persona, the product UX owners end up considering developers as power users. So power user is a very deceitful term that makes you forget that developers are normal users too, and they will just appreciate and benefit from simple solutions just like everybody else. Let them understand a few things first, they have the potential to become power users, but they are not power users. When you first present a tool, an SDK, a library, so it takes time.
00:03:36.654 - 00:05:16.054, Speaker A: So in order to build a developer centric product, you need to make sure that your product is taking into account the following best practices, developer needs and user experience. So why should we care about Dx in web3? Well, based on the electric capital survey from 20, 23, 22,000 monthly active open source developers contribute to crypto. So we need to remember that developers are at the core of our ecosystem. User base Ethereum consistently attracts 20 to 25 of new developers coming to web3, which means that Ethereum is onboarding more developers and the need for straightforward processes may be higher than ever. A positive DX can increase adoption and retention and the growth of a chain's developer community. So let's look at GitHub's DX impact on collaboration formula. This formula takes into account productivity, how simply or quickly a change can be made and the ease of use of the implemented code, plus impact how frictionless is to move from idea to production, plus satisfaction, how the environment, workflows and tools affect developer happiness altogether, multiplied by c, where c stands for collaboration equals developer experience.
00:05:16.054 - 00:05:47.864, Speaker A: But let's narrow it down to web3. So over time in web3 we kept saying that oh, UX is the problem. This is why blockchain is not adopted. We realized that the users most of the time are other developers. Thus it's important to learn how to onboard and improve the developer's experience. There are a number of areas where DX is relevant and it can have a huge impact in web3. Let me help you with some examples.
00:05:47.864 - 00:06:59.648, Speaker A: SDKs provide abstractions on top of smart contracts or complex systems that allow the dev to build something on top of the current system without the need to know too much about the internals. So for easier to understand uniswap swaps, biconomy account abstraction, TBTC threshold cryptography then we have smart contracts like lots of projects don't have the resources to build an SDK on top. Thus the design they initially make matters more than originally intended and then blockchains. How do you integrate build, query, the blockchain and then in the end web widgets, which are small pieces of a website that live within your application. So the effort of supporting the user should be done as soon as possible during the design process instead of after, when the user is trying the product and failing. This allows you to focus more on the product instead of onboarding new users. So let's look at the developer journey.
00:06:59.648 - 00:07:56.626, Speaker A: I made this diagram of the developer journey inspired by the design council double diamond methodology but adapted to DX. So developer journeys are more often complex and longer. So imagine developers are daily recurring users of your product. They require continuous interaction and repetition with the product in comparison with other user journeys like let's say, the one off user journey of someone who is setting up a wallet. They set it up once and that's it. Also, developer journeys are more complex as other factors such as requirement changes or dependencies on other developer tools protocols chains cause deviation from the path. So however seamlessly as it may look, the developer journey will be scattered with friction points.
00:07:56.626 - 00:08:46.953, Speaker A: Let's take this example. We at mezzo are building a new network. We want different protocols to integrate our tech. The first thing we need to do is to identify the possible friction points and the several external and internal touch points where the developers will interact with multiple aspects of our product. So this may help us identify the diversity of roles at each touch point that can help optimize, improve and create a better overall developer experience. So let's see how friction may look like in the id eight phase. So most likely in this phase we can have a tool compatibility issue like limited or no support for development tools like let's say, foundry or hardhat for the new network.
00:08:46.953 - 00:09:46.294, Speaker A: This friction point affects the initial ideation phase by introducing uncertainty and potential higher costs in terms of time and resources needed to either adapt existing tools or create new ones. Teamwork makes the dream work I know it may sound cheesy, however, good DX, just like Goodux, is not a job of a sole individual. It's a team effort where the outcome of having good experience is embedded in the entire company culture. So there are many roles under this DX and Devrel Umbrella. However, I would like to detail three roles in particular. The first one is the technical writer. Their job involves creating, updating and maintaining documentation for technical processes, products or services.
00:09:46.294 - 00:10:49.728, Speaker A: They also do editing assurance, quality assurance and read proofing. They collab closely with engineers, product managers, UX designers and support in order to continuously update and improve the docs and the docs are really, really important. These are like I haven't added here. I put together a survey recently and the top biggest pain point of developers was poor documentation. So technical writers are a gem. UX designers and DX researchers these roles are crucial for the DX team because they have the knowledge to design good flows, measure the success, and implement feedback loops bringing the vast UX methodology to the table. They can apply qualitative and quantitative methods to harness information that can feed back into the development process that will lead to refined user journeys for the developers.
00:10:49.728 - 00:11:42.282, Speaker A: So some methods that I can bet my life on are the diary studies. In my entire experience, they turned out to be the most holistic type of testing and replaced the clunky lab tests. Also you can do remote interviews, remote usability tests, guerrilla tests at conferences least recommended and also dog footing. It's super, super important and the best way to test out if your documentation is doing great or not. You can add some analytics on your docs and then you will have data. Also, I would like to speak a little about Devrels or Devangelists, how I like to call them. This role is at the intersection of software development, marketing and community engagement.
00:11:42.282 - 00:12:46.564, Speaker A: This person or a group is the UI of your product, the human walking UI. Their role is to create proof of concepts, educate and advocate for the products at meetups, podcasts, conferences and hackathons. Their goal includes raising awareness and creating and fostering relationships between a company and its technical audience. For us developers and technical stakeholders, they are also the perfect link between the product and the developer community, and they can harness feedback in situ. So DX and Devrel are often mentioned in similar contexts, so there is a need to understand the differences between the two. Since the Devrel team interacts directly with the developer community, it forms the human component of DX. There is an overlap between them, but they are not the same.
00:12:46.564 - 00:13:45.154, Speaker A: So DX involves making the product better in its entirety. Devrel is about taking this DX to the community. Effective Devrels engineers convey empathy towards developer needs, gather feedback and insights which the product team will feed back into the experience to make it awesome. There is no good DX without good dev Rel and no charismatic Devrel without the backing of amazing DX. So if you want to implement graduate DX inside of your company, I advise you to delve deeper into this guideline that Daniel Luca and myself put together last year. Gradex framework stands for good documentation, robustness, error handling, accessibility and testability. You have a QR code that you can scan and then you will have access to the framework.
00:13:45.154 - 00:14:43.016, Speaker A: Cool. And then when you go back home, these are the ideas that I'd like you to remember from this talk. DX is UX for developers, DX is a team effort and not the responsibility of only one role. Exceptional DX is the synergy between the DX team and the evangelist team and the great DX framework. If you want to fight a good fight along with me and make web3 a better place for everyone, you can enroll here and participate in paid UX and DX studies with web3. Ux. This is a user research panel that I was telling you about earlier, and then if you want to read more, learn more about it.
00:14:43.016 - 00:15:23.654, Speaker A: You have all these DX resources. The first two ones are the two amazing applied DX research. So you have the Eden block Mena research diary study and then you also have the threshold network TBTC client code diary study and you have there the methodology and the report. So you can use it and apply it in your developer homes as well. Yeah. So in the end, don't forget to love your users, even if they're developers. Thank you.
00:15:23.654 - 00:16:12.618, Speaker A: I think we have hit the part where you can ask me questions and I can maybe give you answers. All clear. Cool. Oh yes, that's, that's a very good question. I don't think there are any phenomenal examples. Okay. But I think we're starting to have make a better and better job and.
00:16:12.618 - 00:16:15.894, Speaker A: Yeah, sweet. Yes.
00:16:19.994 - 00:16:23.946, Speaker B: So I like a good documentation.
00:16:24.010 - 00:16:57.724, Speaker A: Good documentation. What are good examples? I would direct you to the threshold network and to the TBTC bridge documentation, especially for how to set up a node if you want to become a staker. They have a really, really good step by step guide and I think that is a very good DX documentation example. They have snippets, they have everything. And it was backed by research. Yes.
00:16:59.544 - 00:17:07.072, Speaker B: Maybe one follow up. Like any big projects that you feel like have really bad documentation, it's like a negative example to use to build something.
00:17:07.208 - 00:17:26.904, Speaker A: Oh, unfortunately I don't know any, so can't point fingers at anyone. But I think when you're stumbling across bad documentation, you will feel it, it will be painful and you will know. Okay. Yes.
00:17:26.984 - 00:17:41.008, Speaker C: Yeah, one more question. Sure, right here. Yes. Yeah, sorry. How would you handle releases? Well, so that developers are aware of new version releases or API changes or anything as such.
00:17:41.096 - 00:18:34.794, Speaker A: Excellent question. We actually had this issue for the client code and we have realized like my proposal was to just put it in the client logs because most of the people who are staking or are node operation operators are going to look at the node logs. So I would put them there in order to make sure they know there is like a new release, a new client release. And I think this is the easiest and truthful and direct way that you can talk to your actual users. But you can also have joint efforts with newslettering, Twitter, GitHub, repos, everywhere. You can make sure that they understand. But my go to is just like add it in the logs they will read.
00:18:34.794 - 00:18:37.234, Speaker A: Yes.
00:18:38.454 - 00:19:07.244, Speaker D: So from your experience as in terms of developer experience for web, two, web, three certain like tools or like SDKs would exist. Like even for both, like for open source projects. So any observations in terms of like using tools such as Nielsen's heuristics, other like UX tools that like things that we need to keep eye on when we are developing for web3, developers like that are different from web two developers.
00:19:07.904 - 00:19:38.274, Speaker A: I think the fact that the environment and ecosystem changes are much, much faster than in web two, where everything is just like stands there, we already know about it. I think we should maybe do a better job with this, making sure that we educate the developers with all of the new tools that are supporting the ecosystem changes. Yeah.
00:19:43.574 - 00:19:44.582, Speaker C: Just one more question.
00:19:44.678 - 00:19:46.514, Speaker A: Sure. I love it. Thank you.
00:19:48.094 - 00:19:59.474, Speaker C: Do you have any tools you would use to generate the documentation directly from the code, for instance, Openapi three, or anything else that you think works? Well?
00:20:01.334 - 00:20:37.864, Speaker A: I don't know, but I think even if you were generated directly from the code, let's say this would be the first pass. You should always actually have a tech writer and then test it out with users and see, does this make sense? And it's important to test it out with users outside of your team because they are unprimed, unbiased, they don't know anything about it, so they will give you really good insights and you find the friction points in your documentation where it doesn't really work.
00:20:39.124 - 00:20:50.944, Speaker C: Do you see something similar to postman or rapid API in the web3 space where it's just collections of APIs or whatever it is, and you can sort of search among those?
00:20:52.004 - 00:20:55.024, Speaker A: I cannot answer this. I don't know.
00:20:55.324 - 00:20:56.224, Speaker C: Thank you.
00:20:56.764 - 00:21:05.024, Speaker A: Sure. Any other questions? Okay, thank you so much. Thank you guys.
