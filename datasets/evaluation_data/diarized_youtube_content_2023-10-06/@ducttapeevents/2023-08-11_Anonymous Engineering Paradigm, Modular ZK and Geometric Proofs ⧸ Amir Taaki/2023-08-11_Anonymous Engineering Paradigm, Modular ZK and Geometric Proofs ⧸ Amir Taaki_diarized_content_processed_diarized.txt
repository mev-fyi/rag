00:00:11.840 - 00:00:14.114, Speaker A: It's just generating the latex.
00:00:14.774 - 00:00:16.554, Speaker B: And I have.
00:01:00.854 - 00:01:45.440, Speaker A: Hi, thanks. Nice to talk with everyone. Okay, so, yeah. So crypto is the birth of agrist parallel economic network. And right now, transparent crypto is crypto that is fragile. So fragile fragility, it means that in an adverse environment, it's infrastructure that cannot survive. And transparent systems, they break under pressure.
00:01:45.440 - 00:02:48.274, Speaker A: But in an anonymous system, this is reversed, where attacks against anti fragile systems only vindicate their value proposition, and it drives more and more users into anti fragile crypto. You have this side of crypto where there are projects that the way that they're built, that they're fragile, when they come under attack, users end up exiting from the system. And then you have crypto projects which are anti fragile. And the more they come under attack, the stronger they become. And crypto is under attack from all sides. They're increasingly using the language of war. Elizabeth Warren last week announced that she was forming an anti crypto army to fight against crypto.
00:02:48.274 - 00:03:54.990, Speaker A: So we've really reached a new phase in the escalation of the war against crypto. And the inevitable endpoint of this fragile, anti fragile sides of crypto is evolution into what we call a reg fi and a dark fi, and a reg fi is side of crypto which is meaningless. It's powerless, it's completely encumbered and nearly impossible to use. And everything intro is interesting is driven into oblivion. And then there's the underground, unregulated side of crypto that is free and unencumbered to properly explore the true destiny of crypto as a major historical invention on par with the printing press or gunpowder. A new asset that cannot be, cannot be, is immune to seizure by the states. That essentially makes the nation state economic model obsolete.
00:03:54.990 - 00:05:16.154, Speaker A: And, you know, Darkfi, we're building, we're creating the infrastructure for this movement to stand its ground, to innovate, and to push forwards. So a bit about Darkfi. You know, Darkfi is not just an l one for Zk contracts. It's we're into the entire concept of anonymous engineering paradigm, where we see that all of the developments in cryptography can be used to construct a new paradigm of computing, a self sovereign paradigm. Also, we have the, as far as I know, the only l one, which has censorship resistant validators. So like the OFAC censorship which happened on EF, it can't happen because our validators are anonymous and no trust is set up because we were using halo two and then anonymous network level privacy via Tor or NIM. You can add any other transport and right now, so I mentioned anonymous engineering.
00:05:16.154 - 00:06:44.478, Speaker A: So, yeah, and so in particular now, in this last decade, there has been really some huge breakthroughs in consensus algorithms, distributed systems and cryptography. ZK obviously is a very important technique, but also there's MPC and he, and then more exotic things, vdfs, functional encryption, even in the mathematical side, which is what, in this talk maybe I'm going to explore more. We're increasingly going away from, like before, cryptography used to use a lot of simple number theoretic concepts. Now it's going increasingly more into stuff like arithmetic, geometry and like advanced abstract abstract concepts. So, and so we're trying to conceptualize this new, this paradigm of how we construct anonymous applications. Anonymity actually expands the design space of what's possible. So an example of that is we made an anonymous Dao, and that was because of our experience with Assange, Dao, where we raised 55 million to free Assange by all means necessary.
00:06:44.478 - 00:07:40.262, Speaker A: But then it was a weird situation where we had this treasury that was on chain and people, you know, were participating, and it was. But it was for a political prisoner, so there's a lot of risk for people there. So then, and not only that, but also we were participating in an auction to bid on an NFT, but our treasury was on chain and completely public. So it just led to this very inorganic situation where nobody wanted to bid against us. So it just completely broke the game theory of the entire thing. So that's why we made anonymous, anonymous style. And if for example, I give the example of voting in the anonymous style, you create a vote, which is you make a commitment using a homomorphic commitment scheme.
00:07:40.262 - 00:09:01.372, Speaker A: And then people post that, and then at the end somebody comes and adds all them up together and they publish a proof of the votes passing a threshold which is set in the DAO. And then that allows the money to be debited from the DAO's treasury on chain. So already there you can see a whole different bunch of techniques being used, homomorphic commitments, verifiable encryption, ZK proofs, anonymous protocol and liquidity. So those combination of techniques is like how you can conceptualize anonymous engineering, and in particular in ZK, or in general in cryptography. Now we're going increasingly, I think the end point will be modular systems where you will be able to chain together different pipelines or different cryptography systems, or for example, in ZK, different proving systems are specialized for different tasks. So, and I was, and also I was talking about this exploration that's happening now, which honestly, like a lot of the constructs we use is very simple, like schemes around polynomials. But there's a vast universe out there that, you know, we're only just beginning to explore.
00:09:01.372 - 00:10:03.076, Speaker A: So I wanted to give example of construct that can be used for set proofs. So there's another talk after that's interesting about that. But for example, if I show here, this is a circuit layout, and you can see the big vertical green column, and that's a lookup table. And unfortunately, when I use that lookup table, it forces me to have to, I can't, it forced me to double my circuit size. So I get all this wasted space that you can see below. So that's kind of awkward, especially for smaller circuits. So one idea that people are talking about is that you can do curve trees, which is, is it elegant construction, but the main slowdown in curve trees is you need an elliptic curve in a product proof, which is Pedersen proof.
00:10:03.076 - 00:10:40.512, Speaker A: And. Yeah, and so, and so what's interesting is there is this paper which is called zero knowledge proofs of elliptic curve inner products. And in the paper he says many. This is in the intro. In the second section he says many discussions of elliptic curves. So this is by Liam Egan. By the way, many discussions of elliptic curves avoid delving into the details of how the group law is actually derived.
00:10:40.512 - 00:11:46.820, Speaker A: So a lot of cryptographers, a lot of people in crypto in general, they're using this group law of elliptic curves. But there's no motivation for where did that group lore come from? Preferring instead to define the group law in terms of an opaque collection of axioms. And it's not apparent why these define a group, but for the purposes of programmers, they and cryptographers, they treat the elliptic curves as a black box, and it's not, and they typically don't have a deeper understanding. So this computational oriented view of elliptic curves is the starting point for zero knowledge. Proofs of elliptic curve operations have tended to be defined. So, however, using the Picard group, one can show that the collection of curve points sum to zero by demonstrating the existence of an element of a function field of the curve and how it intersects these points. So, yeah, so this asymmetry between what is necessary to compute and what is necessary to verify computation was carried out correctly is fundamental to computer science.
00:11:46.820 - 00:12:42.444, Speaker A: And reframing other problems in this way may lead to more performance zero knowledge proof systems. So I found that kind of, I found that very interesting. So I'm going to talk a bit more about how this is constructed. So, an important problem in number theory that people talk about is, okay, there's a prime number that is equal to the sums of two squares. Okay, how can we find all of the set of numbers that have this property? And maybe you can set it to a specific prime number. But one way to do this is actually to view it not as an equation over the rationals or over the integers, but to actually view it as q or join I, where we can split it into the product of these two factors. And people who know this stuff will know.
00:12:42.444 - 00:13:22.996, Speaker A: Then you can conceptualize in terms of prime ideals. And then there's a very elegant proof that you can use to say, okay, these are all the numbers that fit that factorization. X plus iy. X minus iy. So this is broadly, I think this is called Pell's equation, but it's a broad class of problems that mathematicians like to think about in number theory. And. But then, but then a crucial part of this proof is that you need to be able to guarantee that whenever you have a number alpha in this field, that it can be factorized uniquely.
00:13:22.996 - 00:14:02.972, Speaker A: So that's when we start talking about unique factorization. This becomes like a very important problem in number theory. So there is this concept of, of euclidean domain. So, euclidean domain is like, as you know, with normal numbers. So I put this equation at the bottom. But another way to look at this is that when you have a number alpha and when you have a number beta, and when you do alpha divided by beta, then the remainder will be some fractional amount that is less than one. So, so I can actually give a diagram of that here.
00:14:02.972 - 00:14:18.304, Speaker A: And you can see if I zoom in. So you see, this is the field that is q adjoined with square root of minus three. And if I. Where's my mouse? How do I get there?
00:14:18.644 - 00:14:25.764, Speaker B: Oh, fuck. One sec. Shit.
00:14:26.784 - 00:14:32.204, Speaker A: I need to be able to move my mouse to that screen, but it's.
00:14:37.504 - 00:14:46.632, Speaker B: Okay. Okay. Should work.
00:14:46.688 - 00:15:24.784, Speaker A: Yes. Okay, so if I put my mouse here, then you can. So just to explain, this is Lassius. Of all the white things are the actual integer points in this field. It's like a generalization of integers to this field, which allows us to kind of do similar things as we do of integers. And so then we can say, okay, is every point in this field close? What's the closest point there? Is there a closest integer point? So in this.
00:15:30.684 - 00:15:39.484, Speaker B: The fuck? Where's my presentation? Okay, cool.
00:15:39.604 - 00:17:10.004, Speaker A: So, yeah, in this equation here, the equation at the bottom, it says that, okay, when there's alpha and there's a beta. So for example, if alpha was number ten and beta was like the number three, then there is some integer like for example, the number three, such that ten is equal to three times three plus a remainder, and that remainder would be less than the number three. So as I said, if you rearrange that, you can also think about that ten divided by three and the remainder would be 0.333, which is less than one. So when we look at in this lattice here, okay, all of the points in this plane is that like in this bounded region are the numbers less than one. So if I move my mouse, you can see the top calculation, which is calculating the, the distance or the norm, you can see is 0.5. And as I see, if I remember how to do this, as I increase the numbers, I get to this one, which is 15, and I put my mouse here, you see, it's still one, but as soon as I increase it here, then now it's greater than one.
00:17:10.004 - 00:18:25.762, Speaker A: So this field stops being euclidean. It loses that property. And so then, okay, and so then in the number fields then we can start because it's a Dedekind domain, then we can start to look at, okay, okay, we can't use this euclidean property to prove that there's unique factorization, but we can actually look at in terms of, we can actually look at it in another way to see is this the main principle? And so then there's this construct called the ideal class group. And what that is is we define an ideal basically as a principle. If it can be, if, yeah, if, if there's this prop. If the ideal is, is principal, then, then they're, then they're equivalent. And when, and so if the size of this group, yeah, so when I look at a number and we look at the factorization of that number, we will look at it not in terms of numbers, but in terms of this thing construct called ideals.
00:18:25.762 - 00:19:18.102, Speaker A: And so we want to be able to see they can be factorized uniquely by looking at can it be factorized in terms of ideals, of principle. When we say principle, it means defined by a single element, which means then it can be the factorization of a bunch of elements. And so we define this property of principality. And then we look at the total deconstruction of all the elements in this field and we quotient it out in this equivalency relation by the set of ideals that are principal. And so then we can actually look at, okay, what's the size of this group? And if the size of the group is one, then we know it's a principal ideal domain. And so therefore we know it has unique factorization. But if it's greater than one, it tells us how far away does this field deviate from being a unique factorization domain.
00:19:18.102 - 00:20:14.770, Speaker A: And so, and so this is a construct that people using cryptography for like unknown order groups, for example, like Chia, they're using it for their, for their thing, and actually was. And the way that they define it is you have these tuple of three integers. And so actually this group that I just constructed, which is a very algebraic group, there's actually a computational way of defining it. And so you can construct this ideal class group where there's an equivalency between these tuples of integers that represent a type of, type of quadratic form, where you use matrices from this group called sl two. And this group is defined by forms of the by it has two subgroups. One subgroup is of order four. So it's s.
00:20:14.770 - 00:20:39.332, Speaker A: And you see it just does a rotation along like by 90 degrees. And you see s inverse does a rotation in opposite direction. And then the other one is t. And t is an infinite size subgroup. You can see this is t going in that direction. You can see it's t going that way. So if you look at the top all, which says a, b, c, that's the coefficients of the quadratic form.
00:20:39.332 - 00:21:44.812, Speaker A: And so there, there is actually for every quadratic form where the discriminant is the same, which is minus twelve, then there's a way of doing certain operations where, you know, I mean, like, I won't do it here, but there's a certain algorithm that you do that if you give me any top of the representative form, you will always get a unique representative of that class. And actually this abstract thing can be computed using those quadratic forms. And you can do a lot of cryptography, interesting cryptography, with it. But this construct generalizes to elliptic curves. And you might know this from pairings. It's used a lot in pairings, the divisors. And so the, broadly speaking, you have a function that's defined over an elliptic curve, and you can construct these devices, a representation of the zeros of a function.
00:21:44.812 - 00:22:44.634, Speaker A: And you know that these divisors, when they can be represented by a function, we call them principal, but when they don't represent a function, they're just normal divisors. So again, we construct this class group where divisors are principal if they're can be represented by function. And so it can do a lot of interesting things in that. But one of the property which you can actually compute using resultants, is this vi reciprocity, where the f of div g is equal to the g of diff. And so what you could do is you can construct a protocol where the verifier gives you a random line that intersects your function that you're trying to prove is a function that has these zeros. And if this function has these zeros, then it means that those points on the elliptic curve, they add up to the identity. And so that is an interpolation of those points.
00:22:44.634 - 00:24:05.346, Speaker A: And so there's this resultant, and you can see that it's got this dualism symmetry property, which happens a lot in geometry. So if you take for example your function that you're trying to prove, interpolate these points q one up to qn. Then if you calculate the result on f and g, you will see that f of the zeros of g is actually equal to g of the zeros of f. And so you have this identity that you can use, where I have a function f with zeros of that I'm trying to prove has zeros of q one up to qn, which then means that the sum of q one up to qn is equal to the identity on the elliptic curve, which then you can use to construct in a product proof. And then what the verifier does, they construct a random line which has three zeros, because that's a line going through an elliptic curve. And then I evaluate my function f on all of those zeros and I check, and then we check if it's equal to the line evaluated at my zeros. And so then that's the protocol.
00:24:05.346 - 00:25:10.506, Speaker A: But actually we can use this thing called discrete log, which if you look, the discrete log is equal to differentiating, um, divided it by you. But it takes that statement which is multiplicative inside of the brackets, and it turns into an additive statement. So then that statement which was multiplicative, we can actually make it more efficient by turning it into additive statement and making a statement about the structure of that group. And then we can use that to construct an elliptic curve in a product proof. And it's interesting because also allows us to construct more abstract statements inside of our ZK proofs. So for example, you can construct statements about divisor class groups inside of the ZK proof. And if you can do that, then potentially you can model things like hyper elliptic curve divisor groups which have an unknown order for genus three or above.
00:25:10.506 - 00:26:46.844, Speaker A: But genos three is recommended, and it's part of this trend, which I think is very interesting inside ZK, which is by extending the operators the developers have access to inside of ZK right now we use addition and multiplication, and you can extend that with custom gates, but having access to potentially more high level properties is interesting. And so the ZK development itself, or this paradigm is fundamentally algebraic. And so part of that is how do we construct tooling which allow anonymous engineers to construct an application and then schematize it and formalize it and be able to implement it. And so that's also part of that investigation which we're still very early in, in terms of how do we build or construct tool chains or compilers that will be able to do the optimization of circuits. And there's a lot of stuff about like dependent types and type theory, et cetera, because I showed you that table earlier which had that row, and there is a gadget and I snap it in and I'm restrict, it's a fixed number of rows, I can't optimize it and also I have to add a certain number of columns and I can't use less columns. So all of that optimization is done by hand, it's predefined in the libraries. So all of the tooling is very primitive.
00:26:46.844 - 00:27:41.224, Speaker A: And so all of this tools or techniques are things that we can wield, that we can use to hack and to construct applications. They give us a huge amount of power. And our thesis that we published more than two years ago is we're seeing it happen more and more constantly. That really necessity is going to drive the value proposition of darkfire. And our thesis, it's just being vindicated more and more at this point. It's practically inevitable. And in that case, darkfire will be strong market leader.
00:27:41.224 - 00:27:55.584, Speaker A: Our triumph is guaranteed. And yeah, I'll leave you with this quote by Satoshi who gifted us free software money. Thanks everyone.
