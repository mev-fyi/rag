00:00:05.880 - 00:00:07.274, Speaker A: So, Piper, over to you.
00:00:07.814 - 00:00:23.194, Speaker B: All right, let's see if this clicker works. All right, it looks like it does. Cool. Well, hello, everybody. I'm here to talk to you today about a project I've been working on for a bit. Me and a couple other people called the Portal network. I'm Piper Mariam.
00:00:23.194 - 00:01:10.034, Speaker B: I work for the Ethereum Foundation. I guess researcher might be the right title here. I've done a lot of things. I've been doing Ethereum stuff since the network launched, and it's been quite a ride. Goal is, at the end of this, you guys have a sense for the answer to this question, both kind of conceptually and what problems are we trying to solve? What problems are out there, as well as just pragmatically? What specifically, technology wise, are we building? This is kind of my white whale. I've been at this problem for five or six years now, and it's got some more to go. Lightweight protocol access is not easy, which 2016 me had no idea about.
00:01:10.034 - 00:01:35.774, Speaker B: I thought, yay, I'm going to build a lite client around 2016. Parity is shitting the bed, and Geth is pretty much the only show in town, and client diversity is a problem. And I thought, maybe I can fix that. It went great. Not really. We spent five years building a ethereum client called Trinity. It was written in python.
00:01:35.774 - 00:02:37.704, Speaker B: We knew almost nothing about the protocol when we started, and we learned a lot along the way. We built and built, and we ended up with something that looked kind of like Geth, but was really slow. And then we spent another like two years iterating on different things that we could do with Les, which is the established light client protocol at the time, ways that we could use the existing peer to peer protocol that all Ethereum clients use. And ultimately we ended up letting the boulder roll back down the hill. The conclusion was, you can't get there from there, from here, wherever you want to put that. This is a concept from a science fiction book that I read recently that I like a lot. And it's just this phrase to try to capture when you are essentially trying to do something the wrong way, trying to transform a system into something that it doesn't want to turn into that sort of thing.
00:02:37.704 - 00:03:29.544, Speaker B: So we learned some stuff during this time, and one of the big ones is that the DevPper protocols that Ethereum runs on are far too demanding. DevPP is a peer to peer networking protocol. All Ethereum execution layer Ethereum clients use it to communicate and devftP the way that execution clients use it for is basically a dumb transport layer between full nodes, and full nodes are hardware intensive pieces of software. This is like rough stats of what a full node looks like today. You need something generally like a full terabyte of fast disk to run these things. You need large amounts of ram, many cores of cpu's to run. The transaction pool itself is an expensive thing to be part of.
00:03:29.544 - 00:04:09.062, Speaker B: And if you want to be part of the network that execution clients are part of, you have to be this tall to ride. And if you aren't, then you're this sad little girl at the fair. DevPP demands a ton from the clients that are part of its network. And the end result is that all of those clients end up looking about the same and they're all really heavy pieces of software to run. On the other side of that we have this protocol called Les, the light Ethereum subprotocol. And the end result, after many years of development, is that it doesn't scale well. This is what Les is like.
00:04:09.062 - 00:04:50.750, Speaker B: Les is a client server model. Again, we have this dependence on full nodes, this sort of fundamental assumption of full nodes, and all of the light participants in this network just get their data from full nodes. And being a full node in this network looks something like this. You just get hammered with requests from all of the light nodes. And the amount of capacity in the network is a function of how many full nodes there are. So every new light node that comes online is eating up some amount of fixed capacity. And being a full node in this network has no benefit to you, it is purely a cost to you.
00:04:50.750 - 00:05:46.598, Speaker B: And the light nodes have no ability to contribute to this protocol. There's, they are purely takers. So after spending a bunch of time building what was effectively a copy of Geth and realizing we weren't going to do better than being Geth, and then spending a bunch of time trying to build options around in different directions of how can we make this client shape differently? We came to this conclusion, you can't get there from here. And so we came up with a certain set of like, well, if we can't build it from this, what do we need to build? One of the things that we centered on was kind of going, well, first of all, we weren't going to build a centralized solution. Centralized solutions are boring to me. Go have fun building one of those if that's what you want to do. Les fits this decentralized model, but the client server model, we already kind of looked at that and thought, this isn't working.
00:05:46.598 - 00:06:39.914, Speaker B: Well, we don't want to depend on full nodes. And so we aimed for something that fit this distributed model. It sticks with the core of our ecosystem's values. We care a lot about centralization, but we wanted something that didn't have this kind of full node light node distinction. We wanted something where all the nodes to the network contributed capacity, a lot like Bittorrent. We aimed to build something, and we have built something that instead of each new light client coming on, taking up some amount of fixed capacity, we wanted something where as we added new nodes to the network, it got more powerful. And then this is a graph that's been in a bunch of my slides because it's really what we're aiming at today.
00:06:39.914 - 00:07:18.006, Speaker B: You only get the decentralized heavy option or the lightweight centralized option, and there really should be something in the upper. Yep, not mirrored, cool left corner of this graph. And that's what we're aiming to build. That's what we are building. So what is it? So the portal network is a completely new set of peer to peer networking protocols for Ethereum. It's built on the Discovery v five protocol. For anybody who cares about those kind of specifics, there's some really nice things about that protocol that we like.
00:07:18.006 - 00:07:55.434, Speaker B: One of them is that it's connectionless. It's another thing in the dev P two p world that we didn't like in the LibpP world as well, that they are Lib p two p and Devp are connection based protocols. You establish a connection with somebody and then you hold onto it. And that itself is a little bit discriminatory towards light nodes who want to pop into the network and do something. In a network where they have to establish long lived connections, they're already at a disadvantage. So we were looking for a protocol that was well suited for light nodes. Odzen the discovery v five protocol did that for us.
00:07:55.434 - 00:08:46.794, Speaker B: This is a distributed storage protocol. We looked at what data you need to do lightweight protocol access and then started looking at how we map that data onto a distributed storage network. And the whole thing is designed from the ground up, aimed at being resource friendly towards low resource devices. So aiming for building protocols that don't have kind of these implicit height requirements, these you must be this tall to ride. Aiming for a protocol where the base level of participation is accessible to consumer level hardware, consumer level Internet connections, that sort of thing. And then I came up with this mouthful. A globally available, highly accessible, massively cooperative archive node.
00:08:46.794 - 00:09:09.034, Speaker B: That's what we're building in a mouthful of that globally available. It's a peer to peer network. You can get on it from anywhere in the world, that you have an Internet connection and that you can connect to another peer. Highly accessible. Targeting low resource devices. Ideally you can flash a raspberry PI and run it on our network. You can run it on your laptop, you can run it as a daemon process that doesn't eat up your cpu.
00:09:09.034 - 00:09:52.176, Speaker B: Massively cooperative. We're looking for something where we bring hundreds of thousands of nodes online around the world, and. And that capacity gives us what we need to not only serve all of Ethereum's historical data, but even archive node level state data. We've been at this for a little bit. We're on track to deliver a fully functional history network. So that's a network that serves all of the historical headers, block bodies and receipts, probably in the next couple of months. But betting on software delivery is risky business.
00:09:52.176 - 00:10:25.444, Speaker B: So by the end of this year, we should have a fully functioning chain history network. We're hoping to see experimentation on top of this for EIP four four s. One of the things that's blocking most of the Ethereum clients from dropping all of the deep history is there isn't an alternative place for them to get it. We're working on state, we're just getting started on that. That's going to be a harder, nastier problem. But we're looking at delivery sometime towards the end of this year. Or Q four, sorry, or 2024.
00:10:25.444 - 00:11:29.696, Speaker B: This is like a long, ongoing research project. We're delivering pieces as we go, and we're really just hitting our first kind of like live networks with live data where these things are really working. I encourage you guys to join our discord or anything like that if you're interested in getting involved. We are right close to the point where we start talking to the community about turning nodes online. We're not quite there yet, so I'm not going to tell you to do it, but if you think that this is a project that you're interested in, that you'd like to learn more about, I'd love to get you hooked up, talk to you, whatever, but I want to zoom out a little bit. If you remember, I kind of started this way back in 2016 with this idea that I was going to fix client diversity. This project, this, I never would know what to call it because it is a project, it's a multi team project.
00:11:29.696 - 00:12:02.104, Speaker B: We have three different client implementations. The spans beyond just the EF. This is something that is infrastructure for kind of like our entire ecosystem, and lightweight protocol access is a huge thing. It is one of the primary things we're focused on. But I want to talk a little bit about execution layer client diversity, because that's kind of the piece that's hidden under the surface level here. This is roughly what client diversity looks like today. It's the Geth show.
00:12:02.104 - 00:12:40.952, Speaker B: It's been the geth show for as long as it's been. It shows no sign of not being the geth show anytime soon. And so the answer. So I asked the question like, why is it this way and what is it that we need to do to fix this? Because this is a graph that we should want to fix. And the answer, if you can come up with an answer to this question, that's my thesis here, is that if you want to fix client diversity, you have to figure out how to beat Goetherium. And I'm using intentionally adversarial language here. Nobody wants to actually ruin go Ethereum in any way.
00:12:40.952 - 00:13:42.988, Speaker B: We're talking about go Ethereum does a really good job, so you have to do a better job than go Ethereum. But it's more fun if I say beat them. So how do you beat go Ethereum? Well, we tried this, be better at being geth than geth is, and I think that there's some other clients that are doing similar things, and I don't really blame them for this. If you remember what I said earlier, the DeVPP protocol dictates a lot of functionality about what your client must do in order to be part of that network. If you make a list of what that functionality is, you basically get a list of what geth does. And it turns out if you go to build a client, you end up building roughly the same functionality of what geth does. You build a client that walks its way through the header chain to figure out what the front of the chain is that walks its way back, downloading the whole history, and then uses some process to grab a snapshot of the state and then execute blocks to keep it up to date.
00:13:42.988 - 00:14:27.774, Speaker B: That's what an Ethereum client looks like, because that's what the network basically makes you do. These guys have been slowly gaining some market share, but this graph has not changed a lot for a while. It's my thesis that if you want to beat Go Ethereum, you need to play a different game than they're playing. Go Ethereum has had what, five, six, seven years to get good at being who they are. You got a lot of catch up to do if you're going to beat them at their own game. Aragon has come along and said we're going to play a slightly different game. It's not a fundamentally different game, but it is different.
00:14:27.774 - 00:15:03.184, Speaker B: And they have differentiated themselves, but they're still not quite winning, right. Nobody is beating that 70% that Geth has on this graph. It's my thesis that if you want to beat go Ethereum, you've got to play a fundamentally different game than they're playing. And we'll see if I'm right. But the thesis goes something like this. If you want client diversity, then you need diverse clients, as in you need clients with a diverse feature set. If all of your clients look the same, then you're just playing a zero sum game against each other.
00:15:03.184 - 00:15:43.994, Speaker B: To get diverse clients, you need flexible client design. You need the ability to actually make your client different than the other ones. Turns out our networking protocols don't really allow that. And so if you want flexible client design in the ethereum ecosystem, you're going to have to actually change some of the networking protocols that all of these clients live on. And it turns out that in order to get buy in for changing the network protocols, you got to get guests buy in. And I worked on trying to get them to do some of this stuff for a while, repeatedly for a while. It turns out they don't care that much.
00:15:43.994 - 00:16:23.774, Speaker B: And I don't mean that as any negative thing towards them. Their job is holding up the core of the protocol and the networking protocols that we have, they serve that just fine for them. Geth's doing just fine with the network protocols that we have. And so this is where coming in and trying to play a fundamentally different game comes in. And so somewhere a couple years ago I had the bright idea of well, let's build a whole new set of networking protocols. So that's what we're doing. The portal network is a fundamental different game, hence this you can't get there from here concept.
00:16:23.774 - 00:17:30.074, Speaker B: I tried to evolve the networking protocols that ethereum clients use into something new. It wasn't a viable path to get to where we needed to go and thus building this whole new set of protocols that come at the problem from a completely different direction. Yes, we're going towards lightweight protocol access and light clients and functional things like that. The other thing that I hope to unlock from up on top of this fanciful, beautiful mountain with gold on top, that none of the other clients are on top of. The thing that I'm hoping to unlock here is the option for other ethereum clients to change what their client looks like to develop different functionality that doesn't look like the other clients, to allow them to branch out in different directions. Because right now, the protocols that they're all stuck on and they all use, they dictate a lot about what their clients look like. I'd like a world where that's not the case.
00:17:30.074 - 00:18:22.134, Speaker B: And I'd also like a world where we have, like, clients. This is supposed to be the view from the top of that mountain. Somewhere towards the end of this year, I expect to do that community call, because one of the things, if you remember, we're building a network where not only do the people with big pieces of hardware, like full nodes, get to contribute to this, but if you want to turn one of these on, on your laptop, you will actually be contributing to something tangible and valuable to Ethereum's ecosystem. And we're going to hit that point somewhere towards the end of this year. Hence the little star in this graph. That's what I got to talk to you about today. Anybody got any questions?
00:18:22.634 - 00:18:33.454, Speaker A: Very, very interesting. Piper, I think we have one question right here in the back.
00:18:33.794 - 00:18:41.614, Speaker C: Yes, very easy. You talk about raspberry PI. Could you precise on which version of Raspberry PI?
00:18:43.434 - 00:19:07.882, Speaker B: We don't have hard hardware numbers right now, so I'm just going to be really upfront that these are targets and not things that we've measured. But you should be able to make a meaningful. You should be able to make a meaningful contribution to this network with half of a core of a cpu and a gig of ram and 500 megs of disk.
00:19:08.018 - 00:19:15.858, Speaker C: Okay, so I could run it on a raspberry PI three at least to the benchmark it to see how it works.
00:19:15.986 - 00:19:29.574, Speaker B: Yeah, I mean, like, the goal for each of these networks is no height requirements. That if you want to show up with a core of cpu and a slow DSL connection and 100 megs of disks to give us. Great.
00:19:30.074 - 00:19:31.254, Speaker C: Okay, thank you.
00:19:32.534 - 00:19:38.754, Speaker A: That's a pretty good answer. Who's got another question right here in the front? Or maybe. Well.
00:19:40.494 - 00:19:51.534, Speaker D: So is it incentivized, bittorrent style, in that in order to get some service from the network, you have to provide some service back? Or is there some other incentivization in the network?
00:19:51.574 - 00:20:32.884, Speaker B: There is no quality. Our clients are dumb at the moment because we're kind of just getting off the ground. So at present, there are no incentive systems. There's nothing in there built for that. The idea is to make the barrier to entry low enough that contributing to the network disappears into the kind of gap space in your machine where it's not really a big deal to leave one of these on in the background. It's not saturating your bandwidth. It's not running your cpu at full tilt.
00:20:32.884 - 00:21:13.294, Speaker B: It's intended to be something that is lightweight. And the networks themselves are designed to allow you to tune your participation. So if it is eating too much of your machine's resources and you want to turn it down, the networks are designed to have knobs so that you can turn that participation patient knob down. It's a thing that we're going to have to iterate on over time. This is kind of a. We're in kind of this tight iteration cycle loop, and the first goal is get something up and functional, and then figure out where the. Where the slow parts are and attack those.
00:21:13.994 - 00:21:14.894, Speaker D: Thank you.
00:21:15.674 - 00:21:17.814, Speaker A: Cool. And over here.
00:21:20.014 - 00:21:20.750, Speaker B: Thank you.
00:21:20.862 - 00:21:23.742, Speaker D: So you mentioned Diskv five as one.
00:21:23.758 - 00:21:46.104, Speaker B: Of the protocols that you are building on. Is it part of the protocol stack, or you are building on disk V four? We have built our protocol on disk V five. It's a UDP based protocol, connectionless. It does exclude browsers, but we do really like the connectionless aspect of it. And not having to build a whole base protocol along with this was a nice starting point. Thanks.
00:21:47.924 - 00:22:06.652, Speaker A: All right. Any other questions up here around? No. Can I ask you one question myself? The team group community working on this. How's it going? Are you looking for more contributors help, or you have a lot of help already?
00:22:06.828 - 00:22:31.148, Speaker B: I think that the kind of help that we're looking for is less. The harder development help and more of the community building soft skills, that sort of thing, as well as people who are interested in building more, like hackathon project type things on top of this. I think that's an answer.
00:22:31.236 - 00:22:39.704, Speaker A: Okay. So. And as you move towards the end of the year, with launch and all this kind of stuff, you're going to look for the. The hype, the spread, the word.
00:22:39.864 - 00:22:43.204, Speaker B: I imagine that we start looking for more help around that time.
00:22:43.664 - 00:22:48.928, Speaker A: Okay, very cool. If there's no other questions. Thanks a lot, Piper. Very interesting.
00:22:48.976 - 00:22:50.320, Speaker B: Welcome. Good.
00:22:50.512 - 00:22:50.904, Speaker A: All right.
