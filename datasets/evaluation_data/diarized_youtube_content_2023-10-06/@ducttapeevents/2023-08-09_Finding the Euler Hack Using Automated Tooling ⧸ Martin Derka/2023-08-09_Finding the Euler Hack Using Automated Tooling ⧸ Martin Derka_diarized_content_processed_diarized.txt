00:00:00.160 - 00:00:19.286, Speaker A: Um, thanks for setting and hosting. I'll picture later on here.
00:00:19.430 - 00:00:20.634, Speaker B: Something going on.
00:00:31.874 - 00:01:05.310, Speaker A: If you want to start with this or give it a second, whatever you guys think is better. So sometimes if you have questions, you can just walk on answer. Okay. Okay, so we don't have. Okay, so I also will hold mic. Oh, there we go. All right, so thank you very much for introduction.
00:01:05.310 - 00:01:47.956, Speaker A: My name is Martin, I'm from Quantstamp. We are security auditors, and I want to be talking about some tooling that we have for discovering economic manipulation, attack vectors, and, you know, finding flash loan attacks. So I have a list of protocols in here. And do you know what they have in common? All of these. They were all hacked, right? In the past, they were hacked actually for a lot of money. In summary, we have roughly $300 million, and these hacks happened within the past two, two and a half years. Most notably the most recent one and quite large one here is Euler, that was hacked for 197 million.
00:01:47.956 - 00:02:41.166, Speaker A: Kudos to Euler. Eventually managed to get all the money back, but the very initial damage was quite large. So, before I talk about anything, I should probably tell you what a flash loan is, right? So that we all start on the same page. So, a flash loan is generally an uncollateralized loan that you can take out for a span of a single transaction. It is provided to you by a smart contract. And the way how it works is that you say, hey, please, dear smart contract, give me a lot of money, and with that money on my behalf, do something. And that smart contract states that money, it triggers the transactions or continues the transaction that you have triggered, does those actions that you requested, and then at the end of that transaction, it double checks that it received the balance back, whatever it was providing to this transaction.
00:02:41.166 - 00:03:18.572, Speaker A: And if that loan was indeed repaid, it's fine. And if it was not, then it actively reverts the transaction. And that's the reason why flash loans can actually provide arbitrarily amounts of money. So really a lot of money. And they can be certain that this money is going to be repaid. Okay, so, you know, pending liquidity, we actually know that flash loans can be arbitrarily large, and therefore they can be used to do various stuff in the market that, you know, people did not really intend. So I have an example of one flash loan attack in here, so that we are not talking just in abstract terms.
00:03:18.572 - 00:04:09.424, Speaker A: So imagine that you have a smart contract, and a smart contract is going to hold some pool of ether, and its goal is going to be to sell this ether. So you will be able to come to the smart contract and say, hey, I have some USDC, please sell me some of that pool of ETH. So therefore, the smart contract needs to know how to price that ETH, right? What is the exchange rate between ETH and USDC? And in this design, which I'm going to 100% admit right here, is vulnerable in this design, the pool is going to check the spot price on Uniswap, and that's how it is going to price the ETH for you. Right. So if an attacker wanted to exploit such a protocol, it would be actually super, super simple. They would take a flash loan for something like 100,000 ETH, which is, you know, $200 million. Flash loans are really, really large.
00:04:09.424 - 00:04:37.514, Speaker A: And then they would go to Uniswap and they would dump all that ETH on Uniswap. Right. Drive the price of ETH really, really down. So for the sake of an example, let's assume that that would be something like ten USDC, and then still within the same transaction, then they would take that USDC, go to the pool and say, hey, dear pool, I have a lot of USDC right now. Please sell me all that ETH that you have. Right. And the pool would go, it would check the price on Uniswap.
00:04:37.514 - 00:05:27.002, Speaker A: It would see that this is $10, and it will start selling this ethnic for $10. But we all know that this, you know, at least right now, and hopefully forever, doesn't really match the reality. Right? And then when the attacker is done, they would have, you know, purchased their 20 million ETH from that pool. They would go back to Uniswap. And whatever, you know, ETH they have back, they would just sort of, whatever USDC they have back, they would purchase back that ETH that they dumped initially, and eventually they would repay that flash loan of 100,000 ETH. Right? And because they already made 200 million or, sorry, 20 million ETH in the second step, while buying it from the pool, they would end up with some profit. So this is roughly how flash loan attacks work.
00:05:27.002 - 00:06:03.156, Speaker A: Clearly, this design is absolutely wrong. It's vulnerable. And we know that the pool should be using some kind of oracle that is not manipulable to price that either. So that's kind of what's happening now. Why are flash loans so interesting to me? Flash loans are so interesting to me because they tend to be super, super devastating in the DeFi world, and there are multiple reasons why they are so devastating. So the first one is that flash loans are not provided for free, right. If I want to borrow $200 million from somebody, even for a little bit, in the end I will have to pay fees.
00:06:03.156 - 00:06:25.812, Speaker A: And even if the fees are really, really low, like 0.3%, right. These fees add up because I've just borrowed $200 million. So these hacks, they actually have to generate a lot and a lot of money. So they cause a lot of damage. So that they can cause a lot of damage. They actually come a little bit later in the lifespan of a protocol.
00:06:25.812 - 00:07:30.414, Speaker A: So, you know, that is when the protocol picked up some traction, when people have deposited a lot of money, and because people have deposited a lot of money in a given protocol and there is traction, it actually draws more attention and more people into the protocol and provides this seemingly sense of security because all the other people have money in there. But that's absolutely wrong. At some point, flash loan is going to happen, because suddenly that whole hack became profitable. These flash loans, they also very often apply to concepts that people in defi really, really, really often try to do. And they really often try to do them because they keep rediscovering this very, very appealing wheel, such as single sided trading pools. If you are providing liquidity into Uniswap, you are providing both sides of the pair, ETH and USDC, for example, and you are exposing yourself to impermanent loss. Many protocols try to invent this single sided trading pool where you will only provide one side of these two assets, and therefore there should be no implement loss.
00:07:30.414 - 00:08:03.506, Speaker A: But that is very often manipulable and hackable in some way. Right. Then very obviously, flash loan hacks, they actually permeate multiple protocols because you usually have one DeFi protocol that is integrated with something else. Then you go to something else, you manipulate that, and that's how you hack your original defi protocol. So they are actually really hard to find because this structure of integration can be actually really deep. They're also very ephemeral. That means that they can be applicable in one state or in one block, and eventually they can disappear.
00:08:03.506 - 00:08:46.522, Speaker A: If you go back to the example that I have given at the beginning where I'm speaking about that pool of ETH, right? Imagine that the pool of ETH actually didn't have too much ETH in it, that there would be like ten ETH. Well, it would be absolutely non profitable for you to borrow $200 million to get ten ETH. The fees would kill you, right? So these flash loan attacks, sometimes you know, they're profitable, sometimes they are not. And therefore they are ephemeral and typically they can unfortunately drain the entire TVL over the hack protocol. And overall they are caused by flawed logic. So this logic in DeFi touches both the financial principles and the mathematical principles and technical principles in the protocol. And therefore they are really, really hard to find.
00:08:46.522 - 00:09:47.582, Speaker A: And you need really experienced auditors to find that. So the first flash loan attacks happened at ETH Denver in 2020 and ever since, because I saw that they are very, very dangerous and detrimental, I've been looking for some automated tool that would help us discover these opportunities for such hacks in little bit better way. Right? And just like having humans analyze the code bases. So I have some survey of what was done before already in 2020, there were some attempts to use mithril for detecting some MEV opportunities and some flash loan stuff. Unfortunately, all these use cases of mithril, they were very elementary, very basic, and mithril actually didn't perform very well on those. So it didn't fulfill the goal that I was looking for, for a tool that could help us search for these in the wild. Last year, I was at Stanford in August, and there was this talk by Kushalbabel about something called clockwork finance framework.
00:09:47.582 - 00:10:26.528, Speaker A: So this is something that builds on the Kim framework, on the formal verification capabilities, and it looks at at these flash loan attacks as an MEv opportunity. There is some MEv on chain, you can extract it if you try to maximize it. Hopefully it will work. It's based on formal verification, so it actually has very good results. The caveat here is that I tried to replicate the experiments and set up the repository based on their very economic publication, and I was unable to. This is academic work. It's nowhere near production ready, and it has some strong caveats where you have to re express the entire protocol in the language of Kain framework.
00:10:26.528 - 00:10:52.546, Speaker A: So not really usable in practice either. Finally, last December, I ran into something called vanguard. Vanguard. It was a symbolic or static analyzer by veridice. It's no longer available on GitHub, so this is kind of an obsolete reference. But it claimed that it was able to detect flash loan attacks and it couldn't. That analyzer was just doing something absolutely different.
00:10:52.546 - 00:11:35.418, Speaker A: It was just detecting that a smart contract is calling method called balance off. So it had nothing to do with flash loan attacks. So the bottom line is there is really nothing out there that can help you find these hacks. Right? And that applies up until now, because now I'm going to talk about a tool that for the first time ever in the universe is capable of doing that. So, you know, through my search, I actually found a very, very interesting idea that researchers at the University of Toronto had. So I decided, hey, this is great, we should partner up, and we should actually bring your ideas and the tool into a production setting. So this is what I have been, what we have been working at, at quantstem for the past now, let's say half a year.
00:11:35.418 - 00:12:46.360, Speaker A: So we have developed and productionalized a tool that is capable of doing exactly what I am trying to do in here. The tool works roughly as follows. It sees the profit that comes out of a potential flash loan attack as a profit function of a sequence of actions. That's like depositing money into a protocol, withdrawing money from the protocol, liquidating somebody, and praise holder parameters for these actions. So how much are you going to deposit? How much are you going to withdraw? What are the exact parameters that you are going to call these functions with? And then this tool essentially guesses sequences of such actions, and for each such action sequence, it tries to create, using some numerical analysis, a model of this multivariate polynomial that expresses the profit function. And then it evaluates that polynomial looks for spots where we have some local maxima, and if those are positive, it actually checks on chain whether the attacker really, really receives the profit. I said that it checks on chain because so far, I said we only construct a model, right? It doesn't have anything to do with blockchain.
00:12:46.360 - 00:13:28.932, Speaker A: This is just, you know, a mathematical analysis that happens on top of that. So then we actually go and we check whether that model that we have constructed is correct. And if it is, then we say, yes, this actually was a hack. And here is an exact sequence of actions with the parameters that you need to execute to actually realize your profit. If the parameters and the action sequence do not result in a hack, or do not really provide a profit that was estimated by the model, then we can use this and reinforce the model and somehow actually improve it. And we have magnificent results with that. All those protocols that I've showed you before, we are actually automatically able to find all those hacks.
00:13:28.932 - 00:13:59.900, Speaker A: So that's $300 million that didn't have to be lost to hackers in the past. And this is where we currently stand. I have these, like, little exclamation marks by inverse finance and yearn. It only means that, you know, the tool requires a little bit of finagling, executing, a little bit different states of blockchain than when the attack actually happened. But the tool is capable of finding these hacks too. So this is how it looks when we run it. This is an example of our report, because we are actually launching a product around that.
00:13:59.900 - 00:14:32.408, Speaker A: We are providing these analysis as a service to Defi protocols. This is an output that would be applicable to Euler. The tool right away tells us, hey, there is a symbolic attack vector. You have to deposit, you have to donate, you have to mint, you have to donate, you have to liquidate yourself, and that will give you $17 million in profit. And then we can take these symbolic attack vectors and actually maximize them as auditors, and we are able to find everything that actually happened in practice and in the wild. I have whole bunch of notes. I'm slowly running out of time.
00:14:32.408 - 00:15:14.894, Speaker A: I was getting that signal from the back, so I'm going to speed this up a little bit. So, this tool is not fully automated. It requires some manual annotations for your code. But the good thing is that the first time ever, we are actually in the position where we are able to make that happen within the scope of roughly one or two workdays of a regular human. So it's nothing that would be beyond the capacity that any firm in the world has. This tool can detect any kind of market manipulation vulnerabilities. It doesn't have to be just the flash loan attacks.
00:15:14.894 - 00:15:45.322, Speaker A: The latest iterations of this tool are closed source, so we are not releasing it. We are trying to publish it academically. When we are done with the sarcomatic publications, we actually may release the tool for public. But you know what? I just told you how it works, so if you need to, go ahead and implement one. And as I already mentioned, we have built a product for this tool, the current product. It's capable of analyzing flashlight attacks and all the possible EVM chains. So whatever you want from this list and going beyond.
00:15:45.322 - 00:16:12.624, Speaker A: But because I've just conveyed a conceptually very new technique that doesn't really work with that chain much except for the simulation of the suspected attack. This actually can apply to many, many other chains. We can support different runtimes. We can even, you know, say that this applies to chains that don't even have flash loan attacks. Right. Because it detects logical flaws in the designs of the protocol. There is one scenario where the tool doesn't work well, it's this one.
00:16:12.624 - 00:16:49.072, Speaker A: So, you know, I said that we are looking for the values of some multivariate polynomial. If this multivariate polynomial has some sudden spikes in the profit function, that would be like, I don't know. If the address equals the owner, then rug pull or something like that. This would be what's causing such a profit spike. Then it would have a hard time finding that because these polynomials with sudden spikes, without any indication they are hard to model and approximate. So yeah, that's that one drawback. Luckily deFi protocols and the profit functions in them, they actually do not exhibit that behavior.
00:16:49.072 - 00:17:35.411, Speaker A: So our results are actually still pretty good. We also have some future work planned for this tool, so we want to increase the performance. This is a tool that tries to cover some search space, searching for these hacks. The more search space we can cover, the better. So luckily our implementation allows for that and we already have some plans of how we will increase the performance. The tool severely relies on the fact that we have an accurate model for these polynomials, right? So we actually are going to use some AI tools in there to kind of improve the search for those polynomials as well. And I already also mentioned that it requires some annotations for the code, right, to actually say, hey, these are the possible sequences that might be irrelevant in here.
00:17:35.411 - 00:18:13.772, Speaker A: So this is also another space where we will try to apply AI to actually reduce the amount of work that is necessary. And you know, obviously since this can be applied to other chains, we will try that. Why not? Why should this work only for ethereum? So the bottom line is, for the first time ever, we actually do have a tool for detecting flash loan attacks and economic manipulation opportunities. It uses some novel approach. It's very novel. It has nothing to do with static analysis and similar stuff. So that means that flash loan attacks are not really necessary.
00:18:13.772 - 00:18:53.742, Speaker A: I will put it in little quotes, right, because again, it's a search tool. If it doesn't find anything, which is my next point, it doesn't really mean that there is nothing, right? But our empirical results show that we are pretty good at using this tool and we will only be getting better as we are more and more optimizing those models of those polynomials. So let me say yes, flashlight attacks right now, obsolete, unnecessary, hopefully. I already mentioned that not a fully automatic tool, it still requires some manual intervention from experts. But we are fine with this. And it is a non exhaustive search tool. So if it doesn't find a hack, it doesn't mean that a hack doesn't exist.
00:18:53.742 - 00:19:22.190, Speaker A: But the history shows that we are pretty good. We may open source it eventually, but what I'm really here for today is we are looking for DeFi protocol and change to pioneer this with. So if you are a DeFi protocol that potentially might be a target of flashlight hacks or other economic manipulations. I would be very happy to talk. We will start offering this service to you and other communities. That's everything that I have to say. Once again, I'm Martin.
00:19:22.190 - 00:19:46.210, Speaker A: Here's my email. So if you don't catch me after the talk somewhere in the event, feel free to contact me over there. Find me on LinkedIn, whatever you want. Side note, quant started in Waterloo, Ontario, Canada, and there's going to be ETH Waterloo after a few years of a pause, East Waterloo is in two weeks. So if you make your way to Canada, please hit me up, you know, happy to hang out. I will be definitely there. Come as well.
00:19:46.210 - 00:19:48.174, Speaker A: Thank you. Questions?
00:19:54.434 - 00:20:09.318, Speaker C: Hi, thank you for the talk. Could you elaborate on other, any possibilities for maybe automatic reaction to potential attacks? So as long as you discover that the attack maybe will be happening in the next moments, is there any way to actually prevent this?
00:20:09.426 - 00:20:39.094, Speaker A: Absolutely. So yes, I did say that these flashlights are ephemeral. They depend on the state of chain. So it makes sense to turn this tool into some kind of a monitoring mechanism that says, hey, if we have right now arrived to the state of the chain where it has found an attack opportunity, we can automatically trigger a pause of the protocol provided that the protocol itself embedded this functionality and gave us the rights to pause this. But yes, this is in theory possible. More questions over there.
00:20:43.354 - 00:21:01.934, Speaker B: Hi, so you claim that flash loan attack is no more possible from now on. And so I want to ask where you've been on the 13 April or the 13 March when the Euler was attacked.
00:21:02.534 - 00:21:02.894, Speaker A: Right.
00:21:02.934 - 00:21:06.594, Speaker B: March 13, your product was launched and.
00:21:07.254 - 00:21:13.634, Speaker A: So our product back then was not launched yet. Yes, sorry, do you want to finish the question?
00:21:14.254 - 00:21:16.878, Speaker B: This is first you can ask and then.
00:21:17.046 - 00:21:49.158, Speaker A: Okay, so yes, we did take a look at Euler. We obviously are for profit company. We offer audits, we serve our clients. Euler unfortunately was not our client at the time and even if they were, the product was not ready at the time. We would probably use it in some experimental fashion. But no, we did take a look at Euler prior to the hack and we are very sad that we didn't take a look at Euler prior to the hack because if we did, it would have never happened and it would be really awesome. But yeah, unfortunately, mismatch in timing and the continuation.
00:21:49.246 - 00:22:01.904, Speaker B: Yeah. Second is why it's so important to make it as a close code and not even present the principle of your work or.
00:22:02.064 - 00:22:17.784, Speaker A: Oh, that's not the case. There are publications out there, we have preprints on archive. They are public. The repositories, unfortunately, have to remain. The most recent iterations are hidden. Some initial versions of this tool are actually in public. If you search deep enough, you will find it.
00:22:17.864 - 00:22:24.048, Speaker B: I've just missed in presentation some brief look on the principles, how it works.
00:22:24.216 - 00:22:28.844, Speaker A: Sounds good. Principals were here. Send me an email. I can send you a link to the repos.
00:22:28.964 - 00:22:30.148, Speaker B: Okay, thanks.
00:22:30.316 - 00:22:36.324, Speaker A: You're welcome. Okay, we're out of time, so thank you, Martin, very much. Awesome. Thank you very much.
