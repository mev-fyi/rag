00:00:10.240 - 00:00:27.944, Speaker A: Good morning everyone. Thanks for getting out of bed to join us. We're going to get started. Our first speaker is Philip Rogolski, who does bd for Redstone Defi with his talk on Oracle's reimagined how l two state diffs change, change the game.
00:00:38.204 - 00:01:50.424, Speaker B: Hi everyone, my name is Philippe, I'm BD and defiedigen addressed on oracles. And today I want to tell you a little bit more about rollup as a service product and oracles and what's the intersection between them. So to kick things off, for those of you that are not familiar with Redstone, I want to give you a short introduction. So basically we launched our mainnet product back in 2022, and then we announced our Sidron with VC's like Maven Eleven, Coinbase or Lemniscap on the deck. Then in 2023 we announced our angel round with prominent builders like for example, standip from Polygon, Alex Gulkoski from ZK Ceng or Emin, a founder of Avalanche on the deck. And as you can notice, a lot of these people are actually l one l two ecosystem leaders. That's because they understand what's the importance of diversity of oracles within your ecosystem.
00:01:50.424 - 00:02:42.156, Speaker B: Then again, 2023 we launched also our research arm. We did very good deep dives into a couple of topics. For example, RWA stablecoins liquid staking report and the last liquid restaking report had 120k views. And we are still very lean team for what we do around 20 people. Most of us live in Warsaw, Poland, and almost whole team is seasoned engineers. I'm one of the few that is not technical person and kind of like a short brag about us. We launched we first client utilizing our price feed on mainnet in January last year, and yesterday evening we hit $4 billion of total value secured.
00:02:42.156 - 00:04:04.104, Speaker B: So that's the amount of money that's currently relying on our price feeds. Now, why do you need an oracle? So basically what Oracle does is it delivers data into blockchains for it to be used further in smart contracts. I really like this explanation, especially for non crypto native people, when someone asks me, hey, what does your company actually do? If you imagine blockchain being as a computer that can do some kind of computation, like do some kind of calculations, whatever. Oracle is the Internet plug that connects this computer to external data and it allows it to use this external data further. So oracles deliver data and in theory it could be any kind of data. So you could have weather, you could have election data, you could have sports data, but in practice, since we all know, how does the current lifescape of crypto look like? And it's very speculative right now. Naturally, oracles have mostly demand for market data, and right now around 95% of the data delivered to blockchains are simply price data solely for crypto asset pricing.
00:04:04.104 - 00:04:56.608, Speaker B: And the question to you guys, do you know what's currently the most utilized price feed in defi? No, not the Oracle, the price feed. So like, for example, BTC USD or like, yeah, obviously it's ETh USD. That's because like ETH is like very broad ecosystem and it's like a broad big asset. But also there is more and more assets that are denominated in if. So, all the liquid stake tokens or liquid restake tokens they're usually denominated in if. So, if the protocol needs their pricing, it usually queries both the price width of LRT and the price of if. Now, what are the oracle use cases? So oracles will be broadly used in web3 ecosystem, but for now, they are mostly the backbone of Defi.
00:04:56.608 - 00:05:51.340, Speaker B: So almost every type of defi protocols requires oracles to function. And now just to mention a few. The protocols that use oracles or rely on oracles are, for example, lending markets like AaVE or Venus protocol, CDP stablecoins like liquiti or Prisma leverage protocols, gearbox, delta prime derivatives protocols, GMx or synthetix, Yelp protocols, Somalia on enzyme finance and algorithmic stable coins like for example, Frax or mentor. Now I have the question. Can you come up with two defi protocol types that doesn't need oracles? It's pretty simple if you think about it. Yeah, that's a great example. And usually people tell it so.
00:05:51.340 - 00:06:33.600, Speaker B: It's a good example because so decentralized exchanges like Amms for example, Uniswap not only don't need oracles, they are also very often data source for oracle. So whenever there is like an on chain native asset, usually uniswap delivers data for oracle to push it. Tower. Another example I really like is not sure if you guys are familiar with blur blend. Blur is an NFT marketplace, and blur blend is like p two p lending for nfts. And what's different about it is it has tons of liquidity even though it's on nfts and it doesn't have like oracle within this ecosystem. I think it's because of the points.
00:06:33.600 - 00:07:50.972, Speaker B: So you earn a lot of points while giving bits into the, into the protocol. But what I'm trying to say is basically if you can build your protocol oracle less then you probably should because it's always like another point of attack or another potential point of manipulation for your protocol. But currently, if you want to maintain capital efficiency, it's almost impossible to build your protocol oraculous. That's why almost the whole Defi is relying on oracles now. Why does it matter so much for rollup as a service product? So with rollup as a service, the time to spin up your own chain went from like months or years, two weeks or days. And now if you create your new roll up and want to have defi there, you need to have an oracle now, what can you do? You can go to Chainlink and say, hey guys, yesterday I created a new roll up, would you mind deploying there? But they're probably like, hey, come on, let's circle back in a couple of years time whenever you grow or have any kind of resources whatsoever. I mean, don't get me wrong, we're truly thankful for what training did for the industry and we believe we wouldn't be here without them.
00:07:50.972 - 00:08:55.504, Speaker B: It's just that they are currently focused on a little bit different things, different products and different scope of what they're focusing on. And they simply don't care about these new ecosystems or new chains or new assets that are needed. And the question to the audience I have, you can just make a guess, how many chains does currently chain link support? 13. Current echo supports 13 chains to give you kind of like a benchmark. We for example, right now are present on like 40 plus pretty active chains and probably like 50, 60, counting like, you know, all the testnets whatsoever. And with current roll up as a service product, we estimate to be on a new chain probably every new week or every two weeks. Now, why isn't challenging on all these chains? So the key bottleneck is on chain data storage cost and monitoring infrastructure cost.
00:08:55.504 - 00:09:39.128, Speaker B: Now, what you need to do if you deploy on your chain in chaining model, you need to set up update conditions and count the cost of every single update for the asset. And now there are two key implementations of oracles and that's important. So I'll try to explain it as good as I can. There are push and pull oracles, so basically push. Oracle is currently most utilized model in Defi. It was introduced by Chainlink back in 2019, 2020. It's a model where you set up relier infrastructure, you set up update conditions, and based on these conditions, you constantly push the data on chain whenever the update conditions are met.
00:09:39.128 - 00:10:28.698, Speaker B: So for example, for ifusD you set up 0.5% deviation, 24 hours heartbeat, and every 0.5% deviation you push the price to the target chain. What's good and wrong about this model? So within push model, the gas is being paid either by the Oracle or by protocol that is consuming data, or by protocol that is like asset issuer and wants to have data feed created for themselves. So for example, we cooperate with iterfy, they want to have data feed for they restaked ETH. So they pay us for all the gas costs and all the setup and everything because they want to have more defi integrations in place. The other model is pool, or as we call it, on demand model is basically a model where data is being injected on chain only when needed.
00:10:28.698 - 00:11:10.844, Speaker B: What's different about it? The data is being stored in the middle layer. We like to call it like off chain decentralized stream of nodes, and it's being injected on chain by user transactions. So whenever user interacts with a protocol, he pays a little bit more in gas, for example, 510 percent more in gas. And it's his transaction that makes the price go on chain. So basically there is no gas cost recurring either on our end or on protocol consuming data end. And the data is not being constantly pushed on chain, it's being pushed on chain only when it's actually needed. Or like another example, user gets liquidated, it's liquidation bot that pushes the price on chain in this transaction.
00:11:10.844 - 00:11:56.890, Speaker B: So another difference, push model is not that scalable because you need to set up separate reliable infrastructure for every separate asset. And pool model is much more scalable in terms of chains and in terms of number of assets you can deploy. Now, how the standard push oracle works. So you got node operators aggregating data from data sources like coingecko taxes, like Binance, or dexs, like uniswap. And then they aggregate that data and push it to smart contracts on target chains. And then from there it's being created by Dappsmart contract. We really like to refer to the push model as to like.
00:11:56.890 - 00:12:34.950, Speaker B: And as you can see, it's not scalable in terms of chains and assets. I really like to refer to push model as an email. So email was one of the first options to communicate and it's here to stay. We still use email and for some use cases is working very well. But currently you got tons of other communications like Telegram, Instagram, Facebook, whatever you use, which are different and are getting more in popularity. And we do think the pull model will be getting more and more popular in the coming months. So with pool model, the flow goes that way.
00:12:34.950 - 00:13:08.834, Speaker B: The beginning is similar. So like data provider nodes aggregate data from different data sources, but then the side data packages go to the middle layer. I already mentioned in our example, we call it data distribution layer. For example, for PIF, it's Piffnet, which is like a Solana fork where they own 100% of supply. So it's super cheap to push the data on there. And then the data from the middle layer is being injected on chain by user transaction. So for example, for pith they do it through brick breach to the targeted chain through wormhole.
00:13:08.834 - 00:14:29.924, Speaker B: For us, it's usually either liquidator that is pushing the price from the middle layer into the targeted chain, or we piggyback user transaction. So whenever user interacts with the protocol, we push the price on chain from the middle layer into his transaction call data. So for example, he deposits into the vault or he withdraws or whatever he does, the data is being injected on chain at that moment. And you can go to showroom Redstone finance to see tons of different chain integrations we've done with that model. Now, why does it matter so much for rollups and how you should choose your oracles for your new ecosystems? So key, I would say considerations are waiting time. So how long does it take for an oracle to deploy on your ecosystem? And here it's clear, pull model is a winner, where you can deploy usually day one mainnet and be like very fast on your chain cost of the Oracle. So in push model, the cost is way higher because not only you need to pay gas, which can be not that high on l two s, but you also need to maintain reliable infrastructure, which is additional developer costs like time costs and then types of applications that you want to bring.
00:14:29.924 - 00:15:05.834, Speaker B: Because being transparent almost whole DeFi is used to consuming data in the push model. That's usually especially true for blue chips. So for example, protocols like Morph or Venus pandle, they all use us in the push model. That's because they are used to training on all other assets on all other chains. And whenever they deploy to new one, they don't really want to change their code just to consume our price feature just to be a little bit more gas efficient. They want to use the already outdated smart contracts and have a plug and play solution. So it also depends on types of applications you want to have within your ecosystem.
00:15:05.834 - 00:15:39.734, Speaker B: Now, a couple of case studies about roll up as a service. So Manta Pacific, it's a roll up that was spin up using polygon, Zika EVM stack and and Caldera. And they did incredible job, especially at the beginning with the incentive program where they attracted almost two billions of liquidity. And during Manta Pacific craze almost all protocols switched our price feeds. They currently do have some problems because the incentives ended and the liquidity is flying out to other ecosystems. So it was not that sticky. But still, I think they will manage.
00:15:39.734 - 00:16:36.418, Speaker B: It's a great use case of roll up as a service. Another example, we all know dyno l one s like maybe you still remember Lisk back from another bull market. It's a chain that currently lacks narrative and doesn't really have end users. So what they could do is basically utilize their resources and Lisk is gonna for example, go with Gelato and Opstack and that's their own l two just to attract more users and get some traction. Another example is silo going to Zkvm stack or Kanto switching to l two on Zkivm. Now, what are key parameters to keep in mind when choosing oracle provider for your new ecosystem? So customizability. So can you decide which data providers exactly you want to trust and which data sources you want to utilize for a particular price feed redundancy.
00:16:36.418 - 00:17:15.651, Speaker B: So what has to fail for the oracle to go down? And if you like, use any external solution, for example, bridge to push the price on chain. How reliable is that? Breach l one, l two, rust compatibility. So is it compatible with your roll up? And is like the security between different chains, fully shared number and types of data feeds available. So how easy it is to add a new price feed. But also like if you integrate with particular chain, are all your price feeds available on that chain? And that's the case with us, for example. So whenever we integrate with a new roll up, all our price feeds are available there in the pool model on chain and off chain price sources. That's interesting.
00:17:15.651 - 00:18:06.808, Speaker B: So can I have, for example, data feed for LST or LRT? And now the thing is, these are very on chain native assets. They have tons of liquidity, but all this liquidity is on chain in uniswap, sushiswap, like Dexs, different dexs curve, for example. And now can the oracle provider properly aggregate that data from these on chain sources and also from the on chain sources from different ecosystems and different editors? Another thing to keep in mind is price aggregation methodology. So is it robust against, for example, wash trading? And now a lot of providers choose to utilize like aggregate data based on volume, which is not the best solution. We believe it's much better to aggregate the data, especially for onshore native assets based on liquidity. So you check how much liquidity there is in particular. Pull.
00:18:06.808 - 00:19:07.886, Speaker B: Of course, you add proper slippage, checks in place and you monitor that liquidity because the wash trading and the volume based aggregation is much more prone to manipulation, historical mispricing and manipulation. So has the oracle failed in the past? And how do you have any kind of guarantee if the oracle provides the wrong data? How much does it cost for the oracle to deploy? And fundamentals like governance, economics and audits, and probably like 100 other different topics you should keep in mind when choosing the oracle provider. Now to wrap it up, I wanted to show you guys e four, so a little, because we're in Warsaw, we are like very involved in organizing this one. It's happening every September. It's like a small, very dev focused conference. So if you were looking for a good excuse to visit Warsaw, I invite you all the second to the 9 September this year. You can come and join.
00:19:07.886 - 00:19:16.754, Speaker B: It's going to be very interesting and that's pretty much it. If you have any questions, feel free to shoot me here or I'll be around athenian for the whole day.
00:19:22.844 - 00:19:34.684, Speaker A: Thank you, Philip. We do have time for like a question, if anybody has one. And if not, then we'll wrap. Oh wait, no, there's one, there's one.
00:19:34.804 - 00:19:35.824, Speaker B: Still thinking.
00:19:39.324 - 00:19:47.000, Speaker C: So how do you see ideal Oracle in 2024? 2024?
00:19:47.172 - 00:20:36.650, Speaker B: Yeah, today I think the question should be how the data should be consumed in either way by protocols, because I think the IDA Oracle almost exists. I would say we are pretty good. But the thing is, protocols are not used to consume data in the pool model. So the best solution would probably be to do your protocol as Oracle agnostic as possible and also being able to consume data in all of the ways I think synthetix did it in the newest implementations. So now they can consume push model oracle, but they can also consume pull model oracle. So whenever they want to add new assets, they can basically choose, hey, all right, this is push model. For this price feed and for this concrete asset, we don't have any push oracle, so we can consume pull model.
00:20:36.650 - 00:20:48.964, Speaker B: Right. So then it's like much more versatile both in terms of assets available, but also in terms of providers that you can utilize. So I think that's the ideal model going forward.
00:20:49.304 - 00:20:58.404, Speaker C: So does it mean that you're okay with the fact that protocol can use several oracle providers or you're even maybe up to it?
00:20:58.864 - 00:21:27.414, Speaker B: Yeah, for sure. I mean, there is more and more protocols using main Oracle and then also fallbacks, which is probably a good idea because Oracle can always get manipulated. We didn't have any kind of manipulation, but almost every oracle provider at least had one incident or a couple of incidents. If you have checks in place and different solutions and fallbacks, then you're usually at least a little bit more safer on that front. So it's always better to have more.
00:21:28.794 - 00:21:44.134, Speaker C: If I may add, oracles are maybe the main goal and target for bad actors. And if we visit ReKt anti leaderboard, top five positions, there would be like 30% Oracle project.
00:21:46.114 - 00:21:46.586, Speaker B: Sorry.
00:21:46.650 - 00:21:54.050, Speaker C: Like I'm saying that one of the biggest hacks in web3 would be associated with Oracles.
00:21:54.122 - 00:22:01.334, Speaker B: Yeah, yeah, for sure. This is like very manipulative aspect for DeFi. So, yeah.
00:22:02.194 - 00:22:14.294, Speaker D: So I have a question. Probably it's very basic, but the polar calls, it's probably more attractive to be vulnerable to mev or something.
00:22:18.154 - 00:22:22.946, Speaker B: I'm not sure. Like for mev researchers or mev bots.
00:22:23.010 - 00:22:26.202, Speaker D: Like arbitrage sandwich attack.
00:22:26.378 - 00:22:46.004, Speaker B: Yeah. There are oracles that focus on that, but we don't even like dive into that aspect. So our pool model is totally not, I would say, not optimized. I think API free is solely focused on Mev and that's the main focus for them right now. Thank you.
00:22:50.904 - 00:22:52.592, Speaker A: All right, thank you, Philip.
00:22:52.728 - 00:22:53.564, Speaker B: Thank you.
00:22:55.704 - 00:23:02.264, Speaker A: Oracle ecosystem expanding. We need that. We're going to break for a few minutes. We'll be back at 1030 with our next speaker.
