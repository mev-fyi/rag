00:00:00.800 - 00:01:08.376, Speaker A: Hi everyone, my name is Kirill. I work as an engineer and the head of protocol research at Bloxcloud. So today we wanted to talk about basically what people are using block explorers for, what people need block explorers for, and what's happening within the Ethereum ecosystem with all this dark forest of L2s, data availability, account abstractions and so on. So if you haven't heard about Block Scout before, Blog Scout is an open source platform for building EVM compatible block explorers for EVM compatible chains. So it's the most widely used block Explorer, open source block Explorer on the market. So yeah, let's start first with understanding why people as users, as an end users, actually need block Explorer and what they are using it for. So the main goal of an end users as we see it, is probably they want to get this simple, free and transparent access to the real time and historical data related to their own accounts, their own addresses, their own transactions as well.
00:01:08.376 - 00:02:35.824, Speaker A: They want to get access to this data in regards of everybody else. And so being able to monitor all these actions that are happening on chain, then the next big requirement is everything that's related to the visualization and interpretation of this raw blockchain data. So probably only advanced developers are able to deeply understand what's going on if they take a look at what's coming in and out of the JSON RPC or something like that. So part of the goal of the block explorer is to visualize this data into, interpret it in some way that's clearly and simply understandable by the users. And then the last point is somehow related to security. So for example, with the recent accident with the backdoor at the XE compression utils library, we have definitely seen, and now can understand how important it is for the security of the whole open source space that someone is actually paying attention to what's going on in this open source and open platforms and blockchains are very similar in this sort. So if nobody is kind of looking at what's happening in different smart contracts, nobody is monitoring them and nobody has access to simply view what stuff is going on in some particular smart contract, it really becomes a big problem in terms of security as well.
00:02:35.824 - 00:03:44.516, Speaker A: So as I said, the main challenge here is probably just to find a way how to convert from, how to convert and interpret something as raw and as complex as the results coming in and out of JSON RPC. So here for example, is the example of transaction received for some transaction only ethereum mainnet. So we need to find a way how to display this data in a way that's simple and easy to understand for ethereum users. So that was from the client perspective, from the user perspective. Now what's going on from the chains perspective? So what we've seen recently is this exploding growth of the number of networks and number of layer one, L2s that are launching every day. Basically, with all of this roll up as a service platforms, it's now as easy to launch your own roll up and it can be done as quickly as like in a few minutes, in a few hours, and it's not much difficult even if you are doing it on your own. So all of these roll up stacks today have a very good documentation and it's really easy to launch a rollup.
00:03:44.516 - 00:04:44.502, Speaker A: All of this is open source. And the problem here is that such an approach, such a velocity of launching new chains does not work well with any proprietary technology. So you won't be able to launch proprietary Explorer for the roll up you just launched in a few hours, just because it will take a lot of time, it will take a lot of money as well. Another approach might be building an in house explorer, which is also not something that most of the team can afford due to the time and cost restrictions. So here what we are trying to do is we are trying to build an open source alternative which is feature rich and can be used to quickly and easily launch the block explorers for your roll ups in a couple of minutes as well. So as of today, the blox cloud is the most widely used Explorer for the EVM networks. So it's completely open source, it's compatible with the EVM on layer one and most of the L2 s.
00:04:44.502 - 00:05:33.266, Speaker A: It has a lot of different modules to account for these customizations on different chains. They can be turned off and on the different platforms. So it's also kind of a plug and play approach here. So yeah, it's easy to install and launch. It can be done for free, it can be done with us as a hosting service and a lot of different roll up as a service or similar providers also provide some services in bundled packages or separately for hosting and Explorer for whatever chain you're using them for. So for the past couple of months in blog scout, we've been hardly working on adding enhanced support for different roll ups. We have looked into researching support on different app chains and the customizations required for them.
00:05:33.266 - 00:06:35.854, Speaker A: We have taken a look at research and support, different views for data availability, account abstraction, some nice enhancements for the life of the developers in regards to contract verification. So that's what we're going to talk a little bit further down the line. So let's start with the first with the customizations for the L2s and layer threes and layer fours and whatever. So right now we have these four major families of roll ups that everyone is basically using. So that's a nice thing that although we have these hundreds and thousands different roll ups, only a few families have been actively used. So far we've completed the full support for the op stack and the Polygon CDK, and the support for the remaining major two players such as ZK sync Stack and the Arbitrum nitro, which powers the arbitrum chains and the orbit chains that are launched on top of arbitrum. So this support is coming fairly soon as well.
00:06:35.854 - 00:07:53.524, Speaker A: So the support for the L2, layer three roll up on our block explorer means typically that we have some custom views and indexers for the displaying the deposits and withdrawals that are happening on the native bridge. It has also something to do with the indexing of the transaction batches, and that's something that typically the chain developers use to monitor the health of the entire network so that all the batches have been submitted in time. The bloxcout is also able to track the status of those batches, how they are submitted on layer one when they are verified, in case it's ZK roll up and then they are. So the bloxcout is also tracking the status of these batches at different stages. And yeah, the last thing is just it also requires some sort of maintenance to keeping up with all these l two spec changes. Just to give you an example, in the recent couple of months, optimism already underwent a couple of major hard works, one of them related to some internal optimizations and then the second one related with the migration to the EAP for 844. And the next one will enable fault proofs which also affects how the things are working under the hood.
00:07:53.524 - 00:09:20.682, Speaker A: So another interesting idea we have about blog explorers is that we believe that blog explorers should not only be a read only platform, but it also should be an interactive explorer and an interactive platform for different types of users. So we have this nice interface for interacting with the smart contracts. Basically you can interact, read and write to the smart contracts if their source code is verified, if it was verified on some other network and we were able to match the bytecode or extract the ABI methods by some other means, then we also built this dub marketplace inside bloxcode. So it also helps a lot on the especially low level chains there that people can use Bloxcard as a way to discover different apps that are available on this particular network. And it's not only about discovering these dapps, but most of the dapps can be actually used in the same tab. So the people don't need to open any website so they can launch the Dapp directly within the bloxcode and it will be opened within the iframe and the wallet will pass through and automatically connect to the same wallet you've used to connect to the bloxcout. So another thing that's related to the L2 indexing is the support for different data availability solutions.
00:09:20.682 - 00:10:28.858, Speaker A: So here with the blog scout, we are trying to build some synergy in a way how block scouts for different layers are organized so that it kind of resembles this hierarchical nature of the roll ups themselves. So we don't have an explorer for data availability solution which are launched below the Ethereum mainnet, but then we do have an explorer for the Ethereum mainnet. And then in this explorer we also index the data availability from the Ethereum consensus layer and display these blobs. And then for all the block scouts that are built on top of Ethereum Mainnet or some other layer ones, they're using the underlying level, including block Scout, and they have the ability to index all of this data, batches, transaction batches and so on. So just a nice example for how we index the blobs from the Mainnet. So with the recent den Kunharf work, we've also added this support for the blobs view. So you can for any blob transaction, see and access this blob data forever, which is also stored in the blox code.
00:10:28.858 - 00:11:22.798, Speaker A: And then we went an additional extra mile within interpreting this data as well. So if we are able to detect that the data submitted within the blob is not just some arbitrary binary data, but it's an image or a text, we also will try to decode it. So that's just some fun stuff to do. And yeah, as it turned out, submitting actually some image or meaningful information within the blob is not just as easy as putting this binary data within the blob content. So because there are some restrictions on this content. So in fact each block is required to be a number of very large numbers below a certain limit. So if you want to submit an arbitrary image, let's say within the block, some bit level and byte level manipulations are required.
00:11:22.798 - 00:12:12.740, Speaker A: So you need to split the file in different chunks, left part them with necessary amount of zeros and then group them back and reassemble as blobs. And only then you will be able to submit them as a valid blobs on chain. Yeah. Then the next big topic within the blobscout is the support for the account abstraction. So the goal of the, and the general narrative of this account abstraction within the Ethereum is that all the ecosystem participants are trying to simplify and reduce the complexity for the end users. They are trying to reduce the complexity of managing their own seed phrases, managing private keys, managing the complexities of gas prices, transaction resents and so on. But this all works very well.
00:12:12.740 - 00:13:41.104, Speaker A: But when you try to access the account abstraction operation or transaction where your operation was included into within the general, the traditional block explorers, you are not able to understand basically anything because, well, the complexity for the end user is decreased. At the same time it's increased on the lower level within all of the spatches. And so if you open the transaction as is in the blog Explorer, you won't be able to understand very much of it. So in blogscout we also attempted to create this view for the meta transactions, which are user operations submitted as part of the ERC model four or 357. And as of now the Bloxcoutstack also provides this standalone opt in account obstruction indexer, which can be launched for any chain that does use this ERC standard. And so yeah, the way it works is that it's a separate service that's responsible for indexing all of the events and the stuff that's going on with the official entry point contracts on all of these chains and then the blocks, cloud API and the rest of the stacks built on top of it. Yeah, just to give you an example about this increase in complexity within this particular ERC, typically one of the most required thing you want to understand about your operation is just what contract has been called and what method was called.
00:13:41.104 - 00:14:45.756, Speaker A: So this information generally helps you understand if some tokens were transferred, if you deposited to some protocol and stuff like that. So for that in regular transaction, it's enough just to decode the top layer of the transaction and you will directly see what contract was called and what method, and already you will be able to reason about it somehow. But then when you are performing some kind of operation within the user operation, according to the CRC, it's actually deeply hidden on like three levels, three layers deep. And so if you need to decode this call data and to actually understand what's going on, you need to manually go through these three levels. And so it would be nice if the blog explorers would be able to do it using the predictable ABI selectors, which are the same for most of the user iteration as of today. And so yeah, that's just an example how the user iteration can be displayed within blox cloud. So it looks fairly similar to the general transaction like used, so you don't see any complexity within these bundles.
00:14:45.756 - 00:15:35.772, Speaker A: Although this user operation is probably part of the bigger bundle, it was submitted by a different party. You've still been able to access and see all of the fields that were directly decoded from this user operation. And then we also displayed the token transfers and roll logs, just relevant for this particular operation. You don't get any information that is irrelevant to your particular action. And then the last thing I want to talk about and mention is the efforts we are trying to apply in the field of simplifying the life of smart contract developers. So a big problem within the smart contract developers world is this pain of verifying different contracts on different chains. So it's always been a problem.
00:15:35.772 - 00:17:06.194, Speaker A: And so for a long time in Bloxcloud, we had this feature called Bloxcard by CodedB, which basically allowed verified contracts to be shared across different instances instantly across different blockchains. So if you ever deployed your contract, let's say 100 chains and the bytecode is exactly the same, then you will only be required to verify it once and then it will propagate instantly to the rest of the chains as the bytecodes are the same. So this source code database will be shared. And so as a continuation of this feature that was only present in Bloxcoud, we with some other partners representing different block explorers, individual researchers and others, came up with this verifier line solution, which is an ecosystem collective that's trying to build this open database that different parties are able to write and read at the same time, so that contracts can be submitted, verified as simply as possible, and then be immediately available within different blog explorers connected to this database. So more info on the Verifier alliance is coming this year on the upcoming conferences as well. So yeah, stay tuned and connect with the verifier alliance in the chats if you wanted to as well. Yeah, I think that was pretty much it.
00:17:06.194 - 00:17:18.358, Speaker A: Please get in touch with our team if you are planning to launch your own roll up or have some ideas about what can be improved in Bloxcode, what new views might be added, or what features are you missing?
00:17:18.526 - 00:17:25.474, Speaker B: Yeah, thank you very much. That was very insightful. So we have a few minutes for questions.
00:17:31.534 - 00:17:48.492, Speaker C: Yeah, thanks for the presentation. So I'm not sure, is the transient data, is it possible to reflect and display it somehow in the block explorer? And if you guys perhaps addressing that already.
00:17:48.548 - 00:17:49.820, Speaker A: What do you mean transient data?
00:17:49.932 - 00:17:55.344, Speaker C: Yeah, yeah, the one in the latest update, the Denkun from the previous talk.
00:17:56.084 - 00:17:57.788, Speaker A: Yeah, this transient storage.
00:17:57.956 - 00:17:59.904, Speaker C: Yeah, that transient storage. I'm sorry?
00:18:03.004 - 00:18:37.194, Speaker A: Yeah, I think it maybe makes sense to add the views at the same time for the regular storage and the transient storage. So there is no many difference between like how the infrastructure can index those. So basically for any storage updates I think the raw traces include accesses and reads and writes to both types of storages. So as long as we'll have some view for the general storage changes. Yeah, it should be no big problem to add the transient one as well.
00:18:43.914 - 00:19:07.766, Speaker D: Hello. Great presentation, thank you. If I understand correctly, so the main difference between your solution and for example etherscan which is also like blockchain Explorer, you can also explore on different chains like on Polygon and also optimism, am I correct?
00:19:07.950 - 00:19:58.634, Speaker A: Yeah. So the main difference is that Bloxcloud is open source and the user scan is not. So for any chain you are able yourself without asking any permission, without paying to anyone, just go download the latest docker image for Bloxcard, go through quick start guide and launch within a couple of hours, the Explorer, you'll just need to subsidize the infrastructure request for yourself to run in the database, the API and so on. Yeah, so you don't have to ask for any permission or pay anyone at some point. Of course people from the larger chain, they just don't want to host it themselves. And so in this case they probably are going to ask to ask if they can host the Explorer for them, our infrastructure for some fee and manage all the updates, all the customizations and so on.
00:19:59.974 - 00:20:08.834, Speaker D: Does your project have new different feature like in comparison with Etherscan? Some additional functionality?
00:20:10.574 - 00:20:50.784, Speaker A: Yes, I think the biggest, probably additional functionality is the support for the user operation for the account abstraction standards. So that's something that's not present in any other general purpose blockchain explorer. So there are some explorers just for account obstruction, but this information is not present in general purpose explorers. So that's the biggest feature. We have some others on specific chains that these chains are not supported by either scan because people don't want to pay as much as userscan asks. So we have some customizations depending on the particular chain as well, I think. Yeah.
00:20:50.824 - 00:20:51.644, Speaker D: Thank you.
00:20:55.704 - 00:21:06.824, Speaker B: Thank you very much. We still have a couple of minutes. Is there any other question from the audience? If not, then Kirill, thank you very much.
