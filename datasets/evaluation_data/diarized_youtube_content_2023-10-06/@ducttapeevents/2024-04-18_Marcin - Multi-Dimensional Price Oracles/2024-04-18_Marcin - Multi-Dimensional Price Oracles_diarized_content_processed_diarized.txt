00:00:00.160 - 00:00:32.128, Speaker A: So thanks a lot for staying longer. I think. I believe it's the last presentation of today, so I will try to make it a bit more interactive with some of you that will be still alive to answer some of my questions. So maybe first one, who knows what's a Murphy's law? Raise your hand. Ok, not that many. So it's a law that when something can go wrong, it will fucking go wrong. And the reason I'm bringing it up today in my personal staff, I was jogging a couple of things and they like fell down.
00:00:32.128 - 00:01:06.796, Speaker A: So I'm stressed a little bit, but I tried to make sure you get some value from this presentation. So my name is Marcin, I'm co founder of Redstone Oracles and also co founder of eforeso. And as I was telling you about Murphy's law, that's also one of the reasons the topic of the presentation is going to be different. It's going to be roll up as a service. And Oracles, how do they interact instead of multidimensional pricing? But I hope you will still get value out of it. A few words about Redstone. We have been around since early 2021.
00:01:06.796 - 00:02:12.814, Speaker A: Raised $8 million to date from various notable venture capital firms like Lemniscap, Blockchain Capital, Compass Ventures, Stani Kulechov, Sandeep, Alex Bucholsky many reputable people believed in our vision of disrupting oracle space. Besides Oracles, we also really like research, like wrapping our heads truly around the topic that we are advocating for and then delivering products about. So we've delivered already, I think five really comprehensive reports. The one about LSDFi, I think was the most successful one with coindesk indices. It got I think like 400,000 or 500,000 views and a lot of positive feedback. We also did one about LRT's and some other topics like stablecoins and RWA. And we are a team of 15 people, energetic, very dedicated, always with a cup of coffee, working 12 hours a day in a not busy day, of course, making sure that we can deliver what developers need in the space.
00:02:12.814 - 00:02:57.094, Speaker A: So first things first, who believes that knows what an oracle is? Blockchain oracle like end to end? Please raise your hand. Okay, sweet. That's actually more than expected, but let me still bring it down. So oracles deliver data to Dapps for smart contracts execution, right? Well, if you dig into that, currently it's mainly market data. So volume, interest rates, market cap and so on. And if you take even step further, it turns out that actually over 95% are price feeds of assets. And within these assets are mainly crypto assets like bitcoin, Ethereum and so on and so forth.
00:02:57.094 - 00:03:38.364, Speaker A: So now a question, and maybe someone will try to shout if I can ask, what is the most utilized price feed today from oracles? The first one. So if USD iFUSD, it's not so easy to estimate, but it's probably between 70% to even 95% of queries of the price feed is ethusd. So this is the king of all the price feeds. The reason is because Defi is built on what Ethereum, and a lot of defi is also on l two s and l two s also depend on ethereum heavily. Right now we have bitcoin, l two s. So of course this can be skewed towards the other one. But as of today, Ethusd is the king.
00:03:38.364 - 00:04:29.139, Speaker A: What are the use cases of oracles? So oracles will have wide use cases in the web3 ecosystem, but now it's mainly defi, as you might be probably understanding that. So we have lending markets where you lock collateral and borrow assets against that CDP stablecoins, which are actually very similar in that sense. But you always, almost always borrow a stable coin, for example, liquite the team, I think. I believe they originated from Switzerland. So it should be pretty known over here. Leverage protocols where you can leverage, for example, LRT points or Athena points or whatever points there are in 2024. Derivative protocols where you can play a small hedge fund manager or casino player on your couch, like trying to long short bitcoin, ethereum and so on.
00:04:29.139 - 00:05:19.560, Speaker A: Yield protocols when you leave your assets and then believe that the automated strategies and the operators of vaults are going to make the best of a job. And various algorithmic stable coins that also rely on on oracles. Another one, can you come up with two defi protocol types that doesn't need oracles? So, any guesses? Randomness? Randomness, yeah, it's like one of the products that usually oracle offer Dexs in general. So uniswap, sushiswap and so on. Sometimes I'm getting asked, hey, why uniswap isn't using Redstone or chainlink or any other oracle. Actually, we are pulling data from Uniswap, usually as oracles. And another one can be oracle less protocols.
00:05:19.560 - 00:06:34.134, Speaker A: So some protocols are strictly designed to create lending without oracles, like blur, for example, for nfts or angia is a popular oracle less landing protocol. But there are always some trade offs. If you decide not to use an oracle, it doesn't matter for roll up as a service providers. And in general, if you want to have a defi on your roll up, when you create a new roll up, you need an oracle, unless you want just to have these deXs, oracle less protocols. And maybe now let me take a step back and explain what a roll up as a service is in 2023, late early 2024, it turned out that creating a new roll up on top of Ethereum is thoroughly cheap. So you can standardize that procedure using popular stacks like Opstack, arbitrum stack, ZK stack, Polygon, CDK, and so on and so forth, and create roll ups on demand with new clients. So actually, some of the, let's say, older layer ones decided, for example, to switch to l two s as a better go to market strategy because they had some other advantages than necessarily being NL1 and so on, so forth.
00:06:34.134 - 00:07:30.864, Speaker A: So when you need an oracle for your roll up, you take your phone, you dial chainlink, and you tell them, hey, can you deploy in a week? And then it turns out that it's not necessarily so easy because Chainlink is a huge organization. Naturally, they have to also justify cost with the revenue because the, I think there are like 500 or maybe even 600 people right now at Chainlink. So it's not so easy for them to keep up with the demand. And now, don't get me wrong, I always try to emphasize that in my opinion, Chainlink has done tremendous job in helping to bootstrap Defi over the years. But probably if you have a category like oracles, it shouldn't be monopolized and it shouldn't be just one provider to serve all of the needs that are out there on the market. So, bottom line, Chainlink is really good for the industry. And in my opinion, they do a really good job, but you need more diversity, and also, they cannot serve all the needs that are present over there.
00:07:30.864 - 00:07:52.584, Speaker A: How many chains does Chainlink support? Actually, they created this fantastic website. I think it's data dot link dot something. If you type data chainlink, you're going to get it in Google. And there you can check all the feeds on all the chains that they're supporting. Right now it's roughly 14. Don't quote me on that. But it's this kind of a direction.
00:07:52.584 - 00:08:52.525, Speaker A: And as you know, with all l one s, l two s, and roll up as a service, we probably have, like, I don't know, at least 50 viable chains and probably 300 promising and so on and so forth. So the ecosystem is pretty large. And another question would be, do you know any other defi vertical that has been monopolized that much. So some people claim that steal dexs with Uniswap, but actually there is right now more diversity also with new Dexs and new chains, because Uniswap also doesn't go to each and every one or maybe wallets with metamask. But actually then you think, okay, on Solana there are some other wallets, and then you have these new l two s that also sometimes offer their own native wallet. So why isn't chaining on all of the chains? Like what is blocking them for going and being truly at every single ecosystem? So the key bottleneck is on chain data storage, cost and monitoring infrastructure. So with each consecutive chain, you have to have higher maintenance cost for being over there.
00:08:52.525 - 00:09:30.520, Speaker A: The key consideration that they take into mind into account is update condition and cost of one update. So how many times you have to update prices on chain? And what's the cost of one update? Right, because then you can calculate the cost way more efficiently. So there are right now the two key implementations of oracles on the market. One is push oracle, which is the chainlink style. And there's also pull oracles that for example we as Redstone offer, but also it's offered by PiF. And Chainlink also has right now data streams on arbitrum. But we see probably pretty distinct two categories with push and pull.
00:09:30.520 - 00:10:10.564, Speaker A: Who has ever heard of push and pull oracles? Raise your hand, help me. Okay, three people, maybe four. So now let me compare the two. So there are many verticals upon which you could compare them, but let's focus on the four most important ones, in my opinion. So in push oracle, you create a service that shoots data on chain in intervals, and this interval is defined by time. So I don't know, every 62nd, every 24 hours and deviation threshold. So you had one update, for example, it was $1 and you have a deviation threshold of 1%.
00:10:10.564 - 00:10:43.176, Speaker A: So it keeps on changing the information that the value of an asset is $1. And when the value of the dollar crosses, for example, $0.99 or $1.11.01, then the update goes again. So you kind of accept the inaccuracy of 99.99,999 cent on the pool, or we tend to call them on demand oracles. You have the user interaction that is defining the update on chain.
00:10:43.176 - 00:11:18.904, Speaker A: So you don't create a condition that is outside of usage, you create a condition that is upon usage. So when there is a transaction that actually requires the data feed on chain, then you update it and you can do it in various ways. For example with Redstone we utilize cold data to pass signed data packages. Pif is using wormhole as a bridging solution. I think data streams from Chainlink is using their CCIP or maybe automation, I'm not sure it's closed source, so you cannot dig into that that much. Then you have gas coverage. Who covers the gas on Ethereum is a really big consideration.
00:11:18.904 - 00:11:48.970, Speaker A: So on push model you have the oracle to eat the gas or the protocol that is utilizing to subsidize part of the gas of updates on chain. In the pool model you usually have the user. So the user, instead of paying for example $0.50 on the transaction, he's paying let's say 50, $0.01 or $1. So there is a margin on top of the cost of the transaction to pay for the gas. So that it's kind of like hidden from the user.
00:11:48.970 - 00:12:34.560, Speaker A: He just signs and accepts the transaction, it's extracted away. That part of this cost that he's paying is actually updating the oracle, but in his interest because he wants to interact with a protocol to update it on chain and get the most accurate price hit, or actually protocol can subsidize that. So you can also redistribute it that the protocol is paying. So it depends whether the protocol wants to cover that incentivize users to use protocol, or wants to leave it to the users themselves, how much scalable a model is. So push is fairly non scalable. The reason is for each asset. Let's take if USD at each single chain, you have to push it without any correlation.
00:12:34.560 - 00:13:10.236, Speaker A: So if on ethereum you pushed it, then you have to push it on arbitrum, then you have to push it to optimism, and then you have to push it to any other chain you want to updated that you can have various deviation thresholds. So on ethereum it can be 24 hours on optimism, it can be 1 hour. So you don't even update them at the same time usually. And you have to cover the cost of all of these updates. However, in the pool oracle, you usually keep data off chain as long as possible. So without touching the on chain storage and gas, and then only when it's truly needed, then it's delivered onto the destination chain. So if a user is interacting with arbitrum, then you deliver to arbitrum.
00:13:10.236 - 00:13:39.144, Speaker A: If it's interacting with Ethereum, then you deliver to Ethereum and so on. So you try to minimize the gas waste within this flow. So it's definitely more scalable. Especially with new chains popping up so quickly and then the number of feeds that you can deliver. So you remember a key consideration which was update condition and cost of one update. So actually here I should add also like number of assets you're updating. Because then if you update only two assets, let's say bitcoin and Eve, fine, it's not that many.
00:13:39.144 - 00:14:22.044, Speaker A: But if you want to update, let's say 100 assets, then you have to cover the cost of all of them if you update them on chain. So on push model, you usually have a very limited set of assets that are available in Oracle because of these costs. However, in the pull on demand model, you usually have way more versatile assets. So in hundreds or even thousands, because keeping data off chain is actually not that expensive. Still has a cost, but it's, let's say marginal in comparison to the push model. So how does the flow of standard push oracle look like? You have data sources from which node operators are pulling data and creating the price sheet of an asset. Let's say if USD, then usually it's aggregated somewhere.
00:14:22.044 - 00:14:57.546, Speaker A: So I don't want to go into this is super simplified. Like please don't quote me on that. It's just to give you a sense, because on chainlink I know there is also this dawn, this decentralized oracle network where they do the signatures, randomness and so on. So it's a bit more complicated. But in simple forms, the node operators pull the data from sources, then agree on it like there's some sort of aggregation and then shoots it on the destination chain. Let's say it's ethereum or arbitrum. And then a smart contract of, for example aave is hitting the smart contract of chainlink to query the price.
00:14:57.546 - 00:15:35.234, Speaker A: So let's say the delivery goes to on chain and the protocol itself wants to just see what's updated on chain doesn't care about, let's say the off chain word as long as it works. So it's not necessarily scalable across many chains and number of feeds. In our view, the push model can be compared to email. Do you use email every day? You do. Is it the most efficient way of communicating? It's questionable. Is it better than 30 years ago? It is. So in our view, pushmodel is here to stay and it's going to be like a backbone of defi like for years to come.
00:15:35.234 - 00:16:20.500, Speaker A: However, you also need to innovate and create other types of flows to serve the needs of builders to go through the limitations that are with this push model. So if you want to create truly a new financial system on top of Defi and blockchain rails. We need to innovate, we need to do something better. So therefore, there is this pull on demand Oracle where let's say the first part looks literally the same, like roughly the same, that the nodes are aggregating data. But then the aggregation happens in a sort of a middle layer. In our case, it's data distribution layer. It's like an off chain gossip network where signed data packages are streamed.
00:16:20.500 - 00:17:15.794, Speaker A: We use a couple of services over there, like our own gateways, but also streamer network gossip notes and so on. For PIF, for example, they forked Solana, it's pifnet. So they aggregate this data on their chain that they govern. And then once this aggregation is done, you somehow have to push that data on chain when it's needed. Right, as I was telling you. So when there's a user interaction, for example with piff, it's the wormhole bridge that is delivering the data feed to the destination chain towards which a user is interacting with, so that the Dapp can actually utilize that. A liquidator, for example, can just, if a specific oracle, let's say Redstone, is supported by a DAp and our price packages, signed price packages, can be used, a liquidator would just fetch data off chain and then liquidate the position if it's allowed, if it hits the liquidation threshold.
00:17:15.794 - 00:18:05.492, Speaker A: Or in our case, in general, we piggyback user transactions because in our logic, our logic is like this, transactions from users have to go because they want to interact with protocols. It's the protocols and users that want the data. So probably you should create an update condition that is strictly attached with the transaction itself. So in every transaction on ethereum, on EVM, even so, ethereum and all l two s that are EVM compatible, you have this construct of cold data. So whenever a user is sending a transaction from one address to the other, you can pass some payload. Usually these are like arguments for functions. So here it's for example, two and Charlie, but you can encode over their assigned data package.
00:18:05.492 - 00:18:59.504, Speaker A: And this is what our engineering team has done a tremendous job optimizing because they also created a low level code for making a very efficient gas operation so that the storage is not touched too much. So, bottom line for user, this gas margin that he's paying for using this feed with their cold data is truly marginal. It's like almost invisible, usually on the networks. And cold data actually is a very interesting topic with l two s, like also like passing that over there right now there was Duncan. Duncan, yeah. With blobs being fully honest, I'm so snowed under with all the topics that we are working on that I didn't follow the exact gas, let's say decrease with l two s with blobs. But I've heard it's pretty tremendous as well.
00:18:59.504 - 00:19:52.280, Speaker A: Okay. And then finishing going back to rollabys and service and oracles, remember that there are a couple of verticals upon which you have to compare them. And then when you're a roll up and you roll up and you want to have an oracle, you have to compare them also on the wait time. So how long does it take for a new oracle, for an oracle to deploy on a new chain? What's the cost of that integration? So if you pay, I don't know, $10,000, $10,0000 nothing. And types of applications you want to bring, because if you want to bring forks of other compound and let's say the OG protocol, they require the push model and they probably will not change that code because it's well audited and solid. So over there you just need the push oracle. And also one consideration that people usually forget about is, hey, I have my native token.
00:19:52.280 - 00:20:48.898, Speaker A: So probably I would like the oracle to create a price feed for my native token, right? If I'm telegram open network, I would like to have an oracle for token. If I'm arbitrary, I would like to have an oracle for Arp and so on and so forth. So a good question to ask is, hey, this oracle can create a price feed for my token if we go forward with them because it depends on the sources from which they are pulling. Some of the case studies we have rolled up as a service. So for example, Manta Pacific, that in the past months accrued quite a lot of ice and tvs. It's built with Caldera as a roll up, as a service provider on top of, I think right now, still opstack, but they want to transition to Polygon, CDK. Another one with Gelado, which is, I think Swiss team as well is lisk, that is OGl one that decided to become an L two because it turned out that SNl one, they don't have that much competitive advantage.
00:20:48.898 - 00:21:37.484, Speaker A: They have other strengths. So it's just better for them to align with Ethereum. Celo is in the process of transitioning to an l two and right now I really recommend to type into Google Sello forum and read the posts of all the l two s comparing each other to attract sello to choose their stack. So arbitrum, optimism, Zksync, Polygon, all of them wrote really in detailed posts to convince sello to pick that. And it's a bit of a beauty contest. So if you ever wondered, hey, how can I compare these tags between each other? I recommend to go to the Selim forum because it's a fantastic source of information. Right now, Canto is another one that is switching to polygon CDK, who knows what that logo is? Say it.
00:21:37.484 - 00:21:51.554, Speaker A: Eos. Eos. Right? Someone remembers them. I'm not sure if they are going to switch to l two, but maybe I believe they still have a lot of cache. So maybe a resurrection of eos is going to be as an l two. We don't know. Right.
00:21:51.554 - 00:22:32.294, Speaker A: It just shows that there is this opportunity to go that path. Parallel is another example. I know I'm running out of time, so you can take, if you're interested, this is recorded so you can stop on that slide later. But basically I also created a couple of verticals upon which you should compare oracles. So I don't have time to go through all of them, but you can then check the presentation online as it's recorded and stop on that part. And also I will prepare an oracle comparison in some time, like Redstone, Chainlink, Pif and others. Naturally I'm maybe not the most objective person, but I will do my best.
00:22:32.294 - 00:23:11.154, Speaker A: I mean like come on, you can try and then get pretty interesting feedback on Twitter, right? With some marines from one or the other project to finish. I'm also organizing if Warsaw, which is a conference in Hackathon in Warsaw, Poland. Oh, old date this year. It's going to be last week of August. So you're all very welcome to join us over there and thank you very much for staying so long. Thank you. One question anyone, before we wrap up the day.
00:23:11.154 - 00:23:57.714, Speaker A: Hello. Hello. There was a question. What are the other oracle use cases? We'll see. Hard to say right now, like gambling can be one and prediction markets and so on, but it's not me to say what people should build with my product. What is your practical recommendation? How to reconcile between various oracles. So you have like data feeds from various oracles and how to reconcile between different results? I wouldn't say it's an easy question and there is no straightforward answer right now.
00:23:57.714 - 00:25:20.734, Speaker A: Like, there is no one aggregator of oracles. That gives you a pretty objective answer. I'm being asked pretty often. I would say the best is to ask protocols that they're using because they usually do pretty deep due diligence on the oracle they are choosing so with each project like Venus pandal morpho that they are using Redstone approximately one month was the due diligence with them before they decided to use us so they already have a pretty good understanding so it's best to ask the clients directly but there is no like let's say very good aggregator of oracle information yet and the reason is because it's not that easy to create a simple table comparison as I tried to do over here because then always someone is hard one way or the other will you have a continuation of your galaxy campaign and will you have any other campaign with points whether we as Redstone will have points right we have points go to Redstone finance and click expedition there is Redstone expedition and you can earn points already isn't it too late for that? No, it's season one started last week. Okay thank you. Okay thank you so much. Thanks a lot guys.
