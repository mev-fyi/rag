00:00:00.800 - 00:00:48.352, Speaker A: Hello. Yes, so I'm indeed from Argent. My goal today will be to explain you and maybe even convince you of the reasons why at Argent, you have decided to primarily build on Stacknet, and this with a very particular focus and angle, which is account abstraction. So very shortly. So I'm the ecosystem leader Argent. I have a business background and I have a very strong conviction, which is that blockchain technologies today won't be able to reach mass adoption because the UX is too bad. And, you know, you cannot just push a technology from a very small group of early adopters that we all are, to mass adoption.
00:00:48.352 - 00:01:29.340, Speaker A: If you have bad ux, that simply doesn't work. Luckily, I also have another strong conviction, which is that this can actually change, so we can improve ux, but it also requires us to, as an industry, make some very bold and big moves. So I think it's important to understand a little bit the history of Argent, to understand where we want to go. So Argent is actually already quite a pretty old crypto company. It was founded in 2017, and back in 2018, we released our first products. As you can see there, it was a mobile wallets. And I think it was probably the best Ethereum wallet back then, thanks to account abstraction.
00:01:29.340 - 00:02:00.630, Speaker A: So together with safe back then, we were the only ones to do account abstraction. And the experience was just very good. So, you know, the app was very sleek. Argent would sponsor transaction fees, users would not have seed phrases, so they can actually sleep at night, because we came up with this new concept of guardians and social recovery. So it was a very good product. Argent today in 2024, is the best stocknet wallet. So we are the biggest wallet on Stocknet.
00:02:00.630 - 00:02:49.036, Speaker A: We have 75% of market share, and we actually have multiple products on stocknets. And so this legacy product that we have on Ethereum, we still maintain it, but 100% of new development innovation is now done on stack, stagnant. And then if we look a little bit forward, let's say argent in 2030, the idea there, the vision is to become revolut, but without the bank, right? So to have this kind of super app where you can do anything, you know, pay for your groceries, exchange value, invest in crypto, invest in stocks, book a flight, book a Airbnb, this kind of stuff. And we want to do this, and we are doing this. We are building this based on Stacknet. We use Stacknet as our backbone. And I think it's important to understand why we want to get there using Stacknet.
00:02:49.036 - 00:03:31.530, Speaker A: It's important to understand what actually happened between 2018 and 2024, in terms of account abstraction, innovation. So most of the problems we have today with UX in blockchain and on Ethereum, because we talk about Ethereum today, mainly actually comes from the onset of Ethereum. So at the time it was deemed that we would actually have two different types of accounts on Ethereum. On the one hand, externally owned accounts, also called eoas, I called them basically dumb accounts. They cannot do anything. They cannot do shit. The only thing they can do is actually originate a transaction, initiate a transaction.
00:03:31.530 - 00:04:00.174, Speaker A: And we said, okay, well, these dumb accounts, they will actually be used by users. And then there is this other category of accounts, contract accounts. These are smart accounts. These are smart contracts that can execute codes. And you can actually add a layer of intelligence to these accounts so they can do all kinds of nice stuff. And we said, these accounts, they will be used by protocols. And the only trick there is that these accounts, because they are used by protocols, they cannot initiate a transaction.
00:04:00.174 - 00:04:48.074, Speaker A: So they need an eoa, they need an externally owned account to first initiate a transaction before they can do anything. And so from the very beginning, users have been stuck with these bad UX eoas. Consequence of that is that users are turning to centralized solutions. Instead of using these bad UX eoas, which are not nice to use, they turn to much nicer to use solutions. Why? Because, well, centralized solutions, they offer familiar web to UX. So you have easy onboarding, easy recovery when you lose access, no seed phrase, you can sleep at night, risk detection, and two fa, everything done in one click. You don't need to erc approve everything or even do some kind of stupid infinite approvals.
00:04:48.074 - 00:05:41.954, Speaker A: And so at Argent, we believe that eoas actually are a danger to self custody because they impose that trade off between self custody and user convenience. And if we want this industry to move from this small ecosystem that we have today, to move forward, we need to have this good user experience and user convenience. So the question is, can we offer the best of web two UX in web3? Or can we offer the best of web two UX while also preserving self custody? And the answer is yes, let's use contract accounts for users. They are smart. You can, you know, build all kinds of logics on top of them to improve those UX issues that we have. But remember, from one of the first slides, the issue, the big issue there is that contract accounts, they cannot initiate a transaction. So it's difficult for them to be actually owned by users.
00:05:41.954 - 00:06:31.062, Speaker A: And so some smart people, they came together and said, well, let's emulate transaction origination from a contract account. And that is actually what smart accounts used to look like back in 2018. So on ethereum back then, you would have two different types of accounts, eoas and smart accounts. If you use an eOa, well, you initiate a transaction, it goes to the mempool, it's being picked up by a node and then sent to the blockchain for execution. If you use a smart account, well, actually, remember, with smart account, you cannot initiate a transaction. So instead of initiating a transaction, what you would do is send a message to something that was called a relayer, which is essentially an EOA. And that relayer would put that message into a transaction.
00:06:31.062 - 00:07:07.406, Speaker A: It's an EOA, so it can initiate a transaction, and it would send the transaction to the mempool, where then it's been picked up by the node and then sent to the blockchain. And, you know, it's pretty good. It worked pretty well. At Argent, we used to have our own relayer, but we are in crypto and blockchain, and we have this fundamentals, ideas that we love, such as immutability and decentralization. And the issue with that model is that it's not very decentralized, right? Because the relayer is actually centralized, point of failure. The relayer is operated by a company. So at Argent, we had our own relayer.
00:07:07.406 - 00:08:05.404, Speaker A: And then what happens if the relayer goes down? What happens if the company goes down or disappears for some reason? How do I then use my smart account? Right? People did not really like that. It's not a perfect solution, but it used to work. Then some other smart people came together, and then they said, well, let's then decentralize every layer, and we will call this ERC 4337, which you have probably heard a lot about in the last year. And so, yeah, that was smart accounts in 2018, and this is now smart accounts on Ethereum, ERC 4337. And so while you see, you still have these two different types of accounts, eoas and smart accounts, if you use an eoa, while your transaction just still follows the same flow, now, if you use a smart account, it's a bit different, because that relayer has been decentralized. So we have introduced the concept of bundler. So the bundler basically does the same as the relayer, but anyone could theoretically run a bundler.
00:08:05.404 - 00:08:58.854, Speaker A: So if a bundler goes down, there is another one that is run by someone else that will take over, right? And so now your smart account still cannot initiate a transaction, but it will send. It's not a message anymore. It's what is called a user operation to a mempool. And there in that mempool, the vendors will come pick up many user operations, bundle them together into a bundle transaction, and push it to the normal mempool where it's picked by the nodes. But there is a trick, because the user operations of many different users are all bundled together in a transaction before reaching the blockchain for execution. That bundled transaction actually needs to go first through a smart contract, which is called an entry point contract, where it's going to be unbundled. Basically all the user operations are unbundled and then sent to the blockchain.
00:08:58.854 - 00:09:53.254, Speaker A: But of course still not perfect because in this model, where does the account abstraction capability happens in two places. First place is the smart account. So you have many smart account capabilities that are managed by smart account. I'm thinking about, I don't know, social recovery typically, but then also in the entry point contract because that's where user operations are unbundled. And so typically if you want to run AP master, for those who don't know, AP Master enables Dapps to sponsor transactions for the users, or users to pay gas fees with whatever token they would have in their account. So it's a way to abstract gas fees and gas cost. If you want to run a paymaster, a paymaster needs to interact with the entry point contract.
00:09:53.254 - 00:10:42.618, Speaker A: We can think of other use cases, session keys, this kind of stuff. They will need to interact with the entry point contract and so on. Ethereum with ERC 4337 on the slide there, it appears very clearly that if you use an eOa, at no point you will have smart account or account abstraction capabilities, right? Your transaction flow won't go through the entry point contract. So typically with ERC 4337, if you use an eOa, you cannot benefit from paymasters as an example. And actually this is a problem because from a Dapp perspective now I'm building a decentralized application. I now need to actually identify whether my users are on eoas or on smart accounts. That is pretty easy to do.
00:10:42.618 - 00:11:17.164, Speaker A: If they are using smart eos, then I will just offer them the normal flows that everybody knows with normal UX, which I think is pretty bad. But if they are on smart accounts, then it opens many possibilities. I can completely rebuild the experience. I can bring all these account abstraction capabilities to users, and that means I probably need two different uis. I also probably need two different contracts. Actually, I'm building two different products. One product that is tailored for eoas and one product that is tailored for smart accounts.
00:11:17.164 - 00:12:05.434, Speaker A: And the issue is that dapps don't do that. They don't do it because they have no short term incentive to do it today. Still, 99% of users, even more 99% of users are still using eoas, so they have no incentive to do everything, you know, build everything twice and build these very nice, sleek experiences for smart accounts if all their user base is still on EOS. And it's a chicken and egg problem, because users have no incentive to switch to migrate from EOS to smart accounts because actually the experience today is not better on a smart account. And actually it bears the cost to migrate from EOS to smart account. Typically you need to give up on your transaction history, which we all know we don't like to do. And so yeah, we are kind of stuck in this chicken and egg problem.
00:12:05.434 - 00:12:53.404, Speaker A: So yeah, why would I build two user flows if 99% of my users are using eOas? And so, you know, some other people came up with this idea. Well, actually what we need is to integrate smart account natively at protocol level. So we will do this on a ZK roll up for scalability. We all know that l one is too expensive and we will integrate account abstraction natively at protocol level. So basically what it means is that now smart accounts, because I'm building a new layer too, I can decide the rules from day one, smart accounts can actually initiate a transaction. So they have now this power and we have now a single mem pool and transaction flow. So smart accounts are finally first class citizens.
00:12:53.404 - 00:13:35.894, Speaker A: That is what Zksync era did. So if you use zksync era already. So basically this is what it looks like. So you have living together on Zksync era, eoas and smart accounts, and you have a nice transaction flow. And you might notice that actually when initiating a transaction from an eOa, the transaction flow actually goes through the entry point contract, which is called a bootloader on zksync. And so you can use a paymaster with an eoa on zksync, which I think is pretty interesting. So you have some account abstraction capabilities on zksync era, but still you miss a lot of them when you use an eoa because you don't use a smart account.
00:13:35.894 - 00:14:10.330, Speaker A: So all the capabilities that are dependent on the account social recovery, which is a very nice one, you cannot do them. Yeah, but still it's not enough. Still we have that issue that daps on the K sync era. And believe me, I have tried to push them to do so. Many of them, most of them, they don't build these account abstraction specific experiences. Why? Because still most of their users are using eoas. Because most of these Dapps Dksync era is an EVM compatible chain.
00:14:10.330 - 00:14:49.002, Speaker A: So most of these dapps actually come from other chains, right? Just integrate Dksync as another blockchain, another network. And on all these other chains there is no native account attraction. So they don't bother just creating a new very nice experience for the Dksync era users, while they actually have so many users on other chains. And so we are still stuck with this issue on the casing era. And the message here basically is technical feasibility isn't enough. And I like to shield native account abstraction on Twitter. And two weeks ago, people have started to answer to me that actually native account abstraction has been happening on Solana for years already.
00:14:49.002 - 00:15:53.416, Speaker A: So they already have this system where they also have two types of accounts on Solana and one type is kind of a smart account and they can initiate transaction, but they have been stuck on Solana with basically what Zksync era is experiencing now and they've been there for years. It is still the problem that dapps don't build these specific experiences. Users are still using eoas. And just to give another example of what inertia looks like, if you want your Dapp to be compatible with smart accounts, you need to be compatible with and support something that is called EIP 1271, which has something to do with smart contract signatures. So typically, if you are not compatible with this EIP, that means that users that are using smart accounts, they can even connect to your Dapp. This was released in 2018, it's now 2024. We still have many prominent dapps on Ethereum that do not support EIP 1271.
00:15:53.416 - 00:16:38.024, Speaker A: There is actually an interesting website called EIP 1271 IO with a list of all these prominent apps that you cannot use if you are using a smart account, because they are not compatible. So just to give you an idea of how inertia can actually make things last for a long time. And so, yeah, coming back to this, basically at argent, we think that account abstraction, ERC 4037 account abstraction is not going to happen before a long time. Because of that inertia problem, people don't migrate to smart accounts and you have no specific experience for smart accounts. Maybe on Zksync era it's going to happen. It's kind of middle ground. It's going to happen a bit faster but still, it's going to take a long time.
00:16:38.024 - 00:17:03.760, Speaker A: And that's why we decided to focus on Stacknet. And Stacknet did something very bold that just said, well, the problem we have here is actually eoas. They provide a bad experience. Why do we keep eoas? And they just got rid of eoas. So this is what the transaction flow looks like. On Stacknet, you just have smart accounts. That means that 100% of users on stack nets are on smart accounts.
00:17:03.760 - 00:18:00.882, Speaker A: That means that Dapps can now really focus on bringing new kinds of experiences to users and maybe to new users as well, because users have no choice anymore. So yeah, actually on Stagnet, Stagnet is still a pretty young network, but account abstraction is already a reality. So I just put there a few examples of stuff we have implemented with Argent. So argent Shield, that is two fa. So you can use a second factor to add a second factor to your account. If your seed phrase leaks for some reason, the attacker won't be able to move your funds without having access to that second factor, which I think from a security perspective is a very nice feature transaction review. So your wallet will tell you if you interact with a website that is a bit shady or that we don't know, or if you interact with a smart contract that does something a bit weird.
00:18:00.882 - 00:18:35.170, Speaker A: Typically when doing a swap, sending the tokens to another address, the third one, I really like it. So on Stacknet, all transactions are multicols, so you don't do ERC 20 approvals anymore. Right, this thing where you need to approve your tokens. And first you had infinite approval and now you can actually put there a number, but actually you put very high numbers because you don't want to do this every time. This is all done in one call. In one transaction. On Stacknet we approve exactly the amount of tokens that you need to swap and then the approval is removed once it's done.
00:18:35.170 - 00:19:11.566, Speaker A: So the dapp never has access to all your tokens. And then last example is an email and password signing, which I think is also great to reach new audiences. So yeah, basically I like to say that Starklet is a blue ocean in the l two copycats landscape. Every two weeks you have a new EVM compatible l two that is launching where there is basically no innovation anymore. All the Dapps, all the protocols on these l two s, they are just copycats of what is happening somewhere else. Innovation has been completely killed. And Stacknet did, I think these two very bold moves.
00:19:11.566 - 00:19:41.984, Speaker A: So they have a new programming language which is optimized for ZK proving and heavy computation and that also opens new use cases and there is this native account abstraction but without EOS. That's what I call I call 100% native account abstraction. So that's going to be it for today. So I hope I convinced you of a few things. The first one is that blockchain ux is very bad so we need to change it. Second thing is that it's possible to change it. We need account attraction.
00:19:41.984 - 00:20:13.354, Speaker A: And third thing is that account attraction won't happen before a long time because of this inertia on most EVM compatible chains while it is already happening on Stacknet. And that's why as a smart account wallet we have decided to use Stagnet as a backbone because we want to provide users and also new users with better capabilities. Thank you. I won't take questions now but I will be around so don't hesitate. I would be very happy to discuss. Thank you. Thank you so much Antoine.
