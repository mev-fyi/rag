00:00:17.040 - 00:00:52.764, Speaker A: Yep. Hello. Welcome to the talk about ZK privacy, and we'll see what it means and how it can happen in reality. So, hi, I'm Laurie Peltren. I'm a freelancer doing ZK EVM stuff, going across various ZK ecosystems and poking them, seeing what happens, trying various things. And currently I'm mostly writing, developing various stuff. And when I have some time, I also like to teach some ZK.
00:00:52.764 - 00:01:47.442, Speaker A: So I have some lectures sometimes. So what are we going to talk about here? Yes, I said hi. And then a short intro how we could maybe gain some ZK adoption, or how to gain adoption in general to any technology. And this is universal, so this is not so much about this part. But then what is privacy? What can we do about it? Some small intro there, and then I will showcase this small ZK privacy project I was working on. So I think the steps, if you want to, if there's some new technology or something cool that people are building, if you want people start adopting it, I think there's quite many steps that need to happen. Like first someone has to invent that stuff.
00:01:47.442 - 00:02:22.190, Speaker A: So someone does the research and publishes papers, and then maybe at some point someone will pick it up, but then people will start. At some point people will start realizing, okay, so this kind of new thing, what can we do or do with it? So someone, yeah, we can use it for this, and we can use it for this. And then people come up with some use cases. So that's about the second step that usually happens. And then I think what should happen next is people just try out stuff. There's this new language or whatever it is, like new technology. Let's try it.
00:02:22.190 - 00:03:01.828, Speaker A: Let's see what I can build with it, what might be possible, and probably what is not possible. You will try that stuff also. But I think that's an important step forward any of this adoption. Then of course, you need a tooling. Maybe you need whatever tooling you need in your id or coding or deployment stuff and whatever. There's lots of this kind of infrastructure that has to happen before we get it into adoption. So at some point, when all the kind of pieces are there, maybe someone will start some new real project and maybe get some even funding for it.
00:03:01.828 - 00:03:34.138, Speaker A: And then at some point the infrastructure is there and we can start building on top of it, and we can maybe even like software as a service or whatever, roll up as a service. We can build on top of all the existing stuff. And that's the point where it's kind of easy to start building on top of that stuff already. But these are like long steps, and ZK is somewhere around the two or three. So I'll be mostly talking about. Well, that looks fun. Well, mostly I will be talking about the steps two and three.
00:03:34.138 - 00:04:17.734, Speaker A: Here, what are the. Or I'm demonstrating the steps two and three. So some use case and then hacking some weird stuff. But first, short, what is privacy? Why do we need it? Like, there's the regular user when we have some whatever sensitive information we have, like our health information, our age or our passport data, whatever. So that's the private data you don't want to give to anyone. But what happens nowadays, you give some of it, like, you sign into Facebook and sell your soul. So you send some of your sensitive data out, but there's no better alternative currently.
00:04:17.734 - 00:04:51.664, Speaker A: And then some nasty people get your data. So this is basically how it happens nowadays. But then we want to eliminate the part where we actually send the secret data out. So what we want to accomplish that, of course we still have sensitive information. Like, we still have all the data that we don't want anyone to get, but we want to eliminate the step where we actually send the sensitive data. So we could actually use ZK for that. So how could we do this? Some options.
00:04:51.664 - 00:05:20.714, Speaker A: Of course we can do it at the legislation level. We can make some laws that, okay, this privacy has to be better. You can use whatever means you want to, but this has to happen. That's one way to go. Or just slap them harder. Like, oh, you stole some data, you go to jail. Well, that doesn't usually help too much, but I think the kind of innocence easiest and the most sensible way is to just don't send the data.
00:05:20.714 - 00:06:19.706, Speaker A: There's nothing to steal if you don't send your private data. So I made this small project to kind of demonstrate, like, how we could accomplish this kind of thing that we just don't want to send our data. So the possible approach is how we could, how we could do this. Like, this is the current, when you go to whatever website and they want to check your age, how old are you? Like, this is what happens nowadays. They just ask you, are you over 18? And you click, yes, and this kind of works. Or you could maybe send your whole passport to the website, at least like the next phase, like, but you don't want to send your passport to a random website either. Or then you, maybe there's a KYC provider where you send your passport, but also when they get all your data, and then maybe they get breached.
00:06:19.706 - 00:07:17.644, Speaker A: And how does the interaction happen between a website and a KYC provider? Do they have some API where they connect? And this is also complicated. So here's basically the best way we can go about it, which is generate the ZK proof for the data we want to expose. So if there's a website that asks you, are you over 18? What we want to expose? We want to only expose information that yes, I am over 18, but nothing else. They don't need to know where you were born or like what's your name, but they only need the information that yes, this person is above 18, for example. And then when you have this kind of ZK proof, then you can send it to whatever websites you want. So yeah, this is the current situation and this is something we want to get rid of. I think we have all seen this and we just click yes.
00:07:17.644 - 00:07:54.024, Speaker A: I don't remember. It was Samars. My wife gave it. So what can we do to fix this? There's a website that requires this check, and then I have this mocked KYC provider and then I generate the GKproof based on this data. And let's see how it works actually. So at the top there's some ZK magic happening. In the middle there's me with my private data.
00:07:54.024 - 00:09:10.414, Speaker A: I say I send my, there's a KYC provider that's like you have to have some sort of KYC provider for like real world kind of connection. So in real world I'm over 18 and I have to bring that to on chain, for example, to these websites. But you don't want the KYC provider and the website, you don't want to force them to talk to each other. So I'm the only one who needs to talk to the KYC provider. So the website asks for my age and I send my, I do kind of regular KYC verification at the provider and they send me a signed message which basically says, yes, this user is above 18, but because this message is signed by their own private key, the KYC provider's own private key, nobody else can fake this message anymore. But then I send this signed message to Zkmagic Box and the magic box verifies the signature, okay, because we know the public key for the KYC provider and the magic box verifies, okay, this is a valid message and it generates a ZK proof for that. And then it sends me back the Zkproof.
00:09:10.414 - 00:09:51.664, Speaker A: And then I have the ZK proof. I can send this to the website and the website then can again query this zkmagic box that is this a valid proof and it says yes or no. So I built this beautiful UI project. It's live, so it's just, it's asking you to verify your age and you click yes. So I will show how it works. What happens then it asks, inner box here is the KYC provider. It kind of opens in an iframe.
00:09:51.664 - 00:10:40.896, Speaker A: So it asks you like okay, please send me your passport or whatever it asks. So here it's just mocked data. I'm sending it like a text file which includes my number, my age, and that's it. I'm not 89, but I'm faking that a bit. So I submit this document to the KYC provider we can think of like this should be your passport, and the KYC provider then generates the proof with the zkmagic and this takes a while and then I get the proof back. So now I have the proof. I can submit the same proof to any website or any service that wants to know that I'm over 18.
00:10:40.896 - 00:11:33.724, Speaker A: So I can use the same proof anywhere I want to. There's probably like timestamps and stuff like this that is maybe valid for a day or something. And then I get to this awesome restricted website. Yes, I was about 18. That proof verifies and then everything is great. Yay. So what I kind of wanted to accomplish with this project is just take some existing stuff that is there, combine them, see how I can use ZK to kind of retain this kind of privacy, what is possible, and just to get people to like maybe inspire, like okay, there's this kind of example template project.
00:11:33.724 - 00:12:04.384, Speaker A: Now you can see that it actually works. Maybe you have some, of course you can make it a lot better, but you have better ideas like how to continue from here so you can maybe write your own project. Ok, I didn't know this is possible. Now I know it's possible. So you have the next better idea again. And of course there's code that can be copied by anyone. Yeah, it's live, you can check it, there's not too much to check, but just input any file with your age and see what happens.
00:12:04.384 - 00:12:13.464, Speaker A: And that's the presentation. And we have some time for questions I think. Please take the mic.
00:12:17.444 - 00:12:29.906, Speaker B: Hi, thanks for the presentation. I have to admit I still don't fully understand ZK technology. And my question is that if the ZK provider knows who is asking for.
00:12:29.930 - 00:13:02.114, Speaker A: The proof, no, they don't have the ZK magic box, they don't have to know anything, they just have to have the public key for the signature. So the KYC provider signs with their private key the message, and then the ZK magic box has the public key, so it verifies the message inside the, inside the program, and then it generates the proof for that. So they don't care who sent it. They just care that this public key verifies this message. They don't have to know the connection.
00:13:06.854 - 00:13:23.024, Speaker C: I have a question. How does this, like the demo, what does, what kind of ZK technology does exactly use? Like does it have some kind of formula or just verifies, like the message is signed with a public key or how exactly is the demo working?
00:13:24.244 - 00:13:51.576, Speaker A: Yeah, so there are many ways how you can do ZK nowadays. There are great languages for it, great libraries, great virtual machines you can use. So this is Minas zero one JS library, which is, when you use it, it looks like typescript. Basically, when you write this kind of ZK prover program, it looks like almost normal typescript code. It takes input and it basically gives output the proof.
00:13:51.760 - 00:13:57.960, Speaker C: Yeah, but how is the proof generated? What is inside the ZK thing?
00:13:58.152 - 00:14:08.774, Speaker A: Yeah, that's a long question. Inside the ZK magic box, there's lots of mathematics, and that's really, really complicated when we get that to that part.
00:14:09.434 - 00:14:10.690, Speaker C: Okay, thank you.
00:14:10.842 - 00:14:14.174, Speaker A: But basically you can usually consider it as a magic box.
00:14:15.074 - 00:14:27.454, Speaker D: But Lauri, this box, it's proving a computation, right? And it's proving the computation that the data exists. Like, what is it? It's proving the computation that this person is over 89 on the private data, right?
00:14:28.674 - 00:14:44.098, Speaker A: Yeah, it's proving that this message originates from this one where I claim it originates from. So which checks the signature and then it checks, like, are you over 18? Basically. So these are the two things it proves.
00:14:44.266 - 00:14:51.362, Speaker D: But can I ask you something? If we're sending this data, this private data to the KYC, and the KYC is giving back proof.
00:14:51.458 - 00:14:56.754, Speaker A: No, the KYC provider sends a signed message. A signed message, like plain text message, basically.
00:14:56.834 - 00:15:04.190, Speaker D: Yeah. That's saying that this person is over 18. Yeah. So with the ZK part, the KYC provider is still there.
00:15:04.342 - 00:15:06.310, Speaker A: Yeah. We have to have it.
00:15:06.382 - 00:15:09.574, Speaker D: Yeah, but now we're generating a proof instead of a signature, right?
00:15:09.734 - 00:15:19.314, Speaker A: No, the signature is generated by the KYC provider. They signed. They can send the whole passport data back, for example. It depends what they send.
00:15:20.014 - 00:15:26.240, Speaker D: And what's the proof? Where does the proof come in? Sends back his signature.
00:15:26.422 - 00:15:49.644, Speaker A: Let's go back to that picture. Picture. Yeah, the KYC provider, they do basically whatever, what any KYC provider does, yet nowadays they just sign the data and send it back to you and then you can use this sign message to send it to the circuit, the prover.
00:15:49.764 - 00:16:03.062, Speaker D: Got it. So the ZK part happens locally, not in the KYC you generate. Okay, great. Got it. And it could be like I'm a resident of this country. It could be, yeah, it can be. Any data, any data that you want to reveal specifically.
00:16:03.078 - 00:16:05.754, Speaker A: Yes. Thank you. So you can choose.
00:16:07.534 - 00:16:39.804, Speaker E: Yeah. As I understand, what we put in ZK proof is answer from the KYC provider. But how the website know what we asked KYC providers? So for example, if we can, if it has API that I can ask just the age, or maybe I can ask am I over 25 years old or am I over 16? And how does website know what exactly I asked KYC provider? What query did I put to KYC provider?
00:16:40.184 - 00:17:22.963, Speaker A: In the simplest scenario, this is kind of like you can basically hard code everything that we are always asking. This one single thing that we are asking, are you over 18? And then you can of course make this more sophisticated. You can have it as a kind of input, like what are you asking and what actually do you want to prove? And maybe you can generate multiple proofs for the same signed message. So this proves that I'm over 18 and this proves that I'm from Canada, whatever. So it depends on the context, like what you want to approve. But the website is sending, because the website gets the proof, they send it to the ZK box for verification. Does this proof prove what you claim it does? And then the ZK Magic box says yes or no.
00:17:22.963 - 00:17:33.263, Speaker A: Any other questions? All right, Laurie, thanks so much for the talk. Much appreciated. Thanks.
