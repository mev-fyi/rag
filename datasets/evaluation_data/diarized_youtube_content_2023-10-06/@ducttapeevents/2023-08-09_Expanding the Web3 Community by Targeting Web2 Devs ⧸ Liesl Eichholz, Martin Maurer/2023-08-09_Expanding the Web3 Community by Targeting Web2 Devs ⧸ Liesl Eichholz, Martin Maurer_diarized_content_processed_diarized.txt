00:00:15.480 - 00:00:58.586, Speaker A: Good morning. A couple of people already awake. That's good. Last day usually is the hardest to get up in the morning, so I'm happy to see all of your faces. My talk today is about transitioning from web two to web three, where Chainsafe figured out that we need transition from web two folks to web three, and this can be a bit of a bumpy road sometimes. So, actually, my colleague Liesl was supposed to do this talk, but she couldn't make it to the event, so I volunteered. As you already know, I'm Martin.
00:00:58.586 - 00:01:37.428, Speaker A: I'm a technical project manager at Chainsafe Systems, and I've been with the company for a whopping four weeks now, so I'm pretty fresh to the company. But I brought a couple of colleagues with me, so in case there will be questions that I'm not able to answer. We have got you covered. Oh, yeah. I've been with the company for four weeks and I'm loving it. ChainSafe is actually one of the greatest places I've been working so far. Just so you know, I'm working in the consulting department and I'm mainly responsible for rust projects.
00:01:37.428 - 00:02:46.634, Speaker A: So I'm working with the Rust team all day, implementing projects for our customers. And what I would like to do today, first of all, get an understanding of what your stack looks like, what you work in, giving you a quick intro on getting started in web three development, how that feels, because this is exactly what I've been doing for the last couple of years myself. Then there's a point where you want to choose a path in web three. It's like there's different areas that you could work in, and it makes sense to pick one. And then I would like to present you a couple of the tools that we're providing as chainsafe, because we've got products, developer products, that might help you to make this transition easier. So, interactive part, who in this room would consider himself systems engineer? Nobody. So who in this room would consider himself a web two developer? Yeah, quite some.
00:02:46.634 - 00:03:41.670, Speaker A: Who would be a web three developer? Quite some. And who would not be a developer at all, but is interested in learning very well. Good. It does not have to feel like this, even though when you first start with web three, it sometimes does feel like this, because this is a very young technology still and it has got moving parts and they come in the most unexpected situations. So if it feels like this for you sometimes, this is not something out of the ordinary. Just keep going like our little friend here. That's actually important when I learned web three, I didn't have any knowledge that I would have to relearn because I didn't know how to code.
00:03:41.670 - 00:05:05.194, Speaker A: That's five years ago. And because web three does not have this highly abstracted frameworks yet that you would be used to from a web two context, I had to focus on more low level operations, and that really helped me wrapping my head around web three. So if you work with a framework all day long, something, just an example, like react, and you have got very specific knowledge about this, but you're lacking the idea of what a compiler does or how things work under the hood. It's always good to go back to the classroom for a week or two and just grind the basics. It will help you, it will tremendously help you to understand the concepts. Once you've done that, you can choose either you're more a front end person, so that would probably direct you in the path of a dapp developer, or you're more a backend person, then you might want to write smart contracts, or you're a systems level engineer and see a second nature to you. Then you would probably go and fiddle with the protocol stack directly.
00:05:05.194 - 00:05:50.314, Speaker A: Cryptography can't be evaded. So asymmetric encryption, hash functions and merkle trees signature verification, these are all things that you might have touched upon in your development work already, but it just worked and it was a necessity that you maybe just accepted. In web three, you have to sign everything. Everything is the transaction, and every transaction has to be signed. So wrapping your head around cryptography to a certain degree really, really helps. And it's not that hard. It's not as hard as it might look from the outside.
00:05:50.314 - 00:07:05.508, Speaker A: Then there comes this phase when you need to get used to foreign concepts that do not apply to any other stack. I will not play this, but just jump on something like consensus. If you have a network of nodes and they want to reach the new latest state of the entire network, and they're all distributed, you need a means of telling every single node what the current system state is. So something like consensus is a foreign concept that you don't have in other technologies you get used to. That same thing would apply for something like finality. So if a block exists, it cannot be regarded as data that you can directly use because you need to wait for a specific period of time depending on the network you're using, so you can actually rely on that data and be sure it will never be reverted. So these are things that you might know from 30, 40 years ago where computers were really slow and didn't do a lot of fancy things in blockchain.
00:07:05.508 - 00:07:44.022, Speaker A: Sometimes you feel like ported back in time a little bit. Still, these concepts, they come to you naturally after working with a technology for a while. So let's assume you did all this and you feel ready. This is the moment when you pick a path. So you could, if you're a frontend developer, you could stay in that domain. If you're a backend developer, you could stay in that domain. If you want to work on the protocol, you can stay in that domain.
00:07:44.022 - 00:09:45.234, Speaker A: It's just a matter of relating to what web two is and making sure that you ingested the tools that you would be using for that. And in general, these tools come when you go on GitHub and you find a library that kind of does what you want to achieve, they come in a pretty raw fashion. This is the thing that is for most developers I'm talking to, this is the biggest problem, that all of a sudden they can go through a documentation full of beautiful methods that they can just use and get all the heavy lifting done for them. But you really have to be prepared that you are in control as a programmer and you can really touch that machine at a lower level. So don't be scared, it's not a thing that will take you very long. Most people I met over the years when they wanted to transition and they put their mind to it, it took them maybe a month, if so, because the concepts that change will actually be your standard toolkit at one point. And to make this even a bit more accessible, chainsafe develops a couple of SDKs and libraries that are supposed to shield you from doing systems level engineering all day, because obviously you want to implement an application or something that is useful for a customer and not spend your entire development time on heavy lifting.
00:09:45.234 - 00:10:40.914, Speaker A: So what are these? One of our products would be web three js, let's say a JavaScript API. There are other ones, but web three js is pretty well known. It is being rewritten because Nazar here in the audience is a great fan of type safety, and therefore this is getting a bit of an upgrade. So we can make use of what typescript can give you in contrast to what JavaScript does. So this is a library you will run into, or an API that you will run into within the first ten minutes of Googling, I would say as a web developer. Then there's another product that is really brand new. That's the gaming SDK.
00:10:40.914 - 00:11:30.164, Speaker A: I forgot one group of developers. Is there a game developer in the room? No. Sort of, yeah. If you have been working with Unity 3D ever in your life, chainsafe managed to put a Ethereum toolkit into the asset store. And this is good for making your game blockchain based. And it really makes a lot of sense because you can now use nfts within your games, which totally changes the economics of how computer games work these days. It gives more power and more freedom of choice to the developer than ever before.
00:11:30.164 - 00:12:34.894, Speaker A: And it's one of the products that is constantly under heavy development. But you can already check it out. If you go to the asset store, you will find it there. Then there's chainsafe storage. So if you had the situation that you were touching ipfs or filecoin at one point, you might have experienced that this is a different kind of storage in contrast to something like s three bucket on Amazon. It feels complex and if you want to spend the time fiddling with ipfs, it can be learned. But to make this more fluent and without you having to worry about something as simple as storing a file on something, there's chainsaf storage that allows you to basically flip a switch from your s three bucket, and now you basically tell your application to use distributed storage.
00:12:34.894 - 00:13:23.880, Speaker A: And we can help you doing this more easily. Chain bridge. If you're ever in a situation where you want to swap a token from an ethereum based machine to another one, you will figure out that bridges can be really complex to work with. And there's even another trade off that you need to take into account, which is security. So what we saw is the code for it is being forked quite often, and teams keep working with the code in their specific ways. So this is custom bridges. All of them are doing the same thing, bridging from one EVM to another one and swapping tokens over.
00:13:23.880 - 00:14:58.806, Speaker A: But because everybody keeps going, this introduces a security concern that we are addressing right now, because there will be a chainbridge hub where there will be more unified interfaces for building bridges. And in case you want to get in touch with our project lead at Chainbridge, he asked me to tell everybody who is interested in running relayer node to just send him his way. So in case you have this, this use case where you want to bridge from one EvM to another one, come talk to us and there might be room for cooperation because this is not something that we want to do as chain safe ourselves, but we would like to invite the wider community to do this with us. Technically it's quite interesting topic, but you can find me later if you want to know the details about it, then there's BLS. Had a longer discussion with NASA about it yesterday. That's for BLS signature aggregation. If you haven't heard about BLS signatures and BLS signature aggregation, don't worry, we can see that it is picking up in how many people are actually using it.
00:14:58.806 - 00:15:54.876, Speaker A: So you will bump into this. What it does is it will actually make n signatures into a fixed length signature and therefore you can basically bundling them up because otherwise it can get quite messy. According to your business case. This is the products that I wanted to directly address, but there are many more at chainsafe. There are many more products that could help you either as a developer, as a web three developer, but as I said, game developers, for example, will find something as well that might make their lives easier. So feel free to check it out. And if you need more information about the specific products, we have product managers per product and they're, they're very open.
00:15:54.876 - 00:16:16.104, Speaker A: So if you want ask a question or get in touch, feel free to do so. It's not a problem at all. Okay, this is the actual presentation part. And now if you have got any questions, please feel free to ask.
00:16:23.364 - 00:16:25.984, Speaker B: Please raise your hand if you have any questions.
00:16:35.844 - 00:17:58.298, Speaker A: Hi, thanks for the great talk. I'm wondering, do you have any tips for UX designers? Is there like a big difference between web two and web three as far as design approach? Yes, there's one really ugly thing in UX design for web three, because you need to deal with addresses and addresses will ideally always end up in your clipboard because if you mess them up then your transactions will not work. And a lot of people, they just go copy and paste them and use them. And if you know about the dangers that come with it, you want to think about how to making sure that addresses in a blockchain network are used appropriately because it's something that does not apply somewhere else. Because usually you click and you go to some website and everything happens automatically. But in the case of a blockchain transaction, you need to always sign it and you need to always know the address of where this transaction is looking at. So this is one area, and the other area of ux that is a bit difficult is there are more steps involved.
00:17:58.298 - 00:18:47.054, Speaker A: And from what I know about UX design, you want to reduce the number of steps so that it's nice for the user and not a lot of room for errors. And reducing the number of steps usually requires you to understand really well what this transaction is supposed to do for example, the chain bridge example. You want to swap from one network to the other. This is not like clicking a button at the moment. This is depending on the networks, it can be between five and 20 steps to actually get token from one to the other network, and you cannot mess up a single one. So there is challenges, but I'm sure that you will come up with a smart solution there.
00:18:51.434 - 00:19:07.434, Speaker C: Yeah. Question about rust developers. How do. The language is young also, and very complicated. Talking about the protocol developers, how do you attract people from web two to web three to use rust? And who are they?
00:19:09.294 - 00:20:02.004, Speaker A: Rust. I would disagree with the fact that rust is complicated. Rust is complicated if you never programmed in your whole life. But my way to approaching Rust was I was doing c for a while and that was so ugly that Rust felt like heaven. So you can get into Rust, but you don't really need rust in the first instance if you're transitioning to web three, unless you want to work on the protocol level. But if you want to work on the protocol level, you will very likely be used to something like C C, low level languages that do the basic transformations of data and coming, like, what language are you coming from? Did you do some c or something like that?
00:20:06.384 - 00:20:16.152, Speaker C: My team use Rust and I deal with the situation you described, how track talented people from web two to be on the rust, and it's so hard to do.
00:20:16.288 - 00:20:46.980, Speaker A: Yeah, okay, now I get it. Yeah. Same problem. The team I'm working in, it is constantly being drained because everybody says, hey, Martin, you've got rust developers. We need them, and off they go. And attracting them is something that my colleague Francis could be telling you something about, because she does hr and has this problem all the time. What I do, I just ask people to dive into it and do it for a while and then train them.
00:20:47.172 - 00:20:58.864, Speaker C: I will ask differently. We would like our plan to find talented people and to grow with us. Do you have this experience in your team?
00:20:59.604 - 00:21:01.284, Speaker A: Yeah. Francis, please.
00:21:01.444 - 00:21:45.644, Speaker D: Thank you. Yes. So basically, I think one of the best ways is, like, find good developers that you can train. Like, actually we have got people with c c backgrounds or Haskell even. And then, like, if you can set up like a training academy or kind of a program and you can ramp them up, I think it's the best because, like, finding senior Ros developers, it's very, it's hard, it's very expensive, and usually if you get them, there's going to be another company that are going to take them away. So I think the best is if you can actually train people that love the language. And a lot of people want to get into rust, or even polyglots that have worked with other low level languages, and they want to get into rust.
00:21:45.644 - 00:22:02.774, Speaker D: It can be learned, and then they're going to be even more loyal to the company if you train them from the scratch and you can mold them better. So that's one of the things that we have tried and we have successful people that didn't know Rust and they're writing rust at the moment in our projects. So thank you.
00:22:06.074 - 00:22:26.984, Speaker A: There's one more question. It's a quick question. You mentioned that web three js is going to be ported to typescript that's in the, it's currently in the works. Can you share what the timeline is on that? Nazar, can you please answer that question?
00:22:28.724 - 00:23:01.110, Speaker E: Thank you. So I had a talk yesterday and I explained it in very detail. So the rewrite is complete. It's already complete. And right now we are working on the migration guide, so that once you're going to transition your projects, you know what things are breaking and what are the core snippets to replace. So as soon as we complete those transactions or migration guides, then hopefully in this month you will get the first alpha release with a complete typesafe web three js. But there are a lot more features as well.
00:23:01.110 - 00:23:35.002, Speaker E: So I suggest you can check our blogs. I will be writing there as soon, and there is a conference next week in Amsterdam and I'm talking there as well on the web three js. So I will be sharing more details there. Thank you and sorry. One more thing I want to add here. In the coming weeks, we are working internally on a developer's roadmap to the web three. It's a detailed developer's roadmap with the checklist from where you are transitioning and from where you want to go into web three.
00:23:35.002 - 00:23:57.464, Speaker E: So we will publish it to our website and one other portal which is very famous for the developers as well. So keep checking our blogs and you will find it soon, maybe in couple of weeks, and it will be the first, I will say, the more detailed roadmap for becoming a web three GIS developers. Thank you.
00:24:01.524 - 00:24:31.604, Speaker B: Thank you. Any more questions anybody? I would have just if you could elaborate. I didn't know about a bridge project and I guess it's supposed to be a trustless bridge with minimum trust assumptions. And you mentioned validators. So how does the bridge can achieve trustlessness? How the validators work. Just in some, you don't have to go too deeply, but also like what is the benefit of running the validator or what is the cost?
00:24:32.484 - 00:25:41.984, Speaker A: Yeah, there are two questions. What's the benefit and how does it work? So it works in a way that when you make a deposit on network a, the tokens that you want to swap, what happens then? It goes off chain, it goes to a network of relayers. And those relayers, what they actually do, they have parts of a joint key. So we take a private key apart and it's being distributed over all the validators nodes basically. And then they come up with a leader that is supposed to write that there's an action to the network b, where those token then are actually being given to the address that met the deposit in the first place. This is a at the moment, because it's in a conceptual stage, there is no defined incentive for running validator nodes. And I know that this is a question that needs to be addressed, but for now we are basically getting the technology right.
00:25:41.984 - 00:26:15.372, Speaker A: So we stop people from taking the old bridges and implementing them in different ways. So we get around the security problem we are seeing. And yeah, it's currently under development. I was asking for Docker before I came here because I wanted to play, but one of the core developers told me I need to wait another week, but it's coming. And please talk to Georgios at chain safe and he will tell you I think we're almost over time.
00:26:15.468 - 00:26:23.904, Speaker B: Yeah, yeah, we have to finish, so. Thank you so much Martin. I guess that's it. Thank you. The audience for pension. Thank you.
