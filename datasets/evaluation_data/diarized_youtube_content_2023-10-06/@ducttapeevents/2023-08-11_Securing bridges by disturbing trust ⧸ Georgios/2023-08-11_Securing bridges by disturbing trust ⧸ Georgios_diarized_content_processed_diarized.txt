00:00:12.560 - 00:00:49.626, Speaker A: All right. Do you hear me? Good. Yeah. So I want to talk to you about the concept of additive security for cross chain bridging and hash is a framework we're implementing that does exactly that. So, first of all, why do we need that? Essentially, bridge hacks have been quite a lot. Only in 2022, there are 2 billion, and out of the top five worst hacks ever happened. Four of them have affected bridges, and not a particular type of bridge, but many different kind of security mechanisms.
00:00:49.626 - 00:01:35.224, Speaker A: So for one thing, we can be sure that there is 100% secure bridge does not exist. All of them have trade offs. Before we go to the framework, there's some layer definitions, so we can split bridges in three layers, essentially. So there's a transfer layer. This can be an off chain component, such as a relayer, that transfers the state route of one chain to the other. Then there is the verification layer, which is the most important one and the toughest one, the one that we're going to focus on, which is ensuring that this stateroot that you brought from the remote chain is essentially correct. And then there is different types of verification, ZK lite clients, MPC, multisig and stuff.
00:01:35.224 - 00:02:12.968, Speaker A: And then there's of course, the execution layer, which is given a correct state route. Do something with it, right, send some tokens or perform any kind of computation in it. We're searching for the holy grail for the best and most secure breeds mechanism we've seen. There are three general categories. One is the fully trusted setup, multi state committee based and stuff. And there's the optimistic one, like Nomad, maybe you've heard of it, and the new type, the ZK lite client based one. But what we've seen, the root cause for hacks were not essentially related to the bridge mechanism.
00:02:12.968 - 00:03:08.960, Speaker A: They were more related to some human errors, compromised private keys, social engineering, or even smart contract bugs. So then we came up with the following idea, which is, if, you know, like, if you heard from the hardware times, we did an array of independent drives where you have two hard drives storing essentially the same things. And if one fails, you can. You have the second one or third one if it's a failover. And we thought to apply this mechanism on bridges, right? So we can have, you can have many types of security mechanisms, and if one fails, you can, you have redundancy on the others. So, yeah, what is Hashi now? And the additive security approach? The main goal here is to distribute trust for bridges on the mechanism level. So every breed so far has relied on one specific bridge mechanism, and we want to change that.
00:03:08.960 - 00:03:47.662, Speaker A: We don't want to rely on one specific security mechanism. We also want to standardize on the lowest level, which is the bridge, the block hash. And yeah, I was going to imagine this kind of mechanism prioritize security over latency and cost. So this is a lot slower, of course, and a lot more expensive. But in order to compromise such a mechanism, you need to hack multiple bridges in parallel at the same time. So here there is a clear trade of security over latency and cost. The main goal of this framework is diversification.
00:03:47.662 - 00:04:34.622, Speaker A: So you may have heard the Ethereum protocol, client diversification for the reasons that in case there's a zero day bug on one, you can have failover to other mechanisms. The same thing we want to do here, especially on the verification layer. So we want to implement different kind of ziki lite clients, different kind of mechanisms on the verification layer and of course on the execution layer as well, although it's not that crucial. And yeah, so, and this is just to give you a visual on how this actually looks like. So hash is like now, first version is already out. And the most important part is this shows essentially how a token bridge would work. So one side is Ethereum, the other side is another chain, gnosis chain in this case.
00:04:34.622 - 00:05:15.880, Speaker A: And the interesting part is you can see different kind of, the orange boxes are adapters, so different kind of bridges. Wormhole, maybe you've heard of it. AMB is a bridge implementation of the gnosis chain, different kind of adapters. So telepathy is Ziki Lite client by synclab, ZK breeds by another team. And essentially we are aggregating all of this into Hashi, and we have some governance module on top that will decide if this is secure or not. And yeah, then you can feel secure to release the tokens on the other side because you are secured essentially by four or five different bridges. And not that, just one.
00:05:15.880 - 00:05:24.864, Speaker A: And yeah, that was it. If you want to learn more, just reach out to me or check on gnosis website. Thank you very much.
