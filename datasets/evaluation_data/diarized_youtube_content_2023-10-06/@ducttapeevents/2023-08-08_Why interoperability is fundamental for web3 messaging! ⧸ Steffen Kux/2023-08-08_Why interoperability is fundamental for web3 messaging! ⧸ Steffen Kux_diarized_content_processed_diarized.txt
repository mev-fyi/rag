00:00:01.520 - 00:00:23.514, Speaker A: Yeah. Hello. Nice to be here. My name is Stefan Cooks. I'm from Corpus, a venture studio to produce web3 applications. And one of these applications, we have built it in the past, is dm three. And today I want to talk about why interoperability is essential for web3 messaging.
00:00:23.514 - 00:01:08.294, Speaker A: Before we start, I would like to have a question to you. How many messaging applications you have on your phone? Only one, two, five maybe. Your phone looks like this, mine looks like this. Not exactly, but almost. So what we have in messaging is there are a lot of messaging applications, and all these applications are their own closed ecosystem. And even if you go to the web3 space, where we have a lot of new small messaging solutions, also those solutions are mostly not connected. So it looks a little bit like this.
00:01:08.294 - 00:02:25.404, Speaker A: So we have decentralized services or even decentralized services, but what they cannot do is sending transactions or sending messages between these ecosystems. So now is the question, why do we need this interoperability? Is this really important or is it not? So when we look to some questions in the communities, a lot of people are asking for interoperability, even in the web two world. So especially in the web3 world, where we have sometimes much smaller ecosystems, it is important. So have a look. Why do we need this? So the first is we don't have a messenger application which fits all needs. So if you have one which has all functions which are possible, somebody cannot use it, or others are looking for special features, maybe for features which are especially for an ecosystem needed, maybe for a community of NFT users or for creativity community. So messaging solutions must be different.
00:02:25.404 - 00:03:27.504, Speaker A: And that's why it is important that we have also the ability to communicate between these ecosystems. So another point is when we look at the current situation in the web two, we have most of these very big companies controlling all the communications, and we need interoperability to not have these mighty companies to control all of this. So I already talked about diversity. I will go in more detail a little bit later. And also what I mentioned before is when we have special tuned applications for ecosystems, it makes the UX much better. One thing which is also not unimportant is the regulation. So in Europe at least, there are some regulations in the messaging space, and there will be the requirement in the future that messaging services need to be interoperable.
00:03:27.504 - 00:04:22.886, Speaker A: Interesting to see how this will happen. But we can start in web3 and can do it in a very interesting and very easy way. So when we talk about interoperability, there are different phases of interoperability. And I want to focus on this definition, because otherwise we might think of different things. So the phase one, and this is what we are focusing on, is that we are interoperable in exchanging messages. So that means if there are two services or two protocols, two applications, and they are interoperable, that means they can send messages from one service to another service. How they store the messages, what they do with it is in the responsibility of these ecosystems or of these applications, but they are interoperable by able to exchange messages.
00:04:22.886 - 00:05:23.814, Speaker A: So phase two would be that we can replicate messages between these interfaces so that the user can decide, I use app one and I can use also app two. And all the messages are shared in both applications. And the phase three would be okay, we have all resources shared so that we have only one ecosystem. When we look into the point, how complicated is this for the producers of these applications, then we see that phase one, that we only exchange messages, is the easiest approach. And this is the approach we think we must go in the first step, because if we are able to exchange messages, then we can have different ecosystems with different applications and different protocols. But we are able to have this possibility that we can exchange these messages around these different applications. I already talked about it.
00:05:23.814 - 00:06:22.584, Speaker A: Diversity is a good thing. So we learned it in web3. Diversity in clients was very important, because if one client is not working well, then maybe the other is. It makes ecosystem much more stable and from the messaging standpoint, so I mentioned it before, it makes it much better for the end users if we have a diversity in applications, because then we can focus on the community which is using these applications and then do all, or to bring all these features which are needed there. And in other ecosystem, maybe other functions are much more important. And that's why it is very important that we don't try to have only one messaging solution in the future. So how these big messaging providers are trying to do so, but that we have a lot of different applications which help people to select what they really need.
00:06:22.584 - 00:07:05.228, Speaker A: So let's now have a look into web3 messaging. And what do we mean with web free messaging? When we talk about web free messaging, we talk about messaging solutions, building on top of web3 technology. So first of all, encryption is common standard. We need encryption end to end encryption for every message, every information we send. Also signatures are very common. With signature we can prove where or who was the one who created a message, who is the owner of some information, and so on. Decentralization is also a very important topic.
00:07:05.228 - 00:08:02.154, Speaker A: I will go in more detail to this point. A little bit later and also interoperability, as I explained it now is something we really need in web3 messaging to build such a good ecosystem which helps the user to be self sovereign so that the user can decide what service is the best for me and what should I use to make my communication in the way I really like it to. The registry is a registry is also something which is very important. I don't know who of you used encryption in email, so like PGP, so I tried it. I did send my public key around with my emails and I hoped honestly to receive some encrypted messages. You can guess how many encrypted emails I received. Zero.
00:08:02.154 - 00:09:13.088, Speaker A: Nobody used it because it's really not easy in email to use encryption because you don't know where can I find the information from the other one to decrypt or to encrypt messages. So in web3 we have some technologies we don't have in web two, so we have decentralized applications, and decentralized applications allow us to have central registers. It sounds a little bit strange, but if I have a centralized solution, others have to agree or have to trust this. In web3 I can add decentralized application, completely trust us but central so that everyone can access us. And I will talk a little bit later how we at diem three implemented such a central but decentralized registry. So when we look at web3 messaging architectures, we see there are a lot of different ways to do it. The central approach, even if this is not really web3, is done by some of the applications.
00:09:13.088 - 00:09:59.164, Speaker A: And this is also how decentralized big web two messaging solutions work. You have a centralized service and all the messages are directed over the centralized service. Then we have these kind of broadcasts or gossip networks. So it started with Whisper and there are others like XMTP Walk and more who are using this approach. You have a network from decentralized nodes. These nodes are connected and if you send a message, you inject the message into this network. Then this message is broadcasted in the network and the receiver can get the message out of the network if he is able to decrypt it.
00:09:59.164 - 00:11:06.786, Speaker A: Another way to do it is I call it hub networks. So here you have communities which have a more or less centralized server, and these communities are then connected with other communities so that they can send messages inside their own community, but also connect to other communities like Matrix or others are doing this in this way. Some special messaging solutions are building messaging services on chain. They are of course not using Ethereum. It would be kind of expensive, but they are using a power chain on Polkadot or something like this to use this blockchain or this special purpose blockchain as layer for the messaging solution. There might be solutions where this is useful, but yeah, it might also have some problems in the future with scalability and so on. With deem three, we are using a solution.
00:11:06.786 - 00:12:13.790, Speaker A: We call it delivery services. It's a little bit familiar with this, how we have it now in the email world. You have these in the email world, this post office servers, and then you send a message to the server and the user who wants to get his message can then collect these messages from the servers and adapted to the web3 world. We have these delivery services as independent servers or independent nodes, and the user can decide which nodes I connect to and then he can receive the messages which are stored temporarily on the servers. So when we now we talked about some features, how web3 messaging has to look like, we talked about some architectures and now we have to think about, yeah, what is really the essence of web3 messaging. So I was inspired from a talk at the last DEFcon where we talked about subtraction. If we have a problem, just look at this problem and break it down to the real essence.
00:12:13.790 - 00:13:10.680, Speaker A: And when we look at web3 messaging, we have actually only few things we really need to do. The first thing I already mentioned is the registry. We need a central but decentralized registry for information, for the communication information like public keys and the information, how to deliver messages. And we need a network of decentralized nodes where we can send the messages to. And this actually is the real essential thing. And if you now remember the things we talked about into our probability, we think also this is something which is really important so that we now can build an ecosystem where different applications can be or can work together. With dim three, we started one and a half year before to build a decentralized web3 based messaging application.
00:13:10.680 - 00:14:17.444, Speaker A: But after our mvp, we switched our direction of development to build mainly a protocol, but a protocol to allow web3 messaging, and a protocol which is able to allow interoperability between other protocols as well. So we call it a layer zero messaging protocol because it's a very lean protocol which can be included in other protocols and services without changing their architecture. And by this, Megan is very easy to connect a product to the dm three network and by this become interoperable with the other network. Then I already talked about the registry. We have an ENS based registry. I will describe it in detail and we have this decentralized network. And our focus of course is of all the things which are important for mode on messaging, like encryption, privacy preserving and so on.
00:14:17.444 - 00:15:24.134, Speaker A: And one thing which was also a very important thing, we discussed from the very early beginning that we need scalability from the beginning. If this protocol should be available for a lot of different ecosystems, then it must be scalable by design from the very early beginning. So when we look at this picture, it is only to visualize how this protocol is, is organized. We have this, so we have this base layer where we have Ethereum and Ethereum name service, so that we use this name service as registry for our information. And then we have this transport protocol which is this lean layer to transport messages from one service to another service. And on top there are some protocol extensions and you can build your own applications on top of it, or you can use companies applications. We provide for this.
00:15:24.134 - 00:16:25.986, Speaker A: This is the same picture, only with more detail. I don't want to go in detail. You can look into these pages later by yourself and see there are a lot of extensions for all features you need for modern messaging, but they are separated from the base layer because it's important to have a lean base layer for the interoperability and, and then have additional protocol extensions to solve all the problems you have and you need to solve. Let's talk about the registry. We are using ens and having the profile, the communication profile as text record on your ens name. That means if you have an ENS name, you can publish your profile, your communication profile there and here the user, others can find the public keys for the encryption, they can find the information, how to deliver the message. And of course Ens is based on ethereum.
00:16:25.986 - 00:17:05.148, Speaker A: Doing all this on ethereum might be a little bit expensive. And that's why we are using also CCIP, the cross chain interoperability protocol from chain link to also link other resources to ens. And you can have the information on chain you, you can have it on L2 in optimism or other protocols. You can have it even on a centralized service, you can have it on other chains. With CCip it's very easy to include it. And with this, if some solution, some protocol integrates their registry. However, this registry is organized into ENS.
00:17:05.148 - 00:17:54.648, Speaker A: It's very easily possible using CCIP. And with this we can have our central source of truth. We know all information about communication are bind to some name in the ENS. We talked about that decentralization is very important for web3 messaging and for dm three. We decided to have the simplest possible approach how to build this decentralization. And we are doing this by using these decentralized delivery service nodes. That means these are nodes which are a relay for the messages.
00:17:54.648 - 00:19:29.764, Speaker A: So when I want to send a message to some receiver, I send it to his or her delivery service and they are stored cached on the server until they are picked up, so that then they are managed in the application. So every user can decide what delivery service he wants to use, he can run his own delivery service, can run multiple delivery service, use existing services and so on. By this the user can decide what are the delivery services I want to use. And also if I have other ecosystems which want to join the DM three ecosystem, they can use such a delivery service as gateway to their services, so as it is visualized in this picture on the bottom, so that other ecosystem can be added and have their own delivery service, or the services so that they are reachable from the DM three network and then injecting the messages into these other networks. Yeah, I mentioned it already, that every user can decide to use one or more delivery services. So if I run, for instance, my delivery at home, and then I can have a second or third delivery in my profile, so that if my personal delivery is down, then another service can be used. And with this the user can be sure that there's no censorship because he can decide to use all, every other delivery service to send order to relay his messages.
00:19:29.764 - 00:21:03.506, Speaker A: When other services want to join, then they're using these deliverers as relays so that they can receive the messages. And then however, the network works on the other side, inject these messages in the other network. If this is, for instance, such a broadcast network, then they take the, the message from the DMZ network, package them in a message format in their network, and redirect it in their other messaging network. Or if this is a centralized service, then they receive the messages with the delivery service and then work with this in their centralized service. And with this it's very easy to bring other ecosystems together with DM three, because they only need to implement this gateway, and with this they can join this connected ecosystem of DM three nodes. So what do I need to do if I want to include my solution, my protocol, into DM three? So first I have to integrate my existing registry into ensuring so that others can find the information, how to connect and how to communicate. Then I have to implement a delivery service which connects to my network, or I need to implement a way to ask other networks for messages.
00:21:03.506 - 00:21:52.844, Speaker A: Both ways are possible. And the third thing is that I have to add the DM three encoding to my clients. And because these messages are encoded and encrypted in the DM three version and to show it and to send it, then I need to use this encryption or these encoding so that I can work with the DM three messages. And these are all steps, not more is needed. So I don't need to change the way how I store messages. I don't need to change anything in my client except adding this method to yeah, to decode the DM three messages. One problem I have not yet discussed, but is very common in messaging systems is spam.
00:21:52.844 - 00:23:03.104, Speaker A: We know it from email, at least 50%. There are statistics, they say over 90% of messages in the web two world are spam. In the web3 world, we have some interesting possibilities to what we can do to prevent our networks from being spammed in the future. So there are methods which can be done on protocol level and there are things which can be done on client level. On protocol level we can use things like the sender needs a special token or special NFT or amount of tokens to being accepted, or we can check that this account is really a used account or that it has announced bigger than a given number. And if this, it makes it much more expensive and complicated for spammers. Because if they need a nonce on this address, a special token there, or amount of tokens, they have to do a lot of work to build addresses to spam, otherwise they are blocked.
00:23:03.104 - 00:23:59.570, Speaker A: Also whitelist and blacklist are possible, but we know blacklists don't really work and whitelists are very restrictive. And on client level we can do also something which is not possible in web two. We can add tokens to a message and the user can, if the user says ok, this is a spam message, then these tokens are burned. And if this we can make it very expensive for spammers so that if the user okay, I am spammed too much, I only accept messages where tokens in the worth of $1 are added to this message. If this is not a spam, the sender receives it back. If not, it is burned. Very effective way to make it very hard for spammers to send a lot of spam messages.
00:23:59.570 - 00:24:54.442, Speaker A: And in web3 we can build these spam reduction methods very easily. And we think for a web3 messaging ecosystem it is very important to have these spam protection rules from the very beginning. So let me summarize what we have talked about today. So interoperability is really essential for messaging, especially for the web3 messaging world. So compared with web two messaging world, web3 messaging is small. Even if we count all the messages together, we are smaller than some of the smallest from the web two world. And if we are starting to build a lot of isolated ecosystems, it might be not possible to get a lot of traction so that it might be a real relevant solution for the future.
00:24:54.442 - 00:25:44.130, Speaker A: If we are able to implement interoperability, then we can build and show that a connected ecosystem is possible. And then even with, for instance, DM three, it is possible to include webs two solutions so that we can build this connected messaging ecosystem we need for the future. So with DM three, we have a very lean protocol which can be easily integrated. The current version is available. It is already implemented by some of some messaging solutions and of course we invite all others to check it, to test it and to integrate it in their product. Yeah, everyone can partake. DM three is an open source and public goods product, so all sources are available for free.
00:25:44.130 - 00:26:38.508, Speaker A: And we of course invite everyone to use it and also to participate by influencing what comes into this code. What should the protocol do in the future? We started an initiative, we call it a messaging interoperability initiative, where we invite a lot all other messaging solutions to participate. We have already had a lot of discussions with a lot of different protocols and yeah, it just started. It's not too late to join. You are invited to join because of the time I jump over the roadmap. You can get this information and have a deeper look into it and see what parts of the development are planned for the future. We have now finished, as I said, the base layer protocol.
00:26:38.508 - 00:27:53.298, Speaker A: We started also to implement and to specify all these extension protocols so that we can provide a lot of different important and nice features for the future. Okay, thank you very much for being here. Are there any questions? The delivery service, this shares the state with all other delivery service, I guess or no, this is not the case because if we would do this, then we have a lot of traffic between this delivery service. So the delivery service only receives information message and stores it. And if the user wants to receive it, it goes to his delivery service and they are not sharing the information because then we have a connected network which cannot be scalable in the future. But the sender and the receiver need to use the same delivery service then right in one direction. It's also always one direction only.
00:27:53.298 - 00:28:09.814, Speaker A: So if I want to send a message to you, I use your delivery service or the one of yours, or even I send it to all of your delivery service. If you want to send a message to me, you look into the registry and see what my delivery service are and to send it to this delivery service. Okay, got it. Thanks.
00:28:16.394 - 00:28:28.238, Speaker B: Thanks for the presentation. Just to make sure I understand, if client a and b build on your protocol, I can talk to you from client a and you can reply to me from client b, right?
00:28:28.326 - 00:28:29.030, Speaker A: Yes.
00:28:29.222 - 00:28:45.074, Speaker B: And then is there a way to dispatch content so the messages based on the context of those messages? For example, if I'm talking about movies, it's going to be dispatched on the Netflix client, but if I talk about travel, it's going to be dispatched on the Tripadvisor client.
00:28:45.924 - 00:28:57.604, Speaker A: Yeah. What do you mean with so what we are talking about is peer to peer messaging. There are one user, another user, and they want to exchange messages.
00:28:57.764 - 00:29:04.944, Speaker B: Yeah, but sometimes we have groups and then we talk about a bunch of stuff and mixing everything.
00:29:05.284 - 00:29:38.310, Speaker A: Yeah. So group messaging is also an extension of the protocol. The base protocol is only peer to peer, but an extension is also group messaging. And yes, you say, okay, there are also some flavors on the messages so they can say, okay, this message is for a special purpose and or for a special topic. And the protocol also supports this so that you could also add this information depending on the client. If there is a client, say, okay, I can understand this categorization. It can do it.
00:29:38.310 - 00:30:15.744, Speaker A: If another client says, okay, I cannot do it, then messages are in a row. So the base protocol says, okay, how to exchange the messages. Also you can add some special flavors, but then the client has to support it live, who will probably share it on Twitter because we are. So if you follow message, we will let you know.
00:30:17.524 - 00:30:20.064, Speaker B: When you say we, you mean you're in the same.
00:30:21.004 - 00:30:45.094, Speaker A: And also, as I said before, DM three is open source public good. And we are not defining how the standard has to be. We are collecting and if there are some requirements, just let us talk. And we want to build a community protocol which fits to most of the community requirements. Yeah, sounds good. Okay. Thank you very much.
00:30:45.094 - 00:30:53.014, Speaker A: There are resources, all are free. Be free to go to these resources, get your information. Thank you very much.
