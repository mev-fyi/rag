00:00:00.240 - 00:00:06.194, Speaker A: Everything is in order. So. Yeah. Please welcome Magdalena to the stage for a talk. Yeah.
00:00:09.774 - 00:00:37.294, Speaker B: And there's a video. Okay, I'll just check. All right. Thanks for joining. Today's presentation is about zero gas, infinite scale, the bull case for aptitude and how to build them. That's me. Just a different hair color, but yeah, I'm doing commercials at gelato, a bit of legal and finance.
00:00:37.294 - 00:01:08.240, Speaker B: So before we start this presentation, let's look at how did web two scale. So web two wasn't as scalable as it is today. Always. And let's take a short trip down memory lane. So web two started with local hosting. So if you had a website, you were running it, most likely somewhere down in your basement, you had your server there, but that obviously had a lot of disadvantages. So it's neither really scalable.
00:01:08.240 - 00:01:48.914, Speaker B: If you had electricity outages, your website could be down. And if you had users from the other side of the world, they could suffer from really slow loading times. So eventually, from local hosting, we went to shared hosting. In the mid nineties, there were providers like geocities or Dreamhost. I don't remember any of them. Maybe you do. But what they allowed you is they provided website hosting for you and that was already a great step, right, but it still had a lot of issues because mostly you shared all the resources and all the bandwidth with all the other websites on that server, which led to constraint scalability.
00:01:48.914 - 00:02:27.494, Speaker B: And if one website had a lot of traffic, your website could suffer, even though it's completely unrelated to the original website. And it's also very inflexible and not really customizable because usually you are bound to specific programming languages. So from there, mid two thousands aws, Google Cloud, there are also others, you most likely know them. We went to cloud virtual machines. So they're not physical anymore, they're virtual. And that actually led to horizontal scaling. So what you could do now is you can spin up instances, you can scale them up and down as you need them.
00:02:27.494 - 00:03:15.164, Speaker B: It's very customizable. You can build very powerful applications on cloud. So what's the takeaway from this? The Internet is not one huge role computer, but it's actually a web of interconnected computers. And what scaled web two were actually asynchronous services. So if you were deploying servers, instances and so on, you needed for them to communicate to each other and also to the rest of the Internet. And for that you used asynchronous communication tools like APIs or HTTP. So when looking at the evolution of web3, we can actually draw some parallels and we can actually see that asynchronous cloud services are also scaling web3.
00:03:15.164 - 00:04:32.960, Speaker B: We went from a few monolithic chains to an infinite number of virtual chains in the cloud. So similar slide. Let's try to draw some parallels to what we've just seen with web two scaling. So with the emergence of bitcoin, we had those special purposes, layer one, validator networks, and that's great, right? But if you wanted to launch a new use case, you needed a specialized blockchain and that always required a bootstraping, a validator set, which usually required a token because you need to incentivize those validators to join your network, which is costly, not that scalable, and usually also leads to security concerns like 51% attacks and so on. So from there we went to general purpose smart contract platforms, Ethereum, and that's already great, right? Because now you can have a lot of use cases, a lot of applications on the same smart contract platform. But still, and that's very similar to shared hosting, you still share all the resources with all the other applications on that network. So if you have an NFT drop or some meme coin or whatever, you can have your gas costs spike and the network is just congested.
00:04:32.960 - 00:05:20.548, Speaker B: So not scalable can be expensive and you're restricted to EBM languages. So what's the next step here? The next step is virtual blockchains on rollup as a service. What's a virtual blockchain? A virtual blockchain is a roll up. What's a roll up? It's a blockchain within a blockchain, and that blockchain is hosted off chain by a centralized sequence like gelato. So what is gelato actually doing? Gelato allows you to deploy and maintain your own roll up and actually have a scalable environment where you don't share any resources with anyone else. It's very customizable and you can build very powerful applications on Gelato. Let's maybe start with this one.
00:05:20.548 - 00:05:46.580, Speaker B: It's a video. Can I somehow start this? Someone knows. Okay, no one knows. So actually this is a video and it's the gelato platform. So if you go on the website we have a dashboard and you can actually configure your own roll up on there. But then let's start with this slide. So how does it look? You usually have a base layer, so you need to choose your roll up framework.
00:05:46.580 - 00:06:27.552, Speaker B: You can choose optimism, arbitrum, polygon, CDX, Cksync, those are the ones that Gelato is currently supporting. You also need to choose. Your data availability layer can be Ethereum, but that's costly. So you can also go with alternatives like Celestia Eigen layer or avail. And then you have the base infrastructure, but that is not really built for powerful applications. So you need, ah, Gelato and also a lot of third party web3 service providers. So Gelato is not only allowing you to deploy your roll up, but we also have a bunch of web3 infrastructure services, smart contract automation, relaying randomness and so on.
00:06:27.552 - 00:07:09.782, Speaker B: Then we heard from Simon, you need indexers. So the graph, you need a block explorer like Etherscan, cross chain messaging protocols like layer zero, oracles, a wallet, a bridge and so on. Video not working, unfortunately. So let's go a bit more technical, but still very high level. What's the like? How does the roll up design actually look like? So you have an execution layer that's your modified version of the EVM, like optimism, arbitrary and polygon. I already said that you have a data availability layer, cheaper options like Celestia Eigenda and so on. And then you have your settlement layer, which is Ethereum.
00:07:09.782 - 00:07:54.040, Speaker B: That's really important because the crucial thing here is that your assets still live in smart contracts on Ethereum, and you just upload them to the roll up for high execution throughput. But should something ever happen to your roll up, they're still secured in a smart contract on Ethereum. So let's expand a bit from there. That was the roll up design overall. But to actually build an application, you need some essential infrastructure on top of that. So you need a block explorer to actually, you know, track, visualize all the transactions. And you also need a bridge UI or native bridge to bridge through your roll up.
00:07:54.040 - 00:09:00.088, Speaker B: And that is actually what every roll up as a service provider would offer to you. This is the most minimal thing that you have or that you need. And one thing where gelato really shines is that we package up this offering with all the crucial other services that you actually need to build powerful applications. So expanding this even a bit more, we already heard this right now, the functions in Oracles, but a lot of functions, it's similar to AWS Lambda. And what you can, for example, do with Oracles, you can stream price feeds to your roll up to actually build very powerful DeFi applications like perp, Dexs for example. And on the UI side, for example, if you want to build an application that has a great user experience, where you can use, for example, Google sign in, and you don't want your users to deal with metamask or setting gas prices and so on. You can use gelato relay, which provides you with an account abstracted way for users to interact with your blockchain.
00:09:00.088 - 00:09:32.674, Speaker B: And they don't have to deal with any low level complexities anymore. Then again, indexers, so you can visualize your data. We talked about the rest, I think here. Yeah. One important thing, interoperability is very important because you don't want to have your roll up be very isolated. You want to be able to talk to other chains, to tap into other user bases and so on, so forth. And for that you need liquidity providers and cross chain messaging protocols to actually make that happen.
00:09:32.674 - 00:10:01.744, Speaker B: Yeah, horizontal scaling. Buzzword on there. Shared sequencing. So the example I'm doing is a bit flawed, but, like, imagine you have three different roll ups. Let's assume you're building a game and you have three different roll ups because for whatever reason, you want to segment your user bases by country. So you have one in the US, one in Asia, one in Europe, for example. You have three different roll ups for that.
00:10:01.744 - 00:10:46.212, Speaker B: And they all talk to each other, but they do it in an asynchronous way. Right. And if you want to have a really great in game user experience, what you want to achieve is that you have those roll ups talk to each other in a synchronous and atomic way. And for that you would need shared sequencing. What we're doing at gelato, we're currently researching this topic together with Espresso, who's shared sequencer. But yeah, this is still in research phase and not live yet. And what's the takeaway here? The takeaway here, as with web two, is that Ethereum is not one huge world computer, but it's a web3 of interconnected roll ups, all talking to each other.
00:10:46.212 - 00:11:19.412, Speaker B: Build on gelato. Yeah, if you want to build a roll up, you can do all of that very easily. On our platform, these are projects that are customers of ours. So we also have infrastructure services. We work together with more than 400 projects. Most of these projects on there are using our infrastructure services from, you know, pancake swap, sushi swap, optimism, safe Zora, and so on and so forth. And.
00:11:19.412 - 00:11:30.464, Speaker B: Yeah, so if you're looking for a job, we're also currently hiring. We have an office in Zouk. You can work remotely, check out our jobs. Come talk to me. Yeah, that's pretty much it. Thank you.
00:11:38.154 - 00:11:46.894, Speaker A: Hello. Thank you so much. Any questions? Two questions. You have one mic coming that way.
00:11:55.194 - 00:12:12.394, Speaker B: So we have web3 infrastructure services and we have rollups business model is pretty similar. So for rollups it's a monthly subscription fee and sequencer revenue. And for middleware services it's also subscription fee that you pay.
00:12:15.134 - 00:12:16.394, Speaker A: We have another question.
00:12:17.654 - 00:12:49.642, Speaker C: Hi, two questions. First one is really stupid, but like, let's say for example, you connect metamask. Do you have to select gelato as a separate network or are you going to connect to optimism to kind of get involved in the ecosystem that going to work from a user interface side? And the second question is, I wanted to understand a bit more how you differentiate yourself versus the likes of dimension or out layer that obviously have also come up with this kind of similar service.
00:12:49.738 - 00:13:15.464, Speaker B: Yeah. So the first question, no, you would not connect to Gelato as a network. So I'm not sure if you're talking middleware roll up now, I guess. Roll up. So if we are launching a roll up and for example, we launched one for Rea, for tangible, for Asta, we are launching a roll up for them. And it would be ASta, like, it would be the roll up you're connecting to, but you would not connect to Gelato. Would that answer the first part of the question and the second part of the question, can you.
00:13:15.464 - 00:13:16.080, Speaker B: That was.
00:13:16.192 - 00:13:16.600, Speaker C: Yeah.
00:13:16.672 - 00:13:54.914, Speaker B: Just wanted to understand a bit more how it differentiates. Yeah, I think, like what I showed, like this one slide where I showed this is like the most basic design of a roll up. So if you're looking for roll up as a service providers, this is usually what you get, right? That's the bare minimum chain and you get a block explorer on top, but that's pretty much it. And I think where gelato really shines and is different from all other rust providers is that we provide this like comprehensive infrastructure package. We package it all together for you and you get all those services and all infrastructure deployed from day one on your roll up to really be able to build powerful applications.
00:13:56.614 - 00:14:05.734, Speaker A: Thank you. Any other questions? I think Gelato has one of the best names products because I feel like eating with Gelato after your talk. Thank you so much. Welcome.
