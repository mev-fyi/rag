00:00:01.000 - 00:00:53.904, Speaker A: Well, while we get these things working for any developers out there, we are sponsoring the hackathon. We have the largest price. We have $10,000 for grabs. So if you want to build on ckSync, our bounties are account inspection and paymasters. And I will have a QR code at the end with all the details of our bounties, with examples, resources and even ideas of projects that you can build. So any developers out there, you're welcome to build on Cksync and get paid for it. Let's see.
00:00:53.904 - 00:01:40.362, Speaker A: Well, it's not updating here, but I'll just do it. So first, what is mass adoption? Mass adoption could be your grandma using Uniswap to swap USDC for Dogecoin, for example. But yeah, jokes aside, we all have friends, brothers, sisters, parents that use Amazon. They buy stuff online, they use online banking, they use social media, and I'm sure most of them, they don't use crypto or blockchain. So mass adoption is bringing all the people that use the Internet into blockchain. And what do we need for that? Well, we need four ingredients. First, we need to increase the scalability of Ethereum.
00:01:40.362 - 00:02:25.674, Speaker A: Right now, as the guy before me said, ethereum can process around 15 transactions per second. So if we want to bring millions of users, we need the protocol to be able to process more transactions. In general, we need lower transaction fees because if you have used Ethereum mainnet, you are paying super high gas fees and people are not used to that. So we need lower transaction fees or even gasless transactions. We need better UX because let's face it, web3, UX sucks. Even if you know how things work, you can lose all your funds in a missed click because there are no safety nets at all. And tech should be transparent because the average user, they just don't care about the technology.
00:02:25.674 - 00:03:07.876, Speaker A: No one cares what database Twitter uses or which programming language they use. The users, they just want something that works and that doesn't stay in their way. So what have we done? We've built ck synced era, which is a general purpose. Layer two roll up that scales Ethereum with zero knowledge is powered by CKBM and it has native account abstraction. And there are a few fancy words here. So L2 means that it scales Ethereum's throughput and reduces transaction fees because we are bounding transactions together and the fees are split between all the transactions in a batch. We use zero knowledge.
00:03:07.876 - 00:04:01.244, Speaker A: So we generate a validity proof of the state updates and we validate that proof on the year one come on. Yeah, this stop working again. Can someone just pass it manually for me? There we are. So the Ckevm. That means that CK sync era is programmable with solidity amp VYPR and is compatible with the web3 API. That means that you can do things like ETH getblog or ETH send transaction the same API. It works exactly the same.
00:04:01.244 - 00:04:44.166, Speaker A: Finally, it has native accounting abstraction, which means that all accounts on cksync are smart contracts. And I will talk about that more later on. Okay, so we launched era mainnet two and a half months ago. Around two and a half months ago, it was the first ckebm on Mainnet. We spent almost a year on Testnet and almost $4 million on security audits and bug bounties. Since we launched, we have almost 800,000 depositors and accounts, and we've reached more than $400 million in Tbl. That's the graph from l two bit.
00:04:44.166 - 00:05:16.504, Speaker A: And the transaction fees on average are 15 to 20 times cheaper than in l one. And we have more than 200 projects on our ecosystem page. And the list keeps growing. So with era, we have checked the first two ingredients for mass adoption. We have increased throughput and we have reduced transaction fees. So what about the other two? Better ux and making the technology transparent. Well, for that, the solution is account extraction.
00:05:16.504 - 00:05:58.526, Speaker A: And account extraction is. Everyone is talking about it, lady, but what is it? So if you know how accounts work on Ethereum, basically we have this account and signer that are linked together. And the logic of the signal to verify transactions is hard coded in the EVM. With account abstraction, we are just breaking this relationship and we are moving this hard coded logic into smart contracts. So basically we are using smart contract accounts and this unlocks a ton of features. This doesn't mean that by default accounts on Ethereum will have them. It just means that developers will be able to build these kind of things.
00:05:58.526 - 00:06:49.276, Speaker A: So for example, with smart contract accounts, people developing smart contract accounts can be something like social recovery spending rules, flexible validation, or multicultural flexible validation, for example, is signing transactions with biometrics or with Google Authenticator. Social recovery is like you forget your private key, you can recover it through email. Spending rules is, for example, your account can spend only one ETH per day or a month. All these kind of things. Also, account extraction brings this thing called paymasters, which are my favorite thing about account extraction. Paymasters are smart contracts that, that can pay gas fees on behalf of the users. So if you are building a paymaster, you can build these type of features.
00:06:49.276 - 00:07:36.804, Speaker A: Like for example make that your application will provide the first ten transactions of every month free for all the users, or that users that have a specific NFT will have transactions for free. And this is like a very cool example for daos. For example, when you belong to a dao, you have an NFT. Imagine that the DAO has a paymaster that basically makes transactions for all the DaO users free. Again, with paymasters, you can also allow users to pay fees in ERC 20 tokens. And if you are paying fees with ERC 20 tokens, you are increasing the utility of tokens. One example is imagine uniswap decides that in order to do swaps on uniswap, you have to pay the gas fees with the unit token.
00:07:36.804 - 00:08:20.310, Speaker A: In that case, the unit token is no longer only used for governance, it will be used for governance plus swaps. So that will increase the utility and also the value of the token. And these are just some of the features unlocked. But both smart contract accounts and paymasters are smart contracts. So they are fully programmable and you can build almost anything you can think of. But how does this work? Because this sounds pretty cool. How does it actually work? Well with EIP 4337, which was released also like two months ago, what they have done on Ethereum is create a completely new transaction flow.
00:08:20.310 - 00:09:14.856, Speaker A: So if you have a metamask or an externally owned account, you send your transactions to the mempool, they are picked up by nodes and validators, and then finally they are put into the blockchain. When you are using a smart contract account, you will be sending a special type of transactions called user operations to a completely different member. And then we have a new type of nodes called bundlers, and they collect the bundle, a bunch of user operations and send them to a special contract called the entry point. And this was the part that was released on March on Ethereum. And then this entry point contract will validate the transactions or the user operations and execute them. And if the transactions include some data to be processed by a paymaster, the entry point contract will basically pass it to it. And finally the transactions will be added to the blockchain.
00:09:14.856 - 00:09:59.322, Speaker A: So we will have two completely separate transaction flows. One important part is that Paymasters are down here. So if you're using metamask or an externally owned account, you cannot use Paymasters. And I will focus on that later on. So the account extraction implementation on Ethereum with EIP 4337, it brings a lot of that stuff. We have programmable smart contract accounts that can have a better onboarding with no private keys and some of the features that I mentioned earlier. And we have Paymasters for smart contract accounts, but on the other hand, it wasn't implemented at a protocol level.
00:09:59.322 - 00:10:40.306, Speaker A: That's why they created this new transaction flow. And as I said, paymasters are not available for externally owned accounts, which are like 90% of the users. And finally, obviously, there are no improvements in transaction fix because transactions are still being processed on l one. So from all the features that I mentioned earlier, you can only access these ones. Most of the people will only access these ones. Most of the people won't be able to access this one because most of the people still use externally owned accounts. So there must be something that we can do.
00:10:40.306 - 00:11:35.424, Speaker A: And of course, on CK sync, we built a protocol from scratch and we had account extraction in our radar from the beginning. So we have a slightly different implementation. First, as I said, it's integrated at a protocol level, and that allowed us to build a simplified solution for both users and developers. Smart contract accounts and paymasters on Cksync are first class citizens because under the hood, all accounts behave like smart contract accounts and all accounts support paymasters. If you are using Metamask on CK sync, you can benefit from Paymasters. We have a single mempool and transaction flow. So basically, no matter what type of account you're using, all the transactions are sent to the same mempool and they're going through the same transaction flow.
00:11:35.424 - 00:12:34.928, Speaker A: Inspired by EIP 437, we have our own version of the bundler and the entry point contract, and they process transactions from all accounts. This is how it looks. So, as you can see, there are no different transaction flows or anything. We have both types of accounts sending transactions to the same mempool. And then we have our own version of the bundler, which we call the operator, and it picks up all the transactions, bundles them together, sends them to the entry point contract, which is called the bootloader on CkSync. Then the bootloader will verify the transactions, execute them, and send it to the blockchain. And as I said, if you are sending information, if you are sending transactions from your metamask wallet or any other externally owned account, and you want this transaction to be processed by a paymaster, that can happen.
00:12:34.928 - 00:13:19.584, Speaker A: It will just go through here and you can benefit, everyone can benefit from Paymasters. So the four ingredients for mass adoption just being a L2. We check the first two ones with account extraction. We have an improved user experience, we have safety nets, we have spending limits, all these kind of things. And then, thanks to Paymasters we can make the technology transparent. If users or developers implement paymasters, they make transactions gasless for the users or free. The technology can be completely transparent for them.
00:13:19.584 - 00:14:12.144, Speaker A: So yeah, I'm going actually fast and I'm good on time. I'm going to talk about Defi on cksync because, yeah, Defi summit. So as I mentioned earlier, since we launched in just two and a half months, we have more than $400 million in total tbl and 150 million around that, probably more. Now it's on Defi protocols. As I mentioned, around 800,000 accounts using CK sync error on Mainnet and transactions are 15 to 20 times cheaper. Here are some of the protocols like sync, Swap, Mute, Unidex, Maverick, and we have others like Uniswap, Corv and Ave coming soon. And then we have liquid staking protocols as well.
00:14:12.144 - 00:15:06.224, Speaker A: Rocket police Live and Lido is common. We also have coinbase ETH and Frax ETH as well. Now I want to mention three killer features that cksync era has for Defi, which are native account extraction paymasters for everyone, and the fact that we use state diff updates. And as I said, on ckSync, all accounts behave like smart contract accounts. The way this works is if you're using an externally owned account under the hood, we assign a smart contract account to a default smart contract account to your account. And that means that applications are accessible to all the users. If all the user people that are in crypto for a few years, they have their own externally owned account, they can use your applications.
00:15:06.224 - 00:16:01.144, Speaker A: But if you have new users that are using new smart contract accounts, like Argent, for example, both of them can use applications on CK sync and smart contract accounts. They make crypto onboarding easier, which makes, I mean, means that we have more DeFi users. And finally, as I said, smart contract accounts enables a lot of security features that can make using DeFi like better and safer in general. Come on. Okay, the next one is Paymasters for all. As I said, paymasters are this special type of smart contracts that enable paying gas in ERC, 20 tokens or just cashless transactions. And most self custody accounts are externally owned accounts.
00:16:01.144 - 00:16:59.392, Speaker A: All these users cannot benefit from Paymasters on Ethereum or other libyan protocols that implement EIP 4337. So thanks to the native implementation of cksync, Paymasters are available for both EOS and externally own accounts. So you can build as a DeFi developer, you can enable things like, as I mentioned earlier, paying fees in your protocol token to increase the utility and value of that token. You can do things like gas less Fridays. So on Friday nobody pays gas fees or even reduced gas fees for your vip users or for users that are the top ten users, things like that. And the more important part is that that will be available for both eoas and smart contract accounts. Okay, and this is the big one.
00:16:59.392 - 00:17:59.718, Speaker A: And it's the fact that we use state diffs to update the state. The way this works is when there are a bunch of transactions, all of the updates for a storage slot are only just once. So if your application updates the same storage load more than once in a batch, it will be only charged once. Imagine an oracle that updates the price of ethusd or something like that every second. On other protocols, you will have to pay for every transaction for every update. On CK sync era you pay for the first time and then the rest of updates are free. So that means huge savings for applications that updates frequently the same storage slot, as I said, oracles for example, or just doing swaps on liquidity pools on dexs because they update the same storage slots.
00:17:59.718 - 00:18:41.724, Speaker A: So this is like a very important one because it can reduce gas fees for Defi applications a lot. As a developer, you can also do like bundling transactions together for a lot of users and then sending them at the same time again. That will reduce the fees. Okay, this slide is a little messed up, but key takeaways CK sync era is EVM compatible and supports solidity and VYPR and the web3 API. As a developer you can use the same devtools like Hardhat. We just launched support for foundry. So yeah, developer experience is pretty similar.
00:18:41.724 - 00:19:32.904, Speaker A: Most smart contracts will work out of the box with no changes required. We implement account abstraction at a protocol level with improvements over EAP 4337, account extraction and paymasters. They enable better user experience and different options to manage cash. And as I said on era, we have Paymasters for both externally owned accounts and smart contract accounts. And the key features of Era are native account extractions, Paymasters for all, and the fact that we use state differences. As I mentioned earlier, we are sponsoring the hackathon with $10,000 in bounties and in this QR code you will find more information about the bounties. We have examples.
00:19:32.904 - 00:20:19.974, Speaker A: We have resources like tutorials. We even give you project ideas. If you're not sure what to build, just pick an idea from the list, build it and get some money. At the end of the day, the bounties are anything related to smart contract accounts, so you can create accounts with parenthood controls, spending limits accounts that only work with a specific application or anything related to Paymasters. Like, for example, a paymaster that only works for the people that attended the conference or referral programs. Paymasters that works for people that posted something like a tweet and tag you, something like that. Or even dashboards for people to actually manage Paymasters.
00:20:19.974 - 00:20:39.164, Speaker A: At the end of the day, if you as a developer have built a paymaster, you have to make sure that the Paymaster has enough ETH to pay transaction fees so you can build like a dashboard to manage different pay masters, things like that. And I think that's it. Yeah, I did it on time. Thank you.
00:20:45.024 - 00:20:49.816, Speaker B: We have a time for a few very quick questions, if anybody in the audience has any.
00:20:49.840 - 00:20:51.648, Speaker A: Oh, we're doing questions?
00:20:51.816 - 00:20:54.794, Speaker B: Yes. Yeah, yeah, we can squeeze a few in there.
00:20:54.944 - 00:20:58.314, Speaker A: Okay, there's one.
00:21:01.254 - 00:21:19.354, Speaker C: Hi, thanks a lot. Thanks a lot for the talk. Could you elaborate a bit on this question of potential censorship? The thing that bothers me a bit about this whole roll up ecosystem is if I get censored by the sequencer, can I exit on my own through layer one? And how would that work in Zksync and in ZK rollups in general?
00:21:19.974 - 00:21:39.334, Speaker A: I'm not sure about other rollups on Zksync. Yes, yes, you can. And the sequence right now is centralized. It's only run by us. But we are, I mean, the next steps on our roadmap. And our roadmap is decentralized, the whole protocol. We are starting with the RPCs and the nodes, and the sequencer will be decentralized.
00:21:39.334 - 00:21:53.544, Speaker A: Like, next, we have to decentralize the nodes, the provers, and the sequencer. Once that happens, it just is not on us to block you or anything. You will be able to do anything because the, the full protocol will be decentralized.
00:21:56.164 - 00:21:58.464, Speaker B: I think we can squeeze in one more.
00:22:01.364 - 00:22:06.744, Speaker D: Could you elaborate a bit more on programmable keys and at what level are they actually implemented?
00:22:07.444 - 00:22:09.324, Speaker A: What do you mean about programmable keys?
00:22:09.444 - 00:22:24.114, Speaker D: Like, let's say you give certain permissions to a key. I mean, you could actually make e 45 only, or you could actually make, I mean, like, you could actually permission based keys.
00:22:25.694 - 00:23:09.486, Speaker A: Yeah, I mean, I guess you can build that in a smart contract account. You can build something that. I'm not sure if I fully understand the question, but, I mean, at the end of the day, smart contract accounts are fully programmable, so you can decide, okay, if I'm signing my transaction with this key, I want to only be able to interact with these contracts or these applications. If I sign in my transaction with this different key, I want to interact with these other contracts, for example. So on your smart contract account, you will have a verified transaction and you can implement any logic to verify the transactions. So you can extract the key and then put in logic that you want. Like for example, what I mentioned that, okay, if I'm using this key, I can interact with this contract.
00:23:09.486 - 00:23:15.014, Speaker A: If I'm using other key, I will only be able to interact with other contracts. That's something.
00:23:16.154 - 00:23:17.346, Speaker B: Thank you so much, Antonio.
00:23:17.410 - 00:23:17.914, Speaker A: Yeah, thank you.
