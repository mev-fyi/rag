00:00:00.800 - 00:00:33.734, Speaker A: Thank you guys so much for being here. So today we're going to be talking a little bit about building privacy centric hiring platforms on talent layer. So this talk is going to be broken up into three parts. First, we're going to be talking a bit more broadly about what's wrong with hiring today and what we can do to solve some of these issues. Then we'll do a brief introduction to talent layer, and then we'll get into the real fun stuff, live coding a private hiring platform here today. So if you want to whip out your laptops, then we will be ready to go. So before we get into that, we'll just do some brief intros.
00:00:33.734 - 00:00:47.662, Speaker A: So, I'm Kirsten. I'm the executive lead of talent layer. I've been building open source tech in the blockchain space for about four years now. Before that, had a few marketplace startups in web two and was a freelancer. And this is my co founder.
00:00:47.838 - 00:01:00.094, Speaker B: Yeah, hello, guys. And I'm Roman. So, twelve years freelancer. I work for, for several company Web two, even web3, building some cool projects, and now full time and tech lead of talent layer.
00:01:00.754 - 00:01:51.482, Speaker A: Yes. So what's wrong with hiring today? Today's hiring market is incredibly siloed. So we basically have all of these platforms out there that have, yes, let us more easily connect with people globally to find work, but they've also caused a lot of issues, namely liquidity issues. So these platforms constantly struggle with the chicken and egg problem that's having enough workers and hirers on the same platform. Unfortunately, because these are centralized, you do have a lot of censorship, shadow banning, et cetera, and you have siloed reputation. So this is one of the worst parts, because if you're on upwork, building a reputation as a worker or a hirer, even this is locked up in here. And if all of a sudden you decide there's not enough work on me or there's not enough work for me on upwork, I need to go check out some of the other platforms.
00:01:51.482 - 00:03:00.484, Speaker A: You have to start from scratch on any of these other platforms. And this is a big issue not only for freelance marketplaces, but really all hiring platforms, all gig platforms. So this is really bad for not only the hirer and the worker, because they have trouble finding each other, but also for the platforms themselves. So the number one issue that causes these guys to die is having not enough workers or having not enough hirers to meet each other's needs. So with all of these issues, we believe that the solution involves taking down user profiles identity, job posts, et cetera, to a lower level. So this is really a similar architecture to what lens protocol is doing for social media, where you have a lot of backend components that sit at a protocol level behind platforms, enabling transactions between users on other platforms. So what that means is all of a sudden platform a, that has more, you know, freelancers, more workers than they do jobs, and platform b, that has way too many jobs compared to the workers that are available, are now able to even out their liquidity.
00:03:00.484 - 00:03:50.744, Speaker A: So with all of this said, in addition to the whole pooled liquidity aspect, talent layer has all of these core components that make it super easy to spin up a hiring platform. So this is like really anything from a mobile application for freelancing, an influencer marketing platform. Traditional hiring platforms like indeed, you can basically build these in less time than ever. And the best part is it's all completely censorship resistant because all that reputation data, the job posts, et cetera, live at the protocol level. So that even if for some reason there's a platform out there that decides that they don't want you on board anymore, you can still access that reputation by logging into any of the other platforms out there. So now we're going to be talking a little bit more about the tech behind talent layer and how you can use it.
00:03:51.524 - 00:04:44.778, Speaker B: Let's go. So yeah, let's first take a step back and see how we can build this kind of low level protocol. So with talentlayer, we come with three different smart contract building interoperable together and having each of them one particular feature. So yeah, thank you. So let's have a look on this component. The first one, and the point of entry is the identity, the identity of the user where we can link his identity on all his path. On talent layer, we need that to store some on chain data, of course the minimum that we need, but also some off chain data with ipfs, but we're going to store about this profile and stuff like that.
00:04:44.778 - 00:05:26.800, Speaker B: Of course this data on ipfs can be public, but the idea with talent layer is that the user can choose if it can make it private or not. Then we got all the workflow that you need to for a job marketplace. So the service agreement is all about making a proposal to a client that creates a job opportunity to someone, a gig opportunity. Then you got all the escrow. So the funds are secured. With the escrow smart contract, you can do release several release with milestone, you can trigger milestone with GitHub for example, or anything you want. And then if everything that's good, that's perfect.
00:05:26.800 - 00:06:22.374, Speaker B: We go on a shared review with the review smart contracts. And in case something happened, we got a dispute resolution system where the platform that you are on can choose between something like Kleros. So a decentralized reputation system or a reputation system that we developed internally that can help them to do the ruling themselves. And the last part which is important for the marketplace is like the contract, but under their configuration because of course marketplace want to set up some fees, want to have some options, some delegation to improve the user ux. And all of this is handled in the marketplace smart contract. So this is the low level protocol six module. And the idea is that you can build almost anything on top of it.
00:06:22.374 - 00:07:19.702, Speaker B: Any kind of marketplace could be something for group freelancer, it could be something for specific niche like smart contract audit. We got one marketplace here that is building that actually. And this is the cool things about building something really low, you can do anything really on top of it. And so to have this thing easy to integrate, we have several piece on top of that. So the first one is the indexer because it's tons of data now open data, but we need to share with the whole network. And this data are indexed by the graph and it will index the on chain data of course, but also the data from ipfs. And then on top of all of that, of course you got all the marketplaces that can interact with these modules and this data and be interoperable together.
00:07:19.702 - 00:08:23.694, Speaker B: So a marketplace a can pull the jobs, find a job that match one of their freelancers and make a transaction between together and having both marketplaces getting part of the fee. Just to show you an example on how the data are stored inside talent layer on chain, the idea is to store the minimum viable information because that has a cost of course. And so we only stock an handle which represents the name of the user and the IPFSC id. Then all the offshore data are stored on ipfs. And this is a basic things that we give to marketplace for interoperability. But you can add anything on it if you have some specific needs, basically. And so this is an example for the profile, but this is the same workflow that is repeated for the services, for the escrow, for the arbitration platform, identity and reviews.
00:08:23.694 - 00:09:14.440, Speaker B: So of course everything here is on the documentation. We take some time to create some good documentation because it's the most important at the end. We are developer tools, so we want developers to come fork our code, see the doc, make it easier. We are developers, so we know what it is now before going to some code, just a word about some privacy tools. So as the core system of talent layer privacy easier because you can work behind it suddenly, so you don't have to reveal your personal data, you don't have to reveal all your experiences, something you can choose. And we add some privacy tools on top of that to improve way more of a privacy if you want to. So the first one is seismo.
00:09:14.440 - 00:10:03.324, Speaker B: So I don't know if you are familiar with it, but the idea is to you is to use the ZK technology to for example, as a freelancer, I've got my public accounts, but I also got some anon accounts, because sometimes I don't want to show publicly that I work for this or this enterprise, but what I want to do with the technology is to be able to prove that I achieved this kind of work. For example, I work five times for solidity. I want to prove it on my public profile. And you can do it today with talent layer and stuff size, more integration, you will have provable badges, but you can display on your profile. Basically the second one is railgun. So railgun is for private sending of money. So we use it to do, for example, private payroll.
00:10:03.324 - 00:10:46.406, Speaker B: So imagine you work on talented within a team and you want them to split the money, but not spiritually reveal all the values sent to each of each one. You can use railgun and them talent layer integration to do that. And in one click split money in a private way without revealing to who you send and the amount send. And the last part is XMTP, which is an important one. So XMTP is a web free messaging protocol. So here the idea is you are on marketplace, you can start chat with a client is on another marketplace, but they are using the same low level protocol for messaging. So it's the same thing, but talent layer, it's interoperable.
00:10:46.406 - 00:11:22.294, Speaker B: And we integrate that to have messaging private and just insight to people. So that's it on the privacy. Let's have a look on the code now. Thank you. So at talent layer we got two different repositories. The first one is talent layer. Here you can see that we got 17 open source contributors.
00:11:22.294 - 00:11:46.886, Speaker B: Thank you to all of them. If you want to help us contribute, please join us. We are trying to build something together. We're building open source, we're building all of that openly. That's important, that in the core of what is talent layer today. So here are two contracts, two repository important, the contract one and the graph. Everything is public, you can see it.
00:11:46.886 - 00:12:19.764, Speaker B: What we're going to check today is what we call talent layer labs. So here it's a bunch of repository where you can come and for code and having for example your marketplace in future few minutes. That's the purpose of indie frontend. So we're going to go into indie frontend and the idea is to like fork it. It's made for that. It's all open source. And let's do it now so I can fork it.
00:12:19.764 - 00:12:49.444, Speaker B: Let's go. So indie frontend is a next G's dapp. So with that you can have your front end of course, and your back end if you need it. And it leverages all the technology of talent layer to handle the whole workflow of a marketplace. So the fork is done. Now I can just git clone that. So I'm going here.
00:12:49.444 - 00:13:21.044, Speaker B: Git clone. So the idea is to show you how simple you can quickly start on talent layer, make your marketplace and then start focusing on your business, on the key future you want to bring. So the setup is quite easy. At the end you just need nod and NPM install in your computer. Then you go with NPM install. It will take few seconds, just the time to download. That's maybe the longest part.
00:13:21.044 - 00:14:02.680, Speaker B: Then of course you will have some environment variable, so some configuration you need to set up. Of course there is an issue. That's the demo effect. Oh I know why. Just go here. Ok, that's going to be good now just in a few sec. So as I said, it's next JS app.
00:14:02.680 - 00:14:32.214, Speaker B: But so behind the scene we also leverage typescript to type everything. We use tailwind for the design. We use Huangme and enters JS for all the web3 integration and wallet connect for the connection part. Okay, it's almost done now. Okay, so now I can copy my configuration. So it's the Yougottenv example. Just copy it and then just run the code.
00:14:32.214 - 00:15:23.514, Speaker B: So now it's building. I will open also all the base code here. Okay. I have to rewrite it. Almost there. Okay. And that's it.
00:15:23.514 - 00:15:53.844, Speaker B: So now you got a world marketplace that is working by default. It's on Mumbai. But you can, you can use also the polygon chain where all the talent layer contract has deployed. Now on Mainnet. And here you have everything you need, the dashboard for your user, you have all the complaints like incomes for each user, how you can contact a client, how can you can post jobs. And everything is just here. Even the messaging part is integrated.
00:15:53.844 - 00:16:21.314, Speaker B: The idea with talent layer is really to have something forkable in a few minutes and you can start coding. And for example, we used this backend this weekend to ack and show how you can leverage and build something really cool in just 48 hours, I think. So if you want to see a bit more, for example, what you can build on talent layer, I let Kirsten present you.
00:16:22.774 - 00:17:05.094, Speaker A: Yes. So over here we have something that we call be together. So as you can see, we designed this one to be mobile first. So you can basically create and manage a freelance collective with this. So obviously this is like a lot different user experience than just your average freelance marketplace, which shows you a bit of the flexibility of that indie front end to be able to be used to create various things. So over here we're just creating an account. So on the back end that is actually minting talent layer ids you and also an organization that we're calling hives to be cute here.
00:17:05.094 - 00:17:55.778, Speaker A: And then you and your fellow workers that you add to this organization that you've created are then able to go out and hunt for jobs. And basically this is something that we call a world one sided marketplace. So it's just serving the worker side of it. And the hirers and the job posts are just sort of pulled in from the other platforms that have posted jobs. So we won't necessarily go through the whole of this, but you get the idea you could do some cool stuff with it. And we also have plenty of other example code bases that we've created or other teams have created over the past few months that are cool to check out. So that is all for now.
00:17:55.778 - 00:18:15.814, Speaker A: So we can jump back into the presentation here and if you want you can come get a PO app from us. So we appreciate you all being here. We hope that you enjoyed the presentation. And yeah, just visit talentlayer.org or docs dot talentlayer.org to get started. Thank you.
00:18:15.814 - 00:18:46.614, Speaker A: Thank you Kristen. Thank you, Roman. Talent layer? Okay, why not? I can just. We forgot about questions. Do we have any questions? All right.
00:18:49.474 - 00:18:55.802, Speaker B: Thanks for the presentation. Do you have an example of something cool that you would like someone to build on?
00:18:55.818 - 00:19:47.726, Speaker A: Talent layer yeah, in fact this is a perfect question because there's actually going to be a bounty at ethwaterloo to build a in chat hiring app using XMTP and talent layer. So imagine an application where you can just dm someone that you want to hire. You make an agreement on what price you're going to charge and the terms of the contract, all in messaging and then have that on the backend be actually creating instances of jobs and proposals and all that jazz on talent layer. So what this will be is basically a full life cycle of hiring only. It's all in one app. And this is really cool because it's like the power of what you can do with composable tech. Like this kind of thing would be absolutely impossible to build with web two tech.
00:19:47.726 - 00:20:03.998, Speaker A: But because you have these two low level protocols, talent layer for the job and payment related stuff, and XMTP for messaging, it's possible. So super excited about that. And if anyone's going to Ethwaterloo, totally try to go for that bounty. Any other questions?
00:20:04.126 - 00:20:19.620, Speaker C: Yeah, so talking about the power of composing to low level protocols, I know you guys, there is a lot of opportunity to do stuff, for example, with talent layer and lens. So you want to talk a little bit about what opportunities you open for this integration?
00:20:19.812 - 00:21:25.012, Speaker A: Yeah, so we've been working with the lens team for a little while now. We shipped earlier this year, basically some front end components that you can use to display lens profile information on a marketplace integrated with talent layer. But this is really just scraping the surface of what you can do with these two protocols. So what I'd be really excited to see is a lens social media platform that has job, basically job management embedded into lens posts. So if you can envision a web3 LinkedIn type thing, you know, on normal LinkedIn, how you could be scrolling and then all of a sudden an advertisement for a job opportunity pops up. What if you could actually click into that and do a proposal? And on the other side, a hire can manage approving proposals, payment reviews. What if you could all do that within the post, like super efficient from a design perspective? So I'd be curious to see something like that and we're just waiting for someone to build it.
00:21:25.188 - 00:21:26.384, Speaker C: Yeah, that'd be cool.
00:21:26.764 - 00:21:27.544, Speaker A: Thanks.
00:21:28.444 - 00:21:32.624, Speaker C: And why so many raccoons? And for leaf clovers around?
00:21:32.944 - 00:21:56.504, Speaker A: Yeah, it's a really good question that has a long explanation. I mean, the short explanation is we have a team member who is crazy with collecting clovers. One time he collected 24 clovers in one sitting that are four leaf clovers and raccoons because we're bootstrapped, which means we have to raccoon to build what we've built. I see we have a question in the back, though.
00:21:56.544 - 00:21:57.324, Speaker B: Where's my.
00:21:58.444 - 00:21:59.868, Speaker D: So thanks for the presentation.
00:21:59.916 - 00:22:00.868, Speaker B: Really great idea.
00:22:00.916 - 00:22:23.824, Speaker D: I was just curious about the employer side of the project. I understood correctly, I think we got full jobs at the moment, but I was curious how the plan to encourage companies to join the club, maybe offer something for employees and stuff like that. Because like from now I see like all the benefits.
00:22:30.344 - 00:23:26.236, Speaker A: Yeah. With the example of the freelance collective platform that we shipped this weekend, 100% that's mostly designed for the workers, but basically on the hire side. You can go to existing marketplaces like Workx, which is live right now on Mainnet, and you can post a job just like you would on any other normal hiring platform. You could also decide to spin up your own front end interface if you want to self host that and use it as like an internal job board. As far as incentives goes, primarily it is the marketplace platforms themselves that have their own marketing and incentive models. A lot of them are also considering their own sort of token economic systems to incentivize hirers to join, workers to join. So as of right now, at the protocol level, we don't really have an incentive model to get hirers on board or workers on board for that matter.
00:23:26.236 - 00:24:08.714, Speaker A: But it's something that we're considering, of course. Yeah. So the benefit for companies that are trying to hire would be you can make a post on one platform that's integrated with talent layer and then all of a sudden you're sourcing candidates from any of the other interfaces. So if you imagine like how lens protocol is designed, you make a post on one and then you could view it on, you know, the dozens and dozens of other platforms out there. So it really increases visibility for your job posting. Yeah. Thank you.
00:24:08.714 - 00:24:17.494, Speaker A: All right, I think we're just about out of time, so thank you guys for the questions. And if you want to chat later, we'll just be hanging out, sort it by the door. Thanks.
