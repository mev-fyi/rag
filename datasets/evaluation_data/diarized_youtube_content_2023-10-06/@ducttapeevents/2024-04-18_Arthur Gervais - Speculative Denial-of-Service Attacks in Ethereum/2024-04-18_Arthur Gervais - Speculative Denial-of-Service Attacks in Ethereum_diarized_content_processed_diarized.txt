00:00:00.400 - 00:00:02.274, Speaker A: Ladies and gentlemen, Arthur Joey.
00:00:03.254 - 00:00:27.966, Speaker B: Thank you so much for the very kind introduction. I use this clicker, right? Okay. All right. So happy to present our more academic work today. So this was work with my colleagues here from various institutions, actually. Aviv Yaish, he just finished his PhD at the Hebrew University. Kayua Qin just finished his PhD in Imperial College.
00:00:27.966 - 00:01:12.204, Speaker B: Lee is still a student of mine, and Aviv is a dear colleague in Jerusalem as well. This work was also partially supported by the Ethereum foundation. So thank you very much for this, for helping us to do good research. Is this working? This one? Okay. Got the right clicker now. Sorry about that. Okay, so everybody knows transaction fees are a thing you need to pay for to execute code on blockchain.
00:01:12.204 - 00:01:42.444, Speaker B: So that's nothing new for you. So there's a certain amount of gas that you need to pay. And this gas is typically. You're typically liable to pay gas when a transaction is mined. So when it's included in the block. Now, transaction executions on, for example, the EVM layer can revert. So a smart contract may have a condition that is not satisfied, and then the transaction execution will not touch the state of a blockchain, of the blockchain's execution.
00:01:42.444 - 00:02:15.188, Speaker B: But these reverted transactions, they still have to pay fees. Right. And that is largely due to the fact that we want to avoid DNA of service attacks. So we don't want somebody to just spam transactions that then revert and do nothing and don't cost anything. So that's why they typically do cost a certain amount of money. Now, is this enough? Do we need any other fee mechanism? Probably not. Okay, good.
00:02:15.188 - 00:02:53.024, Speaker B: Probably not. However. So one of the issues is you can pay transaction fees for transactions that are not included in blocks. At least current designs do not look for such a setting. So, just to give you a simple example, if you send out a transaction and it will never be included in blockchain, because maybe it doesn't pay sufficient, sufficient amount of fees, then it will not pay transaction fees. Do you have any idea any other case where it could happen that the transaction will not make it into a chain? Nonsense. Okay.
00:02:53.024 - 00:03:10.580, Speaker B: Some missing nonce or outdated nonce, for example. Any other issues? Zero. Guess. Okay. Right. That's also an option. Any other ideas? Reorgs.
00:03:10.580 - 00:03:12.052, Speaker B: Reorgs. Re.
00:03:12.068 - 00:03:12.292, Speaker A: Orgs.
00:03:12.308 - 00:03:22.316, Speaker B: So typically, transactions are that are. That are. That were in a fork. Right. They are put back into the mempool, so they can still be mined afterwards. But it's a good point. Right.
00:03:22.316 - 00:03:39.878, Speaker B: So it's a delayed inclusion, so to speak. Very good. Yeah. Any other idea, why would transactions not be mined? That's such a weird concept. No, sorry, reverted execution. Reverted execution. So then they're still included, right, but they included executed, but reverted.
00:03:39.878 - 00:04:29.550, Speaker B: So they don't affect the state of the blockchain, but technically they are included. Okay, let me spoil it. So we have censorship, right? So since the Ofac sanctions, we have this concept that certain transactions we will not include in a chain. And you may ask then, okay, where do we have censorship? Like where on the blockchain stack? In this architecture will we have censorship? So here I just drew like a high level diagram of the technical architecture with these different layers, p two p layer, consensus layer, application layer. So there may be quite a lot of censorship here. There may be some censorship here, but also on the application layer, if you use, for example, USDC or USDT, they can blacklist addresses. That's also a form of censorship.
00:04:29.550 - 00:05:24.586, Speaker B: So you actually have it on multiple layers in the system stack, but you can also have it on the order flow part of the entire blockchain architecture. So for example, in Ethereum, we have this concept called proposal builder separation, where searches are, for example, finding profitable transactions, they're forwarding them to the builders. The builders build blocks, the relayers take those blocks and forward it to the proposer or validator or miner, or however you would like to call it. And so in this setting, we do have quite some censorship going on, as I will show you in a bit. But to give you a little bit more of a definition of what is actually censorship or why did this came about? Well, there's the US Office of Foreign Asset controls. So the commonly referred to the OFAC, and they have a list, an SDN of list, this specially designated nationals and blocked persons list. So.
00:05:24.586 - 00:06:08.294, Speaker B: And there are hundreds of blockchain addresses, also bitcoin addresses on there. And most of them are externally owned accounts, but there are also some contracts and there are also some testnet accounts that were sanctioned. So that's actually the rough concept. So you might ask, okay, I mean, has this any impact? I mean, we have a permissionless, censorship free blockchain network, right, without any central party. Why would that have any impact? Well, we did measure the impact. So the OFAC sanction here hit at this particular date in 2022. And if you look here on the y axis, we have the number of uncensored blocks.
00:06:08.294 - 00:06:27.564, Speaker B: On the x axis is the time. And here we have different mining pools. So at the time, we're still in proof of work. So. And you can see here, right, Ethermine had quite a lot of tornado cash transactions. Right? So TC stands for tornado cache. It's a privacy mixer, which was.
00:06:27.564 - 00:07:02.824, Speaker B: Yeah, I should add, it was sent. So the tornado cache addresses went onto the SDN list of OFAC. And you can see here there's a stark impact. Right. Of what then happened in terms of transactions that were mined or rather number of uncensored blocks. So these sanctions, they have a stark impact even on these very decentralized systems. Okay, if you want to have a little bit more updated numbers on censorship, we just discussed the PBS system here.
00:07:02.824 - 00:07:50.524, Speaker B: Tony, he was so kind to create one of his beautiful websites that really quantify the current state in Ethereum. So, for example, on censorship, censorship pics, you can see 10% of the validators are censoring and roughly 60% of the builders are censoring. So why are more builders censoring than validators? Any idea? Yeah, concentrated builders may be more concentrated is a good point. Yeah. Any other reason? Think about the. Yeah, they're doing the block building. Exactly.
00:07:50.524 - 00:08:16.484, Speaker B: They may be legally charged. Absolutely. And that was a bit early in the. In the food chain, right? So the searchers sent the transactions to the blockbuilder, to the relayer, and then to the validator. So the idea is in PBS is that the validators, they actually sign off on the blocks without even knowing what's in the blocks. So maybe, and I'm not a lawyer, but maybe the majority of the liability actually goes onto the builders. Hence they are the entities that are more sensory.
00:08:16.484 - 00:08:57.360, Speaker B: Okay, just a little side note. So what are the security implications of censorship? Right? That's the core of the talk today. Why does it matter? Censorship, right? We know it matters in terms of censorship and free speech and so on. But what about security? Well, we've seen that there's quite a stark impact on the average inclusion delay for tornado cash transactions, right? They went, actually in August 2022, they went from 15.8 to roughly 30 seconds on average. So transactions still get included, but it takes quite a bit longer. And the second biggest problem point is it opens up new DNA of service attacks.
00:08:57.360 - 00:10:08.314, Speaker B: So a node that is censoring transactions has to do some work to execute the transaction, but there's no fee that can be paid for that transaction. And if there's only one thing you take away home from this talk, I think that's it. So if you censor a transaction, you may still need to execute it to know whether you should censor it. And executing it but not including it in a block implies that you cannot this transaction will not pay fees, and that's the null of service vector. Okay, so getting a bit more into the technical details. So there's a concept also in, especially in the PBS system, where actors are executing transactions speculatively, right? So when building a block, for example, you may execute a bunch of transactions, but if another transaction comes along and this one is suddenly more profitable, well, you're going to switch it, right? And then TX prime here will not pay any transaction fees, but you had to execute it. So there's this concept also of speculative execution of transactions, even though it's not clear which transactions will finally make it into the block.
00:10:08.314 - 00:11:08.134, Speaker B: So in our work that we did with our colleagues at the Hebrew university, we devised three types of attacks. And these three types of attacks touch on three different system layers. So we have one attack where we have a conditional exhaust on the execution layer of the EVM. And this is what I will talk about today. In the later slides, there are two more attacks. One where we kind of trick the heuristics of a mempool into dropping interesting transactions, so we can purge, we can cheaply evict profitable transactions. And the third attack, it's targeting a reputation system of some of the PBS actors, and so where an adversary can lower the reputation of other actors and thereby weaken their ability to make a profit.
00:11:08.134 - 00:12:04.226, Speaker B: So for the later two, I'm happy to refer you to the paper, if you're interested to know, really the nitty gritty. I will talk more about conditional exhaust, but all attacks are really fully described in the paper here. This was also accepted and peer reviewed as USNC security 2024. So it will also be presented there. Okay, so what about conditional exhaust? Well, the idea is you have an attacker, and the attacker sends transactions only when the upcoming proposer, right, the miner here, the validator, when this proposer is offer compliant or aims to be offer compliant. So what would the attacker then do? Well, the attacker sends a transaction, and this transaction here has two execution steps, depending on the context. So.
00:12:04.226 - 00:12:44.602, Speaker B: And it will check, is the proposer that's now upcoming executing this transaction in a compliant way. Right. So what does it mean to be compliant? I'm using that word so casually here, but just to be explicit, any idea what I mean by being compliant? Sorry, exactly. So, being compliant, and I use it as a very loose term, is to not mine a transaction if the transaction section is involved. So, sends or receives money from an address that is part of the SDN list from OFAC. Thank you. Yeah.
00:12:44.602 - 00:13:49.604, Speaker B: Okay, so we can do these two things, right? So if it is compliant, we execute some complex code, and then we transfer one address to some sanctioned address, which, for example, transfer one way, so just some amount to the sanctioned address. And if it's, if it's not compliant, then just execute some simple code, and that's it. So that means that nodes that actually this will trigger quite a lot of computation to execute here, this complex code, and that's a denial of service vector that targets specifically compliant actors in the space. So, to give you an example, I will actually give you a solidity example in the next slide. So this executing here, the simple code would probably, I mean, for example, can take roughly 23,000 gas, which is only 10% more than the simplest ethereum transaction we can think of. But the complex code here can take a lot of gas. For example, 30 million gas, if you'd like to.
00:13:49.604 - 00:14:46.044, Speaker B: So these are really like the kind of like two branches that we can design and therefore target specific actors that are censoring. So how does this code look like? Well, it is rather simple, I would say. So here, for example, we have this contract, we have a constructor where we define which addresses to dos. And what's interesting here is, I think the way that we do this particular version is that we look at what's the future, what's the address of the future of the next proposal. So we assume that the adversary in this particular case knows who is the next proposal, which in proof of stake, we typically know. And the addresses also of the validators are fixed until they withdraw from the proof of stake chain. So this is a possible way of carrying out such an attack.
00:14:46.044 - 00:15:17.632, Speaker B: Does anybody here. So this is a bit more technical. Does anybody have an idea on how we could, what other mechanisms we could do to execute this attack or to target, like the next validator besides the coinbase address. Any other ideas? Random. Random, yep. But then sometimes we have to pay fees, right, for the 25,000 gas, and sometimes we're successful. So we can do a bit better than random.
00:15:17.632 - 00:15:34.264, Speaker B: Yeah, time stamps, timestamps. Not bad. And there's something that's very close to timestamps. Block number, block height. Yes, correct. Absolutely. So we have this, we described the second version, actually, in the paper, so feel free to check that out if you're interested as well.
00:15:34.264 - 00:16:15.514, Speaker B: Very good. So we did an evaluation on our machine with 64 cores and quite some rum. The flashbots min specs are much weaker, so we took really a beefy machine that is kind of like the victim node that we will be attacking, and we found that a one shot of 140 transactions. So we sent 140 of these sensor exhaust transactions. One shot would kind of. Yeah. Propose, would force the proposal to mine empty blocks, even if the proposal is mining 100 consecutive blocks, which I understand this is unrealistic, but it's a very favorable case for the proposal.
00:16:15.514 - 00:16:41.688, Speaker B: So the cost of this attack is less than $1,000. So I guess for the impact on liveness of the blockchain, this cost is really negligible. Yeah. So there's a call to arms. Right. The consensus and transaction fee mechanisms, I would say, are relatively well understood. Obviously, there's always room for improvement and more and further research to be done.
00:16:41.688 - 00:17:16.534, Speaker B: But for transactions that do not enter blocks, that's really the Wild west. So we have quite some work to do. PBS and the separation of roles certainly add complexity and introduce novel attack vectors. So it's really complicating the system. And, yeah, I think in prior work, right. In prior work, people said proposals, future proposals can be attacked because we can, we know who is the next proposer, for example, we can dos them. But what I really want to show in this work, the future proposers can also attack.
00:17:16.534 - 00:17:34.514, Speaker B: So if we ignore the censorship part, there are also attack variants which we described in the paper where the attackers can, the proposers can attack themselves. All right, thank you. I hope this was an interesting talk for you. Thanks so much.
00:17:36.174 - 00:17:44.834, Speaker A: Thank you so much. Andrew Sherwei. Are there any questions? We have time for one or two short questions. Any questions?
00:17:59.874 - 00:18:01.614, Speaker B: Sorry, who's asking the question?
00:18:02.514 - 00:18:04.174, Speaker A: I think I saw your hand first.
00:18:04.874 - 00:18:21.334, Speaker C: Okay, thanks. I will ask first, what if the decision if the proposer is using of a compliant builder is not known prior because the proposal is using more builders? Let's say one compliant, one not compliant.
00:18:22.154 - 00:18:22.706, Speaker B: Sorry, I didn't.
00:18:22.730 - 00:18:31.164, Speaker C: How would you execute this attack if it's not known if the builder will be of a compliant or not?
00:18:31.784 - 00:18:41.004, Speaker B: So let's say if a builder is receiving a transaction and the builder has a certain policy, am I compliant or am I not compliant? Right.
00:18:41.544 - 00:18:45.444, Speaker C: But the question is if the proposer is using more builders.
00:18:46.264 - 00:18:48.072, Speaker B: If the proposer is, it is not.
00:18:48.128 - 00:18:55.154, Speaker C: Known if the one that will build a block is compliant or not. You cannot know that.
00:18:55.694 - 00:19:13.874, Speaker B: Well, you do know whether the validator, right? From historical data, you do know whether the validator, the next validator. So first, you know the next validator, right? That's, that's proof of stake. Then the second thing is, from historical data, you know whether the next validator, whom. You know whether this validator is censoring or not?
00:19:15.574 - 00:19:17.486, Speaker C: I don't think so, but okay.
00:19:17.630 - 00:19:26.248, Speaker B: I mean, we have. We have the data, right? We can. We can go here. Oh, I cannot. I cannot switch anymore. But we have this. We have this.
00:19:26.248 - 00:19:54.344, Speaker B: 60% of the builders are censoring. 10% of the validators are sending. So we do know who is censoring. And then the builders, what they typically do is they know. Okay, this validator is sensoring. So I'm going to have to censor also, right? It's kind of like the builder has no intention of building a block that is not compliant for a validator that wants compliance.
00:19:57.524 - 00:20:02.764, Speaker A: Thank you so much, Andrew Shaway. Thank you also to the audience.
