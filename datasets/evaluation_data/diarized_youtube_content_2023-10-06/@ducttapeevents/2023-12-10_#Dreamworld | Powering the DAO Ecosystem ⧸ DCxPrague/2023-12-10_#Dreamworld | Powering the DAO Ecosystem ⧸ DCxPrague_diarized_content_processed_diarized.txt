00:00:01.520 - 00:00:29.550, Speaker A: Hello to everyone. Thank you for giving us the time to present here. I think we are going to do this a bit more open and discussing. We are a small room of people, so we wanted just to show you what we are doing and keep an open conversation, both with Franco. He is part also of the tech team at Diva. And I am Miguel Prada, also take lead of the Diva staking protocol. And here we have also Pablo and Leo.
00:00:29.550 - 00:01:07.386, Speaker A: They are all part of the Diva Ding and Diva family. And over there, Nando. And I don't know if Diego is there hidden, but also some other guys over there. So, yeah, we want to describe a little bit about the protocol, what we are doing, and we want to have an open conversation with you guys, especially about permissionless node operation. This is a complicated topic, something that some other projects are trying to do. Rubble, lido and so on. So it's easy to create a linguistic protocol where you control all the nodes, right? So you can be coinbase, you can be binance, you can be Lido, but it's not easy to do it permissionless, because there are many drawbacks.
00:01:07.386 - 00:01:49.750, Speaker A: Like, people can get control over the keys, people can try to attack. And in general, having the keys to validate is power and therefore as value. So, basically, what we do, and let me jump into this particularly because. Because I don't want to waste too much time on the architecture. Basically, we use the rundao to generate random selections, like lottery tickets, to each one of the node operators that register on Diva. If you want, we can dive more on it. So basically, every time there is a set of operators that are registered on Diva, what we do is use the rundown to say, okay, who is going to be participant in the DVT architecture of the.
00:01:49.750 - 00:02:17.878, Speaker A: Of the next validator? And we select a random set of participants. They will run a DKG and randomly we will select one of the set size. It's going to be running evaluator. So once this process has completed, we'll end up with something like this, where you have a set of. On one side. Yeah, yeah, sorry. I want more than conversation, but I want to use the slides.
00:02:17.878 - 00:02:39.290, Speaker A: I know it's a bit of a chaos, but I want to go to the last part, which is the final picture, and keep it open. So big picture, big picture. Stakers come from one side. They stake, right? Go to the smart contract, and the operators come from here. They register the notes. There is some magic here. Okay, no magic.
00:02:39.290 - 00:02:57.660, Speaker A: I said magic. So, one moment. Okay, perfect. So when you come close, it turns off. Ah, okay, so I'll do it from the distance. So there we have the magic. Not here, right there we have the magic.
00:02:57.660 - 00:04:09.564, Speaker A: So where the magic happens, there is some lottery tickets to select random operators and they're going to be the ones running the validators. And then on the right side you have the beacon chain sending duties to the validators and distributing to the network. Okay, so here the challenges are, we are going to have people running partial key search, partial pieces of the validator. And one of our major questions is, and this goes to all of you guys, where is the technological barrier that we put? Because on the economic side we use collateral, we can use many of the things, but where do you think the technological barrier should be? Because currently you can make it as easy as you want, but there is always some kind of knowledge, minimum knowledge that you need to have. So open question if anybody wants to answer, where do you guys think should be? What is the minimum level of knowledge that you should have to run a node in a protocol like this in Ethereum? Should it be that you are able to install an application on Windows or Linux? Do you need about to know about dockers, about Ethereum itself, wallets? What is the anybody?
00:04:12.544 - 00:04:30.324, Speaker B: All the things you just mentioned are just like kind of UI challenges, right? Like someone should be able to make it so that you don't need it, in my opinion that you don't need any technical knowledge, right? Like that would enable the greatest form of decentralization if like ordinary people could run it without fear or worries or technical knowledge.
00:04:32.144 - 00:05:20.204, Speaker A: Right? But then don't you think that it is also some responsibility, of course on the keys that you are using. So in case of an emergency you need to be able to respond quick and have certain knowledge of what you are doing. So when you limit a lot the simplicity onboarding is true that you're going to have more users and therefore we are going to have the typical dream of a theory of the staking is going to be operated by anyone, which is true and that's what we want to achieve. Don't take me wrong, like in Deba we try to achieve that, everyone's run it, but there are also drawbacks. Like in case of an emergency people need to coordinate and this is going to slow down any kind of action. So what do you think about that? Do you think that we should maybe also like, I don't know, knowledge wise.
00:05:20.244 - 00:05:31.232, Speaker B: Or I mean I think that still should be simpler frankly. Like you know, there needs to be a way that like, you know, you don't have to like decipher this chart to be able to like participate.
00:05:31.328 - 00:05:31.752, Speaker A: Yeah.
00:05:31.848 - 00:05:57.354, Speaker B: Because in a way this is like a weird kind of like gatekeeping. In the same way it's a necessary form. Right? Like this is technical, it's complicated. You need to understand it, be able to participate. I would personally like a world where you didn't have to understand to be able to participate. I understand that there needs to be some sort of intermediary there that maybe explains to you what's going on if it's an emergency. But then you could also maybe imagine a system that somehow takes that into account.
00:05:59.094 - 00:05:59.670, Speaker A: No, no.
00:05:59.742 - 00:06:12.846, Speaker B: I mean, that's, you know, I would like it to be just, you know, an app on my Mac or a little cube that I can sit on my bookshelf and maybe don't call me an emergency because I don't know what to do. But you know.
00:06:12.990 - 00:06:16.754, Speaker A: Yeah, but it's opinion what we are running here, right? So.
00:06:19.714 - 00:06:52.932, Speaker C: It almost seems like there's two layers of it, right? There's one layer where it should just be like one executable that you double click. There's the quick setup, click, click, click, done. It's running kind of thing. And that's for most people. But then I think that something like maybe delegates comes quite naturally as an answer to this is like people need to be able to trust somebody to tell them what to do. In some ways. Like for all of us, we're nerds.
00:06:52.932 - 00:08:04.010, Speaker C: Like your brother, your aunt, your parents come and like, how do I set up this thing? Right? Like you would have the same thing where you're like, there's somebody in the community or somebody on discord or somebody somewhere else that you personally trust. Is that because you met them or for some other reason and they tell you, oh, update the note, and then you do it kind of like blindly because you don't really understand what's going on. But that person that, you know, they've taken the time to actually study the economic, study the technicalities, study whatever is going on, and if they tell you what to do, you can kind of like trust that at a personal level. And if they do something to bridge that trust later on, you don't trust them, you trust somebody else. But I see this as almost like two layers. You need to have like people that are in the community that know and spend maybe a little bit more time to like have deeper knowledge on all the different domains. And then you have, you have an easy to use interface where people can interact with whatever it is that is the protocol, is the platform, is it, whatever it is, it needs to be easy to use.
00:08:04.010 - 00:08:20.668, Speaker C: And then later on there's a layer of like maybe more expert people and maybe the experts are not experts in everything. They're just like somebody knows about tokenomics doesn't necessarily know about network traffic. So that's a little bit how I see it.
00:08:20.716 - 00:08:44.375, Speaker A: Yeah, I agree with you. But don't you think that maybe in that case, so if you trust blindly someone that you know, maybe. Well, not blindly of course. Like you need some kind of. But that's the thing that it opens. You're trusting at some point, right? Someone, there is some level of trust of I'm going to execute these commands and everything should be fine. Should be.
00:08:44.375 - 00:09:03.834, Speaker A: But you really don't have control over what you're doing. So then you think that maybe on the liquid staking arena that kind of user fits better on the, as you said, delegation staking area where they come from, this other site, and then really run on the operations area. What do you think about that?
00:09:04.454 - 00:09:05.998, Speaker C: Could you repeat the last part?
00:09:06.126 - 00:09:36.694, Speaker A: Yeah, sure. So in general, in debugging any liquid sticking protocol, there is the operation side, right? People that run the nodes and people that only stake ethers. People are only deposit ethers or delegate them to someone, right? So if you have people that just want to be part of Ethereum by contributing with ethers somehow, right. And someone else is going to run it anyway, or they don't want to be actively participating, which is most people. Which is most people. Exactly. What do you think about this other.
00:09:37.354 - 00:10:35.920, Speaker C: Flaw on the specific graphic you're showing? I mean, I think the expertise should probably be on the operator side. And then as Denison was saying earlier, it's a question of how easy to use in terms of user interface it is for the staker to not make mistakes and to not be. And that's kind of like a tooling thing, right? Like where there's, you know, warning and verified address and verified this and verify that that prevents people from making deathly mistakes because there's always going to be mistakes. And that's why, you know, there's a cat and mouth shares between, you know, the hackers and the security teams, between, you know, like the scammers and, you know, the people that are, you know, more legit. There's always this, this chase. But what you want to do is like, keep being in the game.
00:10:36.072 - 00:10:36.360, Speaker A: Yeah.
00:10:36.392 - 00:11:12.636, Speaker C: You know, so how can we make sure that people don't make grave mistakes? How can we, how can we design our protocols, our interfaces that, you know, they don't, they don't burn the house down. They can make little mistakes, but that's how we learn. We've all been hacked. I actually remember three years ago, came to this conference, to this. Not this conference, this castle. There was another conference and then there was this discussion with a lot of the crypto G's and they were saying like, everybody got hacked. And I remember got scammed or hacked.
00:11:12.636 - 00:11:39.848, Speaker C: And I remember thinking, hmm, I haven't just coming back home. It actually happened. So everybody will get, everybody will have something happen to them. You're tired that day. You know, like just somebody will find the right moment, the right timing, the right vulnerability, and a combination of three, five, four things put together. Boom, they got you, right. So that's going to happen to people.
00:11:39.848 - 00:11:52.044, Speaker C: But how can we make sure that if that happens, they're not completely out of the space, they're not completely wiped out, they're not zeroed out. That's the way that I see it. Because mistakes will necessarily happen.
00:11:52.384 - 00:12:18.260, Speaker A: Yeah. Okay. Actually going on the line, I see that from the staker point of view, they're only going to deposit ethers, on the contrary. So that can simplify a lot, the number of mistakes. But I agree with you, and I like that you make this question, because there is one major problem, especially on the mistakes. The problem with this kind of decentralized network is that mistakes or attacks are indistinguishable. Right.
00:12:18.260 - 00:12:23.204, Speaker A: You don't know if someone is making a mistake or if someone is trying to attack the network. Yeah.
00:12:23.244 - 00:12:49.854, Speaker D: How is this been different than anything else that's out there? Because I heard a lot about the different, sort of like, you know, you have lido that's centralized and things that are decentralized. Okay, I'm just asking, like, I hear a lot, like, I heard a lot of articles and talks about like, how Lido centralized and there's decentralized solutions, but I don't understand how they're decentralized or how they're any different. So I'm just asking like, how is this different than what is being done today?
00:12:50.754 - 00:13:26.684, Speaker A: We'll go back then to the issues with the operators. I did it back to the beginning. So let's go back to the beginning. Let's start with that part. So quick explanation basically in linguistic, in generally what other networks do, like Lido, is that you have a set of operators running there that are going to run the whole liquid staking. So you have a set of centralized parties that control the keys and they run the operations of the ethers that are deposited into a pool, right? Pretty simple. But then you have a centralized party controlling all the keys.
00:13:26.684 - 00:14:04.296, Speaker A: When you have collateral deposits, it's exactly the same. But then there is a set of operators that are from the people that are putting some collateral in order to align with the behavior of the network. So if they make a mistake, they are going to pay with their collateral. And that way you can basically deposit ethers there and receive liquid tokens, assuming that they are going to behave correctly. So it's a bit more permissionless. And then at Diva, what we do is that all these sets are being run by a set of permissionless operators. So let me see.
00:14:04.296 - 00:14:55.944, Speaker A: I don't think that I have the proper diagram here, but basically is the difference between having or not collateral. In Lido, you don't have collateral. So if anything happens, the users are going to pay for the mistakes of the operators, right? In rocket pool, you do have collateral, but the people that control the keys are single persons. Like there is one person out there controlling 32 ethers, but they didn't put 32 ethers. So basically you are reducing the cost of attack a lot by having the power of attack with 32 ethers, even though you only deposit a little. So in our bit case, everything is run by a set of distributed operators, by a set of nodes that are running like a virtual validator, so no one has control over the full key at a single point. I had a better diagram than this one, but I think I didn't include it in this presentation.
00:14:55.944 - 00:16:05.602, Speaker A: So sorry for that. So with that said, we have a set of operators that are going to run the whole operation. And here's something where I want to ask Franco, because we were talking about things like the fee recipient or Mev steering, which is something very tricky, right? It's something that many people want to solve. And when you're delegating to someone, especially if it's trustless, how do you know if they are behaving correctly? So the way we are doing is that we are promoting the modification of the web designer API. It was at the beginning a generalized version, then it was promoted by consensys, their thing, which was assumed to be a connection trusted between the validator and their web designers. That's okay if you're running a big infrastructure with a lot of ethers that you're controlling, but if you want to use it for trustless network, you need to verify the data and you need to have a trustless communication. So in these kind of cases we are going to try to promote a verifying with regenerators called where you can verify the data of the chain.
00:16:05.602 - 00:16:17.130, Speaker A: So what do you think, Frank, how we could do over there? Do you have any ideas of how we can improve or what are the changes that are needed on this web3 designer?
00:16:17.202 - 00:17:13.658, Speaker E: Yeah. So the current setup for the web3 signer is like in a trust environment. So we want. Diva works as a web3 designer and we want to split the trust in the setup. So currently, because of how the data is structured, the data, it has not enough information to validate that the web3 signer is signing the request that he is supposed to sign. So that's why we are requesting to have some information, some of the fields in the web3 signer data in order for our signer to be able to check to validate what we are actually signing. This is important for block proposals, not for every kind of signing duties, but block proposals.
00:17:13.658 - 00:17:20.823, Speaker E: Right now we are doing tests with the field, recipient field, basically, yeah.
00:17:21.723 - 00:18:00.834, Speaker A: Any ideas or anything that you would like to. Because the idea here is that if a web3 signer API gets marginalized, we want more things to be included, not only what we need. So what do you think we could do there? How do you think we could generalize the web3 center API? Any additional use case that you think we could have for this API? Because it's quite handy, like simple to integrate with the validator. You have quite a lot of information. It comes from the block, so you can do a lot of things, maybe even under the sphere. There are things that can be done, but I don't know, any idea anybody wants to comment on it?
00:18:09.714 - 00:18:14.706, Speaker F: You're working with a lot of validators, right? Yeah. Is there anything that when you're running.
00:18:14.730 - 00:18:15.414, Speaker A: Your own.
00:18:19.754 - 00:18:32.774, Speaker F: Because talking a little about how to make this completely permissionless, but Artem is running a lot of their own validators. I'm wondering if any of the things that could be used for permissionless could also be used for better security.
00:18:33.914 - 00:19:50.004, Speaker G: Well, I think I would like to roll back a little bit to this conversation about delegation possible, and I think it also relates to that question. I think in general, when we talk about choosing some delegator, somebody you can trust to do the fix on your notes, the question becomes how it's actually going to be working, and the line becomes blurry. Are you going to ask your friend to do this, or are you going to ask, are you going to pay them? How is this going to be monetized? Because if you're going to ask friend, it's not really sustainable. He's going to like look into your setup once or twice, but then he won't be able to have time when you have an emergency. So I think just building on top of this, I think there is a way to build the market of this and there is going to be a market of this when if we decide to do some kind of delegation, the market will just pop up, they will start providing the services. And then I think the question becomes is how do we make, how do we create a system where people can choose to delegate the ETH, maybe not from the staker side but from a different side, from the operator side. That's something that I'm interested in.
00:19:50.084 - 00:20:34.792, Speaker A: Yeah. So that's something we are working as well in some kind of delegation model where people can delegate collateral to the operators. So operators don't need to deposit fully the collateral, but people that trust them can delegate on top of them. But of course the users like the delay also need to have control over what they can do. They need to be able to redeem, they need to have power over exiting the operators and so on. So that's something that for sure we are working towards. But do you think rtom that these kind of operators, could they be trustless or for this kind of application where you are delegating, they need to have a certain level of accountability, let's say.
00:20:34.792 - 00:20:43.680, Speaker A: Because for the delegation of course you are trusting the entity to run with your ethers. What level of accountability do you think makes sense exactly?
00:20:43.712 - 00:21:27.600, Speaker G: Yeah, I think it should be a trust minimized way. So in this scenario where you choose to run the node, you have this easy user experience and then you have a problem and you have to find a person to fix that. If we just invert this model and instead of running this node on your info, you go and choose an operator you probably relatively trust but also you choose to donate. Not donate, but give a percentage of it because this layer will have to be monetized somehow. So you will give 510 percent to them and them and they going to run the nodes. But you will be able to have ability to take your ETH at any moment in time.
00:21:27.672 - 00:21:27.880, Speaker A: Right.
00:21:27.912 - 00:21:45.560, Speaker G: So it's, I think it, it's more like a trust minimized way, but it's a better solution than when you run a node and you don't know what to do when something like happens and you don't really have a way to like fix the problem. Yeah, so I think it's like something like trust minimized.
00:21:45.672 - 00:22:17.730, Speaker A: It's possible. Okay, think makes sense. I think we have only a few more minutes left, so if any of you want to discuss about what we are doing, or if you have any question, I think maybe we are open to questions. Danny? I don't know. You tell me how time is all good. Okay, so anybody has any question about the running of nodes on diva, how the DVT works, or anything in particular that want to ask here, if not also privately? We'll be around. So you have another question.
00:22:17.730 - 00:22:18.346, Speaker A: Fantastic.
00:22:18.450 - 00:22:46.146, Speaker G: So also speaking about the user experience, I think we can agree that right now it's very hard to have no technical knowledge to run a node that's the dream to have usually ux when you just run a node. But do you think that if I want to run a diva node, it's easier than, let's say, running a solo node or running a node from a different liquid staking protocol?
00:22:46.290 - 00:23:35.314, Speaker A: Yeah, I think in terms of running nodes in Ethereum, we had a long history. That was the time where we had missed parity where people could run and there was like an UI loading over there, the blocks that was kind of deprecated. Prism also had a UI. Very nice, right? So for running nodes. So I think we had different eras in Ethereum where running on nodes was first easier, then harder than easier again, then harder again. But I think we are moving towards that direction of making things easier. The problem is that currently still mostly Linux binaries for Docker containers for people that know how to configure the parameters, info and so on, so forth.
00:23:35.314 - 00:23:51.474, Speaker A: So I think it's not really yet prepare for that easiness. So I don't know how to solve that. Like that's in the end something that ethereum clients should maybe also think if they should be improved. But.
00:23:53.854 - 00:24:43.398, Speaker E: Last time I checked, I think there are a few projects like serum, that they are doing a very good job at making installation and running nodes for ethereum very, very easily and convenient. And I think we are trying to do that in the very same way, but more visual. So let's say the complexity, it will be very, very similar, which is absolutely none, hopefully, but we are aiming to do it more visible, so it will be like even more convenient, so everyone can use it, even without any technical experience at all. I think we are running out of time. Thank you everyone.
00:24:43.566 - 00:24:55.854, Speaker A: Yeah, I just want this. Thank you. So yeah, thank you as well from my side. And we'll be around if you guys have any other question. Thank you.
