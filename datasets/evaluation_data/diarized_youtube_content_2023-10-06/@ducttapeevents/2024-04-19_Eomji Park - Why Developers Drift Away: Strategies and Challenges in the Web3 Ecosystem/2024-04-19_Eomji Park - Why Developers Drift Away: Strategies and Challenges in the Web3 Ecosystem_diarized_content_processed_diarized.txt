00:00:01.000 - 00:00:31.116, Speaker A: Hello everyone, can you hear me? Well lovely. So first like thank you Michael for a kind intro and also Ethereum juric team. This is always great to come to engage with local community. Today I'm going to share why developers drift away. But truly what we're going to discuss is what is the motivation developers come to the ecosystem, how they can stay and what kind of strategy we can take. So let's get started. First in code club.
00:00:31.116 - 00:01:20.358, Speaker A: Perhaps some of you never heard about this or heard about us somewhere, but don't know what we are doing. So we are education community. So we are helping you to develop your career path through different types of learning program, building program, and also like a different career path program which is like boot camps, hackathons, accelerators and hack routes and so on. So last years we have been working a lot with the different protocols and projects to run developer training program or early stage projects, onboarding program and we could see specific patents and today we are going to share about that. So first thing, perhaps some of you coming and thinking about what is the key like to have a lot of developers on ecosystem. Everyone is cautioning about this and I must give a live answer. The absolute answer is there's no one specific solution fit to every protocol.
00:01:20.358 - 00:01:59.294, Speaker A: Maybe if you think about what protocol has the most developers, maybe like three, four come to your mind. Do you see any specific things they are all doing together? I'm sure that it's really difficult to find the mutual patterns like everyone doing. There's the best practice stuff. So there's a lot of components you need to do, but you cannot exactly copy the other strategy. And there's multiple reason. First is open and decentralized nature of the web three ecosystem make it difficult to creating some developer retention. We cannot generate how to say natural login effect.
00:01:59.294 - 00:02:44.050, Speaker A: And this limited control over our audience is actually a feature. That's what we love about web three. We come for permissionless system that anybody can come and build and deploy on your network and if they don't like they can leave. So we actually like it. But when we are on the shoes, in the shoes of onboarding developers, we start to worry about how can you lock them in? Why we actually came to this ecosystem because we don't want to be locked by something. So let's think about how can we provide specific value to developers low switching costs. So like as we discussed about like creating locking effects like a we have a very low switching cost, you cannot charge them a membership fee of the one year so that they will stay in your platform.
00:02:44.050 - 00:03:29.610, Speaker A: So it's rather easily people can come entering and exiting your platform. So you can see that platforms are making different vampire attack. Especially if you have a similar tech stack, you will have similar events trying to luring others into your ecosystem, which works. Also you need to think about that same way you can lose your audience as well. So why developers are coming to web three? I specifically said that why developers? But we can ask same questions to ourselves as well because a lot of people are coming to web three due to in the beginning maybe similar but yet broad reasons. One is of course like a passion for learning something new. A lot of people coming in web three, especially even during the bear market are like people who are genuinely curious about something new.
00:03:29.610 - 00:04:19.932, Speaker A: That doesn't mean necessarily they are staying around because when they see another new and interesting thing they may run away. But this is still an interesting point that early stage developers users are coming into the market because they are very very curious and they will become your market users and advocacy becoming an advocate. And another thing is of course like attraction of the ethos, like decentralization and autonomy. Now a lot of debates going on with the mass adoption making less dislike Athos visible, but still we cannot, you know, neglect that this is like a great ethos, like a driven community. Another thing is of course you have a desire to be part of some revolutionary shift. So there's some technique here, like a paradigm changes happening every 2030 years, perhaps like a fastest like ten years. But there are certain things you have missed.
00:04:19.932 - 00:04:55.978, Speaker A: When I was young, you know, like when people are building like a Internet, like I was like a user but I couldn't contribute at all. When there's dot bubble, everyone making an app. I was basically teenager. But then like when smartphone comes, when people start to making app again, like I miss that wave and I see that like a blockchain is another interesting paradigm shift. And I wanted to be in and I see that a lot of people coming in there and of course afterwards we heard a lot that people come for texting, for community. So you see that a lot of smart people working with you. So those forward thinking people, collaborative community make you stay.
00:04:55.978 - 00:05:43.304, Speaker A: And of course like last but not least, we cannot lie to ourselves that a lot of people are coming for the potential financial upside as well. But those like grids should be match your ecosystem needs. So if you're building your own ecosystem or project and you want to onboard a developer, you need to think about why you need those developers in your ecosystem. And if your stage of your projects, your protocol is serving those. Let's say this is like a kind of simple ones. Like when you think about you want to raise your awareness, you want to test your product market feeds, you want to test your latest protocol updates, support some tooling, that info projects by those developers coming in. You don't need to hire 100 developers, but your community is going to be building or finding some solutions.
00:05:43.304 - 00:06:34.944, Speaker A: Like you couldn't serve it yet. So maybe your protocol is like a keep stopping, you need to kind of test it with the community members or nurturing ecosystem projects, startups and finding talents. If you're ecosystem looking for developers and thinking that this is all you want at once, you are having a very wrong strategy, because not every one of these can come all at once together. If your protocol is so young that there's no tooling and no jobs are ready there, how would you handle some startup coming and building on top of it? And they even don't have a basic tooling. So I'm not saying one is superior or it should be chronicle only. But what I want to say is when you're setting up the strategy, you cannot simply ask your team achieving these six goals with one thing. It should be a different approach and different things by stage and programming.
00:06:34.944 - 00:07:18.692, Speaker A: So let's think about why developers are coming, but why they're staying in your ecosystem and not going away. And before going further, I want to ask questions. What scale are we talking about? Because all of you want to have million developers in your ecosystem in the future, but what is the scale now we are talking about? In the end of 2023, Electric Capital had a developer report about overall ecosystem. So there's a less than 7000 full time developer. And then this definition of full time developer is the people who work more than ten days a month. So it's basically like less than two weeks, you know. And we consider as a full time developer, monthly active developer around her ecosystem is like 22,000.
00:07:18.692 - 00:07:56.594, Speaker A: So let's make a simple calculation over this, like how many protocols are fighting for getting developers. Of course, easily we can say 100, but let's say there's top 50 protocols actively working on onboarding developers. If you divide 20,000 by 50, it comes to something like 400. 500 developers might be active while only 30% of them are actually full time. So 150 full time. Why like 500 in average? Which when you ignore that Ethereum has the biggest community in this sense. So in reality all of you going to have a smaller set.
00:07:56.594 - 00:09:10.246, Speaker A: So this simple math we went through, so 400 developers while 120 going to be a full time developer in your ecosystem, do you feel like it's small group or it's a big group of developers, like 120 developers in your protocols? Small, right? Feels really, really small. But let me ask this question. If you're onboarding 400 developers every quarter, do you have 400 jobs in your ecosystem? Do you have 400 opportunities? They come not only taking one tutorial and finish, but do you have any other opportunities they can stay and do something? If you don't have maybe you don't want to onboard 2000 developers at once and it's a little bit delusional. So those retention hurdles, we need to think about why developers doesn't come back to your ecosystem and we are talking about a high number, why we actually don't have infrastructure or even opportunity to serve them. So you see that there's little batches, so that what we need to do is we need to improve the developer experience funnel by creating different types of opportunities. It should be curated. So they're like you shouldn't just simply follow the other ecosystem how they're doing because there's even a huge culture difference.
00:09:10.246 - 00:10:12.674, Speaker A: And also you need to align that with stage of your ecosystem depending on if you already launched your testnet, Mainnet, if you already start to have some startups that they start to offer some job opportunity or are you still working on basic tooling if the basic tooling is driven by your core developer team or community team. So all this kind of thing going to be playing a role to onboard developers in your ecosystem. So let's think about some simple funnel. So there's like a funnel when you think about like oh, there's a developers appeared. You may encounter developers in maybe conferences like in some general hackathons so that they may not take your bounty but they saw your name, they had a chat with you, maybe like if they saw you in some like a youtuber or Twitter space. So like hey, there's some example that they just discover you and they just know your name, but they don't know exactly what you are doing and they don't know exactly like what kind of thing they can do. And then when it comes to a little more like an interest, like they will start to look at your documentations, they read some articles and here it comes.
00:10:12.674 - 00:10:59.178, Speaker A: That they may see that a lot of Twitter thread of the rails of your ecosystem, they start to kind of get engaged and they are following those market users or their friends who are talking about like, hey, I was building this and they have something, something or like there's some kind of basic education to choose. They start to watch because in this evaluation stage they start to actually spend time. Because first one is like, you know, they didn't decide to spend time, it just got exposed. But at the second stage they start to like spend time and try to evaluate if I want to use my time more and then they start to learn more. So once when they said they're like, okay, it's worth it to spend time a little bit, they will start to have some dedicated learning experience. It means that they may follow your bootcamps. They will take some specialized workshop on some specific SDK or certain API.
00:10:59.178 - 00:11:39.880, Speaker A: They will start to build something even though there's no direct rewards there. They will request one on one support with your team, they will talk to your engineers, they come to your office hours, and after those they need the opportunity. They actually can build. So they learn something and they start to build something. And building is sometimes like they are very creative, but sometimes you need to give some guidelines which can be one is a very specific hackathon focusing on your ecosystem or you start to make the meeting in the community events. They start to feel more belonging in this building period. They are not only building projects, they actually start to evaluate the culture of your ecosystem as well.
00:11:39.880 - 00:12:08.764, Speaker A: So they come. So in the learning evaluation period, they just check the documentation. In the documentation. If documentation sucks, they may just leave because they just don't see that. Why I need to spend 20 hours to figure out this bug, to having a simple test. When they pass this one, they come to learning and spending some time after that they may not decide to build and they still going to think that this is worthy of learning. And I got some new extra batch I collected but I will not stay.
00:12:08.764 - 00:12:51.864, Speaker A: But if they said that, ok, this was quite like a lean experience, I start to build a little thing and then actually they start to evaluate your culture as well. At that time it's really important that what kind of contact they have. If you see like one of the biggest deaf communities, crazy how many times they are spending time with the developer in one on one interaction. I know this is not scalable, but your market users, in the beginning, the small set of people who are going to be the advocate of your whole ecosystem, you need to actually spend time with them because a lot of them going to be following your ecosystem in a way unreasonable way. At a certain point they like it, then it's beyond the tag. They like the culture. I'm not talking about funway, just like a meme culture.
00:12:51.864 - 00:13:53.832, Speaker A: But in general people start to build a relationship, they start to feel belong there. You didn't ask but they start to explain about your technology to someone else and then their friends come and building together. And these afterwards you need to then have these lawyer users, they become your advocate. You need to offer programs like Ambassador program, maybe you need to create an accelerator incubator grant program who want to be a startup in there. Or you offer bounty program who doesn't want to fully commit but they want to freelancing around because they can just take contributing to the creator dashboard or they want to fix some bugs for you or different career opportunities and many more. These are not set in stone in exactly chronic order because maybe some of the events you want to use for different purpose. But what I want to say is you need to think about how developers come to your platform, how to discover until they become a lawyer and advocate users in your ecosystem, you need to provide certain opportunities.
00:13:53.832 - 00:14:38.082, Speaker A: Otherwise you may just say in a paper number, we have 2000 developers got more than our ecosystem, but definitely there will not be 2000 different activities around in the ecosystem. So that's pretty much it in a nutshell. And what I wanted to say is obviously there's no single key and one solution. I can say that like in this stage of your protocol, you just need to follow this formula. But you can see that this is quite complex and still a lot of parts are not scalable solution, but you need to go through the funnel. So you, my suggestion is first you need to of course like talk to your own Devrel team. Dev Rel is the best.
00:14:38.082 - 00:15:21.594, Speaker A: There's several devrels here, so devils have asked, okay, you need to talk to them how to build those relations with developers. It takes time to see your community sentiments and what kind of opportunity you can offer. And then of course you need to create all those educational contents around. So developers going to keep learning and going forward, you're going to offer job opportunity or any other opportunity, they can stay longer and becoming a person who can contribute and they can create opportunity for someone else. So that's pretty much it. And if you have any question, I am very happy to answer. I wrote my Twitter accounts there so they're like happy to happy to send me a DM if you have any other question.
00:15:21.594 - 00:15:40.514, Speaker A: Also in code club. So we are education community, we have a lot of different education program for developers. So if you want to take some program as developer, you're very welcome. If you're ecosystem building developer community, you want to discuss about education program I am very happy to discuss as well. Thank you very much.
00:15:43.494 - 00:16:29.796, Speaker B: Thank you so much. Omchi, do we have any questions from the audience? Hello. Thank you. I actually have a question regarding the hackathon part. We found out that a lot of people just show up for the hackathon, they build on a hackathon and then they just leave. Because the reason they were hacking on the hackathon is because of the bounty and not because they were actually interested in continuing working with the protocol. And that has actually made us drift from hackathons a little bit.
00:16:29.796 - 00:16:38.996, Speaker B: I wonder, what strategies do you recommend or would you define for making these people stay instead of just drifting away?
00:16:39.140 - 00:17:24.364, Speaker A: So very good questions. So a lot of hackathons, this is not only actually the worries about the protocols, but that's the worries about the hackers as well. Because often hackers are asking us that I started to become a multiple hackathon winners and people keep asking me to build different protocols. I don't know what to do. And then even though they have some motivation to building the same thing further and they start to get some temptation that others are asking. If you build this one, is it going to be kind of short term rewards? So this one, my suggestion is if you're thinking about different types of hackers who come to build like a father, but who just build for the bounty, are they bad actors? I would say they are not actually bad actors. Rather we need to design bounty more clearly and cleverly.
00:17:24.364 - 00:18:11.384, Speaker A: So those bad, so to say bad actors who are perhaps like quite skilled yet they are not intended to say in your protocol, you need to use them as a product tester. So your hackathon projects, there must be a tester so that there's a very specific new protocol, updates you want to make them some hackathon projects so that your devil team doesn't need to build a demo anymore. So you need to make them build a demo for you, you need to make them testing things for you. Those hackathon prizes are kind of freelancing bounty. So they're like there's a competition building, they're building a demo for you and then they are leaving your ecosystem still fine, they contributed their own way. If their idea is very innovative and open source, because it doesn't exactly belong to them, because it's kind of open source projects, then others can build on top of it. And I see it as a contribution.
00:18:11.384 - 00:19:01.954, Speaker A: So if you're rewarding certain hackers building exactly same thing, then you should stop rewarding them, but rather make them try very new thing, a little bit like push the boundary and then they leave. Still, it's worthy that you use them as your extended dev rel team. And then maybe each time when you have a new feature to try out, you can invite them again because they will be very interested in trying something new and then building a prototype for you and they will leave again, which is completely fine. So my suggestion is please don't reverse someone building exactly same thing. You need to perhaps even like making two different types of track for people who are making copying appish when they're beginner. But if they're like a good developers, even though they don't want to stay around, use them as like part time contributor, try to build a lover. If they're like making great prototype, that's a great win.
00:19:01.954 - 00:19:06.674, Speaker A: Any other questions?
00:19:07.814 - 00:19:09.434, Speaker B: Do we have any other questions?
00:19:14.914 - 00:19:32.174, Speaker C: Hi. So I thought you made a lot of really good points throughout the presentation, and I'm curious if you had any stories or kind of real world examples that you could share of protocol or of projects that do those things either really well or haven't done those things really well.
00:19:32.674 - 00:19:59.486, Speaker A: So there's like a few case I can share. So one thing is like the individual developer, let's say. So it's around four and a half years ago at the Devconnect Amsterdam, we were giving her this discovery time. We were giving some workshops on recast and there was a lady sitting in the crowd and she was there even not because she wanted to come, her friends was coming. She was a web two person. She just came there. She was developer at IBM or some kind of web two company.
00:19:59.486 - 00:20:50.542, Speaker A: And then she started asking some provocating questions. And after those workshops she sent a message that she's actually interested in and she wanted to learn. So we provided like a lady debut camp slot to her, even though she didn't have any experience previously. And then after solidity and expert solidity, you see that those people start to come to the hackathons. And so last year in Denver, so around a year later, we got the news that she became a solution architect that opens Zeppelin. It took a year and then a lot of hackathon. You want to have a KPI in like two days, three days or in a month, but it take a year for developer onboarded in the ecosystem, ending up having a job so that they can have a sustainable their dev journey by themselves, not protocol injecting money to their like a, their how to say their like activities.
00:20:50.542 - 00:22:00.538, Speaker A: Same thing with like startups. Like we got some startups like asking us, they're like okay, we are, we are keeping suggested building something from scratch all the time. So I'm not saying that every hackathon should be like this, but in encode club what we do is we allow people entering the hackathon with existing project, but what they need to do is they need to build something like a new feature on top of it, and they will be only judged by the edit part, so that if you're in the motion of the longevity, you can still incentivize them building something, making a fair playground to compete with the others without stopping them. And by doing that, you see that sometimes they come, they don't need to let's say you're building a game and you want to test in a VRF. You don't need to build a game in the hackathon, but they were making a launch manual, select a VRF app, which they are having existing project, they're going to implement it. So those kind of curated approach, depending on the stage of your ecosystem, stage of projects you need to offer differently. So some success stories I would say is those type of developers who successfully ended in the job or those hackathon projects who successfully raised and then ending up in the ecosystem.
00:22:00.538 - 00:22:19.454, Speaker A: But there's a case that also they moved a different ecosystem depending on the support. So like those one, if you're a protocol, I don't know if you're a protocol case or if you're the project case, but if you're a protocol, you want to curate your program and those like market users, you want to stay in contact very tightly.
00:22:21.904 - 00:22:26.504, Speaker B: Thank you so much omchi. Another round of applause please.
