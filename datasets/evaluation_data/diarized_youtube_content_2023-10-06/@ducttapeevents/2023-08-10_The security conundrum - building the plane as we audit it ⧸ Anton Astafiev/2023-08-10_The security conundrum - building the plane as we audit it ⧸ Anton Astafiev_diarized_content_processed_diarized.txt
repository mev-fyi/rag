00:00:04.880 - 00:00:52.046, Speaker A: Hey, everyone, here's the clicker. Cool. Hey, everyone, I'm Anton. I'm head of security at Metal Labs, the team that is behind Zksync Lite and Zksync era. But today we're not talking about player two and which advantages roll up spring and whatnot. Today we're talking about how to build a secure system, build it fast, reach the market, get the adoption without actually compromising the security, which is a tricky question given that the novel technology usually comes with unobvious caveats that we cannot predict often. So, a bit about my background.
00:00:52.046 - 00:01:49.182, Speaker A: I've been working in different web two, web three places in development, in privacy and security, some research and so on. Most lately I'm involved with different blockchain projects and doing security for blockchain. Basically, what we're talking about today is how can we align the speed of development. Everybody wants to move fast, the product team wants to move fast. Developers want to roll out their stuff as soon as possible and at the same time taking a as careful approach as possible, doing everything that is under our control to actually protect the users, to not ship raw systems, to not really allow unsecure code to reach the production, and to lead to a terrible compromise. Today I will be talking about how we approach this. And this is not going to be very merrillabs or Zksync specific.
00:01:49.182 - 00:02:38.104, Speaker A: This is going to be more of how to really juggle those priorities. So very important disclaimer first, this talk is not for the people that are looking to cut corners. This talk is how to speed up the time to market without compromising on security, without cutting corners. If you're looking how to cut the corners, it's not the right talk. And a very important thing, if you are looking to ship the secure system, the audits and all the security measures will take quite some time. You cannot really shorten the time that it takes to secure the system. You can only juggle it in different ways to reduce the time to market.
00:02:38.104 - 00:03:08.600, Speaker A: So here's to our story. Our heroes are security team, development team, product team, and guest. Staring is the external auditors. Now we're switching on to the problem, and this is going to be an overly simplified or slightly exaggerated conversation that I unfortunately have seen during my career several times. And the way it goes, the development team is like, okay, we're almost ready. The code is ready tomorrow. And then the product is like, yay.
00:03:08.600 - 00:03:44.068, Speaker A: Launching, launching, launching. Are the audits complete? And I don't even know where to start to explain that. You cannot really have completed audits if the code is only going to be ready tomorrow, this is just not possible. Slightly exaggerating, but only slightly. This has happened in different forms and shapes several times through my career. So what can we do in the worst case scenario? Again, overly simplified, let's say we need around two years of development. Worst case scenario, at the end of the development, we're like, okay, good, we are ready.
00:03:44.068 - 00:04:18.252, Speaker A: We're ready for the audits. And the auditor's like, yeah, you know, I'm available in a year. I think everybody's been there. And then the audits also take a year and time to market for years. And the product team is like, what? And the investors are like, you said you need two years to develop the thing. Why are we now just speaking double the time? This is, yeah, this is not what we agreed on and what is going on here? So here we can start with a very obvious thing like I think everybody is doing. We'll remove this waiting.
00:04:18.252 - 00:04:41.304, Speaker A: This is the obvious place where we can cut. So we're eliminating the waiting time. There are two ways to eliminate the waiting time. One is pick whoever's available right now and just, you know, kind of compromise slightly on the quality of the audits. This is not the recommended way. We really do not want to cut the corners. We need to engage early in a better scenario.
00:04:41.304 - 00:05:05.086, Speaker A: That's where we are ending this year. One year waiting time is then in parallel with the development. And our time to market is now three years. Much better, but still not ideal. However, there's a nest risk here. What happens if the development is slightly overdue? And the development team was like, oh, we need another six months. You know what happens.
00:05:05.086 - 00:05:36.414, Speaker A: Yeah, you know, I'm already booked for the next year, so, sorry, next slot and time to market and we're back to the worst possible scenario. So this is something that you need to be very careful about when you're eliminating the waiting time. There are a few things to keep in mind. First, you need to pick your auditors. Really know who you want to look into your code. Ideally, this should be the people that really understand what your business, that have the experience with specific technologies, languages and so on. And you need to engage early.
00:05:36.414 - 00:06:33.744, Speaker A: You need to already way beforehand to be in touch with them and to see what their availability is. The second thing is you need to really have a good estimate of the development timeline, because if you are planning the audits one year in advance and your development is going to be delayed or completed faster, you need to adjust. So the other important thing is you need to, when you're already engaging with the auditors, you need to already know, at least in some form, the scope of the audit. It's not going to go well if you come to the auditors and say, you know what, we're building an NFT platform or maybe Defi, oh, we actually haven't decided yet, but are you going to be able to audit it in a year? And you know what? It's going to take from two weeks to maybe 40 weeks. Yeah, TBD. We'll see. You really need to know what you're talking about and this will help you to pick the right people.
00:06:33.744 - 00:07:35.204, Speaker A: And a very important piece here that many people forget is ideally you need to have some flexibility arranged with your auditors because there may be last minute changes, scope slightly expanding things, slightly delayed, or you're ready a bit earlier. You need to be aware and you need to deliver this message to the auditors in advance and have the agreement with them and ideally have a constant check in with them. So we have signed, in a year we'll start the audit. But you know what? In six months we're going to have a check in and see if we're on track. Are we actually going to be ready by then? If the scope has changed, has something different come up in the meantime? And these things are, the auditors will be also really appreciating because they will be well prepared to really look into your project. But the question is, can we do better? Well, ideal scenario is the audit is ongoing at the same time as the development. Cool.
00:07:35.204 - 00:08:10.606, Speaker A: And, well, now we're talking, but I feel like we already had this conversation. The auditors are really picky. They don't like auditing code that is constantly changing and they really don't like auditing code that doesn't exist. So this is not an option. However, a very good question. Are you building a monolith project or is it modular? I dare say that in 2023, if you're building a monolith project and it's larger than a small pet project, you're probably doing something wrong. Because modular development split into different components come with many advantages.
00:08:10.606 - 00:08:58.026, Speaker A: Like you can develop them in parallel, you can test them independently, you can scale them independently. In a monolith project, you're going to have bottlenecks and splitting them out and scaling them out, scaling them up separately is going to be very hard and you will spend a lot of time on actually developing this and redoing your monoliths into components. Upgrading is easier and so on. So the general recommendation is split your system into self contained components, which I think many developers are already doing, and build the most critical ones first. The thing is how that helps with our auditing approach. Let's say we have three components that we were developing in three years and in reality it's going to be actually much more complicated. There are going to be things done in parallel and so on.
00:08:58.026 - 00:09:43.616, Speaker A: But let's say we have split it into three main pieces and we're doing them one by one and they take exactly the same time. Within those two years, eight months each, we engage with the auditors at the very beginning. We have waiting time kicked off one year and we're building the first component and we're building the second component, third component. As you can see, the audits have started after the components were completed and we can actually truly and properly audit the code that has been fixed already, that has been stable already and this has been completed already. So we can say, here's the repo, here is the commit hash, and the auditors will be able to say, this is the code that we audited and everybody will be able to verify that later. Great. And as you can see, the development in total still takes two years.
00:09:43.616 - 00:09:55.324, Speaker A: Nothing changed here. The audits total takes one year. Nothing changed here. Waiting again one year. However, the time to market is 2.33 or two years and four months. Great.
00:09:55.324 - 00:10:15.830, Speaker A: So this is pretty much the main approach that we were taking. However, there is more to do here. You see there are some gaps where nothing is happening. Can we fill in those gaps with something? But first, let's do this. Summary on the modular audits. First, build the most critical pieces first. Audit them first.
00:10:15.830 - 00:11:16.494, Speaker A: You'll have more time to test them, run them on testnets, show to different auditors, run with the community, open source the code fully and so on, and battle test those most critical pieces for longer time. Second, ability to move the starting dates and having this flexibility with your auditors becomes much more important in this case because now you're not planning just the final delivery date, you're planning each milestone. And planning each milestones is much more complicated and things may be depending on each other. And the most important part that you need to understand this is going to cost you more. Not because the audits are going to cost you more, but because most likely once you complete the first component, in our case, for example, this is the whole layer one smart contracts. You complete those and you are working on something else that is interacting with those contracts. What will happen? You will realize some extra features are needed here and there, or some things have to actually work slightly in a different way.
00:11:16.494 - 00:11:47.974, Speaker A: And you will have to update that code and make some, some changes into that code. Making those changes without auditing them is a really bad idea. This is exactly how a few well known hacks have happened. Like we had six audits of the code, but then we were hacked. And then it appears that nobody has audited the latest upgrade where the bug was introduced. So you will have to audit your first component and then do a bunch of diff audits, upgrade audits in the meantime, till you actually can launch. This comes with extra cost.
00:11:47.974 - 00:12:37.734, Speaker A: It would have been cheaper for you to wait till everything is completed. Everything interacts nicely. All your integration tests work and now give it to the auditors and they will spend four months, for example, on it, instead of spending four months on it in one run, and then two weeks here and two weeks there and two weeks there and you're still paying for it. However, the price may be quite justified if we're cutting the total time to market by, by two years now, what else we can do? How can we fill in those gaps? Obviously we want to do internal audits. Well, the reasoning here, auditors don't like to work on the code that is constantly changing. In house application security protocol security team is embedded in the development process anyway. They are involved at the architecture design stage already.
00:12:37.734 - 00:13:13.000, Speaker A: I hope if you're not doing this, you should. They're involved from the very beginning. They know what's going on, they know what the system is doing, they are participating in the design decisions, they are contributing to those and they can start working on the code earlier, although it will be still changing. They don't need to acquire as much context and well, it's okay. We are fine with actually redoing the audit. It happens sometimes that we are doing the internal audit. We highlight, like within a week we highlight some issues.
00:13:13.000 - 00:13:33.248, Speaker A: We come back to the development team and the development team was like, oh yeah, good, good, thanks, thanks. We've spotted these two ourselves, fixed. We're not looking at the latest code. Fine, okay, happens. We do it again and again. We take more time. But that's kind of part of the job and a very important caveat here.
00:13:33.248 - 00:14:29.424, Speaker A: This is not, internal audits are not a replacement to independent audits. The whole point of independent audits is for the general audience, for public to be able to see that somebody else, but the team itself that is financially motivated by this specific project, has done the research, has put the time and effort into understanding and has put their name behind it. Because the auditors, especially the most reputable auditors, their financial motivation, their incentives are with keeping their reputation clean, not with supporting any new rug pool. And this is the point here. The independent audits have to happen anyway. And they have to be done by independent, external, unaffiliated companies, ideally very strong auditing companies with very strong expertise. Another thing that we can do is public contests.
00:14:29.424 - 00:15:03.288, Speaker A: In our experience, these contests yield amazing results. Actually, we have received so many reports. We have improved the code quality tremendously. We received things like reports that are not security issues at all, just minor qas. But all these tiny pieces together contribute to cleaner code base, better readability and fewer bugs in the future. The incentives in those public contest audits are very different from the traditional audits. Traditional audits, they are paid per hour.
00:15:03.288 - 00:15:44.524, Speaker A: They are looking at the code line by line for the public contest. Whoever reports the issue will receive part of the pot. And this will be shared with everybody reporting the same thing. So it incentivizes reporting unique things, unobvious things, opaque things, things that nobody else was able to discover. We've seen people trying crazy things, combining different approaches in different places, that we probably would not be able to discover easily within the next six to twelve months. And then maybe two years later, somebody actually would have realized how to combine all those things together. By then we have huge TVL and it's a complete disaster.
00:15:44.524 - 00:16:10.900, Speaker A: Those were really, really good. That's a really good experience, in my opinion. It doesn't replace a traditional audit, but combining those is really, really good. We did two, we're planning to do more because we were very happy with the results. And finally, another thing you can do. And that's what we were doing as well. Bring in independent researchers, not people working for big auditing companies.
00:16:10.900 - 00:16:39.978, Speaker A: They're usually much more available. They are very skilled, if you know where to look. And you know where to look, because you just go to the top bug bounty programs and look at the top performers there. You go to public auditing contests and you look at the top performers there. What we do when we need to audit a bridge, we go to somebody who discovered critical vulnerabilities in l two bridges. And can you take a look at Outbridge? Spend a week, just look into the code. Not much code.
00:16:39.978 - 00:17:19.644, Speaker A: Spend a week, we'll just pay you. And maybe we'll not be publishing this audit because some of them want to remain anonymous. Some of them don't really have this kind of a publicly known name behind it. But the important thing for us is that we actually getting additional value of people that will be breaking our stuff later via the bug bounty and we just are getting a head start here. Another example for account obstruction implementation. The best you can do is go to the public contest on account obstruction. Get the top performers and ask them to look at your implementation, your design choices.
00:17:19.644 - 00:18:14.412, Speaker A: So now how this all combines together, this is getting more complicated. I see. In reality, is it actually much more messy because the components are not components, they are actually split into smaller pieces, all of them, and they are interconnected. Things are happening in parallel and juggling those things and making sure one thing is ready by the other is actually quite hard. But when we put this all together, at the bottom we have this very same waiting and auditing, traditional audits. At the top we have the same development process and in the middle we have like internal audit. You see it started before the components are completed and it's completed slightly after we actually, due to this head start, due to the spending time and being embedded in the development process, we can actually complete the audit within a couple of weeks after the the development is done.
00:18:14.412 - 00:18:35.324, Speaker A: Unlike the if we would have started right at the completion date. On the other hand it takes longer. So if we start at the completion date, it takes four months. Otherwise we need to spend five months. But we are done in two weeks after the completion. Pretty good. If you look here like component one, done, done.
00:18:35.324 - 00:19:18.200, Speaker A: The audit, external audit is starting after the internal audit. Then the green ones are independent researchers looking into it, the kind of a blue ish in between. Our public contest, they're all aligned well and they're all happening and orchestrated in a way that the internal audit is completed after the component is done and we indeed are sure the code has not changed, then we hand it over to the external auditors. Then we hand it over to, or maybe not complete, but at least critical pieces, some parts of it, to independent researchers. Then we haven't public contest and so on and so forth. And only the third component here is not fully covered by all of those things. But still our results are.
00:19:18.200 - 00:19:58.264, Speaker A: Our time to market is two point like 204 months, two years, four months. Every piece has been covered by independent external audit, as it should. We had public contests completed and fixes applied to two out of three components. We actually still have time to do it for the third one, for example. And independent researchers also additionally audited most critical pieces of two components that we built. And now if we go back to the modular advice, start with the most critical first, which gives you more time to apply all those measures and to be much more confident in the code that you're rolling out. This is pretty much it.
00:19:58.264 - 00:20:20.054, Speaker A: Of course, it's much more complicated. It takes a lot of planning, it takes a lot of juggling things around. But this is the gist of how we can do everything that we can to protect the systems and also to not to delay unnecessarily the public launch. Questions?
00:20:25.714 - 00:20:55.570, Speaker B: Well, unless there are questions, then thanks a lot for your talk. Or there is a question. Sorry, there is a question. You mentioned you are running public contests in parallel to kind of like the official audit firms. So how do you handle situations where during this public contest people find more bugs or issues than the officially hired teams?
00:20:55.762 - 00:21:19.548, Speaker A: So I must probably. Yeah, I cannot go back. They were never running in parallel. Traditional auditors do not like when somebody else is running a public contest because if this happens, they are not going to look good. So this is why we're usually not doing it in parallel. On the other hand, for us it's value. In any case, we got the bugs reported and we will fix them.
00:21:19.548 - 00:21:51.048, Speaker A: The more the better. It's all right. We can come back to the auditing team and say, like, look, how did this happen that we missed it? Maybe we should actually improve somehow the documentation or the way we collaborate. But on the other hand, if the same things are reported from two different sources or different things are reported from two different sources, it's fair enough. We have to pay for all of it. If at the same time the same code is in the bug bounty program and this comes through the bug bounty as well. And it was not a known issue at that point.
00:21:51.048 - 00:22:08.224, Speaker A: And then we get it from the auditors later. Well, salary we have to pay. And to be fair with the community, we have to basically stick to our commitments and just hope that they help us to discover everything, everything that is possible.
00:22:13.364 - 00:22:14.004, Speaker B: Thank you so much.
