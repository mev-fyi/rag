00:00:10.240 - 00:00:32.964, Speaker A: Hi guys. Yeah, my name is Naim, I work for Pon. At Pon, we are building peer to peer mortgage protocol. And today I'm here to talk about tokenized asset transfer rights. Before that, I have a small not question, but like I want to ask you a favor. I had a bed with my friends. He's sitting right behind that door.
00:00:32.964 - 00:00:46.724, Speaker A: We bet how many times you will clap during the presentation. So I'll ask you throughout the presentation to clap without any purpose. So please just do that. Help me, the vet. So we'll start right now, please. Thanks. Amazing, this one.
00:00:46.724 - 00:01:21.708, Speaker A: So let's get to it. So first, this is the agenda. It's very simple. We will talk about what the tokenized transfer assets are, why it's useful, and how we can actually build that. So what are asset transfer rights? You could probably guess that asset transfer rights are rights. To transfer an asset in the current ecosystem, it's assigned to a token owner or approved address. We can tokenize that.
00:01:21.708 - 00:02:01.294, Speaker A: By tokenizing that, we mean creating a new token representing the transfer rights, giving the token holder and nobody else the right to transfer the underlying asset. So even though I'm the owner of the asset, the ATR token is held by somebody else, I cannot transfer it. Yeah, there was it. That's the tokenization of asset transfer. Thank you. So why they are useful? First use case I want to talk about is security. So imagine you have some kind of very valuable NFT with the utility assigned to it.
00:02:01.294 - 00:02:38.880, Speaker A: You want to use the utility quite often. It can be proof of ownership by signing an off chain message, or it can be actual on chain transaction which would give you, I don't know, it can be in a gaming asset, for example, very valuable gaming asset. Right now, you would have to deal with a trade off. You can store it in a safe, which is very safe, but it's very inconvenient to actually use the utility there. You would have to. Oh, it's old slides. Okay, nevermind, let's keep that.
00:02:38.880 - 00:03:17.618, Speaker A: Or you can actually keep it in your hot wallet where using the utility is super convenient. You can use it every second. Basically you can sign a new message, but it's very insecure. In case of private key is leaked, the hacker could basically drain all your valuable nfts. With tokenizing of transferrites, you can do this little trick. You can actually keep your NFT in your hot wallet, benefiting from all the utility and easy signing, but tokenizing the transfer rights and holding them in a safe. So if you think about it, actually you don't want to transfer that asset that often.
00:03:17.618 - 00:03:54.516, Speaker A: So it's quite okay if you have to once per, I don't know, a year, let's say pick up your ledger or treasure or whatever and actually go through the inconvenience thing of transferring the asset. But you want to use the utility quite often. So this is a great, this is a great setup. Your assets are safe, but you can still use the utility very, very easily. This is just a slide. To sum this up, in case somebody is watching the slides and it goes down to this, the owner can still use the utility of the asset from the hot wallet. And in case of a hot wallet hack, the hacker cannot steal any assets.
00:03:54.516 - 00:04:19.524, Speaker A: This is amazing. Thank you. Thank you. So the next use case is renting. Currently you have three options. You can use a wrapper, that's fine, but the wrapper is the true owner of the asset. So if you need to actually sign a proof of ownership, you won't be able to do that.
00:04:19.524 - 00:04:58.734, Speaker A: In case of airdrop, the airdrop will be, it will be dropped basically to the wrapper. Another way is having a renting natively in an asset contract. A lot of gamefi assets actually do that. The problem with that is that the holder is stuck with one renting model. And last thing is, provide extra collateral. It can go down two ways. First, you would be able to basically rent only asset with price oracle, which will decrease the subset of assets you can actually rent, and you are risking liquidations.
00:04:58.734 - 00:05:53.540, Speaker A: Second way is that the renter is basically risking that the collateral will have less value than the rented asset itself and the tenant will actually not return it. So what we can do, we can actually, again, you can guess if we tokenize the transferrites. It's super, super helpful in this case. So you have some renting protocol. Let's say the renting protocol will tokenize the transferrights, hold them as a collateral and transfer the asset to the tenant. The tenant is the true owner of the asset, so he can sign whatever he wants and as long as the terms are met. So in case it's a time, it could be installments, whatever rent, the tenant can actually use the asset.
00:05:53.540 - 00:06:38.236, Speaker A: But in case of default, the protocol will basically transfer the asset back to the original owner. So there is no need for extra collateral. The ATR token is a collateral itself. The tenant is the true owner of the asset and asset owner is not locked with one renting mark, which is great because it goes into this money lego narrative we are building in the defi space in these days. Another use case is lending. It's very similar to renting, but with the roles a little bit shuffled around. So again, you have a borrower, he wants to raise money for something, but the asset he wants to use as a collateral actually has some utility assigned to it.
00:06:38.236 - 00:07:15.702, Speaker A: So what he can do, instead of locking it during the whole duration of the loan, he can tokenize the transferrite and use the transferrites as a collateral. Again, there is some kind of lending protocol. In case of default, the protocol will transfer the asset back to the lender. So again, no need for extra collateral. The ATR token is the collateral user keeps the ownership of the asset. So let's say you have a decentralized parcel and you want to actually raise money to build something on top of it. You won't be able to do that with DeFi lending protocols in these days because the parcel will be locked in that protocol.
00:07:15.702 - 00:07:38.564, Speaker A: You are not the owner, so you cannot build anything on top of it. By using ATR, you will be able to do that. You are the owner. You cannot sell it, you cannot transfer it. But that's fine, that's the point of it. Lender can claim underlying asset in case of default via ATR. Another thing is that it nicely upgrades the buy now, pay later user experience.
00:07:38.564 - 00:08:22.464, Speaker A: So again, I'm buying something. I have just 30% of the price of that NFT. Let's say I can borrow the 70%. The protocol will pool these assets together, will buy the asset, tokenize the transferrites, send me the asset. But keeping the tokenized transferrites in the collateral in the vault, using them as a collateral for the loan I took to fund the rest of the asset. Yeah. And it almost feel like under collateralized loan, you're actually buying something with just 30% of the funds and you are actually getting the ownership of that asset, which feels pretty nice.
00:08:22.464 - 00:08:54.614, Speaker A: Yeah. So instead of transferring an asset to a vault for trustless claim, use ATR token as an assurance of claim. Just be careful, it's not silver bullet. It wouldn't work for mutable derivative tokens because the asset is owned by somebody. Even though he cannot sell it or transfer it, he can mutate it. So for mutable tokens, I can decrease the value by, for example, this univ. Three lp NFT.
00:08:54.614 - 00:09:20.254, Speaker A: I can just drain all the liquidity from it. So even though I cannot like sell it or burn it, I can degrade the value. So just like keep that in mind that it's not a silver bullet. You have to pick your use cases. It goes down to this so if you should leave with something from this presentation, it's that ATR token is the ultimate collateral. Please. Round of applause.
00:09:20.254 - 00:10:01.000, Speaker A: You're amazing. Thank you. So yeah, that was the why the few use cases I wanted to mention. And then now how to implement them. We have two ways. One is natively, if the asset actually supports tokenization of transfer rights, and second is by some kind of smart contract wallet which would allow us to tokenize the transfer rights of the asset, hold in that safe, and actually respecting the transfer constraints, the native approach is great. There is no, it's much safer.
00:10:01.000 - 00:10:45.278, Speaker A: There is no big like issues hiccups with that. You can actually let the owner to approve any other address. The asset contract would simply not allow them to execute the transfer, to execute the burn, for example. You cannot destroy the asset. Neither the cons is that immutable legacy asset will never support it. It's just if they are immutable and deployed, we cannot give them this utility, and we need to wait for new assets to implement it to be able to use it. On the other hand, the smart contract wallets, they can support legacy assets, we can use them immediately, but they have some trade offs aligned to them.
00:10:45.278 - 00:11:42.652, Speaker A: So let's say you have an asset with some nonstandard approval. The issue with that is that the smart contract wallet has to be able to prevent this transaction from happening, because it can check only things initiated from that wallet. So if there is an issue with approvals, basically what I'm talking about right now. So I cannot allow assets with tokenized transferrites to the owner to approve another address. Because the approved address would basically call the contract asset directly and it would bypass all the smart, all the contract wallet constraints I'm putting on the, on the asset and it has some gas overheat on top of it. The problem is, 0% of assets supports ATR tokenization natively. It doesn't make sense to climb here.
00:11:42.652 - 00:12:34.690, Speaker A: But yeah, thank you. So I want to, I don't want to talk a long about that, but I want to pitch Ponsave here. We build this smart contract wallet which allow you to tokenize the transfer rights and use it actually in our protocol. So what the Ponsafe is, it's a safe, multisig contract wallet with custom guard and module contracts that can mint ATR tokens on behalf of an asset owner and enforce transfer constraints. Who knows what the module and guard in a safe ecosystem is. Can you raise your hands please? Nobody cool. So module is a contract which you can align to any safe and the module is able to initiate any transaction without reaching the owner's threshold.
00:12:34.690 - 00:13:29.134, Speaker A: So on one hand it's super powerful, on the other hand it's super dangerous. The guard is a contract which you can again align or connect to your safe, which will check any transaction before and after it happens. So with those two parts of the safe ecosystem, we were actually able to build a contract wallet which would allow you to tokenize the transferrites, use them wherever you want, and give the ATR token holder the ability to transfer the asset from Sansafe, even though he's not the safe owner. If you want to read more about Ponsafe, here is a, here's a link to announcement blog post and yeah, that's it. There was the tokenization of transferrites. My name is Naim. You can reach me on telegram, on Twitter with this handle.
00:13:29.134 - 00:13:34.614, Speaker A: And yeah, if you have any questions. So after one round of applause.
00:13:40.394 - 00:13:40.778, Speaker B: Great.
00:13:40.826 - 00:13:45.684, Speaker C: So that's definitely a question. It's also a, this is like a hometown project.
00:13:46.264 - 00:13:46.832, Speaker A: Yeah.
00:13:46.928 - 00:13:49.324, Speaker C: So first question.
00:13:53.384 - 00:14:08.224, Speaker B: Hi. Hi. My question is, sorry, I'm just trying to understand exactly how this thing works. So if I tokenized this transfer rights of certain token, so does the original token gets locked in my wallet? Is that how it works?
00:14:08.344 - 00:14:16.730, Speaker A: Yes. What you effectively do, you will create a soul bound token from that token, with the ATR token being like the key to transfer.
00:14:16.842 - 00:14:46.738, Speaker B: Okay, sure. So if my token gets locked in my contract, that also makes the token like, lost a lot of utility. It could be used for what you wanted to be used before. So it's kind of like defeat half, 50% of the purpose. It seems like if I understand it, right, like let's say, you know, you give the example of that I wanted to use my NFT or other things, but like without actual transfer, right. Because that was gone, and a lot of utility of that particular token could be lost, is that right?
00:14:46.906 - 00:15:17.322, Speaker A: If the utility of the token is just being able to transfer it, then yes. But saying utility, I mean something like on top of it, like, yeah, we have standards like 720, 111, 55, which basically defines how to transfer token, nothing else. What I mean by utility is, okay, let's say my NFt will give me access to a meetup, or actually I can use it in a game, I can increase level of my character, whatever. So this is the utility I'm actually talking about, not a transfer thing.
00:15:17.418 - 00:15:33.254, Speaker B: Okay, sure, sorry, another quick question again, a lot of the things that you mentioned seems achievable with token permits, like through the Uniswap permit two for example, I mean without needing of tokenization.
00:15:34.574 - 00:15:35.798, Speaker A: With token what?
00:15:35.926 - 00:15:37.006, Speaker B: Token permits.
00:15:37.150 - 00:15:37.854, Speaker A: Token permits.
00:15:37.894 - 00:15:55.094, Speaker B: Okay, yeah, like Uniswap have permit to, that you can actually sign off your transfer rights to permit to and then just give a permit to anyone that can actually transfer on your behalf. Seems like it's kind of doable. Is that something you've considered?
00:15:55.174 - 00:16:21.934, Speaker A: It's a little bit different. The permit is basically signed approval. So I can do that now. Yeah, I can give you right to transfer it, but I'm not taking the right from me. The idea is that I am not able to transfer it in case of the lending or renting. I, as a lender want to be sure that you cannot transfer it from your wallet because in case of default, I want to be able to transfer it from you back to me. So I want to be, or I want the right to be locked somewhere.
00:16:21.934 - 00:16:31.134, Speaker A: That's the idea behind it. So permit. Yeah, it's just signed approval, but it's not like I'm giving you the right and I'm like taking the right from me.
00:16:32.474 - 00:16:45.474, Speaker C: So we have now, we moved from soul bound tokens now to NFTs as wallets. How do you see the permissions working there?
00:16:45.514 - 00:17:31.580, Speaker A: With this new standard, it can work the same way. You can probably work around that. That. You mean the AIP 655 one? I guess, right? Yeah. There will probably have to be some transient ownership where if I'm the NFT holder, I have access to the wallet and I can somehow prove that I'm the owner of the asset inside. So if the asset inside has some utility assigned to it where I need to sign some off chain stuff, they probably have to be able to say, okay, it's in an NFT wallet and you are the NFT holder. But still, if you use that NFT as a collateral somewhere, the vault is the owner.
00:17:31.580 - 00:17:51.190, Speaker A: So I think it works the same way here. And in the context of the NFT wallet, I would say it's more like immutable token where I'm still the owner. So I have access to the wallet, but I can drain it. So it's like a state for that token. The wallet is basically like a state. That's how I would look into it, like that.
00:17:51.292 - 00:17:55.666, Speaker C: That's a really, that's a really great simplified way of saying it. That it's a state.
00:17:55.810 - 00:17:56.666, Speaker A: It's a state. Yeah.
00:17:56.730 - 00:18:06.002, Speaker C: Yeah. Do we have another question? Because I'll ask another one if we don't. So I think it's pretty clear that.
00:18:06.138 - 00:18:06.814, Speaker B: That.
00:18:08.834 - 00:19:00.094, Speaker C: Tokenized assets are not even in their infancy yet in terms of market share, in terms of development, in terms of mind share, even with people, usability, there's projects like materium that's working on asset passports for different things. At what point do you think that we'll have sort of like a cultural acceptance of digital notarization? Because in the end, you know, we have a escrow and we have notarization. Looking forward, how far out do you think that we are from really massive usage and growth in tokenized assets that are not necessarily our classic pfps and stuff like that?
00:19:00.754 - 00:19:06.618, Speaker A: So if I understand the question, your question is how far are we from tokenizing real world assets?
00:19:06.786 - 00:19:07.534, Speaker C: Yeah.
00:19:09.454 - 00:19:42.618, Speaker A: Honestly, I don't want to even guess. I think it's much harder thing to do because it has the burden of the regulation and existing laws and stuff. So it's not just, okay, we are these shadowy supercoders and we are just building stuff and we can break stuff quickly. So honestly, I don't know. I would hope it to be as soon as possible so we can actually see, for example, loans backed by real world assets. But yeah, I don't have any guess.
00:19:42.706 - 00:19:47.762, Speaker C: Okay, so just to be clear, when you speak about tokenized assets, you're talking about tokenized digital assets.
00:19:47.818 - 00:19:49.186, Speaker A: Digital assets, yes.
00:19:49.290 - 00:19:50.814, Speaker C: Okay, awesome.
00:19:51.994 - 00:19:58.854, Speaker A: As soon as you have the representation of the real world asset in the digital space, the same things applies there.
00:19:59.274 - 00:19:59.898, Speaker B: Great.
00:20:00.026 - 00:20:07.082, Speaker C: So that gives us out of time. Thank you so much for coming here today and sharing your knowledge with us.
00:20:07.218 - 00:20:07.634, Speaker A: Thank you guys.
