00:00:20.480 - 00:01:07.620, Speaker A: Good morning everyone. I am really excited to be here to give an overview of how mev extraction will look like after the merge. So to do that, there's a couple of things I want to talk about. First, I want to give an overview of how we're doing mev extraction today and then some of the problems of taking this system and directly applying this on top of what we have today with the post merge world. And then I'll give an actual overview of what the extraction will look like with a set of validators rather than miners. And then just talk about some of the future research that we need to do in this space to get to the ideal world that we would like to be living in. So to recap today we have these entities called searchers.
00:01:07.620 - 00:01:54.382, Speaker A: And searchers are just people who are watching all of these public and private transaction flows that exist, looking for transactions that have some sort of value that they can extract. And once they find this value, they connect to a builder and bundle a transaction that they've created with the transaction that's vulnerable. And they submit these to the builders. And the builders take these transactions and they bundle them into a block and they share this block with the miners. And then the miners perform their proof of work, seal on top of this block and eventually they find a seal release that blocks the network, extending the chain by one. And then the cycle repeats. And hopefully this cycle is happening in parallel with multiple builders.
00:01:54.382 - 00:02:29.674, Speaker A: So you have some searchers connected to one builder, some searchers connect to another builder. They're all sharing blocks. It's an open market looking for the block that has the most mev in it. So if we look at the relationships that exist between these different entities, we have first this relationship of the searcher and the builder. This tends to be a one to one relationship. So you have often one searcher connected with one builder. We have the builder and the miner, and the builder is trusting that the miner won't steal their transactions.
00:02:29.674 - 00:03:20.484, Speaker A: And then we have the miner, and the miner is just receiving all these kind of precomputed blocks and just doing the proof of work on top of it. So this first relationship sort of checks out because it's a one to one relationship. And if you're searching for Mev and you've only connected to one block builder, and you've only given your transaction to one block builder, you have a pretty good idea when your mev is stolen. And if you see that a builder is stealing your mev, it's very easy for you to just use a different builder. For the builders, it's a little bit more difficult because they're actually sending their blocks to multiple miners. But we have this assumption that builders are much more sophisticated and much larger and have the ability to play iterated games with the miners to sort of deduce which miner might be stealing their meV. So we can still say that this relationship is okay.
00:03:20.484 - 00:03:48.744, Speaker A: And then miners receive everything in the clear, so they don't need to trust anyone, and we can just say that this is fine. So post merger, we apply this exact same relationship. We get the same thing. We just replaced the concept of miners with validators, and the first one continues to check out. We still have that relationship. There's one searcher connecting to one builder. But now the second one is where things get a little bit more interesting.
00:03:48.744 - 00:04:39.188, Speaker A: And to determine if this relationship makes sense, we need to think about this formula. And this relationship actually only makes sense when this formula does not return true. And so this is basically saying that the expected value of the relationship that the validator has with the builder needs to be less than the MEV that can be extracted in the block. Because if the mev that you can extract in the block is actually more valuable than your relationship with your builder, the rational actor will simply steal the mev that the builder has given them. And so this doesn't work. And just applying this old system that we used pre merge falls apart once we start having blocks with large amounts of mev. So if we zoom in on this equality, we can see that there's kind of two ways to go.
00:04:39.188 - 00:05:26.368, Speaker A: We either need to reduce the amount of mev in a block, or we need to increase the expected value of the relationship of the validators with the builders. And if you know much about mev, it's pretty difficult to try and control mev. So that's sort of out. We can't reduce the amount of MeV that exists in a block. So what we could do is we could actually increase the expected value of the relationship between the builder and validator. And the way that we would do that is we would say, you need to send me some signature of ten of your validators or 100 of your validators, whatever the expected value that we're looking for to make sense, they need to prove that they have control of that much stake. This is basically increasing the capital requirements to be a part of this system.
00:05:26.368 - 00:06:08.164, Speaker A: And this is kind of what we're doing today with mining pools. Because mining pools, the expected value of their relationship with the builders is very high. If they were to steal MEV from a builder and get cut out of the MEV network, then that would be extremely detrimental to their future profits. And so we can kind of do the same thing in the staking world. So you have a large staker. They're the only ones who can connect to this MEV network, and the small at home staker is not able to. Unfortunately, over time, the large staker starts accumulating more stake per stake that they have versus the at home staker, and then they eventually dilute the at home staker to almost nothing.
00:06:08.164 - 00:06:54.924, Speaker A: So simply increasing the capital requirements of extracting MEV doesn't really work. And we need to think of a different solution. And this all really stems from this statement that builders are trusting the validators to not steal. And what we really need to do is think about a different way of approaching this problem. And one thing that we can do is we can just flip the trust. So rather than the validator being the trusted party, the formatting error with PowerPoint, the validator now is the non trusted party. They are doing the trust with the builder, and so they're now trusting that the builder will reveal the transactions, rather than being the party that's being trusted.
00:06:54.924 - 00:07:40.444, Speaker A: And this is kind of what we've done with this external builder network. And this is a protocol that we have defined at this GitHub repository. If you want to take a look and see exactly what it looks like, that's the place, but we'll do an overview in a moment. This is all work that actually has stemmed from the Flashbots team. So, mid last year, Steph from the flashbots team wrote this post on ethereum research called MeV Boost merge ready flashbots architecture. And a lot of the ideas that went into that post are seen in the protocol that we have today with this external builder network. So a lot of the credit is really due to the work that the Flashbots team did last year, and they continue to do throughout the beginning of this year.
00:07:40.444 - 00:08:11.404, Speaker A: So the full walkthrough of what the external builder network looks like, it starts first with the validator, who's about to propose a block. They say, builder, please give me a execution payload header. And the builder receives the request. And the builder behind the scenes is constantly looking for the next block in the network, kind of like they do today. They have the searchers sending the transactions, they're aggregating them. So when they receive this request, they can immediately respond. Here's an execution payload header.
00:08:11.404 - 00:08:51.920, Speaker A: The validator takes the execution payload header, and it constructs a blinded beacon block. And a blinded beacon block is almost exactly the same as a standard beacon block, except that you don't have the transaction bodies. And if you're familiar with headers in the ethereum one chain, it's the exact same concept in the header. You only have the root of the transactions. So that's the only thing the validator sees. And fortunately, the way that the mercallization works for these blocks is that the blinded beacon block route is the exact same as the full beacon block route. So they're able to simply sign this message and send it back to the builder and say, I would like the full beacon block now.
00:08:51.920 - 00:09:16.996, Speaker A: And they send their signed blind beacon block. And this is enough, actually to be an accepted consensus message on the beacon chain. So they've basically now committed to saying, this is the block that I'm going to propose. I just don't know what transactions are behind it. And then the builder verifies that that block is signed correctly and everything else checks out. And then they reveal the transactions that were originally blinded. And so this is the full flow.
00:09:16.996 - 00:10:11.316, Speaker A: If you look on the spec, on the GitHub, there's a couple more methods, there's a registration method that I didn't talk about, but there's a couple of things that you need to let the builder know before that you propose your block. You want to let them know what the gas limit that you would like them to build as, and you need to let them know where to send the fees to. We saw Mev boost as this idea that Steph proposed last year, and in fact, it still is around. We've just sort of modified the way that it's used in these protocols. And so we have simplified the, the connection between the builders and the validators, but there's still a lot of things that we want to do beyond just what we went over in that short back and forth between the validator and builder. And so Mevboost facilitates that. And the way to think of Mevboost is it's sort of a multiplexer between your validator and many different builders.
00:10:11.316 - 00:10:56.654, Speaker A: And by having this, as this external mechanism, we have a lot more latitude to be able to add fraud proofs, add other mechanisms to search for faults that the builders might have. It just gives us a lot more flexibility than constantly putting these into the consensus clients. And that isn't even maybe what the end result will be. After the merge, it's very possible that we have another layer of indirection between the builders and the validators. Mevboost clients. And this is because it's important that now that the trust has been put on the builders, that we help increase the trust by maybe having parties that are known rather than unknown builders. We want to have unknown builders be able to compete in the open market.
00:10:56.654 - 00:11:57.334, Speaker A: But that then creates some conflicts of interest, because the person with the most amount of money essentially gets to be the next proposer of the block. So that's a pretty thorough overview of what the external builder network looks like. Now I'm going to give a short overview of some future research problems related to this network and the ideal world. And that ideal world is this proposer builder separation. And if you've been following protocol research and development for the last six to eight months, you've probably heard about this concept PBS. And PBS is really the ideal world where we have this in protocol separation of these two entities. We've done that by using the external builder network to have a de facto separation, but we don't have the amount of latitude that we really want to be able to in protocol attribute fault if a builder is acting maliciously.
00:11:57.334 - 00:12:52.918, Speaker A: And this really happens. And I'll go into this in a moment with this data withholding problem, but it's really important that in protocol we have this mechanism that allows us to have committees that are able to attest to certain behaviors of different actors. And it's difficult to do this in an external network because you have a lot of the same coordination problems that blockchains were built to solve. It's also important to note that PBS is a requirement for dank sharding, which most of you probably have heard of. And so because dank sharding increases the requirements on the builders without having the separation between the proposers and the builders, that that means that we would also have to increase the hardware and bandwidth requirements of the validator set, which is something that we really don't want to do. So PBS is important for many things in the future, not just how MEV is extracted. So I mentioned this data withholding ATT and CK.
00:12:52.918 - 00:13:25.438, Speaker A: This is generally the problem of separating these two things. Right now, everything sort of lives under one roof. We have the validator building the block and proposing the block. There's no coordination of information that needs to happen. But once you separate those things, now you have two parties that are trying to have information released to the network, and either of them could fail. And we need to be able to figure out whose fault it is. And so if we look again at this diagram of the flow between the validator and the builder.
00:13:25.438 - 00:14:15.864, Speaker A: Imagine everything goes just as we had mentioned a few slides prior, except to on this last one, the validator asks for the full beacon block to be revealed to them. That way that they can publish this message to the network and the entire chain can move forward. But the builder doesn't respond. And when the builder doesn't respond, there's no way for the validator to prove that it was the builder that didn't respond, because the builder can simply just say, I never heard from the validator, and now it's just the builder's word versus the validator's word. And this is what we really need to avoid. And in protocol, PBS allows us to do this with these committees, but this external builder network, we don't really have that concept yet. And so now just this communication between the validator and the builder, this is susceptible to this data withholding.
00:14:15.864 - 00:15:27.024, Speaker A: And so maybe we added some sort of committee that lives external to the network, similar to how it would be in the PBS world, where the validator sends all of its messages through the committee and to the builder. That way, the majority of the committee, if they check off and say, I saw this information, then we have an even better idea of whether or not that information was actually revealed. And when the builder doesn't respond either to the validator or to the committee, the committee can now attest with high confidence and say, I never heard from the builder. You know, whatever this protocol defines to happen, whether it's slash the builder disconnect from the builder, that can happen now with a higher degree of trust, rather than relying on the words of one entity or another. So, a few resources, if this is interesting for you, the block construction channel on the ETH R and D discord is kind of where a lot of the chatter is happening right now. The builder specs is sort of the canonical specification of this protocol that, that I went over. And then we have two implementations of Mevboost, one by the flashbots team and one by Alex Stokes.
00:15:27.024 - 00:15:56.964, Speaker A: If you're interested in some of the more research problems, then the flashbots mevboost repository has a lot of really interesting issues that talk about more existential threats to these systems. So I recommend checking that out and maybe discussing some of those things there. Thank you. Questions?
00:15:58.584 - 00:16:05.044, Speaker B: Okay, that finished a little earlier than I was expecting, but we are good for questions now.
00:16:06.544 - 00:16:12.686, Speaker C: Yeah, I was curious. So why shouldn't the builder simply bribe proposers to order for Mev?
00:16:12.800 - 00:16:13.306, Speaker A: Sorry.
00:16:13.410 - 00:16:26.574, Speaker C: So if the builder knows the bribe, or knows some of the so, yeah, the builder knows the proposers are going to sequence the block in some way. Why shouldn't the builder just black market bribe the proposer to sequence the block in an order that's favorable for the builder?
00:16:27.154 - 00:16:55.534, Speaker A: I mean, that's basically what they're doing with this separation. The builders are bidding. There are many builders happening and they're bidding to try and get the validator to propose their block. Is that what you're referring to? Say it again. So there's multiple builders. And so each of these builders are submitting a bid into this network saying, I bid one ETH for you to include mine. I bid 1.1
00:16:55.534 - 00:17:23.214, Speaker A: ETH. And so it's kind of an open market for builders to decide. And so if you go through a back channel, you still kind of need to compete with that open market as well. There's definitely the ability to do a back channel because this is not enshrined in any protocol that's totally fair game and possible, and especially possible with very large entities. They may have their own separate network that's separate from this. But if there is an open market, it's likely that that's the going price for block inclusion.
00:17:26.114 - 00:17:30.594, Speaker B: Okay, another question here. Two, three, four. Okay, good.
00:17:33.854 - 00:18:12.742, Speaker D: So you were talking about a data withholding problem, right. I'm wondering why you chose to, like, consider that the main problem. Why isn't the problem the fact that the validator is actually signing a block without knowing what is exactly in that block? Because imagine that I'm a builder and I say, you know, screw all those proposers. There is a really good NfT drop happening right now. So I'm just going to stuff the block with transactions that I'm mining this NfT NfT over and over and over for myself, right. I blind it, I send it to the validator. Validator says, okay, I guess this is good mev, because somewhere there I will have received some value.
00:18:12.742 - 00:18:39.922, Speaker D: Sign it, send it back to the builder. Builder doesn't even reveal anything to the validator, just broadcast it to the network because it's already signed and the builder has all the data and suddenly we have kind of propagated it block through the network that the validator would have probably never signed if they saw that it contains garbage like that. So isn't that a bigger problem? And how are you solving that with the design that you are proposing?
00:18:40.018 - 00:19:25.216, Speaker A: Yeah, there's a lot to unpack there. But the signature that my slides are gone, the signature that they're signing when they sign the blinded is the exact same consensus message. So like you said, once the builder receives that, the builder can immediately disseminate that to the network. And honestly, that's the most likely thing to happen because there's a lot of value for the builder of that block going out. And so there's nothing that the validator can do at that point. They don't know what the transactions were and so they just included it. And now we're starting to get into this question like how much energy should the validator put into determining a fair block with transactions that shouldn't fairly be included? But kind of the way that we've accepted is a fair block is the block that pays the most.
00:19:25.216 - 00:20:13.454, Speaker A: That was sort of the simplest thing. And because we have that open market of bidding for block space, the builder who bids the most, if it happens that they mine all these NFT transactions and that's valuable enough to them to pay more than anyone else, that's the block that's going to be propagated. And that's kind of similar to today. But you did mention another interesting thing about why are we focusing on the data withholding problem as the worst problem? And I do think that is a good question in and of itself because there are a lot of other problems that might exist. You can imagine if the validator doesn't know what transactions they're submitting, they might sign a block that's invalid. And that's a big problem. But the thing with that problem is that because the builder signed the bid, we have a cryptographic link between them signing an invalid block, and we could automate some sort of fraud proof for proving that.
00:20:13.454 - 00:20:24.504, Speaker A: But it's very easy to prove cryptographically with the data withholding attack, that's not attributable. And that's why to me, that's the worst thing that can happen in this system. Sure.
00:20:25.284 - 00:20:28.584, Speaker B: Okay. Another question from the middle.
00:20:32.764 - 00:20:59.840, Speaker E: Hello. So I was wondering when you started the presentation that this inequality between the expected value and the, and the value of the relationship, it somehow flips because we're moving from proof of work to proof of stake. So why is that happening? So what's the qualitative difference between now and the post merge world?
00:20:59.992 - 00:21:44.466, Speaker A: Right. So the equality, the expected value of the relationship between, I say the validator in my slides because we're referring to the validators post merge. But you can also think of the equality today and the actor would be the miners. And so if the expected value of the relationship between the miners and the builders were competing with the value of mev per block, we would have a similar problem. But because the mining pools are so powerful, there's only a handful that are producing the vast majority of blocks and they're extracting mev from all of these blocks. They were to lose out on that. That would be a non negligible part of the amount of profit that they're taking in right now.
00:21:44.466 - 00:22:15.864, Speaker A: And so the expected value of that relationship is very high. If they were to lose out on that order flow, that transaction flow from the builder, that would, you know, this is a very bad thing for them. And so it's not that we're necessarily like flipping it, it's just we're increasing the number of at home block producers today. Like de facto Ethereum only has, you know, a handful of people who are truly producing blocks after the merge. We now have hundreds, thousands, tens of thousands of people truly producing blocks. And so that's why that sort of flips after the merge.
00:22:19.764 - 00:22:31.916, Speaker B: Okay, there were some questions from before. Have they been answered now? Okay, then I think we're done here. Thank you very much, Lightklein.
00:22:31.980 - 00:22:36.364, Speaker A: Thank you. It.
