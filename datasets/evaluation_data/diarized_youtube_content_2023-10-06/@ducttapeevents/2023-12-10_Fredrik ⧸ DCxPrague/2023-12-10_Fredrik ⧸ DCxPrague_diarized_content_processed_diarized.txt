00:00:02.760 - 00:00:34.422, Speaker A: Okay. Hey, thanks for joining. I'm Fredric Santes. I work at the Ethereum foundation with protocol security Research. So just to give you a quick, super quick information about the EF, the EF is a. Take this. So, as you can see, it's a nonprofit organization that supports the Ethereum ecosystem within the EF.
00:00:34.422 - 00:01:28.294, Speaker A: There are a lot of different types of kind of small communities that do various things. There are people like you working in DevOps, testing, research, crypto economics, security, et cetera, et cetera. And yeah, the protocol security team is one of these small teams within the EF. The team that I'm working in is between five to ten people. It's kind of hard to define because we have people who work full time, such as Tyler, who's sitting there, and myself. We also have other people. We have Juav, who is not in the room now, but he's in the vicinity at least.
00:01:28.294 - 00:02:10.784, Speaker A: He is primarily working on account extraction today, but he also does some security work from time to time. And then we also have other people, like from the go Ethereum team. We have some people working with cryptography, like Antonio, and some more people. So it's kind of a mix. And we have five full time and five people that kind of do work as necessary. As you can see here on the list, we have quite a big scope. This isn't all the things we're doing, but it's some of them.
00:02:10.784 - 00:03:15.208, Speaker A: And I'm going to go through these things at least. So you have kind of a grasp of what we're doing. A lot of things we do, like a big part of it is security coordination. We spend a lot of time coordinating with client teams, for example, making sure that security knowledge that is gained in one client team is then shared to the whole client ecosystem. We also spend a lot of time with the researchers looking into new research subjects. Whenever there is something new, we always take some time to think about it from a security point of view, which the research team does, obviously, but we give it an extra kind of thought, and that can be anything. It could be things such as looking at account abstraction from a security point of view.
00:03:15.208 - 00:04:03.932, Speaker A: It could be 1559 from a security point of view, et cetera, et cetera. We also work with DevOps and the testing team a lot. These groups are kind of building testnets and devnets, where all the new features are being tested on. And we try to help out by running clients, trying to break these networks, etcetera, before those kind of issues end up on Mainnet. We also work quite a bit with third party auditors. We don't do like a lot of smart contracts, third party audit coordination, but we do it for some things, for account abstraction, for example, there's smart contracts. We've done it for the deposit contract.
00:04:03.932 - 00:05:32.572, Speaker A: As another example. We also help coordinate the work that auditors are doing on the various clients, such as there might be an audit on Loadstar, and then we will work together with them, maybe give some advice on what to focus on, and also give them kind of our insights of the Ethereum protocol so that the orders can be more efficient. We also work quite a bit with grantees. This is an area that I personally feel, feel quite strongly about, because we the Ethereum foundation, there will be another slide about this, but the Ethereum foundation provides quite a lot of grants to various entities and people, and these grants are then used in order to support public good work that has some relevance to the ethereum ecosystem. So we do quite a bit of work with that when it comes to security related grants. And we also tried to spread kind of the security word by publishing some blog posts. So we do have a blog at the Ethereum blog that is called secured.
00:05:32.572 - 00:07:25.544, Speaker A: And on that site we from time to time publish various security things, like we, one of the things we publish is a, a list of public disclosures, which I will kind of go through, but it's a list of public disclosures that comes from the bug bounty program. So whenever there's a hard fork, we make a new release, and it could be 50 or 100 or 200 new vulnerabilities that we post there. And people can then use those vulnerabilities to try to find new ones or kind of figure out what not to do when it comes to building a client. For example, the last one is about writing robust C code, which is done, which was done by Justin, one of the team members of the protocol security research team. So from a research point of view, we spend quite a lot, we spent time working on client diversity, like looking into the current state of client diversity, not only like how many nodes are running, how many nodes are running a specific client, but we're trying to measure like how many validators are running on a specific client. And when it comes to diversity, that is just one aspect. We're also looking into other things, such as, like, what is the network? What does the network look like in terms of users across the various countries in the world? Like, is there a majority of validators running in the US, or is it Germany, or is it South Korea? Or where do they kind of gather up, because if all of them are located in one single area, or like a majority of them, at least that could pose an issue.
00:07:25.544 - 00:08:21.964, Speaker A: And there are other things as well, such as operating systems, for example. If 95% of all the validators are running Ubuntu, for example, and then there's a critical vulnerability in Ubuntu, it doesn't really matter as much if people are running multiple different clients. So we're trying to look at other things than just clients, especially because the client's diversity is looking fairly good now, better than before at least. We've also done some ck security research. David from the team has been working quite a bit on that. Tyler as well. We've done quite a bit of threat analysis and risk assessments as well, especially for hard forks such as the merge and others that could potentially pose a risk.
00:08:21.964 - 00:09:43.174, Speaker A: And we will then kind of figure out what are those risks and how can we minimize them. We also have, historically, not as much now, but we have been looking at l two s, and it's primarily been Yuav who's been doing that, who I mentioned earlier, cryptography. We have a person, Antonio, who is working in the cryptography team, and he spends quite a bit of time looking into security related stuff as well. SSLE is one of the things, single secret leader action, where we're trying to figure out how can we minimize the risk of validators that are about to propose a new block from being targeted in Adidas attack, for example. So the grants, as I mentioned, is something that we provide quite a bit. The academic grants round was done during the summer, and we gave out $2.3 million to various academia around the world.
00:09:43.174 - 00:10:24.504, Speaker A: This was given to a lot of different types of projects. Some of them were, can I do this? Yeah. Some of them were related to economics and MaV, some about p two p network, peer to peer networking. And then we also had the security grants, which totaled about 360,000. And these are the ones that we gave out for that. And it's. Yeah, like I mentioned, it's grants that we provide that will hopefully provide additional value to the entire ecosystem once they're completed.
00:10:24.504 - 00:11:20.188, Speaker A: And the result could be like a research paper, or it could also be an application that people can run. So we have, for example, the, what should we take? We can take this one then machine learning, empowered illicit smart contracts and transaction detection. So this will be delivered as an application, the dynamic analysis framework as well. So this is something that projects in the end would be able to use in order to help secure their applications. We also do a lot of other grants. We are helping out with the Ethereum protocol fellowship. We had a talk, was it yesterday? Yeah.
00:11:20.188 - 00:12:32.936, Speaker A: From Lambda, who are part of the EPF. And we have a lot of people that are working there. We have one person, for example, who is called Muhas. He is working on a network faster. And there are other people who take part in the EPF that deliver kind of security stuff that will bring additional security and value to the ecosystem. Then we have the Devconnect scholars, and this was a group of people, I think it was 30 people, who were selected to be able to go to Istanbul with the travel costs and everything else being covered by the EF, and it's people that were in countries where they might not have the financial abilities to go there. So we, in the security team, we spoke with some people from various countries that were interested in security and had experience with security, but they wouldn't be able to go there to experience the vibe and meet people, et cetera, in Istanbul unless the costs were covered.
00:12:32.936 - 00:13:25.934, Speaker A: But that's something that we did, and hopefully they will obtain relationships, et cetera, over there, and then start providing even more value to the ecosystem. And then we also have the grants from the ecosystem support program. And this is a program that anyone can apply to. It's not only about security, it can be about almost anything. There are some limitations, such as no NFT projects, et cetera, but people can submit stuff that is going to be good for the ecosystem. One example of a grant that we've given out is to the security alliance. The security alliance, or SEAL, as they call themselves, is a public good organization.
00:13:25.934 - 00:14:32.864, Speaker A: They consist of people from the entire ecosystem that has a focus on security. So it's auditors from competing firms, it's people working outside of firms. But they all have the kind of the goal to improve security for the ethereum ecosystem. And they built multiple things. They built the Seal 911 bot, which is a telegram bot that people can communicate with if they have ongoing incident, meaning that it could be a project that has been compromised, or it could be that a user has, for example, lost funds due to thefts or whatever. And in the case of users losing funds, the. The SEAL team usually helps out by providing contacts with exchanges, etcetera, in order to help get the money back or the funds back.
00:14:32.864 - 00:16:08.114, Speaker A: And for contracts, there's been cases already where the SEAL team has been able to jump in during an attack and save funds from the project. So in one case, they actually managed to save $200,000 from being extracted by the attacker in real time. And, yeah, so they were able to actually get that money back and return it to the project. They also have the sealed drills, which they also built, which is a pretty much a war game where you will, as a project, you probably hope that you don't have a security incident, like your contract doesn't get compromised, etcetera, or exploited, but with the sealed reels, you can emulate that happening. So you can actually see, what do I need to improve on? Do I have a group of people that I should contact during an incident? What do they do? How do we deal with this? Who speaks to the community, who speaks to the press, who coordinates everything, et cetera, et cetera. So the sealed drills one is also a public good, which allows projects to sign up and run through that. And then it's also the seal incident response document, which kind of documents a flow for projects on what they should think about before an incident actually happens to be prepared for it.
00:16:08.114 - 00:16:45.774, Speaker A: Yeah. So the security research team also works on incidents response. It's not the primary objective of the security research team. The incidents response primarily is handled by the various client teams, researchers, etcetera. But we do help out as we can and when needed. Yeah. One of the main things that we do are manual reviews.
00:16:45.774 - 00:17:20.734, Speaker A: We spend a lot of time on this. It's, it's a very big area. We have all the clients that we do review. Nine clients today, more coming. There's RET and there's lambda, for example, that's coming now. We also look at the eips, all the specifications, such as the execution specs and consensus specs, and we also look at the dependencies. And the dependencies can be quite big.
00:17:20.734 - 00:18:34.496, Speaker A: There are a lot of cryptographic dependencies, network dependencies, etcetera that fall into scope. And we're trying to find issues that, where the, where the clients, for example, don't conform to the specifications, or there are an issue in the specifications, or it could be simple like programming errors, things like that. Yeah. When it comes to fussing, we, I would say we fuss basically the same things. We look at the, we look at these issues, but we do go a bit beyond. We actually do some testing to try to figure out, is this something that is like, can we crash the application by doing fuzzing? Sure, that's fine. But what happens if we, for example, introduce packet losses or other types of interruptions onto the chain that we're testing? So we have a lot of fuzzers.
00:18:34.496 - 00:19:36.046, Speaker A: We have govee EVM lab by Martin who is working in the. In the team we have TX fuzz by Marius as an example. We have quite a few different types of EVM fuzzers and cryptography fuzzers by Guido, who is not working in the team, but he's contributing quite a lot and we're providing him with grants from time to time. We're also having beacon fuzz for the consensus layer, so clients such as lighthouse and Lodestar, etcetera. And we also have NoC neighbor, which is in particularly testing prism and other go applications. So with nocnable we can kind of automate the fasting parts largely and run it against geth or prism or other stuff. From a network point of view we have Wormtongue, which is testing the consensus layer.
00:19:36.046 - 00:20:38.544, Speaker A: It's trying to introduce faults in the network by sending messages that shouldn't be there, basically. And hopefully the clients will just handle this, and sometimes they do and sometimes they don't. So this is something that we're trying to figure out. And one of these issues is something that I'll talk about in the vulnerability section soon. We also have the network faster in the execution layer, testing the execution layers. Networking, which I mentioned previously, was done by one of the EPF people, Mohas. We also test the solidity compiler, trying to figure out can the solidity compiler behave in a way that it shouldn't? And I know that Bergava, who is building this little compiler, he's also thinking about doing the same for Faye, and maybe other ones as well.
00:20:38.544 - 00:21:11.426, Speaker A: And then we have the automation and network fuzzing, like I mentioned. We're like collaborating quite a bit with the DevOps team and the testing team. And through that we have various network fasting techniques using kurtosis, antithesis, etc, et cetera. And that is something that Tyler is spending quite a lot of time on. And that's just a few of them. There are more. I asked Tyler for a few more and he had a list.
00:21:11.426 - 00:21:56.674, Speaker A: But yeah, the list already was quite long. We do some static analysis, running things like Codeql, Semgrep, etcetera. It's something that a lot of the client teams have integrated into CI now, but we do it from time to time just to catch low hanging fruit and using that to find issues in one client and checking if the same kind of vulnerability exists in the other clients as well. So it's very challenging. Like super challenging I would say, because there are so many different clients. There's nine clients now. Ret and Lambda is coming.
00:21:56.674 - 00:22:49.094, Speaker A: It's like almost all of them are written in their own language, ranging from java to nim to typescript, to go to rust to elixir. Now it's a lot of them and all the dependencies as well. They kind of are written in different types of languages. All of this is bleeding edge technology. It's an open network, meaning that anyone could, in theory start attacking it. And like was mentioned in the Lambda presentation, the documentation can be quite hard. Like if you're a new person joining this and trying to, and starting to work on security, it takes quite a long time to get, to get up to speed.
00:22:49.094 - 00:23:28.674, Speaker A: If you're auditing solidity contracts, you just need to learn solidity only in internal solidity, and then you can start auditing other stuff. But here you have to know a lot of languages, you have to know specifications. Yeah. Luckily there's now the e two book, which provided quite a lot of guidance, but it's still very complex. There are a lot of hurdles to go through. And the team that I'm. Yeah, in the research team, we are only five to ten people, which means that there is a limited amount of time, but because of that we have the bug bounty program.
00:23:28.674 - 00:24:30.494, Speaker A: So this is a program that is meant to assist with finding additional vulnerabilities because there's no possibility whatsoever that a group of finite people will find everything. So we have the bug bounty program and we normally pay out the maximum of 250,000 during a hard fork. We usually increase that by two x. For the merge we did a four x, for example. We have quite a few people who look at these kind of issues and report stuff and probably like, on average, I would say it's one per week that is actually relevant, affecting something that is in scope of the bug bounty program. And the scope is all the clients that I mentioned before, specifications. We have the deposit contract.
00:24:30.494 - 00:25:24.704, Speaker A: We have some, yeah, some additional stuff as well, like some crypto libraries. You can also see the disclosures on. If you go to that website, you can see all the previous disclosures that we posted is about 300 or something like that. So for vulnerability types we have quite a few different ones. I would say the most common ones are definitely denial of service vulnerabilities. These are fairly frequent, I would say it could, for example, be that you send a network package to one of the clients after you become a peer with them, and then you can make them crash, basically. We also have some crypto related issues, consensus issues, and remote code execution is super, super, super rare.
00:25:24.704 - 00:26:00.804, Speaker A: And everything else. Basically all types of vulnerabilities could potentially be there. So I have two vulnerabilities that I can talk about quickly. I think we started like five minutes past, so I should have a few minutes extra. The first one is a vulnerability found by Guido. It's a vulnerability that was found in Geth and the issue is a memory corruption bug. So, so if someone were to use this, it could cause a consensus error.
00:26:00.804 - 00:27:12.864, Speaker A: And this means that all the vulnerable nodes that were vulnerable to this issue at the time would obtain a different state route. So they would end up on a different chain than the rest of them. What's interesting here is that this was reported on the 17 March of August and the get team started to look at this. They saw that, well, this is a very big issue, you could just create the contract and by basically writing this contract in a way that would exploit this, you could easily cause this to actually happen. So what the get team did, which they have said later on that they would not do again, but what they did was that they made a public announcement on the 18th, the day after saying that there is a very severe security vulnerability. We're going to release an update on the 24th and everyone should update as soon as possible. So on the 24th they released the update.
00:27:12.864 - 00:28:04.014, Speaker A: A lot of people started updating their clients and then the 27th happened on the 27th. Someone had managed to reverse engineer the exploit by looking at the diff between the previous release and the new release. And this was not an easy bug to find at all. It was very hard and complex and that's why it took a few days. But on this day they found it. They could have found it earlier, but they actually exploited it anyway on the 27th, which meant that the chain actually split in two. So there was one chain that the majority of people was following and then there was another chain that people felt was incorrect because it was the minority chain.
00:28:04.014 - 00:29:05.144, Speaker A: Luckily most people had heard the warning on this date and had updated between these two dates, so it was just a small minority that did it, but it was actually exploited on the main net. We also notified quite a few other chains, I don't know the exact number. I think it was like ten out of chains that are using goetherium that we did notify. And some of these chains did update their code as soon as possible, some of them did not and because of that they were also exploited. So binance smart chain for example, they got also exploited on the same day using the same vulnerability and they had to continue or start working on a fix for that. And if you want to read the full post mortem then you can find the link here. So the second one and last slide.
00:29:05.144 - 00:30:10.134, Speaker A: It's an example of one of these denial of service vulnerabilities. In this case, it's a pretty rudimentary issue. Basically, you can send a ping to a get node and you would get a pong basically back. That's fine. I mean, you should be able to do that to know that the node is actually alive and responding to requests. But the issue was that when you do send this ping, it creates a go routine for the response, and there was no limit on the amount of requests that could be handled at the same time. So a user in this case could, could just flood the ping message and the node would then go out of memory, because it would just create unlimited amounts of go routines until it crashed.
00:30:10.134 - 00:30:51.654, Speaker A: This was reported fairly recently, in July, and it was actually just publicly disclosed a few days ago. So this is, it's very fresh. There are a lot of more vulnerabilities. I did a remote talk in Istanbul where I went through ten of these, and there are hundreds of more that are interesting, but I have minus two minutes to go. So yeah, I am more than happy to speak more afterwards, but yeah, that's it for now. Thank you very much.
