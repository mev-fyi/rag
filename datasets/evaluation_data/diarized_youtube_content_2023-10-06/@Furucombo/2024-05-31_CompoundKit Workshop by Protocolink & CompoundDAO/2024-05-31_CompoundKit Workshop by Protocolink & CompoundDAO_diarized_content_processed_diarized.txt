00:00:01.360 - 00:00:57.712, Speaker A: Hi everyone, thanks for coming to our Kampungkit workshop. I'm Lily from Fukanbo and the product link team. As a smart control engineer, we are here to explore the Kanpunkit, a tool designed to make developing on the Kanpun VC protocol much easier for engineers. Our goal is to you to work away with the skills to create fuselage friendly product with ease. In the past, if engineers want to develop applications like one critical threshold or levy strategy or labs on the compound v three, let's face two major challenges. The first one is to understand the common protocol and the other one is the high cost and complicit of development and audit contracts. So the common key was created to resolve these issues.
00:00:57.712 - 00:02:17.080, Speaker A: It allows engineers to avoid developing new contracts from scratch and continually adding new functionalities and markets to Kampung VC. Let's take a look at Kampung kit, how it involves it when we now coding it as a lightning SDK, you will see some demo code and even that to try small exercise for yourself at work. So the link SDK works on top of polling SDK. We can say that polling makes the logic work. So each logic means approval, swap, supply or whatever logic of the device and the laning SDK tells the polling what logic should be when we create use cases of lending services. So by using the lend SDK, development costs can be reduced 80% compared to developing it from scratch. So when we upgraded the Kamikita to the managed decade, the new managed decade includes all the original functionalities plus new features such as open position swapping that and throw SSA to the compound.
00:02:17.080 - 00:03:31.180, Speaker A: Visit markets. So using the SDK is very straightforward. Just import the package into your code and you are ready to go. For today's demonstration, I will show you how to use the one click open position feature with focus on the leverage staking. So what is leverage staking? It's a very popular strategy where the credit for token LST has a higher Apy than a borrowing ether APY, and it is unlikely to be liquidated on this LST and the E 30 pack. As the table demonstrates, assuming LST APY is 5% and the API for the ten k leverage staking uncommon v three would increase very, very much depending on the esusbar APY. This means that when the API of LST itself assess the esusbar APY, the strategy can amplify the APY much faster than simply hold an LST token in your wallethenne.
00:03:31.180 - 00:04:21.220, Speaker A: Yeah, great. So we finally reached the demo section. We will be using the demo repo, which employs the DM SDK. This demo generates transient data that allow user to open position just one transaction, so let me guide you through specifics. We will utilize the common v three cbeher to ether market on the base chain and using the UDC from your wallet to open the position. So the process is very streamlined. Once you set up, it will generate the transient data from Lenny SDK and the transient data can be signed with your wallet directly.
00:04:21.220 - 00:04:57.742, Speaker A: Okay, let's check out Ricoh. Here's the demo report in the project directory. We run a young star to start a demo and it will guide us step by step on how to open a position on compound v three. As we move through the demo, you will see the prompts in the terminal. Just follow this prompt and press enter. The demo is interactive and designed to make the process as clear as possible, and during the rib demo you will see the various outputs such as the SME functions needed. Then you can generate translation data to standard translation.
00:04:57.742 - 00:05:52.340, Speaker A: This can be done through your preferred method, whether that is a websuit provider or directly through a wider interface. Then this demo is a great way to see the practical application of landing SDK in action, giving you a hands on experience of the landing protocols. Before we run this demo, let's take a moment to look over the demo code. So the demo code starts by importing necessary modules from the polynomial package which includes API, kanban and land SDK laying. Step one, we redirect the compound v three landing protocol and the pair swap refine swapper. This step lets the pair swap to be the swap. When we do the leverage staking.
00:05:52.340 - 00:07:15.080, Speaker A: In step two, I initialize the landing adapter with the base chain id and the wire address which has some UIDC and ether SCSV already then installed. Step three, we can get a compound vc portfolio for the wallet account. Here we see press enter to trigger the action to display the portfolio showing what essay and apys of the ETH markets are currently held by the account. Instead, use the open by character role function to create the lever staking procedure. Actually, it contains many, many steps, but the lending SDK helps us to get rid of those steps. Then in step five, we use the SD main route data to get the required forms, check balance and get approvals and permit data for visualization. Those information can be displayed on your product to help users to understand change of assay in the user wallet after the transition ascent.
00:07:15.080 - 00:07:59.326, Speaker A: Then step six, we use the build router transaction request to get the transaction data, including two data and value. Finally, we can use the data to send by our wallet. Okay, so let's run the demo in the console. Let's do what happens when we run the demo code. I will start by process by executing the young start. Yeah. We have successfully registered the compound vc and parasite refine.
00:07:59.326 - 00:09:05.090, Speaker A: Also our deployment is initialized with the base chain id. Now let's pay enter to retrieve the portfolio of this account. The output shows various data of the base eth market including supply balances, borrow balances and the detailed position data of users like unit in USD, APY, declaration limit and so on. And this comprehensive data helps us to build informative product to help users by press enter. Again we initialize the building of the logic to open position of the leverage staking. The system generate many logic for the leverage staking use cases. First it swap USDC token from usugwali to Coinbase ether.
00:09:05.090 - 00:10:23.730, Speaker A: Then we call zero fee balancer threshold to borrow wrapped ether. Then again we swap lows wrapped ether to a coinbase ether and we supplied all of our Coinbase ether as clitoral and borrow rapid ether to build the expected leverage staking position. Finally, we repair the threshold. We can see that by using a threshold we can achieve a lever staking position in one step without the need to repeatedly perform multiple barrels and sprites. After contracting our logic press enter to estimate the necessary font and approval required to execute transaction so it certifies its opposite detail like function needed. In this example, we just need 40 UDC to build a leverage position of the coinbase ether to ether. This information can be displayed on a product and in step six finally you can get the transaction data value and two edges.
00:10:23.730 - 00:11:35.934, Speaker A: Then we can open our water to send out the transaction. Alright, we will use the two edges data and value we just generated to set up our position. First open your test wallet and send the transition pass the data we just generated so the two address is portal link router address and we will pay some small fees. So the fee is in the ether unit here only. The conflict code data is very long. We just generate here try to send out the transaction so you will see it's called polling all country and it will reduce 40 UDC from our wallet balance and pro palestinian. As you can see this transition involves main step including swapping fresh loan supply bar rule.
00:11:35.934 - 00:12:45.410, Speaker A: So the learning SDK simplifies the entire process into just one function. Now let's switch over to the compound official UI to see what the result is. So we started with just only 40 UDC as our intro fonts, but using literature, we open a position worth $160. This position is unlikely to be liquidated unless coinbase ether and Etherdpeg functional and additionally coinbase ether is an LLC token with an APY about 3%. We've pushed higher than the APY for borrowing ether compound, so this is an effective strategy to amplify APYE and your product can utilize this to build more feature for users. This brings us to the end of our demo. Now let's try out what we have learned with the hands on exercise.
00:12:45.410 - 00:13:28.560, Speaker A: First, you will need to download our demo repo from GitHub. Just table click on repo. Make sure your watch has on your dc for creating a position and a bit of ether for guest fees. I will later update the account address in an open position file to match your online address. Once everything is set up, go ahead and use your wallet to make the transaction. After you are done, show your transaction in the Portolinker API channel on full compute. And remember, if you need any more information or run to any trouble or documentation is always available on this link.
00:13:28.560 - 00:13:48.052, Speaker A: Yeah thank you for your participating. I hope the exercise helps you understand how to use language, SDK and encourage you to try more projects. Yeah, your feedback and work are important to our community. Let's keep building together. Bye.
