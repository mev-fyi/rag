00:00:00.410 - 00:00:00.960, Speaker A: You.
00:00:02.930 - 00:00:11.326, Speaker B: I'm here with Daiwat. We're gonna. Yeah, you gotta, you gotta get it going. You gotta get it going. We're gonna look through. This is a shill, your stack session. We're gonna look through Web three UI, I think.
00:00:11.326 - 00:00:13.050, Speaker B: I think. Is that right, Daiwat?
00:00:13.210 - 00:00:42.380, Speaker A: Yeah, that's right. So Web three UI is basically supposed to be set of components and hooks that let you get you started really quick when you just want to build a front end for adapt. I'm personally working at Moonshot and developer Dao right now, and this is one of the first projects we built at developer Dao. It's still in progress, of course, but this is kind of the first things we built in the open source space.
00:00:43.710 - 00:01:06.074, Speaker B: Awesome. Let's dive in and share it. So we have scaffold EtH and then we kind of have ETH hooks and ETH components. And there's all sorts of cool web3 component libraries and hooks coming out now. I feel like I've been building component libraries for three years in the dark and no one has cared. And now all of a sudden there's four or five different libraries. So it's really exciting to see these and see the little kind of just engineering differences.
00:01:06.074 - 00:01:13.810, Speaker B: But yeah, go ahead, share your screen. Take us away. Let's dive in. And also, like other folks on the call, feel free to jump in and ask questions as you see things along the way.
00:01:13.880 - 00:01:50.174, Speaker A: Yeah, absolutely. This is just the repo. So let me just get started with what this is. So we basically have three NPM packages. There's one called components, there's one called core, and there's one called hooks. So the difference between components and core, basically is that components are just some UI layouts that don't really fetch any data. They just give you some structure that you can pass data to.
00:01:50.174 - 00:02:47.246, Speaker A: And it has some common stuff we use in web3 apps, like an ether input or you want to display an NFT, if you want to display like a set of nfts, or if you want to token gate something, stuff like that. The core package actually does all the work behind the scenes for you. So it literally has a connect wallet button that the user only has to press and it magically connects. Same goes for token gate. You just pass in a contract address and it automatically conditionally displays content depending on whether the user has those tokens or not. And yeah, same goes for the token balance component. Right now, there aren't a lot of components in this package or overall.
00:02:47.246 - 00:02:59.720, Speaker A: But yeah, we are still in, I would say extremely early stages of development. So, yeah, let me just show you around some of these.
00:03:01.370 - 00:03:17.050, Speaker B: The best way for me to learn is like if I was building something, like here's how I would get the token balance. Here's how I would token gate. Here's how I'd integrate the wallet connect stuff. By the way, is your connect wallet using web3 react or what is it called? Web three modal or is it web3 react?
00:03:17.950 - 00:03:28.058, Speaker A: So this component actually works with the hooks package. And the hooks package uses web3 modal and ethers.
00:03:28.154 - 00:03:28.846, Speaker B: Cool.
00:03:29.028 - 00:04:12.110, Speaker A: That's basically the stack, I guess. I have a demo for the connect wallet component. So this is really all you need to place a connect wallet button in your app and the user will be able to connect to it. Yeah. And on top of this, you can just build like you can get the users. Let's say. Say you want to display someone's ens.
00:04:12.110 - 00:04:28.770, Speaker A: Am I connected to main? Okay, this account does not have an Ens, but in theory you'll be able to see it. Okay, this one's not connected.
00:04:31.750 - 00:04:39.570, Speaker B: Is it a live website? I guess you just need to connect with one that has reverse resolver.
00:04:39.730 - 00:04:44.294, Speaker A: I can drop a link in the chat to this code sandbox. Anyone can.
00:04:44.332 - 00:04:46.966, Speaker B: I got it. Yeah, I got it here. Let's see.
00:04:47.148 - 00:05:54.890, Speaker A: The concept is that you will be able to see your ens here if you had an ens. So this is kind of what I wanted to do with this package when I started that there wasn't really any UI libraries that let you just get straight into building. Of course there's scaffold e, but then you have the entire setup along with it. There wasn't really anything that was just focused towards the front end. So I would say this package is the most useful for people who are either new to web3 or are just looking to hack together something really quick for a hackathon or just to build an mvp. Because if you wanted to build something extremely, I would say a big project, you'd probably want to have more customization options and things like that. I mean, you'd still have those customization options if you use the hooks package.
00:05:54.890 - 00:06:06.402, Speaker A: But I'm pretty sure there are better hooks package. Like the hooks that scaffold provides the recently released Wagme package. Did you guys see that?
00:06:06.536 - 00:06:08.002, Speaker B: Yes. It's a cool one.
00:06:08.136 - 00:06:18.934, Speaker A: Yeah, that's a cool package. This is another example. But this is like kind of an old version of the project.
00:06:19.052 - 00:06:45.070, Speaker B: These are old, but yeah, basically I'm imagining like your target user is that someone who basically they want to quickly get started in web3. Do you imagine they'll spin up like a create react app and then import web3 UI? Or what are some of the, like, if I was building an app, what would be the kind of like the timeline and what would I be doing to bring in web3 UI?
00:06:45.410 - 00:07:01.250, Speaker A: So I guess we can just have a live demo right now. Let's do it. So we create react app and we install webt uicore.
00:07:03.510 - 00:07:13.670, Speaker B: So you started in code sandbox with like a create react app template. Is that what happened just now? Okay, so as if you have create react app or some just like thin react.
00:07:14.330 - 00:07:51.810, Speaker A: Yeah, anything. It could be next js. It could be anything. And then you'll have to import the provider. This basically passes down the context to all the components so that you can access everything anywhere inside your code base. Basically, you pass in the network you want the app to run on. So let's say we want this to run on main net, we wrap this around and you just need to import connect wallet.
00:07:51.810 - 00:07:55.640, Speaker A: And.
00:08:00.010 - 00:08:05.880, Speaker B: Can we see what happens when you have your wallet on the wrong network? Like, could you switch it to rinkabee real quick and see what happens?
00:08:06.410 - 00:08:37.150, Speaker A: Yeah, so it doesn't really show any errors right now, but we still haven't implemented this in this button that you're seeing. But there's a way to detect that the user is on the wrong network and also a method that would let them change to the correct network. So if you import, use wallet and see correct network.
00:08:37.750 - 00:08:38.402, Speaker B: Nice.
00:08:38.536 - 00:08:46.600, Speaker A: Yeah, so if they are not on the correct network, kind of, let's say show them a button.
00:08:51.930 - 00:08:54.630, Speaker B: That's awesome. That's a nice, smooth way to do that.
00:08:54.780 - 00:09:07.546, Speaker A: Yeah, let's see if it actually works. It. Okay. Yeah, looks like it works.
00:09:07.648 - 00:09:08.522, Speaker B: Nice work.
00:09:08.656 - 00:09:37.960, Speaker A: Cool. So, yeah, the core package, like I said, it's still extremely early. All of this was supposed to be shipped inside one package when I had this idea. But then we thought that it's probably better to give people more flexibility. So if someone just wants to use our UI components without us having an opinion on how to fetch the data, they can do that.
00:09:39.130 - 00:09:46.470, Speaker B: That's what we've done, is we've split up, we've got eth hooks, and then we have eth components, and they're two separate NPM packages.
00:09:46.810 - 00:10:29.718, Speaker A: Yeah, and that's a great point. And that brings me to that. Without scaffold, this project wouldn't be possible, because a lot of inspiration for this is because I used scaffold in moonshot and I thought that we need to take this and make it available to more people who don't necessarily have a contract they are writing, they just want to create a front end and they can just do it. So yeah, thanks to all of the scaffold authors who have put in so much work. It was like one of the first things I learned when I learned web3. So yeah, it's kind of amazing to be here with you guys.
00:10:29.884 - 00:10:40.140, Speaker B: So you had a token gate component and when we do token gating, there's like a back end server that's required for that. What's happening there? How does the token gating work?
00:10:40.750 - 00:10:53.918, Speaker A: Yeah, so it's definitely a bit of me being naive, me not knowing all of this stuff. So right now it's not secure at all, but what it actually like, security.
00:10:54.004 - 00:10:58.560, Speaker B: In the front end, it's just showing the user how you could do that. Yeah, that's a good place.
00:11:01.010 - 00:11:22.600, Speaker A: You probably can bake something in inside of this to improve the security. We are talking with some people who have done this and they were looking to contribute, but for now it's just like if they have the token display something, if they don't have it, don't display it, which some folks pointed out to me, it's not really a great way to do it.
00:11:24.170 - 00:11:49.918, Speaker B: So is there a place we can go in terms of docs? Is there like a docs web3 UI? What I'd like to see is just a list of all your components and kind of how to implement them. A list of all the hooks and how to implement them. I feel like we have some that you could use and you have some that we could use and I feel like should do some more just kind of collaboration around this kind of stuff. But yeah, what's a good docs page or what's a good page for us to kind of look through this a little bit more?
00:11:50.084 - 00:12:59.478, Speaker A: So if you want to interact with the components, we have this storybook deployed that anyone can check out. Then we have docs for all of these packages on the NPM page. They're not really exhaustive, but they are enough to get you started and let you understand what each of these components is doing, each of these hooks are doing. So yeah, awesome. And one more thing that I was a bit skeptical about is that since there are already some packages that implement hooks so well, I was thinking of switching to just using maybe Scaffold e's hooks or just using Wagner's hooks instead of using our own and reinventing the wheel again, some kind of turn up on that. Do we really have something on our hands here or is it just the same thing?
00:12:59.644 - 00:13:03.542, Speaker C: The hooks version four are really on.
00:13:03.596 - 00:13:34.126, Speaker B: Steroids, so you might want to look at them. We have a creator here, Srivan. Maybe we could all get on another call some other time and kind of talk through this. Because really what we would like is a really good lights out hooks MPM package and a really good lights out ETh components package. And no matter what you're using, if you're using Scaffold ETH or whatever, you can just bring those in and they're useful. And there's way less stuff in scaffold ETH and more of this stuff is just available for anybody to use. Even like your NFT display stuff.
00:13:34.126 - 00:14:07.554, Speaker B: I don't think we have any components that do NFT display, so there's a couple of things that we could definitely use from yours. The ether input is like, I feel like that's such a clutch component. Like if I type in ten eth. Yeah, it's showing it in way. I want to be able to click it and switch back and forth between USD. They're just like a little bit different too, between our components and your components. And it might be fun to just go through each one and talk about the pros and cons of each one and see if maybe it's like, oh, we could merge this into one thing, but that's probably for a later discussion.
00:14:07.554 - 00:14:29.438, Speaker B: I think right now the goal of this video is just like, if you are a developer out there and this looks interesting, how do they get started or where would they go to? I think basically it's like just go import web3 UI. Is that right? Is there a good landing page? This storybook is good and I'll share that in the notes. The link is really weird for the storybook. Is it going to be up forever? Can I paste that to people or is that ephemera?
00:14:29.534 - 00:15:04.160, Speaker A: I'm pretty sure because the link is weird because you're using chromatics free plan. So the link is cryptic, but it's pinned here so I'm pretty sure it doesn't change. Cool. And if anyone wants to get started real quick, I guess just go to the repo. And we have readme for each of these packages inside their folders or on NPM. We have doc strings for each of these components. So you can kind of look into the source code if you want to know how each of these are working.
00:15:04.160 - 00:15:26.118, Speaker A: And we have kind of this example app that it's kind of in a weird place right now, but you could probably get an idea of how you would use this in an XJs app. I'll paste the link to the repo. So. Yeah.
00:15:26.204 - 00:15:29.880, Speaker B: Awesome. Yeah, we'll include those links in the YouTube video too.
00:15:30.490 - 00:15:42.220, Speaker A: Awesome. And as you can see, there's a lot of work to be done. There is, like, a whole list of issues, and we are still working on these.
00:15:42.990 - 00:15:44.460, Speaker B: Is it mostly you?
00:15:45.390 - 00:16:12.210, Speaker A: I would say it's mostly me and, like, 70%. But then there's people like Witard, who is a chakra Ui core team member, so he has been really helpful. Then there's people called Eric. There's Carlo, there's Camila. There's Nazi. Nazi from moonshot. I would say these are the main contributors.
00:16:12.210 - 00:16:15.700, Speaker A: And this would have been impossible if I tried to do this.
00:16:18.630 - 00:16:46.478, Speaker B: There's. There's a couple parallel efforts here, and that's just kind of what happens in a decentralized world, right? There's not some top down we need to build this thing. It's more like lots of people recognize it, and after a while, they start building something. And our hooks library is similar to your hooks library, but not the same. And it's like we should have kind of more of an offline discussion sometime, just our whole group with you and kind of go through what can we steal from you? What can you steal from us? That kind of stuff. We can create a telegram channel, I.
00:16:46.484 - 00:17:09.380, Speaker A: Think that's for sure. I'll do that. I think, like you said, we both have some really good things that we can merge, probably scaffold. Heath has more good than this package, but I think it's important that we streamline our efforts so that we aren't stepping on each other's foot and having just one thing that people can use. That would be awesome.
00:17:12.090 - 00:17:28.410, Speaker D: It's definitely possible with the hooks. It's a little harder with components because we're using ant, but I really love what your guys have done with the UI and storybook. It's super easy to use. It looks really nice. The code is really nice. I was just checking it out, so. Wow.
00:17:28.480 - 00:17:30.380, Speaker A: Good job. Thanks.
00:17:32.190 - 00:17:48.018, Speaker B: The ant d stuff, this is more of, like, a meta conversation, but maybe bliss can get into it too. But our own ant d stuff, is it locking us down? Should we be in chakra? Is that a goal eventually, or are we opinionated and saying ant d is the way to go? For now.
00:17:48.104 - 00:17:53.410, Speaker D: I actually wanted us to do tailwind, and so does tailwind. We're free from any framework.
00:17:53.830 - 00:18:20.460, Speaker C: Yeah, but the goal is to also kind of make eth components that we have on scaffold eth right now that we're currently working on is just to make it so you can fork the web3 logic layer and then add and wrap it around whatever UI library that you want and UI component that you want, and you're good to go. So we're gradually getting there. It's just a slower process, but it's working.
00:18:22.030 - 00:18:47.174, Speaker D: We have a lot of things to share, diva. So I think we should probably have a call. We're just going through ethics before, which is a big upgrade, and it does a lot of things with context and creating a layer of caching and all that stuff. But there is a lot of cool things you guys are doing with components. So I think we can talk about ideas and what we can share or what we can actually just learn from each other. That would be kind of cool.
00:18:47.292 - 00:18:54.790, Speaker A: I kind of share the same opinion that the hooks that you guys have are probably way better than any of these hooks.
00:18:56.010 - 00:18:57.240, Speaker B: They're very similar.
00:18:57.930 - 00:19:25.440, Speaker A: Yeah, extremely similar, because we kind of started out with different names, so we only started with one use contract hook, but then we realized that you can't really have one hook for contracts. In some cases, you just want to read from a contract and you can't ask for a signer. And we kind of ended up having the same API as scaffolith or the Wagmi package, and then we realized that, hey, something's wrong.
00:19:27.010 - 00:20:23.730, Speaker B: I think really what we use is like one of our best metrics is we just sit down and build something with it and see how it goes. So maybe not only should we have you together with us in some telegrams talking about how we could collab, but know in a week or two, let's just sit down and kind of build a few things. Let's build a little NFT marketplace, and maybe we build two or three different versions, and maybe we're all on the same call and having a beer and working through it. But one guy's using web3 u guy, one guy's using eth hooks, one guy's trying to use web3 js and pulling their hair out. We should do just kind of like a fun build session and kind of just go through and use our tools, and it'll be great for feedback for us and great for feedback for you, too. So I see a lot of good collabs in the future between us, but let's get this video out there and show people just like, how web3 UI works and where they go and then kind of maybe in the future we may have some kind of merge or splurge or merge that will happen eventually.
00:20:24.150 - 00:20:28.280, Speaker A: Yeah, for sure. Wouldn't want to be the web3 js guy.
00:20:29.290 - 00:20:35.942, Speaker B: Web three js was dope. I used it for ETH build. Web three js was very useful for what it did back in the day.
00:20:35.996 - 00:20:36.454, Speaker A: Yeah.
00:20:36.572 - 00:21:13.092, Speaker B: And even when I switched from web3 js to ethers, it was kind of a headache because the mental model was different. And actually I think Rick Moo did a better job of splitting providers and signers and making that more obvious. But for me, I didn't even know about that and web3 js took care of it. So then when I switched over, it was a headache. But really you want the end user to kind of understand the difference of that and there's like a mental model kind of change that it takes. Any closing thoughts here? Anybody else have any questions? Awesome, man. So I'll post a link to the storybook.
00:21:13.092 - 00:21:27.230, Speaker B: I'll post a link to the NPM library. Yeah. Anything else you want to see or your issues? What would be your call out to new devs coming into the space that are thinking about what tool do they use?
00:21:27.840 - 00:21:56.896, Speaker A: So I would say if you are new or if you are just a dev, just give this a go, build something with it. I'm sure you'll find some errors. Tell us about it. If you want to contribute, like just open an issue. If you want to put in a PI yourself, awesome. If not, someone else will take care of it. And I guess that's a good way to build a tool that all of us can use since I think it's needed to make all of our lives easier.
00:21:56.896 - 00:22:03.590, Speaker A: So yeah, and thanks Austin and team for taking time out and listening to me.
00:22:04.200 - 00:22:08.616, Speaker B: Heck yeah. I feel like we have a lot of room to collaborate and coordinate.
00:22:08.688 - 00:22:11.484, Speaker A: Yeah, I'm really looking forward to that word.
00:22:11.602 - 00:22:13.352, Speaker B: Awesome. Thank you. Daiwat.
00:22:13.496 - 00:22:13.900, Speaker A: Wow.
00:22:13.970 - 00:22:15.770, Speaker D: Amazing job. Thank you. Thanks.
