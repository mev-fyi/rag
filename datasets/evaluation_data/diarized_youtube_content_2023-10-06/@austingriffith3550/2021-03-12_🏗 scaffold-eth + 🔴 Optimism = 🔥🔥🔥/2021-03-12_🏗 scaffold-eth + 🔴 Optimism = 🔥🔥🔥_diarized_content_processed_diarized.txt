00:00:00.250 - 00:00:16.000, Speaker A: Not yet. Now we are. Here it is. Happy bow tie Friday. I'm here with Adam. We are going to look at an optimism DAP starter kit. Basically.
00:00:16.000 - 00:00:38.738, Speaker A: Let's just dive into it. How about that? So I'm going to share my screen. We're going to look at boom. We have Scaffold eth. You and I, in a great community, have put together this really cool dap toolkit. It's just like a freestanding dap that you can get in and tinker with your smart contract, tinker with your front end. Lots of good examples, lots of good challenges.
00:00:38.738 - 00:00:51.580, Speaker A: And then the optimism crew came out with this optimism integration repo, which is basically like a docker container that brings up, like, l one and l two and bridges and everything like that. Is that right? Do you want to add some color to that before I go on?
00:00:52.190 - 00:01:36.950, Speaker B: Yeah, I guess the big picture is we're trying to get, like, a local environment stood up for optimism, just to make it easy for us to build stuff, maybe other people to build stuff. Obviously, you can't just run, like, a local chain because you need a roll up. And it's not just like we've done some stuff before where we've been running a side chain and local chain, they've been talking, but obviously with the roll up, it's a bit different because then it's actually, like on top of the main chain itself. And so, fortunately, there is this optimism integration thing, which lets you sort of stand it up all in one a as a starter thing. We sort of pulled this into one of the branches, scaffoldith branches, just as sub modules. Effectively, if you pull down that branch and initiate the sub module, then you can essentially stand the thing up from within scaffold.
00:01:37.110 - 00:02:04.830, Speaker A: And that's what we're going to do right here. So you've written an article about it also, and we'll put the article in the notes. But let's just get started with. You can go to code here and you walk them through kind of the mental model of what's going on here and some of the gotchas. I think that we'll leave that to the reader. We'll kind of pick up a little bit of that stuff. But what we're going to do is just start right in this local optimism branch of scaffold eth.
00:02:04.830 - 00:02:31.318, Speaker A: If you just go to Scaffold Eth and look for local optimism, there it is. And this should be optimism locally with everything stood up. So we start by cloning it down and yarn install and yarn start I've saved us some time on that just because it takes a little while. But I do want to do this one manually. I want to bring up the optimism side. Is it one docker container with six things or six docker containers?
00:02:31.494 - 00:02:41.070, Speaker B: I think it's six docker containers, but all under one sort of Docker compose thing. So you get a bunch of them standing up in one terminal.
00:02:41.570 - 00:02:50.420, Speaker A: Okay, here we go. So the first thing we're going to do is init that sub module, like you said, we're going to update that sub module, which I think just does like a git poll and pulls in any code.
00:02:50.950 - 00:02:53.586, Speaker B: Yes. I think you've probably done it on this repo already.
00:02:53.688 - 00:03:03.960, Speaker A: Looks like it's already failing. Yes. And then make up. Right. And this makes the whole rocket launch pretty much.
00:03:04.890 - 00:03:07.926, Speaker B: And it kind of gives you the sort of step by step.
00:03:07.948 - 00:03:08.886, Speaker A: So you can see all the stuff.
00:03:08.908 - 00:03:32.640, Speaker B: That'S happening now is that you've got like, l one chain, which is like your base level chain. And currently what's happening is a load of the sort of optimism. Contracts are being deployed on top of it. And then you've got these other layers which you can see they're sort of waiting for stuff to be done. And then once all the contracts are deployed, once the l one chain is done, then the sort of bridging stuff stands up. And then the last thing that stands up, I think, is the l two sort of roll up. The optimistic roll up.
00:03:33.410 - 00:03:50.326, Speaker A: Awesome. Okay, so now I think it's ready to go. What do we see in the front end? If we try to open it up, we do see a front end. Okay. But our contracts aren't deployed yet. Is that right? So we need to do one more command here. Yeah.
00:03:50.348 - 00:03:58.598, Speaker B: Although we can even from just now in the app, there are a couple of things you can already do, because.
00:03:58.764 - 00:04:01.802, Speaker A: Just in the here. Okay.
00:04:01.856 - 00:04:28.034, Speaker B: Yeah. So we tried to make it sort of comparable to scaffold eth, like just regular setup. But obviously the different thing is you got to be not just looking at one chain, but you're looking at two chains. And so you've got these two balances up here. The local faucet is there in the bottom left that's pointing at the l one chain. So if you drop your address some eth, then it'll drop you eth, just like a regular local node. You can see that sort of lands there.
00:04:28.034 - 00:05:06.400, Speaker B: And then the first thing we kind of did, which you kind of get off the bat, is just this optimistic eth bridge. So this is moving eth from l one to l two, it's like a little hopefully encapsulated component and all being, well, that will bridge so you can see it jumped across and you could go backwards again. So that's a little thing where there's a couple of things to be aware of there. On l two, actually, Eth is just an ERC 20 contract. So it's a bit like a bit of a different mental model. But I know that they're also making some changes to make it feel a bit more like native eth as well.
00:05:07.010 - 00:05:44.426, Speaker A: That's probably one of our first gotchas to talk through this is you don't have native eth. If you have a payable function or you have anything in your smart contract that's accepting native eth, you've got to carve that out and you've got to look at, can I make this an ERC 20? Can I make some tricks happen here? So I'm not using native Eth, which means you don't get like the fun hooks and stuff like that, that you get from a payable contract where it has that receive function. Right. Your ux will change a little bit. You'll have to have some approve patterns. But with optimism, it should be approve and transfer very quickly. Right?
00:05:44.608 - 00:05:56.606, Speaker B: Yeah, I think they are also going to be adding it so it feels more like native, so that some of those things do hook up. But right now, I think we're having to sort of treat it like an ESC 20.
00:05:56.788 - 00:06:23.106, Speaker A: Okay, so now we need to get into our folder. We need to create. Okay, so one thing is the local chain is not our usual hard hat chain. They've got a guest instance running in here. So we're going to have to do a yarn generate right out of the bat. And what that does is just create a local mnemonic and gives us a deployer account. Now I think I'm going to take this deployer account and I'm going to move into the front end and send that deployer like one eth.
00:06:23.106 - 00:06:36.940, Speaker A: So they have plenty. Whoa, come back here. So they have plenty of money to. There we go. Okay, that's plenty. And then we just deploy oe. Right, here we go.
00:06:38.110 - 00:06:58.580, Speaker B: Yeah, so I guess that's, again, one thing to call out currently on local testnets and also on the Covan instance is that there's no gas fee. Like there's no gas, you can get free transactions on l two. So that transaction Austin just made was to just the l one chain, because everything's free on l two right now.
00:06:59.590 - 00:07:22.162, Speaker A: So just to give me a little bit of balance on the guest node, I actually don't need a balance to deploy contracts right now on l two. Just to dig into that a little bit more. Yeah. Okay. And we'll see that here. When we bring up two users, they can kind of interact with our contract without having gas, which is interesting. And is it always going to be like that or they'll build that in eventually?
00:07:22.226 - 00:07:58.662, Speaker B: Yes. So I think there'll be gas fees. If you jump back to the console, you can kind of see what we've just done here because we've done a bunch of stuff, I guess, and you can actually see it from here. So you can see in the logs that first contract is just getting deployed on l two. And you can see it didn't cost anything to deploy, whereas on then the, er, the first ERC 20, which would have one, we talk about all this stuff cost a little bit and then. Yeah, so you can kind of see that pattern. And the thing we've done here, just beneath, which is basically just taking that ERc 20 that we've deployed, depositing it to l two and then bringing it back to l one.
00:07:58.662 - 00:08:05.206, Speaker B: So, yeah, it's kind of like a deploy script also a little end to end test all at the same time.
00:08:05.308 - 00:08:13.850, Speaker A: You have a demo equals true here inside that oe deploy script. And if demo is true, it goes through that full bridge demonstration.
00:08:14.270 - 00:08:14.634, Speaker B: Yeah.
00:08:14.672 - 00:08:50.950, Speaker A: Dope. Okay, so now what's interesting, though, for a smart contract dev, or a decentralized application builder, is we have our contract here and it's playing by the rules of optimism. But locally, and this helps us set up, like, what are we going to be able to get away with? What's it going to feel like? How's it going to work on optimism? And this is kind of the important part. Can I turn the demo off so I can tighten up the dev loop a little bit? So if I want to. What's that?
00:08:51.100 - 00:08:53.414, Speaker B: Yeah, so if you just go and you can.
00:08:53.532 - 00:09:10.966, Speaker A: There we go. So I'm going to add some more exclamation points. So here's my contract. We have a simple purpose in here. Timestamp we should look at. Right. We want to kind of play around with timestamps because the block hash and the block timestamp are going to be different because you're probably talking about the l one block timestamp.
00:09:10.966 - 00:09:32.546, Speaker A: I don't know. I'm excited to get in here and kind of just test my assumptions. But now we should deploy our contract and this should reload. We should get a fresh contract over here with our extra exclamation points. And then a user could also say hello and change that purpose. And man, that is fast. Okay, cool.
00:09:32.546 - 00:09:41.990, Speaker A: So timestamps are one interesting thing to look at. Right. Maybe we should look at that first. What is the timestamp?
00:09:42.730 - 00:10:21.586, Speaker B: Yes, I guess the only other thing I call out, folks, should be potentially gotchas is that it doesn't just use a regular compiler. One of the things that's happening differently is contracts have to be specially compiled to deploy an optimism. And it's been done in such a way that it's pretty seamless. If you go back to the console, you can see that compiling one files is zero point 17.6 just above. And then with the OVM compiler. So essentially there are two compilations going on and you can turn the OVM compilation off if you like.
00:10:21.586 - 00:11:05.200, Speaker B: But as a general rule, it's good to check that stuff works on L1 and compiles an l one first because you might have just made some dumb mistake that's not even related to optimism. I certainly did. But then you'll also get some specific errors getting thrown if you've got like a call to balance or something that's not supported in the OvM. So yeah, essentially when you're deploying to optimism, you're using differently compiled stuff and you're also using a variant of ethers that's a bit different. And so I've got this. In this repo, there's like a wrapper function which lets you sort of say if you want to deploy the OVM or not, there's a bit of sort of handling. It's not quite as simple as just pointing at a different RPC, but it's pretty close.
00:11:05.910 - 00:11:24.086, Speaker A: Awesome. Yes, I see this Ovm true versus Ovm false here in the deploy. So we're deploying our contract to which RPC we're going to. And you can tell that you've got l one RPC and l two RPC and then just ovm whether or not it's true. And then like contract args. Right. Very cool.
00:11:24.086 - 00:11:44.750, Speaker A: Okay, so I noticed that I keep going back to timestamps. I don't know why I'm hung up on the timestamp idea, but basically the block timestamp is not changing as I'm updating stuff here. And that's because we need a transaction to happen on l one. Right. So if I go here and do this, this would cause l one. And now we get a fresh timestamp.
00:11:45.890 - 00:12:00.478, Speaker B: Not quite. So that's the thing with the heartbeat that we were talking about. If you go back to the smart contract, we've kind of. We've got. Kind of got these. Yeah, this get like terrible labeling, like. But timestamp.
00:12:00.478 - 00:12:28.060, Speaker B: And get optimistic time. So the timestamp is just set whenever we set a new purpose and get optimistic time is just getting the. Is like just a view function that's getting the blocked at timestamp. So we could see those things being out of sync. But like you said, the timestamp is not changing. And the reason for that is that time on l two is basically like when you call blocked timestamp, there are no blocks on l two. It's referencing time on l one.
00:12:28.060 - 00:12:48.082, Speaker B: So you can see that the timestamp is not actually changing. So then there are two things which reset the time. One is if there's like a bridge event. So if you go back to the bridge and send some eth from l one to l two, then if you jump across, that should all being.
00:12:48.136 - 00:12:51.506, Speaker A: Well, there it is. And we got a timestamp update, too.
00:12:51.608 - 00:12:52.162, Speaker B: Yes.
00:12:52.296 - 00:13:36.314, Speaker A: Okay, cool. But going back to this heartbeat thing, what I'm getting the feeling of is if you're building a game that requires time or timing or rounds, there sounds like there might be a heartbeat from them. But really you could set up your own script that hits a contract and writes the current timestamp every five to 10 seconds, depending on what that network looks like. I don't know what the network delay looks like or how fast this is actually going to be. I don't know if anybody does, but this is cool that we get to play within the sandbox. So when they're ready, we can just fire this stuff@main.net. Okay, so I'm going to stop diving too far into timing.
00:13:36.314 - 00:13:59.586, Speaker A: Timing is not that big of a deal. We can write timestamps to it. So no native eth. So you've got to have that ERc 20 built in. And it sounds like the optimism crew is going to try to make that feel very native still. But it will be on ERC 20s we're compiling with a new compiler. And that means that there's a little bit of overhead, so I'm guessing your contracts need to be a little bit smaller.
00:13:59.586 - 00:14:08.906, Speaker A: We've got this timing issue. What other gotchas are we looking out for here? Anything else that comes to mind that kind of tripped you up along the.
00:14:08.928 - 00:14:52.394, Speaker B: Way with building this says the one thing, and I don't know if it was this or was it? But it was. Oh, yeah. So like all accounts are actually like smart contract accounts. Like there's an account abstraction. It's not like they're not all like standard DOAs, like on l one, which means that, I think there was a thing where I was using an open Zeppelin library which expected some kind of interface, I think, to safe transfer ELC twenty s and safe transfer checks. If it's like there's a certain receiver thing applied, because that's not applied, all of my smart transfers were just failing. Regular transfer works fine.
00:14:52.394 - 00:15:16.740, Speaker B: But again, that's just a thing where you're interacting essentially. When you make your first transaction on optimism with an eoa l one under the hood, the sequencer basically deploys or creates this pseudo smart contract. I'm probably mangling the words there a bit, but basically it's just a bit different in that sense, too.
00:15:17.110 - 00:16:12.974, Speaker A: Awesome. Okay, so I'm going to switch gears and I'm going to go to the optimistic nfts next. Is that cool? Or do we finish that off? All right, so now it's sort of like as a contract builder, as a Dap builder, I'm going to take your template that you've created and I'm going to build kind of an application on top of it and play around with other things. And we have this cool Nft branch going on right now where if you go to scaffold eth and you look up, I think simple NfT example is the best place to start. It kind of takes you through building an NFT. But then there was this cool buyer mint nft where we set it up so it's counterfactual and it displays a whole gallery and you can click, and then once you click to buy them, you pay the gas to mint them. So what I've done is mix those two together to create some optimistic nfts.
00:16:12.974 - 00:16:34.310, Speaker A: So we're going to go to the optimistic nfts branch and I think I already cloned it down and CD in. But let's just do a yarn install just in case. Kind of just run through this stuff. Yarn start. Okay. And then we do the usual. Fire up the spaceship, the docker container, probably from Kelvin, right? Fire up Kelvin spaceship.
00:16:34.310 - 00:16:56.450, Speaker A: Let's see here. Let's see. So I need the instructions I have to copy and paste. So we have to go into that optimism integration. Initialize the sub module, double check that we've got it updated, and then do the makeup. Boom. Okay.
00:16:56.450 - 00:17:17.526, Speaker A: So we've got our front end up, our back end. It looks like it had to trash some containers. Lots of colors going on here. But I think that's all going to come up. Okay. And I've got the gotcha here and the total hack where if you want to bring in an NFT contract into optimism. And that's why we're doing this.
00:17:17.526 - 00:17:46.434, Speaker A: This is so cool to run into this kind of stuff. There's one file in the open zeppelin stuff that inherits this address utility file, and it has a payable address in it. And that one piece breaks all 16 files it takes from open Zeppelin to make an NFT. This one file breaks your ability to go to optimism. So we are going to just straight up edit this file. I want to show it breaking first, though. Okay, there we go.
00:17:46.434 - 00:18:07.766, Speaker A: Now we have it all installed. Now if I do a yarn compile, hopefully we should see that it fails on those two files. There we go. Okay, there we go. So line 54 and 115. And it's right here in the. Where is it? Right here.
00:18:07.766 - 00:18:21.418, Speaker A: We want to edit this, dude, right here. This one address sol file. Let's edit that directly. And here it is. Okay. And we have line 54. I'm just going to blindly comment it out.
00:18:21.418 - 00:18:52.694, Speaker A: And line 115 blindly comment it out. Hadrian is out there. I saw he was the last one to commit to this stuff over in Opa Zeppelin, and he got goosebumps on the back of his neck for me doing that. But here we go. Okay, so now we should be able to yarn compile without, and if we want to look at those lines a little closer, they're doing an address, this dot balance. They're doing a dot balance on the smart contract, and it won't have a balance because it doesn't have native eth. And so the compiler throws an error there.
00:18:52.694 - 00:19:00.540, Speaker A: But now we were able to compile with those two lines commented out and we're ready to go. Were you saying something there? What do you think?
00:19:02.270 - 00:19:03.820, Speaker B: That's the one, I think.
00:19:04.830 - 00:19:38.806, Speaker A: Okay, so we have our optimistic eth set up. We have our NFT compiling on the optimism compiler. We're ready to deploy. But the way I've set this up is the artist gets into this artwork JSON file. So the artwork JSON file is just kind of the JSON manifest that goes with the NFts. So I've defined all my nfts here, including like attributes with googly eyes and stamina. But I've put all of my pieces of art here.
00:19:38.806 - 00:19:54.742, Speaker A: So we need to run. Once the artwork is good, you need to run a yarn upload. And this is in the next thing in the readme. You just follow the readme. Right? So what have we done so far? We did the install. We did the start. We brought up the docker containers.
00:19:54.742 - 00:20:28.902, Speaker A: We brought up our local optimism. Then we kind of compiled our contracts. After we hacked those two lines, we edit our artwork. Json now we've uploaded all of our artwork to ipfs, and that gives us back these fingerprints. And what we're going to do is we're going to load those fingerprints into our contract. If we go look at yourcollectible, Sol, the constructor just takes in all these fingerprints and then says these are legal to buy. And then a buyer can come along and hit buy.
00:20:28.902 - 00:20:42.078, Speaker A: And if it's legal to buy, they can purchase that NFT and they pay the gas. The buyer pays the gas. Okay, so we are almost there. We need a yarn generate. Yeah, that's.
00:20:42.114 - 00:20:52.014, Speaker B: Please. I guess the cool thing to say is, because I think you had this branch separately, and to bring this into optimism, you can pretty much just bring across pretty much everything, right?
00:20:52.052 - 00:21:14.162, Speaker A: Yes. I took your starter pack, I copied in my contracts. I got that one weird compilation error where I needed to take it out of that address file. And then I was just bringing in components, like react components and stuff. That was the integration. Okay, so we've got our front end app almost coming up. We're almost there.
00:21:14.162 - 00:21:37.194, Speaker A: What we need to do is deploy our optimistic NFTs or basically deploy the one NFT contract, our collectible contract. And that deploy script is the same. It's this oe deploy. And we do our deployment. Let's see, right. Oh, here. So I'm going to load the assets up, and then I'm going to deploy to.
00:21:37.194 - 00:21:57.822, Speaker A: There it is. I'm going to deploy my collectible with these legal assets. And this is something that I found is like, it breaks right here. And we don't know why. We'll figure out why, but that's why we're doing all of this. We're testing this in the world of optimism. And for some reason, when I add this, 10th bytes, 32, everything breaks.
00:21:57.822 - 00:22:21.962, Speaker A: But let's get to this and let's do. Okay, we've got our art uploaded, we've got our deployment script. I'm going to fund this dude over here at the faucet, just in case, send him an eth. All Right. And now we're ready to deploy, right, here we go. Let's deploy our NFT to our local optimism. And let's see if our front end.
00:22:21.962 - 00:22:36.314, Speaker A: Our front end should reload and we could get in and debug the contracts if we want. Here we go. It's deploying. It's deployed. FA 23. Okay, so FA 23 is out there now. Our front end is reloading.
00:22:36.314 - 00:22:41.182, Speaker A: The rocket is launching, and hopefully there's our gallery of art.
00:22:41.316 - 00:22:41.994, Speaker B: Yay.
00:22:42.122 - 00:22:57.940, Speaker A: Okay, so if this was main net, we would have changed probably a couple of things in this file right here. And we would have gone to Mainnet and it should all work the same. When Mainnet is ready. Yeah, go, please.
00:22:58.550 - 00:23:05.800, Speaker B: So there is config in there. Make to go to Covan. To the Covan optimism, which we could do that.
00:23:06.650 - 00:23:09.080, Speaker A: Maybe we should. Okay.
00:23:09.390 - 00:23:18.780, Speaker B: I don't know, just because the thing where we were hitting, where we were getting the Zero X, with the node deployed, we could have a look at that.
00:23:20.190 - 00:23:42.930, Speaker A: Okay, we've gone down the happy path so far, right? And let me just dive into the happy path a little bit more and show you that. Okay, so I've got this guy over here, and he has eth. Oh, he doesn't even have eth. This is a new chain. And neither does this person here. We have, like, pink person. So pink can buy, let's see, he's going to buy Zebra and rhino.
00:23:42.930 - 00:24:06.346, Speaker A: And let's see, this dude's going to buy Godzilla and buffalo. And you can see that these are now, like, showing up as bot and they're coming into our collectibles. And just like, let's copy this dude's address, and let's send him the zebra and hit transfer. Oh, that's so nice. Let's grab this dude's address and send him the buffalo and hit transfer. And there it goes. There we go.
00:24:06.346 - 00:24:25.540, Speaker A: So we have this really nice gasless, and it won't always be gasless. We'll have to do this eventually. Right? But we have this nice user experience where we're moving around these assets and we're playing around in a sandbox that represents, or is exactly like what main net optimism will be very soon.
00:24:26.310 - 00:24:37.780, Speaker B: Yeah. You obviously very kindly are letting people mint these for free. But if they were more for sale, you could bridge some stuff across from l one and then use that to buy it on l two.
00:24:39.370 - 00:25:03.760, Speaker A: If I was a buyer, I could come into this bridge. Well, first of all, I would need thousands of dollars to buy Austin Griffith's art. So we better get $1,000, and then I'm going to bridge in, like, the whole, .5 right? Let's bring. Come here. Oh, I don't know. I don't know what's going on there.
00:25:03.760 - 00:25:27.990, Speaker A: That little guy wouldn't worry about that little guy. Okay, so actually, I could just hit this five times and bring in all five, right? And pay a bunch of gas. There we go. I think I may have hit the bridge too hard. Okay, now I have plenty of money. Now, I could go back to this gallery and, yeah, we could even sell them on a curb or do something really neat. But yeah, you could pay $100 right there and your money would come through.
00:25:27.990 - 00:25:31.826, Speaker A: Awesome. Okay, now let's break it, right? We've done the happy path.
00:25:31.858 - 00:25:32.326, Speaker B: We've seen it.
00:25:32.348 - 00:25:56.154, Speaker A: Let's see what happens when you're experimenting with a contract and you break something. So what I found was it was silently failing when I put in all of this art. So let's just bring in all the art, and let's do another deploy. One thing we're checking here is this. Debug contracts. There's our FA 23. That's something we're watching closely.
00:25:56.154 - 00:26:15.326, Speaker A: We're making sure this FA 23 changes. So there we've got. It says that we've deployed our contract to 8867. So we're assuming that everything is fine. And here it is, I guess, at 8867. And if I check some balance and make a call against it. Yeah, it's like, whoa, whoa, whoa.
00:26:15.326 - 00:26:33.046, Speaker A: I can't check balance of because this thing doesn't actually exist. Right. So our front end has been tricked into thinking this contract is actually deployed. But then we have this nice little check bytecode button we've added in here. And I think you added it into the. Oh, I need to inspect here. You added it into our deploy script.
00:26:33.046 - 00:26:51.294, Speaker A: So we'll go look at it in a different way. But basically we hit check bytecode here and we're not getting anything back. There's no actual bytecode at that address. And so let's see, how can we test that in the deploy script now? Right? I think you said you wrote something in here that we could. Let's see.
00:26:51.492 - 00:27:06.822, Speaker B: Yes. This is kind of this weird one where we were just seeing the other code. Yeah, it's in the utils. Sorry. I think it should be. I don't know if it'll be in here yet, if it wasn't pulled across.
00:27:06.876 - 00:27:10.102, Speaker A: But you could actually grab it from the front end.
00:27:10.236 - 00:27:11.720, Speaker B: Grab it from the front end.
00:27:14.570 - 00:27:21.030, Speaker A: So there's a check code function here. Let's bring that into our deploy or utils.
00:27:21.450 - 00:27:22.614, Speaker B: Utils. Think.
00:27:22.732 - 00:27:45.026, Speaker A: Okay, and this is so when it deploys. Okay, I got it right here. So it's going to wait for that to be done. And then what we're going to do is checking to be sure. Right. And we're going to actually take the address that it was deployed to and we're going to check to make sure there's actual bytecode there. Right.
00:27:45.026 - 00:28:08.692, Speaker A: And we'll await that's. And for people watching at home, we will have this built in by the time they see it. Right. We'll have this bytecode check. Okay, now let's see what happens. See if I even have the syntax correctly. Okay, there we go.
00:28:08.692 - 00:28:12.600, Speaker A: There we go. Oh, no, what did I do? L two provider.
00:28:13.740 - 00:28:14.712, Speaker B: Yeah, it's the difference.
00:28:14.766 - 00:28:17.556, Speaker A: So if you call it signer provider.
00:28:17.588 - 00:28:25.950, Speaker B: I think optimistic provider, I think is the one you want that guy there.
00:28:26.480 - 00:28:28.460, Speaker A: And that goes in here, right?
00:28:28.610 - 00:28:29.310, Speaker B: Yeah.
00:28:31.680 - 00:28:42.864, Speaker A: Kind of doing this on the fly here. Let's see what happens. Bytecode undefined. There we go. So what we want to do is if not result or something like this. Right.
00:28:42.982 - 00:28:51.830, Speaker B: Actually, wait. Yeah, you'll want to return the code. Sorry. On the check code thing, if that makes sense.
00:28:53.000 - 00:28:53.556, Speaker A: Got it.
00:28:53.578 - 00:28:55.270, Speaker B: Yeah. Return that guy.
00:28:59.880 - 00:29:06.676, Speaker A: Oh, so I don't even need to await, do I? Oh, yeah, I do. Let's just, okay, here we go. Come on, now. And now I have, if not resolved.
00:29:06.868 - 00:29:08.490, Speaker B: It'S going to have a bad time.
00:29:12.560 - 00:29:16.540, Speaker A: There we go. I can hear my cat snoring, Katie.
00:29:18.160 - 00:29:19.740, Speaker B: Better than my dog barking.
00:29:22.160 - 00:29:55.736, Speaker A: Where's the const, I've got a, oh, it's something down here. I'm, I'm missing a, oh, man, it, oh, weird. Okay, result, zero x. Okay, so zero. We're going to say if result equals, equals zero, x. So then we've got a problem, right?
00:29:55.918 - 00:29:56.650, Speaker B: Yeah.
00:30:02.420 - 00:30:25.050, Speaker A: Maybe a warning. Yeah, something like that. Maybe even like break. Right. Wait, return, what am I doing? I'm just like randomly changing the deploy script. Who knows if this thing even deploys? I didn't even, look, contract did not deploy. All right, cool.
00:30:25.050 - 00:30:55.024, Speaker A: Now we've got our safety check in there. So then if I go back to our deploy and I go star slash. So for some reason we have a smaller amount of bytes, 32, that we're passing into that constructor. I do believe the contract does deploy. Yeah, we didn't get the error there. Checking to be sure. We can probably take that out and we'll do a better job.
00:30:55.024 - 00:31:12.964, Speaker A: But you watching at home, this thing is evolving quickly. But on your version, we will probably just throw an error here and let you know that the contract didn't deploy so you don't get out here and try to check a balance and have it fail. This should work now, right? Weird.
00:31:13.012 - 00:31:13.610, Speaker B: Yeah.
00:31:14.540 - 00:31:25.596, Speaker A: Oh, maybe we're doing something. Okay, but let's see. Can I mint this buffalo? Yes. It's actually a bison too. Dope. Okay. I think that's about it.
00:31:25.596 - 00:31:45.204, Speaker A: I think we got it covered. There we go. You can kind of see the demo here. Let's see. So local is what you're looking for here. You go to local optimism in the scaffold eth branches, or you go to optimistic nfts. Those are the two repos we covered here.
00:31:45.204 - 00:31:52.070, Speaker A: And then also your wonderful medium article. Any closing thoughts or anything else to look at?
00:31:54.200 - 00:32:07.720, Speaker B: No, I think that's a bunch of it. I think there's some stuff with the ERC 20 bridging. Bridging is cool. Obviously we've not got the time lags and those kind of stuff. Like the die guys had their cool thing with the instant bridge this week, so it's cool.
00:32:07.790 - 00:32:12.648, Speaker A: We should have a die contract. Right on optimism soon. Cool.
00:32:12.814 - 00:32:14.430, Speaker B: So it's cool to see all of that.
00:32:15.360 - 00:32:26.530, Speaker A: And were you saying that this set up is basically ready to go for someone else who wants to bridge an NFT or wants to bridge an ERC 20 into optimism? Or is that not true?
00:32:28.100 - 00:32:45.780, Speaker B: So pretty much picked up. Like, there are a couple of the core optimism contracts which are set up to facilitate that. I know there are some discussions on whether there should just be like one uni bridge, ideally that everyone used so you don't have loads of different contracts that all mean the same token, that kind of nonsense.
00:32:46.300 - 00:32:49.530, Speaker A: We've got that going on in some other side chains, don't we?
00:32:51.820 - 00:33:00.804, Speaker B: But yeah. I don't know. I just love making transaction in one place and seeing it happen on a roll up or a side chain.
00:33:00.852 - 00:33:34.436, Speaker A: It's cool stuff. How about the weird collision oracle thing? So we're thinking about making a game. Imagine, first of all, when you're thinking of OVM, it's pretty real time, right? These transactions, it's basically the time it takes to get across the network and get to the magic verifiers. I don't know what's going on underneath the sheets, but I do know that it feels mostly network bound to interface with optimism. And I don't know if it's always going to be like that, but we're thinking of a game that's more like kind of things moving around. You can imagine there was a rock paper scissors demo. That's really good.
00:33:34.436 - 00:34:16.280, Speaker A: Where you have these agents that land in the world, they're either a rock, a paper, or a scissors, and they have a random trajectory, right? So, you know, given a starting point and a starting time and a trajectory where they are at any given time. So we can kind of just do one transaction, and that causes them to move. Now, we can set another transaction and turn them or something like that. But let's say they're just all moving in the world. Eventually they're going to run into each other. And what we need to have is a collision oracle that says, hey, these two just collided, right? You would have someone watching off chain and making a transaction to optimism. Anytime these things run into each other and a collision oracle would say, hey, these things are close enough, cause a collision.
00:34:16.280 - 00:34:37.544, Speaker A: And the contract would say, are they close enough, given those trajectories? And if so, then we do a collision in solidity. If it's rock, then it beats scissors. If it's paper, it beats rock. Right. Then we turn both of them into the winner, and then we set them off on a random trajectory going somewhere else. I think we could totally do that. I don't know what the limitations would be.
00:34:37.544 - 00:34:42.570, Speaker A: It sounds like something fun to do. Maybe we'll do that for our next bowty Friday build.
00:34:42.940 - 00:35:14.804, Speaker B: Yeah, sure. There's the thing I think I said in the article, there's different mindsets. I think probably when, if you're trying to build something that's on l one and l two, that you need to think about how those two things work together, making sure people are on the right network, that kind of stuff. But then there's also just a spot where you're like, let's just go hang out on optimism. Create cool stuff there that's faster, cheaper, all that kind of jazz, which is, like, a lot of the reason a lot of the benefits of nifty ink being on XDA is because of the speed I can see people just.
00:35:14.842 - 00:35:36.376, Speaker A: We need to be able to ramp people directly into the l two s, though. That's a tricky thing. Right. That'll be a lot of fun with some of these games, is you just land, you borrow a penny in l two, and then you can just kind of make transactions and play around quick and fast and cheap. Awesome. Optimism on scaffold eth. Happy bow tie Friday.
00:35:36.376 - 00:35:38.970, Speaker A: Thank you, Adam. See you.
