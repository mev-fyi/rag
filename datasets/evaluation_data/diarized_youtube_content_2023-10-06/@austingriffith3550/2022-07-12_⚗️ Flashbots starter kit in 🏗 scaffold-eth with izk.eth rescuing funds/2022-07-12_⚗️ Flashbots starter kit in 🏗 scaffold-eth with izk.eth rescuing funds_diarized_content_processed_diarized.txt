00:00:03.690 - 00:00:31.206, Speaker A: What's up? I'm here with Sean on and Isaac. We're about to do the coolest shit. Okay, so, Sean on, you had a stream from the build guild, and what that was was a smart contract that allowed you to withdraw funds as you worked and turned in stuff to the build guild. And the account associated with that stream got leaked somehow. Probably. You put a mnemonic in GitHub, if I had to guess. Is that what happened?
00:00:31.308 - 00:00:31.586, Speaker B: Yep.
00:00:31.618 - 00:01:04.322, Speaker A: That's okay. So now we have this money that's locked up in this smart contract that only that address can get, and you've leaked them. Mnemonic or private key. So if we just had ETH in this account, there would be a bot that would watch that and it would sweep it immediately. But the bot has no idea that there's this money locked up in this contract. And if we just withdrew, if we just put the transaction into withdraw, my assumption is that that bot is going to be like, wait a minute. No, withdraw to me and front run us and steal the money.
00:01:04.322 - 00:01:21.654, Speaker A: So what we're thinking about today is we could use flash bots. We could use the compromised account to package up some transactions that basically approve. What's it going to do? Withdraw and move the money? It would have to withdraw the money and then move the money.
00:01:21.692 - 00:01:26.038, Speaker C: It's actually three transactions. So we have to fund it from an external account.
00:01:26.124 - 00:01:26.374, Speaker A: Yes.
00:01:26.412 - 00:01:38.746, Speaker C: So an account that has ETH, we have to fund it. But the second that it gets funded, the bot is going to take it. So we have to bundle the transactions together so that we fund the account, we withdraw from the stream, and then we send the proceeds from the stream back to that account or to your.
00:01:38.768 - 00:02:04.194, Speaker A: New account, never touching the mem pool, basically rolling all these transactions up and then bribing a miner to put it into the block directly using flashbots and a bunch of cool tools. And also, Isaac has prepared something in Scaffold ETH that could lead to being a flashbot starter kit in Scaffold ETH, all while he is in this beautiful french castle. I don't know.
00:02:04.232 - 00:02:05.086, Speaker C: What is it?
00:02:05.128 - 00:02:15.286, Speaker A: French. This beautiful german castle. That is not a fake background. That is a real castle. Yes. Amazing. Amazing.
00:02:15.286 - 00:02:36.078, Speaker A: So, so much exciting stuff happening. So glad to have you at home along on this fantastic journey. I'll let Isaac take it away here, though. I think we're going to share our screen and we're going to look at it so, so far. Sean on have you hooked us up with a private key yet? I don't know if. Okay, you've imported it.
00:02:36.164 - 00:02:46.254, Speaker C: I've imported the compromise account, and we can see that there's just $0.31 left in it, which is just, like, not enough to really do a transaction, not enough to withdraw from a stream. So I have this account that has.
00:02:46.292 - 00:02:48.446, Speaker A: We sent funds, it would get leaked right away.
00:02:48.548 - 00:03:23.054, Speaker C: Yeah, sorry, go ahead, keep going. I have this account that has some eth in it, and this, what I have on screen is my new Flashbots bundler app. So it's just like I used, basically stitched together a couple other scaffold eth builds. So, this is the Abi app, where I can just paste a contract in an ABI, a little eth sending screen, and then a flashbots RPC page. So, these screens that I'm using are going to allow me to create a bundle of transactions that all get executed atomically. They all get executed as a bundle, so that people can't slip all these evil mev transactions in between. So without anything else, I'm just going to dive in.
00:03:23.054 - 00:03:47.154, Speaker C: So the first thing that we do is we get a new flashbots bundle RPC. So the way that the flashbots RPC bundler works is that you just get a new Uuid and attach that to this RPC. Flashbots. Net question mark bundle. And then you give it the uuId, and then this is the network that you add to metamask. And so I have this network.
00:03:47.282 - 00:04:25.130, Speaker A: We double click on that real quick. So, flashbots is basically creating an interface for you. They're creating a special RPC that you would use, and it's specifically just for you. You go to the flashbots and say, I have something neat I want to bundle up. And they say, okay, use this RPC. So they give you a unique RPC that you can set your metamask to. And basically, you're going to make transactions to that fake RPC, and all that's going to do is really just kind of tell the flashbot system what order of transactions, and you're actually signing those transactions.
00:04:25.210 - 00:04:25.550, Speaker C: Exactly.
00:04:25.620 - 00:04:29.534, Speaker A: Those are not going on chain. They're just going to the flashbot server.
00:04:29.662 - 00:04:37.454, Speaker C: Exactly. Yeah. And so everything that I submit now that I'm attached to the flashbots network, as I have it misspelled. Flask hots. Flask.
00:04:37.582 - 00:04:38.850, Speaker A: Flask bahats.
00:04:39.750 - 00:05:16.014, Speaker C: I also do not actually have 100 eth in here. So what flashbots does is their fake network pretends that you have 100 ETH so that metamask doesn't reject your transactions. There's in reality, like, far less in here, but the first transaction that I'm going to add to the bundle is a transaction to fund the compromised account. So let me grab that address. So it's this 26 a account. And I'm going to go back to this account, which actually has some ETH in it. And another thing that's cool about this is that you can bundle transactions together from multiple different wallets.
00:05:16.014 - 00:05:35.670, Speaker C: So I'm just going to paste this here for my reference. And then every time I disconnect and reconnect the wallet, the RPC, the page reloads just because it does the thing. But what I'm going to do is just grab that. As long as you have this uuid, you can always fetch the current status of a bundle. And so I paste that there.
00:05:35.740 - 00:05:36.070, Speaker D: Cool.
00:05:36.140 - 00:05:54.574, Speaker C: Now we have the original bundle. So as I said, the first transaction is going to be to send a little bit of eth. I think sending like 0.5 or something is going to be sufficient. So I'm going to send it to pht ETH. I want to do this in ETH. So I think 0.5
00:05:54.574 - 00:06:25.640, Speaker C: should be sufficient and I'm going to hit send. And now this is an important step is in order to bribe the miners to be nice to us, we have to crank up the gas way higher than you'd think. So I'm going to pay a maximum priority fee of 100 guay and a maximum fee of like 350. And so not that bad. But basically my rule of thumb is to pay three times the current market rate. This is a little bit more just to really get it through because we're recording a demo. But if you pay like three x the market rate, then that's a good bet.
00:06:26.170 - 00:07:03.234, Speaker A: So there's not any other mechanic here that is being used to bribe the miners to make this happen. We just sign a transaction with really high gas prices and they're intrinsically incentivized to throw that into the block, is that right? There's not some other scheme that we're using. It's just take the normal transaction, crank up the gas price, sign it, and send it to a private server where they will bundle it up and put it into a block for us without it hitting the mem pool. But technically they could leak that transaction and they could put it into the mem pool just to mess with us if they wanted to.
00:07:03.352 - 00:07:04.018, Speaker B: They could.
00:07:04.104 - 00:07:29.210, Speaker C: But MeV is one of these really weird concepts where everybody's kind of working against each other and also together at the same time. So now you can see that we've got one transaction in our bundle. So this transaction was to send 0.5 e to the compromised wallet before I refresh, before I change wallets, I'm going to copy this just to my local thing. I'm going to change accounts to the compromised wallet.
00:07:30.750 - 00:07:35.854, Speaker D: You can queue up multiple different transactions from multiple accounts and then send it all in one go.
00:07:35.972 - 00:07:56.530, Speaker C: Exactly. So bundle is here. I've now connected a different wallet. I am now Peachtree eth, and I am going to grab this stream smart contract and go to the Abi ninja screen. And I'm going to grab the Abi from. I'm going to grab the Abi from this smart contract.
00:07:57.050 - 00:08:05.634, Speaker A: Shout out to developer Marwin. Developer Marwin was the one who built Abi ninja, which we never have deployed to production, but it's a good branch.
00:08:05.762 - 00:08:15.100, Speaker C: Glorious. All right, so I'll withdraw zero point 40 118 because that's how much is in here.
00:08:15.710 - 00:08:38.980, Speaker A: Leave zero eight. That's what is like $8. Leave the $8 in there just to see what happens. Because I think that if we technically hit this, it's going to make it obvious to the attacker that there's eight more dollars left in this contract that they technically could steal. Right? Yeah. Let's do four one and not four one eight. Just to leave just enough in there to make it maybe worth it, just to see what happens.
00:08:39.430 - 00:08:55.480, Speaker C: All right, so here is a stream. Withdraw with the field ninja, because we are being ninjas and I'm going to crank up the gas like before. So I'm going to put a maximum priority fee of 100 and a maximum fee of 350. That should be okay.
00:08:56.650 - 00:09:04.380, Speaker D: Are there any circumstances where someone else can outbid your immensely high gas costs already?
00:09:06.350 - 00:09:33.874, Speaker C: So there are. But basically what flashbots does is what Mev gas does, which is what the miners run that respond to flashbots, is that they just do a calculation and they're like, this guy really wants me to do this transaction, so I'm going to take the bribe. Leave him alone, because we're all better off for it. So we've now bundled a second transaction. Now we need a third transaction to actually send the eth away back to. Do you want to give me a new address? Or maybe I'll just do it to.
00:09:33.912 - 00:09:41.086, Speaker A: So does it simulate? It's basically like, you don't have the eth yet. So how does it justify simulates?
00:09:41.118 - 00:09:50.362, Speaker C: It simulates the bundle. It basically uses a main net fork. Would you send me an address in the zoom chat that you want the fund sent to?
00:09:50.416 - 00:09:51.260, Speaker D: Got you.
00:09:55.390 - 00:10:09.630, Speaker A: Hopefully that's you, Sean, on right, let's send it to you. Yeah. Okay. Every once in a while, someone will recover funds out of a stream and then send them back to me. And I'm like, no, that's your money. Once it hits the stream, it's your money. So make sure it's going to show.
00:10:09.700 - 00:10:26.370, Speaker C: Make sure that it's yours. There's 1.6 in there. Let's go back to the app to address it at that. And now we should have zero point 41 in there, so zero point 41 e. And let's add this to the bundle.
00:10:28.150 - 00:10:29.220, Speaker B: Let's see.
00:10:30.090 - 00:10:32.854, Speaker C: No. Is metamask not going to allow us to do it?
00:10:32.892 - 00:10:57.310, Speaker A: Because that's what I'm worried about, is metamask is not going to see the value. Like metamask is going to say, you don't have that money. Okay? So for those of you watching at home, we'll probably cut some of that middle stuff. The problem we're having is we're trying to make our third transaction, which basically sets it up. So the exploited account.
00:10:57.380 - 00:10:58.462, Speaker C: There, it does have the money.
00:10:58.516 - 00:10:59.246, Speaker D: There it is.
00:10:59.348 - 00:11:26.614, Speaker A: That's right. Okay. So the exploited account basically makes the third transaction. And what we needed to do was point it at the RPC and it was pointed at the main net RPC, so it didn't have money. So now that we're pointed at the flashbots RPC, our attacked account, our account that shouldn't have any money in it, has the money that it needs. So we're able to. There we go.
00:11:26.614 - 00:11:52.990, Speaker A: There we go. So this is crafting that third transaction. So, the first transaction, basically, what does the first transaction do? Sends money into the exploited account. The second transaction uses the exploited account to pull money out of the contract. And then the third transaction moves the money out of the exploited account to a non exploited account. And that's what he's confirming here. And that should set us up with three transactions on the flashpoint RPC.
00:11:52.990 - 00:11:56.080, Speaker A: Oh, man. Is it happening? Are we doing it right now?
00:11:56.930 - 00:12:21.226, Speaker C: Yeah. Bundle submitted oh, my gosh. So now let's grab. Now, another thing about flashbots is there is no explorer, so we just have to wait patiently and just watch for it to happen. It'll be valid for ten blocks. Okay, so let's see, let me grab. This is the place.
00:12:21.226 - 00:12:22.860, Speaker C: We'll see it happen first.
00:12:26.030 - 00:12:27.226, Speaker A: There we go.
00:12:27.408 - 00:12:31.770, Speaker C: Here's that. Peachtree ETh withdrew and it transferred the ETH.
00:12:32.510 - 00:12:40.922, Speaker A: Oh, wow. That's crazy. We did it. You did, Isaac. All Isaac in his german castle.
00:12:40.986 - 00:12:41.870, Speaker D: Congratulations.
00:12:42.530 - 00:12:44.046, Speaker A: Yes. That's so cool.
00:12:44.148 - 00:12:44.826, Speaker C: Oh, my gosh.
00:12:44.858 - 00:12:48.482, Speaker A: Should we do a quick recap of everything that happened here?
00:12:48.536 - 00:12:48.754, Speaker B: Yeah.
00:12:48.792 - 00:13:08.520, Speaker C: So now let's recap. What happened was the private key was leaked. The private key of this account was leaked, and the bot that sit on those accounts just constantly drain any ETh that comes in. And so we might even be able to see, like, a while back when it was leaked, whoever took it stole whatever ETH was remaining in the account.
00:13:09.130 - 00:13:11.110, Speaker A: And we left a little bit in there, too.
00:13:11.180 - 00:13:11.862, Speaker C: So we'll see.
00:13:11.916 - 00:13:13.190, Speaker A: Make another transaction.
00:13:14.110 - 00:13:19.820, Speaker C: 42 in there, so they can have a nice little. Yeah, well, actually, we might as well just transfer that right now.
00:13:23.090 - 00:13:24.160, Speaker B: Let's see.
00:13:24.530 - 00:13:25.630, Speaker C: Compromised.
00:13:27.170 - 00:13:27.822, Speaker B: Let's see.
00:13:27.876 - 00:13:33.554, Speaker C: Let's see where we sent it before the bot detects it. Well, who knows? Whatever.
00:13:33.672 - 00:13:34.338, Speaker B: Let's see.
00:13:34.424 - 00:13:35.650, Speaker C: Let's send Max.
00:13:36.630 - 00:13:39.330, Speaker A: Look at that. We didn't even need flashbots.
00:13:41.110 - 00:13:43.666, Speaker C: Anyway. So here's a quick recap of what happened. Okay, here.
00:13:43.688 - 00:13:44.260, Speaker A: We.
00:13:46.230 - 00:14:24.080, Speaker C: Compromised. We had a compromised wallet. And the issue with a compromised wallet is that if you try to send ETH to it to do other contract interactions, like, maybe you have some nfts that you really care about but the bot doesn't know about, or maybe you have some funds in a build guild stream that you want to recover and the bot doesn't know about. Unfortunately, you can't send ETH to a compromised account, because then it'll just instantly get drained. And so what we did is we used flashbots to bundle three transactions together. We sent money from an external account to the compromised account. We did a contract interaction with the compromised account, and then we sent the recovered funds out of the wallet and into a safe address.
00:14:24.080 - 00:14:45.090, Speaker C: And you can see all of that happen one after another. If we go to Peachtree EtH, which was the one that was hacked, we can see that we sent 0.5 in for gas. We did a stream withdrawal, which brought zero point 41 ETH into the account, and then we sent zero point 41 eth out of the account to safety.
00:14:45.250 - 00:14:47.154, Speaker A: You'll notice all of those are in the same block.
00:14:47.202 - 00:15:14.942, Speaker C: You can see all of those are. Where does it say the block? Oh, yeah, right there. And if we were able to inspect the block any deeper, actually, here. Transactions. So you can bribe flashbots to kind of do whatever. Like, you can actually ask them to put you at the top of the block. It's a nice extortion mechanism that it's public.
00:15:14.996 - 00:15:27.922, Speaker A: So in that case, we put in some extra money, and we just made the gas prices high. If you want to bribe them to do something like put you at the top of the block. There must be some other mechanism for that. Is that right? How do you do that?
00:15:27.976 - 00:16:05.126, Speaker C: If you want to bribe them to put you in the top of the block, you need to actually have that in your smart contract. You need to have it, say, send to block Coinbase. If my transaction index is like, whatever, you make the payments to the minor conditional based on the execution position, which I don't know all the details of, but that's basically how that works. And now, right now, I'm just looking for where our transactions fell in the block. So. Looking for Peachtree eth. I suppose I could just control f for Peachtree.
00:16:05.178 - 00:16:05.890, Speaker A: Okay, there it is.
00:16:05.960 - 00:16:08.500, Speaker C: Here we go. We can see the point.
00:16:09.910 - 00:16:10.738, Speaker B: Let's see.
00:16:10.824 - 00:16:14.254, Speaker A: Zero five e comes in with that bottom one, but what's weird?
00:16:14.302 - 00:16:36.710, Speaker C: Okay, yeah. Zero five eth comes in first, and then there's a stream withdraw, and then everything is sent out, and then there's some sort of, I don't know, transaction to an MEV bot afterwards. I don't know what that means, but these are our three transactions, you can see are executed in a perfect bundle without any mev. Wolves in the dark forest taking our zero point 41 eth.
00:16:37.690 - 00:16:44.220, Speaker A: Oh, huge. So cool. So cool. Great work, Isaac. Thank you so much.
