00:00:00.970 - 00:01:03.002, Speaker A: Hey, how's it going? This is Aussie Griffith and I've been kind of messing around with meta transactions and I wanted to share what I've learned so far. So a metatransaction is very much like a normal ethereum transaction, but instead of sending it straight to the Ethereum network, you craft it up, you sign it with your private key, and you ship it to some other entity that then puts it on chain. And then they're either rewarded or not, depending on how the incentives work. And when it goes on chain, it'll go on to some sort of proxy that can recover the signature to make sure it was you and then carry out some sort of forwarding of some transaction. So at MetatX IO, which is like my sandbox, I've got it set up on mobile and a couple browsers here. I'm going to go ahead and deploy a contract to Rinkabee, submit that anybody can get on and deploy there. There's a learn more button here that takes you to my GitHub repo where you can kind of learn more about this and make fun of my code, et cetera.
00:01:03.002 - 00:01:35.270, Speaker A: So we can see the transaction going through right here. I can click it and watch it go through. So we're just waiting for that contract to get deployed. Now this account here, this middle account is basically going to represent my kind of like cold wallet, right? It's my account that I don't want to unlock the whole bunch. I don't want to be sharing my key, don't want to be moving that around a bunch. This account that has this 3.7 e in it is just going to be used to kind of fund things and then we're going to be off to the races with using the proxy contract.
00:01:35.270 - 00:01:57.614, Speaker A: So it'll show up there. There's the pink icon. I can click that and then that takes me in also I can click it over here. This is like the client, the client is the same here. It looks just the same. I'm going to go ahead and sign the contract with my private key on my device. So the private key never leaves the device.
00:01:57.614 - 00:02:32.606, Speaker A: The device doesn't have any eth, but it's going to create metatransactions, send those to a server, and then those will then go on chain. So there we go. There's my signature I've signed right there. I can click that and add it as a bouncer, which basically just gives it access to send stuff through this contract. I'm going to go ahead and do the same thing over here I'm going to sign, and what you do when you sign it says my address trusts this proxy bouncer at this certain time. Go ahead and sign that. And there we go.
00:02:32.606 - 00:03:13.994, Speaker A: So it shows up here and I'm going to go ahead and add him as a bouncer also. And there we go. So I've got two transactions in right now that are adding these two users as bouncers. And as soon as they are bouncers then I can go ahead and kind of click through and interact with deep dapps. I can send eth, I can send tokens and I can either have this back end miner right here is just something I'm running on a server that's catching these meta transactions and submitting them. So basically this guy here is paying for and he's, this guy here I can click on him and see, so right now he's holding 2.9 e.
00:03:13.994 - 00:03:38.354, Speaker A: He can send them and he's sending them for free right now. But I'll go through that in a little bit. But basically there we go. Both of these bouncers are ready to go. These accounts can send stuff. So the first thing I'll do is the easiest possible thing. I've got this example contract out there and it's just like the first thing you deploy when you're messing with smart contracts is like a counter contract to learn how.
00:03:38.354 - 00:04:21.040, Speaker A: Like it's just like a state machine, right? It's the most simplistic state machine. It keeps account and you can say add one to that account or in this case add five. So what I'm going to do is I'm going to craft a transaction that says I would like to add five to this example contract as me and I'm not willing to pay anything for it is what I'm going to say right now. I'm going to say I'm paying zero for it, I'm going to sign that and I'm going to ship it to the back end. So then the back end receives it, it submits it on chain. And then right now we're basically waiting for this guy's transaction to go through. And it hasn't been picked up by ether scan yet, but it's over here, we know it's going through.
00:04:21.040 - 00:04:41.960, Speaker A: It's trying to submit the transaction that we signed here and eventually we should see this count go up and we'll see this guy's balance there. It just looks like it went through. So we should see the count go up to 60 and we should see the miners, the desktop miners. There we go. So his ether just went down. The count went up to 60. So there we go.
00:04:41.960 - 00:05:21.314, Speaker A: From an account without any ether, we were able to interact with a smart contract, and that's sort of the basis of all of this. And then there's kind of some neat things we can do along the way. So let's move on to sending ether. Let's say now from my phone, I want to send ether to a dude who just bought me a beer at the bar or whatever, and I don't want to actually carry ether on my phone because if I lose that or I somehow trash the keys, which I do all the time on my phone, I don't want to lose the ether on there. Right. The device should basically only act as a signer or just the public private key pair, and that's it. Right.
00:05:21.314 - 00:05:43.722, Speaker A: At any time, I can get in here and just remove this thing. So say I lose my phone or I lose that key pair, I can just get in. I can click that. I can click remove. He no longer has access. So to be able to send ether, I'm going to have to fund my contract. So back from my main account that actually holds ether, I'm going to grab this dude's address, which is sort of like my address.
00:05:43.722 - 00:06:16.450, Speaker A: It's like sort of my identity, right? This is considered my identity. Whenever I interact with any contract through this, it's going to look like this guy is the one that's interacting with the contract. Right. Because I'm using call, not delegate call or all that stuff. Okay. So I'm going to grab his address, and I'm going to fund my proxy with my account that has some eth, right? So let's just go ahead and send to this dude like 0.1 eth.
00:06:16.450 - 00:06:45.150, Speaker A: All right, go. Okay. Again, we'll have to wait for a block or two to get mined here before. What we should see is we should see the balance of my bouncer proxy go up, we should see the balance of my main account go down, and then we won't have to touch the main account anymore. Right. We can kind of, like lock. We could lock this dude up and be done with it and go out to the bar and not worry about private keys.
00:06:45.150 - 00:07:00.766, Speaker A: So there we go. It did just get funded, this guy. Okay, so now let's send 0.1 ether to. I don't even know, let's send it to my phone. That doesn't make sense, but let's do that anyways. So let's grab this dude's.
00:07:00.766 - 00:07:28.426, Speaker A: Well, let's just grab some random account. I don't even know. I'm going to send some ether to this random account. Okay, so from this guy who doesn't have any eth, I'm going to send one eth to this guy and that's going to come out of this balance that's in my bouncer proxy. Okay, so let's do a send again. It doesn't go on chain. It's just something that I sign.
00:07:28.426 - 00:08:01.670, Speaker A: I wish that looked better. I'll have to figure out how to make that message because you're signing the transaction. But it'd be cool if it was clear, like, hey, you're signing this transaction that's going to carry out this action and it's going to cost this much to this balancer proxy. But right now it just looks like a bunch of Jarbold stuff. Okay, so we should see this balance go down when the next block gets mined and we'll see the stuff fly through over here on the desktop miner when he's able to get that transaction through. There we go. So there, it just went through.
00:08:01.670 - 00:08:13.846, Speaker A: And so now over here on this balance, we should see this go down a little bit. And that means that it should go. Yeah, exactly. Down to zero zero nine because we sent exactly the right amount. Right. You're not paying gas from here. It's the miner who's paying your gas.
00:08:13.846 - 00:08:45.922, Speaker A: So this guy's gas went down a little bit. So let's talk about that. So unless you have Dap users that you want to pay for, which is probably like the easiest use case here, right. If you have Dap users that you want to just pay their transactions, all you got to do is get them in as bouncers and then they transact through your proxy contract and you pay for everything they do up to some limit. Right. I'd like to build in some kind of like allowance system or something, but this thing can be extended. Okay.
00:08:45.922 - 00:09:14.294, Speaker A: So instead of just sending ether, let's do the same thing. We just did one to whoever that dude is. But instead of doing that, let's say there's a distributed set of desktop miners, right? It's not just my minor in the background, but I need to actually incentivize some group of miners to send this out. So along with that, I'm going to reward. Oh, no, not token. Yes. Okay, uptoken.
00:09:14.294 - 00:09:41.154, Speaker A: Okay, so sorry, this front end is, this is obviously like this weird sandbox that I've been putting together just to play with it. So uptoken, I'm not actually going to reward them with a token, I'm going to put in a one there. So a zero there means it's basically free. Like I'm not going to pay you anything, you just relay the transaction. But if I put a one in there, it's saying I'm going to send you eth. So this is in eth, not in way. It'll convert it to way for you, just a little easier.
00:09:41.154 - 00:10:05.950, Speaker A: But once you go back tokens, it's actually in tokens. So I'm going to send one. And since we're already paying the miner to send this much, let's send a little bit more to make it worth it. Right? Like five, right? Okay, so zero, zero, five will go to this random dude. One will go to the desktop minor. I don't have to have any eth that's going through the proxy contract. Let's ship that out, let's get it signed, and let's get going.
00:10:05.950 - 00:10:35.014, Speaker A: Okay, so there it goes to the miner. And in this case it wouldn't actually be like a centralized minor, it'd be like a pool, right. You'd have to set up some kind of like peer to peer pool of transactions where lots of people could be submitting and saying, hey, I would like you to sign my transaction that goes to my balancer proxy or some kind of other entity's balancer proxy. There it goes through. We should see my balance go, whoops. We should see the balance go down. We should see this though.
00:10:35.014 - 00:10:52.714, Speaker A: 29956, the miners that actually gain a little bit of e. There it goes. Yes, there we go. So the miners back up to three. So the miner gained eth. My proxy contract went down the right amount and that dude got his eth. So everything went through.
00:10:52.714 - 00:11:29.146, Speaker A: We probably paid a little bit too much for that in hindsight, because you just want to incentivize the desktop miners, you don't want to be paying a ton for them to do what they need to be doing. But that's a whole different story. Okay, so what else can we do? So we can interact with any daP, we can interact with any smart contract. We can send ether and that also means we can send tokens. Right? So I have also deployed, along with my example contract, another like an ERC 20, a mintable ERC 20 called some token or something like that. And I think I can even just search, I love etherscan so much. Some token, there it is.
00:11:29.146 - 00:12:09.734, Speaker A: So there is some token. And what I'm going to do is mint some token directly to my proxy contract. But normally you could send any ERC 20 token to that contract, anything that uses the transfer. And then it's just an address and then an amount, it just calls that and if it gets a true back then it's good. So it's up to the offline miner to decide like you're paying me this much token that's at this address on this network. I need to make sure that's worth it to me to do that. Right? There's some economics at play here.
00:12:09.734 - 00:12:40.240, Speaker A: Okay, so I'm going to mint to my proxy contract like 1000 of these tokens. That looks good. Go. Okay, so right now I'm minting 1000 tokens to my proxy and he should be holding onto it. And we can use ether scan again because it's so rad. We can just go, we want to look at that. Okay, so let's grab this guy's address.
00:12:40.240 - 00:12:57.334, Speaker A: Put that in there, hit query. Okay, so there we go. It already went through. Way to go, rinkabee. You're a rad. So we have 1000 tokens in my proxy contract. So it's sitting out there for me to interact with however I want.
00:12:57.334 - 00:13:15.770, Speaker A: So let's do a few things at once here. Let's incentivize with the token. No, that's not the token's address. We need the token's address. That guy right there. Right. So we're going to say I'm going to pay you five of these tokens every time you send one of my transactions.
00:13:15.770 - 00:13:41.586, Speaker A: And let's just go ahead and add to that. There we go. So what we did is say I want to go run, going back to the example contract. I want you to go run the add five to the example contract. Right. Kind of just like an example of interfacing with a dap. And I'm going to reward you with five of my crappy tokens that I just minted and all the economics at play.
00:13:41.586 - 00:14:01.046, Speaker A: Let's say it's worth it to the miner to do that. And there it just went through. We should see the disc go through it. Now if I were to go to my miner, I should see that he now has some of these tokens. And I'm pretty sure this minor already is going to have some of these tokens because I've been playing with this for a while. But let's see what it's at now. Yeah, so he's up to nine.
00:14:01.046 - 00:14:24.340, Speaker A: So you'll just have to take my word that he was at four. Oh yeah. So let's actually go back and look at what? There. So now we're at 995, right? So five of those tokens went to pay the miner to send that. And by minor, I mean desktop minor, not proof of work minor. Okay, so what else can we do? Let's extend this out. Let's send 100 of these tokens to this address.
00:14:24.340 - 00:14:56.794, Speaker A: Oh, token that to this address. Okay, so now we're taking our crappy token that we minted, we're going to send 100 of them to an account. We're going to reward the desktop miner five for sending them, and we're going to do it all from an account that holds none of these tokens. And the miners incentivized to do that because of the tokens. Okay, send those. Awesome. So that basically is the demo of this thing.
00:14:56.794 - 00:15:30.902, Speaker A: Meta transactions I think are going to be pretty big, along with identity. And this is kind of touching on both of those things. My version of this was just something I hacked together. You can hit the learn more button right on metatx IO to see more of what's going on. It's on rinkabee right now because I want to kind of interface with the gitcoin contracts to see can we have developers contributing without having to get ETH and go up that barrier to entry. The standard for this, I'm not meeting the standard. Look for that.
00:15:30.902 - 00:16:16.790, Speaker A: There's going to be a metatransaction standard that it's going to be way better than what I've built. I'm just kind of demonstrating the technology. Also, I think there should almost be something that hijacks the web3. So right now you have to change your front end, you have to do some work that says, like, instead of sending the transaction to Ethereum, I want to craft it a little bit differently. I want to send it over here and then have it go, I think there's something to hijacking the web3. And when someone calls that send in their front end, right. I'd rather have DAP developers continue to develop exactly like they are and then kind of if a particular account comes in and they have a proxy contract, then it should detect that somehow.
00:16:16.790 - 00:17:24.326, Speaker A: When the DAP developer calls the send to send that transaction, it should detect it and say, nope, this is a meta transaction. Send it to some pool somewhere, depending on a bunch of other things that I don't understand yet. I'm totally wanting to dig into this and figure it out, but there should be something where we can take existing front ends and existing contracts and not change them at all and figure out how to kind of route around based on whether or not we want to send meta transactions or not. And I think you'll see in the comments all over, this was inspired by a whole bunch of different people that way smarter than me that I just try to kind of, when they use a buzzword I've never heard, I have to go learn it. But I think ens stuff is going to be really important. Like, instead of this big address here, I think you will log in using a name, and that name will be associated to a bouncer proxy through ens. So you just get in and say, hey, what's up? I'm Austin, or Austin MetatX Eth or something like that.
00:17:24.326 - 00:17:48.570, Speaker A: And it'll detect like, oh, this is already registered, that must be this, or oh, this isn't registered. You need to deploy a new contract and register it. And then there's your identity. You fund that thing with your cold storage and you're off to the races. There's probably a bunch of stuff I'm not remembering, but thanks a lot for checking it out. And hit me up with the stuff that I'm doing wrong. And yeah, hit me up on Twitter.
