00:00:00.410 - 00:00:31.046, Speaker A: You. Good morning. Happy BTF. My next challenge in the space is going to be this web three abstraction. It's, it's kind of this web three abstraction and then bottom up identity solution. So I'm going to help civil and consensus build this thing. You know me, usually I just ship stuff and ask questions later, but I think that it would be better to get some feedback on this and get some community and involvement to make sure we build it so the ecosystem can value, get value from it.
00:00:31.046 - 00:00:55.946, Speaker A: Of course it's going to be built first for civil, but I think it's something that could be used for everyone. So it's this single line, web three that any third party client can bring in. We're calling it Kirby. If you play smash brothers, you'll kind of get the reference. So you bring in a single line, you bring Kirby in in a single line and it gives you access to all of web three. And you can be just like a third party web 2.0 developer.
00:00:55.946 - 00:01:49.486, Speaker A: You don't have to have a ton of web three knowledge, you can bring it in and we're going to have kind of some abstracted away functions for you to call, like signing and attestation stuff. But we'll also have just like an 1193 web three provider for you also. So you can kind of take an existing Dap and kind of plug this into it also. But hopefully kind of third party websites will all get this coherent kind of same package along the way. So what is it? So Kirby is this one line, web three abstraction that gives you the ability to sign attestations, the ability to use web three to send transactions and all of that. It starts with instant onboarding. I think that's an important part right now that we don't have in web three is when someone brings this line in.
00:01:49.486 - 00:02:39.066, Speaker A: So instant onboarding for the developer too, right? Really simple. They bring in a single line, but then once that line is there on their website, when someone lands on their website, they automatically have a burner generated for them. So they're going to have an ephemeral key pair. So it's almost like a session key pair is created just for showing up, right? And then we can use that session key pair to start signing things. So the web 2.0 developer can have simple calls out to Kirby saying, this participant watched this video, this guy commented on this, this gal added a tip here, right? So you create this kind of narrative for a person and they're signing attestations without even really having to know about it or anything. Those are feeding back into Kirby.
00:02:39.066 - 00:03:11.670, Speaker A: He's inhaling them. There's like a good inhale right here. Yeah. Awesome, right? And he's storing them encrypted as the user's ephemeral account in some kind of decentralized storage or distributed storage. So then that means the user controls their attestations and they can provide those back if they want. And then there's kind of this aggregate identity that happens on top of that ephemeral account. And then, so the cool part is they get to upgrade that account when they're ready so they can go to metamask wallet connect portis.
00:03:11.670 - 00:03:58.710, Speaker A: We're going to bring in web three connect. So you have a burner wallet that's upgraded to web three connect inside of this iframe, and then it's going to post message through to just a simple 1193 web three with some other abstracted functions that we're going to create, and they're just going to kind of communicate over post message. And so we have a couple of different libraries. There's the parent react, the parent core, the post message layer, the child core, and the child react, and all of these things could be changed up. You can kind of fork the repo or change those within the repo. So if you wanted to even design what that iframe looked like, when you're the webtube developer and you just want to bring it in with one line and sign some things, that's easy. But if you want to get in and really change things around, you can too.
00:03:58.710 - 00:04:43.878, Speaker A: So let me just read the TLDR. Helping civil and consensus build a web three abstraction and bottom up identity solution for the Ethereum ecosystem that developers can incorporate in their websites with a single line. Have you heard it was a single line? I feel like I said that a lot. Like the burner wallet video, I say burner wallet like a thousand times. You will get instant onboarding web three provider optionality and super simple attestations. Yeah, I think the web three optionality is there too, right? So when the user has their ephemeral account or this session account that is used to sign a few things, they can then upgrade to any optional web three. So say they want to use portis or they want to use wallet connect, or they've already signed with fortmatic somewhere else, they can sign in there.
00:04:43.878 - 00:05:44.918, Speaker A: And then when they kind of upgrade to that better, more secure web three provider, there's going to be an attestation between the session or the ephemeral account and their colder account. And those are going to be signed and stored in each also. So you kind of have this cold identity and then all these session identities and then optionally linked identities, where then this aggregate can be controlled by you, but used in a lot of different ways on the other side. Right? So like advertising or identity or there's a ton of things that you can do with that aggregated data, but we want the user to be in control of it and we want it to be cryptographically backed. So it's like tamper proof, but also it's very powerful information that can be used on the other side. And we have to do a good job of making sure we store it in did formats and all the identity stuff that I'm just now learning about. So yeah, hit us up, get us some feedback.
00:05:44.918 - 00:06:42.960, Speaker A: The goal here, one thing that Vitalik says, I hope it's not like login with metamask, right? He wants it to be login with Ethereum. And so I think that was kind of a slow pitch. And so we're saying basically we want you to be able to just bring in Kirby with one line and say Kirby, sign, or sign in and have some kind of message. And so the person can immediately log in with some kind of Ethereum key pair and then have optionality to kind of upgrade that key pair to basically build up their identity as they wish and share it as they wish with third parties, but then also giving those third parties a nice consistent interface to access that information and just bottom up identity. Just to hit on that a little bit, we're seeing that a top down identity solution doesn't seem to make sense. It's like not one identity to rule them all. You sort of have these pieces or pockets of identity that show up, right? Like my peepith id.
00:06:42.960 - 00:07:31.818, Speaker A: There's a narrative behind that ethereum account, and it's connected to some friends, right? And all of that exists within the peepath ecosystem. So I have a peepath identity, but then maybe I have my Austin Griffith eth address too, right? And I don't know if those are linked or not, but maybe they should be. And maybe I don't want them to be. Maybe all of these little ecosystems I want to keep separate, maybe I want to link some up. Maybe I'm playing the DaO and I need to prove that I'm a human. And so I could link up my humanity dow along with some Kirby attestations that I commented on, some certain things that make me human or something along those lines. You get that the aggregate is the important part and how we aggregate that will probably be some secret sauce that we'll all have to figure out together.
00:07:31.818 - 00:08:12.694, Speaker A: But that's the trick here. And so yeah, the architecture is basically laid out here. Kind of the third party website, the iframe in we iframe something in talks through post message and then on the back end we have. All of our reads are going to inferior some infrastructure. All of our writes are going to use that ephemeral key pair and then the upgraded key pair and then everything is going to be stored in either three box or some kind of distributed store where the developer could pick some kind of store to send it to. We just want to have that optionality there and make this very kind of generic and useful for everyone. Security is obviously we've got iframes.
00:08:12.694 - 00:08:59.606, Speaker A: We got to make sure that the parent can't get in and steal that private key. We need to make sure that that private key that lives in local storage is protected. All of the stuff that we have to worry about there with private keys and local storage, they're very ephemeral. You need to be able to almost like sign one off if it gets loose. We'll have to figure that out. Just like an attestation that you used it up to here and now you're no longer in control of it and it's in the wild and you don't want your identity to be attached to that, something along those lines. So yeah, hopefully we will create a very easy way for web two developers to access web three, maybe even listen to events, maybe load contracts, do things that we do, but in a very nice abstracted way, but also in a consistent way with 1193.
00:08:59.606 - 00:09:36.722, Speaker A: And then on the other side, we provide optionality, we provide storage for this identity and we provide a lot of powerful things on our side that we can kind of iterate on and improve. So thanks to everyone, I called a ton of people in the space to learn more about how we're going to do this and what we actually needed. Thanks to Sybil and consensus for bringing me on for a couple months to work on this. And thank you to the Ethereum builders. Let's keep building. Happy BTF and hit me up. I'm at Austin Griffith if you're interested in the project, the repo those in the article somewhere.
00:09:36.722 - 00:09:40.450, Speaker A: I think I'll embed this. Thank you. Have a good Friday.
