00:00:02.490 - 00:00:24.094, Speaker A: What's up? I'm Austin. I'm here with Edda and Carlos. We're lining up the final challenges now, and they're a little bit more open ended. It's a little bit more choose your own adventure. We've got a Dex, a thing that does a decentralized exchange. Right? You can exchange tokens for ETH and ETH to tokens, you can lp those tokens. Really groundbreaking thing when it first came out.
00:00:24.094 - 00:01:05.058, Speaker A: But you, as the builder, you need to learn how to build it. Then a multi sig, a really cool way to store your funds in a safer way. Or it's almost like the groundwork for setting up a dao where you have multiple people that can kind of vote on transactions. And then finally the SVG NFT, where we're going to render an NFT in solidity. And it also gives us a chance to support you if you go deploy like a low limit SVG NFT. But I think the key thing to hit on here with these last challenges is that there isn't a perfect path. Kind of with the challenges you've done up until now, there's been a very clear path that you follow.
00:01:05.058 - 00:01:25.960, Speaker A: And these things are auto graded. In this case, this is much more open. There's different starter kits and different branches you could start with. So let's dive into it. Edda, do you want to show off maybe your work with the Dex first and we can kind of kick it off from there? What is a Dex? Maybe we should start there. What does this thing do?
00:01:26.810 - 00:01:36.620, Speaker B: Yeah, for sure. So let me share my screen and we can walk through showing a decks to show how it works. Just let me know when you can see.
00:01:38.430 - 00:01:42.080, Speaker A: Yes, we've got it. That looks like a scaffolding build.
00:01:43.330 - 00:02:15.922, Speaker B: It is a Dex build. And just to reiterate, so these are more basically like when you get to these challenges, you enter the telegram groups, so you can follow up with the telegram groups, you can get the instructions over there just to kind of. They're a bit different and more freestyle like, you have more chance to add your own elements, et cetera. But this is a deck and I have a few open over here as well, just to kind of show how it looks. But I am connected. Am I connected with my account coolnails surge.
00:02:15.986 - 00:02:34.090, Speaker A: I'm trying this out too. Cool. Snails. I'm in. I'm going to go swap some balloons. So in this example, you have like a balloon ERC 20, right? So there's this fake ERC 20 called balloons. And you're swapping to ETH between ETH and balloons on rinkabee.
00:02:34.590 - 00:02:35.098, Speaker C: Exactly.
00:02:35.184 - 00:02:56.962, Speaker B: And I connected my own wallet. It's by default connected to the wallet. So, like, if you try to do it with the burner wallet, it might not reflect your own metamask. But I have a lot of rinkibay eth right now. Rinky bay rich. So we can try to see how it works. A great thing is you can actually see, let's say I want to give 0.1
00:02:56.962 - 00:03:23.020, Speaker B: e, what happens to the chart. So you have some ETH inside this contract and you have some balloons. So the ratio is automatically determined. And when you take some ETH or give some ETH, it will auto adjust. And you can see over here, like the token reserve and the ETH reserve. So what happens when I give ETH to token and we can kind of try to see what this does and then discuss it?
00:03:23.630 - 00:03:34.580, Speaker A: That's totally going to wreck the liquidity, right? You want to do a much smaller trade, probably. Like if you do .1 it'll make more sense on the graph. Yeah, there we go. There we go.
00:03:35.430 - 00:03:38.580, Speaker B: That's correct. That's better.
00:03:41.980 - 00:04:04.770, Speaker A: So basically, there's reserves of each asset. There's a bunch of balloons and there's a bunch of ETH, and the price of those is based on just the ratio of those reserves. And so when you put in a bunch of balloons, you'll get out some ETH, but it's not going to be at the perfect ratio. It's going to leave a little bit behind, and there's a little bit of slippage, which is kind of interesting. And you will learn about all those things as you get in here and read about it.
00:04:06.260 - 00:04:16.756, Speaker B: And we can see in our event list as well. Some people worked with this before, but we should see over here, I think.
00:04:16.778 - 00:04:20.484, Speaker A: You have some balloons, right? It shows that you have 0.6 balloons now.
00:04:20.682 - 00:04:33.370, Speaker B: Yeah, we gave one ETH, and now it gave us like six balloons. And I believe it was maybe this trade. No, not this one. Where is my address?
00:04:33.980 - 00:04:34.392, Speaker A: Okay.
00:04:34.446 - 00:05:01.164, Speaker B: This one was my address. So you can see that we kind of traded and I got like six balloons, which is reflected over here. And. Yeah, so it basically allows you to swap different assets within each other and auto adjust the curve. And you can see your event list. You can go to debug contracts to see how it works as well. So you basically have the decks and they're supposed to be at the balloons.
00:05:01.164 - 00:05:24.410, Speaker B: This is, I believe, like an ERC 20 token. And it also follows the approved pattern right, if I'm not mistaken. I guess we have to. Like when we want to exchange with balloons, you first need to approve the sender and then you're able to exchange. I believe we discussed the approved pattern last time, but the same applies over here.
00:05:25.740 - 00:05:39.228, Speaker A: Try doing token to eth up there. And if you do up above. Yeah, right there. Yeah. If you do one, you don't have that much you'll have to do because you only have 0.6.
00:05:39.314 - 00:05:39.950, Speaker B: Sorry.
00:05:41.460 - 00:06:06.184, Speaker A: I bet you'll get an approve here. I bet this first one will be an approve. Yes, it is. And then the second transaction will be the swap. So it's going to give you probably two prompts here. First, it's going to prompt you to approve that one balloon to send in, and then once that clears, it'll give you a second transaction. Not the best UI in the world, right? You'd want a UI ux there.
00:06:06.184 - 00:06:38.256, Speaker A: See, it kind of just prompts you kind of randomly. You'd want to provide your user with a little bit more feedback. But this is kind of a developer experience here. Kind of teaching you about how those reserves work and how that pricing function works and how as the reserves get farther in one direction, like as you get more and more balloons, it's going to be harder to trade or less and less balloons. In this case, the liquidity is so low that it's kind of hard to show off. You really want to probably have a little bit higher liquidity. There we go.
00:06:38.256 - 00:06:58.792, Speaker A: We did trade, though. Let's do a deposit of liquidity. So let's deposit like, and it will also take your balloons. So. Yeah, right there. Yeah, I don't think you have that much. I think you want to go one because you'll have to put in balloons on the other side.
00:06:58.792 - 00:07:29.424, Speaker A: You'll have to put in both eth and balloons in this transaction. Let's see what happens. The goal would be that we lock up both balloons and eth, and then we start earning fees on that liquidity that we're providing. And this is, by the way, user at home. If you've heard the term like hyperstructure, it's kind of like this really cool term going around. But this dex here is a hyperstructure. It's basically this smart contract that runs forever and no one can stop it.
00:07:29.424 - 00:08:04.940, Speaker A: And it's not like there's a central entity providing the liquidity. Basically, the smart contract is written in a way where the rules are correct, where anyone can provide liquidity. And the more and more liquidity that's added in here. The more reserves we have, the better the swaps are going to be and the less slippage you'll have. If you tried to swap one right now, you're going to have some slippage there, but if you try to swap one, it's going to be very low slippage. Now we can see exactly. Very low slippage there.
00:08:04.940 - 00:08:34.420, Speaker A: But then as you delete some of those zeros, you see that you start getting a worse price for things as it goes up. Yeah, and there it just totally wrecks the curve. Right. Like you just can't trade that much. So it allows anyone to be a liquidity provider and it allows anyone to do the swaps. And the more liquidity you have, the better the price you get for the swaps, which is just like a really interesting, cool build for a smart contract.
00:08:38.200 - 00:09:02.592, Speaker B: And this is the Dex challenge. Yeah, I think. But because we have very low liquidity, we have another decks here as well. This is higher, more. Basically, this is decisive baby search. I didn't realize that until now. But you can also see that this has higher liquidity, so it's easier to see the changes.
00:09:02.592 - 00:09:11.504, Speaker B: For example, when you do one, you can directly see what happens when you do one. And the token reserve, or like 0.1, it doesn't change that much.
00:09:11.542 - 00:09:12.450, Speaker A: Hardly anything.
00:09:13.700 - 00:09:51.756, Speaker B: Yeah, but this is with higher liquidity, you can exactly see. And I think it's good to show before, when we're doing the approved pattern, we were showing it from the debug contract tab, so you would have to go and you would click that. So here it makes two transactions and your metamask automatically pops up. I think that's like a good thing to learn with this challenge as well. And yeah, this is like the Dex challenge. It's the one where you go to the telegram group, you get all the code, like all the repo, read me sorry, with the instructions, and then submit your challenge to the telegram group as well.
00:09:51.938 - 00:10:39.740, Speaker A: And that's a good hint. There is that once you get into that telegram cohort, there's basically just a cohort for everyone building their decks. You can ask other people questions, but you can scroll up and you can see a history of other questions being asked. And you can see everybody's decks, too. So you can go play with other dexes that other people have created to kind of help you figure out how it's all going to work. One really cool interesting thing here is as you provide those reserves and someone swaps from balloons to eth and back and forth, they're leaving a tiny little amount of each one behind, and that causes the value of the entire decks to go up a little bit. And so the people who are holding these LP tokens, as you put in reserves, you get back an LP token that represents your percent of the whole pool.
00:10:39.740 - 00:11:27.688, Speaker A: You're basically earning fees because a little bit is getting left behind and you own a certain percent of that. So this whole thing is programmed in a way where anyone can provide the reserves, anyone can do the swaps, and the whole thing just continues working without any centralized control, which is so fantastically cool. Great show off, Edda. I think that's the Dex. You at home go take on the Dex. You should have a link on speedrun Ethereum that should unlock as you get through the others, that takes you to the telegram group. And the telegram group has a pinned message with a medium article that talks about what a minimum viable Dex is, and then tons of different examples from other people and a big readme and kind of forkable examples.
00:11:27.688 - 00:12:12.104, Speaker A: But your goal is to really get in and build your own decks and understand it. Don't just like blackout and copy paste things, understand how this price function works. Understand that it's holding reserves at a 50 50 ratio. Maybe if you wanted to turn up the fee, how would you change the smart contract? Maybe if you wanted to store those reserves at a 25 75 ratio, how would you change the smart contract? Understand how the eth to token and token to eth functions work. Understand how the liquidity token works. There's a lot to it, so don't just black out and copy and paste. Really build this thing and understand it, because it's almost like the perfect example of one of the best builds I've ever seen on Ethereum, is like v one, v two of uniswap.
00:12:12.104 - 00:12:13.150, Speaker A: It's so cool.
00:12:14.400 - 00:12:44.980, Speaker B: One last thing, so as you mentioned, just a shout out to the people who built these dexes. We got them from the telegram group. Like cool snails and decisive baby. They're fun names and yeah, I would highly recommend to try it out. And again, just to touch upon, this is the way. And maybe, Alton, you can add more, but when we were swapping with uniswap as well, this is kind of what we were doing. So just to say we were kind of doing this when we were becoming a user and now building it ourselves.
00:12:46.520 - 00:13:18.988, Speaker A: And maybe like one little disclaimer is this Dex. This design can be like sandwich attacked, because we're not really doing any slippage protection. But you don't need to learn that now. Just don't go deploy this into production and assume that it'll work. There's some extra things you need to add there, like slippage protection that we didn't build in. Then one other extra little thing is like uniswap v three. The next version of this does some really cool things with capital allocation, where you can put your reserves in, but at a specific range, where your reserves are basically only at that range.
00:13:18.988 - 00:13:54.812, Speaker A: And a really interesting thing happens as the price moves across that range. You basically trade from one asset to the other by just having your lp tokens in there. If you're in the EtH die pool, as the price of eth goes up, you end up with all die on one side, or as the price of eth goes down, you end up with all eth on the other side. So the really cool mechanics. But this is the base of get. Get this understood first, and then you can go down the rabbit hole on how more advanced Dexes work. But yeah, this is the place to start.
00:13:54.812 - 00:14:30.330, Speaker A: Awesome, Edda, thank you for showing that off. I think next we're talking about the multi sig challenge, right? Any last thoughts on the Dex, or should we move on to the multi sig challenge? All right, so I think I was going to steal the screen. I think for a multi sig, we could just make a multi sig. Let me go grab the multi sig chat real quick, just so I have it here so I can look at what the pinned message is. Again, it's a telegram group. It's a cohort of people all building their own multi sig. You'll get into the telegram group, and you'll find a pinned message.
00:14:30.330 - 00:15:00.128, Speaker A: Looking at the pinned message, it'll take you to a meta multisig branch. So we have this branch that. Let me just go ahead and share my screen and show this off. We have this meta multisig branch here, and it's meta multisig because I think it's using signed messages. So it uses. Okay, let me back up even farther. Let's go to solidity by example, a place that hopefully you at home are very comfortable with at this point.
00:15:00.128 - 00:15:44.764, Speaker A: But if you go look at the multi sig wallet on solidity by example, it actually tracks transactions as a struct. And to make this work, basically what we want is to have one wallet that Eda, Austin, and Carlos each are signers on. And we'll call it, it's an m of N. So we'll call it a two of three. So at least Austin and Edda, or Austin and Carlos, or Carlos and Edda have to agree. At least two out of the three of us have to agree to make the transaction work. So what we're doing is we're creating a transaction, and then we're basically, like, voting on it, right? And if enough of us confirm the transaction, if you get two out of three confirmations, then someone else can get in here and execute the transaction.
00:15:44.764 - 00:16:17.288, Speaker A: So in this case, they're doing it all on chain. And this is very expensive, very powerful. Right. This is the safe way to hold your funds is in a multi sig, where it takes multiple signatures, but also, like, submitting the transaction, confirming the transaction, just to make a single transaction out of there. In this model, you end up making like, five or six transactions. Right. So a better way to do that is to use a signature based multi sig, where each of us just sign a message and a single transaction goes in at the end.
00:16:17.288 - 00:16:54.804, Speaker A: That proves that we've all signed or enough of us have signed this specific transaction to make it work. And this will even create, like, a factory for you where you can make multiple multi sigs. And by the way, gnosis safe, we should probably shout out before you even take on this challenge, you should go deploy your own gnosis safe. I have a few of them here, but you should deploy one. And you should learn how to set up owners and how the policy works. See, this is a two of five. So I need at least two of five signatures out of all these owners to be able to move the assets around.
00:16:54.804 - 00:17:06.330, Speaker A: And you should learn how to propose a transaction and all of that. But we're going to do that here real quick, just for you all. Anything about multi sigs that I didn't cover before I go kind of fire one of these off.
00:17:07.260 - 00:17:30.288, Speaker B: I think we also set up one up. Sorry, Carla. No, I think we set one up in the first week as well. Right? Like we set up to safe to show our transactions flow. And it's a lot easier than it looks. I think we also covered it in the first video, but over here, building is a bit more tricky. But it's a very good learning process.
00:17:30.454 - 00:17:32.880, Speaker A: How about Covan? You guys got Covan?
00:17:33.720 - 00:17:34.916, Speaker C: Let's see.
00:17:35.098 - 00:17:51.048, Speaker A: Okay, what testnet do you guys have? Of course we have rink. It's just slow. Let's go with it. It's fine. The cool part about recording this is like, we run into problems and we have slow transactions and folks at home can follow along, and it's not that.
00:17:51.054 - 00:17:53.604, Speaker C: Big of a. I mean, I have some Covan.
00:17:53.652 - 00:18:00.472, Speaker A: Yeah, I could send some more around, too. Covan is just a little bit faster. Drop an address in the chat if you need.
00:18:00.526 - 00:18:01.672, Speaker B: Oh, I have Covan, too.
00:18:01.726 - 00:18:10.076, Speaker A: Okay, we're good to go. Okay, let's set it up, then. Okay, so what are the addresses I want to set up? Will you guys paste your addresses in? Actually, it's probably just your enses, right?
00:18:10.178 - 00:18:10.780, Speaker C: Yeah.
00:18:10.930 - 00:18:16.640, Speaker B: Which is harder. Yeah, I'm sending it from telegram.
00:18:19.620 - 00:18:50.020, Speaker A: Okay, so I'm going to go create a multi sig. And what that does is it's going to know, who do you want to be the owners of this multi sig? So Edda gives me an address for her, and then Carlos gives me. Is it Carletex? I didn't get it. Quite white Carlotx. Is that it? E. There we go. And we put Carlos, and we're going to say it's going to take two of us, and I'm going to fund it with $1,000.
00:18:50.020 - 00:19:19.572, Speaker A: Right. Because I'm Covan rich. So we're going to deploy a new smart contract that's going to get a new address, and it's going to have us three as owners, and at least two of us need to agree to make that transaction work. And here we go. And this was built by the build guild. This was built in a really weird way where I built one, and then another builder extended a little bit, and then another builder extended a little bit. So this has gone through, like, a full cycle or two of build guild building.
00:19:19.572 - 00:19:30.392, Speaker A: But as you can see, this is scaffold. E. This is a tool that you're used to at this point, hopefully. So we're deploying a multi sig. There we go. And we've created it. All right.
00:19:30.392 - 00:19:50.092, Speaker A: D two cc. Right, let me see. Let me send this address to you guys. And you should be able to go to multisig Lowell. Let me just try it. If you go to multisig Lowell, and then you should go to Covan, and you should hit import and paste that in. And you should be able to import that in.
00:19:50.092 - 00:19:54.080, Speaker A: Right, there we go. And it'll show whether or not you guys are connected.
00:19:54.500 - 00:19:57.516, Speaker C: Actually, I didn't have to do that. I mean, I just connected my wallet.
00:19:57.628 - 00:20:13.456, Speaker A: It just found it. Okay. Yeah. I think the factory contract is doing some event driven stuff. I feel like that could be attacked. You could deploy, like, hundreds of multi sigs with someone's address, and then that would. For now, that works, but eventually that probably could be attacked.
00:20:13.456 - 00:20:28.172, Speaker A: But we're here, like, learning we're trying things out. So making attack. Same thing with the sandwich attack on the decks. Right. Some of these things aren't completely solid, but they, at a high level will cover the concepts. Okay, let's get a transaction together. Right.
00:20:28.172 - 00:20:55.440, Speaker A: So in this case, the most easy transaction would just be to send some funds. Right. How about we send Vitalik $100? Right. That was a really weird. It did a weird name result there. I don't know what that was. Okay, so if I were to propose it to send $100 to Vitalik from our multi sig, I can hit this and it's just going to give me a signature.
00:20:55.440 - 00:21:24.536, Speaker A: Okay, so there are a couple of different signature schemes. This is the worst of the two, because it just gives you a hash and you have to sign blindly this hash. A better signature scheme is sign type data, where it gives you like, you are signing this and these are the properties that you're signing. And it's a little more obvious what you're signing, but I'm going to blindly sign this hash. And what it does is it recovers it in the contract and you'll learn about EC recover and a lot of other things. But here we go. So now there should be a transaction in the pool.
00:21:24.536 - 00:21:34.576, Speaker A: Do either you two want to share your screen as you sign this transaction? I'll stop sharing. If anyone wants to take it over and sign that off, I can do it.
00:21:34.678 - 00:21:40.720, Speaker C: All right, so right now this signature is stored off chain, right?
00:21:40.870 - 00:21:41.872, Speaker A: Yes, exactly.
00:21:42.006 - 00:21:57.112, Speaker C: And then when we have the two signatures, both of them, we will have to execute the transaction. And the transaction will go with the two signatures. And the contract will check that the two signatures are correct. And then it will send the transaction, right?
00:21:57.246 - 00:21:58.810, Speaker A: Yes, exactly.
00:21:59.260 - 00:22:01.544, Speaker C: Okay, can you see the.
00:22:01.662 - 00:22:04.372, Speaker A: Yes, we can see it. I think you need to head over to the Pool.
00:22:04.516 - 00:22:05.608, Speaker C: Pool, yeah.
00:22:05.774 - 00:22:13.150, Speaker A: And hopefully there it is. All right, there's my transaction. And you should be able to sign it and it should give you an ugly hash to sign.
00:22:14.960 - 00:22:17.416, Speaker C: What is the name of the EIP?
00:22:17.528 - 00:22:20.028, Speaker A: Like 712, I think.
00:22:20.114 - 00:22:25.200, Speaker C: Yeah, I actually have like a build for that on the billgill. About to check that out. Yeah.
00:22:25.270 - 00:22:44.996, Speaker A: Yes. Someone should fork this and use 712 signatures instead of the hash signature scheme. It will require an upgrade to the smart contract also. Okay, there we go. Now we have our two of two. We're ready to send our $100 to Vitalik and any of us can execute it at this point. But if you want to go ahead and execute it.
00:22:45.018 - 00:23:06.910, Speaker C: Yeah, and we haven't spent any money. I mean, we spent money on deploying the contract. Right, but we haven't spent any money yet. And now the person who executes the transaction is going to spend some money and is going to send in the call data. The two signatures will be there, and the contracts will check that the signatures are correct.
00:23:07.840 - 00:23:41.690, Speaker A: And going back to the safety of a multi sig, talking about why this is safer, this fact that you have to get all these signatures together means that if my seed phrase was leaked, this money in this multi sig would still be safe, because only one of the three has been leaked. So this person has access as a signer, but can only get one of three signatures together. So these funds are a lot more safe than if they're just stored in an EOA. And there we go. We transferred $100 to Vitalik. I wonder if he'll send us a thousand back.
00:23:42.460 - 00:23:46.328, Speaker C: I'm sure that Covan Rich also.
00:23:46.414 - 00:23:49.610, Speaker A: Yes, he probably has some Covan for sure.
00:23:52.620 - 00:24:14.150, Speaker B: Sorry, just wanted to double click on the difference of signing and executing. So when you sign, it says two people need to approve in order to execute. There are different parts of the steps. First of all, you approve, and then you actually go to executing it just to kind of double click on that part.
00:24:16.120 - 00:24:50.640, Speaker A: Okay, now I'm wondering, do we have any apps that live on Covan? I'd love to do one last thing here where we punk wallet is just going to get an app together is like Covan. Is there like an ens on Covan? We need some app on Covan. What about uniswap? Is there a chance there's a uniswap on Covan? I doubt it. Oh, there is. Wonderful. Okay, here's what we're going to do. We're going to open up an incognito window, and we're going to go to uniswap.
00:24:50.640 - 00:25:09.712, Speaker A: Okay. And then let's see. Darn it. Wait, why did it let me? Maybe I have to show advanced or something like that. How did I do that? Over here. But let's try that again. Covan.
00:25:09.712 - 00:25:30.670, Speaker A: Uniswap. Oh, man, this looks shady, but I like it. No, it won't let us connect. No. Okay, what about this one? No. Okay, this one. Okay, this lets me go Covan for some reason.
00:25:30.670 - 00:25:52.756, Speaker A: Let me try disconnecting. Okay. And then let me wallet connect in. Oh, my gosh. They don't do the thing where they destroy the wallet connect session correctly. So I can't get to Covan. Okay, there has to be some kind of.
00:25:52.756 - 00:26:14.072, Speaker A: Okay, let's try it and see what happens? So we need to connect in. Here's what we're going to do. We're going to propose transaction. We're not going to send eth. We could do all sorts of custom stuff here. Like we could add a new person to the signer, we could remove a signer, we could adjust the threshold controlling the kind of meta things about the wallet itself. But what we want to do is do a wallet connect.
00:26:14.072 - 00:26:38.720, Speaker A: And this is going to allow us to connect into any app as the multi sig. Our multi sig is this d two c character, right? So we want to log in as d two c into uniswap. Let's try that. Let's do a wallet connect. And normally you would scan these with a wallet, but you can also copy paste them. And there we go. Now we're logged in as d two c to.
00:26:38.720 - 00:26:51.588, Speaker A: Oh, it just detected that we're on Covan. I was trying to over engineer this. We should have just went with it. So it's detecting that we're on Covan. It doesn't see that we have Covan eth, though. There it is. There we go.
00:26:51.588 - 00:27:20.872, Speaker A: It took a reload. Took a reload. It shows that our wallet has this, like, zero point 65 covan eth. And now let's say we want to swap to some uni on Covan, right? We want to put in zero three of our eth, and we want to swap to 00:59 Covan uni. Now, watch this. If we're on this page, we're logged in over here. When I hit swap, it should propose the transaction to the multisig.
00:27:20.872 - 00:27:49.400, Speaker A: Isn't that really cool? So now if I hit propose and I sign off on that, it's a little bit overwhelming. Someone at home could fork this and make this look nicer. Right? But now look at this. There's a brand new transaction for you guys to vote on, and it's a multi call that basically does the swap on uniswap. So instead of just sending eth, you can do much more extravagant transactions by wallet connecting into apps and signing off. Any of you guys want to sign that one and I'll go ahead?
00:27:49.470 - 00:27:50.392, Speaker C: I already did.
00:27:50.526 - 00:28:01.944, Speaker A: I signed it. Yes. I've got the two of two. All right, I'm going to execute it. Let's see what happens here. There we go. So we deployed our own multi sig.
00:28:01.944 - 00:28:34.230, Speaker A: We set it up as a two of three. So if any of our single addresses gets leaked or our single seed phrases gets leaked, this money is still protected. This allows us to make kind of slower transactions where we have to have more confirmations from people. You can imagine like a five of twelve multi sig or something random like that. But there we go. We did swap and if we wanted to, we could check this guy's balance of uni on Covan and they now probably have that. Let's see if we swap this around and say uni.
00:28:34.230 - 00:29:06.770, Speaker A: Yeah, we have zero point 52 of it now. Really cool stuff in terms of composability there being able to deploy our own multi sig and go swap on Covan using wallet connect. It almost feels like a secret move when you wallet connect in as a multi Sig into another app and you're that app. That's really cool. Okay, I think that's multi sigs. Let's see, this is the thing that you'll run into in the telegram group when you get in there. Kind of just lots of check marks on what you should learn.
00:29:06.770 - 00:29:32.020, Speaker A: Bonus testing lull. But yeah, basically go build again. This is kind of a choose your own adventure. There may be multiple multi Sig branches. Understand it, get into the guts of it and understand the smart contract. There's this specific part of the smart contract that I want to show off here. So if I go packages hard hat, everything's going to be where it is with all the other scaffold etH branches.
00:29:32.020 - 00:30:04.564, Speaker A: The multisig wallet. Okay, so this is a signature based multi sig wallet that it started from christian lung fist. But if you get in here and you find where the execution is, I'll make this a little bigger. Sorry. There's this really cool function and it's going to be up to you as a person at home to figure out why it works like this. I'm not going to give it all away. Where is the execute right here.
00:30:04.564 - 00:30:50.480, Speaker A: Execute transaction? Okay, so this right here, this right here, we're checking valid signatures and we're doing this duplicate guard where we're making sure that each address is larger than the address before. And you'll have to figure out why that works and why it works well. But that's what we use to, we basically do this EC recover right here where we recover those hashes and those signatures and we make sure we have enough signatures. But you need to get into the guts of this and understand this as a solidity developer, but also understand the UI and the UX and everything else. But it's such a good challenge. Anybody else? Any last closing thoughts on multisigs and the multi sig challenge?
00:30:51.780 - 00:31:11.416, Speaker B: Maybe just a reminder that also, for example, multisigs are used a lot in daos when you vote on proposals, and they want to pass it to make the action go forward. So you run into a lot of signers. Like when there's twelve people, for example, and five people need to sign in order for it to move forward.
00:31:11.598 - 00:31:44.912, Speaker A: Like Dow treasuries, accounts that have millions and millions and millions of dollars in them that are held on behalf of an even larger entity. And you have to get signatures together, and it's just like a safer, slower scheme, so not one person can just come in and rug the whole thing. Awesome. Okay. And then the third challenge of all of these random, cool challenges is an SVG NFT. And this one's more for fun. This one's more like, okay, you can build these things.
00:31:44.912 - 00:32:08.268, Speaker A: You can build decentralized apps. Now it's time for you to flex a little bit. And it also gives us a chance to support you. If you go make a low limit in, I will yolo in and I will buy the first few. So maybe, Carlos, you can take us away about, like, what the heck is an SVG NFT? And how is it different than a normal NFT? And how do I make one? Where do I get started?
00:32:08.434 - 00:32:17.870, Speaker C: Yeah. So first, I guess we should go. What is like SBG? Like in general? Right? Like, SBG is like this. Let me share my screen.
00:32:18.880 - 00:32:22.610, Speaker A: Something vector graphic, maybe. I can't exactly remember.
00:32:23.140 - 00:32:24.130, Speaker C: I don't know.
00:32:24.740 - 00:32:25.792, Speaker B: Scalable, I think.
00:32:25.846 - 00:32:28.864, Speaker A: Scalable. Scalable vector graphic. That's got to be it. Yeah.
00:32:28.982 - 00:32:32.710, Speaker C: And I'm going to show you, like, the most beautiful SBG in the world.
00:32:33.240 - 00:32:35.060, Speaker A: Look at that thick Lugie.
00:32:35.800 - 00:33:00.860, Speaker C: So the thing about sbgs is like, they are like vectorial. Victorial I don't know how to pronounce that. But you can zoom in, whatever. Doesn't matter how you zoom in, it's going to be always good render. Like, good resolution, because it's a scalar. It's like vectors and everything. And for example, if you do that with a JPeg or whatever, it's going to get like little things.
00:33:01.010 - 00:33:08.030, Speaker A: The opposite is rastered, I think, where as you zoom in. Yeah, rastered verse. Vector art, I think. I'm not an artist. Yeah.
00:33:08.800 - 00:34:00.380, Speaker C: So the good thing about SVG is that this is like the file, and you can open the file with your editor and you will get the curve of the SVG. So you have, you can see, let's put it here. And you can just manually, for example, I'm guessing this will be like the green like the main green circle here, ellipse. So let's change like, I don't know, let's save it. And you see that the SBE changes, right? So this is nice because you can program an image, right. And in mind that you can make this dynamic in mind that this is like a variable, right? Like you implement this in your programming language and whatever, and this is going to be like a variable color. So this is actually how the SBG NFT works.
00:34:00.380 - 00:34:52.000, Speaker C: And the SBG luggage NFT works usually when you think about NFT. Let me, I have here maybe our early supporters remember this, like the Sanford stout NFT, right? Like we did in the first or the second week, I think. So usually for NFT, you have the smart contract, which usually inherits from ERC 721. And you have all the information about the NFT there, but not all the information, but who owns what and maybe the name on the symbol and everything. But what you don't have in the contract is the actual art. The art usually is stored somewhere else. Usually if it's a good NFT, it's going to be stored on ipfs or r wave or something like that.
00:34:52.000 - 00:35:30.060, Speaker C: And if it's like bad, it's going to be stored in some centralized server or something like that. So for example, here in the Sanford Stout NFT, there is this function which is like the key for all of this, called the token Uri. So you can specify the Token Uri, for example, like number one. So you query this, you query the smart contract and you get the Uri here, which in this case is extraordinary. So let's paste this here. I think brave have the ipfs resolution, I think. And if not, you can do like the ipfs.
00:35:30.060 - 00:36:32.240, Speaker C: Yeah, this one. So this is what you get when you call the token Uri for token number one in the San Fran, which is like the, I guess we can call this like the manifest or the metadata of the NFT. And there are more props or more properties that you can add here. But this is like the main one. Usually you have a name, you have image and the description. So now you can go to the IPFS image and you will see the actual art, right? So the thing that we want to do with fbgs nfts and the difference is that instead of having to go to ipfs to get all this data, like first the manifest and second the image, we are going to render all of this directly from the smart contract. So the smart contract, when you call the token Uri, is going to return directly.
00:36:32.240 - 00:37:02.052, Speaker C: This metadata. And here in the image, it's going to have the actual SBG code. Right? So I think that's it. The main of it. But it's a bit complicated to do in solidity because I think we already talked about that. But solidity, it doesn't have this high level function like JSOn encode or base 64. You have to do more low level calls.
00:37:02.052 - 00:37:22.770, Speaker C: So I think that's the tricky part. For example, for a simple string concatenation, it's not as easy in some other languages. Right. So I think that is going to be like the trickiest part when you work in this challenge. But yeah, I think that's it. I'm not sure Austin or I have. You want to show some code or some maybe like.
00:37:26.260 - 00:38:21.692, Speaker A: For like we can lean into. So first of all, it's just like a cool flex, right? Having a smart contract draw the SVG for you and render the manifest text like the JSON is just like really cool in terms of smart contract development and fun things you can do with it. But having this stuff on chain, the fact that the color of the Lugie lives in the smart contract and it's a readable thing, you could build another contract that does like breeding and it takes two loogies and you have to mix those two lugies together. And on chain, in the smart contract, it actually mixes the colors and you get like a Lugie baby. That is like a new NFT that is the mixture of those two. And with some other rules written into it, it leans into composability in a really big way. I think loot is a good example from Dom, the NFT.
00:38:21.692 - 00:38:41.912, Speaker A: Let me see if I can get. Yeah, and then there was synthetic loot. I'm just looking for a good. I guess I could go to like Opensea and look up some loot. But just to show. Let me share my screen in just a second, just to show what these look like. They're not beautiful in some ways and they're very beautiful in other ways.
00:38:41.912 - 00:39:00.904, Speaker A: But this is it. This is the NFT. And if you look at this when it loads, it's basically white text on a black background. Right. But this is being rendered by the smart contract. There's no metadata living anywhere else. It's all in the smart contract.
00:39:00.904 - 00:39:33.720, Speaker A: And what he's doing here is he's kind of like leaning into the fact that this is super composable. Someone else could make a game or many other games could come from this and you could use. Do you have a piece of loot? That has maybe divine slippers. And if you do, you're allowed to come into this special game area and use the divine slippers to do something else. Or maybe this is rendered differently. And you could tell this is the floor price of these things too. So this idea has really taken off.
00:39:33.720 - 00:39:59.280, Speaker A: I think there was one called Ava stars. I think they're maybe the first ones. Let's see if I can find it that did SVG nfts. Yes, I think these are, as far as I know, this is one of the very first SVG nfts. And also shout out to Simon DLR, who did one that really brought me in. Yeah, he even talks about them. But you can go and you can find this article.
00:39:59.280 - 00:40:16.584, Speaker A: He did these things called neolastics, by the way, built with scaffold eth. Neolastics.com. Look at that. Yeah. Does that look familiar? This was built with scaffold, which is so cool. But there's tons of cool SVG nfts out there. Let's look at the code real quick.
00:40:16.584 - 00:41:13.492, Speaker A: That's what we were talking about, right? Oh, those were the, here's another classic example of these 40s are rendered in the smart contract and you can actually make a transaction to take a sip out of them, and the liquid goes down as you take a sip. And it even gives you this buz token. And we made this into like a retroactive public goods funding, where the more money you yolo into the contract as people buy them, the more the value is. After you drink the 40, you can turn in the glass. Like you can recycle the glass and get paid back your cut of the contract. So this shows that collectors of these 40s can get rewarded by people yoloing money into the contract. So for public goods funding, there could be some public goods funding that goes to the contract of the NFT.
00:41:13.492 - 00:41:36.450, Speaker A: And then people can turn in their nfts later to get their cut of that. So it helps, like you can incentivize certain behaviors basically using this. Maybe it's public goods that they're supporting and then they're getting more funding that goes down a deep rabbit hole. Let's go look at the lugies. Smart Contract real quick. Here we go. Okay, let me see if I can make this a little bit.
00:41:36.450 - 00:42:24.640, Speaker A: You know, we bring in a lot of the usual things to make an NFT. It's a usual your collectible. Do I need to make that even bigger? When we mint the item? Here's where we get some randomness, right? This is not the best use of randomness. But this is a way you can get randomness. What we're doing is we're taking the previous block hash, and we're hashing that, we abi encode it, and then we hash it in a catch hack 256 hash function, which gives us this kind of like, nice little bit of entropy. And then we're selecting those a byte at a time and even doing some interesting shifting here. But here's how you get a random color, right? So we get a random hash, and then to get this color, we use this or operator, by shifting the random bytes.
00:42:24.640 - 00:42:52.340, Speaker A: I messed up here. This does have the Eid in here, but the one that I deployed didn't have an id in here. And what that means is you could generate the same predictable randomness in the same block multiple times. So this allowed for twins and triplets. Basically, if you minted three luggies in the same block, you got triplets, which we added that id in there later to make that work better. So here's randomness.
00:42:52.420 - 00:43:15.376, Speaker C: Go ahead about the randomness. We talked about this the other day with the dice game, but I could deploy like an Lugie attacker contract for this, and I could pre compute this randomness. And if I don't like the color, then I don't meant the Louie, right? That could be, I mean, in this case, it's not very important, but yeah, you can pre compute this randomness with.
00:43:15.398 - 00:43:37.172, Speaker A: Another contract in the same way you attacked the dice. You could set up one that watches for a specific chubbiness. Like, say you wanted a really chubby loogie. You could basically build an attacker contract that does this math outside. And if this chubbiness is a big number, then it goes ahead and pays to mint it. But if it's not a big number, it doesn't mint it. Right.
00:43:37.172 - 00:44:14.916, Speaker A: The reason why I got away with this is I only allowed minting for 24 hours, and I did it quickly, and people just minted really quick, and then it was done. If this thing is available for the rest of time, people are obviously going to attack it if it's interesting. Okay, moving on to the token Uri, that function that returns the manifest. Right. How the heck are we going to get a JSOn manifest and get it created inside of solidity? Well, it uses that really cool Abi encoded function. Right? And you can see here what's going on. We're actually writing the JSON and we're grabbing items from the smart contract and putting them in.
00:44:14.916 - 00:44:40.680, Speaker A: Oh, here's another Easter egg in the luggies is the external URL does not go to lugies. It goes to Bernie boys. Another cool svg. Nft. But this is how you get that manifest together. And here is the image data. This is the key that you were talking about, carlos, where it's saying, okay, if you want the image, it's not at some URL, it's not even an ipfs.
00:44:40.680 - 00:45:10.656, Speaker A: We're literally giving you the raw image base 64 encoded right here as the image. And where do we get that? We get that from this generate token by id. So here is where you do your drawing. And this is going to look just like that svg that you showed off just now, right? It's got an SVG wrapper, and then render token by id. And we can talk about that in a second. But here we go. This is exactly that same file that you just had there, right? We created group for the eye.
00:45:10.656 - 00:45:28.376, Speaker A: It's an ellipse. And then there's another ellipse for like the. There's an ellipse for the inside and ellipse for the outside. But this is an eyeball. This is a head, and this is the other eyeball. Right. And the chubbiness is setting the could just like Carlos adjusted the color.
00:45:28.376 - 00:46:02.656, Speaker A: You can also adjust how chubby that Lugie is. Go ahead, Carlos. Was there something you were adding to? Oh, I felt like you were on the edge. Last little weird, funny, cool thing here, we learned that we didn't want to have just the render function. We actually wanted to have a render function that's public, that doesn't have the SVG wrapper on it. And the reason is that if you have just the internal pieces of this, you can actually create a group of these things. And we made Lugie tanks where there's a tank that it itself is an SVG NFT tank.
00:46:02.656 - 00:46:45.344, Speaker A: Like a fish tank, right? It's this big square, and you can send these luggies into it. And then when the render function of the tank is called, it actually is going to go through and call the render by token of all the different loogies it owns. So it's actually rendering a great big Svg of all the loogies it owns. And if that Lugie gets chubbier or change color, you see it live on opensea or on your marketplace in the actual SVG NFT. And I can send you that NFT, and it's a group of all of them together. So really fun, neat, composable stuff you can do with these SVG NFTs. Also but this Lugie branch is a great place to start.
00:46:45.344 - 00:47:17.244, Speaker A: It's just like the most simple sVG nft I could come up with. And it's really easy for you to fork that. And we've seen a lot of people fork these, and this really bad ux is part of it where it shows all of them. And then you hit this little switch to see yours. I've seen so many different weird scaffold eth builds that has this in here that I think Adam added it in. It was like the night of, and we're trying to get it deployed and get it working. But it's so fun to see all the weird forks of scaffold eth when we add something bad in there.
00:47:17.244 - 00:47:26.176, Speaker A: We also see that bad thing propagate through a bunch of forks. Oh, here we go. I'm going to go ahead and take a sip. Look at this. I've got an OE 40. OE 40. Number 367.
00:47:26.176 - 00:47:43.872, Speaker A: Watch the liquid. It's like right here, right now, right? It'll be hard to see because it's kind of behind the label. Maybe I'll wrap it up to keep it cool first, let's wrap it up. No, I want to see the liquid go down first. Let's take a sip. All right. And now we should see the liquid go down a little bit.
00:47:43.872 - 00:48:11.632, Speaker A: When that goes through, it might take too much time to load too. Maybe I can pour one out to Vitalik. There we go. Let's see what happens. Gas estimation failure due to network error. Pour one out to Vitalik and then we'll wrap it up. So there's a lot of events that it has to parse, and I think it may be behind.
00:48:11.632 - 00:48:45.096, Speaker A: Darn it, bad demo. The demo gods are not with me. I'm just confirming transactions now. And wrap. Is it ever going to wrap it? I could pass it to darn it. Okay, something's going on with the RPC or something like that. But the key is that you could make a transaction on it and you could have the liquid go down and you could see it live in the marketplace or in the SVG itself, because the smart contract itself is rendering it.
00:48:45.096 - 00:49:13.504, Speaker A: And that's like this super powerful, super composable, super fun. It's also like a flex that, where you're putting all that heavy stuff on, there's. There's probably like two sides to that argument too, with state bloat and stuff like that. But that's the SVG NFT. Go build one and show it off and throw it in my dms so I can go buy one. Any closing thoughts on the SVG NFT build? Awesome.
00:49:13.622 - 00:49:16.980, Speaker B: I think this concludes like, speedrun Ethereum challenges, right?
00:49:17.050 - 00:49:17.700, Speaker A: I think it does.
00:49:17.770 - 00:49:18.512, Speaker B: Last challenge.
00:49:18.576 - 00:49:52.012, Speaker A: Yes. And there's a lot more next steps. Like you as the builder, you want to get in the habit of just shipping small things and trying things. I have a whole thread of next steps after this thing. Other challenges you can take on things that you should learn. I remember some of them are like building an indexer, looking up like ZK stuff, doing, forcing yourself through each of the attacks and learning how each attack works on chain and reproducing them. And then just like a whole slew of different other things you can build on top of it.
00:49:52.012 - 00:50:05.796, Speaker A: So you're not done yet. You basically have a license to learn at this point. I know that it's so complicated and you've gone through so much stuff already, but trust me, you're on the right path and you can go kind of just like get in the habit of building things now.
00:50:05.978 - 00:50:10.150, Speaker C: And also, you are now a part of the build guild, right?
00:50:12.920 - 00:50:17.620, Speaker B: Yeah. Starting this episode from the first minute.
00:50:19.480 - 00:50:28.060, Speaker A: Awesome hearts, guys. Thank you for being here. Thank you for building. Keep building. Keep going. There's more to go. Thank you for speed running ethereum.
00:50:28.060 - 00:50:29.080, Speaker A: Bye.
