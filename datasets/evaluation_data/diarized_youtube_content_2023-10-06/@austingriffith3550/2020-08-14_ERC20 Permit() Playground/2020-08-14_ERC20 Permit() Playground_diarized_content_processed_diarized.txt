00:00:00.810 - 00:00:12.430, Speaker A: Yes, we're recording. Okay. What's up, bow tie Friday? Happy bow tie Friday. I'm here with David Myhal. We're going to talk about a permit playground. You're flopping and popping.
00:00:13.090 - 00:00:22.000, Speaker B: I got the bow tie t shirt look, which is. I don't have classic. I don't have the awesome fashion sense that you do.
00:00:23.330 - 00:00:29.542, Speaker A: Like I said off camera, my wife went shopping for me, so I got lots of fancy shirts and ties. Now I'm set.
00:00:29.596 - 00:00:30.200, Speaker B: Nice.
00:00:30.570 - 00:00:45.462, Speaker A: Okay, so permit. We're talking about permit on Dai. So let's see the current Dai contract. That is. So dai is a stable coin on Ethereum. I don't know if we have to start that far. Made by maker on your shirt.
00:00:45.462 - 00:01:01.834, Speaker A: Right. There we go. Okay, let me just share my screen and we'll look at the Dai contract real quick. So here is the Dai contract deployed. We're looking at it on ether scan. Gooey Dewey. Okay, so let's scroll down to the code because this is deployed.
00:01:01.882 - 00:01:07.618, Speaker B: I'm distracted by the price. We're here for the tech. We're just here for the tech.
00:01:07.784 - 00:01:13.730, Speaker A: We're here for the tech. Okay, how much money is in die right now? Maybe that is a good.
00:01:13.800 - 00:01:21.222, Speaker B: Can we go to distats? Diastats.com? That's Mariano's website.
00:01:21.356 - 00:01:23.782, Speaker A: Oh, nice. There we go.
00:01:23.836 - 00:01:37.338, Speaker B: Oh, wow. They changed this UI. Okay, so there is a lot. Wait, 400 million die, but that's not how much money is in Dai. So there's over a billion dollars of collateral in Dai. Okay, right.
00:01:37.504 - 00:01:52.414, Speaker A: So you put in ETH and you over collateralize it, and you get like 60% of that ETH back in Dai, your ETH stays locked up, your die stays stable. And as long as the price of ETH doesn't go so far down, you don't get liquidated. Right?
00:01:52.452 - 00:02:00.114, Speaker B: Yeah. And the nice thing when the price goes up, like it's been doing this week is for me, I'm like, oh, I can go, I can just make more dai now.
00:02:00.232 - 00:02:00.900, Speaker A: Right?
00:02:02.150 - 00:02:57.240, Speaker B: That's true, but I guess, yeah. The problem that we're trying to address with this is if you've used these Ethereum dapps, you'll know to use any dap that uses tokens, you have to do this approve function. So if you're going into uniswap and say you want to sell some dai for ETH, when you go like I want to sell Dai, it's like, all right, you have to unlock your Dai, you have to approve your Dai, and so you got to do this approved transaction, you got to wait for that to pass. And these days with gas prices being so high, that means you're paying like, I think I paid like $5 to unlock my Dai or to unlock some new token. So if you have just a couple of dollars worth of die, you're going to spend more money just unlocking it than actually swapping it. Thankfully, the new version of Dai, they added this permit function, this new way to approve without sending a transaction with just like signing a little message.
00:02:57.930 - 00:03:22.090, Speaker A: Exactly like the user experience here is key. You can get just a simple signature from your user and you can do everything in the background moving their die around for them. There's just some trust there, right? They have to permit some address to move their Dai. And obviously that's probably not going to be user like an end user account. That's what EOA. What's EOA?
00:03:22.170 - 00:03:24.880, Speaker B: Eoa ethereum eth only address.
00:03:25.330 - 00:03:28.206, Speaker A: Yeah. External, externally owned address.
00:03:28.388 - 00:03:31.886, Speaker B: Maybe it could be either externally owned. I think you might be right.
00:03:32.068 - 00:04:10.714, Speaker A: EOA is just like, I have a key pair and I can sign things and those things can go on chain. But also smart contracts have an address, right? So you can basically approve some second smart contract. And as long as it's well audited, that's going to move your Dai. And it's just like, so basically you trust the Dai contract, but now we're talking about trusting a second contract. So as long as that second contract is solid, you can kind of trust that sidecar. So they just sign something that trusts that sidecar and then that sidecar can be moving around their Dai for them without them having to make a transaction, them having to worry about block times and all the other junk. Right.
00:04:10.714 - 00:04:17.374, Speaker A: The account can simply own Dai and sign messages. They don't need eth for gas or anything like that.
00:04:17.492 - 00:04:17.918, Speaker B: Right.
00:04:18.004 - 00:04:29.122, Speaker A: I think we've covered the why. Definitely covered the why. Right. That's like great ux for a user. When they walk in, they're like, oh, I'm going to invest $100,000, sign a message and walk away. Right? That'd be pretty rad.
00:04:29.176 - 00:04:36.274, Speaker B: Yeah. The sad thing is, I haven't seen very many apps using this. Well, you know, who is using it is Uniswap is using it.
00:04:36.312 - 00:04:36.514, Speaker A: Okay.
00:04:36.552 - 00:04:45.314, Speaker B: The uniswap LP tokens. So if you put money in a uniswap pool and then you want to take that money out of the pool, it'll do this to let you take money out of the pool.
00:04:45.442 - 00:04:48.066, Speaker A: Okay, so it's not the DAi contract they put it.
00:04:48.108 - 00:04:58.778, Speaker B: No, because they don't control the token contracts. But the uniswap Ui and the Uniswap tokens. The Uniswap tokens represent the pools. Those.
00:04:58.864 - 00:05:03.774, Speaker A: That's something we should talk about, too, is there's actually kind of two different permit standards that are happening right now.
00:05:03.812 - 00:05:04.654, Speaker B: Right, right. Yeah.
00:05:04.692 - 00:05:04.894, Speaker A: So.
00:05:04.932 - 00:05:20.050, Speaker B: So maker was, like, kind of the creator of this idea. So when they came out with the new multilateral dye, they're like, hey, we created this permit function. It's really cool. It lets you do these cool things. And people liked it. And I think I'm blanking on his name. The guy who actually created it, he went on.
00:05:20.050 - 00:05:29.982, Speaker B: Martin. Yeah, went on to create an EIP, like, basically trying to standardize, saying, like, hey, everybody should do like, if you want to use permit, this is how you do it. I think it's.
00:05:30.046 - 00:06:13.474, Speaker A: But it was missing one little weird thing. And the way he built it, and he showed it to me, and I don't know why I didn't say this at the time, but you basically allow all. I may have even said that at the time, and I think his answer was, there will be these sidecar contracts, but basically, when I permit something, I want to permit $200 and no more. Right. But the current state of the art is like, we'll permit infinity of your Dai. And that's just how you go to any defi platform or any decentralized app, and it's always, you're going to do two transactions. The first transaction is going to be giving them access to all your Dai, and then the second transaction is going to be moving some small fraction of that dye around.
00:06:13.474 - 00:06:14.260, Speaker A: Right.
00:06:14.710 - 00:06:40.278, Speaker B: Unless you don't. Yeah, but just to wrap up that side is that there are two different versions of the standard. Basically, there's the DAi version, and then there's, like, the everybody else version. But since Dai is, like, the most popular token on Ethereum, there's a good chance you might be using that. It's good to be aware of both of these. And as we'll see in a little bit, the library I made has two different functions to support two different types of permit.
00:06:40.454 - 00:07:01.058, Speaker A: And the goal here is we would like to give you the scaffolding to be able to build a decentralized application, to be able to talk to these permit functions very easily. And I was like, oh, I'll do a demo build. And then you came out with EtH permit, which is an NPM package that's going to make this even easier. And so we'll pull that into scaffold Eth today and see how it works.
00:07:01.224 - 00:07:02.926, Speaker B: Awesome. I'm excited.
00:07:03.118 - 00:07:34.810, Speaker A: Yeah. All right, let me share my screen. Okay, cool. So here's the die contract. Whatever. Millions of dollars are locked up to mint these dies, right? But basically, here's this permit function, and we don't want to steal all of their code with their wads and their valves and their desks, but we will steal this permit contract, and we'll bring it into a test die contract that David, you built before this call and just kind of sent over to. Yes, go ahead.
00:07:34.880 - 00:07:38.862, Speaker B: I guess it's already there. So I know you can paste it over that. But the code.
00:07:38.916 - 00:07:40.830, Speaker A: No, it's here. It's here. I pasted it in.
00:07:40.900 - 00:08:14.040, Speaker B: So what this contract is, it's basically, I took the open Zeppelin ERC 20. I assume most devs know open Zeppelin, but open Zeppelin, they're just like a bunch of templates and libraries for building contracts. So the open Zeppelin ERC 20 gives you everything you need for, like, a simple ERC 20 token. We take that, and we add this permit, which is literally, like, copy and pasted from the die contract. So now we have an ERC 20 with permit. And then the only other thing is it mints 100 tokens to the creator. This is not, like, right here.
00:08:15.770 - 00:08:47.886, Speaker A: Okay. So it sets up that domain separator kind of namespace variable, and it mints 100 to whoever the deployer is. Got it. One other thing we should probably talk about, and we already noted it, but we should show it right here in the contract, is this approve? This is how much is allowed. And it's un negative one, which is zero minus one, which causes underflow, which is basically the largest possible unsigned integer, is what you're approving by default.
00:08:47.918 - 00:08:48.938, Speaker B: Definitely not setting.
00:08:49.054 - 00:08:54.034, Speaker A: True. Yeah, just pointing that out because that's kind of a weird.
00:08:54.162 - 00:08:56.950, Speaker B: You went negative one. It means infinity, basically.
00:08:57.020 - 00:09:15.418, Speaker A: Yeah. There you go. Perfect. So there we go. So we basically have an ERC 20, and we've carved out the permit function from die, and we have that here. So we basically have a test die, like a test die that we can play around with, and let's compile that. Right? Okay.
00:09:15.418 - 00:09:48.290, Speaker A: Yeah. And I also brought in scaffold Eth. So if you're not familiar with Scaffold Eth, it's basically just like some scaffolding. It's a stack that I use for building decentralized applications. It's comprised of, basically biddler and create Eth app with some extra fun stuff that I've added in and it's just a bunch of components that I use all the time. So I started with Scaffold EtH, which basically you have a web server, you have the biddler blockchain. And now we can yarn run deploy here, and this will compile and deploy all our contracts.
00:09:48.290 - 00:10:25.266, Speaker A: And then we'll see this address right here change as it injects the new contracts in. Okay, so we have your contract, which is the contract that comes with Scaffold Eth. And we've got this test die. So what you can do over here in your app is you can grab this contract object and we can bring in test die. And then we'll be able to kind of just see that it'll just parse the ABI automatically and we'll see all the different functions we get from test die. So technically, this is an ERc 20. We could probably see that the owner has 100.
00:10:25.266 - 00:10:26.734, Speaker A: Let's see, who would be the owner.
00:10:26.782 - 00:10:29.174, Speaker B: That's going to be the owner is whatever account it can.
00:10:29.212 - 00:10:42.460, Speaker A: Yeah, let's have. It actually just meant a bunch to ostegriffic e. That'll be even easier. So let's go to our Contract. We're going to do a centralized pre mine. Are you ready?
00:10:43.710 - 00:10:48.458, Speaker B: I'm not investing in this coin. This is not fair.
00:10:48.624 - 00:10:50.842, Speaker A: Yeah. Okay, let's try that again.
00:10:50.896 - 00:10:52.086, Speaker B: Pre mine scam.
00:10:52.198 - 00:11:15.570, Speaker A: Pre mine scam. Oh, man, the trolls have gotten to us. Okay, there we go. So we're going to redeploy the contract, but this time, my fake die, instead of sending 100 to the deployer, which is like the Bibbler zero account, I sent it to Austin Griffith E. So now if I go to Austingriffith EtH and I paste this in here, we should see that I have a balance of 100.
00:11:15.640 - 00:11:17.246, Speaker B: I got 100 die.
00:11:17.358 - 00:11:41.930, Speaker A: Yeah. All right, so now what do we want to do? We want to permit. So if I was going to build permit, I would go grab this hash, and I would, as a developer, have to figure out how to get this hash just right. And then I need to sign it with my metamask. Right. So to get that hash just right, I would carve that out and put it in another contract and have a read function that does a git hash. And then I'd sign that.
00:11:41.930 - 00:11:44.534, Speaker A: But you've taken care of all that. I don't need to do that stuff.
00:11:44.592 - 00:11:45.806, Speaker B: I did all the hard work for you.
00:11:45.828 - 00:11:46.654, Speaker A: You did all the hard work.
00:11:46.692 - 00:11:54.350, Speaker B: You don't got to worry about hashing and signatures and all that. Just pop this library in and it's like a one liner.
00:11:54.930 - 00:12:07.746, Speaker A: Figuring out getting signatures to work right on Ethereum is pretty hard. Like doing metatransaction stuff. You just have to try it, like six different ways. Do I need to have that string in front of it or not? So much junk you have to do.
00:12:07.768 - 00:12:15.074, Speaker B: And then again, especially with this is the new type of signing messages, like the type sign, which is why it's got, like, a nice little ui.
00:12:15.122 - 00:12:16.486, Speaker A: Oh, it's even fancier. That's right.
00:12:16.508 - 00:12:28.154, Speaker B: You're not just fancier, but it's even more complicated because it's newer. And that's why, again, we tried to make this video last week, and it just didn't work. So I had to keep hacking away at that.
00:12:28.192 - 00:12:40.974, Speaker A: But yarn. Add eth permit, right? Here we go. Here we go. Bringing in eth permit. So we've got scaffold eth. We've got eth permit. I think we've kind of covered all that.
00:12:40.974 - 00:12:47.682, Speaker A: This should be pretty easy to just google up and find. Hopefully, we'll just end up with some kind of a branch here that we could just hand out to.
00:12:47.816 - 00:12:52.034, Speaker B: Yeah, it should be quick. Eth permit is like a super light.
00:12:52.232 - 00:13:04.806, Speaker A: There we go. Okay, so we got eth permit. One seven. Okay, now let's see what kind of docs he got here. All right, cool. You've got the die style, and it's called 20 612.
00:13:04.908 - 00:13:28.170, Speaker B: That's the ERC 20 612. Yeah. So I guess if anyone's really curious, wants to dig deep on how permit works. You can read ERC 20 612. There's like the whole documentation and the standardization. And if you're trying to make a token that includes permit, you should probably read up on ERC 20 612 and copy their code. But for now, let's just consume.
00:13:28.170 - 00:13:31.546, Speaker B: Let's just do the dap side of it. Let's just permit some tokens.
00:13:31.578 - 00:13:39.806, Speaker A: Yeah. The thing is, I don't want to go through it. Right. If someone already done this and been in the trenches and figured out how to get the signature to work. Thank you, thank you. Thank you, David.
00:13:39.838 - 00:13:40.660, Speaker B: My home.
00:13:41.750 - 00:14:06.234, Speaker A: Okay, so I'm going to put in a button. We'll just put in a button to start testing this out, and we'll call it permit. Whoa, whoa. Get out of here. Okay. And then on click, we will call your function. Better make that a function itself.
00:14:06.352 - 00:14:06.682, Speaker B: Yeah.
00:14:06.736 - 00:14:11.980, Speaker A: All right. And then we'll maybe. Let's see. Console log the result.
00:14:12.510 - 00:14:16.380, Speaker B: We got to change the params a little bit. Some stuff in here.
00:14:17.010 - 00:14:17.950, Speaker A: Let's see.
00:14:18.100 - 00:14:22.974, Speaker B: So the first parameter is. Yeah, so you can change that to a user, I think.
00:14:23.092 - 00:14:51.782, Speaker A: Yeah, in scaffold eth there's a couple of providers. You've got your main net provider that's always connecting to inferior and etherscan and stuff to get things like Ens and whatever's on the main net. Then you've got like a local provider that's either going to be talking to your local node or some. If you happen to be deploying this to mainnet. This would also just be equal to mainnet. But right now it's local. But then there's a user provider that's going to be using whatever this user has here.
00:14:51.782 - 00:15:22.754, Speaker A: So I can log out and scaffold e is just going to give me a burner. If I copy this address and I paste it in here, I'm going to get another user provider. So there's this provider here that's connected to whatever local network you have that is actually an account that is like a burner and you can send money to it from the faucet. And then this guy can make transactions and he's just talking to local chain. So that's the user provider and that's what we'll be putting in. And this should change.
00:15:22.792 - 00:15:26.770, Speaker B: I will say the user provider does still have to be on the same chain as the token. I think it already is.
00:15:26.840 - 00:15:29.170, Speaker A: Yes, it is going to read point.
00:15:29.320 - 00:15:30.786, Speaker B: It's going to read some provider is.
00:15:30.808 - 00:15:56.090, Speaker A: A little tricky because provider is kind of like an old web3 word, but really not old js. Well, old. That's not as old as me, Sonny. No, but traditionally we thought of a provider as kind of like what metamask is. But really in ethers you think of a provider as more like the connection. So I have a provider that's talking to infuria. I have a provider that's talking to my local node.
00:15:56.090 - 00:16:24.918, Speaker A: But then I have a signer and the providers and signers can be combined in one. But a signer is basically like a key pair, something that can sign transactions. So you use your signer to sign transactions and you send them through your provider to the chain nomenclature. Okay, but yes, all of that just to get this user provider right here. And we'll plug that into here. So what we're saying is using this connection to this blockchain and this private key, right. Okay, so token address.
00:16:24.918 - 00:16:27.720, Speaker A: That's got to be our dai token, right?
00:16:28.250 - 00:16:29.094, Speaker B: Yes.
00:16:29.292 - 00:16:57.054, Speaker A: Okay. And that is this address right here. And you could get that, that's in your artifacts. Too, if you wanted to go look at it. Oh, actually, you know what we should do is we should just do, I think, do we have read contracts here we could actually grab that address from? Yes, we have them. Where do I have them? Oh, it's probably in there. Okay, no, never mind.
00:16:57.054 - 00:17:16.946, Speaker A: Let's just do it this way. This is easier. Okay, so we've got our token address and then our sender address and our spender. So we've got sender and a spender and a token. Okay, so the sender will be me. Right. Let me connect back up since I own the 100 die.
00:17:16.946 - 00:17:31.980, Speaker A: Let's go look. Yes. Okay, so I'm the sender and there's a spender. Maybe it should, I don't know, whatever. It doesn't matter what the nomenclature is. So this is more like the owner's address. Right?
00:17:32.690 - 00:17:34.286, Speaker B: Which one? The sender address.
00:17:34.388 - 00:17:36.346, Speaker A: Yeah. Owner.
00:17:36.458 - 00:17:39.294, Speaker B: Owner. That's fine. Yeah, that makes more sense.
00:17:39.412 - 00:17:45.194, Speaker A: Right. So you have the guy who owns the die, and then you have the guy who's spending the die on behalf of the owner.
00:17:45.242 - 00:17:46.910, Speaker B: Yeah, and then the spender.
00:17:46.990 - 00:18:20.390, Speaker A: Who's the spender going to be? That's probably going to be our other contract. Really? Technically, you could sign some other account to move your die around, but it's really not what this pattern is for. We have the super secure die contract, and you're going to be approving some other thing, full access to it. So that other thing better be pretty darn secure. So let's actually set that up to be this contract. However, there's no functionality in this contract to move the die. So we're probably going to need to bring in like an IERC 20, like the interface in, right?
00:18:20.560 - 00:18:21.326, Speaker B: Yeah.
00:18:21.508 - 00:18:31.390, Speaker A: Okay, so let's see what's the best way to get started with that. Well, let's just do the permit. Right? Can you do the permit?
00:18:31.730 - 00:18:37.266, Speaker B: Yeah. Okay, let's try this. And we're going to log the result there.
00:18:37.368 - 00:18:42.834, Speaker A: Oh, wait, it doesn't like that. Right, exactly. Let's just get something back from your library first, see what.
00:18:42.872 - 00:18:46.342, Speaker B: Yeah, exactly. And we'll get to see how metamask handles this and everything.
00:18:46.396 - 00:19:15.680, Speaker A: Yes. Okay, so this will be the spender, too. So we've got our fake die, we've got my address that has 100, and then we have another contract that we want to permit to send the money around even though it can't do anything. And we have this permit button. So let's bring up the inspector here and see what happens when we do a permit. What.
00:19:17.570 - 00:19:23.966, Speaker B: Have you installed. I think you might need to reinstall and get the newer. What was the last permission? Oh no, you did.
00:19:23.988 - 00:19:25.380, Speaker A: Yeah, we did. Yeah, we just did.
00:19:27.510 - 00:19:29.250, Speaker B: Can you check what version?
00:19:29.590 - 00:19:31.060, Speaker A: Yeah, it's one seven.
00:19:31.750 - 00:19:34.690, Speaker B: It should be right. Yeah, I saw it say that.
00:19:34.760 - 00:19:51.610, Speaker A: Yes, e one seven. That's the most recent, right? Yeah, I mean it's going to be in the package. It's going to be in this package. Json we should see e permit.
00:19:53.470 - 00:20:02.862, Speaker B: Yes, it's there. Just try it one more time. Or the other thing you can do. No, not install. Try doing the permit. Like try refreshing this.
00:20:02.996 - 00:20:08.366, Speaker A: Yeah, let me bring. I just killed the whole app and brought it back up.
00:20:08.388 - 00:20:10.240, Speaker B: Got to bring it back up just in case.
00:20:13.730 - 00:20:15.842, Speaker A: Something about args method. Does that look?
00:20:15.896 - 00:20:18.018, Speaker B: Yeah, this is like ether's stuff.
00:20:18.104 - 00:20:18.740, Speaker A: Okay.
00:20:22.630 - 00:20:24.820, Speaker B: Let'S check that. I actually published this.
00:20:26.390 - 00:20:30.740, Speaker A: NPM publish. Okay, yeah, let's see.
00:20:32.310 - 00:20:37.202, Speaker B: So if the workaround is we can just do window Ethereum provider.
00:20:37.266 - 00:20:40.922, Speaker A: Okay, so there's something weird with ethers right now, but if we put in.
00:20:40.976 - 00:20:48.058, Speaker B: Yeah, I got it working before. Yeah, I'm not sure what's up with.
00:20:48.064 - 00:20:51.322, Speaker A: That, but the window provider is just going to use the injected metamask.
00:20:51.386 - 00:20:52.938, Speaker B: Sorry, no, window ethereum.
00:20:53.034 - 00:21:02.670, Speaker A: Oh, sorry. Yeah, I did that wrong. Is that because metamask can be used on other chains? Like why the ethereum?
00:21:03.090 - 00:21:03.840, Speaker B: Whatever.
00:21:05.010 - 00:21:13.886, Speaker A: There we go. Okay, so this is what, there we go. When you call a permit, we can see these specific addresses, right? Yeah.
00:21:13.908 - 00:21:31.286, Speaker B: So I'll say like the cool thing, this is the typed sign that we were talking about before. This is like the new way of signing messages. So you might have seen in the past on some dapps. It's like, hey, sign a message. And it just shows you a bunch of random hex characters. And you're like, I don't know what I'm signing, but whatever, it told me to sign it. So here we go.
00:21:31.286 - 00:21:49.200, Speaker B: This new type sign, it lets you see like, hey, I'm signing a message. Here's the data that I'm signing. It just gives you a bit of information about it. So that's the cool part of these new signatures. But again, this is kind of like a new. The reason that we're running into these issues is because this is like a new way of doing things. I don't think it's even been fully formalized yet.
00:21:50.290 - 00:22:00.078, Speaker A: Yeah, we can clearly see that we're giving whoever this spender is, we're giving him full access to our die instead of just signing some random hash that you have no idea what that is associated.
00:22:00.094 - 00:22:02.642, Speaker B: So you just hit sign, and now you can see in the console here.
00:22:02.696 - 00:22:03.860, Speaker A: There we go. Okay.
00:22:05.510 - 00:22:23.498, Speaker B: This gives you everything, like, all the info that you just signed. So it's got some things like the expiration, that's basically like a timestamp. And again, the timestamp is infinity. Like, this will always be valid. It gives you a nonce. And the nonce is like replay when you replay protection. Yeah.
00:22:23.498 - 00:22:34.366, Speaker B: It's like if you sign a bunch of permits and they all have the same nonce, like, only one of them can actually be used. The important things here are the RSV. You see those, right?
00:22:34.548 - 00:22:35.280, Speaker A: Yes.
00:22:35.730 - 00:23:02.440, Speaker B: And so RSV, that's like the typical. How do you explain RSV? This is the signature. Do you know more about how to explain the cryptography behind signature? What's the name of the. We are experts. Well, the nice thing I think about.
00:23:03.450 - 00:23:05.030, Speaker A: ECDSA.
00:23:05.370 - 00:23:12.058, Speaker B: ECDSA. The nice thing I think about where as blockchains and cryptography, you just got.
00:23:12.064 - 00:23:14.154, Speaker A: To show this curve right here. This is all you need.
00:23:14.272 - 00:23:16.410, Speaker B: Now, it's super simple. That's obvious.
00:23:16.480 - 00:23:17.034, Speaker A: You guys all get.
00:23:17.072 - 00:23:36.354, Speaker B: Yeah, it's just like a vase shaped curve. Yeah, it's a vase. A fine vase laying on its side. But I say the nice thing is you don't really need to understand the cryptography these days. Right. I don't understand this cryptography. I just know, like, sign a message, and that message has a signer, and you can check if it's valid or not.
00:23:36.354 - 00:23:36.980, Speaker B: Right.
00:23:38.870 - 00:23:52.550, Speaker A: Where the public address is derived from the private key, I think. Right. The path that you're tracing is your private key, and where you end up is your public key, and it's one directional. It's like the way it's derived.
00:23:53.450 - 00:23:57.510, Speaker B: Sounds good to me. I'll believe that.
00:23:57.580 - 00:24:19.134, Speaker A: But that private key can then be used to sign things. And really, if you're interested in sign messages, you should go check out the ETH build section on the key pair, because I go through actually signing, I take a key pair and I sign some message, and then I recover that message. You can kind of do that very.
00:24:19.172 - 00:24:25.594, Speaker B: Visceral plug and play in that ETH build example. You probably had a signature as just like one long string.
00:24:25.642 - 00:24:25.854, Speaker A: Yes.
00:24:25.892 - 00:24:26.720, Speaker B: Right? Yes.
00:24:27.170 - 00:24:27.930, Speaker A: RSV.
00:24:28.010 - 00:24:41.026, Speaker B: Yeah, it's the same thing. It's like you can literally chop up that long string and it's got, like, three different numbers in it. But, yeah, we're using it split into three different numbers instead of squished together into a long string.
00:24:41.138 - 00:24:57.434, Speaker A: And sometimes you'll see in contracts that they do actually just accept the signature. Yeah, this is the gas intensive lazy way to do it. This is how I do it. I just say send me that signature and I'll handle it in here and I'll split it.
00:24:57.472 - 00:24:58.582, Speaker B: That code you're selecting.
00:24:58.646 - 00:25:06.446, Speaker A: Yeah, right. The code cuts up the RSV into the pieces. But yeah, you can do that off chain and save a lot.
00:25:06.468 - 00:25:27.870, Speaker B: The better way, the more official is to just do like this RSV. So we've got this RSV and we've got some other data and what we can do with those values is now we can call a function on another contract and give it those values and then that contract will call permit and it'll give itself access to our tokens.
00:25:28.030 - 00:25:32.358, Speaker A: Which is the second piece that you have here, which is actually this is.
00:25:32.364 - 00:25:35.510, Speaker B: Just calling permit on the token itself. So we can do this.
00:25:35.660 - 00:25:37.622, Speaker A: Yes, you can do that.
00:25:37.756 - 00:26:03.534, Speaker B: If you call permit like yourself you can do it. And it's not a bad idea to play with that to test it out. But if you just call permit yourself, that's basically the same thing as calling approve. You're not really saving any, you're not making it much easier for the user. You're actually giving an extra step for the user and they still have to spend the same gas. So really the exciting thing with permit is giving this value to another contract and letting that other contract call permit. And I think that's what we're going to do next, right?
00:26:03.652 - 00:26:37.580, Speaker A: Yes, I think that's what we should do. So what I'm going to do is bring in a special hook called contract use contract loader and that will load up our contracts. Actually let's load it up with the user provider so we can talk to them. Okay. So that, oh wait, we want to really, let's see what happens. Okay, so we're going to bring in a hook that has our contracts. And let me just go ahead and console log these here just so we can see them, make sure that we have them.
00:26:37.580 - 00:27:00.754, Speaker A: It should just be an object with the contract. Got to bring that in. Here's some handy hooks. Oh whoops. Result. Get out of here. What am I doing? Okay, let's go ahead and just comment that out there.
00:27:00.754 - 00:27:20.714, Speaker A: Okay, there we go. Now we should, when I hit the button just be able to see what our contracts look like. And we do. We've got test die and we've got your contract. Okay, so what we can do now is say our token address. Now is contracts testy. I think it's underscore address.
00:27:20.714 - 00:27:30.860, Speaker A: Oh, man, that might be wrong. Test die. I don't see it at all.
00:27:31.710 - 00:27:33.386, Speaker B: Weird. Oh, boy.
00:27:33.568 - 00:27:34.362, Speaker A: Yeah, that's really.
00:27:34.416 - 00:27:37.038, Speaker B: Oh, no, it's address. It's just address. No, underscore just address.
00:27:37.124 - 00:27:52.820, Speaker A: Okay, cool. So that's our test drive address. And our spender will be the. Your contract. Okay, cool. And then the owner is me. So we have Austin Griffith eth hard coded here.
00:27:52.820 - 00:27:55.890, Speaker A: Really? We're set up now.
00:27:56.040 - 00:27:58.714, Speaker B: Let's try. We still need the signed die permit.
00:27:58.782 - 00:28:20.682, Speaker A: Yes. I just want to kind of do it one step at a time now. Yeah, I should get the signature, make sure all the addresses are right. I hit sign, it goes here. Everything looks good. Okay, now we're ready for what we want to do next is send something to. Okay, let's do this.
00:28:20.682 - 00:28:28.686, Speaker A: Let's get in here. Let's do a console log just to be flagrant. Okay, so I'm going to bring in Biddler's console log.
00:28:28.788 - 00:28:31.214, Speaker B: I've never actually used this console log.
00:28:31.252 - 00:28:31.966, Speaker A: You're going to like this.
00:28:32.068 - 00:28:35.700, Speaker B: That's really cool. I've read about it. I'm like, I would love that.
00:28:36.150 - 00:28:56.502, Speaker A: Right here in solidity, I'm going to do a console log. The holder, the spender, and the wad. Come on. Okay. So instead of actually doing the approve, I'm just taking it one step further and I'm one step back. And I just want to console log it to make sure it all works. Okay.
00:28:56.502 - 00:29:12.254, Speaker A: So then we're going to call, let's see. It'd be test, contract, testi permit. And I think I'm just going to use all your stuff here. Spender. Yes, that's right. Sender is different. Right.
00:29:12.254 - 00:29:13.310, Speaker A: It's owner.
00:29:14.610 - 00:29:21.214, Speaker B: Yeah. And spender is the same. Everything with result is the same. Yeah, that all looks good.
00:29:21.332 - 00:29:28.450, Speaker A: Let's see if this works. Okay, so now it should actually have me sign a message and we're going to send it to the contract.
00:29:29.830 - 00:29:36.066, Speaker B: Is it methods permit? This is an ethers thing, right?
00:29:36.168 - 00:29:41.926, Speaker A: Yeah. No, here we can just console log it.
00:29:41.948 - 00:29:42.374, Speaker B: Right.
00:29:42.492 - 00:29:51.260, Speaker A: We see testi right here. It should just be permit, right? Permit. Yeah. Let's see. Address.
00:29:55.470 - 00:30:06.320, Speaker B: No, it said send is not. You got to get rid of that send probably. Yeah, that's web3. We're mixing and matching our.
00:30:07.170 - 00:30:18.702, Speaker A: We're into ethers now. Okay, here we go. So this is interesting because I'm signing and then I'm putting the transaction in myself, which is totally not how you would do it. Right. But we're getting closer.
00:30:18.766 - 00:30:19.906, Speaker B: One step at a time.
00:30:20.008 - 00:30:31.154, Speaker A: Right. So I would permit. And then some other account. Right. I have insufficient funds. Right. Because I need to go here and I need to go to the faucet and send myself a grip of faucet funds.
00:30:31.154 - 00:30:49.050, Speaker A: Now we see that go up. Okay, now we're ready. Now we're ready. Let's try that one more time. So I sign and then some other account, but actually me puts it into the contract. And then over here, we didn't get the console log, but I don't think I deployed it. Okay, one more time.
00:30:49.050 - 00:30:49.930, Speaker A: One more time.
00:30:50.000 - 00:30:52.480, Speaker B: But it didn't break, though. It didn't break.
00:30:52.930 - 00:30:57.310, Speaker A: Right. The approved probably actually happened. But I want to see the console log, right.
00:30:57.380 - 00:30:57.710, Speaker B: Yeah.
00:30:57.780 - 00:31:11.426, Speaker A: At a time. Okay, here we go. Permit. Yes, I do. Someone else takes that signature, puts it on chain. Oh, yeah, we get a cool console log.
00:31:11.528 - 00:31:15.254, Speaker B: That's awesome. I got to play around with this more.
00:31:15.292 - 00:31:28.458, Speaker A: Yeah, so there we go. Now we know that our contract, the watt is negative one, and that's. Right. Right. It'll underflow. It figures that out? I think so.
00:31:28.624 - 00:31:31.594, Speaker B: Probably, yeah. Let's assume it.
00:31:31.792 - 00:31:34.460, Speaker A: Assume. Let's assume. Well, this is Martin's code.
00:31:37.550 - 00:31:45.214, Speaker B: They. Someone spent tens of thousands of dollars to audit this code. So I think we can assume it's, like, verified, right?
00:31:45.252 - 00:31:51.102, Speaker A: What's it called when they audited? No, but it's formally verified, right?
00:31:51.156 - 00:32:02.770, Speaker B: Formally verified, yeah. So that's even, like a level above audited. Formally verified. It's like, audited is like we got smart people to double check your code. Formally verified is like we got mathematicians.
00:32:03.910 - 00:32:13.826, Speaker A: There's, like, Austin writing code. David writing code. Martin writing code. There's yams. Then there's an actual audit.
00:32:14.018 - 00:32:17.174, Speaker B: You put me below yams. Come on.
00:32:17.372 - 00:32:18.360, Speaker A: That's true.
00:32:18.730 - 00:32:24.040, Speaker B: Yams blew up. Yams blew up. Right. None of my code.
00:32:24.350 - 00:32:36.846, Speaker A: Imstable y curve. And what's the other one? There's, like, four different projects you fork to get yams. I don't know, whatever. Very interesting stuff. Very interesting.
00:32:36.948 - 00:32:38.000, Speaker B: We could talk about.
00:32:40.850 - 00:33:06.742, Speaker A: This is funny. There's a lot of spice around the yams, and I'm starting to recognize the pattern. The pattern is the people who are spicy about $500 million getting locked up and $750,000 getting lost. There's a camp of people that are excited and cool and a little scared. And there's a camp of people that are pissed off about it. And the camp of people that are pissed off, almost all, are not rich. Right.
00:33:06.742 - 00:33:18.330, Speaker A: It's like, all of us guys, they're, like, poor as f. Just trying to get by trying to make something that works. And we're like, you guys, quit it. And then there's like this camp of people that are just whales that are like, this is great.
00:33:18.400 - 00:33:29.470, Speaker B: We're having fun and they're like pushing the gas prices super high. So we're like, oh, I would love to move a little bit of dai and be bankless. And people are like, I'm so rich.
00:33:30.210 - 00:33:32.170, Speaker A: 100 million on some yams.
00:33:32.250 - 00:33:37.278, Speaker B: And I'm going to spend $100 on transaction fees because I'm making like ten times that.
00:33:37.444 - 00:33:53.240, Speaker A: Okay, so we're going to leave our console login. We're going to have our approve. Can I even do this? I don't think it'll let me do this. So you certainly can't do strings concatenation. But I think let's see if we can put enough multiple, like a fourth argument here.
00:33:53.770 - 00:33:54.710, Speaker B: You can always do.
00:33:54.780 - 00:33:55.318, Speaker A: It worked.
00:33:55.404 - 00:33:56.040, Speaker B: Yeah.
00:33:56.810 - 00:34:04.940, Speaker A: Okay, so now we're actually going to do the approval, but what we need is to build something into this contract. So let's see.
00:34:11.090 - 00:34:15.118, Speaker B: You can just import testi. Why don't you just import, I'm just.
00:34:15.124 - 00:34:18.158, Speaker A: Going to grab a transfer function from testi. Right.
00:34:18.324 - 00:34:21.470, Speaker B: You can just import, you can just do like import testi.
00:34:22.290 - 00:34:23.040, Speaker A: Really.
00:34:25.730 - 00:34:37.060, Speaker B: Go to your contract Sol and then just keep that. But do just import test Sol.
00:34:38.090 - 00:34:44.760, Speaker A: That work. Cool, I like it.
00:34:45.210 - 00:34:48.950, Speaker B: And so now we want to add like a function. Right, right.
00:34:49.100 - 00:34:49.800, Speaker A: Okay.
00:34:50.650 - 00:34:54.362, Speaker B: So I called mine like eat token or do it or whatever.
00:34:54.416 - 00:35:00.266, Speaker A: Yeah, do it. Okay. And what we want to do is. Wait, so how do I create a test? Oh, I do a new test.
00:35:00.288 - 00:35:19.266, Speaker B: No, we're not creating a test tile. We're just going to use that as an interface basically. Right. So we need some parameters for do it. So we're going to give like the token parameter. So the first is going to be like address token and then maybe we should copy and paste this because you.
00:35:19.288 - 00:35:22.498, Speaker A: Need, yeah, I think you have, you.
00:35:22.504 - 00:35:35.078, Speaker B: Need every value for permit. So it's like you can just copy, you need everything that gets passed the permit. Yeah, you got to spend a lot.
00:35:35.244 - 00:35:39.178, Speaker A: No, transfer from. No, we're just doing a transfer.
00:35:39.264 - 00:35:40.940, Speaker B: But you got to call permit first.
00:35:41.550 - 00:35:48.170, Speaker A: No, we're calling a permit. We're doing it already. Oh, we're still calling to do the permit? Yeah, right now.
00:35:48.240 - 00:35:48.860, Speaker B: Okay.
00:35:49.950 - 00:35:52.054, Speaker A: We just need our contract to send some die.
00:35:52.102 - 00:35:59.294, Speaker B: I got you. Yeah. Then just do transfer from. So you need the token address and. Yeah, that's pretty much it.
00:35:59.492 - 00:36:05.742, Speaker A: This is our Toki and you don't do test yeah, you just do test.
00:36:05.796 - 00:36:06.782, Speaker B: Yeah. That's important.
00:36:06.916 - 00:36:07.262, Speaker A: Right.
00:36:07.316 - 00:36:28.470, Speaker B: This is definitely something I could see people getting confused of because it's like easy to miss that new. But it's like completely different things. Right. If you do like Toky equals new test I, you're deploying a contract and that's like a really expensive thing to. Right. Like, that's like the most expensive thing you can do in a contract is deploy another new contract, whereas casting if there's no new, you're not even doing it.
00:36:28.620 - 00:36:29.640, Speaker A: Something that already.
00:36:30.090 - 00:36:34.250, Speaker B: You're just changing the type. So test I, you're just going to put token.
00:36:34.590 - 00:36:47.482, Speaker A: You know, what we need to do is we're going to have to do a little bit of a custom deployment here because we need to first. And this is a cool little learning with scaffold right now it's doing an auto deploy. We don't want to do that anymore.
00:36:47.546 - 00:36:48.030, Speaker B: Why not?
00:36:48.100 - 00:36:55.326, Speaker A: We want to do our token because we're going to want to get the test die contract address and put it.
00:36:55.348 - 00:36:57.874, Speaker B: No, but we can pass that in. We can have the.
00:36:57.992 - 00:37:00.946, Speaker A: You're saying that could be the token. Okay. Yeah.
00:37:01.048 - 00:37:04.558, Speaker B: So that's the token. And so then you do test die equals auto deploy.
00:37:04.654 - 00:37:09.320, Speaker A: Yeah. Okay. So we'll have token here and that's what comes in here, right?
00:37:10.010 - 00:37:11.320, Speaker B: Yeah, exactly.
00:37:11.770 - 00:37:23.754, Speaker A: Okay, so really now that we have the Toky, we want to do Toky transfer from. Right. And I need to go look at.
00:37:23.792 - 00:37:35.760, Speaker B: The, it'd just be like message. You don't need to look up transfer from. It's just from. To an amount. So it would be like from. I've written solidity before.
00:37:36.530 - 00:37:39.646, Speaker A: Yeah, but I have the memory of a gerbil. Okay.
00:37:39.748 - 00:37:42.240, Speaker B: Sender. Too much stuff going on up there.
00:37:42.790 - 00:37:49.058, Speaker A: Yeah. Right. Okay. So the sender would be the person who's approved. Right. So that's me.
00:37:49.224 - 00:37:56.194, Speaker B: But you should do message sender. Whoever's calling this is like, you're going to take their token?
00:37:56.242 - 00:37:59.830, Speaker A: No, the sender is the person who's done the permit.
00:38:00.970 - 00:38:08.566, Speaker B: Same person. This is coming from the web app. So it's going to be the sender. Right.
00:38:08.748 - 00:38:17.062, Speaker A: Let's see. We're going to call. We kind of want to do this with a second. I'm going to do this with a second address. So it's at least like not Austin Griffith.
00:38:17.126 - 00:38:17.306, Speaker B: Ev.
00:38:17.328 - 00:38:19.014, Speaker A: That's doing it. Right. So Austin Griffith.
00:38:19.142 - 00:38:33.540, Speaker B: But if it's going to a contract. But if it's going into a contract, we only need one account. Like you can think of this account as like, this is like the DAP contract. This is like the uniswap. And so tokens are coming in, so we don't need two metamask accounts. We can just do this.
00:38:34.630 - 00:38:53.026, Speaker A: So, okay, so what I'm thinking is there's one metamask account that is the user, and there's a second metamask account that is basically the uniswap cron job or whatever that's going on. Right. They have some kind of relay that's putting your meta transaction on chain.
00:38:53.218 - 00:38:57.430, Speaker B: Is it simpler to just pull the token into the contract, though? I mean, we could do either that.
00:38:57.500 - 00:39:05.114, Speaker A: And then that back end thing is also going to call the do it function. Right. So the user just signs something and does nothing else. Right.
00:39:05.152 - 00:39:05.642, Speaker B: Okay.
00:39:05.776 - 00:39:14.154, Speaker A: Then a secondary account puts it on chain and calls the do it and does all the magic stuff in the background so the user doesn't have to f with any of that.
00:39:14.272 - 00:39:14.554, Speaker B: Sure.
00:39:14.592 - 00:39:14.842, Speaker A: Okay.
00:39:14.896 - 00:39:15.670, Speaker B: Try that.
00:39:15.840 - 00:39:42.200, Speaker A: So we'll do a permit from Austin Griffith, and then we'll switch over to a different address to put it on chain and call this do it. So that means that this transfer. Let's just do this. Right. We could just grab all this stuff and put it right here. Send a recipient amount that should compile. Right.
00:39:42.200 - 00:39:46.680, Speaker A: That's basically all we need to do, I think.
00:39:49.680 - 00:39:50.236, Speaker B: Yes.
00:39:50.338 - 00:40:03.750, Speaker A: Okay, so yarn run deploy. We're going to have to do some magic here once we get it, but let's get it out and deployed and then figure out what's next. Okay, so we're going to need to call this do it.
00:40:06.040 - 00:40:18.424, Speaker B: The one thing I'm a little confused about is why do we even have this, like your contract? Because it's just calling transfer from. You could just have that. You could have that second account just call transfer from by itself.
00:40:18.542 - 00:40:27.496, Speaker A: Yeah, but that would be like an externally owned account moving the funds around while this is an externally owned account.
00:40:27.598 - 00:40:29.640, Speaker B: Triggering it because we're permitting.
00:40:32.560 - 00:40:42.190, Speaker A: So when someone signs over their life, they're not signing it over to that back end, they're signing it over to this. They have to trust this code right here in this.
00:40:42.800 - 00:40:50.272, Speaker B: We're making a contract that'll kind of let anyone move code to anywhere. But you could have a contract that's much more strict. That only lets you do. Yeah, exactly.
00:40:50.406 - 00:41:26.568, Speaker A: This amount could be, basically, it could be like a secondary signature system where you sign one thing to approve the contract, and then that contract itself accepts more signatures. And that could be like, send $20 to the XDI bridge, send $30 to David send 100,000 die to the yams. All those fun things that you could do, but those could just be signatures, and there could be this account in the background running those and paying the gas for you. Okay, we are deployed, right? We got Toki. Let's see. We got Toki here. This is Toky.
00:41:26.568 - 00:41:45.110, Speaker A: This is our contract there. So now we have a do it function. Okay, so really, our permit is only going to wait. Why is that unsaved? I'm redeploying. I don't know why that was unsaved. Okay, so our permit function. Now, we don't want to do this call, right? We'll get the result here.
00:41:45.110 - 00:41:53.350, Speaker A: Where should we store that? Because we need this to be a different address.
00:41:54.520 - 00:41:55.712, Speaker B: Calls permit.
00:41:55.856 - 00:41:56.550, Speaker A: Yeah.
00:41:59.240 - 00:42:01.476, Speaker B: I thought that account was going to call permit.
00:42:01.588 - 00:42:04.040, Speaker A: No, we're going to do it from a different one.
00:42:04.190 - 00:42:07.560, Speaker B: See, that gets complicated, because now we got to pass all this data to some other account.
00:42:07.630 - 00:42:27.184, Speaker A: We will. Okay, so Austin Griffith should have a balance of 100, and there should be no allowance. But what we want to do is permit this contract. Let's make sure this comes up. So it should be b. Yeah. Okay.
00:42:27.184 - 00:42:59.772, Speaker A: So I'm permitting all my die to this contract. So now there's, like, a second set of solidity that I have to trust, but I trust it. And now that gives me back this information. Now, the app should store this somewhere, right? Should do something with this. Send this to some back end or something like that, and give the user, like, a double thumbs up, like, we're good to go, you're done. That's all you needed to do, and we're good. But then what has to happen is someone's got to put that on chain, and so that's going to be some secondary account.
00:42:59.772 - 00:43:13.504, Speaker A: Right. Let me grab this guy here. So this is now, like, the apps account. It's not showing. Oh, there we go. Okay, there it is. Okay, so this is the second account that that person is gone now.
00:43:13.504 - 00:43:30.896, Speaker A: Oh, what am I doing? Get out of here. Send. What is this? Okay, whatever. So this is now kind of the custodial. It's not. Custodial is not a good word for it, but it's the Dapps service account. How about we call it the service account? It's sort of like servicing these transactions in the background.
00:43:30.896 - 00:43:46.776, Speaker A: So you've signed something, you get a pretty thing that says, okay, we'll take care of it from here. Now, the service account grabs that signature. I've lost it now. Is that it? That's not it.
00:43:46.958 - 00:43:47.690, Speaker B: What?
00:43:48.220 - 00:43:52.620, Speaker A: The signature. I'm looking for the rs and v. Is that it?
00:43:52.770 - 00:43:57.292, Speaker B: I'm just going to sign one more time. You might have lost it when the page reloaded, maybe.
00:43:57.346 - 00:44:02.444, Speaker A: Yeah, I think we lost it when the page reloaded. I'm sorry. All right. Yes. And I need to reload this, the.
00:44:02.482 - 00:44:04.508, Speaker B: Account because it reloads the page when.
00:44:04.514 - 00:44:16.420, Speaker A: You doesn't reload the page. Yeah. Okay, so let's do a permit. Let's save all that information in the back end somewhere. Okay, here it is. So let's grab. Will this just let me copy? Oh, yeah, that's nice.
00:44:16.420 - 00:44:38.684, Speaker A: Okay, so the app should save this signature somewhere because he's going to need it again. Then give that guy a message, say you're good to go. Thank you for enjoying this wonderful ux. And then we'll pass it to the service account. The service account has money. Okay. So now the service account is going to take this information and put it in.
00:44:38.684 - 00:44:41.790, Speaker A: Okay, so our token is this. Right.
00:44:42.480 - 00:44:48.076, Speaker B: And our sender, well, you have to call permit first. We haven't called permit yet.
00:44:48.258 - 00:44:49.500, Speaker A: That's this right here.
00:44:49.650 - 00:44:52.104, Speaker B: Oh, no, but do it doesn't call permit.
00:44:52.232 - 00:44:54.144, Speaker A: Yeah, you're right. Do it actually. Right.
00:44:54.182 - 00:45:00.316, Speaker B: We need to put it again. We could put permit inside. Do it. But right now we're just calling it directly.
00:45:00.428 - 00:45:08.880, Speaker A: Okay. So the holder is me and the spender is the current. The contract.
00:45:08.960 - 00:45:10.790, Speaker B: Oh, no, the contract address. Yeah.
00:45:11.800 - 00:45:14.224, Speaker A: I'm just like kind of copy and paste.
00:45:14.272 - 00:45:16.440, Speaker B: Yeah. It should match up one to one.
00:45:16.510 - 00:45:19.530, Speaker A: Right. Allowed is true. Right.
00:45:20.300 - 00:45:21.940, Speaker B: Will it handle booleans correctly?
00:45:22.020 - 00:45:26.984, Speaker A: We'll find out. I mean, it's always going to be true. However it handles it.
00:45:27.022 - 00:45:28.152, Speaker B: True should always be true.
00:45:28.206 - 00:45:31.484, Speaker A: Right. But sometimes false is a string and that's true.
00:45:31.682 - 00:45:35.310, Speaker B: That's true. Yeah. I don't know if it's going to be like an error. We'll find out.
00:45:36.320 - 00:46:00.976, Speaker A: VR and s and really you should have a script to handle all this stuff. But the person has signed something. Now the service account is putting this into the contract. Okay. And now we probably saw on our chain there was probably some kind of. Yes, there's our approve right there. Okay, so now we're approved.
00:46:00.976 - 00:46:19.880, Speaker A: Now the service account goes to the second. So the service account hit die and got the approval. Let's test it. Let's test the allowance of this guy from this as the spender. It should be the largest number known to man. There it is. Massive.
00:46:19.880 - 00:46:20.508, Speaker A: Not really.
00:46:20.594 - 00:46:26.140, Speaker B: I've never seen a big number, nobody in my life, except for the total supply of the ants.
00:46:26.960 - 00:46:51.732, Speaker A: That was it. Yeah. Okay. So the service account has gotten the approval and now the service account needs to do it, which is whatever needs to happen on that contract. I like the example of going to the XDI bridge, right? Someone could drop into a page that says, hey, you want to use XDI? Sign this. And they sign something and then they say, okay, you're approved. Sign this one to send $25.
00:46:51.732 - 00:47:06.650, Speaker A: Sign this one to send $50. Sign this one to send $75. Right. And you could have that hard coded into this secondary contract. Everyone could trust it. It could be formally verified. But that's what this do it contract will do is some kind of action that actually moves your die around.
00:47:06.650 - 00:47:26.896, Speaker A: What are we doing? We're doing a transfer from sender receiver amount. Okay. So the token is this guy. The sender is me still, right? Yes. Is Austin Griffith E. But now the recipient. How about we send it to this guy for some reason we're going to send it to the service account.
00:47:26.896 - 00:47:46.330, Speaker A: I don't know why. This could be basically anything, right? This is like the thing, this is the magic right here is this person is going to get die from me and I didn't have to do any of it. And the amount, is this the amount we're going to send? Let's see. I have 100, right? So let's send ten of them. Wait.
00:47:49.660 - 00:47:53.912, Speaker B: Does it have decimals or. No? Is this way?
00:47:54.046 - 00:47:55.960, Speaker A: I think it's times ten to the 18.
00:47:56.300 - 00:47:56.856, Speaker B: Okay.
00:47:56.958 - 00:48:01.140, Speaker A: Yeah. No, it's 100 ether. Right? In the contract. We can find this out. Let's look at.
00:48:01.150 - 00:48:04.824, Speaker B: Yes, it's ether, but I didn't know about if your text field added the decimals.
00:48:04.872 - 00:48:12.576, Speaker A: No, I mean, it usually does. If there's a text field that it detects is a Un. It'll have extra buttons for going to. But for some reason.
00:48:12.598 - 00:48:13.184, Speaker B: Got you.
00:48:13.302 - 00:48:15.730, Speaker A: Okay, so now let's see what happens when we do it.
00:48:16.740 - 00:48:18.076, Speaker B: Fingers crossed.
00:48:18.268 - 00:48:20.064, Speaker A: Okay. Something happened.
00:48:20.182 - 00:48:21.024, Speaker B: Something happened.
00:48:21.142 - 00:48:23.776, Speaker A: Do it. Call now. What do we do?
00:48:23.878 - 00:48:24.652, Speaker B: Let's check some balance.
00:48:24.716 - 00:48:35.524, Speaker A: Balance. It's going to be down ten. No, we're not going to look at that. Let's go check balance. We need to check. So balance of this guy. This guy should have ten now, right? Yeah.
00:48:35.524 - 00:48:47.460, Speaker A: Yes. We did it as Austingriffith e I landed on this app and I signed a thing and because of that, someone else, somewhere else paid all the gas and got ten of my die.
00:48:47.540 - 00:48:52.060, Speaker B: You just gave someone die and you didn't spend any gas money, you didn't send any transactions.
00:48:52.960 - 00:48:57.276, Speaker A: And it took us like an hour, but we got it. We got it.
00:48:57.298 - 00:49:00.832, Speaker B: Yeah. I mean, imagine if we didn't have this awesome library, right?
00:49:00.886 - 00:49:05.650, Speaker A: Exactly. The library helped. We need to get ethers providers working.
00:49:06.100 - 00:49:08.304, Speaker B: Yeah, well, they were working on my.
00:49:08.342 - 00:49:23.776, Speaker A: Computer, works on my machine. I think this is basically the demo. I think we could probably build a little bit more. Right. There's obviously like a lot of cool scripting that can happen from here, but I think that could be kind of handed off to the developer.
00:49:23.808 - 00:49:24.436, Speaker B: Right.
00:49:24.618 - 00:49:29.496, Speaker A: This is what we have here as some kind of branch and let people kind of take it from here, I think.
00:49:29.518 - 00:49:49.112, Speaker B: So. This is like a really nice primitive. Again, we've given people the ability to move tokens and let someone else pay those gas costs. You can do meta transactions, you can do contracts where you can do things with tokens with only one transaction. There's a lot of different stuff you can do with this. So, yeah, I think this is a good spot to be in.
00:49:49.266 - 00:50:16.576, Speaker A: All right, I'm going to call this the permit playground branch, and I'm going to push it out there. We'll have this little video, and then we'll have this branch of code. And maybe one day I'll even take this a little farther and do like a little write up about it, but, yeah, that should be good, man. Thanks for joining me for a little permit playground action.
00:50:16.688 - 00:50:19.940, Speaker B: Thanks for having me on. I was pumped to get to use my bow tie for something.
00:50:20.010 - 00:50:26.300, Speaker A: Yeah, even if your shirt doesn't have a collar, you can still wear a bow tie. David Myhal has proved it.
00:50:26.410 - 00:50:27.070, Speaker B: Exactly.
00:50:28.400 - 00:50:30.776, Speaker A: All right, man. Yeah, happy bow tie Friday.
00:50:30.808 - 00:50:32.104, Speaker B: Thanks for, happy bow tie Friday.
00:50:32.152 - 00:50:36.044, Speaker A: Jamming on this. I'm going to post it right now, I think.
00:50:36.162 - 00:50:37.004, Speaker B: Cool, thanks.
00:50:37.122 - 00:50:38.170, Speaker A: Awesome. All right, see you.
