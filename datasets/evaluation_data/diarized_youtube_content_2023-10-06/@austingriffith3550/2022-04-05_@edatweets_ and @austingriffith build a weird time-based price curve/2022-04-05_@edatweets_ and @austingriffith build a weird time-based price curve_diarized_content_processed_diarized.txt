00:00:04.970 - 00:00:09.402, Speaker A: Happy bow tie Friday. Is it that, how do I pronounce your name? Is it Edda?
00:00:09.466 - 00:00:10.794, Speaker B: That was perfect, Edda.
00:00:10.842 - 00:00:24.574, Speaker A: Awesome. Happy bow tie Friday, Edda. I'm excited to work on some scaffold eth with you. Let me set it up so you can share your screen. And if you're down and let's, I'll backseat drive. Let's just tinker with some scaffold eth. I think you've pulled it down.
00:00:24.574 - 00:00:28.440, Speaker A: Let, let's see kind of how it looks and kind of go from there.
00:00:28.890 - 00:00:29.302, Speaker B: Yeah.
00:00:29.356 - 00:00:29.814, Speaker A: Here we go.
00:00:29.852 - 00:00:31.446, Speaker B: I'm just going to share my screen.
00:00:31.628 - 00:00:49.434, Speaker A: All right, 1 second. All right, scaffold eth. We got it. We got it.
00:00:49.472 - 00:00:51.162, Speaker B: I hope you can see my screen right now.
00:00:51.216 - 00:00:53.920, Speaker A: I've got it. Yes. Mvs code looks good.
00:00:54.290 - 00:01:05.460, Speaker B: Super. So I can directly open this? Yeah, I have downloaded it before. So basically like, we can also open the scaffold GitHub over here, if that makes sense.
00:01:05.830 - 00:01:10.994, Speaker A: That's where it starts, really? Is that Scaffold eth GitHub repo so.
00:01:11.032 - 00:01:38.060, Speaker B: I basically just did like a git clone, have it on my pc. I did a yarn install to get all the packages up to date and I guess we're going to kind of start get the chain, get the application up running so I can do that by doing a yarn chain. This will basically spin up our hard hats local node. I'm going to run it on localhost right now. And then let's also open a new tab over here to start our front end.
00:01:38.430 - 00:01:49.358, Speaker A: Look at this. You got it. I don't even have to do anything. I'm just sitting back watching. This is great work. And you talked about the yarn install and the git clone. Those take a long time.
00:01:49.358 - 00:02:08.962, Speaker A: The git clone has to download the whole repo and there's a lot of branches, and then the yarn install has to install all the dependencies. So we've kind of gotten those long tasks out of the way early and now we're kind of attacking it right away. There's our front end. So we've got our chain running and we've got our front end up. Great work. Super.
00:02:09.016 - 00:02:14.950, Speaker B: And I guess I also have to do like a deploy, right? I'm not sure if I deployed my contract, so it's probably going to give us an error.
00:02:15.370 - 00:02:44.942, Speaker A: Yes, it comes with kind of a template contract and yarn deploy should ship it. And every once in a while you need to do a yarn deploy reset. It's kind of just like a thing you have to learn because it's going to cache your contract. Like if you hit up and enter here and we do another yarn deploy, you'll see that it reuses the same contract. And this is just a little gotcha within scaffold e. Go ahead and hit it. Yeah, we can deploy as many times as we want.
00:02:44.942 - 00:03:01.526, Speaker A: We're not paying for it. Yeah. See how it reuses the contract. If we wanted a fresh version, we would need to do a reset there. But you got it so far. Okay, so we've got our contract deployed. Now we want to kind of tinker with it in the front end, right? Yeah, there we go.
00:03:01.526 - 00:03:06.166, Speaker A: There we. Yeah, go ahead.
00:03:06.268 - 00:03:27.194, Speaker B: Yeah, I just kind of wanted to open what's over here, if that would be useful to kind of go through. So I think, yeah, we have our contract over here. We have our front end. Where is it? In the react app. And then there's like extra services as well, which I guess we're not going to use for today, but just kind of to show what's in the dow.
00:03:27.242 - 00:03:45.582, Speaker A: Let's look at the smart contract. Yes. Let's go to hard hat contract. So this is where it all starts, right. Here's kind of an example smart contract. And we have line twelve, which is kind of like this arbitrary purpose we're storing. And then we have kind of 18 through 22 as kind of a function to let us update that purpose.
00:03:45.582 - 00:04:17.006, Speaker A: Right. So let's go tinker with it. Let's go call this set purpose function from the front end and see an update in the smart contract. And then we can kind of go from there with whatever strikes us as the next thing we want to tinker with. Yes. Oh, we'll have to get gas and we'll have to explain kind of how wallets work. But maybe if you go to the debug contracts, I feel like debug contracts tab is kind of like where to start, where it gives you this kind of like auto appending kind of.
00:04:17.006 - 00:04:26.820, Speaker A: It auto adapts to your smart contract. So if we try to set the purpose here, what's going to happen? Let's try it out and see. It should yell at us about gas, I think, but let's do it and see it happen.
00:04:28.070 - 00:04:31.422, Speaker B: Okay, let's set it to Friday.
00:04:31.486 - 00:04:53.414, Speaker A: Let's set it to Friday. Oh, yeah. Okay. So we don't have any money, so it tells us we need to get some eth. And there's that big call to action underneath this dialog. That should, if you hit that big blue button there, that should give us in the top right? Yeah, there we go. That'll give you funds from the faucet, but let's give ourselves, like, a ton of money.
00:04:53.414 - 00:05:08.400, Speaker A: If you go ahead and just copy your address in the top right. Yes. And then if you go down to the wallet icon, so that works. And that will send funds. But there's a little wallety icon in the bottom left. There we go. If we go to that and we paste in the address, and we give ourselves like a million dollars or something.
00:05:08.400 - 00:05:35.190, Speaker A: Yeah, oh, yeah, lots of zeros. Send it. There we go. What do we have? We have $100,000 now, so we have plenty of money to tinker around. The other thing I wanted to show is just opening up an incognito window gives you another wallet. So if you're testing things and you want to see if someone can attack something or you want to try, can a bad guy attack? There we go. So we have a different account in the top right.
00:05:35.190 - 00:05:55.694, Speaker A: See that? If you were to pull that down. Yeah, if you pull that down a little bit, we'll be able to see the two different accounts at the same time. There you go. So we kind of have like, green guy and red guy, right? And green guy has a bunch of money, and red guy is a brand new person, and you could use red guy to talk to the contract. And it could be sort of like the adversarial attacker. Let's do that. Let's build it.
00:05:55.694 - 00:06:17.874, Speaker A: Let's set it up so only green guy can update the purpose. So if you copy f six f, if you copy that address, and we go to our smart contract and we save that. So we'll do, what is it? Address public owner. Right. We'll create something and we'll call it like an owner. Nice. And we just say equals that.
00:06:17.874 - 00:06:22.710, Speaker A: You don't even put it in quotes. It's so weird. You just paste in the address. Awesome.
00:06:22.860 - 00:06:26.626, Speaker B: Yeah, that was really weird in solidity when I first realized that, yes, that's.
00:06:26.658 - 00:07:07.478, Speaker A: Kind of a gotcha, that most people first put it into quotes and you'll get in trouble there. So pasting the address in there raw, just like learning all those primitive data types, is a good start. And then a require statement. Right? A require statement is like, level one is can you get primitives and data types? Right. Level two, can you build a require statement? So let's set up a require statement on line 20 that requires that the message sender equals the owner, right? Oh, yeah, it's happening. And so for watchers at home, the message sender is a global variable that tells you kind of who is calling this function. Yeah, throw a message in there too, like not the owner or something.
00:07:07.478 - 00:07:15.734, Speaker A: You do end up paying. Oops. Great. All right, let's ship it. Right. Yarn deploy. Let's see if this thing works.
00:07:15.734 - 00:07:39.150, Speaker A: So now we've changed our smart contract. At first it was sort of like this free for all attestation machine. Anybody can get in and anybody can update the string. We added one line to track an owner. And then we added one rule to say only the owner can set the purpose. And now let's go tinker with it. So how would we test both the happy path and the sad path? So the happy path is easy.
00:07:39.150 - 00:07:48.350, Speaker A: You should be able to just hit send there. And f six f should be able to send it in. It's bow tie Friday.
00:07:48.430 - 00:07:49.700, Speaker B: It's super fast.
00:07:50.150 - 00:08:03.254, Speaker A: Yes. And then let's come in as an attacker. Right. Well, there we go. Red guy. Let's grab some funds for red guy and see if red guy can set the purpose. Oh yeah, and you've got the example ui there too, right.
00:08:03.254 - 00:08:23.646, Speaker A: We kind of show how in react you can track a variable and set the purpose. Let's try it. Let's see what happens when red guy tries to set the purpose. So this is the same thing as using debug contracts, but this is using a react input form where you keep track of the state. This should fail for us. Oops. It works.
00:08:23.646 - 00:08:42.206, Speaker A: All right. So there we go. So we've written a simple rule that says only the owner can set the purpose. This is pretty good. This is okay. But I think we want to think of smart contracts more like a vending machine. Right? Like having an attestation machine that a single account can go to is handy.
00:08:42.206 - 00:09:15.694, Speaker A: But let's make it more like a vending machine. And so what we'll do is we'll make function, the function on line 19 will make it payable. So if you do public and then payable, and then instead of requiring the owner, let's go ahead and comment outline 20. We'll use that later for a withdraw function, I think. But let's create a new require statement here. And instead we're going to trigger off of message value. So let's make sure they pay some amount of money and let's say greater than or equal to.
00:09:15.694 - 00:09:30.930, Speaker A: So if they accidentally over or not accidentally, but if they overpay, we allow it. And let's just do like one ether or something like that. Right. And this is going to teach us a little bit about decimals. And about eth versus way. Yes, go ahead. Another.
00:09:30.930 - 00:09:33.362, Speaker A: Oops. But this one has two extra.
00:09:33.416 - 00:09:34.690, Speaker B: Not very creative.
00:09:36.070 - 00:09:58.090, Speaker A: All right, let's ship it and let's try it. And let's see if it works. Right. What we should see here is that our front end auto adapts and notices that we have this new payable function, and it should give us a new input field. Now the example ui won't work anymore because now we have this value that comes along with it. Right. This isn't going to work because it needs to send value.
00:09:58.090 - 00:10:19.122, Speaker A: But if you go back to debug contracts, see that we now have transaction value. The front end has detected that this is a payable function. So now let's try to set it. So instead of just the owner can set it. We've changed this into a vending machine, and we're allowing anybody who pays to set it. So let's try it. Let's fire it away.
00:10:19.122 - 00:10:40.730, Speaker A: So we'll do hello world or something here, and then we'll send in some value. Okay, I'm at the end of my coffee here. It is murky. Okay, so here we need to do something special here. We need to take this two way. I think it was zero point. Was it one? We don't want to overspend our million dollars.
00:10:40.730 - 00:11:05.582, Speaker A: What was the fee? You almost want to have a price function, so let's do one. Okay, so this is a little gotcha in scaffold beat, and it's here on purpose. So it makes you hit that little green star over there to the right and take it times ten to the 18. Go ahead and click that. Yeah, exactly. So that is the value in way. So for us humans, we want to read it as 0.1
00:11:05.582 - 00:11:33.370, Speaker A: eth because it's easy for us as humans to see if there's an extra zero there. But the machines don't like to mess around floating point math. They are simple little EVM machines. And the more simple the machine, the more decentralized we are because more people can run it. So you're kind of at ods between. We want the EVM to be simple, but we want it to be easy for developers to use. And this is like one of the gotchas there where you've got to go from Eth to way and way to Eth.
00:11:33.370 - 00:11:40.540, Speaker A: You've been in dev a little bit. Am I explaining it correctly? Is there more color to add to that, or is that about right?
00:11:40.910 - 00:11:52.670, Speaker B: I didn't really know that details. I just automatically would change it, like times 18. So that was really valuable. I would just change it to 18. Otherwise it's going to fail.
00:11:53.330 - 00:12:18.150, Speaker A: One good way we can show it off is if you copy this value with all the zeros, and we go back to the smart contract, and then we highlight the 0.1 ether, and you paste this in. So basically, that value is exactly equal to. If you hit paste, it's exactly the same. Right. And you can hit undo, and we can kind of show like, this is what the machines want to see, but the decimal version is what the humans want to see. Does that make sense?
00:12:18.220 - 00:12:21.080, Speaker B: Okay, that's really cool. I didn't know that.
00:12:22.570 - 00:12:35.806, Speaker A: Let's put it back to ether over there, though, because it's confusing. Like, as a human, I see all those zeros, and I have no idea what it is. That's so much easier to read. Yeah. Okay. Let's submit it and see if we can pay to set our purpose. It worked.
00:12:35.806 - 00:13:00.518, Speaker A: All right. And something really interesting happens here. Look at our contract up by the address there. There's now $3 in our contract. So it really is kind of like a vending machine, right? We've deployed this vending machine, and we're allowing anybody to set the purpose and pay a little bit to do so. And now that vending machine is accumulating funds, so we probably need to build some kind of a withdraw. Right.
00:13:00.518 - 00:13:25.434, Speaker A: Let's go back to our smart contract, and let's set it up so we can withdraw. So we'll create a new function, and if you're comfortable with it, do some programming here, we'll create a new function that will be called withdraw. And it won't take any parameters. It'll be public. And what we'll do is we'll copy line 20. The line that we really need is that line 20 there. So leave that comment.
00:13:25.434 - 00:13:33.310, Speaker A: Oh, you got it. You got it. You'll get to it. Yeah. There you go. Backseat driving. How's my bow tie Friday? Backseat driving.
00:13:34.210 - 00:13:37.620, Speaker B: This part is very new to me, so this is not done before.
00:13:39.910 - 00:13:51.080, Speaker A: All right, there we go. And you can clear out the stuff in the parentheses. We won't have them pass anything in. And it doesn't need to be payable either. It can just be a public function. Yes. Awesome.
00:13:51.080 - 00:14:00.122, Speaker A: Yeah. You can remove that new purpose stuff, too. So the withdraw function will be callable. Yeah, we don't need any of that. There you go.
00:14:00.176 - 00:14:01.558, Speaker B: So this way, remove.
00:14:01.734 - 00:14:32.850, Speaker A: You'll need the parentheses, though. It's still a function definition. Yeah, just delete the stuff. Okay, perfect. So now we've created a withdraw function that's basically going to be a button that only the owner can hit. Now we can transfer money to the message sender by doing something like message sender transfer or message sender send. But here's another gotcha, right? There's a lot of these gotchas that we need to learn.
00:14:32.850 - 00:14:56.586, Speaker A: Send and transfer. Do this weird thing with gas limits where if you try to send or transfer to a smart contract, like a smart contract wallet, like a nosis safe, it will actually fail. So there's a special way that you have to use to send eth. And I always just google it. But let me send you the link. We go to sending ether in solidity by example. Let me send you this link on.
00:14:56.586 - 00:15:00.346, Speaker A: Where's the best place on telegram or on our chat here?
00:15:00.448 - 00:15:02.342, Speaker B: Yeah, you can just send it here on the chat.
00:15:02.406 - 00:15:27.986, Speaker A: Okay, I'm going to send it right. If I can find zoom chat, the place links go to die is zoom chat. But there it is. If you follow that link. And this is like solidity by example is just a great reference material for anybody getting in here. See, what they're going to tell us here is that there are these hard coded gas limits. And if you're sending ether where it lands, and there's this whole thing about a fallback function.
00:15:27.986 - 00:16:05.570, Speaker A: And if a smart contract has a fallback function and you send ether to it, it's going to execute some stuff and burn some gas. So the way you want to actually send ether, if you scroll down, scroll, scroll, scroll, scroll, keep going right there, that last line where it says bool sent. And then bytes, memory, data, and the require. If we grab both of those lines there, we're just going to copy and paste them into our smart contract. This is how you send ether in a very. This is the correct way to send ether. And it's totally like, holy cow, do I have to remember all this? No, just go to solidity by example and copy paste it each time.
00:16:05.570 - 00:16:39.018, Speaker A: But what it's doing is we want to replace that underscore two with message sender. And it may complain that it needs to be payable. We'll get to that in a little bit. And then we want to replace the value. So the message value will actually be, that's going to be the amount of money in the contract. And I think the way we do that is we do an address. So you'll do address, open parentheses, this close parentheses, that'll give you the address.
00:16:39.018 - 00:16:58.690, Speaker A: And you do this inside of the parentheses. That's going to be the address of the contract. Now we want to do, on the outside of the parentheses, we want to do a balance. Super weird line of code, but what it says is basically the balance of this contract right there. There we go. Perfect. And I bet it's going to complain that memory data is not used.
00:16:58.690 - 00:17:09.526, Speaker A: You can just delete the bytes memory data, but leave the comma there. The comma needs to still be there so it knows. Yes. That. Perfect. And failed to send these. I think we got it.
00:17:09.526 - 00:17:23.802, Speaker A: I think this is going to work. But there's only one way to find out. Let's deploy it and go tinker with it on the front end. Please work first. Try compiling. Deployed. All right, we did it.
00:17:23.802 - 00:17:54.130, Speaker A: So how do we test this? We'll need to set the value right, and we'll need to pay money in. And then let's test the bad case and let's try to have an attacker withdraw the funds. So first we got to go set the purpose. Oh, you could do it even with the attacker if you go to debug contracts here as e 31. So anybody should be able to set the purpose right, as long as they pay for it. Going back to adversarial parties, basically, everyone's an adversarial party. We're thinking of this as everyone's a jerk, and this allows jerks to coordinate.
00:17:54.130 - 00:18:00.902, Speaker A: Let's go set the purpose. Yeah, just throw something.
00:18:00.956 - 00:18:02.550, Speaker B: Okay, so this is a jerk.
00:18:03.530 - 00:18:04.870, Speaker A: Hey, I'm a jerk.
00:18:05.770 - 00:18:07.000, Speaker B: And they need to.
00:18:08.890 - 00:18:18.954, Speaker A: And take that. There we go. Now this should fail. Saying something like, oh, no, but just set the purpose. Oh, no, that shouldn't fail. That should work. That should totally work.
00:18:18.954 - 00:18:34.298, Speaker A: The jerk should be able to update the value, and if we scroll up, there should be money in the contract. Hey, jerk. And now can the jerk withdraw? That's what we want to test. And this should fail. Right? There we go. Oops, didn't work. Jerk can't withdraw.
00:18:34.298 - 00:18:51.782, Speaker A: Now let's make sure we can withdraw and this thing's ready for production. We can ship it. Let's see. Yeah, you'll scroll down. There it is. Let's make sure that that money goes down and your money goes up. Okay, so, yeah, it works.
00:18:51.782 - 00:19:14.266, Speaker A: Like, we have a vending machine, and we're set up now. So we could allow people to set the purpose in our contract and we can withdraw those funds back. I would propose before we deploy this, since we still have, like, 30 minutes. We got plenty of time. We're tinkering. I think we should add a price curve to this. And that sounds scary, but I promise it's going to be scary.
00:19:14.288 - 00:19:17.374, Speaker B: It does sounds scary. We can just try.
00:19:17.572 - 00:19:37.960, Speaker A: Yes. Oh no, trust me, it's so easy. Okay, so the first thing we want to do, let's head back to our contract. Nice. Let's replace that one ether with like a price Variable. Basically, let's create a UN 256, let's make it public and let's set it equal to that zero point you've got it. And then do public.
00:19:37.960 - 00:19:45.110, Speaker A: And we'll call it price and we'll set it equal to that one ether.
00:19:47.050 - 00:19:48.902, Speaker B: Oh, we got it, right? Ether as well.
00:19:48.956 - 00:19:57.578, Speaker A: Yes. Nice. I think we need one more zero there if we want to. I don't know, maybe we want to charge more. It's up to us. Right. And then you would replace that with price.
00:19:57.578 - 00:20:23.214, Speaker A: Right. Okay, so that should compile if you want to. You could dive over to the command line and do yarn compile just in case, just to check. Like are we happy? Is the compiler happy? So you could do a yarn compile instead of yarn deploy? Yeah, it's just like a handy little check where you're not really even wanting to deploy, but just double checking that your syntax is good. And it is. We're good. Okay, so here's how you make a price curve.
00:20:23.214 - 00:20:46.330, Speaker A: Are you ready? Are you ready? It's actually super simple. So after someone buys. So it'll be line 23. Let's add a new line, one single line of solidity. And we're going to say price equals price times 101. Like 101. Exactly.
00:20:46.330 - 00:21:07.362, Speaker A: And then we'll divide by 100. There we go. Going back to. We don't have floating point math. We need to make sure we get our order of operations here. But basically what we're doing on line 24 is taking the price up by 1% each time someone buys. But let's make sure we get our order of operations right.
00:21:07.362 - 00:21:31.734, Speaker A: Just get it clear in our head. Let's put a parentheses around price times 101 just to make sure that multiplication happens before the division happens. And I'm sure it does, but this makes it very explicit. Like it's going to multiply by 101 and then it's going to divide by 100. And if you do that in a different order, then you're going to lose a lot of digits and it won't work. It won't be working. What the heck is going on? Which is nice.
00:21:31.734 - 00:22:02.914, Speaker A: You can get in here and console log and figure it out. But we already know this is going to work. Let's deploy this thing and see how it looks. And this is like really showing kind of what smart contracts are good at. Right? Anybody with any kind of enough javascript knowledge to be dangerous can get in here and write solidity pretty easily. There we go. So now we've got our contract, our vending machine, it's up, there's a price for it.
00:22:02.914 - 00:22:17.558, Speaker A: You can even copy paste that price into the value field and try setting the purpose and let's see what happens after that. So you could like double, yeah, you add that guy and you could paste that into Trent. There we go, perfect. And then set the value and let's see what happens.
00:22:17.724 - 00:22:19.880, Speaker B: This is the good person. So they can.
00:22:22.910 - 00:22:36.830, Speaker A: There we go. But something interesting happened. Look at the price now, and if you try to just hit send again and see what happens, we should get an error. If you try to send the same thing again with the same price. Yes. Oops, because we're not paying enough value. Right.
00:22:36.830 - 00:23:03.030, Speaker A: So we need to change the price to 101 and let's set it again. Yes, exactly. Copy paste that down. Nice. Awesome. Okay, so now our vending machine is actually on a price curve, and you're allowed to set the purpose, but every time you set the purpose, it gets more expensive for everyone. So as more and more people set the purpose, it's going to become more and more expensive for someone to do that.
00:23:03.030 - 00:23:49.122, Speaker A: And let's make sure we can withdraw, make sure the money comes back to us. This is a price curve, but we could also make a bonding curve instead of a price curve, which means that the money would stay in the contract and we wouldn't have a withdraw function. And someone could get in here and turn something in to get some of this money or something like that. Maybe we're minting an NFT each time we allow someone to mint, and then they could turn that NfT in. You can imagine, we could play around with lots of fun stuff that we could add to this, but this is just showing off. Like, here's how we, as some very normal average programmers, we are not mega brains. We can get in here, we can change a few lines of code, and we can create new financial mechanisms thanks to Ethereum and solidity.
00:23:49.122 - 00:23:49.894, Speaker A: Right?
00:23:50.092 - 00:23:56.422, Speaker B: And this is really cool. I never knew how some of the NFT auctions work, so they kind of increase price.
00:23:56.476 - 00:24:42.002, Speaker A: Like, yeah, oh, we could do it based on time too, if we added a little time function in here where it's like after some certain period the price goes up at some time. Let's do that. We have a little bit of time left. Let's see, how would this work? So we would need to keep track of how about like the deploy time? So let's create a new un 256 public and we'll call it deploy time. Okay. And we'll set that equal to, can we just do block timestamp? Let's see if it'll just let us do block timestamp here. I have no idea if it will, but let's find out because really we'll need to do that on constructor.
00:24:42.002 - 00:24:47.026, Speaker A: But let's see, does it deploy, does it compile? Let's find out. Just go ahead and do a yarn.
00:24:47.058 - 00:24:48.054, Speaker B: Deploy and let's see.
00:24:48.092 - 00:25:09.294, Speaker A: Yeah, exactly. Okay. It doesn't mind it. Okay, so basically when we deploy that deploy time is going to get set up. Okay. So then let's go back to our price function on line 25 at the end here and let's say the price. Let's see what is going to happen here.
00:25:09.294 - 00:25:50.342, Speaker A: So we're going to need to adjust the price based on how long maybe our required goes up. We could, well, the require statement is just making sure they pay the right price. But I'm thinking about how we could adjust the price and I'm just kind of like thinking out loud. Instead of like 101, maybe we multiply by how much time has passed. So let's make a new line right above this. And let's make a un 256. Yes.
00:25:50.342 - 00:26:20.920, Speaker A: And let's call it time passed. Okay. Just kind of separate out our variables and that's going to be equal to block timestamp minus deploy time. Okay, so this is going to tell us how many seconds have passed since then. Okay. Then in our price function where we multiply by 101. So let's replace the 101.
00:26:20.920 - 00:26:54.270, Speaker A: I have no idea if this is going to work. Let's replace the 101 with, let's see, let's make it like 100 plus. I have no idea. Let's do that. Let's do 100 plus and then let's do time pass divided by 60 or something like that. For each minute that goes by, we're going to go up 1% on how fast our price curve ticks, I guess. I have no idea.
00:26:54.340 - 00:26:55.502, Speaker B: I'm interested to see.
00:26:55.556 - 00:27:13.800, Speaker A: Let's find out. Let's find out. Let's compile it. Let's see if it compiles. I could see this totally falling apart too. Who knows? And really what I would be doing is I would probably be like move this into a spreadsheet and tinker around with it. But let's yarn deploy it and let's tinker around with it on localhost a little bit and see what happens.
00:27:13.800 - 00:27:36.144, Speaker A: So within the first minute, I think you're going to be able to set the price without the price going up. Also, the price might go to zero or something. Some weird things might happen. But let's go ahead and just try to set it and see what happens. Yes. Okay. So the price isn't actually going up.
00:27:36.144 - 00:27:55.252, Speaker A: Right. We have to get into the minute and then after 1 minute it should go up by 1%. And then after two minutes it should go up by 2% and it probably will fall apart at some point. Right. We're not thinking about edge cases here. We're just kind of like throwing things out and seeing what happens. But I think we have like, let's try another update.
00:27:55.252 - 00:28:19.856, Speaker A: Yeah, we probably need to wait a little bit longer. Let's see. Is it going to tell us, oh, we have deploy time. You know what a good thing to add to this would have been to make time passed, be a public function that we could read. So we could constantly be asking the price of things. Right. Because this price isn't going to actually be right, it's going to be based on.
00:28:19.856 - 00:28:35.030, Speaker A: Oh yeah, we totally should have that in the price function so we can see it tick up as it goes. Yeah. If we make a new function. So let's make them a new function right there and let's call it get price or something like that.
00:28:35.480 - 00:28:36.230, Speaker B: Okay.
00:28:37.240 - 00:28:56.060, Speaker A: Yeah, I do the same thing for sure. So we'll have a function called get price and it will be a public view. Right. We can mark it as a view function and it returns. And you'll type returns after the view. Yes, and it will return. Let's just have it return the price real quick just to make sure we return.
00:28:56.060 - 00:28:57.224, Speaker A: Sorry, backseat driving.
00:28:57.272 - 00:28:58.910, Speaker B: So much return.
00:29:00.160 - 00:29:17.430, Speaker A: No, I think you do returns up there and then in parentheses you'll do a un 256. You'll say parenthes un 256, I think. Okay, Int. There you go. There you go. Okay, perfect. Let's just leave it just like that.
00:29:17.430 - 00:29:40.350, Speaker A: What we would return is all that stuff. Kind of other than the. Let's see, it would be. No, it's just time passed. Oh, so the price isn't actually going to update until after we set the function. Actually, this doesn't really work that well. Let's delete our get price.
00:29:40.350 - 00:30:05.668, Speaker A: Let's just go ahead and delete 17 through 19. Let's go back to our app and just see that it has gone through. Just because the price isn't actually dynamically changing. The price only updates whenever someone runs an update. But let's go back over and let's try to set the purpose now. And it should let us, I think, at the starting price, but then we should see the price jump up. Let's go ahead and set that and see what happens.
00:30:05.668 - 00:30:26.968, Speaker A: There we go. It actually went up 2%, right? Yeah, there we go. So go ahead and set it again and let's see that. It should kind of stay at a kind of 2% increase. But then if we wait another minute, it's going to start increasing at 3%. So this is like, there we go. And now it's at 506, right? I don't even know if.
00:30:26.968 - 00:31:02.112, Speaker A: Yeah, I think that went. This is really weird, but it's basically a price curve that gets steeper and steeper as time goes on. Right. And it gets to the point where after ten or 15 minutes, you're increasing ten to 15% per purchase. Okay, let's say we've invented a new mechanism here, some kind of vending machine where people can attest to something, but the price curve goes up really steep after time goes on. Let's say we've built our app and we're ready to deploy this thing, right. This is kind of where Scaffoldeth really shines.
00:31:02.112 - 00:31:11.560, Speaker A: It allows us to tinker, but it also allows us to deploy something that someone can play with. So are you ready to deploy this thing live? What network should we go to? We have to decide.
00:31:12.140 - 00:31:14.216, Speaker B: Think we can go to polygon, right?
00:31:14.318 - 00:31:15.928, Speaker A: Okay, sure. Yeah.
00:31:16.094 - 00:31:17.204, Speaker B: Good facade.
00:31:17.332 - 00:31:37.472, Speaker A: Yes. So go ahead. And so when we're deploying locally, it doesn't cost us any money. Right. When we deploy to Polygon, we're going to have to create an account and we're going to have to fund that account. So here's how you do it. You type yarn generate over there in your command prompt instead of.
00:31:37.472 - 00:32:04.410, Speaker A: No, it will be over on the left, right there. So instead of using some account or copy pasting some private key around yarn generate is going to create a mnemonic for you. So if you just hit enter there, basically a twelve word seed phrase is going to get created in your hard hat folder of your project. And there's the account seven bac. Right. So we'll need to fund that with a little bit of polygon. And if you paste it into chat, I can do that real quick.
00:32:04.410 - 00:32:15.470, Speaker A: Or what you can do is type yarn account and it'll give like a QR code, which is even easier. And I can use a punk wallet. Let's see. Do I have some? Yes, go yarn account. Let me see if I have some.
00:32:16.960 - 00:32:19.432, Speaker B: And we don't need like our hard hat chain anymore.
00:32:19.496 - 00:32:38.964, Speaker A: This is not right. Let's leave it up and running just because who knows? If the app is like, talking to that right now, it might fall apart. It's okay to just leave it for a second. If you can show me that QR code, I can send you some polygon. There we go. You'll need to make it a little bigger. Yes, got it.
00:32:38.964 - 00:33:02.892, Speaker A: Okay, sending you, I don't know, $5 of polygon. That should be enough, right? Sending it from my punk wallet. Another scaffold eth build. And hopefully you should have some polygon by now. And so to deploy, we'll do yarn deploy, and then it's network Polygon, I hope. Please work. Please work.
00:33:02.892 - 00:33:22.230, Speaker A: Sometimes the polygon RPC yells at us. Sometimes some other things happen. Do we have value? Whole bunch of things. Let's see. It's at least like waiting, right? Something is happening here. I wonder if we need to hard code gas or there could be a whole handful of things that could go wrong here. It's trying.
00:33:22.230 - 00:33:40.920, Speaker A: So it hasn't even given us a transaction id back. I'm worried that maybe our gas price is hard coded. Oh, we got a transaction id. That's pretty good. So at least the network liked it. So we're waiting on that. Okay, so let's just wait a little bit longer for this to deploy.
00:33:40.920 - 00:34:08.512, Speaker A: To deploy. We basically created an account and we funded it, and then we did a network on our deploy, and it sent it to that other network. So the other change we need to make is in our react app. And we really haven't tinkered around much with the react app. But if you head to that side and we go to our source app, JSX is what we're looking at. That main file is app JSX. That one, yes.
00:34:08.512 - 00:34:32.488, Speaker A: And this file is pretty big and a little bit overwhelming at first, and it contains a ton of stuff and a bunch of handy hooks. But all we need to change is line 56. We just need to point the satellite. Right now the satellite is pointed at localhost. We need to point the satellite at Polygon. Now if we go look at our front end, let's see what it looks like. Let's go to our local host front end in the app, and it should say Polygon in the top right now.
00:34:32.488 - 00:34:44.184, Speaker A: It does. Okay, cool. So now our whole app is pointed at Polygon. And if you go to debug contracts, it's probably still waiting for that contract to get deployed. Yeah. Okay, let's do this. Let's jump back to our deploy.
00:34:44.184 - 00:35:08.230, Speaker A: And if you hit CTrl C and just up and enter, let's just kill that. Yep. Control C and then hit up and enter and let's resend it. And by sending it again, the hard hat deploy plugin from Wigawag is going to say, hey, you've already deployed this. You want to speed it up. And what we want to do is say yes to that if it allows us yes. Let's go ahead and hit increase gas and see what happens.
00:35:08.230 - 00:35:19.560, Speaker A: And we're waiting a little longer. You could even kind of copy and paste that transaction id into Polyscan and we could go look at it on the polygon.
00:35:20.700 - 00:35:22.280, Speaker B: I think we got a contract.
00:35:23.180 - 00:35:43.056, Speaker A: All right. Okay. Set up and we were. Okay, fantastic. So now we have to do one other thing to get the build going. If you go to your command line and type yarn build, that's going to start getting a static site generated for us. And while that's running, let's go Tinker with the contract and see how it works.
00:35:43.056 - 00:36:15.796, Speaker A: So let's see who is the owner. So basically, your burner wallet is the owner of this thing, right. So we're going to need to send some polygon to that. Also, if you click the little wallet icon in the top right, the little wallety thing, that one right there. And you click receive and I click scan with my burner wallet. Let me see if I can send a dollar to dollar of polygon to you. And then you'll have money for gas.
00:36:15.796 - 00:36:27.070, Speaker A: Let's see if that goes. So, hopefully the burner. Sending it from my burner wallet again. Punk wallet. Punkwallet IO. Hopefully that dollar comes in here in a little bit.
00:36:28.560 - 00:36:36.780, Speaker B: Yeah, I think the burner wallet is really helpful. You don't really need to get with metamask. And all the siding over there is quite confusing.
00:36:36.940 - 00:36:51.284, Speaker A: At this point, though. We want metamask. Right. Like, as soon as you go to a public network, you want to use metamask because it's a lot quicker. That sixty two cents is going to be gone forever. It's basically $0.62 lives on a private key that's in your browser right now.
00:36:51.284 - 00:37:06.660, Speaker A: If you accidentally hit private key right now, everyone will have it. Right? So go ahead and close that out. You've got money for gas. We're good to go. Let's go try to set the purpose and see what happens. And this is on a live network, so. Yeah, gone.
00:37:06.660 - 00:37:35.284, Speaker A: Exactly. And you'll pay that amount? Yes. And we hit send and let's see what happens. I wonder why we use block native notify. They must not be on polygon yet. Normally when we go to a public network, you get a nice dialog there that tells you kind of the transaction is happening. I feel like we're not getting much feedback on, but I think it's going to go, oh, here's a cool thing.
00:37:35.284 - 00:37:53.400, Speaker A: So go ahead and click your address up there in the very top right. Just click on the f six f. See that? Just click the address right over to the left of that. Right there. Just click on that address area. Not the copy paste, but just the address, the zero x. There you go.
00:37:53.400 - 00:38:32.852, Speaker A: What I wanted to show here is that when we change that satellite from localhost to Polygon, the whole app changes. And anytime you click on any address in the app, it knows to go to Polygon scan instead of some other block explorer. So that just shows another thing that comes out of the box with Scaffold eth that basically creates this production ready app for you once you're ready to deploy it. But I was going to look and see if that transfer happened. But I don't think the transaction with a smart contract has happened yet. If we hit reload, maybe we'll see that new transaction happening. No, not yet.
00:38:32.852 - 00:39:18.900, Speaker A: Okay, so before we end, we're kind of getting to the closing time. I want to go back to your command prompt. We've done a yarn build and we've created a static build for our app. But now if you do yarn surge, it's basically going to push and you could do ipfs, you could do s three, you could do versailles, all sorts of different places you can deploy this thing, but if you just hit yarn surge and hit enter, it might ask you for some credentials you might have to type in. Yeah, if you just give it one of your generic emails and junkie passwords. Just something like all this is doing is creating a local store so you'll own whatever the domain is that we deploy. We're going to deploy to some surge domain? Yeah, sorry, I don't know doxing we can go to.
00:39:18.900 - 00:39:42.830, Speaker A: Yeah, you got it. You got it. And then some junkie password and now you're going to own whatever domain dizzyplayground surge. That's a good one. So you'll need to hit enter there for that thing to update. It hasn't uploaded yet. Basically it's about to go, but over in the ClI, in the command prompt, if you hit enter one last time.
00:39:42.830 - 00:40:11.590, Speaker A: There we go. Now it's basically uploading your dap, right? So we've deployed our smart contract, and now we're deploying an app that talks to that smart contract. And now anyone in the world can go to dizzyplayground surge, and they can use our vending machine that we've created, and they can pay real money, like matic polygon money on a price curve for our attestation box that we built randomly in 40 minutes. Right. Let's see if dizzy playground is up. I'm getting on, too. Here we go.
00:40:13.720 - 00:40:15.444, Speaker B: Okay, so it's up.
00:40:15.642 - 00:40:43.040, Speaker A: Isn't that cool? Like, the whole app goes. Yes. So, with Scaffold eth, you can kind of tinker with your smart contracts. You can kind of test your assumptions. You can get live feedback and play around on local host, but then when you want to go pro or you at least want to get that prototype out there for other folks to use and show it off, obviously, we'd build a little bit better front end. We wouldn't stick them with this thing, but it's basically there. You just need some react knowledge, and anybody can do react.
00:40:43.040 - 00:41:03.008, Speaker A: The hard stuff was the solidity that we wrote, and that didn't take a lot of time. Okay, I am going to attest to something. Let's see. I'm going to go to debug contracts. Let me see if I can share my. Can I steal away the screen sharing from you for a second? Okay, you have it here. We're building unstoppable apps.
00:41:03.008 - 00:41:23.644, Speaker A: I'm going to connect my metamask or wallet connect, or any app that I want to connect. And then, let's see. Polygon. We need to see that. Nice network switch there. Right? It noticed that we're on the wrong network, and it switches it, and all you had to do was set that one variable that said, we're on Polygon now. And let me get a different.
00:41:23.644 - 00:41:35.970, Speaker A: I want to get a different account here that actually has somatic in. Oh, I think I need a reload. Let's see. Oh, I have to connect. Dang it. Metamask. I'm doing it wrong.
00:41:35.970 - 00:41:55.120, Speaker A: There we go. I am on dizzyplayground. Surge logged in as Austin Griffith eth. All right. And I'm going to pay this much. I don't think your transaction went. I feel like maybe we're hard coding the gas.
00:41:55.120 - 00:42:06.560, Speaker A: That's what's happening. Okay. Yeah. This isn't going to work. Okay. So we have to redeploy your app with a higher gas price here. Actually, I'm going to hard code the gas.
00:42:06.560 - 00:42:30.672, Speaker A: I'm just going to set it here. I'll get in here and. Oh. Huh. Metamask did it automatically. Okay, so thank you, metamask, for being awesome and not listening to our gas price that we set. That should probably update the app in a second, and I'll send it back over to you if you want to share one last time.
00:42:30.672 - 00:42:53.204, Speaker A: I think what we need to do, let's see if you can see the update on your side. I'm not sure. Yes, it did. It says, editor, you rock. And now the price is at. If you go ahead and reload that, the price is all the way up to 107, right? Yes. All right, so the burner wallet isn't going to work right now because the burner wallet is hard coded to one guay.
00:42:53.204 - 00:43:20.930, Speaker A: You can see in the bottom left, we're hard coding. There are some environmental things that are going to be different between chains, but basically, any EVM compatible chain, you can kind of just, like, point this thing out and fire at it. Here we have one guay, hard coded. So our burner wallets are going to fail, but our metamasks will work great. Yeah, I don't know. Do you want to maybe connect a metamask and try doing one more update to this thing? Do you have one with some?
00:43:22.180 - 00:43:25.872, Speaker B: I don't have some with. It's on Mainet, right?
00:43:26.006 - 00:43:37.912, Speaker A: Yes, it is on main net. It will cost you like, $5 to do the update. Plus, you're paying some money in, right? But you can withdraw. You're the owner, so you can go withdraw some funds. Oh, no, it's the burner wallet. That's the.
00:43:37.966 - 00:43:39.320, Speaker B: It's the burner wallet.
00:43:39.820 - 00:44:00.000, Speaker A: What's interesting here? Why isn't there value in the contract, though? I don't understand why the contract doesn't have some eth in it. Didn't we already send. That's strange, right? Didn't I pay in? I wonder what's happening there. Let's go look at the contract on poly.
00:44:01.220 - 00:44:05.410, Speaker B: Did it give us, like, a new contract when we redeployed? I don't know.
00:44:06.100 - 00:44:08.924, Speaker A: I'm not sure either. Polyscan.
00:44:08.972 - 00:44:10.000, Speaker B: Polyscan.
00:44:16.040 - 00:44:28.436, Speaker A: Let's go check that out. I'm not sure why that. Yeah, it has 0.1 Maddok in it. Okay, so something's just weird with that contract thing. The money is in there. Our app is just not displaying it.
00:44:28.436 - 00:44:37.128, Speaker A: Right. For some reason. I'm not sure. What that is. Some bug. Some bug that has nothing to do with you or anything else. We were able to build our app, and that's the awesome part.
00:44:37.128 - 00:44:46.060, Speaker A: So, yeah, good work. Etta, do you have, I don't know, some questions? I don't know, just comments on this. How'd we do? We deployed, adapt.
00:44:46.400 - 00:45:20.360, Speaker B: I'm shocked on how fast we did it. And I'm by no means, like, the greatest developer at all. I'm just learning this. So I'm super surprised that we could build the app, increase the price on a very weird exponential curve, and kind of have it on, like, polygon right now. I did not go this far. I was just using scaffold, basically, just, like, adding some required statements at all. But I'm super surprised on, like, anyone can go and change the name over here if they want to, but please don't.
00:45:20.860 - 00:45:49.564, Speaker A: And it's real money on a real blockchain. We need an adult who is doing this. It's crazy. We did so much. I feel like, yeah, this is just a great look at how you, a developer at home, can quickly prototype with Scaffold ETH and tinker around and, yeah, sorry about my backseat driving. With a little bit of backseat driving, whip up a pretty quick contract with a brand new financial mechanism. So great work, Etta.
00:45:49.564 - 00:45:51.360, Speaker A: You rock. You rock.
00:45:51.940 - 00:45:58.500, Speaker B: Thank you so much for the backseat driving. That was super helpful. And I'm really shocked on what we did in 40 minutes.
00:45:58.650 - 00:46:07.460, Speaker A: Yeah, let's do it again. I think we should do this again. Let's take on some more challenges. Let's be thinking of what we want to build next and do another one of these if you're up for it.
00:46:07.610 - 00:46:13.430, Speaker B: I'm super up for it. And this was really not recorded very first time. I'm shocked. Really.
00:46:14.120 - 00:46:15.364, Speaker A: We did it.
00:46:15.562 - 00:46:16.740, Speaker B: Scaffolding.
00:46:19.120 - 00:46:23.164, Speaker A: Thank you. Thank you. Thank you, Edda. Happy bow tie Friday. See you.
00:46:23.362 - 00:46:24.296, Speaker B: Thank you. Bye.
