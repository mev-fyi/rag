00:00:00.970 - 00:00:52.106, Speaker A: What's up? I'm Austin Griffith, and this is my third meta, Txio screencast. We're going to be kind of bringing everything together from the previous two. So just to cover those real quick, the first was like a bouncer proxy. It's an identity that's a contract on chain that you submit meta transactions to, and then it unpacks those, recovers them, and then executes the transaction on chain. It's a way for you to have a device that doesn't have any ether on it, signing metatransactions and having them executed on chain. The next one was a token subscription system, so it kind of pulled out the nonce that you would normally have to prevent replay protection. To prevent replay in a metatransaction, you have a nonce that says you can only play this once.
00:00:52.106 - 00:01:30.666, Speaker A: Well, we want that to actually happen again, right? So with a subscription, we want you to package up one single metatransaction, and then we want to resubmit it on some kind of period. So then we use this timestamp nonce trick, and in combination, we also use the ERC 20 standard for approve allow. And that kind of got us started on a proof of concept for EIP 1337 lead and EIP nine four eight. So today we're going to bring all those together for delegated execution subscriptions. And that's a lot to unpack. So let's just go check it out. So if you go to BYOC, bring your own contract, is what we've been calling it.
00:01:30.666 - 00:02:08.870, Speaker A: You can deploy your own contract. But let's talk about what delegated execution subscriptions means. So it's like you want an identity, and you want to be able to transact through that identity using your devices that don't have any eth. But you don't want to just do one transaction. You want to be able to do that on a recurring basis without really having to mess with it. Basically, you incentivize metatransaction layer to submit the stuff for you. So the first thing we do once we have an identity is charge that identity up with some fake testnet eth.
00:02:08.870 - 00:02:29.782, Speaker A: So let's send it 0.5 eth. Cool. Confirm. Okay, so once the block gets mined, we should notice that this Guy gets charged up. Now let's talk about those cold versus hot wallets. Hot wallet sounds like the worst weird euphemism.
00:02:29.782 - 00:02:52.946, Speaker A: Anyways, here's what you would consider your cold wallet here. And then this is what you would consider your hot wallet and your cold wallet there. Our identity just got charged up. We could be sending tokens too, but we're just going to work with ETH for now because we already did token subscription. So your cold wallet is, it's got all your eth in it. You don't really want to be moving that private key around. You don't really want to be even unlocking this very much.
00:02:52.946 - 00:03:26.906, Speaker A: So we're going to just get this contract deployed, we're going to get it filled up with some ETH and then we're going to shut off this cold account. But what we need is some hot accounts that we could use to make transactions and stuff. So I can see this little blocky there and is it there? You can kind of see them. Let me just click into this contract and I can do the same thing over here. So I'm going to click that one. I'll do the same thing on my phone. Okay, so I'm in there and then if we scroll down we should see sign contract.
00:03:26.906 - 00:03:56.562, Speaker A: I'm going to do the same thing here. I'm going to hit, let's scroll down so we can see it show up. So it's just a signature display, right? Like do you trust this contract? We do approve fingerprint and boom. Okay, so that's just a way to kind of get the address in easy. The signature is not really a big deal because we're not really doing any verification at this point. We're just trying to get that id across. Okay, so now we have these two ids that we want to, these are our hot wallets.
00:03:56.562 - 00:04:25.662, Speaker A: We want to give them access and we do that through a whitelist system. So since this is my identity, I'm the owner, but I can whitelist other accounts to interact through that. And I'm going to do this one and this one you can kind of see like as I click this little identicon changes. And then this is like my control of whether or not I want it to have access. So I can revoke access. So say I lose my phone or it's just old, I can go ahead and revoke access. Okay, so we should see transactions going through.
00:04:25.662 - 00:04:57.770, Speaker A: If you've used my dapperatus system, these shorter ones are blocks and the longer ones are transactions. And we can even see events here. So we can see that that guy is true and then the other one is true. So now both my phone and this guy have full access to create pause cancel subscriptions through this contract. And so I can just bookmark this on my phone and head out. So then we can kind of close down our cold wallet. We shouldn't have to mess with it very much.
00:04:57.770 - 00:05:31.286, Speaker A: We can kind of just interact with this using our hot wallet. So let's look at the most basic subscription I can think of, and that would be just sending some eth. So who should we send it to? Well, this is going to be weird, but we're just going to send it back to our cold wallet. Not exactly. There's yellow guy, so he's actually the owner, but it doesn't matter. So we're going to say once a minute we're going to execute a call that goes to this address, and then we're going to give it a value of one. There we go.
00:05:31.286 - 00:05:56.480, Speaker A: And you can hit that to get you into way. And we are ready to go. So let's hit subscribe. Now, this is going to be an off chain transaction, right? It's just going to package up all that information that we have. Then I'm going to sign it. That's going to go back to the relayer network, and now it should be active. We should start to see slowly, we should start to see ETH drain out of this account and go into this account.
00:05:56.480 - 00:06:23.746, Speaker A: But that's really not that interesting. And also, who's paying for these transactions? Right. Well, there's this miner down in the bottom, right. And he's incentivized, but let's actually incentivize him. And that would be with some eth. So we're going to say the gas token is zero and let's use five and do that. And then the gas payer I leave empty.
00:06:23.746 - 00:06:52.430, Speaker A: And that signifies that it's going to be the contract that's going to pay for it. But you can use some tricks. If you're using tokens, you can set the payer to the contract, you can set the payer to the owner, or you could set the payer to some third party that then can approve these, which is kind of a really neat concept. If you wanted to give a bunch of proxies the ability to use your tokens, like if you were a single entity and there were a bunch of these. But anyways, it works just like an ERC 20. It's going to move those and pay for those. It's all up to the crypto economics of the system.
00:06:52.430 - 00:07:30.122, Speaker A: Whether or not those desktop miners want to submit your meta transaction or not, they can get it from whatever the network is that you submit it to. And then they can kind of unpack it and decide if that's a worthwhile transaction to make. So let's even just go ahead and pause the current subscription. So, notice I'm doing this with my cold or my hot account, right? Basically, this guy doesn't have, he does have eth, but he's not spending any eth here. So I'm going to sign that. Right? So I'm out at the bar and I realize that my subscription to Netflix is still active and I want to shut it off. I just hit pause and I hit save.
00:07:30.122 - 00:07:57.346, Speaker A: That's going to submit that meta transaction and that's going to shut it down. So let's get a new transaction going that's actually going to incentivize the workers or the desktop miners to submit it. Okay, there we go. Okay, so now we've got one pause, we've got one active, and you can kind of see the details. There's a lot of room for improvement in this disgusting Ui. And there's a lot of neat analytics that you could get from this. Right.
00:07:57.346 - 00:08:33.470, Speaker A: You can see how your subscriptions like how much they've spent, how much total, what it's moving, who's paying for it, stuff like that. So now if I hit reload, we can see that we've got one paused, we've got one active. We can see the executions happening here. And we should see this slowly drain. No? Yeah, that's right. So we should slowly spend ETH and this should slowly fill up. And this guy down here, the miner, what is he at? 08967, he should actually also gain etH, right.
00:08:33.470 - 00:09:02.054, Speaker A: So he's incentivized to submit these, and your Transaction is going through. And it's all with an account that doesn't have any eth or isn't spending any eth. It's just with any device that you've kind of signed it and whitelisted. Right. Okay, so what else can we do? This delegated execution stuff is really powerful. There's more stuff here. So let's say once a day we want to execute something a little more advanced.
00:09:02.054 - 00:09:20.990, Speaker A: So I've also deployed an example contract. Where is it? Oh, yeah. So all this stuff is obviously open source, verified on Rinkabee. You could go check it out. I think we just saw a transaction go through there. Yes. And nine, eight, seven.
00:09:20.990 - 00:09:48.346, Speaker A: So I don't remember what it was, but I'm assuming that that miner is actually making money off these transactions. So ETH is flowing from our contract to some account which happens to be the owner, and the miners are getting incentivized for it. So now let's jump to where is the example contract? Let's see here. Code. That is not it. What if I just search example on. Oh, man, there's going to be a ton of them.
00:09:48.346 - 00:10:03.550, Speaker A: Okay, I can do this another way. Let's see. Let's just cat d getting into the command line here. Example address. There we go. Okay, let's grab that. Dude.
00:10:03.550 - 00:10:23.762, Speaker A: Let's throw him into Rinkabee just so I can see it. Cool. There's the code. So the example contract, it's really simple. It's just the same as the example contract I use for the bouncer proxy. It's like this counter that you can add one to perfect example of a state machine. But I also added this announce function in there.
00:10:23.762 - 00:10:50.934, Speaker A: And there's also an announce event in the subscription contract. And so we're going to use delegate call to mess with that. But let's just do a normal call to a normal contract to show that we can do that. So let's create a new subscription that happens. Actually, let's go once every two minutes. Right? All right, we'll do a call and then we'll paste in. Do I still have that there? Okay, we'll paste in the address of the example contract.
00:10:50.934 - 00:11:20.210, Speaker A: So whoever you want to go interact with. And this is really cool. It jumps on the ether scan API and it pulls down the Abi. So now you can say, okay, what functions do we have here? We've got add amount and I meant to type announce, but it's accounts anyways, we want to do add amount and now it pulls up this and we're going to add every two minutes. We'll add five to the count. Okay. Should we go ahead and pay a little? Yeah, let's incentivize the miners.
00:11:20.210 - 00:11:42.762, Speaker A: So we'll say we're willing to pay five. Might have been. He's making two on each one of these. So if I did five, let's do four. He'll still make one given the gas stays the same and all that stuff. And amount is 50. Oh, we need to boop do that.
00:11:42.762 - 00:11:56.914, Speaker A: Okay, so gas token could be a token. Zero means eth. I think we're ready to go. Once every two minutes. We're going to call this function on this contract. I think I have everything, right? We'll see. Awesome.
00:11:56.914 - 00:12:19.270, Speaker A: Okay, so now we want to go watch that example contract. So here it is. But we should be able to go to read contract. Okay, read is zero. So we'll just keep an eye on that count. Okay, let's do some other demos here just to get it all out of the way. So how about delegate call? So same contract.
00:12:19.270 - 00:12:57.160, Speaker A: We're going to do a delegate call every five minutes. And what we're going to do is do account, which is supposed to be announce, which means since it's delegate call, it's going to operate on the storage of the proxy contract, not the example contract. Yeah, you get the idea. And let's just put in a message here, hello world. And convert that to hex. Okay. So now every five minutes we're going to delegate call to the example contract, this announce function that should create an event.
00:12:57.160 - 00:13:28.842, Speaker A: And we're going to assume that all the economics in play here are good. We're going to pay that dude to submit it and hopefully this works. All right, cool. So now that's another contract. So we have three active contracts right now. And what we're going to watch for is this announced a fire off and that should fire off every five minutes. And the reason why we're going to see it here is this guy's listening to the events on the proxy contract, not on the example contract.
00:13:28.842 - 00:13:50.206, Speaker A: And that's where it's going to get called. So that's kind of neat, right? It operates within the current contract using the code from the example contract, which is really cool for. There it goes. There's, the first one was announced. It went through and it worked. Okay. So that's really cool for upgrading like proxy check out delegate call proxy patterns.
00:13:50.206 - 00:14:18.990, Speaker A: It really neat stuff. A little bit over my head. Okay. So now the last thing we can do, which I don't even really know why you would want to do this, but we're going to, every 20 minutes we're going to create a contract. And so there's no two address here. And what I'm going to do is just take the bytecode from that example contract. Oh, it's being weird.
00:14:18.990 - 00:14:41.046, Speaker A: Okay, let's just go get the bytecode. Right? Can we get it from, oh yeah. Is our account going up? Hooray, it's ten. What a good demo code. I bet I can get the bytecode right here. There we go. So let's grab the bytecode from the example contract and let's remove this and say zero x, all of this.
00:14:41.046 - 00:14:58.086, Speaker A: So now we're going to have to really incentivize this dude. Let's pay him like 0.1. Okay, so we're going to pay this dude. Oh, whoa. Oh no. Good thing I caught that. That would have gotten real weird.
00:14:58.086 - 00:15:28.562, Speaker A: Whoa. Speaking of weird, does this look good? Yeah. Okay. So I think that's good. So that is basically all of the bytecode of the example contract pasted in as the data bytes of this transaction. And we're using the create operation and I borrowed the call, delegate call and create from the gnosisafe contracts. Those are, speaking of over my head, those are amazing.
00:15:28.562 - 00:15:46.346, Speaker A: Just gorgeous contracts. Check them out. But I borrowed their executor. I think they're kind of leading the way on all this stuff. So I'll just kind of use their stuff as much as I can. So we are going to deploy a contract every 20 minutes for some reason. I'm sure someone out there can figure out why you would want to do this, but here we go.
00:15:46.346 - 00:16:05.102, Speaker A: And we're going to do it with metatransaction. So I'm doing this from the bar, from an account that doesn't have any eth in it that I just signed on the way out the door. Okay. So how do we know that works? Okay, we'll watch for the contract creation event, which is another thing. So we're just going to wait for that to get deployed. Let's watch when. See what happens to the.
00:16:05.102 - 00:16:19.510, Speaker A: Look, it already worked. And the miner's gas stayed like exactly the same. Is that right? Keep an eye on that minor gas. Oh, it's going to be 20 minutes from now. I don't want to wait again. Let's just do every minute. This is going to get real weird.
00:16:19.510 - 00:16:38.006, Speaker A: So every minute we are going to create a contract with that bytecode and we're going to pay quite a bit for it. Subscribe. Subscribe. There it goes. Okay. And let's go check this contract. I'm assuming I can just grab this and go into Rinkibee.
00:16:38.006 - 00:16:42.074, Speaker A: Come on. Yeah. It worked. Look at that. There is the contract. There. It was deployed.
00:16:42.074 - 00:16:58.402, Speaker A: The contract creator. Who is the contract creator for? It's not that dude. It's this dude. Okay. So the proxy contract is the owner or the creator of that contract. How cool is that? That's freaking sweet. I didn't even know that was going to happen.
00:16:58.402 - 00:17:16.760, Speaker A: Okay, so wait, where is that? Let's paste it in again. So here is the contract we just deployed through. And this same contract is going to get deployed once a minute now by the miners. But it's going to come from our account. That is really sweet. I didn't think that would come from my account. But there's the count.
00:17:16.760 - 00:17:39.390, Speaker A: It looks just like the example contract. How much did it cost to deploy? Eight. Oh man. So we're paying him zero one to deploy it, and he's only paying zero zero eight. So the desktop miner is making pretty penny on this. All right, so that is basically delegated execution. Check out EIP 1337.
00:17:39.390 - 00:17:50.780, Speaker A: Check out EIp nine four eight. Check out all my GitHub stuff. Hit me up on the tweets. Thanks for hanging out. Metatransactions, lead.
