00:00:03.210 - 00:01:06.020, Speaker A: Welcome to uncommon core, where we explore the big ideas in crypto from first principles. This show is hosted by suzu, the CEO and chief investment officer of three arrows capital, and Me hasu, a crypto researcher and writer. Today I'm sitting down with anish Agnihotri who is a research associate and colleague of mine here at paradigm. Anisha has a fascinating backstory from starting out as an entrepreneur at a really young age and later going very deep into skin trading, a skill that then transferred very well to today's NFT ecosystem. In fact, we talk a lot about the NFT ecosystem and the structure of both the primary and the secondary markets and NFTs, how they work and how they are going to develop in the future. Anish also shared some very actionable advice with me on how to learn and how to build projects in crypto overall. We had a really deep and fascinating conversation, and I think you will enjoy it a lot.
00:01:06.020 - 00:01:11.874, Speaker A: Hey, anish, welcome so much to the show. How are you doing today?
00:01:11.992 - 00:01:13.346, Speaker B: I'm doing well. Thanks for having me.
00:01:13.368 - 00:01:30.618, Speaker A: Hasu, you are only 19, recently turned 19. But you have been in crypto longer than me and longer than most other people, I would assume. So can you give us a bit of your background? So how did you find crypto? Like, what did you do in your life before?
00:01:30.784 - 00:01:48.366, Speaker B: Sure, yeah. I'll give you the two minute summary. My name is Anish. Of course. Nice to meet everyone. I'm a researcher at paradigm. I moved to north America when I was four years old from India, and my father was a traveling consultant, which meant I moved from place to place a lot.
00:01:48.366 - 00:02:47.146, Speaker B: By the time I was eleven or twelve, I had went across 20 or 25 elementary schools, switching from one place to another. What that meant was that I started to use technology, my laptop, that I would carry around everywhere as a way to stay connected with friends and just be on the internet at all times. That was really beneficial for me, frankly speaking, growing up, because it meant I got exposed to a lot of the online communities to Reddit, to Twitter really, really early on in my childhood, and when I was ten or eleven, decided I wanted to make some spare cash. As any kid at that age, you want to make some cash, you want to buy cool things that your friends are buying, and I figured I might as well do something, learn something out of it, and then make money. And for me that was learning how to make websites. So I learned how to code from online places and then started to make websites for people on reddit, on places like r fourHire. Now, as a kid, the only way to get paid really is places like PayPal.
00:02:47.146 - 00:03:16.518, Speaker B: And so that's what I initially started with, where I would get 100 $200 for each website and that would be incredible. $200 for an eleven year old is crazy amount of money. And what happened though, was every couple of months I'd get banned from PayPal to the point where now I'm lifetime banned from PayPal and can't create an account for creating too many when I was a kid. And what that quickly meant was I had to find another way to get paid because there was no way I was stopping programming and getting paid, but I could definitely move away from PayPal.
00:03:16.614 - 00:03:19.100, Speaker A: Couldn't you have used your parents account?
00:03:19.630 - 00:04:05.930, Speaker B: So as a kid, part of it was I didn't want my parents to know that I was making money on the internet, right? Part because it's very weird for a kid to be making money on the internet, in part because I thought it might be like a distraction, right? They might think I wasn't doing schoolwork, I was spending my nights building websites for people on the internet and they wouldn't let me. And so part of the motivation was I didn't want to tell my parents. I had to use a payment method that didn't require any identity. And that's where bitcoin really came in the picture. So in 2014 or so was when I first got into bitcoin. It was right around when it was first blowing up on Reddit, and there were a bunch of tip bots and change bots, which was really beneficial for me because it meant that a lot of people on Reddit had exposure, and that was the primary place where I found people to build websites for. So it was easy for me to get paid in bitcoin.
00:04:05.930 - 00:04:44.978, Speaker B: And so 2014, 2015 I built websites for people getting paid in bitcoin. 2016, I entered high school, took some of the money I had made making websites and bought graphics cards and decided I'll try mining. And so I bought six R 9280 X graphics cards and set up a heater in my room for basically a year, which is a ton of fun. A great learning experience. Got me into the Ethereum community early on. From there decided let me mix some of my passions, let me put programming and crypto together, went to a bunch of hackathons. Back then, consensus had a huge presence in Toronto where I lived, which meant that it was really easy to get access to people and learn from people in the community at events.
00:04:44.978 - 00:05:28.722, Speaker B: So joined Gitcoin in 2018, did a bunch of bounties, got to work with cool people, and eventually found myself getting deeper and deeper into the crypto development rabit hole. In 2019, for a brief period of time, I went and interned at One Password, the consumer password management company, because I thought, maybe there is something beyond crypto and I should force myself to explore that. What I quickly realized, though, was that for me, there is nothing beyond crypto. I enjoy it far, far too much to do anything else. And so I see it as a beneficial summer where I learned I definitely want to be doing crypto for the next 510 years of my life. That following summer, decided to get into the crypto space. I applied for an internship at Polychain, and the way that I went about doing it was funny, actually.
00:05:28.722 - 00:05:48.726, Speaker B: And it speaks to, I guess, the testament of Crypto Twitter, where Naraj, who's a general partner at Polychain, had put out a tweet of how he had applied for a job to Snapchat in the 10th grade that I thought was fascinating. So I copied the same format and messaged it to him via Twitter. And that's how the conversation got started and eventually found myself at Polychain that summer.
00:05:48.918 - 00:05:50.780, Speaker A: Do you remember what he said?
00:05:51.550 - 00:06:23.458, Speaker B: Yeah. So I think if I pull up the message, it was something like he had sent three lines to Evan Spiegel at Snapchat in the 10th grade, where he said, like, hey, my name is Naraj, I'm in the 10th grade. I can program with these languages and I'm not going to waste your time, but I'd love to have the chance to work at Snapchat. And so I, tongue in cheek, took the exact same format and basically sent him, hey, I'm a niche, I'm a kid, and I think I was in the 11th grade then. These are the programming languages. These are the cryptos that I've played around with and things I've built. Won't waste your time, but I'd love to have the chance to work at Polychain.
00:06:23.458 - 00:06:50.960, Speaker B: And that's how the conversation got started, which is fantastic. I'm really glad he took the chance. So, yeah, worked at Polychain that summer. I did six months on the research and investment team doing venture investment and research. And then six months I spent more on chain trading and learning the ropes around that, and then after about a year at Polychain, eventually found myself where I am today at Paradigm, working with some super smart folks as an associate on the research team.
00:06:51.490 - 00:06:57.540, Speaker A: What is the most memorable thing that you did at Polychain or your best learning experience?
00:06:58.070 - 00:07:33.934, Speaker B: Sure, I think I always tell people that I don't enjoy investing because the biggest problem is when a team comes across the table, I don't want to give them a million dollars. I want to be on their side, building with them. And I think working at Venture Funds in Crypto is very different than working at Venture Funds in the conventional world where you do get to do that. It's the easiest way to get exposure to hundreds of teams and get to build with them day in, day out. So I think definitely my most memorable moments are the points where I helped build with a portfolio company and hopped into the code with them, which I think is what I enjoy the most.
00:07:34.052 - 00:07:39.054, Speaker A: And how did that shape your decision to join Paradigm as your next step?
00:07:39.252 - 00:08:20.890, Speaker B: I think it was a big decision factor I think Paradigm is known for helping portfolio companies very hands on. Whether that's Dan helping write the yield paper, the uniswap papers, whether that's Dave shipping new primitives Georgios, helping ship code, sam finding vulnerabilities and contracts, and helping portfolio companies. I think for me that was an easy decision to make, where I realized there are already people who the way I like to think of research is you get paid to learn and you get paid to help with the learnings that you have. And I think that for me, was the motivating factor where I wanted to keep learning. I wanted to learn surrounded by really smart people, and then I wanted to apply that learning. And so coming to Paradigm was an easy decision.
00:08:21.630 - 00:08:27.466, Speaker A: Yeah, I would actually describe it in the very same way, how learning is such a positive feedback loop.
00:08:27.498 - 00:08:28.606, Speaker B: Right, right.
00:08:28.708 - 00:08:34.494, Speaker A: You get rewarded so much for learning something new and you're making so many new connections over it.
00:08:34.532 - 00:08:36.062, Speaker B: Right, right. Definitely.
00:08:36.196 - 00:08:51.350, Speaker A: Your brain is expanding, but not just the brain in your body, but also sort of the second brain, the social brain, which is your network in crypto. How was it for you to write your first paper? How did that compare to writing open source software?
00:08:52.250 - 00:09:16.846, Speaker B: It's far harder, to be honest. I think writing code, for me at least, is far easier than writing words. And I think it's because code, there's a very strict de facto principle way of doing it. Right. There's best practices of this is how things should be, and there's very little deviation that moves from there. And when I make projects, things that I've already learned, I can just apply them in the same way. I think writing is completely different.
00:09:16.846 - 00:09:37.060, Speaker B: I think every paper, every essay, every word is different than the one before, and it requires a lot more creativity. So I think for me it was a lot harder. I think there was a lot more thinking involved than coding. But maybe that's also because I'm not a writer by day job. So I think it's just harder to do something I'm not as familiar with.
00:09:37.510 - 00:10:34.406, Speaker A: It's curious, what if people could learn to write the way that they could learn to program? Because I'm struggling with the exact same thing, right? When I started writing, I was looking for the ropes, like really looking for them. What are some ways that you can do things? Some best practices, some almost like looking for templates that you can fill in. And I didn't find anything. I followed up with all of the recommendations that people gave me for like, these are the books that the people who are the best writers in the world, here's the advice that they give. And it was so unstructured. And you could say, I'm still looking for adding more structure so it becomes less something creative and more like a craft, almost like something that you can do even, like when you're on your B game or C game, which I'm still struggling with.
00:10:34.428 - 00:10:36.214, Speaker B: I would say same for me, maybe.
00:10:36.252 - 00:10:44.394, Speaker A: We can learn together. So how would you describe your job at program today and just in terms of how you divvy up your time?
00:10:44.592 - 00:11:22.198, Speaker B: Sure. So I'm an associate on the research team which the way that I describe it to people is I'm the stupidest person at Paradigm, which is fantastic because there's a lot to learn from everyone else. The way that I usually split my time is about 50 50. So 50% of my work is public open source contributions to building things, learning things and applying them and building resources that other people can use. And then 50% of my work is more internal portfolio support and basically doing the same thing that I do publicly, but now applying those same skills and helping portfolio companies ship faster, build cool things and expand their companies.
00:11:22.364 - 00:11:39.782, Speaker A: So what motivates you to write so much open source software? I mean, I'm going to your website anishagnihotria.com and there's like 30 different GitHub repos so why spend so much time writing this software?
00:11:39.926 - 00:12:38.798, Speaker B: I think it's two part. I think the first is building code and then sharing it with people is the easiest way to learn where for me, building open source projects is not just a way of sharing cool things that I'm doing, but it's a way for it's almost like nerd sniping the smartest people or getting them really excited about an idea and then learning from them. And the best examples are places where I've built hacks that have taken me two or three days and it's gotten really smart people curious, great conversations started and then I've learned a lot more from the conversations after the hack than the hack itself. So I think that's one big motivating factor of doing drops and building things. I think the second part is I'm very, very pro open source. And I think I attribute that to starting off early with Gitcoin, where I think the easiest way to collaborate, especially in crypto, is to be very open with what you're building, to share as freely as possible and to get people excited and involved and have that support.
00:12:38.964 - 00:13:07.000, Speaker A: How do you feel like we are holding up to that standard in crypto these days? To me it feels like even two years ago everybody would first put out an idea and then there would be like a period where everybody discusses it and then we would build it. And nowadays it's more like projects constantly ship new products but they have been developed behind closed door, basically. Do you feel like we are moving away from the open source approach and how do you feel about that?
00:13:07.950 - 00:14:05.786, Speaker B: I think there's definitely more privatization now than there was before where there's companies of people, product builders coming together to build these things behind closed doors and then launching with a blast and shipping hey, we've built this thing that we think you should be excited about versus just a couple of years ago. Like you mentioned, it's like we'd go from research papers and things people were excited about to very initial implementations to the community interacting and then together, all of us building it up. I personally do like the open source nature better because I think it's not only just an easier way to get product market fit and get community buy in, but it's also just more fun that way. Right. You get to build in public, you get to collaborate with others and you never know what the benefits of that might be. On the other hand though, I do see the benefit of the privatization that we've seen where I'm not a product developer, right? I don't work at one of a large crypto project building one of these things. So maybe my viewpoint is different.
00:14:05.786 - 00:14:31.762, Speaker B: But on the other side you could argue that by having it privatized you can ship faster, you can have closed development cycles, you can have this top down hierarchy of building things which means you can basically outpace many teams to building the same things and it becomes almost like a race. Of course I can't tell what the best way is. I personally prefer open source, but maybe that's because I'm naive and I'm not a product developer working at a place like that.
00:14:31.896 - 00:15:05.600, Speaker A: Yeah, I mean, maybe back in the day the opportunity cost of releasing information was much lower than it is today, right where the market is overflowing with cash and whoever can launch a certain product first is going to get a huge financial payoff. It's not just like basically admiration from the community and like nerd sniping other nerds, which it used to be and having really memorable and great conversations. Nowadays you also have this financial element, I think that's much more dominating, I guess, how people build.
00:15:05.970 - 00:15:21.282, Speaker B: Right. And it's almost cyclical in crypto, right, where with the bull and bear cycles you'll see more innovation happen and you'll also see more fast paced development to capitalize on the abundant capital in the bear market. In the bull market.
00:15:21.336 - 00:15:40.118, Speaker A: Yeah. Let's take one thing that you built, which is Party Bit. I think one of the most memorable projects that you did. Can you walk us through that project from sort of the whole idea all the way to the release?
00:15:40.294 - 00:16:21.222, Speaker B: Sure. Party Bit is definitely one of my more favorite projects. The story behind it started when Dave White, who's my colleague at Paradigm, posted a thread on Twitter on a Friday night that said, hey, it's Friday night, let's design a mechanism together. And quickly after, he got a lot of great replies of which one of them was from Dennis Nazarov at Mirror who said, I'd like a way to pool together capital with my friends, pool together our ETH in a contract and bid for NFTs together. And he dubbed the idea of party bid where you're parting together with pooled money and you're bidding on NFTs. I saw this idea on Friday night and I thought, wow, this is really cool. This is something I'd like to build.
00:16:21.222 - 00:16:56.378, Speaker B: And so that weekend, Saturday, Sunday, by Monday morning, I shipped the V Zero of party bid contracts that let a bunch of addresses come together, pull ETH and then bid on an NFT. And Monday morning I released it on Twitter and there was great traction. Of course, people loved it. And so I decided, let's take it a step further. Let's use this party bid to win an NFT. So a couple of days later, I had the opportunity to bid on an NFT by Colin and Samir, who are two creator economy YouTubers. And so a friend and I pulled together capital and we placed multiple bids from our party bid and eventually we won the NFT.
00:16:56.378 - 00:17:50.030, Speaker B: This was like the first NFT won by party bid. We tweeted about it and this got a lot of people really excited. I know I had mentioned the nerd sniping previously that's I think the best benefit of these hacks where you get people really excited about ideas once they see, like a very MVP stage in practice because of all the excitement. Dennis helped us do, like, a mirror crowdfund, where we raised 25 E in about nine minutes to bootstrap a dow that would help continue to build this V zero implementation into something that was bigger and better. Once we had that set up, a lot of super smart contributors came together to build a V One. And these are people that had full time jobs and were doing this as a side passion, as a hobby almost, to build something they wanted to see as well. So we came together and over about six or seven weeks put together party bid V One, which was a better and improved protocol.
00:17:50.030 - 00:18:13.006, Speaker B: And I think the most memorable part was the day after we launched, we did our one of our first party bids was for a zombie punk dubbed Party of the Dead, which got a lot of traction, and I think was fantastic seeing. So basically going from like a tweet thread from Dave all the way to a working product that people are using to bid on one of the rarest crypto punks out there. That was basically the story behind Party Bid.
00:18:13.138 - 00:18:20.086, Speaker A: Yeah, I think it's really memorable just because people ended up using it and winning one of the most well known NFTs.
00:18:20.278 - 00:18:28.526, Speaker B: Right. And people are still using it today, which I think is awesome. When hacks have usage beyond just an initial idea, is there any kind of.
00:18:28.548 - 00:18:35.234, Speaker A: Monetization feature built into party bid or is it purely like a free tool for people to use?
00:18:35.432 - 00:19:01.122, Speaker B: Yeah, so party bid takes 5%. So the party dow takes 5% of the winning bid, only if you win, of course, to the Dow. And that's basically what helps bootstrap, future contributions, grants, things like that. So, for example, now there's a full time team of, I think five or six folks who are actually continuing to build the v two of the protocol. And that's only been Bootstrapped because we took a 5% fee from initial revenues.
00:19:01.266 - 00:19:04.118, Speaker A: Oh, wow. And are you still involved with the effort?
00:19:04.294 - 00:19:18.206, Speaker B: Yeah, definitely. I mean, when I get a chance and when I get time, I definitely help wherever I can. I'm not full time on it since I'm at Paradigm, but there's definitely folks who are very excited and fantastic developers, designers, thinkers who are building it now.
00:19:18.308 - 00:20:00.246, Speaker A: Cool. And that process, basically, that you applied for something like Partybuild and the one that you described earlier, which is you like to focus on projects that are like two to three day sprints because that is what can best capture and maintain a high degree of excitement about a particular project. How much would you say the learnings and methodologies from the latter can transfer to building something like Partybit and beyond? So even somebody who's looking to release a whole new project in crypto and maintain it for years, how much can they learn from your experiences?
00:20:00.438 - 00:20:57.802, Speaker B: Sure, for the hacks that I make, I usually try to do them two to four days. Something that can be shipped in that interval because I think that's like the sweet spot where anything longer than that and I get bored and don't want to finish a project. Anything less than that, though, is something I can sprint over a weekend, over a couple of days, get it out into the world and have people using it. I think for longer projects, I focus on something completely different, which is maintainability where for the hacks, it's more let me get something out that works and not worry about what does this look like a year from now versus for bigger projects, I'm thinking more ahead a couple of months. Like, how will I continue to maintain this? I should build this in a very sustainable, robust way. I think for developers building longer term applications, there are learnings to take from the hacking model. One of the best ones, I think, is to work in short sprints where if you can focus for three or four days, do that, then take a day or two break, then get back at it in Sprint and you can basically go back and forth.
00:20:57.802 - 00:21:52.080, Speaker B: And that's for me, at least, the most optimal way of working. But to also think about maintainability, I think is really important because, for example, there were a lot of decisions I made in Party bid v zero that I built over the weekend that we had to rip out and rebuild for Party bid v one. One of them was you couldn't rebid on initial contracts. So, basically, if you were outbid, you had to redeploy the party bid v zero contract. And what that meant was that when my friend and I wanted to call an insomir NFT, we were outbid three times, which meant we deployed a contract four times, paying all those additional gas fees, having the stress of doing it in, like, a 15 minutes auction period. And so that was one of the decisions when thinking of maintainability with Party bid v one and having the time to build this in a proper way, I figured let's do it so that you can have multiple bids from one contract and not have to worry about redeploying. So things like that are stuff to keep in mind.
00:21:52.450 - 00:22:08.040, Speaker A: How do you go about even I think I want to learn a bit more about how you go from what you want to build to writing it into a contract. In the case of Party, but did you spec out the things that it's supposed to do?
00:22:09.290 - 00:22:48.542, Speaker B: Yeah. So usually the way that it'll start is I'll have an idea or I'll see an idea. It's gotten a lot easier more recently since people tag me when they want something built, there's a good trove of ideas to pick from at any given point of time that is useful. Yeah, once I have the idea, I'll usually spend no more than five or ten minutes to just spec out just the basic functionality. Like for Party bid, I would spec out something like this has to accept contributions for multiple people. It has to be able to place a bid, it has to be able to replace a bid if it's outbid once, it's won. It has to be able to hold the NFT and it has to be able to let people claim their money if you lose.
00:22:48.542 - 00:23:30.814, Speaker B: So just five basic high level items and that's basically just like guiding principles of what functionality needs to be there. And from there I'll build whatever needs to get built. So in the case of Partybid, for example, that might be actual contract functions like withdraw ETH or contribute to Party and build from there. That's usually the process. I tend not to make any MVPs and iterate by versions, I tend to just do something that's functional as the first go and then if there's interest, if people want to keep building, then I can definitely go and rebuild and enhance on it like Party bid. I just think I like to be very high fidelity but low time. Right.
00:23:30.814 - 00:23:34.510, Speaker B: Get it out as soon as possible into the world so that people can play with it.
00:23:34.660 - 00:23:41.620, Speaker A: Isn't that the definition of a prototype? Something that's very usable and that can see if people get excited about it?
00:23:42.390 - 00:24:04.362, Speaker B: I guess it is. I think with the prototype, though, there's like that implicit expectation that there will be something beyond a prototype. For a lot of my hacks, that implicit expectation isn't there? It's sort of like this is a one and done idea that I'm putting out into the world that people are free to build on it's open source and I might even build on it like Partybid. But there's no expected notion that there is something more than this coming.
00:24:04.496 - 00:24:18.160, Speaker A: I see Partybid is a great example. Have there been any other projects where other people have picked up the prototype that you left them or like the one off prototype that you left them and started to expand on it?
00:24:18.610 - 00:25:14.126, Speaker B: Yeah, there's been a couple, I think more recently. So a couple of years ago I had built a IPFS document signing platform which was picked up by a couple of teams to build similar things for basically document verification. I had built more recently a hack called Ponft, which is basically NFT lending and you have fractionalized commitments, and there's a couple of teams that have reached out that are building on top of that or using similar code to build things. And so it's always fascinating to see hacks get put into practice by people. And I think that's a role that I really enjoy in the community, where I might not be someone that's building a protocol day in, day out, but if I can build some small hack in two or three days, and nerd snipe people that want to keep building that idea. I think I've done my job there, then, which is what I find exciting.
00:25:14.318 - 00:25:29.158, Speaker A: Do you think it is going to become increasingly important for crypto venture funds to seed their own ideas in such a way and then invest in teams that might want to build on them?
00:25:29.324 - 00:26:24.662, Speaker B: I think it's a great idea. I think the product studio mindset of building things in house, seeding teams to build those things is fantastic. And the answer to that is easy because capital is abundant in crypto right now, right? Everybody wants to invest in crypto companies. There's not enough developers, there's not enough founders, there's lots of ideas that need to get built but nobody to build them right now. So what every venture firm wants to do is find that edge, to be able to invest in those founders, to be able to get early into those deals. And I think the easiest way to do that is to incubate those deals, right? Get people who aren't ready to build a protocol yet but have cool ideas, help support them at the fund, be able to support them through their journey and then that's an easy way to be able to be first into the round when they're ready to raise as a supported partner that they already know and trust. So I think it's a great idea.
00:26:24.662 - 00:26:36.218, Speaker B: I think down the lane we'll eventually see more and more of it happening. I think it already happens partly with Paradigm where we build and ship and publish open source and there's definitely other firms that do it as well.
00:26:36.384 - 00:27:07.318, Speaker A: Yeah, I think it's almost like as a venture firm you have the capital and you may have certain other benefits. And it's certainly easier if you also have great ideas and only hiring, trying to hire a great founder for them instead of trying to hire both at the same time like a great idea and a great founder, which is much rarer, right, and there's much more competition for it, right? Yeah, that's pretty cool. Do you have any advice for builders in crypto in general that we haven't mentioned yet?
00:27:07.484 - 00:27:40.750, Speaker B: I don't think it's unique advice, but I'd say that just ship and ship fast. Where I think in crypto you're afforded the benefit of your customers being literally a tweet away, your first users being a tweet away, your community members being one message away. And I think that it's best to capitalize on that opportunity and to build in a way where you can ship and iterate as soon as possible, not only because it'll let you build a nice following and people who can help support you, but also because it's a good way to build. It keeps you on your feet.
00:27:42.130 - 00:28:07.400, Speaker A: Often when I mentioned that I don't know how to program, people don't believe me. If I wanted to learn how to code and be able to prototype ideas like you can in the span of two to five days or whatever, what would you say are the right steps for me to get up to speed as fast as possible?
00:28:08.010 - 00:29:09.980, Speaker B: Well, I mean, firstly, hassle you'd make a great programmer, so I'm excited for when the day comes and you dive into it. I think what I would say is probably pick a language that's very easy to use and pick up good examples being JavaScript or Python, both of which also have great web Three crypto communities and packages built around them. And I say that because as a beginner, the hardest thing is going to be just staying put, getting past the initial hurdle of learning syntax, getting past the initial actually just sitting down and spending an hour in front of a computer screen typing foreign letters is the hardest part of it. So you want to pick a language that'll make it as easy as possible for you. And languages that are very close to English don't require compiling, don't need you to wait and get distracted. So JavaScript and Python are great candidates for that. Once you've done that for a couple of weeks, picked up syntax or comfortable building some applications with it, I think you already have good fundamental programming knowledge at that point to go and build other things.
00:29:09.980 - 00:29:56.874, Speaker B: If you want to get deeper into crypto once you've picked up those languages, play around with Web three, play around with Ethers, take a look at open source projects and that's the easiest way. Play with interacting with contracts on testnets. And then finally, when you're ready and you've done this for a couple of weeks, then I'd recommend you dive into Solidity and pick up things like Crypto Zombies or Open Zeppelin's. Ethernotes which are really great hands on tutorials, which once you have knowledge of JavaScript or Python, a lot of the knowledge carries over very well to solidity. You already know how functions work, the types parameters, how return types work. So it's really just moving the knowledge you already have and have built into a new paradigm, learning new things and then being able to write smart contracts. I definitely recommend anyone to learn to code.
00:29:57.072 - 00:30:17.106, Speaker A: Awesome. Briefly jumping back into your biography, there's one thing that we haven't discussed and I think it's a great segue into our next section. So something that you did after making your first money building websites but before finding crypto was trading skins on Steam. Can you describe what a skin is?
00:30:17.288 - 00:31:00.320, Speaker B: Yeah, for sure. So skins are basically cosmetic items that upgrade items in game, in Steam game. So the one that I most popularly played was Counterstrike Global Offensive, where you would have weapons and you could skin these weapons with these skin items. And after I had started to make some money making websites and before I had found crypto, I needed to have something to spend my money on. And like I mentioned, my parents didn't know I was making any money. So I couldn't just buy a television that would get delivered to my house because then it would be like, okay, where'd you get the money from? And so I had to spend this in digital economies. And so the way that I would do it is I'd buy skins, stuff that I could play with, stuff that looked cool in game.
00:31:00.320 - 00:31:48.720, Speaker B: And eventually I realized that it's an economy in and of itself, right? Skins have floats which are basically like how aesthetically pleasing they are, right? Their rarity from like battle scarred to factory new. These skins can have stickers on top of them which are like additional cosmetic things to add on. There can be different appeals for the same type of skin. So like, case hardened skins can have more blue, can have more yellow, and that changes the pricing of all of these items. And so as a kid, the market economics behind it was far more fascinating to me than actually playing the game. And so I found myself doing a lot of building rarity tools before they were popular for NFTs, for skins, and gambling with these skins, match, betting, things like that to play around with them.
00:31:49.170 - 00:31:55.220, Speaker A: So by rarity tooling you mean what exactly?
00:31:55.750 - 00:32:51.554, Speaker B: Sure. So in NFTs, we've seen a new popularized concept of rarity tools where you have, let's say, 10,000 profile picture projects. Some will implicitly be more rare than others only because of the attributes that they have. So for example, in the case of crypto punks, zombie punks are far more rare than normal human punks and alien punks are more rare than zombie punks, and that's only because of how they're distributed, right? I don't know what the exact number is, but there's like under ten aliens, I think, or somewhere around that number. Right. In the same way, in the skin economy, you had the same thing going where some skins were rarer than others, which meant that you could essentially build rarity charts of which skin would trade at a premium to another, letting you trade up and go make a profit trading between people. And that's basically facilitated by OpenSea today, right.
00:32:51.554 - 00:32:54.690, Speaker B: Where you're flipping for attributes and trading on OpenSea.
00:32:55.110 - 00:32:59.000, Speaker A: How automated was that? How much software did you employ back then?
00:32:59.450 - 00:33:34.426, Speaker B: Quite a bit. I think it was an advantage that I had where most trading, at least early on, was you could have like, trade windows pop up where you would pick other people's items and you'd send them offers. And one of the things that I did was make trade bots where people could purchase my skins at a slight premium with the benefit that my bot would automatically accept their offers so they didn't have to wait for someone to get online, approve their offer, accept it. For people that just wanted to play with these skins, it was an easy way to send an offer instantly get the skin and what that meant.
00:33:34.538 - 00:33:38.498, Speaker A: You were market making and marking up liquidity, right?
00:33:38.584 - 00:33:55.670, Speaker B: Oh, that's so, you know, make a slight profit on that. So I think that's the bottom that I did, valve eventually did shut that down and there was a whole slew of things that they did to restrict the market, which know, frankly, why I don't do it today. But it was a ton of fun while it was still around.
00:33:55.820 - 00:34:04.218, Speaker A: So when it finally NFTs came around NFTs collections this rarity, you were like, finally, can you sort of that old stuff again.
00:34:04.384 - 00:34:20.078, Speaker B: Exactly. And there's a lot of paradigms. I've spoken to a lot of people that used to snipe sneakers. So back when sneaker drops, shoe drops were really popular, people would write bots to get in as soon as possible so that they could get these rare sneakers and then flip them on the secondary market.
00:34:20.164 - 00:34:24.506, Speaker A: Wait, we're talking physical shoes here? Yeah, we're talking physical yeezys forward yeezys.
00:34:24.538 - 00:35:03.274, Speaker B: Exactly. Okay, so there used to be drops for these yeezys where they'd have 500 shoes being sold and people would race in to bought it and get those shoes because it meant easy profit. Right. You could buy them for 350, sell them for 2000 in the secondary market. And I see the same parallels with skins, with shoebotting coming into NFTs now, where people are building rarity tools like they did for skins to trade these things. People are building market making bots on openc so that they can have resting offers. The same people that built shoe sniping bots are using that infrastructure to now build first come, first serve NFT auction minting bots.
00:35:03.274 - 00:35:07.310, Speaker B: And it's fascinating to watch it sort of transfer over to NFTs now.
00:35:07.460 - 00:35:51.680, Speaker A: Yeah, it's like I play a fair bit of dota two, and every couple of weeks there's a new patch and then you can tell from the patch notes already, like, which hero is going to be in Meta because they get buffed and others get nerfed. And that has a big effect on how much they appear in game because people want to play the heroes that recently got buffed and so on. And you can immediately see how basically their items, their skins get marked up in the marketplace due to the buff. So you have so many layers there. Right. People basically analyze the text of the patch notes immediately, probably using some kind of machine learning software, and then bid up buy up all the NFTs that hero. No, I said NFTs as well.
00:35:51.680 - 00:36:23.510, Speaker A: Buy up all the skins that this hero is going to wear in game, which is kind of hilarious. Yeah. So we talked about skins and we talked about shoe launches, shoe drops. So this is something that we also recently spent a lot of time thinking about. Right. So basically the difference between primary markets for NFTs and secondary markets. Can you briefly describe what the difference between those two is?
00:36:23.660 - 00:37:16.770, Speaker B: Sure. So the primary markets are essentially where the first distribution of an NFT collection happens. Most recently, what we've seen is that this happens directly at the contract layer where developers will ship new contracts that mint NFTs and they'll put up front ends and people will mint these NFTs from the primary market, which is their websites themselves. An example is, for example, Larva labs website, which has CryptoPunks. Back when CryptoPunks were still mintable, you would go to the Larva labs website, you would connect your wallet and you'd be able to mint a crypto punk for whatever the predefined price was. The secondary markets is where you can take your NFTs and then trade them. So these include things like OpenSea, Rarible, Zora, and a whole slew of other marketplaces exchanges and protocols that let you essentially either sell your NFT, either buy NFTs on a secondary market, or trade your NFTs for other people's NFTs.
00:37:16.850 - 00:37:33.438, Speaker A: And we focused with our paper designing effective NFT launches that some of you may have seen. We focused on primary markets, how NFTs first get sold in the primary marketplace. Why is this topic close to your heart?
00:37:33.604 - 00:38:21.690, Speaker B: That's a good question. So like I had mentioned previously with Bodding and Skin Rarity, when a collection is first sold on the primary market, there's a lot of ways for people that are closely observing the collection to have an implicit advantage. Right. And I'll give you a couple of examples of that. The first in our article, which I recommend everyone read, we highlighted a couple of ways that there's user harm that the average user has an implicit detriment compared to everyone else who's competing. One of the ones is exploitable fairness, where if a contract is made public and developers like myself can rush in and immediately rank the rarity of items and mint the rarest items. It's less fair for everyone else who can't do the same thing.
00:38:21.690 - 00:39:07.642, Speaker B: And an example of that is loot, where a couple of weeks ago the NFT world was taken by storm with these loot bags that contained eight adventure items. And everyone loved this idea. And we saw a lot of derivative projects pop up that did the same thing in different ways, right. Eight numbers or eight items, eight food pieces, eight places to visit, things like that. What was special about these contracts was that all of their metadata was on chain, which meant that motivated individuals like myself could quickly scrape all of the tokens, rank which ones the NFTs were the rarest and then buy only the rarest ones. Which made it difficult for anyone else to be able to have a fair chance. There's other types of problems as well.
00:39:07.642 - 00:39:59.398, Speaker B: One of the most frequent problems with NFT drops in the primary market is first come, first serve auctions and sales, which is basically, let's say I want to sell 10,000 of my NFTs and I want to sell them for $100 each. I'll say whoever gets into this first can mint freely. Now, this is disadvantageous not just because people have to sleep and there's different time zones, but because you're moving the auction into a gas war, right, where people are now bidding for these NFTs, paying high gas prices. And overall, that's just bad user experience. And so in the article, we highlighted a couple of these exploitable fairness gas options, high skill gas inefficiency exclusive Minting and trusted operators. It's sort of like the six examples of user harm that we've noticed that just make primary markets less fair for the average user.
00:39:59.574 - 00:40:32.502, Speaker A: Yeah. One stat that you extracted, actually, and that made me go, wow, is for the timepieces from New York Times in their job that I think it's sold out in like three to four minutes. But even more noteworthy was what also happens every time you have these auctions play out in the mempool, which is that a lot of people try to get the transaction in, but then the NFT that are trying to buy is already sold out.
00:40:32.556 - 00:40:33.014, Speaker B: Right.
00:40:33.132 - 00:40:43.050, Speaker A: And in this case, it led to over 10,000, I think, failed transactions. Right. Costing users collectively almost a million dollars. Right?
00:40:43.200 - 00:40:58.270, Speaker B: Yeah. 10,962 participants. So that's a lot of people. Almost 11,000 people. And they lost 252 e over 100 blocks, which is crazy. Almost a million dollars lost minting these NFTs.
00:40:58.610 - 00:41:33.030, Speaker A: That's kind of crazy. Yeah. Okay. So based on that, what we did was sort of we looked at how user harm had been caused objectively by these launches, how people have lost money on them and how fairness had been basically destroyed. And we used that sort of to derive some almost like taking the inverse of that. Right. Looking at okay, so here's how people got wrecked so, okay, how can we do it better? So let's have these and these and these positive properties and have them almost like objective functions for your launch.
00:41:33.190 - 00:41:33.562, Speaker B: Right?
00:41:33.616 - 00:41:35.034, Speaker A: And what did we do next?
00:41:35.152 - 00:42:34.714, Speaker B: What we did, we unbundled NFT launches, right, where we mapped out exactly what a launch consists of at its heart. And I think to quote you, actually, the four things that we came up with were the biding phase, which is when the sale goes live. This is when users submit their bids to buy an NFT. The clearing phase, which is once you have all of these bids, you decide who actually gets to win the NFT, especially when the demand significantly outpaces the supply of a collection. You have the distribution phase where once it's cleared, you've picked hypothetically or 10,000 winners. How do you actually get the NFT into their hands? And then finally you have the metadata reveal phase where it's once you've done all your distribution, how do you actually show users what their NFT is, what the attributes are? And this is important because the metadata reveal has to be at the end, because as we saw in the Loot example, if metadata reveal happens anytime earlier, it's easy to exploit its fairness.
00:42:34.842 - 00:42:54.002, Speaker A: Yeah, I think this was definitely like the most fun thing that I've worked on in a long time because I think it is this way of taking something that looks like one mesh of things and has like a bunch of properties and then breaking it down into its smallest component of parts that still make up a whole.
00:42:54.056 - 00:42:54.322, Speaker B: Right.
00:42:54.376 - 00:43:15.138, Speaker A: And this was such an educational experience for me. And I think in all of the best things that you write, it's always like the thing that you end up doing changes multiple times completely over the course of a couple of weeks. Right. So I think it was actually pretty late in the process that we arrived that we arrived at these four stages.
00:43:15.234 - 00:43:35.530, Speaker B: I think part of that is because we had a very adversarial mindset when we were in this. Right. It's like we were thinking of being the NFT developers where we had a couple of ideas early on where we realized, okay, you know what, this wouldn't work because this is how we would exploit it. We just went back and forth trying to exploit the same mechanisms that we built. And I think that was super. Yeah.
00:43:35.540 - 00:44:10.622, Speaker A: Yeah, I had an absolute blast writing this. And what I also like a lot is how well it transfers. Basically, the metadata reveal aspect is sort of unique to NFTs, but also to something like Lotteries and so on. Right. If somebody were to run some kind of gambling game on Chain, or actually any kind of game that involves randomness, but all of the rest is also super relevant to any kind of token that people want to launch on chain, which is actually super common.
00:44:10.756 - 00:44:22.238, Speaker B: Right. I think the practices carry on beyond just NFTs. Right. They carry on to initial token distributions, ICOs pool offerings, things like that.
00:44:22.404 - 00:44:44.790, Speaker A: Yeah. So can you describe sort of what was the we summarized basically three main takeaways. I don't want to get into the whole paper here, but there are three things that we isolated that are the most important to us and that we want everyone to take away. So can you first talk about unexploitable fairness and how to ensure it?
00:44:44.860 - 00:45:29.926, Speaker B: So the first takeaway we had was that your NFT drop has to have fair metadata. And the way to ensure that is to have randomization. Right. Don't let anyone, not even you as a developer, not the operator, not any individual user, no one should be able to figure out what an NFT is before it's done minting. You might think, okay, why is this even a problem? Like, who cares? But the reality is that when these NFTs trade for tens of thousands, hundreds of thousands of dollars in the secondary market, the difference in between the average NFT and your rare NFT, it might be like an order of magnitude difference. So people are actually incentivized to have the rarest NFTs. Right.
00:45:29.926 - 00:46:09.778, Speaker B: You want to be unique. What we figured out was you have to have randomness at every aspect. So once you've minted, the first thing we realized was that the NFT metadata reveal has to happen after Minting, because if you reveal the metadata before Minting, then people can choose what to mint and you don't want to let that happen. So effectively, your NFT metadata reveal has to happen at the end, and it has to have some random source of entropy. In the example that we provided, we use chainlink VRF to get a random number from chainlink in other ways. You could use commit reveal schemes. You could have multiple people commit numbers that are used as entropy various ways.
00:46:09.944 - 00:46:43.980, Speaker A: And to show why if you don't do this, it gets exploitable. Right. What are some approaches that people have used when the metadata was revealed? You touched on one earlier where in Loot. Loot made it just extremely easy for the exploiter. Right. Because you could just tell the contract, I want to mint the idea that has this and this ID. And I think this is like most people who are not super technical don't know this, but a token on ethereum, any token is just entry, like in a database contract, right? It's just this address controls this ID, basically.
00:46:43.980 - 00:47:14.006, Speaker A: And and this, this much of it. And the Loot contract, you could just tell, I want to mint this ID, and if it wasn't minted yet, then it would mint it for you. And if it was minted, the transaction would fail, basically. But there are other examples. Right. So let's talk about the mebit auction, for example. The Mebit auction is like it actually took a lot of precautions against people being able to extract the metadata in advance, but it still happened.
00:47:14.188 - 00:47:28.390, Speaker B: Yes. And I think it just speaks to how difficult it is to do this perfectly. So Mibits were a collection from Larvae Labs, the creators of CryptoPunks. Highly anticipated 20,000 of these block styled NFTs.
00:47:28.470 - 00:47:36.006, Speaker A: And it's like the most blue chip it gets, right in crypto. Like Lava Labs are the NFT. OGS. They know all about how to run these auctions.
00:47:36.118 - 00:48:22.742, Speaker B: Exactly. If there's any NFT you want to exploit, this is the one you want your eyes on, right? And so it did have a lot of eyes from people who wanted to do this. One of the functionalities of the Mibis website was that after you minted your NFT, they selectively revealed the metadata for your NFT. So, for example, if I minted NFT one two three, I could see the metadata for NFT one two three, but I couldn't see the metadata for any other unminted me bits. So one would think that hypothetically, this is fair, right? If I can't see the metadata for any me bit, then I can't mint one that's explicitly rare. It's randomized. What someone figured out, though, was by inspecting the code of the website, they figured out that there was a URL on IPFS where all of the metadata was stored, whether that was unminted or minted.
00:48:22.742 - 00:49:08.300, Speaker B: And this individual went and they went, okay, let me take from token ID one to token ID 20,000, loop through it, and pull the metadata for everything. So even if the website didn't showcase unminted me bits, they found a way where the data was still leaking. And what this allowed them to do was to pick the rarest me bits and know exactly what ID they wanted to mint. Even then, though, it wasn't that easy for them to go ahead and just mint that desired ID. In the case of loot, like the example, you could provide the ID you wanted to mint, right? If I wanted to mint one two, three, I could just tell the contract, hey, give me one, two, three, and if it's available, it was mine. In the case of EBITS that wasn't there. They used on chain pseudorandomness to basically randomize the ID that you got.
00:49:08.300 - 00:49:51.058, Speaker B: This exploiter, though, was smart, where they wrote their own contract, which was basically like a reroll contract, and we include a sample of that in the article if anybody wants to dig in. But what it let them do was they would pay for amiibit, and on the callback, they would receive their NFT and they would run a check. They would say, hey, does this NFT equal one of the desired rare NFTs? One of the rare meibits that I want? And if it did keep the me bit, but if it didn't, they would just revert the transaction. They would cause it to fail. What that meant was that instead of them having to pay the mint cost, which I think was something like 2.5 E when Me Bits came out. Instead, they only paid for failed transactions which was somewhere around like 0.1
00:49:51.058 - 00:50:32.034, Speaker B: E. So effectively they could loop through all the available Me Bits and over, you know, they had to spend some ETH on a couple of hundred transactions that failed. But eventually they were able to get ultra rare Me Bits that sold for many hundreds of ETH in the secondary market and all that it cost them was a couple of failed transactions. In today's day and age, this is even easier, right? With Flashbots, you don't even have transactions. You don't even have to pay for transactions that revert. So we could run even the same exploit and loop through all the transactions and have zero cost unless you minted a super rare one. So that sort of just speaks to why we think unexploitable fairness is very important for a metadata for a collection.
00:50:32.034 - 00:50:32.758, Speaker B: Excuse me.
00:50:32.844 - 00:52:17.798, Speaker A: The second one that we discussed is sort of preventing race conditions, right? And the race condition is anytime that you have more demand than supply and then people are raising in order to get filled basically on their bid. And in the case of a gas auction that just means the people who can get their transaction mined first, they will get the NFT or those who have access to better tools like Bots or access to power tools like Flashbots before it became more democratic basically always have a huge edge. And in worst case, this is just a miner who just controls the entire block and can decide which transactions to include and not even to mention all of the negative externalities that are created for users of Ethereum. So I think in our paper we gave ten or what examples of when NFT launches sort of quote unquote outsourced their auction to the miners. And I think this whole mental model of outsourcing an auction, like you're not making the auction go away, you're just letting someone else do it and you're giving it to the miner. And I think we showed basically what happened to Ethereum in these periods and the network just got completely clocked up. And yeah, I mean, gas prices went to sometimes over like, 1000 gray in some cases even, I think, a couple thousand gray and basically becomes unusable for anyone else because somebody is utilizing this public infrastructure for something for their own private endeavor, basically.
00:52:17.798 - 00:52:29.930, Speaker A: And I mean, they are paying for it. So it's not unfair in any sense, but there are better ways to do it. Right. So what was sort of our core insight to preventing these race conditions?
00:52:30.350 - 00:53:50.550, Speaker B: Yeah, so I think you mentioned it perfectly and I think the stat we mentioned was in the month of September there were seven or eight periods of time when gas price spiked past 1250 GWe and every single one of them was because of an NFT option. So it says something where the entire Ethereum network is held up for people minting. So the way that we came about thinking about it was the only way to resolve this is to not have a first come, first serve auction. It shouldn't be a rush to get into the auction, there should be no race condition where the people who are fastest, the people who pay the most gas, are advantaged over everyone else. And we dubbed this sort of sequential biding and clearing where you can have people enter a pool of participants and then you can clear that pool of participants, for example a raffle or a batched auction. The way that we proposed was a raffle where you've set aside a period of time, let's say 24 or 48 hours, and you let as many people, as many addresses that want to participate, commit some amount of ETH and then enter this pool of participants after that period of 24 48 hours has ended. Which to mention is also beneficial because keeping a long enough window allows people that are in other time zones are working, are sleeping, to be able to participate as well.
00:53:50.550 - 00:54:47.474, Speaker B: Once that window has completed, then you have a clearing phase where from your pool of participants you pick winners. I'll give you an example, if you have an NFT auction where you want to give away, let's say 10,000 NFTs and there might be two scenarios you hold a raffle and of 10,000 only 6000 participants enter. In this case it's really easy, you just simply allow those 6000 to mint their 6000 NFTs. In the alternate case, where demand is greater than supply, which is what we most usually see, you can have a raffle. So let's say there's those 10,000 NFTs and you have 60,000 participants that come in. Now, of these 60,000 participants, you have to pick about one in six and so you would use a raffle which takes some random number because of course you want to be as fair as possible. In our case we use chainlink VRF to get a random number on chain and you would use that number to randomize your 60,000 participants and pick the 10,000 winners.
00:54:47.474 - 00:55:04.282, Speaker B: So in this way it's just as fair for everyone, regardless of how much gas you're paying to enter, regardless of how many tickets you have, each ticket is only as sorry, excuse me, each ticket has the same chance of winning as every other ticket.
00:55:04.346 - 00:56:25.720, Speaker A: So you mentioned the raffle is like one way of selecting the winners, another one that is always brought up sort of in the context of blockchains but had never really caught on in big way in popularity is the batched auction. You can have a bunch of different ways to do a batched auction, but the main idea is just to collect everyone's bids first and a bid is basically an expression of I want to buy this amount of tokens, whatever can be anything at this price, right? So it's basically an. Expression of the user's preference. And then when all of the bits are collected, then you run some algorithms that selects which are the winning bits and you have really a huge design space there. But one very nice property is that you can clear everyone, for example, at the same market price, right? So basically, no matter how much people were willing to pay, you clear them all at the same price. So that's very nice. That's also another property that I think the first come, first serve launches currently break, right, where people who are very good at bidding, very good at guessing, like the actual clearing price, they tend to pay far less than somebody who has to overpay, for example, because they are less skilled, right? Right.
00:56:25.720 - 00:57:36.670, Speaker A: So batch auctions are catching up in popularity now, I think also with some projects, like Housewap, for example, that run a similar approach to Dex trading. But in general it's sort of an approach that has not received a lot of laugh in crypto, even though you would think that it just makes a ton of sense because the blockchain itself sort of has this very slow heartbeat, right, where there's a new block on average every twelve to 13 seconds. And it really doesn't make much sense to have priority between different bits in between these blocks and then whenever you try to enforce it anyway, then it just turns into an auction of who can pay miners the most. So basically, any system that uses sort of a heartbeat that is faster than an ethereum block automatically leaks value to miners. And I think that's something that if you design any kind of application, it's something that you definitely want to avoid, not just because it leaks value, but also because just poses a very bad experience for your users. So, yeah, those are, I think, high level the two approaches that we explained. So the key is here turning it from an auction.
00:57:36.670 - 00:58:42.610, Speaker A: And you can never avoid having an auction. You're always going to have an auction when there's more demand than supply. And I think that's one key insight and I think the second is that if you want to avoid all of these negative externalities and negative consequences for users, then you have to turn this into from what we called a continuous auction into a sequential one. And in the continuous case, you still have users bidding and you still have someone clearing. So users submit the bids to miners and then the miners just look at the supply and they clear it every block. But in our case we say, so, hey, first people, you have this whole time to submit your bids and then we will clear it according to some algorithm, whether that's importing randomness on chain, but you can even clear it off chain. If you gave a great an example of a launch that did this really well, which is the spank chain launch in, I think it was as early as like 2017, right? It used like a very good, very good mechanism to do this off chain.
00:58:42.610 - 00:59:27.220, Speaker A: It has all of these advantages, basically, that I think would be very nice if people were using them more. And that brings us to the last property, which is cost efficiency. So there's actually one launch, I think, that we want to point out, which is JPEGs Automat. And they use the batch auction. They use sort of a very crude way. It's sort of like, I would say, almost like the minimum viable batch auction where they didn't allow users to say how much they want to pay per NFT, which is you kind of would expect this to be possible. They only allowed users to say how much eve they want to commit, but not the price at which they want to buy each NFT or how much they want to get.
00:59:27.220 - 00:59:31.346, Speaker A: And this had one downside. Can you walk us through that?
00:59:31.528 - 01:00:31.190, Speaker B: Sure. So our third conclusion that we took away was that you have to consider cost efficiency from minute one. And we realized this looking at the JPEG's Auto market batched auction on Miso, where while the idea was very novel and the mechanism was definitely unique and it had its benefits and its disadvantages, both of that we discussed in the article. One thing we realized was that it required a lot of transactions in the sense that there were a lot of on chain interactions that a user had to do from the point of saying, hey, I want to buy an NFT, to hey, I have this NFT, and the metadata is revealed. And this is problematic because every transaction on Ethereum costs gas, which means that the more transactions you make, the more you're paying, the more expensive it is for the end user. In the case of Miso, we found that at the bare minimum, I think it was four or five transactions that you had to make in order to be able to just mint an NFT. This is contrasted to the first come, first serve auctions where you only have to get one transaction in the mint transaction.
01:00:31.190 - 01:01:22.294, Speaker B: And in the worst case, it was something like seven or eight transactions that you had to make to just be able to get your NFT. So overall, while in the individual stages, you might have had cheaper gas prices because you were able to time the market, at the end of the day, there was a huge burden to the user of having to pay for these transactions. And so what we considered was when anyone designs a new mechanism, when you are thinking of how to make your NFT launch fair, you have to keep in mind not just optimizing for the fairness, but also optimizing for the cost that users will have to pay for that fairness. Where ideally, most of the expensive operations you keep either open to everyone or something that you as an operator can do. And you make it so that you minimize the number of actions that the user has to take to get their NFT. Sort of like socializing the gas cost.
01:01:22.492 - 01:01:48.734, Speaker A: So anyone who's looking to launch a new NFT collection or really any token on ethereum, I think I would encourage to check out this post. Because at every step, every of these four steps really break down what the different trade offs are that you can make and what sort of their consequences are on the launch at large. And the design space is really big. I mean, I'm sure there are a ton of options that we missed that you can do.
01:01:48.772 - 01:01:49.360, Speaker B: Definitely.
01:01:49.970 - 01:02:23.580, Speaker A: And I'm just really excited to track the space over the next twelve months and see how it develops, basically. Right, so if you want to launch an NFT, what do you think about the choice between using rolling your own contract and doing it sort of directly on chain versus using one of the available, let's say, like Launch Marketplaces? And by Launch Marketplace, I mean the one that people are maybe most familiar with would be something like Miso. Right. So basically launch a token infrastructure as a service.
01:02:24.430 - 01:03:22.160, Speaker B: Right. So I think we're going to see more and more Launch Marketplaces pop up as NFT designers, as NFT curators come into the space, simply because not everyone is a developer. And as we've noticed, designing a fair NFT auction, designing a fair mechanism is very, very tough. And it's something that I don't think anyone has cracked perfectly yet. These shared marketplaces, the benefit that they offer is they give sort of one pre built package that they've vetted, that's been used before, that these creators can come apply their metadata, apply their images, apply their artwork, their video, and be able to launch with those same best practices. And it has its benefits. We mentioned Miso is one, another one is the OpenSea storefront where the benefits that they offer, for example, in the OpenSea case, is someone who has no technical background, can take their artwork, can mint NFTs, and can do them without even spending gas because they have lazy minting on.
01:03:22.160 - 01:03:48.710, Speaker B: Can have yeah. So lazy minting is this idea where you upload your NFTs and they're stored on OpenSea centralized until the point of purchase. So I can basically, hypothetically mint my NFTs for free. And then when somebody comes along a buyer and says, hey, I like this NFT, I want to buy it, OpenSea will mint that NFT to that buyer at the point of purchase, basically avoiding the creator having to pay any gas fees.
01:03:49.130 - 01:03:57.414, Speaker A: Is it like the same as batch minting? In a sense. You're batching the mint and the distribute together.
01:03:57.612 - 01:04:24.778, Speaker B: Right. Except in the case of the batch mint, you do that upfront. Right, where when you deploy the NFT, you'll batch mint yourself, let's say ten NFTs. Here, the NFTs aren't even minted until the point of purchase. So it offers quite a bit of gas savings for at least the average creator that doesn't want to spend thousands of dollars deploying a contract on Ethereum at any given point of time. And these marketplaces have their benefits, right. They're easy to use, they're convenient.
01:04:24.778 - 01:04:54.710, Speaker B: One of the things that we've noticed is that they also have their detriments. One of the key ones being the lock in an example is with OpenSea. There's been a lot of collections recently from artists that have come, have launched a collection on OpenSea, and have had success that they didn't anticipate. Right. People love their NFTs. People are minting a lot of these, and now they want to build a community around it, they want to expand it. But a detriment that comes out of using the OpenSea shared storefront and their NFT minting contracts is the fact that you're locked into those contracts.
01:04:54.710 - 01:05:39.980, Speaker B: You can't take your community anywhere else because you don't have your own contracts. There's only so much extensibility that's offered to you. And so recently we've seen sort of reminting where people will migrate users from openc contracts to their own contracts by letting them mint one to one replicas. So if you have ID one of an openc NFT, you can mint ID one on a custom contract. So I think there's a balance to be had there where you can take the shared marketplaces for the convenience, you can take the custom made contracts for the extensibility, or you could go with something in between. I think Manifold is one corporation building, something like that. But it's like a balancing act of picking what's the best for your community and for your project.
01:05:40.430 - 01:06:04.778, Speaker A: Yeah. What do you think is like the long term equilibrium here? Is it more like we are going to have an open source toolbox for developers to choose very specialized but standalone launch contracts from? Or is it more like that these launch as a service marketplaces will ultimately win out and also offer really good trade offs for users?
01:06:04.954 - 01:07:00.466, Speaker B: Sure. I think the good parallel is back as a kid, I used to make websites, right when I was ten or eleven, and business got really bad when companies like Squarespace came out that let you build all of these, take templates, take existing examples that had worked, and drag and drop and build these fantastic websites. I think we'll start to see the same thing happen for NFTs, right. Where right now there's a lot of custom contracts, there's different people do different things, different function names, a lot of complication in the development process. I think what we'll start to see is sort of like a Squarespace moment for NFTs, where there will be projects that pop up that will offer open source, well vetted audited implementations of these distributions and they'll let people drag and drop what they want. Right. Like I could drag, I want a batched auction, I want 10,000 people drag and drop my artwork in Hit Create, and it just spins up a web.
01:07:00.466 - 01:07:08.182, Speaker B: Three front end, I pay and it deploys the contracts, and it does everything for me. And I think that's really where we're heading, where that's really super simple.
01:07:08.316 - 01:07:32.094, Speaker A: Yeah, I love that vision. It's really cool. I think the whole idea of drag and drop contracts, not even just for NFTs, but in general, I think some projects already experimenting with something like this. Right. If I look at DeFi, Saver or Instadep, I think they both have functionality like that. I think that's really promising in the long run.
01:07:32.212 - 01:07:32.906, Speaker B: Agreed.
01:07:33.018 - 01:08:01.158, Speaker A: But NFT primary markets are only one part of the picture. I think it's actually a very small it's important, but it's a very small part of overall NFT volume. Most NFTs are traded in secondary markets. So can you describe sort of what is the current state of the secondary markets and NFTs? How is the fragmentation looking? Who are the winners and losers? And how do you expect this market to develop over the next year?
01:08:01.324 - 01:08:38.638, Speaker B: Sure. So I think in terms of the NFT secondary market, there's sort of two emerging categories that have come up. One is catered to these projects that have many, you know, tens of thousands of mints and have various attributes and sort of entire collections. And we've seen the clear winners there be for, you know, things like OpenSea, Rable, on chain projects like Zora. Right. And these are the exchanges and marketplaces where you can list these NFTs filter by attributes, purchase these NFTs, trade them, have offers.
01:08:38.654 - 01:08:49.766, Speaker A: And whatnot can you expand on why the first two are off chain and the latter is on chain? Because to me, as a user, I constantly have to sign transactions and make transactions when I interact with them anyway.
01:08:49.948 - 01:09:28.642, Speaker B: Sure. So it's the varying degrees of centralization. So if you've used Openc before, what you'll notice is that once you've approved a collection for sale, you don't have to make an on chain transaction to actually list your NFT. It's just a signature. Right. It's like, if I own 15 loot and I approve loot once, I can sell ID, one ID, 15 ID 100, without ever having to make an on chain transaction. And the way that works is that Openc essentially maintains a centralized order book, right, where they take your signed transaction and they hold it on their database and they list that signed transaction on their front end.
01:09:28.642 - 01:09:57.158, Speaker B: Then when a buyer comes along, the buyer makes the on chain transaction where they bundle together their purchase transaction. And your sell transaction that they pull from OpenSea together. And because you've already signed it, it's verified that this is yours, and you can immediately sell that NFT. And so Rarible OpenSea. The way that they do it is sort of these centralized order books behind the scenes. Zora, in contrast, does everything on chain. They like to ensure the composability with protocols and whatnot.
01:09:57.158 - 01:10:48.438, Speaker B: And so the way that they do it is when you list your NFT for sale, you make an on chain transaction that essentially moves the NFT to a contract. So it's no longer owned by you, it's owned by a marketplace. Each has its benefits and advantages. Simply, you could expect that the centralized ones are centralized. So it's hard to build adapters, hard to build projects along with it. And a good example is there's no party biding on OpenSea NFTs, right? Because it's almost impossible to do that on chain versus in contrast, Zora, for example, is on chain. So there are party bids for Zora NFTs, and on the same way, it has its detriments too, right? OpenSea is great because you don't have to pay gas costs to quickly sell a lot of NFTs, right? And for some collectors, that's a huge deal because some of these NFTs, the gas cost to sell them at times can be more expensive than the actual NFT itself versus for Zora.
01:10:48.438 - 01:10:59.738, Speaker B: Every transaction has to be made on chain, which means it's more expensive if you're listing a lot of NFTs. So there's disadvantages and advantages. And so that's one series of NFT marketplaces.
01:10:59.834 - 01:11:26.920, Speaker A: I think it's really important. I think that this is probably a trend in crypto that's going to accelerate in a big way where people are only going to sign transactions and then something happens to these transactions, like because I think this is going to get more and more important in crypto. Can you explain what really happens here, sort of behind the scenes with OpenSea and what guarantees the user gets what they have to trust?
01:11:27.370 - 01:12:04.654, Speaker B: So first, to play the devil's advocate, almost I'd argue that that's the opposite of what's going to happen. All right. I think we'll see more on chain interaction happen. And I think the only reason we're limited to making it off chain right now is because of how expensive everything is. Interesting, at least, I'd like to hope that when layer two is at its peak, when we have all of these ways where gas is super cheap, then it won't matter to people if they're making transactions on chain, right. It just won't be a cost that they'll consider and it'll offer a lot more composability. But to get to your point, how does OpenSea do? It is in ethereum.
01:12:04.654 - 01:13:00.822, Speaker B: When you send a transaction, there's two parts to that. The first is you sign the transaction. So you take your private key that is you, and you basically imagine like a figurative, like, autographing the transaction that says, hey, this is me, I am approving this transaction. And then the second part is sending the transaction where you submit that signed bundle, you submit that signed code to the blockchain, and the blockchain can verify that you were the one that submitted that transaction. And this is basically what offers the cryptographic security that a blockchain does right, where I can't submit a transaction from Hasu's wallet because I don't have his private key, I can't sign and verify that I am Hasu. I am the one submitting this transaction. That's the same guarantee that storefronts like OpenSea that exchanges and marketplaces use to offer off chain transactions, where I can sign ownership over some ID, over some item, but not have to submit it.
01:13:00.822 - 01:13:38.980, Speaker B: And this is weird, because for most people, you've only used MetaMask, right, where you sign and send at the same time. It's like just a transaction. But with OpenSea, what you'll notice is that when the pop up comes up to sell an NFT after you've approved a collection, or actually, you know what, let me step back a bit. Why do you approve a collection? So when you approve a token on Ethereum, you're basically giving a right to someone else to spend your balance. So in the case of OpenSea, if I approve OpenSea to spend my loot, I'm saying, hey, for a brief period of time, or until I cancel this, I'm delegating OpenSea as being allowed to take loot from my balance and move it somewhere else.
01:13:39.430 - 01:13:53.670, Speaker A: Once you've given them this, this is really interesting, right? Because most people, when they think about Ethereum, they think payments are pushed, but it's actually the opposite, right? Every payment can only be pushed from another user or smart contract, right?
01:13:53.740 - 01:15:05.102, Speaker B: Exactly. Like you mentioned earlier with database entries, right? It's like I'm giving someone admin approval over my part of the database to change around the numbers as they see fit. And that's basically what OpenSea does in this case. Now, the caveat here is that to do that, they still need to have a signed transaction from me, right? And so what actually selling an NFT looks like on OpenSea is that I will sign that, yes, I'd like to sell NFT number one, and that transaction can be sent immediately to list it. That transaction can be sent 24 hours from now when there's a bid, or that transaction can never be sent and it can just get invalidated, right? But what it lets us do is it lets Openc store that record that they can then pull and apply at any point in time. And so essentially, what Openc does is they act as the marketplace where people would sign, sell transactions, meet people who want to make on chain buy transactions, they match them together, and then finally you submit the transaction on chain and it executes like it should so that the seller gets the ETH or the tokens that they want and the buyer gets the NFT that they want, all while avoiding on chain transactions as much as possible.
01:15:05.236 - 01:15:17.022, Speaker A: And there's no risk of getting executed at a bad price because you sign the transaction at a particular price, right? You say, I only buy this NFT at this price. I only sell it at this price at a minimum.
01:15:17.166 - 01:15:36.018, Speaker B: Exactly. So your parameters are encoded in your signature. And that's the best part of cryptography. Right. If OpenSea tries to manipulate it, they say instead of Anish selling his loot for $100, now he's going to sell it for $0.01. Right. Even if they change that data, that automatically voids my signature, which means it no longer applies and that sale isn't valid.
01:15:36.018 - 01:15:37.918, Speaker B: So which is super unique.
01:15:38.034 - 01:15:51.340, Speaker A: Yeah, I love it. So what features taking a step back here, what features do you think are missing from the current state of the NFT secondary market?
01:15:52.510 - 01:17:01.810, Speaker B: That's a good question. I think my answers might be different from someone that's trading NFTs day in, day out, or different from a collector. I think every participant in the ecosystem will say something else. I think for me personally, the two biggest ones first is the curation aspect, where I, as someone who don't have enough time to look through all these NFTs, follow every launch, I want to know at a glance which NFTs are the ones that people love, which are the cool ones, what should I be purchasing? And so I think filtering, curation, being able to go from a collection of 100,000 items, I think Art Blocks is a good example, right. Where there's over like two 3400,000 different types of art blocks across playgrounds, across curated, and all of them are super fascinating, but all of them have different prices. If I search up art blocks, it'll pull up all different types of collections and it's just really difficult to decipher in on like, how do I go to OpenSea and find a Fidenza? Right? It's really difficult for me to do that, at least from an average user. So I think filtering and curation will become really important with these NFT marketplaces.
01:17:01.810 - 01:17:41.390, Speaker B: I think the second part, and that might be like the implicit trader within me wants an easier venue for liquidity. Right. We've started to see it already with things like Nftx and pooling together these things to have one price that you can apply to a collection. But I think where we're headed is going to be almost an order book for NFTs, where people can submit their bids and people can submit their offers and they'll be like matching like there is it'll be like the BitMEX for NFTs. And I think that's where we'll finally get some super fascinating price discovery where people are trading these not just as fungible assets, but now as entire collections and the price of the collection.
01:17:41.810 - 01:17:49.060, Speaker A: Okay. And do you envision that to be like a global order book that spans a bunch of different venues, or how does this work?
01:17:49.510 - 01:18:33.886, Speaker B: I think it would have to be a global order book unless all the liquidity is trapped in one place. Right. I think Larva Labs could probably make do with just one order book for CryptoPunks because most of the crypto punk volume is done on the Larva labs platform via their contract in contrast to something like art Blocks, where some is primary market, some is secondary market. There's various places where you could list it on Zora, you could list it on OpenSea, on Raw, where there might be a global one. And I think I would prefer a global one because if this is something that's on chain, if it's something that's really accessible, if there's an API, there's a lot of composability that can be done. Right? It's basically an oracle, an accurate price oracle of a collection. So, yeah, I hope it's global.
01:18:33.886 - 01:18:35.166, Speaker B: It'll be fascinating.
01:18:35.358 - 01:18:55.400, Speaker A: What is your theory for why custodial trading for NFTs has not taken off at all? Because when we look at regular crypto tokens, they trade their biggest volume on centralized exchanges. But centralized exchanges have been really slow to list NFTs. Why?
01:18:56.650 - 01:19:35.362, Speaker B: I think there's two parts to it. I think the easy answer is we haven't seen it thus far because nobody's done it thus far. Right. I think the first I heard of an exchange doing NFTs was like FTX, and that was like maybe three weeks ago, right? And then coinbase last week. So it's still really early where these exchanges are picking up and coming into the NFT space. I think the second part of non custodial is I think it's the ethos of NFTs as a whole, right? Where the reason why NFTs are special to many people is the ownership know, it's like on Twitter, you'll go and there'll be people know, I just copy pasted your NFT, right? This is my JPEG now. And they'll reply with that.
01:19:35.362 - 01:19:55.642, Speaker B: And the reasoning it's special is because I own this NFT, right? My address is the owner. And I think that sort of even psychological aspect of owning something goes away when it's in like a custodial way, where it's sitting in an exchange account, where you're like, okay, is this really mine? But when it's in your address, when you can see it, that feels fun.
01:19:55.696 - 01:20:03.870, Speaker A: It would be so funny if the petty NFT critics are the ones who drive people to more self custody.
01:20:04.930 - 01:20:05.680, Speaker B: Right?
01:20:06.130 - 01:20:41.398, Speaker A: Okay, so now I want to change gears quite a bit. I want to talk about ethics in crypto. So for anyone with your skills who looks at so many contracts, so many open source contracts who has also so much knowledge about how contracts are vulnerable such deep experience in NFT primary markets they have to grapple with the question if code is law and if you saw vulnerability in a contract, what do you do with it? What are your thoughts on this topic?
01:20:41.574 - 01:21:54.906, Speaker B: Sure, I think it's a heated topic. I think personally, I do believe that code is law, although the prevailing argument against that is the law is what was intended, not what is applied. Right? For example, if you write a smart contract that doesn't intend to give someone a million dollars in an exploit, then if somebody does get that million dollars they're effectively breaking that law, right? They're breaking the intended functionality of the contract. The way that I see it is a little different, and that might be my naivety. I don't run a protocol that has billions of dollars in it, so it might be just my viewpoint. But I think these similarities between solidity, I think, are closest to something like aeronautical engineering when you're at NASA and you're building rockets, where any decision that you make has its impacts and you can't change those impacts in the past, but effectively the decision you make is the law, right? So if I go for flimsy parts to save costs, if I accidentally miss a panel on a space shuttle and that space shuttle blows up, I can't go back and say this wasn't intended functionality, this was an exploit. No, this is a mistake I made, and now I have to deal with the repercussions of that mistake.
01:21:54.906 - 01:22:58.238, Speaker B: So I think that's the same way that I think of as code is law, where what you write is what gets put on chain. It's what people interact with. And there's that implicit understanding that anything that happens, even if it's beyond the intended functionality, you have to adhere to. I think there is the point of like, what's an exploit versus what is arbitrage? I think exploits specifically to me at least, are where the functionality that a developer didn't intend for is exploited, right? Where a good example would be something like the meebit arbitrage where the IPFS data was leaked off chain and that was used to have an unfair advantage over the minting process. That is an exploit. Right? Or if one of these various uniswap v two forks that has some variables changed or some code flaw is exploited, that's an exploit. Alternatively, for me arbitrage is a situation where you adhere to the intended functionality of a contract, but you're still able to make a profit out of it.
01:22:58.238 - 01:23:29.706, Speaker B: And a good example of that in the NFT world is sort of the punk Nftx mebit ARB, where for a brief period of time, the Nftx pool that held punks, you could basically redeem a punk and claim the free mebit associated with it and then return the punk. And you could rinse and repeat this multiple times to get free mebits. Now, one might think, okay, you're exploiting the mebits contract. And a lot of people did think that. I don't consider that an exploit, though. That's more an arbitrage, right? You're using your information to adhere to the contract. The contract said one punk will get one free EBIT.
01:23:29.706 - 01:23:39.506, Speaker B: You're not changing that. And for a brief period during that transaction, you did own the punk. So you were the owner and you were doing the rightful action. So I think that's more an arbitrage. And the way that I think about.
01:23:39.528 - 01:23:55.910, Speaker A: It, yeah, I think I would agree. But I feel like isn't that almost a canonical view in crypto? That. Didn't you confirm that? You think that if it breaks the intended behavior of a developer then it is an exploit?
01:23:56.650 - 01:24:34.100, Speaker B: That's correct. Although I don't think in the sense of code is law, I don't think it's like the exploit shouldn't be punishable in that sense. Okay. Where if something does happen and again I preface this with this might be my naive view maybe five years down the lane when I'm maybe running a protocol, I'll be like, okay, you know what, whatever I said five years ago, forget that. But I think the way the code is written is the way that it should be executed. There's no aspect of the social law there. The code is the hard and truth law at the end of the day.
01:24:34.100 - 01:25:02.678, Speaker B: That doesn't mean that you can't be a white hat, though. I'd consider myself a white hat. If a vulnerability came up, I wouldn't be running to exploit it, I'd be running to hopefully help save those funds. So I think the social aspect comes one layer on top of that where even if code is law, there's like an implicit social understanding that you choose the decisions you make, right? The code might be wrong, but you choose to exploit that code. Right. You can either save the money or you could run away with the money. That's your choice.
01:25:02.678 - 01:25:08.526, Speaker B: So yeah, you could be governed based on your choices. I don't think you can be governed based on the contract and the code.
01:25:08.708 - 01:25:33.990, Speaker A: Okay, so if as happened in the last couple of days, a protocol gets hacked and then the attacker gets doxed by whatever way I mean, usually they are like smart people at work trying to figure out who is behind the exploit and then they threaten to DOX someone or threaten with legal action. What do you think about these steps? Do you think that they are valid to take for protocol developers?
01:25:35.130 - 01:26:14.594, Speaker B: Sure. So I think at a high level protocol developers choosing to go the way of regulation is a potential outcome. I can't say it's a guaranteed I don't know for sure. Do I think doxing is a good thing? I'm very strictly opposed to doxing. I think it's only a negative something where not only does it hurt the project, but it also hurts the people that are involved. And so as minimal doxing as possible, if none really is what I'd advise for in terms of the law, can you get tried for being a black hat? Yes. Right.
01:26:14.594 - 01:27:13.142, Speaker B: We've seen that in the conventional world, if you break into your bank, even if the code is the way that they've written it, you will get tried for being someone who broke into a bank. And I think the same thing will eventually apply to crypto as well. The only added advantage here though is that there is the middle ground of being a white hat, of being a gray hat, of being someone that's rewarded for finding these vulnerabilities, right? And in the case of crypto, you get rewarded far more than you do in the conventional world, right? Like bug bounties for a bank might be in the $5,000 range, like we saw with the miso exploit. And Sansaisi's son, he got nearly a million dollars right, as a bounty for that. And there's, I think, a lot more incentive where it'll be easier for someone who's thinking of exploiting a protocol to step back and be like, okay, I can make the correct choice and still walk away with potentially life changing amount of money and make a good name for myself and whatnot. And I think that's something that's unique to crypto that isn't possible anywhere else.
01:27:13.276 - 01:27:38.480, Speaker A: Yeah, 100%. I really like sort of the size of the bug bounties that projects offer in order to incentivize honesty, right? So I think a topic, and this is our last topic of the day, a topic that always comes up when talking to someone who's really young and already really experienced and obviously like a super high performer in crypto. How do you learn?
01:27:38.850 - 01:28:13.706, Speaker B: It's a good question, and you flatter me. I like to say, and I mentioned it before, that I'm the stupidest person at Paradigm, and I stand by that. I think the easiest way for someone like myself to learn is to surround themselves with super smart people and it'll just rub off, right? Just getting to work with the smartest minds in the industry, the smartest minds in a space, you learn from them, you learn the way they do things and you pick up on it. And so that a huge motivation for why I'm at Paradigm is to get to learn with people I look up to people like yourself, who I get to work with on blog posts, on.
01:28:13.728 - 01:28:16.540, Speaker A: Articles, have this conversation and get to learn, my friend.
01:28:17.710 - 01:28:53.960, Speaker B: Yeah, I think that's probably the easiest way that I learn is to just be surrounded by smart people. And crypto offers that very easily through Twitter and being accessible telegram groups where it has never been easier. I don't think there's a single industry where it has been easier to reach out to the smartest people in the know. They're a twitter. DM away. I could not imagine saying the same, know, reaching out to an astronaut or reaching out to the President of the United States versus here. I can reach out to the leader of a multi billion dollar protocol and there's a very high likelihood that they'll say, yeah, GM, and then they'll reply to what they think.
01:28:54.410 - 01:29:35.182, Speaker A: Yeah, that's something that has also worked for me, I think, in a huge way. I think always trying to be the dumbest person in the room. And if you're no longer, then I think maybe it's time to move to the next challenge and level up, even as long as you don't. I think this is probably the case for most people who are listening at this point. They may not have access to all of the people who they might want to have access to one day, but they can still aspire to. And I think Twitter is such a good way, honestly, to feel close to people and almost everybody responds. You can tweet at everyone, 90% chance you will get a response.
01:29:35.182 - 01:30:11.374, Speaker A: Many people even have DMs open. I can only reiterate exactly what you said. I think because Twitter is so prominent in crypto, I think that plays a huge role in how accessible it is and how fast people catch up and how fast people learn. So I think Twitter being the center of the space is just such a huge asset. It's almost like impossible to overstate, definitely. What skills do you still want to acquire if you think ahead on the next one or two years? What skills do you want to acquire that you do not currently have and why?
01:30:11.572 - 01:30:56.910, Speaker B: It's a good question. I think things that I want to learn, I can break them into technical and then nontechnical. Almost on the technical side, I think I'm still very novice in terms of even programming. I think I'm surrounded by people that have been programming for decades and I've only been alive 19 years and there's people that have been coding for longer than that, so lots to learn from them. I think next on the list is getting deeper into Rust, thankfully, to my colleague Georgios, who's been helping with that and learning more about zero knowledge cryptography, I think getting deeper. I think ZK will be huge in the next three to five years, maybe even sooner than that. And so want to learn as much as possible about what's going on there and how I can get involved and stay on top of things.
01:30:56.910 - 01:31:30.210, Speaker B: In terms of outside of the technical aspect, I think the thing that I'm still learning and continually working on, the biggest one is learning to say no. I think as a young person, what I optimized for was saying yes as much as possible, right? Having as many opportunities, getting as much exposure to everything. The detriment of saying yes to everything, though, is that you can only spend so much time on everything, right? It's like splitting your attention across various things, only taking very high level understanding of everything. So it's something that I'm slowly learning how to say no to things.
01:31:30.380 - 01:32:39.600, Speaker A: Yeah, I think I would definitely mirror that. I think saying no is probably something that's something that a lot of people struggle with to get sucked into this open source world. Because when it's so easy to interface with so many people, then you're constantly getting nerd sniped and people actively use this in order to suck you into various kinds of projects and discussions. For me, I would say saying no is a big part. Also maintaining a more healthy work life balance. I would say this is something that I've been really trying last couple of months after burning out for I don't know how many time, but definitely too often and it just leads to lower output overall, it leads to lower happiness, it leads to lower output overall. When I have a bunch of projects that I finish 80% and it's literally like a couple of days of concentrated work to get them over the finish line but I just bid off too much and invested too much in too short a period of time and then I do burnout and then I never finish them.
01:32:39.600 - 01:33:39.140, Speaker A: So I think, yeah, that's for me a big one. And I think also I can always only repeat how important sort of the positive sum mindset is, right? Like playing really long term games with long term people. Twitter is a medium. As much as we love it, it's a medium that is also optimized not only for learning but also for conflict. And Twitter like really rewards the Twitter algorithm really rewards whenever two people get in conflict with each other. It's almost like it invites everyone who follows both parties to join the fight and jump on and rewards you with a lot of attention and rewards you also with a lot of dopamine and so on. And I think one really has to resist the urge to criticize in public and rather try to find exert influence in more constructive ways and really resist the urge to dunk on people.
01:33:39.140 - 01:34:36.690, Speaker A: For me, that's definitely something that I'm actively working on you and I both and trying learning to code, I think that would be a big level up for me. That might be something that I would really try very hard in the next twelve months. Okay, one last question. You started programming at eleven, you found crypto at like 1415, whatever and now we are seeing more and more very young developers in crypto. It's a complete change, almost like from how cryptos they used to work like five to six years ago. What do you think about this next generation of talent? Why are crypto developers so much younger than developers anywhere else? And is this a trend that do you think is going to continue or is it ever going to reverse?
01:34:37.190 - 01:35:40.346, Speaker B: Sure. First I'm really glad that there's really young kids who are getting into crypto and are building because it reminds me of myself and where I am still today and I think it's done a lot of good for me so I'm sure it can do a lot of good for other people as well. I think the reason why kids are entering is two part one is the same reason that I entered, right? It's a way of money that doesn't restrict you to anything. And as a kid growing up, getting to spend money is really cool. Making money, spending money is fascinating and that's one of the easiest draws for people into crypto is the fact that all of these 12, 13, 14 year olds now have a way that they can have a wallet on their mobile phone before they even have a bank account. And it's programmable money, right? It's like building blocks of you can automate this process, you can automate this sending of money between people, splitting money, et cetera, which is really fascinating. I think the second part of it is that kids have the benefit and the advantage of being so young that they don't know the best practices, they don't know the de facto ways of doing things.
01:35:40.346 - 01:36:20.710, Speaker B: And that's really important for something like the blockchain, which is young in and of itself, where the same principles from decentralized world don't apply. Right. You learning database theory in a college class is not going to apply one to one to you making smart contracts on ethereum, right? Writing smart contracts, writing solidity isn't a class that's taught in college. And that's one of the benefits, I think. The folks at Rari Capital, they have this phrase, neuroplasticity, which is a bit of a meme, but it's like your brain is continuing to grow as you're a kid. And I think that's one of the benefits of kids entering into crypto and building early on is that they learn the new paradigm. Solidity might be some people's first language.
01:36:20.710 - 01:36:49.950, Speaker B: They will be the blockchain developers, because that's all they will know. And not to say that past world experience isn't relevant, but the new thinking way, the new paradigm of thinking is also really relevant. Do I think this will keep happening in the future? Yes, I think there will be younger and younger developers. They might not look like what they look like today. Today we've got fantastic 15 year olds writing solidity maybe five years down the lane. The next language that 15 year olds are learning is Cairo, right. People doing ZK math at 15.
01:36:49.950 - 01:37:03.940, Speaker B: And I think it'll continue to evolve, but so long as we have an open protocol that allows anyone to participate, I think the window of talented developers will continue to get younger and younger as people are excited about building.
01:37:05.270 - 01:37:52.980, Speaker A: It feels like that it's almost like how much productivity was unlocked for humanity at large when women started entering the workforce right, which was sort of socially prevented for a very long time. It's very interesting to think about what could happen if all of the creativity and neuroplasticity of the average, like 15 year old programmer could also start to shaping our world. Last explanation I would maybe offer is sort of one that plays off your own story, right? It's almost like a selection bias, right? So if you're a very talented and smart 15 year old, where can you even go and make money? It is only crypto. They all come to crypto because crypto is like the best way. Right?
01:37:53.510 - 01:37:54.386, Speaker B: The only way.
01:37:54.488 - 01:38:27.914, Speaker A: It's the only way, yeah. I think I would second all of what you said, I think we will see more and more young people in crypto. And I mean, this plays so well together with the fact that you don't have to trust them. Right. I mean, sort of. The one thing that I would say, probably about teenagers, definitely about myself at that age, is that they may not be the most reliable, they may not have the highest ethical standards and the strongest values. It's completely natural.
01:38:27.914 - 01:38:41.518, Speaker A: You're not like a complete person at that age. Nobody is. But when we're working with smart contracts, then you don't have to trust someone. You only have to trust what they put in the code. And I think that's a really beautiful combination.
01:38:41.694 - 01:38:43.810, Speaker B: That's a great point. Yeah. Agreed.
01:38:45.030 - 01:38:53.990, Speaker A: Anish, thank you so much for having this conversation with me. I had an absolute blast. Are there any closing words or messages for your followers?
01:38:55.530 - 01:39:05.974, Speaker B: Likewise. Thank you, Hassu, for having me. This was fantastic. I think the only closing message is keep building and do it open source. Oh, yeah, that too.
01:39:06.172 - 01:39:06.818, Speaker A: Open source.
01:39:06.834 - 01:39:11.694, Speaker B: As much as you can so that I can hop in and play around and we can go from there.
01:39:11.812 - 01:39:13.166, Speaker A: Amazing. Thank you so much.
01:39:13.268 - 01:39:14.026, Speaker B: Thanks, Asuk.
01:39:14.058 - 01:39:14.380, Speaker A: Take care.
