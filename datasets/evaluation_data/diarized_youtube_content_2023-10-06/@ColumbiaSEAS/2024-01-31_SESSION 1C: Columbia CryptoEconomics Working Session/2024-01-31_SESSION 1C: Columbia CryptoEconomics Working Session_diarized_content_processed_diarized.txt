00:00:09.690 - 00:00:54.118, Speaker A: Hi everyone. Thanks for having me virtually. I'm very sad I couldn't make it to the event, but I hear it's been great so far. I'm excited to present fun and games with inclusion list today. I think it's a nice segue to Mike's talk, and especially the questions that came up after the talk. So the goal, all that I want to achieve today is to show new attack patterns. I put attack in quotes because they're not really attack, but I lacked a better word, leveraging some new results that I've seen in the literature and that I think will become more and more relevant in the future, and mostly using inclusion list as case studies.
00:00:54.118 - 00:02:06.900, Speaker A: So I think these results are relevant for inclusion list, but I think they also go recording in progress. So let me start with a bit of a recap, first of what the inclusion lists are. So in this talk, I want to give a model that abstracts as much as possible from the technicalities so how the list is constructed and how they work from a consensus perspective. And I'll just assume that if there is a list IL at slot n, then the block producer for slot n must satisfy the list. And satisfying the list means either including all the transactions that are in the list or running out of gas, meaning I can't include more transactions from the list. So either of these conditions needs to be true for me to satisfy the list. So with these properties, a non empty list, so that contains transactions, it can never hurt an honest proposer who doesn't censor, and by honest, more on that in a few, I'll precise what I mean here, let me just start a timer as well.
00:02:06.900 - 00:03:00.580, Speaker A: So I'll give some assumptions on the model. I think they are fairly specific, so I'll try to define some player types, their strategies, and their behaviors. In my opinion, I think it pays off to be precise and examine our assumptions a bit better. We've talked a lot about censorship, and we've talked a lot about what people would do or should do or might do in the future, given certain mechanisms. But I think it makes sense at this point to try and be a bit specific and precise with these assumptions. I'll try to aim for some generality, but I'll note that inclusionists themselves were designed with a specific type of behavior, and even a specific type of censorship in mind. And so some of the results might change potentially drastically if the assumptions or the mechanisms are different.
00:03:00.580 - 00:04:02.306, Speaker A: So the first part of the model is the idea of sensory transactions. So we assume that each transaction has a type which is either sensible or not sensible. We don't care about why this is true, why the transaction is sensible, we just assume that the type is given to us exogenously and that it's common knowledge. So we all agree which are sensible and which ones are not sensible, and the type of a transaction only really matters to restrict the action space of specific player types that I'll detail in the next slide. Another assumption I'll make is that the inclusion lists that we have in our mechanisms or in our games, they only contain sensible transactions. And I think this is without loss of generality, because if they contain non sensory transactions, then it doesn't really change what the players would do with them. And so here are some proposal types that I think make sense to discuss in these models.
00:04:02.306 - 00:04:41.086, Speaker A: So the first one is honest or non censoring. So the honest proposal, if they are solo building, they would include all the transactions from the inclusion list, unless they can make a full block that is more profitable. So they will prefer to include transactions that are in the list. If they are a Mevboost user today they will only connect to non censoring relays or builders. So we assume here that there is also common knowledge on which builders are censoring and which are not. And the honest proposals only connect via relays or directly to builders which are non censoring. Another type of proposal type is the groovy proposal.
00:04:41.086 - 00:05:17.678, Speaker A: So this one just cares about making the most profitable block. So if it's solo building, it's going to do basically the same as honest. So it's going to prefer including transaction from the list because they pay fees, so it maximizes the profit. But unlike the honest proposal, if they're using mefBoost, they're going to connect to all the relays and all the Builders. And finally, the censoring proposal. Either they make a full block to defeat the inclusion list that is imposed to them, or they would prefer to miss their slot. So they definitely don't want to make a block that includes any transaction from the list.
00:05:17.678 - 00:06:24.142, Speaker A: And if they are using mev boost, they would connect to sensoring relays or builders only. And so already with these types, we can give a more formal proof of why the forward inclusion list increase censorship resistance, as opposed to list that only apply to your own slot. And the reason is that under this Paradigm, the greedy proposal, they wouldn't make the List for themselves, but they don't mind making it for the next proposal. And so we have this increase in censorship resistance from the fact that we now have a player type that wouldn't make the List for themselves, but would make it for other Players, which are these Greedy Proposals. And so, versus the spot ielts where only the honest proposals make the List for themselves, but they're already sourcing their blocks from non censoring builders, so it doesn't really change anything. So this is a First ResULt, which is Pretty easy to derive, but I think is made a bit more precise with these player types. So we have types for the proposals, but we can also have types for the Builders.
00:06:24.142 - 00:07:13.670, Speaker A: And so for a Builder that is currently summoned to build a block for slot n with a given Inclusion list, the builder can be either non censoring or censoring. So if they are non censoring, they want to create the maximally profitable block with or without transactions from the List. If they can make a full block. And if they are censoring, they don't want to make a block that contains transactions from the inclusion List. But in that case, what do they do? Do they just turn off? And so that's what I want to explore in the next section. So this is block stuffing, which is a phenomenon or an outcome that we might see happen as a result of inclusion lists. So let's say I'm a censoring builder and I'm in a slot that has a non empty inclusion list.
00:07:13.670 - 00:08:18.334, Speaker A: If I can't fill the block to capacity to defeat the list, then I must include transactions from the list. But do I just turn off if I can't satisfy the list, if I can't make that full block? And I'm arguing here that builders might not necessarily turn off. They might put themselves in a situation where they manage to get a full block even though they can't organically get a full block by themselves. So to see why that happens, first, a reminder that the builders, they just attempt to maximize the block value for themselves. I think here a distinction is useful, and it's a distinction between passive builders and active builders. And so passive builder is a bit of a traditional paradigm that I think people have in mind when you think about fee market, which is that you have a demand curve, which is what users are willing to pay for accessing some amount of gas. In ethereum we have EIP 1559, which quotes a base fee.
00:08:18.334 - 00:09:26.720, Speaker A: And so what would happen is the block producer simply picks up the transactions that pay the base fee and they include them. And so the base fee finds this equilibrium between the supply for the protocol or the target supply that the protocol wants to provision and the demand for transacting from the users. And so this equilibrium is reached here. And you have this point, which is the passive gas supplied by this block producer. What a recent paper by Miriam Barani, Pranav Garimidi and team Roughgarden tell us is that we might be in a situation now where block producers are no longer passive and where they become active, and they might be willing to do more. And so, for instance, I might be willing to include a transaction as a block producer, a transaction that doesn't pay the market fee. Even if a transaction is not willing to pay the prevailing base fee as a builder or as a block producer, to maximize my own value, I might still want to put it in my block so that I can extract mev from it and giving me this value.
00:09:26.720 - 00:11:04.740, Speaker A: And so in that case, the user demand curve that we pictured before is not really what the builders are going to be using to decide what goes into their block. So what they really want to know is if they're including some transaction, can they extract some amount of profit from it? And so they are going to rank this new demand curve, which is really how much profit they can get or how much mev they can get from the transactions, and they are going to fill their block until they can't find transactions that pay them a positive return. So in that case, the equilibrium point would be here, and it would be the active gas supplied by the builder. So with an inclusion list, the active builder must fill the block up to some limit, which is the gas used by the smallest transaction that's in the inclusion list. So if the builder wants to make a block that's valid, and if the builder is censoring, they have to keep filling the block all the way until this red line. This is costly, of course, if they keep adding transactions to their block, they have to essentially pay for the transaction to be in, and then they incur a negative profit, or they incur a cost from adding the transaction, which, for instance, doesn't pay the base fee. And so what we see that on the one hand, you have a builder revenue in blue, which is all the gas they use to include transactions that give them some profit, and a builder cost here in yellow.
00:11:04.740 - 00:12:05.796, Speaker A: So, to get to this cost, we have to understand that the builder is subsidizing transactions to enter their block. And they're doing that because they have to keep filling the block to ensure that they don't need to put any of the inclusion list transactions in there. And so, obviously, this cost is positive. But in some conditions, when, for instance, the blue triangle area is larger than the yellow triangle area. The builder might still be able to emit a positive bid. In particular, if there's already a lot of active gas supplied that keeping a positive profit in the mempool, the yellow triangle might be quite small. And so if I'm a dominant builder that is censoring, I might still find myself in positions where I make a bid which is relevant for the proposers to accept, and I might even make the winning bid, even though I kind of stuffed my block with transactions that I wasn't really prepared to include.
00:12:05.796 - 00:12:55.708, Speaker A: But the inclusion list or the presence of the inclusion list incentivizes me to do that. So today there are some technical limits. So for instance, as a builder, I can't include a transaction that doesn't pay the base fee. So if the maxi of a transaction is below the base fee, but I see maybe two ways in which this might be not true in the future, or at least this constraint might be relaxed. So the first one is the base fee itself currently is charged per transaction, but we could change it to a way where the base fee is charged at the end of a block. So we don't require every transaction to pay the base fee, but we require at the end of a block to have some amount that is burned which is commensurate with how much gas the block has used. So this change is a protocol change.
00:12:55.708 - 00:13:25.732, Speaker A: We could go through with it. In fact, it was in my recollection, the first design of the IP 1559 was charging the base fee at the end and not per transaction. It sounds like this change would make stuffing worse, but I also think it might have positive benefits. For instance, more efficiency. It allows a more frictionless market for transaction to be subsidized and included. Another way that this might be relaxed is with account abstraction and intense. Many users today don't make regular transactions.
00:13:25.732 - 00:14:26.584, Speaker A: They go through a wallet that crafts a user operation for them, and the transaction could be then sponsored by the bundler or some paymaster. And these would work, or even integrate with a builder. And so you might have user transactions that are sponsorable via this intent or account abstraction mechanism. Something we're doing at the moment with a group from San Jose State University is trying to get an estimate of how many blocks may be stuffed profitably. So given the data that we have that we've seen so far, are there blocks? What will be the fraction of blocks where this stuffing could happen? I think this is an interesting project. So we're using the mempool data from block native to see what's currently sitting in the mempool and to estimate how much it would cost to stuff the block. So to estimate the area of the yellow triangle in the figure, we are comparing that with the standing bids in the mev boost auction.
00:14:26.584 - 00:15:31.424, Speaker A: And so we're trying to see, okay, even if we had to pay this extra cost of stuffing the block, might we still be competitive and win the auction after the stuffing? There's a lot of assumptions in the methodology, but I think it could be nice to know. And it's also, in my opinion, a very good use case for the mempool data as a research tool. So some takeaways I want to get to here, and maybe a digression is given this new paradigm of active block producers, I think it might be useful to reassess what we think of block economics. So the fee market might be a weak signal for what should be in a block. It's really more here a resource control mechanism, because, for instance, I might not be willing to pay the base fee, but my transaction might still want to be included by the block producer. And currently the protocol has a uniform prior over time for when the resource should be available. So it tries to target some average supply, but it provisions the same amount of gas per unit of time.
00:15:31.424 - 00:16:43.640, Speaker A: A fun idea, which is a bit more of a digression, is we could have scheduled periods of high usage or high supply, and periods of low usage and low supplies. For instance, we could say in the morning we target less gas and in the afternoon we target more gas. But the uniform allocation of gas is credibly neutral, at least. So anyway, these are some folks that come from this active block producer paradigm, but maybe more of a digression from the externalist topic. All right, so in this last part, I want to talk about what I call commitment attacks, or what other people have also called commitment attacks, which are ways that games might be played between the proposers to try and defeat the list, or to exploit the fact that the list or the mechanism exists in the first place. The main idea of these attacks is that the forward inclusion list design entangles the current and the next proposals. So the current proposer is making the list for the next one, which means that potentially their payoffs might be interacting, and so games could be played between the two proposals.
00:16:43.640 - 00:17:56.860, Speaker A: So what I show here is two attacks that are kind of dual to one another, that leverage a commitment device external to and faster than Ethereum, which allows for these fast games of commitments. So these two attacks are the bribing attack and the extortion attack. In my opinion, the attacks are a bit far fetched. I don't necessarily expect them to see being deployed in the wild, but these surface patterns that in my opinion are important to keep an eye out for in the future and which may lead to different attacks or more sophisticated attacks further down. So to understand these attacks, I'll first define the censoring surplus. So rational proposers would rather not have a list for their slots because the inclusion list either turns off or reduces the censoring builder value. So when I have censoring builders out there that provide more value than the non censoring builders, even if they manage to defeat the list by stuffing their block, as a proposer, I would expect to receive a lower payout from the censoring builder if the list exists.
00:17:56.860 - 00:18:55.900, Speaker A: And so I call delta this difference between the best sensoring bid and the best non sensoring bid. In the following, I'll assume that this delta is positive. And so whenever there is a list on my slot and the list contains sensory transaction, as a proposer I tend to lose this value delta and so can I save it or can I try to extract it? That's what we'll see here. And so the first idea is the bribe. So if the proposer at the next slot, so n plus one expects the proposer at the current slot, slot n, to make a non empty list, then n plus one might want to try and bribe the proposer to keep the list empty. So they need to commit to the bribe contract before the proposer n slot. For instance, at slot n minus one, proposer n plus one deploys the bribe contract here.
00:18:55.900 - 00:20:11.432, Speaker A: But then the contract needs to understand how much to pay and so this payment would be dependent on this censoring surplus. So if the opportunity cost for n plus one to have a list applied to their slot is delta, then they might want to pay part of the bribe or part of the censoring surplus to propose their end for not making the list. And so they want to pay out some fraction alpha of the surplus that they obtained from the list not being there. But one question is how do we estimate this delta? So we could try to get it from the mev boost bids. So we know that off chain these actors are sending bids in this auction and we can try to classify these bids between the bids that come from censoring builders and the bids that come from non censoring builders. Of course, here there needs to be a preliminary agreement between who are the censoring builders and who are the non censoring ones. And so, once we have this agreement, for instance, via a smart contract, we can estimate the difference between the best sensoring bid and the best non sensoring bids.
00:20:11.432 - 00:20:54.356, Speaker A: For instance, here delta. But how can we make that credible? So, to get a credible estimation of that signal, we need to ensure two things. We need to ensure that the bids are timely, so we need to ensure that we don't consider bids that were made outside of the auction bounds. And we also need to ensure that the bids are reported, that we have access to the data from the bids. And so one way to do this is if we have a chain that runs at a faster frequency than Ethereum, for instance, a chain that has blocks every second. It could BE a roll up, even. We could post the bids in the blocks of that chain, and that gives us the timeliness of the bid.
00:20:54.356 - 00:22:06.832, Speaker A: So we know that if the bids were posted after the start and before the end, we know that they were timely from the auction perspective. But now the question is, who should post these bids? And here we can use the fact that the two proposers, so n and n plus one, they have opposite preferences regarding delta. So the proposer n wants to maximize delta, because the value of the bribe they're getting grows as a function of delta. And so we ask the proposer n to post bids that come from censoring builders, and it's in their interest to get to the highest possible bid. So the bids are signed by the builders, and proposal n has the incentive to be very timely and to post the highest bid possible that they see. On the other hand, n plus one wants to minimize the value of the bribe that they pay to the current proposer n. And so we task them with reporting the non censoring bids, and they are going to try to give you the best non censoring bing that they see in an effort to keep the bribe amount as low as possible.
00:22:06.832 - 00:22:56.704, Speaker A: And so with this game, we can actually arrive at a truthful revelation, or approximately truthful, depending on how timely we are, of how much the value of delta really is. There are some criticism to this attack. The first is the gas cost. So there's a lot of ways that you will end up paying more gas Than actually you're getting Back with the bribe. So you must expect that the profit from the bribe compensates the cost, for instance, of deploying that contract. There are criticism about the complexity, obviously, like there's a lot of moving parts. You have to ensure that the current proposer knows about the bribe so that they think to not make the list with the knowledge that oh, I might be getting paid out after that.
00:22:56.704 - 00:23:46.416, Speaker A: And then you can also argue that it will be Much more simple for proposal n plus one to just give a cent or a dollar to the proposer behind him to not make the list in the first place. And you don't have to bother with this whole infrastructure of trying to get this credible signal of delta just a bit more and I'll finish. So the duel to that is the extortion. So the attack can go in the other direction. So in the other direction you can have the current proposer threatening the next proposer with the inclusion of sensorable transactions in the list. So you can demand the censoring surplus from n plus ones. You can say I will threaten you with putting something in my list unless you give me the surplus you would get from me not putting anything in there.
00:23:46.416 - 00:24:35.976, Speaker A: So you need to credibly commit to pay out these auction proceeds. That part is bit unclear, but I won't detail that too much here. We can address that in the questions. Yeah, some quick takeaways on this. I think this attack is a bit contrived, but this idea or this pattern of having a faster domain on which we can prove data from Ethereum and in particular things that happen between Ethereum blocks, I would expect that we'll see more and more of that. So we can make commitments in this interval on the faster chain, and we can essentially have a lot of programmable or triggerable actions that are based on events that happen between the Ethereum block time. And I think this is a pattern that we see reappear.
00:24:35.976 - 00:25:07.370, Speaker A: A second thing that I want to take away from that is my opinion, commitment attacks on the protocol mechanisms. They seem powerful, but they also seem a bit understudied. There is some literature, but just not that much on proof of stake or on the mechanisms that we use or that we are thinking about in our Ethereum protocols. But see this work by Nikolai Schwarzbach and Deji Landis that was recent. And Deji I think is also in the room. So you should find her and ask her more questions about that. Some quick open questions.
00:25:07.370 - 00:25:52.964, Speaker A: I want to think about this work in the context of different inclusion list designs, so cumulative or forced, which are two different designs that people are talking about. I want to understand also what the relation with this inclusion guarantee market. So if I'm forced to include transactions that are in my list, it also provides me with like a short lived block space future. So there might be some important questions there. Something that I think is quite interesting is the idea of quantifying censorship resistance based, for instance, on this distribution of player types or on the mechanism that we have. There's some work by Elijah Fox, Milesh PI, and Max Resnick that I think is quite interesting in that direction. And then I also want to think about modeling these commitment attacks a bit more precisely.
00:25:52.964 - 00:26:24.530, Speaker A: And, for instance, understand, if you have this bribing attack and this extortion attack, they don't really mesh well with one another. So you have to ask yourself, who is the first mover in these attacks and who takes the advantage in this Tackleberg game and what's their endpoint? So we know that commitment attacks are potentially scary, but we don't really know what's the consequence of letting these play out and what's the end game of all of that. Yeah, that's it. Thank you. And yeah, I'll take some questions.
00:26:31.160 - 00:26:42.840, Speaker B: For calculating the yellow triangle using public mem pool data. Doesn't that presuppose like a similar distribution of transactions in the public mem pool than in private pools?
00:26:44.620 - 00:27:35.620, Speaker A: Right. Yeah. So we would definitely underestimate how much, or rather, we would overestimate the cost of a yellow triangle if we don't have access to the private transactions. If we only use the public mempool data, we would potentially miss out on transactions that are cheaper to subsidize to stuff the block, and that would lead us to overestimate the size of a yellow triangle. So I think with this methodology, as I describe it, the best we can hope for is a lower bound on the amount of blocks that would be profitably stuffed, but not more than that. But I think even if we had a result that said, okay, the lower bound is 1% or 2%, I think that might already tell us that it could be fairly significant.
00:27:35.780 - 00:28:08.740, Speaker B: I see. That's very helpful. Um, when you were describing the attacks, you, like, qualified it with, like, I don't actually expect to see this behavior play out in. I, like, expect that Rsync and Beaver would immediately start stuffing blocks as opposed to stop building them tomorrow if this were to be implemented. So I guess I'm curious, if we were to turn this on tomorrow, what behavior would you expect from those large, censoring existing players?
00:28:09.560 - 00:29:04.052, Speaker A: Right. Yeah, I think block stuffing is much more realistic than the commitment attacks. I think I qualified more of the commitment attacks to say that I don't think will be played in a widespread fashion. Block stuffing, I think, would be much more likely. Because if you even go through this trouble of subsidizing intents or transactions that are not transaction like user operations. It might even be pretty hard to detect that this is going on, and this might be opaque because you have this whole supply chain of pipes of transactions going through. And yeah, you might end up in a system where, okay, stuffing just happens as as a result, without an intentional approach from the block producer themselves.
00:29:04.052 - 00:29:58.180, Speaker A: So I do expect stuffing to be happening, and it's something I didn't touch upon here, but it's not clear what's the problem with stuffing as well. So what's kind of weird is you include transactions that maybe shouldn't be included in the first place, because as a block producer, you basically pay for these transactions to go into your block. But I think this signal is also a bit unclear in the sense that when I am an active block producer, I'm including transactions that may not be willing to pay the base fee, but that are profitable for me to include. So that signal of what should be in the block versus what shouldn't be from, I don't know, an allocative fairness perspective to me is already been made a bit unclear by the presence of active block producers.
00:30:00.200 - 00:30:46.864, Speaker C: So in terms of the two big problems I see with inclusionists, one is low participation from the proposers, and the other one potentially the entangling. But I don't see the stuffing as being problematic, because talking to the builders, I think they're just happy to just build the optimal block given the constraints, because now they have some sort of plausible deniability. Legally. At least, that's my understanding. Now, in terms of solving the other two problems, the best solution that I have right now is summary maximization. So in Mike's talk, there was this idea of a summary which has a number of sender addresses and non spares. And I guess what you could do is very similar to burn, where you're kind of maximizing the value of the execution block.
00:30:46.864 - 00:31:07.790, Speaker C: You could have summary maximization where you maximize the number of entries in the summary, and if the condition is not satisfied by the proposal, then the whole beacon block is just invalid. Do you think that could help the design?
00:31:10.080 - 00:31:21.280, Speaker A: Just to make sure I understand it correctly, this summary maximization would be made credible from people checking that the summary is indeed maximal in their view.
00:31:21.350 - 00:31:38.816, Speaker C: Yeah, so every attester observes the mem pool. They kind of build their own summary, and they basically check that the summary that was proposed by the proposer was at least as large as their summary 2 seconds before the end of the slot I see.
00:31:38.938 - 00:32:30.970, Speaker A: Yeah, I think this starts getting us closer to this mempool pre consensus type of mechanisms, where you're trying to get a view of what's sitting in the mempool as maximal as possible. Yeah, I think that would probably, I mean, it does raise the bar to doing these bribes and to keeping the list empty. Yeah, I think that might be a fix and to the point of the block stuffing. Yeah, indeed. If sensoring builders have plausible deniability for making the list, then stuffing is not a problem. That's one of the assumptions that I was saying. Okay, if this assumption doesn't actually hold in practice, that monitoring builders don't want to touch the list, I think the results here would be very different, including the block stuffing for sure.
00:32:34.940 - 00:32:59.410, Speaker D: Why do you think that commitment games are so far fetched? Because to me it seems trivial that non censoring bids are probably going to have a delta over censoring ones. And we've already seen proposers be willing to take non honest behavior like playing timing games, even in the face of a lot of criticism. So it doesn't seem that far fetched to me that we're going to get bribing or extortion attacks. And I'm wondering what the delta is between what I'm seeing and what you are right.
00:33:01.860 - 00:33:57.572, Speaker A: And this is something I realized while I was making the slide. So it's quite fresh. But yeah, this whole infrastructure of trying to estimate Delta I think might just be overkill. You can just directly bribe the previous guy and say, I'll pay you a dollar, and in expectation, like if you have your own internal estimation of what delta should be, or like a running average of what delta is, you know, how much you should be paying the guy behind you to not make the list. So that proposer essentially gets nothing for making the list. So any amount higher than zero in a rational model means the proposer would just accept to take your bribe. I think in practice having a bribe, which is a function of delta, just makes it look a bit more like, oh, we are profit sharing with one another, and you're not being the chump accepting like a bribe of something.
00:33:57.572 - 00:35:03.572, Speaker A: So I'm just saying this whole infrastructure might be a bit too much then for the extortion. Precisely. Something also I also realized during the slide is it's actually pretty hard to do it in a credible way because to extort someone, you have to make sure that they pay out this censorship surplus to some kind of escrow contract. But the way the protocol is currently designed is until the last moment, you can change the fee recipient of your block. So even if you told proposer n okay, don't put anything in the list because I'll rebate you some of the surplus after I get the delta estimation. Then proposer n plus one could defect and change where the surplus is paid out, essentially. And so I just haven't found a good way of making that credible other than, for instance, and asking n plus one to stake on the fact that they won't change their fee recipient at the last moment.
00:35:03.572 - 00:35:21.370, Speaker A: So I just feel like there's some technical issues that make the system a bit more brittle than, than it should be. We're going to take a break now. Thank you. Bonave.
