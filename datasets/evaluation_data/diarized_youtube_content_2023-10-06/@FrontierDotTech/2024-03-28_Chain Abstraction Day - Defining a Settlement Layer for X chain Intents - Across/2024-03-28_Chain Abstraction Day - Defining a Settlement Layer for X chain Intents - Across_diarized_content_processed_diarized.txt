00:00:09.640 - 00:01:05.714, Speaker A: Awesome guys. All right, so if you want to hear about intense, something that I think everyone's going to be talking about a lot today, come listen. And since the frontier guys are big on cake, we're going to be talking about a crosses take on cake because in many ways we are quite similar to them, the way they think about interop. Alright, so what do we want? What we want is pretty easy, right? We want fast, cheap and secure interop that is so seamless, you don't even know that you're talking with blockchains. You just want it to work. And there's a sort of concept that people like talking about that interops should be like TCP IP. It should be like this base layer where like messages just flow between blockchains.
00:01:05.714 - 00:01:42.910, Speaker A: Easy, no problem. So simple. So like water, you know what's happening. I don't think I agree with this because in this model of interop, like TCP IP, we're sort of distilling the problem where bridging is just like sending a message. The formatting here changed a little bit, but it's just like we're going to send a message from blockchain a to blockchain b and it's going to work. But we want to send this message quickly, cheaply and securely. And this is like basically impossible to do.
00:01:42.910 - 00:02:09.910, Speaker A: We might do it five years with super fast ZK. Maybe that happens, maybe a super fast, super cheap ZK interop tech. But otherwise sending a message from a to b is not a simple thing to do. And let's again, do it securely too. Security, there's trade offs here. If you want to make something secure, it's usually going to cost more or take some time. And so you just kind of think through these things.
00:02:09.910 - 00:02:35.154, Speaker A: You're like, this is going to be really hard thing to do. And so my answer is just stop sending messages. That's, that's the problem. We're trying to do something that isn't very easy to do and that we should just avoid. And the observation here, this actually follows something Ankit said in his talk earlier, too. TCP IP is moving bytes. We're just moving data around this network.
00:02:35.154 - 00:03:14.674, Speaker A: But blockchains are mostly, and I'll come back to this mostly, they're mostly moving value. And there's a lot you can do when you're moving value. And this has to do with fungibility. And I'll give you the same presentation, one of his slides, or same .1 of his slides, he estimated like 95% to 99% of transactions that we care about are about moving value and not invites. And if that's true, maybe we can solve some of these interim problems and solve some of the UX issues by focusing on moving value. The reason is that value is fungible.
00:03:14.674 - 00:03:56.074, Speaker A: If I'm moving money, I don't really care about how the money gets there. I just care about the money getting there. It's fungible. And this is where my mental model for why intense work so well comes from is you are moving value. Don't care how it gets there, you just want to specify the output. Don't care about the path, don't care about the execution, just want the most value at the end of the day possible. And if we're sending value and it's fungible, we can do fun things where we don't actually need to send a message to fill a user on an interrupt transaction.
00:03:56.074 - 00:04:44.690, Speaker A: So stop sending a message from blockchain A to blockchain V and instead have a network of solvers. We are in the solver layer of the cake right now. So instead of a network of solvers that are observing what's happening on blockchain A, so user deposit transactions and are then filling a user on blockchain balance with their own capital. And suddenly we get rid of this messaging problem, at least a real time messaging problem. And so this is my take on why cross chain intents are the future of interop here. With this intent concept, solvers can fill users with their own capital and they can fill them quickly and cheaply, and then the solvers get repaid later. And it works.
00:04:44.690 - 00:05:19.826, Speaker A: It sort of solves our dilemma that we started with. So going a little more detail because it was pretty high level, just how the solar thing works. I look at, and I always have looked at kind of the across system as something of a cake too, and follows very nicely with what the frontier guys are talking about. We got three layers. We got the intent layer where the user is specifying what they want to do. And this might come from a front end, like the across bridge, across two. It might come from a bridge aggregator, it's going to come from RFP systems.
00:05:19.826 - 00:05:55.904, Speaker A: And increasingly I think it's going to come from applications themselves that are controlling user order flow. We then have a solver layer and the solver layer is competing to fill the intent specified at the user layer. And then lastly we have a settlement layer. And what's actually going to happen is that the user funds are going to get escrowed in the settlement layer. The solver is going to fill the intent. And then at the end, after we verify the intent was fulfilled, the solver gets paid back from the seller layer. That's how I think the future of interop is going to work.
00:05:55.904 - 00:06:27.490, Speaker A: And now we'll talk about why. So the advantage here, intents can be really, really fast. This is maybe impossible for you guys to see on your screen, but this is across median fill time from l one to l two. From l two to l one. From l two to l two. And this is Stargate, and this is CCIp. And our median fill times on l two to l two are 7 seconds right now, 12 seconds for l two to l 123 for l one, two.
00:06:27.490 - 00:07:16.584, Speaker A: And we are one to two orders of magnitude faster than these other systems. And how is that possible? It's possible because we have these solvers competing on speed, and they can actually take fatality risk. They can trust centralized sequencers, which is why the l two times are so fast here. They can trust centralized sequence search and just fill users as soon as they get a pre comp possible back. And even on l one, they can make probabilistic decisions where there hasn't been a three block, block New York in a very long time. So two blocks, good enough I can start building users. And this is something that you can't do if you don't have these off chain actors taking fatality risk.
00:07:16.584 - 00:07:54.084, Speaker A: You can't have a protocol chain link 60 tp absolutely cannot take fidelity risk. It's not working. So this is why intents are faster. Intents can also be really secure. And the idea here is that this architecture we have separates the interop problem into two parts. There's an urgent part where users want their fast build, and there's the complex part where we communicate between blockchains and understand whether the intent was fulfilled or what's going on there. And by separating these two, we can get a lot more options for how we do cross chain messaging.
00:07:54.084 - 00:08:41.744, Speaker A: The urgent part we talked about, the solver just fills the user with their own capital. And then the complex part, the messaging part, we can verify using any number of cross chain messaging techniques. We can use the canonical bridges, the protocols themselves, even seven day slow bridges possible just be a really long repayment time. We could write ZK proofs for proof generation, because maybe we only need to batch aggregate payments. So we can do one ck proof for many, many intent verifications, or we can do optimistic systems. And that's actually how cross works. We optimistically verify batches of intents and we pay them every hour or two.
00:08:41.744 - 00:09:44.064, Speaker A: And so we were able to solve for interop security without worrying about doing it quickly, which opens up a lot more options for how we can do this securely in general. The third advantage is just cost, the reason why this intent architecture can be so damn cheap. And again, you're not going to really see these numbers here. But across is l two to l two, l two, l one, l one, l two across. This cost here, this is all end gas and transfer costs over the last 90 days. Across can be really cheap because of two things we do. Instead of verifying each intent and having costs, associated messaging costs associated with verifying each intent, we batch them together in bundles, which we can do because the solvers are already making the loan.
00:09:44.064 - 00:10:25.350, Speaker A: So these batches allow us to verify hundreds or thousands or tens of thousands of intents in one transaction. And then further we can do, obviously, verification, which is slow, but it's really achievement security. I have those two things together, and we have really cheap costs. The trade off is that solvers are making short term loans. So making loans or capital, we have a cost of capital. But if we do the math, this trade off makes a shit ton of sense. So here's my theoretical example, and I'll kind of walk you through it.
00:10:25.350 - 00:11:03.846, Speaker A: Pretend we're bridging $50 million in volume a day, and we're going to do this over 25,000 transactions. So, okay, so I've got a $5,000 transaction size, 25,000 transactions. What does this cost me? Let's assume that we have a default cost. The user has to make a deposit, and then on the destination chain there has to be a fill. So there is going to be some gas costs. That's unavoidable of the user deposit transaction and the destination chain fuel transaction. But what are our verification costs on the across side? With this intent bridge, we need to make loans for about an hour.
00:11:03.846 - 00:11:27.144, Speaker A: And if you assume a 10% annualized interest rate, that $50 million of loans for an hour is $500. Small amount of money. It's kind of tiny. And then we've got to send a certain number of canonical messages in these batches to verify these repayments. And I'm estimating these canonical messages at something relatively high. Put a higher number if you want. I'm going to say these are expensive messages.
00:11:27.144 - 00:12:19.044, Speaker A: We're spending like under three grand a day in our verification process, and that's amortized over 25,000 transactions. If I send messages for each of these transactions, like something like what Stargate does, I've got to send a message 25,000 times. And even if these are like l two based messaging is really cheap, I'm being generous here and saying this cost an average of $2. It's a lot more than that. It's going to cost you 50 grand. And so this true here, where the cost of the loan is just not much relative to the advantage we have from this batching, and we get faster cheap, faster speeds and better security. So when you talk about scaling this across, is this settlement layer that could scale to transfer a billion dollars a day.
00:12:19.044 - 00:13:11.354, Speaker A: But we're actually going to only send like 150 canonical messages because of this badger. And if you had a non intent based design, you'd be sending something like 10 million messages, which maybe that works. But that sounds exciting expensive to me. And this is my reasoning why, like this TCIP model for Interop, I don't think it's the right one. I think the mental model is going to be more akin to financial model where you are aggregating these fungible transactions and batch settlement. So our vision, I think I'm reversed, apologize across the entire we want to help build a efficient RFQ and intent irrigation systems. One of the things that Ankit's kink frontier research piece talks about is solver price competition versus solver speed competition.
00:13:11.354 - 00:14:15.588, Speaker A: I want to research with this ecosystem ROQ systems that do both. How do we auction off intense to solve for both speed and cost at the solver layer? I really want to establish a standard for cross chain intents, something that can get as many solvers and as big an ecosystem as possible, providing off chain liquidity for this intent concept. And I think a well designed standard here is purely positive sum for our ecosystem. And at the bottom layer, this is where I think across ultimately really lies where it crosses this settlement layer that escrows user funds and releases them to solvers when these intents are verified. And our goal is to define across to build this cheap, secure and super efficient settlement system for these question intents. And so looks like a cake, which is the theme of the day. And that is my talk.
00:14:15.588 - 00:14:17.524, Speaker A: Guys, thanks.
