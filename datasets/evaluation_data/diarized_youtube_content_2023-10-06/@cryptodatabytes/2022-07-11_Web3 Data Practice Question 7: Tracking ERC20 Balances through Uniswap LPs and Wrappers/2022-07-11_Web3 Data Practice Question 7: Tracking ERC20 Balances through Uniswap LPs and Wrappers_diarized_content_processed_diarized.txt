00:00:00.250 - 00:01:00.660, Speaker A: You all right? Good morning. Let me make sure desktop audio is off. Input is off. All right. Oops. Start. It's share my screen participants and we need to tweet.
00:01:00.660 - 00:02:52.600, Speaker A: We should be good. Okay, let's see. Shareholder it morning, Olga. Okay, here, let me double check that people can hear me on stream. All right, audio on stream is working. Zoom. Audio I think is working.
00:02:52.600 - 00:03:50.102, Speaker A: I need to turn this light on. All right. And then let's see what's the last thing I need to. Okay, I was going to add one more bonus question here. Here it it. All right, let's hope we get through all of this today. I'm not doing anything else, so we'll let this stream go on as long as it does so.
00:03:50.102 - 00:04:43.636, Speaker A: All right, last week or not last week, I missed last week. The week before that, we basically covered everything about ERc 20 balances, including everything from how approvals work, how safe transfer from works, how allowances work, stuff that you normally don't think about. But it is important to know how to track that. We also went through like rebasing tokens, so I think we looked mainly at staked ETH. Do we look at any others? No, I think there's plans to look at eight tokens, but we didn't get to it because staked ETH was already like confusing enough. Again, it's fairly the same implementation for basically any rebasing token. So if you're interested in that, definitely recommend looking there.
00:04:43.636 - 00:05:56.648, Speaker A: So today for this morning at least, we're going to look at how do you track. So let's say someone has USDC tokens, right? If they put it into a liquidity pool or if they wrap it in ave deposits becomes an a token, then if you just query for someone's USDC balance, it's actually not accurate. Right? And this is something that a lot of wallets struggle with because it's like, all right, if I'm Xerion or Zapper and I'm trying to get your total USDC holdings, I have to go through all of these different pools, figure out the logic and add together your balances, right? And that's hard to do, which is why all of these aggregators just show the balances by protocol instead of just like by token, I would say. Actually I think Zapper might have upgraded that, so I might be wrong there, but at least that's how it was before. Anyways, enough rambling, let's get into the questions. So let's see. I'm going to stick with the V one engine for now and we're going to go directly from the transfer table.
00:05:56.648 - 00:07:03.862, Speaker A: Remember that this transfer table is basically just a subset of the logs table, right. It's decoding all ERC 20 transfers and immediately what I'm going to do, and you'll see why I do this later, is I'm going to join ERC 20 tokens. T on T 20 token. Okay. T dot contract address equals transfer contract address, I think where symbol equals USDC. Let's do like a limit ten here, make it easier. Did that work? It did.
00:07:03.862 - 00:08:24.730, Speaker A: Great. All right, so then all we need for balances is again, we've done this before, but I'll just work through from scratch just so everyone can get some review. We want the two received as, right. The person receiving it and the total amount that they have ever received. Some value divided by ten to the we know it's six, but we're going to use the tokens table which has the decimals. All right, so just because this is more scalable and let me just check that this is righteous. Okay, let's do that's, that might take a second to go.
00:08:24.730 - 00:09:07.840, Speaker A: So receive sent. I need to have the chat up just in case. Oops, that's Spotify live streaming. All right, so sent as actually, hold on, I'm changing my mind. Let's do this on the V two engine. I think that'll actually be faster. Ah, 20 other balances by hour.
00:09:07.840 - 00:10:43.960, Speaker A: Okay, for this, what do I care about? Let's just do balances latest. Okay, let it mount. Last updated timestamp it. Guessing we're going to have to do this. Okay, let's hope that runs. But we're basically going to get order by. Let's see who are the top balances.
00:10:43.960 - 00:11:35.770, Speaker A: Order by amount descending. We're getting a top hundred, right? So with top hundred USDC as. Bring that in here and we'll let that work. And next we need uniswap LP USDC as. So let's start with just one example, right, USDC ETH and then we can generalize to any USDC later. It's going to be a little harder, but let's see. Swap the two.
00:11:35.770 - 00:12:23.610, Speaker A: Hopefully it's in the engine. V two router. Ah, let's do pair. Let's do mint. Hold on now let's just do. I wonder if that's going to track everything. Okay, so here's my thinking, right, so I know there's two routers.
00:12:23.610 - 00:13:12.770, Speaker A: Let's see. Because I need a mount zero and mount one in for sure. But I also want the share of the pool, and I've forgotten where that's outputted. I think that's output. All right, I know how to do this. All right, let's go back to the pair. Let's go back to mint and let's just do this.
00:13:12.770 - 00:14:17.740, Speaker A: Where's it. We had this before, didn't we? This one. OopsDc to ETH. All right. Yeah, so this is the right one. So let's start with this. Wait, did this just say no results from query? Uhoh, that's not good.
00:14:17.740 - 00:14:51.438, Speaker A: Let's see. I also need this. All right, sorry. I'm doing like multiple things at once here, but while we figure out what's going on and this balances stuff, we're going to also figure out this uniswap stuff. So I need the console. Everything has to be lowercase. So let's just do two lowercase.
00:14:51.438 - 00:15:18.530, Speaker A: Here, grab this, replace that. Right, hold on. I think I. Let's take this to a new query for now. Yeah. Okay. It does have to be lowercase.
00:15:18.530 - 00:15:51.690, Speaker A: Mount zero. Mount one. All right, I need to remember which token. Which token is amount one? All right, so if we were to go through steps, right, since I think it'll be more clear. Step one, figure out, hold on. Figure out which token is zero, which one is amount one? Right. For USDC.
00:15:51.690 - 00:16:49.220, Speaker A: And then we need to left join the token. Like the LP token. The LP token minted amount by transaction hash to get like the share output or shares, I think is just like LP tokens held over LP tokens. Minted like LP tokens. Total supply. Right. That tells you how much you own.
00:16:49.220 - 00:17:47.694, Speaker A: And then ultimately to generalize, we need to get all pairs created where USDC was either token zero or token one, and then basically run in a loop. That's essentially what we need to do to get the LPs and their USDC balances. Are there any questions about that? So far? I don't think that's super clear, but. All right, I'm just getting into it. Stop me if I lose you. So here, amount zeros 250, amount one. Just looking at this, we know that ETH is 18 decimals, and we know that USDC is six decimals.
00:17:47.694 - 00:18:17.440, Speaker A: So it looks like amount zero should be the token. Yeah, about zero should be USDC. All right, so we know that right away. So I can say select. Does it say sender as part of the events? Yeah. So for ascender, sum amount zero divided by six decimals. Right.
00:18:17.440 - 00:19:08.864, Speaker A: As total USDC added, ordered by two, sending. Anything I want to do before I do this. No. Okay, so that's how much USDC has been added. And let me just sense. Check this by taking this top holder and seeing if they hold this token or hold on. I need to go to.
00:19:08.864 - 00:20:20.346, Speaker A: What's the fastest way of doing this? Go to the contract address of the pair, go to that ERC 20 token, take the sender address, search for that holder and they're not in here. Okay. Something's not right. Let's do this it. All right, I'm only checking them and added right now. So I need to take amount that they've taken out as well. Okay, wait, let me think if there's a faster way.
00:20:20.346 - 00:21:57.870, Speaker A: So. Okay, so technically fastest way of doing this would be we take the. How is this still running? All right, I was going to say we take the balance of LP tokens they hold and then basically figure out the share percentage of that lp pool and multiply it by the liquidity inside the pool to get how much USDC they own. Basically at the moment. One issue with that is I think later when we want to do impermanent loss calculations, we need to get, I guess we don't need how much they added at the time because we can just take their share and multiply it by liquidity at that time. Let's keep it simple. Let's just do.
00:21:57.870 - 00:22:26.450, Speaker A: I can't believe that running this took seven minutes. All right, we're not using that table. Then I need to not mumble. Basically this took seven minutes to run, so we're not using that table. That's all I said. Okay, so let's see. Take how much they've added.
00:22:26.450 - 00:23:47.320, Speaker A: All right. Yeah. All right, I'm going to change our approach. Here we are. Let's see. We're still manually going to track transfers because I think the balances table is not performant and I need to do a lower on this here. Let's just make this easy.
00:23:47.320 - 00:25:24.540, Speaker A: It. So I need this. And then we're also going to need top LP. We have a CT for this, right? So we're also going to need top shares and then it will need with supply as get total supply of updated equals. This works. So we need to get the total supply of USDCLP tokens we need. All right.
00:25:24.540 - 00:27:34.780, Speaker A: Quick degree as get totally. Why does this not work? This we're gonna get people's balances, which again is their amount, which is going to be divided by the total supply. And then that's going to be multiplied by current liquidity basically. And that would give us actually, we don't need total USDC and Ethan pool, we just need total USDC and that should give us USDC balance. All right, so walking through this one more time, we're getting their normal USDC balances, and then we're looking at this USDC ETH pool and basically getting how much USDC do they have? Like do they own from the pool? Right. So if I go back to the contract for USDC ETH, you can see exactly the balance in the contract already. So I could do something complicated, such as looking at, for example, going to the logs and seeing what is the final reserves of each token.
00:27:34.780 - 00:28:52.810, Speaker A: Um, hold on. I think that's what I want here, right? Hold on, reserve. Yeah, it would be reserve zero. Reserve one. Only problem is this is un 112 encoded, so I would have to do a little bit of math to decode it, and I don't want to do that. So we're just going to go with what is the USDC balance of the pool instead. I'm trying to think, is there a fancier way to do this? It where token address and wallet address equals the pool itself.
00:28:52.810 - 00:29:45.570, Speaker A: Will this work? Let's see. All it. All right, so this is incorrect. We know it's not negative 384. So that table cannot be used. All right, going back to basics. So USDC balances as.
00:29:45.570 - 00:31:58.790, Speaker A: Should have just done this from the start with received as select all, select to sum value divided by one e one e six s value where contract address equals the USDC token group by one. Now we're going to do sent as where people are froming it. And then we're just going to do a join, right? So we're joining sent on S from here, let's rename user. User it. So we're going to join on user and we're going to coalesce the sent in case they never sent anything as balance. All right, so this order by two descending. This should work.
00:31:58.790 - 00:32:43.974, Speaker A: Yes, of course. That's figures. Let's try this one more time. This should give us basically USDC balance latest, so then we don't have to mess around with any of this stuff here. We actually don't need this CT anymore because now we've calculated the balance already. And now what we can do is select from here where? Let me just double check. This makes sense.
00:32:43.974 - 00:33:39.980, Speaker A: So this person should own 3.36,000,360 1 million. No, not what I want us to balance 3.64, two something billion. Does that match up? More or less matches up. So we have this and now we want where user so remember, this query here is just checking for. It's checking for how much USDC is held in that uniswap contract because it's faster than looking at reserves and then figuring out how to go from UN 112 to normal numbers again.
00:33:39.980 - 00:34:16.490, Speaker A: Let me see if this works. So this should give us like 54 million USDC and we don't need this anymore. Oh wait, I can't do the limit. 55.5. Honestly. Close enough. All right, so that's the amount of USDC in current USDC liquidity.
00:34:16.490 - 00:35:16.434, Speaker A: And now we need total supply of USDC ETH LP tokens, which we know is this address. So I could do this whole balance thing all over again, but I don't technically need that, right, I just need the mint amounts. So instead what we're going to do here is select what's the fastest way of doing this? Mmm. Okay, before I do that, let me check if they emit that event. So if I go to the pair and I look at mint. All right. No they don't.
00:35:16.434 - 00:36:46.810, Speaker A: All right, so I'm going to replicate this, right? I don't care about that. I don't care about this. What I do care about is that two equals zero. Come on, wifi, work with me. Right? So this, instead of received, now this is burned. And instead of cents, this is minted. So now I just want select here, let's do select value from minted minus select value from burned as total supply.
00:36:46.810 - 00:37:48.780, Speaker A: I don't need any of this and this should work, I hope doesn't work. Please work. So that's total supply and now we need. Oh, we're going to need the user's balances too. So why don't we actually duplicate this completely? Um, wait, why do I already have this here? A zero, b, which one? B four. I needed B 14 with lp balance latest. Okay, if I'm generalizing this later.
00:37:48.780 - 00:39:32.024, Speaker A: Okay, I'm going to worry about generalizing this after this. Let's move this into here. So we have total supply, we have current liquidity, and now we have user balances so we can get people's shares. Now we can say, all right, get from lp balance latest, we want their balance divided by the total supply divided by select. What did I call it? Total from? So we're getting the total that they own from total supply and we're multiplying it by select what I call it select balance. So select balance from current USD USDC liquidity. All right, so reviewing what we just did, we got their lp token balance, we're dividing it by tokens.
00:39:32.024 - 00:40:36.128, Speaker A: Like the total supply of Uniswap tokens, uniswap LP tokens minted to get their share of the pool. And then we're multiplying their share of the pool, which is a percentage by how much USDC is in the contract. Right? So get share of pool as percentage, multiply by USDC in the pool, and let's do this. Hold on. User as USDC balance order by two. And what did I call this whole thing? Uniswap, LP, USDC, select all from Uniswap. We have error.
00:40:36.128 - 00:41:21.836, Speaker A: No viable alternative. Okay, I can't have a comma at the end of the CTE here, that's why. Okay, so this would give us the unisoft balances of USDC, right? And the question was, how do we add this to the holders? So that's easy. We can take USDC balance, latest Val and left join this val uni. All right, I'm going to deal with that error in a second. Oh, it worked. So this is this user's USDC balance in the pool.
00:41:21.836 - 00:41:48.510, Speaker A: So if I go to their address, I should see that they are holding a bunch of unisop tokens, which they are. They're holding 136,000,000 in tokens of this pool. And remember, pools is always. You're getting half and half of whatever's in the pool. So half of 136 is 78. No, that's not right. 68.
00:41:48.510 - 00:42:46.392, Speaker A: 68. Yeah, 68, which is basically what they have here, right? So now it's like we got their share. So let's join this. So we have the bowlat user equals bow uni user. And now we can get for a user, what is their original balance? Original USDC balance. What is their unipool uniswap USDC balance. And then what's their total balance? Plus, remember, you always need a coalesce because they might not have any balance in uniswap.
00:42:46.392 - 00:43:08.976, Speaker A: And if you add or subtract or whatever, a null value, it's going to give you like null. Right? So you always have to have a coalesce as total USDC balance. All right. And now we can do order by four, descending. Am I forgetting anything here? All right. And this should give. Well, shit.
00:43:08.976 - 00:43:41.408, Speaker A: All right, Valuni, right, let me change this. This should give us what we asked for. So that gives us. Oh, well, I realized I skipped the question. I just answered the bonus question. But you found their lp balance and historical change. I'll do that next.
00:43:41.408 - 00:44:26.700, Speaker A: But basically you just take their share over time, right? Like their balance over time. So here we're calculating balance most recently, but if you wanted balance over time, you would just add like a date trunk, like daily balance. Right. So day event, block time as day. Right. Um, you would do that for both from and to. And then when you join, you would join on the user and the day s day.
00:44:26.700 - 00:45:26.160, Speaker A: R day. Right. And then you would have like R day. And then you need like a coalesce on this as well because they might have received but not sent anything as like balance, oops. Balance diff. And then you would add like one more, like add one more CT for some window, like some balance diff over like partition by user, order by day, ascending as daily balance. All right, yeah, I'll write out the whole thing just so it's here.
00:45:26.160 - 00:47:16.610, Speaker A: So select day user and then balance diff and some balance diff from. Oops, it don't need an order by here. Um, but yeah, this would give you just the daily balance of that. Right. So if I take this, hold on, where is it giving me an error line? 26 sum. Oh, I need to alias it. Does it work if I take out the window function? All right, this is transfer two group by group by arctic does not exist.
00:47:16.610 - 00:47:49.230, Speaker A: Ah, oh, right. I don't use r anymore. Here's. Okay, so that is running. But I want to check that this window function works. I don't need it. Extraneous here.
00:47:49.230 - 00:48:18.124, Speaker A: All right. Extraneous express. Okay, order. All right, hold on. Hive Sql window function. I think I have a syntax error here. Count over partition by.
00:48:18.124 - 00:48:32.612, Speaker A: Order by. Oh, did I put a comma? I did. That's why. Sorry, y'all. All right, so that's working. This query is still working. Let me save these.
00:48:32.612 - 00:48:56.264, Speaker A: So this one is web three calling this w three dd. Ww. I don't remember. I put two w's. All right, practice question seven. Bonus one. And then this is Ww three.
00:48:56.264 - 00:49:43.710, Speaker A: Dd. Practice question 17 as daily. Right. So again, going through the logic here, we got how much they were sending and receiving each day, and then we joined it to get like, what is their difference in balance each day? And then you sum over the difference of balances and you get their daily balance each day. Right? So let's say I just took this one user and they only had a balance difference once. But let's take this user. You can see like, oh, they added this much.
00:49:43.710 - 00:50:11.610, Speaker A: The next time it was still the same. The next time they actually added a lot more. It went up, they took out some. It went down, and then it doesn't change. If you want, like full daily, daily balance of no date skipped in between, then you have to do something called a cross join. But that takes a long time, so I'm not going to do it here. But just so you know, here I'll pull up an example of a cross join I've done.
00:50:11.610 - 00:50:57.890, Speaker A: I think I did it in community dashboard and treasury value. Did I do a cross join in here? Date, distinct cumulative day, cumulative mountain price fill price. No, I didn't do it here. Okay. I can't remember where I did it. I'll add it in after the class a link to that query. But this is your balance per day, right? So you can see they're like changing their changes in balance in the pool.
00:50:57.890 - 00:52:51.240, Speaker A: So if we wanted to take a good way to visualize this, possibly would be like take the top hundred holders and see how their balances have changed. Right. So we have this as like historical balances as. And then we also want, uhoh, how did this not work? Sorry, I'm jumping around so much. I have a missing. Does this work? It this works. I know that this works with USDC balance.
00:52:51.240 - 00:54:14.880, Speaker A: I'm 100% sure this works. So I think it's in here I'm missing. Oh, it's because I made these edits. Okay, I don't need this. All right. This is why you don't edit in the same queries. But if I take lp balance latest, right, and then order by balances, get only the top like 20.
00:54:14.880 - 00:55:39.986, Speaker A: Here we get historical balances for only the top 100 LPs on USDC. So let's say this where user in select distinct or select user from lp balance latest. Let's do top 20 LPs. Okay, what's going on here with. I know this works. That's still running here. All right, that works.
00:55:39.986 - 00:56:55.050, Speaker A: Historical balance. Okay, we have, oh, this is missing a width with received sent. Add some more bonus questions into here. So we did this right with the raw balances bonus. Bonus question. Can you generalize this to all USDC pairs in uniswap? We might do that next week. Actually, no, we'll save this for after we've done all the other questions here.
00:56:55.050 - 00:57:49.240, Speaker A: I talked about this, but you have to find hint. Find all pairs that have USDC as either token zero or token one. That's an important one for wrappers. Hint has to do with how wrappers manage symbols. We'll do that one next time too. And then LP impermanent loss should be easy to do after you know how their balances have changed. So hint check their balances over time versus their share of USDC over east in the pool.
00:57:49.240 - 00:58:35.200, Speaker A: That actually might be good as its own question instead of, yeah, okay, hold on. We're going to add a question. So this should be figuring out LP loss based off of that. And then we'll do Dex trading later. Floor prices, NfT trading later. Okay, so LP and permanent loss. All right, that's going to have to be its own question.
00:58:35.200 - 00:59:04.182, Speaker A: All right, so here we have their daily balances over time. So let's make this fun. Let's do a line chart. Let's group by user and get their daily balance. And you can kind of see that I've forgotten to divide my balances somewhere in here. This is divided. This is divided.
00:59:04.182 - 01:00:20.078, Speaker A: This is divided. This is divided. Who has 10 trillion? That's not righteous QA. Oh, because this is the LP token, not USDC. Right. So I haven't learned how to do a backflip. So this is a little too much to look at.
01:00:20.078 - 01:01:23.376, Speaker A: So why don't we start this from, let's see, how volatile are they? You literally can't even tell. So let's start from where day greater than now minus interval, like eight months. Wow, this one's still running too. Okay, generalize. Okay, so next time we have to generalize and we have to include wrappers and then we'll have like a fairly complete USDC balance query. Permanent loss and Dex trading will be fairly easy to do after that. And then one more session for NFTs.
01:01:23.376 - 01:02:02.228, Speaker A: Great. All right, so here we go. Now we can see people's balance changes over time for the top 20 holders. Honestly, nothing too interesting here. Probably would have been more interesting to do this on like a steep ETH pool. I would say USDC ETH is fairly boring, but that'll do it. I think we'll wait around for this query to finish running.
01:02:02.228 - 01:02:30.892, Speaker A: But I'm basically done talking and then. Yeah. Thank you all for sticking around. If you want to stick around until this is done, feel free to do so. I'm going to go grab some water and then come back and see if this stupid query is done running. Let me see anything. Oh, right.
01:02:30.892 - 01:03:07.060, Speaker A: Okay. Next week I'm actually at a wedding so I can't stream. So I might change the stream date next week to be. I might do Monday morning instead. Next week I'll send a tweet out, but yeah, cool. All right, no problem. Bye it.
01:03:07.060 - 01:12:20.880, Speaker A: I'm going to stop the zoom and yeah, we'll let this run. I'll put up notepad I'll be back in, like, 510 minutes. See if it finishes. Okay. I don't know if this is going to finish running, so we'll just pick up from here next time. I'm going to try to optimize the query, but see you next week. Bye.
