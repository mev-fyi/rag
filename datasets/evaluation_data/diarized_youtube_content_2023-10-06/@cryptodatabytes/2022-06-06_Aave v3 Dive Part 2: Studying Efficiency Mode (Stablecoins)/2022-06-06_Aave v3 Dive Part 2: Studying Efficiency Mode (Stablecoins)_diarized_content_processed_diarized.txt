00:00:00.570 - 00:01:29.870, Speaker A: It. All right, I need the new link share. So AV three, this is going to be much harder. Let's see if we can just answer the efficiency mode part. So last time, basically just reviewing efficiency mode, right? It's like in the white paper, they talk about like, okay, you can put all stable coins into one group and use that as just borrowing in and depositing within that stablecoin group. Um, the idea being if they all have the same risk level, like if they all theoretically don't break peg, then I have 100 USDC. I should be able to borrow $100 of die and have LTV at like 99.5%
00:01:29.870 - 00:02:08.570, Speaker A: I think is like 98% is basically what they have. So it's like as long as USDC doesn't break below like $0.98 on the dollar, then my position won't be affected. Right. And that's something you can only really do with basically tokens of the same type, right? So you can see they made an emode for stablecoins on the dollar. They made an e mode for wrapped ETH assets. So you have ETH, you have staked ETH from Lido, you have al ETH, which I think is alchemy.
00:02:08.570 - 00:02:50.940, Speaker A: Alchemy, not alchemy. Alchemy is a data service provider. Alchemyx ETH. And then same thing for bitcoin. You have WBTC, RenBTC and they would all kind of be in the same emodes again. I'm guessing that does 95% actually make sense here? Because we remember when we were looking at staked ETH versus ETH a few weeks ago, didn't we actually see it break past 5%? I think we did. Where was this? Yeah, Dpeg exploration we saw.
00:02:50.940 - 00:03:34.566, Speaker A: Oh no, it didn't. Okay. It went 2% as like its maximum and it's been trending at 2% dpeg still for the last few weeks or so. So based on that, 95% actually does seem fine. I remember someone saying, was it safety? Supposed to be like a 7% discount, but the liquidity gives it a premium. So 95% makes sense here. Alchemyx, I actually don't know what its swap rate is, but it's probably even closer to ETH than staked ETH is.
00:03:34.566 - 00:04:08.590, Speaker A: So 95% makes sense here. And then bitcoin. I actually have no idea how closely these trend, but I'm sure they've done the research and 95% is more than enough that they shouldn't stray by much. Actually wonder if these use oracle prices because they're third party. Anyways. Yeah. So I think we should start by finding how they define emode categories on chain.
00:04:08.590 - 00:04:57.306, Speaker A: Right. So they store it in. Okay, so they have this emode category enumerator. I don't know what data type this is yet, but you can have a maximum of 255 and, and it's probably listed. So if we have, let's see, typical obvious structure. You have a lending pool and then you have a tokens, probably on the, a token, it's defined what emode it is. Or in the lending pool they track, like a mapping of address to emote.
00:04:57.306 - 00:05:42.624, Speaker A: Like a token address to emote. It's one of those two, I would imagine. But we're going to have to find out if users supplied liquidity to protocols in the user emode category set to zero by default. Oh, all right, maybe I'm wrong. Can a user only be in one emode category? No, wait, right, that doesn't make sense. Yeah, because if I deposited both like USDT and ETH, then I should be able to trade in two. So I don't know what this means, but.
00:05:42.624 - 00:06:45.420, Speaker A: All right, the good thing is there's a link. Okay, that doesn't help. If I'm reading this correctly, I should be able to find this emode category on deposit, which means I should be able to find it on the lending pool contract. Should be, I think last time, okay, last time we were looking at deposits, all right, on polygon, remember this doesn't exist on mainnet polygon scan. And this is a proxy. The implementation is pool. Okay, so this is what we're looking for.
00:06:45.420 - 00:07:13.746, Speaker A: We're taking it to dot and death. And hopefully I can find emode in here. Emote. Okay, there's something in here. All right. Supply logic. So, all right.
00:07:13.746 - 00:07:51.070, Speaker A: Some fun solidity stuff here. My screen is still being shared, right? Yeah. Okay. And the live stream is still fine. In solidity, if you see there's some variable where you're then oops, it looks like you're calling a function off of it. This means it's kind of like an interface contract. So it's like you're calling the pool and then the pool is calling this supply logic contract and doing like execute, withdraw or whatnot.
00:07:51.070 - 00:09:07.674, Speaker A: And anytime I start to see many contracts being called, then I take things out of death and I go to vs code instead. So let me open the folder for this. Let's just have the gab abstractions open and let's just call this, what was it called, pool ave metering. And I'm just going to put this in here and save it. And I have this extension called, I think it's solidity visual debugger developer. So you're going to have to install this extension if you don't have it. But what I can do is do graph this and.
00:09:07.674 - 00:09:35.730, Speaker A: Oh, God, this is a mess. I can see this is pretty telling. All of the functions. So everything on this left side is like top level functions being called like repay, borrow, like deposit, supply, all of this. I can see that all of these functions call functions outside of this contract. Right? So you can look at this and see this is your contract that you're looking at. So this is the pool contract.
00:09:35.730 - 00:10:22.230, Speaker A: And everything outside of that box. These are all of their own contracts, right? So you can immediately see, okay, literally everything calls outside of this contract. This contract is like, it's kind of like uniswap router two, where it's like a pure logic contract. It's not the contract that's handling state, if that makes sense. Hopefully that makes sense. If that doesn't make sense, please tell me. We can see flash loan in here too, which we won't go into this time, but it is there, right? So, all right, there's a get user emode.
00:10:22.230 - 00:11:31.540, Speaker A: What does actually do returns emode user by category. So that is, where's the first time that shows up. Inherits ipool. Oh, inherit doc. Okay, well, remember, that function is there for now. I don't know, pool storage, is that where, okay, so this gets into, again, contract patterns. Typically, I've seen this become more typical, is like you have a high level contract, and there's a few things you define kind of outside of that contract to be inherited.
00:11:31.540 - 00:12:24.520, Speaker A: One is like the interface. So the interface is what are all of the events that are emitted from a contract. So it's kind of like you want to outline everything, all the events and functions. You want to have a clean place where everything is defined is like, these are the function events that should exist on this contract. So then when you write the contract, it's like you're following this interface rather than writing everything and then defining an interface and hoping that you've captured everything. It's much cleaner to have an interface with all of these things defined nicely and just inheriting and basically overriding those functions. And people like to do the same thing for storage.
00:12:24.520 - 00:13:14.728, Speaker A: And you'll see, even though this is inheriting it, that's not saying like, oh, this storage exists on a different contract, and pool only references that contract. It's just saying pool is inheriting pool storage, so that we don't have to redefine all the types here in pool because they've already been defined. Right. I'm explaining probably basic class knowledge, but that's why when I searched here for e user mode category, I couldn't find where this was defined. Right? So I can see here it was actually defined as storage. And this is a struct of user address to their emode category. Right.
00:13:14.728 - 00:13:56.100, Speaker A: So you really can only do one emode. That is wild emode category. So categories are stored as a structure of un to data types, emode category. And that's stored in emode categories. So if we want to find all defined emodes, we should find. Where are they saving things to emode categories. So this is calling a category.
00:13:56.100 - 00:14:29.410, Speaker A: This is also calling a category. This is also calling, calling execute. Execute. All right, here, here we go. Here we go. Configure emode category category zeros for volatile. It's always disabled.
00:14:29.410 - 00:15:12.910, Speaker A: All right, so we have, this is the function. So we can just make notes in dune as we go. So we have, each user has its own mapping of emode categories. And then define category with this call. So save this here. And what was the, let's see, pool storage user emode category. No results.
00:15:12.910 - 00:16:09.810, Speaker A: Okay. I messed something up in this one. We'll have to come back to that. So the user categories are defined here. And let's see, let's see if we can find this function being called it is here. So let's do something. So it looks like there's only two categories right now.
00:16:09.810 - 00:16:52.492, Speaker A: They're both stable coins. They have the same threshold, but one just has a 2% bonus versus a 1% bonus. I have no idea why they have two. It is also interesting to notice, like their white paper says 98% and 1% as the bonus. And we can see on deploy they did 97.5% and then both a 1% and a 2% on the bonus. So, looks like something changed between the white paper and actual deploy.
00:16:52.492 - 00:16:58.770, Speaker A: But they haven't created emodes for ETH or bitcoin or any of these other ones yet.
00:17:02.260 - 00:17:07.120, Speaker B: How did you know it was 1% 2%? Like, how did you know to move a decimal like that?
00:17:07.270 - 00:17:24.810, Speaker A: Oh, so I'm looking at this, and I was just guessing. I was like, all right, this is 101. This is 102. They probably have these two here as decimal points, because you don't have decimals on chain, right? So I would expect if this is 100 and 150, then that means this is 1.5%.
00:17:25.420 - 00:17:25.988, Speaker B: Interesting.
00:17:26.094 - 00:17:40.528, Speaker A: Okay. Yeah, it's just a guess because I'm just like, what else could this be? I'm like, it's probably not 1.1% because I don't see why they would do that.
00:17:40.694 - 00:17:42.624, Speaker B: I see. Okay, cool.
00:17:42.662 - 00:18:07.448, Speaker A: Sorry. Yeah, it's just a guess. And the LTV, they set at 97%, so they went even safer than expected. But I guess like 1% probably doesn't make a big difference. Again, on the actual ave V two, it's like 75%, right. So that's still like a 20% improvement. Like, you can borrow 20% more than you could before, right.
00:18:07.448 - 00:18:35.840, Speaker A: Which is huge for stubborn corn farming. Well, if there's only two emotes, this gets a little less fun. Let's see. Isolation modes. Okay, this is what makes no sense to me yet. Isolation mode allows isolated ocean specific SD link. Could only be used to borrow stablecoins permitted.
00:18:35.840 - 00:19:39.120, Speaker A: Let's see. Can we find isolation here? Isolate, isolate. Here, isolate. So let's look at this. Isolation mode, total debt. Updated. Oh, that's pull storage.
00:19:39.120 - 00:20:07.798, Speaker A: All right, so this is only emitted on the borrow and supply logic contracts which are not here. Hold on. Let's see. Supply logic. Supply logic. Okay, there's emode logic, which I don't want to look into right now. There's supply logic.
00:20:07.798 - 00:20:43.840, Speaker A: So I should be able to find isolation mode in here. It's not in supply logic. It is probably. Okay, wait, I was looking for this. Let's not get distracted. Okay, execute. Reset.
00:20:43.840 - 00:21:03.130, Speaker A: So this gets harder because now I'm in the logic contract. I can't check for this thing being called in top level. Right? It's like, if I looked up this in here. Yeah. It wouldn't give me anything. So, like, you wouldn't decode the logic. And this is something just being called inside.
00:21:03.130 - 00:21:23.610, Speaker A: Execute. Borrow logic. Execute. Okay, let's see. So I can see that. For that to be called. I'm looking for this function.
00:21:23.610 - 00:22:00.548, Speaker A: Reset, isolation mode, total debt. So I would probably just check for this. All right, we have something. Select all from. All right, here, I'm going to make a note here. Only two emotes set right now, and that's stable coins. What's interesting though, is like looking at here, when they say label stable coins, the addresses aren't included here.
00:22:00.548 - 00:23:16.870, Speaker A: So we still have to find when is this label applied, but no results from query. All right, I'm going to guess that no one is in isolation mode. That is a heavy guess, but no, that's not a good guess. All right, hold on. Let's be better about this, this is pool logic. Supply logic. The only thing in here is checking if the user is in isolation mode, but using supply method in pool sol supply function supply execute supply.
00:23:16.870 - 00:24:11.776, Speaker A: If you're watching, please make it more clear what enables and disables isolated assets. Okay, so it's not like there's a different function for it. When I supply, I don't see anything being defined as like this is or isn't an isolation mode asset. So that's not helpful. Isolation updated. It's like this. Total debt updated is only in pool logic.
00:24:11.776 - 00:24:43.228, Speaker A: I mean, would it be in borrow? All right, let's see. Isolation. Oh, there's an isolation mode logic. That's probably where this function update. Isolated debt if isolated. Okay, we're onto something. We're not onto something.
00:24:43.228 - 00:25:30.680, Speaker A: All right. Okay. My thinking is basically like, all right, we need to find when isolation was being updated and then the top level call for it. But I can only see and I don't know if this comes through on the stream because this is probably pretty small. But there's like, emode is being called. Pool logic is being called, but there's no isolation mode logic. Wait, there's a call here on borrow.
00:25:30.680 - 00:26:18.708, Speaker A: The only time it's called is in borrow. It's never called in supply. It's called liquidation. We don't care about liquidations. So my guess is isolation modes, unlike emodes, is not something that's like user set. It's more set at the protocol level. So like, if you do borrow using a certain asset, it just knows to automatically put you in that mode.
00:26:18.708 - 00:27:09.818, Speaker A: I think that's wrong, but I can't find the answer to that. All right, we're going to skip that. The last thing we want to look for for here is when is emode being defined. Right. Okay, so users have a set emode which is only emitted upon execute set emode. And that is called on set user emode, which there's a configure, but we haven't checked set yet. So let us check set.
00:27:09.818 - 00:27:50.920, Speaker A: And I hope this is not empty. It is empty. All right. Set user emote is called. It is an external function. All right, let's see if we can find something for this. It's set user emode.
00:27:50.920 - 00:28:39.770, Speaker A: This is un eight, un 812-34-5678 select all from polygon dot traces where. Hold on. Is it input? I think it's input. Ah, input. Yeah. So traces is input. Transactions is data where input four equals it.
00:28:39.770 - 00:29:36.470, Speaker A: You got a space between the quote and the string? I do. Thank you, let's see. Trying to think. Do they have a pool configure contracts? Overview configuration this is a pool logic tokenization. Okay, that doesn't help. Pool logistics Writer Pool Logic Default Pool main entry Pool configurator I don't think this would help us. Pool configurator because I think this is just setting like pool configurator is setting.
00:29:36.470 - 00:30:12.446, Speaker A: Yeah. So this is like setting high level stuff like the set emode category we were looking at. It wouldn't set it for users. So that's not in pool configurator. Expect it to be in pool, sorry, I hit back a token. A token I think is just exactly the same. Stable variable debt.
00:30:12.446 - 00:31:35.204, Speaker A: That is exactly so like tokenization hasn't changed. It doesn't look like it, it should take a look, but I think a token is the same. They just basically their main changes pool mode. No, that doesn't, maybe it's just when they set it as collateral, things are changed. I hate that. You can't just control click in here. Oh, there is a user emote category here.
00:31:35.204 - 00:33:05.250, Speaker A: Hold on. It's it. What is this? Asset tether. All right, um, so, all right, let me just look at one of these transaction hashes logs. I hate polygon scan. Jeez. Nothing's decoded.
00:33:05.250 - 00:33:34.572, Speaker A: All right, what's this address? That doesn't help me. That's just the matic token. What is this one? This doesn't look helpful either. Wait, maybe it is helpful. This is just a pool. All right. They don't seem to emit, okay, do they have any emit events for.
00:33:34.572 - 00:34:01.796, Speaker A: They do have a user emote set event. Did I look for this already? Hold on. I don't think I looked for, I looked at set user emode, but I don't think I looked at event mode set. That's probably actually a smarter way to look for this. So we're going to stop looking through traces because that's probably going to time out anyways. Instead we're going to look at this event. Oh, finally.
00:34:01.796 - 00:34:42.180, Speaker A: All right. Oh, let's look at this one. You know what's interesting? User category ID. That's this one. User is it this one? Indexed user category Id. Okay, so this is your event set. This is set user emote being called though.
00:34:42.180 - 00:37:14.282, Speaker A: All right, so to be safe, what I'm going to look for here is what are the function signatures being called when this is being called? Right, so this is event left join all from select left join polygon transactions tx on vent event transaction hash equals transaction hash and I want distinct substring transaction data. One four funk sig it. I basically want to check if there's any time that the user emode set is changed. Besides, when this function is called, that'd be a good utility query to write. Now I think about it, I might pause this and write that query later. But basically you should be able to put in any protocol and get what is the usual pathing called by a user, right? So if I put in ave v three, I should be able to see most users call supply and then set user emode and then set use reserve as collateral and then they'll do borrowing. Oh lord.
00:37:14.282 - 00:39:10.160, Speaker A: All right, so we can see that user emote set. There's like nine different ways to get there's. So let's do effect transaction and let's do row over partition by, so we want a partition by substring and then we want order by block time sending. And we want only, we want to select all from this where one's it. So we have a bunch of hashes we can look at. Now this is redeem. All right, we can have one more way of making this easier, which is love joining by polygon contracts.
00:39:10.160 - 00:41:06.710, Speaker A: So I should attend this where namespace equal is Avev three. So I want to join on polygon contracts. PC on PC namespace equals ave v three and PC address equals transaction two. Right? So I'm checking because when I only filtered on all contracts, I think there are a bunch of random contracts, people already built on top of the pools for calls, but I only want ones that are of a namespace. So I could do this and I can do PC namespace, PC name syntax error, select all from. So there's only one time it's called from pool in Ave. So yeah, my guess is, yeah, you would supply, you would set user emode.
00:41:06.710 - 00:42:19.650, Speaker A: I guess if you set the emode, you probably don't have to set the reserve as collateral because it's just tokens that are in that emote. And then you would be able to borrow and then you'd probably have some complex set of like you have to completely repay if you want to change your emode to something else. Yeah, so you wouldn't be able to, so you could deposit any asset you want. But when it comes to borrowing, you can only be in one emote at a time and you're either in emode or isolation mode. You can't, like we saw here, we saw this earlier, but like isolation mode, like you can't use anything else as collateral if you're in isolation mode. But I remember here we checked where isolation mode is defined, right? No one's restricted. I don't know if isolation mode is on, so we couldn't answer that question.
00:42:19.650 - 00:42:42.250, Speaker A: And we haven't been able to look at how much have people borrowed based on their isolation mode yet. But maybe that can be here. That can be what we leave off on. Before I go write a bunch of utility queries. You don't have to sit here watching me fumble through this. Let's clean this up. Let's do this.
00:42:42.250 - 00:43:40.964, Speaker A: Right. So four users who have set their emode or. No, I want the event. So I want user category ID, where category ID equals one. And we know that. We know from this that category ID. Why is this now empty? Come on, dude.
00:43:40.964 - 00:43:57.788, Speaker A: This wasn't empty a minute ago. All right, category ID, one is. Oh, sorry. There aren't two categories. It's just one. And I think they overwrote it. So one was called March, one's called April.
00:43:57.788 - 00:44:18.470, Speaker A: So they set it to 1% instead of 2%. Liquidation bonus. All right, so we know that the category here is stable coins. So I can do this. I can do a left join on this category. Cat. On cat.
00:44:18.470 - 00:44:52.636, Speaker A: What do they call it? Cat ID equals event. Category ID. Right? So I can do this and I can get user and their category. Category. This is Json. We want the label coins. Stablecoins.
00:44:52.636 - 00:45:42.066, Speaker A: Stablecoins. And if ID zero, then either coalesce label or volatile. Right? Because volatile was category zero. Right. This is something we already know. Oh, you can't define a column with single quotes. All right, so we have emode versus volatile.
00:45:42.066 - 00:46:23.204, Speaker A: I mean, it's volatile versus stablecoins as, like, the emode being set. And we want to see how much they borrow. So select all from pool call. Borrow it. Oh, man. Dune casting, please. It's just showing me the same thing.
00:46:23.204 - 00:46:56.500, Speaker A: All right. It. All right, there we go. There's interest rate mode. Interest rate mode is just stable versus variable. So I want to see what assets are being borrowed under emode, I think is what I want to see. Borrow.
00:46:56.500 - 00:47:32.630, Speaker A: Borrow. I swear this will make sense in a second. It borrow dot behalf of equals fence. User sum. I first just want to make sure this checks out. All right, so group by. Let's just group by two.
00:47:32.630 - 00:48:31.080, Speaker A: User. I want asset. I'm not going to care about user for now, actually. So we want for each mode how much has been borrowed by asset. And I want to order by three descending molds. I think I've sent in too many queries so it hates me now. And I also want to join, I think, select all from ERC 20 tokens.
00:48:31.080 - 00:49:16.820, Speaker A: Polygon has that, right? Yeah. Okay, so we're going to join ERC 20 tokens. TK asset equals borrow asset such that when we divide, we can divide by a coalesce of either TK decimals. Right? So for anyone who's not familiar with token decimals, tokens typically have any between one and 18 decimals. So I need to divide it by those decimals. So divided by Tk or one e. Sorry, ten to the tk decimals.
00:49:16.820 - 00:50:05.776, Speaker A: And if it's not there, then I'm just going to do one e. Eight out. I think it crashed, so I'm going to reload it. Rerun this. TK is contract. Address it. Okay.
00:50:05.776 - 00:51:44.024, Speaker A: And we can do TK symbol. All right, now we're getting somewhere. We can see for each symbol amount grouped by emode stacked percentage. We can see the borrowing of different assets by percentage of people borrowing using this emode category of stablecoins versus the volatile category zero, right? So now this took us a while, but we're finally getting to something interesting, right? It's like, why would someone be borrowing USDC? We're not why? But it's like, okay, 70% of USDC borrowing is happening from people using a stablecoin label, right? And only 32.7% is being borrowed by people using a non stablecoin label, emote, which is like, probably they're using ETH as collateral or whatnot. But it also seems to be that across all these assets, they're using. I have a user error here.
00:51:44.024 - 00:58:22.930, Speaker A: Hold on. This is assuming that a user only did their emode category once. Okay, there's some slight inaccuracies here, now that I'm thinking about it, because if you're in the stablecoin label, you shouldn't be able to borrow non stablecoin assets. Right? Wasn't that the whole point? If I'm in stablecoin emote, I can only borrow stablecoin assets. So they do have a validation on borrow, right? So when you call borrow, you do have to validate that they're in the right emode category. You it, it, it. I want to check times emoji it.
00:58:22.930 - 01:01:05.630, Speaker A: So the problem with the data here is some people might have set their emode category many times. This isn't right. Caching is killing me. Dune. Why is it not partitioning? Oh, okay, my brain might be a little fried here. Partition doesn't make difference. Community, I think we've broken Dune.
01:01:05.630 - 01:01:10.254, Speaker A: Yeah.
01:01:10.292 - 01:01:16.980, Speaker B: I was like looking at, like, I was thinking, how did user become community? Like at one of our earlier queries as well?
01:01:18.150 - 01:01:20.038, Speaker A: Did that happen at one of our earlier ones?
01:01:20.124 - 01:01:27.560, Speaker B: Yeah, because we were grouping by some user and the user just became community. I'm like, did I miss like a labeling thing?
01:01:28.330 - 01:02:28.240, Speaker A: I didn't notice that. Okay. I think there's something weird with these tables, but essentially we need. Okay, let me just do this on borrows where event. So I want borrows that happened after their thing was set and borrow event because my worry is someone setting their emote and then changing it. Oh, this is called block time. Things still don't really change because if you're stablecoins, how are you borrowing non stable coin? I think that some people are changing their categories.
01:02:28.240 - 01:03:09.020, Speaker A: That's part of the issue here. Because they might have set stablecoin and then left stablecoin. I'll make a note to myself to dive into. Some people may have set stablecoin and then left it. Otherwise, how are they borrowing non stable coin assets? Right. All right. I wish this query would work because I think we could get something pretty cool.
01:03:09.020 - 01:04:07.550, Speaker A: Basically just seeing how much have they set. Okay, what are remaining questions? How to check which assets are in a category. Because I couldn't find when the category is created, they say the category, but they don't specify like a category to reserve. Mapping that still, how'd check which asset screener category and then. Okay, I think if we can answer both of those, then this becomes interesting. But okay. I've also been going for a long time.
01:04:07.550 - 01:04:18.740, Speaker A: My brain is kind of shot. Yeah, we'll come back to this later. Appreciate you all for sticking around. I said it's been like 2 hours, but.
