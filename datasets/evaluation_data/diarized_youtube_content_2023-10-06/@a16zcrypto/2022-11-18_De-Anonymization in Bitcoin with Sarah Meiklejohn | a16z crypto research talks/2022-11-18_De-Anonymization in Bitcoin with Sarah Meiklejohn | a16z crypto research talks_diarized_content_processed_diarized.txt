00:00:09.310 - 00:00:20.686, Speaker A: Very happy to. Welcome back Sir Michael Jones, professor at UCL, also a faculty fellow here at 16 Z crypto in the summer. Today we'll talk about de anonymization in bitcoin.
00:00:20.798 - 00:00:59.822, Speaker B: Thank you, Tim. It is wonderful to be back. And yeah, today I'm going to talk about de anonymization in bitcoin. This is most of the talk will cover some new work that I'll be presenting in two days at Unix security. But I'll also give a kind of overview of where things are at before then. Those of you who were at my talk earlier in the summer, there is some definite overlap, but I think you will not be too bored. And yeah, please do chime in with questions anytime you have any because this is new material, so it might be unclear.
00:00:59.822 - 00:01:56.962, Speaker B: So hopefully I don't need to tell anyone in this room or on zoom that bitcoin is not anonymous. So there have been a lot of papers published on this topic. In case none of you care about bitcoin, by the way. Or, I mean, some of you might assume that not all of you don't care about bitcoin. But, yeah, if any of you don't care about bitcoin, these results apply very directly to thousands of other cryptocurrencies and there's other related results that apply to other cryptocurrencies as well, including potentially your favorite sort of privacy coins. And of course, a lot of us here are academics, so we find academic papers convincing, but they are, in general, kind of theoretical feasibility type things. But this isn't right.
00:01:56.962 - 00:03:40.162, Speaker B: This has been put into practice. There's many companies now that do this, and there's been some very high profile uses of bitcoin kind of analysis in order to take down all sorts of sort of illicit operations by essentially doing the kind of age old technique of tracking the money and using that to identify the criminal. So the way that a lot of this is achieved, both in practice and in all these papers that I showed, is via the use of what we call clustering heuristics. So the idea of a clustering heuristic is, especially in UTXO based cryptocurrencies, an entity, either an individual or a service like an exchange, generates a large number of addresses or pseudonyms through their operation, right? So they create new addresses all the time. And so clustering heuristics allow us to essentially collapse all these different addresses that they generate and that they use into a single sort of cluster that represents the entity itself, right? So an exchange, for example, might use millions of different addresses, but the idea is that we can say with a lot of confidence that, hey, all of these million addresses actually seem to belong to the same entity, and then we can look at the transaction flow in a more sort of semantically meaningful way, right? Rather than tracking the money inside of each of their million individual addresses, we can actually track them as an entity. Does that make sense. Okay, so this is, again, kind of the heart of all of this analysis.
00:03:40.162 - 00:04:29.422, Speaker B: So I'm going to cover in this talk, really, two of the major heuristics that are used to do this. So the first one is clustering by input addresses. And just very simply stated, if you are familiar with it, for example, because you saw me present it a month ago, then the idea is that all input addresses in a transaction belong to the same entity, but just in a bit more detail in case you need the refresh. So let's imagine that Bob here is asking Alice for six coins. And Alice doesn't have a balance of six in any of her utos with any of her addresses, but she can sort of put these three together and in that way she can pay Bob. Okay. So again, this is the heuristic.
00:04:29.422 - 00:05:31.042, Speaker B: It's often called the multi input heuristic or the co spend heuristic. And it basically says that the same user controls all of these addresses. And of course, I should mention that the impact of running this kind of heuristic goes far beyond a single transaction, right? This operates transitively across all transactions. And so it does really collapse things down quite a lot. Are there any questions about how the multi input heuristic works? Great. Okay, so the multi input heuristic is really considered very safe today. And this is a little surprising, maybe, because actually this heuristic is known to be completely invalidated by a privacy technique called a coin join in which basically multiple users get together, agree on the details of a transaction and then sort of form a transaction in which all of their addresses are the inputs and all of the different recipients that they want to get their money are in the outputs.
00:05:31.042 - 00:06:23.980, Speaker B: Right? So a coin join is the easiest example of a case where the same entity definitely does not control all the inputs in a transaction. Okay? But despite this, we generally, in practice, again, believe this to be a pretty safe heuristic. And I won't speculate too much on the reason why. I think the idea is that exchanges and other large entities are the ones where it's really most effective to apply the multi input heuristic. And those kinds of entities are not really using coin joins, right? They have no incentive to engage in coin joins. They have actually incentives to not engage in coin joins, I would say. And so in general, for the ways that the multi input heuristic is used, the idea is we're not expecting to encounter too many coin joins in the entities or the clusters that tend to be of the most interest.
00:06:23.980 - 00:06:53.966, Speaker B: Okay? But it's still true that if you run the multi input heuristic over every address in the blockchain, there's going to be many false positives, right? Because there are many coin joints. So there will be many clusters that are incorrect. They do not represent a common entity. Okay. All right. So the next heuristic I also presented. So it's hopefully also relatively familiar, and this concerns the idea of change addresses in Bitcoin.
00:06:53.966 - 00:07:56.920, Speaker B: So briefly, how are change addresses made? What's the role of a change address? So let's imagine that now Bob wants Alice to pay him 14 coins. So, again, Alice doesn't have exactly 14 coins to send him in, like, a one to one transaction, but she does have sort of more than 14 coins. And so if we think of spending out of our bank account, this seems very easy, right? We're just like, oh, yeah, she'll just subtract 14. Send that to Bob, and then she'll kind of have, like, one left in her account, right? And this is how this would work in an account based cryptocurrency, but this isn't how this works in UTXO based cryptocurrencies. Right. And this is because the whole idea of a UTXO is that you have to spend all the bitcoins associated with it all at the same time. And so the idea is that what we do instead is we generate a sort of new change address, like, so a fresh address that has never been used before.
00:07:56.920 - 00:08:37.794, Speaker B: And then Alice is going to create a transaction with one input sorry, and two outputs. One output is her change address, and the other output is Bob's address. Bob is going to get his 14, and then she's going to send the change back to herself, to her freshly generated address. Okay, so this is how I've chosen to present this. There's actually no inherent reason that this address has to be freshly generated and never used before. It could be literally any other address that Alice controls. It could be the exact same address that she used for the UTXO to spend the money.
00:08:37.794 - 00:09:22.466, Speaker B: So you see that all the time as well. But this is just kind of how it's done in the standard Idiom. So this is how it started in Bitcoin D, and this is still a very common use of the change addresses. So the idea is that Alice, as a user, when she's looking at kind of her account, and it says, here are the addresses that you control, and she can add addresses if she wants to branch out and transact with new people. The idea is that as a human, again, she'll never even see that address unless she goes and looks at the blockchain. She'll never know that that address belongs to her. The wallet software just won't show it to her, basically.
00:09:22.466 - 00:10:37.814, Speaker B: So, again, this is not always how it goes, but this is certainly the standard kind of Idiom of use. Okay. Any questions about how change addresses work? Okay, so then let me get to the heuristic. The heuristic basically says that if we see a transaction with multiple outputs, then if we can identify the change address, then that also belongs to the input user. So whatever entity we've labeled as the input user, whatever cluster they belongs to, we're essentially going to add this change address and fold it into that cluster and say it belongs to the same entity. So the multi input Heuristic, again, is all about sort of collapsing different addresses down into a larger entity and then looking at the kind of patterns of that entity. And we can use the change heuristic in the same way, right? We can use it just as a method for expanding these clusters and trying to make these clusters a bit more precise, I guess, right, so if we don't take into account the change behavior, then these clusters contain a lot of churn, right? The user just sending money back to themselves and it kind of looks external.
00:10:37.814 - 00:12:01.654, Speaker B: And the idea is that the change heuristic captures all of that and sort of keeps it all within the cluster where it belongs. But I'd actually like to convince you that this heuristic, the idea of identifying a change address goes really well beyond kind of clustering addresses together. And in particular, it allows us to essentially follow money as it moves around the bitcoin network, right? So the idea is that if in a transaction we can isolate which address is the change address, then we can also say, well, who was the meaningful recipient in that transaction, right? And so we can follow this very common pattern. Again, there's no reason it has to be this way, but this is extremely common in the bitcoin network and this is a pattern that we call peeled chains. So what does a peel chain kind of look like? So the idea is that this sort of Blue user here might have a sort of large amount of coins stored in a single UTXO, okay? We can say like 100 or something like that, and then let's say they're an exchange. And now this sort of red user comes along and they say, hey, I'd really like to withdraw one bitcoin from my account. Okay? So the exchange says, that's fine, I've got 100 bitcoins sitting in this address, sitting in this UTXO, so I'm going to send you your one and then I'm going to send the 99 in change back to myself, and then we'll see what happens next.
00:12:01.654 - 00:13:18.510, Speaker B: So the idea is that if in this transaction, we can actually say with, again, a high degree of confidence, this is the change address and that's the meaningful recipient, then. Now what we can do is we can say, okay, well, why don't we keep following what that Blue user is doing, right? Because the next thing they're going to do is probably peel another sort of amount off of this large UTXO, right? The chances that you want to spend like 99 bitcoin in one go is small, right? And the idea is that especially in this kind of context, users come along, they take off their little peels, and then you just kind of continue down the line. So the idea is that by identifying change addresses, we can actually confidently follow these peel chains for hundreds or thousands of hops. And again, these peel chains are really everywhere in bitcoin. Essentially, every transaction in one way or another is part of one of these kind of peel chains. And if you're curious, by the way, when we kind of get to the end, when that large chunk of bitcoins becomes very small, what services often do is they just combine all of those together to form a giant clump again and then just start another appeal chain. That's a very common pattern.
00:13:19.490 - 00:13:26.898, Speaker A: Give you a change address from the meaningful recipient. Can you just use the ordering of them often, or do you put the.
00:13:26.904 - 00:14:20.930, Speaker B: Amount that will be in like, two slides? Yeah, great question. The idea is really the hypothesis kind of here is that by identifying these recipients, we can actually potentially de anonymize the user. Okay? So let me sort of flip this example before. I said, oh, the blue user is like an exchange, and the red users are all like users of that exchange who want to get cash out into their own accounts. Okay? Now let's say that at the start of this peel chain, there was a massive heist. There was a massive hack and theft of bitcoins, and now the blue user is actually a thief. And the sort of meaningful recipients are attempts to kind of not send all the stolen money to any one place in one go, right, which would be very detectable and very easy to follow.
00:14:20.930 - 00:15:09.730, Speaker B: All right? So this is a really common technique, again, in bitcoin and in money laundering in general. And so the idea is that maybe these individual red users represent different ways that they're trying to cash out, right? Maybe some of it is local bitcoins, maybe some of it is unregulated exchanges. But maybe one or two of these hops, one or two of these peels are actually regulated exchanges that law enforcement can then essentially go. They can subpoena. They can say, I saw this deposit in this transaction, and I need you to tell me who that account holder is. Right? So this was kind of the running hypothesis that we had when we were first developing these kinds of heuristics. Does that all sort of make sense? Cool.
00:15:09.730 - 00:16:15.398, Speaker B: Okay, so to Tim's question yes. How do we actually identify this change address? It sounds hard. It is hard. And also, I should say, the consequences of getting it wrong are very significant, right? If we imagine we're trying to follow a peel chain, hundreds or thousands of hops, and we accidentally just sort of swap things, I can tell you from personal experience that this very quickly garbles everything, you end up just like down a rabbit hole and drawing some very incorrect conclusions about what was actually going on. So this is sort of the heart of the question here. Okay, so how can we do this? Well, so one approach, one idea is kind of what I hinted at before with this standard idiom of use, right? So I basically said that nine times out of ten or whatever. That's not an actual statistic, but very frequently the change address is going to be used in this very one time kind of way.
00:16:15.398 - 00:16:41.214, Speaker B: Okay? So it will receive money, and then it will spend money, and that's it. It'll never be used again. Right? Because again, the know Alice using it. She doesn't know it exists, so she's certainly not going to give it out to anyone. It's not going to receive money in any other yeah. And the wallet know, by the way it's written, is not going to reuse it either. Okay? So it's just going to use it to collect change once.
00:16:41.214 - 00:17:20.602, Speaker B: It's going to use it when Alice needs to kind of make up the balance in another multi input transaction later. And that's it. That's the end for the change address. Okay? So that is essentially kind of what we've tried the research community. We can essentially say, okay, here's our attempt at defining the change address. We can say it's the only fresh output address where fresh means that it's never been used before. All right? So we look through the list of outputs in a transaction and we say, which of these have been used before or which of these haven't been used before, rather, is a better question.
00:17:20.602 - 00:18:08.460, Speaker B: I guess if the answer is none, then we don't know which is the change address. If the answer is multiple, then we again say we don't know which is the change address. But if the answer is this is the only one, then we feel safe in saying that this is the change address. I should say that this is not exactly there are a lot of modifications you make here, right? The heuristic, as I just described it, is horribly unsafe. You would, like, collapse probably everything together at this point in bitcoin's evolution. So, yeah, this on its own is extremely unsafe. You can make a lot of modifications and exceptions for certain services that do things in a certain way, but this is kind of the gist of it, basically.
00:18:08.460 - 00:19:13.230, Speaker B: We're relying on this property. Okay, so I also just very briefly want to mention so once we have these heuristics, now what, we have these sort of entities or clusters that represent entities. We can kind of see the transactions between them, but we still don't know who they are. So there's just like this missing piece of the puzzle that I just kind of want to stick in somewhere. And I picked here, which is this idea that we actually want to know which entities these clusters represent. And we can do this by actually manually tagging addresses ourselves, whether that's just engaging in our own transactions, whether it's scraping tags that we find online, whether it's just any sort of manual investigation. And although that sounds like it doesn't give you a lot of information, the idea is that by combining this with these clustering heuristics, we can actually tag these entities, right? So the idea is these represent sort of three little transactions that we've done by hand, potentially.
00:19:13.230 - 00:20:40.090, Speaker B: But the idea is that if these addresses, the pink ones that we sort of know now from our own observation, from our own interactions, if we know that they belong to a given entity, an exchange, let's say, and we know that that address sits within this larger cluster that we believe, with very high confidence, every address in that cluster belongs to the same user, then we can actually essentially taint the whole cluster and say, okay, now this million address cluster belongs to that exchange that I transacted with because I saw that one address that one time that I did my own transaction. Okay? So this is the kind of approach that, again, we were kind of doing both myself and other research groups back in 2013, 2014. And it's quite effective, to be honest, especially the multi input heuristic is really effective. And so in this kind of paper that we published in 2013, we kind of did this, like, follow the money analysis for a number of heists that we identified. I did sort of other individual work, talking to people who had their Bitcoin stolen and trying to track the flow of that. And again, it felt effective. At the time, we were able to trace over $3 million worth of Bitcoin directly backed to illicit activities.
00:20:40.090 - 00:21:23.526, Speaker B: And then, of course, as I said, this went well beyond academic research to create companies that kind of do this type of work. Okay, that was 3 million in 2013 purchase. Yes, exactly. Yeah. Maybe I should update that with whatever that would be in today's Bitcoin price. Okay, so this was kind of the story, and it felt very successful, certainly for a long time. But I will admit at this point that this is a very brittle heuristic, this change heuristic, right? So I said the multi input heuristic, yes, it is invalidated by coin joins, but it does feel very safe.
00:21:23.526 - 00:22:32.126, Speaker B: The change heuristic, I think, never felt safe, certainly not to me in the work I kind of highlighted. I can admit very freely now, this was very manual work, right? So it would sort of run the change heuristic, see it fail, kind of go look at the transaction myself in a Block Explorer and make a best guess kind of as to what the change address was using some kind of internal heuristic that I couldn't identify. And so this is sadly kind of how it went. And so I think this heuristic has definitely not seen as much adoption in practice, or it wouldn't be recognizable, at least not to me, the way it looks. Right. It would have so many modifications, so many qualifications and ultimately, again, a lot of the kind of tracking the money investigation style work that's done is, I think, largely still fairly manual because we don't have a good heuristic for doing this. So, of course, with all that buildup, I'm going to say that this is kind of this new work that we have that's going to appear at Eustnic Security.
00:22:32.126 - 00:23:38.500, Speaker B: So this is work with my PhD students george Kapos and Herun Yusuf and also some collaborators in Austria reiner Stutz, Sophia Rowlett and Bernard Hasselhoffer. And this is a real significant departure from how we were identifying change addresses before. So rather than rely on the value being received by each output address or the freshness or anything like this, we're going to actually say that for each multi input cluster, we're going to build up a series of features. So things we kind of expect from that cluster. And then when we're trying to identify the change address, we're going to say which in this list of output addresses is the one that we think matches the expected behavior of that input cluster. And if the answer again is one and only one address, then we will say we think that's the change address and we'll label it as such. Okay, so let me get into a little more about what these features look like and how the heuristic actually works.
00:23:38.500 - 00:24:42.166, Speaker B: Okay, so it's somewhat hard to believe if you've been following this space for a long time and you see how rapidly newer cryptocurrencies things like Ethereum are changing, it's a little hard to believe that Bitcoin actually has changed enormously since it was deployed, and in particular in the past ten years. So there are many new transaction features or yeah, there are many ways you can use transactions, so I won't enumerate them, but feel free to ask if you're curious about what any of these are. Not listed here also is whether things are SegWit enabled or not. You wouldn't think that that would be like a differentiating feature, but it actually is. And I should also mention that there's some concurrent work from Princeton, from Maltimozer and Arvind Narayanan that came out at FC this year that actually uses way more features than we did. I think we picked four transaction features. They have like a whole big table of them and there's also many different address types.
00:24:42.166 - 00:25:49.054, Speaker B: Right? So again, Bitcoin kind of started out with three address types, maybe, and there's now quite a large number of them. So those are kind of just the ways in which Bitcoin has evolved essentially the different ways people are using it. And the idea is that in these features, in these address types, each kind of Wallet software, for example, is going to have its own kind of trace, right? So one Wallet software might produce a transaction kind of feature vector that looks very different from the ones produced by another piece of software. And you can also imagine that exchanges and other big entities that generate transactions programmatically are also going to leave their own kind of footprints, right, that look very distinct from each other. So those are the transaction features and the address features. And then the last feature actually concerns not an individual transaction or address, but actually the cluster as a whole. So it looks so simple.
00:25:49.054 - 00:26:24.060, Speaker B: And it is so simple. The idea is that in some exchanges, some entities, the way that they do things is they always put the change address in the same place in the list of outputs. Okay? So we can kind of encode this as one of four values. So either it's always the first in the list, or it's always the last in the list, or it's always either the first or the last. So it goes where it feels, or there's no discernible pattern in the location, the index of the change address.
00:26:24.910 - 00:26:26.778, Speaker A: Does that actually randomize then, or is.
00:26:26.784 - 00:27:01.430, Speaker B: That just not making you mean the one? None just means we can't identify a pattern. Whether it means that they've randomized it or not, I don't know. But yeah, I mean, in theory, you could imagine that one would be, like, fairly common, right? Because a lot of transactions have only two outputs. I don't remember the exact breakdown, but we saw zero and minus one.
00:27:01.500 - 00:27:05.000, Speaker A: Interesting, because a lot of it kind of best practice to end the line.
00:27:05.450 - 00:28:19.470, Speaker B: You mean like well, so I think I don't know if any of the Wallet software will end up, like, by default, usage would end up in zero or minus one. But again, a lot of the entities that transact very frequently are using the Wallet software in the way a user would, right? They're like crafting the Raw transactions themselves and then just feeding it into the software to process to the network. So then that's kind of where you see more patterns like that. Okay, any other questions about these features? Okay, so with these features in place, we can kind of now define our new change heuristic. So the idea is that for Alice, we have now identified a cluster. All right? We've seen Alice reuse these addresses together, and we can say with confidence, because of the multi input heuristic, that these five addresses all belong to Alice. So now what we're ready to do is to define the features of this cluster according to what I just said.
00:28:19.470 - 00:29:14.160, Speaker B: So in particular, we define a set of transaction features. Often I talk about clusters as consisting of addresses, but obviously clusters also consist of transactions. It's just all the transactions made by these addresses or associated with these addresses. So essentially what we do is we say for every transaction in the cluster, figure out what its features are, and then we add that to the set of possible transaction features for this cluster. All right, so if a cluster has four transactions and they all have different features. Then we'll end up with a set of size four if they all have the same features, a set of size one. Same thing for the address types, right? So for every address in the cluster, we record what its type is, and we feed that into a set and say, these are all the possible address types that we've seen for this cluster so far.
00:29:14.160 - 00:30:07.858, Speaker B: And then we have a singular, again, change strategy for the entire cluster. Does this make sense? Okay, so step one, run the multi input clustering. Heuristic. Step two, define this sort of associated data for that cluster. So now when we see a new transaction initiated from this cluster, okay, so for example, we see Alice paying Bob. Then what we do is we look at the input and we say, okay, let me go look up the features for that cluster. And now we look at the two outputs, and we say, which of these outputs matches the features that I expect for that cluster? Right? Meaning yes, sorry, it's actually not clear at all what it means.
00:30:07.858 - 00:31:20.166, Speaker B: So first of all, we have the let's say the change address is first, and the Bob's address is second. So if the change strategy for this cluster is defined as zero, meaning the change address is always first, then we're not even going to look at Bob's address, right? We're going to say we're only interested in things that match what we know the cluster does. And we know that the cluster always puts a change address first. So the first address is now our only candidate change address, right? We don't even consider the other ones because that would violate the change strategy. Whereas if the change strategy is none or in this case one, meaning either first or last, then now both of these would still kind of be in the running, all right? So that's kind of how the change strategy is used in considering just it either just essentially throws away all but two of the outputs, or it just leaves them all open. Then what we look at is the address types, right? So for each of these, that's easy. We can say what's the type of the address is, that address type in the set or not, right? And if it's not in the set, then again, we rule this out.
00:31:20.166 - 00:31:54.786, Speaker B: This can't be the change address. And then finally, we want to consider the transaction features. Okay, so we're not going to look at this transaction, right? We already know that this transaction is part of the cluster. We're going to look actually at the next hop, right? So I should say, let's imagine that one of these outputs hasn't spent its contents yet. Then we don't actually care if it's the change address or not, to be honest. Right. We're interested in following peel chains, and if there's no chain to follow, then we don't care if it's the change address.
00:31:54.786 - 00:32:19.818, Speaker B: There's nowhere to. Go at that point. So we look at the next hop. Okay, so imagine that both of these addresses have now spent their contents. Then we look at the transaction in which they've spent their contents. We look at the features of that transaction and we see if that transaction matches the features we expect from the cluster. Okay? So again, we're not interested in the features of this transaction because we know this is part of the cluster already.
00:32:19.818 - 00:33:12.170, Speaker B: So we're just going to take imagine that this transaction had new features. We would just add them to the set rather than doing anything with them. Is this clear? Okay. And so again, this is just a process of kind of like ruling things out, right? So the change strategy says, okay, which of the outputs are we even going to consider that they might possibly belong to the cluster or not? We might rule out, again, a lot of them at that stage, the address types, again, it's just sort of filtering, are they in that set or not? And then the transaction features just requires going one hop further and then again seeing is it in the set or not the features of this next transaction. And the idea is that, again, if we have at this point, we've crossed things off the list. If there's one thing left on the list and only one, then that's the change address. So again, it's about finding the unique output that satisfies all our kind of conditions.
00:33:12.170 - 00:33:14.540, Speaker B: Does this make sense?
00:33:16.670 - 00:33:23.338, Speaker A: Everything for it to be a candidate for the change address, every aspect of it should match something you've seen before.
00:33:23.424 - 00:33:31.010, Speaker B: Exactly. If we're seeing new behavior, then we're not interested. Sarah? Yes.
00:33:31.080 - 00:33:35.490, Speaker A: How do you bootstrap the initial cluster?
00:33:40.730 - 00:34:28.082, Speaker B: What do you mean? How do you bootstrap how do you form the first oh, with the multi input heuristic. Yeah. Okay. So this is the heuristic. And if you think about it, I don't have any slides about it or anything, but it's worth just considering when would a false positive happen? And the answer is that not only would the entity have to change their behavior completely from how we've seen them transact before but the entity that they were transacting with in this transaction in which they've decided to do something radically different. The entity that they're transacting with would have to behave exactly like them in that exact transaction in which money was changing hands. Right.
00:34:28.082 - 00:34:46.458, Speaker B: That would be the only way in which we would get something wrong. If the entity that they were transacting with was not behaving like them, then this would just be a dead end. Right. We would just say, oh, they changed their behavior. We don't know anymore the end. So it would actually have to be like almost a complete swap in behavior. Right.
00:34:46.458 - 00:35:44.086, Speaker B: And so we think that this is low. And later in the talk, I'll show you how we didn't just have to rely on our own thinking. Luckily, we've actually been able to validate this heuristic. But before I get into this, as I described it as a change heuristic, right? As a way to increase the size of clusters and to track money around the network, I should say that actually the way we conceived of this was quite different. What we were really trying to do was to validate the multi input heuristic in the first place, right? So something very uncomfortable about this heuristic and a lot of heuristics in this space is that the multi input heuristic is really all or nothing, right? It really says here's a million addresses, and they all belong to the same entity, and any pair of these addresses are equally likely to belong to the same entity. Right. We make no distinction between addresses and the clusters.
00:35:44.086 - 00:36:21.858, Speaker B: It's either, yes, they're in the same cluster, or no, they're not. Yes, they belong to the same entity, or no, we don't think they do. And that's weird, right? Because a lot of the times we don't know. Again, I said the multi NPI heuristic is very transitive. Right? And so two addresses that were used as input to the same transaction, we might think, okay, we could have higher confidence about those belonging to the same user as maybe ones that this one was used with. That one and that one and that one and that one. And they're separated by a much wider kind of chain of common usage across transactions.
00:36:21.858 - 00:37:16.454, Speaker B: So really, this was the initial kind of provocation here. This was the initial thing we were trying to achieve. And fortunately, we can actually I'll sort of hopefully convince you that this technique is actually a really nice way to do this. And then, of course, conveniently, it also functions quite well as a change heuristic, as I described it, as a way to expand clusters, as a way to track flows of money as they move around. But let me sort of talk about the validation first before I do that. It wouldn't have been possible, I should say, to do any of what I'm about to describe if we didn't have some really nice ground truth data. So what we did is we worked with Chainalysis, which is one of these big blockchain analytic companies, and Chainalysis was very nice, and they gave us 241 bitcoin addresses and over 20,000 coin joints.
00:37:16.454 - 00:38:05.740, Speaker B: So what was special about these bitcoin addresses that they gave us? These bitcoin addresses actually lived in what I called true positive clusters, meaning Chain Analysis had actually hand verified with the entity that this cluster belonged to, that these were all their addresses. Okay? So there's no risk that this was a bad cluster or anything like that. There's no risk that there's a coin join here or any other type of false positive. And I should say, by the way, ethically, we were very careful to not learn who these clusters belonged to. So that's the kind of true positives. And then from the coin joins, of course, we could just run the multi input heuristic ourself, and generate false positive clusters. Right.
00:38:05.740 - 00:38:39.538, Speaker B: Okay. So I won't give any of the details. They're all in the paper, though, if you're interested. But from this, we were able to create a balanced data set of 60 true positive and 60 false positive clusters. Okay, so why is the number so much smaller? Well, basically, a lot of the true positive clusters were much bigger than the false positive clusters. So we wanted the clusters to be consistent in their size in the time frame in which they were operating and features like that. So this was already a big part of our work, was creating this data set.
00:38:39.538 - 00:39:13.600, Speaker B: And I should say, by the way, if you're thinking about this idea of, oh, what I said about false positives right, like, oh, this entity would have to almost kind of, like, impersonate the input entity in order for us to generate a false positive. We can actually see that. Well, this isn't convincing from what I've written here, but clusters were largely consistent in their behavior. Meaning actually, the majority of these clusters, the set of transaction features was of size one, and similarly, the set of address types was of size one. They only ever used one address type.
00:39:14.610 - 00:39:18.062, Speaker A: Both the TPM FP clusters or just the TP clusters.
00:39:18.206 - 00:40:17.918, Speaker B: It was more true of the TP clusters, but it was true of both. And then also, I should say most clusters were also fairly know. I don't remember what the Jacard similarity score was or anything like that, but it's in the paper. Okay, so now let's look at how we can kind of validate these multi input clusters. So the idea is that to validate a cluster, we really want to stay within the cluster, right? We really only want to look at addresses that we already believe belong in the cluster. So what we do is we essentially start at every transaction contained in the cluster, and we initiate a kind of peel chain from that transaction, right? Meaning we try to identify the change address of that transaction, and then from the change address, we try to look at the next hop and again, kind of go as far as we can. But crucially, we added a sort of extra criteria to our identification of change addresses, which said, we're only interested in ones that are already in the cluster.
00:40:17.918 - 00:41:05.154, Speaker B: Okay? Because, again, we're not interested in expanding the cluster at this point. We're just interested in staying within the cluster and seeing kind of how far can we follow a peel chain without leaving the cluster. All right? So, again, this might not seem, like, interesting on the surface, but anyway, I'll keep going with it. So it allows us to define this kind of value. So the idea is that this will partition the cluster into a set of peel chains. Okay, so if we can't follow any transaction within the cluster, then the set of peel chains will be the same as the set of transactions, right? Every transaction will just immediately lead to a dead end. Okay, so that's the kind of default state in some sense of this value is one.
00:41:05.154 - 00:41:54.850, Speaker B: Right. But the idea is that the more peel chains do stay within the cluster, the smaller this value is going to get. Right. Because the number of peel chains will get smaller, the denominator will stay the same. Does that make sense? Okay, so again, on its surface, this is not obviously interesting or obviously useful, but if we run it, then we do see a really significant difference, at least pictorially, between true positive and false positive clusters. So the bluer, the kind of paler bluer the value is, the closer it is to zero, and the sort of like more pink the value is, the closer it is to one. Okay, so we can definitely see again, this is not definitive.
00:41:54.850 - 00:42:54.114, Speaker B: There are blue values that are false positives and there are pink ones that are true positive. This is not like a perfect separation. But again, the idea was really just to try to increase our confidence in some sense over whether something was a true or false positive cluster and also at a more individual level, whether two addresses actually do belong to the same entity. Right. So the idea is that at a kind of early stage of an investigation, potentially, this can give you a sort of boost of confidence. If you run this for your cluster and you see that the value is quite close to zero, maybe it allows you to feel more confident that this is worth pursuing, whereas if it's sort of more pink, then maybe you have to reconsider it. And again, that's not definitive, but maybe you can have higher confidence in addresses that are actually part of the same peel chain.
00:42:54.114 - 00:43:38.770, Speaker B: Right. So now you say not only were these addresses sort of common across some large transitive set of transactions and they belong in the same cluster via the multi input heuristic, but also they actually seem to appear in the same PL chain. The idea is that maybe this gives you some extra confidence that, yes, these addresses really do belong to the same user, whereas ones that are in disjoint peel chains or something like that, you have lower confidence. So again, this isn't perfect by any stretch of the imagination. This isn't an exact probability that two things belong to the same user, but our goal was to kind of be better than yes or no. And I think this seems sort of like one way to get there.
00:43:38.920 - 00:43:46.018, Speaker A: Just to make sure you understand, the smallest valve would be literally everything in this cluster was in a single little chain.
00:43:46.114 - 00:43:47.560, Speaker B: Yes. Which we did see.
00:43:48.010 - 00:43:56.966, Speaker A: So then your point is you have two completely orthotical stories about why this might be the same entity, right? One based on just the multima heuristic.
00:43:56.998 - 00:44:32.402, Speaker B: And one based on PL chain, especially with the confidence that exactly if both of these heuristics say, yes, these addresses belong together, then it's better than if just one of them says it. Of course, it's still not definitive. Okay, and then finally I want to talk about this as an actual expansion heuristic. So again, kind of the way we can think of it is like following the money. So this time we removed the restriction about staying within the same cluster. Now we just want to sort of follow it as far as it goes. And we're going to consider two factors.
00:44:32.402 - 00:45:34.950, Speaker B: One is the expansion rate. So how many new transactions do we bring into the cluster as a result of running this heuristic? And the other is the false discovery rate, right? So of course we would want to get something like how well can we do this? Right? So again, thanks to chain analysis, we were able to identify any tags of the hops that we were following. And if we encountered a tag that well, to be honest, if we encountered a tag, then we essentially treated this as a false positive. Right? Because if this was tagged as belonging to another entity distinct from the one that we already had associated with a multi input user, then we would essentially say that that's a false positive. Right? So we can definitely say that something is a false positive. And then essentially what we did is we sort of said that unknown positives for the sake here, we're going to count as well. No, actually, sorry, that's all we said.
00:45:34.950 - 00:46:30.234, Speaker B: The idea is that we can't say what the true positives are, right? Because we don't know. If something doesn't have a tag, that doesn't mean we were right, it just means we weren't demonstrably wrong. Okay, so first thing we did, of course, was not just evaluate our own heuristic. Now, with this very exciting ground truth data, we were actually able to evaluate all these other heuristics in the literature, and this was the first time we were able to do this. So these kind of heuristics from 2013, we can see, are very bad in terms of their false discovery rate. Yeah, the false discovery rate is very high. And similarly, there was another heuristic by Goldfeder at all, I should say, that wasn't designed explicitly for this, but was a kind of refinement of these previous ones, and this also achieves a very high false discovery rate.
00:46:30.234 - 00:47:03.122, Speaker B: Right. So again, this really means that we should not have any confidence at all in the results of these heuristics. So it's very possible that they will be wrong a large portion of the time. And then there's this other heuristic by Emilov et al. That was published in 2017, and we can kind of see the effect here. So they're all, I should say, based on the same fundamental principle of, like, fresh, let's identify the fresh address. And then they just all sorts, all have various refinements that have been added to them.
00:47:03.122 - 00:48:00.402, Speaker B: So the airmilov one we can see is by far the most restrictive. It requires the most sort of conditions to say that something is the change address. So we can see that the false discovery rate is a lot lower, but we can see that this happens by sacrificing essentially the utility of the heuristic, right? So the expansion rate is also quite low compared to the other ones. So it's very conservative, which is good, better for sort of false positives, but also, of course, lots of false negatives. So in contrast, our heuristic has an incredibly low false discovery rate and also is more expansive, is more effective than these other ones. So, yeah, I don't have a lot more to say about it actually, than that. So I think certainly the way bitcoin is, yeah, I should say it wasn't possible to run our heuristic in 2013.
00:48:00.402 - 00:48:40.500, Speaker B: All addresses looked the same, all transactions looked the same. Essentially, this idea of separating on features wasn't possible. So I should say that our heuristic is really only possible thanks to the evolution of bitcoin. But I think clearly, given the evolution of bitcoin that's happened, I think this idea of identifying things via this idea that they're freshly is going to be way too problematic and way too brittle today. So this heuristic, in contrast, seems like you could actually run it in a kind of automatic way rather than doing this kind of manual, like following the chains yourself. Okay.
00:48:42.950 - 00:48:54.398, Speaker A: So I was curious about your post eye analysis of getting the FDR so low. Is it that sort of impersonation thing you're talking about that's very rare, that I think it's that swab of behavior?
00:48:54.594 - 00:49:58.478, Speaker B: Yeah, I think for sure it's that. I mean, again, the clusters we had were very consistent and also very distinct and yeah, I think it's also I mean, the truth is I said, oh yeah, change addresses. Like their defining feature is that they get money in once and they spend it and it's gone. But the truth is that's the defining feature of a lot of other things in Bitcoin, and it always has been, right? So with an exchange, for example, a lot of exchanges, every time you want to deposit coins, they'll give you a new deposit address, like a one time deposit address. And so that's going to have the exact same property, right? It's going to take in your money. Then often what happens is it combines your deposit with the deposits of many other users into one of these large chunks of money that then initiates like a peel chain. And so the idea is that if you get that wrong, right, then it's like a huge clustering error because that one time deposit address that you might have mistakenly labeled as a change address might get used with, like 50 other addresses at the same time.
00:49:58.478 - 00:50:47.646, Speaker B: So, yeah, I think the idea is that this one time approach kind of did well enough, but Bitcoin is just being used so much more today. And the truth is, again, that there's lots of other things that have that one time behavior. Okay, so just to wrap up, I should say, of course, our study has many limitations. 60 true positive and 60 false positive. Clusters is not many. And yeah, so there's certainly opportunities to validate this in other ways, but at least based on what we had available to us, this does seem really promising. It seems quite effective in both validating multi input clusters and expanding them by following the money in this way.
00:50:47.646 - 00:51:38.910, Speaker B: I should say. Of course, like all clustering heuristics, thankfully there are countermeasures available. The way I've described the heuristic hopefully makes it fairly obvious that if you just randomize the features of every transaction you make, then that's it tracking your transactions will just lead to dead ends and stuff like that. I should say there's, of course, stuff in the paper that I didn't talk about, like some nice case studies that we looked at, trying to see where this heuristic kind of could make connections that previous ones couldn't. And really, I should say the point of all of this research is just to make it very clear that Bitcoin is really not anonymous, that no one should think it is. Somehow people still think it is. And I would really like as forcefully as possible to make the point that it is not.
00:51:38.910 - 00:52:04.500, Speaker B: It's very, very possible to track activity. And with that, I would like to very much thank Chainalysis for working with us and giving us this data. And I'd like to thank IC Three for funding this research. And I'd like to thank you for coming and listening. And, yeah, happy to take any questions. I also have the chat open in Zoom, so if anyone on Zoom has questions, happy to hear those too. Thank you.
00:52:04.500 - 00:52:44.820, Speaker B: Even though it's just appearing now, it was like, major revision. We submitted this so long ago, I don't even remember. So yeah, we didn't we could yeah. And I should say George and Maltzer are both at Chainalysis now, so maybe they have, but I don't know what happened.
00:52:47.590 - 00:53:05.130, Speaker A: Here's my other question. Are you worried that the Ground Truth data set isn't necessarily representative? Maybe they were able to the set of things they can verify by hand might be biased in some way.
00:53:05.280 - 00:53:54.010, Speaker B: Yeah, I wouldn't say I'm worried about it, but it's definitely a limitation. Right? As you said, the entities that they hand verify with are probably exchanges and other people that they work closely with rather than users. For sure. We very expressly said that we would not want that kind of data, so, yeah, for sure. But I will say exchanges are a key player in the ecosystem. So even if all the true positive clusters belonged to exchanges, I would still feel that that was representative of what this kind of analysis gets used for. Anyway, the other thing I will say is we asked that the true positive clusters were not too big because we don't have that much computing power.
00:53:54.010 - 00:54:15.070, Speaker B: Right. And running the features and stuff is expensive. So that's another for sure bias that a lot of the big exchanges and stuff have big clusters. So yeah, it's a definite limitation, but it's basically the first time that we could get that kind of ground truth data, so I'm not going to complain.
00:54:17.750 - 00:54:37.334, Speaker A: So you mentioned the changes to bitcoin is what sort of made it work as serious as possible. So I'm curious, did that anything to do with the specific features that were added to bitcoin over time or just you think like literally anything that got added to allow for like a richer set of patterns would have kind of lived a similar result?
00:54:37.452 - 00:55:11.700, Speaker B: Yeah, the latter. I don't think it has nothing to do with we're not using the features in any way or anything like that. It's just the idea is that naturally, as there's more diversity of implementations in an ecosystem, people are going to make different choices and that's kind of reflected in these features. So, yeah, there's nothing inherent about these features. That's another thing I kind of like about this approach is if these features become irrelevant, then we can look at transactions and see if there's new interesting features and then use those instead of the ones we used in this study.
00:55:14.790 - 00:55:20.322, Speaker A: You said that it's common for wallets to combine multiple small accounts into one utix, right?
00:55:20.376 - 00:55:20.738, Speaker B: Yes.
00:55:20.824 - 00:55:24.194, Speaker A: Does that help you at all, like, in identifying grouping?
00:55:24.322 - 00:55:29.094, Speaker B: Well, it certainly helps the multi input heuristic, the fact that is it very.
00:55:29.132 - 00:55:31.942, Speaker A: Common that those type of transactions yeah.
00:55:31.996 - 00:55:47.406, Speaker B: So, I mean, the idea is that if you've brought this peel chain to dust right, and you have very what are you going to do with that other than combine it and then use that real amount of bitcoins again, right? Yeah.
00:55:47.428 - 00:55:53.898, Speaker A: But it confirms that all these field chains belong to the same person. Right. It's very useful.
00:55:53.994 - 00:56:09.870, Speaker B: Oh, I see. Well, yeah, I guess implicitly we kind of would have used that because, again, at the end when they're all combined, that then combines them all into the same multi input cluster. Yeah. So, yeah, we would have used that implicitly.
00:56:09.950 - 00:56:11.370, Speaker A: Or you could also go backwards.
00:56:11.470 - 00:56:48.020, Speaker B: Well, so actually in the paper we do talk about going backwards. The thing about going backwards is that you can't rule out any of the input. Right? Like the change strategy allows you to in one fell swoop, rule out a lot of the output addresses. But when you're going backwards, you can't rule out like the set of addresses and transactions in contention just grows. And so it's a lot more computationally expensive. So we talk about it in the paper. But we didn't end up running it because we didn't have the computational power to run it.
00:56:48.020 - 00:57:04.310, Speaker B: It's also less safe, I would say. The chances of having a false positive are yeah, it feels slightly more likely that you would encounter a false positive going backwards than going forwards. Anything else?
00:57:05.880 - 00:57:06.576, Speaker A: Thanks, Eric.
00:57:06.608 - 00:57:07.510, Speaker B: Great. Thanks.
