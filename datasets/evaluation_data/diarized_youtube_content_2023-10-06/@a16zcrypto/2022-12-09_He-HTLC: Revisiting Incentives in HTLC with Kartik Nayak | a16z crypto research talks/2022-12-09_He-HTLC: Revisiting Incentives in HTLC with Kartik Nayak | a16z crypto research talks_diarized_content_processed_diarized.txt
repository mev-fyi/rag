00:00:06.330 - 00:00:06.880, Speaker A: You.
00:00:08.930 - 00:00:24.590, Speaker B: Welcome everyone to today's a 16 D crypto research seminar. Very happy to introduce CarTech Nayak From, he's a professor at Duke University and he'll be telling us about something that blends together different parts of the Web Three space instead and hashtag contracts.
00:00:26.290 - 00:00:57.820, Speaker C: Thanks a lot Tim, for the kind introduction. So I'm very happy to be here, by the way, I'm here for today and tomorrow. So I'm very happy to chat with all of you. So in general, in the entire Web Three or blockchain ecosystem, so I'm generally interested in the entire space. But my focus primarily has been with respect to L One or consensus design and that has been with respect to achieving various properties. For example, trying to get good latency, good communication complexity, getting fairness, getting incentive compatibility and so on. So today I'm going to be talking about something a little different.
00:00:57.820 - 00:01:54.250, Speaker C: I'm going to be touching upon L2 and incentives. In L2 in particular, I'll be focusing on HTLC or Hash Time Blocked Contracts, which is a primitive that is used in various L2 protocols like lightning networks, atomic swaps and so on and so forth. So since this has been one of those widely deployed primitives, there has been quite some work in trying to analyze the incentives involved in this system and it's been an interesting cat and mouse in the past few years. So the last system claimed that they are incentive compatible and what we show is that they are not. In fact, there are still attacks and we come up with a better mitigation system. So with that, let me try to get into what HTLCs are. So HTLC stands for Hash Time Lock Contracts and it's actually implementing a very simple functionality.
00:01:54.250 - 00:02:33.702, Speaker C: So it allows a conditional transfer of tokens from a payer to a payee. So the payer over here is Bob and payee is Alice. And the amount of tokens that are being transferred is VDEP. So it's a conditional transfer which means that there are two conditions that the payee or Alice has to present before she can retrieve these funds. So the first condition is that she has to present a hash pre image of some hash that is available. And second, she has to do this within some timeout T. Okay? So where does she need to present this? This would be on some blockchain, on some L1 layer that is underneath.
00:02:33.846 - 00:02:34.154, Speaker A: Okay?
00:02:34.192 - 00:03:05.342, Speaker C: So the timeout T over here is with respect to some block number in that sense. So because she's presenting this hash pre image, we call it a hash lock and this time T's is called a time lock. So that's why we call this contract a hash time lock contractor. So the specification is actually very simple. So let's say Bob puts in some BDEF tokens. To begin with. There are two ways in which money can be retrieved.
00:03:05.342 - 00:03:53.434, Speaker C: The first way is through path depay where Alice presents a signed transaction with the pre image pre A, and she can retrieve tokens from here. Okay, so Alice can spend VDEF tokens if she can provide pre A. If not, for example, if Alice is inactive, the contract also provides an opportunity for Bob to actually refund money back to himself. And this he can do after some time t. Okay, so after time t, if he sends this signed transaction TX dev, at that point, he can get this money back. So let's see how this plays out in this graphical manner. So this graphic is something that you're going to see in a lot of my slides.
00:03:53.434 - 00:04:01.010, Speaker C: So let me explain to you what's going on over here. So to the right, you're seeing a utility versus players or utility versus parties.
00:04:02.710 - 00:04:03.314, Speaker A: Figure.
00:04:03.432 - 00:04:38.074, Speaker C: So on the X axis, you have different parties. Alice, Bob and three miners in this example. And on the Y axis, it's the utility corresponding to these parties at the end of the game with respect to HTLC. On the left, you're seeing a blockchain. And I have marked which miner is going to mine which block over here on top of the block. So the timeout t over here refers to the HTLC timeout. So in a normal execution, when Alice is redeeming this money, you will have Alice broadcasting this TX depay.
00:04:38.074 - 00:04:50.690, Speaker C: This purple transaction that you see, it would be put on the chain by, let's say, the next miner, M three. And at the end of this, Alice would obtain VDAP tokens, and M Three would obtain some small transaction fees.
00:04:51.750 - 00:04:52.498, Speaker A: Okay?
00:04:52.664 - 00:05:20.810, Speaker C: Very simple. The other situation is where Bob obtains a refund in a situation where, let's say, Alice is inactive. In that case, at this timeout t, Bob will put up a transaction TX Debbie, this orange transaction, which would be taken up by the next miner, let's say M two. And at the end of it, Bob would get back all of the tokens and minor M Two would get a transaction fee.
00:05:21.230 - 00:05:25.342, Speaker B: Okay, so you're saying this is if anything happens the way we expect.
00:05:25.476 - 00:05:27.758, Speaker C: Yes, this is where everyone is honest.
00:05:27.924 - 00:05:28.446, Speaker A: Okay.
00:05:28.548 - 00:05:38.046, Speaker C: So the point to note over here is that no matter what happens, it's the miners who are deciding what the source of truth is.
00:05:38.228 - 00:05:38.778, Speaker A: Okay?
00:05:38.884 - 00:06:00.490, Speaker C: So if Alice and Bob are honest, we will always take one of these two paths, but they may not be honest. And if we assume that miners are honest, even then I think we are. Okay, but if you think of miners as being rational, then perhaps Alice or Bob can actually cheat to earn more than what the spec suggests.
00:06:00.990 - 00:06:09.222, Speaker D: So I think two questions. One, in your description here, you talk about timeout, but it's really a number of blocks, right? Not timing.
00:06:09.286 - 00:06:14.334, Speaker C: Yes, I think it's just a number of blocks after the start. That's right.
00:06:14.372 - 00:06:30.082, Speaker D: That's just a clarification. The other thing that I'm missing here is what prevents in this example in this demonstration. I realize it's just for explanation, but what would prevent Bob from posting the transaction that is beneficial for Bob before T?
00:06:30.216 - 00:06:35.378, Speaker C: So the spec says that you can only obtain this after T, so you will not get back your money.
00:06:35.464 - 00:06:36.498, Speaker D: Which spec?
00:06:36.664 - 00:06:47.318, Speaker C: So the HTLC implementation underneath. So the contract says you can get back your money only after T, so Alice still has enough time to present TX depaid to get back her money.
00:06:47.484 - 00:07:02.780, Speaker D: I guess that was missing. I'm nitpicking here and bothering you because it was missing from your description that there is also the either side. It said Alex needs to post before tea, but it didn't say there was any limitation of posting something else before.
00:07:03.490 - 00:07:04.478, Speaker A: Sure, sure.
00:07:04.564 - 00:07:09.440, Speaker C: It's just that Bob will get back this money if there is after tea, so he gets a refund after tea.
00:07:12.220 - 00:07:12.792, Speaker A: All right.
00:07:12.846 - 00:08:18.396, Speaker C: So if parties are honest, life is good, right? But if Bob is rational, and if minus are rational, perhaps something else can happen. So perhaps Bob can get back all of these tokens even when Alice is presenting pre a to the chain. So if you're thinking of this from the miners perspective, they are receiving some sort of a transaction fee for putting in TX depay if somehow Bob can incentivize the miners, if Bob can bribe them to not put Alice's transaction to censor Alice's transaction, at that point he can get all of the refund. So he needs to censor until this time, too. So there have been mechanisms that people have spoken about with respect to what Bob needs to pay to actually make this happen. One such idea is this was presented by Windsor Etter. They said we're going to pay every miner in the world some amount of money that's good enough for them to actually make this choice and sense analysis transaction a different way.
00:08:18.396 - 00:09:16.560, Speaker C: A better way, which was presented by Sabari ETL in this paper from SNP 20, was to incentivize every miner in such a way that in expectation, they would prefer to actually send seralysis transaction. So the way to think about it is perhaps Bob would put out a transaction TX debb ahead of time with a very high transaction fee, so that everyone would say, okay, I have Alice's transaction paying me lower, bob's transaction paying me higher. At a later point, perhaps I should pick Bob's transaction. So if there is only one miner, the transaction fee just needs to be a little higher than Alice's transaction and that in itself will incentivize the miner. If there are many such miners, and let's say lambda is my computation power, then with probability lambda I will mine that block. And I need to take this probability into account to compute the expected gain after time of T. So this is what I call a probabilistic paper minus strategy.
00:09:16.560 - 00:09:28.036, Speaker C: A third way of doing this, again proposed by Windsor et al. Was to paper block for every block that is being produced, bob will bribe them some amount of money.
00:09:28.218 - 00:09:28.612, Speaker A: Okay?
00:09:28.666 - 00:10:24.028, Speaker C: This may be slightly higher than the transaction fee, and you'll keep doing this until time t. So let's see how this paper block strategy fits in over here, let's say Alex broadcasts transaction txtfa. And Bob at this point would be incentivized to bribe this miner some amount that is slightly higher than the transaction fee. And Bob would keep doing this for every miner from there on. By the one on the graphic to the right that you see anything above the x axis is your gain, and anything below the x axis is something that you pay or your loss. So your net gain in this figure is whatever is above the x axis minus whatever is below the x axis. And eventually, Bob would put in TX depth b minor M two will accept it, and Bob would get VW.
00:10:24.224 - 00:10:24.970, Speaker A: Okay?
00:10:26.300 - 00:10:46.540, Speaker C: In this situation, both Bob and the miners are better off at the expense of Alice, even if Alice did everything correctly. So this is an attack. So Mad HTLC, which was this work from SNP 20, they said, we will disincentivize this bribery.
00:10:47.760 - 00:10:48.424, Speaker A: Okay?
00:10:48.562 - 00:11:45.152, Speaker C: And they essentially used this lack of trust between Bob and miners to actually desensitivize it. They basically said they basically introduced two key ideas, where first, they introduced some sort of a path for miners to actually confiscate all of the tokens if Bob attempts to bribe them. And then they said, well, this by itself would reduce Bob's utility, but what he would get at the end of it is perhaps zero. So they said, we'll introduce a new contract called as a collateral contract. And with this contract, Bob would get into a negative utility regime, and at that point, he's totally disincentivized to even attempt to bribe. So the contracts that they proposed were the following. This looks like a lot of lines, but it's actually very simple.
00:11:45.152 - 00:12:20.844, Speaker C: So TX depay over here is, as earlier, Alice presents Pre A, and she can get back the tokens for debi. It's similar to earlier. Bob can get a refund. But in this case, spending this amount requires Bob to submit another secret, another Pre image called Preb. So in the honest world, both of these know will work as earlier. So if Priya is available, Alice would get back her money. If Priya is not available, Bob would get back his money after time t.
00:12:20.844 - 00:12:33.970, Speaker C: But if both of these are available, that is a situation where Bob is attempting to bribe. At that point, they introduce this third path where miners, or for that matter, anyone, can retrieve all of these tokens and confiscate it for themselves.
00:12:36.500 - 00:12:37.250, Speaker A: Okay?
00:12:39.540 - 00:13:44.826, Speaker C: So they also introduced this collateral contract. And over here, again, for whatever money you put in as collateral, bob would get it back without submitting any Pre image. After some time t, bob can retrieve it, but you would lose it if both pre and preb are available on the chain. Okay, so what would a bribing situation in Mad HTLC look like? So let's say Bob is still bribing different miners some amount of money. And when you get to the stage where you are at the timeout and Bob announces TX debb and release preb, at that point, from minor M two's perspective, well, pre A from transaction deb A is available. Pre B from transaction deb B is available. So instead of taking debb B, they would prefer to take the path DEPM, and they would take dep M as well as column and confirm those transactions and have a good utility based on the confiscated amount.
00:13:45.008 - 00:13:45.740, Speaker A: Okay.
00:13:46.830 - 00:13:49.900, Speaker C: And both Bob and Alice would lose in the process.
00:13:52.670 - 00:14:21.600, Speaker B: In this model, is there any notion, like the miners knowing about these in the mempool, but publishing it? I'm just thinking, like, what if I had transactions the first two types and just kept them private, and then I just copy paste the premises to trigger the third condition. Alice tries to sort of collect, but I suppress the transaction. But.
00:14:34.010 - 00:14:47.014, Speaker C: So I think you can do that. But the question is, what is the utility for Alice or Bob to do that? So, for example, if Alice might want to do that. Okay, but I think if Alice puts it out, I think she's the one putting it out in the mempool.
00:14:47.062 - 00:14:47.418, Speaker A: Right.
00:14:47.504 - 00:14:57.280, Speaker C: If the miners can control the mem pool, then sure. But assuming they cannot, then if I have it, everyone has it, because Alice put it out for everyone to see. Because Alice wants this transaction to be taken.
00:14:58.130 - 00:15:00.439, Speaker B: As long as you broadcast all yeah.
00:15:00.439 - 00:15:05.060, Speaker C: Yeah. Or at least one more miner knows it, and everyone will receive it.
00:15:07.670 - 00:15:24.546, Speaker E: What if Bob is himself a minor? As soon as Alice puts the pre image out there, then Bob, instead of including that transaction, bob can just generate the cheating transaction, pretend he's a minor.
00:15:24.578 - 00:15:47.322, Speaker C: And not think so. If Bob is a minor himself, then he has some more power than what we are making out to be over here. That is correct. In that case, he would not lose all of the money with some probability. But that probability ought to be less than 0.5. Right. Because no minor we are assuming controls more than 51% of the competition path.
00:15:47.322 - 00:15:47.854, Speaker C: Sure.
00:15:47.972 - 00:16:11.110, Speaker E: Maybe a worse one then is like if Alice okay, so you're saying that if Bob is the miner, but they can't control exactly. When Alice posts, Bob cannot. But if Alice happens to post it when Bob is the next minor, then they could just steal all the money anyway.
00:16:11.180 - 00:16:26.570, Speaker C: So Bob, being the next miner by itself, does not know you still have to bribe these intermediate miners because you're putting a transaction only after time t right. But over here, if you end up mining that block at that point, you are at an advantage.
00:16:27.170 - 00:16:52.760, Speaker E: Sorry, I was thinking about the so say that, like, Bob is the third minor, or Bob is the first minor. So Bob is m three. Then they see Alice's Pre image, and then they can also just generate, like you have the third case, the deposit for M. Like Bob can just pretend he was going to cheat and then let M three collect everything.
00:16:54.330 - 00:16:54.790, Speaker A: Sure.
00:16:54.860 - 00:16:56.520, Speaker C: I think that is possible.
00:16:56.970 - 00:17:01.174, Speaker F: So the deposit value and collateral value come from Bob's account, right?
00:17:01.372 - 00:17:01.830, Speaker A: Yes.
00:17:01.900 - 00:17:05.480, Speaker F: So shouldn't Bob start with the negative utility at the start?
00:17:06.170 - 00:17:15.978, Speaker C: You can play it that way as well, where you think of so I'm thinking of Bob getting a certain utility after the fact, but you can say he gets to zero and starts with negative utility as well.
00:17:16.064 - 00:17:27.390, Speaker F: Because I feel like if Bob just stops the entire HDLC, then it's almost like this whole HDLC didn't even happen for him because he wants to get something from Alice's Pre image and unlock something.
00:17:27.540 - 00:18:02.460, Speaker C: The reason why all of this comes into picture is because this HDLC is used in a higher level application. So let's imagine you're using this in some sort of an atomic swap, where two HTLCs would be used in conjunction, and over there, you would be using the same secret in both HTLCs, actually. And over there, I'm paying you some money on Bitcoin, and I'm receiving some money from you on Ether because it's the same secret. I will receive that money from you over here. But while sending this money, the secret is out there. I can try to bribe and make sure that I get back the money as well so that it becomes a one way transfer instead of a two way transfer. Okay.
00:18:04.190 - 00:18:14.218, Speaker G: After timeout C, if A makes the free image public, then you are basically trolls. Like, A can't get the money because it's timed out, and B can't get it either, because once the Pre image.
00:18:14.234 - 00:18:23.102, Speaker C: Is up so that's true. I think it depends on how you're trying to model this. So, from Ace's perspective, so the highest amount of money she can get is VDEP.
00:18:23.246 - 00:18:23.698, Speaker A: Right.
00:18:23.784 - 00:18:28.606, Speaker C: So if she had pre image, I think she could just use the honest path and undo it right in the beginning.
00:18:28.798 - 00:18:29.490, Speaker A: Right.
00:18:29.640 - 00:18:37.240, Speaker C: So, I mean, if she wants to spite Bob, then sure, I think she can do something like that. But we are assuming that Alice is not spiteful over here.
00:18:38.330 - 00:18:39.080, Speaker A: Good.
00:18:40.010 - 00:18:52.486, Speaker C: All right, so an elegant solution. Seems like it works. So where do we come into picture? So I think we looked at this and we said, okay, there are still some concerns with this protocol.
00:18:52.678 - 00:18:53.420, Speaker A: Okay.
00:18:55.150 - 00:19:36.418, Speaker C: In our work, we got some more attacks on this particular protocol. And then we went into it, figured out what these attacks looked like, and then we came up with a new mitigation. The fact that we have attacks does not mean that Madh TLC, whatever they presented is incorrect. Their paper, their work, everything works for the model that they present. It's just that they do not consider a set of actions that we believe are reasonable for miners, where we think of miners as being some actively rational parties. So I'll get to what actively rational means in the next slide. And we devise a new class of attacks called reverse bribery attacks.
00:19:36.418 - 00:20:32.490, Speaker C: And in our work, we actually present three different attacks called success independent reverse bribery, success dependent reverse bribery, and a hybrid attack. So in this talk, I will focus on talking about success dependent reverse bribery, and I'll touch upon what hybrid attacks are. And then we come up with this mitigation system called He HDLC, or as we like to call it, Helium HDLC. So it is a simple, practical, incentive compatible HDLC scheme. The reason why we call it Helium HDLC is because we believe it is lightweight and it is inert to any incentive manipulation. So what is the distinction between an active rational miner and a passive rational miner? In general, when we're thinking of miners, we think of them as focused on the mem pool, where they're looking at all the transactions available to them, and they would confirm the most profitable transactions. But miners in general can be active in the sense that they can participate in external protocols to actually maximize their gains.
00:20:33.630 - 00:20:34.042, Speaker A: Okay?
00:20:34.096 - 00:20:42.670, Speaker C: For example, they can add some mev software on top of what they have to actually engage in a protocol to improve their gains.
00:20:43.730 - 00:20:46.126, Speaker G: This is kind of general. So we can just talk afterwards if.
00:20:46.148 - 00:20:46.878, Speaker B: You think that's better.
00:20:46.964 - 00:21:01.410, Speaker G: If A can also bribe, is B likely to win the bride fight? Because the way I'm thinking, like, B has to bribe like N blocks, all of them, and A has to win the bribe in one block, right? Sure, everyone looked in that direction.
00:21:03.030 - 00:21:24.054, Speaker C: We thought about solving it along that direction. But in an ideal world, you want no one to bribe, right? So why do you have to? So we are using this because this conditional transfer needs to happen. If you're relying on both of these parties to bribe the miners to achieve the Internet action, that's not ideal. So ideally, you want no bribe and yet everything functions.
00:21:24.102 - 00:21:24.700, Speaker B: Yeah.
00:21:26.750 - 00:21:33.806, Speaker G: It feels to me like in this circumstance, a has such an advantage in the bribe work of C only needs to get it through once, quantitatively, in the end of company.
00:21:33.988 - 00:21:41.700, Speaker C: Sure, A can potentially win that fight, but I think it would be even better if A can get it in without bribing anything.
00:21:42.470 - 00:21:43.220, Speaker A: Right.
00:21:44.710 - 00:22:48.220, Speaker C: So the question is, why do we care about this modeling? And in general, we would say you would want to consider such active miners, because if there is profit available to be taken, at some point, miners will actually take it. The rise of flash bots and so on is kind of an example of this. And what our attacks show is that the state of the art is no longer safe if these attacks can be pulled off. And finally, there's this interesting question of can we have a secure protocol in the stronger adversarial model? So let's try to understand what are the concerns with this new contract? Can we still do some bribery over here? And for simplicity, let's say I'm going to ignore the collateral contract and just focus on the deposit contract. So the highest level idea is still similar. So if at the end of the day, if Alice is cheated against, then both miners and Bob are still better off.
00:22:49.390 - 00:22:49.850, Speaker A: Okay?
00:22:49.920 - 00:23:34.794, Speaker C: So in an honest execution, when Alice is presenting TX depay, she would have received VDEP tokens back, bob, through this collateral contract, would have received vCall tokens back, and miners would receive some transaction fees. If we can get into this situation where Alice gets nothing back, and let's say Bob gets something more than what he did in the honest execution, some V call plus epsilon, and let's say miners get VDEP minus V call plus epsilon, then it may be advantages for both Bob and the miners. And note that in the bottom line over here, I'm ignoring the collateral contract, although I have kept it in in the honest execution. So even in such a situation, bob and miners can potentially earn more.
00:23:34.992 - 00:24:09.300, Speaker D: So, in fact, couldn't the miners do it even without really Bob cheating? They could just prevent stop Alice's. So as soon as Alice posts her transaction, her pre image, they will hold onto it. Then they wait until the timeout is, then Bob honestly posts the redemption, and now they have both.
00:24:09.750 - 00:24:31.260, Speaker C: But Bob has nothing to gain by giving out preb. So let's say Alice and Bob are honest, and if this happens, I think first you will lose trust in the entire world, because miners are just censoring. Alice and Bob can do nothing at this point, given the spec, if he releases preb, he does not get back anything because the miners are getting money out of it.
00:24:31.630 - 00:24:34.934, Speaker D: But wouldn't that be automated if the timeout expires?
00:24:34.982 - 00:24:44.154, Speaker C: If the timeout no, I think that the money is still there in that contract at that point, even if the miners are competing.
00:24:44.202 - 00:24:44.366, Speaker B: Right.
00:24:44.388 - 00:24:49.262, Speaker G: So they have to collude to achieve that outcome, because everyone has an intent to just pay transaction fees also.
00:24:49.396 - 00:24:50.254, Speaker F: That's true.
00:24:50.372 - 00:24:52.086, Speaker G: They have to pretty effectively.
00:24:52.218 - 00:24:53.620, Speaker C: Yeah, that's true.
00:24:55.430 - 00:25:34.094, Speaker D: Well, okay, I don't want to rabbit hole too much into this, but I believe in practice, when the timeout T reaches, there are automated mechanisms that essentially close the channel and disperse the transactions, the fund, that would be the honest mechanism. And then is there something for and then conversely, even if the miners are super honest, alice's transaction at this point has expired. It doesn't help them if they close it.
00:25:34.212 - 00:25:49.582, Speaker C: So I think in the current implementation, as far as I know, madis TLC is not being used right now. And that's why perhaps this automatic closing can happen. So if you have preb, you cannot do that anymore. Because without that secret, Bob cannot this money cannot be refunded back to Bob.
00:25:49.646 - 00:26:04.070, Speaker D: Sort of spreads to reason that if Alice and Bob locked some funds on a channel and nobody renewed the channel, there are mechanisms out there that will not leave money locked dead, but will automatically.
00:26:05.770 - 00:26:16.102, Speaker C: So I'd argue that over here we are in control of this designing this mechanism. And over here, this mechanism or this specification or this implementation says well, the money is locked.
00:26:16.246 - 00:26:16.940, Speaker A: Right?
00:26:17.390 - 00:26:18.154, Speaker C: Go ahead.
00:26:18.272 - 00:26:18.566, Speaker A: Okay.
00:26:18.608 - 00:26:47.982, Speaker E: So just to follow up on this thread again, it still could be that say like I'm m three, I have nothing to do with Bob. As soon as I see pre a, I could be the one to bribe out all the other miners and I could bribe all the other miners, and I say, please don't include Alice's transaction, because I want to be the one who, whenever it's my turn to mine later, I'm going know get my preeminet for Bob and do this thing. Like I could start bribing too.
00:26:48.056 - 00:27:21.082, Speaker C: So that's a great segue for what I'm going to speak about. Okay, sorry. All right. So I think back to what I was saying over here, what I was telling over here. So in this potential attack, bob and miners can both potentially earn a higher amount of money. So the approach over here would be one where miner would obtain VDEP from the contract through this path DEPM and bribe Bob some amount higher than what he would receive otherwise. So this is where we call it a reverse bribery attack.
00:27:21.082 - 00:28:04.860, Speaker C: Because until now we were seeing Bob bribing miners. But over here miners are bribing Bob to actually achieve this action. The challenge though over here is that Bob and miners do not trust each other. The question know who makes the first move to make this happen? If Bob does, note that miners need freebie to actually mine. If Bob shares freebie, then at that point the miner is not incentivized to actually pay him a bribe. On the other hand, if the miner makes the first move where miner pays Bob a bribe, at that point Bob is not incentivized to release preb. So we need some sort of an exchange mechanism where both of these can happen together.
00:28:04.860 - 00:28:15.802, Speaker C: There may be multiple different ways of actually doing this. What I'm sharing over here is one such way where this can happen. So we're discussing of an exchange using a trusted execution environment.
00:28:15.866 - 00:28:22.586, Speaker F: In the previous thing, if minus say Bob arrives and Bob doesn't do anything, what happens to his deposit?
00:28:22.618 - 00:28:31.086, Speaker C: It's just gone. Sure, but remember Bob, all he wanted to get was V call. That is the honest execution.
00:28:31.198 - 00:28:31.522, Speaker A: Right?
00:28:31.576 - 00:28:36.360, Speaker C: And he already got vCall plus Epsilon. So he got more than what he started off with in the first place.
00:28:37.450 - 00:28:37.862, Speaker A: Right?
00:28:37.916 - 00:28:40.040, Speaker C: So he's better off no matter what.
00:28:42.250 - 00:28:46.578, Speaker F: So how is vCall given back? Doesn't Bob have to give a free image to get recall?
00:28:46.674 - 00:28:49.094, Speaker C: So this is a bribe that the Miner is giving to Bob?
00:28:49.142 - 00:28:50.970, Speaker F: Oh, the bribe is recall.
00:28:53.150 - 00:28:53.962, Speaker B: I'm sorry.
00:28:54.096 - 00:28:58.620, Speaker G: Just to follow on the side question. Does Paul have to proactively do something to get.
00:29:01.870 - 00:30:08.370, Speaker C: To in the normal execution? He has to send this signed transaction TX call B to get back this money. All right, so I'm going to sketch one way in which this exchange can happen using a trusted execution environment like an Intel SGX. And we're going to rely on two key facts to achieve this. The first is that mining a block actually does not need all of the transaction details. So if you just have the hash of a transaction, that is sufficient for you to actually mine. So if Bob can create this transaction TX DEPM in such a way that the Miner gets the money and send the hash, and it also contains PREA and preb and send the hash of this transaction to the Miner, then Miner can actually start mining on it. Okay, the question is, how does the Miner trust the fact that whenever it receives this hash, it is actually formed correctly? So for that, you can rely on a trusted execution environment or some sort of a zero knowledge proof to perform some sort of integrity checks.
00:30:08.370 - 00:31:10.360, Speaker C: Okay, so how will this proceed? In practice? They would first set up a program on a trusted execution environment which instantiates the ste with the HTLC parameters. This would be shared with the Miner. Subsequently, Bob would construct txtepm and compute its hash and send this hash along with an attestation from this te saying that he has done it correctly. And the Miner can verify the fact that this hash has been constructed correctly and start producing or working on the block. Okay, so let's say the Miner is successful and mines this block B. At that point, the Miner can share this block B with Bob, and Bob can verify the fact that this block includes a payment to him in some sort of a bribe that happens on the same channel. And at the same time, he can share TX DEPM along with the block with everyone in the world.
00:31:10.360 - 00:31:41.230, Speaker C: So this block is a singular proof that Miners receive TX DEPM. And at the same time, Bob receives this bribe as well. Let's see how this progresses on the chain. Alice broadcasts TX DEPA and at that point, pre A is available. Bob has pre b. Let's say M three and Bob engage in this communication where they actually perform this exchange.
00:31:41.890 - 00:31:42.302, Speaker A: Okay?
00:31:42.356 - 00:32:21.440, Speaker C: At that point, Bob receives V call plus epsilon m three receives TX DEPM. This transaction happens and those are the corresponding utilities for both of these parties. And then the game would just proceed. Eventually, some Miner would mine TX call m because pre A and pre. B are now available on the chain, and minor M two would obtain recall. Note that this is like something specific about Maddage TLC which says TX DEPM can be retrieved earlier, but TX column can only be retrieved at time T at or after time T. So because of which M three and M two can be two different entities in this figure.
00:32:21.440 - 00:33:31.058, Speaker C: So some interesting aspects of this attack. So the first part is I already explained that why it is called a reverse bribery attack. We call this a success dependent reverse bribery attack because only if the miner is successful in actually mining this block, that is when this exchange would happen. If not, nothing gained, nothing lost. If it happens at that point, both Bob gets the bribe and minor gets txtepm. Second, note that at least the way I have presented it, this works when V depth is greater than V call, right? So winning minus gain, the way I have shown it, is V depth minus V call plus epsilon. Bob gets V call plus epsilon and some other minor may get know you may actually want to work and be a little more tight over here because the some other minor can be the same minor as the one who engaged in this bribery as well.
00:33:31.058 - 00:34:14.434, Speaker C: So this condition can be a little tighter, which we do in our work. If you think about it, the key reason why we have this constraint on VDAP and V call is because the deposit and collateral contracts are redeemed at different times. And finally, if I were to defend against something like this, then, well, Bob can just pay a very high collateral, okay? Something like two X VDEC. But in practice, if I'm paying you $1,000, putting down a collateral of $2,000 is not ideal. So if anything, the collateral should be as small as possible. So in fact, what we show is that while such a defense would work.
00:34:14.472 - 00:34:17.220, Speaker D: Against what is the winning minor here.
00:34:17.830 - 00:34:39.946, Speaker C: The winning minor is the one who did the success dependent reverse bribery. So I think in this example, it's M three over here who did this exchange. And that miner received VDEP from TXM depth, but also paid V call plus epsilon to Bob. So you receive VDEP minus V call plus epsilon. Okay?
00:34:39.968 - 00:34:44.010, Speaker D: So both M two and M three win a sure.
00:34:44.080 - 00:34:44.794, Speaker A: Okay, sure.
00:34:44.832 - 00:34:47.722, Speaker C: I think it's just maybe poor wordings over there.
00:34:47.856 - 00:34:50.250, Speaker D: Yeah, but it's not winning the puzzle.
00:34:50.750 - 00:35:24.550, Speaker C: No. Okay. They did win the bitcoin puzzle for those instances. So over here it is the one who actually did the success dependent reverse bribery. So you can use this defense to defend against this attack, but well, it turns out that we can improve this attack so that this relationship between VDEP and vCall does not hold. And the key thing that you need over here is that you need to somehow ensure that both of these contracts are redeemed by a single minor.
00:35:26.570 - 00:35:27.078, Speaker A: Okay?
00:35:27.164 - 00:36:30.086, Speaker C: So if that happens, then we'll not have these constraints and that would be ideal. And we actually show a way of achieving this where if somehow Bob can do this bribery that I spoke about earlier, and delay redeeming of TX DEPM until that later point, then both of those transactions would be retrieved at once. So we would fund these bribery attacks using some future reverse bribery income. So I'm not going to get into the details of exactly this, but graphically, this is what it looks like where Bob is bribing each of these miners until the timeout, and then engaging in some sort of a success dependent reverse bribery attack, where the winning minor M two over here gets VDAP plus V call, perhaps? Plus in addition to some bribes from earlier, and for that, the miner is paying Bob we call precipilum.
00:36:30.278 - 00:36:31.440, Speaker A: Okay, so.
00:36:34.130 - 00:37:21.790, Speaker C: Let'S talk about how we would mitigate these attacks in general, if I were to design a scheme, what do I need? So the first and foremost, the most important quality I need is incentive compatibility. So you want something that is secure even in the presence of actively rational miners. Second, if there is a collateral, you would want this collateral to be as low as possible. You would want simplicity as well as you would want it to be practical. You can implement any contract on Ethereum, but you would ideally want it to be implementable on Bitcoin as well. And that is exactly what we achieve. Again, we call it Helium HDLC because it's lightweight and inert to incentive manipulation.
00:37:21.790 - 00:38:15.546, Speaker C: So before designing our mechanism design, let's again look at what are the key aspects or key things that we actually exploit that we use in our attacks. The first part is these attacks are possible because some party earns too much money if other parties cooperate. So in the case of bribery, it was Bob who was earning VDEP plus V call if miners cooperated. And note that there exists a path in the HTLC spec which says Bob should get back all of this money. So this is something that we cannot avoid. There has to exist a path where Bob gets back all of his money. In the case of reverse bribery, where the miner was paying Bob, note that Madditch TLC was overly compensating the miner.
00:38:15.546 - 00:38:52.650, Speaker C: Madhlc was saying, okay, if you confiscate, you confiscate the entire amount. And that gives the miner some excess money that it can use to actually bribe Bob. A second aspect of our attack was atomicity. So somehow this redemption happened in one go. You just put out a transaction and you get back all of the money. And this is something that we used in SDRBA, where you put in this Txtepm and miners get back all of the money. Or Bob puts in Txtep B and he gets back all of the money in one transaction.
00:38:52.650 - 00:39:34.630, Speaker C: So let's start with the easier goal of if I were to disincentivize reverse bribery, what would I do? So the idea is, if the miner, as the enforcer of the contract, is paid a lower confiscation amount, then perhaps the miner cannot afford to bribe Bob. Okay, so how much lower should I go? Know that Bob gets V call in an honest execution. So if the miner gets less than equal to V call, at that point, reverse bribery will not happen. The miner does not have enough funds to bribe Bob.
00:39:36.650 - 00:39:37.398, Speaker A: Okay?
00:39:37.564 - 00:40:17.590, Speaker C: So that is one constraint we'll place in the eventual protocol that we'll come up with. Second, the harder question is how we would disincentivize bribery. And over here, note that there has to exist a path where Bob can still obtain VDEP plus vCall as a refund. This is required by the HTLC spec. Moreover, based on the last slide, we know that a miner cannot earn more than vCall. So Bob can always bribe the miner a higher amount of a higher value. So this gap between the two will always exist.
00:40:17.590 - 00:41:17.910, Speaker C: So over here, though, we utilize the fact that there does not exist just one minor, but there exists multiple such miners. So if somehow we can enforce that Bob bribes multiple such miners before he can get back his money, then he cannot afford to actually bribe all of these miners. How would this actually happen? So let's say in this graphic over here, now the timeout t is right over here. And let's say Bob is attempting to bribe this miner. If we can enforce that this bribe is large enough, let's say it's greater than BCall, then the miner gets a lot of money, but Bob loses the same amount as well. And if he keeps doing this, at some point, he may get his refund transaction, and he may get VDEP plus vCall back. But the amount of money he has paid to the miners is so high that the entire game is not worth it for Bob.
00:41:17.910 - 00:42:28.960, Speaker C: Okay, so how can we enforce this? First, if miners need to be paid greater than vCall, it's because they have an action available to them where they can confiscate vCall. When will they confiscate vCall? If Preb is available on the chain so we can enforce that Bob should release Preb at a certain time. And after that, he needs to wait for some amount of blocks over here, L blocks, so that he has to bribe approximately L miners. So if he does not bribe a minor, they would immediately take this step where they would confiscate the money and everything is lost. If not, he has to bribe them. And as soon as you reach this stage where you're at this time, T plus L, where Bob can get back his money by then, I think it's not profitable enough for him. Okay, there is some constraint that needs to hold with respect to V depth, V call, and L in particular in this example, you need V depth plus V call minus three V call or minus L V call to be less than V call or something like that.
00:42:28.960 - 00:42:38.540, Speaker C: So, so far as we can satisfy that constraint, we are good. We can set L appropriately questions.
00:42:43.390 - 00:42:48.300, Speaker D: About driving minus driving minus four. But what?
00:42:55.910 - 00:43:27.678, Speaker C: That's a good question. So I think since I'm designing a Mitigation system over here, I'm going to give Bob an ideal way to bribe. So let's say Bob has that. And despite that, I want to design a mechanism where it's not profitable for Bob. But I think we can discuss how these bribes can happen in more detail, maybe after the talk. Okay, if there are no more questions, then let's quickly look at what our implementation says. Again, it's very simple.
00:43:27.678 - 00:44:07.866, Speaker C: I'm going to just step through for how this protocol would behave under different situations. The first situation is where Alice reveals PA. In that case, PA is available and you can take this path A, where Alice gets back this money V Dep and Bob gets back vCall. If Alice is inactive. At that point, PRIA is not available in the Mempool. At that point, Bob can attempt to get a refund when Alice is inactive. So at that point you take these paths debb B followed by call B.
00:44:07.866 - 00:44:44.130, Speaker C: So in path, Deb would actually release this pre image B, which will increase the amount of bribe he would need to pay. At that point, he does not get back anything. All of these funds would be transferred to a different contract. And then he needs to wait for at least L blocks after this contract has been created to actually get back his money. So if at any point Bob attempts to cheat, where he tries to get a refund when pre A is available, at that point miners can take this path call M and they would get back vCall and everything else would be burned.
00:44:44.870 - 00:44:52.420, Speaker B: So give me a think again for V Call and L for both of them.
00:45:08.510 - 00:45:24.402, Speaker C: So let's assume for simplicity that all of these blocks are mined by distinct miners. So, I mean, this is something that we discussed in the paper. I'm not bringing it up here, but in that situation you would want V depth to be L times V call or L minus one times V call because Bob would get back.
00:45:24.536 - 00:45:30.850, Speaker B: The point is, I see it, but it's interesting. So basically you get to choose smaller, smaller collateral.
00:45:32.230 - 00:45:32.980, Speaker F: Exactly.
00:45:35.270 - 00:46:02.860, Speaker C: And that's a choice for Bob. So, yeah, I think that was the first thing that I was about to bring up. So there is a time collateral trade off for Bob. So larger collateral means lesser weight for a refund and vice versa. So if you think about it closely, there is a relationship between the contract that we have over here and the kind of attack that we spoke about. So let's take bribery attacks for simplicity over there. Note that Bob was bribing these miners as well.
00:46:02.860 - 00:46:40.356, Speaker C: But the bribe amount was small. It was only transaction fees over here. By bringing in this collateral contract and making Bob pay a higher amount, we are ensuring that always Bob does not have enough money to actually make this bribe happen. So in that sense, there is a deeper connection between what we have in Hehtlc and the original bribery attacks or for that matter, hybrid attacks. So we do have an implementation. I'm not going to discuss about the implementation over here, but it turns out that it is more efficient than what Madhlc had. So with that, I'll conclude.
00:46:40.356 - 00:47:07.330, Speaker C: So in this talk, I spoke about the notion of actively rational miners. We spoke about some reverse bribery attacks against state of the art HTLC implementation. And we discussed helium HTLC, which is a simple, practical, lightweight and sensitive compatible HTLC protocol. So our paper is online. So what you see right now is an outdated version. We will put up a new version by tonight. Thank you.
00:47:07.330 - 00:47:15.104, Speaker C: Questions?
00:47:15.302 - 00:47:49.390, Speaker E: Could you go back to this one slide? Sorry. Walmart with the protocol on it. So, just to confirm. So the idea is that honest behavior would mean as soon as Alice reveals Pre A, bob knows that it's been revealed because Bob can see the mempool. And from that point on, if Bob is honest, bob knows that Bob's in trouble if he reveals Pre B. And so he will just wait for Pre A to be eventually included in the chain, even though he already knows it.
00:47:52.480 - 00:48:00.400, Speaker F: What if the miners see Pre A and they withhold it and they reveal it after between that l time?
00:48:00.550 - 00:48:13.860, Speaker C: So note that mempool is something that's available to everyone. Once you put it on. It's not like you're not sending it directly to the miners, point to point, you're just putting it in this peer to peer network and everyone can access it.
00:48:13.930 - 00:48:29.348, Speaker F: But what if every miner wants to collect that column, the last so all of them decide to keep decide not to send in Alice's transaction on purpose without any bribery. They just want to collect the column.
00:48:29.524 - 00:48:39.390, Speaker G: They can do that common, because sort of you are betting on you getting it right? And if you have a short thing of getting the transaction fee, isn't that?
00:48:40.240 - 00:49:02.196, Speaker C: Yeah. So at that point, you're not getting your transaction fees, which is the small incentive that you were about to get earlier. And an honest Bob would not reveal Preb, or for that matter any bob will not reveal Preb at that point. Because at that point, Bob does not gain anything, right? If it is in the mem pool, even if the miners are not including it in the transaction, Bob would not gain it.
00:49:02.218 - 00:49:11.130, Speaker F: So if Bob doesn't fund, he calls, like what would happen if everyone loses everything? If Bob does not fund, that itchy call.
00:49:12.220 - 00:49:13.450, Speaker C: So over here.
00:49:15.180 - 00:49:21.624, Speaker F: Bob has lost his deposit and his collateral for nothing. But maybe he sees the P image.
00:49:21.752 - 00:50:07.450, Speaker C: So note that I think in the bigger scheme of things, right? So I think the example that I was giving earlier was an atomic swap where you are paying Bob some money through yeah, you are paying Bob some money through Bitcoin and you're getting back money from some other mechanism. So I think when you're funding it over here, you're actually not trying to get it back. So although you have put in that money because you're receiving that money on the other side. So so far as that happens, from Bob's perspective, he does not care about the fact that you lost VDEP. So he was not supposed to get it in the first place. Alice was supposed to. So Alice cares about VDEP, bob does care about vCall, which he would lose in this case where the miners are just behaving in a way that we are not going to do anything unless so all we are going to do is take call and at that point that is not the rational thing for miners to do as well.
00:50:08.220 - 00:50:16.670, Speaker F: Yeah, if we call is much bigger than the transaction fee, then maybe they could take a pocket. Every miner has like a 10% chance of getting it.
00:50:20.880 - 00:50:31.456, Speaker C: Again. I can wait long enough if I know that I'm going to get preb. But Bob would give me preb only if he stands to gain something out of it.
00:50:31.638 - 00:50:32.272, Speaker A: Right?
00:50:32.406 - 00:50:45.416, Speaker C: So for that you can do something like reverse bribery where I bribe Bob something and he gives me preb in exchange. But otherwise Bob has no incentive to actually give up preb because he knows prey is on the chain, so he's not going to get anything.
00:50:45.518 - 00:50:47.960, Speaker F: Okay, so he just accepts that we call it loss.
00:50:48.620 - 00:50:49.370, Speaker C: Yes.
00:50:50.060 - 00:51:05.900, Speaker G: Follow up to my early question, I guess here's like a Sonic tournament, you only have like ten blocks until P, right? And then you just do the math on a bride board between A and B, right? If you think about it, like D breaks even if B brides at most like the deposit amount divided by ten.
00:51:05.970 - 00:51:06.396, Speaker C: Right?
00:51:06.498 - 00:51:08.764, Speaker G: And so A can win as long as A pay the ten.
00:51:08.802 - 00:51:09.404, Speaker C: You see what I'm saying?
00:51:09.442 - 00:51:28.612, Speaker G: If you increase the number of blocks until the unlock, the amount A needs to bribe to win is quite a small fraction because of the fact that B pays when the block is not included. At the same time, A only has to win off in the bribe for A is a huge advantage because A only pays when she gets the money. B has to pay every block until.
00:51:28.666 - 00:51:29.584, Speaker B: The money is unlocked.
00:51:29.632 - 00:51:40.880, Speaker G: So it feels like it's true we want a system where A never has to pay, but quantitatively, when you have a long time until the unlock, it feels like A has a huge advantage and thus the market theory, price of the bribe is not that high.
00:51:40.970 - 00:52:08.704, Speaker C: So I think what you're saying is fair over here. Alice does not need to pay anything. But something that I skipped on is the fact that there is a constraint with respect to how high V call can be as well. Because if vCall is too high, at that point, alice and minors can get together and actually steal V call from Bob. You can have a reverse primary in that angle as well. So that is potentially possible. But if you set vCall to be less than equal to V depth I did not discuss it here.
00:52:08.704 - 00:52:13.504, Speaker C: We discussed it in the paper. If you set it to be less than equal to V depth, at that point, you're fine.
00:52:13.622 - 00:52:26.208, Speaker G: I guess my question is less about your solution here than the question in general being very outside the field, just that it feels like one approach you could take to this question is the size of the bride when there's a lot of blocks and so clearing it's.
00:52:26.224 - 00:52:27.476, Speaker B: Very hard for me to win this fight.
00:52:27.498 - 00:52:29.896, Speaker G: I wonder if anyone may have I.
00:52:29.918 - 00:52:36.660, Speaker C: Think the way I think of it is, why would you ever want to get into a situation where I think I'm getting into a bribe war as a solution?
00:52:36.740 - 00:52:44.428, Speaker G: Because it's a very small bribe war, and you get a much simpler protocol if you just let the bribe so that would be my argument if I.
00:52:44.434 - 00:52:45.372, Speaker B: Wanted to defend that.
00:52:45.426 - 00:52:51.924, Speaker G: Like, you just lower her by sneak. You have a much simpler thing, and it works okay with a tiny bit of but that would be the defendant.
00:52:51.992 - 00:53:08.228, Speaker E: But also, it doesn't need to be a bribe, or that can just be a transaction fee. Alan would just set a transaction fee equal to the number of and then there's no bribe, or it's just bob would have to outbid the transaction fee every round, and it's not worth it.
00:53:08.394 - 00:53:10.470, Speaker G: So nothing would actually happen.
00:53:10.920 - 00:53:22.890, Speaker C: In an ideal world, I would not want to have this transaction fee be dependent on BDEP, at least the way I think of it, because it should be an independent thing. But I'm not sure we don't discuss it.
00:53:24.860 - 00:53:34.968, Speaker G: Sure, but it doesn't lose enough to matter. So it's more quantitative than I totally agree with you qualitatively. But is it quantitatively? Does it end up being a date? So that's the direction that maybe let's.
00:53:34.984 - 00:53:44.610, Speaker C: Chat more about it, because you're mentioning this can be a simpler solution than doing something like this. So I want to understand why you think it is simpler, because to me, this just seems simple.
00:53:46.260 - 00:54:08.090, Speaker B: The complexity of the protocol itself and the analysis of the protocol. A little bit simpler code, but more complex computer. So to sort of zoom out, I'm curious if you have a formal statement in the paper, because it feels like you're trying to say that honest behaviors is something perfect people to read them of a suitably defined kind of multi stage game.
00:54:09.820 - 00:54:13.768, Speaker C: We try to define the game for every block or what happens at a pre level.
00:54:13.854 - 00:54:48.352, Speaker B: Okay. Ultimately rephrase the things. I feel like maybe the bride doesn't do it at all on the equilibrium path, just the threat of the bride. Ultimately, this boils down to game theoretic guarantee that says honest behavior is submitting perfect equilibrium. Then at the Anthony's point, might be like, oh, well, if that's ultimately the statement, maybe actually this earlier protocol would actually have that game theoretic statement, and then that would throw the responsibility back on you to kind of but, like, this is a stronger game theoretic statement in a subtle way, which might be true. I can totally see that being true. That actually seems, like, quite delicate.
00:54:48.416 - 00:54:49.030, Speaker C: Right.
00:54:50.200 - 00:54:58.040, Speaker B: I sort of agree with Anthony that if really it's merely just pushing complexity between some proof and some paper and protocol, you always want to have it in the proof.
00:54:58.620 - 00:54:59.370, Speaker C: Exactly.
00:54:59.740 - 00:55:00.664, Speaker B: Is that fair?
00:55:00.782 - 00:55:03.930, Speaker G: Yeah, I think that's better than what.
00:55:07.660 - 00:55:25.360, Speaker D: So I also wanted to take a step back and ask all of this starts with HDLC, but not a protocol that uses HDLC. So what is the context in which Alice would even need to post something with a time lock? Is it part of the lightning?
00:55:25.860 - 00:55:50.356, Speaker C: So it can be lightning. It can be atomic swaps. So that is exactly the question that we're looking at right now to see what happens when HTLC is used at higher layers. Over there, you're composing many HTLCs as well, and there are some external incentives that may come into picture, for example, from layer one. And we are trying to understand, does everything hold water when you actually use it at the higher layer?
00:55:50.548 - 00:55:50.904, Speaker A: Okay.
00:55:50.942 - 00:56:12.220, Speaker D: So, I mean, you're starting with we already solved and produced a mechanism, but I'm also kind of questioning, why did we in which realistic context did we end up in a position where Alice wanted to post something that didn't have in a higher level protocol already, some punishment to Bob?
00:56:17.380 - 00:56:33.696, Speaker C: What you're referring to is, what are the external incentives? So if I cheat over here, it is a detectable cheating. Right. This reverse bribery happens. It is detectable. So what you're saying is if at a higher layer, if I could punish them at that point, perhaps you would not cheat in the first place.
00:56:33.718 - 00:56:33.928, Speaker A: Yeah.
00:56:33.974 - 00:56:38.020, Speaker D: I'm telling you even more, the existing use cases might already have some mechanism.
00:56:38.100 - 00:56:38.728, Speaker A: Sure.
00:56:38.894 - 00:56:41.690, Speaker C: I think the watchers that you were referring to earlier yeah.
00:56:43.020 - 00:56:44.650, Speaker A: All right. Thanks a lot.
