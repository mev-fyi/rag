00:00:10.490 - 00:01:10.674, Speaker A: So I have found for some reason, it's sometimes tricky to have strong opinions about how to build infrastructure because for whatever reason, it pisses people off. And you would think that it would be dull, right? You would think that something about the technical details would just not cause people to go out into all out playmores that are heavily religious. But that's the way it is in crypto, for whatever reason. So instead of telling you prescriptively how I think that you should go and build infrastructure in the space, I'm going to give you three mental models for how to think about this stuff. And then you can go and use them and draw your own conclusions from them and then go pick fights and flame wars and so on of your own choosing. So the first mental model is the model of the narrow waste of any protocol tech stack. So here's a motivating question for you.
00:01:10.674 - 00:01:53.460, Speaker A: How do you build a protocol that takes over the world? Can anyone here name the most successful protocol in all of the history of computer science? And I'll give you a hint. It's a network of networks. IP. It's the Internet. There's no better example of this mental model than the protocols that are at the heart of the Internet, and that is TCP, which stands for Transport Control Protocol, and IP which stands for Internet Protocol. And these protocols, they go hand in hand. But for our purposes, I'm just going to focus on IP and I'm going to use the term IP interchangeably with TCP IP, and I'll give you a little bit of the history.
00:01:53.460 - 00:02:55.074, Speaker A: I'll tell you how it is that they have been so damn successful. And then I'll use IP as a driving case study for this mental model. And then throughout the rest of the presentation, if you think about it, it is truly mind blowing that the same protocol design of IP took us from literally nothing to over 20 billion connected devices. It has survived throughout the course of 40 years, throughout the period of fastest technological change in computer history. And throughout all of that time, the tech for transporting bits from point A to point B has improved something like a million x. And so it's truly mind blowing that this same protocol design has survived throughout all of that change and has remained future proof and evolvable with minor details here and there. Like there have been changes, but by and large is the same protocol.
00:02:55.074 - 00:03:53.860, Speaker A: It was envisioned back in the 70s when it was initially designed. And throughout all of this time, the ideas behind TCP and IP have remained true. So how and why has IP been so successful? So there are many reasons, and there's actually a very good book called Designing an Internet by David Clark that I would highly recommend. But the most important reason is this concept of the narrow waste. The first thing that IP did is that it created a unifying layer for the entire fragmented world of computer networking. A key goal for its design from the very start was to enable any networking technology, no matter what it was based on, to power the networking needs for any application on the other side. So we look at this diagram.
00:03:53.860 - 00:05:09.468, Speaker A: There's TCP and IP in the middle, but in the bottom there's an infinite diversity of different kinds of networking technologies, whether they be based on cable or fiber or radio or whatever or what have you. And then on top we've got an infinite diversity of different kinds of applications that require different kinds of networking support. Every single packet that's sent through the internet flows through IP, which is just a simple interface that creates a subtraction between the application layer above and the hardware layer below. So before IP existed, each application had to deal with all of the messy details of the various networking technologies which essentially made for networks that were completely fragmented. It was a world where each network had to be tailor built for the needs of each application. And it meant, conversely, that each application had to build its own network, had to build its own networking protocol, and had to provision its own providers of bandwidth and hardware in order to actually be able to communicate. It also meant that applications, as a result, were just fully unable to interoperate with one another.
00:05:09.468 - 00:05:46.264, Speaker A: So the upshot of all of that was that networking really was hardly a thing. It was just a plaything of researchers and academics. And in contrast, IP acts as a kind of aggregator. It collapses the entire networking world into a single standard. And by doing that, it does three main things. The first is, as we've seen, it allows for any request that comes from the demand side. Those are applications on top that need to move bits from point A to point B to be serviced by any provider, regardless of the technology that they're using, as long as they have the capability of moving bits from point A to point B.
00:05:46.264 - 00:07:13.268, Speaker A: The second thing it did is that conversely, it allowed for all of the hardware providers and bandwidth providers on the supply side to span the totality of the addressable market of applications that require connectivity. And they can do that by supporting only a single protocol, as opposed to having to work in a pairwise way with all of the various different applications that may need networking. And the third thing that it did, which may be the most important, is that it decoupled the application layer from the hardware layer such that both of those layers could now evolve independently of one another. There's actually a really good quote from David Clark in that book that I mentioned, which is that interfaces are constraints that deconstrain. And what he means by that is that an interface is a constraint because it now means that both sides spanning that interface have to support that interface and have to conform to it. So it constrains in that sense, but it deconstrains because now that they're doing that, they're able to evolve independently without having to care about what the other side across the interface is doing. So that was the first order consequence of IP, but the second order consequences are economic in nature and I think they're actually even more interesting.
00:07:13.268 - 00:08:30.300, Speaker A: So by connecting the disparate worlds of hardware and software on top, the simple interface of IP created a powerful flywheel of reinforcing feedback. That is what ultimately led to IP taking over the world. And the way that it worked is that as more bandwidth providers came into the network below, that created more available bandwidth for application developers to build applications to use that bandwidth. And as those developers built applications that were useful to users, there was more demand for bandwidth, which created an incentive for more bandwidth providers to come into the network. And so then we've gone full circle and that essentially is a runaway, that's what basically created the runaway chain reaction that just led to IP gaining the adoption that it did. And eventually, it eventually became the Internet as we know it today. So next, what is it that makes this narrow waste, quote unquote narrow? The most fundamental property of IP, which is the one that you would read about in any textbook about computer networking, is that it was radically unappinionated.
00:08:30.300 - 00:09:05.690, Speaker A: Unappinionated is like the key word. And what does that mean? It just means that the protocol simply does not care. It is unappinionated to how applications on top and how hardware providers and bandwidth providers below use the protocol. It tries to maximize their freedom. And that is the defining property of the Internet. And that is the reason that it has come to be known as the narrow waste of the Internet. It's just a single protocol through which all traffic flows, no matter what kind of traffic and no matter the technology.
00:09:05.690 - 00:10:08.190, Speaker A: And that is ultimately the reason that IP has had the reach that it has. It is the reason that it has been flexible and evolvable throughout 40 years of technological change is the reason that it's global and sort of so totally kind of spanning as it has been. And by the way, at the time at which IP was being developed, there were a number of other competing standards like ATM and Xns, which were actually more complex and had more features. But as a result they were less flexible and they were less unoppinionated and constrained the way in which users could use those protocols a little bit more. And so in the end, IP and its radical minimalism and its radical unappinionatedness was what ended up winning. So that is the history. What are the implications for new protocols today? So let's bring this back to crypto, to what all of you guys are doing, or to what people in the space are doing.
00:10:08.190 - 00:11:16.290, Speaker A: So first I want us to step back and observe that what a narrow waste does is that it allows a multisightd market to emerge. What is a multisited market? My favorite definition is that a multisited market is a kind of common ground that creates value by enabling the direct economic interaction between multiple kinds of participants. So that's a bit of a mouthful. It's a common ground, it creates value by enabling the direct economic interaction between multiple kinds of participants. And there's lots of examples. So IP is an example because it's a common ground that creates value by enabling service providers and hardware vendors to interact with application developers. And there are other examples from maybe traditional tech, an operating system like Microsoft Windows or macOS Ten or iOS, that's also a protocol that allows for a multisited market to emerge with developers, application developers on one side and then users on the other side.
00:11:16.290 - 00:11:49.100, Speaker A: Something like Uber, like a ride sharing service is similar. Like there's riders on one side and there's drivers on the other. And I would argue the multisighted market is the core template of success for any protocol. Which may be a contrarian claim, but that is what a protocol is born to do. It's born to connect, it's born to bridge worlds between different kinds of participants. So let me give you a few examples from our own world, namely from the crypto world. So Uniswap, you all know uniswap is a decentralized exchange.
00:11:49.100 - 00:12:12.164, Speaker A: Again, two sides. There's liquidity providers on one side. They are the market makers and then there are traders, market takers on the other side, compound. Similarly there's lenders on one side, borrowers on the other and those are both DeFi protocols. But here's a few other examples. Sound XYZ, it's a decentralized music streaming platform. There's artists on one side, there are listeners, fans on the other side.
00:12:12.164 - 00:13:00.624, Speaker A: Forecaster it's a decentralized social network. There are just content creators, creative people on one side and there's users or just sort of people who just use the platform on the other. They all create a common ground for different kinds of participants to come together and economically interact with one another. But the best example of them all is blockchains themselves. I contend that down the line we're going to be able to look back and there will be such a thing as a narrow waste of blockchain computing. So by now you're all very familiar with the high level architecture of a blockchain and this is what it looks like. And the most natural place for a narrow waste to emerge is the consensus mechanism.
00:13:00.624 - 00:14:04.548, Speaker A: At the very center, the consensus mechanism creates a multisited market that connects participants across all layers. But most importantly, it connects validators below who provide computational resources and provide security with application developers above who build applications, deploy smart contracts onto the blockchain. And in the same way that IP created a unified address base for all of the participants on the Internet. A consensus mechanism creates a unified computing substrate for people building below and above and in the same way that IP allows you to not care about the messy details of the linked layer technology and you just have to sort of support the interface on top. A consensus mechanism allows you to not have to care about the specifics of validator hardware when you are deploying a smart contract onto a blockchain. And then finally, as with IP, consensus sets up a similar two sided network effect. It's a similar flywheel.
00:14:04.548 - 00:15:12.276, Speaker A: The more validators come into the network, they provide more security, they provide better computing functionality for application developers to come on top, to build useful applications which create more demand and then drive value to the token, which creates a stronger incentive for more validators to provide more security and computational resources to the network. And around the fly, while we go, we have the same type of self reinforcing feedback loop. So what can we learn from this comparison between blockchains and the consensus mechanism within a blockchain and TCP IP? As we saw, one of the most important factors that drove the success of IP was that it was unoppinionated. And today there are countless of different blockchains out there that are running every kind of experiment imaginable and they span the entire spectrum. On one hand of the spectrum you have blockchains that are highly opinionated, highly vertically integrated, that insist in controlling everything from the peer to peer network to the consensus mechanism to the compute layer above that and the kind of instruction sets that you're able to use. And therefore the kinds of programming languages that are supported. To the other side of the spectrum.
00:15:12.276 - 00:16:23.656, Speaker A: There are blockchains that are fully minimal and want to express no opinion about the kind of peer to peer network layer that you might use, or the kinds of programs that you may be able to build on top, the kinds of programming languages that you might be able to use. They try to be radically unoppinionated, and there's everything in the middle as well. And just to give you two polemical examples, bitcoin is a highly opinionated blockchain. Even though it's a minimal blockchain, it's very opinionated because it prescriptively insists that you must build any programs that run on top of it in Bitcoin script, which is a limited programming language that isn't even Turing complete. On the other hand, Ethereum, which is actually a more complex blockchain, is more unappinionated because it gives you a more expressive programming language with which you can build smart contracts. You can build more things, you have more freedom as a user than you would be if you're a user of Bitcoin. So the jury is still out, but it'll be interesting to see if a similar story plays out where the unappinionated protocols lead to a kind of narrow waste and decouple things effectively such that you have the flywheel effect kick in.
00:16:23.656 - 00:17:01.960, Speaker A: And maybe those are the blockchains that emerge as dominant as it did for the Internet. And by the way, ethereum is somewhere in the middle. I think there are radically more unappinionated blockchains on the other side. And it's unclear as to how far you should actually go because there are trade offs involved and making something more unappinionated does sacrifice some degree of control and so you lose something as a result. And so this is why this is a mental model as opposed to a prescriptive solution. This is the way that you should do it. So takeaways if you're building a protocol, I would encourage you to think of the ways in which your protocol allows for a multisighted market to emerge.
00:17:01.960 - 00:17:56.030, Speaker A: Who are the participants? How much freedom do those participants have? How opinionated is your protocol? Does your protocol have the elements that might lead it to becoming a narrow waste? I think those are the questions that you should be asking and that might inform your design and the direction that you take. All right, so, second mental model. There is a closely related concept to unappinionatedness and that concept is modularity so that these two are often related and they often coincide, which means that they're often conflated. It's easy to think that they're actually the same thing, but they're not. They're different things. I'll show that these two things are actually independent from one another. So the driving question for this mental model is how modular should my protocol be? And we'll see what all of this means in a little bit.
00:17:56.030 - 00:18:50.520, Speaker A: To get started, let's go through just simple definitions. What does it mean for a protocol to be unappininated? It means that it maximizes a user's freedom in the way that they can use the protocol or build on top of the protocol. That's what it means for it to be unappininated. What does it mean for a protocol to be modular? On the other hand, it means that the protocol or the architecture that the protocol leads to can be broken down into atomic subcomponents that are self sufficient. Sometimes a protocol being modular leads to it being unoppinionated because the modularity sometimes leads to greater flexibility. But that's not always the case. And so I'll give examples where actually, in order to become more unoppinionated, you actually have to become less modular.
00:18:50.520 - 00:19:33.368, Speaker A: So you see how these two things are different. I should also say, just for clarification's sake, that the Internet is an example of a protocol and stack that's both it is both an unoppinionated protocol design, but it's also modular because it was designed to be built in layers where each of the layers is independent from all of the other layers. And there's clean dividing abstractions and interfaces in between each of the layers. So here's a diagram that helps illustrate how these two things are separate. There's two axes on the y axis we've got Unoppinionatedness, which I've just abbreviated as user freedom. And then on the x axis we've got modularity. And so we talked about two examples before bitcoin and Ethereum.
00:19:33.368 - 00:20:07.480, Speaker A: So you see how Bitcoin is not very modular because it's fairly vertically integrated. It bundles consensus with a specific computing environment that prescribes a specific programming language. So it's vertically integrated in that sense. And it also doesn't really give you that much user freedom. It's not that unoppinionated because again, it prescribes a specific programming language. It doesn't give you the freedom to maybe build something in a Turing complete programming language the way that other blockchains do. So Ethereum is further off to the right, more modular, I think.
00:20:07.480 - 00:20:59.880, Speaker A: Like for example, the roll up centric vision of Ethereum encourages the building of a blockchain stack in layers where you have Ethereum layer one. And then there's L two s that maybe provide greater performance or provide additional features. So it's a more modular vision for how a blockchain should work. And it's also more unoppinionated even though it's more complex because it has a more expressive programming language. So it doesn't have an opinion as to what kinds of things you should be able to build on top of Ethereum. Some of the other examples here are Aptos and Sui, which are highly vertically integrated because the teams that are building those blockchains are building everything end to end and they've built every layer throughout the stack. But they also are fairly unappinionated in that they have highly expressive programming languages.
00:20:59.880 - 00:21:45.072, Speaker A: And then off to the right, there's Celestia, which is a vision for a hyper modular, very minimalist type of architecture where Celestia is just a data availability layer and then all of the other things get built as modules around it. And so here you can actually see how Celestia is more modular than Ethereum because it's just data availability and computes should be provided by a different module. But it's less unoppinionated. And it's less unoppinionated. It's more opinionated because it prescribes that no smart contracts should ever run on top of it, that it should just be used for data availability. There's no programming language. It makes a strong opinion about what you can and cannot do on top of Celestia.
00:21:45.072 - 00:22:02.300, Speaker A: So it's more modular, less unappinionated. This is, again, the way in which these two things are different. TCP IP all the way up to the top right. It's just both. It's a very modular architecture. It's also very unappininated. So this hopefully illustrates maybe the distinction between these two concepts.
00:22:02.300 - 00:22:48.316, Speaker A: There's a very good book. It's called the innovator solution. It was written by Clay Christensen in the early two thousand s and there are two chapters in that book that specifically address this whole topic. It was geared primarily for traditional businesses and whether the business should be modular or integrated. But I contend that a lot of the insights translate over to our world into crypto and to protocols and blockchains. So his argument is that it makes sense to be monolithic, that is, to be integrated, which is to say, not modular. Whenever the technology is not sufficient to meet the user's needs for whatever reason.
00:22:48.316 - 00:23:39.208, Speaker A: Maybe the technology is too nascent, maybe it hasn't gotten to the point at which it fully satisfies everyone's desires and the user is therefore always wanting more. They're left always wanting more. And I think that's kind of where blockchains are today. No one would say blockchains today fully satisfy all of the desires, all of the dream needs that we all have for what a blockchain should do. And whenever that's the case, Clay Christensen argues, it makes sense to be monolithic. But at the point at which the technology does begin to meet the user's needs and maybe even begins to surpass those needs, then it makes more sense to begin to modularize. And the reason for that is that once you modularize you're able to reduce cost.
00:23:39.208 - 00:24:38.540, Speaker A: Because now for any one particular module, you can outsource the work for it to a whole ecosystem of participants that can build the functionality for that module, which creates a kind of commoditization for that module and reduces the overall cost offering of the entire thing. It also, by the way, gives your users and the developers that are building on top of you more flexibility because now they can choose to swap out one module for a different module. So those are some of the advantages of modularity. But of course there's costs as well. Namely that in order to build something in a modular way you often have to introduce more complexity because you now have to think about all of the edge cases and you have to commit to specific interfaces, perhaps prematurely specific abstractions that divide the different modules that you now have to respect and you can no longer kind of sort of play with. So those are some of the costs of modularizing. But there's clear advantages given that it can reduce cost and it can give your users more flexibility.
00:24:38.540 - 00:25:41.564, Speaker A: So he goes as far as to argue that as soon as the capabilities of the technology begin to surpass your customers needs, then at that point, if you don't modularize, someone else will. Someone will build a modular architecture and then they will essentially eat your lunch. But before you reach that point, the advantage is in favor of just staying monolithic, having control, not modularizing and controlling the entire architecture yourself so as to be able to optimize across the boundaries of would be modules and as a result get as close as possible to meeting the user's needs. So this here's a diagram from the book, from the innovator solution. And it may be small and hard to read, but you can see the dotted line is what users expect, what users would want from the technology. And then there's two lines that are at a steeper slope. The top line is the capabilities that you can get if you're integrated.
00:25:41.564 - 00:26:38.870, Speaker A: Meaning if you're monolithic the line below that, that represents the capabilities that you're able to achieve with a more modular architecture. And the fact that it's below just suggests that if you opt for a modular architecture you have less control, so therefore you can't optimize as aggressively. So you're under the line that is vertically integrated, which has better capabilities. And so it kind of shows that as time goes on, the integrated architecture begins to overshoot it's providing more than what the customer or what the user actually needs or wants. And so at that point you're no longer getting anything, you're no longer gaining by being integrated. And it makes sense then to switch to modular to gain the advantages of modularity while still being above the dotted line, which is kind of the baseline demand from users, the needs of users. So let's go through an example, just to make this really clear.
00:26:38.870 - 00:27:43.960, Speaker A: Recall the history of mobile. So before the iPhone there was this thing called the BlackBerry. And I don't know how many of you remember the BlackBerry, but the BlackBerry was a very monolithic and vertically integrated device. It had a single app, really like single important app, which was email. And it was essentially an application specific computer that was tightly controlled by Rim, which is a company that made BlackBerry in order to make sure that it was good enough at that one thing, it was good enough at doing email. And as a result it was a good product for business customers who just wanted to use their phone to do email and at the time doing something more doing something that was more modular and more general and more unoppinionated, which in this case coincides with being modular would have been too difficult. The technology really wasn't there yet and it was only as the technology became good enough that it became possible for Apple to become more modular in the form of the App Store.
00:27:43.960 - 00:28:58.876, Speaker A: The App Store gives the iPhone a little bit more modularity because now a bunch of developers can come and write applications for the iPhone and then that ultimately ended up being the model that won. But it would have been hard to do that at the time and you really had to have the tech evolved first in order to get that to work. So now all of that is fine and good, but there is a problem which is that the internet seems to be a glaring counterexample of this whole theory because back when the internet first emerged it was not only not good enough to meet users needs, it hardly even worked, it was certainly not sufficient. And at the time there was also this competing approach known as the Information Superhighway which was very vertically integrated and it was actually basically this consortium of all of the big name companies coming together and trying to build this end to end experience. That worked, right? That was good. That was their approach. But interestingly, IP and the Internet ended up winning with their hypermodular approach, even though they had started from this place of not being good enough, that somehow took over and ended up winning.
00:28:58.876 - 00:30:01.904, Speaker A: So why is that? And my sense is that when Christensen wrote the book, he was not fully aware of just how powerful network effects can be. And in the case of IP, the power of this unappinionated narrow waste was just so great that it just turned this whole theory on its head. So where does this all leave us? Does this mean that modularity is good or is it bad? And the answer is that it depends. There's advantages to modularity and there's disadvantages. There's costs to modularizing, namely increased complexity and having to decide on interfaces and abstractions, maybe prematurely. But there's also advantages the fact that you can reduce cost and give you users more flexibility, you can create bigger ecosystems because now there's more people who are participating. There are also cases, by the way, where modularity confers the benefits of unoppinionatedness.
00:30:01.904 - 00:30:52.644, Speaker A: But there's also cases in which that's the opposite, where modularity reduces unoppinionatedness. And so you also have to be mindful, this is how this whole section interfaces with the first section about the narrow waste and unappinionatedness. So basically the takeaway, this whole section is a mental model that can help you think through the complexities of that choice. And it'll be case by case and it'll depend. Okay? So the third and final mental model, the network flywheel, this is the final stretch. So here's a driving question. What role should a token play in my protocol? In the section of the narrow waste? Before we talked about how the best way to think of a protocol is as the driver of a multisited market.
00:30:52.644 - 00:31:45.856, Speaker A: That is what protocols are born to do. That is what they do when they're successful. But the beautiful runaway chain reaction, the feedback loop that made a protocol like IP ultimately take over the world, has to be bootstrapped somehow. And historically, all multisited markets have suffered from what's known as the cold start problem. It's hard to get them started because a ready and willing supply side is unlikely to just spontaneously materialize if there isn't already a demand side on the other side. And by the way, vice versa, like the verse holds as well, the demand side is unlikely to emerge if there isn't already a supply side on the other side. In the past, this problem has been solved with enormous influxes of capital, usually from VCs.
00:31:45.856 - 00:32:30.404, Speaker A: In the case of something like Uber, for example, where you subsidize one or both sides of the market or from entities like the government for things like IP, where initially you had to have a lot of external capital provided largely by the government in order to get the Internet to really take. Off. So they effectively subsidize one or both sides to really get the flywheel going. This is where I believe I think actually it's already been shown a token can be very interesting. The Cold Star problem is one of the many problems that a token can help solve. So here's a thought experiment for you. Imagine that Uber had raised less money than it did.
00:32:30.404 - 00:33:59.440, Speaker A: And so instead of subsidizing both sides of this multi sided market with cash the way that they did, if instead of doing that, they had opted to give drivers on the platform a small amount of equity in Uber, the company, for every drive that they did, it's basically giving them a small amount of ownership, an ownership stake in the company. Could we imagine that having done that might make some of them realize if this is the early days of Uber, right, it might make some of them realize that that ownership stake at someday might someday become very valuable. It might be worth a lot of money. Would that make them more likely to drive for Uber? Would it make them more loyal towards Uber as opposed to some of its competitors? Would it have made them more likely to evangelize Uber to other drivers, other prospective drivers? I would argue that yes, this is actually a fundamentally more efficient capital structure for multi sided markets. The capital that is needed to get them started doesn't have to come from external sources like venture money or the government. It can come instead from internal sources, namely the participants themselves, who can contribute to the network with labor. And you get that by making them owners, but making them fractional owners of the platform.
00:33:59.440 - 00:35:00.176, Speaker A: And you do that in exchange for their contribution. So let's bring this back to the Internet and to crypto. Imagine if the Internet imagine if TCPIP had had a token, and if that token had been granted to people who helped bootstrap the Internet as a network. And if that token granted its holders a fractional ownership of the network itself, that maybe gave them rights to some share of whatever revenue flowed through the Internet. Would that have made the Internet easier to bootstrap without as much government funding? Maybe. Would the network effects of the Internet be even stronger than they are today? Given that you now have this additional vector for capital, both financial capital, but then also human capital, to enter the network again, I would argue very much yes. So finally, this brings us to the network flywheel.
00:35:00.176 - 00:35:51.632, Speaker A: It's a mental model that applies especially well to layer one blockchains, but it can be modified slightly to apply to almost any protocol. You'll be able to see how that's true. So the flywheel starts with the founding team and a group of core developers who come up with a vision for what the protocol should be. And with the help of the core development team and maybe external funding from investors that comes in in the form of financial capital. They build the protocol and establish an initial token value. So the token is valued at something, there's some value to the token. And now that the token exists and it has value, it creates an incentive for a different kind of participant.
00:35:51.632 - 00:37:04.408, Speaker A: In the case of a layer one blockchain that would be validators to come into the network and provide production capital in the form of computational resources that provide security and functionality to the network such that you now have. A base level of platform functionality which encourages third party developers to come into the network and provide their human capital by building useful applications that then provide utility to end users. And those end users eventually begin to form a kind of community that reinforces the original vision at the heart of the protocol. And so we've gone full circle. This is how the flywheel spins. As the vision for the protocol becomes stronger, the token becomes more valuable, maybe with the help of additional financial capital from investors, which creates a stronger incentive for validators or other participants to contribute production capital to the network which improves the functionality of the network, encouraging more third party developers to build applications which provide more utility to end users. And again, that reinforces the original vision at the heart of the network.
00:37:04.408 - 00:38:01.376, Speaker A: So that's the network flywheel, the token in this flywheel plays a critically important role. And that is that it's a vehicle of ownership in the protocol itself. And as a result, it kind of allows the network to borrow value from the network's future. And if participants in the network believe that the network will be valuable in the future, they may be more willing to participate and contribute today if they were able to earn some fractional ownership of that future value. So here's a takeaway. If a network is designed correctly, the various participants at every stage of this flywheel may be able to earn a token in exchange for helping to bootstrap the network. And that is essentially what helps the network break through the cold start problem.
00:38:01.376 - 00:38:27.652, Speaker A: And it's all mediated by the token. There are many roles that a token can play, but helping bootstrap a protocol's multisited market, I would argue, is one of the most powerful ones. And that's basically the network flywheel. So there you have it. Three mental models went through the narrow waste, the modular advantage or disadvantage, and the network flywheel. Any questions?
00:38:27.786 - 00:39:04.612, Speaker B: Hi Ali, thanks for the talk. I have a question about the regulatory compliance changes in the recent months. Right? So especially the example you mentioned about Uber. If they raise from their users, so would that make token more of a security? And also I can see a barrier of how do I convince drivers to invest in this token? Because venture investors, they're like professional, they look at softwares all the time. So what do you see?
00:39:04.666 - 00:40:02.784, Speaker A: Barriers here so two questions. The first question is about regulatory. That's a very nuanced conversation, and I'm not a lawyer, but the overarching argument would be that a network that is fully decentralized, where there are no asymmetries of information, you essentially just have everything out in the open. Participants can interact with other participants as equals, where there is no insider that has some asymmetric information about the future price of the token. If you're able to eliminate all of that and any asymmetries are gone and you get to that through decentralization, then you would fail the fourth prong of the Howie test, which is that there are material and managerial efforts from others because there are no managerial efforts from others in a world where the network is fully decentralized. And so then you can argue that it's not actually a security, but there's a lot more there. And I think we're happy to chat offline about some of the nuance.
00:40:02.784 - 00:40:50.468, Speaker A: As for the second questions, how do you encourage drivers to, quote, unquote, invest in the network? Well, I was arguing that actually they wouldn't invest. They would just earn the token through work. They would drive for the platform, and then as a result, maybe they get some cash, but maybe they also gain they're also able to earn a fractional ownership share in the future of the company Uber. And that combination might then shift the way that they behave towards the platform, make them more loyal towards the platform, more willing to evangelize it to others, more willing to drive for longer. So that's essentially the argument. And it could be maybe I think a monetary investment wouldn't be necessary. We more contribute human capital in return for a token, basically.
00:40:50.554 - 00:40:53.108, Speaker B: Yep. Yep. Okay. That's very clear. Thanks.
00:40:53.194 - 00:40:53.924, Speaker A: Sure.
00:40:54.122 - 00:42:02.440, Speaker C: I was pondering two things, kind of the last points and thinking about how drivers we were just in Ecuador, and we're taking a lot of Ubers, and some of the Ubers didn't even want to take credit card because they wanted the liquidity there. And then something just like a perspective of someone who's needier and can't eat in ten days when the token goes to the moon, they need to eat now. Just kind of like thinking how in an ideal world, those situations, the liquidity would be there. That was one thing. But the other thing I was also interested is just kind of get your vision on what the IP of blockchains. Is it is it going to be empower us to code a contract in one language and put it on one blockchain and have some ZK or some layer two do something else, and we don't think about that at all? Is it a programming language that needs to come in and abstract everything away? Or kind of like, how do you see that IP actually come into fruition? Or do you see any projects that are working on that cool approaches that they're taking to become that little middleman.
00:42:02.780 - 00:42:33.076, Speaker A: Yeah. To your first point, certainly I think Uber is an example and I think all the parameters would have to be figured out. You do need to provide liquidity to participants in the short term. So again, maybe you do that through some combination of cash that is liquidity so that they can cover their bills. But then there's also this component where they have some ownership in the network so that influences their behavior moving forward. It makes it so that it's a longer term relationship as opposed to the very transactional. Like you drive someone today and you get money today for that drive and that's it.
00:42:33.076 - 00:43:30.360, Speaker A: And that's the full extent of your relationship with the company. As for your second question so again, it's hard to be prescriptive and hard to say this is the way to do it, this is the way that it all work. But I do think Ethereum is an interesting example. I think it lands at an interesting region of the trade off space and it's somewhere in the middle in this spectrum from vertically integrated and opinionated to unappinionated and completely modular. But I think that it has maybe found a kind of sweet spot because it does provide you with the flexibility to build all sorts of things with a Turing complete programming language and Solidity, which by the way, creates the ability for people to then build layer twos. Layer twos are possible on Ethereum in a way that really are not possible on a blockchain like bitcoin. And so then that provides a path for Ethereum to extend itself and for it to become more powerful through different kinds of modules that enhance what the core layer one can do.
00:43:30.360 - 00:44:17.736, Speaker A: And that could be somewhat analogous to the way that TCP IP has evolved, where you have IP at the center but then TCP is actually a separate module on top of IP which can be swapped out for UDP as a different transport level protocol. And then on top of that, people have built all sorts of different layers and modules and there's like seven layers and you can actually sort of dive deep into how that whole stack has evolved. And it's sort of highly modular. And I think it's driven in large part because of the fact that IP itself is so flexible. And so maybe the core flexibility of Ethereum and the fact that it has initial network effects in a very large community so far might lead to for it to kind of go down a similar path and for it to be a similar story as IP. But we'll see. Thank you.
00:44:17.918 - 00:44:44.400, Speaker D: My question is how do you think about these two token models given the kind of the network flywheel model that you presented? Particularly, for example, Rocket Pool, where a lot of the value accrues to our ETH because it's based on the Ethereum staking value, but then there's an indirect value accrual to their governance token of that token as well. So how do you map that to the network flywheel model that you presented?
00:44:44.980 - 00:45:28.792, Speaker A: Well, I think that the core high level view is that the token should in some way encourage a kind of participation that's helpful for the network, so then you can map that into whatever network. So in the case of something like a governance token, the incentive in that case is to be a responsible steward of the network, right? And that is a form of contribution. It's a kind of human capital, it's a kind of labor that a protocol that needs to evolve, needs to have. And a token that is a governance token could play that role. Or it could be that the token is incentivizing a different kind of behavior. Maybe it's providing security. And that happens through a behavior like Staking where you take the token, you lock it up as a kind of skin in the game, and then you're expected to provide some kind of service to the network.
00:45:28.792 - 00:45:47.984, Speaker A: And if you don't provide it correctly, then your stake is slashed, right? That's another kind of incentive structure. And there could be many different kinds of incentive structures. But the overarching goal is that you're incentivizing participants along every stage of that flywheel to contribute to the network and to help bootstrap it and to make sure that it succeeds in the longer term.
00:45:48.112 - 00:46:00.472, Speaker D: Does that mean it's kind of imperative to have both out of the gate so that participants have an understanding of each side of the value accrual governance and the more kind of direct value accrual one, for example?
00:46:00.526 - 00:46:28.864, Speaker A: I think it probably depends. I don't think it necessarily means that you have to have everything in place from day one. It would probably also interplay with a regulatory component where you cannot have a fully tradable token until the network is fully decentralized. And there's a tricky question as to how you get there. And so I think it's case by case. In some cases you would want to have all of the incentives fully available and on chain upfront. In other cases, maybe you would roll it out over the course of a longer period of time.
00:46:28.982 - 00:46:30.096, Speaker D: All right, I appreciate it.
00:46:30.118 - 00:46:30.752, Speaker A: Thank you.
00:46:30.886 - 00:46:51.016, Speaker E: So you brought up the example on your presentation where you had modularity on the x axis, user freedom on the y axis, and you had all these different networks. Do you have any sort of framework to determining what applications are better built on? More modular platforms or more user freedom based platforms or protocols? I mean, anything come to mind on.
00:46:51.038 - 00:46:53.656, Speaker A: That front for applications or for like.
00:46:53.678 - 00:47:13.730, Speaker E: For example, consumer applications, for example? I'm thinking because you brought up the Sound XYZ example, I collect a bunch of music on Sound. I'm trying to think how would sound look like on Aptos, for example, and how would you actually approach that mental model determining is sound better fit for something like Ethereum or something like Solano or something like Aptos as an example.
00:47:14.180 - 00:48:06.204, Speaker A: Yeah, well, I think from the perspective of an application developer, what you care is for the infrastructure to meet your needs to essentially work. And so it could be the case that a vertically integrated architecture is more capable of doing that. It could be that because the blockchain that you're building on top of is fully vertically integrated, it is more performant, or it has better usability and is better documented or has better primitives that you can build on top of. And if that's the case, then maybe you should go for the vertically integrated sort of stack to build on top of. But it may be the case that, again, maybe we're in the realm in which the infrastructure and technology has started to overshoot your needs and maybe it's more performant than it needs to be. You don't need the extra performance and I don't think we're in that world at the moment, but maybe five years from now we will be. And then at that point what you care about more is not more performance, but you care about flexibility.
00:48:06.204 - 00:48:42.750, Speaker A: And then the modular approach gives you that flexibility, it gives you the ability to swap out some module for a different one. It doesn't lock you into a specific way of doing things and it gives you more freedom. It coincides in this case with it being also more unappininated. But then you're assuming that you're in a world where the architecture as a whole meets your needs and that's ultimately, I think, again, dependent on what the application requires, like something like Sound might be different than something like a game where the performance requirements are much higher. But I think that is the mental model for how to decide those things and it's hard again to be prescriptive and to say there's one way.
00:48:43.120 - 00:49:04.912, Speaker E: And then my next question is are there any examples where tokens have made protocols more opinionated? Anything come to mind on that? Because you brought up the example of like the TCP IP and it didn't have a token, it ended up doing really, really well. But the argument was it could have improved bootstrapping the Internet, if it did have a token, incentivizing the right people to act accordingly.
00:49:04.976 - 00:49:05.750, Speaker A: That's right.
00:49:06.120 - 00:49:18.036, Speaker E: But it was still a success without a token. Right. Are there any examples where tokens create protocols more opinionated and actually doesn't have the outcome in which it was intended to have?
00:49:18.138 - 00:50:16.996, Speaker A: Yeah, certainly. So in the case of the internet, you're right, it was still successful, but we should remember there was enormous amounts of influxes of capital primarily from the government to really get it to come to life. Are there examples of tokens that have made a protocol more opinionated? Well, there are certainly cases where a token makes the protocol work less well, cases in which the token is not well designed and so then maybe it leads to the over financialization of the ecosystem. So like adding a token maybe to a creative ecosystem, like maybe a social network. Or there are examples like Steam way back in the day, where introducing a token and introducing financial incentives completely warped the behavior and made it so that now is no longer a fun place to be as it's no longer a social network that you want to spend time on and the content becomes content that's entirely spammy and clickbaity. And the whole intent behind the content is to try to capture more rewards through more tokens. And so then that's like an example of the token just steering.
00:50:16.996 - 00:50:48.112, Speaker A: Like basically the incentives are not working the way that they were designed and they're encouraging the participants to not help bootstrap the flywheel and help the network. And rather it's incentivizing them to do some other thing which actually is destructive. So there are lots of cases like that. And it's a very tricky question. How do you design the token? Maybe one potential answer is that the token should be measured. Like the reward that you're giving participants should be calibrated so that it doesn't completely warp all behavior. Maybe you do that by say, locking up the token.
00:50:48.112 - 00:51:04.228, Speaker A: You award a participant a token, but it's locked up. Right. They can't immediately cash out, for example. That's one degree of freedom that you have in a design space. And I think we're still exploring all of these questions like exactly how should a token be designed for different kinds of applications in order to lead to the desired outcomes.
00:51:04.324 - 00:51:05.530, Speaker E: Cool, thank you.
00:51:06.380 - 00:51:38.470, Speaker F: Thanks so much. Wanted to ask an almost related question around how you really liked how you talked about unapinionated protocols and then the introduction of tokens as a way to create a business model around this. I was going to ask how tokens play into this notion of unappinionatedness where there are inherently mechanism decisions as well as there is an element of price and a kind of team behind that or like a community behind that at the very least. And so how do those two things kind of do you envision them fitting together in the future?
00:51:38.840 - 00:52:18.080, Speaker A: Yeah, it's a great question. I think that the way to think about this is I think that IP as an example, showcases how a protocol that is unappininated has some advantages because it can lead to this kind of narrow waste effect. It can lead to a broader sort of addressable market both above and below the protocol. And that's a powerful thing. But of course there are trade offs. So if you try to maximize unoppinionatedness to the maximum extent, there will be other things that you're giving up because namely, now you can't have an opinion about the way that people use your protocol and the way that people use the thing that you're building. And it might also mean that you can no longer be as deliberate with the architecture of what you're building.
00:52:18.080 - 00:53:19.830, Speaker A: It may mean that now you can no longer decide exactly how your token should work or how the programming language that people are supposed to be able to write applications in should work. And so there is such a thing as taking it too far. And so again, it's this case by case thing where it's a trade off and you have to figure out what is the right level of opinionatedness that your protocol should have, knowing that more unapinionatedness is good, but you have to then contend with some of the costs that it comes with. So Ethereum is an interesting example because Ethereum could be more unappinionated but the fact that it isn't maybe allows it to sort of work well in the ways that it does. For example, it bundles solidity and the EVM as part of the core layer one. And there are some advantages to that, namely that it can optimize specifically for the EVM. It can build in, for example, precompiles for certain things that are very common that people need on top of Ethereum and that's it being opinionated because all applications on top of Ethereum have to be EVM based.
00:53:19.830 - 00:53:44.860, Speaker A: So those are the advantages. But there's disadvantages. What if someone wants to write an application in JavaScript or like Rust or something else? Well, those applications can't readily work on top of Ethereum and so that's like an example where it comes at a cost. But that's just the position on the spectrum that Ethereum picked and it's one experiment of many and I think we'll see how it all plays out. But it's ultimately adjustment. Call it's again hard to be prescriptive.
00:53:45.280 - 00:53:46.350, Speaker F: Thanks so much.
00:53:47.440 - 00:54:03.900, Speaker G: How much do you attribute the dominance of IP to the narrow waste design versus decisions made at the operating system and hardware layer? Because I would imagine once routers started to implement IP, the defensibility and switching costs were so high that even if a more advanced standard had come along, it never would be feasible.
00:54:04.060 - 00:54:55.760, Speaker A: I think the fundamental driver were the network effects that began to kick in. Because then I think as soon as you had some amount of traction and people were using computers that were using IP for interoperability, and then again, I think very much, as you're saying, as sort of hardware vendors and service providers began supporting IP. It just becomes this inescapable gravity well where if you want to connect to other people in the world using computer networking technology, TCP IP is the network that everybody's using. And if you try to use something else, well, then there'll be no one over there, there'll be no one to communicate with. And so then there's like very little choice that you have. You just have to kind of go with it with a thing that's already taking off. And I think that is very much this flywheel effect that began to sort of it just began to cascade and this runaway chain reaction that ultimately led to its success.
00:54:55.760 - 00:55:01.344, Speaker A: And I think it's what triggered actually what you're saying. Like the hardware developers integrating it and making it fully functional.
00:55:01.392 - 00:55:27.116, Speaker G: Yeah, it makes perfect sense. Like the narrow waste design came first and that's what actually made it possible for the hardware vendors to adopt it. So my last question would be how do you distinguish between the cold start problem versus lack of product market fit? Because I would argue that in history there have been examples of products that have achieved that kind of network effect independent of a token or subsidy by VC capital. For example, Napster or Facebook before it became a corporate can be I think.
00:55:27.138 - 00:56:21.950, Speaker A: It can be tricky to tell those two apart a priori, but I think there's good signs of that. So for example, in the world of crypto, if you do build a network where there is a token built into the network to subsidize, say, the supply side. So for example, say it's like a storage network where you're incentivizing storage providers to provide storage to the network. Or maybe it's a sort of connectivity network where you're incentivizing the supply side to provide bandwidth to a group of participants. Or maybe it's like a normal blockchain where you're incentivizing validators to provide computing capabilities for application developers on the other side. If you do that and the supply side shows up because they're going to show up because there's money on the table and no demand side shows up, then that's obviously a very clear sign that you don't have prior market fit. At least you don't have prior market fit on one side of the market.
00:56:21.950 - 00:56:37.904, Speaker A: Like the supply side has showed up and they're willing to do whatever they need to do in order to earn the rewards, but the demand side hasn't shown up yet. So I think that at the moment where you start to see both sides reinforce one another, then I think that's when you can say that you actually have product market fit.
00:56:38.102 - 00:56:40.288, Speaker G: Thank you so much. Makes a lot of sense. Appreciate it.
00:56:40.374 - 00:56:43.120, Speaker A: Thank you. Awesome. Thanks so much, Ali.
