00:00:19.930 - 00:01:19.954, Speaker A: Hi everyone. I'm Sam, one of the founders of Arweave. And today I'd like to talk to you about mechanism design, which was an obscure piece of literature kind of study in economics until around ten years ago with the birth of Bitcoin. And that's obviously extremely important to us as people building crypto systems, but it's also not something that we were all trained in by default, I would say. So this is essentially what you might think of as programming humans for engineers and this is based on experience and learnings that we've made kind of at Arweave along the way and also before Arweave. So for the last eight or nine years without, I guess, formal study. So I was part of a PhD program studying and building decentralized operating systems before I got into the crypto scene.
00:01:19.954 - 00:02:16.514, Speaker A: And as a consequence it was kind of necessary to learn all this stuff ourselves. And I would say that most of the literature out there about mechanism design is focused very much on people inside the economic sphere by default. And so really what I'm trying to do with this talk is give you a bridge from people that are very from the place that us engineers are very used to sort of inhabiting to somewhere that is much more kind of economics based. And I can basically tell you along the way how things relate and also where you can go to read more and get way into the depths of how crypto economics and mechanism design work afterwards. But really I would say this is the kind of missing link for engineers getting started in the crypto space on the economics side. So this talk is in three parts. There's an introduction which takes you through broadly what mechanism design is, how you can use it, and a few examples both in centralized and decentralized systems.
00:02:16.514 - 00:03:16.502, Speaker A: And then there's an overview of how it can go wrong and the potential pitfalls with this. I mean, we are talking about essentially programming human behavior and so there are a lot of moral and ethical questions that arise from this that I think we need to have a strong framework through which to discuss and act appropriately. And then finally I'll talk to you sort of more in depth about some example systems. So we'll go through Rweave and also Bitcoin and see how we use these mechanism design approaches in practice to build systems that achieve a goal. So the fundamentals of mechanism design are programming human behavior through the careful design of incentives. In this talk I would like to posit the theory that essentially humans are just like machines that we would normally program but instead of responding to and running programs in a traditional sense. So applications that are series of instructions that the computer must execute in order to be in line with a properly functioning CPU.
00:03:16.502 - 00:04:15.294, Speaker A: Instead what we have is people that are led by goals towards well through incentive systems so this is really quite simple. In a nutshell, we see that humans are machines that want to achieve goals and they plan their way towards those goals through sub goals. So one of these goals might be I would like to go home after this and have a steak. And as a consequence, as soon as I desire that, my mind starts to think, okay, well, what are the sub goals involved in reaching that position in life? So we see that on the way to these meta goals, we go through sub goals. Like with steak, for example, I need to go to a shop, I need to buy the steak. I also need to have a house in which to cook it, right? So we see that there are these sub goals. And I would argue that one of the most fundamental of those is money.
00:04:15.294 - 00:04:57.802, Speaker A: In fact, money is the unifying sub goal for almost all larger goals in life. And before money, we had essentially this mechanism where there was in order to have a transaction, there must be a double coincidence of value. So what that means in practice is that if I want to have a stake, I need to go. And I'm a carpenter, say I need to go and I need to find someone that wants to buy a table from me that I've made and swap it for some amount of stake. This is obviously a very, very inefficient system. So one of the first mechanism designs that humans made was like, okay, well, what is a global generic sub goal? And that we would say, is money. That is, everybody wants money.
00:04:57.802 - 00:05:17.650, Speaker A: And as a consequence, we can freely exchange through money for other goods of value. So I'm a carpenter. I can sell a chair to someone. I get money. I can take the money, and I can take it to a butcher and I can buy some food. And as a consequence, everybody is happy. And this makes economies much more efficient.
00:05:17.650 - 00:06:26.790, Speaker A: So from our point of view, we can see, okay, if we can design a mechanism that gives people money as an output, then we can insert ourselves on the chain towards reaching basically any of those goals that those humans want. So it doesn't matter to us whether they want a vegan meat free burger or a steak or anything else or a chair. A house doesn't matter because the sub goal in common is money. So if we can define a way of giving them money as a result of playing an economic game, then we can essentially push their behavior down the route that we're attempting to define. So this is what we do. We design a mechanism that's output is money, leading to eventually the goal of whatever it is that that individual actually desires. And humans are so attached to this process of see goal, generate sub goals, execute towards those sub goals, towards the major goal that this is an extremely reliable way of pushing behavior in a desirous fashion.
00:06:26.790 - 00:07:25.110, Speaker A: So by designing these economic games appropriately, we can push selfish humans, which are essentially humans that are playing what we would call the dominant strategy. So the strategy that is most effective inside the game you've created to exhibit useful behaviors. So this is the entire game, this is programming humans. You get a human, you create a mechanism that's output is typically money, but it can be social reputation. We'll get to that a bit later, but in most cases it'll be some form of money which allows them to get towards a goal. And as a byproduct of your mechanism, you have something that you find useful. So example of this in practice, in my native Berlin, we have a bottle pickup mechanism design run by the government where basically if you pick up bottles from the street you can deliver them to drop off locations and you'll get around thirty cents per bottle.
00:07:25.110 - 00:08:28.186, Speaker A: So this is a way of giving the local population that don't have any other job a job by default. But as well as that, it has this useful social byproduct of creating cleaner streets and also requires the local government to pay fewer street cleaners and centrally plan less. So one of the, I guess common factors we'll notice when we're looking at mechanism designs in this lecture is that a lot of them really have this amazing attribute that they push to the collective brain of society the question of how to play the game that you've created most effectively. But we'll get to that later. So doesn't have to be government run. Here is an example of the juicer economy. So when these new scooter startups came around, they basically had this problem where, okay, so at the beginning of the day we distribute the scooters across the city, we put them in places where they're useful to people and we make sure they're fully charged.
00:08:28.186 - 00:09:30.722, Speaker A: But by the middle of the day, all those scooters, or almost all of those scooters, are in somewhere that's much less useful and they have half charge and by the end of the day it's in complete disarray. So the early startups went down the route of saying, okay, so what we need is a central planning system whereby people can we essentially hire enough people with vans to go and pick up the scooters, to charge the scooters and then to redistribute them to useful places in the city. But this is extremely, extremely costly and very ineffective. It's actually another sort of example of the traveling salesman problem, right? You have to work out how do I go around all of these scooters in the most efficient way to charge them and then also redistribute them. So the smart scooters companies decided, okay, well, let's just not do this. Instead, why don't we say for every scooter that you charge and you move to a point that we determine, we will give you some reward. And that was it.
00:09:30.722 - 00:10:22.706, Speaker A: And then they found a way of marketing that opportunity to people. And as a consequence, people just came along and they would pick up the scooters, they would move them to the right place and they would charge them. And there was no central planning involved and it's extremely efficient. So this really works in practice. And if there's only one thing you take away from this talk, I would say is that you can take that same mechanism and that you can apply the same reward rules that we do in bitcoin mining and in cryptocurrency mining of almost all kinds. And you can make a mechanism that will give you a fair market value for any task like this. So let's just imagine that I'm bird right, I don't know how much I should be paying people up front for this job of distributing the scooters around the city.
00:10:22.706 - 00:11:18.790, Speaker A: Like it's actually quite difficult to determine what an appropriate reward for that would be. So what I do instead is I say, okay, well, I'll start off and I'll say, I will distribute $2,000 per day for people to do this task for me. And then people join. And as more people join, they have this sort of competition effect which lowers the cost of each of these movements and charges of the scooters until it reaches the opportunity cost, at which point that no new people will come to the mechanism and say, yes, this is a profitable thing for me to do. So that's fine, that limits your growth. But from this point as a startup, you've really essentially found the optimum pricing strategy for having this service delivered for you. It's extremely effective and it's possible to do in almost every situation, but doesn't just have to be economic rewards.
00:11:18.790 - 00:11:59.102, Speaker A: So here's a BitTorrent client. BitTorrent worked with a mechanism designed called optimistic tit for tat. It's extremely simple and extremely powerful. What happens is we play a game altogether that says I will give you data if you will give me data. And then occasionally we will give data to each other at random. What this means is the nash equilibrium, so that's if you imagine if only selfish players are playing the game at rest when there is no more movement in the structure of the game, then what will happen is everybody shares data all the time with everyone else. And this is not just theory.
00:11:59.102 - 00:12:30.202, Speaker A: Again, this is practice. So this mechanism was responsible for the transfer at one point of a third to half of the internet's traffic. It's extremely effective, and this was long before bitcoin. What's really interesting about this is that actually it requires zero global synchronization. So that is I just need to remember who I like and that's it. And then you can earn reputation with me and essentially gain a social ranking just by interacting with me in a nice way. So giving me data.
00:12:30.202 - 00:13:09.734, Speaker A: When I give you data, that's it. There's no need for on chain transactions or anything like this. It makes it extraordinarily scalable. But of course, this leads us to the final example here, which is Bitcoin. So Bitcoin is decentralized ownerless money. That is, a system of money or a system of value storage at least, where no one party is able to control it or to change its ownership by force or print more of the tokens in the network. We have proof of work as a mechanism to reward people for securing the network and also processing transactions.
00:13:09.734 - 00:13:41.358, Speaker A: Again, just another simple mechanism design, but it's able to do something that was previously impossible. I mean, from a purely technical point of view, bitcoin is just evidently a better version of gold than gold is. Gold's main value is that it is scarce. There isn't going to be a massive influx of more gold into the system. But even in that case, it's fairly easy to forge gold. And indeed, we don't know how much gold is out there on asteroids and other planets and so on. So it's not actually that scarce.
00:13:41.358 - 00:14:24.222, Speaker A: Whereas bitcoin exploits cryptography and mathematics to enforce that scarcity, making it, at least at a technical level, simply a better system. That's the basics of how you program humans. You find a way of getting between the human and the sub goal that gets them to where they want to go. Then you generate a mechanism which rewards them for doing a task that you want. This is extremely powerful, so powerful that it can overpower the moral frameworks that most people live by in ways that are dangerous and I guess fundamentally disconcerting. The first time you would see them. I would say, this is not theory.
00:14:24.222 - 00:15:08.458, Speaker A: Again, this is practice. So this is Maurice. Maurice was a governor in the 1920s, 1930s in Canada. Maurice was responsible for the children's homes at the time, as well as the psychiatric wards. Maurice noticed that the federal government would give him $2 a day for the care of a single child in these homes. But he also noticed that he got $7 a day for care of mental health patients in their appropriate places. Then he realized, well, okay, so I could just take these 20,000 children that are supposed to be in children's homes, and I could put them in mental hospitals, and I could get three and a half times the reward.
00:15:08.458 - 00:15:49.754, Speaker A: And he did this in practice. It was real. It caused 20,000 children to be misdiagnosed with mental health issues that they didn't have, who were then forced to take medication for those nonexisting conditions with all of the effects on their lives that you might imagine. This is pretty terrible. In fact, this is foundationally terrible. And this is a result of a mechanism designed that was not deliberately and carefully thought through, but in decentralized protocols, it's far, far worse. So at least the Canadian government could come along and they could say, okay, this mechanism had a bug, let's change it.
00:15:49.754 - 00:16:19.266, Speaker A: And then the world moves on. The damage is done. But you can at least change what happens in the future. With decentralized protocols, we enforce games that cannot be terminated or updated. That is, once the mechanism designer puts it out there into the network, there is no way that they can then go and change it. They have to get the ascent of all of the miners in the network or all the participants. And that's not a predetermined outcome like again in practice.
00:16:19.266 - 00:17:01.854, Speaker A: So in 2010, 2011, Sashi Nakamoto commits the 1 MB block limit to the Bitcoin Git repo. Doesn't really say much about it, just says enforce 1 MB block limit. Okay, fine. Wasn't a big deal back then when there were almost no transactions in the network. But then fast forward to 2017, when Bitcoin is arguably having its first shot at mass mainstream adoption and there are thousands of miners out there and they are highly economically incentivized by the network. Like, the mechanism design is really working. It's enforcing scarcity, and it's rewarding people for accepting transactions.
00:17:01.854 - 00:17:55.182, Speaker A: Looks great, but then what happens? Well, we start hitting this 1 MB limit, and that means that the users of the network have to start bidding for their places in blocks. So they're trying to bid higher than each other to make sure that their transactions are included in a block first or sooner or even at all. And in the peak of the 2017 2018 cycle, the transaction fee inside Bitcoin got to $30 per transaction. Now, if you're a miner of this network, this is actually great news. You've got twelve of these happening every second. So in the average block time, you're getting pretty significant amount of money relative to the block reward just from these transactions. And so you now have no incentive to change the protocol such that the number of transactions that can be included inside a block increases.
00:17:55.182 - 00:18:42.238, Speaker A: Because if people are paying you $30 per transaction now, and they're going to pay you, say, a cent, something like that, when you increase the block size, then you have to have 3000 times as many transactions in order to get the same reward as a minor. So you simply don't have an incentive to do so. And this one simple error in Bitcoin led to the fragmentation of the community and arguably a missed shot at mainstream adoption. But this is actually the nice side of it gets much worse. Okay, Bitcoin uses proof of work. That is, every time we have a block, we guess a random number. This random number is hashed with a challenge that's created around the block, and we see whether it is preceded.
00:18:42.238 - 00:19:19.182, Speaker A: The output of this is preceded by a certain number of zeros. So if it's below a certain number, this is how proof of work works. And this simple mechanism is very effective at ensuring that an amount of work goes into producing a computational output. It's extremely simple, it works very well, but of course, it burns enormous amounts of electricity, producing very little useful work. Just that we happen to know if you put this and this together, it produces a hash that has a certain number of zeros. It's kind of like a mathematical oddity and nothing more, really. There are many other systems that could have been used.
00:19:19.182 - 00:19:53.594, Speaker A: We could at least have put that computation to something valuable like, I don't know, folding proteins, right? Protein folding has the same structure of very hard to find the right way to fit the three dimensional shapes together. But once you do find a way to do it, then it's very fast to verify in the same way that if you take so it's hard to find these mathematical oddities, but it's very, very easy to verify them. So you just hash it together. It's a single hash. You compare the value. Yeah, just a few operations in X 86. So we didn't do this.
00:19:53.594 - 00:20:57.722, Speaker A: Instead we just burned electricity doing nothing. Again, massive, massive incentive design flaw. But I think that this could just be the beginning of how these mistakes go in the future if we're not careful. And that's why I put so much stress in this lecture. I think as an industry, it is our responsibility to make sure that we're doing this in an appropriate and a moral way. In AI safety, one of the key things that we look at is how do you make sure that you're going to be able to turn off a generally artificially intelligent machine if you make one, if it starts to do things that are against human safety and good? Well, the last thing you do is you put it quite literally, perhaps the last thing you do is you put it inside a decentralized network where humans are selfishly incentivized to keep it running, to keep it powered on. If we do this with an artificially intelligent entity, essentially, that we don't know how to control and that isn't working in our interests, the effects of that could be absolutely enormous.
00:20:57.722 - 00:21:37.926, Speaker A: So I would just argue that we should think very carefully before we turn these machines on, and we should make sure that our mechanisms are elegant and morally appropriate. And in fact, there is already a paper out there that studies the bitcoin blockchain and comes up with some reasonably good arguments that people have already experimented with putting AI inside the bitcoin blockchain. But I'll leave a reference to that at the end. Okay, so that's how you do it. That's why you should be careful why you do it or how you do it. And this is what it looks like when you actually go through the process. So when you're designing an economic game, you go through three stages.
00:21:37.926 - 00:22:45.586, Speaker A: You need to choose a goal, you need to choose a reward mechanism, how you're going to make sure that the players in the game have some kind of output that pushes them towards one of their sub goals or goals in their life that they're attempting to achieve. Then you need to create a function that apportions that reward to people in a way that will keep them satisfied while also achieving the hopefully pro social goal that you've set for the network. So let's look at bitcoin. The goal of bitcoin's mechanism is to maximize the network security and avoid double spends. One interesting thing about cryptocurrency history is that cryptocurrencies have been around since the early 1990s. They all had this basic structure of some kind of centralized database and then keys that were held on the person's computer or in whatever device that they were using. And you would essentially sign a transaction, send it to the database, which would update the ownership records of who had how many tokens of which kind, and that would be it.
00:22:45.586 - 00:23:50.520, Speaker A: But the problem here, of course, is that this centralized party, the database could be messed with and no one would really have a record of it. So some of the early advancements were like, okay, well, what if we use hashes to create work chains that showed that actually this couldn't have been altered, or at least couldn't have been altered without the record also being altered. So that's kind of fine, but of course it's not a fundamental answer to the question. And so then along came Satoshi Nakamoto with the idea of a blockchain in 2009 that says, okay, fine. What if we replicate that database across all the machines in the network, and then we create a mechanism design. So, an incentive, a game, really, where one of the helpful byproducts is that they're incentivized to accept transactions and to follow a version of truth, follow a version of history in the network where there aren't two transactions that take the same coins and spend them twice. That's a fundamental idea.
00:23:50.520 - 00:24:46.210, Speaker A: Okay, so the second thing, tokens are then distributed relatively to the security contribution of each miner inside the network. This is a pretty simple way of pushing those miners to contribute as much security as they can for the tokens. And if we think back to that example I gave with this generalizable mechanism of mining and how you can use it in centralized startups to just push down the price of a service essentially towards its base level, this is exactly what's happening here. So we're saying, I'm going to give you 12.5 bitcoins and you just give me as much work as you can to satisfy that 12.5 bitcoins, and then the price of the bitcoin determines how much work is going to go into satisfying that choose a reward function to match it. Proof of work, block acceptance and fork avoidance and recovery.
00:24:46.210 - 00:26:06.340, Speaker A: So this idea that we're putting extra security, we're producing blocks which have transactions in them and then we're also critically incentivized to take the most worked on chain. Otherwise there's essentially this incentive just to ignore everyone else's blocks and only mine your own. And then, of course, everyone in the network is running their own blockchain and of course that doesn't hold any value. So it's very important also that the incentives push people to accept each other's blocks. Okay, now let's think about Arweave, which is, I would say, sort of later generation in the same kind of field of decentralized networks and mechanism design. So our goal, the thing that we want to get out of this, a pro social byproduct, is to secure data forever. The idea here is to build the new library of Alexandria, where everything from documents, PDFs, web pages, applications, really, anything, can be stored and perpetuated for future generations to come, so that we don't forget what has happened in the past and we can replicate ideas and essentially memes in the non cat gift sense, but also those as well into the future.
00:26:06.340 - 00:26:55.134, Speaker A: So the helpful byproduct we're attempting to achieve is the permanent storage of data. What's the reward mechanism going to be? Users contribute funds to an endowment when they add data, and then miners are rewarded from the endowment over time. Seems pretty simple. So of course, if you want to store data forever, you have to have some economically sustainable mechanism of making sure that the data is, or rather the reward is available indefinitely. And so for this we do something that's actually quite simple, but it sounds a little strange to begin with. So when you put data into the Rweave network, you pay for 200 years worth of storage of that data up front. This, you would think, is expensive, but storage is so cheap that actually this is like half a cent per megabyte.
00:26:55.134 - 00:27:28.262, Speaker A: So if you're thinking about web pages, PDFs applications, this kind of thing, it's extremely affordable. Then over time, that 200 years worth of storage. As the cost of storage declines, you gain essentially kind of interest on that principal in the form of storage purchasing power. So over the last 50 years, the cost of storage has declined at a rate of around 30.5% every year on average. The Rweave network assumes that the cost of storage will decline at some rate above 0.5% on average.
00:27:28.262 - 00:28:12.214, Speaker A: And if it does, at the end of each given year, you end up with more storage purchasing power at the end than you did at the beginning. And consequently, you get this sort of compounding effect where the available reward for storing a piece of data actually increases over time relative to its burden to you, rather than decreases. So it's essentially like an endowment for university scholarships, something of that. Ilk okay, fine. So we've got our mechanisms here and now we've got to work out how are we going to adjudicate how that reward is distributed. So this is just another piece of mechanism design proof of access. So a normal blockchain works by including the hash of the previous block in the production of the next block.
00:28:12.214 - 00:29:01.350, Speaker A: And it goes on over and over again. And when there's a fork, you get two blocks that have the same hash of the previous block and they essentially yeah, they they fight on the network for the one that can accumulate the most work. And then because of these fork avoidance mechanisms as described earlier, they all sort of well, they conjoin on the same block and they move forward from there. So it has this fork avoidance mechanism too. So with Arweave, what we did is we took that same fundamental structure of a blockchain and we modified it. So instead of just including the hash of the last block in the production of the next block, you also include a random proof of access to a previous piece of data in the network in the production of that next block. So you can't take part in the production of new blocks unless you can prove that you have access to old blocks and we can stochastically.
00:29:01.350 - 00:29:56.986, Speaker A: So statistically check the data in the network at random. And as long as people can't predict which parts of the network are going to be essentially recalled for any given block, there's no better way to play this game. The dominant strategy in this game is to replicate as much of that data as you can. So this mechanism lays the groundwork for a network that provides the possibility of business models that you just couldn't pursue previously. There's simple stuff like let's make sure if we make a contract together, that we can store an immutable copy of that contract embedded in a blockchain. So it has this kind of timestamping that's extremely effective and reliable, as well as the permanent ability to recall that contract. So we can tell it's essentially the shared record of the truth between us.
00:29:56.986 - 00:30:46.860, Speaker A: But you can also use it for academic publishing, right? So when you want to contribute to science, what you're trying to do is just push a piece of information to as many people as possible. Well, just like the Internet connects people over large distances, the Rweave connects people over long distances of time. And essentially by conjoining these things together, you can get a larger spread of your academic article than you could have otherwise. But you can also use it for journalism, right? When you want to publish a piece of information, you want to get wide circulation and you want people to know that it was you that published it. And so essentially in this way, Arweave is acting like a ledger of every piece of information that was ever asserted by someone over time. And these are just the simple use cases that you can use with Arweave. It goes much deeper than this.
00:30:46.860 - 00:31:10.820, Speaker A: On top of the Arweave network, you can store basically any piece of data. And that. Means that you can also store applications. These are essentially web apps that are accessible in a browser. So you go to a gateway stroke, a transaction ID, and it'll render for you that web page. And that web page could be an application. It could be just a normal piece of information, a wiki page, really, anything.
00:31:10.820 - 00:32:02.660, Speaker A: And the applications that you store in the system have a set of extremely interesting and different properties than applications that you find on the centralized web. So if you're using a perma web app, it cannot change. The developer can send a new version to the network, which can use all of the same data if they like, or data even from other applications, but they can't take back your access to the first application. And this means that you essentially preserve what we call consumer integrity. That is, if you find a perm web app that you like today, you can make sure, or you can be sure, that that application in exactly the same state is going to be available at any point in the future. Just to make this kind of clear why this is valuable, let's think about Gmail. So we all made our Gmail accounts, say, a decade ago, right? We all signed up.
00:32:02.660 - 00:32:34.282, Speaker A: We pressed through the screen that said, make sure you read all these terms and services as fast as possible. No one cared. Then suddenly we had this identity, which was associated with an account that was held by Google. I had no idea ten years ago what Google was going to do with my identity or with the service they offered me, what they were going to do with my data, how they were going to use it for advertising, and indeed, the service that I would receive. And then you're stuck. You're locked in. Now we can't really move away from Google for Gmail.
00:32:34.282 - 00:33:12.426, Speaker A: Well, there's an email system on the Rweave called Weavemail. Weavemail is available as a protocol and as an application. So there's a general specification for if you would like to send a weavemail message. It must conform to these properties, but then it's available in any Weavemail client. There's also an application. So you can be sure when you go to this transaction ID, that you're going to get that same interface back every day in the future, simply forever, way past the end of your death. And a consequence of this is that you can be absolutely sure that if it's not now mining your data, if it's not now showing you adverts, it just won't do so in the future.
00:33:12.426 - 00:33:47.778, Speaker A: This also changes the incentives for the developer. Now, when they want to issue you an update, they have to give you an update that is actually of a higher quality than the previous version. This, we think, is extremely powerful. It doesn't stop there. Let's think about online social media networks. So social media networks generally go through this pattern of at the beginning everyone loves them because they have a small community that is aligned around the same kind of ideals. But then over time the community gets larger and larger and splits into different factions that have different ideals.
00:33:47.778 - 00:34:24.094, Speaker A: And then you have this question of what content should be allowed on the network or not. And it becomes the job of the developer to adjudicate this and this. As a developer this is just the worst thing in the world you don't want anything to do with. This is a purely social problem to which there is no good answer. If you censor too much the free speech, people are going to hate you and if you don't censor enough, everyone else is going to hate you. This is a no win situation. On the Rweave with Permaweb Apps we take an approach which says, okay, so the applications in the network are truly permanent and ownerless once you launch them.
00:34:24.094 - 00:35:06.538, Speaker A: So once they're sent to the network, anyone can access that transaction ID and the owner doesn't have any further rights than anyone else in the network to adjudicate how that application works. So let's think about decent a forums, for example. It's a forum network built on top of the Arweave where the developer has launched it. They paid less than a cent and users pay a tiny fraction of a cent when they want to post a piece of information to it. And now it's simply ownerless. It's run by code. So in the same way that in Ethereum code is law for smart contracts, in Arweave web applications, their code is law for adjudication of content moderation.
00:35:06.538 - 00:36:01.390, Speaker A: And that means that if you start a community there you can be confident with how that community is going to be moderated in the future fundamentally changes the game. These things together, we think, enable an ecosystem of open source web applications. So one of the questions we were thinking about when we were getting started building the Permal Web is why is it that in the desktop space and in the server space in different ways? But it's true open source applications have taken hop. So applications that are built by people that don't necessarily have a clear business objective for doing so have been produced and are used by very large numbers of people. In fact, open source software fundamentally runs the web today with Apache and so on, and Linux of course. Why didn't that happen on the web? And we think the answer to that is pretty simple. It's because the web application incentive model is broken.
00:36:01.390 - 00:36:30.940, Speaker A: So let's think it through. Like you build a really fun little side project on a weekend. You launch it, you put it on A-7-A month AWS server, everything's great. You put it on hack and use whoa, suddenly you have tens of thousands of people using it. Now your $7 a month server is not enough. Okay? So you're starting to spend $80 $200. You're suddenly realizing that your usage costs are scaling with the number of users, yet the users want something that is free.
00:36:30.940 - 00:37:10.840, Speaker A: And this gives you one of two difficult options. You either have to take VC funding very early on, or you have to monetize very early on. So VC funding is fine, it's certainly one way of doing it. But this pushes towards an exceptionally high growth model, which for something that is just a weekend project, might not actually be what you're going for. And if you monetize early, you know that this is going to kill growth, and particularly with applications that require network effects to start going. So perhaps social applications, this might remove the possibility of your application being adopted in practice at all. Perm web apps have a fundamentally different model.
00:37:10.840 - 00:37:40.302, Speaker A: You pay one cent per megabyte, less than a cent per megabyte when you upload the application in the first place. And after that you are done with it. That's over. That's your contribution done. And then users, when they use these applications, they can essentially pay tiny, tiny fractions of a cent in order to store data in the network as a result of an interaction with the app. And as such, they're essentially paying their own way. And the costs are not accruing with you yet.
00:37:40.302 - 00:38:18.060, Speaker A: The cost is so low that the user doesn't even realize it's happening really. They just think they're logging in with a wallet of some kind and then they have a very small amount of money topped up on it. And once in every two or three years for something like Twitter, then their two dollar top up runs out. It's extremely simple, changes the incentives entirely, and it works exceptionally well. And we think that it enables you to build an open source web ecosystem today. In fact, we don't think we have already seen it in practice. There are already 200 applications built on top of the Rweave that are going down exactly this route with growing communities around them.
00:38:18.060 - 00:39:24.686, Speaker A: So the broad idea with what we're going for with Arweave is a global immutable record of knowledge and applications that are applications and history that are cryptographically verifiable and unchangeable over time. Okay, thank you all for listening. If you'd like to get more into the economics of mechanism design from a sort of different standpoint, with large amounts of mathematics focus, then I would thoroughly recommend Tim Ruffgarden's lecture series, Algorithmic Game Theory. If you want to come work for Arweave, these are fundamentally the required reading, required listening actually, in this case in order to work with us. And I would say they are the most accessible, economics focused introduction to mechanism design out there. You could also look at Trent from Ocean protocols towards a practice of token engineering. So what I've outlined for you here, I hope, is how mechanism design works, what you can do with it in practice, what the pitfalls are, and then trent's piece takes you through.
00:39:24.686 - 00:39:43.462, Speaker A: Okay, so if you were to actually think about this from, like a tool chain, what are the applications you should be using to try and experiment with this? And so then I would thoroughly recommend this blog post by Trent. And then of course, there's this artificial intelligence on a blockchain paper that I mentioned earlier. Okay, thank you very much. Awesome.
00:39:43.516 - 00:40:19.860, Speaker B: Thank you, Sam. That was great. I don't know if I can't see you guys right now, but I'm sure people are cheering in the slack. So we've got a bunch of questions from the audience and I'm going to sort of moderate them, so you guys feel free to keep them coming in the slack. But first one is Paul Cogwill. Cogill, sorry. And his question is, with the advent of AI and modern computing, don't some of the arguments against central planning based on computational throughput go away?
00:40:21.990 - 00:41:09.346, Speaker A: Yeah, I mean, that's very interesting. I think there's definitely an argument to be made that essentially what we're doing with modern AI, and perhaps if we get there, artificial general intelligence is we are centralizing the crowd. Right. So if we're trying to make one of these mechanisms that rewards people for using their brains to essentially optimize some problem yeah, if we can spin up computers that are capable of doing this for us, then definitely it's just another way of addressing the same thing. Right. How computationally efficient those algorithms are right now and will be for the next, say, 50 years is a real question. Like for AI startups, it seems to be.
00:41:09.346 - 00:41:26.440, Speaker A: And I think there was a great a 16 z piece on this recently that AI startups are spending inordinate amounts of money on computation, so it doesn't necessarily have the same scaling mechanics. There's definitely an interesting argument to be made that kind of the wisdom of the crowds could actually just become centralized in computers again.
00:41:26.890 - 00:41:52.270, Speaker B: Cool. Okay, so next one is from James, and his question is people sometimes talk about useful proof of work, but if the work were useful or valuable in some new way, you can imagine people solely paying people to complete this work or doing the work for their own sake, such as GPU rendering or ML model training. Wouldn't this disrupt bitcoin's mechanism? Doesn't the work need to be useless?
00:41:54.450 - 00:42:45.090, Speaker A: Partially? Well, there's one way of thinking about it that's like that, but another is that as long as access to basically solutions to those problems already so, like a rainbow table, essentially as long as that access is equal, then no, it still works. The competition mechanism is still functional, but of course you need that access to the rainbow table to be uniform between people, otherwise you get disuniform rewards. Although you could argue then that there's another way of looking at this that says, well, in that way there's ununiform access to electricity at certain prices inside the bitcoin network as it is now. So I think the problem is essentially just another analogy for that. Interesting question though.
00:42:45.240 - 00:43:08.440, Speaker B: All right, next one is from Paulina and her question is in the context of Coronavirus, how would you build an incentive mechanism for people to stay home instead of travel around? Especially that one, incentives are most often non monetary and two, there's no single party that would be interested to provide those incentives to you.
00:43:09.630 - 00:44:12.186, Speaker A: Yeah, that's a very interesting question. I mean a basic way is you work out some kind of task where the human has to be in their home and then you work out well yeah, I can't work out what the concrete example of this is but I can take you through the process of doing it abstractly. Right? You work out some kind of task where the human has to be in the home. You work out some way of verifying that that task has actually happened and then you put some reward mechanism so maybe like a bunch of dye that you release to people for submitting proofs that they are in their house or something like this to the Ethereum Network. Yeah, interesting question, I think there's another part there and I actually wanted to edit my slide deck today to add this but I didn't about the mechanism design of panic buying, this is fascinating. So mechanism designs are not actually always just designed. Mechanisms can be emergent and this is one of those which is essentially that if you're going to panic buy then I should also panic buy.
00:44:12.186 - 00:45:09.870, Speaker A: In fact I should front run your panic buying. I should make sure that I'm buying before you are and if you think about this in practice this is recursive all the way back. So there are extremely dangerous mechanisms at play in Pandemics. Same with this question of masks and this is particularly interesting to us at Arweave because we're kind of fascinated by information availability over time. So there is evidence to say that at least a medical mask is better than zero, right? You are better off wearing one but in society we are all much much better off if our medical professionals are wearing masks. So now there's this strange information game at play where some people in the media like to tell us that, no, there is no real point wearing a mask, which is kind of true, but not actually completely true. But it is in the best interest of everybody if we believe that to be the case, regardless of whether it's true or not.
00:45:09.870 - 00:45:18.274, Speaker A: So yeah, there's a lot of interesting mechanism design that goes on in pandemics or at least mechanisms not so much design, right?
00:45:18.472 - 00:45:37.046, Speaker B: Okay, great. Next question from James how do we do better than terms of service when most people cannot or do not want to read through the code of the applications they're using? Immutable is good but what guarantees how an app is going to behave so.
00:45:37.068 - 00:46:25.414, Speaker A: That'S a really interesting question. I think that you can gain reputations around pieces of code that are held at certain transaction IDs is essentially how it goes. So you're right, nobody or very few people are going to go and read the weavemail source code, but they could and a few people will. And they'll say this transaction ID has these properties and then others will read about this and there's a kind of, I guess, proof of authority mechanism in place where if I see enough code reviewers that have reviewed this one specific transaction ID that is immutable and permanently available yeah. Then I guess I can trust that by proxy. That, I think, is the way that we do this. It's fundamentally different, though, from the terms of service approach where almost nobody is reading them and they're changing all of the time as well.
00:46:25.414 - 00:46:28.200, Speaker A: So that, I think, is where the core differentiator comes.
00:46:28.670 - 00:46:51.290, Speaker B: Right. Okay. Another one from Paul. What are the best practices for determining the potential pathologies of a given mechanism ahead of time? For example, using a tool like Gauntlet or deploy early and iterate based on how it ends up being used. How can you take into account behavioral economics in addition to just game theory?
00:46:51.450 - 00:47:11.990, Speaker A: Yeah, this is interesting. People are starting to build toolkits now that are trying to work this out. Like CAD. CAD is an example of this, which is pretty good. And Trent Mcgonahue goes into much more detail about this in the blog post that I pointed to. So that's something. But I would say there's a lot of work that needs to be done in this area.
00:47:11.990 - 00:47:57.794, Speaker A: Like, if we're being sensible about it, we need to get our AI to try and essentially work out the dominant strategies given a mechanism. And if that AI is smart enough, then that could be really valuable to us. But what I've seen at the moment, the limit here is like, we'll just try the bitcoin mining dominant strategy, or we'll try the ethereum mining dominant strategy inside whatever game we're presented with, which is extremely dangerous because just like we saw with the example of Maurice right. The Canadian government didn't realize that they were building a game that was fundamentally different to ones that they'd used before. Right. So they'd had this we will give people X for doing for looking after a person for some time. Yeah, this had been in place for a very long time.
00:47:57.794 - 00:48:28.094, Speaker A: It was when they added another one that actually the perverse incentive arose by the presence of those two games in the same space. And if they would have used one of these systems that said, well, just apply the dominant strategy from some other known game inside this new game, they would never have picked that up. So, unfortunately, the answer is the abstractions are very messy for this and we don't have good tooling for working out how to do this in practice. But hopefully it'll get better, and at least people are working on it now.
00:48:28.212 - 00:48:49.766, Speaker B: Next one is from Nori, and the question is for Arweave. How come you don't have a delete function? Seems like you could do something where the owner could choose to delete something, and perhaps the owner could be refunded half their endowment. This wouldn't take away anything from the uncensoral nature of the network since only the owner could choose to delete it.
00:48:49.868 - 00:49:17.360, Speaker A: No, it definitely would. I mean, then you get a $5 wrench, right, and you force me to delete it, or you find my computer and you delete it for me. No, it fundamentally changes the mechanism. In practice, we could go down. There's a very interesting rabbit hole. There also computational issues that arise from holding that kind of state. But in general, I would just say, yeah, $5 wrench is the problem there.
00:49:17.970 - 00:49:20.446, Speaker B: Can you unpack the $5 rent problem?
00:49:20.548 - 00:49:37.320, Speaker A: Sorry. Of course. Right. I think this came from an Xkcd comic, and basically it goes something along the lines of some person is boasting about how strong their encryption is, and then some other person comes along with a $5 wrench and threatens to hit them with it, and now suddenly your amazing encryption is zero.
00:49:38.970 - 00:49:56.540, Speaker B: Got it. I was hearing $5 rent. I didn't hear wrench, but that's even more. Okay, good. All right, next one from Abhishek. What is the economic role of the game designer in creating and sustaining a game?
00:49:59.550 - 00:50:50.074, Speaker A: That's an interesting question. It's almost like asking the question, what is the mechanism for the mechanism designers? I guess. And normally the mechanism designers design some special place into the mechanism themselves where they gain some kind of reward. Then it's up to the participants to decide whether the mechanism that they've designed for themselves or the component of the mechanism that they've designed for themselves is fair. And of course, at the moment, we see this constant battle in the crypto space with founding teams that are all like, oh, yeah, no, we should bake ourselves into the protocol as receiving a reward for maintaining a version. Of a client for the network, which I personally think is fundamentally a terrible idea because the reason protocols are cool is because they have decentralized clients. Right.
00:50:50.074 - 00:51:04.370, Speaker A: The single application is not the protocol. They're very different things. And you kill that completely if you just give one group all of the reward for doing that, and we see it playing out all over the place, that this is just a very bad route to go down can tear communities apart.
00:51:06.070 - 00:51:17.220, Speaker B: Okay, so next one from Sarah. What is the difference between designing reward mechanism versus the reward function? They seem very similar.
00:51:17.670 - 00:51:31.100, Speaker A: Yeah, they are conceptually related. One is like, what am I going to give you? And the other is, how am I going to give it to you? How am I going to adjudicate which bit of the thing are you going to get, but often they come pretty sandwiched together. That's true.
00:51:33.070 - 00:51:45.310, Speaker B: All right, I think this is going to be the last one. And it's from the Cyber Code. Twins. I do wonder, how is the GDPR friendly, given the own your own data movement? Who owns the data if it's immutable on the chain?
00:51:46.850 - 00:52:23.450, Speaker A: That's a fascinating question to which I am not actually the best person to speak to. I mean, it's the same question as, like, okay, so I put a tweet out onto Twitter, and then lots and lots of bots have accessed that tweet. Do you really own it? Do you own all of the copies of that tweet? It's not clear, but in the case of Arweave, GDPR is actually very simple, so you would be surprised. But it's actually better than the centralized web. That's because you can just tell me, okay, everyone, here's a transaction ID. I would like you to delete it. I am this person.
00:52:23.450 - 00:52:48.802, Speaker A: I own that transaction. And here's why I would like you to delete it. Then it's up to the miners to decide whether they do so or not. But of course, if those miners are in a GDPR compliant country, they will delete it. So one of the things about the Rweave network is that it permanently embeds. An incentive to recall a piece of data does not enforce any individual person to store that piece of data. So then it's just up to what each participant in the network deems is a reasonable way to act.
00:52:48.802 - 00:53:19.206, Speaker A: And it's the same way as if all of those miners are tiny instances of AWS, like, they are all data hosts. And as a consequence, they are essentially, well, just as responsible as AWS or Google should be. So it's up to them to make the mechanisms, but we give them the underlying tools that they need to communicate that people want things deleted. They want their access rights changed. Yeah. So that they can deal with this. And the same for illicit content on the network.
00:53:19.206 - 00:53:41.710, Speaker A: So that's what I would say to that one, I guess. Oh, and the final thing is, yeah, we don't think that every single piece of information in the world should be public and permanent. It's very clear that they shouldn't. But we would say that the information that should be permanently stored is very poorly served by the available data storage mechanisms outside of Arweave. And that's where we fit in, essentially.
00:53:42.450 - 00:53:45.010, Speaker B: Great. Okay. Thank you so much, Sam.
00:53:45.130 - 00:53:45.460, Speaker A: Of course.
