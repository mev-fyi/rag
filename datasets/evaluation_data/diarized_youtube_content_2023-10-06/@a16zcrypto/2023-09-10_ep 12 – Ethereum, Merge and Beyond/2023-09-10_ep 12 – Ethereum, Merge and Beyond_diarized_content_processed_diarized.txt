00:00:00.330 - 00:00:00.880, Speaker A: You.
00:00:04.450 - 00:00:52.378, Speaker B: Welcome to Web Three with A Six and Z, a show about building the next generation of the Internet. From the team at A Six and Z crypto that includes me, your host, Sonal Choxi. This show is for anyone seeking to understand and go deeper on all things crypto and Web Three. In last week's episode, we did an overview of proof of stake blockchains. So in this week's episode, we do a deep dive on all things Ethereum, which this week makes the big move to proof of stake in the merge. But our conversation, while it certainly will go into the merge and share lots of in depth and behind the scenes details with one of the core developers and the bottom line on what changes, what doesn't, also goes well beyond the merge into a high level overview of what comes next, what's top of mind and more. As a reminder, none of the following is investment, business, legal or tax advice.
00:00:52.378 - 00:01:57.794, Speaker B: Please see asics.com disclosures for more important information, including a link to a list of our investments. But now let me introduce our special guest in this episode is Tim Baco, who runs the core devs calls and protocol support for Ethereum Foundation, and before that was a Senior Product Manager at Consensus. Joining me to interview him, we also have Asics and Z Crypto head of research Tim Roughgarden, who, among other things, before joining here, led the economic analysis of EIP 1559 on proposed changes to Ethereum's transaction fee mechanism for the Ethereum Foundation. And we also have Ali Yaya, general partner at Asics and Z Crypto, who leads infrastructure as well as many other investments. And before joining Asics and Z was also a software engineer researcher as well as core developer in Google's open source machine learning library, TensorFlow. In the long and wide ranging conversation that follows, we take turns interviewing Tim, going from talking about how we got here today and what went into the merge in the first 3rd tech trends such as roll ups, data availability, EVMs and more, as well as hot topics including proposer builder separation and others.
00:01:57.794 - 00:02:25.930, Speaker B: Then go deep into the coevolution of the protocol and the community, talk lots of methods and process behind the outcomes, including sharing views on token governance, shadow forks and so on, as well as the nature of distributed collaboration, especially between R D and of how innovation happens in a decentralized way. But first we begin with a quick snapshot on Ethereum today. The first voice you'll hear is Tim B's, followed by Tim R's.
00:02:30.190 - 00:02:34.010, Speaker C: If you zoom out a little bit. What we're trying to build with Ethereum.
00:02:34.090 - 00:02:37.022, Speaker A: Is really a blockchain that's like as.
00:02:37.156 - 00:02:42.574, Speaker C: Decentralized and censorship resistant as possible, but at the same time to do that.
00:02:42.612 - 00:02:45.218, Speaker A: In a way that can accommodate a.
00:02:45.224 - 00:02:53.006, Speaker C: Large number of users and a wide range of use cases. And this is probably like the two main differences with say something like Bitcoin.
00:02:53.118 - 00:02:56.614, Speaker A: Which also is quite aligned from a.
00:02:56.652 - 00:03:01.826, Speaker C: Values perspective with regards to how they build the software is Ethereum is willing.
00:03:01.858 - 00:03:04.726, Speaker A: To allow more expressibility in.
00:03:04.748 - 00:03:09.174, Speaker C: Terms of what's being built through the EVM, obviously, and also has this roadmap.
00:03:09.222 - 00:03:15.446, Speaker A: Where we would like to scale the chain beyond levels where every single node.
00:03:15.478 - 00:03:38.754, Speaker C: On the network verifies every single bit of data but still maintain very high security properties around that and relatively low hardware and bandwidth requirements to run a node on the network. So that's kind of like the very high level view. And then the big thing we've been working on as part of that recently is transitioning from proof of work to proof of stake, what's known as the merge. So this idea with the merge is.
00:03:38.792 - 00:03:44.626, Speaker A: That Ethereum currently has a proof of stake chain that's live that's testing the.
00:03:44.648 - 00:04:22.926, Speaker C: Soundness of this design in production and all of the applications are running on another chain that's under proof of Work. And the reason for this is that we wanted to launch the proof of stake chain in an isolated environment so that if it had any issues it wouldn't affect applications and people's funds on the main network. But now that we've seen it run for quite some time we're confident in migrating towards that as the way to secure the network. And so we basically go from using proof of work as a consensus mechanism to Ethereum to using proof of stake. And the neat kind of software trick that allows us to do that is the software that runs Ethereum proof of.
00:04:22.948 - 00:04:25.774, Speaker A: Work is actually a bit agnostic to.
00:04:25.812 - 00:04:28.114, Speaker C: What the consensus engine is.
00:04:28.232 - 00:04:34.546, Speaker A: So it runs proof of work on the Ethereum main net. But if you have, say, Ethereum testnets or even private networks when we talk.
00:04:34.568 - 00:04:41.846, Speaker C: About like private blockchains these don't run proof of work, they run another algorithm. So the idea with the design of the merge was, well, what if at.
00:04:41.868 - 00:04:44.354, Speaker A: Some point the Ethereum main net stops.
00:04:44.402 - 00:04:45.698, Speaker C: Listening to proof of Work and moves.
00:04:45.714 - 00:04:46.530, Speaker A: To proof of stake?
00:04:46.610 - 00:04:48.006, Speaker C: And that's at a high level what.
00:04:48.028 - 00:04:49.398, Speaker A: The transition is about.
00:04:49.564 - 00:05:12.234, Speaker D: So the beacon chain famously uses proof of stake for civil resistance unlike Proof of Work. And one thing I think that's interesting about the Ethereum vision is everybody loves to talk about the environmental aspects of proof of work and how those are to a large extent mitigated moving to proof of stake. But I think what's interesting about Ethereum is the idea that there may be additional really important benefits of switching to proof of stake.
00:05:12.362 - 00:05:16.798, Speaker A: Yeah, that's a good way to put it. And maybe to converse would be I.
00:05:16.804 - 00:05:21.742, Speaker C: Don'T think it would be sound for Ethereum to move to proof of stake if the only benefits were environmental.
00:05:21.806 - 00:05:22.034, Speaker A: Right.
00:05:22.072 - 00:05:23.634, Speaker C: It's like that's obviously a huge part.
00:05:23.672 - 00:05:25.218, Speaker A: Of the mix but we want the.
00:05:25.224 - 00:05:41.058, Speaker C: Network to be secure and ideally more secure. And the first thing that proof of stake gives us that we don't have in Proof of Work is we can identify in protocol specific validators. And these validators, as the name kind of mentions they've put up a stake, so they've put up capital in the.
00:05:41.084 - 00:05:43.114, Speaker A: System and that allows you to fine.
00:05:43.152 - 00:05:54.714, Speaker C: Tune rewards and penalties at a much more granular level than you can under Proof of Work. Because in Proof of Work, basically you pay people to do the right thing and you hope that the opportunity cost.
00:05:54.832 - 00:05:56.078, Speaker A: That they face if they do the.
00:05:56.084 - 00:06:00.526, Speaker C: Wrong thing is so big that they kind of converge on doing the right thing over and over.
00:06:00.628 - 00:06:02.574, Speaker A: But there's no way to kind of.
00:06:02.612 - 00:06:22.370, Speaker C: Penalize people who don't follow the protocol rules, especially in a granular way. So in Proof of Work you have some quite extreme options like changing the proof of work algorithm to something else, which was make all of the mining hardware not work in a specific setting. You can have some tweaks like you could nudge the algorithm towards certain types of hardware and whatnot.
00:06:22.450 - 00:06:24.098, Speaker A: But the challenge with those is it's.
00:06:24.114 - 00:06:32.986, Speaker C: A very broad way to discriminate. Like you can have honest miners using the software that gets discriminated against and vice versa. So the first thing we get in.
00:06:33.008 - 00:06:34.234, Speaker A: Proof of Stake is this idea that.
00:06:34.272 - 00:06:43.966, Speaker C: We can identify specific validators, we can reward them if they follow the protocol rules and we can penalize them individually if they do not. That's a massive improvement just because it.
00:06:43.988 - 00:06:46.526, Speaker A: Allows us to really pinpoint where we.
00:06:46.548 - 00:06:48.234, Speaker C: Want to apply rewards and penalties.
00:06:48.362 - 00:06:51.246, Speaker A: And the other thing is, ethereum is.
00:06:51.268 - 00:07:14.902, Speaker C: Designed to be quite resistant to imperfect conditions. Like we don't need 100% of validators to be online 100% of the time to produce blocks, but we do need most of them to be online most of the time. So what we can do is we can scale these penalties that you get for say, being offline or doing something malicious in the protocol relative to how many other people are doing the same thing as you.
00:07:15.036 - 00:07:16.882, Speaker A: And this has two neat properties.
00:07:16.946 - 00:07:22.634, Speaker C: One is that if you're an individual validator just like a hobbyist at home and say your internet goes down and.
00:07:22.672 - 00:07:24.698, Speaker A: It'S quite decorated from the rest of.
00:07:24.704 - 00:07:57.254, Speaker C: The network, you'll get a small penalty because you're offline. But it won't be scaled if nobody else is offline because the network can kind of chug along without you. But on the flip side, imagine you're an attacker and you control like a third of the stake and trying to stop the network from reaching finalization. The penalty that you incur while this is happening grows exponentially. So you're penalized as this large actor affecting the protocol much more harshly. So this is another neat thing of proof of stake is not only can we specifically pinpoint, validators and apply penalties and rewards more granularly, but we can.
00:07:57.372 - 00:08:03.062, Speaker A: Specify the level of uptime in a way that you expect and be very.
00:08:03.116 - 00:08:16.566, Speaker C: Harsh if this gets into really bad circumstances and be very lenient if it doesn't as a way to incentivize people who have a regular internet connection and not data center access to be validators on the network.
00:08:16.678 - 00:08:27.818, Speaker D: That makes a lot of sense that you can do very surgically targeted penalties and rewards because in some sense you know who the validators are in the sense that they've registered on a smart contract that's stored on chain.
00:08:27.914 - 00:08:28.222, Speaker A: Right?
00:08:28.276 - 00:08:42.686, Speaker C: You don't know who they are but you know which pile of capital, which fake has committed the offense. So one person could have like two validators and one of them goes offline. You can penalize just their validator that that's offline. So yeah, we can identify every unit.
00:08:42.718 - 00:08:45.102, Speaker A: Of capital and treat it independently.
00:08:45.246 - 00:08:57.778, Speaker D: I mean, should I think of this being at all a concession to how permissionless Ethereum is and it's just that it's worth it in exchange to get the sort of stronger security or would you actually assert that there's no change in how permissionless it is as a blockchain?
00:08:57.874 - 00:09:02.006, Speaker A: I don't think there is. So there's many different concerns.
00:09:02.118 - 00:09:18.142, Speaker C: Being a consensus participant. I don't think for Ethereum they change from proof of work to proof of stakes. You could argue that they get better. But I'll take the strong proof of work view here. First is how hard is it to actually become part of the validator set?
00:09:18.196 - 00:09:23.754, Speaker A: Can anybody join so on Ethereum, anyone can join the proof of stake validator sets?
00:09:23.802 - 00:09:28.226, Speaker C: The amount required right now is 32 Ether and the reason for this amount.
00:09:28.328 - 00:09:30.466, Speaker A: Is there's a trade off between how.
00:09:30.488 - 00:09:52.698, Speaker C: Much stake you require and the bandwidth requirements. Because if you have your entire stake divided in 32 Ether chunks and say you went from 32 to 16 then you have twice as many messages to process on the network as kind of more effective validators and that requires higher bandwidth connections. So there's this trade off where you can lower the dollar cost but then you raise the infrastructure cost of people.
00:09:52.784 - 00:09:55.786, Speaker A: And so we sell it on 32 e. But anyone who has that can.
00:09:55.808 - 00:10:12.926, Speaker C: Participate in the protocol and obviously the price fluctuates but that gives you basically the rights to be like a first class block producer. People sometimes will compare this to proof of work saying well, you can buy a GPU for like $5,000 or whatever the prices might have fallen since then and kind of join proof of work that way.
00:10:13.028 - 00:10:14.638, Speaker A: But what you're doing when you have.
00:10:14.644 - 00:10:23.790, Speaker C: A single GPU you're usually joining like a mining pool, right? You're not the actual entity producing the block. You're averaging out your hash rate with all the other participants in that pool.
00:10:23.870 - 00:10:25.166, Speaker A: And get a share of the rewards.
00:10:25.278 - 00:10:29.990, Speaker C: You could choose to mine on your own. But the ODS that you would ever find a block are incredibly small.
00:10:30.060 - 00:10:31.366, Speaker A: So I think proof of stake gives.
00:10:31.388 - 00:10:45.766, Speaker C: Us a fairly low barrier to be a first class validator. There's also many options for people who don't have that amount of capital to join staking pools rather than mining pools. There's plenty of different flavors and shapes and trust assumptions, but they definitely exist.
00:10:45.878 - 00:10:47.398, Speaker A: And I think the last thing I'll.
00:10:47.414 - 00:10:58.426, Speaker C: Say that where Ethereum is a bit different than other proof of stake chains is Ethereum really values this idea of having non validating nodes still verify the contents of every single block.
00:10:58.538 - 00:11:02.254, Speaker A: And whether you're in proof of work or proof of stake, ethereum kind of.
00:11:02.292 - 00:11:14.318, Speaker C: Relies on people who are not part of the validator set to also run nodes so that they can verify whether validators are actually following the protocol rule. So every node on the Ethereum network.
00:11:14.414 - 00:11:15.986, Speaker A: Again in proof of work today in.
00:11:16.008 - 00:11:19.778, Speaker C: Proof of stake after runs through every transaction of every block.
00:11:19.874 - 00:11:22.466, Speaker A: And if a validator or a miner.
00:11:22.498 - 00:11:32.486, Speaker C: Today did something like print themselves a million ETH, they would reject that block. So the right that you're giving to validators is not the right to set the protocol rules.
00:11:32.518 - 00:11:38.522, Speaker A: It's the right to faithfully follow those and have some level of discretion over.
00:11:38.576 - 00:11:44.106, Speaker C: The ordering of transactions in the block, but they don't have the rights to create invalid transactions.
00:11:44.218 - 00:11:50.074, Speaker A: And this is something where oftentimes you have these two concepts of large requirements.
00:11:50.122 - 00:12:03.506, Speaker C: For validators and proof of stake being conflated. So you can have a system that's proof of stake with really high requirements to run a node and that means you have less people running nodes and validating that those validators are being honest.
00:12:03.688 - 00:12:05.374, Speaker A: But that's kind of independent.
00:12:05.422 - 00:12:06.926, Speaker C: That's more about how do you throttle.
00:12:06.958 - 00:12:09.294, Speaker A: The throughput on your network and nothing.
00:12:09.352 - 00:12:11.266, Speaker C: Of that changes on Ethereum between proof.
00:12:11.298 - 00:12:12.754, Speaker A: Of work and proof of stake.
00:12:12.882 - 00:12:49.458, Speaker E: Well, I think this would be maybe a great time. The story of what has led us to this moment with everything that's been going on with Ethereum both in the human sense and then also in the technological sense of where we are today with the Ethereum technical roadmap and where you see it going in the next couple of months. Compare how a crypto network like Ethereum evolves with the way that, say, protocols like TCP IP and other protocols at the core of the Internet evolve, but would love to maybe start with your take on the human element of how Ethereum has evolved and how the merge has come to be.
00:12:49.544 - 00:12:54.318, Speaker A: I think it's funny because in a way the way the protocol is structured.
00:12:54.494 - 00:12:59.810, Speaker C: Dictates how the humans coordinate around it. And what I mean by that Ethereum.
00:12:59.890 - 00:13:02.742, Speaker A: Unlike a lot of other blockchains, has.
00:13:02.796 - 00:13:35.966, Speaker C: A specification which actually lays out the protocol rules like TCP IP or Http and then has multiple implementations of that specification. And the best non crypto analogy I found for this is web browsers. Like, you can think of Ethereum clients as like the difference between Firefox, Safari and Chrome where you open a web page on them, you get served the same web page. There's obviously a large amount of commonalities that these products follow, but they also have pretty significant degrees of freedom. Like the experience of using Safari is different from the experience of using Chrome and vice versa.
00:13:36.078 - 00:13:38.994, Speaker A: And because we have this setup, this.
00:13:39.032 - 00:13:51.366, Speaker C: Means there's no single code base to which you can make a change which changes the rules of the Ethereum protocol. We basically need people who work on each of these implementations to agree to.
00:13:51.388 - 00:13:53.750, Speaker A: A change for it to even be.
00:13:53.820 - 00:14:00.774, Speaker C: Brought into the specification and then reimplemented across those and we could talk more about the community's role in adopting those changes.
00:14:00.892 - 00:14:02.246, Speaker A: But just like looking at the core.
00:14:02.278 - 00:14:20.894, Speaker C: Protocol itself, this is like a really interesting process because at what we now call the execution layer, what's the Proof of Work network today? And we'll keep running the applications. After the transition to proof of stake. We basically have four full time teams in four different organizations, ranging from Consensus, which is kind of like a huge.
00:14:21.012 - 00:14:24.158, Speaker A: Tech startup, till Aragon, which is basically.
00:14:24.244 - 00:14:29.042, Speaker C: You can think of it as like a very thin organization on top of a bunch of open source developers and.
00:14:29.096 - 00:14:30.946, Speaker A: Others where there's like these teams of.
00:14:30.968 - 00:14:38.366, Speaker C: Different shapes and sizes in different parts of the world. They each have an implementation and each get a say into what changes happen to the protocol.
00:14:38.478 - 00:14:40.134, Speaker A: And not only do we have this.
00:14:40.172 - 00:14:46.198, Speaker C: On the execution layer of the Proof of Work chain, but when we designed the Proof of Stake chain we went with the same process.
00:14:46.364 - 00:14:48.978, Speaker A: So now there's another set of teams.
00:14:49.074 - 00:14:56.726, Speaker C: On the Proof of Stake chain which each have their own client implementations and similarly need to agree to changes before they make it onto the network.
00:14:56.838 - 00:14:58.426, Speaker A: So that means after the merge, we.
00:14:58.448 - 00:15:02.870, Speaker C: Basically have these nine teams, five on proof of stake, four on execution layer.
00:15:02.950 - 00:15:06.254, Speaker A: Who all sort of need to coordinate with each other and at the very.
00:15:06.292 - 00:15:11.934, Speaker C: Least, they need to agree to a protocol change for it to be the first step to be proposed and then potentially adopted by the community.
00:15:12.052 - 00:15:15.178, Speaker A: That's a really interesting environment because there's.
00:15:15.194 - 00:15:33.574, Speaker C: No one who can single handedly push changes in. And even more so now with the Proof of Stake side, there's not even a client implementation team that's part of the Ethereum Foundation. So on Proof of Work we have guests obviously, which is quite well known, but on the Proof of Stake side, none of the actual production code is written by people who are full time.
00:15:33.612 - 00:15:38.534, Speaker A: Part of the es there's this really interesting dynamic where because we have this.
00:15:38.572 - 00:15:43.034, Speaker C: Reference specification, even though you might have some code base that has a large.
00:15:43.072 - 00:15:45.094, Speaker A: Share of the network, they still can't.
00:15:45.142 - 00:15:50.118, Speaker C: Single handedly change things on the network. That's like a very neat property about how we're organized.
00:15:50.214 - 00:15:56.090, Speaker E: Has it been tricky to navigate the various incentives for all of the parties involved in upgrading to the merge?
00:15:56.170 - 00:16:00.494, Speaker C: The short answer would be yes. It's hard to navigate this because there's a bunch of different people.
00:16:00.612 - 00:16:02.794, Speaker A: I would say we're not diverging.
00:16:02.842 - 00:16:04.506, Speaker C: Usually at the level of incentives.
00:16:04.618 - 00:16:09.682, Speaker A: Like, it's quite rare that incentives diverge a lot because people need to put.
00:16:09.736 - 00:16:17.502, Speaker C: Years of work into building these clients and whatnot. And if they choose to do that, it's usually because they want to work on ethereum and further the protocol.
00:16:17.566 - 00:16:21.414, Speaker A: So I wouldn't say we're ever dealing with anyone who's in bad faith trying.
00:16:21.452 - 00:16:28.210, Speaker C: To nudge the incentive significantly in another direction. The thing we do get a lot is pretty intense technical disagreements.
00:16:28.290 - 00:16:29.638, Speaker A: And this is the other bit I.
00:16:29.644 - 00:16:36.806, Speaker C: Think is interesting is because you have all these teams, you allow for a bunch of engineers with very strong personalities.
00:16:36.998 - 00:16:39.226, Speaker A: If they disagree with how things are.
00:16:39.248 - 00:16:41.834, Speaker C: Done, they can go write their own client and do better.
00:16:41.952 - 00:16:43.786, Speaker A: And this is kind of amazing because.
00:16:43.808 - 00:16:47.790, Speaker C: If you just had a single client, there's no way you could get these humans to work together on the same code base.
00:16:47.860 - 00:16:51.386, Speaker A: You just are too opinionated and smart.
00:16:51.418 - 00:16:55.166, Speaker C: I guess it's like the combination of both. They have good ideas that explore different.
00:16:55.188 - 00:16:56.734, Speaker A: Parts of the trade off space and.
00:16:56.772 - 00:16:59.454, Speaker C: Probably the most well known example is Aragon.
00:16:59.502 - 00:17:02.146, Speaker A: Today was originally called Turbo Guess and.
00:17:02.168 - 00:17:12.626, Speaker C: It was literally a fork of Guest rearchitecting it from the ground up, which started as one guy running this as a side project and is now, I believe, the second most used client after Guest.
00:17:12.738 - 00:17:14.930, Speaker A: The fact that we had the ability.
00:17:15.010 - 00:17:31.786, Speaker C: To create a new client from scratch, which takes completely different architectural decisions, is pretty wild. And so we spent a lot of time discussing those types of issues, how decisions in the protocol may leak into implementation details and how do we balance that with having multiple teams working on this.
00:17:31.888 - 00:17:45.630, Speaker D: I mean, speaking of disagreements between sort of strong personalities on technical issues, I would encourage listeners to tune into one of the all core devs calls which you can hear Tim Biko in action is perhaps the most patient person on the planet Earth.
00:17:46.210 - 00:17:46.794, Speaker E: Incredible.
00:17:46.842 - 00:17:59.282, Speaker F: It is really incredible. I know you could probably write a whole book on this. What's been your biggest lesson learned from facilitating and managing these that you think could apply to other open source and decentralized communities if anything comes to mind?
00:17:59.416 - 00:18:01.038, Speaker C: Definitely a lot of learnings.
00:18:01.134 - 00:18:03.126, Speaker A: I think that's interesting because a lot.
00:18:03.148 - 00:18:40.610, Speaker C: Of other communities don't use live calls like we do. And sometimes I'm a bit envious of them because it's a bit of a tricky medium. But when ethereum governance is stalled, we're not really sure what the fundamental issue is. So figuring out what's the thing that's actually blocking you from moving forward. And the thing I spend a lot of time thinking about, and I try to judge my performance by is are people actually arguing about the core issue and a lot of time for many reasons. You spend so much cycles discussing some sort of tangential thing and people don't want to get to the root cause of the disagreement. And if I do my job really bad, we'll spend six months discussing something and never get to the heart of it.
00:18:40.610 - 00:18:48.670, Speaker C: And if I do it really well, maybe in six weeks we can actually get through the issue regardless of the outcome. So I think it's easy to just go around in circles.
00:18:48.750 - 00:18:56.054, Speaker F: Even in group team meetings that are not decentralized, this happens. You don't really know what people are debating or fighting about unless you get right to the core of what are we actually talking about?
00:18:56.172 - 00:18:56.502, Speaker A: Right.
00:18:56.556 - 00:19:01.474, Speaker C: And even more so would a team meeting, like, say you work in the same company, you have a lot more shared context.
00:19:01.522 - 00:19:04.086, Speaker A: Right. And all Cordev's and the research team.
00:19:04.108 - 00:19:10.410, Speaker C: Of Ethereum, I think we do have decent shared context, but we're not all in the same company. We're all in the same countries, not all in the same times films.
00:19:10.490 - 00:19:15.920, Speaker F: The other thing is that when these discussions are in the abstract, they're actually worse than when you have something concrete to react to.
00:19:16.370 - 00:19:36.322, Speaker C: Yeah, that's actually a huge one. There's been a lot of talk about censorship resistance lately and whatnot. And that's something actually I think we do well on Ethereum. So we have this research discord and we try to keep the topics and the channels focused on technical subjects. So instead of having a censorship resistance one, we'd have a proposer builder separation one.
00:19:36.376 - 00:19:36.606, Speaker F: Right.
00:19:36.648 - 00:19:39.190, Speaker A: But I think it's much more possible.
00:19:39.260 - 00:20:01.654, Speaker C: To make progress on tractable technical issues than these hard philosophical questions. Not that you need to completely ignore or dismiss them, but it's like you can spend years just arguing on the concept. But having a technical trade off is, I think in this environment, the best way we can move forward because you can get to consensus on that, even though people's values might not be fully aligned.
00:20:01.702 - 00:20:40.166, Speaker F: I agree 100%. And even in classic orgs, whenever people want to have a philosophical debate, it just inevitably becomes a religious debate. I just remove it to let's talk about it at the end of the thing when you have something concrete to react to because of precisely that, even when it's not technical, because it's just the only way to move forward. Yeah, but just sort of philosophically and practically this is really the heart of what something means in decentralization in theory versus practice, there's a common question of why do things take so long? Why does Ethereum take long to do things? And that's obviously tied in here. But is it all boiled down to this kind of model of having people coordinate both on the engineering and development side and then also kind of on.
00:20:40.188 - 00:20:41.894, Speaker A: The human side right now?
00:20:41.932 - 00:20:48.042, Speaker C: That's a great question. Yeah, there's definitely a root cause you can take on both side, on the people side, there's actually two things that.
00:20:48.096 - 00:20:50.346, Speaker A: I believe make things take longer than.
00:20:50.368 - 00:20:56.218, Speaker C: If we were just optimizing for speed. The first is what we were talking. You have all these different teams actually implementing the protocol.
00:20:56.314 - 00:20:58.094, Speaker A: And so not only do you need.
00:20:58.132 - 00:21:05.522, Speaker C: Them to agree, like you need them to agree conceptually, but then you need their software to interoperate. Like you need the actual code to agree.
00:21:05.656 - 00:21:07.534, Speaker A: And a large part of the merge.
00:21:07.582 - 00:21:25.398, Speaker C: Testing is just figuring out, okay, we have like five proof of stake clients, four execution clients. That's 20 combinations. How do we make sure each of those 20 pairs works across every possible edge case? And that obviously adds literally ten x more combinations than if we had one on each side.
00:21:25.484 - 00:21:27.238, Speaker A: So that's definitely a big part of it.
00:21:27.324 - 00:21:33.274, Speaker C: And what you get from that is that if there's a bug in any one of them, you can switch to the other and that bug doesn't get.
00:21:33.312 - 00:21:39.562, Speaker A: Enshrined in the canonical Ethereum network. If you think of what's the thing that Ethereum provides, what's like the value.
00:21:39.616 - 00:21:45.578, Speaker C: Prop is you're providing some sort of settlement layer execution environment for computation that's very secure.
00:21:45.674 - 00:21:49.818, Speaker A: And so imagine there's a bug in one of the clients that prints a billion Ether.
00:21:49.914 - 00:21:54.602, Speaker C: You've kind of ruined the whole value prop. You can't really trust it as like a settlement network anymore.
00:21:54.666 - 00:21:58.174, Speaker A: So having these different clients adds a ton of complexity.
00:21:58.222 - 00:22:04.034, Speaker C: But that's the upside of it. We're not ever relying on a single one of them. And the other human part, I think.
00:22:04.072 - 00:22:06.546, Speaker A: Which slows down, is as the community.
00:22:06.648 - 00:22:12.374, Speaker C: Grows, the amount of stakeholders grow. And you can think of this as like Ethereum in its earliest stage is.
00:22:12.412 - 00:22:14.150, Speaker A: Building like a tech product, right?
00:22:14.220 - 00:22:16.390, Speaker C: You can merge to master and ship things.
00:22:16.460 - 00:22:18.146, Speaker A: Imagine ethereum pre Genesis.
00:22:18.258 - 00:22:20.470, Speaker C: You can make changes incredibly quickly.
00:22:20.620 - 00:22:23.866, Speaker A: And even when Ethereum launched, obviously you.
00:22:23.888 - 00:22:31.950, Speaker C: Need some coordination to ship things. But there's kind of nothing at stake on the platform. Like, there's no applications built, the value is minimal. If there's a bug there, it's not the end of the world.
00:22:32.020 - 00:22:35.918, Speaker A: If you look at Ethereum today, we have on the order of hundreds of.
00:22:35.924 - 00:22:41.374, Speaker C: Billions of dollars of economic value on this trillions seller lien per year.
00:22:41.492 - 00:22:44.866, Speaker A: So if this thing breaks, the impact is quite big.
00:22:44.968 - 00:22:46.850, Speaker C: But even beyond that, to make changes.
00:22:46.920 - 00:22:51.874, Speaker A: To this, you need the community to sort of agree and believe that those.
00:22:51.912 - 00:22:53.058, Speaker C: Changes are worth it.
00:22:53.144 - 00:23:00.050, Speaker A: And unfortunately, we're kind of at the point where there's no more really low hanging fruits, right?
00:23:00.120 - 00:23:08.358, Speaker C: If there's something that's just like a pure win, we'll do it. It won't be contentious, it'll make things better and no one will agree with that. The point we're at now is, like.
00:23:08.444 - 00:23:11.366, Speaker A: There are trade offs, right? And when there's like a genuine trade.
00:23:11.398 - 00:23:22.526, Speaker C: Off, as your stakeholders grow, then you get more and more people on each side and the default is basically like inertia. And one way to think about it for Ethereum, you could imagine something that.
00:23:22.548 - 00:23:24.142, Speaker A: Would have been easy to ship four.
00:23:24.196 - 00:23:36.498, Speaker C: Years ago, mildly contentious today, and then five years might be, like, impossible to put in the protocol just because nothing has changed technically. But it's harder to coordinate the social aspect of it.
00:23:36.584 - 00:23:38.066, Speaker A: And it kind of makes sense with.
00:23:38.088 - 00:23:48.770, Speaker C: The value prop of Ethereum because if again what you're offering is this economic settlement layer for people, as more people use that, you want higher and higher predictability for it.
00:23:48.840 - 00:23:49.739, Speaker A: You don't want the rules of the.
00:23:49.739 - 00:24:00.758, Speaker C: Protocol to change overnight. And this is probably like the biggest critique that Bitcoiners make of Ethereum is the rules change all the time and you can't trust that you build something on the protocol and it'll still work five years from now.
00:24:00.844 - 00:24:02.954, Speaker A: And I think over time we do.
00:24:02.992 - 00:24:07.594, Speaker C: Have to address this and make that less and less true. Vitalik recently gave a talk saying the.
00:24:07.632 - 00:24:09.146, Speaker A: Development is going to look like an.
00:24:09.168 - 00:24:11.254, Speaker C: S curve, but there's definitely a recognition.
00:24:11.302 - 00:24:13.834, Speaker A: That you can't keep changing this thing.
00:24:14.032 - 00:24:19.162, Speaker C: Aggressively forever because it chips away at the stability that it provides.
00:24:19.226 - 00:24:42.934, Speaker D: Tim, I was wondering if you could tell us just a little bit on a more detailed level about the testing process leading up to the merge. Because one thing that I find somewhat exasperating is it seems like some people believe that nothing has been happening. Obviously the rollout has been delayed many times, but anyone paying attention would see there are these kind of milestones being passed at a regular clip. So I was just wondering if you could talk about the sequence of testnets and so on.
00:24:43.132 - 00:24:43.942, Speaker A: Yes, of course.
00:24:43.996 - 00:24:53.174, Speaker C: And I'll even zoom out a bit more because people feel like the transition has been delayed for years, right? Like not just months. And if you haven't been following Ethereum.
00:24:53.222 - 00:24:57.626, Speaker A: For five years, this won't be obvious. But there was a different design for.
00:24:57.648 - 00:25:10.458, Speaker C: Ethereum's, proof of stake early on that got quite ready to ship around late 2017, 2018 and then we decided to drop that and to start again from scratch. And this is where probably the first round of people thinking proof of stake.
00:25:10.474 - 00:25:12.814, Speaker A: Is delayed came out of because those.
00:25:12.852 - 00:25:14.842, Speaker C: People have been waiting for it since 2018.
00:25:14.986 - 00:25:17.154, Speaker A: The reason for it is just the.
00:25:17.192 - 00:25:27.214, Speaker C: Design for the original proof of stake was very coupled to how the existing Ethereum chain worked. It was basically like a special smart contract who could do things that other smart contracts couldn't.
00:25:27.342 - 00:25:29.026, Speaker A: And it had a lot of limitations.
00:25:29.138 - 00:25:30.706, Speaker C: The biggest of which was a minimum.
00:25:30.738 - 00:25:36.454, Speaker A: Stake of 1500 E, which was quite large. And so it just wasn't a great design.
00:25:36.572 - 00:25:41.274, Speaker C: And additionally, there was all this work happening on scaling Ethereum around Sharding that.
00:25:41.312 - 00:25:43.690, Speaker A: Seemed to have a lot of common.
00:25:43.840 - 00:25:46.550, Speaker C: Core architecture patterns or design patterns.
00:25:46.630 - 00:25:47.354, Speaker A: So it made sense.
00:25:47.392 - 00:25:48.954, Speaker C: To couple those two efforts together.
00:25:49.072 - 00:25:53.538, Speaker A: And so we decided to, instead of trying to tack on proof of stake.
00:25:53.574 - 00:25:55.054, Speaker C: To the proof of work chain and.
00:25:55.092 - 00:25:57.726, Speaker A: Then tack on Sharding in another way.
00:25:57.908 - 00:26:24.162, Speaker C: Reimagine, what would the system look like if we designed it from scratch? There's no legacy code coming in from the core Ethereum chain. And so from 2018 to 2020, this gave rise to the beacon chain. So people designed that, developed it, test it, and then in late 2020, the beacon chain actually launched as a proof of stake main net with, like, real funds in it. So about six months after that, the beacon chain had like, tens of billions of dollars in it, had been running pretty smoothly since the launch.
00:26:24.306 - 00:26:27.446, Speaker A: So now people felt comfortable with the.
00:26:27.468 - 00:26:47.914, Speaker C: Idea of actually using that to secure all of Ethereum. And it's also worth noting that between 2018 and 2021, there was a ton of more stuff that got built on Ethereum, so the stakes were much higher to change the systems. So in May of 2021, we felt confident that, okay, this beacon chain is working. It's secure, it's working at scale.
00:26:48.042 - 00:26:50.398, Speaker A: We can start thinking about making it.
00:26:50.404 - 00:26:52.650, Speaker C: The core consensus layer for all of Ethereum.
00:26:52.810 - 00:26:58.574, Speaker A: And like we were talking earlier on the engineering design for this was we'll.
00:26:58.622 - 00:27:12.966, Speaker C: Keep the clients that actually run the EVM like Guest, Beisu, Aragon and Nethermind and we'll simply tell them to stop listening to proof of work. And listen to proof of stake as a consensus algorithm and introduce like a communication layer from the beacon chain down.
00:27:13.068 - 00:27:14.754, Speaker A: So that the proof of stake chain.
00:27:14.802 - 00:27:25.110, Speaker C: Can tell the execution layer what's the latest head of the chain? But from the execution layer's perspective, it's whether they get like, a heaviest head from proof of work or a latest head from proof of stake.
00:27:25.190 - 00:27:25.754, Speaker A: It doesn't matter.
00:27:25.792 - 00:27:28.474, Speaker C: You get the block, you run it. And this was the general design.
00:27:28.592 - 00:27:30.314, Speaker A: And so in May of last year.
00:27:30.432 - 00:27:50.258, Speaker C: We basically had a couple of client teams try to prototype this over a month to see could this actually work? Could you actually run a proof of stake chain which is talking to an execution layer, sending it blocks. Have the execution layer run the blocks, verify that it actually follows all the protocol rules, and return a response as to whether it did or not. So we managed to prototype this in May.
00:27:50.344 - 00:27:55.358, Speaker A: I think that got us confidence that this architecture would work. It was a prototype.
00:27:55.374 - 00:27:57.538, Speaker C: So we spent the summer fixing all the bugs with it.
00:27:57.624 - 00:27:59.298, Speaker A: And when we came to the fall.
00:27:59.384 - 00:28:07.794, Speaker C: The thing we wanted to prototype was transitioning from proof of work to proof of stake. So this is the other kind of very complex part of the design, is there will be no downtime.
00:28:07.842 - 00:28:10.406, Speaker A: There's no, like, turning Ethereum off on.
00:28:10.428 - 00:28:35.454, Speaker C: Proof of work and then moving to proof of stake. It's literally instant. So you get a last proof of work block and then the next block is proof of stake. There's like 13 seconds between them. One way to make this concrete for users is if you send a transaction right before the merge, it'll be in the mempool. You don't know on which side is going to come up and it's not really going to change anything. So that was like another design goal is just how do we have this be frictionless for users, developers and infrastructure providers?
00:28:35.582 - 00:28:37.346, Speaker A: Last fall we basically prototyped this.
00:28:37.368 - 00:28:46.898, Speaker C: So we got everyone again together and launched a quick DevNet which started on proof of work, launched a beacon chain, ran through the merge and finalized on the other side.
00:28:46.984 - 00:28:48.574, Speaker A: And so that gave us the confidence.
00:28:48.622 - 00:28:52.914, Speaker C: That you can actually move from one to the other. Again, it was just a prototype, lots of bugs.
00:28:52.962 - 00:28:55.254, Speaker A: So we spent most of the fall fixing that.
00:28:55.372 - 00:28:57.686, Speaker C: And right before the holidays last year.
00:28:57.788 - 00:28:59.814, Speaker A: We had something which we thought was.
00:28:59.852 - 00:29:09.990, Speaker C: A mostly final spec. Like we knew there would be some weird edge cases that we have to correct for, but that the high level specification was sound. So we put up a first public testnet called Kinsugi.
00:29:10.070 - 00:29:11.850, Speaker A: And the goal there was to one.
00:29:11.920 - 00:29:30.434, Speaker C: Stress test our clients and run them through a bunch of edge case scenarios and find what breaks. But two also start reaching out to applications and infrastructure providers to make sure that this works for them. Our assumption was that it wouldn't break Uniswap and Inferra and Maker and all that but we were like okay, can we get them to deploy a version of uniswap on this?
00:29:30.472 - 00:29:32.702, Speaker A: And not even just the smart contract.
00:29:32.766 - 00:29:39.366, Speaker C: Working, but all the connections between the UI and whatnot? So we did all of this in early winter. We found these edge cases in the.
00:29:39.388 - 00:29:41.926, Speaker A: Spec, fixed them and in March we.
00:29:41.948 - 00:29:44.470, Speaker C: Had another public testnet where we basically.
00:29:44.540 - 00:29:45.782, Speaker A: Have, I wouldn't call it a spec.
00:29:45.836 - 00:29:47.686, Speaker C: Frozen but definitely like feature complete.
00:29:47.788 - 00:29:52.614, Speaker A: So we launched another testnet with that and then we started moving from mostly.
00:29:52.662 - 00:30:08.542, Speaker C: Fixing specification level issues to fixing implementation level issues. Again, we weren't like 100% confident but we had high confidence that the spec was found. But we would find issues with many of the implementations in specific edge cases. And the new thing we started doing.
00:30:08.596 - 00:30:12.478, Speaker A: To test this is this idea of shadow forks. And at a high level what we.
00:30:12.484 - 00:30:13.914, Speaker C: Do is we have all the client.
00:30:13.962 - 00:30:16.606, Speaker A: And testing teams take nodes, tell them.
00:30:16.628 - 00:30:21.506, Speaker C: The merge is happening and run them like on main net. So they basically fork off mainnet with.
00:30:21.528 - 00:30:22.946, Speaker A: A small number of nodes and they.
00:30:22.968 - 00:30:36.726, Speaker C: Run through the merge and they hopefully make it on the other side. And the things that are neat about that is you get the state size and database size of mainnet and people tend to think that blockchains are bottlenecked by the amount of transactions per second. This is not true.
00:30:36.828 - 00:30:39.730, Speaker A: The thing that bottlenecks blockchains, specifically Ethereum.
00:30:39.810 - 00:30:46.346, Speaker C: Is the amount of contracts and addresses that exist. We call this the state. Everybody's address all the smart contracts, all.
00:30:46.368 - 00:30:49.398, Speaker A: The data in that. And this is why Mainnet is much harder.
00:30:49.494 - 00:30:52.974, Speaker C: So these shadow forks were really helpful because they allowed us to test this.
00:30:53.012 - 00:30:59.200, Speaker A: Really early in the process, but in the highest stakes network, obviously without disrupting Mainnet itself.
00:30:59.570 - 00:31:01.198, Speaker C: So we ran these shadow forks and.
00:31:01.204 - 00:31:02.846, Speaker A: We'Re still running them the frequency of.
00:31:02.868 - 00:31:09.666, Speaker C: Once or twice a week. We went from in March, April, finding issues and client implementations and fixing those.
00:31:09.768 - 00:31:17.486, Speaker A: To May and June. We were at a spot where we would find issues more between specific pairs of clients, right, like we were talking.
00:31:17.528 - 00:31:33.158, Speaker C: About earlier, because we have five proof of Stake clients, four execution ones. It's like 20 kind of pairwise combinations. So it's like teku and aragon or nethermine and nimbus. And that specific combination has something we need to fix. And that basically browsed up the summer.
00:31:33.254 - 00:31:34.554, Speaker A: And then the last step in our.
00:31:34.592 - 00:31:41.818, Speaker C: Process, as with every hard fork, is we have existing testnets that we use that we want to run these upgrades on before.
00:31:41.984 - 00:31:44.174, Speaker A: And even though they're testnets, they're used.
00:31:44.212 - 00:31:50.014, Speaker C: By the entire community as well. So say like an application has a new version of their smart contract, like.
00:31:50.052 - 00:31:52.238, Speaker A: The new ENS contracts, they'll deploy it.
00:31:52.244 - 00:31:54.298, Speaker C: To a testnet before they deploy it to Mainnet.
00:31:54.394 - 00:31:56.094, Speaker A: So ideally, we don't want to break.
00:31:56.132 - 00:32:05.694, Speaker C: Those because they're quite useful for the community. This summer, we started feeling confident that we could upgrade through these testnets. We started on one that was kind of the most chaotic and already slated for deprecation.
00:32:05.822 - 00:32:07.714, Speaker A: Then we did the second one, and.
00:32:07.752 - 00:32:16.434, Speaker C: The last was the Gorli testnet, which has the prayer proof of stake testnet. It's used by the most people, like the most projects, the most. Stakers is like a final dress rehearsal.
00:32:16.482 - 00:32:21.798, Speaker A: Before Mainnet and then we would be comfortable for Mainnet. So that's like the Main testing arc.
00:32:21.894 - 00:32:32.218, Speaker C: We do a bunch of other stuff in parallel. There's fuzzing of this. A bunch of unit tests gets written, a bunch of simulators and integration tests. There's plenty more to that. But it was really this process of.
00:32:32.224 - 00:32:36.542, Speaker A: Just going for prototypes which add more and more complexity to a spec, which.
00:32:36.596 - 00:32:43.354, Speaker C: We work through the edge case, through all these implementation and then all the pairwise combinations and then through all of these public testnets.
00:32:43.402 - 00:32:45.950, Speaker A: And this is where we're at today. That's great.
00:32:46.020 - 00:32:53.938, Speaker D: I think that gives us a very visceral sense of the sense of responsibility around doing such a big upgrade for such a system that secures just so much.
00:32:54.104 - 00:32:54.674, Speaker C: Yes.
00:32:54.792 - 00:33:04.530, Speaker E: Yeah, I think you know the answer to this, Tim, but I think it'd be really good to get your personal philosophy on token based in protocol governance.
00:33:04.690 - 00:33:12.550, Speaker F: And just at a broad level. Another way to think about tying this in is as we talk about people, humans coordinating just also philosophically.
00:33:12.710 - 00:33:13.034, Speaker A: Sure.
00:33:13.072 - 00:33:38.434, Speaker C: So my thoughts on it, token based governance. So I think this comes back to the stakeholders where if you have a project with a very narrow focus and the value accrues to token holders, then I think token based governance is totally fine if this set of concerned stakeholders perfectly overlaps with the set of token holders and an ideal world overlaps proportionally. Like people who own a lot of tokens will be really affected and people.
00:33:38.472 - 00:33:42.290, Speaker A: Who don't won't be too affected, I think. Sure, token governance is great.
00:33:42.360 - 00:33:47.166, Speaker C: MakerDAO is probably one of the examples where this actually is quite well structured.
00:33:47.358 - 00:33:49.174, Speaker A: But then if you start to move.
00:33:49.212 - 00:33:50.918, Speaker C: Towards a system more as like a.
00:33:50.924 - 00:33:52.774, Speaker A: Public good or something where the amount.
00:33:52.812 - 00:34:06.650, Speaker C: Of tokens you own doesn't necessarily make you the best stakeholders and even more so the amount of tokens you own today, then coin voting governance makes less and less sense. And this is why when you think of something like the ethereum network, even.
00:34:06.720 - 00:34:13.726, Speaker A: Today, you could argue protocol developers and developers of the major applications have an.
00:34:13.748 - 00:34:26.386, Speaker C: Outsized role in governance relative to their ether holdings. If you take, I don't know, some investment funds who's bought a ton of ether versus the developers of the client teams and MakerDAO, uniswap OpenSea and all.
00:34:26.408 - 00:34:28.786, Speaker A: Those folks, the latter will have a.
00:34:28.808 - 00:34:43.606, Speaker C: Stronger say in what shapes the ethereum network. And this is because we don't do coin voting. And the downside is it's much more messy of a process, right? You can't just point it on chain and say like okay, we have 51%, we can go with this. But the upside is we are able.
00:34:43.628 - 00:34:47.046, Speaker A: To consider input and design around a.
00:34:47.068 - 00:34:53.334, Speaker C: Much broader set of people than just pure ether holders and again, especially ether holders at a specific moment in time.
00:34:53.372 - 00:34:54.794, Speaker A: Which can change quite a lot.
00:34:54.912 - 00:35:27.646, Speaker F: Yeah, one analogy I was thinking of, I live in San Francisco and the other thought that was in the back of my head is what if the voting was decided on chain not just by purchasing tokens, but just like who shows up and participates? Right? And then I was thinking about how there's a study about the incentives for who does show up and doesn't. And so there's a lot of conflict there. It's really fascinating to watch play out and maybe it's tied to what you were saying earlier about there just simply being multiple client implementations, but then what's kind of happening in order to move things forward so they don't just get stuck in committee? Are there subgroups?
00:35:27.758 - 00:35:28.178, Speaker A: Yes.
00:35:28.264 - 00:35:35.078, Speaker C: So I'll talk about this in the pre merge world because it gets a bit more complicated after the merge. But ethereum's history up to today on.
00:35:35.084 - 00:35:37.414, Speaker A: The prefix work chain we have these.
00:35:37.452 - 00:35:39.974, Speaker C: Core developer calls which my day job.
00:35:40.012 - 00:35:43.334, Speaker A: Is to facilitate where the client developers.
00:35:43.382 - 00:35:44.906, Speaker C: Of the protocol and a bunch of.
00:35:44.928 - 00:35:47.526, Speaker A: Researchers and also anyone who wants to join.
00:35:47.558 - 00:35:52.026, Speaker C: Like, they're fairly open get together and they chat about potential changes for an.
00:35:52.048 - 00:35:54.014, Speaker A: Hour and a half every two weeks.
00:35:54.212 - 00:36:01.178, Speaker C: If you want to make a change to Ethereum, we have a process called Ethereum Improvement Proposals, which is EIPS.
00:36:01.274 - 00:36:01.822, Speaker A: Yeah.
00:36:01.956 - 00:36:10.050, Speaker C: And this is copied from the Bips, from Bitcoin, which are copied from the Pips, from Python. So it's a fork of a fork of a fork of a process.
00:36:10.200 - 00:36:12.066, Speaker A: And this is basically just like a.
00:36:12.088 - 00:36:28.834, Speaker C: Standard or like a set of templates that you can use to specify your change. Like, you come and you say, oh, I want to add a new opcode to the EVM that does X. Then you'll specify why you want this opcode, what it does, some test cases, what it should do with this input and that input, some security considerations.
00:36:28.962 - 00:36:33.514, Speaker A: And usually people will put that together and then get some initial feedback by.
00:36:33.552 - 00:36:38.458, Speaker C: Client developers, researchers, applications who might be interested in using this.
00:36:38.544 - 00:36:40.006, Speaker A: And then once they have something that's.
00:36:40.038 - 00:36:45.358, Speaker C: Pretty solid, they'll come on these core developer calls and they'll ask people feedback for it.
00:36:45.444 - 00:36:47.434, Speaker A: Most of the time there's a Dos.
00:36:47.482 - 00:36:59.090, Speaker C: Vector hidden somewhere in their idea. So the most common response is they come on the call, there's a way to abuse the system with their new feature. And so they go back to the drawing board for a few months and come up with a fix for that usually.
00:36:59.160 - 00:37:03.474, Speaker A: Then they come back and they have something good. We then need to think through how.
00:37:03.512 - 00:37:22.998, Speaker C: We release software on Ethereum. And we basically follow like, you could think of it as like a waterfall process from software development. And the reason there is there's really high fixed cost to making releases on the Ethereum network because we need everybody to upgrade their nodes. At the same time, there's a risk that if they don't do it right, they're on the wrong chain and whatnot. So we really try and bundle features.
00:37:23.014 - 00:37:24.294, Speaker A: Together with a release.
00:37:24.342 - 00:37:30.118, Speaker C: We don't ship things as soon as they're ready on a regular cadence. So when we think through these upgrades.
00:37:30.214 - 00:37:32.266, Speaker A: We need to think about, okay, what.
00:37:32.288 - 00:37:37.626, Speaker C: Are the most valuable of all these ideas that people came and presented? Which ones are roughly the most valuable?
00:37:37.738 - 00:37:40.446, Speaker A: And also are they fairly isolated from each other?
00:37:40.468 - 00:37:53.650, Speaker C: Because you could imagine two features that on their own are fine, but if you ship them together, the testing potential security issues grow exponentially. So this is what we then spend a lot of time discussing. Of these potential candidate EIPS, which ones.
00:37:53.800 - 00:37:55.198, Speaker A: Are the best subset.
00:37:55.294 - 00:37:59.698, Speaker C: And this is mostly done by client developers and researchers.
00:37:59.794 - 00:38:02.534, Speaker A: And there's no one metric to look.
00:38:02.572 - 00:38:08.482, Speaker C: At, actually, if there is one, it's like the security of the network. Everything needs to pass the bar. It's safe and won't break Ethereum.
00:38:08.546 - 00:38:09.014, Speaker F: Yeah, right.
00:38:09.052 - 00:38:11.734, Speaker A: But then beyond that, there is no method.
00:38:11.782 - 00:38:13.446, Speaker C: And we call this rough consensus.
00:38:13.558 - 00:38:15.946, Speaker A: You get people to debate it.
00:38:16.128 - 00:38:22.826, Speaker C: And the other bit, actually the full thing is rough consensus and running code. You start trying to write the code for it, right, and see, is this.
00:38:22.848 - 00:38:25.246, Speaker A: Thing actually what you expect it to be?
00:38:25.268 - 00:38:27.534, Speaker C: Is there any weird, unexpected issues?
00:38:27.732 - 00:38:29.438, Speaker A: And usually what we'll do is when.
00:38:29.444 - 00:38:32.734, Speaker C: We'Re planning an upgrade, we'll have our first subset of things we're quite sure.
00:38:32.772 - 00:38:35.950, Speaker A: About either because they're very important, people.
00:38:36.020 - 00:38:37.538, Speaker C: Really want them, stuff like that.
00:38:37.624 - 00:38:39.426, Speaker A: And then it just gets tested for.
00:38:39.448 - 00:38:47.166, Speaker C: Several months, eventually gets deployed on mainnet and we run through the cycle again. So that's at a very high level how it works. And then there's a bunch of edge.
00:38:47.198 - 00:38:49.294, Speaker A: Cases when you get into the details.
00:38:49.422 - 00:39:19.390, Speaker F: I just can say for historical context. For those that don't know that phrase, rough consensus and running code actually comes from the OG motto of the internet engineering. I don't remember what it's called, task Force or something, but basically it's about hacking and figuring things out and making innovation happen in a very kind of emergent way. And I don't know if you guys know Venkatesh Rao. Yeah, he used to work at Xerox, which is when I first met him. He's known as VGR on Twitter, but he has a whole section on this very theme. He and Mark Andreessen were initially working on a book together.
00:39:19.390 - 00:39:39.266, Speaker F: I edited the first three chapters for it. I remember this phrase very you know, there's like a whole school of thought around it. So I don't want to derail us, but just want to point people to that resource, a website called Breaking Smart if they want to read more about it and what that means. And I think the idea of rough consensus and running code to them was a key argument for how innovation is.
00:39:39.288 - 00:39:40.546, Speaker B: Going to happen in the modern era.
00:39:40.578 - 00:39:44.978, Speaker F: Which I think is super interesting because that's kind of how it's played out with the Ethereum Foundation.
00:39:45.074 - 00:39:46.102, Speaker A: Yeah, that's how it works.
00:39:46.156 - 00:39:47.734, Speaker C: But as we've been working on the.
00:39:47.772 - 00:39:50.454, Speaker A: Merge, we haven't had to work through.
00:39:50.572 - 00:40:04.734, Speaker C: What feature are we doing because it's been pretty clear instead of having four teams decide on one side and five teams decide on the other, it's been nine teams working together on this specification. So that's been an interesting literal merge of the processes as well.
00:40:04.852 - 00:40:08.846, Speaker A: And one thing we're thinking about now is what is the right level of.
00:40:08.868 - 00:40:30.146, Speaker C: Coupling between those two layers after the merge? Because there's a bunch of changes we want to do on the proof of Stake side and there's a bunch of things that kind of anchor in proof of stake, like sharding and whatnot. But there's also a bunch of things we want to do on the execution side and improving the EVM and scaling things there as well. So there's value in these things being decoupled and being able to progress on initiatives independently.
00:40:30.258 - 00:40:31.814, Speaker A: But at the same time, like I.
00:40:31.852 - 00:40:41.874, Speaker C: Said earlier, there's like really high fixed cost to upgrades. So you definitely want to test things working together across both stacks. You don't want to have upgrades every month. You want the system to be safe.
00:40:41.922 - 00:41:13.666, Speaker D: There's a few different things there, but maybe I'll just circle back to the community and multi client diversity and that kind of stuff. This is something that is, as you say, I think very unique to Ethereum. And people love to argue at the level of the specs, which consensus protocol is better. There's also strength in multiple competing implementations of the spec. And you also talked a bit about multiple client teams needing to coordinate from the very beginning and how that still shapes how the community works. Because you could imagine a version of Ethereum that only had the one reference client right and it would still be a really cool blockchain. It would be turn complete.
00:41:13.666 - 00:41:29.158, Speaker D: It would have this nice virtual machine. And so I'm wondering if you feel like the protocol design somehow encourages the strength of the community? Or conversely, do you think certain decisions were made in the protocol itself as a consequence, as a community norms in Ethereum? So I was just wondering if you.
00:41:29.164 - 00:41:30.486, Speaker A: Could speak a little bit about what.
00:41:30.508 - 00:41:40.074, Speaker D: Does it mean to you when people say that Ethereum has a, quote unquote, strong community or a strong social layer? Presumably that's a broader community than just people who are writing clients and people.
00:41:40.112 - 00:41:40.902, Speaker A: Who work for the EF.
00:41:40.966 - 00:41:47.886, Speaker D: And then I'd also be curious to hear just about the back and forth between that community and the protocol itself.
00:41:48.068 - 00:41:54.090, Speaker A: That's a great question. It's like definitely the community is not just protocol researchers or developers.
00:41:54.170 - 00:42:15.298, Speaker C: And you can almost think of it as like a production pipeline. We need researchers to come up with things like the proof of stake design as an example of that. You then need the client teams to actually write the code for this to work. But the client teams put out the software. They don't run the majority of the nodes, they don't own the majority of Ether, they don't write the majority of the popular applications on the network.
00:42:15.394 - 00:42:17.846, Speaker A: So there's very much a need and.
00:42:17.868 - 00:42:21.894, Speaker C: A responsibility on the community to then decide if they want to adopt this upgrade.
00:42:21.942 - 00:42:24.746, Speaker A: And if protocol developers and researchers are.
00:42:24.768 - 00:42:28.346, Speaker C: Doing their job well, they'll proactively listen to the community and not put out.
00:42:28.368 - 00:42:31.034, Speaker A: An upgrade that's terrible and run through.
00:42:31.072 - 00:42:34.794, Speaker C: The motions of them refusing it. If they can save themselves that hassle.
00:42:34.842 - 00:42:42.766, Speaker A: They will do it. But just the fact that this check exists forces protocol level people to think about, okay, will people actually accept this.
00:42:42.788 - 00:42:57.970, Speaker C: Change and do they want it? And there's also like an interesting dynamic on the other way where people who build stuff on Ethereum or even people who'd hold Ethereum, like investors, they'll have requests for the protocol, right? There's stuff that can make life easier for engineers and they'll pass through those suggestions.
00:42:58.130 - 00:43:01.814, Speaker A: In general, the Ethereum community values people.
00:43:01.932 - 00:43:05.654, Speaker C: Building and using the network. So like, developers and users tend to.
00:43:05.692 - 00:43:07.090, Speaker A: Be quite highly valued.
00:43:07.170 - 00:43:11.874, Speaker C: Protocol developers tend to be extremely valued for their insights into security.
00:43:12.012 - 00:43:13.290, Speaker A: Like I was saying, the most common.
00:43:13.360 - 00:43:15.146, Speaker C: Reply if somebody from the community is.
00:43:15.168 - 00:43:16.426, Speaker A: Like, oh, we should add this to.
00:43:16.448 - 00:43:39.326, Speaker C: The EVM is some protocol engineer will just find a Dos vector in it. And they'll say, well, we can't add this to the EVM because it'll break everything. And they might collaborate, find another design for it, but there's definitely like this back and forth that happens. And I think more and more we're seeing the amount of fields that are solicited grow. So like, Tim, you've obviously worked on EIP 1559 and studied that deeply.
00:43:39.358 - 00:43:41.026, Speaker A: But that is something where it was.
00:43:41.048 - 00:43:43.138, Speaker C: Quite interesting because a lot of the.
00:43:43.144 - 00:43:45.794, Speaker A: Community was asking for it for either.
00:43:45.832 - 00:44:25.406, Speaker C: UX reasons or because they liked the idea of burning the fees. I think protocol researchers were mostly concerned about whether these variable size blocks could be a Dos vector for the chain. But then there was this whole other area which you've really helped with, which was, is this economically sound right? Like, did the incentives line up? And this is something that protocol developers didn't feel qualified to make a call on. They could look at it and they could have a gut feel for it, but they're not experts there. And you see this in other stuff as well. For example, cryptography, right? We can talk about scaling and bank sharding and all that, but there's some level of cryptography that needs to be introduced where someone who's writing a client in Go or in like Java, they're.
00:44:25.438 - 00:44:27.934, Speaker A: Not necessarily an expert in the intricacies.
00:44:27.982 - 00:44:41.478, Speaker C: Of crypto libraries and that's a completely different skill set. We have to draw on a broader set of experiences as the stakes around the economics of the network or introducing a cryptographic vulnerability grow.
00:44:41.564 - 00:44:49.142, Speaker E: Tim, I was actually curious if there is a particular controversial or contentious debate that you've had in the recent months.
00:44:49.276 - 00:44:50.566, Speaker C: So I mean, we've been working on.
00:44:50.588 - 00:44:52.186, Speaker A: The merge for like a year, so.
00:44:52.208 - 00:45:05.194, Speaker C: We kind of feature froze everything else, so we haven't talked too much about new features. But what I think is actually interesting to think about is this idea of EIP 3074. For people who are not familiar, it's a form of account abstraction.
00:45:05.322 - 00:45:07.854, Speaker A: It's a way to get someone else.
00:45:07.892 - 00:45:24.786, Speaker C: Than the end user to pay for gas, basically, and do other things as well. But the canonical use case is you have a user who's used Ethereum and they don't have gas to pay for something, but they'd like to take an action, play a game, buy an NFT. So could the NFT platform or the game create them an account, pay the gas for them and have that in.
00:45:24.808 - 00:45:25.954, Speaker A: A pretty secure way?
00:45:26.072 - 00:45:28.118, Speaker C: There's been many proposals for this over the years.
00:45:28.204 - 00:45:32.998, Speaker A: And there's one that's reached a spot where it is technically simple.
00:45:33.084 - 00:45:34.966, Speaker C: And this is EIP 3074.
00:45:35.068 - 00:45:37.686, Speaker A: I don't think there's any risks to.
00:45:37.708 - 00:45:45.418, Speaker C: The protocol in adopting it, but there's contention about malicious actors exploiting at more the application level.
00:45:45.504 - 00:45:48.090, Speaker A: And basically what this means is when.
00:45:48.240 - 00:45:54.494, Speaker C: As a user, if you want to give a smart contract like access over your account, you are basically giving them.
00:45:54.532 - 00:45:58.574, Speaker A: Access over all of your funds. And whatnot you would then create this.
00:45:58.612 - 00:46:00.954, Speaker C: Class of contracts on the Ethereum network.
00:46:01.082 - 00:46:05.162, Speaker A: Which has the equivalent of root access some users accounts.
00:46:05.226 - 00:46:22.870, Speaker C: And you could imagine somebody deploying a malicious version of that potentially waiting for a very long time to get a bunch of approvals so they could behave honestly for a long time, gain a bunch of adoption, and then at some point they turn on the evil switch and drain all those people's accounts. And this is something that's interesting because.
00:46:23.020 - 00:46:25.494, Speaker A: You see today that UX and end.
00:46:25.532 - 00:46:28.722, Speaker C: User safety around funds and whatnot is like a pretty big concern.
00:46:28.866 - 00:46:31.594, Speaker A: And you could imagine an alternate world.
00:46:31.632 - 00:46:34.746, Speaker C: Where this was adopted in 2016, right?
00:46:34.848 - 00:46:36.586, Speaker A: And it would kind of be part.
00:46:36.608 - 00:46:47.742, Speaker C: Of their risk profile of using a blockchain that we have today. And there is already a pretty significant risk profile, right. Like people need to keep private keys, which is not something you get like in Web Two.
00:46:47.876 - 00:46:50.510, Speaker A: So you could imagine an alternate history.
00:46:50.580 - 00:46:52.606, Speaker C: Where this gets proposed in 2016 or.
00:46:52.628 - 00:46:55.354, Speaker A: Something and people are much more comfortable.
00:46:55.402 - 00:46:58.734, Speaker C: With this because users are much more technically sophisticated.
00:46:58.862 - 00:47:00.594, Speaker A: And then you ship this and then.
00:47:00.632 - 00:47:05.794, Speaker C: Maybe you develop wallets with assumptions that this thing exists and they kind of end up looking different.
00:47:05.912 - 00:47:07.154, Speaker A: But today we're in a spot where.
00:47:07.192 - 00:47:14.630, Speaker C: Not that this change won't happen, like it still might, but it's definitely very contentious because of this and I think because of the level of adoption we're at.
00:47:14.780 - 00:47:17.366, Speaker A: And I would wager, like, if we don't get it in the next couple.
00:47:17.388 - 00:47:22.266, Speaker C: Of years, adding this like ten years down the line. Imagine when Ethereum is integrated across a.
00:47:22.288 - 00:47:24.826, Speaker A: Whole bunch of different financial things and.
00:47:24.848 - 00:47:28.854, Speaker C: Whatnot people have a very good model of how a wallet should work. What are the risks?
00:47:28.982 - 00:47:31.718, Speaker A: Adding this completely different vector that feels.
00:47:31.734 - 00:47:33.994, Speaker C: Like it would be practically impossible. I think that's an example.
00:47:34.032 - 00:47:36.542, Speaker A: That's a neat, very neat, neat example.
00:47:36.596 - 00:47:38.238, Speaker C: Of where we're at right now.
00:47:38.324 - 00:47:39.438, Speaker A: Yeah, that makes a lot of sense.
00:47:39.444 - 00:47:42.542, Speaker F: Yeah, I mean, it's a little bit of building the airplane while flying it.
00:47:42.596 - 00:47:42.958, Speaker A: Yes.
00:47:43.044 - 00:48:05.110, Speaker F: So quick lightning round section. Now, this is like 30 seconds, super rapid stuff. I'm going to quickly throw out some topics and this is really just getting at what's ahead, what's next, what's top of mind. Let's just go ahead and start with Statelessness. So super quick statelessness. One question from Noah Citron on our team was what you think will happen with stateless client development once the merge is complete. Do you have any quick thoughts on that?
00:48:05.180 - 00:48:15.750, Speaker C: Yes, it is very much top of mind. It won't be like the very next thing after the merge because we have to ship withdrawals and other things, but it's very much the way we see scaling the execution layer.
00:48:15.830 - 00:48:16.122, Speaker A: Yeah.
00:48:16.176 - 00:48:24.958, Speaker F: Actually, by the way, for me, the best definition I ever read about Ethereum was as a distributed state machine. I thought that was, like, such a nice, pure, clean way of describing it.
00:48:25.044 - 00:48:29.086, Speaker E: What is your view of what privacy will look like on top of Ethereum down the line?
00:48:29.188 - 00:48:30.880, Speaker C: This is a really hard question.
00:48:32.210 - 00:48:33.758, Speaker F: Not a 32nd one. We get it.
00:48:33.764 - 00:48:35.934, Speaker A: But yeah, what I would want my.
00:48:35.972 - 00:48:49.574, Speaker C: Absolute dream is for Eats transfers to be private by default. Not smart contract calls, but like 21,000 gas ETH transfers. If we had those private by defaults on L One, I think we would solve 99% of privacy issues.
00:48:49.692 - 00:48:51.686, Speaker A: I don't think this is likely to.
00:48:51.708 - 00:48:53.346, Speaker C: Happen for a bunch of reasons.
00:48:53.458 - 00:48:57.618, Speaker A: We're going to keep seeing many different application layer privacies.
00:48:57.794 - 00:49:02.402, Speaker C: I think just like how in 2017 there were a bunch of good concepts.
00:49:02.466 - 00:49:04.186, Speaker A: That needed a few tweaks and actually.
00:49:04.208 - 00:49:13.250, Speaker C: Worked at scale, in 2022, I suspect it'll be the same for privacy. There's a trade off between how do you do compliance with privacy, how do you ensure that there's no bugs?
00:49:13.270 - 00:49:15.886, Speaker A: And whatnot we clearly have a lot.
00:49:15.908 - 00:49:18.042, Speaker C: Of brain power in the space dedicated.
00:49:18.106 - 00:49:20.590, Speaker A: On these things, and the V ones.
00:49:20.660 - 00:49:26.146, Speaker C: Might not work, but I'm confident we'll get that. I think L two S are interesting as well. The biggest challenge I see with L.
00:49:26.168 - 00:49:28.734, Speaker A: Two S is, is privacy a competitive.
00:49:28.782 - 00:49:31.166, Speaker C: Advantage or like, a hindrance to some extent?
00:49:31.278 - 00:49:37.006, Speaker A: And that'll be like, a really interesting thing to see play out. Is the fully private L2 gaining.
00:49:37.038 - 00:49:39.298, Speaker C: More or less adoption than the fully open one?
00:49:39.384 - 00:49:39.874, Speaker A: Yeah.
00:49:39.992 - 00:49:42.790, Speaker F: Okay, cool. So a couple more quick lightning round things.
00:49:42.860 - 00:49:43.478, Speaker A: I don't know if you can do.
00:49:43.484 - 00:49:55.670, Speaker F: This very quickly, but just at a very high level. There was so much angst around ETH. Versus ETH. Classic ethereum. Classic. And one question that Sam Ragzell and our team asked just whether a fork can be zero sum or positive sum.
00:49:55.750 - 00:49:57.354, Speaker A: My short answer is I think they.
00:49:57.392 - 00:49:58.678, Speaker C: Can be positive sum.
00:49:58.774 - 00:50:11.198, Speaker A: I think the technical barrier to execute a fork goes up as blockchains are more adopted, and that's a feature and not a bug, in that if a.
00:50:11.204 - 00:50:14.810, Speaker C: Billion people are using this chain, you want it to be harder to fork.
00:50:14.890 - 00:50:16.942, Speaker A: Than if a million people are using.
00:50:16.996 - 00:50:18.738, Speaker C: Or if 10,000 people are using it.
00:50:18.824 - 00:50:22.674, Speaker A: I don't think they're impossible. I think they need careful engineering and.
00:50:22.712 - 00:50:26.066, Speaker C: Like, a reason to support it in the long term. This is the thing you can see.
00:50:26.088 - 00:50:28.086, Speaker A: Like with Theorem Classic is there was.
00:50:28.108 - 00:50:33.986, Speaker C: Like a genuine philosophical, almost desire there to keep supporting the chain with its original rule.
00:50:34.018 - 00:50:37.126, Speaker A: Set and you need some element of.
00:50:37.148 - 00:50:38.982, Speaker C: That, some sort of mission or almost.
00:50:39.036 - 00:50:41.174, Speaker A: Religious like thing because it's really hard.
00:50:41.212 - 00:50:47.450, Speaker C: To just maintain a blockchain. It's very exciting to fork the thing, but why will somebody be there like three years after?
00:50:47.600 - 00:50:51.034, Speaker A: And that's like this mix, like, yeah, you need probably a higher level of.
00:50:51.072 - 00:50:57.962, Speaker C: Engineering skills, the more complex the ecosystem you're forking is, but you also need like a higher degree of intrinsic motivation.
00:50:58.026 - 00:51:03.930, Speaker A: Because otherwise people just won't maintain the Sanion and that's most of the work over the long term.
00:51:04.010 - 00:51:05.346, Speaker F: Yes, that makes a lot of sense.
00:51:05.448 - 00:51:32.022, Speaker E: Back to the point about how the system ends up becoming Ossified as time goes on. I really like the idea of shadow forks as a way of testing new experiments and trying out new things and potentially serving as a counterweight to that Ossification. And so far they've really only been used to test the merge. But do you see shadow forks becoming a more general mechanism for trying out new ideas?
00:51:32.086 - 00:51:34.538, Speaker C: And there's two types of changes, I think.
00:51:34.624 - 00:51:37.018, Speaker A: One is when we change what happens.
00:51:37.104 - 00:51:50.334, Speaker C: In Ethereum, like adding a new opcode, shadow forks aren't really useful for that because there's no transaction that's going to call that new opcode because it doesn't exist on main net. When we change the shape of ethereum in a way with something like 1559.
00:51:50.372 - 00:51:58.190, Speaker A: Or the merge, where just the normal flow of activity on the network ends up in a different shape or form.
00:51:58.260 - 00:52:01.502, Speaker C: I think this is where they're super useful because it's extremely hard to write.
00:52:01.556 - 00:52:06.566, Speaker A: Good integration tests for this just because of the complexity of the network and.
00:52:06.588 - 00:52:10.294, Speaker C: All the moving parts. So for stuff like that, I think it is super valuable and I hope.
00:52:10.332 - 00:52:11.254, Speaker A: That we'll keep doing them.
00:52:11.292 - 00:52:52.638, Speaker F: I'm really glad you brought that up, Ali, because I've been kind of obsessed with the topic of shadow forks as well. Especially because earlier, Tim, you were talking about how at the end of the day, ethereum is taking a very waterfall like approach to software development. And I love this theme of things that are everything old becomes new, everything new becomes old because I think of the shift from cascade waterfall style to later agile style. And what's so fascinating me about shadow forking is it's actually kind of a cool hybrid in a way, because it's a way to not do first bake it and then ship it. It's actually a way to actually test in real time. And I'm actually particularly interested. And we don't have to go into any detail here at all but what you can do with simulations as well, because we often forget, like, the computational power we have available to us.
00:52:52.638 - 00:53:08.902, Speaker F: We can do so much more than we could have, like, 30 years ago to figure out what real people would do. Because frankly, I personally find it very hard to believe that with the amount that you are doing on main net, you actually are really going to surface that many of the edge cases. It just seems like the edge cases are actually only found at great, great numbers.
00:53:08.956 - 00:53:23.110, Speaker C: Yes, for sure. And again, it really depends the type of thing you're looking for. But we do simulations, but we also do like a ton of fuzzing, which is really helpful and basically running through every potential input. And what we'll do, we'll fuzz different clients against each other and compare the outputs.
00:53:23.270 - 00:53:24.398, Speaker A: We'll do a lot of that.
00:53:24.484 - 00:53:31.834, Speaker C: The thing is, for some properties of the Ethereum main net, people talk about simulating the latency, the nodes and whatnot.
00:53:31.882 - 00:53:40.978, Speaker A: All the time, but I don't know, it's like the shadow forks just so far have been better. I'm not like an engineer, I can't tell you why exactly.
00:53:41.064 - 00:53:45.858, Speaker C: Why is it so hard to simulate it that well? But I'm sure at some point people will figure out a good way to.
00:53:45.864 - 00:53:47.154, Speaker A: Do it and it'll work.
00:53:47.272 - 00:53:50.974, Speaker C: But yeah, I don't know why the shadow forks have been working, like, surprisingly well.
00:53:51.032 - 00:53:51.798, Speaker F: No, that's great.
00:53:51.884 - 00:53:52.134, Speaker A: Yeah.
00:53:52.172 - 00:54:03.210, Speaker F: No, I want to probe on this at some point in the future. Is there just one quick misconception you want to tackle about the discourse around the merge? Like a common misconception that people have that you just want a bottom line for the audience?
00:54:03.550 - 00:54:05.082, Speaker A: The biggest one we see is like.
00:54:05.136 - 00:54:25.882, Speaker C: That the merge will reduce transaction fees on Ethereum at a high level. It unfortunately doesn't. There's a bunch of other things that Ethereum is doing to lower transaction fees, but the merge is really just moving from proof of work to proof of stake to get the consensus on what's the last valid block in the chain. And it does that in a way that's obviously more environmentally friendly, where we think it has better security properties.
00:54:26.026 - 00:54:30.398, Speaker A: But the one bit it doesn't do right off the bat is lower transaction fees.
00:54:30.494 - 00:54:34.738, Speaker F: Okay. So bottom line, it'll have improvements, but it's not going to actually solve that particular thing.
00:54:34.824 - 00:54:35.314, Speaker A: Yeah.
00:54:35.432 - 00:54:55.162, Speaker D: So not to get ahead of ourselves, let's talk a little bit about life after the merge and ambitions afterwards. And in particular, I imagine scaling will be front of mind. I'm curious about the kind of the latest community thinking around support for various roll ups, EIP 48, 44, protodank, sharding, all that kind of stuff, wondering where things stand these days, of course.
00:54:55.216 - 00:55:03.374, Speaker C: So absolutely the focus is on scaling Ethereum. And one thing that's been interesting about Ethereum scaling roadmap over the past few.
00:55:03.412 - 00:55:05.486, Speaker A: Years is economic terms.
00:55:05.588 - 00:55:10.794, Speaker C: It's moved to much more of a free market of different scaling solutions, competing.
00:55:10.922 - 00:55:12.718, Speaker A: And I think that's actually been a.
00:55:12.724 - 00:55:14.990, Speaker C: Really positive change because we talk about.
00:55:15.060 - 00:55:17.646, Speaker A: Scaling Ethereum in the future and the.
00:55:17.668 - 00:55:23.394, Speaker C: Implication there of the changes we make to the protocol to make it more scalable. But roll ups are actually live today.
00:55:23.432 - 00:55:25.106, Speaker A: With production code, which is kind of.
00:55:25.128 - 00:55:27.694, Speaker C: Amazing when you think about it? Because if we were bottlenecked on client.
00:55:27.742 - 00:55:32.482, Speaker A: Developers to write roll ups, clearly we don't have them written from client developers.
00:55:32.546 - 00:55:33.558, Speaker C: But also I don't think we would.
00:55:33.564 - 00:55:35.462, Speaker A: Get the diversity, just the fact that.
00:55:35.516 - 00:55:37.266, Speaker C: ZK roll ups and optimistic roll ups.
00:55:37.298 - 00:55:39.254, Speaker A: Are both a thing and there's multiple.
00:55:39.302 - 00:55:45.194, Speaker C: Teams with extremely qualified people going down those two rabbit holes. That's amazing to me.
00:55:45.232 - 00:55:51.190, Speaker A: So I'm very happy that we've moved that concern out of the protocol. But that said, there are things we.
00:55:51.200 - 00:55:54.526, Speaker C: Want to do at the protocol to make roll ups basically better.
00:55:54.628 - 00:56:00.446, Speaker A: And the main thing around this is roll ups generate a lot of data.
00:56:00.628 - 00:56:04.986, Speaker C: Which they need to post back to the chain and they can execute computations.
00:56:05.098 - 00:56:08.706, Speaker A: Really cheaply, whereas Ethereum doesn't charge that.
00:56:08.728 - 00:56:28.498, Speaker C: Much money to store data on it, but charges a ton of money to execute computation. And this is like the core insights, like why roll ups scale ethereum is they can run all this computation cheaply, pose back data or proofs of this data or state this in the case of ZK rollups and kind of amortize the storage costs, which are less than the computation costs across all their users.
00:56:28.514 - 00:56:30.642, Speaker A: And that leads to lower transaction fees.
00:56:30.786 - 00:56:34.554, Speaker C: So a lot of the scaling roadmap for Ethereum is just how do we.
00:56:34.592 - 00:56:38.598, Speaker A: Create a way for rollups to be able to publish this data to Ethereum.
00:56:38.694 - 00:56:57.410, Speaker C: Cheaper and then that reduces the cost and allows roll ups to either accommodate more transactions or accommodate the same number of transactions at a lower cost. The main way we do this is add basically a data layer to Ethereum. We want to add just some extra place in the protocol where there's no computation running.
00:56:57.480 - 00:57:07.542, Speaker A: There's basically just data that's stored there. And then roll ups can use this to store data. And the other thing that's interesting about rollups is they actually don't need data.
00:57:07.596 - 00:57:16.834, Speaker C: To be stored forever. They usually only need data to be made available for some short amount of time. And when people talk about data availability.
00:57:16.962 - 00:57:20.534, Speaker A: This is what they refer to is this idea that you want the data.
00:57:20.572 - 00:57:29.594, Speaker C: To have been published for enough people to have had the chance to review it and challenge it in the worst case. But that after that the importance of that data diminishes quickly.
00:57:29.712 - 00:57:32.518, Speaker A: So Ethereum scaling solution is to add.
00:57:32.544 - 00:57:34.426, Speaker C: A data layer that not only creates.
00:57:34.458 - 00:57:36.922, Speaker A: More space for data, but also isn't.
00:57:36.986 - 00:57:47.058, Speaker C: Permanent like the history of the chain. And because this doesn't need to be stored forever, you can reduce the costs of storing data there because it's only a temporary cost to the network, it's.
00:57:47.064 - 00:57:48.750, Speaker A: Not a permanent cost to every node.
00:57:48.830 - 00:57:51.218, Speaker C: And so there's two steps we want to take towards that.
00:57:51.304 - 00:57:54.018, Speaker A: The first is called Proto Danksharding and.
00:57:54.104 - 00:57:59.154, Speaker C: Denkrad and Proto Lambda are two of the researchers who worked on this, hence the name.
00:57:59.192 - 00:58:01.030, Speaker F: I was going to ask you about this later, but keep going.
00:58:01.100 - 00:58:04.934, Speaker C: So in this first version of Proto Deng Sharding, the idea is simply that.
00:58:04.972 - 00:58:07.414, Speaker A: We add a relatively small amount of.
00:58:07.452 - 00:58:16.746, Speaker C: Data that's gossiped on the Ethereum network alongside blocks and that's available for roll ups to use. And this data expires after something like.
00:58:16.768 - 00:58:18.266, Speaker A: On the order of a large number.
00:58:18.288 - 00:58:41.326, Speaker C: Of weeks or a small number of months. And by just having this, you can reduce the cost of roll ups because they move from having to store data as part of the full history of the network, which is a higher cost, to being able to just make this data available for a short amount of time and have the network forget it. And so this is the first step towards that. The second step once we have this foundation is what we call Dank sharding.
00:58:41.358 - 00:58:46.114, Speaker A: Or like the full dank sharding is instead of even having all of the.
00:58:46.152 - 00:59:00.290, Speaker C: Nodes download all of this extra data, you can have nodes sample across a larger amount of data and get a really high probabilistic guarantee that all of the data was made available. This is what we call data availability sampling.
00:59:00.370 - 00:59:03.174, Speaker A: So instead of basically having these blobs.
00:59:03.222 - 00:59:29.390, Speaker C: That are about a meg in size, you can create like about ten times bigger ones, but you just sample randomly throughout them and have a subset of networks each sample a subset of the blocks and you get really high guarantees that all the data was actually there and published. And so having this two steps approach basically allows us to first ship this data layer, make sure that this works, that the data actually gets gossiped, that roll ups use it and whatnot, and then we can scale that using cryptography.
00:59:29.470 - 00:59:36.846, Speaker F: I feel like when I first joined the crypto team six months ago, I feel like the slacks is like nonstop about data availability and talking about roll.
00:59:36.878 - 00:59:38.900, Speaker D: Ups and blah, blah, blah stop, son.
00:59:41.130 - 00:59:43.542, Speaker F: No, I'm just kidding. Do you guys have more to say here?
00:59:43.596 - 01:00:07.134, Speaker E: Definitely. I wanted to ask Tim if you have a view of what the end game of blockchain scalability looks like. So once some of these pieces are in place and roll ups can be built and there's all sorts of debate as to what ultimately looks like the unified layer that allows for decentralized computation to truly scale, I'm curious if you have a defined view for what that will look like.
01:00:07.332 - 01:00:11.006, Speaker C: So it's very hard to have long term views in this space, I find.
01:00:11.108 - 01:00:13.182, Speaker A: I do think one thing we get.
01:00:13.236 - 01:00:15.070, Speaker C: With Ethereum moving to proof of stake.
01:00:15.150 - 01:00:17.954, Speaker A: Is we have a very high amount.
01:00:17.992 - 01:00:20.062, Speaker C: Of economic security on the chain.
01:00:20.126 - 01:00:22.526, Speaker A: And if your version of what you're.
01:00:22.558 - 01:00:43.910, Speaker C: Trying to build for a blockchain is something like economic zone on the Internet, that's at the scale of a nation state, you need a very high amount of security on that chain. Because you want it to be able for people to transact in large and small amounts and for it to be somewhat resistance to interference from other parties.
01:00:44.070 - 01:00:49.082, Speaker A: I think Ethereum clearly is on the path there and there's a couple of reasons for that.
01:00:49.136 - 01:00:56.330, Speaker C: We mentioned decentralization and lowering the pace of changes to the protocol so it can become more neutral and appeal to a larger set of stakeholders.
01:00:56.410 - 01:01:00.986, Speaker A: From this kind of social or political almost lens.
01:01:01.098 - 01:01:03.726, Speaker C: Ethereum seems like a really good candidate there.
01:01:03.828 - 01:01:05.650, Speaker A: We were just talking about rollups and.
01:01:05.720 - 01:01:39.066, Speaker C: They basically need somewhere to post data where they have a high assurance that this doesn't get censored and that it has been made available for some amount of time. And I think the thing we get on Ethereum is that by coupling sharding to this validator set you basically get the economic weight of proof of stake beyond this data availability network. Right. And then these roll ups, they can scale the computation. And people now talk about things like L three S, which is a roll up that settles on a roll up, which settles on Ethereum. I can definitely see something like that.
01:01:39.088 - 01:01:41.834, Speaker A: Where you don't need the economic security.
01:01:41.952 - 01:01:44.018, Speaker C: Of nation state resistance for every transaction.
01:01:44.054 - 01:01:49.530, Speaker A: That you make, but you do kind of want the foundation of it to be solid.
01:01:49.610 - 01:01:52.394, Speaker C: A weird way to think about it is like if you open a corner.
01:01:52.442 - 01:02:00.526, Speaker A: Store in a country you don't need the highest economic security, but opening your corner store in a country with relatively.
01:02:00.558 - 01:02:05.122, Speaker C: High security versus vertically low changes like your experience of running that corner store.
01:02:05.176 - 01:02:06.126, Speaker F: Right, totally.
01:02:06.238 - 01:02:07.602, Speaker A: And this is where I think something.
01:02:07.656 - 01:02:11.142, Speaker C: Like an L three that settles on an L two that settles back on an L one.
01:02:11.276 - 01:02:13.702, Speaker A: You can have lower cost stains for.
01:02:13.756 - 01:02:27.478, Speaker C: Use cases that don't require as much security. But having this solid foundation I think is quite important. So I do think it's incredibly valuable to have a diversity of roll ups and of execution styles that are possible and selling on Ethereum.
01:02:27.574 - 01:02:29.926, Speaker A: There's a world where we stop adding.
01:02:29.958 - 01:02:32.650, Speaker C: Stuff to the Ethereum network and we start removing stuff.
01:02:32.720 - 01:02:34.074, Speaker A: You can think of it as, okay.
01:02:34.112 - 01:02:38.346, Speaker C: Now we've become this sort of settlement layer. Do we actually need all of this expressibility?
01:02:38.458 - 01:02:40.350, Speaker A: Could we curtail it a little bit?
01:02:40.500 - 01:02:42.846, Speaker C: Again, hard to speculate on that. It might be hard to make those.
01:02:42.868 - 01:02:45.326, Speaker A: Changes, but I can see definitely Ethereum.
01:02:45.358 - 01:02:48.338, Speaker C: Just stabilizing and becoming this foundation that's used.
01:02:48.424 - 01:04:18.890, Speaker E: Yeah, completely agree. We've always talked about how there is a very high dimensional trade off space for decentralized computation and various different applications require different optimizations and they land in different regions of this space. And so it's nice that we have as many experiments as we have with different approaches for scaling blockchain computation because each of those experiments often lands in different regions of that space. I think one related question, which I think is probably more uniform at least across all of Ethereum is what you see the future of the EVM. Being like one potentially controversial view might be that moving away from the EVM might be a very healthy thing to do in the longer term. Or maybe you continue to support Solidity, Solidity and maybe Viper and other languages that developers directly interact with that is important to potentially preserve backwards compatibility with that, but that ultimately the intermediate representations might be actually much more flexible. And if we do, for example, if we move into a world where we have more efficient proving systems for zero knowledge proofs and we are able to prove, for example, something like the risk five instruction set or there are many approaches along these lines where it is possible to actually put a lot of the computation that's done on a blockchain inside of a CK circuit, that maybe it's actually a good thing to move away from the EVM and onto VMs that are much more optimized for that particular kind of use case and that that might allow us to get to a whole other level of scalability.
01:04:18.890 - 01:04:24.518, Speaker E: So I'm curious what you think about that. What do you think is the future of the EVM, especially in the context of ZK rollups?
01:04:24.634 - 01:04:28.066, Speaker C: Yeah, that's a great question. So I definitely agree with you in.
01:04:28.088 - 01:04:32.850, Speaker A: Terms of what will the average developer on Ethereum use?
01:04:33.000 - 01:04:35.026, Speaker C: That maybe not being EVM in a.
01:04:35.048 - 01:04:37.278, Speaker A: Relatively short time frame.
01:04:37.454 - 01:04:56.954, Speaker C: I think if you talk about swapping the EVM on L One for something else, that gets back to this idea that large changes become harder over time. It's almost like there's this race and there are people working on like a full ZK EVM. Could we actually replace the L One EVM with a ZK EVM and greatly reduce that?
01:04:56.992 - 01:04:58.346, Speaker A: And I think it's almost like a.
01:04:58.368 - 01:05:09.966, Speaker C: Race between the research and the ossification of the protocol. There's a world where this is all possible in two years, three years, and maybe it gets considered and it's the last major upgrade to L One. There's a world where this takes like.
01:05:09.988 - 01:05:16.882, Speaker A: Six years and it just feels not possible anymore. I do think that means being able.
01:05:16.936 - 01:05:30.966, Speaker C: To have these innovations happen on L2 is incredibly important. There's a trade off on L2 because they all talk about EVM compatibility and EVM equivalents. And especially if you have an optimistic roll up, you want to be close to the EVM. But if we can find ways where.
01:05:31.068 - 01:05:33.254, Speaker A: They can add new features or try.
01:05:33.292 - 01:05:46.474, Speaker C: Different things and not scar themselves too much, if L One doesn't adopt it, that's probably the most likely path. I wouldn't say that there's like a more than 50% chance of L One completely strapping out the EVM to something else.
01:05:46.592 - 01:05:49.482, Speaker A: It could happen. But yeah, it gets harder over time.
01:05:49.616 - 01:05:56.782, Speaker E: Do you have a view as to how important it is to have full EVM backwards compatibility for something like a layer two?
01:05:56.916 - 01:05:58.286, Speaker A: Oh, for a layer two, I think.
01:05:58.308 - 01:06:09.218, Speaker C: It'S much less important. And this is like another thing that's kind of interesting even for layer one. I think Ethereum has the view that recent history is the most contentious Bit.
01:06:09.304 - 01:06:09.698, Speaker A: Right?
01:06:09.784 - 01:06:11.474, Speaker C: And it's almost like if you can.
01:06:11.512 - 01:06:15.654, Speaker A: Choose to secure a really long history.
01:06:15.852 - 01:06:19.206, Speaker C: That'S thinner or a larger recent one.
01:06:19.388 - 01:06:21.734, Speaker A: Ethereum seems to want to move towards.
01:06:21.932 - 01:06:31.154, Speaker C: Having more security over the more recent things compared to say, Bitcoin. It's like Bitcoiners will insist about validating every transaction since Genesis.
01:06:31.282 - 01:06:33.594, Speaker A: I think Ethereum's view is that most.
01:06:33.632 - 01:06:37.270, Speaker C: Of the contention that can happen on history is on the recent blocks.
01:06:37.350 - 01:06:38.986, Speaker A: And in practice it's like if I.
01:06:39.008 - 01:06:46.366, Speaker C: Ask all three of you what's the last Ethereum block? We might disagree because there might be some forks right now. If I ask you what's the block from like a day ago?
01:06:46.468 - 01:06:47.342, Speaker A: Pretty sure we'll agree.
01:06:47.396 - 01:07:03.374, Speaker C: And if I ask you the block hash from a year ago, the ODS that we disagree are tiny and also the cost of us disagreeing you're probably too big to reconcile because so much economic activity gets settled, right? You're not going to undo history from like a year ago because there's so much things outside the chain that get settled.
01:07:03.502 - 01:07:07.862, Speaker A: So basically the view is like if you move to a spot where you.
01:07:07.916 - 01:07:14.034, Speaker C: Concentrate all of your validators responsibilities and computing power on verifying the most recent.
01:07:14.082 - 01:07:16.086, Speaker A: History then you can allow people to.
01:07:16.108 - 01:07:18.694, Speaker C: Always validate the changes up to then.
01:07:18.812 - 01:07:20.998, Speaker A: But not necessarily have every node on.
01:07:21.004 - 01:07:23.494, Speaker C: The network do it. I think that's like a likely direction.
01:07:23.542 - 01:07:25.722, Speaker A: Where we just accept that at certain.
01:07:25.776 - 01:07:30.006, Speaker C: Points history is fixed and move our security budget more towards the recent.
01:07:30.038 - 01:08:06.066, Speaker E: That makes sense. A separate but related architectural question. I was curious to get your take on how viable it is to build some of these pieces in a very modular way. So like one view might be that you can actually build a data availability layer that's completely separate even from Ethereum, that roll ups that are building on top of Ethereum might leverage versus having an approach that's much more vertically integrated where you're much more opinionated about how the pieces fit together. Maybe this is something like tank sharding ultimately. And I'm curious of your take of the sort of the relative merits of each approach.
01:08:06.178 - 01:08:08.806, Speaker A: So obviously you can do it in.
01:08:08.828 - 01:08:16.506, Speaker C: A more modular way and people do it. So again, it's like the question of do you want to have the economic security of the L one backing your.
01:08:16.528 - 01:08:18.682, Speaker A: Data availability layer as well?
01:08:18.736 - 01:08:26.250, Speaker C: And to me you can think of it as like a cost versus quality consideration. You can have something which just has lower security requirements.
01:08:26.330 - 01:08:29.402, Speaker A: And in that case, yes, maybe assuming.
01:08:29.546 - 01:08:32.714, Speaker C: Your other data availability layer is significantly.
01:08:32.762 - 01:08:38.226, Speaker A: Cheaper than Ethereum and offers a lower amount of security, then yeah, I think.
01:08:38.248 - 01:08:39.534, Speaker C: It is totally reasonable.
01:08:39.662 - 01:08:41.474, Speaker A: The challenge is like if you start.
01:08:41.512 - 01:09:00.982, Speaker C: Integrating it's very hard then to untangle things. That is probably the flip side of this. On Ethereum, people always talk about modularizing, the EVM. This is like this idea, oh, you could put out the EVM of guests or something and just have people work just on the EVM and use that. But if you bring it back to this idea of security, it's very hard to do that because all of the.
01:09:01.036 - 01:09:05.226, Speaker A: Connections need to be secure. And we've done it successfully with the.
01:09:05.248 - 01:09:20.494, Speaker C: Proof of stake chain because we did it from the start. But it becomes really hard to decouple these things. And for example, if you look at the EVM on the ethereum mainnet, we have these execution rules that are pretty complex now around like if an account has already been touched in the transaction, it costs less to access it again.
01:09:20.532 - 01:09:22.766, Speaker A: And whatnot and these things, they make.
01:09:22.788 - 01:09:28.190, Speaker C: It harder to think of the EVM as just a set of instructions because it's not right. It's very dependent on this context.
01:09:28.350 - 01:09:30.258, Speaker A: And the thing is, those rules are.
01:09:30.344 - 01:09:51.398, Speaker C: Mostly there for a reason because you reach these problems with scale if you want the network to stay healthy as there's more scale. So I guess you can start modular. As you gain really large amounts of stake or value on your network that you're dependent on, it becomes much harder to decouple things. If your thesis is things are going to just stay modular forever, it's a.
01:09:51.404 - 01:09:53.174, Speaker A: Bit harder to see that reach like.
01:09:53.212 - 01:10:00.586, Speaker C: A really high level of adoption of security because you're going to have to make trade offs. You start a clean state today, but in five years you will have to do things and you will have to.
01:10:00.608 - 01:10:08.042, Speaker A: Couple things because of some weird mispricing that you thought of. And then you're back to a similar design of Ethereum.
01:10:08.106 - 01:10:15.370, Speaker C: Ethereum is always like started with the VM, then you add the consensus, then you add the data. You might imagine somebody starting with the data and then they add like consensus.
01:10:15.450 - 01:10:17.098, Speaker A: And it slowly be that.
01:10:17.204 - 01:10:23.106, Speaker C: I don't want to be dismissive or think that it's not going to happen at all because again, the space will humble you.
01:10:23.208 - 01:10:25.154, Speaker A: But I think this stuff always sounds.
01:10:25.192 - 01:10:27.746, Speaker C: So much cleaner in theory than what you like.
01:10:27.848 - 01:11:01.134, Speaker E: And it may be that it's something that just can happen over time as the interfaces and the abstractions become a little bit more clear and as we understand what each of these modules are actually supposed to do. So it's actually possible to have clean specifications that separate them. And in the meantime, maybe the only way really at the moment is to actually build the thing and it means that it'll likely be entangled and vertically integrated. But at the very least you have more freedom to explore the design space because you don't have to define these rigid interfaces that presumably would be harder to change once you set them absolutely.
01:11:01.252 - 01:11:06.382, Speaker C: Around this idea of defining interfaces. One huge one in Ethereum Land is the whole idea of mev.
01:11:06.446 - 01:11:06.914, Speaker A: Right.
01:11:07.032 - 01:11:26.738, Speaker C: Mev in the past two years went from like a fringe thing that a few people were looking at to now being kind of at the center of every protocol design consideration. Like the whole Sharding specification was simplified because we assumed that there is mev possible and people will be incentivized to download all the Shard blobs and whatnot.
01:11:26.834 - 01:11:29.126, Speaker A: So it's really interesting how if the.
01:11:29.148 - 01:11:31.306, Speaker C: Space stops evolving, then yes, hopefully you.
01:11:31.328 - 01:11:34.662, Speaker A: Get really clean interfaces and people similarly.
01:11:34.726 - 01:11:42.794, Speaker C: Seem to think like, oh, mev is like the last one of these. It's like the last big no way. Yeah, exactly. I'm skeptical. Humans innovating.
01:11:42.842 - 01:11:44.458, Speaker F: Not going to stop there. Totally.
01:11:44.554 - 01:11:44.862, Speaker C: Yeah.
01:11:44.916 - 01:11:46.030, Speaker E: Not the end of history.
01:11:46.180 - 01:11:48.862, Speaker C: Yeah, exactly. But it is interesting how these things.
01:11:48.916 - 01:11:54.126, Speaker A: Just like, once you've reached some level of scale, then something that was not.
01:11:54.148 - 01:11:56.590, Speaker C: A problem becomes one because the incentives.
01:11:56.670 - 01:11:58.898, Speaker A: To optimize or attack that part of.
01:11:58.904 - 01:12:00.430, Speaker C: The systems are just much greater.
01:12:00.510 - 01:12:01.986, Speaker A: And this is a really interesting thing.
01:12:02.008 - 01:12:12.726, Speaker C: About data availability, is we haven't really seen data availability systems live with like billions at stake on them and I think for sure that will drive the design of them.
01:12:12.748 - 01:12:14.086, Speaker A: And once we see that, I think.
01:12:14.108 - 01:12:15.286, Speaker C: I would be much more comfortable in.
01:12:15.308 - 01:12:16.806, Speaker A: Saying, like, okay, what does this look.
01:12:16.828 - 01:12:17.782, Speaker C: Like five years from now?
01:12:17.836 - 01:12:20.054, Speaker A: But there might be something that comes.
01:12:20.092 - 01:12:21.258, Speaker C: Up from there and I don't want.
01:12:21.264 - 01:12:23.866, Speaker A: To speculate what that is. Yeah.
01:12:24.048 - 01:13:05.766, Speaker D: So let's talk about the new consensus protocol happening after the merge a little bit because it's this very interesting hybrid of a longest chain style protocol and so called BFT type, Byzantine fault tolerant type protocol. And it's kind of bespoke. I mean, it's not really copy and pasted either from any other project or from the academic literature. And there's been, as one would expect, various bugs popping up and the bugs get squashed and that process has continued. But even maybe a few months ago, I saw there was joint work between researchers at Stanford and the Ethereum Foundation around so called avalanche and balancing attacks. I'd love your update on is the consensus protocol viewed as pretty stable and pretty battle tested at this point, or is it still being iterated on?
01:13:05.868 - 01:13:08.134, Speaker C: So for sure it is still being iterated on.
01:13:08.172 - 01:13:10.802, Speaker A: I think not only to fix potential.
01:13:10.866 - 01:13:12.506, Speaker C: Issues, which I do think on that.
01:13:12.528 - 01:13:19.258, Speaker A: Front we are in a pretty stable place. But I don't think the Ethereum research community feels like the current version of.
01:13:19.264 - 01:13:21.482, Speaker C: Proof of stake is its end state.
01:13:21.616 - 01:13:22.106, Speaker A: That's it.
01:13:22.128 - 01:13:28.106, Speaker C: I don't think there's vulnerabilities that are like critical vulnerabilities in the protocol or anything that would put the network at risk.
01:13:28.138 - 01:13:42.046, Speaker A: And the design is made to be quite resilient to those things. Right. And the amounts also required to attack the protocol are quite high. So, yeah, in terms of just like the soundness and the security, yes, there'll.
01:13:42.078 - 01:13:48.898, Speaker C: Probably still be some issues, but I don't think we're in a spot where thinking through critical issues and things that would destabilize the entire proof of stake chain.
01:13:48.994 - 01:13:53.366, Speaker A: With regards to proof of stake itself, yes, there are many things we want.
01:13:53.388 - 01:14:14.042, Speaker C: To keep improving and one that Vitalik talks a lot about recently is this idea of single thought finality or like gradual finality. So one benefits that we get in proof of stake that we don't have in proof of work is this concept of finality where we get a very clean height in the chain where we have very clean bounds on like, what's the economic cost to rewrite history past that.
01:14:14.096 - 01:14:16.126, Speaker A: And we kind of assume that no.
01:14:16.148 - 01:14:27.282, Speaker C: One would want to burn that amount of money. Similarly to how in proof of work, you've assumed that no attacker will have more than half the hash rate for an extended period of time. And so we have this bound where.
01:14:27.336 - 01:14:29.758, Speaker A: We say, okay, past this point, we're.
01:14:29.774 - 01:14:31.422, Speaker C: Good if we don't expect reorgs.
01:14:31.486 - 01:14:33.378, Speaker A: And if somebody were to reorgs, this.
01:14:33.384 - 01:14:41.590, Speaker C: Is how much they'd burn. We don't have like a gradual way to get there. It's really like a binary, which is kind of weird because in a way you would want the block right before.
01:14:41.740 - 01:14:44.678, Speaker A: To be like almost as finalized as this one.
01:14:44.764 - 01:14:57.050, Speaker C: So this is one big change that we'll probably see in the next few years is can we distribute this economic finality more gradually rather than having it accumulate all in one shot? That's one big part of it.
01:14:57.120 - 01:14:59.194, Speaker A: The other big part is this idea.
01:14:59.232 - 01:15:14.282, Speaker C: Of proposer builder separation. So we briefly touched on mev and today there's basically like a whole industry that's outside of the protocol that's dedicated to finding the best possible arrangements of transactions.
01:15:14.426 - 01:15:16.138, Speaker A: And today the way this is done.
01:15:16.164 - 01:15:24.526, Speaker C: Is this network of people, we usually call them searchers. They kind of come up with the best potential set of transactions. They bundle them together into a block.
01:15:24.638 - 01:15:27.346, Speaker A: And this block gets proposed to a.
01:15:27.368 - 01:15:28.674, Speaker C: Miner today and it'll be a validator.
01:15:28.722 - 01:15:30.966, Speaker A: After the merge, the validator or the.
01:15:30.988 - 01:15:59.466, Speaker C: Miner who receives the block trusts that the block is actually valid and that they'll actually release it. And we dislike that this happens outside the protocol. So one other big change we want to make to proof of stake is this idea of proposal builder separation where those two roles would be filled in the protocol and having some guarantees on both sides that a validator cannot front run the person who sent them a block. But then the person who sends them a block cannot grieve the validator by sending them an invalid block or never revealing the contents.
01:15:59.578 - 01:16:01.134, Speaker A: So those are like two ways we.
01:16:01.172 - 01:16:02.746, Speaker C: Imagine proof of stake changing.
01:16:02.858 - 01:16:04.094, Speaker A: I don't think we're at the end.
01:16:04.132 - 01:16:11.986, Speaker C: Of how this looks like. And like you said, there's no literature for this and there's no other thing we can copy. Unfortunately for most.
01:16:12.008 - 01:16:14.706, Speaker A: Of this stuff. When there is, we do copy it.
01:16:14.728 - 01:16:16.574, Speaker C: To be fair, I've been many innovations.
01:16:16.622 - 01:16:19.178, Speaker A: From research labs, other blockchains or whatnot.
01:16:19.214 - 01:16:26.694, Speaker C: That if they make sense for Ethereum, we are happy to incorporate those. But oftentimes we end up running into problems that people haven't run into before.
01:16:26.732 - 01:16:29.906, Speaker A: And we need to find solutions for them. That was great. Thanks Dan.
01:16:30.018 - 01:17:16.706, Speaker F: This is really interesting. I do want to pro because we have a very unique combination in this room, in this particular conversation on just models for research. You already alluded to this just now, but earlier you were talking about how there's this kind of pipeline like research to production and one topic that comes up a lot and we're thinking about this even in organizing our own research lab, which Tim obviously heads up, and we have an engineering function as well. And I used to work at Xerox Parks. I have a lot of thoughts too on how these collaborations come about. There was a thread from Peter at Ethereum on Twitter recently and our own Elena Berger pointed this out, that some core devs have voiced urgency around the division between the research and engineering teams. And she had a question at what layer of the stack is this most apparent? We'd love to hear from you your thoughts on how this could be improved.
01:17:16.818 - 01:17:18.280, Speaker C: Yeah, that's a great question.
01:17:18.730 - 01:17:22.054, Speaker A: It is really interesting because there's two.
01:17:22.092 - 01:17:34.414, Speaker C: Levels at which the protocol needs to be safe is one, like the spec needs to be sound and this is where a lot of the research work happens. And then two, like the implementations of the spec need to work as expected. And this is where you often see.
01:17:34.452 - 01:17:37.294, Speaker A: The divide and less so frequently, but.
01:17:37.332 - 01:17:50.302, Speaker C: Researchers thinking the job is done when there's a spec for it. But then people like Peter on the get team, he has to implement the whole thing and it's not as clean as in the paper when you're actually writing the code in adversarial conditions.
01:17:50.366 - 01:17:51.842, Speaker A: This is definitely part of it.
01:17:51.896 - 01:17:54.146, Speaker C: Over time, the fact that we've now.
01:17:54.248 - 01:17:57.574, Speaker A: Literally merged the live code for the.
01:17:57.612 - 01:17:59.814, Speaker C: Beacon chain and the execution layer has.
01:17:59.852 - 01:18:01.990, Speaker A: Definitely made folks on the research team.
01:18:02.060 - 01:18:05.506, Speaker C: More aware of the implementation intricacies.
01:18:05.618 - 01:18:08.134, Speaker A: And similarly, if showed to people on.
01:18:08.172 - 01:18:22.350, Speaker C: The implementation team, the research can work. Some of this stuff actually can be used in production and I think we had like a mini version of this with 1559 that it can be hard to appreciate it if you're not a researcher, if you don't see it working.
01:18:22.500 - 01:18:24.366, Speaker A: And I don't know that there's like.
01:18:24.388 - 01:18:27.342, Speaker C: A single solution beyond getting the people.
01:18:27.396 - 01:18:33.966, Speaker A: To spend more time on the other side and knowing more about it. And I mean, one recent example, we.
01:18:33.988 - 01:18:47.570, Speaker C: Were talking about proto Dank Sharding, and it has like a similar mechanism to EIP 1559 for how you price the blob. So if more people want to send transactions, you raise the price of Blob transactions and then if less people want to send it, you lower the price of the data on the Blobs.
01:18:47.650 - 01:18:49.734, Speaker A: And there was some question about where.
01:18:49.772 - 01:18:55.378, Speaker C: Should the value, like the base fee for this basically be stored? And on the research side they see the full roadmap and they think they'd.
01:18:55.394 - 01:18:56.854, Speaker A: Want to move this to be part.
01:18:56.892 - 01:19:08.486, Speaker C: Of the ethereum state because over time we might want to store more information about data there. From the implementation side. It's like, well, we already have a base fee right in the block header. And when we get a new transaction.
01:19:08.518 - 01:19:10.218, Speaker A: In the mem pool, you do a.
01:19:10.224 - 01:19:13.930, Speaker C: Bunch of checks against the block header to see if it's valid, including checking.
01:19:14.090 - 01:19:16.426, Speaker A: Does the amount of gas time relative.
01:19:16.458 - 01:19:20.442, Speaker C: To the base fee make this transaction have enough funds to pay for its execution?
01:19:20.586 - 01:19:22.926, Speaker A: So this is like a mini example.
01:19:23.108 - 01:19:25.718, Speaker C: And we moved this value to the block header.
01:19:25.754 - 01:19:28.146, Speaker A: Now, even though it's less elegant in.
01:19:28.168 - 01:19:29.458, Speaker C: A research way, it's one of the.
01:19:29.464 - 01:19:33.954, Speaker A: Things where it just makes the implementation of it much simpler because it works.
01:19:33.992 - 01:19:36.722, Speaker C: With the patterns in the actual code base.
01:19:36.856 - 01:19:38.198, Speaker A: And I don't know that there's like.
01:19:38.204 - 01:19:40.614, Speaker C: A way to brute force or speed run this.
01:19:40.652 - 01:19:43.862, Speaker A: You just need people to start to get that right.
01:19:43.916 - 01:19:47.238, Speaker C: Where does this stuff live in the actual production code?
01:19:47.324 - 01:19:51.670, Speaker A: And that just looks different than when you specify the high level spec for it.
01:19:51.740 - 01:20:25.842, Speaker F: I was going to just say that Peter's quote which I thought was really funny, I shouldn't laugh, but it was very direct quote. I'm extremely frustrated when a research proposal says, quote, everything's figured out. It's just engineering now, end quote. And I chuckled when I saw that Elena shared that because that's literally the crux of the types of debates we used to have at you know and the way they solved that is actually by not dividing the two parts, they didn't silo them. They actually ended up with the model where they were embedded together and so that was like a way that they ended up approaching that for a lot of the things that they were building.
01:20:25.976 - 01:20:38.546, Speaker C: That's a great point actually. And we do do that more and more. So, to take guess as an example, we've talked a lot about scaling stuff for l Two S. There is a bit of scaling we can do on l One as well. And this is mostly through like, statelessness.
01:20:38.658 - 01:20:42.714, Speaker A: And this has to do with not having every node store all of the.
01:20:42.752 - 01:20:51.978, Speaker C: State on the network, but only the bits of the state they're interested in. And to do this we need a different structure for the state. So right now you can think of.
01:20:52.064 - 01:20:59.566, Speaker A: What we use to store all the ethereum state as like the shape of a Christmas tree. It's like high and narrow and if.
01:20:59.588 - 01:21:02.586, Speaker C: You want to store bits of it, it's almost like you need to cut like a slice of the tree.
01:21:02.618 - 01:21:03.914, Speaker A: It's like this long slice.
01:21:04.042 - 01:21:08.706, Speaker C: We'd want to move to something that's more like a bush that's like short and wide and so you only need.
01:21:08.728 - 01:21:13.486, Speaker A: To keep a smaller bit. And this is the type of thing that is very clean in the it's.
01:21:13.518 - 01:21:25.126, Speaker C: Like, well, you know, you just move from this data storage to this data storage, but that for something like Geth. It's like literally rewriting every assumption they have about data retrieval from the state. So they have a guy on their.
01:21:25.148 - 01:21:29.606, Speaker A: Team, Guillaume, who that's literally his job. He's like working with the researchers on.
01:21:29.628 - 01:21:31.850, Speaker C: That, prototyping it in Geth and thinking.
01:21:31.920 - 01:21:34.922, Speaker A: Through like, okay, how do we take this face level?
01:21:34.976 - 01:21:37.142, Speaker C: Pretty simple change from a research perspective.
01:21:37.206 - 01:21:39.146, Speaker A: Everybody understand what the old tree looks.
01:21:39.168 - 01:21:40.314, Speaker C: Like, what the new tree looks like.
01:21:40.352 - 01:21:41.994, Speaker A: Why the new tree is better, but.
01:21:42.032 - 01:21:43.834, Speaker C: How do you actually implement that in the code?
01:21:43.872 - 01:21:46.510, Speaker A: And yeah, for sure, having people across.
01:21:46.580 - 01:21:48.074, Speaker C: Those teams is super valuable.
01:21:48.122 - 01:21:52.222, Speaker D: A picture on the whiteboard can definitely be worth at least a thousand lines of code. No doubt about it.
01:21:52.356 - 01:21:53.134, Speaker A: Yes.
01:21:53.332 - 01:22:01.970, Speaker F: Hey, our walls at the Palo Alto Center, the entire wall was a whiteboard. Not just like a whiteboard that was standing like a third of the space. Anyway, Ali, what were you about to say?
01:22:02.040 - 01:22:08.674, Speaker E: I was just going to ask, how often is it the case that feedback goes upstream from the engineering team back to the researchers that causes a big.
01:22:08.712 - 01:22:09.734, Speaker A: Change in the spec?
01:22:09.852 - 01:22:11.702, Speaker F: Yeah, I was wondering the same thing.
01:22:11.836 - 01:22:49.490, Speaker C: I mean, you could argue like, the entire merge design, is that right? So the entire first version of Ethereum 20, the whole transition was like, we're literally going to build new execution environments and we're going to get people to transition to that. And then there was a feedback, well, we already have this thing that runs the EVM and it's called Geth and everybody uses it. It doesn't have bugs. Geth is short for go ethereum. It's the Go programming language implementation of the Ethereum protocol on the current proof of work chain and after the merge, the execution layer side. So it's basically the software that people use to connect to Ethereum. So we change the entire spec to.
01:22:49.640 - 01:22:52.350, Speaker A: Basically reuse all of that software.
01:22:52.430 - 01:22:55.426, Speaker C: I think that's like a pretty massive one for minor stuff.
01:22:55.528 - 01:22:57.998, Speaker A: I do think it happens more and more.
01:22:58.104 - 01:23:08.134, Speaker C: I just mentioned this example around VIP 4844, I think. There's another one, for example, where a lot of the things around Statelessness that are hard have to do with self.
01:23:08.172 - 01:23:11.430, Speaker A: Destruct and removing self destruct is quite tricky.
01:23:11.510 - 01:23:13.578, Speaker C: But one engineering fix that's easy is.
01:23:13.584 - 01:23:14.954, Speaker A: You can just raise the gas cost.
01:23:15.072 - 01:23:18.220, Speaker C: To basically infinity over time or something like that.
01:23:18.750 - 01:23:22.618, Speaker A: Ideas like that, I think more and more flow through and I think the.
01:23:22.624 - 01:23:24.798, Speaker C: Fact that the two systems are in production helps a lot.
01:23:24.884 - 01:23:25.134, Speaker A: Right.
01:23:25.172 - 01:23:33.214, Speaker C: That we can look at the beacon chain, look at its actual behavior and its actual implementation and decide to make changes to that. Obviously it's not perfect and it never.
01:23:33.252 - 01:23:36.458, Speaker A: Will be, but definitely a better spot than like two, three years ago. Amazing.
01:23:36.564 - 01:24:13.578, Speaker F: Okay, so do you have any thoughts on sort of the foundation model? Elena had had a question about where the Ethereum Foundation gets its legitimacy. Sam Ragsdale and our team asked where does the future of public goods funding look like? And I'm just trying to tie these themes together for the history of an evolution of open source. I've very closely studied the Linux Foundation, talked a lot to Jim. When you think of the parallels like Linux Torvalds and then you have Vitalik, then you have the Ethereum Foundation, you have Linux Foundation and that's been a very successful example of a foundation. And I wonder if you have any top of mind thoughts, things you're thinking about along the notion of the foundation model and or public goods funding as part of that.
01:24:13.664 - 01:24:14.906, Speaker A: So I spend a lot of my.
01:24:14.928 - 01:24:21.870, Speaker C: Time thinking about how do we fund the base layer like the core protocol because that's where most of my efforts is spent and where I see most people working on.
01:24:21.940 - 01:24:23.406, Speaker A: And I think the EF has done.
01:24:23.428 - 01:24:35.810, Speaker C: An amazing job there. It supported teams through very brutal times. It's easy to, in hindsight, see this as all self evident, but there were many times where Ethereum could have just been a failed experiment. Right.
01:24:35.880 - 01:24:38.658, Speaker A: I think the foundation was incredibly good.
01:24:38.744 - 01:24:42.294, Speaker C: To just stick around throughout the times and support not only people working there.
01:24:42.332 - 01:24:44.774, Speaker A: But just all of the contributors at.
01:24:44.812 - 01:24:54.378, Speaker C: All levels of the stack. I mean, people talk about the Uniswap grant. The foundation gave pretty massive east denominated programs to client teams a few years ago.
01:24:54.464 - 01:24:56.886, Speaker A: So I think that's all been incredibly.
01:24:56.918 - 01:24:59.546, Speaker C: Helpful and has helped bring Ethereum to where it is today.
01:24:59.728 - 01:25:05.106, Speaker A: I think the thing that we're hitting on Ethereum is just the EF's relative.
01:25:05.158 - 01:25:15.098, Speaker C: Size to the ecosystem is quite small, frankly. I don't have the numbers super quick, but the EF put out a report I think was in April where the treasury is about on the order of a billion might be like between one.
01:25:15.124 - 01:25:17.074, Speaker A: And two, which is not nothing, but.
01:25:17.112 - 01:25:27.382, Speaker C: Ethereum is worth at least 100 x that. Other projects on Ethereum have a treasury of comparable size and many funds investing in Ethereum have funds larger than this.
01:25:27.436 - 01:25:31.990, Speaker A: So it's interesting because you kind of move to spots where capital is definitely.
01:25:32.060 - 01:25:34.386, Speaker C: Not the differentiator of the EF.
01:25:34.498 - 01:25:41.414, Speaker A: Yep, very good know the EF has done a really good job in trying to find thoughtful ways to signal both.
01:25:41.452 - 01:25:43.494, Speaker C: Within the community and outside of blockchain.
01:25:43.542 - 01:25:45.034, Speaker A: To the rest of the world why.
01:25:45.072 - 01:25:47.082, Speaker C: Ethereum is important, what type of things.
01:25:47.216 - 01:25:49.946, Speaker A: We think we should invest in and try to build.
01:25:50.048 - 01:25:52.154, Speaker C: But one other project I've been trying.
01:25:52.192 - 01:25:58.238, Speaker A: To help with over the past few months is this thing called Protocol Guild where we want people working on the.
01:25:58.244 - 01:26:05.106, Speaker C: Protocol to be funded ideally for a very long time and ideally also independent of the entities they work with.
01:26:05.208 - 01:26:07.586, Speaker A: So one thing that the EF can.
01:26:07.608 - 01:26:09.458, Speaker C: Do, it gives grants to individuals, it.
01:26:09.464 - 01:26:12.478, Speaker A: Gives grants to entities, but it doesn't.
01:26:12.494 - 01:26:15.086, Speaker C: Really scale to pay every single contributor.
01:26:15.118 - 01:26:17.666, Speaker A: To Ethereum even though a lot of.
01:26:17.688 - 01:26:28.006, Speaker C: The value is in the actual humans and not just the orgs, right? There's a lot of people who we want to make sure they keep contributing regardless of where they work. And so to kind of summarize the.
01:26:28.028 - 01:26:30.074, Speaker A: Idea with Protocol Guild is trying to.
01:26:30.112 - 01:26:39.626, Speaker C: Build some on chain system where we can identify protocol contributors to Ethereum. Researchers generally just like people we want to make sure keep contributing and then.
01:26:39.728 - 01:26:42.266, Speaker A: Have projects in the ecosystem be able.
01:26:42.288 - 01:26:44.494, Speaker C: To just direct tokens towards that so.
01:26:44.532 - 01:26:45.838, Speaker A: That you can kind of think of.
01:26:45.844 - 01:26:50.782, Speaker C: That as like upside potential in the entire ecosystem that they're building.
01:26:50.916 - 01:27:00.770, Speaker F: That's actually not that dissimilar to the Linux Foundation from a traditional kind of trad point of view with their corporate partnerships. Only in your case you're doing it with different entities in a more decentralized way.
01:27:00.840 - 01:27:10.454, Speaker C: I think stuff like that is really exciting. I mean, this is not the only initiative. Optimism is working on retroactive public goods funding. Gitcoin has always been like a major supporter of this.
01:27:10.492 - 01:27:14.274, Speaker A: So I think if we can try a couple of these models and ideally.
01:27:14.322 - 01:27:20.754, Speaker C: Find something that is long term sustainable and that's independent of a single entity, that's really the goal.
01:27:20.882 - 01:27:37.630, Speaker F: That's the thing. One question I had for you is because it's not credentialist, it's obviously not credentialist. This is a new space. There's no quote credentials, you have to show your work. So how do people kind of learn in a decentralized.org or rise up? Like is it just the work they do and their articulation or what is it?
01:27:37.700 - 01:27:39.790, Speaker C: I think it's definitely a mix.
01:27:40.610 - 01:27:44.430, Speaker A: It's hard to speak for all the others, but for me I started out.
01:27:44.500 - 01:27:54.834, Speaker C: Working full time in crypto. I was a product manager at Consensus working on their protocol team. And so I got to start attending the Cordev's calls and whatnot. Even if you're quite smart, there's so.
01:27:54.872 - 01:27:57.174, Speaker A: Many kind of non obvious things about.
01:27:57.212 - 01:28:10.982, Speaker C: How this space works that just like spending time and learning by Osmosis is probably a good start. I spent the first many months of listening to Cordev's not saying anything and then I think this was kind of a hack for me in a way.
01:28:11.036 - 01:28:12.602, Speaker A: Is these calls can get a bit.
01:28:12.656 - 01:28:33.198, Speaker C: Procedural and sometimes boring. So I started live tweeting them. I was like not everybody has like 2 hours every two weeks to listen to all this. People do sort of care about what's happening on Ethereum and if I have to live tweet them then I kind of have to pay attention because I need to tweet what's happening. I started doing that and I did it for a year or two, and.
01:28:33.204 - 01:28:34.478, Speaker A: I think there was not a lot.
01:28:34.484 - 01:28:48.466, Speaker C: Of people on the call that were basically not engineers or researchers. And so just in terms of opportunity cost, it's better for me to spend my time running the calls than for an engineer who could just write code instead. So that sort of happened a bit.
01:28:48.488 - 01:28:49.842, Speaker A: Naturally at that point.
01:28:49.896 - 01:28:57.446, Speaker C: There was definitely appetite in the community to better understand what's happening at the protocol level, what's being debated and whatnot. So I just started spending more of.
01:28:57.468 - 01:28:59.382, Speaker A: My time on that, and I started.
01:28:59.436 - 01:29:05.146, Speaker C: Writing these blog posts, giving these talks, trying to explain what's being considered for ethereum, what are the trade offs, what.
01:29:05.168 - 01:29:07.114, Speaker A: Are people discussing, and I think that.
01:29:07.152 - 01:29:19.726, Speaker C: People found that interesting. So it's kind of my path. It definitely is a bit different on the more technical side, but I think this space is new enough that there's so many niches of things to dig in and explore and expand that if.
01:29:19.748 - 01:29:23.806, Speaker A: You find something you like and it grows, then it's not super hard to.
01:29:23.908 - 01:29:25.854, Speaker C: Grow the scale of your work because.
01:29:25.972 - 01:29:28.026, Speaker A: Everything'S so new to kind of just recap.
01:29:28.058 - 01:29:54.774, Speaker F: I mean, first of all, there was a gap and an opportunity that was really unique to you because you were not researcher or engineer. So you filled that gap, plus you had the fit. So that's one idea. The second is this idea of kind of showing your work, like what you said about live tweeting and being engaged and kind of being throughout that process. I think that's another really key idea, and it's something we've definitely talked about a lot. The third thing I want to just say is just because it wasn't research or engineering, it just shows how all kinds of skills are important in these communities. We once did a podcast years ago.
01:29:54.774 - 01:30:15.742, Speaker F: It's one of my all time favorite podcasts with Michael Rogers and Nadia Iqbal. Two of my friends who both studied can participate in the history and evolution and culture of open source. And one of the things we talk about is how there's such an important role for onboarding. And while this is not onboarding, it is a way of bringing people along, both the live tweeting and the way that those calls are facilitated.
01:30:15.806 - 01:30:17.934, Speaker C: Yeah, and I do think the path.
01:30:17.982 - 01:30:22.690, Speaker A: Is less clear, the less technical you are.
01:30:22.760 - 01:30:41.146, Speaker C: If you're an engineer or a researcher, if you're like a zero knowledge researcher and you're wondering what to do on a theory, very clear path, someone will send you a list of 20 open problems. You've got to work for five years, and the farther away you are from that, the more murky the problems are. And sometimes it can just take more time to find what's the right fit. But, yeah, I 100% agree that we.
01:30:41.168 - 01:30:44.922, Speaker A: Need people to coordinate and help shape the space.
01:30:45.056 - 01:31:06.674, Speaker F: One thing I was wanting to ask you about, and this is kind of a funny question, but I noticed it's cool how, for instance, you guys have people's names from the Ethereum Foundation and the name of products and protocols. So, for instance, like Dank sharding for Dankrad or Proto as well. And there's a few that are sort of named after people. And I wanted to ask you, how did that come about?
01:31:06.792 - 01:31:17.526, Speaker C: Yeah, that's a great question. As you're saying them, I realize this happens more on the consensus layer and proof of stake side than it does on the proof of work.
01:31:17.628 - 01:31:18.514, Speaker F: How funny.
01:31:18.642 - 01:31:29.350, Speaker C: Yeah, and I guess part of the reason is maybe because there was much more new stuff that got invented for the proof of stake side, especially recently.
01:31:29.430 - 01:31:30.682, Speaker A: In the past couple of years.
01:31:30.816 - 01:31:48.510, Speaker C: So yeah, you mentioned Dank Sharding, which is obviously Dankrad and proto Dankshardine, which is proto Lambda's take on Dankrad's dank Sharding specification. So yeah, I think people work on this stuff and when they come up with something new, sometimes Vitalik will jokingly call it that and then it sticks.
01:31:48.850 - 01:31:59.780, Speaker F: Oh, I was wondering where that kind of came from. I mean, it kind of also reminds me of when ecologists discover a new bird or a new planet and suddenly their name is a little bit in it, which is kind of cool.
01:32:00.470 - 01:32:17.046, Speaker C: Yes, and there's a funny thing there. The beacon chain, one of the data structures is like a proto array. And I actually thought that this was like some fancy data structure I didn't know about, but it's actually now something that Proto put together as well. That's so funny, but it sounded so real.
01:32:17.148 - 01:32:17.462, Speaker A: Exactly.
01:32:17.516 - 01:33:12.806, Speaker F: When I first heard proto Dank charting, I'm like, OOH, proto, what does that mean? Because I literally thought it meant like proto as in pre versus proto, the name proto, which is kind of funny. So just one other quick note along these lines. Is there a thoughtfulness behind how you do think about things like credit as well as credibility and credentialism within a decentralized community like this? And what I mean is, to be more specific, it's interesting because anytime you have a singular kind of centralized project this is true even of very top down managed products like a Hollywood movie, which has, like, a credits. Role and real. Here you're working in a decentralized way and in many ways, a lot of the work is kind of transparently recorded and commits and the code itself, the history. But in other ways there's so much that happens off chain and that isn't recorded. And I wonder if that ever becomes an issue because in any large collaborative enterprise, this is often top of mind for creatives.
01:33:12.806 - 01:33:15.414, Speaker F: And by the way, I do think of developers of creatives.
01:33:15.542 - 01:33:37.490, Speaker C: Yeah, no, that's an amazing question. We definitely think about it and in a very kind of different way than I think most other fields and it's interesting for crypto because it merges all these different fields. Right. You obviously have the big software and open source bit but you also have a lot of people with more of an academic background and there credit and citation is like a much bigger deal.
01:33:37.560 - 01:33:40.500, Speaker F: And it has frameworks existing for that kind of thing. Exactly.
01:33:40.870 - 01:34:45.574, Speaker C: I think publishing is a very interesting one where there's definitely some interesting tension there where researchers on Ethereum obviously recognize that it's a pretty unique space and we have constraints but it can't be completely different from traditional academia otherwise we just don't get those people contributing. I'll take an example, some Stanford researchers put out a paper about some new proposal for proof of stake design and if they want to be academics and publishing is kind of part of what you have to do to grow as an academic then obviously you don't want them to not be able to continue their career. There definitely are things where as the Ethereum community have some preferences and try to nudge people towards there. So for example, EIPS, which are like proposed changes to Ethereum all have to be part of the public domain. There's authors associated with them but if you want to propose a change to Ethereum, sure, if it gets in, your name will be on it and we'll stay there forever. But you can't copyright that for example. So it's something where we as a community have these values that recognize credit.
01:34:45.612 - 01:34:48.150, Speaker A: In a way but may not fit with everything else.
01:34:48.300 - 01:34:54.610, Speaker C: I think the other part that's interesting is credit in the form of attribution whatnot? But the other one is in the form of recognition.
01:34:54.770 - 01:34:56.150, Speaker F: Yes, I want to hear more.
01:34:56.220 - 01:35:38.006, Speaker C: So on our team at the EF, my team is called Protocol Support there and the main thing we do is we run these core devs calls and whatnot but we do a bunch of other things and Trent Van Epps, he's like kind of the master at this. He spends a lot of time thinking about what are things we can do to recognize the work of people that worked on the Protocol when they launched the Beacon Chain, for example, he put together an entire physical book of people's anecdotes and amazing who had contributed. He just put out he didn't want to do a physical book again but we did kind of a virtual book with the same thing for the merge amazing. Yeah, those things end up being like really valuable artifacts because people see not only did their work was appreciated by the community but by their peers that they respect and they get to remember that. So that's one thing we try to think about as well is like what.
01:35:38.028 - 01:35:40.326, Speaker A: Are some softer ways where you can.
01:35:40.348 - 01:35:42.630, Speaker C: Give credit to people and it gets remembered?
01:35:42.790 - 01:36:28.182, Speaker F: I love what you said there's two themes there one, first of all, that there's a difference between recognition and credit, which I think is really important. But secondly also that it actually doesn't have to necessarily be artifacts that are physical. It can even be just like verbal recognition in a meeting. And to give you a concrete example that ties these threads, when I used to work in education, we used to study this Japanese form of professional development called Juju kenkyo. It was very popular in international math studies and science studies. And anyway, one of the things that we found in doing these observations in Japanese teachers classrooms is they had this process where they would all have this collective discussion of a lesson and a lesson plan and deconstruct it. But when they present it to the outside world, it was a united front from the teachers of ex school.
01:36:28.182 - 01:36:45.518, Speaker F: However, this is the key to your point about recognition internally, they were very precise about acknowledging so so and so Son said this and building on that, mr. So and so Son, we did this. Which I think is really interesting because then it becomes very clear that people have heard you and they know what your contribution is.
01:36:45.604 - 01:36:54.458, Speaker C: I think we very much get that on Ethereum as well because especially for the technical bits, because everything is open source. The research and development community, everybody knows.
01:36:54.554 - 01:36:56.446, Speaker A: Who kind of did what because they.
01:36:56.468 - 01:36:57.838, Speaker C: See the codes, they see the EIPS.
01:36:57.934 - 01:37:12.934, Speaker F: Exactly. And it doesn't necessitate like hana ceremonies we used to have at Xerox Park where there's like an IP ceremony where everyone had to recognize who did what for what patent and what went into making such and such thing. And so it's really good that you don't have to do that with such open source work.
01:37:12.972 - 01:37:23.242, Speaker C: Yeah, I'll caveat that by saying do contribute to Ethereum, right? Like the Ethereum Foundation is one, consensus is one, nethermine is one and so on. And so I'm sure all these organizations have process to recognize the work of their employees as well.
01:37:23.296 - 01:37:37.262, Speaker F: Yeah. One last question, Tim. If you had one thing that you wish you knew when you started that you could tell yourself what is like one thing you might tell an earlier version of yourself on this journey with the Ethereum Foundation and the work you're doing.
01:37:37.316 - 01:37:38.286, Speaker C: I feel like the thing I would.
01:37:38.308 - 01:37:40.718, Speaker A: Tell myself it's more like if I.
01:37:40.724 - 01:37:42.874, Speaker C: Were starting today, I think the biggest.
01:37:42.922 - 01:37:48.610, Speaker A: Thing I've seen is when I started getting interested in Ethereum, I knew everything.
01:37:48.680 - 01:37:53.278, Speaker C: That happened on Ethereum. I could tell you every project that deployed a contract on Ethereum.
01:37:53.374 - 01:37:58.478, Speaker A: And I think today it's like there's so much happening that all of these things are vertical. Right?
01:37:58.504 - 01:38:05.154, Speaker C: Like you can be an expert in DeFi and mev and NFTs and whatnot. And I do think there is value in specializing.
01:38:05.282 - 01:38:07.142, Speaker A: You get a lot of value from.
01:38:07.196 - 01:38:08.730, Speaker C: Understanding one thing actually.
01:38:08.800 - 01:38:12.298, Speaker A: Well, because the space has basically so.
01:38:12.304 - 01:38:17.494, Speaker C: Much hype and so much like people trying to tout the most extreme version.
01:38:17.542 - 01:38:19.786, Speaker A: Of what a thing could do if.
01:38:19.808 - 01:38:22.218, Speaker C: I were starting again today. And I guess what I try to.
01:38:22.224 - 01:38:23.706, Speaker A: Do is if you can find one.
01:38:23.728 - 01:38:37.358, Speaker C: Thing and really focus in it, the space will pull you in a bunch of other directions. Regardless, you'll end up reading about mev and ZK and whatnot you're kind of forced to almost. If you can identify a focus, then you can actually make really valuable contributions.
01:38:37.454 - 01:38:40.226, Speaker A: Without being an expert like you would.
01:38:40.248 - 01:38:47.710, Speaker C: Have to be in most traditional fields. There's so many ripe problems to explore that just focusing, you can have a really big impact.
01:38:47.790 - 01:38:58.610, Speaker F: Well, a great note to end on. Tim Baiko, thank you so much for joining. Ali, Tim, Roughgarden and I as we explored all these questions with you, Ali and Tim, thank you so much for joining.
01:38:58.690 - 01:38:59.354, Speaker E: Thank you so much.
01:38:59.392 - 01:39:01.034, Speaker D: Thanks, everyone. Thanks, Tim. Great to catch up.
01:39:01.072 - 01:39:02.170, Speaker C: Yeah, thank you. This is great.
01:39:02.240 - 01:39:30.690, Speaker B: Thank you guys. Thank you for listening to Web Three. With a Six and Z, you can find show notes with links to resources, books or papers, discussed transcripts and more@asicsycrypto.com. This episode was produced and edited by Sonal Choxy. That's me. The episode was technically edited by our audio editor, Seven Morris with Justin Golden. Credit also to Moonshot design for the art.
01:39:30.690 - 01:39:54.340, Speaker B: And all thanks to support from Asics and Z crypto. To follow more of our work and get updates resources from us and from others, be sure to subscribe to our Web Three weekly newsletter. You can find it on our website at asics and Zcrypto.com. Thank you for listening and for subscribing. Let's go. WA.
