00:00:21.210 - 00:01:12.820, Speaker A: Hey, everyone. Today I'll be talking a little bit about building protocol, building products, and how some of the approaches to doing so might be different in the blockchain space versus building more kind of traditional, centralized products. So, a bit about me, I'm Nitya. I work on consumer and developer product on a project called Cello. So before doing product, I was actually a protocol engineer working on stability. And before that I was leading product engineering at a fintech startup. Overall, I came to the blockchain space first out of technical interest for consensus protocols and scalability, and then over time, got really excited about kind of the ability for consumers to steward their own data.
00:01:12.820 - 00:01:48.782, Speaker A: Some of the really cool topics that others have been exploring earlier. And that was ultimately when I decided to come and work in the space full time. So you'll be hearing more about Celo in the context of how products get built in different ways and what some of those different approaches look like. But overall, Celo's goal is to build a more open and accessible financial system. So what kind of the motivation for this and the problem size, to give you a sense, is over 1.7 billion people worldwide are unbanked. So no banking access.
00:01:48.782 - 00:02:57.960, Speaker A: But over two thirds of that group has access to a mobile phone. And so if you think about that market size, there's well over a billion people globally who have access to everything on the Internet, but can't send $10 to a family member overseas. So what makes a successful product? This image right here is one of my favorite products. It's a low end Android device. So for $40, you can have access to everything on the Internet, so you can talk to your family, you can get access to more information. And this is a really interesting innovation to me because it took something that there was a gap in access in, namely Internet services and innovation on the technical level, namely open source mobile operating systems like Android and Android Go and put it all together and bridge that gap at a price point that made it accessible to a large group of people. And so as we're kind of thinking about products, thinking about a need and how we might build something to address that need.
00:02:57.960 - 00:03:47.458, Speaker A: So today we're going to talk about building products, but not necessarily in the traditional, centralized sense. We're going to be really focused on what are the difference between building in the blockchain space versus in a more traditional context. There's lots of resources online for how you can find product market fit, for how you can plan iterations, and how you can build a product iteratively. But this is going to be really focused on the differences and how you might want to build with a new paradigm. One thing that doesn't change is where you start, right, with any product you want to start with. What is the need I'm meeting and for who. So in the blockchain space there's really two, right? If I'm building a wallet, my user is an end user consumer.
00:03:47.458 - 00:04:44.440, Speaker A: If I'm building, say, a decentralized lending protocol, my user is developers. So there's some big differences in that. When traditionally you build for an end user, you have maybe your own database, you have a back end service or several services, and you have a front end, or you have an application layer and you own all the layers of the stack. And so as you find out different things about your users, you find out different features you want to build. You can change every layer of the stack to meet that need and to build new use cases and better find product market fit. Whereas what's a little bit different about the blockchain space is that you may build a dap on top of already existing infrastructure. So what's interesting about this is you may have a blockchain that you can't maybe make as many changes to as your back end.
00:04:44.440 - 00:05:50.598, Speaker A: So one thing that's really important to think about here is this idea of flexibility and control. So as you're thinking about products that you want to build, thinking about what the most important features are to meet those needs of your users, and then thinking on a really detailed level of okay, what infrastructure might I need to either build myself or might I pick to use that exists already that'll help me best meet those needs of users and thinking about what will offer you the widest range of flexibility as well as control in terms of building and continuing to meet needs. And then with developers it's a little bit different. So some examples we already have. There's Ethereum, which had the initial thesis of building unstoppable programs. We see that compound has a thesis of earning interest. Overall, some of the best developer platforms have started with a range of objectives.
00:05:50.598 - 00:06:48.570, Speaker A: And what I mean by that is there's a sense of, okay, why would developers come to my platform and having that really strong sense of why people would use what you're building. A flip side of this is that in addition to having a sense of what the range of different uses are, this is helpful because you can build abstractions that make those common use cases really easy. There's also a sense of because you don't know exactly what developers are going to build. And if there's one thing we know about devs, it's that they have a great ability to take what is defined and really expand on it and push it forward. You don't want to stop people from continuing to innovate on your platform. So having the flexibility to do kind of more custom things with what you're building is something that is also really important to consider. So I think a really cool example of this is with Ethereum, where a really clear abstraction that one might want to build on top of a generalized computer is a programming language.
00:06:48.570 - 00:07:52.500, Speaker A: Since we have solidity, a programming language. What's cool about solidity is there's also the flexibility to even write assembly if you need to, and write instruction level code if something isn't quite supported, or something doesn't quite do exactly what you want it to. So these two things may seem counter to each other, where with end users we talk about control and wanting to build almost in this very focused on one singular goal kind of way, whereas with developers, we want to build things that are modular and build clean abstractions. But one thing that they both have in common is really this idea of having needs in mind. So understanding on as rigorous level as you can, what is bringing people to the product that you're building, and really avoiding that mentality of build. And they will come so across the board, you just want to be rigorous about why would people use what you're building. So some examples of this across the space.
00:07:52.500 - 00:08:52.834, Speaker A: So, so far, the space is still really early, but there are a few different interesting products that I'm going to kind of talk a little bit about, and talk about how they fit into this framework of developer focus versus user focus. So, bitcoin, as a refresher, bitcoin is the native asset of the bitcoin blockchain. And so bitcoin initially started as a peer to peer monetary system. Over time, it's evolved to more of a store of value. But the important thing to keep in mind is that it had an initial purpose. And so if we look at bitcoin today, we see that both the native asset and the protocol serve to reinforce and enable each other where the asset gets its value from its utility and from its degree of widespread acceptance. And the protocol value comes from the degree of security and decentralization that exists.
00:08:52.834 - 00:10:05.710, Speaker A: So there's a huge community around bitcoin, and the blockchain itself has withstood a long period of time, and there's therefore a lot of faith in its security. One thing that's interesting to note here as well is that bitcoin itself had a need and created a whole technology, namely blockchain, to enable that need. And so that's kind of an interesting interplay with the previous framework. And then ethereum is equally successful, or. Yeah, also a very successful and interesting kind of example of the alternate approach where Ethereum started as a generalized computer, and as a result, from the start has been really appealing to developers. And so what was really cool to see is that as Balaji mentioned earlier, in 2017, with the ICo craze, it became a really great place to raise, to do crowdfunding and to put a new asset out there. And as a result, what we see is that ethereum has a ton of value today derived from this rich developer ecosystem and the composability that exists between different assets.
00:10:05.710 - 00:10:51.574, Speaker A: And so if we take a look at, again, building products, what the next set of products might look like, we see that we've had two really successful products to date. We see that they've met different needs. Overall. If we kind of think about what the future looks like, it's clear that there is a huge amount of open space out there. And in terms of kind of building a great product, there's still so much left to do. So this just shows the market cap of all crypto assets and how they compare to other kind of markets that exist. And so we see that there's about four x between crypto and Apple, and then another seven x between Apple and gold.
00:10:51.574 - 00:11:31.890, Speaker A: So again, huge potential. And even if we look at popular dapps, some of the most popular applications still have on the order of like tens of thousands of weekly users. And so huge amount of room ahead. And so next, going to talk a bit about what an approach might look like that takes this user need focused approach and builds in a way that controls the whole stack to kind of meet that user need. And so building with one kind of core purpose in mind. And the goal here is to illustrate one way that this might be possible. So a little bit about cello.
00:11:31.890 - 00:11:59.150, Speaker A: So cello started out as a fork of Ethereum. It's a layer one, as well as set of smart contracts and an application layer built on top. So the blockchain itself is proof of stake based. And as I mentioned, it's a fork of Ethereum. And so the analog to EtH is cello gold. That's a native asset. On top of this, there's a set of native smart contracts encoding celo dollar, which is a stable value asset pegged to the US dollar.
00:11:59.150 - 00:13:15.770, Speaker A: And a lightweight identity system and then a set of applications. So the cello wallet, as well as a developer SDK. So you might be asking, we were talking about users versus developers, and how do those two kind of play together in the approach here? So from the start, sello is really focused on a wallet and end users and building to that need. As a result, what's come to be is kind of a broader sense of what those users might need, and as a result, the definition of what a developer ecosystem might want to set out to build. And so the initial approach being building for an end user and then becoming the first consumers of an SDK, and then building that SDK to meet a range of different use cases. And another thing that's important to understand is though all of these occur within one project, there are pretty separate kind of roadmaps and decisions about the direction to take these two. And so they definitely interplay with each other in the sense that one will kind of take insights from the kind of successes and learnings of others, but they ultimately are kind of two separate layers of the stack.
00:13:15.770 - 00:14:18.782, Speaker A: And so the first case study here is just about the way that we kind of think about mobile clients and client sync. And so one thing that is really interesting about kind of the seller wallet is that it runs a light client that syncs blockchain state. And this allows for a user to both sign transactions as well as send them from their device itself. And so one thing that the team had kind of noticed was as kind of initially, when we would have a network running up, running for a long period of time, it would take a long time for this light client to sync all of the headers that were part of the chain state. To that point, we realized this was going to be a really bad experience for users to start up this app, get really excited about using a wallet and sending money to their friends, and then see this loading screen. That took forever. So what came out of this was a really focused effort on reducing the time of that sync as much as possible.
00:14:18.782 - 00:15:16.386, Speaker A: And so due to a variety of features that we prioritized in services, this now the sync is only a few kilobytes per week, which is pretty cool. And it also means that that first time experience is really fast. Second example is around gas currencies and usability. So as I mentioned, being a fork of Ethereum. One thing that's interesting about the Ethereum blockchain is that no matter what asset you're transacting, you need that asset, as well as some ETH to have a transaction go through. So if I'm sending someone 20 die, I need die, as well as a little bit of eth to make that transaction go through. One thing that's really interesting about taking a full stack approach here is that, as our team had noticed, we were going to do a pilot in Argentina and have a bunch of users use cello dollars and see kind of what people did with it and get some learnings from that.
00:15:16.386 - 00:16:33.946, Speaker A: One thing we noticed was that we were going to have to give people both sello dollars as well as cello gold in order to perform transactions like, say, even buying a sandwich. And so if we think about what that means for a second, if we're talking about mainstream usability, having people use two different assets just to transact in one as a comparable to cash, or even like a debit type system, it seems like a bit of a regression in user experience, or it seemed that way to us. And in addition to that, if you think about kind of some of the more marginalized people who may need access to a financial system and may find value in something like sello, needing to hold a volatile asset and have risk exposure in order to just transact in a stable value asset, didn't really seem right. And so one innovation that came out of that was allowing for gas to be paid in a stable asset, so namely celo dollar. So, Joe, those are just a couple of examples. And I would say that as you're kind of thinking about building, and as you're thinking about your products, thinking about ways that you can get these learnings higher up in the stack as quickly as possible, so that you can make changes lower down. Because again, one thing that's really different about this space is that changes at the most fundamental and lower levels are a lot harder to make.
00:16:33.946 - 00:17:12.530, Speaker A: And so trying to get as many insights as you can early on. So, key takeaways. One, starting with the biggest need. So rather than kind of starting with technology and kind of seeing what fits, think about what is the biggest possible problem that you can solve, and how might you use the toolkit that you have at your disposal with blockchain to solve that problem best. And then two, thinking about how at every single layer of the stack, you can maybe build a bit up or build a bit more full stack, or at least think in a more full stack way in order to build something that meets a more cohesive need. Okay. All right, thanks, Nitia.
