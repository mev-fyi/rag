00:00:18.250 - 00:01:12.130, Speaker A: Really excited to be here with you today, unfortunately in this remote capacity, and it's a bit od past midnight here in an empty office that's been empty now for two and a half weeks already. But we do what we can. So let's get started. So I've been involved with crypto and security now for more than seven years, I think joined the Ethereum team in 2014 as the chief security. Back then, this was all a pretty new field like I joined to help sort out the security audits prior to launch and then also ensure operational security. But there wasn't much at the time, no audit firms that were dedicated to this. I stayed on throughout Ethereum's launch and was around for when the DAO hack happened, although that was already after we founded parity.
00:01:12.130 - 00:02:10.546, Speaker A: Before I joined Ethereum, I worked as a consultant for McKinsey in Berlin. I was involved with various IT transformation projects, but also IT security and larger corporates organizations. So I have seen that angle as well. However, although I'm a mathematician, I'm not trained in cryptography, but I would say I did study relevant stuff. So I was involved with understanding complex systems, mathematical physics, how structure forms, but also how chaos forms, and how small parameter changes can actually lead to severely different and dramatic changes in outcome, which I think is very relevant in the space. I was always intrigued with how maths can solve problems. Like mainly from university, I knew how it can solve or help solve problems in the sciences.
00:02:10.546 - 00:03:22.090, Speaker A: So I was very intrigued when I came across blockchain and finally saw something where masks can help solving societal problems and not just analyze them, which I was used to from statistics at uni. So that was sort of how I got in through seeing that this technology could help with a lot of privacy issues we've had online. And so I've always been very intrigued from the security standpoint with that technology. So yeah, right now I'm the CEO of parity Technologies, London based company big team in Berlin. I co founded that together with Gavin Wood in 2015, I guess almost five years old. Gav, who was the CTO of the Ethereum foundation at the time and had developed the ethereum virtual machine, I would guess the first instance, sort of, of smart contracts in the context of blockchains, had taken that early idea of a blockchain scripting language that Vitalik had developed and sort of very well matured it into this comprehensive virtual machine framework. And then the smart contracts.
00:03:22.090 - 00:04:30.834, Speaker A: At parity, we do open source blockchain based software tools to enable other projects and developers to deliver on decentralization. We've had a lot of learnings security related ourselves, and I want to share a bunch of them with you. In our company, I guess we have our very own view on security, and last year in summer, we sat down and broke down a bunch of principles that sort of are important in our organization. And when you compare that to other more prominent startups, I guess we aim to move with enough caution and intention to not break things. And having an undo is always a good thing. So with that in mind, I guess many of the things that you might hear today might sound like a bit like dried remarks, but in hindsight, a lot of the things in security seem to be always easy and super obvious. However, many of the things have been very hard and painful learning, and none of us should repeat them unnecessarily, I think.
00:04:30.834 - 00:05:34.934, Speaker A: So that's my main goal, to help you not do the same mistakes that people have done before. And like a normal life, these wisdoms often sound right, but in the end they do carry a lot of wisdom and truth, and so it's worth exploring them with curiosity. Finally, I think we've been always deep believers in open source, and security is one obvious dimension where open source, I think, wins against the closed source models in the past. This future decentralized web is not built by a single company. And we've seen in many instances, like the Dow hack, for example, how projects came together and collectively tried to solve issues when they came up. So I think we've come a long way since the beginning, when bitcoin was invented, Nakamoto consensus security has always been very much at the core of blockchain as a whole. So nobody, I think, really would have expected, or maybe a few people, but definitely not the majority, that something like consensus, Nakamoto consensus, could work at all.
00:05:34.934 - 00:06:36.438, Speaker A: In fact, I think there's a bit of a thing where Satoshi even urged Wikileaks to not use bitcoin to receive contributions because they were fearing it could harm and lead to irreparable harm in case things break. But then things moved on. So bitcoin worked. Bunch of hacks, but mainly on the fringes. Few security issues directly inherent to the blockchain network. But then with the advent of Ethereum, a whole new attack surface came, and that was mainly due to that virtual machine that allowed for a lot of things to go wrong, the Dow being one of the most prominent things, I guess, in the space now. Where are we today? A lot of things have happened, like the base layer, the lowest level things have matured.
00:06:36.438 - 00:07:48.402, Speaker A: We are trying to include standards from other industries or other places like webassembly, but at the same time, that app ecosystem is also maturing and it's becoming increasingly complex. And while we do have more tooling, compartmentalization, standardization, things will probably continue to go wrong in the future. So I want to share some learnings in particular that are relevant for smart contract development in this presentation, but then also give a bit of an outlook of where I think things are heading and what people might want to consider when they start a project in this space. What are the security considerations you should make? But first of all, I think it's really important to keep in mind security is not just code. This is a definition of NIST, the National Institutes of standard and Technology, of an IT vulnerability. It's a weakness in an information system, the system's security procedures, internal controls, or the implementation that could be exploited or triggered by a threat source. So it's various things.
00:07:48.402 - 00:08:30.174, Speaker A: It's the people in the organization, it's the operational procedures, it's the lifecycle management of the application. But it's also a lot of things that might be totally out of your control. It's the devices that people use and weaknesses that could come in from that side. But it's also important to keep in mind, exploits don't have to be all deliberate, and some of the full impact of an exploit might not have been intentional at all. So it's like a lot of things to consider. And as Bruce Schneier, who many of you probably know, said, he's one of the forefathers of software security, cryptography, Internet privacy. Security is a process.
00:08:30.174 - 00:09:05.766, Speaker A: A product can never be secure. There'll always be weaknesses. Things move on, and you have to ensure that the entire system can be as secure as possible. And that requires pulling levers on all sorts of level. So, Friday night, enough of preaching of principles, high level. Let's dive into the smart contract bit of this presentation. So when I use the term smart contract, I mainly, primarily refer to smart contracts as they appear on ethereum.
00:09:05.766 - 00:10:05.694, Speaker A: That's the space I'm mostly familiar with. But let's take a step back. What can go wrong with code? Just in general, when you look at code, what are the things that typically could go wrong in order to learn from that, and how that applies to smart contracts? Many of you are probably aware memory safety is always an issue, not just from a security perspective. If you're a web developer, you're probably well aware of the disastrous effects of malicious input to your code and having to properly check for that. Systems administrators probably seen how accidental access controls can be very detrimental to what you're doing. One of the things we're in particular trying to overcome with blockchain, like the dependencies that come from very fundamental design decisions, dossing attacks, very important issue on the web. So yeah, that's just a few things.
00:10:05.694 - 00:10:43.020, Speaker A: Just to give you a sense of what am I talking about when I say things can go wrong with code. One thing that's important to see is that all of these issues don't have a single answer. There's various things and various approaches we have to take in order to mitigate them. At the core to me is the threat modeling. So having a really thorough understanding of the potential threats, the actors, their motivations, all the different vectors and how you can attack. So that's a very fundamental thing you should always do. And it's actually quite fun to do when you start doing that.
00:10:43.020 - 00:11:32.486, Speaker A: There's audits, so reviews both internally and externally that you can do, which initially were quite difficult to combine with in the blockchain domain. But these days there are a bunch of specialized companies. Some specialize in smart contracts, some do more wider work. Testing is important, obviously, for obvious reasons, both manually as well as fuzzing. So random approaches for finding the issues with your code. So how does that translate into smart contracts? That's issues that can go wrong just in general with code. So first of all, the issues you find in smart contracts, and there's, for example, a quite prominent security firm trail of bits.
00:11:32.486 - 00:12:29.114, Speaker A: We also work with them on Polkadot, who have done analyses of that. And I think the reading material had some reference, so they've looked at it. And in principle you find the same issues with smart contracts that you find with normal code. Not so surprisingly, in the end it's the same monkey sitting in front of the keyword. But that doesn't necessarily mean that it's in the end the same impact that it has, right? So a lot of the findings, almost 50%, were impossible to imagine detecting with testing. And that's really problematic because when you once deploy smart contract code, it's hard to change it unless you've implemented measures beforehand that let you upgrade your code or make changes in whatever reasonable way, there's really no way to. Or it's really hard to mitigate issues that come up.
00:12:29.114 - 00:13:28.000, Speaker A: Also, when you look at what's been written about, you could get the impression that some of what you read about shouldn't necessarily. So that doesn't necessarily mean it's the relevant code or the relevant issues for your application, like other things might be more important because your system displays other complexities. But all in all, I think the big learning from all the issues that have come up is smart contract development is the opposite from agile. It's the opposite from how software development happens today. It's very costly because the only way to get additional insurances is basically by contracting external consultants in the form of audits, and they are really costly, which makes it a tough thing to do. You want to probably apply a very thorough approach for writing your formal specifications and whatnot. These are things you might want to take into account.
00:13:28.000 - 00:14:10.182, Speaker A: So I would say, as sad as it is, and even though tools have been developed, smart contract development is far from easy and far from secure at this stage. Unfortunately. Still. Nonetheless, there's things we can do at parity. We have developed like a 14 point checklist at some point that goes beyond just the development. It's a very comprehensive list. Starts with how you organize your GitHub and repos, how you do the deployment, the lifecycle management, and then in the end of course also how you deal with code quality and the production of the code.
00:14:10.182 - 00:14:54.642, Speaker A: So maybe just a few examples. So what you want to do is you really want to compartmentalize what you do and separate it from everything else that's happening in your organization. You want to create a different GitHub repo to ensure you have the appropriate access control in place. You want to have separate repos for each contract. Also, again, to manage that a lot more granularly, embed all dependencies to ensure you are always in control of what you're doing. On the deployment side, a lot can be learned from best practices in other industries. Make sure that you always have a thorough understanding.
00:14:54.642 - 00:16:06.030, Speaker A: What is the actual live contract that you have deployed. Make sure that the readme is really comprehensive and gives you the relevant information that you need when things go wrong, like where's actually the deployment address? Things that might seem trivial really aren't trivial when things go wrong and you are on a lot of pressure. Code quality. You might want to try and use a different language when you write the tests from what the code is actually written in to ensure you're not getting caught by language quirks and thorough review. Even if you don't engage auditors for whatever reason, at least have thorough code reviews within your organization. So that's a few things on the smart contracts. Beyond that, I think there's some interesting observations of how the entire ecosystem has evolved as an interdependent open ecosystem, and things we've observed that are security relevant, so constrained by the design space and performance limitations.
00:16:06.030 - 00:16:35.730, Speaker A: A lot of projects have started to actually build their own chains. I think one of the first examples, although Ethereum was maturing back then, was protocol labs with Filecoin. They started to build their own chain. But there were more examples more recently. And sort of a concerning thing, when there is the old adage from crypto, don't roll your own crypto. Rolling your chain is maybe something you don't want to do because it's really difficult. I mean, we're at parity.
00:16:35.730 - 00:17:24.200, Speaker A: We are focusing on that layer like building blockchains. We've built an ethereum implementation, bitcoin, zcash, all sorts of things these days. Polkadot and there's a lot that you can apply learn from when you're doing a new chain. And we've encapsulated and we have consolidated that also in a framework that people can use. But if you start from scratch, not only is that costly, it's also, from a security perspective, not a good idea. Other things that play a role in that context is because of the limitations on the scalability side. When people start to launch new chains in order to be able to deploy what they want to deploy, at some point, chains will start to compete for security.
00:17:24.200 - 00:19:10.294, Speaker A: So basically the mining resources, validator resources, being a scarce resource, chains will eventually compete. And we're seeing that like we're seeing such an era approaching with the 51% attacks that some of you might be familiar with on e classic last year and other things, this is becoming more and more problematic as things progress. On the other hand, applications are getting more and more complex and in particular intertwined with the platform as well. We've seen that for the first time, I think, or that became clear in the context of the DAO as well, where in the end the reason why the DAO got fixed, and for those of you maybe not be too familiar with that, that was the very first instance of a decentralized autonomous organization deployed with the help of smart contracts that dramatically failed. There was an exploit and a malicious attacker was able to basically seize, or would have been able to seize the funds in the Dow if there hadn't been a fix. And since there was so much ether deployed in the Dow, around 10%, the eventual decision was basically through a governance move to fix the issue in the smart contract through a hard fork. So that was sort of the first time that it became clear there is an issue when the economics of the application get too intertwined with the fundamental security of the platform.
00:19:10.294 - 00:20:06.166, Speaker A: And I think very similarly for those of you who have followed that in the DeFi space where east used as a collateral, that creates problems as well. There isn't enough compartmentalization, I would say, what can we do? I think that's not an easy question. Security isn't easy, but I do think there's some stuff that we can do, and that is happening quite interestingly as the technology is maturing. Let's look at scaling in particular. So a very straightforward thing to do when you think about a system or a technology that's limited in scalability is you'd employ some way of parallelizing whatever computations have to happen in order to improve the scaling. Very straightforward approach. However, depending on how you do this, this actually works better or worse.
00:20:06.166 - 00:21:27.710, Speaker A: A very naive approach ties back to bitcoin already with the side chains, is to basically just run copies of the chain and try to parallelize them and have bridges between those chains that allow for communication across the chains. However, the issue with this is if you do this in a very simplistic way, is that the security of the original ecosystem basically gets divided across the different chains. And so that is basically what's, in the end, the problem, because all these chains are much easier to attack crypto economically because of the security being divided across the chains. But also you're running into sort of a weakest link problem if you think of interoperability between the chains. And that's really something we want, because otherwise we end up with the same walled gardens we already have at the moment. But if the security is divided in this way, you fundamentally rely on the weakest link in the sort of chain of chains, because you have to rely on the security assurance that you get from those chains. And that gives you only a very weak interoperability.
00:21:27.710 - 00:22:32.570, Speaker A: That might, in the end lead to severe problems. When you build a complex application that tries to compose different things from different chains, you don't have strong guarantees. Much better approach is to try and share the security amongst the different chains. Like sounds obvious, but it's actually quite difficult to engineer. It's very closely related to the early sharding ideas for Ethereum. So in such a multi chain system, all the chains share the common mining, or in more modern systems, proof of stake resources. The great thing about this is that also when it comes to the interoperability between the chains, you get much stronger guarantees, and you can actually rely on the messages transactions you receive from the different chains and thus get strong assurances around what you're hearing from the other chains.
00:22:32.570 - 00:24:48.174, Speaker A: Now, we can also drive this a level further, and I explain later in the following slides what this all has to do with security, apart from the sort of first level security when we drive this a little bit further, an interesting thing to then come up with is to say, well, if we have such a framework, why not allow for heterogeneous chains? So in contrast to the Ethereum charting ideas where you have sort of the same copy of Ethereum, same virtual machine, you allow for different application layer customization. So different virtual machines or better set runtimes that allow for customization for your specific use case. Think of one of the chains as being a payment chain, for example, or one of them being, I don't know, a supply chain specific chain or whatnot. The big advantage is not only do you gain much better, much better economics because it's customized to use case, but also does it reduce the attack surface on your application and on the chain. So again, compartmentalization is one of the principles that has always been important in security, and it's about finding out how to do that in the right way in the context of blockchain. So those principles that I tried to explain, a lot of this has been behind the thinking for how we have designed polka dot substrate and how we think about these days, about what platforms need to actually provide in order to allow for much more secure usage, for much more secure deployment of application for applications. And that's not just relevant because it reduces the cost, but in particular for security reasons, like very similar to security in it as a whole, where there isn't a single system or single mitigation strategy that helps you to close the holes.
00:24:48.174 - 00:25:57.290, Speaker A: Also here you'll need various layers to various layers of tools that all have their own weaknesses, their own holes. But as a whole, hopefully we can cover everything and create systems that are really difficult to penetrate. So that customizable runtime model, I think, is a very powerful one because it very much so mitigates the attack surface on the virtual machine level. And like the Dow hack, we've seen the multisig hack on our side late for parity a few years ago. Many of those really big attacks that have happened or issues on Ethereum in particular, I would argue, have been related to the virtual machine being way too complex and way too powerful as a tool in some ways. Way too powerful in some ways, therefore way too exposed and therefore actually way too weak. So that's, I think, a big opportunity for making things a lot more secure.
00:25:57.290 - 00:27:22.918, Speaker A: Other things that you can do when you can leverage such a customizable framework is it's much easier for teams and projects to resort to standards like WaSm, webassembly, and much safer languages like rust for the writing of smart contracts, because you're operating in a framework and not with a sort of one size fits all and still like a very glued together solution. So another thing I think that's also a lot underestimated at the moment is the issue of governance. Governance and how the open source ecosystem, the core team, feeds into this. By choosing a platform, you make yourself dependent on them to a certain extent, depending on whether there exist governance structures and what they look like. And the problem is, in the end, on chain governance might be the ultimate measure in case of a big failure. We've seen that work with the DAO through that fix, and having a strong approach on that end is, I think, core going forward and will save people when things go wrong. So still like a ton to figure out.
00:27:22.918 - 00:28:25.180, Speaker A: We've come a long way. There is a lot that we can learn from other industries, I think. And with Ethereum, we've done that as well. When we started, one of the things that we did, in contrast to bitcoin, when we started bitcoin, you might be familiar with the fact that there's just the reference implementation. There is no formal specification, or at least there wasn't originally with Ethereum, because we knew we would build something a lot more complex. It seemed to make sense to us to rather like in aerospace, start from a formal specification and then develop fully, independently, various implementations to achieve redundancy and remove the reliance on a single implementation. Because that sperm specification is a lot easier to check than trying to understand what a reference implementation really does.
00:28:25.180 - 00:29:07.746, Speaker A: Medicine again, medical professions, I think there are a lot of good procedures to be learned. Checklist is one of them. I think they've created a lot more safety. And a lot of the things we see seem trivial, but they should be written down in a checklist in some format that can be easily accessed, gone through when things go wrong. We always had frameworks in place for how to do announcement. Like there's all sorts of things where clear checklists can really save you when you're under pressure. In many ways, I would say blockchains or like, let's say the smart contracts that we deploy are a lot more similar to hardware than software.
00:29:07.746 - 00:29:50.390, Speaker A: Once deployed, once shipped, very difficult to recall. So might want to have a look at things that people do. There when you are active in the space, it's good to have the right procedures in the organization. There's various things you can do. I think in general you want to establish a really strong security culture in your organizations, but one of the specific things you want to make sure you have is crisis communication. Because when things go wrong, you don't want to scramble and try to find a firm that can help you. Talk to the press if that ever becomes necessary.
00:29:50.390 - 00:30:45.814, Speaker A: And then again, I think developing your code in an open source fashion has tremendous benefits. It is, I think, one of the key things that kept Ethereum alive in the early days, the fact that also in that ecosystem projects came together and helped each other. And it's the same thing we're seeing now for Polkadot. Open source, powerful to build ecosystems, but it's at least equally, if not more, required in order to create secure systems. So key takeaway from this, I hope you did take away something from the practical things that I talked about. If anything, I'll provide you with some crypto adages so you can sound like an expert. I think.
00:30:45.814 - 00:31:23.218, Speaker A: Yeah, one of the key things to keep in mind, security is really much more than code. And everybody in your organization should feel comfortable to speak up when they see an issue arising. That's really the best way to ensure that you are prepared if things go wrong. Or ideally that things don't even go wrong. Like a strong security mindset in your organization is important. Smart contracts, at least for now because of the lack of tooling, aren't secure. Or at least say it's not easy to develop them in a way that you should rely on them.
00:31:23.218 - 00:31:59.822, Speaker A: It's not agile, costs a lot and more issues will probably happen until we have those tools. Be careful when you roll your own blockchain, or better, don't do it like rolling your own crypto. Not rolling your own crypto, you don't want to roll your own blockchain. That's a big undertaking. I think overall it's important to stay humble when you're active in this field. Learn from other industries, learn wherever you can. There's a lot to be learned also from web two and stuff that went wrong.
00:31:59.822 - 00:32:20.900, Speaker A: And then I think lastly, security is really hard. Things will go wrong in the future and I think it's quite crucial that we recognize that we're in this together and that we should learn as fast as we can from each other to build a better web. Thank you.
00:32:22.230 - 00:33:03.538, Speaker B: Great, thanks, yuta, that was great. So, yeah, give a virtual round of applause or visual round of applause. Great. Okay, great. We got some questions in the Q A channel, and I'm going to just sort of read them out to you. And again, thank you so much for staying up super late on Friday night to take these questions. The first one is from Paul, and his question is, would audits be more difficult for a feature involving multiple chains on Polkadot when compared with a similar feature on Ethereum? Since you need to consider the characteristics of every different vm that's involved, I.
00:33:03.544 - 00:33:46.240, Speaker A: Guess it very much depends. I think it's easier to analyze in its components because on that level, things are a lot easier to understand. Like if you have a customizable runtime, it's a lot easier when it comes to the interdependencies and sort of what can go wrong on a system's level as emergent effects. I think you'd end up with very similar things because I wouldn't assume it's more difficult. I would rather assume it shouldn't be more difficult than on Ethereum because the underlying components are easier to understand. So that's my sense.
00:33:48.290 - 00:34:09.270, Speaker B: Okay, cool. I see Paul nodding, so I think we got it. Okay, cool. So next one is from Eddie on the ASICs and Z team. He's asking, can you say more about how security guarantees can be made between shards of the same chain? What are examples of projects that do this and some differences between these efforts?
00:34:11.790 - 00:34:50.680, Speaker A: Security assurances on, I mean, the only examples really, that come to my mind that do have this strong interoperability, I serum and Polkadot, like all the other attempts with doing interoperability, be that cosmos or POA, they all leave you just with a weak interoperability because they don't overcome the issue that you divide the security in the end. And there's a big difference between sharing and dividing on that level. That's really the only examples that I can see.
00:34:51.770 - 00:35:04.730, Speaker B: Okay, cool. Next one is from Stefan. What attack vectors open up by adding support for WASM smart contracts instead of a smart contract specific virtual machine.
00:35:07.230 - 00:35:54.554, Speaker A: I would actually say take it from a different angle. I hear your question. You're asking about what comes up. I think when it comes on a higher level, it's the better approach because you're taking something that has a lot more eyes on it than something that is fairly limited in its audience. That said, it's not that you couldn't, and there's probably interesting approaches for developing a secure smart contract language, but like, say, with solidity. One of the primary goals was to make it very easy for people to develop that's why it borrows a lot of ideas from JavaScript and whatnot. Security was in people's minds, but people didn't know how they would be used.
00:35:54.554 - 00:36:23.970, Speaker A: It took ages for having a library approach in the language and whatnot. I think it's more about like, is it really worth reinventing the wheel or what's the trade off? And doesn't it make more sense to have these standards because they're easier integrate? You don't create additional complexities through the integration. People are familiar all these things. That's why I would strongly argue for standards as compared to reinventing and making it specialized.
00:36:25.590 - 00:36:37.158, Speaker B: Cool. Okay, great. Next question is from Jeff, and he asks, how should projects think about making contracts upgradable as a way to address unforeseen security issues?
00:36:37.324 - 00:37:04.270, Speaker A: I mean, what you probably don't want, or maybe you wanted, at least in the initial stages, is a kill switch, because then you have a centralized control again. But there are ways of thinking about how certain portions of the contract could be upgraded, like having things in place for that, maybe then a multisig around that, so there isn't a single controller. That's ideas you could have when thinking about how to fix issues in hindsight.
00:37:05.650 - 00:37:23.800, Speaker B: Great. Okay, next one from Arya. What are some social attack vectors you're thinking about with regards to the non technical side of daos and things like on chain governance? How is misinformation thought about from a security perspective, and what's to mitigate that?
00:37:28.170 - 00:38:37.114, Speaker A: I mean, the game theory of these things isn't easy. That said, some of the game theory, it's not really clear how some of that plays out in the real world. I think that's in general something to be aware of in crypto, and that started with bitcoin already. Like not many people would have thought that it does work, but then it's the real world that makes or breaks, and only then you become aware of what the actual assumptions or modeling threat models, the really real parameters should be. That's a hard question. I think with governance in particular, we'll have to see what things work and won't as we're bringing in humans again. They are really hard to model in their behavior, and I think there's more unexpected things than sort of formal weaknesses that will come to be problematic, be that like voting participation and actually planning for that, which is one of the things that we are doing.
00:38:37.114 - 00:38:50.562, Speaker A: If there's low voting participation, you need a bigger quorum for things, a bigger quorum for things to go through. So I think it's those things that are related to some of the practical considerations that will become important.
00:38:50.696 - 00:39:07.000, Speaker B: Yeah, I actually have a follow up to that, which is, I guess, how do you think about the role of sort of traditional management structures in the context of governance versus some of the new things you can do with smart contracts like quadratic voting, for example?
00:39:10.730 - 00:40:07.610, Speaker A: I don't believe all of what we've done so far should be thrown away. I do think a lot of the things that we've developed in the past, there's governance mechanisms, or good governance in particular, checks and balances and whatnot, should really think hard about how to do that. To me, the power lies really in making things more liquid and being able to play with voting mechanisms that have been so far really difficult to be implemented and use because of the cost involved and whatnot. To me, if we can do it right, it's a big field for experimentation, trying out what things actually work, because on paper they might look like they work and then they don't, or the other way around because we haven't considered a lot of the issues. But always do it in a way where you have an undo where you can go back, ideally.
00:40:09.070 - 00:40:25.470, Speaker B: Okay, great. So next one from guy. Sorry, how would you try to defend against supposedly trusted contributors, introducing obscure flaws for the sake of attacking a network, for example, if a core dev introduced a vulnerability with the intent of exploiting it for profit?
00:40:29.110 - 00:41:04.330, Speaker A: I guess even with open source, like shorting is always something that people can do when they introduce something. But I do think open source already mitigates against a lot of these risks in your organization. Again, when it's an organization that does this, it's relatively easy to implement relatively strict review processes to still ensure there is redundancy, not the reliance on a single contributor.
00:41:06.430 - 00:41:11.660, Speaker B: Right. Okay, next one is from Mark, and he says, you.
00:41:12.350 - 00:41:46.310, Speaker A: Sorry, maybe just to add, I mean, again, tying back to where I started, some of the threats that your system might be exposed to might not even be deliberate. Right. Like you want to do all these things even because people just make mistakes. Like regardless of whether they're malicious. I mean, with their malicious, they might make sort of sophisticated mistakes deliberately and they are hard to combine with it. But a lot of the things you want to have in place, in any case, if you're dealing with such core essential services, because things can just go wrong accidentally.
00:41:47.290 - 00:41:56.526, Speaker B: Right. So yeah, to your point, you need to have multiple processes in place. So if a vulnerability gets introduced in that way, hopefully the process catches it. Right.
00:41:56.628 - 00:42:30.920, Speaker A: Yeah. And review that. I mean, take all sorts of approaches for coming up with that. And be creative for not falling into group think. Like when you sort of request maybe feedback from the organization on what they think vulnerabilities are in your system, then ask for anonymous feedback so people don't fall into the group think way. There's a lot of smart things you can do that help you deal also with the weaknesses in terms of psychology of people.
00:42:33.710 - 00:42:53.390, Speaker B: Right. Okay, so back to Mark's question. So you advise not to roll your own chain, and there are options for not doing so. There's Polkadot substrate and cosmos SDK. And his question is, which projects have been successful using these and which have done well rolling their own chain?
00:42:55.330 - 00:43:18.680, Speaker A: So projects are starting to deploy. I mean, it's still early days. A lot of projects will come out with their chains or with their power chains. For Polkadot, once Polkadot is live, it might be easiest if I send some examples, if that's helpful. Also happy if there are particular things you're interested in that I can send around.
00:43:19.930 - 00:43:50.850, Speaker B: Yeah, that'd be great. I think we're still sort of the dawn of this era of building your own chain with an sort of SDK like the ones that we mentioned. But yeah, it'd be cool to see some of the early examples of that. And if you have any that are top of mind, we'd love to share them in the slack. Cool. So next one is from Stefan again. So how do we align incentives between those who write the code and review the code with those who actually lose from hacks?
00:43:52.790 - 00:44:46.290, Speaker A: Well, I guess that depends when it comes to there's, I think, various aspects here. There's a dealing with, dealing with a malicious, malicious developer that wants to short, maybe that's, I think, a specific case. I think there's interesting ideas around, not necessarily bounty programs, more like also treasury dows that could help finance the development of open source. Just in general. That's one of the things that we're also doing with Polkadot. Think about how long term in general your ecosystem is supposed to run in particular on open source. I think it's not.
00:44:46.290 - 00:45:14.060, Speaker A: So although security is again, like a key aspect in general, you want to make sure that you incentivize the contribution in the right way. So that's one of the things. Otherwise, I think it heavily depends on the application. If this is now about open source in general or if this is about, how do you do that in your organization? I think that's two very different issues.
00:45:14.910 - 00:45:33.650, Speaker B: Right. Actually, that gets to another question that I had, which is this is from me personally. And it's how do you think about hiring for security in the organization? Who are the key hires that you need to make? And how do you build an organization around it such that you can ensure the processes are being carried out across your.
00:45:37.830 - 00:46:23.970, Speaker A: That depends on what you're doing. I mean, you want to have experts for what you're delivering. At the core, you certainly want to hire people for that. But if that's very cutting edge, like, say, you're using substrate to build, I don't know, a zero knowledge proof chain, or that includes zero knowledge capacities, you'll have a hard time finding experts. Then you want people who really can think outside of the box, who are really happy to think first principles. Sit down. You will need to work with all sorts of people across the system.
00:46:23.970 - 00:47:09.214, Speaker A: Like with the early audits back in Ethereum, we were doing the same for Polkadot. Like, we work with academics that look at certain theoretical aspects of what we're doing. Then there's the commercial code auditors that, depending on their specialties, look at relatively straightforward things where they can do standard approaches like fuzzing that they know from other systems. But then for some stuff, you really need somebody who just sits down and thinks really hard about the things you're doing. And it depends. It's good to have, I mean, if you can find someone, but they're really hard to combine with, like experienced people who've seen things go wrong in this ecosystem. That's always very useful.
00:47:09.214 - 00:47:28.520, Speaker A: But I wouldn't underestimate also, it's not enough to have. You won't make things secure just because you have one expert. Right? If you're building a culture of, like, move fast and break things, then even that person can't help you with issues that will come up.
00:47:29.610 - 00:47:43.820, Speaker B: Yeah. So maybe. Do you think there's something to be gained, maybe from hiring sort of security officers, chief security officers from other more established, either software companies or some of the other domains that you mentioned in your talk.
00:47:45.950 - 00:48:22.374, Speaker A: Who probably, I think we're in a relatively special situation where we're developing technology at the cutting edge. I mean, even there, I think. Well, we did look at aerospace, which has similar issues. Or when you build a new airplane, this is a totally new thing. And there's a lot of considerations you need to make. There's a lot of rules you have to comply with all these things. And learning from that, I think makes total sense.
00:48:22.374 - 00:48:35.440, Speaker A: Some of that is not easily accessible because open source is not so core to those industries. You don't necessarily find a lot of the information, but it's certainly worth talking to people from these domains and learning from them.
00:48:36.770 - 00:48:51.490, Speaker B: Cool. Okay, so moving on to the next one. Do you have any examples of exploits that weren't at the code level? Yeah, sorry. Any examples of exploits that weren't at the code level that come to mind from your experience with existing blockchains?
00:48:54.310 - 00:49:25.734, Speaker A: Any exploits that weren't at the code level? I guess that ties back to my statement that I made. Like, security is not just code. Issues originate often in code. I mean, typically they do. That's what we're building. But then the mitigation and how you deal with them, that goes far beyond the code. Even if there is an issue in your code, you want to make sure you have the procedures in place to catch those issues on various levels.
00:49:25.734 - 00:49:44.530, Speaker A: That's the main point. In the end, we're developing code, so things that break are typically on that level. I mean, apart from all the social engineering attacks when people try to steal crypto. Right. That's a bit of a special set of issues that have come up in blockchain.
00:49:46.870 - 00:50:01.954, Speaker B: But, yeah, as you mentioned in your talk, like 51% attacks where miners of one network are attacking another. That's happened many times, and that's an example. It's not at the code level. It's at the sort of interdependent level of the ecosystem.
00:50:02.082 - 00:50:53.930, Speaker A: I mean, yeah, sure. Like those vulnerabilities. Yeah, exactly. So there's all the things that come in because we're dealing with crypto economic systems here, like 51% attacks, everything we've seen in DFI in the last few weeks, like the way how we get exposure because of market dependencies and whatnot. That's a huge thing to keep in mind, and I think it's not very well understood. It's one of the things that we also try to address with the way how we designed substrate, and Polkadot in particular, so that you can have independent economics of the application, totally independent of the economics of the platform. So one thing in Ethereum is you price all the transactions in ether in the end, because this is how the virtual machine works.
00:50:53.930 - 00:51:23.620, Speaker A: But if you design things a bit differently, which we do in Polkadot, that's not required. You can have independent economics of the runtime. And so, first of all, you don't expose your users to the underlying cryptographic token in that way. But then also, from a security and opex perspective, that's a way better way of dealing with the deployment of the application.
00:51:24.550 - 00:51:45.078, Speaker B: Okay. Yeah, that's great. And that gets right into a question from Mark, which is, do you think it makes sense to divide the security in a case where not all the transactions need the same amount of security? And if security cannot be divided, then low value transactions may have to overpay for security and compete against high value transactions.
00:51:45.174 - 00:52:39.002, Speaker A: Totally not sure I can come up with a good example, but a different way of thinking about this, where sort of similar considerations play a role. If you think of you wanted to build, I don't know, a platform for gaming people that acquire assets in a game over time. And that's like on chain, because people really want to own this. Initially, it's probably fine if such assets live in sort of a private chain setting because they're not worth much. But then once such an asset becomes worth a lot, there should be an easy transition for that asset to exist on a public chain? I think that's very similar things. Security in the end is always a trade off. Like really strong security is really expensive and always will be.
00:52:39.002 - 00:52:53.120, Speaker A: And sometimes it's also too practically not feasible. So. Yeah, totally. There's probably ways to think about it in that way, but be keen to hear any further thoughts you have on that end.
00:52:54.130 - 00:53:17.798, Speaker B: Yeah, I don't have deep thoughts on this, but it's a very complicated subject. Right. And I think it sort of gets into, as you talked about, sort of the interdependencies between chains. If you have a chain of high throughput but very low value transactions, that could be fine for that community, but also easy to attack if someone was motivated to do it.
00:53:17.964 - 00:54:08.118, Speaker A: Yeah, and I think there's a whole range, I mean, because we're just starting to see sort of more real world applications being deployed or like actual use cases being deployed that we have not understood at all and where we will have to deal with new issues coming up. I think it's also an interesting moment as, I mean, the hype has gone down, but I think also more and more people do recognize the actual relevance of blockchain. I think it's totally worth making efforts at educating sort of the more original cryptography, crypto community. I think many of them still think, like, blockchain is like, or maybe not many, but I think there's still some skepticism and talking to them because they have done a lot of good work where we all can learn from.
00:54:08.284 - 00:54:25.870, Speaker B: Okay, so next one is from Eddie and Jeff. What kind of tools, formal verification, crypto economic simulation, for example, do we need in order to make smart contracts more secure in the long term? And how should projects think about the trade off between the time and the cost of doing these verifications versus shipping.
00:54:31.170 - 00:55:13.740, Speaker A: That's a really hard one. I mean, it depends on the skill level you have in the organization. But then again, even that won't necessarily save you. There's a lot of considerations. I don't think that shipping, as much as you can compartmentalize and minimize the value at risk, like all these things. Take all these principles and try to think how you can mitigate the worst case impact outcome. I'm not sure.
00:55:13.740 - 00:55:26.080, Speaker A: Again, there is no single answer. There's all sorts of things you need to consider, and I have a hard time making a strong recommendation as I don't know what the considerations are that you're taking.
00:55:27.190 - 00:55:33.140, Speaker B: Yeah. So swiss cheese, right? Like many layers of swiss cheese. Okay, cool.
00:55:33.830 - 00:55:56.700, Speaker A: In the end, as much as you can do, try to think about how could you mitigate if certain things can come up. Definitely. Even if you decide to ship fast, make sure you're prepared for things to go wrong. Because if things go wrong, they can go awfully wrong. And you do want to prepare for that. Yeah.
00:55:57.230 - 00:56:06.414, Speaker B: Another one from Ryan is what security considerations should be kept in mind when evaluating relatively newer blockchains to build on the way.
00:56:06.452 - 00:56:30.980, Speaker A: How you can, in that framework, actually understand the attack surface and the threat modeling and how you can mitigate against those. What are the tools that the framework actually gives you in order to minimize the attack surface that you have? I think that's an important thing to keep in mind when you do this.
00:56:32.870 - 00:56:43.320, Speaker B: Okay, cool. So I know it's super late, it's past 01:00 a.m. I think for you. So I think we can pause it there. And again, thank you so much for the presentation and for answering all the questions.
