00:00:10.330 - 00:01:18.678, Speaker A: So there is a fundamental misunderstanding about the mechanics of NFT royalties. And in the ecosystem there are many ideas, a lot of people that have a lot of different theories and concepts and maybe even a little bit of drama around how NFT royalties work. But that is not what we're going to talk about today. Instead, we're going to focus mainly on the technical aspects of how NFT royalties work and why it might be important for you guys if you might want to use NFTs in your projects or companies in the future. So what is this misunderstanding? Back when NFTs started to become really popular, the big question that everyone was asking was so what? Right? Like, why are NFTs so special? Who really cares? And amongst several different answers, and of course, there are lots of reasons why we all love NFTs. One of the main ones was that NFT smart contracts enforced secondary royalties on chain so creators can earn money whenever their NFTs trade on a secondary marketplace. Now, if we pause and think about that for a second, that's kind of awesome.
00:01:18.678 - 00:02:13.410, Speaker A: Like you can have this asset floating around on the internet and anytime it change hands or anytime it sells on our marketplace, the original creator gets a portion of that sale, right? Which is a pretty powerful and new primitive that we've never really seen before in technology. However, the reality is smart contracts do not enforce NFT royalties on chain. So what are we going to talk about today? First, I'll give you some background. We'll talk about NFT royalties, how they work today, things like that. And then we'll go through the evolution of different royalty standards and potential solutions to this problem that we just outlined. And hopefully by the end of this, I'll give you some recommendations that you guys can all take away to incorporate into your own projects. So first, I think it's important to define what is a royalty and taking this directly from investopedia.
00:02:13.410 - 00:03:01.042, Speaker A: A royalty is a payment made to an individual or company for the ongoing use of their assets. Now, how does this relate to NFTs? What's an example? Well, let's look at an artist, right? Let's say you're an artist. You create this really cool piece of art and you sell it as an NFT. The idea is because we love composability and interoperability in the ecosystem, if that NFT changes hands or trades or sells on any marketplace, a percentage of that sale price will be taken and go back to the original creator. That's like the high level of what a royalty is and what we're going to be talking about today. Now, I'm sure many of you have heard about this thing called ERC, seven to one. But for those of you who haven't, ERC, seven to one is the standard, it is the specification of what actually is an NFT on chain.
00:03:01.042 - 00:04:06.826, Speaker A: What's the code? How is state managed? What's the function interface? And if you actually went and read EIP seven two one or ERC seven two one, what you would recognize is there's actually no requirement at all for there to be any enforcement of payment or royalties on chain. So up here on the screen, I put a snippet of code. Hopefully it's not too hard to see. This piece of code is the open Zeppelin implementation of the ERC seven two one transfer function. Essentially, it defines the logic of how an NFT will move from one wallet to another. If you went through this piece of code line by line, every single bit what you would recognize is at no point in this code does it say anything about a sale price, a percentage, taking a percentage of that sale price and giving it back to a creator that's not included in this at all. Okay? Now if you did actually go nitpick the standard, what you would also notice is it does say that you may put a fee into this transfer function.
00:04:06.826 - 00:04:53.162, Speaker A: It's certainly something that you can do and there are a few ways that you could do it. It's not a super technical lift, but even still, there is no standard around it. So if a project did want to enforce a fee in the transfer, it would be project specific and chances are everybody would be doing their own thing. There would be no composability and there would be no interoperability between projects. So given all of this, why hasn't anyone done this yet? Like, why hasn't someone just said, okay, well, let's just make this royalty standard and actually enforce a fee on transfer? Well, it's because there are a few challenges. Now, again, the point of this talk is to not go through these challenges in detail, but I'm going to give you a high level overview of what some of them might be. And afterwards I'm happy to answer some more questions.
00:04:53.162 - 00:05:33.750, Speaker A: So the first is that let's say you wanted to enforce a fee, and let's make it simple. So maybe instead of doing a royalty percentage, we just made it $1. Anytime you transfer this NFT, the creator is going to take $1 from you. A user in the ecosystem can always just wrap the NFT, right? So they can kind of pay this sort of exit fee. And what I mean by that is, let's say they pay you $1, but instead of sending this NFT to another wallet, they send it to a smart contract. And that smart contract locks that NFT and issues a new one to you, thereby wrapping it that has no royalty restrictions at all and can trade completely freely across the ecosystem and the blockchain. So that's wrapping.
00:05:33.750 - 00:06:30.834, Speaker A: The other issue is what happens if you want to transfer it to yourself. We're all in crypto, we all have lots of wallets. What happens if you're trying to move your NFT from one of your wallets to another, maybe from a hot wallet to a cold wallet, it's you right, you should not be paying a fee to do that. And finally, the more stuff that you add to this transfer function, whether it be a fee or any other rules, you're basically limiting the composability of that NFT. Again, I know these are super high level topics, happy to answer more questions about them. But now that we know all of this, given that we know that we can enforce them on chain, how do royalties actually work? Like, what's really going on? Because we've been talking about it since the beginning, what's really going on is the marketplaces are honoring these royalties behind the scenes. So as a creator, what you need to do, or guess what you used to need to do, is you had to go to each marketplace manually and tell them, hey, these are my royalties.
00:06:30.834 - 00:07:35.518, Speaker A: This is how much I want to charge if my NFT ever sells. And this is the address that should receive that payment. Okay? Now, in a space that loves composability and interoperability, that's incredibly impractical, right? We know now that there are lots of marketplaces on the blockchain, and anybody can very easily fork one or deploy one, and there could be potentially infinite marketplaces. And it's a lot to ask for a creator to actually go to each marketplace and ask them to manually recognize their royalty and store it in their database. So if we can't enforce royalties in the smart contract, and we don't want to have to go and tell every marketplace what our royalty info is, what's the next best thing? What can we do to maybe help this problem along a little bit? So now we're going to transition into what are the royalty standards today and the state of the art of NFT royalties. So the first is something known as EIP 2981, which is the NFT royalty standard. Now, this is super important.
00:07:35.518 - 00:08:24.454, Speaker A: I cannot stress this enough. This standard does not enforce royalties on chain. A lot of people misrepresent it. It does not, okay? Rather, all it does is take your royalty info as a creator, which is who should get paid, what's, the wallet that should get paid, and how much should they get paid, what's that royalty percentage or the royalty fee? It takes that data and let's just put it on chain. Let's put it in the smart contract itself, move it from the centralized databases of the marketplace in the first example that we discussed, and let's just put it in the contract. Now all a marketplace needs to do is simply query your NFT contract to know what it should do. Okay? So the small snippet of code I have here is the 2981 standard, which is a function that's called royalty info.
00:08:24.454 - 00:08:59.334, Speaker A: And you can kind of see it takes in a sale price and returns to you who should get paid and how much. And the idea is that if a marketplace sees your NFT contract is trading on their marketplace, they can query this function, know the data, and hopefully honor your royalty. So that's great. But there's a small issue with this. The issue is it's not backward compatible at all. So if you have been creating NFTs on chain since way before the standard existed, you're kind of out of luck, right? There's nothing you can do. Sure, if you made your NFT contract upgradable, maybe it would be okay.
00:08:59.334 - 00:09:34.594, Speaker A: But the reality is, most people haven't done that. Most people are just using the standard open zeppelin or other variation of an ERC seven two one contract, and they're out of luck with this issue. The second problem is the people who created 2981, this is not just their idea. Actually, before this, a lot of marketplaces such as foundation and Zora and Rarible and many others had their own version of this. It accomplished the same exact thing. It returned to you the information that you needed to pay a royalty. But what the difference was, is maybe instead of calling it like royalty info, it was called royalty data.
00:09:34.594 - 00:10:23.042, Speaker A: And maybe instead of returning the actual royalty amount, maybe it just returned the royalty percentage and basis points and they all did the same thing, but they were all kind of a little bit different. And therefore, a marketplace really has no standard to follow. It can't just go accept every single one of them. So how do we take EIP 2981 and make it backward compatible and also solve this problem of a lot of standards floating around that accomplish the same thing? This is where the manifold royalty registry comes into play. So the manifold royalty registry is a canonical on chain registry that does two things. First, it wraps all these existing standards that I just mentioned. So foundation standards and wearable standards, and EIP two nine one as a standard, it wraps all of them.
00:10:23.042 - 00:10:55.306, Speaker A: Okay? So it doesn't matter which one you implemented, it's going to encompass everything. The second thing that it does is it makes it backward compatible. So even if you did not actually implement EIP 2981 in your contract directly, you can go to this registry today, put your royalty information, and you're good to go. So let's look at a quick example of what this might look like. Hopefully you can see this image. This is actually a clip from the royalty registry website. You can access all of this on chain, but this is just the UI that they created.
00:10:55.306 - 00:12:02.066, Speaker A: And it's pretty simple. You put in a smart contract address, you put in a specific token ID that lives within that smart contract, and then you put in a sale price, and the registry will just return who should get paid and how much they should get paid based on the sale price that you input into the UI. So what's the benefit of this? The first benefit is that you have a decentralized registry that a creator can set it and forget it, right? They can go here, this one place at one time, upload their royalty information, and they're done, right? And the idea is now all marketplaces, hopefully, if they agree, will just have to come to this one registry, query this one place, and get all the information that they need. Okay? So it makes it both easier for creators and also it makes it easier for marketplaces. But there's still a small issue with this. The problem is that marketplaces can still ignore the registry, right? Remember in the beginning we talked about enforcing this royalty, but this just makes the royalty data itself, the information, decentralized. But it's not forcing a marketplace to do anything.
00:12:02.066 - 00:12:47.086, Speaker A: They still have to be honest. They still have to be good parties in order to honor this royalty. So what can we do to get a little bit closer to this pipe dream vision of forcing a marketplace to honor our royalties? This is where the operator filter comes in. The operator filter is at a high level. It's simply a block list that allows creators to prevent their NFTs from selling on marketplaces or interacting with certain applications. It's important that as I go into this idea of an operator filter, it's not just marketplaces, it's really any application. Okay? What's really awesome about this idea is that you can enforce this on chain.
00:12:47.086 - 00:13:37.646, Speaker A: This is something you can put in your contract that enforces how your NFTs compose with the rest of the ecosystem. And the reason why that is, is because this doesn't necessarily apply to everything. But for the most part, any NFT application, whether it's an NFT rental protocol or a marketplace, generally requires the user to approve a smart contract to transfer an NFT on their behalf. So in the context of a marketplace, they might approve their asset, their NFT, to a marketplace, thereby listing it on the marketplace. The marketplace will go accept bids and offers. If something matches, then they will transfer you the money as the seller and remove the NFT from your wallet into the buyer's wallet. Okay? So because you have this marketplace is actually functioning as a smart contract on chain.
00:13:37.646 - 00:14:16.990, Speaker A: You can block them using the operator filter. But how does it work? What's actually going on inside this operator filter? It does two really cool things. The first thing it lets you do is block a specific address. Okay? So like I said before, a marketplace you can think of as a smart contract on chain that is located at a specific address, and I can just block that one address outright. So if marketplace A in the image example here is, let's say, deployed at address zero x one, two, three, et cetera, I can just block that address. I can block zero x one, two three from ever interacting with my NFT. So that's great.
00:14:16.990 - 00:15:32.054, Speaker A: But we also know that there's a common pattern in the ecosystem where it's pretty trivial for somebody to fork a GitHub repo and redeploy code, right? So if I go and block marketplaces zero x one two three, it's very easy for someone to just say, okay, well, I'm going to go redeploy that same code to zero x four five six, get around your block list and allow people to trade your NFT on our marketplace. But there is a clever solution to that, which is something called a code hash. A code hash for those of you who maybe aren't super deep in cryptography, is simply a unique digital fingerprint of the source code of the application or marketplace itself, right? So we're going to take a unique digital fingerprint of that source code and we're going to block that fingerprint. So now, even if somebody goes copies marketplace A 30 times on chain, it doesn't matter. The block list is still going to block all of those forks, even if it doesn't know exactly which addresses they're deployed to. Now, this is a really good step in allowing the creator to have control over how applications interact with their NFTs. But again, it's not technically perfect, right? There are still ways, a lot of ways to get around these issues, and I'm happy to talk about that again in A-Q-A.
00:15:32.054 - 00:16:07.620, Speaker A: But now that we know pretty much how to create a block list to prevent certain applications from interacting with their NFTs, what do we filter? Well, you have two options as a creator or a project. The first option is you can curate your own block list, right? You could have a lot of trust in yourself. You could be a really good on chain Saluth. You can go be up to date on every single marketplace and application that's coming out in the NFT space. Make your own judgment about whether or not you want to allow your NFTs to interact with that application and create your block list on chain. So that's your first option. Make your own.
00:16:07.620 - 00:16:43.340, Speaker A: The second option is maybe you don't have time to do that. And there are a lot of smart people. One group is called Corey, which is the Creator Ownership Research Institute, which is basically composed of a lot of popular companies and marketplaces in the ecosystem such as Zora, OpenSea, Manifold Foundation, Nifty Gateway, and others. And just basically, let's just let them do it, right? Let's delegate the decisions of who gets to be on this marketplace to that group, to us. And this way, as a creator, you don't have to worry about it. You just say, let's go, let Corey figure it out. Whatever they do is probably fine and we're all good.
00:16:43.340 - 00:17:29.206, Speaker A: Now, obviously you can imagine there are some tradeoffs between the two, right? In one version of this you have complete control. In the other, you don't. And maybe you don't necessarily agree with all the decisions that Corey might add to this block list. So to go back to the beginning, we started with this idea that you cannot enforce a royalty on chain. But maybe we could just take the royalty data on chain. Let's just put that information on chain using the Manifold Royalty registry and then if we want, we can get closer to enforcement using this operator filter. So, given all this, what's your takeaway? Right? If you guys want to use NFTs in your projects, what are things that you should keep in mind? The first, just register your royalties in the Manifold Royalty registry.
00:17:29.206 - 00:18:08.870, Speaker A: It's very simple. It costs a few dollars of gas, very little technical lift. This should be a default for anyone here who does want to use royalties for their NFT. The second thing you should do is use an operator filter even if you don't want to block anybody, right? So it takes no effort to just put this operator filter code in your smart contract today and just leave it blank, right? Because the space is changing every day. We have no idea what's going to happen tomorrow. We have no idea what applications you may or may not want to allow to interact with your NFTs. So just keeping this code in your contract gives you full flexibility and optionality to change it later.
00:18:08.870 - 00:18:42.406, Speaker A: So put the operator filter in your contract. And finally, like I said, the royalty discussion is literally changing every day. Some of these things that I talked about today were created in the past few months. So it's important that we don't make any rush decisions and regret those decisions in the future. So if you're going to create an NFT, make sure that the NFT is extensible. Now that's very different from being upgradable for anyone who's technical. You understand that you can very easily create an upgradable smart contract.
00:18:42.406 - 00:19:35.750, Speaker A: That is certainly an option here. But if you don't want to do that because maybe you don't want to have all the control and you want to be more on the decentralization front, well, if that's the case, then you can make your NFT extensible. So what do I mean by that? There are many standards in the ecosystem today, not maybe not as popular, but they do exist, such as modular NFTs, the manifold NFT contract itself, the ones who made the royalty registry, their NFT is also extensible. And what I mean by that is you can add plugins to your NFT. So in the case of the operator filter example, that actually requires you to do a lot of on chain code. Well, if, you know, released, let's say, a manifold NFT months ago, before the Operator Filter even existed. Because of the way that the contract is structured, it is very easy for me to literally add in a plugin to that contract and use the Operator Filter today, even though I deployed this contract months ago, before this idea even existed.
00:19:35.750 - 00:19:45.342, Speaker A: Right. So you want to give yourself this optionality because we really just don't know what's going to happen in the future. That's all for me, guys. I'm happy to take any questions.
00:19:45.476 - 00:20:07.800, Speaker B: Hi, thanks for the great presentation. Royalties is something I've been thinking about a lot. And honestly, when I first found out that they weren't baked into NFTs, I thought that was the whole point. Have you seen any examples outside of the block list of people trying to implement royalties or has their research been done that shows it's just not possible to do it at the contract level?
00:20:08.170 - 00:21:04.806, Speaker A: Yeah, so the really funny part about it is it actually is possible and it's really not that hard. I did this the other day. I went to Chat GPT and I just said, write a smart contract that enforces royalties. And it did it. It's not that it's hard to actually implement, it's more that there are so many ways to get around it, right? So you can kind of think of it like this. If I'm going to enforce a royalty on chain and enforce the fee, it's almost like putting a whole entire marketplace architecture within the NFT contract itself, which means that the transfer function needs to be aware of what the sale price of the NFT is, right? So you can almost think about like, how do we interact with marketplaces today? The person who owns it has to list it and then someone has to come and buy it, right? You have these two things going on, so you could very easily put that into an NFT contract. But there are ways to get around it.
00:21:04.806 - 00:21:33.522, Speaker A: So for example, let's say the ideal world is we built it all in and it's all good. Well, that's fine, but it's also then really trivial for me to create kind of like an OTC marketplace around it where maybe I just allow everyone to transfer for a price of zero. And if the price is zero, anything multiplied that is zero. Royalties are zero. Right? So that's like one issue with it. The second issue is, let's say I wanted to enforce anything above zero. Whatever this sale price is can't be zero.
00:21:33.522 - 00:22:17.194, Speaker A: Okay, well, you could still do one, right? So that's one thing. The other thing is the dynamics start to get super weird when I'm transferring to a contract, right? Like, imagine I'm doing a transaction between a user and a contract. Maybe I'm depositing this NFT into some other NFT protocol for something. Well, who's paying that fee? Is the smart contract paying that fee? Probably not, right? That's kind of weird. So it's not that it's impossible, it's just that it's pretty easy to get around. Now, what I have seen though is there are people who are thinking about other mechanisms for allowing an NFT project to make money as their NFT changes hands. That might be things such as a subscription.
00:22:17.194 - 00:22:56.106, Speaker A: So some sort of subscription concept. It could be something like a harbinger tax, another idea, and finally the other maybe not so technical solution is, well, if we have a standard to just detect whether or not a royalty is paid so we know we can't enforce it. But let's just say we had a standard maybe like some event log that gets emitted every time there is a transfer to indicate whether or not a fee was paid. Well, then the people who are running these projects can see that happening and therefore they could come up with rules like, okay, well, if you didn't pay your royalty, then maybe we're not going to admit you to our discord, or whatever it might be.
00:22:56.208 - 00:22:57.066, Speaker B: You lose the benefits.
00:22:57.168 - 00:23:04.670, Speaker A: Yeah. So again, there's trade offs to all of these solutions, but these are definitely a few that people have been talking about. Yeah.
00:23:04.740 - 00:23:46.602, Speaker B: I'd want to send you one implementation I was working on that I'm kind of like momentum based or something where basically every trade has to be within a like, you keep track of the previous price it was sold for and the next transfer function would check. Like the new price has to be within, say, 20% or 30% of the previous price, otherwise it fails. And let's say the last time you transferred it was like two E. It does limit it. That the next price, the lowest price you can sell it for is like, say, one ETH, but it would prevent the transfers. But yeah, sure.
00:23:46.656 - 00:23:48.062, Speaker A: I have to check about it. Sounds really cool.
00:23:48.116 - 00:23:50.062, Speaker B: Yeah. Thank you.
00:23:50.116 - 00:23:50.800, Speaker A: Of course.
00:23:52.770 - 00:24:35.110, Speaker C: Hey, thanks, Michael. Fantastic talk. I think that was spot on. So one question I have is this idea of impossible to enforce royalties at the smart contract layer? I think you've outlined a couple strategies that make it more plausible than what the mainstream may think. For example, when you talk about the filter registry, that sounds like it's a form of almost limited ownership where you're checking the EOA of the destination address. I mean, in some sense you could use that to limit the ownership, to not allow wrapped contracts that don't have a code hash that has kind of like proven that it's not going to act in that way. Why not just create a new standard that takes advantage of those features and take a stand at the contract level versus delegating this to other platforms?
00:24:35.190 - 00:25:10.070, Speaker A: Yeah, so that's a great question. And by the way, it's not that it's impossible. It's just that, again, there are challenges with it and yeah, there is certainly an option to create the standard. And I think what this is showing, in my opinion, like, all the drama that's kind of going on in the space is not every project is the same. Right. And it might make more sense. So, for example, if I'm an artist and maybe I'm only releasing one of ones, it might be fine for me to just enforce a royalty and be a little bit stricter with that on chain because maybe that fits the role of an artist more.
00:25:10.070 - 00:25:42.562, Speaker A: Right, but maybe some other project that has hundreds of thousands NFTs floating around, maybe that it doesn't necessarily apply to that as much. Right. Because maybe that NFT wants to be a little bit more composable. Right. So I think it just depends on the goal. And what I sort of imagine might end up happening is you're going to see people taking their own stance, right. So maybe instead of there being like, hey, this is the standard that everyone has to implement, artists might do this, big brands releasing NFTs might do this, people who are making games might do this.
00:25:42.562 - 00:26:25.710, Speaker A: You're going to see a little bit of fracturing across it. As long as if there is going to be a standard, as long as people can accept it, I think that's fine. The other thing too that I'll say about checking the EOA, because you're 100% correct. Something that I've talked to on our team is like, there are other ways to wrap an NFT contract, which are like, you could do Darren on our team, hopefully you'll meet him here at some point, has this idea around burning NFTs and how if you can provide a proof of burn, then you can actually issue a new NFT to the owner. Right. So there's definitely a lot of ways that you can still get around it, which is good, by the way. Actually, that's not a bad thing.
00:26:25.710 - 00:26:53.270, Speaker A: The point of crypto is you have this decentralized ownership. If I actually do have control over this NFT, I should be able to do with it what I want. Right, but the other side of the spectrum is, well, you're kind of entering into with the operator filter, you're entering into permissioned composability. Right. Maybe the project creator has too much control over what you can do with their NFT. But again, I think it's going to be project specific.
00:26:53.420 - 00:27:08.310, Speaker C: Yeah, I completely agree. That's my thesis as well. I think with Share, for example, we think a lot about just decentralizing decision making. And yeah, every project might be different, but I think it's important in the space to educate that this word impossible may be like a misnomer. It's more so are you comfortable with the trade offs?
00:27:08.390 - 00:27:14.526, Speaker A: Exactly 100%. It's not impossible. There's a trade off spectrum and you just got to know what that is and be comfortable with it.
00:27:14.548 - 00:27:14.942, Speaker C: Thank you.
00:27:14.996 - 00:27:15.760, Speaker A: Of course.
00:27:16.610 - 00:27:49.866, Speaker D: Thanks for the talk. I think it's very fascinating to see how we can just enforce these things that are outside of the blockchain. And I was thinking, is there a way to kind of just incentivize people to not do that? So maybe writing standards where the creator can claim back the NFT if they can prove that it has been traded on other marketplace. So I think some deterrence may go a long way versus trying to enforce because just decreasing the cost. Of doing it, if that makes sense.
00:27:49.968 - 00:28:25.374, Speaker A: Yeah, exactly. So that's sort of like the idea of if there is an event log that you can emit every time there was a transfer that indicated whether or not a royalty was paid when this NFT was transferred. Now the project can basically say, okay, well we can see whether you did it or not, so therefore we're going to allow you in the discord, we'll provide you utility, et cetera. So they can definitely come out with that stance. The other weird incentive too is who pays the royalty because today it's the seller. The seller is paying the royalty. The seller who's selling the NFT is leaving, they're leaving the ecosystem.
00:28:25.374 - 00:29:33.446, Speaker A: So they don't really care if they pay the royalty because they're gone. But then the buyer is kind of like, well they're out of luck, right? Like I just bought this NFT, but if they didn't pay the royalty, then maybe I won't get the utility, but I'm happy to pay the royalty. So how do I do it? Right? So there's definitely, certainly a mechanism that can be put in place that a project can say, listen, if we can see that this NFT did not pay a royalty the last time it was transferred, the current owner can certainly top it up and pay the royalty to get access. I would caution against giving creators too much control over pulling NFTs out of people's wallets, I think, because that sort of starts to go back on a lot of what makes NFTs so incredible. If I own an NFT, I really want to be sure that it is mine and it's in my wallet and nobody can take it away from me. As soon as you start to add those other rules around permissioned, ownership, not to say that it's a bad thing and I think it might work for certain projects depending on the application. That is a little scary to me because all of a sudden one of the key reasons why NFTs are so amazing is because of authentic ownership.
00:29:33.446 - 00:29:39.390, Speaker A: And if I don't actually have that assurance on chain, I might be a little scared.
00:29:39.810 - 00:29:46.958, Speaker D: Okay, thank you. Wondering why so Open Zeppelin, for example, why don't they include a hook to.
00:29:46.964 - 00:29:52.254, Speaker A: The operator filter in their contracts? If it becomes part of a standard.
00:29:52.292 - 00:29:56.274, Speaker D: Or is looking like it's going to part of a standard, it shouldn't affect interoperability as much.
00:29:56.312 - 00:30:41.150, Speaker A: Right? Yeah. So what they do have is actually maybe me just because it'll be good to look at this. Okay, so what OpenZeppelin does have is this thing called the before token transfer hook which allows if you're just like copying and pasting the standard and deploying it, it's going to be empty that piece of code like right here, it's not going to do anything. But if you did want to develop, you could basically within that hook put the operator filter and also, to be honest, with you. The operator filter is like less than a month old or maybe two months old. So I do think that eventually it will be added. But here's the thing with the operator filter as well.
00:30:41.150 - 00:31:31.850, Speaker A: I don't know if you've seen the open zeppelin wizard where you can kind of like plug, you can click different options. I could imagine there being an operator filter in there, but even within the operator filter, there's so many options, right? Because like I said before, you could subscribe to somebody else's code, which is that's going to require a much different implementation. And there's also like, if you wanted to curate your own, there are different ways you can do it. And I don't want to get too technical, but you can put this curated list directly in your contract, or you could actually deploy another smart contract that hosts the list. And when you do that, the NFT and the block list can be separate from each other. So, for example, let's say you, as the creator, need to transfer ownership of this block list to your community or to somebody else. You can do that.
00:31:31.850 - 00:32:07.566, Speaker A: It gives you more flexibility. So even within the operator filter, there's so many variations to go, but I could imagine them putting something in for that. The other thing too, I'll say is, I know I mentioned manifold. If you have used a manifold contract, they actually do have this. So when you go and deploy a smart contract on their website, you can click a button and when you click that button, it will add in this operator filter into your contract for you without you having to write any code. But by default, that version is completely curated. So you're not going to subscribe to the quarry one, it's going to be the one that you you choose to make.
00:32:07.566 - 00:32:09.600, Speaker A: Got it. Thanks. Of course.
00:32:11.090 - 00:32:11.550, Speaker C: Awesome.
00:32:11.620 - 00:32:13.980, Speaker A: Well, thank you so much, Michael. That was great. Thanks, guys.
