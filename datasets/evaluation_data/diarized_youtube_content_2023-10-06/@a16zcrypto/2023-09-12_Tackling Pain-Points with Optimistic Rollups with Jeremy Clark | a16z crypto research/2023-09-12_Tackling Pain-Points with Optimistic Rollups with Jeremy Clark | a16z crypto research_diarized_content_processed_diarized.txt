00:00:07.320 - 00:00:07.870, Speaker A: You.
00:00:09.920 - 00:00:10.780, Speaker B: Welcome, everybody.
00:00:10.850 - 00:00:36.292, Speaker A: We're really glad to have Jeremy Clark here today. He's an associate professor at Concordia. So I've known Jeremy for about ten years, since he was a postdoc and I was a PhD student and he worked on the Bitcoin textbook and course with us. He's done a lot of great work all over the Bitcoin space, and he's also this year's FC program chair. So keep that face in mind to complain to if your papers don't get in. Absolutely. Thanks.
00:00:36.292 - 00:00:37.056, Speaker A: Take it away, Jeremy.
00:00:37.088 - 00:00:37.776, Speaker B: Thanks, Joe.
00:00:37.888 - 00:01:20.028, Speaker A: Yeah, so I was actually going to put a slide at the very end encouraging you to submit to FC. I forgot to put the slide in, but this is your welcome message to sending your papers. I know a bunch of you that I've already talked to are considering it. Okay, so since I'm here for the rest of the week, I thought I would just give you kind of a quick overview of the kinds of things I work on so we can have some conversations and then I'll get into the actual main body of the talk itself. So I cut my teeth on cryptographic voting. So this is where you can have a proof that your ballot is included in the final tally. It wasn't modified by anyone, but you still have some sort of ballot secrecy or ballot privacy.
00:01:20.028 - 00:02:06.610, Speaker A: We took these systems and we tried to make them like a real world system that you could actually like, humans can vote on, not computer scientists, but actual voters. So we ran a municipal election in Tacoma Park, which is outside of Washington DC. And anyway, so I've done a bunch of other stuff on voting, more theoretical results, blockchain intersection. In terms of taking traditional voting and putting it on blockchain, I'm kind of on the skeptical side, but in terms of doing on chain voting for on chain things like DAOs, I think that's really like a cool application of voting. And I know that that's some of the stuff that so of the government thing, this is what I'll say. I won't give you the long technical answer. I'll give you the fun answer.
00:02:06.610 - 00:02:39.608, Speaker A: And I kind of stole this from Benedicta. But when you want to do cryptographic voting or just voting in general, you have like ten problems that you want to solve. So think of them and blockchain solves like the 8th problem on your list. So it's not like completely useless. You can use it. It gives you a secure bulletin board, but it's not like your top priority when you're thinking about all the things that you need to do for voting. By the way, wasn't that your first paper about yeah, so actually, Tacoma Park elections are sitting on bitcoin's blockchain.
00:02:39.608 - 00:03:20.644, Speaker A: So a lot of people don't know that this is a government US, like a binding US election. And the election data for it is on bitcoin's blockchain from back in 2011 because it actually kind of solves a security problem that we have that I won't go into, but you can ask me about it later. Okay, what else? So now we do a lot of things mainly on Ethereum students, like Ethereum, there's good tooling and things like that. So we try and deploy things on it. We've looked at some things that are kind of purely cryptographic. So like recently we put a publicly verifiable multiparty computation on Ethereum. Super expensive.
00:03:20.644 - 00:03:45.804, Speaker A: Doing a single gate is like going to blow the gas limit. But anyways, it was a fun project. And then we do more like finance things. So like on chain order books, stablecoins lending protocols, that type of thing. We also like protocols that aren't on the chain, but they concern blockchain assets. So with Joe, we looked at proof of solvency. We've also looked at different upgrade mechanisms.
00:03:45.804 - 00:04:09.530, Speaker A: How do you get a contract that's immutable, but you still want to upgrade it? And so it's actually a very interesting field. And then there's a couple of attacks. We wrote the first paper on cryptojacking, which became a big thing, and other stuff on proof of solvency. I'll just bend your ear for 30 seconds about it. I think this is still an interesting problem. So it kind of went away. And then with FTX, we've seen a kind of resurgence in it.
00:04:09.530 - 00:04:37.490, Speaker A: I've heard from multiple people that we need standards. Part of that is motivated by the fact that what exchanges are doing now is insecure. So they just kind of roll their own proof of solvency. And most of them are also not strictly a proof of solvency. Says that your liabilities are okay and your assets are okay as well. Most of them just prove the liability side, not the asset side. And I also think it's interesting to apply like ZK Snarks to the problem.
00:04:37.490 - 00:05:15.564, Speaker A: You can obviously do it at the circuit level, that's fine, you can do anything in a circuit. But in order to make like a custom IOP for this particular problem, I think that's interesting in particularly on the asset side, because your assets like, say it's an Ethereum asset, then it's an ECDSA key. It's not a pairing friendly group, it's not the same cryptographic group that your Snark is in. And so you have to figure out how you're going to do some sort of translation between groups. I also like SOKS systemization of knowledge. So these are papers that kind of like surveys a little different, but we try and look at things. We look at the history of things as well.
00:05:15.564 - 00:05:45.380, Speaker A: I like reading old papers. In terms of the Bitcoin textbook, we did this type of thing. This was one of our popular articles, bitcoin's Academic Pedigree. It shows all the different kind of streams of thoughts that predated Bitcoin that get merged into Nakamoto Consensus. Then we've looked at other things. So front running. Even before mev, we did an Sok on front running stablecoins Oracles auditing, like a traditional financial audit.
00:05:45.380 - 00:06:34.404, Speaker A: My research share is sponsored by an auditing company, so we think about those types of issues as well. And then there's a bunch of non blockchain things that we've looked at, like HTPs and encrypted email, secure email, PGP, that kind of thing. Also like time, anything that has to do with crypto and time, that's like something that Joe and I both are kind of obsessed with. So the election thing that I mentioned earlier, the reason it's on Bitcoin's blockchain is it has this carbon dating property which I won't go into, Love Beacons. We did a recent paper on short lived signatures and zero knowledge proofs. So these are proofs that are valid for like say an hour, you can parameterize it any way you want, and then after an hour you don't believe it anymore. Or it's a signature that if you are able to check it in the first hour, you believe it.
00:06:34.404 - 00:06:58.360, Speaker A: Otherwise it kind of dissipates naturally. There's no second round. You don't have to send a message to kill it or release a key or anything like that. It just naturally decays. And then we looked at something called one time programs as well. Recently I've also become more involved in central bank digital currency. So I'm sure you've heard of the fact that lots of central banks want to do some sort of digital currency.
00:06:58.360 - 00:07:51.064, Speaker A: The area that we feel we can contribute the most is on privacy. It's very unclear what the privacy model should be for a CBDC, how you balance the interests of law enforcement with privacy enthusiasts, with data brokers that want to commercialize financial data. And so there's a bunch of kind of ad hoc cryptographic kind of stuff where people are like, oh, you should have accountability, but if it meets this rule, then law enforcement can have access to it. And so we are kind of critical of the rules because we think they're way too simple for a realistic CBDC. Like you can't actually solve crimes with the kinds of rules that are in the literature. And so anyways, this is like an ongoing discussion and we're working with people at different universities and central banks as well, or the bank for International Settlements, which is overseas central banks. We also do fun projects.
00:07:51.064 - 00:08:39.630, Speaker A: So one time we read 400 USNIC security papers. We looked at just the first sentence of the paper and we were interested in how is it that the author kind of draws the reader in? What is it they say? Is it some boring thing like since ancient time humankind has sent messages or are there interesting cases? This is kind of like the map of so the bigger the square is, the more popular that type of category was. And I think Joe's paper, one of his made the top five. I didn't know it. So we picked our favorite five, like blindly, and then he said, oh, that was one of my papers. So anyways, we have a blog post as well, if you don't want to read the boring academic paper. And you can see all of that stuff.
00:08:41.440 - 00:08:41.900, Speaker B: Okay.
00:08:41.970 - 00:08:42.924, Speaker A: So, yeah, go ahead.
00:08:42.962 - 00:08:44.736, Speaker C: How does the academic paper start?
00:08:44.838 - 00:09:02.068, Speaker A: How do which? How does this paper yeah, so we actually spent a long time so let me read it to you. So we say, what makes the writing style of an academic paper stand out? So it's a question, and actually a lot of papers don't start with questions. So questions is this little yellow box here.
00:09:02.234 - 00:09:02.660, Speaker B: Okay.
00:09:02.730 - 00:09:17.716, Speaker A: So there was only, I think, one other paper in our whole sample that started with a question. The one I like is narrative. So you kind of tell a story in the first sentence. I think that's interesting. It kind of like draws the reader in and then yeah, there's lots of different things. It's good to pick this conference.
00:09:17.748 - 00:09:23.790, Speaker D: There's other conferences I go to where we've gotten 400 copies of let G be a graph, right?
00:09:24.400 - 00:09:56.468, Speaker A: Yeah. So it'd be interesting also to run this, not for using security, we just pick something representative for our field and see if the writing improves across different conferences or it gets worse. Okay. I can spend the whole hour on this if you want, I can show you lots of examples, but maybe I'll move on to this. Okay, so I want to talk to you about fast withdrawals from optimistic roll ups. I do a lot of crypto. This paper has zero crypto, so I apologize to some of you who are more on the crypto side.
00:09:56.468 - 00:10:36.244, Speaker A: But this was the one that I thought I picked. It's kind of work in progress, so it's not published yet. So if you have feedback on it, I welcome the feedback, and it's collaborative work. So my PhD student Masa Misevi, who's also an engineer at Off Chain Labs, my former graduated master student medie salehis at Off Chain Labs, their colleague Daniel Goldman, and then myself. Now, everything I say is going to be about Arbitrum, but it could be about optimism. So there's zero maybe, like, the small technical details, but basically none of this is specific to Arbitrum. But I'll use Arbitrum as the running example.
00:10:36.442 - 00:10:36.948, Speaker B: Okay.
00:10:37.034 - 00:11:17.564, Speaker A: So before getting to the problem we want to solve, let's think about what's the problem that optimistic Rollups try to solve. And it's basically the scalability issue that we have with blockchain protocols. And the scalability issue, if you want to reduce it down to something really simple, you can think about it as in comparison, say, to cloud computing. So in cloud computing, you also have a big network. There's lots of nodes. I have some method, I want it run, and what I'll do is I'll just pick the nearest node to me, or the system will give it to me, and then that node will run the method, and I'll get my results back. By contrast, when I broadcast to a blockchain network, every single node has to run that computation.
00:11:17.692 - 00:11:18.370, Speaker B: Okay?
00:11:18.900 - 00:11:57.304, Speaker A: And then they have to run a consensus mechanism to make sure they all agree that z is the proper output. And then if that's not bad enough, even nodes that will join in the future often will have to go historically through every transaction to recover the current state of the blockchain. So all those nodes are going to run my method too. Okay, so there's lots and lots of people that are running this computation that I want run. And you can see why this just sort of is categorically different than kind of like a cloud computing thing. Regardless of what kind of scalability solutions you have in mind, it's going to be a tough problem to make this competitive. So there's a couple of basic approaches.
00:11:57.304 - 00:12:57.760, Speaker A: Again, these are high level glossing over all the technical details, but you could try and have some subset of the nodes run. So this is called sharding. Another idea is you could have one node actually run the computation, figure out what the result is, and then issue a proof that this is the correct result, pass the proof to all the rest of the nodes, and all the rest of the nodes now just have to check a proof as opposed to rerunning the computation. If it's some sort of snark, it's going to be a lot faster to check the proof than it is to run the computation. And so in this case, the purple node is doing a lot of work and the blue nodes are doing almost no work. Okay, so it depends on the ratios of purple nodes to blue nodes and how much work it is for the purple node to figure out whether this makes sense or not. But usually for most scenarios involving blockchains today, this makes a lot of sense, like the economics work out and it will actually save you computation in the long run amortized across the whole network.
00:12:57.760 - 00:13:31.772, Speaker A: Okay, then. Optimistic roll ups. So what's the deal with optimistic roll ups? So optimistic roll ups are also the idea that you'll send your method to like say one node on the network, but instead of them issuing a zero knowledge proof that it's correct, what they'll do is they'll just stake an amount of money and say, I certify that this is correct. And if it's not correct, then you can dispute it. And if you dispute it, then I could end up losing money. Okay, so all of the nodes in this case, they simply record the output. They don't compute it itself.
00:13:31.772 - 00:14:16.410, Speaker A: So they didn't recompute the output to figure out what the output is, they just record it and then they just sit around and wait. And eventually if no one disputes it, then they say, okay, this is considered final and so we'll go through those details in a bit. So Arbitrum is one example of an optimistic roll up. This was a USNIC security paper quite a few years ago and now it's a company. They have a product that runs in the space of L2s. It's the one that has the most successful by a lot of different metrics, including the largest market share of total value locked. And recently there was actually more transactions flowing through Arbitrum than being executed by Ethereum itself.
00:14:16.410 - 00:14:44.236, Speaker A: Okay, so anyways okay, so let's think a little bit more about this optimistic roll up idea. So it kind of breaks down like this. I come to you and I say, here's an output of a transaction. This is how the state changes as a result of this transaction and you want to know whether it's correct or not. Okay, so how do you do it? So there's a couple of ways. So you might say I believe it because I ran it myself. So this is kind of like the default mechanism that's used in blockchains.
00:14:44.236 - 00:15:18.876, Speaker A: Everyone just runs it for themselves and see whether they agree or not. You might have it where lots of people signed it and said this is correct. And because you trust the people that signed it, then you trust that the result is correct even though you didn't run it yourself. So we call this proof of authority. Some mobile wallets that can't run every transaction for themselves. They'll say, I see the transaction and I see a bunch of blocks have extended it and no one would waste all that proof of work effort to extend some block that was fraudulent. So I'm going to believe it because someone invested a lot of time into extending it.
00:15:18.876 - 00:15:58.728, Speaker A: So that's called the SPV protocol. And then it could be that I got a mathematical proof. So this would be like a ZK roll up and then it could be that somebody is staking some money on it and nobody else is disputing it. So I think that it's correct. Okay, so optimistic roll ups as labeled are basically five, but in practice they can also be a bit of two as well. So there is like right now, for example, in Arbitrum there's an allow list of validators. So not anyone can be a validator is basically the party that you're going to give the transaction to and actually execute it, the one that's going to post the stake and all of those types of things.
00:15:58.814 - 00:15:59.450, Speaker B: Okay.
00:16:00.000 - 00:16:29.152, Speaker A: There is a bit of a proof of authority in that sense. Eventually the long term plan, I guess is to make it a pure five solution. But this was seen as a stepping stone to getting there. Why? Yeah, for completeness is there also I believe it trusted hardware. Sure, sure. So that's good. So yeah, you can maybe squeeze it under two because there's the whole like, you have to trust intel argument.
00:16:29.152 - 00:16:45.752, Speaker A: But yeah, so Tes might give you another option and certainly people, if you look at the academic research, tes are considered a separate category, and there's lots of papers, including papers from people in the room that have looked at te based stuff. And yeah, we do consider it slightly different.
00:16:45.806 - 00:16:54.460, Speaker D: Threat model on the five versus two point, does that extend the fraud proofs as well? Like, do you have to be on that whitelist to submit fraud proofs?
00:16:54.960 - 00:16:55.324, Speaker B: Yeah.
00:16:55.362 - 00:17:18.720, Speaker A: So the person that pushes the initial like, this is correct. We call that the validator. You have to be on the list to be a validator. Then I might look at the validator and say, that's wrong. Right. So then I can push a dispute, and then the dispute can be pushed by anyone, so you don't have to be on a list to dispute it. So fraud proofs kind of capture both of those parties interacting.
00:17:18.720 - 00:17:22.804, Speaker A: But anyways, you have to be on the list for the first thing and not for the second thing.
00:17:22.922 - 00:17:23.636, Speaker B: Yeah.
00:17:23.818 - 00:17:40.588, Speaker E: Is there any empirical study or evidence of how much people actually check these things? It sounds like it could be a case, like Tragedy of the Commons where everybody's like, I don't want to check it myself. I'm sure other people have checked it to make sure, but I don't want to do.
00:17:40.674 - 00:17:41.260, Speaker A: Right, right.
00:17:41.330 - 00:17:41.564, Speaker B: Okay.
00:17:41.602 - 00:18:07.916, Speaker A: So this is an interesting problem. There's no empirical evidence because I can't think of a way of measuring it. It is something that people are aware of. There's actually a cute cryptographic solution that Ed Selton came up with called Attention proofs. And so basically the details are a little hazy, but you can look it up. There's like a simple blog post if you're interested in it. And they never implemented it.
00:18:07.916 - 00:18:39.788, Speaker A: In fact, it never got any real traction that I saw, but when I read it, I was like, oh, that's actually a really interesting idea. But basically what it does is you can prove that you checked it and somebody else can't copy your proof. Like, I could wait for you to check it, and then you issue your proof, and then I take your proof and say, oh, I checked it too. And so you have to make the proof kind of specific to the person, and then there's no way that you could issue the proof if you didn't check it. So those are kind of like the two security properties, and there is a little protocol that does that.
00:18:39.874 - 00:18:42.780, Speaker E: And by checking it, do you mean, like, rerunning the method?
00:18:43.600 - 00:18:44.072, Speaker B: Yes.
00:18:44.146 - 00:18:46.144, Speaker A: So the only way to check it is to rerun it.
00:18:46.182 - 00:18:47.250, Speaker B: That's correct, yeah.
00:18:47.940 - 00:18:55.536, Speaker A: Would you require someone to check at least one other node to check a proof?
00:18:55.728 - 00:19:00.644, Speaker C: Because at the moment, it sounds like if someone has a feeling or something.
00:19:00.682 - 00:19:26.796, Speaker A: Like that, but if you actually made a requirement okay, so in this case, in category five, first off, I might have said the word proof. Fraud proof was the term that was thrown around these are not actually proofs, they're just assertions. And so you absolutely should check it because there's nothing concrete backing the assertion other than the fact that the person might risk losing money writing problem in terms of who checks it because correct. So that was the other point, I think, as well.
00:19:26.818 - 00:19:27.052, Speaker B: Yeah.
00:19:27.106 - 00:19:42.460, Speaker A: So tragedy of commons rewriting. So why should I check? There's a dollar bill on the ground. I'm not going to pick it up because if it was real, someone else would have picked it up. Right. It's that sort of argument. Sorry. It's just attention.
00:19:42.460 - 00:19:53.140, Speaker A: There's another thing called basic attention token, but attention proofs are maybe a solution to that. So I think that's an interesting open problem, actually. It could be something that someone looks at in this room.
00:19:53.210 - 00:19:53.588, Speaker B: Yeah.
00:19:53.674 - 00:19:57.424, Speaker F: Are stake competitively set or how do they determine?
00:19:57.552 - 00:20:39.860, Speaker A: Okay, so right now, because we also have a flavor of two, the stake is super low, so it's set by the protocol. And I asked my student, she said it was like one e, so it's like very low. But that's because a lot of the trust is just that they're on the list of validators. Later when you open it up, you're going to have to worry. I think the stake is going to have to grow a lot proportional because if you look at the total value of everything that's on Arbitrum, which is this number here, where is it? So it's $5 billion. Right. And so to have one ETH having assertions over the entire state of Arbitrum, which has 5 billion locked up, it seems like kind of disproportionate.
00:20:39.860 - 00:21:18.912, Speaker A: Okay, what else? Okay, so the idea is that if you want to dispute it, you also have to stake and then someone's going to lose money. You now have two people, there's a disagreement and so one person is going to win, they're going to keep all of the money, and the person who made the spheres dispute is going to lose. And then the question is who resolves the dispute? And the answer is ethereum. So we're going to go back to layer one and have them resolve it. And then you're like, oh, wait a minute, this whole thing was about avoiding Ethereum, having to execute anything. Right. So now if every transaction is disputed, then Ethereum is just going to have to run everything anyway.
00:21:18.912 - 00:21:46.836, Speaker A: So are we actually getting ahead here? And so what they do, which is actually the cleverest part, probably, of the protocol, is they make the disputers pinpoint exactly when they start to disagree. So they're like, we all ran these transactions and we are in agreement. We're in agreement. And this is the exact opcode where I get one result and the other person gets the other result. And all Ethereum does is it executes that one opcode and says, okay, we're either going down the right fork or the left fork.
00:21:46.948 - 00:21:47.272, Speaker B: Okay.
00:21:47.326 - 00:21:57.310, Speaker A: So it's super cheap. There's a bit of interaction back and forth to isolate where the dispute is happening, but then to actually resolve it is super cheap for ethereum to do.
00:21:58.000 - 00:22:04.792, Speaker D: I guess I would say this is like a really great optimization. But fundamentally you're hoping that these disputes happen almost never, right?
00:22:04.866 - 00:22:05.200, Speaker B: Yeah.
00:22:05.270 - 00:22:10.768, Speaker D: If you think amortized over time, the amount of reexecution that ethereum has to do is anyways like vanishingly small.
00:22:10.854 - 00:22:11.152, Speaker B: Exactly.
00:22:11.206 - 00:22:13.120, Speaker D: Even if you did it in the naive linear.
00:22:14.580 - 00:22:15.232, Speaker A: Correct.
00:22:15.366 - 00:22:15.760, Speaker B: Yeah.
00:22:15.830 - 00:22:34.488, Speaker A: So you hope that the stake itself takes care of it. And generally in crypto, optimistic is a term of art. So we say, oh, that's an optimistic program. It means exactly that. There's really no reason why it shouldn't go wrong. But you still want to cover the case that it does go wrong. And so in this case you want.
00:22:34.494 - 00:22:38.628, Speaker D: To do probably do some sort of game theoretic analysis, hide equilibrium under assumptions.
00:22:38.724 - 00:22:38.984, Speaker A: Right.
00:22:39.022 - 00:22:41.600, Speaker D: You're never almost never doing frog proofs.
00:22:41.700 - 00:22:55.600, Speaker A: Yeah, exactly. So I think that's also interesting and probably an open problem at this page. I think people have thought about the game theory but in a kind of informal discussion level like on message boards rather than actual papers.
00:22:56.420 - 00:23:26.024, Speaker C: It's like nice write up I've seen a while ago where they hinted at the tension between the people verifiers checking the proof and this game theoretic outcome. Because if we know that nothing is going to go wrong in the equilibrium, then why should I even put the effort to check it? Because no one will submit invalid things. But then people start submitting invalid things and there's basically this probability that there will always be some error. And then to get rid of that, I think they introduced this new tool.
00:23:26.062 - 00:23:30.200, Speaker A: You mentioned, okay, to force people to check. It's a mixed strategy.
00:23:31.440 - 00:23:31.756, Speaker B: Yeah.
00:23:31.778 - 00:23:34.860, Speaker C: And in mixed strategy there's a probability of error that's positive.
00:23:35.360 - 00:23:40.670, Speaker A: Yeah, but it gets checked. Okay, let's break out the whiteboard and we'll work this out right now once in for all.
00:23:41.520 - 00:23:42.076, Speaker B: Okay.
00:23:42.178 - 00:23:45.072, Speaker A: So let me try and get through all this.
00:23:45.206 - 00:23:45.552, Speaker B: Okay.
00:23:45.606 - 00:24:07.620, Speaker A: An optimistic roll up, how does it work? So you're going to have some stuff that lives on what we call layer one. So the example here we're going to use is ethereum, but it could be any layer one. And then you're going to have some stuff that's off chain. So we're going to use Arbitrum and they called their EVM equivalent ARBOs and so it's going to live off chain.
00:24:08.540 - 00:24:08.856, Speaker B: Okay.
00:24:08.878 - 00:24:23.320, Speaker A: So on ethereum you're going to have three basic contracts. So the first two are called the inbox and the outbox. And you can tell I'm Canadian by how I say out. Okay. So inbox and outbox, this is just about executing transactions.
00:24:23.400 - 00:24:23.644, Speaker B: Okay.
00:24:23.682 - 00:24:48.816, Speaker A: So that's the main mechanism that you want to do. The other thing that people might want to do is let's say you have some tokens and they're on layer one and you want to move them onto L2. You can do that as well, but the inbox and outbox is not sufficient. You also need another contract called a bridge. And it's basically about managing assets. So for what we want to do is we're going to touch the outbox and the bridge and we won't really touch the inbox.
00:24:49.008 - 00:24:49.364, Speaker B: Okay?
00:24:49.402 - 00:25:02.072, Speaker A: So the way the inbox works is you come along just like normal. You have your Ethereum transaction, you want it executed, you send it to the inbox. And what the inbox will do is it will simply record it. It won't execute it.
00:25:02.126 - 00:25:02.392, Speaker B: Okay?
00:25:02.446 - 00:25:16.220, Speaker A: So layer one is not going to execute this transaction. It's just going to put it in memory. It doesn't even put it in long term storage. It just puts it in call data. It's enough to register it on the blockchain. So there's a record of it being on the blockchain.
00:25:16.720 - 00:25:17.470, Speaker B: Okay.
00:25:17.840 - 00:26:03.736, Speaker A: There is a slightly different version that's actually more popular that most people use, but you don't really have to understand it. But you can send it first to what's called a sequencer, which is offline or off chain and then the sequencer will put it in the inbox. So the idea of the sequencer is from the user's perspective, they don't have to pay any gas because this is a web service. You just tell the transaction over the web. And then from the sequencer's perspective they can bundle a whole bunch of transactions together in a block so they can make it efficient by packing it. And then they can reduce the overhead cost of gas because every transaction requires a set amount of gas before you actually get to the content of the transaction itself. So they can pass it into the inbox, which is on Ethereum with less overhead.
00:26:03.736 - 00:26:25.830, Speaker A: And then if you want to do something about mev like fair ordering or something like that, this is also a place that you can do that. So there's a lot of interest, arbitram and optimism doesn't do anything about that to my knowledge. But there is a lot of interest now in trying to think about how a sequencer could implement some sort of fair ordering or something to do with MEP, could be commit, reveal or something like that.
00:26:26.440 - 00:26:26.852, Speaker B: Okay?
00:26:26.906 - 00:27:05.164, Speaker A: So anyways, back to just the direct based idea. So you drop your transaction in the inbox. Then a validator that's sitting off chain, they execute it, they update the state of all the contracts and all the account balances, basically the EVM equivalent in arbitram land. And every now and then they'll issue a state update and push it back to the main chain. Okay, so this is called an R block and it goes in the outbox. Then what you do is you sit around for seven days and these are pipelines, so you don't have to wait seven days for the next R block.
00:27:05.212 - 00:27:05.424, Speaker B: Okay?
00:27:05.462 - 00:27:31.930, Speaker A: But for every individual R block, you're going to have a dispute window. It's also called the fraud window, withdraw window. There's a couple of different names for it. But you're going to currently in Optimism and Arbitrum, it's seven days. That's kind of like anyways, I'll come back to that. So it's seven days. You're going to sit there, you're going to wait, and if no one disputes it after seven days, then you're going to say it's final and the outbox believes it.
00:27:33.420 - 00:27:33.832, Speaker B: Okay?
00:27:33.886 - 00:27:54.732, Speaker A: Now let's think about depositing and withdrawing assets. So let's say I have some tokens and I want to put it into Arbitrum. I'm still going to use the inbox, but I'm not going to use an Ethereum transaction. I'm going to use an arbitram specific transaction. So I'm just going to say, hey, I have ten ETH. I want to deposit it. So the inbox will take it, it will send it over to the validators.
00:27:54.732 - 00:28:13.670, Speaker A: And what they'll do is they'll create ten ETH out of thin air in Arbitrum, okay? And then it gets deposited in my account. And then the real ETH that's on layer one, they're going to put an escrow on the bridge. So the bridge is going to sit there, and it basically has all tokens that were ever moved across.
00:28:14.200 - 00:28:14.756, Speaker B: Okay?
00:28:14.858 - 00:28:37.656, Speaker A: Then what this allows is the opposite. So we can now withdraw. So if I want to withdraw, I basically submit it to the inbox. It gets executed on arbitram. So they check and make sure that my account actually has the right amount and I can actually withdraw it and things like that. So all those conditions are checked in arbitram. If they are fine, I actually have ten ETH to withdraw.
00:28:37.656 - 00:29:06.436, Speaker A: Then what they'll do is they'll burn the ten ETH in Arbitrum, okay, remember, they just made it up anyway, so they can burn it as well. And then they'll push that in a state update. It will get pushed to the outbox inside the R block, along with all the other stuff that's in the R block. Same thing applies. You wait seven days and then it's finalized. And now what I can do is after it's finalized, I do a second transaction. So I walk up to the outbox and say, hey, there's this R block.
00:29:06.436 - 00:29:31.410, Speaker A: It just finalized, and there's an exit in there. An exit is a withdraw in arbitram language. There's an exit in there, and it belongs to me. And so the outbox will check the R block, it will make sure it's there, and if it's okay, then it will send a message to the bridge and tell the bridge, okay, release layer one ETH to this user because they exited from L2.
00:29:31.780 - 00:29:32.530, Speaker B: Okay?
00:29:33.140 - 00:29:36.130, Speaker A: Any questions about this? I kind of went through it fast.
00:29:36.580 - 00:29:42.336, Speaker E: What use do the tokens on the L2 have? Why would you want to bridge them.
00:29:42.358 - 00:30:11.688, Speaker A: To the L2? Right? So basically anything you want to do with tokens on L One, you could also do on L two. So let's say you just want to swap. You can do uniswap on layer one. The idea of L2 is it's going to be cheaper because it's more efficient. The gas costs are going to be a 10th of what they are on layer one. So instead what you could do is you could bridge the token to L2. Uniswap also runs on Arbitrum and then you can do the swap there at a 10th of the cost and then withdraw.
00:30:11.688 - 00:30:37.540, Speaker A: Now, most people don't go end to end where they'll put the tokens in, do something and withdraw. It's usually like there's a whole bunch of tokens that people in the past have kind of moved over. And so there's a pool of tokens that are kind of on Arbitrum and they're using them in DFI protocols. And then every now and then you have some reason that you want to pull them back to l one. So that's kind of more the right mental model. But basically you do on L2 what you would do on L One just for cheaper.
00:30:38.200 - 00:30:38.950, Speaker B: Okay.
00:30:39.640 - 00:30:47.252, Speaker A: Yeah. And so this works for any token. It can be ERC, 20, it can be another token standard. There's a bunch of red tape around this that you have to be careful of.
00:30:47.306 - 00:31:00.692, Speaker F: Do you need to trust that these ten ETHS are going to be created? Like, for example, can it happen that I submit a transaction to the inbox and then my funds just get locked in the bridge? But these extra ten tokens on L2 are just not created?
00:31:00.756 - 00:31:01.032, Speaker B: Yeah.
00:31:01.086 - 00:31:21.730, Speaker A: So that would be part of the R block. So I didn't show it on the deposit side, but the fact that this was minted and this state got updated, made its way into the R block, which got synced back to the outbox, and at that point you could dispute it. So if there's a dispute around these tokens and where they went and things like that, you're also eligible to dispute those things as well.
00:31:23.560 - 00:31:33.828, Speaker E: So if there's a dispute in this architecture, because everything on the L2 is, it seems like that's also kind of executed in a contract of sorts, right?
00:31:33.914 - 00:31:34.452, Speaker B: Yeah.
00:31:34.586 - 00:31:42.920, Speaker E: Does that mean you're kind of like implying that the code is incorrect on one and not equivalent to the code on the other?
00:31:42.990 - 00:31:43.176, Speaker B: Yes.
00:31:43.198 - 00:32:15.990, Speaker A: So that could be a reason why an R block is wrong is because either the validation code isn't working correctly or maybe there's different clients that people have. And so when I look at the set of transactions and you look at it, we get a different ARBOs update at the end of the day. So those are the main reasons. Okay, so now let's go to the problem that we're interested in. So withdrawals basically take seven days. It might take longer if there's a dispute. So there's never been a dispute yet in the history of Arbitrum that I know of.
00:32:15.990 - 00:32:38.696, Speaker A: But if they did happen, then it would extend it. You get a bigger and bigger window in order to resolve the dispute. There is a lot of talk. It's an active thread on all of these arbitram research and things like that about shortening the window. And so seven days is kind of arbitrary, but everyone sort of agrees that it can't be minutes or hours.
00:32:38.798 - 00:32:39.112, Speaker B: Okay.
00:32:39.166 - 00:32:46.056, Speaker A: It's got to be kind of on the order of days. If it's three days as opposed to seven days, it's still a long time to wait for your tokens.
00:32:46.248 - 00:32:49.230, Speaker F: What's the reason for it not? Definitely not being hours.
00:32:50.000 - 00:33:08.180, Speaker A: So the thing is that if there's a dispute, you need to recognize it. You need to file a counter dispute. And the problem is basically whether someone could denial service you into not filing the dispute on time. That's the main mechanism.
00:33:08.920 - 00:33:09.380, Speaker B: Okay?
00:33:09.450 - 00:33:15.796, Speaker A: Now here's another. Just empty your minds of everything I just told you, and this is just another problem to think about.
00:33:15.898 - 00:33:16.356, Speaker B: Okay.
00:33:16.458 - 00:33:48.720, Speaker A: I just sent a transaction. Is this transaction eventually going to be finalized? So it's a question you might ask of any blockchain, okay? And so if you're talking about ethereum or bitcoin, the answer is maybe, maybe not. Right. You can see that it's in the mempool, but that doesn't mean that it's going to make itself into a block. There might be a double spend or something like that that causes it not to. Now, conversely, let's say that you see it in the inbox or in our block, okay? So it comes back, it's in an R block. You're looking at it in seven days.
00:33:48.720 - 00:34:13.508, Speaker A: Is that going to be finalized, yes or no? And the answer is, if I validated, if I'm running an Arbitrarium validator, and I validated that R block, I'm basically 100% guaranteed that that's going to be finalized. There's no miners that could step in and reorder things or there's no competing thing that could replace it. If I checked it and it's correct and the protocol works, then it's going to be finalized.
00:34:13.684 - 00:34:14.168, Speaker B: Okay?
00:34:14.254 - 00:34:28.764, Speaker A: So we call this eventual finality. And this is going to be an important property for us, because what that means is that even when I've withdrawn it and I'm sitting in the window waiting for seven days, I do know for certain it's going to pop out the other end after seven days.
00:34:28.882 - 00:34:29.260, Speaker B: Okay?
00:34:29.330 - 00:34:36.780, Speaker A: So that's very unlike what we're used to in normal transactions, just releasing them to a blockchain.
00:34:36.860 - 00:34:37.200, Speaker B: Okay?
00:34:37.270 - 00:35:11.740, Speaker A: And the reason is that it's already in the inbox. So the inbox has all the transactions. And note that at any time you want, you can recompute the entire state of arbitram just by looking at the inbox, because the inbox has every transaction. It's a blockchain in and of itself. It has a record of every transaction. So if you start at the top of the inbox and go all the way down, you better end up at the update there's nothing that goes into the state update that didn't come from the inbox. So it's all completely deterministic once it's locked in the inbox.
00:35:11.740 - 00:35:38.272, Speaker A: Okay, so the idea basically is pretty simple, which is I have my ETH, I withdrew it. I have to wait seven days until I have it in hand. What if I can withdraw a claim to that ETH first and then I can go trade it? So maybe I need the ETH today so I'll find somebody else that has ETH today that's already on layer one. It's not locked up. I have ETH that's going to show up in seven days and we do a swap.
00:35:38.416 - 00:35:39.108, Speaker B: Okay?
00:35:39.274 - 00:35:42.180, Speaker A: So that's what we call tradable exits.
00:35:43.400 - 00:35:43.956, Speaker B: Okay?
00:35:44.058 - 00:36:11.596, Speaker A: Now tradable exits could be solved. Tradable exits isn't the only solution to this problem. Another thing you could do is you could think, I have ETH on Arbitrum, I want ETH on Ethereum, so we call it ETH l Two and ETH l One. So you could actually use any exchange that you want to. So here's a couple of ways of doing it. So you could use a centralized exchange like Coinbase and just say, have one type of ETH and ask for the other. And Coinbase supports this kind of thing.
00:36:11.596 - 00:36:28.950, Speaker A: You could use some kind of like atomic swap protocol that works cross chain, a more kind of nice advanced version, modern version is called Hop. It makes a couple different assumptions to make it kind of semi trusted. And then you have what we're trying to do, which are tradable exits and not.
00:36:29.480 - 00:36:30.084, Speaker B: Okay?
00:36:30.202 - 00:36:49.668, Speaker A: And so just going through this table really quickly. If you get a dot here, it means you're decentralized. We want something decentralized. So Coinbase is kind of out. If you get at least one dot, you don't need both of them. You're faster than the seven day window. Okay, so you're doing something about the seven day window if you're somewhere in getting a dot here.
00:36:49.668 - 00:37:32.836, Speaker A: So Arbitrum, the baseline doesn't get the dot, but everyone else does. Then if you take a close look at atomic swap, there's a bunch of weird things that happen in atomic swaps. Basically, one party has a window in which they can decide whether to finalize or abort, and they can also watch the price of the asset they're swapping for. And so it gives you basically a way to take advantage of the other party where if the price moves against you, you might abort, and if it moves for you, then you might execute it. So people call it a free option because it's like an option contract. And it's European in the sense that you can execute it or not execute it at any time that you want to, so you can choose the timing of when you execute it. So anyways, these are not like favored.
00:37:32.836 - 00:37:57.168, Speaker A: We don't have that type of problem. The main thing that we want to solve is, oops, I already exited on arbitram. I didn't know about this seven day thing. And this is like, so many users on message boards, they're just like, I can't get it for seven days. I didn't know this was going to happen. What do I do now? Okay, so we want to be able to bail them out. All of these solutions require you to know in advance that this is what you want to do.
00:37:57.168 - 00:38:19.220, Speaker A: And if you exit first, then it's too late. You're already locked up for seven days. So that was our main idea. And then I really don't like tables where I give myself all the dots. And so I want to show that there are other properties that other people care about, that we don't care about. So one, for example, for Hop is that they'll do L2 to L2 transactions. And so that's something we don't touch.
00:38:19.220 - 00:38:45.110, Speaker A: Okay, so we're not saying we're a replacement for Hop. We're not better, we're not worse. We're trying to solve one problem, they're trying to solve a different there's a bit of overlap in terms of what we're doing. Okay, so Alice has an exit for, let's say, ten E L two. It's going to be pending for seven days. So we're going to give her like, a transferable token that represents the claim. And just in terms of notation, we're going to call it ETH Xx.
00:38:45.110 - 00:39:11.050, Speaker A: So Xx just meaning, like, it's sort of in this state where it's not on L2, it's not on layer one. It's locked up for seven days. Let's say Bob has ten ETH that's already on L One, and they want to swap. Okay, so that's fine. Then Alice gets her ETH out right away, essentially. Okay, so there's going to be a couple of problems with this. There's a couple of reasons why Bob might not want to do this swap.
00:39:11.130 - 00:39:11.578, Speaker B: Okay?
00:39:11.684 - 00:39:55.370, Speaker A: The first is he looks at Ethaxx and says, I've never heard of Arbitrum. I don't know what that is. How do I know that? I know it has this eventual finality property, but I don't know whether that R block is valid. I'm not running a validator. Okay, so if we can sort of split Bob into two people, one that's running a validator on Arbitrum and a different Bob that has the liquidity on L1, then we can kind of solve this problem without any one party having to be both. The second thing is, would you pay ten ETH? Like ten ETH that you can use today for ten ETH that is locked up for seven days? You're not going to pay it right. It's going to be worth, like, ten E that's unencumbered has to be worth slightly more than ten E that has this encumbrance.
00:39:55.450 - 00:39:55.790, Speaker B: Okay?
00:39:55.860 - 00:40:09.940, Speaker A: So we have to think a bit about how do we price ETHX? And then the final thing is we're going to actually implement this for real on Arbitrum Nitro and make sure that it doesn't blow up gas costs and things like that.
00:40:10.550 - 00:40:10.962, Speaker B: Okay?
00:40:11.016 - 00:40:46.942, Speaker A: So let's do these problems one by one. So Bob needs to be an Arbitrum validator to believe that the Ten ETH will finalize. And so the way we're going to solve this is basically with an insurance policy. So we're going to show up to Bob and we're going to say, hey, it doesn't matter if you don't know what Arbitrum is. We have this insurance policy that basically covers the fact that this R block fails. And so you're going to get paid either way, okay? So if either it goes through and then you get paid from the bridge or it doesn't go through and then your insurance policy will pay you the equivalent. And the way that we do it is we're going to set it up as what's called a prediction market.
00:40:46.942 - 00:41:18.170, Speaker A: So this is something that Joe and I and others have been thinking about since way back in 2014 before Ethereum was even a deployed blockchain. We wrote a paper on how to do prediction markets that were decentralized before Auger, before Gnossis and all that type of thing. So this is something that we all are kind of super interested in. You don't have to use a prediction market, we just like it because we understand it. And so we're going to do a very simple prediction market. So if you don't know prediction markets, this is one way that you can do it. That's probably the most simplest.
00:41:18.170 - 00:41:40.274, Speaker A: So you have some trader, they have Ten ETH, they put it in a contract and they get two tokens. One token is called Fail and one token is called final. Fail will be redeemable for Ten ETH if the R block fails. And the final will be redeemable for Ten ETH if R block succeeds. And then conversely, the other one will be worth zero.
00:41:40.392 - 00:41:40.866, Speaker B: Okay?
00:41:40.968 - 00:42:24.298, Speaker A: So you get both of them, you have both outcomes covered and then what you can do is you can sell one, the one that you don't think is going to be true or not. Now one thing you might notice if you're astute is ten final PM is redeemable for Ten ETH if R block succeeds. That sounds a lot like Ten ETH xx that's also redeemable for Ten ETH if the R block succeeds. And you have to wait seven days to do it. So did we just kind of push this around in a circular way? The answer is kind of yes and kind of no. So they're close, but not exactly the same. We think that you'll draw more of a pool of people that are willing to buy these tokens.
00:42:24.298 - 00:42:58.246, Speaker A: And these tokens ethxx is tied to a specific user and a specific exit. Whereas your prediction market share could be for the whole R block or it might even be for a batch like the next ten R blocks or for all the R blocks on a particular day or something. Like that. And then it's only circular if you're trying to withdraw ETH. So I use that as the running example, just because it's simple. But if you start withdrawing other kinds of tokens, but your prediction market is running in ETH, then you're not solving the same problem. Then these shares are different than the token that you're trying to withdraw.
00:42:58.246 - 00:43:06.274, Speaker A: So, anyway, there's a couple of paragraphs in the paper trying to explain this. I don't know if I did a good job in 30 seconds, but anyways.
00:43:06.342 - 00:43:13.390, Speaker D: Just for a little more detail there. So the ETHX issue is you can't really treat those as fungible, is that right?
00:43:13.460 - 00:43:13.694, Speaker B: Yeah.
00:43:13.732 - 00:43:52.810, Speaker A: So there's a question of how fungible they are, and so we're thinking of them as non fungible. There's also the issue of can you split it? So do I have ten ETH? Like, I can give you five and give someone else five, or is it like one exit, which would be like one atomic unit? And so right now, our thinking the implementation is just like it's a non fungible atomic unit, so it's just that one exit. You can't split it up. ETHX isn't really ten ETH x, it's just like an exit that's worth ten ETH is the way of thinking it. But there probably are other solutions that you could use to make them either fungible or splittable.
00:43:54.910 - 00:44:04.142, Speaker D: You have one instantiation of the prediction. I mean, I asked that question because in some sense, the obvious thing, the first thing that comes to mind is just throw up an AMM, right?
00:44:04.196 - 00:44:04.366, Speaker B: Yes.
00:44:04.388 - 00:44:07.502, Speaker D: Like Ethan Steth. You can go back and forth with a little bit of discount to the same thing here.
00:44:07.556 - 00:44:07.870, Speaker B: Right.
00:44:07.940 - 00:44:13.966, Speaker D: So if it's non fungible, then, like, how many prediction markets do you need? You need one prediction market per what? Per block?
00:44:14.078 - 00:44:15.058, Speaker B: Good question.
00:44:15.144 - 00:44:40.438, Speaker A: Okay, so can you use an AMM? No, because it's non fungible. Right. So AMMS, you need lots of liquidity, and so that kills that idea. The second thing is it's a trade off that we discuss. So our vision is that you want to get the most liquidity possible, and so it's better to make your prediction market broad. So you could do a prediction market for an exit. Is this exit going to finalize or not? That's like the finest grain.
00:44:40.438 - 00:45:04.786, Speaker A: The largest grain would be every exit in this R block or every exit in even this batch of R blocks. And so we think that would be better. So as long as every R block, say, across an entire day finalizes, that's the kind of prediction market that you could set up. Right. And it would still cover the case that as long as this exits in the batch, then it's insurance for them.
00:45:04.808 - 00:45:07.300, Speaker D: Would you still set it up as a binary prediction market?
00:45:08.630 - 00:45:10.338, Speaker A: So what would the third option be?
00:45:10.424 - 00:45:13.282, Speaker D: Well, you could actually keep track of which block.
00:45:13.346 - 00:45:13.478, Speaker B: Yeah.
00:45:13.484 - 00:45:23.542, Speaker D: If it's 1000 R block. Right. So if it's binary eight, right. You say like, this pays off if all 1000 R blocks fail. Sorry, succeed, one of them fails and like, everybody's toast.
00:45:23.606 - 00:45:24.186, Speaker B: Right? Right.
00:45:24.288 - 00:45:25.818, Speaker D: That seems undesirable, right?
00:45:25.904 - 00:45:44.000, Speaker A: Possibly, yeah. I see it more as a bet on Arbitrum as to a specific R block. Anyways, so our thinking is just of it as a binary prediction market. We didn't think deeper than that on it.
00:45:45.090 - 00:45:47.250, Speaker F: How is this market getting funded?
00:45:47.750 - 00:46:16.066, Speaker A: Okay, basically you have people who either this is actually a good question, so I'll spend a minute on it or so okay. Who would buy a final token? So final tokens are attractive to anybody as long as they sell for less than ten ETH. Like say this sells for 9.99 ETH or something like that. Right. It's going to be close to 100 because it's basically guaranteed. If you're a validator and you're running a validator anyways, you might as well buy these tokens.
00:46:16.258 - 00:46:16.818, Speaker B: Yeah.
00:46:16.924 - 00:46:50.338, Speaker A: So that's who's going to buy the final side. The fail side is either going to be the people who are exiting because they want the insurance policy, so the insurance policy is the fail side of it. So there's a market for that and then there can also be speculators who think Arbitrum will fail or maybe they want to hedge against Arbitrum failing in the long run. And these things are super cheap, right? They should be like worth less than a cent and so you could just buy them anyways, and then if some black swan event happens and Arbitrum fails, then you're rich and it doesn't cost you a lot to maintain that short position.
00:46:50.424 - 00:47:19.242, Speaker F: So there shouldn't be much liquidity in these markets because there's not that much desire for insurance then, because otherwise you're just going to get a no trade theorem. No one's going to bother buying anything because why would you accept that? I'm just thinking. Because there's going to be a transaction cost to run these swaps on Pentralized, right? And if the insurance is selling for less than a penny, will that generate enough volume compared to transaction costs?
00:47:19.306 - 00:47:33.220, Speaker A: Yes, exactly. So I actually have some numbers on that. I'll show you in a second. But it's the right point. So if the exits aren't worth enough, then the gas costs are going to eat all of this up and it's not worth doing.
00:47:35.430 - 00:47:36.180, Speaker B: Okay.
00:47:40.070 - 00:47:59.978, Speaker A: So just down here. So you can sell one or both shares. If you ever get a collection of shares, a pair back, you can redeem them right away. You don't have to wait for the market to close, that's just a feature of the prediction market. And then normally the problem you have to solve with the prediction market is what's the Oracle, how do you know whether it resolves or not? But in this case, the R block is on L1.
00:48:00.064 - 00:48:00.314, Speaker B: Okay?
00:48:00.352 - 00:48:17.250, Speaker A: So this is in the outbox contract and so as long as the outbox contract will tell you whether the R block was confirmed or not, which it doesn't currently. So that's one of the changes we had to make to make it prediction market friendly, is we had to expose that. But basically, you can do everything on L One. You don't need an oracle.
00:48:17.750 - 00:48:25.022, Speaker D: Do you have an opinion on the implementation of the prediction market? Like limit order book versus AMM?
00:48:25.166 - 00:48:25.570, Speaker B: Yeah.
00:48:25.640 - 00:48:53.274, Speaker A: So first off, we sort of sidestepped it for now. We implemented something that's simpler than a prediction market just to get some gas costs. And then the idea would be we would plug into Gnosis or into Auger or something like that. We wouldn't try to reinvent the wheel. Order books. I did another whole paper on order books. They basically don't work on L One, and we did implement it on Arbitrum as well, to see.
00:48:53.274 - 00:49:05.150, Speaker A: And you still have a pretty low cap. So, on layer One, once you get about 80 trades in the order book, then you run out of gas.
00:49:06.690 - 00:49:07.006, Speaker B: Yeah.
00:49:07.028 - 00:49:31.478, Speaker A: And then on L2, you can blow it up to, like, 10 00, 10,000 or something like that. And so it might be feasible, but it's still expensive to do. So an AMM the reason people like AMMS is not because they think it's better than an order book. It's just because it's constant time operations for everything. And yeah, otherwise you run out of gas. Even something as simple as, like, I want to cancel my order, you have to walk through the data structure and find it and cancel it. Right.
00:49:31.478 - 00:49:41.654, Speaker A: Or you want to insert it in the right price priority, like these little small linear operations. They kill you with order books when you try and do it on Ethereum.
00:49:41.782 - 00:49:50.622, Speaker D: And I forget the details of Auger and Gnosis, but is there a solvency issue? If they're doing AMM style things, you've got to be ready to lose money, right?
00:49:50.676 - 00:49:50.894, Speaker B: Yeah.
00:49:50.932 - 00:50:31.820, Speaker A: So I don't even know the current status myself, so I feel like they both pivoted. So Gnosis, now they have this Gnosis chain thing and Auger, I'm not sure, but anyway, prediction markets, I checked about a year ago to see I want to play in a prediction market, and there's basically nothing on Ethereum. So I think the software is sitting there, but they're not really using it. That's my understanding, but I don't have up to date knowledge. So prediction markets, everyone was excited about it back in 2014, and then it feels to me like the idea didn't find a good use case.
00:50:32.270 - 00:50:46.958, Speaker D: It could be hard to get them to work. That's kind of why I'm pressing you on it. A totally different approach would be like, let's tie ourselves in knots instead. So it's more of a fungible thing that we can then sort of trade using AMM style stuff.
00:50:47.124 - 00:50:47.598, Speaker B: Yeah.
00:50:47.684 - 00:50:49.242, Speaker D: Trying to get a sense for those trade offs.
00:50:49.306 - 00:50:49.582, Speaker B: Okay.
00:50:49.636 - 00:51:46.782, Speaker A: And then one other just, like, kind of tidbit for you trivia is that AMMS actually kind of came out of prediction markets. So I think it was the Gnosis people that had that first idea of the basic scoring on the prediction market side, there's market scoring rules, and then they saw a connection of like, you could implement an AMM with the constant product or what's the rule? Constant summer, constant product, or whatever that rule they pulled out of the market scoring literature, which they wanted for prediction markets in the first place. So there is actually a direct connection between AMMS and prediction markets. Okay, next question. This might be interesting to some of you. So how much is Ethxx worth? Ethxx is ETH that you'll get in seven days should be worth less than ETH that you have. Now, can we even think about how to price it? And so our observation was this actually looks a lot like a futures contract.
00:51:46.782 - 00:52:23.342, Speaker A: So we can look at how futures contracts are priced and then we can see if we can kind of use the same variables at least as them. Okay, now there is one difference in a futures contract. If I buy oil in five days or corn in five days, and I will pay in five days. Okay, so the contracts were zero today, and then it either takes on value or loses value, depending on how prices fluctuate. In this case, you're paying your ten ETH today for ETH that you're going to receive in seven days. So the variables basically become negative instead of positive to account for that. So if the equations look weird, that's why.
00:52:23.342 - 00:52:56.282, Speaker A: But before we get to the equations, just the intuition is obviously how much ETH is worth is going to be a determinant. And the idea is, as the window gets smaller and smaller, you get closer and closer to the seven days being over. Then you should have convergence between the price of Ethxx and ETH. L1, you can look at the difference between storage costs. So this is a big thing. If you're storing corn, you have to account for how much does it cost to store corn as opposed to storing the money that I'm going to use to buy corn. That's not a thing here that we can see.
00:52:56.282 - 00:53:27.906, Speaker A: They're both tokens, so they should be the same price. Whether you're storing ETH One or Ethxx, you can look at, what can I use the ETH for? Can I earn something with it? And so now there are D Five protocols. They'll let you earn yield on it. So we're going to assume that Ethxx, because it's locked up, you're not going to be able to earn anything with it. But Ethel, One, you could, so you have to forego what you could have earned by buying ETHX. Okay, so that's going to discount the price of Ethxx. There's no real exchange rate because the token is the same.
00:53:27.906 - 00:53:59.510, Speaker A: But if we think about withdrawing a different kind of token. And we do this deal today, then the prices drift apart, then exchange risk will come into it. Delivery costs is something that exists big time in futures. Like what's the cost of getting the corn? Who's paying it, the buyer, seller, where are you putting it? And that type of thing. It also is a big deal in ethereum because this is the gas costs. So the gas costs are kind of equivalent. So if I have this ETHX, I have to go back to the contract and I got to submit it and then get my ETH out.
00:53:59.510 - 00:54:12.306, Speaker A: I'm going to have to pay for that, right? So that's a gas cost. And so we have to account for that. I have to go out and buy insurance. I have to go to the prediction market. I have to buy it. I'm paying gas. So we have to consider all of these gas costs as well.
00:54:12.306 - 00:54:21.494, Speaker A: And then there's the settlement risk of what if the worst happens and Arbitrum fails and the R block doesn't actually go through.
00:54:21.612 - 00:54:22.134, Speaker B: Okay?
00:54:22.252 - 00:54:45.254, Speaker A: So you can kind of throw these in an equation and this is like super back of the envelope. So literally on the back of an envelope. But anyways, the equation looks like this. I won't walk through it, but these are just some sketchy ideas. So let's say that we have six days left. An R block failing is one in a billion. Let's say there is a bad R block, but no one's paying attention.
00:54:45.254 - 00:55:13.574, Speaker A: We'll say that's one in a million. Let's say that your validation software is wrong. So even though you are paying attention and you run the validation software, it gives you the wrong result. False positive or false negative? We'll say that's one in a million. We'll say that the gas cost converted to ETH. So normally we'd say it in Way or gigaway, but here I'm converted to ETH. So the gas cost of all the prediction market stuff, the insurance stuff, the exit and all of that stuff will put at 0.8.
00:55:13.574 - 00:55:42.974, Speaker A: And that's more or less like accurate. Then I just pulled off of compound or something like how much interest you could get. And so across a year you might get 0.2 for ETH isn't very lucrative and ETHX, we're going to assume you can't earn any money for it. Okay, so just back of the envelope. But just to give you an intuition, this tells you that if I have 100 E XX, so 100 ETH that will emerge in six days, you should pay 99.65 for it.
00:55:43.092 - 00:55:43.662, Speaker B: Okay.
00:55:43.796 - 00:55:48.786, Speaker F: Where did you get the API on ETH? It just seems like a very low annual interest rate.
00:55:48.808 - 00:56:01.960, Speaker A: Yeah, so I tried to look on something like compound and I picked something conservative as well. But you're right, maybe it's more like 5% or 4% or something like that. Right.
00:56:02.730 - 00:56:10.166, Speaker D: Just to clarify, nobody's executing these. You're just trying to speculate what the equilibrium prediction record is.
00:56:10.188 - 00:56:49.622, Speaker A: Probably going to be yeah, exactly. Okay, so the earlier point was, well, this gas is going to be the same. If I'm withdrawing 100 ETH or I'm withdrawing one ETH, or I'm withdrawing zero, zero, one ETH, I'm still paying this amount of gas that's fixed the gas doesn't care how much money you're withdrawing. And so that's an overhead fixed cost. And so if I withdraw a lot less, then this gas is going to account for more. It's going to start dominating the equation. And so if you see if I pull out a very small amount, like half an ETH, then I'm paying actually a very heavy, I don't know, like 20, 30% fee, basically, in order to pull it out.
00:56:49.622 - 00:57:30.050, Speaker A: Okay, so this kind of works mainly for large amounts of ETH. It's not so economical for smaller amounts. The other unfortunate thing is we have to run all of this on L One. So even though we have arbitram at our disposable and it could run a prediction market very efficiently, because the R block is on L One, we have to run the prediction market where the R block is. And so that's also an unfortunate thing. So we're paying, like, ethereum gas costs now. I haven't rerun this since anyways in a while, so I know gas prices, I think they've gone down recently, so these numbers might be a little stale.
00:57:30.050 - 00:57:56.682, Speaker A: So really quickly, we did implement it. So we changed the outbox. The gas consequence is basically marginal. And then we changed the bridge as well. We exposed the fact of whether an R block is pending or confirmed in the outbox so that a prediction market could walk up and get that information. So it wasn't exposed before. We didn't implement the prediction market itself.
00:57:56.682 - 00:58:13.902, Speaker A: We're looking into it. We might try to use Auger or nosis in order to do it. And then there was a whole bunch of engineering details that you can read about. The code is all on the yeah, and the student did that, so that's why I'm not talking so much.
00:58:14.036 - 00:58:17.950, Speaker D: Transfers and exits in the units of GWe unexpected gas.
00:58:19.490 - 00:58:19.818, Speaker B: Yeah.
00:58:19.844 - 00:58:21.170, Speaker A: Sorry, say again?
00:58:21.320 - 00:58:26.626, Speaker D: I'm surprised that the units there are guay as opposed to gas. This is for some fixed gas price you have.
00:58:26.648 - 00:58:42.434, Speaker A: Yeah, right. So I pulled this out of the paper. So I guess we did a conversion in the paper itself. No, I absolutely don't off the top of my head. Yeah, so you're right. It would be more less time sensitive to replace gas.
00:58:42.562 - 00:58:43.240, Speaker B: Yeah.
00:58:43.610 - 00:59:00.830, Speaker A: So apologies for that. Also, it costs a lot the first time because you have to set up these data structures so the first person gets hit with it, and then the second and third person to transfer their token, they don't have that overhead cost. So we could look at different ways of engineering that, but that's the way that we implement it.
00:59:00.900 - 00:59:11.642, Speaker F: The first time ever someone uses a do the swipe from Ethxx to ETH L1, or they offer a specific bunch of R blocks.
00:59:11.706 - 00:59:27.382, Speaker A: So it's the first time somebody for an R block will transfer their token to someone else. So regardless of they're using a prediction market or something like that. If I can find someone that wants my Ethxx, I transfer it to them. Then you have to set up a mapping to take care of it. And there's a bit of overhead cost.
00:59:27.436 - 00:59:27.702, Speaker B: Yeah.
00:59:27.756 - 00:59:49.246, Speaker A: And it's per R block. You wouldn't have to do it per R block. You could have a giant mapping for every swap ever. The problem with it is that you can't garbage collect. It's hard to do that anyways on ethereum. This is in the engineering details, admitted. Okay, so I'm exactly at time.
00:59:49.246 - 01:00:22.562, Speaker A: So in summary, the basic idea is that you want ten ETH. You're in this unfortunate position of having your ETH locked up for seven days. And so we're going to give you an exit that lets you get out early. The basic idea would be that you would have ten of these fail tokens and ten of your Tradable exit now. And you would give it to Bob for more or less ten ETH, maybe a little bit less. So it's completely hedged for Bob. The important thing is also why do we care about Bob? He's not a validator on Arbitrum, blah, blah, blah, blah, blah.
01:00:22.562 - 01:00:43.498, Speaker A: But the important point is that Bob can be a smart contract, okay? So a smart contract absolutely doesn't know what's happening on Arbitrum, okay? So it can be a dumb contract, it doesn't know what's going on Arbitrum and you want to be able to give it Ethxx and it's not going to get screwed because the R block doesn't fails to finalize.
01:00:43.594 - 01:00:43.854, Speaker B: Okay?
01:00:43.892 - 01:01:00.120, Speaker A: So that was the main motivation that maybe I should have put at the very start of the talk. But anyways, so you don't have to think of Bob as a person. It could be a contract itself. You can use it for any token, so it's not just for ETH. And then we show that you could actually implement it for real.
01:01:02.010 - 01:01:03.814, Speaker B: Okay, so that's it.
01:01:04.012 - 01:01:06.680, Speaker A: And I'll take any other questions that you have.
01:01:08.010 - 01:01:11.878, Speaker C: Yeah, can I run the prediction market on a different L two?
01:01:12.044 - 01:01:49.220, Speaker A: On a different l two. You mean like for this scheme itself? Okay, so the prediction market has to run on L1 because the outcome is dependent on something that's happening on R one, which is the R block is going to be finalized in the outbox contract, which is on L1. So that's why you want the prediction market. You could use an oracle. So if you had an Oracle that would feed the R block status from L One to L two, then you could run it on any L two that you wanted to at all. But yeah, we want to sidestep the oracle problem.
01:01:51.590 - 01:01:52.434, Speaker B: Yeah.
01:01:52.632 - 01:02:16.202, Speaker F: If you are sort of an arbitrary validator that is publishing these R blocks to the contract, then can you on purpose do a fake R block? If people are not checking, then they just believe it's true. And then that kind of messes up this prediction market because most of the people in the prediction market will think that the ETH will finalize, but then you know better because you just constructed a bad block.
01:02:16.266 - 01:03:13.120, Speaker A: So there's a deeper question under your question, which is, is it kind of dangerous to set up a prediction market that's betting on the outcome of these R blocks? Because now you can profit from having a bad R block, right? And so validators, like a malicious validator could go buy a bunch of fail shares, they're super cheap because everyone thinks it's going to succeed, and then they could actually profit by pushing a bad R block. Right? And so our answer to that is that you can never deal with all the sort of external incentives and things like that. Like any blockchain, even off chain, people might be like, oh, we don't like Arbitrum the company, we want them to fail. And so we have this huge financial incentive to get an R block to fail, or something like that. So there's no way to make all of those those incentives, like kind of androgynous I guess is what people say, economists say. Endogenous. Yeah, sorry.
01:03:13.120 - 01:03:19.950, Speaker A: All right, well, thank you.
