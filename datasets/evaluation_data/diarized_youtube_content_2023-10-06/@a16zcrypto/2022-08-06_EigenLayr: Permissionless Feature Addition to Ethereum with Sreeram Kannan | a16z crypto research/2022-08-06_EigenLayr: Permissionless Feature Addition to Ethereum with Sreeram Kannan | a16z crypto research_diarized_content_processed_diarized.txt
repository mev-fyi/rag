00:00:10.070 - 00:01:06.806, Speaker A: Today I'm going to talk about one of the products that we are building, which is also an idea called Eigen layer. We call Eigen layer the restaking collective. But what it does is enable anybody to add new features to ethereum. As Tim And introduced, I'm Associate Professor at the University of Washington, Seattle, where we've been working on blockchains consensus and other stuff over the last four and a half years. And over the last year I've been only building the startup Layer Lab. We've done a lot of work on consensus protocols. We had this paper called Everything is a Race, which analyzes conditions under which approve of work, proof of stake, proof of space, any of these longest chain type protocols, when they are stable, when are they secure? We built on top of some of that understanding.
00:01:06.806 - 00:01:49.530, Speaker A: We have a paper called Prism, which is a proof of work protocol which has very low latency. The other work we did is called POSat, which is how do you create a dynamically available proof of stake protocol. Dynamic availability means your protocol continues to work under variable participation. We also did a bunch of other stuff. For example, when are blockchains accountable? One heuristic that we have is when you have quorums and signatures. Then if a group of stakers double sign on a block, then such blockchains are accountable. But there is some more subtleties to this.
00:01:49.530 - 00:03:04.660, Speaker A: For example, a protocol like Algorand, which also uses quorums and stuff, is not accountable because it relies on some other timing assumptions where you can create safety violations by not speaking anything. So we did an analysis on some of those things. The two most recent works in this space have been on multiresource consensus. Suppose you want to build a protocol which uses proof of stake, proof of space, proof of work, all combined into one protocol. And you want this protocol to work even if you have a majority of proof of work miners being malicious, as long as a very small fraction of proof of stake miners are not malicious and characterizing, what are the trade off regions? What sets of adversary ratios can you stabilize across these multiple resources? So we did a bunch of work on consensus protocols, also on peer to peer. How do you design peer to peer topologies adaptively? How do you make sure that in a blockchain when you have a peer to peer network, the consensus protocol respects the ordering of messages in the peer to peer network. One of the things that's happening rampantly in blockchains is front running.
00:03:04.660 - 00:03:53.822, Speaker A: And one type of front running you can call as non targeted front running. You just want to go ahead of everybody else because you have a price advantage in doing so. And to prevent non targeted front running, if the blockchain had some native first in, first out property, messages that came in first into the distributed system need to be executed first. How do you define it. How do you make sure you have a highly efficient protocol which achieves this? We have a recent paper called Themis which achieves this. On top of the consensus protocol, you have scaling solutions sharding. How do you create codes that ensure that you have scalability? How do you do dynamic resource allocation? We had a couple of waivers, coded merkel tree and free to shard on that.
00:03:53.822 - 00:04:50.606, Speaker A: Okay, so this just gives a background of the type of works we've done. And also, since I'm giving a talk in this research group, I want some of you who are interested in any of these topics to stop by and talk later. Okay? While doing some of this research, we did talk to industry a bit and some of our ideas are integrated in some of these protocols. Like Chia, for example, uses our consensus protocol in their proof of space system. But one thing we found as a major friction in blockchain is the rate of innovation at the core layers. At consensus, charting peer to peer is way lower than the rate of innovation at the application layer because applications are permissionlessly deployable. Anybody can come and deploy an application on top of an existing blockchain like Ethereum, whereas core protocol upgrades are permissioned.
00:04:50.606 - 00:05:31.882, Speaker A: In a very deep sense. You can say permissioned or democratic, but either way, very few innovations get it. So this has stalled our space quite a bit. And this has kind of bothered me the most, because on the one hand we see there is a massive wave of open and permissionless innovation in the DAP layer. But all of this is throttled because of the slow rate at which the core layers of the protocol have been able to get upgraded. So this project Eigen layer is an attempt to resolve this core contradiction. At the core of blockchain, we want to build permissionless systems, but there is no permissionless innovation at the base of these systems.
00:05:31.882 - 00:06:05.514, Speaker A: How do we solve this? That's what we are trying to address here. Okay, so zooming back. I'm going to take the story back to 20 09. 20 08 20 09 bitcoin pioneered decentralized trust, and we all know this. And the way this system is built is you have a layer of decentralized trust in Bitcoin. It's done through proof of work mining. On top of this mining, there is a consensus protocol in Bitcoin, the proof of work longest chain or heaviest chain protocol, which then decides what the valid chain is.
00:06:05.514 - 00:06:55.158, Speaker A: On top of this, there is the Bitcoin script which sets the execution semantics. What do bits that are committed on this blockchain mean? Or it means I can send you Bitcoin, whatever transaction types and so on. So the way we are organizing the blockchain stack, there is a trust layer at the base, there is a consensus layer on top, there is an execution layer on top of it. Okay, so Bitcoin pioneered this model, but Bitcoin also was an application specific blockchain. What do I mean by that? Bitcoin is specifically designed for one application exchange of bitcoin among clients. That's the primary application. And if you go back to, like, 2011, any new application that needed to be built on a blockchain needed its own trust network.
00:06:55.158 - 00:07:36.630, Speaker A: For example, somebody wanted to build a domain name system, a decentralized domain name system called Namecoin. And if you wanted to build Namecoin bitcoin script does not give you enough programmability to start a new system for maintaining domain names and how they are allotted and so on. So you have to create a new scripting layer, the namecoin scripting layer. But it's not enough for you to create a new scripting layer. You have to create a new trust network. You have to create a new proof of work mining or use the same mining, but let a different group of miners mine and secure your network. There was no way to share trust between Namecoin and Bitcoin.
00:07:36.630 - 00:08:11.554, Speaker A: Okay, so this is the story circa 2011 2012. Many other examples color, coin, metacoin. This was the Bitcoin talk era of, like, 2012. So the picture is any new application needed to create its own decentralized trust network. Decentralized trust is an exotic variety of trust. It rarely is able to happen. Like, there should be very few decentralized trust networks, whereas each application having to create its own decentralized trust network is clearly not the correct model.
00:08:11.554 - 00:09:25.254, Speaker A: And many people realize this around this time, most prominently Vitalik and friends who pioneered the notion of what I call modular blockchains. The core idea that was built by Ethereum was the idea of decoupling trust and innovation. What do I mean by that? What they actually did was something quite simple in a very basic sense. They just took the Bitcoin scripting layer and replaced it with a general purpose Turing complete programming layer, the Ethereum virtual machine. Okay, so this was just a small technical upgrade in some sense, but what it did is created modularity of trust. Okay, what do I mean by that? Now that you have this Ethereum system, anybody can come and build distributed applications, decentralized applications, on top of such a system. So the person building that innovation, the person who built ENS, the naming system that is now used in Ethereum, did not have anything to do with this trust network.
00:09:25.254 - 00:10:03.138, Speaker A: Anybody can come and deploy DApps on top of this virtual machine, thus modularizing trust. So the trust of Ethereum network became a module that can be supplied to any distributed application that wants to build on top. This has actually led to a massive acceleration of the pseudonymous economy. Why do I say that? I say that because anybody creating any of these applications, they are not themselves trusted. They're just bringing innovation. You come up with an idea for how to build a uniswap, which is just a decentralized exchange, and you can be a nobody. You don't need to be trusted.
00:10:03.138 - 00:11:00.442, Speaker A: You just write your code, you put it up on Ethereum, everybody trusts. Ethereum will continue to execute the conditions as stated. As long as you can understand the code, you don't need to know who created this distributed application. So this has led to a massive era of what we can call open innovation, where anybody can come and contribute their innovation, plug it on top of this massive trust network and deploy it for anybody to use. So one way of modeling this is you think about the base layers, the trust network consensus and the virtual machine together bundled into a trust network and producing trust. So essentially the Ethereum blockchain is the producer of trust, decentralized trust. And the distributed applications are a consumer of trust.
00:11:00.442 - 00:11:34.650, Speaker A: They consume trust and in return pay fees back. This is the value exchange. The value exchange is the DApps get trust from Ethereum and in return they pay fees back to Ethereum. This was the model. By creating this new economy where trust and innovation got decoupled, many more things became possible that were simply impossible in the previous era. Prior to Ethereum, if you created uniswap, you have to build your own trust network. And how many people mine on that trust network? How big is it? Depends on your own particular economy.
00:11:34.650 - 00:12:04.560, Speaker A: Whereas the size of this trust network is universal. It's just shared and pooled across all the applications that run out of Ethereum. Okay, so just one high level analogy. Just like venture capital was a massive innovation, it was the decoupling of capital and innovation. Ethereum decoupled trust and innovation. I don't need to be trusted. I just bring the innovation, Ethereum brings the trust, and together we can create a product.
00:12:04.560 - 00:12:57.390, Speaker A: So it's a serious upgrade, but the barriers to open innovation continues to persist. Okay, for example, you have the stack and I have an idea how to upgrade the Ethereum consensus protocol. Okay, let's say it's 2019 and I came up with this avalanche consensus protocol and I want to just deploy it on top of Ethereum. There is no way to do it right. So you look at it and you say, oh, if I wanted to create a different consensus protocol because it has different properties, it has different latency, different assumptions, I'm simply unable to create it on top of this existing trust network. So what do I do? I go and create my own whole world. The era of alternative layer one blockchains.
00:12:57.390 - 00:13:46.400, Speaker A: Different blockchains have different consensus protocols, different virtual machines. But each of them have to build their own new trust networks. This picture looks exactly like the 2011 picture of Bitcoin and namecoin and Colorcoin, except now innovations that are at the level of DApps can simply build on top of Ethereum. But innovations that go deeper and touch the heart of the stack have to actually segment and create fragmented trusted ecosystems. Okay, so this leads to a double coincidence. If you want to start one of these ecosystems, it's not sufficient for you to have great technology. You also need to be able to bootstrap a decentralized trust network, which is you have to be an evangelist and all this.
00:13:46.400 - 00:14:28.534, Speaker A: There is another layer at which we see this barrier to open innovation. So if you just abstract out Ethereum as basically supplying trust to the DAPs, what we see is Ethereum does not supply trust to the DApps for anything that the DAP wants. It only supplies trust in block making. What is block making? Block making is transaction ordering and transaction execution. That's all that blockmaking is. So DApps are able to borrow trust from Ethereum on this limited axis of transaction ordering and transaction execution if they wanted trust on anything else. I want to read data from the Internet.
00:14:28.534 - 00:14:51.678, Speaker A: I want to read data from another blockchain. I want to run a different execution engine. I want to run a gaming engine. I want to run an authentication system. Any of these things you have to create your own new trust network. A simple example is something like Chainlink. Chainlink is an Oracle protocol which helps fetch data from the Internet into the blockchain.
00:14:51.678 - 00:15:41.534, Speaker A: But Chainlink cannot be built on top of Ethereum natively. Chainlink has its own trust network. It has a set of smart contracts from which it brings the data into Ethereum. But the trust network is not trust is not borrowed from Ethereum stakers. Trust is its own group of new middleware stakers. So each middleware creates has to create their own decentralized trust network, any other dimension that the DApps need in which they want to consume trust other than blockmaking, they need other trust networks to supplant those actions. So I highlighted the bootstrapping problem that when you want to create these new middleware, for example, you not only need to have innovation, but you also need to have your own new trust network.
00:15:41.534 - 00:16:05.222, Speaker A: And it's very difficult. And just take the example of Oracles. Chainlink is a market leader, and it's worth, whatever, $20 billion or something. And the second largest, Oracle, is like 100th as big as Chainlink. And part of the problem is you cannot bootstrap a new Oracle because you have to build your new trust network. It is not simply a matter of getting adoption. It is also a matter of bootstrapping your trust network.
00:16:05.222 - 00:17:11.642, Speaker A: So one of the things I started seeing is that even though we think blockchains are creating an era of permissionless, open innovation, anything that requires its own trust network gets entrenched very deeply, and it's very difficult to upgrade it and add on new innovations on top of this. Okay, but I want to highlight what the microeconomic problem is on each of these different players in the current architecture. So the microeconomic problem is, if you're running a middleware let us say I'm running a middleware, which is data storage claims that you give me data. I'm just going to store it and I'm going to have some crypto economic game to make sure that you're storing data. So I want to create a system like this. What I have to do is I have to usually create my own staking mechanism, okay? So I create this like data storage token and let people get this data storage token and stake it. And by staking it, they're agreeing to provide service correctly.
00:17:11.642 - 00:18:03.210, Speaker A: If they don't do provide service correctly, their staked tokens will be slashed or taken away. Okay? When you want to create a system like this and you want high economic security, you want a lot of capital staked. And when you have a lot of capital staked, you have the opportunity cost of capital. And so for example, you want $10 billion staked in your data storage layer because you want to have comparable security to Ethereum. Now you have to pay a 10% or a 5% or something annual rate on that capital staked in order to sustain that staking group. In a non speculative world today, people may or three months back, people may have been buying these tokens and staking them because the token number go up. But in a non speculative world, you need to account for the cost of capital.
00:18:03.210 - 00:18:45.550, Speaker A: So there is a massive cost problem in running the middleware. The cost problem is you are not bounded by the operational cost of storing data on end nodes. You are bounded by the cost of feeding a massive economic capital base. That's the dominant cost. So one thing as we were designing some of these protocols is I started finding that most of the real systems are not at all capped by operational cost. They're all capped by capital cost. And one way to know it in reality is you look at any proof of stake ecosystem, you see how much reward goes to the person who provides operations of staking versus how much reward goes to the person who holds the capital.
00:18:45.550 - 00:19:34.250, Speaker A: 96% or 97% goes to the or 94% goes to the person who holds the capital and only 6% goes to the person who actually does the operations. So it's all cost of capital. So even if you come up with a breakthrough idea for reducing the operational cost like ten X, still, like the 94% remains unchanged. So this is a massive problem. So when you're designing middleware, your cost structure is actually capped by cost of capital. Okay? If you're adapt, the microeconomic problem you're facing is you're paying a very high fee to a large trust network like Ethereum so that you're getting trust from them, but you're limited by the weakest trust that you're depending on. If you had an oracle which is not as trusted, if you had a bridge that is not as trusted, you could get rugged there.
00:19:34.250 - 00:20:41.940, Speaker A: So your trust is always the least common denominator. So even though you're paying a high fee, the security premium for a better blockchain. You're not getting trust on all the dimensions that you want. Finally, as far as the core blockchain is concerned, there is also an economic problem. The economic problem is if the core value proposition of the blockchain is to provision decentralized trust and make revenue on it, ethereum is only able to provision decentralized trust on block making, not on all the other things that may be required to run a decentralized service. So what is happening is there are islands of decentralized trust that are being created by other middlewares and instead of the revenue aligning and creating a massive trust network, revenue gets fragmented into smaller islands, fragmenting trust for the ecosystem as well as losing to a value misalignment to the core ecosystem. Okay? It's actually a ridiculously simple idea that solves these problems all at one go.
00:20:41.940 - 00:21:09.334, Speaker A: Okay? The solution is called Eigen layer. It is a mechanism to leverage an existing trust network to do other things. I want to leverage an existing trust network to do other things it was not intended to do. That's it. That's the core idea. How do we do it? I'll get into that. Okay, so Ethereum supplies trust on ordering and execution.
00:21:09.334 - 00:21:54.390, Speaker A: As we said earlier, eigen layer is a series of smart contracts on Ethereum. Okay? And what it lets you do the core operative word here is restaking. That's the new idea. restaking. What is restaking? restaking is so when we're talking about Ethereum, we are talking about proof of stake Ethereum. In my mind already we are in the proof of stake world, right? It needs to happen. But already, for example, several tens of billions of dollars, maybe 30 or $40 billion is already staked in the Ethereum proof of stake network called the beacon chain which is just a run in to actually start running the proof of stake network.
00:21:54.390 - 00:22:29.442, Speaker A: So there is already a lot of stake locked up in Ethereum. So what is eigen layer? Eigen layer is a mechanism by which stakers stakers restake. What is restake? restake is they put the same capital at additional risk. Same capital, additional risk. Okay, so they lock the stake in Ethereum. The same stake they commit to additional slashing conditions. Slashing is a mechanism by which your stake can be taken away but you add additional reasons by which you can be penalized.
00:22:29.442 - 00:22:47.386, Speaker A: Your stake can be penalized. That's what you commit. On top of these smart contracts on Eigen layer. We do not need liquid staking solutions. I'll come to address that point. But right now I'm stating the property. I'll state the mechanism next.
00:22:47.386 - 00:23:12.130, Speaker A: The property that we want is the same stake takes on additional risk. And additional risk on what? On providing any new services that have been built on top of wagon layer. Any new services. Somebody wants to come and build an oracle. Somebody wants to come and build a bridge. Somebody wants to build a data availability layer. Somebody wants to build a new consensus protocol, any of these can be built on top of eigen layer.
00:23:12.130 - 00:24:20.294, Speaker A: If you are a staker and you are opting in to eigen layer, you also specify which subset of services you're opting in to provide trust for. You may say, oh, I like the Oracle project because I'm getting X revenue and need to do X work, and that's good enough for me. So I'm opting into the Oracle, but I'm not opting into whatever this far ordering or some other service. So as a staker, you can specify which subset of services you are opting into and therefore gaining revenue and also potentially taking additional slashing risk on. Okay, so now let's see how this aligns everybody in the ecosystem correctly. First, if you are a middleware, let's say I'm running an Oracle, and a staker who's already staked in Ethereum has to opt in to also provide services on this Oracle. They do not have an additional cost of capital.
00:24:20.294 - 00:25:36.622, Speaker A: They're already staked on Ethereum and earning Apr or whatever on top of it, and you cannot do much else with that stake. So by opting into eigen layer, the marginal cost of capital that you're incurring is either very small or you can say theoretically zero. Of course, there is a slashing risk that you have to account for, but if you know that whatever middleware that you're opting into, if you're an honest Node, you will never get slashed, then that slashing risk is either zero or minimized based on whatever smart contract risk and other platform risks that may be there. But the marginal cost dynamic of a staker is fundamentally, hey, what is the operational cost of running this middleware, and am I getting enough revenue for doing it? If the marginal operational cost is justified by the revenue that I'm getting on that middleware, I will opt in. It's a very simple equation. So the cost structure of middleware suddenly transforms from a capital limited to an operational cost limited. So this is extremely valuable if you want to come and build a new Oracle, you don't have to worry about how am I going to compete with Chainlink who has a $20 billion at stake.
00:25:36.622 - 00:27:02.682, Speaker A: There is $40 billion at stake on Ethereum and you can get them to opt into your Oracle and start providing services. Okay, as far as the DApps are concerned, especially services which are very popular, which many stakers will opt into, you're fundamentally getting the same trust as Ethereum itself if all stakers potentially opt in. So you could get the core Ethereum trust on services that were not natively built into Ethereum. And finally, it's extremely value aligned to the core ecosystem, to Ethereum itself. Why? Because not only is it giving additional yield opportunities for the stakers, people who have staked on Ethereum get block rewards and transaction fees, but they can also get Oracle fees and data availability fees and ordering fees and all these other things that were unavailable to them earlier. So the fact that you have potential additional sources of revenue for staking e increases the value of the token itself. So by kind of providing a mechanism by which you can supply this trust to other services and other people can create these services and it doesn't have to be created by one monolithic group and does not need approval from anybody, basically creates permissionless.
00:27:02.682 - 00:27:49.782, Speaker A: Innovation on top of a common layer. So eigen layer is a two sided marketplace. One side is stakers opting in into this eigen layer, the other side is middlewares services that are built on top of wagonlayer opting in to use these stakers. Is this system assuming honest majority or is this system operating on crypto economic assumptions, which is you can get slashed? I think that depends on the particular detail. As long as you can write an onchain slashing contract. I'll give an example of where you can write a simple on chain slashing contract. For example, you want to run a new blockchain on top of the same Ethereum trust network.
00:27:49.782 - 00:28:28.454, Speaker A: Let's say I want to run a Solana on top of the Ethereum trust network, the Solana blockchain, the C level virtual machine and whatever other consensus protocols. I want to run this on top of Ethereum. One of the core slashing condition in a protocol like this is if I double sign a block at the same depth of a block, I sign two different staker signs on two different blocks. This is a very easily on chain verifiable slashing condition. Then that set of nodes get slashed. So we do not have to make an assumption that people are going to behave honestly. All we need to make the statements, the type of statements we are shooting for.
00:28:28.454 - 00:28:59.250, Speaker A: If they did something wrong on your protocol, x dollars going to get burnt. So that's the type of crypto economic statements we want to make. If they did something bad to you, x amount of dollars getting burnt at stake. So that's the kind of assumptions we are shooting for. We do not require the transference of majority honest assumptions. There are certain things for which you cannot write on chain slashable contracts. This goes back to the discussion we had earlier in the morning here.
00:28:59.250 - 00:29:43.386, Speaker A: For example, threshold signing or threshold revealing and stuff like that. There is no clear way to do slashing for those things. You may be happy with saying that hey, it's the Ethereum stakers that are doing it and I'm happy to get a majority trust from them. But many, many use cases actually you can write sharp on chain slashing contracts. For example, if I'm writing an oracle, oracle is one of the harder cases. But when you want to build an oracle, you and I may reasonably agree that we will get slashed. If I bring in a price feed which differs significantly from a coinbase and a binance and FTX or whatever price feeds whereas that kind of an assumption cannot be done at the base layer of a protocol.
00:29:43.386 - 00:30:38.626, Speaker A: But as an opt in layer you and I may agree that's a slashing condition that we have opted into which becomes on chain verifiable. So there are certain things which are on chain verifiable, there are certain things which are not and each middleware has to design for this correctly. So if to the extent that your feature is on chain verifiable to that extent you get crypto economic guarantees rather than majority trust guarantees and you're getting the potentially if all each stakers opt in I've come up with, let's say, a much better protocol than all these consensus protocols on a virtual machine. I don't have to go figure out how to shill a new token and make it worth 40 billion for that system to be useful. I just need to convince these each stakers to opt in and run this new chain. And as I run this new chain, it's not security limited anymore, it's adoption limited and it transforms the dynamics of creating new distributed systems. So that's the idea.
00:30:38.626 - 00:31:24.542, Speaker A: So other than that there is no tethering to ethereum but because it is ethereum adjacent, for example, slashing contracts and other things are there on ethereum you can actually start interoperating with ethereum much more fluidly than if you had a separate chain. Transaction fees, for example, you could do many things. You could create your own new token. And this token is used for like it is the fee payment mechanism in your system and you use the same tokens to also reward the ethereum restakers in eigen layer. It's a free market. So the way eigen layer works is you come in and say here is a new service and here is the reward risk dynamic of this service and stakers opt in whether they like it or not. They're just voting yes or no on this free market.
00:31:24.542 - 00:31:59.514, Speaker A: So you can specify what the reward mechanism is. Reward mechanism could be something different. You don't need a new token. You just create transaction fees are paid to the e three stakers perfectly fine if you're building an oracle. You may say that anytime anybody queries the oracle that fee directly goes to the e three stakers. So you can create your own economic models on top of this. But even just that one thing, the fact that you can pay in arbitrary tokens rather than using only ethereum is itself a value proposition to run like interesting things on top.
00:31:59.514 - 00:32:52.214, Speaker A: So how Eigen layer works, it does not require something like liquid staking. What you do is you go and deposit your ETH into the ethereum smart contracts. And in the ethereum smart contracts you have something called withdrawal credentials who has the power to withdraw the stake from the native staking. So if you want to participate in Eigen layer you set the withdrawal credential to the eigen layer. Smart contracts. And by doing this, eigen layer has withdrawal power to withdraw your stake whenever, and therefore when it withdraws the stake, you may not get back your entire stake if you did something bad in Eigen layer. To the extent that everything is written on chain and Verifiable, all slashing conditions are written on chain and verifiable, you're not trusting me or anybody for the correctness of these slashing conditions.
00:32:52.214 - 00:33:40.140, Speaker A: So you opt into Eigen layer, you agree to these slashing contracts and is stake being over leveraged? And how do I know if it's being over leveraged? I think that's the question. And to give a very concrete example, let's say there are ten different apps which are running their own chains. Now, there is a kind of trend people are thinking about. Each DAP may have its own chain because it doesn't have to suffer fee congestion from other things happening. Like recently there was this ape coin and BYC had this created some externalities to the rest of the system. So each DAP could potentially be running its own chain. And let's say you have a DAP and you think that, hey, I have $1 million in value in this and I'm happy if like $2 million is staked in this system.
00:33:40.140 - 00:34:23.946, Speaker A: But it turns out ten of these DAPs, each of them have $1 million in value, rely on the same $2 million quorum. Thus this stake became over leveraged. So this is the scenario of concern, and we're very much, of course, worried about this scenario. And this is why eigen layer itself is also the risk management layer. So what do we do? We can actually model this problem graph. Theoretically, each staker is a node and each service depends on a bunch of stakers and has a condition that if more than 60% of the stakers cheat or whatever, that service kind of collapses and there is a profit from corrupting that service. Each service declares what this profit from corruption is.
00:34:23.946 - 00:34:55.010, Speaker A: You have this two sided graph. There's a profit from corruption for each service and there's how much is staked by each of these stakers. And then you can calculate cuts on this graph which say that if you remove some bunch of stakers out, they collude together, then this much of stake gets burnt. And this is the profit from corruption, total profit from corruption. And we want to keep this graph stable. It's a beautiful combinatorics problem. I think you guys will like it a lot.
00:34:55.010 - 00:36:11.680, Speaker A: We don't have an exact solution for it, but we have sufficient conditions and actually mechanisms by which we make sure that the system is never over leveraged. One thing is we haven't analyzed this scenario, this gaming scenario of TVL itself, because the neutral assumption is that TVL or total value locked in any of these contracts is kind of verifiable, right? But if somebody randomly under declares the TVL so over declaring TVL, you're just like more conservative. But if you under declare your TVL, then there could be some issues we have not analyzed whether that leads to a contagion or contained attacks only on your system. The ideal would be that only your system gets attacked, right? Okay. So having said all this, the really useful use case for Eigen layer is when almost everybody can run everything, okay? This is actually one would think that this is the most over leveraged. Everybody running everything, right? But this is actually the best case scenario that you actually want. In fact, what it does is it massively deleverages systemic risk as of what is existing today.
00:36:11.680 - 00:36:54.950, Speaker A: Let me explain. On the left side, what you see is you have DApps and there are like three middlewares. Each of these middlewares have $1 billion at stake. And there is a layer one which has $10 billion stake. Just some hypothetical examples. And every DAP depends on all these middlewares. Some oracle, some bridge, something, right? And if you had this picture and all these middlewares were mission critical, which means if you attack them, you can kind of tank the DAP, then what is the cost of corrupting this left side ecosystem is just corrupt one of these middlewares.
00:36:54.950 - 00:37:54.606, Speaker A: The cost of corruption on this system is the min of all these numbers. Okay? Let's see what happens in an eigen layer world. In an eigen layer world, let's assume that all stakers provide services on all these middlewares. The fully over leveraged example, what happens in this case is if everybody's providing service on every one of these middlewares. Now, to attack the DAP, you need to attack a majority of all the stakers, okay? And the interesting thing is how much staking will be supported on this summed up system is actually the sum of all the staking that was supported on all these systems. Why? Because each of them were enough to sustain a 5% or 10% Apr on the fees that it was getting on each of these systems. So what happens is you are moving from the min norm the minimum of all the things that you're depending on to the sum of all the things that you're depending on.
00:37:54.606 - 00:38:50.654, Speaker A: If every staker can run every service, that's really huge. So it massively reduces systemic risk from being the least common denominator to all services being commonly provisioned by one ecosystem. When is this feasible? This is feasible when middleware are designed to be scalable, horizontally scalable. As you get more and more nodes, the per nodes workload goes down. Then actually everybody will opt into everything because the operational cost of opting in is very low and you're actually just uniformly dividing it by N nodes. So when middlewares have scale out economics, then actually we expect basically every staker will opt into everything. Okay? All right.
00:38:50.654 - 00:40:03.910, Speaker A: So eigen layer is the restaking collective, a mechanism by which you opt in. It's kind of become like a layer directly on top of the staking layer and this restaking collective enables you to pass this trust beyond the limited confines of protocol upgrades. Basically now you can build any new blockchain that you want, a new virtual machine, new consensus protocols, new data availability layers, all of these things on top of eigen layer rather than having to go and build separate blockchains for each of them. So instead of having open innovation only at the DAP layer, you have open innovation across all layers of the ecosystem where you're sharing a common trust network and therefore reusing this for any new innovative services that you're building. And just a note here that we do not need access to things like liquid staking derivatives even though we can use them. And finally it lets each node permissionlessly opt into a subset of services that they are most interested in. Okay, so I think this is repeated.
00:40:03.910 - 00:41:20.830, Speaker A: I'll just briefly touch upon for some of you who may have been familiar with the evolution of this idea is origins is called merge mining. What is merge mining? So let's look at a proof of work system. In a proof of work system, if you want to run the system, there are two different costs. One is the mining cost and the other is the validation cost and the mining cost which is the cost of solving the proof of work puzzle far dominates the validation cost. And one idea is can I amortize this mining cost across many many different systems where you're validating things and indeed people tried this so that the per blockchain mining cost actually goes down. But there is a significant problem is that the crypto economics, the economic incentives do not transfer to the merge mined systems. If you merge mine an altcoin along with bitcoin, even if 100% of bitcoin miners opted into the altcoin mining, they can attack the altcoin without taking any significant damage because the bitcoin price is not affected and their mining equipment most definitely is not affected.
00:41:20.830 - 00:42:13.246, Speaker A: So while merge mining was a good idea for amortization, it failed in the economic incentives that accompany it. Our core understanding is merge staking. Merge staking completely transforms this economics. In a proof of stake system, the less appreciated fact is the dominant cost is not validation cost, it is the capital cost of staking and this is really dominant. And if you want to amortize this capital cost, what you're doing is you basically use the same stake, merge stake across many many systems. By merge staking do you suffer the same problem that merge mining suffered? No, it turns out it's the opposite. You actually get perfect crypto economic transfer.
00:42:13.246 - 00:43:13.940, Speaker A: What do I mean by perfect cryptoeconomic transfer? If you have 5% of ethereum stakers operating on your protocol, you have the economic security of that 5% which is significantly better than the crypto economics of merge mining. Also the other fact is if only 4% of bitcoin miners mined your system, you have no economic security. Whereas if 4% of stakers just opt in, there's only one, your system, which is merged staking on top of Ethereum, you get economic security, which is a transformational idea. That's why I said this is really like a really simple idea, but it's just not been thought about before. I think partly because of the path dependence and people got burnt with merge mining. More than solving the economic problems, eigen layer also solves some of the ecosystem problems. One of the problems is the question of block space.
00:43:13.940 - 00:43:53.454, Speaker A: Okay, so what is block space? Block space is basically each blockchain, because it has finite resources, has only a certain maximum size of the block that it can accommodate. This size could be measured in bytes, or it could be measured in some computational units. But today we are starting to see, for example, Ethereum. Block space is starting to command a lot of premium. It is one of the most valuable commodities in blockchain. So the economics of block space is determined by its relationship to block limit. What is the block limit? Block limit is the maximum size that a block can be.
00:43:53.454 - 00:44:38.030, Speaker A: And all of these systems have self adjusting economics by which as your block size gets closer and closer to the block limit, your price starts exploding so that the system doesn't go over capacity. Okay? So that's the basics of block space. If block space is and having more block space is in general good because you can build more and more interesting applications. Even today morning we were talking about auctions and whether it's 2.5 million gas or 5 million gas, it's only 300 milliseconds or like three milliseconds on a computer. We should be able to run it, and it's not possible today. I'll explain precisely why and how eigen layer completely transforms the economics here.
00:44:38.030 - 00:45:12.658, Speaker A: Okay? You look at the notional, block space, or the maximal block space that a node can run. One way to think of it in very concrete terms is what is the bandwidth that a node has? And that puts a limit on block space. The x axis is replicas or nodes. Different nodes have different potential amounts of processing power or bandwidth. Let's say different nodes have different bandwidths. The y axis is just block space. You can think of it now measured in bandwidth.
00:45:12.658 - 00:45:54.038, Speaker A: Okay? There are some nodes which have very low bandwidth and some nodes which have much higher bandwidth. Okay, and how is the block limit determined? How do you determine the maximum bandwidth that you should consume as a blockchain? What you do is you set an entry restriction called block limit. You say that, I want to admit, for example, Ethereum's philosophy is I want to admit a home validator in Venezuela. That's what I want. So 1 be okay. So you go and say, that's the block limit. I'm going to set my block limit so that a 1 Mb/second guy can participate in the system.
00:45:54.038 - 00:46:45.586, Speaker A: So that's how you set block limit. So block limit is set by the weakest nodes infrastructure, the weakest nodes infrastructure to participate in the ecosystem. Now what we realize is all of us using Ethereum are paying because of this guy. The one guy in Venezuela we want to accommodate. Even though this guy has 1 guys stakers running on Ethereum, on Amazon web services or all nodes or cores, one or figment any of the staking services actually have ten gigabits per second connection. That's like 1000 or 10,000 x difference in the computational resources between the powerful guys here and the last guy here. And block limit is determined by the weakest.
00:46:45.586 - 00:47:31.174, Speaker A: Note you want to admit. So part of this is the paradigm of blockchains today, where it is a completely homogeneous system. It doesn't matter whether you're talking about Ethereum or you're talking about a salana. In salana, the entry limit, instead of being kept at 1 Mb/second, is kept at 50 megabytes per second or 100 megabytes per second. But it's still if instead of having 100 megabytes per second you had 10gb/second, you can do nothing more on the salana system. So all blockchains today are determined or are designed for a homogeneous ecosystem, homogeneous staker ecosystem, whereas in reality stakers are highly heterogeneous. Okay, how do we solve this problem? We don't need to do anything more.
00:47:31.174 - 00:48:07.314, Speaker A: Eigen layer automatically solves this problem by creating a free market by which these same stakers can lend out their additional block space for other services built on top of eigen layer. For example, in this system, somebody will come and build another chain which instead of having 15 million gas per block, will have 15 giga gas per block. Because these takers can opt in and get a different security. You don't get the entire Ethereum security. You get like a 60% of Ethereum security. And that's already good enough. And I just want to make one comment that it's not all about economic security.
00:48:07.314 - 00:49:02.210, Speaker A: There is a regime where you need decentralization that's for censorship resistance, because whether your transaction got censored or not is not a slashable offense. So what we really like is you have a decentralized base station like Ethereum, which provides a layer of censorship resistance, on top of which you can build any other service, and you can use Ethereum as a backstop for censorship resistance. If a transaction is written on Ethereum, you're forced to include it in your side chain or whatever other service. So by having this separation that Ethereum becomes the censorship resistance layer and therefore keeping the node restrictions very low. And on top of which you can construct high power systems which can still get a lot of the economic security and have insane computational abilities. This is a transformation of block space. Okay, staker heterogeneity extends beyond computational abilities.
00:49:02.210 - 00:49:48.286, Speaker A: Stakers are heterogeneous not only in how much block space they have, they're also highly heterogeneous in their risk and reward preferences. You and I may agree that we'll get slashed if we differ from a coinbase API output, whereas for somebody else that will be completely unacceptable. So stakers are highly heterogeneous in their risk taking abilities and in their beliefs on the world. And therefore this can never be normalized into a core protocol, but can be externalized into an opt in layer. So stakers are heterogeneous in risk taking abilities. Stakers are also heterogeneous in reward preferences. For example, beyond.
00:49:48.286 - 00:50:39.646, Speaker A: So in Ethereum, block is thought of as a colorless quantity. All transactions are equal and the only signal you use to distinguish transactions is price. Whereas this creates all kinds of interesting problems. Like for example, it is very difficult to build a social network on top of Ethereum, even if Ethereum had much more block space, because every social network transaction is competing with a DFI transaction, which is much more profit and loss on a transaction by transaction basis. But on a ten year horizon, the social network may win out. So there is no ability for stakers to express their coloring preferences that they would much rather bet on a social network than on a financial system. So our solution is they opt into different subchains, different layers on top of the core layer, in which they have different reward preferences.
00:50:39.646 - 00:51:50.490, Speaker A: You get paid in this new social token and you're betting that this social network is going to grow. So eigen layer maximizes staker heterogeneity and creates a free market instead of having a minimum common denominator market. Okay, so finally it solves the one problem that has been bugging me for four and a half years, which is how do you design a blockchain which is both democratic and agile in its way of innovation? So here is a plot. The two axis is you have x axis is governance. Is governance democratic or autocratic? And the y axis is the rate of innovation. Agile or stable or slow? Right? Something like Ethereum is very democratically governed, but is also very, very slow to respond to new requirements in the market. All protocols today, I'll claim, are making a trade off between agility and democratic governance.
00:51:50.490 - 00:52:32.930, Speaker A: There's a trade off between governance being democratic versus the rate of innovation. And this is a significant problem for blockchains. If we want to take the thesis of permissionless innovation, ethereum plus eigen layer actually gets the best of both worlds. You have a base layer which is democratic, which is slowly updated, which is stable over long time frames. On top of which on eigen layer, people can build many new innovations which respond very quickly to market demands in a completely permissionless innovation. Actually, I would even say that Ethereum plus eigen layer pushes this all the way up here. So this is the rate of democratic innovation.
00:52:32.930 - 00:53:19.666, Speaker A: This is the rate of monopolistic innovation. This is the rate of permissionless innovation. Because the upgrade on BSE needs to be shipped by the CTO at BSE or something, whereas an upgrade on Eigen layer can be shipped by anybody who's interested in shipping an upgrade. Okay, so I think I'll conclude the talk with this. I just gave a hint of what kind of things can be built. We are exploring building bridges, building event driven automation, fare ordering services, side chains and all kinds of other interesting things like how do you prevent or integrate mev into the blockchains? All of these systems can be built on Eigen layer. Eigen layer is already live in our internal testnets.
00:53:19.666 - 00:54:18.866, Speaker A: You can deposit things like liquid staking derivatives you can deposit into the Ethereum beacon chain and opt into Eigen layer. And not only that, we have actually already built the first use case for Eigen layer, which is a hyperscale data availability layer for Ethereum. I will not be able to talk about it now, but I can tell you that it is basically a data availability layer. This is one of the biggest problems in Ethereum scaling today. You have roll ups which offload computation and memory, but cannot offload network bandwidth. All of the data has to be committed on top of Ethereum in order to make sure that they are secure. And instead we have an e three stake layer called data layer, which actually does all of it, but incorporates some of the best ideas in erasure coding polynomial commitments to actually get a hyperscale data availability layer.
00:54:18.866 - 00:54:36.960, Speaker A: It already gets you a rate at which you can write data into. This layer is on our testnet 12.4 megabytes per second, which is ten x larger than Ethereum two, which is scheduled to ship in two years. So I'll stop the presentation of this. Happy to take any questions.
00:54:40.450 - 00:54:52.146, Speaker B: So if I deployed an item layer and I was happy with whatever risk your graph calculates, right, then say like ten more things deploy and that changes all of them assume likely report that.
00:54:52.168 - 00:55:04.482, Speaker A: And I was like never since change. So the way you would solve the problem if you're over leveraged is by increasing your fee, more people will opt in into your layer and you'll get under leveraged again. So that's the dynamics that we're anticipating.
00:55:04.626 - 00:55:43.874, Speaker B: If I'm the developer, this clearly seems better for me because I can leverage existing capital. I feel like that was pretty so now I'm wondering as the Ethereum network that currently are in this great situation where they're really under leverage, they have so much capital and the amount of damage you can do on Ethereum with all that capital is not a whole lot. So I'm wondering sort of like as even if there's hundreds of people who are already in a stable, every new person that gets added, do I need to be concerned that a new person who gets added did something? Done in their protocol and now that it staked it used to be securing me and used to be stable is.
00:55:43.912 - 00:56:22.640, Speaker A: Now I think one way of thinking about it is if you go back like three years the Ethereum stake supported like maybe 100 million dollar DAP ecosystem. And today the DAP ecosystem has gone like thousand x and the ethereum stake has grown thousand x. This is exactly what we expect will happen to this ecosystem. As more and more services start opting in, the yield opportunities go up. And as the yield opportunities are going up, basically more capital gets locked in. Instead of like 5% of ETH getting locked in to stake, you may have like 50% of ETH getting locked in to provide services.
00:56:23.170 - 00:56:37.960, Speaker B: I followed that. But what happened if the Dow or whatever that it was just like a huge wildly costly mistake. It's one thing that was completely separate from the consensus layer, right? But it's another thing.
00:56:42.410 - 00:57:25.042, Speaker A: I think it's an important problem. And the problem is, okay, let's start from the point of view of the staker. The point of view of the staker is somebody came up with a new middleware, right? And it's giving me x yield. Do I opt in or not? And okay, if it's just yield and not much risk, then you opt in. Now that all DeFi yield is drying up, people will opt in when there is additional actual genuine way to earn more yield. But the risk that is very hard for them to understand today is, is this middleware have like smart contract errors, distributed system issues that basically could slash an honest note. That's where I think all of that problem.
00:57:25.042 - 00:58:20.514, Speaker A: If you just want to remove abstract it. I think one way of expressing that problem is that I think what we need is just like there is a smart contract audit ecosystem, we need these middleware audit ecosystems. And my general thesis for it is smart contract audit is serving users who are supposed to know nothing and middleware audit is serving stakers who are supposed to know something. If we can't get middleware audits to work, we should not really be trusting smart contract audits. So that's my high level of why I think it's okay, but it's not an answer to this problem. The problem is fundamentally, if all stake, the extreme example of your case would be all stake opted into an eigen layer system where you can get slashed even without actually doing anything bad. And then you got slashed and now the whole protocol is at risk.
00:58:20.514 - 00:58:46.334, Speaker A: It's possible. It's possible. And so whatever these new middlewares are need to be like more. And I think in these scenarios, there is a tragedy of the commons, but the stakers are actually the ones who are losing their money. So they should have been more careful in actually opting in. And how do we make it easy for them to be more careful? That's all that we are focusing on using L one block space. It depends on what you're doing.
00:58:46.334 - 00:59:39.678, Speaker A: So the scaling part is not the same as moving to l one. So let me give a very concrete example. I just mentioned the data availability layer, but basically what do I mean by scalable middleware? The data availability layer is a great example of a scalable middleware where each node so if I'm downloading, if I want to store a file size of size F, instead of each node storing and downloading the file, that's what happens today in Ethereum. What you would do is each node only stores roughly one over n of the file size in an erasure coded thing they receive like a proof that this chunk corresponds correctly to some polynomial commitment and they all sign off on that commitment. And if enough people sign off on that commitment, you think that data is available. So this has a self scaling economics because the total cost of storing a file is just a constant. It's actually two.
00:59:39.678 - 01:00:30.714, Speaker A: It's like as though two nodes are storing a file because each node is only storing two over Nth of the file. So the total cost of storing a file does not depend on the number of nodes that opted in, but the price you can charge for it depends on the number of nodes because you are giving more economic security. So what happens is there is a self scaling economics by which more and more nodes will opt in because they can charge a security premium without increasing the cost of operations. The cost is constant. So basically what is happening is the erasure code breaks all trade off between scalability and decentralization. You can get full decentralization and full scalability simultaneously because as you have n nodes, you get the security of n nodes, but you get the cost of only storing on two nodes. So that's like full scalability and full decentralization simultaneously.
01:00:30.714 - 01:01:17.674, Speaker A: And by using layers like this, you can actually solve it without requiring each node to provision more and more bandwidth or more and more storage space. So that's one way of scaling. Another way of scaling is I just want to take the solana away, right? I just want to run at a much higher block space than what Ethereum is comfortable with. By that I will cut out the home validator in Venezuela. Yes, but the 30% of people who can actually opt in are enough and they provide enough economic security for me. And as long as for them, the opt in cost or operational cost is less than what revenue they're making, they're happy to opt in. So these are different types of scaling and we are just a layer on which you can build arbitrary distributed systems.
01:01:17.674 - 01:02:15.114, Speaker A: On Ethereum, you want to build your secure multiparty computation, you want to build your fully homomorphic system, you want to build some other crazy thing that you have. You can just leverage Ethereum trust to actually do it, rather than having to go and bootstrap your own trust. And now what happens is there's a competition between scalable middleware that's built on top and non scalable middleware. And because of the operational cost advantages of scalable middleware we expect they will win out completely over non scalable. So this is really work of your group of state side. Should they be thinking of your system as being on top of this? That's one use case of Eigen layer. You can also build things that are simply not additional services on ethereum.
01:02:15.114 - 01:02:34.420, Speaker A: Like Oracles. Right? Oracle is not a side chain. So the difference between having a side chain and an e three staked side chain, an Eigen layer side chain is you don't need a new token of value. You don't need to pay to maintain the cost of capital of that token of value. You're just like amortizing that over all these other things that other people are doing.
