00:00:07.410 - 00:00:07.960, Speaker A: You.
00:00:10.090 - 00:00:28.198, Speaker B: All right, welcome everyone, to today's A 16 Z Crypto research seminar. Very happy to introduce our very own Pranav Garamiti, who's full time here at a 16 Z Crypto. He's going to talk about transaction fee mechanisms, EIP 1559 and other designs, and in particular, how Mev changes our understanding of them.
00:00:28.364 - 00:01:05.234, Speaker A: Thanks, Tim. Yeah. So today I'll be presenting some joint work that Arthan with Tim and Miriam, also with my research lab. And yes, I'm talking about transaction mechanisms short. We'll call them TFMs with active block producers. And so to start off with as an outline, kind of start to talk with some informal motivation and definitions, just kind of defining what are TFMs? What do you want from them? Kind of this big distinction we make is between passive block producers and active block producers. So passive is what you probably think of right now, or at least what the literature has thought of so far over our block producers only care about transaction fees and block rewards.
00:01:05.234 - 00:01:58.530, Speaker A: And active is this case that we're more living today where Mev exists and block producers and searchers and miners kind of all care about some application level value from the transactions. And so from there I'll move on to some more of the formal model and the results kind of exactly how you define a TFM. And kind of the main result we have is impossibility results, kind of going through that and then talking about some kind of approximate notions of income compatibility that you can get to kind of get around impossibility. And then we'll kind of finish off with some future directions. So here what are some directions to get around these impossibilities, and in particular talking about Encrypted Mempools Order Flow auctions and Mev burn and kind of how those relate to our model. So to start off with, why do we need TFMs? So right now we have block space as a finite resource. And so we'll have some block producer builder or some party that's trying to put together a block.
00:01:58.530 - 00:02:45.026, Speaker A: They see this Mem pool of transactions and they need some way of deciding which transactions to get in and so through a mechanism. And so basically, they're going to charge payments to different users and based off those payments kind of decide what are the most worthy transactions or what transactions do they want to get in. So here kind of you can see in the bottom we have five different transactions with the corresponding dollar amounts those users might value them. So one kind of first thing you might think of is this kind of first price thing where basically every transaction maybe submits their bid, how much they value the transaction. The block producer just picks the highest ones and charges them their bid. So here that would be this kind of orange, red, and purple transactions are the highest ones. And so what are the ideal properties of a TFM? And so the first one is coming and somehow pick the most optimal set of transactions.
00:02:45.026 - 00:03:24.894, Speaker A: One super trivial thing is you just look at the mempool, pick some random things until you blow up your block and that wouldn't be great for kind of clear reasons. The second one is that we really want the mechanism to be incentive compatible for the block producer or the valuer in whatever setting. And so we call this in our paper BPIC. In prior works it's been called Mic or MMiC for myopic minor incompatible. And this is really kind of an essential property of the TFM if the person running your TFM is going to be the block producer. And so if they have some intention to deviate, then kind of all the guarantees you might want would go away and that wouldn't be great. And so kind of a classic mechanism that people think about economics.
00:03:24.894 - 00:04:03.390, Speaker A: The second price mechanism that kind of really achieved this first goal of picking the optional set of transactions turns out to not be something fatal for the block producer. And the way I see that is basically the block producer can just insert a new transaction kind of right below the first highest price and increase their revenue. And that's kind of one of the main reasons we don't see this used in practice in blockchains. And kind of the last property we really want is this notion of users having dominant strategies or kind of Dsyc for short. And this basically says that users should have basically some kind of like good UX. They should just want to report their true values and the mechanism should be easy for them to use. And so here's where kind of the first price auction kind of fails.
00:04:03.390 - 00:04:48.446, Speaker A: I briefly described before in the first price auction, users want to exactly reason about what's like the smallest bid they could get to still be as just a bit above the next highest person to maintain inclusion. And so we'll kind of be trying to aim for some property of these three things in our TFMs. And so one thing to start off with, which is kind of what the current EIP 1559 is built off, is this idea of a tipless mechanism. And basically in a tipless mechanism there's some base fee that protocol sets and then it's a fairly simple rule. If I have higher value for my transaction than the base fee, I'll just bid the base fee and I'll be included. So here, for example, if the base fee was six, we can see that kind of like these red, blue and green transactions have value below six. So they don't want to bid anything, they just bid zero.
00:04:48.446 - 00:05:24.682, Speaker A: But this yellow and purple transaction are above the base fee of six. They're willing to just bid this base fee and get included. And so, if you're familiar with how 1559 is designed today, you might think there should be some kind of tip on top and so that's kind of to have some weak type breaking. If the base space set appropriately, basically these two mechanisms are equal. But this one's just a bit simpler to describe. So we'll kind of be using tipless mechanism as kind of the focal point of thinking about what our kind of approximate DSIC and basic mechanisms in practice today. And so now to kind of define a preliminary version of exactly what I'm talking about here.
00:05:24.682 - 00:06:00.658, Speaker A: So basically there's a space fee that's set. We're not going to be worried about how it's set for the rest of this talk. Basically every user gets this take it or leave it price effectively. If they value the transaction above this take it or leave it price, then they just bid that amount. And then kind of the mechanism requires that every included transaction has to burn this fee effectively, right? So this is the classic like burning rule you might have heard of in 1559. And then because you intact this bit of an extra tip on top to break ties in this version of the mechanism, we'll say we have to just break them arbitrarily. And so there's some maybe lexigraphic ordering you can imagine you hash of transactions.
00:06:00.658 - 00:06:24.826, Speaker A: Of course this type of stuff is gameable, but for the purposes of describing decent compatibility notions, we'll kind of ignore that for now. And so kind of like looking exactly at the notions you want. So for Dsik, this is kind of easy to see that it's DSIC. Your strategy space is very simple. I either pay the base fee or I don't pay the base fee. That's all I can do as a user here. And so if my value is higher, I pay it, if it's not, I don't.
00:06:24.826 - 00:07:04.466, Speaker A: And that'll maximize my welfare here for BPIC because we're burning the entire base fee in this case. We also get that the block producer is basically indifferent between what they put inside of this block. Kind of like whatever transaction they put in, they'll get paid the base heap. They have to burn that immediately afterwards. And so here it's actually very important that the block producer only cares about transaction fees in the block reward. And we'll see that basically this property of BPIC for this mechanism will kind of go away once you move to a world where the block producer actually has value for transactions inherently kind of separate from the transaction fees. And so one thing that's not great about this is the welfare.
00:07:04.466 - 00:07:26.370, Speaker A: So you actually can't make any guarantees that we've selected the optimal set of transactions. And this is in large part because of this arbitrary tiebreaking rule. We just set the base fee too low, we get tons of transactions that all, clear it and we have to do this kind of lexigraphic ordering to just pick the top ones. You can imagine very high value transactions just happen to be at the bottom of their ordering. And they're quite included and then we're not doing great on welfare.
00:07:28.150 - 00:07:45.798, Speaker B: Maybe just to clarify the last point, so if the base fee is high enough that everybody fits, there's no problem. So it's when the base fee is too low and then some people get in, some people get out. And how do you decide? This mechanism decides arbitrarily, so you don't necessarily have any guarantees, you get the best ones.
00:07:45.884 - 00:07:46.422, Speaker A: Yeah, exactly.
00:07:46.476 - 00:07:54.678, Speaker B: That's the difference with 1559. Right. Because there people can compete through the tips. And so if the tips reflect the values, you're actually going to be picking kind of the high value transactions.
00:07:54.774 - 00:08:15.194, Speaker A: Yes. Okay. Yeah. And so kind of getting to the key part of our work is that this kind of misses part of the picture. So this key thing, the block producer only cares about transaction fees isn't true today. Right. Mev is a big thing and a lot of the value in blocks that can come from kind of these mev transactions, you can see how high kind of like block builders are bidding in PBS.
00:08:15.194 - 00:08:49.018, Speaker A: And we'll kind of get into this bit on the talk. There's lots of evidence today basically, that the block producer really does care about what exactly these transactions are, more so than just how many fees they're paying. And so basically we're going to kind of try to abstract away defining exactly what mev is. So classical examples of like front running, back running, liquidations, all this type of stuff is what we're talking about. But we can even think about mev as being like out of protocol stuff. So, for example, if I make a bet with a friend about the price of something and I'm a block producer, maybe I have incentives to include certain transactions to make that bet come true off chain. Right.
00:08:49.018 - 00:09:39.094, Speaker A: And so we'll basically just assume there is some valuation function that the block producer has over just orderings of transactions or sets of transactions and that'll kind of be sufficient for our purposes. We won't try to get bogged down in exactly how the settings get extracted or what's kind of the functional form of that. And so in particular, this really messes with the notion of BPIC. And though the block producer does have these kind of values for transactions, it distorts the properties or it distorts their incentives to follow the mechanism as is kind of laid out. Can I ask conceptual question? Yeah. Maybe I shouldn't think of the mev as a different way of paying the miner. The fee is a very direct way of paying the miner.
00:09:39.094 - 00:10:18.434, Speaker A: If I do a transaction that allows the miner to extract more value, I'm, at the end of the day, basically tipping the miner. Yeah, I think that's a fine way to interpret it. Luckily that comes up a decent bit in some of our future stuff, but you can definitely imagine that. So that's also what makes the incentives kind of hard and we'll get into that. If I'm a user and I know exactly how much mev my transaction has, I think it's perfectly fine to think of it as a fee to the miner. But if I don't know how much mev my transaction has, and it's kind of unclear how to think about it from a user's point of view of maybe they're inadvertently tipping the miner, maybe they're not. And that seems kind of undesirable.
00:10:18.434 - 00:10:19.478, Speaker A: That's actually where a lot of the.
00:10:19.484 - 00:10:35.610, Speaker B: Hardness comes from, if I can add to that. So this work is kind of taking no stance on whether mev is good or bad, nor is it taking any stance on who should get it. It's really just investigating how the incentive properties break down when you have mev.
00:10:36.210 - 00:11:06.898, Speaker A: Yeah, exactly. And so kind of like defining me when I say block producer. It's a pretty vague term. And so today, this is kind of a picture people at Frontier made and it's like kind of a whole mess. There's all these parties kind of interacting and kind of getting transaction or user all the way to be included finally in a block. And so purposes of our talk today will basically just make two distinctions. There is the user themselves and there is the block producer, which is everybody else kind of combined to a single party.
00:11:06.898 - 00:12:00.694, Speaker A: You can assume there's maybe payments happening between them to get this final valuation, but we will consider just two types of parties, users and the block producer. And so basically, this isn't super relevant to the actual understanding of the results. But if you're kind of confused about what exactly I mean when I'm saying block producer, just think of this entire red circle as just one party, basically. Okay? And so I'm getting to an example of kind of having this active block producer. So we saw before, when the block producer only cared about transaction fees, it seemed like they could probably accept some combination of the red, yellow and purple transactions. But now imagine the block producer kind of has this evaluation in their head, right? So they can just kind of see how much mev these transactions would generate by doing some simulations or something and say this kind of producer has value. 20 for the red thing, 30 for the blue, 10 for the yellow, 115 for the green one, and two for the purple one.
00:12:00.694 - 00:12:45.362, Speaker A: And so I'll get into some examples of what these CFMS might look like. But you can kind of imagine that if the block producer really like it's, trying to maximize their own value and the fees aren't super high because the magnitude of their values are higher than the magnitude of the individual users values, they might actually just pick this, like, red, blue and green block or transactions instead of the red, yellow and purple ones. And so now let's kind of go back to the tipless mechanism. But now let's assume that the block teacher does have their own valuation. And so now deciding what gets into the final block is more complicated than just saying what clears the base fee. We're assuming the block producer is basically just going to maximize their own value. And so now even transactions have to be a bit strategic in how they're going to bid.
00:12:45.362 - 00:13:37.030, Speaker A: So we saw before that the transactions from the user's point of view have like a very simple choice. If their value is below the base fee, they don't bid. If the value is above the base fee, they just bid the base fee and that maximizes their value. But here we see actually these bids are a bit off from the actual values users have because they can kind of play some games internally of thinking, will the block producer have some value, maybe willing to maybe subsidize part of the difference between my bid and the actual base fee. So for example, this red transaction like underwid by a dollar because maybe they have some inkling that the block producer has some value for the transaction and is willing to subsidize kind of that difference of two between the base fee and they have value three. So actually they were right, this blue transaction, they bid zero and they still got included. And you see here where before kind of having this yellow transaction being included was optimal.
00:13:37.030 - 00:14:13.620, Speaker A: Here the yellow guy might have been trying to underbid value a bit and hoped blockbuster had some value. And so because they bid under the base fee of six and they bid five instead, and the blockbuster ends up having zero value, they're just not going to include the yellow transaction. And instead the purple transaction who's at least paying the base fee will get included. Block resource doesn't really care. It'll burn that anyways. But we can see how things are kind of a lot more tricky with reasoning about how much you should bid to reinforce this point. If you kind of just shift around the block producer valuation by a bit and we see the users have the exact same values and the exact same bids, that the allocation still changes.
00:14:13.620 - 00:15:06.210, Speaker A: And so in this case, now the red transaction, there's still high value from the block producers, they still got included. But here in this case, the yellow transaction was correct, the block producer had high value or some value for them. And so even though they underbid the base fee by one, the block research willing to subsidize that and they're fine. And so we can kind of just see to kind of like to emphasize the point that getting Dsyc is much harder in this setting because the users have to reason about the block producer and their own values transactions, which can make things more complicated. And to kind of have to redefine the split mechanism in this world that includes this notion of they're allowed to underbid and still get included. We'll say that basically every included transaction pays the minimum of their bid and the base fee. So if they bid under the base fee, they can still get included if the block producer is willing to subsidize them, which was not the case in the previous version.
00:15:06.210 - 00:15:58.318, Speaker A: And now basically just the block producer is required to just still burn that base fee for the transaction they include. And we're still going to do some basically arbitrary tiebreaking between transactions. A block builder and the block producer is indifferent between. And so the form we see why it's not Dsyc, right? So you kind of saw this in the picture, but basically users have to reason about do I want to underbid the base fee? Because a block producer has a very high value and so there's no dominant strategy there. And if you try to fix this by saying, okay, block producers are only allowed to include transactions that are above the base fee, then that would fix the DSA problem because you'd be backing this ruler. Users are either bidding zero or just the base fee. But now we kind of break BPIC because the block producers aren't kind of incentivized to exactly follow this mechanism.
00:15:58.318 - 00:16:32.830, Speaker A: And you can imagine that maybe you get something like so we're not touching about this formally, but like some option agreements or something where users still have to kind of play these games and they might form side contracts for the builder to kind of get around having this base fee be set. And so this kind of motivates the question. That kind of this classic thing, the simplest mechanism that was Bthic and DSIC. In the world where block producers are passive and have zero value for transactions apart from transaction fees, in this new world where we have active block producers, can we still design TFMs that have some of these good properties?
00:16:33.810 - 00:16:38.754, Speaker B: Pranav maybe it's worth mentioning that the last slide applies verbatim to EIP. 1559 also.
00:16:38.792 - 00:17:25.642, Speaker A: Yeah, exactly. The small bit of tipping that you add on top of 1559 doesn't let you get around any of these problems. You slide the exact same thing. People might want to underbid the base fee and then kind of reason about all the same types of problems you solved just with this more simple tipless mechanism. And so kind of now getting into the formal model of kind of thinking about what are our agents? So basically we'll say that we have these users, the HFS from transaction t, they have this private valuation VT for inclusion. And so this is like a very simple part of our model and that in the real world, you might imagine that users might think about how to craft their transactions to kind of have less mev and kind of play some tricks around this. For here we'll just assume the transactions are just given and users just have a very simple value for inclusion.
00:17:25.642 - 00:18:12.350, Speaker A: So they won't care if they're the front of the block or the back of the block, they won't care about if they were sandwiched or not. It's like it's a very simple if their transaction is included, they have this value. If it's not, they have zero value. And so then we'll basically just define a block B as basically just finite ordered lists of these transactions and some other transactions that maybe the block producer might put in they're coming from other sources or whatever have you. And so we'll define a block producer BP as basically saying they get the final choice of choosing a block, which means choosing what transactions get in the final block, along with their ordering, along with inserting their own transactions, all the classic kind of mev stuff. And so we'll basically capture this by saying they have this valuation function VBP, and there's some feasible set of blocks. You can imagine that being some block size, for example.
00:18:12.350 - 00:18:55.878, Speaker A: Like there's only K transactions that can fit in a block, but it's more of a general thing. The exact way the feasible block structure looks doesn't particularly matter. The main important thing is that what blocks are feasible is not a function of bids, but only a function of the actual transactions themselves. Yeah. And so basically we can think of this valuation function BVP as the value, the block producer, the mev value that the block producer can take from certain sets of transactions. And so finally, kind of the objective we're going for is to maximize overall welfare. So we'll see the welfare of a block B is this block resource value for that block B, plus the sum of basically the inclusion values of users who got included in that block.
00:18:55.878 - 00:19:24.630, Speaker A: It might be some debate of whether or not you want to include a block booster's value here, but for anything we're doing, it doesn't matter. The results actually hold, since they're mainly possibility results. The results actually go through equally well if you assume the welfare is just for users instead. So you can kind of do those interchangeably depending on your context. And so to give some flavor what these block booster valuation functions VVP might look like, kind of the simplest case is this passive one, which is what has been studied in the past. So this is where the valuation function of the block producer is just zero for any block. They don't have any mev value.
00:19:24.630 - 00:20:10.930, Speaker A: Traditional settings so far, maybe the next most natural is this additive case. And so we can assume this block producer has this value Mu T for every transaction T. And there's some frontier block is just the sum of the Mu T's that our transactions get into the block. And so here we can see kind of like if you have independent mev opportunities, different AMM trades on different pools the block producer can get value from. And so since they're not really affecting each other, the block producer can effectively just add their value across all of those opportunities and get value from that. And the last thing that you might think of that's still fairly simple is a single minded case. So here we can imagine over the set of all possible blocks, there's some partition of the blocks in the set S and blocks not in S.
00:20:10.930 - 00:20:49.898, Speaker A: And you can imagine. So here you is just some constant if there's some liquidation opportunity and so you maybe need some combination of like two or three transactions to make this liquidation go through. And that's all I care about as a block producer, I don't want to do anything else. Then kind of like any set of the blocks that capture those two or three transactions, I have this constant value for. Any blocks that don't contain all these transactions, I have zero value for, I have no other mev in that block. And so these are kind of just some things to keep in mind for the purposes of this talk. Basically everything will go through, we're just additive case in your mind whenever I describe a block producer valuation, just think of it as being additive.
00:20:49.898 - 00:21:47.214, Speaker A: And so now to define the TFM, there's two main parts that actually get defined as kind of part of the protocol and these are the payment and the burning rules. And so the payment rule is just this function P that specifies represents a non negative payment, this PT of B and this bold B is kind of the set of bids in the block or bids by all the users for all the transactions. And so we'll kind of say you'll get charged this piece of T if your transaction T is included in the block. So the payment rule is actually defined for each individual separate transaction. And then the burning rule is kind of a more aggregate thing that basically says it's this function Q where you'll have this non negative burn Q of B that's sort of a function of the block and the function of all the bids. And so this is what the block producer has to pay. So if the block producer gets this vector of bids and they pick this block B, they'll have to pay this burning rule that's set by the protocol.
00:21:47.214 - 00:22:18.682, Speaker A: They can't modify this. And so again, kind of stressing the block producer cannot affect the payment or the burning rules. All the payment rules are kind of defining the protocol is coming to the block producer and the burning rule is basically where the block user has to pay to the protocol. You can imagine for the token holders. And if it's in a deflationary sense basically these two are kind of what's Coral defined the protocol. And then the third part of it TM is allocation rule. And this is basically just a function that specifies kind of as a function of the bids by the users and the block producer's valuation.
00:22:18.682 - 00:22:39.270, Speaker A: It tells you what block will actually get chosen. And so this one isn't actually firmly coded in the protocol. It's up to the block producer to be running the allocation rule as a function of the payment and the burning rules. And so we'll basically have to define TFMs where it's in the block producer's interest to follow the allocation rule kind of asset.
00:22:39.770 - 00:22:47.250, Speaker C: So the allocation rule should be independent of the distribution of user valuations.
00:22:47.410 - 00:22:56.918, Speaker A: So I mean, you're allowed to take in this vector of bids. So in that case it can be a function of the distribution of user valuations. I'm not sure if I understood the question correctly.
00:22:57.014 - 00:23:00.662, Speaker C: Okay, so this is their realized bids.
00:23:00.726 - 00:23:19.540, Speaker A: Yeah, these are the realized bids. So if it was a DSIC mechanism, these would be their actual values. So that would be fine. We'll see that getting DC mechanism is going to be hard in this case. But insofar as users report bid as a function of their values, then the allocation can depend on the user's values themselves.
00:23:19.910 - 00:23:46.874, Speaker B: Yeah, everything is prior free in the model. The whole model is prior free. The whole paper is prior free. Maybe one other comment, because I feel like there's a really subtle point on the slide actually. If people are thinking about how EIP 50 59 is usually described, normally you think about like money coming in from the users. Some of it gets sort of goes to the black producer, some of it gets burned and goes to the holders. That's not exactly what this formalism translates to.
00:23:46.874 - 00:24:18.418, Speaker B: So here you think about the black producer being like almost like a bank in the middle where they take payments from the users and then they are responsible for doing a bunch of burning themselves. And in particular, this opens the possibility that the block producer may burn more than the payments they got from the users, which is not what people are used to thinking about. And that ties back to your picture where you talked about subsidizing. So that's what gives the block producer the ability to subsidize base fee burns to the users. That just means P does not cover Q. That's what the subsidy means.
00:24:18.504 - 00:24:19.140, Speaker A: Yeah.
00:24:19.510 - 00:24:26.802, Speaker D: So why is there no subscript on Q for transaction? Can I not specify different burn amount per transaction?
00:24:26.866 - 00:24:57.040, Speaker A: No, that's kind of the point, but the burn isn't specified per transaction. The burn specifies the function of the block. So kind of the change you can imagine is users submit their bids with their transactions. The block producer picks the final block. And so by picking that final block, kind of they'll define that. So now all the payments and burning is decided and so every user will get an individual payment they have to pay to the block producer. But this burning rule specifies what the block producer has to pay to the protocol in some sense or just kind of burn or do something.
00:24:57.040 - 00:25:18.520, Speaker A: So you can imagine that you might have. In the way you define the burning rule. You can imagine some additive burning rule or something where you do say this Q of Q is equal to the sum of QTS over everything. But in general that's not necessary. We're kind of just defining a generic burning rule that could be whatever function of the blocks and the bids that you want.
00:25:19.450 - 00:25:29.900, Speaker B: Yeah, and the point is impossibility results. So we're giving the mechanism even more power, right? They can do burning per transaction if they want or they can do something more complicated, but it's not going to help you with the impossibility result.
00:25:32.110 - 00:26:16.674, Speaker A: And so, for defining DSIC, basically we'll say a user's utility is defined as the value they have for inclusion times this XT. So basically XT will equal one if transaction was included. And here I'm hiding some arguments about exactly what block is produced and other users bids and everything. Basically you can think of a user's utility if they're included it's, their value for being included minus how much they're charged. If they're not included, the payment will be zero, x will be zero. And so basically zero utility for not being included. And we'll say the TFM is DSIC if every user has a bidding strategy that is independent of others bids, and the block revaluation and the bid is basically only a function of their private value which maximizes their utility.
00:26:16.674 - 00:26:50.950, Speaker A: So the key thing here that makes it tricky in this model is that their strategy cannot depend on the block producer's valuation. There'll be some private thing the block producer has. But we've kind of seen so far how you might want that to be the case, that users might want to know what the block producer's valuation will be to know how to bid correctly. But for a mechanism to be DSIC, this can't be the case. So an example of a DSIC mechanism is kind of this second price auction where users always want to bid truthfully. Like if you assume the block producer, the auctioneer is just following the protocol as stated, then it is dominant strategy to just bid your actual value. And so I'm getting into BPIC.
00:26:50.950 - 00:27:29.314, Speaker A: So here we call the Block Booster Utility, or Bps, which stands for Block Producer Surplus. And that will basically just be the block producer's value for the block plus the sum of their payments in that block, minus total burn. So you can kind of think of this as their value for the final thing they select, plus their net cash flow of the payments are what they get taken. The burning is what they're required to spend out by the protocol. And so this is kind of an alternative interpretation of med. So kind of back to what Jacob was getting at earlier. You can imagine that these net fees that are being generated, or that the block user's value is kind of part of the net fees and kind of go into this whole thing.
00:27:29.314 - 00:28:27.134, Speaker A: And so it's just different interpretation of what mev actually means and kind of define BPIC. Then we'll say a TFM as BPIC if its allocation rule chooses the block, that maximizes the block researcher's Bps. So kind of getting back to the earlier point of how I was saying that kind of the allocation rule is in some sense defined by its payment and burning rule. If I set the payment rule, the burning rule and the block reaches valuation, I can actually just solve kind of the maximization of this first equation, and that is what the allocation rule has to be to be BPIC. Okay? And so the main result in our paper is that any DSIC and BPIC TFM must have a payment rule of identically being zero. So this probably seems weird, and sometimes this is saying that the only DSIC and BPIC TFMs are the trivial TFM, which almost just ignores the user's valuations, never charges them anything. And to get some intuition, sort of formally approved this, but get some intuition.
00:28:27.134 - 00:28:55.526, Speaker A: To start off basically, for the TFM to be DSIC, users must be charged the lowest price they could to still be included. Imagine if this wasn't the case. Then users have some incentive to deviate their bid downwards by a bit. They would still be included. Maybe they'd be charged less, and they'd increase their utility. So to be DSIC, you need this first property. But as you've kind of seen in the example of tipless mechanism, this is very much a function of the BP's valuation.
00:28:55.526 - 00:29:31.462, Speaker A: BP has high valuation. I can bid lower and be subsidized in some way. If they have no value for my transaction, I really should be biding as I would normally in order to be included. And so, basically, the TFM can't compute the right payments to charge to users to be included, because it doesn't have access to this information of what the blockager's valuation is. And we'll show this kind of forces the TFM to just charge zero payments all the time, effectively. Which, as probably intuitive isn't great, but it's the only thing you really can do if you want Dsik and PBIC in this somewhat strong setting. Okay, so now we'll get into the formal proof of it and so kind of go by contradiction.
00:29:31.462 - 00:30:23.566, Speaker A: Assume there's some TFM that charges non zero payments, and then let's fix an additive block producer valuation VBP. Let this bold B be a vector of bids and T star be one of the transactions where T star is included when the bid vector is this B and the block prescribes valuation. And let's assume they're charged more than zero. And so we know that there must be some combination of block reserve valuation and bids where this happens, or else our TFM would always be charging zero. So this is where we just picked one by assumption that exists. And so, kind of idsyc this means that the transaction must be included in the block, right? If the transaction is paying, it better be included. Otherwise they might as well just bid zero and not been included and then not paid as a kind of utility improving deviation.
00:30:23.566 - 00:30:58.930, Speaker A: And so now let's define this slightly weird thing. We'll call this vector bids B prime. And so this will basically be the exact same vector bids as this bold B. Except you imagine that the user per transaction, T Star, drops our bid to zero. So this B minus T star notation means basically every bid that is not T Star is the exact same. And just bidder T star is dropping their bid to zero. And then we'll also define this capital P as the sum of the original bids, BT and Q as the amount the block producer has to burn when they select B.
00:30:58.930 - 00:31:38.050, Speaker A: And the bid vector is actually just B prime. One thing to note, basically, this P is capturing the maximum amount of fees the block producer could have been collecting when everybody bid this kind of bold B vector, kind of by the same notion of DSIC. If you are forced to pay more than your bid, then you have some deviation to bidding zero instead, and then getting at least zero versus negative utility. So it better be the case that you're never charged more than your bid. And so this capital P is basically the maximum sum of bids. That the maximum amount that the block producer could be charging to the individual users. And so now we'll consider a modified BP valuation.
00:31:38.050 - 00:32:10.134, Speaker A: It's called this v tilde BP. It'll still be additive, except basically we'll say for every transaction that was in this original block, b, v Tilde's value for this transaction is going to be scaled up by this additive p plus Q factor. So it'll be really high. And so it's kind of the idea of which is saying V tilde is the same as V, except even higher valuation for the transaction that would be included. And we'll say kind of look at every other transaction that wasn't in B, and we can just set v tilde to zero for those transactions.
00:32:10.262 - 00:32:14.282, Speaker C: So what is the singleton T? It's just the block containing only T?
00:32:14.336 - 00:32:31.860, Speaker A: Yes. So I've used notation here a bit. So this is like the mu T constraint to v tilde. If I had a bundle of, say, like T one and T two, then V Tilde's value for that block of T one and T two would be this v tilde of like set T one plus v tilde of set T two.
00:32:32.390 - 00:32:36.660, Speaker C: But I thought they have valuation not just on the set, but on the order.
00:32:37.670 - 00:32:54.060, Speaker A: Yeah, so that's true in the general setting, it is that they have value on the order. So it turns out this distinction doesn't really matter. You imagine this valuation function, for example, not caring about the order.
00:32:55.390 - 00:32:58.486, Speaker C: We think of sets, just blocks as sets.
00:32:58.598 - 00:33:20.126, Speaker B: Here well, he specialized to an added evaluation, which makes the impossibility result only stronger. And for an added evaluation, there's no ordering. It's just you sum over the so for that special type evaluation, only the set matter. Well, so the proof is going to work even if you only have additive evaluations. Yeah. So like he says, right, second bullet fix an additive BP valuation.
00:33:20.318 - 00:33:53.706, Speaker A: Yeah. So I'm pretty cool. If it worked for if the ordering did matter for the valuation, this would still kind of fit in there and they would still break. The impossibility would still hold then a kiss. So you made this point earlier that users kind of don't know the valuation of the mev that they create because there might be other users in there that create other value. But in an additive valuation context, it's probably okay to say that the users probably know the MUV that's generating just from their transaction below. Yeah.
00:33:53.706 - 00:34:23.334, Speaker A: So I guess this is I'll kind of get back to this point later on, but I guess I'm thinking more users not doing dummy V. More because they're unsophisticated than more because they know what else is happening. It's kind of like a classic more like mechanism line setting of like, I just want my private value. I don't really want to think about what does a block produce or care about my transaction, even if it is still additive case. You can imagine I'm just a simple user. I want to make a trade or something. I'm not keeping track of all the different DEXs and finance and everything.
00:34:23.334 - 00:34:50.910, Speaker A: I'm just trying to make this trade. So in theory, yes, in additive case, it makes a lot of sense that some party can find out exactly how much your transaction has. But we kind of want to see are there mechanisms that don't require this? As a user, I can just know my own private value for wanting to do this trade and that's all you can know. And I can just bid that amount and be kind of all off. There actually isn't. And so kind of like the intuition is that you actually do need in some sense to learn mev a bit to have any hope of getting good mechanisms.
00:34:51.650 - 00:35:17.122, Speaker B: But to your point, mahima, I sort of feel like some searchers could maybe have a better business model if they switched to just kind of telling users about the mev that they computed for their transactions. Or you could imagine that being a third party service where someone tells you so pranav may you want to talk about the high level plan a little bit like why you're doing these steps. You're kind of saying like, for all you know, the BP wants this transaction really badly.
00:35:17.186 - 00:35:52.980, Speaker A: Right? That's what you're kind of the the high level approach here will be know. So kind of to have a desicc mechanism, a user should have dominant strategy regardless of the BP's valuation. So kind of what we're getting, we're going to be getting at is saying that okay, because the user doesn't know the BP's valuation, there are some cases where the BP's valuation is high enough that they should be paying zero, really. And for all they know, they could be in that world. So if they're not being charged zero, sometimes they could deviate and make a profit, basically. And we'll kind of show that that always has to happen. And that's kind of like driving the impossibility result.
00:35:52.980 - 00:36:49.334, Speaker A: And so kind of the core idea in this claim is that under this new vector of bids, b prime and this BP valuation, b tilde, that is kind of intuitive that under both of these things, that this block b prime that's made with this new bid vector and new BP valuation. The better include every transaction in B and in particular this transaction. T Star. So by Dstig, basically. Now, that means that T star should also be included in their original bid vector, this bold b, when the block producer's valuation is this b tilde, and they should be paying zero in this case. And so, basically, we've showed something not exactly what we want, but almost what we want, that if the block priest and said was this b star, which should be quite close to b, that then their original payment should have been zero, which would have been contradiction. And what we'll show right now is that actually, this b star is the same as b.
00:36:49.334 - 00:38:12.906, Speaker A: And so that implies that this transaction T star's payment should have been zero initially, kind of contradicting the fact that there was this b pick, D six TFM that ever charged this nonzero payment to a user. And to see that b star equals b, we can kind of go through a few steps. So, first off, since this TFM was b picked, that means that this original block b was maximizing the Bps under the valuation BBP and the bid vector, this bold b. And by construction of this b tilde BP, you can kind of think of it that basically what we did was we increased the value, kind of point wise across every transaction in b, and we set every transaction outside of b to zero. So we kind of know that the value of this block b increases by at least as much as this block b star based on how we constructed this b tilde. And then the final point that kind of finishes it is that since we know that the payment and burning rules are independent of VBP, kind of going back to how are they defined? Remember, the payment and burning rules are only allowed to get input, the block that's chosen, and the vector of bids, and crucially, not the valuation function of the block producer. And so the payment and boarding rules will be the same whether or not the lock reaches valuation just via BP, or whether it's this V tilde BP.
00:38:12.906 - 00:39:17.566, Speaker A: And so since under V tilde their value for B is still higher than all the other blocks, and it's the same payments, that means they're not cash flows or the same under V tilde as under just normal V, then basically this B star must be equal to B. And so I'm leaving out some details and there's some tiebreaking stuff, whether there's multiple blocks that have the same value, but that can kind of be handled separately. And the main intuition is that you still get this exact same block B that you initially had as you do with this new V tilde evaluation. And so this should kind of imply that the original transaction T star really should have been paying zero and not this non negative amount. To finish off the proof, I'll kind of prove this claim that I just stated that kind of this block B prime should contain this transaction T star, and furthermore, every other transaction in B. But really only T star is the one that we care about kind of as the first inequality we'll use for any block B prime that's not a superset of B. So there's some transaction in B that's not in B prime.
00:39:17.566 - 00:40:18.834, Speaker A: Then from how we define the speed tilde, we know kind of the speed tilde of B is going to be bigger than V tilde of B prime plus this amount P and Q. Since we kind of stated that for every transaction in B, Tilde's value was the original value of that transaction. Plus this P in Q and then by DSA kind of this idea earlier of this capital P being the maximum amount of payments that a block researcher could get under a certain bid vector. We know the payments the block producer gets under this bid under choosing any block b prime. Under the vector of bids, b prime is going to be less than or equal to the payments they would get for choosing B, plus this total capital P. And then finally, since we define the burning rule as being non negative. Basically, the amount they burned choosing B with this bid vector, b prime is going to be less than the amount they'd have to burn choosing B Prime and B Prime.
00:40:18.834 - 00:41:24.070, Speaker A: Plus this total q value. And so you can basically do the math and it's a bit just algebra and basically you can just kind of combine these three inequalities to get to this final point. If there is some block B prime that's not a superset of B, that the V tilde of this block B would have been bigger than the V tilde, sorry, the Bps of choosing block B under evaluation V tilde is going to be bigger than the Bps of choosing this block B prime under evaluation V tilde. And so kind of this shows by BPIC this can happen. So it must be the case that this block B prime chosen under the bid vector B prime and the BP valuation B tilde must contain every transaction that's originally included in B. So kind of like the intuition. What's happening here is that by the way that we kind of spiked the value that Vtilda has for every transaction in B that must be choosing the same transactions effectively to still be maintaining distilled BPIC.
00:41:24.070 - 00:42:13.190, Speaker A: And we basically just spiked it enough that payments on the burning don't matter. And since the payments and burning aren't functions of this V tilde, we can do this perfectly fine. Now that we've shown that things are kind of impossible in this general setting, one thing we might want to know is how we can get around it. And one thing that we can do so shouldn't have approximate DSIC is kind of getting to mahinda's point earlier. If users do know some of their actual value that a block user has for their transaction, we can have approximately dominant biding strategies for certain mechanisms. And so in particular, we're going to go back to this tipless mechanism. So consider the tipless mechanism with the space VR and define this thing new T as being basically the maximum value the box user has for any block minus the maximum value over blocks where this transaction is not included.
00:42:13.190 - 00:43:08.314, Speaker A: And so basically what this is telling you is the block producer's marginal value for this transaction. And so in the case where this function is additive, this is just a constant, right? It's basically just saying it's basically just the block producer's kind of standalone value for the transaction. There's no weird kind of commentary stuff going the additive case. So it's just basically knowing this new T is effectively just knowing the block producer's value for your transaction. And so now basically in the formalizer's idea we were talking about earlier in the tipless mechanism, the amount you want to underbid from the base fee is basically exactly how much value the block producer has for your transaction. Because the amount of value Deloxy has for your transaction is basically the amount the block producer is willing to subsidize your transaction. And so this is basically saying that if you have this range on what your mev value is, that bidding outside this range is strictly dominated by bidding inside this range.
00:43:08.314 - 00:44:24.818, Speaker A: And so the exact details aren't super important, but just the idea that if you have a pretty good grasp on what your mev value is, you actually still do have dominant strategies in certain mechanisms. Okay, so kind of on the downside again, what we kind of showed with the fact that any Dsygbic TFM must have payment rule of zero, that kind of implies that there is no DSig BPIC TFM that can guarantee any fractional optimum welfare. And while this seems intuitive, it is still a bit tricky to prove we still have even though the payment rule is zero, there's still the frequently burning rule to kind of incentivize or deincentivize certain, including certain transactions. Basically it's not super hard, but it takes a bit of math to show that even though you have the flexibility of the burning rule, the fact that the payments are zero means that the TFM can to use information from the bids to decide what to include. And so basically, if there's a very large difference in what the block producer cares about and what the users care about, by not allowing the block producer to kind of take this into account, you might end up with some very suboptimal blocks in terms of welfare. And so we can't really give any welfare guarantees in this setting. So, kind of going back to our picture, we've shown that in the simple model of a TFM that we're going to get these impossibility results.
00:44:24.818 - 00:44:56.090, Speaker A: But we've made this big assumption that there is a block producer that was a single monopoly party that had total control of what goes into a block. And they don't have to compete with anybody. They can just hide their valuation. And that's fine in practice. There's things we can do. So we have Encrypted mempools and so kind of talk about how that muddies the watcher's valuation a bit. We have order flow auction so it kind of gives this idea of how searchers can have to compete with each other and how they might actually reveal some of the mev value to the protocol.
00:44:56.090 - 00:45:54.494, Speaker A: There's also kind of PBS and mev burn that are more at a higher level of saying let's look at the total mev value in these blocks and let's have builders compete, proposers compete and kind of the outcome of those auctions give some information to the TFM they can use to kind of get around some of these impossibility results. I'm just kind of saying this some more words. Kind of one of the key challenges we've seen is that the TFM doesn't know the blocker's valuation right. And that's kind of the key reason that they couldn't charge prices correctly. And that you got this result of like P has to equal zero for a B picking SIG, TFM and Zugnask. Is there any way we can elicit this information for the TFM? Is there any way that we can design a mechanism by adding more parties that can basically give the TFM the info it needs to actually be charging the right prices and to align incentives properly? And so one thing that's not quite in this direction moments, the opposite is Encrypted Mempools that basically says it forces the block producers not actually know the valuation of individual transactions. And then the other thing is order Flow auctions where you have searchers compete.
00:45:54.494 - 00:46:48.674, Speaker A: And here is where we're using the outcome of these searcher auctions to get information about transactional level. And the last thing is this guy in PBS and Mev burn, which kind of thing is using the builder auctions instead to get information about the block level mev. And so we'll kind of go into a bit more detail in these three different things. So starting off with encrypted mempools basically by not knowing the contents of a transaction and just seeing a transaction, you can almost think this in our model as changing the block producer's valuation for transactions from being this deterministic thing they know to being some kind of random distribution. So, for example, if they just saw like hashes in the mempool and you have to pick some that's effectively saying they have some uniform prior almost of the user indifferent between these things they're selecting, they have no information on them, and so they're just kind of forced to pick them. And you can imagine that this gets tricky in practice of block creatures have signals from various information sources. They can kind of mess with having the encrypted mempool kind of like perfectly muddying things.
00:46:48.674 - 00:47:43.846, Speaker A: So maybe it helps a bit. The idea here is kind of by using some encryption techniques, that we actually just force the block cruiser valuation to be of a very specific form and then we do have information over what that form looks like and we can maybe use that to design better mechanisms. So this is kind of, on one end, using some cryptography to kind of intentionally force the block producer's valuation to look like a certain functional form. Kind of on the other end, going back to the more elicitation side, is order flow options. And so, as you kind of saw that if we were in this additive setting and the user knows their marginal MV value, then they can start to bid more intelligently and they can design mechanisms that can kind of get back some of the incentive guarantees that we lost. And so one interesting thing is maybe we can use searchers to do this and that if we I'm going to ally some of the details. There's lots of proposals how you do this, and this isn't comprehensive, it's kind of like a train of thought, but to be fruitful and is some feature work.
00:47:44.028 - 00:47:56.646, Speaker C: Can you prove this if you have some correlation between the valuation of the validator and the user that you can find Dsicn?
00:47:56.758 - 00:48:35.026, Speaker A: Yeah, so if you have some guarantee that the validator's valuation function looks a lot like the user's valuation functions, then you're in a better off spot of kind of the bids you elicit. So in some sense, imagine they were the exact same valuation function, actually. And so in some sense, DSEC and BTEC look very similar. If I have guaranteed that optimizing for users is also optimizing for the block producer, then I think there's definitely some tricky things to work out. But you can imagine that you get beat pick with DC at the same time, because maximizing one is also helping the other. And so kind of in these order flow auctions, one model you can imagine is kind of every transaction that comes. I run some second price auction, some first price auction.
00:48:35.026 - 00:49:08.458, Speaker A: The winner of the auction gets the rights to include that transaction in the final block. And so then that clearing price of the auction can serve as a signal for what the MEV value was, which then maybe goes back to the user, maybe something else happens. Lots of various details that can mess with the incentives. But just general line of thought, you can use searchers to kind of get this transaction level mev data that you can use to help the mechanism. And so this final thing is kind of combining PVs and mev burn. And so instead of looking at the transaction level from EV, this looks at the block level from EV. So having builders compete, they give different bids.
00:49:08.458 - 00:49:36.170, Speaker A: This is basically my MV value for the entire block as a whole. And then if the TFM knows this value, MV burn says you can just burn this, and then that can shift the incentives. There's various things you can do. You can imagine maybe sending this total block MV value back to users somehow. The incentives there are pretty messy. It's not clear entirely if you can do that. But as a train of thought, you can imagine that there's some ways to get around this total block level mev value from having competition at a different level.
00:49:36.170 - 00:50:17.750, Speaker A: And so, kind of in conclusion, the main thing we show is that when there's mev, designing these TFMs becomes a lot more complicated. And there's kind of fundamental challenges that block producers face here. And we've shown that in the basic TFM model, that's kind of what's been studied in the literature so far, there's really not much you can do. And that it's kind of just like very strong a possibility results and we need more power. But the upside is today's role is way more complicated than that simple CFM model. Today there's users who submit transactions and searchers compete with them, and then there's builders, and then there's proposals. There's this whole thing kind of getting back to the picture I showed earlier that makes it so that some of these impossibility results aren't as true in practice today.
00:50:17.750 - 00:50:35.520, Speaker A: And so it's kind of an area of future work of like, can we break apart this transaction supply chain more formally and understand how this computation, different layers, whether it's searchers or builders or whoever, have you to kind of break through these impossibility results and get back to having kind of efficient mechanisms that align incentives? Yeah, that's it.
00:50:36.530 - 00:51:11.986, Speaker D: So the commit reveal type schemes where the block producer doesn't know the values of the transactions or the content of the transactions. They are kind of prone to off chain communication, because now, as a user, I can tell to the miner, the block builder, that, hey, this is my transaction, and then please subsidize my transaction fee, so I will pay you less, but you will gain so much because. Now I told you what this transaction is and then the user will be incentivized to include it. And we are now back to the setting where there's like race to the bottom users.
00:51:12.018 - 00:51:34.382, Speaker A: So it's definitely true. So I guess one thing I kind of avoided throughout this entire talk is talking about this off chain agreements or collusion property. And because we were only starting a possibility results, this is fine. Basically, even if I remove that condition, everything is still quite hard. And so it's totally a tree that yeah. So kind of getting to these, getting towards the positive results, we should kind of put these things back in. And I totally agree.
00:51:34.382 - 00:51:52.738, Speaker A: Like in the encrypted mempool side, it seems tricky of how do you actually make sure you don't have these signals, whether it's through ribs or whatever, have you? And so, personally, I think I favor more the order flow auction PBS approach versus the encryption approach because of this type of stuff, but definitely a super open area of mechanism to see if anything can be done there because it's.
00:51:52.754 - 00:52:10.860, Speaker C: The end of the talk. Feel free to differ. It's a technical question. So when I was thinking of this correlation, I was thinking of common values, because there is some common value that is in this mev here, you use like the revelation principle by value. So do you have a sense of.
00:52:12.050 - 00:52:15.326, Speaker A: So when you say common value, do you mean common value between who?
00:52:15.428 - 00:52:48.230, Speaker C: Between the users of the block inclusion and the validator as well. So what I was thinking first when I looked at it, I'm like, oh, why does the revelation principle hold? And then it's that the validator is just another player. Yes, but once you start having correlation between the validator valuation and the user, not exactly the same, but I don't think this proof strategy.
00:52:50.330 - 00:52:58.358, Speaker A: Will be. So you're saying like, if there's correlation, you can arbitrarily jack up the block producer's valuation really high on certain transactions.
00:52:58.534 - 00:53:21.258, Speaker C: It's like essentially when you are saying that if the block producer can when it's very valuable for them, they can subsidize to zero. Yeah, but for the user also, they have the information that for the user also, it's going to be valuable. They're not going to be putting it at zero the price. So there can be nontrivial.
00:53:21.354 - 00:53:27.720, Speaker A: Yeah, that makes sense. Yeah. I have to think about exactly what you can do there. That's really interesting stuff to think out.
