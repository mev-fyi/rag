00:00:18.170 - 00:00:29.320, Speaker A: Thanks again for being here. So obviously you're the founder, co founder of GitHub, which is an incredibly important and iconic company. And so how did the idea for GitHub come about?
00:00:30.250 - 00:00:59.722, Speaker B: That was while I was at Powerset and we were using Git internally a little bit. I was working on an internal project with Erlang, and a coworker that I was working with, Dave Farham, introduced me to git. He was like, this is the greatest thing. Like the Linux kernel uses this. It has this really nice branching and merging model. And he showed it to me and I was like, this is pretty awesome. The command line stuff is a little hard to use and you have to have an account on a Linux server somewhere.
00:00:59.722 - 00:01:19.010, Speaker B: And pushing and pulling from repository to repository is a bit awkward, but I definitely saw the potential. And so we started using it internally at Powerset and going to the ruby meetups in San Francisco. I just started thinking about how great git was, but nobody was using it. Nobody could really harness.
00:01:21.670 - 00:01:23.366, Speaker A: What were you using? What were most people using then?
00:01:23.388 - 00:01:58.900, Speaker B: Subversion was the most prominent open source. Some people would be using cvs, some people were using perforce. Yeah, but it was really about trying to make it possible for people to harness the power that I saw. And being a web developer, I was like, I know how to make websites. I know how to write code that can read from a disk and pull, get objects off of disk and get them into Ruby so that they can be exposed in a ruby on Rails website. And I thought that would be a cool project that I could work on, that I could then use to share open source projects with people that I knew and just started showing it around the community.
00:01:59.350 - 00:02:07.080, Speaker A: And so you built this website and then you put it up and did it immediately kind of get popular, or did it take a long time?
00:02:07.610 - 00:02:44.670, Speaker B: We did a thing that we stole from Google, a marketing trick that they did with Gmail where you had some invites. So we gave people five invites and then they could send invites to their friends. And so there was this kind of artificial scarcity. I mean, it was real scarcity too, because we had some very small server that we were running this thing on. And so it was sort of a dual effort to leverage some of that artificial scarcity that makes people want to, they're like, I want in. Everyone could see it, but not everyone could have an account. And so we managed the accounts that way early on.
00:02:44.740 - 00:02:46.622, Speaker A: And I think that was so anyone.
00:02:46.676 - 00:02:53.442, Speaker B: Could read, anyone could see it and pull the repositories, but you couldn't necessarily sign up, right. You had to have an invite to sign up.
00:02:53.496 - 00:02:54.002, Speaker A: Got it.
00:02:54.056 - 00:03:31.440, Speaker B: So that worked. I don't know if that works anymore. I haven't seen people do too much of that anymore. But at the time it was quite successful. It created a lot of buzz, people just talking around. I think Twitter was quite early then, but people were talking about it on Twitter and people really seemed to like was, I don't know, just people started signing up for it, pushing up random bits of code here and there. And it immediately, I think, struck a chord with people as far as the capabilities of version control and what you could do once you realized that you had easy branching and merging offline capabilities, it was super, super fast.
00:03:31.440 - 00:04:15.274, Speaker B: And now with a website where you could push up code and collaborate on it and make it so that you could use git and have it not be the hardest thing in the world, it grew linearly. Our user base grew linearly for almost the entire time that I was there. This was not a super exponential curve like you see in a lot of startups, that you're always like, I need that exponential growth curve or I'm doomed. For us, it was quite linear. We'd grow by some x, thousands of users a month, and we sustained that for months and months and months, and even into the years, and those numbers would grow. So it wasn't exactly linear. And then over time it would get faster, but it was quite linear.
00:04:15.274 - 00:04:21.040, Speaker B: But the income was also linear, which was nice. The income just kept coming as well.
00:04:21.890 - 00:04:27.282, Speaker A: Did you have the business model at the beginning for the sort of pay for privacy, free for public?
00:04:27.416 - 00:04:28.660, Speaker B: It was always that.
00:04:29.350 - 00:04:34.862, Speaker A: I think that you were the pioneers. I still think of that as like one of the cleverest models, business models.
00:04:34.926 - 00:05:11.966, Speaker B: Yeah, I'm trying to remember if we pulled that from somewhere else. I don't think we did. I think it was just, it felt right where it would be free for open source. Because we were open source developers, we loved the open source community. Ruby on rails, open source, git's open source. We wanted to give back to the open source universe. And so we thought, hey, what if we made this free for open source? That would be great for the community and also great for marketing, where if you have all these open source projects on GitHub, and especially if we can get some prominent ones on there, then people will come to GitHub to use those projects and then you get some viral element of it.
00:05:11.966 - 00:05:26.740, Speaker B: So that was all win win on that side. And then if you're a company, you have money that you're willing to spend to solve problems. And so if you want privacy, then you pay for privacy, right? And so it always was that from the very it just because it just felt right.
00:05:28.310 - 00:05:41.850, Speaker A: Today I think of GitHub as not only a great kind of front end for Git, but also really a social network and sort of a global collaboration tool. Did you think of it that way in the beginning? Was that kind of your vision all along or did that emerge?
00:05:42.830 - 00:06:01.838, Speaker B: I think initially it was not as much as it became, but we always, from the very beginning did namespace the URL by user, so it's always slash username and then project name. And I think that's one of the biggest reasons that GitHub was successful, like that one decision in order to do that, really.
00:06:01.924 - 00:06:06.222, Speaker A: So you're saying user project versus project. So putting the user first.
00:06:06.276 - 00:06:06.590, Speaker B: Correct.
00:06:06.660 - 00:06:08.034, Speaker A: As the sort of the entry, because.
00:06:08.072 - 00:06:55.786, Speaker B: What you saw in the other code hosting platforms at the time, which were Sourceforge and Google code, they both had top level namespaces that people would use for projects. And especially on SourceForge, if you recall, you had to get permission to use one of those top level namespaces. You had to write to them and say, hey, I want to use this project name. And then three days later they would write back to you and tell you whether you could use it or not. And so we thought that was ridiculous and we wanted an easier way for you to get code up and any code. And on the Google code side, they forced you to have a license and they forced you to make certain decisions that we thought were unnecessary, where it's like, why do we make you do anything? Just put code online, just get it up there. If you don't want a license, don't put a license.
00:06:55.786 - 00:07:51.940, Speaker B: I mean, you should have a license, right? It's helpful to have a license, but there's no mandate that says that you have to have a license, right? The default license for anything that you put online is that you maintain copyright, but that other people can't use it without your permission. So we were trying to reduce the barrier to entry as much as possible, just strip every possible thing away that we could think of to make it easy for you to get code online. And the social elements came from that, then that was now the way that you would share your repository. So if you go to a conference and someone gives a conference, talk about an open source project or anything that they're working on, and they want to share something, they put a GitHub URL on the screen, and then that gives it this really beautiful viral element that also supports the social aspect. But to be fair, GitHub does not have a tremendous number of social tools built in.
00:07:52.710 - 00:08:31.930, Speaker A: Yeah, it's also interesting, the business model, as I recall, Sourceforge was in this kind of death spiral of more and more banner ads. They didn't have a business, I mean, as elegant as yours. And so it was a little bit like a lot of frankly, websites today that are just sort of more and more. There's more and more cruft to support them. And I think they're in sort of a death spiral where the more cruft they have, the less people to go there and then the more cruft they have to add. And I feel like Sourceforge was in that, you'd recall much better probably, but was in that desk spiral, and you guys came along with this really clean experience and you had kind of a pro user business model that wasn't exploitive.
00:08:32.010 - 00:08:53.800, Speaker B: I think that was a really important distinction. People could look at GitHub and say, there's no ads. This interface is designed for developers. We put the readme in front of you, like when you go to a GitHub URL, it's a file listing, and then the readme. And that was extremely rare. Now you see that everywhere. But we were the first really to do that.
00:08:53.800 - 00:09:31.460, Speaker B: And when you go to Sourceforge, it was like some download page or some marketing stuff, like a description, but in a different way. That wasn't close to the code and ads everywhere, it was that. But over the next couple of years, after GitHub started to be available, Sourceforge kept declining more and more rapidly, and they made a lot of bad decisions. And so they sort of destroyed themselves. I think they could have made it better, but they made the wrong decisions. And Google code, Google code was never a priority for Google. It always felt like kind of a side project for them.
00:09:32.390 - 00:09:42.518, Speaker A: Yeah, but they came at you at GitHub pretty hard at one point, right? Why did that not work? Was it the thing you described, that it just never sort of was a social network? It wasn't the top priority, but it was a real project.
00:09:42.684 - 00:10:08.720, Speaker B: Yeah, I think it was probably the leading place that you would put and share your code, but it was subversion. And so I can't remember if they added git support or not, but if they did, it took them forever. And so it was almost, the point was moot. By the time it mattered, everyone had already switched over to GitHub. And then at some point Google code shut down and they're just like, just go to GitHub, we don't have time for this.
00:10:10.610 - 00:10:28.018, Speaker A: Were there sort of big milestones, like for example, I don't know, like Linux moving over or were there some big projects? I assume there were some. The open source community has very strong opinions on things and I assume there's some pushback at some point. And maybe at some point people sort of said, hey, this is a great solution.
00:10:28.114 - 00:11:02.318, Speaker B: Yeah, I think there's two projects that really paved the way for many more. The first was many people probably won't even know it was called Merb. It was a Ruby web framework that was kind of trying to compete with ruby on rails. So it was much smaller, it was much more kind of less code, more streamlined. But it was kind of popular at the time as an alternative to Ruby on rails. And so they came over quite early on and started using it. And that brought some people, and people were like, oh, that's a real open source project.
00:11:02.318 - 00:11:29.922, Speaker B: People use it. This is legit. All right, let's come over. But then the bigger one and the most important one was that Ruby on rails came over and it was only maybe six or eight months after we launched publicly that they moved over. So they were quite fast movers, even though to us we reached out to them and we're like, hey, you should consider putting Ruby on rails on GitHub. GitHub's built with ruby on rails, and Git is way better than subversion and the community would love it. And initially they were like, no, we can't.
00:11:29.922 - 00:12:07.490, Speaker B: We have way too much tooling built up around subversion and the whole community knows how to contribute that way and it's just not feasible. So they initially said no, and then three or four months later they came to us and they're like, all right, we're moving, so help us do that. And we were like, yes, absolutely, we will help you do that. And that was amazing because then it felt like almost overnight the entire Ruby, all of Ruby on rails community, and Ruby on rails sort of drags a lot of the broader Ruby community along with it. And so almost overnight it was just like shook and everyone in Ruby went from subversion to GitHub to Git, and GitHub almost.
00:12:07.560 - 00:12:12.582, Speaker A: Did it go sort of by language? By language? Like you got Ruby first and then whatever, Python or something?
00:12:12.636 - 00:12:40.062, Speaker B: Yeah, it was in the early days, it was very much sort of language by language, or it would be an open source community. So maybe a part of a language that would come over. Maybe some PHP project came over. I can't remember the sequence of all the projects came over, but one at a time. Some projects that are more cutting edge would say, well, if Ruby on rails can do it, we can do it. They have good taste, they seem to be having a lot of great velocity and the developers like it. So that reduces the risk equation for them.
00:12:40.062 - 00:13:15.158, Speaker B: They can come over. And the more that that happens, the more that other companies and organizations and projects see it and start to say this is less risky. If everyone's doing this and a lot of developers know it and really love it, then we can do it. Open source projects did it. And then companies started seeing that it was possible and the developers in those companies were demanding it. They were starting to say like, we need to be using Git and GitHub for our company because we can't work with subversion. Now that I've tasted the sweet nectar of git, the taste of subversion is just the worst and I can't tolerate it anymore.
00:13:15.158 - 00:13:20.010, Speaker B: And so the developers really drove the demand within their own organizations everywhere.
00:13:22.030 - 00:13:49.734, Speaker A: Besides sort of building a product that you yourself wanted as developers, and clearly you did a lot around the product to make it appealing to developers. What did you do on the sort of quote marketing side did you do? By that I mean that in a broad sense of talks or direct reach out. And I guess we're obviously getting to the topic of what are the kind of lessons I guess that you learned on the developer sort of relation side.
00:13:49.852 - 00:14:26.882, Speaker B: There were really two main things that we did marketing wise and neither of them were traditional and we didn't spend a ton of money on them. So the first one was in San Francisco. We did what we called at the time drink ups, which I don't think you can really do anymore. But this was a different era. We did drink ups. So basically we'd go every two weeks, we'd go to a bar in San Francisco and we'd message people in San Francisco and we'd say, hey, the founders are going to be at this bar, you should come and we'll buy you drinks. And so people from the community would come and join us at the bar and we'd just hang out and have some beers or whatever and just talk.
00:14:26.882 - 00:14:58.182, Speaker B: And in the early days it was amazing because bringing a community of people together where it's not huge, these things would be 40, 50 people sometimes, but they were never massively big. But you'd get a lot of people that had a similar interest. They all cared about Git. They were all like, git is great. And then they're probably using one of the languages that has come over to Git. So they're probably doing Ruby or JavaScript or PHP or something. And so you get 50 developers in the room together and you just have amazing conversations.
00:14:58.182 - 00:16:14.878, Speaker B: Like whoever you talk to, they're doing something interesting and they're all cutting edge, you know, because if they're on GitHub, they're on the cutting edge because we only did this for the first couple of years, but it was really, I think, powerful to create superfans. And we talked a lot about fans and how we create superfans and how do we serve superfans. What can we do to surprise and delight our users and turn them into superfans? And so we did these drink ups. We also went to conferences, so we would pay for anyone in the company to go to conferences every know at first we didn't cap it. We're just like, if you can get a speaking slot at a conference to talk about whatever you want, but we love if you talk about or GitHub related things, then we will pay for you to go to that conference, and we will pay for someone to go with you so that you have a buddy. And then we would often have those people that would go be ambassadors and hold their own drink up. So we'd often then sponsor one of the after parties, or we would just pick a bar in the vicinity of the conference and not even be a sponsor because many times at these large conferences the sponsorships were super expensive and we were still bootstrapped.
00:16:14.878 - 00:17:17.014, Speaker B: And so we would kind of hack the model by being like, hey, we're going to be at this bar. Come over and we'll buy you beer if you want to come to this party that happens to be happening at the same time as these other sponsored events. So we did a lot of that and I went to many of those and it was the same experience, but now it was all over the world. And so we went to conferences everywhere, and we had employees kind of being like laying down the seed, planting the seeds of GitHub in various locations, and then you could see that those seeds would grow into communities of GitHub users in all these places around the world. All we had to do was go and talk about it in front of some developers and they'd be like, why haven't I heard of this before? This sounds awesome. And they'd start using it, and then they'd start asking their friends to come and collaborate with them on their open source projects. And then they'd go to conferences and then they'd put their GitHub URL on the screen and another people would be like, GitHub? What's that? And then they would go to that URL and they'd be like, wow, I want this too.
00:17:17.014 - 00:17:23.820, Speaker B: I want to be able to show everyone my open source code. And so that was our sort of plant the seeds model.
00:17:24.510 - 00:17:34.222, Speaker A: When you say superfans, it's interesting because you're able to directly reach out to them. So there can't have been that many, right? So we're talking like thousands, not tens of thousands of people, is that right?
00:17:34.276 - 00:18:00.166, Speaker B: Yeah, in San Francisco. So in GitHub you can put in your location address. So we would look at that and we'd find all the users that had put in San Francisco or somewhere nearby, or when we went and did a conference somewhere else, we'd like look through the list of user locations and then we would send them a message. I'm not sure that that's GDPR compliant. Things are a little more tricky these days. But it was great. People loved it.
00:18:00.166 - 00:18:28.640, Speaker B: I mean, it was early enough that nobody was angry at us for spamming them or reaching out to them. They were always just super excited to hear from a founder of GitHub and be invited to go grab drinks or meet up and talk about the stuff that they loved. So I think the things that you can do when you're a small company end up being quite different than the things that you can do when you're a large company and you have to take advantage of that. It's a superpower that you can take advantage of.
00:18:30.130 - 00:18:43.874, Speaker A: GitHub is often cited as an example of a success story that was a distributed team. I'm just curious, how do you think about that? And what have you learned about sort know distributed teams over time and how do you.
00:18:44.072 - 00:19:39.602, Speaker B: We ended up quite distributed, but we did not start that way. Exactly. So in the beginning everyone was in San Francisco, but we did not have an office. So we started on IRC and we had an IRC chat room that we coordinated with and we'd be working from home or we'd often get together at a coffee shop. The four founders were all in San Francisco. And then our first non San Francisco hire was our first tech support person who lived in Colorado and he was in the IRC channel and he was loving GitHub and he'd be just giving people technical support for free, just he would like hang out in the channel and just help people out. And so when it was time to try to free up some of our time from doing tech support, customer support, so that we could concentrate more on the product, we reached out to him and said, hey, do you want to work for us? We had never met him, never seen his face, never heard his voice.
00:19:39.602 - 00:20:20.382, Speaker B: And we hired him because he was doing the work. He was already doing the work. So we were like, we'll just pay you to keep doing this and then do more of it. And so he was our first non San Francisco person, but it was fine because we were all in chat all the time anyway. That was our primary way of communication. And then over the next couple of years, we did most of our hiring in San Francisco almost exclusively, until we were maybe 2020 ish people, then we'd hire maybe one or two that weren't colocated in San Francisco if they had a skill that we really needed, and we thought they were an awesome person. And then after that, we became more and more distributed.
00:20:20.382 - 00:20:35.400, Speaker B: But we always had the San Francisco office, and San Francisco was always the hub, so it wasn't a fully distributed company like you see today, where there is no office. We always had the office. Well, after the first two years from working in coffee shops, we had the office.
00:20:37.210 - 00:21:12.930, Speaker A: So fast forward to today. I think when you were doing GitHub, there were other kind of very interesting kind of developer focused startups. I think the sense I get is there's many more today. There's a whole kind of broader category. I think you're involved. I believe you're an angel investor in Netlify and a whole bunch of these right kind of developer focused startups now that it's sort of more crowded and maybe you can't just kind of go do a meetup, I guess. How do you think today about how startups should reach out to developers?
00:21:15.430 - 00:22:11.800, Speaker B: I think you probably could still do that with the right community. I think if you have a community of people that's cohesive enough, that is a small enough, where everyone shares the same interest, then I think you can still get people together in person. Maybe right now in history, that's not the best time to do it, but we have all these great tools to do things online, and things like podcasts, I think are now a really great way to build communities as well. Where you go and you ask people who are experts at whatever your subject is, or people in the community that your user base might want to hear from, and you go and ask them to, hey, come on, a podcast and chat and you could replicate some of that same feeling. You could have a discord server or something going where your community can talk to each other. I think there are still ways to replicate that without necessarily doing it in person. But there is something really beautiful about the in person thing.
00:22:11.800 - 00:22:36.062, Speaker B: I don't know that it wouldn't work assuming know we can all actually leave our homes. I think in San Francisco and other places that have enough density it could work for whatever you're doing. But if you're not in one of those locations, that's obviously much more difficult and then you would want to draw on online communities. But it's all about finding the people that care a lot about one topic, get them together.
00:22:36.196 - 00:22:55.826, Speaker A: It's like Jamstack as an example, and it's a relatively small, I mean not thousands, let's say not maybe, or maybe thousands who are the most influential. And do you think those people tend to be kind of concentrated still around San Francisco and that, you know, hopefully pandemic ends and we can have meetups again?
00:22:56.008 - 00:23:28.206, Speaker B: I think it's less concentrated in San Francisco than it has been before and I think the trend will be to continue that. It's very difficult to be in San Francisco and do a startup. I don't know how people do it. The startup that I'm building now is based primarily in Berlin because it's too expensive to hire in San Francisco. It's just you can't give people the quality of life that we want to give them and we hire people. So my current startup is called Chatterbug and it's a language learning application. So foreign language learning.
00:23:28.206 - 00:24:08.538, Speaker B: If you want to learn French or German or Spanish, you can check out chatterbug. We do all our own curriculum and so we hire curriculum developers. We have a team of twelve curriculum developers and if they lived in San Francisco there'd be no way that we could. It's just, it would be unfeasible for them to live here. They couldn't do it, the salaries that they would demand would be too high. We'd burn through capital three times faster than we do right now. And so I think you're seeing less and less concentration of these types of technologies in San Francisco, as San Francisco has sort of maxed out its ability to do this as well as we used to.
00:24:08.538 - 00:24:27.570, Speaker B: People used to come here and now people leave because it's almost become unsustainable to live here and there's a lot of work to do in San Francisco. I still live in San Francisco, I'm in San Francisco right now. I love San Francisco, don't get me wrong, it's just become a different place than it used to be and the challenges are much bigger. But I think the community is everywhere.
00:24:28.630 - 00:24:57.850, Speaker A: Yeah, it'll be interesting. We see different models. There's people that just say, I'm going to be based in Berlin or some other city. There's people that sort of, I think kind of what stripe maybe has done where they have the headquarters in San Francisco or South San Francisco or some Bay Area, and then they have a whole bunch of other offices. We see other people that just go fully distributed. I think my sense is fully distributed. It's like an advanced level management skill to run that.
00:24:58.000 - 00:25:45.014, Speaker B: Yeah, it's definitely harder in some ways to be distributed. So we have essentially two bases. We have, the founders mostly are here in San Francisco, and then everyone else pretty much is in Berlin. We have one or two people also in the Berlin time zone, but it's tough because I'm managing a team of product designers right now, and I get about 2 hours of overlap in the morning where I can talk to them. And I have kids, so I'm taking them to school under normal circumstances. And so that's the time that I get to do meetings is two or 3 hours in the morning, and then the rest of the day, my mornings are always packed. It's challenging.
00:25:45.014 - 00:26:20.230, Speaker B: You have to be able to work asynchronously where they're doing work, and then they're putting it online and then asking things or making comments, and then you come in and do the same thing asynchronously afterwards, once they're done for the day. And so things like GitHub, things like slack, things like Zoom, become really critical. The advantage is that you can hire in wherever you want to hire. If you want to have a multi office set up, certainly you can do that. And GitHub did that as well. So we had San Francisco as the main office. Once we got to 200, 300 people, San Francisco is the main office.
00:26:20.230 - 00:26:58.900, Speaker B: A bunch of sort of satellite remote people on their own, but then little one offices here and there, where you'd have three or five developers and more now. I mean, GitHub is thousands of people, so they do this more. A lot of salespeople now, but it's a challenge. It's always easier when you're co located, when you can just sit across the table and just have a meeting whenever you want, and you're in the same time zone. That's easier communication wise. But again, it's harder hiring wise and total payroll cost wise, depending on where you are. It gives you advantages building.
00:26:58.900 - 00:27:05.970, Speaker B: I don't know how many San Francisco startups you're funding these days, but I don't know how anyone does a startup year anymore.
00:27:06.470 - 00:27:37.914, Speaker A: It's very hard. It's very hard. I think a lot of people are trying to be creative about new models, but the sort of so called israeli model is popular, I think, where you have R D and we have a bunch of, in our crypto portfolio, a bunch of people that actually, Berlin is very popular, for example, as an R D headquarters. But then maybe you put kind of business know, et cetera in San Francisco, or mean that the rents have just maybe that will change if the economy changes, but up until recently have just been unsustainable.
00:27:37.962 - 00:28:27.502, Speaker B: Right. I'll just add one more thing about distributed or remote working. One thing I think we did really well at GitHub to solve for this was we always thought of ourselves as distributed first, remote first. So all of the things that we did would always be streamed. So we had a, every Friday we'd do an all hands, and when I was CEO, I'd get up in front of the company and I'd give kind of a speech about philosophy or something that was on my mind, or that I needed to communicate to the employees. And it would always be streamed live to anyone in the world, and it would always be recorded, and it would go up into a place where we had all of our talks, and anyone could watch them or rewatch them whenever they wanted. We'd have a segment beforehand where we'd bring in people that were remote on video.
00:28:27.502 - 00:29:25.246, Speaker B: I think we used blue jeans at the time or something. We'd bring them in and they'd be on the screen and you could talk to them, and it'd be like a chance for a remote person to get some facetime with the rest of the company and feel like they were more involved. As well as all the things on GitHub, everything that we did at GitHub was on GitHub as much as humanly possible. All of the content creation, all the legal work, everything went through GitHub, which is asynchronous, really good for asynchronous communication, just naturally, and partly because we work that way, that everything goes through. That's the coordination point for most work. And so if you are going to have multiple offices, if you're going to do anything but just be everyone in one office, I'd say, you need to shift to that way of thinking where you're really serving the remote people, that's the first thing you think about when you think about the company and how it works, you have to serve people, because otherwise, those remote people, they'll never be as effective as you need them to be.
00:29:25.348 - 00:29:28.770, Speaker A: They'll always feel left out if you don't kind of go Internet first with everything.
00:29:28.840 - 00:29:29.170, Speaker B: Exactly.
00:29:29.240 - 00:29:50.810, Speaker A: Yeah, I know, like stack overflow. I believe they have a culture where they just leave Google Hangouts on all day. It's just a normal thing to do. You're sitting in your office coding, and you've got this kind of environment we have here, just all sorts of other. I think there's a lot of, my understanding is a lot of ways to make it work, but you have to be very thoughtful about it in a way you don't have to be when everyone's just sitting in the same room together.
00:29:50.880 - 00:30:35.090, Speaker B: Yeah, and the other caveat would be, so for chatterbug, our all hands also look like this. Even though we're 36, 37 people right now, almost everyone's in Berlin, 30 of the people are in Berlin. We still do all hands. This way everyone gets on a computer, and the same should be true. Like when you're doing meetings with people, if you've got, say, five people who are all colocated in one place, and you've got a meeting room, it's very tempting to be like, all know the five of us go and jump in the meeting room together, and then we'll conference, know Susie, and then she'll participate. But the fact is that she won't. She'll be the spectator.
00:30:35.090 - 00:30:40.890, Speaker B: Hard to get a word in the much better solution when anyone in a call is remote. Everybody's remote.
00:30:42.430 - 00:30:45.718, Speaker A: Interesting. And so you also have a new open source project, right, Redwood.
00:30:45.814 - 00:31:17.140, Speaker B: Yeah. So just recently, a couple of weeks ago, I announced and pushed out the first version of a new open source project called Redwood Js, which is a web framework, and it's built on top of Jamstack technology. So Jamstack, the jam in Jamstack stands for JavaScript, APIs and markup. And so Redwood is a way that I think that we can build full stack web applications and be able to deploy them to the edge in an easier way than really anyone's done before.
00:31:19.110 - 00:31:48.078, Speaker A: Yeah, I just redid my blog on my cdxon.org, my personal blog on Jamstack, and it went from like three second load time to like 200. It's using Netlify and markdown and all this nice stuff. And it's also really nice because I can just edit. I'll just give a little marketing promo here for Jamstack. I edit straight in GitHub, right? So I just edit and Markdown in GitHub and then it just instantly deploys. There's no updating of various blogging software, there's no security.
00:31:48.078 - 00:31:50.666, Speaker A: It's just a static website. It's really elegant.
00:31:50.858 - 00:32:19.500, Speaker B: Yeah. So this descends kind of from work that I did way back at GitHub on a static site generator called Jekyll. Jekyll is still one of the most popular static site generators, although others have supplanted it, number of stars wise on GitHub watch to my chagrin. But they're great. I mean they're all these amazing systems. So like Gatsby for instance, uses react as the rendering layer. So they're starting to use these different frameworks and libraries for doing rendering and things.
00:32:19.500 - 00:32:56.782, Speaker B: But what I'm really interested in is the ability to say, so I'll just give you a quick primer on how Redwood works. So you write your web application front end in react. So you have a fully javascript react based front end, and then you can deploy that on say Netlify and it gets pushed to a CDN. So it's fully static. So you have a statically deliverable react based frontend that goes on the CDN so it can be on the edge. And then you have a backend that is a graphql API. So it's an implementation of a GraphQL API.
00:32:56.782 - 00:33:35.522, Speaker B: And you can deploy that onto AWS Lambda, which you could also put those nodes distributed around the world and have your business logic on the edge. So the front end in a browser, you load up a redwood site in your browser, the browser requests the react client. You download the react client, or the parts of it that you need initially, and then you would make requests to the GraphQL API via graphQl, obviously that run your business logic and then give you the response. And then the third part is the database. And so right now the database is kind of the least well defined part. And Redwood is still alpha, like pretty heavy alpha. So we're still figuring these things out.
00:33:35.522 - 00:34:07.260, Speaker B: But once we get incorporated something like FaunaDB, which is a distributed database, you could put also your data on the edge. And now your lambda functions would talk to fauna, for instance, or a distributed relational database. And we have really good relational support right now. And now you could have all of your web application fully deployed to the edge. And so that's kind of the architecture that we're going for, and a lot of people are very interested in what we're doing, but it's still super cool.
00:34:08.110 - 00:34:25.060, Speaker A: That's awesome. So we have a bunch of questions here from the students from Francesco. Once you have the code, it must be tempting to build a whole array of services around that code. While GitHub is very pluggable, it does abstain from providing infrastructure for deployments. For example, how do you think about what to build versus not build?
00:34:25.590 - 00:36:10.450, Speaker B: So while I was there, and I haven't been there for a number of years now, while I was there, we wanted to be fairly agnostic because we wanted the ecosystem to sort of flourish and build tools. So it was like GitHub could be the core of developer collaboration, but all of the things that people want to do around that collaboration, we want people building as much as they can. We want as many tools as possible for people to plug on top of GitHub to make their development experience better. And so we thought by taking a more agnostic, a more language agnostic stance on that and even some of the tooling, I mean, GitHub does have at the time it did have a number of things like issues. So there's a simple bug tracker that you could have, but that felt sort of a thing that you would want to integrate very closely. But for things like continuous integration, we were like, let people build different kinds of solutions, we don't want to build one ourselves and then discourage people from building their own, because what if we get it wrong? What if we don't do it? What if our imaginations are not as great as the sum total of our community when it comes to building these things? The idea being that then eventually, maybe years down the road, it would be interesting to start bundling some of those things in once the territory had been explored. And you'll see this in technologies a lot, this sort of cycle from debundling and pulling everything apart, having all the pieces separated, to then integrating and taking a bunch of tools and pulling them all back together.
00:36:10.450 - 00:37:13.622, Speaker B: So you can see this happen at Apple all the time, where for many years now they've been on an integration run where they want full control over their hardware, so they now make their own chips and they make their own ram and they make their own. Eventually they'll probably make their own screens. They want to have control over as much as possible, because the value is in the very slick integration of all of the pieces that go into something like a phone. But before that, it was more interesting to have a lot of choices, a lot of pluggable, modularizable things. Or you look at servers, at the world of servers, or even in looking at computers, it's like, do you want to go out and have a million pieces of a pc that you can put together and build, or do you want one slick computer? I guess that is kind of the PC versus Mac, that's that division, right? Which one do you want? You can get a better experience when you control everything and everything is beautiful and perfect and works together. And so this is a question for Redwood as well. You see this all over the place.
00:37:13.622 - 00:38:09.122, Speaker B: So Redwood, in the JavaScript world right now, if you write any JavaScript, you probably know this. In the JavaScript world, there's a million choices for everything, and nothing is together, right? You want to create an application in the JavaScript world with react? Well, you're not only choosing react, you're choosing react plus about 50 other technologies that you're going to then try to integrate together to create one application. And each of those things, there's like 50 choices for each one of the how do you do CSS, how do you do state management, how do you do, what's your API look like? All of these different layers have choices. And Redwood tries to do the integration work to say enough has been done in the exploration phase. Now what people crave is a fully integrated experience that makes everything super easy. And so the same was true at GitHub. It was let the community build as many choices as possible and then eventually we could start integrating.
00:38:09.122 - 00:38:35.330, Speaker B: And now you start seeing GitHub to do some of that integration work with things like GitHub actions. It's very choosy in what it's pulling in, and there's still a big ecosystem on top of it that you can hook into and plug in, and GitHub takes great advantage of that. So I think it really depends on the context and what people are craving. Are people craving integration, or are they craving debundling and having choice?
00:38:36.630 - 00:39:15.534, Speaker A: Great. Another question from Aria. Most for profit companies rely heavily on open source code. How are you thinking about the future of open source incentives and economics? Do you have thoughts on how to do sustainable funding for open source? GitHub donations is an interesting take on funding public goods. Have you looked at ideas like quadratic funding, just like more broadly, I guess more broadly like future of open source, how do you fund it? I'll just add to the question. There's all these interesting things going on now where the cloud platforms are kind of sucking a lot of the value of the open source and maybe not always giving it back. I don't know, maybe my little editorializing, you take it from there.
00:39:15.572 - 00:39:55.450, Speaker B: Yeah. Open source I think is still probably more vibrant than it's ever been. So I don't think open source is in any danger of collapsing or of there being like an open source apocalypse of some sort. And I think that's because this prime element of open source still holds true. And that's that people love writing code and helping other people accomplish things and are very happy to put open source into the world with no idea that they'll get some great advantage out of it. I think that's still true and I think that's still a really important part of open source. So I don't think it's super broken.
00:39:55.950 - 00:40:08.720, Speaker A: I think that what about, as you know, a lot of these things are helped by corporate, like intel contributes to Linux and whatever. Mongo and elastic have these sort of corresponding for profit companies.
00:40:09.970 - 00:41:04.510, Speaker B: Most open source still starts with that model of hey, I had an idea and I hacked it up and I put it out there and people started liking it. Now there's another phase of open source that's exactly what you're talking about, which is open source that gets popular enough that people want to monetize it and work on it more. And so you'll see things like Gatsby for instance, which I mentioned before, they started as an open source static site generator and then became a company, or elastic search, same deal, or NgInX. All of these things started as open source, got popular and then it was like oh, there's opportunity here, let's turn it into a company. And now this companies support the open source, which I think is a beautiful, that's also a beautiful model where you have companies working on open source. And at GitHub we did the same thing. We hired several people to work full time on git itself, which was great because a, we get to give back to this project.
00:41:04.510 - 00:42:04.926, Speaker B: That is the reason that we got to exist and so we can be good citizens of the world of git that way. And two, it allowed us to have more control over the future of what git became because GitHub had demands of git. There were certain things that we needed git to do that literally nobody else in the world needed because of our scale. And so nobody was going to work on those parts of git unless we worked on them. So we'd work on them and then we would contribute them back to the Git project itself. So either a company can be monetizing an open source project, and then they pay for its development and also take contributions, or you can have a company that uses something that they didn't create and then hire people to work on it full time, which I think is one of the most underutilized versions of people working on open source. I wish companies did a lot more of that, that they would say have a critical technology that they use, and they would hire several people, one or several people, or at least give some people time to work on those open source projects.
00:42:04.926 - 00:42:48.158, Speaker B: And many companies do. A lot of people do give back to these open source projects that they use. But I think it could be an order or several orders of magnitude more of that style. To me, that's working. I think there are other really creative models for people to work on projects through crowdfunding and other things. There's now some foundations that are collecting and distributing money to you as a company can pay into this collective, I can't remember the name of the specific one, but into this collective, and then they will distribute the funds to these various projects, depending on what you're using. So you just give money to one party, and then they can handle the distribution.
00:42:48.158 - 00:43:25.760, Speaker B: Because the thing is, for companies to give money directly to projects is really hard. Like that division between a company and an individual, especially a large company, is almost unsurpassable. How do you do that? What do you pay for? And this is where support models can be really valuable too. If you want to go down that route professionally and you have an open source project that you think is getting popular, one way that you could do it is to offer support and say, hey, big companies, I will provide you support if you give me money. And the companies, it's a lot easier for companies to pay for that than it is for them to just be like, we like your project. Here's ten grand for nothing, right? They need to buy something.
00:43:28.050 - 00:43:49.240, Speaker A: Makes sense. So, from Sarah and Danny, love how you prioritize community and superfans at GitHub. How are you carrying lessons learned there over to your current ventures? What are the things you would do to create superfans and, quote, surprise and delight superfans? You could maybe hear, not know. Feel free to talk about any startup you're involved with or cool things you're seeing today.
00:43:50.010 - 00:44:28.546, Speaker B: Yeah, I think it's about scale. This is something that Paul Graham has talked about a lot in the past, but doing things that don't scale at first, and I touched on it before with things like the drink ups or whatever. So one thing that we've always done, that we did at GitHub and now we're doing it chatterbug and I'm even doing it with Redwood, is sending physical things to early users. So with GitHub we sent stickers with redwood, I'm also sending stickers. So when I launched Redwood on that same day, I was like, I'm just going to send stickers like some redwood stickers, which look like.
00:44:28.568 - 00:44:30.750, Speaker A: Are the stickers as cool as the octocat?
00:44:30.830 - 00:44:55.260, Speaker B: Well, it's just the logo for now. We'll get there, give me time. But I said I'll send stickers literally anywhere in the world. I don't care where you live, anywhere in the world, I'll send stickers to you for free. And there's just a URL that you can go to that I can send people and they can get stickers. And it's not that expensive. I've sent 1000 stickers and it's cost me 300, $400.
00:44:55.260 - 00:45:35.554, Speaker B: It's not super cheap, but those people are going to put those stickers on a laptop and I always send five. So once they're allowed out of their houses, they'll give them to their friends who will then put them on their laptops. And it's this really simple and cheap way to get your brand more exposure through people that love what you're doing. And if they're willing to put your sticker on their laptop, then they're willing to endorse what you're doing to their friends and kind of vouch for you. So this touches on branding, which is one of my favorite things in the world. I love a lot of the branding. That work that we did at GitHub, we have the octacat.
00:45:35.554 - 00:46:17.154, Speaker B: We really leveraged it. But one thing I think that people don't understand as much as they should about branding is that it's never about you and your company. It's always about what you are providing for your customer. So there's a woman, Kathy Sierra, Kathy with a k, who I encourage you to look up and read some of the blog posts that she very, they're quite old now, but they're timeless. And one of her big things is when it comes to creating product, it's not about being cool for the sake of being cool, whatever. It's always about how can you help your customers kick ass, is how she puts it. Help your customers kick ass.
00:46:17.154 - 00:46:53.680, Speaker B: Because when your customers succeed, then you succeed, but you succeed in a much better way than if you're just like, hey, look at how awesome I am. Look at me, look at me. This is great, right? And you just try to get people's attention that way. But if you can say, let me help you be better, let me help you be more awesome, then that is a much better thing to do. And that is the reason that people would put a sticker on a laptop. It has nothing to do with your company as such. It has to do with what they believe they are communicating to others with that sticker or with that shirt or with that whatever it is.
00:46:53.680 - 00:47:31.398, Speaker B: When someone wears a GitHub shirt, it's a signal to other developers to say, I care about open source. I kind of like it to be fun. And I love coding. I love being part of the community. And they're sharing, it's a shortcut for communicating values. So if people share the same values as GitHub or Chatterbug or Redwood Js, then they can communicate those in a shorthand way by putting your branding, the branding of the company on something that they own, whether it's their body or laptop. And so it's always about that communication of values.
00:47:31.398 - 00:48:00.600, Speaker B: So for your own companies, I encourage you to think that way about branding. Like, what are your values? Because if you have no discernible values, then nobody will care about your brand because it's not communicating anything. There's nothing to believe in there. There's no reason for them to ever put it because it's not a shortcut for anything. Right. So you have to believe in something and you have to communicate that belief very strongly. And then the branding kind of takes care of itself.
00:48:00.970 - 00:48:08.390, Speaker A: Makes sense. Well, that's awesome. Tom, thank you so much for. We're running out of time now, but thank you so much for taking the time. It was great.
00:48:08.460 - 00:48:08.886, Speaker B: Absolutely.
00:48:08.988 - 00:48:21.520, Speaker A: Happy to do it and stay safe and hopefully you'll get some good coding and other things done during this time, I hope.
00:48:22.050 - 00:48:29.200, Speaker B: I try, but we have a seven year old, a four year old and a one year old, and that makes it a little bit hard to get a lot of coding done.
00:48:30.130 - 00:48:31.534, Speaker A: Awesome. Well, thank you so much, Tom.
00:48:31.572 - 00:48:32.330, Speaker B: All right, thank you, Chris.
