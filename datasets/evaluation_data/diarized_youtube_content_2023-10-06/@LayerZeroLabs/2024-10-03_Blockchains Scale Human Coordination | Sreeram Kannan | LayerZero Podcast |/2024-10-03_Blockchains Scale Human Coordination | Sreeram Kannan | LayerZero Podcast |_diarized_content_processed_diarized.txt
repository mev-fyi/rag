00:00:00.720 - 00:00:06.057, Speaker A: Crypto is the biggest upgrade to human civilization since the U.S. constitution.
00:00:06.161 - 00:00:13.033, Speaker B: You have all of these intranets that are being built. What does that look like for communication internally? What does it look like for communication between intranets?
00:00:13.089 - 00:00:45.007, Speaker A: At the end of the day, we are building these trust machines. Suppose I gave you infinite resources, I gave you access to infinite talent, and then I give you 30 years. What would you do? One of the things I like doing is asking five eyes, like, and, you know, would I listen and learn what drove you into crypto and to start Layer zero in particular, And I could.
00:00:45.031 - 00:00:51.263, Speaker B: Share something as well, you know, I had just. I had been a professional poker player for a while. I lived through.
00:00:51.319 - 00:00:52.807, Speaker A: Is that why we are on a poker table?
00:00:52.871 - 00:01:19.195, Speaker B: Yes, yes. Surprisingly, I lived through overnight, waking up one day in 2011. And so April 15, 2011, online, the United States passed UIEGA and online poker was banned overnight. So I woke up and there was a DOJ symbol on every one of my sites. All the payment processors were dead, all of my money was frozen. I just bought a house at a mortgage, I was out of a job. All my money was gone just like immediately, overnight.
00:01:19.195 - 00:01:56.891, Speaker B: And so the poker world adopted Bitcoin at that point in time, as PayPal, Money Booker Skrill, these things were gone as a medium exchange, as a way to just move money and deposit to the remaining shady poker sites that were left and just keep it. So we all started sort of touching it there. But 2013 onwards, I got very, very heavily involved. Racks of miners in my garage and all of this stuff. But it was really the core ethos was this, which was basically everybody at the time was this very libertarian mindset of, like, you want to be able to own your own avenue. If you don't own it, you really don't have control. And stuff can be taken away from you at any point in time.
00:01:57.043 - 00:02:01.099, Speaker A: And when you face it personally, you know the brunt of it most directly.
00:02:01.147 - 00:02:35.485, Speaker B: Very much so, yeah, very much so. And so that was like the initial core why. But then for Laser itself was about four years ago, they really started thinking about this. But it was at the launch of BNB chain bsc. At the time, every day we were getting spammed with messages of more volume than Ethereum, more users than Ethereum, and that was like very atypical. Like a lot of chains existed, but like nobody used them. And so this was just like, we're like, okay, like, what's happening here? And the real question we asked ourselves is, you have Ethereum that's like secure, but very Expensive.
00:02:35.485 - 00:03:26.391, Speaker B: So what can you do with something that is not nearly as secure but like fast and cheap and ephemeral. Right? Just treat the end result, use it as a compute environment and treat it as entirely ephemeral. And so we were just the three of us, me and my two co founders, we were just building for ourselves, just completely fun, zero intention to start a company. And so we started to build a toy game just as technologists as like what could you do here? So we built this stupid game of you'd open packs of gladiators, the gladiators would fight to the death and really just a randomized heads up event. And if you're a gladiator 110 times, so 1 in every 10, 24 they would be freed from the arena and that would mint something back to Ethereum. And so it's really this concept of fast ephemeral. You could do a lot of stuff there that you would never be able to do transactionally like a roll up.
00:03:26.463 - 00:03:33.815, Speaker A: And I mean except the exact trust caddy is a little bit different but it's kind of like you spin up this thing and then like run that and then come back.
00:03:33.895 - 00:04:09.913, Speaker B: Exactly right. So this was before, you know, before we roll ups were there, we knew, but that was the intention was like you'll do something here and then you, you'll bring the object of permanence back on Ethereum and that's where we'll live. And as we were building this, we realized that there was no way to actually trigger events between BSC and Ethereum without a centralized coordinator. And I was like, well that sucks. That defeats the whole purpose if you have decentralized coordinators triggering events. And so we looked into bridges at the time and the landscape and quite frankly were pretty horrified at what existed. And I think almost all of them have gone on to get hacked since.
00:04:09.913 - 00:04:39.949, Speaker B: So I think we were right at the time. The landscape was just scary. Everything was heavily centralized, everything had very little thought around the trust properties around it. So we sort of had two competing thesis there. One was okay, bridges had probably done this, but there was no good one. And the other was that all the bridges at the time were using wrapped assets, which was you're going to lock up here and mint a synthetic asset over there. But it really shifted the user trust really a lot.
00:04:39.949 - 00:05:07.133, Speaker B: So the user using Uniswap or some other contract, when they swap in Uniswap, they bear the trust of the smart contracts there. But as soon as they're done, they never think about it again. They have their asset and they don't like, retain that. But with a wrapped asset, as long as you hold that forever in perpetuity, if anything is wrong with the smart contracts with the system as a whole, your asset immediately goes to zero, right? You carry that trust in perpetuity. So the relationship with the user shifts very heavily.
00:05:07.269 - 00:05:57.891, Speaker A: This is something that, you know, normally when you think of like two cities and a bridge connecting it, think of the traffic flowing across the two cities as the load that the bridge is carrying. But a wrapped asset has this really counterintuitive structure, which is that it's carrying everybody who's ever crossed the bridge. That's the total weight that's sitting on the bridge. And it is such a, like, if, you know, somebody hasn't thought about it before, it's not intuitive that that's what's happening, because all the assets that are wrapped could be rocked if the bridge went wrong. So it's like this, you know, imaginary bridge, metaphorical bridge, where everybody who's crossed their load is being borne by this bridge. So that's a pretty hard bridge to build.
00:05:58.043 - 00:06:21.637, Speaker B: Yeah, wind in. So for us, we started saying, okay, well, let's think about the bridging landscape. And we actually, we had this strong thesis of like, nobody will keep using wrapped assets for the long term. Everything will be native assets. So we built Stargate, the early version of Stargate, which was just pairwise native assets. Add here, subtract there, you have native USDC on both sides, native, whatever this is. And that's it.
00:06:21.637 - 00:06:47.235, Speaker B: That's the whole thing. And then we realized, okay, actually the reason most people are using wrapped assets is they want to go to more chains. And there's this race condition of the assets in the pool here. And reverting that race condition becomes very tricky. We created this thing called the Delta algorithm and built Stargate as it is today, but eventually realized you still can't trigger the events on both chains. There's still no way to have this message passing. You still need a centralized coordinator.
00:06:47.235 - 00:07:00.037, Speaker B: And that was when it became very apparent to us, like, oh, hey, to do this thing, we really need this piece of technology. And that's clearly the generalizable problem. And that's when we started like, okay, this is the thing that we're going to do.
00:07:00.181 - 00:07:01.717, Speaker A: And this is.
00:07:01.901 - 00:07:48.669, Speaker B: That became layer zero, right? That was layer zero. And it wasn't until another six plus months after that. And again, we were just three. Like, we were in my basement just building, literally just building for ourselves. Like, this was a thought experiment More than anything. And then we started to get the attention of some people and then we went into, we got preempted and around and that was actually like, oh, now we actually like. It went from this thought experiment to okay, what does it mean to do this? What does it mean to really do this? And what does it mean to think about it not as something for our own toy, things that we build, but something that could be used very widely in production forever? How do you make this a real protocol? And yeah, that became the last, last series of years.
00:07:48.717 - 00:07:51.125, Speaker A: Now it's so cool to know that.
00:07:51.165 - 00:07:54.309, Speaker B: Story and I would love to hear, you know, this is a similar path.
00:07:54.357 - 00:08:49.916, Speaker A: So I didn't start from a personal user story. I started with maybe the right place to start. The story is actually one very interesting interview I had as a faculty applicant. I had applied to Caltech and at that time I was working on genomics. And I had only been working on Genomics for two years at that time my PhD was in wireless networks and I switched to genomics because I thought it's much more impactful. And so I was working on that and I had this interview where the interviewer said, hey, you're working on those DNA sequencing algorithms. What if somebody invented a new sequencing technology that completely solved this problem? What would you do? I said, hey, I didn't know about DNA sequencing.
00:08:49.916 - 00:09:48.615, Speaker A: Two years back I figured out something. I'm a curious guy, I'll find out some of the good problems to work on. Then he said, no, you're not really getting my question. I'll ask you in a different way. Suppose I gave you infinite resources, I gave you access to infinite talent, and then I give you 30 years and then you'd go do your research and come back and tell me what you invented in 30 years, what would you do? And I was shocked at the magnitude of this question because I had never faced a question like this or even thought about this, that normally we operate in constraint, thinking, I'm at X, what else can I do? And this question was like, oh, there's no constraint. What is the unconstrained optimum that you would build for? And I didn't have an answer. But then I went back and from then on I always have a 30 year project.
00:09:48.615 - 00:10:38.183, Speaker A: And so at that time I still continued to work on computational genomics for like seven, eight years after that. But at that time the thesis was decode how information is stored in a living system. And we were working on that and to move from that and actually doing pretty reasonably we had collaborators, Nobel laureate, breakthrough prize winners, all this kind of stuff. But my own strength was not biology, it was in computation, inference algorithms. And I was looking at. Suddenly I got called by my PhD advisor who I worked on wireless networks with. And he said, sriram, you know this bitcoin thing, like it's interesting, it's peer to peer, it's optimizing throughput and latency and stuff.
00:10:38.183 - 00:11:33.427, Speaker A: And you did that for wireless networks, you want to work on Bitcoin with me? And I said like no, I have a 30 year thesis, I'm doing something else, why would I do this? And one of the days I was reading this book by Yuval Noah Harari Sapiens and I'd read it before I think, but maybe rereading it. And one of the main theories of the book is the evolutionary advantage of humans. Homo sapiens is my nominal guess for it would have been that humans are intelligent, therefore they have high evolutionary advantage and took over planet Earth. And he provides a counterexample to this. Like you take an Einstein and a gorilla and put them on an island and then see who survives better. It's most likely the gorilla. So the survival advantage of the most intelligent human being is still not that high.
00:11:33.427 - 00:12:27.761, Speaker A: It is only when we coordinate in large groups that actually you can see that survival advantage. And like having hundreds, you know, if you take 500 people and finded gorillas then you start seeing that dynamic. And so this was a big shift in my own thinking as an academic. You know, my main kind of like driving value in life was innovation and for the intelligence, right? And for the first time I was like, no, actually coordination is the evolutionary advantage of human beings. Because if you think like humans main advantage is intelligence, then the imperative is to accelerate intelligence, which is what AI and AGI and all this stuff is. But if your thesis is humans are special because we coordinate flexibly in large numbers, the imperative is to accelerate coordination. And then I was like, oh wow, that's crazy.
00:12:27.761 - 00:13:14.615, Speaker A: So if accelerating coordination is the imperative, the main friction to coordination is trust. I'll coordinate with you if I can trust you. And usually this trust is built with this kind of one is to one deep relationships, but that is non scalable. You can't build that with a billion people. I saw that actually what blockchains are good for is creating substrates for global coordination. I couldn't get this thesis out of my head because the original viewpoint I had on Bitcoin was yeah, it's useful, it's sovereign, it's libertarian and I was not. And I don't have any connection to this thesis.
00:13:14.615 - 00:13:51.905, Speaker A: And then once I saw the coordination thesis, I was like, wow, this is crazy. And so there must be so many things to do here, because if you look at the Internet, the Internet was our communication super highway. It accelerated the ability of humans to connect with each other and communicate. But coordination is not just communication. It's communication plus commitment. Right? Like I talked to you, and then I agree that if we work together, we take 50, 50 or whatever the coordination conditions are. That's a binding commitment that we enter into.
00:13:51.905 - 00:15:33.955, Speaker A: So what the Internet was missing as a coordination substrate is it had the communication super iv, but it didn't have a robust commitment mechanism. And I started seeing blockchains as this universal commitment systems where you can enter into arbitrary commitments across individuals that can then be resolved on chain. So this was all like starting at like this 100,000ft view. And one of the failure modes of thinking at this 100,000ft is you can't find the pathway from where you are to where this crazy new world is. And so I had to go through like many iterations to actually, like, find out, find a footing in that direction. Starting my own layer one blockchain, which never took off, which could not raise money, to going and trying various other things. You know, even before starting my own layer one, going to Bitcoin and Ethereum and like, asking them to use our protocols, and then going to try to start our own layer one to, like, figuring out how hard and messy of a job that is, to then going and trying to build an NFT marketplace and then like, realizing like you were when you were playing with all these different apps that, hey, when you try to do these different applications like an NFT marketplace, the set of example problems that I ran into were, how do I bridge an NFT from one chain to the other? What's the trust assumption of this? How do I get a price oracle for an NFT whose liquidity is low? What's the trust assumption for this? How do I run like, arbitrary computation on top of Ethereum because I have to do those things.
00:15:33.955 - 00:16:22.287, Speaker A: And then another example was I want to access the history of all the events that happened even inside Ethereum. If it's not in the smart contract state, it's not accessible. As an academic, I was like, oh, I thought the ledger was the main thing, but the ledger is not even accessible inside the same blockchain. And all of these together, kind of like each of these problems presented an underlying trust problem. And then we figured out, okay, let's just solve the trust problem, because we don't know how to solve each one of these problems well ourselves. And if our thesis is coordination and permissionless innovation, which is that anybody else can come and, like, innovate on a common substrate, then let's just solve the one trust primitive and then other people can solve all these other things. And that became Eigenlayer.
00:16:22.287 - 00:16:31.703, Speaker A: I also wanted to touch upon, like, the name. You know, we have Eigenlayer. You have Layer zero. Maybe you can talk a little bit about how the name Layer 0 came up and I can tell you about Eigenlayer.
00:16:31.759 - 00:17:05.843, Speaker B: Yeah, I mean, layer zero is all. I'll give 100% of credit to my co founder, Ryan. So that's all him. But it was really like the way that we built the protocol and still a lot of the way that we do things today is like we would sit in a room with a whiteboard and we would just kind of argue for like 8 to 10 hours a day of design a system, break a system, right? Like, that's like, from the adversarial possible viewpoint, I'm going to design a system that I think could comfortably do this. And he's going to go through and he's going to say, here's how I can exploit it. Here's why AAVE would never use this because, like, I can hack all their functions.
00:17:05.979 - 00:17:10.731, Speaker A: Do one of you have, like, the propose and the other has challenge or you flip?
00:17:10.843 - 00:17:19.015, Speaker B: No, like, sometimes we're like, both designing in the same direction and then. And then we'll try to break it apart. But yeah, it's both. It's, you know, it's very fluid.
00:17:19.324 - 00:17:36.224, Speaker A: The reason I ask is the RSA algorithm Rivest, Shamir and Adelman. Rivest and Shamir used to design the schemes and Adelman used to break them. I think he broke 36 of those schemes and the 37th one was not broken. And they're like, okay, if Alman can't break in.
00:17:38.444 - 00:18:05.781, Speaker B: Yeah, I mean, that was the way that we. That was the way that we built everything. And so we were just, we were arguing through kind of what, what this is and what it should look like and what the assumptions were for all parties involved. And Ryan was trying to describe in broad strokes kind of what this layer is, because people could visualize it as we're not our own blockchain. So it's not this middle chain that sits in and it lives. There's smart contract endpoints that live on everything. So you could view it as sort of above.
00:18:05.781 - 00:18:20.409, Speaker B: And he's like, listen, it's this layer of communication that lives below all of these different chains, all these layer ones. It's like a layer zero. And both of us were just immediately like, that's the most intuitive description ever. And so it was just like very obvious.
00:18:20.577 - 00:18:51.237, Speaker A: Yeah, that's so interesting. I think the layer zero theory is born out of this idea that there are going to be a lot of chains, layer ones, and then there's something underneath all of it. Layer 0. The eigen layer theory is somewhat similar. Eigen and German for your own Eigen layer is your own layer. And the slight twist here is instead of thinking in chains, we thought in layers. And so that is there's a common zone of decentralized trust.
00:18:51.237 - 00:19:39.275, Speaker A: And then anybody can build their own innovative systems that require decentralized trust in arbitrary different configurations. And eigenlayer was the name, was intended to evoke this idea that, hey, you can build your own thing. Like you can build whatever thing that you want on top. So that's an interesting story. We also thought of ourselves as like this underlying thing on top of which other things happen. And so this match of these two technologies today is super interesting to see. Do you have a particular thesis for where like, let's say we go from here to like 10 years or 20 years down the line? What is this world that you envision and how are you, how do you back project that to like what you want to build today?
00:19:39.695 - 00:20:11.301, Speaker B: Yeah, I think I sort of talk tongue in cheek a lot of like having been here for a very long time, I've. I've been at the very cusp of many, many, many things in the space. Whether it was, you know, Bitcoin in 2011, mining in 2013, you know, I was minting Gen Zero CryptoKitties. I was farming yams at 300 million percent APY. And like each time I like did not see what was, you know, what was coming. I didn't see this boom of any. So I have zero faith in my ability to kind of predict what the future is.
00:20:11.301 - 00:21:17.111, Speaker B: But the lens that we've always taken in this approach is just really wanting to build the lowest level primitive that fits all this or really took a protocol lens. And I actually have talked about this a couple of times, but I was at Sequoia Base Camp a couple of years ago and had the chance to ask Elon Musk one question. And my question was sort of about this. How do you think about what you're building in the intersection? His Question so direct and obvious to me, like he's like, you know, what are you thinking? He's like, the answer is clearly just like build the most useful thing. Like don't worry about what any competitors are doing, don't worry about like any state of the world. Like build the thing of the highest possible utility, right? And so the lens that we've always tried to think through is we want to be building the lowest level possible primitive of the highest possible utility. And so for us it didn't matter if you have 1000 orthogonal layer ones, which is Solana and Ethereum and X and Y and all of this, or if you have literally Ethereum only as a settlement layer and 100,000 L2s that all roll up and they still need to co communicate.
00:21:17.111 - 00:21:37.491, Speaker B: And so we need to build a primitive that's extensible enough and useful enough and low enough level without additional overhead that's just like any of these worlds maps there. So I think the lens that we focus on most of the time at building is again that intersection of the lowest level possible primitive of the highest amount of flex, extensibility or utility.
00:21:37.643 - 00:22:55.545, Speaker A: That's super cool at our end because we started with this coordination thesis. The Eigen Labs vision is to build humanity's coordination engine. It's a pretty grand kind of a claim, and I know it's ambitious, but the starting point for if you take that claim, and as I was saying earlier, like coordination is communication plus commitment, the ability to make and keep commitments. So we focus a lot on how do you, when you say what is decentralized trust or what is trust is the mechanism by which you know, these commitments are kept. So we think a lot about what? How do we build a zone, a system which can handle the most volume of commitments, which can handle the most variety of commitments, which can handle the most robust verifiability of these commitments. So volume means like you want to maximize throughput, like what is the total rate at which you can write and make commitments to each other. And that's why we built Eigenda.
00:22:55.545 - 00:24:00.499, Speaker A: Eigenda is this data availability system where the goal is I want to build one horizontally scaling system where I can put infinite amount of data. And it came from basically the Ethereum roadmap and some of the observations from there, which is that data is one of those things where you can very easily horizontally scale it because you can create an erasure code and then make sure each node receives like a portion of the data. And even if a majority of the nodes fail, the Remaining nodes can still recover every unit of data because this is theoretically perfectly horizontally scalable. Said, okay, let's build that. That ensures that you can have the maximum volume of commitments that can flow through it. Then you look at the variety, like what types of commitments can you make? And each kind of a system that a network is making different commitments, right? Like a bridge is making a commitment that I'm passing messages correctly. A co processor is making commitment that a computation is done correctly.
00:24:00.499 - 00:24:35.235, Speaker A: A data system is making a commitment that it is storing data correctly and so on. So there's all kinds of nuanced types of commitments. So we built this Eigen layer mechanism, you know, even though popularly it's called restaking. It's just a meme that picked up and we said, okay, that's good. But the idea of eigenlayer was that you are staking and making a commitment on hey, I'm going to do abcd. And if you don't hold to the commitment then you will get slashed. And so there is a kind of like a penalization mechanism attached to the commitment.
00:24:35.235 - 00:25:53.031, Speaker A: So that enabled this economy of what we call AVSs, actively validated services, services that are building on Eigen layer where like they can consume decentralized trust in a flexible manner. So volume of commitments increased throughput through da variety of commitments create Eigen layer and any AVs can kind of consume these things. And then the third one is the verifiability. How do you know these commitments are verifiable? So two mechanisms. One is I can write an on chain contract that proves that you've done something wrong and you can do this for certain kinds of things very well and for other kinds of things not so well, right? Imagine I'm running a prediction market like polymarkets popped off and I'm happy seeing it on cnbc. We need more good apps going around here. So Polymarket, when you settle a prediction market, who won the election? How does the chain know if the guys who are staked and providing the oracle answer are giving the wrong answer? And on chain you need to create a committee and then you have to be worried about is the committee, right? So certain things you can actually write clear on chain slashing contracts.
00:25:53.031 - 00:26:40.855, Speaker A: For certain things you cannot and for the things that you cannot, you can. We have this mechanism of Eigen token staking and forking. So the idea is on chain it is not clear what the right thing is, but off chain it's clear that oh you say Biden's not the president today, that's not true. And it's visible off chain. And anybody can come in and permissionlessly initiate a fork of the Eigen token where like anybody who said Biden's not the president today is slashed and the remaining people have their tokens. But of course on chain, on Ethereum, you don't know if the Igen won, the original fork is right, or Eigen 2, the new fork is right. But that's totally fine because it's where the value across will be the one that everybody believes is true.
00:26:40.855 - 00:27:37.505, Speaker A: So we kind of use this like two things. One is like, which is true, is verifiable off chain, but which is valuable is also decided off chain. And you can kind of like beam form the two things into actually figuring out like how to build the system. So going back to this, like you have volume of commitments, you can make the most number of commitments using da, you can the variety of commitments, you know, let people express using various services using avss and then the verifiability of commitments. Now all commitments which are off chain verifiable, any two reasonable people can agree, all of them can be adjudicated on the system. So that's like it was not like a very simple journey from the high level 100,000ft of coordination superhighway to actually what sets of things we're doing. Because we have that as like the high level North Star.
00:27:37.505 - 00:27:56.433, Speaker A: We wander and then like, oh, this small thing like seems to be pointing in that direction. Let's take a step there. And I think this combination of like a faraway North Star and really looking closely at what is working today and trying to build towards it is kind of like our philosophy there.
00:27:56.529 - 00:27:57.445, Speaker B: I love it.
00:27:59.665 - 00:29:31.801, Speaker A: One as we're talking about this, why I think one thing that I think we've not articulated very clearly as a kind of community to application builders is why build a crypto app? And I'll kind of give our thesis on this and I see even today at Twitter like lots of people fighting on what's the total addressable market of crypto. And most of it I think is centered around payments or like financial applications, global financial access, which are all like extremely worthy and great goals and already like a huge market, if we can do that. But we think it's actually like much, much bigger than that. And pretty much the thesis is all digital platforms are much better run on a crypto substrate. What you get with the crypto substrate is you get the ability for an application to make commitments to its users. It's one of the places where we think that the right abstractions for communicating this between the apps and the users actually going to matter a lot. Right? So if you think about Bitcoin, there's infinite amount of details as like, is it really decentralized? Who's doing the mining? Is it proverb work? It's the longest chain rule, when will it fork? How is the difficulty adjusted? All kinds of things.
00:29:31.801 - 00:30:21.527, Speaker A: And most users don't know anything about any of these things. They know two things. Bitcoin has 21 million. There's 21 million bitcoins and you own your Bitcoin. These are the only two commitments that Bitcoin as, like, this system is making to its users, and it's very legible to its users because that's the only reason they're using Bitcoin is because of these two reasons. And each app you can think of that exists today, you can ask, what commitments should they be making that makes them more attractive to their users? Because then instead of generally selling this idea that, oh, that app is centralized, I'm going to make it decentralized, which doesn't make that much sense to me. The idea of, oh, that app is not able to make credible commitments and therefore I'm not able to use that app.
00:30:21.527 - 00:30:59.231, Speaker A: Right? Like somebody says, oh, I have a new coin and this coin only will not be inflated or you'll have your own coin. It'll be like, why? And the same way, suppose I want to build a competitor to Uber and I want to say like, hey, Uber is taking a 30% take rate. I'm going to take only a 5% take rate. And then you can ask, why should I trust you? Like, in five years, when you have all the drivers, you're going to do the same thing that Uber did. And if the app can make a credible commitment that, if, here's my claim, never take more than 5% take rate, and it's enforced using some mechanism. It's abstracted from the user. All those mechanisms for enforcement are not clear.
00:30:59.231 - 00:31:51.545, Speaker A: But as a user to the app, I know that that's the commitment that I'm getting. That's a really powerful framework and is one of the reasons why we think that we are going to have millions of chains. As you think about it, as a game developer, what kind of commitments do you want to make? Your points that you make in the game are yours. The winner of the tournament is going to get a bunch of the game tokens, and the winner of the tournament is going to be judged correctly or fairly. Like each application actually Has a spectrum of powerful commitments that they would want to make to their users. And because these applications span both financial and non financial use cases, it is impossible to fit them in one synchronous zone. So we are very counter the one synchronous chain thesis.
00:31:51.545 - 00:32:14.035, Speaker A: Maybe there's like a synchronous chain that holds a lot of like high value financial transactions like Ethereum, but the spectrum of like systems that need to be built in order to enable these applications is going to be very, very many and they all need to still work with each other. And so that's really where we see this partnership being a big deal.
00:32:14.115 - 00:33:02.771, Speaker B: Yeah, it's interesting. I've never thought about it in terms of the way that you describe it of credible commitments, but it resonates so much because the framing that we always, that we thought through the lens that we thought through as we built Layer zero, we're like, we have to be able to give these guarantees, otherwise there's no way this can be used long term and at scale. And so for us those guarantees were contracts need to be immutable because if they're not immutable at any point in time, we can change the trust assumptions of the developers are built above. We can censor transactions, we can do all of these things. If the contracts are not immutable, then I can never give any guarantee or any promise to somebody above. I can always change them and they will always have the trust assumption of us as the developers. So have to be immutable, have to be permissionless.
00:33:02.771 - 00:33:30.013, Speaker B: Meaning that nobody should need to rely on us layers or labs, this office, if we disappeared, if we're shut down or something happens, the developers shouldn't be worried that their protocol will no longer function. Right? The protocol exists, it is, it can be used by anybody. Anybody can come in and run the infrastructure. We are not needed. And it has to be censorship resistant. Right. There has to be a ability for the protocol to live at a layer of technology.
00:33:30.013 - 00:34:32.175, Speaker B: In an application that lives above, they can add in any of their layers of censorship that they want. If you're a stablecoin you can blacklist and you can have any sort of controls that you want over that. But that doesn't live at the protocol level. The protocol is agnostic to that because especially when it comes to financial transactions, if you have the ability to censor, you typically have the ability to reorder, which means you can really, you have a much more limited set of guarantees that you can give to the user. If a user doesn't Know if I got my order in first, but I don't know if I'm going to get filled or if somebody is just going to arbitrarily fill Citadel or all of these other people in front of me, then I have much less guarantee or ability to reason about the financial outcome of this transaction that I'm trying to make, which just makes a much weaker system overall. So we've done some interesting things which are we can always add a new validation library so new code can be added as things progress. But people can opt in if they want to stay in the old one forever.
00:34:32.175 - 00:35:35.359, Speaker B: And it's very important to us that we could never, we can never remove any existing library because of course we'll just remove all the old ones and put in one that's fee heavy and censorship heavy and everything else. So we can never remove and we can never modify any, but we can always add anything new moving forward and it's just opt in for every application. But I had never, you know, I knew very strongly that we, I knew what guarantees we were giving to the user, but I had never reasoned, but really, really such an eloquent way of reasoning kind of what protocols and applications are delivering to the end user and what is the ultimate crux? Why do people use aave? Why do they use Uniswap instead of some other fork or some other something else? It's just very, very clear both in your simple concept of security of like, okay, this long in production and this much value has been passed through it, but also the more sort of elegant of just like you can observe the state of the world, you understand, XY equals K. You know, you're getting that exact output. You don't need to think about the system doing something opaque or adversarial.
00:35:35.487 - 00:37:10.745, Speaker A: Yeah, that's so interesting that you had this notion of strong guarantees at the center of the protocol. And this framing of credible commitments is originally from, or at least my reading from Virgil Griffith, who's one of the Ethereum ogs. And one of the things that attracted me towards the Ethereum community is that they thought of blockchains as this coordination substrate and had kind of developed a little bit of like a culture around this philosophy, the Gitcoin as an example and so on. And Virgil's like, there's a famous blog post that Virgil wrote and in that he writes about how when you have a non cooperative game like a prisoner's dilemma, the ability to make a credible commitment that hey, I will not defect in the protocol, and you put some stake up and you make a promise that you will not defect, actually changes the structure of the game from a non cooperative game to like a cooperative game. And then I observed this to be true, like much more broadly in society. For example, the US Constitution as an example of like a credible commitment that is made. And any other system built on top, including any bill, cannot violate some of the rights that are guaranteed in the Constitution.
00:37:10.745 - 00:38:10.091, Speaker A: And part of the crypto project in my view, is to export this kind of like a self enforcing coordination mechanism into the Internet and make it digitally native. So I was in a meeting with a US Congressman and he went around the table and asked like, hey, why are you in crypto? And most of the answers were primarily financial. And then I said, crypto is the biggest upgrade to human civilization since the U.S. constitution. The room went silent a little bit. But we really believe in this because I think the set of things that can be built once you have robust coordination mechanisms. I think a historical example of like a self enforcing commitment mechanism is gold.
00:38:10.091 - 00:39:40.983, Speaker A: Okay, you think of gold, if you think of the problem of value transfer. I want to pass some value to somebody, then you ask, how do I make it? What is the enforcement mechanism for passing value? And the king can have a ledger, he can say, hey, you have this property or whatever and write national records. But when you go across trust domains, when you go from one king to the other king, when you not, who do they trust? How do they make sure that they can exchange value rigidly? You need a coordination mechanism that is not authoritarian, not based on a committee, not based on even a majority of people, because there's no common majority across these two systems. Gold was this like emergent civilizational property that actually, oh, you know, I got some gold, which means I know how much value. And so when you want to transact across a trust boundary, you need something that is self enforcing, whose properties are not dependent on anybody. And so I think of that and like what you said about building the layer zero bridge as being immutable, permissionless, censorship, resistant, as inheriting a certain aspects of this kind of like self enforcing nature. And the when you think of, you know, gold as this thing of like global value transfer, it became really powerful.
00:39:40.983 - 00:40:38.795, Speaker A: And like now it's so prominent around the world. And but because it was so robust in the guarantee that it was giving, because I give you a piece of gold, you know, it's a piece of gold and no authority, no majority, no committee can decide that that's not gold. And so that thing, even though it's very powerful, was not very extensible. So I can't use so goal is a coordination mechanism is useful for value transfer, but not for value allocation and for making commitments of how value will be divided in the future and so on. And so something like the US Constitution and governments and contracts emerged to actually solve that problem. And we want to figure out how we translate all of those kinds of things to Internet native digital coordination. Especially in the age of AI, I think we see for example this tension.
00:40:38.795 - 00:41:39.241, Speaker A: Just before this chat we were talking about a startup and other things in the AI space that Brian was interested in and his own previous experience building AI to, to do poker and other stuff. Especially in this age of AI, you know, right now we see this tension where like there is two, like there's a division between in the top AI people as to whether it should be regulated or not regulated. The way I think about it is like you have, you know, society is made of this underlying coordination mechanism and then there's an innovation mechanism on top. Like the free market is the innovation mechanism. Constitution government is a coordination mechanism. And the creation of this coordination mechanism enables more innovation, enables the free market, like free production of goods and services. But I think what has happened is over the last 300 years, technology has massively accelerated the innovation layer.
00:41:39.241 - 00:42:16.101, Speaker A: Because technology is leverage, a force multiplier to the free agent. If you're an agent, you can act with so much more force and power, like whether you're a company, whether you're an individual, if you have technology. So technology is force multiplier to the individual. But the coordination mechanism that we've built is still stuck 300 years back. It is the Delaware C Corp. It is the US Constitution, it is the double entry accounting on the ledger. Where is the acceleration on the coordination layer? Right? Instead of hey, we have an innovation problem like AI needs to be regulated.
00:42:16.101 - 00:42:55.891, Speaker A: Instead of running to 300 year old coordination mechanisms, can we build like technology accelerated coordination mechanisms which can then help solve, for example, all humans need to vote on some big major upgrades to this AGI. How do we keep AGI in check? Like is one of the big things we think about. And so I think the interaction between as AI accelerates the innovation layer, if crypto can accelerate the coordination layer to make sure that, you know, we can actually like build a productive society of AIs that actually help humans rather than the other way.
00:42:56.043 - 00:43:29.235, Speaker B: Yeah, I find it very interesting you brought up earlier today this naval quote and one of his other quotes is basically there's, there's Three forms of leverage, right? And it's human capital, financial capital. And then the third is code, right? And code is like relatively nascent, right? It's, it's as new the others we've seen what human capital can do, whether it's from the pyramids onward and we've seen what financial capital to do. But code has really disrupted, as you said, and really accelerated this at this innovation layer. So yeah, it's a, it's a fascinating problem. Set a really grand vision.
00:43:30.455 - 00:44:04.451, Speaker A: The code is leveraged that you mentioned. I think one other thing that Naval mentions there is code is the only permissionless leverage. Everybody wants people to follow them, but it's permission. You need to get people's permission to follow you capital. Like everybody wants money, but you need permission to get the money or to earn it. But code and media are completely permissionless. And that idea of permissionless is the center of I think what would be building here in crypto.
00:44:04.451 - 00:44:35.383, Speaker A: So that's super exciting to see those two converse. So we were at the 20,000ft level, let's dive a little bit deeper now. The short term problems that you are seeing the crypto space face and how you are thinking about solutions to that, if you can elaborate, I think one.
00:44:35.399 - 00:44:54.835, Speaker B: Of the most interesting. There's two sides of it. I think there's one, there's the world. I think crypto loves to look at the world as it is now. And really. And I love that the space came from a very adversarial background. And I think it's very important.
00:44:54.835 - 00:45:27.311, Speaker B: You see L2s get beat up a lot. You see a lot of people get beat up is this, you know, doesn't actually inherit the security of Ethereum right now. It doesn't do this, it doesn't do this. And I think that's like great and healthy. But I think it's important to look at what things are now and then what they can actually become or credibly become, right? And some systems are just broken. They'll never become what they claim to become, but many can. And I think the best piece of advice that I didn't take was as we were launching, Coby had told me, he said, listen, when they were launching Lido, Lido is not perfect at launch.
00:45:27.311 - 00:46:10.651, Speaker B: And they just laid out here is like, here is everything, here are all of the flaws with the current system, but here is like how you eventually get to that end state. And so when layer zero launched, we launched and we built in a system that we said, listen, this is totally permissionless. And Immutable and it exists. And anybody can come in and run a DVN and you'll have all these really complex DVNs come in over time and you'll have this sort of, everybody will have access to this really great marketplace of validation and all of this. So create these really beautiful systems that couldn't exist today or haven't. And people love to look at current topology and they were like, okay, yeah, but there's only like these things right now. And we're like, yeah, it's an open system, people have to come and build.
00:46:10.651 - 00:46:30.863, Speaker B: Sam, you look at the validator set of Ethereum and Bitcoin early on and it's a joke compared to what it is right now. These systems evolve, the trust assumptions evolve. The way the protocol hasn't changed. It's not like the code of Bitcoin has changed significantly. The code of layer 0 is not change. The protocol is still a protocol but we have much more diverse set of deviants now. And we're going to have crypto, economic security deviants.
00:46:30.863 - 00:46:32.135, Speaker B: We have all of these things that are layered.
00:46:32.175 - 00:46:34.711, Speaker A: Can you talk a little bit about DVN's in this context?
00:46:34.743 - 00:47:12.455, Speaker B: Yeah, yeah, absolutely. So the way that we just, the way that we built layers here is you have these endpoints that are entirely immutable and the endpoint should be the lowest overhead thing. And so all that the endpoint does is really just deal with channel and nonce like that's it's validation and nonce like that is that is all the endpoint does. And so in application is basically saying I'm going to send this arbitrary array of bytes to application A on chain X. Like I'm going to go send it over to this contract on this chain. And it's great across this channel you have a given incrementing nonce. So you can do things like Centrish, give these guarantees.
00:47:12.455 - 00:47:45.047, Speaker B: Event gets written on chain A. DVNs are effectively listening for that event and then they're creating a hash of the packets. This is how most work. And they're presenting that hash to the destination chain. Now what this looks like that validation methodology, we're really agnostic. We took the decision early on like we are not going to be hyper opinionated on validation because everything that exists at the time of launch is not going to be de facto five plus years from now. And now we've seen things like Polyhedra ZK Light client that's aggregating 300,000 Ethereum signatures.
00:47:45.047 - 00:48:27.751, Speaker B: You really see an evolution here. The point is that's all off chain anyways in the eyes of the receiving chain and the eyes of the destination chain. So we're agnostic as to what it looks like. It will evolve over time and that will be sort of a marketplace that applications will demand what they need and some will need things that are extremely secure and have extremely high degrees of crypto economic security and some will need almost nothing because there's very little at stake and they'll price those things differently. This is all just some Pareto frontier of cost for security. Right. And so you know, as we were designing this, the design was all there, but people were hyper focused on the topology, like the current topology, not what the system actually enables.
00:48:27.751 - 00:50:09.023, Speaker B: And I think the space right now gets caught up way too frequently on looking at like current topology versus looking like what does this technology actually enable. I mean, I know, you know, I saw a post today about the total amount staked in dimension or I saw the, you know, the post early on in Celestia's life of Celestia has only generated like X dollars in fees. Solana got this all of the time early on and has sort of hit escape velocity in a way. But it's like people love to look at what the system is now, not what the actual system can do and can become. And I think it's very interesting when you're evaluating technology, when you're evaluating like what does the future look like, is being able to, to bifurcate those things and understand like what has real value and what, what can an end state system look like and is this viable or non viable? And so I think most of what we spend our time today, you know, we spoke earlier and like really focused on the primitive side and just these low level primitives that we offer to developers that developers can use to build anything. But as we think through that there's there's so much noise of like here's a collection that you have ag layers and super chains. You have all of these intranets that are being built and it's a constant question of what does that do to the existing system? What does that look like for communication internally? What does it look like for communication between intranets? Is this a viable thing? Is it only going to exist in a microcosm or is this potentially going to exist in a much broader mesh or network? It's a constant evaluation of where does this primitive lie in the broader systems and of these things that are going out.
00:50:09.023 - 00:50:18.959, Speaker B: Don't look at what they are now because most of them are nascent and novel. What is actually viable and what can that look like on a much longer term time horizon?
00:50:19.127 - 00:51:21.101, Speaker A: Super interesting, this issue of reconciling the long term with what is viable. One of the things we have to do is to reconcile what the longer term vision is to like what is actually existing today. And clearly all of us fall short. Like this includes Ethereum, this includes even Bitcoin. And so one of the heuristics that I've kind of learned and adapted to, which is not obvious to me to begin with, is build something today that is useful, which has a roadmap to become more and more trustless or trust minimized or self enforcing, which are what you want to use there and have a. As you're building what is useful today, think about how this will evolve into the thing that actually has all those properties. Kind of like the advice that Cobie probably gave you.
00:51:21.101 - 00:52:47.815, Speaker A: And that is I think like a really useful framework to think about when we are comparing either a layer 2 or even eigenlayer actually, like for example, the eigenlayer contracts have a security council with 13 members. I'm pretty embarrassed by this, but I know it's worse to not have them because if I make this immutable and something happens to these contracts and we have, I don't know, 20 billion at stake, that's a far, far worse outcome than not having. So introducing points of centralization which actually induce more trust. At the end of the day we are building these trust machines and so is removing it today going to be more make it more trustworthy or adding it today going to make it more trustworthy? I think that's one of the ways we think about it because both of them have pros and cons on the same axis, which is trust. Because code is not perfect and it's very hard to get code perfect. In fact, this is one of our meta philosophies in designing the Eigen layer and Eigen token. The future roadmap of the Eigen layer ecosystem is this issue that you raised here on immutability, which is right now the only way an app inherits trust from a blockchain is if it's immutable.
00:52:47.815 - 00:53:27.413, Speaker A: If it has a governed component, then you don't inherit trust from the blockchain. And okay, and you look at pretty much most applications, they're all governed. Like the Solana guys like to take apart, like the Ethereum L2s and say that we have multisigs. Every Solana hub has a two of two multi ring. So this is a really significant Issue. I'm not saying this to make light of this fact. I actually like, I'm very concerned that this is what we're doing because at the end of the day I ask myself like, why not have a 13 node network to run like eigenlayer than have like this million node Ethereum to run it.
00:53:27.413 - 00:54:30.991, Speaker A: What are we actually getting? Okay, on the other side, I think it is not sufficient to say that you have to be immutable in order to inherit the trust model. Because as we expand from narrow simple applications like Uniswap, you know, swap these two things. Two I want to build an Uber on chain, right? How are you going to write an immutable Uber contract on chain? It's insane. So we need to come up with fundamentally like better architectures of these chains where for example, as I push a new upgrade to my, as an app builder I make certain commitments before like I won't take more than 5% take rate and then if I push an upgrade it has a lag and within that lag if the upgrade satisfies that my previous commitments it goes through, but if it doesn't, it should not go through. Like these are new mechanics that we need to actually endow application builders with a higher level of trust from the underlying layer.
00:54:31.103 - 00:55:06.955, Speaker B: Yep, this is exactly, this is exactly why we built our validation library the way that we did. In that you could think of it as anytime we publish something new, there's a time lock and people move over at that point in time. But the way that we've built it is people can auto upgrade always or they can be fixed on the other and they can only opt into new upgrade. If you think about this, we do it specifically for the way that validation happens is only a piece of the system. That's not. I mean each of those libraries individually are immutable, but we can always add only. So it's append only library.
00:55:06.955 - 00:56:05.011, Speaker B: But you can think about it as a broader application. So you talk an Uber or anything else where you have all of these components that are written in just like any real application and a lot of code, a lot of contracts, a lot of systems that are interacting with each other and you have the ability to always push a new version. And there's two questions in that design. One, what does upgrade process? So maybe it's like you said, maybe it's a time lock window. It's like, hey, everyone's going to be able to observe this for X period of time and at the end of that, as long as it doesn't break any of our constraints or our guarantees, our invariant, then that is sort of auto moved and the other is that the same thing? But anybody can reconstruct the application on an older version and that's the question that becomes if you can guarantee you won't break any invariant, then you may like in layer zero. We did it because we said we can publish a new validation library that's malicious, that has fees to bajillion. We publish whatever we want.
00:56:05.011 - 00:56:54.645, Speaker B: So if we can remove all of the others and then this is the only one, then everybody must opt into it or go away. So if we had a way to say we can never have this much more of a fear, we can never do this. If you can provide those invariants and guarantee them, then you may not need it for us. You can think of it as a long chain and if there's a bunch of them, anybody can select any subset of those and then it's up to them, their front end, their interface to like, okay, I'm gonna make these components work. And maybe the primary application only uses the sort of head of this entire system. But if you can't do that, then if you can't provide that guarantee, then I think it's very important to keep the whole chain and allow people to kind of construct whatever they want out of those various sets. But I think as a design paradigm, this pattern is the way to move from sure immutability.
00:56:54.645 - 00:57:08.845, Speaker B: Every app can never introduce anything new and must exist this way to ever to like, hey, we're going to give you a guarantee on each individual component and we can add as much new and upgrade as much as we want and do all of that, but you don't lose the guarantees that you have.
00:57:08.885 - 00:57:54.491, Speaker A: Yeah, I promise. And this is the pathway from like one if there were multiple options, then one issue that happens is the application is now making the choice. And then you ask, oh, is the application making the choice or is the user making the choice? Because that's like the ultimate source of agency. What happens. We've thought a lot about this kind of governance binding problem. And the problem is that sometimes what happens is each application you can think of as operating on a certain horizon, time horizon. And imagine you and I enter into like a prediction market bet on the US elections.
00:57:54.491 - 00:58:39.111, Speaker A: So now we are immutably bound into this contract over a three month period. Now if the upgrade lag is two weeks, that's not enough time for me to disentangle my position and get out of it. And then one of our guiding light Is I would say perpetual commitments, commitments that just hold perpetually. And why do we need this? Because if you want to build humanities coordination engine, we should be able to do all kinds of interesting things over long timescales. I'll just give you one example I'm really excited about. In a 10 year to 30 year period funding education. Like, you know, this is one of the biggest problems in America today, like a trillion dollar college debt crisis.
00:58:39.111 - 00:59:06.245, Speaker A: And part of this is because education is funded on a debt model. And if you think about it, neither layer 0 nor Eigenlayer will be here. If we had to get funded on a debt model, we got funded because we are on an equity model. Investors say, I'm taking a percentage of this company. If it does well, we're going to do well. Hopefully iGen and Layer 0 do well. But if not, there are other ones I'm going to make up from.
00:59:06.245 - 01:00:08.953, Speaker A: And the set of things that are fundable on a purely debt basis, with the set of things that can be funded on an equity basis, much, much larger. Why shouldn't we fund education on an equity basis that I actually invest in you and earn future income from your entire lifetime? So now we are talking about entering into a contract which holds for like 100 years or if the longevity folks are right, forever. So we are talking about perpetual commitments. And for us to think of like crypto as the coordination substrate, we need to be able to bind ourselves into perpetual agreements that hold on these really long time horizons. The first application that I was actually like interested in was using crypto and blockchains as land records. I know it's talking to the Indian government, all these types of people, because you see a lot of corruption in India on these land records. You think this is your land and then you'll go and see somebody else as the registration certificate for it.
01:00:08.953 - 01:00:51.561, Speaker A: And so these kinds of things. But then I realized that actually if you want to put a land record on chain, the temporal rigidity of this system should be 100 years. Otherwise I'm not moving my records on this new chain. So how do we build these systems? I'm not proposing a solution here, but I'm just pointing out as a space, if we want to actually solve these problems of perpetual credible commitments, we need to actually solve that. The underlying rails, not only like the base layer, every other layer built on top is able to make commitments and invariants that they cannot violate. And so that's what we're really hoping to build. This is super exciting.
01:00:51.561 - 01:01:03.617, Speaker A: And like we uncovered so many points of, like, alignment on a philosophical basis, even if the words that we have been using to describe it are very different. Thank you so much, man. Really excited.
01:01:03.761 - 01:01:04.025, Speaker B: Pleasure.
