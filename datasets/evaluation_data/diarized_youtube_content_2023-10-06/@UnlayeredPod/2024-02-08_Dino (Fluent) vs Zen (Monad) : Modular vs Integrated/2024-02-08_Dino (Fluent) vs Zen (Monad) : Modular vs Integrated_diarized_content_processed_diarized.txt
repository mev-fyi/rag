00:00:13.130 - 00:01:03.882, Speaker A: Welcome to Unlayered. I'm your host, Saul, and joined by one of our crowd favorites, Zen Llama, who's a Devrel for Monad Labs. And our guest today is Dino, co founder of Fluent Labs. Now, today's a bit of a different episode, and I think the motivation here is to host a conversation where Zen and Dino have had on Twitter for a long time. And it really distills down to modular versus whatever you want to call it, monolithic or integrated architectures that are kind of like at polar opposites here. And one interesting tweet I saw that's kind of tangential to all this last night that I believe either fluent or Dino retweeted recently is this idea of alt VMs and the AltVM thesis. And the tweet, which is put out by a guy named Andy, breaks it down five key, I guess, architectures for AltVMs.
00:01:03.882 - 00:01:47.054, Speaker A: The first is Linux risk four with the key project, one of them being Cortesi. The second is the move VM and movement labs and Aptos and Sui. The third is the SVM, which is what this pod has been focused on the most with Salada and then roll ups building on the SVM, like eclipse. Then there's parallelized EVMs that are using different techniques like say, and going for optimistic parallelization versus deterministic. And then finally we have this fifth category, webassembly or ZK WaSM VM. That's where fluent fits in. And that's something that I personally haven't dug super deep into, but is getting a lot more traction these days.
00:01:47.054 - 00:02:10.486, Speaker A: A lot more interest. And I think for anyone that is not unfamiliar with that approach, this is going to be a great episode for you. So with that being said, I think there's certainly a lot of terms that are always thrown out here whenever people bring up these topics. Let's start first with each of Zen and Dino defining what does modular and what does monolithic mean.
00:02:10.668 - 00:03:01.334, Speaker B: Well, first off, thanks for having me, guys. Definitely a big fan of this pod and also a big fan of arguing with Zen on Twitter. And I'm glad we get to do it live. So I guess I can kick it off modular to me and I'll answer for the modular side. Modular to me means a couple things, and I'm sure we'll get into more of the technical parts of it. So I'll just start off almost like highest level to me it means like specialization. That's one thing that comes to mind, where it's really just almost like philosophically, just like you have these loosely coupled services or loosely coupled teams or both that are really focusing on what they do best, like their unique value proposition and then kind of outsourcing the rest of it.
00:03:01.334 - 00:03:31.870, Speaker B: And then the other thing that comes to mind immediately is choice, where what that ends up giving, whether it's like the developer as a user or the end user, ultimately are just like the choice to pick whatever works best for them, the best tool for the task, or ultimately the best user experience because of this intense competition you're fostering. So that's kind of the way, I guess it resonates with me at the highest levels. I'll ping it to Zen and then we can go deeper.
00:03:32.790 - 00:04:28.274, Speaker C: Yeah. For me, I like the description of it being loosely coupled because I think monolithic is tightly coupled, essentially. And the way I see that is I think you can still have a modular software architecture and still be like a monolithic chain or an integrated chain. And I think it's more about the fact that on the boundaries of those things where in a modular system they're loosely defined, kind of like, I don't know how to call it, like schema that you have to follow to be part of the system. In monolithic systems, I think that interface is just much more tightly defined. And so you can't really plug anything in. It's like, okay, it has to conform to this set of standards and ways of talking to each other.
00:04:28.274 - 00:05:07.120, Speaker C: But what that also does is it kind of removes the overhead of checks where in a monolithic system, I think you can just basically talk because you're making assumptions about the way different pieces of the system are connected. In a modular system, I think you have to kind of like, oh, is this the right protocol? Is it talking to me the right way? And then you can start talking. So that's kind of where I see the difference. I think you can still have a modular internal software architecture, right. But I think it's really that coupling piece between different parts of that and how hot swappable it is, basically.
00:05:09.250 - 00:05:35.270, Speaker A: Are there analogies you guys can make, by the way, maybe outside of crypto, that illustrates the difference here between modular and monolithic. Call it scaling approaches or software architectures. I think, for instance, one I've heard before is like microservices on AWS or these cloud providers, and then the integrated approach would be like how Apple does hardware. Is that kind of an apt comparison?
00:05:36.090 - 00:06:53.746, Speaker B: Definitely. I think this is what Zen and I will go back and forth on plenty and kind of is to the extent that there's kind of a different lens we're both looking through. It's probably shaped by both of our backgrounds in those respective areas. I'm coming from kind of like cloud infrastructure and SaaS and stuff like that before crypto, right? So I paid very close attention to how kind of like the cloud, like the container wars played out, for example. It's just like, okay, why is this thing like Docker catching on? And why is this thing Kubernetes beating out Docker swarm and mesosphere and all this other stuff and kind of like studying, okay, how much do people care about performance and cost optimization and cloud environments and all that kind of stuff? And that five or six years worth of that just definitely shaped kind of my thinking coming into the crypto space. And obviously, Zen, I know you have the exact opposite background, which kind of like tightly integrated high performance system. So it makes perfect sense, right? It's just a matter of these lines are fuzzy at the end of the day, and it just depends on kind of like, I guess, your mental model of how the systems need to work, obviously, but then also your mental model, which is another thing we can talk about of what the use cases might end up looking like.
00:06:53.746 - 00:07:47.358, Speaker B: Because what I've noticed in conversations with folks like Zen and others in kind of more of the monolithic or integrated cam is often, I'll find that we have kind of different use cases in mind as we're having these conversations too. So we can get to all this as well. But I do see the parallels, just personally with kind of the microservices environment. My mental model for blockchains, there's definitely more developer platform than it is kind of like end user platform. Even though blockchains are very interesting because they are both. If you look at all the cloud infrastructure and stuff like that, you're not arguing whether or not AwS like EC Two is like a developer consumer interfacing thing. It's a developer interfacing thing, period.
00:07:47.358 - 00:08:52.178, Speaker B: But blockchains are kind of interesting because they're like developer platforms, but they're also kind of end user platforms in a way. So it's like this weird blend that maybe cuts to the core of why sometimes we see these things differently. Because if you're looking at it through the end user platform, you're like, okay, you start to think more like Apple, right? You start to think more tightly integrated. The experience, this thing is polished as hell. And then if you think more of kind of like developer platform for building blocks and all that, and a developer is perfectly fine piecing together like ten to 15 different tools to make their application work, because that's what they've done for the past 20 years in the cloud. As the microservices architecture has developed, they can handle the complexity. They're more interested in optimizing the best possible experience for their application, even if it involves reading a few more docs pages and then abstracting everything from the end user so they don't have to think about that behind the scenes.
00:08:52.178 - 00:09:10.426, Speaker B: So it's just coming at it from almost like different mental models at least. So the cloud, just answer your question. The microservices analogy, I guess, resonates most with me and we can kind of break that down in different ways. But that's probably like what I would.
00:09:10.448 - 00:09:49.110, Speaker A: Say, right, let me stick a comment in there and then you can kind of describe your background a bit and your perspective on all that. But that kind of resonates with me. As just a developer building applications, I feel the pain of just having all these choices of what to use from the cloud side, from AWS. There's literally like competing products that are all built by AWS itself. Like for messaging queue, you go with SQs, you go with more complex one. I don't know what to choose. And then what you end up having is this world where aggregation layers like superbase come out and they have opinionated views on each part of the stack, the database, the queue, so on and so forth.
00:09:49.110 - 00:10:26.050, Speaker A: And then developers flock to that because they don't have to think as much. And it's all integrated in one kind of product that you pay for in one shot. And I kind of see this playing out in crypto in a way where you have like roll up as a service and you have this ability to kind of build on top of other blockchains that have taken opinionated views precisely because it is really hard to make a gazillion decisions when all you want to do is build an application. It's just funny how that's happened before on the software side, pre crypto, and in some way we might be seeing it play out again. But Zen, please go into your background.
00:10:26.630 - 00:11:30.122, Speaker C: Well, I guess I'll just riff off there and then go into. What I was going to say is that I just do think that the profile of a dev who wants to build an app and the profile of a dev who wants to piece infrastructure pieces together are just like two different devs, right? There's kind of a reason we have backend devs and then front end devs. And so I just think that the app developers don't want to think about all that stuff, right? Whereas the infrastructure people may. And so my background is just from low level hardware systems. So I used to work on Apple AirPods and embedded DSP and stuff. And really it's informed from looking at kind of the M series chips that Apple's put out. And for a long time the thought was, hey, we can have these discrete components on the chip, optimize the best GPU with the best piece of RAM, and then the best neural card or whatever, right? And they'll all connect it and it'll be great.
00:11:30.122 - 00:12:53.534, Speaker C: But then what ended up happening is you kind of hit a plateau in computing, because the thing that was actually bottlenecking everything was like the PCI lanes, the actual communication buses between everything. And so even though each one of these individual components could work, honestly, just sending data back and forth was like we hadn't seen a significant increase in computing in the longest time. Sure, you can add more cores and get more lanes, but it didn't really ten X, right? The M series chip was this radical design of, hey, let's put everything on a colocated platform and you immediately got a ten X improved performance, because things can just literally talk to each other on the same chip. And so my worldview is just informed from that kind of side of how hardware has developed. And also just thinking of essentially, in my mind, you want to optimize for the base level of atomic operation first before you would split things up. And so what that means to me is in a blockchain, my mental model is that the base atomic unit of interacting with it is a transaction. And to make a transaction, you need to go through the different parts of the modular stack.
00:12:53.534 - 00:14:00.570, Speaker C: You have to have DA, you have to have compute, like execution, you have to do consensus. And so the way I look at it is like, okay, well, even though cloud architecture did develop to have different services, each one of these is still a full form computer first. You can do its atomic unit of operation first. And so for me, it feels a little premature to go down the modular part because the atomic operation of a blockchain, the reason you would do it is to make a transaction. And so in my mind, you optimize for that first. And then I actually do see the app chain thesis, like having actually a lot of validity in the long term, right? Because in my mind, it envisions as, oh, we figure out the proper way to build the atomic unit, like the computer that does the transaction, and then those will be split off into separate ones and just have connections between them. That's kind of where I feel like my background comes in, where we're at with all this as we watch things evolve.
00:14:01.550 - 00:15:10.702, Speaker B: It's super interesting because I guess my vantage point, I get that too, right? I could definitely kind of shift into that line of thinking, and I think it's perfectly valid to be like, okay, naturally you optimize this first thing and then once you break past those limitations, then you kind of build on it. And that all makes sense. But I would say my observations from kind of like the cloud era, I think have actually showed a little bit different. I think if there's anything that the cloud era has taught me, it's that for the vast majority of use cases, there is kind of a good enough component to performance and cost optimization. I don't necessarily think that the way applications have been built in the cloud over years has been like, let's optimize everything bottom to top. I think that the past ten to 20 years of cloud has been largely very wasteful computing. And people leave stuff on in the cloud all the time.
00:15:10.702 - 00:15:50.666, Speaker B: If you try to get somebody to switch, try to get a developer to switch from an Aws to some other cloud because it'll save them money, they'll be like, no, there's all this other shit that I really care about. I care about the network effects more. They might not say that, but that's the reality. And then even within a given cloud, right, like take a Kubernetes cluster with like 100 nodes and then try to sell somebody a different type of container scheduler that does more intelligent placement of workloads or something like that. They'll be like, no, I'm not going to do that. I don't care enough. And also try to sell somebody something that I don't know more efficiently, even shuts down resources and stuff like that.
00:15:50.666 - 00:16:38.250, Speaker B: I mean, now granted people are starting to care about it because of AI is just so outrageous that clearly you have to, there is a certain class of applications where performance and cost optimization make enough sense for everybody to care and kind of change their behavior. But what I've noticed in the cloud is for the majority of cases, that's not true. And so I guess I'm curious to get your thoughts on that because you probably have, like, I'm sure you have kind of a different way of looking at that, but that's at least my, I'll actually say scarring even from the past years in cloud because I was definitely involved in some of those types of projects, right? That's like, hey, these are better ways to do it, smarter ways to optimize things. And people are like, I don't care. And so that's been my observation. I'm curious how you might see that differently.
00:16:39.070 - 00:17:38.480, Speaker C: Yeah, so two things. The first is that I almost feel like your description kind of proves my point in the sense that once the computer is optimized to a level of usability, the marginal benefit of one modular component isn't going to make that much of a difference. Right. And so in the world that you're talking about, I feel like cloud computing is mature enough to where a base level of compute has already been achieved. You know what I mean? And so a 10% increase you're facing, oh, do I want to deal with the dev x of swapping it out and all that stuff? But I don't feel like blockchains are that mature yet. I feel like we're still at the point where that base level of compute is something we haven't hit to do something useful on a blockchain at scale, you can't stream video on a blockchain. It's not happening.
00:17:38.480 - 00:18:37.774, Speaker C: The data rates are extremely high, whereas you can do that on a cloud server. And so I think the difference to me, it's almost like a maturity of the industry. And I feel like we haven't solved the fundamental make the transaction fast problem first before you can get certain properties out of your transaction if you use this system versus another. So my background is not cloud, but my understanding is one of the ways to make things fast in cloud is called like edge compute. And it essentially is like pushing all the really intense compute things to an environment where its resources are local and it can operate on the edge quickly to compute something and then come back to the network. Right? And so in my mind, that's the principle is like colocality. That's how you get speed.
00:18:37.774 - 00:18:49.670, Speaker C: So even in a network, you push it to the edges, do the fast thing, and then come back. And in my mind, that kind of proves the point. It's like if you want performance, you have to have colocality.
00:18:50.170 - 00:18:52.818, Speaker B: Well, I'm actually glad you brought up edge compute.
00:18:52.914 - 00:18:54.466, Speaker C: I've spent some time working on edge.
00:18:54.498 - 00:19:59.162, Speaker B: Compute in the past, and there was maybe a time, maybe like five plus years ago at this point where edge compute was actually like a really big web two narrative. You started to see a lot of people trying to run experiments. I remember at one point, the Chickfila dev team set up a bunch of, honestly, my memory is not serving here, but maybe it was like a bunch of raspberry PiS or something like that in a thousand chick fil a stores, and they were running like little Kubernetes clusters and they're saying, hey, let's push everything out there. And there was a lot of momentum around it, right? Like edge computing. And I think what we found over a number of years, even working in the space personally, is that there's a good enough performance factor too. It wasn't actually worth all the optimizations to really do the theoretical edge computing for maximum performance and stuff like that. And what happened is it ended up being good enough, cost and performance wise to just move the cloud out a little bit.
00:19:59.162 - 00:20:48.938, Speaker B: So data centers were just like a little bit closer to the edge versus actually optimizing the hell out of the performance at the edge. Fundamentally, I guess my view is even that was just not worth the extra effort for performance optimization. And that kind of circles back to what I was about to get into before. I'm just thinking of the right example is just take your base case application in the cloud, whether it's some kind of SaaS app or whatever, just picture any app that you'll use on a daily basis. We deal with a little bit of, it's not all highly, highly performant in the grand scheme of things. Most of these are operating in good enough performance. Yeah, you can probably make it.
00:20:48.938 - 00:21:26.200, Speaker B: So if you optimize the whole system perfectly, you could probably make it. So every click on my computer was just like instant reaction. But you know what? I wait like half a second for notion to load and it's fine, and all the pieces work together and the network effects are just so powerful that it's like, what are you going to do? Is notion really going to start their own data center and do with all the edge clusters and stuff? No, they're like, it's fine. And honestly, that's kind of how I see a lot of these blockchain use cases. Frankly. Granted, there's definitely a class of applications that require super low latency. And honestly, I think the integrated systems are way better for that.
00:21:26.200 - 00:21:42.480, Speaker B: I truly do ultra fast finality, super low latency. But for things that are like, I just think a lot of use cases are kind of okay to just be asynchronously composable. And it's like, okay things wait a second to call other things.
00:21:48.610 - 00:22:40.938, Speaker C: I feel like when I squint, I do believe this, right? But for me, it's like we're just not there yet. The different pieces, like if you were to wait for the things to synchronize, we're at seconds orders. And so in a world where roll ups get settlement, asynchronous synchronization times down to subseconds. I'm like, you know what? That probably is good enough, right? It probably is. You can probably build pretty good ux applications and user facing things and build shim layers on top of it to where the developer doesn't feel a lot of that pain. I think where we're at today is not quite there yet. And the way that I'm looking at the industry evolve is to get a lot of those systems to become that performant.
00:22:40.938 - 00:23:01.750, Speaker C: You end up having to kind of merge architectures, right? Start doing aggregation layers and stuff that start introducing components of colloquiality to make things fast, right? And so, yeah, that's where I do kind of see them converging oddly. And maybe we can get into later stage.
00:23:02.570 - 00:23:02.982, Speaker B: How?
00:23:03.036 - 00:23:11.980, Speaker C: Let's see, architectures do kind of converge at the edges if you really get into the nitty gritty of it. But yeah, maybe we can get into that later.
00:23:13.070 - 00:24:16.160, Speaker A: I have a quick question, actually, I guess for dino, which is to say, in a world where we can abstract away these roll ups or whatever you want to call the modular pieces of the stack, are you concerned at all about just the fact that these are all different teams that are, they raise VC in many cases. They're trying to build a business and dominate the market, a world where they're antagonistic to each other. And that would actually slow down the rate at which we converge at some set of standards or just a way to interoperate. And I always hear this now whenever I'm just happy hours or things like that, people are like, Celestia is going to compete with ETH and take over ETH, or same with Eigen layer. And I just find it hard to believe that we're all going to just hold hands at the end of the day and let this entire giant system of modular pieces communicate with each other without a hitch, when in fact one could, if they had a great market position, find ways to maintain that and prevent other developers from plugging into it. How do you respond to all that?
00:24:18.130 - 00:25:09.934, Speaker B: It's a great question. I think that is definitely like a big open question. I think, again, my mentality is shaped by how some of the open source projects have competed in the cloud so far, because it's not much different. Right. If you take any given component of the cloud native stack, whether it's monitoring or observability tools, there's like ten. And then if there's different types of runtimes, ten to 20 of them, and it's like, okay, how did that play out? And I think that what you find is that, yeah, within each different module there is competition and it can get pretty intense. And I guess I just don't see that as necessarily like a bad thing.
00:25:09.934 - 00:25:53.990, Speaker B: And I also, by the way, don't see it as a bad thing if there's a power law, if one kind of wins out for the majority of cases, this might be like a hot take. I know when I say this to a lot of people, even in the modular universe, they're like, oh, that's bad. It has to be more decentralized. And honestly, that's just not how the world works. I think that people, the ease of use part of it does play a big role where, yeah, look, kind of what I was saying with the Kubernetes thing. Yeah, you know what, there might be a power law, 80% of cases might be won out over time by one stack or one standard, let's say. But the beauty in my opinion of blockchain is that the friction to exit is minimal.
00:25:53.990 - 00:27:14.422, Speaker B: So there's always that check and balance where even if something wins out the 80% of use cases, and again, this is just for picture, like one of the modules, like one solution out of 20, as one of the modules wins out for 80% of the use cases or something like that, it's still number one. The frictionless exit makes it that much less likely that that one player fucks with anything because they know that there is that check and balance. And then worst case scenario, there's an easy exit to kind of like the number two is fast on their tail because it's all open source and there are many options, all competing. I don't disagree that that's kind of how it plays out. And there's definitely a more cynical way to look at that as like, oh wow, so you're saying there's centralization over here and over there and the reality is, yes, that's kind of what happens. The same way, by the way, that any open source tech, whether it's web two or web3, take spark is open source, right? Like kind of like data processing engine. But guess who 90% to 95% of the code is being written by? It's the data bricks guys.
00:27:14.422 - 00:27:21.834, Speaker B: That's just how it works. It doesn't matter if it's web two or web3. And I don't think that will change, but I also don't think it's that.
00:27:21.872 - 00:28:15.260, Speaker C: Bad of a thing. I think you make a good point in the sense that I think it's easier to stay nimble and stay on the cutting edge in a modular system, right, because you do only have to be the best at doing one thing, right. And so if there's an advance in some part of even the hardware stack, that would disproportionately make your solution better than everyone else. It is easier to have that competition locally than in a monolithic system where they would have implications on the rest of the system. Ideally, right? Like these modular systems would be built in a way to where components are hot swappable. But that's just not the way monolithic software is typically written in the long tail just because of technical debt and stuff.
00:28:18.750 - 00:29:25.242, Speaker B: That's my biggest concern, honestly, with the integrated or monolithic systems. And I'm curious to get your guys'thoughts on this. It seems like my head, the biggest bottleneck for those types of systems in the longer term is having to enshrine all the innovation. It just seems like from a social standpoint and from a tech debt standpoint, as you mentioned, that gets really hard, especially as the social standpoint when it comes to there's just more ideas than the amount of ideas that would need to be experimented with or enshrined are just like. That doesn't make sense over time, as more kind of people get involved and more use cases are being served. But then also the pressure, at the same time, the opposing pressure to ossify the system just seems like after some point 510, 15 years down the line, there's too much pressure to not change things. Then you can't keep up on the innovation side.
00:29:25.242 - 00:29:29.170, Speaker B: How do you guys think about that friction?
00:29:29.830 - 00:30:53.360, Speaker C: I think it's kind of a delicate, like, maybe I'll use Solana and Monet as examples. Because Solana is designed in a very one system thing, right? And so you do see other client teams now, but they're like very highly pedigreed client teams who can do this stuff, and there's not going to be a lot of them, but they have the social structure of Linux, right, to where as long as it conforms to these protocol rules. And we're seeing this now with the split out of Anza from Solana Labs is like the fire dancer team does not agree with all the ways that Anza or the labs team wants to do something, but they agree on the protocol, right? And so yeah, it is this kind of Linux based community where they're fine with always maintaining it and having high pedigree teams that have to do this. And so there's probably less teams that are going to do it, but the ones that do are ready to take on the whole task. Now the way Ethereum design is designed is like there's an execution client and a consensus client. And the way monitor is designed is kind of similar. You actually could just design a new consensus engine in the way that we built our software stack and just swap it out.
00:30:53.360 - 00:31:12.100, Speaker C: And so I think that was a kind of upfront decision and how our software stack was defined. Right. I feel like it is possible to do that. Right. It just kind of takes some forethought and I don't know how many change did that ahead of time. Right.
00:31:16.010 - 00:31:54.160, Speaker A: It's a valid concern. Just look at Ethereum's roadmap and that kind of answers your question. It's almost like self referencing at some point where that base layer is ultimately the bottleneck. How quickly you can innovate on that is a big deal as it gets more important from an economic standpoint, from the size of the team, what have you. Now there's five clients or whatever on Solana, it gets really hard to enshrine those new advances. It gets a lot slower, a lot more different stakeholders need to opine on it and come to some sort of consensus. We're going to see this story play out every single time.
00:31:54.160 - 00:32:44.560, Speaker A: All these new alt VMs that are coming out, they can move really fast and kind of enshrine it from day one when it first launches at Mainet. Then when they get used, they're going to have the same problem. Because if they want to decentralize and get more robust as a system, they will by definition have to slow down or decentralize the ability to do that. And so the question to me at least is what is good enough? If you were to grab this on a curve, maybe the first alt l one gets massive gains and everyone after that is very iterative. And smaller gains, which one will hit escape velocity, get the right amount of users and be good enough that once things do get decentralized, they can still innovate fast enough to meet global demand. And I don't know the answer to that. Solana perhaps is the one that does it.
00:32:44.560 - 00:32:56.450, Speaker A: We can't anoint them as the winner, right? We just don't know how it'll handle millions or billions of people using it. But to me that feels like the questioning, because I think this will happen with every ecosystem.
00:32:57.910 - 00:33:07.480, Speaker C: Yeah, I think it's a bit of a timing thing. Right. I think if any of these systems get to the point where it's good enough, it's just going to win.
00:33:09.630 - 00:33:53.142, Speaker B: Yeah, I don't necessarily disagree with that. I think that so much of this is social that that's probably right. You can change the code of. You can change all the code. Obviously, Ethereum could crank up the data throughput, so could Celesia and also whatever Solana can have roll ups built on it, all that kind of stuff. So a lot of it is just like a social phenomenon, clearly. But I also, by the, from, from a technical standpoint, you say global, like maybe that means different things to different people.
00:33:53.142 - 00:34:42.306, Speaker B: And I think it really does depend on how you see blockchains being used. I am probably maybe even just too optimistic of so many things moving on chain and just developers always pushing the boundaries of what's possible on this stuff to all types of use cases. I know a lot of people in the industry right now don't see that, or like, I could be wrong, by the way. So it's not like I see something they don't. So they look at it more as just from the financial side of things and saying, okay, this is good for just things that need strict global consensus. Like if you look at kind of like Polynia or some people who have that take of like, okay, there's identity and there's like money things, I'm like, that's it. And then there's other people who just think the world is going to kind of move on chain.
00:34:42.306 - 00:34:49.240, Speaker B: Where do you guys fall and how does that affect your idea of what serving kind of like global needs?
00:34:49.850 - 00:35:35.400, Speaker A: I can start off here, actually, because I thought about this decent amount and I think. So that view, by the way, where another one is just that only things that are financial in nature, trading in nature, should be on chain. That's a view I think Tushar, when he was on our show, expressed Tushar and Kyle from multicoin. So where I sit in all this is, I tend to agree with that framework just based on what I've seen so far. So crypto has been out for ten years plus at this point, depending on when you think bitcoin is relevant, let's call it 2014 or 15, whenever ETH kind of came out. Here we are ten years later. What has PMF exchanges, DFI, NFt, sort of.
00:35:35.400 - 00:36:39.398, Speaker A: And the only reason NFTs are interesting to people is precisely because there is a speculation trading aspect to them. And so we can. I don't think it makes sense to put everything on chain. And as someone building an intersection of social sphere and crypto rails and studying these experiments like forecaster and lens really deeply, it is not clear to me that we should be putting things like social posts on chain, for instance. It's not clear to me that there's demand for things like social graphs and decentralizing and making them portable and putting whatever arbitrary front end on top of it, because the incentives as a developer get all very weird very quickly, and it just ends up looking like this hobbyist homebrew, kind of like open source combination of just random applications that build on top of farcaster, for instance. Do I see 10 million gen Zers using that? Absolutely not. There is something to aggregation, there is something to curation.
00:36:39.398 - 00:37:15.330, Speaker A: Those are the actual problems that people have in life. It's not that I want to move my following from one platform to another. I don't really care. My problem is there's too much noise in this world, too much chaos, too much randomness. Can you give me an opinionated view on it? That's what TikTok does with this recommender system. And can you find me, my tribe of other people that find jokes in this category funny or this kind of topic or interest useful? And so that's all AI, right? And crypto can actually enhance those applications, by the way, by creating incentives around user behaviors that improves the software. But my point is, the meat and bones of that thing is completely off chain.
00:37:15.330 - 00:38:01.174, Speaker A: And so I think crypto will be huge role in the future of the Internet, and it'll be symbiotic with advancements like AI. And I think that TAm and that market is gigantic. And just the payment side of things, just the financializing different instruments and putting them on chain instead of databases, I think that's a gigantic amount of transaction volume that will be needed to support all that. We're talking billions and billions. What I'm trying to say is, yes, I believe it'll mostly just be financial type of things that'll kind of sit adjacent to the software that's happening, but that's also a huge market, and that's a paradigm changer. But I'll let Zen go, too.
00:38:01.292 - 00:39:44.402, Speaker C: Yeah, I think we're kind of actually seeing this in the long tail of blockchain architectures, in the sense that everything can't be on chain, because when you get high throughput systems, there's a level of data that it's like you start questioning what is the application like, the use of the blockchain? Is it to store everything forever or is it to attest to something, right? And I think that's where, especially with these high throughput chains, I think there was a lot of, in the early days, decentralized the oracle, decentralized the RBC, decentralized the front end, decentralize everything. And I don't think that makes a lot of sense because when you start doing that, you have replicated copies of everything everywhere and it just gets to be too much data and you start questioning, okay, why am I using this over a web two system where they share data in one place? And then at least with the historical problem with blockchains, it's like, wait, no, but the use of a blockchain is this verifiability and this attestation layer, right? And so I think we're seeing this now with a lot of things. It's like, I don't really care if the RPC is decentralized. I care if it can verify its data against the chain quickly, right. And then it's fine if you store it in centralized way, you serve it up, you have sappy front ends. But I think it just really shows that what is the useful thing to do on a blockchain? It's like this shared trust layer, this attestation layer. And I think things where that is very useful right now, it's very clear that's like money and monetary useful applications.
00:39:44.402 - 00:40:51.094, Speaker C: And I think we're just not in a point where AI, I think forces the issue. It's like all of a sudden things need to be stamped with attestations, right? Something as simple as Samsung has a trusted execution environment in their cameras. And when you take a picture, it has the Samsung signature and then post it to a blockchain. So if you ever post that picture, right, there's like a verification that maybe you can't tell if it's fake or not, but you can tell it came from a physical device versus like an AI making it, right. And so I think AI forces a way to where this attestation problem becomes a fundamental thing that we just actually need to solve to not have AIs rule the world. Right? That's where I'm like, okay, yeah, I think there are a lot more use cases of blockchains, but it requires us to enter a zeitgeist that the issue hasn't been forced yet in the way that technology operates today. And I think this is very apparent in payments, right? It's like to get payments on the blockchain.
00:40:51.094 - 00:41:06.340, Speaker C: It's not really a problem of the blockchain being better. It's the thing that what we have today is pretty good and people are pretty happy with it. And so the marginal benefit of blockchain just isn't super straight in your face right now.
00:41:06.710 - 00:41:07.460, Speaker B: Yeah.
00:41:09.430 - 00:41:10.290, Speaker C: I see it.
00:41:10.360 - 00:41:22.406, Speaker B: Not too dissimilar. I definitely think that the demand for blockbase is super elastic. I do think that people end up just dumping more things on chain as it becomes reasonable enough to do it.
00:41:22.508 - 00:41:24.306, Speaker C: We've seen inscriptions.
00:41:24.498 - 00:42:07.490, Speaker B: Yeah, exactly. And so I guess more of what I would emphasize are just like the range of use cases. I'm definitely super bullish on just it being useful for all types of things, but not necessarily that all of that data will go on blockchain. I mean, that also prompts a really good point of how do you define something being on chain? I use the term pretty loosely. I think that something that is just verifiable, compute, that's kind of like settling or whatever, on a chain. I look at that as like on chain. If it's like inheriting the properties we care about a blockchain, I'll just call it on chain.
00:42:07.490 - 00:42:45.550, Speaker B: So just keep that in mind. I do kind of look at, this is why I'm personally fascinated with roll ups and some of these other constructions, because I kind of look at it as just like servers with superpowers. Basically. It's just like, okay, well, even if it's just some type of computation that you want to make sure that everybody else wants to make sure is verifiable and it's kind of cheap enough to do it by just whatever, sending some proofs and data and stuff on a very reliable source of truth or whatever you call it. Root of trust, then, which I actually like.
00:42:45.620 - 00:42:46.240, Speaker C: Yes.
00:42:46.790 - 00:43:53.042, Speaker B: Then I think that is a very valuable thing. And you can call that off chain, or you can call that on chain. I call it on chain. But I think these superpowers are really compelling for people to actually trust a system, even if it's not financial at all, even if it's really just to get that verifiability or that peace of mind, especially in kind of like an AI based world. So I don't know, I think that there's some of that that I think that'll just be like a default way of doing things. If you have a certain system, financial or not financial, some rules or logic that is going to interact with people and with other systems, I think that it'll almost be like an expectation over time that it has some type of verifiability to it, because otherwise it's like, wait, what are you doing? What are you doing back there in that server? Things get cheap enough. I think that's just the new type of database that will essentially come into popularity.
00:43:53.042 - 00:44:28.660, Speaker B: But there's that piece of it. Then there's also just more focus on the use case side of things. Sal, you mentioned optimizing based on your tribe or something like that before, and I think that's exactly how I see it, which is to me a really bullcase for all sorts of things being to some degree put on chain. Like, even look at Farcaster, I think they're executing on it like the absolute best that I've seen so far, where you do kind of have the core protocol and they don't put everything on chain. Like, they put very minimal on chain. They literally call it sufficiently decentralized. And I think that's a good approach for now.
00:44:28.660 - 00:45:37.314, Speaker B: But then what you start to see is all of these competition for different clients and stuff like that, and each of those clients can be optimized for different audiences. Clearly, Warpcast right now is like, I don't know if it's still the dominant one, probably it's the one I use, and it's the one I hear about most office, maybe because I'm following Dan and the Farcaster team, but either way, they are obviously optimizing the thing. For crypto natives. If you write GM, the like button literally turns into a GM. So, I mean, small things like that, I think will end up going a really long way as far as customizing front ends and application experiences for different user groups. And so I do think you take, in my opinion, take any given application experience, there's kind of like a core back end part, like the core rules of the thing, whether it's just the rules of the unique identifiers for people, or whether it's more of the rules of the system that just get put on chain. And then the front ends are all kind of like tailored towards different audiences.
00:45:37.314 - 00:46:11.300, Speaker B: I mean, I could see that experience applying to everything, frankly. And whether the customizations are like crypto natives versus not crypto natives, or whether it's geographical, whether it's other types of psychographic things, whether it's like different points of the political spectrum where everyone's kind of using the same information that's like verifiable. The important parts are very verifiable and whatever, but whatever. The opinions can obviously vary around the source of truth, of information. And I just think that applies to everything over time.
00:46:12.870 - 00:46:54.366, Speaker C: Yeah. I think this gets away a little bit from modular versus monolithic. Yeah. Because I don't think either of those worldviews are like, I think you can do this on a modular system versus integrated systems as well, because I do agree with a lot of those things. And to Sal's point about content curation being very important, I actually think it does make curation the main product, which could be very cool. Right. Imagine if Twitter's main product was actually just curating your data in different ways.
00:46:54.366 - 00:47:15.350, Speaker C: Right. And you can actually already see that in certain aspects. And if you go to trending or news or politics. Right. It curates the politics or whatever. Now, having being able to do that with your personal preferences involved on a blockchain where you can skin it for every app, maybe it doesn't play out that way. Right.
00:47:15.350 - 00:47:27.500, Speaker C: Because of network effects being different in that scenario. Right. But I do find value in that, and I do think it will develop, whether it's on monolithic or modular. Yeah.
00:47:28.430 - 00:48:16.410, Speaker A: One comment I'll make on that, though, is personalization is at odds with open data, which, meaning the reason why your feeds are so good is because they know how much time you spend on every single piece or every single tweet, what you're bookmarking. And by definition, none of that is public because why would you want your whole browsing history public? And so how good could you possibly make a personalization engine with purely public? Whether you want to call on chain or chain adjacent? But that's essentially what forecaster is. It's chain adjacent in the sense that anyone can build on it. I'm skeptical. You can outcompete YouTube or TikTok or things like that with just stuff that people are willing to have public, which is essentially just posts and following and followers and things that are public on your profile. So, I don't know, add that in there.
00:48:16.480 - 00:48:20.650, Speaker C: Privacy is just like too far away with ux. Yeah.
00:48:20.720 - 00:49:11.600, Speaker A: I mean, it could happen where we could have a world where people are one comfortable with it, and then the primitives at the cryptography level are good enough to enable that. But again, it's this question of it's not a today thing that's like down the line thing, and then everyone's going to have all these different standards too. But that could be a solution. One topic we should get into here is maybe, and we kind of touched on it, but just like the key criticisms of each approach and each of your responses to it. So maybe we'll start with Dino here. Know there's a few points here we could get into, right. It's like, do developers really want to have all this customization, the loss of composability, the UX, and maybe the fact that you need market makers in the middle here to facilitate all these cross chain activities? How do you respond to that?
00:49:15.330 - 00:49:16.080, Speaker C: Yeah.
00:49:18.690 - 00:50:08.960, Speaker B: I don't see it, I guess, as a huge issue and this depends on the use case. So I'm going to speak just holistically, but it probably would end up making more sense to dig into specific use cases. But just generally speaking, I do have the mindset that developers are okay with dealing with extra complexity if it's going to provide the best application experience for their end users possible. And I don't necessarily see it as it's really easy to poke fun in these ten or 20 different types of each module and be like, oh my God, this is so insane. How does anybody ever think about it? And it's valid and it's funny and I'll laugh along with it too, but.
00:50:10.210 - 00:50:12.430, Speaker C: That'S exactly what I do sometimes.
00:50:12.580 - 00:50:41.162, Speaker B: Yeah. And I get it. I get it completely because it's very easy to focus on it, right, it's fine. But the reality is this isn't any different than the cloud. And you say, okay, well, in the cloud are people also this confused? How do they actually go through that decision making process? And the reality is it's much more reasonable than one would think. Let's just say for a given application, you really need five of these different modules. And so it's like, okay, so each of these five different modules, there's 20 different options.
00:50:41.162 - 00:50:41.642, Speaker B: Oh no.
00:50:41.696 - 00:50:42.054, Speaker C: Scary.
00:50:42.102 - 00:51:30.040, Speaker B: But in reality, there's like five that are relevant because they've won out over time. Two of those are very specific to certain niches and that's maybe not your niche. And then there's like two dominant ones and then there's like the up and comer and then you're like, okay, there's three to evaluate here. And I'm a developer and I'm okay with reading the docs on those three or just asking my friends and saying like, okay, this is the one in this category. And then I'll do a little bit more research in the other category. And in reality is I'm looking at five to ten different tools and just figuring out what the best ones are for my use case. And from my experience, just with developers in general making developer tools and platforms, that is well worth it.
00:51:30.040 - 00:52:13.958, Speaker B: Again, I am assuming that these systems can kind of interoperate sufficiently, sometimes you need this very tight, more tightly coupled. And maybe it wouldn't make as much sense to do kind of like that same type of stitching together of pieces, but kind of going with my mental model of like, most of the time the loosely coupled design is fine. Then it's really just a developer going through five or ten tools and saying, okay, these are the five that work the best for me, and then that's it. So that's probably how I would respond. But again, it's completely dependent on the.
00:52:13.964 - 00:53:09.222, Speaker C: Use case, I think I actually generally kind of agree. I don't see us being there yet. I think the blockchain architecture discussion is almost separate from that, in the sense that when there's a defined way to make something usable, maybe the best way to do ta or the best way to do execution. Right. I think a lot of these systems, at the end of the day, start looking and feeling pretty similar to an integrated system in the sense that how you would do those things, I guess it's a little different for execution layers because it really is just like a VM. You can slap a VM on anything, but with DA in particular, you still need consensus on the actual data. Right.
00:53:09.222 - 00:54:22.394, Speaker C: And so it ends up looking kind of like a blockchain anyways. And then how do you make DA fast? Well, that ends up looking like a bandwidth problem that's similar to what the settlement layer has to deal with anyways. And in my mind it just leads toward, okay, well, the best DA layer is also going to be the best settlement, right? Like those things seem very tightly coupled because they both need consensus, whereas execution, I do see where that could definitely kind of float around given the right properties. But then again, you get into like, okay, well, if you want execution to be very performant, consensus kind of has to be aware of how it works in certain ways, and then assumptions come into play. And I think once you start gaming these things out, your design choice is kind of narrow and you realize the best system looks kind of similar. I think there will be an era where we have slightly different monolithic systems that are optimized in slightly different ways that you might pick and then connect between them. I think we're still at the point where that's being defined.
00:54:22.394 - 00:54:46.390, Speaker C: And I think the devs today that would be inclined to build an app are not the right devs to be looking at. Whether celestio or Eigen layer is the best DA layer. I think that Dev flow is just completely different in web two right now, right. It's much more of like you're a system designer in web3 right now. If you're making those decisions, you're not an app developer.
00:54:46.970 - 00:55:48.406, Speaker B: Yeah, I think that's fair. But then again, I think with a more mature modular stack or. Modular, yeah, I guess a mature industry with like a mature modular stack. I think some of those problems get solved by just kind of like, kind of like socially, for example, you still have an app developer who has to make a lot of these decisions, whether it's on what kind of container system that they picture the web two, right. Like space where you say, okay, am I going to use docker containers or this other thing? Am I going to use Kubernetes or this other thing? I'm going to use whatever. Am I going to set stuff up with terraform or this other thing? I feel like you could make the same case that, oh, those app developers are really just wanting to focus on their core application logic. They're going to be so confused.
00:55:48.406 - 00:56:21.894, Speaker B: They're not going to want to think about this other stuff. But I feel like in a more mature industry, you don't have to spend that much time thinking of it. I can tell you more than half of the developers are in fact picking docker, terraform and Kubernetes. It's just like, come on, those are the leading ones. Their friends are all talking about it. And maybe that changes in a couple of years because of the modularity part of it where you can have this in the background, these hyper competitive environments where they're all duking it out. But at the end of the day, the person who's making that decision isn't really always privy to that.
00:56:21.894 - 00:56:33.542, Speaker B: They just know like, oh, this is the new best one. Sounds good, I'll plop it in. And it's not that big of a deal. I guess that's kind of how I'd see it.
00:56:33.596 - 00:57:16.198, Speaker C: I don't actually think we disagree all that much. Maybe we disagree on time frames because what I'm saying is that in a very understood integrated system, the interface will be understood to the point where you could have a tightly coupled system that right now every interface is competing to be the standard. Right. We're kind of at that stage and that's why there's no blockchain standards of how to do DA or whatever, because people are like, no, I have a better solution. Right. Once that best solution is kind of like somewhat consensus, people are going to be like, okay, all of our interfaces look somewhat similar. We should probably start a consortium and standardize on it.
00:57:16.198 - 00:57:24.220, Speaker C: And then I feel like you get this environment that you're talking about, but I think it's like a little bit of just maybe just time frame currently.
00:57:24.670 - 00:58:00.440, Speaker B: And to your point, it does start to look more like integrated systems from a practical perspective. Right. Like if there's a consortium or everyone kind of standardizes on this one type of interface, that starts to obviously move further on the spectrum towards integrated. That's absolutely true. That's why I think loosely coupled is, like, the best way to put it. Because I do think that there is kind of a sweet spot of it not being literally fully integrated, because then it's just, you don't have that extra competitive pressure in the same way.
00:58:00.810 - 00:58:17.690, Speaker C: And I think we're seeing that actually happen. I think Solana with all of its clients is like, no, we actually have to start modularizing our internal software a little bit more so that someone could run the execution from fire dancer and then consensus from labs. Right?
00:58:17.840 - 00:58:40.210, Speaker B: Yeah. And on the other side, clearly across all these roll ups and hyperchains and super chains and all this stuff, people are saying, okay, this is great, but we have to find the right balance with standardization because that's definitely a problem in the modular space. It's like we have to figure that out. And, okay, maybe there's going to have to be some type of at least social integration.
00:58:42.390 - 00:59:05.914, Speaker C: I think the systems do kind of converge at the long tails of things, and I think we're actually seeing that. I think most blockchains are going to end up having beefy builders with life clients. Right. I don't know if you call that modular or integrated. Right. There's areas where it breaks down. Right.
00:59:05.914 - 00:59:08.940, Speaker C: And I think we're seeing the convergence of a lot of these things.
00:59:09.630 - 00:59:21.050, Speaker B: Yeah. At the end of the day, are you guys aware of this concept called Scissor labels? I tweeted about it last night, actually, as I was thinking about this. Do you know scissor labels?
00:59:21.130 - 00:59:21.760, Speaker A: Okay.
00:59:23.570 - 01:00:01.386, Speaker B: I forget what project he founded in crypto, so my apologies. But John Palmer came out with a pretty good. I think it was party Dow. He came out with a pretty good article that talks about this notion of scissor labels and how it's just kind of like a sign of the times of kind of narrative controversy and how it's picture just like a categorical term that happens to be maximally divisive. And I think that modular versus monolithic is the same kind of thing. And he goes through a few really good examples. And the whole point is that there's this never ending tension of not knowing how to exactly define it.
01:00:01.386 - 01:00:27.090, Speaker B: And there's always going to be the, like, this is modular. That's not modular. This is monolithic, that's not monolithic. And it's a way broader trend that's just kind of like happening across the board. Like, is this thing aligned? Is it not aligned? Not even just crypto. Is this AI aligned? Is it not aligned? And I think that at the end of the day, the lines are blurry. Ethereum does all the functions.
01:00:27.090 - 01:00:42.540, Speaker B: Solana can have roll ups. It's just not like that, actually. Well, it's never going to be well defined, but that's kind of like the brilliance of some of this stuff where it is the tension that often makes it interesting.
01:00:43.790 - 01:00:53.040, Speaker C: So it makes the argument interesting. I think that's how me and Dino became friends on Twitter, is because we would, like, yell at each other and be like, wait, you have a good point.
01:01:01.090 - 01:01:29.094, Speaker A: Now. Would love to get both of your guys takes on some examples, like, for instance, dy DX moving from ETH to an option on Cosmos cello moving from an l one to a roll up eclipse with the building on the SVM building. Ethereum roll up on using the SVM and then helium going to its own chain. So we have all these examples kind of in both camps here. What are your, like, reactions to all of that?
01:01:29.132 - 01:02:27.100, Speaker C: Your takes on each, like helium. I think migrating to Solana is like a great example of an app that was like, wait, we don't need to maintain our whole blockchain, right? And it was actually not beneficial to the app itself. They're like, wait, we don't want to maintain the blockchain. We're better network engineering guys than we are blockchain engineers. And having to maintain the blockchain to do our core thing that we're trying to do is actually not helpful. And so that's where I see a very tangible example of the whole thing, is the developer who wants to build their app is just different than developer who wants to deal with infrastructure. I think Dydx is a little bit different in the sense that they did go their own app chain, which gives credence to the whole roll up thing in the sense of like, oh, I want to be able to customize this in a way that I can't in an integrated system.
01:02:27.100 - 01:03:08.882, Speaker C: So I think those are pretty opposing. Right. Eclipse is interesting in the sense that they started as roll up as a service, right? So they had that thesis of like, oh, we're going to provide roll ups for different apps and then pivoted to a general purpose one because they didn't find enough apps who needed that customization. Right. And then Zello is kind of the opposite of that in the sense that they were an independent l one. They're like, no, actually, the network effects of being an ethereum roll up is worth us going to Ethereum. So I don't know if I have all that deep insight in anyone.
01:03:08.882 - 01:03:37.700, Speaker C: I just think it's interesting to see that we've seen examples of both of them crossing back and forth at different times, and it gives credence to these arguments. Maybe there's some insight in the different use cases they're going for. Right. Helium, it seems, had a very targeted use case, but then, I mean, you could say the same thing with Duidx. They went the opposite way for a very targeted use case. Yeah, I don't know exactly how to parse that, but I do think it's interesting.
01:03:39.110 - 01:04:40.646, Speaker B: I think this will always be the case where there's always going to be this pendulum for any given project where there's pressure to be on kind of like a general purpose system and then kind of go more or less customization. I think that'll always be the case. Because you talk about the cloud thing, it's the case there too. You might start off in the most frictionless way because it's easy to kind of get up and running, and then as you kind of gain more mind share, you might want to gain more and more control. And then up until a certain point maybe, where it's too much effort to get that extra last drop of control, and then maybe you'll just kind of stop there. So maybe you'll start off just in web two world, maybe you'll start off by just deploying some serverless thing or building on some type of framework, and then you'll get some traction and be like, oh shit, okay, we actually want to kind of own more of the stack and then more and more of the stack, and then be like, oh, actually. But I don't want to build my own data center though, so let me just not do that.
01:04:40.646 - 01:05:25.534, Speaker B: Let me just stay in AWS and get as much customization as I can in AWS or just something like this. And that's kind of how I see it. I do see a lot of things potentially starting as a smart contract. It could be on an integrated system, it could be on a modular system. That's actually less of what I'd emphasize but starting as kind of like a smart contract and then wanting kind of more and more control. But I do think that the blockchain version of like, oh, I don't want to redo my whole data center is like, I don't want to create my own l one because it's just too much work. I think in the grand scheme of things, it'll just be too much work to make that meaningfully.
01:05:25.534 - 01:06:07.940, Speaker B: I don't know how to put it. Like meaningfully decentralized, meaningfully robust, and have a meaningful escape velocity on the social layer there. I just don't think it'll be worth it for the benefits that you'll get. And I think, for example, DYDX kind of going like full app chain is probably because the roll up stack wasn't mature enough at the time. And I actually think that if you parse through some of the discourse on this from Antonio and stuff like this, and I don't have any extra info, and he didn't say this explicitly, necessarily, but I do think that with a more mature roll up in modular stack, he probably would have done an app specific. But. So that's kind of how I see it.
01:06:07.940 - 01:06:32.410, Speaker B: I'm curious to get your guys'thoughts, actually on that parallel building. Like an l one blockchain being as hard, being a reasonable analog to building your own kind of global data center, just in the sense that most people kind of stop before that and they're like, that's too much fucking.
01:06:32.990 - 01:07:04.820, Speaker C: Yeah, like, I actually don't think you're super. Like, I just think the applications that get to that, I don't know. It's almost like Apple is completely vertical integrated, right? And so if an Apple were to start as a smart contract, I would think they would end up as an app chain right. At the end of the day. Whereas a notion may end up as a roll up, right? And whereas a social app, like a Facebook, may end up on an integrated chain because you need all that data, right?
01:07:08.310 - 01:07:35.630, Speaker B: Go for and like. And a bunch of smaller things. Like, you can picture a bunch of iot based things just getting thrown on a super low latency, super low cost chain. I do think it'll completely span the gamut. And I agree that the likes of an apple or the likes of a Netflix might build their own kind of l one. I don't think that'll be.
01:07:35.700 - 01:08:03.960, Speaker C: I think there's like, a level of success where you're like, I can hire enough people to be a data center. They want the billion dollar monopoly, right? And so they don't care. They're going to throw the money at it. Right. And there's not going to be hundreds of those apps. Right. But I do think there'll be a segment of those if we really do get Nasdaq on chain, that will eat one.
01:08:08.410 - 01:08:55.366, Speaker B: And I guess another interesting thing is distinguishing between kind of like the base case of activity, your use cases, versus where the value accrues to. Because I think that's another way that people have kind of different, I guess, different lenses to which to look blockchain through. Like you could say, okay, I buy the idea that the vast majority of cases don't need XYZ, different properties, don't need super low latency or whatever, but you're like, I don't care about those because then the 20% of cases are going to accrue 80% of the value and fuck those other cases. I don't care about them. I'm thinking about this as fast financial rails validate, or you look at it the opposite. So I think that's just another area where people kind of talk past each.
01:08:55.388 - 01:09:22.110, Speaker A: Other a little bit, 100%. So we covered a lot of stuff today, covered a lot of ground. Really insightful conversation. Perhaps in a wrap up of sorts. Let's go to each of you. Tell us about Dino fluent, Zen Monad, how each of those projects are helping further. I guess in Dino's case, the modular vision we've laid out, and in Zen's case, the monolithic vision.
01:09:23.750 - 01:10:19.362, Speaker B: Yeah, happily so. Fluent is a ZK wasm L two blockchain on Ethereum. Our main thing, I mean, webassembly is kind of like a compilation target, like a runtime of sorts from web two. Actually, that's started to get really popular over the past handful of years, and we're basically just like taking that and using it as a substrate on Ethereum to bring general purpose programming languages like Rust and C and typescript and stuff like that onto Ethereum. And in a much more performant way than other, what I'd call workarounds of doing this. Just the quick example that I like to use shows how webassembly impacted web two. Right.
01:10:19.362 - 01:11:32.586, Speaker B: Clearly you had the web and browser based technologies kind of like take off and you got these web pages that got increasingly more programmable, and that was mostly based on kind of like JavaScript. And next thing you know, you got like full blown web apps getting really popular. And then what happens eventually is developers want to push the boundaries of what's possible and enable kind of like new types of kind of performant apps or just like new types of functionality. And Webassembly is very, I think, quickly being kind of injected into the browser to enable more performant and flexible applications. One good example, actually just to ground it, is Figma, where Figma, basically everyone knows Figma now. They completely disrupted the design industry, and they basically going to, we're going to use this webassembly thing so we can build our app with the combination of rust, typescript, and C plus plus. And from the lens of a developer, they're like, I'm going to use each of these languages to do a different thing really well.
01:11:32.586 - 01:12:16.950, Speaker B: And what happened there, they kind of unlocked a totally new type of experience for a collaborative design tool that is now a $20 billion company and totally disrupted Adobe in an industry. And I think that there is an analogy there that's happening now in web two especially, I'm sorry, in web3, especially in that modular stack on Ethereum where it's like, yes, solidity, and the EVM got us here, but now people are kind of like breaking down the boundaries of what's possible in it. And I think WaSm is just like a really novel kind of a very interesting point on that trade off space. It's like flexible enough, but also kind of familiar enough, if that makes sense. So that's fluent in a nutshell.
01:12:18.890 - 01:13:02.920, Speaker C: Yeah. Monad is previous. I was Solana core dev, right? And what kind of piqued my interest in Monad was the ethereum ecosystem has been this competing narrative of modularity. And Monad was the first, like, hey, why don't we try monolithic EVM? Right? And so that was just very interesting to me. It was like, oh, okay, let's bring this Solana type performance and optimization culture to the EVM and see how that plays out. And obviously, I talked about my background in Apple and just like, how systems get fast. And so that's just where I came from.
01:13:02.920 - 01:13:50.360, Speaker C: And so Monad, to me was this very interesting, oh, I get to stay true to what know, believe in how fast systems will dominate, yet go to a space that hasn't had this type of thinking agriculture introduced into it and see how that plays out. And so, yeah, Monad is a layer one blockchain parallel EVM, 10,000 TPS modulus or monolithic built. Basically, it's designed to basically saturate hardware at all levels while still having reasonable hardware requirements and just unlocking a level of Ux for EVM developers that hasn't been there before. And so yeah, it's, like, an exciting problem to me.
01:13:51.610 - 01:14:11.520, Speaker B: I love what you guys are working on, honestly. I think that whether it's an L, two, l one, l three, doesn't really matter. I think that we're at a point where I think there's enough hunger to explore the full design space for these VMs. And I'm very excited that you guys are pushing the boundaries of what's possible with the EVM, too.
01:14:12.290 - 01:14:38.920, Speaker C: Yeah, it's interesting being constrained to the EVM, because to get the speed, you do need to change consensus and the database. And so that's what's kind of interesting to me, is that it forces the monolithic problem in a very tangible way. Right. Because we want to stay EVM compatible, and yet we still want to be really fast, which means you have to optimize the other stuff, which means, like, monolithic architecture, baby. That's what you got to do.
01:14:42.970 - 01:14:58.514, Speaker A: Nice. Well, guys, this has been a super fun combo. Thank you, Dino and Zen, for bringing all these insights to our listeners. I'm looking forward to seeing more arguments on Twitter from you guys, and as well as what fluent and Monad bring to the table as these ecosystems evolve.
01:14:58.562 - 01:15:00.206, Speaker B: Thank you, guys. Yeah, it's been fun, guys.
01:15:00.228 - 01:15:12.170, Speaker C: Been fun. Sale.
