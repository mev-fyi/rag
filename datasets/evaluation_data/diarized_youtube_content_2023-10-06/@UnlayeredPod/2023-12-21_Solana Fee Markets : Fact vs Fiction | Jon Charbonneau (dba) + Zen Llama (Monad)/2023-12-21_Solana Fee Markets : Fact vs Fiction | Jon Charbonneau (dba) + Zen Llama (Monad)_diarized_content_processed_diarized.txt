00:00:15.610 - 00:01:11.874, Speaker A: Welcome to Unlayered. I'm your host, Saul, and today we have a different format. I'm joined by our longtime ally and advisor, Zen Llama, because our guest today, John Charbono of DBA and Zen Llama, we want to all discuss and jam a bit on Salana fees. In other words, we want to demystify Salana fees and kind of get into the nitty gritty of the long term vision for the Salana network because it's just so fundamentally different from how ETh and the L two s handle fee markets. But I think a good way to start this episode actually is to kind of just tee up this problem from a historical perspective. Zen, I know you brought up earlier that this reminds you of kind of the big block, small block wars back in the day in 2017 with bitcoin, bitcoin cash, and this war between bigger blocks versus smaller blocks. I mean, is that kind of how you see things playing out today? In a way, yeah.
00:01:11.912 - 00:01:49.230, Speaker B: So I got to be fully candid, and I wasn't in the industry that at that time, but I have read my history. Right. Bitcoin being like, the only. It wasn't programmable, right. It was just like a form of money and how that money's economic bandwidth was kind of, like, limited by the block space, right? So there was two camps. There was, like, one camp that essentially said, we want to keep blocks small because it essentially has restricted supply on the block space, and therefore it drives scarcity, right. And kind of like, store value type narratives.
00:01:49.230 - 00:02:16.310, Speaker B: Then there was, like, the other camp that was like the bitcoin cash camp, right? And they essentially were like, we want bigger blocks. We want it to be more of a medium of exchange. And that kind of motivated a lot of the conversation for a lot of time until Ethereum came in with like, it's like, hey, but we want this to also be programmable. And then maybe I can pass it over to John if he wants to expand on any of that, and we can then go into Ethereum.
00:02:17.210 - 00:02:50.818, Speaker C: Yeah, sounds about right to me. I also, for background, was well before my time block size wars. It was way before I was in crypto as well. So much more of my entry is the Ethereum versus Solana versus avalanche versus go down the line. But, yeah, that matches mine as well. Of like, you start to kind of see this classic split kind of throughout crypto, especially in the last few years of the kind of like the money crypto versus the tech crypto. And there's inherently kind of a bit of that also kind of in the, like, what should Ethereum be? What should Solana be?
00:02:50.904 - 00:03:00.440, Speaker A: Is it fair to say that east monetary policy is inspired heavily by bitcoin in a way, especially post EIP 1559?
00:03:01.290 - 00:04:00.678, Speaker B: Yeah, I think it's funny because it wasn't until EIP 1559, right? Like that was the main criticism from bitcoiners to ethereums is like, oh, you guys are minting infinitely. You have no fundamentals, right? And it's like, okay, well, then they took that seriously because the other biggest boy in the room was bitcoin, right. And came up with EIP 1559, which is actually a pretty elegant controller mechanism for fees. And now we have ultrasound money narrative, right. I think what was lost in that, as this transition was going on was kind of like the philosophy behind the big blockers. The small blockers won the big block small block war, right. And that being apparent by bitcoin being the main fork.
00:04:00.678 - 00:04:24.322, Speaker B: Right. And so when Ethereum was fighting with bitcoin, that's the camp they're ideologically bumping up against. Right. I think with Solana, it's like much more the big block guys, right, sorry, I think I messed that description. Yeah, I think I missed that description up a little bit. But the small block guys won like bitcoin won.
00:04:24.376 - 00:04:24.980, Speaker A: Right.
00:04:26.390 - 00:05:07.440, Speaker B: And so there was this very heavy monetary policy slant. And I think the big blockers are more like, hey, no, we're more on the world computer side. And so what does that mean for the token? I think Tolle has articulated this very well in the sense of saying, no, the token is a spam prevention mechanism. And so, yeah, I think we can get into what that means a little bit, but I think that kind of motivates a lot of it. And maybe we can just delve a little bit on the Ethereum monetary policy and the motivation behind EIP 1559. John, if maybe you had some comments there.
00:05:08.450 - 00:05:54.118, Speaker C: Yeah, sure. 1559 is really interesting because it also seems to be kind of, I would say, especially lately coming, especially in the salona community, coming more like full circle of what the motivations actually were for it in the first place. And it's kind of gone through this arc of like, the initial motivation for 1559 was not just to burn all the ETH and be this deflationary, it's good for ETH as money. That wasn't the intention of it. It really was just the fact that it is a just better feed mechanism than what Ethereum had in place. And it actually just meaningfully improves the UX. It is a very elegant solution, which is why people in the Solana community are starting to look at it more recently again.
00:05:54.118 - 00:06:58.450, Speaker C: And it's not for the monetary reasons of it is just the like, oh, this is actually just an intuitively simple thing of I, as a user, want to basically know in most situations, like what do I need to pay to get into the block? And then I just want to pay that thing and get into the block and not have all these failed transactions and all these different problems. That was the motivation for Ethereum to do 1559 in the first place, was that it's a good ux improvement. Effectively. The reason that you burn the ETH, just historically kind of for context, is it's just an incentive compatibility byproduct of the mechanism of if you don't burn all the base fee and you have this dynamic base fee that the block producer can control, basically, if you were to still send that to the block producer, well, then the game theory of it kind of just falls apart and it reverts back to a first price auction, and then you basically end up with what you had before. So that's the reason why you just have to burn it, is not even that you have to burn it. It's that you can't give it to the current block producer. So you could send it into a treasury, you could do something else with it, but you can't give it to the current block producer.
00:06:58.450 - 00:07:41.994, Speaker C: And where that kind of has gone since then is people have really honed in on that last part of the burning aspect of it, as this is the differentiated new meme kind of thing. But that is why, as the Solanas community is starting to look at it again, of like, oh, is this interesting? Is there a way to work this into Salana's base fee mechanisms? Know some form modified, it's not as we want to burn more base fees. You could just burn more base fees if you want to do that. You could just change the parameter to burn 100% of the base fees today. It really is as that just how do we design a good fee mechanism that is good for usernesses and incentive compatible and just deters spam and all these things? That was the real initial motivation for it. And it is a really good mechanism.
00:07:42.042 - 00:08:14.810, Speaker A: For all of those, maybe to kind of take this conversation along. What would be helpful is for both of you guys to, from the perspective of a listener, delineate between what it means to be a validator on the ethereum network versus the Solana network and this idea of the economic feasibility of being a validator, and even just the idea of the cost of running one on each network. Philosophically, they're quite different. Right. How do you kind of view both of those landscapes?
00:08:16.030 - 00:08:49.302, Speaker B: Yeah, I think to follow up on what John said a little bit, there's technically nothing preventing, I mean, there is technical reasons at the long tail of it from eth, just like expanding the gas supply. Right. That's literally what BNB did. But you run into other state growth problems. Right. And so I think ethereum is very much motivated from this. Like, okay, we want people to run nodes at home, therefore we don't want the hardware cost to be so high.
00:08:49.302 - 00:09:16.320, Speaker B: And that means our fee burning mechanism inherently has this dynamic of making the validator profitable, not because they're just doing it because they want to, but because otherwise, if there was too much state, they would have problems on the hardware side. Right. And so, yeah, I think that's the main motivation there. And then we can talk about Solana a little bit. But I'd like to hear what.
00:09:20.370 - 00:09:48.230, Speaker C: Definitely fits. It is an interesting byproduct, because a lot of it is also just like, what is the cost to run a node versus the cost to be a validator? And those actually are two different things. And especially in Solana, you see that very clearly. That is one of the more underappreciated, I would say costs. I think that most people probably just don't intuitively think of of the cost to run a validator. It's really expensive to vote on every single block of that is a transaction. Every single block.
00:09:48.230 - 00:10:33.414, Speaker C: Most people always hang on to the fact that, oh, most of the transactions or votes. Well, that's true. But the problem is that there are economic implications of that is like, it is expensive to run a validator for that that costs like tens of thousands of dollars a year, usually depending on what the sole price is to be one. And that is actually part of the conversation also as well, when people are talking about fee changes to Solana, part of it is for various economic reasons of determining spam and all these different things. But part of it is that also, as of right now, there's no special exemption or treatment or anything for vote transactions. They're just treated like a normal transaction, and they pay the same base fee that everyone else pays. And there's a lot of talk of is that just like the fundamentally right thing to do.
00:10:33.414 - 00:11:39.580, Speaker C: And that is part of the conversation of, we'll get into this much more later, but changing the base fee to more be based more on cus or these different things helps the fact that today validators are relatively overpaying also for the resources that they consume on the network relative to the amount that they're actually paying. And ethereum, you just like any other chain, you don't actually have this because votes are not normally on chain transactions in the same manner. And the 400 millisecond block times, you have a lot of votes, it gets really expensive. And then also is what you were mentioning of, just like the simple stuff of the hardware requirements, just like everything that goes into actually running the node is going to be a bit more expensive on Solana versus on Ethereum. The more practical reality too is an extent of while that's also true for running a node, in practice, most people who actually run validators are actually sophisticated setups anyway. And the incremental couple hundred bucks of what does it cost to run this node versus that node is not the difference in Coinbase's bottom line. Obviously, it's all the same operational costs and you're paying employees and all these different things.
00:11:42.290 - 00:12:37.470, Speaker A: What about this idea of, and I think this is something Zen and I talked about before on Solana, there's a world where validators aren't even necessarily profitable. They could be even loss leaders in some ways, and where the value driver to the token is not as emphasized, perhaps as networks like Ethereum that have literally memified that. Do you think this is like a sustainable long term model to just kind of assume that you could just have 3000 or whatever the number is, validators out there that may or may not be making money, spending $1,000 or so a month. And it's all good because it's about the apps. At the end of the day, it's not really about having a profitable industry centered on just the infrastructure side of running a blockchain.
00:12:38.290 - 00:13:58.200, Speaker B: Yeah, I think there's actually a little bit of nuance here. And John kind of hinted at it when the fact that votes are transactions on Solana, and I think people underestimate the utility of all to all communication. Right. And the reason they do that is because if you can scale the number of transactions, you can scale the number of full nodes that can be on the network. And the theory is kind of like, okay, well, having a full node is actually an economic advantage in certain situations and just for app development, right? So having a full node gives you the data the fastest, you'll be able to have the fastest ux, the fastest, seeing what's going in on chain versus someone who's just listening off an RPC. And essentially you're in the actual quorum, right? And so that actually has economic value for people on dexes and traders and stuff like that, as well as just having snappy ux and stuff. So I think the thought is kind of one along the lines of like, okay, if I'm a business and I'm going to go out and get a good server and I go to aws to ask them for one, right? I'm not going like, is this net profitable for my.
00:13:58.200 - 00:14:53.100, Speaker B: No, no, I have a business that's profitable and I don't mind spending a little bit on the hardware to get the advantage of that hardware. Right. Now, I don't know if I fully agree with this. It's more of just like, this is the line of thinking right. In my mind, you need to have the network actually hit like zero in a non contentious state. If you're just sending a transaction, that transaction should be the actual cost of sending it over the network for the validators to process it, right? And so in a perfect world where we are all just sending completely uncontentious transactions on the network, I think the validators should just be breaking even in the sense that they're motivated to run one. If they're a hobbyist, if it's a business that's like a capex, it's not huge, right? And so they're also motivated to do the work overhead of it.
00:14:53.100 - 00:15:28.630, Speaker B: But that's where the spam prevention comes in. Right? And I think theory behind it is like, okay, well, if I have a really useful app and a lot of people are using it, people are going to be paying priority fees and other fees to get priority ordering or block inclusion and stuff. And that's what we'll pay for both the validators and the network with like a 50 50 burn, which is kind of the thing John was talking about of why you need to burn some of it is because it can't all go to the validator. They can do malicious things with the fees.
00:15:30.250 - 00:16:11.694, Speaker C: Yeah, there's definitely that balance of the accessibility versus actual utility of running the thing. There's two parts to getting people to run a lot of nodes. One of it is making it just as cheap as possible. The other half of it is making it really useful. If it's really cheap, but it's not valuable to run a node, then nobody's going to run a node if it's sort of expensive, but it's super people valuable to run a node than a lot of people will run it. So, yeah, similarly, that is the train and flop, especially in Solana. The part that I would say that is fair arguments against that is that, in particular, a lot of these kind of performance and user benefits that would incentivize you normally to run a lot of nodes.
00:16:11.694 - 00:17:00.222, Speaker C: A lot of them are actually, I would say, more beneficial to have a lot of stake weight. And that is probably an underappreciated side effect of things like turbine and qos, just like the way that they work. There actually are relatively centralizing economics on both of those where you do get a large benefit if you have a lot of stake, as opposed to actually having a lot of nodes. So just context for the listener, the way that those work. So turbine is the way that blocks are propagated on Solana. I'm sure you guys have probably described this on the show before, but basic idea of a block is kind of like chopped up into these different pieces and then spread fan out across the network, kind of like through like a tree like structure. And the way that those bits of the block are prioritized and sent through that is based on stake weight, not the number of nodes.
00:17:00.222 - 00:17:51.394, Speaker C: So the upshot of that is, if you have a lot of stake weight, you're going to be the person who is going to most quickly get all the pieces of it and understand and be able to update your view of the world of like, okay, this is the state of the world. That is something that is very valuable for obvious mev applications, like if you're a trader, all those things. Similarly for qs, similar idea of like, if you have more stakeweight, you have a certain larger amount of, basically that your kind of bandwidth of transactions of yours that will be prioritized that you're sending along to the next leader. And again, that is based on stake weight, not just having a lot of nodes. So those are like the fair arguments against. And I think that these are things that the network will have to grapple with in the longer term, because both of them are sensible things of you want to obviously prevent civil attacks for all of these different things. The opposite of turbine would be similar to a little bit different.
00:17:51.394 - 00:18:52.710, Speaker C: But the way that avalanche consensus used to work, there was this problem where basically the probability of getting the next block was actually just by running a node and not based on stake weight. And the result that you saw with that was searchers figured out like, oh, yeah, it's a great idea. If I just spin up thousands of nodes and now it looks like someone is just attacking the network. So you need some way to civil prevent. But usually the ways to prevent civil attacks are relatively centralizing economically. And the way that the Solana foundation has dealt with this very well is through their delegation program, which is a very rational thing and is like support of the decentralization of the network. So delegating to validators a certain amount of stake and matching Sol beyond that, that helps kind of the costs of these validators, because I think the break even to run a salana validator, it's something in the ballpark of like 40 or 50,000 sol, something like that, order magnitude beyond that, you will get enough rewards off of that to generally compensate for your vote fees, your costs to run this thing, et cetera.
00:18:52.710 - 00:19:07.420, Speaker C: So that works today. But is that, like, a long run sustainable thing to obviously have this delegation program that's kind of subsidizing to some extent the bottom tier of sakers? Probably not. So those are going to be difficult economic questions in the long run, like, dealing with all of those.
00:19:13.010 - 00:19:47.240, Speaker A: I think would be useful, actually. I don't think a lot of people understand how different block production is on Solana versus ETH and the EVM chains. Can we quickly just do a rundown of the key differences? And I think the biggest one is just the lack of a mempool on Solana versus eth has a global mempool. But you alluded to some of these other ones, just how these packets are forwarded to leaders and what implications there are for certain features of Solana. Maybe that would be a great way to just set this baseline foundation, because I think fees touch on a lot of this stuff.
00:19:47.930 - 00:20:51.846, Speaker B: So on Ethereum, it's just a peer to peer network, essentially. So everyone's listening to the mempool. There's not, like, this concept of a leader gets the transaction first, like on Solana, and then it forwards it to other leaders on the network. It's actually like a shared mempool. You send it to anyone, any node on the network, right? They have this bufferish thing called a mempool, and when they get it in there, they then gossip it around the network, right? And so you can almost think of transaction propagation, part of the block propagation mechanism in Ethereum, being like the mempool, okay? Whereas in Solana, it's just like simple forwarding to the next leader. And so what happens there is that there's kind of this. They're talking to each other, they're waiting till they get the transactions in the mempool, and there's like a discrete time window in which leaders on the network are waiting to collect enough transactions to build a block.
00:20:51.846 - 00:21:31.786, Speaker B: But there's also something. There's a lot of games in Ethereum about, like, okay, I need to make sure two thirds of the gossip network has seen this transaction before I propose it in a block, because if I do and no one else has it, my block is going to get rejected. Right. In Ethereum, this isn't, like, a huge deal, because block times are so long that there's just a point at which the probability of that is pretty much guaranteed. So that's kind of their transaction propagation as compared to Solana. It's literally like you just send it to a leader, you know, the scheduler, and so you can just send it to the next couple of leaders, and hopefully one of them gets. But as you can see, that might.
00:21:31.808 - 00:21:33.226, Speaker C: Be incentivizing spam, right?
00:21:33.248 - 00:22:18.410, Speaker B: Because you can just send it to a bunch of leaders, and we can talk about how to prevent that and stuff. So that's like transaction propagation, but then there's actually, like block propagation, right? So then the leader needs to take these transactions, pack a block, we can get into scheduling and how that has to deal with fees and whether in protocol or out of protocol. But essentially, they have God mode. They have all these transactions that they're getting, and they go, okay, this is the order. And then they have to broadcast that order to the rest of the network. And this is also what takes a long time, because now they're sending a lot of bandwidth out of them to everyone else in the network and saying, these are all the transactions I have. Typically, that's one of the heaviest parts of bandwidth overhead on the network.
00:22:18.410 - 00:22:25.130, Speaker B: In Ethereum, it's a little more balanced between transaction propagation and block propagation.
00:22:28.670 - 00:22:28.986, Speaker C: Just.
00:22:29.008 - 00:23:07.462, Speaker B: Because the way they've slid where you do that, they have kind of the buffer in the front. In Solana, it's much more like the leader gets it and it's packing it out, and then it needs to very efficiently send it out, because their time to keep listening is very limited. Right. And then the next validator is listening and trying to do the same thing as quickly as possible. And they're not waiting for each other to get the full blocks. Actually, in Solano, they're simultaneously, like, block Zero and block one are streaming into each listening validator, and they're building it. And they just hope that block Zero finishes before block one so they can vote on it and then vote on the next one.
00:23:07.462 - 00:23:37.250, Speaker B: Right. And that usually plays out that way. Just because of the leader schedule. But there's definitely the possibility that block one finishes first, and then the guy is still waiting on block Zero, and he has to vote on both in the next slot. There's things like this that happen with Solana, but essentially, in order to do that, the mempool Optimization isn't there. They don't have this discrete time window. It's more of, like, continuous streaming of transactions.
00:23:37.250 - 00:24:07.674, Speaker B: And so turbine becomes really important because it's playing the role of both these things. Okay. And so turbine, the theory behind it is in tendermint consensus, which is probably the one a lot of people have heard about. It's been around for a long time. It's kind of like the base PBft kind of consensus mechanism. When a leader gets something, it sends it to everyone, and then it waits for everyone to send it back to them, and all of those people also duplicate it. So it's like end to end.
00:24:07.674 - 00:24:55.850, Speaker B: It's all to all communication for every block. Okay? And so that creates a lot of overhead on the network. So Solana was like, oh, you know what's a lot smarter is we come up with this tree structure, and then you send it to one guy, and then he disperses it to a couple other nodes. They disperse it to a couple of other nodes, and you get this algorithmic property of dispersion, and that's kind of where your stake weight comes in and where you sit in that tree. And so having more stake means, typically it means you're more trusted. It's kind of like a proxy for how legit of a validator you are. And so they're like, okay, well, that's motivation to put you farther up in the tree, because you probably have better service, can send out shreds better, and just have better network properties.
00:24:55.850 - 00:25:04.080, Speaker B: Yeah. And so that's kind of the difference there. I don't know if I missed on anything. Maybe if John wants to put some finer points on some stuff.
00:25:05.250 - 00:26:20.610, Speaker C: Yeah, I think it would just be emphasizing the main difference is really discrete time versus continuous time. At a high level of Ethereum's entire block production process is very much a discrete process. It is a long block time where you're not doing anything for most of it, and then you are, like, all of a sudden sending a large block, and then you're propagating that throughout the network, and it takes time and all these different things. And in practice, effectively, every single, I think it's like 95% plus of Ethereum validators. They just completely outsource that block production right at the end of the slot, they just get the block from the builder, and that's what goes out to the rest of the network, as opposed to Solana, where the default and what the majority of clients still run is this Solana Labs client, which has this default continuous block building throughout your entire slot that you are doing yourself. And you're starting to see growing within Solana moving at least somewhat directionally towards Ethereum with what Jito is doing. Like the jeto auction is very analogous in a lot of ways to mev boost, like the PBS implementation on Ethereum, just much faster and much shorter.
00:26:20.610 - 00:27:15.478, Speaker C: And it's also not entire blocks, it's bundles. But it's the same idea of Jito, which is, I think it's like 43%, 44% of clients or something like that at this point are running this and can participate in the Jito auction, which is to some extent like slowing down and discretizing time of you have these 200 millisecond auctions where you are not just continuously block building throughout that, like you are building up this kind of auction, and you can send along like, these are the good bundles. This is what you should prioritize. And part of the problem is the scheduler is a rough attempt to be efficient and continuous block building. And the main thing is the validator trying to be profit maximizing. The profit maximizing thing is generally to wait as long as possible and try to discretize time more. And that's exactly what you're seeing in Ethereum, is they already have long blocks of discrete time.
00:27:15.478 - 00:27:58.630, Speaker C: What you're seeing proposers start to do in the last couple of months or so is they realize like, hey, I could actually wait a little bit longer than I'm supposed to wait. And that's what they're starting to do, is they're waiting past the time where they're supposed to send out the block to the rest of the network as an honest proposer, because they realize they can push it a little bit longer and still get the block propagated to the rest of the network where it won't get reorbed out. Similarly, in Solana, it is generally going to be profit maximizing to run at least some form of auction, as opposed to just always continuously and kind of blindly producing blocks like this. And that is part of the incentive for something like jeter to increase adoption over time. It is just going to be more profit maximizing for the validators to slow down time to at least some extent.
00:27:59.770 - 00:28:24.880, Speaker A: And this is why Solano had those outages early on was there was no mechanism to control for just spam hitting this leader block. They just took everything. And there was instances where the leader would go down. Is that basically what happened? Solana got ddos, there was no spam prevention mechanism. And have they really fixed it at this point with things like fee markets and qos and the other things you guys brought up?
00:28:27.010 - 00:29:12.690, Speaker B: So I would say they have fixed the fact that spam brings down the network. They have not fixed the economic incentive to stop spamming the network. That sounds kind of a convoluted thing, and so we'll get into why that's an issue. But essentially, yeah. The way the scheduler works right now on Solana is there's four. Or maybe I'll talk about qos and stake weighted quality of service a little bit because we already hit them. But so doing those things of having the turbine tree basically put the higher quality nodes farther up in the tree so they have better block propagation.
00:29:12.690 - 00:29:37.560, Speaker B: That was one thing. Okay. Quality of service is the other thing that John was talking about, where if you have more stake and you're connected to a validator, you actually have a slightly bigger bandwidth lane to send it. So it's, again, it's kind of like a reputational thing. It's like, hey, I'm a trusted actor on the network. A lot of people have stake with me. So you should kind of prioritize, give me more bandwidth to send you stuff.
00:29:37.560 - 00:30:04.542, Speaker B: Before that, they just had UDP, and this is going to get a little bit in the weeds here, so bear with me. UDP was just like, as someone on the network, I'm just saying, like, I have an open door. Send me stuff, but you don't know who's sending you stuff. You don't know the quality of it. You don't have any way to limit it. Right. And so it was just like, my doors are open, and you're just know, putting as much people through it as you can.
00:30:04.542 - 00:30:46.410, Speaker B: Okay. The reason they didn't want to do TCP, which is what Ethereum uses on typical gossip networks, is because there's a lot of back and forth in that protocol, and that back and forth slows down these transactions a lot. So what they moved to was something called quick, which is kind of like a middle ground between that in the sense that at the beginning of making a connection, there's a handshake, so that the guy listening knows who you are, and then he opens the door all the way, and then, because he knows who you are. He can say, like, oh, you're sending me too much stuff. Like, I'm going to close the door in your face. Okay. It has the ability to do that before it didn't.
00:30:46.410 - 00:31:24.790, Speaker B: So that's like the quick benefit. Right. And so both those things brought a lot of network stability, but the local fee markets don't necessarily guarantee inclusion in the ways that we think about them right now. And now I'll get a little bit more into the scheduler. The way the scheduler works is there's four. You can think of them, they're called banking threads, but you can think of them as, like, lanes of traffic. And you don't actually know when you send a transaction to a validator what lane of traffic you're going to land in.
00:31:24.790 - 00:31:58.030, Speaker B: Okay. And so you hear a lot of people in this discussion talking about jitter. And jitter is this concept of, like, when I send my transaction, I don't know which thread I'm going to land in, which lane I'm going to land in, and I don't know how many cars are in that lane. Right. And so the network is like, trying to figure out the best way to put you, but it only schedules your priority per lane. Right. So you could pay a priority fee, but get in the most clogged lane.
00:31:58.030 - 00:32:30.010, Speaker B: And even though you move to the front of that lane, the next lane might be open. And because it's parallel, it's going before. Right. And so two people with the same priority fee, or even one without a priority fee if they land in the unclogged lane, can actually beat someone with a priority fee. And that's really the issue. And so you hear this as, like, jitter. And what they're really talking about is there's no guarantee right now that if I pay a priority fee, I actually am the first one.
00:32:30.010 - 00:33:12.940, Speaker B: Like, I'm top of block or whatever. It's just that I have a better chance of moving to the front of my lane, but I have no guarantee about how clogged my lane is. And so where this helps network stability is in the sense of, okay, it's at least smart enough to be trying to schedule things in lanes and making sure that each of those aren't overloading the computer. So it's making the block time expand and then causing things to go down and stuff. But it's not actually doing the perfect world of local fee markets that we think about really. It's just like saying we're just distributing load across these threads right now.
00:33:17.710 - 00:33:52.230, Speaker A: Understood. And then the next thing, I guess, to touch on would be like, maybe as we're talking about priority fees, why don't we step back a bit and just talk about fees? Like how do they work on Solana? As far as I know, there's base fee. It's pretty low, pretty denominous. And then what you're alluding to is priority fees, which have a cap. I forget at the top of my head what that cap is. And then all the fee in totality, half of it is sent to the validators and half is burned. What am I missing? Give me the lowdown on Solana fees.
00:33:52.810 - 00:34:27.490, Speaker C: Yeah, so the basic, I'll try to comp it to ethereum as I go through it, because I feel like that's a good reference point for most. Yeah. The way that the base fee works in Salana. So lamports are effectively the equivalent of aguay in ethereum. Yeah, it's like the same kind of unit. Basically, there is a fixed base fee for every single signature of 5000 lamp ports. And what that basically translates to is 5000 lamp ports per transaction, because pretty much effectively every transaction has one signature.
00:34:27.490 - 00:35:29.038, Speaker C: Versus on ethereum, the way that you would calculate the base fee is a product of how much gas are you using, and then the analogous version of that. So it's gas. And Ethereum is like the measure of basically how much computation are you doing? Cus compute units are the equivalent in Ethereum, in Solana. But in Ethereum, basically the way that the base fee per transaction is set is like how much computation is this thing actually doing? So the amount of gas the transaction uses multiplied by whatever is the base fee at the moment, and then the base fee itself is dynamic in every block. It's part of consensus. This is the EIP 1559 mechanism of the base fee for a given block is based on what is the trailing demand of how full was the last block? If there was a lot of demand before, then we raise the base fee. And so the way that you calculate your transaction base fee is like how much gas is this actually using times? What is the prevailing base fee? So that's the base fee on both sides.
00:35:29.038 - 00:36:45.450, Speaker C: In Ethereum, you burn 100% of it for the reasons that we mentioned before of when you have this kind of mechanism, you need to burn it just for incentive compatibility or it turns back into a first price auction. In Salana, they do a 50 50 burn and priority fee, somewhat randomly chosen number. And then the priority fee in Ethereum is like a simple 100% of it gets paid to the leader. So that is a mechanism by which you're trying to express additional hey, I really want to get into this block because the base fee is like the kind in Ethereum is the like, this is the prevailing price of this should get you into the block, but you want to include some additional amount that incentivizes the miner, the validator, to actually include your transaction that actually goes to them. So in normal times you attach a really small priority fee to your transaction because blocks generally have room and you'll get included right away. In times where it's really congested, you'll jack up a high priority fee and then that will presumably get you included relative again to how much compute your transactions are using price and gas. So in Solana, the priority fee is more similar to Ethereum in that the priority fee is again the priority fee.
00:36:45.450 - 00:37:39.646, Speaker C: Prioritizing transactions based on this is out of protocol. It is up to the scheduler determination in the same way it's up to a builder on Ethereum to just decide like, hey, is this a priority fee that this does it for me, this is worth it for me to include. So this is what the scheduler is taking into account is this kind of optional priority fee. And when they account for this, they do account for the fact of, okay, what is the priority fee relative to the amount of computes cus that this transaction actually uses? So there they actually do take into account the actual size of the transaction, the difference in the allocation of it is, and this is something which I think needs to change, doesn't make any sense to me. In Salana, again, they arbitrarily just burn 50% of the priority fee and then send 50% of it to the leader. That just doesn't make any sense for an incentive compatibility thing. And the result of that is something like Jito can just directly transfer 100% of it.
00:37:39.646 - 00:38:36.080, Speaker C: Instead, let's just fast forward this thing and you could send 100% along. So in Ethereum, you see there's kind of like an indifference between, if you're a searcher trying to express preference to a builder, you can either attach a high priority fee, or you could attach a coinbase top transfer which directly transfers to eth. And those two things are more or less the same in Ethereum world. In Salana world, it just doesn't make sense to use a priority fee for this fast lane if you really know what you're doing, because the leaders in set device obviously take 100% of this thing by this out of band channel. So that's the kind of basic idea between the two. A lot of the discussion in Salana is around, like, okay, is that the right method for the base fee? This was kind of like the naive, simple way to set it in the first place was just like, yeah, signature verification is roughly the more computationally intensive part of the transaction. So let's just put a flat thing on everything.
00:38:36.080 - 00:39:12.910, Speaker C: The problem with that is obviously like, okay, but now there's a lot of demand to get into a block, and I'm a user, and I just want to know what the fee to get into the block is. Just tell me what the fee is, and I want to pay it to get in. You can't really do that in Solana. So priority fees are trying to roughly add that on to the user of allowing them to express like, hey, I just want to get in this blockman, please let me in. The problem is that is also a relatively imperfect mechanism, so you still get the result of when the network is super congested. You can have this, like, hey, I attached a priority fee, but then my transaction just got dropped like 2 seconds later. Like, what the hell? I try again, and the same thing happens.
00:39:12.910 - 00:39:37.800, Speaker C: You can still see that in really congested times. Whereas while eIp one five nine is like a slower mechanism, it is much more accurate in kind of today of like, hey, I know what I need to pay to get in. Maybe it takes me a block or two and it's going to get included. So it is kind of like trading off those two things of the speed versus what is more accurately, pricing resources and allocating them based on who actually wants them.
00:39:38.330 - 00:40:25.634, Speaker B: If I can double click a little bit, just to maybe clarify for the listener some of the things John was saying. I think an important motivational point about fee markets is to the base fee in ethereum is very much like the network saying, you need to pay this amount just to get in the block. And so it's kind of an auction of, do I get in or do I not? Right? And then the priority fee is like, where in the block do I want to be? And this is like a very hand wavy type. It's like trying to do that because there's not like segmented blocks. It doesn't really work that way. But essentially it's trying to let you express like, hey, I'm willing to pay so much. Don't only put me in the block, but put me in first right now.
00:40:25.634 - 00:41:39.418, Speaker B: Builders, that's a really imperfect mechanism because builders have other incentives to look at what else is going in the block and reorder things to the best of their profit, because none of this is in protocol. But it is good to call out that, roughly speaking, this is kind of the motivation, right? You want to have a way to say, I just want to get in, and then you also want to have a way to say, where in the block I want to be. I don't think either fee mechanism is perfect in segmenting that, but it's just good to understand that this is kind of like the fee market problem, and that there is a little bit of a distinction between different actors who want to do these things and so on. The where to get in the block, you see this being a lot of times out of protocol with flasbots and Mev and all that stuff, right. Whereas the base fee is just trying to model what it is to get in the block. Going back to Solana fees, I guess what I wanted to kind of put a finer point on there was the base fee. Right now, on ethereum, it's dynamic in the sense that it's looking at how much the block is.
00:41:39.418 - 00:42:32.750, Speaker B: Right. But it's also dynamic in the sense of that it's looking how complex the transaction is. And in Solana, there's a discussion about separating both those things. Okay? And so it's kind of an open discussion if they want to make the base fee dynamic. And it's also a separate, open discussion if they want to charge per complexity. And so the reason I want to describe all that is because you do have to understand that these are both different considerations that are being talked about in Solana right now. And it's not just like, oh, let's copy ethereum, it is very much like, okay, do we want to scale them with complexity? And then also, do we want to scale it for block inclusion, or because block inclusion through priority fee is an inaccurate mechanism? Maybe the priority fee is the thing that captures the block inclusion, and the base fee just captures complexity.
00:42:32.750 - 00:42:39.950, Speaker B: And so that's kind of the philosophical difference there between the two fee models.
00:42:40.690 - 00:43:21.318, Speaker C: Yeah. And one of the things I'd probably kind of double click on again a little bit is that point you're making of the inclusion versus ordering. So that is an important point of both for Ethereum and for Solana. There is no deterministic ordering in protocol of no matter what fee you pay, there is no guarantee that you will get in the block at the position that you want. That is roughly a strong guarantee that a builder on Ethereum can give you, because they're just going to build the block and you're going to tell the flashbots builder or beaver builder or whoever else that you're sending it to, like, hey, please just only include this transaction if I actually get what I want, and if I don't, then just throw.
00:43:21.334 - 00:43:22.362, Speaker B: It away and I won't pay it.
00:43:22.416 - 00:44:35.646, Speaker C: But that is fundamentally an out of protocol guarantee that you're assuming that the builder is rational and that they are going to build up all these transactions and then they will sort them in the block according to what is the most profitable, and if your transaction reverts, they're just not going to get paid for it. There is at least some discussion, I would say, in Solana, of you can make ordering deterministic within the protocol. And there's some discussion in Solana, and there's actually a reasonable amount of discussion of something similar to this in arbitrum, where the basic idea is you would just have the kind of first passive consensus. They're just like signing off on like, hey, these are the transactions. This is the order that I saw them throw them in there without having an execution of them of like, hey, this is the result of it. And what you would then deterministically, it would be part of consensus is you would just order them by priority fees, effectively, and then the higher priority fees in order would just be like at the top, and they would get priority. So this is actually very similar to what arbitrum is going to do with, or at least is proposing to do with time boost, which is this sort of mix of, you're going to have this deterministic ordering of the highest priority fees.
00:44:35.646 - 00:45:11.226, Speaker C: We got the top. You do end up with. The interesting thing is this sounds like a good idea, at least on the face of it, because, yeah, the person who paid war should go first. A lot of the pushback on it is like, you can see the office result is like, most of these transactions, at least a lot of them are going to fail. And you do end up with an all pay auction of like, you're just going to have a bunch of failed transactions in here that we kind of threw in there, and then someone's going to get the highest bid, but they didn't actually price it accurately. A bunch of spam in there. What a builder on Ethereum, someone out of protocol can do is just like, hey, you sent me all the bids.
00:45:11.226 - 00:45:52.590, Speaker C: I'm just going to include the one that actually won and put that in when I build the block again. It's this trade off of what is the more efficient use of resources at the end of the day versus do we want to just do this thing as fast as possible, jam it in there, and then we kind of figure out the ordering after whatever works. There is generally that latency versus efficiency trade off and allowing an out of protocol actor to kind of do these things. I don't think that Solana would go in that direction. I don't think that proposal makes a lot of sense. I think more of the serious discussion, especially in the shorter term, is like, what should we do with the base fee, and how do we make the priority fees better and more accurate to express what a user?
00:45:56.930 - 00:46:42.590, Speaker A: So I think that makes sense. Maybe zooming out a bit, touch on this topic of governance, kind of how it's different in each ecosystem. I think Solana has kind of had this history of an ability to move really fast, but I think that's changing now with the emergence of these alternative clients like Jito. And so maybe things will slow down. But I guess the broader point is how do you view, and I think the opposite argument can be said in ethereum, where things can maybe move too slowly in some ways, and that's always been a criticism, maybe. Guys, let's jam a bit on what makes sense. How does this play out in the long term? What differences are you guys noticing?
00:46:44.050 - 00:47:42.960, Speaker B: Okay. To motivate that a little bit, I do want to step back and talk about why the governance question comes up in the fee discussion. And it's to the point that John made is a lot of scheduling doesn't actually have to be in protocol. A rational block builder is, if there's the right fee mechanism, is motivated to extract those fees in a way that gives the best ux for price discovery as well as to the user. Right. This is very much, if the fee mechanism is designed the correct way. And so it becomes very much a question of like, can we design a fee mechanism that when an out of protocol scheduler looks at it, they're motivated to schedule it in a way that's best for the user and best for the network itself.
00:47:42.960 - 00:48:27.694, Speaker B: Okay. And that's really this big overarching question. Right. And this is like, what governance is trying to figure out is what do we believe is the proper incentive mechanisms such that the scheduling and all that is done in a way that's healthy for the network? Okay, so typically on Ethereum, right. I think I wasn't involved in a lot of the early governance, but just empirically it's a much more robust conversation. I think that's very much because they have multiple clients and I think you're starting to see this rear its head in Solana now is that you have the fire dancer team looking at the client code. You have Jito looking at the client code.
00:48:27.694 - 00:49:37.566, Speaker B: You have some really sophisticated Defi teams looking at the client code, and now you have labs, right? And so you have four pretty sophisticated actors who all have seen how the sausage is made and see the problems in the scheduling and the fees, and have slightly different opinions on how those incentives should be sureed up to motivate the scheduling problem for their particular use cases. And that's why this discussion becomes a governance problem. And so just anecdotally, I think at breakpoint this year, there was a camp, and there's a discussion on rpcs and making them faster, and the room is just like, pack. Okay? And then it moves to a governance discussion, and most of the room leaves. And it's like me and David from bankless sitting there and just like, the five people talking about governance on stage. And I was like, this is incredibly ironic. And so I think to date, the governance has been very much because there's one dominant client.
00:49:37.566 - 00:50:16.100, Speaker B: It's like, your vote is, do I upgrade or not? In the same way that bitcoin governance is like, do you run that client or not? And if you don't, it's a hard fork, right? You just get forked off the network. That is your vote. Now that these problems are starting to touch multiple clients, it's very much like. That can't be. It like, fire dancer cannot move differently than the Solana labs client, or they're separate networks. And I think we're starting to really see this governance problem come to a head in these fee discussions because of the different motivations of the different.
00:50:19.510 - 00:50:42.700, Speaker A: About. And I think, john, you kind of alluded to this earlier. What is the like, what do you guys think? How would you predict fees will pan out on Solana? Is it like, the obvious thing is that we don't burn half of it and we just give it all to the validators. But what about the base fee? Do we think that'll go up? What are some ideas that are proposed in the discussions you guys are listening in on?
00:50:45.070 - 00:52:00.322, Speaker C: So I don't think that there is a perfect answer if I'm to cut to the real end of it in 510 years from now. I think we just pick a spot on the trade off spectrum based on what is this thing meant to be, because I just don't think that there's a perfect solution to all of these. And that is actually part of also why I'm excited to see more SVM forks in the future and people like eclipse, because I think that they should be much more incentivized to just be like, we're going to change something, see if it works. I think that more SVM chains are going to be willing to do that, especially ones that are in the more ethereum community and mindset of they're going to be more inclined to play around with the things that are like, yeah, we see this works in Ethereum and that's the community, and they're going to be similar research community. I think people are going to play around with different things and I think that'll be great. And I think that you end up with some balance in the middle. I think the stuff that is probably more likely for Salana in the medium term, the one that will definitely happen, is the kind of outer protocol of just improvements to the scheduler that is going to change that.
00:52:00.322 - 00:52:45.178, Speaker C: There is going to be new work. I think it'll probably be released in 118 and then probably mandatory after that. But they're expected changes in the scheduler to just kind of alleviate these. It's not a perfect solution, but the things that we're talking about of like, it's just like a pretty imperfect implementation of the thing today. There's a lot of randomness and trying to just make that a generally more reliable mechanism of just making the priority fees just do a better job of what they're trying to do as opposed to the rough first implementation of it. That's an out of protocol thing, I would say the more in protocol stuff that gets talked about a lot more is the changes to the base fees. I think that is more likely as a medium term thing as opposed to a lot of the other stuff that's talked about.
00:52:45.178 - 00:53:34.254, Speaker C: So the simplest thing to do would be to have the base fee, at least to some extent, take into account what are the resources being used by this transaction. So the simplest way to do that is just to make the base fee. You literally pick a fixed number like it is today, of like 5000 lamp ports, and you basically back into the math of what is the fixed number of lamp ports per cu that ends up with roughly the same base fees being per block. We're just attributing it to Cus as opposed to signatures. There is a very reasonable counterpoint that signatures actually disproportionately do take a reasonable amount of effort, like signature verification, and you shouldn't just use Cus. So it would also potentially be reasonable to have some minimum amount to account for. The fact of this is the signature verification cost, roughly.
00:53:34.254 - 00:54:15.726, Speaker C: And then if you have a bunch of cus, then there's some additive amount, like some multiplier beyond that. The simplest way to do that is to just have a fixed number of like this is the base fee. And whatever the formula is that still wouldn't be dynamic in the way that EIP 1559 is where the network level fee that is actually trying to meter demand is changing from block to block. My guess is that some variation of that will eventually work its way into Solana. I think that it just will need to at some point. I don't have a high degree of confidence of what that will look like. There is a lot of talk of should you have this number.
00:54:15.726 - 00:55:03.440, Speaker C: Some of the proposals are to just basically have the validators after each epoch or whatever, or whatever amount of time. Say like, hey, this is what we think it should be adjusted to. This more accurately accounts for our resources and the current pricing of the network. And then you take some median of that, and that's the base fee. You could do an EIP one five nine, like one where there's just this global base fee and you'd look back of like, okay, how full was the last block based on some target? And then we increase or decrease it. Another one is, and this is where you start to see like, there's a ton of different proposals. Another one is to like, okay, can we try to do that locally for different accounts of instead of having this globally, ip 1559, like Ethereum has, do we have a different curve basically for each piece of state? You can imagine how that would get very complex very quickly.
00:55:03.440 - 00:55:14.882, Speaker C: And I'd say probably the last major one, which we'll definitely get into is pra, if you want to take that one, Kevin, as a start, I can delve into that.
00:55:14.936 - 00:56:19.400, Speaker B: So I do want to call out a couple of fine points, is that you can kind of back in to the lampports per cu math by looking at the validator votes. And so I think this is one way of thinking about profitability of the sustainability of the network, is you can actually say, what's the minimum stake that I'm going to say that you need to be profitable on the network. And then how many other validators votes do I need to get to meet that break even profit? And then you can back into a number of how much a vote per cu should be. So you can make an assumption of like, I want 80% of the validators to be profitable with a validator set size of, say, 10,000. And then you can back into a number of what the base lampports per cu should be based on the cus of a vote. Right. And then from there, you can price everything else based on cus because you have a base number there.
00:56:19.400 - 00:56:47.278, Speaker B: I think the part about the validators voting for it, because that vote number has a numerator in Solana like lamports. Right. Is having the validators be able to say, oh, okay, the network economics have changed. We should also be able to vote on that. Okay. And then really just offloading the contention problem to the priority fees. But like John was saying, we'll see if that works.
00:56:47.278 - 00:57:20.858, Speaker B: There might need to be, like, an EIP one five five type mechanism as well. I think the way the thinking is right now is one. The first thing that needs to be done is remove jitter and scheduling. And so that's just, like, not have this four lane problem right now. It's actually, like, in a lot of cases, your guarantee of inclusion is actually more timing based than priority fee based, and that needs to change. The priority fee does need to actually capture your preference, not how close you are on the network or how much you can spam or any of that. Right.
00:57:20.858 - 00:58:10.790, Speaker B: And so the scheduling problem kind of helps that. And then what we talked about with the fees, and then there's another kind of double layer here when we look into eclipse and app chains and the level of sovereignty that they have over their block space. And this is really where it gets, like, on a general purpose chain, there's this balance between how sovereign should your block space be, right. On an app chain, you get to make all the decisions. Right. On a shared state chain, you're kind of subject to the fee model of the chain itself. And so if you have a special application, you don't really have a way to say, like, wait, no, this is my state, and I just want to charge more for it.
00:58:10.790 - 00:58:49.574, Speaker B: You know what I mean? Screw it. I just want my app to have some sort of fee capture mechanism. Because why? Right. But I can't do that in Solana right now. And that's, like, a big reason why you would go to an app chain, is because you can be like, okay, I can do things like blast, where I can just juice yields because I want to. Right. And I think something we saw that was pretty funny is Zeta was getting sibyled after the airdrops, and they just go, okay, we're just going to raise state rent, right? So if you make an account, you're just going to have to put up a bond of like 2.5
00:58:49.574 - 00:59:16.094, Speaker B: soul to even trade on us. Right. And so that way it disincentivizes bots from just making a bunch of accounts and spamming them. Right. So there's definitely this motivation for apps to want to have some control over their block space. And pros are kind of a way to essentially let them express that. So what a pro is, what it stands for is, and this is like, really hard naming, so bear with me here.
00:59:16.094 - 00:59:26.594, Speaker B: But priority, no. Right? Lock account fees. Do you know, John, what is it?
00:59:26.792 - 00:59:50.306, Speaker C: It's program rebattable account write fees. We had a meeting on Tuesday night with 20 of us talking about Salona fee stuff, and it took the room like 30 seconds or so to collectively come together on what the name between this and token 2022 and a bunch of other things, Salana could probably improve the naming.
00:59:50.338 - 01:00:01.310, Speaker B: On Salana, the engineering naming is terrible. And then, like, simds are the equivalent eips, and it's like a play on parallel processor sImds, but it's also like, it doesn't make sense.
01:00:01.380 - 01:00:02.602, Speaker A: It's super annoying.
01:00:02.746 - 01:01:02.480, Speaker B: Yeah, but, yeah. Okay, so essentially priority programmable, right? Programmable pros, we're just going to call it, allow an app to say, like, hey, if you touch my state, there's conditions on that state. Like, I can set conditions on that state, and you can actually do that right now in Solana, but only if the transaction is so, like, it ends up kind of exposing almost, you could think of it as a runtime bug. It's like in Ethereum, because state and data is together. When you go to access a program and it fails, it still fails within the process control of the executor. And so the app can still say like, oh, well, you failed within my context, I'm going to charge you anyways. And Solana doesn't have that mechanism yet.
01:01:02.480 - 01:02:34.560, Speaker B: And so the argument, even if you were to not agree with the sovereign block space argument, the argument is kind of like, hey, the VM should actually, a failed transaction should still be in the control flow of the app, right? It shouldn't just revert, because what we're seeing is on Dex markets or stuff, you'll see arbitragers come in, lock a bunch of accounts and make a bunch of trades and see which ones are profitable. And if none of them are, they'll just put a forced revert in there, and then they'll just revert out, and they don't get penalized for doing any of that, because the program doesn't get to say like, no, you can't do that. You can't walk and revert and not get charged for it. And so essentially, prods are kind of trying to express a way for an app to say, maybe I want conditions on my state, okay? Maybe I have a piece of data that should never be called into from anything other than my program. Right? And so because in Solana you can declare state up front, some random actor could just be like, I don't want this market to get liquidated, so I'm just going to spam this account. And so the program itself can never get access to it, okay? And so then as an app, you're going like, crap, I'm trying to do something. Some arbitrager is locking my account, and I have no way to penalize them for doing this incorrect behavior because they've declared that they want to lock it up front.
01:02:34.560 - 01:03:00.840, Speaker B: And so pros are a way to say, okay, you actually have to pay for that. And so it disincentivizes spam in the sense that they could be like, no, you're going to get taxed if you try to do that pretty heavily. And otherwise, this is my state. I have control over it. And then it gets into conversations of sovereignty. Where do you feel like the programs would have sovereignty over its state? Or should it be more of a network thing?
01:03:05.370 - 01:04:05.418, Speaker A: For sure. It's great we finally got to the right way to handle that acronym. We have the kind of ultimate set of people here for this, I guess, final topic or question. And I know it's not directly related to fees, it's more indirectly. But I think in an earlier answer, John alluded to this, which is that we can start to see experiments with this, with projects that are using the SVM but aren't literally Solanas, like eclipse, for instance. Can you help us and the listener understand better? Concretely, what does this stack that eclipse when they launch? What would that look like? So eclipse is the SVM, right? So the smart contracts are written the same way you would do it on Solana, but it's very much in the eth ecosystem. So help us fill in the blanks here in terms of what are they borrowing from Solana? Exactly.
01:04:05.418 - 01:04:10.620, Speaker A: And then what are they borrowing from ETH? And then what end user experience is being created by all?
01:04:13.310 - 01:04:49.170, Speaker C: Yeah, the intention is for the end user and developer experience to be like, abstract away everything that is different in the back end because the execution environment just looks the same. It's an SVM fork. So keep that really looking the same and like, hey, this is what nodes run. Everything looks roughly the same. The basic idea would be that it's like this is such a made up word, but it quote unquote settles to Ethereum in the way that everyone describes it. Concretely. What that means is basically you have a bridge contract on Ethereum, which is you're effectively like delegating your fork choice rule to that bridge and to the underlying chain.
01:04:49.170 - 01:05:19.502, Speaker C: It's kind of recognition of the fact that hey, the purpose of this chain is really in service to scaling the underlying chain. It's where all the user is going to come from, all the important assets, all the interesting stuff. It's going to be in that bridge anyway. And then what you're functionally doing with a roll up like this. So they will use Celestia for Da. What you're functionally doing is you're basically just replacing the consensus of the chain with this other DA layer. Da layer is a blockchain.
01:05:19.502 - 01:05:55.358, Speaker C: It's just another chain that you put. Every chain is a DA layer. You are posting your data to another chain which is optimized to just have a shit ton of data sent through it without executing it, without doing all these different things. It is just optimized for that single purpose. And so the main trade off that definitely is a trade off that it allows you to kind of do is like, hey, we have this different consensus set that handles all this stuff for us. We're not going to deal with this complex. We try to have 2000 validators that are trying to globally sync around the world and immediately update the state of the world.
01:05:55.358 - 01:06:48.494, Speaker C: And all these million problems that we just talked about that are like, there is no perfect solution to all these things. It's super complicated, it's unclear if it works like all these different things. It's like, hey, we're just going to have Celestia consensus like 12 seconds later or 15 seconds later. And in between that we're just going to have a single sequencer or a small sequencer set that can just do all the optimal things that we just talked about of like hey, we could just have continuous or really fast batching and just do the optimal ordering in that based on, we know this is what users want, this is what they're trying to express, all those different things. It greatly just simplifies the design space and just allows you to move quicker. They're going to partially by need have different fee markets than Solana because they will have a fundamentally different underlying DA layer market. That is a market that users will have to pay for.
01:06:48.494 - 01:07:11.538, Speaker C: So that will fundamentally change it. And then why not just go experiment with things, try different base fees, go implement Prof. Fees, go do these things on these different SVM forks, because it's going to get increasingly harder and harder to do. It's the same thing on Ethereum. Exactly. Ethereum is not about to go change their fee market. This is like one of the few things, though, like making fundamental breaking changes to the EVM.
01:07:11.538 - 01:07:26.154, Speaker C: Like other EVM chains are bound by that. They're not going to go do that. But you can play around with fee markets. That is within the realm of. That's one of the things that you can actually play around with quite a bit to a meaningful extent. And different rollups have different fee markets. They do different ordering mechanisms, they do all these different things.
01:07:26.154 - 01:08:34.160, Speaker C: So different SEM chains can go play around with these things because Solana is being practical, not going to implement most of these things, particularly in a shorter time scale, because of the things that we were talking about earlier, it is getting more mature and they're like, hey, we have multiple client teams now and we think this is a good idea, but the fire dancer guys are telling us this is a really bad idea and they don't want to implement it, so we're probably not going to implement it. You start to have more of those, as opposed to one streamlined team that can implement it, see what happens, see if it works. There is that more natural kind of early stage incentive that you're going to see that more, and profits are only, I think, are cool. I think that Solana, they make sense, especially philosophically to me. I think for general purpose chains to work in the long run and not have everyone eventually have this incentive to go have my own chain. You do need to kind of push the boundaries of like, what is the most control that we could possibly give to developers if they want it. And that's one of the good things about the pro design, is if you don't want to implement these on your app, it's like, don't implement them, set them to zero, and then you don't think about it and you don't really need to deal with it.
01:08:34.160 - 01:09:20.574, Speaker C: A lot of the trade offs within the Solana community and talking around this is like, it seems additive, it seems like it makes sense, but it's a lot of complexity and it's like, hey, if we just improve the schedule and improve priority fees and do all these things, is it going to solve enough of the issues anyway. And so that is a lot of the Solana fee market conversation is all of these things are related to each other. They're all addressing similar problems and different combinations. And there's a lot of like, oh, do we really need this thing? If that other thing sort of fixes it well enough? And that's like, the thing with local fee markets is they're not perfect, but they're definitely strictly additive, it seems like, at least to some extent. And it's like none of these things are perfect. And it's just like it's to some degree whack a mole. And it's like we're just going to keep trying different things.
01:09:20.574 - 01:09:29.060, Speaker C: And that's what Solana should do and that's what other chains should do. It's fun and it makes sense. Nobody knows what the perfect solution any of this shit is right now. People got to try everything.
01:09:29.510 - 01:10:04.250, Speaker A: Completely agree. And I think that's always been one of the key benefits or benefits of Solana's approach. Building a new blockchain for first principles and just shipping fast and seeing how to fix it in real time. I mean, it's not ideal to do that, but it feels to me like the only way to do it in the long run. Just help me understand one thing really quickly. It's a very simple question, but we're talking about eclipse and we're talking about settling in air quotes. I know it's a very hard to define what that really means, but just help us understand why is it cheap then? Because Eth is expensive.
01:10:04.250 - 01:10:20.740, Speaker A: Touching mainet ETH is just fundamentally a costly thing. So what part of the stack makes it possible for that to be cheap? How is it cheap for the end user? Executing on eclipse? Is Celestia doing all that? Is that the layer that's making this all possible?
01:10:21.190 - 01:11:02.800, Speaker C: Yeah, there's really two parts. So the settlement part of Nel two is stupidly cheap. It's like you're posting some state routes and some proofs every once in a while that's really cheap. The costs to end users are primarily going to be the cost of all of the data that you're posting. So Celestia, as being a new DA layer, is literally just optimized for solving this one problem of like, hey, how do we just have gigantic blocks and just send a bunch of data around and sign off on this thing and do data availability sampling on it for like, clients make that available, but we just don't worry about executing it. Like, the roll ups can go figure that out themselves. So that is the whole point is like, Celestia is optimized for exactly that.
01:11:02.800 - 01:12:18.374, Speaker C: We'll just have a lot more data available than if you were to post data on Ethereum, which is like super constrained. Even with four e 44, like Ethereum, DA will be very small. The other part of it then is just like, this is where the more local contention comes in, is like, what is the execution environment that you're using? So you can have a situation where even if you're using a really cheap Da layer of, let's say you have a single threaded, just like normal EVM roll up, and it has pretty low gas limits because it's just like super conservative, it has these state growth problems. Even if your Da layer is cheap underneath. If just like, everyone wants to use that one roll up, well, then the gas prices are going to go up on that roll up. And so that is what eclipse is trying to do, is alleviate both of those of using the Celeste underneath for the steady state of what is the cost of underlying DA. And they're like, hey, we're just going to use a better execution environment than all these other chains so that we're not bottlenecked within the execution itself of like, hey, we could just have a parallel execution environment with higher gas limits, closer to what Solana is, as opposed to just like a typical EVM fork, which has lower gas limits, is being conservative around state growth, like all those different things.
01:12:18.374 - 01:13:01.590, Speaker C: So there's different bottlenecks depending on what is the bottleneck in your roll up. But both of them are very present. We see it at times where gas fees will spike up on arbitrum, but they're like the same on optimism because everyone just wants to do a thing on arbitrum. That's where it'll help that you're using their execution environment that just is going to have higher limits on it. Versus using celestia will help with the fact that their baseline costs for using optimism and arbitrum and all those right now is like whatever, just to do a simple transfer or swap or something like that. And that's because Ethereum DA is expensive, so it's just swapping out those different pieces, whereas salana itself is responsible for all of those different components. Salana is its own DA layer.
01:13:01.590 - 01:13:06.998, Speaker C: It's like the validators send it around. Is the, that is the market there?
01:13:07.164 - 01:13:49.958, Speaker B: Yeah, I would point out a little bit of like, this is where I'm like, we'll see. Because on eclipse you get rid of vote overhead for bandwidth right, because you just have one sequencer. Right. But vote bandwidth is kind of what's going to end up moving to Celestia in the sense that you're going to have a lot of roll ups competing for this DA. Okay. And so if the eclipse fork wants to use everything that celestia can provide, there's going to be another fee contention auction on the bandwidth of celestia. Right.
01:13:49.958 - 01:14:38.802, Speaker B: And so even though you got rid of the votes, you might have ten different roll ups bidding for the same da space on Celestia. And as much as Celestia can scale, and it is like a sublinear scaling model, it does have physical limits. Like, you can't get around physics. Right. And those limits tend to look somewhere along the same lines of how many validators can you support just because of bandwidth overhead from votes? And so it is shifting the burden of these things to different layers. I think I'm still in the camp of we'll see, because Celestia just launched, and maybe it works really good, but if it gets a lot of Lindy and every Laurel up is like, I trust Celestia. I only want to use Celestia.
01:14:38.802 - 01:14:43.400, Speaker B: You're going to see da V market spikes as.
01:14:45.450 - 01:15:54.570, Speaker C: No, no one is cheating physics in any of it's. It's all different tradeoffs. Those will be the, I would say, two questions for something like Celestia in the long run is like, one is the fundamental question of how big can you get the pipe of just, like, raw data bandwidth through the system of something like Celestia versus something like Solana. If we just focus on doing exactly that, can Celestia make that data pipe way bigger than Solana can make it at the end of the day, because we have a different consensus and we don't need to worry about execution and really fast blocks and blah, blah, blah and all these things, and it's just data bandwidth, just like, send all the shit through there. Can you make that pipe a lot bigger? That's one fundamental question. And then the other fundamental question is, right, does everyone want to use the same pipe? Or the second that Celestia starts to get full, do we just spin up another celestia or just go use a veil or go use whatever the new thing is? Or are there real network effects? Like, everyone actually wants to be in that same pipe? I tend to be on the side more of the ladder of if Celestia starts to get expensive, people are just going to go use some other. Like, we already see that with, like, ethereum is really expensive, and that's why there's an incentive to go use these other things.
01:15:54.570 - 01:16:06.546, Speaker C: If Celestia started to get expensive, I think it just would lose its value proposition. So I think it's going to be just like, see how big the pipe can be and then if we need more data pipes. You're going to make more data pipes? Yeah.
01:16:06.568 - 01:16:29.240, Speaker B: Then we run into problems of synchronizing across roll ups and shared sequencers. And even if they're using different Das now, the Sarah sequencers have to all pull from those das in order to synchronize the state between the roll ups. You don't get around these problems like some layer is going to handle it and the real question is, will they actually handle it better separately than together?
01:16:31.050 - 01:16:44.206, Speaker A: Amazing. Well, thank you guys, both John and Zen, for taking time out from your busy schedules and helping us all learn a bit more about what's actually happening behind the scenes here. Yeah, this is super fun.
01:16:44.308 - 01:16:45.774, Speaker C: Thanks, Ben. Some fun, guys.
01:16:45.892 - 01:16:57.050, Speaker B: Yeah, it was greater.
