00:00:00.330 - 00:00:00.880, Speaker A: You.
00:00:02.450 - 00:00:25.960, Speaker B: Hello and welcome, everyone. My name is Peter Robinson and today at the end, this is the Ethereum Engineering Group meetup. And today we've got Jaden, who's going to talk about ERC 655-6551. And so, Jaden, why don't you tell us a bit about yourself and tell us and then maybe present your slides and tell us all about ERC 6551.
00:00:26.810 - 00:00:36.374, Speaker A: Sounds like a plan. Let me know when you all can see my screen here. I'll pull up some slides. Yeah, sure. Awesome. Sweet. Well, very nice to be here.
00:00:36.374 - 00:01:00.154, Speaker A: Thank you all for having me. Excited to chat with you guys a little bit about, ERC six, five, one and some of the things we're working on. So, yeah, I'm jaden. I work with a company called Future Primitive, where we are an onchain product studio. We do a lot of weird experiments in Web three. We build products, we build NFD collections, we build tooling, we do a lot of stuff. And recently we've spent a lot of time building experimental NFTs.
00:01:00.154 - 00:01:36.106, Speaker A: We've been thinking a lot about what does an NFT look like when it's more than just an asset that sits in your wallet and when it can do more than that. So we've done some weird experiments. Like, what if you had two NFTs that could talk to each other? What would that look like? We've done some experiments with burn mechanics. Benny, one of our founders, was on the founding team of CryptoKitties and later went on to launch cheese wizards and NBA TOPSHOT. Worked at Dapper building a lot of these kind of new novel NFT experiences that brought a lot of people to the Web three ecosystem. And so we've got a lot of experience playing with NFTs. And ERC six five one came from that.
00:01:36.106 - 00:02:21.654, Speaker A: We've been working on some projects where we wanted to build out some equippable features into an NFT project. And we went down all these different rabbit holes of using all sorts of different tools to build that. And we hit on this idea that really resonated with us. And this idea was token bound accounts. We were like, what if we just gave every single NFT out there its own wallet? What if NFTs could own wallets just like you or I could own a wallet? That would mean that every single NFT out there would be able to own other NFTs or own ETH or own ERC 20s. When you give an NFT a wallet, you let it own any asset that exists on chain just out of the box. It also means that you give NFTs the ability to take actions on chain.
00:02:21.654 - 00:03:06.854, Speaker A: So if I, as a user that has a wallet, can go and mint another NFT, my NFT can now go and do that same action as itself, as its own self contained identity, or my NFT could go swap coins on uniswap or whatever action you wanted. And third, it means that the NFT has its own identity on chain, its own wallet address, and its own transaction history. It records on chain a history of all the actions that NFT has ever taken. And so, as we were building out this project, we kind of stumbled on this idea of, what if we just gave every NFT a wallet? And for us, it solved a lot of our use case. We were building out equippables. We're like, oh, what if the NFT just owned its own clothing? And then you could equip the clothing onto and off of the NFT. It just seemed like a really good mental model.
00:03:06.854 - 00:03:35.054, Speaker A: And so we shared it with some other folks friends who are building experimental NFTs as well. And they're like, wow, this is really cool. This solves a lot of our problems. Can we use it? And so that's when we were, hmm. There's more to this than just some toy NFT projects we've been working on. This is something that has the potential to be really powerful as a standard, because when every NFT has this capability, not just some NFTs, it gets really powerful. So that's what 6551 is in a nutshell.
00:03:35.054 - 00:04:12.390, Speaker A: It gives every single NFT on Ethereum, from the very first NFT ever created to the NFT project you launch next week. Every NFT already has a wallet address reserved, unique, and assigned to that NFT, and 6551 is what makes that happen. So I'll get a little bit technical in this talk if folks are interested in that. If I'm going too technical at any point, please feel free to have me pull back and I could focus a little bit more on use cases or things like that. But how 6550 works under the hood is oh, actually, let me just show you a demo. I'm a visual person. Visual demos are easy for me to understand.
00:04:12.390 - 00:04:44.594, Speaker A: So let me pop open another tab here and show you what I mean. This is the genesis CryptoKitty. This is one of the first NFTs out there CryptoKitties helped form the ERC 721 standard. So, this is this CryptoKitty on uniswap or on openc. If I go to the URL bar and I change the URL to tokenbound.org, which is an ether scan like explorer we built for tokenbound accounts, you'll see, this CryptoKitty has this wallet address. This wallet address is reserved for this CryptoKitty.
00:04:44.594 - 00:05:14.810, Speaker A: It's owned by this CryptoKitty. It's permanently bound to this CryptoKitty. If you know about soul bound tokens, this is kind of like the inverse of a soul bound token. Instead of a token permanently tied to a wallet, it's a wallet permanently tied to a token. And ownership of this wallet goes wherever the token goes. So if the owner of this CryptoKitty sells the CryptoKitty, the new owner will have ownership over this wallet and ownership over all the assets inside of it. So you can see this CryptoKitty owns a coinbase shield Azora NFT that it has collected.
00:05:14.810 - 00:05:44.330, Speaker A: And so this NFT is able to own any assets, even if that other asset has no concept of being owned by an NFT. A couple of other things you can do with this. This is the collection that we originally had the idea with. It's called sapiens. We wanted to build an NFT collection where each character could collect clothing and equip those clothing onto and off of it. And so you can see this little Sapien has its own wallet address and owns these different assets on Ethereum. So giving an NFT a wallet lets NFTs own anything on chain.
00:05:44.330 - 00:06:24.078, Speaker A: So here's how it works under the hood. Right now, we're all used to NFTs existing in smart contracts, right? There's lots of NFT smart contracts out there. And I can own a token with a specific ID, right? In my case, I own Sapiens number zero. That's my NFT. For this ERC 721 contract number B, there could be a token four five six, and someone owns that NFT. What 6551 does is it proposes a registry, a single contract that gives every NFT a smart contract address. And the way it does that is by deploying these smart contract addresses using the Create Two Op code.
00:06:24.078 - 00:07:16.314, Speaker A: The Create Two Opcode lets you deploy contracts to predetermined addresses, to deterministic addresses using a salt. And so what 6551 does is it derives that Salt from the token contract address and token ID of the NFT among some other metadata. So that means that every NFT has at least one account, but actually has a whole address space of accounts reserved for it. And so this registry both gives you query access to those account addresses so that you can start sending assets to any NFT even before the smart contract for its wallet is deployed. But it also lets you deploy the addresses or deploy the contracts at those addresses, which lets the owner of the NFT then control that wallet. So in this case, token number four five six owns this account C, which has a unique address on Ethereum. And it owns this account because it owns the token.
00:07:16.314 - 00:08:05.790, Speaker A: If it ever transfers the token, the token changes hands under the hood. This registry just deploys proxies, deploys normal EIP 1167 Proxies, minimal Proxies to implementations that implement a certain minimal interface. Basically, it gives you the ability to own assets, execute transactions, kind of the minimum viable definition of what an account is on Ethereum by specifying a registry and a very minimal interface for accounts. This is what lets NFTs have wallets out of the gate. It lets every single NFT, everything that's ever implemented the ERC 721 interface to now have its own unique wallet address, its own unique address space, and the ability to own any type of asset and do any type of on chain action. So I'll dive in a little bit into the code here. This is the interface for the registry.
00:08:05.790 - 00:08:37.194, Speaker A: These are the functions you can call on the six, five, one, registry. You can get the account address, which is the second function here, or you can create an account. There's five pieces of data that go into an account's unique address. The first is that implementation. It's a contract that implements the account interface and is what provides the functionality for that token account. The next three, the chain ID, the token contract and the token ID uniquely identify a given NFT. So that lets you know which NFT this account is bound to.
00:08:37.194 - 00:09:29.974, Speaker A: And the final, called Assault, lets you have multiple accounts for a given NFT implementation combination. And so this registry gives you insight into every single token bound account deployed and it also lets you deploy those accounts. Every account implements a very small interface. By default, you have to allow the receiving of ETH because being able to own an asset is what makes a smart contract account. It gives you an interface for executing arbitrary transactions using this tokenbound account. If you are the owner of the token that owns this account, it gives some read only functions for returning the token that owns this account, the account that owns that token, and then a nonce function which tracks changes to that account over time. And so as long as the implementation address you pass to the six five one registry implements this interface, then you'll be able to use the created accounts as wallets.
00:09:29.974 - 00:10:04.270, Speaker A: You'll be able to use them to interact on chain. So there's a couple of companies that are building really, really interesting things with this. When you give an NFT a wallet, you give it the ability to own assets, do things on chain and do anything that you, as a user could do. And so there's an NFT company called Parallel. They've been doing an NFT trading card game for quite a while and they're working on this game called Colony, which is like a space mining colony simulator where all of the players in the game are actually AI agents running around doing actions. And each AI agent is an NFT. The character is represented as an NFT on chain.
00:10:04.270 - 00:10:39.578, Speaker A: And every time it runs around and mines some new ore or trades ore for another resource or goes and pays for something at the market, it's using a token bound account under the hood to do those actions. So that your character NFT that you're playing the game as is actually collecting new resources over time. It's collecting ERC 20s. It's collecting NFTs. It's actually creating new NFTs in real time while it's playing the game. So by giving NFTs the ability to own accounts, you let NFTs play games like this as their own character. And if you go through you play this game a bunch, you collect all of these assets for your character.
00:10:39.578 - 00:11:25.920, Speaker A: If you go and then sell your character on a marketplace, all of those assets you've collected go with it. So by playing the game, you're actually increasing the inherent value of the NFT you're playing the game with. Another cool project is using it is a company called Iyk. So they do physical NFTs where you embed chips and pieces of clothing or garments or physical objects and those objects are then permanently tied to an NFT. What this means is all of those physical objects not only are tied to an NFT, but they're also tied to a unique account. So Iyk lets people come up to you, tap your hat, sign a signature on their phone using their finger and then mint that NFT to the tokenbound account of your hat. So your hat is collecting other people's signatures over time as you're interacting with it.
00:11:25.920 - 00:12:23.454, Speaker A: Another really interesting use case people are using it for is being able to support NFTs as users of your protocol. So this Lens announced this at ECC that they're planning to support ERC six five one accounts as users on Lens so that your NFT can have its own Lens profile and post as its own identity on this decentralized social media network. It also means that anything representative as a NFT can now own assets and do things. So your Lens handle, which is itself an NFT, can now own assets. So there can be things inside of your Lens handle within a protocol. So when every NFT comes with an account, that means protocols can start to adopt this pattern, adopt this assumption that your users might be NFTs and the NFTs that you use inside your protocol can actually own things and can actually collect additional assets on chain. So we get a lot of questions about this.
00:12:23.454 - 00:13:17.122, Speaker A: We've been building this for a little while. The standards has been out for or the proposal has been out for a few months in draft form and we get a couple of common questions over and over again. One of them is isn't this just fill in the blank. Isn't this just, ERC, nine nine eight? Didn't we solve this a long time ago? Isn't this just some other standard? Isn't this just some centralized company that I've heard about before that does something similar? And the answer is kind of but not quite right. We didn't invent the idea of NFTs owning assets that's been around for a long time. The earliest example that we know of was kitty hats where there was a chrome extension early on where your CryptoKitty could collect hats and could equip the hats on your CryptoKitty. This was back in 2018 ish and there's been lots of things since like, ERC, nine nine eight proposed a standard for NFTs owning other NFTs, NFTs owning, ERC, 20s.
00:13:17.122 - 00:14:07.662, Speaker A: There's been a few other standards since and I talk a little bit about why those are different than ERC six five one. But to start with, there were a couple of things that we thought were really important when we were designing this for our own use case that we think 6551 is the only thing that satisfies all of these criteria. When it comes to building a solution for NFTs to own assets and take actions on chain first is if it doesn't work with every single NFT, including existing NFTs where the contracts are immutable, then it's never going to be as valuable as it could be. Right? Part of the problem with earlier standards like ERC nine nine Eight was that the NFTs involved in that ownership relationship. They had to both implement the standard and that means that most NFTs couldn't own things, but some NFTs could. With 6551, every NFT could own things. It's part of the assumption of what makes an NFT.
00:14:07.662 - 00:14:57.902, Speaker A: Now the second was that not only should NFT, should every NFT be able to own things, NFTs should be able to hold anything, any kind of token ETH, ERC 20s, Lum 55s. If somebody creates a brand new token standard tomorrow and it's the next big thing, it will just work out of the box with ERC six five one because ERC six five one uses the Ethereum account model so it's just compatible with everything that's compatible with wallets. The third was that there should be any wrapping contracts. So some other solutions let you kind of wrap an existing NFT and then that wrapped NFT can be owned rather than the actual NFT itself being owned by another NFT. And this is a fine solution, but you lose some of the provenance of that NFT when you wrap it or when you burn it. So ERC six five one works without any wrapping of NFTs. NFTs can just own other assets natively.
00:14:57.902 - 00:16:04.770, Speaker A: The fourth is that it had to work with existing platforms. If your NFT can own other NFTs but nobody knows about it, right, openc doesn't know about it, the wallet you're using doesn't know about it, then it doesn't really own the asset. But with 6551, because ownership is represented using an account, you can go and look at the contents of an NFT's account on Openc and it'll work just like any other account because Openc supports indexing of account contents. So by using that native Ethereum account model to represent NFTs owning items, you get pretty much instant support with most platforms and a really easy path forward for them to support this standard more deeply. And finally, one of the reasons we felt this was really important to propose the standard was that this should be fully decentralized. There's a lot of solutions out there that let NFTs own other assets, but they're centrally managed, there's a whitelist of NFTs that can use them, or there's really strict rules about what your NFT can and can't do with its account by specifying a registry in the actual EIP that's deployed to a known address. The whole implementation is a part of this EIP.
00:16:04.770 - 00:17:02.746, Speaker A: It means that nobody ever owns it. It's a public goods, anybody can deploy it at the same address across any chains and it can be a trusted source to use, rather than relying on somebody's centralized registry to give you access to this. So as far as we know, ERC six five one is the only solution that fit all of these criteria. Yeah, I can chat a little bit more about some of the other standards if you guys would like to go into the very nitty gritty of them, but otherwise can move on. Another question we've gotten is why put the registry in the EIP? If you read the EIP, the whole registry contract, entire source code is in there, as well as deployment instructions and a canonical address at which this contract will live on any EVM chain. Some folks have asked why not just have an interface for registries so that anyone can deploy their own registry? And rather than having kind of one place that everyone points to, there's a couple of challenges with that. One, it's a lot of fragmentation for applications wanting to integrate the standard.
00:17:02.746 - 00:17:43.602, Speaker A: You then have to go out and discover all of the registries and all of the address namespaces for all of the NFTs and aggregate them and index them. And that's tough. The other thing is it means that there's two trusted contracts in this system. You have to trust the registry and you have to trust the implementation in order for you to trust the account contract. Because if a registry is upgradable or ownable, then somebody could censor counterfactual accounts or something like that. So by turning the registry into a trusted permissionless Immutable contract, the only trusted contract in the system is the implementation address that you as an NFT holder choose to use. It also lets you have cross chain NFT accounts.
00:17:43.602 - 00:18:43.882, Speaker A: And Peter with the cross chain bridge things, I'm sure you'll have some opinions on this, be interested. But what this allows you to do is it allows your NFT, which exists on a single chain, right? Its home is on a single chain. It allows the account for that NFT to potentially exist across multiple chains. So the same wallet address that's assigned to your NFT on mainnet can also be deployed on polygon or optimism or any other chain you want to use if the implementation supports cross chain execution using some kind of bridge or message passing service. And so this allows you to use your NFT on multiple chains without having the asset itself cross over chains or over a bridge, which introduces an interesting new model for building NFT utility. But there's a lot of benefits from having a single registry that's permissionless that's deployed at a single address that anybody can deploy and can deploy on any chain. Finally, what are the problems that exist? This sounds cool, right? Great.
00:18:43.882 - 00:19:23.954, Speaker A: NFTs can own things now, NFTs can do things now. There's this whole world of cool new use cases that we can have for NFTs. But what are the problems? Where's the catch? There's two trade offs there's two kind of things that come up when thinking about this. The first is ownership cycles. If an NFT can own other NFTs, that means that an NFT could own an NFT that owns an NFT, that owns an NFT. And you've essentially created a tree of NFTs, a graph of NFTs. But what that means is you could potentially introduce a solution where this NFT owns this NFT whoops and this NFT owns this NFT, but this third NFT owns the first NFT.
00:19:23.954 - 00:20:10.326, Speaker A: So now all the NFTs own each other in a loop. What happens then? Well, technically none of the NFTs own each other because with token bound accounts, the owner of an NFT has execution permissions on the account. But if the owner of the NFT is caught in this cycle, nobody's able to initiate those transactions. And essentially this is the burn mechanism. All of the NFTs and all of the assets and all the token bad accounts tied to these NFTs get locked up and burned, which is obviously not great, right? If you're a user innocently transferring your NFTs around, you don't want to introduce the scenario of having an ownership cycle. We didn't specifically try and rule this out in the spec for a specific reason. With ERC seven and 121 there's this concept of burning an NFT where you can destroy an asset that you own.
00:20:10.326 - 00:20:46.802, Speaker A: That's your right as an asset owner to destroy that asset. If we're going to build a system where NFTs can self sovereignly do things, you should have a right to burn your token about account as well. Even if that's a destructive action, probably not what you really want to do, it's still your right if you want to introduce this. So account implementations can mitigate this. It's really easy to mitigate this in a depth of N equals one, but anytime N is greater than one. So if you have three NFTs like this, it becomes more difficult to actually prevent this because the search space on chain is infinite, you can't iterate over it. There are some other solutions we've explored with this.
00:20:46.802 - 00:21:28.702, Speaker A: What if you could have a token bound account implementation that if it detects a cycle has been created, allows you to eject the NFT from that cycle and kind of regain access to it. There's some other potential solutions there, but this is one kind of unsolved problem that we've purposely left unsolved. People have already built interesting mechanics using this kind of burn mechanism of 6551 and implementations that want to prevent against this, there's a couple of paths forward for them. The other thing is the potential for fraud. So fraud with NFTs is nothing new. We've seen that for a long time. And one of the things that is a marker of the ability for NFTs to allow fraud on a marketplace is NFTs having state.
00:21:28.702 - 00:22:19.182, Speaker A: So anytime an NFT has state beyond just the token itself, whether that's the ability to claim an AirDrop, or the ability to change the artwork, or the ability to adjust the rarity of the NFT. Anytime there's something other than the token itself that represents the value of that NFT, there's the potential for fraud in the marketplace. And we've seen that with projects like artifacts, CryptoKicks, where there was a shoe and a vial, and if you equipped the vial on the shoe, it was much more rare. And so what people would do is they would equip the vial on the shoe, they would list it for a really high price on OpenSea, and then before anyone could buy it, they would unequip the vial and then sell just the empty, boring, non rare shoe. The person who bought it thought they were getting this super rare asset. They turned out to get a very boring asset. So anytime you have state in NFTs, you have this potential for fraud on marketplaces, because NFT marketplaces aren't built with the concept of NFTs having state in mind.
00:22:19.182 - 00:22:54.234, Speaker A: They treat NFTs as these stateless atomic assets that get transferred around. And so 6551 takes stateful NFTs to a whole nother level. Now, your NFT has a wallet and potentially multiple wallets. Those wallets own assets. And so very clearly, the value of an NFT is tied to something other than just the NFT itself. And so right now, there's not a lot of good paths forward to handle that at the marketplace level, because marketplaces are still thinking about NFTs as these static atomic assets. But there's been some really good research for marketplaces even before 6551 on solving this stateful NFT problem.
00:22:54.234 - 00:23:39.658, Speaker A: So Seaport has been leading the way on that. They've got this concept of a custom zone in Seaport where you can have custom validation logic on an order that only lets the order go through if certain on chain conditions are true. And so we're working pretty closely with the Openc team to create a custom zone that supports six five one accounts. So at some point you'll be able to create an order on Openc and say, I only want this order to go through if I get the NFT. And all of these assets in the token bout account for that NFT also come with the order. There's some additional edge cases around here because of approvals on assets and the fact that approvals aren't automatically revoked when a token bound account changes hands, when the NFT for a token bound account changes hands. So this is kind of an ongoing area of research for us.
00:23:39.658 - 00:24:34.614, Speaker A: If this is not well supported by marketplaces right now, we want to get to a future where marketplaces support this concept of stateful NFTs very, very widely. And one thing that we hope 6551 does is it gives marketplaces a common language to express state for NFTs, because right now, everybody builds their own AirDrop contracts or their own equippable contracts, or kind of their own systems for representing NFT state. But 6551 provides a more base primitive where every single NFT now has a tool to represent its state in an on chain way that works with the Ethereum account model. And so hopefully this will provide a common language for state that allows marketplaces that have a deep awareness of state to be built. So what's next? We've got this standard, we're working on it, we're trying to get it through. The obvious next step is we are trying to get this proposal, it's in draft state. We're hoping to get this finalized.
00:24:34.614 - 00:25:12.920, Speaker A: So we spent the last couple of months talking about this, getting people's thoughts, getting people's feedback, and we've gotten a lot of really great feedback so far that's worked its way into the EIP. So there's a couple of changes coming down the pipe. Likely they'll be out this week and so you'll probably see them if you end up reading the EIP a little bit later after this. There's a couple of changes that we're making that are going to capture a bunch of the feedback we've gotten so far and then hopefully we're going to be able to push for finalization after we've gone through this next wave of changes. So there's a couple of changes to the account interface that we've made. If you look at this interface, the receive and the token methods are still there. The owner method is gone.
00:25:12.920 - 00:25:50.020, Speaker A: The owner method was originally intended to allow compatibility with contracts or with systems that use EIP 173 ownership checks. So it uses the owner method to check if you are able to execute on behalf of the contract. But it kind of presupposes a single owner. There's some other issues with it as well. We got a lot of feedback that the existence of an owner method made it kind of unwieldy to use. So we've removed the owner method in favor of an Isvalid signer method. Basically, this is valid signer method will return true if you are the owner of the NFT which owns this account, or if you have delegated permissions to the signer as the owner of that account.
00:25:50.020 - 00:26:40.370, Speaker A: We've also replaced the nonce function with a function called state to kind of get away from this concept of nonces as just an auto incrementing value over time and give developers a little bit more freedom to represent the state of their accounts in a way that works well with marketplaces who can introspect the state of an account to prevent fraud. Those are the changes coming to the ERC six five one account. Also, we've kind of got two interfaces now. Instead of just the execute call function living in the ERC six five one account interface, every ERC Six five one account now has to implement an execution interface. This is an example, one that we show in the EIP, but there's a lot of efforts going on right now to potentially standardize what it's like to interact with a smart contract account. And rather than. Writing a specific interface into this EIP.
00:26:40.370 - 00:27:33.074, Speaker A: We would love to have the ecosystem standardize around some of the common ways to interact with smart contract accounts. And so we provide an example interface that you can use, but we say as long as you support an execution interface and you signal support for it with the IP 165, you're good to go. So if you're building NFP projects on top of ERC Six Five One, these things likely won't affect you too much as it's mostly just for people who are implementing custom implementations. If you're using an off the shelf one, this won't affect too much, but this will make it really easy for hopefully this will simplify a lot of the things that developers have been having a hard time with implementing the standard so far and make it easier to scale it. So these changes are coming down the pipe. Keep an eye out for them. And as always, the goal of this is to give NFTs the ability to do more than just be assets sitting in a wallet, but let them be full on.
00:27:33.074 - 00:28:18.610, Speaker A: Agents on Chain if this seems like an exciting idea to you, we would love to have you contribute. One of the reasons that we developed this as an EIP rather than just as a product that we released is because we think this is most powerful when everybody has a chance to come and contribute to this pattern and kind of shape consensus around how this should be represented, how this should work on chain. So there's been lots of folks who've been building with us some logos here, folks from different organizations who've been really helpful. We've got a developer working group if you want to chat with developers who are working on ERC Six Five One related things. There's a telegram link there. It's a little over 1000 people in there jamming on ERC Six Five One. Day in and day out.
00:28:18.610 - 00:28:50.014, Speaker A: We would love your contributions, we would love your thoughts, we'd love your feedback. If things suck, if you don't like things, if you want to see things change or if you just want to build cool things on top of it and share that, we would love any of that feedback. Yeah, we have some docs. So Tokenbound.org is the site that is kind of the home for all of the ERC Six Five One goings on. There's some documentation, there's some tooling we built to make it easier to work with the standard. And if you it's kind of like a bit higher level than the EIP itself.
00:28:50.014 - 00:29:20.768, Speaker A: The EIP is pretty low level, definitely worth a read if you want to understand it better. But the Tokenbadod.org site is a bit higher level. How you can use it in your applications, how you can use it in your NFT projects, how you can interact with it as app developer. So that's ERC Six Five one, ERC Six Five one gives every NFT a wallet and lets NFTs do anything you want to on chain. I see there are some questions, so I would love to take some questions. Feel free to raise hands.
00:29:20.768 - 00:29:22.700, Speaker A: I could run through the chat if that's helpful.
00:29:22.780 - 00:29:29.200, Speaker B: Yeah. So thank you. I'd say go through the chat because there's quite a few questions in chat.
00:29:30.020 - 00:30:01.288, Speaker A: Yeah, amazing. So I couldn't quite see it with the screen share here. So is, ERC, six five one closer to EOAS as wallets or smart contract wallets? That's a great question. So, ERC, six five one accounts are smart contract wallets. Every, ERC, six five one account is a smart contract wallet and that's what makes, ERC, six five one possible. There's no private keys involved, it's all code running on ethereum. And because you can deploy code at a predetermined address, that's what gives, ERC, six five one the ability to give every NFT a wallet.
00:30:01.288 - 00:30:31.972, Speaker A: So it's all smart contract wallets. Next question. The implementation contract is like account abstraction, which is a smart contract wallet. Yeah. One mental model that is really helpful to think about. This is, ERC, six five one is account abstraction for NFTs. It gives every NFT an abstract account and it works really well when you combine it with some of the account abstraction standards, like some of the tooling around, ERC, four three seven, because now 6551 accounts can deploy themselves on the first transaction, or can pay for their own gas, or can have their gas sponsored.
00:30:31.972 - 00:31:06.604, Speaker A: It works really well with the account abstraction tooling and mental model there. You mentioned that NFTs can take actions like swap or any other on chain actions. Who invokes this action? The EOA? Who owns the NFT or the NFT itself? That's a great question. So the owner of the NFT will invoke any actions on that tokenbound account. So whether it's a smart contract owner, if you have your NFT in a nosis safe or it's an EOA owner, you have it in a MetaMask. Whoever owns the NFT has execution permissions on the tokenbound account and can take any action they want to. The above answer is the NFT.
00:31:06.604 - 00:31:46.924, Speaker A: Then how is an NFT evoke a call on its wallet contract? Yeah, so this is an interesting question. So how can an NFT power itself? Right? There always has to be some interaction from an owner, because that's the model of NFTs. NFTs are owned objects on chain, so an owner will always be present in that loop, but the owner can delegate permissions to another account. So there could be another account that's running that is taking actions on behalf of an NFT. And this lets the owner of account say, like, hey, I want to play game, but I want to let the game logic handle the executions on the account for a period of time. You can do that because it's a smart contract account. You can customize the execution model like that.
00:31:46.924 - 00:32:29.900, Speaker A: And then how will signing be done on the transaction. So right now you can execute directly on the contract with the account that owns the Token Bound account. So if you own your NFT in a MetaMask wallet, you can call from your MetaMask wallet to the Tokenbound account contract, execute the transactions directly with things like four three seven. You can also sign a message that then gets posted on chain via a bundler. So as long as the owner of the NFT authorizes the action, that call can be passed to the Token Pad accounts. What are some of the limitations of ERC six five one? Yeah, so I covered a couple of them with the ownership cycles and the frauds. The other thing is, it's just really early.
00:32:29.900 - 00:33:19.356, Speaker A: It's still in draft, right? It hasn't been finalized. It's not built into a lot of the applications you use. We've done our best to design it in such a way that the out of the box experience with most applications is actually really good. I can give you an example here if you want to share my screen real quick, y'all can let me know when you see it. So if I go to this, this is my Sapiens contract account, the Tokenmat account for my Sapien. If I go to this address on Openc, I'll see that it owns a lens handle. And because Openc hides things often, I think I might need to connect my wallet.
00:33:19.356 - 00:33:48.092, Speaker A: 1 second. This is another cool thing with ERC six five One. Because it's a contract account, because it's an account, you can use Wallet Connect with it. So I'm going to connect my Sapien to Openc and I'm going to use Openc as my Sapiens Token amount account. So he's going to hit Connect there and give it a second. So I don't know if you can see, but now I'm connected as 5.16 B CF Five and that's my Sapiens Tokenbound account.
00:33:48.092 - 00:34:11.572, Speaker A: And so if I go into in here to my where can I see it? There's like a hidden field somewhere. Here we go. Hidden because Openc hides a bunch of NFTs and I can see all these other NFTs that this account owns, right? So the experience is a little janky, but it does work. You can use your Tokenbound account out of the box. You can connect it to OpenSea. You can see your assets. I could list this NFT for sale using Wallet Connect.
00:34:11.572 - 00:34:44.156, Speaker A: You can use your NFT's Tokenbound account on existing DApps, even though OpenSea doesn't know about Tokenbound accounts right now. And if you go and look up the Token Out account of an NFT, you can see its contents because it's just an account. It's just any other wallet. This wallet, address, owns assets. And that concept of a Wallet address owning assets works with every single app on Ethereum. And so at a baseline, you have some compatibility with existing apps and a really easy path forward for DApps to support Tokenatic health. So.
00:34:44.156 - 00:35:09.776, Speaker A: Yeah, Peter's right. The EOA owner calls the NFT's wallet contract checks. Message sender is the owner of the NFT and does the action. Yeah, it's essentially just a token gated wallet. It's a token gated wallet with a single contract from which they're all deployed. So they all have a common addressing scheme. Is ERC six five by one wallet able to grant multisig access? Yes, because it's just a wallet, a token about account can totally be a signer on a multisig.
00:35:09.776 - 00:36:00.096, Speaker A: You can use a multi SIG as an NFT, so you can have a multisig that's comprised only of NFT holders. So you could have like five NFTs that collectively control a multi SIG. If you buy one of the NFTs, you're essentially buying access to the multi SIG. You can build some really cool interactions when you have this concept of an NFT bound account with just existing infrastructure that has no concept of NFTs owning a does that mean we're linking a smart contract wallet with the NFT ID using the registered contract? Yes. So when you deploy the smart contract account, you are linking the NFT with that account. If somebody looks at that account on chain, they know which NFT it belongs to and you can derive the account address from the NFT's information. So there is that link between the NFT and the account when it's deployed prior to deployment.
00:36:00.096 - 00:36:45.172, Speaker A: When it exists in this counterfactual state, there's not as clear of a direction between the two. If you know the details about the tokenbound account, you can compute the address from the NFT, but you can't go backwards if it's in this counterfactual pre deployed state. So yes, if it's on chain and deployed, it's a little murkier in the counterfactual. Owning a state by NFT is indeed cool. But how about this? Instead of having a separate singleton registry, what if there was an improved NFT, ERC, which can give a capability to deploy a smart contract wallet within NFT smart contract and the NFT smart contract itself can hold the wallet address owned by the NFT. So this is actually a really great point. This is the path that almost every other ERC dealing with NFTs owning assets has gone down.
00:36:45.172 - 00:37:28.288, Speaker A: And in our opinion, this is the single greatest weakness of these other proposals, is that they require support from the NFT contract itself. That means that developers who want to support these standards have to build custom NFT contracts that support them. And it means that only some NFTs work with those standards. This is the case with, ERC nine nine eight, admittedly a little bit murky with the bottom up, top down approach they have. This is the case with some of the more recent standards. They all define an extension to ERC 721, which means that developers who want to support this have to opt into this before they deploy their contracts because contracts are immutable. And that ends up meaning that most NFTs don't support these standards, only a small subset do.
00:37:28.288 - 00:38:16.060, Speaker A: So it's really difficult for platforms to support these standards that only work with a small subset of NFTs. Very few NFT owners end up adopting these standards because there's very little platform support. And so what seems like a good idea on the surface of extending the ERC 721 standard and having all of this logic baked into the NFT contract itself actually ends up falling a little bit short. It ends up making it difficult for this concept of NFTs owning other items to get adoption. And additionally, this does work if you could have an NFT contract which deploys wallets. But another failure point we've seen with other ERCs is the ownership model is not tied to wallets. The NFT contract will have these kind of two concepts of ownership.
00:38:16.060 - 00:38:56.908, Speaker A: An NFT can either be owned by a wallet or owned by a token ID. And so it kind of like breaks up ownership into multiple different types of ownership and then tracks those owners in different ways in the smart contract. And that gets pretty messy pretty quickly because most applications are used to assets being owned by an NFT. And so since 6551 represents asset ownerships using accounts, you get supports out of the box. Lots of applications are aware of this. With some of these other standards that don't represent ownership using an account, you have quite a bit less platform support. And the model for ownership is quite different than the Ethereum Native Ownership model as EF 6551.
00:38:56.908 - 00:39:29.316, Speaker A: It's like a counteraction for NFTs. Are you going to integrate four three seven into it? Yes. So the account implementation that we've launched with has four three seven support already, so it works with the entry point. If you're executing transactions using tokenbound site, even though you're not going through the four through three seven path yet, you still are interacting with the entry point for nonsense. So, yes, we are doing a lot of work to make this really well compatible with four through seven. That is true at the smart contract level, yet it's not quite true at the client level yet. Have you worked with Ray Chan at Meme Land? Regarding the captain's NFT.
00:39:29.316 - 00:39:55.916, Speaker A: Yes, the Meme Land is planning to use 6551. We have chatted with them a little bit. Of course, they haven't released details about that, but they have publicly announced they're planning to use ERC six five one. Awesome. And, ERC 3525 semi. NFTs. And what are the differences? Yes, so I'm not super familiar with ERC 3525 other than it being semifungible.
00:39:55.916 - 00:40:38.204, Speaker A: And so because of the current design of ERC six five one, ERC 3525 tokens won't be able to own tokenbot accounts because tokenbot accounts are kind of predicated on this concept of ownership by a single token, which has a single owner. That is changing a little bit with some of the new changes that are coming down the pipe. But at the moment, tokenbot accounts can own ERC 3525 tokens, but tokenbot accounts can't be owned by ERC 3525 tokens and I'm not super familiar about the standards. Cool. Is there ways to discover different implementations? Yes. So there are a couple of implementations at play right now. There's the token bound implementation.
00:40:38.204 - 00:41:17.192, Speaker A: If you go to GitHub tokenbound contracts, that's the implementation we've released. Gnosis Guild is working on an implementation called Gnosis Mech, which is another implementation of ERC six, five one. There are a couple of other projects that are implementing custom implementations just for their project. So the best way to discover implementations right now is to look at events submitted on the contract. The registry emits a new event every time an account is created with an implementation. So you can come up with a list of implementations by watching those events. We do plan to have a list of commonly used implementations, especially ones that are audited and well known and quite secure.
00:41:17.192 - 00:41:59.344, Speaker A: But it's still pretty early days. As far as we know, the Token Bound implementation is the only one seeing a lot of usage on main net right now. And so as that kind of becomes a little bit more as there are more folks using it, we plan to have a list of well known implementations and build that into the Token Bound Explorer. That's a lot of questions in the chat. Thank you so much. Are there any other questions I'm happy to answer? Oh, sorry. I think you might be muted there, Peter.
00:41:59.472 - 00:42:00.484, Speaker B: I am muted, yeah.
00:42:00.522 - 00:42:01.268, Speaker A: I was going to say it's the.
00:42:01.274 - 00:43:10.510, Speaker B: Good 32nd rule of no one said anything for 30 seconds, so we must have run out of questions. But look, that was awesome. So thank you very much for your talk and I know I now understand how it all works. I think it's actually a powerful thing, is not NFDS owning other NFTs or anything like that, but you can imagine you could have an account that has the right to do something and being able to sell that, right. So otherwise you might have to say, well, I'm going to give you my private key, this thing, which is a really dumb way of doing it. But yeah, for instance, at another company I worked at, we had test accounts with test ETH and firing value around, which I just happened to still have access to. And you could imagine that rather than doing that, you could have a way of not having me, say, directly having that account credential, which would be a much better idea.
00:43:11.360 - 00:43:59.870, Speaker A: Yeah, I think that's a really good point. We spend a lot of time talking about, ERC six, five, one, as NFTs owning wallets, because we come from that NFT world, we build a lot of NFTs. We kind of were really passionate with that. But there's kind of a flip side view of that, which is you're representing a wallet as an NFT and that gives you this existing infrastructure for transferring wallets, for selling wallets, for borrowing and lending wallets. All the infrastructure we've built over the last couple of years for handling NFT transfers, NFT infrastructure, it all just works with wallet staff too. So you can have entire protocols built on top of the concept of buying, selling, trading wallet, access and keys represented as tokens. Yeah.
00:44:01.760 - 00:44:04.990, Speaker B: Adekbenga, you've got a question?
00:44:07.600 - 00:45:23.580, Speaker A: Yeah, I've put my question in the chat. I was just thinking, since NFTs go up in value dependent on the nature of the uniqueness of NFT, is there a possibility also that the wallets also might have their own commercial value? So you have this wallet as a particular holding of NFTs and I'm even just speculating maybe some kind of NFT wallet market in the future. Is that another extension of possibility? I was thinking yeah, for sure. I think this is one of the really interesting aspects of 6551 is it challenges our kind of current concept of NFT value. Right now we'd think of NFT value as kind of siloed to just the asset, right? When I buy this NFT, all I'm getting is the NFT. But even right now that's not quite true, right? There's other rights, there's other things associated with that NFT, like the ability to join a discord group or the ability to claim an AirDrop or there's other things associated with that NFT. And so ERC, six, five one definitely affects the value of an NFT because you can kind of think of the value of an NFT as not just the value of the NFT itself, but also the value of all of the contents of the wallet and all of the value kind of held by that NFT.
00:45:23.580 - 00:45:55.680, Speaker A: And so it gives individuals, it gives you the NFT holder direct control over the value of your NFT. It lets you put assets into it or take actions that directly increase the value of your NFT, which is kind of backwards from how we think about NFTs right now, right? Where things like Rarity and things like value are largely determined by the NFT creator. 6551 kind of flips the script where you as the NFT holder, now have the final say over what is valuable about your NFT.
00:46:00.690 - 00:46:03.998, Speaker B: Okay, I'm going to quickly share my.
00:46:04.084 - 00:46:05.806, Speaker A: Screen for a SEC, if I can.
00:46:05.828 - 00:46:59.886, Speaker B: Get the right screen. Okay, you should all be able to see some slides. Okay, so the merch store is now open, so if you want to get a cool t shirt, go to the shop. You can also get to it via YouTube and look at store. We've got a whole heap of talks coming up, so I'm going to give a talk in two weeks time about the smart contract process that we've got at Immutable. How do we go from concept to deployed contract and maintained contract on chain? We've got Philip from Lefi who's going to talk about bridge aggregation and why bridge aggregation is a good idea. Got Christian, who's going to talk about forge, and Clemens Wan from Consensus is going to talk about his thoughts on web3 and AI tools.
00:46:59.886 - 00:47:35.214, Speaker B: And then in mid September, I'm going to talk about Passport Wallet, explain its security properties, give an example, hopefully with a live game, integration of Passport in a game, and talk about the Immutable platform. So those are some talks coming up. And if you're watching this live, there's YouTube channel. If you're on YouTube, there's slack. And also there's the Meetup group, which can join. Anyone can join, it's free. And there's example code.
00:47:35.214 - 00:48:00.530, Speaker B: And if you're into formal methods, there's a channel on the Slack. And meetings are organized semi regularly. And so that's a quick run through. But look, Jaden, thank you again. That was awesome. And, yeah, I'm actually pretty pumped for the 6551 ERC. It'll be interesting to see how long it takes to get it finalized.
00:48:01.750 - 00:48:23.034, Speaker A: Yeah, thank you guys so much for having me. This has been an absolute blast. And, yeah, we would love all of your thoughts, all of your opinions, all of your feedback on the ERC. There is a thread going on the ETH Magicians thread, so we'd welcome any comments there. You can also reach out on Telegram. I'm at Jadenwindle on telegram. And there is, I think, in the slides Peter should have access to afterwards.
00:48:23.034 - 00:48:31.774, Speaker A: There is a link to the ERC, six, five, One working group if you'd like to join. So we would absolutely love and appreciate all the feedback there. And, yeah, thank you so much for having me.
00:48:31.892 - 00:48:36.106, Speaker B: Okay, great. All right, thank you and see you later, everyone. Bye.
