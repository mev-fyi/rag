00:00:03.250 - 00:00:35.360, Speaker A: Hello and welcome, everyone. My name is Peter Robinson and today we're doing a solidity challenge meetup. So this is interactive. I'm going to work with people. We're going to try and see if we can write some code. All right. So I did advertise a certain address and then I had a go and then I decided actually we're going to use a different address as the code to try and work through.
00:00:35.360 - 00:01:28.240, Speaker A: So the idea is that we've got a contract that is at a certain address and you want to buy that contract. Let's have a look at the address that we've got here. And I'll go backwards. And so if we look at that c seven cc, two cc address, we end up here. So we've got a contract that's added an address. Now, I've made it easy and I've uploaded the source code so that we've got a validated contract. And so I think the obvious first thing to do is to have a look at the code that we've got to try and understand the code.
00:01:28.240 - 00:02:57.360, Speaker A: We've got an upgrade proxy here, which is a transparent upgrade proxy. So that, I mean, what is that telling you? Harpool, what are your thoughts? What should we now be looking at? Yeah, the first time I saw the upgradable contract, I thought maybe it was not initialized and maybe I can initialize it and claim ownership because the initialized function was giving out ownership for minting for the contract and many other roles. Yeah, well, this is true. So if you go through, you can see, so if we click on, say, readers proxy, you'll see that the actual implementation behind the proxy is here. And so if we look in the, so this is at a different address. We've got coolnft, and Coolnft has got a few roles, a pauser, an unpauser, a minter, and obviously it's a access control contract. So that means we've got a default admin and we've got an initialize function which takes this initial admin and does a few things.
00:02:57.360 - 00:03:56.830, Speaker A: So if it wasn't initialized, then you would be right. But if we go back to this code and we have a look at the actual code. So in the constructor for upgrade proxy, it calls the constructor, you pass in some parameters and it calls initialize as part of the actual construction. So it calls transparent upgrade proxy. And then that's going to end up calling the initialize function for that matter, over here. Actually that's going to be here. And then in proxy and then you've got your transparent upgrade proxy.
00:03:56.830 - 00:04:55.416, Speaker A: So that constructor gets called here and we're passing in that data which calls ERC 919767 utils for change admin. But it actually calls the ERC 1967 proxy contract here and that passes in that. And then it does an upgrade and call to and so that then goes to here and then we've got upgrade and call to. So it sets up the implementation and then it does a delegate function call to that new implementation with that data. So it's passing in that function selector. Initialize with that parameter initial owner. So that is set up.
00:04:55.416 - 00:06:15.080, Speaker A: So the contract is actually being deployed. So yeah, let's have a look here. And so we've got cool NFT here. We can have a look. And if we call read as proxy, for instance, we can see that we've got these roles set up and say we can go minter role and grab that and we can go get role member count and we can query it and it says there's one person who's one account that's got that minter role. And so what we can do is we can get role member. So if we go get role member and then pass in that role, for instance, we could say pass in zero and we can query it and that'll give us the address of the owner, which is that address there.
00:06:15.080 - 00:07:52.870, Speaker A: And that's the address that I've been using to deploy contracts and do things. If we look at it, we've seen the upgrade proxy contract, which is a transparent upgrade proxy and it's delegating to cool NFT and it's an ERC 721 pausable, but it's also got access control enumerable. So it means that you can enumerate who are the admins for it. One thing to note with the open zeppelin transparent upgrade proxy here is that in version five, when you call it, it actually deploys a proxy admin contract and that proxy admin contract is the actual administrator of the proxy. So we've got this proxy admin and we've got this upgrade proxy contract and we've also got this cool NFT. So cool NFT has got admins and we've got this proxy admin here as well. And so if we're going to buy the contract, we need to have say a settlement contract.
00:07:52.870 - 00:09:00.510, Speaker A: And that settlement contract needs to do various function calls into those two others to make it so that we can do the sale. Okay? And so I guess when we're doing this sale, we're going to have to worry about front running. So we can't just say do what I've just done here, where I've gone and read and said, well, here's who the owner is. Because if we do that, then we'll be basing it on something that's happened. But you could say front run it. So you could use a multi call contract to maybe add a new admin, execute the sale where you're revoking something, and then maybe do something afterwards. So whatever the actual execute sale function is, it's got to be super careful.
00:09:00.510 - 00:10:07.972, Speaker A: Okay. Do you have any thoughts on how we might go about putting this code together? Okay, we've got something in the chat. Let's open up chat step by step. Okay, what do you mean by that? I mean just iteration from a simple idea to more sophisticated approach, I guess. Yeah, that's a possibility, isn't it? That could be a way of doing it. Yeah. So what I was thinking is that you would brainstorm it and work out approximately what the contract would do.
00:10:07.972 - 00:11:19.452, Speaker A: So essentially design it out. What I was thinking is that you'd have a constructor and that would deploy the contract and you'd take the sale price and then implicitly it would grab the seller as well. So assuming the seller deployed, then it would grab the seller. And then I reckon outside of the contract, then maybe you transfer ownership from the seller for the proxy admin to the actual settlement contract, and then transfer the default admin to that settlement contract. So it controls it now. So it controls the contract. And then maybe we have a buy contract, a buy function and the buy function, it's payable and it takes as parameters, say the admin address of the new admin, make it callable by anyone.
00:11:19.452 - 00:12:19.890, Speaker A: So anyone can buy the contract. And then you transfer the proxy admin to the new admin. And then you add yourself as the new admin, and then you revoke all the other admins. And then you send the amount of money to the seller, which I think that should be good. And I think because you will have transferred the proxy admin to the new admin, it should be that that inherently gives you reentrancy control because the contract would fail if it tried to do this a second time. And there should also be a regain ownership function that the seller can call. What I've done is I've done forge in it and forge install to set up open zeppelin and I haven't actually, I should have done forge install and specified a specific version number as well.
00:12:19.890 - 00:12:53.340, Speaker A: So that's what I've got so far. And so let's stop sharing slides. And instead we're going to share hopefully the right set of contracts. So not that one. Not that one. Let's go and share this one. So we're in theorem engineering group examples.
00:12:53.340 - 00:13:45.110, Speaker A: What we're going to do. Can people see that font or is that too small? It's okay to me. Okay, brilliant. Okay, so let's have a think about this. We've said that we wanted to have a constructor, so I've just done forginit and then renamed counter to settlement. So we wanted to have a constructor and it was going to take in a sale price. And then, so we're going to have sale price.
00:13:45.110 - 00:14:28.124, Speaker A: So we've got the sale price that we're going to have and then we were also going to have the owner, the seller. All right. Some people are asking to zoom in. Okay, sure. Okay. Yes. I should watch the chat.
00:14:28.124 - 00:15:18.200, Speaker A: Let's get that chat somewhere that I can see it. All right. So that should hopefully be better. And what I can do is as well, I can move that across. All right, so we've set up the seller and then we were going to have a buy function and it was going to take an address. So what was it going to take? Oh, yeah, it was going to take an address, which is new admin and it needed to be payable. Okay, what's wrong with that? And it also needs to be external.
00:15:18.200 - 00:16:53.430, Speaker A: And then there was also another function which was regain ownership. So regain ownership needed to essentially go. Let's grab, we had the requirements here for the buy function to be payable. We've done that. New admin callable by anyone. What we need to do now is we need to import the open zeppelin contracts so that we can be able to call them. And so what I'm going to do.
00:16:53.430 - 00:18:15.210, Speaker A: Here we go. Okay, so we've got actually, let's have a look at what are the other things we've got there. We need to get the proxy admin and that is in access. Let's have a look. Proxy transparent, proxy admin is what we're after. So proxy transparent. And then cool.
00:18:15.210 - 00:19:00.060, Speaker A: All right, so first thing to do is to transfer the proxy admin across. And so if we have a look at proxy admin. So we can probably do that from here as well. So if we have open it up, lib, and then contract proxy transparent, proxy admin. So here's proxy admin. And so it's straight out ownable. And so if you look at access ownable.
00:19:00.060 - 00:20:20.156, Speaker A: What we're trying to do then is call transfer ownership and just have new owner. So that's the one we wanted to do. So transfer ownership and then what we want to do is we want to revoke and also we want to make the default admin of the contract. So what we'll need to do there then is. So that's an access control contract, isn't it? So let's get down here. And so what we're going to be doing now is we're going to grant role. So that's the one we want to do, but it's got to be for the contract that's being sold.
00:20:20.156 - 00:21:44.082, Speaker A: Hey, so that's a curious thing. One extra thing we're going to need is so we need to have the contract for sale passed in. Okay. Another thing is of course that you want to require that the message value is greater than or equal to the sale price. All right, so we're going to transfer the ownership. Transfer ownership there is on this settlement contract, which is not what we want. We actually want the proxy admin.
00:21:44.082 - 00:23:46.800, Speaker A: So that is another thing that we need. Okay, so that will transfer ownership. And now what we need to do is for the contract for sale, which we're saying is we want a grant role and then it's got to be the default admin. So there are a whole heap of ways that we could do that. Probably the best, or the simplest way is to grab it directly and define it in our contract. Let's have another look at. So it's role comma account.
00:23:46.800 - 00:25:41.930, Speaker A: Okay, so now we've created the new admin has got admin account on the contract for sale. And so now we also need to worry about the other admin types. So if we have a look here, we've got these as well. Okay. All right, so now we've done that then we need to revoke all of the other admins. And so what we need to do here is now the purpose is not to buy a particular NFT, but to buy the whole contract. So it's not just a particular NFT that we're so Dev said is the purpose to buy a particular NFT and we want to change the ownership of the NFT.
00:25:41.930 - 00:26:16.240, Speaker A: And so in fact what we're trying to do is we're trying to buy the whole contract. So essentially the right to mint, the right to pause, the right to unpause and the right to upgrade. So yeah, that's the goal. Maybe I didn't make that clear. Yeah, sorry. All right, so let's have a look then. So we really need to get to access control enumerable because.
00:26:16.240 - 00:27:00.170, Speaker A: Wait just a sec. There we go. One thing that I did change was that I made the contract that we're buying innumerable. So taking over control of it. So it made it easier because otherwise you don't know who's got what access. So enumerable costs a little bit more money when you're adding and removing people, but it's actually got really good benefits. So I'd suggest always using enumerable.
00:27:00.170 - 00:28:55.120, Speaker A: All right, so now the next thing to do is to revoke, all right. That matter, why don't we make all this code slightly smaller. Yeah. All right. To make it easier to read. All right. So what you're going to need to do is revoke all the admins that aren't the buyer because you can't remove all.
00:28:55.120 - 00:30:34.086, Speaker A: Yeah. So, all right, so we need to go through and go. So we've got this contract. All right, so we've got contract for sale. And what we're trying to do is we're trying to say, so we need to go get role member and then that's just a matter of passing in that integer. Okay. And so, so contract for sale.
00:30:34.086 - 00:31:08.540, Speaker A: So now what we want to do is we want to revoke membership. We want going to renounce the, revoke the role. So how do we do that? I think that is in the plane. Access control, revoke role. There we go. Okay. And then it's going to be.
00:31:08.540 - 00:32:42.300, Speaker A: So we could do a whole heap of copy and pasting, but maybe the better way of doing it is having a function, a private function. Yeah. So John's saying, so I want to sell my defi protocol. I'd also need to hand it over in this way. And that's very. So you need a way of selling a contract. Okay, so this is new admin.
00:32:42.300 - 00:34:29.810, Speaker A: All right. So now we should be able to go revoke and then the type of role comma. All right, now we have. So now you want to pay the seller. And so what we need to do is import address. Yep. So that is so address send value.
00:34:29.810 - 00:35:33.250, Speaker A: That's the one address. Send value allows you to send it money to anyone and not have to worry about the. Yeah. So Faye asks, can proxy admin transfer ownership be called from anyone? Is it a privilege function? And the answer is yes, but the idea is that before settlement is called you need to grant it ownership. So essentially you give ownership to the settlement contract. And so Dev said when using transfer ownership method from the open zeppelin. Then the role assignment and revoke actions are not done internally as part of transfer ownership.
00:35:33.250 - 00:36:43.550, Speaker A: No, because transfer ownership is for ownable and whereas the other ones are related to access control. Yeah. So we needed to send value and it was to someone and then an amount. And so we've got seller. So we're going to have to go pay ball bracket seller comma and then message value and that should pay the seller. So then we've got regain ownership, which essentially we want to do this and this. So that was all right.
00:36:43.550 - 00:37:48.572, Speaker A: And to make it simple, rather than just having a settlement contract, maybe what we should do is have another contract. Actually it's not going to work as a contract, is it? It's got to be the seller who does it. All right, so someone would call regain ownership if the seller put the contract up for sale, but then no one bought it. So before we go too far, I'm going to call forge build just to be sure. All right. Okay. So line 61, this has, so get role membership has, I think it's all right.
00:37:48.572 - 00:38:45.882, Speaker A: So it's saying, I think it's going to need the role as well as that. So let's just check that. Yes, rog argument. All right. And the other things are just in the test code failing. Okay, so let's have a look at the test code. So we've got this and we want to go now.
00:38:45.882 - 00:40:44.890, Speaker A: What we need to do is really deploy the contracts. So what we're going to do is I'm going to cheat a bit by copying across. Okay, so now we've got, in the context of our project, we've got the cool NfT and we've got the upgrade proxy. And I think, yeah, so I haven't even got some test code here, which I'm going to steal. All right. Okay. So this is going to deploy the cool NFT, set up the upgrade proxy, which will also deploy the admin.
00:40:44.890 - 00:42:11.424, Speaker A: And one thing that one thing that we'll need to do though is need to try and work out how to work out the proxy admin address so that gets emitted in an event. And so what we need to do is work out in forge rather. So I'm just doing a quick web search and there's a forge book actually, which is very useful, which is even better when you can find it. Boundary book, should I say. Okay, so you've got events. No. So get role member will tell us about administrators within the account.
00:42:11.424 - 00:43:39.610, Speaker A: So Harpel asked about, or could we just do get role member? And so that'll tell us about within the account. But what we want is when we deploy the proxy, we need to get the actual proxy. So let's find out by having a quick look at. Let me have a look quickly. Yeah, just gotta. Yeah, so let's. I'll stop sharing the code for a second start and I'll reshare my screen because I think we were far enough in that now.
00:43:39.610 - 00:44:05.180, Speaker A: Sharing. Yeah, just. There we go. Yeah. So if we have a look back at this code here. So we've got the upgrade prop open. Zeppelin's transparent upgrade proxy.
00:44:05.180 - 00:45:07.480, Speaker A: It deploys a proxy admin. So the proxy admin controls essentially the upgrading of the implementation contract, but separately the implementation contract has administrative controls in it too. So, yeah, you've got the two things happening at once. And so, yes, that's what that's about. So getting back to the code. Yes, I was going to very quickly open up a new window and then get some code from a previous project. Okay.
00:45:07.480 - 00:48:23.660, Speaker A: Because what we're trying to do is get a value from an event. Yeah, here we go. So normally you can do something along the lines of that where you're saying you expect an event to be emitted and then you can say the values, which isn't going to work for us, though, because we don't know the value. I wonder if there's a way. How can we do this? This is going to make it very hard to test, unfortunately. Yeah. Okay, so I might be.
00:48:23.660 - 00:50:04.558, Speaker A: Yeah, there is a proxy admin, but it's private. Yeah. So line 37. So what line 37 is doing is it's deploying the upgrade proxy, which I haven't included here, which is why. Yeah. What can be wrong? Yeah, I think get admin only returns something if you're. Yeah, all right.
00:50:04.558 - 00:50:33.430, Speaker A: So that should work much better. All right. Yeah, so not taking me there. So, yeah, upgrade proxy, as I said, is transparent. Upgrade proxy. And yes, it's got proxy admin, but that's only internal. And this is ERC.
00:50:33.430 - 00:51:44.410, Speaker A: It's not wanting to take me there, is it? That's ERC 721 proxy, which has again got an internal function. But yes, so ERC one six, seven utils isn't directly available, I believe. Yeah. So, yeah, so it's really a matter of trying to tap into the one six seven utils. When it does, it's going to emit an event at some point in here, does that. Yeah, it's ERC one six seven change admin. There we go.
00:51:44.410 - 00:52:18.600, Speaker A: Admin changed. And so if we can get the new we can capture that event. So we can see that that event has occurred. But actually that'll be the new admin. But really we need the one where it says, I guess that is right because the new admin is the proxy admin contract. Okay. All right.
00:52:18.600 - 00:53:40.680, Speaker A: So we've got script and then we've got that. So this is not working out quite as I'd hoped because essentially this is going to emit an event when we deploy this, which will be that new admin event. But unfortunately, we know that there's going to be a new admin event as we just saw it in there. Yeah. Or admin changed, should I say. And so the existing admin is going to be address zero and then we're not going to be sure what the new deployed address is going to be. So if we just do that.
00:53:40.680 - 00:54:57.610, Speaker A: So if we match on the signature and the first parameter and then ignore the other two, then that will probably work. Yeah. So we need to add in that event. And so now and then I've got a problem on line 41. It's saying it hasn't heard of admin. So that's Stella. I think it's going to complain that there are no tests.
00:54:57.610 - 00:56:03.590, Speaker A: All right. So that test passed. So we were able to deploy and it shows that an admin changed event was being produced. We guaranteed that it wasn't address zero. So unfortunately, off the top of my head, I can't work out how we can get that address, which is unfortunate because it would be really good to then have that address and then be able to call buy or deploy this settlement contract and then call buy and then call regain ownership. So what we could do very quickly is not worry about the proxy admin side of it and just worry about the other. So let's do buy.
00:56:03.590 - 00:57:14.994, Speaker A: And so what we're going to do is we're going to go. All right, settlements, new settlement settlement was taking sale price, proxy admin and contract for sale. So we had sale price, let's have it as 100 ether and the proxy admin, let's just have that as address zero. Not worry about that for the moment. And then we had the contract for sale, which is going to be this actually at the upgrade proxy is the thing that we're actually buying. So that's going to be. Yeah, so we end up with cool NFT implementation.
00:57:14.994 - 00:58:24.130, Speaker A: Cool NFt. All right. So if we go address cool nft, that'll give it to. Okay, so, and then we should be able to go by. So then what we do is we need to grant ownership, which is what we were doing here, wasn't it? And that was or want to grant ownership to the settlement contract. Okay. And then at this point we should be able to go to settlement.
00:58:24.130 - 00:59:20.032, Speaker A: So we need to be, we need to be VM prank buyer at this point. And then here. So VM prank is setting who is message sender for the next call. And so we're going to go buy. And going into buy we had the new admin. Okay. And then at this point what we want to do is we want to go.
00:59:20.032 - 01:01:16.260, Speaker A: Cool. NFt, was it get role admin? Actually, I guess it really has role, isn't it? That's all we need. Okay. Will that compile making you ask? Okay. And what I can do is I can stop sharing that screen and I can share my terminal screen, which has success, which is amazing. So forge test and we had success. So that means that the code here, I think was successful.
01:01:16.260 - 01:02:18.696, Speaker A: So the actual being able to from the buyer buy it. Actually the one thing though that is strange is I didn't send any value. I should have had to send 100 ether, so that should have reverted because there's this required message value is greater than that. So why that means, so maybe my test isn't running no good. Claiming you've got tests working. Yes. All right.
01:02:18.696 - 01:03:14.100, Speaker A: Now it's failing with not enough gas. That's good. All right. How to send value to a function call with. So isn't it something like this where it's, so I think that's how the syntax and now the issue will be. So now it's reverting because I haven't given buyer any money. And so what we need to do here is I think that's the syntax.
01:03:14.100 - 01:04:35.766, Speaker A: Okay, so now what I'm getting. Yeah. So now I'm getting an index out of bounds error. So what I'm going to do is I'll go forge test and if you go minus triple v, it'll give you a whole heap of extra information. So get role member is blowing up with an out of bounds error. That's curious, isn't it? So why would that be the case? So that's get role member. How can it be having an out of bounds error? Yeah, I'm not quite sure what the problem is there.
01:04:35.766 - 01:06:05.330, Speaker A: So I'll show you the error message that I'm getting. Yeah, see, so we're going test by and then it's in the buy function and then we're doing grant role and then we're doing getmember count and which is coming back as three and then it's going revoke role, get member role, revoke role. I know what's happening. I bet the problem is that the indexing changes. So in settlement when we go get role member, because now we've got fewer members, it will be getting smaller. Um, yeah, so what we need to do is maybe have, and so we get role member offset and so that'll constantly change. And then if we've come to here, then we need to go.
01:06:05.330 - 01:06:55.724, Speaker A: Yeah, I think that'll work. So let's do another. I'll show you the code in a sec. Problem with juggling two windows. So now we've got a slightly different error. Yeah. All right.
01:06:55.724 - 01:07:48.930, Speaker A: Anyway, unfortunately, I think I've got run out of time. Yes, revoke itself reduces the count. Exactly. So I'll just stop sharing. I'll show you the code that I ended up with, which is going to have a bug in it somewhere. Obviously what I ended up with was I'm figuring that every time you do revoke, the number will change. And so if you go get admin at zero and it is the role admin, then you need to ask for the next one.
01:07:48.930 - 01:08:30.590, Speaker A: Yeah. So I think that's the way to do it. But maybe there's obviously a slight bug in that algorithm anyway. So look, thank you everyone who ended up coming along for the talk, certainly very chatty on the chat for those people watching the video later. And I'll commit the code to the Ethereum engineering group examples. And what I should do, I should share my slides again, temporarily share. Okay.
01:08:30.590 - 01:09:35.250, Speaker A: And that's going to make life complicated. Yeah. So merch store is open. Pick up a cool t shirt for Christmas or whatever next year. There's a whole lot of talks coming up, and so I'm going to talk about decentralized sequencer friendly consensus algorithms and what that actually means and what you should be looking for, Christian Koopman, is looking into wallets that are low touch. So trying to make it so you don't have to remember a big long passcode from the supra oracles or supra. We're going to have a discussion or explanation of a protocol for working out a new oracle protocol anyway.
01:09:35.250 - 01:10:20.064, Speaker A: And then we've got Diego from Cartesi, which is going to talk about a new system that they've developed which essentially lets you use a Linux stack as a smart contract all of its own. If you're interested in the code and can find the bug in the code, that'd be great. And that example code is there. I'll share these slides later on so that people can grab the link more easily. Yeah, so that's all. Anyway, look, thank you everyone, for joining. Have a great day and evening and night for those joining in the middle of their night.
01:10:20.064 - 01:10:22.716, Speaker A: And talk to you later, everyone. Bye.
