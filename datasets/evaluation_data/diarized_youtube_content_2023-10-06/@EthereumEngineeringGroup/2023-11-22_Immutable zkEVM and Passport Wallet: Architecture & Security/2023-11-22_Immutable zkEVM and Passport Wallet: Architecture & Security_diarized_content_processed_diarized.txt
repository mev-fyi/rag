00:00:03.050 - 00:00:38.690, Speaker A: Hello and welcome, everyone. My name is Peter Robinson and today I'm going to talk about the immutable platform and passport wallet and talk about why it is a secure system and you should trust it. So let me share my slides. And just so everyone knows as well, I actually work at immutable. I'm head blockchain research. Ok, so can everyone see my slides? All right, I'm getting some thumbs up. This is good.
00:00:38.690 - 00:01:28.780, Speaker A: So this talk, I've brought together an awful lot of people to help me. So this is just more than just me, more than just my work. And in particular, I thank Natalie, who's produced a brilliant demo that you'll see right towards the end. And so I'm going to talk about the immutable ZkeVM platform, but also passport, which is the wallet that we've got, and in particular, try and really walk through what could go wrong with the system and why is it secure. Another thing to know about is that this is web three, this is blockchain. Stuff happens and we're going to get feedback from customers. So some things that I explained might have changed.
00:01:28.780 - 00:02:09.280, Speaker A: Before we get too far, I've got a little spaceshipy sort of icon, and that sort of will give you an indication of how far off things are. So if there's no spaceship, then it's ready today and it's available. So let's hit it. So the immutable platform. So we're aiming at games. And so the idea is that you've got blockchain infrastructure being the immutable ZKE EVM, powered by Polygon and Immutable X, which is powered by Starkware. So they're two ZK roll up technologies.
00:02:09.280 - 00:03:18.672, Speaker A: And as well as that, we've got a whole stack of web two stuff that helps you do stuff in game. So your wallet, your checkout, which allows you to interact with the system, to do bridging, to do value exchanges and to buy and sell nfts. And we've got the revenue engine and sdks and the dev hub. So we've got a whole set of products to help game developers develop on web three and have a brilliant experience and provide a brilliant experience for game players. And so that's the overall system and what we're delivering. And as opposed to some of the competition, which are either just chains or just platforms, we're both a blockchain technology and a web two platform technology. So we're providing both things and we've got the Zkevm, which is an EVM compatible blockchain roll up and we've got immutable X, which is based on Starkx.
00:03:18.672 - 00:04:27.832, Speaker A: And so it's aiming to be a zero gas platform, whereas the other you've got some gas fee, but then you've got contracts and passport is the wallet that we've got. So a single identity unified wallet across all of your games and really good security. All right, so that gave you a lightning version of what is the platform that I'm now going to talk about? And so immutable Zkevm. So I'm just going to focus in on the Zkevm and leave immutable X separate. So Zkevm, the idea is that we've got the blockchain and approver to Ethereum, and then you've got the immutable platform as well. And so in the near future, the idea is that we'll have dedicated chains as well. So say you've got a game and they say we want to have our own chain and we don't want to be part of this shared immutable ZKE EVM.
00:04:27.832 - 00:05:26.700, Speaker A: So in that case, what will have happen is they'll be able to have their own chain, essentially separate app chains. And doing this will provide shared settlement across all of the app chains, all the dedicated chains and down to Ethereum. It'll also provide shared liquidity so that even if you've got, say, money on one chain, you'll be able to use it across the other chains so that you can do things across games. And each game isn't isolated, so you'll be able to move money around. But also for security as well, we're going to have a shared data availability layer. So each of these dedicated chains isn't going to need to worry about having to keep their data secure forevermore. And that there'll be data availability via our ZkevM.
00:05:26.700 - 00:06:07.784, Speaker A: And also we're going to have super efficient again. So at the moment when we launch the system is going to be a single node blockchain running click. So just a single validator node. And we're going to have connected to other nodes on the blockchain being RPC nodes, so that to service like Jason RPC requests and also a boot node for starting up the blockchain. And they'll all communicate using peer to peer protocol. So Dev P to P. In the near future, we're going to have a POS BFT.
00:06:07.784 - 00:07:42.600, Speaker A: So we're going to allow us to have 30 different validators on the blockchain and we'll be connecting a prover, a ZK prover to that blockchain, and then posting proofs to a verifier contract on Ethereum. And so in this way, we'll be able to have essentially a decentralized sequencer. So normally sequencers are just a single node, but by having a blockchain as our single sequencer node right now, we can then go to having a BFT blockchain that will allow us to have a decentralized sequencer, which is pretty massive. And the idea is that to have just an API where we send essentially saying this is what's happened in the block, and then the prover creates a proof of that execution. So the goal is to have that ready in the coming months. And the POS part of it means that we're allowed going to have proof of stake for our system so that we can use economic security. And so when I was saying how you've got dedicated chains in all three for specific games, each of them will also have exactly the same setup of having a validator nodes running POS BFT, an approver and a verifier contract.
00:07:42.600 - 00:08:44.780, Speaker A: So right at the moment, what we're going to launch, or what we're launching with, is just the execution client geth with an integrated consensus. Quite soon, we're going to move to having a separate consensus client, which will be something that will develop at immutable. And so if you can think of Ethereum, you've normally got a consensus client that works with execution clients and does the Ethereum. So this is going to be a consensus client that will run our POS BFT algorithm. And then the idea is that we should be able to quite quickly have a variety of execution clients use our consensus client. And so we wouldn't need to say, rewrite that consensus protocol and implement it for each of these execution clients. And so that'll give us execution client diversity, which will be a massive achievement.
00:08:44.780 - 00:10:06.744, Speaker A: The other thing that we'll be able to do is hopefully convince some of the players who have created consensus clients for Ethereum to implement the consensus protocol that we come up with. And if we can do that, then we'd have consensus and execution client diversity, which would add a lot of resilience to our system. Something that we're working on in particular myself, is a common API between execution clients and provers. So at the moment, each of these prover technologies, they have a way, a mechanism of getting what are the current transactions. So I know that you've got, say, hermes, the transactions are posted to Ethereum, and then you get the transactions of Ethereum. However, Polygon are moving towards with Polygon zero. The idea of having an execution client and just getting a block proof and scroll does that linear is in the midst of separating out their execution client and their prover, which are currently integrated, so that you can do exactly the same thing.
00:10:06.744 - 00:11:21.280, Speaker A: And I'm sure that Tyco and you know, once this API exists, will probably move to this as a way of having a decentralized sequencer linked to approval. So that's not going to happen tomorrow. As you can see, we've got four of these spaceships here, so it's a little way off. But I think that would be a great situation to get to where in the overall Ethereum ecosystem, we can have a range of different clients talking on blockchains and using a common API to talk to provers. So the overall immutable ZKe EVM system is massive and you shouldn't underestimate it. And it has touch points with a huge variety of things such as, say, metamask here that are outside of the system. We've got stuff on chain, we've got a whole lot of services, and we've got an SDK which integrates with games, apps, and is also supplied via cdns.
00:11:21.280 - 00:12:01.564, Speaker A: So I'm not going to talk about the entire system. And in fact, some of the other people from immutable have talked about that. Maybe some of these other components can be talked about in separate talks. So let's look at passport. So the goal of passport is to be simple to use, but secure. And how it works, how it provides the security at a really high level is a two of two signature scheme. So each user has a key and that can't be rolled over.
00:12:01.564 - 00:13:22.420, Speaker A: So if they lose their key, the recovery mechanism is they create a new wallet with a new key, and they move their assets from the old wallet to the new wallet. If you think about, say, metamask, and that's the same thing if you lose your passphrase and so essentially lose your private key, and some other people know your private key, the way to move forward is to create a new private key and to quickly transfer all your assets from your old private key, which is compromised to your new private key. So we've got, as I said, two keys, the per user key and the key that immutable holds, and that one can be rolled over. And the two of two scheme is enforced by some contracts that we've written. And so they have actually been audited, and the code and the link to the audit is available there. And as well as that, we've got step up authentication, so it's risk based authentication. So looking at passport, you've got your games app, you've got the SDK, and we've got some external services, we've got some web services of our own, and we've got the contracts on chain.
00:13:22.420 - 00:14:49.708, Speaker A: You can think that really you can break it down as you've got the app and you've got the cloud component by magic, and then you've got the cloud component by auth zero, our cloud, and the contracts. So the first thing the user does to really use this system is that they do an action that requires an on chain transaction, and then the app creates a meta transaction that will do the required actions. And so what a metatransaction is, is it's essentially a set of commands. Do this with these parameters. And so you have a whole list of commands that you want executed. And so the important thing about passport is whereas say, with say metamask or other wallets where it's your keys, your crypto sort of wallets, where there'd have to be a pop up, at this point we've got the ability to do some automatic signing. So you're essentially hand over to passport and say, look, every time a little thing happens in the computer game, I don't want to have a pop up, because I realize that having a pop up all the time would be really annoying.
00:14:49.708 - 00:15:46.100, Speaker A: However, I do want to have digital ownership of my assets. So then we contact Auth Zero, and Auth Zero issues a JWT. So a JSON web token. And for those of people who aren't familiar with Auth Zero, they're a company that is owned by Okta. It's part of the same company now. And so they've got thousands of enterprises across the world, have millions of logins, lots of different companies, and so they allow you to know, say, Google or Apple or email, sign in, and you do step up authentication and all sorts of great stuff. Rather than trying to do our own authentication system, we're leaning on people who really know their staff.
00:15:46.100 - 00:16:45.572, Speaker A: That's their bread and butter. So the JWT is used to request an encrypted private key that's stored in magic. And so magic is another cloud service that we haven't created ourselves, that there is a company, they do a specific service, and we've said, yes, we'll run with that service. And so the idea is that the user, they generate their private key, their key pair in their app and then they store the encrypted version of it inside of magic. And so the encryption key though that can be used to decrypt the private key is stored inside a AWS HSM vault. And so the process is for getting a key. So the SDK authenticates with magic using that JWT.
00:16:45.572 - 00:17:35.210, Speaker A: The SDK is then given a time bound AWS HSM vault token to access token for that vault. And so they also were given their encrypted private key. So magic has all of the keys but in ciphertext only. So then the SDK connects directly with the AWS HSM using TLS. So transport layer security. So that means that your app, and in particular the passport wallet part of it has a direct connect to a HSM and then it can then say, here's the encrypted private key, give me the plain text private key. So then it's able to get the plaintext private key and the only place it's been in plain text is in the app.
00:17:35.210 - 00:18:38.750, Speaker A: So you then sign the metatransaction using the user's private key and you submit that JWT and the hash of the transaction to Guardian. And then guardian will respond whether that it may need a confirmation. So it might need step up authentication. If the step up authentication is needed then the transaction is going to be in pending state, otherwise it'll be in approved state. And so the Guardian is essentially the gatekeeper. And so if you do need that step up authentication and one of the reasons why you might need it is because you're running a game in a web browser rather than in an app and you might be worried about cross site scripting attacks. Then you'll be directed to in a separate domain do another Oauth check and get another JWT from Auth Zero.
00:18:38.750 - 00:19:53.430, Speaker A: And that separate JWT is then used to connect to Guardian and say look, here's the second JWT and then the transaction is approved. And then the user from the SDK submits the JWT and the signed metatransaction to the relayer. The relayer checks the JWT, makes sure it's happy with it, talks to the Guardian, says is the transaction approved? And if it is, then the relayer counter signs the meta transaction and submits it to the then. You know, a big thing to think about here is that we want to do gas free for gamers and so we don't want to have to have every single user, every single game player knowing about gas and having to worry about it. And so what we're doing is for the majority of transactions that people are going to do when they're playing a game, it's going to be gas free. And essentially the game studios would sponsor the transactions. When you're doing, say, buying and selling nfts in a marketplace, you're going to need some to pay for gas then.
00:19:53.430 - 00:20:38.876, Speaker A: But yeah, when you're doing normal stuff related to playing in a game, it's going to be gas free. So the wallet contracts, and maybe this is where the real magic happens. So we've got quite a set of contracts, and these contracts are based on the sequence wallet. So we looked at sequence, we actually looked at a range of possible options and we thought, well, looked sequence, they've got 600,000 deployments, which is a lot of different contract deployments. They've had a lot of audits. We found some issues that we weren't completely happy with. So we've modified the way sequence works a bit and hence we've got our own repo and got a few additions.
00:20:38.876 - 00:21:25.440, Speaker A: So I'll talk you through how our wallet works. So we've got wallet implementation dynamic. And so it's the actual implementation of the wallet. And so it might need to get updated from time to time due to say, bugs in the code. And then you've got wallet locator, and so it knows where the latest instance of wallet implementation dynamic is. So the latest version of that code and we've got startup implementation. So it's a super simple bit of code and it calls the wallet implementation locator, finds out where the latest implementation is, and then calls and replaces the implementation with the wallet implementation dynamic.
00:21:25.440 - 00:22:26.500, Speaker A: So the wallet factory, its specific purpose is to use create two, to create a wallet proxy at a deterministic address. So the things that feed into that address of the contract that it's going to create are the bytecode of the wallet and any initialization variable. So essentially the init code. And so that includes the address of that startup wallet. So because the startup wallet doesn't change, it means that we're all good and that we're always going to know that proxy address. And also assault and the salt is a combination of the address of the immutable signer contract and the user's public key or address related to the public key. So the wallet deploys, the proxy proxy is a thin, thin, thin layer that delegate calls to the actual implementation.
00:22:26.500 - 00:23:05.196, Speaker A: And the verifier contract essentially wraps the immutable key. So the metatransaction signing key. So the proxy contract. There's one contract per user and it's super, super small, so that it doesn't cost a lot of money to deploy. And it's deployed to a deterministic address. So that's also known as a counterfactual address. And so that means that people can, you know your address before the contract is deployed, so people can send you nfts and money before your contract is deployed.
00:23:05.196 - 00:24:12.820, Speaker A: And so you only need to deploy the contract when you want to execute a transaction. The address of the proxy is derived, as I said, from the user's public key. So the user's address, the address of the sign a contract, the proxy's bytecode, and the address of the startup implementation. So that'll never change, even if there's a bug in the wallet implementation dynamic. And so to try and think through the upgrade processes. So if the immutable key, the immutable metatransaction signer key needs to be rolled over, then you can create a new public key and update the signer contract to match that. If the wallet implementation dynamic needs to be rolled over, we deploy a new version of that, update the locator contract, and then next time the users log in, we say, hey, you've got to upgrade.
00:24:12.820 - 00:25:18.888, Speaker A: If the user's private key gets compromised, then really the only way of doing it is to create a new wallet. So the security checks that we're doing here. So the relayer is only going to counter sign a metatransaction if the user has signed the metatransaction. So the private key from magic, if there's a JWT, that's in scope for the application and if the transaction has been approved by the Guardian, and the wallet implementation dynamic won't execute the transaction unless the user has signed the transaction and the relayer has signed the transaction. So we're trying to make sure that we're locking it down. So we've done, actually multiple people have done threat modeling on this system. And to make sure it's secure, we've identified pretty much anything and everything is an attack surface.
00:25:18.888 - 00:26:26.124, Speaker A: There are ways and means for attackers to get at almost everything. And so in this section, I'm going to walk through the security of our system. So the threat actors, so I think we can think that we've got the general public, so anyone who's on the Internet and can send transactions to our blockchain, you've also got insiders so immutable itself, the people who work at magic, people who work at author Zero, a game studio Amazon. And also maybe you've got a sophisticated attacker who can get access to the back end systems. Really the heart of it is the insiders, because a sophisticated attacker is going to essentially have the same skills and capabilities and knowledge as an insider. So we do have two limitations. So one is that we assume that an attacker can't steal a key out of a HSM, which seems quite reasonable.
00:26:26.124 - 00:27:38.200, Speaker A: The other one is that we don't think that the locator contract could, say, point to a new malicious dynamic wallet implementation. We think that we'd notice if that happened. All right, so what happens if the user's key is compromised? What could people do? So the attacker could sign a malicious metatransaction and then the mitigation for all of that is that though they can sign it, they're not going to have the JWT and hence the private key isn't going to be usable. Another thing that could happen is that the attacker could indicate to the relayer that if the guardian is compromised, it could indicate to the relayer that the metatransaction has been approved, even though it hasn't been. And then the relayer, though, it's going to block transactions because the JWT is not there. And so maybe if you could do a cross site scripting attack and hack the Guardian, you might be there, but still, that's a long ask. So the attacker is not going to be able to forge a transaction.
00:27:38.200 - 00:28:46.140, Speaker A: The Guardian could just say, no transactions are approved and that'd be a DOS attack that we'd quickly detect and mitigate. The attacker could have the immutable signing key and sign a malicious metatransaction and then maybe sign a malicious transaction. And so the thing is that the attacker doesn't have the user's private key, so it won't be doubly signed and so it'd be rejected at the contract level. The relayer could do a DOS attack as well. We could have a cross site scripting attack. If you're in a web browser, that won't work because we would do step up authentication and need two jwts on separate domains. Someone working at magic could steal the access token to the user's private key and get the user's private key, but they won't be able to get the JWT at auth zero.
00:28:46.140 - 00:29:39.170, Speaker A: They could issue fraudulent jwts, but that would authenticate the user. And then I guess we do require a second level of authentication. But at the end of the day, I think if author zero is compromised, we're in pretty big trouble because then they could then install the game and get the right tokens issued to them. Amazon. So Amazon could take their data centers offline or delete our accounts or something. So if someone, an insider Amazon just deleted our account in one area, we've still got the hsms that are replicated globally. But as someone in Amazon taking a data center offline seems pretty bad.
00:29:39.170 - 00:30:18.750, Speaker A: Amazon could delete all of our cloud data and all of the cryptographic keys and hsms. And if they do know, they still can't sign transactions. So the on chain stuff is going to prevent any transactions going in. Our blockchain nodes are in AWS. As you know, it's a blockchain and it's not just us. So there'd be other blockchain nodes that have the blockchain. So I think that would be pretty bad if Amazon deleted our account, but no one would lose anything.
00:30:18.750 - 00:31:13.490, Speaker A: Okay, what about users fully compromised, the user app being fully compromised? And before I dive into this, I should have done some interactivity earlier in the talk, shouldn't I? But who wants to postulate how the user app could be fully compromised? What are the ways that this could happen? So David, I know you're a pretty cluey person. What are your thoughts? Why could user app on a phone, essentially an app on a phone, how could that get fully compromised? So source code, private keys, everything that is used to make the app?
00:31:18.400 - 00:31:25.970, Speaker B: Well, if it's on Android, and.
00:31:29.730 - 00:31:30.094, Speaker A: I.
00:31:30.132 - 00:31:55.990, Speaker B: Think there's been enough evidence of Android apps being compromisable in many situations if they had the source code right, I guess also any phone can be jailbroken. So if you jailbreak the app, you've pretty much got kernel access and you can then read the private keys out of memory.
00:31:56.970 - 00:32:01.880, Speaker A: Yeah, that's a possibility. I don't know. Rezzy, are you there? What are your.
00:32:07.240 - 00:32:31.890, Speaker C: I mean, I think you mentioned some of the big, know what happens if gets compromised and whatnot. I mean, possible, it's possible that some of our services as well, if they're not implemented correctly to validate jwts and whatnot, that could be another attack vector. But yeah, it's definitely a good thing to think about.
00:32:32.420 - 00:33:05.980, Speaker A: Yeah. All right, well, here's the three that I came up with. So how could this happen? Rug pull. So the rug pull would be I develop a game, I make it, hopefully hundreds of thousands or millions of people start playing it. Hopefully somehow other I make money out of it. Maybe I sell nfts or something. And then for some reason or other I just run away from the game and take my money and run personally.
00:33:05.980 - 00:34:27.152, Speaker A: If you've got a successful game, surely you'd want to keep the money coming in. It's a possibility though, that someone creates from the scratch a malicious game. So obviously at immutable. We're trying to vet the people, at least initially, who are going to be creating games on the platform to make sure that they're not nefarious. Another one, and this has happened in the iPhone Android app space a bit, is someone creates an app and it's moderately successful, and then the developers of the app sell the app, the source code, the keys, the lot to someone and the person who's buying it turns out that indirectly they're actually working or owned by North Korea or some other nefarious actor. And so essentially you can imagine in our system a game could be sold to a nefarious game studio. The other one is not quite so nefarious as far as someone actually owning the game, but more you could have a legit game studio and someone does it is they could have spear phishing attacks to try and steal their credentials.
00:34:27.152 - 00:35:04.364, Speaker A: And in fact, for this last one here, I've lost my mouse. That's not good. Not all right. Got my mouse back. Always have a backup mouse when you're doing a talk. Yeah. So for this last one, we've realized that this is a possibility and we're in the midst of getting two factor authentication put into the system for the dev hub.
00:35:04.364 - 00:36:10.326, Speaker A: So that if someone say there is some spear phishing attack, it's less likely to work because we've got two fa on the actual dev hub. And so the dev hub is the system that game developers use when they're building apps for our system. So what could someone do? So we've got this blind signing feature that I talked about so that we don't have pop ups once every few seconds when you're in the middle of playing a game. So that means that the game itself could go off and steal all your tokens, which is not good. And we're working on mitigation strategies for that. It would obviously completely sabotage the game, so it would completely destroy the credibility of the game if they did that. So that doesn't seem very likely, but it's not impossible.
00:36:10.326 - 00:37:06.346, Speaker A: So we're working on strategies around that haven't come up with anything directly yet. Probably the bigger thing though is you wouldn't want to have someone create some indie game that half a dozen people are using and then use it to somehow other steal your assets from another game. And so that we've specifically made sure is impossible. So there are ways with the oauth that limit the game can only do all that blind signing business for their own assets, for assets that are within the game and not for another game's assets. Okay, so now I've got a demo that I'm going to do. So hopefully this is going to work and I'm going to tell you what's happening as we're going through. And this is the demo that Natalie created.
00:37:06.346 - 00:37:56.830, Speaker A: So we've got a fox running through and acquiring some points and then it gets to the end and we have a pop up. And so what this is saying is you've completed the round and we want to give you some tokens. So you've got to create a passport wallet. So this is no passport wallet. Let's create a passport wallet. So to create a passport wallet, what's going to happen is the user is going to generate their key pair. They're going to then talk to magic and then put that encrypted key pair on the encrypted private key, get it into the HSM, which will encrypt it, get the ciphertext back and then store the private key into magic, and then it'll have its counterfactual address.
00:37:56.830 - 00:39:11.446, Speaker A: And using that CFA address of the passport wallet, it'll then be able to have the nfts assigned to that address. All right? And so then the users deciding to use Google as their way of logging into passport, and then, as I said, we're having the key generated, encrypted, stored in magic token sent to the counterfactual address and then we're doing the next level. So again, we get to the end of the level. And so this time we've got to the end of the level and we are given the option of using three of the tokens to buy a new skin for the fox. And so the new skin is a new separate NFT. And so we need to be able to burn nfts. And to burn the nfts, you're going to have to give approval for the game, then to burn your nfts and for you to then have this new NFT granted to you.
00:39:11.446 - 00:39:53.538, Speaker A: So you've got to now deploy your contract. And as well as deploying the contract, you'll then do the approve operation. And so that's then deploying the contract and then doing the NFT transfer. All right, next level. And boom, got there. And then we're going to again, mint. Another NFT.
00:39:53.538 - 00:40:40.666, Speaker A: So burning one. So it's essentially crafting. And then we've got the really cool skin. And that is pretty much it for the demo. So that shows you how with almost no interaction from the user, no not entering complicated keys, they're able to do stuff that didn't work. All right, so some final thoughts. So a lot of wallets out there are not your keys, not your crypto style wallets and say, like, metamask.
00:40:40.666 - 00:41:11.770, Speaker A: And I think those wallets come with really big usability costs, and you've got to remember the password. There's no way of just logging in using a social login. And you've really got to watch out for, say, losing devices and things. So passport is a wallet that you hardly know was there. And I think it delivers pretty good security. Great security. And so I think it delivers on its promise.
00:41:11.770 - 00:41:34.978, Speaker A: And before I go any further, I'll just plug my keyboard in. So before I go any further, are there any questions? So I was planning to stop at each section point, but then I forgot to. So sorry about that. But are there any questions?
00:41:35.144 - 00:41:38.334, Speaker B: Yeah, Peter, I threw a couple of questions in the chat.
00:41:38.462 - 00:41:51.602, Speaker A: Oh, did you? Yep. All right, let's have a look at the chat. Is this wallet revolutionary? I don't know. I think there have been a lot of movements.
00:41:51.666 - 00:42:00.380, Speaker B: No, that's not a question. That was from our discussion about clickbait talk titles. The two that are labeled question.
00:42:01.470 - 00:42:08.860, Speaker A: Okay. All right. Yes. All right. Moving on. From clickbait talk titles. Yes.
00:42:08.860 - 00:43:02.880, Speaker A: Okay. It seems that immutable is doing a surprising amount of fundamental blockchain infrastructure development. Why does the company believe that investment to be necessary to serve their market? So fundamental infrastructure. So I think the roll up technology sector is pretty immature. It's new, and we are working with Polygon to create an awesome system. But I think us working with Polygon makes us better. And I think Polygon, us working with scroll and linear consensus and all the others will make Ethereum really good.
00:43:02.880 - 00:43:24.238, Speaker A: Why are we doing it? I think to really ensure that we have a great system overall. That's why we're doing this. Does that sound fair enough? Yep.
00:43:24.334 - 00:43:25.300, Speaker B: That's fine.
00:43:28.310 - 00:44:16.586, Speaker A: Yeah. So the demo game isn't a product, I'm sure if you ask Natalie. Actually, I know that the software behind that is on or soon to be on an open source repo. So you could get that code and have a look at it, play around with it, create a game yourself, or you could just choose to play the game all by itself. I think there are only three levels, so you might sort of have limited time that you might be interested in playing the game. Maybe, but still, it's a great game. Yeah, you say, you know, I mean, we've had Ubisoft or Ubisoft sign up and I think they're the makers of Assassin's Creed.
00:44:16.586 - 00:44:26.230, Speaker A: So I assume that they'll have a far more complicated game that they'll eventually come out with than the Fox game. Frank.
00:44:29.280 - 00:44:32.124, Speaker D: Hey, Peter, I have a question.
00:44:32.322 - 00:44:33.870, Speaker A: Yeah, sure, go ahead.
00:44:34.580 - 00:44:57.320, Speaker D: The wallet. Do you expect to work only on the immutable network for now to store all the keys to assets that are on the immutable X games or in some future in the roadmap? You expect the wallet to be more generic and we can use it also on other assets outside of immutable.
00:44:58.780 - 00:45:40.000, Speaker A: That's a great question. So I know that there is a plan for it to be able to be used on Ethereum as well, but whether it will be a generic wallet that will work with other assets is a question for a product manager. And so I'm going to ask a product manager to put a comment on the video when it's uploaded to YouTube to answer that question. I think that's probably the best. The product manager, I'm sure the first question they're going to say is, who is this defano guy? Is he from some huge game studio or something? So what's your background?
00:45:40.160 - 00:46:34.950, Speaker D: No, I have a couple of things that I'm doing at the moment. One, my background is technical and I lead the web three, practice in a startup here in Australia called Block Trust. So that's my daily job, pretty much build web three applications and another seat or another hat that I wear is on ACS, australian computer society and I'm chairing the blockchain working group, specifically looking at aspect of skilled migration, assessment of skilled migration and then awareness, community activities, publications, anything that raise awareness and visibility on blockchain in the country.
00:46:35.260 - 00:46:45.210, Speaker A: Okay. All right, sounds great. All right, I'll give them that context to the question. Thank you. Are there any other questions? And Frank, do you have a question?
00:46:47.820 - 00:46:54.990, Speaker C: Short one. So what's the latency? Because you have contracts deployed and so on in the system. So is it fast enough?
00:46:55.600 - 00:47:52.850, Speaker A: Yeah, this is a really good question because when you're playing a computer game, you don't want to have to hang around. We're using at the moment click moving to a POS that'll be based on QBFT. And so that'll give us instant finality where instant means when a transaction is included in a block, then it's final. The block times 2 seconds to allow for a globally distributed validator set. And so that means that it's going to take up to 2 seconds as far as deploying the wallet contract and then doing transactions using it. We're going to use a multicolore contract so that it gets deployed and then used all in the one transaction. So that obviously accelerates things.
00:47:54.420 - 00:47:59.276, Speaker C: That was my question, actually. It's not compatible with the optimistic roll ups.
00:47:59.308 - 00:48:02.844, Speaker A: Right. Well, it's not aiming to be optimistic.
00:48:02.892 - 00:48:06.576, Speaker C: Exactly. No, I totally agree. But you need instant finality.
00:48:06.768 - 00:48:50.720, Speaker A: Yeah. Optimistic roll ups don't work, I think. Well, I mean, personal opinion, anyone wants to come from optimism or arbitrum, please do. But my gut feel is that the optimistic roll ups don't work for games. I mean, in particular, you need to have instant finality and you need to also. So when you're doing an exit, you're exiting NFT. So if you do want to say move an NFT from one chain up parent chain, you can't wait a week and you can't use liquidity bridging, which works for fungible tokens, but doesn't work for non fungible tokens.
00:48:52.760 - 00:49:03.456, Speaker C: That's the real reason. Right. Because there are ways of having a fast bridge, for instance, with optimistic roll ups, but it doesn't work for non fungible tokens.
00:49:03.568 - 00:49:33.730, Speaker A: Exactly. And so certainly within our l two, l three ecosystem, part of it is going to be that we're going to have ZK roll ups and be able to have those zero knowledge bridging across chains quickly. Yeah. All right, cool. And Joanne, do you have any questions? No questions. It's great talk. Thank you.
00:49:33.730 - 00:50:03.300, Speaker A: Thank you. All right, so the store is open, and get your t shirts. I've got to. Okay. And future talks. So in two weeks time, we've got Tim Biko is going to talk about Ethereum governance. Two weeks after that there's going to be a interview challenge.
00:50:03.300 - 00:51:55.032, Speaker A: So the challenge I'm going to do is I think everyone's seen these open Zeppelin access control contracts and you could imagine you've got a contract which has got access control. So if you're going to buy that contract from someone, if you're going to buy it, how do you do that? So the interview question is going to be create a contract which you can safely use to buy an access control contract. How can you make sure that you don't pay all your money and then not get your contract at the end of the day? How do you do a fair exchange, a safe exchange? So that should be hopefully interesting, and that'll be a live coding thing where my hope is that everyone will have their integrated development environments open and contribute to their thoughts on how the code should be developed on January 17. So we're going to have Christmas and new year and then back on January 17 to talk about decentralized sequencer friendly consensus algorithms. Then Christian is going to talk about essentially alternatives to passport. So he's going to do a deep dive analysis of all the possible wallets that are out there and try and compare them, try and understand how do they relate. We've also got Sarab from super oracles, and so he's going to talk about his protocol around Oracle agreement.
00:51:55.032 - 00:52:39.500, Speaker A: And then I've got another three talks that are coming along that are going to be some startup talks about ZK stuff and also one around push, which would be interesting. Okay. And if you're watching this on YouTube, you can join the slack space and join the meetup. If you're wanting to engage with people, please join the slack workspace. And from time to time, there'll be examples there. So thank you, everyone, for coming along. Final chance to ask tricky questions about immutable pass port in the Zkevm.
00:52:39.500 - 00:52:44.268, Speaker A: All right, going. All right, thanks, everyone.
00:52:44.354 - 00:52:44.956, Speaker C: Thank you.
00:52:45.058 - 00:52:47.564, Speaker A: Have a great week and talk to you later.
00:52:47.682 - 00:52:48.504, Speaker B: Nice job, Peter.
00:52:48.552 - 00:52:51.210, Speaker A: Thank you. Thanks, Peter. Great job. Great talking.
