00:00:02.490 - 00:01:07.530, Speaker A: Okay, so hello and welcome everyone. This is the Ethereum Engineering Group meetup re recording of the talk on forks, reorgs finality and selfish mining. And that is the correct screen. Okay? So I'm going to stop my video so that you're more likely to hear my audio and take it away. So, yeah, so this talk is based on a lot of work I've done myself. But also, thank you very much to Vanessa, Adrian and Nicola. They've been of great help.
00:01:07.530 - 00:02:02.350, Speaker A: And so we're going to go through all of these topics today. And so when I started researching forks, I thought, oh look, I'll have a witty photo. And then I realized that there were quite a few different types of forks and there are even Ethereum forks that we've heard a lot about. The talk today isn't going to be about those forks as such. They're going to be about forks in the blockchain. So where you've got a set of miners mining and then at some point for some reason, we end up with two chains. So that's what this talks about.
00:02:02.350 - 00:03:25.444, Speaker A: And so when we think of Bitcoin, they've got what's called the longest chain rule, which really comes down to whichever is the longest chain is the one that everyone should be mining from. And so if you've got two nodes that are at opposite ends of the blockchain, so essentially they've got a lot of electronic distance between them, then you'll find that one might produce a packet, might produce a block, say, of the network, and it might start propagating that and saying, hey, I've created another at the other side of the network. You could have another node and it could be producing a block. And so you could be producing blocks and not be aware of the other's blocks yet. And so you can end up with a fork. And that's simply because of the fact that you've got nodes that are working independently and don't know about each other's blocks. And so if one produces longer blockchain than the other because they find the answer to the cryptographic puzzle sooner, then they'll end up with the longer chain.
00:03:25.444 - 00:04:41.270, Speaker A: And all valid nodes should be building off their longer chain. And so the blocks that are produced by a node, which end up not being the longest chain, they become what's called stale blocks or orphaned blocks because they don't form part of what ends up being the canonical chain. And so they'll be discarded. And importantly, the transactions that were included in those blocks are discarded too. So I'm not exactly sure how Bitcoin clients work, but certainly in Ethereum clients they would then be pushed back into the transaction pool and chances are they may have been included in some of those other blocks anyway. So let's talk about hard forks and soft forks. So a soft fork is a backwards compatible software update to the mining come validator node software.
00:04:41.270 - 00:05:59.650, Speaker A: So your nodes in the network run software, when you update them, you may have a backwards compatible change and that's a soft fork. And for example, you could have say, the gas limit, say if you have a gap, the gas limit goes from 8 million and goes down to 7 million. Then if you're running the new software, then when you generate a block, you'll generate it with 7 million gas. So in other words, you'll generate a block that's got transactions and the limit of those transactions will be 7 million. And so old nodes running the old software will accept those transactions, the block, as being valid. However, when a node running the old software puts together a block, it'll find transactions that sum up to a maximum of 8 million gas. And so when that block is presented to a node running the new software, because it will only allow for 7 million, it will reject that block.
00:05:59.650 - 00:07:20.970, Speaker A: So if you look at the slide here, you've got everyone was following the old rules and then there was a soft fork activation. And then the miners that are running the old rules, if they try and generate a block, then it will be rejected by the nodes running the new rules. Whereas if you've got that block, a new block generated by miners that are using the new rules, all the miners, including the miners using the old rules, the old software will accept the block. And so because of that, the miners running the new rules will tend to create the longest chain because their blocks are going to be accepted by everyone, so they're more likely to succeed. A hard fork is an incompatible software update to the mining and validator node software. So for example, you could change the way the block hash is calculated. Or maybe there's a new opcode in the Ethereum virtual machine.
00:07:20.970 - 00:08:39.140, Speaker A: So when a node running the new software mines a block with the new hashing algorithm, new block, hash algorithm, then nodes running the old software will reject the block. And when old software mines a block with the old block hash algorithm, nodes running the new software will reject the block as invalid. So you end up in this sort of situation where everyone was following the old rules. Then at the time of the hard fork activation, the miners that use the old rules would generate a block and all the miners using the new rules reject it. And similarly, miners using the new rules, when they generate a block, then it'll be rejected by the miners that didn't accept the hard fork. So yeah, and similarly, so that was for the hashing algorithm. But if it was a new opcode, you have the same situation.
00:08:39.140 - 00:10:23.830, Speaker A: So how you can think about this is when there's a transaction that has an incorrect opcode in it, it'll cause a revert. And so even transactions that have reverts, they're mined, and they don't cause state updates except for the gas usage. And so if you've got a miner following the old rules, then they'll mine that transaction as a validly formatted transaction, but a transaction that results in a revert, and it will come up with a certain set of state updates. Whereas miners that look at that transaction in the block that understand the opcode, they'll mine the transaction and it'll result in maybe not reverting because the opcode is valid. And so that might result in a different state update and because they result in different state updates, then you end up with a different block hash. So hence if there was a new opcode in a transaction that gets included in a block, then the nodes that follow the old rules when they generate a block because it ends up with a different block hash to the ones following the new rules, it'll be rejected by the new rule following miners. And similarly if that transaction is included in a block that the miners that are following the new rules follow, it will be rejected by the miners following the old rules.
00:10:23.830 - 00:11:59.300, Speaker A: Okay so now let's talk about OMRS uncles and the heaviest chain. So similarly to bitcoin, ethereum has latency between nodes and so ethereum's block period is 14 seconds whereas bitcoin it's ten minutes. And so Vitalik created this idea of uncles and over time that's been changed to the gender neutral form Omar. And so miners get rewards for generating omar blockheaders. And so I think the rationale behind this is that because it's a distributed network and because of that block time it's far more likely that you will end up generating blocks that don't end up getting put into the canonical chain. And to incentivize people to be part of the network, you've got rewards even if you or you end up being part of the canonical chain. And so when you're looking at an Omar, it's important to think that it's a block header, it's not actually a block.
00:11:59.300 - 00:12:58.744, Speaker A: So if you look in the yellow paper at the OMA validation rule, we'll work through this but as you'll see it's just down to it being a block header and it's nothing to do with any transactions in it. And so an OMA is accepted as being valid. So the first thing on equation 155, what it's saying is you can have up to two OMMAS. So Bu is less than or equal to two. So it can be zero one or two and V brackets U, that's saying that the OMA header, so the uncle header must be valid. And then the next K brackets U, et cetera. What that's saying is let's execute equation 156 with a starting value of six.
00:12:58.744 - 00:14:24.260, Speaker A: So we're saying starting at the current block header and the parent of the current block header and the uncle, let's go back up to six iterations of equation 156 and then equation 156. What that's telling you is that if we've iterated six times then it's definitely not an uncle. So return false. Otherwise let's have a look at the sibling rule or iterate through this equation but decreasing the N value. So the iteration by one and the is sibling rule, what that comes down to is, is the parent of this header, does that equal the parent of the uncle or the Omar and the uncle and the OMA can't be equal so they can't actually be the same block. So that's to make sure that no one tries to submit part of the canonical chain as an Omar. And the last part of that isn't part of the set of lock headers that are OMRS is saying let's make sure that this Omar hasn't been included previously.
00:14:24.260 - 00:15:32.440, Speaker A: So what all that's coming down to saying is that the OMA has to be a direct descendant of the canonical chain. So if it's a green block it's okay, but if it was a red block then it isn't. And so that's how they've defined OMAS there in the yellow paper. And so though on that last slide I showed there being lots of OMAS, if you look in reality they're not as common but they still do happen. So if you can look there, there was one say 45 minutes before I took this screenshot, 48 then 2 hours. So you can see they do happen but they're not like once every block or anything like that. So normal blocks get a block reward at the moment of two Ether.
00:15:32.440 - 00:16:21.880, Speaker A: And obviously the miner also gets the gas value for all the transactions in the block. They also get an uncle or OMA reward. And so that's 130 second of the normal block reward. So 3.1% and given we've got two Ether, that's 0625 Ether is the uncle reward. And if you're the generator of the Omar so you mined that block that then the header became an Omar, then you get rewarded too. And so the Omar reward relates to how long ago you generated the Omar.
00:16:21.880 - 00:17:56.760, Speaker A: And so it's one plus an 8th of the Omar block number minus the current block number times the block reward. And so you can look at this equation here and the example here. And so say if the OMA was in the previous block, so 9,058,659 and the current block is essentially 660, then it's going to be minus one and hence you end up with 1.75 Ether for mining an Omar. So transactions in OMAS are ignored and so essentially those transactions are reorganized out of the chain so they're not part of the canonical chain and they'll be pushed back into the transaction pool. And a lot of the transactions that were included in the Yoma may have also been included in valid blocks blocks and they're pushed back into the transaction pool. And so even if your transactions are part of a block that becomes an Omar, it's still discarded.
00:17:56.760 - 00:19:10.230, Speaker A: So the heaviest chain rule is about which block has the most proof of work behind it. So the one that's the heaviest chain is known as the canonical chain. And so how you can think of it is that if you look at the numbers in these blocks, the higher the number, the heavier it is, and it's the number of blocks that it refers to. And as you can see, adding in OMAS ends up making a block heavier. So the heaviest chain, though, is the one with the most work behind it. And that then is related to the difficulty. And so the difficulty is adjusted.
00:19:10.230 - 00:20:22.592, Speaker A: And so yes, what Andreas said there is correct. Yeah. So an OMA can have the same transactions as the conundrum block, but in different order, and hence you end up with a different block. Hash correct. And also, if you had two transactions that were manipulating the same account, you may end up with completely different block state as well. It okay. So heaviest chain rule, you've got the though you may have two blocks that have got the same number of blocks behind them, they may have subtly different difficulty.
00:20:22.592 - 00:21:42.824, Speaker A: So hence you would be able to decide which block is heavier because it's got more difficulty behind it. Okay. Finality on Ethereum Mainnet. So a block is deemed final when it can't be changed, and all transactions which are contained in a finalized block are deemed final. So Ethereum Mainnet uses Etash Proof of work algorithm, and the node that solves the cryptographic puzzle problem first gets to create the next block, or it creates a block and nodes at the other end of the network may be creating blocks at exactly the same time. The probability of solving that cryptographic puzzle problem first is proportional to the percentage of total mining power. And so hence it's also, I guess, the probability of being reorganized or not reorganized.
00:21:42.824 - 00:23:03.684, Speaker A: And the thing to think about though, is that Mainnet offers probabilistic finality. So a common question that people have is how many blocks should I wait for a transaction to be deemed final on Ethereum Main net? And deem is the important word here. So it's never going to be final because it's probabilistic, but you can deem it to be final enough for you. And so I asked quite a few people within consensus this question, how long should you wait? And I got a huge variety of answers from six blocks to hundreds of blocks. And it really was quite enlightening seeing all of the huge range of answers. And so a fair bit of view, and should we wait in bitcoin, you've got the block finality, you've got the number of blocks that have created after the current block is called the number of block confirmations. And so people talk about that.
00:23:03.684 - 00:25:05.916, Speaker A: The greater the number of confirmations that you observe, then the lower the probability that an attacker can create an alternative chain that would then lead to your transactions being reorganized and maybe removed. And so hence, you should wait more confirmations. And so there's this set of equations at the end of the bitcoin paper which talks about the probability of the blocks of being kept in the canonical chain and not being removed by an attacker, maybe creating a longer chain. If you work it through here, p is the probability of generating a new block by honest nodes and Q is the probability of an attacker and Z is the number of block confirmations. So if you can think, say that P is say zero nine and Q is zero one, then you can see that lambda will get smaller as time goes on. And so yeah, and so what that's showing you is that as you have another confirmation, then another confirmation, the probability will get smaller and smaller. And if you run the numbers, then the probability in bitcoin of a block being removed after six blocks, assuming 10% mining power was using this equation, is zero point 24.
00:25:05.916 - 00:26:35.140, Speaker A: So two and 10,000 essentially. So in Ethereum though, it's not the same as bitcoin, it works differently. It's got the OMAS, it's got different dynamics related to its currency and its value and also a different mining time as well, different block period and time. You, he and his other and other his co authors determined that there were 37 Ethereum main net block confirmations were needed to give the same security as bitcoin assuming 30% mining power. So since 2016 a fair bit's happened and so the mining power of Ethereum has increased considerably. So that 30% attacks would be completely inconceivable. Now and I'll walk you through why I say that later in this talk.
00:26:35.140 - 00:28:14.290, Speaker A: The other thing to think about is that the mining rewards of bitcoin and Ethereum have changed due to the relative valuation. And so if you were to allow for a 10% attack, then you're really looking at about eight Ethereum block confirmations, rather to be equivalent to six bitcoin confirmations. Using the same basing on Gervais's paper and using completely different methodology, vitalik worked out that it would be between six to twelve confirmations. So you've got one mechanism telling you about eight and Vitalik telling you about six to twelve. So if you said that you wanted to wait twelve block confirmations and then you have 14 seconds per block, then you're just under three. However, it's worthy worth noting that six block confirmations, we're going to give you two in 10,000 or 00:20 4% and if you're going to transfer a million dollars then maybe you want to be a bit more sure than 00:20 4% sure that you're good. And so the solution of course is just wait a few more block confirmations.
00:28:14.290 - 00:29:13.364, Speaker A: So what's selfish mining? It's an attack where a miner decides to keep valid blocks that they have successfully mined secret instead of broadcasting them to the network. And so a miner could decide not to propagate the blocks that they've mined. And that's what it really comes down to. And in conjunction with that, they can manipulate the timestamp. And so any block that's mined is deemed valid as long as it's within 15 seconds of current time. And so an attacker could try and manipulate the timestamp to try and win a fork. And another thing that miners can do is they can observe latency between nodes and they could maybe inject their block just at the right point in the network.
00:29:13.364 - 00:30:33.130, Speaker A: So they could be trying to have super fast connections to everyone and observe that there were slower connections between some miners and they could try and exploit that somehow. Yes. Andreas is saying that needs better finality. I'm just telling you what main net is giving you as opposed to saying whether you need what's good if you're doing an enterprise. Yeah, so enterprises can maybe leverage main net for the non repudiation, but maybe if they want to have super fast finality, then they need to use a network that offers different security properties. So use a private network and then maybe pin it back to Mainet or something along those lines. Yeah.
00:30:33.130 - 00:32:28.380, Speaker A: And for those who are watching the recording, I'm not sure if you'll be able to see the chat window, but yeah, Andreas was saying in the chat window that essentially that some organizations or the Fed needs to have much tighter finality. Okay, so selfish mining in this diagram here, you've got the Selfish miner at the top and they might have hidden blocks that they might keep. And of course, if you look at block three A and four A, if they want them to be valid, then they're going to have to try and create a timestamp for them in the future such that when they do propagate them onto the network, they have a valid timestamp. And so the idea is that the miner needs to release blocks into the network at just the right time. So they'd have to speculate about when block two B might be produced by some other node and then release two A at just the right moment. And because they might be able to release two A before two B is released or just as it's being released, then they might be able to influence most miners to use two A and then they might build off two A. And then what they can then do is they can then use one B and two B as OMAS and hence increase the weight of their chain.
00:32:28.380 - 00:33:42.340, Speaker A: And then similarly, they can do that with three B and four B on adding into, say, this is lovely but overly realistic because it relies on the selfish miner being able to produce blocks faster than the honest miners. And that's really going to come down to how much hashing power they've got. And they'd need an awful lot of hashing power to do this sort of attack successfully. And in fact, Vanessa did some analysis and produced this graph here. And what this shows is that you need to have more than 25% mining power to successfully do a selfish mining attack. And one interesting thing is the actual total revenue for mining increases with selfish mining. And so why that occurs is because you've got more blocks that are OMAS.
00:33:42.340 - 00:34:32.608, Speaker A: And so hence there are more Omar rewards. If you're a selfish miner and you're doing less than 25% hashing power, then you're actually going to be losing money. So it doesn't make sense. So then the question comes, does selfish mining actually happen? So you have got these miners who some of which have got large percentage. So Ether mine 21% spark pool, 32% certainly spark pool. If they selfish mined Ethereum, they could produce a little bit more money than they currently are producing. At least they could mine more blocks.
00:34:32.608 - 00:35:43.896, Speaker A: And assuming everything was static, they'd be okay and they end up producing more ether for themselves. However, their finance, they were hacked and their software, due to a software bug, attackers got in and they were able to steal 40 million of bitcoin. And so the CEO sent some tweet saying that they were going to revert the chain and essentially they were going to selfish mine bitcoin to get their money back. And so they're a major miner and so they said we'll do this. And then within minutes, hours, they sent a retraction. And I imagine that all of the other miners on bitcoin would have said, don't be silly. If we revert the bitcoin chain, then everyone will lose confidence in bitcoin.
00:35:43.896 - 00:37:07.460, Speaker A: And if people lose confidence in bitcoin, then the value of bitcoin will go down significantly and that will affect your investment. So if you're mining, say a reasonable percentage of bitcoin, then you've got hundreds of millions of dollars invested. And so if you don't want your hundreds of millions of dollars investment to suddenly be worth less, so hence the CEO, even though it was over $40 million, they quickly backpedaled and said no, they would not selfish mine bitcoin. And so I think that you can imagine that similarly for Ethereum, the major miners are not going to want to selfish mine it because people will lose confidence in Ethereum mainnet. So assuming the large miners don't want to selfish mine Ethereum, what about you? Could you rent enough hashing power to selfish mine Ethereum? So the hashing power for Ethereum is shown here on this graph. And at the moment we're sitting at about 175 terrahashes. One thing to note is that all terrahashes aren't built the same.
00:37:07.460 - 00:38:03.384, Speaker A: So if you look at a Bitcoin hashing power, it's not the same as an Ethereum hashing power. They've got a different block hash algorithm and hence a different mining algorithm. And hence the hashing power that you need for bitcoin is different. Or the amount of hashing power you can do with the same hardware is quite different. And so you've got to be looking at Ethereum hashing power. It's possible to rent up to about five terrahashes per second for about two bitcoin per TerraHash per day, about seventy five K us at the moment. And five terrahashes though, is only 2.8%
00:38:03.384 - 00:39:03.146, Speaker A: of the total hashing power of Ethereum. So even if you wanted to, you can't rent more than about 2.8% and certainly not 25%, which is what you would need to do to be successful. So if you can't rent the hashing power, can you buy the hashing power? So I had a quick look and you can buy some gaming cards for about $500 each. And if you wanted to try and get to 10% hashing power, you could try and spend about $182 or million dollars. But of course there are a few problems with this simplistic equation. First one is that you will probably need electricity or you will need electricity and you'll need cooling and you'll need a building.
00:39:03.146 - 00:40:17.680, Speaker A: And so either buying or renting a warehouse and paying for the air conditioning and the electricity is going to be a major cost. And as well you can't just set up a building and then just electricity put into that street and maybe that whole suburb to run the size of mining pool that you need. And then of course you've got if you ring up asus and say, hi, I want to buy a $182,000,000 worth of cards, they'll probably anyway, it'll be an interesting conversation to have. I'm not sure that you would anytime soon end up with hundreds and hundreds or thousands of cards. And as well you've got to put the cards into racks and you've got to have networking equipment as well. And all that costs money as well. So I think that if you wanted to go from 10% to say 25% or 30% hashing power, it's got to be closer to a billion dollars than 600 million.
00:40:17.680 - 00:41:42.520, Speaker A: But there are any guesses. And of course once you started doing this everyone would notice that you were creating this massive server farm and then you would imagine that other people might consider putting more mining power into Ethereum. So does selfish mining happen on Ethereum main net? For my money, I think it seems unlikely because you've got to have more than 25% hashing power and there's only one miner that could do it. And if they did that, then their investment in Ethereum would go down. So I don't think it is. And yeah, so Andreas has put in the chat here that maybe you could have a nation state actor trying to put in and do a selfish mining attack. Yeah, they would still have to have a huge amount of mining power, which obviously organizations like the NSA, Chinese military have got lots.
00:41:42.520 - 00:43:37.690, Speaker A: Yeah. Because they're not trying to make money out of it, they're just trying to reorganize the state they need to have. So thus far no attack like that has been seen. Yeah, I yeah, it seems yeah, it seems unlikely. So does, does selfish mining happen on other blockchains, ethereum Classic and other smaller blockchains? Yes, there are actual if you just go and do web searches you'll see that there are other chains that have been attacked and sometimes it's just a proof that you can do it more than anything else. Okay, so coming up in a Ethereum fork soon is something called Progpal and it's a new proof of work algorithm that is proposed to replace the Etash. And so the idea is that it'll make GPU mining more competitive with ASIC mining and it does this by increasing the state of the mix state.
00:43:37.690 - 00:44:38.538, Speaker A: So what you can think of is that inside of these mining algorithms you've got essentially large hashes. So you use a normal hashing algorithm and you combine them up to create essentially a large hash. And by increasing the mix state you increase the size of memory that the CPU needs to be able to keep active and needs to have super fast access to. And so it means that you need to either redesign your ASIC to have more memory available to it or use a GPU. And so the idea is to reduce the centralization. So in summary, a fork is when the chain splits. A soft fork is a compatible update to the rules.
00:44:38.538 - 00:45:40.580, Speaker A: A hard fork is an incompatible update to the rules. An Omar is a header of a block which is not part of the canonical chain but is used to reward people for mining even if temporarily secret. And with the aim to manipulate other miners in mainnet and selfish mining, it seems unlikely to be successful. And at the moment it doesn't appear that people are doing selfish mining. And there are a few references in the coming weeks and months. So over Christmas, new Year we're having a break. Then I'm going to do an introduction to Ethereum and Blockchain on Monday the third.
00:45:40.580 - 00:47:16.420, Speaker A: And then after that I'm going to on the Wednesday talk about how you can write your solidity contracts to handle atomic cross chain transactions and what special software development programming paradigms you might use to do effective cross chain transaction programming. Following that, Adrian is going to talk about our Ethereum Two client Artemis and talk about its architecture. And then Harathio and I will talk about writing a dev P to P sub protocol. And then if you're interested in giving a talk on blockchain applications that you've got or Blockchain research, please get in contact and we might be able to slot you in. And are there any questions? Peter, you might want to give a look ahead and say how with the rollout of Beacon Chain and Casper, how that is changing the picture also in particular around Finality. Yeah, that is true. So I haven't looked at that in great detail.
00:47:16.420 - 00:48:10.980, Speaker A: I know that we'll do another Ethereum Two talk probably sometime in the first half of the year. So we've had an. Ethereum Two talk where Bret talked about where we were up to with the finality in Ethereum Two. But yeah, that it's. And it's I think I saw somewhere that it's due to go live now in July next year. And so I and I think that Ben was saying that it should be reasonably probabilistically final in some number of blocks, but then completely final once every ten minutes or 15 minutes or so. But we'll talk about that in more detail in a few more months.
00:48:10.980 - 00:48:48.220, Speaker A: Does anyone have any other questions or thoughts? Just wanted to say thank you. I thought that was very well done. Thank no problem. All right, well, look, thank you, everyone, for being on the call for the re recording. And have a great day. Thank you. Thanks, Peter.
00:48:48.220 - 00:48:49.900, Speaker A: Great presentation. Bye.
