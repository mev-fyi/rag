00:00:01.610 - 00:00:50.050, Speaker A: Hello and welcome, everyone. This is the hotel and train demo. Okay, so with the demo, we've got three blockchains. So we've got travel agency a blockchain, you've got a hotel blockchain, and you've got a train blockchain. So the hotel blockchain manages the reservations and payment for hotel rooms. The train blockchain manages a train and train seats and payment for train seats. And so the travel agent could book, or you could imagine another travel agency book, or people could even book directly as well.
00:00:50.050 - 00:02:02.090, Speaker A: So in this scenario, a naive way of doing it would be what's shown in this slide, where you have a booking system trying to reserve a hotel room and a train seat and pay for it and have all those contracts lockable. But if you have a second organization trying to do the same thing at the same time, then you'll fail due to hitting a lock. So how you could do this is you have essentially a router contract for the hotel and for the train and have the individual rooms and seats in separate contracts so that then when the second agency tries to book at the same time, they don't hit a lock on the room or the seat. However, they will with the ERC 20 contract for the payment. So hence, you need to change the method of using an ERC 20 contract to also have essentially each item within an account is a lockable contract. And so the hotel might have, say, five slots, which it could be paid into. But maybe the travel agency only needs one slot because it's only ever making one payment at a time.
00:02:02.090 - 00:03:10.256, Speaker A: But each of those slots for each account is a separate contract, which is lockable. So in this way, you can have multiple payments booking multiple rooms and multiple seats all at the same time. And so a key part of this technology is that cross chain transaction where you're going from that booking contract into those two routing contracts. And so with our code, with our system, our technology, the atomic crosschain transactions, what you're getting to is just those two lines of code down the bottom there, where you've got your crosschain transaction to book the hotel room. And so you're passing in the blockchain ID the address of the contract to be called and then the function to be called within that contract and some parameters. And then with the train, again, similarly, you're passing in the blockchain ID the contract, the function and some parameters. And that, at an application level, is all you're needing to do.
00:03:10.256 - 00:04:03.890, Speaker A: So it's a simple application developer interface. So those cross chain transaction calls, we've implemented that as a pre compile. And so the pre compile is wrapped in this call here. Also within that hotel room booking router contract, you need to book a room. And so that you don't hit a locked contract, we've also got a pre compile that checks whether you've got a locked contract or not. And so if it's locked then you don't try and reserve that or check whether it's booked already. And as I said within the ERC 20 contract, rather than having a mapping of address to value, you've got an address to an array of addresses and they're essentially slots which you could be paid into.
00:04:03.890 - 00:05:00.320, Speaker A: And you've got a transfer function which, similar to a normal ERC 20, has to include a check to see if it's locked and is slightly more complicated to allow for multiple payment slots. So the demo now, let's hope this works. All right, so we'll minimize that for a SEC. Okay, so in this window here, I've got three hyperledger BESUS running on three separate blockchains. So we've just got one node per blockchain, which I know is a trivial case, but still we've got three separate blockchains running and one of these blockchain three also acts as the hotel blockchain and as the coordination blockchain. So the coordination blockchain could be a separate blockchain. But in this instance we're just having it using that chain so we don't have to fire up four blockchains.
00:05:00.320 - 00:05:41.424, Speaker A: So we start up the demo code which talks to them. Start up in a SEC. Okay, so we've got a few options. The first thing we'll do is deploy contracts. And so what it does is it deploys that ERC 20 router contract on the hotel chain and then a contract for each slot for the hotel to be paid into. And then it sets up the token supply for the hotel contract to be 1000 tokens. It then sets up the hotel router contract and deploys contracts for each hotel room.
00:05:41.424 - 00:06:36.028, Speaker A: And you'll note that you've got three hotel rooms. And then on the train blockchain you're deploying your train, your ERC 20 router contract and setting up some payment slots for the train company. And then you're setting up the supply is 1000 tokens and you're setting up the train router contract and the individual seat contracts. And you note that you've got four train seats. And then we've displaying a bit of information about how many tokens are in each slot at the moment. And you can show some information about the contract by say, looking at that. And you can see you've got your hotel which has got 1000 tokens, your train has got 20,000 tokens and account 27, et cetera, is the travel agency.
00:06:36.028 - 00:07:09.340, Speaker A: And for day number three, which I specified, currently you've got no reservations, you've got three rooms available and four seats. So first thing to do is buy some tokens. So let's buy 20 hotel tokens. So we know that hotel rooms cost 13 tokens a day. And so 20 tokens is only going to get us a little bit more than one day. And let's buy, say, 100 train tokens. So train seats cost five tokens.
00:07:09.340 - 00:08:17.466, Speaker A: All right? So let's do an atomic cross chain transaction across them. So let's book for day number three so the demo that we've got at the moment is doing everything synchronously. Obviously, we could set it up so that it was doing things asynchronously so what you can see happening there is that you've probably because that socket timeout, I think, is due to me running too many things on this one laptop, so don't get too worried about that. And so it's waiting for the cross chain transaction to complete. And there's a timeout block number which is in the terms of the coordination blockchain, and then by block number 41, which is well before 46, the actual state was committed. And so it's already done. Then it's waiting for the contract on that originating blockchain to unlock.
00:08:17.466 - 00:09:20.386, Speaker A: And then once it was unlocked, it then checked the booking status for that booking number and you can see confirmation status. True. So if we check the information for day three, you can see that I'll make this window a bit bigger. You can see that we've booked seat zero and room zero for the amounts 13 and five with the same booking ID. So that's one booking done and you can see that the balance now is only 795, so let's try and make another booking. So this should fail, shouldn't it? And so everything will pass except for that, ERC, 20 transfer on the hotel chain, because you'll be trying to do the transfer, but you won't have enough coins. And as we can see, the cross chain transaction fails and goes into the ignored state.
00:09:20.386 - 00:10:21.800, Speaker A: So any provisional updates that were there in the train blockchain and in the travel agency blockchain, they will be discarded. And you can see that for that booking number, the confirmation status is full false, rather. And so if we have another look at the information, you can see that that booking did not go through for either the train or the hotel. So let's buy some more tokens, say, let's buy 200 this time. Now we've got 295 tokens today, I think I must have bought train tokens and not hotel tokens. Yes, that's more accurate. All right, now we've got enough, so let's just quickly check how many tokens we've got.
00:10:21.800 - 00:11:49.452, Speaker A: So now we've got 207 tokens for the hotel, so heaps of tokens. All right, so we'll make another reservation for day three and we can see that's committed. And after the contract unlocks, we can see that confirmation status is true, and then we can make another reservation, day three, and we have another confirmed booking. So, looking at day three, we now have three bookings, so we've got one seat available, but no more hotel rooms are available, so let's try and make another booking. So we should expect this to fail, because you've got no rooms to book, so the train transaction on the train blockchain would have gone, would have been right, but the hotel would have failed. And so, as you can see, the state is ignored. And so the confirmation status is false.
00:11:49.452 - 00:12:27.180, Speaker A: So that didn't go through. So you can see that you've got atomic activity here. So either everything works or nothing works. And just to prove that things are still going good, let's move forward a day and try and book for day 14. And that's committed unlocked confirmation status true. And show for day four. And we can see that there's our reservation.
00:12:27.180 - 00:13:28.096, Speaker A: So isn't that absolutely fantastic? Atomic cross blockchain transactions. So now let's get back to the presentation session and try and get my slides to come back. It all right. So we've got a white paper. We'll have this available on archive.org and on our sample code repo in the coming day or two. So today is the 24 February, so probably within a day or two we'll have an initial version out there.
00:13:28.096 - 00:14:05.372, Speaker A: It's almost done. We just need to do a few things. And I think we'll be doing a few incremental improvements over the next week or two. There is a YouTube video that you can watch on the Ethereum Engineering Group Meetup Channel, where I explain the underlying technology across about 35 minutes. The team who created this wonderful technology are shown here. And thank you to all of you. And the sample code is available in a public repo that includes the hotel train example and some other demo code.
00:14:05.372 - 00:14:50.270, Speaker A: And it will contain the white paper and the scripts that you score to run multiple nodes of besu all at once. We've also got a fork of bessu and that contains the underlying code. The Bessu that it was forked from was current as at mid 2017, mid September 2019. And the code also uses a fork of web three J. And so that's got solidity code wrapper code generation to generate Java code to use solidity contracts. And we've added stuff for doing cross chain transactions. And there's a wrapper for some JSON RPC APIs that we've added as well.
00:14:50.270 - 00:15:03.496, Speaker A: So any questions, please just send through to us and we'd be more than happy to answer. Thank you all for listening. Bye.
