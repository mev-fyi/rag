00:00:02.890 - 00:00:21.440, Speaker A: Hello and welcome everyone. My name is Peter Robinson and today we've got Juan who is going to tell us about the solidity vs. Code extension. So Juan, I know you've been involved in blockchain for forever or so it feels, but please tell us more about yourself.
00:00:23.730 - 00:00:31.606, Speaker B: Yeah, probably I can go through the presentation as I'm going to be talking about that in a second and I can go through it.
00:00:31.708 - 00:00:32.502, Speaker A: All right. Why not?
00:00:32.556 - 00:01:04.930, Speaker B: All right. So vs. Code solidity myself. So Juan Blanco. So I've worked in it for a long time after many things know developer architecture, search engine architecture and so on. And then the past ten years I've been involved in the blockchain space. Things I've done is people will know more is the VSCO solidity and Ethereum.
00:01:04.930 - 00:02:39.162, Speaker B: And first of all, before we into this, I'd like to thank the solidity team mainly. They've been working for so many years and they never stop without them really. I don't think we have seen many stuff that even that we have seen, they've been fantastic. Anyone that help in the extension and many other open source developers that we have helping now in Ethereum or any other open source development because we all help of each other. So where's the BS code solidity extension? Well, it's mainly a simple extension that has been put in BS code and allows you to from sixes highlighting to normal id functions, complacent go to reference compilation and so on. But before that, let's go to my journey into the rabbit hole so late 2009 or 2010 I really kind of recall but I just recall where I was working at the time at trial, bitcoin mainly. Some friend of mine said like hey, this is thing called bitcoin.
00:02:39.162 - 00:03:44.826, Speaker B: So I went to the hotel as I was just working away and I trial. The interesting part is that I thought it was very good but I didn't really think it will happen anything with it. So it was similar to SETI. So I put outside. But things were happening at the time I was doing. It was happening personally that I should probably take more notice because I was working in an IFRS project that's international financial reporting system, financial services and mainly all the IFRS reports systems were due to the financial cris. I had a matchup with Northern Rock which was one of the banks that were bailout by the UK government and they were part of the genesis of the bitcoin.
00:03:44.826 - 00:04:34.130, Speaker B: And like many others, my family was definitely deeply affected by the crisis as they were in Spain and really endopangroll so you will have thought that. I have thought, but I did it. So 2013, I hear the OB is $1,000 now. I had played in between, but really didn't take much notice. And I was like, oh, what's happening here? And then I discovered things like bitters, Ethereum and many others. And this is when everybody was really starting to coming up with these amazing ideas. Well, if they have before, I didn't really notice.
00:04:34.130 - 00:05:48.460, Speaker B: And you have like stable coins, decentralized exchanges, dows at the regional label called Dax, decentralized autonomous companies, voting domain registries. That was done with the pictures and Nikolai, which we will know him for maker and many other projects was doing. So decentralized ids as. So it was lots to take in and lots of to learn as like we all know anything that could be corrupted and tampered now could be put in blockchain and be trusted. So many I started getting involved with the researching and trying to help. So it was a very interesting journey of learning and trying to help others and seeing what could do, but mainly scalping forums and creating little tools. So fast forward to 2015.
00:05:48.460 - 00:07:02.290, Speaker B: Then I was just a scene architect at the Royal Mail. That was my day job, still traveling. So I had plenty of time overnight to play around with stuff and help. That was an interesting job role. And pushing kind of got me more into the open source community, even if I tried to gamble for so many years. But mainly this is the time that Royal Mail was being privatized. And mainly all the people who I was responsible for transition of all the systems that CSC managed from the Royal Mail, public Royal Mail to the new companies, mainly I was seeing like all these people who had worked for so many years, they were being made redundant and good package or not, but all their life and soul have gone into these systems and it was kind of like kind of disappearing into some ether.
00:07:02.290 - 00:08:24.538, Speaker B: So that kind of really was influencing me to the whole open source community and comparison to what was happening in the blockchain space. Like everybody was helping to each other, big communities and then new financial systems that could support and mainly making systems that will last forever. And that same year, like January, I started the crypto 2.0 group at CSE. The reason for this was mainly the announcement by IBM and Samsung of a partnerships that demonstrated Ethereum connected to a washing machine. If you remember, all of a sudden allowed the blockchain space to be something that you could do business with. Before that, it was treated like a madness, similar to when we see when there's a big bull run and then you got scammers.
00:08:24.538 - 00:09:15.278, Speaker B: But that's kind of the perception that everybody had at the time and nobody will do any business. So in a way that allowed me to come out and then start this group. The group was mainly a simple forum but CSC will have 100,000 employees. So the idea was like hey, I'm going to start giving this information. In a way it was risky but thanks to my friend Nigel Barang which I met them just when I started the group, the people from the research network came along. We got the CTO of banking talking so there was lots of people interested but nothing happened at the time. But we really didn't get any funding or anything.
00:09:15.278 - 00:10:56.106, Speaker B: It was just lots of emails to the CTO but nothing really happened. So meanwhile I started experimenting with the EVM net was limited by the crypto libraries at the time, so eventually end up creating that. But yeah, it was still very hard to build and super difficult to do anything on enterprises everything was Linux and so on. It's more nightmare to do anything. And Ethereum was released, then the maker white paper was announced. This to me was super impactful because lots of people who are research community that were working on the decks and the stable coins et cetera, or just part of the community like Rune, they were doing this, Rune was working with D dollar before about that and obviously looking here in the city and tried to do stuff with it. But all of this kind of was demonstrating things that things were ready because before that we really saw like little smart contracts, the tokens, et cetera.
00:10:56.106 - 00:12:13.318, Speaker B: It's still like an amazing thing that you can create a smart contract by code and solidity. But we have here two areas. First, the financial like hey, what happens now? We can create a stable token that many applications can use and are part of the same chain that you can create this stable token that can have the collateral of many of these applications or just eth. And that's when was created. Many will solve issues like we have seen with USD or next if a Blackstone happens the peg will not be maintained and will be a major issue. Well that was the ideal because later on we saw that maker had issues and then we needed to use CSD. But to me it was important especially for my family and my father now passed away.
00:12:13.318 - 00:13:42.146, Speaker B: Hey, this might mean we can create something that is recession and crisis proof et, you know this might help but on the other side Nikolai and the team and Ryan, they have created Dapple and know they were creating which is where smart contact frameworks much before than open Seplin and later on it will become forge foundry. They will be used as what uses. So if you're familiar with the forge test, the history comes from Dapsys and Dapple and all the great work that later on has done the DAP tools like people like Martin and again this was all open source and very open and welcome community like everybody had very good standards about they wanted to help to change the world and these were tools that were built to help maker but to help everybody. The ideals was amazing. But yeah, this will be impossible to work with the enterprise. I couldn't install any of these at the time. It was like all the systems were completely locked down.
00:13:42.146 - 00:14:44.840, Speaker B: So I thought well hey, Microsoft does the best ideas so I can pink Scott Grutri and Scott Hanselman. Scott Grutheri is the Azure CTO lead. Hanselman is one of the big developers. Hey, what happens if we can do visual studio support facility? I'm frameless plugins like Dapple which what happens? They ignore it obviously. But at least I was promoting Ethereum so Defcon one was coming along as CSC to fund it. It really was only 1000 usd at a time. It didn't happen obviously I was not getting any funding for my group anyway, our group, my group.
00:14:44.840 - 00:16:03.726, Speaker B: But then later on MS announced that the really, really, I was amazed by the Microsoft team that actually managed to pull out that because in big companies there's always like a few people who were normally interested in the blockchain. And again it was a big risk to actually anybody do anything, even if they were later on find out they were doing stuff with consensus. But hey, for me at the time was nothing, none of the wiser. So I didn't go to the Congo, I went to the environment meetup instead that had the cabin good. And there really was like twelve people there at the time. Really, nobody really does do anything with Ethereum. But again, I was pretty impressed because there were presentations about which it was in Def Conguan about it was b nine labs that I remember about insurance and many other things just then like literally like five days later, the visual studio code extension announcement now vs.
00:16:03.726 - 00:17:04.722, Speaker B: Code you had before, but it was only working for Javascript as I remember. So suddenly like hey, now it supports extensions. So I thought what if everyone could see Ethereum solidity the first thing after the announcement in a very similar time to this, as I was working away. So I used to wake up at 05:00 all the time and I still got that pattern. So I thought like hey, let's make a quick extension for solidity and then see if everybody gets to know about Ethereum. So I did it in a couple of hours. I started with the Javascript highlighter and then I saw that the Guyston supply had done one.
00:17:04.722 - 00:18:25.326, Speaker B: So merely I kind of refactored it and do it and did it. We were talking about fail fast, let's do it again into the enterprise releases in the blockchain space you can register straight away and you don't have all these corporate changes like hey can I do it? Et cetera. So hey let's do it very quick. So all my ideals were like let's just put it out and let's promote Ethereum, obviously driven as well with the ideologies like hey, if we blockchain can change the world. But I always thought really visual studio, the one that's normally used for. Net or C Plus plus development et cetera, that will be the one to go because obviously nobody was using it there. Even the prices could do it, you could be able to install it and all our.
00:18:25.326 - 00:19:45.510, Speaker B: NET teams that we had and they would be obviously amazing. Everybody start using station but no idea what's used so most people ignore it. People were using supply at the time and the Linux environment et cetera and obviously didn't do much like extensions of the time. You couldn't do a thing, syntax lighting whereas much as you could do even if you got the javascript et cetera and type script in BS code. But that was Microsoft stuff so you didn't really have access of that from the extensions. But later on as new features were coming I started other features like the compilation and there was the double pre support which was an ERC that later didn't happen. And yeah I was thinking hopefully somebody made the proper ones and they actually did and so I didn't know.
00:19:45.510 - 00:20:51.402, Speaker B: Again, consensus was working with Microsoft. So then kill Tito from Microsoft created the Visa studio one, the big fat one. Yeah it was like a few months later and I was super excited about it. It's a proper Windows one and now have now sold the extension. I look at the code by the compiling and so on and it was like my God this kale has done so much work and later on we talk about it just to make a six and highlighter. It was like a full parcel there and so on. But the history eventually vs code attracted more users because it's cross platform now everybody uses vs code but the time to help flexible station system as opposed to the old visual studio.
00:20:51.402 - 00:21:56.340, Speaker B: Although the other visual studio still is amazing. And the lesson learned, nobody knows what's going to be the next popular framework ideologies to support everything. Ideally the more the merrier. And never ignore something because I personally was like, hey, people will find out about Ethereum. That was my original intention. Although the enterprise element was important, as if PS code it will be able to be installed into enterprises as I couldn't install anything, I supply them or anything, I couldn't do anything. When I used to travel, I used to travel with my personal laptop and then have it at work next to me just to experiment and punch breaks and things like that.
00:21:56.340 - 00:23:22.720, Speaker B: That's kind of my small little journey telling the journey everybody starts somewhere. You said I started very early. I personally I don't think I started early. You see all these other we think about comparing with Vitalik and when Vitalik was talking about know to me it was like everything was playing on my mind and I had to study a lot and trying to figure out how everything was being done. So everybody starts somewhere and then you just kind of stick to it and everybody can help because also at the time I was an architect, I was coding just to keep myself skills and how to create tools for other developers. And mainly that's kind of later on doing, but that was my daily job, so everybody can contribute anyway. So demo, a big demo.
00:23:22.720 - 00:24:45.634, Speaker B: So how to work with it? Let me stop the presentation. So I created this little sample which is BS coastly the example opens plane sole foundry with a test. So the idea is that after this I will kind of publish or give you the link you can put in the description. But mainly like if you got problems, I think discover many scenarios and we can cover. I know that sometimes it becomes hard to configure and then the problem is ancestral to be super agnostic because everything started with Dapple. And then funnily enough, dapple came after foundry force came after passing through DAP tools. We have this weird thing called package default dependence contract directory, which is the short version that Dapple was trying to achieve.
00:24:45.634 - 00:25:53.498, Speaker B: So they had this write very long names for your directories and confuse your tests, libraries and so on. So that was kind of the default. And later on people started using open settling more. So eventually I have to swap that things work greatly through node modules, et cetera and so on. The overall idea, again just keep nothing is legacy, things come back and actually can work for everyone. So let's look at the code itself. If we get it started for configurations we can go to open user settings and then just type solidity, and then we will see here the general configuration.
00:25:53.498 - 00:26:59.780, Speaker B: So I have the compiler optimization, if you want to compile with vs code solidity. But most people just use for hard hat or truffle. And sadly truffle is not anymore, but I guess somebody will listen, picking up so nobody can say that's finished. This was one of the requests I had as like, hey, I just want to bring my own salated version because I want to work offline. It's like, okay, well you can put it there, put the path there, and then that will be used, that one that's local, and then just change the compiler to local file or node module embedded and so on. Or if you use the remote version, you can just put the latest, just download the latest or type the right version. This is hard, but there are other ways to do it and I'll show you in a second.
00:26:59.780 - 00:28:34.242, Speaker B: And then just little bit enables you type, use a formatter, you can use prettier. I suppose that the default force later on came along, so you want to use force, you can do that then linter sol hint as default by sodium solium was the original, which later on became the. So Annie used to be the default one, and then later on somebody could create a sol. Hind came along and said, hey, I get a pull request added and get back the solemn one because that was kind of the default. And obviously eventually ethlene Solin died, so I changed it. To know this is kind of part of the ethics that you have to follow mono repo support. This is kind of latest, well, a few months edition and this is again one of the main issues that we don't have a have said Mel say this so many times through the presentation, but we don't know.
00:28:34.242 - 00:29:31.650, Speaker B: And the idea of a mono repo support is that if you're here, you say soulmate. It's like, hey, this is a project, I might have many multiple projects that are around in my environment. So the only way I need to be able to find out where is your project is like, hey, oh, you go a foundry bank. Okay, so that's where your project starts. But because there are so many frameworks, I will then look for remappings, truffle config, brownie Config, Franzi Config, harha Config, or that file. We have inherited this from the fact that we never had a simple prop file. If you come from the net or a pre file, that will have help.
00:29:31.650 - 00:30:36.440, Speaker B: So what I do here, if you want to enable this, mainly it will look for all these files. If this doesn't, it will just work at the root of the workspace because vs code has workspaces and then that's how as well they get away with it. We have different workspaces and that's the route for your specific project. So you can create multiple work spaces. Now in configuration, where can we find the node modules? In the node module package? Where are the package dependencies control directory. We will talk about that in a second. You can edit your remappings, sol hint rules, solium rules, and if it's going a bit slow, too slow or too fast, you can check for the overall validation in here.
00:30:36.440 - 00:31:39.034, Speaker B: So let's get down to business. So yeah, one of the things like hey what compiler use you right click to any smart contract. You can change the compiler version just by right clicking. So you can change the normally everybody will use the remote version of the local node module or embedded. So just click here and then just set the version for the project. Let's say 19 and that will be set on your vs code settings. But what I've done, and I've done it on purpose, is that I have set the global one.
00:31:39.034 - 00:32:48.178, Speaker B: The global is for every single instance of vs code. But I can change the compiler, the workspace compiler version, which is the current version here, and then that can be the 19 again. And you will see in the settings that your version is 19 now. Yeah, so if we go here daily, if we compile contract, we will see that there is a problem and we can fix the problem. Sorry. So we need a new compiler version again. You can right click or you should be able to see normally a quick fix which hasn't been pickup and change the compilation again.
00:32:48.178 - 00:33:46.230, Speaker B: You just go here and change the workspace compiler and off you go. And that should do the trick. So if you go to compile again, things will be clear. So that's kind of compiler configuration as we can see. I'm with the example of forge, but node module works the same, but for just kind of slightly more complex. I thought that will be interesting. So in here we've got the open sipolin and open siplin insists in the lit folder and the contracts in the contracts folder.
00:33:46.230 - 00:35:14.366, Speaker B: Obviously the name is different, but also it's got the contracts folder. So here this is scenario. The best thing to do is just use your remappings and just put the open sepulch contracts equals the leap open sepaline contracts and contracts themselves. The idea of the remapping is definitely when these complex scenarios the best way to go. But I just brought the soulmate example here and soulmate actually just open settling contracts in utils. So mainly that goes directly to here apart from the lit folder. So for this BS code defaults to lip node modules are at the default place that we will put your libraries.
00:35:14.366 - 00:36:30.200, Speaker B: So we wouldn't see it there in the contract itself in the settings of vs code itself because it's something that we already have. But if we look at the package default dependence directory, this is defaulted to node modules only. So mainly when you bring in open seplane et cetera from NPM it will be in the node modules. When you bring it normally from forge it will be in the lib folder, but both of them are the default so you don't really need to worry about them. So that's where the magic happens. Okay, but soulmate itself is good, it's source files in the source folder. So mainly this is lip saltmate source tokens ERC 20.
00:36:30.200 - 00:37:43.700, Speaker B: So why is this again comes from the whole dapse and dapple times. I wanted to mention that and that's how things change and eventually come back. So mainly to do this, mainly you got your source folder could be where the contracts directory is in the source folder. It can be blank like in open settlement because open settling resolves directory coster safe to contracts or manages contracts as well. Instead of saying open settling contracts you might say open settling access control. So in here that is kind of how it supported everything this way. So this is kind, there's lots of magic that needs to happen.
00:37:43.700 - 00:38:22.830, Speaker B: Obviously you could do that through remappings. Actually forge creates the remappings for you as well if you need to. It is super helpful. But to be slight, ideally if somebody opens vs code, ideally it should work straight away. Yeah, I tried to default this but I need to check it again. Sometimes works and sometimes doesn't. But mainly in a way you need to know about this.
00:38:22.830 - 00:39:46.930, Speaker B: If you're already using, you can see in the foundry as well and they were the source directory and so on. So that's one of the major things that we see, like people having issues obviously as part of the features. If you press ctrl you should be able to see the overall information about the contract. You can navigate to them, you should have auto complete and and so on. You can obviously find reference as well. There's lots of stuff that you can do. So if you don't see any of these, mainly your configuration, you can see with the configuration because obviously it's trying to overall find this smart contract.
00:39:46.930 - 00:41:14.338, Speaker B: Although other problems I will have is like the Parsa is broken, this is a custom parsa so that's mainly the language server that my hat broken. So I need to create a fix or feel free to submit a fix and then we'll see it in a second. We'll go through the other areas but overall these are the most simple settings that you will find that you will need to kind of use and I can see later on. So overall integrated with forge your tests will be the same. So things work as expected in the same way and obviously you can compile with these ideally because so many years on this, if we have a print file then I could be hooking to the specific framework that we using and then hooking. There were comments like hey can we put the test and so on. And I was like yeah, it will be amazing.
00:41:14.338 - 00:42:36.160, Speaker B: There will be some easier integration into the different frameworks, the same light. And another thing I really want to do is if we can actually sync the out folder with the compilation out here then that will be a nicer thing and then keeping the same format. That was one of the goals I had and had debates about this. Now I am the one who needs to catch up. So if everything is kind of configured of the bin folder as we had this with the old visual studio klter extension, everything was going to fit bin and other yeah we will be in a better scenario. So this is kind of the overall simple configurations and judges shouldn't be complicated. I know people are raising issues.
00:42:36.160 - 00:43:44.150, Speaker B: It is hard without it is hard because I need to catch so many environments and that makes life complicated. But overall works well. So I want to move to moving on to the presentation, the overall ethics. My thought of this is like we are all individuals in our open source ecosystem, no one to help Ethereum VM solidity in any shape or form. And hopefully this will be technologies that will make a better world. Although sometimes we might all get very depressed as we can see how things are turning out. In some scenarios anyone can help, even me.
00:43:44.150 - 00:44:27.830, Speaker B: It is hard to trust both. It is hard to trust anyone with all the scams hacks. I put my name on it. When I release it, I just release it. I didn't know what to do as western extension so I put my name and then skipped a day. But in a way I always believe that as developers or am I going to create something? You'd love what you do. It might not be fantastic, why do but at the end is part of what you do.
00:44:27.830 - 00:45:16.230, Speaker B: That's what defines you. Ideas like always contributing, always instead of forking copying code, it spends everybody's work. This takes me to my days on royal mail or any other. Everybody's life is the work and if not abandoned you can continue the work and respect the people who has created. When I created integrity with any library, I just think as a way to promote their work. So if I integrated Soleno at the time at lint I was like hey, everybody needs to know about this. Linter freaking great.
00:45:16.230 - 00:46:08.420, Speaker B: Always agnostic. I got so much troublemaker on this. People like hey, I should use your prayer for this for the other. And it's like I just always try to be agnostic, not promote any framework regardless of where I was working or funded, et cetera. Like I said, first come, first serve and then we leave everything as a plugin model. This is all configurable, happy to integrate any pre library that is one's development. Like I said, first conference serve.
00:46:08.420 - 00:47:07.110, Speaker B: Even eventually maybe something will be sunset like at length, but the next one will be the follow one. But there's nothing. Legacy I had the legacy world word because the older I get the more I've seen things that resurface. And we have the example with dapple and foundry. Things come back and ideas come back and they make sense, just keep them. If not we on the reinvent them they will. Sometimes I think legacy is a way for software companies to force you in the own path and make things obsolete to sell you more products and so on.
00:47:07.110 - 00:47:56.656, Speaker B: Let's respect everybody and then create ideas, come back later on. Did I mention that we have started a profile? Yeah, support any type of developers. For example coding is a very specific language. I have the TN code generator there and I always hope over all these years that somebody comments like hey, let's put the Javascript or Java one and then generate uis et cetera. So please, if you fancy do it, put it there and then we stand up menu, that will be nicer. So contributing everything is MIT. So it's open source.
00:47:56.656 - 00:48:40.500, Speaker B: So if you just know that that's what's going to happen, so don't come. And I heard about companies later on things claiming IP and whatever, that's just pure evil. So it's just MIT again. On that note, for requests as a person, not a company. It was going to say like companies come and go faster than people, especially in this space. We've seen so many things disappear and going away and then go back to know we are all individuals trying to help. Don't be afraid to apple request there's no city code.
00:48:40.500 - 00:49:45.210, Speaker B: So yeah, look at my code because I definitely know a typescript developer. Things can be reviewed. Although surprise pulls is like it makes me feel bad in two ways. First, if I don't know about it, how I feel like I need to answer it to a way and then I might be so busy and if I don't answer to a way or make the release and then I have to review it and then if I know a bit of buns I can time about it and then don't be critic on the architecture and so on. And on that note, don't make big pull requests. Please discuss the future. I'm always in the nephilim discord hanging around there.
00:49:45.210 - 00:50:52.110, Speaker B: Yeah, I find it hard to be everywhere. If I'm everywhere then I don't have time either to do normal things. But yeah, the big request, I found that myself in the hard way when I started doing my first open source contributions, like big contributions, I had this great idea of change the whole authentication system for a big library web development library and it wasn't accepted because nobody had a clue. I had that even if it was great, probably if I be a compensation. And then I felt bad, but then understood. It's like I'm so stupid. How am I going to expect people to come up with these humongous abstract classes and so on.
00:50:52.110 - 00:51:40.780, Speaker B: No spelling corrections again the time I'm dyslexic when I code, so really I do so many. So I'm really focused on something. My english goes out the window. Anybody can check my twitter for that. So if I answer this call, Twitter or farcaster I mentioned before chatting because it's great contributing areas sold parse. So sold parse is the peg parser for solidity. This is Javascript parser.
00:51:40.780 - 00:52:50.672, Speaker B: Parser allows you to navigate through the whole syntax of the document. So there's an antler parser there. And I personally, as part of the LSP, I thought like hey, solidity teams to have the LSP but operate was abandoned or post literally for me make also help lots of sense because if you look at the 19, they have the tools, et cetera. But anyway parsers are great so everybody can add any functionality. So I continue with the work with the solid parser and solid parse. We've talking about solium. So the latest version that was like five years ago, it was by the solium ethylene developer, but he picked up the work from team culture.
00:52:50.672 - 00:53:25.932, Speaker B: Culture. Sorry, federicobond everybody has gone through it. So I'm just kind of continue the work. So this is not an evil fork, it's been abandoned. So I'm just kind of helping the continue work. I didn't fork it just to add incomplete functionality and it was like lots of nodes. So that's how it's exp because it was experimental.
00:53:25.932 - 00:54:13.170, Speaker B: Don't touch this. This is for TBSco solidity, but now it's kind of the only one that's left. If you want to contribute. If it's any issues, new syntax or anything, that's the place to go. Lsp the language server. So mainly we've got a call completion code to definition, hover references, et cetera. So mainly you got a full object model here for how to navigate all the contracts and each specific statement and so on.
00:54:13.170 - 00:55:18.060, Speaker B: This is where some of the magic happens. As solid the language evolves, things might break or things were maybe missing like something with the username statements and so on. So yeah, this is the area to go and put some improvement fixes. And obviously if you want to do some major refactorings like support refactors like cover refactorings, extract interface and all that, that was amazing. Although we got copilot coming now so I don't know if we're just going to rely on copilot guessing what we're doing. Action providers so vs code has this idea of action providers. So mainly this really can be hooked in with the solc the compiler.
00:55:18.060 - 00:56:42.440, Speaker B: So as a document case examine we should be able to create a fix as the solidity team is great and it gives us these amazing responses. For example to fixture address I just kind of instead of using generated myself the checksum that will happen in kind of. Net or just use a library, I just use the response to get the right corrected formatted address and this can be kind of seen somewhere here. So if you go David, change the letter there, eventually it will complain and then just compile it and then use it and then you can. Sometimes this is so well you have to trust me, it works. Thanks to magnificent BS code is taking preference their copilot than the tooltips. But yeah again something you want to fix, it can help.
00:56:42.440 - 00:57:16.250, Speaker B: So mainly you will get something like that. We have many for those by the way. Like there are many other like I said, new code generators compile and co generate. With Cesar contrafinition I've been wanting to add the UI generated for. Net. That's one of my main goals for many years but. Net has been evolving too fast for me to be able to create something that it wouldn't change.
00:57:16.250 - 00:57:51.332, Speaker B: But I think we're nearly ready for that. But again, that's my side. There's so many areas that you call Delphi. Guys could help as well. Don't know what happened with PHP and so on. There are so many areas you might want to use react, you can want to view. There are existing areas for that they might be coming to hooking in here.
00:57:51.332 - 00:58:20.956, Speaker B: So people have visibility. So obviously there's no sound like, hey, it's just hooking into some areas that people may not have not know about it. And then that might be the first front to find out other areas. Well, synthesis, tips, templates. So I have lots of tips as well. So part of the autocomplete. This is great.
00:58:20.956 - 00:59:23.330, Speaker B: So copilot is taking over my tips. You have things like this, erc whatever, ERc 20. Instead of using copilot, you can use something that the community has contributed and so on. Like I said before, integrate with other frameworks. So hey, let's put a test command because using forge now just call forge or brownie or whatever. So that's kind of it. Hopefully it hasn't been too fast or too slow or has valuable information apart from.
00:59:23.330 - 00:59:28.450, Speaker B: If you go, any questions, please go ahead.
00:59:33.460 - 01:00:43.340, Speaker A: Yeah, that was a great talk and the history and, and how to use it and also how to contribute was very interesting. So thank you very much for that. So I myself, I don't think I've got any, I mean, I've got a lot of ideas now about, you know, about what things that I, I should really think about contributing or at least trying to contribute, finding some time to put in refactoring support, which would be awesome. And now I know how to do it as well. But I don't have any questions. Does anyone else have any questions that they would like to ask? One. Well, maybe everyone has learned everything they need to know, which is good.
01:00:43.340 - 01:00:57.566, Speaker A: It was a very good talk. So thank you. And I will put the link to the repo. So that example, repo is public, is it?
01:00:57.748 - 01:01:15.714, Speaker B: Yes, it is. Yeah. I'll just send you a link. It will be much easier because the name is very long. It will be hard to find if not so. Yeah. Yes, it's public already.
01:01:15.714 - 01:01:21.160, Speaker B: Okay, send it to you. Brilliant. Yeah.
01:01:25.210 - 01:01:55.530, Speaker A: We'Ve got the merch store for the meet up where you can get, hopefully what people will find to be really cool. There are people who've sold about 100 t shirts now and I know there was a guy who, he was walking along in an airport and someone just walked up to him, some random individual said, that t shirt is so cool, and where can I get one? And so, yeah, it's a thing.
01:01:55.620 - 01:02:18.870, Speaker B: Now I know because when we chat for the first time, I saw your t shirt and I thought, I love it. The opcodes one, I like it. I'm advertising because the designs are great. Not your kids, not your crypto.
01:02:20.430 - 01:02:23.226, Speaker A: All right, can you go to the next slide, please?
01:02:23.328 - 01:02:25.530, Speaker B: Of course, yeah.
01:02:25.600 - 01:03:40.674, Speaker A: All right, so in two weeks time, I'm going to talk about passport wallet, and then we're likely to have a talk in early December, but it hasn't been finalized yet. Then I've got an interview question, challenge thing, which I think will be a real challenge for people. It's not dramatically hard, but it'll really show you whether you know your solidity and your ethereum and how well you feel that you can do stuff and how confident you are. So I think that'll be interesting. And then in January I'm going to talk about decentralized sequencer friendly consensus algorithms for ZK roll ups and what the properties of the algorithm should be, and just generally how that overall system of ZK rollups and decentralized sequences can work. And then we've got Christian, who's going to be talking at the end of January about. He's going to be analyzing wallets that aim to not get in your way.
01:03:40.674 - 01:04:22.030, Speaker A: And so these simpler wallets that will hopefully mean that people trying to remember secrets and passwords and the big long passphrases should be a thing of the past. That should be a really interesting talk. So my talk is going to be on the one that immutable is creating called passport, but he's going to talk about some others, so it should be really interesting. And if you're interested in doing a talk, please get in contact. Yeah, next slide. Yeah, the one last one, YouTube. So if you're here now, we're on YouTube.
01:04:22.030 - 01:04:52.540, Speaker A: If you want to join the talks live, join the meetup. And there's some example code, not the code from this talk, though, and there's a slack workspace and that's all. Look, Juan, thank you again, that was a really great talk, and I'm sure everyone's learnt stuff and is going to walk away thinking, I really should contribute. I can help. I too can do something.
01:04:53.950 - 01:06:01.920, Speaker B: Yeah, either the extension or yourself. That was the point. You might have an idea and you might be frightened to take the first step, but you can create your own project and then you don't know if it's going to work and it might turn up that everybody ends up using it. Yeah, everybody makes an impact vs. Code by chance, become like a very popular ide, obviously for all the other extensions and then obviously not this one in particular. And then investment kind of reinforced the whole open source community. Many people has made an id popular because everybody has done it a tiny bit.
01:06:01.920 - 01:07:04.850, Speaker B: But yeah, anyone can do contract and obviously with the right motives, like the fiancee community and all the blockchain community, we all had good intentions and it's so hard that really, to me it may depresses me when we see so many other bad actors and they kind of ruin the effort that we all have done. That's really hard. And then we can be bad actors in many areas. Even developers had to be scammers and Twitter financial. Thank you very much for having me. Really. I love this talk.
01:07:04.850 - 01:07:15.880, Speaker B: I really like having following it all your talks are so informative and they're really nice. I was very chuffed that you contacted me. Thank you very much.
01:07:16.250 - 01:07:41.440, Speaker A: Look, and thank you for adding to the pile of informative talks. I think that everyone, I have so many people who contact me and say, oh, look, I want to get into blockchain or I've done this, I've done that. How can I start doing things? And I think I'm going to direct people to this talk and just say, look at this. You can start from something small and you can create something that'll change the.
01:07:42.850 - 01:07:50.560, Speaker B: So, well, we all make it tiny bit and then altogether might change the.
01:07:50.870 - 01:08:05.220, Speaker A: Yeah, for sure. All right, well, have a great day and thank you, Juan. Thank you everyone for joining. And I'll post this to YouTube in, I don't know, sometime tomorrow, but government, yeah, in the next 24 hours.
01:08:05.590 - 01:08:10.286, Speaker B: Okay, bye. All right, see you guys. Thank you. Bye bye. Bye bye.
