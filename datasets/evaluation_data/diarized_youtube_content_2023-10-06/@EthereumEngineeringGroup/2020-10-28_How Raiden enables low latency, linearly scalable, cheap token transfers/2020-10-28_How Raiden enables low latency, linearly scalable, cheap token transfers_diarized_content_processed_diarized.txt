00:00:00.810 - 00:00:01.838, Speaker A: And it's happening.
00:00:02.004 - 00:00:02.430, Speaker B: Okay.
00:00:02.500 - 00:00:11.840, Speaker A: Hello, and welcome to the Ethereum engineering group. Meetup, I'm Peter Robinson, and today we've got Dominic, who's going to tell us all about Raiden. So, Dominic, please introduce yourself.
00:00:12.770 - 00:00:58.990, Speaker B: Hi, I'm Dominic. I'm with the Raiden network team since two years and with Blockchain since four or five years professionally. And, yeah, happy to be here. And to introduce the Raiden network, the mechanics, maybe the reasons why it scales Ethereum, what are the pitfalls? And then we will see which questions you have. Is it more about these? Like, we can talk about security algorithms of settlement, which would be more formal, or we can talk about how it actually scales compared to how it should scale protocol wise. So we'll see whatever interests you and then we can talk about that. Let me show the slides.
00:00:58.990 - 00:01:41.502, Speaker B: I can share the screen. So you see the screen, right? Yes. Perfect. Okay. So, yeah, as I said, I'm a mathematician, philosopher, so I was very interested always in systems or like Blockchain appealed to me. It's a very interesting system, not only mathematically, but also from the impact it could have and philosophically, maybe. And my role is I was project manager of the core team, basically.
00:01:41.502 - 00:02:14.738, Speaker B: And so most of the time I did organizing stuff, writing issues. But I love to code myself. I would say I'm not very good at it, but I did 200 successful commits to the core software. So I'm getting better. And yeah, what do I want to talk about today? Basically, Raiden as a scaling solution for Ethereum. Raiden is one of the oldest scaling solutions for Ethereum. It's based on the same principle as the Lightning Network in Bitcoin.
00:02:14.738 - 00:02:56.260, Speaker B: So a payment channel or state channel tech. And I want to introduce it, like, why it is needed and how it works. So let's talk about why crypto might be the best version of money we have. Why isn't it used or why doesn't it scale and how Raiden scales crypto, so to speak. And then I'm very interested in what do you think about the network? So, yeah, it is kind of interactive and I don't know who has seen the slides and who has not, but what do you think this is.
00:03:03.690 - 00:03:09.902, Speaker A: Like a club card? So given it's Diner's Club, though, it's probably is it a credit card or something like that?
00:03:09.956 - 00:04:17.540, Speaker B: Exactly. It's the first credit card ever introduced by Diners Club in 1950, basically. And I just want to point that out because we are still using that dominantly in the Internet to pay stuff. So basically we use a technology that was invented 60, 70 years ago to do electronic payments, even today in the Internet. And that might not be the best fit because credit cards are based on a system that pulls money. So whoever has the information of here Samuel and knows the credit card, who can theoretically pull money from his account, whereas you can say that in blockchain tech and how Bitcoin works, how Ethereum works. It's rather to push money so only I can send money to someone else if I own the private key.
00:04:17.540 - 00:04:53.120, Speaker B: It's a different system, some say more suitable for electronic payments, for payments over the internet, where everything you can in theory copy, but still we pay predominantly with credit card or even PayPal now. And so the question is why would crypto be a better version of money to be used in the internet or for electronic payments than a credit card? What do you think?
00:04:59.830 - 00:05:10.086, Speaker A: I think it's correct. I think that's a very insightful in out, push pull. That's very insightful. Yeah, sounds good. I think the idea of pushing rather.
00:05:10.108 - 00:05:11.240, Speaker B: Than pulling is good.
00:05:11.850 - 00:05:24.780, Speaker C: So I don't understand, why is it pull model the credit card? Because you swipe the card or you enter the details of the card. That means you are pushing the amount from your account, isn't it?
00:05:25.150 - 00:05:36.240, Speaker B: Yes, but the example is more when you have the information from the credit card, you can pull or withdraw money from that account.
00:05:37.570 - 00:05:38.926, Speaker A: If you have a private key of.
00:05:38.948 - 00:05:41.630, Speaker C: Your Ethereum account, one can withdraw.
00:05:43.110 - 00:06:08.140, Speaker B: That's true. Maybe the example is not yeah, but you don't show an example is that you don't go with your credit card around or with your private key and show it to everyone and then people withdraw money from it. Right, but it's more like you use the card but all the information necessary is on the card that you publicly show around. Crypto, it should be different.
00:06:09.710 - 00:06:17.660, Speaker C: The standard argument that we have heard of till now for why crypto is best money is the decentralization argument. Right.
00:06:19.070 - 00:06:22.442, Speaker B: That you don't have decentralized why do you think decentralized?
00:06:22.586 - 00:06:43.330, Speaker C: Well, you don't have one central bank or something, right? If you have Bitcoin, I mean, the market regulation or the market supply regulation happens in a very decentralized way. There is no one central control of power who can tweet the devaluation or the high valuation of a currency.
00:06:44.330 - 00:07:03.770, Speaker B: Yeah, I think that is a very good point and it is then also cross border or there's not one single point of failure. Right. With this, what else could you think about or what have you heard about what convinces you about crypto money in the internet?
00:07:10.110 - 00:07:26.900, Speaker A: I think as a general rule, like if you lived in a hyperinflationary environment and especially where they lock the banks, I think being able to get your money out of the country, as it were, or at least get it into a stable currency is really good.
00:07:32.080 - 00:09:11.260, Speaker B: Definitely to be able to exit your own maybe monetary system and to be more free in your decision, which any other arguments? And we are on Ethereum, right? So money is not the only thing that interests us in that technology. Um but yeah, it's I would also say it's actually convenient to use, maybe not nowadays, but it should be in the future. So it does not need all the security layers that credit cards or PayPal has to make it secure. Maybe, but I can send one Ether to Sandra and I am pretty sure when I understand the tech, that it will reach Sandra without there's no middleman who can prevent that, basically. But okay, let's assume that is crypto is suitable for electronic payments. So the question is why is nobody using it? Right? And I'm sure you all have thought about that for quite a long time and everyone has different thoughts about that, but I want to also collect maybe a few points. Why do you think crypto is not used? Like, Ethereum is like, there now since five years and at least for payments, bitcoin and Ethereum is not really used.
00:09:11.410 - 00:09:20.348, Speaker A: I would say, isn't it because of the instability of the currency. So it goes up and down a.
00:09:20.354 - 00:09:58.536, Speaker B: Lot volatility of the currencies. That is definitely one reason. I actually always ask, like, we have down in the office a little cafe, and I always ask them, so it would be a huge win if they would accept payments via Raiden at the end. So I regularly ask, so, hey, do you want to accept crypto? And I always say like, this is their main reason. So they want to sell a coffee for a euro, right, or a dollar, and they don't want to think about what's the price of a Bitcoin or Ether now and how much would the coffee cost. What else? Are there other reasons?
00:09:58.728 - 00:10:03.260, Speaker D: The processing cost recently has become way too expensive.
00:10:03.680 - 00:10:25.110, Speaker B: Gas costs. Yeah, processing costs, like in this uniswap boom now. Right. So we had gas costs of 300 or 400 gigawatt, which is actually totally crazy. So it costs $2 to send something on the blockchain or so what else?
00:10:27.080 - 00:10:34.570, Speaker E: General people don't understand it and so don't think to use it every day.
00:10:35.340 - 00:10:38.090, Speaker B: It's very hard to understand. Yeah, I would say so.
00:10:42.460 - 00:10:43.210, Speaker F: Cut.
00:10:46.480 - 00:10:48.220, Speaker B: Are there any other reasons?
00:10:48.880 - 00:10:59.810, Speaker D: I think there's uncertainty in terms of the processing time and related to being hard to understand. People are afraid of getting it wrong and losing their money.
00:11:04.420 - 00:11:15.990, Speaker B: And it's not even afraid with one F. Yes. And it's not even unlikely. Right. So I know some people, they lost their private keys somehow and then they lost some money.
00:11:18.200 - 00:11:31.800, Speaker A: I think Anthony also, he's talking about finality as well for the uncertainty. I mean, there's different types of uncertainty. So there's uncertainty due to losing your keys and there's uncertainty due to finality.
00:11:32.220 - 00:11:32.970, Speaker B: Yes.
00:11:35.500 - 00:11:46.380, Speaker A: Another one I think I always think of is have you transferred to the right account number? Because you just get one digit wrong and boom, the money's gone forever.
00:11:47.120 - 00:11:58.240, Speaker B: That's also a very good point. Yeah.
00:11:58.310 - 00:12:27.820, Speaker A: I mean, it's funny. In the Enterprise Ethereum Alliance, we're coming up with an ID for cross blockchain communications and we're actually putting in four bytes of check digits and they're going to be the truncated hash of the rest of the stuff. But it means that you'll be like a credit card number. So if you get one digit wrong in your credit card number, it'll fail. Whereas at the moment, with an ethereum address, you get one byte wrong or Bit wrong, you're in really big trouble.
00:12:28.960 - 00:13:09.400, Speaker G: The other one that I was just up in 1770 Queensland, which tried to hop on this trend early, and so the vendors supposedly all take bitcoin and such. Some of them take other currencies, and as far as I can see, nobody uses it. Same thing is true at the Brisbane Airport. And the reason for this, really a lot of it has to do with time, and that goes back to uncertain finality. But just the time it takes to get a transaction through is pesky.
00:13:14.060 - 00:13:22.092, Speaker B: Yeah. Like in Bitcoin, it's maybe even 60 Minutes. Right, so six blocks for it to wait.
00:13:22.226 - 00:13:33.170, Speaker G: Yeah, which is great. If you want to replace Western Union, I want to send money home to my parents in another country, that's fine. But if I want to buy a coffee, it's really not the thing.
00:13:35.380 - 00:14:02.410, Speaker A: But the other thing as well is that comes back to the uncertain finality 60 minutes. People talk about six confirmations, but that's only giving you one in a million. So it depends on how much money you're dealing with. But if it's a one in a million chance that your block will be reorged or the transaction will be reorged out and then will never go through, I'd want more than one in a million.
00:14:03.900 - 00:14:41.396, Speaker B: Yeah. That also kind of education, maybe. So, yeah, the confirmation blocks. So people need to know how long to wait for which amount, maybe to bear the risk. But I was also here in Berlin, there was a famous bar that accepted Bitcoin, room 77, one of the first bars in Germany. And I was there and wanted to pay with Bitcoin. And it took so long that we had to drink another beer that was not paid then, and so we had to pay it with fear that yet or waiting beer then.
00:14:41.396 - 00:15:31.252, Speaker B: But yeah, I would say that's the main reason, or one of the main reasons, it just takes too long. And people who would accept it, they do not really know how to deal with that. This was known, or is known for a very long time, as you all know. And so there are different scaling solutions out there to help with that problem. And one of the oldest scaling solutions, or one of the oldest ideas are actually state channels or payment channels. And it's a paper from Joseph Poon, published 2015, that lays the basis for Lightning and Raiden. Actually, Raiden aims to solve some of those issues.
00:15:31.252 - 00:16:37.708, Speaker B: Basically, I would say scaling ethereum for the masses was one of the slogans. But what it actually is, is like for smaller transactions. So when I want to pay my coffee with it or when I want to have a paid API. We always imagine Google Maps, for example, I do not pay with data, but I pay maybe zero point or so for a route request and there is a Google out there that would give me the route and does not take my data. Such things like you can pay with Raiden with the scaling solution and as we will see, you lose a little bit of the security properties compared to layer one to Ethereum. But for small transactions it's perfectly suitable because it's very fast. We aim for subsecond payments, it has very low fees, so we aim for one dollars cent or even less.
00:16:37.708 - 00:17:50.224, Speaker B: It can even be for free in certain conditions. And the main point about these payment channel networks, as we will see and can discuss in the future, compared to other scaling solutions, raiden in theory is linear scales linearly, which means that the more people you have, the more transactions you can do with the same factor. Because in the network we go for local consensus, so to speak. And compared to a normal blockchain where every information must be at every point at some point in time, which then does not scalineally, Raiden does, we offer or provide more privacy compared to the public ledger on ethereum. And we try to be as decentralized as possible, but also that comes with the cost. Being decentralized obviously is being paid by not having the performance and so on. So it's kind of a balance, as we will see.
00:17:50.224 - 00:18:53.270, Speaker B: But this is the fifth point and the 6th point is at the moment we go simply for ERC 20 tokens. So for that token standard in ethereum. So these were our goals, or these are our goals, how we want to solve this problem, why crypto is not used for payments and yeah, like a few vertical scaling, I think you all know that. But in this logarithmic scale you see that Visa has a TPS of 1000 or more and Ethereum maybe ten. And bitcoin you cannot even see here because it is like four or three. So if crypto should be used for payments, then we need to be like a lot better and have a lot more. Just as a comparison, ethereum 20, they think it will scale ether with a factor of 1024 at the beginning because they have 1024 shards, as far as I know.
00:18:53.270 - 00:19:00.260, Speaker B: So it will be in the league of Visa, GPS wise.
00:19:00.340 - 00:19:04.330, Speaker G: I'll have to ask Sandra about that. Who's on the call?
00:19:05.260 - 00:19:07.600, Speaker B: Not on the call. It would be interesting to have insights.
00:19:07.620 - 00:19:09.630, Speaker G: Yeah, she is on the call.
00:19:10.880 - 00:19:14.140, Speaker B: Would you agree to that, Sandra?
00:19:15.040 - 00:19:16.860, Speaker E: Sorry, I wasn't listening.
00:19:18.740 - 00:19:56.376, Speaker B: Just like what I understood from east 20 and the proposed transactions per second is that with these 1024 shards that they will have, they will scale Ethereum roughly 1024 times. So we can expect without another scaling solution for Ethereum 20 when we have now twelve transactions. So we will have kind of 12,000 transactions with Ethereum two 0 /second yeah.
00:19:56.398 - 00:20:19.010, Speaker E: I can't remember the exact numbers, but I know that that's substantially more. And I also know that some of the figures quoted by Visa should be taken with a pinch of salt. But I see that you've got them around 1000 because they do sometimes mention much higher figures, which are more theoretical than actual.
00:20:20.360 - 00:20:45.448, Speaker B: Yeah, I didn't know how technical you as the audience were. So I think you have seen the sheet or the numbers, but it's just to get a feeling like how much Ethereum must scale, basically, or what should a scaling solution be capable of to compete with.
00:20:45.614 - 00:21:16.020, Speaker A: I think Ragavindra just put into the chat as well. But I think currently the design has been changed for Ethereum too. So there's probably going to be 64 shards. And in fact, I think there may only be a few execution shards and others might be data availability via roll up shards. But I think that's a moving target a little bit. But yeah, I think 64 is the initial gambit rather than 1024 because it was going to be too complicated.
00:21:17.000 - 00:21:22.150, Speaker B: Okay, then my information was old, but there was a time when they said.
00:21:24.540 - 00:21:30.810, Speaker G: There was definitely a time that time has passed. Okay, it may come again.
00:21:34.780 - 00:22:37.900, Speaker B: Okay, nice. Yeah. But it will definitely be we can handle much more transactions. I'm not an Ethereum 20 expert, but at least what we want to reach with Raiden to be able to compete maybe with Visa or even more have more TPS, this is somehow the goal that we want to reach that people will use Raiden in the Internet for. So obviously why do blockchains don't scale? I think everyone knows that. But the best point that I always got is that whenever Alice wants to buy a coffee from Bob, basically the whole world needs to know. It's the global consensus at layer one that makes a blockchain, or like proof of that makes it so secure, but also it comes with the cost on performance.
00:22:37.900 - 00:23:44.690, Speaker B: And the simple solution for those payment channel networks basically, is they go for local consensus. So local consensus in that sense means only two people agree on something and then they submit the information to the blockchain. And yeah, I don't know if you have dealt with it already, but I would like you to maybe I need two people, an Alice and a Bob, regardless of the gender. And then we can maybe see how that works. Who would like to be in Alice or in Bob? No one? Okay, that's sad. But.
00:23:47.220 - 00:23:50.316, Speaker H: I'm happy to be I'm happy to be an Alice.
00:23:50.508 - 00:23:54.250, Speaker B: Okay, nice. You were David, right?
00:23:54.700 - 00:23:55.560, Speaker H: Sly.
00:23:56.460 - 00:23:59.384, Speaker B: Sly. Sly. Perfect. Hi, Sly. Okay.
00:23:59.502 - 00:24:00.852, Speaker H: Alice, actually. Alice.
00:24:00.916 - 00:24:02.410, Speaker B: Alice, yeah, true.
00:24:04.220 - 00:24:06.380, Speaker G: You don't own a restaurant, do you, Alice?
00:24:08.240 - 00:24:55.800, Speaker B: So, Alice, I have here in the chat alice, if you see the chat, I have here a private key for you. It's an actual private key and like a tuple, a private key and a nonce. And I would like you to send this private key or this tuple with an increasing nonce. Always when you get it, send it back to Bob, and Bob will take the tuple, increase the nons and send it back to you. So basically, you and Bob, which we will find out who this is, like, just exchange or ping pong this tuple, private key and nonce amongst each other, and we will see how often you can do that during 13 seconds.
00:24:56.480 - 00:24:57.660, Speaker H: Who's Bob?
00:24:58.240 - 00:25:01.340, Speaker B: That's a good question. Who wants to be Bob?
00:25:04.400 - 00:25:05.560, Speaker A: I'll be Bob.
00:25:05.720 - 00:25:07.150, Speaker B: Perfect. Okay.
00:25:07.940 - 00:25:10.610, Speaker H: I don't even know how to send a private message.
00:25:12.900 - 00:25:15.040, Speaker A: I'm assuming it's via chat.
00:25:15.460 - 00:25:27.204, Speaker B: You can do it. Yes, via okay, so and it already started, so Alice already sent it to oh, so what am I doing?
00:25:27.242 - 00:25:29.184, Speaker H: I'm sending it to Bob.
00:25:29.232 - 00:25:59.740, Speaker B: Yeah. And now Bob needs to send it back. So, Peter, take the tuple, increase the nonce and send it back. Okay. Do you see the chat, Peter? Yes. Okay, but then, Alice, you need to send it back again to Peter. So it's a ping pong.
00:26:00.160 - 00:26:03.820, Speaker H: Yeah, we're ping pong. Didn't you say do it privately?
00:26:04.240 - 00:26:12.176, Speaker B: You do. I didn't see okay, perfect. Then the time is over. How often? Like, what's the nons? What's the nonce? Sorry, I didn't see it privately.
00:26:12.208 - 00:26:15.428, Speaker A: It's even better. We got up to ten.
00:26:15.594 - 00:26:37.560, Speaker B: To ten. Perfect. To ten. That's very nice. Obviously, this is not how an Ethereum transaction works, but in theory, it was one block time. Like 13 seconds is the average block time at the moment in Ethereum, they say. And you were able within the time of one block, to basically exchange money ten times.
00:26:37.560 - 00:27:31.950, Speaker B: Right. So and this is actually the whole idea, as you all probably know, of being off chain or being in a L2 is to come to an agreement who owns the money off chain, like via chat or however method, whichever method you want to use. And then at the end, you submit it to the blockchain and the blockchain will settle this information or it will settle the money. And as you've seen, you're ten times faster than Ethereum. And Raiden actually works exactly like that. But obviously we will not exchange private keys, but do a little more crypto magic that we will look into. But as you see here, what Peter and Sly had actually was, so to speak.
00:27:32.400 - 00:27:34.430, Speaker H: I changed my name to Alice, remember?
00:27:36.240 - 00:28:19.052, Speaker B: Sorry, Sly. So, Alice and Bob, they had a payment channel, like a very rough version of it, but actually, in their private chat, even, they exchanged a message. And let's assume the owner of this message, like the private key and the latest nons, would be able to claim the money on chain at the end. And this is actually a payment channel. Obviously, in that example it would not work because everyone with the private key would be able to get the money. But with a little crypto magic, it then is possible, or we claim it is possible. And yeah, this is actually a payment channel.
00:28:19.052 - 00:29:15.420, Speaker B: So Alice and Bob would deposit something in a smart contract, like the same type of ERC, 20 token and then they can come to an agreement or local consensus. They come to an agreement on how this collateral that they both deposited would be distributed at the end. And then maybe Alice starts with four tokens and bought two and then they transact for whatever reason. And then at the end both say okay, now Alice just owns one token and Bob five. And this is what a payment channel is about actually. So they basically sign messages, we call it balance proof. And they sign messages and say so hey Bob, here now are two more tokens signed.
00:29:15.420 - 00:30:15.600, Speaker B: Yeah, then they just agree basically on who owns the money. And this is a pretty simple concept. It is more complicated when we look at the cryptography and security properties. But this is the rough concept. And then with a little crypto magic, the goal is to build a whole network, right? So it would be pretty boring if only Alice and Bob can exchange money and then they go to the blockchain and settle it. But the goal would be that Bob could send money to H, I call him Hans. But Bob does not have a channel with Hans, right? And so Bob uses his channel with Dominic and Dominic with EDA, and EDA with Hans such that at the end Hans has more tokens or assigned balance proof of more tokens than at the beginning and Bob has less.
00:30:15.600 - 00:31:07.568, Speaker B: But Dominic's and Eda's balance would stay the same. And that works. Basically just Bob sends one token to Dominic and then Dominic has plus one. But Dominic then sends one to IDA. So overall netted Dominic's balance stays the same, same with IDA and Hans at the end gets one more. So this is basically the very basic idea of a payment channel network. So we chain channels together and yeah, to make this idea work, there are a lot of problems, security problems, but also performance problems and also kind of logical problems.
00:31:07.568 - 00:31:57.730, Speaker B: How to find a route, who knows? Who has the information about the current state in a channel? But let's see. So how does it work? It works basically the core concept of these channels, especially of these networks, so when you chain channels together is a so called hash time lock. Hashtag lock, I would define very roughly is like I ou under the condition you can tell me the correct secret or you can tell me the secret where I have the hash to. Who has already heard about hashtag locks? Probably a lot of people. You're right. So you're familiar with the concept. Perfect.
00:31:57.730 - 00:32:56.848, Speaker B: Okay, perfect. Then the hashtag locks is just like it's a conditional payment or a conditional state change that gets reverted when it comes out, but it gets preceded if there is the correct secret to the hash being sent. And so now let's look again from the payment or the payment from Alice to Dominic with the hashtag lock would look like that, that Alice sends to Bob a locked transfer, which is exactly that hash time lock. So there is an amount there and there is the hash of the secret. And then Bob sees that and Bob knows that it goes with the final target to Dominic. Let's assume that he knows the final target. So he proceeds or forwards that hashtag lock or a copy of it to Charlie in his own payment channel and from Charlie to Dominic.
00:32:56.848 - 00:33:43.424, Speaker B: And then Dominic basically asks, like in a private channel, Alice, and says, because Dominic and Alice, they know that there must be a payment coming. And when he receives from Charlie the correct hashtag lock, he asks Alice directly to the secret. So he just has the hashtag lock with the secret hash, but doesn't know the secret. And Alice sends the secret directly to Dominic. Actually it's Dave, but now we go with Dominic. And then he can start to collapse the chain of hashtag locks from the end. So now Dominic is in possession of the secret and he can tell Charlie.
00:33:43.424 - 00:34:23.420, Speaker B: So, hey, Charlie, look, I have the secret. And then this locked transfer or this hash unlocked gets unlocked and he receives a real balance proof. And with that, this is our version of finality. Basically in Raid, then either you have an unlock message or the secret. And then Charlie forwards the secret to Bob and Bob sends the balance proof to Charlie. And the same with Bob to Alice. And then Alice sends the balance proof to Bob.
00:34:23.420 - 00:34:31.810, Speaker B: And this is how a mediated payment works in these payment channels. Are there any questions to that?
00:34:36.630 - 00:35:01.070, Speaker A: So I guess it's fair to say that in sync with item two or .2, that'd be when you're getting your coffee. So the actual goods take transfer. So you say, give me the secret and then what? You get the secret and then you say, here are the goods, here's the coffee. Or do you ask for the secret and give the coffee?
00:35:03.010 - 00:35:47.340, Speaker B: Yeah, that's like when would the coffee shop give the coffee legally? We had some lawyers looking into that and they said what would be the finality? From the legal point of view, from the technical point of view, the transaction is final when you receive the secret. So in the second step, as you said, dave would request a secret. And when he received the secret and the secret fits to the hashtag lock he got from Charlie, then basically it is final, even if he did not unlock the lock transfer. So that would be the final.
00:35:49.630 - 00:36:18.760, Speaker A: But assuming Alice is the person buying the coffee and Dee Dominic is the person selling the coffee, so I do the transfer, which goes through Bob and Charlie to get to Dominic by the lock transfers. And then Dominic says, OK, I can see there's going to be a transfer and they do the secret request. So as soon as I give the secret, then Dominic can say, hey, I'm not going to give you the coffee after.
00:36:20.330 - 00:36:48.880, Speaker H: OK, yeah, that works with normal money or credit card or whatever. Like some restaurants, you pay first and then they make you the coffee. And some of them, you sit down, they make you the coffee and then when you leave, you pay. In both cases, the contract has already been agreed, even if you haven't paid the money or paid the money first. Some you pay after. That's not a concern of the protocol, right?
00:36:51.430 - 00:37:53.394, Speaker B: Yeah. So if you don't get your coffee, even if you have paid, that is a problem. But maybe your question even points to a deeper question. What happens if, for example, Dominic would unlock with Charlie, but then Bob goes offline and then that would mean the secret never arrives Alice, right? Or the secret never cascades back to Alice and so she would never unlock. But Dominic already got his unlocked bunch proof. And this obviously, we have covered, we can look into that protocol wise, how this is being solved, but let's look at the happy case. Are there any questions to the happy case before we go deeper? Basically also here we just build a chain with hash time locks and then we exchange a secret from target to source and then it cascades back.
00:37:53.512 - 00:38:35.330, Speaker H: I don't know if it's relevant here or you're going to talk about it later, but can you mix this with other ethereum transactions? So if you're not buying a coffee, if you're buying a diamond, then one benefit of an on chain transaction is that whilst the physical diamond might not be whether you pay before or after you hand over the diamond, you can actually make the exchange of a title to the diamond at the same time as the payment for the diamond. So therefore you can go to the police and say, here's the receipt proof that I now own the title of this diamond, but they never gave it to me. Can you combine it with other transactions?
00:38:37.510 - 00:39:26.430, Speaker B: Yes and no. That's a very philosophical answer. It's not that transparent as on the layer one blockchain. So if I indeed would buy a diamond, I would not do it with Raiden, I guess, because not every transaction is publicly visible to everyone. But if Alice would buy a diamond from Bob in this example, and Alice would get a signed message from Bob that, hey, I received your hashtag lock, like whatever Alice and Bob, they exchange, they always sign their message with nonsense and then. I would consider that as a proof. Like when Alice can prove their receipt, payment receipt, that it is indeed signed from Bob.
00:39:26.510 - 00:39:32.510, Speaker H: Then I was thinking more like, what is it, a seven two one token, which is like a is that unique token?
00:39:32.590 - 00:39:33.726, Speaker B: That's what you think. Okay. No.
00:39:33.768 - 00:39:37.830, Speaker H: So you're going to swap ERC 21 for seven two one in one transaction?
00:39:38.250 - 00:40:30.770, Speaker B: Yeah. You cannot do that in Raiden at the moment. There are in theory protocol extensions where you can first swap ERC 20 to ERC 20 and then swap it to whatever you want. But non fungible tokens cannot be exchanged in payment channels like that. That must always happen in direct channels. Or then a state channel, like a generalized state channel would be a more suitable solution for yeah, if the token is non fungible, then obviously Alice cannot send it to Bob and Bob to Charlie, and Charlie to Dave because they must all have the same token and they cannot leave the payment channel. So the Raven is a concept only works with fungible tokens.
00:40:30.930 - 00:40:31.960, Speaker H: That's fine.
00:40:36.330 - 00:41:38.318, Speaker B: Okay. So that's actually the happy case of Raiden. Maybe not to talk only about code, I wanted to show you how does Raiden look like at the moment? 1 second. Our first reference implementation was actually a Python client, which is nice if you want to we were pretty good at Python, but Python is not the best suitable language maybe for that. And so now we have a TypeScript or JavaScript Raiden client basically that can run in your browser or even on your mobile phone. And I just want to show you a transfer now in that unused client. So we have two participants again, Alice and Bob, and they have like it's a girly, so TTT token, so to speak.
00:41:38.318 - 00:42:19.398, Speaker B: And Alice here, she has two channels, one with a guy that is online, but we don't see here. And here, this is Bob. You can see it with the blue emoticon, but his address starts with it's a normal ethereum address or ends with FA One B. And let's look if this is indeed Bob FA One B and it has the same icon. So it's safe enough to assume that she has a channel with Bob. It's a direct channel. So it is the first example that we've seen from Peter and Shy or our Alison Bob.
00:42:19.398 - 00:42:54.662, Speaker B: So not the complicated hashtag lock thing, but let's see how that works. So I would just say, okay, send a small amount of your test tokens to Bob and that would be your summary. It's a direct transfer, as they say. So it's not complicated and it is successful. So indeed it was subs second. And we can see here Bob received some money and now hopefully hands on the coffee. And now we have like a hub running.
00:42:54.662 - 00:44:42.104, Speaker B: So a third party here and let's see how immediate payment works. But I first have to close the channel here because Raiden per design or the client per design will always take the shortest route, right? And if I have a direct channel and a mediated way or like a not direct way to my target, then it would always go for the shortest one. We will also shortly talk about that but now if I want to send money from Alice to Bob again, there is no direct channel anymore so we need to get the payment mediated over our hub or our third party and therefore it is still a direct transfer and that's stupid with the live demos, right? 1 second. Okay? We have to wait until the channel is closed. That is maybe also interesting to talk about, like to close a channel and to actually claim the money from the blockchain, we need round 2 hours. And this is artificially set this time because when one channel participant closes the channel, it does an on chain smart contract transaction, and it says, like, I want to close my channel with Bob now. And then the settlement algorithm, basically, or the smart contract kind of waits for the latest state update from the counterparty to have a fair distribution.
00:44:42.104 - 00:45:43.184, Speaker B: But obviously, if Bob would never answer, we cannot wait indefinitely. So we have this like two hour window where the counterparty can react and then we settle anyway and we have other security features that if you are offline or there's congestion that you get your money out even if you're not able to publish the latest finance proof but in this settlement window it works like that. So let's see if now he knows the channel is closed. Transfer 1 second. They told me never do a live demo. So 1 second. Okay, it's okay.
00:45:43.184 - 00:46:41.120, Speaker B: Now the channel is closed. So now it should work. And it is actually then we can do more theory again because it is mathematically. Also quite interesting how this how a route can be found to change my MetaMask? I can connect this raiden DAP so to speak with my MetaMask account and then do these transactions off chain. But I can also do it without MetaMask. Then I don't have to sign so much. Okay, so now we enter the address of Bob.
00:46:41.120 - 00:47:12.540, Speaker B: I don't know. Okay, we have a bug, but in theory, you would see now transfer from Alice to Bob over a third intermediary. And I cannot debug right now, but yeah, this is basically that works since two years. Actually, I have to look it up.
00:47:12.610 - 00:47:12.844, Speaker A: Why?
00:47:12.882 - 00:48:28.660, Speaker B: This doesn't work right here. But the interesting part of that is that if you have this payment channel network then the nodes do not really know what the best path is to the target, right? Because even though in Ethereum we have in the smart contract a list or register of all the channels and we know who has a channel with whom in the current implementation we do not know the current balances in these channels. Which means we know that Alice deposited one year ago five tokens in the channel with Bob. But we do not know who owns the five tokens at the moment. So we would not know. Can we use that channel to route our payment through? And so yeah, there are many different concepts how exchange of information in that network could happen, that it is on the one hand privacy preserving and on the other hand it must be performant. And maybe even there is even a market that certain nodes can advertise their channels to be used as a mediator to earn fees.
00:48:28.660 - 00:49:48.270, Speaker B: So we have basically our transport layer or the layer how the nodes communicate. We use metrics as a system of federated decentralized servers where the nodes can communicate and advertise their channels but also tell each other what the current status of their channel is if they want. And then the nodes get an internal representation of the graph or of the network graph or in the case of the like client, they can outsource that to another more advanced node to get this internal representation and then to use a path finding algorithm on top of that internal representation to find a path. And obviously there's also like a timing question so I can get the information, make my path, but then the network itself could have changed already because there's another payment right in parallel and then there are mechanisms in place that the payment gets refunded. So you can imagine the complications that are in the detail here. Yes.
00:49:48.720 - 00:50:02.150, Speaker D: I didn't really understand why you need to know the balance of each account. Because if the same amount is being transferred from A to B, wouldn't that give it sufficient balance to transfer from B to C?
00:50:04.360 - 00:51:18.184, Speaker B: No, because let's assume that A sends a token to B and B sends a token and B wants to send a token to C, right? So when A like in the channel AB you need to think about these payment channels as also like lists. And in the channel AB there might be enough balance such that A can send a token to B. But B cannot use that exact token to forward it to C because that token is still in the payment channel AB it's still encrypted. That's one of the pitfalls of these payment channel networks, tokens are bound to channels such that we can have the security that B always knows he gets the tokens out that he owns. We have to make sure that the tokens never leave the channel. So there are some tokens in the channel AB and there are some tokens fungible tokens in the channel BC. And then we can make sure that Alice sends a token to Bob and Bob sends another token to Charlie.
00:51:18.184 - 00:52:03.210, Speaker B: But if she would want to use the same token that she got from Alice, she would need to withdraw that token from the payment channel and deposit it again into another payment channel. Does that kind of make sense? I can show you maybe I think I understand. Okay. I think yeah, here you can okay. Yeah. But so that is one of the pitfalls of a payment channel network. You cannot freely use your capital or the deposit you have, but you always have to it is basically bound to a payment channel.
00:52:03.210 - 00:52:42.336, Speaker B: And yeah, that's also how paths are being found. Maybe it's interesting. Let's see. Okay, so, so let's see. So in this case, again, Alice wants to pay to Dave some tokens in lock transfer. She basically locks three tokens, like five five is the current balance. Now she locks three tokens on the way to Bob, and Bob then also needs to lock three tokens to Charlie.
00:52:42.336 - 00:53:22.624, Speaker B: They also have five five as an on chain deposit in their payment channel. So they lock it again and then Charlie only has two on his side of the payment channel, right as you see here. So at the beginning they also deposited five five. So Alice thought she looked at the smart contract and said, okay, that path might be possible. She's a stupid old node, so she doesn't know the current state, but she knows the smart contract. So there must be a path because Charlie deposited five tokens. But in fact Charlie only has two tokens available so the payment cannot go through because this payment channel has not enough capacity.
00:53:22.624 - 00:54:05.696, Speaker B: So Charlie would say I cannot do it. He would refund the transfer to Bob, bob would refund the transfer to Alice and say like, well, OK, this way doesn't would bob knows that he has a channel with email and then they would try another path basically until they reach Dominic at the end. And yeah, you can spend a lot of time into that mathematical or graph theoretical problem. The lightning guys are very good at this. The lightning guys, at the moment they have like 14 different pathfinding algorithms in place. They compete with each other. We only have one.
00:54:05.696 - 00:55:33.596, Speaker B: But we always look in kind of envy to lightning because they play around with that. But the main problem is not the efficiency in these algorithms, I would say, but it is what we can see here. And that is also the last slide that we have a trilemma in these kind of scaling solutions. And I would even say in all L2 solutions from Performance, privacy and Route cost optimization or decentralization. That means the more hops or the more mediators you have in a payment channel network, the more costly it is because every mediator gets a small fee. And so you want to have the shortest route or the cheapest route, but if you want to have a very cheap route or the optimal route for you, then somehow you need to know the current state of the whole network to know that your solution is optimal. But for the privacy reasons no one should know the whole state of the whole network all the time, right? So this kind of contradicts each other and if you also want to have a perform like you don't want to calculate for years it's a numerical optimization problem as well, then the performance dimension also kicks in.
00:55:33.596 - 00:56:13.130, Speaker B: So it's a very interesting problem mathematical wise I would say. And also like design wise how to solve that. Yeah. So that is like I could talk maybe 2 hours more. I would like to invite you to try it yourself. We have a nice wizard online, it used to be a one click installer for Gurley but also for Mainnet where you can just try out Raiden on Gurley for free obviously. And on Mainnet if you want to use it, you need to have some ether in place, a small amount to open the channel and then you can try it out.
00:56:13.130 - 00:56:23.790, Speaker B: Yeah. And that's actually it. Are there any questions or anything? I can.
00:56:31.060 - 00:56:38.240, Speaker F: Have a question actually. How does it interact with layer one? Is it a contract on the ethereum chain?
00:56:42.040 - 00:57:49.656, Speaker B: Yes, it interacts like we have like a bundle of six or seven contracts for Raiden at the moment and like those payment channels we have one smart contract per Token network. So per ERC 20 Token we support for example Die at the moment we support Dai and then in this Raiden Die smart contract or we'd call it Token Network contract and it is basically a register of all the channels that people have. So if Alice has a Dai channel with Bob, it would be in that smart contract. And there, in that smart contract is where the deposit is. Or this smart contract is the owner in the Dai Token contract of some tokens, especially the tokens from Alice. And? And so you need to approve that and it interacts. When Alice wants to deposit or when wants to open a channel with Bob, then you need to write it in.
00:57:49.656 - 00:58:28.640, Speaker B: That smart contract. If Alice wants to deposit more money into the payment channel, then you need to interact with it if she wants to withdraw. So get money out or to close and settle. So at the beginning and the end of the channel lifecycle you interact with the smart contract and yeah, that's basically it. But we have some more smart contracts for security features, especially this case that Peter talked about. When one person goes offline we have so called secret registry. So another smart contract where you can timestamp that you know a secret at a certain time, a secret for a hash time lock.
00:58:28.640 - 00:58:47.888, Speaker B: And with that secret registry, you can prove that you know a certain secret. And then in the settlement period of another smart contract, it looks at the secret registry and then pays you out the correct amount. Does that answer your question? Oren?
00:58:48.084 - 00:59:01.344, Speaker F: Yeah. So to open a channel you have to deposit, right? And it's not like you're depositing once and open like multiple channels you're depositing each time you're open. Okay, yes, that makes sense.
00:59:01.382 - 00:59:11.650, Speaker B: Yes. Are there any more questions?
00:59:13.780 - 00:59:44.510, Speaker H: Do you know? Well, two related things. One is around obviously it relies on a network and the path finding. What about if there's a network split or there might be another person who there is no path to that person related to that. Is there any analysis around the optimal number of channels to open? Because you obviously don't need a channel for every person you want direct payment for.
00:59:45.360 - 01:00:36.460, Speaker B: No, exactly. So it highly depends on the use case you want to use the Rain network for. In theory everyone can have open one channel and then you can send tokens to everyone in the network. But obviously that's not optimal cost wise. There are some calculations, but there's discussion around that. How many channels are optimal and what are the assumptions to make this calculation. We assume at the moment, but it's very rough that you need three channels, channels to three different parties to have good network.
01:00:36.460 - 01:01:16.910, Speaker B: But I hope that answers somehow the question. But obviously you should never like the Rain network is designed that you do not need direct channels to everyone you want to pay for because that would be not optimal. Then it's better to do an onchain transaction. So you should use mediators. But how many channels you need? We think it's three, but it's a long discussion. In Lightning there are actually nodes with more than 1000 channels, like highly connected nodes that want to earn money with mediation. Does that answer your question?
01:01:18.880 - 01:01:21.230, Speaker H: I might have missed it. There is a.
01:01:23.600 - 01:02:22.690, Speaker B: Yes. Yes, there is a mediation fee. So every time I am that guy in the middle here, like Bob or Charlie, I actually do work and there is also a risk involved and that risk I want to get a fee for. So Alice would pay a small amount to Bob and a small amount to Charlie such that she can transfer money to Dave. And in Raiden actually there are three fees. So it's a flat fee and then a proportional fee of the transferred amount. But there's also an imbalance fee, which means that somehow we make a path more expensive artificially, that is kind of imbalanced or dried out, capital wise, such that to incentivize a path that might be a bit longer but would balance the network again.
01:02:27.560 - 01:02:34.900, Speaker H: And those fees are all calculated in F, like there's no gas pricing mechanisms or anything. They're all just fixed.
01:02:35.320 - 01:03:09.580, Speaker B: Yes, the fees are paid in token to be transferred. So if you would send ten dies to another person, then the other person would reach, I don't know, 9.8 die or so because the person in the middle would get some fees in die. Does that make sense?
01:03:11.070 - 01:03:12.634, Speaker H: Yeah, no, that's fine.
01:03:12.832 - 01:03:28.626, Speaker B: Okay. Are there any more questions or should we show the last slide and hand over to Peter. Yeah.
01:03:28.728 - 01:03:34.180, Speaker I: Okay, well, thank you for a fantastic talk. Can you hear me?
01:03:34.630 - 01:03:35.380, Speaker B: Yes.
01:03:35.830 - 01:03:36.770, Speaker A: Brilliant.
01:03:38.230 - 01:04:36.758, Speaker I: So thank you for doing a fantastic talk. That was really informative. So I'm actually driving right at this instant, so can't actually see the slide, so we're going to see if I can remember what the forthcoming talks are. And so the talk in just actually next week isn't a talk at all. We're going to try something different. So a lot of people have said that they're looking for work, and I've had other people who've come to me saying, do I know any good blockchain engineers or smart contract developers? And so we're going to essentially run an online job fair. And so what we're going to do is every 10 minutes across about an hour, we're going to use the breakout room feature to put about five or six people into a breakout room.
01:04:36.758 - 01:05:45.310, Speaker I: So, say if 30 people come along, then chances are you'll get around to meeting everyone across that 1 hour period. And so the hope is that we'll connect some people who are looking for work with some people who are looking for people to fill roles, and it'll be a fabulous outcome if some people get a job out of it. And then in two weeks time, we've got Alexe, who's going to talk about Turbo Geth and what that new ethereum client can do. And then in four weeks time, we've got Constantine coming along to talk about scale, which is another L2 solution. And then on the 9 December, so it's either going to be David, Highland, Wood and myself, or maybe it'll be some people from the Protocol Labs group are going to talk about filecoin, and so that'll be really cool. And then we're going to have a break over Christmas, New Year, and then we're going to have Piper come along and talk about stateless ethereum and Ethereum One X. So there's a massive program and I hope you can all come along to the talks.
01:05:45.310 - 01:05:53.230, Speaker I: Yeah, so it should be good. So anyway, thank you again. Sorry.
01:05:53.300 - 01:05:55.840, Speaker G: Thank you very much. Dominic, fantastic talk.
01:05:57.010 - 01:05:58.266, Speaker E: Thank you, Dominic.
01:05:58.458 - 01:05:59.200, Speaker B: Great.
01:05:59.650 - 01:06:02.000, Speaker F: Thanks, Dominic. Thanks, everyone.
01:06:04.770 - 01:06:09.600, Speaker I: Thank you. It was awesome. And have a great rest of your day.
01:06:10.170 - 01:06:12.310, Speaker B: Thank you very much. Have a nice day.
01:06:12.460 - 01:06:15.640, Speaker H: I got to change my name, but Peter didn't change his.
01:06:19.930 - 01:06:29.060, Speaker B: That's true. That's true. Feedback taken. Thanks. Okay, have a nice day. Thank you.
