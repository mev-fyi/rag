00:00:05.530 - 00:00:56.830, Speaker A: Welcome to Zero Knowledge. I'm your host Anna Rose. In this podcast, we will be exploring the latest in zero knowledge research and the decentralized web, as well as new paradigms that promise to change the way we interact and transact online. You this week I chat with Alex Glukowski, CEO at Matterlabs and co creator of ZK Sync. We chat about the history and evolution of the ZK sync project, the upcoming ZK Sync 20, which includes a ZKE EVM, an EVM based programming model and composability architecture, as well as a new l two scaling technique called ZK Porter. Now, before we start in, I want to let you know about the ZK Jobs fair, which is happening on April 22. So this is an event that I'm actually running.
00:00:56.830 - 00:01:36.010, Speaker A: It's part of the ZK Sessions series. It's the third monthly event that I'm putting together, but unlike the previous events, this is not a conference. It really is a job fair all online. So I've learned that many of the top projects and companies working in the ZK community are looking to hire talented people into their team. And at the same time, I've seen that the zero knowledge community keeps growing. There's more students or folks just coming out of school, as well as employees in other areas of blockchain tech or other traditional tech companies who are looking to get their feet wet in the ZK space. So I decided to put together a social event that brings these two groups together, and that is the ZK Jobs fair.
00:01:36.010 - 00:02:22.374, Speaker A: So this is happening as mentioned on April 22. It follows the third day of the ZK proofs workshop, which is a full fledged conference put on by our friends@zkproof.org you can expect the job fair to be a social gathering on an interactive online platform. I'm still deciding on which platform to use, but have in mind something like gather town or Topia or Sophia or something in that direction. But whatever the choice, I'll be sure to throw in some fun games or activities to try out while you're there. So if you are looking for a new opportunity in the space or you're just curious to meet some of the folks behind the projects you know and love, do apply to be whitelisted for this event. I've added the application form in the show notes and I'll shortly be announcing the sponsoring projects who will be present at these events.
00:02:22.374 - 00:03:10.502, Speaker A: Ready to meet you. On another note, I want to say a big thank you to this week's sponsor, Mina protocol. Mina is the world's lightest blockchain. It's a l one crypto protocol that replaces the traditional blockchain with a zero knowledge proof, ensuring a super light and constant sized chain that allows participants to quickly sync and verify the network. Mina's main net has just gone live, offering users a platform to build a private gateway between the real world and crypto. Mina also has an active demo in partnership with teller Finance for end to end data privacy, showing how you could use Mina to access your credit score and prove that you meet credit threshold requirements for on chain services without ever disclosing your actual score. Very interesting use case right there.
00:03:10.502 - 00:03:36.158, Speaker A: So if you're interested, visit menaprotocol.com to find out more how you can get involved and join the community. So thank you again, Mina protocol. Now here is my conversation with Alex Glukowski, all about Zksync. So today I'd like to welcome Alex, the co founder of Matterlabs and one of the co creators of Zksync, back to the show. Welcome back, Alex.
00:03:36.254 - 00:03:38.386, Speaker B: Hi Anna. Very excited to be here again.
00:03:38.488 - 00:03:58.250, Speaker A: Yeah. So this is actually your third time, I think, on the Zero Knowledge podcast. And I feel like what's cool with matter labs and the work that you've been doing with your team? I feel like I was there kind of at the beginning of that journey. Like, I've seen it now for maybe almost like two years, three years. How long have you been around?
00:03:58.400 - 00:04:04.790, Speaker B: So we started building ZK sync, I think two and a half years ago. It was December.
00:04:04.950 - 00:04:10.140, Speaker A: I'm trying to remember, were you doing hackathon projects before that point?
00:04:10.670 - 00:04:14.026, Speaker B: Not really. My co founder was involved in a number of hackathons.
00:04:14.138 - 00:04:15.086, Speaker A: That's what it was.
00:04:15.188 - 00:04:20.314, Speaker B: I was doing different things, but then we converged onto the same idea from different angles.
00:04:20.442 - 00:04:20.926, Speaker A: Yeah.
00:04:21.028 - 00:04:25.418, Speaker B: And actually the first presentation of Zksync was on hackathon in Singapore.
00:04:25.514 - 00:04:57.180, Speaker A: Exactly. This is what I'm remembering. I think I may have been like, I was there and I was a judge there. And this is why I feel like I really saw ZK sync's kind of history from the very beginning to now in a way that I maybe haven't seen other projects develop so much. So anyway, it's a project that's dear to my heart. Anyway, as the Xeronald validator, we actually have started to do a few small investments and we have done an investment into Zksync as well. And so this is also an exciting thing.
00:04:57.180 - 00:05:43.482, Speaker A: It's a very new endeavor for us and it's one of the first investments we've made. I'm very excited to talk to you today about this project and where it's at. So the first time you came on the show, I think we actually did a general overview of what a ZK rollup is. And the second time you came on the show, you introduced ZK sync and Redshift. But this time around, what's kind of neat is since that second interview and since you've introduced CK sync, I feel like a lot of us have actually gotten a chance to properly interact with it because of its inclusion in gitcoin. So the Gitcoin grant round ClR matching nine just ended. But like, ZK sync is something that people are probably more familiar with today.
00:05:43.482 - 00:05:52.286, Speaker A: So why don't you tell us a little bit about the history of this project and maybe how it's been going this past year now that people can actually play with it.
00:05:52.388 - 00:06:59.758, Speaker B: Sure. So we started working on this because it was two and a half years ago, we just had cryptokitties cris, and it was quite obvious that scalability is going to be a big problem into the future in the context of the mass adoption of crypto, when we expect a lot of people to come and start using Ethereum and crypto in general. And we kind of did not anticipate this to happen so fast and to such a great extent, as it turned out to be. So we realized that zero knowledge proofs offer a tremendous potential to solve this problem. It was the only way to break out of the blockchain dilemma, to actually scale blockchains without giving up decentralization and security to the highest degree. So we started back then with basic r and D on Zq roll ups, because the technology, the fundamental research, was not mature enough to support generic use cases. So the zero knowledge proofs were still on the verge of being usable in production.
00:06:59.758 - 00:08:00.470, Speaker B: Back then, we only had the most advanced proof system that was available to us was crowd 16, and that required a trusted setup ceremony for each circuit, in other words, for each application and for each update of this application, similar to how Zikash did this. And it was clear that's not very sustainable and we did not have recursion. So we can only do some very simple applications, some very limited applications in scope with fixed functionality. So we went for payments, because we saw the need for payments growing, and people in a lot of countries embracing crypto as not only a store of value, but actually a means of payment already back then. And this is what brought us to the first version of Ziki sync, which we launched last summer where we just had payments with a heavy focus on usability. We made a roll up which was very convenient to use. You did not have to pre register before.
00:08:00.470 - 00:08:38.910, Speaker B: You could just use your existing ethereum addresses. You could transfer funds to any Ethereum address, no matter whether it's a normal account or a smart contract or we built a UX friendly wallet with a lot of nice things and it kind of paid off. We got a lot of integrations recently, starting with already in the first coin round we did. I think less than half of contributions were through ZK sync. In the latest round, which just ended, 82% of all contributions were through ZK sync.
00:08:38.990 - 00:09:11.962, Speaker A: Yeah, I think the way they displayed it too is to say like if you use ZK sync, this is sort of your savings. And the savings are so dramatic now that it makes a lot of sense that these are like, it's, it's so funny because it is the need that's pushing people into, it's, it's really solving a problem and not just like a cool, nice to have. I mean, the first time around I was just like, yay, I get to use a ZK roll up. But I also saved some money. But yeah, this time around it's like, there's no question this is true.
00:09:12.096 - 00:10:05.966, Speaker B: And it's very clear to everyone that the need is burning, and not only for payments. It turned out that you need to scale now all smart contracts on Ethereum, and this was clear already year ago. And coincidentally a year ago, something happened in the zero knowledge proof research which made it possible to accelerate dramatically the adoption of this technology, namely plonk proof system was introduced and recursion was invented for plonk. Recursion is what allows us to build this generic smart contract functionality, which we're very excited to talk about today. We just published an update about Zksync development roadmap and we will heavily rely on it to bring EVM compatible or EVM portable smart contracts to ZK roll up, which is huge news. It's really hard to underestimate the importance of this.
00:10:06.068 - 00:10:20.366, Speaker A: So let's talk about that kind of the update and the things that are now planned. And then I want to revisit how plank and recursion actually allow for this. But first, why don't we introduce what are these updates? What's coming up for ZK sync?
00:10:20.558 - 00:11:18.706, Speaker B: So the main news is that we are going to open a public testnet for ZK Sync 2.0 in May, and Zk Sync 2.0 is going to be the platform where we support smart contracts, and not just smart contracts, it's going to be EVM compatible smart contracts. It's not strictly EVM compatible in a strict scientific sense, because we will recompile your solidity code into a different virtual machine, which is snark friendly, but essentially we're using the same code. And this is what most people mean when they say vm compatible. So you can take your existing solidity code, your existing tooling, and make very minimal modifications in this. And maybe for a lot of contracts you won't need to do any modifications at all if you don't rely on some specifics of EDM, and it will just work out of box in the new version, and it will also be composable with other contracts.
00:11:18.706 - 00:11:39.766, Speaker B: So the entire programming model remains exactly as it is now. On Ethereum, you have your contracts. Those contracts can have some state, you can update the state, and they can call each other and have atomic composable transactions across a number of different contracts exactly the same way you have now on Ethereum.
00:11:39.958 - 00:11:49.050, Speaker A: And what is this called exactly? Is it still just called ZK sync? Or is there like a term for this EVM compatible component?
00:11:49.210 - 00:12:19.142, Speaker B: Technically there is no name yet. We will think of naming. Maybe we'll come up with something nice. But let's call it for now Zke EVM, because that's going to be easy for people to grasp. It's a virtual machine which is turing complete. This is something we've been working on for many months now, and it's coming to completion. And this virtual machine has a compiler from both zinc, our existing smart contact language, which is based in rust and from solidity.
00:12:19.142 - 00:13:09.122, Speaker B: And we use LLVM to compile and use a lot of optimizations and security features from LLVM. And we use recursion to make it efficient, because with zero knowledge proofs, you can only create efficient circuits which are specialized. But then if you have different smart contracts and they require different types of operations to different degrees. So for example, one contract call may have a lot of storage accesses, and a different smart contract call might require a lot of using of hashes, it would be really hard to fit them into a single type of circuit. That's why we're using different circuits for these different operations, and we combine them nicely through the recursion.
00:13:09.266 - 00:13:20.170, Speaker A: So you kind of do like another snark of those different snarks, and I guess, are you just doing one, you're just doing one level of recursion here. You're not doing like multiple recursions.
00:13:21.010 - 00:13:48.274, Speaker B: We're going to do multiple levels of recursion. So we already have recursion live in production on mainnet for payments. This is why Zksync is currently the by far most affordable roll up for payments. We have the lowest cost across all roll ups. There are some validium solutions with lower costs, but they don't offer the same security guarantees as roll ups. But across all roll ups, we're cheapest because we use recursion.
00:13:48.322 - 00:14:07.130, Speaker A: I see. I recently did an episode on languages with Alex Osdmere. We actually surveyed all the ZK languages and zinc was one of them. But do you feel like, are you moving a bit away from zinc as your core language and focusing more on the solidity use, or are you going to really be promoting both of those things?
00:14:07.280 - 00:14:15.882, Speaker B: I think the short term solidity will be very exciting to most people because they can immediately port the existing applications.
00:14:15.946 - 00:14:16.558, Speaker A: Got it.
00:14:16.644 - 00:15:17.830, Speaker B: And this is why we are going to put solidity in the foreground for now. But we're still continuing development of zinc, and zinc will be available from the beginning, from the testnet in May. We think that long term rust based languages will win, and we might even proceed from zinc to native rust at some point in the future, which is relatively easy for us because we use LLVM and we can use any language which compiles with LLVM frontends such as C or Golang or Python or something like Haskell. But we think that rust seems like the best candidate long term for smart contract based block. We see this with other platforms embracing rust, such as Alio and Polkadot, Nier and Facebook's deem, previously Libra. So long term I think Rust will win, but short term of course we want to support the existing ecosystem and let everyone migrate seamlessly on Ziki sync.
00:15:17.850 - 00:15:37.000, Speaker A: And this is why solidity got it even on day one when you can choose between using zinc or solidity, does zinc offer some benefit? Like is there something that makes the programming better, easier? Does it offer anything like, is it closer to the ZK proofs or something?
00:15:37.470 - 00:16:17.502, Speaker B: Well, it offers exactly the same functionality. Just the language itself is better suited for building secure applications. You have immutability out of box by default, you have pure functional programming style with no side effects, and so on and so on. You have things like the syntax is a lot nicer, you need to write less code, and this code is going to be more secure than if you approach it with something like solidity, which is coming more from the direction of imperative programming. But from the functional standpoint, it's going to offer the same scope of capabilities.
00:16:17.646 - 00:16:41.038, Speaker A: Got it. So I'm kind of curious. There are some new solutions that are coming out also using plonk, such as Aztec. I mean, they're kind of the developers of that concept. Their focus seems to be very much on privacy, and I'm wondering, how are they different? And does Zksync have the ability to also provide privacy, or is this a secondary benefit that you're not as focused on?
00:16:41.204 - 00:17:45.178, Speaker B: This is something we're not directly focused on, because our main concern is now scalability and compatibility of the existing applications. But you can easily build privacy on top of Zksync because it's coming naturally out of box of the design which we're offering, because we will have a knob code for recursive proof verification. And those proofs do not need to go on ethereum call data, and they are very cheap to verify. As with all rollups, the cost of call data by far overweights the computational cost of producing zero knowledge proofs. So if you want to build something like tornado cache or any other privacy preserving application on top of Ziki sync, you will be able to do it the same way you do it now on Ethereum, just a lot cheaper. Your transaction costs on to another cache. You will have to pay something like 100 times the cost of a normal l one transaction, or maybe 20 times on ZK sync.
00:17:45.178 - 00:17:56.006, Speaker B: It's going to be roughly as expensive as a normal Zk sync transaction. So it's not coming in the base layer of the protocol, but as a layer three, you can easily build anything there.
00:17:56.108 - 00:18:40.578, Speaker A: Okay. In our last episode, we actually did talk about this idea of this roll up existing on its own with validators and having somewhat of its own ecosystem. And I know that in that conversation we did have quite a bit of conversation about data availability. And I'm kind of curious here what you've described with the, let's call it Zke EVM. In Zksync, if actions are happening in there and they're not kind of reporting back to Ethereum, is that then fully a standalone blockchain of its own with validators writing to a chain, are they acting as sort of the connector to the main chain, or are they actually doing something else in this case?
00:18:40.664 - 00:19:26.878, Speaker B: Well, I think it's similar to all other roll ups. I think it's fair to say that all roll ups are standalone blockchains that are rooted in Ethereum and that use Ethereum network to broadcast, to propagate and make data available. So in this sense, yes, it's a separate chain with a separate state. But it completely relies on Ethereum for its security. As with any ZK roll up, the protocol offers exactly the same security guarantees as layer one as the main. Because you can access the data, but you have to go and fetch data from the archive nodes and download the transaction inputs, and then reconstruct the state from there. If you don't trust the validators.
00:19:26.974 - 00:19:37.118, Speaker A: Do you have, in a way, your own consensus mechanism happening there anyway? Or are the validators doing something more passive than what we see in normal POS systems?
00:19:37.214 - 00:19:47.862, Speaker B: So with Ziki roll up and with the roll ups in general, you strictly do not require a consensus mechanism. But you can build one. You can have one if you want. And this will provide.
00:19:47.916 - 00:20:06.250, Speaker A: This is interesting to me. Yes, this is exactly the question I have, because it seemed like I always understood ZK roll ups as not needing the consensus mechanism. That was the thing that the l one provided. But now I'm hearing something else, and this is what I want to explore a little bit. This sounds like an evolution of thinking around these architectures.
00:20:06.330 - 00:20:48.182, Speaker B: Well, there was this idea of progressive decentralization, that you should start with the minimum decentralization required for application and then proceed gradually because it will give you faster time to market. And this is exactly what we're doing. So we're starting with a single sequencer or single validator. And then we're going to introduce a decentralized consensus to avoid any potential for censorship. And to have the system fully controlled and owned by the community and not by any single party. We don't want to be the single party that provides the proofs and have all the responsibility and be subject to some political pressure. We want it to be owned by users.
00:20:48.182 - 00:20:49.846, Speaker B: So this is coming for Zksync.
00:20:49.878 - 00:20:56.782, Speaker A: Got it. And like, right now, the ZK sync that we've used with Gitcoin, that is like, currently there's a single validator and it's you guys.
00:20:56.836 - 00:20:57.534, Speaker B: This is true.
00:20:57.652 - 00:21:16.202, Speaker A: Okay. I mean, I know that other constructions like Hermes, they also have a way to decentralize, in a way, that connection point between the l two and the l one. But how would you compare then to. How does the validator community or consensus community of ZK sync compare to something like Hermes?
00:21:16.286 - 00:22:13.030, Speaker B: Well, in Hermes, as far as I'm aware of their design, it's still a centralized sequencer. But then you can kind of decide on layer one who is going to be the centralized sequencer for the next epoch. But then throughout epoch, it's the same. What we mean with the consensus that we are building is that every block is decided upon by the consensus of validators, so that you don't have a potential for denial of service by any single validator. So in the Hermes design, if the validator who gets the next slot, the right to produce blocks throughout the next epoch just goes offline, then you lost that slot. Then the entire system will stop and wait for the next slot to arrive. But with the design that we are building, if some of the validators are faulty, it's going to be byzantine consensus anyway.
00:22:13.030 - 00:22:33.280, Speaker B: So it will still continue. As long as you have the majority of the validators who are live and functional, you will just move on. And this is important. If we're talking about a network which secures operations for millions of users and handles thousands of transactions per second, you can't really afford a downtime of even some minutes.
00:22:33.730 - 00:22:45.998, Speaker A: Also, something we talked about in the last episode was about data availability on the main chain. Is that still the same setup that you have today with this kind of evolution, or has that changed?
00:22:46.094 - 00:23:32.810, Speaker B: Oh, this is a very exciting part, which I'm really happy to talk about. We're publishing a post by the time the episode is live, we will have details about this new construct live. And indeed for ZK Sync 2.0 we will start with the architecture called ZK Porter to the ZK Porter approach. The users will have an option to have their accounts on the ZK roll up side or the ZK Porter side. And the ZK roll up users will have all the benefits, all the upsides and downsides of ZK roll ups. So they will pay normal ZK roll up transaction fees, and they will enjoy the full security guarantees of l one on the ZK Porter side.
00:23:32.810 - 00:24:36.526, Speaker B: If you choose for that account type, you will have slightly degraded security guarantees, but they're still better than optimistic roll ups, and we can talk about that. But you will pay miniscule prices. This will not with gas prices, because the data availability is going to be stored off chain, but off chain secured by a consensus of many validators, broadly decentralized. And the interesting thing is that both account types will remain fully transparent to each other and seamlessly interoperable. So for example, imagine that you will have a uniswap on the ZK roll up account, so it's fully secured just like main one. And all the big lending partners will have their accounts also on the ZK roll up side. But then you will have millions of users on the Porter side who can interact with this uniswap just the way they would interact normally with the uniswap.
00:24:36.526 - 00:24:44.614, Speaker B: Just like making a simple click in metamask. And they will have to pay this very small transaction fees. So this is what ZK Porter gives you.
00:24:44.732 - 00:25:11.578, Speaker A: So the ZK rollup construction. So it's almost like two versions, and you can opt in or you can choose which one you're going to do. But the ZK roll up, does it still have the data availability set up that we talked about in that last episode? And by the way, everyone should check that out potentially if they want to. I keep referring to it, but there you had explained how it was written onto l one. Is that still the case for the ZK roll up version?
00:25:11.674 - 00:25:34.966, Speaker B: Exactly, yes. So for each update in the ZT roll up account, we will have to publish the final state of that account on Ethereum network. So anybody can check that. And if something happens to the validators, you have full guarantees that you can retrieve this money, you can reconstruct your state and then provide the proof of ownership and fetch the funds from this account.
00:25:35.068 - 00:25:44.266, Speaker A: Got it. And with the ZK porter though, it's off chain consensus. And I guess that consensus actually determines state. And all of the data lives there.
00:25:44.368 - 00:25:58.206, Speaker B: Well, it's independent, so we'll have a separate consensus for the state for the blocks that will go to Mainnet, or for all our blocks in general. But this data consensus is only securing data.
00:25:58.308 - 00:25:59.022, Speaker A: I see. Okay.
00:25:59.076 - 00:26:28.758, Speaker B: And this is why the threshold of entry is going to be very low. You will be able to participate in this consensus with a simple laptop. I mean, your participation will be meaningful. You will be making some money from providing this data availability to the network, and we will be able to collect signatures from 10,000 validators for each block. And it doesn't have to be synchronous. We don't have to collect those signatures within 3 seconds. It can take time.
00:26:28.758 - 00:27:50.130, Speaker B: It can be 15 seconds, half a minute. Because the blocks that go on Mainet are asynchronous anyway. We still have to wait for the zero knowledge proof to be generated, which is still a few minutes probably. So we can wait for all the signatures to be collected and we can set the threshold very high so we can have a quorum of a supermajority of the staked token holders for every block to go on Mainet, it's important to note that all transactions concerning ZK porter accounts are secured by the same zero knowledge proof state transition function that we use for ZK rollup in other words, the validators can never steal funds and they can never corrupt the state. So the only bad thing that can happen to Ziki porter accounts is that the majority or supermajority of the token holders will sign some valid state transition, but will withhold the data and not inform everybody about what this new state is. In which case all the accounts in ZK Porter will be frozen, including the stake of the stock holders. So the only thing they can do is kind of take everyone hostage together with their own money and freeze and destroy their stake.
00:27:50.790 - 00:27:51.582, Speaker A: It stops.
00:27:51.646 - 00:28:15.980, Speaker B: So we are talking about for this system, in order to remain secure and funds to remain accessible, we need not an honest majority, not an honest minority, but just a rational minority. So we need a minority of people who are sane and don't want their funds to be lost from the token holders. If you have that, it's going to be fine.
00:28:16.350 - 00:28:46.098, Speaker A: When you mentioned validium, and I know you're like, it's not like validium, but it's a bit like validium in there. I know that there's a committee and here I guess it's this validator group. And in both cases there's this assumption that it would be suicidal to like, you'd have to wreck yourself for no reason and many people would have to do that at the same time in order for this to be corrupted. Is that sort of the link part? Except that instead of it being a committee, it's more of a validator community?
00:28:46.264 - 00:29:22.714, Speaker B: That's exactly the difference. And the problem with the committee is that you have a few validators there, because if you have a lot of them, then how do you manage? How do you govern the participation? For whom are you supposed to wait? For all of them. For half of them. It must be a small group of permission participants. If it's a small group of permission participants, all they have at stake is their reputation, which can be a lot, but it's hard to quantify. But then they might have some different incentives. They might be subject to some political pressure.
00:29:22.714 - 00:30:17.262, Speaker B: Imagine regulators coming to this known group of small validators and telling them, now you have to introduce KYC and AML and people on this list. We just want to confiscate their money and they will have to comply. They won't be able to confiscate the money immediately, but they can freeze those accounts and then do an update at some point and take this money. But this is a very plausible situation. We know that this happens to exchanges, we know that this happens to a lot of centralized projects because they are known, they have a clear set of owners and there are a few of them, and it's really easy to come after them. Now with the decentralized data availability, we are in the same situation as with Ethereum. There are a lot of nodes, so it's really important to have the threshold low and to allow people to participate with minimum hardware requirements.
00:30:17.262 - 00:31:21.314, Speaker B: And also the decentralization of the token is going to be very important because you want the supermajority or even simple majority of the token holders to be as broad as possible, not to be controlled by 20 nodes, but maybe by 2000 nodes. In this case, it's going to be very hard to come after all of them. It's a truly decentralized system, and this fact is what makes the Ziki Porter actually more secure than the optimistic roll up. So this is a very interesting and nuanced comparison, and some people might disagree with me, but let's just examine how the security assumptions work in an optimistic roll up, and how they work in the ZK Porter. So with an optimistic roll up, there is a broad notion that you need one of n honest participants for the roll up to be secure. So this is not the full story. The full story is that you rely on two different assumptions.
00:31:21.314 - 00:32:20.406, Speaker B: One is that you have at least one honest validator who will catch the fraud and submit the fraud proof to Ethereum. And the second one is that this fraud proof will actually be mined on Ethereum by miners. You will be able to overcome any censorship attempts on layer one. So let's consider both parts separately with one of an honest validator assumption. It will practically mean that you just need some small amount of nodes to be honest. You will require all the validators to be honest, but you will realistically have not so many validators, because the requirements of running an optimistic roll up node, which is running at full capacity and providing like 200 tps on Ethereum, will already be very high. You won't be able to participate and validate the optimistic roll up blocks with a simple laptop.
00:32:20.406 - 00:32:57.086, Speaker B: You will actually need a well secured, very powerful machine running somewhere in the cloud or on your premises with a lot of memory at least, because right now the Ethereum throughput is limited by the capacity of access on the database, because you have to do a lot of random access reads in the database to reconstruct the merkle proofs and verify all storage accesses. And you will have to do the same thing. So to accelerate this and be beyond the limits of Ethereum, you need at least a lot of memory.
00:32:57.278 - 00:33:28.746, Speaker A: I mean, this to me is something I'm hopefully going to get a chance to talk to a group who's building optimistic roll up soon, so I can actually explore this even further there. But are they running just from your understanding, are they running just a full Ethereum node and then having an archival node, or are they running multiple nodes? I'm kind of confused as to why there would be such high requirements there. I always got the impression it was like ZK proof generation computation would be like the heavier thing than a fraud proof.
00:33:28.938 - 00:33:47.226, Speaker B: The ZK generation computation, it requires a lot of resources, but those resources can be run in parallel. Whereas to run a sequencer doesn't matter. For optimistic roll up or for ZK roll up, you have to run what essentially is a normal ethereum node.
00:33:47.278 - 00:33:47.494, Speaker A: Okay?
00:33:47.532 - 00:34:06.518, Speaker B: So you have to execute all the transactions sequentially. And if you go higher than the threshold which is currently set for Ethereum, let's say 20 transactions per second, you go towards 202,000 transactions per second. You need a fundamentally faster hardware to process those transactions.
00:34:06.614 - 00:34:07.210, Speaker A: Got it.
00:34:07.280 - 00:34:32.814, Speaker B: And the bottleneck there is storage access. You just need really fast storage, essentially. Probably you need to store all of the blockchain state, in this case, optimistic roll up state, which is going to exceed the Ethereum state by far, since it's a scaling solution. Otherwise it doesn't make sense. We have to keep all of that, all these gigabytes of data. Terabytes of data in memory, not on a SSD.
00:34:32.942 - 00:34:38.182, Speaker A: And in the ZK roll up context, you're just writing, it's the same thing.
00:34:38.236 - 00:34:45.058, Speaker B: It's the same thing. The validator is required to have very high, very powerful hardware profile.
00:34:45.154 - 00:34:45.558, Speaker A: Okay.
00:34:45.644 - 00:34:55.302, Speaker B: But not the validators of ZK Porter. The validators of ZK Porter only need to store blocks of data. This is a lot easier.
00:34:55.446 - 00:35:14.402, Speaker A: So the optimistic roll up memory requirements of a sequencer is comparable to the verifier of a ZK roll up as well. But the ZK porter, using the sort of lithium one I know it's not, but like in that direction, would require a lot less. Is that correct?
00:35:14.536 - 00:35:16.914, Speaker B: Yes. Okay, this is correct? Yes.
00:35:17.032 - 00:35:27.314, Speaker A: Would you say though, then with the optimistic roll up versus vanilla ZK roll up, is it actually the same amount of memory and computational power needed to.
00:35:27.352 - 00:36:05.054, Speaker B: Run those nodes so the sequencers are almost identical. Okay, then on the ZK roll up side, we will need to produce the proofs for the blocks that have been compiled which have been produced by the sequencer. And this can be done in a completely untrusted cloud where you can provision like a lot of instances on demand. So anybody can do this, you just need an account on different cloud providers and eventually it's also going to be decentralized. But for now it's a solved problem. Just go. You create 100 nodes, they produce the proof, you collect them together and then you submit this proof.
00:36:05.054 - 00:36:45.038, Speaker B: Okay, but the sequencers are going to be of essentially the same way. But to come back to the story, if your sequencer is highly expensive, like very powerful, has a lot of requirements, then only a few really motivated validators will run it. So you as a user just won't be able to run it. So it will boil down essentially to just the number of validators running those nodes. And it's going to be a small number. And yeah, all of them will have to be malicious to do anything wrong with the system, or malicious or faulty. But yeah, with the ZK porter, the pure number is going to be much higher.
00:36:45.124 - 00:36:45.582, Speaker A: Got it.
00:36:45.636 - 00:37:30.700, Speaker B: Even though the assumption is not one of an honest minority, like less than super minority of rational validators. But then on the optimistic roll ups comes the second part where you actually have to submit the fraud proof to Ethereum. And this is far from solved. So right now, we described an attack on optimistic roll ups that will cost, right, like at the current price is something around $100 million, nominal cost of this attack. The actual attack is going to be a lot less. And we will publish a link to this in the comments to the show. And it cannot be mitigated as long as Ethereum remains on proof of work.
00:37:30.700 - 00:38:04.546, Speaker B: It's a threat which hangs on optimistic roll ups. And the assumption is that it's a lot of money with a lot of uncertainty. So nobody will attempt this attack. Well, if you accept that argument, then you're just much better off with the Ziki porter, where you know exactly how much money someone will have to burn. And this stake might be up to very high amounts because it's like 70% of all the stake in this network. But then you will have super low transaction costs.
00:38:04.658 - 00:38:44.178, Speaker A: I kind of like you just hinted at the direction. I want to take this interview next, which is currently ETH one proof of work. In the last week or so, there's been these proposals for actually how to move it to proof of stake. What does the ETH two world look like with proof of stake and these CK roll ups? And I know it's been discussed quite a lot, and people have given various perspectives and ideas of what this could look like, but I'm really curious what it looks like currently to you. What does that future look like? What does even the transition look like?
00:38:44.344 - 00:39:23.310, Speaker B: I don't think that a lot of things will change soon. So first of all, we'll have to wait for the merge to happen, which is realistically still significant time away, because in Ethereum, you have a lot at stake and these things cannot move as fast as some new solutions. And once this happens, we will still have to wait for sharding to arrive, which is probably still some years away. After the transition to proof of stake and before sharding arrives, essentially nothing will change. We'll have exactly the same system as we have now, just more eco friendly. Right. Because we don't have to burn all this electricity.
00:39:23.310 - 00:39:38.322, Speaker B: But from the point of view of protocol and data availability, nothing is going to change once sharding arrives. We have to see how exactly it's going to be implemented, and then potentially we'll have just higher capacity for roll ups.
00:39:38.466 - 00:39:44.550, Speaker A: Okay. But like, a roll up wouldn't become a shard. They kind of are like shards, right?
00:39:44.620 - 00:39:48.410, Speaker B: They are like shards. They are exactly like shards today. Yes.
00:39:48.480 - 00:39:51.338, Speaker A: Yeah. That's what's so interesting about that.
00:39:51.504 - 00:40:43.910, Speaker B: And they show the limitations of shards. So if you have multiple shards, they increase the overall capacity of a blockchain, but at the cost of making interoperability between different shards harder and less efficient and less convenient. And this is what we would have with roll ups. If we have multiple roll ups on Ethereum. Well, not exactly roll ups maybe, but because they still share the same block capacity. But if we had multiple l two solutions, like multiple Ziki Porter, for example, then sending funds from one of them to the other will have to go through l one or through some complicated mechanisms with liquidity providers, which is going to be an impediment for it's not going to be seamlessly composable. So you will only have seamless composability within a single shard.
00:40:43.910 - 00:40:49.318, Speaker B: And I think it will remain the same in f two, but we have to see the final designs.
00:40:49.414 - 00:41:13.806, Speaker A: Got it. Okay. But going back, let's go back a little bit to what you were saying about the fraud proofs on proof of work from optimistic. If there is proof of stake, does that change a little bit? Like the problem there, does that make it easier? Or maybe easier is the wrong word, but does it make it more effective? Are they able to actually, I don't think it's rollback, but are they able to actually call the fraud proofs?
00:41:13.838 - 00:41:46.074, Speaker B: If it's proof of stake, they will be able to coordinate the community and say, okay, we know exactly who of the validators participated in this attack and we're going to punish them. But this is also like, you have to agree on these things beforehand. It's really hard to change rules of the game once the game is on, and we see it with EAP 1559. So let's first get 1559 pushed through and then talk about some collective punishment for validators.
00:41:46.122 - 00:41:46.526, Speaker A: Okay.
00:41:46.628 - 00:42:55.460, Speaker B: Because we see that there is a lot of contention and it's not that easy. We also see the situation with parity multisig, where it was absolutely unambiguous, it was a mistake that costed a lot of people a lot of funds, and it would have been easy to make an upgrade, which solves the problem if the community really wanted to cooperate and was able to coordinate such things. But we did not see this happen. Potentially, theoretically, from the protocol perspective, what proof of stake gives you is the ability to coordinate, but the coordination still remains with the community, and it's far from seeing this coordination, like, really actionable immediately. So I'm still skeptical there, and I'm also skeptical that such a coordination should take place. I'm very strongly against relying on human coordination for something that should have been built more reliably in the incentive structure of your system. With Ethereum, miners are essentially free to do whatever they want, right? From the protocol perspective, they can do whatever they want.
00:42:55.460 - 00:43:07.318, Speaker B: They did not sign any contract with the society that we're going to do this, and that they just have some incentives to behave in a selfish way which will benefit everyone.
00:43:07.484 - 00:43:08.006, Speaker A: Yeah.
00:43:08.108 - 00:43:38.910, Speaker B: Because it's in their own interest to include transactions and get the feast for those transactions. Right. So you don't want to change that. You want to build systems that are resilient from the underlying perspectives with taking everyone's incentives into alignment. And I think we can build such systems. I think we can build something a lot more secure from censorship and front running using, of course, zero knowledge proofs. So we have these interesting developments.
00:43:38.910 - 00:44:19.498, Speaker B: We have these ideas, such as time locked encryption, where you could encrypt your transaction and submit it to validators in an encrypted envelope so that the validators will include it in the block without knowing what the transaction actually contains. And this will only be revealed after the block is finalized and supported by the stake of validators. And I think this is a much better approach to solve both censorship and front running than to say, like, oh, please, guys, don't do front running and don't do or don't do censorship and otherwise we're going to punish you, maybe somehow with collective action.
00:44:19.594 - 00:44:33.710, Speaker A: But is that something that you've actually built, what you just described there, is that something you've actually built into your kind of validator rules or not? Or is that just sort of an idea for more of like an L one or an ETH two construction?
00:44:33.870 - 00:44:44.550, Speaker B: Well, it's an idea that we definitely want to build. So for now we focused on the basic scalability, but we definitely want to have this built. And this requires.
00:44:45.690 - 00:44:47.826, Speaker A: Which part does that live in what you just described?
00:44:47.858 - 00:45:07.040, Speaker B: Does that have to remain at the consensus part of the protocol? So in our case, it will be at the consensus level of among the KSQ validators and users. Eventually awans will probably embrace this as well, because it's just a great technology. It's the only way we can ensure that long term we don't have any censorship and any front running.
00:45:08.850 - 00:45:39.338, Speaker A: One topic I want to kind of touch on is the partnerships. So we mentioned Gitcoin. That's the one that I've actually used. But what's coming up for Zksync in terms of projects that are potentially going to be working with it? Because if you look at the list of investors that you recently brought on, there's a lot of defi projects there. And I'm curious, how far are you in talks with those folks? Are they just sort of like supporting? Are they potentially going to be using like maybe share what you can on that front?
00:45:39.424 - 00:46:17.570, Speaker B: Sure. So with all the partners who invested in Zksync actually are interested in using Zksync for scaling of their projects. We have three types of investors in this strategic round which we just had. And by the way, we only had strategic investors in this round. The first type is wallets who want to scale the operations for the transfer swaps for their massive user bases. So we are currently doing integration with Argent Mykey Iam token with other wallets following. We have a number of new wallets who directly build on Zksync.
00:46:17.570 - 00:46:34.250, Speaker B: And second category of projects is exchanges and on ramp off ramp platforms where we want to integrate and allow transfers, or like onramp from fiat and off ramp to exchanges happen directly in l two.
00:46:34.320 - 00:46:34.858, Speaker A: Oh wow.
00:46:34.944 - 00:46:52.846, Speaker B: Bypassing l one so that the users can just go purchase some ETH or tokens, go to l two directly, and then start trading and transferring, because it's just not sustainable to let all of them go through deposit withdrawal mechanisms. It's very expensive on level one, but.
00:46:52.948 - 00:47:03.138, Speaker A: How would that actually work? I want you to continue, but I want to just explore that for 1 second. You would buy ETH, but if you're buying ETH, you're buying ETH on l one anyway, aren't you? Even if you're buying it on an.
00:47:03.144 - 00:47:29.910, Speaker B: Exchange, if you buy it on an exchange, maybe you buy it from someone who already has it in ZK sync, or maybe you buy it from the exchange and then the exchange can batch multiple transactions together. Or maybe the exchange has already some liquidity in ZK sync and you just get this liquidity directly from there. And then the exchange can provide more liquidity by doing one l one transaction from time to time, which is not going to be very expensive. It's not like doing thousands of transactions for thousands of users.
00:47:30.070 - 00:47:38.446, Speaker A: That makes sense to me. So you don't individually have to do that. Lock up on l one. Okay, yeah, cool. And continue. Sorry I cut you off there.
00:47:38.548 - 00:47:49.598, Speaker B: And yeah, the third type of products who invested in ZK sync are D five projects and they are simply waiting for our upcoming version two where they will have smart contracts.
00:47:49.694 - 00:47:58.520, Speaker A: Cool. So you're saying they're all kind of looking at it. Is there some official ones? Is anyone already working on it? Do they have something?
00:47:58.890 - 00:48:22.666, Speaker B: Sure. Well, we're building integrations and test kits and the first testnet application we had built was with curve. It's live on Zksync curve Phi. You can try it out. It's been built with zinc, with the previous iteration of zinc language, but it just as well compiles to the new virtual machine.
00:48:22.778 - 00:48:31.358, Speaker A: Got it. Could you actually use that though as an end user already? Could I go and do a stablecoin swap on that?
00:48:31.444 - 00:48:34.430, Speaker B: Yeah, you can do this, but it's going to happen on Testnet.
00:48:34.510 - 00:48:37.790, Speaker A: Okay. So you can swap testnet stablecoin.
00:48:37.870 - 00:48:38.450, Speaker B: Yes.
00:48:38.600 - 00:48:44.194, Speaker A: Okay, got it. So it's not, you can't quite do it with the real thing yet.
00:48:44.392 - 00:48:48.440, Speaker B: You have to wait for a mainet, which we're targeting for August this year.
00:48:48.890 - 00:48:51.238, Speaker A: Very cool. It's coming up fast.
00:48:51.404 - 00:48:52.070, Speaker B: Yeah.
00:48:52.220 - 00:49:14.030, Speaker A: So I think one thing we didn't get a chance to talk about yet is the matter labs and the team that's actually building this because I imagine over the last two and a half years this has evolved a lot as. So like what is the Matterlabs team? Do you divide yourself up into specific project teams? Like is there a ZK Porter team and a ZK sync team or is it all under one umbrella?
00:49:14.370 - 00:50:06.250, Speaker B: Well yes, we have different sub teams. The matterlabs is organized on the principles of ownership and responsibility, and we have a lot of smaller sub teams working on different things. Right now, we are over 20 people, and almost all of us are engineers, have engineering background, and we are actively expanding the team. We are hiring engineers who have experience in rust. We are hiring junior engineers who are brilliant and bright, and ideally have experience in programming competitions, in Olympiad, in informatics, ACM, ICPC contests and so on. And we are also hiring cryptographers, applied cryptographers, researchers. And we recently also started hiring non developer positions.
00:50:06.250 - 00:50:22.738, Speaker B: What we need most is someone on the communications side and business development side. So if you feel interested in what we're doing, and if you feel aligned with our values and mission, please talk to us and shoot us a message.
00:50:22.904 - 00:50:40.602, Speaker A: Cool. How did you build the team? Like, how did you originally find the co founders and teammates? This is just actually a question, because the topic of onboarding folks into ZK tech is something that I'm focused on right now. And yeah, I'm just kind of curious how you first did it.
00:50:40.736 - 00:51:07.726, Speaker B: Well, the first hires are of course very tough, so I found my co founder at a conference. So I think the greatest environment for finding co founders is conferences and things like this, where a lot of like minded people come together. And it's just like you have people who are interested in something and who are passionate and active enough to do something and actually have a lot of action.
00:51:07.838 - 00:51:23.718, Speaker A: Man, I hope we get to have conferences in person again really soon. What you're saying, it rings true and the online versions don't quite cut it, I think. It's not just like, oh, it will be fun to travel again. It's sort of like necessary for this exact thing.
00:51:23.804 - 00:51:51.610, Speaker B: Absolutely. You're missing out on serendipity, on being online is very different because you cannot just randomly run into people. But it should not be too random. It has to have some contact say, yeah, you need events like this. But that's for co founders, for the teammates. The early teammates we hired were exclusively not from the blockchain space. We were hiring very smart developers.
00:51:51.610 - 00:52:12.886, Speaker B: So what we're doing, we're hiring people who have very strong math background and developer background and who can program very fluently and being able to maintain very high complexity. But they did not have any blockchain domain specific knowledge or any zero knowledge specific knowledge before us. We have to teach them.
00:52:12.988 - 00:52:31.822, Speaker A: This sounds like it would be really intense. Like, you'd have to train people. But I wonder if by doing so, you also encourage new perspectives. Do you remember that? Did you notice they might bring actually a very different, maybe a very refreshing perspective compared to what the general community is doing.
00:52:31.956 - 00:52:46.770, Speaker B: So I would say that to have a new perspective, you first have to come up to speed and to observe all the knowledge. So if we're talking about the product ideas, then you actually have to understand the market really well.
00:52:46.840 - 00:52:47.122, Speaker A: Okay.
00:52:47.176 - 00:53:23.914, Speaker B: Right. So it takes time to get there. If you're talking about the technology, then yes, those people who we hired were coming and pointing out to directions which we would not originally think. So I think it has different levels. We were hiring the most scars niche, which is like, very smart technological people, because that's the hard part, to make things execute, to actually deliver. This is why it took us longer initially to get up to speed, but now we are really fast because we have this big team who is very cohesive and very knowledgeable now.
00:53:24.032 - 00:53:30.542, Speaker A: Nice. And I think, like, 20 people is a nice. That's a nice number for a team, I feel.
00:53:30.676 - 00:53:40.254, Speaker B: Yes, I agree. I would not want to work in a company where I don't know everyone personally and have relationship with everyone personally.
00:53:40.382 - 00:54:12.186, Speaker A: Yeah. Cool. Well, Alex, thank you so much for coming back on the show and sharing with all of us the update to the work that Matterlabs is doing. ZK sync ZK Porter one thing I didn't mention throughout the episode is you actually recorded a video at the ZK sessions last month all about ZK Porter. So I'll add a link to that in the show notes if anyone wants to catch that up. And you did mention you're going to have a blog post published by the time this airs. And we'll also add that into the show notes if people want to find out more.
00:54:12.288 - 00:54:15.600, Speaker B: Thank you, Anna. It was really exciting. As always, cool.
00:54:16.130 - 00:54:43.060, Speaker A: And something I want to do different. For the first time ever, I want to say a big thank you to Andre, the producer of this podcast, as well as Henrik, the editor of this podcast. For the last few weeks, Andre's been with us. This has been really helpful. And Henrik has been editing this podcast for the last year. And I feel like from now on, I need to do a little shout out at the end of the episodes. So thanks again and to our listeners, thanks for listening close.
