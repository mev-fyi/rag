00:00:05.450 - 00:00:52.902, Speaker A: Welcome to Zero Knowledge. I'm your host, Anna Rose. In this podcast, we will be exploring the latest in zero knowledge research and the decentralized web, as well as new paradigms that promise to change the way we interact and transact online. This week I chat with Mustafa Albassam, co founder at Celestia. We chat about where Celestia as an idea emerged from and explore how their roll up centric data availability system compares to that of Ethereum. We also touch on what concepts have emerged in the last year within their ecosystem, things like sovereign chains, and what we can expect from their upcoming launch. Now, before we kick off, I just want to direct you towards the ZK Jobs board.
00:00:52.902 - 00:01:36.902, Speaker A: There you can find job posts from top teams working in ZK, check it out and maybe find your next job opportunity working with the best in the field. Now Tanya will share a little bit about this week's sponsor Alio is a new layer, one blockchain that achieves the programmability of Ethereum, the privacy of zcash, and the scalability of a rollup. If you're interested in building private applications, then check out Alio's programming language called Leo. Leo enables non cryptographers to harness the power of zkps to deploy decentralized exchanges, hidden information games, regulated stablecoins, and more. Visit developer alio.org to learn more. You can also participate in Alio's incentivized testnet three by downloading and running a snark os node.
00:01:36.902 - 00:01:56.462, Speaker A: No signup is necessary to participate. For questions, join their discord@alio.org. Discord so thanks again, Alio. And now here's our episode. Today I'm here with Mustafa al Basam, co founder at Celestia. Welcome to the show, Mustafa.
00:01:56.526 - 00:01:58.034, Speaker B: Hi, thanks for having me on.
00:01:58.152 - 00:02:50.930, Speaker A: So, Mustafa, in preparation for this interview, I went back and listened to an earlier episode I did with your co founder, Ismail Coffey, in that we described Celestia and what it was, data availability. But I think I really want in this episode to kind of like revisit it because I know you guys are much closer to launching. I feel like you're going to have more insights into what it actually looks like in production. I think I'd also like to explore a little bit more what's happened since and what does the project look like going forward. Now, before we do that, though, I think we should get to know you. So when I talked to Ismail, he had said that he was coming more from like a cosmos ecosystem and that you and John Adler, the other two co founders had come more from Ethereum. So, yeah, tell me, were you an Ethereum person? What was your sort of start?
00:02:51.000 - 00:04:09.894, Speaker B: Yeah, I mean, I definitely started using Ethereum when it first came out, but I actually first got into kind of blockchain networks and technology in around 2011, 2010, when bitcoin was one or two years old. And I got into bitcoin because even before bitcoin, I was naturally interested in peer to peer networks, including peer to peer file sharing systems like BitTorrent were really interesting to me. So I was generally kind of very interested in the concept of peer to peer technology. And I kind of got into the bitcoin scaling debate and the general area of bitcoin scaling through the bitcoin block size war back in around 2013, 2016. And when bitcoiners were arguing about how to scale bitcoin, should we use lightning or should we increase the block size? And when the bitcoin cash fork happened, the reason why I found Ethereum very interesting is because it was obviously a general purpose, smart contract platform. But the innovation in bitcoin has started to die down. The bitcoin community started to become very technologically conservative, and they were more interested in bitcoin as sound money, which is very interesting and a good goal.
00:04:09.894 - 00:04:26.282, Speaker B: But for people like me, I was also interested in the technological aspects of decentralization and peer to peer networks. And so a lot of researchers and innovation moved to Ethereum. And that's kind of like how I naturally ended up in the Ethereum space and also eventually ended up in cosmos.
00:04:26.426 - 00:04:36.066, Speaker A: What year was that that you kind of switched over to Ethereum? Was that 2016 then? Kind of at the end of that block space kind of conversation in bitcoin?
00:04:36.258 - 00:04:56.890, Speaker B: Yeah, this was around 2016 or 15 when I think this was just after Ethereum had released its main net. I was doing my last year undergraduate computer science project on developing Ethereum application. At the time, it was like a decentralized sort of identity service.
00:04:56.960 - 00:05:05.694, Speaker A: Oh, very ahead of its time. There's like a lot of those now that are kind of coming into the forefront. So you were doing an id, like a digital id thing.
00:05:05.732 - 00:05:30.774, Speaker B: Yeah. But actually, even though it may seem ahead of his time, when Ethereum was a few months old, there was like ten of those projects already. It was like a very kind of obvious or obvious idea for building something on Ethereum. And I remember going to Ethereum. Defcon one in London. Yeah, I think it was Defcon one. And that's kind of like when I realized that this thing was becoming real and people are actually building stuff.
00:05:30.892 - 00:05:39.266, Speaker A: Cool. You had sort of explored this decentralized id thing, but did you build anything else in Ethereum? Were you involved in any other projects that we might know?
00:05:39.388 - 00:06:41.280, Speaker B: So I didn't really build anything else that went into production in Ethereum at that time. But after 2016, I started a phd on the topic of layer one scalability in 2016 at UCL in London. And over there, I was looking at sharding specifically, or like layer one sharding. And I became somewhat involved Ethereum research community around then, because Ethereum at the time had a very complicated Ethereum 2.0 spec that also revolved around execution sharding. And so there was a lot of interesting questions around how to do sharding things, like how do you do cross shard transaction calls, and how do you make sharding secure. And I was hanging around a lot on the Ethereum research forums, and as part of my PhD research, we created an academic project called Chainspace, which was the first kind of like, proposal to create a sharded smart contract platform.
00:06:41.280 - 00:06:54.986, Speaker B: And that was later commercialized into a company that was later acquihired by Facebook. But I didn't join Facebook, and I ended up working on Celestia instead, which was formerly known as Lazy Ledger.
00:06:55.098 - 00:07:22.310, Speaker A: Yes. And I think I actually have had John Adler, your third co founder, also on the show, long while ago, when it was called Lazy Ledger. He was talking about fuel and lazy Ledger. I haven't listened to that episode in a long time, but we can dig it up if listeners want to go back and sort of see the trajectory of this project. So that idea of separating execution from consensus, was that what you were doing? Had you sort of formulated that, or did that idea already exist?
00:07:22.470 - 00:08:23.370, Speaker B: I think there were some general early ideas. Technically speaking, the idea of separating consensus from execution actually existed before blockchains themselves. Okay, there's this paper from, I think, the early 2000s that proposed a BFD byzantine fault tolerant protocol that was only responsible for ordering, but execution happened in a different committee. But in terms of the idea of separating consensus from execution in blockchains, there were some early discussions about it, but no one really kind of formulated a system like laser ledger, where the only purpose of the system was ordering. People had always talked about it. And even before Ethereum, if you think about before Ethereum existed, we had Mastercoin, and Mastercoin, which is the system that tether uses on bitcoin. That's basically a roll up on bitcoin, technically, that uses bitcoin for ordering but not for execution.
00:08:23.710 - 00:08:36.274, Speaker A: In that case. This is sort of a side question, but what part of the bitcoin architecture is it using to actually do that? Is it like the memo field? What can you use in bitcoin to create a roll up?
00:08:36.472 - 00:09:11.434, Speaker B: Yeah, so it uses this bitcoin opcode called op return. And so I think in that opcode you can basically have 40 bytes, or I think it used to be 80 bytes of arbitrary data. But there's many different ways of including random arbitrary data in bitcoin transactions. I think actually the way that Mastercoin did it was you send it to a fake address and that address encodes the data that you want to include. Nowadays, it's completely different. Nowadays you have something called taproot input scripts, and you can include extremely big files, like entire jpegs on the bitcoin blockchain now.
00:09:11.552 - 00:09:29.134, Speaker A: Cool. So then you were kind of working on that, the sharding, like basically what Ethereum became. Do you feel like, was it influenced by your work at all? Or do you think that they kind of continued on their path and you just sort of like split off to form Celestia? Or do you think there was. Yeah. Was there some sort of takeaway?
00:09:29.262 - 00:09:41.218, Speaker B: It's hard to say if it was directly influenced, but what I do know is that the Ethereum roll up centric roadmap as it is now, was basically what we're building at laser ledger a year before Ethereum switched to a roll up centric roadmap.
00:09:41.314 - 00:10:01.802, Speaker A: Got it. Because, yeah, originally there was this idea that there was going to be a consensus part, there was going to be execution sharded, but it was like in the actual client software, all run by the exact same validators. The roll up concept was introduced. I mean, actually, I don't remember exactly the year. 2019, maybe.
00:10:01.936 - 00:10:04.602, Speaker B: I think 2019 or maybe late 2018.
00:10:04.746 - 00:10:40.934, Speaker A: Yeah. And I do remember that blog post from Vitalik when he kind of laid out the roll up centric future. I know in my last episode with Ismail, we talked about how Celestia is this purposely made blockchain kind of l one. It's made very much for that roll up world. So it kind of cuts out a lot of the other stuff that maybe Ethereum or other Ethereum like blockchains have and just focuses on being kind of the perfect center for that roll up. Do you call it like a hub and spoke? It's kind of like a hub and spoke. Right.
00:10:41.132 - 00:10:57.390, Speaker B: Well, we didn't say it's a hub because we don't have a settlement layer so the roll ups don't bridge to it, but they all use it as a. We call it a shared da layer. So it's like all the roll ups use it as a shared da layer. You can call it a hub in that sense, but it's not a hub in the sense of it, like the cosmos hub, for example.
00:10:57.460 - 00:11:10.798, Speaker A: I see. But then let's think about that. Let's maybe explore it for our listeners. So are you thinking about the other blockchains as roll ups, or are they actually standalone blockchains? What do they have and what do they not have in order to actually work with Celestia?
00:11:10.894 - 00:11:15.022, Speaker B: So they are roll ups, but they're not l two s. I see. Celestia.
00:11:15.086 - 00:11:16.546, Speaker A: Why not? Tell me why.
00:11:16.648 - 00:11:22.710, Speaker B: Because they don't have a bridge with Celestia that you can't transfer assets from the celestia chain itself.
00:11:22.780 - 00:11:23.366, Speaker A: I see.
00:11:23.468 - 00:11:32.602, Speaker B: In a trust minimized way to the roll ups. So in that sense, we don't call them l two s because they're not really like baby chains. They don't really extend the l one.
00:11:32.656 - 00:11:33.290, Speaker A: I got it.
00:11:33.360 - 00:11:38.022, Speaker B: They inherit security from the l one, but they don't necessarily extend the l one's functionality.
00:11:38.086 - 00:11:44.842, Speaker A: Are they just outsourcing consensus, then? Like, they are just pure execution and Celestia is pure consensus?
00:11:44.986 - 00:11:59.294, Speaker B: Yeah, they basically outsource consensus and data availability to Celestia. They have very similar properties to normal layer one blockchains. The only difference is that they outsource their consensus and data availability to Celestia.
00:11:59.422 - 00:12:07.198, Speaker A: And you did just say that you're actually working on kind of ordering. Does Celestia then act a little bit like the sequencer of roll ups?
00:12:07.294 - 00:12:17.282, Speaker B: It can do in the sense that Celestia definitely orders the roll ups blocks, but it does not mean that roll ups can't also have their own sequencer.
00:12:17.346 - 00:12:17.686, Speaker A: I see.
00:12:17.708 - 00:12:28.330, Speaker B: If the roll up wants to capture its own meV, but the roll up can choose Celestia, order the transactions inside the blocks. But then that means Celestia will capture the.
00:12:28.480 - 00:12:37.422, Speaker A: Oh, would there be, like, a searcher community in something like Celestia, or is this the validators? It's automatically kind of built into the system.
00:12:37.556 - 00:13:15.318, Speaker B: I mean, there's a lot of interesting questions around how MEV law would look like in a modular stack, and it depends on where the MEV is captured. I think it's most likely that roll ups would want to capture their own MeV and not leak the MeV to Celestia. So it's likely that there's going to be MEV within each roll up, and the sequencer of the roll up will capture its own MeV. But there could also be some MeV on the actual data layer itself if you constructed the roll up so that it has like a decentralized set of sequences, and the roll up could order the blocks, for example, within the data layer.
00:13:15.414 - 00:13:38.434, Speaker A: So I'm sort of picturing like. So Celestia is there, it's doing the consensus and data availability for these different chains. They are standalone chains. They look like regular blockchains. But then how are they connected to each other? Would they be connected to each other? Is that something that's kind of encouraged? Do you have any tooling that helps that, or is that sort of up to them? They can use any bridging that they want.
00:13:38.552 - 00:14:25.722, Speaker B: Yeah. So when we talk about interoperability and bridging, that's usually something that is usually a concern of the execution environment. And so it's the roll ups that can decide how they want to bridge with each other. But what Celestia enables them at least to do is to have some guarantee of shared security. So, like, for example, if you had two roll ups and they wanted to communicate with each other in a trust minimized way and verify each other's fraud proofs or ZK proofs, they would also need to verify the data availability of the respective roll up. And in order to do that, ideally they need a shared data availability layer. And so that's what Celestia allows them to do if they wanted to, they provide shared security.
00:14:25.722 - 00:14:32.226, Speaker B: And that shared security will enable more seamless bridging if the roll ups wanted to do that.
00:14:32.328 - 00:14:44.818, Speaker A: But like in the case of Ethereum, you are kind of doing the same action. Let's kind of dive even deeper into the differences. Like, so what does Ethereum actually provide that maybe Celestia doesn't, and vice versa.
00:14:44.914 - 00:15:39.290, Speaker B: The main difference between Ethereum and Celestia is that Ethereum kind of started out with a non roll up centric roadmap where they already had the Ethereum virtual machine enshrined into the chain itself. So they already had like a smart contract environment on the chain. And now that they want to go to a roll up centric roadmap, you have the kind of existing baggage of all of the state of the Ethereum virtual machine. Whereas in Celestia, we don't have any smart contract platform enshrined into the data availability layer itself. So what that allows is if you want to create a sovereign roll up, for example, which we can discuss later. It allows roll ups to be more overhead minimized because the roll ups no longer have to take an interest in their validity of everyone else's smart contract on this enshrined execution environment. And that makes it more overhead minimized.
00:15:39.290 - 00:16:16.610, Speaker B: But also the other big difference is that Celestia does not have what we call a settlement layer. Because in Ethereum roll ups, Ethereum roll ups post their fraud or validity proofs and their headers to the Ethereum chain. And that allows for the roll ups to transfer assets to each other through the Ethereum chain. But in Celestia we don't have that enshrined into the DA layer. Instead, what we expect is that we expect people to create their own settlement layers or networks even as roll ups potentially on Celestia.
00:16:17.110 - 00:16:47.566, Speaker A: This I need to understand. So in the previous example, in the Ethereum example, you have roll ups who are like, I'm going to use the ZK one because we talked about that more on the show. So you've created a proof, you have a verifier on chain as a smart contract that in a lot of ways ensures that the data in the rollup is also accurate. But you're sort of saying that you wouldn't necessarily have, you don't have an execution layer where you can deploy a verifier, but can they put some sort of verifier into it? I want to explore this a little more.
00:16:47.668 - 00:17:24.278, Speaker B: Yeah. So the key thing to realize is that an Ethereum roll up contract or an Ethereum roll up bridge fundamentally is just a blockchain like client. Because what it does, it receives block headers for that roll up chain and it can verify ZK proofs that assert to the validity of that roll up header. But you don't have to run that light client as a smart contract on chain. You can just run it as a normal light client locally on your machine. Like if you consider, let's take Mina for example, Mina is a ZK chain. It's not a ZK roll up, it's just a ZK chain.
00:17:24.278 - 00:17:48.138, Speaker B: And it has light clients that are actual nodes that people can run on the devices. And the same thing could work with a ZK roll up. On Celestia. The ZK proofs could be distributed peer to peer to the actual nodes that are run by the users of that roll up. And they can be verified directly by those nodes rather than necessarily by an on chain contract.
00:17:48.234 - 00:18:14.860, Speaker A: I'm trying to picture. So like you're saying they don't need this verifier as contract, but rather the light client, sort of the compressed version. And it's like, where is the snark if you're using ZK? In this case, are we using snark for recursion and compression? And so that's what you, the output is sort of like this nice thing that can fit in a light client, and then it's never verified. It's just sort of assumed to be correct.
00:18:15.550 - 00:18:28.554, Speaker B: I mean, the stock is distributed with the block header of that roll up. And then when any node receives a block header, they have to first of all verify that stock before they accept that header as valid.
00:18:28.602 - 00:18:39.118, Speaker A: But who's looking at the light client? Maybe this is going to help me. Is it the chain itself checking its own light client, or is it like external chains checking those light clients?
00:18:39.294 - 00:18:51.250, Speaker B: Light clients are run by the users of the chain. Anyone for example, running a wallet or for example service providers like exchanges or shops or payment merchants and so on and so forth.
00:18:51.330 - 00:18:55.234, Speaker A: All right, so it would be like a DAP user would basically be doing that. Or like a Dap.
00:18:55.282 - 00:18:55.590, Speaker B: Exactly.
00:18:55.660 - 00:18:56.194, Speaker A: Developer.
00:18:56.242 - 00:19:04.870, Speaker B: Okay, so it's just like how in Ethereum, who's running the nodes for Ethereum? It's the same answer as who's running the slight clients for DCK roll ups.
00:19:04.950 - 00:19:12.038, Speaker A: Okay, but do the different chains that have locked in and used this, do they ever verify other chains like clients?
00:19:12.134 - 00:19:16.798, Speaker B: Yeah, they can do if they want to have a trust minimized bridge with each other.
00:19:16.964 - 00:19:21.934, Speaker A: Do you still call these roll ups ZK roll ups though? In this case, yeah.
00:19:22.052 - 00:19:23.642, Speaker B: Why wouldn't they be? Zk roll ups.
00:19:23.706 - 00:19:31.694, Speaker A: Zk roll up, to me, always had this Ethereum context of proof of verifier verifier contract. But I guess it still uses snarks.
00:19:31.742 - 00:20:42.598, Speaker B: So I guess this is a good segue into sovereign roll ups or the different types of roll ups. Okay, so that's why, as I said earlier, we don't call these roll ups l two s of Celestia because they're not bridging with Celestia. We call them just roll ups or roll up chains, but they're specifically sovereign roll up chains because they're not ltus. And what that means is that if you consider a Ethereum roll up, an Ethereum roll up enshrines Ethereum as its canonical bridge, or it enshrines Ethereum as like a hard coded settlement layer or bridge to it. And what that means is that effectively it's the Ethereum chain that defines what is the valid roll up chain. It defines what is the valid fork choice rule of that roll up chain based on what that contract says. But in Celestia, we created this idea of sovereign roll ups, and a sovereign roll up is sovereign in the sense that it's not some on chain smart contract that defines the correct chain, but it's the community of that roll up that defines the correct chain.
00:20:42.598 - 00:21:12.590, Speaker B: Similar to how an l one would work. Like when you bootstrap an l one, or when you hard fork at l one. It's that community that defines the protocol rules, or the correct chain of that l one. And so it's similar with a roll up. You can imagine a sovereign roll up to be just like an l one chain. The protocol rules are defined by the community, and it's enforced by the nodes of that roll up, not by a smart contract. And so that's why the fraud and ZK proofs are distributed peer to peer.
00:21:12.750 - 00:21:44.414, Speaker A: When you talk about that in the case, can we kind of walk through what an example of one of these fork choice rules would look like on Ethereum and then what it would look like on Celestia? I think in the past we have covered this once where it's like, say you have one of these applications that are so important to the ecosystem, and they have a lot of collateral and they have everything that lives on it. Say those live on a roll up, and there's some sort of problem or fork that needs to happen. What would happen today? How would they not have control today?
00:21:44.532 - 00:22:30.950, Speaker B: Yeah, so it all kind of boils down to what we consider the upgradability of a roll up to be like in this traditional thinking for an Ethereum roll up, it was considered that, well, if a roll up has upgrade keys, then it's not really a true roll up from a security model perspective, because the whole point of an Ethereum roll up is that you have a trust minimized bridge between Ethereum and the roll up. And that means that there's no party or set of parties that can steal people's funds. Then you have the very difficult question, which is, well, how do you upgrade a roll up if there's a bug, or if you want to add new features or something like that? If that roll up did not have any upgrade mechanism, then the only way to upgrade it would be if you hard forked Ethereum itself.
00:22:31.040 - 00:22:33.370, Speaker A: Whoa. So, like totally impossible?
00:22:33.450 - 00:23:05.894, Speaker B: Okay, yeah, but of course that's not practical. So even Ethereum roll ups today have some kind of upgrade path. The current thinking, if I understand correctly, is that some roll ups on Ethereum, what they want to do is they want to have some upgrade committee, like an upgrade multisig, that can upgrade the chain. But I think that what they plan to do is that the upgrade only happens after a month or something, and that gives users a chance to exit the chain into the l one, like.
00:23:05.932 - 00:23:08.518, Speaker A: Bridge their funds back off it, I guess.
00:23:08.684 - 00:24:00.466, Speaker B: Exactly. And so what we've said is you might as well just be a sovereign roll up if you want your upgrade path to be community led. Because I guess the difference is that many people, including myself, we don't believe in token holder governance or token holder voting, especially for upgrades. Like if you consider Ethereum, for example, how are eips approved? Or how is Ethereum upgraded? It's not some multi Sig or token holder governance, it's the community or it's the ecosystem. Like if the ethereum developers or some whale tried to push some controversial eip that stole everyone's money. Even if the developer of Geth wanted to do that, it's very likely that exchanges, for example, would not download or use that patch. Yeah, and so you can apply a similar kind of upgrade mechanism for roll ups.
00:24:00.466 - 00:24:09.830, Speaker B: If it's a sovereign roll up, you don't rely on token holder governance, you don't rely on, on chain governance or multi stake, you just rely on hard forks as an upgrade mechanism.
00:24:09.910 - 00:24:32.946, Speaker A: And yet the hard fork here in this case like consensus of celestia is not altered. It's not like the chain is changed. Tell me how you would actually hard fork in this case, right? I mean, I'm assuming Celestia, like the validator set of Celestia is not like obeying one of these roll ups, fork changes.
00:24:33.128 - 00:24:58.250, Speaker B: Yeah. So that's kind of like the beauty of sovereign roll ups. You don't have to hard fork Celestia or the DA layer to hard fork your roll up, to hard fork your roll up. You just need your roll up community to agree. We're going to change the protocol rules in this way. And then everyone has to download the same patch and upgrade their node software to change their protocol rules in the same way.
00:24:58.320 - 00:25:03.766, Speaker A: Would you then have to create new light clients on? Would you just sort of like wipe the old one and make a new one?
00:25:03.888 - 00:25:21.810, Speaker B: It would just make an upgrade to the code. Like let's say you wanted to introduce a new transaction type, for example, that would basically be changing the kind of state machine of the roll up. And then that would just be like, it could be like a few lines of code that change in the consensus critical part of the roll up.
00:25:21.880 - 00:25:22.354, Speaker A: Interesting.
00:25:22.472 - 00:25:52.766, Speaker B: And a good example is the Dow hack. Back a few years ago, when Ethereum was starting out, there was this project called the Dow, and people invested $150,000,000 into it, which at the time was 5% of the Ethereum supply. And then it got hacked and some hacker stole all that money. And then the Ethereum community decided that they want a hard fork to undo the hack. Yeah, because 5% is way too much to be stolen in one go.
00:25:52.868 - 00:25:55.066, Speaker A: It's enough to wreck a new network.
00:25:55.178 - 00:26:14.418, Speaker B: Exactly. And the way they did that is they hard forked Ethereum chain. And the hard fork basically said at certain height, we're going to move all the stolen funds into this new contract. And so my question is, I think roll ups or roll up chains should have the same power to do the.
00:26:14.424 - 00:26:40.890, Speaker A: Same thing, because they could also deploy things that have bugs, or there could also be some sort of application on top of that that's gathered so much of the wealth and value of that roll up that gets wrecked and needs to be upgraded. Yeah, I mean, it sounds like though, the roll ups do have mitigations. You said most of them are upgradable or they have committees. When you say community, how would the community of a sovereign chain look different from the community of a roll up?
00:26:40.960 - 00:27:59.138, Speaker B: The main difference is between do you want the roll up to have a token holder base or multi sig upgrade mechanism, or do you want the upgrade mechanism to be based on more ad hoc social consensus? There's many people, including myself, that are not in favor of token holder governance or consensus. Because to me, the whole point of blockchains is that it's a trust minimized protocol, where given a certain set of rules, no one can violate those rules, even if there's a dishonest majority of people in that ecosystem. In other words, the only way that you could change the rules or steal someone's money or seize assets is if everyone in the system agrees, or if the vast majority of people in the ecosystem agrees to those new rules. But if you have a system where that's based on token holder governance or a multisig, you're basically saying that actually the state transition function of that chain is not some specific rules, but the state transition function of this chain is what that committee says is fine, or what these whales say is fine. Whereas to me, the most important part of a blockchain is actually its social consensus. Like layer zero of a blockchain is social consensus. What gives a blockchain authority? Why the bitcoin chain has a BTC ticker.
00:27:59.138 - 00:28:09.382, Speaker B: And why the Ethereum chain has the eth ticker is due to social consensus. The social community of that chain agrees. That is the rules of that chain.
00:28:09.526 - 00:28:25.146, Speaker A: What happens, though, in the example you gave of a sovereign chain to the other part? What do they call it? The orphan chain, the one that's left behind? Does that still exist? Can that still interact with Celestia?
00:28:25.258 - 00:28:31.082, Speaker B: It can do like Ethereum classic, for example. Like Ethereum classic still existed after Ethereum.
00:28:31.146 - 00:28:39.730, Speaker A: Hard forked, but it was completely separated. So it was just like its own thing. But in this case, because they're still using the celestial consensus, what happens to it?
00:28:39.800 - 00:28:56.050, Speaker B: Pretty much it becomes its own kind of hard fork or chain, but it's the same thing as ethereum classic. The chain still exists, or at least the social consensus of the new chain does not recognize the old chain as the source of truth. The source of truth becomes the new chain.
00:28:56.130 - 00:28:58.018, Speaker A: Or you actually just get two chains.
00:28:58.194 - 00:29:07.334, Speaker B: Yeah, you definitely get two chains. But what chain do all the exchanges use? What changes do all the wallets use? What chain gets the same ticker and so on and so forth.
00:29:07.382 - 00:29:28.158, Speaker A: I see. I want to explore a little bit not only the data availability part of this, but also sort of the querying for data, because this was something where I understand there's like a very specific architecture. So these sovereign chains or roll up chains, actually. Do you call all the roll up sovereign chains on Celestia?
00:29:28.254 - 00:29:44.390, Speaker B: So all the chains that are directly on Celestia are sovereign chains. Okay, but you can have non sovereign chains on top of sovereign chains, like l three s. You can create a sovereign settlemental roll up on Celestia that has a non sovereign chain that enshrines it.
00:29:44.540 - 00:30:02.506, Speaker A: I see. Okay. But let's talk about, let's go a little further into what the data availability side of things are. One of the things I understand about Celestia as being unique is this ability to kind of query faster or easier or so, like. Yeah, tell us a little bit about that. How does that work? Yeah.
00:30:02.528 - 00:30:48.010, Speaker B: So that relates to the sort of data application model of celestia. The whole point of celestia is that it's supposed to be a very simplified data layer. Like, the only thing it does is it lets developers post arbitrary data to it, that celestial orders and includes in a block, and celestia commits that data in a Merkel tree, and then you get a Merkel route, and developers can use that Merkel route to authenticate certain data in celestia. But the way that we do that is we have this concept of namespaces. And namespaces are kind of like, you can kind of think of them as radio channels. If you've got a walkie talkie, for example, you might have different channels in that walkie talkie. Or you can also think of them as like Twitter hashtags.
00:30:48.010 - 00:30:54.890, Speaker B: So when you create a roll up or you create an application, you give the application a certain namespace.
00:30:55.050 - 00:31:04.846, Speaker A: Is it like a field? Is it sort of like a field? And you give that particular roll up a number or something? That's like an identifier.
00:31:05.038 - 00:31:07.634, Speaker B: Yeah, it's just an eight byte integer right now.
00:31:07.672 - 00:31:08.210, Speaker A: Okay?
00:31:08.360 - 00:31:25.906, Speaker B: The developer just chooses an arbitrary integer and they can post arbitrary data to that namespace. And then other people can query this lecture blockchain to say, hey, can you please give me all the data? Can you stream to me all the data that has been posted to this namespace?
00:31:26.018 - 00:31:40.314, Speaker A: And this is sort of a way to identify this particular chain versus other chains. Does this just make searching for data faster? Because you can still kind of do this on Ethereum, right? It's just that it's like clunky and it's mixed up with everything else.
00:31:40.512 - 00:32:12.514, Speaker B: So what it allows you to do is because we use what's called a namespace Merkel tree, it allows you to query a node in Celestia for a specific namespace. And then that node can give you a Merkel proof to say, here's the data in that namespace. And you will know that that response is sound and complete in the sense that you will know that because it's a namespace Merkle tree, you will know that that is all of the data in that block. They haven't emitted any data in that namespace.
00:32:12.642 - 00:32:13.382, Speaker A: I see, okay.
00:32:13.436 - 00:32:30.774, Speaker B: And so it's kind of like an authenticated or trust minimized way of querying other nodes to give you all the data in that namespace in a trust minimized way without you having to download the entire chain yourself. You can run a light node. Your roll up sequencer can just be a selection light node.
00:32:30.822 - 00:32:35.262, Speaker A: So does that mean that it's faster or more efficient? Like what's the comparison then?
00:32:35.396 - 00:33:04.338, Speaker B: The main difference, that it's more trust minimized in the sense that if you were to do this on Ethereum and you were running Ethereum light client, and you just ask another full node to give you all of the data for this smart contract, for example, you would have to trust that full node, okay, to give you the complete set of the data or at least you would have to trust the validator set of Ethereum to give you that complete set of data. It's not like the main big thing of selectji, but it's like a little nice feature to make it easier for developers.
00:33:04.434 - 00:33:08.902, Speaker A: Is it possible for the node to give you the wrong data back on the Ethereum case?
00:33:09.036 - 00:33:14.762, Speaker B: Would that be it can't give you the wrong data, but it might not give you the full set of data. It might emit data.
00:33:14.896 - 00:33:33.294, Speaker A: Does it also help with looking at history of data, the way that you've built this namespace Merkel trees? This is the thing I'm trying to figure out is does it actually enable something new or does it just make for more efficient query? Does it just make it easier for light clients to do it?
00:33:33.332 - 00:33:37.458, Speaker B: It's more of just like a nice developer ux type of thing.
00:33:37.544 - 00:33:46.890, Speaker A: Okay. And I guess that means like building applications that rely on it all of a sudden becomes simpler because you're not trying to parse through all this stuff and trust all of these nodes.
00:33:46.990 - 00:34:20.634, Speaker B: Yeah. If you go on our docs, we have a very straightforward data availability API. You can submit data to a namespace and you can receive data from a namespace, you can search for data in a namespace, and those are just like two basic API endpoints. But behind the scenes, the developer does not have to worry about what's happening behind the scenes, but behind the scenes that you know that it's happening in a trust in Myers way. It's not connecting to infura or something like that. It's not connecting to some centralized index or something like that. It's connecting directly to the Celestia peer to peer network.
00:34:20.634 - 00:34:44.518, Speaker B: And that's kind of like a very big aspect of what Celestia is about. It's like a very big value of Celestia that users should be first class citizens of the network. They shouldn't have to connect it in Fura or some centralized API to get data out of the blockchain. They should be able to just connect directly to the peer to peer network of that blockchain and get data about it in a trust minimized, authenticated way.
00:34:44.604 - 00:35:21.794, Speaker A: When you mentioned sort of these light client constructions, it definitely makes me think a little bit about some of these new projects that have emerged. They're sometimes acting as like, I know they don't call themselves bridging projects, they're not really bridge projects, but they are like the light client that could connect two chains to one another. And the projects that come to mind here, like succinct or Herodotus CKIBC axiom, there's a bunch of them. So they've found ways to create these light client constructions. Do you see yourselves working with projects like that? Are they competing at all with you?
00:35:21.912 - 00:36:31.858, Speaker B: So this projects are generally operating under a slightly different security model, because if I understand correctly, what people typically mean by a ZKibC or ZK bridge. Is that what they're proving in ZK? What they're proving is not the state validity of the counterparty chain, but what they're proving is that the consensus of the counterparty chain, they're proving that some counterparty chain was signed. The headers of it were signed by two thirds of the validator set, for example. That's kind of like a very helpful thing to do, but it's not as secure or as trust minimized as a normal ZK roll up bridge. Because typical, like a normal ZK roll up bridge, like a bridge between, let's say, ZK sync and Ethereum, it verifies not just that the header was signed by the correct sequencer, it also verifies that every single transaction in that roll up was actually correct inside the ZK proving system. But when people talk about things like ZKipC, they don't mean that. They typically mean proving the headers were signed by the correct ballot, et cetera.
00:36:31.858 - 00:37:57.010, Speaker B: That's a very different thing, and it's helpful, but it's not what we're trying to build, because we don't consider committee based bridging to be scalable or secure, because the way that kind of like Celestia started out as being in a cosmos ecosystem is that Cosmos is a very interesting idea, because the idea of it is that everyone has their own chain with their own validator set, and everyone communicates with each other using IBC. And that's great, but it's not scalably secure because there's no shared security. If we imagine a world where there's millions of cosmos chains, which is very possible if you have millions of app chains, it's very unlikely that all of those chains will have a secure validator set. And IBC assumes that the chains that you're bridging to have an honest majority in their validator set because the validator set could lie and insert invalid stage transitions. So that's not a scalable kind of shared security mechanism. It's not shared security at all. So what Celestia tries to do is it tries to kind of scale the cosmos vision of having millions of chains but the key insight of Celestia is to imagine a world that does not rely on committee based bridging assumptions or committee based security assumptions, because we don't think that committees are scalable to millions or even thousands of chains.
00:37:57.010 - 00:38:13.718, Speaker B: Instead, we try to replace committee based assumptions with ZK or fraud proof based assumptions. Instead of relying on a committee to tell you that the state is correct, you can actually check that the state is correct yourself using fraud proofs or ZK proofs.
00:38:13.894 - 00:38:23.578, Speaker A: Well, I do think some of these are actually doing, aren't they doing something like that, basically taking one chain's full node and then compressing it into a likeline on another chain.
00:38:23.674 - 00:38:44.526, Speaker B: Yeah, I think at least some projects are definitely looking at that. I know, like risk zero. There's a lot of projects that are associated or adjacent to risk zero that are looking at that. I think there's people trying to create a bitcoin full node as a ZK program, for example in startware, for example, actually using Cairo.
00:38:44.638 - 00:39:02.410, Speaker A: Interesting. And do you think you could actually use like one of those projects that I said before where they're taking a full node, creating a lite client out of it? Would they be able to use you as the data availability side? Would that be sort of complementary in some way?
00:39:02.480 - 00:39:44.358, Speaker B: Yeah, definitely. And that's something that we're actually looking at ourselves. The idea that you could compile any chain into, let's say risk zero or Cairo in the future, you could turn any chain into a ZK roll up in theory. And yeah, one thing I was looking at particularly for example, is there's like a lot of efforts or some effort in the bitcoin community to try to zkify the bitcoin state machine. And then I think it was something like they wanted to. If you had a Zk opcode to bitcoin, you could have like bitcoin l two s, for example. And I was also interested to see how you would see if Celestia could be used as an off chain database layer to bitcoin l two s, for example.
00:39:44.524 - 00:39:46.646, Speaker A: Wild. But would that ever happen?
00:39:46.748 - 00:40:21.666, Speaker B: I mean, it's hard to say. As I said, the bitcoin community or the bitcoin developers are very conservative in terms of what they add. But actually I do think they're becoming kind of recently more liberal. Like the fact that you can add jpegs to bitcoin blockchain now is kind of wild. That was like back in 2013, people were discussing using bitcoin for non financial applications like DNS, and the bitcoin developers like Gregory Maxwell were extremely pissed off at that kind of idea. They were kind of, like, very sort.
00:40:21.688 - 00:40:24.158, Speaker A: Of philosophically against it almost, eh?
00:40:24.254 - 00:40:47.338, Speaker B: Yeah. It was very much like, you should only use bitcoin for financial transactions. And some developers are still like that, like Luke Jr. But there's developers like Rose beef who are looking at bitcoin, all twos. So I do think there's a potential future where bitcoin would add a ZK opcode. Wow. It's possible, but not, like, in the next year, maybe in the next few years.
00:40:47.424 - 00:41:15.262, Speaker A: Cool. Do you kind of imagine the case where Celestia is the data availability hub? I know you're not, like, there's no token settlement, but there's the data availability and the ability to query history of state transitions, stuff like that. Could you also imagine a separate hub that would be for settlement instead of this current mesh of bridges that would maybe even work in tandem with Celestia?
00:41:15.406 - 00:41:49.674, Speaker B: Yeah, definitely. And I see people potentially creating settlement layers on top of celestia because, as I said, we don't enshrine a settlement layer. We don't enshrine a bridging hub to celestia. We try to make celestia as minimal as possible, but that doesn't mean that someone could create a bridging hub on top of celestia that other roll ups wish to. And, for example, there's one project doing that, for example, called dimension. They're a kind of like a cosmos based settlement layer for Cosmos roll ups that uses celestia as a data availability layer.
00:41:49.802 - 00:41:52.942, Speaker A: Cool. So it's sort of, like, in the works?
00:41:53.076 - 00:42:29.878, Speaker B: Yeah, for sure. And there's kind of a lot of debate about whether Celestia should enshrine a settlement layer or not. But I think my current thinking is that it's nice to have a data verbatim layer that's neutral to settlement layers so that people can innovate with their own settlement layers. That's kind of my current thinking, is that Celestia should be credibly neutral, but that doesn't mean that in the future, the celestial community could decide to enshrine a settlement layer, for example, by using interchange security, you could have, like, a shared security layer as a consumer chain to this listed chain.
00:42:29.974 - 00:42:50.258, Speaker A: Cool. I was actually going to ask you a little bit about IBC and then interchange security, because, in a way, the interchange security model, which I don't think we've talked about that much on the show, but it's the idea of the hub validator set being almost like loaned out to these sort of child chains, I guess. These are really kind of very much connected. What did you just call them? You had a name for them.
00:42:50.424 - 00:42:51.246, Speaker B: Consumer chains.
00:42:51.278 - 00:43:03.830, Speaker A: Consumer chains. So you could sort of see those consumer chains then using Celestia. But would they still be using the hub in that case as the settlement? Actually don't know if the settlement happens through the hub, I'm assuming.
00:43:04.410 - 00:43:17.782, Speaker B: So I'm not saying that consumer chains should use celestia. I'm just saying in the future, if the community of Celestia wanted to enshrine a settlement layer to celestia, that settlement layer could be implemented as a consumer chain to Celestia.
00:43:17.846 - 00:43:20.986, Speaker A: I see. It would look like that it would sort of follow that model. Okay.
00:43:21.088 - 00:43:36.910, Speaker B: Yeah. But in terms of whether consumer chains should use celestia, I would say that's not something that we want to do, because the whole point of roll ups is to provide a more scalable, shared security mechanism than interchange security.
00:43:36.980 - 00:43:41.506, Speaker A: So, like, in this case, the hub is acting as the consensus layer anyway, so you don't really need this.
00:43:41.608 - 00:43:42.450, Speaker B: Yeah, exactly.
00:43:42.600 - 00:43:56.950, Speaker A: I have a little bit of a question on this is actually, I should have probably asked this earlier, but, like, clients right now, I'm only hearing it going one way, but is there, like, a celestial light client on each of the chains? On the chains that are hooked up to it?
00:43:57.100 - 00:44:01.998, Speaker B: Yeah. So if you're a roll up light node, you also need to run a celestial light node.
00:44:02.034 - 00:44:02.378, Speaker A: Okay.
00:44:02.464 - 00:45:10.590, Speaker B: And that's a big reason why we care a lot about light nodes, because we don't want everyone to have to run a celestial full node and follow every single other roll up, even though they only care about one roll up or a few roll ups. But in terms of lesser light nodes, we actually recently just announced Rollkit, which is a modular roll up framework and used to be formally known as Optimint or roll mint. But what rollkit, it does, it's basically a modular roll up framework that can be used as a replacement for tendermint to launch new Cosmos chains. So let's say you wanted to launch a new Cosmos chain, but you don't want to bootstrap your own validator network. You want to launch a Cosmos chain as a roll up. You can swap out tendermint for Rollkit, and Rollkit provides you a modular sequencing software for your rollup, and it also naturally integrates with Celestia as a DA and the Celestia light client software. But the kind of, like, bigger vision for Rollkit is that it's supposed to be a kind of public good that's neutral from Celestia.
00:45:10.590 - 00:45:57.854, Speaker B: And that's why, even though we started working on roll kit from 2021, because at the time, there was no general purpose roll up software, so we had to build it. Like if you wanted to realize the celestial vision, we had to build something like rocket, because at the time, the only roll up software that existed was software that was extremely specific to that roll up team. I don't know, like ZK sync, for example, or optimism's old stack. And the whole point of Celestia is that you can create your own chain. The whole point of Celestia is that you don't use someone else's roll up, but you create your own roll up. So that's why we created Rollkit. But now, more recently, now there's other people creating general purpose roll up software, like optimism's new bedrock infrastructure, for example.
00:45:57.854 - 00:46:23.250, Speaker B: So for that reason, we decided to kind of split out rollkit into its own project that is neutral and independent from Celestia, because Celestia should be a neutral DA layer to all roll up software. And on the flip side, that also means that rollkit is neutral to what DA layer it supports. So you can actually add other DA layers to rollkit, not just Celestia.
00:46:23.330 - 00:46:23.622, Speaker A: Cool.
00:46:23.676 - 00:46:26.834, Speaker B: Because we have a modular DA interface.
00:46:26.962 - 00:46:34.374, Speaker A: Was it built together with sort of EVM centric rollups as well? So is it easy to work with an EVM as well as other systems?
00:46:34.502 - 00:46:57.270, Speaker B: It was kind of like built very specific to the ABCI interface that tenement exposes. So it's like very cosmos centric. But that being said, that's not the end vision. The end vision is that it should be able to support any kind of execution environment. For example, we have ethermint running on Rocket, so you can get an EVM chain running on rocket.
00:46:57.290 - 00:46:57.842, Speaker A: I see.
00:46:57.976 - 00:47:13.030, Speaker B: But that's not ideal either. Ideally, we want it even more abstract than that. We want it possible to run execution layer like guest, for example, without the Cosmos SDK directly on roll kit.
00:47:13.690 - 00:47:24.650, Speaker A: And I guess in that role kit, going back to that earlier question, do you actually have the Celestia lite client or, like a like client? And when you say da, I think you're saying data availability level layer, right?
00:47:24.720 - 00:47:25.002, Speaker B: Yeah.
00:47:25.056 - 00:47:32.902, Speaker A: So do you have that, like, client already kind of built into this kit, or to this, like, is it an. What? It's a framework.
00:47:33.046 - 00:47:48.606, Speaker B: Yeah, we describe it as a like we were debating, actually. What is it really? Is it SDK? Is it a framework? No one knows, really. We just decided to settle on a framework template. Template? Yeah. I mean, optimism calls bedrock a template or a blueprint.
00:47:48.718 - 00:47:49.138, Speaker A: Okay.
00:47:49.224 - 00:48:25.598, Speaker B: But roll kit doesn't embed the celestial like client directly, but it can interface with the API endpoint of a local celestial like client. So the idea is like you run a celestial light client locally and then you run a roll kit like client locally, and roll kit can communicate with that celestial light client via its API or RPC endpoint. And you can also actually add other DLA areas to rollkit. As I said, it's not like it's supposed to be neutral from suggestion that you can add other dlas to bulk it via its interface. You can add bitcoin, for example. Cool.
00:48:25.764 - 00:48:53.570, Speaker A: I want to kind of just explore even a bit deeper that two way light client situation in the context of the namespaces. So like, if you have the sovereign chain, the light client on Celestia, the sovereign chain itself is also running a light client of Celestia. Is it only pulling into that light client things that match the namespace that they've chosen? Does that mean it's even more sort of streamlined and you have none of the other junk?
00:48:53.730 - 00:49:00.394, Speaker B: Yeah, exactly. So when you launch your own roll kit roll up, you define a namespace identifier for your roll up.
00:49:00.432 - 00:49:00.826, Speaker A: Okay.
00:49:00.928 - 00:49:31.954, Speaker B: And then the roll kit light client will query what's called like the API endpoint on the celestial light node, where what the API endpoint does is you can request from the light node to get what's called get data by namespace for a specific block height. So you can query block heights for data for this specific namespace. And behind the scenes, the celestial light node will connect to the PHP network and will query the nodes around it for only the data for your roll up.
00:49:31.992 - 00:49:32.290, Speaker A: Nice.
00:49:32.360 - 00:49:40.626, Speaker B: And it doesn't have to connect in Fiorbra or any kind of centralized service or anything like that. This all happens in a decentralized way, peer to peer.
00:49:40.738 - 00:49:51.690, Speaker A: And I know I keep asking you this, but does this mean that it, does it faster, or is it just like, is the actual like client itself even smaller?
00:49:52.510 - 00:50:10.122, Speaker B: It depends what you mean by faster. I wouldn't say it's necessarily faster than a centralized service. It's not so much about the speed, it's more about the fact that it's more decentralized and more trust minimized. You don't have to rely on a trusted third party to tell you what your data is. You can just ask the network directly.
00:50:10.186 - 00:50:10.606, Speaker A: Cool.
00:50:10.708 - 00:50:49.654, Speaker B: And that's actually kind of like one of my biggest pet peeves about the blockchain ecosystem post Ethereum. Actually, people think light clients are really hard, but bitcoin has extremely good light client support and I think that's something that people miss if you download a bitcoin light client on Android. The most popular bitcoin wallet on Android is called bitcoin wallet. It has like 5 million installs and it doesn't connect to a centralized endpoint. It actually connects directly to the bitcoin PSP network and it has a light client embedded and it works beautifully that you can actually see the block headers on your phone and so on and so forth.
00:50:49.702 - 00:50:59.338, Speaker A: And that's better than if you look at what are the most popular Ethereum wallets? I'm guessing something like metamask, which is, I'm guessing, always querying from infura.
00:50:59.434 - 00:51:30.860, Speaker B: Yeah, and to me that's like one of my biggest pet peeves about the current blockchain ecosystem. And that's also something that moxie Wildlin Spike mentioned in his blog post critiquing web three. If you don't know Moxie Wildlin Spike is the creator of signal messaging app and that's something that we want to solve because I think one of the key values of blockchain network should be that users should be first class citizens of a network. If you're just querying a centralized database, then kind of like erodes at that value a little bit.
00:51:31.470 - 00:51:53.702, Speaker A: We'll try to dig that up and add that article or that post to the show notes. So I want to hear where Celestia is at today. How close are you to launch? What kind of projects maybe have already emerged in your community? Like, I'm guessing most of them are sovereign chains or existing chains that want to use the data availability.
00:51:53.866 - 00:52:41.898, Speaker B: Yeah. So yeah, it's been kind of like a wild past year. In the past year, like before a year ago, there wasn't really a roll up ecosystem outside of Ethereum and we were really trying to bootstrap a kind of like a modular blockchain ecosystem that wasn't just Ethereum centric, but was also in, for example, the Cosmo ecosystem. And over the past year, there's been many, many projects that have emerged in the kind of celestial ecosystem and also the broader modular ecosystem, just to name a few. As I mentioned earlier, one of them is called dimension, which are building cosmos based roll ups that can connect to their Cosmos cell met layer. Another project is Sovereign labs, which are building sovereign Zk roll ups using risk zero architecture.
00:52:41.994 - 00:52:42.554, Speaker A: Cool.
00:52:42.692 - 00:52:57.950, Speaker B: They also support Celestia as a DA layer. And another project is called Eclipse, which are building customizable roll ups, starting with supporting the Solana virtual machine and allowing people to deploy Solana virtual machine roll ups.
00:52:58.030 - 00:52:58.660, Speaker A: Interesting.
00:52:59.530 - 00:53:01.478, Speaker B: As a database layer, would these be.
00:53:01.484 - 00:53:09.490, Speaker A: In any way connected to the original salana, or is this like Salana mirrored, but like using Celestia for Da?
00:53:09.570 - 00:53:19.350, Speaker B: So it's not connected to Salana main net chain itself, it's using the Salana virtual machine. So it's not like a Salana layer. Two. Okay, it's just like a Salana virtual machine.
00:53:19.430 - 00:53:25.820, Speaker A: But can it interact like say you made a bridge? Would it make any sort of application running over both of them easier to build?
00:53:26.370 - 00:54:25.886, Speaker B: Possibly, I guess I haven't really thought about that, but I guess it could be possible to verify Solana fraud proofs more easily inside of. If you're using Solana as a virtual machine, that could potentially be the case for sure. And yeah, so there's definitely a really widely expanding modular ecosystem. One of the most interesting trends is that we're seeing a massive emergence of sequencer as a service providers and more specifically roll up as a service providers. And what that means is that in the future, and this was kind of like my original end vision of Celestia, what I want to see in the modular stack is that in the future, you'll just be able to, as a developer, define the code for your application and go to a roll up as a service provider, and deploy your application as a roll up in one click. And that service provider will provide the first sequencer for you and it will be completely trust minimized. Because the whole point of roll ups is that you don't have to trust a sequencer.
00:54:25.886 - 00:54:34.782, Speaker B: Do you remember like Amazon AWS managed blockchains? This is like AWS managed blockchains, but it actually makes sense and it's actually trust minimized.
00:54:34.846 - 00:54:43.206, Speaker A: Why does the sequencer become decentralized, though, in what you just see? Why would it be more decentralized than an existing roll up?
00:54:43.308 - 00:55:04.960, Speaker B: Because if the roll up is constructed in the most secure way possible, then the roll up should inherit liveness and censorship resistance from the DL layer. If the sequencer goes down, you should be able to force transactions to be included if the user submit them directly to the DLA or should be able to elect a new sequencer, for example.
00:55:05.410 - 00:55:06.110, Speaker A: Interesting.
00:55:06.260 - 00:55:17.380, Speaker B: The most important point is that you don't have to trust the sequencer to not steal your money because of their fraud proofs or ZK proofs, or just running a full node. If you what's called a pessimistic roll up.
00:55:17.990 - 00:55:20.754, Speaker A: The opposite of an optimistic roll up.
00:55:20.952 - 00:55:35.122, Speaker B: Yeah, like people think pessimistic roll ups are a joke. I know, like optimism did a joke, the April fool's joke about it. But actually it's a thing. Yeah, pessimistic roll up were a thing before optimistic and zk roll ups. Like tether is a pessimistic roll up on bitcoin.
00:55:35.186 - 00:55:38.022, Speaker A: Is plasma a pessimistic roll up?
00:55:38.076 - 00:56:27.762, Speaker B: No, because plasma has fraud proofs. A pessimistic roll up is just a roll up that doesn't have neither fraud or ZK proofs, which means that you have to run a full node. That's what we mean by it's pessimistic because you have to run the transactions yourself basically to verify that roll up. I, I see, see, but in terms of like launch. Yeah, we plan to launch Celestia as a main net sometime around Q two or Q three of this year, and we are launching an incentivized test net next month. And it's going to be like the biggest and I guess first and only pretty much test of data availability sampling. Light clients on a real network, we're going to have around 900 light clients that are doing data availability sampling.
00:56:27.762 - 00:56:34.222, Speaker B: So it's going to be like the largest scale test of her data availability layer with trusty, minimized light clients.
00:56:34.306 - 00:56:51.710, Speaker A: Very exciting. I know that the ZK validator is going to try to be in that. We don't know the future. I know it's going to be a real competitive space, but we're definitely going to at least try it out. We didn't actually get a chance to talk about the data availability sampling. Maybe we should actually, for a minute, can you share a little bit about what that is?
00:56:51.860 - 00:57:14.870, Speaker B: Sure. So data availability sampling is basically, in a nutshell, it's a technique that allows a light client to have a very high guarantee, like almost 100% guarantee that the entire block was made available and was published by only sampling a very small proportion of that block.
00:57:15.690 - 00:57:26.666, Speaker A: And the probability is that if the samples come back as accurate, then your assumption is the rest of the node is also accurate. But is it the validator? The validators are doing that, right?
00:57:26.768 - 00:57:30.282, Speaker B: Well, it's the end clients like light nodes that are doing that.
00:57:30.336 - 00:57:45.150, Speaker A: Okay, so it's the light nodes that are doing that. Are they all sampling differently? Is it sort of like every single light client is going to sample a small subset all at the same time, but always different? Therefore a lot of ground is actually covered.
00:57:45.230 - 00:58:04.822, Speaker B: Yeah, exactly. So the idea is that each light node samples a different random set of that block. And the idea is that if you have enough light nodes in the network and any data is withheld, then the light nodes can collectively reconstruct that block by sharing samples with each other.
00:58:04.876 - 00:58:05.190, Speaker A: Cool.
00:58:05.260 - 00:58:07.718, Speaker B: So it's kind of like a self healing network in a sense.
00:58:07.804 - 00:58:14.730, Speaker A: Is it the whole thing then? By the way, you keep saying light nodes. I say light clients. Is it okay to use those interchangeably?
00:58:15.070 - 00:58:18.134, Speaker B: Yes. Okay. I'm actually meant to be using light nodes.
00:58:18.182 - 00:58:18.490, Speaker A: Okay.
00:58:18.560 - 00:58:22.490, Speaker B: Because they might not just be clients, they might actually be like sequences.
00:58:23.490 - 00:58:39.458, Speaker A: Okay, I'll use that from now on. So if you were to add up every single sample that all of the light notes have done, it fully covers the whole thing. Is there overlap, though? Would you also have a little bit of overlap between them, or are they always sampling different things from one another?
00:58:39.624 - 00:59:04.630, Speaker B: Yeah, you can have some overlap because the clients, or as I say, the nodes, they don't communicate with each other about what they're going to sample. So there will be some overlap. But the general idea is like, probabilistically speaking, once you hit a minimum threshold of light nodes, then you know that for sure you have enough light nodes that they collectively have the whole block.
00:59:04.710 - 00:59:06.538, Speaker A: But why would you not overlap, though?
00:59:06.624 - 00:59:07.990, Speaker B: Well, you do overlap.
00:59:08.070 - 00:59:13.230, Speaker A: Oh, you do. You do have them sampling the same pieces, for example. Okay.
00:59:13.380 - 00:59:25.502, Speaker B: Yeah, you do overlap because they don't share with each other. They don't coordinate with each other about what they sampled. So they locally choose a random number or a random set of chunks in that block.
00:59:25.566 - 00:59:26.178, Speaker A: Interesting.
00:59:26.344 - 00:59:28.094, Speaker B: So you might end up with overlap.
00:59:28.222 - 00:59:47.058, Speaker A: Cool. So I think we've covered the community as it is right now. But looking forward, do you see sort of like, in your ecosystem, would there be applications specifically, or do you see those always as existing only on the sovereign chains or on the. Yeah, the roll ups that live on top of Celestia.
00:59:47.234 - 01:00:14.830, Speaker B: Yeah. So, I mean, celestia is kind of a weird l one in the sense that we're kind of like more BTB than b. Two c. Okay. And by BTB, I mean blockchain to blockchain. So we're kind of like, in many circumstances, we're one step removed from the end developer because Lester, as a DA is usually used in conjunction with the execution environment. And so it's like the execution environment is where the applications live.
01:00:14.900 - 01:00:15.294, Speaker A: Got it.
01:00:15.332 - 01:00:58.298, Speaker B: And so that's like where roll kit, what roll kit does. So roll kit is more b, two c, because roll kit directly interacts with the actual application developers. And that's why we needed to build roll kit, because it was necessary to achieve the full vision. But celestial as a DA, I think in many cases, ideally it should be abstracted away because it should be like magic at the end of like if you're an application developer. There was a quote about this on Twitter, someone said it, but Jimmy Hendrix does not need to understand how to build a guitar to play the guitar, right? So it's kind of the same thing. Application developers should not have to be protocol developers to create the application. The end goal is to be like magic.
01:00:58.298 - 01:01:14.290, Speaker B: You should just develop your own application and have it deployed without understanding how the lower ends of the stack work. And part of the goal is we want it to be possible to make it that deploying a new blockchain is as easy as deploying a new smart contract.
01:01:14.630 - 01:01:32.470, Speaker A: Very cool. Well, on that note, I want to say a big thank you Mustafa, for coming on the show and giving us an update on Celestia, kind of revisiting it, and also letting me ask a lot of these open questions that you can see. I understood parts of this stack, but not exactly. So yeah, thank you so much for walking through it with me.
01:01:32.540 - 01:01:33.606, Speaker B: Thanks for having me.
01:01:33.708 - 01:01:40.250, Speaker A: So I want to say a big thank you to the podcast team, Henrik, Rachel, and Tanya, and to our listeners. Thanks for listening.
