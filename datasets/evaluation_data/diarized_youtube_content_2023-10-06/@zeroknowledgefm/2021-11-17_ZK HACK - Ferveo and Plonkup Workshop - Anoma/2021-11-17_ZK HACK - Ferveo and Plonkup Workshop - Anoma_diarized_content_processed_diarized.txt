00:00:00.090 - 00:00:57.120, Speaker A: All right. Yes. As I said, Joshua will take us all through Plookup later, and so that'll be exciting. He'll talk a little bit and have a really cool live demonstration. So we'll start off with a non ZK related cryptography topic, but one that I'm sure will still be of interest to many of you here. Just go over this project that we call Fervio, which is in collaboration with Osmosis Labs. It's a great collaboration that we've had with them and yes, okay.
00:00:57.120 - 00:01:57.838, Speaker A: Just having a little technical issue. All right, there we go. You can follow along because it's hack MD slides. You can follow along with this link and you can browse the slides at your own pace. Although most of the technical details about Fervia will be released in a technical paper relatively soon that we're currently preparing, that will have all of the nice math and proofs and other details that will be very interesting. But for right now, I want to go through the high level overview of what we're trying to do and some design decisions that we've made. Okay, so what is ferbia? Well, there's this problem that blockchains have encountered, especially as more and more finance applications move on to the blockchain, this problem of minor extractable value or mev.
00:01:57.838 - 00:03:55.110, Speaker A: And the idea of minor extract value, which is perhaps a little bit of a misnomer. Because it's not just miners that can extract value in this way, but pretty much anyone who has some kind of advantageous position on the network where they can control in some way how transactions are executed on the network. Including putting their transactions ahead of other people's in a way that can be called front running censoring transactions, reordering transactions to be more advantageous to the miner or validator in many cases. In fact, these entities don't actually have any kind of formal role in the network, but nevertheless, they have better connections and are able to monitor the mempool for incoming transactions or that kind of thing. And they're able to, because of whatever advantages they have, be able to change how transactions are executed and extract some value. And in cases of front running, this sort of lowers the utility of the network. It makes it less useful for other people because if other people are trying to do their trades in the network but they keep getting front run and extracting some of the value of these trades, then there's not as much usefulness of this network for those traders.
00:03:55.110 - 00:05:51.340, Speaker A: So there's some great articles on this, some technical research by this Flashbas Group and some amazing articles on the concept of a deep forest, which I encourage you to read, but many of you may already be familiar with. And solving this issue or addressing this issue of minor extractable value is going to be important for blockchains going forward. Okay, so what can we do about it? Blockchains are very public, at least if we're not in the zero knowledge area with transactions come in, they're public, they have to be publicly executed. So what can you do? Well, the most important thing you can possibly do is to at least not reveal the content of the transactions until they're actually included in a block and the block is committed and the ordering of the transactions are committed. Only then do you want to reveal what the content of the transactions actually were. Because that way when the block is being constructed, no one can use their knowledge of the transaction that was submitted to put their transactions in front or sandwich the transactions or in other ways alter the order of how the transactions are executed. And so broadly, I think people have looked at minor extractable value and said okay, trying to prevent the content of the transactions from being revealed is the important part.
00:05:51.340 - 00:07:05.242, Speaker A: However, the details about how to actually do this are not necessarily so straightforward. And there's actually several different kind of theoretical approaches which people have looked into. One very popular idea of how to address this is using some kind of time lock encryption. Usually, but maybe not always, based off of something like Verifiable delay functions, where the idea is that you lock your transactions in this time lock encryption and you encrypt your transactions to say, well, I want the deep transactions to only be able to be decrypted, say, 1 minute from now. And the hope being that in that 1 minute time they will be included in the blockchain and committed to. And then once the time lock is opened, the transactions will execute in the order that they have appeared in the blockchain. And in some ways this is a good approach.
00:07:05.242 - 00:09:15.102, Speaker A: It's certainly sort of very compatible with the notions of how proof of work blockchains work. There's some tricky things in terms of how to get the actual timing to work out the way that you want them to. And also, certainly in some applications, having a delay in execution is not so convenient as well. You want your time lock to last long enough to make sure that your transaction gets executed without being front run, but you also don't want your transaction locked for too long, otherwise it might become stale or it might not execute in the way that you want to. So a different way of doing it, which is the way that we've gone with Furvio, is to use something called threshold decryption, where unlike time lock encryption, which is based off of encrypting to some future time threshold decryption is this idea of decrypting via some committee or some group of entities that are able to decrypt. And there was a great talk by Sonny a couple weeks ago on these various trade offs and these different approaches that can be used for preventing minor extractable value, which you can go watch his talk, it's really great. But further into the trade offs here and just describe how do we actually accomplish this with Furbia? So with threshold decryption, if you're familiar with standard public key cryptography, where a message is encrypted to a public key and then whoever possesses the private key can decrypt them, with the threshold decryption system, it works very similar.
00:09:15.102 - 00:10:33.298, Speaker A: You have a single public key that's available to everyone public, and it's broadcast on the blockchain or gossiped in some way so that everyone has it. And messages, which is in this case are essentially transactions, can be encrypted to this single public key. But the difference is that no one actually knows the private key. The private key that's associated with this public key is not possessed by anyone in the world, but instead n different parties own what we'll call private key shares, which are we've kind of partitioned up this private key in some way so that every subset of at least T parties can decrypt the message. While every subset of at most T minus one parties cannot decrypt the message. And this is related to something called shamir secret sharing, if you're familiar with that. The idea of how N parties can share a general kind of secret such that at least every subset of least T parties can reconstruct the secret.
00:10:33.298 - 00:11:28.410, Speaker A: Well, every subset of at least of at most T minus one parties cannot reconstruct the secret. And the basic concept is the same, except that instead of reconstructing the private key, which would reveal to everyone what the private key was, parties are not going to reveal the private key. They're instead going to decrypt this message. And these parameters are very adjustable. So in a threshold decryption system, you can choose these values of T and N, where if you have N different parties and you want, say, two thirds of them to be able to decrypt, then you can choose T equals two thirds of N. Right? So threshold decryption is something that we can build on top of secret sharing. And it's been known for many, many years that you can.
00:11:28.410 - 00:13:12.550, Speaker A: And there's been many different constructions for how to build threshold decryption crypto systems, although I'm not sure that there's actually been very many applications deployed that actually use threshold decryption. Okay, so threshold decryption as a cryptographic concept is well established, but one reason why verifiable delay functions are a little bit newer, it sort of came up in the blockchain context first, but in the threshold cryptography is actually very useful depending on the kind of blockchain that you're building it on top of. So in a BFT. Byzantine, fault tolerant, consensus based blockchain such as, for example, those that are built on tendermint or the tendermint proof of stake protocol. There's actually a very nice natural correspondence between who owns the stake in the network or who has been delegated the stake in the network and who should own these private key shares. So in the tenderman proof of stake system, validators are delegated weight by people who own the staking token in the network. And validators can produce blocks by voting using the stake and more than two thirds weight by stake.
00:13:12.550 - 00:14:15.760, Speaker A: When they vote to commit a block, that causes the blocks to get committed and the transactions in it join the blockchain, right? And so at least sort of qualitatively, you have this very natural correspondence, the validators which already have been delegated, this stake in the network, this authority in the network to say, okay, if some threshold of stake has voted to commit these blocks, then the blocks become finalized and the blockchain progresses forward. And so it's very natural now to say that these validators should also have these private key shares and be able to decrypt these transactions subject to the same two thirds weight threshold. And so this makes using threshold decryption in this proof of stake world.
00:14:19.330 - 00:14:19.598, Speaker B: A.
00:14:19.604 - 00:15:10.678, Speaker A: Lot more of a natural choice than maybe using time lock encryption. So here's the basic idea of how we want the transaction model to look like. Validators are going to generate a common public key in some way, a single public key that everyone using the blockchain should know. This public key gets broadcasted in some way. Alice wants to do some kind of transaction, so she builds the transaction in the way that she has her wallet. Software that builds her transaction for her and the wallet is going to encrypt her transaction to this public key. So she encrypts the transactions.
00:15:10.678 - 00:16:40.200, Speaker A: No one can know what's contained in this transaction, but presumably it can be decrypted later at some point. So once Alice broadcasts her encrypted transaction, validators are going to get this encrypted transaction in the mem pool. And validators are going to include this encrypted transaction eventually in a block. Validators, because they have no idea what's in the transaction are going to have to use, just what little information they have to decide when and how to include Alice's transaction. So maybe she's included the gas amount and the fees and that sort of thing, but otherwise no one can actually tell what her transaction is or what kind of transaction she might be doing. And therefore it makes it much more difficult to front run or get mev from. And so validators are going to include Alice's encrypted transactions in a block, whoever is constructing the next block, because in the tendermint proof of stake, this is very sort of well described, well specified about how blocks are proposed and voted on.
00:16:40.200 - 00:18:09.986, Speaker A: So whoever the block proposer is will scoop up a bunch of transactions from the mempool, add it to a block, and then the network will come to consensus on that block. And what we want to happen is that when the validators are voting on this block to decide whether to commit to it, they should be committing with their decryption shares of Alice's transaction, but essentially the decryption shares of every transaction in this block. But the idea is that we want to make sure that the exact moment when two thirds of stake is voting for this block that two thirds of the private key shares are also voting for this block. And therefore as soon as you reach this two thirds threshold the block is finalized and you also have enough decryption shares to actually decrypt Alice's transaction and execute it. So that's the model that we're trying to get to. Now there's some difficulties that happen when you try and actually implement this. The biggest difficulty is that, well, validators have different amounts of stake.
00:18:09.986 - 00:19:10.662, Speaker A: And in general you might hope that every validator has about the equal amount of weight because that's good for decentralization of the network and other reasons. But in practice, of course, this is not how it works. Validators tend to be very top heavy and a couple of validators tend to have a lot of weight. And so two thirds by count of validators is not generally going to be equal to two thirds by stake. Even in a really great world where validators have roughly equal kind of stake you're not necessarily going to have this exact equality. And so if we want to achieve our ideal outcome where the validator can finalize a block if and only if they can decrypt all the transactions in the block, well then we need to do some adjustment there. That's the outcome we want to get.
00:19:10.662 - 00:20:02.970, Speaker A: But we can't just give one private key share to each validator. So the only really reasonable way to do this is by weighting the private key shares. Namely you have more private key shares than you have validators and higher stake. Validators get more private key shares. And if you have 100 validators, for example, you might want to give 2000 or 4000 or even 8000 key shares out. And this will let you approximate the amount of stake that all the validators have in the network. Now because we're now making the number of private shares, private key shares in the protocol much, much larger.
00:20:02.970 - 00:21:53.938, Speaker A: There's a big difference between say N equals 100 and N equals 8000. The immediate thing that this enforces is that every part of this protocol now must be big of N log N in performance in both network bandwidth and computation which otherwise the scaling is just too bad. It has to be at least this kind of quasi linear scaling. And the reason that I point this out as being really important is because it's not necessarily obvious how to achieve this because remember, if you have N different parties the communication complexity pair wise is N squared. So if you're sending a message between every pair of entities in the network and you have N entities then you have N squared messages in general. And then if every entity must do some computation on the data they receive from every other entity then it can very easily become big O of N squared bandwidth and computation. And in fact this is kind of just a general issue with distributed systems in general, but it just becomes kind of even more acute here because we are sort of decoupling the number of validators or number of entities in the network and the number of private key shares which is now much larger.
00:21:53.938 - 00:23:18.150, Speaker A: And so with everything that we do, we have to focus on keeping this performance much better. So the first part of this of Fervio is so we need to have the validators be able to create this private key where the private key is distributed around to all the private key shares are distributed around to all the validators, but no one actually knows what the private key is. It's very much like a trusted setup in the DK world, right, and so won't go into the details of how we do this. There's some really great papers that describe the technical details much better. But the basic design decisions that we've made in Furvio are that we want to use something called a publicly verifiable secret sharing scheme. So as I mentioned secret sharing before, the idea that end parties can split the secret among themselves. The verifiable part of verifiable secret sharing is that everyone can verify that their own private key shares are valid.
00:23:18.150 - 00:24:32.794, Speaker A: They haven't been distributed an invalid private key share by someone. If say, there was a rogue validator being part of the protocol, well, you would want that their messages can be detected by the person receiving the messages. But we go a little further than just a verifiable secret sharing scheme. We want to use a publicly verifiable secret sharing scheme. In a publicly verifiable secret sharing scheme, the validity of every step of the DKG can be checked by every other validator in the network. So this means that the validators are going to engage in this key generation protocol and they're going to share messages with each other. It's not just the recipient of each message that can verify that the message was constructed properly, but in fact every validator or even people who are not validators in the network can check each step of the DKG, check each message and make sure that it's valid.
00:24:32.794 - 00:26:11.360, Speaker A: And the reason that this is important in Blockchain context is that there's no issues if a validator goes offline. So the reason for this is that if the scheme was not publicly verifiable, then a validator that could send a rogue or invalid message might not be detected. Because if the validator that's receiving that message has gone offline for some reason, either on purpose or if there was like a denial of service or something, or if there's just any issue that caused them to go offline, this invalid message might not be detected. And so the distributed key generation gets much more complex when you have to have additional rounds of communication where a validator has to be online and file a dispute if a different validator is acting in a malicious or byzantine way. And so our primary objective here is that we're going to avoid that. We want to avoid that as much as possible. We want to use a publicly verifiable secret sharing scheme where if a validator goes offline, then they know that all of the messages that they would have received, they were online are still good.
00:26:11.360 - 00:27:26.802, Speaker A: Let's see, we have a question. Would it be possible to use a hierarchical secret sharing scheme to account for the weights of each validator and thus reduce the number of shares needed? That's a good question and it's one that we struggled with for quite a while ourselves trying to figure this out and reading all of the literature about secret sharing. So the short answer to this is that you can, but you don't necessarily gain very much. And the reason for this is that is actually kind of quite deep. Secret sharing is an information theoretic construct. It's actually based off of polynomials and interpolation, right? If you're familiar with secret sharing is not actually based on like a cryptographic construction necessarily. And so the problem with information theoretic schemes is that you don't actually get many opportunities to do like compression or aggregation or anything like that.
00:27:26.802 - 00:29:25.990, Speaker A: And so if you have a secret sharing scheme which you want to have parties have different weight in them, then very oftentimes the size of the private key share is going to grow with the weight rather than anything else grow linearly with the weight. And so if you adopted a different kind of secret sharing scheme, for example, there's secret sharing schemes, they're not based off of polynomials, they're based off of Chinese remainder theorem. There's actually many different secret sharing schemes that people have proposed, but sort of a common thread amongst them is that unfortunately, when you actually try and implement them, it's very difficult to sort of beat the simplest secret sharing. Scheme of sharing a polynomial evaluation. Polynomial which? It's not to say you can't beat that, but certainly a simple scheme is very much more straightforward to implement and optimize. But as we found, we were able to get the secret sharing scheme to be very performant. It's just mostly a matter of dealing with the high amount of bandwidth required because of the high number of private key shares and also making sure that our implementations are all very fast computationally algorithmically fast, this big o of n log n algorithmic complexity.
00:29:25.990 - 00:30:53.506, Speaker A: Okay, so the other important property of our distributed key generation is that we actually use a synchronous on chain message passing protocol. And this is actually quite a bit different than most of the academic literature on distributed key generation. A lot of the interesting work in recent years has been in the asynchronous model, or maybe I should say a partially asynchronous model, where entities are passing messages between each other, perhaps using a gossip protocol. And there it becomes much more difficult to achieve, like a big O of N log N overall complexity and also maintain the synchrony of the network. Synchronizing things in general is just a very difficult thing to do. That's why blockchains are interesting. But since we have control of the underlying chain, it's actually much, much simpler if you use the existing BFT consensus mechanism to synchronize your distributing key Generation Protocol.
00:30:53.506 - 00:32:12.000, Speaker A: And it's just much simpler when the Blockchain and BFT consensus are already there. And you can assume that when a message is posted to the Blockchain that it can be received, that it actually is received by everyone, and that there's not some kind of Byzantine fault in the network. Now, this of course means that there's a lot of on chain data, but we find that not a problem because the data is actually prunable later. And so we're not carrying this data forever. So we're going to run our distributed key Generation protocol on the chain. And we have based on this nice publicly verifiable secret sharing scheme, there's a technical issue which tripped us up for quite a while, namely that publicly verifiable secret sharing based DKG generates private key shares that are elliptic curve points and not scalars. So if you're familiar with how private keys work, usually in elliptic curve cryptography, private key shares are scalars and public keys are elliptic curve points.
00:32:12.000 - 00:33:54.560, Speaker A: However, in the DKG that we constructed, the private key shares are also elliptic curve points. Formally speaking, this DKG works over a pairing friendly curve and the public keys are G one points and the private keys are G two points. The private key shares are G two points as well. And this is a problem because it becomes very difficult to use existing threshold decryption schemes which are not written with this assumption in mind, they're written with perhaps other assumptions in mind. And so our solution to this is we've developed a new pairing based encryption scheme that supports threshold decryption with these publicly verifiable secret sharing generated keys. Now, just one aside, there was a nice paper this year by Groth, the same Groth as in Gross 16, who described a PVSS based distributed key generator which actually does generate private key shares that are scalars. However, the scheme that we're using is quite good enough, quite high performance, and simple enough that we can continue using the PVSS scheme that has this private key share property.
00:33:54.560 - 00:35:56.822, Speaker A: Okay, what are the optimizations and features that are really interesting and perhaps unique to Furvia? First is that everything is being done using fast big O of N login algebra operations. So if you're familiar with secret sharing in general, or perhaps just inferring things, from what I've said so far, secret sharing involves a lot of polynomial operations, multiplying adding interpolating polynomials, evaluating polynomials. There's a lot of these polynomial operations which happen in the secret sharing process, in the threshold decryption process, and they're sometimes but not always optimizable using FFT techniques. It turns out that there's actually a quite general field of fast polynomial operations, fast polynomial algorithms, which allow you to do all these operations in the required and login speed. And so where we've had to, we've implemented all of these operations and integrated them into our distributed key generation and threshold decryption implementation. And so that's going to allow us to scale up the number of private key shares to the level that we want without destroying the performance completely. Some optimizations that we've done on the decryption share side, we have in our implementation one decryption share per transaction per validator, not per transaction per private key share.
00:35:56.822 - 00:37:35.270, Speaker A: So this is a very nice optimization, which our very own DK hack host Kobe helped point out. And this is very important because anytime that you can do something on a per validator basis instead of a per private key share basis, you're automatically going to get an enormous speed up because you're going from, like I said, 4000 or 8000 private key shares down to 100 validators. Our encryption and threshold decryption scheme has to be something called key committing. Namely, we want to be able to say that either a transaction is guaranteed to be decryptable or it's detectable that it's invalid. Or another way of saying this is that all valid transactions can be decrypted, verifiably decrypted using the key that we derive. And the reason it's important is to prevent the censorship of transactions as you don't want validators decrypting a transaction and then discovering, oh no, I didn't like this one, I want to censor it in some way. The important property we get from key committing is that if a transaction is validly, constructed and encrypted, then the decryption shares become available and it must become decrypted because everyone else can verify that if it actually was an invalid transaction.
00:37:35.270 - 00:38:33.020, Speaker A: That fact is verifiable to everyone. So before I hand this off to Joshua Part, which I know that everyone is going to be interested in, was the actual concrete performance of this, of furvio both in terms of the bandwidth and the compute time. So the amount of data that goes on chain for the distributed key generator is actually quite large. It's 138 megabytes per epic. So if you refresh your key, say once per day, you're putting this large amount of data on the chain. However, the trade off is that it's actually prunable. So it's more of an issue for gossiping all of this data around.
00:38:33.020 - 00:39:47.764, Speaker A: It's not very efficient to gossip this data while the DKG is running. However, in terms of your long term storage costs, it's actually not important because once the DKG is done and the Epic is passed and the key has expired, you can just prune all of this data from your blockchain. And if you have the ability to build your blockchain in a way where it's prunable, then you maybe don't care so much that your TKG uses so much on chain data and then the actual data that sort of is important on chain, the decryption share and the ciphertext overhead is going to be quite minimal. Your decryption shares are very small amount, basically 48 bytes per transaction per validator. And so maybe if you have a lot of validators, this can add up per transaction. But as a general rule, it's actually very small. It's much better than if it was, again, 48 bytes per transaction per private key share.
00:39:47.764 - 00:40:57.100, Speaker A: And then the ciphertext overhead from encrypting to this public key, a couple of hundred bytes. This is also mostly unavoidable, performance wise, rough single core measurements on my laptop. And so it should be much better on actual validator hardware. We managed to push most of the compute into a per block compute. So it takes about 4 seconds of compute per block to sort of do all the prep work for doing threshold decryption for that block and then a really insignificant 16 milliseconds extra compute per transaction. So if you have many transactions, you're actually amortizing this four second cost over the many transactions in that block. And so even for a very high number of transactions, like 100 transactions per block, you still don't actually have that very much total compute time.
00:40:57.100 - 00:42:04.210, Speaker A: And if you parallelize this over many cores, if you have 32 or 64 cores, this should make this quite feasible for validators to do over all of their blocks. Right. Some validators might have to upgrade their hardware, but that's an acceptable trade off against running a proof of work minor or something, right? It's not that significant to add some more cores. Okay, you can check out all of our work in progress public repository certainly appreciate any comments or feedback or other insights that you have. Any questions? Let's see. Share papers related to DKG or PBSs. Yes, a DKG in the wild is a great one.
00:42:04.210 - 00:43:36.780, Speaker A: There's one that, in fact, that put us in contact with Kobe about this in the first place. On aggregateable DKG, in fact, our DKG is very much closely related to this aggregatable DKG, except, of course, the aggregatable DKG is more interesting overall in the asynchronous context, where they get this big of N log N performance asynchronously, which is a much bigger achievement. The fact that we're doing everything synchronously makes the full aggregateable DKG unnecessary. But in every other respect, our DKG is very similar to the aggregate. Um, maybe I'll share one more paper. This is the Groth 21 DKG. It's a very interesting piece of work.
00:43:36.780 - 00:44:09.908, Speaker A: I encourage you to at least read the abstract and maybe understand why. It's an interesting piece of work, but certainly it's also quite complex both in concept and implementation. Okay, I think quite a bit of time.
00:44:10.074 - 00:44:19.864, Speaker B: Yeah, I think josh, thank you so much for this talk. I guess if there's any other questions joe, do you want to just kind of. Stick around in the chat if people wanted to ask more.
00:44:19.982 - 00:44:20.888, Speaker A: Yeah, absolutely.
00:44:21.054 - 00:44:40.530, Speaker B: Perfect. And Joshua, do you want to maybe jump in here? Joe, I think you're going to have to turn off your screen for Joshua to show. Perfect. Cool. And I think when you're not speaking, maybe just mute to avoid any sort of background. Perfect. Cool.
00:44:45.050 - 00:46:01.386, Speaker C: Okay, see? Can I make this big? All right, so, yeah, I'm going to present on Plunk up a protocol which combines both plank and plookup protocols into one. Well, let me just find where I'm at here. So what is plunk up? It's a method for unifying the plonk and pluckup proving schemes. Plonk came up first, plokup came out a bit later. There was nothing in the plokup paper saying exactly how these two things code or should be combined. Plokup was kind of its own singular thing, and so we went ahead and tried to combine these and ended up with ploncup. Planckup has advantages of Planck, which are relatively small proofs, fast verification, and universal setup with the additional power of lookups to reduce circuit sizes.
00:46:01.386 - 00:47:24.766, Speaker C: If you have a circuit unfriendly function, like bitwise operations, most hash functions have some bitwise operations, so implementing them in a circuit is a little inefficient, but with lookups, you can increase the efficiency a lot. The reinforced concrete hash is an example of a new hash function that exploits lookups and arithmetic in a circuit. So to express the reinforced concrete hash in a circuit, you need something that can do both. Plank up is our solution for doing both. We've been following the convention of using the term plankish to refer to a family of protocols that descended from Planck. If you just say Planck, no one knows what you're talking about because there's so many different kinds. So if we're referring to the family of protocols, we just call them plonkish so that people know we're talking about a whole group of protocols that have some similarities.
00:47:24.766 - 00:48:18.210, Speaker C: I think it was some folks at ECC that started using plonkish in this way. So some examples of plonkish protocols are planck, the original turboplank and alter plank, which I always get confused which one is which, but one is referring to custom gates. One is referring to lookup gates, possibly also custom gates. Like I said, I forget. What's? What? Pluckup, which is for lookups only, plank up, which is our version of lookups and arithmetic. Halo Two, which uses Planck with a different polynomial commitment scheme, and Faflanc, which just came out. And also, this is the first time I'm ever pronouncing that out loud.
00:48:18.210 - 00:49:12.960, Speaker C: And I don't know, maybe your plonk here someday. There's so many different planks. Everyone should try and make their own plank. I think it's a good exercise. Okay, so what characterizes a plankish protocol? They can't be characterized by their polynomial commitment scheme or their gate structure, because you can change those. You can swap out the polynomial commitment scheme you can use KZG or Kate commitments. Halo Two uses an inner product argument like bulletproof style commitment scheme, but you could theoretically swap it out and use something like Fry turning Planck into a kind of stark.
00:49:12.960 - 00:50:35.260, Speaker C: So you can't really call something plankish just by its polynomial commitment scheme or the gate structure, because you can use custom gates, which can be basically anything. So what does characterize a plankish protocol? You have fixed width gates, which could be custom. You have a universal setup, so you can run one trusted setup that works for any circuit below a particular size. Plonkish protocols usually exploit a LaGrange basis in order to gain some efficiency there. So in a LaGrange basis, you represent your values by points or valuations on polynomials rather than coefficients or some other thing, and they have a grand product argument. The original Planck uses a grand product argument to show that there's a permutation of variables that shows their equality. Plokup has a different product argument.
00:50:35.260 - 00:51:22.200, Speaker C: Plonk up combines those. I just see a question here. What's fixed with gates? With Plonk, you don't get unbounded fan in like you do with rank one constraint system. With R one CS, you can do basically unbounded additions in a single gate. With plank or plankish protocols, you don't get to do unbounded addition. You could make your gate have many additions if you wanted. You could make it have eight additions if you wanted, whatever, but it's fixed.
00:51:22.200 - 00:51:52.630, Speaker C: So I like to view Plunkish protocols like a switchboard. So what I have here is kind of my mental image of what's going on with Planck. I've got three different types of gates. Here we have addition in green, multiplication in blue, and lookup in orange.
00:51:55.290 - 00:51:55.750, Speaker B: For.
00:51:55.820 - 00:52:42.310, Speaker C: ABC and D a one B one C be a part of this. Green row means that they have to satisfy a particular constraint, in this case, an addition constraint. So I decided to make it A plus B equals C plus D. Multiplication A times B equals C plus D. And for lookups, then you just look up the tuple ABCD and check to see if it's in the table. All right, so rows are associated with these gates. They need to satisfy these gate constraints.
00:52:42.310 - 00:53:39.560, Speaker C: All right, then what you can do is connect them together. I hastily drew these wires on an airplane, but you could plug a kind of patch cable in and connect two variables. So here I've got C one and A two connected, which means they need to take on the same value. That's how you can connect variables from one gate to another gate. So here I've got a multiplication gate where one of the factors in the multiplication B four also needs to be a part of this lookup. So it's going to be the first element in this lookup row. So C one equals a two, b four equals a five.
00:53:39.560 - 00:54:40.170, Speaker C: Before I get too far, I just wanted to give some terminology. So you know what I'm talking about. Wires are columns of the proverbs private inputs to the circuit, and they're vectors of length n. So if I scroll back up here, I'll try not to do too much scrolling, but if I scroll back up here, you'll see I've got ABC and D columns. So we have four wires, the A wire B wire C wire Dy, and the length of those wires is six. Okay, gates talked about a little bit, but a gate is just a relationship that a row of the proverbs private inputs must satisfy and plonk up supports arithmetic gates and lookup gates. Sometimes these are also called constraints.
00:54:40.170 - 00:55:22.214, Speaker C: Sometimes if I'm really being bad, I might call it a row, but it's not really a row. But you might hear that selectors are vectors also of length n that turn gates on and off. For example, a one index k of the lookup selector turns the lookup requirement on for row k. A selector can also contribute an auxiliary scalar to a gate constraint. In some cases, like I said, they're vectors of length n. Finally, we have copy constraints. I've already mentioned these.
00:55:22.214 - 00:56:21.770, Speaker C: These are like those patch cables that you can plug into the switchboard that force two variables to take on the same value. So these are used to build a permutation which swaps each variable with another that is supposed to be equal to it. So essentially, we run through the same kind of product twice, one with the original value and one with the permuted value. And if those products are equal, then the original value and the permuted value must be the same. We also have a circuit description. This is all the stuff selectors, circuit length and the permutation encoding, the copy constraints and the lookup table form the circuit description. This is public stuff that you need to prove and verify a circuit.
00:56:21.770 - 00:57:17.930, Speaker C: Okay, here's what our lookup table will look like. The lookup table has columns equal to the number of wires in the circuit. So I had four wires earlier, so I made a table with four columns. And we will take those values of wires in a lookup gate and see if those same four values appear as a row in this table. Okay, I made a lot of slides. I made way more slides than I needed. So I'm not going to go through all of these or not all of them in depth.
00:57:17.930 - 00:58:06.540, Speaker C: So you can see these slides. You can take a look at them later if you want to look at more of these arguments. But I will stop here for the grand product argument. This is what I was talking about before, where we check these copy constraints. So what we have is four wires, A-B-C and D, and we multiply up all of these terms into a big product. And if you look at the numerator and denominator of these terms, they're similar, but not quite the same. Up top you have can I highlight that part? Not really.
00:58:06.540 - 00:58:51.370, Speaker C: Right here you have, like, I beta. I stands for the index of the original value. So we index these, like, basically the first wire. A gets one through N, b gets N plus one to two N and so on. So we have all these indices from one to four N. That's what I is here. And in the denominator, we have almost the exact same thing, except we now use the permutation on the index instead of the original index.
00:58:51.370 - 00:59:31.990, Speaker C: So if the product in the numerator equals the product in the denominator, they should all cancel out. You get one if you try to mess with any of the values of the wires, it's not going to cancel out. You won't get one. If you try to mess with the indexes, it also is not going to cancel out. Okay. Pluckup also has a product argument. This, I should say, is a modified version of the Pluckup product argument.
00:59:31.990 - 01:00:18.040, Speaker C: We've changed this a little bit to make it more efficient. This suggestion here for how to change this was Luke Pearson came up with this really, really helped with the efficiency of our plankit protocol. Pluckup also has this product. This is really interesting. I think. So I'll try to explain how it works. You have a vector of queries, which is F, and you have a vector that comes from the public lookup table that's T.
01:00:18.040 - 01:01:19.410, Speaker C: And you combine those together. You concatenate them to form a new vector, S, which is double the length of either T or F because you're combining them together. And then you divide S into two halves, which we call H one and H two. You can see those down here in the denominator. H one are all the OD indexed elements of S. H two are the even indexed elements of S, and S is sorted to match the ordering on T. Okay, so what happens here is that these denominator factors will run through all of the elements of S and you can actually see here if you look, we are not just going through the elements.
01:01:19.410 - 01:02:29.600, Speaker C: We're kind of pairing up adjacent elements so that we have a first element and we have the next element, which is multiplied by delta. So all of the pairs of elements as you go through S are run through with these denominator factors. If that pair of elements that are adjacent matches a pair of elements from the table, then one of these denominator factors is going to cancel with this factor here. Sometimes the two adjacent values will be the same. When they're the same, they are the same because they are a table value and a lookup value, which means a table value and a query value, I should say, which means the query is in the table. And that's why we see it twice. We have a table value and a query value, they're the same.
01:02:29.600 - 01:03:44.590, Speaker C: When that happens, if these two, like h one I and h two I are equal, then you can factor out one plus delta because we also see this one plus delta here. The one plus delta can come completely out of this. And what you have left is epsilon times the single value, which must be one of the queries, which is F. So that will cancel out with these factors here. So as we run through this concatenated and sorted vector here, S, it's either going to cancel out with an element of the table or an element of the queries if the vector is formed correctly. So this will all cancel out and you get one. Okay, I'm going to skip past some of this more technical stuff and I'll show you these gate structures before we get on to the live coding part.
01:03:44.590 - 01:04:08.420, Speaker C: With Ploncup, we have two major kinds of gates. We have arithmetic gates and lookup gates. Here's an arithmetic gate. What you have are the proverbs private inputs. These are ABC and D. You also have Selectors QM. Qlro.
01:04:08.420 - 01:04:57.140, Speaker C: We couldn't figure out a name for the fourth one, so we just called the fourth one Q four. And QC is a constant that you can add into a gate. So if you look here, this first term has QM times AB. So if the Q selector, the QM selector is of one, then that means we are including A times B in this gate as a part of the constraint. If that selector is zero, then you won't have that in there. So if you turn on QM with a one, you make this a multiplication gate. Or you can turn it off and make it more of an addition gate.
01:04:57.140 - 01:05:35.330, Speaker C: The rest of the terms, we have Qlqr times A and B each and also QO times C. These stand for left, right and out. So these can scale A, B and C. Or they can turn them off completely by making them zero. We have a fourth one for D and we have a constant also. So this is more expressive in some ways than rank one constraint. Actually, I'd take that back.
01:05:35.330 - 01:06:13.580, Speaker C: I take that back completely as this is all addition here. A rank one constraint can also express this with also even more additions if they want. So this is less expressive than a rank one constraint, but it can do multiplication and scalarized addition here. So kind of like a linear type constraint with one multiplication. A Lookup gate is much simpler. It doesn't have to satisfy a formula like this. All it needs is that that tuple needs to be an element of the table.
01:06:13.580 - 01:06:57.960, Speaker C: Okay? So if you want to use Plunk up, you can run a setup with Plunk up. Here we have the code for this. N is the size of the circuit that you want to use so you can generate a setup. This way. This is your trusted setup you may have heard about. Then we create, approver, approver can have a kind of tag. I'm calling this one Workshop prover.
01:06:57.960 - 01:07:47.092, Speaker C: This initializes a transcript. So Workshop Prover is also kind of a diversifier, so that different proofs for different purposes will have different tags here and will not be able to they won't verify if you have the wrong tag. All right, then the proofer has private inputs. My circuit here, I should have put a slide in this, but my circuit here is showing Pythagorean relationship between private inputs. So there's three private inputs, A, B and C. And my circuit should show that A squared plus B squared equals C squared. So here's the proverbs private inputs 512 and 13.
01:07:47.092 - 01:08:38.552, Speaker C: That should form a Pythagorean triple, if I remember my geometry correctly. And these are added as inputs and become variables in our constraint system. The prover mute CS is our constraint system. All right, once we have variables in, we need to put our gates into the circuit. We have a multiplication gate here and it has a selector value, which is one, and it's two variables, A and A. So this should give one times A times A, so A squared. And then we save that here in VAR A squared, VAR B squared, essentially the same.
01:08:38.552 - 01:09:15.670, Speaker C: Just we're using VAR B course, VAR C squared, essentially the same. We're using VAR C. Then we need one addition gate to show that A squared plus B squared equals C squared. The way we actually do that is show that A squared plus B squared plus C squared equals zero minus C squared equals zero. So we have our three squares. We could scale those if we wanted to, but we don't want to in this case. So we're just using a one.
01:09:15.670 - 01:10:06.996, Speaker C: And for C, we take the negative so that it adds to zero. Once we have our gates, then you can prove a circuit with a commit key CK. You just run Prover Prove and that will create your proof for you. And then to verify, you need a commit key and a Verifier key. But you just run Verifier verify and that takes proof, Verifier key and some public information. Here the public inputs and lookup table and gives you your result. I think I saw some interesting questions over here.
01:10:06.996 - 01:11:20.860, Speaker C: David, what's the point of reordering T in T prime as well from Enabling Alternative Ordering slide? I will scroll and see if I can find that slide. This is one of the slides I skipped. Um, we we have to sort these vectors and sorting can be kind of tricky. They need to be sorted in order for this pluckup argument to work. But the prover needs to sort their copy of the table the same way the Verifier has their copy of the table. So you can use like a relative sorting algorithm or you could also just do this small change to the product argument here. The prover uses this T prime instead, which is their own ordering.
01:11:20.860 - 01:12:21.004, Speaker C: It can be whatever order the prover wants. It doesn't have to match the Verifier's copy, which is T. And these extra factors show that the prover's ordering is a permutation of the Verifier's ordering. So this enables the prover to choose a sorting algorithm of their choice. If you use a relative sorting algorithm, it's a little tricky. If you take one of any number of efficient sorting algorithms out of the box, you can get down to N log N pretty easily just by tacking on a few extra elements here. We had an issue with the sorting when we first ran through this protocol.
01:12:21.004 - 01:13:35.400, Speaker C: The sorting was really destroying our benchmarks, and this allows you to kind of step around that issue. There's a couple of ways to do it. Okay, I think if are there any questions over the slides before I switch over to the live coding part? I don't see any new questions in Q A. I'll go ahead and switch over now to the live coding. I kind of gave you a preview in some of the later slides, the syntax is going to be slightly different because I'm using a slightly different version of our library. Let's see here. Here we go.
01:13:35.400 - 01:15:01.970, Speaker C: Okay, so what I'd like to do here for the live coding portion is show you how to use Plonk up to make an XOR table. XOR is a pretty common operation in hash functions. It's also not that easy to do with regular arithmetic gates main reason is that you have to break up the XOR into a bunch of little pieces, often just bits. So if you have 256 bit element and you want to XOR that with some other 256 bit element, well, you have to break that into bits, constrain each bit so that you know it's a bit. So you end up with 512 constraints. Then you have to use a constraint for each XOR, and then you need to collect all of those back together into your output. So because you're working bit by bit, you end up using a ton of constraints.
01:15:01.970 - 01:16:04.040, Speaker C: If you use a lookup table, you can work more easily with multiple bits. And what I'm going to do here is make a four bit lookup table. So each input is going to be four bits, and that'll save a lot of constraints. We're just going to do an XOR between two bytes. I wanted to make sure this was not too complicated, or else I'll be making too many mistakes on screen here. So we're going to take a left value, left byte, a right byte, XOR them together with our table, produce an outbite. Sorry, Ayazid, I don't have a repo for you.
01:16:04.040 - 01:16:46.550, Speaker C: Okay, so let me explain the different parts here. You've seen some of this already in the slides here's. Our main N is the size of the circuit actually it's bigger than the size of the circuit. It's the next power of two larger than the circuit. This size needs to be a power of two in order to make the FFTs more efficient. So once we have the size of the circuit, we can generate parameters. This is your trusted setup here.
01:16:46.550 - 01:17:30.204, Speaker C: So this will generate enough elements in the setup to handle a circuit of size 512. Next we have the proverbs viewpoint here. In this closure, the prover is going to generate random bytes here. Three random bytes or two random bytes as opposed. The last one is the XOR between the left and the right. These are going to serve as the inputs to the prover circuit. Then the prover can create their prover struct.
01:17:30.204 - 01:18:01.580, Speaker C: I've got it tagged at Zkhack workshop. Next we will create the lookup table. With this function. We're going to fill in that function which was just above. Next we add the gates to the circuit. We're also going to fill that in in a function that's above. We create our commit key, which we need to do a proof.
01:18:01.580 - 01:18:47.816, Speaker C: We do some preprocessing on the circuit. Usually preprocessing is done once per circuit. Here we're just going to do it on the fly. Then we also want to make sure that the Verifier gets the same public inputs and the same lookup table. So we're going to grab these from the proverbs constraint system and pass that along to the Verifier later. And then we'll create our proof. Once we have the proof created, if you look at the beginning of this closure, this will spit out a proof.
01:18:47.816 - 01:19:11.140, Speaker C: The public inputs and the lookup table. These two are public. Well, all this is public. And the Verifier will use this information to verify. So the Verifier also creates their own Verifier. This Verifier needs to have the same exact tag here. Ckhec Workshop.
01:19:11.140 - 01:19:42.284, Speaker C: The verifier appends. The lookup table attaches their circuit. This is going to be the same circuit using the same function. If you notice here, these are the Verifiers inputs to the circuit. They can be anything. I just picked some random numbers. I don't think that seven x or two is one, but I didn't really check.
01:19:42.284 - 01:20:24.430, Speaker C: I just picked some things. Those don't matter actually. So then we compute the commit and Verifier key and Verifier does their own preprocessing. And then we can run this verification here. Okay. And then we'll see at the end if the Verifier accepts. So what we really need to do is fill in these two functions.
01:20:24.430 - 01:21:06.680, Speaker C: Generate XOR, lookup table for bit and example circuit. Both approver and Verifier use both of these to create the circuit. Okay, let's see here. I have my cheat guide. Okay, so to generate the table, we'll just use some for loops. These going to run through all four bits. So it's just going to go from zero to 16.
01:21:06.680 - 01:22:02.680, Speaker C: I is going to be the values in our first column, J will be the value. In our column we'll have our composer. This is passed into this function. The standard composer handles creating the circuit so the composer has a lookup table attached to it. The lookup table is just a wrapper around a vector. So to get to that vector, I'm using a zero here and we will push a row of values. So our row of values is a row of scalars.
01:22:02.680 - 01:23:09.390, Speaker C: We'll use BLS scalar and use I. Here we need to pass a U 64, so we'll cast that to 64. 2nd value is from you is XOR, y and J. This version of the library basically defaults to a table that has four columns. We're only using three columns. So in the last column we'll just give it zero. Okay? And that should do it.
01:23:09.390 - 01:23:57.826, Speaker C: This lookup table could be generated by anyone. It could be generated by the Prover, it can be generated by the Verifier, it can be published somewhere, downloaded, whatever. As long as prover and verifier agree what the table is supposed to be XOR, then they can generate this table. Okay, so there's our code that generates our lookup table. Let's continue. Now we need our circuit. So here we will put in the gates and any computations that we need to do in order to clone those gates.
01:23:57.826 - 01:24:51.430, Speaker C: So one thing we need to do is take our left, right and out inputs and split them into four bit chunks as our lookup table is based on four bit chunks. So this is just a bit of arithmetic. Um, do this we'll split in each piece into a high and low part and create a scalar for the high bits. We'll just take the left input and do an integer division by 16.
01:24:54.170 - 01:24:54.582, Speaker A: And.
01:24:54.636 - 01:25:34.520, Speaker C: We need to cast that as 64 bits integer division, that'll get you the four high bits. If you want the four low bits do almost the same thing except you switch this to odd. So there we get our high bits and our low bits and this converts them into a scalar. So we'll do this with all three. So it.
01:26:00.320 - 01:26:01.070, Speaker B: It.
01:26:06.720 - 01:27:56.390, Speaker C: Now our three byte inputs are split into scalars that correspond to their upper and lower bits. Okay, now we're going to include these as variable circuit composer and add input. Need to do that left high, that should do it. This will take the scalar and turn it into a variable. I want to be able to refer to the variable later so I should probably there our scalar input will turn into a variable in the composer and we need to do this with all six pieces. It absurd that I'm typing in front of a bunch of people. I failed typing in school.
01:27:56.390 - 01:29:01.210, Speaker C: It okay. Oh, wait a second. Low these need to be changed too. Okay. All right, looks good. There's one more variable we need, which is after we do these x ors we're going to have the out bits and the out high bits and the out low bits. We want to combine those back together into the out variable here.
01:29:01.210 - 01:30:03.530, Speaker C: So we'll also include U eight. So we will need to convert that into a scalar. Okay, here's all the variables we're using. Next we can add the gates. We're going to use two lookup gates. One for the high parts, one for the low parts. XOR is really nice for this because you can do XOR.
01:30:03.530 - 01:30:09.580, Speaker C: You can divide things up into pieces and do XOR on all pieces and then compose them later.
01:30:14.070 - 01:30:14.820, Speaker B: It.
01:30:26.150 - 01:31:26.630, Speaker C: Okay. So we take our composer and do a flick of gate. Start with our high variables. It as I said, this version defaults to a width four table, but the fourth element may or may not be there. So we need to wrap it in a sum. And this needs to be a zero. So there is a zero variable that comes up along with the composer that you can use in this case, that's really just an empty column we're not using.
01:31:26.630 - 01:32:13.606, Speaker C: So put a zero in there. And there's one more input that we need. This is a public input, which we're not going to use. So we'll just let me label these. This is A-B-C-E. So we are looking up this tuple in the table, and then this last one here is public input. You may in some cases use a public input to specify a particular table that you'd like to use.
01:32:13.606 - 01:33:08.710, Speaker C: We only have one, so we don't need that. Okay, so this is going to check the XOR relationship between the high variables. We have to give the out high variable, so we have to compute this ourselves and put it in here. And this gate checks the relationship between them. In this case, it doesn't compute the output for you, although you do have some arithmetic gates that do work like that. All right. And we'll do the same thing with the low side that's still going to be zero, so I think that's good for our lookup gates.
01:33:08.710 - 01:34:18.670, Speaker C: So this checks that the high bits actually XOR up to out high and the low bits actually XOR up to out low. But then we need to combine those back together and check them against our out here, which is also capsulated in this variable out VAR. So we need one more gate. This is just going to be an addition gate. We're going to kind of reverse this decomposition that we did up here, where we split things into upper and lower. So all we're going to do is take the upper bits for out high bar and multiply them by 16 and that'll give us four zeros in the lower bits. And then we just add out VAR low or outloo VAR to get back to eight bits.
01:34:18.670 - 01:35:52.382, Speaker C: So this is an add gate and we're taking the out high bar out low bar. And the outbars inputs, it we want to make sure that our constraint has that 16 times the high bar plus the low bar equals the outfar on the high bar. I'll label all these later, just like I did these today. Our coefficient multiplier on the out VAR, it needs to be one. But because we're trying to constrain these to be equal to one another or all add up to zero, rather, we need to make it negative. Then we have two more failures that we can put in. But we're not using these, really.
01:35:52.382 - 01:36:42.830, Speaker C: So just zero and yeah, let me label these for you so you can see what they are. And then these are selectors. This is the QL selector that modifies a QR selector, which modifies B. Nothing much modifying because it's one. Then we have the QL selector. No, I already did that. Q o selector.
01:36:42.830 - 01:37:34.310, Speaker C: This is a constant. You see, most of our gates, you can add in a constant as well. And this is public input. David asked, what's the D here? This particular style of gate is written to just have three inputs. So it just automatically puts in zeros for D. We have multiple versions of these arithmetic gates. Some allow you to set every single variable in that long constraint.
01:37:34.310 - 01:38:19.610, Speaker C: Some are more focused. So if you only need three inputs, you can just use the three input version. Yeah, D is the fourth one. David asked, okay, let's see. Will that do it? I think that'll do it. So we just have three gates in our circuit. Two lookup gates which compute the XOR, and one addition gate which repacks those four bit chunks back together into an eight bit byte.
01:38:19.610 - 01:38:36.090, Speaker C: Okay, so if I've done this right and I haven't made any mistakes, we should be able to run this. We'll see. Let's.
01:38:38.070 - 01:38:38.820, Speaker B: It.
01:38:42.870 - 01:39:31.084, Speaker C: Plug up cargo and release. And hey, can you see that? Yeah. Worked. So it goes through the steps, generating parameters that's the trusted setup preprocessing, then creates the proof. The Verifier does their own preprocessing, verifier does their verification, and proof is accepted. So the proof was accepted because our inputs really did correspond to XOR's. And the gates here, here's where we got our inputs.
01:39:31.084 - 01:39:46.148, Speaker C: Left and rights were random, but then we did the XOR between left and right to get her out. It should work, and it did. But what if I mess this up.
01:39:46.154 - 01:39:46.950, Speaker A: A little bit.
01:39:50.120 - 01:40:36.534, Speaker C: XOR and just add a plus one? Then this should not verify actually, you'll see what happens. Okay, now oh, make sure save it first before we compile. Okay, so what happened here is we had a panic. We tried to unwrap error value. Said element is not indexed. This happened while we were creating the proof. So what happened here is the prover in our implementation.
01:40:36.534 - 01:41:37.038, Speaker C: The prover checks as they're creating the proof that their lookup queries are well formed and actually exist in the table. So this is the prover saying that they're not going to create a proof. They're going to quit because they know it's not possible because one of these values was not in the table. It is theoretically possible for a prover to ignore this, try to create a proof anyway. If that would have happened, instead of getting an error value here, the proof would just have failed to verify. So this stopped actually before that verification actually took place. Another way I could mess this up is mess with these scalars here.
01:41:37.038 - 01:42:59.200, Speaker C: So if I put two instead of one save, our inputs should not satisfy this gate. The Xors will be done correctly, but when packing them back together to make the out byte, it shouldn't work because the lower bytes are going to be multiplied by two. So this should not verify. Let's check it out. So now you can see the proof was rejected because our inputs did not satisfy this last gate back. All right, in the interest of time, I kind of skipped past some things that you probably would want to do if you were actually designing a circuit. I only ever checked that the out byte is formed from those upper and lower bits here with this last ad gate.
01:42:59.200 - 01:43:46.400, Speaker C: The inputs left and right were never checked. So this decomposition, where they're split into high and low, this is never checked in this circuit. If you were really doing this, you probably would want to constrain those or check that the left inputs actually correspond to the high and low that we say they do here. This computation is not done in the circuit. This is just the proverzone like private computations. They can do however they want. So there's nothing forcing them to actually decompose these inputs correctly.
01:43:46.400 - 01:44:41.392, Speaker C: Only the outputs are constrained with that last gate. But this actually kind of corresponds to a lot of normal use cases because often you have inputs to a circuit or a portion of a circuit that are outputs from earlier parts, and so they might be constrained in earlier sections. So I kind of was thinking of that scenario when I was practicing this example circuit, but it wouldn't be too hard. I'm not going to do it now, but it wouldn't be too hard to add checks on left and right the same way that we have them here for out. Just by copying and pasting this, all I'd have to do is change the out to lucky red. Should work. Okay, that's it.
01:44:41.392 - 01:46:07.190, Speaker C: Are there any questions over any of this live coding part? Any questions about the gates? Or questions about why I did certain things? Joseph says great demo. Thanks. You're welcome. A little bit more for questions in case someone is thinking hard and typing question. I'll just say some more remarks on this repo. The one that I'm using for this exhibit is a little bit out of date. It was the easiest just to get up and running for this exhibit, but our best version of this is located at it's called Arc Plonk, A-R-K Plonk, and it uses the ArcWorks backend.
01:46:07.190 - 01:46:47.220, Speaker C: If you've been doing some of the ZK hacks, you've probably already seen ArcWorks and know a little bit about it. I think there was a presentation on it. So, yeah, we're porting this library over to Arc Plonk, and I'll just give you the tab here. Rust ZKP arcplunk. The library is not complete yet. We're working on it. But it's actually a little nicer than this one that I'm using here.
01:46:50.280 - 01:46:50.770, Speaker B: Very cool.
