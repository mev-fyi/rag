00:00:03.370 - 00:00:28.454, Speaker A: Okay, we should be good to go. Everyone, this is Medboost community call number seven. I'll drop our agenda in the chat here. And yeah, first off, I will just apologize to everyone. I had the time wrong on this forum post. I think some people showed up an hour ago that was due to daylight savings. Ah, again, really sorry, that was my bad.
00:00:28.454 - 00:01:01.310, Speaker A: There is a calendar invite I maintain where I can just see the time in a better time zone for me. So if you want to be added to that, just dm me an email and it's probably a nice way to keep track of when these calls are happening. So again, sorry about that. And yeah, thank you for showing up now even with the confusion. So let's just dive in. Let's begin with some DNEB updates. Let's see.
00:01:01.310 - 00:01:37.034, Speaker A: I don't think there's too much more from previous calls on the builder specs. There was a change to some of the message types just based on changes in the consensus layer. I think people have pretty much digested those at this point. But yeah, I will in the new year cut like a formal release of the builder specs. We might want to look at doing that for the relay specs as well, but I think people are generally on top of it. So that's good. Next up, any implementation updates? Let's see.
00:01:37.034 - 00:01:44.430, Speaker A: I think Chris was here, or maybe if Sarah's around. I don't know if you want to briefly touch on some of that. I think there was a new relay release.
00:01:45.650 - 00:02:24.460, Speaker B: Yeah, absolutely. Sarah is on an airplane right now, otherwise she would be giving the update. There's a new relay release with Holesky support. Mefboost and relay. They are compatible for the new builder specs and they are running on definite twelve without issues so far, particularly mafboost runs on. I will drop the specific tags in the chat and the block builder also supports four and can build forward for four transactions, but doesn't support bundles with four for four transactions yet.
00:02:27.920 - 00:02:45.270, Speaker A: Great. Yeah, happy to hear there's progress. And yeah, everyone keep an eye out for those releases. Have you heard Chris of any? Do we know how well things are running with the blobs? I think I hear from some of the Devnet efforts that generally things are going pretty well.
00:02:46.920 - 00:02:54.710, Speaker B: Yeah, it looks it's relatively stable now. Maybe paratosh can give more updates on this.
00:02:56.120 - 00:03:20.630, Speaker A: Okay, great. I don't see Perry on the call, but if he shows up we'll check in with him. But yeah, Julie, I've been hearing things have been going well, so it's nice to hear. Four for four is like a pretty big change. So good to hear that things are going smoothly. Otherwise. Yeah, I had here testing efforts.
00:03:20.630 - 00:03:51.280, Speaker A: Yeah, I think just beyond what Chris and I have said, things seem to be going pretty well at this point. Danab main net will be in Q one next year. So especially for the relay operators here, just keep this in your timetable. There will be a hard fork. You will need to update your relays. There are some changes, so definitely keep an eye out for that. And yeah, just be ready to go.
00:03:51.280 - 00:04:32.142, Speaker A: We'll have another one of these calls, I mean, certainly in the new year. And yeah, we'll definitely be increasing our coordination efforts as we get closer to the fork. But now is the time to make sure that each of your individual teams are moving in a place where you'll be ready for that when it happens. I think everyone pretty much will be running some fork of the relay code, except maybe the box route relay. At this point, I'm not sure who all we have here, but. Yeah, so if you have a fork of the flashbox relay code, that's where you'll start. Otherwise, yeah.
00:04:32.142 - 00:05:19.372, Speaker A: Take a look at the builder specs and see what changes you need to make to your relay implementation. Okay, I'll just open it up then. If there's any questions about the specs implementations beyond the update that Chris gave any of the testing efforts, seems like no. Okay, great. Probably a signal that that's good for now. Next on the agenda, we have ecosystem updates. Yeah, I think this is kind of just time for various discussion.
00:05:19.372 - 00:05:36.490, Speaker A: I think in the past this has been slotted for things around like Optimus Greeley. I don't know if Justin wants to give an update on some of the work they've been doing with this sort of second price auction format they've been trying out or anything else anyone would like to discuss.
00:05:38.380 - 00:06:24.952, Speaker C: I mean, happy to give an update. I think Alex is also here. Basically, we've implemented the logic and we've made announcements. For example, on discord, we try to personally give a heads up to every single builder. So basically what we're doing is we're trying to capture the delta between our relay and the next best relay whenever we're the top relay. And in terms of integrations, it only happened like a few days, maybe a couple of weeks ago with the first builder. Now I think we have the top three builders integrated, I believe, possibly beaver like, coming on very soon.
00:06:24.952 - 00:07:13.690, Speaker C: But at least Rsync and Titan have already been seeing some of the rewards from this adjustment. So what we're doing right now during the testing period is sending the whole delta that we can capture to the builders. And I think we've captured something like $1,000 at this point. So it's not much, but we're only just getting started. So hoping to have more builders integrate and hoping to have better strategies in terms of the heuristics to capture the delta. So in some sense, we're playing a very similar game to the searchers and the builders, and it's going to be a learning curve for us as well.
00:07:15.180 - 00:07:27.390, Speaker D: Justin, that's super interesting. Do you measure somehow whether builders are missing blocks or losing? Because that's the big risk for them. Is there a way to capture it?
00:07:29.600 - 00:08:03.450, Speaker C: Right. I mean, we do know whenever we made an adjustment to the bid and we happened to lose the auction because our bid was too aggressive, and ultimately it was some other relay that won. The good news here for us is that if a builder is going to win the auction with us, then they're most likely going to win the auction on another relay anyway. So even if we don't win, if we were too aggressive on the bid adjustment, the builder would still win on whatever the next best relay is. That's kind of a.
00:08:05.420 - 00:08:27.490, Speaker D: As long as we don't play the game, then Kubi here sends a bid of $1,000. You guys adjust it to $950. But if by the time. If he wins through me, it's kind of like, fine, so he didn't save the money, but kind of like that. But if I play that game, too.
00:08:27.940 - 00:08:44.230, Speaker C: If you play that game and you have managed to capture a bit, a delta between, then you can give a kickback, or if you happen to be too aggressive as well, then now the third best relay kind of comes into play.
00:08:47.080 - 00:09:14.732, Speaker D: I'm thinking the risk, as I see it, risk is too strong of a word. But basically, if Kubi sends us something and we adjust it, and then Beaver wins because he was willing to. That's the thing, how it's among us or something. That's the less interesting thing, I think, about builders losing because of it to a different builder. That's the thing that I'm interested in.
00:09:14.866 - 00:09:15.164, Speaker A: Yeah.
00:09:15.202 - 00:10:02.460, Speaker C: I don't think that can happen, at least not in the normal case. We have a top bid, and it's for well defined builder. It's either for, let's say, beaver or Titan, one of the two. And it's not like we were too aggressive on Beaver and therefore Titan wins. The titan bid just never shows up on the get header when it was called get header, only returned a single header. Now if we were too aggressive, then basically the next best get header takes precedence and it might be yours, Yuri. And at that point, whoever was the top one, let's say it was, you know, they would likely also be the top builder on your relay.
00:10:04.640 - 00:10:21.270, Speaker D: Got it. I'm not sure. A super awesome. I'm poking at it, but not because I don't like it. I'm poking at it because I want to understand. Can I think through and see understand. My thinking is because this is a latency game and the last bids are coming in the last 100 millisecond or so.
00:10:21.270 - 00:11:07.920, Speaker D: If you get Kubi's bid and he's offering 1000 and you adjust it to 950 and I get an offer from Beaver and it's $1,000. But I saw it and you didn't, then that's the thing that I'm kind of worried of a different bid somewhere else beating that because you kind of tuned it down. So my question here, is there a way to capture it? And I think there's probably right. If the winning bid from somebody else won, you'll know it, right? Like oh yeah, should have won. So I assume you're measuring it and there's like somewhere in the data and if it's zero then it's fantastic. But it is being captured right in the POC.
00:11:09.060 - 00:11:37.630, Speaker C: Yeah. Right now we have the most trivial strategy possible and we're collecting all the data and we're building dashboards and everything so we can optimize everything. But yeah, as you said, if we're too aggressive, then we're going to notice very soon and we'll fix it. But even if we are too aggressive 1% of the time, that shouldn't be a problem. Because as a rough heuristic, if you're the top build on relay a, you're more likely than not the top build on relay b as well.
00:11:40.000 - 00:11:55.570, Speaker D: It's a good question, but yes, your data will show if it's correct or not, just because it's the latency game and the 100 millisecond between my relay and your relay. But it's not that they disagree. This is super interesting. Cool that you guys are doing it.
00:11:59.620 - 00:12:01.990, Speaker C: I don't know if. Alex, you want to add anything?
00:12:03.320 - 00:12:07.408, Speaker D: No, that all sounds accurate to me. These are exactly the things that we're.
00:12:07.424 - 00:12:11.796, Speaker E: Becoming aware of and where we can improve, we will improve and where we.
00:12:11.818 - 00:12:13.656, Speaker A: Cannot sometimes like the other relays will.
00:12:13.678 - 00:12:17.930, Speaker E: Just pick up what we mess up, which seems very healthy as well.
00:12:19.180 - 00:12:24.152, Speaker D: If you need anything from our end on this, whatever that might be like, do not hesitate.
00:12:24.296 - 00:12:26.300, Speaker C: You can make your relay a bit slower.
00:12:28.960 - 00:12:33.230, Speaker D: Okay, we could do that. We're not known for speed, so it's fine.
00:12:34.880 - 00:12:56.070, Speaker C: But yeah, what we're doing right now is for all of December. During the testing phase, 100% of the proceeds will go to the builders. And then we need to figure out some sort of revenue sharing. It might be 50 50, it might be something else, but we want to be very generous to the builders because they provide the flow, but we also want to distribute it also to some of the relays and things like that.
00:13:02.150 - 00:13:37.070, Speaker A: Cool. Yeah, very exciting experiment and yeah, I think everyone's looking forward to seeing how it plays out. So good luck with the rollout and we'll check back in as things evolve. Let's see, there's a few things on here. Let's go ahead and skip this issue that Max raised on the boost relay. I'll drop this in the chat. So the issue basically is trying to get a better sense of when proposers are actually calling, really both Githeader and git payload.
00:13:37.070 - 00:14:17.290, Speaker A: And right now I don't think this data is in the relay APIs, the historical data APIs. And essentially this issue is asking for that to be added. There's been some discussion on the issue and. Yeah, I just wanted to bring it to everyone's attention. If anything, just check out the issue and chime in if you see something. If there's some issues you see otherwise, yeah, I think it's something we should consider putting into the relays. I think it helps on a lot of fronts around understanding what everyone's doing, how they're doing it, how different games might evolve, especially in light of the timing games that have been coming top of mind lately.
00:14:17.290 - 00:15:03.900, Speaker A: Yeah, I don't think Max is here, but essentially, yeah, I mean, I think one strategy would be using. So Mebus basically sends this uid to each of these requests. And one way to sort of make this linkage per relay is just going from git payload to seeing when the first payload successfully served, using the Uid from that request to correlate to the corresponding Githeader. So I think this should be pretty straightforward to do. And yeah, this is essentially an ask to improve the data APIs. I'm not sure if anyone's had a chance to look at this issue or has any feedback at the moment. Has anyone?
00:15:04.830 - 00:15:40.840, Speaker F: Yeah, I have some feedback. So basically this also would help us to add more transparency to all those timing games because I've already seen some folks on Twitter interpreting the bits received timestamp wrong. So there were people saying like, okay, it's not only p, two P or some other validator that is delaying Brock proposal, but it's kind of everyone, which is not true because it's just a different timestamp. So I think it would just add more clarity to the whole situation.
00:15:44.650 - 00:15:45.900, Speaker A: Yeah, for sure.
00:15:48.990 - 00:15:50.220, Speaker G: Let's see.
00:15:51.390 - 00:16:38.254, Speaker A: Right? Yeah, so Chris does have a good comment here. I think this is probably the big issue is just that the githeader calls are not, you know, let's say for example, this UID I was referencing is not then like, it's really hard to tell which call corresponds to the calls we're interested in. But yeah, this is something we discussed in the past around having them be authenticated and we could potentially move in that direction from here. Just please take a look at the issue and I think we'll just keep it moving from there. Let's see. Right? Yep. PR would be for the relay specs.
00:16:38.254 - 00:16:59.050, Speaker A: Yeah, that would be a good first step to move forward on this. Thanks, Chris. Okay, I see Eugene is here. I believe we have an update about the Pes guild, which I think everyone's been looking forward to for a while. So let's move to that. There you go. Hey, Jean.
00:16:59.050 - 00:17:01.580, Speaker A: Hi. So everyone.
00:17:03.810 - 00:17:43.046, Speaker H: Happy to just jump right into the PBS foundation update? Yeah, I know it's been kind of mentioned at various points. We're going to be officially announcing it. So we'll have a notion page going out next week and we'll have the applications live starting early next week. But the brief update is that the PBS foundation exists. We kind of have two general areas of focus in terms of granting. One will be more on the infrastructure support side. And so applications there will be open to independent relays looking for support.
00:17:43.046 - 00:18:24.102, Speaker H: And as the application goes live next week, we'll have more details as part of that. And the other side of it is focused on research. And that's sort of a broad topic that also will include kind of community events or educational materials around proposal builder separation related topics as well. So we did create for now a public Google Doc because we would love to request some ideas from folks. And again, this will be shared amongst the community. So it's for everyone's use here. But to pretty much brainstorm, what are topics that folks would love to see rfps on more broadly and also including links to any other rfps that are taking place.
00:18:24.102 - 00:19:33.974, Speaker H: We know the Uniswap foundation has a somewhat relevant RFP that they're going to be revising shortly, and we'll make sure to link to that here. And in case anyone else is aware of any other types of rfps or RFP topics, there's a link here to a hack and D doc that Stokes has put together, and I'll pass it back to him in a moment so that he can talk about some of the research topic areas that are of interest. But yeah, I also just want to mention that I joined as the initial grants lead. I come from a background in governance research and being around the space mostly in governance research environments for the last couple of years, and I've been leading some research on grant systems specifically. So I am by no means a PBS MeV world expert, but I am quite familiar with the granting space and building out kind of robust feedback infrastructure and things like that. So I'm really excited to get to work on this independent effort where the goal is really to just fund high quality work happening, whether it's on the research side or that infrastructure side. Yeah, I figure I'll keep that part nice and brief.
00:19:33.974 - 00:19:58.580, Speaker H: Happy to answer any questions folks have. And yeah, we'll make sure to provide much more color and share in the community next week once we have the formal announcement and the applications. And we're going to have a single public notion page that will capture kind of info about the foundation and the applications and our announcement and everything. So we'll make sure that gets shared out next week as soon as we're ready.
00:20:01.960 - 00:20:40.950, Speaker A: Great. Yeah, thanks so much Eugene. I think this is really exciting to see this effort spin up. I've been collaborating some with Eugene over the past few weeks on this stuff and yeah, he's been great to drive all this forward and herd all the cats and there's just so much coordination work behind the scenes that never really sees the light of day. But yeah, I think these types of things always take more work than anyone thinks. But yeah, it's very exciting to see that we're getting to a place where we can kick things off and yeah, so he dropped this Google Doc here. So this is probably a nice place if anyone has any ideas or things they'd like to see.
00:20:40.950 - 00:21:17.676, Speaker A: I did start working on a list of RFP and yeah, I spend most of my time pretty close to the core protocol. I could almost say, hey, I want there to be like this o one out in the world. And then how can we make it the most secure with respect to all this MVB stuff? Happening off chain. And how does that look? So there's a few things I called out. There is a link to the stock in the link that Eugene posted. I think it's still kind of in a draft mode. So yeah if you want to take a look just dm me, I can share it.
00:21:17.676 - 00:21:59.310, Speaker A: I'm happy to do so. But the reason that I wanted to bring up here is I guess I'll touch on some of the topics in the doc so far. And then really I wanted to just bring it to your attention to open it up for the floor. If there's anything that you guys have top of mind. I think I messaged some of you independently already, but yeah, very much. We want this to be like a very collaborative ecosystem wide effort. So if there's something you see, if that's even just a grant to work on some of the software in your relay stack or your mev stack, otherwise this would be a good place to get some attention there.
00:21:59.310 - 00:22:41.130, Speaker A: Let me just go through here. So I call out some different open source projects here. I think that'd be like a pretty hard constraint in terms of software being open source and being contributor friendly and all this. But if you have that and want to have it included in some sort of RFP for this PBS foundation, please let me know then. I have some stuff around medboost, various things. You can kind of look at each part of the process and think about how we can improve it. So even starting with the validator registrations right now we just have this signed message.
00:22:41.130 - 00:23:22.824, Speaker A: But all the validators really signing over is just like some metadata for their preferences. I know even in the past we've talked about extending this message. Like I think even yuri a call or two ago suggested having the relay list signed over as know the relays that the registrations intended for. I think that'd be a nice addition. So I called it out in the past. I linked to thinking how can we iterate this process even more? And so for example that could look like putting them on chain, even using this blob space and having some kind of like, I don't want to say sovereign roll up, but some sort of situation where the registrations all land on chain. And so we have this shared view of them.
00:23:22.824 - 00:24:04.720, Speaker A: I think that'd be really nice if only because iterates us towards more of this enshrined PBS setting that I think ultimately we're all trying to work towards. I think there's some open questions around improving the. So you know, even just a second ago we talked about the fact that these calls for githeader are not authenticated. We can imagine having them be authenticated. I think that would make a lot of the data analysis more precise around what's actually happening. And again, especially in light of timing games, that'd be really cool to have that greater precision. You can imagine someone's going and looking at different bundle merging or block building algorithms.
00:24:04.720 - 00:24:47.052, Speaker A: I have something called out for that. EPBs itself is like a whole different research topic, but I think this is something that should definitely be included. Censorship resistance, different inclusion list designs, super important. Yeah. And then I have sort of like a laundry list of different testing, security performance concerns like this, just around all the software. Broadly, we effectively have built this huge supply chain, pipeline off chain, so to speak. And yeah, it's very exciting to have all this stuff be very dynamic and evolving, the more we can spend as a community around testing and security of all the software.
00:24:47.052 - 00:25:12.600, Speaker A: That's all the. Yeah. Like Eugene said, I think there'll be a more formal sort of RFP announcement next week, but yeah. So I want to call it to your attention. If there's anything today that brings to mind, it'd be great to hear it. Does anyone have anything already that they see or like different areas or causes of concern? They'd like to have an RFP.
00:25:23.520 - 00:26:20.940, Speaker C: On the authentication of get header. I think this is going to be a priority in the medium term. And the reason is that as the proposers get more and more sophisticated, they will start polling get header, as opposed to making a single get header call, and that will break cancellations. And so the natural way to restore cancellations is to have this authenticated get header. Yeah. In the short term, there's a bit of a tragedy of the Commons here, in the sense that even though in any given slot it might be beneficial for a proposer to break the cancellations, that might lead to the builders ultimately providing lower bids, because they have to compensate for more risk. And so it might be net negative for the proposers overall.
00:26:20.940 - 00:26:53.530, Speaker C: What I expect we could do is basically have two API endpoints, one which is authenticated for cancelable bids, and one which is unauthenticated for non cancelable bids. So one would be streaming in real time, some sort of websocket or whatnot, and then the other one would be callable only once authenticated, and that would give you a snapshot of the best cancelable bid at the point it was called.
00:26:54.460 - 00:27:09.788, Speaker D: So basically, Justin, the unsigned ones would be for all the data, analyzing everything just for transparency. And when the proposer actually wants it, okay, you get one shot to sign it, get the result, and that's it. That's kind of like the idea, right?
00:27:09.954 - 00:27:20.610, Speaker C: Yeah, exactly, yes. And when you call the one shot, it needs to be greater than or equal to the public one.
00:27:24.740 - 00:27:28.212, Speaker D: So does it move limits the value.
00:27:28.266 - 00:27:42.520, Speaker A: Of the public monitoring. If they're always getting a view of the lower non cancelable bids, does that impact monitoring? Extensively.
00:27:43.980 - 00:28:49.020, Speaker C: I mean, it does impact the monitoring from the point of view of the builders. I guess one update that we should disclose is we have made it public, but we've provided a new API endpoint, I believe it's a websocket endpoint where we tell the builders what is the top bit, with very low latency, so they don't need to keep calling get header. So I guess we need that in addition for transparency on the builder side, in addition to the authenticated and non authenticated get headers. I mean, we could also move towards a sealed bid auction, and that has all sorts of advantages. But the downside that I see with a sealed bid auction is that you only need one malicious relay who's kind of defecting, and they can screw everyone else. And so the more trustless approach is to have the current public auction.
00:28:54.560 - 00:29:53.510, Speaker D: Justine, why did you said earlier that the signed bid needs to be higher than the other, than the unsigned one? The unsigned one come and go, and it could know it's for data purposes and somebody could put a bid, then cancel it, and it moves a million times, and by the time you move to the other one, then maybe you saw a higher bid in the unsigned one. So I was reading your proposal as the proposer. The proposer asked once at the end signed and get the actual result. That's the one bullet in the gun to actually get the bid, and that's the only one from then he could ask to sign it and get payload, et cetera. The other is more for like informational purposes. So it could move, it could go high up and down and up and down, but eventually it doesn't mean that the signed request is going to be higher than the unsigned one.
00:29:54.360 - 00:30:49.940, Speaker C: So the one that's unsigned has non cancelable bids, meaning that it's up, only it monotonically increases, it doesn't go up and down. The only reason why the top bid would go down is if you cancel. But if we only have the non cancelable ones on the public feed, then it would be up, only the one that can go up and down. It would be the one that's authenticated with the cancelable bids, but because you only call it once, that's irrelevant. But because it's this one shot bullet, as you said, just for convenience on the point of view of the proposer, we would just give them the max of cancelable and non cancellable ones. I guess. Another reason to keep the existing API endpoint, not just for transparency, but also for proposers that haven't upgraded their mefboost setup, so it's kind of forward compatible.
00:30:51.640 - 00:30:53.860, Speaker D: That latter one is a good argument.
00:31:01.210 - 00:31:32.100, Speaker A: Cool. So yeah, I mean, it sounds like there's something here we could definitely do around perhaps just having two endpoints. I think what Justin said makes a lot of sense. So yeah, again, I'll point you to the stock that Eugene dropped in the chat. Essentially, if there's any things like this, this would be a nice time to call them out. And yeah, this will ultimately end up compiled into some RFP for this new effort. And yeah, should be really exciting to see where all that goes.
00:31:32.100 - 00:31:53.250, Speaker A: I think at this point, unless anyone has anything else there, there is one more agenda item. And let's see. Casper, I think you wanted to say something about your post around timing games. Did you want to say something there?
00:31:54.260 - 00:31:55.010, Speaker D: Sure.
00:31:55.460 - 00:32:58.724, Speaker G: So yeah, Mike and I recently published a post on timing games on each research, and I just thought it might be worth mentioning one or two things that are in relation to relays in specific. So maybe TLDR timing games are starting to be played. So block proposals are delaying blocks to earn more mev. I think Tony actually might have some more data on this. But aside from that, obviously there's some implications from timing games being played, some being possibly more missed slots, some more involved implications could be stuff around a tester timing games. So the idea that if proposers start delaying their proposals, there might be incentives for testers to delay their attestations. But yeah, lots of more details in the east research post.
00:32:58.724 - 00:33:49.092, Speaker G: The two things I wanted to mention more specifically are potential mitigations that would involve relays and as opposed to mitigations that are more on the protocol side, and they're kind of very opposite kind of approaches. One is more the decelerationist and one is the more accelerationist kind of approach. So currently the honest specs are defined as proposing blocks at t equals zero. So basically at the beginning of the slot. So we know that that's not incentive compatible. And so we're starting to see deviations. One way that this could be mitigated in an unsustainable non incentive compatible way.
00:33:49.092 - 00:35:01.470, Speaker G: But possibly using social coordination would be essentially for relays to stop accepting bits after t equals zero. Essentially meaning that if you then want to extract more mev, you would need to have some sort of direct relationship between proposer and builder to circumvent the usual mev boost pipeline via relays. So that's one thing, there's obviously drawbacks and benefits to it. I guess the benefit here is that it reduces the kind of social coordination from all validators to a set of relays. The obvious drawback is that it's still rational to defect, and so in the long run, or unclear how long this would hold, but essentially vertical integration between builder relays coming around would allow for defection between enabled defection for validators. And the second approach that is.
00:35:04.080 - 00:35:04.396, Speaker A: Kind.
00:35:04.418 - 00:36:31.480, Speaker G: Of the opposite of this kind of relay enforcement, would be something brought up by Justin. I believe this idea of timing games as a service, which is basically saying relays are well positioned to know the latency between relays and validators. And so they can essentially, instead of validators requesting a header, the relay could push a header at a point in time when they think it would be optimal. So essentially democratizing access to this timing games mab. And so the benefit here is kind of clear that relays are very well positioned for these kind of latency considerations, and basically it allows homestakers to basically easily access this mev. The drawback here is that it's accelerationist and kind of gets us immediately very close to also the negative externality of timing games. And I think one thing that's not entirely clear is how as a proposer, you would not end up relying on a single relay, doing these timing games as a service without reintroducing some complexity here.
00:36:31.480 - 00:37:41.490, Speaker G: Again, basically, if this timing games, because it's a push kind of format from the relay going to the validator, you kind of have to make a decision. If you get a push from relay a at say 2 seconds into the slot, and, you know, you might receive a later push from relay b, which header should you sign? And so that becomes a complex decision in itself. To me, that's at least one open question, aside from the cost benefit analysis more broadly. But yeah, I think those two ideas. So the kind of relay enforcement versus the timing games as a service are two mitigations on the cards besides others that I think makes more sense to do offline, but that I wanted to bring to attention since a bunch of relays are present here. And also Mike, please feel free to add anything.
00:37:43.220 - 00:37:44.800, Speaker E: He covered it perfectly.
00:37:47.220 - 00:37:50.130, Speaker D: I'm curious what the other relays think about it.
00:37:57.400 - 00:38:54.788, Speaker C: I mean, we're starting to get a feel for what's happening on the proposer side of things, right? I think some proposers have been stealthily playing timing games for some period of time, and then ptp.org made an announcement, and now we're starting to see the floods open. And, yeah, my prediction is that within a few months, we're going to have the majority of proposers playing timing games. In terms of the relays, so far it hasn't been very competitive, but there are, for example, Titan. Maybe Kubi's on the call, he can talk about this. Like, Titan built an ultrafast relay in rust, and they could defect, and it just takes one defector to force the hand of everyone else. And so I don't see the equilibrium lasting very long.
00:38:54.788 - 00:39:44.992, Speaker C: I mean, I'd be happy to try and come up with some sort of short term agreement, but it feels like it depends quite a lot on the social layer, and it's not necessarily sustainable. The good news here, in my opinion, is that once we've picked the low hanging fruit, the timing gains are actually, like, fairly minimal. We're talking about optimizing, let's say, the last 120 milliseconds for someone who's really sophisticated. And 120 milliseconds is only 1% of the slot time. So you're potentially just optimizing 1% of Mev, which is hopefully very small. And this 1% optimization comes at a cost. It means that sometimes you miss a slot.
00:39:44.992 - 00:40:29.220, Speaker C: And so if you were to miss more than 1% of slots, then you're more likely than not going to be net negative, because you're making 1% 99% of the time, but 1% of the time, you lose 100%. So I think one good outcome is just that we have more sophisticated mefboost software that just picks all the low hanging fruit. And right now there's like a good two, three, maybe three and a half seconds of low hanging fruit. And then once that's picked up, we're left with the really advanced timing game, which is fairly minimal.
00:40:35.300 - 00:41:03.884, Speaker D: My own sense here, it's almost like a knee jerk reaction. Like, I really don't want relays to police anything. It makes no sense. And it's kind of like, yes, it's always easier. Centralized is easier, always, no matter what. So instead of do, like, the hard thing, can we do the small? So I am like, even before the specifics, the idea of like, okay, let's take the relays are already there and have them coordinate something. I don't know, it just feels like the wrong approach for me.
00:41:03.884 - 00:41:58.216, Speaker D: More towards the other approach that Justine proposed, not even talking about. How about the attestation boost? Kind of like, okay, instead of doing it just like 400 point, whatever that is, do we want you to do it over time, et cetera. There are some long, like, it's outlined in the e three search post. But really, if the entire point of PBS and Mev boost, we're kind of like, listen, it's probably better if everybody behaves in the right thing and let's do bad thing. Like, I even wrote about it. All the stakers together now have $60 billion of stake and to do what's better for if it is the right thing for them, if they coordinate, but they don't, they do the right thing for them. And so it feels off to choose and let them sandwich users or whatnot.
00:41:58.216 - 00:42:43.144, Speaker D: Because you could say, oh, how about the Relays? Throw out all the sandwiches too, because it's bad. So all these kinds of like, this is like, approach incompatible from my perspective. This entire thing, the entire MeV boost and PBS was the idea that, okay, these are the incentives, these is what people are going to do. Let's work around that. And putting relays as a policeman to, oh, don't do what you're supposed to, and it is their incentive. We're not playing any latency games, but since the days of proof of work, I would argue that they should wait as long as they can. They should be playing the latency games and adjust based on what would be the orphan, the fork rate and how much money to make them and choose the optimal one.
00:42:43.144 - 00:43:00.130, Speaker D: That's also very PBS and MeV boost aligned, or that's the right approach. So anyway, that's my take specifically. I don't see that relays should be taking the policing role in any way. It's just off.
00:43:13.480 - 00:43:49.408, Speaker A: Yeah, I mean, I think generally the more we can keep relays as neutral operators that are just doing a very minimal set of things, I think that's definitely for the better. And I think there's kind of Justin's point that there's probably a lot of low hanging fruit that might not even touch the relay. And once that's sort of taken care of, then there might be some stuff on the margin. But the complexity that you need to profit from them is just so advanced that it ultimately might not be an issue just because so few people even try to go after it.
00:43:49.574 - 00:44:02.870, Speaker E: Well, if anything, Alex, the relay enforcement is simpler than relay timing games as a service. Right? Like if we ask the relays to do this timing games as a service thing, that's a bigger lift for them, I guess.
00:44:03.480 - 00:44:18.570, Speaker A: No, certainly. But maybe just making might not have to, right? I mean, I think that's kind of the point is like if timing games as a service only captures this last 1%, right, then it just might not even be important.
00:44:19.500 - 00:44:47.090, Speaker E: Well, I guess timing games as a service is we could just start by having meth boost default call at like t equals two or something, and then timing games as a service is compressed. But going from what we have now to timing games as a service is potentially like a large amount, like a large amount of mvp, right? Like the default behavior of calling at t equals zero versus timing games as a service like that. Delta is currently very big.
00:44:48.500 - 00:45:04.120, Speaker C: The suggestion is not to do timing games as a service. The suggestion is to make a few lines of code change to mefboost to pick up the low hanging fruit so that the optimization opportunity is only 1%. And then maybe timing games of service is not even required.
00:45:05.180 - 00:45:29.120, Speaker E: But to get to the point where that last 120 milliseconds, that means everyone on their local MEP boost has to make the decision about when they call, right? So you do need to do that like latency calculation at some point. Like who's doing that? Are we having the relay do it? Or are you saying having the validator configure it based on their local estimate?
00:45:31.700 - 00:46:30.740, Speaker C: I mean, there's going to be some amount of time to do the broadcasting to the validators, let's say 500 milliseconds, and then the proposer can see that they're at most, let's say 200 milliseconds away from every single relay. And then they can just pick the highest header 700 milliseconds before the end of the slot and end of story. Now sure, the 700 milliseconds can be compressed by a few tens of milliseconds if you want to be really sophisticated, but the low hanging fruit can be picked just by making simple modifications to the mifboost software. And I mean, even just adding one line of code, which is delay by 2 seconds before calling a header, that already reduces by half or more than half the low hanging fruit.
00:46:34.200 - 00:46:39.510, Speaker D: What do you mean by that? Like, what's the proposal that you call the low hanging fruit here?
00:46:40.120 - 00:47:02.556, Speaker C: Well, right now there's 4 seconds worth of playtime that can be played with, and 4 seconds is just unnecessary long. And so you could just call get header 2 seconds in. And so now the play opportunity is only 2 seconds. Well, you can delay 2.5 or something.
00:47:02.738 - 00:47:18.256, Speaker D: But sometimes proposers do require that time not long ago, like some lido operator, took 3.6 seconds to process on it and or whatnot. And it depends on their location, it depends on their machine, et cetera.
00:47:18.288 - 00:47:18.870, Speaker A: So.
00:47:20.920 - 00:47:34.730, Speaker D: It'S not always the case. I would argue if we cut it by 2 seconds, these operators are off, and maybe that's okay, but we should be aware of it.
00:47:35.660 - 00:47:42.684, Speaker A: I think also this becomes a centralizing vector, right? Where to maximize your API, as a validator, you'd want to be as close.
00:47:42.722 - 00:47:43.816, Speaker H: As possible to relays.
00:47:43.848 - 00:48:49.670, Speaker A: And this would really fight decentralization, if relays are starting to do this. Timing games as a service, right? I mean, we're trying to not do timing games as a service is the idea. Right. And so I think Justin's just saying that there is a lot of low hanging fruit, where you could imagine that boost is calling multiple times across this four second window, or even just waiting. Assuming bids are monotonic, which generally I think they are, then you get to a point where, yeah, wait 2 seconds, two and a half, there's some natural back pressure, because the more you wait, the more risk you run of missing your slot. So, in equilibrium, you might get to a point where a lot more of this timing game of Bomev is being extracted via the proposer. And then the return on investment you get from waiting longer and playing this game will just be so low beyond that point, that we might have a nice equilibrium that is more incompatible than, say, having relays do any fleecing, so to speak, on their end.
00:48:59.730 - 00:49:18.610, Speaker F: I'm not sure about that. So, just calling get header as a standard in second two, because we do see a lot of reorgs, especially in the first slots. And I guess this is not the big sophisticated validators, this might be already the small ones. So I think it's just making their life harder.
00:49:20.070 - 00:49:54.350, Speaker A: Well, right. So then now you need to be aware of your proposal with respect to your slot in the epoch. That's also not a huge ask for the Cl to be determining, because ultimately, this is all driven by the validator client, and something like that, they should know. So, again, I don't think there are any silver bullets here, but we can probably do, again, low hanging fruit. There's probably a lot we can do to improve the situation quite drastically, without putting more of these concerns at the relay, which I think everyone wants to avoid.
00:49:57.330 - 00:50:07.470, Speaker F: I would be just afraid that if you delay the call by default that some validators will also delay their attestations by default.
00:50:08.530 - 00:50:09.750, Speaker D: I it.
00:50:09.820 - 00:50:21.350, Speaker A: Well, hopefully not. Those are like tracks in the software. That would be a pretty advanced modification.
00:50:23.630 - 00:51:48.906, Speaker G: Not really. It's equally easy to change and possibly also rational. I guess that's the whole other side of the coin of yes, certain things are not incentive compatible, but there's some sort of negative externalities to timing games being played very aggressively. And so it's a very funny trade off space. So timing games as a service is a very natural endpoint almost. It's basically enabling proposers to stay, quote unquote naive and extracting that Mev timing game, and arguably even the relay, might be better at updating their timing, timing message, the timing of their messages, than a homestaker who now has to consider, oh shit, now we all of a sudden have blobs, do I need to adjust my release time? And so if you expect every homestaker to be aware of this kind of thing, it's unclear if that's better. But then also if you do, timing games as a service has other drawbacks.
00:51:48.906 - 00:51:55.700, Speaker G: So it's a complex trade off space that's very much not clear to me.
00:51:59.600 - 00:52:02.110, Speaker A: Yeah, I mean, that's true. So then the question.
00:52:04.240 - 00:52:35.460, Speaker I: Go ahead, I'm not sure it's Max. I was going to say that I think Asus agree that keeping solo stakers competitive should be a primary concern here. So if we have large numbers of staking pools eventually playing these games themselves, then it would feel, if you zoom out a bit, it would feel healthier for the economics of the space to provide a safe way of allowing solo stakers not to have to do a huge amount of work to keep their AP wise competitive.
00:52:39.340 - 00:53:32.990, Speaker A: Right. So yeah, I mean, I think in the limit, it does look like timing games is a service. And this is what I was just going to say a second ago, is that let's say that we have some low hanging fruit fixes we can deploy in the next few months that buy us time before we see the advent of these really advanced strategies in say twelve months. And maybe by that time we bought more time for research. There's things we can do in protocol around incentivizing timeliness that might make these moot completely. So yeah, I mean, I hear everyone, but we also need to keep in mind that there's things we can do that might have different horizons of effect. And yeah, to the extent that we can delay putting all this complexity and latency optimization and geolocating proposers and all this stuff within the relay, I think the better.
00:53:46.990 - 00:54:54.770, Speaker C: And one idea that I've been toying with is what I've been calling a tester proposer separation. And so what a validator could do, in theory, is they could have two nodes, one that does the proposing, which is collocated with the relay, and then the other one that does the attesting, which is much more decentralized, because if the timing games really become sophisticated, we don't want their testers to be geographically distributed, because that's where ultimately the security comes from. But it is fine for the proposers to be geographically centralized, and that can be done in software, just by having two nodes in two geographic lead different positions, but it can also be done at the protocol layer. So that's something that we've been thinking about, and I think Mike and I will be releasing a write up on that very shortly.
00:54:57.110 - 00:55:44.340, Speaker D: Justin, taking this further, have you considered the idea of, like, it's not PBS really, at that point, but have you considered that it should be that testers who require payment to a test, basically a tester, is capturing the MEV. If you pay me 50% of whatever, you're taking it to yourself, I will sign it, and if not, then I don't. And that becomes a game, because it always feels to me that the MEV supply chain stops at the proposer, which is one step, one stop too early, and it's really the proposer. So if you're thinking about proposer behavior and whether they sign it or whether they don't sign it, then proposers should really start charging. Attestors should really start charging the proposer because they have power.
00:55:46.070 - 00:56:35.140, Speaker C: Yeah. So what you're describing is actually pretty much exactly what Francesco wrote on a free search called MeV smoothing, which is that the MEV is smoothed equally across all the attesters. It doesn't go to the proposer. And then there was basically the same construction, but instead of distributing to the attesters, you burn it, and that was called mev burn. The nice thing about a tester proposer separation is that you have this auction mechanism where the chain itself sells the execution slots. So the end of the pipeline or the end of the chain is the protocol itself. It's no longer the attesters there.
00:56:35.140 - 00:57:12.394, Speaker C: You can have the protocol capture the MEV. So I'm not too worried about that. And also, things become a little different with attestus. The dynamics are a little different. We're talking about group dynamics versus individual dynamics, and also what I call entropy, which is basically like the different types of messages that make sense to sign, kind of changes quite dramatically. As a proposer, I can sign whatever block hash I want. On the other hand, as in a tester, I can really only sign two messages.
00:57:12.394 - 00:57:22.766, Speaker C: Message number one being I saw the proposal on time, and message number two being I didn't see it on time. And so things do change there quite dramatically.
00:57:22.798 - 00:57:38.600, Speaker D: Yeah, that's actually the reason I was saying like, proposer does keep half and pass half, and you could even think about passing some to the next proposer. But I agree, proposer also has power. So anyway, we could jam on it some other day.
00:57:42.810 - 00:58:39.770, Speaker G: I mean, one thing I would note at this point is APS is extremely exciting as a research direction, but it's also, I think, in terms of scales, on a different order. In terms of timing games are just going to be played very quickly. If we see a tested timing games, we'll be found out much sooner than we will be ever able to ship Aps, should it come to that. But yeah, there's a bunch of nice things that aps could get in terms of. You could basically, I'm not sure if you mentioned it, I don't think you did. But proposals are basically treated as sophisticated actors who you can then penalize extremely heavily for missed slots. And so that kind of prevents a tester games to the extent that it's not worth it to play timing games so aggressively.
00:58:39.770 - 00:58:43.210, Speaker G: But yeah, different timescales, I would argue.
00:58:48.210 - 00:59:07.060, Speaker C: And in some weird sense, it might actually be good if our testers do start playing timing games, because we'll have real world data and ethereum, being anti fragile, can just learn from that and have ultimately a better long term design. Oh, anti fragile Mike, I love it.
00:59:19.150 - 00:59:59.050, Speaker A: Cool. Yeah, APS is definitely exciting direction to keep exploring. And I think on that note, we might go ahead and table the call. Are there any closing comments? Anything else anyone has? Okay, great, thanks everyone. And yeah, I'll see you all in the new year. And again, sorry about the timing mix up. I will double check and triple check future schedulings.
00:59:59.470 - 01:00:01.130, Speaker G: Timing games are everywhere.
01:00:06.590 - 01:00:07.850, Speaker A: Okay, thanks everyone.
01:00:08.000 - 01:00:09.894, Speaker C: Thank you guys. Bye.
