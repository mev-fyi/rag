00:00:03.380 - 00:00:26.900, Speaker A: Okay, that should be it. Let me grab a link to the agenda. Where did it go? That's not it. There we go. Okay, there's a link to the agenda in the call. Welcome everyone. If I've done my accounting correctly, this is community call number six.
00:00:26.900 - 00:00:57.620, Speaker A: And yeah, I think it's been about a month since last one. I think there's a number of exciting updates that we'll hear from today, so it should be pretty fun. First, I want to start off just talking about dub. So we have this hard fork coming up and yeah, there's a number of things. One thing I'll just mention is, first, just the spec updates. So updates to the builder specs and also the relay API specs. Those I think are mostly done.
00:00:57.620 - 00:01:32.730, Speaker A: If anything, I will make a pass in, say, the next week and make like, formal releases. With what we have right now, I think people have been building around them and haven't been any issues. So this should be pretty good to go. Next up, we should talk about implementation updates. So I think we can probably start off with an update from some of the Flashbots folks. So this would be I'd be looking for an update on Web boost the Medboost relay, and then after that, if there are any other relay limitations that want to give an update for genet readiness.
00:01:34.510 - 00:01:58.520, Speaker B: Yeah, for the flashbot side, we're testing on DevNet Nine. So it's kind of like an active testing. Basically, these are the branches that actively being worked on. And yeah, it's basically just like testing and testing in Devon Nine.
00:02:01.210 - 00:02:16.460, Speaker A: Okay, awesome. I don't know if we've seen any have we had a chance to push Blobs through everything yet? I think that's probably the big question is, as we add these relatively large messages, are there any issues there with at least the specification so far?
00:02:17.950 - 00:02:28.560, Speaker B: We just spun up the info yesterday, so I think we haven't checked it whether we have Blobs or not. So, yeah, we'll check that today.
00:02:29.410 - 00:02:52.760, Speaker A: Okay, cool. Yeah, we should probably have another one of these calls just ahead of the Gorli fork, which I think we're kind of aiming to do before Dev connect. So that'd be early November and just to kind of circle back around there. But exciting to hear that there's infrastructure on DevNet Nine and yeah, that seems like it's moving along pretty well. Any other related questions?
00:02:54.490 - 00:03:07.020, Speaker C: Quick question would be regarding the Meva Flood tool. Is there any support for sending Blob transactions in the Mev Flood tool?
00:03:08.910 - 00:03:27.810, Speaker B: We don't have any plans to put Blob transactions in Mev Flood because we're trying to move away from that tool. So I think in the coming few days we'll build something like a new tool written in Go to send Blob transactions.
00:03:30.230 - 00:03:37.606, Speaker C: So the Flood transaction tool is going to be deprecated and the new Blob transaction tool is going to be the.
00:03:37.628 - 00:03:42.120, Speaker B: New standard for yes, I think that's the plan.
00:03:42.490 - 00:03:50.620, Speaker C: Okay, sounds good. Can you guys start running that on dev nine as soon as you have something ready?
00:03:51.710 - 00:03:53.420, Speaker B: Sorry, could you repeat that?
00:03:54.110 - 00:04:17.234, Speaker C: Could you start running the tool on DevNet nine as soon as it's ready? Because now we have like 230 validators pointing at your relay also, so it would be nice to start some Mev blocks. Okay, yeah, I can send you some funds if you need that and we can get started with that.
00:04:17.432 - 00:04:21.886, Speaker B: Okay, yeah, I'll let you know if we have any issues with funding.
00:04:22.078 - 00:04:23.700, Speaker C: Okay, cool.
00:04:26.010 - 00:04:35.510, Speaker A: And so if we move away from MOV Flood, will there be a tool that replaces this functionality or we're just focused on Blob transactions?
00:04:36.570 - 00:05:19.320, Speaker B: Yeah, I think the new tool is planned to kind of replace everything. Right now, Mev Flood is I guess it's a bit more complicated. We want to just test very basic cases, just ensuring a bundle is included or like a transaction is included. I think right now, Mev Flood, it involves a lot of deploying smart contracts and things that are a bit too complicated for a use case. So this tool will be slightly different. But yeah, we're planning to replace all the functionality from Flood in this new tool.
00:05:20.650 - 00:05:31.580, Speaker A: Gotcha. Yeah, that makes a lot of sense. And I think having smaller pieces to test each of the really important but still kind of more basic things, that's really good. So looking forward.
00:05:36.530 - 00:05:57.974, Speaker D: Alex Mackler here, just real quick for the avoidance of doubt, block native has obviously suspended relay operations. We're also suspending development of our Dreamboat code base. So the Dreamboat code base is public, but we're not investing in it further. It's one of the reasons why we actually chose to do that. So Dreamboat will not be on its own ready for dennib unless someone or some other entities want to pick up that code base.
00:05:58.012 - 00:05:59.970, Speaker C: So just food for thought that that's.
00:06:00.050 - 00:06:01.240, Speaker A: Where we are there.
00:06:02.330 - 00:06:02.694, Speaker C: Yeah.
00:06:02.732 - 00:06:05.240, Speaker A: Thanks for the update. Makes a lot of sense.
00:06:07.210 - 00:06:08.054, Speaker C: Great.
00:06:08.252 - 00:06:23.250, Speaker A: Any other release here? Want to give an update on their readiness? And it can simply be yes, we're aware of the issue, even if development hasn't started yet.
00:06:27.320 - 00:06:27.732, Speaker C: Yeah.
00:06:27.786 - 00:06:55.730, Speaker E: From the Blockchain side, we're working on getting our builders, our guest, back up to date with the latest release. It's always a pain to do though, so it hasn't been the forefront of my mind, but I know it's definitely needing to be done. And then same with relay as well. We'll begin to work on getting Danev readiness and then hopefully trying to get a DevNet nine node set up and running the relay as well.
00:06:57.380 - 00:07:12.310, Speaker A: Yeah, that would be awesome. I mean, the more that we can get on the devnets, the more we can splash bugs earlier. So then when we move to testnets, we think we have a pretty strong showing and it just makes main net that much more confident, so that would be great.
00:07:15.160 - 00:07:29.000, Speaker E: I can never find the right repo that has the fork versions and everything that need to be used as the startup arguments for the new devnets. Can someone send a link to that in the chat or in the telegram afterwards?
00:07:31.740 - 00:07:49.936, Speaker A: Yeah. Barnabas, would that be is there like a landing page for DevNet nine things? I think there is something like that. Yeah. Maybe Perry has it. Okay, so, yeah, there's one in the chat here and I think there should be a link to the configuration we all use on this page. Let me just take a quick yeah, so right, here the first link. Testnet spec.
00:07:49.936 - 00:07:55.140, Speaker A: This should be the thing you're looking for, like in this config. YAML.
00:07:56.280 - 00:07:57.590, Speaker C: Perfect. Thank you.
00:08:03.730 - 00:08:08.322, Speaker A: Yeah. Perry, do you want to say something about Kurtosis? If you're able to?
00:08:08.456 - 00:08:39.900, Speaker F: Yeah, I've just linked a quick run guide, so if you're someone who's developing the relay side of things, or if you're developing builder side of things, we have some local testing tools that you can use, so have a look at them. Everything works on override, so there is same defaults, but you can just put in your own docker image and test whatever you want to test. It usually helps us a lot for local testing, but of course, feel free to directly test on devnets as well.
00:08:43.240 - 00:08:43.748, Speaker C: Cool.
00:08:43.834 - 00:09:17.540, Speaker A: Yeah, I know a lot of work's gone into this Kratosis stuff, so everyone please take a look. I think you'll find it very helpful. Okay. Any other genetic things? Otherwise I think we can move more broadly to ecosystem updates. I'll call that, let's see, I think there's a number of things justin, I think you had some optimistic relaying updates if you wanted to hop in.
00:09:20.630 - 00:09:27.480, Speaker G: So actually I have an update around the relay sustainability, so is that appropriate to talk about now?
00:09:28.810 - 00:09:30.086, Speaker A: Yeah, go for it.
00:09:30.188 - 00:11:20.570, Speaker G: Okay, perfect. So basically we're planning to try out a new experiment in relay monetization, which involves having relays, or at least some subset of the relays earn money very similarly that builders and searchers do. So if you take a typical builder, the way that they monetize is by capturing the delta between them whenever they're the best builder and the second best builder. And we can do the same thing at the relay level, basically capture the delta between the ultrasound relay, for example, if it happens to be the top relay in a given slot and the next best relay. And the way that it would work is basically by having the relay modify the block, specifically modifying the very last transaction and replacing that last transaction, which is normally the transaction that pays the proposer and changing the payment value to reflect basically the next best relay value. Or it could be an estimate of it, it doesn't necessarily have to reflect it, so it's basically lowering the bid value so that the relay still wins the auction, but they don't have to pay as much and then basically this delta could be revenue shared with various parties. So, for example, part of it could be kicked back to the builder.
00:11:20.570 - 00:12:41.794, Speaker G: And actually, this is something that we're considering that we want to do for sure, because we need to incentivize the builders to opt in to this new mechanism of having blocks relayed so that's on the extraction side of things, there's a possibility for relays to extract money. And we found a way to make it compatible with optimistic relaying. Basically the technical challenge here is that in order to modify the very last transaction with optimistic relaying, you also need to find kind of a clever way to update the state route without doing the full execution. And we can do that if the builder sends us a few merkel paths. So merkel paths, for example, for the sender balance, the recipient balance of the very last transaction. And that's enough for us to kind of recompute the state route on the fly in the context of optimistic relaying. Now, in terms of how the money would be used, first and foremost it'd be used to make the ultrasound relay sustainable.
00:12:41.794 - 00:13:53.340, Speaker G: And what that means is that we'd cover our expenses, anything after that, what we're planning to do is to basically support the relay ecosystem. So it could be, for example, a donation to a relay guild if such a thing would be set up. Or it could be some sort of UBI universal basic income for non censoring relays, or it could be something else. But basically we want to use the proceeds of this experiment to improve relayed diversity and sustainability. And then if the experiment is just wildly successful and then we make millions of dollars, then anything above and beyond that would basically be used to spread to fund another public good, which is basically the ultrasound project. Whatever endeavors we may have to spread the meme further, that's what we're thinking in terms of the experiment and happy to take any questions.
00:13:57.730 - 00:14:14.260, Speaker A: Okay, well, maybe I'll just summarize. So it sounds like we're almost turning the first price medboost auction into a second price one, although builders still pay the first price. And then in that differential, that's essentially the source of the funds for all the other things you talked about. Is that the idea?
00:14:15.830 - 00:15:10.770, Speaker G: So one important thing to keep in mind is that it is not a second price auction internal to the ultrasound relay. If the ultrasound relay happens to be the fastest one, it's a second price auction in the sense that it's across relays. So if the ultrasound relay is, let's say, 100 milliseconds faster than all the other relays, then that delta and mev would be roughly 100 milliseconds worth of mev. And you shouldn't think of it as the value coming from the builders. From the perspective of the builder, if there's no kickback whatsoever, then they don't lose anything. You should think of it more from the side of the proposer. Like, the proposer is receiving less than they would have otherwise received.
00:15:10.770 - 00:16:08.550, Speaker G: So it's basically removing a small fraction of the mev, which really, the proposer arguably should not have been receiving. It kind of been receiving as a gift so far, but in a way is sovereign to whoever is the fastest roll up. Now, the issue with this kind of monetization is that it's winner take most. It's kind of this cutthroat capitalistic thing that we're seeing with the builders today. And so it doesn't really address in and of itself, relay diversity and sustainability, which is why we're making the extra step of kind of pledging to donate these proceeds towards relay sustainability.
00:16:10.010 - 00:16:22.010, Speaker A: Right, yeah. I mean, first off, I'm excited to see more experiments in the space. This one sounds really exciting. Do you have, like, a timeline for rolling this out or? It's still more an R and D stage.
00:16:23.630 - 00:17:35.166, Speaker G: Right. So we've been gathering feedback with people privately and so far there's been excitement. We've written the code, it's been tested to an extent on Gurley. Nicholas is the main person working on it and he just went away on holiday for two weeks, which is why, I guess I'm talking on his behalf to an extent right now. So I would say, at a minimum, three weeks into the future is when we would do this. Now, in terms of builders that want to participate in this kickback scheme, please do get in touch with us, because what needs to happen is for us, as the relay operator, to make the final mev payment on your behalf. And in order for us to do that, we need to have some amount of collateral, some amount of cash flow, because otherwise we won't be able to do that payment on your behalf.
00:17:35.166 - 00:17:50.070, Speaker G: So there needs to be some action from the builder to opt in, give us liquidity and basically give us permission to modify those blocks so that they can receive a kickback.
00:17:53.210 - 00:17:57.786, Speaker A: Cool. I'll be looking forward to the rollout. Uri, do you have something to say?
00:17:57.888 - 00:18:48.730, Speaker C: Yeah, I got a million questions. So, first of all, I'm very much in favor of it and I'm glad that you guys are doing it. So what about this? What about that? But not because I think it's a bad idea, because I want to push around the idea and set it to its limits. So I have two domain questions. One, the first is, doesn't this hurt the relay collaboration? It's very easy to set the market between the relays, I think. I think the hard piece is to build a market in which relays don't compete with one another and have an incentive to try and propagate it for somebody else. So if you got a block at time zero and you offered it to the proposer and we got it five millisecond afterwards, don't tell anybody.
00:18:48.730 - 00:19:20.340, Speaker C: No, we're always faster. But in this situation, let's say you got the block faster when the proposer asks for it. The way we set up the relays is that it asks all the relay to broadcast it. So at this point, oh, if you're doing this business model and I'm doing that business model, then I would try to hurt you. And I don't want to propagate stuff that pay you. I want to only propagate stuff that pay me. So do you have any thoughts on that regard? Maybe I'm missing something, but would love to get your take on it.
00:19:22.390 - 00:19:33.106, Speaker G: Okay. So just to make sure I understand, are you saying as a builder, I would only want to send my blocks to relays that give me a kickback? Is that what you're saying?
00:19:33.228 - 00:19:35.750, Speaker C: No, I'm saying as a different relay.
00:19:35.910 - 00:19:36.714, Speaker G: Yeah.
00:19:36.912 - 00:20:09.860, Speaker C: Don't I have the incentive not to help you propagate? If the proposer is propagating your block, which pays ultrasound, and ultrasound makes some money out of it, that puts me as your competition if I do exactly the same thing. So at that point, I don't broadcast. I won't even have maybe that block. Right. Only you propose it, other relays won't have it. I'm now thinking out loud for a second. Doesn't that.
00:20:13.910 - 00:20:15.906, Speaker G: Or Alex from the ultrasound.
00:20:15.938 - 00:20:19.800, Speaker H: Team I'm next to Justin. That's why you might see his tile lighting up.
00:20:20.890 - 00:20:21.206, Speaker C: Yeah.
00:20:21.228 - 00:20:54.914, Speaker H: I think on the relay level, we don't want to privatize the blocks in any sense. The idea is that the blocks would still go to everyone and everybody can still serve them. The scenario that Justin was talking about, where we're capturing the Delta, would be a scenario where you are the only relay that can still deliver a block in time. That's one possibility. Like your latency advantage means you're the only one who can still get that block somewhere. Other relays can still serve it, though, once the proposer asks tries to get the payload, this is way later. So by that time, other relays might still have the block and still be able to serve it.
00:20:54.914 - 00:21:11.990, Speaker H: But in general, it is fair to ask questions in the directions of if you are, for example, paying kickbacks, are builders still incentivized to send their blocks everywhere? But as Justin was already alluding to, this is all about where are the builders sending their blocks? Not so much what are the relays doing with them?
00:21:12.140 - 00:21:41.346, Speaker C: So actually, I feel like I understand the builder side. I want to specifically talk about the relay side because I feel this is a low latency game. Right. Everything happened in the last 150 millisecond, 200 millisecond or so. And so let's say Beaver send you block B, and you guys get it and we get it. You don't know that we got it because there is a latency game. So you said, well, it pays one ETH more than anybody else.
00:21:41.346 - 00:22:11.034, Speaker C: You adjust it, and now you're doing block B Delta. It's a different block with a different hash. It's not what we have. So a builder might lose because of it, because then we'll also propose it, I guess, I'm not entirely sure. But more important, you'll propose block B Delta, only you have block B Delta because you adjusted it. So even if you win and he signs your block and he broadcasts it, almost by definition, no other relay would have that block, right?
00:22:11.152 - 00:22:22.400, Speaker H: Yeah, I think that's true, but I don't see any reason why we wouldn't as a relay share that block. I think we'd be happy to share it, just only after it's made it to the proposer, of course.
00:22:25.890 - 00:22:52.678, Speaker C: Which is kind of like my initial point, totally makes sense. And again, I'm not against it. I'm pushing against it because I'm trying to understand the idea and find good solutions. So I love the idea. I'm not against it if you do it and I do it. So you have B Delta and I have V tag and we have competing blocks. At that point, I'm like, well, I don't want ultrasound to be good at this because I want to be good at it.
00:22:52.678 - 00:22:55.858, Speaker C: I don't want your block to win. I want only my block to win.
00:22:55.884 - 00:23:21.380, Speaker H: But I don't really see the problem. It's an interesting question, but if relays start adjusting blocks and they now have their unique blocks, as you already specified, and then they try to propagate them, and then maybe some other relay doesn't want to propagate it because it is not in their best interest, there's still the rest of the Internet, I guess, to try and propagate that block. I'm not sure that there's an issue there, but it is an interesting question.
00:23:23.430 - 00:24:00.606, Speaker C: And I think I mentioned it in my proposal, just a data point, because I think it's interesting. And what's interesting for me as a relay, I think there is the conception that all relays have all the blocks all the time and therefore what we provide is redundancy, which is why we can't monetize. Right? It's kind of like, well, why would I charge for it? Nobody would pay me. You could just use the other relays. But if you look at the data, you actually showed that relays have the winning block. The proposer chose it. They have it at the best case as of the time.
00:24:00.606 - 00:25:11.054, Speaker C: Like we were like at 55% on the single day that I looked at the data, usually between 25% and 55%. So not all the relays will have all the blocks at that moment. But again, just trying to understand and I don't want to hog the entire conversation, so just one more question. Why did you decide to do it in real time rather than in retrospect? So you're going to slow things down for the Builder, which is bad for the Builder, maybe not by a lot. You say you can do it optimistically, but maybe why not do it something where payment is in retrospect, builder pays the entire thing and proposer signs it, and then somehow after the fact, who won and how much money should the relay keep? Then it's kind of like understood in retrospect, and the money is being split. Because if it isn't that way, again, it goes to the point you'll hurt the builder, right? You offer something, you adjust the block during these three milliseconds, that stuff happen. You ask us for the block.
00:25:11.054 - 00:25:28.700, Speaker C: We tell you what's our best block. By the time you get it, you're in Europe, our relays in the US. Or something, we got another block, at which point you adjusted your block down, and I just got a better block. So why do all of it in real time and not did you think about trying to do it after the fact and not in real time?
00:25:30.430 - 00:26:02.530, Speaker G: Right. So the bit modification logic, which recompute these macropaths takes about 500 microseconds. So it's pretty small in terms of it sounds like you were talking about latencies of querying the other relays to see what their top bit is. We wouldn't do that. That would be obviously way too slow. Instead, we'd have heuristics. We'd say, okay, for example, the blocks route regulated is 50 milliseconds slower than ultrasound, for example.
00:26:02.530 - 00:26:16.546, Speaker G: And so that means that we can see what was the top bit we received 50 milliseconds ago and use that kind of as a rough heuristic as to what states the blocks route regulated relay is.
00:26:16.588 - 00:26:36.270, Speaker C: Okay, so you're not asking the relays and make decisions there. It's kind of like, okay, here's what we're seeing right now, and try to smartly adjust accordingly. Interesting. And again, I love the idea that you're testing it like I'm pushing against it not because I don't like it. I'm pushing against it because I want you to succeed. So, like, okay, how would it work? I'm not this is not criticism.
00:26:37.010 - 00:26:38.826, Speaker G: Yeah, thank you for the feedback.
00:26:39.018 - 00:26:41.360, Speaker F: I have a question as well, if possible.
00:26:43.490 - 00:26:44.820, Speaker C: Yeah, go ahead.
00:26:45.670 - 00:27:49.160, Speaker F: So have you tried to either simulate or investigate in which way this would affect the block builders bidding strategies? Because in a way, you say, okay, we profit on the delta, whatever, but as you said, we are under these kind of actions that all relays have all the blocks, but as a bidder, you also have heuristics. I didn't think deeply about this at all, but you could look around and basically decide to modify your bidding strategy accordingly somehow to profit from this modification. What I mean is that a kind of eventual competition between relayers could also arise from downward pressure by the fact that maybe bidders decide to modify their biding strategies once they observe this.
00:27:52.650 - 00:29:08.590, Speaker G: I guess one thing to mention is that if we were to kick back 100%, then it would be a second price auction, and then the builders wouldn't have an incentive to have these very complex heuristics to just guess what the other builders would be doing. So it would be kind of cleaner. I guess one dynamic to point out is that even though it's a second price relative to the next vest relay, it's still very much a first price internally to the ultrasound relay. So we still need to determine who's going to win the auction. And so let's say there's two builders competing against each other. There might be some cutthroat like first price dynamics there because maybe we fixed the bid value to the next best relay, but we haven't determined yet which bid is actually the winning one. And that's going to depend on the internal first price auction within the ultrasound relay.
00:29:09.170 - 00:29:34.380, Speaker F: Yeah, I'm only saying that in the end, nested auctions are more complicated than it seems on the surface. So a lot of times the best strategy is okay, bid to everyone one level above you to make sure you make it in a way or another. But this may not be the case anymore. There may be some asymmetries that can introduce. So that's why I asked. Okay, thanks.
00:29:35.870 - 00:29:36.234, Speaker C: Yeah.
00:29:36.272 - 00:29:43.050, Speaker G: More than happy to get your insights on this. Yeah, for sure. Just hit me out on telegram.
00:29:44.270 - 00:30:47.840, Speaker F: Can I have another small one? It would be very fast. Justin, do you try to also change the protocol that is happening right now? Because if I understand correctly, right now we have the interface between the proposer and the relay. You have get header and get payload. And right now if someone is actually requesting for Get header, you return the bit, then you need to check another bit in real time and then the proposer should redo that Get header so that it would get the correct header to sign so that it can pass the signed header into Get payload. This is the flow that you are asking that you are trying to do, because if not, we would need to change the protocol itself.
00:30:48.450 - 00:31:32.480, Speaker G: Right? So we're not changing the protocol between the proposal and the relay. That would be a very big lift. So instead what we're doing is we're doing the bid modification, meaning that we change the block, hash and other things before we even serve it on Get header. So anything that's served on Get header is going to be a valid bid with a modified last payment. And in order to do that in 500 microseconds, we need these vertical paths. So we're basically asking the builders to change their API a little bit to add a few merkel paths in addition to their bid and that allows the relay to dynamically change the bid value.
00:31:33.090 - 00:31:53.670, Speaker F: So then the interface to exchange that information with different relays cannot be based on Get header because different relays would have also already modified Get headers and that would be a loophole because they would also send already modified Get headers and not the real bits.
00:31:55.450 - 00:31:56.582, Speaker G: Not sure I understand.
00:31:56.716 - 00:32:12.860, Speaker H: Yeah, relays don't seem to exchange those headers between each other or at least I'm not aware of our relay doing that. It's just a builder that gives us a little bit more data and then us giving something slightly different to the proposer. But the proposer, to them, it just looks like a different header that they're getting.
00:32:15.150 - 00:32:27.600, Speaker F: Okay, so it will be like your second bit and not like network white second bit. Okay, we can take that offline as well.
00:32:30.410 - 00:32:34.600, Speaker C: Yeah, they're not asking relay for anything. Basically, they're using their local information.
00:32:37.050 - 00:33:09.810, Speaker A: Yeah, this would just be local to, say, ultrasound, and then every other relay would be operating like usual and then like, Justin was like the builder API. The proposer to relay connection doesn't change at all. So this is essentially, just know, external two state ultrasound relay. It looks the same as it does today. Okay, yeah, maybe one thing and then I think Matt had a question. But Justin, is there anything written about this or is there like a place we could go to continue the conversation asynchronously.
00:33:13.510 - 00:33:40.170, Speaker G: We don't have much public information? I mean, one thing that might be already public is basically a modified version of the builder which specifies these merkel paths. But yeah, once Nicholas is back from his holidays, then we'll invest in documentation and things like that. But if you want to chat with us, I guess we're extremely open. Just hit us up on Telegram.
00:33:43.310 - 00:33:45.434, Speaker A: Sounds good. Yeah. Matt, did you have something?
00:33:45.632 - 00:34:44.958, Speaker D: Just an observation. And again, I'm very much in URI's camp, which I love the ideation and the creativity here, I just would look at what are the incentive schemes? Because if ultrasound wins and ultrasound pays itself first and then shares out, then the relays become competitive, and it would seem like there are opportunities to modify the data APIs to basically obfuscate what's going on, and the relays become disincentivized to be transparent. And also it becomes a latency game for the builders and incentivized colocation in the other direction. If the payments go to some sort of guild like thing first, then the incentivization is to collude and to maximize the collective relay profit. And there seems to be games that can be played in that direction too. So kind of have unstable coalition issues here. But anyways, just some thoughts about as this goes into production, who's incentivized to do what? I'm sure you guys have thought about this.
00:34:44.958 - 00:34:46.350, Speaker D: Just my POV.
00:34:48.390 - 00:36:00.338, Speaker G: Yeah. So on transparency, what usually happens is that a builder will send their bids to every relay. And so if you want to look at the delta, well, you just need to look at the exact same block that had a payment coming from the builder and just compare things there. So you will have transparency just by looking at the relay data APIs and above and beyond that, what we want to do is provide on a slot by slot basis down to the way exactly how much value was extracted and where it went. Very precisely. Just as relay operators that enjoy being transparent in terms of the incentives for all the relays to kind of collude in such a way that this strategy is very profitable and then the relay guild receives lots of money. The nice thing here is that you just need a single defector.
00:36:00.338 - 00:36:33.170, Speaker G: So if there's even like a single reasonably performant relay out there then that puts a bound on how much value can be extracted because the value that's extracted is the delta between the very top relay and the next best relay. So if that delta becomes half a second or a second or something just unreasonable then someone can just spin up a relay that defects from this collusion.
00:36:39.690 - 00:36:53.002, Speaker C: Thanks. Okay. Yeah.
00:36:53.056 - 00:37:10.910, Speaker A: Thanks, Justin. And yeah, very excited to see the experiment play out and looking forward to seeing what happens. Let's see. I think from here there wasn't too much on the agenda so I don't know if anyone else has anything we can kind of move to. Like an open discussion.
00:37:14.130 - 00:37:41.610, Speaker C: If possible. Not a long thing. I tweeted about it, other people are aware of it. I want to but put it like on everybody's front and center with block native stepping out. There are four entities, five with is doing like one and a half percent, two European, two US. Ones which propagate 93% of our blocks. And in my opinion it's terrible.
00:37:41.610 - 00:39:10.226, Speaker C: And so while thinking first, I think we should look at it and think that it's ugly. It's ugly. Second, if we're talking about all sorts of funding mechanism do we do this whether ultrasound thing goes well or a relay guild or anything along these lines? I want to just point out that if we will find a way to fund relays and cover their costs then things will stay as they are. If we don't find a way, we might have less relays going forward. But if we find a way for there to be a budget for it so if it's making money, let's say Justin solution works and less in total has a revenue of a million dollars then per year. Now that's not $10 million per year then we should expect more relays to come in until we reach a new equilibrium and we'll have more relays doing the same until they kind of like it covers the cost plus a bit of profitability. So my main point here is to take that in my opinion the right way to think about it is what budget will incentivize how much participation and how much participation do we want? So just that so we talk about covering the cost covering because the costs won't bring more relays in.
00:39:10.226 - 00:39:23.480, Speaker C: If there's money to be made here, more people would jump into and try to do it. So that's just that not just like probably most people here are aware of it and thinking potentially along the same lines but just wanted to throw it out there.
00:39:32.570 - 00:39:41.980, Speaker A: Yeah, that makes a lot of sense. I mean, I think we're going to see these relay funding things play out and then if we suddenly have to worry about making too much money, that's probably a problem to have.
00:39:44.990 - 00:39:46.380, Speaker C: Such a hard problem.
00:39:46.990 - 00:40:09.470, Speaker A: Yeah, well, it's just a problem with its own other problems. Yeah, let's see. I don't think I have anything else. Is there anything anyone else wants to discuss? Otherwise we could wrap up early today. Yeah, tina?
00:40:12.910 - 00:42:03.090, Speaker I: Yeah, everyone, I just wanted to respond to, I think the acute problem that we had also just pointed out, and I think this is something that I've mentioned in the previous calls, I think I care a lot about ensuring that for the next six months, our independent relays are well stocked up. And I think we're one step closer, closer to it. On September 15, one year anniversary, we have already formed a vehicle PBS foundation that could take in KYC investors funds and we have secured all but except one initial set of donors who's still going through their internal process, but almost done. And so the next step, we do expect to be able to start deploying capital and it will start out with independent relays. So just to, I think some small things I wanted to share with everyone because there's a lot of, I would say unseen work behind the scenes in terms of actually getting the needle moving when it comes to coordinating, getting funding for more experiments in our ecosystem. So that's my update. One more thing to add is that in this process, it was kind of unexpected but pleasant surprise even without actually sharing any further updates.
00:42:03.090 - 00:42:55.010, Speaker I: Just the prior proposal on the forum on PBS Guild had attracted, I think, four applications for independent relays. I believe two of them are in Asia, one of them is in Europe, the other one I need to look into it. We have not started process in terms of reviewing applications because the initial grants council and early contributors are still in shuffle. So if you're interested in contributing, we only started setting up the Telegram group. So to get all of our early contributors and many of you are actually on this call so that we can actually have somewhere to coordinate. But yeah, ping me if you're interested to continue to contribute.
00:43:00.100 - 00:43:00.512, Speaker C: Cool.
00:43:00.566 - 00:43:24.650, Speaker A: Yeah. Thanks Tina. I mean, again, I think we all agree that this relay funding topic is one of the biggest problems we all face. And yeah, it's very exciting to see these different experiments play out. And yeah, the future does look optimistic, even though I know some of this stuff maybe has been slower to roll out than we all wanted, but I think the direction is very encouraging. Matt, do you have something to say?
00:43:25.580 - 00:44:12.040, Speaker D: No, I just wanted to say thank you to everyone for all the support and engagement. I mean, obviously it's bittersweet for us to step out as a relay operator and builder and while we've had some pretty spirited debates both publicly and privately, I feel like this group is a pretty elite group that cares deeply about the future of the network and we're all trying to drive towards the same thing. And as I said in my message, we'll be rooting from the sidelines, not on the field of play but we very much plan to stay involved and in the category and in the space. So just want to say thank you to everybody and looking forward to continued innovation and who knows, maybe things change down the line if we're able to implement some of what's being discussed. So anyways, thanks to you Alex for your leadership here and thanks for everybody else for their collaboration.
00:44:16.570 - 00:44:34.840, Speaker A: Yeah, thanks for also contributing yourself. Okay, anything else on anyone's mind? Otherwise I think we'll go ahead and help Justin.
00:44:36.060 - 00:45:37.980, Speaker G: Yeah. One topic we've been looking at recently is registrations. We realized, I mean it's probably already known that anyone can permissionlessly take a registration from an existing relay and replay it on whatever relay of their choice. So there's nothing preventing replaying these registrations and it doesn't even have to be done by the relay operators themselves, it can be done by anyone on the internet. And we actually have a use case within ultrasound to replay as many registrations as possible on the ultrasound relay. And the reason is that we're keeping a full archive of every single bid and payload that we receive from the builders. And right now our archive only covers about 75% of the slots because that's how many registrations we have.
00:45:37.980 - 00:46:14.810, Speaker G: And so if we kind of put in these registrations, copying them from other relays will have essentially full coverage of bids coming in from builders for all the PBS lots. So just wanted to give you a heads up that's something that we're probably going to do. We've been scraping these registrations from the relays, the final one we're working on is Flashbots because they have very aggressive throttling but it's possible we will get a dump from them.
00:46:19.820 - 00:46:21.880, Speaker C: Can I comment on the registration?
00:46:26.100 - 00:46:27.170, Speaker A: Yeah please.
00:46:29.160 - 00:47:19.580, Speaker C: I was wondering why or it seems almost obvious that registration could be improved. Simplest, naive idea is that registration. You register and you specify the list of relays you want to connect to and you add an on. Therefore you could update them if a validator is registered to a relay, basically it costs it money. It means that if a validator registered to a relay and then stopped working with them, they would still get bids for it or whatnot, et cetera. There is no way to unregister. So I'm curious, it looks like there is an easy naive way to change registration to register for multiple at a single time and have nons to update them to change it.
00:47:19.580 - 00:47:29.190, Speaker C: Is there a reason not to do it? Or this is just like on hold because there is no urgent need to do it, or is there a different reason?
00:47:30.680 - 00:47:42.680, Speaker A: Well, so they do have admission of nons already, I guess I don't follow what you mean. Like, when you make a registration, there's a timestamp and then if you make a new one, it should have a new timestamp.
00:47:44.880 - 00:47:54.620, Speaker C: Yes, but there's no way to unregister. Like, you could make a new one, but it's not like a registration for X relays.
00:47:56.640 - 00:48:14.630, Speaker A: This kind of suggests that they need to be on chain because otherwise there won't be a single view right. Of what's happened, which is something I think we should kind of move in the direction of anyway. I had this proposal to kind of move them into the Blobs, but they could even go into call data, and that's certainly a path we could explore. I mean, Justin raises an interesting point.
00:48:15.800 - 00:48:35.396, Speaker C: I was thinking something way simpler. So putting it on chain and in Blobs, that is complicated and required, et cetera. My thinking is in the current state, there is no single view already, and that's kind of like, fine, but relays could receive them and share them with one another. It's not on chain. There is no cost to it. It's not complicated. It's not the end game.
00:48:35.396 - 00:49:04.116, Speaker C: I'm not like, here's the end game, how it should look like. But it looks there's an easy win there where validator register to a list of relays and these requests just are being broadcast among the relays. So at any given time, they all kind of know who's connected to who, and if somebody wants to stop getting connected to somebody, well, you just update it. Putting it on chain is complicated. Just changing the design and what looks like. I thought it's an easy win or simple.
00:49:04.218 - 00:49:10.490, Speaker A: So concretely, we would just have the list of relays the validator also signs over rather than what they do today.
00:49:15.100 - 00:49:31.740, Speaker C: Because you could use the times like, yes, but basically that okay. Yeah. And that also solves the problem of somebody relaying somebody else's. If there is a new one and it doesn't specify, let's say, blockstroke, then blocks these out, it's implicit unregistration.
00:49:34.480 - 00:50:09.270, Speaker A: Right, okay. So there's this other concern that Justin brings up with sort of observability. So even without modifying them at all, it sounds like relays could just start sharing them and then you kind of get to the same point separately. If we want to unregister yeah, we could think about having an explicit list. But even still, I think without having, again, some global view, you can start to say, oh, I never saw this one, or blah, blah, blah. So it seems like moving them on chain makes a lot more sense.
00:50:10.280 - 00:50:39.712, Speaker C: Yeah, I'm not against putting it on, and I'm saying, like, okay, putting it on chain is a difficult problem. How do you put it on chain? What's a smart way to go about it. And so you already kind of like, trust all the relays not to all screw you over. So if you register and you send it to all the relays, oh, here's my new registration, here's who I'm connected to. I don't even know if it might play well or not play well with Justin's proposal. Again, my thinking is it kind of sucks now. It could be better without a lot of effort if it does a list.
00:50:39.712 - 00:50:58.436, Speaker C: So that was just like throwing it out there. It looks like a very easy win from my perspective to use a list and therefore not register with each one individually and what it looks like. Okay. Yeah.
00:50:58.538 - 00:51:06.310, Speaker A: I mean, relays could already do this today without any change, though. Well, I guess. Yeah. There's no indication of what you would want to register with.
00:51:07.240 - 00:51:36.400, Speaker C: If there is a new registration with ultrasound, it doesn't mean or not mean that he doesn't want to register with block thread, so a new one doesn't unregister you from anybody. This kind of, like, allows the valley to say, oh, here are the relays which I want to be connected to, and change it and adjust. It seems like more specific, concrete, detailed, specific request rather than these, where they can't even unregister from a relay.
00:51:37.700 - 00:51:48.670, Speaker A: Right. And then I guess it's just like we should be clear. What value does this add? You're muted.
00:51:50.530 - 00:52:13.990, Speaker C: For one before anything else. You actually know how many registrations each validator has? You have no idea right now. I don't have an idea now because maybe some that already registered in the past aren't really listening. Maybe when we'll try to deliver a block, they won't actually take it because they change their setup. We just don't know that they change their setup. They didn't unregister with us. There is no real way, if I remember correctly.
00:52:15.130 - 00:52:18.680, Speaker A: But in that case, the proposer just wouldn't call your endpoint. Right?
00:52:19.610 - 00:52:27.226, Speaker C: True. I would still get builders sending me bids for that because I told them I'm going to. But that's a small thing.
00:52:27.248 - 00:52:28.522, Speaker A: You can optimize that.
00:52:28.656 - 00:53:11.660, Speaker C: But I'm thinking if Justin sees that he's only registered okay, he's doing this thing, and the next validator is only registered with ultrasound and with flashbots, and it isn't with blockers, then maybe his heuristic about what should be the value is different because he knows whether all the relays are trying to deliver it or some. It would give us insights to understand, actually the overlap and how many are connected with who. Is everybody connected to everybody or really just with a small subset. So my thinking is provide observability to what it does. If it was a huge task, I wouldn't say, like, why do it? It doesn't add any value. It looks like a very small task from my perspective. So just sharing it out there.
00:53:13.950 - 00:53:31.040, Speaker A: Yeah, makes sense. It'd be pretty straightforward. We'd have just another message, type another endpoint, and then it's all backwards compatible. Yeah, I'll look about some more. I think it'd be pretty easy for me to make sort of PR diff to the specs and we can take it from there.
00:53:38.760 - 00:53:39.124, Speaker C: Yeah.
00:53:39.162 - 00:54:34.090, Speaker G: Justin, one very small topic for which it's good to have the whole group. We have suggested changing the way that the default implementation of the relay does logging. So right now, logging is on a second level granularity. So if you look at the logs, it's hard to tell what the ordering of the messages is within 1 second. And we're suggesting it changing to nanoseconds, I believe. And Chris is okay with that, but he kind of wants to make sure that everyone's fine with that as well. So if there's anyone who's not happy changing the granularity of the timestamps in the logs, please let us know.
00:54:37.580 - 00:54:56.190, Speaker A: Yeah, I think that makes a lot of sense just because I think we use those logs for a lot of debugging, observability, all these types of reasons. So the more precision I think, the better. And it shouldn't really be a huge performance implication or anything to the relay, so makes sense.
00:55:03.300 - 00:55:40.270, Speaker E: Really quick, there was something that was said about the timestamps sent by the validators for registration, like an older timestamp, meaning that they are unregistered. I actually did a lot of research two weeks ago about this to figure out how frequently we're getting registration in, and we actually were getting some timestamps from validators. The timestamp that they were providing was from December, so I'm not sure how many people are modifying that flow, but I wouldn't count an old timestamp as an unregistered validator if anyone's trying to do that.
00:55:43.180 - 00:55:45.880, Speaker A: You mean like this December or last December?
00:55:48.860 - 00:55:51.530, Speaker E: Sorry, do I mean what?
00:55:51.980 - 00:56:01.516, Speaker A: I thought you said you're seeing registrations with the Timestamp in December and I was wondering if you meant like they're old from the past or like somehow, maybe someone's clock is off and they're trying to someone from the future or.
00:56:01.538 - 00:56:08.200, Speaker E: Something like this I saw all over the place from December, April all in the past, old timestamps.
00:56:08.360 - 00:56:18.210, Speaker A: Okay. Yeah. I mean, the way at least the specs are written, you should have the latest registration from a validator, and if you get something older, you should just ignore it.
00:56:20.360 - 00:56:26.880, Speaker E: Right, but I mean, if they're sending that, it's signed valid from the validator. That's a valid registration.
00:56:26.960 - 00:56:27.590, Speaker C: Right.
00:56:29.960 - 00:56:44.090, Speaker A: The specs, they only consider the latest one. So the way I would think about that is, yeah, just ignore the old messages. Really? There's no way to unregister other than.
00:56:46.560 - 00:57:08.240, Speaker C: I think Ben is saying we have new registrations and FYI, their timestamps are all over the place. These are new ones, they are real, they're not a deregistration. Ben, correct me if you're wrong, if I'm wrong, but he's saying these are all over the place. So if you're using them for any logic, beware they're not accurate.
00:57:09.060 - 00:57:10.672, Speaker E: Yes, that's what I'm trying to say.
00:57:10.726 - 00:57:11.328, Speaker C: Thank you.
00:57:11.414 - 00:57:22.724, Speaker A: Right? I mean, yeah, that sounds like a bug in the client software, like the CL software. That's probably something we should look into. I know Prism had an issue with timestamps, so maybe there's something there.
00:57:22.922 - 00:57:30.570, Speaker E: Yeah, and I saw it from a lot of different pools. Coinbase was one of them. Their timestamps were always very old.
00:57:33.550 - 00:58:01.280, Speaker A: Interesting. Well, thanks for bringing it up. Yeah. POTUS. I think at one point, I mean, someone correct me if I was wrong, but I believe they're sending zero for the timestamp and it was causing all sorts of issues with the whole builder flow. Or was that the gas limit, I guess I should recall. Terrence, do you have a little more info on that?
00:58:02.530 - 00:58:09.814, Speaker C: I think it was the gas limit that were sending zero, but basically but that's basically okay.
00:58:09.852 - 00:58:11.640, Speaker A: Got you. I misspoke, then.
00:58:24.750 - 00:58:25.450, Speaker C: Okay.
00:58:25.600 - 00:58:42.610, Speaker A: Anything else? Otherwise, I'll go ahead and call it. Okay, thanks, everyone. That's that. And see you all around the Internet.
00:58:44.470 - 00:58:45.540, Speaker C: Thank you, everyone.
00:58:46.230 - 00:58:47.298, Speaker G: Thank you.
00:58:47.464 - 00:58:47.998, Speaker C: Bye.
00:58:48.094 - 00:58:48.514, Speaker G: Take care.
00:58:48.552 - 00:58:49.070, Speaker C: Thank you. Bye.
