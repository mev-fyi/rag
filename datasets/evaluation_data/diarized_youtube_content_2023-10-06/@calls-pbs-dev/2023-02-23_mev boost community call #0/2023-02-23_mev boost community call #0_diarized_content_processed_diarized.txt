00:00:00.970 - 00:00:23.210, Speaker A: Okay, everybody, welcome. This seems like a pretty good chunk of people to get started with. More people may filter in, but yeah. Thanks, everyone, for coming. This is mevboost community call. So we want to talk about Boost, we want to talk about Relays, we want to talk about builders. There's an agenda I linked in the chat.
00:00:23.210 - 00:00:37.880, Speaker A: If someone can see that, let me know know. There's basically a lot to talk about, and I only claimed this will last an hour, so we'll see what we can cover. Yeah, I'll send that again. It's just the same forum post.
00:00:39.390 - 00:00:40.460, Speaker B: There you go.
00:00:42.270 - 00:01:05.150, Speaker A: Yeah, let's see here. I think we'll just follow the agenda. I mean, I think we can keep it pretty lightweight. I don't know if we need formal introductions or if anyone would, like, know. Just, I guess, ask. I'm Alex Stokes. I research at the F and have been looking a lot of mev lately.
00:01:05.150 - 00:01:44.430, Speaker A: And, yeah, it became clear, I think, to all of us, that we needed a sort of discussion point for at least the upcoming Capella changes and then, more broadly, the future of where all this is heading. So I wanted to put this call together, and that's why we're here. So, again, thanks, everyone, for showing up. So to kick us know, let's just run through the agenda. We'll talk about the builder specs first. So, again, the main thing here is updating these. For Capella, there is a V three that was released last week, I believe.
00:01:44.580 - 00:01:50.560, Speaker B: I'll just grab a link if I can get my browser to work.
00:01:52.850 - 00:02:21.286, Speaker A: And yeah, I mean, the main thing is updating everything for Capella. Again, if you don't know, this is the core API that the consensus clients use to talk to this builder network that we have that Boost helps orchestrate. And for capella, the main things are just updating the types of these APIs so that they support the new formats variety of withdrawals in Capella. And, yeah, that means that there are changes along the builder APIs.
00:02:21.478 - 00:02:22.780, Speaker B: So this is here.
00:02:24.750 - 00:02:25.820, Speaker A: What else?
00:02:26.670 - 00:02:28.026, Speaker B: I don't think there's too much to.
00:02:28.048 - 00:02:32.266, Speaker A: Really talk about specifically for this. It's pretty straightforward, just updating the types.
00:02:32.298 - 00:02:35.566, Speaker B: Like I said, there's another repo of.
00:02:35.588 - 00:02:48.820, Speaker A: Relay specs that Flashbots currently maintains. I don't know if Chris or someone wants to give an update about that. I know Justin has been working on Justin Troglia, but I don't see him on this call.
00:02:49.910 - 00:03:20.800, Speaker C: Justin isn't here. He translated this notion API spec for the builder into a proper Swagger specs. And there is a PR for the really update that the only change here is that it submits blockbiller submissions in both Bellatrix and Capella versions. That looks releasable, but there may be an issue with how it's displayed on the Swagger UI. So going to wrap that up soon.
00:03:21.570 - 00:03:22.654, Speaker B: Okay, great.
00:03:22.772 - 00:03:30.830, Speaker A: So the main change was, again, just basically supporting either type of block across the fork in the block submission APIs.
00:03:35.210 - 00:03:36.470, Speaker B: Is that right, Chris?
00:03:36.890 - 00:03:38.806, Speaker C: Yes, exactly. It's only this change.
00:03:38.988 - 00:03:40.360, Speaker B: Okay, great.
00:03:41.050 - 00:04:23.140, Speaker A: So, yeah, so we'll get something out there and yeah, generally the main implementation of that so far is the flashbots relay, which we'll get to a little bit later. But, yeah, if you want to make a conformant relay, then these relay specs are the place to start. While we're here, I did want to talk about specs generally, so there's another PR for Danab. So this is the EIP for four for it changes and things like that. I guess I'll drop a link in the chat here as well. I just want to call these out. Jimmy Chen has been working on these.
00:04:23.140 - 00:04:25.236, Speaker A: I also don't see him on the.
00:04:25.258 - 00:04:28.772, Speaker B: Call, but that's okay. Yeah.
00:04:28.826 - 00:04:49.564, Speaker A: Generally there'll be a bit more involved changes for this upcoming fork with respect to the builder APIs, just because now we have these blobs and there's still some changes or some design decisions being made around how the Blobs are being passed back and forth and that has some implications for the builder API. So this PR could still change, but I wanted to call it out just.
00:04:49.602 - 00:04:54.812, Speaker B: So people are aware of it and that's probably that.
00:04:54.866 - 00:05:07.250, Speaker A: I don't know if we need to discuss it too much. That's sort of the very high level on the specs. There was a question. Go ahead.
00:05:08.180 - 00:05:31.690, Speaker D: I pushed it in chat too, but basically when beaten, the spec should what, expect that to have been updated with respect to or with regard to the change that came out of sort of the Austria Interop event, which has suddenly stronger push to decouple Blobs and blocks the free the Blobs PR.
00:05:32.860 - 00:05:33.930, Speaker B: Yeah, exactly.
00:05:34.540 - 00:06:04.612, Speaker A: So, again, I know Jimmy, I haven't reviewed his PR in depth because again, there's still some thrash around that part of the forcepec. But essentially, I know Jimmy's been tracking those changes and so, yeah, I think the main thing is if we have one Blob versus many uncoupled blobs, then you essentially need to send over many of these blinded Blobs or blinded know, however that ends up looking like. And I believe this PR reflects those changes. But, yeah, I need to go.
00:06:04.746 - 00:06:05.380, Speaker B: I don't know.
00:06:05.450 - 00:06:10.660, Speaker A: Terrence, do you know more? It looks like you might have commented.
00:06:11.000 - 00:06:26.670, Speaker E: So I think it's also coupled with how validator signs the Blob, which is Beacon API, 30 two pull request, but I don't think this is like a blocker blocker. So I think, yeah, we can take our time to design this.
00:06:28.560 - 00:06:28.972, Speaker B: Cool.
00:06:29.026 - 00:06:29.196, Speaker E: Yeah.
00:06:29.218 - 00:06:54.916, Speaker A: I mean, I think, yeah, this will just kind of come downstream, at least with respect to the builder APIs. It'll just come downstream from whatever decisions the CL clients make. So should be pretty straightforward. And yeah, this was another PR I meant to link in the agenda. So thank you, Terrence, for dropping this in the chat. This is tangential, not super related, but it will have implications like we said for the design. So something to keep in mind if.
00:06:54.938 - 00:06:56.150, Speaker B: You'Re following this stuff.
00:06:59.220 - 00:07:06.964, Speaker A: Yeah, so I think that was all I had for the specs right now. If there are no other questions, then.
00:07:07.082 - 00:07:10.084, Speaker B: We can dig into probably the main.
00:07:10.122 - 00:07:16.070, Speaker A: Topic which is Capella hard fork readiness. So there's like a couple of things here.
00:07:16.700 - 00:07:17.112, Speaker B: Right.
00:07:17.166 - 00:07:42.624, Speaker A: The first one is implementation of the changes in all the various software that we have out there. A big one was getting a lot of the relay operators which I believe are on this call and just letting them know like, hey, you're going to need to do something for this hard fork coming up. Yeah, so I think we can just start with maybe chris, if you have an overview of the Capella changes, I think you had some documents that described them.
00:07:42.662 - 00:07:43.904, Speaker B: That was really nice.
00:07:44.102 - 00:08:48.544, Speaker C: Yeah, I put them together and posted them in the site chat. There have been changes needed to a lot of layers, including the relay. The Builder, the validation node, Mafboost is all wrapped up and then also to the CL client we use our Prism fork both to trigger the block building progress. But now we also added another endpoint to get the withdrawals so they really can validate them when a builder submits a block to filter out invalid withdrawals. So the MAF boost relay from our side is dependent now on our Prism fork, which is on this additional endpoint. And there is work on a SSE subscription reignited, hopefully that pulls through to have an SSE event standardized across all CL clients that will provide the withdrawals timestamp, preferent hour and everything else. And then any CL client with that could be used to drive a relay.
00:08:48.544 - 00:09:32.852, Speaker C: That should be a relatively simple change on the relay too. All in all, on the relay there are now four open PRS that are one leading into the other to separate out the individual changes. They all run on the shexiang network on our really there we've gotten a few thousand blocks through and basically all the changes throughout the stack are there. They are documented in the site chat and we are just wrapping them up, merging them and getting them into main branches early next week. I think the work on that will be done. I think that's a rough overview of where the flashboard stack stands. I think all our changes are basically there and pretty complete.
00:09:32.852 - 00:10:02.620, Speaker C: We don't expect any major changes anymore. It's mostly just polishing and merging it in. And I think the next steps for us are participating then in the Sepole and the Girly upgrade and it would be great to have as many different relays be part of these tested upgrades as well. So I think that's like the rough overview where the flashpot stack is and should be a good reference to implement into any other code bases.
00:10:06.440 - 00:10:46.832, Speaker A: Okay, great, thanks for that overview. Dustin had a question in the chat. So we'll just address that right now. Yeah, so there was this one PR to basically expose the withdrawals because that's like the main change with Capella. However, if we just step back a second, we say, okay, with each fork, if we have to keep adding things for this builder functionality, then it will be a little silly to keep adding new endpoints. So I think instead we're leaning more towards having this one SSD endpoint that couples everything together. Chris linked this GitHub issue in the chat and yeah, again, I haven't been able to review this yet.
00:10:46.832 - 00:11:16.236, Speaker A: I've been out of the office this week, but yeah, it looks good just from glancing at it. And yeah, this is a place to start in terms of having this information exposed. I think the main thing is having relays have access to this information. So like Chris said, right now they have a prism fork and obviously that's not great for client diversity and ideally you could plug any client in and I'm sure there are other use cases for having this information exposed as well. So I think it makes sense to.
00:11:16.258 - 00:11:22.204, Speaker B: Standardize SSC endpoints and yeah, hopefully that.
00:11:22.242 - 00:11:23.550, Speaker A: Comes together pretty soon.
00:11:26.180 - 00:11:26.544, Speaker B: Right?
00:11:26.582 - 00:11:42.390, Speaker D: I'll say so far the thing that is at least encouraging about these is that the Randow and withdrawals are both very cheap for a mean to calculate, so there's no real cost to doing this.
00:11:46.680 - 00:11:47.444, Speaker B: Okay, great.
00:11:47.482 - 00:12:19.170, Speaker A: Yeah, that's good to hear. And yeah, hopefully we don't add anything in the future. Maybe the Blobs could get a little hectic if we need to somehow send a bunch of data around. But yeah, hopefully this endpoint remains lightweight. And yeah, one question I had was essentially how this Michael Sprouse suggestion handles building on multiple heads. But yeah, again, that's probably something I should just go look at and might be a little in the weeds right now.
00:12:21.060 - 00:12:21.520, Speaker B: Yeah.
00:12:21.590 - 00:12:54.810, Speaker A: So we talked about the Flashbot software stack. I don't know if any relays want to chime in. I don't know exactly what the representation is with other relay teams, but if someone's here and you'd be able to chime in on your readiness, that would be great. If you could also have a relay ready for Sepolia or Goreli, that would be great as well. We'd be sure to include you in different testing efforts going on with respect to boost for those hard.
00:13:09.620 - 00:13:17.780, Speaker F: And indeed the ultrasound relay runs on Gurley. And I guess one question is do we have dates for Gurley already for the fork?
00:13:18.860 - 00:13:35.150, Speaker A: We do not yet. Sepolia is happening, I believe, the next Monday or Tuesday. And yeah, that being said, we could aim for Gorli for relays and just coordinate asynchronously to make that happen.
00:13:36.080 - 00:13:42.444, Speaker E: And I guess if Sepolia goes well, my feeling is Gordy would happen in the two weeks after that.
00:13:42.482 - 00:13:45.744, Speaker B: So like mid March, assuming nothing goes.
00:13:45.782 - 00:13:48.640, Speaker E: Wrong on Sepolia, seems realistic.
00:13:53.140 - 00:14:03.956, Speaker G: At Block Native, we're not running Sepolia, so we will be testing on Guerli, so we'll definitely be paying a lot of attention to when that date is and we'll be ready to test on.
00:14:03.978 - 00:14:04.550, Speaker H: Our.
00:14:14.740 - 00:14:50.204, Speaker A: Yeah, I mean that sounds good. I think that makes a lot of sense as well. Sepoli is a smaller net and yeah, I think we can have a lot of these changes together and then once there's a fixed Gorely fork date, then we can make the rounds, make sure everyone's ready and hopefully have like a nice dress rehearsal, so to speak, before main net. Okay, let me go find the agenda.
00:14:50.252 - 00:14:51.904, Speaker B: I just lost it because I have.
00:14:51.942 - 00:14:53.970, Speaker A: Too many tabs open on my computer.
00:14:54.420 - 00:14:59.440, Speaker B: It's always dangerous. I guess I could just click the link dropped.
00:15:00.900 - 00:15:11.350, Speaker A: What else? What else? Okay, yeah, I don't know Chris, if you wanted to give a really brief update on Xijang just because I know that was like a huge push and.
00:15:11.720 - 00:15:17.128, Speaker B: Might be worth calling out just so people are aware. Sure.
00:15:17.214 - 00:15:53.910, Speaker C: I'm not sure there's much specific to say, just that we put the whole stack up there and keep deploying and working together with the different CL teams and peritage to test the whole stack. I think we are now at a place where there is no errors and everything works post fork. I think then the next interesting point in time will be when it's actually part from before the upgrade to after the upgrade on the next test. Not sure there's much else to add for shexiang other than this was very useful to test everything.
00:15:56.820 - 00:15:59.280, Speaker B: Yeah, that sounds good. Definitely.
00:15:59.350 - 00:16:00.130, Speaker A: I think.
00:16:00.900 - 00:16:02.304, Speaker B: Well, one thing we can do is.
00:16:02.342 - 00:17:11.610, Speaker A: Hard fork testing, like actually testing the boundary and let's see. Sorry, I was looking to see if someone else was on the call, but they're not. So Mario at the F has been working on Hive support and it's pretty new, so I don't know the extent of the capabilities, but I do know they've been testing like the circuit breaker idea in Hive, which for those of you that don't know, Hive is like this automated client testing framework that we have. So it's really cool, really exciting to see the builder support and yeah, Chris just dropped a link there in the chat this was looking at. These are the results of all the different clients and how they behaved under the circuit breaker scenario, so that's really cool. But one thing I would like to move towards is building out this functionality and for example, one thing we could do is then essentially have web boost relays different components under these hard fork scenarios. So starting before a fork, moving through the fork and then after the fork, I think definitely we'll generally have devnets where we can test pre fork, post fork, all of that.
00:17:11.610 - 00:17:44.920, Speaker A: The hard part or like the part that we just have fewer shots at is the actual transition. So yeah, to the extent that we can have automated testing there. I think that's really valuable. And yeah, it's really exciting to see this foundation start in hive. Okay, we talked some about timelines and things. I did have this in the agenda, so I was called out. I've been working on Rust implementation of essentially the Maboostack, and it's still pretty early.
00:17:44.920 - 00:18:28.066, Speaker A: I'm a bit sort of bandwidth constrained on what I can build out. But that being said, I have put together this thing I'm calling a mempool builder, and the idea is basically to emulate the builder APIs, just using the mempool of a local execution client, DBD, to see where this really goes. I think some of the clients are already interested in using it for testing. So one example would be in the future, say the DNA changes are done ahead of time and then we could actually do a lot of this early testing on the CL side with that stack, and basically just wanted to call it out if anyone's interested check out. I guess it would be helpful to.
00:18:28.088 - 00:18:28.900, Speaker B: Have a link.
00:18:32.120 - 00:18:33.348, Speaker A: Check out this repo.
00:18:33.444 - 00:18:36.490, Speaker B: And yeah, we can go from.
00:18:38.540 - 00:19:10.736, Speaker A: Chris. Chris is asking, what do I mean? And so basically the idea is there's a consensus client that's like keeping track of consensus. There's a execution client that does all of that stuff, and then basically there's another component, which is this builder, and basically it's just building blocks from the mempool. And so rather than, say, having to have a prism fork Chris, to do all of that, instead you can just run this one piece of software and it basically man in the middle is the engine API and does all this stuff to orchestrate all the right pieces.
00:19:10.768 - 00:19:11.732, Speaker B: At the right time.
00:19:11.866 - 00:19:44.770, Speaker A: Yeah, I should put together more documentation, which I'll put in the README of that repo. I haven't done that yet. And yeah, we talked about timelines a bit, so yeah, just again, relay operators, if you're here, someone, me or Chris or someone else will be knocking on your door for the grille fork. So just keep an eye out for that.
00:19:47.780 - 00:19:48.848, Speaker B: Sure. Yes.
00:19:48.934 - 00:19:49.570, Speaker H: Sorry.
00:19:51.060 - 00:20:12.488, Speaker E: When the relayers say that they won't be able to test until gordy, is it because the code is not ready? Or it's just they don't have any place to test? For example, they don't have place to run a relayer because if it's later, if the code is ready, I feel like you should just test today. Right. Because EF, like DevOps, we do launch DevNet every week.
00:20:12.574 - 00:20:13.016, Speaker B: Right.
00:20:13.118 - 00:20:33.040, Speaker E: And then we can easily plug in your relayer and then test it. Right. So there's no reason to wait until gordy unless the code is not ready, because the sooner we can test it, the better, because directly after Grody, if this is a test, we probably want to do main net in two to three weeks.
00:20:33.110 - 00:20:33.488, Speaker B: Right.
00:20:33.574 - 00:20:36.096, Speaker E: And then if there's a bug, it's going to be a very stressful two.
00:20:36.118 - 00:20:37.090, Speaker H: To three weeks.
00:20:39.780 - 00:20:44.150, Speaker E: Don'T wait until Grodi if you can test it today.
00:20:46.120 - 00:20:46.868, Speaker A: Right?
00:20:47.034 - 00:20:47.412, Speaker B: Yeah.
00:20:47.466 - 00:20:48.884, Speaker A: Do any of the relays want to.
00:20:48.922 - 00:20:50.790, Speaker B: Chime in to that question?
00:20:54.120 - 00:21:55.720, Speaker F: I mean, for the ultrasound relay, it's basically a two people team with a very limited budget, and running a relay just costs about $1,000, if not more per month. And we're just very constrained from a kind of human resources standpoint. The other thing worth mentioning is that in order to be effective as a relay, you need the builders to connect. And I've spent the last two, three months trying to convince builders to connect to the ultrasound relay. It's kind of almost a full time job. I guess we could have dummy builders that are spin up, but yeah, that that also adds to the complexity of setting things up, because now we'd be in charge of setting up both the relays and the builders, and then we also need to coordinate with the validators in order to have a meaningful connection.
00:21:56.220 - 00:22:09.340, Speaker E: So we do have those today. So, Chris, please correct me if I'm wrong. Last time I checked, we do have a mod builder. We do have a mod validators, and it's actually very easy to set it up as long as you can provide the relay image.
00:22:10.020 - 00:22:13.970, Speaker H: And that's all we need, and we'll do the rest.
00:22:14.980 - 00:22:18.540, Speaker A: So there might be two different go ahead, Chris.
00:22:18.700 - 00:23:02.960, Speaker C: All right, just to say the flashboards Builder can easily run on any testnet, and you can even send it some fake bundles to make valuable blocks. And also this builder can act as a builder and a relay validation node in one instance. So basically, if you run a relay and have a validation node, you can just use the builder to have it fulfill both the validation node and the block building task on testnet in like a single process. So that's kind of like as easy as I think it gets. It's still as involved as running a GAF instance. But I think if you have some funds to send it valuable transactions, then it should be pretty easy to get winning blocks through any test network.
00:23:06.180 - 00:23:17.172, Speaker A: Okay, so I think that's all true. I think kind of Justin's bigger point was just capacity wise, having someone from each relay team to go and do all of that.
00:23:17.226 - 00:23:17.830, Speaker B: Right.
00:23:18.200 - 00:24:03.420, Speaker A: So that being said, what I see is if each relay can say, yeah, like what Chris said in the chat here, spinning up all subfrat is like, a lot of work. Anyone who has done it, many of you on this call have, you know, it's a lot of work. So all that being know, Terrence asked about Devnets, and we do have a lot of automated tooling say at the EF to do that. And so what seems to make sense to me is to say, okay, if we can all coordinate with the relays, to say, okay, points to one, well, I don't think all the relays are open source, but assuming yours was, then you could point to a software release that you say, hey, this is ready. Then from there we could start including that in all of this relay testing.
00:24:03.580 - 00:24:06.016, Speaker B: And again, I don't know if we.
00:24:06.038 - 00:24:17.050, Speaker A: Need to take up everyone's time now, but definitely I think it warrants having probably a more focused call at some points for relay testing and that strategy broadly where this would fall under.
00:24:25.160 - 00:24:57.410, Speaker G: Blockade. We'd be happy to work with that chestnet to try it out. I would do agree, though, with Justin, that there's a certain amount of resources that we have to spend to spin up an additional relay, spin up a builder, spin up bundle, injection into said builder, all that stuff to spin up the full pipeline to be able to test not just at least for us. It's not just spin up a guest node and you're good to go. I wish it were that easy.
00:24:58.660 - 00:25:03.890, Speaker A: Right. And so I think we should like, be well, okay. Chris dropped a question.
00:25:05.460 - 00:25:07.170, Speaker B: Block native, do you want to address?
00:25:07.540 - 00:25:16.592, Speaker C: Oh, yeah, I just thought that because Chris, you were just talking about the block native stack and I just was curious how far along, like, you have the dreamboat implementation.
00:25:16.656 - 00:25:17.270, Speaker B: Right.
00:25:18.040 - 00:25:22.390, Speaker C: Are you already working on the upgrades? How far along is that?
00:25:23.500 - 00:25:34.780, Speaker G: We're working on it internally. We're looking at it internally, trying to understand everything we need to cover, but we haven't committed any code to our repo yet to accommodate the capella.
00:25:39.460 - 00:25:40.530, Speaker C: Okay, thanks.
00:25:41.540 - 00:25:41.904, Speaker B: Yeah.
00:25:41.942 - 00:25:51.472, Speaker A: And so just to be clear, I kind of am hearing two things here. There's more like, okay, the relay operators have this software set that they run.
00:25:51.606 - 00:25:52.596, Speaker B: And I think that's kind of what.
00:25:52.618 - 00:26:45.270, Speaker A: Terrence was getting at, was more like, if there's this fixed software artifact, how can we test that? And I think the things I said follow from that. There's also the second thing, which is at the end of the day, relay operators will have actual deployments and it would be good to test those. I think given the overhead, this is tricky to ask every relay operator to, you know, you should be spinning know, for example, Xijang, like every DevNet that we have for each work, that's like a lot. So it seems like a good compromise is to say, okay, to the extent that we can. If you can produce most of the software that you're going to run, then we can put it into this more automated testing framework. And then for the actual deployments, we would test those Sepolio gorli, these other longer standing test nets that really operators will already support.
00:26:46.600 - 00:26:48.950, Speaker B: That would be my take on the testing here.
00:26:55.100 - 00:27:01.390, Speaker A: Dustin asked the question, will there be a way to find the set of relax operators supporting Sepolia around the fork? So.
00:27:03.440 - 00:27:04.876, Speaker B: Other than just going to the.
00:27:04.898 - 00:27:12.160, Speaker A: Different operators pages and seeing the information they put out, I don't think so. It sounds like just flashbots will be operating a relay for Sepulia.
00:27:14.180 - 00:27:15.810, Speaker B: Someone correct me if I'm wrong.
00:27:19.960 - 00:27:21.860, Speaker G: Well, definitely not dreambot.
00:27:31.060 - 00:27:31.872, Speaker B: Which is fine.
00:27:31.926 - 00:27:50.470, Speaker A: I mean, I think for future hard forks it would be nice to try to push for that. But again, I understand people have stuff going on. I think there's a lot we can do around automated testing. Kind of like I was alluding to and yeah, from there we'll just do our best.
00:27:53.080 - 00:27:59.048, Speaker B: I don't know who iPhone is but the thing is you can run a.
00:27:59.054 - 00:28:32.180, Speaker A: Relay on okay, hello Sam. That's fine. You can run a relay on Sepolia. It's just know you would just have to be able know, have people use it. Yeah, like Chris said, you can always run relays. The Balder set is closed on Sepolia and that's mainly just to keep it have this very stable testing testnet compared to say gorley where there's much more open persuasion and yeah, they're just kind of biasing towards different use cases.
00:28:32.680 - 00:28:32.996, Speaker B: Yeah.
00:28:33.018 - 00:29:20.940, Speaker A: So validators still do have to connect but the idea is that that's something the relay would then have to go and do the relay. I guess if we really want to do to test on Sepolia then yeah, I mean that's a fair like that being said, I think people on this call know most of the Sepolia validators and so if it seems like it's worth testing then we can make sure to do that. Okay, are there any other relay questions or things like that around the hard fork?
00:29:23.120 - 00:29:25.420, Speaker B: Otherwise okay.
00:29:25.490 - 00:29:30.670, Speaker A: Yeah, Sam, I can DM you and we can chat about what you have going on.
00:29:32.660 - 00:29:33.264, Speaker B: Yeah.
00:29:33.382 - 00:29:49.264, Speaker A: So are there any other sorry capolia, any other Capella things and otherwise I'd like to move to more of an open discussion. Part of the call a big thing is this optimistic relay idea from Justin.
00:29:49.392 - 00:29:52.084, Speaker B: Although I see Terrence just unmuted. Yeah.
00:29:52.122 - 00:30:23.296, Speaker E: So I guess one more thing. It's worth bringing up that post Capella or CHAPELLA that clients will have this feature. So this feature is that the clients will essentially compare block value between the local build block and then the builder build block and then choose whichever one is the highest. Right. So if today my local guest gave me a block as 0.1 e, but then the highest bidder block is 0.5, then in that case I will use my local one.
00:30:23.296 - 00:30:48.900, Speaker E: I don't think this is going to matter that much in terms of relayer and then the MVB boost because the validators will not sign it anyway by just letting you know if today you're monitoring. If today the relayer is monitoring, the relayer may be surprised because if it's the highest bid by plugin installated and that's probably because the validator is using the local highest bid.
00:30:52.060 - 00:30:53.544, Speaker B: Yeah, thanks for bringing that up.
00:30:53.582 - 00:31:46.890, Speaker A: So that's another important change we had with Capella was changing the engine APIs so that when a proposer goes to get a block, it basically could ask this local pathway or this remote pathway via Boost, and we now return the actual value of the block in the local pathway. And the cool thing about this is now you can put your remote bids from different relays and by extension, different builders in comparison with what you have locally. There's a number of reasons you want to do this, a lot of them around, like, suship resistance. But point being, is that's a really cool thing we added in Capella and yeah, that is a good point that Terrence brought up. If you're testing or just looking at mainnet performance, generally, there's more to the picture than just, like, the bids that you sent or that other relays. Yeah, cool. One thing.
00:31:47.340 - 00:31:48.088, Speaker B: Let's see.
00:31:48.174 - 00:32:04.210, Speaker A: Well, yeah, so I had the thought to add that into the hive testing. We discussed that a bit on the CL call this morning and yeah, that's something that will happen, but I don't think we need to go into more details here. That's more of like a CL thing, in my view.
00:32:06.340 - 00:32:31.000, Speaker G: Would that change on getting the local block because, you know, effective bid of that block? Will Mevboost update its Min bid strategy so that it's dynamic based on that? So that Mevboost will no longer give you a block if it's below that Min bid, which is determined by your local block.
00:32:31.980 - 00:32:54.176, Speaker A: Yeah, I don't think anyone's thought about changing Medboost to do this. The way that it works is that logic actually is pulled in a layer deeper into the Beacon node. And so the consensus layer client would say, okay, regardless of whatever Medboo sent to me, I'm going to have the highest, best remote bid. And then now I have this local bid and I can still say, okay, if local is higher, then prefer that.
00:32:54.198 - 00:32:55.650, Speaker B: One over the remote one.
00:32:56.580 - 00:32:58.130, Speaker A: Does that answer your question?
00:32:59.220 - 00:33:00.112, Speaker G: Yes, makes sense.
00:33:00.166 - 00:33:00.576, Speaker B: Thanks.
00:33:00.678 - 00:33:42.822, Speaker A: Yeah, I guess separately there's still this mint bid option going on. So that was something we added to Medboost that was really cool. I shouldn't really say we, but that was added to Medboost and yeah, that was super cool. Again, for these similar concerns around citizenship resistance and yeah, that still is in play. So you would need a remote bit above that floor to then even get that into your Beacon node. And then still separately, you have this local comparison happening upstream. So I want to save some time to go into this optimistic relay.
00:33:42.822 - 00:34:01.294, Speaker A: Justin was able to join us. I think maybe Mike as well has been working on it. Oh, yeah, he's yeah, let's see. I'll grab the PR and then yeah, maybe Justin or Mike. If you want to just give a sort of high level idea or summary.
00:34:01.342 - 00:34:07.586, Speaker B: Of the idea, I'd be happy to.
00:34:07.608 - 00:34:11.140, Speaker F: But Mike is the main person working on this. So Mike, do you want to go ahead?
00:34:12.070 - 00:34:22.146, Speaker H: Sure, yeah. Let me drop a few links in here first. The actual. PR. We made a PR against Slashbot's Webboost.
00:34:22.178 - 00:34:30.474, Speaker B: Relay and hopefully that's sent okay.
00:34:30.592 - 00:34:35.580, Speaker H: And then also I guess this doc provides a little more context on.
00:34:37.710 - 00:34:38.026, Speaker B: The.
00:34:38.048 - 00:35:17.014, Speaker H: Reason we're interested in this. So maybe it makes sense to give like a three minute elevator pitch and then we can kind of open up the floor for any questions or anything. Yeah, I think it might just be helpful to run through the flow really quick. I'm sharing my screen right now. If you're not looking at the zoom call then you can check out the link I sent. But basically the high level picture here is to kind of change how the block submission flow works. So I guess the sequence diagram shows the current state of these non optimistic block submissions.
00:35:17.014 - 00:36:17.930, Speaker H: That's what we're calling kind of the status quo where the block validation happens before a bid is marked active for the builder. So the relay sends the execution payload to the validation nodes, the validation nodes confirm that it's valid and then the bid becomes active to win the auction. And that all has to happen before get header is called from the proposer perspective. Sorry that has to happen before Get header because Githeader returns the max bid from the relay. So what we're proposing here with the optimistic relay is to actually mark the bid active immediately. So when the builder submits the block kind of immediately we say, okay, this bid is active, it can win the auction and the validation happens asynchronously. So we basically queue up in a different go routine, the simulation of the block against the validation nodes.
00:36:18.290 - 00:36:19.040, Speaker B: And.
00:36:21.090 - 00:37:41.158, Speaker H: That happens kind of post the bid being marked active. The reason to do this is because a lot of the winning bids come in right at the end of the slot and the validation takes some amount of time because it's a call between the relay and the validation nodes and there's some amount of time that is involved in just simulating the block against Geth. So if we remove those extra milliseconds from the end of the slot then the winning bid can come in closer to the twelve second mark and thus contain more mev both for the builder and for the proposer. So the kind of obvious risk here is that if you serve an invalid block to the proposer and they sign that header and then no valid block is produced, then you have a missed slot. This is kind of the worst case scenario and the way we plan on defending against it is having collateral held for the builder. So any builder who ends up submitting a block that wins an auction but doesn't actually produce a valid block on chain, their collateral will be used to repay the proposer who lost out on the slot. So yeah, that's kind of the high level idea.
00:37:41.158 - 00:37:54.890, Speaker H: I guess we can talk more specifics about performance. We've done some work on actually really understanding how much time this could save for specifically the ultrasound relay. But yeah, that's the high level picture.
00:37:58.630 - 00:38:31.070, Speaker G: In this scenario. So I understand that there's some collateral with the builder, but as far as the validator is concerned, their interaction is with the relay. So how does the relay recover from damage due to builders not providing the block? How does the relay actually is made whole in its sort of reputational damage when it's not part of the collateral?
00:38:35.330 - 00:38:36.510, Speaker H: Go ahead, Justin.
00:38:39.270 - 00:40:00.886, Speaker F: So I guess in terms of making the refund to the proposer, the relay has all the information it needs because it has the fee recipient in the registration message. And from my understanding, there have been some refunds that have already been done by various companies, including block, native, maybe blocks, route, maybe manifold. Also where there have been some bugs and there have been some refunds that have been given and I don't think there have been kind of issues giving refunds. One of the things worth highlighting is that the proposer will get compensated with a delay. So usually they'll receive the execution rewards immediately and they are accessible in the EVM, but there'll be a small delay. So our goal with the ultrasound relay will be to make a refund within 24 hours. In terms of the reputational damage for the relay itself, it should be fairly minimal if there's an understanding, basically an education understanding within the community that it was not the relay that was at fault, it was the builder.
00:40:00.886 - 00:41:31.954, Speaker F: And then the relay did the best which it could, which was to refund the proposer promptly. Now, one of the things that we intend to do as a relay operator is every time we do such a refund, be very transparent about it. So we could have, for example, a log on GitHub which details why we made a refund, for example, exposing the bad block so that everyone can verify that it's invalid. And there's various things that you can do as an operator to try and minimize these bad events. One of them is if and when there is a bad event, making sure that you ask the builder to fix whatever bug caused the issue. Another possible idea is to have some sort of a timeout or a cooldown period, for example, one day, where in addition to punishing the builder financially because the builder, it's a pure financial loss for the builder, they have no incentive to really do that. In addition to the financial incentive, they would be disqualified from this optimistic relaying for a whole day and that would lead to further losses because they wouldn't be winning as many auctions.
00:41:31.954 - 00:42:47.330, Speaker F: And if you want to be even more kind of stringent, you can have an additional kind of refund fee, maybe a fixed fee of, for example, 0.1 E. But yeah, we don't expect these things to happen in practice very often. And one of the reason is that if and when there is a build a bug, it's overwhelmingly likely that won't lead to a loss for the proposer. And the reason is that roughly speaking, we're seeing builders provide, let's say, 50 blocks in a single slot and they're competing with many other builders. So let's say we have on the order of 1000 submissions per slot and if there's even one of them which is detected to be invalid, even if it's not a winning one, that will lead to the builder being demoted. So if there is a bug, let's say there's a 99% chance that it will be caught early, it will lead to a demotion without actually being the winning block.
00:42:47.330 - 00:43:07.640, Speaker F: That requires a refund. So in practice we don't expect to be doing refunds, but we do want to have all the infrastructure in place, especially from a policy standpoint to discourage bugs on the builder side to start with.
00:43:19.140 - 00:43:19.980, Speaker B: Okay, thanks.
00:43:20.070 - 00:43:30.020, Speaker A: There was a question in the chat who reveals the body in this proposal, which I believe it still works like it does today, but yeah, maybe Justin or Mike.
00:43:30.780 - 00:43:31.288, Speaker B: Yeah.
00:43:31.374 - 00:44:32.520, Speaker H: So the relay still gets the full execution body from the builder before the bid is active. So yeah, in this case the signed beacon block will still be published by the relay. Another optimization that we're thinking about, and from our analysis of the performance of the relay, we know this will have a lot of impact too, is that one of the bottlenecks of the block submission flow is the actual data, like the bytes getting into the relay of the block. So the blocks can be kind of big. So actually both receiving the blocks over the network and decoding those and unmarshaling them into a Go object is like part of the slowness. So eventually just having the headers come, basically having builders only submit headers or by parsing the header first before parsing the rest of the body and then marking the bid active immediately, we could have some more performance improvement. But that's kind of a further on down the line thing.
00:44:32.520 - 00:44:38.220, Speaker H: What we're doing right now is having the block be published by the relay.
00:44:40.720 - 00:44:54.076, Speaker G: Just to clarify on that, are you suggesting that down the road that the relay would deliver the header without actually having the body from the builder yet and taking on that additional risk, latency risk with the builder?
00:44:54.268 - 00:45:21.210, Speaker H: Right, yeah, that would be kind of the next evolution. And then we would have to build in logic that says, okay, if the header wins the auction but the body isn't available, then we might have to wait some amount of time and hope that the rest of the body comes in over the network. So yeah, this introduces some more complexity. So that's why it's not what we're proposing in the initial version, but it's something we're thinking about.
00:45:22.300 - 00:45:48.200, Speaker E: This is interesting. I guess my only feedback here is if the payload is invalid right, then the block is missed, but the block actually contains more objects than the payload. For example, the block contains adaptations, deposits and withdrawals, right? So therefore it kind of impose a little bit of negative tenality to the chain. Because if today a lot of blocks are missed, then are we going to refund those occupation rewards and sync committee.
00:45:48.220 - 00:45:49.670, Speaker B: Rewards and stuff like that?
00:45:51.800 - 00:46:22.780, Speaker H: So I think the point we're trying to make, and hopefully the design goal here is that we're not going to significantly increase the number of missed slots, right? Ideally, a missed slot should be an extremely rare event. And by doing this refund thing and by having a post mortem after every missed slot, then hopefully we'll be able to see if this is causing a lot of network degradation, then we can kind of turn it off immediately. Do you have anything to add there, Justin?
00:46:24.640 - 00:47:17.584, Speaker F: Yeah, I guess in the worst case, it's one missed slot per builder per manual intervention. So when the motion happens, it's not like there could be a mass number of missed lots like we've seen in the past. It would just be like a single isolated missed lot. One of the things that we've observed kind of empirically is that every day there's on the order of ten kind of orphan blocks. And in addition to that, there's about 1% of blocks that are just empty because the validator just didn't show up. And these provide essentially zero network degradation. And optimistic relaying would be at least an order of magnitude less, more like several orders of magnitude less degradation than what we already have.
00:47:17.584 - 00:47:39.060, Speaker F: And not only that, but from a designer perspective, we've designed the firm blockchain to be extremely resilient, like World War Three grade kind of resilience. And even if 90% of blocks were empty, the firm chain would still keep on running. So in the grand scheme of things, it's essentially noise.
00:47:43.420 - 00:48:00.028, Speaker A: So I have a question around rollout strategy. So the intent is to merge this into the flashbots relay, right? And then from there, would it be on by default or would you be able to opt in or maybe we.
00:48:00.034 - 00:48:01.310, Speaker B: Haven'T thought about that yet.
00:48:02.000 - 00:49:02.240, Speaker H: Yeah, so I guess the way we're doing the development now is we're running it on gorli with the ultrasound relay. We're planning on pushing it to prod and starting with a very small set of maybe one or two trusted builders. The one nice thing about the patch, I guess, is that it runs the flashbots relay kind of in non optimistic mode by default. Like it takes a manual intervention to modify the database to say, turn this builder pub key into an optimistic builder. So kind of the default strategy is what the status quo is today. We made it a PR against the flashbots repo, mainly for, I think, visibility reasons. I don't know know we can talk to Chris about if this is something we actually want to upstream into that or if we want to run it just on ultrasound in prod for a while to harden it and make sure that everything's working as intended.
00:49:02.240 - 00:49:23.784, Speaker H: But yeah, it's definitely like opt in. And we expect that starting with a very small set of builders and a relatively small amount of collateral, we can test a lot of the different or we can just see how it runs. And if there's anything we learned from.
00:49:23.822 - 00:49:24.410, Speaker B: That.
00:49:26.780 - 00:49:32.200, Speaker H: Not opt in per, it's opt in per builder. Sorry, I was seeing a chat from Anthony.
00:49:34.480 - 00:49:48.288, Speaker A: Yeah, Alex, yeah, I just wanted to call it out because I think a lot of the relay implementations today are either just directly the flashbots relay or sort of minimal forks of that code base. So we should be very careful about.
00:49:48.374 - 00:49:52.050, Speaker B: What we merge in there for sure.
00:49:55.140 - 00:50:44.880, Speaker F: Our expectation is that because we're in a race to zero in a few months, maybe even weeks, if you're not running in optimistic mode, then you're just not relevant as a relay. One of the things I wanted to highlight on the builders is that I posted a message on the flashboard discord asking if there's any builders who want to be part of the early testing. We don't want to pick favorites in terms of the builders and give them priority access to this. So if you do want to be in the early batch of testing as a builder, please DM us and we'll keep the amount of collateral low, for example, on the order of one e per builder.
00:50:47.780 - 00:51:40.260, Speaker H: And another thing we kind of have talked a bit about and this doc has a small section on it, is this idea of the fact that small and other relies besides ultrasound might want to adopt this but might be held back by the kind of financial and legal implications of holding collateral. And so one idea we have to address this is we're calling a guarantor, like a builder guarantor. And under this model, the relay would make it known to the builder that a slot was missed in the case that a slot is missed and I guess the builder would be responsible for refunding, at least in the base case, the builder would directly refund the proposer that missed the slot. In the case that the builder either stops responding or kind of denies.
00:51:42.120 - 00:51:42.580, Speaker B: To.
00:51:42.650 - 00:52:10.620, Speaker H: Volunteer to pay back the proposer who missed the slot, then the guarantor would be the person who is in charge of refunding the proposer. So in this case, I guess thesis here is that builder reputation far exceeds a single slot payment. So that would hopefully simplify a lot of things and allow different forms of guarantors to kind of back the builders who are actually doing the block submissions.
00:52:15.440 - 00:53:18.740, Speaker F: One of the things I guess worth highlighting is that there is a way to run the relay without taking any collateral and at least no financial collateral. And the way that it works is that you're using reputational collateral or maybe legal collateral. And one of the things that we've observed is that as a builder your reputation is worth a lot and part of the reason it's worth a lot is because it gives you access to bundle flow and it also potentially gives you access to proprietary transaction flow both of which makes you relevant as a builder. So we actually believe that the reputation of builders is at least an order of magnitude, if not several orders of magnitude higher than one e. And so what we're willing to do is to not take collateral from most. Builders, at least the identifiable builders that have reputation and kind of expect that if and when a bad block.
00:53:21.000 - 00:53:21.364, Speaker B: Is.
00:53:21.402 - 00:54:28.644, Speaker F: Inserted on chain then they would make the refund directly to the proposer without having to go through any sort of intermediary. And I guess you could ask what happens if the builder just decides to burn their reputation which is worth several orders of magnitude more than one e? Well in that case there would be some sort of guarantor that can step in and make the proposal whole, that guarantor potentially being the relay operator. And so that's one of the models that we're considering, at least for the initial testing, where there's only one EF of collateral per builder, where we basically just credit the builders with one ETH for free. We just trust. Them with one ETH of our own funds, with an understanding that if there is a bug on their side, they would make the proposal whole. And also an understanding with the proposers, which is that if the builders don't make them whole, then we would step in as a last resort.
00:54:28.692 - 00:54:29.640, Speaker B: Guarantor.
00:54:31.500 - 00:54:59.796, Speaker H: And one thing that I think we should mention, just following up on that is that if a block has a value that's higher than the collateral then we would just process it in the non optimistic way. So the first thing we do is check if the value exceeds the collateral of either the builder or of the guarantor. So that will never be a situation where a proposer misses out on a huge mev opportunity and then there's not sufficient collateral to repay them if they.
00:54:59.898 - 00:55:01.540, Speaker B: Sign an invalid header.
00:55:02.200 - 00:55:17.156, Speaker G: So in that case is there an opportunity for a builder to have a higher collateral and therefore a richer builder can basically get preferential treatment because they will not be in the pessimistic sort.
00:55:17.178 - 00:55:21.012, Speaker B: Of pipeline because they have a higher collateral. Right?
00:55:21.066 - 00:55:33.016, Speaker H: So higher collateral does imply a higher amount of their blocks submitted will be optimistic. We think in the long know those super super high mev blocks are rare.
00:55:33.048 - 00:55:37.656, Speaker B: Enough that this doesn't seem like that.
00:55:37.698 - 00:55:43.040, Speaker H: Efficient of I guess that large of an issue. I don't know if you have anything to add there Justin.
00:55:43.700 - 00:56:44.624, Speaker F: Yeah so it is definitely the more collateral you have the more of an edge you have. And so what we want to do here is basically limit the amount of collateral per builder and it would be the same limit for every single builder. For example, it could be a limit of one E. Now, the really good news here is that if you look at the distribution of mev over rewards over the blocks, the vast majority of blocks have less than one E. We'd have to quantify it exactly, but it's on the order of 95%. And so from our perspective, what is our mission as the ultrasound relay is we want to improve the censorship resistance of ethereum and it's perfectly fine if we do so on 95% of the blocks. And then the 5% tail would would just go through the status quo pessimistic validation.
00:56:44.624 - 00:57:28.370, Speaker F: But yeah, it is important that there is the same limit for every builder and that this limit be low. And if the price of ETH increases dramatically, it goes to 10,000, 10,0000 a million dollars per ETH. Well, we can just reduce the value the cap over time. And one possible policy would be to cap the amount of collateral to target, for example, 95% of the blocks. But that's kind of more of a policy thing for relays and we're kind of encouraging relay operators to have a reasonable policy there in terms of the cap.
00:57:35.760 - 00:57:48.530, Speaker A: So just a timing thing. This call is only scheduled for an hour and we're pretty much at the hour. If people want to stay on, I'm happy to do that. It sounds like there are a lot of questions.
00:57:49.940 - 00:57:51.456, Speaker B: Yeah, I don't know, maybe Justin or.
00:57:51.478 - 00:58:04.150, Speaker A: Mike if you have place to direct this conversation. I don't know if it's going to the PR or if there's somewhere else, but it sounds like there might be more async discussion we could have.
00:58:07.890 - 00:58:23.250, Speaker H: Yeah, I think the PR could be a reasonable place. I think maybe a forum post would be easier in terms of just if there's a lot of back and forth, it'll clutter up the PR. I don't have a super strong opinion here though, Justin.
00:58:24.950 - 00:58:40.520, Speaker F: I don't have a strong opinion. The PR is great also DM us if you want to chat. And I also linked another zoom link which I'll be happy to stay on for half an hour, let's say, if you have further questions, you want to talk about the optimistic, really?
00:58:45.790 - 00:59:06.180, Speaker A: Okay, so perhaps we'll do that. If anyone would like to move on to sort of an extended Q A, justin is happy to do that. And yeah, otherwise, are there any final comments about any of the other things we discussed? There's a question in the chat. When is the next call? There isn't one right now.
00:59:07.590 - 00:59:09.794, Speaker B: I think for now it makes more.
00:59:09.832 - 00:59:26.680, Speaker A: Sense to have these be supply driven in terms of yeah, I was thinking kind of monthly if people feel strongly, then yeah, maybe chime in in the flashbox forum post where the agenda was and yeah, we can figure out how to move next.
00:59:28.090 - 00:59:32.890, Speaker G: May I suggest that we have another call before the quirrely hard fork.
00:59:34.670 - 00:59:35.130, Speaker B: As.
00:59:35.200 - 00:59:45.790, Speaker G: Sort of from readiness? I like the monthly idea, but just because of the very interesting hard fork coming up, you might want to be tied to those calendar events.
00:59:46.770 - 01:00:19.700, Speaker A: Yeah, that's a great idea. Part of my hesitation is I know we all have a lot going on. It's not that we need another standing call, whether that's weekly or monthly or whatever, but yeah, definitely we should have a call before everything we're like work, so everyone keep an eye out for details for that. I'll find a time, I guess, generally, does this time on the calendar work for everyone, like the 04:00 P.m. UTC? I guess you're here, so I guess it did. If it doesn't, let me know.
01:00:20.950 - 01:00:21.662, Speaker B: Otherwise.
01:00:21.726 - 01:00:27.860, Speaker A: Yeah, I think we'll go ahead and wrap it up and yeah. Thanks, everyone, for coming along.
01:00:30.510 - 01:00:31.690, Speaker H: Thanks for hosting.
01:00:32.750 - 01:00:33.702, Speaker B: Thanks, Alex.
01:00:33.766 - 01:00:34.378, Speaker C: Bye, everyone.
01:00:34.464 - 01:00:35.370, Speaker H: Thanks, everybody.
01:00:35.520 - 01:00:36.250, Speaker G: Cheers.
01:00:36.750 - 01:00:37.320, Speaker E: Bye, everyone.
