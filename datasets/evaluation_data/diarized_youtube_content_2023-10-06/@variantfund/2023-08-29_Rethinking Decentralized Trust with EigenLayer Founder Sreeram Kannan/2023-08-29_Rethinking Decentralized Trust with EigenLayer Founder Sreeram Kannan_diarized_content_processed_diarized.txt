00:00:08.010 - 00:00:17.840, Speaker A: Hey Shiram, I'm super excited about your talk, so without further ado, I think it'd be great if you briefly introduced yourself and then we can go into your talk.
00:00:18.210 - 00:01:06.378, Speaker B: Awesome. Thank you so much me on the wearing team, for putting this together. It's great to be here and talk at the variant founder fellowship. I'm Sriram, founder of a project called Eigen Layer. Eigen layer is a mechanism for a universal marketplace for decentralized trust. I'll explain what that is in the talk, but my interest in blockchains goes over the last six years. I've been professor at the University of Washington, Seattle, working on blockchain research, consensus scalability, game theory, and my interest in peer to peer systems dates even far back from 2006 when I was doing my master's and phd in peer to peer wireless systems.
00:01:06.378 - 00:01:10.002, Speaker B: Delighted to be here. Thanks, Jumeida, for making this happen.
00:01:10.136 - 00:01:16.518, Speaker A: Yeah, of course I'm excited. Okay, let's start with your talk, and then I'll come back at the end when we do the Q A.
00:01:16.684 - 00:02:09.538, Speaker B: Awesome. So this is a short talk to kind of introduce some of you who may not be that familiar with Eigen layer. Eigen layer is a universal marketplace for decentralized trust, and I'll explain what it is. But before we get into it, I think if you ask what is a blockchain solution versus what is not a blockchain solution, or what is a crypto solution and what is not a crypto solution, you'd find that the dividing line between what is a crypto solution and what's not a crypto solution is decentralized trust. If something has an element of decentralized trust to it, you'd likely call it a blockchain or a crypto solution. If it doesn't, then you wouldn't call it crypto or blockchain solution. So decentralized trust is the raw ingredient, which makes up pretty much all of the space that we call crypto or blockchains.
00:02:09.538 - 00:03:12.294, Speaker B: And what we are aspiring to build is a universal marketplace for decentralized trust. What do we mean by that? To start with, I want to kind of dial back and say that it's not a new idea. The idea that you want to create and sell decentralized trust is not a new idea. And Ethereum was really the first marketplace for decentralized trust. Why do I say this? If you just zoom back to pre Ethereum, if you had something like bitcoin, then anytime you need to create a new idea, you need to create a new application, which doesn't fit into the bitcoin script, you have to go build your own trust network. And what Ethereum did is by building the stack where you have the Ethereum trust network at the base originally started, the tool of work now migrated to proof of stake. But there's a consensus protocol on top, and then on top of which there is a general purpose programming language, the Ethereum virtual machine.
00:03:12.294 - 00:03:55.554, Speaker B: What that did is enable a whole host of different decentralized applications to be built on top of it. And you can think of the trust as flowing from the trust network through the consensus protocol to the virtual machine to the applications. Another way of thinking about it is it's separated who brings trust. So the trust flow is from the Ethereum trust network to the consensus protocol to the virtual machine. And the people who create these applications themselves don't need to be trusted. In fact, if you think about blockchains as enabling a pseudonymous economy, this was the key like step function to enable that. Because now as a creator, you don't need to be trusted.
00:03:55.554 - 00:04:46.358, Speaker B: If you want to create uniswap or any of these applications on top, you yourself don't need to be trusted. You are riding on the trust that's created by this massive Ethereum trust network. And so this is a separation or modularization of who brings innovation and who brings trust. Another way of thinking about it is by creating a marketplace for decentralized trust. Essentially, ethereum sells the decentralized trust by selling block space. Block space is just a crystallized, refined version of the raw ingredient that is decentralized trust. Decentralized trust is taken from the Ethereum trust network, distilled through the consensus protocol, the virtual machine, a particular gas limits set on top, which is whatever, 15 million average gas per block, and then you get something called block space.
00:04:46.358 - 00:05:57.066, Speaker B: That's what is being sold to these applications. And the applications are basically sharing a portion of their value because decentralized trust is such a useful thing for them to consume. So that's the first marketplace for decentralized trust, Ethereum. And I think what this did is to enable a massive amount of innovation at the DAP layer and many, many people coming and creating these new and interesting services on top of common decentralized trust. However, what we are finding, or what we found over the first three to five years of Ethereum, is that the marketplace was not flexible enough. What do I mean by that? For whatever reason, whatever you build things on top of the application layer, the amount of block space that Ethereum kind of sells is fixed so what if you wanted to increase block space? What if you wanted to reduce the time to finality? What if you wanted to deploy a new virtual machine? There is a problem. You cannot just borrow trust from the Ethereum Trust network.
00:05:57.066 - 00:07:09.218, Speaker B: It's not flexible enough. The marketplace is not selling the raw material. The marketplace is selling a finished product, a refined product, which is block space, rather than selling the raw material, which is decentralized trust. Okay, so what this did is as soon as basically, if you look at the chart of Dapps, as soon as cryptokitties came up in 2017, which was basically an NFT project, and it demanded so much of block space that people realized, okay, it is possible that Ethereum block space is not going to be enough for all the dapps that need to be built. And you saw a whole bunch of new layer ones which innovated at various different things, the consensus layer, the virtual machine, all kinds of different ways. Okay, what we want to do is my own journey is as an academic, we came up with a bunch of new consensus protocols, scaling virtual machines, all these kinds of different, or game theory for coordinating all these different things. But any new innovation needed, if it's deeper than the DAP layer, needed its own new trust network.
00:07:09.218 - 00:07:28.122, Speaker B: And we found this to be an insurmountable challenge, that every time you have a new idea, you need to go find your own new trust network. So that's why we've built Eigen layer. Eigen in German for your own. It's your own layer. You can build whatever you want on top of it. We call it also the restaking collective. The principle is very simple.
00:07:28.122 - 00:08:23.790, Speaker B: You go to Ethereum when you stake in Ethereum. So the root of trust of Ethereum after the merge, is staking. In staking, you put down a bunch of ETH and then promise that you're going to not violate a covenant of how you make blocks in Ethereum, and you restake that on Eigen layer. What it means is you're basically saying that I'm setting the withdrawal when you make an additional promise on the Eigen layer system. Eigen layer is a system of smart contracts on Ethereum. And then you are basically promising that you're not only going to be good at making Ethereum blocks, but also good at whatever new things you're promising to do, whether that is validating for an oracle or data availability or any other services in the ecosystem. So when you're building a new service, essentially you're building two things, an off chain container that the Ethereum stakers can now download and run this additional service.
00:08:23.790 - 00:09:20.622, Speaker B: This container can be written in pretty much open semantics. You can write this in C, C plus plus, whatever language that you like. And we have some initial specification as to what kind of APIs and rpcs it should have for enabling things like monitoring on the other side. You also want to enable the services to build a smart contract on Ethereum. And this smart contract talks to the Eigen layer. Smart contracts and performs some core control functionality, which is how do you register to a new service? How does the new service pay you as a staker, and what is the negative incentive or slashing condition? All of these are programmed into that contract. So the simple control functions are programmed in the contract, but the actual execution is offloaded into this container, which you can then download and run.
00:09:20.622 - 00:10:12.750, Speaker B: So this enables basically like anybody to come up with arbitrary new distributed systems that can then be deployed on top of this common trust network. So if you wanted to create your own chain, if you want to create your own oracle, if you want to create your own data availability, if you want to create any new service, you can reuse this paradigm to actually go and do know. The vision is basically, once you have something like this, the marketplace is very generic. Essentially you can think of Eigen layer as a generic marketplace for decentralized trust, because you can come into Eigen layer and say, I only want these kinds of stakers, I want these kinds of participants. And a staker can say, I can only want to serve these kind of services which pay me this much, which pay me in this token. So it is a very flexible marketplace for decentralized trust. So that's the core paradigm.
00:10:12.750 - 00:10:54.078, Speaker B: Any system can now leverage economic security and decentralization from Ethereum. You don't need to go and build a new trust network for every new idea that you have, and you can start doing all kinds of interesting things with it. We have ourselves building Eigenda, a data availability layer on top of Eigen layer. But you can build mev management, you can build settlement layer on Ethereum. Settlement finality takes 12 minutes. You may have an idea for how to get finality in 1 second, and you have a super fast protocol for it, and then you can actually go build it. We're naming these all Eigenx just to show that they're depending on Eigenve, but actually these are third party protocols that anybody can come up and build.
00:10:54.078 - 00:11:58.430, Speaker B: Mev management I didn't talk about. But the core idea is you have a freedom as a block proposer and Ethereum to make blocks whichever way you want, and you can constrain the degree of freedom yourself. For example, you can make a promise that I'm going to include your encrypted transaction in my block, and if I don't include it, I might get slashed. So you can start making all kinds of interesting additional promises on top of eigen layer, which modulates the properties of Ethereum itself. And I briefly touched upon decentralized sequencing, which is the idea that as a roll up, for example, you want to have a common sequencing layer because you want to have censorship resistance. And you can borrow decentralization and slashing properties from Ethereum and actually build decentralized sequencing on eigen layer. You can build bridges, moving data in and out of Ethereum, as well as moving data across roll ups inside Ethereum through restaking.
00:11:58.430 - 00:13:08.358, Speaker B: So these are just some starting points. We have some teams already working on some of these different aspects, the publicly announced ones, for example, for decentralized sequencing, we have espresso, which is building a decentralized sequencer on top of eigen layer. Okay, so just briefly, I want to mention about DA we are building eigenda, which is a highly scalable data availability layer for rollups. Roll ups usually have to publish either the inputs or outputs of the computation that they do on a common layer, so that anybody else can double check what they're doing, can continue the operations even if the roll up nodes go down. So you want to have a common layer on which data is published. And we are building a data availability system called eigenda, which is based on dunk sharding, which is the Ethereum roadmap, but already built where you can run up to ten megabytes per second of throughput. Ethereum today is only at 80.
00:13:08.358 - 00:14:01.206, Speaker B: Reason we're able to do so much better is it's built on the idea of data availability sampling or data availability scaling. And you not only have very high throughput, you also have very low latency. The fundamental cost basis of the data availability system is very low. Instead of having every node need to download and store the data, you actually have every node store only like a very small chunk, which is cryptographically array coded, and then it is also highly customizable. So that's a brief overview of what we're building with Eigen layer and Eigenda. And right now we are on main net, where we have restaking. Over the next three quarters we will have not only restaking.
00:14:01.206 - 00:14:40.034, Speaker B: Right now you can only do restaking. And over the next quarter we are onboarding operators so that restakers can delegate to operators. And then after that, between Q four and Q one of next year, we'll have services main net, where people can deploy new services using some of the formats that I talk about. So that's a quick overview of what we're doing. If you're interested in any of this, of course, you're welcome to build on top of Eigen layer or eigenda. If you're interested in coming and joining us in any of the capacities, please also feel free to ping us.
00:14:40.152 - 00:15:07.242, Speaker A: Thanks so much, Shiram. Okay, now we can head into the fireside part of this. So I obviously have a bunch of questions to ask you, but again, feel free to ask questions, fellows. I'll just ask you to unmute when you post, just like last time. So I guess first I'd love to go back a bit and talk a little bit more about your background. So you mentioned your research at University of Washington a bit. I'm curious, how did that research eventually lead you to found Eigen layer?
00:15:07.386 - 00:15:45.850, Speaker B: Yeah, part of it is what I mentioned briefly, which is that we were building new consensus protocols. And originally this is around 2017, 2018. When I got started, we were working on how do you scale bitcoin? So that was one of the kind of fundamental questions we were working on. And in that era, some of you may be new here. In that era, there was this thing that people were calling Prof. Coins, like professors creating new projects and associated tokens. And it took me a little bit of time to realize that profcoin was a derogatory term.
00:15:45.850 - 00:16:39.894, Speaker B: But looking at it, actually, we ourselves, when we came up with new consensus protocols, the first natural reaction of an academic is to say, hey, does anybody want to use this? It's open source ideas, open source projects. Like anybody wants to use it. We went to scaling bitcoin and gave a talk there. It took us some time to understand that, okay, this is pretty much an ossified system. It's not going to upgrade to do anything remarkably different. Then we talked to Ethereum, and then we realized, oh, this is a very slow moving system for a good reason. It has so much of value on it and all these principles about things like client diversity, which makes sure that not only one client is built to a specification, but there are six or ten clients built to a specification.
00:16:39.894 - 00:17:41.854, Speaker B: It's pretty amazing amount of coordination, so they're not also going to just randomly change their protocol, even if they find something else is a little bit better. So this led me to down this path where the question became, hey, it seems like there's a lot of infrastructure ideas, and the only thing I could see people doing was basically starting new l ones whenever there's a new idea. And that seemed very counter to me to be the right way to do things because each of these new l ones would have something really awesome, but lot of other things not very good because it's very difficult to build everything in one platform. Part of modern civilization is specialization, and why would it be that I just have to build an l one which is better in community, it is better in the token value staked, it is better in ux, it is better in middleware. It's just insane to think that that would happen. So that became kind of led me into the direction earlier. We were like, okay, there's no way.
00:17:41.854 - 00:18:30.030, Speaker B: We would have to just go start an l one. And thankfully we didn't do that because that has led me down this direction. But that was the natural, it was like, okay, if you can't see your idea adopted anywhere and the only way is to go build your own l one, maybe that's what you have to do. And we were dabbling with that idea for a bit before we realized all these problems that I laid out. And thankfully we didn't go down that route. And my quest instead became how to leverage existing cross networks to do more so that we can actually have. If you look at 1995 Internet and you look at how you built a web application, you'd have to build your own server rack, you'd have to build your own identity infrastructure, you'd have to build your own payment infra, you would have to build your own DB infra, and then you would have to build your application on top of it.
00:18:30.030 - 00:19:22.560, Speaker B: But in 2023, that's not how you'd build a web application. You'd say go to AWS for your cloud, you would use oauth for your authorization, stripe for your payments, MongoDB for your database, and then just build something on top. So that's the same thing we want to replicate here is, okay, you have Ethereum, it already has decentralized trust. Can you just stack on these SaaS like layers on top so that anybody who wants to build a web application or a crypto application can then just concatenate these together? So that's where we kind of landed into this vision and we didn't start. We called this Eigen layer at the beginning, but we didn't have the idea of actually restaking. The original white paper was called Eigen layer unleashing the SaaS arrow of blockchains. We had this vision that we want to solve this problem, we don't have a solution to it.
00:19:22.560 - 00:19:29.826, Speaker B: And then we over time landed up with restaking as being a solution to that problem.
00:19:29.928 - 00:20:05.920, Speaker A: Yeah, that's super interesting. I think I want to touch back on the restaking, but what you said about the modular stack really interested me, and me, because I feel like with the conversation around app specific roll ups and all of that, a lot of what you said really resonates. People don't want to reinvent the wheel, they want to reuse infrastructure, and you can do that through the modular stack. So I guess I'm curious, how do you envision Eigen layer fitting into the modular stack thesis, and specifically when it comes to these app specific rollups? And for context, I know that you mentioned Eigenva a bit, but I'm just curious in general how you're thinking about this.
00:20:06.290 - 00:21:04.330, Speaker B: I think when people are talking about is modular versus integrated, vertically integrated blockchains, I think people massively underestimate. Even people who are on the modular side massively underestimate what modular means. To give you a sense here, if you look at a typical web application, there was a study that says it integrates roughly like 15 SaaS services and the total amount of SaaS companies that exist and how many of them are unicorns and even bigger. It's insane. Like the last 1520 years of vc shows that a lot of the growth comes from SaaS. And the reason is SaaS is you're choosing one narrow thing that some team is going to execute on and then just go and kill it on that particular dimension. It's a much better calibrated bet to make than something vertical where you're going to be the next Facebook or something, which is very difficult to predict.
00:21:04.330 - 00:21:59.726, Speaker B: So SaaS is like, because it's horizontal and you're just solving one core problem, and it's very easy to figure out who's best suited to solve one core problem. And in some sense, the arc of civilization itself bends towards specialization. Right? But to answer your question on how we think about the modular economy, I think therefore, things like SaaS are very important in the blockchain era. But each SaaS service having its own trust model is not something we think is well suited. Each module, right now, the way the modular blockchains work is each module has its own security model. And if you have like 15 SaaS services, each of which have its own security model, you're depending on the worst of all of them, because anyone breaks, you break your application. So what we have figured out, I think, with eigen layer is common trust, modular innovation.
00:21:59.726 - 00:23:00.322, Speaker B: Trust is the thing that needs to be common. All of these modules rely on a common trust base, and then on top of which, people can come up and innovate with innovative modules that just leverage this common trust. And we think this exactly mimics what happens at the AWS layer. Even though AWS is not very security critical, even then, there is a lot of different small things. How do you make sure your upgrades are safe? Who's keeping the software upgrades intact and all of these things? And people felt initially, when cloud started, there was the question of which company would be foolish enough to offload their computational operations to Amazon or Google Cloud. And it's the same thing that people are asking today, which is, why would I not have my own trust network and do everything? And I think history has proven again and again that this is where we are going to head is our vision is Ethereum is the trust layer. We just make it more programmable.
00:23:00.322 - 00:23:21.146, Speaker B: On top of which, people are going to come up and build new SaaS like solutions, which are modules. And we massively underestimate the number of modules that exist. That'll be thousands of modules. It's not like data availability, consensus, and settlement. There is a trusted execution environment. There is secured multiparty computation. There is decentralized AI services.
00:23:21.146 - 00:23:30.462, Speaker B: There is decentralized authentication. There's going to be a whole bunch of modules that show up, and some of them become very important to the crypto economy, right?
00:23:30.516 - 00:23:41.954, Speaker A: I guess. On that note, what are you most excited to build on? Eigen layer. I know you guys are starting with eigenda. You have an mev thing in the works as well. But I'm curious what you want to see the community build.
00:23:42.072 - 00:24:23.902, Speaker B: I mean, the whole scope of permissionless innovation is that people build what we least expect. And I have a first example like that, and this is basically a decentralized location. Oracle. One of the problems we see with decentralization, decentralization is not objectively measurable, right? And Ethereum protocol doesn't have an incentive for decentralization. We call ourselves the marketplace for decentralized trust. So imagine in 200 years back, when you're establishing the first commodities market for potatoes. One of the things you have to do is when you're creating a new commodity market, you have to figure out how to grade the commodity.
00:24:23.902 - 00:25:00.390, Speaker B: Like, oh, potatoes that are golden, potatoes that are like this size and grown in this area. And so on. You need ways to quantify and measure aspects of the commodity. And if we are saying decentralized trust is a new commodity, how do we measure decentralization itself? And of course that itself has to be decentralized. The mechanism by which decentralization is measured itself has to be decentralized. Otherwise you have a centralized locus to measure decentralization, and that doesn't work. And so we have a first project spun out of Princeton called Witness chain building an oracle, which measures decentralization.
00:25:00.390 - 00:26:07.154, Speaker B: It's a very interesting concept, by using the networking layer, by sending pings across and figuring out how to triangulate nodes and their locations. This is an example. Another example that I'm kind of super excited about is AI. One of the problems that whenever I go into chat GBD and type something, I'm double guessing whether anybody's reading this, and that's not a good place to be in. And I don't even have something as simple as a session privacy, which is when I open a new session, I should be completely anonymous. I'm paying the chat GBD subscription, so, which means I'm authenticated every time, and I don't even have session privacy. So if you wanted to have something like session privacy on an AI service, if you could have it run on the Ethereum pros network with hundreds of different nodes actually being your service providers, then every time you open a pseudonymous connection to a new node and just pay fees using some kind of zero knowledge token, that's something as a starting point for decentralizing AI inference, something I'm quite excited about.
00:26:07.154 - 00:26:25.026, Speaker B: And we have some initial partners starting to work on that. But that's what I meant when I said the scope of what we think of modules is very narrow and boxed in today. Like, oh, who's going to be data availability, or who's going to be, that's badly scratching the tip of the iceberg.
00:26:25.218 - 00:26:48.670, Speaker A: That makes a lot of sense. You can imagine Eigen lyric versions of everything from the graph to any of these MPC solutions, like anything related to identity, et cetera. That's super exciting. I think Nikhil had a really interesting question around how new projects can use these middlewares within the marketplace. So maybe, Nikhil, do you want to unmute and ask your question?
00:26:48.820 - 00:27:20.300, Speaker C: Hey, sure, nice to meet you, thanks for this. Yeah, I was wondering, kind of like to make that concrete, right? So let's say you're a protocol or a project team, and you're like, okay, great. So validators have obviously basically downloaded whatever they need in which they're then restaked, staking through Eigen layer into Ethereum and then have this marketplace is my understanding. So on the project side that's building something, do they then have to also basically download some type of client? So that way validators in this marketplace can then go choose or how is that kind of process work exactly?
00:27:20.670 - 00:28:10.570, Speaker B: Journey thanks, Nikhil. The core idea is so we call these AVSs actively validated services. As an AVS developer, what you do is you are basically creating two things. You're creating this container, which might be node software that you have to download and run as a service provider or as a node operator. And you also are shipping this smart contract which basically kind of talks to the Eigen layer contracts and enables people to register into your system, get payments and get slashing. So that's the three things that goes into your avs contract. So as far as this off chain container is concerned, as an avs creator, you're just shipping it and node operators will be downloading and running it.
00:28:10.570 - 00:29:09.306, Speaker B: But of course as a developer you want to test it. So you'd probably run your own test node to actually run your containers in a distributed system and verify that it's doing what it is supposed to be doing. So the journey. So if you're asking what is the customer journey for an abs? We're just figuring these things out very early in the project. So right now what is happening is we have put out what we call the middleware or ABS specifications, which specifies what standard to which an ABS should be built. Particularly like is there a monitoring interface? Are there some RPCs that need to be built into the program? But beyond that, actually having an SDK or something that you can start with and then go and build on top. This is actively under development inside the project, and soon we'll have a lot more tooling to come and build these new kinds of services.
00:29:09.306 - 00:29:40.230, Speaker B: But you can imagine that the only new thing happening here is the node software. Relative to whatever else you may be doing, the node software needs to know the Ethereum or Eigen layer state. That's the new thing. So you need an inbox to talk to the Eigen layer. Ethereum, you need an outbox to communicate some information back to Ethereum and Eigen layer. So those are the two services that either will abstract or have an SDK for. But other than that, it's all the other things.
00:29:40.230 - 00:29:54.762, Speaker B: Oh, how do I arrive at consensus? How do I arrive at an input? Like all of these things are the complex node things that you can already start building, and then once these two integrations are ready, you can just opt into that.
00:29:54.896 - 00:30:24.750, Speaker A: Great. Thanks, Nikhil. Great question. So one thing that you had said before this question was just around how distributing trust can be a bad thing, because I totally agree with you, you're only as strong as your weakest link. However, there's also some very clear tradeoffs around using Ethereum as the only trust layer. So there's been a lot of conversations happening recently on crypto, Twitter online about what implications restaking has on the security of Ethereum as a whole. Notably sparked from a post that Vitalik had made recently.
00:30:24.750 - 00:30:33.638, Speaker A: And you had a great answer to that. So I'm curious, can you speak to what you think are good things to build on restaking platforms and maybe not so good things?
00:30:33.804 - 00:32:01.620, Speaker B: I think the spirit to Vitalik's statement, which I think is actually very good, is roughly the following. So Vitalik's basically saying don't overload Ethereum consensus or ethereum social consensus if you read into it. And the core point being, if you go screw up something with restaking or a layer two, or even for that matter just an application or a DaP on Ethereum, don't expect Ethereum to fork because of that. And I think this was just if you go back to the Dow hack, which was one of the early hacks in the Ethereum history, where 15% of ETH was locked into a contract and the contract got hacked, there was a lot of pressure to fork Ethereum around the hack to retrieve the money. And Ethereum took a conscious policy thereafter to say that there is no further forking for applications like mistakes. And now that there are new, deeper things coming up, like layer twos and restaking, it is necessary to say this so that there's no excessive risk taking. I think the analogy I like to give is, which we like a lot in the crypto space to talk about, is how banks take excess risk and then offload or socialize that risk into the government.
00:32:01.620 - 00:32:46.486, Speaker B: Right. Basically government bailouts as a solution to that problem. That's basically the same thing that might happen if I go around saying, or anybody else goes around saying, hey, you build on top of this. If something bad happens, we are so big, we're too big to fail. So Ethereum will fork around us, and Vitalik doesn't want it, and I don't want it either. And I'm glad that he's saying it because I don't want somebody else to come and say it either, because it's a modularity principle about what needs to be dealt with at what layer. The Ethereum staking layer is responsible for the basic thing, which is staking and making sure that the consensus layer has no safety or liveness faults.
00:32:46.486 - 00:33:27.162, Speaker B: And that's all that needs to be handled at that layer. Everything else needs to be handled in its own layer. That's why we take extra care to make sure that there is an internal social consensus layer on top of eigen layer. For example, we call the slashing veto and so on. But what are good things to be built, things that are objectively attributable, you can slash for on Eigen layer, you can impose negative penalties if you're imposing a negative penalty, and if it's clearly, objectively attributable and provable on chain, I think nothing like it. It's clear there's no confusion on that. For subjectively attributable things, you can still use Eigen layer, but don't do slashing or very limited slashing.
00:33:27.162 - 00:34:21.374, Speaker B: So that's, I would say the boundary, the other boundary which we have self imposed, is not to use Eigen layer for basically financial perimeters. Eigen layer is a decentralized trust marketplace. And we think of like, if you think of the landscape, of how people accrue fees in crypto, like there is defi, which is you put your money into uniswap or some other compound or something, where you're fundamentally underwriting some kind of a price risk. That's why you're gaining some returns, whereas Eigen layer is a validation marketplace. You are getting returns for putting your sweat and blood into actually making something work, and you're getting paid for it. And this is fundamentally a different category of rewards, because you will not lose your money. As long as the contract is objective and you know what you're doing, you will never lose money.
00:34:21.374 - 00:34:45.126, Speaker B: But that's not the case. For if you go and put your money into a financial platform, there are exogenous factors outside your control. How much price volatility exists between ETh and USD. You can only guess. There's no way for you to say that I'm taking zero risk, whereas in validation you can take zero risk and still make rewards. So we want to preserve that property on Eigen layer, I think this makes.
00:34:45.148 - 00:35:03.094, Speaker A: Me think just how in AI there's like an ethics board, we need something like this almost for restaking as a whole, which I think is really fascinating. Also, Dogon, do you think you could unmute and ask a question? He has a great question around, just like, how Eigen layer compares to other shared security models in other networks.
00:35:03.222 - 00:35:41.900, Speaker D: Hello, Sarum, nice to meet you. Yeah, like, our launch has subnet technology, which enables blockchains to have some portion of data set. Like Cosmos have interchange security and Polkadot has parachains. I know that they are different, but do you think that they have some synergies or similarities with Eigenair? And I know that you cannot build Chat GPT on the top of subnet, but still, I want to ask this question to you.
00:35:43.070 - 00:36:13.490, Speaker B: Yeah, I think. Let me start with Cosmos, and maybe I'll just explain the history in my own view. If you look at how Ethereum and Cosmos started. Ethereum started on one extreme, which is shared security, but innovation only at the app layer. You cannot go and innovate and change anything deeper than that. And Cosmos started with no shared security, but full innovation. Like, you can innovate on anything.
00:36:13.490 - 00:36:51.626, Speaker B: You have the SDK, you're free to change anything that you want. Right? So that's where the two things have started. And I think they've both converged, more or less, in my opinion. So Ethereum, with layer tools, made innovation deeper than the application layer by saying, oh, now you can have roll ups which offload computation. So that's like, oh, I can do new virtual machines and other things that threw against the ethereum virtual machine. So expanding the scope of innovation, but keeping shad security. And on the other side, Cosmos basically said, oh, actually, we are realizing chat security is the missing element.
00:36:51.626 - 00:37:49.374, Speaker B: Why don't we start interchange security, which went live three months back or two months back, which basically said, oh, now one chain can share security to another chain. Okay, so that's the thing. And I think Eigenve basically perfects this convergence, because now with Eigen layer, you restake and then you can basically build anything on top of it. So you have full open innovation with potentially full shared security. It is not given that you'll get full shared security because people have to opt in, but potentially with full shared security, as it becomes important and useful, people opt in perfectly. So the difference with the Cosmos ICS model is ICS is one chain to another chain. Like, one chain has to do a governance upgrade to opt into another chain to supply security, which anytime I hear governance upgrade, it gives me a little bit of a hardburn.
00:37:49.374 - 00:38:28.814, Speaker B: Like, dealing with governance problems in blockchain is one of the kind of biggest issues. It's political, it's difficult, it's complicated. The only reason we decided we could go ahead and build Eigen layer is. It doesn't need any upgrade from Ethereum, you can just build it. The other things that you've mentioned here, after we developed Eigen layer, some of the ideas have percolated into cosmos, into what is now called mesh security. Sunny and others are building this paradigm, which we also like Polkadot had started with, actually predates layer twos. In the amount of open innovation that you can give.
00:38:28.814 - 00:39:24.450, Speaker B: It allows you to only do things like virtual machines which can be proved against the wasm base layer. And avalanche, I would say is the closest in spirit to the amount of opt in freedom Eigen layer has. You can basically have nodes opt in and know services opt in. But avalanche, the original blockchain itself is not designed based on slashing and crypto economics as a tight principle. And so that of course also reflects itself into the way subnets are designed and orchestrated. And we think with Ethereum empowering itself to actually be as generic as possible using Eigen layer, the just relative advantages of these systems just based on, oh, you have open freedom to customize ABCD, that differentiation is gone. Now you can do all of that on Ethereum.
00:39:24.450 - 00:39:45.240, Speaker B: So that's how we think about it. And when you have shared security, what you want is you want shared security from the largest source of economic value and token, which is used for monetary activities. And I think that's where Ethereum kind of stands a special place.
00:39:45.770 - 00:39:59.800, Speaker A: Great question Duran, thanks. So that's all the time we have today. Thanks so much, Shiram. This was incredible. And we have a bunch of other unanswered questions, so I'm definitely going to send them to you async and maybe we can get them answered. But this was wonderful. Thank you so much.
00:40:00.370 - 00:40:07.260, Speaker B: Thank you Meera and the variant team for putting this together. Great to connect with all of you variant fellows and looking forward to interact in other ways.
