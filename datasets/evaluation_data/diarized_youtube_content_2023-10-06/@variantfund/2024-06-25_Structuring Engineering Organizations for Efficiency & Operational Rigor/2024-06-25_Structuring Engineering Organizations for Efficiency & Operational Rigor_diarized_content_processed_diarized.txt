00:00:06.800 - 00:00:37.390, Speaker A: Part of the reason that we want to get the book here is that I think there's very few companies in crypto that have gone through kind of a major ClO, and, you know, and Opensea is one of them. And then Opensea also is a market that, like crypto itself, has had a lot of ups and downs. And so with benefit hindsight, I think there's. There's probably a lot of lessons learned that you can kind of pass on to the next generation, having gone through that lived experience. So that's why we draw both here today.
00:00:41.850 - 00:01:52.112, Speaker B: Speaking generally, not just for engineering management hires, there comes a point where you feel this, like, pain of being the bottleneck, where someone, whoever is the de facto manager or starts as the CEO, realizes that they are bottlenecking the whole organization, and having that self awareness of when you've become the bottleneck is really important. And it starts at the CEO, it starts at really all the co founders. So identifying that, I think, for me, is the clearest sign that it's that you should hire. It might be like a following, like, not a leading indicator, but the opposite, a trailing in the air when you need to hire. And I think for, like, an early startup, it's a really good indicator. It's not. If you want to, like, hire slowly and keep your team high talent density, which I believe most of the time you should do, then the moment you feel like you're in the bottleneck, the next question is, who's it gonna be?
00:01:52.306 - 00:02:54.730, Speaker C: First of all, first principles question, do you need to hire an engineer? Like, that's like, the very first question you should ask yourself is like, do you actually need to. Great heuristic is what Alex brought up is this question of, like, are you becoming the bottleneck as CEO? As the technical co founder? It's a great signal to start to think about that. I suspect that a lot of people start to hire engineering managers more so because they have money or because they feel like, you know, I've reached series whatever, and now I, like, I should be able to. I gotta go hire the engineering. You're gonna go, like, an engineering manager so I can focus on strategy and all this sort of stuff. You should ask yourself if you really actually need to do that, because, like, as technical companies, like, incompetence and talent density and culture of your engineering team is probably one of the top two things that are most important. And so you should really ask yourself as a founder whether or not that's something you want to start delegating away until it's like, until you have a culture and set of norms that are extremely congeal and stable to actually build.
00:02:54.770 - 00:02:55.750, Speaker B: On top of.
00:03:00.530 - 00:03:30.826, Speaker C: There'S no such thing. As one says, it's all culture. You kind of got to decide what matters to you. Like, are you guys gonna be like, we, like, grind? Like, we are just output that we hack, we ship, we, like, we're just like, move fast and great things? Or you like a Amazon style culture? Like, you know, you. You write everything in a doc. Everybody reads it synchronously. You're super hyper rigorous, like, but you make sure to, like, you know, that be very metered and, like, sort of, like, long term sustainable in terms of your work.
00:03:30.826 - 00:03:58.194, Speaker C: That's all just so contextual, the company itself and the sort of company you want to build. And there are successful models in all of those. What I would say is that I wish that I had had been more deliberate about that. And I had said to myself, like, this is what I want. And then a, codified that. B, communicated that to people. C, like, made sure to, like, regularly check in with myself, be like, is everybody actually, like, behaving this way? And so, like, yes.
00:03:58.282 - 00:03:58.794, Speaker A: Like, great.
00:03:58.842 - 00:05:12.538, Speaker C: If not, why not? I have a very, like, specific tactical answer, because we just went through a cycle trying to figure out the best way to do this if you want to be actually very quantitative about it, there's a variety of different frameworks that exist. There's what's called Dora metrics. If any of you ever worked in traditional engineering organizations, that would track essentially, it's like this composite metric that tracks your engineering team's productivity. That's more of a DevOps evil thing. So it might not be right for your organization. What I've found to be really, really helpful is there are tools out there that are, like, what are called GitOps tools, essentially, or git analytics tools, where you just, like, it basically seems to be, like, a better version of the GitHub heat map for your engineers. Now, you should never measure people's performance, or you turn that into a performance review type of thing on the basis of what the heat map looks like, because contribution velocity, commit velocity is not necessarily, like, the best measure of productivity, but it's really good at identifying outliers.
00:05:12.538 - 00:05:29.386, Speaker C: And that's, like, that's really, really helpful. It's like, you look at this thing, and you're like, oh, very clearly. I can see that this person is, like, is not contributing as much. Right. Very clearly. Like, we checked in, like, 400 prs last week, and we've only checked in a hundred this week. What's going on?
00:05:29.418 - 00:05:29.990, Speaker B: Right?
00:05:30.690 - 00:06:07.850, Speaker C: And I. And what's really helpful, I think, is, like, you make it, like, you don't make this thing where it's like, oh, the CEO or the CTO is like, you know, looking at all my commits, like, secretly in the background and, like, judging me on the basis of them. Like, no, actually, just make it, like, a team wide thing where you're like, hey, let's all, like, look at this together. How are we doing right now? Like, oh, look, it looks like we've been checking in more code than ever before. How awesome. It's like, oh, we're slowing down. Why are we still make it like, a yemenite? Like, a shared, like, you know, goals and so it's not something that everybody owns together as opposed to, like, you know, a tool of accountability.
00:06:12.990 - 00:06:53.720, Speaker B: Sometimes, like, managers don't give them feedback. It's just kind of like a basic thing. The feedback feels like, oh, I'll just, like, save that for when things get baddenne. And it's not, like, delivered quickly and in real time to the person, delivering your feedback quickly and in real time. Setting up a one on one, if it's needed, is just super, super, super critical. And just make up, like, a really key tenant for your company, if you can. And having, like, feedback roll up into documents that are delivered two weeks later, you just.
00:06:53.720 - 00:07:02.700, Speaker B: And I think you just lose a lot and it just forgets. It also adds all this management work, and it makes you better managers and no problem.
