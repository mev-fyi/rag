00:00:00.400 - 00:00:55.653, Speaker A: In this video I'm going to tell you the story of why I switched from JavaScript/TypeScript to Rust and hopefully it will help you make a more informed decision. At the end of the video I'll also reflect on that decision and talk about whether switching to Rust was a mistake or not. If you are already sold on Rust and want to get a better understanding of it, then make sure to get your free Rust cheat sheet@letsgetrusty.com cheat cheat sheet before I ever learned Rust, I was a web and mobile developer for about five years. I started my software development career working at a startup where we built a web app using Node JS for the backend and Angular version 1 for the front end. No God no God please no no no no. Those were the dark years of web development, but luckily eventually React came along.
00:00:55.653 - 00:01:43.541, Speaker A: By that time I was working for Tableau, a business intelligence and data visualization company that ended up being acquired by Salesforce. Besides getting to work with React and React Native, I was also introduced to TypeScript at that job, which blew my mind. Having the flexibility of JavaScript coupled with a type safety layer allowed us both to quickly prototype and ship maintainable production ready code. It felt like going from building a house with PLATO to building a house with brick and mortar. One of the big takeaways I got from this experience was seeing the value of a strongly typed type system. At this time. My team also maintained a few other services written in different languages such as Kotlin, and because we had services written in different languages, there was some duplication between the code bases.
00:01:43.541 - 00:02:35.659, Speaker A: We explored different ideas for getting rid of the duplication, and one of the ideas was to rewrite the common logic in a language that could be integrated into all our code bases, which included backend services and front end clients. One language that was being considered was Rust. This was the first time I ever heard of Rust, and because my team was considering using it and the most senior engineers on my team were enthusiastic about the language, I decided to look into it myself. The more I looked into Rust, the more excited I got about the language. I tried to learn a low level programming language before C to be specific, and let's just say the experience was not enjoyable. But I was optimistic about Rust because developers in the Rust community seemed to really enjoy programming in Rust. After a few weeks of thought and investigation, I decided to start learning Rust myself and these are some of the reasons why.
00:02:35.659 - 00:03:19.417, Speaker A: First of all, there was a lot of hype around Rust. Senior engineers on my team were raving about it. The Stack Overflow survey showed that it was the most loved programming language year after year and rewrite Everything in Rust memes were popping up all over the place. But the thing is, I didn't think Rust was just hype or another shiny object because Rust was solving painful problems in the systems programming space. First of all, Rust of course solved the technical problem of memory safety without sacrificing performance. Microsoft famously released a stat saying that 70% of their security vulnerabilities were caused by memory safety issues. Which just goes to show that even with the best engineers in the world, manual memory management is extremely error proof prone and telling developers to be better is not the solution.
00:03:19.417 - 00:03:57.891, Speaker A: But Rust also solved another really important pain point. Rust is a low level programming language for the 21st century. Managing dependencies, building your code base and distributing your application is not straightforward in C. Rust, on the other hand, comes with a build tool and package manager included. And it has a public package registry called Crates IO which is very similar to npm. For someone like me coming from a web development background, this made Rust very accessible. Rust also has a few other things that make it very accessible, namely great error messages, great documentation, and great free resources like the Rustling Book.
00:03:57.891 - 00:04:37.199, Speaker A: Because Rust was so accessible, I thought to myself, this is going to open up systems programming to a whole new demographic of developers. And because of that it was going to be a game changer for low level programming. Now those were some of the external factors that convinced me to learn Rust, but I also had a few personal reasons. I saw that Rust had a lot of momentum and it was still the early stages of a big wave. I thought to myself, if I can catch this wave early, it could have a big payoff in the future. Also, as a web and mobile developer for many years, I oftentimes felt like I lacked a deeper understanding of low level programming. It was a gap in my knowledge, a little void that I wanted to fill, and Rust gave me a chance to do that.
00:04:37.199 - 00:05:26.825, Speaker A: And I thought to myself, once I have this understanding of lower level programming, not only can I build websites and mobile apps, but I could really build any type of software I want. I can create embedded software, I can work on operating systems, et cetera, and this newfound knowledge would make me more competitive in the job market. Lastly, I thought to myself, I already have a highly employable skillset with JavaScript, TypeScript and React, which I can always fall back to. So looking back at the decision to learn Rust, was it a good one? In short, learning Rust was definitely the right decision for me, I now have a deeper understanding of computer science, a valuable skill set, and Rust's momentum is not slowing down anytime soon. In fact, it's just the beginning. All right, guys, that's it for this video. Let me know in the comments section down below what you think of this type of content in addition to my more technical videos.
00:05:26.825 - 00:05:35.425, Speaker A: And before you go, make sure to get your free Rust cheat sheet@Let's getrusty.com cheat sheet with that said, I'll see you in the next one.
