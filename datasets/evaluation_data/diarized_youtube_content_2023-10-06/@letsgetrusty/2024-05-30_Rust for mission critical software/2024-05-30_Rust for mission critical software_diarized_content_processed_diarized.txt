00:00:00.440 - 00:00:43.924, Speaker A: Software is everywhere. It's in your watch, your oven, your car, and maybe even your toothbrush. But more importantly, software control systems that can save or end your life, airplanes, medical devices, power grid systems, and banking infrastructure are all controlled by software. If software engineers aren't careful, defects and vulnerabilities can lead to multi billion dollar mistakes or even loss of life. In 2019 due to faulty software, two Boeing 737 Max airplanes crashed in a matter of months, killing more than 300 people. This led to the grounding of all 737 Max airplanes for over a year and a half. The associated direct costs were estimated at $20 billion, and the indirect costs soared above 60 billion.
00:00:43.924 - 00:01:37.766, Speaker A: When dealing with software that must be correct, relying on engineers to write code free of defects and vulnerabilities is simply not enough. In this video, well explore how rust, a language with an obsessive focus on performance and safety, is revolutionizing mission critical software and why companies are scrambling to eradicate unsafe languages from their critical systems. Rust was created to solve a problem the creator of Rust, Graydon Hoare, was tired of climbing 21 flights of stairs whenever the elevator in his building was out of order due to software bugs. Graydon couldn't get the idea of a more robust programming language out of his head. So he spent years designing a language that could keep an elevator running without interruption. An idea that would prove to be crucial in many other domains which require robust software. Software that must be highly reliable and secure because it's essential to the operation of an organization or government is called mission critical software.
00:01:37.766 - 00:02:39.016, Speaker A: This includes major financial trading infrastructure, supply chain management systems, and healthcare systems. If these applications fail or are otherwise disrupted, they can lead to severe consequences such as financial ruin, data loss or breaches, and reputational damage. On August 1, 2012, Knight Capital group, a major market maker at the New York Stock Exchange, deployed a new trading algorithm just moments after deployment. A catastrophic software failure caused the algorithm to rapidly execute a massive volume of unintended trades by mistake in the span of only 45 minutes. This bug led to the loss of approximately $440 million, ultimately resulting in the firm's imminent bankruptcy. Bugs in mission critical software can be pretty terrible, but there's an even more sensitive subset of mission critical software called safety critical software. This includes military defense systems, nuclear power plant controls, aviation control systems, industrial automation, and automotive safety systems, just to name a few.
00:02:39.016 - 00:03:40.838, Speaker A: A failure or disruption in these systems can lead to catastrophic environmental damage, significant injury, or even loss of life. In the 1980s, a new radiation therapy machine called the TheraC 25 was introduced. This machine was used to treat cancer patients by delivering a precise dose of radiation to cancer cells. However, due to a race condition in the software, the machine occasionally delivered a massive overdose of radiation, leading to severe burns and, in at least six documented cases, the death of patients. These incidents prompted changes in how medical devices are regulated, adding stricter requirements for software validation and verification. Safety and mission critical software have to meet strict standards, and there are hundreds of specific rules and guidelines to make sure the software works as intended. These standards can come from many sources, but the two major players in international standardization are the International Organization for Standardization, or ISO, and the International Electrotechnical Commission, or IEC.
00:03:40.838 - 00:04:42.084, Speaker A: There are different standards defined for aviation, medical devices, and financial systems, among many other categories, each requiring a varying level of assurance and safeguards in case of failure. Given the rigorous vetting process and high stakes nature of mission critical software, the software industry has narrowed down on the programming languages used to build this type of software to only a select few over the years. In fact, in the early 1980s, the US Department of Defense undertook the most extensive and most expensive language design effort ever undertaken when they created Ada, a programming language specifically designed for mission critical applications. Ada, named after the first programmer, Ada Lovelace, replaced more than 450 languages the DoD used over the years. In such systems, the language design focuses on extremely strong typing, explicit concurrency, and relies on the compiler to spawn bugs. Sound familiar? But Ada is not without its critics, and there are several drawbacks. It's not commonly taught in universities.
00:04:42.084 - 00:05:21.060, Speaker A: It's old and has limited tooling and support and learning. Ada isn't as attractive as other languages since it has a narrow use case. Many Ada developers are in the process of retiring, but there's not enough new developers interested in the language to maintain or continue developing these systems. An alternative to writing mission critical software in ADA is to write it in c or c, and then have an independent authority or organization assess and approve it. This process of certifying code, however, is time intensive and therefore costly. Take, for example, the motor industry Software Reliability association. Originally formed by the UK government in the 1990s.
00:05:21.060 - 00:06:23.148, Speaker A: They set the standard for using c and C in automotive, defense, and avionics fields. The latest version of their c standard has 200 rules and 21 guidelines, and their c standard has 175 rules and four guidelines. It could take two to 4 hours to certify each line of code to the strictest standards for automotive and aviation purposes. The current reality for developing mission critical software is far from ideal. On one hand, you can use ADA, which has a shrinking talent pool, and on the other hand, you can use c or C which involves a tedious, slow, and expensive certification process. But what if you can have the best of both worlds? Combining the security and thoroughness of ADA with the widespread use of CNC with Rust, you can rust provides a very high level of security out of the box. In fact, Rust has so much safety built in that two thirds of the miscell rules used when qualifying c and C programs don't even apply to rust at all.
00:06:23.148 - 00:07:21.090, Speaker A: Rust is also gaining adoption quickly, and developers love coding in Rust. It's similar enough to c and C that developers can switch pretty quickly, and Rust interoperates extremely well with c and C, so new code can be written in rust to extend old code without complications. This is why many companies are starting to turn to rust for their mission critical projects, especially now that a few big hurdles have finally been cleared. For example, just this year Ferris systems released Ferrocene, a qualified rust compiler toolchain. This finally opens the door for Rust to be used in mission critical software in the automotive and industrial industries. Similarly, Ada Core, the company that created the qualified IDE and tool suite for the Ada programming language and since expanded to c and C, is now embracing Rust. Last year, they added support for Rust, which is currently in early access for select customers but is likely to be released in Q three of 2024.
00:07:21.090 - 00:08:07.468, Speaker A: Ferris systems and Ada Core are silver members of the Rust foundation and have a vested interest in the widespread adoption of rust. Both companies have plans to add support for other areas that require safety certifications. This includes avionics, rail, and space industries, to name a few. As a result of these regulatory hurdles being cleared, we are now seeing Rust being used in mission critical systems. Perhaps the biggest name to use Rust is Renault's electric car division, Ampere. They are actively working on a new OS with Google for software defined vehicles, or vehicles that can improve over time with software updates. Renal plans to ship cars with rust software as soon as next year and found that with Rust, they're able to decrease costs, increase security, and speed up development.
00:08:07.468 - 00:08:39.410, Speaker A: Other companies, like Oxide OS, see Rust as the future of software defined vehicles as well. I've also spoken with Rust recruiters who've confirmed that many car manufacturers are quickly adopting rust. This is great news because Rust was created to be a performant, robust, and safe programming language, which is exactly what is needed for mission critical software. If you'd like to start or accelerate your rust learning journey, make sure to get your free rust cheat sheet at let's get rusty.com cheatsheet. Hope you enjoy the video, and remember to stay rusty.
