00:00:00.320 - 00:00:33.614, Speaker A: What's up, Rustations? Welcome back to let's Get Rusty. In today's video, we're going to talk about how your Python code can interface with your Rust code. But before we get to the video, if you haven't already, make sure to get your free Rust cheat sheet by heading over to LetsGetRusty.com forward/cheat sheet. With that said, let's get Rusty. The first thing we need to do is make sure we have Python 3 installed. To do that, you can type in Python 3 Dash Dash version.
00:00:33.614 - 00:01:33.705, Speaker A: Now that we've confirmed that Python 3 is installed, let's create our project directory. Our project directory is going to be called Word underscore Counter. We'll CD into our Word Counter directory and create a new Python environment. Now that we have our Python environment set up, we're going to install a tool called Maturin, which will help us publish our Rust binaries as Python packages. Next, we're going to run Maturin init and select pi03. Pi03 is a Rust library that provides Rust bindings for Python. After running Maturin Init, we now have a Rust project with Python bindings.
00:01:33.705 - 00:02:06.511, Speaker A: Let's go ahead and open up our project in VS code. Inside VS code, you'll see several things going on. We have an Environment Directory, a GitHub workflows directory for continuous integration, a source directory, target directory, and a few configuration files. We can ignore most of this for now, but let's go ahead and open up Cargo toml. A couple things you'll notice here. First, we have our library crate configuration. The name of our library cray is going to be Word Counter and the crate type is going to be CDY lib.
00:02:06.511 - 00:02:35.811, Speaker A: This means our Rust code will be compiled into a shared library which our Python code can import. We also see a dependency on the PI 03 library, which again gives us Rust bindings for Python. Let's go ahead and look. In the source directory we have one file called lib rs. As you can see, some code is already written for us. First, everything in the PI 03 Prelude is imported. Then we can see a function defined called sumasstring annotated with PI function.
00:02:35.811 - 00:03:06.453, Speaker A: The PI function annotation exposes this function to Python. You'll also notice that this function returns pyresult, which represents the result a Python call. Next we see another function defined called Word counter, this time annotated with PY module. This means that the word counter function will be used to create a Python module called Word Counter. This function takes two arguments. The first argument is of type python, which represents holding Python's global interpreter lock. We can ignore this argument for now.
00:03:06.453 - 00:03:47.705, Speaker A: The second argument is a borrow to PI module, which represents the Python module object. We can use the module object to add our sumasstring function to the module by calling add function and then wrapping our function with wrap PI function. With this default code, we've defined one module called Word counter that has one function called sumasstring. Let's try to use this module in our Python code. First, we'll create a new folder in the root of our directory called Examples. Inside the Examples folder, we'll create a file called example py. Inside this Python file, we'll import Word counter and then call sumasstring.
00:03:47.705 - 00:04:54.365, Speaker A: Next, let's open up our terminal. We'll call Maturin Develop, which will build our Rust code into a Python library and install it into the virtual Python environment we have set up. Now let's try to run the example PY program. We got the result three as expected, meaning our Python code was able to call into our Rust library. Now that we know the infrastructure is working, let's update our Rust library. First, we'll change the name of the function sum as string to count words. Then, instead of taking in two arguments, we'll take in one argument, which is going to be of type string.
00:04:54.365 - 00:05:36.465, Speaker A: To avoid errors, we'll also replace the function body with a todomacro. Then, instead of returning pyresult, we'll return PI containing pie. Any PI represents a reference to an object allocated on Python's heap, and pyne represents any Python object. In this case, we want to return a Python dictionary containing the words in this string and their counts. To do that, we'll start off by creating a hashmap. First, we'll need to import hashmap from the standard library. Then we'll create a new hashmap.
00:05:36.465 - 00:07:06.381, Speaker A: Then we'll create a for loop which iterates through all the words in this string. Then we'll use HashMap's entry API to either get a mutable reference to the count of a word, or, if the word does not exist in the hashmap, create a new entry with the count set to 1. If an entry already exists, we'll increment the count by one. We'll also need to make the hashmap mutable. And lastly, we'll return the hashmap as a Python object. In this case, calling the function withgil acquires Python's global interpreter lock, which we need to convert the hashmap into a Python object. Our function is now complete, so let's go ahead and use it inside our Python code.
00:07:06.381 - 00:07:56.453, Speaker A: First we'll open up our terminal and call Matterend Develop again. Next we'll need to update example py and finally we can rerun our program. This time we get a dictionary with words and their count and we actually have a bug here. And that's because Instead of inserting 1 as the default value, we should insert 0. And that's because we're always going to increment the count. Let's go ahead and build our Rust program again and then rerun example py and this time we get the correct word count. That's it for this video.
00:07:56.453 - 00:08:13.425, Speaker A: If you want to see more videos about integrating Rust with other languages, leave a comment down below. Also, make sure to give this video a like. And last but not least, get your free Rust cheat sheet by heading over to Letsgetrusty.com cheatsheet cheat with that said, I'll see you in the next one.
