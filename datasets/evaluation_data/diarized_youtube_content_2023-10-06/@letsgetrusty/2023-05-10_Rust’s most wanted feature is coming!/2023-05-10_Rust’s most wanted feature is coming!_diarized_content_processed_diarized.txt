00:00:00.560 - 00:01:03.909, Speaker A: What's up Rustations? I got some exciting news to share in this video. Rust has been making a lot of forward progress recently with one great news story after another. Just a few days ago, the Rust team officially announced how they plan to stabilize and ship one of the most anticipated Rust language features, Async Functions in Traits the async await syntax in Rust allows us to write asynchronous code that looks similar to synchronous code, which makes it more readable and easier to reason about. The async keyword is used to mark a function as asynchronous, which means that it can execute in a non blocking manner and potentially return control to the calling code before it has completed. And the await keyword is used within an asynchronous function to pause execution until a particular operation completes, allowing other tasks to run in the meantime. This syntax is very similar to the async await syntax in JavaScript. Traits, on the other hand, are a way to define shared behavior in Rust, similar to interfaces or abstract classes in other languages.
00:01:03.909 - 00:02:09.465, Speaker A: The problem is currently you cannot define async functions or methods inside traits in stable Rust, which makes it difficult to share asynchronous behavior across different types. Async functions in Traits have been wanted for a long time because it would provide a consistent and flexible way to define shared async behavior, leading to simpler, more reusable and more or organized code. However, this feature was delayed due to its dependency on other features such as generic associated types which were implemented in Rust version 1.65. Since then, async functions in Traits have been implemented in Nightly Rust, but the problem is Nightly Rust is unstable and not advised to be used in production. It's the version of Rust where exploration and experimentation happens before a feature is deemed worthy to be officially accepted and into the language, AKA stabilized. Stabilizing a feature is a big deal because Rust has very strong backwards compatibility guarantees. Once a feature is stable, it has to be supported in all future versions of Rust.
00:02:09.465 - 00:03:04.993, Speaker A: That's why it's exciting to hear that the Rust Async Working Group announced their top goal for 2023 is to stabilize an MVP version of the Async Functions in Traits feature. Right now they are aiming to get the feature into the 1.74 release, which is five releases away from the current version of Rust. To ship this feature, there are several key milestones that need to be hit. The team has already completed an MVP implementation in Nightly Rust and has tested it inside five different code bases, including the AWS SDK and an internal tool at Microsoft which interacts with low level hardware resources. The remaining work involves getting a couple RFCs accepted, followed by feature evaluation and bug fixing. The blog post also mentions some next immediate goals, which means the Rust team is already thinking of future improvements to Async Rust, and I'm very happy to hear that.
00:03:04.993 - 00:03:28.365, Speaker A: Let me know what you guys think about this news in the comments section below. Personally, I'm excited to see the Rust team striving to make Async Rust better, and I'm looking forward to this feature being stabilized. Before you go, make sure to get your free Rust cheat sheet@letsgetrusty.com cheat sheet like the video and subscribe to the channel for weekly Rust content. With that said, I'll see you in the next one.
