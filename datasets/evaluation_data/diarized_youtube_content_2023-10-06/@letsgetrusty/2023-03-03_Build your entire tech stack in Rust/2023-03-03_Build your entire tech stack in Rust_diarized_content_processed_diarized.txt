00:00:00.200 - 00:00:39.868, Speaker A: Tech stacks are groups of technologies that work well together to build complete applications. Examples include the lamp stack consisting of Linux, Apache, MySQL and PHP, or the myrn stack consisting of MongoDB, Express, React and node js to name a few. But there's a big problem with existing tech stacks. They don't use rust, which obviously makes them inferior. I mean, if you aren't using rust at this point, are you even a real programmer? It's time for a new stack, a stack which incorporates the world's most loved programming language. A stack which allows you to build apps that are blazingly fast, memory safe, and unnecessarily comp. I mean extremely robust.
00:00:39.868 - 00:01:20.214, Speaker A: Introducing the rusty stack, a fully oxidized tech stack allowing you to build backend, web, mobile and desktop components using rust. The rusty stack consists of four technologies. First up we have rocket. Rocket is a simple, fast and type safe web framework for rust. It allows us to define our backend endpoints in a concise way by taking advantage of rusts macro system. Up Next Surreal DB Surreal DB is a new forward looking database that combines features from relational, graph and document paradigms. It has a query language called Surreal QL which is very similar to SQL, allowing us to get up and running quickly.
00:01:20.214 - 00:01:59.736, Speaker A: Next up, Taury Towery is a framework for building desktop applications using web technologies like HTML, CSS and JavaScript for the front end and rust for the backend. Its similar to electron but produces binaries that are smaller, faster and more secure. Lastly we have U. U is a component based UI framework like React except it allows you to write your web apps in rust which is then compiled down to webassembly. Lets explore building a simple to do list app using the rusty stack. Before we get started, make sure to get your free rust cheat sheet@letsgetrusty.com cheatsheet well start with the backend.
00:01:59.736 - 00:03:17.096, Speaker A: First well create a new binary called Todo API and add all the necessary dependencies which include Rocket and SurrealDB. Next well define some helper functionality including an error enum, a prelude containing a generic wrapper type, a useful map macro, and trifrom implementations for serial DB types. Then well implement the datastore logic. First well define the models. Then well implement the crud operations using the surreal query language. Next well set up the web server in main. First well import the needed dependencies, then create our endpoints and finally update the main function to start a rocket server instance.
00:03:17.096 - 00:04:05.428, Speaker A: We also need to do some extra work to configure cores. Finally well create a rocket configuration file to specify the port our server should use. Now we can run our server and verify that its working using postman. Great our server is working. Next lets implement the frontend clients. First well create the web client like before. Well add all the required dependencies and create an index HTML file which serves as the entry point for our web app.
00:04:05.428 - 00:05:29.990, Speaker A: We'll also create a style CSS file and add some predefined styling. Next we'll define the models. Then we'll define our app state using a redux like pattern. Next we'll add functions that call each one of our API endpoints. Next well create the controller which will contain our business logic and act as the glue between UI components and application state. Finally well define the UI components starting with the new task form, then the task item and then the task list. Finally well finish by creating the root app component in main rs.
00:05:29.990 - 00:06:09.680, Speaker A: Then well pass the root app component to the startapp function and run the app to test it out. Well add todo items, toggle some and delete others. Great, our web app works and looks great. Next well implement the desktop client. Well use create towery app to start a new project. Then well update styles CSS and index HTML. Finally well add our business logic to main RS.
00:06:09.680 - 00:07:02.110, Speaker A: With that lets run the app. Our desktop app is working and changes on one client are reflected on the other client. At the moment towery only allows us to create desktop apps, but in the future we will also be able to create mobile apps. There you have it, an entire app with multiple clients built using the rusty stack. Now, is it practical for you to build all your applications using the rusty stack? Probably not. But we're not here to do what's practical, we're here to do what's rusty. Before you go, make sure to get your free rust cheat sheet at let's get rusty.com
00:07:02.110 - 00:07:10.920, Speaker A: cheatsheet. Give the video a like and subscribe to the channel for more rust content. With that said, I I'll see you in the next one.
