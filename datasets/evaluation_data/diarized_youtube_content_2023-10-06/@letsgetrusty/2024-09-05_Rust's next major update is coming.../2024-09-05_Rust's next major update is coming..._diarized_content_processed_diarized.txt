00:00:00.360 - 00:00:43.583, Speaker A: Rust's next major update is right around the corner. Every three years a new major update to Rust is released. These releases are called Rust Editions, and now we finally have more information about the long awaited 2024 edition. In this video, we'll cover the most exciting changes planned in this upcoming Rust Edition and the additional features shipping in the next six months. In a recent blog post, the Rust team outlined their project goals for the second half of 2024, which includes shipping the 2024 edition. The first exciting change in the 2024 edition is reserving the gen keyword so that generators can be added in the future. Generators provide a way to create iterators using imperative syntax or in other words, describing a sequence of actions.
00:00:43.583 - 00:01:18.375, Speaker A: And the big benefit is that they can greatly simplify the creation of complex iterators. For example, let's say we wanted to implement an iterator that yielded prime numbers using the sieve of Erathosthenes algorithm. Now there are a few approaches we can take. First, we can take the manual approach by creating a struct to manage state and then implementing the iterator trait on that struct. The problem is this leads to verbose syntax and a lot of boilerplate. We have to deal with complex state management, and the solution is less intuitive because the algorithm is obscured by the iterator implementation details. So this is the manual approach.
00:01:18.375 - 00:02:04.663, Speaker A: The second approach would be to use combinator methods to simulate something close to the sieve of Erathostenes algorithm. The problem is this code is hard to read because the algorithm is spread across multiple combinators. It's difficult to express complex state management, and this implementation is significantly slower than a proper implementation because with combinators we can't actually implement a true sieve of Erathostene's algorithm. The third approach is to use generators. By creating a gen block, we're able to yield items for each iteration. The yield keyword pauses the generator's execution and returns the value to the caller. Notice that this code is extremely concise, very readable, and is just as efficient as the manual approach we mentioned earlier.
00:02:04.663 - 00:03:07.647, Speaker A: Now, it's important to note that in the 2024 edition of Rust, the gen keyword will be reserved, but additional work is still required to actually implement generators. That being said, after generator blocks are implement, the Rust team is already thinking of additional features, for example supporting async generator blocks and adding the gen function or gen try function syntax. In general, I'm very excited that progress is being made on this feature, and I can't wait to try it out in Nightly the second exciting feature mentioned in this blog post is Polonius. Polonius is Rust's next generation borrow checking algorithm. It's an improved version of the current borrow checker that resolves some common limitations. For example, let's say we have a function which takes a hash map and key as input and it either returns a mutable reference to the value if the key exists, or inserts a default value and returns immutable reference to it if the key does not exist. Returning a mutable reference to value in the sumpath requires that the mutable reference to map lives until the end of the function.
00:03:07.647 - 00:04:02.811, Speaker A: This prevents mutation in the none path, even though the original mutable reference to map isn't used in the none path. The solution is to implement a borrow checker that understands these nuanced cases. Polonius would be smart enough to recognize that this code is memory safe and allow it to compile, meaning we can spend more time coding and less time fighting the borrow checker. The Rust team has the goal of landing Polonius and Nightly in the next six months and eventually shipping Polonius to stable Rust. This means that in the next six months we get to try Polonius on Nightly Rust, which is extremely exciting. Some awesome additional features planned for the next six months include delivering some critical building block features for Async Rust, like support for async closures and send bounds. Unblocking Rust adoption in the Linux kernel by stabilizing a number of features Shipping Cargo script, which would allow you to create a single file with Rust code and embedded dependencies.
00:04:02.811 - 00:04:38.635, Speaker A: Stabilizing parallel front end compilation, which can improve compile times by up to 20%, reducing syntactic overhead when working with reference counted data and a few other smaller features. The 2024 edition of Rust is expected to land in Rust version 1.85, which will be released to beta just past the New Year on January 3, 2025 and will reach stable Rust about a month afterwards. If you need help becoming a Rust developer or are just curious about the opportunities, make sure to get your free rust training@letsgetrusty.com Bootcamp. Hope you've enjoyed the video and remember to stay rusty.
