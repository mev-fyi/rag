00:00:00.400 - 00:00:39.675, Speaker A: Now VSCode is the Walmart of ides. You swear you'll try something fancier next time, but you always keep coming back. Given that it's lightweight, easy to set up, widely used, and has a vast ecosystem of extensions, it's actually my go to recommendation, especially if you haven't already gone sucked into the latest IDE cult. With that said, let's jump into the ultimate VS code setup for Rust development. At the end, I'll also cover some optional extensions to supercharge your development workflow. The first step in setting up VS code for Rust development is to install the Rust toolchain, which you can easily do by navigating to RustUP RS. RustUP is an installer for Rust.
00:00:39.675 - 00:01:37.995, Speaker A: To install Rust using RustUP, there are two options, one for Windows users and one for Linux and Mac users. First, if you're a Windows user, you just need to download one of these executables depending on if you have a 64 bit system or 32 bit system and then follow the installation steps. Second, for Linux and Mac users, you just need to copy this curl command and paste it into your terminal and then hit Enter. Then hit Enter one more time to proceed with the standard installation. Now if we scroll up, you'll notice a couple of different tools being installed. Cargo is a package manager and build tool for Rust, Clippy is a linter that catches common mistakes and improves your Rust code. Rust Docs is a local copy of the Rust documentation, Rust STD is the Rust standard library, Rust C is the Rust compiler, and Rust FMT is a tool for formatting Rust code based on style guidelines.
00:01:37.995 - 00:02:17.187, Speaker A: To make sure the Rust compiler is installed, type Rust C version and you should see the version of the compiler you have installed. The second step for setting up VS code for Rust development is to install VS code, which you can do by heading over to code.visualstudio.com and then hit hitting the big download button. Okay, so here I have a simple Rust project opened in VS code. Now you'll notice a problem if I start typing. You'll see that there's no autocomplete, no inline errors, if we have incorrect syntax, or any of the standard features you would expect from an ide. To fix this, we need to install some extensions.
00:02:17.187 - 00:03:06.615, Speaker A: Now, extensions are broken up into two categories Must have extensions and highly recommended extensions. First, let's talk about the Must have extensions. First, we'll open up the Extensions panel by heading over here and clicking Extensions. Now the most important extension you'll need is called Rust Analyzer. This is a language server for Rust which provides features like code completion, go to definition, inlay, hints, and much more. So let's go ahead and install it and then go back to main rs. Notice that when I start typing we'll get code completion, inline type hints, inline warnings, and if I make a mistake, we'll also get inline errors.
00:03:06.615 - 00:03:50.359, Speaker A: We're also able to run the code right from the editor. Here we can see hello World was printed, but if we try to debug the code, you'll see that it won't work. This is because we need another critical extension called CodeLDB. CodellDB is a native debugger. If we install it, we're able to go back to main, set a breakpoint and debug our code. As you can see, our program runs and we were able to hit the breakpoint. Now let's navigate over to our cargo TOML file.
00:03:50.359 - 00:04:22.953, Speaker A: Notice that there's no syntax highlighting. That's because we need a third critical extension to support the TOML language. So let's go back to the extensions view and search. Even better, toml this extension gives us fully featured TOML support. If we go back to Cargo AutoML, we now have syntax highlighting. Working with these extensions installed, you're now fully set up for Rust development. But if you really want to supercharge your workflow, here are some optional extensions I highly recommend.
00:04:22.953 - 00:05:02.321, Speaker A: The first one is called dependi. This extension gives you automatic create version completions in your cargo TOML file. For example, if we add the rand create as a dependency and give it a random version number and then hit save, we'll get a little green checkbox to confirm that this is the latest minor version. We can also hover over the version number and see all previous versions and then click on one to change to that version. And now when we save, you'll see that there's a red X indicating we're not on the latest version, and it will show us what the latest version is. Again, very useful. So I highly recommend this extension.
00:05:02.321 - 00:06:03.875, Speaker A: Now if we go back to main RS and intentionally create a compile time error, you'll see that we get a little red squiggly line which is good, but it's not very visible. If you want these error indicators to be louder, then you can install the error lens extension. After installing this extension, we can go back to main RS and now you see that the entire line is highlighted red and we actually get the error in line. Much better. The next optional extension I highly recommend is called todotree TODOTREE will highlight to do and fix me comments in your code. So if we install it and go back to main rs, we can add a comment here and the fixme comment will be highlighted in the side panel. We can also navigate to todos and we'll see a list of to do and fix me items within our code base.
00:06:03.875 - 00:07:01.165, Speaker A: Now here's a really cool trick. If we hit the gear icon and then settings and then type in to do tree regex, we're able to add custom regex for to do tree that will be used to search for to do items. Notice here at the end I added this to do exclamation point text. Now what this will do is highlight to do macros. So if we go back to main RS and replace this string type with a todomacro, you'll see that it will be highlighted, which is really useful if you're using this macro throughout your Rust code base. The final optional extension I highly recommend is, not surprisingly, GitHub Copilot. This is going to save you a ton of time, especially when you're doing repetitive tasks like adding test cases that are slightly different or implementing common API routes.
00:07:01.165 - 00:07:21.555, Speaker A: Now there are plenty of other AI tools you can use, like Tab 9, for example, but I found GitHub Copilot to be the most convenient with VS code. If you're interested in becoming a Rust developer or are simply curious about the opportunities, make sure to get your free rust training@letsgetrusty.com Bootcamp. Hope you've enjoyed this video, and remember to stay rusty.
