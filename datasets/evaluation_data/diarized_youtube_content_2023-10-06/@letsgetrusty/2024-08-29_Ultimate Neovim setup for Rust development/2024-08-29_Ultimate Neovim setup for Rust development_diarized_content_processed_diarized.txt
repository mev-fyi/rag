00:00:00.320 - 00:00:46.691, Speaker A: Neovim is a powerful terminal based editor. It's a modernized fork of Vim with a vast plugin ecosystem, a built in terminal emulator, and highly configurable with LUA scripts. With only a single neovim binary, a few config files, and a big brain to memorize a couple of key bindings, you'll have a fully featured editor right in your terminal. In this video, I'll cover the ultimate neovim setup for Rust development by following the upcoming six simple steps. You'll have blazingly fast code completion and a beautiful visual debugger and automatic formatting on save all within your terminal so you can throw away your mouse and use the keyboard exclusively as God intended. At the end. I'll also cover some of my favorite plugins for supercharging your Rust development workflow, so make sure to stay tuned for that.
00:00:46.691 - 00:01:35.255, Speaker A: The first step we need to take before diving into neovim is to make sure Rust is installed. We can easily do this by heading over to rustup rs, copying this curl installation command, and then pasting it into our terminal. We're going to be given a few different options for installation, and in this case we're just going to go with the standard installation by typing in one. Now that we have Rust installed, the next step is to install NeoVim. To do this, we'll head over to NeoVim IO and click the Install now button. This will take us to a GitHub repo with installation commands for each particular operating system. I'm using macOS, by the way, so I'll install Neovim using Homebrew to make sure Neovim is installed.
00:01:35.255 - 00:02:07.495, Speaker A: We can run NVIM version now that Neovim is installed, the next step is to configure it. The problem is, configuring neovim from scratch can be an absolute nightmare. Luckily for us, there are pre made base configurations available. Popular options include Lazy Vim, Astrovim, NVChad, and more. But for this setup we're going to be using my favorite base config, NVChad. It's lightweight, easy to use, and comes with a beautiful UI. To install NVChad, we'll click this big install button right on the homepage.
00:02:07.495 - 00:02:41.685, Speaker A: First we'll need to install some prerequisites. We already have neovim, so the only other required prerequisite is to install nerd fonts. This will make sure that icons appear correctly inside your terminal. With the prerequisites out of the way, we'll scroll down and Copy the installation command for NVChad. Then we'll run that command in our terminal. This will open up neovim and install all the plugins. If we go back to the installation instructions, you'll see that we also need to run this Mason Install all command.
00:02:41.685 - 00:03:22.973, Speaker A: To do that, we'll type in Mason Install all and hit Enter. Then to exit neovim, we'll type Q and enter. The last step is to delete the docket folder in the mvim folder. To get to the MVIM folder on macOS or Linux, first make sure to navigate to your home directory and then CD into configuration. From there you should see an MVM folder and we'll CD into that. Finally, we'll go ahead and remove the git directory. Now, you may be wondering why we had to remove this directory in the first place.
00:03:22.973 - 00:04:12.285, Speaker A: The NVChat configuration was cloned using git, and we're removing this directory because we no longer need it to be a git repository. Now that NVChat is fully installed, let's see what it would look like if we opened up a Rust project in neovim. As you can see, with just a few steps, we have a beautiful terminal editor, and because we're using NVChat, it comes packed with features. For example, we can switch the theme by pressing space th. I personally prefer one dark. We can also open up the built in file tree by pressing ctrl n and close it by pressing control n again. Additionally, we can search for files using a fuzzy file finder by pressing space FF and then escape to exit.
00:04:12.285 - 00:04:50.629, Speaker A: And there's even a built in terminal emulator which we can open by pressing space h To exit the terminal, you can type Control x and then Q enter. So as you can see, there's a lot of features included right out of the box. But the problem is if we were to enter insert mode by pressing I and then started typing out some code, we'll see that there's no autocomplete, inline errors or suggestions. So the next step is to get these features working. Let's get that set up. To get these features, we need an LSP or language server protocol. The official LSP for Rust is called the Rust Analyzer and we can easily install it through Mason.
00:04:50.629 - 00:05:35.505, Speaker A: First we'll open up Mason by hitting escape colon mason and hitting Enter. Then we'll install Rust Analyzer by typing out colon Mason. Install Rust Analyzer. We'll also install the code LLDB Debugger, which we'll use in the next step. To do that, we'll type out colon mason Install code lldb with these plugins installed, we'll get code completion, inline errors and suggestions and debugging capabilities. But in order for the plugins to work, we have to do some additional configuration. So let's exit neovim and switch back to our other terminal.
00:05:35.505 - 00:06:20.231, Speaker A: Now, this MVM folder which we were looking at earlier, is actually where all the configuration for neovim lives. Let's go ahead and open up this folder in neovim, and we'll press control n to open up the file tree. As you can see, there's an init lua file, which is the entry point for our configuration. As I've mentioned before, configuration files for neovim are written in lua. And besides this entry file, we also have a lua directory which contains all our other configuration. For the sake of simplicity, we're only going to be modifying two files. The first one is init lua in the plugins directory, which is where we'll configure all the additional plugins we need and mappings lua, which we'll use to configure key bindings.
00:06:20.231 - 00:07:06.195, Speaker A: Let's start by opening up init lua. This is where all our additional plugins will be configured. Now, in order to make Rust Analyzer work with neovim, the first additional plugin we need to add is called Rustation vim. To add this plugin, we'll simply scroll down, copy the Lazy VIM configuration, switch back to our terminal, press I to go into Insert mode and paste in the configuration. And then to save, we'll hit Escape to enter normal mode and type out colon wq. Now let's switch over to our Rust project and open it up again in neovim. When we open up neovim again, you'll see that the Rustation vim plugin will be installed.
00:07:06.195 - 00:07:43.735, Speaker A: To exit the screen, we can hit colon q. And now we can see we have helpful inline suggestions, code completion and inline errors. With code completion set up, we're pretty much ready to start writing and running Rust code in neovim. But when writing Rust applications, it's not only important to write and run your code, it's also very important to be able to debug your code. So the next step in our setup is to add a beautiful visual debugger, and we can do that by adding a couple extra plugins. So let's exit our Rust project and navigate back to our other terminal. And then we'll navigate back to Init Lua in the plugins folder.
00:07:43.735 - 00:08:34.051, Speaker A: The first plugin we need is called NVIM Dap. DAP stands for Debug Adapter Protocol, and it's a standardized communication protocol that allows IDEs to communicate with debuggers. In this case, we want Neovim to communicate with code lodbl. We'll also need to configure the Rustation VIM plugin to work with code lldb. We'll do this by defining a configuration function which gets the path to the code LLDB executable from the Mason registry and then configures our station VIM to use it. The last plugin we need to add is called dappui. DAPUI is what will give us a beautiful visual debugging experience.
00:08:34.051 - 00:09:29.495, Speaker A: You'll notice here that DAPUI depends on nvimdap and NVIM Neo. For DAPPUI to work, we'll also need to add a configuration function to nvimdap. This configuration function sets up a few listeners to automatically open and close the visual debugger. Now that we have the right plugins installed and configured, let's make sure our file is saved by pressing escape colon w enter. Then we'll open up the file tree by pressing control n and navigate to mappings lua. This is where we can configure custom key bindings, and in our case, we'll add a couple of key bindings to make debugging easier. These key bindings include the ability to step into code, step over code, step out of code, continue toggle breakpoints, toggle conditional breakpoints, reset the debugger, and run the last debug command.
00:09:29.495 - 00:10:01.475, Speaker A: We'll also add a custom key binding, which makes it easy to run tests. By the way, the leader key in neovim is space. So for this key binding to run tests, we would press space dt. Let's go ahead and make sure we save these key bindings. All right, so those were the configurations and key bindings needed to enable debugging Rust code in neovim. Next, we'll make sure that the debugging setup works as intended by navigating back to our Rust project and running the debugger. The first thing we'll do is get rid of this code that's throwing an error by pressing dd.
00:10:01.475 - 00:10:48.477, Speaker A: Then to set a breakpoint, we'll press space db. Then to run the debugger, we'll press space dc. We'll get a few different configuration options, and in this case we'll just go with the first one. As you can see, this opens up a beautiful visual debugger right in our terminal. We can step over code by pressing space DJ and continue to the next breakpoint by pressing space DC Again, in this case, there was no other breakpoint, so the debugger just exited. We're also able to easily run our tests by pressing space DT. Alright, so far we've installed Rust, installed Neovim, added a base configuration which in our case was NVChad, set up code completion and configured a beautiful visual debugger.
00:10:48.477 - 00:11:37.007, Speaker A: The last step is to add automatic formatting on save and create version completions in our cargo toml file, both of which will be a great improvement to our developer workflow. To add these features, let's go back to our init lua configuration file. In the plugins directory, we'll press control n to open up the file tree explorer and then navigate to init lua in the plugins directory. To get automatic formatting on save, we'll add the Rust VIM plugin. We'll configure it to only run on Rust files and enable Rust formatting when saving. And to enable automatic create version completion in cargo TOML files, we'll add a plugin called Crates vim. We'll configure this plugin to only run on TOML files and make sure automatic version completion is enabled.
00:11:37.007 - 00:12:22.051, Speaker A: We'll also need to set up the Completion plugin to work with crates nvim. Let's save these changes by pressing colon W enter. Next, we'll try out these features by navigating back to our Rust project. We'll press enter to reload the config, and then just to make sure everything is loaded properly, we'll exit neovim and reopen it. When we open up neovim again, you can see that our two new plugins have been installed. We'll press Q to exit this window, and now we can test out the new features. The first thing we'll do is modify our code so it's incorrectly formatted, and then we'll save our file by hitting escape colon w enter and as we can see, our file was automatically formatted.
00:12:22.051 - 00:13:13.307, Speaker A: Next, we'll open up the File Tree Explorer by typing in control n and open up our Cargo toml file. With our setup, we're able to see the latest version of every crate, and if we want to modify the version, we will get automatic crate version completions with these six simple steps. You now have a fully featured editor right in your terminal, but if you really want to supercharge your workflow Here are two plugins I highly recommend. The first one is Harpoon, which allows you to navigate around your code base in as few keystrokes as humanly possible, and as a bonus, it was created by the Primogen. And the second plugin I highly recommend is of course the official GitHub Copilot plugin for Vim and Neovim. If you need help becoming a Rust developer or are just curious about the opportunities, make sure to get your free 4 day training@letsgetrusty.com Bootcamp.
00:13:13.307 - 00:13:16.075, Speaker A: Hope you've enjoyed this video and remember to stay rusty.
