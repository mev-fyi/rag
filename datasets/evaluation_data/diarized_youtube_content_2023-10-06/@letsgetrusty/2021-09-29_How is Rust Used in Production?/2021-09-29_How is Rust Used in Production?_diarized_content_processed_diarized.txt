00:00:00.400 - 00:00:40.144, Speaker A: Welcome back, Rust Gang. If you're joining us for the very first time, my name is Bogdan, and this channel is all about the rust programming language. As you're probably aware, there's a lot of hype around Rust. I mean, I can't scroll through hacker news without seeing a rust article. But the real question is, how is Rust actually used in production? Well, today I'm going to be going over how big companies such as Amazon and Dropbox actually use Rust in their production environments. So with that, let's get rusty. The first company I would like to talk about is NPM.
00:00:40.144 - 00:01:27.630, Speaker A: You know that package registry that literally every JavaScript developer in the world uses? Well, they wrote a case study in 2019 entitled community makes Rust an easy choice for NPM. Let's go ahead and read through this together. NPM outlines a problem here, which is scaling a cpu bound service. It says here that most of their operations are network bound and JavaScript is able to meet their performance requirements. However, there was one service, the authorization service, which was cpu bound and becoming a bottleneck. If we scroll down a bit, you can see that the authorization service was implemented in node JS, which wasn't meeting their performance goals. The NPM team decided to rewrite the service, and here are some of the solutions they considered.
00:01:27.630 - 00:02:35.464, Speaker A: The NPM team quickly rejected C, C, and Java and took a closer look at go and rust. NPM rejected C and C because these languages require expertise in memory management, and if you get memory management wrong in these languages, it could lead to catastrophic problems, security issues, crashes, memory leaks, and so on, things that NPM was not willing to tolerate in their authorization service. NPM also rejected Java because it required them to deploy the JVM and associated libraries, along with any program they run on their production servers. This operational complexity and resource overhead was not desirable to the NPM team. They wanted a programming language that was memory safe, compiled down to a standalone and easily deployable binary, and consistently outperformed JavaScript. The two languages that remained under consideration were Go and rust. To evaluate these languages, they actually rewrote their authorization service in node JS, Go and Rust, node JS serving as a baseline.
00:02:35.464 - 00:03:17.292, Speaker A: The Go rewrite took two days, but the team was disappointed in Go's dependency management solution. By contrast, Rust had an absolutely stunning dependency management system. They know here that rust dependency management strategy took inspiration from npms. Specifically, the cargo command line tool is similar to the NPM command line tool. They do know here that the rewrite in Rust did take longer than the rewrite in JavaScript or Go. However, when they ran into problems, the rust community was helpful and friendly in answering their questions. As a result of rewriting their program in rust, their authorization service hasn't caused any alerts in its year and a half in production.
00:03:17.292 - 00:04:12.466, Speaker A: In fact, one of the engineers said, my biggest compliment to rust is that it's boring. The rust service was so straightforward to deploy that they were soon able to forget about the service because it caused so few operational issues. This is in contrast to deploying a JavaScript service to production at NPM, which would necessitate extensive monitoring of errors and excessive resource usage. In conclusion, this article notes that having a good, supportive, inclusive community is important, and the great news is the rust community is all these things. They also know a downside of using rust here, which is just that they have to maintain multiple tech stacks. NPM is already heavily invested in JavaScript, so now, along with their node JS code, they also have to maintain rust server code. Overall, the NPM team was satisfied with rust performance guarantees, memory safety guarantees, and dependency management strategy.
00:04:12.466 - 00:04:45.572, Speaker A: They also said the community is set up for long term success. Next, let's talk about Figma. Here's an article from the CTO of Figma written in 2018 titled Rust in production at Figma. It says here that at Figma, performance is one of their most important features. Specifically, one of their performance critical components is the multiplayer syncing engine. You know, the thing that enables real time collaboration. Originally, the multiplayer server was written in typeScript, which served them surprisingly well.
00:04:45.572 - 00:05:25.084, Speaker A: But as Figma rapidly grew, the typescript server wasn't able to keep up. So they decided to rewrite the server in rust. They chose rust because it offered best in class speed, low resource usage, and memory safety. They know here that the main problem with the old server was unpredictable latency spikes during syncing. After rewriting their multiplayer server in rust and deploying it to production, they said the performance improvements were incredible. Let's have a look at some of these charts. First we have network traffic, then memory usage per worker, which you can see drops off significantly as the rust service was deployed to production.
00:05:25.084 - 00:06:02.432, Speaker A: Next we have cpu usage, which again drops off significantly when the rust service is deployed to production. Then we have average time to serve a file, again a significant drop off. And lastly we have worst case time to save a file, which no surprise here, drops off significantly when the rust service is deployed to production. Here's a comparison of some of the peak metrics. Memory usage is almost four times smaller. Cpu usage is six times smaller. File serve time is ten times faster, and worst case, save time is 16.4
00:06:02.432 - 00:06:30.770, Speaker A: times faster. That's pretty impressive if you ask me. Now, down below, they go into the benefits and drawbacks of using rust. The first Pro is low memory usage, the second Pro is awesome performance, the third Pro is a solid toolchain, and the fourth and final Pro is friendly error messages. Alright, now let's look at some of the cons they lifetimes are confusing. I mean, yeah, I feel that. I also feel like they're not as confusing as they first appear.
00:06:30.770 - 00:07:12.346, Speaker A: In fact, I'm thinking about making a video series all about lifetimes. If that's something you want to see, leave a comment down below. Here are some other cons they know errors are hard to debug, many libraries are still early in their development, and asynchronous rust is hard. Overall, Figma's experience with Rust is very positive, and it allowed them to improve their server side multiplayer editing performance by an order of magnitude. Alright, now, before we move on to the next company, I'm in dire need of a haircut, so I'll be right back. Alright, let's continue. Another company using Rust in production is AWS.
00:07:12.346 - 00:08:08.914, Speaker A: In November of 2020, they wrote a blog post titled why AWS loves Rust and how we'd like to help. They start off the blog post by saying one of the most exciting things about the rust programming language is that it makes infrastructure incredibly boring, similar to what NPM said. The post goes on to say, quote, at AWS we increasingly build critical infrastructure like the firecracker Vm using Rust because its out of the box features reduce the time and effort I to reach Amazon's high security bar while still delivering runtime performance similar to c and C. The number one cloud provider in the world is using rust to build critical infrastructure. If that doesn't excite you about the future of Rust, I don't know what else will. Now, this post talks about a specific piece of critical infrastructure called Firecracker VVM. So let's talk about what Firecracker actually is.
00:08:08.914 - 00:08:46.608, Speaker A: On the Firecracker website you can see it states that Firecracker is an open source virtualization technology. Firecracker enables you to deploy workloads in lightweight virtual machines called Micro vms. Firecracker was developed at AWS to improve customer experience of services like AWS Lambda and AWS Fargate. That's right folks, a rust service is powering AWS lambda. Take a moment to think about that. And as stated above, Firecracker is open source so we can actually go to the Firecracker repo and look through the code. Next, let's talk about discord in 2020.
00:08:46.608 - 00:09:34.344, Speaker A: Discord wrote an article titled why Discord is switching from Go to Rust. In this article, they talk about converting the read states service, whose sole purpose is to keep track of which channels and messages a user has readdenne. This service was originally written in Go, and it was fast most of the time, but every few minutes they saw large latency spikes, which was bad for user experience. After some investigation, they determined that the spikes were caused due to go's garbage collector. At first, they tried to optimize Gohs garbage collector, which did improve performance, but it wasn't quite at the level they wanted it to be. So they switched to rewriting the service in rust, which does not have a garbage collector. Long story short, after switching to rust, they saw major performance improvements.
00:09:34.344 - 00:10:03.152, Speaker A: Just look at the following charts. The purple line is go and the blue line is rust. Looking at the purple line, you can see spikes in cpu usage and response times. But if we look at the blue line, which is the rust implementation, you can see that the line is flat. So again, we're seeing a theme here. Using rust helps increase performance and predictability. The end of the article notes that Discord is using Rust in many places across their software stack.
00:10:03.152 - 00:10:38.626, Speaker A: For example, in their game SDK, video capturing and encoding for Go live. Not the language. Go live is a feature elixir, nifs, and several backend services. The article even says that if you want to work on interesting problems using rust professionally, you should consider working at Discord. The last company I want to talk about is Dropbox. In 2020, Dropbox wrote an article titled rewriting the heart of our sync engine. The sync engine is the software which syncs files between the cloud and your local machine.
00:10:38.626 - 00:11:28.550, Speaker A: So obviously a very critical component to Dropbox. The code name for the new sync engine is nucleus, and at the bottom of the article you'll see that it says, we wrote nucleus in Rust, and Rust has been a force multiplier for our team, and betting on Rust was one of the best decisions we've made. Besides the obvious benefit of increased performance, Rust's ergonomics and focus on correctness help them tame complexity. All right, that's it for specific companies using Rust in production that I would like to call out in this video. But if you want to see a list of other companies using Rust, then head over to www dot Rust dash laying.org production forward slash users. Here you can get a list of a bunch of companies using Rust in production.
00:11:28.550 - 00:11:57.630, Speaker A: If you enjoyed this video, go ahead and give that like button a nice little kiss. And if you want to see weekly Rust content, then hit subscribe and hit that notification bell to be notified when new videos come out. Lastly, if you want access to a free Rust cheat sheet, which you do, then go ahead and head over to www.letsgetrusty.com cheatsheet and with that, I'll see you in the next one.
