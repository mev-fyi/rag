00:00:00.440 - 00:00:38.221, Speaker A: Soon after version 1.58.0 of Rust was released, a CVE was found in the standard library. CVEs are security vulnerabilities, and after this one was found, a new patch version Of Rust version 1.58.1 was released with a fix. Let's take a closer look at the vulnerability that was found. Here's the blog post for the CVE and if we scroll down just a little bit, you can see that the vulnerability was found in the removedir function. As the name implies, this function will remove a directory after removing all of its contents.
00:00:38.221 - 00:01:12.589, Speaker A: The documentation also states that this function does not follow symbolic links and will simply remove the symbolic link itself. Remember this because it's going to be important later on. Symbolic links are used to reference a file or directory. You can think about them as shortcuts. The overview section of this blog post explains how an attacker could use this removed or all function to delete a directory that they don't have permission to delete. For example, let's say the attacker wanted to delete a directory called sensitive. In this scenario, the attacker doesn't have permission to delete the sensitive directory.
00:01:12.589 - 00:01:46.551, Speaker A: However, they could find a privileged program that uses remove dir all internally. The attacker would then create a directory called temp, and inside of temp there would be a symlink. In this case it's called foo to the sensitive directory. The attacker would then call removedurall passing in the temp directory. Removedural would then go into the temp directory, see the symlink foo, follow the symlink to delete the sensitive directory and then delete the temp directory. But wait a minute. If you recall the documentation for removed or all symlinks are not followed.
00:01:46.551 - 00:02:24.065, Speaker A: In fact, this function includes protection to avoid recursively deleting symlinks, and that's where the vulnerability comes into play. This check was implemented incorrectly, which exposed it to a race condition vulnerability. This function would first check if something was a symlink, and if it wasn't, it would proceed with recursively deleting the directory. So if an attacker could create the symlink after the check but before the recursive deletion, then the symlink would be followed as far as affected versions. Rust 1.0.0 all the way through to Rust 1.58.0 are affected, so your best bet would be to Update to Rust 1.58.1.
00:02:24.065 - 00:02:42.425, Speaker A: Note that even if you update to the latest version, if you're using macOS before version 10.10 or the Redux operating system, then this mitigation won't work because those operating Systems don't have APIs to properly mitigate the attack. All right, that's it for this update. I'll catch you in the next video.
