00:00:00.440 - 00:00:34.269, Speaker A: In this video, I'm going to cover the latest release of Rust version 1.73.0, which includes two exciting, clearer panic messages and improved Thread local initialization. With that said, let's get rusty. The first major update in this release is Clear Panic messages. In previous versions of Rust, custom Panic messages were displayed inline, which makes them hard to read, especially if the message is long. In this release, custom Panic messages are now displayed on a separate line, making them much easier to read. Formatting improvements have also been made to Panic messages produced by the Assert Equal and Assert Not Equal macros.
00:00:34.269 - 00:01:12.587, Speaker A: Here's what the message looked like in the previous version of Rust, and here's what the message looks like now. As you can see, the formatting is a bit clearer. The second major update in this release is improved Thread Local initialization. Thread local variables, often referred to as Thread Local storage or Thread Specific storage, are a mechanism that ensure each thread has its own private copy of a variable. This can be useful when storing data that is specific to a particular thread, like a database connection or a user session. In Rust, Thread local variables are created using the local key type, which represents a handle to a thread local variable. However, this type is not used directly.
00:01:12.587 - 00:02:01.683, Speaker A: Instead, threadlocal variables are instantiated using the Thread local macro. This macro abstracts away complexities like initialization, cleanup, and safety checks, making it easier for developers to work with Thread local storage. Thread Local variables are typically wrapped in the cell or Ref Cell Smart, which provide interior mutability. This allows developers to modify the content of Thread local variables even behind an immutable reference. In previous versions of Rust, the With method was used to access and work with Thread local variables within a closure. The with method ensures safe scoped access to the Thread local variable, guaranteeing that the borrowed value is only accessible within the scope of the closure and is automatically released when the closure ends. However, using the with method is a bit verbose and causes unnecessary initialization when used with the Set method.
00:02:01.683 - 00:02:29.475, Speaker A: That's why in this release a couple of methods have been added to the local key type. Those methods are Get, Set, Take, and replace. These methods allow direct manipulation of Thread local variables that's concise and avoids running extra initialization code. If you want to know more about this release, I've included a link to the official release blog post in the description. Before you go, make sure to get your free Rust cheat sheet by heading over to letsgetrusty.com cheatsheet hope you've enjoyed the video and remember to stay rusty.
