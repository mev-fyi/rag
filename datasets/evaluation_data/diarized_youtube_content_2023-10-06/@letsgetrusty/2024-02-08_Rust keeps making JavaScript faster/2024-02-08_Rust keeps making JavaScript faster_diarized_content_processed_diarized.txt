00:00:00.400 - 00:00:37.493, Speaker A: JavaScript recently turned 28 years old and is just as important as ever. But how can we make JavaScript better? By getting rid of the JavaScript, of course. One of the biggest trends in the JavaScript ecosystem right now is to rewrite existing JavaScript tooling and infrastructure in Rust. In this video, I'll detail this shift and explain how big names like Shopify saw their build times go from over an hour to mere seconds by switching to Rust based tooling. And towards the end, I'll explain how you can capitalize on this great migration to Rust tooling as well. Right now we are in the third age of JavaScript. The first age was a long fought war for web dominance.
00:00:37.493 - 00:01:41.139, Speaker A: Starting in the late 90s, JavaScript made its way into the browser to make web pages more dynamic and interactive, but it faced fierce competition. For over a decade, technologies like Adobe Flash, Java Applets and Microsoft Silverlight emerged as a huge threat to JavaScript, offering advanced interactivity and multimedia capabilities that JavaScript simply didn't have at the time. However, as the web evolved, so did JavaScript's capabilities and ecosystem. Coupled with its widespread adoption and Open Web Standard, JavaScript ultimately became the dominant front end language, outcompeting and eventually eliminating these proprietary technologies. Enter the Golden Age of JavaScript Between 2009 and 2019, JavaScript received major improvements to the language. A superset of the language was created which provided type safety and advanced language features critical for large scale applications and front end web apps, went from modest interactive elements to full scale applications with the help of advanced front end web frameworks and tooling. But the biggest and most unexpected innovation happened in 2010.
00:01:41.139 - 00:02:10.214, Speaker A: A standalone JavaScript runtime was created allowing JavaScript to escape the browser and proliferate into the backend desktop and mobile environments. JavaScript, a language that was literally created in 10 days. A language with a type called not a number, that's actually a number. A language in which you can multiply a string and get a valid result, was now rapidly taking over everything. And that's pretty much where we are today. JavaScript is ubiquitous and more popular than ever. But it's not 2019 anymore.
00:02:10.214 - 00:02:58.373, Speaker A: We've entered into a new age of JavaScript, the age of oxidization. You see, most of the tools and infrastructure built during the Golden Age of JavaScript were written in JavaScript, which means it's slow and buggy, but was good enough at the time. That's no longer the case. As JavaScript code bases continue to grow larger and more complex, these tools have become a bottleneck luckily, the solution is pretty simple. Rewrite everything in Rust and that's exactly what's happening right now. In 2020, Ryan Dahl, the creator of Node JS, released the next generation JavaScript runtime written in Rust, which directly addresses the shortcomings of Node, like the lack of built in TypeScript support and a weak security model. In 2022, Tau reemerged as a rival to Electron for building desktop apps using web technologies.
00:02:58.373 - 00:03:46.543, Speaker A: By leveraging Rust to achieve superior performance, security and flexibility, Tauri has skyrocketed in popularity, posing a huge threat to Electron. And later that year the creator of Webpack introduced a new and improved bundler called TurboPack, which is written in Rust and boasts to be 700 times faster than Webpack. The list goes on. New tools are popping up every day and they are proving to have a significant impact. In December 2023, a brand new JavaScript linter written in Rust was announced and the initial results are remarkable. Auxlint is 50 to 100 times faster than Eslint, the most popular and widely adopted JavaScript linter. Evan Yu, the creator of the Vue framework and the front end build tool Veit, tweeted that he ran Auxlint on the VUE codebase and it finished linting in just 50 milliseconds.
00:03:46.543 - 00:04:22.237, Speaker A: Auxlint is also proving to be a massive win for big tech companies like Shopify. Their previous linting setup took 75 minutes to run, which required them to spread out the workload across 40 plus workers in continuous integration. By introducing Auxlint, they were able to lint the same codebase on a single worker in just 10 seconds. They even caught a few bugs that their old Linter missed. The age of Oxidation is upon us. New Rust based tools are popping up all over the place to speed UP and secure JavaScript tools and infrastructure. So what does this mean for you? There are two ways you can capitalize on this great migration to Rust.
00:04:22.237 - 00:05:03.923, Speaker A: The first way is to simply use these tools to speed up and secure your JavaScript code bases. To get started, check out the awesome JS tooling in Rust GitHub repo where you can find a comprehensive list of Rust tooling. And if you want me to make a video going over how to leverage these tools along with some benchmarks, let me know in the comments section below. The second way you can capitalize on this great migration is to develop the skillset to contribute to these powerful new tools, which essentially means learning Rust. Luckily, the mission of this channel is to make Rust education accessible to everyone and I'm here to help you every step of the way to get started on your rust learning journey. Get your free Rust cheat sheet@letsgetrusty.com cheatsheet.
00:05:03.923 - 00:05:06.515, Speaker A: Hope you've enjoyed the video and remember to stay rusty.
