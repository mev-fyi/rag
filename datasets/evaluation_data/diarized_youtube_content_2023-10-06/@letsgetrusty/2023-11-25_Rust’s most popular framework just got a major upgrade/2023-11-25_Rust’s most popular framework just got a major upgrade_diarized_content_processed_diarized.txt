00:00:00.520 - 00:00:57.051, Speaker A: If you've been learning Rust, you must have heard of Rocket, Rust's most popular web framework. However, if you've looked into this framework, you probably know it has one major issue. There have been numerous Reddit posts and online threads pointing out Rocket's incredibly slow pace of development and questioning if Rocket is still the right framework of choice for Rust developers. The good news is, just last week a brand new major release of Rocket was announced, along with a newly proposed governance model, which I'll go over in this video. At the end, I'll give you my personal view on whether Rust developers should commit to this popular framework or just forget about it. Rocket was created in 2016, just one year after Rust's first stable release, and it rapidly dominated over other web frameworks because of its unique focus on speed, type, safety and its simple API powered by Rust's macro system. Unfortunately, this success was short lived and the project took a downhill trajectory.
00:00:57.051 - 00:01:34.647, Speaker A: For quite a while. Development crawled to a halt with no major version being released in over four years. In a GitHub PR comment, the creator and sole maintainer of Rocket, Sergio mentioned that due to difficulties in his personal life, he didn't have much time to work on the project. However, this situation was not communicated well to the broader Rust community. Community members slowly lost hope in Rocket and started suggesting other frameworks like Actix, Web and Axum. And In May of 2023, Rocket was removed from Are We Web Yet.org, a website that points Rust newcomers to recommended libraries and frameworks for web development in Rust.
00:01:34.647 - 00:02:40.577, Speaker A: But just when all hope for Rocket's future seemed lost, last week two major announcements were made a new governance structure for the project moving forward, and the highly anticipated release of Rocket version 0.5. In a blog post titled Building a Better foundation for Rocket's Future, Sergio acknowledged that Rocket's recent development has been nothing short of erra, and four years went by without a major release. The community rightfully voiced its disappointment and concern and was generally not happy with Rocket. Sergio went on to take full responsibility, stating that he didn't lead the project adequately, and even though Life Events pulled him away from the project, he could have done more to communicate that. To make sure this never happens again, Sergio announced plans for a new independent nonprofit foundation designed to support and bolster Rocket's development, increase transparency, and diversify leadership. Going forward, this foundation would be responsible for governing Rocket and dictating its trajectory, the goal being to distribute, control and prevent a single person from stalling development. Alongside this announcement, Rocket version 0.5
00:02:40.577 - 00:03:28.449, Speaker A: was released with some highly anticipated features. Finally landing this version introduced two major features, the first being support for stable Rust. Roguen now compiles and builds on Stable Rust, which will improve adoption, make maintenance easier, and make builds more reliable. The second major feature is support for Async IO. You can now write Async route Handlers, which is a significant improvement, enabling concise, readable and maintainable asynchronous code, enhancing the framework's performance and scalability for IO bound tasks, and making it easier to integrate with various libraries and frameworks within the Rust ecosystem. Some of the other features introduced were support for streams, server side events and websockets. This news makes me very excited about the future of Rocket.
00:03:28.449 - 00:04:04.923, Speaker A: Rocket was the first Rust framework I ever tried and it made building Rust servers really enjoyable for me. However, at this point would I generally recommend this framework given its rocky history? If your project is already using Rocket, then I think it makes sense to stick with it. Switching frameworks can be a headache, especially for larger code bases. Luckily you don't have to. Given the new major release of Rocket and the new governance model, I'm hopeful that the framework has a bright future. On the other hand, if you're starting a new project, then I would personally go with Axum. ACUM is built by the Tokyo team and unsurprisingly has a deep integration with Tokyo.
00:04:04.923 - 00:04:39.585, Speaker A: It's also the new cool kid web framework for Rust and is gaining popularity rapidly. Actix Web is another solid choice, especially if you're looking for a framework that's mature and battle tested. And given the recent news, I think Rocket is still a good choice for new projects. I actually used Rocket to implement the web server project in the Rust developer bootcamp recently. I've been working on rewriting the project in Axum, but it's good to know that I can keep both versions. If you want to learn how to implement a web server in Rust using Rocket or Axum, head over to LetsGetRusty.com Bootcamp to accelerate your Rust journey.
00:04:39.585 - 00:04:48.055, Speaker A: Let me know what you guys think about this news in the comments section below and subscribe to the channel for more Rust content. Hope you've enjoyed the video and remember to stay rusty.
