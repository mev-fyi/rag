00:00:00.320 - 00:00:27.305, Speaker A: Rust is an amazing programming language with many benefits. However, no programming language is perfect and Rust definitely has its cons. So in today's video, we're going to go over the three major cons of Rust. But before we get started, if you haven't already, make sure to get your free Rust cheat sheet by heading over to LetsGetRusty.com cheatsheet with that said, let's jump into the video. The first major con of Rust is that it's slow. Now, of course, I'm not talking about runtime speed.
00:00:27.305 - 00:01:17.981, Speaker A: Rust does a great job in that area, but it's slow in other areas. For example, Rust is slow to get started with because it has a relatively long learning curve. Part of it has to do with novel concepts like its ownership and borrowing memory management system and its unique type system, which includes using object composition as well as traits to share functionality instead of classical inheritance. Besides the learning curve, there's also write time speed. Writing programs in Rust will typically take longer than writing programs in languages such as Java, Go, JavaScript, etc. Rust's memory management system coupled with its strict compiler means you're going to be spending quite a bit of time fighting with the borrow checker, which basically means fixing compile time errors. Additionally, Rust is an explicit language, which means you will be forced to handle error cases and optional values in your code explicitly.
00:01:17.981 - 00:02:00.609, Speaker A: This also means that Rust code can be pretty verbose, which leads into read time speed. Because Rust code is verbose, it could be hard to read, especially when you start introducing things like lifetimes. And lastly, as you probably know, Rust has relatively slow compile time speeds. This not only affects how long it takes to build your program, but also affects things like integrated development environments like Rust Analyzer, which could lead to slow semantic analysis and code completion. The second major con of Rust is that it's complex. This should be no surprise given that Rust is a systems programming language. However, it could be a burden because you have to keep a lot of things in your head besides the domain specific logic you're trying to implement.
00:02:00.609 - 00:02:44.197, Speaker A: For example, when programming in Rust, you constantly have to think about how things are laid out in memory and the lifetime of references. Also, as you start using the more advanced features of the language, things can get complicated pretty fast. One example of this is the macro system in Rust, which is very powerful but also very complex. And the other example is the Async model which exposes you to low level details. Not to mention that the Rust standard library does not come with an async runtime so you have to research third party libraries and find the right one for your project. Some seemingly not so advanced aspects of the language could also be complicated, for example error handling, which is currently an area of development. The third major con of Rust is that it's immature.
00:02:44.197 - 00:03:24.027, Speaker A: The first stable release came out in 2014 and the language is still constantly evolving. The ecosystem of third party libraries is also young. For example, in the server space Rust does not have a dominant framework similar to Laravel or Ruby on Rails. Lastly, the job market for Rust jobs is still fairly young despite rapidly growing in the last couple of years. Rust is an amazing language, but no language is perfect, and these are some of the general overarching cons I could think of. Let me know in the comments section if you agree, disagree, or have some of your own cons you want to share. Lastly, before you go, make sure to get your free Rust cheat sheet by heading over to LetsGetRusty.com
00:03:24.027 - 00:03:28.795, Speaker A: CheatSheet with that said, I'll see you in the next one.
