00:00:00.640 - 00:00:32.103, Speaker A: Welcome back, Rust gang. If you're new here, my name is Bogdan and this channel is all about the Rust programming language. So if you want to see weekly Rust content, take a few seconds to hover over that subscribe button and give it a little poke. Rust itself is a great language. It gives you low level access to system resources. It doesn't have a garbage collector, it's memory safe, has a great package manager and an ecosystem of crates. But at the end of the day, programming languages are just tools to build software.
00:00:32.103 - 00:01:42.291, Speaker A: Rust specifically is designed to build software where performance and correctness is very important. This begs the question, what kind of programs can you build using Rust? In this video I'm going to be going over the various categories of programs you can build in Rust that have a supported ecosystem. Also, stick around till the end of the video to hear about less supported categories of programs and to hear about things that you should not build using Rust. Now, before we jump into the specific categories, in general, Rust is a systems programming language which gives you access and fine grained control over system resources, memory, et cetera. So anything you can build that's low level in C you can build with Rust, and that includes databases, compilers, low level networking code, and so on. With that intro out of the way, the Rust community has taken special care to improve the developer experience around certain categories of programs. And the first one is CLI programs.
00:01:42.291 - 00:02:44.813, Speaker A: CLI stands for command line interface. These are programs you run through the command line and despite not having a graphical user interface, they usually make up for it with functionality and flexibility. Creating a CLI program is a great first step when learning many different programming languages, including Rust. When creating CLI programs, I recommend picking some functionality or some utility you would find useful yourself and then building your program around that. As an example, here I've created a CLI program that allows me to convert between currencies, specifically to convert between USD and the currency of my home country, Ukraine. Let's go ahead and run the program and we'll enter 20 USD and here you can see for 20 USD we can get 12 loaves of bread, two cows and a small child. The next category of programs that have a supported ecosystem are webassembly programs.
00:02:44.813 - 00:03:46.837, Speaker A: Web assembly is a low level assembly like language with a binary format that could be executed at near native speeds. This binary format is created for a stack based virtual machine which all the major browsers have now implemented. Additionally, various languages could be compiled down to webassembly code. So what does this all mean? Well, this means that you could take code written in languages such as C or Rust, compile it down to WebAssembly, and run it in the web browser alongside your JavaScript code. There's also an interface to allow your webassembly code and your JavaScript code to interact with each other. This means that your web apps could now run computationally intensive tasks at near native speed. Now this technology is great, it opens up a lot of possibilities, but it begs the question is it worth it for you to write WebAssembly code? Nobody cares if you have the world's fastest to do list app.
00:03:46.837 - 00:04:32.529, Speaker A: So in general the guidance is you should only write webassembly for computationally intensive tasks. Things like games, image manipulation, math, physics, audio effects, et cetera. Also note that WebAssembly is portable. It's designed to be executed and integrated in other environments. This means webassembly code can run in web browsers, but it could also run on basically any os, and that includes mobile devices and on the server. So if you have some core functionality that you would like to be portable across many different environments, then WebAssembly might be appealing to you as well. The next category of supported programs are server side apps or networking services.
00:04:32.529 - 00:05:38.099, Speaker A: If you're looking to build backend services that are performant, robust and scalable, Rust is a great choice. With production ready frameworks such as Actix, Web and Rocket, native drivers for MongoDB, SQLite, Postgres and MySQL, and support for basic needs such as logging, authorization, templating and email, the ecosystem is fairly mature. Note that despite having a mature ecosystem, Rust currently doesn't have a dominant framework analogous to Rails or Django, so expect putting in a little extra effort wiring things up yourself. All in all, coming from a web development background, Rust on the server is definitely something that I'd like to get more involved in. The last category of programs with a supported ecosystem I'd like to talk about are embedded programs. By embedded programs I mean programs that run on embedded devices. An embedded device is a highly specialized device meant for a specific purpose and usually it's included as part of a larger system.
00:05:38.099 - 00:06:29.821, Speaker A: Some examples include an electronic calculator, a smartwatch or a fitness tracker, a GPS system, central heating systems or IoT devices. The fact that Rust is a low level systems programming language without a runtime and memory safe makes it perfect for this use case. Next, I'd like to briefly cover a couple more things you can build with Rust that don't have a very mature ecosystem. The first one is game development. Now, the ecosystem isn't super mature, but people have definitely been able to create games using Rust. One of my favorites is Call of Ferris. There are also some libraries that allow you to build graphical user interface applications with Rust, but again, the ecosystem is not mature at all.
00:06:29.821 - 00:07:02.519, Speaker A: Lastly, you can actually create blockchain smart contracts using Rust. If you're interested in this, check out the Solana blockchain. As I wrap up this video, I'd like to talk about things you should not build using Rust in general. If performance and correctness is not critical to your program, then do yourself a favor and consider using something easier. A language with a garbage collector. A language that abstracts away low level system concepts. Languages that are easier to learn and have a richer ecosystem.
00:07:02.519 - 00:07:32.445, Speaker A: But if what I just said doesn't deter you and you're like, nah, I want to build everything in Rust, well then this channel is for you. We'll push through the pain together. All right, that's it for this video. If you enjoyed it, make sure to give it a like. And if you want to see weekly Rust content, then make sure to subscribe. Also, I'm going to be releasing a Rust cheat sheet which you don't want to miss out on. So if you want access to that, click the link in the description and with that, I'll see you in the next one.
