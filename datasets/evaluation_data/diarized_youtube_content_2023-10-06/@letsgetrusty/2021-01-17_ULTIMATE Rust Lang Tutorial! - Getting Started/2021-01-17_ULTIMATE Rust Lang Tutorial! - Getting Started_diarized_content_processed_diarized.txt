00:00:18.240 - 00:00:49.396, Speaker A: Welcome back to let's get Rusty a show all about the rust programming language. If that sounds interesting to you, go ahead and hover over that subscribe button and give it a nice big hug. Today we're starting a new series where we're going chapter by chapter through the Rust programming language book, also known as the book. Now this is a great free resource. I have the link in the description, so you can follow along. But if you're anything like me, you prefer video tutorials over reading text. So if that's you, this will be a perfect compliment to the book.
00:00:49.396 - 00:01:13.422, Speaker A: With that, let's get started with chapter one. All right, the first step is to actually install rust. So I'm looking at the Rust book. I'll scroll down here to the Linux and macOS section. I'm running Ubuntu, but if you're running macOS, this will work as well. All you have to do is copy this text, paste it into your terminal, enter, and there you have it. You should see this text.
00:01:13.422 - 00:01:49.242, Speaker A: Rust is installed. Now if you're on Windows, the installation steps are a little bit different, but you can go to the book and it should be fairly simple to install as well. Rust is now installed, but we also want to install a rust language server. So if you want things like code completion, go to definition and refactoring abilities. This is something you're going to want to install. I happen to be using visual studio code. If you're using the same thing, then you can click the extensions tab, type in Rust, and the first thing you'll see is the official rust programming language extension.
00:01:49.242 - 00:02:39.430, Speaker A: This is going to be deprecated, so go to the second one, which is called Rust Dash Analyzer, and install this one. Now, the next step is to actually write a hello world program. So what I'm going to do is I'm going to create a new directory called hello World, and I'll cd into it, then open it in versus code. Now, in this hello world directory, I'm going to create a new file called Main Rs. You might get this pop up here that says the language server for Rust is not yet installed, so go ahead and download that. If you get prompted. You might see this rust analyzer failed to discover workspace error, and this is just because we're not using cargo at the moment, so you can ignore that.
00:02:39.430 - 00:03:08.852, Speaker A: All right, so now let's actually write our first rust program. So we're going to type in FN main. This is the main function that will execute execute when your program starts, and then we're going to do print line. This is a macro, which we'll learn about later, and you can type in whatever you want. Usually you'll do hello, world, but I'm just going to do let's get rusty. Don't forget the semicolon. Save your work.
00:03:08.852 - 00:03:37.956, Speaker A: And then we're going to go over to our terminal and type in rust circumental main rs to actually compile the program. Okay, so Rust C wasn't able to be found because after installing rust, I didn't reload my terminal, so the paths weren't updated. I opened up a new terminal here. Now should work. So let's do the same thing. Rustc main rs. Great, it compiled.
00:03:37.956 - 00:03:54.198, Speaker A: You could see here that we have a new main executable, and now I'm just going to run that executable. Great. You've written your first program in Rust. Now you can update your resume and start applying for jobs. I'm just kidding. There are no jobs in Rust. We'll get there, though.
00:03:54.198 - 00:04:30.420, Speaker A: We'll get there. Okay, so having one main rs file works great for our little hello world program, but in the real world, we're going to have projects with multiple files with dependencies, and we need something to handle that. Luckily, Rust comes with a build system and package manager called cargo. Now, this is a pain point with other low level programming languages, but luckily for us, Rust just has it built in. So let's check that we have cargo installed. To do that, you can simply go to your terminal and type in cargo version. Okay, great.
00:04:30.420 - 00:04:54.152, Speaker A: We see that we have version 1.449.0 installed. Now let's create a hello world project using cargo. To do that, we'll type in cargo new, and then hello, cargo. Okay, great. Cargo has created a new package for us, which we could see in versus code. Now, it has a few different things.
00:04:54.152 - 00:05:25.314, Speaker A: First, we have cargo tumbl. This is the configuration file for our package. And you can see we have some information, such as the name, version, and so forth. And then we have this section for dependencies. Currently, we don't have any dependencies, but if we did, they would be listed here. If you're coming from the web world, this is essentially package JSON. We also have git ignore, and that's because cargo automatically initializes a git repo for our project.
00:05:25.314 - 00:06:04.582, Speaker A: Now, you could use a different source control system by specifying it when you're creating a new project. But by default, we get a git repository. And then finally we have this source folder, which contains our actual code, you can see a main RS file was automatically generated for us with the hello world program. Alright, now let's actually build our cargo project. I'll cd into our new hello cargo directory, and instead of running rust c, we're going to run cargo build. Now this produced a new file called cargo Dot lock. That is a file that specifies our exact dependencies.
00:06:04.582 - 00:06:43.982, Speaker A: It's sparse right now because we don't have any, but we also have this target directory which includes this debug directory which has our actual executable along with a bunch of other stuff. Now in order to run our program, all we have to do is go cargo run. And you can see here hello world is printed. There are also a bunch of other commands. You can go cargo help to see them. One useful one is cargo check, which will check your program for errors without actually producing an executable. And you might want to do this because it's a lot faster than running the program.
00:06:43.982 - 00:06:59.570, Speaker A: And there you have it, chapter one of the rust book complete. If you like this video, make sure to hit the like button. And if you want to follow this series, subscribe and hit the notification bell so you can get notified when the next video comes out on chapter two. I'll see you in the next one.
