00:00:00.600 - 00:00:53.589, Speaker A: Recently a new version of Rust was released, version 1.56.0, which stabilizes the 2021 edition of Rust. Additions are a way to opt into small and scoped breaking changes. Additions are chosen on a per crate basis, and crates with different editions can interoperate with each other. Because additions are distinct from the version of Rust you're using, you could be on the latest version of Rust but be using an older edition, for example edition 2018. To upgrade to the latest release of Rust, simply run Rust up Update Stable to automatically migrate your project to the next edition of Rust, run Cargo Fix Edition, then modify the Addition field in Cargo toml to the next edition, for example 2021, and finally run Cargo Build or Cargo Test to verify your code works. Now let's talk about the most impactful changes in the 2021 edition of Rust.
00:00:53.589 - 00:01:27.419, Speaker A: The first and most important change is disjoint capture in closure. Closures automatically capture variables you refer to in the closures body in the 2018 edition and before. Closures would capture entire variables even if only one field was used. Starting in Edition 2021, closures are smart enough to only capture the individual fields used within the closure. The second change is that the into iterator trait is implemented for arrays. The into iterator trait defines how a type will be converted into an iterator. Types implementing this trait have to implement one method called into iter.
00:01:27.419 - 00:02:11.451, Speaker A: The nice thing about this trait is that types implementing this trait can be used in for loops. Up Until Rust version 1.53.0, only references to arrays implemented the into iterator trait, meaning that you can use a for loop to iterate over references to the values inside of an array, but you could not use a for loop to iterate over the values themselves. This was a long standing issue that wasn't straightforward to fix because implementing into iterator for arrays would break existing code which used method syntax to call into iter. Well, great news. Now arrays implement the into iterator trait in all editions of Rust. That means that in all editions of Rust you can use a for loop to iterate over the values inside of an array for backwards compatibility in additions prior to 2021.
00:02:11.451 - 00:02:51.327, Speaker A: Using the method syntax to call into iter on an array resolves to calling into iter on a reference to that array. Starting in the 2021 edition. Calling into iter on an array works as expected and gives you an iterator over the values of an array. Another change are some additions to the Prelude, specifically the Try into try from and from iterator traits. These traits are now in scope by default. The Try into and try from traits define how to conf convert between types, and the from iterator trait defines how a type can be created from an iterator. In addition to these changes, here are some other the bare trait objects Warning and Ellipsis Inclusive range Patterns warning have been promoted to errors.
00:02:51.327 - 00:03:30.655, Speaker A: This means using the DIN keyword to identify trait objects will be mandatory starting in the 2021 edition. The panic macro now always expects format strings, which is consistent with other macros such as the print line macro. And finally, there are some minor updates to macros such as the ability to use or patterns in macro rul and some new reserved syntax. If you would like more details or to find out about changes I didn't mention in this video, I've linked to a blog post announcing Rust 2021 in the description. With that said, if this video was helpful, make sure to give it a like. And if you want to see weekly Rust content, make sure to hit subscribe. Finally, get your free Rust cheat sheet by heading over to letsgetrusty.com
00:03:30.655 - 00:03:35.035, Speaker A: cheatsheet and with that said, I'll see you in the next one.
