00:00:00.320 - 00:00:52.583, Speaker A: What's up Rustations? Welcome back to let's Get Rusty, your number one resource for all things Rust. If you haven't already, get your free Rust cheat sheet by heading over to letsgetrusty.com cheat sheet now I get a good amount of comments asking me how I get type annotations in VS code or in general what plugins I use. So in today's video I'm going over my IDE setup for Rust development. With that said, let's get Rusty now before jumping into my VS code setup. Another IDE option is an IntelliJ based IDE with the rust plugin Here I've opened up a Rust project in Idea with the Rust plugin installed. Now by installing the single plugin you get a great Rust language server, seamless integration with Cargo, and a test runner.
00:00:52.583 - 00:01:22.895, Speaker A: In addition, if you're using clion, you also get a fully fledged debugger and CPU profiler. So if you're already using an Intellij based ide then this might be the route you want to take. Personally, I use VS code because that's the editor I'm familiar with from web development. So let's jump into my VS code setup next. Here I have the same Rust project opened up in VS code. Now the first thing we want to do is install a Rust language server. So let's open up the Extensions tab and search for Rust.
00:01:22.895 - 00:02:17.079, Speaker A: A language server provides language specific features such as autocompletion, go to Definition, syntax, highlighting, and more. For the Rust programming language you have two options. You can either use the Rust Language Server or Rust Analyzer. The one you want is Rust Analyzer. Rust Analyzer has a better more performant architecture, is more fully featured, is being actively developed, and is in the process of becoming Rust's official language server. So in order to install Rust Analyzer you want to ignore this top Rust extension and instead install the second one called Rust Dash Analyzer. Now that Rust Analyzer is installed, I can go back to main RS and as you can see we get these nice type annotations and this Run button here so we can run our program from within our editor.
00:02:17.079 - 00:03:07.545, Speaker A: Now hitting Run will work. However if I try to hit debug you'll see we get an error saying we need to install code LLDB or MSC tools for debugging to work. Now debugging is pretty important, so the next plugin we want to install is Code LL db Great. Now we have a Rust language server and support for debugging. Next let's head over to our Cargo TOML file as you can see, there is no syntax highlighting. Cargo TOML uses the TOML language, so let's add support for the TOML language by installing the better TOML extension. If we navigate back to Cargo toml, you'll see that now we get syntax highlighting.
00:03:07.545 - 00:03:43.909, Speaker A: You are now set up to do Rust development in in VS code. Next, let's talk about some optional extensions you can install to make your life a little easier. The first optional extension helps us manage dependencies, so let's add a dependency to our Cargo TOML file. In this case, I'll add the RAND crate. As you can see, the version is 0.7.0, but how do I know if this is the latest version or what versions are even available? Well, that's where the crates extension comes into play. So let's open up the Extensions tab again, search for crates and install it.
00:03:43.909 - 00:04:19.623, Speaker A: In this case, I already have installed, I just need to enable it. Then we'll go back to Cargo toml. As you can see, we now get this label indicating that our dependency is not up to date and what the latest version is. If I hover over the label, we can see a history of versions and if I click on one then it will change Cargo TOML to reflect that version. In addition, if I attempt to modify this string, then the available versions will be listed in line as well. And finally, if we're on the latest version instead of an X, you'll see this green checkbox. The only caveat here is that this plugin only works for dependencies coming from Crates IO.
00:04:19.623 - 00:04:51.725, Speaker A: The next optional plugin is called AIR Lens. To show it off, I'll go back to main RS and remove this mute keyword from line 29 which will create an error. And you can see the error denoted by these red squigglies here. Now these red squigglies might be hard to see. So what if we wanted to make this error louder? Well, let's install the error lens extension. Now the entire line is read and we see the error message. The last extension I want to talk about is called Tab9.
00:04:51.725 - 00:05:30.215, Speaker A: This extension gives you AI code completion for any language and I must say from personal use using this in web development, with Typescript and with Rust, it's pretty damn good at predicting what you're going to type. So if you want to improve your efficiency, give this extension a try. Alright, that's it for my IDE setup for Rust development. If you enjoyed this video and found it useful, give the video a like and if you want to see weekly Rust content, subscribe. Most importantly, get your free Rust cheat sheet by heading over to letsgetrusty.com cheatsheet and with that said, I'll see you in the next one.
