00:00:00.480 - 00:00:43.008, Speaker A: In this video. Well talk about how Rust has helped the effort to run Linux on Apples custom M one and M two chips, allowing you to use Arch Linux on your new overpriced MacBook Pro to reach maximum levels of pretentiousness. Speaking of pretentiousness, if you want to impress your friends and family by having a deep understanding of the most loved programming language on the Internet, make sure to get your free rust cheat sheet by heading over to letsgetrusty.com dot forward slash cheat sheet. In November 2020, Apple made a bold move and released the first series of MacBooks that shipped with the ARM based Apple silicon in benchmarks. These chips consistently outperformed other processors, especially in single core performance. But there was one problem.
00:00:43.008 - 00:01:27.516, Speaker A: You couldn't run Linux, Windows, or any other operating system besides macOS. This is because Apple Silicon Max use a boot process that involves undocumented proprietary code. It was clear that in order to boot anything other than macOS on these machines, someone had to reverse engineer the boot process and then build custom drivers so the kernel could communicate with the hardware. Thats where Asahi Linux comes in. Asahi Linux is a project focused on reverse engineering Apple silicon Macs to get Linux to run on them, and it works. Thanks to Asahi, you can now run arch Linux on Apple silicon. Note that the project is still in Alpha, so a lot of things like HDMI support and GPU acceleration dont work yet.
00:01:27.516 - 00:02:11.802, Speaker A: To get these things working, custom drivers must be written. One of the more important drivers is the GPU driver. Asahi Lena, who is a Linux developer and YouTube, wrote up a great blog post describing the unique challenges faced when writing a GPU kernel driver for the M one chip. Usually computer hardware is controlled by the kernel through a kernel driver, which provides an interface for the kernel to talk to the hardware. Think of a kernel like a human brain, using electrical signals to give instructions to other body parts. The GPU on the Apple silicon max, on the other hand, has its own brain, an arm coprocessor that manages things like command scheduling, power management, temperature measurement, and more. It's an entire computer inside a computer.
00:02:11.802 - 00:03:06.712, Speaker A: So if the kernel wants to tell the gpu to render a 3d model on the screen, how would I do that? The kernel and the GPU communicate through over 100 data structures stored in shared memory, so the kernel would issue that 3d model as vertex and fragment rendering commands, which are data structures stored in shared memory. Think of it as two brains that share information through post it notes on a board. These post it notes, it turns out, can be pretty complex. The rendering commands we talked about have many nested data structures within them and contain pointers to smaller commands. So to have a functioning GPU, Lena would need to write a driver that can manage all these data structures. And since the driver will be operating in the kernel space, Lena considered writing the driver in c. However, given the complexity of the driver and the great potential for memory bugs to cause crashes or data corruption, Lena was searching for a safer alternative.
00:03:06.712 - 00:03:54.660, Speaker A: Around the same time, rumors of rust being adopted by the Linux kernel were beginning to spread. Lena didn't have much experience with Rust, but it looked promising, so she took a gamble and decided to write the GPU driver in Rust. In just over a month, Lena was able to get a spinning cube to render using her driver. Several days later, Lina was able to run an entire Gnome desktop session, and this was possible because of Rust. In her blog, Lina states that going from a simple demo to a full desktop with multiple apps using the GPU concurrently ends up triggering race conditions, memory leaks, and use after free errors and many other issues. But thanks to Rusts safety features, that didnt happen. Lenas experience is a testament to the power of Rust as a systems programming language.
00:03:54.660 - 00:04:30.694, Speaker A: It shows that development of a kernel driver can be safer, faster, and less painful if rust is used rather than C. Whether youre looking to build kernel drivers or just looking to write safer and faster applications, a great time to get started with Rust if you havent already. And to get up to speed quickly. Make sure to get your free rust cheat sheet by heading over to letsgetrusty.com cheatsheet. Thats it for this video. Let me know what you think about Rust in the Linux kernel in the comment section down below, and make sure to like this video and subscribe to the channel for weekly Rust content.
00:04:30.694 - 00:04:34.090, Speaker A: With that said, ill see you in the next one. It.
