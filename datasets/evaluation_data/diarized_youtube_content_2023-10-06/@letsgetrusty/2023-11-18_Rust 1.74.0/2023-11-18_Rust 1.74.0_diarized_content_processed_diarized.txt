00:00:00.520 - 00:00:43.269, Speaker A: In this video, I'm going to cover the latest release of Rust version 1.74.0, which includes three exciting cargo lint configuration, Cargo Registry Authentication, and improved opaque return types. With that said, let's get rusty. The first major update in this release is Cargo Lint configuration. Previously, if you wanted to configure lint from the Rust compiler or other tools like Clippy, you would either have to set the Rust flag's environmental variable, which would affect the entire build, or define crate level attributes in your source code. As of this release, you can now configure crate level attributes in your Cargo TOML file. This is nice because you can keep everything in one place and avoid clutter in your source code.
00:00:43.269 - 00:01:29.495, Speaker A: Lints can also be configured in a workspaces lints table and inherited by workspace members by setting workspace equal to true underneath the lint configuration. The second major update in this release is Cargo Registry Authentication. When defining third party dependencies in your project, Cargo fetches those dependencies from a registry. A registry is a centralized repository where developers can publish and share their Rust code, and others can easily discover and include these crates in their own projects. The default registry is Crates IO, which is a public registry maintained by the Rust community. But you may want to pull dependencies from a custom private repository for various reasons. For example, your company may have internal dependencies or require strict security measures.
00:01:29.495 - 00:02:15.445, Speaker A: Fetching dependencies from public registries like Crates IO can be done with simple, unauthenticated get requests, but certain actions like publishing a crate require authenticating with the registry. As of this release, you can configure how Cargo gets credentials for a registry using credential providers. Built in providers are included for OS specific secure Secret storage on macOS, Linux, and Windows. Additionally, custom providers can be written. For example, there's a 1Password credential provider. Using a secure credential provider reduces the risk of registry tokens leaking. As of this release, registries can now optionally require authentication for all operations such as fetching dependencies, not just publishing.
00:02:15.445 - 00:03:05.573, Speaker A: This enables private cargo registries to offer more secure hosting for crates. Note that if you are using a private registry, a credential provider must be configured. The third major update in this release is improved opaque return types. This is a subtle and complex feature, mostly relevant to advanced use cases involving lifetimes and type relations. In this example, we have a wrapper struct containing a reference to a generic type. Then we define an implementation block for wrapper which has an async function returning self and a regular function which returns something that implements iterator and yields items of type self. In previous versions of Rust, the compiler did not allow mentioning self in opaque return types like async functions or returned impulse when the type those functions were defined on contained references.
00:03:05.573 - 00:03:46.081, Speaker A: You may have encountered error messages like these. Async function return type cannot contain a projection or self that references lifetimes from a parent scope. As of this release, this code simply just works as you would expect. This restriction is also lifted for associated types mentioned in opaque return types which previously caused similar errors but now compile as expected. If you want more information about this release, I'll include the official release blog post in the description. Before you go, make sure to get your free Rust cheat sheet@letsgetrusty.com cheatsheet let me know what your favorite feature was in the comments section below and subscribe to the channel for more Rust content.
00:03:46.081 - 00:03:48.845, Speaker A: Hope you've enjoyed this video and remember to stay rusty.
