00:00:00.360 - 00:00:33.906, Speaker A: In this video, I'm going to cover the latest release of Rust, which includes three exciting updates, a major improvement to compile time errors, unlimited const evaluation time, and newly added lengths. With that said, let's get rusty. The first update in this release is a major improvement to error messages. To showcase this feature, let's go over a confusing compile time error most rust beginners encounter. Say we have a struct we want to serialize to JSON, so we import the Serte crate and derive the serialized trait. Like the documentation instructs. This results in an error saying could not find serialize in Serda.
00:00:33.906 - 00:01:14.954, Speaker A: With no other helpful hints, why are we getting this error? We simply follow the documentation well. With the latest release of Rust, this error message is updated with a helpful hint saying that serialize is in fact defined within the Serde crate, but it's behind the serde derived feature flag. This feature is disabled by default. Previous versions of Rust were unable to give you a helpful hint because the compiler ignored all code behind disabled configuration flags. But as of this release, the compiler will analyze code behind disabled feature flags to give you helpful hints and make debugging a whole lot easier. The second major update in this release is unlimited const evaluation time. In this example, we're simulating a constant expression that takes a very long time to run.
00:01:14.954 - 00:01:56.224, Speaker A: If we try to compile the code, Rust gives us a compile time error stating that the constant evaluation is taking a long time to run to prevent compile time. Infinite loops Rust limits the maximum number of statements that can run as part of a constant evaluation. However, this prevents some legitimate use cases for very long running const expressions. As of this release, you can enable unlimited const evaluation time by allowing the long running const eval lint. Note that the compiler will still emit a warning if the constant expression has been running for a while. The third major update in this release is newly added lints to rust C lints check your code for style inconsistencies, bugs, and vulnerabilities. Rust has two sets of lints.
00:01:56.224 - 00:02:36.644, Speaker A: The rust compiler, or Rust C, has built in lints focused on catching fundamental safety and correctness issues. The goal is to provide as much value as possible with minimal compile time overhead. These lints are enabled by default and automatically run whenever you compile a rust program. Rust also provides a tool called Clippy, which offers an extended set of lints that go beyond Rust C targeting code efficiency, idiomatic usage, and more. Clippy is opt in and provides fine grain control over linting rules in this release. Several clippy lints have been pulled into Rust C, meaning you get more code checks by default. If you want to learn more about this release, I'll leave a link to the official blog post in the description.
00:02:36.644 - 00:02:39.300, Speaker A: Hope you've enjoyed this video and remember to stay rusty.
