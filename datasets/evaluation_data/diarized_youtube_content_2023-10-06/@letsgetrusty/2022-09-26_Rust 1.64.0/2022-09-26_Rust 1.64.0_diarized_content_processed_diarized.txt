00:00:00.600 - 00:00:46.391, Speaker A: Recently, a new version of Rust was released, version 1.64.0. Let's go over the exciting changes in this release, but before we get started, if you haven't already, make sure to get your free Rust cheat sheet by heading over to LetsGetRusty.com cheatsheet in this release, the Into Future trait has been stabilized, which makes the await keyword much more flexible. Into Future is similar to Into Iterator. Into Iterator allows us to use for in loops on any type that can be turned into an Iterator by implementing the Into Iterator trait. On the other hand, Into Future allows us to await any type that can be converted into a future by implementing the Into Future trait. Let's see how this can help us make APIs more user friendly.
00:00:46.391 - 00:01:26.605, Speaker A: In this example we have a struct called Storage Request, which allows us to construct requests to some storage provider over the network. Storage Request has two methods setdebug, which decides if debug mode mode should be enabled, and send, which sends the request and returns the response. Notice that send is an async method. To use Storage Request, we would first construct a new instance by calling new, configure any options, call send and await the returned future. We can improve this API by using the Into Future trait to combine steps three and four. To accomplish this, we'll implement into Future for Storage request. First we'll import pin future and into future.
00:01:26.605 - 00:02:25.409, Speaker A: Into Future requires having a named future we can return, which we'll create using a type alias. Then we can implement into future for Storage request. Inside the intofuture method, we will simply return the result of calling self send. As you can see, this requires more code to implement, but results in a simpler API for callers. Note that the Rust Async Working Group is working on simplifying creating named futures, which you can learn more about by reading the official blog post linked in the description of this video as of this release, all C type aliases such as cu, int and culong are provided in the core FFI module. Previously, these type aliases were only available in the standard library, which meant code written for embedded targets could not use them. In addition, the CSTR type used for working with C strings is available in the core FFI module, and the CSTRING type used for working with own C strings is available in the Alloc crate.
00:02:25.409 - 00:03:20.529, Speaker A: Rust Analyzer is now available as a Rust up componen. This makes it easier to download and use Rust Analyzer on more platforms. Rust Analyzer can be installed with Rust up component Add Rust Analyzer and it can be ran with Rust up. Run Stable Rust Analyzer the next release of Rust up will provide a built in proxy so that running the executable Rust Analyzer will launch the appropriate version in this release. We also get some nice Cargo improvements with workspace inheritance and multi target builds. You can now avoid duplication of common field values between crates such as version Number, authors, repository URLs or Rust version by specifying those values underneath the Workspace package section in the workspace root cargo toml file. Then inside the cargo toml file of the workspace members, you can inherit those values by setting workspace to true.
00:03:20.529 - 00:04:05.015, Speaker A: Workspace members can also inherit dependencies in the workspace root cargo toml file. You can list dependencies under the Workspace Dependencies section. Note that these dependencies cannot be optional and any features declared are additive. Then inside the cargo automl file of workspace members, you can inherit those dependencies by setting workspace to true. Additionally, you can now build for multiple targets at once by passing multiple target options to Cargo Build. You can also set Build target to an array of multiple targets in the cargo configuration file to build for multiple targets by default. Before you go, if you haven't already, make sure to get your free Rust cheat sheet by heading over to letsgetrusty.com
00:04:05.015 - 00:04:15.755, Speaker A: cheatsheet also, if you enjoyed this video, make sure to hit the like button and subscribe to the channel for more Rust content just like this. With that, I'll see you in the next one.
