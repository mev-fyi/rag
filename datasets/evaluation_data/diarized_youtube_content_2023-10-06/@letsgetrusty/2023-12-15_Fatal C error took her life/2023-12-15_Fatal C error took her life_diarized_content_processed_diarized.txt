00:00:00.520 - 00:00:53.655, Speaker A: On September 20, 2007, Jean Bookout was driving down Highway 69 in Oklahoma with her best friend, Barbara Schwartz, in the passenger seat. As Jean hit the brakes to slow down and exit the highway, her car did the opposite and started to accelerate. Panic ensued, and only moments later, Gene's 2005 Toyota Camry slammed into an embankment, leaving Gene and her best friend with severe injuries, injuries Gene's best friend would not survive. This was just one out of thousands of publicly reported incidents caused by sudden unintended acceleration from 1999 to 2011. And all these incidents had one thing in common. They were being covered up by the world's largest car manufacturer, Toyota. Losing control of your car is terrifying, especially when you have loved ones in the passenger seat.
00:00:53.655 - 00:01:41.641, Speaker A: Sudden unintended acceleration is the unintended, unexpected and uncontrolled acceleration of a vehicle, often accompanied by the loss of braking power. And it could happen for various reasons. The driver may accidentally press the accelerator pedal instead of the brakes. The accelerator pedal may get stuck, or a short circuit may send incorrect signals to the engine, causing the vehicle to accelerate unexpectedly. Or, as experts found in Gene's case, it could be the direct result of software defects. In the early 2000s, the National Highway Traffic Safety Administration noticed a drastic increase in unintended acceleration reports involving Toyota vehicles. This led to multiple federal agency investigations, which resulted in numerous recalls.
00:01:41.641 - 00:02:16.497, Speaker A: In 2007, Toyota recalled 55,000 cars, stating that the driver's side floor mat could slide underneath the accelerator pedal, preventing it from returning to its idle position. Despite the recall, reports of unintended acceleration continued. And after an especially horrific incident in 2009, the floor map recall was widened to include 3.8 million vehicles. But the issue persisted. In 2010, there was a massive spike in unintended acceleration reports, causing yet another recall of 2.3 million vehicles.
00:02:16.497 - 00:03:08.783, Speaker A: This time, the recall was to fix a sticky pedal issue, which caused the accelerator pedal to get stuck in the down position. As incidents continued to resurface after multiple recalls, many consumers and experts suspected something other than simple hardware issues was involved in these accidents. The public was outraged, and a massive class action lawsuit followed. During the lawsuit, the National Highway Traffic Safety Administration called on a group of engineers from NASA to investigate possible alternative causes to to sudden, unexpected acceleration. One potential cause they looked at critically was software defects. Unfortunately, due to time and budget constraints, NASA was only given 10 months to investigate. And although they didn't know it at the time, Toyota provided incorrect and incomplete information about the hardware and software in their cars.
00:03:08.783 - 00:04:04.375, Speaker A: Ultimately, NASA was unable to conclusively prove that software caused sudden unexpected acceleration. Even though they didn't rule it out completely in 2012, the lawsuit ended with Toyota settling for $1.6 billion while denying all claims of wrongdoing. This decade long fiasco seemed to be coming to an anticlimactic end with Toyota quietly settling lawsuits worldwide. Floor mats, sticky pedals and human error were to blame, with software being ruled out completely until Jean's trial In November of 2013, Jean Bookout walked into an Oklahoma City courtroom to finally get justice for her tragic accident back in 2007. But unlike the hundreds of other lawsuits filed against Toyota, Jean came prepared with something no one else had. Two embedded systems experts, Michael Barr and Phil Koopman.
00:04:04.375 - 00:04:50.353, Speaker A: Jean's car was not part of the 6 million plus vehicles recalled for obstructive floor mats or sticky pedals. So Toyota couldn't blame the incident on a mechanical issue. Instead, Toyota blamed human error, claiming that Gene mistakenly hit the accelerator pedal instead of the brakes. But there was a flaw in this explanation. Jean's car left a 150 foot skid mark prior to impact, indicating that she did in fact hit the brakes, attempting to slow down the vehicle. So if the cause wasn't a mechanical issue or or human error, what could it be? To solve this mystery, Gene's lawyers requested help from two embedded systems experts. And after a thorough investigation, they found that the actual cause of the accident was a software issue.
00:04:50.353 - 00:05:38.951, Speaker A: Most people would expect that pressing down on the accelerator pedal would mechanically open the throttle, allowing fuel and air into the engine, causing the car to accelerate. And this assumption would be correct up until 2001 when Toyota introduced the electronic throttle control system, or ETC for short. With an ETC installed, pressing the accelerator pedal would send electrical signals to the car's computer. The computer would then run software which decides the precise amount of fuel and air going into the engine, effectively controlling the car's speed. In Toyota's case, the software in question consisted of 500,000 lines of C code. 500,000 lines of C code. Having full control over a vehicle's acceleration should trigger alarm bells for anyone in the software industry.
00:05:38.951 - 00:06:30.929, Speaker A: However, proving that Toyota's ETC software was to blame for Gene's accident was far from easy. Toyota kept a tight lock on their source code, claiming it contained trade secrets and only allowing access under strict conditions. Luckily, Gene's team brought in seasoned experts to inspect the code. Michael Barr, a well respected embedded software specialist and author of several books on embedded programming, spent almost two years examining the ETCS source code in a tiny Cubicle supervised by security guards. In addition, Philip Koopman, an embedded systems expert and professor of computer engineering at Carnegie Mellon University, also examined the source code. The results following this investigation were were undeniable. Michael Barr testified that Toyota software was defective, containing bugs that could cause unintended acceleration.
00:06:30.929 - 00:07:19.551, Speaker A: And at the root of these defects was memory corruption. Software systems experience partial failures all the time. Think about your phone. When one app crashes, the other apps continue to work. Toyota's ETC software also had a set of apps called tasks which performed specific functions like like processing sensor inputs, managing engine speed, and interfacing with other vehicle systems. But unlike phone apps, these tasks were meant to always be running. After a thorough investigation, Michael Barr found a number of critical defects in Toyota's software, including buffer overflows, invalid pointer dereferencing, race conditions, and unsafe casting, all of which could cause memory corruption and lead to a task crash or task death, as Michael Barr called it.
00:07:19.551 - 00:08:30.693, Speaker A: When an app on your phone crashes, the crash is typically isolated from the rest of the system and your phone continues to work properly. But when a task death occurs in a piece of software that has full control over the throttle, the driver can lose complete control over the vehicle's acceleration, which lawyers argued was more than likely what happened in Gene's case. Based on this evidence, the jury was not only convinced that Toyota's ETC was defectively designed, but they were also convinced that Toyota was fully aware of these problems and deliberately chose to conceal them from the National Highway Traffic Safety Administration, the public and its customers. The jury found Toyota liable of reckless disregard for the public's safety, and the court awarded Jean and her best friend's family $1.5 million each. Before the jury decided on additional punitive damages, Toyota reached a settlement agreement with the plaintiffs for an undisclosed amount. Gene's case was the first court loss for Toyota in an unintended acceleration case, and it was also the first unintended acceleration case in which software defects were found to be the primary cause.
00:08:30.693 - 00:09:24.933, Speaker A: Building safety critical software using languages like C or C, which allow for catastrophic memory bugs, is extremely dangerous. Fortunately, with the invention of modern memory safe languages like Rust, safety critical software can be built in a much more robust manner. Rust enforces memory safety by checking code for safety violations at compile time. For example, attempting to access invalid memory in Rust would result in a compile time error. These compile time checks prevent memory corruption defects like buffer overflows and invalid pointer dereferencing defects that if prevented, could have saved Jean and her best friend from tragedy. Luckily, Industry experts are taking notice of this in a recent announcement. Ferrocene, a Rust tool chain designed for safety critical systems, now aligns with two globally recognized safety standards.
00:09:24.933 - 00:09:56.485, Speaker A: This means that Rust can now be used to develop safety critical software such as in automotive braking systems, airbag controls, and medical devices. This is a big deal for Rust, and I can't think of a better use case. Developing safety critical software with languages that are memory safe by design is going to be increasingly necessary as software continues to play a bigger role in our lives today. Software is no longer just a small part of a car's design, it's literally responsible for controlling the entire thing.
