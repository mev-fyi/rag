00:00:00.320 - 00:00:29.664, Speaker A: You may have noticed that rust binary sizes can get pretty big. Rust has great runtime performance, but we also want our binaries to be as small as possible. In today's video, we'll go over several ways to drastically reduce binary sizes, but if you haven't already, make sure to get your free rust cheat sheet by heading over to let'sgetrusty dot cheatsheet. With that, I'm going to let my fellow rust station Tommy explain how you can reduce binary sizes.
00:00:29.792 - 00:00:30.872, Speaker B: Thanks, Bogdan.
00:00:31.016 - 00:00:45.496, Speaker C: In the following example, we have a simple rust server using the axiom framework, the server is only 50 lines of code. If we compile the project, the resulting binary is a whopping 9.6 megabytes.
00:00:45.688 - 00:00:47.336, Speaker B: Let's see what steps we can take.
00:00:47.368 - 00:01:10.700, Speaker C: To reduce the binary size. The first and most obvious step is to build a project in release mode. By default, Cargobuild uses debug mode, which optimizes for ease of debugging. However, this results in a large binary size. Rebuilding the project in release mode takes the binary down to 1.9 megabytes. That's an 80% decrease in size.
00:01:10.700 - 00:01:14.648, Speaker C: The next step we can take is to strip symbols from the binary.
00:01:14.824 - 00:01:23.860, Speaker B: Cargo can be configured to automatically strip symbols by adding strip true to cargo toml underneath the profile release section.
00:01:24.310 - 00:01:59.872, Speaker C: With this change, the release binary is now 1.3 megabytes. Next, we'll tell cargo to optimize for binary size using the optimization level option. By default, cargo optimizes for runtime speed for release builds. To change this, we'll set op level to s, which tells cargo to optimize for binary size. Note that there are several optimization levels available, and the rust documentation recommends experimenting with different levels to find the right balance for your project. After changing the optimization level, the release binary is now 1.2
00:01:59.872 - 00:02:00.936, Speaker C: megabytes.
00:02:01.128 - 00:02:09.248, Speaker B: The next step we'll take is to enable link time optimization by setting LTO equal to true in cargo toml.
00:02:09.424 - 00:02:53.368, Speaker C: This instructs the linker to optimize at the link stage at the expense of longer linking time. After this change, the release binary is less than 1 mb in size. We've made a lot of progress. The final step we'll take is to set code gen units to one, which will prevent build time parallelization. This will maximize size reduction optimizations at the expense of longer compile times. With this change, our binary comes out to 848 kb. By building in release mode, stripping symbols, optimizing for binary size, enabling link time optimization, and setting code generation units to one, we were able to get our binary size down from 9.6
00:02:53.368 - 00:03:04.952, Speaker C: megabytes to 848 kb. That's over ten times smaller. If you want to reduce your binary size further, you can use the cargo bloat sub command.
00:03:05.136 - 00:03:21.344, Speaker B: First, install cargobloat and make sure symbols are included in the release build. Then compile your binary in release mode and run cargobloat release crates to get a list of the biggest dependencies in the release build.
00:03:21.512 - 00:03:35.780, Speaker C: Using this information, you can remove or replace dependencies that are taking up too much space. For more tips on minimizing rust binary sizes, check out the min sized rust GitHub repo. A link will be provided in the description of this video.
00:03:36.080 - 00:03:44.856, Speaker B: Last but not least, make sure to get your free rust cheat sheet by heading over to letsgetrusty.com cheatsheet.
00:03:45.008 - 00:03:47.000, Speaker C: With that said, ill see you in the next.
