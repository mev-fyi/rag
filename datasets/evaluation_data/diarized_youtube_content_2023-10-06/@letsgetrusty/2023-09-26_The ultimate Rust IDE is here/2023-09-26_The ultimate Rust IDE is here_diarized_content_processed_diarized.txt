00:00:00.440 - 00:01:00.745, Speaker A: Writing Rust just got a whole lot better Jetbrains, the company that's built some of the best ides in the world, including intellij, Clion and Pycharm, just released a brand new Rust IDE called Rust Rover. But how does it compare to editors like VSCode, other Jetbrain editors like Fleet, and the existing IntelliJ Rust plugin? Is Rust Rover really the ultimate Rust IDE? I'll answer all these questions in today's video, and at the end I'll give you a list of VS code extensions to simulate the same developer experience as Rust Rover without having to migrate. But first we need to Discuss what makes RustRover such a powerful IDE for Rust developers. RustRover is designed to give you an amazing developer experience right out of the box with no configuration required. Let me show you what I mean. When you launch rustrover and click New Project, you get this nice UI which allows you to decide whether you want to build a binary application, a library, a procedural macro, or even a webassembly library. We're going to pick binary for this example.
00:01:00.745 - 00:01:45.151, Speaker A: The editor UI itself is very clean and minimal while still being packed with features. You can run your code, set breakpoints and debug your code, view the project structure and even the module structure. It's also integrated with version control and has a built in terminal. Now these are all basic IDE features. Let's take a look at some of the very useful Rust specific integrations. Starting off with dependencies, rustrover integrates with Crates IO, which means you get really nice auto completion for dependencies. You also get auto completion for version numbers, useful quick actions like expanding the dependency specification and feature autocomplete, and finally you get a link that takes you directly to the crate's documentation.
00:01:45.151 - 00:02:43.291, Speaker A: When it comes to coding, rustrover has plenty of great features as well, like fixed suggestions, autocomplete for imports and function names, inlay hints, and even built in macro expansion. You also get useful refactoring capabilities like the ability to extract a piece of code out into a function. One feature I especially find useful are live templates. For example, I always forget the syntax for creating a test module. Well, in Rustrover I can simply type in tmod, press Enter and the test module will be created for me. And I could do the same thing with test functions. After you're done building your app, you can run it directly from the terminal and test it using tools directly in the ide.
00:02:43.291 - 00:03:39.416, Speaker A: For example, restrover contains an HTTP client that's built in, you can create requests using a simple text format and run them directly in the terminal. Rustrover also has a built in database client and docker integration. As you can see, rustrover provides an amazing developer experience right out of the box. But how does this stack up to other IDEs and editors? Is Rustrover really that much better? To figure that out, let's compare rustrover to three alternatives, the official Intellij Rust plugin, Fleet and VS Code. First, let's clarify some confusion. Didn't Jetbrains already release an IntelliJ Rust plugin? How is RustRover different from this open source tool? Well, this plugin actually served as the building block for RustRover. Going forward, the IntelliJ Rust plugin will no longer receive updates and the JetBrains team will invest their effort into RustRover.
00:03:39.416 - 00:04:20.157, Speaker A: RustRover's functionality will be available to other JetBrain IDEs like Clion by installing a plugin, but more on that later. That leaves us with Fleet and VS Code. VS Code is the second most widely used editor in the world, right behind its big brother Visual Studio. Fleet, on the other hand, is a lightweight code editor focused on performance and collaboration. It was built by Jetbrains to be a competitor to VS Code. Before diving into the differences between these editors, it's important to note the similarities. All three editors can run on Mac, Linux or Windows, have great performance, are easy to use, support all the major features you would expect from an editor or ide, and have a strong community.
00:04:20.157 - 00:05:10.307, Speaker A: Having said that, there are some major differences, especially in the context of Rust. When it comes to Rust support, Rust Rover is the clear winner. It has plenty of great Rust specific features that all work nicely together. Fleet has limited Rust support, using Rust Analyzer to give you a basic language server, and Visual Studio Code has great Rust support with the caveat that you have to install a few extensions now. One of the biggest downsides to Rust Rover is that after the preview period it will be a paid product, which means on top of not being able to make any money writing Rust, you actually have to pay money to write Rust. That being said, JetBrains make some of the best ides in the world and most of them are behind a paywall, so this is not really a surprise. Fleet, on the other hand, is free for non commercial use but paid for commercial development, and VS Code is completely free when it comes to maturity.
00:05:10.307 - 00:05:59.831, Speaker A: Both Rust Rover and Fleet are currently in preview mode while VS Code is stable and battle tested. Another downside of Rust Rover is that it only supports Rust and Web technologies like JavaScript. But note that the functionality of Rustrover can be installed as a plugin in IntelliJ Idea ultimate, and right now it's also possible to install the functionality of Rustrover as a plugin in Clion. However, the JetBrains team has yet to determine whether the plugin for Clion will be supported in the future. Lastly, both rustrover and vscode have great support for extensibility with plugins and extensions, while Fleet does not currently support plugins. Having considered all these factors, we can see that VS Code is still the best editor for most Rust developers at this point in time. But unlike Rust Rover, VS code does not include a great Rust developer experience right out of the box.
00:05:59.831 - 00:06:37.367, Speaker A: To get a similar experience to rustrover, you have to install a few key extensions. The Rust Analyzer extension will give you a Rust language server that provides features like inlay, hints, code completion, and more Code. LLDB will give you the ability to debug your Rust code. Even better, toml provides support for the TOML language, which is used to manage dependencies, and the Crates extension lets you see the latest version of Crates in your Cargo TOML file. With these VS Code extensions installed, you're all set up to write Rust applications. That's it for this video. Let me know in the comments section below what you think of Rust Rover and if you would consider using it for your Rust projects.
00:06:37.367 - 00:06:43.055, Speaker A: Don't forget to leave a like and subscribe for more Rust content. Hope you've enjoyed the video and remember to stay rusty.
