00:00:09.720 - 00:00:24.725, Speaker A: All right, welcome, welcome, guys. Welcome to the first ever let's Get Rusty live stream. Let me see some crabs in the chat. Good to see you guys. The Rusty Bits. Hello. Hello.
00:00:24.725 - 00:00:27.139, Speaker A: Sergi. Hello.
00:00:27.187 - 00:00:27.531, Speaker B: Hello.
00:00:27.603 - 00:01:03.481, Speaker A: James. Awesome. Cal, Nice to see you. All right, guys, so again, welcome first ever let's Get Rusty live stream. And yeah, I wanted to do this because there's some very exciting news happening in the Rust space, which is that Jetbrains, if you guys don't already know, is officially about to release their Rust flagship IDE Rust Rover. But not only that, they have. They're doing something extremely special that they haven't done before for release.
00:01:03.481 - 00:01:20.855, Speaker A: And that's exactly why I wanted to have them on this call and share the news with you guys in detail. So with that said, I have actually have the team behind Russ Rover with me and let me introduce you to them. Welcome. Welcome guys.
00:01:21.555 - 00:01:22.695, Speaker C: Hi, everybody.
00:01:23.235 - 00:01:23.811, Speaker D: Hi.
00:01:23.923 - 00:01:24.575, Speaker B: Hey.
00:01:25.555 - 00:01:28.627, Speaker A: All right. Kirill, can you introduce yourself and the other guests here?
00:01:28.771 - 00:01:36.735, Speaker B: Yeah, I can start. Hi, my name is Kirill. I'm product manager and team lead at Rust level Team and we are happy to be here.
00:01:38.075 - 00:01:42.015, Speaker D: Hi, I'm Vitali. I'm a developer advocate for rustroller.
00:01:44.045 - 00:01:56.385, Speaker C: Hi folks, my name is Khalid. I'm actually a. Net developer advocate, but I moonlight as a Rust developer advocate as well. Thank you to Vitaly and Kiril for inviting me to this event.
00:01:57.285 - 00:02:01.505, Speaker A: Happy to have you guys. Khalid, we're going to convert you slowly but surely.
00:02:03.125 - 00:02:04.105, Speaker C: I'm ready.
00:02:04.965 - 00:02:13.294, Speaker A: There's some very exciting news happening with Russ Rover, which is a Rust ide. Kirill, can you give us some more details about this release?
00:02:13.714 - 00:02:37.465, Speaker B: Yeah, sure. So, first of all, I'm happy to share that today, after nearly eight months of being in public preview, Rust Oil is becoming officially commercially available. We've been working pretty hard to work on the product during this public preview. And today we believe we are ready to mark as a first stable release.
00:02:40.325 - 00:02:47.677, Speaker A: Okay, cool. So if I heard you correctly, today Rust Rover is having its first stable release. Is that right?
00:02:47.861 - 00:02:49.985, Speaker B: Yeah, yeah, it's right.
00:02:52.005 - 00:03:03.545, Speaker A: Excellent. Yeah. That's amazing news. I remember when I first tried Rust Rover, it was a great experience. So tell me, what's the significance of Rust Rover going from preview to now being released?
00:03:03.925 - 00:03:28.905, Speaker B: Yeah, like as some of you may probably know, during public review, we've been releasing the product pretty frequently, almost bi weekly, and we for sure will continue doing so. But by doing a commercial release, we're showing our long term commitment to the Rust idea by Jetbrains kind of thing. So we are only Starting.
00:03:32.095 - 00:03:49.795, Speaker A: Awesome. Awesome. And so that, that sounds great. Russell is going to be released. I've already seen in the chat here and I know I have this question as well. What is the licensing gonna cost this Jetbrain? I know that Jetbrains editors are paid products, right?
00:03:50.375 - 00:04:37.027, Speaker B: Yeah, usually JetBrains products are paid and Rust Rover is being an intro J based IDE which we usually offer at paid commercial products sold on subscription basis. So such an approach, well actually allows us to be more sustainable both as a team and as a company. But however, like let's step back here for a while. So let's have a look at Rust market. So it's really vibrant, it's emerging right now and rapidly growing. So a lot of really exciting things happening here. People are, you know, learning, trying to use it in pet projects, all kind of personal utilities and you know, even beyond.
00:04:37.027 - 00:05:30.063, Speaker B: So that said, naturally, currently it seems most of Rust development is done, you know, outside of your usual day job kind of thing. And I mean it's all right. It's a very natural state of programming language which community probably should go through to ensure wide language adoption in the future. And we actually would really love to support that if we can. So that said, we are like really happy to announce right now. So for any non commercial usage, the same raster will be available for free and the same roster will be available as a paid product for any commercial usage. So we really excited and for language id Rust Rover, we've never done it before so I don't know.
00:05:30.063 - 00:05:30.915, Speaker B: Let's go.
00:05:31.655 - 00:05:50.161, Speaker A: So just to confirm, because this is huge news, I just want to make sure the chat understands. So just to confirm I can download the fully featured version of Rust Rover that's going to be released, the stable version for free and use it for things like personal side projects, open source projects. Completely free, right?
00:05:50.273 - 00:05:58.165, Speaker B: Yeah, that's right. So the same Rust Rover, if you are using it for non commercial purposes, it's free for you.
00:05:59.025 - 00:06:14.177, Speaker A: Okay, that is amazing. Yeah, I mean that was probably like for me personally the only thing that would be a concern otherwise. It's such a great editor. So I love that you guys are doing this. And then like you said there's going to be some sort of commercial license, right?
00:06:14.361 - 00:07:08.767, Speaker B: Yeah. While for making non commercial usage S3 we believe we lowering the barrier to using our ID and we believe we will help a bit with Rust adoption. We also recognize commercial usages and here let's talk about pricing for commercial usage. So first of all it's going to be paid, so no Surprises here, here. I would like first to comment on our recent decisions on removing database functionality and some web technologies which some of you may familiar with. So here's the thing. Like we did it and we did it because based on our anonymous usage data statistics, we see that rastriver users, like only tiny fraction of them are benefiting from advanced database support and web technologies.
00:07:08.767 - 00:07:48.695, Speaker B: So what we decided, we decided to remove them and make it available as a paid plugins for those who need it. Database is already available web technologies? Not yet. We will listen to the community, to the feedback and see whether it will make sense for us to provide additional support. And this whole thing allowed us to actually reduce the base price of RustRiver commercial version for majority of our users which is going to be â‚¬129 per year. So that's actually the cheapest jibrancity at the moment. So let's congratulate us.
00:07:49.115 - 00:08:02.993, Speaker A: Okay. Awesome, awesome. And again it's for free for open source stuff, side projects. So everyone on this live call could use it. And which brings me, you know, to the question, when is this live? When can we get our hands on it?
00:08:03.129 - 00:08:15.765, Speaker B: We expect a stable release of Roster to be widely available in toolbox, which I personally prefer on website and on snapcraft shortly after this live stream.
00:08:16.425 - 00:08:17.809, Speaker A: Okay, right after this live stream.
00:08:17.857 - 00:08:20.845, Speaker B: Perfect. Yeah, I hope today like in an hour or so.
00:08:21.395 - 00:08:27.135, Speaker A: Okay. And Kirill, I know you guys have all of you have been working on this super hard. Do you have any particular favorite feature?
00:08:30.155 - 00:09:17.673, Speaker B: I'd be kind of biased because it's part of my job to come up with those features, to be honest. But I really love when IDE just gets you try to understand what you are doing and help you removing all kind of small hiccups here and there. So I'm personally a big fan of small things. For instance, like we automatically insert, I don't know, unwrap call or iter call during completion session even when you didn't wrote it intentionally. So that seems like kind of small, you know. But if you have tons of such features you like, in my opinion, getting rid of actually tons of small amount of fatigue here and there. And actually, you know, it's our motto, focus on what matters.
00:09:17.673 - 00:09:20.245, Speaker B: We're trying to help you out there.
00:09:20.905 - 00:09:42.815, Speaker A: Yeah, I completely agree. That's like when I think of editors, the first thing I think of is how is this tool going to help speed up my workflow, make my life easier. And I'm sure you guys have plenty of features to share and I believe Vitali, you had some features you wanted to share. So let me bring up your screen and then we can go through some demos.
00:09:44.075 - 00:10:25.023, Speaker D: Yeah, sure. Thank you. So, as Kirill said, our motto is focus on what matters. And actually I want to show what does it actually mean? Focus on what matters. So when you write code, you usually have your idea, something that you want to accomplish with Rust in rustrova and then you write your code. But then in many cases you have to switch to something boring. Like for example, you need to add a dependency, you need to fix some error in your code, but that's something that does not help.
00:10:25.023 - 00:11:24.449, Speaker D: And Rostrova in many of those cases is able to solve that problem for you. So that just you just really focus on what matter. So I will show you one way of using rustrover, which I personally prefer, and to show what features, we have to have this smooth experience of writing your code with rustroa. So first I have this screen here and I will move to so called presentation mode. And this is just one of the features and if you are careful enough, you will see those shortcuts on my screen if you want to repeat something like that. So presentation mode gives real focus to us. We have this string, for example, we want to make it format string parameter.
00:11:24.449 - 00:12:09.273, Speaker D: Okay, so let's remove this line here and then I will use what is known as altenta oriented development or common option return in macOS. So we don't write Rust code. We use those actions to get something for us. Like for example here we can add format string argument and that argument is going to be going to be that string like this one. So not too much coding, but just several shortcuts to get the job done. Now so we have this string literal. Maybe we want to make it a variable.
00:12:09.273 - 00:12:56.929, Speaker D: Of course it's very easy to do with some another shortcut. So that is going to be some name, for example, maybe so we want to write command line application. So we don't that name, don't have that name hard coded. So we want to have like some structure for arguments, for example. So we write some structure here and then we define variable with that structure, something like that. And then just complete this line. Now so this name is supposed to be part of that structure.
00:12:56.929 - 00:13:32.721, Speaker D: Let's try to do that. So it's not just name, it's args name. But of course at this time there is no such field in that structure. Well, we can fix that. So we can just ask Strova to add this field to the type. So you see, you need this field right here. So instead of going to the structure and add it by yourself, and this is kind of boring stuff, you can ask Rustrova to do that for you so we can add it.
00:13:32.721 - 00:14:05.427, Speaker D: And now it's right there. I just write type. And here we are. But we are not right there yet, because now when we initialize that structure, we need to fix. We need to add the value for that field here. So it's missing field. But instead of going there using mouse or maybe like going down several lines, we can press another shortcut to go to the next highlighted error.
00:14:05.427 - 00:14:28.975, Speaker D: So that's something that we have in Rastrova to make it easier for you to navigate. So if you add something, then you need to fix here. So you can go right there. So once again, add missing field. Here we are. And now we got this right here. Okay, so now we don't need this variable anymore.
00:14:28.975 - 00:14:36.625, Speaker D: So it just not typing your code, but using Rustrover to get the boring stuff for you.
00:14:37.205 - 00:14:39.185, Speaker A: It's the little things in life, right?
00:14:39.885 - 00:14:50.709, Speaker D: Of course they're little things, but there are so many of them. So if you know how to use that, you write your code really like very fast pace.
00:14:50.837 - 00:14:52.781, Speaker A: So that's blazingly fast, right?
00:14:52.973 - 00:15:37.357, Speaker D: Yeah, that's true, that's true. Now, if we are developing command line application, then of course we need to use clap library, like everyone uses clap these days. So we need to derive something for this structure. And instead of writing that derive clause, we just go to the structure and ask Rastrova to do that for us. So let's derive it here, like no more typing. And then I know that I need to use something like parser to derive my command line arguments and all that stuff. And if you look closely here, you see it's red, partly red.
00:15:37.357 - 00:16:14.995, Speaker D: That means that we don't have this dependency. So it's a clean project, no dependencies here. But if you want to use this, then Rostrova can actually add a dependency for you. So let's do it right there. And then we are updating crates and at this point, for example, we can look at our kagatoml file. Here we are. So this dependency was just added for you, but you don't have to go there, just write parser and that's it.
00:16:14.995 - 00:16:56.605, Speaker D: Now, while we are here, so this name argument must be a common. Well, it could have a default name, for example, so we can add something like this. And Rostrova knows that if you are using clap, then there will be this default value in arc Macro, so it's there, so it's autocompleted. And of course we can add that value here. All right. And so yeah, that's it. So you don't have to remember all that stuff because it's already there.
00:16:56.605 - 00:17:29.209, Speaker D: Like one other feature which I like one of beautiful features. So suppose you need to do something with random numbers here. And I never remember how to write that code for random numbers. So I've prepared some scratch file here just to make it easier. So something like that. So suppose you find this line of code somewhere on Stack Overflow, for example. I'm old school guy, I go to Stack Overflow.
00:17:29.209 - 00:18:03.663, Speaker D: Instead of asking AI to generate that stuff for me, I just copied and then let me paste it right here. And at this very moment Rostrova actually knows what we are up to. So this random generation comes from the Rand crate. So we can add it to Rostrova. And Rostrova actually suggests to add this dependency. Well, let's add it. And now once again we download crates.
00:18:03.663 - 00:18:26.605, Speaker D: We do all the necessary stuff at this time so we can look at kagatoml. And now we have two dependencies here. Okay, so it's already there. One more problem. Something is red. And if something is red, then that means that we can maybe fix it somehow. Yeah, now I'll need to import that because it's not important.
00:18:26.605 - 00:18:49.753, Speaker D: And now we are good to go. So we do things quickly. So that's, that's the basic idea. So that's, that's why we say like you can focus on what matters, you don't have to focus on adding dependencies. Right. Some suggestion that I don't need here. Yeah.
00:18:49.753 - 00:19:24.397, Speaker D: Now, for example, we know that many developers come to Rust from other programming languages, like for example, from Python, from JavaScript. We have a lot of features which were designed specifically for them. Like we have this num variable, for example. Let me write something like this. Like suppose I come from, let's say, C background or somewhere else. So we have some problem. Okay, let's look.
00:19:24.397 - 00:19:59.835, Speaker D: What's the problem? Well, we need semicolon, of course. Okay. Rust has no postfix increment operator and I've completely forgotten about it because I come from C, you know. So Rostrova suggests us to fix it with what we should Write in Rust plus equals 1. Now we have another problem, which is I think it should be mutable. Yeah, of course it should be mutable. So let's fix it.
00:19:59.835 - 00:20:36.545, Speaker D: So if you come from other programming language and you use that plus plus and in Rust there is no something like that. Then Rustrova can help you. Or one more example, like let's have a vector vector with numbers, something like this. And in some programming languages it's possible to write something like this. So you add new element to the end of this vector. Well, we have some problem. So first we need to make it mutable.
00:20:36.545 - 00:20:53.875, Speaker D: And second, there is no such operation for vectors in Rust. So in that case we need to. So what. What's. What is suggested here. Okay, wait. Okay, so something.
00:20:53.875 - 00:21:06.939, Speaker D: Something is wrong. Okay, so yeah, we don't have that. All right, it doesn't work. So let me command live demos.
00:21:07.067 - 00:21:09.091, Speaker A: Live demos. It's always hard.
00:21:09.203 - 00:21:15.467, Speaker D: It always happens. Unfortunately, it always happens. Yeah, so that's. Demagogues are not happy with live demo.
00:21:15.491 - 00:21:23.415, Speaker A: But basically, if you're coming from less cultured languages, Rust Rover is going to help you out. Adapt to the Rust syntax.
00:21:23.915 - 00:21:43.137, Speaker D: Yeah, sure. So, something else. We have this vector V here. And let's suppose we want to print all the elements. So for printing elements we can use foreach. But look, in vectors there is no any foreach. But we have this feature.
00:21:43.137 - 00:22:05.735, Speaker D: We can add iter for you. You start writing foreach, you add iter and then just two methods are added right here so you can write your code faster. Once again, my favorite feature. Yeah. By the way, I see what was my mistake. I'm sorry. So I had to write vector here, so it should be vector.
00:22:05.735 - 00:22:30.663, Speaker D: So Rastrova actually is much smarter than me in this case. So let's. Let's try it again. We need to write it once again, right? So it's a vector. And in vector, you vector, you can actually extend it with some new element. And now we have this suggestion, nice suggestion. To replace this plus equals with push.
00:22:30.663 - 00:22:49.991, Speaker D: And now it works. So I am not that smart. I just forgot that for arrays you don't have this operation. So I try to extend it. But Rastrova knows that if it's a vector, then you can do it right there. So that's an idea. One more thing, if you.
00:22:49.991 - 00:23:31.995, Speaker D: If you let me like we can use something which is called life template. So if you want to write for loop, you just use this completion for four and here's what you get. Like some chord is inserted with several points of extension. For example, you want to go over this vector V. Then I press enter and then variable, one particular variable. Let's make it like N. And now we have this loop for elements of this vector.
00:23:31.995 - 00:24:01.855, Speaker D: Like one of my favorite live Templates. Ppd. PPD means like debug print right there. So for example, I want to print this like N variable and look how it works when I am writing, typing. And here it's also right there, so I don't have to repeat it. So that's how live templates work. They help you to write your code faster.
00:24:02.155 - 00:24:05.851, Speaker A: And can we create our own live templates or is it just the built in?
00:24:06.043 - 00:24:46.375, Speaker D: Of course, of course it's possible to create your own live templates. There is a collection of them, like we have several prepared. But if you have some code that you write very often with all those nice features, when you go from one entry point to another entry point, of course you can use all that stuff. Yeah, so, but I should, I should say one, one more thing here. So Rostrova is always like all our IDs, they are all work in progress. We always work on new features. We try to implement something else which you'll benefit later in new versions.
00:24:46.375 - 00:25:36.545, Speaker D: So like for example, one of main focuses for us right now in implementing Rustrova is to enhance your experience with macros. So for example, I have this couple of macro definitions here. And if you are going from like, if you have real Rust background, you know that macro stuff, it's quite complicated. So one of our goals right now is to make it easier to write macro definitions. So here, if you write some code right here, we have all the same features, like all those live templates. So everything just work right here. And then you can also do the same stuff as anywhere else.
00:25:36.545 - 00:25:52.945, Speaker D: And although those macro definitions, they are compiled, they are recompiled, there is the whole procedure on how we work with them. Still it's possible to write your code as if it's just regular Rust code. So maybe that's it from me. Thank you.
00:25:53.805 - 00:26:02.453, Speaker A: Yeah, great features. Thank you for sharing, Vitaly. And then I'm sure you guys have some more in store. Khalid, did you have something else you wanted to share?
00:26:02.629 - 00:26:28.341, Speaker C: Yeah, I'd love to show you some features. First, I got to say, the chat is really smart. They're picking out like they were helping Vitaly. So yeah, they're definitely watching let's Get Rusty videos and learning more about Rust. So thanks Bogdan for all that. So, yeah, like Vitaly has hinted, there are people learning, learning Rust right now. There are a lot of great resources.
00:26:28.341 - 00:27:07.655, Speaker C: The community is great. And he's hinted that Rust Rover can help you learn more about Rust. That's what I've been doing. My background is predominantly in C Sharp And Net Rust is really a new foray for me. Here are some of my favorite features that I've learned during the process of engaging with Rust and using Rust Rover. First of all, like mentioned previously, this is based on the IntelliJ platform. So coming from any other IntelliJ based IDE, it's very, very familiar.
00:27:07.655 - 00:27:46.675, Speaker C: The first thing you're going to run into is probably the Solution Explorer or the Project Explorer over here. And you can see kind of your Rust projects structure here. So any unique folders like Source Target Benches, T test, they will be highlighted. You can also see any external libraries that are actually part of your Rust project. So that's pretty awesome as well. So check that out again. If you're coming from any other IDE in the JetBrains family, this should be very, very familiar to you.
00:27:46.675 - 00:28:26.901, Speaker C: The unique tool window for Rust Rover is the Cargo tool window. Here you can see all the targets that are found within your current project. So you can kind of execute them whenever you need to. You can also refresh any of the cargo projects, add them, remove them. Another thing, you can run any cargo command, which is really nice. So by clicking that button, you'll get the Run anything window here and you can kind of see all of the cargo commands. You don't have to sit there, write them down on a notepad, or remember them.
00:28:26.901 - 00:28:31.085, Speaker C: We just have them all here with some really helpful documentation. So I think that's.
00:28:31.125 - 00:28:33.269, Speaker A: I'm just supposed to throw away my notepads now.
00:28:33.397 - 00:28:45.875, Speaker C: Oh, duh. Yeah, just in the trash. Just right there. Just be sure to recycle. You want to. You want to be, you know, environmentally conscious. So there's that.
00:28:45.875 - 00:29:26.615, Speaker C: You can run any external linter by clicking this. So right now I think I'm running Cargo check, but you can also switch over to Clippy if that's something you want to use instead of Cargo check. So if I click this, I can choose Clippy here. And for folks running on those monster development environments with like 30,000 cores and memory, you can always run these things on the fly. You don't need that much, but if you have the resources, use them. Turn on external linting on the fly and you'll get all of those lint rules showing in the ide. That's pretty cool.
00:29:26.615 - 00:29:45.515, Speaker C: You can also format your code. Again, I'm learning Rust. Maybe my code's not very idiomatic. Maybe it's looking a little messy. I might want to run Rust format here and clean up my code. So, yeah, that's the cargo tool window. Pretty cool, right? Bogdan?
00:29:46.935 - 00:29:47.719, Speaker A: I love it.
00:29:47.807 - 00:30:01.435, Speaker C: Yeah. All right, Awesome. I love it too. Yeah, the Rust Rover team is killing it with this stuff. So again, I'm learning rust. I'm enjoying it. I think folks getting into the Rust community are also going to enjoy it.
00:30:01.435 - 00:30:37.855, Speaker C: Vitaly hinted last time, like when he was doing his demo, he kind of talked about dependencies. And if you're getting into Rust, you're probably going to end up spending a lot of time in Cargo toml. You're going to be setting up your Rust package. I have really fat fingers. It's not good, but I can get around. But sometimes I'll mistype something and since this is a TOML file, we have full support and we'll highlight things like misspellings. And right here you can see.
00:30:37.855 - 00:31:15.185, Speaker C: Oh, I have an error in my Cargo toml again. You don't want to remember all this stuff right off the top of your head. So hitting control space, you'll get code completion as well, which is really, really nice. Vitaly mentioned dependencies in your dependency section. You'll notice this little crate over here. If you highlight over it, you'll see that clicking on it will open the documentation for that particular crate. I think the Rust community has been exemplar in terms of writing documentation and teaching each other what they're doing and how to do it.
00:31:15.185 - 00:31:55.727, Speaker C: Having access to the documentation right here is really an awesome feature. Another thing, sometimes you'll set a dependency using this syntax, but you can also do it by version number. If you don't want the version number, you want to expand it, you can always option or alt enter and then you can expand that dependency specification. And Bogdan, this is one of your favorite features. If you have features, you'll get code completion for the features that are supported in that crate.
00:31:55.831 - 00:31:56.727, Speaker A: Yes, I'm sold.
00:31:56.791 - 00:31:57.635, Speaker C: I'm sold.
00:31:58.245 - 00:32:00.109, Speaker A: This is my favorite feature so far.
00:32:00.237 - 00:32:13.925, Speaker C: Yeah, make your ch. Make your checks out to Kalid. No, no, I mean jetbrains. So there. There you go. So there's that. Another neat feature I found in Cargo toml.
00:32:13.925 - 00:33:01.365, Speaker C: When playing around, I noticed if your crate has a bunch of features defined, you can actually toggle them right in your Cargo toml. So if you want to test out your Rust project with or without a feature enabled, you can always go into the Cargo TOML and check those and try out those different scenarios and different combination of features and scenarios. So that is super cool. So yeah, that's the Cargo toml support. Check that out. That's really cool. And I guess the next thing Vitaly mentioned, he's an old school guy, he still likes finding code on the Internet, right? Come on, Vitaly.
00:33:01.365 - 00:33:42.395, Speaker C: Yeah. All right, cool. But as you folks who follow Jetbrains may know, we have an AI Assistant service. Just to be clear, it is a different subscription based product, but AI Assistant integration is in Rustrover. So once you sign up for that service, you will have access to our AI assistant here. And similar to other AI assistants, you can start in the chat, you can ask a question, you can tell it to look at code. But for me, chat is nice, kind of when I'm trying to learn stuff.
00:33:42.395 - 00:34:17.935, Speaker C: But AI Assistant is really helpful for me. For multiline code completion here, I'm in some Rust code. I've established a database connection to a SQLite database. But like Vitaly was saying, maybe the syntax isn't coming to me. I've taken the time here to write a clear comment about my intent and what I want to accomplish. And then when I hit enter, we'll call up to the AI assistant and we'll get some code completion. Hey, that looks pretty good.
00:34:17.935 - 00:35:01.841, Speaker C: I also know somewhat in Rust that we get an option back, so things may be okay or they might error. So for this test, I just want to make sure that I'm asserting that everything is okay. And that looks really good. So that's a feature of AI Assistant, multi line code completion. And the more code there is in a file, the better the code completion is going to be. So that's pretty cool. Another thing, in addition to watching let's Get Rusty videos and learning from those, sometimes I'll just find code and I want to maybe see what each line means and document it.
00:35:01.841 - 00:35:43.045, Speaker C: So I'll come here and let's use an AI action. Let's generate some code. So I've recently been watching one piece on Netflix. So I want a pirate to explain this code to me. So explain this code on each line like a pirate. And the nice thing about AI Assistant integration and all of our IDEs, including Rust Rover, is that you'll actually get a diff view here and you'll see the results starting to stream in. Should I do a pirate voice? I'm not sure.
00:35:43.045 - 00:36:04.545, Speaker C: I'll at least say Yarmetee. So you can see now that each line is commented as a pirate would writing Rust code. But Bogdan, just to show how this works, what are some of your other favorite characters in the fictional universes?
00:36:06.125 - 00:36:08.405, Speaker A: Yeah, let's go with Star Wars.
00:36:08.565 - 00:36:35.945, Speaker C: All right, Star Wars. So hopefully Disney's lawyers aren't watching. But if they are, this is just for fun. It's just for fun. You can always go and respecify your AI prompt. So no, I really wanted it documented like Yoda. And I won't make Bogdan do a Yoda impression, I promise, folks.
00:36:35.945 - 00:37:30.935, Speaker C: So you can see the hmms that Yoda is, you know, famous for here. So if you like this, you can accept all and then we will kind of inject that into, you know, the code base here and you can kind of go about it that way. So the nice thing about our AI assistant as well is we have a lot of prompts built in already. But if you find yourself finding a useful AI prompt that you're using across all of your solutions, you can always add that prompt and build your own kind of prompt libraries. So that's really, really powerful. I actually use it a lot to convert YouTube timestamps into HTML for blog posts. And that's been helpful.
00:37:30.935 - 00:38:10.755, Speaker C: But you know, use your imagination. There's, there's an infinite world of possibilities out there. The other thing that I really love about all of our products, especially in Rustrover, is bookmarks. So you can see here, there's these little yellow icons, this one's a number. We have the bookmarks tool window here on the left. And you can kind of jump between bookmarks really quickly. So for me as a learner, I put bookmarks in places and projects so that I can kind of go back and once I've kind of done my research, I can go back and really try to understand that line.
00:38:10.755 - 00:38:42.235, Speaker C: So you can set a bookmark at any point using a shortcut, you can remove it using the same shortcut. And you can also set mnemonic bookmarks. So here I have 1 and 3, and if I hit control 1, I'll jump to the first mnemonic. If I hit 3, I'll jump there. And then I can just kind of jump back and forth, which is really neat. So bookmarks use it people. It's really good, really good stuff.
00:38:42.235 - 00:39:25.135, Speaker C: And then the final thing, running tests in Rustrover. I've really been impressed by the Rust community's embrace of testing as kind of a first class citizen. Whether you're doing unit tests or integration testing, Rust Rover has a lot of capability to kind of help you execute those tests. So going back here for this really smart chat, they're really like really eagle eyed. They might have seen these little green icons here in the gutter. If you click it, you can run a test. We'll Build and then we'll execute that test.
00:39:25.135 - 00:40:16.077, Speaker C: Not really. Not really special code, but you can see here, we'll get there. Once the test is executed, you'll see the results in the run window for your tests. You can rerun that particular test, you can run only the failed tests, or you can turn on all tests to rerun automatically all the time, which is a really cool feature. Additionally, if you find a module that's full of tests, you can just run them all at the same time and then you'll see that. One thing I also want to say, if you're using logging or print lines in your tests, you'll actually see them in the output. But if you click, you will.
00:40:16.077 - 00:40:34.505, Speaker C: If you click a test, you will see that output as well in this preview window over here. So, yeah, that's it. Those are some of my favorite features in Rust Rover. But like Vitaly said, there's so many features in our IDEs, I think the best thing to do is really just download it and try it for yourself.
00:40:35.805 - 00:40:56.135, Speaker A: Cool. Thank you, Khalid. Yeah, you guys definitely took care to make a great user experience for Rust developers. I remember when I first downloaded Rust Rover, the main thing I liked is that everything is included. You just start up the IDE and all these features are ready to go. You don't need to mess with configurations or extensions. So great job guys.
00:40:56.135 - 00:41:14.335, Speaker A: Let's do a little Q and A. So chat, if you have any questions, write them down and then we can ask them live. But Kirill, maybe you're the best one to answer this question for myself, which is, I'm curious what was the most challenging part building Rust Rover?
00:41:16.555 - 00:41:55.957, Speaker B: So there are a couple of those. One which I would like to highlight is the following. Like, look when you are. There is a basic unwritten rule when you are making the ID for programming language, assume you have a file, in our case a Rust file. So the more you know about what's going on based on content of one file, the easier it is to make ID support. Like that's one thing. And in Rust, you know, we don't always know what will happen because of macros and similar thing.
00:41:55.957 - 00:42:10.905, Speaker B: So that's actually was pretty tricky to pull off. But we have a really like passionate technical team behind the product. So yeah, we overcoming this challenge successfully so far, I think.
00:42:12.245 - 00:42:21.585, Speaker A: Okay, cool. I see a question here from chat. What if we want to use local LLMs? Is that possible?
00:42:23.605 - 00:42:42.435, Speaker D: Actually, I can answer this. I think local LLMs, they are work in progress for us at Jetbrains, so we don't have them at this time, but they will. It will be definitely possible sometime later. So just stay tuned and everything like that will be there.
00:42:42.775 - 00:42:44.503, Speaker B: Yeah, we're working on those.
00:42:44.679 - 00:43:08.385, Speaker C: Yeah. I will also add we're working on a product called Full Line Code Completion which is also free at this point. So that uses local models for single line code completion. So I'm not sure. Can you install that in rustrover? Okay, we're working on it. Okay, good.
00:43:08.465 - 00:43:21.137, Speaker A: Got another interesting question here. This is a good one. So with the dependency inclusion like automatically being able to include dependencies, is that available for all crates or is it a subset? A well known subset. How does that work?
00:43:21.281 - 00:44:08.135, Speaker B: Well, there is a subset shortly, but you hardly will notice it because this subset is covering. We are not just picked it up randomly. So we just did the research what people actually do. So like the intention is that you did notice that this is a subset. So if you have any problems, not only actually with this feature, but any feature request or any problem with rustover, we have like really brilliant dedicated support team and we have our public issue tracker and we read all new requests. So when we respond on all of them. So feel free to reach out to us.
00:44:10.035 - 00:44:14.175, Speaker A: Okay, cool, great. Are you guys hiring?
00:44:15.515 - 00:44:27.875, Speaker B: We are hiring like not Rust developers because you know, Rust at the end of the day is GVM based application. But we are hiring like you can check out Jervrains Vacancy's website to learn more.
00:44:29.255 - 00:44:38.675, Speaker A: Okay, cool. And okay, given all that Kirill, can we finally announce how people can get their hands on this?
00:44:39.335 - 00:44:39.983, Speaker D: Sure.
00:44:40.119 - 00:44:53.925, Speaker B: Again, jarvoyance toolbox website, jervains.com rust, even snapcraft, it should be shortly available or I assume it mostly should be available right now.
00:44:55.065 - 00:45:08.289, Speaker A: Okay, perfect. And before I let you guys go, I'm curious, since you're here, what is the outlook, what is the Jetbrains outlook for Rust? You guys are obviously investing a lot of time and resources into it.
00:45:08.337 - 00:45:42.225, Speaker B: So I'm curious, to be honest, we're really excited here. I mean the community ecosystem is growing really fast. People are passionate and we are really happy to be part of this whole thing. And yeah, like eight months ago we were waiting all pros and cons when we were deciding whether to invest to full blown id right now it's obvious the choice was correct. So we are happy to continue.
00:45:43.795 - 00:45:56.655, Speaker A: Cool, cool. Happy to know that. I'm sure the audience is happy to know that as well. So before you guys go, I'll give you an opportunity to plug yourself any social media, any channels, the People should follow.
00:45:57.475 - 00:46:20.995, Speaker D: Yeah, let me mention something here. So by the way, there was a question about the Jetbrains Academy course on Rust. There is actually one. There is a Learn Rust course course right there. It is based on Rustling's collection of exercises. But you can write run it right inside Rustrova. So you get some text there, some explanations, some exercises.
00:46:20.995 - 00:46:41.595, Speaker D: And we have a nice thing to check those exercises. There is a button check an exercise. So just. Just look for Learn Rust from Jetbrains and there is that. That course there. But of course we would be happy if you follow us on X or Twitter. We have a Rustrova account there.
00:46:41.595 - 00:47:23.309, Speaker D: We also have blogs on our website. Rustrova blog features. Not only something like blogs about Trustrova but we also go more like we write more general content which is useful for the whole ecosystem. So just follow us, you can get notifications. And then we also have so called Rostrova live streams like once a month Approximately on JetBrains YouTube channel. We are speaking with nice folks from Rust community. So please just check for announcements.
00:47:23.309 - 00:47:38.105, Speaker D: Like for example we'll have one live stream with Will Crichton next week, next Tuesday. So just stay tuned. It will be very nice live stream I'm absolutely sure. So yeah, just follow us everywhere.
00:47:39.005 - 00:47:57.751, Speaker A: Okay, cool. And guys, main thing from this call is today Rust Rover stable release is launched. Make sure to download it free for non commercial use. Feel free to use an open source, side projects et cetera. So download it and yeah, thank you guys for coming. It was a blast having you. Hopefully we get to do this in the future.
00:47:57.751 - 00:48:03.535, Speaker A: And until next time, thank you, thank you, bye.
