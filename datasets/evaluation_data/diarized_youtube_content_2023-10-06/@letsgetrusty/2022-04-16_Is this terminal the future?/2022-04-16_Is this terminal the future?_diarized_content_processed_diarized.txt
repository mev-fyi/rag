00:00:00.600 - 00:00:47.933, Speaker A: So the other day I was looking through some Rust related news when I came across this article. A startup called Warp, not to be confused with the Rust backend framework, has raised $23 million to build a command line terminal. Now, this isn't your average terminal. Warp aims to be a blazingly fast cloud based terminal for the 21st century. The thing that got me interested is is that Warp is a fully native terminal built entirely in rust. Now, $23 million is a lot of money. So to understand why somebody would invest that much money into a company that's seemingly building a simple piece of software, we have to understand what problems Warp is solving.
00:00:47.933 - 00:01:30.017, Speaker A: Every developer has two critical tools that they use every single day. The first one is a code editor, for example Vim if you're a nerd with no friends, or VS code if you're too dumb and lazy to learn Vim. And the second tool is of course, the terminal. Now, code editors have seen a lot of innovation over the years, from simple text based editors to companies like JetBrains developing fully featured IDEs. Terminals have not seen the same type of innovation and Warp thinks there's room for improvement. Specifically, Warp aims to improve ease of use and collaboration. Let's take a look at the Warp terminal to see how they accomplish this.
00:01:30.017 - 00:02:21.504, Speaker A: First, let's talk about inputting commands. Warp implements modern text editor features, so for example you can have multi line commands and multi cursor selection. You also get a nice visual command history, auto suggestions and completions. For example, if I type in git checkout space and then tab I get a list of branches. You also have access to a command palette like you do in VS code. One cool feature of Warp is that commands and their output are grouped together into blocks. So instead of scrolling through your terminal, you can navigate the blocks.
00:02:21.504 - 00:03:04.475, Speaker A: For each block you can also copy the command, copy the output, or create a permalink which you can share with others. Another unique feature are workflows. Workflows allow you to compose commands which you can share with others. But unlike aliases, workflows are documented and they have parameters. Warp also has AI command search. For example, let's say I want to revert the last git commit. I can simply type in revert last commitment and the write command appears.
00:03:04.475 - 00:03:40.081, Speaker A: Besides these features, things like real time collaboration or the ability to share commands, settings, etc. Are coming in the future. Now let's talk about some of the downsides. For one, Warp is only available on macOS as of this video. However, support for web Linux and Windows are coming in the future and in that order. Secondly, Warp is not open source. They do have plans to open source the Rust UI framework they use and potentially the entire client side code base.
00:03:40.081 - 00:04:23.427, Speaker A: However, the server side code base will remain closed source. Thirdly, and this is a big one, to use Warp you need to sign in with a GitHub account. Now if you're anything like me, as soon as I saw the login prompt I I instinctively started deleting my Internet history and changing my passwords. This might be a non starter for a lot of people, but their argument is that this helps with collaboration and given that they're a cloud based application, kind of makes sense. Note that Warp is in beta stage and this requirement might change when they release to the general public. Another concern you might have is privacy. Now Warp claims that they only track metadata and never console output.
00:04:23.427 - 00:05:23.515, Speaker A: They also have an exhaustive list of telemetry events on their website which you can look at. And lastly, when they release to the general public, they're going to have an opt in model for telemetry. Another concern you might have, at least I had, is how will Warp make money? Their model is to have a free app for developers and sell enterprise features to companies. So what do you think? Is the cloud based approach correct? Or are the security concerns and required login too much of a deterrent? Or is Warp the next great developer tool following the Slack model? Being a product, developers love selling enterprise features to companies and eventually being completely dominated by a free product Microsoft releases? Let me know your thoughts in the comments section below. If you enjoyed this video, give it a like and get your free Rust cheat sheet by heading over to LetsGetRusty.com CheatSheet with that said, I'll see you in the next one.
