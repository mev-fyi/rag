00:00:00.520 - 00:00:42.340, Speaker A: What's up rustations? In this video, I'll show you five ways to improve your coding experience in rust. Whether you're a complete beginner or an experienced rust developer, these tips will be valuable to you at the end of the video. I'll also give you a 6th bonus tip that's pretty controversial, so make sure to stick around for that. Alright, let's get started. Assuming you already have rust installed, the next thing you want to do is make sure you properly set up your idea versus code is my go to choice because its easy to use, available on all major operating systems, and is highly configurable. To configure versus code for rust development, there are three must have extensions and a few optional yet very powerful extensions. I highly recommend.
00:00:42.340 - 00:01:10.748, Speaker A: Here are the three must have extensions. First, we have Rust analyzer, which is Rusts official language server, providing features like code completion, go to definition, inlay hints, and more. Next is code LLDB. This extension will allow you to debug your rust code. Next is Bettertommel, which provides syntax highlighting for TOML files. With these three extensions, you're all set up for rust development. There are also a few very powerful optional extensions I highly recommend.
00:01:10.748 - 00:01:47.202, Speaker A: Error lens will improve the highlighting of errors and warnings. As you can see in this example, it will make errors stand out more and display the error message in line. Next is todo Tree, which will help you quickly find Todo items in your code. One cool thing about todo tree is that it matches todo items by using a regular expression which you can change. In this example, I've changed the regular expression so that it also highlights the todo macro. So when I'm writing rust code, my todo comments and todo macros get highlighted. Lastly, we have the crates extension which allows you to easily check if your dependencies are out of date inside your cargo TOMl file.
00:01:47.202 - 00:02:25.354, Speaker A: If a dependency is out of date, you'll see a red x followed by the latest version of that dependency. Next, let's talk about setting up your rust project. Specifically, we'll cover how to configure automatic linting and formatting, take advantage of live reloading and set up continuous integration when you install the rust toolchain. It comes with two very useful tools, clippy and rust format. Clippy is a configurable linter that catches common mistakes and improves your rust code. And rust format is a configurable tool for formatting rust code according to style guidelines. Now you could use these tools by running them manually in your terminal.
00:02:25.354 - 00:03:09.260, Speaker A: However, I like to configure them to run automatically. Let's see how you could do that in versus code. To configure Clippy to run automatically, open up settings in versus code and in the search bar, type in rust dash analyzer space check, then scroll down until you see the check command and then change check to Clippy. Now if we open up main RS, you can see that we get a warning because we're using a variable name that Clippy does not allow to configure rust format to run automatically. We'll go back to settings and switch over to the JSON file configuration. Then all you need is these two configurations. Make sure the default formatter is rust analyzer and format on save is set to true.
00:03:09.260 - 00:03:50.542, Speaker A: Then if we go back to main rs and change the code formatting, it will be fixed when we save the file. Next, lets talk about how to set up live reloading using cargo watch cargo watch is a cargo plugin that watches for changes in your project source files and runs cargo commands when they occur. To install cargo watch, run cargo, add cargo watch, then you can run cargo watch. This is the specific command I like to run. Q stands for quiet and it will suppress the output of cargo watch. C will clear the screen. W allows us to specify which files and folders to watch.
00:03:50.542 - 00:04:31.176, Speaker A: In this case only the source directory will be watched, and x allows us to specify which cargo command to execute. In this case, were executing cargo run with the queue option which will prevent cargo log messages from being printed. If we execute this command, our program will be ran. Then if we change the code, it will be recompiled. Lastly, let's talk about setting up continuous integration with GitHub actions. To set up continuous integration for our project, all we need to do is create a GitHub folder which contains a workflows folder which in turn contains YAML files defining our workflows. Heres an example of a simple workflow called Rustci.
00:04:31.176 - 00:05:10.378, Speaker A: It runs anytime code changes are pushed to the main branch, or anytime a pull request targets the main branch. This workflow has one job with a few steps. First our code is checked out, then we install cargo audit which will allow us to audit our codebase for vulnerabilities. Then the code is built and tested. Then we run cargoclippy and fail the build if any warnings appear, and finally we run cargo audit. If our project dependencies contain any known vulnerabilities, then the build will fail with automatic linting and formatting, live reloading and continuous integration. Our project is now properly set up and we're ready to start coding.
00:05:10.378 - 00:05:45.342, Speaker A: The next tip has to do with how you should approach writing your rust programs over. Engineering is a common problem in software development and occurs when you code something that's more complex or elaborate than it needs to be. This is something you definitely want to avoid when writing rust. Instead, you should follow the principle of make it work, then make it write, and then make it fast. First, write code that simply solves the problem or accomplishes the goal. It doesn't matter if it's not the most idiomatic or performant code. Then once your code is working, you can make it more idiomatic and finally performant.
00:05:45.342 - 00:06:27.540, Speaker A: Let's take a look at an example. Here we have a function called calculatesum, which takes an array of integers and returns the sum. The code works, but it's not the most idiomatic rust code. For example, inside the calculate sum function we're using a for loop instead of an iterator adapter method, and inside the main function we're using unwrap on the result type returned from calculate sum instead of handling the error case. Now that the code is working, we can make it more idiomatic by fixing these issues inside calculate sum, we're now using the sum method instead of a for loop, and inside the main function, we're matching on the result type return from calculate sum. The code is now idiomatic. Next, we can think about performance.
00:06:27.540 - 00:07:08.622, Speaker A: To squeeze out more performance, we'll introduce parallelism using the rayon crate. All we have to do is include the rayon prelude, and instead of calling iter inside calculate sum, we call par iter, which stands for parallel iterator. Rayon will do the hard work of figuring out how to parallelize our program. This is why rayon is a useful and very popular rust crate. Speaking of rust crates, the next tip is to get yourself familiar with some of the most popular third party crates. This is especially important because rust is known to have a small standard library. So when you're coding up any meaningful project, you'll start reaching for third party dependencies pretty soon.
00:07:08.622 - 00:07:46.408, Speaker A: Key crates you should know include Surd and surday JSON, which are used to serialize and deserialize your data types. Two other important crates are this error and anyhow, which are both used for error handling. Tokyo is another crate you should know. It's the most popular async runtime for rust. There are plenty of other important crates which I don't have time to go over in this video, but if you want a curated list of rust crates bless. RS is a great resource. Now that you know how to approach coding in rust and which third party crates you should know, the next tip is to learn rust specific design patterns.
00:07:46.408 - 00:08:29.068, Speaker A: For example, the extension trait pattern, which allows you to add methods to a type outside of the crate where the type was defined. Extension traits are particularly common when you want to extend the functionality of types in the standard library. Let's take a look at an example inside a crate. Imagine we define a public trait called palindrome with one function, ispalindrome, that returns a boolean. Then we implement the palindrome trait for the string type in the standard library. We can then import this trait in another crate and all the string types will have access to the Ispalandro method. As you can see, this pattern allows us to easily extend the functionality of types in the standard library.
00:08:29.068 - 00:09:03.386, Speaker A: Some other design patterns that you should be aware of are the type state pattern, interior immutability, raii, and the builder pattern. Let me know in the comment section below if you want me to make a video going through these specific patterns. Now let's move on to the controversial bonus tip. But before we get to that, make sure you get your free rust cheat sheet by heading over to let's get rusty.com cheatsheet. The 6th bonus tip is to leverage AI. Now there's a lot of excitement and fear around AI, but no matter what you think, it's here to stay, so might as well get familiar with it and take advantage.
00:09:03.386 - 00:09:34.848, Speaker A: Personally, I think AI is an amazing tool that can make you a lot more productive. For example, tools like GitHub Copilot can help you write more idiomatic rust code, or help you quickly implement code that's repetitive or generic. Chat GPT is also a really useful tool. In fact, it wrote the GitHub actions workflow file from earlier in this video. So again, make sure to get educated and take advantage of these tools. That's it for this video. Before you go, make sure to get your free rust cheat sheet@letsgetrusty.com.
00:09:34.848 - 00:09:43.580, Speaker A: cheat sheet give this video a like if you enjoyed it, and subscribe to the channel for weekly rust content. With that said, I'll see you in the next one.
