00:00:00.480 - 00:00:46.232, Speaker A: Its no secret that error handling in rust can be a bit verbose. Wouldnt it be nice if you can just throw an error back to the caller as you can in other languages? If you thought so, then youd be happy to know that the Rust team agrees with you. Theyve been working on a language feature that allows you to easily throw errors back to the caller using a new keyword yeet. The idea of early returning errors was first introduced in an RFC all the way back in 2014. Originally, using the keyword throw was suggested. However, there is disagreement about which keyword should be used. The feature was then forgotten about until April 2020 when a Rust team member tweeted out hot take the throw keyword has the wrong connotation and evokes an image of a language that rust isnt.
00:00:46.232 - 00:01:23.748, Speaker A: But I want the feature it should be called YeET. This resulted in a series of events, eventually leading to a pull request enabling the do YeET syntax. In April 2022, the pull request was merged, and in May the doyet syntax was made available as an experimental feature in the nightly version of Rust. Lets take a look at how this experimental feature works and the benefits of using it. But before we get to that, if you havent already, make sure to get your free rust cheat sheet by heading over to letsgetrusty.com cheatsheet. Lets write a function that divides an integer by another integer.
00:01:23.748 - 00:01:59.172, Speaker A: For simplicity, the function will only return integer values. This naive implementation doesnt account for a couple edge cases. For example, we dont want our program to panic anytime someone accidentally tries to divide by zero. Lets zero check the divisor so that our function exits early and returns none. Well also need to make the return value an optional the YeET feature introduces new syntax that makes returning optional and result types less verbose. To use it, we must first enable the feature using the feature macro. Then we can replace return none with doyet.
00:01:59.172 - 00:02:42.112, Speaker A: Doye allows us to yeet the none or error variant and early exit any function block that returns an option or result type. It might look like unnecessary syntactic sugar at first, but it could be useful when our error handling becomes more complex. Lets improve our function by doing a bit more error handling with do yeet. Another way integer division can fail is when it leads to integer overflows. We can account for these two failure modes by defining an error enum with two variants and returning a result type instead of an optional type. We'll use the doyeat syntax to return one of the error variants when something goes wrong. Note that we must use the doyet syntax because Yeet is not a reserved keyword at this time.
00:02:42.112 - 00:03:24.880, Speaker A: However, if you want to try a slightly more concise syntax, there's a crate called yeeops, which allows us to yeet errors using a simple macro. First add yeeops to cargo toml, then import the yeet macro and update the doyet calls. Our code is concise, readable, and matches the mental image of yeeting errors. For comparison. A version of this function without the YEET syntax would look like this. Instead of messing around with error and return, we now have a simple, uniform, and fun way to yeet errors. Back to the caller now that we know what the Yeet keyword is and how it's used, the question is, will yeet ever reach stable rust? Unfortunately, probably not.
00:03:24.880 - 00:04:03.776, Speaker A: The Rust team has been experimenting with a less complicated way of handling errors for a long time, and although many want this feature, there is still debate about which keywords should be used. Should we throw errors, bail them out, or use some other syntax? Yeet was introduced as a fun placeholder keyword so that developers could try out the feature without getting stuck on naming. That's it for this video. Let me know what you think about the YEET syntax in the comment section down below. And before you go, make sure to get your free rust cheat sheet by heading over to letsgetrusty.com cheatsheet. Also, make sure to like the video and subscribe for weekly rust content with that.
00:04:03.776 - 00:04:05.480, Speaker A: Ill see you in the next one.
