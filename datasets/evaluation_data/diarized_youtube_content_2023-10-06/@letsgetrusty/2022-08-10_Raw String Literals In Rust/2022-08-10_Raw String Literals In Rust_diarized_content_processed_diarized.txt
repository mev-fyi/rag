00:00:00.520 - 00:00:32.965, Speaker A: Lets say we wanted to create a JSON string in Rust. If we used a regular string literal, then we would get errors because we need to escape the double quotes inside the string. We can do this using backslashes because escape characters in string literals are processed. However, this gets annoying when there are many double quotes to escape, for example when representing JSON. Fortunately, in cases like this, we can use raw string literals. Raw string literals allow you to write a string literal without escape characters. In fact, escape characters in a raw string body are not processed.
00:00:32.965 - 00:01:11.441, Speaker A: Besides JSON strings, you'll also often see raw string literals used for query strings. With that background, let's talk about how to define a raw string literal. Raw string literals are defined using the lowercase letter r followed by n number of hashes, where n could be zero, a double quote, any number of characters, another double quote, and n number of hashes. Note that the number of hashes in the beginning must match the number of hashes at the end. Let's take a look at a few examples. If the string does not contain a double quote character, then you can simply prefix the string literal with a lowercase r. If the string does contain double quotes, then you need to add one hash.
00:01:11.441 - 00:01:36.715, Speaker A: And if the string contains a double quote followed by n number of hashes, then you need to add N1 hashes. In this example, literal three contains a double quote followed by one hash. So we need to add two hashes to our raw string literal. That's it for this video. But before you go, make sure to get your free Rust cheat sheet by heading over to LetsGetRusty.com cheat sheet. With that said, I'll see you in the next one.
