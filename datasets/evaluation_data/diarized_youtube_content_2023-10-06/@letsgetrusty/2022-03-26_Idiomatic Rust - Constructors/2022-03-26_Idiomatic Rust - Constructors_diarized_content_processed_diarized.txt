00:00:00.480 - 00:00:38.016, Speaker A: What's up rust stations? Welcome back to let's get rusty. If you haven't already, make sure to get your free rust cheat sheet by heading over to letsgetrusty.com cheatsheet. Today we're starting a series on idiomatic Rust, specifically in this video we'll talk about constructors. With that said, let's get rusty. Imagine we were implementing a rust blog. Here I've created a new cargo package called Rust Blog with two crates, a binary crate which is empty for now, and a library crate.
00:00:38.016 - 00:01:58.890, Speaker A: The library crate has a user struct which represents users on the blog website, and a role enum which represents user roles. A user has two fields, a username and a role lets create a new user instance in our binary crate. First we have to import user and role in main well create a new variable called user one. Rust does not have built in constructors like languages such as circumental. There's only one true way to create a new instance of a struct or enum, and that's by specifying the struct or enum name and then initializing all of its fields. Now this works for simple cases like we have here, but let's see what happens if we add a private field to user. We'll add a new field called id, which is going to be an unsigned 32 bit integer.
00:01:58.890 - 00:02:40.064, Speaker A: Notice that id is not prefixed with the pub keyword, meaning that this field is private. If we go back to main rs you'll see that we get an error. Remember that when creating a new instance of a struct or enum in rust, we must initialize all fields, and in this case were not initializing id. Lets try initializing id to one. Now we get another error saying that we cant initialize id because its a private field. We want to keep id private because we dont want it to be set manually. Instead, it should be automatically generated.
00:02:40.064 - 00:03:43.200, Speaker A: To get around this error, we can follow a rust convention by creating an associated function on the user struct called new, which will return a new instance of user. New acts as a constructor function. It takes an argument and constructs a new instance of self, which in this case is the user struct. Because new is defined on the user type itself, it has access to private fields such as Idk. Another benefit of using this convention is that we can set default values. In this case we're setting role to creator. Before moving on, let's make sure id is randomly generated.
00:03:43.200 - 00:04:36.612, Speaker A: To do that, we'll add a dependency on the rand crate. Then we'll go back to lib rs and import the rand prelude. And finally well use the randcreate to generate a random id. Now lets go back to main and use this function. We successfully constructed a new user. Lets print out user one to see what values we got. User one has a random id.
00:04:36.612 - 00:05:26.100, Speaker A: The username we passed in and role is defaulted to creator. Another benefit of using this convention is that we can do some work prior to returning a new instance. For example, before creating a new instance of user lets say that we want to check that the username passed in isnt already in use. The first thing well do is change the signature of new. Instead of returning self well return a result type. Then well need to wrap the returned instance in the ok variant. Finally well check if the username passed in already exists, and if it does we'll return an error variant.
00:05:26.100 - 00:07:09.850, Speaker A: Because this is just an example, well simply check if username is equal to test user 123 next lets talk about default constructors and the default trait. The Rust standard library has a trait called default which when implemented on a type gives useful default values. Lets implement the default trait for user it. The default trait requires us to implement one method called default which takes no arguments and returns an instance of self. When creating a default instance of user we still want the id to be random, the username to be guest with id appended, and the role to be guest. By implementing the default trait, we now have a way to construct user instances with default values. One benefit of implementing the default trait on user is that we can use user anywhere where default implementations are required.
00:07:09.850 - 00:08:06.940, Speaker A: For example, let's go back to main the new function returns a result type. So to print user one on line six, we first have to check if user one is a user instance or an error. There is however a useful method on the result enumerated called unwrap or default. If new returns the ok variant, then unwrap or default will return the user instance inside the OK variant and if new returns the error variant then unwrap or default will return a default instance of user. This method only works on types that implement the default trait. In this case, because the username passed in is testuser 123, we should get the default instance of user. Lets run our program to check.
00:08:06.940 - 00:09:16.060, Speaker A: As expected, we got default values for user. Lets change the username passed in slightly and rerun our program. This time we got a user instance with the username we passed in and the role set to creator. The default trait could be automatically implemented via the derive macro for structs whose fields all implement the default trait. For example, lets create a new struct called post, which represents a single blog post. The poststruct has three content, which is a string, tags, which is a vector of strings, and likes, which is an unsigned 32 bit integer. All of these types implement the default trait so we could derive default for the post struct.
00:09:16.060 - 00:10:04.764, Speaker A: We'll also derive debug so we can print post out with debug formatting. Let's create a default instance of post and print it out. First we have to import post. Then we'll create a variable called post one and print it out. Let's run our program to see what values we get. Content defaults to an empty string, tags default to an empty vector, and likes default to zero. The last thing I want to talk about is the derive new crate.
00:10:04.764 - 00:11:07.660, Speaker A: The derivenew crate allows you to implement the new constructor function for structs and enums using a derive macro. Lets see how this works by implementing new for the post struct. First well add derive new as a dependency. Then well import the new macro and add new to the derive attribute. Finally, well customize the new constructor by adding attributes to the fields in post. On line 48 we're saying that when calling the new constructor function, tags should be set to a vector with one string. In this case, Rusty and on line 50 were saying that likes should be set to its default value.
00:11:07.660 - 00:12:09.568, Speaker A: Lets create another post in main using the new constructor function. Notice that the new constructor function for post only takes one argument, which is called content. That's because tags and likes already have set values. Let's run our program to see what values we get for post two. For post two, content is set to example, content tags is set to a vector with one string. Rusty and likes are set to zero. In summary, there's only one true constructor for structs and enums in rust, which is to specify the name of the struct or enum and initialize all of its fields.
00:12:09.568 - 00:12:55.080, Speaker A: However, there is a convention in rust of adding a constructor function called new to your type. This gives you the ability to initialize private fields, set default values, and perform some work before creating a new instance. You can also use the derivenew crate to automatically implement the new constructor function by adding attributes to your struct or enum. Lastly, to get the functionality of a default constructor, you can implement the default trait for your type. Alright, that's it for this video. If you want to see more videos about idiomatic rust, then leave a comment down below. If you like this video, make sure to give it a like and make sure to get your free rust cheat sheet by heading over to letsgetrusty.com
00:12:55.080 - 00:13:00.220, Speaker A: cheatsheet. And with that said, ill see you in the next one.
