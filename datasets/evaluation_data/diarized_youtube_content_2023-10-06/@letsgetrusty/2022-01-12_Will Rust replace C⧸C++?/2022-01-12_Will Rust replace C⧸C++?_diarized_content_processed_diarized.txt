00:00:00.320 - 00:00:51.068, Speaker A: As a software engineer, I pride myself on being able to think objectively, analytically, and practically. Which is why in today's video, I'd like to discuss why Rust will replace every single C and C program in existence now, before you get all triggered. Obviously, I'm joking. There are countless amounts of C and C programs, and it makes no sense to replace all of them with Rust. However, I would like to talk about two cases in which using Rust as an alternative to C and C could make sense. The first case is rewriting small parts of a C or C code base in Rust. We are already seeing big tech companies do this in production and non production environments.
00:00:51.068 - 00:01:48.030, Speaker A: For example, Mozilla rewrote its CSS parser from the ground up and in Rust, and Microsoft is experimenting with replacing some of its C components with rust components. This is possible because Rust is able to interoperate with C and C code bases via a foreign function interface. The second case is choosing rust over C or C for new projects. We're seeing big tech companies do this as well. For example, AWS wrote Firecracker, its lightweight virtualization technology, which powers AWS, lambda, and Fargate in Rust. Now, whether a company is considering rewriting an existing component in Rust or starting a new project in Rust, they have to consider the trade offs. The benefits of using Rust is that you get performance that's on par with c and C, as well as stability, because Rust has strong backwards compatibility guarantees, which is important for system programming.
00:01:48.030 - 00:02:26.744, Speaker A: But on top of that, you get extra benefits such as memory, safety and correctness at compile time, modern tooling such as the cargo package manager, and high level zero cost abstractions. Despite these benefits, there are also downsides we need to consider. The first downside is portability, and this is specifically relative to C. C targets essentially everything, while Rust is limited to the platforms LLVM supports. Now, this is not a limitation of the language. In fact, people are actively working to improve Rust's portability. However, as it stands, Rust is definitely not on par with c.
00:02:26.744 - 00:03:17.012, Speaker A: The other Con is language support. Currently, Rust does not have a formal standard, Rust does not have long term support releases, and there's still work that needs to be done for the cargo build system to integrate with other build systems. IDE integration still needs work, and the ecosystem of crates or packages available is still young. Just like portability, support is not a language limited and will improve as time goes on. Another con that will improve over time, however, is something to consider right now is the job market. If you're a company considering using Rust or C for a new project, then you have to consider the pool of developers you have to pick from. Rust has a small pool of developers relative to the huge pool of c developers.
00:03:17.012 - 00:04:06.234, Speaker A: The last downside is simplicity, specifically relative to c. C is a very simple language by design, whereas Rust is a much more complicated language by design. Unlike the other downsides, this is not something that will improve over time. This is a trade off that you'll have to consider and decide on for yourself. So, in summary, will rust completely replace existing c and C code bases? No. However, we will see a small percentage of c and C components being converted to rust components, more so on the c side, because c is so portable and simple that some will not want to part with those benefits. We will also see more companies using rust for new projects because of its memory, safety guarantees, and modern tooling.
00:04:06.234 - 00:04:59.370, Speaker A: Another reason why we might see more and more new rust projects is because rust attracts traditionally non system programmers. In fact, I did a poll on my channel's community page asking which languages developers are coming from, and the majority of you are coming from languages with a garbage collector. Personally, I come from a web development background, so I use JavaScript or typescript, and systems programming wasn't even something I thought about until I came across Rust. All this to say, I think this new group of developers Rust is attracting will help with Rust's adoption. If you enjoyed this video, give it a like and let me know in the comment section down below. Also, if you want to see weekly Rust content, then hit the subscribe button. And don't forget to get your free rust cheat sheet by heading over to let's get rusty.com
00:04:59.370 - 00:05:04.550, Speaker A: cheatsheet. And with that, I'll see you in the next one.
