00:00:00.560 - 00:00:16.129, Speaker A: Should you learn Rust as your first programming language? Many of you have asked me this question, and in this video I'm going to give you my completely unbiased answer. Now I know what you're thinking. This is a channel all about Rust. Of course he's going to tell you to learn Rust, but that's not the case.
00:00:16.257 - 00:00:17.897, Speaker B: In fact, I think learning Rust as.
00:00:17.921 - 00:00:52.277, Speaker A: A first programming language can be a good idea for some people, but a terrible idea for others. Also, I think many people online take the wrong approach when answering this question, so let me give you my perspective at the end of the video. I'll also give you a tip for learning anything, especially if it's difficult or complex like programming. So make sure to stick around for that. Before we get started. Make sure to get your free Rust cheat sheet@letsgetrusty.com cheat sheet many people tackle the question of learning Rust as your first programming language from a technical perspective.
00:00:52.391 - 00:00:54.073, Speaker B: They either say yes, learning Rust will.
00:00:54.089 - 00:01:09.113, Speaker A: Teach you good habits like composition over inheritance and explicit error handling and prevent you from learning bad habits like passing pointers everywhere without considering the consequences on performance and memory safety, or they say no, Rust is too complicated and if.
00:01:09.129 - 00:01:10.705, Speaker B: You learn Rust as a first programming.
00:01:10.745 - 00:01:52.899, Speaker A: Language, you will get discouraged and give up. Now, although I think the technical perspective should definitely be considered, I don't think you should only focus on the technical perspective when answering this question because most people aren't learning programming for the sake of programming. People are typically learning programming to meet an end goal, like automating a task at work, turning their website or app idea into reality, or starting a new career. So you should approach this question by thinking hard about the end goal and working backwards from there. Because in order to learn anything hard which programming is you need a strong enough why. Otherwise you'll give up. It's like learning a foreign language.
00:01:52.899 - 00:02:44.087, Speaker A: I remember taking one year of Spanish in high school and another year of Spanish in college, and at the end of those two years of learning Spanish I could barely speak Spanish. It wasn't until I moved to Mexico and had a strong use case to learn the language where it really stuck. When I was first getting into tech, I was passionate about productivity software and business tools and I wanted to build user experiences, something you can see and interact with directly. I also wanted to pursue a career in tech and figured out that front end web development was a viable career path. Because of that I started off learning HTML, CSS and good old fashioned JavaScript. So again, it's important to begin with with the end in mind, you need a strong enough why. In fact, you want as many whys as possible so you can stack your whys.
00:02:44.087 - 00:03:21.039, Speaker A: Imagine a scale. On this side you have all your whys, all your reasons to keep going, and on this side you have all your reasons to quit, which will pile up over time. You want your whys to outweigh your reasons to quit, so you keep going. Otherwise you will quit no matter which programming language you choose to learn first, it's not going to be easy. Every path has its pros and cons. JavaScript, for example, is easier to learn, but you will likely get overwhelmed by its ecosystem of tools and frameworks. Rust allows you to build blazingly fast software, but it has a higher learning curve.
00:03:21.039 - 00:04:17.301, Speaker A: No matter which path you choose, the important thing is to stick with it. Once you get proficient in one language, technology and stack, you can learn other languages, technologies and stacks because now you have a foundational knowledge and a point of reference. With that in mind, let's go back to the question should you learn Rust as your first programming language? Here is my opinion, given specific scenarios. First, let's talk about people who should not learn Rust as their first programming language, which is going to be the majority of people if you want to learn programming to build a website or a mobile app, or do some web scraping or automate a task at work, or even build a backend service, there are languages out there more suited for the task. For mobile you can learn Kotlin, Swift, or JavaScript. For web you should learn JavaScript. For web scraping and automation, Python is a good choice.
00:04:17.301 - 00:05:22.143, Speaker A: And for backend servers and services there are established languages like C Sharp, Java, and yes, it pains me to say Buggo is also another good choice. Now maybe your end goal is not so much project focused, it's more career focused. If you want to get hired as a software engineer and you have a creative and visual side and care about user experiences, then you should learn front end technologies like JavaScript. Or if you want to get hired as a software engineer and you like algorithms and systems thinking, then you should learn backend technologies which again could be Java, C Sharp, or Go. If you just want the most employable skillset or you want to get into programming but you have no idea which language to pick, then I would recommend picking a popular language technology and stack that's easy to learn so you can get Quick Wins. JavaScript is a good option here because with JavaScript you can build front end, backend, mobile and really any type of applications you want. And it's also a highly employable skillset.
00:05:22.143 - 00:05:24.439, Speaker A: Alright, now let's go over some scenarios.
00:05:24.527 - 00:05:26.735, Speaker B: Where learning Rust as your first programming.
00:05:26.775 - 00:05:28.791, Speaker A: Language might be warranted.
00:05:28.903 - 00:05:30.991, Speaker B: Learning Rust as your first programming language.
00:05:31.103 - 00:06:01.223, Speaker A: May be warranted if your use case requires it. For example, let's say you want to work on embedded software, operating systems, database internals, robotics or other low level software. Or maybe you want to build smart contracts on a blockchain where smart contracts are written in Rust. In this case, learning Rust as a first programming language can be a good idea because otherwise you would probably have to learn C or C which exposes you to a similar level of complexity.
00:06:01.319 - 00:06:03.087, Speaker B: The other scenario where learning Rust as.
00:06:03.111 - 00:06:56.133, Speaker A: A first programming language can be a good idea is if you have a genuine passion or interest. For example, let's say you're really passionate about computer science, low level programming, optimizing for performance and efficiency, or you just love knowing how things work at a fundamental level. In this case, the complexities of Rust will be a fun and interesting challenge to you. So as you can see, the answer all depends on your end goal. So again, before deciding which path to take, make sure your end goal is crystal clear. But no matter which language or technology you decide to learn, I want to give you one tip that will help with learning any language or technology and that is learning with others is one of the best ways to learn. I would highly recommend going to meetups, networking events, hackathons or school events to meet other like minded people.
00:06:56.133 - 00:07:06.913, Speaker A: When I was in school I remember going to a lot of hackathons and networking events where I met some amazing people that were instrumental to my software development career. Alright, that's it for this video.
00:07:06.969 - 00:07:08.609, Speaker B: If you're learning Rust as a first.
00:07:08.657 - 00:07:28.015, Speaker A: Programming language, let me know how it's going in the comments section down below. Also, make sure to get your free Rust cheat sheet@letsgetrusty.com cheat sheet if you enjoy this video, give it a like and subscribe to the channel for weekly Rust content. With that said, I'll see you in the next one.
