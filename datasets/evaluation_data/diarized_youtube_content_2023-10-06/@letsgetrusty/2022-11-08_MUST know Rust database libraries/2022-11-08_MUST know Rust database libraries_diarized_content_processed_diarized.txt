00:00:00.520 - 00:00:31.278, Speaker A: Most applications you build, especially web servers, are going to interact with databases. So in this video we're going to talk about the five must know rust database crates. But before we get to that, if you haven't already, make sure to get your free rust cheat sheet by heading over to let's get rusty.com cheatsheet. With that said, let's start off by talking about database driver crates. Many applications, such as web servers, need databases to store data. These databases have their own protocols and formats for data exchange.
00:00:31.278 - 00:00:56.158, Speaker A: That's where database drivers come into play. A database driver is a piece of code that performs communication between your application and the database. It implements the protocols and data exchange formats for the particular database. Let's look at some prominent rust database driver libraries. One of the most popular databases is PostgreSQL. Postgres is a straightforward driver for it. First you create a client by calling the connect function.
00:00:56.158 - 00:01:39.816, Speaker A: Then you can use methods such as query and execute to run the SQL statements. There is also an async version of this crate, which uses Tokyo. SLEd is an embedded database written in rust. Embedded databases store data directly on disk without needing a secondary application to manage the database. So sled takes care of writing and reading from disk with no need to connect to a separate database. In addition, Sled provides an API similar to binary treemap, which makes it simple and fast to use. For example, you can open a file by calling the open function, then insert a key value pair using the insert method, iterate over key value pairs starting at a given key using the range method, and remove a key value pair using the remove method.
00:01:39.816 - 00:02:16.660, Speaker A: SQLX is a SQL toolkit made in Rust that provides drivers for many SQL databases like SQLite, MySQL, and postgres. It includes useful features such as compile time check queries, embedded migrations, async support, and more. SQLex also has a built in connection pool. More on that later. Connecting works as expected by calling the connect function, and we can execute queries using the query function, which also allows us to bind variables. Database drivers are very practical, but it's tedious to write database queries by hand. That's where object relational mappings come into play.
00:02:16.660 - 00:02:46.712, Speaker A: Orms not only implement protocols, but they integrate with your rust code. This means that a database table can have an equivalent struct in your code, for example. That way, every time you make a query on that table, we automatically get typed structs. As a result. Orms also include query builders that abstract interactions with the database. As rust functions, so instead of writing raw SQL statements and passing them to functions like execute. We have actual functions representing methods like insert, select and update.
00:02:46.712 - 00:03:12.052, Speaker A: Lets look at some rust Orm libraries to understand their power. Diesel is a productivity focused ORM. This means it has a performant yes simple API so you dont have to waste time writing lengthy SQL queries. Lets look at some code. We can use macros to define structs which map to database tables. Then we can instantiate them like normal structs and insert them into the database. One downside of diesel is that it doesnt support async.
00:03:12.052 - 00:03:46.188, Speaker A: One ORM that does support async however is corm. Corm is an ORM with similar goals to diesel but with a different architecture. Corm relies on SQL X which means it uses database drivers written in rust and unlike diesel it supports asynchronicity. It's also built on top of cquery, a query builder which you can use separately if you don't want a full Orm. After creating database migrations, we can generate entities using the Corm CLI. Each entity will become a module. We can import and perform the usual crud operations.
00:03:46.188 - 00:04:18.128, Speaker A: In this example, we create a user named Joe and insert the user into the database. When interacting with databases, we need to open a connection. Usually we have to open a new connection every time we want to access the database, but that's inefficient. We can improve this by keeping the connections open. For that we use a connection pool. The connection pool will manage database connections, keeping them ready for use by different threads. When a thread stops using a connection, instead of dropping it, it will go back to the connection pool ready to be used again by the same thread or another thread.
00:04:18.128 - 00:05:11.240, Speaker A: Rust has a notable connection pool library called r is very straightforward to use. Say we want r maintain connections with a postgres database. All we have to do is add the r adapter for postgres, create a new postgres connection manager instance, and use it to create a connection pool. It's not much different than using the postgres crate, and R takes care of the connection pool under the hood. Now that we know what database drivers, orms and connection pools are, the question remains when should you use them? Although orms provide a much more ergonomic way to interact with your database, they tend to be less flexible than drivers for extremely complex queries. Using SQL directly tends to be better than orms as you have the full power of SQL at your disposal. Orms also tend to be slightly slower as the query needs to be processed in rust before being sent to the database.
00:05:11.240 - 00:05:49.140, Speaker A: This slowness is largely insignificant, and the safety you get by using an ORM tends to make up for it. Connection pools are always useful, but if there isn't one ready for the database you're using, it might be better to just go with that one, as implementing connection pools isn't easy, even though they are helpful, oftentimes connection pools are not necessary, especially when dealing with a low number of connections. That's it for this video. If you haven't already, make sure to get your free rust cheat sheet by heading over to let's get rusty.com forward slash cheatsheet. Also, if you found this video helpful, hit the like button and subscribe to the channel for weekly rust content. With that said, I'll catch you guys in the next one.
