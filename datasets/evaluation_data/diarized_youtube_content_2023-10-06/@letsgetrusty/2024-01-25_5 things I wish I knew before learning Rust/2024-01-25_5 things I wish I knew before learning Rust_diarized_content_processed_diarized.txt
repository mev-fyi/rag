00:00:00.280 - 00:00:55.700, Speaker A: Five things I wish I knew before learning Rust starting with prerequisite knowledge rust is a low level language with memory management at the center of everything you do. So before learning Rust, it's extremely helpful to have a fundamental understanding of certain CS concepts and practical experience with other low level languages. When it comes to CS concepts, it's important to know the different memory regions available to your program, like the stack heap and static memory, and what each is used for. You also want to know how memory allocation and deallocation work, and the difference between manual memory management and garbage collection. You also want to understand how concurrency and parallelism works. Understanding the concepts of multi threading, synchronization, and parallel processing is important when working with Rust's concurrency features. You also want to have an understanding of compiled versus interpreted languages and a basic understanding of object oriented programming and functional programming.
00:00:55.700 - 00:01:55.328, Speaker A: Understanding these computer science basics will help you understand the technical decisions and trade offs Rust has made as a language. It will help you understand Rust's feature set and the compile time error messages you'll inevitably encounter when programming in Rust. Now, when it comes to experience with other low level languages, I'm really talking about c and C. Specifically, an understanding of references, raw pointers, smart pointers, the RAII pattern in C principles like zero cost abstractions, dynamic versus static dispatch, and virtual tables, and the way error handling works with return codes and exceptions. Having practical experience with these features and concepts will serve you well when learning rust, because rust builds on top of these features and solves some of the problems in C and C. For example, the ownership system in Rust is inspired by the RAIi pattern in circumental. But unlike CNC, Rust gets rid of the notion of null pointers, a billion dollar mistake, and instead has an option enum.
00:01:55.328 - 00:02:45.262, Speaker A: Rust also provides a result type for error handling instead of using error codes or exceptions. This allows for explicit type safe error handling without hidden control flow. When I started learning rust, I came from a web development background, so I didn't have a good understanding of the CS concepts or practical experience with C and C, so I had to learn these things along the way. The ownership model in rust was difficult for me to wrap my head around until I understood the RAii pattern in C, and understanding pointers and references in Rust made a lot more sense once I knew how they worked in C. The second thing I wish I knew before learning rust is where to find the best rust learning resources in terms of prerequisite knowledge for CS fundamentals. You can watch the Harvard CS 50 lectures for free on YouTube. I also have a memory management playlist on YouTube as well.
00:02:45.262 - 00:03:13.114, Speaker A: And for CNC fundamentals I highly recommend watching the Cherno on YouTube. Now. When it comes to learning resource for rust specifically, there are a few. Of course theres the Rust book, which is a great intro to rust. And if you prefer a video format, I have a playlist going over the entire book. Theres also the rust by example book, the Rustlings GitHub repo full of rust exercises. And if you want a more comprehensive curated list of rust resources, theres the idiomatic Rust GitHub repo.
00:03:13.114 - 00:03:56.840, Speaker A: Now if youre looking for Rust deep dives, I highly recommend John Jenset's crust of Rust series on YouTube and his book Rust for rustations. Now once you get a good understanding of Rust, youll want to learn how to use Rust for your specific use case for low level programming Philip Opperman has a blog series going through writing an operating system in rust. And if youre interested in embedded software, theres the embedded rustbook. If youre interested in Webassembly, theres the Webassembly rustbook. And if youre looking to do server programming with Rust, Jeremy Chone has a full axiom course on YouTube. Additionally, there's the zero to prod in Rustbook, which I highly recommend. Not only will it teach you how to build rust server side projects, but it will also teach you how to make your code production ready.
00:03:56.840 - 00:04:43.612, Speaker A: And if you're looking for an all in one resource, I actually recently launched a free rust course on my website. I've put together my YouTube videos in a curated curriculum, with additional resources and exercises built right in. And it's open source so you can contribute to it and make it better. Now, despite knowing what to learn and where to get the information, youll inevitably get slapped in the face with a harsh truth when you start learning Rust, a truth I wish someone told me before starting my rust journey. And that is your productivity will slow down a lot, especially at first. And by productivity, I mean the speed at which you can write apps in Rust, im not accounting for long term maintenance costs or the time spent debugging runtime bugs. Rust is not like JavaScript or Python, where you can just bash your keyboard for five minutes and have a running app.
00:04:43.612 - 00:05:31.498, Speaker A: It's a strongly typed language, which means you have to declare and think about your types beforehand. It's also a low level language which comes with inherent complexity, complexity which shows up in the syntax and the advanced concepts you'll need to know, especially around memory management. Rust also has a strict compiler because it's making the trade off of having a high degree of safety in exchange for strict compile time rules. So although your productivity in Rust will certainly improve over time, you're not going to be able to hack together an app as fast as you would with JavaScript or Python. On the bright side, there's a second truth I wish I knew before learning Rust. And that is, Rust will make you a better developer. First of all, Rust will force you to have a deeper understanding of low level concepts like the complexities of strings, memory management, and concurrency.
00:05:31.498 - 00:06:31.136, Speaker A: And you'll also encounter complex language features like metaprogramming and the foreign function interface. Another way rust will make you a better developer is by shifting the way you think about programs. Humans have two fundamental resources, time, the time we have here on earth, and attention, or what we choose to do with that time. Computers also have two fundamental resources, compute or processing power and storage. Rust seeks to optimize both resources, and it forces you to think about runtime performance and how things are laid out in memory, which is great for low level software learning. Rust will also improve your code quality because Rust teaches you how to leverage the type system to write robust code by turning runtime bugs into compile time errors. This is done through features like strict static typing, where you have to think about your types beforehand, exhaustive pattern matching, which ensures all scenarios are considered immutability by default, and the result and option enum, which force you to explicitly handle errors and null values, respectively.
00:06:31.136 - 00:07:10.110, Speaker A: The best part is you can take these language features and patterns, or at least some of them, and apply them to other languages like typescript. The fifth thing I wish I knew before learning rust is that rust is not just hype. When I started this channel three years ago, I didnt know if Rust was going to take off or not. Of course it was an educated guess and I was optimistic about Rust. But the software space moves so fast its hard to tell whats going to stick and whats simply going to fade away. But three years later, seeing the community growth, the industry adoption, and the growth of this channel, I can confidently say that rust is here to stay. And lets get rusty will continue to be here to help you in your rust learning journey.
00:07:10.110 - 00:07:18.410, Speaker A: Speaking of which, make sure to get your free rust cheat sheet at let's get rusty.com cheat sheet. Hope you've enjoyed the video and remember to stay rusty.
