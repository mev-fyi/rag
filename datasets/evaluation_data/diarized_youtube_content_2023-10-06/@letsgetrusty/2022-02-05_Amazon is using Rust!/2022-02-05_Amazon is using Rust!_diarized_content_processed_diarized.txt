00:00:00.360 - 00:00:47.163, Speaker A: You know, it seems like all the cool kids are rewriting their code bases in Rust these days. And no kid is cooler than Amazon because they just released a blog post describing how they rewrote parts of the Prime Video app in rust, resulting in 37,000 lines of rust code. Let's take a look at the blog post to find out why. The blog post is titled How Prime Video Updates its App for more than 8,000 device types basically, the Prime Video app is deployed to all types of devices gaming consoles, TVs, USB powered streaming sticks, etc. So when Amazon wants to update the Prime Video app, every one of those devices requires a separate native release. So as you can imagine, the update process is long and tedious. This is why the app is divided into two parts.
00:00:47.163 - 00:01:37.733, Speaker A: First, there's a native part written in C, which must go through the long update process when anything changes. Then there's another part shown here in Blue, which is downloaded at runtime when the app starts up. This makes updating these blue components very easy. This blue part is written in JavaScript and contains application level code and some lower level components such as a scene and resource management component, an animation component, and a renderer. The native C code base has a JavaScript VM and handles things like network access, image decoding, and more. This architecture allows features and bug fixes to be delivered without updating the native app. However, the downside is the components that could be updated on the fly are slow because they're written in JavaScript, and that's where WebAssembly comes into the picture.
00:01:37.733 - 00:02:38.591, Speaker A: To solve this performance problem, Amazon started experimenting with WebAssembly. In August 2020, Amazon built some prototypes to compare WebAssembly VMs to JavaScript VMs. In those prototypes, code written in Rust and compiled to WebAssembly was 10 to 25 times faster than JavaScript. Because of this, Amazon decided to rewrite parts of the Prime Video app in Rust. Now, Amazon still wanted to deploy to devices that didn't support WebAssembly, so they went with the following architecture Low level application components such as the Renderer, animation and scene, and resource management were converted from JavaScript components to Rust components and deployed as WebAssembly binaries. New versions of the WebAssembly binaries could be deployed over the air, Just like the JavaScript code in the native C layer, a WebAssembly VM was added to execute the WebAssembly binaries. The WebAssembly VM and JavaScript VM both run in separate threads and communicate through messages.
00:02:38.591 - 00:03:21.663, Speaker A: This architecture allows for performant application level components that are easy to update. As a result of this architecture, average frame times on a mid range TV were reduced from 28 milliseconds to 18 milliseconds to reach the goal of reliable 60 frames per second frame generation. Amazon states that they will move more systems to webassembly in the future. Switching to webassembly also improved memory consumption and binary size. The total memory consumption for the WebAssembly VM was only 7.5 megabytes, which saved a total of 30 megabytes of JavaScript heap memory. Also, the binary size of the webassembly module was only 150 kilobytes.
00:03:21.663 - 00:04:04.155, Speaker A: The blog post goes on to say that using Rust helped developers focus on functionality rather than language corner cases. They also go on to say that Rust has an ecosystem of high quality libraries. Specifically, they use the EGUI library to develop an overlay displaying debug information. The article ends by saying that after a year and 37,000 lines of Rust code, investing in Rust and WebAssembly has paid off. Let me know in the comments what you think about Amazon using Rust and Webassembly. Also, if you like this video, make sure to hit that like button and subscribe to the channel for weekly Rust content. Lastly, get your free Rust cheat sheet by heading over to letsgetrusty.com
00:04:04.155 - 00:04:09.295, Speaker A: cheatsheet and with that said, I'll see you in the next one.
