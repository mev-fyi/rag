00:00:00.400 - 00:00:38.002, Speaker A: In this video, we'll go over the latest release of Rust, version 169.0. Specifically, we'll cover two main features which are automatically fixing lit errors and compile time improvements. To update to the latest rust version, simply run rustup update stable. Before we get started, make sure to get your free rust cheat sheet@letsgetrusty.com. cheatsheet first, let's talk about automatically fixing lint errors. Linting is the process of analyzing code for potential errors, bugs, or stylistic issues using automated tools. Rust actually comes with two lint tools.
00:00:38.002 - 00:01:23.748, Speaker A: CargoCheck runs the built in lints provided by the rust compiler. These lints are designed to catch common programming mistakes such as unused variables, type errors, and borrow checker errors. On the other hand, we have cargo clippy, a superset of the default compiler lens. In addition to checking the default compiler lints, it also provides a more advanced set of lints that can help you write more efficient, readable and maintainable code. In addition, Clippy can be configured by creating a Clippy Toml file in your projects root directory. Heres an example of some rust code. Lets run cargo check here you can see that we get one lint warning because we have an unused import.
00:01:23.748 - 00:02:05.548, Speaker A: Now lets try running cargoclippy. If we scroll up you can see that we get the unused import lint error just like before, but this time we have an extra lint error. It's telling us that this statement x x one can be replaced with x plus equals one. The nice thing is some lint warnings can be automatically fixed, and that number is constantly growing. To draw attention to this, Cargill will now suggest running cargo fix or cargo clippy fixed when it detects warnings that are automatically fixable. In fact, you can see that it says here runcargoclippi fix. To apply two suggestions, let's try it.
00:02:05.564 - 00:02:06.120, Speaker B: Out.
00:02:14.780 - 00:02:50.770, Speaker A: And as you can see, the code was automatically fixed. Next, let's talk about compile time improvements. As of this release, cargo now avoids emitting debug information in build scripts by default, which should improve compilation speed. This will have no visible effect when build scripts execute successfully. However, if you want to include debug information to debug a failing script, then you can add this snippet of code to your cargo toml file, and that's it for this relatively small release. Before you go, make sure to get your free rust cheat sheet@letsgetrusty.com. cheatsheet with that said, I'll see you in the next one.
