00:00:00.360 - 00:00:41.568, Speaker A: In this example, we have a cargo project called draw with a single library crate. This simple library has one public top level function called drawline which takes two points on a graph, x and y. It also has two modules, color and shapes. The color module also has a drawline function with an extra color parameter. And finally, the shapes module has one struct called rectangle with three fields, colorization, width and height. Notice that to represent color we use the RGB crate and we also use serde to be able to serialize and deserialize the rectangle struct. Now this library is very small, but imagine it was a lot bigger.
00:00:41.568 - 00:01:18.660, Speaker A: We don't want consumers of the library to pay for behavior that they don't use. This is where cargo features come in handy. Cargo features allow us to do two things. First, they allow us to define parts of our code that are conditionally compiled only if a certain feature is turned on, and secondly, they allow us to define optional dependencies. The advantage of using features is that they reduce compile times and file sizes. To add features to our cargo project, we can open up cargo toml and add a features section. Then well create two features, color and shapes.
00:01:18.660 - 00:02:30.452, Speaker A: Each feature has a name and an associated array where we can specify other features or optional dependencies that should be enabled. For example, we could say that if the shapes feature is enabled, then the color feature will also be enabled. For features to enable optional dependencies, first we have to make our dependencies optional by marking them as such, let's make Surd and RGB optional dependencies. Then we can say that if the color feature is enabled, the optional RGB dependency should also be enabled. Notice that to enable optional dependencies we use the dep colon prefix. Next, let's enable Serda when the shapes feature is enabled, well also enable the serde feature in the RGB dependency. To enable a feature inside a dependency, we specify the dependency followed by a forward slash and then the feature name.
00:02:30.452 - 00:03:07.330, Speaker A: This question mark syntax means only enable the serde feature inside the RGB dependency if the RGB dependency is already enabled by something else. In this case the colors feature. Using this syntax is not necessary because colors will already be enabled if the shapes feature is enabled. But I show it here as an example. Now that Surday and RGB are optional dependencies, they will only be compiled if the color or shapes feature is enabled. Now features are disabled by default. However, we can change this by adding a special feature called default.
00:03:07.330 - 00:03:52.670, Speaker A: Here we're saying by default all features are disabled except the color feature. All right, we've seen how we can use features to conditionally compile optional dependencies. Now let's see how we can use features to conditionally include code at compile time. First, we'll make it such that the color module is only included if the color feature is enabled. To do this, we use the CFG attribute, short for configuration. Here we're saying that this module will only be included if the color feature is enabled. Notice that we get errors in the shapes module saying that serde is an unresolved import.
00:03:52.670 - 00:04:33.416, Speaker A: This is because we made Serde an optional dependency, and it's only enabled if the shapes feature is enabled and the shapes feature is disabled by default. To fix these errors, let's only include the shapes module if the shapes feature is enabled. Our code is now compiling, and if you notice versus code made our code a little dim to indicate that the shapes feature is turned off by default. So this code will not get compiled by default. And with that, our library is now complete. That's it for this video. If you enjoyed it, make sure to give it a like and leave a comment down below.
00:04:33.416 - 00:04:44.160, Speaker A: Most importantly, don't forget to get your free rust cheat sheet at let's get rusty.com cheatsheet. With that said, I'll see you in the next one.
