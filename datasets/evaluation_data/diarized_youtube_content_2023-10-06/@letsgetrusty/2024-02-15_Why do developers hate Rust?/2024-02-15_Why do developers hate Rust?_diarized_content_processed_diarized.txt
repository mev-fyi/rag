00:00:00.480 - 00:00:40.610, Speaker A: Developers hate rust despite stack overflow claiming Rust is the most loved language year after year. I havent seen this much genuine hate for a programming language in a long time. Its gone so bad that merely mentioning rust can trigger developers. But this hate isnt all unfounded, and it usually stems from five reasons, the first one being lack of job opportunities, to which I just have to say the second reason developers hate rust is the syntax. People say its verbose, complex, and downright ugly. For comparison, let's take a look at the map method, which transforms a collection of one type to another type. The function signature in JavaScript is extremely simple, whereas in rust it gets pretty complicated.
00:00:40.610 - 00:01:21.434, Speaker A: We see generics, trait, trait, bounds, closures, the size trait, and this signature doesn't even include lifetimes. So yes, the rust syntax is more verbose, more complex, and frankly more intimidating than a lot of other languages. But there are some good reasons for this. Rust is a statically typed language which favors explicitness in its type system, and it also has to model things like memory safety in its type system. The benefit of this is that it reduces ambiguity, which in turn reduces errors. The map function in JavaScript doesn't tell us what the type of the input parameter should be or what the function returns. If anything, developers have to dig into documentation to figure that out.
00:01:21.434 - 00:02:05.514, Speaker A: This opens up the door for runtime errors, because a developer can literally pass in anything to this function. The map method in Rust, on the other hand, tells us exactly what it expects as input, and what it returns as output. The code documents itself, and developers are required to follow this function's contract. Otherwise they'll get a compile time error. By favoring explicit syntax and having a strong type system, rust ensures your code is predictable, consistent, easier to refactor, debug, and maintain. It's also worth pointing out that rust is constantly evolving, and improvements are being added to make the language more ergonomic. So if you've shied away from Rust because of the syntax or the type system, I completely understand.
00:02:05.514 - 00:02:49.100, Speaker A: But I encourage you to give Rust a try and experience that warm, fuzzy feeling you get when you successfully compile a program and know that it's basically gonna work how you expect at runtime. The third reason developers hate rust is because they say there are better languages out there. First of all, we have C and C, which are both low level and performant. If you're looking for simplicity, you can go with C. And if you're looking for a language that's object oriented, has modern features, and a mature ecosystem, then you can go with C. Not to mention that both C and C are established widely used languages with plenty of job opportunities. On the other hand, you have go a language that's laser focused on simplicity, great for rapid development, and with an excellent concurrency model.
00:02:49.100 - 00:03:34.212, Speaker A: It's especially great for building network services such as web servers, APIs, and microservices. It's also great for CLI tools and automation scripts, and there are plenty open go job positions. And then, of course, we have Zig, a language that also focuses on simplicity. In fact, their tagline is focus on debugging your application rather than debugging your programming knowledge, which I feel like is a shot at rust, but I'll let it go for now. Zig has no hidden control flow, no hidden memory allocations, and no pre processor or macros. This results in fast compile times and seamless compatibility with C and C without needing bindings or wrappers. It also includes some safety features like bounce checking, and comes with a package manager and testing framework.
00:03:34.212 - 00:04:35.934, Speaker A: So with all these options, why would anyone use rust? Now, I'm not going to sit here and tell you you should use rust for every single use case, even though that's absolutely true, you should use the right tool for the job. And there are certainly cases where C C go or Zig is the right tool. But Rust solves a major problem in the system's programming space in a way that no other language has. Rust gives you an extremely high level of performance, coupled with an extremely high level of memory safety. In zig, if we create an array with one element and then deallocate that array, we can still attempt to access the first element, which will result in the program crashing at runtime. In Rust, if we tried to do the same thing, we would get a compile time error, because the ownership rules would prevent us from making this fatal mistake. This is why we're seeing Rust get adopted for critical software like cloud infrastructure at AWS, the world's largest operating systems, Windows, Linux, and Android, and mission critical software in the aerospace industry, automotive industry, and other embedded devices.
00:04:35.934 - 00:05:06.496, Speaker A: For these use cases, Rust is proving to be an excellent tool. The fourth reason developers hate Rust is because they either think there's too much drama or too much hype. I get YouTube comments all the time saying Rust is useless, it's overhyped, it's going to die out soon, etcetera. And look, maybe you don't have a good use case for Rust, or maybe somebody at work is forcing you to use Rust against your will. And despite seeing a clear benefit. You see all these people online preaching the gospel of Rust. As a member of the Rust evangelism strike force, I get it.
00:05:06.496 - 00:05:41.866, Speaker A: Sometimes we could be a little much. Everyone is entitled to their opinion, but the numbers and success stories don't lie. Rust's momentum is continuing. A million new Rust developers joined the community over the last twelve months. Rust's subreddit has now surpassed the c subreddit, and Rust continues to be voted the most loved most admired language year after year. And we continue to see industry adoption by tech giants like Microsoft, AwS, and Google. So is the hype real? In my completely unbiased opinion, yeah, Russ might be a little overhyped, but the hype is certainly real.
00:05:41.866 - 00:06:20.612, Speaker A: But don't take my word for it. Look at the numbers, look at the success stories, and try it out yourself. On the other hand, some developers hate Rust because of the drama. It's no secret that the Rust foundation has had its share of controversies, entire teams leaving the restrictive copyright policy draft, which sparked backlash, and other governance related issues. Besides these specific issues, some developers see the foundation as too woke. In general, as a result of these controversies, a fork of Rust was created called crabbling to protest bad leadership and bureaucracy. Now, as someone who created an entire channel dedicated to Rust, I definitely have some thoughts on this.
00:06:20.612 - 00:06:51.054, Speaker A: In general, I think the drama is a bit overblown. I do genuinely believe that the Rust foundation is trying to do the right thing, and even though they made mistakes, they did also respond to the community's feedback and made adjustments. Ultimately, I think it's going to take quite a bit more than some drama to derail Rust's momentum. The fifth reason developers hate Rust is because it's too hard. And when people say Rust is hard, they usually mean it in two ways. First of all, Rust is hard to learn. You need to know a bunch of prerequisite computer science knowledge.
00:06:51.054 - 00:07:32.868, Speaker A: In addition, rust is a low level language, which forces you to think about how things are laid out in memory. And Rust has a pretty complicated and unique type system, things like the ownership and borrowing system traits and generics and macros which take a considerable amount of time and effort to learn. The second way rust is hard is that it's hard to read and write. Again, it has a pretty complicated type system and verbose syntax. You have to deal with multiple string types, smart pointers, lifetime annotations. I mean, you can't even write a linked list without having a mental breakdown. In addition to the type system and syntax, theres also the borrow checker dealing with compile time errors all the time can be very frustrating and definitely slows down productivity.
00:07:32.868 - 00:08:08.802, Speaker A: In fact, according to the 2023 Rust Community Survey, the biggest reason preventing people from learning rust is its difficulty. But honestly, Rust is not the problem. Dont blame a perfectly designed language on a skill issue. If you wanted something easy, then learn a language thats made for five year olds like go. Jokes aside, I know this is a very valid concern, which is exactly why I created let's get Rusty in the first place to simplify Rust education and make it accessible to everyone. And that's what I'll continue to do. If you want to jumpstart your rust learning journey, get your free rust cheat sheet by heading over to let'sgetrusty dot cheatsheet.
00:08:08.802 - 00:08:11.370, Speaker A: Hope you've enjoyed the video and remember to stay rusty.
