00:00:00.400 - 00:00:31.060, Speaker A: Writing clean, idiomatic code is not easy. You need to think about style conventions, code complexity, performance, and more. The problem becomes even harder when groups of developers are working on a single project. Luckily, we have a tool that allows us to write better code. I'm talking about linters. Linters automatically check code for style correctness, code complexity, code smells, and more. In today's video, we're going over how to take advantage of linting to improve your rust code.
00:00:31.060 - 00:00:44.356, Speaker A: Before we get started, make sure to get your free rust cheat sheet by heading over to letsgetrusty.com cheatsheet. With that said, my fellow Rust station Tommy will explain how to use linting in Rust.
00:00:44.508 - 00:01:21.290, Speaker B: Thanks, Bogdan. The rust compiler known as Rust C comes with a built in collection of lint checks, which are evaluated during compilation. You can see the full list of lints by running RuSTC w help or referencing the RuSTC book. Additionally, these lints are consolidated into several groups, which well talk about later in this video. Each lint is set to a level. The available levels allow, warn, force warn, deny, and forbid allow tells the linter to ignore violations of the lint. Warn tells the linter to produce a warning if the lint is violated.
00:01:21.290 - 00:01:49.724, Speaker B: Force warn is the same as warn, except it cannot be overwritten. Deny tells the linter to produce an error if the lint is violated. And finally, forbid is the same as deny, except it cannot be overwritten. Lets see how these lints can affect your code. Heres an example of a simple rust program. We have one struct named point and a function named getrandompoint. In main, we create two random points and print out one of them to run the rust c linter.
00:01:49.724 - 00:02:39.000, Speaker B: We can either compile the program or run cargo check. After running cargo check, we see three warnings, one for the unused variable bar, which violates the unused variables lint, one for the unused fields in the point struct, which violates the dead code lint, and one for a function name not being snakecase, which violates the non snake case lint. These warnings are omitted because by default their level is set to warn. We can, however, override the default level of these lints by adding lint attributes. For example, we can add the allow lint attribute to the point struct getrandompoint function and bar variable directly. Or we can add a crate level allow lint attribute at the top of main rs. These lint level overrides will affect all code in the crate.
00:02:39.000 - 00:03:21.862, Speaker B: Note that when adding crate level attributes, an exclamation point must be used after the pound sign. If we run cargo check again, we don't see any more warnings. Overriding default lint levels is useful for a couple of reasons. When prototyping, I tend to disable lints that have to do with unused code so I can focus on handling compile time errors. This can be done either by specifying the individual lints or a lint group. For example, we can change the level of all lints in the unused group to allow, which includes the dead code, lint, and unused variables. Linthe for production code, you might want to change the level of the unused lint group to deny so that unused code will cause compile time errors.
00:03:21.862 - 00:03:54.754, Speaker B: Additionally, you can change the level of the non standard style lint group to deny as well. After making those changes, running cargo check will produce several errors. To fix these errors, we need to update our function name to be snakecase. Use the bar variable and make sure the x and y fields of the point struct are used. Now that we have covered the basics of linting, let's discuss an additional tool rust comes with called clippy. Clippy is a collection of lints to catch common mistakes and improve your rust code. It's a superset of the rust C lints.
00:03:54.754 - 00:04:30.598, Speaker B: In fact, it runs cargo check internally, and it's a lot more opinionated than rust C. Clippy is also included by default when you install rust through rustup. If we run cargo check against our previous code example, we don't see any warnings. However, if we run cargoclippy, we do get a warning stating that we are using the blacklisted variable named foo. As you can see, Clippy is a lot more opinionated, which results in more lint warnings. Clippy also comes with some extra features. For example, you can run cargoclippy fix to automatically apply some lit suggestions.
00:04:30.598 - 00:05:00.290, Speaker B: Also, in addition to changing the level of clippy lints via attributes, you can configure lint levels in a separate file called Clippy Toml. To find out more about Clippy features as well as how to add new lints to Clippy, check out the Clippy GitHub repo. As you can see, Rust gives us great linting tools to improve our rust code. Before you go, make sure to get your free rust cheat sheet by heading over to letsgetrusty.com cheatsheet. With that said, ill see you in the next one.
