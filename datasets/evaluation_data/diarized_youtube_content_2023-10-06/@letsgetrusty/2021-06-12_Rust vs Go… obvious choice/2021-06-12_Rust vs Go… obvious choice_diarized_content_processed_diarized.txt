00:00:00.600 - 00:00:45.833, Speaker A: Now you might be wondering. Rust Go, both popular languages, both fairly new, both could do some of the same things. So how do they compare against each other? Well, you're in luck, because today I'm going to go over the specific technical details that distinguish these two languages, starting off with their mascots. Rust's mascot is Ferris the Crab. He's well designed, charming, adorable, and just puts a smile on your face. Go's mascot, on the other hand, looks like it was drawn by a third grader who turned it in as an art project and got a C minus. If the Go team put as much effort into designing their language as they did designing their mascot, I'd be worried.
00:00:45.833 - 00:01:41.009, Speaker A: Next, let's talk about simplicity and ease of use. Now, I keep hearing this argument that Go programs are faster and easier to write than Rust programs, and that what matters more than runtime speed is write time speed. I beg to differ. I think the pendulum is swinging back the other way. We used to over optimize for write time speed, and now we're seeing more of a focus on runtime speed and correctness. I mean, just a few years ago we decided to rewrite our backend services in the easiest to write most type unsafe language possible, JavaScript, a language that allowed you to do whatever the hell you wanted and pray that your six unit tests catch any defects before they hit production. Now we're writing front end code via webassembly using Rust, a language with a compiler that screams at you every two minutes because you can't follow some simple rules.
00:01:41.009 - 00:02:17.259, Speaker A: I mean, even JavaScript isn't accepted anymore. We have to tack on a level of safety by using TypeScript. All I'm saying is that write time speed isn't the end all be all when deciding which programming language to use. Now, a big reason why Rust programs are harder to write than Go programs is the difference between how these two languages manage memory. GO has a garbage collector because they don't trust you to manage the memory yourself. Instead, the garbage collector cleans up memory for you like you were a toddler. Rust lets you have control over your memory like an adult.
00:02:17.259 - 00:03:07.943, Speaker A: Now, of course, there is a system of ownership and borrowing which does most of the work, but it takes time to understand that system, and you still have to help the compiler understand how your memory is being used from time to time. So yes, learning and writing Rust is harder than learning and writing go, but nobody's going to respect you for doing something that's easy. However, people will respect you if you take the time to learn Rust's memory management system. If you read the Rust book, if you subscribe to this channel and watch every video and share the videos with your friends, that's respectable. Next, let's talk about community and support. Both these languages have a large developer community. The Go subreddit is currently sitting at around 150,000 members, while the Rust subreddit has around 140,000 members.
00:03:07.943 - 00:03:50.927, Speaker A: In my opinion, I find the Rust community particularly friendly. In fact, I posted one of my Rust tutorial videos in the Rust subreddit and got positive feedback. I tried to post the same video in the Golang subreddit and got immediately banned. How rude. Now, besides the developer community, we also have to look at the companies backing these languages. The Go project is developed by a team at Google with help from open source contributors. The Rust project is steered by an independent nonprofit organization called the Rust foundation, and it's backed by big reputable tech companies such as aws, Google, Microsoft and Mozilla.
00:03:50.927 - 00:04:07.155, Speaker A: Now, I know some of you think that I'm biased because I have a channel about Rust. So to even the playing field, I've scheduled a video call with a Go developer to to give his perspective. Hey.
00:04:07.655 - 00:04:08.955, Speaker B: Hey. How's it going?
00:04:09.535 - 00:04:12.315, Speaker A: Good. So you're going to tell us about the Goling, right?
00:04:13.135 - 00:04:23.395, Speaker B: Yeah, of course. I love to. So Go is actually one of my favorite language that I've ever picked up. One of my favorite features about the language is how you can.
00:04:28.505 - 00:05:07.363, Speaker A: I can't do it guys. I can't do it. In all seriousness, guys, Go and Rust are two different languages built for different reasons. If you're looking to quickly build software that's distributed, scalable and efficient things like backend services, then you might opt for Go. If you're looking to build software that's extremely performant, reliable, memory safe things like OS kernels, databases and web browsers, then you might opt for Rust. At the end of the day, it simply comes down to picking the right tool for the job. And no matter what you pick, I still love you.
00:05:07.363 - 00:05:19.835, Speaker A: If you would like to learn more about the Golang, check out Golang Dojo Link is in the description. And if you want to learn more about Rust, well, simply subscribe to this channel and with that, I'll see you in the next one.
