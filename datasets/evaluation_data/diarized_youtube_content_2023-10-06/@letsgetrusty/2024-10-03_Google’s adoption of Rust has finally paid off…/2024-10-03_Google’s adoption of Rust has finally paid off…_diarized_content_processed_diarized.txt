00:00:00.400 - 00:00:50.992, Speaker A: Google's adoption of Rust has paid off in a big way. In this video, we'll talk about how Google was able to cut memory safety vulnerabilities in Android by 52%. The fascinating discovery Google made by analyzing their vulnerabilities and their future plans for rust adoption. Since 2019, the Android team has been focused on writing new features in memory safe languages. Specifically, they've been using Rust instead of C or C for new systems level components because Rust is just as performant and provides memory safety guarantees. They've also been using Kotlin instead of Java because it has advantages like null safety and this strategy has had a major impact. In a recent blog post titled Eliminating Memory Safety Vulnerabilities at the Source, the security team at Google revealed that memory safety vulnerabilities in Android dropped from 76% of total vulnerabilities to just 24%.
00:00:50.992 - 00:01:32.935, Speaker A: That's a whopping 50 plus percent decrease, which is pretty crazy. And all of this is due to a counterintuitive phenomenon. Here we see a chart simulating the adoption of memory safe languages for new features in a code base. Over the years, the lines of code written in memory safe languages dramatically increase, while legacy code written in memory unsafe languages gradually increases as the code base is being maintained. This strategy counterintuitively results in a drastic decrease in memory safety vulnerabilities over the years. Google discovered that the reason for this is because memory safety vulnerabilities are overwhelmingly found in new or recently changed code. As code matures, it gets exponentially safer.
00:01:32.935 - 00:02:11.131, Speaker A: Which makes sense. The longer a piece of code is running in production, the more battle tested it is. So just by adopting memory safe languages like Rust as well as Kotlin for new features in a code base, you get a massive reduction in memory safety vulnerabilities. But that's all theory. What happens when you apply this strategy to a real code base? Well, that's exactly what the Android team attempted. You can see from this chart that the lines of code written in memory safe languages have increased over the years as the Android team prioritized building new features in Rust and Kotlin. For example, the new ultra wideband stack which manages file sharing, device pairing and more was written in Rust.
00:02:11.131 - 00:02:45.355, Speaker A: And the new key store system which manages cryptographic keys was also written in Rust. In general, using Rust for these low level components makes sense because Rust is a systems language. Now. Notice that the lines of code written in memory unsafe languages have also increased over this time period. But despite that, the number of memory safety vulnerabilities has drastically decreased because the Android team has deliberately wrote new features in Rust and Kotlin. They also noticed a few key benefits from using Rust. Specifically, they mentioned that the rollback rate for Rust changes is less than half that of C.
00:02:45.355 - 00:03:45.769, Speaker A: This means that changes to C code are twice as likely to cause bugs that need to be undone compared to changes to Rust code. Now, because of this success, Google is doubling down on making it easier to write new features in Rust. To do this, they're investing in improving interoperability between Rust and C, and between Rust and Kotlin. Earlier this year, Google gave a $1 million grant to the Rust foundation to improve interoperability between Rust and C, and they're actively working on developing open source tooling like Krubit, which is a C and Rust bidirectional Interop tool, or autocxx, which is a tool for calling C code from Rust in an automated way. Tools like these will make adopting Rust easier not only for Google, but for other companies as well. Now we know that in 2022, when Android 13 was released, about 21% of all native code was written in Rust, which amounts to about 1.5 million total lines of Rust code added to the Android project.
00:03:45.769 - 00:04:28.885, Speaker A: Unfortunately, we don't have the updated stats for 2024, but hopefully we get them soon. In general, it's great to see that Rust adoption has paid off for Google and their commitment to continue investing in it. My good friend who works on the Google Security team actually confirmed that most of his co workers are now using Rust in one form or another, and it's likely that other companies will follow Google's example, especially knowing that just by writing new code in memory safe languages like Rust, memory safety vulnerabilities drastically decrease. If you're interested in becoming a Rust developer or are simply curious about the opportunities, make sure to get your free rust training@letsgetrusty.com Bootcamp Hope you've enjoyed this video and remember to stay rusty.
