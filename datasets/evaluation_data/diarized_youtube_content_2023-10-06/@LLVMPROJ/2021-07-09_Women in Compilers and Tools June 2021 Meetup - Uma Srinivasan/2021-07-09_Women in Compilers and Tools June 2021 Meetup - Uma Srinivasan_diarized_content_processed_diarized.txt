00:00:09.530 - 00:01:02.080, Speaker A: Thanks for coming for this talk. It's been an exciting journey for me to even prepare for this talk. It was a trip down memory lane. So I was wondering where I should start, and I thought, okay, say, how about what is a compiler? But don't worry, I'm not going to give a compiler tutorial. So recently I came across this tweet where the tweeter was trying to define what a compiler is based on different perspectives of whether you're an input purist or a neutral or rebel or so on and so forth. And so with that he came up with this chart and I thought that was very intriguing. And I responded by saying that oh, I'm a compiler, you're a compiler, it's compilers all the way down.
00:01:02.080 - 00:02:30.706, Speaker A: So today I will be talking about my experience working with compilers across several decades. So with that, starting in the 1980s is when I joined the Hewlett Packard compiler language lab. And at that time there were lots of different languages being compiled and the production compiler would handle different kinds of input. And we used to have code generators targeting specific machines, like the PA RISC at that time was the dominant architecture. I mean it was new, but that's what the R D lab was focused on. And the common backend co generator, if I remember correctly, was written in Pascal. Recently I came across some code and there was a couple of intermediate representations like Ucode and slick, and there was one low level optimizer and it handled both the machine dependent and the independent optimizations.
00:02:30.706 - 00:03:33.940, Speaker A: And that was written in C. And the compiler was tied at the hips with the operating system, so the compiler wouldn't get released unless the operating system gets released, which is once in a couple of years, if I remember correctly. And my initial projects were on cobalt packed decimal code generation, so cobalt, unlike the other procedural languages like Fortran, Pascal, C, et cetera, it had some unique data types and that needed to be translated to the underlying machine. And this is a new risk machine. So there was work already done in that area by the team that hired me, but I was in charge of supporting that code and getting to learn the ropes, so on. And so. Sorry, that was my first experience with.
00:03:33.940 - 00:04:23.506, Speaker A: Sorry, I'm having trouble with my mouse. Yeah, that was my first experience with a production compiler and co generator. Then there was this thing called architecture, architecture neutral distribution format. And it was something that I think the open Software foundation was soliciting submittals, proposals for. And you can look at this as a precursor or a predecessor of Java bytecode. Java came much later so I got to kind of work on whatever needed to be done with a few others who were leading that proposal. So that was fun.
00:04:23.506 - 00:05:24.340, Speaker A: Those were some learnings that I had and the questions I had at that time. Since I was coming from academia, I was wondering why the c code generator was different from the other languages and Ada was in the process of being implemented. The support for Ada. And how about a machine independent optimizer, which is separate from Llo, and then which backend? We were also in the process of the Apollo acquisition, so we had two different backends. And so there were some conversations and discussions around that. And then what about automatic code generation? So all this stuff, I was able to remember many of these things. Thanks to the Packard journals, the archives are available to everyone.
00:05:24.340 - 00:06:22.918, Speaker A: So remember I was talking about cobalt code. I actually found snippets of code that I was actually supporting in 1987. Yeah, it was a deja vu moment. So there was this idea of milli code routines, not microcode, not macrocode, but millicode. So for cobalt especially, we needed to implement these routines, whichever operations that are not directly mappable to the underlying machine. So yeah, I'm providing all these links in the slides, so those who want to go browse can have fun with that. So, this was my first job, proper job.
00:06:22.918 - 00:07:36.042, Speaker A: I was a ta before, and it was in the heart of Silicon Valley. And I had come from India, where my exposure to programming was with Photron 77. And we literally wrote the programs on paper, and then we typed them onto punch cards, and then we submitted to the controller, or whatever you call the person at the counter who takes the batch jobs and runs them through the IBM 360. And then you get your results back the next day or something. And then if you make mistakes, like for example, syntax error while punching or typing, then you will find out only the next day. Right? I also had the opportunity to work with 880 assembly code. And then I was very fortunate to be able to work on my thesis, which was based on x 86 core generation, written in c on a wax workstation.
00:07:36.042 - 00:08:40.260, Speaker A: And all these computers, they were kept only in air conditioned labs because the temperature outside is 40 degrees centigrade or whatever. So those labs are quite a distance from the dorm. So work gets done, programming gets done only by going to the labs. And then when I went to grad school, that was my opportunity to take the first compiler course, and that involved a project developing an ADA cogenerator. So I got to be a TA in the Mac lab and there the pascal compiler, and the UI would report syntax errors even as you type them. That was pretty amazing for me. So this was sort of kind of a radical difference in the experiences that I had working with computers in the.
00:08:40.260 - 00:09:26.754, Speaker A: So what was the HP work culture like? It was the HP way. Teamwork stands out even today. The whole team was local in Cupertino, where Apple is right now, have their building. And my colleagues introduced me to the Cicero's pizza place and the Lafiest mexican place Florentines. And they are still my favorites today. Right. And anytime anybody, there's a special event to celebrate or if a new person comes, these are the places we would go to.
00:09:26.754 - 00:10:23.362, Speaker A: The team would go to then with the Apollo acquisition, as I said, there was a little bit of discussion and friction because that team was coming from a totally different culture and background from. Although the technology area is pretty much the same. And we had open cubicles, we had co printouts, dump terminals, and a solid wooden desks, which I literally went under during the Loma Priya earthquake. And we hardly ever traveled, except when we went for conferences. And women were respected and influential positions. And at that time it was called the compiler language lab. So Carol, I don't know if she's in the audience, but Carol eit now.
00:10:23.362 - 00:10:47.418, Speaker A: Sorry. She was one of my interviewers. My first and hiring manager was Debbie Kutan, and that was a woman. And the second level manager was a woman. Lots of women managers. And there was no dual ladder at that time, which means that the only way you get recognized and promoted is to be a manager. Imagine that.
00:10:47.418 - 00:11:48.510, Speaker A: So it was a very family friendly environment because most of these women had a family. So they were working as engineers or managers, as well as taking care of their family. And some of the benefits and incentives at that time were like profit sharing. ESPP was there, stock awards and options, and we could accumulate our lead across the years. Being in California, that's one of the benefits. So who were some of my mentors, role models, colleagues, friends and family? I deliberately did not assign people into categories because I think the roles they play changes over time. So, for example, my first and foremost inspirational person is my brother.
00:11:48.510 - 00:12:36.320, Speaker A: So he was the one who motivated and inspired me to join the engineering college in IIT Madras, and also to pursue computer science and specifically compilers. And he went to Wisconsin Madison as well. And he introduced me to his advisor, who also happened to be mine. So I took my first compiler course with Fisher. And my brother by then was pretty well established in his field, and his focus was mostly on retargetable. Compiler code generation. And then he was the one who.
00:12:36.320 - 00:13:34.530, Speaker A: Sorry about was I shouldn't touch my mouse. He was the one who introduced me to Fran Allen. I didn't meet her at that time. I met her much later. But her work at know, especially loop unrolling and all the loop optimizations and so on and so forth. And of course, I got to know about Ada because both HP as well as in my grad school, I was playing around with the ADA co generator then at HP. I'm sorry, Carol, I don't know if you mind having your picture from the 1980s.
00:13:34.530 - 00:14:23.154, Speaker A: This is taken from the Hewlett Packard Journal. And so Debbie Kutant later on went on to become the CEO of Tallient, but she was my hiring manager. And then Bill Buzby, whose code I showed a little couple of slides ago, he was my mentor, especially for all the cobalt code generation stuff. And Carl Perris and Vatsa were working on the LLO. And Carl wrote this seminal paper. He did this work on profile guided code positioning. What was it called at that time? PGO, something like that.
00:14:23.154 - 00:14:56.940, Speaker A: So that was one of the early works on profile based optimization. And so, moving along. So I felt a bit guilty putting everybody else's pictures. So that's me on my grandma's lap, and then my parents are behind and my brother standing next to me. I was very scared of the photographer. I was planning on putting more pictures, but I didn't get time. Maybe I'll do it in the final.
00:14:56.940 - 00:15:29.250, Speaker A: Okay. Compilers in the 1990s. How am I doing on time? Should I speed it up a bit since I'm going compilers all the way down? You're good. Okay. You're good. All right. So this is when the idea of getting a high level optimizer in the 1990s became significant.
00:15:29.250 - 00:16:23.858, Speaker A: And as you can see, we introduced the high level optimizer for C and C plus plus and Fortran. And part of it was influenced by, I think, the Massachusetts language lab. The acquisition. I don't remember which acquisition, whether it was Apollo or the one. So this diagram, this beautiful diagram is from this paper or presentation that Anne Holler did. She's also one of my colleagues, longtime colleagues. And this was when I got to get my first publication on scheduling across basic blocks.
00:16:23.858 - 00:16:38.460, Speaker A: And it was published and presented as CC 94, and also worked on an intelligent, loop unrolling pattern that came later. Okay.
00:16:41.150 - 00:16:43.690, Speaker B: Anne and Carol just gave you a holler.
00:16:44.270 - 00:16:56.020, Speaker A: Oh, okay. Would you like to unmute and say something? Anne, please keep me honest. And Carol, all sounds good. To me. Okay.
00:16:56.550 - 00:17:04.290, Speaker C: I just commented that it was indeed the former Apollo compiler team that sort of spearheaded the high level optimizer work.
00:17:04.440 - 00:17:36.174, Speaker A: Yeah, great. Thank you. Thanks, Carol. All right. And then the next big thing, which was itanium. So we went all the way from PA risk to epic code generation optimization. And Carol at that time was our compiler architect, and she was going around helping design and architect both the hardware and the compiler at the same time.
00:17:36.174 - 00:18:28.830, Speaker A: And there's a link to one of her presentations where she talks about what there were so many new things that compiler writers had to take care of. So what I remember most from that period is my work on loop unrolling and modular scheduling. And also I did some work with Watsa on supporting the IA 64 math functions. And there's a book written by Peter Markstein on that, and I kind of saw what he had written. As I said, it was a trip down memory line. I was trying to remember what were we trying to do at that point in time? And a few papers and patents came out of this whole thing. Right.
00:18:28.830 - 00:19:23.202, Speaker A: And in essence, we compiler writers literally enjoyed doing whatever we did at work, regardless of what's happening with the product and with the world outside. So it was truly a time of growth and very deep motivation for me. So what was the work culture like? Yeah, now we have a dual ladder few, so we don't have to become a manager. So there was intense teamwork and collaboration across countries. Across the country. Sorry, not countries, across orgs and across companies. So the compiler language lab now became the California language lab and the Massachusetts language lab.
00:19:23.202 - 00:20:35.030, Speaker A: And then we had a lab in Texas Richardson. And I think that came with a compact acquisition, if I'm not mistaken, and especially with respect to modulo scheduling and the is 64 math functions. And there were several other things that both the production team as well as the research labs were collaborating very closely. And on top of that, the HP production compiler team as well as the itanium intel compiler teams would meet once in a while. So it was one big. I don't want to call it a happy family, but it was a one big family trying to collaborate with each other. Some of the benefits were, yeah, we got family, I think it is called FMLA or something like that, that probably showed up in the went telecommuting, and I was telecommuting from Ithaca, I was using ISDN even as I was developing the modular scheduler.
00:20:35.030 - 00:20:56.400, Speaker A: And there was a reason for that. And I'll become in the next slide. And this was sort of the beginnings of working from home. And also we start seeing mention of significant other in terms of benefits. Right. I don't think we had that before. Okay.
00:20:56.400 - 00:22:08.500, Speaker A: All right, so who were my role models, mentors, colleagues, friends and family? This is in addition to who all those I mentioned in the previous decade. So Bob Rao was one of the key leaders in the modulo, especially for modular scheduling for titanium like architectures. And Peter Markstain, I already mentioned that, worked with him closely. He was different in that he would always come instead of us going to labs, he would always come to the Cupertino lab and talk to us and work with us. So that was an interesting style that he had, which was just kind of nice. And of course Anne, this was not what Anne looked like then. I'm sorry, I don't have a picture of Anne from the 90s, but this is what I found is a more recent picture of her.
00:22:08.500 - 00:22:48.562, Speaker A: So Anne told me that she's retired now. Is that right, Anne? Congratulations. Yes, that's correct. Awesome. Okay, then we have Teresa, who continues to be famous. She was part of the Itanium compiler team as well. She worked on the optimizer, the low level, high level optimizers, and she continues to do, she's very involved in CGO and she continues to do some awesome work at Google.
00:22:48.562 - 00:23:35.378, Speaker A: So don't know if Theresa made it today, but it was fun working with you, Teresa. Okay, what else is happening? Okay, this is the family part. And so my colleague and my friend became, my husband became family. And then we had a daughter. So those pictures on the right are with the lower right is my mom and my daughter, and upper right is my grandma and. Oops, sorry, my grandma and my daughter. So that's like three generations of four.
00:23:35.378 - 00:24:18.090, Speaker A: Can't count. They were all instrumental in supporting me and encouraging me and being my cheerleaders. And they were my mentors for life. So I owe it to them for whatever successes and experiences that I've had. Okay, next, compilers in the high level optimizer. We had a funny name for it, it was called the middle end. And so now we started seeing them in production.
00:24:18.090 - 00:25:12.160, Speaker A: So we presented this paper and that was my first exposure to CGO in 2004. And soon after that, in 2004, I joined intel. And their intel research was actually looking into atom, what was called minicore or what later became atom processors. And interesting thing about them was they were not dynamically scheduled processes like the other X 86 ones. So it required some level of compiler optimization like superblock scheduling. So that was one of my first tasks out there. And later I got to work with the.
00:25:12.160 - 00:26:17.682, Speaker A: I shouldn't say most, but a good part of my stay at Intel I was working with hardware architects, designing software and compiler features, or designing hardware features that would get us performance through software that software can use. So hardware automaticity for reliable. So this was, I don't know what the TSX or something like that. That was part of Hasbro released, part of Hasbro processor. That was one of the research works that I got to play a role in. And in the meantime, the Java world was also getting to be more and more interesting. My first Java one talk was although from HP, because HP was getting into Java on itanium.
00:26:17.682 - 00:27:07.922, Speaker A: So our first product was based on the classic JVM. And then it was only later that we moved to the hotspot JVM. So I was very nervous. That was probably one of the biggest audiences that I had for any semi technical talk. What was the intel work culture like? So they were that period shifting from being hardware centric to having a growing awareness for software. So in production, timing is everything. So there were like roadmaps and tpms and PMs galore, and there was this notion of disagree and commit and more and more women were being hired.
00:27:07.922 - 00:27:56.130, Speaker A: Why? Because you find more women in software than in hardware. That's not true anymore. Today, I think, thanks to a lot of efforts being put by many hardware architects, the research labs was under pressure to deliver to the production teams, so connect with products as opposed to doing blue sky research. There was globalization of the engineering workforce. So my manager was in Oregon. My team members were across the US and China and Russia, Australia, even in Argentina. I actually got to travel to Novo Sibersky and Russia and Poland.
00:27:56.130 - 00:28:39.534, Speaker A: And it was mind boggling. And I wouldn't say that it was the most efficient way of engineering something, but nevertheless it was an interesting experience. So intel probably still is very results oriented. There was meritocracy, but it was through intel that I learned about Borg Institute and the Grace Hopper conference. And I even got to lead a panel, or sorry, I didn't lead a panel. I proposed a panel that got accepted. I think Carol was on the panel, if I'm not mistaken.
00:28:39.534 - 00:29:29.234, Speaker A: I got to meet Fran Allen out there. So one of my heroines and intel is where I heard about women fellows, the highest level in the technical ladder fellows. And let me not forget that I think Carol was the first HP woman fellow. So I feel very proud of having worked with and being mentored by so many significant. I shouldn't say significant, it's important women. So intel had the sabbatical leave, and that's where I heard about rsus. Now, I don't know what Professor Feynman said.
00:29:29.234 - 00:30:15.460, Speaker A: He said something about science is based on doubt and religion is based on faith or something like that. I forgot to look it up. So what I wanted to say is that still like work, there was talk of work, life balance and all that. We were quickly figuring out that you cannot separate the rest of life from work and you cannot separate work from life. So we just have to come up with some balance across life. But still, religion and spirituality, they were still outside of the scope of work and friends. Right.
00:30:15.460 - 00:30:58.720, Speaker A: So who are my role models? Mentors? So I got to meet Carol Dulong in the labs and Tatiana as well. So they are both very well known in the compiler circle. And then I met my good friend Sandhya. She joined the JVM team when I was there working on the. So these are some recent. Oh, and I got to talk to Paul Otolini. So I never got to meet Hewlett and Packard in person.
00:30:58.720 - 00:31:29.146, Speaker A: I only saw pictures of them. I didn't even get to hear them, if I'm not mistaken. But when I joined intel, I got to meet the CEO and in fact, this was some intel labs research day or something, and I was talking about the research the team was doing. All right. Other role models. Yeah, Grace Harper. That's when I heard about it.
00:31:29.146 - 00:32:42.880, Speaker A: Was this. Heard about her and yeah, I didn't know that she was instrumental in the development of cobalt, but, yeah, the things you get to know about people who've done some radical work before you. That two women and two of my nieces graduated in cs from UC Berkeley, and they are professionals now, part of them. You might have met them in various forums that involve women. And also, that's where my spiritual journey started and taking on a new intensity, and that's continued so far, and that has helped me integrate all aspects of my life. These are my coaches and cheerleaders. 2010.
00:32:42.880 - 00:33:23.026, Speaker A: So the hardware software codesign continues now, this time with gpus. So Carol and Anne were chairing the CGO 2012. They were the general chairs, and I was one of the program chairs. And the keynote was done by my manager at that time, David Blythe. And he talked about hardware software codesign for visual computing. And that is when I got to meet. There is this new shader compiler that they decided to build, and that was called IDC.
00:33:23.026 - 00:33:49.122, Speaker A: And that's where I met Anupama and her cohorts. There were quite a few women in your team, if I'm not mistaken. Even my team, although we were part of the architecture group, we had quite a few women. So that was interesting. And that was my first exposure to LLVM.
00:33:49.186 - 00:33:54.840, Speaker B: Yes, Anupama, I was just saying that we even have Jayashree from that team here at this.
00:33:55.210 - 00:35:04.010, Speaker A: Okay, that's great. Then I got to work with a different team of architects who are trying to build a spatial accelerator. I think they're still doing it, if I'm not mistaken, which will be released like, I don't know, a decade hence or whatever. But that was a new experience for me in terms of code generation, code generation. I got to do co design with the XVax and the alpha hardware architects and the X multiflow titanium compiler and titanium compiler architects. So those were some very interesting times as well. And then for something completely different, when I joined Twitter I had no clue what Scala was, but Twitter is a very heavy scala user and the front end of Scala is written in Scala.
00:35:04.010 - 00:36:11.794, Speaker A: But what bothered me a lot is that programming in Scala is very dependent on the tools. For example, if you don't use an ide, or if you're not fond of using ides, then you're kind of lost because you wouldn't be able to use the libraries or the support structure that is available for the language. And so I can't just bring up a Vi window and start programming in Scala. So that was a huge hurdle for me. But I got to learn quite a few things and there were many tools, linter like tools, and even semantic rewrite tools like Scalafix. And I actually managed to do a talk on scholar fix at a type level summit after I joined Twitter. I mean that was amazing in the sense that I still don't know Scala very well.
00:36:11.794 - 00:37:25.820, Speaker A: I mean, it'll be very hard for me to program in it, but definitely the vm, the backend, which takes Scala or Java code or regardless, it's all bytecode. That gral jet is written in Java. And so we've been having a gral workshop associated with CGO for the past two or three years. And so the fun part of working in the cogerator and optimization area is that you don't really need to know any of the languages. For example, I don't know cobalt, I don't know, I mean, I know a bit of Fortran, but I've forgotten c, of course c. C is one of our languages, or some of our languages that we are most comfortable with, systems languages, but the other languages I listed quite a few, like transact and rpg. So once they're all translated to the intermediate representation, you really don't have to know much about the front end.
00:37:25.820 - 00:39:02.620, Speaker A: So what is this gral compiler? It's handling a zillion different languages. And remember when we started, I was talking about the compiler that was tied at the hips with the operating system. That's no longer true. So now it is very flexible, and it is available in several different environments, regardless of front ends and back ends and the platform. So the applications of grawl are, as I mentioned, you can use it in any several different forms, right? You can use it as a jet, you can use it as an ahead of time compiler, or as an embedded compiler and so on and so forth. Okay, what's the Twitter culture like? So, Twitter, I think, gave me a new meaning for inclusion and diversity. So it used to be just gender diversity, but now there are so many different brgs that I am part of some of them, but I've left out quite a few in my list here.
00:39:02.620 - 00:39:30.660, Speaker A: There's one for blacks and there's one for Latinos. And now I think we have one for Arabs as well. And then I get to work with so many. I belong to the baby boomer generation. Proud to say that. And I get to work with the gen X's, y's, the millennials, as well as the Gen Z's. Right? So I think that's quite awesome.
00:39:30.660 - 00:40:32.882, Speaker A: We have this program called Tech Women, which even makes it even more global. And this is a state department program, and internally we have a program called Male Allies, where people can decide to support. They provide sponsorship and support for women at women or other diversity and inclusion brgs and communities. So what I found was the lines got fudged between work and family. So there's a work family, and then there's a non work family. So where do you draw the line? They're open offices. And now with the pandemic, we have home offices.
00:40:32.882 - 00:41:07.678, Speaker A: So working from home is a. A permanent thing for many people. And then with Twitter especially, the line between customers and employees is pretty blurry. And humans, besides humans, pets and plants are also considered to belong to the family. And each have their own. Some of them have their own identity on Twitter. Some of the benefits were meditation rooms, unlimited leave, pre lunches.
00:41:07.678 - 00:41:58.002, Speaker A: These are all new to me. It's not new to people of the current generation. Okay. Some of my role models from intel, Sylvia Downing, she was my first manager in the GPU architecture team. I worked very, quite closely with the IGC team and also the dataflow architecture team at Twitter. Jack. Yeah, Jack and his staff are very inspiring and I am very grateful for having Jack as the leader of the company.
00:41:58.002 - 00:42:51.538, Speaker A: And he always motivates me. His attitude and the way he serves the company and everyone else is part of the company and society, I should say. He's a leader. He's a thought leader. So a couple of Jennifer Fraser, she was at Twitter, now she's at Apple. And I'm thankful to her for bringing in the introducing us to the tech women program and my male allies, partner, friend, crime, Kevin. And of course, I've relied on my women friends, Dorothy Ordo, I think she's on this call.
00:42:51.538 - 00:43:25.630, Speaker A: Katia and Elizabeth, I don't know if she's around today. I think she's on vacation. So thank you all. You made my life really very helpful and beautiful. I would be remiss if I don't call out the Twitter VM team. It's one of the best teams I've worked with. And Ian Brown, who was my manager and is also my mentor.
00:43:25.630 - 00:44:05.258, Speaker A: And of course, the women in the team there's joined. I was probably the first woman to join the team. And then Nora joined soon after I did. And now we have two new interns. Yunji from University of Michigan and Maura. If you're on the call, if you want to unmute and introduce yourselves, that will be great. Nora, are you on the call? Yunji is there.
00:44:05.258 - 00:44:07.340, Speaker A: Hey Yunji, why don't you go?
00:44:08.510 - 00:44:55.100, Speaker D: Yeah, yeah, go first. Hello everyone, my name is Yunji Pan. I'm going to be a third year PhD student at Umich and my advisor is Professor Scott McKee. Like my previous research project is the convolutional neural network accelerator, although I think it is less related to compiler, but I'm also interested in the compiler optimization. So I'm very lucky to join the theta VM team and have UMa to be my mentor. And I think I'm working on the grow VM and do some optimization like the auto vectorization. I'm very happy to meet you here.
00:44:57.470 - 00:45:43.958, Speaker A: Yeah, Yunji has also worked with LLVM, so she's familiar with so. And then I had two grand nephews and one grand niece. So what do I look forward to in this decade? Compilers for ML. There's a c four ML workshop and Tatiana has been running that for the past few years. ML for compilers. So our Twitter VM team has worked on this auto tuning of optimization flags using ML by asian network. Then we have had ML for being used for JIt optimizations.
00:45:43.958 - 00:46:43.754, Speaker A: We haven't put it into production yet, so there's quite a bit of work needed in that direction. And of course, Chris Latner talked about the golden age of compiler design in his Asplus keynote this year. And last but not the least, we have a women at ML group within Twitter. We support each other, and it's been really exciting being part of it. What's been my learning so far? Life is one heck of a deep learning neural network. Our experiences and inferences depend on the input and the training we get, and I think that they're all heavily weighted by our own models, our mentors, colleagues, friends and family like you. So what are your learnings thoughts? May be fleeting, but tweets live forever.
00:46:43.754 - 00:46:56.850, Speaker A: Would greatly appreciate your sharing your thoughts, what you heard. So I'm sorry I may have gone over time. If there are any questions, I'm happy to handle.
00:46:57.590 - 00:47:49.890, Speaker B: Oh, not at all, Omar, we have time, so thank you so much. This was awesome. As others have commented, it was great to hear your career through the years, and also it was so inspiring to see so many women. As you mentioned, in doing such significant and important work in the field of compilers, we are always looking for more women role models to keep us going on this path. I guess now we can open up for questions, and if people have questions you can unmute and we can start grilling Omar for some more details.
00:47:57.930 - 00:48:08.540, Speaker A: Even if you don't have questions, it's okay to share. If I missed something or something that I said reminded you of something else, feel free to share.
00:48:11.150 - 00:48:37.010, Speaker B: Okay, I'm going to get the conversation rolling with the first question. And I guess my first question would be that you've done so much, and over the years, how have you managed to balance work responsibilities, publishing at conferences, and staying up to date with all the new advancements in compilers?
00:48:41.990 - 00:50:32.018, Speaker A: To me, looking back, of course I heavily relied on my support network, which is why I kept talking about them, my immediate coworkers, colleagues, the team, and of course my mentors as well as my family members. Right? So it's hard if we were to try and do everything perfectly at the same time. So the whole thing was kind of a learning process. I must say that technically being motivated, or being very interested in something, and being curious and willing to put in the time, if we are able to satisfy our own curiosity and our own motivation, then the results will, regardless of what the results are, regardless of what other people say, whether it's a failure or a success. It's a success for you. So that is most important that you need to define your own success criteria, right. And let's not get too caught up in the details and have a kind of a high level perspective and not get so focused on some one thing like either work or a family thing or something like that, and ignoring everything else, then we would get into trouble.
00:50:32.018 - 00:50:54.814, Speaker A: Right. So people are important. Number one, maintaining relationships with people is very important. Number two, prioritize and do time management. Aggressively manage your own time. You can't manage other people's time. It's very difficult.
00:50:54.814 - 00:51:08.130, Speaker A: Manage your expectations. So these are what I would do in hindsight. Not that I always did all of that, but that's what, as they say, 2020 hindsight.
00:51:10.710 - 00:51:40.300, Speaker B: I guess a follow on to that is that since you mentioned mentors as playing such a crucial role in your development, do you have any tips you can offer about, I mean, was it an organic process through which you had your mentors or did you go seek them out? And how did you manage to have a successful relationship with your mentors where both of you benefited from that relationship?
00:51:41.010 - 00:52:26.310, Speaker A: Yeah. For me, I would say it was more organic than actually seeking out people. So what I would do is, what happens is that what I found is that you would go and approach people who you think you would like to be your role models or people who you admire or people who you think are doing the right thing and you would like to do what they are doing. Right. It's not necessary that you will have one mentor for all parts of life. Right. You can have different mentors for different aspects.
00:52:26.310 - 00:52:52.082, Speaker A: For example, I consider my guru or my life coach as my overall mentor for life. Right. But if I want to know something in a technical area or career wise, I wouldn't go and talk to him about it. That's not the area of interest at all. Right. So you can have many mentors. That is one thing.
00:52:52.082 - 00:53:21.120, Speaker A: Right. And so number two, what is it that you're looking for and who has that that you want to get advice with? To begin with, our parents are our mentors. We don't know it. Right. And that was natural and organic. We don't even realize they were our mentors until we become parents. Yeah.
00:53:23.010 - 00:53:37.700, Speaker B: That'S true. I remember reading a book once called tribe of mentors, and that expression stuck with me that we need to have, like, a tribe of mentors for different aspects of our.
00:53:38.230 - 00:54:07.290, Speaker A: Exactly, of our life. And more recently, the word sponsor has become more important than mentor. So mentorship is important, but if you're looking for advancement in career, for example, it's important to get sponsorship as well. So you have to specifically look for a sponsor who may not be a good mentor, but they can be a good sponsor.
00:54:08.510 - 00:54:09.900, Speaker B: Okay, makes sense.
00:54:11.730 - 00:54:25.810, Speaker C: So, uma, do you have suggestions on finding a good sponsor? That's something I was never very successful at. I'm retired now, but that would have been a good thing to understand as to how to seek out a good sponsor.
00:54:26.790 - 00:55:10.814, Speaker A: Yeah. So what I've understood is I haven't actively gone and sought sponsors, but standing on the site, again, hindsight. In hindsight, I feel that we need to establish a connection or relationship with someone who's in a position of authority and influence. Right. So regardless of whatever career it is, and there are people who kind of can, even if they themselves are not the decision makers, they can influence the decision making with respect to your career. Right. So one needs to actively go and approach them.
00:55:10.814 - 00:55:59.900, Speaker A: And I never did. You have to go approach them, network with them, understand what they're looking for, and follow their guidance and direction. And then I think you will get their sponsorship automatically. Again, it's all theory as far as I'm concerned. And sometimes we just have to let things happen. Kind of acknowledge that there is a higher power, or higher, I shouldn't call it power, but a higher entity which is taking care of things. Everything is happening the right way.
00:55:59.900 - 00:56:46.184, Speaker A: So having faith in that entity. So faith also helps, and we perform better when we are less anxious and less stressed about something. So I was going to say that Twitter is also where I found that my spiritual journey was integrated with all other parts of my life, which wasn't true before. And I'm not trying to say that the reason is the environment or the exterior. It is just me, it is just my journey. And then I have realized that it is possible to have. So I had to take out some of those tweets.
00:56:46.184 - 00:57:18.100, Speaker A: Like Twitter culture, one team is a big thing, and I already mentioned the INd part and how many of those lines were fudged. Right. So having that sense of belonging and oneness, it really destresses oneself. So we are not like, there's no. What should I call it? Some cutthroat competition. It's not necessary.
00:57:23.540 - 00:57:36.660, Speaker B: So, uma, we have another question for you. Was there ever an aha moment in your career, a moment where you felt this is why you chose or stuck to a career in compilers?
00:57:43.160 - 00:58:49.852, Speaker A: So, yeah, I've enjoyed every bit of the journey, like understanding how production compilers work, how hardware software codesign can happen, how you can actually design hardware, which takes so much time, and how you can influence that. So those things were a lot of fun. And now at Twitter, the next interesting I don't know anything about ML at this point in time, but that's an opportunity for me to go find out more and maybe there is something in there. So I wouldn't call it a single aha moment at any point, but somehow at every point I start at the outskirts. For example, when I joined Twitter I was actually part of the Git team, which had nothing to do with compilers per se. But slowly over a period of time I got attracted to the scala side of things. And then I came home to the VM team and then I'm working on compilers again.
00:58:49.852 - 00:59:37.872, Speaker A: So the same thing happened at intel as well. There was a period at intel where I was working with netbooks and HTML five and Webgl, and nothing to do with compilers really, but Webgl took me to gpus and then again I was back to working with. So everywhere, doesn't matter where I start. Somehow I seem to kind of, it's like a homing bird I come and zone into that is my inner core and that's where I kind of rest, so to speak. But that doesn't stop me from exploring other things. I look at other things and then eventually I land in compilers. So that is just an observation.
00:59:37.872 - 00:59:45.150, Speaker A: It's not an aha moment, I think. So each one of us has to find that resting place for us.
00:59:47.760 - 00:59:59.040, Speaker B: So another question for you is how was your transition from research compilers to production compilers and now open source compilers?
01:00:00.660 - 01:00:50.860, Speaker A: So there was a lot of R D happening at HP, but I was never part of the pure research team, the labs team. So whatever research was done was always resulting in something in production. And I was mostly in the compiler team at intel. That one year that I spent in research I felt weird because I had already spent 17 years at HP. So it was a new experience for me. And at that point I felt that there was a lot more focus on publishing. But at the same time the company was putting pressure on taking things to production.
01:00:50.860 - 01:01:49.300, Speaker A: Right from research I got to work on this. I called it Minicore or Atom compilation. They had some internal names, but that was a kind of a new processor in design and they needed a compiler. So at intel the way it works is that anytime they think of a new processor, then the compiler, the existing compiler itself, gets modified to kind of compile for that new hardware, which is we would be running simulators forever. But in this particular case the. My superblock implementation actually got transferred to the production team and they incorporated it. I mean they made their changes and modifications and they may incorporated it into the production compiler.
01:01:49.300 - 01:02:56.244, Speaker A: But then after a year or so I wanted to go work on some products. So then I joined the JVM team and initially it was harmony, the Apache Harmony project that I was working with. I couldn't really work on the open source code because I was already quote unquote contaminated by the hotspot JVM code. So I was just working on internal experimental projects associated with Apache Harmony. But then intel shook hands with sun and so we had to develop a JVM on Linux for itanium because sun didn't want to do that. They were happy to do the x 86 part, but they didn't want to do the itanium. So that was kind of the transition.
01:02:56.244 - 01:03:58.172, Speaker A: Although at intel there are not really that many software products as such, for productization purposes we would hand it off to sun or BA or partners. Okay, now open source. Yeah, open source right now. Because especially with respect to the JVM, it's seen an interesting journey. It didn't start off as being open source and many of the original engineers in the JVM team at sun are now part of the VM team, Twitter VM team. So that's another unique experience we have at Twitter. So the code, although it is open source, we are familiar with now, that's not true with respect to gral, by the way.
01:03:58.172 - 01:04:38.760, Speaker A: So gral we have, I mean, thanks to Chris Malinger, one of our ex Twitter VM teammates. He brought Gral into, integrated it into the Twitter VM. And most recently we are now using the latest, greatest versions of Gral that's available upstream, the community edition. So that's been an interesting learning experience for me as well, going from completely closed source to this research and production and open source.
01:04:45.730 - 01:05:04.130, Speaker B: So I have a comment here from Srinivas Ramakrishna that Brian would probably hold forth on the sun titanium love hate, but finally hate mostly relationship. Should ask him at one of his oxide talks.
01:05:08.010 - 01:05:11.080, Speaker A: Can you repeat it? What did Ramki say?
01:05:13.530 - 01:05:27.962, Speaker B: The comment says that Brian Cantrell would probably hold forth on the sun titanium love hate, but find the hate mostly relationship. I should ask him at one of his talk.
01:05:28.016 - 01:05:52.610, Speaker A: Sure, sure. Yes. There was a lot of love hate relationships with titanium, in particular between intel and sun. And so as you know, if you're very focused on the technical stuff, the rest of the things don't impact you. At least it didn't impact me. I'm still proud of the work we did and my learnings.
01:05:54.310 - 01:06:58.706, Speaker C: So if I could just sort of add on to that. I have to say, uma, that whenever I think about your technical work, I always think about the modulo scheduler. So you sort know glossed over that briefly. But that was probably one of the most complex things about compiling Fritanium, and compiling for itanium in general was complex, but the modulo scheduling was probably the most. And you were probably one of the few people who could really hold your own in a conversation with Bob Rowe. But I feel like I'll speak for you and then you can tell me whether I'm wrong or right. But I feel like for many of us, including I think, you and me, the technical challenge of compiling for that architecture was just so much fun that you can kind of let the other stuff roll off you.
01:06:58.706 - 01:07:10.480, Speaker C: Right. Why did it fail? There are many theories about that. I have a different one, but none of that takes away from the fact that it was really fun to do.
01:07:13.650 - 01:07:31.730, Speaker A: Yes, thanks Carol. That is true. Most of us who worked on know we felt that we accomplished something and we learned something. Whether those benefited or not, we don't know we benefit.
01:07:34.150 - 01:08:00.640, Speaker B: Teresa Johnson here also says that itenium was a great architecture for compiler writers and my two cent is that my manager's manager is Vatsa Santaram and every time I've spoken to him he has had some anecdote about itenium to tell about.
01:08:03.010 - 01:08:08.880, Speaker A: Yeah, is Sunil still around? Sunil just retired too.
01:08:12.150 - 01:08:25.750, Speaker B: Okay, Uma, another question for you. Thanks for sharing such an inspiring journey. What are your suggestions for students looking forward to pursuing a career in compilers?
01:08:27.530 - 01:09:17.558, Speaker A: Yeah, I'm just going to give a very general answer, not specific to compilers, because I don't know any different. So I would say that if you're interested in something specific, it depends on what stage you are in life. If you're in school, of course, take the compiler courses, look for the opportunities to do compiler projects. Right. If you are in the industry and if you are in a place where you have a compiler team, or you have a team which works with compilers, then that's your opportunity. Go find an opportunity to work with them. Right.
01:09:17.558 - 01:10:07.110, Speaker A: But if you're already in a team, then see what is exciting for them. Again, it really depends on who you find most motivating, and then going and talking with them and finding out more about it, how they went about thinking that way and exchanging ideas with them and so on and so forth. Right. So there are so many different ways that you can get involved. You can get involved as much as you want, or you can be involved as less as you want. Right. That's going to be a very generic answer.
01:10:07.110 - 01:10:22.540, Speaker A: So I have to see if there's a specific, like if you are a PhD student or something like that, then the advice in that situation would be a little bit more specific.
01:10:27.950 - 01:10:45.140, Speaker B: And to add to that, there's always the open source compilers which make it easy for you to just pick up a simple beginner bug or something, start getting familiar with the code, and there's also a community usually around them that is willing to help you.
01:10:59.740 - 01:11:37.590, Speaker E: I just want to say thank you for sharing your journey. It's very incredible to see how all the women that you were mentioning, most of them are here to support you. I really wish this happens with me or with all of us who are here and who are maybe not very experienced with the compilers so far. But in the years coming I really look forward to such amazing relationships that I can also build learning from the experiences that you shared today. So it's amazing.
01:11:39.240 - 01:11:48.710, Speaker A: I'm sure you can get a few more talks out of the people. Yeah, I'm sure they have lots of things to share.
01:11:49.340 - 01:12:42.760, Speaker E: Sure, definitely. Yeah, I think that would be amazing for us. We'll definitely reach out and follow up back with a lot of people that you mentioned today. Yeah, that's amazing. Just out of curiosity, today we all kind of struggle with that aspect of diversity and inclusion quite a lot, especially when we created this group, all of us together came in and we were talking about, okay, let's get into this, women in compilers and tools. So the reason is we are seeing less number of women who come up in making contributions or they are not being highlighted, but comparing the numbers. But it's not like we do not have women.
01:12:42.760 - 01:13:27.540, Speaker E: I'm not trying to say that, but it's like still we are trying to bridge that gap that we see today. And yes, the definition of diversity has changed a lot, but looking at your experiences and the people you had been mentioning, so it kind of gave me that impression. Like in 80s when you started in 90s, there were like so many women around, but then maybe it started to decrease or what happened. Obviously, I don't know what happened, but how exactly the whole scenario changed. Do you see that kind of change or the shift happening where the numbers started to decrease for the women contributors?
01:13:32.920 - 01:14:10.304, Speaker A: Probably when I joined intel, yeah, there were a lot of women. But were they all in compilers? No, not really. So I could just call out Sandhya, for instance. I feel that maybe one of the reasons, it depends on the environment. Again, one of the reasons is that compilers is a very. How should I call it? It's a very mature. And it's been there for decades.
01:14:10.304 - 01:15:04.628, Speaker A: Right. It's one of the primary systems, software components, even in the formative stages of the whole computer industry, and they play a very crucial role. So I'm sure that even now there are a lot of compilers being written and shared and used, but people are not necessarily aware of it. Right. So that was one of the things that I was trying. I mean, I don't have that much knowledge, but I can imagine one talk could be, okay, look at all the big software systems today. And do compilers play a role in it, and are you working on them? So you can say, yes, there are women in compilers even now.
01:15:04.628 - 01:15:37.296, Speaker A: It's just a way of. I think we should just raise the bar so that. Make sure that we have enough women in the industry and then we can worry about, oh, compilers, more compilers and stuff like that. Those who are interested will naturally kind of be attracted towards it, there's no question. Right. Like you, Juby, you did a PhD. That is pretty awesome.
01:15:37.296 - 01:15:45.090, Speaker A: But how many others are pursuing that? Of course there's yungi. That's great. But not necessarily in compilers she will be using.
01:15:48.820 - 01:16:04.344, Speaker E: Yeah, I mean, that makes sense. It's definitely not a problem of women in a particular area, but yeah, I think it's a bigger problem rather to have more women in general in the tech industry, maybe so.
01:16:04.382 - 01:16:37.052, Speaker A: I think culture does play a big role, which is why I kept talking about the various aspects of the culture, corporate culture or whatever. And especially I wanted to highlight the good part so that we can continue to save on those, as opposed to there's always going to be problems and there's always going to be gray areas and not so good times and aspects. That makes sense. Yeah.
01:16:37.126 - 01:16:59.256, Speaker E: And I think it's more of a learning lesson for us if we want to make any, or do any initiatives to bring more women. I think it's all about bringing that culture so that we are more supportive for the new beginners or for the existing community that is already there, so that people are more encouraged to join in and contribute more.
01:16:59.358 - 01:17:35.638, Speaker A: Correct. People should feel included if they want to participate, should feel included regardless. That's why I mentioned even pets. Because when I'm talking with colleagues nowadays, you usually see their pets in the background. Thank you. Hello.
01:17:35.804 - 01:18:12.218, Speaker D: Yeah, thank you so much for your great journey of your personal journey, also the compiler journey. And I just wonder from your perspective, what do you think of the opportunities for the compiler area in the future? So I think there are a lot of auto tuning, and I also noticed that there are some compilers for the machine learning, like the TVM framework. So it seems like there will be some domain specific architecture. There will also be some domain specific compilers.
01:18:12.394 - 01:18:48.620, Speaker A: Right. So that's what I kind of touched upon when I talked about compilers for ML and ML for compilers. I don't know much details at this point in time. All I know is there's a lot of good work being happening with the c four ML workshop. Sky is the limit, so we just have to do our educated research. By that I mean decide which areas look promising and kind of focus on.
01:18:51.470 - 01:18:52.940, Speaker D: Yeah, thank you.
01:18:57.170 - 01:20:01.006, Speaker B: Thank you so much. Uma, we've reached the end of our time slot, so really enjoyed the talk today, and we share the slides and the recording. And so folks, can keep Uma's handle, Twitter handle is there. So go ahead, bug her, keep the conversation going. And I also wanted to take this opportunity to announce our next event, which will be in July. And Christina Sifuantis, who is a senior director of R D at Oracle Labs Australia, she will be our speaker. And prior to working at Oracle, she worked at Sun Microsystems and she has earned the title of mother of decompilation based on her PhD thesis.
01:20:01.006 - 01:20:32.874, Speaker B: And she has a lot of experience in program analysis, secure languages, code comparison, binary analysis techniques and more. I hope folks can make it there and we can continue to learn more about compiler engineers and the stuff that they're doing. So a big thanks again to Uma and to all of you for attending this talk.
01:20:32.992 - 01:20:52.042, Speaker A: Yes, thank you, Anupama and the WICT group. This is great, and thank you for giving me the opportunity. And thank you all for coming, attending. Bye, folks.
01:20:52.106 - 01:20:53.340, Speaker B: See you next month.
