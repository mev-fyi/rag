00:00:00.650 - 00:01:10.590, Speaker A: So hello, my name is Kristoff one, and I'm going to talk about resolving the almost decade or checker dependency issue with the clang static analyzer. So the static analyzer is a tool we use for finding bugs without actually executing the program through the means of symbolic execution. And at certain program points, the analyzer will ask its modules or checkers to see whether the code is faulty. So as an introduction, let's talk about how this issue came up. So as you can see on these slides, these are two invocations of the static analyzer, and in both of these we enabled C plus plus inner pointer and we configured something. In the first case we configured the notes as warnings configuration to true, and on the second we configured a specific checker, unix Moloch, with its optimistic configuration, and we set both of those to true. And the problem here is that we messed up the invocation and we got absolutely no feedback from the analyzer, no errors.
00:01:10.590 - 00:02:30.062, Speaker A: It just simply didn't do what we wanted. And by working on this issue to create a nicer common line interface for the analyzer, I unearthed a bug called the checker naming bug, which happens when multiple checker objects receive the same name, and this could result in incorrect bug reports and errors when we are trying to parse the command line options. So as you can see here, this is the same invocation I've showed earlier, but the analyzer will fail to parse this input correctly, because instead of searching for Unix Malloc optimistic equals true, it will look for this option instead. So in this case the user invoked the analyzer correctly, yet still we failed to parse it. So this is because inner pointer checker and model checker are in fact related, they depend on each other, and inner pointer checker first enables monologue checker, and in this process they both receive the same name. Now, since they depend on each other and this issue stems from checker dependencies. In order to solve the checker naming issue, we have to reimplement dependencies as a whole.
00:02:30.062 - 00:03:12.300, Speaker A: So we initially thought that checker dependencies are few and far in between. But as you can see on this very incomplete graph, the checker dependency structure is very common. A lot of checkers depend on one another. So just to demonstrate how this error happened, we can see the same invocation we saw earlier. So you can see on the yellow nodes that inner pointer depends on malloc, and Molok in fact depends on another C string modeling checker. And when inner pointer is enabled, it enables Molok checker and this C string modeling checker, and all of these will receive the same name. And that is how this issue came about.
00:03:12.300 - 00:04:36.994, Speaker A: So how do we solve this issue? How do we re implement checker dependencies? While I stated the inner pointer depends on Molok, this isn't actually correct because inner pointer depends on some sort of dynamic memory allocation that Molok checker implements. So in order to solve this, we have to find a correct representation by dividing checkers up. So we divided Molok checker into a modeling portion and a reporting portion, and we did some more checker splitups to actually have a clear and precise directory tree that represents checker dependencies. After we were done with that, we collected these checker dependencies in a table again file. And instead of making checkers register or enable their dependencies, this is handled at a higher level now, and we make sure that in this higher level that dependencies are enabled in the correct order. And as you can see on the bottom of the slide, that is how we declare them in a table again file. So this reimplementation of the checker dependencies led us to fixing the checker naming issue that is now gone and already in trunk committed.
00:04:36.994 - 00:04:59.830, Speaker A: And we can now go forth with our original plan of creating a nicer comma line interface. We can already list both checker and non checker configurations. We can verify them. Dnrizer will now emit errors instead of doing things that you didn't expect. And yeah, thank you for your attention.
