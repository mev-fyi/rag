00:00:00.650 - 00:00:49.318, Speaker A: Thank you. My name is Manuel Renath. I'm a professor in the University of Corona in Spain and also founder of a startup company called Cola Pentra. And today we're going to try to explain why a new technology like paraware, the one we are developing at Appentra, is needed for supercomputing. And also we'll introduce some of the basic challenges that we are addressing within the power software architecture development. So essentially our focus, we are interested in helping computational scientists to create parallel programs that are to be deployed and run on supercomputers. One of the main problems is that the software stack of current supercomputers and of the future supercomputers that will be available at exascale is very complicated and very difficult to use for computational scientists.
00:00:49.318 - 00:01:53.994, Speaker A: So from this stack, we are interested in focusing on tools like LLVi infrastructure and related tools at clang of Lang to perform static program analysis on top of the LVMir. So the motivation is that computational scientists, even for very simple pieces of code, they have to write by hand or with the tools, they have different parallel versions of the same code. And eventually some of these versions will slow down, some of them will speed up. So they have to develop several versions and have to pick up and test and pick up the best that perform best on a given platform. So this is error prone, time consuming, and very hard for computational scientists. So, paraware, our technology basically is a static program analysis technology that helps to discover publication opportunities and also provide some features to help the computational scientists to add OpenMP and opencd capabilities in the source code. So this is essentially a very high level overview of the power software architecture.
00:01:53.994 - 00:03:06.882, Speaker A: So, essentially, keep in mind that our goal is to analyze the Lvmir that is common for different programming languages and extract some kind of semantic information that may be needed by the user, by the computational scientist, to create openMP, or open SCC enabled parallel codes. So, for this, our first step is to invoke clan to create an lvMir. And hopefully this lvmir will be as close as possible to the source code that the user has written, because we have to map all the results of this semantic analysis engine back to the source code of the user, to provide useful user messages, or even to provide how to handle data scoping for variables in the source code. So we are working on top of the SSA form, and now I will show you briefly some of the challenges we are addressing in this mapper. So, for instance, we have this simple piece of code that the computational scientist has written variables x, y and z. If we analyze the lvmir, we can keep track of loss and stores associated with each of these variables. But once we create the SSA form using mentorec, some of these instructions disappear.
00:03:06.882 - 00:04:17.642, Speaker A: So how do we recover or keep track of these changes in the IR so that we can tell him what has happened or what to do with x and y? Okay, for instance, for data scoping of variables, sharing, privatization, reduction of variables. Another challenge that we are addressing is, for instance, the IR generated by clan is created to be conformant with the target application binary interface. So this means that in practice, sometimes the signature of the functions is changed. So for instance, in this case we have a structure argument, a struct data type that is internally represented as two arguments of 64 bit integrals. So we need again to keep track of this to go back to the source code. And one more example is what happens with this short circuit conditional expressions that are evaluated in the programming language. So here what we have is some sentences instructions in the lvmir that do not correspond in the control flow graph to branches that are the internal representation of if the null instructions that the user has written.
00:04:17.642 - 00:04:43.960, Speaker A: So again, we have to handle this to perform dataflow analysis efficiently in large code databases. That is the target of our technology in the end, and these are only some of the examples from the point of view of the challenges that the LVmir is introducing to us. I want to cover here the challenges in the semantic recognition engine, but we will be in the poster session within a few minutes, so if you're interested, please join us in this poster session. Thank you.
