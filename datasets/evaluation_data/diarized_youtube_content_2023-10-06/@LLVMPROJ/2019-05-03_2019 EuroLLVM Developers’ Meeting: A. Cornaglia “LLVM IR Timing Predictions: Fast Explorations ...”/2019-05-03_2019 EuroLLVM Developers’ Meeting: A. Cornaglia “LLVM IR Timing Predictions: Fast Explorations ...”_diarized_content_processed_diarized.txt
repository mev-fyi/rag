00:00:01.210 - 00:00:51.660, Speaker A: Hi everyone, I'm Alessandro, I'm from FCDAE, a research center in Germany, and I'm here to present a tool we develop and it's called simultime. And this tool allows to run context sensitive simulation based on the LLBmir representation. And we run this simulation via LLI. So this solution is designed for the embedded system. And in these kind of systems we have functional and non functional requirements, nonfunctional requirements, I mean requirements that talk about the execution time of a program, timing analysis in general complex. We have different factors to consider and our solution is designed for the designers of a system. So during the early stages we allow them to understand what will be the execution time of the program.
00:00:51.660 - 00:01:49.630, Speaker A: So we have to consider C C programming inputs we need to analyze complex hardware platforms that implements different hardware architectures. Maybe the designers are interesting to tune their application with compiler optimizations. And because the embedded system sample the real world with sensors, we also have different input data to consider. And this is our tool and it's based on two main components, one from tools from LLBM and one from some tools, analytics tools we created by our own. Here we can see the workflow. So we start from CC program and we provide timing estimation that are accurate and we produce them in a very fast way because we are in the early stages of the development. So how does it work? We start the compilation with clang, and once we have the IR we run some passes, so we simplify as much as possible.
00:01:49.630 - 00:02:25.100, Speaker A: The control flow graph. Then we make it really hardware independent so that we can run an x 86 machine code also for arm for example, and if necessary we instrument it. Then two activities are spawned in parallel. We generate one binary per configuration. Configuration means hardware architecture and compiler optimizations. And the timing database is how we model the execution time of a program on a specific processor. Because these are IR simulations, we also need a mapping between the binaries and the IR code.
00:02:25.100 - 00:02:51.580, Speaker A: Then the second activity that was born before was to if necessary, we can optimize even more the IR and compile it to machine code. Then we have everything to run our context sensitive simulation on LLI. We attach the timing database, the mappings, and we can simulate the program with different input data via LLI. This is all so if you have any questions later, I'm available to answer. Thank you.
