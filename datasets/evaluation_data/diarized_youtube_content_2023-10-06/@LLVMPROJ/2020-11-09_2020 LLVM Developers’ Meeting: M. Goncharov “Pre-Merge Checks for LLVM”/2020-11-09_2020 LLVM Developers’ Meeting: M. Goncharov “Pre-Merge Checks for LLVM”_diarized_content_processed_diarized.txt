00:00:06.090 - 00:01:02.660, Speaker A: Hi everyone, I'Mihail Ginchirov and I work at Google in Munich on automating our internal clan releases. This talk will be a short overview of premerse checks we introduced about a year ago in the end of 2019. Let me show you some data. I've built and tested LLVM monorapper at 400 randomly selected commits from the master branch, and around 20% of them either failed test or even completely failed to build. That's a real problem for us as users and contributors to LLVM. Long ranges of failing commits can also be an obstacle for automated tools, for example, when you're trying to bisect more subtle issues. And I think that most of us would prefer to see the changes breaking before it's pushed to the repository.
00:01:02.660 - 00:01:51.190, Speaker A: Not only it helps our users, but also saves other contributors from starting day work based on quote unquote bad commit. Premiershecks implements a simple idea before pushing a commit. Let's build and test our software. This practice is well known in industry as a continuous integration. Note that build bots differ from premise checks in this regard because they run checks on commits that have been pushed already. When you upload a new Div to Fabricator, it's automatically picked by Premiershecks infrastructure. We use Buildkite to orchestrate the builds and Linux and Windows machines on Google Cloud execute them.
00:01:51.190 - 00:02:42.820, Speaker A: Build is trying to detect which project are affected by the change, and also runs client format and client id on changes. Typically it takes around 30 minutes before results from windows and Linux machines appear in fabricator. Let's see how they look in case of failure. There are links to build and test logs and you can always open Buildkite build page to understand how to reproduce the build locally or access full log for build and test commands. They are located on artifacts tab. The premature infrastructure completes around 700 builds weekly. Around 5% of revisions fail first but then get fixed.
00:02:42.820 - 00:03:51.180, Speaker A: Maybe it happens because author or reviewer looked at the build result. Only 30% of provisions passed primar checks, 15% fails because patch cannot be applied, 10% fail to build and the rest 35% fails due to tests. Yeah, 60% failing rate seems to be too high and the next goal for the project is to provide much clear signal of whether change is good or not. There are a lot of ideas and existing issues. One of the major ones is that Samsung projects are completely disabled because their tests are constantly failing or timeout. And here I want to ask for your help if you like the idea behind the project or maybe some wording can be proved it's also possible to modify what checks are run on your subproject. We're trying to keep projects as open as possible and you can find all scripts and configuration in this GitHub repository.
00:03:51.180 - 00:04:02.890, Speaker A: Please reach me on lovm Discord GitHub or just send me email thank you and have a green build.
