00:00:00.560 - 00:00:50.730, Speaker A: Yeah, the purpose of this talk is really just to kind of open up the mental framework about the design space for decentralized exchanges. I think this is something that's been kind of embraced in the past year or so, but really that decentralized exchanges, like a one size fit all model is not really as valid as we kind of thought it was. Basically, there's a lot of different, a very wide array of LP preferences, purposes for pools, types of order flows that you want to optimize for. And essentially, yeah, one size fits all model doesn't really work. A lot of protocols now are kind of introducing this programmability layer. Lancet is essentially like a superset of all these models in the sense that you can recover kind of these very general, like, exchange designs using this modular framework. And instead of just kind of going over Volantis architecture, I thought it would be kind of a lot more useful to dive into a case study.
00:00:50.730 - 00:01:25.754, Speaker A: Yeah. So basically to kind of like, just make the argument and kind of show like, why different Dex designs are actually a valuable thing. I just kind of wanted to talk about a different, kind of define some different classes of LST and LRT, basically staking derivative Dex designs. So one that, you know, most people are very familiar with is stable swap curve is a great example of this. And it's just kind of like an Amm concentrated a lot of liquidity around the one you want to pay. And then you kind of have this idea of insurance pools, which I'll spend most of this talking about, so I'm not going to dive too deep in. Now, Marinade on Solana is a really good example of this with MSOL.
00:01:25.754 - 00:01:59.986, Speaker A: But essentially the idea is you want to create some LP profile that is extremely profitable in a deep exen area. And it solves some issues around liquidity flight that happens in stable swap during deep. Exact model that you can kind of recover. Here is unified liquidity. This is according to Sanctum, which has had a lot of traction on Solana recently. Basically the idea is that you can have a shared amount of the underlying solar ethnic that's being deployed against a basket of LRT's or LST's. This is really useful when we start seeing a lot of diversity arise.
00:01:59.986 - 00:02:35.830, Speaker A: Solana doesn't really have a dominant staking asset as compared to Ethereum, but with the rise of LRT's, of the diversity with ABS is this kind of unified liquidity model solves a lot of the fragmentation. Nice. So I think I'll just kind of like start by talking about the role that staples swap plays and kind of what it doesn't play well. Stable swap attempts to like concentrate a lot of its reserves at the 120 price. In normal scenarios, this is really good because users get basically instant withdraws. They can do high volume, very little slippage. It's very capital efficient in a sense, and LP's are able to collect very healthy fees on this volume.
00:02:35.830 - 00:03:19.194, Speaker A: But what happens in deepek scenarios, and I'll use the term bad weather, which basically refers to any time that any actor is willing to sell the LSTLRt below the peg price. And essentially these pools get drained very quickly, because if they just have this algorithm that's also the one one price, people are coming in and just taking it out of the pool. LP's are smart to withdraw their liquidity in these situations, and this could be for a number of reasons. What you see on the chart on the left is the staked ETH in May 2022. You can see that immediately all of the ETH, liquidity and stable swap and curve pools was withdrawn or drained. And this was like before withdrawals were enabled. But you can kind of just create the mental framework of why someone would want to sell the assets at lower.
00:03:19.194 - 00:04:11.714, Speaker A: It could be something like a very congested withdrawal queue. It will take a very long time to redeem the assets. So for any number of reasons, or just general fund in the market, it's really dangerous if these are kind of the only liquidity venues that we have on chain, because as the DPEG is happening, if we don't have enough liquidity to absorb them, essentially we just have super thin liquidity on chain. Cascading liquidations is kind of like black swan house of cards falling down. And like another kind of problem that arises in a bit more thought related to unified liquidity is in kind of these stable swap, or just general pool models, we always deal with like one asset pegged with another, both stored and locked into a reserve contract. This is very harmful to lower cap and smaller lsts. Essentially, it's not easy to get liquidity to just be locked into a contract here.
00:04:11.714 - 00:04:41.612, Speaker A: And so if you can recover models where you can share this liquidity, it's essentially every protocol can pay less rent to keep that there. Nice. So we're just going to kind of go through a design exercise of like, we're going to try to essentially design an insurance, which is a very kind of broad concept, I'll find in a second. But really, what we with the question we're having is like, how can we keep LP's incentivized in quote unquote bad weather. Nice. So this is a general design philosophy of Volantis. Basically.
00:04:41.612 - 00:05:46.000, Speaker A: Like what we do when we design Dexs is we kind of break things down into these very role specific modules. And I'll dive into that in a second, but I think it's first probably useful to talk about what our goal is here. So we're trying to design an LP profile that profits very highly off of liquidations. And basically when people are willing to sell an LST or LRT below the pegged price, this pool wants to discover what the lowest price they're willing to sell it is to sell it aggressively, buy as much of it as they can, and only release this asset, redeem it back for ETH at the one to one peg rate, either by someone coming in through reverse swaps or in the notion of a prolonged DPEG, we can start to even think about things like interfacing with native withdrawal mechanisms. So essentially this is kind of like the design space that we're working with. There's a lot of ways to implement this idea. So it becomes very easy if we break down the different components that we have into modules and then we can just explore basically different designs of these.
00:05:46.000 - 00:06:21.940, Speaker A: So, you know, essentially the first thing that we have is that we want to have an idea of a peg rate. How do we want to do this? Well, we kind of isolate it into something called reserve module. It could be directly hard coded. It could use existing solutions like the Lido beacon chain, oracles reserves. We're not too much worried about latency here. If you wanted something that's higher frequency, you can implement your own oracle system, adapt it to other protocols. But the idea is, because we've isolated this kind of, what is the peg rate into this individual module, you could take all the other designs and just like change this to work with another oracle or another specific LST protocol, whatever the exclusive logic to it is.
00:06:21.940 - 00:07:00.250, Speaker A: Kind of the other thing here is like, okay, well, yeah, we want to have this pick rate, but we want to compensate LP's based for swaps that are adding lsts into the pool and removing eth. And we want this to correspond to the risks that they're taking on. There's again, a very large design space around this marinade. Kind of uses this thing around like they're basically trying to do pricing based on how low the sole reserves get into the pool. I'll explain a little bit about our approach with light rated withdraws. There's also a lot of stuff you can do around times, withdrawals, oracles, etcetera, and then the other kind of like moving on beyond. Now we have the compensation, we have the peg rate.
00:07:00.250 - 00:07:34.930, Speaker A: We talk about, okay, in the absence of reverse swaps, when no one else is coming in and accepting the one from peg rate, to replenish the pool with ETH, we need to think about how lP's can actually make themselves whole. So I'll again dive into this module more deeply. But you can think about things about like interfacing withdrawal mechanisms. How do you want to do that? We can contain this into an individual module and then the last piece we call a deposit module. This is kind of a general practice that we have in Atlantis. You just kind of get very low programmability of like how you represent these tokens and these positions. For these purposes, we probably want to model them as one type of ETH deposits because we want to maximize the amount of ETH in the pool.
00:07:34.930 - 00:08:18.028, Speaker A: And also, as we talk about the pro rata shares, if we are maintaining both liquid and u liquid positions, how we represent that, how we allow LP's to withdraw, we contain it into a module. Also, if there's any custom logic you want to make this compatible with restaking, you can insert it here. Nice. So again, just like few mechanisms, what are we trying to do with it? This is like designing a swap view module. Well, we basically want to compensate LP's for the risk they're taking on. One of these kind of models for the risk is what is the time to withdraw? It's a pretty valid design if you want to go oracle based solution to use time to withdraw oracles that are updated periodically. And it basically says the longer the time to withdraw, the higher fees I charge, that does technically fit the bill.
00:08:18.028 - 00:08:57.042, Speaker A: You could also do things like operator slashing risk for a particular lrts. We like to avoid oracle solutions because they're generally just like partners implement. But yeah, so just kind of like looking at in full reserve data. We were experimenting with this fee mechanism that essentially prices fluctuations in the rate of withdrawal. So as more LST to e swaps are happening, if you sense that they're happening at a faster rate than some historical average, you basically increase and shift. You increase your fee, essentially shifting your peg. This is like kind of in converse to like traditional Amm models where you're pricing fully based on the reserve ratios.
00:08:57.042 - 00:09:27.530, Speaker A: And that means to shift your peg, you essentially have to be drained. In some sense. We're trying to avoid that. We want to be able to sense bad weather. It's kind of like a detection mechanism, and we're using this kind of increased rate of swaps to do so. We ran some simulations on this over the Lido 2022 state peg, and essentially what we found. In normal conditions, where we have a relatively stable swap rate, we're able to keep pretty good close to the one to one price peg.
00:09:27.530 - 00:09:57.270, Speaker A: And as soon as the onset of bad weather happens and you start seeing these liquidations coming, it's actually very quick to shift its pay down and collect more fees from users that are willing to swap. We ran these simulations against the curve pool. So basically, users are only swapping on this pool when it's providing a better rate than curve. Yeah. It's essentially able to retain more, more eth in the end. So, yeah, kind of moving down the stack. We have our, we have our peg rate, we have like how we're compensating LP's.
00:09:57.270 - 00:10:37.968, Speaker A: Now we talk about the situation, about, okay, what happens now when we're in a prolonged deep scenario, no one's taking the reverse side of the trade. LP's are collecting, they're basically accumulating a huge amount of lrts and they want to be made whole back in ETh. Yeah. How do we do that? So again, there's a very large design space around this. There's marinade, basically kind of uses this mechanism where they directly have any incoming deposits routed straight to this pool. It's like kind of a very enshrined to their whole protocol. But if you want to start talking about how do we interface with native withdrawal mechanisms, you basically say, okay, when do you want to file a withdrawal that could be dependent on the reserves that you have.
00:10:37.968 - 00:11:09.960, Speaker A: It could be dependent on the state of the withdrawal queue, how much congestion you see that you're having, whatever your trigger is, we can also further modularize it in this way. Yeah, so tenderswap has this kind of similar model where, like, based on reserves, they're filing. Basically, when a user makes a swap, they immediately file for withdrawal. And when a LP position is sitting in the withdrawal queue, it's essentially a liquid. It can be represented as an NFT. And yeah, this is a problem. A portion of the pool's reserves are now sitting in a liquid position.
00:11:09.960 - 00:11:33.254, Speaker A: You can use auctions to try to make this position liquid again and again. If you can put this again in a module. So you can just kind of play around with different auction models. What happens in tender swap, for example, is if a user tries to sell one, an LP buys one. Steve. And they take a fee. So they have, like, 1%.
00:11:33.254 - 00:12:10.070, Speaker A: So they have 1.01. Steve. And they want to make that hole back again, at least for one, because that's the underlying that they gave out away, they can run an auction that decays basically between what the fee they collected was and what the flat rate is. So if someone is willing to buy it for a discount of 1%, which is the fee they collected, they'll immediately sell the illiquid position and be made back whole. They're break even. But the longer they hold on to this position, the discount decays as the withdrawal kind of reaches maturity. If no one's willing to take the discount, the LP's will just hold it till the withdraw is mature and it'll be made back at 1.01.
00:12:10.070 - 00:12:35.028, Speaker A: Yeah. So this is kind of mechanisms you can play with if you want to make this more liquid. I also included, like, a time to withdraw circuit breaker, which basically says, like, if the withdrawal queue actually becomes, like, so congested that you're like, we just want to turn off the strategy. Like, it's seven months to withdraw. Do not file withdraws. You could basically have these kind of circuit breakers that are periodically updated. Yeah, nice.
00:12:35.028 - 00:13:23.376, Speaker A: And just kind of putting everything back together. What we end up with is a bunch of these modules that are relatively decoupled into logic and security, which means that you can go and interchange them and adapt them to new models, new LST and LRT protocols without much changes. And it allows you to kind of, like, dive and delve into each of the individual components separately. Yeah, this is kind of a general practice that we do with depth design is kind of breaking down the taxonomy as we did today. Nice. I know that I'm kind of coming on time, but I just wanted to really, like, briefly touch on the idea of unified liquidity. So in Volantis, basically, we decouple the pool itself from where reserves are stored, and you essentially can have multi token vaults where multiple pools can access their liquidity from.
00:13:23.376 - 00:14:28.920, Speaker A: And this vault can define whatever logic it wants for how it deploys liquidity to each of these pools. So, I mean, how you can imagine this is you can have a bunch of whatever stable swap insurance pools, some mix of them attached to a single vault, and you can programmatically allocate some basket of ETH liquidity to each of these pools. This creates a really interesting LP profile because you essentially have some curated basket of LRT LST ETH exposure and you're collecting swap fees on top of it. Yeah, you can create very programmatic security around this. For example, if you want to have some triggers to say, like, the reserves of one cannot get go together, or I ship the allocation that I have to a certain pool, you can create very defined security structures, which essentially makes this a very interesting asset to hold because it's kind of a basket exposure thing. You could also, I think what sanctum does is they curate the reserves of each of the lsts based on some risk and APY rating. So you can essentially get optimized yield with as low, low risk as possible.
00:14:28.920 - 00:15:05.104, Speaker A: Yeah, I mean, if you can create something that's like, has very defined security properties, this is also a very interesting thing to, like, restake as well. Yeah, this concludes my talk. I just kind of wanted to go over a bit of, like, how we think about the design space, like, our approach to Dex design in general. If any of the stuff I sounded interesting, if any of the stuff I said sounded interesting, or approach to, like, modular design, like, please talk to us. We're also working on a lot of stuff outside of lsds and LRT's, like mostly around intents. But, yeah, we're just kind of very interested in exploring the vast design space of dexes. Very excited for the future of on chain liquidity.
00:15:05.272 - 00:15:21.520, Speaker B: Thanks. Any questions? Yeah, no, I have one like this. We're quite modular in terms of design. What's the biggest difference between us and UNESCO? Design.
00:15:21.940 - 00:16:05.396, Speaker A: Yeah, I would say the biggest concrete difference. So, I mean, in general, again, Valencia is kind of a superset of a lot of these designs. We try to make very not opinionated statements about anything, and one of those is like, how so? Uniswap has an enshrined singleton contract. There's a lot of benefits in having a singleton contract, but one of the drawbacks is that you essentially have to assign liquidity directly to a pool. This is not true in Atlantis. Again, kind of going back to the sovereign vault idea, you can have this programmatic share of liquidity natively. Yeah, I would say that this is kind of the largest, like, implementation difference as far as developer experience, like, with the modules in general, kind of the composability of them, we really maximize reusability of code.
00:16:05.396 - 00:16:16.360, Speaker A: It's very easy to come in and like, pick up an existing design and adapt it to work on something else with slight changes. Experiment with a new option model. Yeah. So it's like Devx and then also to like software vault as well.
00:16:17.780 - 00:16:18.340, Speaker B: Thank you.
00:16:18.380 - 00:16:18.596, Speaker A: Yeah.
00:16:18.628 - 00:16:21.436, Speaker B: Any more questions? Thank you.
00:16:21.548 - 00:16:21.860, Speaker A: Thank you.
