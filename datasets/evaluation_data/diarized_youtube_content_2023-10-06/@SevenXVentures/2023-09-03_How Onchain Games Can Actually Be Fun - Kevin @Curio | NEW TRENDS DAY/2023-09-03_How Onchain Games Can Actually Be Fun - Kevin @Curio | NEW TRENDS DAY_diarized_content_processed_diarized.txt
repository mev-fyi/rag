00:00:00.570 - 00:00:35.088, Speaker A: Okay. Hey guys, I'm Kevin, co founder for Curio. We're a full stack gaming company and we're building on chain games. And today I'll be talking about Hyperscaling on chain games. Yeah, so to start, we have kind of the era, one of on chain games, we have games like Axie and also we have Dark Forest. I think Dark Forest basically kicked off the explosion for fully on chain games. And this happened in around 2020 to 2021.
00:00:35.088 - 00:01:15.064, Speaker A: And it was the first game that was built fully on smart contracts on Gnosis chain using ZK Starks. And people thought it was really cool to be able to actually build a game on smart Contracts. And people didn't really think this was possible before. So this was kind of, I would say like the first era for onchain games. But this era created a lot of problems that people set to solve. The number one problem is pretty much it was really slow to build these games on EVM Smart contracts because there's a lot of details, but basically you have to write all this custom game logic in your front end, back end. You have to build your own indexer and there's no kind of standard data structure or standards, I would say, to actually build these components for the Onchain games.
00:01:15.064 - 00:02:05.768, Speaker A: And a consequence of that is basically these games have extremely weak composability. So even though people thought, oh, you could build plugins on top of Dark Forest and things like this, and in reality no one actually did because it was extremely difficult to actually even understand the code and contribute to kind of the code base. So I think people started to dream about what if you could have games that interoperate between each other, but this was not a reality yet. And then we kind of have the era too for onchain games. So I would say this is probably the past year. So in this period, basically different teams started building smart contract based game engines on the EVM and also StarkNet. So the different teams building, including us, Lattice, Dojo from StarkNet, and people were building these smart contract based game engines.
00:02:05.768 - 00:02:31.590, Speaker A: So a set of smart Contracts game developers used to build these games. So this kind of solved a lot of the iteration speed problem that I highlighted previously. So people now could actually build these games pretty rapidly. And all these games are kind of running in the browser. Like Lattice had this Minecraft clone running on optimism. And we built these strategy games over the past year or so. So it solved a lot of the problems from the previous year, but it also created even more problems.
00:02:31.590 - 00:03:10.560, Speaker A: And yeah, these are some of the features I just talked about. So they were building these on chain ECS based game engines, fancy word of saying, just a set of smart contracts. And this allowed basically for developers to kind of solve a lot of these problems. They came with built in indexers. So once you write the logic in the back end and Smart Contracts, you didn't have to write them again in the front end, which is really really nice. And then they came with a set of standard data structures so game developers could actually reason through these code and potentially be able to contribute that. But most of these games are built in a browser and pixel art based, so they still feel like indie projects.
00:03:10.560 - 00:03:58.720, Speaker A: And then this is like an overview of what an ECS system is. It's simply just a set of kind of standard data structures that all kind of game engines use to achieve high performance. And then at this time we also built our own game called Treaty, launched earlier this year. So Treaty is a social diplomacy game kind of based on, I would say like Civilization and all these sorts of related games where you play as a nation and you negotiate with other nations to achieve dominance and victory. And so we also launched this using our own kind of game engine built on EBM. We were probably one of the first teams to adopt kind of, I guess the app specific chain thesis. So we had our own roll up running since like April 2022 I would say, which I think an idea is quite popular now with Zora Chain and all these sorts of L two S like Base chain.
00:03:58.720 - 00:04:42.476, Speaker A: And then the core idea that we had for our game, which is also our attempt to answer the question why on chain games is the idea of using Smart Contracts as social contracts? So in this game Treaty, different treaties represent social relationships between players. So a simple example of this could be two nations agree to not attack each other for a certain amount of time. So this sort of rule set would be enforced by EVM smart contracts. So that would be a really simple relationship. A complex relationship would be something like a nation kind of lends different troops to other nations. And if the other nation is in debt, then this nation can, let's say, take away a piece of land or take away some sort of ERC 20 tokens. So we wanted to encode a lot of these relationships in smart contracts.
00:04:42.476 - 00:05:22.170, Speaker A: And this is actually tangibly solving a problem that happens in web two games, like for example, Eve Online, you have like 5 million players playing, but there's actually no way for people to kind of express these relationships. And the problem with that is basically whenever somebody is kind of like violating these oral agreements, there is actually nothing the other players can do to kind of punish them. Whereas obviously in real life you have authorities that can enforce rules and that's what makes a lot of things interesting. So this was our idea of kind of using smart contracts in a meaningful way to build strategy games. And this is not our game. We based this game on Civilization. So this is what Civilization looks like.
00:05:22.170 - 00:06:04.968, Speaker A: And there is still a lot of problems with building onchain games. And this is, I think, where we're at now and where a lot of teams are developing these problems. So to start, there's a huge performance issue with actually building complex games. Even if you run a single node, kind of l two EVM roll up, you're going to run into complexity and performance problems if your game is really, really complicated, like Civilization or something even close to that. The second problem is fundamentally blockchain architectures are very different than game engine architectures. So blockchains are asynchronous by nature and game servers are kind of synchronous by nature. So what that means is that for blockchains, blockchains cannot update themselves over time.
00:06:04.968 - 00:06:44.804, Speaker A: So you can't tell the blockchain to ping a smart contract function every block. So you have to use things like keeper networks like Gelato to actually liquidate positions and things like this. Whereas game servers actively need to update itself every 20, 30, 50 milliseconds. So an example of this is if I select a group of armies and I want to move it to a certain direction, it needs to actually move over time, even if I shut down my browser or my game. So this is like an architectural difference that's fundamentally incompatible with blockchains that needs to be solved. And then there's still a lot of problems with actually writing code in Solidity. Even though we have a lot of kind of great tooling now with things like Foundry, this is still not great.
00:06:44.804 - 00:07:24.544, Speaker A: It does not enjoy the first class support as other kind of native languages. And there's also just a lack of game focused developer tools in general. So these are kind of the problems that we discovered, I think, around after building launching games since end of 2021. So for almost two years now. And we've set out to solve a lot of these problems like Q One 2023 I would say. And to recap what a game tick is, you can think of game ticks as blocks. So this is how a traditional kind of a game engine would look like, where you have clients that are sending these inputs to the server, there's a certain amount of lag and then the server is processing these results and then sending all these results back.
00:07:24.544 - 00:07:59.628, Speaker A: So this slice of time here would be one game tick. In blockchain terms, this would be one block. And usually this slice of time is something like 30 milliseconds in a case of overwatch. But for blockchains, even if you run optimistic roll up, you can at most get like two blocks per second because of the underlying constraints of a blockchain. So between 50 milliseconds and kind of 500 milliseconds is a huge time difference. And simply like Web Two gamers will not be able to accept that kind of difference in visual experience. So this is like the kind of goal that we set out to build.
00:07:59.628 - 00:08:42.140, Speaker A: We wanted to build an engine that combines the performance of traditional game servers with EVM smart contracts. We think that the most important kind of properties of chain games is the ability for players to write smart contracts like modding them. So this is kind of the, I guess, mission statement that we have for our architecture. So we set out to build Keystone, which is our kind of flagship architecture. And this is fundamentally different from kind of other types of game engines. Keystone is an opinionated roll up framework purposely built for high performance on chain games and each game runs on its own roll up. So for example, now you see there's a lot of different kind of l two S that are popping up like Zora or Base Chain but all of them are basically op stack forks.
00:08:42.140 - 00:09:21.828, Speaker A: We think that fundamentally down the line, in the next six to eight months we're going to see much more differentiated roll ups because EVM is a great kind of medium for just running anything, but it's not specialized for actually anything in particular and for games this is simply not kind of reaching the performance that we need. So Keystone is setting out to be this very opinionated framework that will only work for games and nothing else. It will not work for DeFi or on chain social or anything like that. It will only work for on chain games. And there's a kind of a fundamental idea shift between smart contract based engines and roll up based engines. So previously we were writing smart contracts on top of Ethereum to build games. That's very easy and very straightforward.
00:09:21.828 - 00:09:57.084, Speaker A: And then we ran into all these problems. Now we're interested in building kind of roll up based engines so actually encoding a lot of the logic inside of the node software itself. So this is kind of like the, I think, big shift that we're making. And we're one of the few teams that's doing this in this space. And I think all teams will need to kind of adopt to this thinking if you actually want to approach what the web two audience, the mass consumer and there's kind of two parts to your architecture. I can show a diagram later so you can think about this sequencer design as there's two parts. There's one ECS core which is the game engine.
00:09:57.084 - 00:10:52.580, Speaker A: So this looks very similar to a traditional game engine where you have the code written in go and then it contains all the game logic and runs native code in parallel so it becomes really fast. And it also has natively built in game tick. So even if you're not touching the chain, it updates itself like ten to 20 times per second, aka having ten to 20 blocks per second. So this actually allows us to build real time games that you see in kind of any real time strategy games and it's also like a deterministic state machine. And to demonstrate this, this is something we built. We basically put World of Warcraft assets in unity and we ran the game like a very simple game where you could attack each other on this roll up to demonstrate that I think on chain games need to achieve this kind of sort of performance down the line. And then the second part of kind of the sequencer design is that we still wanted the ability for players to write smart contracts.
00:10:52.580 - 00:11:37.940, Speaker A: And this is a bit I guess complicated to explain but these two parts kind of interoperate with each other through a lot of kind of like EVM hacks. So players can still come into the game and write a lot of these treaties and submit these treaties into the EVM part of the game engine. And we're still thinking about kind of which framework to use. But the two parts kind of interoperate with each other. So when you're writing a smart contract you can actually read a lot of the logic from the game engine part through pre compiles and the two kind of parts of the stack can kind of trigger each other in asynchronous ways. One way to think about this is that this is basically a shared sequencer design with two different sets of roll ups. One is the EVM roll up and one is the ECS game Engine roll up and it's rolled up into Keystone.
00:11:37.940 - 00:12:24.988, Speaker A: So this is kind of like the high level architecture on what we're trying to build and I think this is probably the more interesting slide is like what are the interesting things that you could do once you actually own the chain, once you actually own the infrastructure itself. So for example, what if you could have players because we're operating in a setting where anything is in some ways acceptable if it makes sense to the game. For example, players could use like time travel spells or spend gas to rewind the chain. So a chain doesn't even have to go forward in time. It can maybe teleport back in time to reset the chain in some ways or players could vote to pause the chain. Smart contracts also don't really have to be immutable or kind of stay forever on the chain by default. I mean this only makes sense in kind of public blockchains.
00:12:24.988 - 00:13:06.588, Speaker A: But in a setting above game, as part of a game feature you can have smart contracts that only last for a certain amount of time and you have to keep on paying for these smart contracts for it to live on. Maybe you can also have tokens and pay gas to destroy smart contracts. So this also would not make sense on Ethereum, but it might make sense in the context of a game. So maybe a smart contract represents some sort of relationship between two players and I can actually pay some sort of ERC 20 tokens to destroy that relationship. That could be an interesting feature. And maybe you could also have a feature that allows use to steal from other people's elas. So you could have like a socialism chain basically or like a communism chain that could be like a quite interesting game feature where people can vote to purge other people's accounts.
00:13:06.588 - 00:14:15.732, Speaker A: But this also just wouldn't be reasonable on Ethereum, but it would make sense on a very game specific roll up. And I think the conclusion here is that we need to get creative with the EVM and then if we're actually building a game that's aimed to be fun, we can rethink a lot of these kind of properties that Ethereum has or these rollups has but games don't really have to have. And then I guess I summarize a few lessons I think, or like thoughts after building onchain games for almost two years, which is pretty crazy, I think first the industry still struggles to answer the question why on chain games? I mean, I think this is like the most important slide and I think to us there's kind of two parts. I think a lot of onchain game teams kind of shy away from leading into a lot of these token experiments or they kind of want to have this very purist view of what onchain games and autonomous worlds need to be. But I think we think that tokens are a great way to actually experiment with distribution, with retention. And once you add these high stakes into the game, it becomes a really good kind of testing ground for new game ideas. So we really need to lean into the kind of the tokenomics of just blockchain and the fordances it gives.
00:14:15.732 - 00:15:08.448, Speaker A: And then the second part is how can onchain games actually meaningfully kind of improve the game design of whatever game, in our case, strategy games. So we think that treaties represent one of the more interesting ideas using smart contracts and social contracts. But there's tons of other kind of ideas that we could have on how that would actually solve a lot of the problems for web two strategy games. And then I think this is also really important, especially for L two S down the line, is that I think currently all L two S serve to serve basically a general audience. I think this is just simply not sustainable. In the future, you have to know, I think, your audience extremely well because L two S are supposed to be actually specialized and built with intention. So for us, because we're building for kind of more of the gaming audience, we can make a lot of trade offs on the decentralization liveliness curve to really kind of optimize for performance.
00:15:08.448 - 00:15:57.364, Speaker A: But this also wouldn't make sense maybe for a D five specialized chain. But I think this is one of the first questions you need to answer before you build launch your own L two, which is like who you're actually building for and then you can kind of tweak all these parameters to serve the users correctly and everything is a means to an end. You're only building an L2 to serve your users, not just for the sake of building an L2. So you need to actually do that carefully. And then I think this is also related to the previous slide is that you need to use the right tools for the right job. So I think Ethereum is incredibly powerful as kind of this neutrality layer and kind of arbitration layer for all sorts of things, but you actually need to kind of pick the right tool sets to use that correctly. So for example, one example is that I think there's a lot of discourse around decentralizing your sequencers, but it really depends on who you're building for.
00:15:57.364 - 00:17:00.348, Speaker A: If you're actually building for a gaming audience, it probably doesn't make any sense to actually decentralize your sequencers. And there's a lot of kind of unanswered technical questions from a lot of these technical discussions that go on on Twitter, but they actually don't really make a lot of sense if you think about who you're building for very clearly. And because you will know that you can pick the right technical trade offs and you won't get sigh offed into just using new technologies for the sake of using new technologies. So I think this is extremely important. And then finally, I think there's a lot of kind of open research problems on onchain games. I think one of the more important kind of value props that people agree with is like oh, you can have these mods where people could write smart contracts and contribute to some sort of game universe in a multiplayer way. But one obvious problem is like how do mods kind of stay compatible with the game when it launches and when it goes on? What are the suitable economy models for onchain games? So, like, traditional MMOs rely on basically the game developers issuing inflationary assets for developers to basically buy directly from the game store.
00:17:00.348 - 00:17:48.568, Speaker A: This probably doesn't make sense for onchain games, so we need to rethink that. How decentralized or permissionless do we actually need to be? So again, everything is a means to an end for whatever audience that you're building for. For onchain games you have a very different answer. For example, if you're building an onchain game for 100 whales that will spend $10,000 per month, then you'd probably need to be really decentralized and building on Ethereum, not an L2. But if you're building for the mass consumer and want to have 10,000 dau with a very little kind of spend per user, then you probably don't care about the permissionlessness for decentralization elements. I think people just need to get honest about what are the actual trade offs there and who you're actually building for. And also there's a lot of kind of questions around the end user experience.
00:17:48.568 - 00:18:23.828, Speaker A: For example, do we play the game in the browser or do we play the game on the desktop or mobile? Do we launch on Android first versus iOS? What are the different kind of on and off ramps? And how can we meaningfully kind of increase the developer experience around onchain games? So that's that. And then about us. We've been building onchain games for around two years. This is like the first ever demo we built for our kind of, I guess precede like way back in the day. And this is like a strategy game that we launched. And then we also had this kind of in person demo at East San Francisco where people sat around the table and played a game. And then a little bit more about our team.
00:18:23.828 - 00:18:38.430, Speaker A: We're about to hit a team of ten. A lot of team members come from genshin impact on the art side and engineering. And we raised the seed round led by Bank Capital last year. So yeah, that's it.
00:18:39.360 - 00:18:50.720, Speaker B: Any questions here? Could you explain a little bit about the roll up Ephemera roll ups that you explained? Because that something based on any existing stack.
00:18:51.140 - 00:18:54.128, Speaker A: Yeah, so you explain a few interesting.
00:18:54.214 - 00:19:08.812, Speaker B: Concepts that you can have roll up, then you can have rewinding state, destroyable smart contracts. That's something material, but want to know that how does this work? What do you use from existing stack? Or is it completely new?
00:19:08.886 - 00:19:43.010, Speaker A: Yeah, so we've tried basically building this thing on Mean. I've looked a lot into EVM on Cosmos, Polaris, FMOs, like all sorts of frameworks we've examined and I think probably none of them actually fit what we need. There's a lot of optimizations that you can do on kind of the EVM side to make it go a lot faster. One example would be like you have a state tree under the EVM that's being mercalized every block because you actually need to submit this block hash to other kind of validators for consensus, right? But in a sequencer design, you probably don't actually need to do that.
00:19:48.020 - 00:19:56.640, Speaker B: Essentially. So if you're doing it, you started using off the shelf EVM or you have some additional.
00:19:58.440 - 00:20:22.268, Speaker A: Yeah, that's still too slow. Basically. We've tried running this thing on Op stack. There's just a lot of overhead because Op stack is based it's like the standard now. So it's like geth plus something else, plus like 2000 lines of code. It's still too slow because of a lot of the underlying constraints. For example, game engines usually hold all your kind of states in your computer memory, so it has very fast retrieval and insertion and things like this.
00:20:22.268 - 00:20:52.176, Speaker A: But for Op stack, you're storing things to disk every so often and it creates a lot of bottlenecks. Right? So what if we could have an EVM that holds all the state in memory? So if your game is only running for like 2 hours, this is actually okay. And it won't be very expensive. But if you're building like an MMO, maybe you need to cache these objects like every one day or two days instead of every 12 seconds per block. So that's a very simple optimization that you can do that will probably speed it up by a couple of multiples. And there's a lot of other optimizations.
00:20:52.208 - 00:21:07.080, Speaker B: You can do saying that if you're using there's an underlying tree that uses the contract states. You don't really have to store everything on the node, you can have parallel nodes and then it can do that.
00:21:07.150 - 00:21:37.908, Speaker A: Yeah. So for example, one thing that I think parallel EVM is hard because in the traditional case, people really care about fair ordering. So people care about like if my transaction comes in first, then I can do that. But then in a game setting, players probably do not care about having atomic composability for things like this in a lot of cases. So you can kind of just fire, forget and imperialize a lot of the transactions. So this is I mean, there's a lot of things that we can do there, for sure. Yeah.
00:21:38.074 - 00:21:38.790, Speaker B: Interesting.
00:21:44.280 - 00:21:46.564, Speaker A: So from a market point of view.
00:21:46.602 - 00:21:54.920, Speaker B: Do you think that fully auction gaming is actually competing with the so called Web 2.5 game or startup completely new.
00:21:54.990 - 00:22:31.940, Speaker A: Kind of user base for them? Yeah, I think depends on what type of fully onto game you're building. Like if you're building a fully onto game just for whales, which is like Wolf game and all these sorts of games, then you're going into Web Three, like Djin audience or like things like Friend Tech. It's kind of like an onchain game and that's highly profitable in that case. But if you're building for more of like a mass consumer audience, you're inevitably going to compete with, I think, like Web 2.5 audience. But I think for us we're starting with definitely the crypto native audience because that's where I come from and that's where we know best, basically. And then once we hit PMF there, I think we'll slowly expand.
00:22:31.940 - 00:23:10.220, Speaker A: Yeah, so I think it really depends, but I think so far most people are more interested in building like forex whales, so they're building on optimism, ethereum things like this. So they have very simple games with very simple graphics because these users do not care about actual experience, they just want to make money. But if you actually want to tap into kind of the mass consumer audience, then everything has to be right. So we're building our game in unity with probably like some sort of AA experience with 3D graphics, like the whole Immersive experience, because to that audience it actually matters. So yeah. Bye.
