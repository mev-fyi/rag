00:00:00.170 - 00:00:00.430, Speaker A: Everyone.
00:00:00.500 - 00:00:41.926, Speaker B: So this talk will be extremely useful for those who are actually building a blockchain that are lack of ecosystems, right? Because I'm going to show some magic that can give this blockchain lots of ecosystem just in one push button. Today I'm going to introduce something that's called turn a Web two, browse application into a web3, application through a magic web webassembly cK virtual machine. That means you can go down the street, grab someone that can only write HTML or JavaScript or rust and plug in their application into your ecosystem via build a browser application and then generate.
00:00:42.038 - 00:00:46.266, Speaker A: Browser webassembly ck proofs and verify the.
00:00:46.288 - 00:00:54.662, Speaker B: Ck proofs on your own blockchain so that you can turn arbitrary small applications into one of your ecosystems.
00:00:54.726 - 00:00:57.600, Speaker A: And how does that work? I'm going to show you something that.
00:00:58.130 - 00:01:00.160, Speaker B: I have to still have to sign that.
00:01:02.470 - 00:01:08.802, Speaker A: So I'm going to start with a demo. The demo is a silver dump small.
00:01:08.856 - 00:01:20.566, Speaker B: Game that's building in webassembly, right? Because weblast assembly can be natively supported in browser. That is a huge advantage. So once you grab some guys that.
00:01:20.588 - 00:01:28.678, Speaker A: Can write a small browser game like this using webassembly, people can easily interact, play a card game, right?
00:01:28.764 - 00:01:32.534, Speaker B: Attack, strike, next round, next round, next round.
00:01:32.662 - 00:01:35.194, Speaker A: And maybe he made some mistake and the game over.
00:01:35.232 - 00:01:36.890, Speaker B: And that's the gameplay, right?
00:01:36.960 - 00:01:38.346, Speaker A: So if you actually would like to.
00:01:38.368 - 00:01:40.870, Speaker B: Actually install this gameplay into your ecosystem.
00:01:41.030 - 00:01:43.738, Speaker A: You have to sign every time you.
00:01:43.744 - 00:01:45.434, Speaker B: Are going to interact with your chain, right?
00:01:45.472 - 00:01:54.898, Speaker A: But in a webassembly ck virtual machine do not have to do that. You allow the user to do the gameplay and in the end you create.
00:01:54.984 - 00:02:01.138, Speaker B: A proof, create a proof that will actually run the gameplay, generate trace in.
00:02:01.144 - 00:02:08.566, Speaker A: Your CK webassembly virtual machine and this virtual machine cloud somehow will generate a.
00:02:08.588 - 00:02:13.986, Speaker B: Proof of your gameplay. And then you use this gameplay proof.
00:02:14.178 - 00:02:18.774, Speaker A: On chain, verify that so it's actually generated proof.
00:02:18.822 - 00:02:20.102, Speaker B: Let's see our old proof.
00:02:20.246 - 00:02:33.742, Speaker A: So now, sorry, we have some Internet latency. Okay, so now you can use the generated proof and verify that on your own blockchain, right? Once they actually pass the verification, you.
00:02:33.796 - 00:02:41.422, Speaker B: Give them some kind of redeem of benefits, rewards, nfts, token transfers, and that's done, right?
00:02:41.556 - 00:02:49.966, Speaker A: So what you need to do is that you grab random applications, you compile them into webassembly and then you load.
00:02:49.998 - 00:02:52.386, Speaker B: Them, you load the game in the.
00:02:52.408 - 00:03:00.038, Speaker A: Browser, in the browser and then play with it, right?
00:03:00.204 - 00:03:26.510, Speaker B: Simple push button end to end. Just leverage some kind of secret webassembly virtual machine and leverage the proof service cloud, right, that's done. You can maybe make 100 of applications in three months, right? All you need is some web to your developers and it brings huge amount of applications for your ecosystem. Once you get ecosystem, you get everything, right? Okay, thanks. That's my talk.
00:03:26.660 - 00:03:27.742, Speaker A: Okay, wow.
00:03:27.796 - 00:03:41.700, Speaker B: Have a good day. Any question? Okay.
00:03:43.590 - 00:03:46.200, Speaker C: How does the VK Whatsapp vM work?
00:03:46.570 - 00:03:50.120, Speaker A: Wow, that could be even longer than my talk.
00:03:51.370 - 00:04:44.742, Speaker B: It's a snack virtual machine that has 148 instructions. So compared to some kind of famous virtual machines with risk zero, which has about 38 instructions, we have 148 risk instructions. And I always make that as an execution of why the CK webassembly virtual machine is slow at twice as slow as risk zero. Because we have 64 bits instructions and 148 in different instructions. And it works like writing an interpreter of webassembly in Halo two circuits. It's no longer hello two for us, but I think most of CK guys familiar with hello two. So it's a hello two like system recording the architecture of the Webassembly interpreter into the hello two and make a circuit and that's it.
00:04:44.742 - 00:05:32.518, Speaker B: Render provers in the gpu. But you do not need to worry about that, right? You're using the cloud and we are actually not running the cloud. We actually bypass the cloud renting to some of our partners, like Zen Group, like snarkify. Right. So I'm not doing all the work. So there are already lots of guys in the ecosystem doing the dirty job for you and you can just coding your ecosystem applications, I mean lots, right? You have a blockchain, you might worry about your ecosystem every night right? After that. Now you have this ecosystem, you can install lots of ecosystem applications direct into your ecosystem by maybe have a web two application portal and utilizing the technology.
00:05:32.518 - 00:05:39.880, Speaker B: So it will be great for your ecosystem, trust me. Thanks, have a good day.
00:05:41.690 - 00:05:42.630, Speaker C: One question too.
00:05:42.700 - 00:05:43.174, Speaker A: Okay.
00:05:43.292 - 00:05:50.010, Speaker C: In terms of the consolation down through the test, are there any kind of like higher level language?
00:05:52.050 - 00:06:53.278, Speaker B: We only have customs using Rust and JavaScript because JavaScript now have a J runtime which only has about half million instructions to bootstrap. But if you want to do some serious coding, Rust and C is better because it has minimized trace. But just be careful, do not call anything like serializing JSOn, deserializing JSOn. It actually kills the virtual machine because it generates lots of trace. So using ILP, using fixed layout, so make it easy because it's for ecosystems that need dumb applications, right? So don't make that too complicated. Make card games, programmer NFTs Selg gamings cardboard games. But if you want to build some very serious ecosystem for your application for ecosystem you probably need some very good features like continuation, but that you will need gpus localized approving services.
00:06:53.278 - 00:07:03.380, Speaker B: You might need snarkify to actually generate proof for you. So my simple answer is that just keep it simple and you get lots of applications on board.
00:07:03.910 - 00:07:05.874, Speaker C: So it's not like any context more.
00:07:05.912 - 00:07:39.200, Speaker B: Performance issue it has it needs compared to risk zero which only has 12 seconds for 1 million instructions, we need 30 seconds for 1 million instructions. But for card game, right when you're actually doing approve, you can play Google Advertising video for your customers so that once they actually click the video and skip the video, you have already generated proof. So keep your players busy and once they have finished the gameplay you generate proof for them. So it should be fine.
00:07:41.570 - 00:07:44.320, Speaker C: Library support but something like that.
00:07:46.450 - 00:07:47.200, Speaker B: Maybe.
00:07:50.450 - 00:07:51.374, Speaker C: We can have a try.
00:07:51.412 - 00:08:03.160, Speaker B: So it will be really dumb to actually you install browser sandbox. So you cannot use risk five in browser, right? So you have to use webassembly. That's a trade off.
00:08:07.770 - 00:08:08.520, Speaker C: It.
00:08:11.850 - 00:08:13.460, Speaker B: Okay, we're good. Okay.
