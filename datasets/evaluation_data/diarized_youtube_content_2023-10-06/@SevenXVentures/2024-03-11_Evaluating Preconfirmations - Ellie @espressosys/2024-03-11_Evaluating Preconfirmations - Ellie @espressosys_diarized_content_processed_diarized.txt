00:00:00.810 - 00:00:41.126, Speaker A: Thank you. Yeah, so I work on consensus as well as some research at Espresso. And today I'm going to be taking a little bit of a different approach. I'm going to be talking about pre confirmations, which is a pretty timely topic right now, but it's a service that restaking enables, and so it has a lot of it can potentially really affect different sequencing protocols, roll ups, et cetera. So I want to kind of talk about that today and go through how we might think about implementing pre confirmations. So yeah, let's get started. So a pre confirmation, if you know anything about pre confirmations today, you might know that they're what you get from like a centralized sequencer.
00:00:41.126 - 00:01:22.950, Speaker A: So if you submit a transaction to arbitram today, you'll get a pre confirmation from the arbitrum sequencer. But what I want to do here is define pre confirmations a little bit more strictly and a little bit more meaningfully, because this is what we want pre confirmations to be in the future, instead of just like a pre confirmation from a centralized sequencer that really has no economic security behind it. So here's the definition I'm going to propose. A pre confirmation is an economically backed promise that data will become final on the l one and satisfy user specified conditions. So I'll break this down a little bit. We have economically backed, so this implicitly implies that it's enforceable. But obviously we want it to be economically backed because this is what makes it secure.
00:01:22.950 - 00:02:08.482, Speaker A: If I'm getting a pre confirmation, I want to have some sort of security that this is actually going to become final and that there's going to be consequences if someone tries to do something false with that pre confirmation. The next one is that the data is going to become final on the l one. So this is a little bit of an opinionated definition, but I think that this is actually what users want. So you can think of today if you got a pre confirmation, but then that pre confirmation might get reorbed out of Ethereum. That's not very useful to you as a user. So I'm going to argue that we want finality on the l one, but this is going to open up some pretty big research questions later on. And then finally we have user specified conditions.
00:02:08.482 - 00:02:52.898, Speaker A: So this is really just to make pre confirmations a lot more expressive for users and a lot more useful. So most of these conditions you can capture by intents, which is a completely separate discussion, but it's very useful for pre confirmations. But there's also going to be some other conditions that you want outside of intents, like the time by which your pre confirmation needs to be made final. Or maybe you want to specify an exact position in a block so these conditions can be really powerful. All right, so here's our definition. This is what we're going to use for the rest of the talk. All right, so here I have a long list of different design choices you might make for pre confirmations, and I'm not actually going to go through all of them.
00:02:52.898 - 00:03:55.190, Speaker A: The point of just having them here is basically to say we have a lot of customization in how we can design pre confirmations. So we have the pre confirmations as they exist on current centralized sequencers. Some of you also might be familiar with Justin Drake's ETH research post on based pre confirmations, which also offers another implementation design. And so what I'm arguing here is that those are the two most popular designs out there right now, but there's actually a really huge design space, and also that a lot of these features are completely orthogonal to each other. So what the user signs to get their pre confirmation might be completely orthogonal to whether or not you're issuing insurance for safety and liveness violations. There's just a lot we can do here, and I want that to be a major takeaway of this, is that we've really only scratched the surface of how we can design pre confirmations. They're not just centralized sequencer precomfs or based precomps.
00:03:55.190 - 00:05:04.666, Speaker A: All right, so with that, let's actually talk about how we evaluate these pre confirmations and maybe a framework that we can use to go about that. So I know I literally just told you that there's like all these different customizations you can do, but I'm actually going to say that pre confirmations generally are gonna fall into these two categories. They're gonna be proposer pre confirmations or a tester pre confirmations, and I'll go through what each one of these means. So a proposer pre confirmation is basically what would be a based pre confirmation from Justin's post, although I would argue it doesn't have to be based, it doesn't actually have to do anything with the l one. So I'm going to rename it to a proposer pre confirmation. This pre confirmation is given by a single entity that has the rights to propose either the block for some sequencer or for Ethereum, and it's potentially given before the full sequence of the data is publicly known. So an example of this is I, as a user might get my transaction pre confirmed, but I don't know what transactions are ahead of it in my block.
00:05:04.666 - 00:05:43.020, Speaker A: I don't know what transactions come after mine in the block. I'm like missing a lot of information. And then you can contrast that with a tester of pre confirmations. And these are a pre confirmation that's given by a committee of a testers. For example, the espresso sequencer would give these kind of pre confirmations, but they also actually exist in Ethereum today. When you submit a transaction to Ethereum and you see, oh, it's like four blocks deep, I feel pretty good that it'll become final. That's basically in a test or pre confirmation, you're saying, hey, enough Ethereum nodes have attested to this that I feel even though it's not actually final on Ethereum, I'm really confident that it'll be final.
00:05:43.020 - 00:06:26.930, Speaker A: And so another feature of this is that the pre confirmation happens after, you know, the full sequence of the block. So you have a lot more information at the time of the pre confirmation. So spoiler is that this talk is not going to be about like proposer versus pre confirmations at all. I actually want to argue that we want both. And basically a tester pre confirmations extend proposer pre confirmations. All right, so let's dive into some things that we should think about. So a big want is risk, and this is where it kind of relate back to the whole restaking framework.
00:06:26.930 - 00:07:18.918, Speaker A: So this risk I'm specifically talking about is the risk to a user. If I get a pre confirmation as a user, what is the risk that that pre confirmation is not going to be honored? Now, there's a couple of different ways that this could happen. You could have a safety violation, which is pretty bad, which means that the pre confer took my transaction and said, oh, I promised you're going to get x price on Uniswap, but actually I'm going to front run you and you get a terrible price on uniswap. That's a safety violation, and that's something that a preconfirmer would have to do purposefully and maliciously. But then we also have a liveness failure, which is like in this case of the proposer pre confirmation. That's the case where the proposer says, oh, whoops, I just missed my slot and I didn't propose. Or maybe the network was just bad and they weren't able to get enough attestations to get their block included, something like that.
00:07:18.918 - 00:07:58.178, Speaker A: And that's definitely not as bad as a safety violation. But I think it's something that we still need to consider. So I would argue that the cost to a user of my pre confirmation not becoming final would be the economic value at stake. That's going to be the biggest factor. And this is for both a tester and proposer pre confirmations. And then you have opportunity costs and reputational damage. Obviously, if the pre confer is like arbitrum and they got caught double signing, that's going to be a lot of reputation for damage for them, a lot of opportunity cost for future transaction fees that they won't get.
00:07:58.178 - 00:08:25.918, Speaker A: And then there's also the coordination cost. So this is a big difference between a tester and proposer pre comps. Proposer pre comps are only one single entity, so you don't really have coordination costs. It's really easy for them just to decide to do something malicious. Whereas in a tester pre confirmations, you do actually have to coordinate. And the idea is that with a tester pre confirmations, you actually want a very large committee. So ideally, you would want all of the ethereum nodes attesting to this.
00:08:25.918 - 00:08:59.008, Speaker A: And in that case, it's going to be very high to coordinate an attack on that, because Ethereum's validator set is very decentralized. But this is probably like the really big open question right now with precomp. How do we handle reorgs? So this goes back to what I was saying about the liveness failures. I'm a proposer. I do exactly what I'm supposed to do. I honor your pre confirmation, but it gets reorbed out of the chain. What do you do? So we have a couple of options.
00:08:59.008 - 00:09:19.736, Speaker A: We could say, well, it's not their fault, so we're not going to do anything. But I, as a user, that's not what the pre confirmation was for. It's not for. Oh, you attempted to get it included. It's for. It became final, but that's a fair option. Another thing to consider, though, is how likely the chance of a reorg is.
00:09:19.736 - 00:09:58.580, Speaker A: So, on Ethereum, I think I did the math, like, yesterday, based, there was, like one reorg, roughly every 40 minutes on Ethereum in the last 24 hours. So you say, okay, well, maybe that's not that bad of a chance that I can say. Most likely my transaction won't get reorgan, so I don't need to worry about it. But if you consider that high enough of a chance, it kind of just makes the pre confirmation worthless, because you're going to say, well, I'm just going to wait for it to be finalized on Ethereum anyway, or I'm going to wait to see that it's six blocks deep anyway. So what's the purpose of the preconf? So maybe not doing anything about it. Not slashing is not the best idea. So we have option two, we can slash.
00:09:58.580 - 00:10:59.240, Speaker A: So in this case, we're slashing for something that is not the fault of the actual proposer. And this is a very kind of controversial thing, but you could say, hey, a proposer, they need to accept that this is a risk. So they'll get all these fees from pre confirmations, but on a small chance of the time, they may get slashed, and it may not be their fault. But the interesting thing we can do with this is that we can do insurance, which means that if a user's pre confirmation doesn't become finalized, we can actually refund the user, like that amount that got slashed, which is pretty interesting. But I want to say that this is like a really big open question, because neither one of these options is really great. Execution tickets, if you're familiar with those, would probably help, because, one, it'll make proposers a lot more sophisticated, so it'll probably make proposers less likely to miss their slot. Hopefully, it'll help with timing games, again making chances of reorgs less likely.
00:10:59.240 - 00:12:23.792, Speaker A: And then also with execution tickets, proposers would have a lot more collateral backed behind them. So it's more reasonable that they would be able to accept, like, a slashing risk for something that's not their fault, versus, like, a home staker isn't going to want to take that risk. But basically, I don't have an answer to this question. I just think that this is like a very open question that we need to think about is, what does a pre confirmation mean, and what do we do when Reorgs happen? And then finally, I'll just want to say, when it comes to risk attester pre confirmations, there's a lot of trade offs between a tester precomfs and proposer precomps, but a tester precomfs are going to have more economic security behind them, like, most of the time, just because they're made up of a bunch of stakers who have a lot of economic security behind them versus one single entity, and then they also have a really high coordination cost to attack. Okay, now we're going to go on to the incentives of pre confirmations. So, pre confirmations, why is someone offer a pre confirmation? Well, it's because they get paid a tip, but the big question is, well, how do you know how much tip you're supposed to pay as a user? And this is a really big open problem. The only parties that can truly calculate how much this pre confirmation tip is is the pre confirmers themselves, because they need to be very sophisticated.
00:12:23.792 - 00:13:03.724, Speaker A: So the way you calculate this tip is you say, okay, how much mev could I extract from this transaction if I ordered it this way or this way? And that's how you value the transaction. But you as a user, you don't know the transactions that are in front of you in the block. You don't know the transactions that are going to come behind you in the block at the time you get the pre confirmation. And you also just aren't a sophisticated party to run all of this mev analysis. So this becomes a big problem. You as a user either need to trust that the preconfer is giving you like a fair market price, or you might just end up overpaying. Another problem is that the top of block is really valuable.
00:13:03.724 - 00:13:59.116, Speaker A: So when you think about a pre confirmer, they may be saying, I'm going to promise you that I will put your transaction like in the top of the block. It'll be the first transaction in the block, and this is really, really valuable. And likely this should be like a just in time auction because the top of the block is so valuable for arbitrage opportunities. But this causes a problem, which is where in the based pre confirmations research post, they talked a lot about execution promises, whereas you can actually get a promise that says, my transaction absolutely will execute on uniswap at this price. But if you have top of block auctions that are so expensive, that kind of conflicts with this, because one, as an average user, I'm not going to want to pay the pre confirmation fee to be in the top of the block. I don't need that. But if I'm not in the top of the block, I can't get an execution promise because the top of the block isn't known because it's a part of a just in time auction.
00:13:59.116 - 00:14:45.132, Speaker A: So I think that this is, again, an open problem where a lot of people times were like, hey, pre confirmations are great. You can promise a price on uniswap. But I think it's really unclear if the pre confirmers are actually going to be incentivized to do that. And if they do offer execution promises, they're likely going to be very expensive. All right, so conditions, these are going back to the conditions that the user can specify like, hey, I want my transaction included within 32 ethereum blocks. I want my transaction to be included only if this other transaction is included. They can express a lot of really powerful things, but we need to think really intentionally about what we're having users sign so we can actually enforce these promises.
00:14:45.132 - 00:15:51.652, Speaker A: So one of these things is, let's say you want to do an atomic transaction, right? You say, I want a pre confirmation, because I want to say that this transaction will be included if and only if this other transaction is going to be included. Well, you need to make sure what the user is signing makes that enforceable so that the atomic transaction cannot be unbundled and only one of them included. And you also need to make sure it's enforceable so that there's proof that the user did actually request that condition. And I think that this is, I'm not going to go too much into it, but I think that there's a lot of design space in how we think about what actually should be cryptographically signed by users. But I will comment on this, that this is a really complicated space, but I think the future is that wallets will abstract all of this away from users, and wallets will probably just say, hey, you're just doing a simple transfer to your friend, you don't need a complicated high fee pre confirmation. I'll just do the most basic pre confirmation that I can offer. And then if you're someone who's trading on uniswap, your wallet will automatically create the pre confirmation for you.
00:15:51.652 - 00:16:27.410, Speaker A: But the point isn't so much what we should design. The point is that we really don't know what this should look like yet, and we need to think about it. So it's an open question. And then finally, going back to the proposer and a tester pre confirmations, this is the final point, is latency. So proposer pre confirmations are great because they can potentially get really good latency if incentives are aligned. So it's unclear that proposers will actually give that latency for reasons of calculating mev and things like that. But if they do, it's really great, it's really great user experience.
00:16:27.410 - 00:17:15.212, Speaker A: So a tester pre confirmations can have like an espresso, they'll have between two and 4 seconds. If you're doing a pre confirmation, like waiting for a certain block depth on Ethereum, that might take like a minute. But the point here is to basically say a tester pre confirmations, they have higher security, you know, the full execution of your transaction, you know, all of the data around your transaction, this seems like they would be better. But basically this is the big trade off is that you just can't do them as fast. But that is why I would argue that you need both. So I'd argue actually that proposer pre confirmations, you basically get that first, and if that's good enough for you, that's fine. But then you kind of have an attest or pre confirmation as a secondary depending on the value of your transaction.
00:17:15.212 - 00:18:21.680, Speaker A: So if my transaction, I'm just trading some really small amount, maybe I don't care to have an attest or pre confirmation, but if I'm doing a large trade, like if I'm coinbase and I'm trading, I'm probably going to want an attest or pre confirmation. All right, so here are the takeaways. Takeaways are basically that pre confirmations are something that espresso has been thinking a lot about. And they're enabled through restaking, because the way that you enforce all of these slashing conditions and all of these intents and everything is through restaking on an avs, and that's what makes them so powerful. But it's best to have proposer and a tester pre confirmations work together. And then also that there's just a huge design space in pre confirmations and there's a bunch of open questions right now, and there's going to be many possible implementations, and I don't think there is going to be a single best implementation. It'll be many different implementations of precomps that users can use to specialize on whatever it is that they're trying to do.
00:18:21.680 - 00:18:51.802, Speaker A: And then the final point is that there's a lot of each of these implementations has different risks and different incentives, and these incentives are not necessarily aligned. And the point is that we just need to think about all of this a lot more. So some current work going on. Espresso is working on this. We are working on both a tester and proposer pre confirmations for our protocol. We also have the based pre confirmations that Justin Drake proposed. Many people are working on that in the community.
00:18:51.802 - 00:19:18.580, Speaker A: Espresso is also part of that know, there's also many other teams building like builder pre confirmations, for example, all sorts of things. So it's a really big design space. And personally I find this an incredibly interesting space. So anyway, that's it. Yeah, I'm always more than happy to chat, and if you want to know anything more about Espresso, happy to talk about that.
00:19:23.350 - 00:19:35.350, Speaker B: With the new research say there's like an idea for specified confirmation. You think startups are going to implement it first or like existing protocols are going to adapt?
00:19:36.650 - 00:20:19.480, Speaker A: Yeah, that's a good question. I think that it'll probably be like startups or things that build them specifically, just because there's usually a lot of tech debt when you're trying to integrate it with your own stack. And so someone doing it, doing it from the ground up is easier. And then I can also say from Espresso's experience that usually an existing stack is so busy with other work, they're like, we really need this, but we don't have the bandwidth and the time to build it. So I think you're going to see other projects building that, and there's also several that are doing that right now. So like Nethermind is already building proposal pre confirmations for other projects to use. Yeah.
00:20:19.850 - 00:20:36.634, Speaker B: So my understanding, and correct me if I'm wrong, the most basic pre confirmation is like an inclusion pre confirmation, right. And the most sophisticated is like a post date. What are some examples of other pre confirmations that are kind of in between?
00:20:36.832 - 00:21:20.098, Speaker A: Yeah, so I think the most common one would be like an ordering example or an ordering pre confirmation. So you aren't promised what your transaction will execute at, but you're promised where it'll be placed in the block. And so this can be really powerful for maybe people who are trying to do top of block, they want to get on the top of the block. This might be powerful for other people that say, hey, I want a little bit more in that inclusion. Like, let's say I want to be sure that I'm at least within the top ten of the block. That would probably be the most common one. Some other pre confirmations you could do is, well, you can expand upon that and you can say, hey, I want this exact block slot.
00:21:20.098 - 00:21:50.530, Speaker A: Or you could also say, hey, I just want in the top ten of the block. Or like the last ten of the block. You might say like, oh, well, why would someone want to be in the last ten transactions in the block? Well, it might be really cheap for them, and it also depends on just what the preconfers are willing to offer. So some pre confers might say like, hey, I don't want to offer execution promises because that's too hard for me. So I'll offer these, but I'll sell you your exact placement in the block.
00:21:53.590 - 00:22:04.166, Speaker B: Quick question. Yeah, I guess. How would you compare service espresso to builders and relays? We're trying to do this pre complication as well.
00:22:04.268 - 00:22:04.920, Speaker A: Yeah.
00:22:05.450 - 00:22:08.120, Speaker B: Advantages, disadvantages, pros and cons.
00:22:08.490 - 00:22:50.398, Speaker A: Yeah. So this is a really good question, and I'll caveat this, that there's going to be a talk that our CEO is doing tomorrow at the main event that's going to go a lot more into how this works. So if you can attend that, it's going to be good. But, so I think the big thing is that builder pre confirmations work very similarly, but you're not guaranteed that that builder will win the auction for that particular slot. So as a user, you might say, okay, I get a pre confirmation, but will my transaction be included in the next block or in the next like 60 blocks? Because you just don't know when the builder is going to win. So that's the biggest difference, which is something like what espresso is building. And something like that happens when you have the actual proposer offering.
00:22:50.398 - 00:23:23.726, Speaker A: The pre confirmation is that you can have a very good guarantee of this will appear in the next block. So it's more just like gives you more question. A builder can choose to like, I just build confirmation on this block, and if I didn't build this block, I can send to all other major builders. Yes. No, that is a really good point. They definitely can do that. I think the big question is, it's unclear if the other builders are incentivized to actually include that, then.
00:23:23.726 - 00:23:57.498, Speaker A: I think that's where it gets tricky, is like at that point, the transaction is kind of being broadcasted publicly, and then maybe you don't have the same private order flow Mev you can extract from it. I'm not saying that's necessarily the case. I think it's just like one of those questions where we don't know what people are going to do. But I do think it could be interesting. If builders have enough collateral behind them, they could offer insurance. So they say, hey, I'm pretty confident that I'm a really popular builder and I get included at least every ten Ethereum blocks. So I'll give you insurance.
00:23:57.498 - 00:24:25.342, Speaker A: If your pre confirmation doesn't get included within the next block, I'll repay you. That could be one way to do it. And also, I don't know why. What? Oh, yeah. Okay, so that's a good question. I can talk about that after a really long time, but yeah. So espresso has this design where each roll up can actually get back their mev.
00:24:25.342 - 00:25:17.860, Speaker A: So initially you think usually the mev all goes to the sequencer because they're deciding the ordering. But what espresso does is we actually have an auction. So each roll up auctions off the right to build its block, and whatever price that gets paid for that basically gets returned to the roll up. And the idea is that a proposer is going to be willing to pay a price that equals the transaction fees that they would get from sequencing plus the MEV that they're able to extract. So that's how espresso actually gives me v back to roll ups, which is a really unique property of it, and is also kind of how we differentiate between, like, well, I don't want to say based sequencing, because actually, espresso is based, which you can find out tomorrow, which is going to be in the other talk tomorrow. But it's a cool factor about Espresso. Thank you.
00:25:17.860 - 00:25:27.120, Speaker A: So there will be a time. Thank you. All right. Yeah. Thank you so much. Thank.
