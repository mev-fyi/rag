00:00:00.650 - 00:00:38.114, Speaker A: Thank you very much. And thank you everyone for hosting me. I hope everyone is having a good time and staying cool in Singapore. Cool. So today I want to talk to you guys about building an actually secure Internet with Alio. So actually I chose the term Internet over Web Three because I actually think that zero knowledge cryptography, which is a lot of what I'm going to talk about today, has applications beyond just Web Three. And I think there's a lot of opportunity to bridge what I think is some very exciting potential integration with the financial system through Web Three, with web Two via zero knowledge cryptography.
00:00:38.114 - 00:01:19.320, Speaker A: So when my wife asks me, or while my mom's or my mother in law asks me what do I do for a living, I usually tell her not that I work in blockchain, but that I work in cybersecurity. Because I think that zero knowledge cryptography can actually help secure the information, financial and otherwise, that we care about online. So with that, let's jump into it. There we go. So here's what I'm going to talk about today. I'm going to talk a little about Web Three protocols, how they evolved and why they evolved the way they did, namely without privacy. Without privacy and how that happened.
00:01:19.320 - 00:02:00.334, Speaker A: I'm going to talk about a little bit what we do at Alio. And I'm going to talk about how we enable privacy at the smart contract layer one, and how that privacy doesn't have to come at the cost of compliance. I'm going to talk a little bit more in detail about our computing model and how to think about deploying smart contracts on Alio and how that's different from other ecosystems like Ethereum. And I'm maybe going to talk a little bit about why we decided to go the separate layer one route, because that's a question we get a lot. Lastly, I'm going to talk about some of the use cases, which I'm really excited about, that are unlocked by zero knowledge cryptography. So with that, let's get in. So I like to think of Alio as a step along the path of the evolution of Web Three protocols.
00:02:00.334 - 00:02:53.646, Speaker A: So in the beginning we have all these kind of the far side of the slide there, see all these protocols that the world has largely forgotten about. But that inspired Bitcoin, which was the first cryptocurrency, right? So these are many of David Sham's projects like HashCash and a bunch of others that are listed there, right? And the key unlock for Bitcoin was this concept of crypto economic security, which I'm sure you guys remember. This was like the key piece in the Bitcoin white paper is economically incentivizing the miners to cooperate and work together. And this kind of led to a whole path of spinoffs, effectively litecoin, et cetera, that followed this approach. And then Vitalik and his co founders of Ethereum came along and they said, hey, this is a great paradigm but if we could marry this with smart contracts, we could increase the programmability. Then we would be able to do much more with this, become much more practical. And so this was really when this is the advent of the virtual machine on chain.
00:02:53.646 - 00:03:35.810, Speaker A: So the Ethereum virtual machine was the first on chain VM, and we had many effectively forks, either philosophically or very practically from Ethereum. And I've listed a few of them there. But I think there's another unexplored path that hasn't been taken yet, and that is around extending Zcash. My pointer works. So Zcash is, what if we extended Zcash to enable general smart contracts and therefore achieve both the programmability of Ethereum and the privacy properties that make Zcash attractive? So, yep, this is pretty much what I just said. We have Bitcoin, which is public money. Zcash is private money.
00:03:35.810 - 00:04:12.346, Speaker A: Ethereum is public apps. And you can guess it'll be a pop quiz later what's going in that top right? What we want is private applications. And so this is just a quick summary of kind of the different approaches and what they give you. Early systems had the problem of not being decentralized. There was always some single party point of failure that you had to rely on in order to assure the system was available and functioned as designed. Bitcoin solved that, of course, by this concept of proof of work, but it wasn't interoperable. What I like to say, by when I say interoperable, I mean you can't have integration between programs on chain.
00:04:12.346 - 00:04:55.942, Speaker A: You can't have smart contracts, right? Ethereum, of course, brought smart contracts, but unfortunately it was no longer or was not privacy preserving and neither was Bitcoin. Right? So we actually have never had a decentralized and let me actually use a different word permissionless system for privacy preserving computation. And I think this is a big reason why I don't think crypto has gotten the adoption that I think it should. If you look at the traditional financial system and the UX, so to speak, the user experience of me sending one of you a bank wire is, you know that you got paid by me. I know that I paid you. The bank knows that there was a transaction and some compliance process was followed. But the rest of the world does not see that transaction.
00:04:55.942 - 00:05:38.066, Speaker A: Right. In crypto, I mean, there's many firms that specialize in looking at the transaction graph and all the activity on chain and identifying exactly who is paying who. And once a single transaction is revealed to be yours, basically anyone with a computer can effectively Google or go to an Explorer and find out everything about you and your financial life. So I think for most DeFi use cases today, which I think much of which is speculative, that may be okay, but for real world financial use cases, this is problematic. And I kind of liken this. If we go back in history to the internet or the early days of the Web browser. So this is the logo for Netscape.
00:05:38.066 - 00:06:30.034, Speaker A: I'm old enough to actually have used Netscape, and one of the things that Netscape did was it supported the development of the secure socket layer for the Internet. Before that, all Internet traffic was effectively unencrypted. Right? So Http traffic, if you read the Http protocol, there's no encryption as part of that. Right? So TLS is the encryption is a protocol for encryption and encryption that's used online. And that basically makes up that's how we get Https. Right? And SSL was a key part of TLS and this is what Netscape really pioneered. And that was the big unlock, I would argue, for Web two commerce right now, for the first time, this is in the could send a credit card transaction online without worrying about a man in the middle attack someone just reading off your credit card info and using that for some other purpose.
00:06:30.034 - 00:07:44.034, Speaker A: So of course, we don't have the issue of someone being able to take your private key unless you give it to them in crypto. But nonetheless, the transparency of the current paradigm, I think, is similar to how the early Internet was before encrypted transactions and the early Internet before it had the commercial value that it does today. Okay? And so at this point, usually by this point in the pitch when I'm talking to people, they're like, that's all great, but how do we ensure that the bad people in the world don't use this protocol for bad things? My simple answer to that is that people will always use bad there will always be people who will use technology that's neutral for bad things. But nonetheless, I think it is important to talk about how compliance and regulation could fit into this paradigm because as we've seen in the last year, protocols like tornado cash and their founders can, there could be legal consequences for working on some of this. And in addition, I think there's also some pretty exciting proposals such as privacy pools on Ethereum, which is something that we basically have support for natively on Alio for enabling privacy on chain while still maintaining compliance. This is a quote, which I like is actually the US government the treasury report on the illicit finance risk assessment of decentralized finance. So the US.
00:07:44.034 - 00:08:11.334, Speaker A: Government actually supports technologies that are privacy preserving but allow for compliance and AML CFT obligations. And I think in any real practical world, we have to consider this as we're building systems that are privacy preserving. Okay, so I already spoiled the surprise here. Alio fits in up here. It's an extension of zcash and ethereum. It really marries the best of both worlds and enables compliance. I'm going to talk to you a little bit more about Alio now.
00:08:11.334 - 00:08:49.662, Speaker A: Okay? So what is alio? So, like I said, it's a new layer, one blockchain. Maybe it's a good time to digress and say why did we build a new layer one blockchain? Why are we not a roll up like every other ZK project? Well, we had two goals. One was to enable privacy. And most roll ups, despite the name ZK rollups, actually don't use the ZK property in ZK Snarks. So ZK Snark stands for zero knowledge succinct non interactive arguments of knowledge. Wow. Most roll ups use the succinctness property, which is to say that you have a long or large computation and you compress that computation into a small proof of validity.
00:08:49.662 - 00:09:22.106, Speaker A: Right. But most every ZK roll up on Ethereum that I know of today does not actually use the ZK property, which, strictly defined as the Verifier, learns nothing about the proof that they're verifying. Right. So the privacy preserving element. So, in order to get privacy, we decided to create our own layer one that's in a slightly different model than Ethereum's account model, which is helpful. And then also by building a layer one up from scratch, we're able to use cryptographic primitives that are much more conducive to performance zkSNARKs. So this is our stack.
00:09:22.106 - 00:09:53.686, Speaker A: So Snark OS is the blockchain so standard. This is a client node you run to participate in the network. We run a consensus algorithm called Bullshark Narwhal, similar to Sui and Aptos. And we have an added feature, which is a proof of work kind of mining aspect as well, where we have provers. I guess miners in our system are called provers and they submit work to the network in exchange for economic reward. They don't participate in consensus, that's the validators. But they are an essential part of the economic distribution of Alio credits, which is the base layer asset on our network.
00:09:53.686 - 00:10:20.814, Speaker A: Snark VM is our equivalent of the EVM. The one thing that I'll say about this is it unlocks. Because this whole VM is built using zero knowledge proofs, it unlocks some new use cases that aren't possible in Ethereum. And let me just explain what I mean by that. In Ethereum, in order to prevent dos attacks against the network and spam transactions, they introduce this concept of gas. Right. Gas effectively limits the amount of computation that you can do within a single block.
00:10:20.814 - 00:11:14.626, Speaker A: Right. Each block has a gas limit and all the applications or all the transactions that are processed within a given block have to take a share of that gas limit. In Alio, we don't have a concept of Gas. Why is that? Because all the computation happens off chain and then you generate a zero knowledge proof on chain which is matched with a deployed program. So someone who's verifying the proof and aka the client knows on the network look at the program ID of the transaction being sent to the network, verify the zero knowledge proof, and ensure that that proof and the transaction correspond with the given program ID that's deployed in the Smart contract registry or the program registry. And so practically speaking I'll talk more about this in the application section. What does this unlock? Well, for example, if you wanted to do a very heavy duty machine learning algorithm and have that affect some change or state update on chain, you would not be able to do that in Ethereum because it would blow through the gas limit very quickly.
00:11:14.626 - 00:11:42.540, Speaker A: Whereas here you can run that algorithm. You could run that computation and wrap a proof around it for years and then submit that transaction on the network and it's still valid. So that's, I think, one of the elements there that differentiates us from other layer ones that are typically or smart contract layer ones. And lastly, let me talk about Leo. Leo is our domain specific smart contract language. It's basically purpose built for writing programs that take advantage of ZK snarks. So I'll talk about a little bit more about all of these.
00:11:42.540 - 00:12:15.638, Speaker A: Okay, this is kind of more of a visual representation. I'm going to kind of skip through this so we can continue to move on. So this was something I kind of hinted at earlier. I kind of briefly mentioned that Ethereum, it's very hard to get privacy in the model, in the account model. In fact, Tornado Cash actually had this problem. It was pretty easy to disaggregate which accounts had touched the Tornado Cash smart contract, largely because the privacy pool was like the pool of people using. It was small.
00:12:15.638 - 00:12:43.306, Speaker A: But in general, the account model gives much weaker privacy guarantees than the record model, the UTXO model. And we use kind of a blend of the two called the record model. So here's a couple of other pieces that I mentioned, or pieces of our participants in our protocol that I mentioned. We have validators that run consensus on Snark OS. We have provers that generate transactions on Snark VM, and we have developers that write programs in Leo. Cool. Yep.
00:12:43.306 - 00:13:29.710, Speaker A: So this is just I'm going to walk through a quick flow of how it works quickly. So if you're a developer and you want to write a program, you write your program in Leo. You deploy that program as part of a deployment transaction. The logic of the program gets uploaded to the program registry and then others can reference it. In this case, callers or users can take a program, generate a transaction with their secret inputs to the program, which are private, and send that transaction as a zero knowledge proof on chain, which is verified by the network nodes. And so this actually opens up the door to a whole new, I think, cloud services business, which is third party proving services, which can prove on behalf of users and I think folks in the room who have come from the hardware world or the mining world. I think this is really exciting because I think this is a potential great use case for specialized hardware.
00:13:29.710 - 00:14:08.438, Speaker A: Okay, cool. So no reexecution is kind of the main feature here. The other advantage of this, which I haven't talked about, the performance piece, is that by virtue of how transactions are constructed, every transaction is effectively a roll up. So you can actually pack 64 transitions or like simple transfers into a single transaction. So you kind of get the roll up architecture for free here. And of course, with that you get the cryptographic integrity of each transaction through the cryptographic proofs TLDR. It's very scalable relative to other approaches on layer two Ethereum.
00:14:08.438 - 00:15:01.034, Speaker A: So here's some use cases I'm really excited about. I'm going to talk about one here really quick because I think it's kind of the most interesting and exciting one is identity. Identity and a permissionless identity authentication protocol is something that's missing not just from web3, but from web two. And I think, again, as we start seeing governments and regulators take more interest in web3, we're going to see a lot of demand for KYC type products on chain. And I think Zero Knowledge cryptography is perfect for this use case. And so we've actually kind of focused on this initially and deployed our own proof of concept application called ZPass, which I might have a slide about here in a minute to basically use a government issued ID upload that on the Alieo blockchain as an encrypted record and then enable users to be able to prove about that all in a completely permissionless way. I think that identity piece is what enables compliant finance, and I think there's many other cool use cases too.
00:15:01.034 - 00:15:42.530, Speaker A: I'm not going to talk much about gaming, but for those of you who have been in the Ethereum ecosystem for a while, dark Forest, I think, was a really cool proof of concept that I hope we can support things like that on Alia. Cool. So where are we? What we've been building for three and a half years? We're preparing to launch Mainet launch in December. We have 200 applications on our testnet, a lot of adoption of Leo. And overall, we're looking to build and develop the developer ecosystem and hopefully inspire folks to build some of the applications that I mentioned a couple slides ago. So here is some list of resources about Alio and Leo, and I want to thank everyone very much for their time and attention.
