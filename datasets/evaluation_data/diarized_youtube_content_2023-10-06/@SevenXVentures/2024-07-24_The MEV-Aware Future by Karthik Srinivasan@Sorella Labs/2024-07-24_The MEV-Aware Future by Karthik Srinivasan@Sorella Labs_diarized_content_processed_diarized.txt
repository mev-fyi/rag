00:00:01.400 - 00:00:46.296, Speaker A: I'm partake, co founders from law, and I will be talking about the MUV aware future, which is my hypothesis for where apps will go as this phase kind of falls. So, a quick structure. First we'll talk about me generally. Then the attribution problem, which is the problem with most Meg designs right now. And then the sovereign, which is my thesis. Cool. So the canonical example is sandwich.
00:00:46.296 - 00:01:24.860, Speaker A: Basically, an uninformed user submits a naive order. It has a naive slippage and the profit maximizing arbitrage for sophisticated players. This front run have the victims swap them in back. So in scenario one, assume that this doesn't happen and the user transactions is the first to touch whatever Dex they're swapping on. And assume like a block prior, the stacks was properly reset to whatever the true cross was. So now the user's actually getting pretty good executing quality right there, basically transacting into stacks, picking up piece of fee, and then creating some slippage. But nothing that is too major in stereo.
00:01:24.860 - 00:01:55.290, Speaker A: Two. Now you have searchers who monitor the times, see that there's value extracted because the transactions is the pitch that was unfavorable, and now they exploit it. Right? But obviously this is a deterministic opportunity. So there is going to be a market to actually be the one to extract from the user, and this is going to the builder who eventually goes to the proposal. So the idea is that this opportunity is captured based on what we have in place. But, um, it's nothing to be directed. Probably the users don't want to get screwed over.
00:01:55.290 - 00:02:27.610, Speaker A: Okay, the next type is me be created through information. And the classic sample is sessions. So this is a function of consensus generally, where consensus takes time in the time of consensus. Now information is accruing outside of the chain, right, in terms of changes in this example. But it can be arbitrary in any given context. And whenever you have this asymmetry of information. Now there's a market to be created to touch the stale chain state of the previous block.
00:02:27.610 - 00:04:09.602, Speaker A: In the case of sextext, there is a market created to be the first to swap to a pool, because the first to swap through any given amm, if there is any volatility, realizing centralized exchanges will essentially be taking LP liquidity at better than true prices, which is a deterministic project, sophisticated players that have inventory both on centralized and decentralized exchanges. The idea is that this is a more centralizing opportunity, but it's also captured given that the sextext arbitrageurs compete against each other for the actual right to be the first to touch the dex state, the sale. So what is the attribution problem and basically whose MeV is being created, but where does the value actually got? So we see right now that these are two discrepant entities, right? We have PBS in place that basically realizes that building blocks and MeV generally is a very sophisticated process that is going to centralize, but it is a property of ethereum broadly, and like consensus systems with state and with transactions that, um, that, that have conflicting state access. So the idea is that let's have this value kind of compete away in a competitive market, and moved up the chain to a more decentralized party, which is the proposal in this case. So, at the bottom of the totem pole, you have the passive LP's uncommon creators. They're getting arbitrage left and right, the passwords by the sex x arbors, the atomic or the uninformed traders by the sandwichers. These go to the builders, and then the builders then bid up in a block auction to the proposal.
00:04:09.602 - 00:04:52.940, Speaker A: This is theoretically efficient because all the value should be captured. That is kind of escaping the system in these MEV opportunities. But the issue is that it's one lump sum, right? So we have, where we lack the granularity to be able to say, okay, we have this much value that has been extracted in the past block from MEV, both on chain deterministic, but also off chain informational. And we can aptly pinpoint who the adverse selected parties are. And we just moved it for it. Now just go into some opaque third party who is the proposer, who's not really in this kind of value flow system, right. It's basically value leaking in this auction that could be redirected to parties that are affected, to another third party that's not affected.
00:04:52.940 - 00:05:49.906, Speaker A: And there's mana lot too, in the l two space, where I, if you consider shared sequencing and the current designs, where it's basically like execution tickets. So the shared sequencer and each l two is going to auction off some future on their block space to sequence along with all the other l two s. Now you have the same issue where the value flows in protocol by selling these tickets and burning them or distributing the value back to token holders. But the actual Mev that is giving value to these execution futures is the result of an adverse society on chain that isn't being compensated appropriately. So why is this like that, incentive wise? If you really screw your eyes? It's basically like from the user's perspective, they send an order to the man pool. There's a competition that occurs where all these arbors are competing and they know the value of the opportunity and how much extract. But this all goes to the stake here.
00:05:49.906 - 00:07:02.882, Speaker A: So not only are they getting screwed over by the actual protocol itself, but they're actually paying stakers of the protocol to be screwed over by the protocol, which is just not sustainable. So this is why I think that all applications will move to being sovereign applications. What do I mean by this? Let's first get a few definitions out of the way. So an attributable app is something that I define as an app which is able to uniquely determine parties in the application, players in the application, each of their kind of competitive strategies in this game, and based on the outcomes of the game, decide who gets competed what in their market. So the easy example is a backdrop with uniform clearing props, right? This is basically saying that all of the ask and binside liquidity is going to be kind of piled together, each at their respective price, and then everything in the entire batch is going to be executed at the uniform price. So the idea is that uninformed swappers can just send their orders willy nilly, but the market makers will be incentivized to kind of squeeze this back to whatever the true price is because they're always competing against each other to execute the batch at the best possible price. And as they continue to compete, this will go and converge to whatever the true price is.
00:07:02.882 - 00:08:01.250, Speaker A: Another example is MVP taxes. This is basically an implementation in like a priority worrying model where if you as an application are able to say, look, there's tract behavior that can happen within my application and it will be the results of users playing out a priority fee to be sequenced first. I'm actually going to tax the sequencer to redistribute some of that priority fee back to me as the application, and I can redistribute that among the adverse assigned parties, the idea would be if you have devs and you're in like a priority sequencing paradigm, now you can charge a tax on the sequencer and then redistribute whatever the priority fee that was paid, pay pro rata back to the LP's of the first swap that transacted to the pool. And this should essentially solve LPR. In theory. What these apps try to maximize is participation and then minimize barrier to entry. So that's going to be the most possibly competitive option, and this is going to result strictly in the best prices for users.
00:08:01.250 - 00:09:05.806, Speaker A: The issue with attributable apps right now and how Mev can still be attracted is the second order effect, right? Where now if you have composability between apps, even if they are attributable, now there's some value in sequencing both together or being the first, you know, composable transaction in the blog that touches two different attributable apps and you pay some priority for this. How do you determine which app gets what? And this is actually a competition hard problem, right? So now you have like an emergent dynamic of applications that are attributable, setting their taxes kind of in conjunction with other attributable apps that they could possibly be sequenced with. And this is not the angle you want. So the other definition is a sovereign app. A sovereign app is an app that locks your state and thus is not composable to any other app. And they order themselves. Now you should strategically a good example mental model to have for this is like tattoos, right? So they're naively ordered based on some based on like a priority protocol model, some based on a first one first served model.
00:09:05.806 - 00:10:14.958, Speaker A: Either way, they are non composable in that they are submitting blobs to Ethereum for supplement. But they're not inherently composable with other l two s because they have to wait either timeout period or like the ZK went out, right? So they eventually settle on Ethereum, but are their own silos of state, which give many beneficial properties. What I think is going to be the end goal of applications generally, and the most performant applications are those that are both sovereign and attributable. This is the gold intersection, in my opinion, as we mentioned in the mv tax example, the problem of attributability of that sovereignty allows leakage decomposability. But the bigger problem of sovereignty without attributability, which is the case of l two s right now, is that more fair applications can always be built on top, right? The l two s are basically too big to be able to attribute whose mev or how to distribute mev. This is like the problem with most shared sequencing design, where if you auction off the execution future to some l two block space, this will go back to the token holders. So now you still have like the same system we have right now in pps.
00:10:14.958 - 00:10:44.928, Speaker A: This is kind of an opaque party. Who's getting the proceeds of a user that's getting screwed over on the l two itself, and they computationally cannot determine whose mev this is without fair applications. Who can built on top of the l two. So that's why I think this is the gold intersection. And market force will inevitably lead to this as the outcome right all saw equal. This will give strictly better prices for users because it is the most competitive and the values flowing back to them despite them being uniform. And the other benefit is that it's very easy for solvers.
00:10:44.928 - 00:11:58.986, Speaker A: So solvers can only focus on one specific subgame, get very good at that game and compete heavily in that game, and essentially be on the same playing field as like other integrated solver searcher builders that are doing everything right. Right now it's not feasible for me to only be a satisfactory on Ethereum and UCC. Being that if I am better at pricing than any of the integrated builders, they have the capability just pricing me out of blocks, right? They can send to me and now I am unable to compete in these opportunities. But if we have an attributable and sovereign app that is only for this pair, now I am basically competing in the auction with them on the Apple application specific auction level and this application that post whatever the transaction bundle is to the l one. But I will be able to beat them based on the application like itself. The other benefit for applications generally is that this monopolies very easily. So as soon as you reach PMF as an application and you control your own state, now there's kind of this like pinwheel effect, this positive feedback loop that happens where everyone else on competing apps that have composability with each other and are presumably beyond extracted, they're going to move over in terms of liquidity or use to your application.
00:11:58.986 - 00:13:18.972, Speaker A: And now you not only have the deepest application in terms of liquidity and the one with the most usage, but you also have the walk on your state that makes it so that no other competitor can really spin up and then kind of take your users via extracting through compostability. So here's an example of like a possible future where this is really beneficial, right? So on the left hand side, sorry, it's probably a bit hard to see, but left hand side, we have one application which is spot liquidity and this is gated by a form certificate of application specific we stake. So all the users submit their orders which are like permit to to this application off chain consensus mechanism running in parallel to whatever these settlement chain is. And we also have searchers that are monitoring this kind of all the order flow that's circulating within the nodes of the system and they are placing orders at more performant prices to make the batch execute at the best possible price, competing against each other. So now once the batch is finalized, then the notes sign off on. Okay, this is a conical batch. They're able to access the contract on the l one, which is gated by forms, which would be get, let's say, two thirds of the nodes signing off that this is a good batch.
00:13:18.972 - 00:14:01.894, Speaker A: And now they have inclusion as well. Right now, on the right hand side, we have a perk depth, and this is going to be a semfsequencer, same kind of thing, where the user sent to the semfest sequencer. The searchers monitor orders that the sequencer is getting sent by users, and they are competing against each other to fill them with the best prices. And the Mfsequencer is the only one who can touch the smart contract. Okay. They send this batch of finalized transactions that are sequenced by perhaps some fair ordering mechanism, or in this case, you're clearing again for fair ordering, maybe like demons or something, right? And they send this to the old one. And now this is in the same block as the other application.
00:14:01.894 - 00:15:06.452, Speaker A: But the beauty is that both are communed with each other, right. There's no extra action that can be done by ordering one ahead of the other or putting them in any other position in the block, because they control their own state, so they're blocking, not say, and as a result, they only have to pay whatever the base fee is, plus epsilon times the number of orders in the actual bundle for inclusion. As a result, if all applications move in the future, then the proposers are only going to be getting whatever the base fee is. Plus however many transactions were included in their block, which is what they should be getting, because what they're selling is essentially block space, and this is the exact amount of block space they're selling. Some open questions. So the issue with this design currently is that a user can equivocate, right, if you have a batch and everything is kind of sequenced properly, but the user wants to dos everyone or is not happy with their order, they can basically set a transaction with a higher priority that wipes out all their funds, and now they can't pay for this. So the entire batch obviously not desirable.
00:15:06.452 - 00:16:02.678, Speaker A: And a big issue right now. They can also send in a room with the same noise, for example, that would invalidate their work with batch. But there's a lot of emerging infrastructure being built around making sure that the user can equivocate on this in terms of intent, design stuff of the sort that I think will hopefully CPm out soon, or hopefully be built soon and then integrated in the system like this, where now it's not feasible to dos a large bundle at scale. The other reason I'm not too worried about this is that to actually dos this bundle, you would have to bid a priority fee that is more than the aggregate weight of the bundle. So you have to say, like, I'm willing to pay however many transactions are in this bundle boss, or times the base fee, I have to pay that in priority fee to actually toss this. And that is just a losing proposition at scale for the person who's trying to toss. The other interesting thing is paralyzing bundling.
00:16:02.678 - 00:16:58.824, Speaker A: Right. So if you screen your eyes, this kind of looks like a state lock on whatever block space your application, or, sorry, state space your application touches. This is a lot of like, very similar to a lot of distributed systems literature that allows you to have parallel read writes from databases, generally. So is there a way where we can build really, really large blocks efficiently where all applications kind of silo their own state, and you have an optimistic model where all the builders assume, okay, this application isn't a siloed state, they just send me shreds of whatever their application specific transactions are, and then we can build the entire block in parallel. And then the other thing is precons for app space. So this is kind of like the problems all the altruists are facing right now is when do we want to send our blobs? How do we actually price the prefonts, given whatever, look ahead. We're trying to do.
00:16:58.824 - 00:17:35.589, Speaker A: How does this kind of. How is this affected by any sort of, like, fluctuation in the base feed price, et cetera? And how do we get users in our application to be able to, like, accelerate this process should they want to? These are issues that are all being ironed out. I think the design space, especially for precomps, is very nascent, but an interesting application of stuff that the l two s are focused on that I think eventually applications will be more so focused on. Anyway, an optimistic future for kind of reducing and eliminating me, generally. Thank you.
00:17:40.920 - 00:17:45.740, Speaker B: Because we have two market makers here. I don't know if market makers have any questions.
00:17:48.440 - 00:18:14.030, Speaker C: Yeah, I just wanted to focus on one of the points that you made about how under this new paradigm, that Sorella is enabling solvers that have a particular kind of competitive edge, let's say like insect sex arbitrage would not be able to just be, like, priced out by those that may not have as much of an edge, but perhaps they just control a lot more funds or are able to kind of take more of spreads, for example.
00:18:14.110 - 00:18:59.116, Speaker A: Right, right. So the reason is because you are limiting the scope of the opportunity, right? Right now the opportunity is across like the entire block generally in terms of building the entire block. So me, as someone who only wants to hold inventory on Ethereum and USCC, I can theoretically compete for this opportunity. Need to just sex fashion. That being said, if I ever encroach in terms of beaver builds like total p and l, and they think that oh, if we just take an immediate loss and price them out of the next month of blocks, then it won't be an issue in the future. They can do this because they are able to actually build the entire block. But in this system that Terrell enables, now you modularize each specific option.
00:18:59.116 - 00:19:06.000, Speaker A: So there would be a separate option for just EQSC where I would be as competitive as SAP in being able to extract them.
00:19:06.540 - 00:19:37.014, Speaker C: Got it? Makes sense. And one more point about the auctioning system as well. So I think there's also an implication that the serial network itself would need to extract some kind of like a value from proceeds from auctions as well. So like how much is the network supposed to be taking? Is that like dynamically adjusted? How much are they sharing with the users? You're saying kind of like what's kind of the rationale behind, I guess how you think about pricing, how you're kind of making everything more still like cost effective or worthwhile for all parties to kind of participate.
00:19:37.102 - 00:20:11.674, Speaker A: Right, right. You get an inherent unlock with like restake teeth, right. Because the ETH is already staked, that's being used as collateral to steer the system and that's getting yield through staking. But you can add more yield on top of that with just like a little bit in terms of how much you're paying the validators for holding selection properly. And they're more than happy to do so because the actual compute cost of like the hardware necessary to run the sidecar is very minimal. So you just have to be able to pay a bit more than that and actually come out to maybe like 0.5% APY, right.
00:20:11.674 - 00:20:33.620, Speaker A: And take that off of either of I think like, you know, Sam design for that is just whatever fee is being paid by swappers and market makers to the obvious, to transact like 5% of the total LP fee and then pay it to the proposals.
00:20:34.560 - 00:20:35.380, Speaker C: Thanks.
00:20:37.200 - 00:20:39.100, Speaker B: Thanks. Any more questions?
00:20:43.170 - 00:20:52.550, Speaker C: So on the previous slide, you said the DoS cost is like gas use times base B. Why? Why?
00:20:53.090 - 00:21:22.040, Speaker A: So it's the DOS is you have to essentially submit a transaction with the same nons as the one included in the bundle. But you have to have this sequence ahead of the bundle. So the builder is getting whatever the base fee is, times the number of transactions in the bundle from the bundle itself. But to get your transaction sequence, first you have to pay that amount plus a bit more to actually dust the bundle. Right.
00:21:23.780 - 00:21:40.090, Speaker C: But this gets burned like the, basically gets burned like it's not an incremental value additive. Like a builder is not going to care about what the basically is. Right?
00:21:45.150 - 00:22:03.060, Speaker A: Yes, presumably you're right. Basically, it's very, let me think that then what's the incentive right now to fill up box?
00:22:04.000 - 00:22:05.096, Speaker C: What? Priorities.
00:22:05.248 - 00:22:14.820, Speaker A: What's up? Even camera priorities. Right. Like this. Strictly priority. Yeah, but then why does any builder include transactions that like don't touch content or state?
00:22:16.360 - 00:22:19.672, Speaker C: Because they pay like marginally non zero priority.
00:22:19.856 - 00:22:33.682, Speaker A: Same like. Yeah. So same idea, right? Where let's say they play Epsilon as a priority field, right? And now the user would have to pay like number transactions times that. So on two actual costs, right? Sure.
00:22:33.706 - 00:22:37.666, Speaker C: But then the like cost to attack is way lower.
00:22:37.698 - 00:22:37.866, Speaker A: Right?
00:22:37.898 - 00:22:40.030, Speaker C: It's just like the priority that gets paid on.
00:22:40.410 - 00:22:56.094, Speaker A: Well, it's linear in any argument, right? Where in your case it's like, okay, they're paying like Epsilon as a base fee, but this is the same case as if the base gas was just epsilon. Right, right.
00:22:56.182 - 00:22:56.810, Speaker C: Ok.
00:22:57.310 - 00:23:42.180, Speaker A: But I think, like, I mean, to your point, there will be, I don't know, at least from our perspective. Right. The idea is that blockbuilding generally is combinatorial and they have a lot of stuff to search through. It's very easy for them to just say, okay, this application is not going to touch any contentious state and I don't even want to bother sequencing it or perhaps having a user doss up at the same accounts. So I'm just going to sequence it at the top of the wall before anything can happen with any of the accounts that are transacting elsewhere, but also dispatch. And then they can do the actual comic, real search over the stuff that matters. But you see the argument of why it's essentially the same.
00:23:42.180 - 00:23:45.832, Speaker A: Sure.
00:23:45.856 - 00:23:47.904, Speaker C: I mean, it just sounds like it's a lot lower.
00:23:48.072 - 00:23:52.656, Speaker A: Right, right. But then, yeah, then increase the maps on there.
00:23:52.728 - 00:24:04.384, Speaker C: All right, very sure. And the other thing was, you mentioned a lot of, maybe I just missed it earlier. You mentioned a lot of repayments to adversely selected participants. What is an adversely selected participant in this definition?
00:24:04.512 - 00:24:35.254, Speaker A: Right. So in the case of like a swap, there would be the person made sandwich, right. But the repayment is a function of the design of the system itself. So if you have a hybrid overbook amm that executes everything at uniform third price, now, it's impossible to sandwich, because the actual sandwich here is being executed at the same price as the user. Right. So the competitive game is not about the block space that then leaks value to the proposers. Rather, it's a battle to fill the user at the best possible price.
00:24:35.254 - 00:25:00.500, Speaker A: And if you kind of tack in the underlying pool liquidity here, then you execute everything at uniform clearing price. So now it's not only very difficult and impossible in a competitive market to extract from the users, you also are saving yelpies, at the same time making sure that they're transacting whatever this uniform claim price is that's being competed up to by the sophisticated players to whatever the true price of the opportunity is.
00:25:02.400 - 00:25:03.380, Speaker C: Okay, sure.
00:25:05.280 - 00:25:08.640, Speaker B: Thank you. Any more questions? Yeah, thank you.
