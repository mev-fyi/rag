00:00:00.570 - 00:00:01.120, Speaker A: It.
00:00:01.650 - 00:00:03.678, Speaker B: So yeah, nice to hear everyone.
00:00:03.764 - 00:00:14.718, Speaker C: I'm qedk. I'm a senior RND engineer at Avail and yeah, happy to be here at seven x research day talking to you guys about modularity. So I mean, all of, a lot.
00:00:14.724 - 00:00:15.918, Speaker B: Of you guys have probably seen the.
00:00:15.924 - 00:00:21.502, Speaker C: Announcements that have gone out on Twitter today. We announced our fundraise for 27 million.
00:00:21.556 - 00:00:26.326, Speaker B: For seed funding as well as the avail Trinity. So let's delve into what we are.
00:00:26.348 - 00:00:31.080, Speaker C: Sort of going to be building going forward into 2024 and even 2025.
00:00:33.290 - 00:00:38.566, Speaker B: So here's the big picture that we sort of have today, right? What we're kind of seeing is the.
00:00:38.588 - 00:00:42.186, Speaker C: Status quo of roll ups moving towards Ethereum roll ups and Ethereum l two.
00:00:42.208 - 00:00:46.714, Speaker B: S. And these have already been recognized as the sort of the trusted way.
00:00:46.752 - 00:00:58.206, Speaker C: To have off chain computation, right, where we shift execution from Ethereum to roll ups and l two s. And as well as, I mean to include validiums in this, of course, as well. And the primary problem that we see.
00:00:58.228 - 00:01:00.158, Speaker B: With this is that we are kind.
00:01:00.164 - 00:01:02.670, Speaker C: Of constrained by Ethereum's DA, right?
00:01:02.740 - 00:01:04.474, Speaker B: So today, if you look at Ethereum's.
00:01:04.522 - 00:01:13.934, Speaker C: Blob space, we kind of assume that it's going to get much more competitive as much more roll up, start supporting protodank sharding once we have it coming out on March 13.
00:01:13.982 - 00:01:14.580, Speaker D: Right?
00:01:15.110 - 00:01:17.746, Speaker C: And then, so that's kind of what we want to solve for it.
00:01:17.768 - 00:01:21.830, Speaker B: Avail from the get go where we have scalable DA in the form of scalable block space.
00:01:21.900 - 00:01:24.566, Speaker C: So let's talk a bit more about how we make that happen.
00:01:24.748 - 00:01:25.480, Speaker D: Right?
00:01:26.170 - 00:01:30.966, Speaker B: So of course, the big problem that we have with the picture today is.
00:01:30.988 - 00:01:33.178, Speaker C: That there is too much fragmentation going on.
00:01:33.344 - 00:01:34.758, Speaker B: So let's say you have arbitram, let's.
00:01:34.774 - 00:01:35.958, Speaker C: Say you have optimism.
00:01:36.054 - 00:01:39.658, Speaker B: Let's say you have polygon CDK chains. There is no seamless way to sort.
00:01:39.664 - 00:01:40.810, Speaker C: Of interrupt between them.
00:01:40.880 - 00:01:42.106, Speaker B: And that's sort of what we want.
00:01:42.128 - 00:01:44.058, Speaker C: To solve for and that we want.
00:01:44.064 - 00:01:48.974, Speaker B: To do with the avail Trinity. So with avail Trinity, we have three.
00:01:49.012 - 00:01:53.566, Speaker C: Primary products that we're kind of expanding our focus towards. One is avail da, the tried and.
00:01:53.588 - 00:01:55.294, Speaker B: Trust ta that you guys have already.
00:01:55.332 - 00:02:00.414, Speaker C: Heard of, and that probably a lot of roll ups use today in the form of dimension roll ups or carnot.
00:02:00.462 - 00:02:06.646, Speaker B: Roll ups or any sort of the different RAS solutions that we sort of have. What we are going to talk about.
00:02:06.668 - 00:02:08.550, Speaker C: Today as well is avail nexus.
00:02:11.210 - 00:02:18.934, Speaker B: Unified layer for rollups. And finally avail fusion, a shared security layer where you derive security from multiple tokens.
00:02:19.062 - 00:02:21.754, Speaker C: So let's delve into how the big picture can look.
00:02:21.792 - 00:02:22.380, Speaker D: Right?
00:02:23.790 - 00:02:26.106, Speaker B: So of course at avail, we understand.
00:02:26.208 - 00:02:30.458, Speaker C: The need to solve for fragmentation at the very earliest, right?
00:02:30.544 - 00:02:33.770, Speaker B: Like surely we are enabling roll ups using DA.
00:02:34.430 - 00:02:36.898, Speaker C: We are enabling for scalable blobs.
00:02:37.014 - 00:02:38.398, Speaker B: But how do we address all of.
00:02:38.404 - 00:02:39.518, Speaker C: These roll ups and how do we.
00:02:39.524 - 00:02:42.350, Speaker B: Kind of have them communicate with each other seamlessly?
00:02:42.770 - 00:02:44.666, Speaker C: And that's where you have avail nexus.
00:02:44.778 - 00:02:48.010, Speaker B: It allows you to unify roll ups across web3.
00:02:48.180 - 00:02:55.742, Speaker C: Sure, some of them don't even need to be EVM. It can be EVM, it can be SVM as long as it follows a certain set of parameters that are loosely defined.
00:02:55.806 - 00:02:57.394, Speaker B: We can kind of have them unified.
00:02:57.442 - 00:02:58.790, Speaker C: In one single layer.
00:02:59.690 - 00:03:04.358, Speaker B: And this coordination of value, there is a certain problem with how we can.
00:03:04.364 - 00:03:06.722, Speaker C: Kind of make it happen without economical incentives.
00:03:06.786 - 00:03:07.014, Speaker D: Right?
00:03:07.052 - 00:03:11.770, Speaker B: So to address that, we have avail fusion, which is a shared security layer.
00:03:12.190 - 00:03:18.140, Speaker C: Or rather more like a shared economic security layer that we'll kind of expand on right after this.
00:03:19.790 - 00:03:21.914, Speaker B: So let's talk a bit about avail da, right?
00:03:21.952 - 00:03:25.998, Speaker C: What makes availda good? All right, what makes Avail da work?
00:03:26.084 - 00:03:41.214, Speaker B: So firstly, we are, as far as I know, the only validity proof based DA layer in the system. What that basically means is we have very easy verifiability. We have KZRG polynomial commitments which make avail da suitable across different roll ups.
00:03:41.262 - 00:03:42.338, Speaker C: In this particular space.
00:03:42.424 - 00:03:42.962, Speaker D: Right?
00:03:43.096 - 00:03:48.026, Speaker B: So what this also means is that you, as a user of a protocol.
00:03:48.078 - 00:03:49.782, Speaker C: That is probably a roll up, can.
00:03:49.836 - 00:03:52.306, Speaker B: Actually verify the state of your roll.
00:03:52.338 - 00:03:56.886, Speaker C: Up trustlessly by running these avail lightslides. And secondly, of course, the point of.
00:03:56.908 - 00:04:05.530, Speaker B: Scalable blob space, we allow roll ups to scale just because blob space is going to be that much cheaper and because we can do it efficiently at scale in production.
00:04:06.270 - 00:04:17.098, Speaker C: And of course, as you've announced, availed DMA net will be coming in h one of 2024. So a bit about Nexus.
00:04:17.274 - 00:04:19.402, Speaker B: Nexus is intended to be a permissionless.
00:04:19.466 - 00:04:31.666, Speaker C: Verification hub or unification of different roll ups. So it kind of comes with two important facts. One is proof aggregation, and second is sequence of selection. The first, of course, is much more important to us than the second.
00:04:31.768 - 00:04:37.746, Speaker B: So what does proof aggregation entail? Right, it basically means that as long as certain roll ups either, as I.
00:04:37.768 - 00:04:43.142, Speaker C: Said, EVM, SVM, non EVM, EVM plus, even hypothetically, as long as you have.
00:04:43.196 - 00:04:59.066, Speaker B: Those loose set of parameters that they're able to abide by and they're posting data on avail, we can kind of have a single proof for all of these roll ups that allow for seamless interoperability between them. And of course, the nature of interoperability can differ. It can be transferring tokens, it can.
00:04:59.088 - 00:05:03.438, Speaker C: Be transferring messages, it can be varied depending on the use case that a.
00:05:03.444 - 00:05:04.750, Speaker B: Particular roll up wants to support.
00:05:04.820 - 00:05:05.534, Speaker D: Right.
00:05:05.732 - 00:05:12.426, Speaker C: And second, and slightly less important here, but of course something that we're targeting is sequencer selection.
00:05:12.538 - 00:05:14.318, Speaker B: It basically means that a transaction that.
00:05:14.324 - 00:05:17.202, Speaker C: Is being sequenced and included happens through.
00:05:17.256 - 00:05:21.058, Speaker B: A decentralized sequencer set. This basically also means that we kind.
00:05:21.064 - 00:05:23.406, Speaker C: Of move away from the native structure.
00:05:23.438 - 00:05:27.266, Speaker B: Of rollups today, where we have a centralized sequencer system to a roll up.
00:05:27.288 - 00:06:01.790, Speaker C: That uses the Nexus layer and kind of relies on a wider set of sequencers that are able to do this at scale in a scalable manner. And for this we're targeting late h two of 2024. And thirdly, of course, we have avail fusion, which is a shared security, economic security layer where we allow the most native of assets of the mature ecosystems. Primarily what we're targeting now is bitcoin and ETH that will provide additional security to avail network as well as avail based roll ups.
00:06:02.210 - 00:06:06.386, Speaker B: So basically what this entails is that the security of avail can continue to.
00:06:06.408 - 00:06:14.738, Speaker C: Grow as the security of fusion also grows in terms of economical value, of course. And secondly, of course is that it contributes to consensus, right?
00:06:14.824 - 00:06:19.122, Speaker B: Because then technically, instead of having just avail token for staking, you have BTC.
00:06:19.186 - 00:06:23.618, Speaker C: ETH X roll up tokens, hypothetically, that then we can reuse for avail conset.
00:06:23.634 - 00:06:25.778, Speaker B: Of staking, essentially making the staking layer.
00:06:25.794 - 00:06:31.420, Speaker C: Of avail that much more secure. And for this we are targeting 2025.
00:06:33.390 - 00:06:35.690, Speaker B: So primarily what that means is that.
00:06:35.760 - 00:06:46.158, Speaker C: We accelerate the unification of web3 by enabling modular roll ups to scale at large. That's kind of what we are envisioning as we move forward. So maybe we can delve into a.
00:06:46.164 - 00:06:54.142, Speaker B: Bit technical details about what Avail DA currently offers today. So what avail is today is basically.
00:06:54.196 - 00:06:55.914, Speaker C: It'S a modular base layer.
00:06:56.042 - 00:06:58.146, Speaker B: It doesn't really infer the kind of.
00:06:58.168 - 00:07:00.142, Speaker C: Data that is being put on its own chain.
00:07:00.286 - 00:07:04.446, Speaker B: And that's sort of what makes dlairs so special, right, because then the DA.
00:07:04.478 - 00:07:05.954, Speaker C: Layer doesn't have to worry about what.
00:07:05.992 - 00:07:08.110, Speaker B: The data contains, how to perceive the.
00:07:08.120 - 00:07:11.766, Speaker C: Data, how to translate the data. Any of those considerations don't really apply.
00:07:11.868 - 00:07:19.014, Speaker B: Well, the only thing that we really care about is specializing in sequencing, packaging and publishing data. And what this basically means is we.
00:07:19.052 - 00:07:31.530, Speaker C: Segregate all data based on their app ids, which means that anyone can publish transactions based on their app ids that they have. But then technically you can query the entire chain state of, let's say even roll up x, roll up y.
00:07:31.600 - 00:07:33.398, Speaker B: All of that is publicly available for.
00:07:33.424 - 00:07:37.694, Speaker C: Everyone to kind of use and share. And of course what we want with.
00:07:37.732 - 00:07:40.010, Speaker B: That is to have a robust validator.
00:07:40.090 - 00:07:47.554, Speaker C: Set because of course this is DA means liveness guarantees. So we want it to be as robust as possible. I'll kind of expand on how we.
00:07:47.592 - 00:07:49.842, Speaker B: Make this happen as well right after this.
00:07:49.976 - 00:07:57.320, Speaker C: And finally, what we come to the most important part is the part where I said that we do not infer the kind of data that has been posted in avail.
00:07:57.770 - 00:08:00.178, Speaker B: It's sort of what we call lazy.
00:08:00.354 - 00:08:02.310, Speaker C: Or a dirty ledger blockchain.
00:08:03.290 - 00:08:05.138, Speaker B: And this is what allows any roll.
00:08:05.154 - 00:08:28.730, Speaker C: Ups that are interrupting with Avail or with nexus to use sort of any vm they want. So it can be like, as I said, you can technically have state machines which have no vms as well. It's really not a consideration. So we have, I guess our claim to fame would be our light clients that enable data availability sampling.
00:08:28.890 - 00:08:34.846, Speaker B: What this basically means is that with the help of polynomial commitments as well as erasure coding, we can kind of.
00:08:34.868 - 00:08:38.578, Speaker C: Have a much more efficient way of verifying that some particular data is correct.
00:08:38.664 - 00:08:41.938, Speaker B: And that particular data is available. That's sort of the two guarantees that.
00:08:41.944 - 00:08:47.586, Speaker C: We seek from any data that is posted to avail. And then this is sort of what having a light client enables, because it.
00:08:47.608 - 00:08:51.442, Speaker B: Means that as a roll up provider x, you can kind of trustlessly verify.
00:08:51.506 - 00:08:53.206, Speaker C: That your chain state was correct and.
00:08:53.228 - 00:08:54.360, Speaker B: It is always available.
00:08:54.730 - 00:09:09.514, Speaker C: Of course it means you have to run the client client, but then that also means that it is independent of every other operator. You do not need to trust an avail validator node. You do not need to trust an avail full node. In fact, you and person X can run it on different ends of earth. And then you can just verify that.
00:09:09.552 - 00:09:15.374, Speaker B: It is actually the data that we are claiming is there. Is actually there, which basically means that.
00:09:15.412 - 00:09:18.414, Speaker C: We can have a massive vibrant ecosystem being built on top.
00:09:18.452 - 00:09:18.702, Speaker D: Right?
00:09:18.756 - 00:09:34.946, Speaker C: You can have l three s, you can have l four s, you can have validiums, you can have avail based sovereign roll ups. There's a lot of applications that can kind of take usage of this, especially in the form of what we're kind of thinking will be the way of moving ethereum roll ups forward, which is.
00:09:34.968 - 00:09:37.218, Speaker B: Validiums because that basically means that you.
00:09:37.224 - 00:09:39.426, Speaker C: Can derive security from the settlement layer.
00:09:39.458 - 00:09:40.786, Speaker B: Which will be ethereum.
00:09:40.898 - 00:09:42.646, Speaker C: But then it means that you can.
00:09:42.668 - 00:09:45.318, Speaker B: Also leverage Avail's DA facilities to kind.
00:09:45.324 - 00:09:48.570, Speaker C: Of post data at a much economical scale.
00:09:52.250 - 00:09:56.390, Speaker B: So a bit of block production. Just talk about DA.
00:09:56.730 - 00:10:02.118, Speaker C: We basically send data blobs to avail using an application id. So if you have an account, all.
00:10:02.124 - 00:10:03.046, Speaker B: You have to do is you just.
00:10:03.068 - 00:10:16.922, Speaker C: Go and create your application id, and then every data that you post is sort of year marked with that id. The terablobs get chunked and we make an end to end matrix, and they get segmented according to their app id.
00:10:17.056 - 00:10:19.770, Speaker B: We create row wise KJG polynomial commitments.
00:10:19.850 - 00:10:32.782, Speaker C: And then we perform erasure coding on those commitments. And finally, what makes it scalable, or basically, what I mean by adjustable blob space, is that depending on the blob space that we're using right now, we can change the size of the matrix.
00:10:32.846 - 00:10:34.786, Speaker B: So let's say a particular blob or.
00:10:34.808 - 00:10:42.066, Speaker C: A particular block has only, let's say four kb of blob, we can have a much smaller matrix. And then when we have like, we.
00:10:42.088 - 00:10:44.806, Speaker B: Use the full two mb blob space that we have today, we can form.
00:10:44.828 - 00:10:46.354, Speaker C: A much larger matrix.
00:10:46.482 - 00:10:48.306, Speaker B: And this basically means that we don't.
00:10:48.338 - 00:11:03.290, Speaker C: Waste computational power, which makes it much scalable at large. And finally, we have the block header, which contains the commitment app index and the matrix size that then we kind of reuse later in the lite client to verify the data availability guarantees trustlessly.
00:11:05.630 - 00:11:07.786, Speaker B: So for the base layer stack, this.
00:11:07.808 - 00:11:33.170, Speaker C: Is for avail da, we have u substrate, which is already known to be quite modular and highly performant. The choice was of course ours, and it has worked out. And for consensus, we use Babe and Grandpa. This is primarily to deal with the availability finality dilemma. And where we have blabe as the block production engine, which is important for liveness, because as a roll know, your roll up shouldn't be down, right?
00:11:33.240 - 00:11:35.750, Speaker B: Which basically means that you can keep posting to avail.
00:11:35.900 - 00:11:39.382, Speaker C: And in terms of congestion, then the finality slows down.
00:11:39.436 - 00:11:40.994, Speaker B: But it doesn't mean that avail stops.
00:11:41.042 - 00:12:11.938, Speaker C: Avail keeps pumping, right, which means that you can have two mb blocks every 20 seconds, and then your roll up is always live in that term. And then finally we have grandpa as the finality gadget, which basically again allows for much more efficiency, because then we can have finality not on a single block, but on a series of blocks, or rather a chain, which kind of makes this entire system kind of versatile and fault tolerant. So that's sort of where we are with the current stack of Availda. We have the light client network that.
00:12:11.944 - 00:12:17.506, Speaker B: I've been talking about for furthering the purposes of trustlessness, where basically we have.
00:12:17.528 - 00:12:27.474, Speaker C: Written a client from scratch in rust. And we have an overlay p two p network that is above and our already existing validator or full node sort of network.
00:12:27.522 - 00:12:28.070, Speaker D: Right?
00:12:28.220 - 00:12:30.434, Speaker C: And we have academia based DHT.
00:12:30.562 - 00:12:32.982, Speaker B: That's sort of how we populate which.
00:12:33.036 - 00:12:34.818, Speaker C: Cells have to be fetched from, which.
00:12:34.844 - 00:12:42.346, Speaker B: Cells have to be written to. And finally, the DHT is what contains the cell level proofs, which allows a.
00:12:42.368 - 00:12:56.010, Speaker C: Roll up provider x, for example, to kind of verify the correctness of the samples that they are doing, which we have shown in testing that we can, with even hundreds or thousands of lcs, we can kind of verify a full block trustlessly.
00:12:56.090 - 00:12:57.166, Speaker B: By trustlessly of course.
00:12:57.188 - 00:13:19.554, Speaker C: I mean, you do rely on a bootstrapping full node, but you rely on your other lite clients for everything else. So you're not making RPC queries to a full node, nor are you making RPC queries to a validator node after the bootstrapping period. So when I mentioned the vibrant ecosystem.
00:13:19.602 - 00:13:21.414, Speaker B: That I spoke of earlier, this is.
00:13:21.452 - 00:13:40.960, Speaker C: Sort of what we envision. What we kind of see things moving towards are primarily sovereign roll ups, validiums and app specific chains. We're kind of seeing this already play out in the form of different Ras providers like dimension Carnot, as well as there's another one, let's forget about that.
00:13:42.610 - 00:13:43.630, Speaker B: Who knows?
00:13:44.130 - 00:13:52.090, Speaker C: And of course we have optimistic chains that kind of, we now term them as optimiums that are sort of coming into view. For example, there is manta.
00:13:52.250 - 00:13:53.538, Speaker B: We already have three to four, I.
00:13:53.544 - 00:14:04.738, Speaker C: Guess Manta is the most popular one that we have now. And of course general purpose roll ups and l three chains on top of Ethereum, l two s, which was sort of the vision, the roll up vision of Ethereum's roadmap.
00:14:04.834 - 00:14:06.838, Speaker B: So l four s, l five s.
00:14:06.924 - 00:14:11.320, Speaker C: Validiums as a whole, that's what we envision things moving towards.
00:14:14.110 - 00:14:18.062, Speaker B: So this is kind of the flow. If we had validians and optimiums today.
00:14:18.116 - 00:14:38.706, Speaker C: Which you already do, for example, you already have a Zkavm validium. We have sovereign stack adapters as well. We have op stack adapters. We'll be migrating to polygon CDK validiums going forward as well. We are in talks underway as well as technological advancements underway already to make it happen. Probably going to come out in somewhere at the end of March. That's what we're kind of targeting for.
00:14:38.706 - 00:14:41.138, Speaker C: And what kind of enables all of.
00:14:41.144 - 00:14:43.446, Speaker B: This is a data administration bridge that.
00:14:43.468 - 00:14:54.214, Speaker C: We currently have live on testnet. And of course when avail goes main net in h one 2024 we will of course have vector data attestation bridge deployed on Ethereum mainet as well, which.
00:14:54.252 - 00:14:58.026, Speaker B: Basically means that you can have l two validiums which post data to avail.
00:14:58.128 - 00:15:21.714, Speaker C: External d. But they settle in Ethereum and they're kind of secured by validity proofs. Of course, if they're not secure validity proofs, but rather fraud proofs, then they become l two optimiums. And similarly another flow for l three validiums where an l three validium is settling on an l two roll up, let's say arbitram. And then you have an arbitram orbit l three validium which is settling on an l two roll up.
00:15:21.752 - 00:15:23.426, Speaker B: The data gets posted to avail and.
00:15:23.448 - 00:15:31.298, Speaker C: Then we have the attestation bridge which is vector that is operating on both Ethereum and the l two roll up. And then we're able to verify this.
00:15:31.384 - 00:15:33.158, Speaker B: Using the data attestation bridge that the.
00:15:33.164 - 00:15:44.774, Speaker C: Data was indeed posted and available on avail. And of course what we are very much excited about are avail based sovereign roll ups.
00:15:44.902 - 00:15:46.986, Speaker B: The problem is that current rollups rely.
00:15:47.018 - 00:15:52.830, Speaker C: On a light client that is sort of restricted to its l one environment, which is EVM.
00:15:53.490 - 00:15:55.498, Speaker B: What that means is it essentially becomes.
00:15:55.514 - 00:16:09.134, Speaker C: Much harder to upgrade as well as social consensus is not possible, right? Because you cannot fork away from Ethereum. That's simply not a choice available unless you have insane amount of money and you can mount an economic attack on l one ethereum l one, it's simply not feasible.
00:16:09.262 - 00:16:11.606, Speaker B: And that's sort of where avail based.
00:16:11.628 - 00:16:13.622, Speaker C: Sovereign roll ups come into play, because.
00:16:13.676 - 00:16:15.654, Speaker B: That means that the verification is done.
00:16:15.692 - 00:16:21.158, Speaker C: Directly in the rollups light client instead of relying on the Ethereum contract as the light client, right?
00:16:21.244 - 00:16:22.518, Speaker B: Which basically means that if you want.
00:16:22.524 - 00:16:27.558, Speaker C: To upgrade, you upgrade by simply upgrading the light client. The light clients can verify DA trustlessly.
00:16:27.654 - 00:16:29.946, Speaker B: And social consensus exists, which means that.
00:16:29.968 - 00:16:38.906, Speaker C: You can fork away. Majority of the light clients can switch onto another fork if they want to. And of course what this also means is that you can have different setups.
00:16:38.938 - 00:16:42.078, Speaker B: Possible, which is optimistic ZK with a.
00:16:42.084 - 00:16:50.466, Speaker C: Sequencer, with a decentralized sequencer and various other formats. And that's sort of the crux of sovereign roll ups. There is so much flexibility available, there.
00:16:50.488 - 00:16:53.774, Speaker B: Is so much scalability available that we feel that this will be a viable.
00:16:53.822 - 00:17:02.436, Speaker C: Path for most roll ups that are coming up in the near future. This is a rough roadmap that we.
00:17:02.458 - 00:17:03.604, Speaker B: Have in q four.
00:17:03.642 - 00:17:19.156, Speaker C: 2024 we launched the incentivized testnet. We have 84 million plus transactions, 87,000 plus accounts with 116 gb data volume, and that's total throughput in terms of blob space. We had dimension and Carnot partner challenges.
00:17:19.348 - 00:17:21.060, Speaker B: Which have just concluded.
00:17:21.220 - 00:17:46.720, Speaker C: And with h 124, we have the main net launch of Avail DA. And today we also launched the avail's unification framework in the form of Nexus and fusion that you guys have heard about just now. The technological development is already underway. We are already looking into pocs to kind of facilitate this ASAP. And in h two of 2024, what we're looking forward to is the launch for Nexus and fusion.
00:17:49.140 - 00:17:50.848, Speaker B: So here's what we have kind of.
00:17:50.934 - 00:17:54.804, Speaker C: Learned today, I would say, is that the challenges that we're facing today, one.
00:17:54.842 - 00:17:59.510, Speaker B: Is of course that roll ups need DA to scale. That's sort of the hard fact that you observe today.
00:17:59.960 - 00:18:04.916, Speaker C: I guess a good example would be sometimes in terms of congestion, or when.
00:18:04.938 - 00:18:07.096, Speaker B: Ethereum's congestion goes up, the cost of.
00:18:07.118 - 00:18:09.928, Speaker C: Using an l two roll up kind of increases by a lot.
00:18:10.014 - 00:18:11.688, Speaker B: So we already observed that.
00:18:11.854 - 00:18:22.204, Speaker C: Second, of course, is roll up ux fragmentation. An optimism user cannot really do anything with their arbitram assets today, but this will be possible in the future with Nexus. And of course, the fact that we.
00:18:22.242 - 00:18:24.876, Speaker B: Need that particular unification, a framework where.
00:18:24.898 - 00:18:44.640, Speaker C: Trust is minimized as well as it still remains interoperable and scalable. And that's sort of where we'll be moving towards as we go towards h two of 2024. And of course, talking about what we can do better at avail. Currently, we are kind of reconstructing every block.
00:18:44.720 - 00:18:46.196, Speaker B: What we're thinking about is that we.
00:18:46.218 - 00:18:48.804, Speaker C: Can verify commitments from block producer instead.
00:18:48.842 - 00:18:52.064, Speaker B: Of regenerating the particular commitments, because generating.
00:18:52.112 - 00:18:55.320, Speaker C: The KJG polymer commitments is non trivial as of now.
00:18:55.390 - 00:18:59.748, Speaker B: Theoretically in the future with ASICs, probably it could be much cheaper at scale.
00:18:59.844 - 00:19:28.610, Speaker C: But again, that's probably a different consideration. Second is KJG multilevel proofs, where basically currently we only have row level commitments. We can sort of optimize on that front. And finally, grandpa verification circuits, where we kind of, instead of having proof that kind of operates on a block, we can have batches of blocks, and then we can have recursive proofs that sort of interope with the vector bridge. So those three things are kind of what we're looking forward mostly to.
00:19:30.440 - 00:19:30.804, Speaker D: And.
00:19:30.842 - 00:19:32.070, Speaker C: That'S pretty much it.
00:19:33.640 - 00:19:45.210, Speaker A: Fabrication in Avin Lexus for interop. That's pretty exciting, actually. How do you guys think about synchronosity when doing crew fabrication, when a lot of these rollups could have different block times?
00:19:45.900 - 00:19:50.664, Speaker B: That's a great question. So kind of what will happen in that case is we will have to.
00:19:50.702 - 00:19:52.840, Speaker C: Pick an average case, worse time.
00:19:52.910 - 00:19:53.530, Speaker D: Right.
00:19:54.000 - 00:20:01.564, Speaker B: And then technically what we are more excited about is what we're calling asynchronous composability. There are different forms of this.
00:20:01.602 - 00:20:05.256, Speaker C: There is, for example, shared composability, synchronous.
00:20:05.288 - 00:20:08.328, Speaker B: Composability that you can kind of do through shared sequencers.
00:20:08.344 - 00:20:14.156, Speaker C: For example, where you have the same decentralized sequencer set on two chains, you can have synchronous composability.
00:20:14.268 - 00:20:28.468, Speaker B: We are less excited about that because I feel that means we are limited to the sequencer set itself. What we are kind of more excited forward is going to like risk zero or sp one. Custom ZKVM based state machines that kind.
00:20:28.474 - 00:20:35.896, Speaker C: Of allow us to aggregate the proofs of multiple roll ups into one form. So kind of what that means is as long as a roll up is.
00:20:35.918 - 00:20:38.260, Speaker B: Adhering to the loose set of structures.
00:20:38.340 - 00:20:57.200, Speaker C: That you have to post data on avail, your data format must be somewhat like this. Then we can kind of generate a proof that kind of verifies the ordering from availda itself. And then we can generate a proof for the same, and then we can have it executed on the Nexus layer, which is what is allowing for the async composability.
00:20:57.780 - 00:20:58.912, Speaker A: That's pretty good actually.
00:20:58.966 - 00:21:01.090, Speaker D: Thank you. Thank you.
00:21:04.790 - 00:21:06.946, Speaker A: Have you guys given any thoughts to.
00:21:07.128 - 00:21:26.854, Speaker E: The finality rules for roll up? Kind of like in combination with the assetation layer versus DK roll up? Might want to verify that the data is on the assessation optimum. Would need data there for it to even be considered valid. If you guys have any thoughts on how the mine should operate or any.
00:21:26.892 - 00:21:29.178, Speaker B: Guidelines, that's a great question.
00:21:29.344 - 00:21:32.778, Speaker C: So technically this is how we think of it, right? I think what you're saying is correct.
00:21:32.864 - 00:21:45.502, Speaker B: So the way that we solve for it is basically to make the entire data attestation process trustless. What that basically means is that there is a prover that is available. There are circuits that are available.
00:21:45.636 - 00:21:49.722, Speaker C: If you're a roll up that kind of, kind of wants to derive finality.
00:21:49.786 - 00:21:53.186, Speaker B: On a different timeline, you can just run the prover yourself and you can.
00:21:53.208 - 00:22:41.920, Speaker C: Submit the prover the proofs on that particular l one contract, and then you can get finality on your own timelines. So then you don't need to worry about when the data adaptation is happening. As long as your prover that is kind of generating your validium proofs, for example, it can happen at the same time as that, basically. So we intend to decentralize 99% of the elements that we kind of have in the particular system that we just showed. It's over. I don't know where this QR goes, but if someone wants to scan and tell me that's cool, it's not a phishing QR, maybe. Do we have any more questions?
00:22:43.410 - 00:22:43.834, Speaker D: Yeah.
00:22:43.892 - 00:22:46.130, Speaker E: How do we verify optimistic rollout?
00:22:46.470 - 00:22:51.730, Speaker C: That is a great question. The honest answer is you don't.
00:22:51.890 - 00:22:54.594, Speaker B: But you can still have data attestation.
00:22:54.722 - 00:23:22.174, Speaker C: So assuming you have an optimistic chain stack, like for example, I guess the current only production grade op optimistic stack would be arbitram, for example. So if you're building using arbitrum nitro arbitrum orbit, actually, not nitro only orbit, then you can have data attestation happening on arbitrum through the vector bridge, which basically verifies that the data is correct and available. That's number one.
00:23:22.212 - 00:23:22.526, Speaker B: Of course.
00:23:22.548 - 00:23:30.250, Speaker C: It means that the security assumption reduces from trustless, which we refer to as zks trustless, not exactly correct, but let's leave that aside.
00:23:30.330 - 00:23:31.666, Speaker B: It reduces to like, you have to.
00:23:31.688 - 00:23:35.186, Speaker C: Trust the validators, which is fine because it's a big validator set.
00:23:35.368 - 00:23:40.146, Speaker B: But since you're working fraud proofs, you can say that you're secured by the.
00:23:40.168 - 00:23:50.370, Speaker C: Security of l two or l one wherever it's deployed. So in that way, that's sort of the verification that you'll have the fraud proof finality, which is the actual finality of the chain, as well as the data adjustment finality.
00:23:53.580 - 00:23:54.496, Speaker B: Thank you.
00:23:54.638 - 00:23:55.150, Speaker C: Thanks everyone.
