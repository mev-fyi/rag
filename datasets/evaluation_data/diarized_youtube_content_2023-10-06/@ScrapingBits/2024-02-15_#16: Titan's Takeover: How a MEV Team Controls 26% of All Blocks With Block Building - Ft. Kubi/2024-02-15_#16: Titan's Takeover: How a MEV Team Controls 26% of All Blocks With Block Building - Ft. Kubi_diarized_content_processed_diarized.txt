00:00:00.170 - 00:00:34.146, Speaker A: There are also builders that are actually like larger trading firms themselves, and that do a lot of the arbitrage internally. So they're called the integrated searcher builders, or HFT builders in some circles. And so, you know, when there's a lot of volatility, let's say, on binance or centralized exchanges, they have more market share because they have all of that flow internally. And so depending on the market condition, naturally that also affects what kind of block as different builders build. So you can get a lot more specialized and see what builder would suit your needs. More specifically, GM.
00:00:34.178 - 00:00:41.722, Speaker B: GM. Everyone. My name's Degacci, the host of scraping bits, and today I'm with a special guest and very good friend, Drewby. How's it going?
00:00:41.776 - 00:00:44.026, Speaker A: Hey, what's up, man? How are things?
00:00:44.208 - 00:00:54.938, Speaker B: Not bad, not bad. Just grinding as always. Trying to stay on top of things, pursue multiple things at the same time. I'm sure you know the exact feeling.
00:00:55.114 - 00:00:56.606, Speaker A: Name of the game, man.
00:00:56.788 - 00:01:04.350, Speaker B: Yeah. So just for people that don't really know you, let's give some context of who are you and what do you do?
00:01:04.420 - 00:01:34.710, Speaker A: So, Kubi, co founder of Gattaka. So Gattaka is the team that built and is operating the Titan block builder on Ethereum mainet. Historically, Gatica had mainly been a proprietary trading firm, initially doing sort of arbitrage, liquidity, provisioning, HFT market making, prop on centralized exchanges, but then moved more towards the onchain trading side of things, and currently mainly focusing on infrastructure later. Things like block building.
00:01:34.780 - 00:01:44.202, Speaker B: Yeah. And how did you get into all this? Were you doing algo trading outside of web3 before, or was it kind of just. You fell into it?
00:01:44.256 - 00:02:40.318, Speaker A: Yeah. I mean, still, I don't have a traditional finance background and never did any of that professionally pre crypto. So my background is software engineering, cybersecurity. But during my uni days, one of my good friends who I still work with at Gataka today got me into building bots for probabilistic skill games on the Internet. So this is not poker, but other things that involve probabilities and dice and where you can get an edge, basically like playing with a system. And so we initially build out somewhat of a significant bot network, generating revenue, playing all of these kinds of online games. When we saturated the market or our strategies were at capacity, so to speak, we then actually also explored forex trading, obviously less successful on that front.
00:02:40.318 - 00:03:03.142, Speaker A: That was also the time when then my cybersecurity startup took off and so we shifted focus. But we always had a bit of a knack for, I guess, writing bots and things like that. So when I got into crypto, naturally, when it was less competitive on the centralized exchanges, arbitrage and market making was like a natural step for us.
00:03:03.196 - 00:03:05.222, Speaker B: And you had the cybersecurity business before, right?
00:03:05.276 - 00:03:05.590, Speaker A: Correct.
00:03:05.660 - 00:03:08.442, Speaker B: What did you do with that? Do you sell it or still going?
00:03:08.576 - 00:03:54.386, Speaker A: Exactly. No. So it was a mobile security business. And what we did essentially was we built application level virtualization environments, so containers, so to speak, that essentially allowed enterprises to enforce certain security policies for enterprise apps. So things like encryption of data addressed in transit, data leakage protection, that kind of stuff. We did that. I think we launched or started working on it early 2013, and then later got acquired in late 2016, early 2017, which is also the time that I got into crypto.
00:03:54.418 - 00:04:18.702, Speaker B: Quite interesting, as anybody that does startups, they want their startups to succeed, and then maybe they want to get an acquisition or just continue revenue stream, but for most, that never happens. So how do you get to that point where you're prepared for an acquisition and you kind of sell yourself to someone? How do you find the person to sell to you, first of all? And how you get in a position ready to sell?
00:04:18.836 - 00:04:57.686, Speaker A: Yeah, well, to be honest, I think a lot of it is luck. Like, on one hand, you want to maximize your exposure to be in a place where luck can actually strike. So that normally is just a function of a lot of hard work and grinding and putting yourself out there hustling, taking on risks. But then luck actually has to strike. So you're optimizing for maximizing the chances of luck striking, but there are just so many unknown things that impact your success or your possibility for an exit.
00:04:57.718 - 00:05:06.670, Speaker B: And so, yeah, basically create your own luck, increase the chances as much as possible, to the point where if you keep going, you eventually hit it. Hopefully.
00:05:07.010 - 00:05:07.758, Speaker A: Exactly.
00:05:07.924 - 00:05:23.618, Speaker B: But then you obviously use that experience to start up Gattaka and eventually Titan. So what was kind of the process of bringing a team together and bringing a team together that you can trust and eventually scaling that?
00:05:23.704 - 00:06:10.082, Speaker A: Yeah, initially bringing the team together is basically people that I already knew and trusted and had worked with before. Like I mentioned, like one of my good friends at uni who I was writing bots with was also my co founder for the mobile security business, who then I also managed to convince to work on Gataka, together with the other co founder of the mobile security business, also joined Gathika and co founded it together. And then with sort of the core people in place, basically just meeting people along the way. And anytime I came across someone who's super gifted and smart and hardworking, tried to see if there are synergies and opportunities to work together and bring them in.
00:06:10.136 - 00:06:13.140, Speaker B: And even we did that. I actually joined you for a little bit.
00:06:13.510 - 00:06:24.370, Speaker A: Correct, exactly. We also worked together for a while and it was very opportunistic, very random. I don't know how. I think we met on a discord server.
00:06:24.450 - 00:06:25.394, Speaker B: Yeah, it was so weird.
00:06:25.442 - 00:06:27.480, Speaker A: Yeah, exactly.
00:06:27.850 - 00:07:01.778, Speaker B: Just like browsing. Yeah, for real. It was just like browsing around and just DM'd and just ran a trial period, which was quite interesting. I never touched rust and that was kind of the way I got into rust is for you guys, and even to what I'm doing now, which is kind of crazy to look back at and how things have progressed. But I guess, having said that, when you bring on someone like me, for example, someone you don't know from the wild, how do you kind of protect your ip and make sure they're a right fit before bringing them into the core of everything.
00:07:01.944 - 00:08:06.214, Speaker A: Yeah, I guess our approach has always been in general, I tend to be more on your trusting side than not. I know other teams are different that are very protective of any potential alpha leak or things like that. I tend to be more on the trusting side, but then also, I'm not naive. And even when we started working together, initially, it was more segregated. You had access to some things, but obviously not everything and not core alpha and things like that. I guess it's about striking the balance, really, and also a bit about what the culture of your team is and how you kind of work together. Because if you have a team that is all about keeping it on a need to know basis only, that obviously has upsides in terms of information leakage, but a lot of downsides as well in terms of information across the organization, collaboration, innovation, executing quickly and things like that.
00:08:06.214 - 00:08:08.978, Speaker A: Right. So you may compromises on all fronts.
00:08:09.074 - 00:08:19.580, Speaker B: A lot of trade offs. And how long were you doing basically Gato, for until now? What was kind of like the process of scaling as well.
00:08:21.490 - 00:09:19.390, Speaker A: So the first, I think almost three years were just very organic. So just the founders and some part time people on the side to essentially build out a lot of the trading infrastructure and work on some of the strategies. We are prop trading firms, so the money you make through profits is basically what sustains you. And then we had a really good run doing sort of market neutral HFT, just market making on centralized exchanges in 2019 and 2020. And we raised a small seed round, actually, after essentially on the back of that success and that gave us a little bit more firing power to scale a bit quicker, which was also the time that we started dedicating some more resources to on chain trading. Pre flashbots, pre MeV PG.
00:09:20.690 - 00:09:23.920, Speaker B: Yeah, it was really like some dark times back then.
00:09:25.250 - 00:09:27.738, Speaker A: Good times, yeah. For sale.
00:09:27.834 - 00:09:47.254, Speaker B: Yeah, for sure. And what was kind of the process of building the initial infrastructure and getting that first kind of rollout out? What was your strategy to basically get the MVP out?
00:09:47.452 - 00:10:40.378, Speaker A: So since none of us had a finance background professionally, a lot of it was learning by doing and just research. So whatever you can find on the Internet, and there's a lot of stuff out there, obviously, but when it comes to trading systems, usually when it gets to juicy stuff, not so much. And then basically always striking the right balance between building something that you can get into production ASAP and iterating on that, versus building the perfect system. Especially if you're a smaller startup, you can't spend like a half a year just building and not having anything in production and actually making revenue, especially if you're not venture funded at that point. Right. And so there's always a fine line because you don't want to keep rearchitecting everything, building up a lot of technical debts and things like that. But at the same time, you need to move quickly.
00:10:40.378 - 00:10:43.050, Speaker A: So, yeah, it's a trade off again.
00:10:43.200 - 00:11:25.350, Speaker B: Yeah. It's like a really core value that's always stuck for me, when you first mentioned it when you're mentoring me, is you got to build a system as first iteration as fast as possible, make sure it does something of value. Then once it's able to do that one thing, you just expand on that. And I think it's very important to do that with complex systems. Like for example, I'm doing a fuzzing system now, and that takes up a whole, it's a giant system when you look at it and you don't want to build the most perfect thing because you want it to do something. Otherwise you're never going to get to the first stage. And I think that's where a lot of startups fail, is never getting to that initial mvp stage.
00:11:27.130 - 00:12:01.266, Speaker A: The other thing is also that when you are working in a new area and do a bit of greenfield work where it's not exactly clear what the production system will look like or how you're going to interact with the markets and how the markets will respond, you just can't know. So even if you had all the time in the world, you wouldn't be able to build a perfect system because you don't have all the information. So you want to get to the point where you can interface with the real world as quickly as possible and then use that feedback loop to iterate the system.
00:12:01.448 - 00:12:12.040, Speaker B: Yeah. So you know what's actually out there and what's possible, for sure. And then what kind of sparked the transition into block building.
00:12:12.810 - 00:13:11.980, Speaker A: Yeah. So in terms of our on chain trading activities, Meb, we mainly focused on Alt L one EVM compatible chains. So the reason being that we had a lot of high frequency infrastructure, which we could really leverage on those because of the faster block times. And just the nature of the trade is very different from Mainnet. And so we build up a lot of infrastructure. So on those networks, it is more of an infrastructure game than having super sophisticated algorithms or finding some alpha in some strategies, although that obviously also exists. But we essentially, because those were the main building blocks that led us to be super competitive and capture significant market share on these other chains, which were very latency sensitive and required this infrastructure, geodistribution, network optimizations, all of those things.
00:13:11.980 - 00:14:13.062, Speaker A: We essentially had all the building blocks that are necessary for block building or block construction. And at the same time, we also realized that the traits that we were pursuing were always going to limit us to a certain team size, being somewhat of a smaller trading prop trading firm. And also as the markets evolve, and because we are mostly focusing on atomic type of trades, those opportunities wouldn't persist forever. So we were looking for opportunities in the market, essentially, where we could leverage everything that we've built up already, but actually had the chance or would be in a good position to be a category winner. So when the block building opportunity opened up post merge and PBS, we were like, okay. All these years, the things we've been doing essentially were just training wheels to do this specific thing which has opened up now. And so we didn't pull the trigger immediately.
00:14:13.062 - 00:14:26.034, Speaker A: Post merge took us a bit of a while and some strategizing to size the opportunity and how we want to position ourselves. But when we did, we did a resource shift and mainly focusing on block construction now.
00:14:26.072 - 00:14:42.966, Speaker B: And when you design this architecture, or any kind of architecture, what's the process of going from nothing to something? Are you writing it down for like bumps on end, seeing what's out there and then building? Or is it kind of simultaneous? Like, okay, what do we need next? Let's build this. Okay, what's next?
00:14:43.068 - 00:15:28.598, Speaker A: Build this. Yeah. So given the complexity of the problem, and it not being like a simple bot that one person can work on, but it requiring multiple team members to work on this in the first place, it naturally requires more of an architecturing and design process than like smaller endeavors. So that absolutely was the case. So first, understanding the basics of what kind of solutions we need, what kind of infrastructure, what kind of systems, and then piecing them together and dividing them up in a way where we could leverage the manpower that we have to move forward as quickly as possible.
00:15:28.684 - 00:15:35.670, Speaker B: So like modulizing as much as possible and assigning tasks, something like that.
00:15:35.740 - 00:16:00.750, Speaker A: In general, my approach is never to sort of, okay, I spec out all the tasks and then distribute the task. It's usually more of a collaborative effort, but, yeah, so it's not like I sit down in a dark room and architect everything, and I'm like, okay, guys, build this thing, but it's more like a team effort. Although obviously one person generally has to have more of an overview than others.
00:16:00.900 - 00:16:02.622, Speaker B: Like a leadership role of some sort.
00:16:02.676 - 00:16:04.522, Speaker A: Yeah, exactly right.
00:16:04.676 - 00:16:31.142, Speaker B: And I guess the same is true when developing bots. So let's say someone's just starting out as a solo builder with any, not even related to Mev, but just in large, complex programs in general, and they want to build it by themselves. Maybe it's a startup and they haven't got the capital to raise higher, or they just don't know anyone. What would be your kind of strategy to build this complex system from the ground up by yourself? Initially?
00:16:31.286 - 00:16:56.414, Speaker A: Yeah, I guess the decision making process would be really thinking about what the MVP could look like, the most minimal version, and if that version could be built by oneself, if that is possible. Absolutely. Get your head down, try and get the first version out as quickly as possible. Very scruffy. And interact with the real world, like I mentioned before.
00:16:56.532 - 00:16:56.922, Speaker B: Yeah.
00:16:56.996 - 00:17:12.978, Speaker A: If that is not possible, make sure you understand what is required, again, for the smallest version, and then have a compelling picture why anyone else would want to work on this. And then start selling, essentially.
00:17:13.074 - 00:17:17.800, Speaker B: And what are the problems you really face while building these kind of architectures as well?
00:17:19.450 - 00:17:58.994, Speaker A: Usually it's just the unknown unknowns, because none of this stuff is speced out anywhere. Even today, if you want to launch a builder, you can have a relatively naive version launched somewhat quickly. You just fork the public flashbots builder and then start iterating from there. But even then, if you've never done a lot of this stuff, it's still a bit of work to wrap your head around. And then they're just things that pop up, and as soon as you have multiple moving parts and you need to integrate them all together. Debugging is just a nightmare. So most of your time will just be spent debugging.
00:17:58.994 - 00:18:10.780, Speaker A: So in general, the more you can put in place to help you understand where things are going wrong, the better. But yeah, most of your time is essentially going to be spent debugging stuff.
00:18:12.270 - 00:18:18.330, Speaker B: What exactly is a builder? Why would someone choose to make a builder?
00:18:19.230 - 00:19:22.502, Speaker A: Good question. We should probably have started with that. So essentially, block production itself used to be done by one entity, initially on proof of work. Ethereum, which was the miner, and the job was essentially according to consensus spec. If you are the one who is, let's say, voted, or whose turn it is to build a block, whatever reason, whether it's like breaking a hash or whatever, it is calculating some value, but it's your turn to build a block, then your task is to take transactions that are in the Mem pool. So the transactions that you have aggregated locally and then naively order them, let's say time, price, priority, which it is by default, get these transaction ordered. So build a block and then gossip it out to the network, and people will vote on it or test or whatever it is, to accept and have consensus around that it is a valid block.
00:19:22.502 - 00:21:30.940, Speaker A: Today, mostly because of MEV, the job of building a block is no longer that simple. And so the task of aggregating all these MEV bundles and private transactions and public transactions, and then piecing them together in such a way that you actually have the most valuable block is very resource intensive. So this is naturally a very centralizing force on the network, and puts a lot of pressure on the network, because the validators that essentially control the most stake and most sophisticated and merging bundles and transactions in order to produce block blocks will have this flywheel effect of the most sophisticated player being able to accumulate more profits, being able to accumulate more stake, and the end game basically looks like one large entity, let's say citadel or whatever, controlling most of the network and extracting all the MVB, which is obviously a problem. And so this new sort of concept was brought up PBS, which stands for proposer builder separation, and essentially segregates the roles of constructing the block, which is very resource intensive and requires a lot of sophistication from actually proposing the block to the network. So by being able to keep the validators or proposers very lightweight and dumb, and the builders more sophisticated, we essentially alleviate this centralization force on the network where your mom and pop that runs like a raspberry PI in their basement or whatever, with 32 e stake as likely to produce a block with the same amount of value as, like, a citadel, even though Citadel might own more validators than aggregate, but on a per validator basis, they stand the same chances. And so the block builder's role is essentially to do the heavy lifting in terms of sequencing and aggregating transactions and all of those things. And the proposers and validators can stay down.
00:21:31.790 - 00:21:36.778, Speaker B: So what's the real reward or incentive for running it over like a validator? I guess.
00:21:36.864 - 00:21:58.302, Speaker A: So the reward is basically, if you're really good at building blocks, especially if you're better than the competition, you are able to gain a share of the block rewards, which is directly correlated to how much better you are at building blocks.
00:21:58.366 - 00:21:58.642, Speaker B: Okay.
00:21:58.696 - 00:22:03.346, Speaker A: So you will be able to take a margin on your blocks that you produce. Right.
00:22:03.368 - 00:22:39.454, Speaker B: So if you build a block, let's say a whole bunch of MEP bots have created their bundles, back running, front running, sandwiching, all that stuff, your job is basically to organize them in such a way where the most amount of value was being produced. Right. Or EFA. Correct. And whoever does that most efficiently basically gets a bigger share. And then what is the determining factor of having someone own, let's say, 25% of the network versus someone that's owning, like, 0.1%.
00:22:39.572 - 00:23:31.278, Speaker A: Yeah. So there are basically two main factors, one being order flow or bundle flow or whatever you want to call it, because that is essentially the building blocks of a block. And so if you don't have enough order flow, you will not be able to compete. So that's one part exactly, but then the other part is if you have somewhat order flow that is on par with other competitive builders, then it's all about your technology. So on one hand, that is your simulation engine, because block building requires a lot of EVM simulations. So how quickly can you simulate transactions? And when you think about the block building problem, the constraint is basically you have 30 million gas. You have all these transactions that are coming in.
00:23:31.278 - 00:24:19.722, Speaker A: What is the sequence that will lead to the most valuable block, given the constraint of 30 million gas of block space? Right. And so the faster you can simulate, if you're very naive, the more combinations or sequences you can explore that will allow you to get to a more optimal solution to the problem or arrive there quicker. Right. So that's one part fast simulations. The second part is having sophisticated bundle merging algorithms. So if you think about it, in real life or in practice, there are like hundreds, sometimes thousands, tens of thousands of transactions coming in in real time, in bundles, as the slot progresses. So in practice, you can't actually try out all combinations.
00:24:19.722 - 00:24:58.822, Speaker A: Right, even if you had the fastest simulation angle possible. Right. So this is where your bundle merging algorithms come in. So your bundle merging algorithms essentially allow you to use smart heuristics to limit the search space. So you actually don't have to try all algorithms. Sorry, all combinations. And so what that looks like is that you are essentially doing optimizations when looking at a search space, but you want to do it in a smart way such that you discard the sequences that will most likely not to lead to anything more valuable, and whilst at the same time keeping in the sequences that will lead to an optimal solution.
00:24:58.822 - 00:25:57.882, Speaker A: And so then when you combine the fast simulation with smart bundle merging algorithms, your probability of finding more optimal solution is maximized. And then the third part is essentially just low latency throughput of your entire system, because the faster you are aggregating transactions and getting these bundles to your builder engine, so to speak, the more transactions you have to choose from at the time of constructing the block. And then once, obviously, the block is built, and that should be done relatively quickly, and you have block candidates, you now need to route these blocks as quickly as possible to the relays, which are responsible for delivering the blocks to the validators. Right. And so all of these things are very latency sensitive, and there is not a single factor which would make you win everything, but it's a combination, basically, of the order flow and technology factors.
00:25:57.946 - 00:26:03.040, Speaker B: It's the whole pipeline. If one fails, I guess the whole thing fails, basically.
00:26:03.810 - 00:26:04.558, Speaker A: Correct.
00:26:04.724 - 00:26:23.174, Speaker B: It's kind of like a force on a human body. You can't really do anything, can't get to someplace without it. It's like your limiting factor. Basically what it is, is a block builder is creating the most valuable block for a validator, and then the validator is choosing the most valuable one. Right, correct. Okay, got you.
00:26:23.372 - 00:26:59.358, Speaker A: So actually, it is the relay. So the relay is sort of the middleman between the block builders and the validator. It's sort of this trusted third party that exists for now, but it's most likely going to go away. But the relay essentially aggregates all the bits from all the builders, and the validators will just simply keep pinging the relay and say, hey, what is the most valuable bit at the moment? What's the most valuable bit? And then at some point, they'll be like, okay, I choose this bit. And then they sign the bits, go, give it back to their relay, and then the relay is responsible for broadcasting the block to the network.
00:26:59.454 - 00:27:07.400, Speaker B: And you can't really set up a validator and a block builder and do this because the validator is being chosen at random. Right.
00:27:08.490 - 00:27:26.598, Speaker A: So you can do that, but then the number of times you actually get to build a block is directly proportional to how much stake you have in comparison to the entire network. Yeah, that is a lot of validators and a lot of stake.
00:27:26.774 - 00:27:31.066, Speaker B: Yeah, for sure. I guess it's theoretically possible, but in.
00:27:31.088 - 00:27:36.880, Speaker A: Practicality you need, and at that point if you own half of the network anyway.
00:27:37.730 - 00:28:00.920, Speaker B: Yeah, for sure. Interesting. Yeah, it kind of sounds very familiar to program analysis, but on a grander scale, in a different kind of way. Instead of reading the bytecode of a contract, you're just sorting transactions in a way that makes the most value, instead of sorting functions in a way that allows you to do something.
00:28:02.250 - 00:28:11.160, Speaker A: Yeah. In general, I think the block building problem is very much related to a lot of the trading problems that you solve as anv team.
00:28:11.790 - 00:28:13.382, Speaker B: Seems highly correlated.
00:28:13.526 - 00:29:20.830, Speaker A: Yeah, exactly like your latency, your infrastructure, your data analytics, your algorithm development, your back testing, like all those things the same. The interesting thing about block building is that it opens the door to other things where one revenue stream is what, as I mentioned before, getting a share of the block reward, which is very much correlated to how competitive you are. But then being a block builder puts you in this interesting position where you can actually unlock additional value by, for example, offering services to different entities that interface with you. Because essentially like a block builder is the gateway to getting on chain or it's the way anyone accesses block space today. So if you think about the power users, for example, like trading firms, you can offer better execution services and things like that because everything is really crude today. Also, other power users like l two s that need to settle transactions in a timely manner. On the l one, you can provide services for those kind of players.
00:29:20.830 - 00:30:35.270, Speaker A: Other things are that the block builder is essentially the only entity across the transaction supply chain that actually knows the state of the chain at the point of execution. So for example, if you think about aggregator services that route swaps through different pools in order to optimize slippage and things like that, they can only make that routing decision based on the top of block state. But that transaction will most likely never execute top of block because that's the most competitive space in the block, but it will most likely execute some transactions further down the line. And at that point, the state of the pools will most likely have changed. Right? So that's why a lot of these solving and routing services still leave a lot of mev opportunities on the table. And these transactions are background and all that kind of stuff. And the block builder having actual knowledge of the chain state at the time of execution, can actually use that to offer services for better routing, better solving and other kinds of things, which opens up a lot of other possibilities.
00:30:35.690 - 00:30:47.100, Speaker B: Yeah. And I guess what kind of incentivizes a user to send their transaction to a specific block builder over another one?
00:30:47.950 - 00:31:25.202, Speaker A: Yeah. So it is mostly around one, the block builder having enough market share to be interesting. And that might be different for different users or searchers. Some searchers will send transactions to a builder if they have like 1% market share. Others won't even send to any builder that doesn't have at least 10%. And so that depends. But as long as you have market share that's significant to the specific user, there's an incentive to send transactions there because that is essentially block space they won't have access to unless they send transactions to their builder.
00:31:25.202 - 00:32:17.938, Speaker A: That's one of the biggest criteria. The second criteria is also trust. So being a block builder, especially if you're receiving bundles from, let's say, a sandwicher or someone that sends bundles, or even if you are a CX Dex arbitrage trading firm, when you send bundles to a builder, you potentially are leaking information about your trading strategy. You potentially expose yourself to having your mev stolen. And so there is an element of trust that a builder has to build up. And on one hand that can be by just being in the market long enough and demonstrating that, okay, I've received bundles from all these different players and I've never stolen any mev. It can be in the form of other searches, seeing larger trading firms.
00:32:17.938 - 00:32:35.020, Speaker A: There are larger trading firms that are docs and everyone knows what their contract is. And you see, okay, if this trading firm is sending order flow to this builder, then it must be okay. Right? And then for some, it is actually speaking to us directly and having a relationship.
00:32:35.710 - 00:32:48.466, Speaker B: But yeah, when you look at something like 1% of the market share, that means 1% of the time you're not going to get included in the block because you're not sending it to that builder. Right?
00:32:48.568 - 00:33:48.610, Speaker A: Correct. It is not always the case because that 1% market share is also very much dependent on the type of blocks you build because different builders have different strategies and have different sources of flow. And so there are times, for example, when there are a lot of vanilla blocks and those are, recall vanilla blocks, essentially blocks where there's not a lot of MEP, there are certain builders that perform better during those times because they have optimized their transaction ordering and whatever to those specific types of blocks. And then there are other builders that perform better during other times when there's a lot of MEV. There are also builders that are actually like larger trading firms themselves, and that do a lot of the arbitrage internally. So they're called the integrated searcher builders, or HFT builders in some circles. And so when there's a lot of volatility, let's say, on binance or centralized exchanges, they have more market share because they have all of that flow internally.
00:33:48.610 - 00:34:00.730, Speaker A: And so depending on the market condition, naturally that also affects what kind of blocks different builders build. So you can get a lot more specialized and see what builder would suit your needs.
00:34:00.880 - 00:34:11.658, Speaker B: More specifically, you're also doing like a remarkable job. You've only been out for a few months, right? And you've already gone like 11% of the whole network.
00:34:11.754 - 00:34:48.130, Speaker A: Yes, we launched publicly around a little over three months ago. The thing is, we spent a lot of time actually building, like our infrastructure and our bundle merging and all that stuff initially. So then when we actually launched, we were really pushing hard to get as much flow as possible. And usually when we do have flow that is on par with other builders, we tend to be really competitive. So that led us to gain significant market share over a short period of time. And obviously we're still growing. But, yeah, that was basically our secret sauce.
00:34:48.130 - 00:34:50.034, Speaker A: So, investing a lot into technology.
00:34:50.172 - 00:35:03.920, Speaker B: What happens when someone doesn't even specify the builder? Like, let's say they're just a normal user on metamask doing a swap transaction, they just do that. What happens then with the builders? Is this just like kind of up for grabs for all of them?
00:35:04.290 - 00:36:03.306, Speaker A: Yeah, so that really depends on what your RPC endpoint is. So if it's, let's say, infura and it's the public RPC that basically just sends the transactions to the public mempool, then naturally every builder will have access to that. So the transaction supply chain is changing quite a bit. And so now you, for example, have these private mempools, like MEP blocker, or blink or even flashbots Mev share Colibrio, where on one hand, that protects users from being front run because you're no longer, or sandwiched because you're no longer in a public mempool. But on top of that, they also run these types of auctions that allow searches to essentially bid for the right to back run the transaction. And then if you win the bid, you essentially send a portion of the MEV that you are able to capture back to the user. So these are also now getting a lot more traction.
00:36:03.306 - 00:36:15.934, Speaker A: And so sources of transactions are not just the public mem pool, they are private mem pools. They are like order flocks and platforms and different kinds of entities that are now popping up along the transaction supply chain.
00:36:15.982 - 00:36:28.280, Speaker B: Let's say you are a searcher and you want to have access to all the builders. Is it possible just to send a transaction to every single builder? What's kind of like the trade off from doing that?
00:36:28.810 - 00:37:17.270, Speaker A: Yeah, so that is possible. As far as I know, most builders today have a public permissionless endpoint, so you can just send your bundles there. The trade off is really like the risk versus reward. So the risk is always that the builder might potentially unbundle you or steal your mev. The reward is block inclusion. So you kind of want to strike the right balance between, okay, do I know what this builder is doing? Are they maybe a competitor? So I don't want to leak my strategy to them because they're going to censor me or they're going to get some information about my strategy or they're going to unbundle me, those kind of things. So usually people do a bit of research and find out what the builder is all about either by doing some back channeling or there being some information publicly available and then make a decision based on that.
00:37:17.340 - 00:37:33.520, Speaker B: Like a massive Mev team just wants to partner up with one builder and try and take the whole network. Is that even possible? Because what if the builder just turns on them and just steals their strategy or replaces a few of their transactions with their own?
00:37:34.450 - 00:37:39.578, Speaker A: Yeah, I guess that would depend on how you define take the whole network.
00:37:39.674 - 00:37:45.360, Speaker B: Let'S say 50% or something. I know Beaver build was quite up there before, but it's kind of redistributing now.
00:37:45.830 - 00:38:13.946, Speaker A: Yeah. So again, it very much depends on the market conditions. So, for example, if you only send your flow to a single builder, that means any blocks that builder doesn't build, you don't get into. So even I think the largest builder usually on average has between 20% to 30% market share. Those are the top builders. And so that means there's 70% of the market that you don't have access to. So that's usually your trade off.
00:38:13.946 - 00:38:41.934, Speaker A: And then the question is what the benefit is. So usually what we see most people do is send to the larger builders that are significant enough and where there's some information about them that they can trust them but we have hardly seen evidence of builders having exclusive flow from searches, other than the builders being a searcher themselves, and then generating flow in house that they only keep to themselves and not send to other builders.
00:38:41.982 - 00:38:47.960, Speaker B: I guess for anybody trying to get into this game of block building, where would you recommend to start?
00:38:48.730 - 00:39:19.982, Speaker A: Definitely read up first, just on a high level, I think flashbots has some really good introductory posts around PBS and builders and relays. Just to understand the transaction supply chain a little bit better, then I would recommend just looking at the public flashbots builder. Again, it's not super competitive, but it's essentially a gaffborg with some builder logic, simple merging algorithms in there. And if you get it up and running, you can then start iterating from there.
00:39:20.036 - 00:39:44.680, Speaker B: Essentially, it's basically going back to those core values of getting something out and then iterating. And where do you see this builder space kind of going as well? If people are doing their own in house trading, then that would obviously generate a lot more transaction flow and more opportunities, I guess. Where do you see it coming from?
00:39:45.050 - 00:40:23.182, Speaker A: Yeah, in general, there'll always be somewhat three categories of builders. So first category would be like the vertically integrated searcher builders or trading teams. And the market share of those builders will most likely always be correlated to how strong their alpha is. Specifically alpha for short tail strategies like CX, Dex Arps and things like that. So as long as you can maintain alpha for the strategies, you will have significant market share. As a builder. That's one type of builder.
00:40:23.182 - 00:41:38.470, Speaker A: The other type of builder are neutral builders like ourselves, that basically optimize for block inclusion and block value maximization, without having any bias towards transactions or flow. And our edge is really that all the entities that will not send flow to vertically integrated builders, because there's a conflict of interest, will have no problem sending to us. And so there will always be a part of the market that will be covered by more neutral builders. And the edge those builders have is essentially that their market share is not susceptible to any alpha decay of strategies that you run in house because you are more of an infrastructure provider versus like a trading firm. And then the third category is builders with very high trust assumptions. Today, the only one is flashbots, given their history being first movers and open sourcing a lot of their code, and building a lot of trust and reputation in the ecosystem. But the flashbots builder, or at least the plan, is for that to be replaced by a decentralized builder.
00:41:38.470 - 00:42:43.502, Speaker A: So again, that category of builder will have the highest trust assumptions, will be permissionless but the compromise there really is that they won't be as competitive in performance. And so there will always be users that will prefer, like having these high trust assumptions and are okay, sacrificing block inclusion and execution for having those higher trust assumptions, but they will never be as competitive. So there will be part of the market share that is available to those kind of builders as well. So then the last part in general is that, as I mentioned before, the builder market space is still really early and there is a lot of room for innovation given that builders have close proximity to a lot of power users and are basically the gateway to access block space. And so that's actually also what we are most excited about, like all the different value add things a builder can offer to the ecosystem. And yeah, looking forward to seeing a lot more innovation happening there.
00:42:43.556 - 00:42:47.150, Speaker B: Like a large grand scale view instead of just looking for profit.
00:42:47.310 - 00:42:59.480, Speaker A: Correct. So there are still the interesting problems that we all like to solve on a technical level, but builders are actually in a position to do much more than that. So quite excited about that.
00:42:59.850 - 00:43:22.586, Speaker B: Yeah. Interesting. And the top builders really make a fair bit of money. In the past week, async builder has made 35 e with I think 27% of the network. That's just like reordering transactions. It's basically like meV, but at a grander scale.
00:43:22.698 - 00:44:06.762, Speaker A: Yeah. So obviously the problems that builders solve is harder than just the trading strategies themselves, like if you're MeV strategy. So it's definitely not the easiest game to get into. Also like RSync and there are some other larger builders also have in house trading teams, so their profits might be slightly skewed. That being said, even neutral builders though, like some of the top neutral builders, like dollar 69, they do have some reasonable amount of profits. And also keeping in mind that we currently don't have most of the activity on chain. Right.
00:44:06.762 - 00:44:22.218, Speaker A: We are still somewhat in a bearish sentiment. And so, just like with other businesses in crypto, most of the money is made during the crazy activity and the bull runs. And so, yeah, the opportunity could look obviously a lot larger in those market conditions.
00:44:22.314 - 00:44:31.810, Speaker B: Oh yeah, this is a bear market and that's like a massive amount for just a week. I don't know about the infrastructure cost and all that, if it not insignificant.
00:44:34.870 - 00:44:35.186, Speaker A: Yeah.
00:44:35.208 - 00:44:44.120, Speaker B: And I guess founding this Gattaka and Tyson, how do you really manage everything as well?
00:44:47.130 - 00:45:56.446, Speaker A: I guess the approach is always somewhat like decentralized command. Like I personally, like I mentioned before, I'm an engineer, so I used to be a lot more hands on during our early days. These days, not so much, but we keep things really flat in terms of hierarchies and operate under the notion of decentralized command. So people have ownership and take responsibility, make decisions, so that it's a lot more fun way to work. I think for everyone involved, it obviously also has consequences when you fuck up, when you make mistakes, but that way you can also iterate and execute quicker, which is what everyone likes to do, or most people at least enjoy that kind of working environment. So I guess my day job is generally just to try and stay on top of what is happening in the ecosystem, making sure that we are prioritizing the right things at any given point in time and positioning ourselves correctly. And yeah, I don't do as much execution these days.
00:45:56.548 - 00:45:57.230, Speaker B: Sad story.
00:45:57.300 - 00:46:10.402, Speaker A: For I do get to code a bit on the weekends sometimes, but yeah, I can't actually be involved too much. Otherwise I just become a blocker for the team, which is.
00:46:10.456 - 00:46:29.910, Speaker B: Right? Yeah, it's more like delegating tasks once it gets to a bigger state. But in the early days, you would have been a lot of hands on the core infrastructure, all that kind of stuff, I guess. How do you determine what is a priority and what isn't?
00:46:29.990 - 00:46:59.646, Speaker A: Good question. So in general, you kind of want to have a vision where the company wants to go. You want to have everyone aligned with that vision. And then in real time, you always reassess if that is the right direction and if we are doing the right things in order to get there as quickly as possible. So that is it, basically on a high level. And then obviously it gets more nuanced when you go into the specifics.
00:46:59.678 - 00:47:32.320, Speaker B: And how do you start getting people aligned with the values and treating it like their own company? Because obviously you can hire someone and they're just there with a salary or maybe even if it's equity, but they're not really treating it like it's their own, if you get what I mean. For example, you're a co founder of something and you're treating it like your baby. You obviously don't want to die, you want it to flourish. But then if you hire someone, it's obviously not their baby, so they don't care as much. It's more of like a babysitter. That makes sense.
00:47:33.090 - 00:48:48.998, Speaker A: Good analogy. So I think it very much starts with the person you hire in the first place. So we generally optimize for people who are really passionate and care about the things that we work on in the first place, and rather than people who are super skilled x number of years experienced, but are not as passionate or devoted when it comes to the actual problems that we are solving. And we also generally optimize more for that than actual skill set on the day of hiring. Obviously it's very important that people are smart and driven and all of that stuff, but that is more important for us than you having spent, I don't know, the last three years doing MBB, for example. So in general, that leads to a sort of tribe where people actually love working on the problems anyway. And then, as I mentioned before, we tend to operate under the sort of decentralized command structure and so people have ownership, they can decide on how they want to go about executing a specific mission, for example.
00:48:48.998 - 00:49:14.880, Speaker A: And so there's a lot more buy in and it's not so much that I am the grand person and telling everyone what to do and I have all this wisdom. It's really like everyone is really working together and it just happens more naturally that way versus than when you have some sort of artificial processes and a lot of micromanaging and managers, managing managers and that kind of stuff.
00:49:15.570 - 00:49:28.446, Speaker B: Yeah, I agree. You really want to make a team gel kind of like a hackathon, I guess, but like brand of scale. It makes sense like that. I'm sure you do like equity instead of salaries.
00:49:28.638 - 00:49:37.800, Speaker A: Well, obviously both people obviously need to get paid, but absolutely equity for sure. Incentives need to be aligned, right?
00:49:38.410 - 00:50:01.514, Speaker B: Yeah, for sure. Because you can really just work for a company, especially a big one, and just kind of like breeze through. It doesn't matter how hard you actually work, you could work like your hardest, still get paid the same as if you're working very minimalist. So I think equity is quite good in that sense of the amount of effort you put in correlates the amount of money you get.
00:50:01.632 - 00:50:34.150, Speaker A: Well, in some sense also impact, I think, is the important thing. Everyone's work actually has an impact on the overall organization. And so, you know, when you do a certain thing that has certain output and then moves the needle so it doesn't feel like you are just doing a task and whether it's successful or not, it doesn't really matter. Everything everyone does actually matters. And so that's also very different in terms of motivation.
00:50:34.970 - 00:50:50.560, Speaker B: And what have been the problems you face while creating a startup and going on this journey from starting from scratch until a point where you're a bit more scaled up and have more people on board. What have been like the main problems in each kind of level?
00:50:52.450 - 00:51:30.714, Speaker A: Hard to say. I think they're just always problems all the time. And the default is like something is burning in general, because even if everything is working, because you are small and not at scale, you need to move quicker. Otherwise the market moves or the competition moves and all of those things. So in general, you're almost always in crisis mode and putting out fires. It's more like what problem isn't happening than what specific problems are happening. I wouldn't be able to exactly give you specific examples, but it's just stuff happening all the time.
00:51:30.714 - 00:51:41.306, Speaker A: And sometimes those problems just seem so insignificant in the grand scheme of things, but then they hold up everything, which can be quite frustrating. But it's part of the fun, I guess.
00:51:41.408 - 00:52:03.700, Speaker B: Yeah. Like a fundamental issue that's kind of preventing advancements to the next level. Prioritize that. Interesting. And if you were to do the whole startup thing, you've done it multiple times, but looking back at it all, what would be kind of the advice you would give someone that's trying to create something of something they're building?
00:52:05.990 - 00:53:09.238, Speaker A: Hard to say. So on one hand, once you've gone through a first or second iteration, there are a lot of things that you now know and so are no longer as naive about. So I could go into some of the specifics, but then again, a lot of the edge is actually being naive because if you knew a lot of the things that were going to happen, you might not even attempt it in the first place or might not even go down that route, but in the end of the day, because you are so naive and hopeful and you are just pushing through it, then you made it somehow because it's never like a clean line. Right. So, yeah, I don't think I have any specific advice. Rather, I guess the advice I would have is like, the younger you are, definitely take more risk, and the older you get, the harder it will be to take risks. So I think my only advice would be take more risks and quickly as possible, fail in as many ways as you can so that you can find a thing that actually works.
00:53:09.324 - 00:53:17.242, Speaker B: Yeah, I agree with that. I think the younger you are, the less priorities, I don't know if that's the word. The less kind of things depend on you.
00:53:17.376 - 00:53:18.214, Speaker A: Responsibilities.
00:53:18.262 - 00:53:19.530, Speaker B: Yeah, there we go.
00:53:19.680 - 00:53:20.540, Speaker A: The less.
00:53:22.670 - 00:53:55.718, Speaker B: The older you get, obviously you might have family, but you have more things to take care of. And I think even not taking a risk is a risk in itself. You're just risking the future and you might regret it. And I think that's where I guess like a bit philosophy, bit of a philosophy. But I think the only thing you really think of are regrets and experiences. And then maybe you regret not taking a chance and having that new experience and just being complacent. Even if it fails, you still learn a lot.
00:53:55.804 - 00:54:03.258, Speaker A: Agreed. That's the only time you really learn anyway. So try to get to as many fails as possible quickly.
00:54:03.344 - 00:54:22.662, Speaker B: Yeah. Trial and error. Yeah. It's like the experience points, the more failure, the more you level up, really. And then you get to a point where you're super experienced because of the failures and then eventually you succeed. Well, hopefully. I guess it's again increasing the chances of creating your own lock.
00:54:22.826 - 00:54:53.690, Speaker A: Yeah, exactly. Also just your threshold for living in shitty conditions, sleeping, I don't know, on your friend's couch or in your car or something. You can do that when you're 20 or something, right? But you'll be less likely to do that when you're in your thirty s and you've already had a job that paid you like 100k or whatever a month and then go back to living that way. So you can just be a lot more scrappy and hustle a lot more.
00:54:53.760 - 00:54:57.498, Speaker B: Which is for sure. And your body can tolerate a lot more as well.
00:54:57.584 - 00:55:00.410, Speaker A: Exactly. Ramen noodles all the way.
00:55:00.560 - 00:55:22.500, Speaker B: Exactly. No sleep. Yeah. But it's definitely important to take care of your body young and as early as possible and have the right habits so you can kind of set yourself up for success for longer, be in the most optimal state for as long as possible. What does your kind of daily routine look like? Speaking on that.
00:55:25.270 - 00:55:46.858, Speaker A: So I tend to wake up relatively early, actually a little bit later these days. So I usually get up at five these days, usually at six. Do like a quick workout routine. So currently that is just doing like 100 burpees then. Exactly. My cardio was just terrible. For a long time.
00:55:46.858 - 00:56:18.322, Speaker A: I've been doing mostly weightlifting, but no cardio. So I've been doing that lately. So just to get your heart pumping quickly, then I do usually 10 minutes of language learning. So either lingo or some other apps, whatever your preferred apps is. Then I usually go for a 20 minutes walk, just think about things, let the mind wander, come back and then plan out my day. So doing my to do list. So I have to do lists and where I aggregate everything like an inbox.
00:56:18.322 - 00:56:41.342, Speaker A: And then in the mornings I usually take 15 minutes to prioritize based on what has happened in the previous day. And then it's go time, essentially. Usually do then workouts around noon. So I do some weightlifting on Mondays and Fridays, Tuesdays and Thursdays. I do muay thai. Yeah. And Wednesdays is sort of my break day.
00:56:41.342 - 00:57:06.422, Speaker A: Yeah. And then usually try. So I used to work really long hours till like 16 hours plus. But these days I try to get a bit more sleep. So I try to have everything wrapped up. Latest by 09:00 p.m. Around 930, I start dimming the lights, doing sort of my wind down routine, which involves a bit of reading and journaling and stuff.
00:57:06.422 - 00:57:10.470, Speaker A: And around 1030 ish, I tend to go to bed already.
00:57:10.540 - 00:57:23.980, Speaker B: Sounds very balanced. And obviously when you prioritizing sleep and cutting down from the 16 hours, it becomes much more focused on. Well, yeah, focus, yeah, absolutely.
00:57:24.350 - 00:57:55.060, Speaker A: Recently I was introduced to the concept of time compression. And it's basically if you schedule 2 hours to do something, you will take 2 hours, but if you schedule 1 hour to do it, you might be able to actually do it within an hour. So your day becomes a little bit more intense and you try to basically maximize your time and the efficiency, but that way you actually have some more time later in the day as well to sleep, which is obviously quite important.
00:57:55.370 - 00:58:19.100, Speaker B: Yeah, sure. To keep that brain healthy. And yeah, focus is such an important thing because you can get so much done in 4 hours of intense flow state versus a whole day of not really focusing, always picking up the phone or getting distracted every 20 minutes. So how do you get into that flow state as fast as possible and stay in it for as long as possible?
00:58:19.950 - 00:59:22.462, Speaker A: Yeah, so it really depends on the specifics, like the task at hand. So for example, when I used to do more coding, it usually takes me about at least 30 minutes to an hour to get all the pieces in memory or in ram, so to speak, so that I can actually execute. So you really want to avoid any distractions. So no telegram, no discord, all the screens sort of only have the things that you need to work with. But these days I do more multitasking and coordinating, setting up meetings, doing research. I guess research is mostly the more focused type of job and then just block out like one or 2 hours for specific things that I'm looking into. So the periods are, I guess not as long as they used to be, but for coding because there's a longer on ramp period to get me into that state, I just needed to block out more time.
00:59:22.516 - 01:00:01.294, Speaker B: Yeah, I feel the same way. I think it's incredibly important to just get rid of as many distractions as possible and even temptations. We're so wired nowadays with these negative habits, just picking it up, even if it's in our peripheral. We have to kind of zone out of that stuff and remove these bad habits. Yeah, man, this has been great. I found tremendous value in this, and I'm sure a lot of people also are going to find a lot of value in this. For the people that want to use Titan builder, how can they really get in contact or just use it just from listening from this?
01:00:01.412 - 01:00:29.362, Speaker A: Sure. So we have a twitter, we have a website, we have a discord. So if you just go to Titanbuilder XYZ, you'll find all the links to all our accounts and we are quite responsive. You can dm us and in terms of actually connecting to our builder, we have docs, pages and all pretty straightforward. So just go to Titanbuilder XYZ and everything will be there.
01:00:29.416 - 01:00:34.694, Speaker B: It's been such a pleasure to have you on. Kubi, thank you so much for taking the time out of your day. I know it's super busy and very.
01:00:34.732 - 01:00:38.840, Speaker A: Structured, so I make time for you.
01:00:40.890 - 01:00:42.310, Speaker B: Don't make me blush.
01:00:44.170 - 01:00:46.086, Speaker A: Yeah, it's been fun. Thanks for having me.
01:00:46.108 - 01:00:46.806, Speaker B: Thanks for coming on.
01:00:46.828 - 01:00:47.158, Speaker A: Yeah.
01:00:47.244 - 01:01:01.870, Speaker B: And if anybody wants someone else on Jess us, message me at scrapingbirds on Twitter or email me at scrapingbirds@gmail.com and hopefully we can have them on otherwise. Thanks for coming on and hopefully listen to another one.
01:01:01.940 - 01:01:02.650, Speaker A: Cheers. Ciao.
