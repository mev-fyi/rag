00:00:00.250 - 00:00:13.146, Speaker A: If you were to build uniswap in a complete private world, what does that even mean? That means all the state that is stored by the Uniswap contract would be private. Me, as a trader, wouldn't even know how much liquidity there is in an Eth Dai pool.
00:00:13.338 - 00:00:23.038, Speaker B: This episode is brought to you by Fastlane Trustless Mev GMG, everyone. My name is Garchi, the host of scraping bits, and today I'm with Raul. How's it going, man?
00:00:23.124 - 00:00:24.286, Speaker A: Hey, good to be here.
00:00:24.388 - 00:00:45.930, Speaker B: Yeah, I'm great to have you on. We actually talked some time ago. I applied for a security position for crypto at Reddit, but didn't happen. So we're here interviewing you of why that didn't happen. Okay, just for some context, who are you and what do you do for the people that don't know you?
00:00:46.000 - 00:01:20.998, Speaker A: Yeah, so I'm based in London. I'm currently a blockchain engineer at Aztec. Aztec is a ZK rollup, trying to add a layer of privacy using zero knowledge on top of ZK rollup, so also scaling Ethereum along the way. Before this, I was working at Reddit's Crypto team, which is how I got to know you. We're doing a bunch of stuff there with community points and collectible avatars in the Reddit wallet. Before that, I was working very briefly at the tune foundation and at Blue Sky. I was researching there on how does a decentralized social media work.
00:01:20.998 - 00:02:06.180, Speaker A: Yeah, and before that, I was, like, in university. And while I was studying computer science, I was also freelancing in blockchains, but I actually spent most of my time not in the Ethereum world, but in other blockchains. So it started off initially in the hyperledger, like the permission blockchains, which probably don't exist anymore. And then it went into Hedera Hashgraph, which is not really a blockchain, but still like a DLT. I really love the concept of Hedera, which is what pulled me in, sort of thing. But, yeah, after all of that, when I stopped freelancing in my final semester of university, I kind of started researching again, learned about layer twos, learned about this weird thing called uniswap and DFI, and got back into the Ethereum ecosystem and sort of haven't left it.
00:02:08.150 - 00:02:43.822, Speaker B: Crazy. And it's quite interesting. You mentioned Hadira. I tried to jump on that as well, but I think it was just so early that I couldn't actually get anything to work. The devtool was just disgustingly bad, and that moment I realized if there's no tooling for a network, it's done for. And so ever since then I've been like, wait, okay, tools are essential. And if you have private or public, obviously, if you have private, you have stuff that other people don't, and then you can leverage that for your own kind of use case.
00:02:43.822 - 00:03:02.406, Speaker B: But for a public blockchain, there's no tooling, especially cross compatible ones like foundry or hard hat. It's not working. You can't even fork the main net. I couldn't even integrate anything because I couldn't fork anything or test it. So I was like, all right, not doing this. This is done.
00:03:02.508 - 00:03:38.958, Speaker A: Yeah, because it's not even EVM compatible. So I was also there really early. I was one of the first sort of community members. And because of how early I was, later on I was called something like MVP, like a most valued professional, because I just spent so much time. From a dev's point of view, there is something to be said about being sort of super early. Yes, it's the most frustrating thing you can do, right, because nothing works and there are like obvious bugs everywhere. But from a long term perspective, you actually learn so much because that's one of the only times you aren't facing abstraction layers.
00:03:38.958 - 00:04:03.594, Speaker A: So you have to go all the way in and you finally learn protocol. Like today, if you use hard hat and stuff, you kind of don't need to know any much about Ethereum or how the EVM actually works. And that's great because you can have more and more devs to use it, but as a personal choice, you aren't forced to learn things that are so deep kind of thing.
00:04:03.792 - 00:04:12.798, Speaker B: Yeah, it's like you don't have to learn RPC calls of the underlying technology that these abstracts are using.
00:04:12.884 - 00:04:14.720, Speaker A: Exactly. Yeah.
00:04:15.410 - 00:04:38.530, Speaker B: A major downside, I only just recently learned how to use RPC calls directly to get storage, the bytecode of something, how to even do a transaction just from an RPC call. So I was like, damn, that was a massive skill gap, which was essential that I only just learned two years into the journey.
00:04:39.350 - 00:05:28.006, Speaker A: Yeah, no, for sure. And I think when I was in uni, I was interacting with these super senior developers or principal staff, software engineers with 1520 years of experience. And that was the one obvious gap that I saw is they actually know everything. They have unraveled all the abstraction and they can talk at every layer, whereas obviously I couldn't. Right. So one of the things I used to joke with my friends in uni is, yes, I'm apparently doing a university computer science degree, but I am actually learning everything through Hedera because, yeah, I also didn't know what RPC is and then I learned about Google Protobuff. And why would you use Protobuff over something like rest APIs, which is what I would naively think is the best way forward.
00:05:28.188 - 00:05:29.190, Speaker B: Yeah, exactly.
00:05:29.260 - 00:05:54.254, Speaker A: Because rest APIs are easy. Why would you not use rest APIs? What is this proto thing? Right. And like a bunch of all of these serialization issues. What is an SDK? Why should you create it? Even, like, you learn about Devex, like, what is a good SDK looking like? And I'm hoping that all of that is somehow going to get used in my current time at Aztec when I am now building all these tools for devs to use.
00:05:54.372 - 00:06:04.622, Speaker B: Nice. Yeah. And how's that going? How are you really taking the approach to really build something that a dev would have a good experience on?
00:06:04.756 - 00:06:37.638, Speaker A: Yeah. So one thing that's interesting is because the blockchain space has been around for such a long time now. There are so many tools. So now that we are building Aztec, which is not EVM compliant, which means hard hat or foundry like tools wouldn't exist to get those kinds of developers, there is much more work that needs to be done. We can't just launch without any of these tools. So we would now either partner or build your own versions of all of these tools, like build your own test clients. But at the same time you're doing that, you're also building the whole protocol.
00:06:37.638 - 00:06:47.850, Speaker A: So there's a much bigger lift that needs to be done. But yeah, it's interesting because again, you're forced to think about all these small things that you usually wouldn't.
00:06:47.930 - 00:07:09.510, Speaker B: Astec is such an interesting kind of domain because it's Zk on an ethereum kind of, I guess, base. Right. So it's like privacy. First crypto. Were you in cryptography before this or you got hired Aztec and then started doing.
00:07:09.660 - 00:07:18.840, Speaker A: Yeah, I had no professional background in cryptography at all, so I got hired and now I'm forcing myself to learn.
00:07:19.610 - 00:07:20.434, Speaker B: Nice. Yeah.
00:07:20.492 - 00:07:32.142, Speaker A: But yeah, again, one of the good things about software abstraction is, again, depending on what part of the stack you're working on, you might get away with not knowing every single individual detail about.
00:07:32.196 - 00:07:37.870, Speaker B: Cryptography as long as you can learn. I think that's the main thing. Adaptability is the.
00:07:37.940 - 00:07:45.220, Speaker A: Yeah, adaptability, but also like learning how to operate in an environment where you don't know everything and you might never know.
00:07:46.230 - 00:07:51.026, Speaker B: Yeah, yeah. So what do you really do at Aztec right now on a day to day basis, yeah.
00:07:51.128 - 00:08:34.478, Speaker A: So I'm officially on the smart contracts team, but currently we're working across the entire stack. So that means the smart contracts that power the roll up side of Aztec and then little bit work across the sequencers and the nodes. And then also on noir, Noir is Aztec's own language. It's predominantly used to write circuits, so kind of like a competitor to Circon, if you will. But we are also trying to use noir as a way to write smart contracts on top of Aztec. So that requires a lot of additional libraries and a lot of toolings on. How would you do that? So, building all of that.
00:08:34.478 - 00:08:52.070, Speaker A: So, literally right now, my literally current day is creating cheat codes, kind of like how you have in foundry or hard hat to manipulate, let's say, the block timestamp, or to load a certain value at a storage slot or to store a certain value at a storage.
00:08:52.810 - 00:09:00.442, Speaker B: Right, right. So you're basically building, like a foundry for Aztec right now. Kind of like an emulator, if you will.
00:09:00.496 - 00:09:01.100, Speaker A: Yeah.
00:09:01.790 - 00:09:13.630, Speaker B: And what are the problems you've kind of faced while building this emulator, and what are the strategies you really take? Actually, let's start with what are the problems you face when building an emulator?
00:09:15.090 - 00:10:12.510, Speaker A: So some of them are just generic software engineering kind of issues, which is the fact that, okay, we're still too early. We haven't launched sort of even a testnet yet, and there's a lot of parts of the protocol that still need to be figured. So sometimes when you want to create a cheat code, you also need these emulators. You need to maybe create your own test client, which might require a lot of surgery into the current protocol, like maybe bypassing certain authentication schemes or whatever. So does it even make sense to do it now when the protocol might change a lot, or at what point does it make sense? And the other parts are like, okay, what if we sort of change the definition of what the cheat code does? So, for example, let's say you want a cheat code that changes the current block or the next block, right? Now, what does changing mean? It can mean reducing. So if you're on block 100, make it say, I'm on block two, or increasing. Right.
00:10:12.510 - 00:10:58.446, Speaker A: So what if you just change it to say, hey, okay, you can't decrease. You can only increase. It's like one way. So, like, creating your own assumptions. But that is like, all of this is just more like standard software engineering stuff, and it's also, like, requiring to think about, okay, but how would, in what cases would someone ever need to change the block number? And then you go like, okay, there's probably in a lending example where you have to mess around with interest rates, right, like ave or whatever. Okay, so how would they use it? And then try to see if you can use it that way, basically with minimum requirements, changes to the protocols. But sometimes you also go like, okay, but maybe all of this work doesn't make sense given the new requirements or given of how much work it needs.
00:10:58.446 - 00:11:19.122, Speaker A: So just like saying, okay, let's just not do this for this release. Maybe come back to it, I'll later release. So that part is more like generic software engineering rather than problems, just specific to Aztec, which is nice, I guess, can be frustrating if all of your problems are just related to this one idea that everyone has chosen.
00:11:19.186 - 00:11:29.670, Speaker B: It's kind of the same as releasing a protocol or an MVP, at least. You've got to prioritize the essentials of what's absolutely necessary.
00:11:30.490 - 00:12:06.660, Speaker A: Yeah, one thing I really understood. So this is my first time in working in sort of a deep tech startup. I've worked in, for example, my previous company at Reddit or at app level companies where you're building a product and it's okay if sometimes it's buggy, you can just ship it really quickly. So to gain market cap famously started by Amazon. My first job out of uni was actually in Amazon Alexa. And when Alexa was launched, it was infamously buggy. It was really bad and extremely hacky, but it's fine.
00:12:06.660 - 00:12:53.694, Speaker A: Yes, sometimes it might be a bad user experience, but I can always improve it so it makes more sense to ship it quickly. But other times you want to be really slow and really careful when it has to do with security or cryptography. So the core ethereum protocol or the core aztec protocol, if there is a bug in one of our circuits, that's a no no. So before our launch, we have to spend a really long time just auditing and making sure that there are no bugs in the most critical parts of the code base. And there again, it's like, yeah, okay, so it's like some parts of the code base are really critical. That would be our proving system. But then there are some parts that can be buggy.
00:12:53.694 - 00:13:09.030, Speaker A: It shouldn't be ideally, but they can be buggy and it's okay, for example, like writing no our contracts, that'll be a very bad developer experience if it's buggy. But at least there won't be any fundamental issues with Aztec. Like we can always fix them at the next release.
00:13:11.210 - 00:13:25.978, Speaker B: That's interesting. Yeah. And you have to learn this whole cryptography thing as well. On top of that, it's like how private transactions and public transactions work, which is terrific once it starts rolling out. Right. You have such in depth knowledge.
00:13:26.074 - 00:13:55.622, Speaker A: Yeah. It's also interesting because in Aztec we'll have two kinds of states. We'd have a Utxo kind of model, like in bitcoin, and that will be how we model our private state, but we'll also have a public state, and that will be like Ethereum, so an account state model. So developers will be working with both. And Utxos, famously, they have their own issues. We know that from programmable Utxo blockchains, like Cardano. Right.
00:13:55.622 - 00:14:21.294, Speaker A: So, like, okay, yeah. How do you manage those utxo issues? Like the Utxo concurrency issues or whatever? And there's also, like, you have to teach developers on how to think about these things kind of stuff. And at the same time, you want to abstract all the cryptographic stuff. So, yes, maybe we need to know as aztec lab employees, but the devs can get away without knowing, just like how me and you got away without knowing what RPC calls until slightly later in our.
00:14:21.492 - 00:14:50.860, Speaker B: Yeah, yeah, sure. And I think the hardest thing, because I had Medaya on from Aztec as well, previously, and we talked a lot about at the fundamental level and from a smart contract point with Noah, I guess the hardest thing I would think about is creating your own circuits. Right? So I guess once noir is released and Aztec is launched, I guess, how does one create a circuit? And what is a circuit to begin with? And then how do you create one?
00:14:51.390 - 00:15:34.630, Speaker A: Yeah. So the easiest way to think about what a circuit is, is by forgetting everything about cryptography. So in my year ten of university, we were learning about high school. Sorry. We were learning about Boolean algebra, like, and gates and or gates and manned gates and so on. And we had to draw these diagrams of how would you draw X and Y combined with or z? And the way we draw them is like you have x, y and z in circles, and then you draw a line between X and Y, and both of them go through this and gate. And there's a certain notation of how you draw an and gate, and then you connect it with an or gate that is connected to z.
00:15:34.630 - 00:16:00.138, Speaker A: Right. So it's like a literal electric circuit kind of diagram. And that's a circuit. That's it. So when people say, like, gates and stuff like this has 1 million gates or 100 million gates or whatever, they mean like these gates, like and gates or gates or whatever, or obviously slightly more complex gates, too. With noir. To come back to your other question, our goal is that you shouldn't know that you're writing circuits.
00:16:00.138 - 00:16:25.910, Speaker A: It should feel like a normal programming language because at least within the context of Aztec, the network, you're using noir to write your smart contracts. Right. Outside of Aztec, the network, you can also use noir as a competitor to circom to write circuits. But that's different. Within my job purview as an engineer for aztec network, it's like, how do you use Noad, the smart contract language?
00:16:27.390 - 00:17:17.494, Speaker B: Yeah, interesting. And when there's private and public transactions, it also brings the idea of if I was to do well, first of all, I can obviously transfer tokens from myself to another wallet anonymously, right? Yeah, that's a possibility, yeah, for sure. There's going to be exchanges where there's going to be native as well, where you can do swaps anonymously. And then you will really have this hard time tracking where's this money coming from? You can fund basically a wallet anonymously. I think the most interesting thing when this comes out is the bridges. Anonymous bridging from. I guess you put in from EVM to aztec and aztec to another one.
00:17:17.692 - 00:17:56.654, Speaker A: Back to have to. Yeah, this is like aztec connect territory. So this was before I joined. But Aztec had a product called Aztec Connect where you would have Ave and Unishop and all these really big defi protocols on layer one on Ethereum. And we built like this mini aztec network, kind of like a very small layer two, but not a fully programmable layer two by any means. And what you could do is you have these funds like ETh or die on l one. You first of all, like, let's say you bridge them and then you do liquidity pooling.
00:17:56.654 - 00:18:59.180, Speaker A: So, like, you and a bunch of people come together and put a mined amount of money into uniswap. Right? So now in l one, you don't know that was actually me and you who had put money in uniswap. What you know is aztec connect address, put some money into Uniswap, but of, like, you can always run old school statistics to track money flows and try and figure out where the money is going kind of thing. So again, you have to be a bit more careful with how you want to leak your privacy and all that. What I mean to say is I could do something really dumb, like first move like 100 e from Ethereum to this asset connect thing. And then literally the next second put all of that 100 ETH in uniswap as an LP, then everyone kind of knows it was me because amount matches and it's literally the next second, then there's no privacy to be gained there. Everyone knows what is happening there.
00:18:59.710 - 00:20:14.560, Speaker B: You've got to implement delays and all that stuff. So it's really hard to track, obviously. But then it's kind of interesting, the whole ZK realm, not just specifically aztec, but the entire ZK kind of vm space. Know, we saw this thing with tornado cash where they just got sanctioned and now you're bringing in these vms which are capable of enabling people to create dozens, hundreds of these tornado caches or variations of some sorts, but also new protocols of lending, et cetera. Also ZK lending is going to be very interesting. But yeah, I wonder how this is all going to play out because obviously Tornado cash was sanctioned, but I think how can you stop a whole decentralized network, right? Because all they did really was just sanction the website, got rid of the code of GitHub. But when you have decentralized networks, nobody running mean, it's going to become unstoppable at that point unless you completely.
00:20:14.560 - 00:20:18.080, Speaker B: Yeah, there's just so many things you have to account for at that.
00:20:19.490 - 00:20:59.230, Speaker A: I mean, it also depends what as an app developer you want to do. There's always things you can do like, let's say you want to be compliant, which is your decision, and maybe you should. Then you can have a bit of proof of compliance in there, which is necessary. It'll be quite sad if everything that's happening on a blockchain network is illegal. That kind of proves the points of all the people out there who hate blockchain and say it's for drugs. And I certainly don't want my work to be used just for drugs or something. I spend a lot of time in the product space and the app level space.
00:20:59.230 - 00:21:46.960, Speaker A: So I'm excited to see all these super interesting new ideas that come to life and how people will approach it in terms of reducing maybe the legal risk or the censorship risk or other things. Yeah, I think that's the best thing of working in a protocol layer, is you really open your ups. If you want to be that kind of an engineer, you open yourself up to learning about every single small thing that an app level person should think of because they will no doubt run into issues and they will obviously come to you as the protocol developer. And the owner says that, yeah, the protocol developers have actually thought about how they want the network to be used, because otherwise, you can't design a good product. Right. If you haven't even thought about how the use cases would happen.
00:21:47.650 - 00:22:44.522, Speaker B: Yeah, I mean, obviously someone is going to create a tornado cash equivalent, and they'll be able to do this with an anonymous funded wallet. And so it's not like a normal metamask. You can generate a wallet, fund it via an anonymous transaction or private transaction, and then create this protocol, which is tornado cash with no traces unless at the node level, or you can somehow trace how this wallet was created, somehow backtrack it with, like, I guess, cybersecurity forensics back to them in some way. I don't know if that's going to be implemented in some way, but that kind of gets rid of the point of private transactions. Yeah, there is possibility of a lot of havoc being brought, but also because it's a fully anonymous.
00:22:44.666 - 00:23:26.394, Speaker A: So one of the things that Aztec enables is, like, which I loved from a product standpoint is it's not just a private blockchain or a private. Sorry, it's not a blockchain. It's not just a private layer. Like, it also has a public component to it, because there are just some things you can't do in a complete private. For example, you can't build uniswap the way we know it, at least in the private world, if you were to build uniswap in a complete private world. So what does that even mean? That means all the state that is stored by the Uniswap contract would be private. That means me, as a trader, wouldn't even know how much liquidity there is in an ETH dai pool.
00:23:26.394 - 00:24:02.074, Speaker A: And that's something I need to know before I trade or even before I become a liquidity provider. I want to know how much, if I put in five e, how much money I'll come out. That has to be like a public component or for lending. Where you have to put in collateral, I need to know. Liquidators need to know how much collateral you've put so they can liquidate you, which is the core concept of maker or every other lending system. You have off chain liquidators that can do this, and that's how the protocol runs smoothly, always.
00:24:02.192 - 00:24:08.346, Speaker B: And the only way you can interact with a private contract, right, is by knowing that bytecode. The bytecode, yeah.
00:24:08.368 - 00:24:24.370, Speaker A: So you can fetch the bytecode from a Merkel tree that we'll have, like, a contract Merkel tree. You query that, and that's how you can be sure that it's the same as the bytecode you have is the same as the bytecode on the network.
00:24:26.630 - 00:25:07.278, Speaker B: Yeah, that makes sense. So you would have to have some insider information to even do that kind of stuff. But I wonder, I guess not. I'm just wondering. Yeah, because, okay, let's say obviously black hats are going to, come on, it's going to be the hub for black hats to, one, fund their wallets and two, even do exploits because then they can just backtrack and get away instantly with just like a couple of enormous transactions. I mean, good luck trying to find it unless there is some fundamental leak within the protocol itself or node where you can kind of trace back.
00:25:07.444 - 00:25:54.782, Speaker A: Yeah, it also depends, right? Like what if the token itself is a public token, for example, on aspect you transfer, you kind of know. Right. So it really depends on so many things that I wouldn't necessarily believe that it's going to be the hub for exploiters to come in and run away with the money. There's something that's really beautiful about, you can see that in Ethereum too, right? In theory, people are anonymous in blockchain land, we all just addresses. And there are so many hacks that happen on Ethereum. And yeah, the black hats are really successful in that they can take the money out of curve or whatever d five protocol, it's hacked. How do they take the money out? How do they materialize the money? Right? Yeah.
00:25:54.782 - 00:26:12.580, Speaker A: Let's say you successfully hack like 10 million USDC, right? Sure. How will you actually use that money? How will you, let's say, take it to your bank account or put it in another d five protocol or whatever without alerting everyone and having the entire community work against you.
00:26:13.190 - 00:26:36.026, Speaker B: Yeah, I mean, that's the reality of that. But when you bring in this platform of anonymous transactions, you can just kind of filter them out by like $1,000 every so often or 10,000 every just small increments to not alert anything. It just looks normal, really. So I guess something like that, to be honest, would be the way, I guess, from my.
00:26:36.048 - 00:26:55.730, Speaker A: Yeah, there'll be probably some compliance tools that app developers build to make sure nothing else happens there. There's also like a long way out, right? So there's a lot of things that will happen that can make it all work in a way that it's still secure and doesn't rob everyone or something, because then it's like pointless.
00:26:57.110 - 00:27:28.714, Speaker B: Yeah, I agree. I guess if you're thinking about if you want it to be completely anonymous, if something is completely anonymous, that would always happen. There's always going to be the evil or blackout side of any innovation. Right. And I don't know if it's really can be stopped without implementing very limiting implementations or features that kind of like get rid of the core, I guess, core idea of what it was meant to be.
00:27:28.832 - 00:28:29.502, Speaker A: Yeah, it'll be interesting. What fascinates me is just the ability of learning, just building my own raw skill of thinking very deeply about things, understanding how a deep tech startup operates. Because again, from my perspective, most of the time, Aztec was this R D company, and it's now in a process where it's like shipping products. Right? Like you had noir, you had Aztec connect, you'll soon have the Aztec L two. So what does it take to go from r and D or proper science to a product? How do you do that? But also as an engineer, how do you reason about this? Because on one side you have to be really careful about security. On the other side you want to ship fast because you are a company, and on the third side because you're a protocol and you have to make these core decisions, like how do you think deeply about impact of certain things, like what is needed, what is not? If this happens, what does this mean for security or speed or reliance or whatever?
00:28:29.556 - 00:29:07.050, Speaker B: Yeah, that makes sense. I wonder the security, if there's going to be any more kind of exploits, if you introduce any new opcodes or any. You know how EVM has reentrancy and that's specific to EVM, right. It's an EVM introduced vulnerability. It's a feature which turns out to be a vulnerability in some instances. So I wonder if that, if you're bringing in any features that are native to Aztec that can possibly be. Well, yeah, just new features that are different to the EVM?
00:29:07.790 - 00:30:04.198, Speaker A: Yeah, on the plus side. So I actually did a panel about this in Defcon where I was back still at Reddit, and the panel was with Aztec stockware and fuel, which in my opinion, are like the only three layer twos that are doing something that's not EVM compatible, that are trying to create brand new paradigms. And the whole thesis of the talk was like, yes, we've had evms, but over the last seven years, the way we have used blockchain itself has changed. And there are many new issues that popped up that no one could have thought about, like meV, but also reentrancy and other things. And some of these are like fundamental issues of EVM. So what can we do? So the only way to solve those issues or the only way to build the future is build a new kind of VM kind of thing. So what does that even mean? Or what kind of new paradigms does that entail? Right.
00:30:04.198 - 00:30:40.106, Speaker A: For example, with fuel, it was all about a very parallelized blockchain. It's like super fast. So the concept fuel was just like, everyone is like, the virtual machine is only 64 bits, as opposed to like EVM, which is 256 bits. The idea behind that is all modern architectures, computers are 64 bits. So that means you can do processes much faster than if you have a 256 bit machine. That's one. And the other part was like, most of their contracts have like a shared ram, like 64 megabytes, I believe.
00:30:40.106 - 00:31:05.182, Speaker A: But don't quote me on this. So ram was the database. It's much more quicker to optimize. So fuel was just doing everything it takes. Have a super quick day or two. Because it was their opinion that even with current roll ups, the thing that you will hit eventually will be execution. Right? To take a step back, we built roll ups because we started hitting execution problems in Ethereum.
00:31:05.182 - 00:31:48.574, Speaker A: It just became too expensive to execute on Ethereum. And so we built roll ups. And today, all roll ups are expensive still because of data availability. So every roll up is focusing on reducing their data availability costs, right? Which is good, but let's say we're like 510 years in the future, and data availability costs are much lower for various pickers of various innovations. Eventually, all the roll ups will again, once again hit the same execution problems. And this was Field's thing. And they were like, yeah, okay, so you know what? All these are trying too hard to just solve this data availability issue, and they can survive for ten years.
00:31:48.574 - 00:32:24.026, Speaker A: We'll just skip this whole tenure of thing, and we'll just run towards the next issue, which will happen kind of thing. And so one of the other things here was like UtXo State and a couple of other things. And they had their own language, right? And that would open up new kinds of paradigms. Similarly with Stockware, right, they had their own language called Cairo. And because it's ZK based, it's not 256 bits, but rather 254 bits, which turns out is the size of Field elements. When you want to do any elliptic curve operations that involves zero knowledge proofs. And yeah, they have their own design decisions that they make.
00:32:24.026 - 00:33:10.970, Speaker A: And Aztec was like, okay, according to the founders of Aztec, it was like, one of the things that might stop the mass adoption of Blockchain is how public everything is. If I know your address, I can know your entire network. But also, all the things you do, there is no concept of information asymmetry. So maybe if we solve that, we can have a much easier time bringing, let's say, banks on board or even companies like Reddit on board, where people might have these NFTs on Reddit, like collectible avatars, but they don't want to necessarily show it out to everyone to prevent spam or abuse or whatever. And I don't know if there's an actual problem with Reddit. I'm just speculating, giving, like, random examples.
00:33:12.030 - 00:33:14.250, Speaker B: Telling that you've just left Reddit.
00:33:18.110 - 00:33:22.058, Speaker A: No, I don't know if this was an issue because I was working on a separate project.
00:33:22.144 - 00:33:26.378, Speaker B: So what were you doing at Reddit, and why did you end up leaving Reddit?
00:33:26.474 - 00:34:49.020, Speaker A: At Reddit, one of the ideas was like, what happens if you have sort of decentralized reputation? So there's Karma on Reddit, but there's also, like, Subreddit Karma. And what happens if, can we put subreddit Karma on Chain? Right. And that would enable a lot of super interesting things like proper reputation systems, amongst other things. And one of the first fundamental issues we hit was obviously, blockchains don't have or any layer one or even any roll up today doesn't have that kind of compute available for ready to pull this off in a cheap way or in a sustainable fashion. So one of the coolest projects I got to do is I was involved in working with Arbitrum on, they built arbitrum Nova, which is, yeah, they built like, arbitrum Nova, which is called any trust, I guess, and just seeing how that would work, getting an early sneak peek, being part of that whole design and using it and being one of the first people, one of the first companies to launch on any trust was a phenomenal experience for me because we launched on the first day that any trust was launched, and that was kind of scary, but also super cool. You could just see the adoption numbers on Arbitrum Nova just increase as we started deploying. Yeah, that was just a fantastic process.
00:34:49.020 - 00:35:49.914, Speaker A: Later on, as Reddit collectible avatars grew in a huge form, engulfing millions of users, which was previously unseen in crypto from an app level perspective, we also had our own crypto wallet within Reddit mobile app. And how do you create a good crypto wallet like noncustodial, such that normal people can use it? And it's super interesting, right, because say you have a metamask Chrome extension, right? And then you have this password that sort of encrypts your metamask. What happens if you forget your password? Right? You're kind of gone. And that's why the best practice is, like, you have to store your private key. So even if you lose your password, you're okay. But realistically, no one in the normal world is actually going to copy and paste their private key in a very secure location because apparently you're telling me I can't even put it on Google Drive, I can't put it in my gmail. I can't put it anywhere that has Internet access.
00:35:49.914 - 00:36:34.070, Speaker A: So what am I meant to do? And then people say, oh, yeah, you should write it down on a piece of paper. So what are you telling me to write passwords on a piece of paper? I thought in all of every security person said, never write down your password. So what's happening here? But maybe because this is like the Reddit mobile app and everyone uses Reddit, maybe you can get away with not writing your private key. But of course you're going to forget your password and you can't. Just like, what happens if you forget your password because it's your password that encrypts the private key. Like a super naive solution that Reddit could do was, for example, imagine if you set your own password for the Reddit wallet, and then we encrypt your private key with that password and then we store it in our database. There's a super naive solution.
00:36:34.070 - 00:36:59.986, Speaker A: Bunch of issues, right? But let's say we do that in theory, this is still okay, because Reddit doesn't know, my Reddit wallet does not know what password I'm using, and they're storing it encrypted into the database. But what happens here? If I forget my password, then even Reddit can't help me, and Reddit shouldn't be able to help you because this is a non custodial wallet. Because if we are building a custodial wallet, then we are like a bank. And Reddit is not a bank. Reddit is a social media company.
00:37:00.088 - 00:37:02.658, Speaker B: Yeah. Were you working on the development of the wallet as well?
00:37:02.744 - 00:37:08.082, Speaker A: Yeah, on the back end, the. Not a front end side. Not on the mobile. Yeah.
00:37:08.216 - 00:37:29.942, Speaker B: So what did it really take to make a wallet? Because I think that's even a field that I haven't even gone into, really. First of all, you have the generation of the wallet, and then, I don't know, probably metamask tracks where it comes from. But I guess, what does it take to create a wallet basically from scratch?
00:37:30.006 - 00:38:04.278, Speaker A: Yeah, there's like a whole ux angle to it as well. Even if you forget security, the easiest thing is if you go through the creation of a crypto wallet today, you get tons of pop ups that really scare you. They talk about do not lose your private key, do not give it to anyone, do not be susceptible to scams or phishing. And sort of we onboard people by really scaring them with so many do nots. Right? And it still scares me a lot. I'll be really honest. That's just not how you onboard people.
00:38:04.278 - 00:38:17.402, Speaker A: Can you imagine when you're creating a Google account like Google will onboard you with 100,000 do nots and really scare you? Like, why would I use your product if all you're saying is 100 ways that I can be scammed and lose all my money.
00:38:17.536 - 00:38:18.458, Speaker B: Yeah, exactly.
00:38:18.544 - 00:38:39.554, Speaker A: So that's like the first UX problem. And the second one is there are still so many steps to create a wallet. I think there's a stat out there in the world that says humans wait less than 5 seconds for a website to load, and if it doesn't, they walk out, close the tab or reload, or just get distracted kind of thing.
00:38:39.752 - 00:38:45.780, Speaker B: So from the backend perspective, what did it really take to create one? Not necessarily like the UX or.
00:38:46.150 - 00:39:40.834, Speaker A: Yeah, yeah, sorry, yeah, that's a good question. One of the things is can people just get to what they want really quickly? So how many steps can they skip? Or can they do some steps now and other steps later? For example, can they quickly just create a password now and we don't even tell them to copy their private key or whatever. And much later they can start from where they left off, which is like copy a private key to somewhere safe. Right? So keeping that context in the database and then pushing it at an appropriate time, much later. So for example, the typical in Reddit, usually people would create their wallet to claim their avatar, just quickly create a password, which is kind of like the old school login system that we all are familiar with. And for you now it looks like you have your NFT. But to get the NFT again, usually to claim it, you need to pay gas, right? But of course there's a new wallet.
00:39:40.834 - 00:40:33.110, Speaker A: So how do you do all of that? Because again, we want really small, almost no buttons that users have to click, and it should be in under 5 seconds or whatever. So you implement like meta transactions into the back end side, which is like mainly eip seven one two, I believe. And the meta transactions is basically like a very fancy way of saying you do the signing of what you want to do. And I'll do the executing, which means the user would sign that. They want to claim this NFT with this id, this smart contract address, and then Reddit would pay for it. Right? But then if you go a step deeper, then you start thinking, okay, let's use a random other company's example. So my company wants to pay for all of your transactions, right? So you go on my company's website and you say, I want to claim this, and then my company will have its own wallet that's going to pay.
00:40:33.110 - 00:41:09.390, Speaker A: That means it's going to be stored on the server with real funds. Like it's like a hot wallet rather than a cold wallet because it's going to be used so often. So if my server gets compromised, I'm going to lose all of my money. Whoopsie. So how do you store that key securely? But there are limits to how much security you can do and how secure your key can be. Sometimes you can also just mess up, because no matter how good of an engineer you are, you're a human. So what else can you do? Well, arbitrum, as a roll up, has this amazing thing called gas refunder.
00:41:09.390 - 00:42:00.990, Speaker A: I think that's what they call it. They actually ran into an issue a few some time back where it seemed like their sequencer was not sending batches into ethereum into l one. And the real reason that seemed to be the case, from what I remember, it seemed like the sequencer was running, didn't have enough funds to pay because what was happening was the sequencer has like a really small amount of eth. So even if the money gets lost, it's fine. It's really small amount, let's say like $10 or $20 or whatever, and then you have like a smart contract called gas refunder that actually stores all the other eth. Because smart contracts don't have keys, externally owned accounts, eoas have keys. So you can only take funds out of a smart contract by using certain dedicated functions.
00:42:00.990 - 00:42:32.460, Speaker A: Like you would literally have to write a smart contract logic that allows you to withdraw the funds. And managing that particular function that pays the money out is much more easier. Right. Like in solidity speak, this would be have one modifier like only owner and only let them call this function, and you can write hundreds of tests to make sure it's fine what was happening. What you can do is leave all your actual money there. And then the sequencer using its $20, which is, let's assume that's enough for one batch. It probably isn't, but let's assume it is.
00:42:32.460 - 00:43:27.054, Speaker A: It first calls the gas refunder, and then the gas refunder then posts the batch into layer one, roll up contract, and then after that transaction is done, the gas refunder then computes how much gas was used. This is super easy, using the gas left opcode in Ethereum. Like, you call gas left first before doing the transaction, like posting to layer one. And then you call gas left again once you've posted to l one, and you can figure out how much gas was used, and then you multiply it with what you expect would be the gas price, which is like, let's say congestion fee. You multiply both of them and then you get the total amount of money, like in ETh, that you've spent for the transaction. And that's what you can refund the sequencer with. So by the end of it, the sequencer again, once again is refunded with the money that they use.
00:43:27.054 - 00:44:28.738, Speaker A: So they probably again have like $19 or $20, whatever. And then you can have like a metric or a dashboard system, like old school web two style reporting, where if the sequencer is running really low, like way below, like, let's say $5, then you have like a sev one or a sev two alarm going off for an on call engineer. And all the on call engineer now has to do is just put some ETH into that smart contract into the sequencer's wallet, like a 1 minute job, right? Or maybe you could have some kind of a cron job, like a multi sig that periodically, every 30 days, just puts like $10 into the sequencer and $100 into the gas refunder or whatever kind of thing. A beautiful design in any trust in arbitrum Nova was that anyone could actually put money into the sequencer's wallet address. So let's say I really want my thing to go, and for whatever reason, the sequencer doesn't have enough money, I'll just put some right. And that's amazing. It's really nice.
00:44:28.738 - 00:45:33.202, Speaker A: I don't need to wait for off chain labs or whatever roll up company this is to fulfill it. And this was extra Nice in case of arbitrum Nova, because how do you compute the gas price on layer two network? There are like two aspects to it. One is just whatever you think is the gas price of Ethereum, which is like, it can be really high or really low really quickly. It's pretty much unpredictable because some random dude could create like a random rock nft, and everyone's going berserk about it because this is the dgen life we all live in. So one component is just like the amount of price that the sequencer has to pay on l one, but the other component cards the network's own congestion fee. So one of the things that arbitrum does is the sequencer, over enough time or over enough batches, tries to minimize the amount of extra money they have collected. So let's say they use like a prediction algorithm to assume that it'll take me $500 to post the next batch.
00:45:33.202 - 00:46:28.840, Speaker A: So I need to collect $500 worth of gas fees from my l two users, right? And then let's say the actual price of posting the transaction was only 300, so now they have 200 extra. So for the next batch they'll charge 200 lesser, which means if my company, who's using arbitrum Nova, wants really low gas fees for all my users, one really simple stupid hack I need to do is fool the sequencer, just like put $500 in their address, and now they'll think that, oh, I have overcharged my users massively. Shit, I feel bad. I'm going to undercharge all my users such that I eventually come down to my normal values, which is, again, let's say $20 or whatever, right? And to me this is like a super genius, super amazing design. Really good product too, right? Yeah, stop my rant there. I don't know how I reach.
00:46:30.830 - 00:46:41.020, Speaker B: Why would the sequencers care if people are paying a lot, right, and then they just push their prices down. Why would they care about that?
00:46:42.370 - 00:47:16.200, Speaker A: Well, because if people are paying a lot of money, then that's bad for the users. We never want to overcharge. Users like blockchains anywhere are expensive and it's really bad UX if users have to pay more than they need to. So the goal of a good sequencer should always be two things. One, well, the goal of any blockchain network is to have as cheap transactions as possible and to make it as quick as possible. That's why we have so many competitors of Ethereum in the world today, because Ethereum is not cheap to use and it's super slow as well.
00:47:18.650 - 00:47:33.200, Speaker B: Yeah, but everybody just clones that, right? So then you just have the saturation of everybody's the exact same, fast and cheap. But everybody just defaults back to Ethereum though. So there's got to be something.
00:47:33.810 - 00:48:03.160, Speaker A: Which is why it's interesting to have unique virtual machines like fuel or Aztec or Starquare, because they're at least trying something new to see if maybe that sticks. But there are non technical issues with doing something that's not EVM compatible, which is the fact that most of blockchain network somehow is EVM compatible. And that's the world most developers know the most about. It's much harder to get users to use it.
00:48:05.210 - 00:48:28.190, Speaker B: Yeah, if it's not compatible, then they have to learn this entire new language. The environment node operators have to learn the customizations to this, how to deploy it. It's just a whole new ecosystem. You have to learn. And even master Ethereum and the smart contracts and the nodes, all that stuff that takes ages.
00:48:29.490 - 00:48:44.050, Speaker A: And there's something like, for example, we can really compliment Solana in, which is like they are something that's not EVM compatible at all. You have your own wallets, your own rpcs, your own tools, and yet somehow they managed to gain a lot of users.
00:48:46.010 - 00:48:56.374, Speaker B: Yeah, this is true. I don't know why, it was all because of the NFT craze, I think, but the initial, it could be like.
00:48:56.412 - 00:49:27.278, Speaker A: How bull markets work. It could be because of airdrop, it could also be because of SBF. God bless that man. I was being sarcastic. It could be also because they just made a really good product. It could also be because they had a new virtual machine, they enabled new kinds of architectures that were just not possible on Ethereum. And maybe that's because, yeah, we all know what can work on Ethereum, but we also clearly know that whatever works today clearly isn't getting mass adoption.
00:49:27.278 - 00:49:58.778, Speaker A: So we need something different. And maybe different vms will let you finally experiment with what's different. Like what if you can finally have account abstraction inbuilt into the protocol in a non hacky way, like I love ERC four, three, seven, which is the current rage about how to get a contraction on EVM. But at the end of the day, it's kind of hacky. It adds gas. There are some issues with batching of transactions. There is some DOS vectors, attack vectors, which they have reduced by not allowing certain transactions to even happen.
00:49:58.778 - 00:50:19.202, Speaker A: Right? And eventually, if any EVM compatible machine gets enough traction, they're going to hit into the same execution limits that Ethereum has hit now. They'll probably hit the same state bloat limits too. So you're going to keep hitting the same problems. So that's kind of like insanity. You're doing the same thing and expect different things to come out of this time.
00:50:19.256 - 00:50:27.906, Speaker B: You know, it'd be super interesting if something like Aztec or ZKVM had account abstraction, because then you're combining we will, we are.
00:50:28.088 - 00:50:34.854, Speaker A: Yeah, that's one of the great things you get when you're building your own vm, you won't have any of these issues.
00:50:35.052 - 00:50:42.870, Speaker B: That's a very interesting kind of playing field because then you have private transactions, but then you also have the ability for someone else to execute on your behalf.
00:50:42.950 - 00:51:29.318, Speaker A: Yeah. You could also have like. So in the authentication world, you have a standard called Web Auth N, which is how Face ID and touch id and all these things actually work. If you are building your own network, you have the luxury to go like, hey, do I want my users to, instead of playing with these private public key stuff or even these random smart contract wallet things, how cool would it be if they could do a transaction just by doing a face id? And what do you need for that? You need to be compliant with web authentic standards, right? So if you're building your own vm from scratch, you have the luxury of making these decisions. Maybe this is the way you go. You go like, I think author N is what's limiting the adoption of crypto. I'm building my own blockchain.
00:51:29.318 - 00:52:14.040, Speaker A: I will make all my keys, my authentication schemes to be standardized with web Authent, and now anyone can use it with Face id or even touch id or even old school public private key cryptography or whatever new things that come in the world. In the security world, there's something new called Pass keys, which I'll admit is not something I've read up too deeply on, but I have a super high level understanding of maybe you can do that even. And then you can have like Google or Apple login for your private key, which the purists might find weird, but let's be real, the grandmas. My grandma would finally be able to use my work, which is something I would love. Finally. My mom can understand what I'm doing because she can use.
00:52:14.650 - 00:52:21.800, Speaker B: Yeah, yeah. As long as it's streamlined in a simple way, kind of just know credit cards you just tap on. Right?
00:52:22.410 - 00:52:41.162, Speaker A: Yeah. So, like, one of the reasons I did the Switch work in Aztec was because it's not just like these random privacy unlocks that you get, even though I'll admit they're cool. It's like you can think about fundamentally new things. They're just impossible in blockchains, and you might have a chance of hitting something that leads to mass adoption.
00:52:41.226 - 00:52:48.370, Speaker B: Yeah. I mean, try enough things, it happens. Right? So it's all a numbers game, trying to create your own lock.
00:52:49.110 - 00:53:15.610, Speaker A: Yeah. After Reddit, I had the luxury to say, hey, some of my work was used by literally millions of users and it was in crypto and I could understand the steps they took to have that mass adoption. But what if I go a level deeper? So going back to a really old conversation about how super senior engineers seem to know all of these parts and think really deeply, but if I go really deeper, but also use some of my mass adoption into building something that maybe will work.
00:53:15.680 - 00:53:25.262, Speaker B: So what is the main key that you got out of Reddit of building a mass adoption? I guess product, or at least getting a product to as many users as possible.
00:53:25.396 - 00:54:32.802, Speaker A: One of the things is, despite how much we as engineers in the blockchain space love saying that, we are working on the super hardcore, super cool blockchain thing and talk about smart contracts and all that, the end user doesn't care. And you have to minimize all the words and you have to minimize showing any of that, minimize bragging about the things that you're doing. A very braggy way of saying some of the things that you did is like I built a noncustodial wallet with meta transactions in build, which lets you claim blah, blah, and I've already lost you. Yeah, all the technical hardcore stuff that really excites all the engineers but will scare everyone else away. So I think what I really learned is there are two different crowds, and you want to decide which crowd to cater to. Do you want to cater to the mass adoption crowd or do you want to cater to the Djen crowd? Because both of them are really different people with different requirements and different marketing tactics even. Right.
00:54:32.802 - 00:54:59.830, Speaker A: So pick a side. Basically, most of defi is obviously on the DjEn side now. There's nothing wrong with it. It's cool, it's sexy, it's easy to make money. You can be as crazy or weird as you want, have like pancake swap, or have a duck in your UI that does ducky things like quack and have a coin called quack and do whatever. Or you can do like boring things that lead to mass adoption.
00:54:59.990 - 00:55:01.582, Speaker B: But pick a yes.
00:55:01.636 - 00:55:03.440, Speaker A: You can't do both at the same time.
00:55:03.890 - 00:55:14.650, Speaker B: Yeah. Okay, interesting. Let's say you created a startup, right? Now, what would be your go to strategy to getting mass adoption?
00:55:14.810 - 00:55:23.006, Speaker A: I think that depends. Personally, I wouldn't want to build a wallet product. I would probably want to build something at the app layer.
00:55:23.118 - 00:55:27.474, Speaker B: There must be a general set of rules though that you follow to get it.
00:55:27.512 - 00:55:54.030, Speaker A: Yeah, I mean, for the wallet side, it's quite easy, but it probably is not possible on the ethereum side in theorem world, and also on the wallet side, it's harder to make money or have a unique proposition that will let people stay. Right. But at the app layer it's much more easier. I don't have any fixed ideas. I think that's like the billion dollar question in crypto. Right? Like what app can you build that leads to mass adoption?
00:55:54.850 - 00:55:59.214, Speaker B: Not really like what app, but more of the techniques to get any product.
00:55:59.332 - 00:56:33.786, Speaker A: The techniques? Yeah. So I think an idea could even be, be custodial for mass adoption or really start flirting with the idea of some parts custodial, some parts noncustodial, which is to say that maybe the wallets or you don't store people's assets, but your smart contracts are heavily centralized so only you can call them. And this prevents a lot of chaos. Chaos in the sense that bots will not interact with you. There is lesser chances of mev that happens. Right. And a bunch of other things.
00:56:33.786 - 00:57:26.570, Speaker A: So that's one. The other one is like having minimal blockchain, like pure smart contract code and instead optimizing more on the non blockchain side of things. So you always have an off chain component, either it's a database or like a generic back end server logic and all of that. And really reasoning about how much you can push on the server side rather than the blockchain side because it's unpredictable and it's quite expensive and it's slow. So one of the things would be as simple as instead of always querying via infura on the blockchain, like what happened? Did this event happen or not? Let's say you just have a single website, so that's the only point of entry, that front end. And then you can just have a backend and rest API call, like old school stuff. And this way you have your own blockchain cache as a database.
00:57:26.570 - 00:57:44.910, Speaker A: And one of the great things this does is it prevents the number of calls, RPC calls you need to do that reduces your infura cost and is faster or more reliant sometimes. And in the background you can have a cron job that periodically sort of syncs your database with the network.
00:57:45.490 - 00:57:52.354, Speaker B: Yes. And really just like trying to make it as streamlined as possible. User experience best, easiest. Understand?
00:57:52.552 - 00:58:20.282, Speaker A: Yeah. I think the biggest thing would be like minimizing the amount of chaos that's possible in the system. I think that despite of how fun the chaos is for people, like for dgens like us, it's really bad for users when users realize that people are using blockchain to bet on hamster races. It's not a good look, which is, I think, something that happened during ECC, but it's super funny for us. Right? So again, like, cater to your market kind of thing.
00:58:20.336 - 00:58:22.318, Speaker B: Yeah, I mean, the hamsters were crazy, right?
00:58:22.404 - 00:58:24.640, Speaker A: Yeah, it was super funny. I won't lie to you.
00:58:28.530 - 00:58:53.878, Speaker B: But we have gone to an hour and I don't want to take too much of your time. I do want to thank you for jumping on finally getting to meet you as well. And it's been super interesting, man. I'm super keen to see how Aztec evolves and eventually the release of Aztec is going to be a very time, I think, so can't wait to see what happens in the future. But yeah, thank you so much for jumping on, man.
00:58:53.964 - 00:58:57.606, Speaker A: Yeah, thank you so much. This was super fun. And yeah, I'm also super excited for.
00:58:57.628 - 00:59:13.360, Speaker B: Aztec and for anyone else wanting to jump on the podcast or wanting to suggest someone to come on. Just dm me at scraping bits and I'll see what I can do. Otherwise. Thank you so much for jumping on and hopefully I'll catch you on another one later in the future.
00:59:14.290 - 00:59:15.998, Speaker A: Alia, see you around.
00:59:16.164 - 00:59:17.980, Speaker B: Thank you so much, Raul. Take care.
