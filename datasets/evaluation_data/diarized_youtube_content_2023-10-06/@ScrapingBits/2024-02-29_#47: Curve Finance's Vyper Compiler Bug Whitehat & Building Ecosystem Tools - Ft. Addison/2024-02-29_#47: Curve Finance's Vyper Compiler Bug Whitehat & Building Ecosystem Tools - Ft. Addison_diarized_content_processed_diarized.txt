00:00:00.570 - 00:00:21.818, Speaker A: Was like probably the most amount of adrenaline hoding ever while making the proof of concept. The second exploit was very hard. I was less convinced that somebody else would be able to figure it out. The entire situation could have been less bad had a bunch of auditing firms not started talking about what the exploit was on Twitter, because I've definitely pointed black hats to it and accelerated them figuring out issues scraping bits is brought.
00:00:21.834 - 00:00:51.962, Speaker B: To you by the following sponsors. Mev protocol maximum your eth staking value with me v exclusively on me v IO and composable execute any intent on any chain. Coming soon to Manchis app that is M-A-N-T-I-S-A-P gm gm everyone, my name is Tagachi, the host of scraping bits, and today I'm with Edison Spiegel. How's it going?
00:00:52.096 - 00:00:54.122, Speaker A: Pretty good. How are. Hello, everyone.
00:00:54.256 - 00:01:05.730, Speaker B: Yeah, not too bad. It's great to have you on. I just did one with Brock from flashbots back to back, once again. Starting the whole movement again. Just for the people that haven't heard of you before, or just don't know you, who are you?
00:01:05.800 - 00:01:31.238, Speaker A: Yeah, so, I'm Addison. I'm the founder and CEO of Thunderhead. We call ourselves ecosystem as a service. We build out liquid staking tokens and general ecosystem tooling for newer blockchains. Myself, I'm a longtime entrepreneur. I've been starting small side hustles since I was like eight years old, been programming since I was twelve, and I'm also a student. I'm 18 and I'm currently a freshman at MIT studying computation and cognition.
00:01:31.334 - 00:01:33.450, Speaker B: Oh, interesting. Why cognition?
00:01:34.110 - 00:02:06.146, Speaker A: Over my entire time in the crypto industry, I've obviously been able to observe how people react to economic incentives and how people with different kinds of backgrounds and different needs or priorities react differently to those. And I've always found that very fascinating. And so I'd like to explore that further. And it also extends beyond economic incentives and also into how different people react to different managerial practices, or how different people react to different kinds of products. I think learning more about how the brain works fundamentally is pretty informative for all the things I want to do.
00:02:06.168 - 00:02:10.200, Speaker B: Yeah, I'm pretty interested in stuff as well. So what do you really want to do in the future, then?
00:02:10.650 - 00:02:23.402, Speaker A: My longtime dream is to start and have like a series of several different kinds of companies. Starting companies and building new things is like, my favorite thing to do. And so my goal is to start companies, make them self sufficient, and then move on.
00:02:23.456 - 00:02:24.540, Speaker B: Start a new one.
00:02:25.070 - 00:02:32.838, Speaker A: Yeah, I don't really have any specific industries in mind. I just like building cool things that are impactful. So it's kind of industry agnostic.
00:02:32.934 - 00:02:42.202, Speaker B: Interesting. And so what did you do before you got into crypto then? You're an entrepreneurial guy and very interested in these things, so I imagine you did a whole bunch of tinkering and whatnot.
00:02:42.266 - 00:02:42.446, Speaker A: Yeah.
00:02:42.468 - 00:02:44.350, Speaker B: What did you do before crypto?
00:02:44.770 - 00:03:12.874, Speaker A: Yeah, so I was either 15 or 16 when I got into crypto. Before that, I was just doing machine learning search on my own, taking online courses, random stuff like that. Never did anything super substantive. Built an evolution simulator, like a cellular evolution simulator, which was pretty cool. Built a reinforcement learning tictactoe, which is kind of trivial, but it was cool at the time. Before that, I've just been like a longtime tinker. I had several somewhat failed entrepreneurial startups as well, and then I built several other software things before that.
00:03:12.874 - 00:03:14.102, Speaker A: That's what I was primarily.
00:03:14.246 - 00:03:25.120, Speaker B: And you mentioned ML, right. So this is a very hot topic, I think, especially in crypto and cybersecurity. So I'm wondering, why didn't you pursue ML further and just kind of stop there?
00:03:25.650 - 00:04:02.562, Speaker A: Yeah, it's actually really funny. My grandfather got me interested into machine learning from a very young age, so I was first exposed to it when I was in middle school. So I did lots of research into it and learning about it, and my interest for it kind of just naturally petered out as I was like 15 ish. And it's funny, I remember telling my parents once that I was upset that I wasn't five years older because I had already missed out on all of the machine learning improvements that were made. And obviously we know how that went, but, yeah, I don't know if that was a major factor. It kind of just something I lost interest for. I hadn't even done calculus at the time, so all of my understanding of neural networks was just intuitive.
00:04:02.562 - 00:04:08.202, Speaker A: And so I kind of reached a point where I needed to have a stronger math background to understand things, so I kind of just moved on.
00:04:08.256 - 00:04:35.906, Speaker B: Interesting. I started my ML journey as well, and getting into all the math stuff like linearge or calculus, probability and stat. It's pretty interesting. I think people don't really like math because they don't understand it, but once you start building an intuition for, it's really quite fun. The hard thing about it is applying it practically to ML or ZK. I think ML is way harder than ZK because you need money to host a server, and it's kind of a data problem. So you need all the data, and if you build anything.
00:04:35.906 - 00:05:09.422, Speaker B: It's kind of hard to compete against these giant teams unless you do something very niche. So, like, crypto, cyber live detection, or even, like, exploit generation, what pen testify is doing. But they build their own models, right? Like, all these people build their own models, and I think that's pretty cool. But obviously, it's pretty hard to get into that kind of expertise of years of experience of tinkering, because it's a data thing. You got to train it. But we're in the age where it's very interesting and it's going to be very revolutionary. I don't know how long it's going to take, but we're already seeing big movements for chat GBT, which isn't even that big relative to what's going to come.
00:05:09.422 - 00:05:16.320, Speaker B: Kind of like the early days. But I definitely think it's worth learning as well, especially the math. Math will never not be useful, I think.
00:05:16.690 - 00:05:29.142, Speaker A: Yeah, for sure. And it's like, funny going back and looking at various machine learning things I didn't understand back when I was researching it. Now that I have the math background for it, and it just such, like a mind blowing thing. But, yeah, once you get the intuition for the math, it becomes very.
00:05:29.196 - 00:05:44.794, Speaker B: Yeah, it's very fun. And for me, I had to just force myself to do it because I knew the rewards later would become way more fun. Once it starts clicking, it's kind of like learning a new language. If you're learning rust or mev. Damn, it's so hard. Until it clicks and you actually solve something. Get that first dopamine hit.
00:05:44.794 - 00:05:53.340, Speaker B: It's like a never ending cycle of, like, I want to keep going, but, yeah, you can get stuck in the theory for quite some time, become like, a pure academic and never apply it.
00:05:53.710 - 00:05:57.006, Speaker A: Yeah, for sure. I see a lot of people in that path while I've been.
00:05:57.028 - 00:06:12.290, Speaker B: Yeah, it's unfortunate. I think. Don't apply it. Like, imagine just doing math your whole life and then getting into AI. I think that would be pretty sick, but you got to do the practical stuff as well. What came next then, when you were in crypto, what were the next steps, and how's that progress? You did the curve discovery.
00:06:13.270 - 00:06:16.722, Speaker A: Yeah. So I started Thunderhead in 2021.
00:06:16.776 - 00:06:18.114, Speaker B: When you first got in.
00:06:18.312 - 00:07:05.582, Speaker A: Yes, when I first got in, that's like the first thing I ever did in the industry, and it was to service the pocket network ecosystem. So for those that aren't aware, Pocket network is a decentralized RPC network. So you can send an RPC request to pocket network rather than inferior for things like sending transactions or querying blockchain data, and rather than a centralized entity sending you the data, you have a decentralized network of nodes that does it. So we built out a staking as a service solution for them, primarily servicing institutional clients. We had like $70 million of pocket staked and had approximately 15% of the staked supply. Built a variety of different ecosystem tools for them. Built a block explorer, an RPC analytics tool to track the latency of various RPC providers.
00:07:05.582 - 00:07:20.322, Speaker A: And most significantly, we built something called lean Pocket in tandem with another community contributor. And ultimately it allowed you to run any amount of validators per full node, which ended up saving the network three to 5 million a month in infrastructure.
00:07:20.466 - 00:07:21.930, Speaker B: Yeah, that's insane.
00:07:22.430 - 00:07:29.340, Speaker A: Yeah, it was pretty crazy why that didn't even exist to begin with. But that was probably one of the most impactful things to happen.
00:07:29.710 - 00:08:00.178, Speaker B: And I think that the idea behind Thunderhead is really smart, because I remember I was working on hashgraph, which was another chain, but they didn't have any infrastructure. You couldn't use foundry, you couldn't fork the network to test. It wasn't like an ether scan, it was just a really shitty block explorer. You couldn't read anything or even look at contracts trying to implement some yield farming optimizers for the two protocols on it. It was just a horrible experience. I ended up not doing it at all, even though the opportunity was there. It was just way too hard, dev experience wise.
00:08:00.178 - 00:08:16.074, Speaker B: And something like Thunderhead is like the perfect solution where you're just building all the infrastructure and whatnot for these chains that are just like starting up or don't have the infra to surround them and really build the ecosystem, which eventually just die, I think so it was pretty good, actually.
00:08:16.272 - 00:08:39.806, Speaker A: Yeah, that's exactly the niche we like to fill. A lot of newer networks. The team likes to focus a lot on the core protocol and less so on kind of the surrounding ecosystem, whether that's block explorers or analytical tools. And so that's the role that we like to fill. And it also just bolsters the ecosystem as a whole. Having another party contributing, that's not the core team. And then we also contribute as well via liquid staking for pocket network.
00:08:39.806 - 00:09:09.574, Speaker A: We also launched a liquid staking token. I find liquid staking to be especially beneficial for newer networks, because most of these new networks that are coming online, they're primarily infrastructure networks, and they need to have a large amount of the supply staked in order to be economically secure and liquid staking basically makes that super easy for anybody who's a holder to contribute to the security of the network. And so, yeah, we had one of those for pocket network with 18 million assets staked. We're actually launching another one soon for chain flip, which is the next ecosystem that we're purchasing.
00:09:09.622 - 00:09:11.674, Speaker B: That's with a lido, right?
00:09:11.872 - 00:09:14.890, Speaker A: Yeah, we're effectively building a Lido model for.
00:09:14.960 - 00:09:32.626, Speaker B: Yes, it's pretty impressive. I remember my first year, I just built like an exchange and an NFT launch pad, and then I kind of got into MEv after that. But it seems like you really hit the nail on the head with finding an opportunity and capturing it. I think a lot of protocols would want the service, I think. Are you maintaining it as well or are you handing it over?
00:09:32.808 - 00:09:51.766, Speaker A: Yeah, it ultimately depends on what the product is. It really just depends. Sometimes it's something we build that's continued, like we continually improve upon and maintain. Other times the team will just pay us to build something and then once we build it, hand it off to them for maintenance. Obviously the liquid staking tokens, we continually work on that. And then did it start as just.
00:09:51.788 - 00:10:00.858, Speaker B: Like a passion project or did you just reach out to someone and say, hey, we're going to build this, and then they're like, okay, here, do it for us and we'll buy it off you or something like that?
00:10:01.024 - 00:10:13.454, Speaker A: Yeah. So it just started. I was just joining the pocket network and I just realized that there were so many different things that needed to be built, and I just started working on all those things. And then eventually the staking opportunity became pretty significant and so hired a team to help.
00:10:13.492 - 00:10:36.882, Speaker B: Yeah, it's super cool. And you guys are entirely self funded as well. Even more impressive. I think people that start off with just the wit and the want to do things will always come out on top because it's not money driven or anything, it's just the passion to do it. And if you have the passion, money just kind of follows as well. Eventually you get good, right? So if you're passionate about something, you're always going to do it and then do something good. People fund you, et cetera.
00:10:36.882 - 00:10:43.660, Speaker B: Now you have a team size of seven, so how do you really manage a team like that, especially at such a young age? I think it's something people don't really experience.
00:10:44.430 - 00:11:20.854, Speaker A: Yeah. Just back on the first thing. I think one of the key advantages of our company and culture as a whole is we always strive to create value for the ecosystem at hand first and then make money later. A lot of the things we've done have been like lost leaders or just things we kind of did to bolster the ecosystem, and then that indirectly comes back and be a network effect. And then as far as the team goes, management has definitely been my single point of most growth throughout this entire time. It's very difficult to go from not even working for someone to then managing several engineers. And so that's just something I was thrown into and had to figure it out all the way.
00:11:20.854 - 00:11:35.030, Speaker A: From barely being able to specify what exactly I want done and having major confusion between the developer and me, to now having a more robust management system with syncs and project management and specs and all of that stuff. It's been a lot of growth.
00:11:35.190 - 00:12:15.720, Speaker B: Yeah. I think the main downfall of any company is actually communication, because you can have the best developers in the world on the same team, but if you're not communicating and if someone's just slacking off, or someone builds something or someone else is building the exact same thing, it's just like, what's happening? It all kind of goes to shit. It's like if you have a team of superstars in a sport, but they don't know how to play together, it's like, what's the point of the superstars then? You would rather have a team, like an average team that can work well together. And engineering is a sport in that sense as well. In terms of a team game, sure you can do it by yourself, but it comes to a point where you need to upscale and have everyone working efficiently and communicating and all that stuff. So it is a very good skill to have.
00:12:16.330 - 00:12:42.622, Speaker A: Yeah, for sure. It's like sports teams have great players and a shitty coach. I've learned that in a lot of instances, poor performance and output is in a lot of instances a function of me, the manager, rather than the developer themselves. Because in a lot of instances it's like something I could have communicated something more clearly or thought something out to a deeper level, or researched the problem a little bit better. And that in some instances is like a much greater impact on productivity than something the developer could figure out themselves.
00:12:42.756 - 00:13:00.818, Speaker B: That makes sense. And there was another thing that I have experienced is pair programming. Some other teams do this as well. You pair people up like the entire team just pair programming, because then they're just kind of bouncing ideas together. And if someone messes up, there's someone to correct them and kind of like a tutor, except you're both the tutor.
00:13:00.994 - 00:13:15.418, Speaker A: Yeah, we don't have more than one person for a given role, so we've never tried that. I wanted to though, but it doesn't make sense for us to do. We have so many different projects that it's very rare that we have more than one person working on one.
00:13:15.584 - 00:13:23.900, Speaker B: That makes sense. So everyone's doing a project themselves for the company basically because you'd have enough staff, obviously. And these are not small projects as.
00:13:24.830 - 00:13:37.450, Speaker A: Yeah, well, like for example, like staked flip, there's multiple components to that you have like the Oracle, the smart contracts, the validators. One person does each of those things. So they kind of are working on the same project, but not the same.
00:13:37.620 - 00:13:46.706, Speaker B: When did you really find this curve exploit? This is one that was interesting because it was a compiler one that would have been there for a while. How long would that be in years, maybe months?
00:13:46.808 - 00:14:21.886, Speaker A: Yeah, I think it was there for the compiler issue was there for like two years. I've always been really interested in security. I've always found all of the hacks and all of the bugs and bug bounces that people have gotten to be very interesting. And so anytime there's been some sort of major hack or major bug bounty, I always reach into the exploit and try to understand how it works. And then anytime someone like Pecshield tweets about an exploit on Twitter, I always go look immediately to try to figure out what happened and to learn about it. And doing that actually ended up being very profitable for the curve thing because I was just on Twitter, I saw that the curve eth pool was exploited. I was like, oh wow, that's crazy.
00:14:21.886 - 00:15:02.038, Speaker A: I went and looked at it and keep in mind this exploit had already happened. So someone had already exploited the compiler bug and they had drained I think like $15 million or something. By the time I got to the pool to look at it and see what happened, there was 5000 eth left in it and like ten curve. And when I saw that I was really confused why that eth was still there. Because of stable swap invariance, when the asset values are significantly out of whack, it should mean that you should be able to swap a very small amount of one asset for a huge value of the other asset. And so when I tried to simulate a swap to test that out, it failed. And from doing a bunch of fuz testing for staked flip, I had worked a ton with curve contracts.
00:15:02.038 - 00:16:04.350, Speaker A: And so I knew that anytime that the balances were significantly disproportionate there would be some sort of rounding error that would cause it to just brick. And so I checked the internal balances of the pool to confirm that this was the case and the internal balances were, a, not aligned with how they actually were, and b, ridiculously out of line with reality. And so I read through the rest of the contract to figure out which functions would cause a, sync to the internal accounting to the actual balances. And turns out there is just one function called claim admin fees that would effectively calculate how much fees the pool has accrued, send that to the curve governance, and then also sync the internal accounting with the actual balances. And so I tried to simulate that call, and it failed. And so, from what I mentioned before with the rounding issue, I realized that you could just donate some amount of curve call claim admin fees, and then the pool would become unbricked, and you'd be able to swap for thousands of eth for a tiny amount of curve. So I made the proof of concept, donated 100,000 curve, claimed the admin fee, and then swapped to 200,000 curve, and you get three and a half thousand eth in return.
00:16:04.350 - 00:16:10.370, Speaker A: And keep in mind, 200,000 curve is 80 grand, and three and a half thousand ETH at the time was, like, just under 7 million.
00:16:10.520 - 00:16:11.570, Speaker B: Good swap.
00:16:11.990 - 00:16:40.970, Speaker A: Yeah, pretty good swap. I'd never made an actual exploit before. I had just learned about it, and so I didn't want to try to execute this myself, because that would likely lead to failure. So I tried to reach out to the curve team. I didn't know anyone on the curve team, so I just made a tweet on Twitter, leave someone from the curve team reach out to me. And then ten minutes later, I was in talks with one of their devs, explained the issue to them, made the proof of concept, showed them the proof of concept. Michael, the curve founder, ended up dming me to talk about it some more.
00:16:40.970 - 00:16:46.906, Speaker A: And then once that issue was confirmed, I got invited to the white hat group, where the story continued.
00:16:47.018 - 00:16:54.320, Speaker B: Very interesting sequence of events. And it got even more interesting as well. Once you're in the group chat, right? It went for a couple of days, actually, this entire process.
00:16:55.010 - 00:17:18.774, Speaker A: Yeah. So once I got into the group chat, I shared the exploit with other people. All their auditors were there as well, working on it, so I shared this with them. One of them converted it into a flash loan template, and then they actually inadvertently leaked the exploit to the pool, which is a definite no no, because it got picked up by a generalized front runner who just copied the payload, submitted a higher fee, and took the 7 million.
00:17:18.812 - 00:17:45.330, Speaker B: Yeah, I think a common thing with white hat, actually, at the moment is they don't know about mev or even private mempools like flashbots. And it's such an obvious thing where you literally just switch the RPC and send a private bundle or private transaction, but nobody knows about it. And it's a core thing about security and it just completely removes the front running aspect. So, yeah, pretty interesting. But I mean, getting front ran, like the first one got front ran, then you had to do another one. So it was actually two exploits.
00:17:46.070 - 00:18:10.134, Speaker A: Yeah, so I think they intended to use the private impulse. And there was a foundry environment misconfiguration where they weren't sure which RTC URL it was actually going to use. You have one in the script, one in the environment, and one in the foundry config. Like they weren't sure which one it used. That ended up getting front run by coffee baid. And I actually tweeted on Twitter that we got beat by 30 seconds or something like that. I forget what I said.
00:18:10.134 - 00:18:38.174, Speaker A: And we said this at the time because we didn't even know that we had gotten front run. And we found out that we had gotten front run 3 hours later when someone on Twitter tweeted that we had gotten front run, the other person I didn't even realize. But yeah, that exploit ended up leaving 700 e left in the pool. And then that was what we spent like the next five days trying to. The next five days, yeah, that was probably the hardest I've worked. Probably top three hardest times I worked in terms of like time and effort and e focus to recover.
00:18:38.222 - 00:19:06.022, Speaker B: Yeah, you don't really hear about people. I mean, it's like all the money is there and it's like a race that's a long time. Five days of constant anxiety of, can we get this money out before someone else does? Is something people would not experience. Nobody knows they hit it and then people know. But there's two exploits already. People must be looking for another one. And I think this was a time people mentioning the exploit before it was even completely finished.
00:19:06.022 - 00:19:08.758, Speaker B: So it was like a huge controversy on Twitter.
00:19:08.934 - 00:19:35.986, Speaker A: Yeah, the first one, I definitely felt that way because it was first exploit was more trivial. And so it was like probably the most amount of adrenaline ever coding ever while making the proof of concept. And the second exploit was very hard. I was less convinced that somebody else would be able to figure it out before we could. I think, as you said, the entire situation could have been significantly less bad had a bunch of auditing firms not started talking about what the exploit was on Twitter. Because that definitely pointed black hats to it and accelerated them figuring out.
00:19:36.088 - 00:19:52.890, Speaker B: And when you're developing this proof of concept, what was really going through your mind of how were you making the decisions to do one input over another or one function before another function? What were you really doing to heuristically decide these sequences and orders of inputs?
00:19:53.230 - 00:20:26.162, Speaker A: Yeah, so on the first one, there wasn't much you could have done differently. You had to donate some amount to get the claim admin fees to pass. And so I just tried a few values to get something that was reasonably small. And I'll never forget the feeling of running that test case and seeing, because when you have a proof of concept like the first line, it's like attacker balance before flash flow and balance before, and then like attacker balance after flash flow and balance after. And I'll never forget running that and seeing it increase by 3500 yeast. That was like a completely surreal moment. I was like, there's no way this is real because that's something I'd only imagined before being able to.
00:20:26.216 - 00:20:40.554, Speaker B: I feel like during that time, when you're faced with that amount of money at your fingertips, I'm sure the human instinct to go full greed kicks in. But then you have your ethics that you revert back to. I'm sure that would have happened to some degree, right?
00:20:40.752 - 00:21:39.594, Speaker A: Actually, really, it just doesn't make any sense to even try to actually steal money outside of a moral standpoint. The moral thing is probably the first thing I go to. But even if you look at it in terms solely of EV and disregard your moral standpoint, first of all, it's like a, you can either exploit the money and take the full amount or get a bug bounty. And in terms of a bug bounty is maybe, it's obviously not even close to the full amount, five or 10%. But when you get to that large of amount, your utility of having the entire exploit amount versus the bug bounty amount is not significantly different. And so when you justify the probability of getting caught exploiting it, which is extremely high, given that pretty much every single RPC is tracking ips, every block builder is tracking your ip, any chain analysis probably has broken tornado cache. There's no way to have on chain complete on chain privacy when you have governments and surveillance agencies after you, when you calculate all those factors, it just literally zero sense.
00:21:39.594 - 00:21:44.246, Speaker A: And then on top of that, you have the moral problems of stealing other people's money, which is just dumb.
00:21:44.278 - 00:22:19.686, Speaker B: Yeah, I'm sure these other people, when they see this large amount of money, it switches from like white hat to gray hat, or maybe they're just naturally black hat and they're just like, oh, sick, let's do it. But these people are very naive in doing the exploits. As you said, everybody's tracking it. You got governments and whatnot. So you actually have to be smarter than these people, which, good luck. You're formulating a massive plan and you know all the risks involved and what you really have to do, which is a lot of effort. But even then, you still have the anxiety of always looking over your back, not knowing whether your door is going to get kicked in, getting dragged to prison, or even like something maybe worse if you're in a different country.
00:22:19.686 - 00:22:29.660, Speaker B: But yeah, if you can do it once, you can do it again. Just keep doing those bug bounties. But, yeah, it's interesting that you got into cybersecurity, so why aren't you pursuing that?
00:22:30.190 - 00:22:56.386, Speaker A: Yeah, if I wasn't so busy with school and thunderhead, I would definitely be grinding bug bounties and competitive audits and solo audits just because that whole space right now is like, there's a ridiculous imbalance between amount of capital that wants to find bugs and amount of people who are competent enough to look for them. You see solo auditors making 100 month doing this, and then you see people like, finding eight figure bug bounties. And so if I had more time, that's like the next best thing I would be doing.
00:22:56.408 - 00:23:24.650, Speaker B: Oh, yeah, definitely. I think it's probably one of the most interesting fields. I wouldn't be doing anything different from automating cyber, but I just find it's like where all the power is and it's very difficult problems, so you never really get bored. And there's not a lot of people doing it. So it's very niche as well. And it's just agnostic to everything as well. Everything is bytecode and binary, so you can kind of switch between languages and different fields like web two, web3, eventually cyber, eventually AI.
00:23:24.650 - 00:23:44.850, Speaker B: When that comes into play as well, that'll be a new field like AI cyber. So super keen to see all that play. But you mentioned when you were first doing the proof of concepts, right? You had the admin fee claim, right? The admin earn before you even knew that you needed that. How did you know the very first step was this imbalance?
00:23:45.590 - 00:24:00.038, Speaker A: I mean, just like maybe from xy equals k intuition. Like I opened up the pool, I saw 30 curve and like 4000 eth, and just my intuition from swapping on uniswap told me that that's prime for a very profitable trade.
00:24:00.134 - 00:24:09.482, Speaker B: Okay, so it was more about other reserves. Correct. Is it not like rounding properly, et cetera, and then going from there, basically, yeah.
00:24:09.536 - 00:24:19.002, Speaker A: Well, just like effectively there's several thousand eth in the pool and like a few dozen curve. And so if you just calculate the spot price of that, you have one curve for several.
00:24:19.066 - 00:24:32.610, Speaker B: Okay, got you. And then the aim was to unbreak it. So you look for the functions that enable that. And there was only one function. And so you try and formulate a sequence that allows you to do that and then get back into that swap.
00:24:32.950 - 00:24:42.982, Speaker A: Yeah, pretty much like the claim admin fee basically allows the pool to become functional again. And then once the pool becomes functional again, you can swap some amount of curve to get.
00:24:43.036 - 00:24:47.174, Speaker B: Okay, got you. And how did you know how much to really donate as well?
00:24:47.372 - 00:24:48.854, Speaker A: I just tried a bunch of.
00:24:48.892 - 00:24:50.230, Speaker B: Okay, like fuzzing.
00:24:50.750 - 00:24:56.714, Speaker A: I basically just manually fuzzed it with mental binary search to figure out the lowest amount possible.
00:24:56.832 - 00:25:01.740, Speaker B: Okay, interesting, because it would have been, when you donate it, it switches the reserves up a bit, right?
00:25:02.110 - 00:25:17.522, Speaker A: Yeah, it increases the curve amount so it passes. My hypothesis was it wasn't passing before because it was too small. So there was some rounding that would happen, like some rounding that would happen to make it divide by zero. And so you just have to get it sufficiently large so that it doesn't round to zero.
00:25:17.576 - 00:25:26.100, Speaker B: And what was the original hack that caused all of this? It was like a reentrancy. Right. Because the Viper compiler wasn't like the reentrance feature they added wasn't. Correct.
00:25:26.790 - 00:26:18.834, Speaker A: Yeah. So the original exploit was, Viper has a feature called some function decorators called reentrant locks. Effectively what those do is when you call the function at the very beginning of a function, it sets the storage slot to one, and it only continues if the storage slot was originally set to zero. So that way if there's a reentrancy of the storage slot set to one, and the function will revert, because that would be causing a reentrancy. But what they did wrong was that in specific versions of Viper, the compiler reentrant lock used different storage slots, so you could effectively only block reentrancy for one specific function. And so cross function re entrances were possible. And so what the exploit was, you would add some liquidity to the pool, then you remove liquidity and then it would transfer you the eth prior to updating the d value of the pool, which is effectively kind of like it's analogous to k for uniswap v.
00:26:18.834 - 00:26:45.710, Speaker A: Two. And so it would transfer you the Eth before updating this d value. And so when it transfers you the eth, that calls a fallback function on your contract, which then allows you to call remove liquidity again. It was an exchange. So first you could call exchange and then you could perform a swap while you're like in the middle of a remove liquidity. And then once you perform the exchange, you add liquidity again, and then remove liquidity completes. And this cycle basically allows you to take out more money than you put in.
00:26:45.780 - 00:26:58.740, Speaker B: Interesting. And you mentioned post mortem research. So what was your strategy? To really get to understand everything once it already happened and then eventually dive deep into it? Okay, what else there? What can I do?
00:26:59.590 - 00:27:02.546, Speaker A: In what sense? Like after the exploit, you know, when.
00:27:02.568 - 00:27:37.440, Speaker B: People were tweeting on Twitter, you obviously were curious and went to investigate, but then you had to do research on what is possible. Why did this happen? What is the state now? And is there still exploits? I think a lot of people in general just use these transaction explorers and it kind of makes like a graph for you. And then you read other people's post mortems and then go figure it out because you have some context. But maybe it was just so rapid that you didn't have time to do that and so you had to do it manually, from scratch, basically. So yeah, what was your kind of strategy? Go to strategy to really understand it quickly.
00:27:38.050 - 00:28:15.350, Speaker A: Yeah. So curve v two math is very difficult to understand. And so the first exploit didn't really require any knowledge of v two math because you can kind of like black box all of that away and just think about it in terms of a mispriced pool that's unbricked and you need to a mispriced pool that's bricked. And in order to take advantage of the mispricing, you have to unbrick it. And that doesn't require Vg map. But the next exploit, I knew intuitively that it was still exploitable because there was several hundred feet left in the pool and a small amount of curve. And by the second previous exploit's logic, you should still be able to retrieve those funds.
00:28:15.350 - 00:29:00.566, Speaker A: Except this time the donation didn't work because you would have to donate several tens of millions of curve to donate instead to unbrick it, which is then not profitable. So I looked at the original curve, the original exploits on the curve, there was no post mortems or anything out at the time. So I just had to analyze it myself and figure out what happened. So I just opened it up in Falcon, and then saw this add liquidity, remove liquidity, and then reenter exchange add liquidity kind of pattern happening over and over again. And so I started another exploit template, kind of implementing this pattern, and then tried it a few times. And with the parameters that the original exploiter used were kind of naive. Like, had they done proper parameters, they could have drained the entire pool, not left any left.
00:29:00.566 - 00:29:40.866, Speaker A: But this time the parameters were naive, and so it didn't work for this smaller amount that was left in the pool. And so I just had to adjust these parameters to make it work. And this was like, that sole act was the focus of the five days that it took. And that was like us, several other white hats and the curve team all working on it, because it's very difficult to understand curve math by itself. And then when you're doing half of the curve math, and then restarting the curve math, and then finishing it after you've already done some other computation, it gets even more complicated. So in some sense, we just treated the math as like a black box, and kind of just tweaked parameters and understood how the different tweaks affected outputs, then tweaked the parameters accordingly.
00:29:40.978 - 00:29:46.978, Speaker B: And you eventually had to put in all that curve to get it to work again, which is when you flash loaned.
00:29:47.154 - 00:30:07.102, Speaker A: Yeah, so I forget the exact amounts. I think the flashlight amounts were like some amount of heath. I think it was a few hundred eth, and some few millions of perf were the flashland donations. So you effectively flash load donate, and then repeat this reentrancy cycle I mentioned earlier with custom parameters and then that.
00:30:07.156 - 00:30:22.642, Speaker B: Right, you have to basically redo the original hack, but with the extra step of the donation to reset it, basically. Okay, interesting. And you did it all manually? You didn't do any fuzzing to get the actual values to donate. Yeah.
00:30:22.696 - 00:31:31.542, Speaker A: So there was some other people in the group. We're working on making some simulations for it. The problem is, it's pretty hard to simulate, hard to fuzz, because the original parameters we inputted were on the order of ten to the 20, and the inputs that actually ended up being the ones we needed were on the order of ten to the three. And so maybe a fuzzer might not have been able to go in that wide range, and then there's so many different loops as well, that I think it would have just been feasible computationally for a fuzzer to just go through everything. Obviously, if we had more time and full understanding of the math, then we probably could have done it and would have been easier, but in our instance, it wasn't. I had thought of doing some sort of gradient descent, where each step is some set of parameters to input to this loop, and then you want to maximize the amount that you're pulling out. And it didn't end up working because the surface of this pool wasn't continuous, because if there were some parameters you could input that would withdraw, like a super large amount of funds, but then it would brick the pool again, and so the next withdrawal wouldn't have been able to be successful.
00:31:31.606 - 00:32:14.866, Speaker B: Yeah, I think the thing with the math is if you put in one value, it kind of changes everything, and you have to be able to determine the relationship between that input value and the math behind it. So like the multiply, et cetera, like divide all this stuff. And I think that's the hard part, because if you change it, all the ranges change, and then maybe conditionals later on no longer work. And I think that's why the fuzzing is hard in general. So it's like a problem of what specific ranges do. You need to be able to bypass the conditionals later on in the function to be able to obviously take out all the money. But, yeah, you have to figure that out somehow.
00:32:14.866 - 00:32:29.500, Speaker B: And you guys basically just like brute forced it in some way. And then what would you say was the feedback loop in this kind of brute forcing you guys did to really get to the point of deducting it by 17 powers, right?
00:32:30.190 - 00:33:17.846, Speaker A: Yeah, it was basically just like trying random numbers and seeing what happened. And ultimately I got it kind of close to where I drained the pool within 70 e of being profitable. And then Robert from Autosec tweaked the parameters even further and got it to like 30 eth of profitability. And ultimately he realized that kind of abstracting all the curve math away, that this operation allows you to inflate the amount of. In a way, he figured out what this loop is doing to the pool rather than how it does it. And what it did is increased the pool's perceived balance of curve so that it put the ETH at a very significant discount, even though there was very little curve in the pool. So he did this, he kind of figured out that pattern.
00:33:17.846 - 00:33:35.070, Speaker A: And then after that, I realized that this kind of effect happens regardless of how much eth you're adding to the pool. And so that's why we decreased the amount of ETh to add from ten to the 20 to ten to the three, just to be the bare minimum for this reentrancy to happen, and then that ended up.
00:33:35.140 - 00:33:39.410, Speaker B: So you're trying to find the minimum amount to get to basically pass the conditional.
00:33:40.470 - 00:33:48.706, Speaker A: You want to add as little funds to the pool as possible and take out as many as possible while preserving that the pool works.
00:33:48.808 - 00:33:55.990, Speaker B: Yeah. You guys could have just started at zero and then went up. Right. So why did you start so high up initially?
00:33:56.970 - 00:33:59.318, Speaker A: Just because that's what the original exploit.
00:33:59.414 - 00:34:00.300, Speaker B: Okay. Right.
00:34:01.070 - 00:34:11.610, Speaker A: And so we didn't really fully understand how it worked. And so, yeah, we just started. And it's like, intuitively, it's kind of weird that it did work with such a low amount.
00:34:11.680 - 00:34:23.230, Speaker B: That means just the original hacker just had a very bad input. Then why do it so hard if you could do it very small, I mean, so high instead of much smaller, to just trigger the reentrancy initially.
00:34:23.890 - 00:34:29.282, Speaker A: Yeah, I think the attacker. So a, the attacker was pretty sloppy. They submitted into the public.
00:34:29.416 - 00:34:32.500, Speaker B: Most people do, though, unless they actually know what they're doing.
00:34:33.350 - 00:34:48.860, Speaker A: Yeah. So I think this person maybe just stumbled across upon this and found something that drained some money and then submitted it. The parameters weren't sophisticated. And then also not using private RPC is pretty unsophisticated as well.
00:34:49.390 - 00:35:24.674, Speaker B: Yeah. I wonder about the hackers that actually use private mempools and plan for this in advance. I feel like a majority of them is more just stumble across it and then like, oh, my God, the adrenaline rush. And then they're trying to do it as quick as possible so no one else gets it because I think it might be like a timer in their mind before someone picks it up. And that's probably why they don't optimize it as much or even think about the consequences and whatnot. So I think that happened with the index finance guy. He got caught and someone made a whole video on him.
00:35:24.872 - 00:35:47.402, Speaker A: Yeah, that guy was first. He was like talking to the team. He was asking the actual team questions about the math to understand how he could exploit it, then exploits it and makes a Twitter account talking about himself and how he's like a math person or whatever. And so I think some combination of those two factors as hell you got. Yeah, it doesn't make sense.
00:35:47.456 - 00:35:51.310, Speaker B: If you're going to hack something, why talk about it publicly?
00:35:52.130 - 00:36:02.346, Speaker A: Yeah. Most hackers seem to be pretty weirdly dumb, but in some instances, that's good, because then it means more funds can be recovered.
00:36:02.378 - 00:36:24.738, Speaker B: Yeah, of course. It's just kind of weird, though, the egotistical. And I think it's always the young people as well. I've only seen a few people in their thirty s. I remember seeing one guy in his 30s get picked up, but he was like, he had a very impressive resume or history. He was like at AwS and Google. But I think majority of the hackers are kind of just teenagers.
00:36:24.834 - 00:36:31.606, Speaker A: Unfortunately, the boiler hacker was like 20 or something. He had literally no idea what he was.
00:36:31.628 - 00:36:34.406, Speaker B: The repercussions, like, okay, now I'm in prison.
00:36:34.598 - 00:36:37.930, Speaker A: Yeah. Just makes no sense. It's very bizarre.
00:36:38.270 - 00:37:07.240, Speaker B: That's interesting. Yeah. Do you think you could actually automate this to a point? Like if you were to automate this entire hack, what would you do? Theoretically, to first be able to identify that there's something here, there's a trigger, maybe the trigger would be like, oh, this insane exchange rate of eth would be the trigger. Right. But then you have to figure out how would you get that? And you've already done it in your mind, so I guess, how would you turn that into a program?
00:37:08.410 - 00:37:10.198, Speaker A: Is this alpha for your security?
00:37:10.284 - 00:37:10.920, Speaker B: No.
00:37:12.090 - 00:37:41.422, Speaker A: Yeah, essentially, if I had to automate it, I don't know, I think a bot wouldn't have been able to kind of maybe come up with the exploit originally. But maybe if you told a bot this is a possible avenue for an exploit, help me produce, help me figure out how to save the money faster. That possibly might be an avenue, but I doubt there's like a generalized thing you can look, I mean, maybe it was like trivial things like, oh, like fuzz reentrancy on all these contracts to see if you can, but maybe that's pretty hard.
00:37:41.556 - 00:38:45.150, Speaker B: Yeah, I think the initial ability to withdraw because it's not just a withdrawal, it's a swap. That's the thing. It's not like there's a strict withdrawal function, deposit function, it's more of an exchange that was vulnerable instead. So it was just a crazy exchange rate, which was ultimately the hack. It'd be interesting, I think you would have to somehow find out, recognize that the exchange rate is ridiculous, but then figure out the sequence to, well, it was also bricked, which is an interesting thing. So it wasn't like, oh, you have to manipulate it in a way, like oracle manipulation, but it was more of like unbricking a system to then be able to use it, which then when you get into the math stuff, it was an input of a number, and you're trying to find how can I get the minimal amount? But as you said, you guys just randomly brute forced it. So maybe there was another way of systematically finding out the minimum amount or the relationship between the values and what the input was versus how it interacted with all the other variables.
00:38:45.150 - 00:39:00.774, Speaker B: In terms of math, you can think of people, I think the initial instinctive solution to that would be formal verification, but that wouldn't give you the optimal or minimal amount, though. That's the only issue. They'll just give you a random one that solves it or doesn't solve.
00:39:00.822 - 00:39:17.850, Speaker A: Yeah, I mean, you could, given enough time, construct a proof for, given certain full state, like the optimal parameters to use to take the most amount possible. But that requires fully understanding the map, which wasn't really feasible.
00:39:18.010 - 00:39:59.818, Speaker B: Yeah, and I think this was quite a simple exploit actually, as well, because it didn't utilize multiple contracts, like cross contracts that weren't really related in any way. It was just like all within the same protocol, which is great for reducing complexity. The ones that are very interesting are the ones that interact from protocol a and protocol b. They have this kind of relationship inherently. And then you have to kind of formulate different functions and different sequences to get to an unintended state. Because human error, there's always something, right? I mean, this thing was two years old, so imagine what else is out there. But, yeah, man, I'm super excited to see how it all plays out for you, hopefully into the cybersecurity space, man.
00:39:59.818 - 00:40:22.914, Speaker B: I think you have a bright future there, especially finding this so early and being interested in the post mortems as well, and diving deep into that. I'm personally trying to do that right now. I find it kind of difficult, mainly because I've never done it before, but I'll eventually get there. You could even try live streaming post mortem stuff as well. That's what I think I'm going to try and do, just to kind of share it. But it's interesting, though.
00:40:22.952 - 00:40:27.234, Speaker A: Yeah, I saw you tweet that. I think that'd be interesting to watch.
00:40:27.272 - 00:41:26.294, Speaker B: And pickle finance one right now. I find that one probably one of the hardest or most complex ones out there. And I think going from the very complex ones just makes the other ones very simple and easy to recognize or do. And if you get the pinnacle of hacking in web free, you should be able to do the easy ones. But, yeah, it's very important to understand stuff at its very lowest level, in my opinion, because then everything else just becomes much simpler, because a lot of people with the post mortems now are just actually, all of them really are really just explaining what happened, but they never explain why did the hacker choose to do this function over the norm, why did it divert. Why did he divert. Divert into another sequence? What made him think about going into this other sequence rather than going like a normal execution path? It must be a trigger that these people think about, right? So that's my kind of point of view.
00:41:26.294 - 00:41:47.742, Speaker B: And if you want to get good at it, why not study the actual ones that happen, that take hundreds of millions? Tens of millions. So you got all the source material right there. You just got to put in the work. Yeah, man, it's been great talking to you, Addison. And I think you've got a bright future ahead of you. Just starting MIT and running funderhead. It's going quite well, and I'm sure you'll get into cyber later down the road.
00:41:47.742 - 00:41:51.920, Speaker B: Hopefully, you'll get pilled in and do it full time.
00:41:52.450 - 00:41:54.426, Speaker A: Yeah, that's something I've been ever wanting.
00:41:54.458 - 00:41:59.040, Speaker B: To do more in, like, didn't curve off you a job after that.
00:41:59.490 - 00:42:03.406, Speaker A: I did not have the ability to take that on and do it as well as I'd like.
00:42:03.428 - 00:42:09.350, Speaker B: Yeah, maybe down the road. But, man, it's been a pleasure talking to you, and I really hope for the best in your journey.
00:42:09.770 - 00:42:12.614, Speaker A: Thank you very much for having me on. Looking forward to staying in.
00:42:12.652 - 00:42:23.460, Speaker B: Of course, yeah, we'll definitely have a chat later down the road as well. See how you all progress. Do a little life update. But until then, take care, and thanks for jumping on. Yeah.
