00:00:00.250 - 00:00:23.230, Speaker A: Crazy things can happen as the result of fulfillments. There are ether transfer hooks, this like seaport being inflexible around token mints, or just wanting to do things other than move tokens from a to b. And this limitation around how much protection you could get with the zone or how expressive you could be with the zone. Those are the two big takeaways that we had when we went on to design Cport.
00:00:23.650 - 00:01:03.966, Speaker B: Scraping bits is built to you by the following sponsors. MeV protocol maximize your eth staking value with me V exclusively on MeV IO and composable execute any intent on any chain coming soon to mantis app. That's mantisa and fastline labs, the only MEV and intent centric team that has a daily deodorant application rate of over 68%. GMGM everyone, my name is Tagarchi, the host of scraping bits. Today I'm with emo Eve. How's it going, friend?
00:01:04.068 - 00:01:08.250, Speaker A: Gm going not too bad. Can't complain. GM.
00:01:08.330 - 00:01:09.150, Speaker B: GM.
00:01:09.730 - 00:01:15.330, Speaker A: I got to be careful saying that to the normies in my life because I kind of greet everyone like that at work or whatever.
00:01:15.400 - 00:01:16.354, Speaker B: Oh really?
00:01:16.552 - 00:01:21.480, Speaker A: And so I probably have said it to my normal friends and they have no idea what I'm saying.
00:01:22.330 - 00:01:27.798, Speaker B: What's a GM? Just in context for the people that don't know who you are, who are you and what do you do?
00:01:27.884 - 00:02:00.834, Speaker A: I am Emo James. Either's fine if you ever meet me, but I don't look like Mike punk or whatever my current PFP is. Lately I've been wearing a lot of hawaiian shirts, so I don't know if that's really the emo vibe. I am a protocol engineer at OpenSea. I work on lots of fun, smart contract stuff, big one being seaport and various seaport periphery. Been at OpenSEa for coming up on two years in a month or two, but doing full time smart contract stuff since seaport push like a year and a third ago or so.
00:02:00.952 - 00:02:06.690, Speaker B: Yeah, gotcha. And Seaport is the decentralized version of the OpenSea, really, isn't it?
00:02:06.760 - 00:02:23.450, Speaker A: Kind of. I have a lot of hot takes about seaport. We're a marketplace. It's our marketplace protocol. I think it's a lot more than a marketplace, especially because it's very unoppinionated in about how its orders work. Everyone's big on intents these days, so it could be an intent protocol if that's what you want.
00:02:23.520 - 00:02:31.242, Speaker B: Got you. Yeah. And just before we go into this rabbit hole, where did you start and how did you get to the point of where you are now at seaport. Yeah.
00:02:31.296 - 00:02:56.498, Speaker A: Crypto has always been in the periphery for me. I had the friend in high school who know using Silk Road, he's like, you got to get bitcoin, man, and buy these illicit substances. And I was like, yeah, I'm good, man. That sounds fun for you, but I'm okay. It was fairly new. I don't know when Silk road spun up relative to bitcoin, but he was very enthusiastic about it. It was like sophomore year of high school, and he was like, you got to get a hardware wallet, man.
00:02:56.498 - 00:03:09.298, Speaker A: I'm like, what are you talking about? My brother was actually really into it, too, which I didn't realize until later because we never talked about it. But he was mining bitcoin before there were pools even. It's just solo gpu miners.
00:03:09.394 - 00:03:11.898, Speaker B: You didn't notice all the little miners in his room.
00:03:12.064 - 00:03:37.090, Speaker A: He kept his door shut most of the time, so I guess not. But yeah, he did not hoddle, as they say. So he had some in Mount Gox, but you know where that went. So, yeah, it's always been on the periphery. It's always been something I'm interested in. But it didn't really click for me until nfts. I guess that was when it went from being like, oh, this is interesting, to being like, oh, this can have a use case.
00:03:37.090 - 00:04:11.334, Speaker A: This idea of both decentralized permissionless currency and decentralized, permissionless things to buy with our currency started to make sense, especially in a digital world where we buy all sorts of digital things and there's a lot of permission centralized infrastructure that is kind of rough cutting out the middleman. So when that started taking off, interested in places like Opensea. My friend was looking for a job at the time, so I was like, dude, apply to Opensea. So he actually got the job because I told him to apply, and then like six months later he referred me and joined.
00:04:11.462 - 00:04:13.066, Speaker B: Oh, okay. Interesting.
00:04:13.168 - 00:04:17.450, Speaker A: Yeah, so it's kind of circular. We still work together. Shout out Alexander.
00:04:17.530 - 00:04:18.554, Speaker B: Shout out Alexander.
00:04:18.602 - 00:04:24.474, Speaker A: We've known each other since, he says fourth grade. I think it was like 6th grade. So a very long time. A very long time.
00:04:24.532 - 00:04:27.060, Speaker B: And were you doing like software before all this stuff?
00:04:27.430 - 00:04:59.930, Speaker A: Yeah, I was a software engineer at Pandora, actually, the music Internet radio service. That was very fun. It was not terribly challenging or so you know, I was spending all my time learning about solidity and smart contracts and stuff. And so I was like, maybe I should consider this as my job. And so made the jump and I work a lot harder now, which is good and bad. It's good to be stimulated by your work and not totally bored every day. But I do miss waking up at ten, starting work at eleven, being done by three.
00:04:59.930 - 00:05:01.180, Speaker A: That was very nice.
00:05:01.550 - 00:05:04.426, Speaker B: What was the onboarding like at Opensea?
00:05:04.538 - 00:05:45.450, Speaker A: So I joined as a totally different role. I joined as a partner engineer. It's many things, some of which glorified customer support. My idea joining was that I'm still learning about this space. I want to see what the creators are doing, what builders are building, and learn enough about it where I can have opinions about it and help people and help Opensea adapt and serve these people. And maybe down the line I'll pick up solidity to the point where I'm competent and then go on and maybe after a year I'll leave Opensea so I can go become a real smart contract developer. Because at the time there weren't really smart contract developers at Openc like Alex and Devin and a couple of folks on the team.
00:05:45.450 - 00:06:08.046, Speaker A: They packed together some smart contracts for really early stuff, the initial, somewhat controversial shared storefront nfTs. But it wasn't something that they were fully invested in at the time just because they were super small. Beginning of 2021, they were seven people. When my friend joined, he was employee like twelve. And when I joined, I was like 40 ish.
00:06:08.158 - 00:06:10.050, Speaker B: Oh, yeah, massive. Yeah.
00:06:10.120 - 00:06:35.654, Speaker A: Scaled very quickly. A lot of growing pains. So yeah, that was my plan. Maybe I'll get to a point where I can go be a real solidity, Dev. But eventually it was me and Karthik. We were both partner engineers, which is very funny because it's a very weird, you know, we cared a lot about what people were building and we tried very hard to adapt to get opensea to accommodate what people were building too. I think I implemented the on chain metadata pipeline.
00:06:35.654 - 00:06:53.602, Speaker A: Stuff that's pretty know supporting on chain data. Uris. Very cool if it doesn't work. I'm sorry, I haven't touched that code in a while. But yeah, Karthik at slope, he's a manifold now, head of their engineering. He's incredible. So we were in a good position to understand what was going on at the blockchain level and what people were building.
00:06:53.602 - 00:07:34.814, Speaker A: And so we kind of transitioned away from partner engineering to web three ecosystem engineering. And then after we acquired Dharma and zero age, hatched this maniacal plan to make a new marketplace protocol, our team kind of got folded into this new protocol team. And by that point I had done some smart contracts for partners or helped people integrate with OpeNC at the smart contract level, I was doing some smart contract stuff. But then when push came to shove with Cport V one, V 1.1, I was big into foundry and zero age was very excited about foundry and fuz testing. So I built out the whole foundry test suite for Cport, which was a lot of fun.
00:07:35.012 - 00:07:39.130, Speaker B: And what does that entail? Like that custom suite for Cport.
00:07:39.210 - 00:08:16.394, Speaker A: So it entailed a lot of figuring out what the hell was going on. The reason I was able to pick up on the low level of solidity or just the EVM in general really is probably just getting thrust headfirst into that. Writing tests for code that is brand new and no one really understands aside from this mad genius, is very difficult. So living in the foundry debugger for a few weeks, figuring out why I can't fill this order, like, is it a bug or is it. It was always just me not knowing what I was doing. But foundry debugger, excellent way to learn the really low level of the EVN, see what's actually happening when you compile your solidity code. Foundry was also pretty new at the time.
00:08:16.394 - 00:08:39.940, Speaker A: This is like April, May, and I think it launched December, so it's four or five months old. We were definitely the biggest project to do both hard hat and foundry side by side. It was very cool that the foundry folks, paradigm folks liked it. They might still link to it as an example of like foundry hard hat living side by side. It was very cool, it was very fun. Lot of stack too deep issues.
00:08:40.390 - 00:08:41.234, Speaker B: That's not too bad.
00:08:41.272 - 00:08:52.120, Speaker A: Figured out how to deal with eventually. Yeah, the first couple of weeks was like, oh my God, what am I doing? Am I going to let everybody down? Didn't pan out that way.
00:08:52.570 - 00:09:34.526, Speaker B: Yeah, I feel the same way. I never really work in teams. And when I go into teams I'm like, well, for me, I just work so much more than what I'm meant to because I feel this obligation of if I don't produce ton of results, I'm going to feel bad. So it makes me work more than what I'm actually meant to, and then I don't know, that's bad in itself in some ways. I guess there's also benefits in that. If I do work for myself, then I'm obsessing over work, producing results for myself. But working in such a massive team and having such a critical role, how do you really process that and lead in that sense? You may not be a lead, for example, but you still are contributing a lot, right? Like the work you do, masses.
00:09:34.526 - 00:09:52.746, Speaker B: It's not like if you're in Google and you don't do work, it doesn't really matter because there's so many people doing it. But since it is a very core thing, what's the mentality that you bring working in such massive teams? What does that really feel like? Because I think a lot of people don't even do that. I personally haven't worked in a massive team, so I don't even know what it's like.
00:09:52.848 - 00:10:26.898, Speaker A: Yeah. So our core protocol ecosystem team, I guess it is kind of a big team by corporate standards. Question mark. There's like ten ish of us, but we're pretty spread out in what we handle because we're sort of the blockchain level experts at the company. And so if trusted Safety is trying to investigate spam or mitigate spam or like gaming phishing stuff, they'll pull one or two of us away. If we need some periphery like e collector smart contract wallet, we'll do that too. So we're kind of disjointed, but we are kind of a big team.
00:10:26.898 - 00:11:08.594, Speaker A: So we are kind of like very neatly siloed, which is nice. It's buffered around us, but we work with a lot of other teams and I think starting to realize that people really value our input on things and so we can steer discussions if we want to. That's definitely a big change coming from a big company like Pandora, where if I wanted to learn something, it was even hard to get put on a project. I could learn something new rather than do something over and over, normal and mundane and expected of me. Yeah. And so just having the confidence to speak up and advocate for things was a change because before it's like it doesn't really matter what I think, but now it kind of does, which is kind of nice. But also there's responsibility there.
00:11:08.594 - 00:11:44.862, Speaker A: I don't want to impede my coworkers on other teams where if I'm like, hey, I think this product idea is not aligned with the space. Or maybe I think we should do this in a better way or these comms are really reflect us. That's not my job. I'm a protocol engineer. I respect my coworkers, but it's hard to know when you should stay in your lane or really advocate for stuff. But I think we've gotten to a point where folks, we've been right about enough stuff or excited about enough cool things far enough in advance, where it's easier to advocate for cool stuff, which is exciting, for sure.
00:11:44.916 - 00:12:09.346, Speaker B: Yeah. And obviously when you're in these discussions with other teams and trying to do integrations and whatnot and just discussing ideas, what does it take to really build a large scale protocol? First of all, that can scale, but also is secure and knowing what features to add and why you should add them, I guess what's the whole process of going from nothing to something in such a large architecture?
00:12:09.458 - 00:12:48.498, Speaker A: So the initial seaport design was all zero edge mad scientist that he is. There was no protocol team at that point. You was working with him pretty much. The Dharma acquisition was a pretty good business move, I guess. So he just emerged from the shadows one day with this fully fleshed idea about Speedport and the rough implementation. And it was really well designed just from the get go. It's totally designed to be agnostic about whatever it is that you're doing.
00:12:48.498 - 00:13:28.042, Speaker A: It's totally unknown, it's permissionless. Anyone can use it for anything. And that's totally by design. It's built in such a way that's supposed to be like mev friendly, searcher friendly, because you can do all kinds of crazy things with orders. Like you can fulfill multiple different orders and you can match the, we call them offer and consideration items for various reasons. You can match these items across orders and use multiple items from different orders to fulfill requirements for other orders. And you can do that atomically without yourself having to offer anything and then take any leftover money that's on the table.
00:13:28.042 - 00:13:52.566, Speaker A: After doing really centered around flexible fulfillments, gas efficient fulfillments, you can specify exactly which tokens go where, in what order, which is really cool, just super well thought out and designed. So that was the v one 1.1 thing. Working with it. There's this concept of zones. Zones are sort of like an extra security feature in seaport. Over time we built.
00:13:52.566 - 00:14:45.714, Speaker A: So I was also the design lead for CDrop, which is like our primary sale offering v one of Cdrop. Zerich and I tried to figure out how to get it to work with the first version of Seaport and we realized that it wasn't flexible enough to do it without getting really ugly and like how you would have to act together a token contract that worked with Seaport in a gas efficient ERC 721 A. The whole point is that you mint a bunch and then you get basically a bunch of tokens for the gas cost of one token, whereas seaport transfers individual tokens. So it wasn't going to work in that way. That was one limitation we found a few months after launch. Another thing is, with zones, this security concept, they're kind of like on orders to see if they're still valid. Working with that identified an issue we may have run in we were maybe going to run into with a partner.
00:14:45.714 - 00:16:05.298, Speaker A: And I started designing a zone around it, and realized eventually that the way seaport was set up wasn't friendly to actually doing expressive. The takeaway from zones is like the intent mechanism of Cport, where you say a zone can do anything you want, it can act on chain state, it can read any state or whatever. So if you say, I want the outcome of this order to be this chain state, that's what a zone can do. We realized there were some limitations there, because they all executed before the actual fulfillments happen. And so crazy things can happen as the result of fulfillments. There are ether transfer hooks, there are ERC 1155 transfer hooks that can do things and change state in a way that might not satisfy the requirements of the zone. And so those two big takeaways, this seaport being inflexible around token mints, or just wanting to do things other than move tokens from a to b, and this limitation around how much protection you could get with the zone, or how expressive you could be with the zone, those are the two big takeaways that we used, or that we had when we went on to design support 1.2,
00:16:05.298 - 00:16:10.580, Speaker A: which eventually became 1.5. Because of a couple issues.
00:16:12.710 - 00:17:24.934, Speaker B: I think the consideration of MeV is very important because that's kind of how majority of the volume is, right? There's a lot of volume for MeV, and also the aspect of decent. If you want something to run automatically on chain, fully on chain, you would need another actor to really be incentivized to trigger something, to update a state, for example, I think a lot of people miss out on this opportunity because that's the whole premise of decentralization, is incentivizing each other to really do something. And if you're consciously thinking of this, then you can really run something fully automatic on chain, because there's always going to be some incentive, right? And another thing, of course, is thinking in terms of security. A lot of developers do not think about the security of their protocol or the possibilities of what can happen. For example, when you're talking about the zones, obviously it's not in the right order, and that's a massive flaw in that regard. It could potentially bring in, like, reengency. And when someone's developing, they're not really thinking of all these potential attack vectors.
00:17:24.934 - 00:18:11.322, Speaker B: They're not threat modeling, they just want an mvp, right? Something that can actually work. And so what we see more often than not is someone creates dow some on chain project, and then they don't consider the security implications. And then they get hacked and there goes, let's see, twenty K or whatever, because they just started and then they can't actually do anything because to pursue that doesn't make sense. They have a net negative, right? And then they have to restart. And then eventually they get into security and then they get to a point where they realize the importance of it and actually build a protocol in order to prevent all that. You got to think of that mindset, but without the experience, you can't really think of that. So obviously that goes into the grand architecture of something.
00:18:11.322 - 00:18:28.606, Speaker B: And especially if you're building something massive, then there's a lot to consider. So I guess comes the question of how do you actually test for all these edge cases and coverage, branch coverage, et cetera. How do you make sure you're doing it as efficiently as possible?
00:18:28.788 - 00:19:19.002, Speaker A: Yeah, so that's actually kind of an interesting question, especially with regards to Cport. So in this Cport repository, there's actually two versions of CporT. There's the actual version that's deployed to the chain, and then there's a reference version which doesn't use any assembly at. It's actually, it was very hard for Ben and our team to do certain things that Seaport does without using any assembly. But I guess part of the original reason was, obviously we want a version that humans, mere mortals, can read, that aren't zero age or Dylan helped out a lot with seaport as well. Some really awesome, very low level stuff from him. And the other reason is that I guess, okay, this is kind of embarrassing, but I legitimately do not know how to use hard hat.
00:19:19.002 - 00:20:15.362, Speaker A: I only use foundry. I guess the hard hat coverage can't do assembly at all, or at least it couldn't at the time. And so our coverage reporting for v one 1.1 was all on this reference branch and part of the fuz suite that I wrote. It was a differential fuzz test suite, which meant that it runs the same exact test against both the optimized version and the reference version to ensure that the same stuff is happening on both contracts. And so initially we had this coverage by way of this reference version, and we had assurance that the same stuff was happening on both branches by running the exact same test suite on both contracts, which actually was very difficult to do back then because there was no state snapshotting very clever with it, doing.
00:20:15.416 - 00:20:17.746, Speaker B: Like any unit tests, or was it mostly just fuzzing them?
00:20:17.848 - 00:20:27.570, Speaker A: So there were some unit tests in the foundry part. Most of the unit tests were in hard hat at that point.
00:20:27.640 - 00:20:33.766, Speaker B: Right, okay, yeah, doing like a mono repo of just hard hat and foundry does not sound like a fun time.
00:20:33.868 - 00:20:42.280, Speaker A: Well, I only had to worry about the foundry stuff, which was a huge pain, but I would take it over figuring out Javascript dependencies any day.
00:20:42.890 - 00:20:46.266, Speaker B: Yeah, don't even get me started on Javascript, man.
00:20:46.368 - 00:20:52.062, Speaker A: Yeah, Javascript typescript are fine, but when I'm writing a smart contract, I don't want to deal with all that.
00:20:52.196 - 00:21:13.986, Speaker B: Yeah, I'm not a big fan. I really love the idea of using the same language for testing, and I didn't know Javascript in depth, so it just didn't make sense for me to use all these web free front end packages when I'm doing a back end, a big number and all that stuff. I was like, why can't I just type the number?
00:21:14.088 - 00:21:35.210, Speaker A: Yeah, it's funny because I do this less frequently. I would just fire off some shit posts about like, oh, foundry is better than hard hat. And people would respond to me being like, you should really check out seaport, man. It's a great example of hard hat and foundry living side by side, which is very funny because I'm the guy that did that.
00:21:35.280 - 00:21:37.274, Speaker B: Yeah, you should check out seaport, man.
00:21:37.392 - 00:21:39.942, Speaker A: Wait, little known protocol.
00:21:40.006 - 00:21:51.470, Speaker B: Yeah, I guess you guys chose to use inline assembly as well. I guess. Why didn't you guys use huff? Or just like Yule in general, why did you just go inline assembly with.
00:21:51.540 - 00:22:37.790, Speaker A: Huff was probably pretty new and underdeveloped at the time. There's also a lot that you do get from solidity, which is very nice. There's a lot that's unoptimized about the way that solidity does some things. For example, one of the big bytecode savings and gas savings and the newest version of Cport is Dylan, one of the co authors. He wrote this library that he calls Abi Liddy. It's ability, but dash Liddy, I think it's a great pun. And what that does is he uses the solsi typed ast library, the typescript abstract syntax tree library, to manually decode structs from call data.
00:22:37.790 - 00:23:35.114, Speaker A: So it's this library that I haven't actually used it myself. There's just a script that runs and it generates all the cport stuff, but it uses the abstract syntax tree library to construct a whole suite of library functions that just instead of relying on solidity, like when you do order parameters, call data order parameters in the function signature. When you do that and the struct is named behind the scenes, solidity automatically does its own call data decoding of that struct or like validation on that struct. Or when you copy it to memory, it does it its own way. And apparently that can be fairly inefficient and have a ton of bytecode overhead. And so Dylan's library does that automatically. So actually in the newest version of Cport, all of the struct, all the struct arguments are unnamed.
00:23:35.114 - 00:24:20.174, Speaker A: It'll just say order parameters, call data. And then low level will go into the call data and validate it and then copy it to memory, which is kind of insane to think about. So that's an example of solidity being bad, not bad, but that's an example where can have speed bumps. But there are a lot of nice things about solidity. Sometimes you do want vector math, sometimes you do want to just index a call data array or a memory array without doing the pointer math yourself. It's a lot safer. Of course we take the training wheels off a lot in seaport, but it's very nice to have those training wheels in the first place.
00:24:20.292 - 00:25:11.758, Speaker B: Yeah, I agree. Productionizing custom bytecode is very difficult. And another massive factor in that sense is also who's going to order custom bytecode, right? First of all, it's a very niche programming skill set to even write it. Then you're introducing this other factor of can someone identify bugs within it, which is even more niche? And the only way you're going to get that is if someone's super good. And then imagine the cost of that, right? Because it's so niche. Who else are you going to go to if you've only found one person? Shout out to myself because I can do that shameless plug. But yeah, I mean like how many people have really done that though? And then it comes to a point where you also have maintainers of it as well.
00:25:11.758 - 00:26:05.306, Speaker B: And then it's hard to find developers in the first place. You can't do that. But yeah, the encoder is quite decoder is quite interesting because I've done a call data decoder as well and it is somewhat difficult. But if you know what you're doing, then it's somewhat easy. But from someone that doesn't know what it's really doing, it seems like magic, right? The call data you say, from all those pointless zeros, right? If you can just find what you need, extract that, then that's all that matters, right? You don't need all that padding as a normal solidity where you have, let's say a struct with four addresses. Each address you're using 20 bytes, but you're not using twelve bytes. Let's say you have twelve times four, and then that's how many bytes are being unused.
00:26:05.306 - 00:26:33.530, Speaker B: And so it's redundant if you can withdraw that, extract it, and there you go. And obviously that saves the user money in fees, and so they can spend it on something else, maybe another transaction. Right. But ultimately it's a good way to kind of promote yourself and be better than the competition, because I'm sure nobody else is really optimizing cold auto or this level of just inline assembly. Searchers, but only MeV searchers only.
00:26:33.680 - 00:26:34.138, Speaker A: Yeah.
00:26:34.224 - 00:27:08.486, Speaker B: There's no real reason for a protocol, especially if you're a startup, right? And you're trying to get to MVP. I mean, all the resources are in solidity. If you go to any audit company, they're all in solidity. Nobody does bytecode because first of all, very niche, there's no point, the market is too small. But also solidity is just easier to write. You can do tests, understand it, you can hire anyone, you don't have to go searching and find a very deep network of elites to try and hire them. And then first of all, having the money to be able to hire them as well.
00:27:08.486 - 00:27:30.910, Speaker B: It's just a very unrealistic scenario. And so solidity is like the. So I guess, you know, working with Dylan and the whole team, what are the kind of things that you've kind of learned on this two year journey? Being an opensea that you've guess learned over. Yeah, that have really stuck with you.
00:27:30.980 - 00:27:44.946, Speaker A: Let's see, I've learned that I like esoteric problems of a certain flavor. I've learned that the EVM is really very interesting, partly because of how limited it is.
00:27:45.048 - 00:27:50.942, Speaker B: Yeah, I think that's a beauty. You can trying to solve problems within constraints.
00:27:51.086 - 00:28:40.558, Speaker A: Yeah, absolutely. And I feel like it's just convoluted enough where for me at least, I'm able to grasp it, or grasp hopefully most, if not all of the intricacies, if I'm good at my job, hopefully grasp all of it and work in this weird, almost like a set of toy problems. It's just convoluted enough where I feel like I, as a person can grasp it and reason about it in a way that makes me decent, too good at my job. I've also learned just zero age is the man, man. Dylan's the man. They're fucking brilliant. It's awesome working with really people who are so smart and just not even like smart.
00:28:40.558 - 00:28:59.634, Speaker A: They're brilliant, but they're just clever. Who would have thought that we're running up against the bytecode limit of the EVM with Cport? What can we do to shave down on it? Let's do completely custom call data decoding. And that saves like a few hundred gas. Incredible.
00:28:59.682 - 00:29:00.242, Speaker B: Yeah.
00:29:00.396 - 00:29:01.542, Speaker A: Truly unhit.
00:29:01.606 - 00:29:20.846, Speaker B: Yeah, for real. I think it's most notable because so many people are using it. If it was just any other protocol, it wouldn't really be worth it. Right. But it does add up. And I think you guys did do some statistics on this as well on the amount of gas saved and then actual dollars. It was saved and it was a fair bit.
00:29:20.846 - 00:29:22.480, Speaker B: It was a loss. Yeah.
00:29:22.850 - 00:29:24.378, Speaker A: Especially compared to Wybert.
00:29:24.474 - 00:29:30.100, Speaker B: Yeah, I don't know how much. It was like a couple of hundred grand, like 300 grand or something. I can't remember.
00:29:31.670 - 00:29:37.958, Speaker A: That sounds right. I don't remember when that was from. Probably just a few months after seaport, so maybe even more.
00:29:38.044 - 00:29:43.970, Speaker B: It was like the difference between the original Opensea and then seaport of the email saved.
00:29:44.050 - 00:29:52.540, Speaker A: Because Wyvern wasn't optimized. It served its purpose for a while, but I'm glad we moved beyond it.
00:29:53.070 - 00:30:40.870, Speaker B: Yeah, I mean, something of that scale would obviously bring so many fees of all the unoptimizations. I mean like something like c port or something like Opensea is really an off chain thing, but you got to execute it somehow. And then you build these things that then go off chain, then the off chain executes it. So it's like a lot of convoluted stuff. But then now in cport you only have the necessities, right? And then you just hyper optimize for that. And then now anybody can use it. And it's also like even the game theory for the searches where you can do atomic arbitrage within an NFT platform and then even do cross ones, right? Like going from Opencu to Sudas, the whole kind of shebang, it really plays into the ecosystem.
00:30:40.870 - 00:30:50.940, Speaker B: And when you hear about Mev with this, it's not necessarily a bad thing for these people because their orders are getting filled. Right?
00:30:51.490 - 00:31:37.018, Speaker A: Yeah, it's really interesting. With the Uniswap X launch, it's very similar. They give Seaport a shout out in the white paper about off chain signed orders. And specifically they have the dutch oxygen reactor, which is sort of the intent ish protocol where you say, I want to swap this token for x amount of token and where x is variable. And so as soon as it's profitable for an mev searcher to fill it, they fill it and the user doesn't pay any gas. And it's an optimal execution from the user's standpoint, because if an mvv searcher waited until it was more profitable for them, someone else would have come and taken it. We've been thinking about that a lot.
00:31:37.018 - 00:32:21.654, Speaker A: We have this protocol that still in like a toy stage that we're very excited about building out more. At least I am. We hired Ryan on our team because he came and talked to Karthik Earl manager, about he thought it would be really cool if Seaport had a decentralized peer to peer order book for stuff exactly like this, and was like, that's awesome. Build that now. That was a year ago, that was last summer. And so it's really cool to see that. I know Uniswap has been working on this for a long time, so it's really cool to see those parallel ideas come to the forefront.
00:32:21.654 - 00:32:24.998, Speaker A: At the same time, it's very cool, very validating, very exciting.
00:32:25.094 - 00:33:03.734, Speaker B: Oh yeah. For all new innovations, CPaW was just a massive, just like groundbreaking innovation in that sense. And it sparks all these other people trying to do the same thing. Any new kind of technology from a reputable source is bound to just shift the paradigm into a new kind of space. Yet you see that with uniswap. With the Uniswap X, I'm actually curious to see how this is going to happen from a fully decentralized platform to now centralized kind of order book. Right.
00:33:03.734 - 00:33:48.710, Speaker B: So it'll be interesting. And they claim to get rid of MeV in it, so they do all the arbitrages when it's executed. So that's actually going to be super interesting. But obviously with anything, it takes a while to adopt, especially with complexity. You see everyone still using v two, right? But some people use v three, but nobody understands it fully. Well, a small, I guess, minority understand it fully, but the majority don't because it's quite complex. And I think the same is with v four, although it's quite abstract, if you think of, okay, everything's on one contract, but from what I've heard, it's still kind of like the same level of complexity as v three, whereas v two was just simple.
00:33:48.710 - 00:34:24.190, Speaker B: Right. Anybody can learn it, pick it up, integrate it, and people still use it, which is interesting, despite all the efficiencies of v three. But again, it just comes down to complexity and how easy can someone understand it and start using it, right? So I think that comes to also documentation. How do you actually write good documentation for such a massive project, right? Because even I sometimes struggle. I'm like, okay, let me write this. I come back to it later, I'm like, why did I write this? How do I even keep track of everything? Right? There's so much to keep track of. So obviously documentation important.
00:34:24.340 - 00:35:05.630, Speaker A: Let me know when you figure it out. I'm certainly not great at it. That's something that I talk with zero age a lot about, is that Cport is, like I said at the beginning, it's not a marketplace protocol. I don't know. I see it as like a token settlement layer. And then with the newest version of Cport, we have this concept of contract offer, like reactive, smart contract offerers that can dynamically offer up tokens in exchange for other tokens and do things behind the scenes. And with the newer version of zones, which the zone check happens after execution now, and it's also a stateful call so it know manage its own state or state elsewhere.
00:35:05.630 - 00:35:54.698, Speaker A: Now there's this concept of Andrew from Astaria. Put it this way, it's like the settlement layer for seaport apps, which is a weird, nebulous statement, but like Asta is built on top of seaport. It's an NFT lending protocol that uses zones to manage positions and liquidate things. I haven't looked completely at it, but I know it works that way on a high level. And it's very exciting because I think they're really the first folks to build something on top of cport and see it as this platform for building stuff on top of it. But they're all brilliant and have reached out to zeroage and me personally to ask questions or in some cases find bugs. So it's very hard.
00:35:54.698 - 00:37:01.746, Speaker A: Zeroage and I talk about how we can make it easier to build Cport apps, but also we need to answer the question of what is a Cport app and how do we communicate what's possible and how do we make it as ergonomic as possible. One of the things, just real quick, is that one of the things for the newest version of cport is that sort of a lot. Just to help writing tests for the new version of cport, I built out this library of solidity helpers that just make it really easy to create structs or auto populate structs or create the concept of fulfillments when and where tokens are sent in the actual execution phase of Cport. And so I've been working a lot on just libraries to help interfacing with Cport, and I think that's a lot of it, but there's still a lot of documentation to write. But it's a problem both of documentation and ergonomics. I think we're getting to a place where it's starting to be ergonomic to work with Cport, but we still need to actually invest a lot more in showing what exactly is possible and how to build these things in a friendly way.
00:37:01.848 - 00:38:02.038, Speaker B: Yeah. A common thing I face when building a large architecture is how do I make it easy to read for someone else? And I consider myself as someone else when I visit in the future, or if I take a couple of days off and I want to come back to it, all that context back into my brain, into my so called Ram. If I can't do that in a quick manner, then I'm spending unnecessary time trying to get the context again, especially if I'm jumping between multiple projects, right? So if you're doing something full time and then doing as a side gig, you don't want to spend the only time you have for your side gig trying to remember where you were at before. And I think that's where documentation comes in, like inline comments as well, explaining stuff. But I think getting your overall architecture down, understanding what's possible, what were you at and how can I improve? This is the main thing. And if someone's trying to build on top of it as well, then they also need that. Otherwise it's just going to become not fun.
00:38:02.038 - 00:38:50.774, Speaker B: And obviously people do this. I've dealt with projects that you want to integrate with, but they haven't verified this code on chain, so you don't actually know what's happening. And is there actually a difference between the bytecode on chain and the one they published publicly on GitHub? And so it's like, okay, what do I do now? Especially if the team isn't communicating as well, right? You want it to be a decentralized platform where someone can actually understand what's happening, because anybody can build on top of anything, really. It's just like, did they understand the possibilities and limitations of that thing that they're building on top of? But yeah, I think that's just a general software kind of question. It's like, okay, how do you build good documentation? How do you convey it to someone that's coming in from nothing.
00:38:50.972 - 00:38:59.740, Speaker A: Totally. Yeah, it's difficult, and it's something where we talk about a lot and are actively trying to work on.
00:39:00.110 - 00:39:24.350, Speaker B: Also on that note, obviously you're working with some of the best in the industry, and you can identify what makes them the best, right? So in your opinion, what differentiates someone that's mediocre, intermediate into or compared to a leader or an elite in that kind of field of protocol development?
00:39:24.430 - 00:40:49.082, Speaker A: I can speak to it from my experience, if I may deign to declare myself potentially intermediate to advance, and maybe this is specifically my line of work, working with Cport and really optimized stuff. But for me the big shift came when I stopped thinking about writing solidity, the programming language, and when I started thinking about it on the EVM level, because solidity has a lot of nice abstractions that help you start writing code, but it's doing things under the hood that are very unique to the EVM and how the EVM works. And if you want to understand how to write safe code, or if you want to understand the drop mechs downsides, pros and cons of doing something a certain way, you need to understand what the actual virtual machine is doing under the hood, like understanding re entry, understanding where re entrancy can happen and what are the consequences and things like that. So when I write solidity, it's also sort of understanding the solidity compiler. I probably would be much less useful in Viper just because I haven't dove into it, really, if I know solidity is going to do something weird or not what I expect or inefficient in some way just from knowing what bytecode the compiler outputs. I'll write something differently a certain way. But I think the big thing is understanding what the actual EBM is doing.
00:40:49.082 - 00:40:56.254, Speaker A: That really helps you write safer code because you understand what the implications of what you're writing actually are.
00:40:56.372 - 00:41:45.950, Speaker B: Yeah, I agree. Being able to understand the bare bones of what you're writing, it definitely allows you to understand the higher up abstractions. For example, if you understand the RPC calls being involved in foundry, you know actually what's happening under the hood of the abstractions of the emulators, et cetera, how scripts are ran, how you deploy. Another great example actually is if you don't actually know how to optimize, right. It's because you don't have a great underlying understanding of how, let's say, memory and storage works. If you're putting a variable from storage into memory, then what you're really doing is doing an s load, which is x amount of gas, and then you're putting it into memory, which is an M store, which is another x amount of gas. And then you're going to use the M store.
00:41:45.950 - 00:42:26.666, Speaker B: And let's say you only use the M load once, right? Then there was no point in that memory. You should have just s loaded, because then you're skipping the unnecessary redundant memory storage and then access. You're just using storage directly because you're not using it multiple times. This happens quite often when you think about gas optimization. With the episode of Harrison I did before, he mentioned that in for loops, if you're not caching it and you just continuously load from storage, it's going to add up. And it can be quite expensive, especially if it's using different storage slots each time with, like, an iterator. So, yeah, it definitely comes down to your fundamental understanding of something.
00:42:26.666 - 00:43:10.166, Speaker B: And to be good at anything, right, you've got to go to the bare bones. What's happening, for example, in AI, you should learn math and all that stuff if you want to build the models. But obviously you can use it at a higher level, but you're not going to be as technically sound as if you learned everything at the lower level. The prerequisites, fundamentals, et cetera. You can use anything at the higher level, right? But you'll never be a master. And if you want to become that level, you got to think of what the leaders in the space are doing. Do you really think they don't know how to write bytecode or at least don't even understand how to write something like that? So you've got to kind of think of it from that perspective as well.
00:43:10.166 - 00:43:14.502, Speaker B: A true master would know the whole stack to some degree of understanding.
00:43:14.566 - 00:43:17.706, Speaker A: Yeah, absolutely. If you want to pave new ground, at least.
00:43:17.808 - 00:43:57.430, Speaker B: Yeah, exactly. And then it just comes down to experience. And there's no better teacher than experience, right? You can just do theoretical all the time, but it's what you can actually do and what you can implement. What can you actually provide? If you can just give advice, then really, maybe you should just be a consultancy. But at that point, if you've never done it, your consultancy, your advising isn't actually sound as well, because you've got to do it. So I think that all kind of, like, tumbles down into the fundamentals and really understand it to be good at the abstracts, higher ups, or even anything revolving around it, because I think it all interconnects in EVM anyway. You see everything in different areas.
00:43:57.430 - 00:44:03.270, Speaker B: What does your day to day look like as a protocol engineer at Seaport?
00:44:03.350 - 00:44:35.010, Speaker A: Let's see. It depends. Earlier this year, it was all seaport. All the time it was writing new tests. It was writing out that new library for ergonomics, both in test writing and order validation fulfillment generation. Lately it's been a mix of more product oriented stuff. A lot of people ask me for advice or context on stuff, so submittings, which is not as fun as writing by code or it can be, depending on the vibe.
00:44:35.010 - 00:45:03.178, Speaker A: But I spent a lot of time thinking about the part. Even if we're not doing a push right now for v 1.6 or 2.0 or whatever, which I cannot wait for, I'm very excited. I've got some ideas, but we'll see what actually makes the cut. It's a balance of protocol and product work. Helping out with newer versions of CDrop, which I only tangentially helped out with, but that one's integrated in cport, so helping with the contract offer pattern.
00:45:03.178 - 00:45:24.994, Speaker A: Sometimes it means getting nerd snipe and working on something that's not really what's on my task list according to our pm, but I think it still works out right. Been working on this packed, user defined value type library that's nowhere near done, but I'm very excited about call data compression and stuff.
00:45:25.112 - 00:45:43.386, Speaker B: Definitely a must to not limit yourself to the one job. I mean, unless it's your startup, right? You seem very interested in seaport and I assume you're just like a salaried employee, right? What makes you so passionate about it versus okay, it's just another job.
00:45:43.488 - 00:46:13.230, Speaker A: It's fun to work on these problems. Like I said, it's a very niche esoteric problem set. The problems are just convoluted enough where I think I'm actually kind of good at solving them. And Cport is really exciting because it's both on chain and off chain. I think some protocols are very they're hardline. The protocol should be entirely on chain, some are entirely off chain. But the fact that know you can validate an order on chain, that's how party bid works.
00:46:13.230 - 00:47:02.850, Speaker A: Party Dow's product, when you do like a party bid to bid on an NFT, it places the order on chain and then our systems pick it up or like a surgic and pick it up on chain. But then we also have this off chain order book which right now is centralized behind OpenSea or. But you know, if we build out steam for gossip or when we do or when someone does the decentralized aspect of this order book is really cool because then it's permissionless to post an order. It's free to post an order as long as you're running or connected to a node. And that's really cool. It's this new protocol on top of an EPM based l one or l two protocol, and it's just so powerful in terms of what it can do. And we've got ideas, I've got ideas about how to make it more powerful in terms of how you can fulfill things.
00:47:02.850 - 00:47:48.130, Speaker A: Seaport apps are very exciting to me. I think in terms of nfts with utility or nfts that can do things, Seaport does a lot more than nfts. Just throwing that out there. It can do ERC 20 to ERC 20 swaps or any combination. Like Seaport deals we just launched, where you can trade two pudgy penguins for a mutant ape or whatever, or like a pudgy penguin and some eth for some token, and that's just built into Seaport from the ground up. That's the level of granularity you can have with this token settlement, and then you can build things on top of it. You can have nfts be their own market makers, like they can be their own liquidity pools as a contract offer, which is still sort of on the low level of why is this? Interesting question mark.
00:47:48.130 - 00:48:12.698, Speaker A: But I think the next wave of nfts won't be collectibles per se. I think they'll have more uses, I think they'll be more dynamic, and I think Seaport's a really great platform to start building those things because you get this very secure, very optimized, trustless settlement layer for whatever your application is. That's very promising to me.
00:48:12.864 - 00:48:28.794, Speaker B: In the grand scheme of things, NFTs will definitely be more important, like tickets or something like that. I'm sure that will all come into fruition, maybe on like ZK. I wonder if you would ever do any ports over to different chains.
00:48:28.922 - 00:48:52.822, Speaker A: I think we're deployed on one of the ZK chains, I forget which one is it? Zk sync one of them. But it's EVM compatible or EVM equivalent in quotes. I don't know if we're deployed to that one, but we're deployed pretty much everywhere. Every once in a while, zero H will tweet out the docs to do it. Give that elusive zero age follow if you do it.
00:48:52.956 - 00:49:40.734, Speaker B: Yeah, the future of OpeNC is going to be very interesting, especially with these apps. People are building on top of them. Yeah, I think it's going to be quite interesting because from what I understood, Openc was always just nfts, but now as the aspect of ERC 20s as well. And as you mentioned before, it's really just an intention platform now rather than nfts. So it's going to be definitely interesting to see how it all bulbs, especially when the CK starts rolling out and nfts become even more prevalent because now you have private data nfts, which can be a whole lot more all right, like medical history, et cetera. So I think that's when all the nfts will really shine. I think this has been quite an interesting call and I'm very grateful for you to spend the time with me finally getting to meet you as well.
00:49:40.792 - 00:49:43.254, Speaker A: Of course, it's an honor. This has been fun.
00:49:43.372 - 00:49:50.486, Speaker B: It has been fun, yeah. And it's in the books now, so you can come back to it once you launch and be like, yo, I told you it was going to be good.
00:49:50.588 - 00:49:52.162, Speaker A: Amazing posterity.
00:49:52.306 - 00:50:17.454, Speaker B: Exactly. Yeah. And for anyone listening, if you would like to jump on the podcast or would like to suggest someone to come on, just dm me at scrapingbits on Twitter. You can email me at scrapingbits@gmail.com otherwise, thank you so, James for coming on. Hope the audience will listen to a few more episodes because I'm sure if they enjoyed this, they would enjoy a whole lot more. So, yeah, thank you so much for jumping in and take care.
00:50:17.572 - 00:50:19.020, Speaker A: Amazing. Thank you for having me.
