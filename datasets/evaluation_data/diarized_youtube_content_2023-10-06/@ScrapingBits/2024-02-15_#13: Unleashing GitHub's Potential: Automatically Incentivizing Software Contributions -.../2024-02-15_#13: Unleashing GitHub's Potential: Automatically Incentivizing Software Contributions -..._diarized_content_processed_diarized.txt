00:00:00.250 - 00:00:19.834, Speaker A: I think it's more direct with financial incentives because it gets down to like the commenting level and everything. Like the vision is like for every function you can perform as a contributor in a Dao, if you can get directly paid one to one for your effort put in, like that's the future vision of this model GMGM.
00:00:19.882 - 00:00:24.838, Speaker B: My name is Degiachi, and today we have Alex. It's a pleasure to have you, man.
00:00:24.964 - 00:00:25.958, Speaker A: Hey, how are you?
00:00:26.044 - 00:00:50.938, Speaker B: Not bad. We both running off low sleep, all that stuff, but that's kind of the life we live, right? It's pleasure to have you on. We met in Japan and you're building some quite interesting stuff, and I wanted you to share this and also tell us about your past history. But before we get into that, let's just summarize what you're doing right now. Let's do that.
00:00:51.024 - 00:01:35.770, Speaker A: Sure. So yeah, I'm the founder of Ubiquiti Dao, and our flagship product is a stablecoin. But our vision has always been to build an ecosystem of products to settle payments in this stablecoin. So our second, I guess, main product is what we call the dev pool, which we want to have it be like the future operating systems for dows, basically allowing them to operate more efficiently. And it's built inside of GitHub. So yeah, right now it settles payments in all sorts of, basically we're actually testing with Dai, but of course, the future vision to settle payments in our stablecoin.
00:01:36.110 - 00:01:56.866, Speaker B: Sure. Yeah. And you told me about this deadpool when we're in Japan, and I personally think it's a massive boost in productivity. It's definitely aligned with your goals. So let's talk about that because it is quite interesting and then we can later get into the stablecoin and whatnot. So what is this dev pool and.
00:01:56.888 - 00:02:31.674, Speaker A: How does it really work? Yeah, so the simple answer is Dow operating system. But I want to give a little bit of backstory. So ubiquity Dow, we consider ourselves like a genuine distributed organization. Everybody in the core team, we have about twelve people now. We're all in different countries, so operating asynchronously, we have people spanning the entire globe. Got you. Right now I'm in Korea and one of my main researchers I liaise with is in Venezuela.
00:02:31.674 - 00:02:58.290, Speaker A: Right. That's literally like a twelve hour time difference. We're pushing the limits. And so we've had to really think critically about how we operate. And for a while we were bootstrapping and my whole startup background was like bootstrapping. Fortunately, we're venture backed now, so there's a bit more buffer. But for a while, we had to be very concerned with operational efficiency.
00:02:58.290 - 00:03:34.738, Speaker A: And again, as a completely properly distributed organization, sometimes it can be tough. It's not always easy getting on phone calls with everybody and doing things in traditional way. So after a lot of r and D, it was actually also one other problem we were trying to solve was our recruiting. We wanted to be very efficient with our recruiting because I think that any startup, any organization, any tech startup is really just primarily two things. It's the product, the software you're building and the people. And if you have good software, great. If you have good people, great.
00:03:34.738 - 00:04:12.206, Speaker A: Then those are the two main ingredients to make a successful startup. And so that's why recruiting is very dear to me. I think I've always stressed how it should be done in perpetuity and it should be done efficiently because you should constantly be doing it. So, yeah, those are the two main problems that we wanted to solve with this new, what we call the dev pool. It's sort of like an efficient recruiting mechanism and an efficient operating system for tasks in our dow. So, yeah, I don't know if you wanted to poke with specific questions or you just want me to keep kind.
00:04:12.228 - 00:04:24.050, Speaker B: Of going, like, how does it actually work? So why does it make all this stuff so efficient? Recruiting. Also building these contributions, what's the kind of workflow?
00:04:24.390 - 00:05:29.766, Speaker A: So I'd say specifically for recruiting, as you know, probably the traditional recruiting process is kind of like somebody will, you'll post on the job board or something, and then somebody will send like a cover letter and apply for the job, and then somebody in your team will schedule an interview and a lot of time, energy. Yeah. And so we were kind of thinking like, okay, how do we make this as streamlined as possible? And so I'm sure you've heard of bounties like Gitcoin and all that. And I really like bounties because you don't really have to communicate that much to get them to deliver work. Right. So the point of a bounty is like, you set a price tag, like, hey, deliver this, make me this to do list in my app. The deliverable is your code and you set a price of like whatever, $500.
00:05:29.766 - 00:05:52.718, Speaker A: And then bounty hunters will go in and submit code. Right. They'll open a pull request or however different websites implement it. Yeah. The best part about this is that you see their quality of work. Generally you have at least a bit of communication involved with that. So you can see how well they can communicate and express themselves, you get a lot of information from that quick experience.
00:05:52.718 - 00:06:01.440, Speaker A: And I think that also it kind of cuts out like 90% of the scammers out there who might be good at interviewing, but actually.
00:06:04.370 - 00:06:06.560, Speaker B: Interviews instantly get a job.
00:06:08.550 - 00:06:30.540, Speaker A: Yeah. So I'm really keen on the bounty approach. And so we're kind of using that as a core. I don't know if the right term is like building block, but the core of the dev pool is it's sort of like a bounty program. And so every task has a price tag, of course. Think of like a normal bounty. Right.
00:06:30.540 - 00:07:23.370, Speaker A: And then, yeah, anybody can basically deliver work generally. We first designed this as a bot on GitHub, so it's natively, it's inside of GitHub, seamlessly integrated. We actually made like slash commands and all that fun stuff. But originally it's built for development and we're exploring for other roles like marketing and partnerships to use the same system. But I'll get more into that later for sure. So, yeah, to kind of sum up my point here for recruiting, anybody in the world can hop on our GitHub on our issues, see the specifications, and just open up a pull request and start solving problems. And if they make it through our review board, because we have a core team that reviews all the pull requests, if it makes it through, then immediately our bot can issue payouts directly on GitHub.
00:07:23.370 - 00:08:17.018, Speaker A: And so after seeing the same faces, opening a pull request, going through prs successfully, pull requests successfully, we can see, wow, these couple of people, they're really great. Let's extend a job offer to them to kind of zoom out for a moment. For somebody like me, the project founder, I'm not on phone calls with people that probably are never going to get the job right. Statistically, you're going to interview, what, like nine people, let's say, or ten people, and then you'll churn through nine of them. Maybe you'll hire one that was like, what, 10 hours of phone calls? So there's zero phone calls in this process, number one. Number two, we're getting down to the brass tax where it's like you can talk about, oh, yeah, I've been coding for 30 years, but then you can tell when you see their code. Yeah, show me your work.
00:08:17.018 - 00:08:40.898, Speaker A: My favorite thing is when I was interviewing back in the day, developers, they're like, oh yeah, I did X, Y and Z project. I'm like, oh, cool, show me. Oh, no, sorry, bro. It's under NDA. It's always under, everything's under NDA. So I just default to not believing people at this point. But it's a lot easier to believe people when you're looking through their pull request and seeing how they communicate and seeing their code.
00:08:41.064 - 00:08:42.798, Speaker B: Yeah, it's like credentials.
00:08:42.974 - 00:08:48.760, Speaker A: Yeah, it really is. And it's also solving actual problems for us.
00:08:49.770 - 00:09:07.580, Speaker B: Problems for your specific projects, right? Yeah. So basically it's a control flow of, you have an issue on your GitHub. Can other people open issues or only you guys? Sorry, you guys.
00:09:08.590 - 00:09:12.300, Speaker A: Well, because there's a lot to unpack here. I'm trying to.
00:09:14.830 - 00:09:41.890, Speaker B: Let'S go through the control flow basically so someone can open an issue, whether it's you or someone else, an outside contributor, they look for your code base and like, okay, something here needs to be fixed or something here needs to be added. After that they basically assign themselves to that task, that issue. And when they assign themselves, you give them a time sort of. What do you say for that? A time schedule and also like the severity.
00:09:42.050 - 00:10:15.182, Speaker A: Yeah, let me backtrack for a sec. I just want to conclude my previous point. All I described with my previous point was using bounties as a recruiting strategy. But now I want to get more into what makes our bounty program or our architecture special. Good segue into what you're asking right now or what you're explaining right now. Basically for us, as I mentioned earlier, it's 100% inside of GitHub. Okay.
00:10:15.182 - 00:10:34.742, Speaker A: The only part that's not in GitHub is the payment dap. Like to receive payments you have to click a button. It's like web three enabled. But everything else is completely inside of GitHub. So for new developers to jump in, it's already a UI and experience and tools that they're all already familiar with. There's no. Right.
00:10:34.742 - 00:11:05.474, Speaker A: Yeah. For issuing a new bounty. Yeah, as you kind of alluded to, there is the two dimensions. There's a priority level and there's a time level. So in our current implementation, because we want to, honestly, almost on a daily basis, I'm filing new issues and so are my teammates. So that was one of the first things we wanted to make sure to really streamline. Like how do we price things very efficiently? We got cooler ideas in the background with like a betting market and crowdsourcing the information.
00:11:05.474 - 00:11:39.670, Speaker A: But that's maybe later. Episode two. But right now we have two dimensions, priority level, time level. And so we have these labels on GitHub you can set a label for any issue. And so we have a special class of labels that are populated automatically by the bot when you add it as an app to your organization or to your repo. So priority, it's basically right now it's like priority zero through four. And priority zero is like normal.
00:11:39.670 - 00:12:15.794, Speaker A: Next one is like medium, next one's high urgent emergency. And then the other dimension is the course time estimate. And we intentionally made it course because we didn't want to spend so much time like, oh, this particular task going to take 3.5 hours or whatever. The point of this is to be able to put out those bounties super fast. So our course estimates right now are like less than 1 hour, less than one day, less than one week, and anything above less than one week usually means you have to break it down further because there is like less than two weeks much. But I kind of discourage the use of those anyways.
00:12:15.794 - 00:13:10.066, Speaker A: And so it's a simple lookup table x and y axis, right? Priority level times course time estimate equals bounty price. And this is all configurable by the way. You add a little yaml file in the repository and you can configure, yeah. So in conclusion, you quickly write, you file a new GitHub issue, type in the title, type in the body text, hopefully you describe the issue clearly. You add the priority level, you add the time level, and then you click submit. So all this can easily be done, especially like when I'm going through a pull request and you see we're discussing some problem. GitHub will allow you to basically turn a comment into a new issue so it will automatically link back to the original conversation and then you can add that priority and time level.
00:13:10.066 - 00:13:44.722, Speaker A: I mean you could do this in like 10 seconds, maybe even less. So I'm firing away new bounties multiple times a day, literally less than 1 minute a pop. And they're useful, they're functional. People can see the backlinked conversation from the original pull request and somebody can hop on it and start implementing right away. It's a really cool feeling to file some issues, go to sleep, wake up and you got some people, you working on it or. Yeah, like a pull request open and this is a reality for us, so it's really cool.
00:13:44.776 - 00:14:34.306, Speaker B: Yeah, that'd be amazing to just wake up. Okay, fuck, I need to go to bed right now. Let's see if we can put this as an issue and see if it gets done one day. Because tons of projects they put issues but they're never finished and it's just like in the backlog forever. But this incentivizes core contribution like open source contribution, which is a really important thing because it's such a great way to get exposure, learn how to work with these massive teams, and it's even like a reputation boost as well. A great example is like foundry, for example, if you're working on forge and they have tons of issues, right? Usually people do it just to get noticed by foundry, and then they might just get hired or onboarded onto foundry if it's like a good pull request or something. So that's the only reason for doing that.
00:14:34.306 - 00:15:01.774, Speaker B: It's just experience and reputation. But now it's also an incentive, right? And I think that's very important because the only incentive before was just reputation, but now they actually can get paid and make money from it. I wonder, from pricing these, what if they actually go above and beyond? What if they finish it before the time? Or maybe they have to extend it a bit longer because they found a further issue. How does that work?
00:15:01.892 - 00:15:11.086, Speaker A: Yeah, so basically for the time, we don't pay too close attention to, to be frank, it's more about are they continuing to work on it?
00:15:11.108 - 00:15:11.678, Speaker B: Right?
00:15:11.844 - 00:16:04.842, Speaker A: So let's say that it's estimated to be a one week task, but they delivered a one day. It's like great. That was budgeted as a one week task. So if anything, they're happy, right? Because they got a lot more money in that one day. So beyond that, as I mentioned earlier, with firing off new bounties, a lot of the bounties that I create or the new issues that I file are directly from pull request reviews, right? I'll right click, or there's like a little context menu next to each comment and I'll click on it and be like, create a new issue from this comment. I'll do that a lot. So in this case, because the bounty hunter was participating in that pull request review, because they were delivering their work and they were participating in that conversation, they generally are the most up to speed on that newly issued bounty.
00:16:04.842 - 00:16:58.130, Speaker A: So then they can immediately hop on that and get more paid or paid more. So I would say that for those incentives, it's like great if you do it fast, if you do it slow, whatever, as long as you continue to work on it. And then the next thing is you'll be the most up to speed with new issues uncovered or new bounties generated as a result of that pull request review. And then lastly, I guess a big incentive is if you continue to do a good job, we make it very clear, like, hey, we're constantly looking to hire core contributors. So if you're doing a good job. We're going to extend an offer to you and you can tackle more complex, less well defined problems. And you get a base pay, basically a salary, like a low salary, while continuing to solve bounties.
00:16:58.130 - 00:18:09.410, Speaker A: Last but not least, we're on the cusp of deploying this on our production instance, but we have this really interesting system for incentivizing participation. So what this means is basically you're getting paid to add new comments to a conversation. So unless you're the bounty hunter, because the bounty hunter is not eligible for common incentives, because then that could give perverse incentives for them to ask stupid questions and just keep commenting. So they're the only ones not eligible. But everybody else, if you add to that conversation with some research or to answer a question or anything, every word you enter, and then the formatting of the words counts too, that gets totaled up. So when the bounty is closed or when the issue is closed, everybody gets their cut, right? The bounty hunter gets their bounty, and then everybody who participated in helping them with comments also gets their payment permits generated. So in conclusion, the theory behind this is that people are incentivized to help each other with solving or doing research and answering questions and writing clear specifications.
00:18:09.490 - 00:18:20.490, Speaker B: How do you go about dealing with malicious comments or things that aren't really relevant to the conversation? And are you the ones basically looking at the comments or is it all automated?
00:18:21.010 - 00:19:03.350, Speaker A: Yeah, so to clarify, we don't have it rolled out in production yet, so I'll definitely get back to you on that. We're constantly experimenting, however, we are playing things defensively. There's a couple of things that countermeasures that repository maintainers have against malicious comments. So number one, the only time that the payouts occur is when the issue is closed. So before the issue is closed, you can review all of the conversation, right. And see, okay, what's going on here. Second, if you think that somebody is abusing on a particular issue, you can delete the comment.
00:19:03.350 - 00:19:51.558, Speaker A: The bot will only tally it up at the very end when the issue is closed. So you could market a spam that's built into GitHub, like market a spam, or you can simply just delete it and it won't be totaled up when the payment permits are generated. And what else? I guess that's it so far, actually. Sorry, one last thing, one last thing. For pull request reviews, the maximum common incentives that can be generated, it basically maxes out at the bounty price. So, for example, if it's a tiny bounty like it's a less than 1 hour low priority bounty, and it's like $25 bounty, the common incentive, you're going to hit that very quick. So if a bounty hunter is like asking a million questions and trying to.
00:19:51.564 - 00:19:54.118, Speaker B: Game the system, or even if they're.
00:19:54.134 - 00:20:55.934, Speaker A: Just not that talented, because this happens, they're trying to solve a very simple bounty and they're really wasting, for lack of better term, they're kind of wasting the time of our review team with a tiny issue. We're actively doing research on disincentivizing the review team to continue reviewing when their time is being wasted. And the way that we do this is by capping those common incentives. So if the reviewers are answering questions for a $25 bounty, maybe you can answer a few questions and then you're going to hit the limit, and then there's no more incentive for you to continue. So this is maybe a bit coarse in terms of human interaction to be like, all right, well, you're not good enough for our time anymore, but we're still doing active research on that. But ultimately we value getting things done. And if you have really low performing, yeah, right.
00:20:55.934 - 00:21:06.850, Speaker A: And if you have really low performing bounty hunters taking forever to solve tiny bounties, at a certain point, you got to pull the plug. And this is a quantitative way to determine when to pull the plug.
00:21:07.590 - 00:21:27.046, Speaker B: Yeah, definitely. I wonder as well. So basically they do a really good job and provide more than a really good fix, basically for an issue like scalable, clean, code, commented, documented. Can you provide bonuses for this kind of stuff? And how does that work?
00:21:27.228 - 00:22:00.754, Speaker A: Yeah, so we have done bonuses in the past. Generally it's after several solved bounties, like when some new bounty hunter is on fire, just like killing it, because we definitely seen a couple of those. I'll literally, I'll just send them just a normal transaction, drop the ether scan link in the issue or in the pull request so that it's public, so that everybody can see everything and clearly articulate. Like I like X, Y and Z about what you did. Keep doing that. Here's a bonus. Thanks.
00:22:00.754 - 00:22:10.598, Speaker A: So if you go through our GitHub and go through all the issues and pull requests and stuff, you'll see that occasionally, I think another great thing, I.
00:22:10.604 - 00:22:27.020, Speaker B: Don'T know if you do it, but it could be a registry of someone's history. Like the statistics, how many have they completed in x amount of time? Like some kind of streak, different projects and even just like bouncing around projects, you could have a lot of statistics for that. So do you have something like that?
00:22:28.910 - 00:23:12.662, Speaker A: Well, in our roadmap, we have a whole leveling system, leadership board or leaderboard, all that jazz. Right now, the only analytics that we had to do in this early stage, because we're technically still in beta according to a roadmap, but the only analytics we have is this auditing tool. So I'm the founder of Ubiquiti, and I want to closely monitor all the outflows of the cash. Right, because this is still experimental, there could be leaks to plug where there's some exploits. Something is going on. So I want to be able to, in one place, see who's getting how much and how and why. And so, yeah, we built a very simple auditing dashboard.
00:23:12.662 - 00:23:59.174, Speaker A: It just scans the GitHub like it goes to the GitHub API, and then it goes and looks for all the payment permits that were generated as comments. And it will generate a table, basically, we'll say, like, okay, you type in for this user, I want to see all the payments that they got, and then it will show the issue. So you can click on it and actually read the whole, everything that they did. It's all auditable. Like, you see the pull request, you see the original issue, the conversation, everything, and then you see obviously the amount that they got paid. And I feel like there was one more column in there I forgot. But long story short, it allows somebody like myself to very easily audit all the outflows.
00:23:59.174 - 00:24:34.894, Speaker A: And so we had to do that because, for the sake of my sanity, I was getting very nervous. We're just like authorizing a bot to just pay out whatever. No, but I guess in our version one, which is coming up, if I had to take a guess, between three and six months. Yeah, we're going to be having very detailed analytics on exactly what you were talking about. Because really one of our big angles. Maybe this is kind of naive, I don't know. But I would love to make this service as a public good.
00:24:34.894 - 00:25:28.030, Speaker A: I'm very inspired by gnosis safe and their story. And I like the idea of making or giving back to the community, the Ethereum ecosystem in particular, and growing the ecosystem, doing my part. So there's that side. But then the more, I guess, capitalist like, selfish side is, well, we could preserve the analytics for ourselves and then basically snipe the best talent so we can get our profits in a very indirect way, for lack of better term. So that was something we were also considering. We're still figuring out how we're going to play our cards. I think that's going to be answered when we're doing our series a, which we're going to start fundraising in probably about March 2024 with a six month fundraising window scheduled.
00:25:28.030 - 00:25:45.242, Speaker A: And I think we'll learn a lot about what makes sense. We'll think more critically about our go to market strategy. But yeah, for now we're just focusing on utility and just solving problems. So it's all free, it's all open source. Anybody can use it right now. Anybody can use any payment token. It's just about solving problems right now.
00:25:45.242 - 00:25:49.402, Speaker A: Later we'll talk about profit for sure.
00:25:49.456 - 00:26:06.706, Speaker B: Yeah. And one critical thing I think would be also important is how would you use this on a closed source project? So I guess you would assign your team to the project and then have issues like that. But if they're already getting paid a salary, I guess, how does that work? Yeah.
00:26:06.808 - 00:26:32.938, Speaker A: So two things. One, we do have this multiplier function made specifically for salaried contributors. Multiplier is just a quick slash command. You type in in any comment multiplier. You tag whoever you want to select at Digotchi and then you type in a float after. So 0.5 or one.
00:26:32.938 - 00:27:20.598, Speaker A: And then what this does is it modifies all the payment permits that are generated for you with that multiplier. So the intent here is that open bounty hunters, public bounty hunters that are not getting paid salaries, they can collect the full bounty for each problem. But salaried team members, depending on the level of their salary, I guess you can adjust their payments so that they still are incentivized to contribute and to solve problems. And they're still technically doing the bounty system, but they get maybe less because they also have a base pay. We currently do have that. I see a future, I see a reality where you can have a completely closed source. Excuse me, sorry, I got air in my throat.
00:27:20.598 - 00:27:58.182, Speaker A: You have a completely private team. Let's say you have a very elite team. You don't want outsiders working on your code and it's all closed source, everything. But from a management perspective, perhaps you can see more efficiency because your team is directly, financially incentivized to do their work. It's like, almost like gamified. It's like if you're working, you're racking up your bonuses. And in our roadmap, we're going to make a simple chrome extension that will overlay a custom UI that will basically have live like, oh, you're typing your comment right now.
00:27:58.182 - 00:28:23.280, Speaker A: You'll see the dollar signs go up on the right side. We want to make it feel like a game and real time feedback of, like, okay, you're working, you're getting paid. Look at those dollars going up. And also because of the gnosis chain deployment. Yeah, because of the gnosis chain deployment, we could support very tiny transactions. So that's fun, too.
00:28:23.730 - 00:29:15.422, Speaker B: Yeah, I think gamifying it is definitely the way to go, because me personally, I came away, I got into programming, was from games, really so addicted to gaming, and then I switched my addiction into programming because it's kind of like gaming. You're basically working on something, but it's positive, and you're thinking of new solutions and problem solving. So it's quite similar in some ways, but the only satisfaction you get is from actually finishing a task. And I think something like that, where it incentivizes you and brings you more analytics that you can build up, it gives you a progress bar, like another progress bar on top of building. Agreed. And it's like a positive thing as well. It's not getting you addicted to a negative thing that doesn't provide any value.
00:29:15.422 - 00:29:18.206, Speaker B: It's getting you addicted to actually making.
00:29:18.388 - 00:29:21.200, Speaker A: Value, building things, solving problems. Yeah.
00:29:22.770 - 00:29:38.040, Speaker B: I think a lot of people will use this if it's basically perfect. So I wonder, how did you even get into all of this? How did you start your career and get up to this point? It must have been very interesting.
00:29:39.130 - 00:30:12.110, Speaker A: It is. And unfortunately, I can't divulge too much because I'm supposed to be anonymous. Yeah. I'll kind of neuter the history here, but what I can say is that I don't have a computer science background. When I went to school, it was actually more digital design. I did a lot more creative work. I don't know if you remember when we met in Tokyo, but I like to carry myself fairly fashionably, which I guess is kind of unusual in this industry.
00:30:12.110 - 00:31:00.794, Speaker A: Yeah, I have a very heavy design background. I did design for so many years, and I did photography and videography and basically creative. But then the world of creative and I guess engineering collided with front end web development, and I was like, yo, this is sick. Coding is dope. So basically, I just independently went down the coding rabbit hole because I was always hustling when I was in university. I was always trying to make a buck, and that's because I didn't get enough money for my parents to live super comfortably in university, doing a degree.
00:31:00.842 - 00:31:03.798, Speaker B: That wasn't basically anything related to computer science.
00:31:03.834 - 00:31:35.386, Speaker A: Right? Yeah. No, it was definitely not okay. But I was hustling, doing what I could with the skill set that I had developed at that point. But then halfway through my university, I won't give any dates or anything, but about halfway through the university I discovered websites and all that coding and stuff. So I was like, okay, this is really cool. And then I started doing more freelance work, like websites and then web application development, and I was like, okay, this is really cool. And also I can get paid a lot more than for my creative work.
00:31:35.386 - 00:32:19.098, Speaker A: Yeah, I was financially incentivized to continue going down this web development rabbit hole, so I became very proficient in web technologies, in particular Javascript and nowadays typescript. For the last maybe five years or so, I've been doing exclusively typescript. I have deep fascination with the work that you do. I read the ethereum yellow paper and I know some opcodes. I'm very fascinated by this stuff. It's just unfortunately the financial incentives for the direction that I've taken my career, unfortunately that was a path of greater resistance. So I ended up taking just the trajectory that I was going in.
00:32:19.098 - 00:33:29.680, Speaker A: I became very proficient in typescript and node and stuff like that, for better or for worse, I guess. All the while, from then to now, it's been a handful of years, and I've done a lot of startups. I've always been very fascinated about doing startups. I think that startups are like the closest thing to playing imaginary games when you're a kid, but as an adult it's like going on adventures with your friends and doing dope shit. I really enjoy doing startups. I love the adventure and I love building stuff, but because I was poor for so long, but I really wanted to do startups, I had to become very efficient with operations. It's something that's always a top of mind for me after so many years of doing startups, is like, I'm also a really lazy person, so I'm always like, what's the easiest way I can get this thing done? There's like that XKDC meme where you'll spend like two weeks solving a problem that normally takes you like 5 minutes a day to do or something.
00:33:30.770 - 00:33:32.282, Speaker B: Overcomplicate things.
00:33:32.436 - 00:34:16.960, Speaker A: Yeah, that's me in a nutshell. That and also saving a buck. I'll spend two weeks building something so I don't have to spend. It's just habits I've developed from just bootstrapping startups for pretty much my entire career. And so yeah, I guess to kind of wrap that point up with this new project, because we're, from day one, a distributed team around the whole globe I was always concerned with, like, oh, man, salaries don't work. Synchronous conversations don't work. How do I get people to do their job, and how do I manage them without me spending so much time managing them? Because I'm too lazy to do that.
00:34:16.960 - 00:35:00.620, Speaker A: Defi, in particular, really exposed me to the efficacy of financial incentives. I think there is nothing truer than financial incentives to get people to do things. So the core ethos of the whole dev pool design is very crypto native. It's very all financial incentives. It's like, hey, there's kind of like, no rules here. You could do whatever you want, but if you want to get paid, and if you want to get paid a lot, do these things jump through these hoops? Because those are where the financial incentives guide you to go through. And it's working out pretty well, I think.
00:35:01.070 - 00:35:57.662, Speaker B: Yeah, I think it's definitely the future of sort of hiring and getting people to do the work, because getting hired for, let's say, a fixed hour can be a lot of money as well. Even if you can basically go on a spectrum and work super hard or get the bare minimum done, you're still getting paid the same amount. So I think this kind of model definitely incentivizes, okay, more work that's correlated to more money and less work, less money, and it also incentivizes the quality and efficiency of these developers. So time efficiency, okay, if you finish this quickly, you can move on to the next one, get paid more. So I think it's a terrific model. And just to touch on that, when you started this project, did you ever have an incentivized building projects from scratch instead of issues sort of sector in it?
00:35:57.716 - 00:36:07.522, Speaker A: Well, I guess everybody's got their own approach to how do they start from building a project from scratch. But technically speaking, because bear in mind.
00:36:07.576 - 00:36:29.030, Speaker B: That our flagship product, sorry, but relating to the bot, like the dev pool we're talking about. So let's say, okay, you want to build a module out. So basically it's not even started. Can you incentivize someone to start that module and finish it? Is that like another bounty option, or is it only issues?
00:36:29.180 - 00:37:06.040, Speaker A: So there are many ways to proceed with this scenario. It really depends on you as a founder, like how you want to play your hand. So what I've done in the past. So bear in mind, again, our first flagship product was a stablecoin, but then we ended up building this bot and the whole dev pool and all that stuff. And so in order to get this started, because I had to sell my team on this idea, right? I had to convince my team, like, this is not a completely stupid idea. And everybody's very skeptical because there isn't really that close of a parallel. I mean, I guess you could kind of say kind of like gitcoin, but.
00:37:09.930 - 00:37:13.426, Speaker B: It'S more sustainable for, I think it's.
00:37:13.458 - 00:37:46.978, Speaker A: More direct with financial incentives because it gets down to the commenting level and everything. The vision is like for every function you can perform as a contributor in a dow, if you can get directly paid one to one for your effort put in, that's the future vision of this model. But that's a tangent. So what I did, I built the first prototype of the bot. It was a very simple, just basic code base, and it kind of did very simple things. I forget, it was like assign unassign. It was really simple.
00:37:46.978 - 00:38:53.074, Speaker A: I think it was also like pricing because I really needed help with a priority level plus the time estimate to set a price because that was so tedious every time setting a price. So I built this prototype and this code base, and then from there, because I wrote that first code, I immediately filed like 20 issues, right? It's like, okay, here's what we need to do, and I break it down, right? So this was a very good foundation for one of our core team members to jump in, rearchitect the whole thing so that it could scale better. Basically, it was like proper foundation and then start hammering away at these issues. Now, I guess another way you could play your hand, because I think I mentioned this earlier in the call, but we're actively doing experiments for non coding tasks to be handled with the system in our dao. So for like one ongoing function we have is grant writing. We're trying to build relationships with institutions that we respect. Like, we recently submitted, like an optimism.
00:38:53.074 - 00:39:26.770, Speaker A: Granted, actually there was a grant for GitHub. They have some partnership with Polkadot or something, which is kind of unusual. But we were trying to get in because GitHub, I feel like we applied to, oh, yeah, synthetics. So like, we want to be associated with these guys because we want them to use our dev pool. Yeah. But anyway, so the nature of grant writing is not necessarily like, the deliverables are not really code. Not first, you're writing a big document, you're answering all their questions.
00:39:26.770 - 00:40:11.898, Speaker A: And so we have a few people on our team that are dedicated, essentially researchers. So they're not coding, and one of them is leading the grant writing efforts. So it's like a lot of writing tasks. And so we break it down on GitHub we have an issue, and then we make checklists and turn them into sub issues. And we could break down essentially like a writing epic, like, oh, finish this optimism, Grant. But then it starts from step one, write the first draft, step two, whatever, and you have like five. So with a little bit of training, I actually have a video somewhere on our website, like how to deliver a markdown document entirely inside of the GitHub UI.
00:40:11.898 - 00:40:51.126, Speaker A: So it's almost like Google Drive at this point. We're using a dedicated repository, and then you can literally entirely on the GitHub UI. You can click a button that says add new file, you can name the file, you can move it in any folder, and it's a markdown document and you can write in know inside of GitHub, write your document, click submit, open up a pull request, and then you can go through the exact same pull request review process. But this time it's not coding, it's writing. So now you have the research team, who are not coders, looking through the pull requests. And then again it goes through all the common incentives and all that standard flow. And this is completely not coding.
00:40:51.126 - 00:41:18.726, Speaker A: I can't stress this enough. So I think that there is a possibility where we could have all of our tasks across the entire dow on this system, even though it's on GitHub. But we're going to be making a lot of accommodations to make it more user friendly. But I really want to try to keep things as lean as possible when it comes to the user interface. I don't want to be building like a whole new website and all this crap because there requires a lot more onboarding. I think maybe you can make some.
00:41:18.748 - 00:41:38.106, Speaker B: Few issues, get people, yeah, I think that's like an amazing thing. I guess when you're speaking about this, I just realized you could make basically a new repo and then put like maybe a readme and then make issues with an empty repo saying what needs to be built.
00:41:38.288 - 00:42:16.742, Speaker A: That's what we're doing. So you can see on ubiquities, GitHub, I stress the team constantly. There's one guy in the team who used to be a lawyer and he's like, oh, we got to keep everything private. I'm like, no, dude, like public everything. We're a dow, everything public, public anyway. Everything. So if you go on our GitHub, if you dig, you can see there is a research repository, there's a partnerships repository, there's non coding repositories, and then if you go through the issues, you can see all of our live activity, if not there then in our telegram group chat, which is all public.
00:42:16.742 - 00:42:52.980, Speaker A: And so I stress this because, well, I don't want to be a larp. I genuinely think that dows are the future and I think what better way to ride that wave than to try to lead it, right, to be building all these tools and figuring out ourselves. How can we rethink how organizations are in the future? So that's something I'm very passionate about. But also genuinely, I think that especially in a distributed organization, information flows a lot more efficiently when things are all on public channels because you can just link and then it's like bam, here's a whole conversation. Now you have all the context. Like I don't have to repeat myself.
00:42:53.430 - 00:42:54.420, Speaker B: Yeah, exactly.
00:42:54.790 - 00:43:17.862, Speaker A: So yeah, I'm very adamant about everything must be public. So yeah, you could for yourself or anybody listening to this can go on our GitHub and dig through our issues and even some discussions, we've used discussions before. We've been able to kind of get through some simple non coding related tasks using this exact same architecture, which I think is pretty exciting.
00:43:17.926 - 00:43:32.750, Speaker B: Yeah, it sounds like a massive productivity boost. And you have like a directory for all the issues basically aggregated into one spot. So if someone just wants to see everything and go scroll through basically a bounty.
00:43:36.150 - 00:44:11.040, Speaker A: Again, also on GitHub, right, literally it's a GitHub repository with a custom script and it just mirrors the issues from all these linked projects. And so we're actively working on refining that. Fortunately the issues view has built in filters and so we're leveraging those filters and adding special labels so you can filter for typescript related bounties or solidity related bounties or whatever. Yeah, so we're actively refining all that right now. It's kind of rough. It's just like they're all dumped into one place.
00:44:12.210 - 00:44:14.222, Speaker B: Yeah, still works though.
00:44:14.276 - 00:44:51.080, Speaker A: Yeah, it still works. We have one of the researchers actively posting like promoting our dev pool on different websites, like crypto, jobs, whatever. And then people, we funnel them to our landing page. We have a landing page on a website and then one of the main links is like check out the issues or check out the open bounties. And it's just the GitHub issue, the dev pool directory. And it works. They click in and then sometimes if they don't know how to assign themselves the bot, it detects it's their first comment and it will drop the help menu to them right away.
00:44:51.080 - 00:44:56.860, Speaker A: It's like zero touch onboarding. It works, like, 99% of the time.
00:44:57.470 - 00:44:58.726, Speaker B: Sounds phenomenal.
00:44:58.758 - 00:44:59.340, Speaker A: Actually.
00:45:03.330 - 00:45:17.602, Speaker B: I think this could be really useful in auditing as well, like cybersecurity. So I wonder if that's been on your radar at all. If you want a code base to be audited while you're reiterating on it, how would that work?
00:45:17.736 - 00:45:36.162, Speaker A: So, two points. Number one, I'm sure you've heard of Sherlock. Sherlock is like a. Yeah. So I feel like they could probably maybe benefit from this because they're very decentralized. But I'm not sure if that was what you were getting at with your question. So, my other point I wanted to add occasionally.
00:45:36.162 - 00:46:06.622, Speaker A: Well, because of the nature of this, we have so many eyes looking at our code, we've been able to get a lot of interesting feedback and basically proposals in the form of just somebody files a new issue. Like, here's the problems with your code currently. I want to work on this, and then it gets priced, and then they can do it. And so, yeah, this week we had this new guy jump in with our ubiquity dollar repo, which is very code heavy. I don't know if you had a chance to look at it, but we have, like, a million smart contracts, for better or for worse.
00:46:06.686 - 00:46:07.300, Speaker B: Okay.
00:46:07.750 - 00:47:01.970, Speaker A: So it's a pretty dense protocol, but we got this guy who jumped in, and he's, like, seemingly pretty hardcore about optimizing for gas and also some security stuff, and he's been opening up new issues. So it's, like, really dope. And then we will discuss it on the issue, like the core contributors and them, and we'll have a debate, and then sometimes they've been turned into bounties. We just add the priority level and the time level, and you're off to the races. Or we close as not planned, because whatever we link, another thing that solves it or whatever, we definitely have seen and are seeing currently benefits of just having a very open, decentralized model where anybody could jump in and add their own observations or concerns. Anybody can open a new issue.
00:47:02.120 - 00:47:08.930, Speaker B: Sounds like it's covering kind of everything, and it's just kind of like the holy grail for contribution.
00:47:09.510 - 00:47:11.060, Speaker A: We're trying to make it that.
00:47:12.150 - 00:47:27.738, Speaker B: Yeah, it sounds like it. I would definitely use it if I was making open source. But you mentioned you're paying people in stable coins or whatever coins, tokens they desire or you desire, and you're building your own. So let's talk about that.
00:47:27.824 - 00:47:56.178, Speaker A: Yeah. So I guess basically right now we have two deployments of the payments on the beta of the dev pool. So we do mainnet, which is die. But we realized that with gas fees sometimes spiking up, if you're collecting a $25 bounty and you're paying $15 to gas fee or whatever, kind of sucks. So some people were complaining. I don't know. Like last month, there was like some crazy high spikes.
00:47:56.178 - 00:48:36.802, Speaker A: So we did a deployment on gnosis chain, which is so dope, because literally it varies between one 1,000,000,000th. You could do 1 billion transactions before it costs a dollar or like 20,000. But that's like the max range I've seen. It's great for these tiny, frequent payments. So that's using wrapped XDI technically. But once we're finished with our new deployment for our dollar, because we did, like, open heart surgery on our protocol, we did, like, the diamond standard, which is a very contentious topic. It's very polarizing, but we want max flexibility anyway.
00:48:36.802 - 00:48:55.270, Speaker A: So that was like a big open heart surgery. And we did a couple of other major, basically changes to our dollar. We're decking it out with every auditing tool we could find. We have mythx. We've got, like, slither. We're using foundry fuzzing. I think we have a chidna in there somewhere.
00:48:55.270 - 00:49:15.920, Speaker A: We were just throwing the kitchen sink at it, right, with our CI. And that's because we want to do it right. We want to be patient, want to do it right. And so with all this, we technically currently have our dollar on Mainnet, but I consider that more as a prototype. It's a very early version. What I plan to do, because we're pretty close. We finished the diamond stuff.
00:49:15.920 - 00:50:04.606, Speaker A: I think we just finished the collateral module because we originally started without collateral. Actually, back in the day when people thought that you could do stable coins without collateral. Yeah, we completely changed our protocol, like a million times. So, in conclusion, before we start our fundraising in about nine months or whatever in March, we definitely want to have our new deployment with all of the nice security CI and the diamond access control manager, all these bells and whistles. We want to have that ready to go. And then we also. I guess it's a little bit of a tangent, but also want to participate in curve bribes and stuff to boost our liquidity and position ourselves to be a lot more attractive for series a.
00:50:04.606 - 00:50:42.810, Speaker A: We also are actively doing research on issuing debit cards, which has been a real bitch from a regulatory standpoint. We're kind of honing in on either Singapore or Hong Kong right now. It just comes down to who we're working with. We have very specific needs or requirements, like we need API access to be able to extend the behavior of these debit cards, but that apparently is not that common. Like a lot of card issuing partners are just like very generic white label and you can't customize anything other than the graphic on the card. But we're trying to innovate, we're trying to build new things. So we need code access, we need to be able to access our APIs.
00:50:42.810 - 00:51:55.280, Speaker A: One future vision that we've done a lot of research on is genuinely making your EOA wallet, like your metamask wallet on chain, genuinely be your checking account. And I don't know if it's appropriate for me to get into the details right here and now, but at a high level, we have this specification, this design, to be able to essentially let you spend your ubiquity dollars in the real world, quote unquote, with your debit card. And then basically the next time you invoke the transfer call, next time you move your money on chain, it gets rebased so that we stay current. And so, yeah, the vision is that you can have ethereum as your checking account, so you can do whatever you want inside your checking account with your ubiquity dollars. You can go lp, you can go whatever, yield, farm, whatever you want. But we have designs for how we can monitor, basically keep track of all that and then allow you to spend it live with your debit card in the real world. And so innovations like these, I think could be pretty interesting for the industry because we haven't heard these implementations being done yet.
00:51:55.280 - 00:52:09.350, Speaker A: We got to figure out how to get these debit cards out there. I think we're pretty good at r and D. We're not that great at regulatory yet, so stay tuned.
00:52:11.530 - 00:52:16.280, Speaker B: Yeah, it's like the kind of road bump you need to get over.
00:52:16.890 - 00:52:20.362, Speaker A: Yeah, we spent a few months on that stuff.
00:52:20.416 - 00:52:24.934, Speaker B: But of course it'll be interesting though. Yeah, definitely need to experiment.
00:52:24.982 - 00:53:28.078, Speaker A: No, I think things get a lot more interesting, like when you combine different products and sort of make it the greater than the sum of its parts. Another future vision we have is being able to have these bounty hunters essentially have these on chain checking accounts where they can cash out instantly, whether it's through their debit card or through fiat, on and off ramping, and then having the ubiquity dollar sort of as being the bridge of everything. But the most interesting part, in my opinion, is that a stablecoin can be a very profitable business in a not very apparent way. So, for example, if we build an ecosystem of dope products, let's say the dev pool really kicks off and people are using it. In theory, we could subsidize the cost of using the dev pool to be apparently $0. I'll use air quotes and say apparently $0, it's free to use. But in reality, let's say we make it so that you have to settle payments in our ubiquity dollars.
00:53:28.078 - 00:54:16.078, Speaker A: So there's a few ways we can make money on the back end. Number one, swap fees, of course. Number two, mint fees, of course, if you're minting you ubiquity dollars. And number three, arguably, most importantly, getting yield off the collateral. So I don't know if you know, but like fracs is amazing at this, where they have a bunch of collateral sitting in the bank of fracs and they deploy that capital, that collateral in the DFI ecosystem, and they make anywhere between ten and 40% APR, whatever. But on 2030, $40 million, that's a lot of money for a team of like five or ten people. It's kind of magic where you can have these sort of products and services, like maybe a debit card and the dev pool and all these things, and we can say, oh, it's free.
00:54:16.078 - 00:54:45.400, Speaker A: But in reality, right, we're making money in the collateral in the back end or whatever. So I think it allows us to be very innovative with our revenue models and we can kind of race to the bottom with costs if we're competing with sort of like software as a service type stuff. That's one of many reasons why I'm very interested in making a stablecoin. It allows very innovative monetization models, very roundabout monetization models. Yeah.
00:54:47.210 - 00:54:59.354, Speaker B: I guess there's also inherent risk with that as well, though. If you deposit all this collateral into a pool and that pool somehow gets hacked and it's kind of all over. So I guess, how would you even deal with that?
00:54:59.392 - 00:55:02.350, Speaker A: Yeah, no, I mean, risk management is a whole nother conversation.
00:55:04.130 - 00:55:04.798, Speaker B: That's true.
00:55:04.884 - 00:55:38.566, Speaker A: It depends on how conservative you are or how greedy you are. They're kind of like polar opposite ends of the spectrum. Usually the higher risk, the higher reward. I think that we would be very incentivized to stay very low risk because we have more irons in the fire than just the stablecoin. We're trying to build an ecosystem. So, like I said, we haven't fully figured out our go to market strategy with the dev pool. Yeah, but I think if we're going to be conservative, yeah, we could charge a small fee to start.
00:55:38.566 - 00:56:13.790, Speaker A: And then if we see gitcoin step in, they're like, oh, we want to do something similar. We'll just race them to the bottom, you know what I mean? Okay, we'll see. We still have some time to figure out how we're going to play our cards there. But in conclusion, yeah, risk management, I would want to stay very more so on the conservative side. Lower yields and maybe trying to make up for that with some upfront charge on, let's say our dev pool, at least until competition comes up, and then we'll have more options, more ways to navigate.
00:56:13.870 - 00:56:51.038, Speaker B: I think we are running out of time, but it's been a pleasure talking to you and understand learning about this sort of open source incentivization program or program you built. I think it's definitely going to pop off. And I personally would be using it for open source startups as well. Even just like closed source. If you have a team of people, just add the multiplier, kind of pay them through that you can bring them on board as quote unquote full time, but you're just giving higher payouts to certain things. Yeah, I think that would work really well. Incentivize work.
00:56:51.038 - 00:57:08.470, Speaker B: Yeah, man. I'm super excited to see the future of this. We're really early stage seeing early days experimentation, but I think this could really be like a massive game changer. Not even just in web three, but in web two as well. Yeah, man, super excited. Love having you on. Definitely going to have you on again when you make more progress.
00:57:08.470 - 00:57:12.310, Speaker B: Yeah, it's been a pleasure, man.
00:57:12.380 - 00:57:37.470, Speaker A: Likewise. Yeah, no, I'm looking forward to our next conversation, if not on the podcast, then in real life. Come visit my part of the world if you got some free time. And also, I would love to learn more about your work. As I mentioned, I'm very fascinated by what you do. I understand I'm the guest and I'm the main person to be talking, but we'd love to have another conversation with you more about your work.
00:57:37.540 - 00:57:42.654, Speaker B: Oh, yeah, for sure. But yeah, that's it. This is Alex from ubiquity. And yeah, have a good day.
00:57:42.772 - 00:57:43.820, Speaker A: Thanks so much for having me.
