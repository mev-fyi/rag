00:00:00.170 - 00:00:24.026, Speaker A: We have a system running in our team which can detect the attack contract even before the hackers send the attack transactions, because they need to deploy an attack contract and then send the transactions to attack the protocol. So even before the attack transactions, when the hackers deployed and attacked smart contract, our AI based engine can precisely identify the malicious contract.
00:00:24.138 - 00:00:53.514, Speaker B: Scraping bits is brought to you by the following sponsors. MeV protocol maximize your eth staking value with meV eth exclusively on MeV IO and composable execute any intent on any chain. Coming soon to Mantis app. That's M-A-N-T-I-S-A-P GM GM. Everyone, my name's Digacci, the host of scraping bits, and today I'm with Andy Zao. Pleasure to have you on.
00:00:53.632 - 00:00:56.430, Speaker A: Thank you guys. I'm also very honored to be here.
00:00:56.500 - 00:01:02.622, Speaker B: Oh, honored. Thank you so much. Just for the people that aren't familiar with you, who are you and what do you do?
00:01:02.756 - 00:01:23.110, Speaker A: My name is Andy, I'm the CEO of Blocksack and I'm also a professor in Zhoujiang University, China, a very famous university in China. I also have more than ten years of experience in the cybersecurity area. Previous I'm working in the smartphone security, then I switched to the smart contract security for a couple of years.
00:01:23.180 - 00:01:30.234, Speaker B: What was your early days in smart contract security? Were you doing manual auditing or did you skip straight to automation? Kind of like what I did, yeah.
00:01:30.352 - 00:02:20.494, Speaker A: For the smart contract security, basically in my company or in our research team, we do both the static ones and the dynamic one. So for the static one, we have developed a couple of different techniques to enhance the static analysis of the smart contract. That's because most of the tools currently available in the community have some common issues because they have too many false positives. Like if you have ever used some tools which are available in the community, they have many false positives. Like if you detect the reentry issues, then you threw a simple smart country into the tool. I think it may report many, many reentry issues or many other issues, but when you manually check this report, you will find most of them are false positives. So we find that the false positives are the main issues of the current static analysis tools.
00:02:20.494 - 00:03:20.166, Speaker A: And the fundamental reason of such false positives are that they do not understand the semantics of the smart contract. So the semantics means that if you yesa 20 token, right? So you have the variables for the balance of each owner and you have the approved value. Who approved what type of amount to Lawrence do you need to Lawrence value. So basically in such smy contract you need to precisely identify which variable means the balance, which variable is for the Lawrence, something like that. And if you have this, then you have much better precision for this static analysis to us. So this is I think one insights we have obtained from our experience when developing the static analysis tool. And for another insights when we develop our static analysis tool is that you need to have a very good pent analysis engine to tell which one is correlated to another variable.
00:03:20.166 - 00:04:22.398, Speaker A: That's because relationship, exactly, because the data flow analysis is a basic technique used by the static analysis tool. And you need to model the memories, you need to model the storages, you need to program the tent propagation rules to perform my very precise and also high efficient tent analysis technique inside of your tool. So these two key techniques are very effective in our static analysis tool. So in our research team we have this static analysis tool running and we analyze each new creator smart contract on the blockchain and we will report the zero day vulnerabilities we have identified to the developers. Unfortunately some of the developers, they do not care about the vulnerability and we even do not a place to report to them. So that's very sad. But the static analysis tool, if you want a very effective static analysis tool, you need to have the semantics, you need to have a tent analysis engine.
00:04:22.398 - 00:05:23.186, Speaker A: So this is our experience for the static analysis tool. And besides the static analysis tool, we also have a dynamic analysis tool running in our registry team. That's because we want to identify the malicious transactions, right? So not only the vulnerable smart contract, we also want to detect the malicious transactions. The malicious transaction means that whether this transaction is attacking some protocols, attacking some smart contracts. So how do we do that? So we have a customized virtual machine with the capabilities of entrusement, so we can write our own detection rule that can be easily hooked into the virtual machine or the executing any of the smart contract. And we will capture different signals to show which one, whether this transaction is malicious or not. I can give you some high level idea of this, or whether the transaction, the sender of these transactions have some neighbors like this sender has performed some attacks previously where the funds come from, something like that.
00:05:23.186 - 00:05:41.766, Speaker A: So we combine different signals together to put a risk on the transaction. So this is how our detection engine works. And we also running this decay engine in our research team and we can capture the attack transactions in the first place. So this is what we are currently doing for this stack. Dynamic analysis.
00:05:41.878 - 00:06:00.522, Speaker B: Yeah, that's interesting. I've done the same thing with my static analyzer is the taint. Analysis is basically essential, but then use whatever you do with the static analyzer. You transfer all that data into a fuzzer. Right. And I was building my fuzzer as well. And it's really interesting to see how people approach it, but there are very interesting solutions.
00:06:00.522 - 00:06:32.138, Speaker B: People think very sequentially within this space, and there is a lot of dimensions to think of, which I think sequentially is not the right answer. Let's talk about the dimensions. You have the call data, right? But then you also have functions and the contracts, and then you also have the other dimension, which is the state. So it's very context dependent. And so now you have all these four different variables, dimensions, and they all impact each other with just the slightest tweak. So, for example, you can have contract a, contract b, all of their functions. Now you have to order them in all these different ways.
00:06:32.138 - 00:07:00.462, Speaker B: But there's not just the single one of function a and function b. Function b and function a. You also have the ability to do function a. Function b, function b, function b, function a. It's a really tough problem, and I think what you've been doing with your stuff is quite interesting. I know you've advanced Falcon recently to now transaction detection, so it's more of like a generalized front runner, but for hacks. And in doing that, it's very thought provoking.
00:07:00.462 - 00:07:24.438, Speaker B: And the front running game is dominated by these dedicated mev teams, right? And they do front running, sandwiching, back running, et cetera. And they have dedicated infrastructure, high frequency trading stuff where the latency is very small, and they're partnering with each other, block builders, relays all this stuff. So the question is, how were you able to front run these transactions instead of these meb teams?
00:07:24.534 - 00:07:37.370, Speaker A: Yeah, that's a very good question. So, basically, because the main target of our system, our technique, is not to front around the mev bus. So we are targeting the hackers. So we are targeting the hackers.
00:07:37.450 - 00:07:50.994, Speaker B: Yeah. So when the hacker submits transaction to a public mempool, if it's private, nobody can get that. But if it's a public mempool, then all the other generalized front runners are going to see that as well. So you've got to beat them. So how are you beating them?
00:07:51.192 - 00:08:38.366, Speaker A: Yeah, so very good question. So, basically, some hackers, because the securities, we always say that security is unrisk between the good guys and better guys. And in the early days, because it's easy, because the better guys, they do not know the existence of our team and the ambit bots. So in that time, so that depends on how you pay the gas fee or how you pay the bribe to the validator or builders. So that's much easier in early times. But in nowadays the hackers, they use some NVA bot technique to protect them from being front run. So even today we're seeing a very interesting technique deployed by the hackers to prevent their transactions being frontrung by the MVA bot.
00:08:38.366 - 00:09:36.942, Speaker A: So basically in their transactions, they will first check some values, like they will fetch a certain value from another smart contract to check whether this certain value like equals a. And the initial value of this variable is not by default. So when performing the hacks, when performing the attack, the hackers, they will first send a transaction to set up the variable in another smart contract to a variable like to a second transactions to actually perform the hacks, if you are MVA bot, because most, the common technique used by the MVA bot is to simulate one single transactions. So if you only simulate the second transaction, you will fail because the condition does not satisfy. The condition is set up by the first transactions. So because of this tricky part, most mua bot cannot handle this. And we can handle that because we have a technique to analyze the correlation of different transactions inside the memory pool.
00:09:36.942 - 00:09:40.566, Speaker A: And we will simulate a couple of bundles at once too.
00:09:40.668 - 00:09:52.618, Speaker B: Yeah, you would have to do multiple, yeah, you can't just do one because if you're just doing generalized front running, the standard is to just replace the addresses. So if it's like multiple addresses, you have to replace them all and you have to try every option, basically.
00:09:52.704 - 00:09:54.522, Speaker A: Yeah, you can activate, if they are.
00:09:54.576 - 00:10:33.110, Speaker B: Doing the multi contract stuff with the setup. Well then they would do the contract deployment, and then they'll call a function in that setup contract, set it to the new thing, then they'll use that in the exploit contract. But the way that you would fix that is basically like simulating again, but you would have to actually just check the state of what's being called. And so if that doesn't match the deployment state of that original contract, well then you have to set that somehow and find that function with like a CFG and finding whatever that was, and then modifying the exploit contract to set that as well, or even just remove it completely. So that is quite difficult. But it's crazy that you've actually done this and now it's working.
00:10:33.260 - 00:10:42.442, Speaker A: Yeah, it's working, but you need to manage development efforts to do that. And you also have a very good and quick efficient analysis engine for that.
00:10:42.496 - 00:10:52.342, Speaker B: Yeah, it's very impressive. You guys have prevented 20 hacks and around $15 million in losses already. And that was within, it was like six months right before you launched.
00:10:52.406 - 00:11:04.382, Speaker A: Oh yeah. So for this prevention of hacks, it's done like in the one and a half years, in the past one and a half years. So it's not in one month or two months, it's a continuous efforts. One and a half year. Yeah.
00:11:04.436 - 00:11:38.618, Speaker B: But still there's no one else doing this. It's a really great thing and I think everyone should at least have it because it's an important thing. And even though it might not be 100% savior rate of everyone because they have to sign up and maybe there is some really obfuscation techniques that would be different to kind of assess. It's still better than nothing, right? Like you save stuff, it's actually evidence that you've saved stuff. Getting hacked is like the downfall of an entire company and all the users, all the reputation, it's just gone. So it is a very important thing. How did you guys build this? Were you guys using AI at all or.
00:11:38.618 - 00:11:40.954, Speaker B: There's no way it can be completely heuristic.
00:11:41.082 - 00:12:45.262, Speaker A: So basically we combine different techniques together and for the detection of the hacks, so we combine the AI based solution with the behavior analysis ones. So for the AI based solutions, because we use the AI technique, machine learning technique, to detect the attack contract. So we have a system running in our team which can detect the attack contract even before the hackers send the attack transactions, because they need to deploy an attack contract and then send the transactions to attack the protocol. So even before the attack transactions, when the hackers deployed the attack smart contract, our AI based engine can precisely identify the malicious contract. I'm not saying that we do not have false positive, but the false positives are pretty much very known. So even in this stage, before the hack transactions, we can detect the attack my contract. But the problem is that when you identify an attack smart contract, you may not know the actual victim of this hack.
00:12:45.262 - 00:13:27.178, Speaker A: That's because sometimes the destinating address is not hard coded. In the attacks my contract, they can be passed from the parameters, something like that. So you need to have some fuzzing technique to trigger that. But if all the targets my country address are passed from the parameters, then even fuzzing cannot help. So for this complicated ones, we cannot identify the attacks my country at this stage, and for the attack transactions, we use some behavior based solutions to detect the hack transactions. So the high level idea is that every hackers, they want to make profit. So you need to precisely calculate a profit of transactions.
00:13:27.178 - 00:13:53.750, Speaker A: And if this profit is above a certain threshold, then this risks some flags. So by combining this together, then you can have a very good precision for the detection of the attack transactions. And after detecting attack transactions, then we will automatically synthesize similar attack transaction like the MEB bot does, and replace the profit address and put this on a chain. So this is basically how the system.
00:13:53.820 - 00:14:08.220, Speaker B: Works with the AI stuff. I can't imagine it being a supervised learning model. I feel like it would have to be a reinforcement learning kind of deal, because there's just not a lot of hacks, right? So it's not enough data to really do that.
00:14:08.830 - 00:14:56.230, Speaker A: I think you mentioned a very good point for the machine learning, for the malicious smart contract detection, because we do not have much samples to train the model. But in this case, the key insights of how to make these scenes work is that you need to extract the key features inside the smart contract. Someone just use the sequence of the body coder to train the model. That doesn't work because the sequence of the body code is too general, it's too common. For this smart contract, we need to extract the distinct features of the smart contract. So what we are currently using, including the control flow graph, the dataflow relationship between the key functions, and we also use some, the address neighbors or the property of the creator for the smart contract together to train the model. It proves to be very effective.
00:14:56.310 - 00:15:23.154, Speaker B: So you basically extract key features. So for example, let's say hard coded addresses or address passed in as call data, Coldata ox for example. And then maybe they do. I'm asking if they're doing solidity. It's a common thing you've seen slowly masking with 20 bytes of f's, for example, with the end. That's pretty common in solidity. But if it's a custom high code contract, I mean, there's got to be a pretty sophisticated hacker, first of all, to do that.
00:15:23.154 - 00:15:46.570, Speaker B: But the sophisticated hackers, ones that are really strictly planned, would 100% be using private transactions of custom bytecode and maybe even swarms of transactions to obfuscate. This was something I was studying because I was very interested in this stuff. Proved to be effective, actually, I've never seen anyone do the kind of techniques I found. I might even write an article on it, actually, because I would never use them. But it was interesting. Yeah.
00:15:46.640 - 00:16:02.366, Speaker A: Before doing this research project, I also do not think it works. But after six months, I have a PhD student working on that, and after six months we prove it's very effective. And before doing this project, I do not believe that, but after this one, I think it works.
00:16:02.468 - 00:16:23.730, Speaker B: Yeah, it's crazy. I think it's such a remarkable step in the right direction and there needs to be more tools like this. But this also begs the question, now that you're using AI, how do you kind of see how much AI is going to impact, first of all, your business and what will be obsolete because of AI? And what can someone do to prepare today for this revolution?
00:16:23.890 - 00:17:16.326, Speaker A: Yeah, so honestly I'm not an AI expert, so we're just using AI applying to our research area to detect the malicious smart contract and to do other things. So I think the potential of the AI in security area has not been full exploited. And one reason is that for applying AI into the security area, I think you need to have a very deep understanding of the problem you are solving. And because you have a very deep understanding of the problem you are solving, then you can have a very good extract of the futures. I think the future is very important. Right. So even for the same smart contract or for the same transactions, if you do not have a very good future for the training, then the result will be totally different.
00:17:16.326 - 00:17:30.902, Speaker A: So yeah, from my perspective, I think the potential of the AI has not been fully exploited because you need to have a combination of a very good AI person and a very domain expert to extract the features.
00:17:30.966 - 00:18:15.580, Speaker B: Yeah, I agree. That's very two different, it's a combination of two fields, two domains. First of all, being good at AML is hard and then it takes time to learn this stuff as well. You've got to know math, you got to know everything to do with ML, you got to know the packages, libraries, and then you've got to be inside of the crypto space as well with another domain which is by code and also cyber. That also takes time. But I think people that merge from pure AI to crypto, it wouldn't be as hard as going from crypto to AI, I believe because it is way difficult, way more difficult in pure AI to get into that just because like the math you need and the total understanding I guess of our current architecture and how it all works. But it's super interesting, I think.
00:18:15.580 - 00:18:53.078, Speaker B: What do you think will be obsolete? Because AI is obviously going to change everything. And I think if you're not using AI you will not have an edge over other people. I think in all these businesses because it's hard to compete. Like I was doing the same thing with the fuzzer and the stack analyzer. But I know people that do AI, and it makes sense, because if you're thinking about this infinite possibility space, infinite action space, you can't just brute force that. You need some kind of intuition to filter out all the actions and to know what to actually target. So you need AI for this.
00:18:53.078 - 00:19:33.522, Speaker B: You need something that can iterately anyway, you need something that can learn over repeated instances, especially if you're writing something on all these protocols, all the contracts, millions of instances, right? Or runs. It needs to be able to learn intuition. Otherwise you're building the intuition into it yourself. And that's very time consuming and also very flawed, because you can't think in all those dimensions and you don't know what you don't know at the end of the day. So it's extremely, I think personally if you're not into it, you should get into it regardless, because I didn't even know math and I'm getting into it. So if I can do it, anyone can do it. So we'll see.
00:19:33.522 - 00:19:35.410, Speaker B: But it's a big dedication.
00:19:36.570 - 00:20:32.946, Speaker A: Exactly. I can share recent experiment on the AI doing by another student. So basically, because we have a fuzzing system for this, my contract, to find the vulnerabilities, we have an internal system to do that. We use the AI to generate the seed inputs for the fuzzing, and it turns out very effective. How we do that, we have five smart contracts. To be fast, we first input these smart contracts into the chat GBT and we will summarize the key functionalities of each function, telling this function the main functionality of this function is doing what another functionality of another function is doing that. Then after that I will ask a GTP to say please generate 50 different inputs for these functions and it turns out very effective.
00:20:32.946 - 00:20:37.510, Speaker A: And we use this as a CS input to further smart contract.
00:20:38.490 - 00:21:01.166, Speaker B: Interesting. Yeah, I think llms are actually quite good. The best we have in terms of, I guess, understanding with embeddings. I don't know too much more apart from it, but it is like the best effort at the moment. So it makes sense. I think a lot of people are using chat GBT, but that seems like a really good use case. I know some people that are doing it to kind of explain the contracts to them.
00:21:01.166 - 00:22:02.914, Speaker B: So it kind of removes all the understanding. It quickly helps you get up to speed with it instead of trying to understand the entire code base, because it could be like 1000 line base code base, right? Or multi contracts, multiple thousands of lines. It's really difficult to see the relationship between everything and the dependencies. But I did want to ask, since you have done this new transaction blocking, so now you have the transaction blocking, but why wouldn't you take it a step further and actually try and find all the zero days and all the contracts? Because if you think about it, if they're a sophisticated hacker and they actually know what they're doing, and they're going to target someone, and let's say it's like a 600 million dollar hack like Ronan or something, or maybe something more realistic, like a 200 million or 20 million on a protocol, they would just send a private transaction and you wouldn't be able to block them. Why wouldn't you go fully invested into the zero days preventing all of them? Because then if you find it, you can just private transaction that and you kind of save everything to begin with.
00:22:03.032 - 00:22:51.886, Speaker A: Yeah, very good question, I think. Yes, actually we have some alpha project inside the blocksack. We are actually doing that. So because for the Falcon block, we can detect the malicious transactions or in the memory port, but for the private transaction, we cannot see that. So we want to put the effort, we want to push the effort a little further to detect the attack smart contract. So this is the current stage, and we also want to put the efforts a little further, like what you said, to detect the vulnerabilities, to detect the vulnerable smart contract even before the hackers, as I just said, we have the funding systems to do that. But currently we are still improving our fuzzing system to detect the vulnerabilities.
00:22:51.886 - 00:23:39.030, Speaker A: Zero day vulnerabilities for the smart contract on the blockchain. I think there are a couple of two or three challenges when to do the fuzing for the smart contract to find the vulnerabilities. One of the challenges, because when you fuz a smart contract, you need to generate the inputs of the smart contract, basically the transactions. But for the smart contract, you need to generate a serial sequence of transactions to trigger the vulnerabilities. And sometimes the sequence of the transactions, they have dependency on each other. Like you need to have first transaction and a second and a third transaction, and only the sequence of this rate transaction are transacting. One, two, three, then they can trigger the vulnerabilities.
00:23:39.030 - 00:24:33.502, Speaker A: So you need to generate a couple of transactions and you need to understand the dependency of these transactions. This is pretty much harder, pretty much hard currently. So it's a challenge one, and for the second challenge is that you need to have a very oracle to determine whether, let's say you send a transaction to a smart contract, then how you determine you trigger vulnerabilities. Of course, we can currently use the similar tactic of the profit. So we will calculate the profit of a transaction. So if these transactions triggers a very high profit or cause the has factor of some lending protocol to be too big or too small, then we will see the ISA vulnerability. But you have different types of oracles to summarize for the fathers.
00:24:33.502 - 00:24:35.182, Speaker A: So this is the second challenges.
00:24:35.246 - 00:24:56.934, Speaker B: Yes, that second part. It's quite interesting because if you're, let's say a new protocol came out, right, and it has a token and it hasn't got any liquidity pools with big tokens, it might be with another token that's not even, you can't even price it, right. So it's a giant hurdle. Have you ever thought of how you would approach that with that kind of oracle?
00:24:57.062 - 00:25:40.502, Speaker A: Yeah, exactly. So this is another challenge because you need to prepare the environment for the feathers and you need to prepare, maybe you need to prepare the Dex pools, you need to prepare different tokens, you need to feed the price of these tokens into your system. You need to prepare different kinds of scenes into the fathers. So it's very complicated. So we can say that for the simple vulnerabilities, like as we entry ones, it's very easy to trigger, for the father's trigger. But for some complicated ones, like have the price manipulation ones, we would say we are still working that, what we call that to be a product ready system. So we still need some time.
00:25:40.502 - 00:25:43.126, Speaker A: But you're right, we are working towards this direction.
00:25:43.238 - 00:26:13.614, Speaker B: Yeah, it's not a trivial task at all. It requires a lot of, I guess. Well, it's a lot of complexity, right. And you need to account for a lot of things that depend on other things. So it's like you ask question and now you just get two more questions, and now they relate to each other and it's just continuously all the way down. But yeah, that oracle thing is probably one of the hardest things. And it just so happens it's also one of the most important because oracle manipulation is probably the biggest attack vector.
00:26:13.614 - 00:26:49.838, Speaker B: Everything kind of relies on that. And in whatever way, it could be like an internal exchange rate, it could be an external one versus an internal one. So like some kind of arbitrage which they haven't accounted for. And there is bugs in everything because human error is just certain. Right. And the amount of interactions that it can occur with a protocol is not going to be accounted for. There's new protocols coming out every day which your current protocol can now interact with and it could be a sequence of five different protocols in that regard, and it's not easy, but whoever can.
00:26:49.838 - 00:27:27.542, Speaker B: I think you need AI because you need AI. Not I think, but because you have to think spatially of all these different functions in different contracts that are vulnerable. You can't think of them sequentially because there's just so many possibilities. Right. So I think I was talking to someone before, earlier this year about this, and I was talking to him about the pickle finance exploit. And it's a really interesting one because it has eight vulnerabilities in it, and if you missed one of them, you wouldn't have the exploit. And it had to be in a specific sequence.
00:27:27.542 - 00:28:23.046, Speaker B: And this exploit actually consisted of five custom contracts. So it was five custom contracts, contracts to basically build out the context in which these sequences of vulnerable functions could be used in a specific way. And so another part of it was understanding that, let's say in solidity, right, you have an address and bytes 20, they both mean the same thing. And people overlook this because you do need to know what these types mean. And everything is just bytes. But basically what they were doing, which I found was really fascinating, was they created this contract which was like a fake underlying token, and the fake underlying token balance of returned an address. It didn't return an actual amount, and that's not true because an actual amount is just bytes 32.
00:28:23.046 - 00:28:50.514, Speaker B: An address is bytes 20. So you can pass in the address as un two five six, because it is technically that. Right? And so that actually depended, that actually created this entire chain because it created like a delegate call situation where it was being used. And that's how it kind of happened. But it was really interesting. You have to generate contracts that do specific things which enable new sequences. And this is not trivial.
00:28:50.514 - 00:29:27.138, Speaker B: This is not trivial at all, to be able to generate a contract to enable an exploit, and five of them at least, it's an extremely fascinating problem. And I think it is very stimulating. And I think there's nothing better to do than this kind of stuff. I love it so much. But yeah, this kind of stuff is really hard. And have you thought about all of this stuff? Like, what are your kind of techniques that you're looking into now? Obviously, I just said spatially looking into isolated functions and seeing how they interact with each other, the relationship stuff is definitely one of the hardest parts. So how are you kind of tackling that? Because taint analysis is frankly not enough.
00:29:27.224 - 00:29:54.614, Speaker A: Yeah. So for the relationship between different smart contracts. So we are currently doing a very interesting thing. So we will manually connect the top ten DeFi protocol, the smart contract of the DeFi protocol. Then we will perform the manual analysis to draw a figure of the relationship between different smart contracts. As the WSTh can be used as collateral into a protocol ABC. Then we will draw a line between these protocols.
00:29:54.614 - 00:30:48.970, Speaker A: And if one token can be used as the underlying token of another smart contract, then we will connect these protocols together. So basically we manually, of course, using some scripts to want to get a whole picture of the relationship of different top protocols. And we were using this insight to guard static analysis and fuzzing techniques. So this is one thing we are currently working on, that it's still in early stage, but the relationship we have generated sometimes is helpful for the static analysis and for the faulting systems. Another one work we are currently doing is for the type inference. So we want to infer for the input data, for the call data inside a smart contract call, we want to infer the type of the input data, like from body zero to byte 20, so it's the address. And from another segment of the input is the value or u into 32, something like that.
00:30:48.970 - 00:30:54.942, Speaker A: So we try to leverage the static analysis to perform the type inference since on that.
00:30:55.076 - 00:31:11.890, Speaker B: Interesting. Yeah. The relationship between stuff, is it kind of like a graph that you're doing? Okay. Yeah, it's difficult because let's say these are a few techniques as well. If you have a contract and it has references to other contracts in it, let's say hard coded addresses. Right. It's quite simple.
00:31:11.890 - 00:31:33.146, Speaker B: That means, you know the kind of space you can access and how they all connect in that relationship. But there's also contracts that don't even directly reference each other. You can reference them with cold data, or you can create a pool that now references a new contract. And that could be a vulnerability, like vault, for example, something like Hermoda, I think it was called iron vault or something. It was in the unit ecosystem. Yeah.
00:31:33.168 - 00:31:44.698, Speaker A: It's not easy, but we can leverage the onchain transactions to connect them because the on chain transactions can reveal the interactions between different smart contracts. How can transfer something like that?
00:31:44.784 - 00:32:22.922, Speaker B: Okay, but the flaw with that is you're looking at the normal sequences of functions, right. And to find a zero day, you got to break the norm and you got to do something different. Well, I think it's good to identify what the normal is, and now you know what not to do, how to break it, which is good. Interesting. So what are your plans with the fuzzer? Are you going to pair it up to do some kind of neural network fuzzing. That's trailer bits has attempted to say it's not worth it, but quite frankly, it is just not being implemented correctly. And so what's your kind of plan with the fuzzer? Are you going to do neural network fuzzing assisted or completely AI? What's the kind of go to now?
00:32:23.056 - 00:32:56.654, Speaker A: Yeah. And for the fuzzing. So first we try to have a very good type inference system to facilitate the generation of the seed inputs and the mutation of the inputs for the fuzzer. So this is one. And we also leverage the AI to help us to better mutate the inputs or to better generate the seed inputs for us. So we are using AI to do that. And we also try to speed up the fuzzing process because we want to have a very efficient one to quickly identify zero day vulnerabilities.
00:32:56.654 - 00:33:01.674, Speaker A: So this is three different parallel works. We are trying to improve the fuzzers.
00:33:01.742 - 00:33:24.026, Speaker B: Okay, interesting. There is something that is a bit different from this tooling conversation when we think about the space, right. And you're a professor, so you know about this stuff when more orders get into the space. Right. I think there's access to information is quite out there. A lot of people are explaining how you become a top tier auditor. People like leading security researchers at Spearbit or trailer birds, anything, even just solo auditors.
00:33:24.026 - 00:33:49.378, Speaker B: They're doing really well with the influx of new auditors. Right. How do you aim to really differentiate yourself from these new players coming in? And I guess other firms and other people that are wanted have the skills. Obviously, there's not a lot of them, but they're still coming in. And as they come in, these smarter people come in, maybe even with AI. I know people like intestify are doing AI exploit generation. I'm sure you've heard of them.
00:33:49.378 - 00:33:55.334, Speaker B: And what are you doing to really differentiate yourself from these people as new orders come in and new players come into the space?
00:33:55.452 - 00:34:31.954, Speaker A: Yeah. Well, that's a very challenging question. I think from my perspective, you need to have a good understanding of the trend of this particular area for the Defi protocol security area for each year. I think there are different new attack vectors, new types of. And you need to have a very good motivation or skills to try to study these new things. And from my perspective, I think how to quickly learn these new things, how to quickly digest new knowledges, I think is my advantages. And of course, there are many smart people, they are coming to this field.
00:34:31.954 - 00:34:57.578, Speaker A: But I would say that because I have been trained as a PhD student, I know how to quickly into a new area, how to quickly understand the state of our art, how to quickly find a good problem to work on, and how to borrow the techniques from another area into this area to solve this problem. I think that's my one, to differentiate, differentiate me from others 100%.
00:34:57.664 - 00:35:45.194, Speaker B: I think if you're thinking about, I guess, a group of people, right, and they're all smart and capable, the main difference is just the creativity. That seems like if you're all on a plant level field of which is never true, all just like smart equally, then the biggest thing is creativity, right? We all think differently and have contrarian views. So I think that is the main thing is like truly believing in yourself and believing when others don't pretty heavily that you can do something and no one else is really doing that. And you believe that it can be done. You might not know how it can be done, but as long as you keep pushing and have the passion to find that, it's really the research that's the main thing. As you said, being able to identify new trends and capitalizing on them is 100% the main thing. And it happens so often, you just got to be prepared with the knowledge to capitalize on it and bounce on an opportunity.
00:35:45.194 - 00:36:17.414, Speaker B: Unfortunately I haven't because I don't know AI being in the right time, at the right place, without the right skills though, I think AI is truly the next frontier. And anyone not upskill into it I think is going to be left behind. In developer worlds you have like the domain knowledge and also AI. But if you combine them, you're in a world of difference because you have knowledge of both areas. And so you can think of better problem solutions versus sectioned off knowledge. I guess a good example is understanding math. You look at the world differently to someone that doesn't understand it.
00:36:17.414 - 00:37:02.386, Speaker B: And if you combine that with different things like financial sector, then you can think of ways to build really efficient algo trading systems, right? And gain an insane edge over the competition. I think there was this guy actually on Avax that captured, I think like 90% of all arbitrages because he just had a math, just a math edge. That's what I mean. Like if you have just like two domains, you can really capture a lot of opportunities because it's just hard to learn this stuff. And the more domains you know it can combine, the less competition significantly there is. It just gets cold away. So where do you see yourself and blocksec in the future? How do you see yourself progressing in your career and in the company itself.
00:37:02.386 - 00:37:05.778, Speaker B: And where do you see the industry going and where it should be going?
00:37:05.864 - 00:37:48.658, Speaker A: I think for the industry, because even in the past few years, because the web three is a very new area and we are still in the early stage of this new field. And from my perspective, I think the industry is moving very fast. And at the same time there are so many security issues have not been addressed by the industry. And we trying to use our lower solutions to help the ecosystem to move fast but also move secure. Like we have the products for the protocols to protect their assets. So this is one thing. And we also see in the future that there were a couple of different web three users into this field.
00:37:48.658 - 00:38:26.334, Speaker A: And the users, they also need a security protection because it's a little complicated for the users to use this product currently. They need to have a very good method to protect their product keys to protect the assets, because most of the users do not understand, even they do not understand the approval scenes, so they just approve all the tokens to the malicious smart contract, something like that. So we need to have a very good protection system for the DeFi users which have not been addressed by the current industry. Of course there are some companies that are doing that, but there are better ways to protect the users. So I think this is what I'm doing.
00:38:26.372 - 00:38:54.326, Speaker B: Yeah, I think on top of the puzzle, you can expand into like a wallet. When you're talking about protecting users, there's two different ways or three different ways. It's like the pending transactions, which isn't 100% certain, so you have to go a bit granular. And that could be like finding the zero days themselves. But if that's not an option, then just even having the ability to embed the analysis in the wallet itself might be good, even if it's like a quick one. Right. They're going to be doing tokens or whatever it is they degen into.
00:38:54.326 - 00:39:01.770, Speaker B: But if you can perform some analysis before they do the transaction, and I think someone's done this before. I forget which company this was.
00:39:01.920 - 00:39:10.214, Speaker A: Yeah, a couple of companies doing that to simulate the transactions and to tell the users the consequence of transactions if they sign these transactions.
00:39:10.262 - 00:39:51.730, Speaker B: Yeah, I think that's really smart. And I think it's an easy progression into the company or anything that does security, I think is a really great way and still directly give it to them. I think it was fire or something, I can't remember. But yeah, those are really good, the simulations, but I think they're kind of flawed because if you're doing like a transaction into an LP, for example. I mean, people do custom bytecode and do conditional functionality. Let's say there was LP, then it'll switch to doing something else. So the initial simulation of when it has zero money or whatever it is, it wouldn't come up unless you actually test everything, every single function pathway.
00:39:51.730 - 00:40:06.314, Speaker B: That's something I was thinking of. But also there's so many difficult problems. You got to pick your poison. What are you excited for? The future of cyber, cybersec and AI combining. I'm sure you're going to use a lot more. What are your kind of plans and how do you see yourself going down that route?
00:40:06.442 - 00:40:36.834, Speaker A: Yeah, and as for my plan, I think we want to combine these new techniques together to better protect the community, to better protect the users. And we will continue invest our resources into the AI scenes, AI combined with web three security scenes to have a better products. So we want to push things further to have a better attack detecting system, funding system, better solutions to protect the users assets. So this is our current plan inside of bossack.
00:40:36.882 - 00:41:05.502, Speaker B: Interesting. Okay, well, I super hope that it gets way better and you're able to do a lot more. You're doing a lot already being able to prevent all these hacks. But I think there's so much wiggle room for more innovation and it's only just getting started. I think once people start getting wind of it and you prevent more hacks, it's going to become much more prominent and a lot more competition, which is great, healthy competition to prevent hacks and actually expand the ecosystem. Because the end goal is to kind of replace CFI. Right.
00:41:05.502 - 00:41:35.382, Speaker B: We don't want to be waiting four months to get rid of money out of our bank accounts. It's pretty ridiculous. So any effort in the infosec sector is actually underappreciated for, I guess, retail and existing protocols. They only really know it until they get hacked, I believe is actually how a few people got into it. But man, I'm super excited for what you guys are building and I'm really optimistic about the future with cyber and crypto. But man, I really appreciate you coming on. I'm super glad I got to be the first podcast you jumped on.
00:41:35.382 - 00:41:38.658, Speaker B: Yeah, I really appreciate your time, Andy. It's been a great chat.
00:41:38.754 - 00:41:40.410, Speaker A: Yeah, honor to be here. Thanks. Catch.
