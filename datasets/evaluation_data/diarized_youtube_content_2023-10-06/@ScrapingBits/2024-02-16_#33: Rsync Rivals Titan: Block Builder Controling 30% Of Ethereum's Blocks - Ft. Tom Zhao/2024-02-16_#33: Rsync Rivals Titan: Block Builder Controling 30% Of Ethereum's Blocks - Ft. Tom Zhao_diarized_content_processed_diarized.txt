00:00:00.410 - 00:00:13.514, Speaker A: Probably the lowest hanging fruit is that you look at who is making money on what blocks, and then you can focus down what you're looking at. Imagine writing some code that just fits out and says, you need to do this. It's pretty hard to do, especially if you don't know what you're looking for at the beginning.
00:00:13.562 - 00:00:26.470, Speaker B: Right. This episode is brought to you by Fastlane trustless Mev, GM. GM, everyone. My name is Dugachi, the host of scraping bits, and today I'm with Tom from Arse think. How's it going?
00:00:26.620 - 00:00:28.454, Speaker A: That's all right. What about you?
00:00:28.492 - 00:00:37.814, Speaker B: I'm all right as well. Just for the people that don't know who you are and aren't involved in the block building space. Meb space. Who are you and what do you do?
00:00:38.012 - 00:00:43.722, Speaker A: I'm Tom. I work on async Builder. Been running for, I guess, since the beginning of the year.
00:00:43.776 - 00:00:47.066, Speaker B: So like nine months now. Started in 2023, something like that.
00:00:47.088 - 00:00:53.974, Speaker A: I mean, we had some very basic stuff. We didn't have like an extra data field and branding and stuff. We had it like a little bit before that.
00:00:54.112 - 00:01:00.510, Speaker B: And what were you doing before you even got into block building? Were you doing Mev to begin with or just dropped into it first?
00:01:00.580 - 00:01:05.742, Speaker A: Yeah. So working like, the trading space, working on chain trades on. Not really atomic.
00:01:05.806 - 00:01:09.906, Speaker B: Oh, you're doing non atomic trades, statistical arb or something else?
00:01:10.008 - 00:01:18.660, Speaker A: I think people in the MeV ecosystem say that. I think it's an awful label, but I guess that's what people are labeling it.
00:01:19.210 - 00:01:21.462, Speaker B: Okay. That's the only thing I've heard, really.
00:01:21.596 - 00:01:31.350, Speaker A: I think, like, stadub is more of like mean reversion or some kind of momentum trading strategy, whereas most of these trading things use basically just trade against the market.
00:01:31.500 - 00:01:37.770, Speaker B: Okay, got you. Yeah. What made you transition from that into building a block builder? And how do you even get into doing that?
00:01:37.840 - 00:01:44.938, Speaker A: Yeah, I guess we basically just saw that. Pretty inefficient, the kind of existing setup. Most block builders compete on the same metrics.
00:01:45.034 - 00:01:45.534, Speaker B: Right.
00:01:45.652 - 00:01:58.306, Speaker A: People talk a lot about order flow, but there's also how fast are you to act on information and how smart are you about it? We basically just thought that existing builders weren't really competitive on the other two.
00:01:58.488 - 00:02:22.134, Speaker B: Yeah. Different block builders perform better in different environments or contexts of the market. Like if there's a bull run and people are doing something certain time, a certain block builder would perform better. Then if one block builder is specifically targeting downtime or bear markets, there's not as much activity. They might be way better and capture larger portions of the market. How do you balance that in a block builder?
00:02:22.262 - 00:02:32.442, Speaker A: Most block builders have two kind of problems, right. One is that you want to look relevant. People know who you are, they will submit trades to you. And then the other is to make money.
00:02:32.496 - 00:02:32.762, Speaker B: Right.
00:02:32.816 - 00:02:48.802, Speaker A: And they're kind of slightly orthogonal because most of these blocks are pretty uninteresting. You don't really make money on them. Everyone has more or less the same block in a lot of these cases. So these, if you're just trying to get noticed, you probably want to spend more time figuring out how to make money if you don't have this problem.
00:02:48.936 - 00:02:59.734, Speaker B: And how do you really maximize the amount of money you're making? Obviously you have the transactions that are paying the most for the validator, et cetera, and you get a portion. Apart from that, how do you really maximize it?
00:02:59.852 - 00:03:18.380, Speaker A: Some of it is being smarter to sort. One of the other ways is to enable people to interact with the block in certain ways, like insert transactions in certain ways, something that has been done a bit more recently, and then sometimes you just make money just by being faster. It really depends on the exact situation.
00:03:18.830 - 00:03:42.494, Speaker B: Right? Yeah. Having the different kind of API calls to do different things would make sense. Being able to be more flexible with the bundles instead of just sending a bundle. And that's it. I guess it all comes down to how many people are really submitting to your builder anyway. What would separate you from the other people, really, apart from just that? Why would someone submit their bundles to you over someone like Beaver or Titan?
00:03:42.622 - 00:03:50.126, Speaker A: I guess it really depends on what someone is trying to achieve. In a lot of cases, people are just going to send to anyone who's winning a lot of blocks.
00:03:50.158 - 00:03:50.450, Speaker B: Right.
00:03:50.520 - 00:03:59.778, Speaker A: That's kind of part of the reason why I mentioned before, one of the things that we have to worry about as a block builder is you want to win some blocks, and so we pay for these blocks.
00:03:59.794 - 00:04:00.118, Speaker B: Right.
00:04:00.204 - 00:04:08.394, Speaker A: Pretty uninteresting blocks. They're just pretty cheap where you can just pay a little bit and win a block for not a huge amount of money. And this is basically just so that people would know who you are.
00:04:08.432 - 00:04:08.826, Speaker B: Right.
00:04:08.928 - 00:04:12.534, Speaker A: It will depend on what kind of transaction someone's submitting.
00:04:12.582 - 00:04:12.842, Speaker B: Right.
00:04:12.896 - 00:04:29.374, Speaker A: If you do some atomic dex arb, you probably just submit to anyone who isn't going to unbundle you, isn't going to steal your opportunity. It's going to do something malicious that's probably good enough for other traders. It's a little bit more of a complicated question. If you take on risk?
00:04:29.422 - 00:04:57.814, Speaker B: Yeah. So it's like different risk assessments with different builders and whether you can trust them or not. I think Beaver build is like their own meb team, basically on top of a builder. So if you submit a very lucrative strategy to them, you might risk losing your entire strategy if they just monitor it and steal it or something. Don't necessarily have to unbundle it, but they might have like a monitoring system to see if anyone's making a good amount of money with a specific strategy, then just copy it later. So I guess there is that risk with everyone inherently.
00:04:57.942 - 00:05:20.926, Speaker A: To be honest, I don't think sending to someone with such a team working on the builder as well, I don't think that's an extra risk because they'll just see it on chain anyway. Like maybe you leak some information about how they're submitting, but I'm not really convinced that that is a huge amount of edge. At the end of the day, they'll just kind of see, okay, this is the transaction you submitted. It's not that hard to figure out what is a reasonable way to submit these transactions. From that point, I think any builder.
00:05:20.958 - 00:06:03.710, Speaker B: Would also want to have their own mev team, right. How would you balance having your mev team, but also a builder where you might be competing with the people submitting to you or even just taking their own strategies? You're in a powerful position when you're a builder with a high percentage of blocks being built. I think yours is 20 something percent. It always hovers around like 25, but it sometimes jumps to like 30. If you're getting that many submissions or blocks, you could possibly build like a record of people, their kind of patterns. There's a lot of alpha you can get from just being a block builder in general, which would help with internal mev operations. But then you could also just unbundle someone if they make a giant profit, right?
00:06:03.780 - 00:06:24.758, Speaker A: Yeah. So if you as a builder kind of unbundled someone, basically everyone would stop submitting to you the next day. It would be pretty hard to recover from that reputational damage. Also, as individuals, there's then the concern that are there legal repercussions for you? Are there like internal moral questions that you have yourself?
00:06:24.924 - 00:06:25.640, Speaker B: Right.
00:06:26.170 - 00:06:48.586, Speaker A: I guess it is pretty opaque. The whole setup of like, okay, if I submit these transactions to this builder, what are they actually doing with this? Are they storing all this data? Are they running like a bunch of analytics on the bundle that you're submitting? It's pretty opaque and you kind of have to trust the builders to not do this. There's like no real way for you to check, right. As a searcher?
00:06:48.698 - 00:07:16.998, Speaker B: Yeah, it's all trust, which whole point of blockchain is like, not to trust, but to verify. Right. I feel like the more you get into crypto, the more you go into the infrastructure side, the less true that is at its roots, because then you always have centralized parties controlling everything, for example, like the block builders or relayers. And if someone has enough money, validators as well. Right. The only verifiable thing is the transactions. There's so much edge that goes into block building.
00:07:16.998 - 00:07:38.138, Speaker B: You could just do a ton of analytics on basically every transaction, make records of everyone, even build some kind of AI algorithm to really understand or forecast what's happening in a certain condition like this. Searcher sends all their bundles at this time, or here's the most active time. That's what I would, I think do if I was a builder.
00:07:38.234 - 00:08:00.022, Speaker A: I think a lot of this kind of information is still kind of able to deduce it from publicly available data. A lot of it. Things like timing or transactions, are they papers or researchers just like vigorously posting, tweeting or something about how block value increases at the end of the block, and searches are submitting these transactions at this time and things like this.
00:08:00.076 - 00:08:26.126, Speaker B: Right? Yeah, you could definitely do it from public data. Of course. I think it has a limitation of only getting a confirmed block and not all the pending transactions. What's happening? You're not going to get every transaction unless you have access to all of the nodes, like the different mempools, of course. But in a general sense, I think it's still quite good, though, at least being sent to you so you can kind of improve it in different times and see what's happening. Sure.
00:08:26.148 - 00:08:32.766, Speaker A: I mean, there's more than just the confirmed block. There's like the data APIs on relays that give you a bit more information.
00:08:32.868 - 00:08:37.134, Speaker B: Oh, interesting. Why haven't you expanded into building your own relay as well?
00:08:37.252 - 00:08:54.310, Speaker A: There's a few parts of that. At the end of the day, it's just like, how much time are you going to put into it versus how much you think you could make from running it? And that's always the question, basically, for anything people do in this space, everyone's just thinking about what is the least amount of work I could do to get the most upside.
00:08:54.650 - 00:09:30.766, Speaker B: Yeah, I guess. How do you determine that as well? It's quite a difficult thing, because if you start, like a large endeavor, in hindsight, you might think it's a super simple task to begin with, and then later you progress to building it. It gets harder and harder. You realize the complexities of it and little niches. At least that's what I found out when I was building my fuzzer and this reverse engineering tool. I thought it was super easy at the start, and then eventually it got down the path and it got harder and harder and you start to realize how much time it will really take. How do you prioritize the most important things and write the blueprint of what needs to be done for these large systems?
00:09:30.798 - 00:09:40.514, Speaker A: Of course, I guess the initial step you can kind of scope out, like, what is the total market available and guess what kind of proportion of that market you can capture.
00:09:40.562 - 00:09:41.062, Speaker B: Right.
00:09:41.196 - 00:09:47.126, Speaker A: It's going to be pretty unreasonable to say, okay, the pie is x size and you can get 100% of it.
00:09:47.148 - 00:09:47.430, Speaker B: Right.
00:09:47.500 - 00:10:11.374, Speaker A: That doesn't really make sense. And then if you work on quite a few things, you kind of know to overestimate how much effort it is and figuring out how quickly can I get an MVP that proves my initial thesis of like, this is worth doing quite important as well. When you're already running this kind of business and you have a big stack of things to work on and you're trying to prioritize things.
00:10:11.412 - 00:10:11.854, Speaker B: Right.
00:10:11.972 - 00:10:16.802, Speaker A: You basically want to figure out what are the easy wins, right?
00:10:16.936 - 00:10:17.522, Speaker B: Yeah.
00:10:17.656 - 00:10:29.478, Speaker A: And then if there's this big thing with many unknowns of how you're going to get to at least the first MVP, then it's probably not the first thing I'd work on, especially if I don't think the market is that big for it.
00:10:29.564 - 00:10:37.350, Speaker B: If you come across like a super hard problem, how do you really solve it? What's your breakdown process like to getting to that solution?
00:10:37.770 - 00:10:56.462, Speaker A: That's a good question. I guess in my experience, most things that seemed hard have basically just been cumulations of many small things that we've figured out and done correctly and many incremental gains. I think very rarely is there like a switch that is just like, okay, I did this and suddenly I went from zero to 100, right?
00:10:56.596 - 00:10:56.990, Speaker B: Yeah.
00:10:57.060 - 00:11:07.774, Speaker A: I think there's lots of small things that you've done correctly. And in a lot of cases, you probably don't know which things your competitors or other people aren't doing as well because you don't know that entire setup.
00:11:07.822 - 00:11:07.986, Speaker B: Right?
00:11:08.008 - 00:11:20.118, Speaker A: Yeah, it's just like, okay, I've done all these kind of small things correctly, probably still got all these other things that I don't do correctly. And just like the culmination of a lot of these things ends up doing quite well.
00:11:20.204 - 00:11:47.262, Speaker B: I'm starting to learn that. I know that in the back of my mind, but being able to hone in on the very specific small tasks to build the larger task is hard. When you're trying to get to an MVP, at least you have so many ideas and thoughts of features you could add when you're adding these small things. At least that's what happens to me. And then it delays the end goal. How do you really stay focused on what would get you to the next step?
00:11:47.396 - 00:11:50.174, Speaker A: I guess I have the privilege of having a prod system now.
00:11:50.212 - 00:11:52.366, Speaker B: Right, okay. Yeah.
00:11:52.468 - 00:11:58.802, Speaker A: And then once you have a prod system, it's pretty easy. You can kind of say, okay, I'll add this one feature, I'll run it, I'll see what happens.
00:11:58.856 - 00:11:59.218, Speaker B: Yeah.
00:11:59.304 - 00:12:01.806, Speaker A: When you have nothing set up, it's a lot harder.
00:12:01.838 - 00:12:02.034, Speaker B: Right.
00:12:02.072 - 00:12:15.462, Speaker A: You're kind of worrying about, okay, I'm going to run this thing and it's going to be absolutely awful. So I need to build out all these features. One thing that I've learned is that it is definitely just worth it to just try things.
00:12:15.516 - 00:12:16.022, Speaker B: Right.
00:12:16.156 - 00:12:33.598, Speaker A: Even if you don't think your setup is perfect, you can still just try things and it'll probably do. I don't want to say it'll do better than you expect because maybe it won't, but, yeah, there have definitely been cases in the past where it's just like, oh, I didn't really think this would work very well, or I didn't think this be so beneficial, but you run it and maybe it works.
00:12:33.764 - 00:13:16.140, Speaker B: Yeah, I'm still getting to the experience level of getting a really hard startup on its MVP state because I think that's the hardest thing. Whenever you try and tackle this hard problem, getting to the first version is super hard. The longer you build it, the less motivation you have. Obviously at the start you think you can solve this really hard problem like no one else has. But then, yeah, it's just like the longer it goes on, the less motivation, at least to a point. If you do it for six months straight and you haven't found any results, there's no dopamine hitting your brain to reinforce you to keep going. What were like the early days of Rsync to get to the initial stage of a prod system?
00:13:16.830 - 00:13:51.938, Speaker A: Yeah, I guess one of our main concerns was that we wouldn't have enough flow to kind of win blocks at all. It was kind of true, but also I was very surprised by how well we did at the beginning, oh, really unexpected. We ran like a pretty naive setup. That was another thing, especially at the time, the whole kind of ecosystem was pretty immature. So it was kind of possible to just run this basically like out of the box stuff to do well enough. And then, yeah, we just started making it. We had some things that we knew, okay, these are the things we need to improve.
00:13:51.938 - 00:14:00.230, Speaker A: For a long time, we were shocked by how well it did. Despite our efforts, we thought the other actors were like more sophisticated.
00:14:00.730 - 00:14:12.234, Speaker B: What was the initial vision of building it? Was it to eventually capture x amount of the pie or was it just for. Oh, this is an opportunity here. Let's see if we can grab it. Or just a learning experience to begin with.
00:14:12.352 - 00:14:24.718, Speaker A: I guess it's a bit of a complicated question. The main thing was we thought it would fit well with other things we were running. There was also a lot of issues we saw with the third party ones that other people were running as well.
00:14:24.804 - 00:14:29.602, Speaker B: What were the big issues you saw that you wanted to improve on at the time?
00:14:29.656 - 00:14:37.490, Speaker A: The main thing was that there was huge amounts of latency. When there was interesting things happening on chain, there was just huge latency. That's probably like the biggest thing.
00:14:37.560 - 00:14:53.898, Speaker B: And then obviously you just improved that and then started iterating on it. Like, how can we make this better? How do you decide on what makes better? Obviously capture more value. But is there anything else to consider when making a block builder? Apart from how can we get the most value out of this?
00:14:54.064 - 00:15:25.554, Speaker A: A big part of the game is just having monitoring set up, like understanding what is going on. If you blindly optimize things, then you're going to waste a lot of time. So if we think, like, why did I win this block? Or why did I not win this block? And figure out what kind of went wrong in these cases, how often is this happening and how much value is being lost because I'm doing this thing inefficiently? Usually it's pretty obvious what you should work on because it will just be like, oh, so I'm losing all these blocks because my build job takes too long, right?
00:15:25.672 - 00:15:55.886, Speaker B: Yeah, it's like if you build something, let's say the first version, but why isn't it perfect? Basically just trying to figure out the why isn't it perfect in increments? And I think it's great to, as you said before, really turn them into smaller, easier to achieve goals, like a progression ball to eventually hit the end. It's a back and forth game. It's really just like Mev again or anything like PvP. Is that what you kind of feel like it is? It's just like a higher level of mev, right?
00:15:55.908 - 00:16:33.514, Speaker A: Yeah, I think it's pretty much the same as these kind of trading. Like, you optimize for the same things, right? Like in trading effectively, you optimize for how much volume can you trade? How smart are you? How fast are you at taking these opportunities? And it's basically the same thing, right? You're literally optimizing the same three things. People talk a lot about searcher builders, and it's also one of the reasons why a lot of searcher teams, I think, are pretty well suited to running builders. Just because you spend all your time working on the three of these things. Right. And you already have an edge because you already have order flow, right?
00:16:33.632 - 00:17:08.870, Speaker B: Yeah, that makes sense. And then for any other team that's doing it like a block builder, it just makes obvious next steps. I think a lot of people would think about having the whole kind of kill chain as well. Block builder, relay validator. I think it would be interesting to try and capture the whole thing, corner the market, if that's even possible in any capacity realistically. But it would be interesting at least try make a relay or combine it in some way, or even just like tinker with what current tech is and how you can experiment to make it better. I think it'll be quite fun.
00:17:08.870 - 00:17:13.990, Speaker B: Did you start it by yourself or were you running it with multiple people at the start?
00:17:14.060 - 00:17:25.318, Speaker A: Yeah, I mean, I guess it's a team. It's not just me. We're probably like four people also who work on the builder and spend time on working on the builder.
00:17:25.494 - 00:17:47.674, Speaker B: How do you designate tasks to different people? Do you do like co working where you have two people working on one thing, same time, like peer programming? Personally I find that really good, but maybe because I'm just not a super experienced person, but I think it is great for productivity and simultaneous review. How do you kind of structure your internals?
00:17:47.802 - 00:18:43.380, Speaker A: People aren't writing the same lines of code while watching over each other's shoulders, if that makes sense. Yeah, we typically talk quite a bit about what should the kind of architecture look like? If there are higher level changes or like, oh, I want to add this feature or fundamentally change how this thing works or something like that, then we would probably kind of talk about it a bit more. For implementations, we typically just do a standard, okay, I write some code, someone reviews it, people are aware of what's changed and if something's going on, then you can kind of know what has changed, use like git and stuff like that, so you can see what's happened. Yeah, like really small things, probably just like someone just makes a change. I think a lot of these are done by common sense instead of having a super structured approach to it. But yeah, those are the kind of main few things we're doing.
00:18:44.470 - 00:19:29.966, Speaker B: In my mind, any kind of system, whether it's mev or block building, you always have to test it to see if it works. And I think in these kind of scenarios, it's always, you need it in a specific context to test. And I imagine if you trying to improve on a specific feature, you would first identify the problem, which would be, why didn't we get this block? And you would get like, how would you even test that? Because there's so many transactions coming in. Obviously, I think you could probably, if you maybe created a JSON for each block or something, which that could be not the way, but just like spitballing here, maybe for a specific block, you would record all the transactions you got and then push that into a tab.
00:19:30.078 - 00:19:57.500, Speaker A: It's pretty complicated. And every solution you come with that you try to automate is going to capture a subset of things. Probably the lowest hanging fruit is that you just kind of look at, okay, who is making money on what blocks, and then you can focus down what you're looking at. And then if you want to automate a few more specific things, you can do that. Imagine writing some code that just spits out and says like, you need to do this. It's pretty hard to do, especially if you don't know what you're looking for at the beginning, right?
00:19:58.110 - 00:20:41.306, Speaker B: Yeah, you need like a target to even aim at. And then you have to kind of work backwards from that. I imagine testing would be so difficult though, because the whole kind of game of block building is you're given x amount of transactions. It's also dependent on how many transactions can you bring in as well. So I guess given the amount of transactions you had in that block that you didn't get, how do you sort that in a way where you're basically outcompeting another builder? It's not as simple as just changing a line and then clicking test. I think in my mind I haven't done it before, but that's what I imagine it would be like trying to iterate or add a new feature or something like that, or just optimize a bit more. Right.
00:20:41.328 - 00:21:04.094, Speaker A: I mean, it really depends on what you're changing. Right. One of the big concerns for us is that we would not want to breach any trust assumptions that have been made. You don't want to unbundle anyone by accident. So that's probably one of the things we're most concerned about. If you have a builder with some shitty sorting, algo, it's not the end of the world.
00:21:04.132 - 00:21:16.434, Speaker B: Right? Yeah. So like unbundling would be like someone's passed in a bundle. Let's say there's two people that passed in different bundles and you've sorted them, like these transactions away where they're no longer in the bundles they've sent, right?
00:21:16.552 - 00:21:33.770, Speaker A: Yeah. Let's say you got sent two transactions and then you only included the first one. Or you let the second one revert or something, and they didn't say that it was allowed to revert, then that would not be great. This is basically what low carb crusader managed to do, right?
00:21:33.920 - 00:21:46.846, Speaker B: Yeah. I mean, you would just limit the modifications. You would always just try and keep that bundle included or you just won't include it. Right. It wouldn't be too difficult theoretically, but as again, I haven't done it before.
00:21:46.948 - 00:22:06.726, Speaker A: This is just like, I don't know, probably one of the things that is if you do it, it's like the work has the most downside, right. If you suddenly unbundle someone, it's like the biggest downside you could get, or like one of the biggest. I guess you could just transfer loads of money away from your account or something. But yeah, just lock it all up.
00:22:06.748 - 00:22:27.254, Speaker B: Into a random contract and lose hundreds of thousands of dollars casually. That's all. Right. I think what has been like the biggest problem for you, building your block builder at the start, and even now, as you already got your production version ready, so the problems in each stage.
00:22:27.382 - 00:23:16.140, Speaker A: I mean, at the start, there's the classic problem that most builders have of reaching that critical order, flow mass. Even if you have enough to win blocks, especially at the beginning, you're missing still different types of flow and this kind of thing. I think at this point, at least for the bigger builders, if you're missing flow, it's probably because there's an explicit reason for it and not like, oh, you haven't been noticed yet. The challenges are more towards the performance and can I be smarter, can I allow new bundle types or something like this, or can I be smarter? I guess that's most of the problems these days.
00:23:16.670 - 00:23:53.880, Speaker B: What do you think the future of building is going to be like? I think a lot of people have talked about just all the searches, creating their own builders and trying to capture as many blocks as possible. They can basically have their MeV strategies, the highest success rate it can be, versus someone else competing that would have to use their builder. They might not have the highest success rate like them. It may be like 20% versus 5%. Right. Maybe every MeV team becomes a builder. I'm just curious, from your position of being a builder, what do you think is like the end game?
00:23:54.730 - 00:24:00.834, Speaker A: The kind of properties that MeV teams have are that they have lots of orders, lots of transactions that pay a lot of gas.
00:24:00.882 - 00:24:01.382, Speaker B: Right.
00:24:01.516 - 00:24:26.362, Speaker A: And they do care about inclusion, but not on a specific transaction. Like if I submitted a transaction and it didn't get included, it's not the end of the world as long as probability thing be included, which is like a slightly different problem. If you're a wallet, for example, more you're like a telegram bot. You have this constraint where someone submits a transaction and you basically have to include it, which is a bit of a more difficult problem.
00:24:26.436 - 00:24:27.010, Speaker B: Right.
00:24:27.160 - 00:24:41.720, Speaker A: I think those two qualities make it quite attractive to run a builder, because basically anyone with a lot of orders, a lot of order flow, a lot of gas paid, is well suited to running a builder. There will be more of these groups running builders in the future.
00:24:42.490 - 00:24:42.854, Speaker B: Yeah.
00:24:42.892 - 00:24:50.470, Speaker A: And the problem that a lot of these setups have to face is that they have to guarantee inclusion for their users, which is a difficult problem.
00:24:50.620 - 00:25:03.760, Speaker B: It's not really like a problem where you can just code it in. It's like, oh, I have the highest inclusion now. It's more of like a marketing thing of, do people trust you? What's the probability of getting included and not getting wrecked? Basically.
00:25:04.370 - 00:25:29.720, Speaker A: Right? Yeah. Imagine if you ran, let's say you ran a telegram bot and you ran your own builder and only used those telegram bot trades through your own builder. Would users use your Bot if they only succeeded in getting on chain like 50% of the time? As a meth team, maybe you would, but as some guy using a telegram bot, you maybe would switch to someone else.
00:25:30.090 - 00:25:53.040, Speaker B: Yeah. The building game is quite interesting. It is just the brand. Oh, would someone use you over another person? It's not just definitively I have transaction, I can apply strategy to transaction make money. It's like, okay, people need to trust me and want to send their transactions to me. So it's more of a social game, more than a PvP game. I think.
00:25:54.690 - 00:25:59.402, Speaker A: I think that's more true for front end retail applications.
00:25:59.466 - 00:26:00.078, Speaker B: Right.
00:26:00.244 - 00:26:06.398, Speaker A: Builders are definitely more in a brutal PvP game than these kind of other groups.
00:26:06.494 - 00:26:21.718, Speaker B: From my perspective, it's like if you have block builder a and blockbuilder b, the person getting sent the most transactions will have more combinations and opportunities to craft the perfect block or the block with the most money versus block builder B. Right, right.
00:26:21.804 - 00:26:33.530, Speaker A: But I think, at least at the top, most builders with exclusive order flow, or who are lacking order flow in some way, have reasons for this other than just like, branding, I think.
00:26:33.600 - 00:26:35.754, Speaker B: Okay, what would the reasons be?
00:26:35.792 - 00:27:04.146, Speaker A: For example, imagine you're a risk taking trader. You'll probably trade on all of these builders, and some of them will probably do worse, and you'll lose money with your bundles of land, for example. And so it might not make sense to submit to these builders. That's like, one thing I know. The other things would be like, people talk a lot about payment forwarder flow and this kind of thing. Maybe there's some kind of payment for order flow kind of deals, or maybe there's some kind of profit sharing. I don't know.
00:27:04.146 - 00:27:26.070, Speaker A: These are probably the kind of reasons that people get order flow differently, I guess. And then if you're an independent searcher and you're submitting to a lot of these builders, and you're doing these atomic, riskless trades, the big builders basically all have no history of being untrustworthy.
00:27:26.230 - 00:27:26.746, Speaker B: Right.
00:27:26.848 - 00:27:31.354, Speaker A: Unless you have a reason, there's no real upside not submitting to all of the big ones at least.
00:27:31.392 - 00:27:56.562, Speaker B: Right? Right. Yeah. Why would someone get into block building today if they're. I don't know if, like, a solo person will get into blockbuilding today, but I imagine it'll be super hard. Right. You would need to join a team, so you'd be even competitive. But maybe someone's interested in just experimenting with, like, a flashbots builder, like a super standard one, open source one, just like attempting to get there.
00:27:56.562 - 00:28:15.418, Speaker B: But why would someone even want to do it now, apart from. It's like kind of like the same question as Meb. It's like zero sum game, basically. And if you're not hyper competitive, it's like a kind of waste of time in terms of monetary value. You'll get a bunch of great skills. It just seems quite difficult.
00:28:15.584 - 00:28:19.530, Speaker A: I think it's almost by design that it's, like, competitive.
00:28:20.110 - 00:28:20.858, Speaker B: Yeah.
00:28:21.024 - 00:28:39.234, Speaker A: A lot of the kind of thought processes behind it. Is that okay? If there's an efficient market, there'll be this competition, and there'll be like, diverse in competition or something. Yeah. I think a lot of the thinking when designing it has been around that.
00:28:39.272 - 00:28:48.866, Speaker B: Right? Do you think you'll stay with blockbuilding for the foreseeable future, or will you kind of transition to something else later down the road that might not be.
00:28:48.888 - 00:29:14.270, Speaker A: Blockbuilding or even crypto related, the classic retire on a farm dream. Yeah, we'll probably keep on running it as long as it makes sense. I think generally, especially in these kind of circles, the reason most people are building these kind of things is because they think that longer term there will be more activity, it'll be more interesting longer term.
00:29:15.010 - 00:29:15.790, Speaker B: Yeah. Right.
00:29:15.860 - 00:29:27.314, Speaker A: I guess right now it's a case of building for the future and trying to build competitive systems so that everything kind of picks up again. It's well placed to kind of act.
00:29:27.352 - 00:30:02.620, Speaker B: In that market, like building before the storm hits and then once the storm, you can capture all the opportunity. Building in the bear, basically long term visions, not really short term game pretty much yet. Yeah. Crypto is so in it. It's really infancy at the moment, even though people say, I think in mostly the trading scene, it's like, oh, we're so late, but in terms of building, it's so early, there's no infrastructure. It's like innovation, but it's not like happening all the time. But I think it's mostly like an infrastructure problem for crypto and security.
00:30:02.620 - 00:30:16.338, Speaker B: The inherent risk of investing in a protocol now is so bad. If you invest like hundreds and thousands of dollars into a protocol, there's the inherent risk of getting hacked. So I think that's what's like stopping everyone from coming in.
00:30:16.504 - 00:30:16.882, Speaker A: Sure.
00:30:16.936 - 00:30:17.298, Speaker B: Yeah.
00:30:17.384 - 00:30:30.680, Speaker A: If you farm like 20%, that means you can get rugged once every five years and break even. Yeah, it's a big problem. Right. I don't know about you, I would never recommend my parents use defi, for example.
00:30:32.810 - 00:30:35.990, Speaker B: Yeah. Put your whole life savings in defi.
00:30:37.450 - 00:30:51.854, Speaker A: And I guess until it's like, I'm definitely not a user facing kind of. I don't think about a lot of these products, but I kind of feel like until it's more usable by normal people, it's kind of quite hard to pick up.
00:30:51.892 - 00:31:17.442, Speaker B: Right. Yeah. But if that ever happens, well, hopefully when it happens, then you'll be in a great position to kind of capture everything. Like mass adoption is just around the corner if security can be there. Right. At least ensuring rugs and scams and hacks aren't as probable. Hopefully not probable, but we'll see in the future if that happens.
00:31:17.442 - 00:31:49.280, Speaker B: Block building market is a great market to be in, especially right now. Like building early before this all happens. Once that happens, everybody's going to try and jump on boat and it's an arms race, but you're already there, already shooting. Right. So it's a good opportunity right now for anybody trying to go into these large endeavors. And it's usually the large endeavors that pay out the most in the early days when it's maybe not as profitable as what it could be in the future. But it's all like long term visions from what I experience.
00:31:49.280 - 00:31:50.974, Speaker B: Right?
00:31:51.012 - 00:31:54.900, Speaker A: Yeah, I definitely hope it will pick up.
00:31:56.950 - 00:32:40.350, Speaker B: How did you really start prioritizing what to do now over? You might identify, maybe there's something time sensitive in a block that you saw. Jared was pretty recent. Well, not really that recent anymore, but when that started happening, did you ever. It's like, okay, this new thing happened. Do we switch over to this instead of continuing building this, or is there any prioritization kind of sequences that go on internally of like, oh, we need to capture this because it's time sensitive instead of finishing this thing we've been building for x amount of time.
00:32:40.500 - 00:33:30.800, Speaker A: I guess it will depend on how much work we think it will take and how big the opportunity is. And then also how much do you think you can capture, right. If you see someone doing, making a lot of money, doing sandwiching, and you have no sandwiching set up, are you going to build this from scratch? What edge do you really have there? Right? Yeah, like understanding, like, okay, I have this edge, I have this set up. These are the things I can do. But I don't know, you don't want to just look at someone else and see, okay, they're doing really well right now. I want to just pivot my entire setup. The opportunity will probably be gone by the time you get there, and then other people will get better as well, and you'll just be playing catch up all the time.
00:33:31.570 - 00:34:29.170, Speaker B: Yeah, I think what you did, like identifying a problem early, like an opportunity early, and then capitalizing on that is the best approach. I think a lot of people get kind of shrouded or tunnel vision of, oh, this is where the money is right now. Let me try and build this right now and get there because they're making tons of money, but when they get there, it might not be there anymore, or the person that's already been there for months has already accumulated such a big edge that you can't even catch up. So I think identifying that issue early, which always comes from personal use, is probably the best bet. I think just in startups as well, in general, but building any hard startup, I face the issue of overwork and burnout. Have you ever? I'm sure you've experienced it, but how do you kind of balance it so you don't burn out and can keep going long term?
00:34:29.670 - 00:35:19.010, Speaker A: Yeah, I guess it's definitely quite easy to, especially when you're interested in a problem, you can just spend all your time and then just burn up really easily, I guess. Personally, I think that on a normal day, it makes sense to try to have a bit of a life. And then when you can't and you need to, there are some things that, okay, I need to do this thing right now, and I need to be at my desk all day or something. And other times where it's like a bit slower, there's less going on. And I found, at least for me, I need to manage my life and not just do nothing but work, because then it's really easy to get burnt out. And I don't think it makes sense long term.
00:35:19.750 - 00:36:01.838, Speaker B: Yeah, I'm experiencing that right now. It's like I work all the time, no matter the day, basically every day. And it's great for, it's like a mini sprint of doing a couple months or maybe like a fair amount of months, right. Within a year, like straight, where you're just doing the same problem. Because especially with startup life, when you first get into a startup or any tool or infrastructure or just code in general, you have, like, I don't know, it's like the honeymoon phase of coding. It's just like you super love it and you want to do it all the time and stay up until 04:00 a.m. To keep going and always think about it.
00:36:02.004 - 00:36:20.130, Speaker A: The way I kind of think about it, I don't know. I've not really spent a huge amount of time thinking about it. But the way I kind of have a bit of a mental model is that realistically, there's some amount of work you can do all the time and kind of stay sane. And let's say it's 100%.
00:36:20.200 - 00:36:20.674, Speaker B: Right.
00:36:20.792 - 00:36:27.574, Speaker A: And if you're working, like, a lot, you kind of get burnt out. You probably work at like 110%, right?
00:36:27.692 - 00:36:28.360, Speaker B: Yeah.
00:36:29.450 - 00:36:49.854, Speaker A: And I just kind of think that probably most of the time you should be at like 80, 90%, and then some of the time when it's busy, you'll be working at like 120%. Because even if you just worked at your capacity the entire time, sometimes you're going to have to kind of overflow that a bit.
00:36:49.892 - 00:36:50.478, Speaker B: Right.
00:36:50.644 - 00:36:53.326, Speaker A: And then once you do that, you need to recover.
00:36:53.518 - 00:37:30.854, Speaker B: Yeah, I think recovery is such an important thing. If you look at athletes, they perform maybe a few times within their entire career relative to how much they train and recover. And recovery is so important because software people, or even tech people in general, there's no recovery. It's just work. And you can compare that as to like, let's say professional athlete playing on season 24/7 never really recovering. It's like a boxer just always fighting. And then no recovery.
00:37:30.854 - 00:38:01.960, Speaker B: You just get punched in the face so much. No matter how much you can take, you eventually hit that threshold where you get knocked down and then you're forced to recover because of injury. I think that's the same with software and burnout. It's like you get knocked down. You have to wait until you've recovered because there's no, I guess, quote unquote recovery in software, apart from managing an actual life, which is hard to, I guess, do if you're absorbed into the problem at hand.
00:38:02.810 - 00:38:23.710, Speaker A: That's quite funny. I literally have that mental model because of sports, where when you do a lot of sport training, there's a lot of, I think people call it. I'm sure there are other terms, but people call it like overreaching and then underreaching, where you work over your capacity and then you kind of have more recovery focused periods.
00:38:24.130 - 00:39:15.294, Speaker B: Yeah, you start focusing on stretching and ice baths and whatnot, like icing, whatever joints and stuff you have. I think it's the same with a coding because I think especially in our industry, it's always rapidly moving. Every day there's something new happening, like a new hack or something. And I think it's especially true for your specific field where it's like block building Mev. It's like insanely hyper competitive, where there is really no time to rest because maybe someone will outcompete you and then you're just not making money anymore. So I don't know, the balance is quite difficult. And since it's super competitive and requires 24/7 attention, how do you prevent procrastinating or at least minimize it?
00:39:15.492 - 00:39:33.906, Speaker A: I guess that's a good problem, or that's a good question, especially in crypto, where it's pretty easy to just sit on Twitter and see what's desk scroll. There's all these chats going. Like, I guess part of not procrastinating is that you're kind of interested in.
00:39:33.928 - 00:39:36.514, Speaker B: What you're doing, right?
00:39:36.632 - 00:40:13.946, Speaker A: Just like, oh, I've got this thing I want to do. I kind of want to do it. If I sit on Twitter all day, I'll probably get really annoyed at myself. Yeah, I guess then there's a case of like, I expect some. I know there's some upside to doing this stuff as well, and that's probably pretty important, too. If it feels pointless to you, then you're probably going to not really do it right. I guess other than that, it's just like, not really sure I have any super secret techniques.
00:40:13.946 - 00:40:16.560, Speaker A: It's just kind of getting the work done.
00:40:16.930 - 00:40:45.686, Speaker B: Yeah, it's just you got to sit down, do it right. I think the worst thing of burnout, at least for me, is it feels like procrastination because you're not working, but your body needs to stop working, basically. But then you feel bad about it and you want to do it, but you can't do it. At least that's what I deal with. And it's super annoying, but it's hard to identify at times. Just feels like I'm lazy, but I don't know. Humans are weird, the brain's weird.
00:40:45.686 - 00:41:05.440, Speaker B: I think this has been a terrific chat. I quite enjoyed this. Hopefully you have as well into the world of block building. I don't think there's much content out in blockbuilding, so I'm hoping people will find this quite interesting. But yeah, thank you so much for jumping on, Tom. I appreciate your time and scheduling out a block of your day to come chat with me.
00:41:06.770 - 00:41:08.510, Speaker A: Yeah, thanks for having me.
00:41:08.660 - 00:41:36.500, Speaker B: Yeah, of course. And hopefully it all goes well with the block building and you'll reach number one out compete titan healthy competition, of course, and hope it all goes well for you. But yeah, thanks so much for jumping on. And if anyone else wants to jump on or recommends someone to come on, just dm me on Twitter at scrapingbits or email me at scrapingbits@gmail.com. Otherwise, thank you so much, Tom, and take care, everyone.
