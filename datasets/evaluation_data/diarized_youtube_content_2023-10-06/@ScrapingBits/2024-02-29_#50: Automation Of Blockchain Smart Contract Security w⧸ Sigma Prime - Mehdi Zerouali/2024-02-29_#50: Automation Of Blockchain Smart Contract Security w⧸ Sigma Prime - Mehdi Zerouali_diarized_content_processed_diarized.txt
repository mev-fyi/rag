00:00:00.170 - 00:00:23.678, Speaker A: This type of vulnerability went unnoticed for a while because in people's heads, dot balance of is not an external call. I'm just inquiring the balance of that contract. It's always a fun time when we can demonstrate an actual impact, and in a lot of cases you actually can, right? Because you're relinquishing control or the execution flow to an attacker. Controlled contract scraping bits is brought to.
00:00:23.684 - 00:01:00.558, Speaker B: You by the following sponsors s Mev protocol maximize your eth staking value with me v exclusively on MeV IO and composable execute any intent on any chain coming soon to mantis app that's mantisap and fastline labs, the only MeV and intense centric team that has a daily deodorant application rate of over 68% gm gm everyone, my name is Digotchi, the host of scraping bits, and today I'm with Medi Zawali from Sigma prime. How's it going?
00:01:00.644 - 00:01:03.646, Speaker A: Hey Digotchi, doing well, thanks. How are you?
00:01:03.748 - 00:01:25.158, Speaker B: Yeah, pretty good. Just touched down in know where we are based. But it's a pleasure to have you on and I'm pretty excited to talk. You've got a lot of years of experience under your belt and been in the space for quite some time, so it'll be quite a nice chat, I think. But just for the people that aren't familiar, who are you and what do you do?
00:01:25.244 - 00:02:09.410, Speaker A: Sure, my name is Meddy. I'm a co founder and director of Sigma Prime. Sigma prime is a blockchain security and research firm incorporated here in Australia, as you pointed out, but have been operating globally for a while now. The company is about seven to eight years old and we provide security assessment services to the blockchain ecosystem. Lots of smart contract security reviews. As you can imagine, we're also very comfortable diving deeper into the stack and have been helping a whole bunch of blockchain foundations with their l one l two security requirements. So we work very closely with the Ethereum Foundation, Filecoin and a bunch of others, and we help them ship more secure blockchain software.
00:02:09.410 - 00:02:51.966, Speaker A: That's kind of half of what we do. The other half is the development and maintenance of Lighthouse. Lighthouse being the Rust Ethereum consensus client, it's currently responsible for about 35% of all Ethereum blocks, which is exciting, scary at the same time, but it's fantastic work delivered by that side of Sigma prime. Obviously been quite instrumental in making the merge happen. Lighthouse is a really fast Ethereum consensus client. It's written in rust, it's free, it's open source, we see it as a public good, meaning that it's not directly monetized. Then we're basically paying our bills thanks to the generous donations of the Ethereum ecosystem.
00:02:52.078 - 00:03:20.622, Speaker B: Very interesting, a very broad array of different disciplines. It's not easy to write a consensus client and doing all this other stuff from security to software engineering. Right. So I really am interested in the early stages of second prime and also the toughest time you've had during the beginning of it, because obviously starting a company and being around for seven, eight years is not a normal thing and majority of startups fail. Right? So it would be very interesting to know about that.
00:03:20.756 - 00:04:05.610, Speaker A: Sure. So we started as a group of friends, really passionate about Ethereum, running the Ethereum Sydney meetup, rocking up at all these fortnightly meetings and explaining what we've learned during the past two weeks. We as a result started getting a bunch of requests for advice. This was back in 2016, so kind of like the beginning of the ICO crisis. For those of us who have been around since then, it was like first couple, we're like, yeah, for sure, happy to know. Spent a bunch of time working on designs and tokenomics and whatnot. And after a couple of months we realized that there was an opportunity here that we could probably be charging money for that advice.
00:04:05.610 - 00:04:48.082, Speaker A: And this is how Sigma prime was formed. At the very, very early stages of the company. We were like a consulting shop for the blockchain ecosystem. We weren't positioned as a blockchain security player exclusively, so we were happy to help out on various design projects. Probably safe to say that all of them were ditched or canned at some point. A lot of proof of concepts back then for those who were around, all the banks started experimenting with the technology and sort of asked us for a bunch of advice and input. But my background is in information security cybersecurity.
00:04:48.082 - 00:05:18.846, Speaker A: So prior to starting Sigma Prime, I was a penetration tester for a large organization. Gave those guys six years of wildlife. So I was basically finding bugs in my clients websites, mobile apps, infrastructure and so on. So I've always been really passionate about the infosec side of things. And very early on with Sigma Prime, I kind of realized that after reading Martin Swende's blog post. So Martin is. He is a legend.
00:05:18.846 - 00:06:08.814, Speaker A: We owe this person so much, yet he's not very well known. I guess he is part of the GUI Ethereum team and was the security person for Ethereum for God like four or five years. So he's found a whole bunch of very intricate bugs very early on affecting the EVM, affecting smart contracts built on top of Ethereum back then. And I stumbled upon his blog post and I remember being like, oh my God, this is the thing, right? All these people are going to start writing smart contracts. So many footguns, what can we do? People need help, otherwise this is just going to be chaos. And surely enough, few weeks after that observation, the Dow hack happened. So the Dow hack, probably safe to assume that most listeners have heard about the Dao hack.
00:06:08.814 - 00:06:59.618, Speaker A: For those who haven't, this is the event that essentially resulted in the existence of Ethereum classic the chain. So yeah, it was a massive realization that there was a big need for security assessment services in the space. And as a result, we've decided to position ourselves accordingly and started providing security assessments first to the local scene here in Australia, worked with a bunch of projects. Horizon State is one of the very early daos we reviewed. They provide a voting system. Second domestic client was synthetics. So Kane Warwick, founder of Synthetics, used to come to all these meetups and he was building haven back then, was the name of the project and got surrounded by a few solidity developers and needed security assessment services.
00:06:59.618 - 00:07:33.678, Speaker A: So it kind of started domestically and then made a name to ourselves. We wrote the smart contract security section of the mastering Ethereum book. That's a very, very good book. Probably a bit outdated now, but it was written by Andres Anturopolos and Gavin Wood. These gentlemen reached out to us and said, hey, we have a smart contract security section in our book, but we've just realized that you've basically written all of it in your blog post. Can we just copy your blog post? Obviously very happy with that. So I guess that helped establish us as a security assessment provider within the space.
00:07:33.678 - 00:08:06.578, Speaker A: And bear in mind, back then, this is like 2017, maybe early 2018, there weren't many solidity security people out there. There's this Eth security Telegram channel, which has now about 2000 3000 members. But when we were added to that channel, I remember I was person number 21 to be added. We're all just kind of figuring it out. Back then, no one really knew what they were doing. It was fun. It was a lot of fun, a lot of camaraderie and a lot of respect between various people involved.
00:08:06.674 - 00:08:14.042, Speaker B: Yeah. So what was the toughest time of building Sigma prime during the development of it, or even now?
00:08:14.176 - 00:08:49.682, Speaker A: Yeah, that's an interesting question to be transparent. One of the toughest times we've had was when we had to part separate ways with one of the co founders so Sigma prime was started by four friends. Only three remain, the directorship and the ownership of the company. So it was a pretty difficult time because of the friendships involved. But safe to say that Sigma Prime's done a good job recovering from that challenge. And there's a lot of things that we can be doing differently. Lots of input that we listen to internally.
00:08:49.682 - 00:08:57.734, Speaker A: Externally, I think it's safe to say that we're quite proud of what Sigma prime has become and we look forward to developing it in coming years.
00:08:57.852 - 00:09:23.638, Speaker B: Yeah, new fuzzing and auditing of clients on top of smart contracts and a lot of people I don't think actually use dynamic analysis, stack analysis or even prioritize it. I don't think there's actually tools that are good enough to replace the manual analysis, but if done correctly it could realistically replace them. But obviously that's a bit far in the future, a bit far fetched. But what do you think is really missing from current tools?
00:09:23.754 - 00:10:17.826, Speaker A: Very good question, particularly from the perspective of fuzzing or fuz testing. We're huge fans of fuzzing here at CP. I must say I am a big fan of the technique and have been applying it since we started to various projects, including Lighthouse by the way, which we fuzz internally and help surface some sometimes nasty bugs that our own developers can slip into the code. One of the things that is very difficult with fast testing is carefully crafting your inputs or essentially instructing your fuzzing engine to comply with a certain grammar. And I'll explain it in a bit. What this entails essentially is when you're fuzzing a function, say a function that processes blocks, right? In the context of an Ethereum consensus client or an execution client, all these software consume blocks. At some point they have to process them.
00:10:17.826 - 00:11:10.818, Speaker A: Most of them have. So yeah, fuzz testing or fuzzing is something we're huge fans of here at CP. We've been using this testing technique over the past few years, targeting a whole bunch of l ones and l two s, and it's been a very, very fruitful testing technique. There's a bunch of challenges with fuzzing. One of them is making sure that you instruct your fuzzing engine to comply with a certain grammar. What I mean by that is if you have a function that says, say processes blocks, right, a process block function, that function will take as input a structured type, right? This grammar essentially that function is expecting. And one of the very first things that that function will most likely do is parse the input and make sure that it actually complies with the object or the struct that it's meant to be.
00:11:10.818 - 00:12:12.054, Speaker A: So if you were to fuzz naively any of those functions, your fuzzing engine is just going to spit raw bytes and hope for the best, which is fine, because you kind of need to test the serialization and deserialization. So it is valuable to actually just throw random, properly, perfectly random inputs at the problem. However, you'll find that you'll never actually go past the deserialization test or check because you're not actually feeding your function valid blocks. So the challenge here is to be able to construct your fuzzers to basically spit out inputs that are going to be interpreted as a complex struct. And the tooling in this particular area was horrendous. Two years ago, you couldn't really do this easily. You kind of had to almost rewrite the software you're fuzzing to allow for that.
00:12:12.054 - 00:13:30.538, Speaker A: But we've had a massive breakthrough a couple of years ago in rust, that is, and go followed suit a few months later where we're now able to basically, if I were to talk rust jargon, derive a trait on certain types and basically tell your fuzzing engine, leapfuzzer, honk, fuzz, AFL, whatever fuzzing engine you're comfortable with, you basically instruct them to push inputs that are formed in a certain way, and that has significantly sped things up on our end when it comes to fuz testing. Now, once you have that, the trick is to find the relevant fuzzing targets and write fuzzers for those. Again, very lacking in terms of tooling at the moment, but there's people who have done great work. Actually, someone from the Ethereum Foundation, David Theodore, who's part of the EF security team, has released a tool to do just that in go. I forgot the name of the tool, but I can link you a bit later if you'd like to reference it. We don't necessarily have anything similar in rust. We do have a bunch of scripts that we use internally to help assist identify the best fuzzing targets.
00:13:30.538 - 00:14:19.502, Speaker A: But I think if I were to guess, this is an area that will probably change and develop in the near future. And I'm very excited to see what some of the best researchers in the world are currently working on, particularly the Lieb AFL team, which has extended the AFL fuzzing engine and now allows you to do all sorts of custom things, which is much needed. So fast testing? Yes, absolutely. Fast testing, I think is still got a long way to go. And I think there's basically bugs that you cannot find manually. Right. When it comes to very complex arithmetic or just very complex math, really edge cases, identifying them by reviewing the code baseline by line is just not going to work.
00:14:19.502 - 00:14:28.446, Speaker A: You will miss a bunch of those even if you manage to identify some so fast. Testing has that property that extends coverage dramatically.
00:14:28.558 - 00:15:04.366, Speaker B: Oh, yeah. I mean, when we think about humans versus computers, we're very limited to the amount of space we can have in our memory, right? Whereas computers can have theoretically unlimited. If you have enough money and better computation, they can think in way more dimensions. Right. And when you think of, let's say, smart contract security, you have four basis to cover. You have the call data, the functions of a contract, but then you have multiple contracts, and then you also have the state it is in. And so these four different pillars, and now you can combine them all.
00:15:04.366 - 00:15:37.954, Speaker B: So every single smart contract on ethereum can combine them all in different ways. And this search space is infinite, and you have to figure out ways basically, to filter them. And that's what human auditors do. They have very biased methodologies or systematic approaches to trying to find critical bugs. Right. They'll most likely look at the functions that move money, and that's the basis. And so you filter out all the other functions and then, okay, what relates to this? You figure out what functions can affect it, like the storage or call data, et cetera.
00:15:37.954 - 00:16:06.574, Speaker B: And so that's their filtering technique. But then you're not covering everything. You might be missing stuff. And they always think in a sequence, so not spatially. And for something that is as fast as a search space as this, you'll be prone to error because you need different ways of thinking. And when there is unlimited search space, you need a better way of filtering and different ways of looking at it. But when you're already biased, you've kind of lost to some degree.
00:16:06.574 - 00:17:07.346, Speaker B: You'll probably miss on something. And when you think of Ethereum and every other blockchain, there's probably tens of thousands of contracts, right? And there's just so many bugs out there that haven't been found because it is beyond comprehension, maybe, or just a lot of computational power to really find it. And the search space is so big. So if you're going to dig, you're digging basically in a desert, right? So it is essential, and I think a lot of people don't want to hear it because it is going to replace them. If someone does build something that is capable, and I think buzzing tools won't be able to find it because it is brute forcing at the end of the day, and if you are building some kind of filtering system, it's based off human intuition. I think the future will be directed by AI because it is able to go beyond human intuition and think in way more dimensions computationally same as fuzzing, where you can rely on hardware instead of biology. And I think there is a lot more potential to cover a lot of things.
00:17:07.346 - 00:17:30.498, Speaker B: But the only thing I actually doubt is like off chain auditing. So something using chainlink or bridges, I think that would be hard to automate. But obviously you could do it if you really tried. But I think everything on chain could definitely be all automated. So that begs the question, what do you think about AI and automated analysis of post and pre deployment, and what are you doing to prepare for this kind of error?
00:17:30.614 - 00:18:24.250, Speaker A: I want to just go back to the fourth pillar you mentioned, which is state. Yes, I couldn't agree more. I think statefulness testing is very much an underexplored area in our lovely industry. So stateful fuzzing and stateful testing are obviously extremely difficult to pull off. But when you do, then your search space is you don't have to resort to intuition anymore. If you're in a position where you can codify all possible states, your state machine, because it's not kid ourselves, this is what these things are, right? Like, they're state machines. So if you're able to codify every single possible state that your state machine can land in, I think your fuzzing technique will probably yield great results.
00:18:24.250 - 00:19:39.618, Speaker A: But going back to your last question on AI, what do I think about AI? Let's see. I am cautiously optimistic about its potential to help developers, to help security assessors. I do agree with, I think most of what you said, the Gotchi, most of your assessment on the situation, most of it, I do think that we haven't seen yet, and this could change. We haven't seen yet technology that can truly replace that intuition that you were hinting towards. And to me that's key, right? If we can replace that intuition with a machine and have the certainty that all the possible previous learnings and previous exploits are incorporated in the model, then perhaps. I do agree with the off chain assessment. And I do think that for the EVM specifically, I think we're due to see very soon a massive disruptive tool that will leverage AI purely for EVM bytecode.
00:19:39.618 - 00:20:26.910, Speaker A: Yeah, I think when it comes to off chain security. So rust programs, Golang programs, I don't think we're there yet, because most of the time these things aren't specked out the same way contracts are specified. Right. So I think if there is this potential superpower AI that will replace EVM auditors at some point, we will see a tool that will work combined with a spec language. That's how I see it. Because at the end of the day, you have your developers and designers, developers pumping out code. But you could argue that a finding is a vulnerability based on the spec.
00:20:26.910 - 00:21:18.498, Speaker A: Some behavior might seem fairly exotic to you and you would be tempted to flag it as a vulnerability, but if you go and read the spec, then you'll find out that it's actually intended behavior. Right? So I think we'll have to find a way to codify specification, and there's great efforts that have been spurring left, right and center over the past few years. Search horror's prover is one of them that allows you to codify your spec. But I think we'll probably need something a bit more. And once that's available, once developers start adopting that, feeding that into that super AI, I'm sure I'm not going to say that it's going to put us out of job, but it's going to have certainly the potential to, if not replace, augment significantly human testing.
00:21:18.594 - 00:21:53.520, Speaker B: Yeah, I agree that the more complex code bases to everything outside the EVM, it will be much harder to, I guess, do this automated analysis because there is just so much, for example, if you think about malware, right, it's just so much out there, so many different changes. Like you can have multiple languages embedded for this malware, and so that's in itself very difficult to automate, because then you're dealing with multiple languages, multiple kind of vms or executions, and that world seems very difficult.
00:21:54.210 - 00:22:09.240, Speaker A: And the level of fiscalation that you can probably integrate in your programming is probably going to be able to defeat any AI for the foreseeable future. However, if you are trying to do this in the EVM, you're obviously bound by gas and things like that.
00:22:09.690 - 00:22:15.650, Speaker B: You're bound by the via language abilities. That's why it's such a perfect environment.
00:22:15.810 - 00:22:22.570, Speaker A: Yeah, I could definitely see a future where obfuscation on the EVM is just not a thing anymore.
00:22:22.910 - 00:23:34.770, Speaker B: Yeah, you just need solid understanding of basically how it works, of the opcodes, and then you've kind of, obfuscation doesn't work, that's the thing. But thinking about the intuition, I think a lot of auditors perform symbolic execution in their heads, and it begs the question what mutation method do they really think about? I think it's probably sequences of functions and having existing knowledge and context of prior protocols they already know. So for example, Uniswap Ave, you can take a flashpoint here and borrow there and then use this. And that's the hardest thing I think that would be limiting. AI is forming these relationships of protocols that don't directly relate, but can actually indirectly work together in a sequence of functions. Maybe they don't have reference to each other in hard coded, like they don't have an address referencing the other protocol, but you can use it regardless if it does or if it does doesn't. And so that, I think is the real challenge is forming relationships of what can work together and how do you find these.
00:23:34.770 - 00:23:38.994, Speaker B: So that's what I wonder how people will figure out.
00:23:39.192 - 00:24:55.450, Speaker A: It's very interesting, I think, when just hearing you talk about this got me thinking about the differences in models between things like hiring a firm with 30, 40, 50 people who are expert in the topic, versus potentially hiring either a solo auditor or going for bug bounty contests or bug contests like my friends at code arena are doing. And that intuition, basically, I can only talk for Sigma prime. Right, but at CQP you're not hiring a couple of testers from Sigma prime. When you engage with Sigma prime, you're effectively hiring the whole team, even though you'll only be sort of presented with two or three or four testers. And what I mean by that is those guys that will be working for your protocol, they're actually able to leverage the, I don't know, 200 security reviews that Sigma prime has conducted. That knowledge internally is very precious and we do everything we can to sustain it, maintain it and share it around. And every time there's a new project that comes through, we're able to go back at our previous work and leverage and build that intuition, essentially.
00:24:55.450 - 00:25:37.602, Speaker A: And I think that's quite key. And seeing how that can be potentially replaced is not super straightforward. Not to say we can't get there, but it's a huge challenge. As you were saying, it's like you've been working on lending pools, you've ordered an Ave, and then a fork of Aave comes to us and needs security assessment services. You're not starting from scratch, are you? You've got years and years of knowledge of the AAVE protocol. Bunch of bugs that you found, you or your teammates. And that helps, I think, tremendously in attacking new code bases, new protocols, new DeFi primitives.
00:25:37.666 - 00:26:57.762, Speaker B: Yeah, the transfer of knowledge is definitely a thing, the wonders of biology. I think when you're trying to automate it with AI, it's definitely a very difficult thing of bringing the context of previous things to a current problem, and that's just so hard to automate, I think. But I think even there is value in these bug bounties as well, because they are dealing with absolutely so many protocols. And when you're thinking about securing a protocol and not getting hacked for hundreds of millions or tens of millions of dollars, the only way you can really prevent it is if you know all the big, I think the big protocols, so like AaVe, et cetera, and how they interact with how your protocol can interact with these protocols, because then you can think of, I guess, the function sequences of, I guess, unintended effect. So if you have your own internal exchange rate within your protocol and there is a uniswap pool, can someone just completely game it and drain it all? If there's a massive arbitrage, or it just continuously is like a big arbitrage in some way, or can leverage a massive borrowing pool to drain the entire LP of something else, the composer of.
00:26:57.816 - 00:27:22.358, Speaker A: The nature of our ecosystem that will make these things potentially difficult to pull up. None of it like if you were to consider each protocol in a sandbox. I think what we're discussing is probably already here. But it's the external calls, the potentially unsafe external calls, and the whole composability of our ecosystem that I think will make this a real challenge for researchers.
00:27:22.454 - 00:27:46.862, Speaker B: Oh, 100%. And I've done some analysis on some exploits in the past, my favorite being pickle finance. I think that was in 2020 or 2021. And that was a very interesting one because it was very complex, and I feel like it was automated just because of. I guess what they did in the exploit was kind of naive.
00:27:46.926 - 00:27:55.620, Speaker A: So what was automated in your sense, was it the identification of the vulnerability or the exploitation, or both?
00:27:56.950 - 00:28:47.122, Speaker B: I would think both, because I would assume it is, but it could be done manually. The only reason I think it was automated is because the creation of the exploit contract was quite, that was an error, an error in it, they generated two extra contracts that didn't need to be generated. So in total they generated six contracts. So the main one being the exploit contract itself, but then four of them being a fake pickle jar, just to be able to swap them and basically move all the money. But they also generated another one, which was, think the debt, not the debt. There was like this wrapper, a fake token, basically, and the balance of function returned an address instead of a balance. And then that was used to basically delegate call.
00:28:47.122 - 00:29:16.814, Speaker B: That was really interesting because that is not something you would initially think of when looking at a balance of and making a custom contract in an arbitrary address. And it was very interesting because it was like six vulnerabilities and if you didn't use all of them in a specific sequence, there was no exploit and in a specific order or there wouldn't be exploit at all. And that was really interesting because that is not something trivial to think about in your head.
00:29:16.932 - 00:29:55.642, Speaker A: Well, I think this type of vulnerability went unnoticed for a while because I guess in people's heads dot balance of is not an external call, right. I'm just inquiring balance of that contract. We've seen that unfortunately being put into some of the code bases that we've reviewed. It's always a fun time when we can demonstrate an actual impact. And in a lot of cases you actually can, right, because you're relinquishing control or the execution flow to an attacker controlled contract. So a lot of bad things can happen. But yeah, I quite like this one dot balance of what could go wrong.
00:29:55.696 - 00:30:31.190, Speaker B: Yeah, it was very exciting when I saw it. I'm like wow, this is pretty smart and makes you think just seeing the word balance of instead of the function selector and thinking of how you expect a number. But in reality it's just bytes and an address is just 20 bytes. So it brings this bias when auditing and you assume a lot of things, which is great in some senses, but in I guess this computer sense of not having the idea that it can be literally anything because it is just bytes at the end of the day.
00:30:31.340 - 00:31:07.230, Speaker A: It's interesting the word you used bias, and I think that's critical. Trying to free yourself from any potential bias you may have before starting a review is extremely difficult to do. I don't even know if humans can actually do that. Right. What we try to do at CP when we conduct security assessments is have some people do a manual review and I'm talking about EVM here, EVM solidity code bases. So you kind of split your engagement team in two. Half of them are doing a manual review, inspecting the code line by line, making sure there aren't any known entity patterns.
00:31:07.230 - 00:31:52.142, Speaker A: And the other team is writing tests, but the way they write tests. So we use either brownie but yeah, we can't do Javascript here at CDP. Sorry for JavaScript lovers on listening, but we struggle, we really struggle with JavaScript. So have used Brownie for years and very recently have made the move to foundry forge and that testing team that's writing tests either in Brownie or Forge. What we ask them to do is not to actually look into the code base just yet. We give them the ABI, we give them a high level description of the contracts, its functionalities, what it's meant to do. And the first few days are meant to be.
00:31:52.142 - 00:32:28.650, Speaker A: Basically, you can see it as like gray box testing, not really black box, because the contracts are there if they really, really want to see them. They have access to the docs, they have access to the interfaces, but we really don't want them to just dive too deep into the code base again so that they're not making the same assumptions as the developers. And this is where we're trying to remove bias. Right. The developers are obviously biased. They've built the thing. So if we are to find edge cases in what they've built, we should really be working on freeing ourselves from any assumptions these folks may have made.
00:32:28.650 - 00:32:34.430, Speaker A: We found that to be a relatively, quite like a successful way of tackling the problem.
00:32:34.580 - 00:32:43.634, Speaker B: Interesting, because the initial thought I would have after listening to that is you're given the ABI, but you're not given any context of what the functions do.
00:32:43.672 - 00:33:10.250, Speaker A: And then remember, you are given docs, you are given relatively detailed documentation on a technical level. Withdraw XYZ, the docs would state, these are the tokens that can be withdrawn. These are the withdrawal limits, if there are any, et cetera. That's what I meant by gray box testing. You still have some context.
00:33:10.590 - 00:33:16.170, Speaker B: What are the tests, though? Are they just a single function or multiple functions in a sequence?
00:33:16.510 - 00:33:48.006, Speaker A: It depends. We tend to focus on end to end testing. So you see as like integration testing. So anything. Again, going back to the composability topic, making sure that we're able to simulate an actual real life deployment with oracles and swappers and sometimes keepers. So the test suites are usually for complex protocols that touch other parts of the ecosystem. Those test suites can be quite complex themselves.
00:33:48.006 - 00:34:00.620, Speaker A: And our clients, some of them decide to actually use those test suites into their CI CD pipeline. And now, as a result, they have their own testing, but also sigma prime testing. That makes sense.
00:34:01.310 - 00:34:35.330, Speaker B: Okay, interesting. And when we think about these testing, if it's not a post deployment contract, it's pre deployment, and if it's pre deployment, it's not initialized. And let's say they don't have testiva. So you don't actually know what the initialized state is. How do you figure out what the initialized state should be. So for example, Uniswap pool, right? How do you know when you look at a uniswap pool, it's like the factory, you put the tokens in, then you have to supply liquidity, so you have to actually mint tokens. And then to mint tokens, you have to deploy tokens.
00:34:36.310 - 00:35:19.598, Speaker A: Some of those deployments, just the test setups are pretty convoluted. But to answer your question, there's two ways to go about it, right? Like the first way is to just make an assumption based on your knowledge, based on industry standards, based on what you've seen elsewhere. And second option is to ask the developers how they intend on the deploying and what parameters they're actually going to be initializing their protocols with. We strongly, strongly recommend everyone to ask developers and not make assumptions. This is how bugs are missed. And this, don't put yourself in your devs heads. Ask them how they plan on deploying and using those contracts.
00:35:19.598 - 00:35:21.010, Speaker A: That's how we roll.
00:35:21.350 - 00:35:34.280, Speaker B: Let's see, if you wanted to do it automatically, what would be the way to do it if nothing was initialized and you just have, I guess, the required statements? Maybe there's not even required statements. So how would you go about that.
00:35:35.050 - 00:36:23.586, Speaker A: All of a sudden? If you're not bounding your initialization, your state tree just explodes complexity, right. And in just different paths that your code base can support. Very interesting question. Part of me would like to think that it's probably doable. Like you're just probably like an order of magnitude or two or three slower because you kind of have to. Now you built your tests, right, but you now have to run them across all possible initialization scenarios, which is just probably not realistic. I think one of the ways you could automate that is literally by, as part of your onboarding, your clients are about to use your new solution, your new AI powered solution.
00:36:23.586 - 00:36:36.006, Speaker A: They have to provide you with that initialization. Yeah, I wouldn't necessarily worry too much about automating that part. I think getting developer input.
00:36:36.198 - 00:36:40.380, Speaker B: Yeah, I guess a bit of a hybrid model for that part would be fine, actually.
00:36:41.550 - 00:36:45.450, Speaker A: I'd say so. I think it'll help. It will save a lot of time and effort.
00:36:45.610 - 00:37:24.998, Speaker B: Yeah, I'm just thinking about the bug bounty platforms, like code four or anything else. They just provide the contracts pre deployment. It's like, okay, how do you initialize automatically instead of just doing just static analysis on it of, okay, this is wrong because it hasn't got an only owner, but the majority of the bugs will come from fuzzing, I believe. I'd say so, yeah. So it's like missing a giant part if they don't initialize. You know, we talked about fuzzing in clients and I think in the past you've done the NIA foundation and also Ethereum client auditing.
00:37:25.094 - 00:37:26.214, Speaker A: Yeah, we've done a bunch.
00:37:26.262 - 00:37:45.440, Speaker B: Yet when we talk about the broader scale of security of blockchains, currently there's actually just a monopoly of builders. And the deeper you go into the ecosystem, you realize it's really centralized and not decentralized at all. So what do you think about that?
00:37:46.150 - 00:38:25.466, Speaker A: I'm not happy about that. It's a tough topic. Right. There's things in the Ethereum roadmap which will make these problems, I would say disappear, but at least make them less pactful on our ecosystem. And by problems, namely refer to MeV. So the builders proposed builder separation enshrined in the protocol is definitely a good step in the right direction. We are currently in the process of hopefully finalizing the research on that front, which would mean that the engineering work should hopefully kick off soon, probably January, February.
00:38:25.466 - 00:39:06.614, Speaker A: We're currently very busy shipping 4844 EIP 4844, which will provide a dramatic decrease in costs of using l two s with the introduction of blobs. Blob spaces. Blobs. Now you got all your favorite l two s. They won't need to compete for lo one block space. They will be able to use lo one blob space, which is, let's just say, ten times cheaper because it doesn't have the same sort of guarantees in terms of availability. You're able to ditch those blobs relatively frequently.
00:39:06.614 - 00:39:32.100, Speaker A: So the current state of Ethereum, to me at least, is not satisfactory, primarily for the reason you mentioned. Decentralization today lies within the block building. And in fact, it's actually very difficult to find a Builder that's credibly neutral, open source and competitive. I just don't think there's any.
00:39:32.470 - 00:39:36.462, Speaker B: I don't think you could really be open source as a builder to be competitive.
00:39:36.606 - 00:39:37.642, Speaker A: Back to DeFA.
00:39:37.726 - 00:39:49.370, Speaker B: Yeah, I think if you had really good infrastructure, yes. But I think then you just release your edge of, I guess, building the most profitable block. People can see you do it.
00:39:49.520 - 00:40:27.362, Speaker A: That's right, exactly. You kind of have to make choices at some point. But I can't announce anything. But I'm very excited to see what Sigma prime will do to fight back and at that level of the stack, because we've obviously been focused on the consensus side. A bunch of other teams have been working really hard on the execution side, but that whole builder relayer is heg for my liking. So I would really like someone, maybe Sigma prime, to tackle that problem.
00:40:27.496 - 00:40:39.674, Speaker B: I think it'll be interesting. If you do release a block builder that's open source, I think you'll have very fierce competition, and I don't know how well it would do, because block builders, they make exclusive backdoor deals with the best.
00:40:39.792 - 00:41:13.540, Speaker A: Yeah. And then they run their own searches against you. And I don't know, it's just a lot of things we do here at CP for the direct monetary outcome. Building a builder, an open source one, it's definitely not the most profitable endeavor, but look very expensive in terms of infrastructure and let alone development time. But I do see a real need for something like that, whether we'll be the ones to pull it off or.
00:41:13.910 - 00:41:40.086, Speaker B: You know, I think monopolization of them, know, Titan, Rsync and Beaver. The reason they're so high is because you have such high inclusion rate, and that's what you want. If you're trying to ape into a coin in the bull market, you want to be in that block instead of a block later and miss the opportunity. And so I think starting all these new builders, no one else really competes like flashbots doesn't compete.
00:41:40.198 - 00:41:56.510, Speaker A: Conversations with some of the builders in the space, they will not be named. And I was really surprised, like, not so surprised, to be honest. But they actually go and find where the binance servers are located, and they do out their best to try to be collocated with the major exchanges.
00:41:56.670 - 00:41:59.026, Speaker B: Yeah, it's a latency issue as well.
00:41:59.128 - 00:42:02.018, Speaker A: Exactly. It's the high frequency trading game all over again.
00:42:02.104 - 00:43:06.390, Speaker B: Yeah, 100%. I mean, that's pretty standard, putting your servers everywhere in the world, right next to everyone else's. The core infrastructure, whether it's a centralized exchange for defi CFI arbitrage, or if it's putting your searcher inside of your own server and being around all the mempools in the world, it's all partnerships at the end of the day, because you want exclusive order flow that other people don't have, and even partnering with, let's say, protocols or wallets, the more order flow you have, the more opportunities you have that other people don't. And so that's really unfair advantage. Obviously, money is a big one as well, but let's say everyone has the same infrastructure, same speed. The biggest determining factors is do you have something they don't? And the biggest ones is how good is your profit algorithm and maybe your MEB searcher to generate more MEB opportunities that people might have missed in the block, which is, I think, what a lot of people do and what deals do you have? So are you partnering with the best searchers and getting all their MEB? And then you get more Ethereum to bid in the gas auctions. Right.
00:43:06.390 - 00:43:27.440, Speaker B: And so then how can you lose if you just have all this money and all this order flow? Best profit algorithm. You see, some builders are actually bad, but they just have a lot of order flow. It kind of like cancels it out. And that's kind of what they do. And I think it is unfortunate that it's like this now. Hopefully it'll change. I really don't know when it will change.
00:43:28.290 - 00:43:40.722, Speaker A: PBS. PBS is the first step and training the builder proposal, builder separation is to me really the first big step. And as to when, well, open development and all.
00:43:40.856 - 00:43:56.102, Speaker B: Yeah. Because when we think about this, in the grander scheme of things, what if a government comes in and then they start building their own blocks and censorship, all the big builders, they just start censoring or running anything. They can do whatever they want because they basically own it.
00:43:56.156 - 00:44:23.890, Speaker A: Yeah, I think Vitalik recently gave a talk about different ways to potentially attack Ethereum. And going off the validator route is definitely not the cheapest. There's definitely other ways you can use to harm censor Ethereum. And I think the key for the next few years is going to be filling those gaps and making sure that we're resilient to any scenario, really. We're definitely not there 100%.
00:44:23.960 - 00:44:38.330, Speaker B: And it's not like we want Ethereum to get attacked because it is the basis of future monetary transactions. We don't want to be at the mercy of banks. We want to earn our money and not just get rubbed.
00:44:38.430 - 00:44:49.334, Speaker A: Yeah, I mean, counterargument to that would be we want it to be attacked. We want to stress test the thing now before it potentially holds trillions of dollars of value.
00:44:49.452 - 00:44:51.218, Speaker B: This is true. Yeah, 100%.
00:44:51.324 - 00:45:14.900, Speaker A: If there's any attack vector that us as a community aren't aware of, then I can't wait for it to pop up. And if we've got to go through a live exploitation again. Yeah, then be it. But I think the more experiments, the more attacks we sustain right now, the better we'll be for the next 510, 1520 years.
00:45:15.270 - 00:45:23.326, Speaker B: I do hope that the cryptography stands tall as well. If AI it won't.
00:45:23.358 - 00:45:59.546, Speaker A: But that's okay because we've built the thing with the ability to swap cryptographic primitives, it'll be very easy to move to quantum resistant cryptography and forward secrecy preserving cryptography. But the last time I spoke about Ef researchers on this topic, they still think that we were a few years away. Still, we're not going to wake up this year or next year to an incredible quantum computer that will threaten the world as we know it. And if that were to happen, trust me, Ethereum would be the least of your concerns.
00:45:59.658 - 00:46:18.802, Speaker B: Yeah, I think the only thing that can really get to that point is, again, AI. AI just seems like this de facto standard of being able to do everything, and if you focus on it, you can really leverage it to do some really good, but also some very bad. I really hope it will help with architecture decisions securing.
00:46:18.946 - 00:47:07.450, Speaker A: I was reading this post about AI and the future of AI, and someone was summarizing the potential of this technology really eloquently, I think. So they said that we will get AGI when AI is actually able to discover new physics, which I thought was quite interesting. It was not something that I really thought about. And the author of that particular post said, before we're actually able to do that, then we can't really call AGI. So the current state of the technology, apparently, again, I'm just quoting this researcher, but they say that without a massive breakthrough, we're not there. With the current tools that we have, the things that we know, we are not expecting to find. New physic models.
00:47:07.550 - 00:47:08.246, Speaker B: Oh, yeah.
00:47:08.348 - 00:47:15.766, Speaker A: Not to say that we won't have obviously more breakthroughs in the near future, but as of today, that's not something we didn't reach.
00:47:15.948 - 00:47:23.286, Speaker B: Yeah, I think the interesting thing is it only takes one breakthrough to exponentially get to the next stage.
00:47:23.398 - 00:47:24.058, Speaker A: Exactly.
00:47:24.224 - 00:47:46.290, Speaker B: Continuously goes like that. But it is scary when you think about how fast we are progressing. And the potential of it is quite daunting, to say the least. And man, I'm really excited for the future, especially in cyber. And just seeing how all the things kind of work in the future. It would probably become some dystopian place if we're not all extinct.
00:47:49.990 - 00:48:04.502, Speaker A: Interesting. Can I ask you what you see cybersecurity being disrupted with through AI? Maybe it's not the cybersecurity industry's disruption that you're referring to. It's perhaps the ability to build unstoppable malware or things like that.
00:48:04.556 - 00:48:09.026, Speaker B: Yeah, I think that. I truly think it's the future. Well, it's already happening with cyber warfare.
00:48:09.058 - 00:48:09.254, Speaker A: Right.
00:48:09.292 - 00:48:48.462, Speaker B: You don't want to initiate an actual war with a country and shoot missiles at them and bring tanks into a new foreign land. It's all done in a passive aggressive way online. You see this with North Korea, they attacked Ronanbridge and they're doing attacks on crypto. And obviously no one's starting a war, so you're able to do the biggest bank height in the world of history and no consequences. So that's just like the start of it. But when you think about destroying a society now, you get rid of the Internet and then you just shut off their Internet or infect in some way. That's core infrastructure, and without it, you just go back into early stages of humanity.
00:48:48.462 - 00:48:49.042, Speaker B: Right.
00:48:49.176 - 00:49:19.790, Speaker A: No, I agree. I'd argue that we don't need AI for that. For someone having spent a few years, six years dealing with traditional web security, corporate security, people tend to think that critical infrastructure is really well defended. There's like gazillion number. It's not, man. It is not. And I was really surprised, actually, when I moved to Australia to compare the level of maturity of certain industries with their counterparts in Europe.
00:49:19.790 - 00:49:21.518, Speaker A: God, are we behind.
00:49:21.604 - 00:49:35.246, Speaker B: I think there was like a couple years ago, actually, maybe not even a couple years ago, but the telephone companies and Internet providers, it was an exploit where you just type in a certain euro and it just got access to everything. And that wasn't even ss.
00:49:35.278 - 00:49:58.358, Speaker A: Seven is broken. The telco networks that we know and all use today are all broken. And that's not even a secret within the telco security industry. The only thing that is somewhat preventing people from abusing these vulnerabilities is the controls, the monitoring in place, and the redundancy baked into this core infrastructure. Otherwise.
00:49:58.454 - 00:50:10.910, Speaker B: Oh, yeah. Horrible, man. It's. The deeper you go into everything, it's very surprising of what you find because we always have these assumptions of very critical stuff. Should be very safe and hard to get into. In fact, it's the opposite.
00:50:13.250 - 00:50:14.382, Speaker A: I'd say so.
00:50:14.516 - 00:50:49.258, Speaker B: Just so weird to think about. But in terms of AI, I think if in the right hands, this is the scary thing, because it only takes one person to really change everything, and that could be a good or bad actor. It's not like you can own a nuclear warhead in your apartment and now you have this control over a country, right. When you think about AI, you can literally do it on your phone. It's pretty scary to think about. It's fundamentally different from any type of weapon ever built. So with that, it's very scary of what can happen, but it's also very exciting of how things can change in the future for everything.
00:50:49.424 - 00:51:17.214, Speaker A: Exactly. Again, I'm a cautiously optimistic person, so I tend to see the bright side but not ignore the red flags. And I think that's my take for AI at the moment. I'm super excited about its potential. I do certainly acknowledge the risks associated with the technology. But look, cryptography went through that, right? Obviously blockchain is going through that. Cautiously optimistic.
00:51:17.214 - 00:51:18.722, Speaker A: I think we'll be all right, hopefully.
00:51:18.786 - 00:51:21.286, Speaker B: Why don't you get into AI as a final question?
00:51:21.468 - 00:52:04.622, Speaker A: Oh, man, I've got enough work as it stands with stuff that we're doing at. No, you know, a lot of people have been playing with AI internally. Obviously when chat GBT came out, the first thing was like, okay, I'm going to use this thing for my reviews. So a lot of people have been augmenting their methodology with chat, GPT and the likes. Yeah. So I think probably safe to say that Sigma Pride will not get into AI product development anytime soon. However, we're very excited to leverage any tool that has the potential to make us work faster, make us work better, and AI, we see it as another one of those tools.
00:52:04.622 - 00:52:17.526, Speaker A: I certainly agree that it's a lot more than just a technology, but very excited to see how it can potentially change the way we work. We probably won't build an AI powered blockchain network just yet.
00:52:17.708 - 00:52:30.778, Speaker B: Have an AI sentient on the blockchain, never does. But man, it's been such a pleasure talking to you and hopefully when we look back at this, we're not hiding in a cave from flying ais trying to hunt us down. Yeah, exactly.
00:52:30.944 - 00:52:35.630, Speaker A: Let's listen to this episode in like five years time and see whether our predictions were right.
00:52:35.700 - 00:52:37.082, Speaker B: Yeah. Or we just cringe.
00:52:37.146 - 00:52:41.082, Speaker A: I hope we'll still be around, but thanks for having me. They got you. Yeah. This was great chat.
00:52:41.146 - 00:53:00.038, Speaker B: Yeah, likewise. And hopefully we can do one in the future as well, get a quick update and hopefully the world's a better place. But in the meantime, enjoy Sigma Prime. I hope some big things come out of the block builder if you do do that. Not saying it's confirmed, but man, excited for the future and excited to see how you progress in your career as well. So thank you so much for jumping on and I'll talk to you later.
00:53:00.124 - 00:53:00.740, Speaker A: Thanks for having me.
