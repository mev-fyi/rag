00:00:00.170 - 00:00:27.670, Speaker A: I've just noticed that, like, so many people just have like, egregiously inefficient view functions that are doing like crazy loops. They're looping through, you know, potentially the same thousand item array like twice. And you're paying gas for that. And those are some of the cases where I've worked with protocols where, like, when I have like a huge gas saving, like when I make a function like 70 to 80% to 90% cheaper, most of those cases are because, you know, they don't take note, know, view functions and transactions.
00:00:29.290 - 00:00:37.000, Speaker B: GM. GM, everyone. My name is Degachi, the host of Scraping Bits and I'm with the one and only Harrison. It's a pleasure to have you.
00:00:37.770 - 00:00:43.786, Speaker A: Thank you. Yeah, pleasure to be here. Talking with someone of your state.
00:00:43.968 - 00:00:47.930, Speaker B: Of my state. You're not going to optimize. It not going to change the gas.
00:00:48.270 - 00:00:49.210, Speaker A: We'll get there.
00:00:49.280 - 00:00:58.320, Speaker B: Okay. It's a good segue into basically what you do. I think you should give like a small little intro and then we'll get deep into it.
00:00:59.090 - 00:01:44.942, Speaker A: Yeah, sure. So I'm Harrison Popunk on Twitter, if you have seen me there, and I'm the co founder and CTO of a company called Pop Hunk LLC, as well as Gaslight GG. And we do gas optimization audits and we develop highly efficient, highly scalable public goods for the Ethereum ecosystem. And this is something that's pretty much brand new to the space. I'm sure everyone is familiar with security audits, and I wanted to take that in a different direction because I've noticed how much of an issue gas is in the whole development process. And people are just yeeting these smart contracts out there onto mainnet just with egregious gas consumptions. And I saw that issue and I wanted to address it.
00:01:44.942 - 00:02:16.600, Speaker A: So we work with protocols on their gas consumption. We've worked with small protocols, large protocols. And what we really want to do with this is just stress the importance of gas in the development process. And we want to eventually build this into something where we're not the only firm offering these gas optimization audits. We want this to be sort of a standard and expected part of the software development process in Blockchain. So the goal for this is really that every protocol, it's expected that along with your security audit, you get a gas audit as well.
00:02:17.370 - 00:02:34.270, Speaker B: Got you. Yeah, that's kind of the goal. Especially on Ethereum. People write they always want security, but they're not taking into consideration how optimized is their code, how efficient is it, and people are implementing kind of like the worst practices. Right. And it's very interesting how you really started this. All.
00:02:34.270 - 00:02:48.260, Speaker B: It basically came from Twitter, right? You made some friends and then it just kind of elevated and snowballed into what it is now, pop, punk and gaslight. So maybe give an intro into how that happened because it's very interesting.
00:02:48.950 - 00:03:53.414, Speaker A: Yeah, sure. So, I mean, I've been a software engineer for six or seven years mostly previously working in TradFi or Fintech, spent two years at Gemini working on their trading exchange, and then more so recently, basically like in 2020, I went to East Denver. My first Ethereum Conference hackathon would it be wrote Solidity for the first time there and really just fell in love with it. But I got really interested in the whole sort of gamification of gas prices, because previously, for my entire career, I'd be writing Python and stuff where respectfully, your memory doesn't matter, any of the efficiency of your code for the most part doesn't really matter. And then I came to find Solidity, where it's like every single line of code actually has a direct result, and it's like a dollar amount. So I joined Magna about a year ago, which is a token distribution platform, and I joined there as the protocol, the lead protocol. Dev and all of their smart contracts before I had joined were written by interns and stuff, which is fine.
00:03:53.414 - 00:04:34.754, Speaker A: But I came in there and I immediately saw that there were a lot of inefficiencies in the smart contracts, and I had a lot of fun optimizing it. And just like, working through the process of optimizing a protocol that was already developed was really fun for me. So I started to tweet about it, and I would just write simple tweets about things that I'm finding, like, hey, instead of doing this, you could do this simple thing and your function would be 40% more gas efficient and stuff like that. So I started to tweet about it. I started to write threads about other big protocols that I've seen just because I wanted to really hone my craft on gas optimization. So I was looking at dozens of smart contracts a day and just writing tweets and threads like, hey, why are they doing this? They should do this. That went on for a month or two.
00:04:34.754 - 00:05:34.898, Speaker A: And then it evolved to the point where I started to get DMs on Twitter from big companies, companies that I use their platform, and they were reaching out. They're saying, hey, I've seen you write these threads on Twitter. Clearly you like to look at gas and stuff. Would you be interested in working with us? So I started to, on the side from my day job, do these gas optimization audits and consulting gigs with companies. And then it just evolved to the point where, in the span of a month of doing it on the side, I could see the money was clearly there, the demand was clearly there, and I love protocol development to death. But just the fact that I had the opportunity to turn my side gig and my hobby into my full time career and build a company out of it was like a no brainer to me. So about a month and a half ago, I quit my job at Magna, and I just basically aped into this and full sent it I'm also working with Cygar and Optimizer who are consulting with me on some of these gas audits.
00:05:34.898 - 00:05:47.574, Speaker A: One of my best friends, Erin, left her job as a crypto lawyer and is the CEO and co founder with me. And yeah, I mean, we're just going wild with it, working with multiple protocols at a time and just getting rid of gas.
00:05:47.702 - 00:06:23.398, Speaker B: Yeah, it's super interesting. And you've basically found a passion as well for it and gone straight in and it's actually done you wonders, right? Like you're getting massive deals and clientele coming in. Basically everyone wants it because this kind of industry never existed before. You actually and you popped off once you started making these threads on gas. It was kind of considered like a joke at the start, but now it's really serious and massive protocols and companies want your help and there's nobody else really providing the service, right?
00:06:23.484 - 00:07:07.910, Speaker A: Yeah, it's super interesting. I kind of became like the gas guy on Twitter. I had like 200 followers and I was just writing all these tweets about gas and people are like, okay, what are you going to do, put an unchecked block on a loop or something like that? And people kind of wrote it off a little bit and I just continued to full send it. And then I was able to get connected with Radiant Capital, which is one of the largest D Five platforms in the ecosystem. And I worked with them and they gave me a really good review and they tweeted out basically statistics and it was like on many of their core execution paths, I was able to save between 30% to 88% gas on some of these expensive actions. And I think that's sort of when people started to realize like, hey, this isn't a joke. This isn't just saving like a penny here and there.
00:07:07.910 - 00:07:35.882, Speaker A: There are serious cases where I could help make the difference between a $25 transaction or a $5 transaction. And we've seen it before where companies come out and they have these really inefficient contracts, like Blur in the beginning that's all people talk about and people are always going to meme about it on Twitter and stuff. At the end of the day, a lot of the protocols that are working with me and my company, they're doing it for their users and they're doing it for the pockets of their users.
00:07:35.946 - 00:08:43.422, Speaker B: Gas on Ethereum specifically is expensive, and for each opcode piece of code that's being executed, that costs gas, and gas is money, right? So you want to level this as much as possible. And this is basically what Harrison does at Poppunk, and it's very prevalent in these NFT protocols that are getting massive hype and they have basically a backlog of people wanting to mint multiple NFTs and maybe they have to do like a for loop on just like a hundreds, for example. And this can just cost so much money because it just fills up the blockchain and then prices go higher because people want to have a transaction before others. And then it just makes it so expensive and it gets to even like the thousands of dollars just to do a transaction or hundreds. It's insane. So it is a very important thing taken into consideration when developing and not just security, because if it's too expensive, people don't want to mint. And for the average person, they're not willing to spend hundreds of dollars just to send the transaction.
00:08:43.422 - 00:09:01.458, Speaker B: So, yeah, it's very important. I think it's going to be a big industry. And you're obviously like a first mover, the one that kind of pioneered and brought the idea into the space. And you mentioned you're starting working with Radiant. What were the steps to kind of building this connection and building a clientele from scratch.
00:09:01.554 - 00:09:22.490, Speaker A: Yeah, so I think a lot of it really just stemmed from my tweets. I'd have an occasional tweet, even when I had a couple of hundred followers go like, I remember go quote, unquote, viral and get like 50,000 impressions and stuff. And these companies would start to see it. Radiant was actually a connection from one of my friends who's a phenomenal security researcher. Zero x riptide.
00:09:22.570 - 00:09:23.102, Speaker B: Okay.
00:09:23.236 - 00:10:02.746, Speaker A: Yeah. They reached out to him because he was working with them on some security stuff and they were like, hey, do you know anyone who's good at gas? And he referred me, I sort of did like a demo with them. I did like four or 5 hours, really last minute of gas optimization for them and they were really pleased with it. And then it evolved into them saying, we're launching our V two of the entire Radiant Protocol month and we'd love to work with you. And I was super hyped just because this isn't even like, I love when I don't have to do outreach and I don't reach out to companies. And companies on their own are thinking like, hey, we really want to reduce our gas consumption. How can we do this? They reached out to him, he reached out to me.
00:10:02.746 - 00:10:13.442, Speaker A: And yeah, I mean, it's been a phenomenal process to work with them. They're a great company, great developers, and I always just think it's super based of a company when they want to actively work on reducing their gas cost.
00:10:13.576 - 00:10:30.130, Speaker B: Yeah. Because ultimately is also efficiency of code and easy to read, easy to scale. What have been sort of the horror stories of your path so far? The most common sort of patterns in these inefficient contracts.
00:10:30.210 - 00:11:07.810, Speaker A: Yeah, I mean, like you had briefly touched on earlier, one of the biggest things is just like bulk actions or batched actions on chain. Like you said, when you want to mint 100 NFTs, or let's say you want to add 100 items to a mapping or something, it's just people don't really think about how they're doing it and how they're processing it. And you'll see people doing like they'll have a function that they'll call every single time in the loop, whereas they can just call it once and cache the result beforehand. And that's what a lot of it is. A lot of gas optimization that I do. It's not like super intricate things. I would say that's probably like 20% to 30% of it.
00:11:07.810 - 00:11:54.266, Speaker A: But a lot of it is just sort of like common sense things that you might not think about in the development process. That it's the same thing with the reason why QA engineers exist is because it's obviously not the safest and the best thing to just have one set of eyes like the developer looking at the code the entire time. You kind of want someone with an outside set of eyes to come at it. And then another really big issue that I've started to notice recently is there's sort of like the misconception with view functions. People think that because you mark a function as a view, it's totally free to call and if you're just calling the view function, that's the case. But if you're calling that view function in part of a transaction, you're going to pay the gas for that. And I've just noticed that so many people just have egregiously inefficient view functions that are doing like crazy loops.
00:11:54.266 - 00:12:16.230, Speaker A: They're looping through potentially the same thousand item array like twice and you're paying gas for that. And those are some of the cases where I've worked with protocols where when I have a huge gas saving, when I make a function like 70 to 80% to 90% cheaper, most of those cases are because they don't take note of view functions and transactions.
00:12:16.970 - 00:13:02.066, Speaker B: Yeah, using a view function doesn't necessarily it's going to be extremely cheap because when you go under the hood and to the bytecode level, it's still performing the same operations as an external function or a public one. It's just done in a way where it's still using the exact same opcodes as a public one. So let's say you want to use storage and you don't want to cache something in view. That doesn't mean you're not going to spend 2100 gas on bringing it from cold. And then you know what I mean, instead of doing that, you can just put it in cash. In cash like the memory. It's the same sort of functionality as external.
00:13:02.066 - 00:13:12.970, Speaker B: It's just when you're calling it or querying it, you don't have to pay to submit basically a transaction, you're just querying it. But if you're interacting with it in an external you're still paying for that gas.
00:13:13.870 - 00:14:04.154, Speaker A: Exactly. Yeah, it's basically like if you go into Vs code and you write a function that doesn't modify any state values, like Vs code will prompt you and it'll encourage you to add the view modifier to the function. And yeah, if you're going to call, say you want to call and see how many holders of a token there are and you want to get their balances or whatever you're going to call the view function, you're going to get all the holders and you're going to iterate and sum up the values or whatever. However be your data structure is if you're just going to call that, it's going to be free, obviously, because it's not going to modify state. But let's say that you have a function and the first thing you want to do is update balances and then you want to retrieve all of those values since you're going to be modifying state there and then calling the view function the loop through that 1000 item array is not going to be free. You're going to be charged for that.
00:14:04.272 - 00:14:21.466, Speaker B: Yeah, exactly. Basically view functions are non modifying state functions really. But you're still doing all these changes and whatnot with for loops? And I think for loops is probably the biggest pitfall and not knowing where storage and memory how storage and memory interacts.
00:14:21.498 - 00:14:59.722, Speaker A: Right, exactly. Yeah, for loops are always a pretty crazy issue because just like surface level, the way that you define your for loop can be pretty drastically optimized. Let's say you have a loop in a function and you're using memory parameters, but you can be using call data a lot of times. Just switching that one word from memory to call data could make your loop like 6% more efficient. And then there are other cases like if you're going to use memory, if you have to use memory, you want to make sure that you're caching the length of that array when you're defining your for loop. So you don't have to essentially evaluate the length of that array every single time. You can go really crazy with for loops too.
00:14:59.722 - 00:15:54.762, Speaker A: It's like obviously anything that you don't need to do multiple times in the definition in the body of your for loop, you should be doing once beforehand. And then yeah, you can go really crazy with for loops. One of my favorite scenarios is I wrote the contract for when tokens XYZ which is like the most gas efficient AirDrop and this was one of the cases where I just decided to basically write the entire thing in Yule. And Yule is really nice for loops because you're able to skip that array and bounds check every single time you iterate, which is going to save gas exponentially based on the size of your array. But Yule is really great because you can just skip unnecessary opcodes that solidity itself would subject you to. But Yule is sort of a double edged sword. It's obviously really hard to read and if you're going to write open source code that you want other people to import your libraries or use them in their code base, yule is kind of tricky just because a lot of people don't like to look at Yule.
00:15:54.762 - 00:16:32.780, Speaker A: A lot of auditors just typically don't like to look at Yule if they're not like a really top tier auditor or they'll charge you more for Yule. So that's also like a misconception with this gas optimization stuff. Like, I talked to Protocols and I would say probably like 10% of all companies, one of the first things they mention is we don't want you to rewrite our entire contract with Yule. That's not going to be like what I'm going to do. It's really rare that I'll incorporate Yule into a new code base. I really only do it when it's like a no brainer. Like, say you have a view function that's summing something, there's really no risk to add Yule to it.
00:16:33.310 - 00:17:22.426, Speaker B: Yeah, and I think having Yule or inline assembly or even half, it's not desirable for big companies or even people, even startups, any kind of company really, because it's such a niche and it's so hard to find experienced devs that are good at their craft with those lower level kind of languages, solidity devs are everywhere. You can get a good one anytime if you have the right connections. Right. But to find a good assembly dev is so much harder and there's so much more room for error. So that's why these guys want the higher level optimizations, which Harrison's doing. And I would love to know, how do you charge for these gas optimizations when people approach you?
00:17:22.528 - 00:18:08.050, Speaker A: Yeah, so we've had the current way that we've charging and we're slowly starting to pilot a new one. But the current, I guess the legacy way that we're doing it is basically it's just strictly based on your lines of code, the complexity of your code base and your deadline. We're going to obviously charge more if you're like. We need to deploy this in two days, so we have to shift around other audits. And with this pricing model, it really depends. We've worked with Protocols for five to ten grand all the way up to we've done six figure audits and a lot of people are like, wow, like a six figure audit, that's wild. Why would someone spend that much? But if you think about the fact that a six figure audit is probably like a big company, a lot of smart contracts, they're going to have a lot of users.
00:18:08.050 - 00:18:54.070, Speaker A: And if you think about, say, you can optimize just across the board, like 30% for all functionality, that's really going to trickle down to the users. To say, this protocol has 50,000 daily active users. If every user is going to be saving 1020 $50 a day, that sort of is a net positive for the protocol. Because if you have desirable code to use, if you have optimized code, your users are going to be happy. And then on the other side too, I've worked with Protocols where I'm doing a lot of optimization on their functions that call their Oracles, and that's a direct benefit to them because they're maintaining these Oracles. They're calling these functions, they're doing the transactions, so they're actually saving it. Like, I've worked with a protocol who was spending $25,000 a week just themselves on their Oracle maintenance.
00:18:54.070 - 00:19:39.842, Speaker A: Crazy. And then we're slowly starting to pilot a new pricing model where it's essentially I was actually really inspired by Owen Thurm from Guardian Audits. He actually reached out to me and he was like, hey, are you doing this? And I'm like, oh, I kind of want to try that, where it's sort of a performance based pricing model. So we'll give you a flat price just for us to review your smart contracts. And then the pricing will be based on essentially how much gas optimization we're able to do. So for this contract, if we're able to net average 5% savings, we'll charge this much more, 10%, this much more, et cetera, et cetera. And I think that's probably going to be something that we start to do a lot more moving forward just because a lot of people, a lot of protocols are still skeptical about our services just because this is a brand new thing.
00:19:39.842 - 00:19:56.202, Speaker A: Obviously these great reviews from Radiant and we're currently working with Pixel Vault and stuff, they'll help, but I think it'll be a lot more desirable if we're like, hey, just for us to review your code, we'll charge this small amount and then you really are just paying based on how much benefit we can bring to you.
00:19:56.336 - 00:20:44.070, Speaker B: Yeah, for sure. I think the pay by what you produce is definitely a more attractive model. For example, if you're a startup and you don't have a lot of capital, you don't want to risk spending it and then not getting results you desire. So this really like, okay, you're paying for results. You're not just paying for a gamble, really. And so anyone can really come. And I think a lot of projects should actually start providing this kind of model because nobody wants to spend 20 grand or 40 grand for something that there's no guarantees, right? And then once your reputation starts boosting, it's kind of like even more, okay, this guy has a track record and we're paying for basically results.
00:20:44.070 - 00:21:08.114, Speaker B: There's a high guarantee that it's going to happen. Whereas if like a startup or a team that has this model and they don't produce results, they're not losing anything, right. So it's kind of like a win win. You just pay the results and it's kind of like contribution in a way. Exactly kind of like that. But yeah, I think it's a terrific model. So basically doing like by percentage or.
00:21:08.232 - 00:22:07.086, Speaker A: How'S that going, yeah, we're basically starting to pilot it with new customers where, yeah, it's percentage based, based on this contract, if we can save this percent, it'll be this much more. I think it's also a really just like, optimal model too, because I've worked with companies and there might be code bases where I'm able to save 60, 70 80% gas on some actions, but there might be other protocols where that's just not possible. The things that they're doing, whether it's just like their code is super simple or they have really strong devs, I might only be able to save 10%. I don't want to have the expectation where it's like I'm going to come in and I'm going to make everything half the cost because in a lot of cases that is possible. And I'm super open. When I work with protocols saying this stuff, I'll obviously always use Radiant because they're one of my early biggest customers, biggest clients, just to kind of show my track record. But I really stress the idea that it's like these results aren't typical.
00:22:07.086 - 00:22:14.390, Speaker A: Everything is completely different, every code base is different. So that's why I think that the new pricing model I think will really excel for us.
00:22:14.540 - 00:22:18.920, Speaker B: So you used to do basically the flat rate before and then you switched over.
00:22:19.530 - 00:22:40.910, Speaker A: Yeah, we're still really doing the flat rate for a lot of protocols. If it's just like one smart contract and it's like, I know I can rip through this in like 5 hours, I'm just going to charge one fee and it's just like whether I save 20% or 90%, it's whatever. But obviously for bigger protocols I think that they're going to be a lot more enticed by this variable price and structure.
00:22:41.330 - 00:22:49.700, Speaker B: And you're basically doing the solo right now and you bring on like vectorize and the other people when you can't. You're busy or something?
00:22:50.070 - 00:23:16.698, Speaker A: Yeah. So essentially I basically went full time and this is my full time job, this is my full time career. Now. I'm doing crazy hours, like twelve to 16 hours a day of optimization. So a lot of this work is done solo by me. But I really like to bring on other sets of eyes like Optimizer and Cygar. Not even if I'm just really busy but it's just like we all sort of have our own niche skill sets and stuff.
00:23:16.698 - 00:24:18.654, Speaker A: Obviously Optimizer is probably one of the most competent assembly developers on the EVM in this space and Saigar is just the guy's cracked for basically anything like NFT related. Obviously Optimizer and Saigar are the maintainers of ERC 721 A which if anyone's unfamiliar, it's basically like an Azuki developed fork of ERC 721 where it's a lot cheaper to do batch actions because like I've basically been talking about throughout this podcast so far, it doesn't update the state inside of the loop. Basically for every loop iteration it's going to update the token owners and the balances and stuff afterwards. So ERC 721 A is super cheap to use but yeah, Cygar has worked with basically almost every single big protocol that's dropped like an NFT so he's really well versed in that. And I think together we all make a really solid team and ideally I'd love to have just them put any amount of hours into every single audit that I work on.
00:24:18.692 - 00:24:32.994, Speaker B: Yeah. Get them all like full time or something. I would love to know, and I'm sure a lot of people like to know, especially teams. What does your sort of process for optimizing small code bases and big code bases? Something like Seaport or something like that? Yeah.
00:24:33.032 - 00:25:32.822, Speaker A: So a small gas audit for typically one smart contract could be anywhere from one day to a couple of days, depending on the size of that contract. But I'm basically just going to go through. One of the big things we ask is, what is the scope? Do you care about every single function being optimized or is it just like these critical ones? Typically the way that it works for just one smart contract is I'm going to go through it and then I'm going to give you all of the feedback afterwards just because I don't think it's like a net benefit for us time wise. If I'm reporting to you with every single finding I have for one smart contract, if it's a huge protocol. Some of these protocols that I've worked on are like up to 10,000 lines of solidity code and that's a really iterative process. So I'm basically giving results as I find them. I'm working through GitHub issues and I'm opening an issue and I'm updating it with every single new finding just because some of these audits can be ten days all the way to like we're working on the Pixel Vault audit, which has been a month long, and I really want to work with them and give them time as I find something.
00:25:32.822 - 00:25:38.386, Speaker A: If they want to just rip through, review it, open a PR and get that fixed ASAP.
00:25:38.498 - 00:25:48.122, Speaker B: And you're basically just doing GitHub issues. It's not like doing any reports at the end, like a normal standard audit for security. Yeah.
00:25:48.176 - 00:26:12.766, Speaker A: So, I mean, I will say things are a little bit all over the place because we're so early. So right now everything is driven by GitHub issues and pull requests if I want to make the changes. But we're working with some cool companies that are actually willing and actively developing software for us to use to generate these really interactive audit reports afterwards, which I'm really excited to start using probably later this summer.
00:26:12.878 - 00:26:26.562, Speaker B: Yeah, it would be very interesting to get those reports so you could use them as testimonials or actual evidence that you've okay, this is how much gas we saved for this company on these contracts.
00:26:26.706 - 00:26:53.486, Speaker A: Exactly. Yeah. Because obviously the developers of a protocol will understand we saved this or whatever, but if you want, say, the CFO or the COO to be able a lot of these times they have to tell them you can't be like, hey, make a GitHub. Look at all these GitHub issues. We want to have a really interactive report to see this function. It previously consumed this much gas in US dollars. Now it.
00:26:53.486 - 00:27:10.022, Speaker A: Consumes this much gas in US dollars. So it's like, say you wanted someone to mint 50 NFTs. It used to cost X, now it costs Y. And I think that's also just a benefit. So we can sort of itemize the work that we did to everybody that works at our company for sure.
00:27:10.156 - 00:27:17.798, Speaker B: What have been some difficulties, really during this process of starting up, building pop, punk and from basically the ground up.
00:27:17.884 - 00:28:03.974, Speaker A: Yeah, I think the biggest issue was sort of earlier on was just like, people didn't take me seriously and didn't take what I do seriously. They're like, oh, just like tweeting about gas and stuff. They didn't think it was important. That was definitely one of the biggest hurdles and it really took just really honing my craft and just really working with a bunch of customers early on and showing the results and stuff. And I think people will start to see when Radiant actually goes to main net with their V Two protocol, which they're going to eventually be doing. I think that's going to be huge because Radiant was built essentially in mind with just being on L2 S. And I think one of the biggest things is going to be like us working with L2 protocols and optimizing them to the point where they're feasible on main net.
00:28:03.974 - 00:28:09.926, Speaker A: Ethereum, I think, is going to be huge. And that's when I think people will take what we do a lot more seriously.
00:28:10.038 - 00:28:25.966, Speaker B: L two S in general, everything, basically. But Ethereum is quite cheap, so gas doesn't matter as much. Unfortunately for Ethereum, gas is a massive factor when developing. So I wonder if you're doing any optimizations for anybody on different chains or.
00:28:25.988 - 00:29:08.618, Speaker A: Is it strictly I would say the majority of the customers that we've worked on so far have been on non Ethereum main net. We've worked with customers on like Arbitrum Binance Smart chain Polygon was not expecting. Because that's another one of the misconceptions is that, oh, we're on an L2, gas doesn't matter. And that's probably the second biggest thing. Aside from people being like, gas optimization isn't important. One of the other biggest struggles is a company being like, we're on a layer two, it doesn't matter, gas is already cheap. The reason why I say that's a misconception is, yes, the base gas costs are already pretty cheap, but these bulk actions, you can still have a function that could cost $2.
00:29:08.618 - 00:29:31.742, Speaker A: We can make it $0.50. But even the more important thing is just because you're on an L2, yes, gas is cheap, but you're still going to have that same around 30 million gas unit block size. So even if your code is inefficient on an L2, you might only be able to say mint 50 NFTs instead of me going in there and optimizing and allowing you to mint 400 NFTs in a transaction.
00:29:31.886 - 00:30:08.590, Speaker B: Yeah, even I had that kind of that view. It doesn't matter too much, but when you put it in a way where you think a lot of people are going to be using it and in the long run, you want your customers to basically have more money to spend because you're saving them on transaction fees, which they could use for other endeavors. So it definitely does matter on L2. I think people sweep it under the rug and then come back to it later because I don't think it's too as important as security when it comes to L2 S, but apparently not your clientele says otherwise.
00:30:09.090 - 00:30:40.634, Speaker A: Yeah. Even though it might not impact the cost, it's going to affect the computation power in a single transaction and how much your users why let them do only a little bit per transaction when they can batch way more into a transaction? Most of this gas optimization really just boils down to aside from the cost, it's just user experience. You want the users to pay the minimum amount of gas that they can. You want them to do the maximum amount every time they click a button. And it all just boils down to that.
00:30:40.832 - 00:31:52.894, Speaker B: And I think another big factor for companies as well, or protocols to get these optimizations is when a user interacts with your contract and they see the fee is just really high. That's also very off putting for the user. So it's not just, okay, we're optimizing and saving you money, it's also giving you an image. Do you want to be known as that person or that protocol with the high fees? I remember that protocol, it just came out. The Minting was extremely high more than the actual cost of the Mint. Do you want to be known as that protocol and have that kind of reputation? Or do you want to have the low fees and kind of differentiate yourself from everyone else? Because it's a pretty common thing of protocols, having high gas and people paying ridiculous fees just to get into a mint of an NFT collection that just came out, or just doing a transaction of a swap and liquidity pool, all that kind of stuff. So it is important to consider and you should realize all aspects of it, especially on the front end, because they're going to see and they might be discouraged and not want to use your protocol.
00:31:52.894 - 00:31:58.210, Speaker B: And that's a reality. So definitely take that into consideration. Owners and CEOs.
00:31:59.430 - 00:32:33.930, Speaker A: Yeah, exactly. I've seen it before. I've wanted to just mint. I've wanted to do a free Mint or whatever for a friend. I support stuff. But you go to the website and if gas is high, you could be paying $25 to mint a free NFT and it's like, yeah, it's a free NFT, but is it really free if I'm paying like 2020 $5 to mint it? That's the thing, like I spoke about earlier is like the blur scenario where it's like, obviously people got sort of comfortable with how Openc was. Openc was like the leader of the pack.
00:32:33.930 - 00:32:58.100, Speaker A: And the Openc protocol team is some of the most competent and just best efficient developers in the space. And then Blur comes out. There's tons of volume on Blur, but people are noticing like, hey, some of these actions cost three times the cost of OpenSea. And that's going to resonate in people's minds and think like, hey, do I really want to use this protocol if I'm going to have to pay substantially more to use it?
00:32:58.870 - 00:33:10.598, Speaker B: And even just marketing for OpenSea would be better as well. It's like, okay, look at our gas costs compared to our competitors. Who are you going to use just based off that? It's just an instant, okay, going to use the cheapest one. There you go.
00:33:10.684 - 00:33:56.594, Speaker A: Yeah, exactly. And I think that's sort of something that I'm starting to see with competitors and stuff is I'll work with a company, they'll be really public about the optimization, the services that I was able to offer to them, and then one of their competitors will reach out because they're like, shit, this company did it. I feel like we have to as well. And I hate that feeling where just like, they're only using me because they need the competitive edge and stuff. But at the end of the day, I'll work with almost every single company in this space, which is the goal, because at the end of the day, I don't care about the money, the Twitter followers, the Twitter likes and stuff, obviously that's great, but at the end of the day, it all just comes down to having optimized. Smart contracts are just a net positive for everybody. And that's the goal.
00:33:56.594 - 00:34:12.042, Speaker A: I've had so many people ask me like, oh, what are you going to do when auditing firm X or auditing firm Y offers gas optimization and no one wants to use you anymore? And I'm telling everyone, to me, that's the goal I want all auditing firms to offer.
00:34:12.096 - 00:34:55.782, Speaker B: Yeah, exactly. And it's a net positive for the whole ecosystem. Right? Because the end goal is to basically have the world use crypto. And the only way you can get people to use it, if it's cheap and it's effective, and if people are like some normies from the street are trying to interact and buy groceries with a function that just costs $10 to execute, it's not going to become a reality, is it? So it is a very important thing and it's very overlooked. It's not just some meme on Twitter, oh, I'm like 10% more optimized, 50% more optimized than you. Like, okay. It's a big thing and that's the only way that the world's going to onboard if it's usable.
00:34:55.782 - 00:34:59.974, Speaker B: And this is a core factor. If it can become usable.
00:35:00.102 - 00:35:45.114, Speaker A: Exactly. Yeah. And another thing is, I hate to say it, but I really am just like an EVM main net maxi and just like, I really want to work with as many protocols on ETH main net to make them feasible and cheap as possible. Because let's say you want to bring a batch of your friends into Web Three that haven't been in it before. It's a pretty daunting annoying task for someone that has no experience to tell them, okay, you have to buy ETH on Coinbase, then you have to send it to your Metamass, then you have to bridge it to this new network, and you have to wait 25 minutes for the Polygon bridge or something. L two S are great for a lot of things. I really think that layer twos are going to be where fully on chain gaming lives, and I like that.
00:35:45.114 - 00:35:58.800, Speaker A: But for all these other things, if ETH mainnet was just cheap for people to use, I think that's a really good way to onboard more people into Web Three. So you don't have to be like, okay, now swap to this chain, and they're like, wait, what?
00:35:59.730 - 00:36:20.840, Speaker B: And by the way, you have to pay for that as well. Yeah, just to move your money. But yeah, man, how did you even get to learn and to optimize basically a smart contract? Because it is a different game to just traditional code because it has that financial factor. So, yeah, how did you get into basically learning this?
00:36:22.650 - 00:37:08.066, Speaker A: I joined Magna, and one of my first tasks was I wanted to rewrite all their smart contracts. They were on essentially like V Zero smart contracts. I wanted to rewrite and go to V One, and I was just like, noticing things because before June of last year, basically before a year ago, I didn't think about gas. I've only been developing solidity for a little over like a year and four months. So I was just focusing on writing smart contracts, but coming in, I was just noticing things and I was like, why are they putting this in storage multiple times? Or why are they doing this? And I was just noticing and running the tests, and I'm like, this gas seems like really high. And just like, in doing so of just rewriting functions, I'd started to notice. I'm like, wait, so I just made this function half the cost.
00:37:08.066 - 00:37:47.362, Speaker A: What else can I do? And it was like the gamification of gas to me. I just got obsessed with chasing that feeling of making the gas as low as possible. And that's really where it all started, was just like coming into a code base. That Magnus code was fine, it functioned, it was super secure, super safe, but I just got obsessed with that feeling of like, how can I make this lower? And then as I said, I started to just look at other protocols because I was like, hey, let me look at these smart contracts that I interact with on a semi regular basis. How are they doing? Things started to notice just like, even some of the biggest companies in the space aren't focusing on gas and it just got me obsessed with it.
00:37:47.496 - 00:37:55.346, Speaker B: Oh yeah. And how much did you save for Magna when you did it? I think you mentioned a ton.
00:37:55.528 - 00:38:25.690, Speaker A: I think that between V Zero and V one of their smart contracts are like half the cost. And then right when I left, I was wrapping up the development of the V two of the protocol and I think v two of the protocol going from V one to V two was like 50% cheaper. So it's pretty drastic savings. And I love the Magna team to death, love everyone that I worked with there. And I'm happy that Magna is essentially the most gas efficient token, vesting and airdrops on the planet.
00:38:25.770 - 00:38:35.794, Speaker B: Now that you have more clientele and you have a lot more, I guess, statistics, what do you think is the average gas you're saving for people?
00:38:35.912 - 00:39:10.582, Speaker A: Yeah, I would say the base average I think would be between 20% to 30% overall. Obviously a lot of that is skewed by some of the customers where I'm able to save 60% to 80%. But on average if it's like a semi complicated code base, we should be able to save around like 2025 30% on things. Obviously if it's like a super simple contract where there's not really a lot of loops, not really a lot of potential ways to game storage and memory and stuff, it'll be cheaper. But on average I'd say it's pretty common to save someone 20% overall.
00:39:10.726 - 00:39:25.780, Speaker B: Yeah. And does this include changing data types? So let's say someone has a struct in an array and it's just an array of structs or like a mapping of nested structs. Do you do any of that kind of optimization as well?
00:39:26.390 - 00:39:55.900, Speaker A: Some cases, yeah. I typically don't like to change really like core, core functionality unless it's going to be a massive optimization. If I see like, hey, this will be half the cost if we change the way that you're constructing these values. Yeah, but a lot of this is really just surface level solidity things and then just basically running transactions through, tenderly seeing where the gas is coming from and saying, hey, you actually don't need to call this function every single time and stuff like that.
00:39:56.750 - 00:40:07.360, Speaker B: Yeah. And speaking of tenderly, let's say if you could create a tool basically to help you in your endeavors, what would that kind of look like?
00:40:07.970 - 00:40:48.346, Speaker A: Yeah, so honestly, the thing that would make my job easier and also help a lot of developers would be like Slither, but for gas, like gas fuzzing. Slither will point out these static analysis of vulnerabilities, security wise things, basically that. But for gas and me wanting that definitely would make me less money overall because I'll have a lot less stuff to optimize. But like I keep saying, I just care about everyone having cheap gas. But if someone, I've seen people reply to my Tweets and stuff and they're like, oh, like slither or whatever, you can have gas fuzzing. I think that would probably be really good for the space.
00:40:48.448 - 00:41:28.486, Speaker B: Well, hopefully people are going to start building that after this if this gets traction, but yeah, it's pretty interesting. I think it could definitely be done. But also another interesting thing that kind of would prevent really great gas optimization is the fact that Ether scan would not be able to verify the changed code and that's like a massive problem. And that's why you're sticking to solidity, right? Because it can't be verified on Etherscan. I think a lot of people want their contracts verified, so it's like, okay everyone, you can see what our code is and not be lost in the bytecode. So yeah, it's pretty downfall, I think.
00:41:28.588 - 00:41:47.978, Speaker A: Yeah, anytime I go to a company's website and I click their GitHub and I see that they have unverified bytecode on Etherscan, there's a really low chance that I'm going to interact with their smart contracts. I'm not as much of a wizard with bytecode as you are, but when I see bytecode I get a little bit nervous.
00:41:48.154 - 00:42:26.460, Speaker B: Yeah, because you don't know what's happening. And if you wanted to learn, you would have to do, you basically have to be like a specialist to learn how to read and understand really quickly, otherwise it's just a whole process. And then at that point, is it even worth it? Unless you're doing some very niche things like, I guess mev or looking to exploit someone. But another thing I wanted to ask is since you've kind of done all this and you were juggling basically your own job and doing this as a side gig and now it's full time, what did your schedule look before you became full time? Full time. And then what did your schedule look?
00:42:26.830 - 00:42:52.750, Speaker A: It was pretty wild. So I'd typically wake up, I wake up at six to 06:30 a.m. To walk my dog, feed him. I would do an hour or two of gas optimization. Then I would put in minimum of nine to five to six to seven at Magna at my full time job. And then it was basically just straight after that, all gas optimization. And I would do gas optimization until midnight.
00:42:52.750 - 00:43:31.886, Speaker A: One, just go to sleep and do it all over. I'm a really firm believer in while I'm young, I don't really care as much about my work life balance. I just want to be doing things that excite me and I always want to be learning. And I think that blockchain and web3 is one of the spaces where you could always be learning. So I'm totally down to just ape crazy hours into it. Obviously my girlfriend happy when she's like, hey, tonight, can we not talk about blockchain? And I'm like, I'll try. The hours were crazy and I'm still really doing it now that I'm full time on this.
00:43:31.886 - 00:43:51.750, Speaker A: I still just love to gas optimize because it's crazy because gas optimization, before I started doing it for money was my hobby. Then once I started to do it part time, it was my side gig and now I've basically turned my hobby into my full time career and I'm just happier than I've ever been doing it. Crazy hours.
00:43:51.900 - 00:44:47.894, Speaker B: Yeah, sure. You basically found a passion and just kept on doing it and then it developed into something because you basically identified an opportunity and executed and you're still executing. But I think a key thing to touch on that is that you kind of don't have a work life balance. Right. And it's a common thing to see a lot of successful people not have a work life balance because they're so focused on basically accelerating their learning and get to the next level as fast as possible because time is very precious. And if you can dedicate that into one thing, laser focused as much time as possible, then you're going to go faster than the guy doing part time, not focused when doing it coming back from work. And now he's all drained mentally and needs to rest and whatnot, spend time with their family, whatever.
00:44:47.894 - 00:45:02.750, Speaker B: But I think a key thing as well is take risks when you're young and this is like a massive risk. Of course that paid off because you put in the work and you gave yourself the time and energy to really have at it.
00:45:02.820 - 00:45:31.270, Speaker A: Exactly. Yeah. And I just want to mention that I'm doing this all willingly. If I wanted to, I could work 3 hours a day on gas optimization, make a higher salary than I would make at any other big tech company. But that doesn't satisfy me. It's like I like to put in these hours. I consciously make the decision to work with two, three protocols at a time and do these concurrent gas audits for multiple protocols at a time and sort of bounce between the contracts.
00:45:31.270 - 00:45:49.674, Speaker A: But yeah, I mean it's definitely not the healthiest thing to work as much as I do, but I'm still relatively young so I'm just going to put as much time in. When I start to feel like I'm burning out, I'll slowly cut back on the hours I work. But for now it's full send.
00:45:49.872 - 00:46:03.310, Speaker B: Full send. Yeah. Burnout is also like a big thing I think I'm experiencing somewhat now because I've just taken on so much work. Do you ever do a bit of a switching of tasks or are you always basically optimizing?
00:46:04.050 - 00:46:42.662, Speaker A: Yeah. So when I switch tasks and stuff, I'll go from working on a paid gas audit that I'm doing to just going through Twitter, see what companies release, new smart contracts, looking at it, seeing if I could write a thread about, like it's obviously still like, gas optimization, but it's sort of like a less reclined version of it. Fortunately, I've been doing this for a little bit now, a couple of months. No burnout. I definitely have experienced burnout in the past. For me, burnout is a lot more prevalent when I'm working on something that I'm not passionate about. So back when I was working at Gemini, or just writing just like Web Two code, like writing scala back ends and stuff, I just wasn't hype about it.
00:46:42.662 - 00:47:14.230, Speaker A: I will say before I got into Web Three, once I left the office at 05:00 p.m., that was it. I wasn't looking at slack, I wasn't pulling up GitHub pull requests to review stuff. I just wasn't really passionate about. Work for me back then, from 2017 to 2021, work for me was just work. It was a job that I did to get paid and then I would have fun. But now I've gotten to the point where I stress this a lot on Twitter, but nobody in this space knows everything.
00:47:14.230 - 00:47:26.186, Speaker A: There's always so much more stuff to learn and that's what motivates me to essentially we all say it in crypto Twitter, but I'm terminally online and I enjoy it.
00:47:26.368 - 00:48:03.158, Speaker B: Terminally online, an important thing for startups as well is just being basically terminally online. Otherwise it's not going to work. You have to be consistent and have at it to even make progress. Because if you're not consistent, you have to basically live the life you want to live. And it can be, for example, an hour each day that you're still living the life you want to live. And you may exponentially, well, like linearly or exponentially change that like you did so from basically side to full time. Or if you're trying to get to that level, you just do like an hour each day, 2 hours, 3 hours.
00:48:03.158 - 00:48:59.606, Speaker B: And if it starts making a lot of money or even enough money to just live, right, you don't have to make millions or hundreds of thousands of dollars. You can just make enough to live and then continue going. Just take the risk and see how it goes. Because you can always get a job, right? It's not the end of the world. If you're not going to make 200K this year or 100K, any kind of software job, you can always come back unless you're financially not prepared, then don't take the risk. Obviously that's when you do part time and a full time job. But if you have the money, I think it's always worth taking the risk if you can, because it's a risk not to take a risk, right? If you don't do it and don't try, then you're going to go later on life and regret it and still might be just basically slaving away at your job and then you've missed that opportunity.
00:48:59.606 - 00:49:15.440, Speaker B: And opportunities, you should always try and grasp them when they're in front of your face. At least that's what I'm trying to do. And it's kind of working and obviously it's been working for you. Hopefully that helps other people. Yeah, go for those dangling things in front of your face and just go for it, man.
00:49:15.890 - 00:49:48.706, Speaker A: Yeah, exactly. I couldn't agree more. Obviously before I have a wife, kids, family, whatever and stuff, I can afford to put in these hours and say even if I do this for another month and it flops and I never have another company reach out to me again. Which I obviously don't think will be the case based on our trajectory right now. But if that was the case, I wouldn't be bummed. I got to work full time on the thing that I'm most passionate about in tech for a couple of months and I would be hyped about that. And it is funny.
00:49:48.706 - 00:50:09.934, Speaker A: It'll be like 11:00 p.m.. I'll be like hanging out with my girlfriend and she's like, who are you texting? And I'm like, oh, it's actually like a customer. Like I'm giving them feedback or whatever. She's like, what? She works in healthcare, like in a hospital and doesn't understand that I could be closing deals or shilling our company at midnight to people, which is hysterical. Yeah.
00:50:09.972 - 00:50:55.802, Speaker B: I think optimizing your life as well is incredibly important for success and just getting the right amount of sleep. Because a lot of people, a lot of auditors and cybersecurity people just devs in general. You get lost in the source and just spend hours and hours and then your bedtime has passed and then you have to wake up a certain time and then you've just lost like, I don't know, 4 hours of sleep and then the next morning you're not optimal. You're not at an optimal state. But obviously sometimes it's like a necessary evil to do an all nighter to finish an urgent task. But more often than not, if you want to be optimal and want to really accelerate everything, you've got to sleep and eat right and go to the gym, work on your body. Because a strong body is a strong mind and especially take breaks.
00:50:55.802 - 00:50:58.240, Speaker B: I think mental health is also a big thing.
00:50:58.610 - 00:51:30.994, Speaker A: Yeah, big time. I definitely would recommend in addition to everything you said, I'm a firm believer. If I didn't have my dog, I would be sitting at my desk all day, every single day. And having a dog or a pet or just like something that depends on you is really good to get me out of the house, take them for a walk, run around backyard with them and stuff. And it's just like a reminder to, hey, don't sit at your desk for 16 hours. Get fresh air. Because all these times, especially with devs and stuff, you're going to be sitting at your desk.
00:51:30.994 - 00:51:54.866, Speaker A: Maybe you're stuck on a problem for like 4 hours. You can't dwell over it, get up, go outside, go eat something, go to the gym, go for a run, do whatever. And a lot of times I'll be looking at a smart contract. I'll optimize it for a couple of hours and I'll be like, all right, this is good. This is totally done. I'm ready to give the feedback. I'll go outside for, like, an hour or come back and I'm like, holy shit, I missed this.
00:51:54.866 - 00:51:56.130, Speaker A: This is huge now.
00:51:56.200 - 00:52:30.038, Speaker B: Yeah, I think that's a massive thing as well. Even taking time away or thinking about a problem before you sleep, you're basically, like, refreshed, right? And you think more creatively and it's a common thing that I see in myself. But if I'm just staring at something for hours and days and I don't know what's wrong, it's good to just take a day off or a couple of hours and then come back. Like, a walk for me does wonders. You come back and you realize, oh, that was so simple. I was just overcomplicating things. Or I just read it so many times, my mind skipped it.
00:52:30.038 - 00:53:01.560, Speaker B: So it's a big help to take breaks, don't undermine them. But, yeah, man, it's been such a pleasure talking to you, pioneering the gas scene, and I know big things are coming ahead, starting basically hiring now. You just hired your first intern. Congrats on that and thank you. A lot of deals coming in, a lot of people wanting your help, and I think it's going to blow up and it's already kind of blowing up, so I'm excited to see the future. But, yeah, once again, pleasure to have you on and I hope everyone has a great day.
00:53:02.090 - 00:53:21.678, Speaker A: Yeah, thank you so much. It's always a pleasure to talk with you. Digotchi been a fan of you for basically as long as I've been on Twitter, and just being able to shoot the shit with you on a daily basis now is just so much fun. And, yeah, this was super guess, you know, for me to just get things off my mind and yeah, it was a lot of fun.
00:53:21.844 - 00:53:32.300, Speaker B: Yeah. Hopefully people start using you as well. Hopefully it brings some traction and people are more optimized, so I can mint some NFTs, but, yeah, guys, this has been scraping bits with Harrison. Take care.
