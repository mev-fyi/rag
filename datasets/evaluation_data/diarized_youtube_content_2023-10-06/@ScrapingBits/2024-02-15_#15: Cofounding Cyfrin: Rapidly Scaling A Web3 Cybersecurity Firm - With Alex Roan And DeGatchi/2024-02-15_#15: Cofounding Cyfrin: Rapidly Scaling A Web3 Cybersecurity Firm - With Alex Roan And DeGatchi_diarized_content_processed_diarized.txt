00:00:00.250 - 00:00:22.480, Speaker A: It's almost like symbolic execution happening in his head. But then you pair him with an auditor who is from an engineering background, and because they have that perspective of having gone through the engineering process, there are certain things that they will just look for, knowing that this is how engineers have gone through it, that people with a mathematical background won't find.
00:00:23.170 - 00:00:34.646, Speaker B: GMGM, everyone, my name's the much, your host of scraping bits, and today I'm with a special guest, Alex Rohn from Cypherin. How's it going, man? Yeah, really good.
00:00:34.668 - 00:00:36.438, Speaker A: Thanks, mate. Thanks for inviting me.
00:00:36.524 - 00:00:44.442, Speaker B: Yeah, of course, yeah, I'm quite keen to get a little intro of you, of basically who you are and what you do, just to give some context, and we'll dive in.
00:00:44.496 - 00:01:11.566, Speaker A: Yeah, sure. Yeah. I'm Alex. I am co founder at Cypherin. I've been in the web3 space for coming up to four years now, I think. Was it chain link for three before that? Very typical web3 engineer kind of origin story was in web two for a while, grew disillusioned and kind of took the jump, took the leap, leap of faith to just get into this industry.
00:01:11.678 - 00:01:16.210, Speaker B: Were you already in cybersecurity in web two, or did you kind of get into that in web3?
00:01:16.280 - 00:01:39.354, Speaker A: No, not really. So I very much come from an engineering perspective. So security has always been there. I think that's one of the things that I think the web3 space can learn from, is how security has matured in web two. And a lot of those practices haven't really transitioned made the jump to web3 yet. So not specifically security oriented in web two?
00:01:39.392 - 00:01:45.930, Speaker B: No. So you just kind of picked it up, web3 in the past, I guess, year or during the whole kind of transition?
00:01:46.010 - 00:02:41.694, Speaker A: Well, I think working at Chainlink was a big factor in this, and seeing how much emphasis was placed on every line of code that was changed in a smart contract, the scrutiny that every change would go through, the expected process of how monitoring would work as it was live, the war room games, it was very much security first engineering in a space where I don't think a lot of projects were engineering that way. And you can kind of see the results of in that crazy numbers are still being hacked to this day, whereas Chainlink and Makerdao and a few of the big players, the ones that do emphasize engineering with security in mind, first and foremost, they don't suffer so much from those problems.
00:02:41.812 - 00:02:46.594, Speaker B: Yeah, for sure. And that's where you met Patrick as well, the other co founder at Cypher, right?
00:02:46.632 - 00:03:02.994, Speaker A: That's right, yeah. We joined roughly the same time, I think, like within a month of each other, when chain link Labs was like 30 or 40 people. So it was the early days, I think I joined right after VRF v one launched.
00:03:03.042 - 00:03:05.480, Speaker B: What is that? What is VRF v one?
00:03:06.570 - 00:03:12.534, Speaker A: Verifiable random function. So it's a way to get randomness in smart contracts from chain of nodes.
00:03:12.582 - 00:03:15.286, Speaker B: Yeah. What kind of made you leave and start cypher?
00:03:15.318 - 00:03:50.354, Speaker A: Basically, yeah. So when Patrick and I first met, we were both in Devrel initially. So I didn't actually join the chain link engineering team originally, it was the Devrel team. So I had quit my web two job because I was super into smart contracts and I just saved up some money, and I was like, I'm just going to blog about smart contracts and see what happens. I'll just give myself six months without a job and see where it takes me. And like two months in, Chainlink reached out and said, hey, can you write our docs for us? Because we've just released this VRF. You wrote an article about it, and we'd love it if you could spruce the docs up and whatnot.
00:03:50.354 - 00:04:36.374, Speaker A: So I came on as like a contractor, met Patrick. He had just joined in Devrel as well. And after a while they, you know, we want to bring you on full time, and I'm an engineer. I didn't want to write docs of the deal for me was like, I'm going to be an engineer or I'm not going to come on full time. So eventually transitioned there, but in the meantime, working with Patrick, found out that he just started a chainlink node operator company called Alpha chain that was running some chainlink nodes, running some blockchain nodes, ethnodes, stuff like that. And yeah, he just asked me if I wanted to come on and help him out and just be co founder of just the two of us working on it on the side. And eventually that grew over the years while we were at Chainlink to the point where it was like working two jobs, it just got too much.
00:04:36.374 - 00:05:23.214, Speaker A: So we hired in for that and got some DevOps engineers, like cloud engineers, stuff like that, to the point where that ran itself. And we stayed close. Even though I was in engineering, he was in Dev Rom, we stayed pretty close, values aligned. And as the company grew, I think we both had itches that we wanted to scratch. Typical growing pains that you see when you go from a startup to a big organization, which is what Chainlink Labs is now, is that roles aren't as flexible. You don't have as much ownership over such a wide range of things. And the type of people that you need in a startup is very different to what you need when you're a big organization where roles are super well defined and the scope of what you do is restricted.
00:05:23.214 - 00:05:41.494, Speaker A: And I think we felt we could make more impact than we were making given that the teams had grown and the roles that we had had restricted slightly. And eventually that itch just got too much and we founded Cypherin. Yeah, that was six months ago now.
00:05:41.532 - 00:05:56.222, Speaker B: Yeah. And what was kind of like the process of starting this and then getting it off the ground and eventually getting to where you are now, there must have been a lot of difficulties and hit stops you had to make. Yes. Basically, what was the starting process like?
00:05:56.356 - 00:06:23.746, Speaker A: So the dynamic that Patrick and I have is he is 100 miles an hour, whereas my instinct is always to slow down and think about things. And that yin and Yang, the offset of the two sides of the same coin, has actually worked really well for us, because I think without him, I probably wouldn't have been able to do this because he's like, no, ship it. Go and ship it. Ship now. Yeah, just ship. Just ship. Whereas I'm like, whoa.
00:06:23.746 - 00:06:44.570, Speaker A: That security mindset is, let's think about this a little bit. But when working together, that dynamic has worked really well. So I've got to give credit to Patrick Dev of just pulling the trigger and saying, no, we're doing this. The first thing we had to do was bring in some security experts, so we hired a guy called Geo.
00:06:44.650 - 00:06:48.298, Speaker B: How did you hire, did you have any money prior or did you do a raise?
00:06:48.474 - 00:07:16.120, Speaker A: Right. That's a good question. Yeah. So we had investors from Alpha chain, and they acted as, like, our kind of advisors for a long time, and we've been going back and forth, coming up with these ideas. So as that itch grew more and more, we wanted to scratch. They were there to basically say, hey, when you want to pull the trigger on this, we're with you. And as soon as we had a strategy to go to market, they were fully in.
00:07:16.120 - 00:07:20.454, Speaker A: That's the backing that we had when we did this.
00:07:20.492 - 00:07:33.760, Speaker B: Yeah. So basically, you just had an idea of how you're going to build it all from scratch, how you're going to do audits, how you're going to build a clientele, retain that clientele, and just expand from there. And then they're like, okay, sounds good. Here you go. Money.
00:07:34.370 - 00:08:13.226, Speaker A: Yeah, essentially, that's how it went. So from the engineering perspective in Chainlink access to top tier auditors is very difficult to come by. Most of the big firms, like Chainlink Labs, they have them booked out on retainer for most of the year. So if you want to actually get a slot with one of these big companies, big auditors, as a small project, it's very difficult. You have to kind of pay out. And we also, conversely, saw a lot of shit, frankly, rubber stamps. So we saw somewhere that we could make an immediate impact in that area with the values that we had and still have.
00:08:13.226 - 00:08:19.974, Speaker A: And it was just coming up with a more long term view then because we were pretty confident that we could break in short term.
00:08:20.022 - 00:08:51.830, Speaker B: You took a different approach to starting a security firm. I think most of them now basically come from a public contest kind of environment, score top on the leaderboards and then build a clientele from that. So maybe they scored number one on a specific protocol, and then that protocol reaches out to them to basically put them on retainer, and then through that, they get referrals, and then they kind of just build a firm from that. You guys didn't really do that, though. You just kind of, like, built it from scratch and then got into these public contests, right?
00:08:51.980 - 00:09:27.870, Speaker A: Yeah, we did. But we did hire immediately from the code arena leaderboard. Our first big hire was Hans, who was at the time the best performing auditor on code arena over the past, like, year or something. So he's since come on as co founder as well. So that was our big hire. But you are right, that's not how we initially got our business. I think we were a bit lucky and that Patrick and I knew a lot of folks in the industry anyway, that we had connections with who trusted us, who've worked with us before, especially so they were willing to give us a go initially.
00:09:27.870 - 00:09:35.954, Speaker A: But from there, it's been both private audits and participating as a team on competitive audits like Code arena as well.
00:09:35.992 - 00:09:43.030, Speaker B: From that first hire, how did you kind of expand from that? I guess you had, like, a lot of money left over, or how did you kind of go about that?
00:09:43.100 - 00:10:09.790, Speaker A: Yeah. So the first thing was to get an audit team working on audits. So we never wanted to work on audits as individuals. We always feel, like I said at the beginning, we don't want to take shortcuts. We want to make sure we cover as much as possible. And every auditor is slightly different. And we're finding a lot of the auditors on code arena, for example, they don't actually have engineering experience.
00:10:09.790 - 00:11:16.582, Speaker A: They come at it from a mathematical perspective. So that perspective brings certain things like Hans thinks the way he thinks about things is crazy. The way he's described it to me is it's almost like symbolic execution happening in his head. But then you pair him with an auditor who is from an engineering background, and because they have that perspective of having gone through the engineering process, there are certain things that they will just look for, knowing that this is how engineers have gone through it that people with a mathematical background won't find. So the first step for us was to set up a pair of auditors and have one team up and running, getting the processes down, like how you write reports. What does that look like? How do you track issues together? How do you divide the code base and stuff like that? And once that kind of got rolling, it was just like, hey, let's hire some more people in, get another team working in parallel and try and scale it up. And, yeah, we got to the point where that was all that was required to stop having to dip into the pool of money that we started.
00:11:16.716 - 00:11:25.154, Speaker B: Yeah, yeah. So basically started just doing audits with yourself, Patrick and Hans initially, and Geo.
00:11:25.202 - 00:11:27.978, Speaker A: Who was our first hire out of the chaining community.
00:11:28.064 - 00:11:34.460, Speaker B: So you had four initially, and then once you had these people, you basically started.
00:11:37.310 - 00:11:54.734, Speaker A: I mean, Hans was experienced anyway, and he was a judge at Code arena as well, so he kind of had the gravitas to say, hey, actually, no, this is a high, or this is a medium. Whereas we were kind of fumbling around knowing what issues were, just not how to categorize them.
00:11:54.852 - 00:11:56.510, Speaker B: That's a whole different skill.
00:11:56.850 - 00:11:57.502, Speaker A: Exactly.
00:11:57.636 - 00:12:35.722, Speaker B: Yeah, definitely. Bringing on someone that's a judge in a public contest environment is a terrific sort of hire because they have both the knowledge of how to write reports, which is basically one half of the whole process, and then also basically identifying what vulnerabilities are and the severities. If you have no experience in basically the severity identification, then you might be giving, like, false results or making it seem like it's more extreme than it's not or less extreme than what it actually is from there. What was your first audit like when you got your first client? How did you get your first client?
00:12:35.786 - 00:13:08.774, Speaker A: Yeah, our first client came from knowing them, essentially. It was Linkpool another. Yeah, it was close friends of Patrick and I who were coming out with some on chain products and liquid link staking derivatives, I believe was the first. Yeah, that went quite think. Like I said, I think we're a bit rusty with what was the severity categories, but, yeah, it went pretty well. We had a couple of connections for the next few audits as well. That reached out to us from there.
00:13:08.774 - 00:13:13.226, Speaker A: I think the reputation just built and the inbound grows from there. Yeah.
00:13:13.248 - 00:13:16.490, Speaker B: And how did you really price the incoming quotes as well?
00:13:16.560 - 00:13:50.978, Speaker A: Yeah, again, initially it was kind of fumbling in the dark. We knew what the price range was for individual auditors because that's quite a big scene at the moment. Now is individual private audits. You see a lot of them on Twitter. Like you said, they come out of the code arena contests, and we kind of knew what that range was. We also knew, from my own experience working with some of the big players at Chainlink Labs, what the, frankly, extortion of prices were. Some of those, and again, we didn't want to price out smaller projects.
00:13:50.978 - 00:13:55.750, Speaker A: So initially it was start low and kind of find that equilibrium as you go.
00:13:55.820 - 00:14:13.200, Speaker B: Let's say I come with a big repo and I have basically no budget. What would be kind of like your minimum or what determines your minimum as well, and what would determine basically the price range for the project?
00:14:15.250 - 00:15:26.974, Speaker A: I think the important thing for me is, as I'm coordinating the internal teams now, is to understand what our guys would feel comfortable with after a certain amount of time. So we use a tool developed by consensus diligence with quotes, that spits out a complexity number, which is like this arbitrary number depending on interactions between contracts and different complexity metrics, and the number of lines of code. So that's like a baseline numbers that you can refer to and judging on how we've done in previous audits, how long would it take for my guys to be confident that they've covered as many bases as they could? Would it take what time? So that's the main thing. It's like complexity score, number of lines of code, let's say, I think that it's going to be three weeks. My guys will be comfortable with. There's other things to consider as well. So if you come to me and say, okay, I want an audit on this PR, which is adding a brand new peripheral contract with a bunch of new features to a set of core contracts that already exists, I just want the PR audited.
00:15:26.974 - 00:16:01.930, Speaker A: That's what's in scope. Well, that's kind of difficult because you're going to expect just the complexity of that to be audited and it might be like 500 lines of code. And you think, well, it's not going to take more than a week. But from our perspective, to really understand the repercussions of the interactions between just that pr and the rest of the system that you have here we're going to need to build context and to feel comfortable about kind of covering as much as we can. We have to spend time on the stuff that's out of scope as well. So it's this very fuzzy, fuzzy thing. But from my perspective, I'm very much duration.
00:16:01.930 - 00:16:35.898, Speaker A: So out of this process of going through the complexity and the lines of code. Sometimes I'll head up some of the guys who are doing the audits as we speak and just get their opinion and how they feel about it. But I'll come out with a duration. So it'll be like three weeks or four weeks. I think the shortest we'll go is probably one week, purely because of how long it takes to write a report and the coordination between the pair of auditors and stuff like that. But yeah, I'll come up with the duration. I'll give it back to Patrick and the sales team, and then they handle the salesy stuff.
00:16:35.898 - 00:16:39.510, Speaker A: So I am not a salesman by any stretch of the imagination.
00:16:39.590 - 00:16:48.910, Speaker B: So you're basically pairing up your internal auditors. A maximum two, minimum two. So always just a pair of auditors.
00:16:49.250 - 00:17:16.262, Speaker A: Not always a pair. So there'll always be two leads for larger audits. We might have some assisting auditors come in as well. I've assisted on some. So for a beanstalk audit we did a few months ago, hands and Geo were the leads. I was on assist, and they were very much focused on, like, manual review. I came in having previously worked with invariant tests, which we can go into if you want.
00:17:16.262 - 00:17:34.286, Speaker A: I just kind of started writing invariants for this very math heavy protocol. And within like two or three days, the invariance brought up something that manual review just wouldn't have found. That as an assist was helpful to the leads, because then that gave them a rabbit hole to go down.
00:17:34.388 - 00:18:22.080, Speaker B: I think invariant testing is an essential that everybody should have in their code base, because it's basically saying what the business logic should do, which is unique to every contract and context. So if you basically pair up invariant testing, this is what it shouldn't do, right, or what should uphold. And when you compare that, when you use that with fuzzing simultaneously, you can actually discover, basically, I think it was 60 or 70% of bugs in a code base. And this kind of research was done by trailer bits in one of their papers. It's around 60% or higher, which is quite astounding. So I wonder if you charge for basically creating unit tests for them if they haven't done it already.
00:18:24.690 - 00:19:03.894, Speaker A: I completely agree with everything you just said. I think invariant testing is a practice that should be part of every smart contract engineer's toolbox. I think get used to them because you can find bugs before it even goes to audit. With this tool set, it is such a powerful way to simulate a prod environment and trying to break things that should never break. So, yeah, completely agree. We did think about, and we still are thinking about kind of like invariances of service. But up until now it's difficult because we went through a period of trying to implement them with every audit that came in the door.
00:19:03.894 - 00:19:47.654, Speaker A: So with that beanstalk one was the start of this and they worked great and we tried to apply for every single one and it turned out that they are a great tool. But probably sometimes it can be trying to hammer a screw. If you've got a nail, it's the right tool for it. But if you've got a screw, it's probably not because some protocols just aren't as stateful, they aren't as math heavy. You're not going to get precision errors, you're not going to get crazy rounding stuff, which is where they're best suited when there's like a very specific conditional that you can make on some numbers or something. So yeah, it's quite nuanced when you can and can't use them. But I think for the most part you should default to at least trying for sure.
00:19:47.692 - 00:20:00.170, Speaker B: Yeah, you can find a lot basically for unit tests, but that's probably the most tedious part of any development cycle and a lot of people don't want to do it. So I wonder, do you ever come across a project with no unit tests?
00:20:02.850 - 00:20:45.900, Speaker A: Yes. And how do we go about it? I think for the values that we have, we are opinionated about what we work on. You have to draw a line somewhere. I think when it comes to me, to do this duration quote, there are flags that you look for, I think, not having unit tests. So, for example, if it's just a repo with some contracts in it and a readme with two sentences, honestly, that's not ready for audit. If you disagree, as a potential client, you need to give me more context. I can't give this to my guys when they start working on something.
00:20:45.900 - 00:21:16.378, Speaker A: I need to give an overview before I set up a call between the two teams because I need to understand it. I need to just give a brief. They need to have an understanding of what they're walking into. If you've got no readme, no unit test that I can go in, no integration tests, just contracts, interacting with each other. I can't work with that. I wouldn't be providing a good enough service that lives up to our standards without that context from the get go. And that's kind of the answer that we give to potential clients.
00:21:16.378 - 00:21:34.682, Speaker A: So we did start off with a separate product called code review. That was almost like a precursor to audits. We're not so active on that anymore. I think just having that feedback is enough and it's free as well. But yeah, that's kind of how we deal with it.
00:21:34.816 - 00:22:24.220, Speaker B: Yeah, it makes sense because if they were giving you a code base without any tests expecting you to just audit it, so they don't spend as much time on testing, basically they expect the auditors to do it, then it wouldn't make sense for you to deny because then you're not giving context of what can you basically look at for the test and are the basic stuff working? You're kind of doing the dirty work for them and it's going to be a much longer duration because you have to learn what they want out of it, what is meant to pass and what's not meant to pass, basically what their intentions are. And I guess they need documentation as well, like inline comments or read me documentation at least. Otherwise you don't have any context to what's meant to be working and what's not meant to be working.
00:22:25.150 - 00:23:01.074, Speaker A: Yeah. And from their perspective, I would say, look, you're wasting your money on an audit at this stage. I think there are so many steps you could do before this that could catch a lot of this low hanging fruit already before you get to audit. So the security experts can go deep because otherwise we're just going to go very shallow. We're going to spend our time catching all these low hanging fruits and just not have the time to go deeper and kind of imagine the code after you've fixed these low hanging fruits. That's when we need to go in. Once you've caught the low hanging fruit, that's when we come in and we get to go deep.
00:23:01.074 - 00:23:06.662, Speaker A: And maybe there are fewer changes then, but they're more meaningful changes.
00:23:06.796 - 00:23:13.446, Speaker B: Yeah, it's basically like a quick scan, like, okay, all these are covered. They're no longer in scope. Let's go further.
00:23:13.558 - 00:23:20.586, Speaker A: Yeah, and it's basic stuff like slither will catch reentrancy stuff. You can run that in minutes.
00:23:20.688 - 00:23:28.910, Speaker B: It's definitely an essential. I wonder if you would charge basically that as a service, as a side thing like unit testing as a service or in case people don't want to write tests?
00:23:30.370 - 00:23:34.190, Speaker A: I think if people don't want to write tests, don't be an engineer.
00:23:36.310 - 00:23:44.900, Speaker B: Yeah, for sure. But I guess they might approach a security firm to do it for them instead, if that was an option. But just food for thought, of course.
00:23:47.370 - 00:23:49.670, Speaker A: Are you asking for this service personally?
00:23:53.130 - 00:24:04.170, Speaker B: No. I mean, depends what language and whether it's, like, an open source project, of course. But I would love to get someone else to write hof tests for me.
00:24:04.240 - 00:24:10.542, Speaker A: Yeah, I'm sure. I saw a tweet of yours recently that was something like, my favorite thing not to do is write half tests or something.
00:24:10.676 - 00:24:46.262, Speaker B: Yeah. I honestly think that constitutes, like, 90% of the time writing half contracts, because the debugging is just horrible. I don't think there's any really good, apart from, I guess, foundry debugger and looking at the return, whether it failed or not, if you get, like, an extra line in the failure, if it's just the same thing as what you put in. Yeah, it's quite interesting. But, yeah, once you did all these audits, you kind of self sustained, didn't you? And then you no longer needed the investor money. So what did you kind of do with the investor money after that? It's just kind of sitting there.
00:24:46.316 - 00:25:07.822, Speaker A: Yeah. Rainy day fund. At the moment, the long term goal is not just private audits. That doesn't scale very well. You just need bodies in the door, expert bodies in the door to do that. So the long term goal is very much tooling and platforms and anything, really, that can help us scale. I think education is a huge part of it as well.
00:25:07.822 - 00:25:36.360, Speaker A: And Patrick is already a beast in the space in terms of education, so we will definitely be hooking into that. And all the things we just talked about, like invariant tests, should be part of everybody's toolbox. Let's educate engineers so that web3 security does level up with things like that. That's how we do it. We educate as well as provide a security expert service.
00:25:37.790 - 00:25:59.738, Speaker B: And your company goal must be aligned with that as well, because you're making basically free content to put yourself out of a job. Technically. But having said that, you're still doing it anyway. So what's kind of like, the mission and values of cypher?
00:25:59.834 - 00:26:40.410, Speaker A: Yeah, this is quite a lofty one, because in 2023, it's kind of embarrassing to be in crypto. That hurts to say, because I've spent four years here, but it's hard not to hesitate when someone in your everyday life asks you about it, knowing that all that they've seen is massive blow ups and scams and traders, it's hard not to hesitate. So we love to go down rabbit holes and there's so many things that within the space are fascinating, but to the outside world, it's just not a legitimate space. The legitimacy is just not there.
00:26:40.480 - 00:26:42.410, Speaker B: It's just fraud and ponzies.
00:26:42.910 - 00:27:18.726, Speaker A: Yeah. And there's a couple of. In my mind, there's a few areas that are kind of the main culprit towards that. There's obviously the scammers, like 2022 was horrific for scams. The blow ups were just insane. And I think the way that the remedy to that is legislation, to be honest, I think the room that those people had to maneuver for these scams is only because the environment allowed them to. And I'm pretty optimistic about the legislation I think the European Parliament is discussing, Mika and the UK just passed a stablecoin bill, for example.
00:27:18.726 - 00:27:51.374, Speaker A: I think that's fine. So scammers is one area that I think we're gradually progressing our way out of just from slow legislation and how it should be. I think we have a bit of a communications issue. I think we love to be nerds, knights. Everyone in this space that I know of, by the way, the most technically gifted and capable people that I've ever worked with are in this space. But communicating the concepts that we grapple with day to day to normies in Normie speak, we all find it very difficult, even to this day. It's tough.
00:27:51.374 - 00:28:22.214, Speaker A: I think as we get more non technical people in the space, I think that's changing. We have resources like Metamask learn, which is a really good intro for people who aren't like web3 native. So again, I think that area, that's another one that we're making progress. I think the UX is another one. Loads of progress have been made here, like recently with four, three, seven, even like Salana stuff that's kind of pushing the mold a little bit. And the cost is another one. And all these things, like loads of brain power is going towards.
00:28:22.214 - 00:29:13.146, Speaker A: So like scalability and ux, we've got loads and loads of brain power, rightly so, working towards these things. But in my head, each one of those things, as we progress, it's like, you increment legitimacy a little bit like legitimacy plus. Know, Ui gets better and it's as easy as logging into Facebook or your phone or something like legitimacy plus. It's more scalable, it's cheaper. Legitimacy plus, plus. But in my opinion, that doesn't matter if there's like a 6% chance that all your money is going to get hacked, that is not acceptable risk for anyone. All these increments of legitimacy, numbers like that, where there's hundreds of millions that being hacked in 2022 from smart contracts, that's not a decrement, that's not legitimacy.
00:29:13.146 - 00:29:40.310, Speaker A: Minus minus, that's legitimacy equals zero. That just undoes all of the brain power, all of the work that goes into Ux and cost. Ultimately, the goal for Cyprin is to scale up web3. And the most important part of that for us is security. And I don't think it's talked about enough. I think, like I said, there's loads of brain power going towards the other stuff. The reason is it's just not sexy.
00:29:40.310 - 00:30:00.654, Speaker A: Ux is sexy, scalability is sexy. Vitalik's talking about it. And it's cool to be nerd sniped. It's fun. And security, it ain't fun, it's time consuming, it's not even foolproof, but it's required, like we have to have it.
00:30:00.692 - 00:30:56.910, Speaker B: It's the thing that's basically giving blockchain a bad name, which is where all the scams and all the. I mean, I guess not scam. I guess you could constitute scams in that kind of like field as well. Because if you had basically public auditing goods that were easy to use and basically use on anything, then you would identify these more often than not. I guess some of them are just marketing schemes and people fall for them and just get wrecked. But then that's not really code, that's more of just, okay, I guess it is code to some degree, but maybe it's just they all minted all the tokens, then dumped them all the next day or something like that. But I guess if data was more accessible and you could see kind of statistics more easier, then you would kind of avoid this and realize, oh, this is probably not safe.
00:30:58.930 - 00:31:19.250, Speaker A: Yeah, exactly. And this is why education is part of how we're going about things. Oh, damn. I think I cut out slightly there. Yeah, I think this is why education is part of. It's very much in our focus as well, educating people as to what is legitimate and what is not. That is the roadmap.
00:31:19.410 - 00:31:24.738, Speaker B: And how do you basically educate your clients on how to be better? Through the reports?
00:31:24.834 - 00:31:48.960, Speaker A: Yeah, good question. First and foremost, communication between us and clients is priority number one. I think you gain so much alpha in the first couple of days of an audit. If you're just meet with the team on Zoom or Google Meet or whatever, constantly in that chat, just like asking questions. And what was the question again?
00:31:50.370 - 00:31:56.094, Speaker B: How do you basically educate your clients on your.
00:31:56.292 - 00:32:54.900, Speaker A: Yeah, so, so, first and foremost, natcoms enables you to kind of like spitball with the client and you get a sense as to their thinking, how they thought about things, and you can maybe even throw ideas back at them. So that's number one. I think number two is throughout the audit, again, comms essential. So giving them a heads up if you found a bug and giving them chance to respond and whatnot, and give them techniques as to how to avoid this in the future. But we've seen with the, as I mentioned, the invariant tests, so we've actually contributed prs to a lot of the projects that we've worked with because of the invariant suites that we've written for them that are now part of their code base. So I think we are fortunate and that we get to spend our time down these rabbit holes of all these new tools and stuff. And it's our responsibility, if we know how to use these and we know where they're useful, just hand them over.
00:32:54.900 - 00:33:19.018, Speaker A: I know we spoke about maybe monetizing tests as a service or whatnot, but I think knowledge is more important. I think we all work on open source repos. We all love the idea of collaborating on public goods infrastructure. I think knowledge is part of that. Again, it goes towards our mission of scaling web3. So passing that knowledge on for free.
00:33:19.104 - 00:33:36.262, Speaker B: And how are you conveying to the clients in a simple way that kind of gets them to understand? Because I assume majority of clients wouldn't actually be devs, but would be nontechnical, I assume, like ceos that are kind of hiring you, or founders that aren't technical.
00:33:36.346 - 00:34:14.046, Speaker A: So the clients we've had that have all been very technical, we have varying degrees. There's always an engineer as a point of contact, for example. But the level of experience of that engineer or engineers, it varies. Also, the code base could be an old code base or a fork of an old code base. So they're only used to using truffle or something and kind of educating them on the latest tools. Say foundry is, you know, rip, Jesus, get involved. So yeah, there usually is an engineer that we have a point of contact and we do our best to help them scale up.
00:34:14.068 - 00:34:55.194, Speaker B: I was talking to techno from trailer bits, and they usually get clients from mostly like non technical. So it's interesting to see the changes in dynamic of scale. And I assume you'll start changing once you get these nontechnical people that don't really know much about basically code and you'll have to convey okay, what's the severity? How is this done? How can you improve? And then if you can get them to understand, then it's much better overall, I think. But how do you basically market yourself with private audits then? How does that work? Is it mostly just referrals at that point?
00:34:55.232 - 00:35:30.034, Speaker A: Yeah, it's mostly referrals, I think. Interesting connection between scale and who the point of contact in because I don't think we've really experienced non technical people, but I think trailer bits was around before crypto was even a thing. So they come from a space where they're auditing web two code as well. So maybe that changes things slightly. And I think the audience that knows who cypher is right now is very much crypto engineer audience, anyone who's watched Patrick's videos essentially.
00:35:30.162 - 00:35:43.930, Speaker B: Yeah. The Target demographic is a bit different, but I think as you start to scale and people start to know about you, you'll have a wide variety of inquiries of all different skill sets.
00:35:45.150 - 00:36:18.342, Speaker A: Yeah, I mean that's one of the things that's definitely on our radar as well is expanding outside of just EVM stuff, which is where we are right now. One of my areas of research at the moment that I always get nerd sniped is ZK stuff. So I personally think we'll see a lot of projects come to fruition over the next six to twelve months that are ZK projects. And I would like us to be in a position where we can help them with their security needs at that time. So that's something we're looking into at the moment.
00:36:18.396 - 00:36:30.570, Speaker B: Yeah. It'll be interesting to deal with a post deployment auditing on ZK as well, I think. Because now you have basically zero knowledge hacks.
00:36:33.710 - 00:36:40.506, Speaker A: Yeah. So the surface area is not just what you see on chain anymore. Yeah, that's different.
00:36:40.688 - 00:37:07.110, Speaker B: Yeah. So I'm pretty keen to see how that plays out. Not that I'm going to hack anyone, but just to see how it all plays out. But I do think another thing in the terms of auditing is pre deployment and post deployment we see an oversaturation of pre deployment, but we never see post deployment of just white hat teams, basically. So I wonder if that's any direction you're taking or have considered.
00:37:08.010 - 00:37:58.614, Speaker A: Yeah, for sure. We've actually been running an experiment internally, so what we've always tried to do is keep at least 20% of our security researchers time for research. So whether that's like three weeks on, one week off or six weeks on, two weeks off. So recently we kind of had the idea of maybe we just intermingle that with kind of everyday work, whether it's just like a day, a week or a couple of hours in the morning or whatever, and to whatever research projects you want to work on. And one of the most popular things that the guys want to work on is an immunify bug bounty. So like, pick an immunify bug bounty for a project that kind of aligns with our values. So something that is like an onchain primitive, not like just a fork of something, something that's going to level up web3.
00:37:58.614 - 00:38:42.430, Speaker A: So we're talking like the ens of the world projects like that, and just spend that 20% time working on that. I think I personally would like to see us spend a little bit more time on those because I agree with you. I think a lot of emphasis is placed on pre deployment where the ven diagram of bugs does overlap with what you find once it's been deployed, but not perfectly because of composability. I think we spoke about this before on a private call. But yeah, in my head, there's a huge ven diagram of, like, this is what you can find with private audits. This is what you get with competitive audits. This is what you get with like, white hat.
00:38:42.430 - 00:38:53.398, Speaker A: And the trick is to cover as much of that as possible. So cover all the bases, just cover as much of that surface area as you can. But again, you could never cover it all. It's just not possible.
00:38:53.484 - 00:39:20.794, Speaker B: You basically got to choose what you're best at and go for that, because post deployment you're also competing against basically everyone else, and especially the black cats that are staring at code for months, waiting for the opportunity to arise. So it's very competitive in that sense. They've got basically a timescale of years or months, whereas an order has weeks or maybe a couple of months of reiterations or refactoring.
00:39:20.842 - 00:39:57.114, Speaker A: Yeah. And there's only so much you can cover in terms of what the composability risks are before you deploy. There's only so much that you can physically get through, mentally get through. I think that's where tools like invariant tests really help, because they can simulate, like chaos in a production environment. Obviously not perfect, but you can cover a lot of bases with that. Whereas when you go exactly like what you said, as soon as you go to prod and you're on chain, that is an unlimited time period for people to try and break stuff.
00:39:57.232 - 00:40:21.140, Speaker B: Yeah. And I wonder how you guys kind of approach building the initial context for a repo when you don't have a context, I. E. Like unit tests. So if it's not initialized. Right, because it's not deployed, how do you kind of go with that? Or is it more of like static analysis and just reading, okay, this connects to this on this contract. Is there anything in this external contract that can alter this in any way?
00:40:23.110 - 00:40:32.342, Speaker A: So you mean if we get a client come in with very little coverage and not much context around that, even.
00:40:32.476 - 00:40:43.980, Speaker B: Now that you started kind of public contest as well, how do you go about basically building the initial deployment to run stuff on, like a proof of concept, for example?
00:40:44.430 - 00:40:49.366, Speaker A: So proof of concept in terms of like an immunify bug hunt or something on chain?
00:40:49.478 - 00:41:06.210, Speaker B: Yeah, or even if you find basically a vulnerability that you suspect is a vulnerability, but you need to test it out to make sure it is actually a vulnerability. So you need to build the context prior and then build an attack contract for that. So how do you basically build the context for the attack contract?
00:41:07.110 - 00:41:52.910, Speaker A: Yeah, so for stuff that's on chain with immunify, we can just fork it with foundry and do funky stuff with private audits. That is a tough challenge. So we tend to try to write all pocs in foundry. So if we have an issue, we will attempt to write a coded proof of concept to why this is an issue that doesn't always work, especially with nuanced issues that are maybe a little bit opinionated. So sometimes it does fall back to being an explained POC about how an attacker might go about something. But we will default to a foundry unit test that proves that we can break something that shouldn't break.
00:41:52.980 - 00:42:25.206, Speaker B: I think having a proof of concept, no matter the state where someone can actually execute it, would be even in the next step further. Because you could even do basically, I guess, a mock context of, let's say. Okay, let's say a vulnerability comes up on block 1000, but the current block is like 100 or something. I guess you could do a mock of that and show a potential, but I guess it's kind of the same, but it gives that extra clarity, which might be useful.
00:42:25.318 - 00:42:42.526, Speaker A: Yeah, well, you could find that with foundry invariance, you could make some actions that just like warp time or roll a block number and just have that as one of the fuz actions. And if that does break one of the invariants, then, yeah, you can find that.
00:42:42.628 - 00:42:53.810, Speaker B: Yeah, for sure. I wonder if it's worth building any internal fuzzes as well for this kind of stuff or would that be too time consuming?
00:42:54.470 - 00:43:41.982, Speaker A: Yeah, that's the biggest issue with fuzzing and invariant tests is that if you're doing a two week audit, it's going to be a bit of a scrape. To build the context of all the contracts in that test environment as if they were in production is the first step. That's setup, basically. That's probably the most time consuming thing. And the easiest thing, frankly, is writing the invariance, like what should and shouldn't break. The hardest thing is the setup and then defining the actions so that they don't just start reverting all over the place. So like if the contract that you're targeting has a bunch of different states and each state allows a certain number of actions, if you just list all those actions and it's in a certain state, a lot of those are just going to revert.
00:43:41.982 - 00:43:54.182, Speaker A: So you're not allowing your invariants to go as deep into that simulation as they can. So that's the other thing is writing efficient actions so that you can get the most out of it. The invariance, the easiest bit.
00:43:54.236 - 00:44:02.746, Speaker B: Yeah, for sure. It's always initial context set up. That's the hardest. I wonder if there's any way to automate that. Actually, it'll probably be extremely hard if.
00:44:02.768 - 00:44:19.630, Speaker A: There'S any way to automate it. So we have found some projects that we will just piggyback off of foundry unit test setup that they have elsewhere in the repo. So that's been the most helpful because that's just enabled us to start from there. We can get those contracts straight away. Automate it?
00:44:19.780 - 00:45:11.280, Speaker B: Yeah. In terms of just like from scratch. Can you bring, I guess a set up from nothing someone's deployed, people have already kind of like quote unquote interacted with it and you have like initial state to play around with. But I guess there's also vulnerabilities in different stages of this as well. There's vulnerabilities on the initial deployment stage where someone can front run actions or ownership, whatever, or even just manipulate pools. If something's dictated by, let's say an oracle manipulation, then your amm that just deployed, or I guess like a pool that just deployed, that's something else depends on. You can obviously manipulate that in any way, but then you also have stuff that's already existing for some time and has established itself, then you have more funds at risk and then you have a new attack surface for that, or a new attack environment rather.
00:45:11.280 - 00:45:24.642, Speaker B: But I would like to touch on oracle manipulation since you were at Chainlink. What are some common pitfalls and what do you see as the most common way for oracle manipulation to kind of come about?
00:45:24.776 - 00:45:29.190, Speaker A: I think this is a deep subject.
00:45:29.530 - 00:45:31.560, Speaker B: Yes, we should have started with this.
00:45:34.410 - 00:46:22.530, Speaker A: In my opinion, and this is a very opinionated opinion, I've not seen a solely on chain oracle system that I would personally trust. I would be willing to put my life savings in. That being said, do not get me wrong, there are pros and cons to both on chain stuff and chainlink solutions and whatever other scale of oracle, from decentralized to centralized, whatever you want to talk about. I think in terms of reliability right now, I think the track record speaks for think, you know, it's chain. I don't really think there's any dispute there. Where to go next? I think I'll leave it there. What are your thoughts?
00:46:22.690 - 00:47:06.866, Speaker B: Yeah, I think anything completely on chain is just waiting to be manipulated. Completely on chain. I think oracle manipulations are kind of quite advanced and you've got to kind of think of multiple, it's kind of a multi strategy hack. So basically how they go is someone flash loans into basically a pool, manipulates the pool, and then they interact with something that depends on the pool. So it's quite complex compared to just, okay, there's an open data validation is not there, or, okay, I just use an external function from a different contract. It's more of like an external going into another external to alter the original contract state, which is another layer of complexity.
00:47:06.978 - 00:47:50.290, Speaker A: I think there's a wider question as to whether an on chain oracle's value is actually the value you are in, is actually the value that you want, because is it representative of the actual price of this thing that you want? Or is it this constrained pool of liquidity that is some percentage of the total liquidity that's probably tiny given the off chain stuff as well. Is that value actually the value you want? And I think until all value is on chain and there's some way of pooling it into a liquidity pool that gives you one result. I'm not convinced that it is.
00:47:50.360 - 00:48:26.030, Speaker B: Yeah, it's quite an interesting kind of field and I think that's probably like the hardest thing to automate if you were going to automate this stuff, which I'm quite interested in actually. But yeah, I also wanted to touch on kind of like how do you manage multiple hats while building cypher? Kind of a switch of topic, but it's quite an interesting one and an essential one for building a startup. You've got to basically manage a team and also, if you're a technical founder, build the tools or whatever. Yeah. So how did you go about basically managing everything and juggling multiple responsibilities at the same time?
00:48:26.100 - 00:49:05.766, Speaker A: Yeah, this is a great question, and to be honest with you, it's probably the thing that I have grappled with the most in the last six months. Patrick and I have our own responsibilities within the company. I'm very much building out this team. Having been in engineering teams and led engineering projects before, I'm comfortable with building that team, but it gets to a certain stage where you aren't as much of an individual contributor and your role is no longer. It's being able to spend two days in vs. Code or whatever hacking away, and it becomes more about enabling others to do that. It's scaling.
00:49:05.766 - 00:49:46.466, Speaker A: That's what it is. It's scaling to get to somewhere quicker and better and faster by enabling the guys who you're hiring, the guys and girls that you're hiring, to do the things that you wish you could do. Because that's where you get your dopamine, but they're getting it quicker. So you have to always find time to do those individual contributed things. But a lot of my role at the moment is vision hiring, providing guidance as well, having a bit more experience than a lot of the guys that we have at the moment of how to work in teams, how to keep your eye on the ball. Execution is everything. So just enabling people and trying to teach the lessons that you've learned previously.
00:49:46.466 - 00:50:10.462, Speaker A: It's a very different mind switch from being an engineer, basically, and it's constantly changing. So I think I'll eventually come out of that role as audit team manager. And we're hiring if anyone's interested. And yeah, focus on other stuff. Like I said, I want to go down a ZK rabbit hole. I want to open up a ZK wing of cypher and if I can, for sure.
00:50:10.516 - 00:50:36.710, Speaker B: Yeah, I think that would definitely be interesting in the future. And a lot of projects are working on ZK now. Yeah. So how did you basically hire in terms of finding people that align with your values and incentivizing them so they're kind of thinking the same way as the founders because the founders have a different perspective. It's their babies, but they want to bring a babysitter to come help with the baby.
00:50:37.450 - 00:51:06.046, Speaker A: I don't know if that's a good analogy. I like it. Yeah, that's such a good question. We basically give them the pitch within the first or second interview. They'll get the pitch from myself or Patrick and we'll kind of gauge the response. Hiring is the thing that I am most scared about to be seen. I've been in places where hiring has been phenomenal and it's just exploded.
00:51:06.046 - 00:51:53.220, Speaker A: Chainlink was the perfect place to see that. The hiring in the early days was phenomenal and it exploded. I've also been in places where one bad hire has been a cancer that spreads throughout the whole business and it crumbles. My experience with hiring is that I've hired individual contributors my entire career, basically, so you can come to terms with another engineer quite easily. You can figure out if it's going to work or not fairly quickly. I think the strategic stuff is what terrifies me. We gave the sales pitch to the top few people on the code arena leaderboard, basically judged the reactions, see how it goes, and kind of hired from there.
00:51:53.220 - 00:52:36.622, Speaker A: The next few manager strategic kind of roles are the ones that we're just taking a lot more care with. And we're lucky in know our advisor and investor, Don Dodge, who's an it executive from the Microsoft heyday, the Google heydays. He's like a fountain of knowledge that we can tap into with this stuff and so experienced. He's one of those wise men who have a quote and a story about everything that always has a moral, and it's exactly the moral that you needed in that time. So he's been so key for us with this hiring stuff and will undoubtedly be key into the future as well.
00:52:36.676 - 00:52:39.630, Speaker B: Yeah. So how do you kind of align them with your values?
00:52:40.130 - 00:52:52.898, Speaker A: I think we just judge. I think we'll say straight up like, this is the mission, this is what we want to do, this is the game plan. Is this something you want to be a part of all good? If not, don't worry about it.
00:52:52.984 - 00:53:09.826, Speaker B: Yeah, I guess some people come on, they just say yes, but then they're really there just for the money and don't really treat it going all out, basically like if it was their own. So I guess, how do you even get people to feel like, yeah, and.
00:53:09.948 - 00:53:44.210, Speaker A: Don'T get me wrong, some people might join cypherin and have not experienced being employed like that. That's a legitimate thing that might happen and that they might not have seen culture before, they might not have known dynamics in a company before. And you've got to make the effort as the co founders and the people who are running the show, keeping the wheels on the track. You've got to regularly kind of just have all hands, like every three months or so and just say, hey, here's what we did. Here's where we are. This is still the vision. This is how we're getting there.
00:53:44.210 - 00:54:06.714, Speaker A: This is how you guys have impacted this. This is how you can impact some more. This is what we want to do. And it's motivating. If you can see the fruits of your labor almost and see that you are contributing, because we need people to contribute. Like you said, we need, what was it, the babysitter to come in and look after our baby. But, yeah, that's exactly it.
00:54:06.714 - 00:54:16.110, Speaker A: We can't do it alone. So we do need people to come in and own stuff and pick it up and make it their own baby as well. I don't know if that's the right analogy.
00:54:16.850 - 00:54:21.790, Speaker B: Steal your baby. Multiple fathers.
00:54:23.410 - 00:54:28.562, Speaker A: Yeah. And mothers. And we can have a family of, I don't know, like 500 parents if you want.
00:54:28.616 - 00:54:33.074, Speaker B: There you go. He bring the ultimate baby into life.
00:54:33.192 - 00:54:33.860, Speaker A: Yeah.
00:54:36.970 - 00:54:40.818, Speaker B: Well, I'm interested to see how this baby grows up at Cypher.
00:54:40.914 - 00:54:45.510, Speaker A: Yeah, me too, actually. Yeah.
00:54:45.580 - 00:54:55.020, Speaker B: So I think if anybody wants to go apply for Cypher, definitely reach out to Alex or Patrick. I wonder if Hans is.
00:54:56.190 - 00:55:17.140, Speaker A: Yes, Hans is open as well. So we have a GitHub repo called open positions. So if you go there, and I think it's hiring at Cypherin IO, please reach out. We're very open. We need all the help we can get if we're going to level up web3 and web3 security. And we're just interested to chat. We want to learn.
00:55:17.140 - 00:55:19.602, Speaker A: We're still out here to learn stuff.
00:55:19.656 - 00:56:01.882, Speaker B: Yeah. So go over there. If you're interested in joining this team of basically pioneers in the space, especially in the education system, they're kind of teaching everyone to get on board with, found you in the latest tools, and have been a major contributor to the onboarding of thousands of developers. So, yeah, if you think you might be a fit, definitely go over. Otherwise, if you want to hear someone else on the podcast similar to Alex, please email scrapingbits@gmail.com, or DM Digarchy on Twitter and suggest someone's out, and I'll reach out. Otherwise, it's been a pleasure talking to you, Alex.
00:56:01.882 - 00:56:05.918, Speaker B: I hope you enjoyed this and I hope the audience has as well.
00:56:06.004 - 00:56:08.990, Speaker A: Yeah, man, thanks for having me. Thoroughly enjoyed. Wonderful.
00:56:09.890 - 00:56:14.890, Speaker B: Okay, that's it, everybody. Have a good day, and I'll see you on the next. Bye.
