00:00:00.170 - 00:00:22.846, Speaker A: If you look at the test and you look at the code, it was, you know, over 90% more efficient than compound, which was a, you know, protocol built by a team full of professional engineers. And, you know, I had billions of dollars in it. And all those people were. Were professionals. They were very experienced. And then, like, I was just some 15 year old kid who, you know, built like a. Something that was, you know, 90% more efficient, like, in my room, and.
00:00:22.846 - 00:00:31.270, Speaker A: And it had more features and stuff as well, but that. That's like innovation. And I didn't have to spend like a know dollar or whatever on computation.
00:00:34.890 - 00:00:41.302, Speaker B: Gm. Gm. Everyone. My name is DiGacci, the host of scraping bits, and today I'm with a special guest, Jess. How's it going, man?
00:00:41.356 - 00:00:42.454, Speaker A: Hey, I'm good. How are you, dude?
00:00:42.502 - 00:00:50.842, Speaker B: Not bad, not bad. Busy day at work, but we keep going, keep it rolling just for the people that don't know about you, who are you and what do you do?
00:00:50.896 - 00:01:19.766, Speaker A: Yeah, so, my name is Jed Shadeja. I am a smart contract developer based out of California. Yeah, I've worked at a number of startups like Rari Capital, Pentagon, XYZ, and right now I'm working at Waymont doing some custody stuff. And I didn't start huff, but I'd like to say that I started the huff community. And so, yeah, that's kind of like an overview of what I've done in the last two, three years, which is quite a lot.
00:01:19.868 - 00:01:32.620, Speaker B: And I think the entirety of your story, which you discussed prior to this, was very interesting. So I'd like to kind of get into that and how you got into the spot that you're into now, right?
00:01:33.150 - 00:01:33.900, Speaker A: Yeah.
00:01:34.990 - 00:01:38.058, Speaker B: Especially being so young, if you want to mention your age.
00:01:38.224 - 00:01:44.014, Speaker A: Yeah, so I'm 17. I'm going into my senior year of high school, so my twelveth grade right now.
00:01:44.052 - 00:01:48.302, Speaker B: And how did your career start and progress into where it is now?
00:01:48.356 - 00:02:19.346, Speaker A: Yeah, so I began writing code back when I was ten years old. I'd learned about computers and how to use them from going to my grandparents house and playing Roblox. And so I immediately just had. It was like a love at first sight thing. Like I had a connection with that computer. And so one day, just like the natural progression was to start learning how to code, and so learn python. I start out with some very basic things, small games, like terminal games, building some simulators and stuff for teachers.
00:02:19.346 - 00:03:03.154, Speaker A: And then I get into web development. I'm not very good at it, but I write some back end stuff and build some basic websites when Covid hits, I'm in 8th grade and me and my best friend, who you guys know as transmissions eleven, who works at paradigm, we wanted to build a project. So we looked around for project ideas and the thing that we stumbled upon that really, really caught our interest was building a blockchain. And so together we build this really shitty chain called Pyrocoin. I think it's probably still online, so you can look at how bad the code is and how far we've progressed since then. But I build one node in python, and then he builds one node in go, I believe, which his node was a lot better than mine. My code really sucked.
00:03:03.154 - 00:03:47.522, Speaker A: But yeah, so from that, even though the code sucked, we never launched it or anything like that. But we learned a lot about how blockchains worked, all the basics, what proof of work was, what a gossip protocol is, and how account balances are stored and whatnot. So, yeah, that gave us a lot of experience and knowledge. And then we don't touch blockchain for another six or eight months. And then he ends up getting hired by Jay Bhavnani at Rari Capital as a front end developer. So he starts doing that, and this is during COVID right? So the way that we'd all connect rather than meeting in person was by playing like Valorant and other video games. And so we'd get on discord calls and all he would talk about is working at this company and what it was like.
00:03:47.522 - 00:04:27.602, Speaker A: And then he'd also tell me about Ethereum. And so we both had heard of Ethereum while building this blockchain, but we never really looked into it. We just thought it was some shitty clone of bitcoin until he goes into it, right, because he's working at an Ethereum smart contract, or defi protocol, where smart contracts are being written. And so he comes and he tells me Ethereum's so much better than bitcoin. There's these smart contracts, you can run code on the blockchain and it really just blows my mind and I get really interested. And so I start grinding on learning solidity, just every day for a few months, until Jay hires me at Rari as well. And for like a year at Rari, I don't really know what I'm doing.
00:04:27.602 - 00:04:46.294, Speaker A: I'm writing smart contract code for them. It's not great, but I'm learning a lot. And then transmissions eleven then gets into solidity as well. He starts learning it. And it's kind of funny because he's really well known as a fantastic solidity. Developer, but I taught him all the basics of solidity, so that's like my little claim to fame there.
00:04:46.332 - 00:04:47.990, Speaker B: But he's your creation.
00:04:48.330 - 00:05:32.162, Speaker A: Exactly. And we start working together, and then he starts getting into gas optimization and stuff. And because we're working on the same projects, I end up getting into that as well. And it's really interesting and we both really enjoy, and we start working on this project called Vault. So it was Roy Capital ran a yield aggregator, and we were going to build out the second iteration of that, which was the code is up and it's way better than the first iteration. And it's mentioned in the foundry readme because it was one of the first major projects to use DaP tools. And that's when transmissions went and started talking about DAP tools on Twitter.
00:05:32.162 - 00:06:05.102, Speaker A: And that's kind of the popularity that resulted from that is why foundry ended up into, I got into DAP tools, I got into gas optimizations and all of that stuff. And it was really fun. When we finished the project, he ended up moving to paradigm. And then I started working on the second iteration of Rye Capital's signature product, fuse. And so when I started working on that, I was like, okay, I really enjoy gas optimizations and I'm decent at it, but I want to get to a whole new level.
00:06:05.156 - 00:06:08.450, Speaker B: Were you building it by yourself or alongside other people?
00:06:08.520 - 00:06:16.722, Speaker A: I was kind of leading it, especially the development, but I was working alongside other people who helped me with architecting it and whatnot. But I kind of took lead on that project.
00:06:16.776 - 00:06:19.990, Speaker B: You were leading it? How old were you at leading?
00:06:21.610 - 00:06:28.070, Speaker A: I was in my sophomore year of high school, so I think I was 1516.
00:06:28.810 - 00:06:30.920, Speaker B: Interesting. How was that experience?
00:06:31.710 - 00:07:18.150, Speaker A: Oh, it was so much fun. I really enjoyed it because at that point, I did not enjoy school at all. And so this gave me, like, I don't know, it kind of strengthened my belief that school wasn't important because I was like, oh, I'm 15, I'm leading this project, and when it launches, it'll have a billion dollars or more because the Rari Tbl at that point was at like a billion. But yeah, it never ended up launching, unfortunately. But I did get the code from the former Rari CEO, and it took me a year to get a hold of it, but he finally gave it to me like six months ago or so. And then I've uploaded it under, I think, generalized lending protocol on my own GitHub page. And that project is my favorite solidity project that I've ever written.
00:07:18.150 - 00:08:14.230, Speaker A: Early test showed that it was I think ten times more efficient than compound. And the reason why I looked at compound rather than Ave is because fuse v one was just a compound fork, right? So it was literally like 90% more efficient than what we had already. The reason why that is, is because right as I started building it, I was like, okay, I really want to take my gas optimization and EVM knowledge to a whole nother level. So I went around and I asked, you know, how do I learn more about this? How do I start writing inline assembly, blah, blah, blah. And I run into this guy, Dylan Keller, who he's a core contributor for Opensea's seaport, and he knows a ton about the EVM. He's a total EVM wizard, and he knows a lot. But he was like aztec protocol a few years ago, built this thing called Huff.
00:08:14.230 - 00:08:58.822, Speaker A: And I've been playing around with it, and it's taught me a lot about the evm. And so I started working on little projects with Huff, and I'd always ask him questions, he'd always be there to answer. He taught me a lot about what I know, almost everything that I know about the evm, just because he was always there to answer. For me, part of working on this original, like working with this original iteration of huff, it was very difficult, right? Because only a few people had ever used it up to that point. I'd say like under ten people had ever written code using huff. And yeah, the code base was pretty messy, there weren't a lot of features, and it was just overall really difficult to use. You wouldn't know where errors were coming from.
00:08:58.822 - 00:09:50.358, Speaker A: The way that I end up debugging is I wouldn't debug my code. I'd have to debug the compiler because there were occasionally issues with that, or I'd have to log exactly where my code was going wrong. And so I realized, look, if I want to keep using this, I should just rewrite the compiler for myself, and then I'll share it with people and then we can all get in to help together. So I rewrite the compiler in typescript, and I add a ton of new features such as constants, and I fix a lot of things as well. And I'm not saying that my code base was good, it was very slow, but it was a big improvement from what we had previously. And because I wrote that, I also had a new found familiarity with the Huff compiler and the code. And so I used that to go and build a foundry plugin and hard hat plugin.
00:09:50.358 - 00:10:30.626, Speaker A: And after that I realized, okay, now this thing is really easy to use. You can write tests with it and it's really easy to interact with other solidity contracts. People can actually start to use this for modules and stuff that they want to hyper optimize. And so after that I end up starting the discord server and the Twitter and people really like huff and they really just fuck with it. So yeah, I end up going all in and I get people motivated about it and I get people using it. I go and I share it around and yeah, so I was really surprised by how much people liked it. And then all of a sudden there's people rewriting it in rust, like improving the compiler by a lot, Writing vs.
00:10:30.626 - 00:10:55.646, Speaker A: Code plugins, building actual projects with it. Huffmate, like the huff version of Soulmate started up. That was a ton of fun. And I was working at Pentagon XYZ at the time, which was another one of Nani's companies, but we ended up using Huff for a little bit and it was just really cool to see this creation actually be used in production and to see people so excited about it.
00:10:55.748 - 00:11:15.634, Speaker B: Yeah, it's surreal, right? It was messing around with some optimization and just rewriting compiler casually into building a community. And now this community is giant, right? It's such a hot topic in crypto, or at least the evm kind of space.
00:11:15.752 - 00:11:35.178, Speaker A: Every time I look at the Huff discord and I see people joining every day or talking about it, it just blows my mind that this just kind of started. I rewrote that huff compiler during winter break, right. So I was off from school and it was like Christmas break, and so I decided to rewrite it. But I just think about, I never imagined it getting so big and I didn't think people would care at all.
00:11:35.264 - 00:11:46.062, Speaker B: Curated some of the best devs in the entire space. Right. My career wouldn't even be where it's at now if you didn't actually do this, which is crazy.
00:11:46.116 - 00:12:15.046, Speaker A: I appreciate that. Yeah, I mean, it's wild. Like I said, I never imagined it seeing it, but it represents the beauty of open source, right? Just someone can go and start this project and then create a Twitter for it, and then all of a sudden just a bunch of smart people who are excited about it, or a bunch of smart people get excited about it and all of a sudden you go from zero to one and then one to 100 and it turns into something like this, which is just beautiful and really exciting to see.
00:12:15.148 - 00:12:20.274, Speaker B: What were the main kind of difficulties you found when rewriting this compiler?
00:12:20.322 - 00:12:44.334, Speaker A: Yeah. So I'd say I'd never written a compiler before. Right. So if you look at the original Huff compiler, not the original, I guess, my original version of it. So the one that I wrote in typescript, it doesn't have natural elements of a compiler, so there's no parser and there's all those steps. I'm not super familiar with compiler design. I didn't work on the rust rewrite at all.
00:12:44.334 - 00:13:11.370, Speaker A: But I talked to the developers as they're doing it, and I was always on the calls when they planned it out. So from that I learned a thing or two about compiler development. But I had really no idea what I was doing. And so it was difficult. And also just, I was trying to keep it somewhat similar to the old code. So because I wanted to kind of preserve Zach and Aztec's original vision, so I didn't want to go too far from that. And so I wanted to keep the code base somewhat similar.
00:13:11.370 - 00:13:45.666, Speaker A: And it was a very difficult code base to understand. The reason why is because they built that thing in like a weekend. The reason why huff was built is because the aztec team was trying to build an on chain elliptic curve contract, and solidity was not efficient enough, and inline assembly or yule was also not efficient enough. So they were like, okay, well, let's just go build a whole new language, which is like very chad Vuve. They go and do that. That's really why they only built huff for themselves. Right.
00:13:45.666 - 00:13:58.214, Speaker A: They didn't think anyone would really care. And so, yeah, that's why I ended up rewriting it there. But, yeah, that was the most difficult for me, just not understanding compiler design, not understanding that original code base, because.
00:13:58.252 - 00:14:02.298, Speaker B: Compiler design is one of the, I think, hardest topics to learn.
00:14:02.384 - 00:14:02.730, Speaker A: Yeah.
00:14:02.800 - 00:14:56.170, Speaker B: And even learning the skills in compiler design, it kind of branches off into a lot of other advanced topics, like, I guess, formal verification. Then you got like, cybersecurity side of stuff, program analysis, which I think is like a great pathway to get into because I also got into the compiler design stuff through disassembly and then decoding. And then it kind of just led me down the path of, okay, now I have this representation of the bytecode. What else can I do with this? And it's kind of just like, oh, okay, I can analyze it for vulnerabilities, because as you're writing huff, you're kind of doing that manually. And if you think about it, if you know that well enough, you can eventually automate it. You find patterns and you recognize heuristics. You can build algorithms to kind of do this for you.
00:14:56.320 - 00:15:52.650, Speaker A: Exactly. Yeah. That was the one other value add that I saw in huff, which was that it taught people about how the EVM worked. And also, as you're saying, right, it taught you a lot about formal verification and understanding all of these things, because huff, frankly, isn't super practical for writing production ready code, unfortunately, just because even with solidity, right, it's very easy to make a mistake that could lead to the loss of tens, if not hundreds of millions of dollars. With huff, it's like ten times easier to make a mistake like that. But it makes me really happy to hear that people are learning so much. I didn't even realize that until talking to you today, that learning about the EVM through huff could take you on such a wild journey where you just learn so much and are exposed to so many different topics.
00:15:52.730 - 00:16:54.578, Speaker B: Yeah, I think specifically because I think the EVM is such a simple virtual machine that if you were to do this with a different virtual machine, right, then it would take you a much longer time. But since it's very compact and not a lot of things are going on, it's more of like simple, more of a simple architecture. It's faster to learn this, and then I guess the faster you learn it, the easier it is to kind of master. And then once you master it, you think of other possibilities, et cetera. But yeah, it's definitely like the best way, I think. I remember when I started, I was like, okay, how do I actually learn the EVM at its fundamental level in smart contracts, right? And then it was j trilly, but basically everybody was telling me like, learn half, learn half, don't do inline assembly. And I was like, why would I do that? But it's because you can manage the stack and that's kind of like the main thing, whereas inline assembly, you can't do that.
00:16:54.578 - 00:17:41.230, Speaker B: And once you learn how to manage the stack, you realize all the optimizations that can happen, which matter because you save ridiculous amounts of gas. The compiler, Viper compiler, it's building all this unnecessary bytecode at granular level that doesn't really matter, whereas if you did it manually, you could manage it a whole lot better. But obviously it's super complex to build something like that. That's very efficient, which, I mean, if you build a compiler, you could always build like an optimization kind of tool as well. So you could go down that route as in forward engineering, instead of reverse engineering so many pathways, man, it's sick.
00:17:41.730 - 00:18:12.540, Speaker A: Yeah, it really is. Yeah. I mean, going back to the point about how with Yoland inline assembly as well as Viper and how those languages abstract, I don't know, they abstract the stack. I don't know. They abstract a lot of the actual EVM. And so through writing them, of course you're going to learn about how the EVM works on a very high level. But with Huff, you learn about managing the stack and dealing with all of that.
00:18:12.540 - 00:18:14.780, Speaker A: I lost my train of thought.
00:18:18.110 - 00:18:20.890, Speaker B: Managing the stack assembler. Yule.
00:18:22.990 - 00:19:39.734, Speaker A: Oh yeah, actually. Okay, let me go back to where I started this, and then going back to your point about how Yule and other languages such as solidity and viper kind of abstract things like the stack and the more lower level aspects of the EVM. I think that's where I found writing huff and working with Huff to be a little more valuable than working with YoL and inline assembly. And then once you learn about that, just when you're writing solidity, and when you're writing Viper code or any other higher level EVM language code, you just have this elevated level of understanding, right? At this point, you know exactly what's happening in the code below. But then as you're doing that, when I was writing solidity code, after learning huff and learning how to write huff, I had an idea of what the code was doing, right? So I thought like, oh, say you're adding two numbers together, right? Actually I'm going to say, let's say you're dividing two numbers. You'd think like you're just dividing two numbers using the divide opcode, right? Or you're pushing two numbers to the stack and then using divide opcode. But in reality, there's so much more happening that the solidity compiler doesn't allow you to see.
00:19:39.734 - 00:20:16.866, Speaker A: And so yeah, it gives you this, like once you actually realize that, because when you compile a solidity contract into bytecode, but then you convert that bytecode to just like opcodes, the code is just really confusing. You're like, what is this? Why are there so many random things here that don't make sense? Just like writing huff kind of gives you an idea of how unoptimized these languages are. And so for a while I was like, okay, I kind of want to write a language where the intermediate language is huff. Yeah, that would have been kind of.
00:20:16.888 - 00:20:20.914, Speaker B: Cool, but yeah, solidity kind of thing.
00:20:21.032 - 00:20:21.700, Speaker A: Exactly.
00:20:23.750 - 00:21:28.300, Speaker B: It's like a big point of I also had the realization as well, where you learn huff and you understand how the stack works and the stack works and how to make it hyper optimized and super efficient, where you're not using memory and then duping it multiple times, et cetera. It's like, okay, you have one variable, let's dupe that and use it somewhere else later down the road. We'll just keep it in the back of the stack and kind of swap it out later. But in solidity it's like a whole different process of just redundant memory. M loads, ads. If you go into the current compiler and you do an s load plus another s load, it's going to just do a whole bunch of extra zero plus whatever number it was, swap it, dupe it, pop it, it's really weird. And it's still like that.
00:21:28.300 - 00:22:37.406, Speaker B: All these compilers are still very early stage, so it's understandable. Building a compiler is super fucking hard, but it really opens your eyes. And when you understand that, you know how to optimize it at a macro level as well. For example, if you're doing an m load and if you're storing something to memory, and then if you're grabbing a storage slot and then putting that into memory in the granular level at the bytecode, what you're really doing is doing an s load and then an m store, right. So you're actually using the same variable twice, whereas you could directly just use s load and use that for the variable instead of doing the extra steps, spending extra gas. But yeah, it would have been crazy to see how this whole progressed. And I'm pretty interested in why didn't you really get into node development when you first build a blockchain, right? You built your own node initially, which as you said was kind of shit, but it's still a node, right?
00:22:37.588 - 00:22:38.366, Speaker A: Yes.
00:22:38.548 - 00:22:47.410, Speaker B: So why didn't you go down that route of contributing the EEF or something else along those lines?
00:22:48.390 - 00:23:47.270, Speaker A: For sure, yeah. The reason why after writing that blockchain, both transmissions and I didn't get into node development is because we built it with the belief that it was just like one project we were going to do, right? Looking back, I'm very grateful that we did that project because we both ended up getting into blockchain development. But at the time it was like, okay, we're both kids, we're just looking for a fun project to do because we can't see each other and we have a lot of time on our hands because we can't really go outside and whatnot. So we just ended up building that. And then we built different projects between that and we built games and stuff in between finishing that and then him getting hired at Rari. And so yeah, I think that I would have got into it if, say, a node development opportunity ended up arising. But for me, a smart contract development came up, and then, I don't know, I found smart contract development to be incredibly fun.
00:23:47.270 - 00:24:49.494, Speaker A: Right? There was this added layer of pressure, for example, with having to write secure code, but it all felt like a puzzle almost to me. And, yeah, solidity was just unlike any other language that I had touched before. And I was always constantly learning more and more about Ethereum and smart contracts and the solidity language. And so I found that so much more interesting than, I think, anything else that I could have worked on. Right. Because obviously you're constantly learning more as you're writing code in other languages, but with solidity, there's just so solidity kind of felt like a game almost, right, because you're constricted by the bounds of the EVM, which aren't very large at all. Right, so as a solidity developer, you're trying to do as much as possible, or as a smart contract developer, sorry, you're trying to do as much as possible within these small bounds, while also trying to optimize the code as well.
00:24:49.494 - 00:25:26.622, Speaker A: And so every program that I developed felt like a challenge, and every program that I developed taught me so much. And so I never really wanted to get into anything else. Right now, at the company that I'm working at, Waymont, I haven't had the opportunity to do smart contracts that much, and I really want to. And so every opportunity that I get, I try and do smart contract stuff. But, yeah, it really is just a beautiful language. And you learn a lot also about working with other languages, funny enough, from writing code for the EVM. Right.
00:25:26.622 - 00:25:43.754, Speaker A: Optimizations. And also just learning about the EVM taught me about what is actually a stack. Right. And the memory and the EVM, similar to the heap. Right. So I don't know, that kind of taught me a little bit about that. I don't know, it's fun.
00:25:43.754 - 00:25:45.194, Speaker A: And it teaches you a lot.
00:25:45.232 - 00:27:14.966, Speaker B: Yeah, I think the gas specifically is a very predominant, significant kind of thing in terms of optimization, because not only does it make your code run smoother and it's easier to read, but it also has value behind it of. Okay, if your contract is highly optimized, it actually correlates to how much it costs to run it in a monetary aspect. And I think that, for me, translated to writing these very, what's the word? Like time sophisticated, something like that. Something that requires a lot of computational power. It indicates the significance of how important it is to have optimized code, even though it's not directly related to money coming from that background of gas and execution costs based on how much code there is, it gets you thinking you want to make everything as optimized as possible. And maybe it wouldn't matter as much on small little functions, but at a broader scale, on these large complex systems, it really does matter, especially with for loops, which we see majority of the gas being used, like people using, they're just calling s load in every single iteration of a for loop instead of caching in and using that. So I guess it translates to that.
00:27:14.966 - 00:27:19.794, Speaker B: But you're also interested in AI, aren't you? How's that pathway going? And have you really started that?
00:27:19.852 - 00:28:00.194, Speaker A: Yeah, so, frankly, I haven't done a ton in AI. I learned a little bit about it. I taught myself a little bit about the basics of neural networks. I made a few notebooks, for example. I think the main project that I did that really taught me a lot about AI was going and building like an MNES digit classification task from scratch. Looking back, it wasn't a very complicated project, but I learned just so much about how neural networks really work on a lower level from doing that. Right, because I didn't use Tensorflow or any neural network library, I just used numpy.
00:28:00.194 - 00:29:07.020, Speaker A: And so I had to work on the matrix multiplication stuff and dot products and stuff all from scratch, which I didn't really know how to do. And because I'm in high school, my math knowledge isn't super developed either. I just finished calculus, like calculus one. So I learned a lot of linear algebra and stuff from that project as well. But I think that while AI is a very cool space to work in, and it's obviously very developed, so what I'm about to say doesn't really apply to every aspect of the AI field. But what I noticed is that it's very difficult to innovate, right, unless you have a lot of computational resources or money, because if you want to build like a state of the art model, you have to have computation for training it, you need to have time to wait for it to train, and you also have to have the data. So I found that kind of interesting because it was more of just working with specifically in the deep learning field.
00:29:07.020 - 00:30:42.826, Speaker A: And I'm sure it's different with things like reinforcement learning, et cetera, but with deep learning in particular, which is what interests me the most in AI, it was less kind of coding and programming in the traditional sense, where you're just like solving problems and writing algorithms and stuff, and more architecting models and then modifying them slightly with each training iteration based on what you find about the accuracy and trying to minimize error, which I think is cool, but it just wasn't right for me because I like sitting down, coming up with the solution of a problem, and then writing like an algorithm to do that, and also just being able to innovate without needing a ton of money. Right? For example, if we go back to fuse v two, which we were talking about earlier, the code that I wrote for that, which once again was never actually deployed, but if you look at the test and you look at the code, it was over 90% more efficient than compound, which was a protocol built by a team full of professional engineers. And I had billions of dollars in it. And all those people were professionals, they were very experienced. And then I was just some 15 year old kid who built something that was 90% more efficient in my room and had more features and stuff as well. But that's like innovation, and I didn't have to spend like a single dollar or whatever on computation in order to do that, so I prefer that. And so I realized like, okay, maybe AI isn't the space for me.
00:30:42.826 - 00:30:58.222, Speaker A: I also, just to be honest, don't enjoy AI development and neural network development as much. There's other fields that aren't deep learning, but deep learning is just what interests me the most. Right. It's what really excites me, but it's just a difficult space to work in.
00:30:58.356 - 00:31:43.790, Speaker B: Yeah, I can see how it is like that. You need resources basically to even get started for, I guess, very complex things, for innovative things. Whereas with smart contracts or anything else where it's like kind of manual, I think with smart contracts specifically, I even noticed how easy it was to innovate, as you said. With that you could just find something, find units and make them more optimized, add some more features, bang innovation, whereas with something more complex, you're going to have to build a massive system, resources behind it. And maybe someone can't just look at it and make something better overnight. Theoretically, I guess they could, like on a piece of paper, but implementing it, probably not.
00:31:43.860 - 00:31:45.390, Speaker A: Yeah, in practice, way more difficult.
00:31:45.460 - 00:32:35.502, Speaker B: And I think I want to touch on also working so young as well is quite the feat, especially in school, juggling that. So what was that kind of experience like? I don't think, I never experienced that, and I'm sure majority of people don't experience it either. Of becoming a software developer such a young age. Of course you can go work at McDonald's, which is kind of the standard route or retail bar. All of those kind of jobs like hospitality. But this is like a major step which usually isn't even accomplished by university graduates until maybe they hit an internship, et cetera. What was that kind of process? Like getting your first kind of hit and then iterating from there?
00:32:35.556 - 00:33:05.666, Speaker A: I started in my freshman year, so my 9th grade of high school, and thankfully for me, school was online at that point because of COVID So I was at home. And yeah, I didn't have to be at school physically, which was a big time saver. So I would not show up to class. I'd finish my homework very quickly before school would even start. Or when I did show up to class, I wouldn't be paying attention. I'd just be finishing my homework. And so by 03:00 or even earlier than then, I'd be all done with homework.
00:33:05.666 - 00:33:53.414, Speaker A: I wouldn't have to worry about that. I'd be done with school and so I'd just get straight to working. That was really easy for me and I wasn't super experienced at the time, so I spent a lot of time just kind of learning. Unfortunately, with that much time, I wasn't able to be as efficient as I wanted to because it was a little difficult for me just being thrust into that space because before then, I'd only worked on personal projects and I'd only done what I was comfortable with. But when I got to actually working and building projects with deadlines and working with other people, I'd say it was definitely difficult. And I was pushed out of my comfort zone a lot, but it was a lot of fun and I'm very grateful for that time period. Flash forward to after that summer in my sophomore year of school.
00:33:53.414 - 00:34:25.682, Speaker A: I find things to be a lot more difficult, right? Because it's like my first time going out, going to school in person while also working. So there it was a lot more difficult for me to work during class. My parents are pretty strict when it comes to school, right? So I couldn't skip class to work if I wanted to. Although I tried and I got caught and it wasn't good. But yeah, occasionally I'd miss class to do work calls and stuff, but yeah. So that was a lot more difficult. It's hard, right? Because this is almost like a full time job, right? Doing.
00:34:25.682 - 00:35:03.098, Speaker A: I mean, it kind of was, right. I was technically hired full time, but then I had another full time job which was going to school, right? And then homework is basically like unpaid overtime, right? That you just work on. And so it'd be like, I'd go to school during my breaks and stuff. I'd try my best to work on projects, and during classes that didn't matter as much to me. I'd be working, then I'd have to come home and do homework and then do my work after, which was pretty difficult. And I was able to manage that for the year, for my sophomore year. And then the summer of that year goes by, and then I'm in 11th grade, which is the year that I just finished.
00:35:03.098 - 00:35:39.766, Speaker A: So this is my junior year of high school. A lot kind of goes wrong at the start of the year, right? There was the whole FTX debacle, and crypto just wasn't in a great space. And I was like, okay, this is a little too much stress for me. I just want to go back to focusing on school because at that point, I realized that I did want to go to uni, so I needed to have good grades to get into the schools that I wanted to, and just, okay, I'm just going to take a break for this school year. And I focused on my social life. Right? Like, I actually went and I hung out with friends on the weekends and met girls and stuff like that. Yeah, like normal kids stuff.
00:35:39.766 - 00:36:41.526, Speaker A: And I got my license. I bought a car with the money that I made at Rari and other companies that I worked at. And so, yeah, I just kind of enjoyed life this year, and I got back into things this summer. And the thing is, there's a lot of kids across the country and across the world who have passions like I do, right? Whether that's programming or engineering hardware, even art and music and stuff like that. And it sucks, right? Because we're all kind of forced to do this whole school thing where we have to learn about things that we're not super passionate about and things that aren't also not useful. But I found it really funny that I was told not to work on the projects that I was building and to focus on work where I'm actually building billion dollar protocols and working with the merging of companies and stuff like that so that I could learn about, I don't know, whatever the hell we learned about in school.
00:36:41.648 - 00:36:42.606, Speaker B: Learn art.
00:36:42.788 - 00:37:00.210, Speaker A: Yeah, exactly. Learn about art history, stuff like that. That isn't super valuable. At that point, I was frustrated, but I had a good year, for sure. Just like, living life a normal kid. My stress was a lot lower. And, yeah, I was having social life, too.
00:37:00.280 - 00:37:14.054, Speaker B: It's kind of weird, though, that you were told to do school when you have this job, right. Like a full time job in such a lucrative space as well. The whole point of going to school is to get a job.
00:37:14.252 - 00:37:15.094, Speaker A: Exactly.
00:37:15.292 - 00:37:19.100, Speaker B: And I mean, you've already accomplished that task. So at that point, what's the point of school?
00:37:19.710 - 00:38:05.798, Speaker A: Yeah, exactly. Throughout my entire kind of programming journey since I started, I think that the most difficult part was actually dealing with my parents. So when I was younger, when I was in middle school, from ages like ten to, I'd say 14, right before COVID happened, my parents didn't want me to code, right. They saw it as the same as like, video games, and they wanted me to focus on school. And as a result, I'd wake up at like four in the morning to code before everyone was awake or I'd hide in my bathroom. When kids are in their bathroom with their computers, they're not coding. I was building projects and stuff like that.
00:38:05.798 - 00:38:38.034, Speaker A: And so that was where the main pressure came in. When Covid happened, I was stuck in my room all day and no one could tell me. My parents were in my room constantly, right. So they couldn't see whether what I was doing. And so that's when I really started to excel and when I really started gaining experience and my skills started improving because I'd literally be programmed for like 8 hours a day because I was just stuck in my room the whole time. And I finally had the freedom to go and do what I wanted. And then with work, they were also the ones telling me, like, okay, you should be focusing on school.
00:38:38.034 - 00:39:02.262, Speaker A: You should try and get into a good school. You shouldn't be doing was. That was really difficult. I'd say that was kind of the major force making things harder for me to improve into work. And, yeah, they didn't really start. I remember at a family function at one point, I was working at Rari and my dad goes around telling everyone that I'm working at a legitimate pyramid scheme. And so all my family was really suspicious.
00:39:02.262 - 00:39:57.402, Speaker A: And obviously crypto is suspicious to people, but I was not happy that he went and told everyone that I was working for a full on scam. They didn't take it seriously, though, until I bought my car. And then they were like, okay, maybe this is actually valuable because my parents, they both grew up in poverty, right? So they were very poor. Their parents worked factory jobs and stuff like that. And their escape from that life was school, right. They both did well in school, went to good universities and ended up doing well. But it was because they put effort into school and some of their close friends from high school and middle school, whenever they didn't put a ton of effort into their education and they didn't end up doing much, they stayed in that poverty and never moved out of their hometowns or whatever.
00:39:57.402 - 00:40:29.414, Speaker A: So they saw that. And I think that there's some level of subconscious equivalence to them, or correspondence, I guess. But between not paying attention to school and not doing anything, when in reality, I think especially with our generation, school is not what you need to necessarily do. Well, because the Internet's here, right? And now even with more tools such as chat GBT, you can just go and teach yourself whatever you want for free. All these. Exactly right. Like monetizable skills in university as well.
00:40:29.452 - 00:40:43.130, Speaker B: What you end up doing is also just doing the same thing as what you would do outside of school if you were motivation disciplined enough, which is basically googling and using chat GBT to help you find your answers.
00:40:43.710 - 00:40:44.460, Speaker A: Exactly.
00:40:44.990 - 00:40:59.120, Speaker B: That's the real skill you get out of it, except in a more, I guess, directed sense. You're not forced to do it yourself, obviously. I don't know, I didn't go to university, but that's what I assume I would do because that's what I did in high school.
00:40:59.570 - 00:42:12.822, Speaker A: Yeah, exactly. The other thing is that in computer science and just like programming degrees and classes, you learn a lot more theory, which is definitely useful. But for building projects, it's not something that you need to know. And so when you go to university and you get a computer science degree, you will have taken a bunch of classes just on programming and computer theory and all of that stuff. And you're self taught, too. So I know that you definitely relate to this, but the way you learn when you're self taught is you just go and you build projects. And when you're building projects and you don't know something, you just google it, and then you learn that, right? The approach, like the educational approach to programming and computer science is, okay, let's teach them the basics all at once, then let's teach them a bunch of useless theory, and then we'll have them go build projects, when in reality, it's a lot faster to start with the projects and then pick up everything you need to know along the way, because then it strengthens your ability to gain new knowledge and absorb new material and information as you're building.
00:42:12.822 - 00:43:02.182, Speaker A: And so you can literally go and build whatever you want, right? Because you're just so flexible and so open to learning new things that if you want to go and learn a new programming language or start developing a new field, you already know how to do that because your entire programming journey has just been doing that. Exactly right. That's how you learn. Whereas, yeah, if you're just learning theory, you never really know how to build anything. So I don't know if this is true or not because obviously I've never worked at a large tech company, but from what I've heard and what I've seen online, there's a lot of people who come out of Ivy League schools or really good computer science programs who have literally no idea what they're doing because they were never taught how to build actual projects and were only taught about the theory behind programming, which once again, isn't that useful for actually going and doing things.
00:43:02.316 - 00:43:26.000, Speaker B: Yeah, I think the fastest way to learn anything is to go try it. And if you don't know how to do it, okay, you hit an error. How do you get around this error? How do you fix this error? And then that's how you progress. It's kind of interfacing with. What's interfacing with the real world, right. If you hit a roadblock, you've got to get over that, otherwise it's not going to get done. And the only way you get over that is by learning.
00:43:26.000 - 00:44:07.802, Speaker B: I think what with school, it teaches you a whole bunch of theory, then you go try and apply it. But I think a better approach is more of, okay, I think in the computer programming, this is the best approach. Just go try, do it and go learn it. If you hit a problem, but I don't know for other kind of fields whether you must learn the theory. I think for medicine specifically, yes, you should know the theory before you go apply. Otherwise you can't do open heart surgery and go wing it. But with computers, I think it's definitely the trial and error case.
00:44:07.802 - 00:44:32.850, Speaker B: And when you think of an AI, that's basically what it's doing as well. You're training something to go try it, and the feedback loop is attempting to learn and get better, surpass that kind of failure, which is exactly like what we're doing. Otherwise, if that wasn't an effective method, why would AI be where it's at now? And why is it accelerating so quickly?
00:44:32.920 - 00:44:33.442, Speaker A: Right?
00:44:33.576 - 00:45:17.746, Speaker B: So someone's literally taken that way of thinking and built something living, or eventually going to become living where it's teaching itself. Right? So I think it's a great kind of skill. It's also a skill. This thing is researching and applying and trying, and it's also a discipline thing. So I think it's a whole kind of personality character development thing, and I wish I did it way younger. If I was in high school, looking back and I knew about programming, I would have dropped out at the minimum, which is like year ten. But I think school is also great for socializing in understanding humans and interacting with them.
00:45:17.746 - 00:45:55.806, Speaker B: I don't know how people home school, you don't get that diversity of different people personalities and how to build these social skills of interacting with them and communicating. That's, I think, the biggest plus in school. Obviously, you can get to a point where you're knowledgeable of English, math, and that's really all you need. You don't get taught taxes, you don't get taught business. You didn't get taught basically how to fail and move on. It's all reward based, as in, okay, you get this number on a piece of paper, try not get that number lot next time. And it's kind of really demotivating as well.
00:45:55.806 - 00:46:06.562, Speaker B: If you get a bad score on a test, you feel really bad, whereas in programming, you fail. Oh, let's go. Let's go learn this new.
00:46:06.616 - 00:46:07.026, Speaker A: Exactly.
00:46:07.128 - 00:46:07.986, Speaker B: You feel good about it.
00:46:08.008 - 00:46:35.882, Speaker A: Yeah, exactly. Right. It provides a whole new opportunity to learn something new. Right. When you're self taught in programming, the way that you approach everything is with a quote, unquote growth mindset, right? Whereas school is very harsh to people who don't succeed their first time. And so there's a lot of kids who unfortunately don't do well at the beginning of their educational journeys, right. Elementary school and middle school.
00:46:35.882 - 00:47:09.398, Speaker A: And because of that, they never believe that they can do more. And so it's really unfortunate how the school system just kind of encloses you within this box if you don't do well from the get go. Whereas with programming, and especially when you're self taught, you approach everything with this mindset. There's always room for growth, and if you don't understand something, you can just go and figure it out. And that's where the fun of it is as well.
00:47:09.564 - 00:47:34.380, Speaker B: On top of that is also when you fail, you know, there's potential there of, okay, I think this is possible. Let me go test this theory and make it possible. So it gives you excitement to go. It's like a hunt, I think. You want to get the reward and you want to do whatever it takes to fix this problem. You spend hours on it, time goes by, it's suddenly 04:00 a.m. And you still want to do it.
00:47:35.310 - 00:47:36.022, Speaker A: Exactly.
00:47:36.176 - 00:48:04.594, Speaker B: When you're studying you don't necessarily want to do it. It's more of for a score just so you can get something out of it later, which you might not even want down the line, because exactly. When you're young and you don't actually know what you want to do, getting into like, I don't know. I think it's controversial, but from my experience, it's not worth to go to uni if you don't know what you want to do. But I guess it depends on your situation. But there's so many avenues you can go. Like me personally.
00:48:04.642 - 00:48:05.240, Speaker A: Exactly.
00:48:05.770 - 00:48:17.740, Speaker B: I was working two jobs when I finished high school and I didn't know what I wanted to do and I was working at retail in a bar and I was just, okay, how do I actually get money without working for someone?
00:48:18.590 - 00:48:19.002, Speaker A: Exactly.
00:48:19.056 - 00:48:58.614, Speaker B: I think it fundamentally comes down to, are you willing to build up the discipline to get to the next level? Because in reality, nobody cares. Nobody's going to push you apart from yourself all the time. You're alive, you're by yourself. Sure, you have people around you, but ultimately they're not going to be. You can't have an external factor motivating you, pushing you to the next level. If that's the case, then you got to reassess hard. I think if you're not willing to do it every single day, despite your emotions, and if you're not consistent, then there's going to be someone that's doing that.
00:48:58.614 - 00:49:05.174, Speaker B: Right and you're just going to be left behind or work for that person that is consistent. Very philosophized.
00:49:05.302 - 00:49:07.690, Speaker A: Yeah. Very deep stuff that we're getting into.
00:49:07.760 - 00:49:55.994, Speaker B: Yeah. But it is like, honestly, the basis of anybody's success was, and success is obviously subjective, but I think to accomplish anything, you need to really be disciplined in being self taught or I think, yeah, like computer science in general, you got to be self taught to just find the questions and then search them up, find the answer to the questions that you've developed. It all comes down to, you've got to do it. Nobody else is going to do it. You've got to think of the questions, think of what you need to do, prioritize, manage all your time. And this is with anything. I mean, you can go have a job where someone directs you for nine to five or you can go try and do something yourself.
00:49:55.994 - 00:50:32.102, Speaker B: And I'm not saying like, having a job is necessarily bad, you can learn a lot from it and enjoy it tremendously, but it all really comes down to the same thing. You've got to be disciplined in whatever work you've done, and I wonder what the next steps are for you. How do you kind of see yourself progressing? Because it's going to be in the future. You're going to look back at this and be like, oh, okay, maybe I didn't take that path, or I did, and it's what I predicted. So I guess, how do you see your future going and what do you want to be in the future? Who do you want to be?
00:50:32.236 - 00:50:33.400, Speaker A: That's a good question.
00:50:37.770 - 00:51:34.394, Speaker B: Yeah, I've done this multiple times throughout my kind of life. It's great to set a target for the person you want to be, and you've got to. I think the limiting factor for everyone is belief. If you really believe, you can set a target right and you can follow a path to get to that point, and you can identify the characteristics of that person that you want to be and the habits. What does it look like in a day to day life? And through that, you can really formulate, I guess, routine to really get to that point where you really are that person you've just written down. I think it is something worth dwelling on and thinking about because that's ultimately your future that you just written down, and you've got to manifest it. So I don't expect you to answer it instantly, but it's good to have a general idea, I think.
00:51:34.592 - 00:52:18.790, Speaker A: Oh, yeah, 100%. And that's really great advice. I appreciate that. Obviously, a lot has happened in the last few years, and I've gained experience that most people don't experience until they're a lot older or a lot of people just never experience this at all. And so that's definitely shifted my way of thinking on who do I want to be, what do I want to do? When I started working, and just up until somewhat recently, it was like, okay, well, I just want to keep working and just start companies and stuff for the rest of my life. Recently, my mom, though, was diagnosed with cancer, and it shifted my perspective. Once again, no worries.
00:52:18.790 - 00:52:49.060, Speaker A: We as a family have learned a lot from it, but it shifted my perspective. Right. This in addition to me getting a social life and starting to hang out with people because I stopped working, I realized that there's a lot more to life than just working. I realized that I want to have fun. A lot of people are like, okay, I want to retire by 30, and I never see myself fully retiring. Right. I always have to do something.
00:52:49.060 - 00:53:16.602, Speaker A: This is what I'm passionate about. Right? Like working, building things. And that's something that I want to do until the day I die, but I do want to spend more time just really enjoying. And so what I want to do is after college or if I drop out or whatever, loki just want to make a ton of money, travel the world. I love cars. I want to have a car collection, go out and drive every morning. That would be the dream for me.
00:53:16.656 - 00:53:22.140, Speaker B: In order to get to that point, you've got to identify how do I get there?
00:53:22.750 - 00:53:23.498, Speaker A: Yeah, exactly.
00:53:23.584 - 00:53:56.278, Speaker B: Some steps. So obviously what you want your life to look like, but then the next steps after that is, okay, what kind of person actually has this life and what pathway can actually get to that point. For example, obviously you can have someone with successful startup. Okay, what kind of startup do you want? For example? For me, it's a fully automated kind of auditing platform. Okay, what does a world leader in this field look like? Right?
00:53:56.364 - 00:53:56.662, Speaker A: Yeah.
00:53:56.716 - 00:54:25.386, Speaker B: And it's like, okay, you got to read, obviously, all the papers, see what the competition is, get a good understanding of fuzzing in both web two and web3, and then what are the problems you're actually facing if you go to the most granular level, which goes back to huff of the fundamental understanding what is necessary to achieve this, and then you kind of modulize as much as possible, put them into the smallest tasks so you have a very achievable goal, for example, like call of duty.
00:54:25.418 - 00:54:25.566, Speaker A: Right.
00:54:25.588 - 00:54:55.446, Speaker B: You have the prestige and whatnot. They're all very small goals of just like one level up bar until you get to the maximum. And so kind of building it in the same way where you're gamifying life of, okay, go get to this step. Okay, now you have an MVP. How do you get to the next level from the MVP? How do you make it better? And that's where you get users to interface, give you feedback, and then now you have clear steps of how to get to the next place. It's just kind of doing that kind of strategy. It's very simple, but it's super effective.
00:54:55.638 - 00:54:56.442, Speaker A: It really is.
00:54:56.496 - 00:55:00.746, Speaker B: You just got to kind of construct your life towards it 100%.
00:55:00.848 - 00:55:32.486, Speaker A: So, frankly, I don't know what the next steps are, but I think one thing that kind of struck out to me about what you said there, and also a little bit in our last conversation is mapping out what kind of person you want to be. Right. So I think it all comes down to discipline and a few other skills or traits or whatever you want to call them. And so I think that rather than focusing on, okay, what kind of startup do I want to do, or how do I want to make the money or what skills less. So the skills part, but more. Those two in particular. Right.
00:55:32.486 - 00:56:17.566, Speaker A: Like thinking about the exact steps, I'm thinking more about what kind of person do I want to be. Right. Like how. How do I stay, you know, how do I stay disciplined? How do I improve myself? Because the world is changing a lot, right? And so by the time I actually get to starting my first company or going and doing whatever it is that I end up wanting to do, the world is going to be very different than how it is today. And frankly, I'm not in a position to start a company today. But I know that at some point I will be, and I want to be prepared, and I want to be in the right headspace when that day actually does come. The next steps for me are just kind of preparing for that, right, building good habits and also just learning a lot.
00:56:17.566 - 00:57:03.906, Speaker A: So the purpose of my work, the reason why I got into working, was because I wanted to be a part of something. And then that kind of changed to two reasons. Because I enjoyed it and also because I like seeing the number go up in my wallet. And then now it's less so about making the money and more so about just really learning, and also because I do really enjoy it. But now I look up to the people that I work with. I'm like, okay, these are the kinds of people that I want to become when I'm older. What exactly do they do, right? What makes a successful entrepreneur? What kind of decisions do they make? What does the day to day life look like of someone who is building a company and doing a good job of it? And so I'm learning a whole lot about that.
00:57:03.906 - 00:57:31.022, Speaker A: And it's also just like, I'm also trying to build good habits and good skills, right, things like meditation and exercising and just taking care of myself. And these are skills that I'm looking to build and continue for the rest of my life. But I want to put myself in a good position, in a good headspace for when that date comes that I do start a company or I do go on and start working on the things that will make or break me, I guess.
00:57:31.156 - 00:58:38.754, Speaker B: Yeah, I agree. What I did when I was younger, around 1819, is just build the habits, because eventually they translate into everything else. No matter what kind of career you take, as long as you have good habits, you're always going to find time to do what you want, even though it might not be as much as you want at the end, as long as you're doing something that you would want your future self to do, like, let's say an hour, for example, working on something, you can eventually build that up, that 1 hour to 2 hours, 3 hours, 4 hours, and eventually you get to the point where it's 16 hours a day or what do you really want? As long as you get into the flow state within those hours that you're given, which is kind of like the core. I think the flow state is very underrated. You can have 2 hours a day or 3 hours, but that's all you really need if you're doing intense, focused work. And that can be in any kind of thing. And even finding the time and kind of optimizing your life in a way where you can do this is very important as well.
00:58:38.754 - 00:58:42.580, Speaker B: But I'm super keen to see how your life kind of plays out.
00:58:42.950 - 00:58:44.082, Speaker A: Thanks, me too.
00:58:44.216 - 00:58:52.710, Speaker B: It's like looking back to my past self and it's very exciting. I can't wait to see how you progress.
00:58:53.450 - 00:58:54.534, Speaker A: Appreciate that.
00:58:54.652 - 00:59:03.674, Speaker B: Of course, man. But we are getting to an hour and I don't want to keep too much of your time. I want to thank you very much for coming on and sharing your life with me.
00:59:03.712 - 00:59:04.058, Speaker A: Right.
00:59:04.144 - 00:59:10.810, Speaker B: And I'm really excited to see how this progresses and we'll definitely have one in the future when it does progress.
00:59:11.230 - 00:59:15.840, Speaker A: I appreciate that. Yeah, man, I had a lot of fun today and learned a lot too. This is a great.
00:59:16.690 - 00:59:34.126, Speaker B: Yeah. And if anyone else wants to come on the podcast, please dm me at scrapingbits on Twitter. Or if you want to suggest someone, always do. You can also dm me that and I'll take a look into it. Otherwise, thank you so much, jet, for coming on and we'll catch you on the next one.
00:59:34.308 - 00:59:35.970, Speaker A: Yeah, see you soon, hopefully.
