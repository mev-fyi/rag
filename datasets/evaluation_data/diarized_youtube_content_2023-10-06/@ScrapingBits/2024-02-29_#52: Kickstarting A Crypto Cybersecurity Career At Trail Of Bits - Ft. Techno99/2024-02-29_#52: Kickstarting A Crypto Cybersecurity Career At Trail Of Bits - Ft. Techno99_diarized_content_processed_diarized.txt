00:00:00.330 - 00:00:15.726, Speaker A: The things that you can do are really cool. If you look at the cryptography research that's coming out. Zero knowledge stuff, just the sync proofs in general, even statement recursive proof research in cryptography like FHE, is fully homomorphic encryption. I'm just happy that blockchain space is fear heading a lot of innovation, especially in the zero knowledge space.
00:00:15.908 - 00:01:00.334, Speaker B: Scraping bits is brought to you by the following sponsors. MeV protocol. Maximize your eth staking value with me V exclusively on MeV, IO and composable execute any intent on any chain. Coming soon to Mantis app. That's Mantisap and fastline Labs, the only MeV and intent centric team that has a daily deodorant application rate of over 68%. Everyone, my name is the Garth, your host from scraping bits, and today I have a special guest from trail of bits, Techno Vision 99. How's it going, friend?
00:01:00.452 - 00:01:02.830, Speaker A: Thank you for having me. I'm super excited to be here.
00:01:02.900 - 00:01:09.630, Speaker B: Yeah, of course. Thank you so much for coming on as well. You should give a little intro of who you are and what you do, just to give some context.
00:01:09.790 - 00:01:21.800, Speaker A: Yeah, sure. Obviously. I'm technovision 99. I'm a security engineer at trail of bits on the blockchain team, which means I do audits. I also do some vulnerability research and cryptography research on the side.
00:01:22.490 - 00:01:29.654, Speaker B: Perfect. So how about we start off with how you got into trailer bits and how you started your journey until basically web3?
00:01:29.772 - 00:01:47.534, Speaker A: Yeah, sounds good. So I tell the story like ad nauseam to everyone I meet because I find it pretty funny. I was a university student. I actually didn't have a computer science background. I majored in math. I wanted to go for my phd in math because I spent time in university doing research. I heard of bitcoin, obviously, but I'm like, oh, I don't really know what that is.
00:01:47.534 - 00:02:28.906, Speaker A: Could be a scam, whatever. But it was in the back of my mind because we see all these wild price things. But I never considered I want to be like an auditor or, oh, I want to work in crypto, because my entire goal was just, I want to get a PhD in math. And so I was applying, and of course I chose the worst time to apply, which was Covid time, and I didn't get in anywhere, which was really sad because I spent years of my life trying to get in. And then they're like, yeah, because of budget cuts, we can't really take too many people. Next year had an existential crisis where I'm like, okay, what do I want to do with my life? Do I try again? And I just remember spending some time thinking about it. I remember actually going on this forum called the Grad cafe and just reading some posts there.
00:02:28.906 - 00:03:10.534, Speaker A: And then there was one guy who was like, yeah, this is my 10th year applying, and I finally got in. I got rejected for the past nine years. And I was like, do I really want to be like this? Is this what I want to do with my life? I figured, okay, I need to get a job doing something. What is something I enjoy? I don't want to be a math teacher. I realized I can't use my degree for a bunch, so I was interested in cybersecurity and stuff because my dad, he's a software engineer, but he always would talk about cryptography and how it's cool and just, like, how things work. So I started actually trying to just get web two certification, like, just for the OSCP. But then I remember this was when bitcoin crashed and everything, and I started looking into it a bit more because one of my professors in college, I didn't really like him.
00:03:10.534 - 00:03:38.782, Speaker A: So that's probably why I looked into it. But he was like, Warren Buffett says bitcoin is rat poison squared. So I was like, okay, well, why does he say that? And then you read the bitcoin white paper, you just learn more and more, and it's like, oh, wait, this is interesting. And then you go into ethereum. This is like right before defi Summer took off, and it's like, this is pretty cool. And then it just drew me in from the start because I guess I was pretty interested in what crypto stand for, like what you could do with it. Obviously, everyone just thinks it's like minting jpegs, but there are pretty cool use cases for it, the way things work, like how they behave.
00:03:38.782 - 00:04:02.802, Speaker A: So I just got sucked in. And then people were saying, if you want to learn, you go on Twitter. So I made a Twitter. And then the first thing I saw on Twitter was, there's this guy named ts eleven who was writing some weird assembly. I'm like, how the hell does this relate to the ethereum? Or whatever? So that's how I started getting into solidity. I found it really cool and really fun. I think this was like back in the optimizer meta where everyone was, I saved one gas by using is zero instead of gt.
00:04:02.802 - 00:04:34.018, Speaker A: And then it was pretty cool. It was just like a fun game. That's how I got into it, like crypto in general and solidity specifically, and just like blockchain. And then from there I was like, okay, this is interesting, but I'm not sure what I should do, how I should make a job of it. I didn't know if I wanted to be a dev or I wanted to be a researcher. So I remember I was just doing this thing called build space, because back then I'd never programmed anything. The most I did was like writing some mathematica, which is something that mathematicians use, generate graphs or just formulate data, so no programming experience.
00:04:34.018 - 00:05:20.046, Speaker A: So I did this thing called build space, which was like introducing how to develop web3 projects. And then I started doing Javascript stuff and I hated Javascript, so I'm like, okay, I do not want to be like a full stack dev because this language is terrible. So then I was like, the only thing I really enjoy is I like writing solidity, I like optimizing things. And then I figured this is actually like complete stroke of luck because at this point I graduated university, I had a degree, I had no job, I have no prospects, my parents are like, what is this kid going to do with his life when he's just going to be like 50 and still living with us? And I remember, I'm like, okay, I need to find a job. And the day I said that, I remember scrolling through the build space discord and they're like, there's this apprenticeship at trail of bits. And I clicked on it and I've heard of trail of bits. People like, oh, this is like this really cool audit firm, know a lot about program analysis and everything.
00:05:20.046 - 00:05:41.574, Speaker A: So I was like, this is what I want to do. I want to work there. So I kind of just did all the ctfs. I spent time researching vulnerabilities. And honestly, that period of my life was so much fun because I would just wake up and do ctfs or look at crypto, and it was just like so much information. I learned a lot during that time, managed to pass an interview, and then, wow, it's been like a year. But yeah, here I am since then.
00:05:41.612 - 00:05:46.618, Speaker B: Oh, wow. So you spent basically a year doing ttfs, going on Twitter, learning as much as possible.
00:05:46.784 - 00:06:12.446, Speaker A: It actually wasn't a year. I don't understand how I did this myself, but I graduated university in June of 2021, right then for like three, four months, I was wandering around, did nothing, was just down bad pretty much. And then I remember, I think it was in October or September, I found that post about trail of bits hiring apprentices. And then from September to December, I would just wake up and just look at crypto stuff. That's it. And it was, like, so much fun. It just felt like playing a game.
00:06:12.446 - 00:06:20.086, Speaker A: And I would just do that for, like, three, four months. And then I applied, I got an interview, and I passed February of 2022. I've been working here. Yeah.
00:06:20.108 - 00:06:26.630, Speaker B: So how was the preparation for the apprenticeship interview then? Was it pretty streamlined? Did you already know stuff, or did you panic?
00:06:27.130 - 00:06:52.202, Speaker A: I was so panicked because to me, the only thing I knew is, like, math, right? I spent time researching iterated function systems and dynamically defined candidates, and now I'm doing something completely different. I remember looking at Twitter and the people applying for this apprenticeship. They like, oh, I've been coding since I was, like, two years old. Yeah, I have a reference from Buddha himself. So I was just like, okay, I'm so scared. All I can do is just study everything. I did all the ctfs, they said I just looked at hack.
00:06:52.202 - 00:07:19.750, Speaker A: I remember every security resource or assembly resource or just, like, solidity footgun I could find. I was just reading through, and in the past, like, two years, something I've noticed there's a lot more resources. Back then, it was like, I think the only things I could really find were, like, the smart contract registry from consensus. I think there was, like, christophe's blog, Moody's blog. So, like, just reading those, trying to just absorb everything I could. And I guess, luckily for me, that was enough as an interview and showed that I was basically competent enough to succeed.
00:07:19.910 - 00:07:41.774, Speaker B: Yeah. Crazy. I'm surprised I didn't even do that, because I think I did two interviews with them. I think I passed one, but then I just fell off TLDR didn't get hired twice, but, yeah, man, that's super exciting, especially coming out of university. I'm sure you've learned, like, a terrific amount since then as well. How was the onboarding to that?
00:07:41.812 - 00:08:06.610, Speaker A: Oh, yeah. One thing, I have to give credit where credit is due. I think trailbits is a fantastic company because the apprenticeship was like, I mean, it threw you in. This is like the audit process. This is how we start. So not only did I learn a lot of how the big players do it, their process, I got to work with really talented people. I guess this is something maybe a lot of people don't realize, because on Twitter, you only see people who have a bajillion followers, but there are some people who just enjoy what they do, and they're really talented.
00:08:06.610 - 00:08:24.830, Speaker A: Just being around people who are like, they know a lot and they're really good. I remember on some audit, there was this random solidity footgun that I didn't even know, I didn't see anywhere. And someone was like, yeah, this is a bug. And I'm like, how do you know this? They're really talented. I love working there. I learned a lot. And I also learned something.
00:08:24.830 - 00:08:44.322, Speaker A: I guess that's underrated is a bit more on the soft skill side, dealing with clients, writing reports, kinds of things. Definitely, yeah. And I would say the apprenticeship was like a really great learning opportunity because I would consider myself a beginner. I still think I'm a beginner in some aspects, but that apprenticeship really solidified what I knew and I'd learned so much from it. I was just really happy that I got to go through that.
00:08:44.376 - 00:08:48.950, Speaker B: Yeah, learning from basically the best in the field in web two and web free is really quite an experience.
00:08:49.020 - 00:09:18.270, Speaker A: That's something else, because basically I went from knowing about esoteric math topics that no one cares about to only knowing about solidity vulnerabilities and then realizing, wait, oh, program analysis is like a huge field. I didn't know anything. And then people were talking about, this is how a fuzzer works. This is how static analysis works. Here we have static analysis tools, like there. Do you want a walkthrough of how it works? And I'm like, yeah, okay, sounds great. So you learn all these new things, and one thing I really do love is just learning about new things.
00:09:18.270 - 00:09:26.658, Speaker A: And so it was like a dream come true for me because I got to learn about auditing. I got to learn about all these interesting things I didn't even know existed. So I was a pretty happy guy. Yeah.
00:09:26.664 - 00:09:35.118, Speaker B: And I think the math background definitely is a massive advantage in cybersecurity as well, especially auditing in DeFi. Are you going to come across a lot of math?
00:09:35.214 - 00:10:15.230, Speaker A: Yeah, I guess the universe does have a sense of humor, because when I was applying, I'm like, I wasted my life learning these stupid math topics no one cares about. It definitely does make comprehending a lot of these. I guess if you audit defi protocols, you'll see some really complex formula for calculating the liquidation amount. Having a math background just makes it easier. And one thing that it really does, I guess one thing that I think is really cool is if you just do some numerical analysis classes in college, you kind of learn how the function looks, and then you can see, okay, there's going to be like edge cases here. And then sometimes there might be bugs in those edge cases. I wouldn't change a thing about how everything ended up because even though I didn't have a computer science background, having a math background definitely came in clutch in the end, which is super nice.
00:10:15.300 - 00:10:20.626, Speaker B: Yeah, it sounds like it all just fell into place, and it was like, the perfect scenario that could have happened, right?
00:10:20.728 - 00:10:24.386, Speaker A: Yeah, exactly. That's exactly how I feel. I'm really happy about it.
00:10:24.408 - 00:10:40.360, Speaker B: Seems like it. Yeah, I'm similar, minus the background in math, I took, like, a practical approach and was like, okay, what do I need? I just found interest in blockchain through investing, and then through investing, I want to get a better edge. So I learned to code, and then eventually I just fell down that rabbit hole instead.
00:10:40.730 - 00:11:04.590, Speaker A: Yeah, I think that's a lot of people's path, because the first thing I ever did in crypto, learning how to use my metamask, was, like, obviously gambling on shitcoins and losing everything. But then I wouldn't change a thing, because the way I view it, that was like an initial investment to get my career started, because then I'm like, oh, how does this exactly work? And the funny thing is, I could think recently I went back and looked at some of those projects, I'm like, why did I ever even touch this? This code is so bad.
00:11:04.660 - 00:11:15.602, Speaker B: Yeah, exactly. I think as an investor, you don't even think about the code, the underlying technology behind it. You just see the marketing, and that's what dictates your decision. Especially, like, hype. Hype is, like, the main thing.
00:11:15.736 - 00:11:35.926, Speaker A: Oh, yeah. I'm of the opinion. I think, like most engineers are, marketing kind of sucks. I understand why it's necessary, but to me, I would rather just evaluate a product on its own merit. But of course, that's not how modern day society functions. That's aside. But, yeah, marketing, everything is going to the moon, and then you see their code, and there's like, why is there reentrancy here? This is pretty basic, but it's literally.
00:11:35.958 - 00:11:37.900, Speaker B: Just the standard ESC 20.
00:11:38.510 - 00:11:39.162, Speaker A: Yeah.
00:11:39.296 - 00:11:43.706, Speaker B: Having a math background would definitely help in informal verification as well, wouldn't it?
00:11:43.808 - 00:12:20.022, Speaker A: Yeah. Actually, something that I also really like about my math background is to make computer science kind of easier to learn, because a lot of the abstract concepts I think people would struggle with. If you just think from a mathematical background doing math, it just helps you think abstractly or think in a certain way. For example, when I was looking more into type theory and stuff, it made a bit more sense. I feel like if I didn't have that background, it was a bit too abstract, and I'd be really confused. But when you understand the definition same with a lot of common compiler stuff, right? An ast, how do we represent a program, an IR, things like that. The more abstractly you can think you can piece things together pretty fast.
00:12:20.022 - 00:12:27.690, Speaker A: So I think that definitely gave me an edge. I wouldn't say I'm very knowledgeable about it, but I got up to speed a little bit quicker than the average person would.
00:12:27.760 - 00:12:41.040, Speaker B: Yeah, I would love to touch on IR as well. Intermediate representation so basically, before every kind of symbol execution or setting up for fuzzing or a symbol static analysis, you would basically put it into IR, correct?
00:12:41.410 - 00:13:20.342, Speaker A: It depends actually. For example, the most basic thing you can do is just when you compile something, you obviously go from high level language to a bytecode, and then they're typically in modern compilers that's just done through an intermediate representation, because it makes program analysis and optimization a lot easier. But if you really wanted to, you could just basically generate a syntax tree, walk through the syntax tree and do an analysis pass that's primitive. So there's multiple different flavors of representing your code, so you can do static analysis on it, I think. I'm obviously not an expert, but in the modern day I think most advanced compilers will just use an IR. Like solidity obviously has its own IR. In fact, Slither also has its own IR, because it makes program analysis a lot easier.
00:13:20.342 - 00:13:56.614, Speaker A: And if you look at something like the Cairo programming language which is used on Starknet, if you look at how it worked before, when the compiler was just compiling directly to assembly and bytecode, it was pretty primitive. But when you introduce an IR, you can do a lot more optimizations, you can enforce a lot of constraints. Again, as an example, in Cairo, right, when you compile down to this IR called Sierra IR, the Sierra IR basically has a type system that lets you enforce the constraints of the programming language you want. There are different flavors of representing a program using the intermediate representation is probably like the most common now, because it just allows for easier optimization and analysis passes than just compiling directly. If I could.
00:13:56.652 - 00:14:00.038, Speaker B: Sure. And then through that, then you can do your program analysis, basically.
00:14:00.204 - 00:14:22.950, Speaker A: Yeah. It's typically common that you can leverage the IR to build program analysis because you can obviously just walk across the ast and do analysis. But over the IR, I think it's called. Typically the IR is on using something called SSA, which is static single assignment. It makes every variable immutable, and doing that really lets you have more fine grained analysis techniques you can do for complicated patterns.
00:14:23.050 - 00:14:50.040, Speaker B: Yeah, so SSA is basically creating a new value for each basically step within the bytecode. So let's say you have variable AB and then you have variable C, which is add would be C, so ABC. And then I guess if you want to add something else, let's say multiply by this, then that would be like another step in the Alphabet. And it just keeps going, basically.
00:14:50.650 - 00:14:51.640, Speaker A: Yeah, exactly.
00:14:52.010 - 00:15:02.118, Speaker B: I remember someone told me about that in the reverse engineering group chat. I tried it, but it didn't really help me when I was doing my kind of stuff, my fuzzing, I just did the straight read from bytecode.
00:15:02.214 - 00:15:27.094, Speaker A: For fuzzing, it's a bit different because static analysis, you don't actually run the program. Right. So having some sort of representation would make it a lot easier. I think there's different kinds of fuzzing, obviously, right, for fuzzing, since it's dynamic, you can actually run the source code. You don't really need intermediate representation unless you're, I'm not an expert on this obviously, but I'm sure someone from my company will help. But if you are doing, I think, gray box or black box fuzzing, maybe having an IR would be better. But.
00:15:27.094 - 00:15:28.342, Speaker A: Yeah, I'm not too sure about that.
00:15:28.396 - 00:16:01.920, Speaker B: It gets a bit complicated when you're using embedded or embedded dynamic, basically variables. So for example, you're using call data, then using that call data value for the next call data offset. Like when you start nesting, it just becomes so much more complex and very hard to predetermine without symbolic execution, I think. Or just like fuzzing in general. But I would like to ask, how was the kind of auditing process different in a big company compared to something like a public?
00:16:03.890 - 00:16:44.782, Speaker A: Like, I guess this is a big point of contention because everyone is talking about audits, contests versus firms, and then you have everyone on Twitter just saying, oh, our firm, just hire people from just do code arena or something. And I think obviously it makes sense because code arena, there's a hundred people looking at your code, and as security engineer, you have just the people at the company. But one thing I think that is a bit different with our auditing process in specific is we use our tools and we give higher level recommendations to the clients. Because I guess I used to do some contests sometimes, but to that it was just, oh, I'm just going to find a bug. Here it is, submit my report and then I'm done. You have a deeper relationship with the client. Typically you're like, oh, this is something that could go wrong.
00:16:44.782 - 00:17:06.526, Speaker A: Do you want to consider redesigning it in this way? Because it would be more secure or downstream. There could be these economic consequences. It's not like there are vulnerabilities per se, but just helping people think in a more security focused way. Because when you're a developer, I feel like you just care about making the product work. Right. From our perspective, we're just trying to investigate every way it can go wrong. Not even, oh, this is a critical loss of funds.
00:17:06.526 - 00:17:39.662, Speaker A: Right. It's just, would people be incentivized economically to behave in this way? And could this lead to a certain situation or designing something like this could be a bit error prone down the line. We would recommend against that. So it's like having that sort of deeper relationship with a client. And another thing I think we do is, I guess we use our tools for longer audits. We'll write dedicated, buzzing harnesses for them and we'll help them set it up on their end. They can learn how should we keep testing our code and refactoring? I think the value proposition is a little bit different with an audit contest versus going to a firm, and especially a firm like ours, that has experience with program analysis and stuff.
00:17:39.716 - 00:18:02.790, Speaker B: I think there's two big trade offs with going with a firm and an established company. But it definitely seems like you're paying a premium for basically a firm. But having said what you said, it definitely seems like a good investment as well. You're basically giving them architecture advice for long term success instead of just short term. Okay, does this work? It works. All right. Release it.
00:18:02.790 - 00:18:05.234, Speaker B: It's more of improving.
00:18:05.362 - 00:18:41.458, Speaker A: I think that's kind of a big thing because the company's motto is, we don't fix bugs, we fix software. Right. Our goal isn't just to be like, you have these bugs. It's like, how can we help you getting better development practices or testing practices? These kinds of bugs don't even happen in the first place because just like throwing, not to throw shade, but there have been some projects that just got a bunch of audits, and the audit reports is lit up every time. And then they're just like, okay, we'll redesign and get another audit. But then there are really subtle bugs that occur, and it's not like everyone can find everything all the time. So we just think that having people have just secured development flow is a better idea.
00:18:41.458 - 00:18:51.250, Speaker A: Like long term, obviously you still need an audit, you still need other people to look at your code. But, yeah, we would like just to raise the bar of security and secure development practices.
00:18:51.330 - 00:19:16.302, Speaker B: And it doesn't hinder the amount of clients you attract as well, because if this was really something that was detrimental to your company's success, then it wouldn't be done. But it's not. It's actually doing the opposite. It would bring a lot more people to come in because it's not actually eliminating you as a service. You're still helping people improve their code and securing it at the same time. So it's really like 1 st and two bird situation.
00:19:16.436 - 00:19:16.926, Speaker A: Exactly.
00:19:17.028 - 00:19:27.358, Speaker B: Instead of the opposite. Even though you're helping them basically eradicate you, it's still something they want and they keep coming back. Otherwise it wouldn't be working, you wouldn't be up.
00:19:27.444 - 00:19:28.722, Speaker A: That's a good way to put it.
00:19:28.776 - 00:19:37.826, Speaker B: And I think it's also important you touched on this before the podcast, that you're given time to basically learn and choose what you want to do for a period of time. Elaborate on that for a bit.
00:19:37.928 - 00:20:01.654, Speaker A: Oh, yeah, definitely. Because this is probably one of the parts of the company I like the most. I mean, in between audits, we typically have some time called irad, which is internal research and development. So you can go, and I'm not going to say you can do whatever you want, because I'm not just going to slack off with a beer in my hands during Irad. I have to learn something. But you can just go in any direction you please. Because the world of blockchain is super big, right? There's different architectures for nodes.
00:20:01.654 - 00:20:29.426, Speaker A: There's advanced cryptography being used. Obviously, we develop tools on the side, so you can just. Oh, okay. I guess this week on irad, I want to contribute to this tool, so help make some prs here or there is something interesting in this audit that I want to give a presentation on so everyone will know how it works and so we can do that. And it's just like really free form and lets me explore my own interests. I've been doing a lot of cryptography research because I find zero knowledge proofs really interesting. And so we actually have a crypto team, too.
00:20:29.426 - 00:20:33.574, Speaker A: And during my irad, if I want to shadow a crypto audit, I would be able to do that.
00:20:33.612 - 00:20:55.466, Speaker B: Yeah, it sounds incredible. Like a dream company sounds like. Because if someone's just working their whole life and they don't really have a lot of time outside of work to basically study what they want, and they're going to burn out or get incredibly demotivated. So I think this is a terrific way to expand the employee skills and allow them to collaborate even further and learn from other people, not even in their kind of section or sector.
00:20:55.578 - 00:21:15.134, Speaker A: Yeah, that's something. I really plus 100 to that because I don't think I'll ever get burnt out. It's been a year and I still want to keep working, keep learning, because I can go in any direction I please. After an audit, let's say, okay, I've been looking at b code for a month. I want to investigate Hyo or I want to investigate how Cosmos works. Okay, I can go do that. It's just nice and just chilling.
00:21:15.134 - 00:21:18.498, Speaker A: Everyone at my company is super great. I can only really say positive things.
00:21:18.584 - 00:21:24.582, Speaker B: Yeah, it sounds like it. And talking about cryptography, how did you get into that and what are you doing in that sense?
00:21:24.716 - 00:21:42.442, Speaker A: Yeah. I'm going to be glad to share this because it's been super fun. So obviously I have a math background. One thing, I guess I said I wouldn't change anything. One thing I would change is I'd probably go more into the cryptography side because I did more on the algebraic side, particularly with regards to complex analysis and stuff. So I've had a math background. The cryptography was interesting.
00:21:42.442 - 00:21:55.166, Speaker A: And then cryptography kind of underpinned everything. We're communicating through TLS, right. So there's encryption there. When you upload something, it's encrypted. Your credit card is encrypted. It's figuring out how these works. And then in blockchain specifically, you hear like, ZK, everything.
00:21:55.166 - 00:22:08.402, Speaker A: What is ZK figuring out? These things are just really cool. And again, since I have some spare time, I can look into that. And we have a crypto team, so I always ask them questions. Probably too many questions. I get to just learn about those things on the side, too.
00:22:08.456 - 00:22:11.650, Speaker B: You ever gone into ZK, like deep dive?
00:22:11.730 - 00:22:34.638, Speaker A: Oh, yeah. I wouldn't say I'm an expert or anything. I've definitely been using some of my time to research, I guess, the modern IBC systems, like Blanca's arithmetization, things like that. The new, latest and greatest. So it gets pretty complicated, I think. I think I'm still like the noob because Nova and all those statement folding schemes have been broken and I was trying to read it. I'm like, okay, why exactly? I'll probably have to read it like ten more times to understand.
00:22:34.638 - 00:22:56.142, Speaker A: But yeah, it's super interesting. I guess I've just been looking into this traditional polynomial commitment schemes, Peterson commitments like IPA, like KZG, whatever. And then I guess Blanc or like the new proving systems. There have been so many proving systems, hard to keep track of all of them. But I think I understand how turboplanc ultraplonk works. Custom gates and things like that. Just understand ZKe EVM architecture.
00:22:56.142 - 00:23:00.998, Speaker A: Merrily, not super well, but it's definitely something interesting to keep looking into.
00:23:01.084 - 00:23:10.002, Speaker B: Yeah, it's such a complex topic as well, the whole cryptography field. And then I think the only thing that really emerges in blockchain is just ZK. And that's what's pilling everyone into cryptography.
00:23:10.146 - 00:23:42.850, Speaker A: Maybe. I guess when I heard of it, I'm like, oh, that's pretty cool. You can prove ZK everything. We're going to prove something without revealing it. And then naturally, you're like, okay, but how, though? And then you can dive through the math and you look at it, and then you're like, oh, wow, this is super cool. It does get technical, but I'm really happy I have a math background because I feel like because I spent time at school studying things like pairings or some algebraic geometry concepts, it's not super hard to dive into. Whereas if I didn't, I'd have to spend a lot of time getting up to speed on the math first.
00:23:42.920 - 00:23:51.670, Speaker B: Yeah, let's say someone did want to get into ZK from scratch and didn't have any experience in math or cryptography. What kind of pathway do you think they should take?
00:23:51.820 - 00:24:19.114, Speaker A: The great thing is that I've recently noticed is I don't think you don't need to have a degree in math. I think this broadly applies to anything because we have access to the Internet. Right. All the education is there. I think I would just recommend just picking up a basic cryptography course, like crypto. One on coursera is really good. I went through that, and then if there's any concepts you don't understand, but you can just look it up, or you can just find a number theory, like prime.
00:24:19.114 - 00:24:42.950, Speaker A: There's like a whole bunch of prime where you don't need to be an expert in group theory or group actions, or know, like the silo theorems or whatever. You just need to know, this is a group. This is how it behaves. Okay, how do we use them in cryptography? This is like a pairing. This is an elliptic curve, right? You don't need to be an expert in the exact nitty gritty details on actual math, but you just need a broad idea, and that can just be supplemented just through Google or various primers that people put out.
00:24:43.020 - 00:24:50.630, Speaker B: Got you. Yeah. I think the cryptography scene is definitely an interesting thing to witness, even though I don't understand it fully, I think it's definitely.
00:24:50.700 - 00:24:52.086, Speaker A: Neither do I, brother.
00:24:52.278 - 00:25:02.006, Speaker B: Yeah, it's quite some time to actually appreciate the underlying tech and what people are doing with it, but it's definitely the future in terms of private data being publicly.
00:25:02.198 - 00:25:31.542, Speaker A: The things that you can do are really cool, especially if you look at the ways, like, the cryptography research that's coming out with just zero knowledge stuff, or just the sync proofs in general, and then even statement, like, recursive proofs. And then also, I think this other research in cryptography, like FHE, is super fully homomorphic encryption, is super interesting. And then, yeah, I guess cryptography is really cool, and there's a lot of really cool things you can do with it. I'm just happy that the blockchain space is spearheading a lot of innovation, especially in physio knowledge space.
00:25:31.596 - 00:25:51.898, Speaker B: Yeah, blockchain is quite fascinating because it hits a lot of different fields. In one kind of area, you got basically the business side, where you're building a company. You can do all that normal stuff, but then you're also hitting economics. How do you manage basically, money? How do you make it worth something inherently worth something? You learn math. You learn so many things, man.
00:25:51.984 - 00:26:01.642, Speaker A: Yeah, it's really, like, interdisciplinary. That's something that I also found, like, super cool. Today's, like, computer science. There's programming. There's game theory. There's economics. There's cryptography.
00:26:01.642 - 00:26:28.114, Speaker A: It just touched on so many different areas. One thing that's really cool is people who specialize in all sorts of areas. There's, like, a bunch of economics professors, I think they claim to be economics professors on Twitter at least, who analyze defi protocols and ask specific, interesting questions and then try to formulate it economically. There's people who obviously work on the coding and development side. It's just so fascinating because there's so many different things. I wish I had enough time to learn it all, but that would probably take several lifetimes.
00:26:28.162 - 00:26:45.102, Speaker B: Oh, yeah, definitely. That's why I got to go into your niches. And I think even just exploring something you're doing now, you can branch off into multiple things after you've learned something about that. Or maybe it's just from talking to someone about that certain topic and they mention something, you're like, oh, this is interesting. Let's kind of dive into this in my spare time, then.
00:26:45.156 - 00:27:18.214, Speaker A: It's definitely fun to just go down rabbit holes, but it's also really easy to spread yourself too thin, and you don't have much in depth knowledge into something, but you just know a bunch of out random things. So it's like a trade off. And you need to kind of balance it to make sure you're not just like, oh, I know about this. I don't really understand because especially as a security researcher, the way I view it is your job is to be able to understand these things to an extreme level. So just having a surface level knowledge in a lot of things doesn't really help you. So sometimes you just have to be like, okay, I don't really care about this. I'm not an expert in nodes or anything.
00:27:18.214 - 00:27:36.238, Speaker A: Obviously I know the basics, right. But for example, in really detailed, I don't know the depth code in detail. I understand basics of how it works, but if you ask me something in specifics, I won't know how nodes should be designed. Again, have the basic idea, cosmos kind of know how it works, the very basics. Because I don't have the time to actually sit there and look into everything.
00:27:36.404 - 00:28:16.858, Speaker B: Yeah, you got to find something that you're really passionate about, something that interests you because that's how you stay consistent and eventually get to the master level or get to a level where you're quite comprehensive. You comprehend the field in a very deep way. And I think from that you're able to innovate and identify what's missing in the area. And then that's when it gets interesting in my opinion. Sure, learning and the journey, getting to that kind of state is also really fun. But if you don't find interest in that journey, then the end game is just going to get harder and you're not going to enjoy it because that's when you have no resources and you have to basically think of new ways and new primitives to invent. You got to pave the way for the future.
00:28:17.024 - 00:28:37.202, Speaker A: Yeah, I guess it does relate to automating because I guess when I started out, you spend your time reading other people's reports and oh, okay, that makes sense. But having to figure it out yourself is a whole nother ballgame. Could this be problematic? I don't know. It's not like pattern matching. Right. You have to think differently. I do think it's like after a certain point there's no guide on how to be really good.
00:28:37.202 - 00:28:38.994, Speaker A: You just have to discover how you do it yourself.
00:28:39.112 - 00:28:57.830, Speaker B: Yeah, exactly. Or maybe talk to someone that is really good and see how they progressed over their lifetime or their career. I think that's also a very great way, but obviously that's also very hard to do because you have to grab a hold of them and then you have to try and make questions to extract information in a meaningful way.
00:28:57.980 - 00:29:14.602, Speaker A: Yeah, that's definitely true. But one thing I will say that I really like about, I guess just the blockchain space in general is pretty open. You find someone's Twitter, you dm them. Sure, they'll be busy. In my experience, most people, they reply, it's not like some elite club or anything. Oh, I'm curious about this. Yeah, sure, I can help you explain.
00:29:14.602 - 00:29:18.590, Speaker A: I have some time. It's just very open and people are very receptive, just like helping each other out.
00:29:18.660 - 00:29:46.418, Speaker B: Yeah, you can just dm a founder or like a really high end dev on Twitter and they'll just respond. Most times they would instead of just ignoring you. And if they are ignoring you, they're probably just like deep focused learning or working something around that. Or they just might not see it because maybe they have a bunch of people. For example, today I just retweeted stuff on a symbol execution. He's a lead security researcher at Spearbit. He's a formal verification lead at Ethereum foundation.
00:29:46.418 - 00:30:04.110, Speaker B: And yeah, just from that I entered his dms. Now we're following each other. It's really quite easy and surprising as well. Yeah, it wouldn't be like this in basically web two where you have a really high up, you think really high up in like a corporate skyrise tower and you're like, how the fuck am I going to message them? How am I going to get in contact?
00:30:04.180 - 00:30:09.550, Speaker A: Yeah, no one is messaging the top Amazon developer for, I guess, tips on microservices or whatever.
00:30:09.620 - 00:30:24.862, Speaker B: Yeah, exactly. And then in Twitter you can just message anyone. They'll be like, yep, here you go. Let me help you out. Let's jump on the call. But you've also done a fair bit of auditing as well, right? So I guess what do you think makes trailer bit so good at auditing and what's established their brand?
00:30:24.926 - 00:30:48.918, Speaker A: In a way, I think we're obviously pretty good auditors in our own right. Sometimes we miss bugs, things happen. But I think in General, we just have people who have traditional experience in web two. And so carrying that over, we can leverage those people. But as I said before, I think our main selling point is honestly just like our tools and secure development practices. Because as you can see on the Internet, there are a lot of really talented auditors out there. And I think we're also some of them.
00:30:48.918 - 00:31:13.186, Speaker A: I know of my coworkers who don't have bitter or anything, they just hunker down and work. But they're like, seriously, some of the smartest people I've ever met and it's just amazing how much they know. So I think we just have a lot of industry experience and security in general and we kind of leverage that. I wouldn't say there's some secret auditing formula or something that we have. We have a lot of experience, we leverage it and we're unique in that. We build tools and we help people have more secure development practices, if that makes sense.
00:31:13.208 - 00:31:47.274, Speaker B: Yeah, for sure. Definitely being around people that are smarter than you and have expertise in different fields, you can all combine and share experience and knowledge and kind of boost everybody to get people up to a higher level. So it definitely makes sense that you curate a bunch of knowledge from just sharing within the team. But I also think another interesting thing is your tools. You don't actually close source them, you open source them. Which is interesting because you would think that a company would basically close source all their ip and use it for a financial gain. If someone wants to have an order, they can get like a special deal where they use all your in house tools.
00:31:47.274 - 00:31:50.218, Speaker B: But it's not the case with trailer bits is it's all open source.
00:31:50.314 - 00:32:20.674, Speaker A: That's also something I really like is slither just has. I think it's just like an AGPL license, right? So anyone can use it, just build on top of it, because I genuinely think somebody just wants to help the ecosystem gets better, right? Because we obviously could have made buzzing or anything as a SaaS, but it's better if your average developer just learns how to use echidna and they can write their own fuz harnesses. That way the bar for security just goes up higher and the ecosystem is just better as a whole. So that's something I really do admire from the people at my company for just making some of our tools open source.
00:32:20.722 - 00:32:40.222, Speaker B: And I think that also gives a lot of exposure and a lot of developers having eyes on these tools to make them even better. And that's also another way of onboarding good talent as well. Through open source contributions you can see who's good, who's not, who's making a lot of commitments. Then you're like, okay, this person is contributing a lot, let's try and get in touch with them. They can do it for us.
00:32:40.276 - 00:33:08.162, Speaker A: Actually, a lot of people who are hired on the blockchain team, I guess they just started by making a lot of contributions to slither and then from there you talk to them and you're like oh wow, these people are really intelligent and another thing that I really like about open source is there are a lot of people outside the company who still contribute to slither, too. So it makes it really nice just for everyone to kind of just help build a tool that everyone can use. And it's just super awesome because the industry goes better, our tool gets better boundary as well.
00:33:08.236 - 00:33:35.370, Speaker B: It's such a staple in blockchain development and basically the team just poaches top contributors to reef Forge, all that kind of stuff. So it is really like a great tool to get your great gateway, to get your name out there and kickstart your career, or even just switch to a more experienced team, something that's more advanced, because Sliver is also like a staple in security as well. It's always referenced whenever you speak about web free security tooling.
00:33:35.530 - 00:34:18.782, Speaker A: Yeah. And that's another thing I'd like to touch on, is I feel like especially in web3, or just maybe, I'm not sure how it is in computer science in general, but like web3 specifically, you don't need a degree or like a resume or anything. It's like you make a pr that shows that you know what you're doing. Right. In my opinion, it feels more like merit based than, oh, what are your qualifications? Did you sleep through all your classes, then somehow ace the test because you copied off someone and then you have a degree? I did go through college and everything. I'm not going to say it's completely useless. I do think in the modern day, especially in our field, if you want to learn something, you have all the resources on the Internet, which is really great, and you can just start contributing and then eventually you'll learn and learn and then you'll be picked up by someone or you'll just gain a lot of experience that way.
00:34:18.782 - 00:34:24.978, Speaker A: It's not like chemistry, right. There's no equipment cost. If you have an Internet connection in the laptop, you should be more or less fine.
00:34:25.064 - 00:34:37.300, Speaker B: Yeah, exactly. You don't need specific formulas and learning all these equations to basically do something. Don't have to get them correct every single time for it to work. You basically just trial and error in this field.
00:34:38.470 - 00:34:44.150, Speaker A: Yeah. And through trial, you learn pretty rapidly because of that, I think you learn what works and what doesn't really fast.
00:34:44.220 - 00:35:11.278, Speaker B: Yeah. And when you do it, practically, you make connections, much more meaningful connections than just reading some words on a textbook. Let's say you read an article online in something related to, let's say, form of verification, then you want to implement it, then you're going to make that connection much quicker than if you're just doing like a test, like a quiz and reading a theory book. And it's something that you're also very passionate about as well because you wouldn't be learning it if you didn't want to pursue it. Maybe there is some other cases. If you're in a job and you.
00:35:11.284 - 00:35:29.078, Speaker A: Have to learn it, that's another thing, too. I feel like everyone who works, they just got in this space because they genuinely enjoy it. Right? Sure. Some people are like, I just want a lot of money, or whatever. Everyone who just makes open source contributions, you can tell they actually, actually like what they're doing, right? No one is just going to contribute in their free time because they have to.
00:35:29.164 - 00:35:53.478, Speaker B: Yeah, it's more like a passion, like a burning desire. Oh, this is super interesting. Let me see what I can do. Let me see how I can help. Basically elevate this tool that I find super cool to the next level and be like a core, basically reason why it's getting there. And that, yeah, it establishes your name, just like how public contests show your skills through reports and statistics. It's the same with open source contributions.
00:35:53.478 - 00:36:10.994, Speaker B: It is like a global leaderboard in a way, and the teams that host it are looking at that leaderboard. And even other teams, if they want to poach someone that's working on the foundry thing, they're like, oh, I see you have a lot of knowledge in this. You want to come slide in and work with us on the auditing side. How do you guys write reports that are different to public contests as well?
00:36:11.112 - 00:37:01.582, Speaker A: This is another thing, I guess, that I should probably touch on because the main deliverable, obviously, is like the final report, right? And if you do a contest, you have a poc, like, you write it up, you write, this is the issue check. You give like a brief two word description. And then a lot of our reports, especially like the public facing ones, is you have to figure out how to word it correctly. Are you conveying things properly? You have to give good examples, you have to give them recommendations for short term and long term things, and you have to figure out when it would be exploited. I think the report writing is a big part of how we're different, because obviously, unlike c four or Sherlock, you don't have to write an in detail report. And then another thing is, when it comes to writing a report, is since other people are going to see it as the main deliverable, you have to make sure the grammar is correct, make sure the punctuation is correct, and make sure, everything sounds well, flow smoothly, explains the problem. And yeah, I guess report writing is something that I think is pretty different.
00:37:01.582 - 00:37:19.254, Speaker A: It's almost like a skill in itself because you can write, oh, I understand stand what the issue is. Can you explain the issue to someone? Because the person who reads the report, it's not even be like the developers or anything. It might be like the CEO or something. He knows what solidity is, but he doesn't understand. Can you convey the issue to him? It does take some skill to explain yourself eloquently and do that.
00:37:19.292 - 00:37:34.058, Speaker B: Yeah, convey the issue in a concise and detailed way so where someone that's not even a developer can understand because that's going to be more often not the case. It's usually the higher ups, not the developers that are making all these deals and trying to fix their code.
00:37:34.144 - 00:37:44.862, Speaker A: Yeah, because the developers, they wrote the code base. If you explain something, most of them are like, they'll understand what you're talking about unless it's super complicated. Can you convey the same thing to someone who they barely understand how the code works?
00:37:44.916 - 00:38:15.386, Speaker B: Yeah, and then that's who you're trying to retain because they have basically all the connections to these developers and they'll more often than not have more work for you and you want to establish these connections as well so you can grow your network, et cetera, key people on retainer, all that kind of stuff. So I guess if you were to prepare, getting back, getting into trailer bits again, what do you think you would do next time? I know that you got it on the first try, but let's say, was there anything that you saw that you weren't really prepared for? Were you kind of like overall, I.
00:38:15.408 - 00:38:43.042, Speaker A: Guess one thing I would do, I guess if I had to do it over again is I would probably just get my feet wet more with contests because I think that's a much faster learning opportunity. I didn't do many contests because I was just like, oh dude, these people are making money. There's no way I'm good enough for that yet. I did think you just get your feet wet in them. Another thing I would recommend is contributing to our tools, seeing how they works, and just understanding program analysis a bit more. Because when you're hired, you're not just there to audit all the time and find bugs. Right.
00:38:43.042 - 00:39:00.070, Speaker A: You also have to learn a bit more about program analysis and how to contribute to our tools, how to make our tools better. Yeah. Besides that, I would just recommend keeping up to date with the latest hacks, like understanding the quirks of the evm, how it works. If you do those three things, then you're pretty good. Yeah, we'll definitely want to be in touch with you.
00:39:00.140 - 00:39:16.298, Speaker B: Yeah, for sure. And speaking on your experience in trailer bits, if you weren't a part of trailer bits and you wanted to learn all of the stuff you've learned now, what do you think is the strategy to touch on all of this stuff and go as deep as you have in trailer bits without the mentorship?
00:39:16.394 - 00:39:51.266, Speaker A: That's a good question. Actually, I've probably been helped more times than I can count by the people at my company because they're all super nice and friendly and really helpful. But I think if I wanted to get up to speed, the nice thing is there's a lot of online resources for everything. It's not like there's just some internal magic book that we have that explains everything. There's a lot of resources online. In terms of getting up to speed on all my knowledge, I would just go through all the ctfs again, then just read past audit reports from everyone, see what kind of issues do you code arena? The standard advice that's given to everyone because I think that generally will take you like 80% to 90% of the way. And then I would just go through GitHub.
00:39:51.266 - 00:40:21.550, Speaker A: Go on Slither echidna kind of understand a bit of how they work. Echidna is written in Haskell, so it might be a bit more difficult, but Slither is in python, right. So you'd look through it, understand how it works and then just try to write your own detector, see if you can do that. Because we actually have a lot of open source contributions for detectors. So I would just get my feet wet, just go and try do all the ctfs. In terms of program analysis, I think it's a bit more tricky because I obviously have leading experts in the world who I'll just be like, I don't get this, explain it to me, please. And they'll be like yeah, of course.
00:40:21.550 - 00:40:40.742, Speaker A: I think it just take more time. But you can go through some books. I'm pretty sure there's open source books of static analysis. There's some courses online for compiler theories. If you want to learn a bit more about how compilers work, the different optimizations they do, or Lexus parse, et cetera, I think you can learn online. I'm just really grateful my learning was like sped up because I have all these great people around. Yeah.
00:40:40.796 - 00:40:43.866, Speaker B: Have you learned much about symbol execution at all?
00:40:43.968 - 00:41:12.386, Speaker A: A bit, I guess. On audits formal verification, like symbolic execution, is pretty cumbersome because of the state explosions. We don't really use it that much. I remember, I think it was, I'm not sure who said this, but might have been like someone from runtime verification, which specializes in formal verification. But to do formal verification, it should take around nine times the length of time it took for you to develop something on a four week audit. It's like ridiculous to assume that we can use solvers and stuff like that, or generate constraints and things like that. But yeah, I am a bit familiar with it.
00:41:12.386 - 00:41:20.086, Speaker A: I wouldn't say I'm very knowledgeable because I always compare myself to people at my company who are like world class experts. Yeah, I wouldn't say I know that much.
00:41:20.188 - 00:41:41.734, Speaker B: Yeah, I think you're definitely the perfect environment to basically accelerate your career as fast as humanly possible. Right? You're around world class experts, you're doing kind of everything that's relating to cybersecurity. Even got your interests of cryptography. Yeah, it just sounds like the perfect world. I wonder if you build any tools from scratch there as well? Or is it just contribute to what's already existing?
00:41:41.862 - 00:42:06.242, Speaker A: We definitely are building some things from scratch. I can't say too much because obviously we're just building them from scratch. But yeah, it's not like we only modify our existing tools. We're definitely looking for, I guess, making new stuff, and that's really cool because you get to work with a lot of different people from the company, like different divisions in building these things. So you get to see how a lot more experienced people would do things and yeah, it's super cool.
00:42:06.296 - 00:42:28.954, Speaker B: Yeah, it'd be very interesting to see how they approached the quote unquote startup. Each one of them could be considered a startup as well. You turn them into a SaaS or something. So yeah, it'd be very interesting to see their design patterns and how they basically build an architecture from scratch. I think it's very valuable to see that from world class developers compared to just going at it by yourself until it works, hitting a roadblock, then going again.
00:42:29.072 - 00:42:56.514, Speaker A: Yeah, that's something else. If I had to code everything by myself, I would still just be writing really shitty Javascript programs. But I have all these people around me. I think I've grown a lot better. I've just become neats and bows better at coding because I started with no experience around almost a year and a half ago, and now I would say I'm pretty comfortable writing code in almost any programming language. Okay. Not like Haskell, or like Erlang, or functional stuff in common programming languages, Roscoe, like typescript, whatever.
00:42:56.552 - 00:43:02.086, Speaker B: Yeah, I was like, damn, Haskell, this guy's a master. Super interesting. Is there anything you want to talk about as well?
00:43:02.188 - 00:43:23.750, Speaker A: That's a great question, dude. Just interested in a whole bunch of stuff, doing cool things. I think in terms of our audits, we audit a lot more general stuff. So we have expertise in different areas, like in Cutterina, Sherlock is just like strictly like solidity stuff, right? More or less. But we do node audits, all chain audits. So we kind of have a lot of different experience in a lot of things. So, yeah, it's not just like we know only solidity.
00:43:23.750 - 00:43:25.162, Speaker A: We do all sorts of audits.
00:43:25.226 - 00:43:26.682, Speaker B: Do you do bytecode audits?
00:43:26.826 - 00:43:40.290, Speaker A: Well, we've done projects that are pretty much written in assembly, pure assembly. We have familiarity with that. We understand the EVM really well, because as I said before, slither has its own IR. Right. To build something like that, you do need to understand how solidity works at a very fine.
00:43:40.440 - 00:43:53.506, Speaker B: Yeah, yeah, I think bytecode audits are very interesting. I recently started that and it is quite fun. The surface level isn't as big, but it's quite funny how simple some attack vectors occur.
00:43:53.618 - 00:44:24.382, Speaker A: Yeah, Yule is notorious for just being like, having so many footguns. We definitely don't recommend people using things in assembly all the time, because it's really easy to shoot yourself in the foot if you don't know what you're doing. And even experienced people, they miss a return data size check or something, and then it just screws up everything. Or they don't cle. I think solidity has a lot of quirk, especially when you go down to the assembly level. Like, for example, in solidity, everything is just like a two b six bit word, right? Even if you do operations on things that aren't 256 bits, the dirty bits aren't cleaned. You have to clean them yourself.
00:44:24.382 - 00:44:39.954, Speaker A: There's just so many more things you have to know. You also have to do like contract existence check, because that high level solidity will take care of that for you. There's just like going down to the low level, you need to know what you're doing very well. And there's a lot of clickends, so we'd recommend against that. Unless you really need the gas savings.
00:44:40.002 - 00:45:00.346, Speaker B: Yeah, for sure. It gets quite complex. You have to basically manage the whole state, basically memory and stack all in your mind. And just like one opcode can completely ruin the whole sequence and screw everything. Up. And I think the tooling isn't actually that good either for that kind of stuff as well, so it becomes even harder. But yeah, man, I thoroughly enjoyed this conversation and hopefully you have as well.
00:45:00.346 - 00:45:05.322, Speaker B: I think this was your first kind of like, public speaking thing you've done.
00:45:05.456 - 00:45:06.942, Speaker A: Yeah, I really enjoyed this.
00:45:06.996 - 00:45:17.794, Speaker B: Oh, man. Yeah, so did I. I'm super thankful you came on, and I'm sure a lot of people would definitely get a lot of insight from this. And even you looking back at this after some time in your career, you'll be like, damn, I really come a long way.
00:45:17.912 - 00:45:27.874, Speaker A: I'll probably just cringe at my voice because every time I hear my voice on a recording, it makes my ears bleed. But yeah, I'll definitely. It should be interesting to look at this a couple of months later down the line.
00:45:27.912 - 00:45:48.966, Speaker B: Yeah, for sure. Thanks so much for coming on. And if anyone in the audience wants to recommend someone to come on, just dm me on Twitter at the gachi or at scrapingbits or give me an email at scrapingbits@gmail.com and we'll look into it. But other than that, thank you so much, technovision, for coming on and I hope you have a lovely day.
00:45:49.068 - 00:45:50.700, Speaker A: Yeah, sounds good. Thank you for having me.
