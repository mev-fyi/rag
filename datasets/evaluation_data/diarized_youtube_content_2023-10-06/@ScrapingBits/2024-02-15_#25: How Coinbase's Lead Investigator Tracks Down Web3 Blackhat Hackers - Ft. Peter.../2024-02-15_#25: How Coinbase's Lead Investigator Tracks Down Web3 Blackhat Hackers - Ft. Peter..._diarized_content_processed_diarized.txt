00:00:00.250 - 00:00:34.630, Speaker A: There's only that many ways you can transfer tokens or e. But then everything else says a lot about you as a programmer. What are your preferences? What languages you use? What patterns do you use? Do you prefer use what storage samples use, what protocols you use for swapping assets? How do you like to do your flashbots? What parameters? Any unique thing that you do is a signature of who you are, what techniques you use as an attacker, and that's fascinating to read and document.
00:00:35.210 - 00:00:40.870, Speaker B: Gm. Gm. Everyone. My name is Digacci, the host of scraping bits, and today I'm with Peter. How's it going?
00:00:40.940 - 00:00:41.462, Speaker A: Hello.
00:00:41.596 - 00:00:46.422, Speaker B: Just for some context, for the people that don't know who you are, what do you do on a day to day basis?
00:00:46.566 - 00:01:32.038, Speaker A: Sure, you probably heard of my project blockchain threat Intelligence, which is a weekly newsletter that covers all the stuff about web3 security, all the latest compromises, research papers, and some thoughts about where the industry is going and what we can learn from day to day activity that is happening. And maybe also the other part is as part of Coinbase unit zero x team, my team also publishes a lot of research out there about just really deep technical analysis of recent compromises. And again, just sharing with folks how exactly the hack happened. Who were the bad actors? Oftentimes we share pocs for what they did, how they did it, and most importantly, lessons that we can extract to secure ourselves.
00:01:32.134 - 00:01:51.962, Speaker B: Yeah, that's super interesting. And you have a pretty interesting background as well. You were in doing malware reversal. Were you doing just that for basically years on end before you moved on to crypto? What was that kind of like start to where you are now? And how did you kind of transition? And why did you transition?
00:01:52.026 - 00:02:46.114, Speaker A: I guess it was an accident. I was doing malware reversing for a happy accident. I think that's how a lot of people end up in crypto is like, we stumble upon this field, and from the outside in, it looks very strange and weird world, but once you get in, you really grow to love it. But yeah, my background is malware reverse engineering. Before that I was doing red teaming and incident response, but maybe around like four or five years of reversing, just looking at malware from nation state actors, backdoors, ransomware, everything, teaching classes to lots of law enforcement agencies to up level their abilities to respond. And I just really love low level, deep technical analysis. That's what excites me.
00:02:46.114 - 00:03:21.206, Speaker A: And then looking at the web3 world where I switched over just by accident, I was looking for something new and exciting to do doing malware reversing for a long time kind of burns you out. And there was this whole world of just untapped potential to research and to build with, to tinker with. You have these weird nodes communicating with each other. There's consensus protocols, and you have smart contracts and they interact with each other and their exploits. I mean, how could you not be excited about that? So I went all in.
00:03:21.328 - 00:03:29.274, Speaker B: Yeah, definitely. What do you think are the main differences between, let's say, like web two reversing versus web3 reversing?
00:03:29.402 - 00:04:06.650, Speaker A: Conceptually it's the same. Right. You're dealing with bytecode whether you're reversing x 86 assembly versus evm assembly. Conceptually it's the same. Maybe the tooling is more mature in more traditional reverse engineering. But on the other hand, within web3 world, decompilers are actually powerful enough that you don't have to go down to disassembly level as often. What's really interesting to me is that oftentimes when you look at malware, you have this isolated sample that you pulled out out of some unknown incident.
00:04:06.650 - 00:04:39.026, Speaker A: And that's all you have. Within web3 world, you are looking at a live exploit contract which is still live. You can still interact with it, and you can still do full analysis of everything that contract has ever done. In traditional security, you have an exploit or a malware sample. If you don't know what it did and how was it used. There are some rare occasions where we're able to do packet capture and we would replay attackers actually typing and making typos using the backdoor.
00:04:39.138 - 00:04:39.506, Speaker B: Sick.
00:04:39.538 - 00:05:01.642, Speaker A: So that was fun. Or clicking. We would restore the remote desktop session so we'd see them clicking on different things. That's extremely rare. Now in Web three world, that's the common thing. That's a normal thing. You can see exactly what the attacker did to use this exploit to attack others, how they did it and what they did with it.
00:05:01.642 - 00:05:03.402, Speaker A: And that is even more fascinating.
00:05:03.466 - 00:05:31.190, Speaker B: Yeah, it's like a visibility. Yeah, it's like an open sandbox that you can see basically the whole history of the blockchain. And then what we were discussing earlier is you can basically detect patterns, I guess, timing of exploits techniques used. Because I guess just in general, as programmers, we can identify everybody's code is different. Right. It's all kind of unique in its own way. And you can see this with exploits as well.
00:05:31.190 - 00:05:49.420, Speaker B: Especially true, because you can see everything. Every past exploit, you can kind of match them with. Okay, this guy used this technique here. He tried to switch it up here, but he still used a previous technique, though, and so you can kind of link them together, and I assume that's how you do it, which is a very novel approach. I didn't really think of that.
00:05:51.090 - 00:06:19.240, Speaker A: We've been doing that for years. In traditional malware analysis, anytime we're dealing a lot of time. Malware has unique way that they encrypt data. So we would immediately see, oh, these guys use rc four. Very rarely does someone use rc four these days. Like, I know who is doing that, or the way that they package the communication protocols. Even before I get full attribution, I know exactly who is doing that and what else they've done.
00:06:19.240 - 00:06:59.262, Speaker A: Same thing with smart contracts. There are some standard ways that you do things right, there's only that many ways you can transfer tokens or eat. But then everything else says a lot about you as a programmer. What are your preferences, what languages you use? What patterns do you use, do you prefer, use what storage samples? Use, what protocols you use for swapping assets? How do you like to do your flashbots? What parameters? Any unique thing that you do is a signature of who you are, what techniques you use as an attacker. And that's fascinating to read and document.
00:06:59.326 - 00:07:16.760, Speaker B: Yeah, that is pretty interesting. And with blockfrot and doing this stuff at Coinbase, have you actually made any distinctions between, I guess, hackers, even if they might be different addresses, they might have switched up the contract a little bit. Have you identified anything so far?
00:07:17.290 - 00:08:03.080, Speaker A: We don't look, just the traditional way to do those hunts is to look at the transaction history. Where did you receive the money? How are you paying for gas? What we do on our team, we go deeper. We actually look at the exploit code and your techniques, and we match you up. That way we don't just rely on simple transaction data, and we do find a lot of stuff that bad actors do, which they thought they were just playing on chain, but they effectively leaked themselves and leaked their techniques early on, even if it's completely unrelated to the actual exploit. Like their early attempts at exploitation that were done from a different wallet, which is unrelated. But we know it was you.
00:08:04.970 - 00:08:47.542, Speaker B: But it's kind of interesting that all the hackers are not actually that sophisticated from what I've seen so far. They don't attempt to obfuscate stuff, they don't attempt to make custom bytecode. It's quite obvious they don't simulate transactions, they don't use private rpcs. I guess even separating their last transaction from a new transaction and funding the wallet and then moving the funds out of it. If they do that, it seems very naive. The attackers I've seen, at least you might have seen differently because you've done so much research on it. But I think the ones I've always seen when shared with Twitter, it's always that.
00:08:47.542 - 00:08:50.600, Speaker B: And it's just like, wow, okay, house is happening.
00:08:51.210 - 00:09:39.046, Speaker A: It's just so basic because that's where we are. We still are in basic techniques that are sufficient for exploiting protocols. You don't need to. Like, if you look back, we were talking about malware and exploits. There's no need to obfuscate exploit contracts. There are no mature monitoring detection systems today that can reliably identify that there's a contract that is about to exploit another contract. They still look at basic things, or they still need to be reliable at finding things like, oh, there's an exploit contract which was configured with a target, and I'm detecting some basic heuristics that are used for flash loans or something like that.
00:09:39.046 - 00:10:12.478, Speaker A: That's suspicious. But then that's about it. That's as far as we can get. And then there are no intrusion prevention systems that just because you detected it, but then you responded to it an hour later. By then, it's too late. So attackers will evolve and start using these obfuscation techniques, just like in traditional security, when malware and exploit, they started using packers and encoders. Right? They have all these fascinating techniques, how to encode shellcode to make it.
00:10:12.478 - 00:10:41.370, Speaker A: Well, for a variety of reasons, but once we have stronger detection capabilities and systems, then the attackers will need to evolve. But for now, basic things is enough. And then you were saying, not even using private mempools. Yeah, you saw the curve hack, and curve hack was sniped, and the Euler hack was sniped. Why are they not using private pools? They're not there yet. They think it's sufficient to still win.
00:10:41.440 - 00:11:26.066, Speaker B: Yeah, I think it's just all of them are very naive. It's quite clear that they don't have a diverse, I guess, tool set or even knowledge of the space. Because from my background, I've kind of done everything from DAP development to mev to what now is exploit generation. And so I kind of know the whole playing field. And for someone that's doing an exploit, I would assume they're either just a DAP developer trying to integrate something and found something, or like an unethical cybersecurity guy, like auditor that just finds it, and then why don't I take this. It's obviously like a big bounty. Maybe there isn't a white hat opportunity of a confirmed, what do you call, payout.
00:11:26.066 - 00:11:45.520, Speaker B: So they just decide to do that. And so they wouldn't have any idea of the whole kind of layout from consensus relayers, block builders, validators, fools, mev bots. It's kind of funny to see from my perspective, but it's not everyone.
00:11:46.130 - 00:12:50.450, Speaker A: There are some professional operators that do use private pools, and they're very precise of how they move assets after the compromise. But we're talking about the majority here. Yes, majority are still basically, we're not dealing with true criminals. They know how to hack, but they may not be as advanced about the laundering operation or the operational security to make sure that they're not discovered. So we're dealing with, we are like in the 1990s of traditional security, where people are just like poking at the system and they're just transitioning over to becoming full criminals. Like what we saw eventually with all the web two compromises in, let's say two thousand s, but we're on the way there. That said, there are already some folks that know exactly what to do, and I'm sure people are researching how to obfuscate their exploits, how to make their contracts more analysis resistant, but it's just not necessary just yet.
00:12:50.520 - 00:13:34.050, Speaker B: Yeah, and I think there's very limited things to what you can do. Actually, it all comes down to web two, I guess, tracking prevention, because ultimately when you do hack well, you've exposed your ip, and unless you know, like web two stuff to kind of counter all that stuff, how are you going to off ramp, how are you going to execute all this kind of stuff? It's all just web two. In that sense. The only web free thing is really just the contract, which if you obfuscate, if someone is well, knows assembly, they'll be able to read it, it's not too big of a deal. But it all goes down to web free, still web two, sorry, I believe at least, because that's the only question you think of if you're going to exploit, how do I get this out of here? How do I not get detected?
00:13:34.790 - 00:14:19.038, Speaker A: That's all operational stuff. And then we've seen even very advanced actors fail there as well. Like the scenario with the Warhol and Oasis recovery, right? We had a sophisticated hack, they went full djen with the oasis. They were trying to earn even more, and then oasis rug pulled on them as attackers, as bad actors should, they've thought like, oh, this contract has private keys. Maybe I will not try to do anything there. But again, that's the distinction is that we're dealing with folks that are very good at on the technical side, but then like full blown criminals, they also think about operational side of things and other aspects, but we're not there yet.
00:14:19.124 - 00:14:46.198, Speaker B: Yeah, for sure. You mentioned that with blockfruit, you basically detect all these hacks that aren't normally on Twitter, that are just multimillions. They're also very small amounts of like 50 grand less. Right. Even some of like a couple of grand. How do you really find these? Because obviously the obvious way is just staring at the ether scan all day.
00:14:46.364 - 00:15:25.390, Speaker A: But I doubt anything that goes through block threat is publicly available knowledge. I do not publish anything from private investigations or that is not publicly the source. At least what shows up on blockthread. It is from a variety of sources, including Twitter, including variety of feeds, telegram, chats, Discord channels. I scrape and aggregate all of them, but I never post anything on blockthread, which is completely unknown or unheard of. That stuff would go directly to either project or it would go to law enforcement referral to investigate.
00:15:25.470 - 00:15:31.400, Speaker B: Oh, got you. Okay, so it's not like you're looking at Efascan and then putting on blockchat after.
00:15:31.930 - 00:15:57.710, Speaker A: No. And even if I would, I don't think I would publicize something that I discovered if it's not already publicly available, because there are concerns there, like if there's an ongoing investigation into an attacker and I just exposed it out there, unless there's something obvious that prevents the attacker from stealing or making more harm, I could impede an existing investigation. That would be bad.
00:15:57.780 - 00:16:23.106, Speaker B: I've seen on Twitter some guy, he literally just, he only tweets, like, these tiny hacks or like, the hacks that don't get massive recognition. And he gets, like, maybe one or two likes per these hacks, which is very weird. But he basically, I believe he just stares at the blockchain or has some detection tool and then just tweets.
00:16:23.218 - 00:16:24.278, Speaker A: Detection tool.
00:16:24.444 - 00:16:26.818, Speaker B: He's like, oh, yeah, those tiny hacks.
00:16:26.834 - 00:17:10.642, Speaker A: Are fascinating to watch. Right? Because those tiny hacks is where we have new players in the space. That's where they are building and sharpening their tools and their capability techniques. Right. So that's why I document even the smaller hacks, is because I want to collect how they did it and what they did. Because today they're practicing, but tomorrow they will use the knowledge that they acquired not only how to pull off the hack, but also everything around it, how to obscure the source of funds, where to send it, and they may use that same technique, the same actor, for a much larger compromise. So it's important to start watching them as early as possible in their journey.
00:17:10.706 - 00:17:22.398, Speaker B: Yeah, you can just document them. It's actually quite interesting. You can make like a whole documentation of them, I guess, their whole career on the chain and see how they progress.
00:17:22.514 - 00:17:51.486, Speaker A: It's called threat intelligence. Traditional threat intelligence tracks who the bad actors are and tracks their TTP. So their tactics, techniques, procedures. So how do they operate, what do they do? And then slowly start building a profile about this group or individual of who they hacked, how they operate, what exchanges they use, what flash loan providers they use techniques and slowly start building their personas. That's threat intelligence.
00:17:51.598 - 00:17:55.300, Speaker B: Pretty interesting. I kind of want to get into this field now.
00:17:56.010 - 00:17:59.080, Speaker A: You are in this field. We all are.
00:17:59.450 - 00:18:23.520, Speaker B: Yeah, that's super interesting. And I guess since we're in the 1990s, I think that's what you said, but of like, let's say the cybersecurity of web free, what do you think is really lacking? Obviously, the detection tools are number one. How can they improve from what they are now?
00:18:24.610 - 00:18:55.702, Speaker A: They are improving. I think we are on the right path. I feel like in the last year we had an explosion of all the different projects that are. Some approach it through pure heuristics. They're like building machine learning algorithms to detect an exploit over multiple transactions. Others are building signature databases, others are just documenting, just creating large lists of attackers and trying to track them. We are on the way.
00:18:55.702 - 00:19:54.970, Speaker A: We're doing the right thing. The last piece. So just how we went in, traditional security went from, I guess, detecting the intrusion, the next step is preventing the intrusion, and that will be the killer product, what's needed for these protocols. So how we have white hats today that are racing against the clock to try to, I guess, hack back the protocol or try to front run the actual exploit. Once we get to a place where we have generalized front runners which act as defenders of these protocols and then through other channels can return those funds and distribute them back to developers, or you have monitoring systems that operate on the level of reacting in seconds to milliseconds to an impeding intrusion and then making necessary changes. It's a really hard problem to solve. It's fascinating, but that will be the next step.
00:19:54.970 - 00:20:11.246, Speaker A: The first step, which is just intrusion detection, the firewalls, not the preventative step, but just detecting. We're on the way, but we should start thinking maybe two, three years ahead of how the full preventative cycle would look like.
00:20:11.348 - 00:20:27.080, Speaker B: Yeah, which ultimately comes down to a combination of MeV and I guess program analysis. And then I guess you could include consensus as well of the builders, I guess validators, but.
00:20:27.690 - 00:20:28.150, Speaker A: Exactly.
00:20:28.220 - 00:20:35.110, Speaker B: I don't know how that would play out. But I think definitely like the MEB side of generalized prevention.
00:20:35.690 - 00:21:23.942, Speaker A: Yes, generalized front rotting to generalized prevention, from profiting from I guess, front running to saving protocols. We already see examples of that. What was the latest hack? So curve? We had MeV bot Euler, we had an MEV bot that are front running the actual exploits and then returning those assets. So we already have the foundation that is in there. It's just that the focus for these bots has been so far just pure financial profit. What if we use those skills, those very low level optimization skills that Mevbot developers have created over the time and applied it to defending protocols? How exciting is that?
00:21:23.996 - 00:22:15.400, Speaker B: Yeah, I guess it also comes into play, like if someone does an exploit transaction, right, and they pay the Miner x amount, but then they also add, for example, a sandwich, a liquidation, a jIt, and let's say an arbitrage as well, so then you have even more money that they would outbid you on. If you just copied their one, you would still lose, because they're actually paying more out of those MEV tactics on top of the hack. And so the only way to actually completely master that is to have the whole shebang of being like an elite MeV team, but also having the program analysis background to be able to completely prevent it, which I think that is incredibly rare, first of all. But it is also very possible if you have the right team around you.
00:22:17.470 - 00:23:21.034, Speaker A: That same thing happened in traditional security. We started with just basic, I guess, companies that were born just doing basic signature detection, and then slowly evolving to being basically the fastest out there to detect an intrusion in progress and stop it and respond to it. So I don't see any reason why it wouldn't happen in the web3 world. It's just that we have a unique way of approaching it, because in traditional security, they could not dream of having these autonomous bots that are sitting there on chain. And again, if we have, let's say, a packet, an IP packet, flying through with an exploit, imagine something else front running that packet and knocking it out. You could not believe that you could even do this in web two, but we can do this in web3. Which is why I'm so optimistic about just long term security of this space, is that we can do a lot of things that traditional security people could only dream of.
00:23:21.034 - 00:23:38.866, Speaker A: In terms of security, we're not even talking about having a record of the entire ledger of all transactions that ever happened. So we can learn on them and do all sorts of other analytical things. But even the fact that you can front run the exploit is fascinating. Yeah.
00:23:38.888 - 00:24:19.630, Speaker B: And I think another thing that's going to be super interesting if it does happen is account abstraction. So someone else executing the hack for them and then not actually realizing it's the hack. So I think that would be very interesting. And also ZK vms, I think that would be the major kicker because obviously we see tornado cash and that's getting sanctioned. But then you have these whole ecosystems of basically that. So that would be a very interesting problem to solve with both mev and exploits. But in an encrypted environment, which is just natural, you can do private transactions and I guess also public, depending on what you're interacting with.
00:24:19.630 - 00:24:26.660, Speaker B: But then you can also bridge and then kind of launder super easily if it's just private. Right?
00:24:27.990 - 00:24:41.800, Speaker A: Yeah. So how do you detect that there's a hack that is about to happen, which is not in mempool or if it's in ZK, there could have been a hack this whole time. You wouldn't even know.
00:24:42.170 - 00:24:42.920, Speaker B: Yeah.
00:24:43.770 - 00:24:48.358, Speaker A: So these are new novel problems that need to be solved on top of it all.
00:24:48.524 - 00:25:11.758, Speaker B: Yeah. And then it becomes an even bigger niche, I think. Just like people reading and writing by code is a niche in itself, then you have mev, which is a dumb niche. But then when you add all of this onto ZK and trying to learn ZK at the bytecode level, et cetera, that will be just an insane niche. Especially mainly because it's like a new technology, right?
00:25:11.844 - 00:25:12.286, Speaker A: Yes.
00:25:12.388 - 00:25:27.140, Speaker B: I wouldn't really say EVM is that new. It's been around for a while, but the ZK, we're at the very start of it, so, yeah, to do analytics on that would be very difficult unless it's just built in. I think the ZK bridges are going to be. Oh, man, I can't wait.
00:25:28.070 - 00:26:00.526, Speaker A: Yep. That's why if you're in this industry, you're guaranteed not to be bored for at least another decade or two. There's always going to be something new. Who even talked about ZK bridges and private mev mempools? A couple of years back, that was all just a hypothetical. Let's build flashbots and all that. And now it's a common practice. So in another two to three years, who knows what we have to solve for? But for now, before we go into that territory, we need to solve even the most.
00:26:00.526 - 00:26:16.914, Speaker A: As we discussed the basic attacks, that's still an untapped research area of how do we solve attackers just shooting their exploits through normal rpcs, unprotected and visible to everyone.
00:26:17.032 - 00:26:32.598, Speaker B: Yeah, it's quite interesting. And just to add on top of that, I guess with your experience of the newsletter with blockfret and also Coinbase, what are the most common vulnerabilities you see which have the most devastating effects on the contract?
00:26:32.694 - 00:27:19.674, Speaker A: Yeah, so I just delivered a talk at d five security summit. Yeah, you should check it out. It basically talks about the top ten exploitation vectors for most contracts, and it created a top ten list which is based not only the frequency, but also a combination of how often they occur and also what's the total damage. And the conclusion of that analysis, just for this year, 2023. And the conclusion there was, it's still price oracle reward manipulation hacks. Right, just like it was last quarter. And then closely followed by the private key compromise, which is not even a smart contract issue.
00:27:19.674 - 00:27:45.300, Speaker A: It's a security operational issue. It's development shops not implementing sufficient controls to protect their keys. So those things persist. So definitely check out the DFI security summit talk. The state of DFI security, that's what it's called. So I have like detailed description of the top ten there.
00:27:45.830 - 00:28:20.486, Speaker B: Yeah, I got that up here. Cannot listen to that actually, after. And since you do these very in depth analysis. Analyses. Analysis on these vulnerabilities, I guess what are the patterns you really see within these complex vulnerabilities? There's got to be something that's always kind of occurring for a category of exploits. For example, liquidation. You know, something is in this order, or like a price oracle manipulation.
00:28:20.486 - 00:28:43.460, Speaker B: Then there's also another order for that usually, right, there's always going to be the anomalies, but you can kind of abstract it in like, okay, this, and that's generally it. There might be some extra functions to get to that abstract, but yeah, in a generalized sense that's the order. So I guess what are the common things you see at the abstract level?
00:28:44.390 - 00:29:20.862, Speaker A: Yeah, so there's a template, right. How do you exploit oracle attacks one? Well, it's an optional part where you need to inflate the pool that you're dealing with. So there's usually a flash bot. Sorry. There's usually a flash loan involved, high up in the stack. Beyond that, it's all custom. So you have to look at what do they prefer for their flash loan provider then it's interesting to watch how they split up those funds because they don't usually deposit at all.
00:29:20.862 - 00:30:08.910, Speaker A: They all use different formulas, like, oh, I'm going to take half, I'm going to use half to inflate, and then the other half I'm going to use to do the sell. So there's math involved, like what degree of optimization they do to extract the most. And a lot of attackers, they don't spend too much time on optimizing how much exactly they need to withdraw. So there's usually they add an extra cushion for themselves. Oiler, they didn't need to extract as much as they borrow as much as they needed to, but they did. They just followed kind of like a rough equation of what's sufficient to pull off the exploit. I'm sure the guy was excited to pull it off and they didn't need to be as precise.
00:30:08.910 - 00:31:21.074, Speaker A: So you watch for interesting tidbits like that, like how precise are they? What is the split that they use? And then it's interesting to watch for patterns. Like do they embed the swapping immediately in the same transaction? Usually some do, some try to just store it all in the main exploit, and then they do the swapping later on as a separate function. Yeah. So they have these unique signatures for different attackers of how they approach things and that kind of, as we talked about, the threat intelligence and personas of how people act those unique things, of how they do things and in what order and to what are the parameters that they set is what builds their unique personalities. And if you were interested in diving into that and you wanted to see how the exploit works in general. So Sunweb, three sec, they have an amazing repo that you can look through foundry exploits for. Most of the recent exploits out there, if you just search for GitHub, Sun Web, three sec, they have a repo of all those exploits.
00:31:21.074 - 00:32:02.580, Speaker A: But those exploits were reimplemented by the good guys based on the understanding of what vulnerability is. It's a lot harder and a lot more interesting to actually decompile and reverse engineer and write an implementation of exploit precisely how the attacker did it. And that's what we do on our team, is that we don't just re implement the vulnerability, we do it exactly as the attackers did it, with all the weird things that they did along the way. So I usually publish it on my GitHub repo, so you can check those out. And those are interesting case studies, not definitely in the vulnerability, but also like the operations of the attacker themselves.
00:32:03.030 - 00:32:20.780, Speaker B: Yeah, it's a whole super interesting field. I think if I wasn't building my tool, I'd definitely be doing that, but I'm probably going to be doing it anyway later down the road. You want to talk? I think everybody knows about my tool because I talk about it a bit.
00:32:21.790 - 00:32:22.602, Speaker A: Fair enough.
00:32:22.736 - 00:32:50.450, Speaker B: But yeah. TLDR, for the people that don't know, it's basically a program analysis tool for bytecode that generates exploits. So it's on the other end of this. Not saying I exploit anyone, but it has the possibility of doing it. It basically finds a path that has. The exploit generates the contract, and then you can do whatever you want with that contract. Basically, I just do it for the fun, just for the giggles.
00:32:50.450 - 00:33:12.682, Speaker B: And just initially I thought this could all be automated in some way, and I wanted to prove myself that that's true. Obviously people were like, oh, it's just impossible, highly improbable. It's this computer science thing that's just a very difficult problem. And I'm like, not going to solve this. Yeah, that's kind of what I've been doing.
00:33:12.736 - 00:33:15.034, Speaker A: I would say it's a hard problem.
00:33:15.152 - 00:33:22.640, Speaker B: Yeah, exactly. It's very complex and difficult, but that doesn't mean it can't be done right. Just give me enough time and not.
00:33:23.810 - 00:33:56.502, Speaker A: That problem has been addressed and targeted. Again, I like drawing parallels to traditional security because we don't operate in a vacuum and there are a lot of lessons which can be extracted from it. People have been building tools to some degree, automatic exploit generation for decades. Solvers, symbolic execution. People have been doing this a lot. And then we're dealing here with EVM, which is a significantly, much more constrained environment. So we're not dealing with.
00:33:56.502 - 00:34:33.758, Speaker A: You try to exploit a browser and you have to deal with, the complexity just blows up after a certain point. You're dealing with image generation, network protocols and Ux and fonts and all sorts of stuff, and you're supposed to consider either one part of it or all of it together to try to write exploits. And here's your eVm. There's no external I o. You just have to deal like you're just executing byto. Can you go through all possible paths and find an exploitable path? Sure. Sounds like a lot more solvable problem than trying to exploit a browser automatically.
00:34:33.854 - 00:35:26.230, Speaker B: Oh, yeah, definitely. I think there's so much beauty in the blockchain space because it kind of is like the gateway into everything. From my experience, I would have never gone into cybersecurity if I didn't build a dap, and I would have never wrote a website. I think if I didn't build a Dap and then get into algorithms and high frequency trading, wouldn't have done that without getting into crypto. I think it's like a very easy way to kind of get into everything, but then it ramps up very quickly the more deeper you get, and then it becomes very applicable to everything else, which is really quite interesting because it's not only coding, it's also financial. You have your teams or like project management, et cetera. It's like everything you could possibly want all in one very constrained sandbox.
00:35:26.230 - 00:35:59.022, Speaker B: I think there's a lot of beauty in being able to kind of do what you want in a very constrained manner. You have these set of parameters of the bounds of what you can do in an EVM. But obviously, people try and push the bounds as much as possible while being in those rules. And I think that's very interesting and kind of makes it fun, especially the PvP aspect, which is kind of gamified with the money. It makes a whole lot better, I think.
00:35:59.076 - 00:36:50.606, Speaker A: Yeah, this is a lot of fun. It's a new untapped industry with a lot to build and explore, and it's so exciting to be early in it. So a lot of people, they say we're early in cryptocurrency for a variety of interests, right? For investments, for profit, for project building. I'm excited to be very early in the space because I've been doing security for a while and I always had this nagging feeling. Everything that I'm researching and doing, someone probably did this already in the like, people known about these attack techniques and exploits and reversing for a long time, and here you are in web3, and it's all new, and you are at the frontier figuring it out as you go, and it's all fascinating and it changes.
00:36:50.708 - 00:36:57.458, Speaker B: We are building, like, the pillars of what other people are going to stand on. All the foundation of what other people are going to build on top of.
00:36:57.544 - 00:37:09.134, Speaker A: Basically, yeah, you're an explorer and you're learning new things every day. How awesome is that? What else would you want as a security professional?
00:37:09.262 - 00:37:26.700, Speaker B: Yeah, I think just in tech in general, it's like, in tech in general, too. Yeah, I think that it doesn't really get better, apart from you're at the very front of the pack and there's no one to depend on. You basically have to figure it all out and try and push the realm of what's possible.
00:37:27.230 - 00:37:49.150, Speaker A: We have dependency. We can learn from history. So history is, of course, I wish the industry. Here's a weird observation. It feels like the web3 security and web two security worlds are kind of like separate. They're like two separate islands, or rather weird. Web three world is a tiny little island that is slowly growing.
00:37:49.150 - 00:38:36.774, Speaker A: And then you have this mass, land mass, which is web two security. It's been existing there for decades and decades. And it's funny to observe that the two are really part of one big thing and we can learn from each other. Yet, the web3 world. I feel like we have our own conferences, but I rarely see web3 talks on traditional web two conferences. And then we have our heroes, we have our personalities and researchers, people writing amazing research, the stuff that you put out on bytecode analysis, cold data reversing, all sorts of fun stuff. But how many people in Web two world are even aware that there's this whole community and there's this amazing research that is happening right now? The answer is very few, surprisingly.
00:38:36.774 - 00:38:53.142, Speaker A: And I don't know why there's this separation, because if we explain what's going on, every time I talk to someone in Web two world, they get excited, like, oh, my God, this sounds amazing, but why haven't I heard of that before? And I don't know. There's some unknown divide that is between us.
00:38:53.196 - 00:38:53.826, Speaker B: Yeah, I think it's.
00:38:53.858 - 00:38:56.054, Speaker A: And yet there's so much to learn from each other.
00:38:56.172 - 00:39:01.766, Speaker B: I think it's mainly because when you think of crypto as an outsider, you think of Ponzi's scams.
00:39:01.878 - 00:39:02.490, Speaker A: Yes.
00:39:02.640 - 00:39:42.038, Speaker B: And it just has a negative connotation. That's what I thought as well when I got into it. And you start getting into it, do some Dap development, you start realizing everything is actually a Ponzi scheme, and then you're like, oh, interesting. Let's try and go deeper. And eventually you learn more. And I think it really hits you that it's super interesting once you get very deep into it, because at surface level, it is actually kind of just Ponzi's, like, 99% Ponzi nice. But everything, like the architecture, the infrastructure, the tooling, I think that's where all the fun is.
00:39:42.038 - 00:40:07.134, Speaker B: And so you're playing this game with the Ponzies and the people trying to make money off other people playing the Ponzies. So you have these very critical, I guess, roles and tooling that you can build, but I guess from the outside world, you don't realize that until you're actually in the game itself. Yeah, I think there's a saying for that. Don't know what the saying is.
00:40:07.172 - 00:40:36.230, Speaker A: So it sounds like there's a need for, I guess, more transparency or better outreach to explain the work and research that we're doing. Like where is the Mr. Robot not talking about sticking raspberry pis into power plants. Where is the Mr. Robot episode or equivalent where someone is front running attackers to save a multi billion protocol?
00:40:36.890 - 00:40:59.374, Speaker B: Yeah, I think there just needs to be more people willing to make content and share their experiences because that's ultimately what Netflix will do or some big content distribution company. They have to base it off. You know, there needs to be like headlines to first get their attention. Then you need to get those people that were in the headlines kind know.
00:40:59.412 - 00:41:04.370, Speaker A: We'Re creating seems like headlines every week with compromises.
00:41:04.710 - 00:41:30.650, Speaker B: Twitter is just basically content machine for CT. Crypto, Twitter, it never gets boring, which is just insane because what other industry is there something happening almost every day that's just like groundbreaking? Like multimillion dollar hacks today probably it's going to be with someone like a couple since until this is released, or even some tomorrow.
00:41:31.310 - 00:42:08.870, Speaker A: Well, that's another thing is that probably other industries do have things happening all the time. It's just that because they are so opaque. Like what was the last time you heard of a T Mobile hack? Right? It's probably happening right now as we speak, but no one knows about it until T Mobile needs to disclose it or someone picks up all that data from some form. Right? But in our world, anything that is happening is live and everyone can see it. That's why maybe we have a lot more buzz and a lot more news coming out because we're washing the chain, we see what's going on.
00:42:08.940 - 00:42:28.700, Speaker B: That'll be very interesting. If someone made a live news show of just like if they did the preventing, generalized front running stuff and they made like a live stream show, they would look like news report on them, like front running them. I think that'll be pretty funny. Probably would happen as well, to be honest. I would do it.
00:42:29.890 - 00:42:30.960, Speaker A: Go for it.
00:42:33.090 - 00:42:44.850, Speaker B: Just to think of the future possibilities of exploit generation, reverse engineering, et cetera. For crypto. What are your thoughts on AI playing a role in all of this?
00:42:44.920 - 00:43:25.498, Speaker A: It already is. So we know that projects are already using, they're trying to build models of what transactions look like, what exploitation looks like. So you're not looking at one transaction on its own. You try to see patterns again, I'll refer people to the DSS talk so I don't duplicate myself. But there's a concept of a kill chain, right? Which is like a model of how you think from start to finish, how you prepare for the exploitation all the way to executing it and laundering it. So people are already building models to see those patterns. The machine learning is perfect for that, like trying to learn and see and detect those patterns so you don't have to do it manually.
00:43:25.498 - 00:44:00.950, Speaker A: So that's already in place. People are already playing and experimenting with that. Yeah. I think just in terms of security detection we must rely on machine learning just because of how much data we have to deal with. And the difficulty of, I guess you have a few insane people, like I'm spending every single week looking at each hack and trying to figure out, tease out like what's the exploitation vector? Who is the attacker? Where do they get the money from? Where do they go? This is a very manual, painful process. I just choose that pain. I don't know why I enjoy it, but I just choose it.
00:44:00.950 - 00:44:17.338, Speaker A: But then imagine if we sent out and built a model on the entire body of all compromises through the years and used it to feed our defenses. That sounds an amazing prospect.
00:44:17.514 - 00:44:48.550, Speaker B: Oh yeah. I think for me personally, when I finish my exploit generation tool and when it gets to the MVP state, I want to eventually make it more sophisticated, et cetera. But then I want to train the outputs. I want to train like an AI model based on the outputs and inputs and kind of like what kind of process it takes the heuristic way because that's what I've developed over the years of intuition and obviously doing it for months straight really gains of the weeds. And I can easily convey that to someone else.
00:44:48.620 - 00:44:49.238, Speaker A: Exactly.
00:44:49.404 - 00:45:00.950, Speaker B: In depth knowledge. And so it's the obvious step from when you have a tool and you have a very in depth knowledge of building, you can obviously kind of train something else to learn that.
00:45:01.040 - 00:45:01.438, Speaker A: Exactly.
00:45:01.524 - 00:45:11.040, Speaker B: That's why data really, and you just kind of like mutate it in slightly different ways and generate your own data, really, if you have something that's good.
00:45:12.610 - 00:46:23.190, Speaker A: So this debate, building offensive tools, right, could be abused by bad guys to do bad things. But this debate was already solved again in traditional security, that building offensive tool is a good thing. So there was a long debate like metasploit toolkit, which has a collection of exploits for everything, it seems like. And why would you release such a thing? Why would you send it out to the public? And the benefit to defenders far outweighs that someone trying to abuse it. People who want to abuse tools like that, they used to have other toolkits that were privately distributed between them and they did what they did. We already have exploits in web3, so why would it be so bad about building tools that teach defenders of how their protocol could be attacked? So they can build defenses around it, or training, monitoring and defensive tools on what an attack would look like, so they can proactively build signatures and detect those things? So offensive tooling is. I don't think there's any ethical debate.
00:46:23.190 - 00:46:57.246, Speaker A: The benefits far outweigh any possible abuse for that same tool. Like foundry is an example. Foundry made exploit writing and simulation infinitely easier. I remember just writing first exploits in Brownie and it was already like, oh my God, I can build this in Brownie. This is great. I can write test suites. But then foundry came along where I can, with the cheat codes and all the other tools that they have available, and I can write everything in solidity so I don't have to constantly hop through different languages.
00:46:57.246 - 00:47:29.260, Speaker A: And it made it not trivial, but a lot easier. So should foundry be banned? Is it bad that we allow people to write pocs quickly? How about all the auditors that can now write pocs and illustrate why the thing that they're reporting is a problem to developers? So they actually go and fix it instead of writing it off as informational or, oh, that's too hard to execute. They see this POc and they say, oh yeah, you just drained my contract. Yeah, this is bad, I'll fix that.
00:47:30.510 - 00:48:26.030, Speaker B: I think with any technology, there's always going to be the unethical side of it, obviously. Yeah, I think it's just human nature, right? There's always going to be the bad side and the good side that comes with everything. For example, AI. Sure, it's going to be amazing of capabilities, but there's also going to be the negative side, for example, the deepfakes, people using that to distribute false videos of people like nude, for example, or making them say something that they didn't actually say. But then on the other hand, it's capable of solving questions and answering questions, basically creating its own Google, right, which actually chat GBT, which I used on the daily, by the way. I actually use it more than Google now because it's just a great tool, prompt engineering. It teaches you how to ask questions better because that's essentially what you're doing.
00:48:26.030 - 00:49:16.830, Speaker B: And so that helps you problem solve, et cetera. There's just so many benefits, but with anything new, any kind of technology, there's always going to be someone trying to abuse it in some way. So I agree in that sense. And especially since if you have a functioning exploit tool, you can use it to generate proof of concepts, right? And disclose everything basically on the blockchain now you just run through everything and then try and disclose it, try and tell that, and then you can release it and then start upgrading. And then once you make a patch or an upgrade, you can do the same thing. So in that sense, it will also encourage developers to use that tool on their own protocols, which in turn would up the security entirely of the space and maybe spark some ideas for upper people when they see some add it to their pipeline. Yeah, exactly.
00:49:16.830 - 00:49:28.734, Speaker B: And stop gatekeeping information. But ultimately it depends on your goals, right? If you want to make it open source or if you need to make money or whatever, that usually is the main contender.
00:49:28.782 - 00:50:18.222, Speaker A: The end result is as long as it's available from some means, then developers themselves will benefit. I think we need to spend more time on defense, even if by providing offensive tools to developers, to builders is helping them with their defense ultimately, right. Whatever contracts they deploy, that's yet another scanner that they can push through. They can tell them ahead of time that hey, there's an exploitation vector for your contract, please be wary. Or another scenario, what you describe mask scanning the entire chain for any vulnerabilities. So an example here, like what happened with balancer. They figured out there was an issue and then there was a race to try to notify all the pools to pull liquidity before they're exploited.
00:50:18.222 - 00:50:48.140, Speaker A: And they were too slow, so they ended up losing money. They seemed the vast majority, but they still imagine how many other balances could you save by proactively reporting vulnerabilities like that with a responsible disclosure, privately give them time to fix their issues, or if necessary do a white hat hack to return those funds back to customers or to the project themselves before the bad guys do.
00:50:49.070 - 00:50:52.220, Speaker B: I think the one. Continue, sir.
00:50:52.670 - 00:51:17.730, Speaker A: I was just going to say, being able to do this on a mass scale, instead of letting attackers poke at each protocol one by one and trying to play this like whack a mole, like, oh, we'll take this protocol or that protocol having scanning the whole chain, looking for whole chain as a body for the analysis and then notifying those projects individually, that would be a good service to the ecosystem.
00:51:17.810 - 00:51:50.686, Speaker B: I think the one thing with white hacking before, let's say a black hat, and we've seen this a few times, is that I guess there's a legal implication of that as well, of, okay, if I white hack hat this, it's still considered a hack and illegal and so you have to take, it's like a risk they're taking on as well in that sense. And I guess they wouldn't really do it if they think about that. Or maybe they would, who knows? And then there's like that play of, am I going to go to jail for this? Or something?
00:51:50.708 - 00:51:56.340, Speaker A: What if you mess up? What if the intentions are good but you mess up and lock everything up.
00:51:56.790 - 00:53:11.260, Speaker B: Which is I've seen live as well. Like someone executes a white hat hack they didn't know about Mev, they get front ran and someone else steals it. And it's very discouraging because I think white hat hacking is very probably the riskiest kind of thing because first of all, if they don't pay you or they'll want to pay you, then you're in this predicament of you just did all this work and you have the option of telling them or not telling them. But then there's also the option for you're at the mercy of basically the protocol because you're telling them they have an exploit so they're going to go, look, regardless if you're going to give it or not, they know there's something critical and then they might not even pay you or might downplay it to be it's not as critical or just shrug it off and then at that point you're just like, wow, okay, cool. Obviously it tarnishes their reputation, but it's still uncertainty. And if you do an on chain white hat and you try to ransom it or sell it to the protocol itself, then you take on legal obligations and all that stuff. So it is very difficult.
00:53:11.260 - 00:53:54.886, Speaker B: And I think the solution for that is building something that allows basically zero knowledge disclosure of hacks in an objective amount to what is I guess, paid out. So I guess a standard is like 10% or whatever is exposed. So if you build like a project, but everybody just comes to consensus and registers for that, then you can be just deposit that I guess hack in some way, right, and then get paid out for it and then they're just notified or they get the hack, something like that. I think it's essential because white hats are just not in a good place at the moment.
00:53:54.988 - 00:54:39.880, Speaker A: Well, I mean, ultimately you have to make a decision for yourself. What is it that you're optimizing for? If you are optimizing for profit, then you should stick to protocols which have open bug bounties and report them through bug bounty process. If there are bad actors, they will be removed. So you're running some risk, but for the most part, bug bounty hunters, they profit through all the contests and so on. If you're optimizing for user security and you want to help the ecosystem, and by that you're really helping yourself as well, then you will have to make choices where you disclose a bug to a protocol which doesn't have a bug bounty, which may screw you over and say, just thank you. Here's a t shirt. Thank you for your service.
00:54:39.880 - 00:55:25.502, Speaker A: But ultimately, you go to bed thinking that I just saved the livelihoods for thousands and thousands of people who are going to also go to bed tomorrow and not going to think how they're going to pay for college for their kids. That's also a pretty good feeling. Then there's the technique. You're optimizing for technical reward, and that's a reward in itself as well. But you have to just choose for yourself who you are. So know thyself, and then that will drive your decision process. Because no matter what technical solutions that you try to build, if it's too hard and a white hat, they feel that it's just easier to just hack this thing and then just ransom them for a 10% reward.
00:55:25.502 - 00:56:14.770, Speaker A: They'll just do that if it's too hard. So it's an open debate. Another question is what if we ask protocols that come online to simply introduce them to this concept that if at some point you are approached by someone who is, I don't know, a card carrying member of the white hat society, that you agree not to prosecute them if they follow a certain process, such as not trying to profit from this, not trying to force them into a certain dollar amount, just ethical agreement between DeFi protocols and white hat researchers. It's an open topic. I don't think there's an easy solution because here we're not dealing with EVM bytecodes, we're dealing with human nature, and that's very hard. That's a lot more variables to solve for.
00:56:14.840 - 00:56:17.490, Speaker B: Oh, yeah. Infinite complexity.
00:56:19.670 - 00:56:52.110, Speaker A: But again, the white hat process works. I'm not a fan of what people do with the ransom payments because I would imagine nine out of ten times you could have contacted the protocol and told them, hey, guys, there's a problem. Here's the problem. Here's how you can hack yourselves if you want to, and maybe feel free to sign up for a bug bounty program instead of going in and hacking those projects and then waiting for that 10% to return the funds. It's basically like ransomware, but on chain.
00:56:53.250 - 00:57:00.690, Speaker B: Yeah, for sure. I guess there's also consideration of if I don't do this hack now, then someone else might get it.
00:57:00.760 - 00:57:44.130, Speaker A: That's why there should be a clear, this needs to be written out as a well thought through agreement, like general agreement between projects and white hats, is that if there's evidence that there's an imminent compromise and that the only action that you can take is the white hat hack, then you will perform this white hat hack and protocols agree not to sue. However, if you do that, you can maybe ask for a compensation for gas, but you cannot tell and dictate the project that, oh, if you don't give me 10%, I'm going to keep the rest. I'm not going to give it back to you. That's extortion.
00:57:45.750 - 00:58:03.746, Speaker B: Yeah. So then it's just like they basically agree to it or they don't, and then you're just stuck with. I guess I think for any kind of, there needs to be some platform where they can agree to, or being like, okay, you can hack us and you can keep 10%, just send it to this wallet if you do hack.
00:58:03.778 - 00:58:08.262, Speaker A: Us, but then majority just let us know ahead of time.
00:58:08.396 - 00:58:26.000, Speaker B: Yeah. And I think another thing is a lot of projects out there, I think majority of them don't actually have public presence in that way. They might have just been like some random dev exploring somehow. A lot of people were aped into it and now there's a hack there and you can't actually contact them. I guess you can only.
00:58:26.850 - 00:59:08.554, Speaker A: So then what do you do again, if you're optimizing users. So maybe it is the right thing to hack that protocol, but allow users to retrieve those funds on their own. And that recently happened. There was an attacker who stole, I have to look up the exact project, but it was the first time I've seen something like that. The attacker stole the assets, put it in the contract where users themselves could claim the full amount from that contract that they previously owned, and they could also leave an optional tip to the attacker. Maybe that's the new way to do this if you're optimizing for users here.
00:59:08.592 - 00:59:41.720, Speaker B: Yeah, I think that might be the, this kind of sounds like the best way, technically, because when you do white hat, you're actually just taking the user's money. Like if it's a 10%, right, then you're taking actually 10% of all the users money and then they're left with 90%. But if you do that kind of optional tip thing, it's like, oh, they can reward you for saving them and maybe they'll actually give you more. But I think that's probably the most ethical, in a way.
00:59:43.450 - 01:00:15.682, Speaker A: I have to follow up on how the whole thing concluded. It's a social experiment, right? Can we let the users decide how much they want to contribute of their saved money? And that solves two problems. The first problem solves that those users will probably never deposit those same assets into the protocol that was vulnerable. Right. So that removes bad actors on the DeFi provider space. It saves users funds, it still leaves developer liable. Right.
01:00:15.682 - 01:00:50.258, Speaker A: The protocol may still decide to target them. And then the liability thing is tricky. Right. Because even if the protocol decides to say that they have no legal issues with the white hat, there could still be a government action for market manipulation. Right. That's what we're watching with mango. That on the one hand, mango, even though they're saying that now under duress, they agreed not to have any legal action against Javi Eisenberg.
01:00:50.258 - 01:01:09.662, Speaker A: Right. But then the SEC lawsuit, they're not trying to claim that he made any damages to the protocol. They're focused on the fact that someone perpetrated market manipulation. That's a crime in itself, so it doesn't matter. A protocol itself may not even have a say of who does or does not get sued.
01:01:09.806 - 01:01:30.540, Speaker B: Right? Yeah. Because basically any oracle manipulation is that. Yes, there's a whole complexity dilemma of what to do, which I think will only show in time what the right thing to do is. But for now, it's really just like.
01:01:31.390 - 01:02:15.574, Speaker A: There'S just a spectrum of safety. You have to make a decision for yourself of what is it that you're optimizing for. The safest route is to reach out to the project, let them know, and it could go in the vacuum. And then you follow the 90 day responsible disclosure process. So that worked really well in traditional security where you say that you have 90 days to fix your protocol or I'm disclosing it publicly, and then in those 90 days, you could also publicize just like balancer did. There's a vulnerability in this protocol. I'm not going to tell you what it is, but people are advised to pull their funds to save themselves.
01:02:15.574 - 01:02:16.070, Speaker A: Right?
01:02:16.140 - 01:02:23.126, Speaker B: Yeah. But then that also marks the start of a race of like a blackout, trying to find out what it is. It's like a double.
01:02:23.158 - 01:02:35.402, Speaker A: That's exactly what happened with balancer. The second they made that announcement, everyone swarmed and they eventually figured out, I think it was a few days it took them to figure out and weaponize the exploit.
01:02:35.466 - 01:02:57.442, Speaker B: Yeah, it's a super interesting space. I'm keen to see how it all evolves as well. I don't want to take too much of your time, though. I think this was a terrific chat, and I very enjoyed it. Thank you so much for coming on, first of all, and great to chat to you as well. First time, same. I'm very interested to see how block fret evolves and how your career evolves.
01:02:57.442 - 01:03:19.000, Speaker B: I think you're on the right track to being on the elite side, and I think you already are on the elite side. But it'll be very interesting to see how we both progress in this field, and we'll definitely keep in touch. But yeah, thank you so much for coming on, and I appreciate your time, and I'll probably talk to you again in the near future.
01:03:19.610 - 01:03:21.902, Speaker A: Bye. We'll be happy to. Take care.
01:03:22.036 - 01:03:26.250, Speaker B: Take care. Bye.
