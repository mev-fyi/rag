00:00:00.170 - 00:00:20.720, Speaker A: I found the same kind of bug maybe a few times with finding a certain pattern, but in general it doesn't work and the code bases are unique and you kind of see a different angle of a bug each time. You kind of have to know enough to be able to discern when it's wrong or not too. But right now, I mean, humans is still the best tool to use here.
00:00:21.890 - 00:00:28.582, Speaker B: GMGM, everyone. My name is Digotchi, the host of screen reaping bits, and today I'm with a special guest, riptide. How's it going, friend?
00:00:28.636 - 00:00:31.286, Speaker A: Hello, hello. I'm here on the blockchain, and just.
00:00:31.308 - 00:00:33.862, Speaker B: For context, who are you and what do you do?
00:00:33.916 - 00:01:02.026, Speaker A: That's actually my real name, Riptide. I was born in the ocean. Yeah, my background used to build computers growing up, always loved it. Did a bunch of kind of entrepreneurial stuff and then found my way to the blockchain through many dead ends, working for people, military, banking, all kinds of stuff. And then finally found my way to bitcoin back in nine. In and out of the market, going broke, getting rich, going broke, still broke. Now I'm homeless, still broke.
00:01:02.026 - 00:01:35.900, Speaker A: And then I found my way to auditing through being a total dgen during DFI summer and losing a bunch of cash, getting rugged with x token. They had a hack and I lost some good cash there. And then I realized at some point I was kind of getting bored. This is almost at the end of the bull. And I said, I'm going to start like, I don't even know how to read a fucking contract. So I said, I'm going to start reading contracts and just become like a bounty hunter. That was my grand plan.
00:01:35.900 - 00:02:26.070, Speaker A: And I hadn't looked at code in more than a decade. And I had some serious javascript Php under my belt from back in the day that had cobwebs on it. So everything had changed. I got into the code and just started reading audit reports. And this is March of last year, so 2022 I started, and I basically got fired from my typical gig and just went all in and every day, seven days a week, I just started reading and just trying to understand the ecosystem with exploits and the bounties and try to work things and build pocs and all of that. And it just took so much time. Where I went for six months, basically I earned $1,000 on one bounty.
00:02:26.070 - 00:02:54.180, Speaker A: So six months of no income, just living off savings, just thinking, I have to make this work. And then I hit a big one with arbitram and that was like oh shit. I knew I would find something, but it was just going to be a matter of time. I just had to keep at it. And then from there I just got more and more experience. And then I found a pretty big one with balancer, which I did another write up in. I found quite a few.
00:02:54.180 - 00:03:33.394, Speaker A: Is one with wormhole, one with just like random projects. And then I just reach out on their telegram groups and we just negotiate something like Aladdin, Dow Colony network. And then I found, I think the latest big one was with radiant capital right before they put their bounty out. It was similar to kind of thing to balancer. So that was another big man. I just, I just love what I do. I love just reading contracts and it's fun for so like all the days not making money, which is like every single day sometimes maybe I hit like now I'm on like a two bug a month stride, which is pretty good.
00:03:33.394 - 00:03:58.306, Speaker A: But 28 days out of the month you find nothing and you're like, fuck. So you really have to love doing it because I don't like doing security reviews is what I call them. Like the audits on the side. Every now and then people reach out, ask me to do it. But it doesn't have that thrill as like finding live money at risk.
00:03:58.418 - 00:04:00.018, Speaker B: Yeah. Like thrill of the hunt.
00:04:00.114 - 00:04:00.434, Speaker A: Yeah.
00:04:00.492 - 00:04:09.818, Speaker B: When you find one of these bugs, how do you really negotiate in a proper sense? Because I'm sure people try and downplay and under low ball you with the.
00:04:09.824 - 00:04:32.034, Speaker A: Pain all the time. Yeah, I mean, I would do the same thing if I was on the other side. I'd try to negotiate low. They'll try the same kind of thing. Right. Like if you ever taken a negotiations class in university, you have the baton on the best alternative to a negotiated agreement. And I think people have those kind of things in their head where they have an anchor price they set.
00:04:32.034 - 00:05:02.166, Speaker A: Just like if you're bartering at the mall, we'll talk about like, I want to name a project but with the critical. And they threw out something they knew was low, but just kind of like to set that anchor to get me circling around that number. But you really have to look at it and step back and say, hold on. Really the best way to do it is to quantify what you can lose with this exploit. True or false. Not like hypothetical. Those bugs, the worst.
00:05:02.166 - 00:05:21.810, Speaker A: If you're trying to argue your position, it's just forget about. It's. If you could show it in a PoC that says, hey man, you're going to lose 5 million. Look, provably lose it right now. I don't need access. I could do it right now. Those are the best bugs, where you have a lot of strength on your side, and I'd say the easiest to win.
00:05:21.810 - 00:05:33.938, Speaker A: But still, I mean, you're still at the mercy of the project, which is the shitty part about the space. It's like you can have bad actors that just. Okay, so we're going to pay you this, and what are you going to do about it? Kind of fucked.
00:05:34.034 - 00:05:48.554, Speaker B: You build the poC, and then you kind of run it in a simulation and show how much money it loses. Right. Do you have kind of like your own anchor point that you want? Minimum. So I guess, like 10% or whatever it is. And then, yeah. What do you do if they just.
00:05:48.592 - 00:06:04.830, Speaker A: I think ten should be, like the standard, but that's hard to say. Look at oiler. Okay, 10%. It's like, dude, they had a lot of fucking money locked up, and how are they even going to pay it without taking user funds?
00:06:04.990 - 00:06:08.130, Speaker B: Yeah, that's the complicated funds.
00:06:08.710 - 00:06:26.360, Speaker A: Yeah. And I could say, like, okay, you could take a cap on that. Okay. That's all cool. I'm not out here to be a mega multimillionaire from bug hunting. I think it's fun, but I also want to get paid adequately. And it's like a sales job.
00:06:26.360 - 00:07:01.694, Speaker A: I'm not on a salary. I don't get paid every day. I don't know when the next bug is coming. So when bounty hunters get shafted, it pisses you off because you might not find another big one like that maybe ever again or maybe for months and months and months. So you really have to be careful in trying to negotiate. That's a huge part of the job. And sometimes the bounty program intermediaries like immune Phi, all the other copycats out there, they necessarily aren't there on your side, but there to be a neutral party.
00:07:01.694 - 00:07:19.850, Speaker A: And sometimes it doesn't work out in your favor either. So sometimes dealing with dev teams in a telegram, maybe you have another colleague in crypto that helps middleman it. Sometimes those are better interactions than going through these kind of formal channels too. It really depends on the team.
00:07:19.920 - 00:07:29.500, Speaker B: Yeah, I can imagine getting just completely rugged from them, finding a $10 million exploit, asking for 1 million, and then they're just like, no.
00:07:30.690 - 00:07:31.294, Speaker A: Yeah.
00:07:31.412 - 00:07:41.280, Speaker B: So I guess. How do you disclose what the bug is without kind of. Yeah, how do you disclose the bug without disclosing it? I guess.
00:07:41.730 - 00:08:09.414, Speaker A: Well, that was. I feel. I feel bad not knowing the guy's name. The guy that met him at Denver EcC or something. No, it was an ETH Prague, the guy who did the ZK proof proof of bug concept, which I thought would be a game changer. I still haven't looked into it in depth, but, yeah, you're proving it using ZK to say, hey, look, exploit works. You just don't know how I did it, which I think is really cool.
00:08:09.414 - 00:08:56.470, Speaker A: And I think that's, honestly, that should be the future of this, because right now it's like, all right, hit them up in telegram, get everyone there, and then here's what it is. And then you can't share your findings right away because then you give up all your leverage. Or then they could just say, oh, yeah, we knew about that, which I've had happen to me, you have to say, all right, so my bug is centered around this. Do you have any existing vulnerabilities out there that you know about? And this is frequently the case with big projects. They'll pile up their list of bugs. If they're not mega critical, they'll wait for the next version to update all the contracts. So you kind of have to feel them out and say, okay, let's establish, do you know this bug exists or not? If you don't.
00:08:56.470 - 00:09:15.658, Speaker A: Okay, then here's what I kind of. I think this is a critical blah, blah, blah. And then if you kind of get a good vibe and hopefully you can get a recommendation from somebody else that the team is legit, then you share gifts with them and then kind of go from there and cross your fingers.
00:09:15.834 - 00:09:27.360, Speaker B: Yeah. I think even disclosing that there's a bug, initially, they could just not even accept it and then go look at the contracts themselves.
00:09:27.890 - 00:09:39.958, Speaker A: They're not going to find it. These are things that have been sitting there for ages, and you just don't be specific about it. Just be like, hey, I can take this amount based on this very broad kind of idea.
00:09:40.044 - 00:10:01.440, Speaker B: But I guess there's also the thing of if they don't want to pay, it's always good to ask beforehand before even disclosing that you found something. What's your process for? I guess like bug hunters finding something, because then you can kind of get the feel before you release any information. At least that's what I would do.
00:10:01.970 - 00:10:43.110, Speaker A: My best interactions have been where I know I've already got a heads up from more crypto ogs that will connect me with them saying, hey, this team's legit. They know what's up. And so some teams that are just unknown, it's a bigger risk. So I like to kind of get the inside tracks. Hey, who are the devs behind this? What's up with the bounties? And most of them are all serious about security. So it's the outliers that kind of fuck up the ecosystem when there's too many investors involved, too many board meetings and stuff like that, where things can get, or too many egos, honestly, that can just kind of. They don't want to admit they were wrong or they made a bug.
00:10:43.190 - 00:10:47.978, Speaker B: How do you determine what projects you want to look into as well?
00:10:48.144 - 00:11:25.666, Speaker A: Anything that's not fork, to be honest. If it's a compound fork, I just don't give a fuck. I'm so tired of looking at forks. If they fork something and then they said, hey, we're going to modify a bunch of code or we're going to change it up a bit, then I take a look. Honestly, I do it for personal curiosity. I don't really look on the Bug bounty platform pages anymore. I just look at what projects are out there, who's announcing on Twitter, and I just dive in and like, well, like, what are you trying to do and how are you trying to accomplish it? And if it's something unique and cool, then I'll just read your contracts.
00:11:25.666 - 00:11:50.414, Speaker A: Just out of interest, how are you doing it differently than the hundreds and hundreds of contracts I've looked at, where I've seen this kind of function implemented? And you're doing it this way? Oh, why are you doing this way? Gas savings or whatever, just curiosity drives me, and I think you have to have that in the space. If you don't like what you're doing, you're not going to last. You're going to hate it because you're not getting paid all the time.
00:11:50.612 - 00:12:05.314, Speaker B: Yeah, it's really like a passion thing to be consistent, I think. I don't know if money can be every day. Yeah, I don't know if money can be like 100% driver, eventually it fizzles out, I think.
00:12:05.432 - 00:12:45.022, Speaker A: Yeah, I'd agree with that. You get to a point in crypto, you have broke people, and then you have fucking mega millionaires, billionaires, and the dichotomy there is always present at crypto events or online whatever, but it's like once you hit whatever your number is, where you can order the steak off the menu and you don't really care, whatever that is, where you don't worry about your rent payment. Well, then you're like, all right, what am I doing for fun? Why am I doing this. So it should be a passion in my eyes, because that's what I do. This is a passion for me. It's very interesting. It's like a puzzle.
00:12:45.086 - 00:13:09.430, Speaker B: Yeah, I think if you make enough to just live comfortably, for me, I really only just pay rent, just get high quality food, and that's really it, Sarah. Anything that kind of covers that for like a year, it just is fine. Then you just do whatever you want. Just learn basically continuously until you level up, upskill, get to that next level and just continue.
00:13:09.500 - 00:13:45.330, Speaker A: I think that comes with age, too. I'm probably older than most of the guys in the space, but once you get out of your, get past this materialistic lifestyle, you don't need all these memes, you don't need Lambo, you don't need all this bullshit. That's just more of a burden for your life. You just need the freedom to do whatever you want to do at any time. Not having to wake up with an alarm clock or get on a call with anybody, that is ultimate luxury. Living wherever you want with a laptop, just doing whatever you want is the best, and you don't need that much money to do that.
00:13:45.400 - 00:14:31.918, Speaker B: Yeah, I agree. I definitely taken that approach as well. It's more of, okay, how can I make passive income instead of exchanging time for money? And if I can reach the bare minimum bar requirement to basically live comfortably with passive income, then that's the ultimate freedom, right? And then you can just kind of invest in passports, locate across the world, and just keep learning. Otherwise, if you're stuck to like a nine to five, are you really learning that much? I think you hit like a point where you stop learning as much as if you were to do it solo and doing your own research all the time. At least that's what I've kind of realized. And you got to kind of identify when you've got to detach and outgrow the current environment.
00:14:32.014 - 00:14:34.402, Speaker A: Yeah, absolutely. Totally agree with you.
00:14:34.536 - 00:15:05.360, Speaker B: You choose a protocol, right? What is kind of your main strategy for looking at it? Are you really just looking for criticals or are you actually just trying to understand everything? There's been people that specifically look for what handles the money. If I follow this path, everything that depends on it or everything that is a dependency of it, and they follow that path of everything that is correlated to it, and they find nothing, they move on, they don't read the rest of the code.
00:15:09.650 - 00:15:44.090, Speaker A: It depends how lazy I'm feeling, how much TVL is locked in there. Is it interesting? Some people will have a totally different. I think everyone has a different method. I've seen people put pictures of their whiteboards up and it looks like that meme with the guy connecting all the things. Yeah, I've never done that. And maybe a couple of times when I was stationary and I had a whiteboard, I drew some things out. But find, like, I've been traveling for the last nine months and I don't have that luxury of my office, but I just keep it all in my head.
00:15:44.090 - 00:17:09.078, Speaker A: And I have notes MD, but for the most part, I'll look at a protocol and then maybe I'll do some pattern searches like for some low hanging fruit and just say, okay, did they miss any of these things? And if they didn't, and it's interesting, I'll just start browsing the code. Then I'll say, all right, I'll just start reading it and just look around. Different functions. I think naturally you start at the functions that move the money and just kind of expand from there and just see what things do. And then if it sucks you in, then you kind of think about, well, how would I do something completely unexpected? Like, maybe you'll check out the tests, see what they're anticipating, and then just think about, well, what if I do this? What if I do this? And I think the more ridiculous your actions become and how far away you can think from what the developers were thinking might lead you on a good track for finding a bug. And you can kind of discern that from the code. Once you start reading the code and once you start looking at the tests, you can see how much the developers focused on user experience versus security and how much review they've had.
00:17:09.078 - 00:17:43.306, Speaker A: And some code is just shit, man. You've coded things and it just works. You see some of the contracts out there, you're like, oh my God, this just barely works. But it's zero one, it works or doesn't, but in the dev's mind they're like, oh, it looks like fucking trash. It's an embarrassment. And then you see some code, it's just like some projects just repeat this amazing speed and just developing proudness, and they're really impressive. And you know those devs are on point, but then it's permissionless.
00:17:43.306 - 00:18:09.258, Speaker A: So there's a lot of sloppy devs too. So there's bugs to be found in either one. It's just like eventually someone's going to make a mistake when they deploy it, when they update it. When you see a console sol deployed to mainnet, or you see just some comments shouldn't be there. It's like, okay, well where's your attention to detail? What else did you miss?
00:18:09.344 - 00:18:44.750, Speaker B: There's always some slip up somewhere. It's hard to be 100% secure unless possible. Yeah, unless you give up something vital. So I guess like decentralization to a degree, or just like really hard, strict requirements. There's just so many factors, and especially with game theory as well. Like how are other protocols interacting with this external dependencies? You can just check the addresses in the contract itself. Let's say it's like a master chef, or let's say pickle, pickle finance.
00:18:44.750 - 00:19:16.560, Speaker B: You create your own jars, right? So then it brings in this whole kind of new realm of possibilities with, okay, you can make this jar custom interface. Well, it adheres to the interface, but it has custom functionality within it. Right. So then this is stuff you don't even really think of unless you have those strict requirements in place, which obviously they didn't at the time. So then that's kind of where all the massive criticals are as well.
00:19:17.970 - 00:19:54.378, Speaker A: Look at conic just a couple of days ago, it's like, oh, there's one thing we missed with how curve was treating the ETH address. It's like, yeah, you do this composability and just pile on things, man. It gets so cool. And then you add in the cross chain stuff. There's errors out there, man. And I think an important thing for new guys to look at this stuff, even experienced auditors, is like you look at the code, you're not finding anything for hours, and you're thinking, oh, it's zipped up tight. You had all these big name audit firms on it.
00:19:54.378 - 00:20:09.200, Speaker A: There's no way anything got by them. But there's always something in there, like guaranteed there's some flaw in your code. I don't care if it's a low or there's something in there that's just not 100%, you just have to find it.
00:20:09.810 - 00:20:59.486, Speaker B: Yeah. And for me personally, I've actually experienced two giant hacks before they've happened. So I'll just play reading their code, and then maybe like next week or next couple of days, a massive exploit happens on that code base that I was literally developing with that curve. One, I remember implementing curve for a custom contract and I noticed that they use that custom functionality for ETH. So you can choose we or ETH, right? And it does like this check. And if you're transferring ETH, you can do a reentrancy on that or read only reentrancy. So I actually reviewed it for a whole week, and my mindset wasn't even in that security mindset, so I just went over it.
00:20:59.486 - 00:21:04.970, Speaker B: But then the next week it just happened. I'm like, okay, that's happened.
00:21:05.060 - 00:21:17.990, Speaker A: Yeah, it's happened to me. It doesn't click. It's like something goes off in your brain. Like, that seems weird. Maybe I should put that down in notes, MD a little asterisk and come back to this at some point.
00:21:18.060 - 00:21:48.254, Speaker B: Definitely need that intuition to notice the stuff. Otherwise you're in that dev mindset without the security mindset. I guess the security comes after, I feel like. But if you're implementing another protocol and your intention is to create instead of, I guess, analyze, for me it's quite different. But then again, I haven't developed the kind of manual auditing thing. No. When do you choose to stop reviewing a code base?
00:21:48.452 - 00:22:28.394, Speaker A: It all depends. It just depends how much time I want. I'll get exhausted sometimes and just kind of burn out on a code base. But I'll make notes and I'll say, okay, here's what I found so far, and I haven't found any way to flip this into maybe it was a low. I haven't found any way to flip it into a medium high. So I'll come back maybe a month, two months down the line, who knows? But I have a little file that I just keep on projects that there's open vulnerabilities on, or there's things that could be exploited in the future, or maybe I just need to dive deeper. Like, there's one I'm working on right now.
00:22:28.394 - 00:23:19.498, Speaker A: I almost finished the POC and this project, I started looking at it two months ago, and I had a couple of notes written down. I was like, there's a bug here, and I just can't find a way to exploit it. And then hopefully I can confirm it today. But it's like I found a new angle to look at it where it says, okay, I don't need to steal money here, but what if I can, let's say, never be liquidated on this protocol? And I was like, oh, that could be kind of cool, too, but it's like, okay, well, what can I do if I can't be liquidated, for example? Well, what does that do? What are the ramifications for that? So I'm just diving deep, but sometimes I just get burned out on a protocol and I'm like, fuck this, man. There's nothing here. We're like, looking at. What was I looking at? Makers, contracts, one day, and I was like, man, fuck it.
00:23:19.498 - 00:23:31.182, Speaker A: Naming it, all these weird things, these autistic guys. It just wasn't interesting. Like, to decode all that and everything, forget it. There's so many different code bases to look at.
00:23:31.236 - 00:23:37.902, Speaker B: The interesting criticals are like, the liquidation one is quite interesting, because it's not something you'd think of generally.
00:23:37.966 - 00:24:11.994, Speaker A: Yeah, it's like a different angle. That is, my goal is to not find bugs that we already know about, and for the most part, like, pattern matching and stuff doesn't really work. I found the same kind of bug maybe a few times with finding a certain pattern, but in general, it doesn't work. And the code bases are unique, and you kind of see a different angle of a bug each time. So really, nothing for me replaces reading the contracts. You can't do finds and searches through vs. Code and all that stuff.
00:24:11.994 - 00:24:47.110, Speaker A: It's like you have to look, see how it functions, and then say, okay, well, he's doing it this way. You still need the human brain to kind of decipher the vulnerabilities. GPT is worthless, except for maybe commenting on how certain assembly blocks work or things that will save time. But even then, it could be wrong, and you kind of have to know enough to be able to discern when it's wrong or not, too. But right now, humans are still the best tool to use here.
00:24:47.180 - 00:25:34.962, Speaker B: Yeah, I think humans have not been replaced. It could be replaced in the future with AI, depending on how good it gets. But the hardest thing is really creating a generalized kind of model to understand a protocol and what it's trying to do. That's the biggest thing. And that's why you can't really generalize, because maybe a protocol doesn't use ERC 20s, but has shares, right? And that's its accounting system, instead of tokens being sent to the contract, and then it uses efer in that way, or just some in game currency, which is just a number, not really any tokens. So then you can't really generalize of, okay, where's the money? Because you don't know what the money is at that point. You just have the storage slots.
00:25:34.962 - 00:26:18.386, Speaker B: Yeah, even with that liquidation, like, non liquidation kind of thing, you really can't generalize that either, because you don't know what it's doing overall. And if you try to automate, you wouldn't know. I guess you could if it gets really good at heuristics. But even then, generalizing that kind of vulnerability, you still don't know what the money is. But I guess if you did know, let's say it is an ERC 20, it would be quite difficult to see. Okay, can you liquidate this? It has to build like an intuition of some sorts of what's happening, like the overall structure.
00:26:18.578 - 00:26:54.682, Speaker A: It sounds like a tremendous amount of work. Probably you somebody's going to do that and develop something successfully that will be able to train or something like that. I don't know how many years I have doing this before everything improves. I mean, solidity is not at version one. We're still early. You look at chat, GPT, you look at so many different innovations now, and it's just rapidly evolving. I don't know how many years where I'll be able to continue to find vulnerabilities.
00:26:54.682 - 00:27:28.506, Speaker A: There's a lot of competition coming in. I see more and more people shifting to Viper too. But Viper's got bugs as well, just not as cool of bugs as solidity, I think. I mean, there's always going to be bugs, whether it's in rust, whether it's in Golang, whether it's in whatever supporting these systems. But I think it's just going to get better and better. Where we have these automated tools finding things, there's going to be maybe like code arena expands more where they have like live monitoring as well. And you have so many people wanting to do it.
00:27:28.506 - 00:27:45.840, Speaker A: You have all these human eyeballs on your code. I don't know, man, I think it's just the meme. We're so early, but we are, and it's so cool just to see how this kind of evolves and where people put their minds to and their resources at.
00:27:47.250 - 00:28:31.274, Speaker B: Yeah, I agree. I think we are quite early. But it's also, if you're in the position of innovation, even it's a very small group, you still worry about people beating. It's still a race, even at every stage. I'm developing that as well, and it is a problem I'm trying to solve the generalized kind of vulnerability stuff. But I do think AI is going to be a force to be reckoned with soon, and even I'm worried about that. As a developer, AI will eventually just be some superhuman that the person developing the AI can just control or command.
00:28:31.274 - 00:29:31.154, Speaker B: So basically you won't really need developers because the best developer, you just have access to control. I mean, that's what I think is the future is going to be like right now. I always try to upskill as much as possible. So let's say I learn half right, I go into automated tooling from that automated tooling, doing fuzzing. It kind of relates to AI, so learn AI from that. And then it just kind of spirals do like two things simultaneously and then just research on what's currently out there in the market, what's kind of like the hot topic. Why is it the hot topic? And I think once you understand a field in depth as well, understand what's out there, read research papers, look at all the code, what are people's problems? You can identify what's missing and attempt to bring that missing piece back in to the puzzle and fit it in.
00:29:31.154 - 00:29:35.454, Speaker B: And then you look for the next piece. I guess it's kind of been my methodology.
00:29:35.582 - 00:29:41.554, Speaker A: Have you looked at the new echidna that just dropped where they have the on chain fuzzing?
00:29:41.602 - 00:29:49.162, Speaker B: I haven't looked deeply into it, but I have known about it. Medusa. The names are interesting also.
00:29:49.296 - 00:30:43.098, Speaker A: I think there's going to be more bugs found that and these will be some monster bugs will be found with people understanding and challenging underlying research and assumptions. Especially for some of these maybe ZK protocols. I remember the heartbleed bug. I want to say last year it was a think about who it affected. Maybe it's trail of bits that found it, but it was a bug with the. I'm going to misspeak here some cryptographic bug because the research was based on, I think, flawed assumptions or something like that. But in order to find the bug, you had to go back to the actual research paper where they're drawing all the math, everything, and they're saying, hey, here's how you do it.
00:30:43.098 - 00:31:22.534, Speaker A: But there was a flaw within the research, I believe. So how many people are going that deep on a lot of this stuff? I don't think many are. It's like I talked to the average solidity dev or something. Okay, you know, solidity and you know some EVM sub bytecode, right. But you're not reading the yellow paper on ethereum. Like do you understand this math behind these things? How deep will you go? And most people, I think don't go well, I know most people don't go to the root. And that's with so many things.
00:31:22.534 - 00:32:01.198, Speaker A: You're going to learn to code. You're not going to understand TCP IP at a granular level, you're just not going to. But if you do know that, then you better understand the whole system and you can just approach things differently than the next guy. And I talked to like for an example, I talked to these devs working on ZK field and they say, hey, have you ever looked at ZK circuits? And I always say, no, I haven't checked it out. And first time I said that, guys, we barely understand them. We can't find anybody to audit these. I said, you serious? Yeah, it's so complicated.
00:32:01.198 - 00:32:42.670, Speaker A: And I took a brief look at it, and I'm no moon math guy. And I'm looking at this, I'm like, what the fuck is this? And the way I look at new things is like, what is my opportunity cost at investing x amount of time into this? And what are my returns going to be? And if I see something like, let me go back to whatever I'd learned. Calculus, okay, now, what do I have to learn here? How many months is this going to take? And how many contracts am I going to miss out on reading and bug bounties for me, I can't approach it. But some people, there's money to be made there, no doubt. Get the big brains in there, and there's a field for you if that's your thing.
00:32:42.740 - 00:33:24.160, Speaker B: Yeah, I definitely agree with the opportunity cost. You got to look at it from a long term perspective, because I guess what you're doing now is so temporary in the grand scheme of things, because automation is such a big thing now, and you got to think of it as, how can you upscale while simultaneously doing what you're doing? So it's really just managing priorities, I think. So what is a priority right now, and what is priority in the future? Future is obviously learn. You can't evolve if you don't learn, right? That's kind of what gives you value. And how you develop a niche is by learning, figuring out new things. Oh, you figure out that stuff. It opens a door to a whole new world.
00:33:24.160 - 00:33:50.454, Speaker B: It's like entering a cave and taking one path and lighting up the torch and seeing there's actually two paths at the end. You don't know what you don't know, right? So the only way to kind of get to that point is to try things as much as possible and learn as much as you can about those things at the root level so you know what's possible, first of all, because you can't innovate if you don't know what's possible.
00:33:50.572 - 00:33:57.942, Speaker A: And this is why you need to be motivated by more than money, or you won't make it. You won't want to dive that deep.
00:33:58.006 - 00:34:45.286, Speaker B: I think in technology, it's not money motivated, but more, what can I invent? Because it really is just inventing. Once you hit the pinnacle of your field, what is already out there, what's not out there, and you can identify what's missing. And if you're creative enough, you can think of new ideas which kind of, like, spark a whole new revolution in that field. So I think that's kind of like the best part of it. Like satisfaction of kind of reaching that point rather than the money. Because if you get to that point right, I think it's quite easy to make money if you're really good at what you do and you're inventing stuff that people want, you're fixing problems. That's what people pay for.
00:34:45.286 - 00:34:47.362, Speaker B: It's like a transfer of value.
00:34:47.516 - 00:34:50.378, Speaker A: Save time or save money. Yeah.
00:34:50.544 - 00:35:19.922, Speaker B: So I don't know. That's kind of my perspective. I think innovation is like satisfaction. Being able to say, yeah, I did that. Or I discovered this is way more fulfilling than some money because I think you reach a point where money is kind of not, doesn't improve your life significantly. I guess. Let's say you had like $1,000 and you make a million.
00:35:19.922 - 00:35:33.160, Speaker B: That's obviously a massive lifestyle change. But if you had, let's say, 10 million, then you go to 100 million. It's not completely changing your life as 1000 to 1 million would be, if you get me.
00:35:33.610 - 00:36:09.374, Speaker A: Yeah, it's pretty silly, to be honest. I think it's more important to find a balance. And also you got to have the three w's, right? As a man, you got to have your woman, you got to have your wallet, got to be full of cash. And the biggest thing that everyone misses is your waistline, especially in crypto. You can't be this out of shape, dude. Okay? If you're in your 20s, great, man, but you can't maintain what you got with those same habits when you're in your. Met a bunch of auditors at SCC.
00:36:09.374 - 00:36:48.206, Speaker A: We had some lunch, and some were fit, man. Some were looking like they needed to go run a few laps. And we did something funny on Twitter. I did a pull up competition. Suddenly everyone's jumping in, suddenly got traction. But it was funny because there's other people out there that enjoy that balance, and then there's others that in this field, especially people, are on their computers and devices all the time. It's like, I understand that, man, but you need to get out for just 30 minutes and go exercise hard and then go back to whatever you're doing.
00:36:48.206 - 00:37:10.118, Speaker A: And if you keep that pace up, I guarantee you're going to be so much better off when you hit 40, when you got money, you got your girl and then you don't look like a piece of shit. You still look like you're 30 when you're 40. And I hope people grasp that, how important health is versus anything else in this world.
00:37:10.204 - 00:37:46.420, Speaker B: Yeah, without health, you can't. I mean, you have nothing. Yeah, exactly. If you're 30 and have horrible health, then what's the point of having 100 million? Sure, you can kind of spend that to fix your health, but nothing's going to fix it compared to taking care from an early stage and having the right diet, the good habits, not slouching all the time, working out. Yeah, if you have health, you have more time, basically to accomplish what you want.
00:37:47.910 - 00:38:43.570, Speaker A: We're in like a modern day paradox where everyone in our industry at least, are on the computer and you have to seek ways. You pay people to force you to do physical exercise with personal training, with stupid class, whatever, because life is so easy, friction free and on cruise control all the time, and you can have food delivered to you, and it's just amazingly easy. You have to personally seek out, how can I make my life harder physically? Whether that be not having a car, whether that be you name it, but just make it harder for yourself. Don't fall into that trap. You just become this pasty soy chump that's going to jerk off to porn and not chase women. And low testosterone. It just doesn't end well.
00:38:43.640 - 00:39:47.110, Speaker B: Yeah, I think you need hardship in your life. And in an era where everything is trying to grab your attention, we have algorithms that capture our attention and build habits, negative habits. It's actually quite hard to detach once you're in it. So I guess, like, having routine and positive kind of habits is the main thing to strive for and realizing that as well, like, kind of taking a step back, third person perspective, objective point of view, looking back, or looking at your life currently, and what are you doing right? What are you doing wrong? Even just writing that out, like, what things you do you don't like and what things you do you do like, that would give you a massive kind of wake up call. I've done that as well. And once you write it out, it really makes it predominant that this is something you need to change. And even just writing down who you want to be as well.
00:39:47.110 - 00:39:49.794, Speaker B: And what does that look like, for example?
00:39:49.932 - 00:39:50.970, Speaker A: Totally agree.
00:39:51.120 - 00:40:31.110, Speaker B: I want to be an innovator. Right. Okay, let's kind of narrow that down a bit more. What do you want to innovate in? Okay, let's do automation. How do you get to that point. What does that look like? What does someone top of this field really look like? Are they really on social media for 4 hours a day? Are they looking at adult films like twice a day? Do you really think someone at the top of their field is doing that? What is the ideal kind of scenario of someone, this person, this character that you want to be? What does it look like? And once you know what it looks like, you have a target. And if you have a target, you know what to walk towards.
00:40:31.110 - 00:40:40.794, Speaker B: You can't really have, like, if you don't know what you want, how can you walk towards it? Right? Or work towards it? And if you don't know what the person looks like, how do you know what to become?
00:40:40.912 - 00:41:28.758, Speaker A: It's a great question to ask oneself. Who do you want to be? You only have a finite time on this planet. Who do you want to be? How do you want to live that life? What are your goals? It's good to reflect as a man and just think about that every now and then. Especially if you feel like you're just on a meandering path. Just think about who do you want to be? What kind of mark do you want to leave? Do you care if you leave a mark? But how do you want to be known to people? Do you give a fuck if how you're known to people? All these things. You need to choose your life path, at least have an idea and not just be on cruise control, being pushed around by external forces. You should have an idea because it's your life and you only have one chance here.
00:41:28.758 - 00:41:29.046, Speaker A: Yeah.
00:41:29.068 - 00:42:08.210, Speaker B: And I think the only thing you can really control in life is your mind as well. Once you can kind of conquer that, you can really kind of do anything. I think that's where all the power. And I think for me, I experience mortality pretty early in life, and that's given me a wake up call of, okay, you really do only have a finite number of years that you could die in your really. It's actually uncontrollable. Sure, you can do stuff to mitigate it, but it's really up to chances. I think once you realize that, you got to think of what's really important to you.
00:42:08.210 - 00:42:20.730, Speaker B: Is money really that important? Or would you rather go spend time with family instead of making, let's say, 400k this year? Because money comes and goes, but time doesn't come back, right?
00:42:20.880 - 00:42:50.178, Speaker A: Yeah. And you realize you remember the experiences, and I've always chosen experiences over money my entire life. And once I hit a number that I thought during the bull run. I hit a number that was in my head, like, oh, wow, this is what I wanted. And then you achieve that number and then that's really a turning point where you realize, like, well, this is it. This is the point. I could buy some new stuff to replace the old stuff.
00:42:50.178 - 00:43:32.158, Speaker A: And now what? My life is exactly the same. And this was supposed to be the quest I was put on. That's what everyone told me to do, was to go make money. And then you get there and you realize, like, well, this is pointless, this is really dumb. But I think many people are tricked by that, and especially young men, because they want to compete with other young men for women. And you have to show status and money and you can care for people and so you have to earn some money. And so it's never going to stop people competing for cash, but you don't need that much, let's just be clear.
00:43:32.158 - 00:43:44.450, Speaker A: But I think it requires people to hit that personally to realize that unfortunately. Yeah, it's interesting philosophy talking about all this abstract.
00:43:44.790 - 00:44:03.260, Speaker B: Yeah, I think it is important long term. It all kind of comes into the game. But just to switch topics, what do you think separates a good order from an elite one? Because I think it's like that intermediate to advance luck. Oh, really?
00:44:04.750 - 00:44:35.202, Speaker A: I'd say maybe this makes me good or better. I don't know. I think a few things. So one, like I said, it used to be in the military and then in investment banking. Both of those environments are very much attention to detail is really pushed into you hard from the military is like everything's got to be correct. And that's because you can kill someone or be killed if things aren't correct. That's why the uniform is correct.
00:44:35.202 - 00:45:17.630, Speaker A: All these details matter. Same thing with banking. If these details aren't right, who cares how it is on like a PowerPoint? If that's out of line, it still sends a signal to the client you're pitching. Like, do they know what they're doing? And maybe they don't choose you for this multi hundred million dollar deal. So these details are just like, you have to be on point and people would call you out. And it was an environment in both situations where everyone's on each other for details. So you transfer that over to auditing and it's like that's what you're looking for, is like the details in the code that the next guy overlooked.
00:45:17.630 - 00:46:10.290, Speaker A: Maybe that is a good attribute for an auditor, is attention to detail. Number two, I think is like we talked about, interest in the field, creativity, thinking, like a hacker, you have to have that kind of mindset. If you're the kind of guy who is in real life, like you pass by a gate or a building and your pen testing mind comes out and you're like, that door looks insecure, that might benefit you in the space too, because you're like, wait a minute, why can I withdraw before I deposit? Just playing with a contract. And then I think the last thing would be just simply doing the work and being consistent. It's not to be at an elite level or to exceed in the field, with any field, to do what you're doing, to do what anyone's doing. You can't do it half assed. You have to do it.
00:46:10.290 - 00:46:17.282, Speaker A: You have to go full seven days a week. You have to go hard. If you're not putting the time in, well, don't expect any good results.
00:46:17.346 - 00:47:01.886, Speaker B: Yeah, I agree. Someone that is just naturally good at it will never be better than someone that's putting in the work every day, every hour, trying to learn and upskill as much as possible, because you also build intuition from experience so you can have natural intuition, great. That's like an edge. But if you don't leverage that and continue to work, then there's really no point in it. You got to realize that other people are on the same path and are competing with you, and the only way to compete is to do what they're doing or do it in a different way. That kind of suits you. But ultimately it comes down to experience and intuition.
00:47:01.886 - 00:47:38.080, Speaker B: That's the only real way. How can you get the most experience? How can you learn from that? Learn from these experiences and from those learnings? How can you apply it? Because that's how you build connections. You can't really just read something and understand it completely if you don't apply it. It's kind of just like with school versus going out into the real world. You only really understand the real world once you get experience. Sure, you read about it, but you won't fully understand unless you do it. And I think that applies to everything, actually.
00:47:38.850 - 00:48:14.540, Speaker A: Yeah, it's like the misconception about school, too, where you're in school and the kid got an a and you got a c, and you go into school and you just see the kid at school and you're like, oh, I'm dumb, he's smart. You don't realize. You go home, you don't study, you don't do any homework, and that kid is two, 3 hours a night studying, doing homework, and people think like it's always a genius. No, he's just put in the work. And to be honest, that's most of life in my experience, is you put in the work and results will show themselves. That's it. Probably a meme about that somewhere too.
00:48:16.350 - 00:48:20.970, Speaker B: You always see this stuff, especially with sports. You're like, oh, put in the work. We have a talent.
00:48:22.530 - 00:48:48.434, Speaker A: I think sports is different. You have natural ability and then you compound. But same with our field. If you're gifted mathematically, you're going to look at a flash loan exploit or something like that quicker than I can look at it and you could use that to your advantage. But if I still put in the work and there's no time limits on these things, then maybe we reach the same conclusion.
00:48:48.562 - 00:48:57.990, Speaker B: Yeah, you can put systems in place to help you and assist you. On that note, do you use any tools at all to kind of assist you?
00:48:58.060 - 00:49:33.086, Speaker A: There's a few websites that I use. Someone just turned me onto it. I was searching for contracts deployed on Etherscan, which has the worst search ever in the world, and someone turned me on to like code slaw, which is pretty cool. There's sites popping up all the time that kind of help you look through deployed contracts on blockchains, which is kind of cool. I use some foundry for looking at storage slots using cas that's easy enough. Someone built a web tool for it which now I'm using that just because it's easier. And then there's like EVM storage.
00:49:33.086 - 00:49:35.074, Speaker A: I think that new sites out. That's great.
00:49:35.192 - 00:49:36.020, Speaker B: Oh yeah.
00:49:36.550 - 00:49:57.370, Speaker A: What's that other? Is it infosec or. One of these teams put out some plugin for brave and it's like I can't think of it. But unless you view same as kind of EVM storage, maybe they put out the same thing. Blocksec. I don't know what the team is. All these free tools out there that just help you kind of dig in deeper. So I use those.
00:49:57.370 - 00:50:22.340, Speaker A: I don't fuzz that often, but I do use like echidna for that. I know Foundry does it. I usually test in hard hat just because I'm so comfortable with it. But I do modify people's foundry tests. I found that to be easier sometimes to use foundry, but I'm indifferent really. I like using both to test and run Sims vs code obviously is my id and I don't think there's any product out there that beats that.
00:50:24.310 - 00:50:32.626, Speaker B: What do you think is missing from the tooling kind of area now, what problems do you kind of face as.
00:50:32.648 - 00:51:16.234, Speaker A: An order right now I've tried a few different because I mean, honestly, it comes down to reading the code and I think all the tools exist out there. Like even simulating storage at different blocks, that capability is there too. I think all the tools exist, but like vs code plugins I found had some pretty good utility recently. There's some audit one, there's like categorizing things just to kind of keep better tabs on where you're at in the project, where your notes are, those have been helpful. But as far as anything missing other than, hey, tell me where the bugs are in here. Nothing really. Maybe easier ways to kind of set up an environment for certain projects, especially bridging projects.
00:51:16.234 - 00:51:29.510, Speaker A: Like we have to set up a docker and all this kind of stuff, all ad hoc depending on each project. They're all different. If there was some unified thing to make that easier, that would be cool.
00:51:29.580 - 00:51:50.494, Speaker B: Yeah, I think tooling would get much better, especially with chat GBT. You're able to summarize and see all this stuff soon. Yeah, quite interesting. But we are getting close to the end. I would like to thank you for coming on and it's been a great chat. I very much enjoyed this. It's great to jump into philosophy a little bit as well.
00:51:50.494 - 00:52:08.294, Speaker B: The technical side, I think it's essential and very motivating as well. Helps you realize, kind of gets you on track to becoming most optimal again, more efficient instead of just the underlying technical things. Yeah. Thank you so much riptide for jumping on. I appreciate it.
00:52:08.332 - 00:52:25.398, Speaker A: Yeah, thanks for having me shout out to the world's best gas auditor, Harrison, whose episode is pretty good. But yeah, man. No, it's great that you have this podcast and I'll follow you and love to hear more about your projects going forward.
00:52:25.484 - 00:52:46.302, Speaker B: Sure. Yeah. And if anyone wants to suggest someone to come on the pod cast, just dm me at scrapingbits on Twitter or email me at scrapingbits@gmail.com with your suggestion and I'll take a look at it. Otherwise, thank you so much for listening and I hope you come to another one.
00:52:46.436 - 00:52:47.500, Speaker A: All right man, later.
