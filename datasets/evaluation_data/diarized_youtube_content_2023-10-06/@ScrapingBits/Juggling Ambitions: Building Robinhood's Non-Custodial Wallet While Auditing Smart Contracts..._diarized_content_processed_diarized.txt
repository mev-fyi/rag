00:00:00.170 - 00:00:34.822, Speaker A: The biggest problem in the space, not just for tooling, but even just for auditors in general. And I think part of the reason why, like we just talked about a lot of people on C Four are getting hundred dollars per contest or whatever, is because they're not going up. Those those extra levels in thinking at the game theory level about if I take my big trade and break it up into a million one way trades, what changes about this protocol or whatever? Right? This is a good example of like, thinking above just what does the code say? Right? And then you can can play with those ideas. And that's something I don't think the tooling is ever going to be able to do. And that's part of the reason why you still need top 1% smart contract auditors is because they're able to think above the code.
00:00:34.956 - 00:00:40.780, Speaker B: Dmgm. Everyone, I am Digatchi, your host. And I am with Jackson. How's it going?
00:00:41.150 - 00:00:45.754, Speaker A: Hey, everybody who will eventually be watching this. Hey, dude, how are you?
00:00:45.872 - 00:00:50.826, Speaker B: I'm not bad, thank you. So let's start off with what you do.
00:00:50.928 - 00:01:19.830, Speaker A: I guess before we get into all that, it probably makes sense for me to talk about some of my background and all that stuff. What I'm doing right now, though, right now, is I work at Robinhood. I'm working on the there's a noncustodial wallet that they launched recently. It's sort of a competitor to the coinbase wallet. I sort of worked on that from the beginning. So shipped all the code and got it out the door, got it to market, all that stuff. And then all throughout that same time, I've been working as a smart contract auditor for a bunch of different auditing firms.
00:01:20.650 - 00:01:33.702, Speaker B: Yeah, I saw that. So you're working with Oak Security and just doing like a partnership with a whole bunch of other ones and you're kind of like aggregating people's submissions I saw on your Twitter.
00:01:33.846 - 00:01:42.330, Speaker A: Yeah, I actually just started that, whatever was yesterday, whatever. People kept telling me like, dude, you're not using your Twitter appropriately.
00:01:43.230 - 00:01:43.690, Speaker B: Really?
00:01:43.760 - 00:02:03.730, Speaker A: Yeah. And so eventually I was like, okay. I think it was a couple of things happened at the same time. And so I was finally like, okay, I'll give this a shot. I saw a bunch of other people putting like DM me for audits in their Twitter BIOS and stuff. I kind of treat my Twitter like a giant A B test where I'll just try stuff and see how it goes. And if it goes well, I'll double down on it and keep doing that sort of stuff.
00:02:03.730 - 00:02:12.280, Speaker A: So this is kind of an A B test where I'm like, let me see if this works. If it works, I'll keep doing it. If it doesn't, I'll rip it out and put something else there.
00:02:12.890 - 00:02:19.260, Speaker B: Yeah, just trial and error and I'm sure you get a commission or something for this kind of stuff.
00:02:20.030 - 00:03:16.220, Speaker A: That would be the idea is like, okay, I know every single auditing firm I work for is always looking for work, and so they all have different commission models, right? So I think one of the things I've noticed giving talks about smart contract auditing is sometimes when I give the talk, it's to people who are like, protocol developers, and they're not security people, and I realize what an endless sea of information it is for them to figure out, okay, I finished my project. Now what? Right? And so the way I'm looking at it is I can help the protocol devs navigate, like, okay, where should I be sending this work to in order to get the best price for the proper quality, for the best expertise of whatever it is I'm launching? And then on the other side, for the auditing firms, they're looking for work, right. And so I can kind of help those two parties come together and end up hopefully making it successful for both of them.
00:03:16.670 - 00:03:27.150, Speaker B: Got you. And how did you get into all these auditing firms? I'm sure they have some tasks to get in. For example, Spearbit has their assignment. Sure has their own assignments.
00:03:27.890 - 00:03:55.830, Speaker A: Everyone's different. So, yeah, it was just basically when I was very first starting, I didn't realize I could become a smart contract auditor. I have to credit Christophe Michel for that. I was studying security mostly because I was like, okay, I want to fork a project. This is like the last bull run where it was like, take Uniswap. Yeah, put it on polygon, and make a couple of million. So I was like, I'll do that.
00:03:55.830 - 00:04:32.654, Speaker A: Why not? But I knew if I get hacked, that's the end of the project, right? And I lose all credibility. And so I was like, okay, I need to know security enough so that if I forked Uniswap and changed variables, I knew which variables were okay to change along what or whatever, right? So I started studying it, and I found Christophe's blog, and he had written up a blog about the last paradigm CTF. And going through that, even though I wasn't into CTF, I was, like, reading a bunch of the post mortems afterwards because I missed it. I was actually into security during the CTF.
00:04:32.702 - 00:04:32.866, Speaker B: Right?
00:04:32.888 - 00:05:09.966, Speaker A: And then I got into it, like, a couple months after that CTF. So anyway, I DM'd him on Twitter, because what I noticed is I was reading through his blog, and I noticed he was in the EOS space. Both he and I had pivoted away from ethereum and into EOS, and so I was like, hey, dude, you and I were both like, okay, this EOS thing is not working. Like, let's go back to ethereum. And then once we pivoted, I think both of us ended up gravitating towards security. He did way before I did, right? He's way better than I am, but I just was, you know? And he was like, oh, do you want to come audit with me? He was working at, I think quant Stamp. He was working at Quant Stamp at the time.
00:05:09.966 - 00:06:26.370, Speaker A: He was like, do you want to come audit with me at Quant Stamp? And I was like, that I didn't realize, like, oh, I could be good enough to audit, right? And so I was like, okay, maybe I should buckle down on this. Like, double down on so at that point. So what happened is I was studying for the interview at Quantstamp, and I had all these ideas around. I'd gone through all these CTFs, basically, and I started to recognize some patterns in the question type where it's like, okay, if there's some sort of mathematical operation that involves division or something like that, typically it's going to end up being a rounding exploit or something like that that you're trying to so part of winning a CTF is detecting what the bug is, and then the second half of it is implementing whatever hack you need to implement in order to bypass. Right? So I was more focused on the detection piece, and so I'd written up a blog post about, like it was called Five Solidity Code Smells or something like that, right? And I sort of said, okay, if you see this in a CTF, it's likely going to mean that you need to do this sort of exploit. And that went kind of viral in some of the subreddits and stuff like that. And I started to get a bunch of inbound from all these auditing firms, and I was getting ready to actually join Consensus Diligence.
00:06:26.370 - 00:06:51.834, Speaker A: Around that same time, Robinhood reached out to me and was like, hey, we're launching this thing. We want you to come work on it. So I ended up joining Robinhood instead. But then I was like, dude, I spent a couple of months really diving deep on security, and I was like, I don't want to just waste all this. I wanted to be an auditor more than I'm doing interesting work at Robinhood, but it's not security related. It's not smart contract related. It's primarily like, backend engineering.
00:06:51.834 - 00:07:09.190, Speaker A: And so I was like, okay, I need to find some other places that will let me continue to do this work, even though I'm not, like, a full time employee. I tried to get Consensus to do that. They were like, no. Same with Quant Stamp. I think part of the reason Kristoff left is they were letting people do it part time, and then they disbanded that. And you had to be full time. Right?
00:07:09.340 - 00:07:09.990, Speaker B: Okay.
00:07:10.140 - 00:07:18.220, Speaker A: That's kind of how I ended up finding a lot of the people I'm working with currently is they are allowing me to do this work on nights and weekends outside of my day job.
00:07:18.750 - 00:07:28.822, Speaker B: Got you. So, like, kind of part time. So how do you even schedule your day to kind of contain dude, sometimes it's a slog.
00:07:28.886 - 00:08:28.154, Speaker A: Sometimes as I have a one year old daughter and so trying to take care of her throughout the day and make sure I'm still present in her life and I'm not just sitting in front of a computer 24/7, it's definitely hard. I'm in a different time zone than the Bay Area, and so sometimes I'll have a couple of extra hours in the morning before everybody else wakes up. At Don't, I don't audit in the morning usually, though. What I do is I try and get a lot of work done at that time at Robin Hood, so that in the afternoon, when I cut out early or whatever, I go usually around the time I eat dinner, I go, okay, it's time to close that off and focus on the auditing or whatever. And then usually the big chunk of the audit throughout the week, it's normally, like, getting familiar with the code base, understanding high level concepts of how do the libraries work together and what sort of integrations they have with other protocols, stuff like that. Right. And then the weekends is when I'm highly focused.
00:08:28.154 - 00:08:35.522, Speaker A: I'm spending eight to 10 hours a day on Saturday and Sunday and just really honing in. So that's kind of what my schedule looks like right now.
00:08:35.576 - 00:08:49.910, Speaker B: Got you. So you do your full time job during the day, like when you wake up, and then once you get home or finish the full time job, then you go into doing your passion project, quote unquote, which is just auditing.
00:08:50.490 - 00:08:54.694, Speaker A: Yeah. And luckily I'm a fully remote employee, right. So I don't have a commute or anything. Yeah.
00:08:54.732 - 00:08:55.430, Speaker B: Okay, there we go.
00:08:55.500 - 00:09:02.134, Speaker A: I wake up, get out of bed, do my work at Robinhood, eat dinner, start auditing.
00:09:02.182 - 00:09:02.394, Speaker B: Right.
00:09:02.432 - 00:09:10.582, Speaker A: So I don't have any sort of inefficiencies in between the switch over, really, other than switching from my work laptop to my personal laptop.
00:09:10.646 - 00:09:17.360, Speaker B: Yeah. My schedule is, like, completely different. I wake up and just don't leave bed. I just grab my laptop and start working in bed.
00:09:18.850 - 00:09:28.594, Speaker A: I would probably do that if I didn't have wife and kids, and so they were breakfast and playing around, and so I'm like, okay, I'll get out of bed as well, but I would probably be doing the same thing as you.
00:09:28.632 - 00:09:29.330, Speaker B: Oh, man.
00:09:29.480 - 00:09:31.842, Speaker A: I think we're, like, all about efficiency, right?
00:09:31.976 - 00:09:37.142, Speaker B: Yeah. It's just like, okay, we've woken up instantly. We have to maximize our time.
00:09:37.276 - 00:09:37.960, Speaker A: Right.
00:09:38.410 - 00:09:48.854, Speaker B: I mean, somehow I've built that's my environment to work in now is my bed. So going to a desk, I'm somehow less effective than just lying in bed.
00:09:48.972 - 00:10:01.450, Speaker A: Which is I could definitely see that, to be honest. I spend so much time at my desk now where I'll start to feel, like, uncomfortable sitting in the seat or whatever, because I've spent 12 hours sitting in the seat or whatever. Right?
00:10:01.520 - 00:10:02.614, Speaker B: Yeah. It's painful.
00:10:02.662 - 00:10:08.878, Speaker A: There is some lying. Yeah, exactly. Lying down is more comfortable. It's better on your back and you.
00:10:08.884 - 00:10:24.290, Speaker B: Can switch of positions. It's great. Okay, so let's talk about are you doing private audits on top of these freelancing audits with Spibit, et cetera?
00:10:24.790 - 00:10:42.040, Speaker A: Are you asking me if I am or how am I? Yeah, occasionally I think sometimes people get the impression that I'm like some sort of master auditor. I've worked with 100 proof at Oak, so I know what a master auditor actually looks like.
00:10:42.650 - 00:10:43.400, Speaker B: Yeah.
00:10:45.130 - 00:11:47.338, Speaker A: I'm not on his level, right, in terms of skill level or whatever, but what I am good at is sort of the business aspect of it, right. And so I pretty much always have some sort of an audit booked every week. And that's because I've got all these partnerships, right? So it's like, okay, there's a down week at Oak for whatever reason. Then maybe I have something coming in from Y Academy or whatever. And then also, if none of those are getting filled up, then usually I've got some sort of a solo audit thing, right? And usually what I like to do with those is very recently I had one of those come in and I send it over to Afterdark Labs, which is kind of a brand new auditing firm. So I'm constantly also trying to create more partnerships or networks or whatever so that's like, okay, if there does come a week or a time where one of these other auditing firms or I don't have any work, hopefully I can ping the founder there and go because I've sent them some work. Say, hey, do you guys have anything else? Or whatever, right? So part of it's also networking, right? It's like, okay, yeah, I do know how to audit.
00:11:47.338 - 00:11:52.122, Speaker A: I am good at that. But also I know how to make sure that I've got my schedule packed.
00:11:52.186 - 00:12:02.130, Speaker B: Every week, for sure. And I guess how did you even develop these partnerships? So the ones you're getting commissions off and just aggregating?
00:12:02.950 - 00:12:59.190, Speaker A: Yeah, they come from the the After Dark one was kind of interesting because I was supposed to give a talk at ETH Denver and I ended up canceling the talk, which we can get into at another time. Okay, I canceled the talk, but all their marketing engine had already ran like, this guy's going to be a speaker at this time, the newsletter, right? No, it was good because now I got all this inbound from all these people going, yeah, good for you. I didn't have to do a talk and I got all free marketing. Yeah, exactly, right. So that customer ended up coming from there. So it's just a bunch of things, right, all over the place. Sometimes doing these part of the reason I do these podcast interviews is it helps branding for my personal brand as well, right, where it's like, okay, maybe some of your people will now come follow me on Twitter and eventually one of them is going to fork uniswap and they'll need an audit.
00:13:01.610 - 00:13:03.878, Speaker B: Just cascading snowball effect.
00:13:03.964 - 00:13:17.974, Speaker A: Pretty much, yeah. I mean, that was one of the things I learned blogging is like I think you've probably learned it the same, right. Is like, if you get a piece of content that really blows up, it opens up a lot of doors and a lot of potential opportunities.
00:13:18.102 - 00:13:44.338, Speaker B: I never realized how powerful networking is. You can be the best developer in the world. Right. But you're not going to have any opportunities unless you build a network. Right. And when you build a network, those people introduce you to more people and then you get clients and business deals, even VCs, which I've recently discovered, which is just insane. People want to give you money to try and build your project.
00:13:44.338 - 00:13:44.958, Speaker B: It's like, wow.
00:13:44.984 - 00:13:45.606, Speaker A: Okay.
00:13:45.788 - 00:14:06.700, Speaker B: Yeah, it's amazing. So providing value is the number one thing, and if you can provide value to a lot of people via content, then it will ultimately return you tenfold. You may think that you might be like, diluting yourself, but you're actually giving yourself an edge in another sort of space.
00:14:10.030 - 00:14:20.778, Speaker A: That's kind of how I started this, right. Was telling you that I wrote a blog post about five bugs or whatever, right. And that ended up cascading into all these connections I made with all these different auditing firms.
00:14:20.954 - 00:14:29.170, Speaker B: Yeah, exactly. And then you blow up and then you meet more people and then that's how we met. I'm pretty sure we both got big enough. We're like, oh, shit.
00:14:29.590 - 00:14:30.290, Speaker A: Yeah, exactly.
00:14:30.360 - 00:14:36.790, Speaker B: Yeah. Did you ever do like C Four contests or any kind of public contest?
00:14:37.930 - 00:14:59.766, Speaker A: Maybe I saw a tweet by Pashov maybe. And maybe it was him or Andy. I can't remember one of them tweeted something about like the maybe it was trust, I don't remember. But they were like, saying, like, step one is you go do C four. You don't do very well. You keep grinding at it for a couple of months. Step two is like, you get up the leaderboard.
00:14:59.766 - 00:15:22.562, Speaker A: Step three is you leave C Four and start picking up your own work or whatever. And I tweeted at them. I was like, yeah, I bypassed all that and went straight to working for Auditing. Not having to do that. Yeah. Which it wasn't intentional or anything like that, I guess, probably. I didn't really even know about C Four at the time.
00:15:22.562 - 00:16:03.722, Speaker A: And so I was like, whatever. The only way for me to do this work is to and so I just ended up reaching out. I think you asked me before, how do these folks do their different sort of trials or interviews or whatever, right. And they're all different. Oak is a good example where I think I was reading through a blog post by the founder where he was talking about signature replays, and at the bottom of the post it was like, hey, we're starting a new auditing firm. Reach out if you're interested in working for us or whatever, right? And so I just straight up email, cold emailed them. I told them the situation, which was what I told you, which is like, hey, I was going to join Diligence.
00:16:03.722 - 00:16:27.394, Speaker A: It fell through. Are you guys open to part time work? I've never audited before. I'll do it for free. Just let me shadow your gut. Because at that point, I'd learned all the security, but I didn't know what did it take to produce these audit reports. So I was mostly interested in like, okay, what's the process of here's the code base, here's the report. I want the inside scoop in that to see, am I good enough to do this? Or whatever, right? And so they put me through an interview.
00:16:27.394 - 00:16:52.314, Speaker A: They put you through like a trial audit, all this sort of stuff. But then eventually they start saying, okay, here's some work. So that's sort of the process for Oak. So, yeah, I mean, it was sort of mostly like a sales thing at that point, right, where I was doing cold outreach to firms because I knew I was hearing people like Moody kind of complaining on Twitter or Bante complaining on Twitter about how long the lead time was for auditors.
00:16:52.362 - 00:16:52.622, Speaker B: Right.
00:16:52.676 - 00:17:20.890, Speaker A: So I knew, like, okay, there's insane demand for this skill set. I just need to figure out who's hiring, who has the work that I can go and do it. Right. So in that case, I was able to just bypass the whole contest mechanism directly because I guess maybe that's a bit of an advantage I talked about before. I'm really good at business. I'm also kind of good at sales because you and I were talking before we started recording. I've started a couple of businesses, sold a couple of businesses, right.
00:17:20.890 - 00:17:41.326, Speaker A: You can't really grow a business without being able to do sales. And so I kind of learned how to do sales. I'm like in between, I have this Ven diagram of like on this side, I'm a business person. I understand sales. I understand marketing, all this stuff. On this side, I also know all the technical stuff. I know smart contract auditing really well.
00:17:41.326 - 00:17:59.080, Speaker A: And there's not that many people who sitting kind of in the middle here. And that allowed me to kind of bypass all of this other stuff where it's like a bunch of people are going and doing these contests who are really good auditors, potentially, but they're only making like $100 from every contest because they're not finding the critical bug that everybody else exactly.
00:17:59.450 - 00:18:47.394, Speaker B: Yeah. So I guess a lot of innovation comes from when you're able to access two different fields and merge them together. Because usually something prominent that I've seen is engineers don't do a lot of research into, let's say, papers and what's out there and what's missing in the market. But a lot of people that do research and do all that stuff don't do engineering as much. Right. And so if you can do both, you can get a land, I guess, have the landscape of the market in your mind, but you also have the technical expertise to know what's missing and then bring that to life. And that's kind of like bringing innovation to life, basically.
00:18:47.592 - 00:19:25.182, Speaker A: Sean Bow, I think, is his name. He's a good example. He's one of the Zcash engineers. And I was listening to an interview he did on the I think it's called the Zero Knowledge Podcast. And he was basically saying that he's like, I was reading these research papers, but nobody was implementing them. And so I was like he had went off and implemented one of the research papers, and that was how he ended up landing the job at the ZCast Foundation was like they were seeing that he was implementing a lot of the research, and he's a really highly skilled engineer. And so he's able to make sure that these implementations of his are production ready.
00:19:25.182 - 00:19:26.894, Speaker A: They don't have flaws and on bugs or whatever.
00:19:26.932 - 00:19:27.086, Speaker B: Right.
00:19:27.108 - 00:20:12.640, Speaker A: Because a lot of the research implementations just need to implement it sufficiently that they can get a research paper out the door and say, no only did we have this research paper, this white paper, but you can go look at the open source code over here or whatever. Right. But he was able to translate that into, I think I tweeted after I watched that interview, something I want to be Sean when I grow up, or something like that, because that's kind of, I think, where I agree with you. I'm sort of in between those two spaces where I did that. A lot of Robin Hood, a lot of the cryptography stuff, the protocol that we use under the hood to do a lot of the authentication for the users on the wallet and stuff like that was kind of new ground in terms of how to handle this sort of authentication. But I was able to translate that into production code.
00:20:13.430 - 00:20:28.754, Speaker B: Yeah, exactly. And just to expand on this, I guess, you as an auditor, what do you think is really missing from, I guess, the tooling space that's basically made auditors not redundant yet, if that kind of makes sense.
00:20:28.792 - 00:21:03.806, Speaker A: Yeah, it's a good question. There's a channel inside of the Robinhood Slack that's like crypto news or something like that, and it's got everybody at the company who's interested in crypto news can join the channel. And so it has non technical people in there as well. And I don't know if you saw, there was a tweet by one of the Coinbase executives where he had, like, fed in he'd fed in a contract with an underflow bug or an overflow bug, I can't remember which one, into GPT four or something, and it had found the bug, and so everybody was like, oh, man. Auditors, jobs are done. They're toast. Whatever.
00:21:03.988 - 00:21:05.040, Speaker B: We're over.
00:21:05.570 - 00:21:28.440, Speaker A: Yeah. And I was like, okay, let me explain some things to these people because they're non technical. So they were like, wow, this is amazing. So if you know anything about security right, you know, like underflow bugs don't exist at the compiler level anymore. So if you're using a modern he had fed in like a six version of Solidity into the contract to find the blood. Okay, so that was one thing. Yeah, exactly.
00:21:28.440 - 00:21:43.854, Speaker A: If you're auditing in a real capacity in the market right now, if somebody slings out some code, that's 0.6 1st finding is going to be upgrade to compilers that have this check built right in.
00:21:43.972 - 00:21:44.714, Speaker B: Yeah, latest.
00:21:44.762 - 00:22:36.746, Speaker A: But then I was like, even if they didn't back then, even still back then before the compiler versions started catching this, this finding was like trivially easy for an auditor. Exactly. Who cares? So I kind of use that as an example of one of the things I'm constantly pounding the table about on my Twitter is that the most interesting, novel, high value bugs are not syntactic or even really semantic. They're like game Theory bugs where it's like they're two steps above the code. The biggest problem in the space not just for tooling, but even just for auditors in general. And I think part of the reason why we just talked about a lot of people on C Four are getting $100 per contest or whatever is because they're not going up those extra levels and thinking at the game. Theory level about if I take my big trade and break it up into a million one way trades.
00:22:36.746 - 00:22:57.000, Speaker A: What changes about this protocol or whatever? Right. This is a good example of thinking above just what does the code say? Right? And then you can play with those ideas. And that's something I don't think the tooling is ever going to be able to do. And that's part of the reason why you still need top 1% smart contract auditors is because they're able to think above the code.
00:22:57.610 - 00:24:00.282, Speaker B: Yeah, exactly. And I think to even build a good tool, you've got to be a good auditor or at least have the insight of what creates a good auditor objectively. So that's like having a whole overview of the context, even if it's not just limited to the contract because the whole space interacts with each other. And a great example that I love to use is, okay, you have this contract that manages tokens. What if you get a flash loan and bring in a million extra tokens that the developer wasn't thinking of? Right. See how that messes up the system and what variables change after that? Yeah, you got to think like that. And there's so many external contracts as well that it's very difficult to know what is possible unless you have like symbolic execution or I guess you could go the simple way and just use the most common ones.
00:24:00.282 - 00:24:11.278, Speaker B: Like, I guess. Compound ave uniswap. Any master chef kind of contract. But yeah, it's all like business logic and how it plays with external contracts as well.
00:24:11.364 - 00:24:11.758, Speaker A: Yeah.
00:24:11.844 - 00:24:18.394, Speaker B: Having said that, what kind of critical vulnerabilities have you seen becoming the most frequent?
00:24:18.442 - 00:24:35.406, Speaker A: I guess so I'm trying to start like a leak code sort of website for web3, where it's all about interview preparation, stuff like that. And we're going to launch a contest next week and I have a bunch of questions lined up for this contest that are kind of along these lines.
00:24:35.438 - 00:24:36.190, Speaker B: Okay, sick.
00:24:36.270 - 00:25:20.322, Speaker A: But I'll be honest, I saw a post, I think it was like mid last year from Trail of Bits, where they basically did an analysis of all the critical bugs that had been found and I think they even went beyond their own reports and looked at the wider ecosystem of reports. And you'd be surprised that the yeah, it's simple shit. Yeah, it's like access control modifier, like people dropping or whatever. Right. I think I had a Tweet two weeks ago where I was like, the number of I use, that meme, that old dude meme, where it's like the number of access modifier bugs is too damn high or whatever.
00:25:20.376 - 00:25:20.690, Speaker B: Right?
00:25:20.760 - 00:26:30.358, Speaker A: Yeah, because I had found one in the contracts that I was auditing at that time, and I probably found three, maybe even four of those in my career as a smart contract auditor. Probably that's the most frequent bug I found is just people leaving off access modifiers. I think recently there was a pretty big bug recently. I can't remember who it was, but it was like one of their proxies didn't have proper access modifier, and you could have self destructed all the implementation contracts or something like that, which is I don't know if it still is, but it used to be one of Spearbit's challenges, was like, basically the OG for this bug was delegate. Yeah, it was the multisig wallet on chain multisig wallet or something like that, right, where the kid had accidentally self destructed all of them and then posted on GitHub and said, oops, I think I broke it, or something like that. Right, so this is like a pretty well known exploit, right? But it just keeps showing up in different contexts where it's like, okay, in this case, you're right, it had some delegate goal or something like that. And so you forgot to access control.
00:26:30.358 - 00:26:35.174, Speaker A: Maybe some aspect, I don't know the actual details of it, but I do know it was access control related, which is critical.
00:26:35.222 - 00:26:35.386, Speaker B: Right.
00:26:35.408 - 00:26:40.140, Speaker A: If you can upgrade the contract to whatever implementation you want, game over.
00:26:40.590 - 00:26:48.526, Speaker B: Yeah. I think a lot of developers think too much of the logic that they forget about the simple stuff, so they.
00:26:48.548 - 00:27:09.154, Speaker A: Focus on auditors do it too. I don't think it's just protocols. I think even auditors will miss the most obvious bug that's sitting right in front of their face because they're all I had another tweet about. This. It was something like, I saw somebody tweet this like years ago. And I was like, that is brilliant. It was something like the protocol devs check for reentrancy, the auditors check for Oracle manipulation.
00:27:09.154 - 00:27:11.880, Speaker A: The attacker calls upgrade two.
00:27:13.850 - 00:27:31.580, Speaker B: Yeah, it's always like the simple things. I think I read the same paper where it was like data Validation and access control were like two main critical ones that were showing up around. It was pretty high, like at least 20%, 25%.
00:27:32.110 - 00:27:50.510, Speaker A: The thing is, they're not cool, right? So as an auditor, you want to find cool bugs. You want to find bugs where everybody's like, oh damn. Or you could go write a blog post about it and get a bunch of new leads or whatever. Right, so we're all looking for those. But the real truth of the matter is that these are the ones that are most likely to end up wrecking contracts.
00:27:50.670 - 00:28:25.262, Speaker B: Exactly. And we're talking about auditing that's pre deployment. I think auditing post deployment is a whole different ballgame because it's usually multiple contracts are involved. You see these highly complex ones that are just flash learning, going into an Oracle, changing the liquidity pool. And then the original contract, it's like, exchange rate is different. And then you use another flash loan to get all that. It's like a whole sequence of right.
00:28:25.262 - 00:28:29.520, Speaker B: Or like calls rather. And it could be over multiple transactions as.
00:28:32.930 - 00:28:35.230, Speaker A: Eisenberg and the Mango hack.
00:28:35.910 - 00:28:52.870, Speaker B: Yeah, it could be. Just so many possibilities. Right. And it's super hard to account for all of them, but even like, the simple ones are just overlooked as well. So I wonder, do you focus on finding critical bugs or do you kind of like, what's your kind of strategy?
00:28:53.610 - 00:29:09.882, Speaker A: Yeah, to be honest, my first audit, I reported everything because I didn't know I didn't have a real good barometer for what's important and what's not. And it was a trial audit for Oak. And so I was like, I want to make sure these guys don't think I'm like some sort of an idiot or whatever.
00:29:09.936 - 00:29:11.062, Speaker B: Right, gotcha.
00:29:11.126 - 00:29:36.258, Speaker A: So I kind of overreported everything. I was going to make a joke because I recently started auditing with one of the guys we sniped from Y Academy, the last Y Academy block into Y audit. And I was going to say, I feel like as your career gets longer and longer in smart contract auditing, you report less and less and less. This is not important and a lot of it's opinion related, right?
00:29:36.424 - 00:29:37.234, Speaker B: Yeah.
00:29:37.432 - 00:30:20.754, Speaker A: You've done enough audits where it's like, you do the report, they have to do the fix, then you have to review the fix that you're like, is this even worth going through the machinations of? You're going to have to fix this and then submit a PR, and then I'm going to have to review it. Is it going to result in loss of funds? That's basically what at the end of the day. Kind of what it boils for me is like, is someone going to lose money either the protocol or the user? If they're not, then nine times out of ten, I leave it out. I will report some of these other things, informational where it's like, if you forget to do this during a deployment, it has catastrophic consequences. I'll put that as an informational, for example, right, where it's like, make sure they by the way, everybody's on the same page that you have to set this variable or whatever.
00:30:20.792 - 00:30:21.090, Speaker B: Right.
00:30:21.160 - 00:30:32.646, Speaker A: Gas too. I'll do gas only if it's totally egregious. Where it's like you're recomputing this variable three times here. Like you should need to just cache this and use it once or something like that.
00:30:32.668 - 00:30:32.854, Speaker B: Right.
00:30:32.892 - 00:30:53.246, Speaker A: I'll throw those in as well. But in general, I try to keep the report as concise as possible. Even my findings, when I write them up, it's like, compared to a new auditor, they'll write a whole paragraph of, like, in the beginning there was Reentrancy and whatever. Yeah. I'm like this variable right here needs to be changed to this variable. Okay, great. You got it.
00:30:53.268 - 00:30:53.454, Speaker B: Good.
00:30:53.492 - 00:30:54.560, Speaker A: Go fix it.
00:30:55.330 - 00:31:09.178, Speaker B: Yeah, for sure. I guess if you could bring any tool into existence to basically assist you in auditing besides AI, what would you bring? Create?
00:31:09.284 - 00:31:44.990, Speaker A: Yeah, I was going to bring that up when you were asking about tooling before. I don't think you're going to ever have like a Holy Grail like Slither on steroid sort of a thing where it's like, run this static analysis and it will find you all the bugs or whatever. I don't think that's ever going to happen. I do think what Brock is doing with parameter, I think is what he's calling the tool, right? Where it shows you the range of values as you're kind of like analyzing the code. Yeah, I think stuff like that where it's like they're like guardrails. Kind of where you're like, oh, I think even Slither slither gets a lot of hate, but I think Slither is even pretty good for that.
00:31:45.060 - 00:31:45.630, Speaker B: Right?
00:31:45.780 - 00:32:03.378, Speaker A: People are expecting it to spit out answers, but really what it's doing is it's giving you guardware. Well, it's like, by the way, this thing has a Reentrancy in it. I don't know if that Slither is never going to be able to tell you if that Reentrancy is exploitable or not, or what the implications of the Reentrancy are, but at least it's able to detect the Reentrancy, right?
00:32:03.544 - 00:32:03.826, Speaker B: Yeah.
00:32:03.848 - 00:32:32.110, Speaker A: Like in full tooling like that. Yeah, that's like, guardrails. And I think what Brock's doing is very insightful because he's like going, okay, I'm not going to be able to create this AI tool that can just find bugs, but okay, if I can't do that, then what sort of value can I provide here? And in this case, it's this idea of bounce checking and guardrails and stuff like that. To answer your question, it would be that, but better, right. Just more and more of that stuff.
00:32:32.180 - 00:32:36.000, Speaker B: Just like a very comprehensive reconnaissance kind of tool.
00:32:38.050 - 00:32:50.402, Speaker A: Then I'm not wasting my time at the low level. And I think that's part maybe that's maybe the lesson people should take away from this interview is like, if the tooling can do it, you shouldn't be wasting your time as an auditor looking at it.
00:32:50.456 - 00:32:58.614, Speaker B: Exactly. It's all about time, efficiency and okay, where do you want to spend the most time? And obviously that's for looking the most.
00:32:58.652 - 00:33:39.890, Speaker A: Critical bug that's one thing I've been complaining about a lot lately is like the symmetry between white hats and black hats or I guess pre audit and post audit is like totally in favor of the black hat. I have two weeks to look at your code or whatever, however long we've scoped the audit for, and then I've got to move on to another audit, right. So it's like, I can't really spend the proper amount of time I really should to make sure this isn't totally bug free. So it's highly likely that I've missed something. And then the black hat has an indefinite amount of time once it's on chain, it's on chain, right. And I can spend however much time I want perusing your code and figuring out where the edge cases are. Yeah.
00:33:39.890 - 00:34:07.820, Speaker A: People are like, well, that's why Immunify should exist, or whatever. But it's like, I've heard a lot of stories. I don't do Immunify bug bounties, but I've heard a lot of people complaining about how they keep getting stick by the protocols or the process is inefficient or whatever. Right. So I can't speak to it personally because I've never used it, I've never done Immunify. But if that's the case, then it's even more reason for people to be like, hey, I'm just going to go black hat or gray hat or whatever, right? I just steal the funds and then give them back later or something like that, right?
00:34:08.350 - 00:34:18.526, Speaker B: Yeah. People are working on that kind of stuff as well. If you find a hack or if someone's just post a hack on like a transaction, they kind of just front run it and then return it later.
00:34:18.628 - 00:34:19.280, Speaker A: Right.
00:34:21.170 - 00:34:47.206, Speaker B: Something like that. But even if you do an on chain white hat try and recover something, you just get attacked, man. Yeah. From that sushi one, he just got absolutely annihilated by everyone. It was just kind of like, damn, man, this guy just really tried to save this guy's money and then he just got shat on. How dare you try and save this guy.
00:34:47.388 - 00:35:21.218, Speaker A: I think if the outcome had been different, which is kind of messed up, right. It shouldn't be about outcomes, it should be about intentions or whatever. Right. But I think if the outcome had been different, people would have been like, oh my God, this guy's goat status, or whatever. But the fact that got front run and then everybody sort of piled on top of the exploit that people ended up getting pissed about because they lost money. But you're right, it's like, Trust isn't the one who put the bug in the code, right? Like, he's the one who found and fixed it, which I'm a little bit kicking myself about because we found that same bug like a month, a month or two before in a Y Academy audit. Yeah.
00:35:21.218 - 00:35:32.550, Speaker A: And I was like, Dude, why wasn't I looking for this on chain? I just don't have time, right? Because I'm always auditing. I never actually go post deployment because I always have some new thing coming in the door.
00:35:36.490 - 00:35:50.058, Speaker B: I think Trust was the one that implemented a proof of concept for that, and then it was Django that found it, I believe. I could be wrong, really. I see.
00:35:50.144 - 00:35:54.846, Speaker A: So he found it and then brought it to Trust. And Trust was the one who was trying to actually yeah, because I think.
00:35:54.868 - 00:35:58.910, Speaker B: He didn't have time because time is just flies.
00:36:00.530 - 00:36:13.506, Speaker A: I think one of the things I'm really good at, one of my advantages is, because I'm a programmer, right? I'm coding, like, 24/7 pretty much, right? Either, Robin Hood is that I can spin up POCs insanely quickly.
00:36:13.608 - 00:36:13.874, Speaker B: Yeah.
00:36:13.912 - 00:36:21.654, Speaker A: So it allows me to poke and prod at the code in different ways, rather than just I think a lot of auditors just rely on review or whatever. Right.
00:36:21.692 - 00:37:01.490, Speaker B: Whereas sometimes yeah, but then you got so much stuff in your mind and you can't really think of every possibility because your mind's just clogged up with like, oh, fuck, what about that last one? Can I change anything there? Or I think it's really good to have some kind of tool to help you with reconnaissance or find the workflows or control flows and then go from there, basically, and then try and see what Contracts could probably interact with this and see if there's any kind of interesting interactions or think of outside of the box interactions.
00:37:02.310 - 00:37:20.538, Speaker A: That's what I like about POCs, though, right, is like, once I have that unit test, especially with forge or foundry or whatever, you can start writing invariant tests around that or fuzz tests around that or fork thing. Right, and I've got uniswap I can take a flash loan against or whatever.
00:37:20.704 - 00:37:54.420, Speaker B: Yeah. And one thing I want to point out back to the Trailer Bits reports is that invariant testing finds a lot of bugs, like, an insane amount. I think it's like 50%, 60% if you use invariants properly. And I don't think a lot of people take the time to make them, but if you just do normal unit tests for the simple stuff and make sure everything works, then use invariant testing for the hard stuff and make sure shit isn't breaking right.
00:37:55.270 - 00:38:05.126, Speaker A: I think that's one of the benefits of being an auditor, is, like, you see so many projects and the different quality of code that when you go to launch your own thing, you know.
00:38:05.228 - 00:38:06.390, Speaker B: What'S like the best.
00:38:06.540 - 00:38:24.074, Speaker A: Yeah. You're like, okay, the people who take security seriously and have all this stuff, they have fuzz tests, they have invariant tests. Right. I'm much less likely to find bugs in their code base. Right. Because they've done all this due diligence up front and by the time it gets to me, the code is like, really clean. It's been totally refined.
00:38:24.074 - 00:38:47.240, Speaker A: They've thought about a lot of people. I think in my opinion, the biggest problem right now in the space is people don't architect their smart contracts from a security perspective. I just barely finished an audit last two weeks ago or whatever, and you could tell they had spent a lot of time thinking about the security implications of their architecture and that was ended up we still found stuff.
00:38:47.930 - 00:38:48.726, Speaker B: Okay.
00:38:48.908 - 00:39:25.230, Speaker A: But it was maybe less critical when the bug does exist because urine is a good example of this. I always see auditing urine strategies because they're architected with the understanding of, like, if this thing gets wrecked, what's the worst thing that could happen? Right. I think not enough people are thinking about, if this gets wrecked, what's the worst thing that could happen? I think the recent uniswap thing. I haven't looked into V four yet, but I've heard a lot of people tweeting about making a bunch of noise about it. I think that's probably a step backwards, if I'm being honest, because my understanding is one contract holds all the tokens for all the pools.
00:39:25.650 - 00:39:48.006, Speaker B: Yeah. It's more of like an optimization more than anything. I talked about this on the last podcast of byteso 32, but not bytes 32. It was Philogy. And basically it's just like instead of routing through multiple contracts, it's just using one contract to do all the routing. So no external calls, et cetera. So kind of like that interesting.
00:39:48.108 - 00:40:00.006, Speaker A: Yeah. I haven't had time to dig into it. Usually what happens is I get an audit and then I'm forced to dig into the new because somebody goes to integrate with V four or whatever. Right. It's like, okay, now I need to go learn V four.
00:40:00.128 - 00:40:12.880, Speaker B: Yeah, it's good. Okay. What if someone didn't if you had no docs whatsoever, they just didn't do anything to help you, they just wanted you to do everything.
00:40:15.510 - 00:40:16.834, Speaker A: I would say is like that.
00:40:16.952 - 00:40:29.080, Speaker B: Oh, really? Oh, God. Yeah. So what do you do, I guess, when there's no docs and you're given basically nothing?
00:40:31.130 - 00:41:10.866, Speaker A: Yeah, good question. So I've got a couple of YouTube videos up where I walk through my smart contract auditing process because I got this question enough times that I was like, I should just record this and kind of explain how I did what I'm doing. And I will say, though, what's happened over time is as I've gotten more experience, I have been less dogmatic in my approach than I used to be. Now what I do is I kind of look at the size and the scope of the contract and also, I guess the context, right? Whether it's a fork or brand new code that will sort of dictate what sort of strategy I go about using.
00:41:10.968 - 00:41:13.170, Speaker B: So give us an example of like a strategy.
00:41:15.430 - 00:42:41.258, Speaker A: So just for like standard stuff, if it's a brand new contract, comes in, doesn't have any docs, and it's like a week to two week audit or whatever, right? This is sort of my standard approach. What I'll do is I'll start auditing the leaves of the dependency tree. So it's like usually somebody's got some inheritance, right, where it's like safe transfer or something like that, right? I'll go make sure I understand safe transfer, like really in depth and everything there, right? Got you. This is especially important if they're not importing safe transfer, they've rolled their own or something like that for some reason. Make sure that, okay, I really understand all the implications of whatever they're doing here. I might make notes while I'm checking all these Library contracts and auxiliary contracts, and then I'll slowly start working my way into the core where it's like, okay, eventually I'm going to get to the meat of but I have all this context of everything that they've used up to this point and all these comments. Like one example might oh, I think I even did this in the YouTube video for the safe transfer thing where I'm like, okay, the safe transfer itself looks fine, but I've seen enough people use it where they leave ether in the contract, where it's like message value doesn't equal whatever they're transferring, right? So I'll leave the comment there and say, okay, make sure everywhere they're using the safe transfer thing that this invariant holds where there's no ether left in the contract.
00:42:41.258 - 00:43:16.770, Speaker A: So now I have that in the back of my head, that comment that I've left whenever, once I get to where they're actually using the Library, I have that context of whatever thought I had back then and I can make sure that that holds. But then I also have, okay, here's the universe of things that are being used when I'm looking at the business logic where the actual funds are held, that's super useful to be able to have all that context. So then I can sort of rip the thing apart and figure out, okay, the core business logic of where money is being held. How can I steal the money out of this thing given all the stuff I know about these auxiliary contracts?
00:43:16.930 - 00:43:22.606, Speaker B: Got you. Yeah, so you're basically just writing like invariance but in comments like, above the function or something like that.
00:43:22.628 - 00:43:46.114, Speaker A: And then if it gets to the bot where I get done and I'm like, okay, sometimes I leave a comment and it's obvious. It's like, yes, this is a bug and I don't need to do anything. I don't need to write a POC, I just need to go write the report up or whatever. But then there are cases where I'm like, I'm not sure about this. It smells funny to me. It could be problematic. That's when I'll start writing a POC and then I can start forking it and I could start to your point.
00:43:46.114 - 00:44:09.974, Speaker A: You mentioned like flash loaning, right? I'll pull in a bunch of capital into the contract or something. I'll try reinstancy whatever it might be and just either confirm whether this is a bug or not, or disconfirm it where I can go, okay, I tried all this stuff. If I was an attacker, right, I would have probably given up by now and been like, hey, there's nothing here, and move on to something else. Then I this is safe. I'm not going to mess with this anymore.
00:44:10.102 - 00:44:28.670, Speaker B: For sure. I guess. Looking back at your auditing career right now, how do you think you could have accelerated the point to where you're at? I know you've already kind of done that with the cold emails, but if you were to go even faster, what's some advice?
00:44:29.010 - 00:44:51.198, Speaker A: Yeah, that's an excellent question because I have seen people come after me, right? Like, trust kind of came after me. Pashov kind of came after me. Zach, I think probably maybe around the time he might have even came after me as well. And so I watched these guys who I continue to work full time, right, for Robinhood, because I'm really interested in the project we're building at Robinhood.
00:44:51.234 - 00:44:51.434, Speaker B: Right.
00:44:51.472 - 00:45:15.822, Speaker A: Those guys just dove right in and their skill level has outpaced mine probably by two to five X. So I think if I was going to go back yeah, I would have just been or like another good one is 100 proof. Okay. That guy's a crazy story, right? I started auditing with him at Oak. So he'd found a bug for one hundred and fifty K or something like that.
00:45:15.956 - 00:45:16.302, Speaker B: Yeah.
00:45:16.356 - 00:46:06.640, Speaker A: And then he parlayed that into being able to do audits for Oak. So then he and I worked together on, I think, maybe two audits at Oak, and he was like, I don't know about this dude, he'd just gotten 150K payout. And so he was like, sure, it's good money auditing, but it's nothing compared to if I just go find the bug in production myself, why am I doing this stupid reporting thing? Right? So he went off and was like, okay, I'm just going to go find bugs. And then yeah, a couple of months later he comes back, he's got this million dollar bounty, right? Good example of like, if I had just been like, why am I juggling all these things at the same time? If I just stayed hyper focused on one thing, right? And I still think about that to this day, to be honest. There are days where I wake up and I'm like, should I just put in my two weeks at Robin Hood and just be like, okay, I'm done with this. There's way more gold over here. What am I doing mining for?
00:46:07.490 - 00:46:11.620, Speaker B: I mean, like, auditing is something you want to do full time as well, isn't it?
00:46:13.190 - 00:46:28.518, Speaker A: Yeah, it's weird, right? It's like some days. Yes, there was a couple of days. Dude, I was auditing an ave fork. Like last month or the month before last. The days all drag together. You'll notice my timelines. I'm like, I don't know.
00:46:28.518 - 00:46:46.446, Speaker A: It was like a month ago, a week ago, I don't remember. And then I look up, it was like actually a year ago. But yeah, I was auditing this Ave fork and I just was like, I hate this. What am I doing? This is stupid. I don't want to be looking at this code. I am no interested in auditing another fork or whatever. Right?
00:46:46.548 - 00:46:46.910, Speaker B: Yeah.
00:46:46.980 - 00:47:11.330, Speaker A: So I don't know. Sometimes I do think I don't want to do this anymore. Sometimes I think robin Hood. I don't want to do this. It sort of depends on is the work that I'm doing in these different areas exciting and intellectually stimulating to me or not, right. And at any particular moment, if it's not, then I'm immediately like which is a bad it's something I know about myself, that I'm a nerd. Right? I'm very easily nerd sniped.
00:47:11.330 - 00:47:33.318, Speaker A: That's kind of what happened with Robinhood. I was like, I had no interest in working for them. They were originally hiring me for like a traditional backend engineering role. They're like actual crypto product inside the main app. And while I was doing the interview, my current manager was in one of the interview loops and she mentioned the product she was working on. And I was like, shit, I want to work on that thing. So I told the recruiter, I'm not joining.
00:47:33.318 - 00:47:43.986, Speaker A: She can get me on that team. And so that's kind of what drives me is like, I keep going from super interesting intellectual thing to super interesting intellectual thing.
00:47:44.008 - 00:47:44.580, Speaker B: Right.
00:47:45.110 - 00:48:01.126, Speaker A: It's fine. It's almost like playing video games. It's something I really enjoy. But over a long time horizon, you're probably going to have more success in your career or whatever if you just hunker down and focus on one thing and become like that one thing or whatever.
00:48:01.228 - 00:48:26.670, Speaker B: Yeah, definitely. Like you were splitting your time up with full time job and working at Oak basically. And then 1800, what am I saying? 100. So yeah, 100. He just went like full time. You know what? I'm going to make my success from the dirt, basically. And I guess that's what happened.
00:48:26.670 - 00:48:35.620, Speaker B: If you want it that bad enough and you have no other kind of backup, you're kind of forced to do it right, no matter what. And I'm kind of I think also.
00:48:36.630 - 00:48:52.310, Speaker A: There'S a huge difference between like I was talking to Eastwood, eastwood about this like a couple months ago. Yeah, about there's a huge difference between the top let's call it 25% or 10% of smart contract orders and the top 1%.
00:48:52.380 - 00:48:52.902, Speaker B: Right.
00:48:53.036 - 00:48:58.042, Speaker A: And if you want to get in the top 1%, you basically have to say, okay, I'm only doing this and nothing else.
00:48:58.096 - 00:49:44.002, Speaker B: Yeah. I think that's with anything really, even if you're gifted and just naturally skilled, the person that's just spending all their time every day, every week is going to catch up and just blow past you if you're not putting the same amount of effort. Right. I think totally. I'm the exact same as you that I just get attracted to the shiny thing and then I move on to something else. But I do stay on the shiny thing for quite some time and then somehow I find or discover a new niche within the journey of that initial thing. And then I kind of so like right now I'm doing binary analysis and that's come from writing Huff.
00:49:44.002 - 00:49:49.400, Speaker B: And then Huff came from just doing mev, then mev came from.
00:49:52.750 - 00:50:16.034, Speaker A: That'S what I was going to say. I don't think I ever would have become a smart contract auditor if I hadn't. There's an explore exploit thing, right. I think you and I are we like to stay in the explorer phase. We don't switch quickly enough to the exploit phase. Or maybe we do, I don't know. We're both relatively successful in what we're doing, so it's not like we're total scrubs, right.
00:50:16.034 - 00:50:52.234, Speaker A: Or anything like that. But yeah, I don't think I ever would have become a smart contract auditor if I wasn't just willing to be kind of dabbling around, messing around with stuff. And one thing that story I told you, it's not like I set out from the beginning to be like, I'm going to become the best smart contract on the planet. Just like I'm going to fork uniswap. And then eventually I learned security and then eventually I ping somebody on Twitter, and then eventually I ping a new auditing firm and then eventually I end up being a smart contract auditor. It wasn't like that was my goal at the end was to make a bunch of money as a smart contract. And even still, I don't really do it for the money.
00:50:52.234 - 00:50:57.934, Speaker A: It's mostly because I like hanging out with other smart contract auditors. I like doing stuff like what we're doing right now.
00:50:57.972 - 00:50:58.270, Speaker B: Right.
00:50:58.340 - 00:51:04.400, Speaker A: And I don't think I would be able to do that if I wasn't out looking at contracts and learning all this technical stuff.
00:51:04.930 - 00:51:41.142, Speaker B: Yeah, I think the more work you put in, the more opportunities come out and the more people you meet. And that just opens up a whole lot of pathways and it just becomes follow your passion, basically. And if you're interested in something, go for it. Just like laser focus and try and get that going. But if you also have something good going for you, just spend some time doing the other thing on the side. And then if you really enjoy it, maybe just go all in. It may not be as much money, but if it's more satisfaction, I think that's way worth the money.
00:51:41.142 - 00:51:49.022, Speaker B: Because money comes and goes. It's there our whole lives. But if you're not happy doing something, then it's not really worth doing.
00:51:49.076 - 00:52:22.218, Speaker A: I think I will say that having kids too changed my mental framework around. I was hyper focused on money earlier in my career because another thing I learned, like leaving Amazon and going to Robinhood, where like, really enjoy what I'm working on at Robinhood. I think part of the reason I was so obsessed with financial independence is because I hated my job. I just didn't want to admit, like, you hate your job, go find another job. I just kept thinking, okay, I'll just slog through this, get the RSUs, and then I won't have to worry about money anymore. I can do what I really enjoy or whatever. Right?
00:52:22.304 - 00:52:22.794, Speaker B: Yeah.
00:52:22.912 - 00:52:42.960, Speaker A: But after I had kids, I was like, I'm going to be taking care of these kids basically until they move out. Right. So then your compounding time horizon in terms of finance goes from I was like trying to retire in five years or whatever, which I end up achieving, but then I had a kid.
00:52:43.330 - 00:52:43.934, Speaker B: Yeah.
00:52:44.052 - 00:53:10.434, Speaker A: It's like, okay, I'd say a lot to some of my coworkers. I'm like, I'd be sitting at home taking care of my kid anyway. I might as well log in and write some code. There's a real reason I'm working at this point. Right. But I was talking to my manager. It was like a week ago or whatever, and I was like, if you compound over 20 years or whatever, especially with the current base of capital I have now, I could work at McDonald's for the next 20 years and still be totally rich.
00:53:10.434 - 00:53:26.350, Speaker A: Right. So it's like, okay, to your point, it's not always about the money. It's often more about what are you excited by? Or is you going to get to a point in your life where you have enough money to do whatever you want to do, whether it's eat out or go on vacations or whatever. Right?
00:53:26.420 - 00:53:26.750, Speaker B: Yeah.
00:53:26.820 - 00:53:29.854, Speaker A: So then you're still stuck. It's like, great, I have all this money. Now.
00:53:29.892 - 00:53:30.190, Speaker B: What?
00:53:30.260 - 00:53:33.774, Speaker A: You still need to find a purpose and why you're on the planet or whatever.
00:53:33.812 - 00:53:33.966, Speaker B: Right.
00:53:33.988 - 00:53:39.874, Speaker A: You're not going to find that if you're constantly just chasing money, unless that's your purpose. I don't know. That is some people's purpose. Like Warren Buffett is.
00:53:39.912 - 00:53:56.280, Speaker B: Yeah. You need like a goal writing. Like, without a goal. Yeah. You're just not going to satisfy yourself while you're awake, basically. And I think when you have a goal and you really hone in and you're really passionate about it, then money just comes. Right.
00:53:58.090 - 00:54:09.622, Speaker A: Sometimes I think some people are not very business savvy, and so, like, we were talking about. Before, right? You could have a super highly technical person who doesn't understand sales or marketing, or they're going to be toiling away in their basement.
00:54:09.686 - 00:54:16.846, Speaker B: You're really going to spend that much time? There's got to be a point in time where you're like, sharing information or you release something.
00:54:17.028 - 00:54:18.480, Speaker A: Maybe, but.
00:54:20.610 - 00:54:36.022, Speaker B: You'Re screwed. Yeah, but I think that might be the end of this. It's getting close to an hour, so I just want to wrap this up. It's been a pleasure talking to you and finally great to finally talk. We haven't spoken at before.
00:54:36.156 - 00:54:37.574, Speaker A: Yeah, it was nice to meet you, man.
00:54:37.692 - 00:54:41.910, Speaker B: Yeah, nice to meet you too. How good is that now? It's in the books.
00:54:42.650 - 00:54:43.810, Speaker A: It's official.
00:54:43.970 - 00:54:49.540, Speaker B: It's official, but yeah. Lovely having you on. It's been great. And there we go.
