00:00:00.570 - 00:00:24.026, Speaker A: If you're going to win a bot race, you are promoting your bot. If you have a really good bot, you're going to win. And then you're going to be like, yo, click this link right here if you want my bot for your own repo. And now you created a business out of that. If you look at it long term, bots will eventually take a bigger piece of the pie and then humans will take a bigger piece of the pie of what cannot be done via bots.
00:00:24.218 - 00:00:54.842, Speaker B: Scraping bit is brought to you by the following sponsors. Fastlane Labs Trustless mev mev protocol maximize your eth staking value with me v e exclusively on mev IO and composable execute any intent on any chain coming soon to mantis app that is M-A-N-T-I-S-A-P gm gm everyone. My name is Agarchi from scraping bits and I'm with Gallo Despallo, aka Alex the entrepreneur. How's it going, friend?
00:00:54.976 - 00:00:56.286, Speaker A: Thank you for having me.
00:00:56.388 - 00:01:02.026, Speaker B: Yeah, of course. I think we should do a quick little intro of who you are and what you do, just to give some context.
00:01:02.138 - 00:01:22.774, Speaker A: Yeah, I'm overemployed. So I worked as a security researcher, Spearbit as a security researcher, also the independent researcher in a few contests, and I've also been a judge at code arena. My quote unquote day job is a badger, both as a developer and as a security consultant. I also freelance on the side and random stuff related to Ethereum in general.
00:01:22.892 - 00:01:29.766, Speaker B: Got you. And how did you get into all this stuff? Were you in web two before or did you just kind of like dive straight into web free?
00:01:29.868 - 00:02:02.258, Speaker A: Yeah, I think I'm one of the suckers that got suckered into joining the space in the bull market. But I would like to say that I joined earlier. Basically, I used to do a thing called code mentor where you basically are paid by the minute to consult people in software stuff. They basically call you on Zoom, they share their screen and they pay you by the minute. It's an amazing job if you are a remote worker or you're like a digital nomad. So honestly, I feel like it's not shield enough. Like if you're getting started in Ethereum development, that's a great way to get some tips and then maybe you do some other jobs on the side.
00:02:02.258 - 00:02:36.590, Speaker A: And that's really how I got started. I found Shane, the founder of Polymarket, and basically asked me to help him build his mvp. And so that's how I got into building front ends for smart contracts after a year or so I basically decided I want to become a smart contract developer. And right at that time, code arena was also started. So I kind of started doing hackathons, got into security research, won some hackathons. I can talk about some of that stuff. But ultimately, through winning the hackathons, I got a bunch of offers and I took an offer with Badger, and that's how I ended up working with them for two years now.
00:02:36.590 - 00:02:50.398, Speaker A: And at the same time, I kept my moonlighting job at code arena. So that's kind of why I'm ethically overemployed because I ultimately always mool at code arena and then done security research on the side while having a day job at Badger.
00:02:50.494 - 00:02:54.418, Speaker B: Yeah. And you're at c four, right? And you became a judge there as well, didn't you?
00:02:54.504 - 00:03:46.498, Speaker A: Yeah. Basically, if you're not familiar with Badger, we used to do yield farming strategies, and that's what I was super interested in when I got started with all of Ethereum. I just enjoy building kind of these closed loop systems where you deposit funds and then they go back and the number go up. I just thought it was cool. And when you do that type of stuff, though, you need to do a lot of security type due diligence because ultimately you could deposit into some malicious contract or something and you're going to get wrecked. You're always one step away from being wrecked. And so that's why I think we did with Badger, we did six different audits in a year or six different contests in a year with code arena because that just made a lot of sense for us because before launching and having hackers review our code may as well have security researchers do that.
00:03:46.498 - 00:03:47.074, Speaker A: Right.
00:03:47.192 - 00:03:55.558, Speaker B: Did you ever think about automating these farming strategies as well? That's personally something I tried to do at one point. I never got too deep into it, but I think it's definitely possible.
00:03:55.724 - 00:04:44.646, Speaker A: I mean, that for me has always been my goal. And that's where kind of with badger, I guess we saw it different ways with other contributors that badger. But my goal was to write a system that will scale to infinite amount of strategies and it will work automatically. So that's where, if you follow the space of DFI, you know that there's 4626 in terms of the vault standard, which I'm not a fan of. Ultimately, my main goal with the vault architecture was to make it so that you could, just by having the data on chain from the vault, you could spin up a front end that was fully decentralized. And so my main goal, with all of that architecture was to make it so that you could actually have like a self custodial system that was 100%. You audit the contract yourself.
00:04:44.646 - 00:05:10.254, Speaker A: The front end is automatically generated by the onchain registry that is using these vaults that are all systematically built to have the same type of interface, same type of information. So that the front end could have been a completely decentralized one, which is a massive challenge because one question I would ask you is how will you price something? How will you price a shitcoin on a random front end? Right?
00:05:10.372 - 00:05:11.742, Speaker B: Yeah. Interesting.
00:05:11.876 - 00:05:17.426, Speaker A: Yeah, that kind of got me thinking. And that was almost two years ago now, maybe January 2021.
00:05:17.528 - 00:05:18.226, Speaker B: Okay.
00:05:18.408 - 00:05:58.346, Speaker A: Where we basically launched kind of this intermediary architecture called vaults 1.5, which were basically work by year, no original work. That's what we call the vaults one. And then 1.5 was kind of my contribution where a neat trick we would use, we use the struct for address and quantity, so that if you just do a list of these structs, you basically can return arbitrary values that can track your rewards. And so by doing that, you can basically make this architecture scale to any front end or basically to track any type of token. Then the second neat trick we used was using if call on the arvest.
00:05:58.346 - 00:06:26.018, Speaker A: And we set it up in that way that we could simulate it as a way to predict the price impacts that it will generate. Because if you have a view function that tells you the amount of rewards you got and then you check the if call return value on your vault, you basically can determine the slippage that your harvest is going to have. And so that was the way in which we kind of implemented monitoring system that was based on, on chain data, basically. Again, fully trustless and just autonomous.
00:06:26.114 - 00:06:38.522, Speaker B: I love the fully decentralized, basically front ends. I think they're amazing and anybody can just kind of spin them up and not really worry about having infrastructure in the back just to get some data. I've always been like an advocate for that.
00:06:38.576 - 00:07:12.630, Speaker A: Yeah. On that end of the decentralized front end, I will say that there's ultimately going to be a massive issue because people don't like them. That's the reality. Because they don't like the fact that you have to inject your RPC into the front end. Because otherwise if we use a shared RPC, we're going to be tracking you. And so you just get this ux where people are just mad that they have to unlock metamask or something. My current idea, this is kind of the idea that I have is what if we had a box in the center of every front end that forced you to paste like, an alchemy key or something? And that was the only action you would have to do.
00:07:12.630 - 00:07:29.450, Speaker A: Because if we all agreed on that, then what we will do is we will just write a chrome extension where you pass your pc key, and it could be even to a local node, like just a local URL. And that way you will be able to have decentralized front ends that unlock automatically without having to unlock your metamask or something like that.
00:07:29.520 - 00:07:46.894, Speaker B: Yeah. And I think if you're on ethereum specifically, you could just use the flashbots RPC. That's public. And just chuck that in there. She'll be right. I think the alchemy is definitely a good way of doing it. You're not risking your wallet in any way, and you're just using a public RPC, basically, so it is fully decentralized.
00:07:46.894 - 00:08:02.146, Speaker B: But you did mention when you're in a badger dow, you did a lot of c four basically orders. Right. And even on Twitter, you've asked people to send you their reports to you so they can get roasted. What did you learn from these reports?
00:08:02.258 - 00:08:51.430, Speaker A: Yeah. And that was kind of my master plan. It's like something that I've learned is you can basically, if you are honest enough and you spend enough time, you'll find jobs that pay you to learn. And so that was my experience at code Arena. I basically, after being a sponsor, basically after convincing badger to do these audits, because our side was, let's keep the team small, let's just delegate the security, or at least the piece before launching, let's delegate that to somebody else instead of having six people full time or something like that. But basically, I was invited to become a judge at Code arena, and I just took the opportunity and I would moonlight daylight work on a badger, and then I will moonlight doing those type of contests just as kind of a strategy. My strategy there was, I mean, my goal was to learn, and that's why I did it.
00:08:51.430 - 00:09:38.374, Speaker A: And then my strategy was to be fair to most wardens. And that's what I think most wardens are grateful for, for me, is that I'll write like a comment or I'll give them some advice. I remember linking the class about boolean algebra because some people just keep sending the wrong finding. When you swap from requires to, if you have to do the opposite, so people get confused. So basically, I think everybody was happy with my work, and so I just kept getting this type of gigs, and I will say it kind of evolved when the open sea contest happened. I think there were a group of judges that were very respected and they still are. They're great people.
00:09:38.374 - 00:10:41.978, Speaker A: They're all lead security researchers now. But basically what happened was there was some controversy around not awarding some of the bottom scoring quality assurance reports. And basically they basically asked me to intervene and just give my thoughts kind of be, they called it like the, I don't remember, it was like the executive judge, something like that. But basically I wrote kind of this system to score qas and basically give them like a quantitative measurement to score them. And I basically told them which of these QAS reports should have been paid and which one shouldn't. And I think that convention is still ongoing and is still being used even today as we go into kind of a new era code arena with both races. I've had a pretty strong impact there in terms of getting people to just use these quantitative measures to make sure that everybody, because you will always make a mistake as a judge, but at least you can be fair in terms of judging the findings in the same way for everybody.
00:10:41.978 - 00:10:44.780, Speaker A: And that was the goal from my side.
00:10:45.790 - 00:10:54.430, Speaker B: And what did you kind of constitute was a low risk and a high risk basically exploit or vulnerability, you mean.
00:10:54.500 - 00:10:57.166, Speaker A: Kind of talking about the classification in.
00:10:57.188 - 00:11:00.000, Speaker B: Terms of works, how did you choose web?
00:11:00.370 - 00:12:04.094, Speaker A: Yeah, and there's another side and that's why I would invite you or the listeners to try and participate as a code arena warden. Because something that you want to keep in mind is that there's only one customer in code arena and it's the sponsors, it's the people that actually pay for the contest. So there's always going to be kind of this attrition between what is a high impact finding versus what is paid as such, or what is like a valuable finding versus what is paid a little. A great example is something that Spearbit has done is they made a finding about vaults for six to six vaults being frontrunable and causing like a loss to the first depositor. They basically made it public because they taught that so much that any type of vault system will always get like 100 times the same report. And so those type of reports, they end up being even high severity in terms of impact, but they end up being paid very little. But that said, the way you classify findings is actually fairly straightforward.
00:12:04.094 - 00:12:37.662, Speaker A: If there's no loss, or it's a loss that is basically caused by yourself, you are going to downgrade them to a QA or a low severity. If there's a loss but it's not particularly high loss. For example, a loss of yield for the vault example, or if it's a marginal loss or it's a loss that is conditional on some sort of external condition, then you would call it a medium severity. And then if there is no need for an external condition, basically if you can press the button, you can steal all the money. That's going to be a high severity because it's non negotiable. People can just steal everything.
00:12:37.796 - 00:12:47.794, Speaker B: Yeah, exactly. And how would you give advice to people coming into c four and writing good reports, basically getting ranking higher?
00:12:47.912 - 00:12:53.342, Speaker A: Yeah, I mean, that's something that I'm going to give you, like a parallel, by the way, have you ever freelanced?
00:12:53.406 - 00:12:53.970, Speaker B: Yeah.
00:12:54.120 - 00:13:05.270, Speaker A: Did you do kind of those upwork type stuff where you send your resume or something and then people look at it and then you have to send some sort of application letter for gigs? Is that something you've tried?
00:13:05.420 - 00:13:10.454, Speaker B: Oh, no. People usually just message me on Twitter. That's basically how it works.
00:13:10.572 - 00:13:37.082, Speaker A: Yeah. And that's actually called like preselection. It means that people know that you're good or they have an intuition that you're good and so they're going to just go for it. And so that's really good. But when it comes to more of these cold scenarios where people don't know you and you just have to have your work talk for yourself. Now, the most effective setup that I found is that you just are going to be super honest and you're going to tell people what you're going to do. And so I'm going to kind of use this as a parallel in terms of a security report.
00:13:37.082 - 00:14:01.898, Speaker A: The way you write a security report is you want to write it in the way in which the other person wants to read it. Right. So you want it to be simple, you want it to be to the point, you want it to have specific keywords that are going to trigger either an emotional reaction or they're going to trigger an understanding. Right. When we talk about loss of yield, that means something more than just the words that I said. We already know what we mean. Right.
00:14:01.898 - 00:14:42.614, Speaker A: We mean either a front running of harvest, a sandwich attack, some sort of MeV being licked, or the tokens being thrown away somewhere else. And so you want to use those type of keywords. And the best advice, though, that parallels back to the freelancer is the best way to learn how to be a freelancer is to actually try and employ people because you're going to get all of these job applications where just people literally don't think about it and they just send you some crap. And once you see the flood of crap 100 times, people sending a resume and saying that they're the best and saying some gibberish stuff, that's when you're going to realize that everybody defaults to kind of this crappy presentation type.
00:14:42.812 - 00:14:43.990, Speaker B: Low effort.
00:14:44.490 - 00:15:44.378, Speaker A: Exactly. You want to just go above that and the best way will be to check some of the winning reports and really genuinely ask yourself what are they doing? It's kind of like a shape. The shape is like a clear title, a short context, a step by step exploit and then a coded PoC. And once you have kind of that shape in your head where you can recognize a good report, then you want to try and write it. And obviously it's a lot more difficult but you can improve as you go because now you understand kind of the criterias and then you want to be realistic that if you have one day to compete maybe it's okay to send a crappy report and just go for it and just try your luck. But at the same time you don't want to be dishonest about it. You want to know when you're kind of cutting corners and you want to definitely have a great idea, at least in your head of what an amazing report looks like which has those conditions and then should also be awarded because obviously you can write the most amazing report.
00:15:44.378 - 00:16:13.506, Speaker A: But if you're going to either over inflate the severity of a finding or you don't know what you're talking about, then Chad, GPT's reports look amazing. From my experience they really do look amazing. And then you spend ten minutes trying to understand it and then you realize that it's chat g and that's when you just ban the account and you're like, okay, you're done. I'm done engaging with this because you tricked me. That's something to keep in mind.
00:16:13.608 - 00:16:57.058, Speaker B: Yeah. So it's basically if you want to be a good c, basically security researcher, then you got to put yourself in the reporter's shoes and what they're looking for. And the way you can do that is by looking at past winning reports that are elite from the best, that are constantly scoring in the top ten or top five. And that's how you could kind of learn to become good at writing reports. And then obviously you can find patterns in how they find the severity of bugs. And then if you're trying to become basically a judge, you've got to look at it from basically like a judge's shoes. And okay, what are they looking for? And again, you go back to the best kind of reports and the ones that are unique and the people constantly scoring at the top and see what the patterns are and how they structure it.
00:16:57.058 - 00:17:21.130, Speaker B: As you said, there's a clear structure and super simple, concise, and it gets the point across in a compact way. So I definitely think that's some great. How do you, let's go back into the auditing side in c force or being a security researcher, how do you kind of visualize state machines when you're auditing?
00:17:21.630 - 00:18:13.626, Speaker A: Okay. And I think I've posed a question on Twitter fairly recently, because this is, in my opinion, like a massively underexplored area. And it's like, how do you actually visualize state machines? Because if we're talking about the basic security process, and I think eventually spearbit will publish like a talk that I gave. And the three points of a basic security research are you want to understand the code. So basically, can you explain me in one line how the contract works? And then the second part is, did you read it line by line? Basically, did you find the U bugs, just like unit test, you have unit bugs. And then the third aspect is kind of the creativity aspect. Did you imagine something going wrong and then worked backwards from it? And you found kind of explore some of the crazier ideas? And that's basically the security process.
00:18:13.626 - 00:19:23.710, Speaker A: But when it comes to kind of zooming in something, that happens, especially as we work with more complicated systems, because Uniswap v two is a primitive, you would argue it's something that everybody kind of understands, right? And so people are no longer just building uniswap v two or like a x times y equals k architecture. They're adding all of this extra stuff. And so from my experience, it's very hard to keep track of all of the possible states that are happening in the code and testing against them. And I feel like if we add some sort of a visual language because I think maybe I'm making this up, but I think they did studies, and most people are visual. And then some people are mostly, they think through sounds, and then some people, they think through touch, they're kinesthetic or something. But most people want to see things. And so if we found a way to clearly show the state of a contract or like a specific state of a contract, and then we kind of asked our usual security questions such as how do I break it? How do I steal something? What are the conditions that will cause it to stop working.
00:19:23.710 - 00:19:42.102, Speaker A: That would allow us to kind of have this checklist that from my perspective we really don't have. Let's say you're going to audit Dai. I'm just going to kind of do the socratic matter and ask you, let's say you're going to audit dai. And so what kind of states would you be thinking about?
00:19:42.236 - 00:20:03.694, Speaker B: If I was to audit Dai, I would basically look at, okay, what happens if I basically mint a bunch of tokens or send tokens to the contract or ether to the contract? What can I alter then? Or is there any kind of access control, any way to manipulate that, or even, I guess even oracles in a way of what's keeping it?
00:20:03.732 - 00:20:10.506, Speaker A: And what if I told you that you could donate some tokens to dai and that will break something? Like what will be your reaction?
00:20:10.618 - 00:20:13.294, Speaker B: Well, obviously you'll be concerned, right?
00:20:13.332 - 00:20:58.334, Speaker A: And obviously I'm tricking you because there is no such check. But what if I told you that if the caller, this is actually true. What if I told you that if the caller of DAI was the recipient of the token, and in that case the token does a no op where it actually skips a bunch of checks. So what if I told you about that? How would you be able to track that? Right. And so that has been my experience is that once the set of contracts becomes complex enough, it becomes very hard to talk about different statuses. And I feel like we really need, like the idea of having a finite state machine that is just circles pointing to different circles. Cut it from me.
00:20:58.334 - 00:22:11.526, Speaker A: I feel like we need to take the work that has been done in a pyrometer, which I believe is a great example of trying to deal with the infinite complexity of smart contracts because they do bound analysis and they kind of tell you how each variable is going to be bounded and what are the possible values. And you can look at it almost as a quantum mechanic type deal where it could be one thing or the other thing. But then I feel like we still have one layer of, there's one layer of thinking that we still have to do in order to interpret that data. Whereas if we had a way to visualize it, I feel like it would allow us to really consider some of these more edge cases that tend to be the source of all bugs. Because from my experience, the code that has been checked 1000 times by 1000 people, the code that everybody will check on their first ten minutes of audit, that code never has bugs. The code with bugs is the one that wasn't checked because of assumption or it wasn't checked because nobody got to it right. Because if a system is complex enough and you just send a bunch of people all trying kind of the same thing, they will all eventually stop kind of at the same level unless you give them a reason to continue.
00:22:11.526 - 00:23:01.974, Speaker A: And so I feel like that's really kind of the heat map of the contract, and coverage doesn't solve it. By the way, the obvious answer is check test coverage. But the issue is that test coverage will show you the branches that are covered by the tests, whereas what I'm talking about is kind of more of an intellectual coverage based on the state that you're thinking about. So it's like you perhaps tested the code in the happy flow, but did you test it when you have no balance in the case of die? Or did you test it when somebody else is trying to transfer, or do you test it when somebody is actually calling to transfer to itself or something like that? I genuinely believe that in the future, as we build more sophisticated tools, this aspect of visualizing states is going to be a lot more important. We're going to have the words to actually talk about it, which I feel like we quite don't have yet.
00:23:02.092 - 00:23:52.162, Speaker B: Yeah, I agree completely. I think the tooling in the space is quite limited right now and underdeveloped. I think what Brock is doing is a terrific task and terrific tool that is quite amazing for the space. And I think it's underappreciated as well. I think bound analysis is a great assistant to basically get all the possibilities and what's the range of this parameter and what's realistic judging by all the required statements and or if statements. I think that's a real help. And I think security researchers in general, they spend too much time trying to get an overall understanding of the context of the single contract, and they don't have enough time to think about what they do best, which is thinking of basically exploits, which can be external contracts, right, interacting with different functionalities, which developer wouldn't really think of, for example, like a flash loan sending a million tokens to the contract.
00:23:52.162 - 00:23:57.430, Speaker B: What happens then? Or doing it from a contract instead of an EOA, then what happens?
00:23:57.580 - 00:24:57.866, Speaker A: I will take a little bit of a contrarian perspective there where I feel like the metaphor that I see is almost like trying to control everything. But because these type of contracts are so new in a way we're not used to them, we really don't have the tools. And I feel like the main challenge that we have introduced through the EVM is the idea that you're thinking in because, you know, variable, you assign the value, but the reality is that you have storage, which is a pointer to anything. And so we are basically developing exclusively memory unsafe programs by definition, because we have this pointer to, you know, it's kind of the argument for rust, where they're like, bro, why would you ever do something like that? But at the same time, it's kind of a feature because of the fact that you will want to be able to call a separate contract. And so I feel like this extra dimensionality makes it exponentially more difficult. And then the other end is almost like, in a way, the moral of the stories. We want to let go of some control.
00:24:57.866 - 00:26:07.994, Speaker A: Because I feel like if I tried my best and I just spent all of my life trying to audit a contract, I will still fall short, because for whatever reason, maybe it's the way I think could be the way I behave, whatever reason, there's a million of them. And so the idea that we have kind of, we're at a crossroad, where in this space you can have an insane impact as a solo individual. You could do so much. But at the same time, I feel like these type of areas, because we are so different as people, it actually really helps to get massively different types of opinions because for some people, the dumb exploit, they find it immediately, and other people, they can only find kind of the weirder stuff, and they have a hard time finding the more mundane stuff. And so I feel like that's where we're at, where it will be. Basically, it's like, yes, we can improve a lot, but at the same time, I feel like it's basically unacceptable to not have multiple eyes that scrutinize your work just because of the stakes and because it's so hard to actually have everything under control. I feel like there's so many variables that you could be dealing with, especially if you have even, like three or five contracts that you're writing.
00:26:07.994 - 00:26:17.614, Speaker A: You really don't want to be at a point where you're the only person that understands your code. You want to make sure that other people also understand it and have challenged it enough so that it's actually robust.
00:26:17.742 - 00:26:31.382, Speaker B: Yeah, for sure. If you can't get someone else to understand it, then it's probably not good code, right? At least that's what I think. It's kind of like teaching. If you can't explain something in a simple way and convey it to someone else, then you probably don't know it too well.
00:26:31.516 - 00:27:31.082, Speaker A: Yeah, that's one side of the discussion. And then the other side is, I feel like, and I'll give you like, a real example, like, going back to kind of the trustless vault stuff, something I spent basically six months of my life on, was a contract to do trust rewards distribution. So I started by finding every exploit or every issue with the synthetic staking contract. Like, if you send me any of your staking contracts, I'll find a bunch of stuff that are all edge cases, though. Like, nothing really noticeable. But basically, in building something like that, you end up going from kind of a two dimensional system where you just have time and resources, right? You earn rewards over time, but then if you make it general, now you have a third layer of complexity, because now you have kind of a. I did like a vault epoch reward type indexing, and I found that I basically couldn't talk to anybody about it, because if you actually didn't go through the exercise of trying to write something, I guess, in the third dimension in some way, it does take some time to adjust to.
00:27:31.082 - 00:28:08.854, Speaker A: And so that's. The other side is that you can have insane impact in terms of stuff you can write alone, but at the same time, for other people to understand it sometimes does take a lot of effort. And another example would be the balancer vault. I will challenge you to go and just write a deposit transaction for a balancer vault, and I'll talk to you maybe in a week. And I'd be surprised if it didn't take some effort to really understand us. In spite of the fact that the core architecture is really clean and really solid, there's still all that getting used to all of these conventions and just the kind of the lack of tutorials. Right.
00:28:08.854 - 00:28:30.990, Speaker A: There's no video tutorial on how to write that, as far as I know. There's not even a solidity tutorial. You would have to figure that out by reading, literally just reading the nums that they have to define the user data. And then you will. Basically, my best advice would be to do a deposit on metamask and just try and reverse engineer the cold data, because that's probably the best place, if that makes sense.
00:28:31.060 - 00:29:08.202, Speaker B: That's what I do, though. Yeah. I think doing reverse engineering on cold auto from metamask is actually quite good because their front end does all the stuff for you and puts it in correct terms, and you're already doing it in a visual way. So let's say, like one e, you're doing like a deposit of one e, for example, the call data is one e, and then you can look at that, you're like, okay, that's what it looks like in the call data and you can go back into the contract and kind of just follow it down where that value is being used. So I think that's probably the best approach that I would do. And then just look at the source. Source code basically.
00:29:08.336 - 00:29:53.818, Speaker A: Yeah. What I will say there is that, and I would really invite you to try that out just as a fod exercise. The thing I would challenge you to is to do it and explain it to somebody else because I feel like we as developers, we can actually get into the nitty gritty and we are willing to spend, I don't know, 2 hours on something to figure it out. I feel like the next win in general, for Dapps in general, is going to be the preview mode where you want to make sure that people can just press buttons and do whatever is going to happen, and then they can preview what's going to happen to make sure that they actually understand what they're about to do. Because I feel like the call data validation method really is not, people just are not willing to do it in general.
00:29:53.904 - 00:30:12.574, Speaker B: Yeah, it's super tedious, requires too much effort. You basically need to be experienced in it as well. And then you have to, even for an experienced person, it does take some time to do so. Imagine just the Normie person trying to use your protocol. They're not going to know how to reverse cold data and be like, oh yeah, I remember this. I know what this does.
00:30:12.692 - 00:30:31.254, Speaker A: Yeah, I mean, this is close to home, but basically that's kind of the story that from our perspective, the story is, bro, you opted into a self custodial system. You are welcome to the arena. You signed away your coins. You're an idiot. Try again. That's basically our perspective. It's not a good perspective, but whatever.
00:30:31.254 - 00:31:21.990, Speaker A: That's kind of the objective perspective of what happened on a technical level. And then the experience of a normal person is, bro, I was promised that this thing is going to happen and now I lost all of my money. How do you undo it? Who do I call to get it undone? Right, because that's really the experience when it comes to that. And that's why I'm not a fan of even making the uis too easy to use. I really like making Uis easy to use from a developer standpoint, from a product standpoint. But when the stakes are so high, I feel like we should have like a developer only playground where you know that the people that are actually doing the stuff they at least have some understanding, because otherwise they will be deceived, scammed, et cetera. I feel like the space is very good if you're a developer, but if you're not a developer, you should do nothing.
00:31:21.990 - 00:31:23.782, Speaker A: You should just watch, just enjoy.
00:31:23.916 - 00:31:47.550, Speaker B: Yeah, it's really quite like a literal dark forest for just the normies trying to just interact with protocols, because they don't even think about the technical stuff like Mev. That can happen as well. Sure you can have a preview and it simulates it, but then they're not considering. Okay, can this be front ran or any of that? What's going to happen if there's no specific checks for that stuff?
00:31:47.620 - 00:32:36.350, Speaker A: Yeah, that was something I wrote like a quick thread on that. Apparently if you retweet your own poll and then you write a thread, it actually produces reach. Or maybe it was a shitty thread, but the point that I was trying to make is that going back to the decentralized front ends, if you're going to have a decentralized frontend, you need to have a trustless pricer, which is basically a contract that can determine a price of a token. And so the way I tried to solve it, and we tried to solve it at badger, was to basically hard code every single possible source of liquidity that made sense. And if you go and do the math, 80% is on uniswap and curve, and then there's some balancer and that's basically it. If you really crunch the numbers, that's basically the liquidity on main net. And then you will basically just write optimization logic or whatever to figure out what the optimal price is.
00:32:36.350 - 00:33:16.042, Speaker A: To write an optimal price on a single segment, as in finding the best place to do a single swap is actually not that expensive. I think we got it down to maybe less than 100k gas. And maybe I'm wrong, I don't quite remember, but that's basically a whole kind of worm. Because the idea of having to maintain something like that makes it so that you will basically have to degrade the ux to the point where you go on a website, you have to put the RPC key, you have to choose your pricer, and your pricer maybe has to be updated or something like that. And it is achievable. But at the same time it's so much more convenient to just look at coin gecko or something like that to actually do it.
00:33:16.096 - 00:33:35.678, Speaker B: Yeah, I love all the automation stuff and the decentralized stuff, but it is like a ux kind of problem. And there's like multiple solutions for, I guess, your goals. But I also wanted to switch topics and kind of go into about bot races on c four. Yeah. In your experience, what do you think they miss and what do they solve?
00:33:35.774 - 00:34:13.766, Speaker A: Yeah, I mean, code arena has many challenges, and if you look at any other competitor Sherlock hats, but if you look at them, they basically run into the same issue that eventually you have to deal with too many people. That's the reality. It's really as simple as that. There's too many people that are going to send the usual stuff and they're going to dilute the pot, and their marginal contribution is zero. And that's a very psychopathic thing to say, but that's the reality. It's like if they didn't participate, the sponsor wouldn't care. The other people that are competing, that are finding all the bugs will be happier because they get more money and the organization will spend less money.
00:34:13.766 - 00:34:37.490, Speaker A: And so it's a difficult challenge in balancing out inflow of new talent. Something that you want to keep in mind is that if any of the top wardens quit tomorrow, they will be replaced. You're like, oh, wow, there's like an iraqi. No, bro. There's literally people that are waiting at their ankle just to get their spot. That's the reality of this space, because it's really that competitive. And so that's something to keep in mind.
00:34:37.490 - 00:35:25.010, Speaker A: And then the other side of the discussion, though, is how do you keep it open to newcomers? And so what happened over time is the coolerina never wanted to get rid of the QA report. That's really what happened. They started by saying that you could send kind of informational findings, such as events or gas optimization or stuff like if you transfer too much value, then you lose it. Like this stuff where you basically make a user mistake. We would call them low severity or quality assurance findings, and they never wanted to deprecate that stuff, whereas other places, such as Sherlock, they just make them out of scope and they don't pay them. Code arena always wanted to keep that open because they obviously see it as the gateway to get new people in the space. I'm just going to send something, maybe I'll win $20, and that's going to be my small win, and I'm going to get started.
00:35:25.010 - 00:35:50.150, Speaker A: And so I think it's a really smart decision there. But what it causes, it causes the fact that everybody's sending the same thing without any originality. And so once you talk about repeating the same task, that is monotonous. That is basically a pattern matching operation. That's when you want bots. And so that's really what they did. They simply started saying, okay, we're going to have a bot race.
00:35:50.150 - 00:36:45.594, Speaker A: A bunch of people that just write bots, they're going to send us our QA report, and then anything they find, we make it out of scope, which means that if you find a bug, that could cause the entire protocol to go down. But if it was already reported by the bot, it's considered a known finding because you could have just written it from the report that is made public in the contest repo. So as a way to get rid of all of these common submissions, because the idea at the end of the day, which was also confirmed by a guy called, I think, is where was a security researcher that wrote a paper about automating bots. And basically what he found is the unique diversifier. The thing that actually makes you find bugs is you as a human being, because there is no formula to find all of the interesting bugs yet. And so bots are just getting rid of all of that stuff so that people can focus on more of their unique strengths and in offering something that is actually valuable to the sponsors.
00:36:45.722 - 00:37:06.722, Speaker B: Yeah, that makes sense. But let's say this. Someone does create a sophisticated bot, and then it is able to basically find critical vulnerabilities. Then you're getting rid of that kind of, like, association in the main pool, are you not? Like, let's say a bot finds something and then someone finds something on top of that, but it's already out of scope then. So, I guess. How does that work?
00:37:06.856 - 00:37:30.182, Speaker A: Yeah. Okay. That's kind of the second level of bot races, and that's where I feel like there's only one other person that can speak about their frustration. I call him the wall. It's basically anon with, like, L-I-L-I-L-I call it the wall. Okay. Basically, the wall is the only person that's written a bot that actually can find, like, mediums or high severities reliably.
00:37:30.182 - 00:38:11.398, Speaker A: My advice to a person that is finding all that stuff is to not send it in the bot race as of now, but to just send it in the main pot and really use it to gain an advantage there. There are other places, if you really hear what I'm saying, I've already told you everything, but there are other places where being faster is actually the advantage because they are first in, first out in terms of awards. And so that's where I will use my bot for high and medium severities. I would just reject the hell out of that stuff and just send it there. And then for the bot race, I will look to win at the bot race. But that's the last piece that I want to mention that people really don't get. It is that code arena is the place.
00:38:11.398 - 00:38:54.150, Speaker A: Like, everybody acknowledges that if you're the best in code arena, you're among the best in the world, right? Is there any question there? There is no question. Like, it's a fact, because you have to be a grinder. You have to be there. You have to do it for a long time, and you have to actually be good and smart, and you have to constantly win. And so if you're going to win a bot race, you are promoting your bot, right? We actually have had bots that were like professional bots, and they honestly got wrecked. What I'm trying to say, though, is, like, if you have a really good bot, you're going to win, and then you're going to be like, yo, click this link right here if you want my bot for your own repo. And now you created a business out of that.
00:38:54.150 - 00:39:09.222, Speaker A: And so people really don't look at it with that long term. But if you look at it long term, bots will eventually take a bigger piece of the pie and then humans will take a bigger piece of the pie of what cannot be done via bots.
00:39:09.366 - 00:39:54.518, Speaker B: Yeah, I agree with that point where if a bot does win, let's say, in the bot race consistently, it's not about the money at that point. It's more about, okay, the publicity. Because c four is a stage, it's probably one of the biggest, if not the biggest stage you can go on to basically display your skills. And it's been a common occurrence that people that rank top ten or top 25 or even top 50, they just get picked up or poached because people want these people on their teams because they're publicly displaying that they've got skills right on a stage. And all these teams are basically just staring at this constantly. Okay, who can we get next? Who's new, who's just popped out from the woodwork now is one of the top in the space. So it's really a big stage.
00:39:54.614 - 00:40:16.926, Speaker A: Yeah. I will say this goes deeper. Like, if you've ever done hiring for companies, for teams or whatever, basically there's a million ways in which you can go about it. But one of the most popular ones is actually doing hackathons, like telling anything particularly weird. People do hackathons. They put a pot, and then your winners, you just poach them. You basically hire your winners.
00:40:16.926 - 00:40:28.706, Speaker A: And the same thing applies to code arena, where if a security researcher can find a lot of bugs in your code, you will probably engage with them again just because it makes sense. It's just.
00:40:28.888 - 00:40:38.166, Speaker B: Yeah, yeah. Of course. They're obviously scoring high, so may as well just bring them on board as like a private order, though. I think bytes of did that as well. If I get that correct.
00:40:38.348 - 00:41:14.082, Speaker A: Yeah. One day I'll say that all these people are going to have to tip me because I'm making them look good. The joke that I got to make is like two years as a security researcher, never won a single contest. Ask me anything, right. But no, I think they did a great job, and you can see that the people are really trying. I feel like it takes me one contest to know if a person is going to be a really good auditor or not, even though they may not have the chops. I feel like just the eagerness to contribute, the extra information, the detail, just shows that you spent a lot more time.
00:41:14.082 - 00:41:32.006, Speaker A: And I feel like people that actually are looking for great talent, they also pick up on this stuff. I'd be surprised. Mostly it's only the people that don't, I guess, value more of the flashiness. They don't see it, but guess there's room for everybody, so they're lost. We'll just get more of this type of talent.
00:41:32.118 - 00:41:39.606, Speaker B: Yeah. And what do you kind of see within the high talent pool? What's a common occurrence that you see within these reports?
00:41:39.718 - 00:42:25.722, Speaker A: Well, I wanted to say something separate because I feel like something that has happened already is like the top researcher spinning up their own firm. That's not rocket science, but that's also something that has happened multiple times. If you checked kind of the previous cycle, quote unquote, that was watchbug. Watchbug is, in my opinion, some of the best independent researchers in the space, and they basically were killing it on code arena, and now they do. I don't think they compete anymore. Maybe they did one audit in this year because they have a bunch of clients and they just offer individual researchers the same thing you can say about trust. I think that's a fairly popular case that has been done already, and so that's kind of the playbook if you want to spin up your own business.
00:42:25.722 - 00:43:12.758, Speaker A: From my perspective, I feel like it's a lot like the pay is kind of to work, so I kind of enjoy more the competition aspect rather than even doing private audits. I feel like that's a lot more engaging. But obviously, if everybody starts competing and the payouts go to zero, I'm obviously going to be quick to change my mind. I would say that the biggest thing that I'm seeing is that they saw a natural, or you can fake it, but it looks like a natural contrarian view where you can tell them that the code does this, and they will instinctively check whether it does or not. And they will assume that it doesn't. They will assume as the sponsor, somebody that is paying as the customer, they will assume you're wrong, because that way they can check. They can actually turn every stone.
00:43:12.758 - 00:43:53.782, Speaker A: So that's something that really distinguishes the top researchers. And then I think the other thing is just their edge. Like at the end of the day, the reason why these top researchers are there, it's not because they have a particular skill over us, but it's because they are set up in a way that allows them to succeed. I think the best example that is, and I'm not going to mention their name, I don't think they want me to. But basically there are great example of people that spent months working on something and they made it up. So I guess an example that is popular was the Polygon bridge guy, the Batman. There's like four different batmans that was pawning if I haven't spoke to this person.
00:43:53.782 - 00:44:27.922, Speaker A: So I'm just going to assume. But what I'm going to assume is they studied the code base. They stuck with it for a long time until the opportunity came. And instead of having 17 jobs and changing their mind every three weeks or whatever, they just stuck with it. And they were basically the only person waiting for that opportunity. And so with the opportunity shown, they caught it. I'm sure that for every poning, if there's know schmuck, if that is just waiting on the wrong know, they're waiting on the BNB bridge or something and nothing happens.
00:44:27.922 - 00:44:56.906, Speaker A: And so they're not going to get that opportunity. But I feel like in this space, the people to dare is one of the greatest edges. And then the second edge is the tech. Whether you built something that is your own, that allows you to either respond to accidents or track contracts, or find vulnerabilities before everybody else. I feel like the biggest thing is really just in setting yourself up for success and it's basically taking massive risk. That's the reality. If you can afford it, obviously.
00:44:56.906 - 00:45:44.586, Speaker A: And then the second part is in kind of pushing into that edge, which could be on a tech side if you're more techy, or it could be on the social side, if you are in a discord and you have access to the contracts before they're launched, that's your edge, right? You don't even need to know any code. That's the edge. It's like you're talking casually to the developer. They're showing you the code a week before it's launched. You already know what's going to happen and you have one week ahead of everybody else. So I feel like this type of researchers are advantage because they ultimately made it so that that could happen. Whereas if you treat this space kind of as a job or a day job, these opportunities will appear all the time, but you're not going to be able to seize them because you got to deliver something else tomorrow or you're just busy doing something else.
00:45:44.688 - 00:46:00.478, Speaker B: Yeah. There is one more topic I wanted to talk about, and that was oracle manipulation. I wonder if anybody really thinks about this kind of attack vector and how they aim to even think about doing this or manipulating any oracles, because it is a pretty broad kind of thing.
00:46:00.564 - 00:46:34.678, Speaker A: Yeah, it's something that touches close to home, because if you look at kind of the primitives, or I guess the supposed primitives of the previous bull market, we basically add the uniswap invariant, the fixed product market maker, and then we've add basically lending protocol. Right. You can go on wrecked right now, wrecked news, and you go on the leaderboard. I'm going to guess that 30% of all the protocol wrecked were lending protocols. Just because of that. I've been exposed to that often. A lot of my colleagues either have been wrecked or they integrated with projects that were wrecked.
00:46:34.678 - 00:47:25.962, Speaker A: And so the last one that hit home was the Euler exploit that hit fairly close to home. But at the end of the day, what I wanted to say on the oracle is that oracles ultimately present the issue of how you figure out if something is true and basically how you write a contract that defends itself. These are, in my opinion, the two ideas that are extremely interesting intellectually and extremely difficult to solve. But at the end of the day, if you look at the uniswap invariant, the contract is not defending itself, quote unquote, because the loss goes to the LPR. That's what is happening, right? You're getting rebalanced and you're taking the loss for being the LPR or you're getting the fees. But that's just a way to spin the fact that you're taking the risk and the loss. And so what if instead we wanted to kind of defend that value.
00:47:25.962 - 00:47:53.534, Speaker A: And so the simplest example will be performing a swap via harvest that is done automatically that anybody can call. That will be the simplest example I can give you. And if you go on any CVX yield optimizer or something like that, you'll see that they all have the classic vulnerability, which is the zero mean out. They basically don't have a slippage check because they don't care. It's a waste of time. It costs too much to have an oracle. There's no oracle.
00:47:53.534 - 00:48:25.774, Speaker A: It's a mess. It's going to revert all the time. And so there is no, I guess, no agreed upon solution there beside the idea that you could have a privileged act, let's say a multisig, performing the swap with some sort of slippage or with a price data. Right. You basically solve the issue of protecting value by delegating that observation to an off chain actor, which are the multisig, the trusted people, so that the execution can go smoothly. But basically you solved it by not solving it. You just passed kind of that challenge somewhere else.
00:48:25.774 - 00:49:05.930, Speaker A: And so the interesting question that I have is if there is a way for you to solve it through smart contracts. And my hunch, it's a hunch because I haven't solved it, obviously, but my hunch is that you could actually do that and it will all boil down to the idea of information asymmetry, which means that you can solve it, but it's not solved in every case for everybody. It's only solved for specific cases. But the way you want to solve it is this. What if we made it so that every time you make a swap, it costs more to exploit the price than to perform the swap. Wouldn't you agree that that's the simplest way to solve the problem?
00:49:06.080 - 00:49:09.542, Speaker B: Yeah, if it costs more than the actual swap.
00:49:09.606 - 00:49:47.942, Speaker A: Right. There's no point. Exactly. That's the interesting aspect, is that when it comes to small enough liquidity amounts, amounts that you need to sell, you can actually compute the cost that it will take to perform an attack, and you can perform it on chain based on the reserves, reserves that you're already querying by doing the swap. And so if you think about it, we can do the exercise longer. But if you think about it, the cost to determine if your price is being manipulated compared to a reasonable price is actually lower. So it costs less to know whether it's being manipulated than actually manipulating it.
00:49:47.942 - 00:51:02.746, Speaker A: And that's because of the fact that an s load costs less than a s store. And so because of that, we can basically, look at all of the reserves of a bunch of paths. We can compute the cost that it will take to perform the attack. And as long as the amount that we're trying to swap is small enough, we can actually solve the problem endlessly because we actually know how much it will cost and we can perform that operation. And so that's kind of my intuition is that if you know this, then the only remaining piece is the fact that you can also use proofs, I guess, merkel proofs, to demonstrate that at a certain time there were a certain amount of reserves. And so that would actually allow you to prove to a contract what the fair price should be, and then have the contract determining statistically if the price is manipulated, and then determining if its price is being manipulated right now and determining its own risk, and then determining whether the execution should continue or it should revert because of the fact that this whole thing will be cheaper than simply moving the balances, then it actually ends up making sense as a whole. And so that was kind of the ambition that I had when I started working on the pricer.
00:51:02.746 - 00:51:43.514, Speaker A: It's called on chain pricer. It's like a repo on my GitHub. And we ended up using it to not rug pull people when processing bribes, which is like a thing in yield farming. You have bribes because you're paid to send incentives. It's like this weird thing, but basically we use it in that way. But I feel like if somebody were to kind of take the ball and continue rolling, they basically will be able to write a pricer that enables to have a contract defend itself and know whether a harvest is actually a legitimate harvest or whether they're going to get wrecked. And so I think there's going to be kind of two directions because we saw some of these more recent articles about oracle less lending.
00:51:43.514 - 00:52:34.822, Speaker A: I know there's a bunch of projects that are launching now, but I feel like the exact opposite of purely on chain statistical analysis is also something that can be explored, because from my experience, it doesn't make sense as a logical puzzle because you're like, it's impossible to do it optimally, and for that reason, we're never going to try. That's basically the mathematician answer, whereas the engineer answer is actually for this specific subset of cases, you can actually do it. So we're just going to do it for that case and for everything else. We're going to still say that it's impossible or it's unsafe. And eventually somebody smarter than me will take my work and we'll build something that actually works for other cases as well. So that's what I think is going to happen in terms of this oracle thing. And I think it's a really fascinating aspect of the promise of Defi, actually autonomous, trustless contracts.
00:52:34.822 - 00:52:41.374, Speaker A: I feel like it can be realized, but at the same time I have to acknowledge the fact that it's insanely difficult and it's going to be definitely.
00:52:41.412 - 00:53:01.618, Speaker B: A team effort if it does get done. It would be basically revolutionary. It wouldn't require basically off chain data, right. It would just be all on chain, which is completely aligned with Ethereum's goal. You wouldn't have to rely on basically malicious teams or anybody going awol on an oracle.
00:53:01.714 - 00:54:05.686, Speaker A: I will say the last piece there is that it's going to be interesting what happens when cowswap decides to decentralize their resolvers or their solvers, because at this time all of the promise of kind of eating up MeV is basically based on the idea that their own actor is the good guy that is going to slash people. But I feel like the second you open Pandora's box, just like with know actually putting fault proofs online, once we open Pandora's box, that's when it's going to be a lot more risky, but it's going to be a lot more real in that it's going to either sink or swim by its own way. And I feel like that's when people will stop just signing random orders on cowswap, trusting that the solver will solve it for them, which is something I saw smart contracts just saying sign whatever, because Kaosop will solve it and people will go back to actually having guarantees on chain because at the end of the day, anything you sign, that's the guarantee and then the actual execution is just a promise or it's not as real as the actual signature.
00:54:05.878 - 00:54:16.638, Speaker B: Yeah, for sure. It would be definitely interesting because Calsorp is basically a centralized entity at the moment, right? You're basically trusting them to order your stuff. But yeah, once it goes public then.
00:54:16.724 - 00:54:44.946, Speaker A: I wouldn't be as harsh. I would say that you are trusting them to perform better than what you're signing because if you go on the website they're going to have you sign 50 basis points slippage by default. And so that's what you're actually signing. It's not what is displayed on the screen. You got to check what you're actually signing. But then what they do is they have this centralized entity that will query every other solver which are actually a bunch of other groups. It's actually an interesting side hustle.
00:54:44.946 - 00:55:07.418, Speaker A: If you're into Mev, you can just become a solver and solve orders for them. It's actually really cool. You get your gas back and they give you cow incentives. It's an awesome thing to do if you're into Mev. And then what happens is they pick the best, the one that offers the best price to everybody. I think it's called benefit. They just give the best benefit or the better execution price to everybody else and then they execute.
00:55:07.418 - 00:55:48.522, Speaker A: But the thing is, if you remove the centralized person that is querying and you put like some sort of slashing mechanism, then the day that you're handling more value than the slash amount, you're basically giving economic incentive for people to just steal funds, basically. And so that's the time in which what you're signing goes back to becoming what you execute. Because if you sign a zero out order on cowswap today, they'll still find you the best price. But if everybody of the solvers agrees that their best price is one, then you're going to get one, even though the value of your asset was a lot higher. It kind of goes back to speed becoming kind of a trade off of trust. It's faster if you trust, but it's slower to do it. Right.
00:55:48.522 - 00:56:09.726, Speaker A: But I feel like with this specific type of scenario of small orders compared to the TVL on chain, as long as you're querying a high enough TVL, you actually find a scenario where it's anti economical at all times to perform such an attack. And so you can actually write a contract that can defend itself for that specific case, given those specific circumstances.
00:56:09.838 - 00:56:30.658, Speaker B: Yeah, anybody becomes gray hat or I guess black hat if the incentives are there, which is on blockchain. Economical. Right. So if you can basically create a way to disincentivize it, then they won't do it unless they really have nothing else to do. They really want to destroy your thing, then they will do it. But it's more often than not just incentive economic wise.
00:56:30.754 - 00:57:28.006, Speaker A: Yeah, when you say it that way, it sounds like you can actually do charity, I guess. But that's basically what it becomes. Because the problem, I guess, with being good without backing or basically it's the problem of executing something without on chain guarantees or basically doing something above what is being signed is the fact that there will always be somebody else that is going to exploit that. And so if you offer a surplus, basically there will always be the asshole arbitrary that is going to just arbitrage and so that's kind of why it goes back to that. I think there is a world where we all do the right thing, but the reality is that if you're doing the right thing and somebody else is not, you're going to be in a position of disadvantage. I think that's also what happens with code arena, where maybe back in the day we would have been a little bit nicer about these qas and stuff, and then people just started sending absolute trash bots. What are you going to do? You're just going to stop being nice and you just enforce kind of the rules.
00:57:28.006 - 00:57:52.034, Speaker A: And so I guess that's what happens, because we've never seen a scenario, the real nash equilibrium, of people just kind of doing what is right. There will always be a guy that sees, I can press the button, steal money from you, and I'm just going to get it. And so why would the other guy give you those extra guarantees if you're not going to hold kind of your side of the bargain, if that makes sense?
00:57:52.152 - 00:58:00.562, Speaker B: Yeah, exactly. We are coming to an end. I've definitely learned a lot. It's been great talking to you. Hopefully you feel the same way. Had a good conversation.
00:58:00.626 - 00:58:02.438, Speaker A: Yeah, it was a good combo. Thank you.
00:58:02.524 - 00:58:12.314, Speaker B: Yeah, of course. And yeah, man, I'm excited to see the future, especially with the oracles. Hopefully it comes into fruition, someone starts building it, and then you can say, yeah, I called that.
00:58:12.512 - 00:58:31.310, Speaker A: Yeah, or I'm going to find myself rambling on Twitter a little bit and eventually building it myself. What I found in it's like you have only so many kind of projects you can build because every project costs, it's like six months of your life, at least, if not more. So there's only so much you can build in the time you have.
00:58:31.380 - 00:58:47.526, Speaker B: Yeah, for sure. I definitely feel that as well. This has been great and hopefully people find value in this. And we touched on a lot of stuff as well. So I think it's very diverse and insightful in each topic. So thank you so much for coming in and sharing your experiences with us.
00:58:47.628 - 00:58:50.278, Speaker A: Thank you for having me and have an amazing rest of your day.
00:58:50.364 - 00:58:50.740, Speaker B: Take care.
