00:00:00.490 - 00:00:22.590, Speaker A: We have this data where we timestamp each message on the execution layer, and we do the same for messages on the consensus layer. So on the execution layer, that's transactions, and on the consensus layer, that's blocks. And we do notice that blocks, even though they are larger than transactions, in some cases, they are even propagated faster than transactions globally. Because the P two P network is like a self optimizing network.
00:00:23.170 - 00:00:49.990, Speaker B: Scraping bits is brought to you by the following sponsors. MeV protocol. Maximize your eth staking value with me v exclusively on MeV IO and composable execute any intent on any chain. Coming soon to mantis app. That's M-A-N-T-I-S-A-P. GMGm. Everyone, my name is Digacci, the host of scraping bits.
00:00:49.990 - 00:00:55.902, Speaker B: Today I'm with another special guest, mempirate from Chainbound. How's it going, friend?
00:00:56.036 - 00:01:02.542, Speaker A: Hey, man, it's going very well. Thanks for having me. It's my first podcast. I just want to say, so it's an honor to be here.
00:01:02.596 - 00:01:19.594, Speaker B: It's an honor to have you on. I'm having a lot of people on that. It's the first time on the podcast or any podcast, so it's great to have people like yourself finally getting them into the world of podcasting and getting the names out there. So very keen to spread the word of the famous mem pirate.
00:01:19.662 - 00:01:20.406, Speaker A: It's time.
00:01:20.508 - 00:01:28.006, Speaker B: It's time. Release the kraken for the people that aren't familiar with you because you have been in stealth. Who are you and what do you do?
00:01:28.108 - 00:02:18.670, Speaker A: Yeah, so I'm Jonas, or mempirate. I am currently the CTO and co founder of Chainbound, which is a company that works on a lot of high performance, low latency infrastructure, mainly in the MEP supply chain at the moment. The way I got started was I lost a bunch of money in 2017 in crypto by trying to invest in shitcoins like everybody else back then. I kind of stuck around even after losing all that money and got into the technical stuff, because I was studying computer science in school back then. And at one point, I think 2021 or something, I got into MEV, met some guys that were looking for a developer to build a sniping bot. Back then, I didn't really know a ton about the whole mev space, but we got started on it because it was pretty early, and it worked out pretty well back then, so that's a good start. Some other context.
00:02:18.670 - 00:02:42.862, Speaker A: I used a lot of low latency products because this was before the flashbots auction came out. So everything was spamming and latency sensitive and all of that stuff. And that's actually where I got the idea of building a low latency mempool service because I wanted to use it myself, but I didn't really do it back then. But the idea did pop up a couple years later and that's where we are now.
00:02:42.996 - 00:02:49.346, Speaker B: What is chainbound exactly? Give us high level overview of this low latency startup you have.
00:02:49.448 - 00:03:34.026, Speaker A: Yeah, so Chainbound is a company, we tried to build a couple of products. We're not going all in on a single product. And the first product was fiber, which is a mempool service and also now a service for streaming blocks on the consensus layer, which is also important in some cases. And we also do stuff in the general mev supply chain. So for example, our customers, they also submit bundles to builders and they want to do this with as little friction as possible. So we also released Echo, which is a service where people can submit bundles to like a single unified endpoint, and then they will be multiplexed to all of these different builders. And we try to adhere to a single interface so that people don't have to worry about the differences in all of the builder interfaces.
00:03:34.026 - 00:03:44.914, Speaker A: And we also plan to do global replication so that we have lower latency for submitting all of those bundles because builders are quite geographically distributed across the EU and the US.
00:03:44.952 - 00:03:55.926, Speaker B: It seems like most of the builders, though, all the big ones are in London, actually. Like specifically London. Like you have async and Titan there. And there's the major think. I don't know where Beaver builders must be in the US. Right?
00:03:56.028 - 00:04:03.674, Speaker A: That is actually a good question. I think Beaver build is. No, I think they're also in Europe, around France is my guess.
00:04:03.792 - 00:04:08.678, Speaker B: Oh, okay. So it seems like the monopoly is all next to London then. Or in England.
00:04:08.774 - 00:04:12.362, Speaker A: Yeah, the concentration in Europe is definitely higher. That's true.
00:04:12.496 - 00:04:20.622, Speaker B: It's so ironic. Your name, your trill, is called fiber. And in Australia, fiber network is. Even though it's the best, it's still one of the worst in the world.
00:04:20.756 - 00:04:21.354, Speaker A: Oh shit.
00:04:21.402 - 00:04:24.510, Speaker B: So random, really. Unfortunately for me.
00:04:24.580 - 00:04:27.522, Speaker A: I hope there's no association with our products.
00:04:27.656 - 00:04:49.110, Speaker B: No, it seems like the opposite. Your only competitor is blocks route, right? Team of 75 people, I believe. And they do the same thing. They aggregate all the mempools into a single spot and they have an API where people can use it and they charge prices. And you guys do the same thing. Except in February you did like 89% better than them. Not better, but you were faster than them 89% of the time.
00:04:49.110 - 00:05:08.190, Speaker B: It's a bit different now, somewhere around, like, 50 50, which is still remarkable because your team is like two free people, I think two people on fiber, one on echo. Right. So that's a remarkable achievement. And how was that even achieved? First of all, 50 50 is not bad. That's still crazy. I believe you have some stuff in the pipeline to bring that stuff up, right?
00:05:08.260 - 00:05:28.334, Speaker A: Yeah. Well, first of all, I think it's true that since the article came out, blockshot has definitely been getting faster again. So now it's more closer to 50 50. And if you want up to date stats, you guys can always check out the mempool dumpster by flashbolt. They do, like, end of day reports comparing different mempool services. So that's interesting. I also want to mention blockshot.
00:05:28.334 - 00:05:57.134, Speaker A: They do a lot more than we do. They have a mempool service, but they also have a relay. They also have builder. They also work on all of these other latency optimizations down the stack for validators and stuff like that. They have a lot going on. Having said that, blockshot hasn't had a lot of competition in the mempool service space for a long time, so we knew that there was a market. Because I use mempool services, I wasn't really satisfied with what was there at the time, and we kind of got started knowing that there was a lot of cool rust infrastructure coming out.
00:05:57.134 - 00:06:35.978, Speaker A: So, for example, Rhett by the paradigm team is a super modular. It's built in a super modular way where you can reuse components, drop all the components you don't need, and just put them back together in a way that suits you best. And so I think one of the ways that we were able to really compete was by basically getting rid of everything we don't need, making our software as lightweight and as efficient as possible, which allowed us to deploy, really a lot of nodes, and connect to a ton of peers, which, in the end, is what basically drives your performance. So I can't say this for sure, because I don't know how blockstrat's infrastructure is actually built, but I think it has something to do with that as well.
00:06:36.064 - 00:06:37.962, Speaker B: Yeah, like geolocation of everything.
00:06:38.096 - 00:06:45.598, Speaker A: Yeah, geolocation. Making sure that you have global network coverage, that you're connecting to all of the peers, that send a lot of transactions, stuff like that.
00:06:45.684 - 00:06:54.782, Speaker B: I guess everybody really does that, though. If you have nodes, you kind of put them all across the world to cover all the bases, and that's about it. It would be really expensive, though, to do this.
00:06:54.916 - 00:07:21.610, Speaker A: Well, yeah. That's where having your software be super lightweight provides a big cost advantage. Right. Because you can deploy a lot of them at a relatively low cost. And about your point about everybody doing the global distribution stuff, it's true, but there are other factors that are important. So every transaction, for example, you have to process before to find out if the transaction is actually valid. You have to do some preliminary checks, like recover the signature, recover the signer, I should say.
00:07:21.610 - 00:08:08.326, Speaker A: That's like a cryptographic operation. It's an ECDSA signature recovery. So it takes some time. There's some ways to optimize that, but I would say on the networking side, like internal networking, so the network links between the nodes are also important, like what protocols you use there, whether it's TCP, UDP, all of that stuff can make a big difference. And then the way that you interface with your customers, like do you use websockets, do you use HTTP servers and events, do you use GrPC? There are all sorts of trade offs in that, and if you can put them together in the best possible combination, you really do have an advantage on the peering side, which is also a very interesting topic. Not every peer is equal in the sense of there are a lot of peers that don't even send any transactions at all. They're just ran by people that want to read from the state database or stuff like that.
00:08:08.326 - 00:08:21.478, Speaker A: But there are also nodes that are potentially ran by RPC providers. And so you need to be able to distinguish these nodes and connect to the useful ones and basically don't pay too much attention to the ones that don't send you any transactions.
00:08:21.574 - 00:08:26.718, Speaker B: So you kind of got a trial and error, or can you see all the transactions before you connect?
00:08:26.804 - 00:08:39.726, Speaker A: No, it's actually you have to connect to them. You have to gather some information, have some sort of scoring system and all of that stuff. And then you basically kick out the peers that don't fit your particular performance profile.
00:08:39.838 - 00:08:44.178, Speaker B: Okay, interesting. You would have to connect to everything and see what's kicking off.
00:08:44.264 - 00:08:56.470, Speaker A: Yes, that's true. So we also collect a lot of data on the peers on the Ethereum network, and we have a dashboard that lays everything out in a big map, and you can kind of see where all of the peers are.
00:08:56.540 - 00:08:58.998, Speaker B: I've seen that. I think you tweeted about that, right?
00:08:59.084 - 00:09:03.130, Speaker A: Yeah, we did. That's a cool side effect that you get from collecting all of this data.
00:09:03.200 - 00:09:08.218, Speaker B: I would imagine they're all in the Europe region. I can't imagine them really anywhere else. But I could be.
00:09:08.384 - 00:09:38.050, Speaker A: I mean, so you have Hetzner in Europe, which is a big hotspot, even though they don't really encourage running your Ethereum software there. I think actually they prohibit it even, but I'm not sure about that. That's an interesting one. And then in the United States, you do have a lot of nodes, specifically in Virginia, in the US east one region, because it's the cheapest AWS region. And I think since everyone got started there, there's been some concentration of infrastructure around that area. Asia also is growing in terms of activity. Singapore is huge.
00:09:38.050 - 00:09:58.598, Speaker A: Tokyo is also huge. Actually, South Korea, now that I look at it, Seoul is also getting pretty big. But it is like the interesting thing about Ethereum and the technical challenge for a good mempool service is that the nodes are geographically distributed. You have to be able to cover a lot of ground or you won't be able to compete. That does make it an interesting technical challenge.
00:09:58.694 - 00:10:05.326, Speaker B: Yeah. Then you have to run up all these different AWS kind of servers in these different regions, which does end up costing a lot, right?
00:10:05.428 - 00:10:16.766, Speaker A: Yeah, it's true. And you also have to relay all of the information between the regions. You have a lot of egress costs when people connect to your API and stuff like that. So there is some infrastructure overhead when.
00:10:16.788 - 00:11:06.670, Speaker B: You think about it, since you are competing with blocks route, and it's kind of de facto standard if you're an MEV team, right, and you're trying to get to a level playing field with each other, and one person has the advantage of connecting with yourself or blocks route, then everyone else has to connect to them or at least have their own infrastructure that can compete, but there is no one else competing. It looks like at least the level of you guys and blocks out. So it's like you either connect to them or you just don't win if you're doing like short tail, long tail. I guess latency doesn't matter if nobody else is finding the same strategies, but after a block or two, then I guess on chain quants can find it and reverse engineer strategies and push it out. So that's when it does matter. You could obfuscate it as well in transactions some ways, but either way, it's a major thing that there's only like two options. That's why they're so rich and doing so well, because you have to use them, otherwise you can't compete.
00:11:06.670 - 00:11:13.438, Speaker B: Why even create a SaaS and not use it for yourself? If it is up to par and sometimes better when it was in February.
00:11:13.534 - 00:11:56.422, Speaker A: Well, I think positioning yourself as like a service provider, it basically depends on what you want to do, right? If you're really interested in running arbitrage strategies, or like liquidation strategies or sex arp, whatever, it makes more sense to just build this in house. But we really wanted to offer a service because that's mainly where my interest lies. Me and the co founder, at least we really care about the infrastructure side. We want to focus on that full time and not run trading strategies. Because as soon as you use your own network for running trading strategies, you lose all neutrality and people don't really trust you anymore because it could be that you're stealing their strategies or you're censoring them or whatever. So we want to remain a service provider that's neutral.
00:11:56.506 - 00:12:18.678, Speaker B: It is a good long term game strategy because I feel like it's not a good strategy to begin with, because it is. When it takes all, or at minimum making a little bit relative to someone else taking it all, it's like it's a piece of a pie and someone takes it and then eventually there's nothing. But if you build a startup, you can argue it's the same thing, but at least you get something out of it that could still function even if other people are doing the same thing.
00:12:18.764 - 00:12:47.614, Speaker A: Exactly. And it's not just for Mev searchers, because you're right that MeV is kind of a zero sum game. And you could even argue that it's a negative sum game since it can drive away user activity. But also for builders, this is also interesting, because to build the best blocks, you really want to increase your information advantage compared to other builders. Or you want to know everything that's in the mempool as soon as possible. For you to build the best blocks, it's not just your private order flow. You need to combine that with the order flow that's in the mempool.
00:12:47.614 - 00:12:53.582, Speaker A: And to do that effectively, you need low latency access to all of that. So we also do provide our services to builders.
00:12:53.646 - 00:13:06.630, Speaker B: Interesting. Let's take a step back. You were doing sniping before. How come you didn't just pursue doing MeV if it was working and you eventually got the skills? I guess you did pursue it after that, right? Or did you just skip it after?
00:13:06.780 - 00:13:32.702, Speaker A: Yeah, so we stopped. We had a little team that was doing liquidity, sniping on tokens. And basically we stopped when the flashbots auction came out, mainly because we were immediately priced out. We didn't have a lot of upfront capital to pay these bribes that some people were paying. And so we got priced out pretty quickly. And also on a personal side, it's not really very fulfilling to just snipe bitcoins all the time. So I really wanted to pivot to something else.
00:13:32.702 - 00:13:52.418, Speaker A: So I also didn't really try anymore after that. For me that was like a sign, okay, just move on to something else. And I did. Some people were paying bribes of like 80 to 100 e. Same thing you see now with the telegram bots, just these ridiculously high bribes. And so we couldn't really compete with that. And I also wasn't that interested in it anymore.
00:13:52.514 - 00:14:02.938, Speaker B: Yeah, that makes sense. But you got to follow whatever you're interested. At the end of the day, if you have passion for something, it's way better motivation than trying to brute force something that you're not really interested in. If it's just for money at the.
00:14:02.944 - 00:14:05.146, Speaker A: End of the day, yeah, 100%.
00:14:05.328 - 00:14:23.438, Speaker B: Yeah. I feel like money driven stuff isn't. I think it's good for short term to enable a long term plan, but to have it as the sole goal doesn't make any sense because you can make money in any way really. I mean, you see people doing social media, tech, anything. You could just go on the street and start selling stuff, make some designer clothing or something.
00:14:23.524 - 00:14:33.086, Speaker A: No, yeah, it's true, it's true. But I think in the end of the day you also want to add some value. Just participating in a zero sum game for me wasn't like a long term strategy.
00:14:33.198 - 00:14:43.894, Speaker B: Yeah, I think a lot of people do it short term. Unless you just go down the route of joining an institution, ndaing your life away, something like that. They make ridiculous money though. At what cost?
00:14:44.012 - 00:14:47.670, Speaker A: At what cost exactly? Do you want to sell your soul? I'm just kidding.
00:14:48.410 - 00:14:58.070, Speaker B: But what was like the hardest thing for you guys to even get to the point of being consistently neck and neck with blocksra as one of these aggregators of all the mempools?
00:14:58.150 - 00:15:29.986, Speaker A: That is a good question. So in the beginning, we started out writing our software in go and we extracted a lot of the p two p stuff from the Go Ethereum implementation. And it was efficient, but it wasn't that efficient. So we wanted to run on these low resource vms and basically that capped the amount of peers that we could connect to per node. So in the beginning we had some problems with some transactions not being seen, other transactions just being way too late. Because network inherently has a lot of randomness in it. And to decrease the randomness.
00:15:29.986 - 00:15:53.978, Speaker A: You really have to connect to a ton of peers. So that was a challenge in the beginning. Then when we switched to rust like the rest stack, that kind of went away because it's super efficiently implemented due to the fact that it's rust, but also due to the fact that the paradigm team behind ref is really skilled. I learned a lot from their implementation in general, but once we switched to that, it really allowed us to compete more effectively.
00:15:54.074 - 00:16:00.590, Speaker B: If that was a major reason into competing effectively, wouldn't it make sense to build an upgraded version of ref then?
00:16:00.660 - 00:16:35.660, Speaker A: I mean, it would if we had a large team and a huge amount of resources. Because it's not like it's simple to build a full depth p to p or just like Ethereum networking stack. It really takes a lot of time and they did it super effectively. So I'm not even sure if there's a lot that we can improve on because they do allow you to play with the parts. It's very modular. You can take away, like I said, anything you don't need. And so you can practically, I think, max out performance by just making sure that you're mindful about how you're implementing this.
00:16:35.660 - 00:16:42.794, Speaker A: It would be an interesting challenge to build it from the ground up, but I don't know if it's a good way to spend resources at the moment.
00:16:42.912 - 00:16:53.034, Speaker B: Yeah, for sure. I think since it is modular, you could just strip out all the pieces you don't need and just have that one piece for basically grabbing all the stuff from the peers.
00:16:53.162 - 00:16:54.160, Speaker A: Yeah, exactly.
00:16:54.690 - 00:16:59.860, Speaker B: I don't know how that doesn't sound too difficult though. If you could just strip out everything that you don't need.
00:17:00.390 - 00:17:39.102, Speaker A: Well, yeah, there are some things like on the networking stack, for example, there's these handshakes and there's challenges that peers send to you to make sure that you're actually following the chain. So you do need some sort of infrastructure to deal with challenges that need some state. So for example, there's this thing called the checkpoint challenge where they send you a request for a certain header and you have to be able to provide them the header, otherwise they will disconnect you from you. So you do need some other infrastructure in place. And it's not like just take out the p to p stack and run it. There are some other things that you need to figure out.
00:17:39.156 - 00:18:05.014, Speaker B: It sounds interesting. I feel like it would be a fun game though. Maybe not like best resources, but if it is something that gave you a giant boost, wouldn't that say, I guess diminishing returns the further you go on. But who knows? Maybe it is like the biggest edge you could get is creating this custom client. If you do it and it's better, then that means someone else has to compete by doing the same thing, right?
00:18:05.212 - 00:18:05.960, Speaker A: Yes.
00:18:06.490 - 00:18:19.258, Speaker B: So, I don't know, whatever things can you do apart from that, I guess, try and beef up these computers on these servers to process stuff faster. And that's probably the only thing I can really think of. But what else beyond that?
00:18:19.344 - 00:18:58.758, Speaker A: Yeah, if you want to play it fair, there's probably, like an equilibrium where everyone is about the same speed. What you can also do is play it unfair and just buy a transaction straight from Metamask. Make sure that from infura, make sure that they're sent to your notes first before anyone else. But then you're doing the private order flow kind of thing, and it's very not good for the ecosystem, I would say. We're also not trying to do that, just to be clear. But on the technical side, there's only so much that you can do. That's true.
00:18:58.758 - 00:19:29.890, Speaker A: You can make sure that you're very closely located to all of these transaction broadcasters for the large volume transactions, but you also have to make sure that you're connected to a lot of peers for, I don't know, sometimes a random peer will send a transaction that's high value and you want to be able to capture that fast. But, yeah, I agree with what you're saying, that you can keep on improving, and at some point, if everyone has the same technology, there won't be any alpha anymore.
00:19:30.870 - 00:19:51.562, Speaker B: It just sounds like block building all over again. You build a really good infrastructure, and, I mean, you don't even need really good infrastructure as well. If you're getting private order flow, that's like an edge no one else has. It takes away from the competition and gives to you. So, interesting. Yeah. These exclusive deals are the bane of blockchain, I think.
00:19:51.696 - 00:19:53.958, Speaker A: Yeah, it's annoying.
00:19:54.054 - 00:19:55.978, Speaker B: It centralizes it completely.
00:19:56.144 - 00:19:56.810, Speaker A: Yes.
00:19:56.960 - 00:20:54.522, Speaker B: Makes it a whole networking game, which is actually why a lot of searchers are starting to build builders and trying to put their faces out there a lot more, because they realize that it's all an exclusive order flow game. And once you already have that edge, it's hard to even steal it or get close to that place unless you have your own edge of similar value. No one can actually come and compete then, because you have all these exclusive, I guess, order flow, and then you send it to your block builder and no one else has it. And if the block builder is getting these blocks or transactions that are really valuable, like, for example. Yeah, they win permanently because you can't win because you can't even compete with these exclusive deals, right? So it's like the telegram bots. Imagine if, like a telegram bot had, let's say, all of them, like maestro, banana gun, Unibot, all of them, whatever else there is, if they all sent to one builder, that builder just wins. No one can compete.
00:20:54.522 - 00:21:11.842, Speaker B: If they got, like, an exclusive deal with one of our wallets that are giant, then they just win automatically as well, because it's a ton of flow. It's like retail without retail. I mean, there's nothing else. Something has to fundamentally change, I think, because I don't know how you would even deal with that.
00:21:11.976 - 00:21:55.494, Speaker A: What you're describing are the negative side effects of PBT a little bit, in that you have decentralized block producers. First of all, you have searchers that send their bundles to block builders and have to pay for that. So for them, it would even be better if they become a block builder themselves. And then you have block builders that have to buy block space from proposers, so they also have to pay some amount of money to get their block included. Not a small amount of money, I should say. In the end, it does become likely, I think, that there will be some sort of vertical integration, which is kind of what people were avoiding in the first place. But, yeah, I don't know, like centralizing pressures.
00:21:55.494 - 00:22:47.118, Speaker A: They always seem to come up in different ways. It's very hard to deal with. But I do agree that Vitalik's endgame, if we want to go there, is like, you have centralized block production and then decentralized verification or validation or whatever you want to call it. If you want to have some sort of censorship resistance, then the way that it currently works is we should probably look into inclusion lists and censorship resistance lists and stuff like that, because centralized block production is not really that much of an issue as long as you can prevent censorship, which is, I think, the end goal of a decentralized system. So, yeah, I mean, people are definitely catching on to these problems. You have a lot of criticisms of PBS. I'm not really a critic of PBS because I don't know what would be a better solution.
00:22:47.118 - 00:22:50.638, Speaker A: But there's definitely some issues that need to be solved.
00:22:50.734 - 00:22:57.080, Speaker B: Yeah, I mean, just imagine a government as a block builder, and they could subsidize with whatever the money they print. Right.
00:22:59.130 - 00:23:20.778, Speaker A: The interesting thing is, if you have inclusion lists and they refuse to include certain transactions, they won't be able to propose a block. So then it becomes an interesting dilemma for them. Do we keep on being a validator and just make sure that no blocks are submitted at our slots, or do we just step out of the game because there's not much that we can do?
00:23:20.944 - 00:23:33.086, Speaker B: Interesting. Yeah, like, the incentive alignment is just not there, because running a validator is quite expensive as well. Well, running multiple to make it even worth it. How many validators is there?
00:23:33.108 - 00:23:37.860, Speaker A: Like, think it's 897,000.
00:23:38.390 - 00:23:57.250, Speaker B: Yeah, around 800. Even make that profitable, you need a ton of them. What are the chances of getting in one? Depends how many you have. But to run one validator is 32 e, I believe, and then the cost of running it live. I know it's a big overhead.
00:23:57.330 - 00:24:05.034, Speaker A: The cost of having 1% market share in a validator market in the validator space is 600 million at the moment.
00:24:05.152 - 00:24:07.050, Speaker B: Yeah, it's a small amount. I could do that.
00:24:07.120 - 00:24:08.554, Speaker A: I'll raise the money for that.
00:24:08.672 - 00:24:13.758, Speaker B: Yeah, I'll do a seed round. Guys, feel free to invest in my validator business.
00:24:13.924 - 00:24:15.982, Speaker A: No, it's crazy. It's crazy.
00:24:16.116 - 00:24:28.594, Speaker B: Where do you see the future of chainbound going? You're obviously working on echo and fiber, but is there anything else in the pipeline that you want to do or build on top of? Where do you see this all going?
00:24:28.712 - 00:25:09.962, Speaker A: Yeah. So right now we're in a bit of a brainstorming phase, I would say, because, like I said, we do recognize that MeV is largely a zero sum game. And we also recognize that a lot of applications are going to start internalizing their meV. Like you see a swap, for example, they have this whole off chain auction system that's meant to give users the best prices by internalizing all of the meV. And so the batch that finally lands on chain is largely order independent. And so ordering, I should say ordering independent. So we do think a lot of applications are moving to that model of off chain coordination, off chain mev capture with on chain settlement.
00:25:09.962 - 00:25:52.142, Speaker A: For example, you interviewed Josh from Aori. They have the same model. They have an off chain order book, and then they match orders off chain and settle them on chain, which I think there are some single points of failure there, but I think they should be able to decentralize that in the end. So I think the fact that the MeV space is probably. I mean, it's a zero sum game now, and people are starting to realize that at the application level, you can also capture a lot of the MEV yourself. That's kind of a reason why we're looking further than the MEV space at the moment, because there are a lot of opportunities, I think, outside of the MEV space that are more positive some.
00:25:52.196 - 00:26:17.750, Speaker B: And so we don't even chance of you doing something so successful like a protocol versus MEV. So it's a better time opportunity cost. Another off chain thing is like GMX, for example. GMX is a giant protocol and the on chain stuff is really just for submitting requests. It's like impossible to hack because it's all off chain.
00:26:19.450 - 00:26:23.202, Speaker A: GMX is like the perpetual thing, right? The perpetual perp.
00:26:23.346 - 00:26:25.720, Speaker B: Yeah, exactly.
00:26:27.850 - 00:26:58.142, Speaker A: It does kind of make sense. And there are some, as I said, centralization vectors. Like, for example, the cowswap order book is managed by the cowswap operator, which could become a central point of failure or censorship, could be exercised at that level. But there's only so much that they can do. They can't steal money. They can only make sure that your money doesn't move in the way that you want it to move. But still, a lot of it can be solved with on chain constraints, with slippage parameters.
00:26:58.142 - 00:27:16.978, Speaker A: Stuff like is like if you want to have a really good full stack application, you're probably going to have to have some sort of off chain logic. And you see that too with uniswap x now with the RFQ system. So we recognize that there's probably some other avenues that we should explore.
00:27:17.154 - 00:27:34.298, Speaker B: Well, you did mention that you guys gather data with fiber, I believe, for that website, right? And you're building a stat section on your website. Would need data, of course. And you have Echo, which I think is very valuable if a lot of people send it. Are a lot of people sending their bundles to echo?
00:27:34.474 - 00:27:47.806, Speaker A: Well, it is growing, but I wouldn't say that we have really significant market share yet, although it is enough market share to help a starting up builder gain some flow to compete. So that's good.
00:27:47.908 - 00:28:35.106, Speaker B: Should definitely do like some kind of, if you do end up well, you already do the pricing with the fiber, you should do like a combo deal and force it to be a combo deal because the bundle data is one of the most important pieces of data you can get. If there's exclusive. Well, yeah, I guess if people are just sending exclusively to certain builders, I guess they probably wouldn't send to an aggregator. But if they did, then you would be able to see that exclusive data anyway. But I think the main proposition is that data could be used for, I guess, finding patterns and stuff. So I wonder if you're looking into any ML things or doing any stat probability things regarding no, at the moment.
00:28:35.208 - 00:29:27.746, Speaker A: We'Re not really looking into that. We collect a lot of data, but we haven't really had the time to analyze a lot of it. And also on the echo side, we only keep the bare minimum because we don't want to save too much information on our users. What we do is we cache bundle hashes and the bundles, and then we check incoming new blocks to see if the bundle was included, and then we use that to send the confirmation to the user. So that's some data that we have to keep. And also we provide dashboards to users where they can see their average inclusion delay, which builder includes their blocks, includes their bundles most of the time, and stuff like that. So we only keep the data that's necessary to provide these essential analytical services.
00:29:27.928 - 00:29:44.840, Speaker B: Interesting. Yeah, I'm really liking the data stuff, because all the interesting data comes from the pending things. So if it's like pending transactions or something, you need infrastructure to get that's like the sweet rich data that you need, but you can only get it if people actually send you stuff.
00:29:45.290 - 00:29:46.198, Speaker A: That's true.
00:29:46.364 - 00:30:07.040, Speaker B: Gatekeeped data, which is pretty shitty, but I mean, everything else is public, though, but not as interesting as that data. Before we did the call, you mentioned you're very interested in network stack on the execution layer and the consensus layer with the different properties they have that affect latency and the kind of game theory you can do between these things. Tell me more about that, because I don't know anything about.
00:30:07.650 - 00:31:04.682, Speaker A: Yeah, no, for sure. So when we started out with fiver, it was purely a memble stream. So the only thing we did was listen on the execution layer network, which was built from the ground up by, I think, the go Ethereum folks, maybe when Ethereum launched, basically because there wasn't really anything out there that could cater to what they needed, so they built it from the ground up and they called it Dev p to p def p to p is a gossip protocol in that you have messages that are sent, like there's a distinction between a full message and basically a message announcement. So for example, if a peer receives a transaction, they will broadcast a full message to only a small subset of all of the peers, and then they will broadcast the announcement in the form of a hash to the other peers. And if the other peers don't have it, they can request a full transaction and stuff like that. And this is basically to keep bandwidth manageable. And so yeah, there are all sorts of peculiarities that happen and a lot of randomness that occurred due to it being like a gossip network.
00:31:04.682 - 00:31:44.846, Speaker A: Yeah, that was interesting. But when the Ethereum consensus layer launched and we wanted to provide a block stream, really had to learn a whole new networking stack, because the consensus layer networking stack is implemented in lip PTP, which is a super modular, again, a super cool library built by the protocol labs folks, which are the guys between Falcoin and ipfs. And it's super well thought out. I think they've ran tests for years on it, because they have all these sorts of features, all these sorts of security. They thought about security a lot and all of this stuff. And so they have peer scoring natively implemented. They have like self optimizing p two b networks and stuff like that.
00:31:44.846 - 00:32:20.342, Speaker A: So it's super cool. And we really had to relearn a lot of it from scratch because it has way more features than on the execution layer. It's really super interesting. We have this data where we timestamp each message on the execution layer, and we do the same for messages on the consensus layer. So on the execution layer, that's transactions, and on the consensus layer, that's blocks. And we do notice that blocks are, even though they are much larger than transactions, in some cases, they are even propagated faster than transactions globally, because the P to P network is much more optimized. It's like a self optimizing network, you can say.
00:32:20.342 - 00:32:29.114, Speaker A: And so it's really cool to see that in action. And also we learn a lot from Lippy to p in terms of like peer scoring and how gossip networks work and all of that.
00:32:29.152 - 00:32:34.646, Speaker B: So it's really interesting you mentioned peer scoring. It scores all the peers internally in some storage.
00:32:34.758 - 00:33:07.782, Speaker A: Yes, that's right. So if a peer sends you, it allows the application basically to specify the rules of peer scoring. So every time a peer sends you a message, you can rate that message. You can say like, okay, this is a valid message. So peer score stays the same. Ignore this message, which means peer score stays the same, but we don't forward it to other peers, or it's a bad message, and you can apply a reputation penalty or a score penalty to the peer. And this is like with regards to spamming, this is with regards to peers that just send malformed messages or basically use a wrong private key or anything like that.
00:33:07.782 - 00:33:26.682, Speaker A: So you can kind of do a lot of civil resistance stuff at a network level already, which makes the network very resilient. It's also probably why the consensus layer guys decided to go with lip P to P because I mean, the consensus layer is super critical in the function of ethereum, and so it has to be a battle tested stack.
00:33:26.746 - 00:33:34.318, Speaker B: So is it like a reputation system of similar to flashbots where there's like priority and not priority, or not really, no.
00:33:34.484 - 00:33:48.530, Speaker A: At least I don't think it's anything with priority. It's more like they want to make sure that there's not that much spam. They want to make sure that you kick peers that are sending you duplicate messages and stuff like that. So basically it's just about the quality of peering connections.
00:33:48.610 - 00:34:03.930, Speaker B: Okay, so no, like prioritization, because that would be kind of interesting. Had some priority queue in the peers, complete alpha, never discovered that might be interesting. People start digging in. It actually, is that actually I should look into that. Oh God, the alpha.
00:34:04.670 - 00:34:05.290, Speaker A: Oh boy.
00:34:05.360 - 00:34:11.930, Speaker B: You never know, bro. I don't think a lot of people really get that deep into it, though. There might be stuff in there because it is a giant code base at the end of the day.
00:34:12.000 - 00:34:22.238, Speaker A: Yeah, it's true. It's true. And so, yeah, I think a lot of alpha these days is in understanding the technologies that are being used and understanding them very deeply so that you can benefit from that.
00:34:22.324 - 00:34:41.190, Speaker B: So if someone wanted to get into all this stuff, how would you recommend it, since you've already done it, you've already experienced all the hardships, if you were to do it again, to get to a position where you are now, and you can read these different layers and do all this mempool stuff like the node optimization and whatnot, what would you do to get into this kind of position again now that you've kind of gone through it all?
00:34:41.260 - 00:35:17.538, Speaker A: That's a good question, I think. Okay, everything I say, you should have Chat GPT four ready for you by your side to answer any questions you might have. So I would start with probably not reading the. There is a spec for dev P two p. I don't think I would start with that because it's quite, well, it's really formal, it doesn't have a lot of information, honestly. I would start basically by going to the ret code base if you're a rust guy, going to the get code base if you're a go guy, and start looking for all of the issues related to p to P networking. Just go through the implementation and look at all the comments and I guess just build up a picture of what's actually going on.
00:35:17.538 - 00:35:48.470, Speaker A: Once you have that, I would go to the specs and dive a bit deeper into how all of the subcomport. Like you have the discovery layer, you have the Eat sub protocols. You basically have a lot of modular components inside of the dev p to P stack. And then I'm going to plug an article here by Daniel Marzek from flashbots, and it's called the Hitchhiker's Guide, overlays in ethereum consensus. And that basically goes over how the P two P network on the consensus layer works. And it goes over it in great detail. It's really well explained.
00:35:48.470 - 00:36:19.686, Speaker A: And there's a lot of interesting topics in that article that you can just research independently that will give you a very good picture about the whole. And then basically just the lip p two p implementation are very interesting information because most of the time they're implemented in a very modular way, again, and super easy to follow, actually. So there's a rust lip PTp. Basically, there's a lip PTP implementation in practically every language that's popular. So I would do that as well. And then the lip PTP docs in general are also very good to go over.
00:36:19.788 - 00:36:37.050, Speaker B: Yeah, I don't think a lot of people really get this deep into it. It's always the mev people show the MEPP earnings and talk about all these different kind of strategies and whatnot. So this stuff never really gets touched unless you're really deep into it and trying to compete super heavily. And there's no manual to that either, getting into it?
00:36:37.120 - 00:36:42.862, Speaker A: No, not really. But it is super interesting, in my opinion. So I would definitely encourage you guys to check it out.
00:36:42.916 - 00:36:45.306, Speaker B: Yeah, go compete with chainbound.
00:36:45.498 - 00:36:49.338, Speaker A: Yeah. Contact us. Like we're hiring, all the hiring.
00:36:49.434 - 00:37:02.820, Speaker B: You can do that. Also join them instead of competing with them. Interesting. So where do you see the industry going and where do you think it should go from a networking point of view? Just what you've seen.
00:37:03.350 - 00:37:04.882, Speaker A: That is a tough question, man.
00:37:04.936 - 00:37:06.100, Speaker B: What I'm here for.
00:37:06.710 - 00:38:03.890, Speaker A: Yeah, I'm going to dumb down your question and make it about Ethereum. Only if that's okay, because that's where I know the most. So I think there are a lot of interesting problems that are related to P. To P networking on the consensus layer, specifically because there is this thing called single swap finality, which is, it basically makes sure that every block that is proposed on Ethereum that gets voted through will become finalized immediately, which is different from what we currently have, which is where you have this Casper finality gadget that basically runs behind your LMD Ghost protocol, which is the one that appends new blocks and decides the fork and all of that stuff. And for single slot finality, it would be a huge ux boost. So basically, you won't have forks anymore, which I think is super important for multiple reasons. But to achieve this, it's a very hard networking problem, because you need to have close to a million validators voting on a single block in less than 12 seconds.
00:38:03.890 - 00:38:50.278, Speaker A: And all of these votes are signatures, and all of these signatures need to be aggregated in under like 12 seconds. So it becomes a huge networking problem. And I think there are some interesting things with regards to how we can make the networking more lightweight than it currently is. Currently we have a lot of committees and subcommittees, and it becomes a big mess, basically, although it is necessary in its current form. But yeah, in general, I would say on the p to P layer, on the consensus layer, there are a lot of interesting problems related to networking. You would think that having 12 seconds is enough because there are these blockchains that have like 400 millisecond block times, like Solana. But if you have this many validators, it really becomes a challenge, even on the networking layer, even with twelve second block times.
00:38:50.364 - 00:38:58.054, Speaker B: So, yeah, there's a lot of communication happening. So it's a bottleneck within the network just between that communication, right?
00:38:58.172 - 00:39:15.374, Speaker A: 100%. And I think just in general, when people design protocols, they should really think about p to P layer, because in the end, it's one of the primitives that you have to use if you want to build a blockchain. If you build it right, it can have a lot of good benefits later down the line, but if you do it wrong, you can have some problems with it.
00:39:15.412 - 00:39:37.698, Speaker B: What do you think? Salana's one. We just saw today that Salana, for the first time in history, passed Ethereum's volume in the seven day chart to $9 billion, which was insane. I think Ethereum was like 8.98.8, something around that, but that's still insane, though. So I wonder if you're exploring Salana as well.
00:39:37.864 - 00:40:18.258, Speaker A: Yeah, well, currently we are not, but I think Salana really is, as you can see from these stats, they're trying to solve a different problem, in my opinion. They're really trying to become, in the words of the CEO, the Nasdaq, on a blockchain or something like that. So they're really optimized for trading. They have this global state machine, no sharding, no roll ups, and you can basically trade very fast with the 400 millisecond block times. But the trade off here is that to run a validator, you need really beefy hardware. You need really good networking and basically everything that Ethereum is not trying to impose on its validators, because they want to remain as decentralized as possible. So I think it's trying to solve for a different problem.
00:40:18.258 - 00:40:46.890, Speaker A: And right now you see a lot of liquidity still being on Ethereum, because most people consider it to be the most secure chain. Like it also, I think so at least hasn't had any downtime, which with Solana is not the case. So I don't know. Solana is definitely improving, I think, because they haven't had any downtime in a long time. They have had downtime, which it shouldn't be held against them forever, but at least it's important that you don't have downtime or people are going to trust you more if you haven't had downtime in at least like five years or something.
00:40:46.960 - 00:40:48.426, Speaker B: But you have to pause everything.
00:40:48.608 - 00:41:07.986, Speaker A: Yeah, we have to pause the global financial system, which is not great, but for us, it would be definitely interesting to look at Solana. Definitely now that volume is increasing. But the thing is, just since we are still a small team, we have to be careful about where we allocate all of our resources. And Solana would be a big project.
00:41:08.088 - 00:41:21.074, Speaker B: Yeah, definitely. I feel like liquidity flows in and out of Solana quite often, but I think during the bull market, it would definitely be one of the bigger ones. It would be like Ethereum and Solana, I think. But you never know. All money eventually flows into Ethereum.
00:41:21.202 - 00:41:35.530, Speaker A: Yes, it does seem like that. It does seem like that. And also with Salana, you just had this huge airdrop, which might also, like this might also boost the volume, at least for now. But it doesn't mean that it's going to be like this for a long time, right?
00:41:35.600 - 00:41:38.742, Speaker B: Yeah, it's a good point. I think that was a 200 million dollar airdrop.
00:41:38.806 - 00:41:42.662, Speaker A: Yeah, it's crazy. It's like Celestia, another one, which is a crazy airdrop.
00:41:42.726 - 00:41:49.530, Speaker B: That makes sense, actually, why it's sort of popping off right now. It's a 200 million dollar airdrop. Yeah, the trading volume would be insane.
00:41:49.690 - 00:41:53.066, Speaker A: Some good liquidity injection, quick little injection.
00:41:53.098 - 00:42:11.078, Speaker B: Of 200 milli, nothing too serious. But man, it's been such a pleasure having you on. I'm glad I got to be the one to have you first on the podcast world. Hopefully you do many more, and we see some great things happening with chainbound. Hopefully you come number one with just your small team and rule the trying.
00:42:11.164 - 00:42:13.094, Speaker A: We're trying. We're trying. Our very.
00:42:13.212 - 00:42:19.670, Speaker B: Yo. You have to go into the true mempirate arc and take over the seas. The mempool seas.
00:42:20.490 - 00:42:27.330, Speaker A: Oh, shit. You figured out where my handle comes from. Yeah, that's exactly it. It's like mempool pirates, but that was too long, so I made it, mempirate.
00:42:27.410 - 00:42:38.894, Speaker B: Yeah, exactly. I got it day one. Don't worry. Thank you so much for coming on, and I'm keen to see what happens. And when you're down the line, we'll definitely talk again on the podcast. And until then, yeah, for sure.
00:42:38.932 - 00:42:41.418, Speaker A: Thanks for having me, man. It's been a great first podcast.
00:42:41.514 - 00:42:51.178, Speaker B: No stress. Yeah, I told you it'll be good. That's another one down for the books. Thank you, everyone, for listening. Hopefully it was useful. But until next time, mempirate, I'll see you in the seas.
00:42:51.274 - 00:42:52.410, Speaker A: Yes, sir. Ahoy.
