00:00:00.170 - 00:00:21.946, Speaker A: First of all, need to properly explain why the vulnerability is there and then prove the impact. So pocs, they are extremely valuable. And every time there isn't a poc, it's, like, quite painful because the person reviewing it almost needs to do the bug hunt for the white hat.
00:00:21.978 - 00:00:22.126, Speaker B: Right.
00:00:22.148 - 00:00:29.080, Speaker A: And the POC makes everything clear, not just for the reviewers, but for the researcher itself.
00:00:30.170 - 00:00:38.840, Speaker B: GM. GM. Everyone, my name is Garch, your host, and I'm here with GM hacker from immunify. How's it going, man?
00:00:39.450 - 00:00:42.758, Speaker A: Hello. Glad to be here. Thank you for the invitation.
00:00:42.854 - 00:00:59.630, Speaker B: Pleasure to have you on. We've been friends for quite some time, but we've never actually spoken, so this is our first real talkative interaction. So we'll definitely put this one in the books. I think it'll be a great introduction to a great intro would be basically. What do you do right now?
00:00:59.700 - 00:01:16.018, Speaker A: Sure. Currently I essentially do smart contract triaging at immunify. Also, I kind of lead the development of any potential smart contract solutions that we do.
00:01:16.104 - 00:01:16.690, Speaker B: Yeah, basically.
00:01:16.760 - 00:01:20.954, Speaker A: That's it. That's my main work is at imunify.
00:01:21.022 - 00:01:23.174, Speaker B: Immunify. Sweet. And how long have you been there for?
00:01:23.292 - 00:01:59.730, Speaker A: So I started as a white hat scholar. Immunify had. I don't think they run this as of now. They might have stopped it, they might run it in the future, but they ran a white hat scholarship where basically, essentially, you would get paid to transition, potentially to a white hat living, essentially. So I entered into that. I also had met a lot of people from the company before, which was interesting. I'm based in Lisbon, and some of them are from Lisbon.
00:01:59.730 - 00:02:11.970, Speaker A: And, yeah, eventually after the scholarship, I got a job as a triager. And, yeah, that's been like the scholarship was a year ago, essentially.
00:02:12.130 - 00:02:27.750, Speaker B: Right. And I know that immunify is known for their public contests. So what is the difference, really, between, I guess it's an in house triager and I guess a contractor public contest participant.
00:02:27.830 - 00:02:33.102, Speaker A: Oh, you mean between a white hat and a triager or something like that?
00:02:33.156 - 00:02:39.070, Speaker B: Yeah. So you've been basically hired by immunify to be a triage white hat.
00:02:40.050 - 00:03:22.814, Speaker A: What's the difference between immunify as a bug bounty platform? You have a lot of people that basically. Well, it is an open platform, essentially. So people can just white hat. They can just try to find vulnerabilities in projects, in live projects. And you don't need to be at all associated to immunify. If you find a vulnerability, you'll go to immunify and report it. Then you had this scholarship, where it was basically like a support for certain people to do that kind of living, but not at all the typical thing to do.
00:03:22.814 - 00:03:48.502, Speaker A: And then a triager is actually a person at the immunify company associated to immunify. And the triagers will get the bug reports and kind of do well. They triage. So they will check whether the bug report is valid, whether the vulnerability exists, and what would be a fair payout for the.
00:03:48.556 - 00:03:56.086, Speaker B: Okay, so you're like, basically, you review the reports, right?
00:03:56.268 - 00:03:57.398, Speaker A: Yeah, exactly.
00:03:57.564 - 00:04:05.798, Speaker B: Okay, got you. Yeah. Okay. I thought triager, as in, like, you're an in house security. Okay, that makes complete sense. Maybe it's just the name. Sweet.
00:04:05.798 - 00:04:26.274, Speaker B: So you're basically reviewing people's reports and seeing whether they're correct or basically reviewing them. One thing I would like to ask is, how did you get into all of this? Where did your career start? And then finally got into reviewing public contest reports, all that kind of stuff?
00:04:26.392 - 00:05:05.902, Speaker A: Sure. So basically, I started working as a software engineer when I was at a university still. I was doing aerospace engineering, and in the end of it's five years, in the fourth year, I basically wanted already to get married. To be honest, that was mostly the reason for starting to work. Basically, I wanted to get some money. So I started working as a software engineer. I had the luck, basically, of starting that sort of work.
00:05:05.902 - 00:05:52.970, Speaker A: I had to learn most of stuff at the job, though. I had learned how to program in c in low level languages, and essentially that was more of a. It grew to be sort of embedded systems engineering, a lot of microcontroller stuff, also just the typical raspberry PI and server. So it grew to a sort of csadmin position or csadmin kind of job. And, yeah, that's how I started, and I immediately understood that actually what I wanted to do was code, being a software engineer, et cetera. I then transitioned into the banking industry, worked at a bank.
00:05:53.130 - 00:05:54.750, Speaker B: As a software engineer.
00:05:55.250 - 00:06:21.746, Speaker A: Yes, also as a software engineer, basically trying to reform some of the technologies. We were working on a very math heavy analytics library that was in c plus plus, very old c plus plus. We were trying to do testing in python because all the testing was done with Excel spreadsheets.
00:06:21.858 - 00:06:23.398, Speaker B: Oh, God. All right.
00:06:23.484 - 00:06:52.510, Speaker A: Yeah. And it was very difficult, actually, to reform anything because the older engineers are very set to their own ways. For example, we couldn't convince them to use git. They were using subversion, which was something I had never heard or seen before. It's like git, but older.
00:06:52.850 - 00:06:55.278, Speaker B: Okay. Like pre git stage.
00:06:55.454 - 00:07:02.078, Speaker A: Yeah. Exactly. It's also to version control, but a little bit worse, in my opinion.
00:07:02.174 - 00:07:02.674, Speaker B: Yeah.
00:07:02.792 - 00:08:30.000, Speaker A: Anyways, then I went to an IT company here in Portugal focused on digital tv. This was a lot of just jumping around different industries, but it was at this time, during this particular company that I eventually heard about crypto, I met some friends that essentially really pressured me into, yeah, you should definitely learn how to program smart contract. So I started studying that on the side and immediately I got hooked, to be honest. The first thing I did was to read the bitcoin white paper and just that I immediately fell in love with it, to be honest. I really thought it was an ingenious engineering idea. All the moments during work and after work where I had some where I wasn't working, essentially I was just studying up just a ton of stuff when the security part of it entered into play. Because what I found out was, at least my impression was that the security researchers in the space were the ones that deeply knew the technology.
00:08:30.000 - 00:08:53.462, Speaker A: And that's what I wanted. I wanted to deeply understand the technology. I also convinced my company to allow me to do some courses, or not, but to lecture some courses to the other employees. So I would use this as an excuse to force me to learn stuff. Right?
00:08:53.516 - 00:08:53.878, Speaker B: Yeah.
00:08:53.964 - 00:09:40.310, Speaker A: So I lectured python courses, some data science courses as well, and then I convinced them for me to lecture courses about bitcoin, about smart contract, et cetera. So it would force me to actually learn the technologies. And basically, eventually I just suddenly realized, man, I just need to start working in this industry to really learn on the job, to learn with people that know direct. Yeah, got you. So, yeah, I made a deep dive, essentially, and was a really good decision.
00:09:40.730 - 00:09:48.166, Speaker B: And then you got into immunify, basically reporting through that, I'm assuming. How did you start that kind of journey?
00:09:48.198 - 00:10:25.974, Speaker A: Yeah, I just sent out a whole bunch of curriculums. I was already, I would say, like a good software engineer. So when I learned smart contracts and I made a deep dive into the EVM, et cetera, I thought I was confident that I could do some solidity developer work, but I didn't have anything to support that claim. Right. That I knew the sort of stuff. Yeah, I tried building up my GitHub with some repos, with some solutions to ctfs et. Yeah.
00:10:25.974 - 00:11:03.018, Speaker A: And eventually, after sending just a bunch of curriculums to so many places, there was one company that accepted me. It was called Radham Network, which is something most people never heard of. But anyways, they let me do solidity work, which was the goal, essentially. So that was very cool. And after that, I just started doing a lot of freelancing stuff. Always solidity development in an NFT marketplace as well in some companies that wanted to build out smart contracts. Yeah.
00:11:03.018 - 00:11:34.698, Speaker A: And by the time I eventually applied to the white hat scholarship of immunify, because immunify was always from the beginning a company that I was following due to the security researchers and eT. Yeah, I jumped into immunify. At the same time I jumped into a blockchain academy as well, where I was lecturing just blockchain stuff, which also helped me a lot to grow a.
00:11:34.704 - 00:11:47.920, Speaker B: Lot of content creation. And then that's how you're building sort of your resume and then you kind of supplied for the scholarship thing and then it was like a gateway into abunify, right?
00:11:48.290 - 00:12:25.370, Speaker A: Yeah, exactly. That was basically, they still have very, I would say a very difficult hiring process to become a triager. What does it kind of look basically? Yeah. I'll just say right away how it is. They do have a part, like a social part, where you really need to fit into the team. They really want people to be aligned and to have the same culture, et cetera, which is just a culture of transparency.
00:12:26.350 - 00:12:31.418, Speaker B: It makes sense. Yeah. You want people to be on the same kind of vibe as you get along, all that stuff.
00:12:31.504 - 00:12:38.174, Speaker A: Same vision, especially for a security company. I also think that they have more trust issues as well.
00:12:38.292 - 00:12:46.514, Speaker B: Yeah, for sure. So basically you did that and then I guess there was like technical. Did they make you write reports or review anything for this kind of thing?
00:12:46.552 - 00:13:04.120, Speaker A: Yeah, exactly. It was really just like, oh, at 10:00 a.m. At a given day, you will receive an email with code and you will have 4 hours to submit a report on that code.
00:13:04.490 - 00:13:08.186, Speaker B: Okay, so it was like a contest kind of thing, right?
00:13:08.288 - 00:13:41.620, Speaker A: Yeah, it was just finding as many vulnerabilities as I possibly could. And the code was insanely faulty. It was just full of vulnerabilities. But that was actually pretty weird because the vulnerabilities would pile up and obviously they had a sort of threshold also the important vulnerabilities that I needed to find and, yeah, it was basically this.
00:13:42.150 - 00:14:10.422, Speaker B: So you built like a report, basically find all the vulnerabilities. And this is basically to see if you can identify the bugs. So if someone, let's say, for basically reviewing reports, you've got to see what they've submitted, see if that's true. Check the proof of concept. So it's creating a report instead of reviewing it. So that's a bit weird. That's true.
00:14:10.496 - 00:14:25.662, Speaker A: I guess it's also a way to understand your fundamentals, whether you actually understand. For example, you would probably have a bug, like a classic reentrancy bug.
00:14:25.726 - 00:14:26.340, Speaker B: Right?
00:14:26.870 - 00:14:56.154, Speaker A: So naturally they would expect me to find that out. But maybe there were a little bit more, some bugs that were harder to eventually reach a meaningful impact. For example, those bugs will tell a lot about your skill set, for example. Anyways, it's not the same as. Well, finding bugs is not the same as reviewing the report because you're given the answer, right?
00:14:56.272 - 00:14:57.770, Speaker B: Yeah, exactly.
00:14:57.920 - 00:15:17.122, Speaker A: The report will have the answer, or maybe not. It's not as straightforward, but yeah, it's more like it actually tells you to look at these specific parts. Right. While when hunting for a bug, you don't know where the bugs are.
00:15:17.176 - 00:15:54.960, Speaker B: Yeah, I think it's very interesting to see this kind of side of bug bounties and even just auditing in general, because you've got one aspect which is finding the bugs, detecting them. Right. But how can you convey that to the client customer in a meaningful way that could teach them how to be better in the future and where they've gone wrong so they can prevent this in future iterations. So having said that, for basically audit firms and private auditors, all that kind of stuff, what do you think is missing can be improved on for making a high quality report? Like, what differentiates a low quality report from a high quality report?
00:15:55.490 - 00:17:05.670, Speaker A: Oh, wow. That's a heavy question. So there's always a lot of just time constrainting, to be honest. What I see is that there's a lot of firms or people that for a given report, will have a lot of time to actually dive deep into the code, to actually understand everything and just have your time to play around with the code. Right. Like, to basically be creative about it, just thinking about it during your day, even after work hours, the code just lives a little bit in your head and you just hallucinate a little bit. That's how I've heard being said, which is like, what if this particular part would break? What if I can change the order of something, et cetera? That's, I would say, a very valuable part of an auditor or having an auditing firm review your code.
00:17:05.670 - 00:18:17.286, Speaker A: And I do think that when I see an audit report that has, again, some projects might just not have these vulnerabilities, but when a report has a lot of business flow errors, like logic errors, those normally tell me that the auditor really dove deep into the code, really understood what was the point of the code to find those vulnerabilities. Right. It's not the same as there are some address zero checks that are missing here and there, which is also valuable. But actually, most of those small misses can be built up to a larger impact. You typically see reports with that, you immediately think that, wow, these reports, okay, they do have quality. But again, all auditors will have time constraints. So, for example, for code arena, typically the bugs found, they are found in a speed running style.
00:18:17.286 - 00:18:24.560, Speaker A: Right, where auditors don't have as much time to just dive into the code and think about it.
00:18:29.970 - 00:18:43.700, Speaker B: Let's say we do have these time constraints. What do you think are some really best practices for making a quality report in the shortest amount of time? If you have a week to do, a week or two for a report, basically.
00:18:44.070 - 00:18:47.790, Speaker A: Do you mean in just the report quality?
00:18:47.960 - 00:18:59.180, Speaker B: Yeah, report quality. Let's say they found the bug already and they have like, a short amount of time to write a report. How can they make it really top tier quality for the amount of time they have?
00:18:59.710 - 00:19:58.666, Speaker A: Yeah, good question. I think also that applies to bug hunting as well, not just auditing. The most important part, white hats and auditors, quite often they just assume that the project, because the code is from the project, they will understand a lot of things. So they can just write a report that doesn't need to say. It can omit a lot of the details, which is not a good approach, because often enough, you will have people reviewing those reports that are not fully familiar with the code as a project, like the triagers, the judges, et cetera, and it should be pretty clear what the impact is of a bug. So, meaning not just like fitting it into a vulnerability type, but rather fitting it into an impact type. Okay.
00:19:58.666 - 00:20:48.006, Speaker A: That's how, for example, at immunify, we check the severity of bugs. It is completely correlated to impact. So you can find a reentrancy bug in a given smart contract, but it all will depend on the actual impact of that vulnerability. Okay, got you. And so for that, you first of all need to properly explain why the vulnerability is there and then prove the impact. So, pocs, they are extremely valuable. And every time there isn't a POC, it's quite painful because the person reviewing it almost needs to do the bug hunt for the white hat.
00:20:48.006 - 00:20:55.534, Speaker A: Right. And the POC makes everything clear, not just for the reviewers, but for the researcher itself.
00:20:55.652 - 00:20:58.510, Speaker B: Yeah, solidifying. That actually works.
00:20:58.580 - 00:21:24.674, Speaker A: Yeah, exactly. Most of the time it can actually tell you, oh, after all, the impact is not as meaningful as I thought, or there is some particular part of the code that actually doesn't allow me to do this, especially for speed running. This is super valuable to really make sure that you are actually reporting an existing vulnerability.
00:21:24.802 - 00:21:37.450, Speaker B: So touching on proof of concepts, since that's such a critical thing for a report to be high quality, how do you actually make a high quality proof of concept and presenting that to your client?
00:21:38.910 - 00:23:04.898, Speaker A: Good question. So doesn't need to be like super code heavy, but also shouldn't be pseudocode and it shouldn't be bullet points and nothing like that. If you want to have bullet points explaining, you put comments explaining the code of your PoC. Okay, but it should be the ideal is always like a test script where the client can just have it and run it. But I'm thinking mostly in bug hunting like Eddie munify, but in audits, normally there isn't a ton of time to do a full test script, but you should at least have the code that they can copy and paste into a test script. Okay, whether it is just an attacking contract in solidity or like a forge like function script function, or maybe a typescript one where basically they can understand what the hell you are doing with their smart contracts just by looking at the calls, but also they can run it, or at least there's a very small amount of steps to allow them to run the proof of concept.
00:23:05.074 - 00:23:36.738, Speaker B: Right. So if you want to present, I guess there's two ways of doing. Two things I want to touch on is, okay, so we're talking about off chain reports and audits, so the state isn't actually live and you haven't got it initialized in any way. So how would you make a proof of concept that can be executed but it's not actually deployed? So I guess you would have to deploy it first, put all the state and if it's a massive repo. Right. How do you do that in effective way?
00:23:36.824 - 00:24:34.062, Speaker A: Question so you can just create a test file or a function or a test function, just like the tests that the project already has. Hopefully. If it has tests, yeah, exactly. So you can just do it unit test style. Okay, not running against live addresses because they don't exist, but as if you were running a unit test and it actually breaks or it passes and you are attacking it, and then you do some console logs or whatever, but it doesn't need to be that. If the code is explanatory enough, you don't need to build a full unit test as long as you provide the important calls to lead to the impact. I've seen a lot of proof of concept.
00:24:34.062 - 00:25:13.650, Speaker A: This might be like a misunderstanding. A lot of proof of concepts that prove, I'm thinking eddie munifier of course, but prove the vulnerability existence. But they don't prove at all the impact. So they would go like having some code and they will stop when they prove like, oh, as you can see. Yeah, I can call this more times than it should, for example, or something like that. And then you'll have like a comment saying, so because of that you could drain the contract. But you're like, oh, whoa, whoa, hold on a second.
00:25:13.650 - 00:25:57.386, Speaker A: So how do you drain the contract? Right. You need to provide also the code that will do that. This is so frequent. This is really like really? Yeah, majority of proof of concepts will do this. Even the elite hackers, they might just assume that you understood, okay, at this point I'm pretty sure you understood that I could damage your contract heavily, but often enough it's not at all obvious. And in others it's just like, oh, because of that I can drain your contract. But they might just not know how to exploit the vulnerability.
00:25:57.386 - 00:26:29.980, Speaker A: Actually. And actually the proof of concept is for the researchers benefit. It's like a really good argumentation, really making the case for the bounty they want to get paid. So if your proof of concept is really good and really explanatory and makes everybody understand the impact really well, then it will be easy to provide you a fair payout as well.
00:26:31.070 - 00:27:08.214, Speaker B: Interesting. Yeah. And another thing I wanted to touch on was, so there's two different types of auditing. There's obviously off chain, which is like pre deployment, and there's also post deployment where it's on chain. So I guess if you found a bug on chain and it's actively open for exploitation for anybody to come like blackout, what would you expect from someone that found an on chain vulnerability and they wanted to be a white hat, how do you think they would structure the report and this process of actually bringing the white hat into existence and notifying the team, et cetera, like that, how do you think that goes?
00:27:08.332 - 00:27:12.146, Speaker A: So you mean from the point you find a live vulnerability?
00:27:12.258 - 00:27:24.618, Speaker B: Yeah, let's say I've been studying a project for a little bit and I found something. And let's say it's already been audited, but I found something while it's been deployed. How do I disclose that? What's the process? What's the proper way?
00:27:24.784 - 00:28:32.174, Speaker A: So the first thing you need to do is you need to see whether the project has a bug bounty program or not, whether it is adimunify or if they've got their own bug bounty program, like something on their docs or whatever, if they don't have it, it will be at least you need to trust that they can reward you with something. They might just not, right? You can also shame them in the public square if they don't pay you anything, but will not be the same as just money. Hence why the existence of bug bounty platforms. But if they don't have it, I would still advise of course to report it responsibly. So you would need to speak with the team, like enter their discord or something, find someone and dm them something like that. Like hey, I found this thing. I think it's pretty critical, let's chat or something like that.
00:28:32.212 - 00:28:32.618, Speaker B: Right?
00:28:32.724 - 00:28:44.340, Speaker A: And eventually you would need to provide them the proof of the vulnerability they've got and then pray a little bit that they will reward you something.
00:28:45.190 - 00:28:45.794, Speaker B: Yeah.
00:28:45.912 - 00:29:48.210, Speaker A: Which is good. Most of projects will do that, right? Maybe you don't have a big incentive to be hunting a bug on that project if they have a platform like immunify. Even though this is exhilarating that you suddenly find a live exploit and pretty critical. Of course, every minute counts it seems, right? Not only can it be exploit and potentially steal user funds, but actually also just on the matter of your payout, some other white hat can front run you, right? Some other researcher might find the vulnerability first. Still, you'd really need to properly write a report and making sure that you explain everything with great detail. And of course the proof of concept will just serve as the proof for yourself as well that the impact actually exists.
00:29:48.370 - 00:29:53.210, Speaker B: Yeah, I'm sure that you would have to do a proof of concept before everything else regardless.
00:29:54.190 - 00:29:54.810, Speaker A: Yeah, exactly.
00:29:54.880 - 00:29:55.434, Speaker B: Looking at it.
00:29:55.472 - 00:29:55.722, Speaker A: Exactly.
00:29:55.776 - 00:29:58.006, Speaker B: To make sure it actually is exploitable otherwise.
00:29:58.118 - 00:30:28.566, Speaker A: Yeah, I would always recommend that you do the proof of concept before, unless you are absolutely sure and you are a seasoned white hat, otherwise you just need to really. Yeah. You should build your proof of concept first to make sure that the vulnerability exists before you start putting a team into incident response mode. Right. And suddenly it's nothing and people just got stressed out about it.
00:30:28.668 - 00:30:57.406, Speaker B: One thing I would like to touch on is, so if you're making a report for basically a private audit, I guess, how would you even build a reputation from just private audits, right? I guess it just becomes like networking and not really publicizing anything of the reports, even though that might be like a massive key thing. So the question is, how do you expand your network if you're just doing private audits for let's say a few.
00:30:57.428 - 00:31:03.780, Speaker A: People, I see private audits, meaning that. But then you can show off your reports, right?
00:31:04.710 - 00:31:08.100, Speaker B: I guess if they don't want it disclosed, how would you.
00:31:08.790 - 00:31:56.690, Speaker A: That's unfortunate. Yeah, definitely. Even Eddie Munify, there's a lot of bug reports, really juicy ones, that don't ever see the light of day, because the project really doesn't want it, and the researcher agrees. So you never actually see, even if it is a huge bounty. But, yeah, you're right, that's harder, of course, if you have public reports, like if you do private audits and the project lets you present a report. So essentially, just normal auditing without being a whitehead hacker, normally normal audits will always be public. That is the way to build your reputation, like showing the vulnerabilities that you have found.
00:31:56.690 - 00:33:01.698, Speaker A: And obviously, public contests are extremely helpful for that code arena style, for example, or Sherlock, you can just build a repo or like a portfolio with the vulnerabilities that you find. And even with the reports, you can hear interviews of some auditors from Spearbit, for example. And Spearbit will actually values in the hiring process, actually values not just the vulnerabilities you have on your portfolio, but also how you reported it, how thorough is your reporting, and your proof of concept writing. Other than that, networking. Yeah, but it is truly right. And showing off your skills, showing off your progress, building everything that you try out and build to learn. If you can just publicize it, just put it open source, share it on Twitter, talk with other people that also have the same interests, all of that is super helpful.
00:33:01.794 - 00:33:14.198, Speaker B: Why did you choose to get into basically bug hunting, like report reviewing instead of the actual process of attacking? Yeah. Why did you choose reviewing over participating?
00:33:14.294 - 00:34:01.594, Speaker A: Sure. Mostly I decided to enter the unified company. Right. I knew some people there, and I knew also that working with them would provide me a really valuable experience. I still have much to learn, and hence why I thought that joining a company would help me with that. Of course, there's a lot of just pros and cons into just joining a company, especially in this sort of space where you can have a lot of flexibility in so many ways, particularly as an auditor, as a white hat hacker. But there's also value to basically going to someplace where you see people that inspire you and that have more experience than yourself and just learn with them.
00:34:01.594 - 00:34:47.266, Speaker A: So, for example, the spearbeat model for me is like such an intelligent one, where you have teams and juniors and then associates, whatever seniors leads or whatever they're ranking, and the higher ups will help these smaller ones, the ones with less experience. And you just see those highly experienced security researchers in action, right? You hear their tips, you work with them. That's a super valuable experience. Also the experience of just being standalone hunting and just grinding. It's really good as well. There's much to learn on that in report reading.
00:34:47.298 - 00:34:57.754, Speaker B: It's a completely different field to finding the bugs directly. And are you working under people like apprenticeships when you first start shadowing? Or is it purely just like you reviewer? And that's it.
00:34:57.792 - 00:35:17.170, Speaker A: So there's also pros of reviewing, much like you see people becoming judges in code arena, but here there's a bigger difference, which is the reviewing part of it. The reviewers will see reports and vulnerabilities that nobody else will see.
00:35:17.320 - 00:35:18.340, Speaker B: Okay, right.
00:35:18.950 - 00:35:40.790, Speaker A: A huge chunk of reports are private, like a really big amount and even critical ones. And the elite hackers, they just have a creativity to find an exploit that is beyond imagination. Really. It's really impressive to read, really challenging.
00:35:40.870 - 00:36:13.060, Speaker B: As well, considering you have all this experience with report reading, and you see the elite hackers, like all of them, building these reports. It's got to be like from a fundamental point of view, objectively, it seems like the best way to accelerate becoming an elite. Because you're reading everyone's report, you can see the quality. So what do you think is the most common thing you see in the elites? As you said, it's creative things, creative thinking. So can you elaborate on that please?
00:36:13.510 - 00:37:25.930, Speaker A: Yes, I can. It's hard to explain even the hacker mentality. I really like thinking about it, and there's so many different hacker personalities. But in general, the elite hackers will find or will think about breaking your code in a way that nobody else thought of, mind you, these are live contracts they went through often enough, went through a lot of auditing and even with a lot of reputation in companies with a lot of reputation. But the hackers, it seems like when they suddenly focus on a particular code base, they will find something. It is really impressive, and mostly it's really out of the box. Okay, so really an out of the box thinking and with a high level thinking as well, where everything plays, whether potentially you have access to some million dollars, some large amount of money for a big period of time, or anything else, leveraging just a bunch of different technologies.
00:37:25.930 - 00:37:37.870, Speaker A: Yeah, it's really impressive. It doesn't mean an elite hacker, doesn't mean that they write a quality report. Okay?
00:37:37.940 - 00:37:38.560, Speaker B: Right.
00:37:39.090 - 00:38:32.778, Speaker A: Sometimes the reports are pretty, they suck a little bit because the elite might just have just so many assumptions that doesn't think about the fact that even the project doesn't fully understand what the actual vulnerability is for the elite. It just seems so obvious. And often they have time constraints. They seem to have time constraints as well, or they are aggressive in their negotiation process. So they will show the vulnerability and they will say, oh, as you can see, there's this impact, like $1 million of impact. But I'm sure if I had time, I could grow this impact to $10 million. Right? And you would be like, how would you do that, please? In action? Which is pretty cool.
00:38:32.884 - 00:39:23.834, Speaker B: Yeah, definitely. I think I never had this kind of perspective prior to this kind of chat, but it really seems like it's a very lucrative job in terms of information and research. And you can really see what the best are doing and you can compare of like, okay, what makes a good report, what makes a bad report, what makes a good, what are the most common vulnerabilities, which I want to touch on as well, how people separate themselves. It becomes really apparent, right. When you read through hundreds of reports like you probably have done and for different scenarios as well, like races, like the public, contests, normal audits. There's got to be a lot of differential factors involved. But yeah, just to touch on the most common critical vulnerabilities you see, even just like highs, mediums.
00:39:23.834 - 00:39:29.330, Speaker B: What are some patterns you see or common ones?
00:39:29.480 - 00:40:06.154, Speaker A: Good question. I think that the common vulnerabilities have grown in the space or have changed with time. You would see a lot of vulnerabilities that were typically found. For example, reentrancy, of course, the one that, the most famous one, always, they still exist, as you see from Pascal's repo on reentrancy attacks. He keeps those records and they still get exploited. Right. So you don't even see the ones that don't get exploited.
00:40:06.154 - 00:40:47.814, Speaker A: But you can also see that they start to be less frequent. So I think that the bugs that start appearing, they are more complex and they tend to require you to very deeply understand the code. So you no longer have those sort of bugs that you are just scanning through solidity lines. And there's a solidity line that is inaccurate. Right, right. There's a solidity line there, or there's a missing solidity line. No, the difference now is really about business logic, state machine changing.
00:40:47.814 - 00:41:16.818, Speaker A: For example, if you see some of trust's audit reports, for example, and he's the same like that in just bug hunting. Most of his bugs are like finding, basically envisioning, seeing the higher level state machine that a given protocol is and managing to find the state that the projects, that the developers were not aware that it could exist.
00:41:16.914 - 00:41:19.878, Speaker B: Right, like a symbiotic relationship kind of thing.
00:41:19.964 - 00:41:51.530, Speaker A: Yeah, exactly. You really need to train that muscle of deeply understanding something and also just having the creativity to think without developer assumptions thinking, how can I jump into this weird state even if they think it is not possible? I see a lot of the critical bugs are like this. You also see some that are simpler.
00:41:51.690 - 00:41:54.660, Speaker B: Yeah, like input validation, access control.
00:41:55.430 - 00:42:41.440, Speaker A: Exactly. But they start to be less and less frequent. Of course the bugs now require an actual deeper understanding. Right. You can still see some bugs and back in the day you would see a lot of bugs that were just those lines. So even people that didn't understand anything about blockchain didn't understand anything about the EVM, still they would have this hacker mentality or this threat modeling approach where they would just manage to find the vulnerability anyways, even if they didn't understand very well why it was a vulnerability or something. But they managed to break the contract, so they reported, which is interesting.
00:42:41.890 - 00:43:09.018, Speaker B: Yeah, super interesting. I would like to touch on, since you've gotten into this field and it's taken you, we all go through those jumping career pathways, stuff like that. I think if you were to, I guess, redo your whole career, or at least redo getting into this field rather, how would you kind of accelerate the whole process? Again, I think it's good to look back at it, right?
00:43:09.184 - 00:43:09.706, Speaker A: Sure.
00:43:09.808 - 00:43:10.170, Speaker B: Yeah.
00:43:10.240 - 00:43:55.238, Speaker A: I think it's good to evaluate your decisions as well, just for better decision making in the future. I would love to have jumped into it sooner, not just to manage to nail opportunities sooner, but just because the industry is so interesting. I wish somebody had talked about it in university or something, because it's so interesting. And right now with work and stuff, it's harder to sometimes have the time outside of work to dedicate, to continuing to learn some stuff that is outside of your normal work.
00:43:55.404 - 00:43:56.102, Speaker B: Yes, sir.
00:43:56.156 - 00:44:07.062, Speaker A: Like diving into new languages, for example, or ZK technology, all of those. I mean, there's so many rabbit holes in crypto. That is insane.
00:44:07.206 - 00:44:07.900, Speaker B: Right?
00:44:09.150 - 00:45:03.200, Speaker A: With regards to my career path, I guess I would definitely have given more emphasis on public good building and on open source coding because it was something that I didn't have experience on. All my companies previously just had everything closed sourced. And it is super enjoyable to not only build your own things, but also to go to some other code and contribute. It's really enjoyable. I really like it. And I should have dedicated maybe more time on that because I didn't know it was such a valuable thing. Not just for yourself, but just for building.
00:45:07.170 - 00:45:32.630, Speaker B: Yeah. And I guess what does your kind of daily schedule look like in this ideal world where you want to do what you're doing efficiently and most effectively to get as much out as possible? Most optimal, I guess. Yeah. What does your daily schedule kind of look like? Or if you're trying to change it, or if you're currently changing it or want to change it, what does it look like to be most optimal?
00:45:33.050 - 00:45:57.098, Speaker A: Sure. So I started early working on immunify stuff. So like 08:00 a.m.. I wake up earlier than that. Also have kids that wake up really early. Yeah. I start with immunify and the morning is the time to me where I'm more mentally sharp.
00:45:57.098 - 00:46:45.950, Speaker A: So on that time I will do very concentrated work, like deep work stuff and yeah, just do a lot of immunified work. Eventually in the afternoon I will start transitioning. I always have at least some education stuff to do. Education researching portion of the day. For example, right now I've been building some things with node guardians, which is a company that does some quests, some CTF style quests with an rpg theme, like a game. It's really interesting, actually been building some of those. It also provides me the experience of trying out new stuff, new languages as well.
00:46:45.950 - 00:47:12.354, Speaker A: Yeah. So I will have a dedicated time to that. And I would always have something. I have a list of articles and stuff like that. I would print at least a paper which doesn't get read in a single day, but I would print out a paper and an audit report because I continue reading audit reports because I still think it's super valuable.
00:47:12.482 - 00:47:13.014, Speaker B: Yeah.
00:47:13.132 - 00:47:17.946, Speaker A: And the papers will just be read throughout the days.
00:47:18.048 - 00:47:20.438, Speaker B: Yeah. Kind of like books, whatnot.
00:47:20.534 - 00:47:52.980, Speaker A: Yeah, I normally read books after all this time, during family time, basically. I do read a lot. Yeah. Normally articles, I try to print most of them just because I've been finding out that reading on the tabs on the Internet is just a little bit more distracting. Yeah. I've been going into all that rabbit hole of just how to stop optimize those sort of things. Yeah.
00:47:52.980 - 00:47:56.414, Speaker A: And stop like tab surfing, I would say.
00:47:56.472 - 00:47:59.080, Speaker B: Yeah. And what have you found from that? Actually?
00:47:59.850 - 00:48:56.150, Speaker A: Yeah, I've implemented some things that work out really well for me, for example, I had just a ton of tabs because there's so many things that one wants to keep up with and doesn't want to lose. So you either bookmark the hack out of just a ton of stuff or you have so many open tabs. I was starting to have this experience that with so many tabs, I would continuously go through the tabs to recheck what I had. Wait, what did I have on all the tabs? And I would open, open and just waste a ton of time on that. So instead I just write on a note. I have like a note with future articles, right? Something like that. And I have it separated in categories.
00:48:56.150 - 00:49:47.286, Speaker A: So if I end up seeing a new article, I will put it there. It is very different because they are not open. So you can just look at the note and you have immediately, like, the title of it. Instead of needing to open the URL, you just have the title and the categories. So if you have time, you can go to, let's say I have like 20 minutes or something. So I can go to the small article section and just grab a few of them, right? Or maybe I have an hour or for the weekend I go to the paper section and I print out a paper. I found that to work a lot with me also having a list that is like next articles to read and if I want to really read another one.
00:49:47.286 - 00:50:05.838, Speaker A: For example, uniswap v four just came out, right? There's a new article on that or whatever I really want to read that I need to read first the five articles that I have on my next. So only when I read those five, I can put some others right.
00:50:05.924 - 00:50:27.746, Speaker B: Anyway, I'm just trying out. Yeah, for sure, man, we are running out of time here. But I think it's been a pleasure. You've opened my eyes to the world of reviewing audits. Audit reports. I think it's actually quite an interesting field. Now, I thought initially it was quite boring, but now I can definitely see the value in just reading reports.
00:50:27.746 - 00:50:47.580, Speaker B: And I think anybody trying to get into what you're doing or auditing, they should definitely read reports from the best, the best people that have found criticals and just like top tier, I guess, companies as well, maybe. Do you think top tier companies do really good reports as well?
00:50:48.190 - 00:51:16.018, Speaker A: Yeah, there's a lot of companies that also bug hunt. Yeah, definitely. They do good reports, though. I mean, some audit reports from high ranked firms might not be that good, just the auditing ones, because they might just try to increase the severity more than it actually is. I see that happening often, and that's.
00:51:16.034 - 00:51:18.358, Speaker B: Not beneficial in long term, is it?
00:51:18.524 - 00:52:12.774, Speaker A: No, that's not at all. I had shared one on Twitter. I will not name the firm, but it is a high rank one that had a report on a bug that was just the. It was not a bug. Instead of using the ownable, like having an owner, just recommending to use the two step ownership, which is like you have a function call that starts the transitioning to an address and then that address needs to accept the ownership anyways. It is to avoid you mistakenly sending the ownership to some other address. But it was considered like a high vulnerability, which is like, what? It's not even like a vulnerability per se.
00:52:12.774 - 00:52:14.918, Speaker A: It would be like a recommendation. Right?
00:52:15.004 - 00:52:16.966, Speaker B: Yeah, right. Interesting.
00:52:17.068 - 00:52:22.970, Speaker A: But maybe they have incentives to increase this severity. I don't know.
00:52:23.040 - 00:52:27.500, Speaker B: I guess it makes them seem like they've done more work than they actually have.
00:52:28.430 - 00:52:29.820, Speaker A: Yeah, exactly.
00:52:31.630 - 00:52:38.462, Speaker B: If that's shown or publicly shown, then I guess it gets called out. Right. And then the reputation goes down, which I think.
00:52:38.516 - 00:52:39.806, Speaker A: Exactly, yeah.
00:52:39.828 - 00:53:07.078, Speaker B: So it's not worth to do it if anybody's thinking of doing that. But, yeah, man, it's been such a pleasure. I think it's been an amazing chat. I've really enjoyed this and I hope you've also enjoyed this, but I hope a lot of people will find value in this and I sure did. So, yeah, man, I'm keen to see what the future holds to you and this space. Yeah, so lovely having you on. It's been a pleasure and, yeah, hopefully catch you again soon.
00:53:07.164 - 00:53:08.870, Speaker A: Thank you very much for having me.
00:53:08.940 - 00:53:10.740, Speaker B: Of course. Everybody take care.
