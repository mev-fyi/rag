00:00:07.400 - 00:00:48.830, Speaker A: Welcome back and let's talk another term, logical operators. And they're very, very useful when it comes to conditional logic. Let's have a look. Logical operators are, well, as a matter of fact, you've actually seen them before and is a logical operator or is a logical operator. It allows us to perform logic between two things. What else is a logical operator? Well, let me list it out for you. We have greater than, less than equal to.
00:00:48.830 - 00:01:14.330, Speaker A: Let's actually use them in an example. Is four greater than five? Well, if I print this, what do you think will happen? Shouldn't be a surprise. That's false. Four is not greater than five. This is a logical operator that you may have seen in math class. If I do the opposite, is four less than five. That makes sense.
00:01:14.330 - 00:02:01.448, Speaker A: That's true. What about is four equal five? If I run this, I get false. Now why did I use two equals here? Why not just do this? Well, if I run here, I get an error. Syntax error. Keyword can't be an expression. It's because, remember, equal is what we use to assign to a variable, right? And if you remember, I told you that a variable in python can start with a number, it has to be a letter or underscore. So when I do this, it's going to error because the interpreter is going to say, hey, I'm trying to assign variable for the value of five.
00:02:01.448 - 00:02:44.038, Speaker A: And, well, that's not really allowed. So we use double equals to tell the interpreter, hey, I'm not assigning a variable here. I want to compare things and we can compare different things. I can do hello equals to hello equal to true. What if I do a is greater than b? I get false. Now why is that? This, I want you to Google on your own and figure out why is a greater than bhidden. What if I do a? Is that greater than capital a? That's true.
00:02:44.038 - 00:03:28.186, Speaker A: Hmm. This is, this is interesting, and this is actually quite an interesting reason. So I know, I know it's easy for me to just give you an answer, but I want you to practice googling this. And the reason I'm not giving you an answer is it's also because it's not very important. Because most of the time you want to make code that is easy to understand and understandable, you're most likely using greater than and less than with numbers. So if you see something like this in code, well, you wouldn't know what's going on. What is this person trying to compare? Why are they doing, is lowercase a greater than capital a? It's not something that you see very often, but the reason you get this expression is quite interesting.
00:03:28.186 - 00:04:03.200, Speaker A: So I do recommend you Google Google into it. Like I said, I'm a strong believer in not holding your hand the entire way. I know so far the videos up until now have been quite easy, especially if you are an experienced programmer. But as we progress, you'll see that after this course you need to figure things out on your own. And my job is not to just handhold you the entire way, it's to develop the skills in you to become an employable programmer. So I hope you bear with me as I just give you this little challenge. All right, we went a bit on a tangent, so let's bring it back.
00:04:03.200 - 00:05:04.988, Speaker A: Can I do things like this? Is one greater than two or you know what? Let's do less than two and less than three and less than four. Will this work? Well, of course it will. It's just an expression, right, that we're evaluating and all of this is true. But as soon as I changed and something is false, it's going to short circuit, which we learned about previously, and return false. Alright, so we know the greater than equal to less than sign. We also have greater than or equal to so that if I do zero here and I click run, I get true because it's saying, hey, is this greater than or equal to zero? I can also do less than or equal to zero. And here I get false because zero or one is not greater or equal to zero.
00:05:04.988 - 00:05:30.510, Speaker A: But if I do zero here, I'll get true. Here's another one. What if I do this exclamation mark equal. This means in python not equal to. If I run this, I get false. And this is a little tricky. What it's saying is, hey, is this not equal to this? So it's the opposite of doing equals.
00:05:30.510 - 00:06:09.052, Speaker A: If these two things don't equal, it's going to say true. So if I do one here, I'll get true because these two things do not equal. So we've learned greater two or less than, greater to equals, equals or greater or greater or equal to. We've learned about less than or equal to. We've learned about not equal to, but we've also learned about and, and, or, and finally there's one more I want to teach you. And it's the not keyword. I know, I know.
00:06:09.052 - 00:06:56.650, Speaker A: It's a, it's a little, it's a little much, but it's not as hard as you think. Not is, well, the opposite. So if I do here not true, what do I get? I get false. And you see that not is also a function. So it's a keyword, but also a function that we can use. If I do not false again, I just get the opposite. What if I do this? What if I do not? One equals to one, what will I get here? I get false because this expression evaluates to true and then not just does the opposite.
00:06:56.650 - 00:07:31.024, Speaker A: So let's take a break here and work on a little bit of an exercise to make sure that we understand this. Welcome back. Let's do a fun little exercise. We just got hired by a gaming company and we're creating this wizard game. And this wizard game has the is magician in the user's profile. And for now we'll just set it to false. We also have is expert and whether this user is an expert at this game.
00:07:31.024 - 00:08:16.700, Speaker A: We'll leave it at true for now. And then let's, let's do this here. I want you to check if both or check if magician and expert. And if that's the case, if true, then I want you to print you are a master magician. And also I want you to check if magician but not expert. If that's the case, I want to just print. At least you're getting there.
00:08:16.700 - 00:09:19.076, Speaker A: And then finally, let's do a check that says if you're not a magician, I want you to say, hmm, well, you need magic powers. Now I want you to use what you've learned about logical operators to create this conditional logic. You can pause the video if you want and try it yourself in a repl. Otherwise, I'm going to keep going with an answer. But you should be able to solve this fairly easily if you've been following the videos and exercises so far. So let's start with the first one where we say you are a master magician. So I'm going to say, if is expert and is magician, I am going to print you are a master magician.
00:09:19.076 - 00:09:58.576, Speaker A: So I'm going to copy that and say, printhead, you are a master magician. Nothing too crazy here. And then next one I'm going to say if, or I could even say Elif, if, if I want. And again, this is something that you can decide what you prefer. I usually like using El if, if it's part of the same concept as the first one in this case. Yeah, we're, we're still trying to figure out a what type of user it is. So we'll use Elif and we'll say, elif, we want to check if it's a magician.
00:09:58.576 - 00:10:52.410, Speaker A: So that is is magician. So we're going to check if that's true. But we also want to check if, well, not an expert. Now, how do we do this? I mean, we could say use short circuiting and say is expert. And even if this is false, we can get true here because is magician short circuit and print this part. At least you're getting there because the interesting here is that this code block is never going to run if both of these are true. Because in the first if block we're checking that so that as soon as this is true, we're going to completely ignore the elif.
00:10:52.410 - 00:11:39.032, Speaker A: So we could do that. But this is a little bit hard to read because I really have to think about it. If I come back to the code or somebody else looks at my code, it's not clear that unless I comment that I'm checking if it's magician but not expert because this will never run. If his magician is false, then that's what they're checking for. I know it's kind of confusing even saying it, so I prefer using something like this, using and not. And that reads a lot better, right? It makes a lot more sense. Hey, if this person is an expert and magician do this.
00:11:39.032 - 00:12:15.580, Speaker A: Otherwise, if this person is magician and not an expert, then print this. That reads pretty nicely. And yes, you can do this because remember, not is simply checking and inverting whatever the Boolean expression is. So this still evaluates to a boolean that and can check. All right, let's finish the final one. If you're not a magician, you need magic powers. So how do we check here? Well, we can do another Elif and say not is magician.
00:12:15.580 - 00:12:44.314, Speaker A: And if I run it like this and say print and we'll just copy here, you need magic powers. And let's remove the comments for now, just so we can see the blocks of code. And we're going to test our program. Hopefully we coded it properly. Hopefully there's no bugs. But let's have a look. If I run this, you need magic powers.
00:12:44.314 - 00:13:38.144, Speaker A: Why is that? Well, if magician is false, none of these are going to work. What if I change this to true and I click run? Alright, I am a master magician because I'm an expert as well as a magician. What if I turn this to false and I click run? Hey, at least you're getting there. I'm a magician, but I'm not an expert yet. I still need to improve my gameplay. Now, you may have gotten a different answer than me, and there's many ways to do this right, you could have used an else statement you could have used or conditional logic is all about writing code that makes sense not only to you, but for other people reading your code. The idea is not to be extremely clever or really worry about short circuiting.
00:13:38.144 - 00:14:30.666, Speaker A: Yes, it can be more performant, but a machine is so powerful that just tiny bit of optimization there is usually not worth it when you're losing perhaps readability. So you want to make sure that your code reads like English. And this is a topic that, frankly, a lot of beginner programmers have a hard time understanding, where they try to be as clever as possible, write as little code as possible in the shortest possible lines, when instead you want to focus on readability. Because a code that is easy to understand is a sign of a good development. And I hope looking at this, you're thinking, yeah, this is pretty easy. I mean, this all makes sense, but this is not the only way. Maybe my version of what reads well is different than yours.
00:14:30.666 - 00:14:49.930, Speaker A: The idea is to each of us try our best to make our code simple and nice. And in programming, there is no one right answer. There are many ways to solve a problem, but the key is to solve it in a simple manner that is readable. You, I hope you had fun and I'll see you in the next one.
