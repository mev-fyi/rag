00:00:00.800 - 00:00:49.510, Speaker A: Hello, everyone, and welcome to the Python developer roadmap, the real Python developer roadmap. Now, I want you to meet my friend Sammy the Seahorse here. Yes, Sammy the Seahorse has been specializing in figuring out what the roadmap for a Python developer is. So thank you, Sammy. Now, whether it's machine learning, data science, data analytics, data processing, web development, test automation, web scraping, Python is everywhere. And you're probably watching this video because you know that Python is in demand. It's one of the most popular programming languages in the world, and it offers so many options for you and your career.
00:00:49.510 - 00:01:26.858, Speaker A: But I wanted to create this roadmap because a lot of people find Python overwhelming. They don't know where to start. What do you need to learn? How is everything connected? So this diagram is meant for you to use as an outline of what you should learn and some of the career options that you have. So in this map, we'll go over some foundations. We're going to talk about Python two, Python three. We're going to talk about editors and ids, about CI, CD, some popular Python libraries, some computer science topics that you should definitely know. And then the fun part at the end, we're going to talk.
00:01:26.858 - 00:02:16.612, Speaker A: Talk about all the career options that we can have with Python, including exciting things like machine learning and web development. Now, before we get started, you might be asking yourself, who are you and why should I listen to you? Well, that's a very valid point. My name's Andre. This is my face, and this is my website. I spent many years as a software engineer, and also for the past two years, I've been teaching people how to code and get hired in the industry. Whether you're a computer science graduate or just completely self taught, I myself am self taught. So I have a pretty good understanding of what it's like starting from the very beginning, starting from zero, and getting to a point where you actually are hired for your skills.
00:02:16.612 - 00:03:01.746, Speaker A: Now, I also run a monthly newsletter called the Python monthly, and in it every month, I recap what happens in the industry and all the nice resources and articles that are important for you to read. So I have to stay on top of the industry and know what's going on. So I created this roadmap using my past experience and keeping up with the python world so that in the current year, you have an idea of what's out there, what's new, and what you should learn. So enough chatter. I think we should get started. Now, the very first question you're probably asking yourself is, why is Sammy the Seahorse. A seahorse and not a snake.
00:03:01.746 - 00:03:35.620, Speaker A: I mean, python is a python. Wouldn't that make more sense? Well, again, you're focusing on the wrong thing, so let's focus on Python here. Sammy the Seahorse just sounds nicer. All right, so Python is a general purpose language. What does that mean? It just means that with Python you can do a lot of things. Essentially, programming is all about writing instructions for a computer to follow so that those instructions can be done a lot faster than what a human can do. Because computers are really fast at some certain tasks.
00:03:35.620 - 00:04:12.752, Speaker A: Maybe they're not as creative as us, but they can do repetitive tasks really, really fast, like calculations. Now, when it comes to programming languages, there's a ton of them. If you google programming languages, you'll be overwhelmed by how many choices you have. So why is Python so popular? Probably Python and JavaScript are two of the most popular languages in the world. JavaScript is popular because of the web. On the web you use JavaScript. But what about Python? Well, Python is really popular, not because it's the fastest language, but because of the ease of use.
00:04:12.752 - 00:04:56.190, Speaker A: You see, when you write code, different programming languages offer different benefits, and Python is just a really nice language to work with. It's a high level language, so it helps you write code fast, efficiently, and because of this, it's fairly easy to pick up compared to languages like C and C. That's why you see Python developers everywhere. As we'll discover. We're going to talk about the data science world, the machine learning world, the web development world, test automation world. All these places use Python because you are able to pick it up and be efficient with it very, very fast. Now, the first topic we want to talk about when it comes to Python is Python two versus Python three.
00:04:56.190 - 00:05:42.598, Speaker A: You see, a programming language is constantly evolving. If somebody created a programming language and didn't touch it, well, eventually those languages are going to die, because every year we humans become better and better at understanding what a good programming language is. So most programming languages are constantly being updated with new features. Now, Python had a big change from Python two to Python version three, what we call a breaking change. That means in order to go from Python two to Python version three, there were features that were in Python two that now won't work in Python three, so they're not compatible. Now, there was a big debate a couple of years ago when this happened. Some people decided to stick with Python two.
00:05:42.598 - 00:06:34.176, Speaker A: Some people said, no, I'm going to move on to Python three because it's newer and better, but eventually Python â‚©3 out as it should, and Python two is, well, gone. Well, not technically. You see, the latest version of Python two that was maintained was just released and it is no longer maintained. That means it's not going to get any more updates, no more security patches, and everybody is moving to Python three. Although you'll see code bases that still use Python two, most everybody is moving to Python three. So just for your reference, know that you should focus on Python three and you might encounter in your workplace Python two code bases that will probably need to be upgraded to python three if they want to stay current. All right, before we get into foundations though, let's talk about ides or editors.
00:06:34.176 - 00:07:22.610, Speaker A: To be a programmer, you can write programs in a text file if you wanted to. You can write it in a word document, but that's not a good experience. You don't get spell checking, you don't get syntax highlighting, things that make you more productive as a program. So when it comes to Python, there's a few popular tools. First, one is Vim, and I have to mention it because it is an old school editor and as you can see here, it makes you look like a hacker, but essentially just gives you some syntax highlighting. But probably the more popular ones to use with Python are what we call ids, like Pycharm. Pycharm is an ide, which means it has all the bells and whistles that you need to write Python.
00:07:22.610 - 00:07:55.216, Speaker A: What does that mean? Well, it has all the nice features like as you can see, syntax highlighting. So instead of a text document it highlights code so it's easier to understand. It has extra features. It even gives you hints as to why you should type. It's like an assistant as you write code, and Pycharm was built specifically for that, for Python developers. So it has all the tools, all the plugins to customize it to your own liking. And most people use Pycharm, but there's other options as well.
00:07:55.216 - 00:08:27.258, Speaker A: There's versus code, which is another popular one, which you can write other languages in. But again, you can write Python in as well. And you can see here, it looks pretty similar to Python. I'm also a big fan of sublime text. Now instead of an IDE, which is a full featured tool like a Pycharm, editors like sublime text are super lightweight, simple ways to write code, which is why it's called a text editor. And I personally like sublime text. It's very lightweight.
00:08:27.258 - 00:09:02.497, Speaker A: And again, just like Pycharm, there's things like Intellij, which are actually for Java developers, but you can use a Python plugin and get the full ide experience with something like Intellij as well. And then finally, one of the most exciting things that has happened recently is this. Jupyter notebooks. And when it comes to data science machine learning, this is the default tool to use to write code. And Jupyter notebooks look quite different than what we've had before. They're interactive like a notebook. You can write pretty much anything you want in here.
00:09:02.497 - 00:09:44.960, Speaker A: You can have visualizations and you can write your code and then have different things happening so you can interact with your code live. Things like Jupyter Notebook or Google Colabs are these notebooks that you can use to perform a lot of data science and machine learning tasks. But if you're just getting started, you probably want to use something like versus code or Pycharm. And then if you get into those fields like data science and machine learning, you can start dabble into Jupyter notebooks. Alright, so we know to stick with Python three. We've learned about some of the tools that we can use. Now let's dive into the foundations and what we need to know as a python developer.
00:09:44.960 - 00:10:40.462, Speaker A: Let's talk about foundations. You see, any programming language to learn it requires you to understand a new language, but every language has some commonalities with it. For example, if you learn Python, then it's going to be a lot easier for you to learn a language like JavaScript, or a language like PHP or Java or any other language, because most programming languages have some important foundations like data types. For example, Python has lists, has strings, tuples, sets, booleans. You have to know how to do things like control flow, that is for loops, while loops, if else statements. You need to learn about functions, about exceptions and error handling. Most of these things are in other programming languages, but there are some specific Python things that you should understand.
00:10:40.462 - 00:11:27.646, Speaker A: To call yourself a Python developer, for example, you need to understand this idea of Pythonic. What does that mean? Pythonic is this idea that there's a certain way that Python developers do a certain task with the language. When it comes to programming, there's many ways that a solution can be coded. But Python developers talk about this idea of Pythonic as doing things in a way that most people in the Python community do it, so that we all agree that this is usually a good way of doing things. Now this takes a bit of practice. You can even google what Pythonic means, but things like using list comprehensions in Python is a very pythonic way of doing things. We also can do things like file IO.
00:11:27.646 - 00:12:13.710, Speaker A: IO stands for input output using things like the Pathlib or their Sy's module in Python, which we're going to get into. Those are Python libraries, and this allows us to read and write files. For example, we can ingest a file that's on our computer, do some tasks, maybe add an exclamation mark at the end of each sentence. We can write a snippet of code in Python, do that, ingest that file, and then output it. So that's why it's called input output, and then output it and save it, let's say, to our desktop. And you can do this with all sorts of files, with image files, with PDF's a very, very important thing that you can do with Python, but also with many other languages. You need to learn about the Python package index.
00:12:13.710 - 00:12:48.352, Speaker A: The reason that Python is so popular is because there's a large community. A lot of people know Python, and when you have a large community, when it comes to programming, there's a big advantage. What is it? Well, we have things like pypy.org comma, the Python package index. This is where you and I can actually write our own python code and then share it with the world. Let's say you wanted to build a calculator. Well, I bet a lot of other people have wanted to build a calculator as well.
00:12:48.352 - 00:13:19.788, Speaker A: So I can use Pypy to find packages that others have shared. So instead of me coding something from scratch, I can use somebody else's code and use it in my project. For example, if I wanted to create a project that tells me jokes, well, I wonder if there's a joke teller package. Let's find out. Yep, there is. Again, large community means that you can find packages for all sorts of things. So now I have packages which are other people's code that I can use in my project.
00:13:19.788 - 00:13:55.956, Speaker A: I don't have to code it from scratch, I just have to read the documentation and understand how I can implement it into my code. And this goes to our next topic, this idea of modules and packages. Instead of writing Python in just one file, so one Python file to write your code in. Most of the time, as our code gets bigger and bigger, we want to package it up into modules. Those are different files. To organize our code better, as you start working with teams, you're not the only one on the project. You need ways to organize your code and you'll see that as being a big challenge in a lot of companies that you work for.
00:13:55.956 - 00:14:38.500, Speaker A: Most of the time there's thousands if not millions of lines of code, and you can organize them in many different ways, one of them being modules. And packages are just collection of these modules. That's why the Python package index is called that, because it gives you packages which are essentially Python files for you to use. Next, you want to understand this idea of Python interpreters. You see, when you actually download Python, what you're downloading is an interpreter. What does that mean? Well, if I wrote Python code on my computer right now, my computer is going to say, andrea, what the heck are you doing? What are you typing? I don't know this. You're speaking gibberish to me.
00:14:38.500 - 00:15:23.880, Speaker A: In order for a computer to understand Python, you need something called an interpreter, a program that understands Python and knows to talk to the computer and say, hey computer, this programmer wrote something in Python and what they want you to do is to open a file. Now there's actually many Python interpreters, as you can see here. There's C Python, which is actually implemented in the C language. There's pypy, which is implemented in Python, Jython, which is implemented in Java. All of these are interpreters. And when you download something like Python from the original python.org comma, you're installing the C Python, which is an interpreter that is written in c.
00:15:23.880 - 00:16:03.730, Speaker A: Understanding this is really, really important, that Python isn't actually a thing. It's more of a specification that these interpreters use. Next we have the Python standard library. Remember how I said we can use other people's packages in the Python package index? Well, the really common ones that are really useful are officially part of the Python standard library. And the Python standard library is exactly that. You can see here, I'm on the official Python documentation. The latest version of Python is this.
00:16:03.730 - 00:16:44.530, Speaker A: And here I have all the libraries that are already pre written for me that I can use and I can import into my code. For example, file and directory access. Remember how I said we can use Pathlib module to do file IO? Well, this is included in Python. When you install Python, all of these come pre built for us to do a ton of fun things. So it's good to get familiar with some of those popular standard library tools. We then need to learn about testing. Things like unit test are actually part of the Python library.
00:16:44.530 - 00:17:26.119, Speaker A: Let's see, where's unit test here? Unit test test, there you go. It's a unit testing framework. Now what does that mean? Well, with most programming languages, you want to test your code, you write programs to test your programs. I know it sounds confusing, but it's good software practice. And when you start working at companies, you'll realize that you can't just write code. If you're building a calculator, you need code to test what you just wrote. So if somebody else comes in to the project and they change something and it breaks a feature, that test is going to fail and say, oops, nope, you can't do that.
00:17:26.119 - 00:18:30.340, Speaker A: We can't release this to production because, well, you just broke a test. Very important foundation, then you want to learn about git and GitHub. This is GitHub, and GitHub is kind of like Facebook for programmers. It allows you to post your own code, to share code, to check out other people's code. But it's also a great way for you to save your code somewhere, not just on your computer and make changes to it where it shines and is when you start working with other people, so that other people can start working from one area on a project, so that instead of me working on Robo friends, I can have my friends working on Robo friends with me. And that's how companies work on our project with multiple developers. It's called version control, and it's a way for us to control what version of the software we should release to production and make sure that we are all working towards one thing.
00:18:30.340 - 00:19:04.746, Speaker A: Another interesting feature of Python is this idea of dunder methods, or dunders as I like to call them. Some people call them magic methods. This is something that not a lot of programming languages have. It's actually the reason that I think Python has become so popular, that is, with Dunders, it allows us to have a standard way to implement new features in Python. So learning about these magic methods is really, really important. And again, a very unique feature of Python. We want to start learning about advanced features like iterators, generators, decorators.
00:19:04.746 - 00:19:50.320, Speaker A: They all sound really, really cool, but they're quite different. Then you want to learn about things like Op versus Fp. What does that mean? Well, once our programs start to get bigger and bigger, we want to organize our code. We can't just write massive files with step one. Step two, all the way through step 100 of a task that a computer does, you want to start organizing your code into ways that make our programs more efficient, more readable, and more maintainable. And things like object oriented programming, which is op or functional programming, are what we call paradigms or ways to write code so that we can stay more organized. So you want to learn about object oriented programming.
00:19:50.320 - 00:20:46.092, Speaker A: That's when we start using things like classes, about inheritance, polymorphism, encapsulation, abstraction. Python has something called method overloading or method resolution order as well. And then functional programming can also be done with Python, using things like functions and assigning them to variables, or passing them into functions using pure functions and understanding the pros and cons of each and when to use what is really, really important for you to become an advanced Python developer. And then you also have to understand this idea of PEps that we have in Python. And Peps, well, Peps, if we go into pep index here stands for Python enhancement proposal. Again, Python is constantly evolving, constantly improving. So as a community we decide, hey, what should we do to enhance Python? So there's many peps.
00:20:46.092 - 00:21:10.050, Speaker A: You can see here, there's pep zero. But if we keep going, there's pep one all the way through. Well, quite a lot. And each one recommends how Python should be improved. And some of them are more important than others. For example, pep eight is the proposal for the style guide. So the way we write Python, for example, is described in this pep eight.
00:21:10.050 - 00:21:59.036, Speaker A: And this is one of the most popular peps because this is now used in things like versus code or Pycharm to make sure that our editors style our code properly so that we all have a standard way to write Python. Trust me on this, without something like this, everybody would just be writing their own version of Python, their own way of writing Python, and it would be a total mess. All right, the last part of the foundation is this idea of virtual environments. Why do we need them? Sounds really cool, virtual environments. Well, here's the thing. When you write Python, you write it on your computer and everything works great. But what happens when your program is now sent to a different computer? Will that still work? Not always.
00:21:59.036 - 00:22:25.880, Speaker A: And this is actually a big problem in the software world. With virtual environments, we can do these three things. One is a virtualization. That is, you make your Python environment specific to a project. So that means if I have three Python projects on my computer, I can have three different versions of Python. Maybe I have one project running with Python. Two, one project running with Python.
00:22:25.880 - 00:23:18.330, Speaker A: Three, I can do that through virtualization. We also want to make sure, like I said, that projects are reproducible, that is, if I'm using different packages or modules in my project with different versions. For example, if I'm using this funny jokes module, it's version 0.1. But what happens if they upgrade and there's now a new version that doesn't work with 0.1? So virtual environments allow us to make sure to define hey, this is the packages that my project needs, and these are the versions that it needs. And then finally, the last thing is that it allows us to have self contained deployable code. The easier it is for us to pack up our code from our computer and then put it on a different computer, the better it makes our lives.
00:23:18.330 - 00:24:07.466, Speaker A: So how can we do this with Python? Well, the most popular way of doing it is with a library called Virtualenv. If I go to pypy, type in Virtualenv, there it is, virtualenv. Now with the new Python 3.3 version, we now have a built in way to have virtual environments using v and v, which is actually a subset of bringing in the virtual environment library into the Python standard library. We then have things like Pipm. Pip env gives us extra powers where we can bundle together python and our packages, kind of like we do. Maybe if you're a JavaScript developer and we have NPM or yarn.
00:24:07.466 - 00:24:53.844, Speaker A: Pip env allows us to define what our project needs and all the versions that our project need. Now, in these previous ones, Virtualenv and Vnv, we usually have something called requirements txt that allows us to define what requirements our project has. With PiPM, you don't even need a requirements file anymore. We have things like poetry. And poetry is again a way for us to control the environment, but is geared more towards people that are creating packages on Pypy. So if you ever want to create a package on Pipey, then you might want to use poetry. And then we have something like conda that is used a lot when it comes to machine learning and data science to create individual environments.
00:24:53.844 - 00:25:23.638, Speaker A: And then finally Docker. Docker allows us to do something called containers and creating a specific container that our environments can live in. And we can deploy this container to anywhere in the world on any machine lots of ways. But probably the most popular ones are these two right here and maybe pip amp whoo. That was a lot. But once you get the fundamentals, once you build that Python foundation, we can do a lot of things with Python. Now.
00:25:23.638 - 00:26:06.992, Speaker A: Now, before we get into career options, let's talk about some of the popular libraries and computer science topics that we need to learn. Now that you have the foundation of Python, you also need to know some of the popular libraries that exist. You don't need to memorize them, you don't need to spend months and years mastering them, just know that they exist. There's obviously a lot more, but you can use many libraries based on your situation. And we're going to talk about some of them, also when we talk about career options. So these are by no means all of them, but these are some of the important ones. The first one is called six, and six is again a package that we can use.
00:26:06.992 - 00:26:53.976, Speaker A: And six allows us to work both with Python two and Python three. Again, Python two and Python three is a big topic when it comes to Python, and sometimes you need to work with a project that uses Python two and also with a project that uses Python three. So six provides utilities to wrap the differences between these programs and still work with them simultaneously. And the name six comes from, well, three times two equals six. We then have things like Tk enter, and TK enter actually comes as part of Python. When you install Python, it comes with TK enter as well. And what it does is allow us to write what we call GUI frameworks, GuI's or graphical user interfaces.
00:26:53.976 - 00:27:34.880, Speaker A: For example, you want to build a desktop app. Well, Tkinter provides buttons and windows that you can use that are cross platform. That is, you can build apps for Windows, for Mac, for Linux. So these visual elements are rendered or displayed on the screen using each of the operating system. So Tkinter lets you build visual interfaces. Now, Tkinter does look a little bit outdated in terms of the visuals, so there's also different options like Pyqt or even Kivi that have more of a modern look. And again allow you to build graphical user interfaces.
00:27:34.880 - 00:28:16.758, Speaker A: We then have things like requests. Requests are really important when it comes to web development. It allows you to use what we call the HTTP protocol on the web to make requests. And this is probably one of the most popular libraries that you're going to use if you're getting into Python, even if you don't want to become a web developer, you can use request to get data from APIs and many other sources. Then we have things like pillow. And pillow allows you to work with all types of file formats. For example, if you want to grab a couple of images from a folder and turn them into black and white, well, you can do that using pillow.
00:28:16.758 - 00:29:02.744, Speaker A: Then we have a really exciting library called Async IO. And Async IO just recently became part of the standard library. You can see here for 3.8. It is part of the standard library and it allows us to write something called concurrent code. And it gives us this ability to write async a weight into our programs just like this. Now, without getting too deep into it, this actually unlocks a lot of powers in Python, especially when it comes to web development, because asynchronous code allows us to have multiple users use our program at the same time and work much more efficiently. Again, it's an advanced topic, but definitely keep an eye out on this library.
00:29:02.744 - 00:29:48.622, Speaker A: Again, this idea of concurrent code, also called coroutines, is an important one when it comes to performance with Python. Finally, this is a fun one. With Python, you can do a lot of things, and one of the things you can do is, yes, even build games. So something like Pygame actually allows you to use Python and build real life games. You want to build a snake game, Tetris? Well, Pygame can help you do that. Now, there are all sorts of libraries that you can use, but this really depends on your individual need and what you want to do with Python. But the topics that are really important, that span all across programming languages, not just Python, but are super, super important, are these computer science topics.
00:29:48.622 - 00:30:49.858, Speaker A: They're so important that companies like Google, Netflix, Amazon, include them as part of their interview, because although at the beginning you might not think they're important, when you're a big company working with a lot of data, a lot of programs, a lot of inputs and outputs, your employees need to know about these in order to write efficient code. So some of these topics are like data structures. What are data structures? These are ways that we can organize data in Python. For example, we can use lists in Python, which is a data structure to organize things like numbers, things like strings into a list that is ordered. Things like objects or hash tables are data structures. And there's many ways that we can organize these data using data structures. And each data structure has pros and cons, and you want to use a data structure for its specific use, so that it's optimized for that specific use.
00:30:49.858 - 00:32:02.628, Speaker A: This is where you get into things like Big O notation and time complexity, space complexity, which tells us as inputs grow, how much time does your program take? How much space or memory does your program take? If you're Google and you have millions, billions, trillions of inputs, a good use of data structure versus a bad use of data structure can really cost you a lot. Then we have things like algorithms, and these are tools that really smart people have built over time to solve common problems like sorting, like tree traversal. And these are common, well known tools to use across different problems. For example, something like a Dijkstra's algorithm might be used on Google Maps to find the shortest path. You don't need to memorize all these algorithms, but you need to know that they exist. And maybe some of the more important ones, so that you know when you have a problem that is common, you can use an algorithm that has been optimized for a solution. Now, quick note about computer science topics.
00:32:02.628 - 00:32:50.732, Speaker A: I recommend that you learn them about six to one year into your career as a python developer, because they'll start to make a lot more sense once you have a bit of context, once you have a bit of experience. But trust me on these, these are important. And from 1020 years from now, these are going to be important. Maybe the libraries will change, but the fundamentals, the computer science fundamentals don't. So don't overlook these. If you want to become a senior developer, a master of programming, well, then you definitely need to know these. Now, one more thing before we get into career options, what we're all excited about, and this is called CI CD, or continuous integration, continuous delivery, deployment.
00:32:50.732 - 00:33:31.960, Speaker A: Now, when you start working for companies, you have multiple developers that you work with, multiple programmers, and what happens is you make changes to the code daily. Facebook makes changes to their facebook.com every single day. How do you make sure that somebody, one person in the company doesn't break facebook.com? and now you can't access Facebook for an hour, and that means a lot of money for Facebook. Well, you use something like CI CD. These are systems in place to put the code that you just wrote on your computer to production to a server somewhere in the world that actually has Facebook deployed.
00:33:31.960 - 00:34:41.406, Speaker A: And CI CD allows us to have multiple people working on a project and have a pipeline or a system in place so that when we add a new feature or fix a new bug, those things get tested in all sorts of environments, gets reviewed by other developers, code gets linted, gets prettified, all these things to make sure that we go from development all the way to production with hopefully no issues. And there's tools that allow us to do this. Things like Travis CI Gitlabci, Circleci are popular tools that you can use with, let's say something like GitHub to make sure that we make changes to the code. They run all these tasks for us to test the code. We can even use something like Jenkins. And Jenkins is a very popular one with Python programmers, where you can actually run your own server and run all these tasks that you write in Python to test your code, to bring your code from your computer all the way into production. Don't spend too much time on these.
00:34:41.406 - 00:35:05.078, Speaker A: Most of the time when you start working at a company, these things are set up, but it's important that it's a big part of companies, and you will encounter it. And you'll have to work with these pipelines if you want your code delivered in production. All right. All right, everybody, the most exciting part. Sammy the seaweed. Wait, not seaweed? Sammy the seahorse. Sorry, Sammy.
00:35:05.078 - 00:35:36.488, Speaker A: Didn't mean to offend you by calling you a seaweed. Not that there's anything wrong with seaweeds. All right, I'm getting off track here. Let's focus on career options. And this is where the exciting things happen. With Python, you can do a lot of things, and maybe if you're learning Python, you don't know what you want to get into. The important thing is you start with the fundamentals and then try your hand at each one of this and see if one of them gets you excited, because that's a good way to go about things.
00:35:36.488 - 00:36:17.820, Speaker A: If something excites you, that means you'll keep learning. That means you'll keep practicing it, and that's how you get good at things. So these are the career options that we have with Python. Now, obviously, there's many other things that you can probably do with Python, but these are the main ones to keep an eye on to get you started, because the goal of this roadmap is to get you hired as soon as possible. Because as soon as you start working, you start working with others, you start working on actual real life code. That's when you really gain experience. You can watch all the YouTube videos in the world, take all the online courses in the world, but nothing will teach you as well as a real life work environment.
00:36:17.820 - 00:36:47.074, Speaker A: So let's get started with career options. Let's talk about career options. And the first one we're gonna start off with is web development. It's one of the most popular. It's exciting. So if you want to get into web development, what sort of things should you learn? When it comes to Python and web development, it's all about what we call the backend or working with the servers. And as a matter of fact, you can use any programming language on a server.
00:36:47.074 - 00:37:23.560, Speaker A: With Python, though, there's two libraries and frameworks that are dominant. You can either work with Django or with Flask. Django is what we call a high level web framework. That is, it comes with all the tools that you need to build professional web apps. It follows something called the MVC pattern, which is the model view controller pattern. And you can work with databases, you can create restful APIs. It has all the tools you need to build web apps.
00:37:23.560 - 00:38:20.252, Speaker A: Now, Django is a big framework so you probably will spend maybe a month to understand some of the main functionalities of Django. On the other hand, Flask, which is equally as popular I actually prefer Flask to Django, is more lightweight. It's what we call a micro framework, and it's very similar to something like Express. When you work with Node JSDem, it's very simple to learn and it doesn't have as many features as Django, but you can combine and add different libraries with Flask to make it just as powerful. And Flask is awesome once again to build something called Rest APIs. Now the other big part of web development that you really need to learn, and this is a fairly new development, is this idea between ASGI versus WSGI. Now originally WSGI was the dominant player.
00:38:20.252 - 00:39:42.180, Speaker A: It stands for web server Gateway interface, and it's essentially the standard of how Python web applications are deployed. It's like everybody agree that hey, just so we don't have all these code bases working differently, let's just all agree that using the WSGI, this is how we're going to deploy Python web apps. So we standardized the process of these various frameworks like Django and Flask and all the others to follow this format. Now this format was great and all, but it didn't allow us to build something called asynchronous servers. You see, in the JavaScript world, which is big in web development, things like node JS allowed us to do asynchronous requests, which meant that we can have concurrent or users at the same time sending requests to a server and work really, really fast. And with things like HTTP two and websockets being used on the web, it became more important that we have these asynchronous tasks. So instead of having Django and flask fall out of fashion to keep up with the times and the web, you now have ASGI, which allows us to do these asynchronous tasks.
00:39:42.180 - 00:40:22.774, Speaker A: For example, Django just added asynchronous support. You can see it's new in Django three, and it's still an experimental feature. By the time you watch this video it might become standard. And you can see over here that we can just simply enable it by saying django allowasync on safe. It's named unsafe because it's still new. And again, remember that async IO library that I talked about? Well, this is similar to that. It allows us to use async await in asynchronous tasks with web development for us to work and build a more efficient web server.
00:40:22.774 - 00:40:57.976, Speaker A: This is still early stages, but keep an eye on this if you're getting into web development. The future of the web development in my opinion, is all about asynchronous requests. Oh, and by the way, with flask again, you can do the same thing using something like salary, which is a distributed task queue. It sounds more complicated than it is, I promise. All right, so that's web development. The other thing that we can do is something called web parsing, scraping, crawling. We're still on the web, but on the web there's many ways for us to gather information.
00:40:57.976 - 00:41:36.644, Speaker A: One is we can actually own the data. We can have data in databases and access them. And maybe we are Facebook and we're using django. Well, I can have my database with all the users, and Django can speak with the database, retrieve that information and then send it to the browser so that I can see my user information on Facebook. Another way is we can have websites that offer what we call APIs, ways that computers give access to information. But then there are times where computers maybe don't access or don't give us access. Maybe we don't own the data.
00:41:36.644 - 00:42:27.940, Speaker A: That's when we start doing things like web scraping. That is me going on a website and scraping the data off that website. Now there are some issues with legalities here. You'd have to usually check something called robots TxT to see what you are and not allowed to scrape. It's a bit of a gray area, but it's also a very fun, exciting place. At the end of the day, companies like Google do exactly that. Google crawls the Internet to figure out, hey, if Andre searches for fish soup, what sort of websites should we send him? And the only way for Google to find out what websites they should display for me is to crawl all these websites, figure out what each website is about and pick the one that's best suited for fish soup.
00:42:27.940 - 00:43:14.442, Speaker A: Speaking of soup, one of the most popular libraries when it comes to web scraping is called beautiful soup. And beautiful soup, even though it looks kind of old here, this is their documentation site, allows you to do web scraping, and this is probably the most popular tool to use. But if you want to use something like a framework that is a full feature tool to do scraping, there's something like scrappy. And again, you can use this framework that gives you all the tools necessary to do web scraping. All right, what about this thing called test automation? Let's have a look. Remember the time when the fundamentals where I said testing your code is important if you are paying attention. Testing right here.
00:43:14.442 - 00:44:16.390, Speaker A: Well, test automation is similar to that. You see, companies need people to test code to make sure that if an app gets an update, that there's some sort of tests in place to make sure that nothing broke. As code becomes bigger and bigger and bigger, a place that you change on a file might affect another place in a different file. So test automation is all about that. And it's called automation because we can use software like Python to automatically test things, to test our code, our apps, so we can write test scripts or using automation testing tools so that our machines test our code for us. It sounds very meta, doesn't it? This is often used when there's repetitive tasks like testing to see if an app logs a user in or out. If we are going to test that 50 times a day, having a human do it well can become not only boring, but also very time consuming.
00:44:16.390 - 00:45:00.344, Speaker A: So when it comes to testing, I talked about unit test, which is part of the Python standard library. You also have something that's probably even more popular, called Pytest, which you can get on the Python package index. That gives you a lot more options for testing. And then we have more specific frameworks and tools that we can use. For example, when it comes to the web, selenium is extremely popular. With selenium you can do something called browser automation. Remember that thing I said about testing a user? If they can log in or log out of a web app using selenium, we can spin up a browser and actually write code that essentially mimics a user.
00:45:00.344 - 00:45:45.504, Speaker A: To test that certain functionalities work. And again, you can use Python with selenium to write Python scripts that run certain tasks on a browser. For example, uploading your post a thousand times, you can do that with selenium, and then you can even go higher and use the robot framework. And the robot framework is an automation framework. It comes with all the tools necessary for you to do automation testing. And if you're an automation engineer or a testing engineer, you're definitely going to use the robot framework. Finally, we have, well, not finally, because we have these two, which are going to be really exciting, but we also have something called scripting.
00:45:45.504 - 00:46:31.444, Speaker A: Now, scripting is more of a general term. Scripts are usually considered small chunks of code, small little tasks that we want a computer to perform. And we usually use languages that are easy to write, like Python, instead of something that's really low level, like c, to write scripts. And when it comes to scripting, it's all about telling a computer what to do and doing tasks that perhaps get automated. So if you're a Python developer, you can become a system administrator, you can work in DevOps and pretty much anything. The word software engineer is exactly that. You're engineering software, you're able to write code in a way that machines work to be more productive.
00:46:31.444 - 00:47:23.326, Speaker A: You are able to help a company be more productive, maybe increase revenue, maybe decrease expenses by writing software, by using a scripting language like Python. Now, system administrator do a lot of automation, and they usually build machines that a company uses for daily management. So they work with a lot of configurations with the computer system for the organization and business. So they use tools like Ansible, for example, which are configuration management tools, and Python to make sure that these computers are running smoothly for a company. Then we have DevOps. And DevOps is kind of like an in between a system administrator and a developer that builds applications. And it's more of an idea than an actual role.
00:47:23.326 - 00:48:37.968, Speaker A: It's a bit of a buzzword, but DevOps helps get your code that you write all the way to deployment to production. They help with the infrastructures and they often work with cloud providers like AWS, that is, by Amazon or Microsoft Azure, or GCP by Google. DevOps is all about making sure that as a company, the code that the programmers write are deployed, are put to the user without any errors, without any issues. Despite this code, living in computers all over the world, in servers, in clusters, and using tools that are modern like kubernetes to make sure that they're able to manage all these computers. So this idea of DevOps is all about, hey, let's make sure that all the programmers working together can achieve a goal smoothly. And a sysadmin or a system administrator is more about, hey, let's make sure that these computers that our companies are running are working properly. Now, you don't really need to worry about these too much, but it's good to know that when it comes to Python, you can definitely enter these roles as well.
00:48:37.968 - 00:48:58.740, Speaker A: You can do anything. All right. All right everybody, the last final two pieces. And they're super exciting because, well, they're very popular and trendy. Right now we have data science or data analysis and also machine learning. We'll get to machine learning at the end. Let's talk about this one first.
00:48:58.740 - 00:49:44.710, Speaker A: So the popularity of Python in the last couple of years can probably be attributed to these two fields. Python is pretty much the standard when it comes to these fields. You need to know Python. Now, data science or data analysis is all about learning from data. As companies have more and more data, more information about the users, the people that can understand this data that is so overwhelmingly large that no human can just sit there and read through. We need people like data scientists and data analysts to make sure that they can give us information about the data. And this data can be used to make business decisions.
00:49:44.710 - 00:50:38.960, Speaker A: And that's all it is making meaning out of data is all a data scientist does. Now, when it comes to being a data scientist or a data analyst, these are the most important libraries to use. One is numpy. And Numpy right here, although doesn't look exciting, is essentially a way for us to work with arrays. It's an array processing package, and specifically for multi dimensional arrays or matrices. Why do we care about working with arrays? Why did I even put this up here? Numpy is probably one of the most important libraries, and multidimensional arrays are also sometimes called tensors or ways to represent multidimensional arrays are with tensors. And this tensorflow, that's where it comes from.
00:50:38.960 - 00:51:25.330, Speaker A: Numpy allows us to work with data, especially when it comes to machine learning, but also with things like images, in a really fast way. It's actually implemented in a language that is not Python, but works with Python so that it's really performant. We have things like pandas, again, a super, super popular tool to work with data. So data analysts use pandas and use something called data frames in order to have all this data and understand what it does. So it's a manipulation tool. It allows you to change data, to look at data, to modify data using Python, almost as if you're working with Excel. There's also scipy, which is for scientific computing.
00:51:25.330 - 00:52:01.968, Speaker A: Then there's bokeh, Seaborn, and Matplotlib. And these are all visualization libraries. So I can create charts and really interesting visual things with these libraries to show data that we've analyzed, to, let's say, management. And then there's a field of data engineering. And these are the people that work with what we call big data. That is, companies like Netflix, like Amazon, that have so much data that cannot be stored just on one computer. And that's when we start learning about tools like Hadoop and Mapreduce.
00:52:01.968 - 00:53:00.570, Speaker A: Hadoop is a way for us to store really large amounts of data. And Mapreduce are what we call etls, or extract, transform, load. We use Mapreduce to transform the data in some way and load it in a different part of company. Now, I won't get into all the details here because there is a lot, and as you can see, Apache, which is an open source foundation, is involved in a lot of these things like Kafka are becoming really popular. They're a distributed streaming platform. We have things like Apache Spark, which is actually, most of these work with Java, but they have their own version of Python that you can work with. For example, Apache Spark, which lets you work with data and is a faster version of using Mapreduce, has something like Pyspark, which allows you instead of Java to work with Python.
00:53:00.570 - 00:53:45.888, Speaker A: You have things like Apache Hive, which lets you do SQL statements on your data that, let's say, lives in Hadoop. But again, you can use the pypy package and use PI hive. So as a data engineer, although you can use things like Java and Scala, you can also use Python to use all these tools. And all these tools, what they do is they collect from all these computers that companies like Amazon own around the world. They let you extract that information. You can transform it using something like Apache Spark or Mapreduce, and then you're able to analyze it. This is a big one.
00:53:45.888 - 00:54:34.780, Speaker A: It's a fast changing field with a lot of exciting new tools that is really hard to keep track of. And really you need a few years of experience before you even get into this field. So again, that's why I put it here. Usually you want to start out as a data analyst or maybe a data scientist and then maybe get into data engineering, but these data engineers usually write configuration files or they just write scripts using Python. All right, everybody, favorite topic, machine learning. Because it sounds so cool, doesn't it? Let's talk about machine learning. And when it comes to machine learning, again, just like data science, you need to know Python, because all the popular tools right here use Python.
00:54:34.780 - 00:55:31.752, Speaker A: Now, unlike a data science person, which usually looks at data, tries to understand data, extracts data from some way to create meaning out of data. A machine learning engineer usually uses data to create what we call models. Models are essentially functions that we create using this technique called machine learning. And using these tools that allow us to do something that perhaps a human can do, perhaps looking at user information and deciding based on that user information that there's so much of that we should do a sale in April because that will increase revenue. I don't know, just making stuff up. But that's what machine learning is, using data to create these models that provide business value. And this is a new field.
00:55:31.752 - 00:56:13.414, Speaker A: It's a very complex field, but these libraries here allow us to do machine learning with Python in a very fast way. As a matter of fact, the hardest part of machine learning is actually having that data, actually accumulating that data and cleaning that data, instead of actually creating those models, because most of these libraries help you create models really fast. Well, kind of. Now, the first one I'll talk about is Pytorch. Pytorch is right here. It's what we call a deep learning framework, and it's a direct competitor of Tensorflow. As a matter of fact, Pytorch was developed out of the Facebook AI team, and Tensorflow was built out of the Google AI team.
00:56:13.414 - 00:57:17.658, Speaker A: And both of these libraries are probably two of the most popular ones when it comes to deep learning. And Tensorflow two just came out, which has made it easy to use, like Pytorch. Pytorch is used a lot right now in academia and in research, and Tensorflow is probably used a lot more right now in production with developers and machine learning engineers. But both of these are equally important, and they're both kind of competing with one another. Now, Pytorch makes things really, really easy to do, and then Keras is actually what we call a high level tool or library that you can use on top of Tensorflow to make things easy for you, just like Pytorch is easy to use. So Tensorflow two is a little bit hard to get, but you can use keras on top of it, or you can use Pytorch, which again, you can do similar things just like Tensorflow, but using a different sort of API. But what about this one, Scikit learn.
00:57:17.658 - 00:58:35.250, Speaker A: Well, before we get into Tensorflow or keras and Pytorch, and doing something called deep learning, you can actually start off building your own machine learning models in just a few lines of code using this very popular library, Scikit learn. And Scikit learn is all about machine learning and Python. And you can see here, it's built on numpy Scipy and Matplotlib, which we've used before. And Scikit learn actually has pre built functions for you to run, to actually do things like classification, regression and clustering, which are all used in machine learning. So the path you'd usually take is to start off by learning a bit about numpy pandas, Scipye and Matplotlib. And once you have an understanding of that, you can actually start using Scikit learn to perhaps use your data that you've extracted with pandas, and use scikit learn to create a model, maybe a machine learning model that classifies dog breeds. It's not as hard as you think, and a lot of the work actually involves just reading the documentation and going to examples APIs and just understanding what these libraries give you.
00:58:35.250 - 00:59:36.480, Speaker A: You see, at the end of the day, being a programmer is all about solving problems. It's not about memorization and understanding every single syntax, every single trick to Python. Whether you're learning Python or any programming language, your job is to use computers, to use machines to solve problems that would take a human a long time. That's what machine learning is. That's what scripting, test automation, web scraping, and web development is. We're able to solve problems, to create business value, to create personal projects using code, using a way for us to communicate with the machine. And the reason Python is so popular is because of this big landscape, because it offers so many career options, because it has so many tools, libraries and frameworks for us to use.
00:59:36.480 - 01:00:12.566, Speaker A: The possibilities are endless, and hopefully you're not too overwhelmed. The good news is that you just have to pick one of these. You just have to learn the foundations, get a job, start learning, and then find out from there what interests you. By the way, all of these can be learned online for free. You don't need to go to college for it. If, however, you want a little help along the way, this is what I actually teach. Among web development, I also teach computer science topics like data structures and algorithms.
01:00:12.566 - 01:00:44.480, Speaker A: I also teach Python from scratch, and also machine learning and data science so that you have someone along the way that kind of shows you the ropes. But by no means do you need to take those courses. You can just do this yourself, just like I learned everything myself. It's all about learning the right things, learning how to solve problems, and most of all, having fun along the way. I'll see you in the next one. Thanks for watching. Bye.
