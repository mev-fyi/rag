00:00:04.360 - 00:00:53.630, Speaker A: So you want to level up your CSS skills? Well youve landed on the perfect video. This crash course led by Jacinto Wong will teach you the fundamentals of CSS as well as lay the groundwork for advanced styling. Jacinto brings over a decade of experience as a senior developer and is a self taught expert who understands the struggles beginners face, which is why he made this crash course completely accessible to those with no prior experience as well as more intermediate developers. Now you might be wondering if you need to know HTML before diving into CSS. And the answer is yes. Which is why weve added a couple sections to the beginning of our CSS boot camp course dedicated to learning HTML. But for this crash course specifically, we will focus exclusively on CSS and skip over those first few sections.
00:00:53.630 - 00:01:53.250, Speaker A: Now, for my newbies out there that would have liked those HTML sections to have been included, fear not. We have a completely free crash course on the basics and fundamentals of HTML in CSS taught by ZTM founder Andre Nigoy. I'll leave a link to that in the top right hand corner as well as the description down below. Once you complete this crash course, make sure to check out Jacinto's complete CSS bootcamp course available on zero two mastery. His full bootcamp, which you can find in the top right hand corner well as the description down below, will take your CSS skills to be in the top 10% of all developers. His full bootcamp also includes over 100 exercises and projects that will get your hands dirty and actually teach you how to apply what youve learned. One last thing, if you enjoy this crash course and find it helpful, we would greatly appreciate it if you would show Jacinto some love by hitting that like button and dropping a comment with your thoughts, questions or feedback down below.
00:01:53.250 - 00:02:36.690, Speaker A: Alright, that's it from me. Let me hand it over to Jacinto so you can start mastering CSS. Enjoy. Hello and welcome back. So without further ado, we are finally ready to dive into CSS, the whole point of this course. So to begin with, an introduction to CSS. So what is it? CSS stands for cascading style sheets.
00:02:36.690 - 00:03:46.334, Speaker A: These are used to control the presentation and design of web pages. It works alongside HTML, which is the structure, and JavaScript which is the functionality. As a front end developer, it is very important to understand all three of these and how they work together to create an engaging user experience. Without understanding the structure of HTML, it would be very hard to explain CSS. Show what CSS can do because you need to actually build off of something that already exists, whether that is a paragraph element or an h, one element or something like that. You actually have to have some kind of content to be able to add styling to that content. JavaScript, on the other hand, can be used for functionality, but it can actually be used for other things, like it can actually create HTML, it can add styling or remove styling in certain conditions.
00:03:46.334 - 00:04:38.204, Speaker A: There's all kinds of ways that JavaScript will interact with CSS as well, and we will dive a little bit into JavaScript as we get deeper into the course. Why is CSS so important? So what it does is it separates content and design. So as I mentioned, HTML is for content. So this is all of your text, your media, etcetera. And CSS is to make all of those things look great. CSS is also important for the sake of reusability. So there are many ways that you could have different elements, different types of elements, they have some styling built into them.
00:04:38.204 - 00:05:43.900, Speaker A: But let's say that you wanted all of the text on your page to be a specific font and not just the default font. This allows you to style every bit of text on your page with just one CSS selector. It also allows you to style multiple pages with a single style sheet. There's lots of ways you can essentially consolidate styling for your entire website, even if it's many pages, and just use one single CSS file in order to do that. And lastly, it enhances user experience. So having the ability to have your website be responsive, meaning that it looks as good on a monitor or a laptop, or a tablet or a smartphone. And this is very important nowadays because more and more people are accessing websites, for example through smartphones, which obviously have a very different screen shape and size and orientation from traditional laptop and monitor displays.
00:05:43.900 - 00:06:49.548, Speaker A: It allows us to add in animations and other types of ways that reflect the user actually interacting with a page and feeling like that page is interacting back with them. So that enhances our user experience, not to mention when something is more aesthetically pleasing, it looks more professional. Think apple companies like that, that pride themselves on design. Okay, so let's dive into the basic syntax. So the basic structure, CSS starts with a selector, and then we have our curly brackets, and then we have a property, and then it's separated by a colon, and then we have a value, and then we have a semicolon, and then we have another curly bracket. So this would be a case where we just have one property and one value. So you can see in the example here, my selector is selecting every h one element.
00:06:49.548 - 00:07:24.560, Speaker A: So this isn't actually using a CSS class, this is a selector just for an element. So we'll actually select every h one element. And you can see in this case we actually have two property and value pairs. So the first property here is color and the value here is blue. And then we also have the property font size, and then we have a value of 24 pixels. And when we combine that, this is what that would look like. So we have an example of an h one here that is blue and it is 24 pixels.
00:07:24.560 - 00:08:10.280, Speaker A: So selectors can target specific HTML elements to style, but there's more than one way that you can target different elements, but essentially you're always targeting some kind of HTML element in some way or another. There's more than one way that you can do that. And then properties are aspects that you can modify. So in this case we're changing the font color. So just default color is always referring to the font. If we want to change the background color, or if we have something like a container or a div, we would use the background color property. And of course our value can be many different formats as well.
00:08:10.280 - 00:09:03.892, Speaker A: We can just write out the color like we have here, or there's many other ways to do that, and there's many other properties that we will explore later on in this module. But these are the basics of how CSS works. So next we're going to talk about the three main ways that we can add CSS. So the first option is an external style sheet here. So this is what you would normally use in any type of project that is even a small, a medium and definitely a large project. So as we get further into the course, this is exclusively the way that we're going to be actually referencing our CSS. So this actually exists within the head of our HTML document.
00:09:03.892 - 00:09:51.926, Speaker A: So this is a meta tag, it is a link element, and you can see that we have an href here similar to our anchor tag, but then in this case it's actually targeting a local CSS file. You can say we have the CSS extension. So this is what we'll be using for most of the course. We haven't gotten that far yet, but this is the most popular way in most projects that CSS is referenced. The other option is internal styling. So this is useful for smaller projects. So you can actually put a style element within your head tag of your HTML document.
00:09:51.926 - 00:10:32.136, Speaker A: You can put it within the body. Basically it is just an element, and then within that you can see that we actually have our CSS selector and property and value. And then the last way is inline styling. So this is directly on the HTML element. So you can see here that we have our paragraph element and then we are actually using the style attribute. And you can see that we're passing in the color property and our green value here and then a semicolon. And then I could actually write more property value pairs after that if I wanted to.
00:10:32.136 - 00:11:19.002, Speaker A: And that is the third main way you can reference CSS. Okay, now we're going to dive into CSS selectors. As I mentioned previously, there are many ways that you can use selectors. The basic options are here we have just selecting based on an HTML element. So you see that we just have the letter P that is going to target every paragraph element and that is the type selector. Next we have the class selector and that is going to target a specific class. So that would take place when we have an element that is using the class attribute.
00:11:19.002 - 00:12:04.380, Speaker A: So it would have the class attribute of highlight. In order to target our class selector, we're actually putting a period first and then we are targeting our class selector here. And then lastly we have the option of using an id selector. So again our element, our HTML element would have the id attribute of header. And to target an id selector we are going to use a hashtag to do that. Next, I want to talk about CSS cascading and specificity. So there are a few rules about which style wins.
00:12:04.380 - 00:13:37.862, Speaker A: So if I had two separate CSS documents that I was referencing in my project, if in the first document I had an h one type selector that I was targeting and I was setting the color to be white, but then in that second document, or even within the same document, if I just so happened to have the same type selector for h one a second time, that is the value that would win. So in this case, because this one is referenced, second it's referenced at the end, the color black rule would win on my h one type selector. And so the rules of specificity are this is the way that they would be referenced in terms of hierarchy. So first we have type selectors and that would be overruled by a class selector and then that would be overruled if we had an id selector, and then even that still would be overruled if we actually had an inline style. So we'll get more into examples of this in the next few lessons. And then, as I mentioned, for cascading, whichever style is last, when the specificity is the same will be applied, including when there's more than one style sheet present. So that is what I was explaining here.
00:13:37.862 - 00:14:16.240, Speaker A: We have type selectors in both cases, so whichever one is last, that is the style that will be applied. This will definitely make more sense when we actually dive into some examples. So those are the basics, but I want to just explain some of the various things that we're going to be covering throughout the course. There is a ton of content coming up and here are a few things you have to look forward to. So the first one is responsive design. This is very, very important in this day and age. This helps make your projects look good on any device.
00:14:16.240 - 00:14:47.940, Speaker A: Custom fonts and color. This is critical to master, to be an expert level web designer, very important to master these things. This is something that I feel like is often overlooked. CSS frameworks. So there are some options that will help you set styles without having to write everything from scratch. So we'll get into some of those frameworks as well. Though it is good to know how to do most things from scratch just to have that knowledge base.
00:14:47.940 - 00:16:16.146, Speaker A: We're also going to look at layout frameworks, which are very important. So learning CSS grid and Flexbox will help you to make multidimensional layouts that are also responsive. We're going to touch on transitions and animations, so this will help you create dynamic websites that feel more alive. And we're going to touch on some advanced techniques. Things like preprocessors like CSS will allow for better organization and scalability, and there's going to be much, much, much more throughout the course, including a lot of really, really cool projects. All right, so let's dive in, let's get styling. Alrighty, so this module is going to be focused more on the fundamentals of CSS rather than diving straight into styling one of our previous projects, we want to build up a knowledge base of how this is all working and coming together, and we're going to do that by starting in this lesson, diving more into CSS selectors.
00:16:16.146 - 00:17:06.878, Speaker A: So we're going to start by looking at this great resource. Again, we're looking at a Mozilla developers resource here, and it is talking about CSS selectors and combinators. So as I mentioned, they're used to define a pattern of elements that you want to select so that you can then apply the CSS rules to them. Combinators define the relationship between selectors. So you could actually use multiple selectors in order to be very specific about which elements you want. So for example, you could target elements by type, but also by attributes by state or even relationships to other elements. So there's a lot of combinations of these.
00:17:06.878 - 00:18:14.804, Speaker A: There are over 80 selector and combinator options that you can put together and they're grouped into a few different categories. We're going to start out with learning about the basic type. So this includes just targeting a type or a class or an id. These are the main basic selectors. And you can see that we have some example here of four simple selectors and one compound selector. So this first one here that is using an asterisk essentially actually means we're selecting literally everything on a page and everything on the page that we could apply this font style italic property and value to it will be applied. And then below that you can see we're targeting the paragraph element with a color red, the class of my class with the text decoration underline, and my id with the font family of monospace.
00:18:14.804 - 00:19:18.470, Speaker A: And then below that we have a compound selector which is targeting any paragraph element that has the class, my class and also the id of my id. So you can see we have our HTML here. This, all of this is going to be targeted by our asterisk selector. So you can see that the result everything is in italic. But you can see here that the only one that is a p element with the class, my class and the id of my id is this first element here. So you can see that that's why this one has our text decoration underline, it has the font of monospace, and it is also reduced because we have the color red on all paragraph elements. That is why our second element here is also red because it is targeting all paragraph elements.
00:19:18.470 - 00:20:02.930, Speaker A: And then the only other one that it matches is this universal one which is making it italic. So that is why that is italic. And I think that that is a good general overview of how type selectors work. And we even had an example with a compound selector here. Combinators make it a little bit more complex and allow you to select things in a bit more of a specific way so you can select based on descendants or children. So that is why, as I mentioned previously, how we nest elements is very important. It can be by siblings, things like that.
00:20:02.930 - 00:21:08.162, Speaker A: We're not going to dive fully into this quite yet, but I do want to just touch briefly on pseudo class selectors because we did talk about this a little bit during our form validation lesson. So pseudo class selectors, there are over 60 different pseudo classes. These are simple selectors as well, and they are prefixed with a colon. So they start with a colon, and they allow for the selection of elements based on state information that is not actually in the document tree. So this is used on elements based on their state. For example, if you have visited a link that would change the state of that link by default it turns purple instead of blue. And similarly we saw this with our invalid and valid pseudo classes for our HTML forms.
00:21:08.162 - 00:21:56.622, Speaker A: So we'll dive more into pseudo class selectors later. But I just wanted to touch on them here because they do fall under the category of selectors. Next I want to briefly touch on another resource from w three schools. So this kind of consolidates the selectors into a reference document that gives you a great way at a glance to see all the different combinations that you can have with selectors. So this includes simple selectors as well as some of the combinators that we saw here with the symbol description and an example as well. Well, so you can see here that there are a lot of different selectors. We have our simple compound selectors as well up here.
00:21:56.622 - 00:22:32.910, Speaker A: We have our descendant child sibling combinators down here. And then we can even target things like attributes and we can grab attribute values. So if it starts with something, if it ends with something, if it contains something, things like that. And then we also have a list of references for our pseudo class selectors. So even something like a disabled input we can target. Again. We're going to dive more into pseudo class selectors later, but you can see that there are quite a few different types of pseudo classes as well.
00:22:32.910 - 00:23:27.920, Speaker A: And I just wanted to show you also this codepen example that basically uses all of these attributes up until attribute value here. Not getting into pseudo class selectors, but it is going to be another resource to actually visualize basically everything you're seeing here in this reference. So if we go over here we can see that to start with, we have our HTML here. Basically it's all a bunch of text and I actually have the CSS here, I had just deleted it, so I'm going to just do command z to bring it back. And you can see that obviously with CSS that looks night and day different, it looks so much better. I'll just touch very briefly on what's going on with this document. So we can see we'll get more into properties and values again in the next lesson.
00:23:27.920 - 00:24:13.094, Speaker A: But you can see that we're using the body selector. In the case of codepen, everything falls under that body selector. So essentially this is like using that asterisk to select everything and we're setting the font family. So we've changed from that default font. We're setting the background color to a nice light gray color. We have some padding, so we have this spacing all around on the top, the bottom, the left, the right, and then below we see an example of the commas which are separating selectors for multiple different things. So you can see we're selecting all divs, all paragraph elements, all anchor elements and all unordered list elements.
00:24:13.094 - 00:25:06.214, Speaker A: So you would do this if you want to apply the same styles to all of those elements. So in this case you can see that everything has the same border. It has a margin, which is the space outside of each container. It has padding, which is the space inside each container as a border radius which rounds the corner as box shadow, which we'll talk about more in the next lesson. Things like that I'm not going to dive too deep into this as a reference, but you can see that the text actually kind of explains what each one is doing. So you can see that there's a lot of different examples of how selectors can work with combinators, and all of these at the bottom are related to attributes. So I'll let you explore that reference on your own.
00:25:06.214 - 00:26:10.280, Speaker A: It will probably make a lot more sense as you learn a little bit more about CSS and you dive more into complex selectors. To be honest, you could probably get away with just understanding that you can separate by commas to target multiple things with the same set of property values, and you basically could get away with just providing a unique CSS class attribute to different elements and just do that. But it is good to also know maybe even some of just these simple combinations here of different selectors. But you don't have to dive that deep into it if you don't want to. It depends on the code that you're working with. If you're working with someone that is using more complex selectors, it is good to know that there is a lot of depth, and pseudo class selectors can be very helpful in certain cases. But again, we'll dive into that more later on in the course.
00:26:10.280 - 00:27:04.160, Speaker A: All right, that's it for this one. In the next one we're going to dive a lot deeper into our properties and values, which is actually what gives us the ability to change how things look. Alright, ill see you in that one. Bye for now. Ok, so in the previous lesson we were talking about CSS selectors, and as you could clearly see, there was a lot of depth to how CSS selectors work. Next we're going to be talking about properties and values in CSS. And to no surprise, there is a lot of depth to this as well.
00:27:04.160 - 00:27:43.396, Speaker A: We're going to try to start as simple as we can. Don't worry if you feel overwhelmed. The more that you practice and experiment, it will all start making more and more sense. So we have an example here that I've already created. This is just for demo purposes, so you don't have to worry about creating this code. It just goes to show how dramatically we can change our original text just by changing these three properties and values. So starting with font size, we can drag this input range and we can make the font size much bigger.
00:27:43.396 - 00:28:26.320, Speaker A: We can change the font color using the color property. You can see I can just drag on my color input and let it go. And you see that it changes the font color. And then we can also use this other color input to change the background color. And you can see that with just changing these three property and values, we've created something that looks dramatically different. Next, I want to look at a resource on w three schools, which is going to actually show us a list of CSS properties. It is also searchable, so if we scroll down, we see that we have them here in alphabetical order.
00:28:26.320 - 00:28:53.394, Speaker A: There are a lot. So I'm just going to scroll through just to show you again, there is a ton of complexity. There is a ton of different properties that you can adjust and keep in mind. These are actually just the properties and they don't even include all the combinations of values that you can add. So for example, if we. Okay, let's get to the bottom first. Okay.
00:28:53.394 - 00:29:23.916, Speaker A: There's a lot of them. Don't expect that you actually need to memorize all this. There are a million references you can use and you can google to try to see if there's a way to do something with CSS. That's what I did when I was first learning. But for example, here, let's say that we have our with property. So a value could be a pixel value, just like we had with our image elements before. So I could set it to something like 100 pixels.
00:29:23.916 - 00:29:57.670, Speaker A: I could also use a percentage instead. By default, it has a value of auto. There are a lot of different values that we can add to all of these properties. There are so, so, so many of them. We're not going to dive too deeply into like going one by one because I think that would be very, very overwhelming. But I just wanted to show you this reference in case you do want to see what's available. And then also see a description of what that property is actually controlling.
00:29:57.670 - 00:30:40.220, Speaker A: Next, we're going to go to another resource here that is at the Mozilla developer website. Again, and this has a similar thing. Again, it is alphabetical indexed. So we have another list of all of the different properties. And again, if you click on these, in either of these pages, they will go into more detail. So if it clicked on something like border bottom, it would have a little demo here. And basically this just means we're applying a border on the bottom of an object and you can see that we can actually click and play around and see different types of borders.
00:30:40.220 - 00:31:23.990, Speaker A: So these are adjusting all of the values. You can see they're all using border bottom, but they can all look very different. So basically there's almost an infinite number of combinations of properties and values. So it's important to just understand the basics and the fundamentals first and then you can experiment and really dive in and make things your own. With that in mind, the next thing we're going to do is actually start writing some css. So we're going to go over to codepen here and I have a starter template that I'm going to link within the course. You can see that we already have our HTML here.
00:31:23.990 - 00:32:19.310, Speaker A: We have it divided into a few different sections. So starting out we're going to experiment a little bit with text related properties and values, and then we're going to look at container related properties, size and position properties, and transition properties as well. You can see for now that we just have plain text and it has zero styling whatsoever. So let's start by adding some css. The first thing we're going to do is we're going to target our body with the element selector. So we're just going to type out body and then we're going to space and then we're going to use the curly bracket on your keyboard. So when I type out this curly bracket on the left side, it will actually automatically create the closing bracket as well.
00:32:19.310 - 00:32:54.870, Speaker A: And then I can just go ahead and press enter and then I'm automatically creating that indent. So now I'm ready to start writing out my properties and values. So the first thing I want to change is the font family. I don't really love the look of this. So we're going to use font Dash family is the property and we're going to use a single quote. And you can see again when I press that once it creates the closing single quote as well. And I'm going to type Aria L for Arial.
00:32:54.870 - 00:33:28.788, Speaker A: And you can see that the font has changed. It looks a lot more rounded. And the reason I'm choosing arial is because this is a very standard font I that is going to be present on a Mac computer as well as a Windows computer. Next, I'm going to add a comma and I'm also going to type sans serif. So this is commonly used when you're applying a font family. And essentially it acts as a fallback font. So it is just a type of font.
00:33:28.788 - 00:34:12.996, Speaker A: So sans serif just means there's no connectors in between each of these letters, which is usually what we would use for titles. You would usually use serif fonts if you're writing a long document like a research paper or a novel or something like that, because it makes it easier to read when there's a bit of connection between each letter. Next, we're going to change the background color. So the background color by default is white. We're going to type out background color as our property. And again, we'll have a colon here. And we're going to again, dive into colors in its own module.
00:34:12.996 - 00:34:47.781, Speaker A: So for the purposes of this video, to keep it very simple, I'm actually just going to be using color names. So in this case, I'm going to use white smoke, which is what I often use for backgrounds. And I'm going to add the semicolon at the end like I did for the font. And you can see that it creates a slightly grayer white. So if I were to comment out this line, you can see that that's a little bit brighter. And this is just a little bit easier on the eyes. We are going to have the color stay black.
00:34:47.781 - 00:35:17.222, Speaker A: So this is for the font color. So I'm going to type the color property and type out black and a semicolon. It is actually black by default. So, like, for example, if I made it red, you can see that it changes the font everywhere because we're using our body selector. Next. By default, the body has some margin and padding. And this is something you'll see in a lot of cases where they're removing the margin.
00:35:17.222 - 00:35:45.810, Speaker A: So I'm going to make that zero. And you can see everything went into the top left corner. And then I'm also going to remove the padding. So the reason for doing this on the parent element is so that you can actually add it back on an element by element basis, which is what we're going to do next. Okay, so that's enough styling for the body. Let's now style our parent div here. So we have a div with the class of container.
00:35:45.810 - 00:36:26.416, Speaker A: So let's go ahead and target that. So we're just going to use a period to target a class. And then I'm going to type container. And then same thing, curly brackets enter and the first thing I'm going to do is I only want the container to be so wide by default it's going to have a width of auto so it's going to automatically fill the full space that we have. But in our case we want to set actually a maximum width. We don't want it to be the full width of the page if our page is actually very wide. So the max width here we're going to set at 800 pixels.
00:36:26.416 - 00:37:15.990, Speaker A: And I'll come back to this later because right now nothing here is showing up as any kind of width because we actually haven't made our box yet, which is what is the individual class for all of our divs that are inside of our container. So let's go ahead a little further and I'll get back to maxwidth in a minute. Next, we want to add some margin back on our container. So this is on our parent level container. We want our margin top and bottom to still be zero, but we want our left and right margins to be automatic. So the reason for this is if our width is bigger than 800 pixels, we want it to automatically have an even margin on the left side and on the right side. So that is what that will accomplish.
00:37:15.990 - 00:37:51.972, Speaker A: And then lastly we want to add a padding back of 20 pixels. And you can see that that shifted things from both the top and the left side. Now we're going to dive into the actual box class which you can see is present on every single one of our divs. So it's going to apply to everything here and we're going to same thing period. And then box. Then our curly brackets press enter and scroll down a little bit here. And we're going to start with the background color.
00:37:51.972 - 00:38:34.470, Speaker A: And so we're actually going to make this white. This will you see actually really stand out now compared to the white smoke background. So you can see very clearly that white and white smoke are different enough that you can see them when they're side by side. Next we're going to have a padding on each box, 20 pixels. So by just having one padding value, we're actually setting it for the padding on the top, the left, the right and the bottom. We'll get more into that in the next module where we talk about box model and we're going to put a margin bottom of 20 pixels. So on the bottom of each one, we're going to space that out.
00:38:34.470 - 00:39:11.582, Speaker A: So now you can see that instead of one giant group of divs, they're all separated by 20 pixels on the bottom. Now they're each their own box. So now I can actually show the max width thing here. So if I stretch this to be more than 800, you can see that our box remains at 800. We've reached that maximum width and our margin auto is having an even amount of margin on the left side and on the right side. Okay, so we'll go back here to how we had it. Next, I'm going to add some border radius.
00:39:11.582 - 00:39:32.858, Speaker A: So this is an important property in, in modern web development. It gives things a more rounded look, which is very popular. You can see that everything was a very sharp line. And you can see now that everything is rounded. You can actually see on codepen that it has a similar feature on all of their buttons. Everything is rounded. There's not a lot of square lines anymore.
00:39:32.858 - 00:40:04.592, Speaker A: That was a lot more popular in the nineties. That's a good place to pause for a breather. I'll see you in the next part of this lesson. Bye for now. Hello and welcome back. Next, I want to add some box shadow. So I'm going to write this out first.
00:40:04.592 - 00:40:51.850, Speaker A: So we're going to use our box shadow property and I'll write it out and then I will explain it after. So we're going to start with zero pixels for our first value, four pixels for our second value, ten pixels for a third value. And then you can see that it's already done something, but it's very strong. We want something a little bit more subtle than that. And so we're going to use a color value here, which also sets the opacity. So we're using an RGBA value, so that is red, green, blue and alpha, which is going to be our opacity. So we're going to do zero comma, zero, comma zero with the space in between, and then 0.1
00:40:51.850 - 00:41:32.390, Speaker A: for our opacity. And you can see that that adds a very nice light, subtle shadow. So the alpha value is between one and zero. So if I put it to one, it would go back to how it was, meaning that we just have a full on black value here. And just to explain what's happening with our other values here, if we go over to this w three schools resource, it shows and explains how this box shadow property works. So if we scroll down, you can see that we have our property values here. This is the syntax.
00:41:32.390 - 00:42:04.902, Speaker A: So of course you could just have none or you could have initial or inherit. But basically we have a horizontal offset. So that means the offset of the shadow will be either to the left or the right. A positive value means the shadows on the right side, and a negative value puts the shadow on the left side. So our value is zero, meaning that our shadow is just going to be straight down. And then the vertical offset is the same idea. Positive value will put it below the box.
00:42:04.902 - 00:42:52.338, Speaker A: A negative value puts it above the box. So because we had a positive value of four pixels, it means it's going to be four pixels below. And then we had our third value, which is actually optional, which is the blur radius, meaning it will actually spread out and kind of feather that shadow for us. So we have that spreading out another ten pixels so that that four pixel offset is stretched to ten pixels, making it a little bit of a lighter shadow. We did not add the spread value here, but we added the color. And again, we use the RGBA color value specifically to add some opacity. You can see that we have another optional value here for an inset.
00:42:52.338 - 00:43:29.620, Speaker A: So that means instead of an outer shadow, it would be an inner shadow. There is a ton of complexity, even just to box shadows. So you can see that this one here has the spread radius as well. You could also chain this to actually have multiple shadows on one box shadow property. And again, you could have it be inset. And there's a lot of different ways that you could make it more complex. I just wanted to explain the basics of how it works because it is very popular and it is used a lot in modern web development.
00:43:29.620 - 00:44:13.412, Speaker A: Okay, so back to what we were doing. Let's add the semicolon here. So again, I'll just maybe comment it out to show again the before and after so you can see that everything is very flat. And then when I add it, it's adding a nice subtle shadow that kind of makes the box look like it's hovering a bit on the page. Okay, so now we have our basic global styling. We're now going to go through and actually add the classes for each of these individual divs so they'll all look a little bit different. So we're going to start with the color class that we had, and we're just going to add a color property.
00:44:13.412 - 00:44:44.450, Speaker A: Again, the color property is targeting the text and we're going to make this Dodger blue. And you can see that that changes our text color there. Very cool. And next, we'll look at the font size one. So the class is font dash size and the property is the same. And we'll just set this to be 24 pixels. And when we do that, we can see that we have increased the font size here.
00:44:44.450 - 00:45:20.200, Speaker A: Next, we'll look at font family. So we can actually change the font family on any specific element. I know we set it on the body, which sets it for everything, but we can actually change that on individual elements if we want. So if we wanted a different font for the title than we wanted for our paragraph elements, we can do that. So I'm going to pick another one that I know is on Mac and Windows. So that's courier new. And we'll say courier as a backup here.
00:45:20.200 - 00:45:39.754, Speaker A: Yeah. So courier new should work on Windows. The courier one should work on a Mac. And then we'll also just put monospace. So you might recognize this. This is also within our elements that we're referencing code and things like that. Next, we'll move on to our text align.
00:45:39.754 - 00:46:12.280, Speaker A: You see here that it's supposed to be centered text. So our text align class, we're going to use our text align property. And you can see, we can just type center as our value and it centers the text. There's, of course, other options for this. So I could right align it as well if I wanted to, but we'll go back and leave it at centered. Next, we are going to look at line height here. So if we scroll down, we're going to have line height.
00:46:12.280 - 00:46:37.934, Speaker A: And again, we're going to target the line height property. And we're going to set this to be two. And you're going to see that there's going to be some more space between the lines. It's very subtle. I'm going to comment it out and you'll see that it was equal size. And then when I add it back, it is bigger now. So that's pretty self explanatory.
00:46:37.934 - 00:47:06.002, Speaker A: And then the last font related one is going to be for letter spacing. So we're going to target the letter spacing property and we'll say three. Whoops. Three pixels. And you can see now that that actually spaces the individual letters. Very cool. Okay, so now we're going to move on to our container related ones that we have, starting with border.
00:47:06.002 - 00:47:42.318, Speaker A: So we're going to target our border class and we're going to say border three pixels solid, and we'll make it Dodger blue. As well. So we are actually combining, oh, I forgot the colon here. We're actually combining border width with the border style and the border color into one property called border. And you can see that it's added a nice border to our div there. Next, let's look at margin. So our margin class here.
00:47:42.318 - 00:48:13.026, Speaker A: And we're going to set the margin to be 20 pixels. And you can see now that on the left side and the right side, it has an additional 20 pixels of margin. We'll do a similar thing with our padding example. And we'll do padding of 30 pixels this time. And you can see that that added the padding again within the container. So padding is inside, margin is outside of our container. And we'll scroll down a little bit.
00:48:13.026 - 00:48:39.000, Speaker A: So next we're going to just talk about width and heighten. So width, height. And we're going to say our width is going to be 50%. So again, we can do this as a percentage value. There's also other ways to have a different value. Or we could do it as pixels. So in this case, I'll do height as pixels, can make that 150 pixels.
00:48:39.000 - 00:49:18.658, Speaker A: And let's say we wanted to change the background color, make that orange red. And again, we can target the font color for this specific one. And we'll make it white so that it stands out a little bit better. Okay, very cool. Next, we're going to look at our position. So our position class here, we're going to have the position be relative and top 15 pixels. So once we do that, we can see that that actually moved our whole div down.
00:49:18.658 - 00:49:57.120, Speaker A: And then we could add a left value of also 15 pixels and that moves our div over. So that is very helpful for layout. And we'll of course, dive more into layout a little bit later on. And then we have a few more here. So hover for transition and hover for transform. We're going to have, again, a whole module on transitions, transform, animations, things like that. But for now, we'll target our transition class and we're going to change the background color to lime green.
00:49:57.120 - 00:50:38.940, Speaker A: And again, we'll change our font color to white. And we're going to have a cursor pointer. So instead of just having this regular cursor, when I hover over it, you see that it changes to a hand. So we can actually change the type of cursor that is appearing when we're actually inside of an element. So the reason we're doing this is we're actually going to add a pseudo class. So we're going to do transition and then to add a pseudo class in our selector we're going to use the colon again and then we're going to use hover. So that is our transition class in the state of being hovered over.
00:50:38.940 - 00:51:02.772, Speaker A: So this is one of the most popular pseudo classes that you will see. And we're going to change the background color to be different. So it's going to be green. And then we're also going to add the transition property and this is going to make it transition more smoothly from one to the other rather than just jumping. And we're going to transition the background color. So that's the value, 0.5 seconds.
00:51:02.772 - 00:51:52.846, Speaker A: So it'll take half a second to transition and ease is the transition type. So now if I hover over you see that it slowly goes to a darker green and then when I go out it actually pops back. So if I didn't have this transition when I hover it would just instantly pop like that. But we want it to be more of a smoothen change if we're ever having a hover effect that is changing our color. And lastly for our transform example, we're going to target our transform class again. We'll use the pseudo selector for hover. So it happens when we hover over and we're going to use transform as our property and our value is going to be translate y and then in brackets minus five pixels.
00:51:52.846 - 00:52:19.102, Speaker A: So that means it's going to go up by five pixels. And then again we'll add our transition. And specifically we're targeting our transform property that we want to transition 0.3 seconds and we use ease as well. Again, don't be worried if you don't understand this yet. We're going to have a whole module that's really going to dive into this. But I just wanted to kind of show how it can work.
00:52:19.102 - 00:52:57.842, Speaker A: So you can see when I hover over it, it moves up by five pixels. All right, so that's basically it for this lesson. I just wanted to dive in a little bit with some CSS properties and get us into actually writing some CSS. In the next one we're going to dive more into how cascading and specificity works. I will see you in that one. Bye for now. Alrighty.
00:52:57.842 - 00:53:43.608, Speaker A: Welcome back. So in this lesson we're going to be talking about cascade specificity and inheritance. So if you recall, CSS stands for cascading style sheets. And these three fundamental principles dictate how CSS is applied to HTML and how conflicts between different styles are resolved. This might not seem like something that is super fundamental. However, in the grand scheme of things, you will definitely run into a time where you are applying a style to an element. You think that it should be working, but for whatever reason it's not.
00:53:43.608 - 00:54:42.154, Speaker A: And it will usually have to do with either cascading, specificity or inheritance. So let's dive a little bit deeper into what this means. So again, you can have conflicting rules. So it's possible that if you have a 1000 line style sheet that you're setting some styles for an h one at the beginning, and then two weeks later you're also still applying styles to a h one selector, but you're using it in a different part of your CSS file. You might have forgotten about it. That can create a conflict and create an outcome that you weren't planning, that your original h one style is overridden and the new one is the one that is taking effect. This can also happen if you're using something like external style sheets with something like bootstrap, which we're going to talk about in the next lesson.
00:54:42.154 - 00:55:39.710, Speaker A: I definitely struggled with this when I was first starting out using external style sheets like this. It was hard for me to understand how it could actually override them and have my styles be the ones that were represented and not just the ones that were in that external style sheet. So let's dive into these three fundamental topics. So first, cascading. So basically what this means is when there are two rules that are happening at once and they both have equal specificity, the one that is defined last in the style sheet of is the one that will be used. So in this example below we have a selector on an h one, and then below we have a selector on an h one. So they're both using the element selector, which is at the same level as specificity.
00:55:39.710 - 00:56:29.406, Speaker A: And because this one is on the bottom color blue, you can see that that is the styling that we are actually seeing here that is pretty straightforward. Always think of it that the last one wins, they get in the last word. That is how cascading works. This also matters if you are linking several style sheets in your document's head. It is the style sheet at the bottom that will override all the ones before it. So for example, if you want to have your own custom Css that is built on top of everything else, that should be the style sheet you're actually linking to last at the bottom. Something to keep in mind.
00:56:29.406 - 00:57:33.940, Speaker A: We'll talk about it more throughout the course, next, specificity. So this determines which property value is applied to an element, because it is possible that you have different properties and values that are targeting the same element. So for example, an element selector is the least specific. So like that h one example, and it would be more specific if you were using a class selector. And of course it would be more specific still if you were using an id. And then the most specific is if you're actually using an inline style within the HTML element itself. So if we look at the example here, you can see that we have an h one which has the class of main heading, and you can see that our h one, even though it's at the bottom, which is following our cascade rule, it is the last one.
00:57:33.940 - 00:58:40.380, Speaker A: It is not as specific as using this class selector here. And so that's why the color red wins out here instead of the color blue. Okay, and moving on to the third element of these fundamentals here, which is inheritance. So inheritance means if you set something like a color or a font family on an element, every element inside will actually take that color and font, unless you've applied a different color and font directly to that nested element. So in this example here, we can see that we have a paragraph element here, and then we have another paragraph element here. And then inside of this second paragraph element we have a span. You can see that we're not actually targeting a paragraph element at all here, we are just targeting the body.
00:58:40.380 - 00:59:39.090, Speaker A: So everything here is the child of the body. And because we haven't explicitly set a color value for our paragraph selector, it is inheriting that color from its parent, which is the body. The exception to this is the span, which we are specifically applying the color of black. And that's why the only thing in all of this that is black is the span. So that is something important to keep in mind. Sometimes if you're setting values on the body, they will be inherited by other elements, which is usually intentional. You usually do want to set the font family and the color at the body and have all the elements take those values, unless you want to specifically override them, which you can do with more css.
00:59:39.090 - 01:00:32.500, Speaker A: This applies to some things, but not everything. So for example, if you set a width of 50% on an element, all of its descendants do not get 50% of their parents with, because that would get more and more complicated. It would get smaller and smaller as you went along, and that wouldn't be very helpful. So there are some exceptions to this. Okay, so now we're going to look at a brief codepen example that will show this off a little bit more in practice. We're going to pick this back up in the next video. Alrighty, let's keep going.
01:00:32.500 - 01:01:09.070, Speaker A: So we have another starter template here and we already have our HTML here. You can see that again, it's just a bunch of text. So now we're going to start with writing out our css. So we're going to create some titles just to have something that you can reference again. So to start with, we have our global styles. We're going to start by styling our body here. And we'll start with our font family.
01:01:09.070 - 01:01:55.150, Speaker A: And that's going to be Ariel San serif. And again, you can see that the font changes for everything. So again, all of these divs are inheriting that font family from the body. And then a similar thing will happen here with the background color when again, I set it to be white smoke. And you can see everything gets ever so slightly grayer. And same thing. I'm going to add padding of 20 pixels and I'm going to change the line dash height to be 1.6.
01:01:55.150 - 01:02:32.860, Speaker A: And you see everything spreads out a little bit there. Okay, so that's it for our global styling. But again, you can see that everything that I've added here has been inherited. And if we go down, we're going to then start with our element selector, which is our least specific. So write that out. Element selector, least specific. And we're going to target our div with our curly brackets.
01:02:32.860 - 01:03:13.940, Speaker A: We're going to start with adding a border, one pixel solid light gray. So you see we have our border there. We're going to add a top and bottom margin. We will get more into margins and paddings and all that, and how they actually work in the next module. And again, we're going to add some padding here, 15 pixels. And you can see that that spreads everything out within each box. So we have four divs and we're styling all of them at the same time because we're using an element selector.
01:03:13.940 - 01:03:49.120, Speaker A: They are all divs. Next, we're going to add a border radius of five pixels. This is to round the corners nicely, make it look more modern. And we're going to make the background color white. It's definitely hard to see white smoke until you add something that is just pure white. And then you can very clearly see the difference between white smoke and white. And we're also going to explicitly say that the color is black.
01:03:49.120 - 01:04:46.950, Speaker A: By default, the font color is black. So you won't actually notice any change? But I just wanted to show that because we are going to mess with the colors a little bit. So if we look at our elements here, they have the class of highlight on the second one and on the third one and on the fourth one. But then we also have the id of example one, example two, special one and special two. So we're going to start with just adding our highlight class. And in this case we're going to make the color as black. And the reason we're doing this is actually because I'm going to have a duplicate selector of the same specificity.
01:04:46.950 - 01:05:54.090, Speaker A: So this one is for the class selector, which is more specific than element selector, and I'm going to comment that out. So maybe what I'll actually do is I will just make this a dark gray. So you can see then that the other three are now black because they all have the highlight class but the original one does not. But you can see that even though we have our color dark gray on our div, it is overwritten because this class selector is more specific. And next we're going to do the same class, but this is going to be a cascade and later rule over rides. We're going to comment that out. And again we're going to target the same highlight class and then this time our color is going to be red.
01:05:54.090 - 01:06:47.910, Speaker A: Okay, so you can see that there is no more black text. Our color black has been completely overridden because they all have that highlight class. And then we're going to do a similar thing with our id here. So for our third one it is called special one. And we're going to change the font weight to be bold and the color to be green. And you can see we're only targeting this one because this is the only one that has the element of id. We could even do the same thing and say that we want to target special one and special two and you can see that it is green again.
01:06:47.910 - 01:07:29.940, Speaker A: But then if we go to our fourth option, let me just add a title for this. So id selector, more specific than the class. Comment that out. Okay, good. And then we're going to have another comment. But we're going to actually do this style inline. We're going to say inline style will be the most specific and this is going to be added directly to the HTML.
01:07:29.940 - 01:08:20.788, Speaker A: Okay. And if we go now to our HTML at the bottom here, so you can see that for right now it's green, even though it says the color will be blue. If we just type in style equals then our color is blue. You can see now that the inline style is a higher specificity than our id. Okay, so that's a brief overview of what we just saw in our document. I am going to show you one other thing, and it is something that you should definitely use sparingly. It is not best practice to use what I'm about to show you, but sometimes if you have no other option, it is kind of a shortcut.
01:08:20.788 - 01:09:47.990, Speaker A: It does work. So this is using important. So important can override anything that doesn't already have important. Okay, so what does that mean? So if I were to change this class here, so if I had this highlight class one more time, you would see that if I actually fill this out now, I'm going to make the color be purple. You'll see that it changes this one up here, but it doesn't change either of these because these are more specific. But now if I were to put important at the end of my value, you can see that it changed all three that had the highlight class, even the ones that were more specific in using the id selector, and even the one that was the most specific using the inline style. So technically speaking, the fifth level of importance and the absolute most important specificity is actually using this important at the end of the value.
01:09:47.990 - 01:10:39.676, Speaker A: Again, this is not best practice. Some people would say that you should never use this, but I would say that it has helped me a lot, especially in cases where I have an external style sheet that I can't really modify because, you know, it's 5000 lines and it's minimized. And sometimes this is actually the easiest way to override the styling. In that case. For now though, I'm just going to comment that out so that we have our different colors here. Okay, so that is kind of an overview of how cascading and specificity and inheritance work. In the next one we're going to be talking about external, internal and inline style sheets, as well as how to add something like Bootstrap to your codepen project.
01:10:39.676 - 01:11:50.290, Speaker A: Bootstrap, of course, is a CSS library that has a lot of styles already built into it. All right, that's it for now. I'll see you in the next one. Okay, so in this lesson we're going to be talking about the three main ways of inserting styles into our project. So first we can have external CSS, second we can have internal CSS, and third, we can have inline CSS. So I'm going to be showing you this in the context of Codepen, but later on in the course I'll be showing you how this works in your own local project that is going to be run through something like visual studio code. And this is more how you would work as a developer, because most developers don't just work on Codepen, they work on their own local versions of projects.
01:11:50.290 - 01:12:38.530, Speaker A: So let's dive in here. First we're going to talk about external CSS. So you can see that we have our document head here. You see we have our HTML element, we have our head element, and inside of that we have a link element and it has an attribute of rel and that value is a style sheet, and we're using an href to point to the source of that style sheet. So in a local project it would be something maybe even just like style CSS. So we would have a separate file for our CSS within our project. This could also be an external style sheet from somewhere else.
01:12:38.530 - 01:13:29.390, Speaker A: So for example, if you're using something like bootstrap, you would also add a link for that. You can add as many style sheets as you want within the head of your document. But again, as we mentioned in the last one, make sure that you are thinking about the cascading. The style sheet at the bottom will be the one that will override all of the others if the specificity is the same of the styling that they're both trying to apply. So you can see down here there's an example of how the style sheet looks. So this is very similar to the style window that we have in codepen. And just as a reminder, the external CSS file should not contain any HTML tags.
01:13:29.390 - 01:14:19.642, Speaker A: And another reminder about syntax. There shouldn't be a space between 20 and Px, which stands for pixels. There should be no space between those, or else that is actually invalid CSS. The next type is internal CSS. So we can actually create a style element inside the head of our HTML document and we can just go ahead and write the styles in there. You can actually do the same thing with a script element, meaning that you can actually write JavaScript and CSS within one HTML document. So that is also possible as well.
01:14:19.642 - 01:15:15.948, Speaker A: This is okay to do if you don't have a ton of styles, but if you have hundreds of lines of styling, it is better to have that in an external file using an external style sheet. And the last way is using inline CSS. So this is something that we've talked about a few times already, but basically that is just using the style attribute on the HTML element itself and passing the style as the value. You can see that we can have more than one. We don't actually need the spaces in between our property and our value, but you can see that we have a semicolon between our next property and value pair. You can have multiple style sheets, like I said. But again, keep in mind that the order matters in this case.
01:15:15.948 - 01:16:00.026, Speaker A: In this example, they have an external style sheet that is targeting the h one with a color of navy. And then we have an internal style sheet targeting the h one, which is the same level of specificity, but this time with the color orange. So in this example, the style that is last, which is this because this is at the top, this is at the bottom. This is the one that will win out. So the h one will be the color orange. Okay, so let's look at some of this in practice. We're going to go over to codepen here and we're going to start by using a neat trick in codepen.
01:16:00.026 - 01:16:52.784, Speaker A: It is not actually necessary to do this, but this will be helpful when you get into visual studio code where it actually is necessary. As I mentioned in this HTML window here, it is basically acting as everything within the body. So if you've noticed, we don't ever actually have that body opening and closing tag. It is kind of implied, but we can actually explicitly write our HTML element which will have within it the head and body elements. And a quick way to do that is to actually type doc for Doc and then press tab. And you can see that that creates our HTML, our head and our body elements. And you can see that it also adds some meta tags here by default as well as the title.
01:16:52.784 - 01:17:36.232, Speaker A: Even though the title won't actually show up here. This is a shortcut that still works in visual studio code and that is when it will actually be more mandatory than it is here. Let's just say though that we're going to match what the final title of this codepen is going to be and it's going to be 4.5 bootstrap five example. Okay, so as they also suggested, it is possible to just add a link element. I can press tab, you can see by default it is a style sheet. And then you would have something like style CSS.
01:17:36.232 - 01:18:40.808, Speaker A: Of course, in this case we don't have a file system, so there is no actual local style CSS file. But I just wanted to show what it is going to look like when we are actually going to be getting into visual studio code. Now we're going to look at an external style sheet that will actually work and that is using Bootstrap five. So we're going to go over to the bootstrap five website here. So Bootstrap is a very popular framework. It helps with building responsive websites and basically it has a series of styling components and layout related styling and even some JavaScript kind of transitions and things like that. So basically it's a great way to build a website without actually having to know a lot of the CSS coding or if you just want to take some shortcuts, you don't want to code everything from scratch.
01:18:40.808 - 01:19:40.310, Speaker A: This is a great option. I would recommend though, as you're learning to try to do as much as you can on your own, because the more that you actually write everything out, the more that it will make sense to you. But to get started with something like bootstrap, you can see that we have our link element here and we have our hrefde and so all we have to do is copy this and we can go back to our codepen and I can go ahead, I'll actually just remove this because this isn't actually valid and I can go ahead and paste it there. So now I'm actually able to use bootstrap components and you can see that my CSS pane is empty here. So if I go back I can actually click on components here at the side. You can see that there's all kinds of other options and documentation that explains what's going on here, layouts, forms, things like that. But let's say that I want to use one of these components.
01:19:40.310 - 01:20:31.614, Speaker A: So let's say that I want to add a navbar. So to add a navigation bar I can just go ahead and I'll just copy this first example here. So they actually have the HTML written out and you can see that they already have a series of classes here. So I can just copy this whole thing and we can go back to my HTML and I will comment out a title here for my navbar. And if I paste this in here, we can see that we have a styled navigation bar. So our mobile doesn't work. I think that is actually because we don't have our JavaScript here.
01:20:31.614 - 01:21:18.216, Speaker A: So if we go back to our introduction and if we add our JavaScript file, so if we scroll down here, we can see that we have a bundle here, we're going to copy that. If you look here, it has a starter template, which kind of explains basically what I've just explained. We have our css here in our head and then we're going to put our script tag within the bottom of the body here. So the reason that this is done is because the script tag will likely take the longest to load. But we want to actually load all of our HTML, our text and everything first. So that's why you'll often see script tags at the bottom of the body. So we're going to follow that as well.
01:21:18.216 - 01:22:00.040, Speaker A: So I'm going to go down here and I'm going to paste this in. And so in theory now you can see that this opens and closes. Very cool. So Bootstrap does require both CSS and JavaScript, but you can see that I've created a nice Snapbar here without having to really do much work at all. I can just go ahead and where we see the white content, I can just change that. So let's say that I want this link to say something like about instead of link, I can just do that. And you can see that I have changed that.
01:22:00.040 - 01:22:34.084, Speaker A: So it's a very quick and easy way to get up and running and to make something that is already styled and has layout taken into account and even responsive design. So you can see that if I actually expand this wide enough, it will automatically style itself for a desktop view. So that's pretty cool. It switches between desktop and mobile views automatically. And I didn't have to write any code to do that. So that is the power of using a something like a library. But we're not done yet.
01:22:34.084 - 01:23:09.140, Speaker A: We're going to pick this back up in the next video. Okay, let's pick up right where we left off. We can do it this way where we're actually pasting in the link here. We can also, I'm just going to comment this out for now. And you can see that this is going to fall apart. As you see here, there's no more styling. And I'm going to comment out this script tag as well.
01:23:09.140 - 01:23:51.236, Speaker A: The cool thing about codepen is you don't actually have to even include these external links in this way. We can actually go to the settings of our project and we can add a different things here. So if we go to our css and we scroll down, we can add external style sheets and you can just search for them. So let's say that I wanted to add bootstrap. I can just type it and you can see that it pops up here and I just click on it. And now bootstrap five is added to my project. You can see in the background that the styling fixed itself and I can actually do the same thing with the J's file.
01:23:51.236 - 01:24:22.670, Speaker A: So I can just type bootstrap and I guess I want this one, I think, and I can save and close and you'll see that this works again, even though I don't necessarily need to have it within my project. So I will uncomment this out. This will of course still work even though I've added it as well, technically. Basically I've added it twice, but you can see that still. Oh, it actually doesn't work. Okay, maybe it doesn't want it twice. So I'm actually going to remove it here.
01:24:22.670 - 01:25:11.470, Speaker A: So to remove it we just click the x and we can scroll down and click the x there, save and close that. It is better to add it like how I have here, because you could actually just copy this whole HTML document into visual studio code and run it locally and it would work, whereas diving into the settings, it's not, you can't just copy the whole code over. So I think it's a little bit better to have it like this. Okay. And if we go back, we can even kind of customize the look of some of our components. So if we go back to our navbar here, we can actually customize. If we scroll down, let's say that I wanted a dark mode version of my navbar.
01:25:11.470 - 01:25:51.554, Speaker A: So you can see that I can just change the classes to include dark instead of light. So if we go back, you can see that I have light and light here. So I can change this to be dark and dark. So you can see that it does have some theming built into it, which is very cool. It's a quick and easy way to make something look the way you want it to look. There's a limited number of options, of course, but having a dark mode is pretty cool just by changing these two classes here. And I can go back and I can even just add other components.
01:25:51.554 - 01:26:17.160, Speaker A: So let's say I want to add one more component. I want to add a card. And if I scroll down, there's a lot of different options here. Let's say that I want to add one that has a header and footer. I can go ahead and just copy the code. You see they have the full code here. I can scroll down here and below my nav element.
01:26:17.160 - 01:26:52.020, Speaker A: I'm going to comment out that I'm going to put a card here and I'm going to just paste that. And you can see now we have a card. Very, very cool. Very, very easy. So libraries can be great, they can be very helpful. It's a great way to make something quick that will look pretty professional. And now we've covered external style sheets and we have talked about inline style sheets before.
01:26:52.020 - 01:27:49.310, Speaker A: So I just want to talk about internal styling now. So to do internal styling we can go ahead and just type out my style element, press tab and then within this style element and I press tab again to have a nice indent I can actually target the card class within bootstrap and I'm just going to go ahead and add a margin of 20 pixels to have a margin all the way around. And you can see now we have some nice white space all around our card there. So I guess just to show one more time, just to reinforce it. So we had this card class that we just modified with our internal style. We can now modify it even further with our inline style. So now I can add this style attribute and let's say I want the margin to now be 30 pixels.
01:27:49.310 - 01:28:35.946, Speaker A: So you can see that that gives it just that much more margin. So this actually overrides the internal CSS. Okay, so that's basically it for looking at external, internal and inline css. And also a brief introduction to how you would use something like bootstrap. If you do want to dive further in, they have great documentation, they have a lot of different components that you can use, so feel free to explore that on your own. And I will have this example saved in my collection and a link to it as well to see the final code that I've made here. All right, so that's it for the lessons of this module.
01:28:35.946 - 01:29:24.250, Speaker A: In the next one, we'll look at three more challenges before moving on to module number five. All right, I'll see you in the next one. Bye for now. Alrighty, so we're almost done with module number four. We just have three brief challenges to get through that is going to cover what we have learned so far about CSS. Okay, so moving on to challenge number one. So the goal of this challenge is that we only want the second paragraph to be highlighted in yellow.
01:29:24.250 - 01:30:10.330, Speaker A: And for this challenge we only want to modify our css. We can see here that we have an h two element that has the classes of header and highlight paragraph element that doesn't have any classes. And then we have a paragraph element with the class of highlight. And this is the one here that we want to be highlighted in yellow. In our CSS we have a class selector for header and the color blue which we can see here is in effect. And then we are targeting our element paragraph with the background color of yellow. But you can see that we don't have any yellow on the page.
01:30:10.330 - 01:30:44.020, Speaker A: So I would suggest that you try to figure this out on your own. Go ahead and pause the video here. Okay, and we're back. We're going to go through the solution. So if I drag up my JavaScript window here we have some hints. So the very first thing that is wrong is we don't have a paragraph element selector, we have a p element. So we're going to go ahead and change that to be a p element.
01:30:44.020 - 01:31:27.758, Speaker A: But you can see the problem is this is not specific enough. We don't want this first paragraph element to be highlighted in yellow, just the one below. So if we get more specific, we could target the highlight class with highlight. But then the problem with this is we're also highlighting the h two when we only want to highlight the second paragraph here. So to accomplish this we need to get more specific still. And that means we are using a compound selector. We are selecting a paragraph element with the class of highlight.
01:31:27.758 - 01:32:00.540, Speaker A: So p highlight. And you can see that that is our solution. Awesome. So that's the first challenge down onto challenge number two. So in this one it is actually the opposite. We want to change the HTML only and not change the css. So you can see that we have an h one element here with an id of special and we want this text to be blue.
01:32:00.540 - 01:32:36.560, Speaker A: So here we have h one color of red and you can see that this is actually green. So this is being overridden by something that is more specific, which is the id of special. But we want this to actually be blue. And again we're going to do this using the HTML only and not the CSS. So pause the video here and see if you can figure it out. Okay, and we're back. Let's take a look down here at our hint.
01:32:36.560 - 01:33:17.078, Speaker A: So id selectors have the higher specificity than type selectors, but inline styling has the highest specificity of all standard selectors. So what we can do here is simply add the inline style. So I'm going to use the style attribute equals double quotes and I'm going to type color green semicolon. Oh, sorry, it's supposed to be blue. Blue semicolon. And you can see now the text is blue. All right, so that was pretty simple.
01:33:17.078 - 01:33:54.978, Speaker A: Onto challenge number three. Okay, so how can I make the home item and the contact item red? By only modifying the dot item selector. So this is very specific. We don't want to modify the HTML and we only want to modify this item selector down here. So pause the video and see if you can figure it out. Okay, and we're back. So we have a hint here, and we're going to scroll down just a little bit there.
01:33:54.978 - 01:34:44.200, Speaker A: So again, we have a class of item on both of these list elements, but we have an id of menu above. So that is what is forcing all of these to be blue instead of being red, even though it is at the bottom of our cascade here. But to change this, the ultimate override is to use exclamation mark important. So it is a last resort to override styles. Again, this is not best practice, but it is sometimes helpful when you get stuck, like if you're using an external style sheet. And again, it's not easy to modify that. You might need to use this important to modify your specificity.
01:34:44.200 - 01:35:16.160, Speaker A: So you can see just adding that exclamation important overrides this styling here of color blue that was technically more specific. Okay, so that's it for the challenges. That is it for this module. In module number five, we're going to be focusing on the fundamentals of layout. That is a very important aspect of CSS. I'm excited to jump into that with you. I will see you there.
01:35:16.160 - 01:36:35.840, Speaker A: Bye for now. Hello and welcome back. So in the previous module, we finally started tackling CSS fundamentals, specifically selectors, properties and values. You might be feeling a little bit overwhelmed as we talked about the depth of those things and the sheer amount of properties and values that are possible. But don't worry, in this module we're going to be taking a little bit more of a narrow focus and honing in on layout related CSS. So layout related CSS, I would argue, is some of the most important to understand, because I think the majority of the time you will need to be working with layouts, organizing your text and your images and your other multimedia elements on the page in a nice way. And it is also very important if you want to then understand responsive design and how to make things look great on any screen size.
01:36:35.840 - 01:37:33.898, Speaker A: So I've broken it down into three categories here. The first one is box model, and this consists of the content of our HTML element, the padding around that, the border around the padding, and then the margin around our border. We'll talk about that a little bit more in the next slide. Next we have position. This property dictates where elements are on the page, and it can be relative to other elements, or it can remain absolute, meaning it is just in a certain position on our page. And then lastly we have the display property, which is used on elements to dictate how they interact with the other elements around them. So first up, we're going to dive more into box model.
01:37:33.898 - 01:38:24.736, Speaker A: So this image that we have here actually comes from our browser's developer tools, which we'll dive into in a few modules from now. But what I love about this is it is color coded and to me very easy to understand. And it also includes all of the values that are relevant. So in the middle here we have our content in blue and we have the width and the height of the element in pixels. This could be a div or an image or text. Basically any element that you click on in your developer tools, you can grab this information. And then next we have the padding, which is the space between the content and the edge of our container.
01:38:24.736 - 01:39:04.378, Speaker A: So in our previous module we had a list of divs. So if you picture the divs that we had there, we also had a border, which is the line between the padding and the margin. There are many styles, but it's usually a solid border that you're going to see. Or sometimes the border is not defined and therefore not visible. But we can still use a property like border radius which will round the corners of our div, which again we explored in the previous module. And then outside of the border. So picture that same div that had text inside of it.
01:39:04.378 - 01:40:09.120, Speaker A: We have our margin, which is the space between everything else around the element. So the space between each of our divs is our margin. So we're going to have a few codepen examples that are going to dive into this later on in the module. Next, I want to drill down a little bit more into margin and padding and how the values and properties for these work. So there are top, right, bottom and left properties for margin and padding. You can use padding and margin shorthand properties to define all four values, or you can define them as two sets, top and bottom and then left and right. So in my example here on the left, I have a margin top with a value of ten pixels, margin right with a value of 20 pixels, margin bottom 30 pixels and margin left 40 pixels.
01:40:09.120 - 01:40:49.960, Speaker A: So this is actually equivalent to just writing out margin ten pixels, 20 pixels, 30 pixels, 40 pixels. So this is a helpful shorthand that you can use. This is the example that is showing all four values. So again, this one line is equal to these four lines. So it's very condensable to use the shorthand. And then in my padding example, we are using the two sets. So you can see we have a padding top of ten and a padding bottom of ten, which is represented by our first value, which is our top and bottom values.
01:40:49.960 - 01:41:34.516, Speaker A: And then we have a similar thing with our padding left and right, they're both 20 pixels, and this is representing the left and right values. So again, this one line is equivalent to these four lines. So now you're starting to maybe get an idea of how many combinations of properties and values you can have. Even with something as simple as this. There are a lot of different ways to write it out. Next, we're going to talk about border here. So the border property, which again we used a little bit in our previous module, it actually combines three different properties.
01:41:34.516 - 01:42:29.108, Speaker A: So border dash width, border style and border color. So this is obviously the width in pixels, our border width, and then we have our border style. There are different styles, usually solid is the one you will see most often, but we'll get into styles in a second. And then border color, of course, is the color. More often than not you will see it written out just as this border shorthand and then having these three values, border width two pixels, border style solid, and then border color yellow. Here you can separate this though into border top, border right, border bottom, border left. And you can then actually set a different style of border for each side.
01:42:29.108 - 01:43:09.290, Speaker A: So you could have a yellow, red, green and blue border and have it be different for all four sides of your container. You can also separate each of these values even further. You can have the border width specifically of the top or the border style only. You can basically break all of these down and target them individually as well. So again, a lot of combinations. It's not always necessary to do this though, so don't worry about memorizing all of this. More often than not, you can just get away with a simple border property with these three values.
01:43:09.290 - 01:44:00.640, Speaker A: Next we can see here that we have a reference for our border styles. This comes from w three schools. So I've just taken a screenshot essentially of the various border styles. So you can see we have a dotted dashed solid double border groove, border ridge, border inset, border outset border no border, hidden border, and a mixed border. So our mixed border at the bottom here, you can see that it actually does have a different style for the top, left, right and bottom bottom. Next we're going to talk about border radius. So again, we talked a little bit about this in the last module.
01:44:00.640 - 01:44:42.120, Speaker A: It gives a modern look and it is used in the majority of popular user interfaces. You can see even in my website that I'm using to generate my code examples that this has a border radius, meaning it has rounded corners. And you can see that we have the shorthand, similar thing as before. You can just write out border radius and you can set all the values here. It is a little bit different because it goes in a little bit of a different order. It goes top left, top right, bottom right, and then bottom left. And you can see I have the corresponding values here.
01:44:42.120 - 01:45:21.934, Speaker A: So again, these four lines are equal to this one line here. If all the values were the same, same thing, we could just have one value. So I did this in the module that we had. I basically just said border radius and then just one value for five pixels. This would follow the same pattern where you can define the top and bottom as one value and then the left and right as one value, just as before. So there's multiple different ways that you can define these values. And you can see in this example here, it shows the border radius.
01:45:21.934 - 01:45:58.510, Speaker A: We have our nice rounded corner on the side here, moving on to position. So position is a property and these are the options for the values here. And again, this is actually a screenshot of the codepen example we're going to dive into a little bit later on. So the five major position values are static, which is default positioning. So you see that it's just kind of hanging out where it is by default. So it's going in order. It's at the top because it's the first element.
01:45:58.510 - 01:46:41.860, Speaker A: Then you can have position relative that we explored a little bit in the previous module. You can use top, right, bottom and left in addition to position relative. These four other properties will move it from the original position. So you can see in this example it is shifted 20 pixels right and ten pixels down. We'll talk about that a little bit more. Then we have absolute positioning, which is positioned relative within the closest parent element. So you see we have a gray parent div and then we have this other div that is positioned absolutely 20 pixels from the top and 20 pixels from the right.
01:46:41.860 - 01:47:17.114, Speaker A: Next we have fixed position. This is positioned relative to the viewport. What I just mean by viewport is just the whole screen, the whole size of the browser window that you have open. That is the viewport, and it always stays in the same spot regardless of scrolling. So you can see that we have an example here at the bottom. And then the last one is sticky, which is between relative and fixed. So once you scroll past it, it becomes fixed and stays within view.
01:47:17.114 - 01:48:02.980, Speaker A: This is commonly used for something like a navigation bar, which we will show later on in the course. Lastly, I want to touch on the display property. So the display property has a few different values here. There are other ones that we'll get into later on when we talk about CSS grid and flexbox. Those are also display values that you can have that have their own set of properties associated with them. The first one here though that we're going to talk about is display block. So when you have the block value, the element that you attach it to will take up the full width of the container.
01:48:02.980 - 01:49:04.650, Speaker A: So you can see that this is as wide as it can be, it's filling up the whole space. Next, you have an inline value that you can add to display, and it means that this element won't start on a new line and it will only take up the space that is needed. You cannot set the width or height of this, so you can see that this is a little bit shorter here, and it just goes to the size of the content that we have here. Next, we have inline block, which is similar to an inline value, but you can have the width and height defined. So in this case these are both staying on the same line. That's part of it being an inline element, but I was able to make the width wider than the actual content that we're seeing here. And then lastly we have the option of using the none value for display, meaning that the element won't be visible and it does not take up any space.
01:49:04.650 - 01:50:08.196, Speaker A: And that's why you actually don't see it here in this example. Okay, so those are the basics of what you need to understand for layout. We're going to now dive into each one of these in a little bit more detail, and then we're going to have a practical project that's going to be very cool at the very end of the module. All right, it's layout time. Okay, so we're ready to learn more about the CSS box model. So we're looking at a resource here from W three schools, and it starts by pointing out that all HTML elements can be considered boxes. So this is important when we're talking about design and layout of, and it is essentially a box that wraps around every HTML element.
01:50:08.196 - 01:50:48.010, Speaker A: It consists of margins, border, padding, and the actual content. And again, we have another image here that is illustrating this. This would also apply even if it happens to be a circle, it will still have the content, the padding, the border and the margin as an option for that element. If we scroll down, we have another explanation here of the different parts. So the content is of course the elements content. So the HTML, the text or the images. The padding clears an area around the content.
01:50:48.010 - 01:51:24.146, Speaker A: The padding is transparent, so whatever color that element is, it will inherit that color. And then we have a border. And that is something that goes around the padding and content. Then we have a margin. That is the area outside the border. This is also transparent, so it would actually be the color of the parent of the content. So you can see in this example here, just actually looking at what's on the page, you can see that there is some padding above here.
01:51:24.146 - 01:51:54.470, Speaker A: So there's a little bit of white space inside of this div. And you can actually see that there is some margin on the outside that is separating this. And you can see that the padding inherits the white and the margin is inheriting the gray. And below here, we have an example that is showing all four of these. So width is defining the width of our content. You can also obviously define the height as well. And then we have border, padding and margin.
01:51:54.470 - 01:52:50.110, Speaker A: If we go down, there is something else important that we need to consider, and that is the width and height of an element. In order to set the width and height correctly, we need to know how the box model works. So to calculate the full size of an element, you must also add the padding, borders and margins. So in this example here, this div will have a total width of 350 pixels. So you can see we have the content width here and we have a padding of just ten pixels and a border of just five pixels. But what this means is we have a padding of ten pixels on the top, the bottom, the left and the right. Meaning we need to double this value.
01:52:50.110 - 01:53:31.822, Speaker A: And the same thing goes for the border. We have a border on the top, the right, the left and the bottom. So in terms of width, we would need to double this as well. The same thing would go for the height if you were trying to calculate the total height of the div. And of course we have a margin of zero, so we don't need to add anything for that. And below it actually shows the calculation here. So we have 320 pixels for the width, 20 pixels left plus right padding, ten pixels of left plus right border, and zero pixels left plus right margin.
01:53:31.822 - 01:54:11.282, Speaker A: That equals 350 pixels in total. So that is something important to keep in mind. If you have a maximum width that you want something to be, you have to factor in the padding, the border and the margin, and you have to double it. If you're adding just one padding or one margin value, or if you're adding a left and right value for both. Something very important to keep in mind. Moving on, we're going to talk more about borders now. So border properties allow you to specify the style, width and color.
01:54:11.282 - 01:54:48.674, Speaker A: We have a few different examples here says a border on all sides. This has a red border on the bottom. This has the border radius property being used. So it has rounded borders. And this one only has a border on the left side. So if we scroll down here, we can see that we have a list of all of the possible border styles that I showed in the previous lesson. So you can see we have dotted, dashed solid double, and then we have a series of 3d looking borders.
01:54:48.674 - 01:55:34.292, Speaker A: So groove ridge inset outset, none is no border and hidden defines a hidden border. The border style property can also have one to four values. So as I mentioned, we could have border styling for border bottom, border top, border right or border left. And we have some example code here and this is the result. So we're going to make a code pen that is going to show this off in just a minute. I want to talk a little bit more about border radius before we get to this. So next I'm going to go to a new website that we haven't touched on yet, and this website is called csS dash tricks.com
01:55:34.292 - 01:56:02.940, Speaker A: dot. This is a great resource. It has a lot of great articles as well. It's something that I have referenced many times and in this case it is an article talking about border radius. So rounded corners again, it is used everywhere. You can see even in this CSS image here that we have a rounded corner, rounded corner on this here. They are just basically everywhere in modern web development.
01:56:02.940 - 01:56:43.642, Speaker A: This has a topic on the shorthand for the top left, top right radius, bottom right, bottom left radius. Again, this is important if you only want to round the top or just the bottom. Very important to know these other properties. If we scroll down, we can see that there are actually a lot of different ways we can define the values. So we can just use a pixel value. And if we just use one, it sets it for all four corners, which is what we have used to this point. You can use two values to set a pair.
01:56:43.642 - 01:57:14.632, Speaker A: So top left and bottom right and then top right and bottom left are within this one and this one. You can see the order here. So this has four values. Let's maybe look at this one. So it starts with top left, then top right, then bottom right, bottom left. So it starts top left, top right, bottom right, bottom left. So it goes clockwise from the top left.
01:57:14.632 - 01:58:12.228, Speaker A: That's the best way to think about it, we can also use a value of unset. And the reason we would use this is if we're setting a border radius to a general element selector, like a div, but we wanted one specific element that is a div to have no border radius at all. That's how we can use this unset value to accomplish that. If we scroll down, we can see that we can actually get even more complicated, and we can use things like elliptical rounding. So you can actually change multiple values here to make something that looks a little bit more unique. We'll get into more of these unique shapes when we get more advanced with our CSS. But I just wanted to show that there are a lot of different ways we can use border radius.
01:58:12.228 - 01:58:53.722, Speaker A: We can even use a border radius of something like 50% to create a circle or ellipse shape shape. By just adding a ton of border radius, you can see that it doesn't necessarily need to be a pixel value. And if we scroll down, I just want to show that it has some cool examples. You can create like cool shapes like this. And I also just wanted to show they have a cool codepen demo here that has an input range slider. And you can see that I could slide it all the way to zero, I could slide it to three, which is a very subtle radius. Or I could go very far into 30 pixels.
01:58:53.722 - 01:59:26.000, Speaker A: And you can see that that is a very dramatic curve. And you can see that it actually modifies all of them. You can see it is also cool sometimes to just use one. So you can see we have just the border top left radius. That would be cool. If you are kind of grouping these together, you could have two columns, and you could have one column of divs that has the rounded corner on the left side, and then one column of divs that has the top right rounded. So there's lots of different ways.
01:59:26.000 - 02:00:00.970, Speaker A: Or you could even have four like this. That looks pretty cool too altogether. And you can see that there's a lot of other examples of how border radius can be used. Lastly, I wanted to show one more article here talking about border radius. This is from Mozilla again, and they have a cool little demo here I just wanted to show. Again, all of these are not using pixel values. As you can see, a lot of them are using percentage and it can get pretty complicated with setting our border radius.
02:00:00.970 - 02:00:50.612, Speaker A: You can see that this first one just says 30 pixels all the way around. If I click on this one, that's 25%, 10%, and this one uses a different value for each corner and you can see that it creates a very unique shape. We can go 10% divided by 50% and we can even set these two and then have this be for the other two values. And we can even have something that is very unique looking something like this. There are also tools that can do this for you automatically if you just move some sliders around. So we'll also actually show some tools that can build cool border radiuses for you without you having to figure it out. So I just wanted to touch on that.
02:00:50.612 - 02:01:34.040, Speaker A: There are a lot of different ways you can use border radius. We will talk about it more later on in the course, but I just wanted to show that there are a lot of possibilities. And with border in general, you can see on the left side here they have a lot of articles that are just dealing with border. So if you see here, they have all of these articles related to border. There's a lot of depth to basically everything in CSS. So there's definitely a lot of room for exploration and experimenting, and I definitely encourage you to do that. But for now, we're going to start with something that is a little bit more basic and we're going to work our way up to these more advanced border radius options.
02:01:34.040 - 02:02:31.100, Speaker A: So now let's dive into a codepen example and we're going to create something in order to kind of show off the different border styles as well as some margin padding stuff and our border radius. First, I actually want to show you a cool trick that is present within codepen but also in visual studio code. And we're going to be using it a lot throughout the course. And this is a shortcut. When you're creating elements with classes or with ids, you can actually do it as you're creating each element. So to do this, I can just type div and then dot container for my class and then I can press tab and it's going to create a div with the class of container. Pretty cool, huh? That will definitely save you some time, so use it as often as you can.
02:02:31.100 - 02:03:17.820, Speaker A: Next, I'm going to make a series of divs with some classes that are going to show off our border styles and also our padding margin examples as well. So I'm going to do a similar thing, div dot solid tab and then I'm going to write out solid for our example here. I'm going to fast forward through this section because I'm going to create about twelve of these. So we're going to fast forward through this. Okay, so that's it for our element creation here. I'm just going to drag this a little bit so we can see everything. You're doing great so far, but let's take a bit of a breather and we'll pick up the rest in the next lesson.
02:03:17.820 - 02:04:01.698, Speaker A: Okay, let's dive back in. Now we're going to create some css. We're going to start with our body. So as usual, we're going to change our font family. I'm not a huge fan of the default HTML font to arial. And we're going to also have a backup of whoops sans serif. We're going to change the background color to be white smoke.
02:04:01.698 - 02:04:34.300, Speaker A: I'm still using the color names of. And next we're going to style our container. So dot container. So parent element here. We want this background color to be white. So you can see that white smoke and white are different once you have white as well. So to start with, I'm going to have a padding of 50 pixels.
02:04:34.300 - 02:05:12.628, Speaker A: So you can see that that puts everything into the center of our container by 50 pixels on every side. So that is a nice simple padding. We're going to set a border radius of ten pixels. So in this case, we actually aren't even bothering to set a border so we could. In this case, though, technically this is why you would use something like border none. So it has no actual border that is taking up any space. But we are still using the border radius.
02:05:12.628 - 02:06:24.050, Speaker A: But you could just exclude it and it would still accomplish the same thing of having our rounded corners here. Next, we're going to set a width of 80%. In this case, it's going to be 80% of the page here and we're going to set a maximum width and this is going to be, let's say 600 pixels. You can see that right now it's not doing anything to change, but you can see when I drag it enough that we actually are not getting any bigger as I'm expanding the viewport here and you can see that even if I condense the viewport, we still have some space on the side because our width of our container is only 80% and we haven't set any margin yet. But we're going to do that now. So we're going to set our margin value to be 100 pixels. You can see that that pushes everything over quite a bit on both sides.
02:06:24.050 - 02:07:16.508, Speaker A: It needs to kind of be stretched out to make sense. We're actually going to maybe change the width to be maybe 70% instead of 80%. So we have a little bit more room here. And you know what, I'm going to make the max width actually 500 pixels because we don't have a ton of screen real estate here, but you can see that we have something that fits within our space here. I could also then actually add another margin so I could add margin left if I want to. I have done this in the past where I have an existing margin, which is on all four sides, but I want to just change one of the sides. So I can do that by just adding a second margin left, which is going to override this because it is below.
02:07:16.508 - 02:08:00.278, Speaker A: It's the last one in the cascade. In this case, I'm going to make it maybe 150 instead because we don't have a ton of screen real estate. And you can see that the margin on this side is a little bit bigger here. And next, we're going to move on to styling our div element. So we're going to style all of our divs here. We're going to set our background color to be Dodger blue, one of my favorite colors to use here. And now we can actually see the separation between our div elements and our container.
02:08:00.278 - 02:08:29.280, Speaker A: So our container has that 50 pixels of padding all the way around. That's why we're seeing the white color. But now our div itself has its own background color. We're also going to then change the font color to be white so we can see that a little bit better. And we're going to add some padding within our div element. So 15 pixels all the way around. So you can see that that spreads out each one nicely here.
02:08:29.280 - 02:09:03.676, Speaker A: We're going to have a border width now of five pixels. We're going to set this just by itself. You can see that this doesn't change anything because we haven't set the border color yet. But now we're going to set the border color. So this is me just doing each one on its own. We could just use the border property to do all of them at once, but I just wanted to show doing them individually here. So we're going to say that this could be dark blue.
02:09:03.676 - 02:09:43.478, Speaker A: So the reason we're going to do it individually also is because we are going to add the style actually for each one of our classes. So you can see that without the style, we're still not actually going to see anything. We will get to that as we are styling each one. Next, I'm going to use text align center. This is a very important combination to know. A lot of stuff gets centered in CSS, specifically text, but you can use it a lot, especially for something on a smartphone, things like that. I will add a margin bottom.
02:09:43.478 - 02:10:18.808, Speaker A: So we just want some margin on the bottom of ten pixels. And this is going to separate each one of our divs here. We have nice separation here now. And then I'm going to add a border radius of ten pixels to each one. Okay, so that's already looking quite a bit better than where we started. Now we're going to start styling each one of these individually. So below this we're going to start with our dot solid curly brackets entertainment.
02:10:18.808 - 02:10:52.570, Speaker A: And we're going to have our border dash style and it's going to be solid. And so you see, as soon as I do that, it actually gets bigger. So our border width is five pixels. So on the top and the bottom, this essentially grew by ten pixels. Okay, so below this we're going to do our dashed border style. Dashed. You can see we have our dashed border here.
02:10:52.570 - 02:11:40.474, Speaker A: Maybe I will just copy and paste this. So now we want to change this to be dotted and dotted. And you can see that we have little circles instead of lines. Next we have our double. So you can see that we have two solid lines here. Now, moving on, we have our groove. So you can see that this is the start of our three d one.
02:11:40.474 - 02:12:13.218, Speaker A: So you see that you actually have black and the navy blue. And you can see that they actually alternate in the corner here and alternates in the other corner here. Try to have a bit of a 3d effect. It is very subtle, but that is kind of the point of this. And we'll scroll down here. Next we have ridge. So you can see that this is another one.
02:12:13.218 - 02:12:35.890, Speaker A: It is very similar. The only difference is that the black line basically flips. You can see on the left side, the black line is on the outside, and on this one, the black line is on the inside on the left. So it's basically the opposite. But it is very similar to groove. And then we're going to do inset here. Inset.
02:12:35.890 - 02:13:03.820, Speaker A: Inset. And you can see similar idea it has, though, just a big black line here. And then the blue line on the other side. And then outset is going to be the opposite of this. So outset and outset. Yep. So it's just the flipped version of that.
02:13:03.820 - 02:13:48.060, Speaker A: And now I'm going to show you something that is a little bit different. So for our mix dash border. So we can actually do this by adding in just four different styles here. So for our border dash style. We can start by having dotted and you can see that that's going to make everything dotted here. But then if we add dashed, you can see that the dashed is on the left and the right. So again, this is pairing top and bottom and left and right because we have two values here.
02:13:48.060 - 02:14:27.430, Speaker A: But then if we start adding more values, you can see that solid becomes on the bottom. So we have dotted on the top, dashed on the left and right because there's only three options. So this is still taking the left and right values. Then we have solid. But I can go ahead and add a fourth one and we can use the double one here. And that is how you would have for different borders. I can't really think of a use case for this, but I just wanted to explain that you can add multiple style values to one border style property.
02:14:27.430 - 02:14:56.852, Speaker A: Okay, so that's it for our main border examples. The one other thing I wanted to show. Oh, I missed one here. I missed my left border is the next one. So one more border example. So for my left border here, as I said before, I want to take away my border radius. So I have my border radius set on my div here.
02:14:56.852 - 02:15:31.710, Speaker A: And that border radius is ten pixels. But let's say that I want this one to not have any border radius. I can actually override this with border radius and unset. So you can see that it removes the border radius. So that's why we would use something like unset when we have something that we want to get rid of on one specific one. But we have styled all of a certain element in a more general way. This is how you would have it be different and more specific.
02:15:31.710 - 02:15:56.680, Speaker A: Next, I will just give this a border left. So I also want a different width. So I'm just going to do this all over again. So ten pixels. I want it to be solid and I still want it to be dark blue. So you can see that we can set the three values also on just the border left. So you can see here we just have a border on the left.
02:15:56.680 - 02:16:31.518, Speaker A: Okay, let's look now at our padding and margin examples. I'm going to go ahead and actually remove my extra margin left here. And in general, I'm actually going to make this margin a bit smaller just to get some more room here so I can stretch this out a little bit more. You know what, I'll actually make it smaller still 20 pixels. Okay. But I want to have it be a little more balanced. So let's use this to balance it.
02:16:31.518 - 02:17:03.481, Speaker A: Let's say we want the margin left to be 30 pixels, 35. So sometimes it is just trial and error when you're doing CSS. So that's kind of centered for now in our current view and. Yep. So we have our padding example here and we want to showcase this padding and this margin here. So we're going to go down to the bottom of our css here. And the first thing we're going to do is we're actually going to change the color just so that this one stands out a little bit more.
02:17:03.481 - 02:17:31.788, Speaker A: Padding dash example. So I'm actually going to unset the border radius here as well. Border radius set. I'm going to change the background color. So background color, I'm going to make it light gray instead. And I'm going to make the color of the text black so that it's more visible. And now I'm going to add some border back.
02:17:31.788 - 02:18:13.312, Speaker A: So border, let's say I want two pixels solid black and I want to add the padding that I see here. So we're going to add padding ten pixels. So again, if I add my padding here of ten pixels, it's overriding the div value, which I believe was 20 pixels, 15 pixels. So you can see that it's actually a little bit smaller than the rest for now. That's because it's using ten pixels all the way around, which is less than 15, of course. But I'm going to add another value here. And you see now it's adding the top and bottom is ten and the left and right is 20.
02:18:13.312 - 02:18:35.740, Speaker A: We're not noticing it on the left and right because we have the text centered. So let's say that I did text align unset here as well. So you can use unset. Actually, I guess I have to set this explicitly. I'll make it left. So you can see that if I remove this 20 and I add it back. So you see right now it's ten pixels, so that's less.
02:18:35.740 - 02:19:14.910, Speaker A: If I add 20 pixels, it adds it to the left side there. And then let's say I'm adding 30 pixels. So that's to the bottom, as you can see. And then if I add 40 pixels here, that is adding it so the order is top right, bottom left. So that's why you can see that the left value increased when I added that fourth value because it doubled from basically 20 to 40. 40. Okay, so that's it for the padding example and we'll move on to the margin example here.
02:19:14.910 - 02:20:04.912, Speaker A: So I'm actually just going to copy all of this here, copy that, paste it here. And now we're going to change the margin values. Same idea. We're going to use four values again. Top, right, bottom, left. So again, if I do it one at a time, you can see that it's adding the 40 pixel margin all the way around. And then if I add two, the top and bottom become 40 and the left and right become 30, and then I can do 20 pixels and then ten pixels, and you can see that it is just moving around in place.
02:20:04.912 - 02:20:45.214, Speaker A: So we have our top margin of 40 pixels, our right margin of 30 pixels. So you can see we have a bigger space here. Bottom is 20 pixels, which is hard to see because there's nothing underneath. And then we have ten pixels only on the the left side here. Okay, so that's basically it for this lesson. We dove more deeply into box model, exploring our border styling here, as well as looking a little bit closer at padding and margin. All right, so in the next one, we're going to dive into talking about our position property.
02:20:45.214 - 02:21:21.830, Speaker A: I'll see you in that one. Bye for now. Alrighty. So in this one, we're going to be talking about the position property. We're starting out here on w three schools and you can see that they have an example right here that is using the value of. Absolutely. And you'll also notice that it has a left and a top value as well.
02:21:21.830 - 02:22:08.418, Speaker A: So it's important to note that basically, for this to be very effective, you need to also have either a top, right, bottom or left value to go along with your position value to actually move the element on the page. So we're going to start off here by actually scrolling down and learning a little bit more about each of the property values. So the first one up here is static. This is the default value. It means the elements will render in order as they appear in the document flow. So this is basically the same thing as actually not setting a position value. The next one up is position.
02:22:08.418 - 02:22:56.608, Speaker A: Absolutely. The element is positioned relative, though, to its first positioned ancestor element. So basically you would need to have a parent element and then your child element nested inside of that. But the parent element needs to also have a position value, so it can be absolute, fixed, relative or sticky. Most often the parenthood element, though, will have the relative value for the absolute value of the child to then work. Next, we have the fixed value here. The element in this case is positioned relative to the browser window.
02:22:56.608 - 02:23:39.730, Speaker A: So it means whether you scroll into view of that element or not, it will always remain in the exact same spot on the page. Next we have position relative. The element is positioned relative to its normal position. So wherever it normally would have been by default, you're then able to kind of nudge it to the left, to the right, top or bottom. In this case, if you're adding a positive pixel value. So if we have left 20 pixels, that means it adds 20 pixels to the element's left position. And what that actually means is it's actually pushing it over to the right.
02:23:39.730 - 02:24:34.230, Speaker A: And if you add a negative value, so if we had negative 20 pixels, it would actually pull it to the left. And that is the same for top, right and bottom as well. We'll explore that when we get into our codepen example. And the last main one here that we have is sticky. And this actually toggles between position relative and position fixed, depending on the scroll position. So it is positioned relative until it reaches a certain position on the viewport and then from there it sticks in place, similar to using position fixed. So this is often used on a navigation menu or a logo at the top of the page and it's kind of floating up there.
02:24:34.230 - 02:25:15.680, Speaker A: And then as soon as you scroll down, it gets locked to the top of the page and then maybe it gets a little bit smaller. We're going to have an example of that later on in the course. You can see that we have two more values here. We have also initial and inheritance. We're not going to talk about these because these are actually global values that apply to a lot of different properties. But basically it sets it to the default value or it inherits this property from its parent element. Okay, so we're going to move on from here to our other article here from Mozilla developer.
02:25:15.680 - 02:25:53.706, Speaker A: And in this one, I just want to point out it has a good demo here at the beginning of this document. And you can see that it has the four main different ones. Here we have static. So you can see that if I scroll, everything just stays here. It's this red and yellow box that is targeted with this position property. Next, if I click on the position relative and we have the top 40, left 40, you can see that it actually moved down. So closer to the bottom it is kind of opposite.
02:25:53.706 - 02:26:24.042, Speaker A: And you can see that it also moved closer to the right, even though again, we're using the left value. So that is something to keep in mind. When you add a positive value, it actually kind of does the opposite of whichever property of the direction you have selected. And then we're going to click position absolute. And you'll notice something very different about this. You'll notice that these two blue squares actually came next to each other. So if I go back to position static, you see how they are here.
02:26:24.042 - 02:27:04.872, Speaker A: Even in position relative, these blue squares haven't moved. But when I click position absolute, you can see that they have come together as if this object wasn't even there. So that is the unique thing. Thing about using position absolute is that that element will actually no longer take up space on the page. So this is great if you need to actually overlap another element in behind. That is a perfect use case for using position absolute. And then lastly, position sticky, which is also going to kind of show position fixed.
02:27:04.872 - 02:27:58.100, Speaker A: So you can see that it looks like our static position or relative position here. And then when I scroll you're going to see it's fine for now, but then when I reach a certain point it will actually just stay fixed there and it won't move from that spot on the page. So that is position sticky. Okay, so now we're going to go on to our codepen example here and we're going to test these out a little bit in action. So I'm going to have a starter template that I'm going to link within the course. And basically all it's going to start out with is the HTML. So you can see that we have a container class parent div here and then we're going to have a static example, a relative example, the container.
02:27:58.100 - 02:28:35.890, Speaker A: Absolutely. For our class absolute. So remember I said that the parent needs to have a position, usually position relative for the position absolute to actually work properly. Next we have our fixed position and then below that we have our sticky container with our class sticky and our content. We need this to actually be able to see it scrolling. Okay, so you can see that it just looks like some text for now. But now we're going to add some css together to explore these different position properties.
02:28:35.890 - 02:29:24.782, Speaker A: We're going to start out with styling our body with the usual font family and arial comma sans serif. And we're going to add a padding of 50 pixels all the way around. And the other thing we're going to do that we don't normally do is we're going to add a height to the body and in this case we're going to make it 200 bh. So VH stands for viewport height, which basically means we're making it twice as tall as the screen. So think of it as percentage. But I for the screen. So this from top to bottom is 100 vh, so I made it 200.
02:29:24.782 - 02:30:03.340, Speaker A: So you can see now that I can scroll down and there's a bunch of whitespace here. So that's going to be to help show us the position fixed because we're going to put it in the very bottom corner. Okay, so I feel like we've tackled a lot in this video so far. Let's take a bit of a break and we'll pick this back up in the next lesson. I'll see you then. Bye for now. Okay, let's dive back in.
02:30:03.340 - 02:31:21.670, Speaker A: Next we're going to go on to our container and we're going to give this a background color of white smoke as we usually do, and a padding of 20 pixels and a width of 80%. And we're going to give it a margin of zero and auto. So that means we're giving it a top and bottom of zero and then a left and right of auto. So you can see that when I remove this, you'll see that there's extra space here and then less space here. By adding this margin with the auto value, you can see that it actually centers it within the page. Okay, next we're going to go ahead and target all of our different classes here together because we have some shared properties we're going to have. So we're going to do our static class comma, our relative class comma, our absolute class comma, our fixed class comma, and then our sticky class.
02:31:21.670 - 02:31:59.458, Speaker A: And then we're going to assign some properties that will be common to all of them. We're going to have background color of Dodger blue and text color of white. And we're going to add some padding here, ten pixels. Spread that out a little bit. And then we're also going to add a margin, 20 pixels top and bottom and zero on the left and right. Okay. And next we're going to start with our relative one.
02:31:59.458 - 02:32:30.010, Speaker A: So for static, it's just going to be static and then position static. We'll write it out. But as I said, you'll see this actually does not change anything. It's basically as if you didn't add anything when you just set it to static in this case. But we'll go ahead and leave that there. Next, we'll go to position relative. So in this one, position is going to be relative.
02:32:30.010 - 02:32:57.160, Speaker A: And then I'm going to do left 20 pixels and you can see that it moves it again towards the right. So think of it, you're adding to the left. And then if I did top ten pixels. Again, I'm adding to the top and you can see that it actually pushed it down and to the right. Again. If I wanted the opposite, I would use a negative value. So that actually brings it up and then that actually brings it left.
02:32:57.160 - 02:33:36.430, Speaker A: So something to keep in mind about positive and negative values related to position. Next, we're going to go on to our absolute example here. And we're going to start out with the container. So container dashboard absolute. And for this, we want to actually set this as position relative. We're going to give it a height of 100 pixels and we're going to give it a different background color so that we can actually illustrate the parent container here. So we're going to make it light gray.
02:33:36.430 - 02:34:22.582, Speaker A: So you can see now this is the container that it is sitting inside of. And now we're going to actually set our absolute class here. So position, I'll maybe position absolute and then we're going to say top 20 pixels. So you see that actually, before I continue, you see, I'll comment this out. Just when I added position absolute, it did actually make it less wide. Go back even further. So you see that it was just sitting at the top here and it actually decreased the width.
02:34:22.582 - 02:35:12.280, Speaker A: You can set the height specifically or the width specifically, but if you don't, it will actually just take up the amount of space that is necessary. So if we go ahead and do absolute, you can see that it kind of shrinks. And if I add the top value, you see that it pushes it down 20 pixels. So we already had some margin going on here. And then if I just go right 20 pixels as well, you're going to see that in this case, it again actually puts it 20 pixels from the right corner here. So if I actually did this as zero, this will maybe be more illustrative. It'll just start within the parent container at zero pixels on the right side.
02:35:12.280 - 02:35:40.100, Speaker A: Maybe we'll just leave it at that because I think that shows it a little better. And you know what? I'm going to set this to zero as well. You can see that we actually have some padding inside here and some margin inside here. So that is what is also happening here. We have margin on the outside. So I'll actually remove the margin here. So we're going to go margin zero.
02:35:40.100 - 02:36:23.924, Speaker A: So we'll get rid of the margin to show that a little bit better. And you know what? I'm actually going to change this to bottom so that it's in the bottom right. Okay. So I hope that that makes sense it is positioned within our parent and we're setting exactly where it is starting from. So bottom zero, right zero puts it in the bottom right corner. Next we'll move on to our fixed. So I'll scroll this HTML down a bit and if we go to our fixed class here, we're actually going to change the background color and this is going to be orange red.
02:36:23.924 - 02:37:11.900, Speaker A: I want this to stand out a little bit more. And we're going to go position fixed. And again, as soon as I do fixed position, you can see that it no longer takes up the full width here like it does by default. It just shrinks to the size that it needs to to have its content visible. And then I'm going to go bottom 20 pixels and then we're going to say right 50 pixels and then a Z index of 1000. So Z index, we'll talk a little bit more about it. But basically it is think of every element that you have on the page as a layer that stacks on top of each other.
02:37:11.900 - 02:37:41.010, Speaker A: So Z index controls that stack. So having a higher Z index will put it above every other object. So you see that we're 20 pixels from the bottom here, but we have some paths, we have some margin, actually. So you know what, I'm going to also get rid of the margin on this one. So we'll say margin zero. And you see that that's actually 20 pixels now from the bottom and 50 pixels from the right. So let's actually set this to be 20 and 20.
02:37:41.010 - 02:38:19.250, Speaker A: Yeah, so it's equal distance. And now you'll see if I scroll, it doesn't move. So that's what fixed position will look like. And next we're going to add our sticky example and that's going to take up a little bit more space and you'll see why I added the Z index in a second here. So we will start out with styling our sticky container. Sticky container. And we're going to give this a height of 400 pixels.
02:38:19.250 - 02:39:01.660, Speaker A: And you can see now why ahead of the Z index. You can see we have our gray box here and we have our fixed example that is actually over top of that. We're going to set our overflow value to auto. And the reason we need that is we're going to have our content div here and we're going to need it to be scrollable. So that is the point of adding overflow auto so that we can have a little scroll bar within this div here. So we're going to scroll down again here and add the rest of our classes here. So we're going to go with sticky next.
02:39:01.660 - 02:39:43.548, Speaker A: And this one is going to be, of course, position sticky. It's going to be top 20 pixels. And we're actually going to change the background color as well to be our orange red. And you can see that that's changed there. Next. Last one, we're going to add our content class and we're going to give this a height of 400 pixels. And you can see as soon as I do that, I've added this scroll bar here and we're going to go ahead and give it a background color just so that it pops a little bit more dodger blue.
02:39:43.548 - 02:40:37.546, Speaker A: And then our font color is going to be white. So you can see if I stretch this now the difference with sticky and fixed, so you can see when I scroll this, you'll see that it stays sticking there. But you'll also notice that it actually is the full width. Whereas if I were to just use position fixed, you see that it is only the width of the content. So you can see that it is a true hybrid between position relative and position fixed. We'll get into a more practical example again later on in the course when we have a navigation bar that is going to stick to the top of our page. Okay, so that's it for this lesson on the position property.
02:40:37.546 - 02:41:27.082, Speaker A: In the next one we're going to dive in to the display property. All right, I'll see you in that one. Bye for now. Okay, so moving on in this lesson we're going to be talking about the display property. So we're back here again on w three schools and we're actually going to be talking about specifically these four values. Display none, inline block and inline block. There are other display values, but we are going to get to those later in the course.
02:41:27.082 - 02:42:21.430, Speaker A: So you can see if we scroll to the property values, there's a lot of them, there's a bunch of them that are associated with tables, which we'll get to later. And there's two very important ones. Flex, which deals with flexbox, which will have a whole module on later in the course, and grid, which deals with css grid which will also have its own module later on in the course. So for now we're just going to stick with these first four basic display values. The first one is inline. This displays an element as an inline element, something like a span, and any height and width properties will have no effect. So that means it will only take up the amount of space needed to actually show the content of that element.
02:42:21.430 - 02:43:25.036, Speaker A: The next one is display block. This is going to display an element as a block element, kind of like a paragraph element. It's going to start on a new line and it's going to take up the whole width of the container that it is in. Next we have inline block, which is a combination of the two. So it is an inline level block container, meaning that the element itself is formatted as an inline element, but you can apply height and width values. So that means that by default it's not going to take up the full width of the container, but you can add the height and width values to make it larger than just the content which you would see in an inline element. And then lastly down here we have display none, and that just means that the element is going to be completely removed and it's not going to take up any space at all on the page.
02:43:25.036 - 02:44:19.516, Speaker A: This is something that is usually helpful used with JavaScript to toggle showing and hiding certain elements under certain conditions. You can also see that we have initial and inherent just like we had on our position property, and again it sets to the default value or inherits from the parent element. We'll get more into that later on in the course. Moving on to our Mozilla example here, you can see that they have a nice little place to play around with this as well, like they usually do. You can see that display block here it is making it the full width of the container. If we do inline block, you can see that it takes up the amount of space needed. There's no height or width property set and display none.
02:44:19.516 - 02:45:15.958, Speaker A: Of course it's just going to disappear. And then as a little bit of a preview, if we had display flex by default it's still going to take up the full container, but it's going to group them together and display grid is going to again take up the full space, but in this case it's going to make them the full width, but it's going to stack them in a column. Okay, so let's move on to our codepen example where we play around a little bit with these four display property values. Okay, so you can see here that we have another starter template that's going to be linked within the course. And again we have all of our HTML written out here. So you can see that we have a parent div with the class container. We have our div with the class of block to show our block level element.
02:45:15.958 - 02:45:50.880, Speaker A: We have a span with the class inline and then another span with a class inline grouped together. Here we have a div with inline block as the class and then we have a div with the class of none. So you shouldn't be able to see this. Of course, right now you can because we don't have any css yet. So let's start adding some css. So again, we're going to start with the body as we have been usually. We're going to set our font family to arial comma sans serif.
02:45:50.880 - 02:46:37.970, Speaker A: As usual, we'll add 50 pixels of padding all the way around. And we're going to change our background dash color to white smoke. Whoops, white smoke. Next we're going to move on to our container and the background color here is going to be white. Padding is going to be 20 pixels. We're going to give it this, a border radius of ten pixels to add some rounded corners here, make it look a little bit nicer. And we're going to have a width 80%.
02:46:37.970 - 02:47:15.490, Speaker A: And you can see that it's uneven. There's less on the left, more on the right. So just as before in the last lesson, we're going to add margin zero, top and bottom, and then margin auto to left and right. And you see that that is going to center it for us. And now we're ready to tackle our first one here, which is going to be display block. So we're going to target our block class and display block. The background color is going to be Dodger blue.
02:47:15.490 - 02:48:02.140, Speaker A: Our text color is going to be white. We're going to add some padding here, ten pixels and our margin top and bottom, 20 pixels and then left zero. So you can see that this is a block level element. If I stretch this, it will take up the full width of our container here. Okay, so we'll just maybe leave it like that. And next we're going to move on to our inline class. So inline, we're going to do display in line of course, and you're going to see no effect here yet.
02:48:02.140 - 02:48:57.160, Speaker A: And we're going to have the background color be orange, red color is going to be white, and the padding is going to be ten pixels. So you see, now that we've added that we have the ten pixel padding, you see that we actually have two different elements. We have one and then we have the other one. So we're actually adding ten pixels of padding right here and then ten pixels of padding left here. So now that is spreading it out and you can see that again, it only takes up as much space as it needs to here. Now we're going to move on to the inline block element. So inline dash block and display inline dash block.
02:48:57.160 - 02:49:56.528, Speaker A: And you're going to see now that this is going to bump over to the same line as this previous one here. And we're going to change this background color to be different background color and do lime green to better illustrate it. Font color is going to be white, padding going to be ten pixels again, margin is going to be 20 pixels and zero. So top and bottom 20 pixels and then zero for the left and right. And I can actually set here the width like I said. So you'll see now that as I actually make this larger, that because I set a percentage width, it's going to change with the width of the parent element. So you can see this inline element, the width never changes, it just maintains the width of showing the content.
02:49:56.528 - 02:50:50.548, Speaker A: But in the inline block I can customize that width to change with the size of the container. I could also set a pixel width, but in this case I'll just leave it as a dynamic width there. And then lastly our display none. Very simple, none and then display none and then it disappears. Okay, so that's basically a good overview of these four main basic display classes of block inline, inline block and display none. In the next one we're actually going to tackle a practical project that is going to bring a few things together that we've learned in this module, as well as a little bit from some of our previous modules. Okay, I'll see you in that one.
02:50:50.548 - 02:51:46.560, Speaker A: Bye for now. Okay, so we have a fun one in this lesson. We're going to be learning how to create a video background. So what that means is you're going to have a video and then you're going to be able to put text, page, title or whatever you want over top of it. We're going to be utilizing our knowledge of the position property to accomplish this, and this is perfect for the landing page for your developer portfolio or for a business website. There's a lot of different ways you can use this video background that I'm going to show you. Okay, so let's dive in.
02:51:46.560 - 02:52:38.590, Speaker A: First we're going to start by creating a video element. So I'm going to type video and press tab, and we're going to go ahead and use our source element as we have before. So inside of our video element we're going to create a source element and we're going to give this a source attribute and then we're going to go over to mix kit. So this is the website I showed previously that has free stock videos. So we're going to go ahead and we're going to click on nature again. Last time we used the waterfall in the forest video. This time I think I'll pick the forest stream, but feel free to pick any video that you want from Mixkit or if you have another website that you want to try to get videos from, that is fine.
02:52:38.590 - 02:53:16.890, Speaker A: I'm just going to click on this one and then right click and I'm going to copy the link and then we're going to go back to codepen and paste it in our source here. Okay, so you can see that we have a video here. Right now. It is not working and you can also see that it is too big. It is kind of the wrong size. We're going to fix all of this. So I mentioned before that it was necessary to have the controls attribute on the video, but that is only necessary if you need to actually be able to obviously control it.
02:53:16.890 - 02:54:04.472, Speaker A: We don't need controls if we are going to autoplay and loop. If you recall though, if I just have this, it's not going to work. You must also have the muted attribute for it to actually play on its own without controls. So you can see here that it's playing and we don't have any controls in the left side. So this is how you would do it if you were doing something like a video background that you want to autoplay. Again, keep in mind it needs to be muted and it also makes sense to loop because it's only a 22nd video in this case. And likely you're going to have a short video for a video background because you also don't want a very large video file size.
02:54:04.472 - 02:54:41.430, Speaker A: So something to keep in mind as well. Next, we're going to create an overlay. So we're going to create a div that's going to overlay over top of this and it's going to basically be a black container that's going to stretch the whole size of our screen. And it's going to be a little bit see through. So you'll still see the video, but then it'll make it easier to read any text that you're going to put on top of your video. So we're going to create a div for that. And then remember our trick, we can actually type out the class.
02:54:41.430 - 02:55:12.260, Speaker A: So I'm going to do div dot overlay and press tab. And it's going to create a div with the class of overlay. And then lastly I'm going to just create an h one here with our title. So I'm just going to say your title here. Okay, so that's it for our HTML. You'll see if I scroll down that the title right now is on the bottom. But we actually want the title to be in the middle of our video here.
02:55:12.260 - 02:55:57.924, Speaker A: So that means we need to do some css work here. So let's dive into the CSS pane. We're going to start out with the body here and we're going to give it a height of 200 vh viewport height. We're going to do this simply to show that our position fixed is going to work and our position absolute is going to work. So it will mean that the video background is going to stay stuck where it is, but you can actually scroll and have a lot of content over top of it. We'll get to that a little bit later. And moving on from here, we're going to actually add a class to our video element here.
02:55:57.924 - 02:56:36.166, Speaker A: So we're going to add a class equal to video background. And we're going to start by targeting this here. So video dash background. And we're going to start with position fixed. As I said, I want the video to stay locked where it is, even if we scroll. And we're going to say right zero and we're going to say bottom zero. And you can see now that it's stuck where it is.
02:56:36.166 - 02:57:05.480, Speaker A: And you can see now that our left and right scroll bar is gone. And you see when I scroll down, the scroll bar is moving, but we can't see our h one. We're going to fix that in a minute. Next, I want to change the width of this. So I want to change it to width 100 viewport, meaning that I only want it to be as wide as the screen. So you'll see that I can actually make it bigger. I can make it smaller.
02:57:05.480 - 02:57:34.594, Speaker A: But you see that we're still seeing the whole video here. So before we were not and now we are. So you can see the whole video no matter what size it is. So VW stands for Viewport width and it works very similarly to viewport height. It is the full width of the browser screen that is available. Okay. And then lastly, we're going to say heightendez auto.
02:57:34.594 - 02:58:10.120, Speaker A: Technically, when you set the width property or you set the height property by default, the opposite will be auto. So this actually didn't change anything. But I'm just writing it out to show you what's actually happening here. Next on our video element itself, we're going to give it a position of absolute. Absolutely. And we're going to give it a top of 50%. And we're going to give it a left of 50%.
02:58:10.120 - 02:58:55.690, Speaker A: And then you can see that that has moved it quite a bit. We're going to do a transform translate as the value bracket -50% and then another -50% and this is a trick to actually center it in the page. So now you'll see that it's over top of our title here. And we have an even space on the top and an even space on the bottom. And if I make this smaller, you see that it centers it in the page instead of before when it was just on the bottom of the page. So that is very important as well. Okay, moving on to we're going to create our video overlay now.
02:58:55.690 - 02:59:31.260, Speaker A: And in this case, we want it to also be position fixed. We're going to give it a left of zero. So we want it glued to the left side top of zero. And we want our height to be 100 viewport height and our width to be 100 vw viewport width. And you can see that if we actually give this a background dash color. I'll just do dodger blue for a second here. You can see that it takes up the entire screen.
02:59:31.260 - 02:59:56.742, Speaker A: So we don't want that though. We want to use our rgba value bracket. And then we're going to make it black. So zero, zero. And then we're going to set the alpha so that it is see through of 0.5. So you can see that everything just kind of darkened a little bit there. You can, of course, change this opacity value as much or as little as you want.
02:59:56.742 - 03:00:12.210, Speaker A: So if I had 0.3, it would be a little bit lighter. If I had 0.8, it would be a little bit darker. It kind of just depends on the brightness of the video that you actually have. So let's say we'll leave it at 0.5 for now.
03:00:12.210 - 03:01:12.960, Speaker A: The other benefit of using this overlay is that it will mask if you have a lower resolution video, which will be better for loading your page more quickly. That is the other benefit of the overlay in addition to being able to read the text a little bit better. So next, we're going to target our h one here, and we're going to give this a position of absolute. But if you recall from the previous one, we actually want to set the parent to have a position of relative. So we're going to do that now on our body here, position relative. So in this case, the parent is the body. And then we're going to do a top of 20%, let's say.
03:01:12.960 - 03:01:31.024, Speaker A: Okay, so that kind of lines up right here, which is great. You can see that it's not quite visible. We're going to make it a left of 40% to kind of center it. Maybe, let's say, I don't know, 30%, 35%. Whoops. 34. Yeah, sure.
03:01:31.024 - 03:01:57.870, Speaker A: Why not? And we'll do a color of white so we can actually see it. That's very important. Okay, perfect. So we can see that better now. And we're going to change the font family to be helvetica. So we're going to do a bit of a different one here, sans serif is our fallback. And we're going to change the font size to be 50 pixels.
03:01:57.870 - 03:02:45.922, Speaker A: Okay, so now that it's a little bigger, maybe we want less of a left here. It's going to be easier to center things when we get into using flexbox and things like that. But this gives you kind of an idea of it being centered. And you can also see now that if I scroll, you see that our content will move. So our h one is moving because it is position absolute, but that our overlay and our video stays exactly where it is thanks to position fixed. And that's also why we added the 200 viewport height to our body, so that I could show that the content will move independently of the video. You can see that we have some white on the top and the bottom.
03:02:45.922 - 03:03:17.278, Speaker A: That is because it is maintaining its aspect ratio. So if we slide it over so that we have our correct ratio and see that our title isn't quite lined up. So we can adjust this again to be, let's say 40%, maybe 35. Yeah, that's pretty close to the center there. So there you have it. We have a video background example here. And again, you could use this on your developer portfolio or any other projects.
03:03:17.278 - 03:04:00.470, Speaker A: It's a really cool way to grab people's attention with a nice video as soon as they land on your website. That's it for this lesson. We have a few more challenges to get through, and then we'll be done with our fifth module. Okay, I'll see you in the challenges. Bye for now. Okay, so in this one, we have a few challenges to wrap up everything you've learned so far in this module. Onto challenge number one.
03:04:00.470 - 03:04:40.208, Speaker A: We can see that we want each block to appear together on the same line. So we have a parent div with the class container. We have a div for block one and then we have a div for block two. In our styling our container width is 100% and then we're styling both block one and block two. With one set of properties and values. You can see that we have a width of 40%, meaning that each block should be 40% of our container. And we have one thing that we need to change I think to make this work.
03:04:40.208 - 03:05:18.542, Speaker A: So I would challenge you to pause the video here, see if you can figure it out. Okay, so let's take a look at our hint here. In our JavaScript pane, the two blocks are stacked vertically. Consider a display value that makes elements sit side by side. So we need to change this value from block. You can see that if we change it to inline they do sit side by side, but we are losing the width. You cannot set a width if it is inline only.
03:05:18.542 - 03:05:59.644, Speaker A: So we actually need to make it inline block. And you can see now that we're setting our widths of 40% each and they are sitting side by side. Okay, perfect, moving on. Challenge number two, I want the button to be in the bottom right corner of the main content div. So you can see that we have a main content div. It has main content here written out, and then we have a button inside of it. With the class of floatingbutton we can see that our main content has a gray background here.
03:05:59.644 - 03:06:44.920, Speaker A: So that means we want our button to be within this gray rectangle in the bottom right corner. And you can see that we have some styling here that we're going to need to fix. So pause the video here and see if you can figure it out. Okay, so there's a few things here that will need to be changed, I think. So the button is positioned oddly in relation to the main content. You need to use the appropriate position property and place the button in the bottom right corner. Okay, so the first thing we're going to do is we're going to change this position to be absolute instead of relative.
03:06:44.920 - 03:07:27.804, Speaker A: So let's see what happens there. Okay, so that I don't see the button anymore if we scroll down, oh, it's at the very bottom of the page. So that's not exactly what we want here. We want it to be within this gray container. So we actually also need to modify our main content class and we need to give this a position of relative. So if you recall, for position absolute to really be effective, the parent element needs to have a position of relative. So we're getting a little bit closer, but you can see that that is still not in the bottom right corner of our gray box here.
03:07:27.804 - 03:08:01.970, Speaker A: So we actually want this bottom value to be positive because we want it up a little bit from the bottom. So ten pixels. Okay, great, we're in there and let's say I just wanted to even it out. We're going to have a right of ten pixels and now it is tucked nicely and balanced in our bottom right corner. So that is the solution there. Okay, moving on to the last one here, challenge number three. So I want the navbar to stay at the top of the page.
03:08:01.970 - 03:08:43.254, Speaker A: So you see we have some content here, we have our navbar here and if we scroll down we have some content at the bottom. But you can see that our navbar is gone. Okay, so pause the video here and see if you can figure it out. Okay, so we're back. Let's take a look at the hint. So review the different CSS positioning property, which one keeps an element in the same place even when scrolling. So as I mentioned a few times, that position sticky is what we would use in a case like for a navigation bar.
03:08:43.254 - 03:09:29.960, Speaker A: So this one's actually pretty easy. Instead of having position relative, we're just going to change this to position sticky. And you can see that now when we scroll, our navbar stays locked at the top there. We could also use position fixed as well. But you see the problem with that is that the content is actually behind it because this is not taking up any space anymore, similar to position absolute. So we actually do need to leave it as position sticky so that it takes up some space on our page and you can scroll still as well and have it still be locked at the top. So it is a hybrid again of both relative and fixed position.
03:09:29.960 - 03:10:10.290, Speaker A: Alright, so that is it for this module. In the next one, we're going to be revisiting a few of our HTML projects that we've already created that we have yet to add some styling to. So the next module is going to be really fun. It's just going to be project based and we're just going to work on adding in some CSS. All right, I'll see you in that one. Bye for now. Hello and welcome back.
03:10:10.290 - 03:11:26.460, Speaker A: So we're on to module number six and this is the last module of our beginner boot camp before we really dive in to the main part of the course. And this is a very exciting module because it is going to be exclusively hands on projects. So if you recall in modules one to five, there were several projects that we only created the HTML and I said that later on in the course we would add some css to make them look way better than they currently look. And that is exactly what we're going to do in this module. So before we dive in, I just want to say that in this module I would like you to try to do some of the styling on your own before actually looking at the next couple of videos where I will actually break down how I am going to style each individual project. So to do this, I want you to consider the styles we've learned so far specifically relating to layout. It's very important.
03:11:26.460 - 03:12:14.124, Speaker A: So that is covering position, display and box model related properties. So to remind you box model is related to margin, padding, borders, things like that. Also, I want you to try to use different selectors and experiment with different properties. Feel free to make it your own. Just try to make it look as good as you can and it doesn't need to look exactly like my examples, even in your finished product. Lastly, I just want to touch on colors, so we haven't really talked about colors too much. I've been using only named colors so far.
03:12:14.124 - 03:12:59.812, Speaker A: I've had a couple projects where I've used colors already. I'm going to link to a resource that has a list of these, but again, feel free to choose your own colors. So at this link you're going to see there's a list of 16 standard colors. So you can see we have black, we have white, we have purple, we have red, we have green. And if you continue scrolling down this page, there's another 150 named colors that you have to choose from. So in my following examples, I'm going to stick with just using named colors. We will have an entire module on colors a little bit later in the course, but for now I'm going to just stick to the named colors.
03:12:59.812 - 03:13:44.418, Speaker A: But you can feel free to use hex code colors if you want, or any other type of colors that you would like. And again, they don't have to match the ones that I have chosen. You can choose whatever colors you like for these projects. Okay, so now I'm going to show you some before and after of the projects we're going to tackle. So up first we're going to be tackling our simple table example. So in the top left you can see the HTML of that simple table example and down here you can see that exact same example but with some css. So you can see that a little bit of styling can go a long way.
03:13:44.418 - 03:14:31.660, Speaker A: We've added some background colors to the table caption to the table headers, to the table footer, even each row has slightly different colors. We've also added a different color when you actually hover over each row. So a little bit of CSS goes a long way, as you can see in this example. So try to make yours maybe look something like this. You can of course alter the colors as much as you'd like, but again, give it a shot on your own, see how far you can get. Next, we have our example where we had our different image elements. This one looks pretty similar, but on the left side you can see our original.
03:14:31.660 - 03:15:20.906, Speaker A: That was just HTML. Obviously the images themselves and the SVG element is doing a lot of the heavy lifting here, so the CSS isn't changing it too much. But you can see that I've made my page title stand out a little bit more by having a background color and then just having my title be in white. I use that same color for the h two for each little section here you can see that I've added some padding and a border to my first picture. Here you can see all the images are centered and that's basically the main things that I've changed. So see if you can try to make something kind of similar to this. Next we have our audio and video example.
03:15:20.906 - 03:16:16.662, Speaker A: On the left here is just our HTML, and on the right here includes our CSS. So I did a similar thing with the title as I did in the last one, and I've also made the video fit any little window that basically I've made it responsive. So instead of it being stuck at this aspect ratio, regardless of what the size of the window is, it will automatically fit in this box. So I think that'll look pretty cool. Moving on, we have our job application form, so again, we have the HTML here on the right, and it doesn't look very good at all. And you can see here that we've made quite a few little changes here. We've added a background color, we've added some box shadow, we have spaced things out a little bit better.
03:16:16.662 - 03:17:03.700, Speaker A: We've made everything the full width here, we've styled our button a bit. So there's lots of little things that you can do to make it look again a lot more professional than just with our HTML here alone. And then lastly, we are going to be looking at our semantic webpage. So this is actually from our very first module. You can see that this is a very dramatic transformation here we have the HTML up here specifically, if you look at the navigation bar. We just have a series of links here, whereas on the CSS version it actually looks like a navigation bar. Our header at the top has a background color and we have our main container that is in its own little div.
03:17:03.700 - 03:17:36.278, Speaker A: That's this little separate container from the background here. And everything has a much better font. In all of these projects, we've added some color to our progress bar. We've made our aside look a little bit different, and then of course, we've added an actual set of styling for the footer instead of just having our footer text here. So those are the five projects we're going to tackle. I'm going to go in this same order that I just showed you the projects. So I would challenge you to start with the table project.
03:17:36.278 - 03:18:15.858, Speaker A: See what you can do on your own before going to the next video where I'm going to show you how I chose to style the table project. And then I would ask you to do the same thing for each one. And then I will show you each one in the next five videos. All right, I'm excited to get started. I'll see you in the next one. Bye for now. Okay, so we're going to start here with the first project.
03:18:15.858 - 03:19:13.210, Speaker A: It is going to be our table example, and this is the code exactly as we left it when we finished with it. In module number two, we have all the HTML, but there is no css whatsoever. I will provide a link to this within this module. Feel free to fork it in your own codepen repository and you can code along with me here now, although I hope that you have taken the opportunity to try to write the css for yourself and try to match how it looked in the first lesson of the module when I showed off the final CSS version. Okay, so to start with, I'm just going to have a brief overview of what we have so far here. So we have our table element, we have our caption here, you can see it here. It has employee directory as the content.
03:19:13.210 - 03:19:42.280, Speaker A: We have our headers here, which are in bold. We have the table body. So this is our table data that is all filled out. And then at the bottom we have our table footer. We have the call span of five. So this is actually spanning all of these columns. Though it doesn't really look like it right now, when we add a background, it will be a lot more obvious and look a lot more like a footer.
03:19:42.280 - 03:20:31.566, Speaker A: Okay, so I'm going to go ahead and minimize this and we're going to focus on our css and we're going to recreate that final version that I showed you starting with our body. So I always like to style from the parent to the child, the top of the HTML to the bottom. So we are going to start, as always, with our body. And we're going to start by changing the font family. And we're going to use Ariel comma san serif. I really don't like the default text that we have without any CSS, so I always like to change that as the very first thing. Next, we're going to add a margin of 50 pixels.
03:20:31.566 - 03:21:05.630, Speaker A: So this will be top right, bottom left, just to give it some nice spacing here. Then we're going to go ahead and we're going to change the background color. By default, it is white. And we're going to use a different one here of silver, which is kind of like a medium gray color. Next, we're going to go to our table, our table element here. We're going to start by giving it a width 100%. So when I do that, you can see that it stretches things out.
03:21:05.630 - 03:21:43.342, Speaker A: And if I were to actually make this bigger, you see that it makes the table bigger. We want to also though, set actually a max width because we don't want it to be this wide because we don't actually have that much in the way of content. So the next thing we're going to do is add a max dash width. We don't want it to be wider than 800 pixels. And you see that it makes it look a lot more balanced there, even when I stretch out my page here. Okay, moving on, we're going to add a margin of 20 pixels. So this will be the top and bottom.
03:21:43.342 - 03:22:14.400, Speaker A: And then we're going to have a margin of auto. And this is basically going to help center it in the page a little bit better. It'll be easier to see once we kind of have our container built out here. Next we're going to add border collapse. Collapse. This is to make it so that everything kind of lines up a little bit better. So I will toggle it off so you can see the difference.
03:22:14.400 - 03:22:51.868, Speaker A: And yep, it'll look a little bit different because essentially we're going to add back this padding, but we want to be able to customize how much padding we have. And you can see that everything got tighter together, but it'll be easier to just line things up better and do it kind of custom. Next, we're going to add some box shadow. This is going to be harder to see because we don't actually have our backgrounds kind of sorted out yet, but we will add a box shadow. Zero pixels. Zero pixels. So we have our horizontal offset and our vertical offset are zero.
03:22:51.868 - 03:23:24.334, Speaker A: And then we're just going to have a 30 pixel spread. So that means it's going to come out evenly on all sides, but we're going to use our RgBA. So our red, green, blue, alpha bracket, zero, comma, zero, comma, zero, and then 0.3. And it's going to make it look a lot more subtle. It'll look a bit nicer once we actually have a proper background. Right now, everything is actually technically silver. So this is actually the same color as everything behind it.
03:23:24.334 - 03:24:08.010, Speaker A: But you can see because we have this shadow here, that everything looks a little bit lighter. But just give it a second, it will look better, I promise. Okay, so, moving on, we're going to now style the table element, the table header element, and the table data elements. So we're going to target all of them and we're going to give them all a border, one pixel solid, and it's going to be light gray. So now, you see, we have the start of what looks like a table here. You can see that there's no padding between anything. It's very tight to the top and bottom here and it's very tight to the left here.
03:24:08.010 - 03:24:35.540, Speaker A: We're going to continue now, and we're going to start by styling our caption at the top, our caption element. We're going to give this some padding. Ten pixels all the way around. And you can see that. That raised it up a little bit there. And we're going to change the font size. And we're going to make this, let's say 20 pixels, maybe.
03:24:35.540 - 03:25:07.450, Speaker A: Yeah, I think that's pretty good. Maybe 25 pixels and maybe 22. Okay, so that's our font size there. Next, we're going to make it bold because it is a title. So we're going to have font weight bold. So there are other ways to make things bold. Of course, this is how you would do it, though, if you can't actually change the element, because we're using the caption element already.
03:25:07.450 - 03:25:38.940, Speaker A: So we're just going to style that with font weight bold. To make it bold. We're going to set the color of the font to be white. Then we're going to give it a background color so that it pops a bit background color. And we're going to go with royal blue, one word. Okay. So we've already added a nice pop of color and you can see that the box shadow at the top is kind of now behind our caption element, but that's okay.
03:25:38.940 - 03:26:15.670, Speaker A: And we're going to continue on now from our caption we're going to look at our t head element. So this is our group for our table headers. And we're going to give this a background color and we're going to use Dodger blue again. One word, give it that nice pop of color. And we're going to make the font white as well. So color white to make that pop as well. Next we're going to move on to our th comma tdelements.
03:26:15.670 - 03:26:52.360, Speaker A: And we're going to add back some padding here. So we're going to have ten pixels on the top and bottom and then we actually want 15 pixels on the left and right. So you see that everything kind of moves over a little bit and then you can see that it is actually kind of misaligned. So we're also going to do text align left so that we have aligned our table headers and our table data. Now it's all lined up very nicely. Okay. So I'd say that this is already looking a lot better than before.
03:26:52.360 - 03:27:33.942, Speaker A: Now we will kind of finish it up. So let's move on now to our table body and let's look at actually our row colors. So we want to actually style. Our even numbered rows will be one color and our odd numbered rows will be another color. So the reason for this is it just makes it a lot easier to read a table when you're trying to sort through and you have like 20 columns. I know we don't have a lot of columns in this example, but it is good practice to be able to style your even and odd number rows a little bit differently. So we're going to go ahead and do that.
03:27:33.942 - 03:28:14.608, Speaker A: We're going to target our tbody, which is our parent of our body, and we're going to target these table rows specifically. So the reason we're using t body is because we have table rows for our header as well and we don't want to target those. And then we're actually going to use a pseudo class here. So we're going to use colon and we're going to type nth child. So that stands for nth child. And then in brackets we're going to put even. So nth means like, you know, 1st, 2nd, 3rd, etcetera.
03:28:14.608 - 03:28:37.840, Speaker A: And you can put in a number value here as well instead. But in our case, you can also put even or odd. Then that will actually just apply to all of them. So I'll change the background color here. Background color and we'll do this as white smoke. And you can see that it changes these. But I could also just put in a number here.
03:28:37.840 - 03:29:04.100, Speaker A: So if I put in one, you can see that the first one changes. If I put in three, the third one changes. So that's what that is also used for. But you can also have the value even to just get every other one starting with the second one. Now we're going to do a similar thing. I can actually maybe just copy this and paste it below. This time we're going to target odd though.
03:29:04.100 - 03:29:43.320, Speaker A: And we're going to go ahead and make this white. And again, now we can see the difference. We have our white here and our white smoke here. So now it is a lot easier to read the table going left to right because every other row is a different color. Okay, now one other trick that we usually add to tables is when you hover over a row, you have a different color that is highlighting which row you're actually on. So we're going to use our t body again. Whoops.
03:29:43.320 - 03:30:29.640, Speaker A: Tbody. And again we're going to use our tr, our table row and we're going to use another pseudo class. In this case we're going to use the hover pseudo class. And in this case we're going to give the background color and we're going to use light yellow as our highlight. And you can see now that when I hover over it, it changes color. So that makes it even easier to read the table when you're going to select one of these and you'll notice that my mouse is the same cursor as always. But usually when you have a hover pseudo class, you want to change the cursor to show that something is different.
03:30:29.640 - 03:31:11.106, Speaker A: Something is maybe clickable. In this case, our table isn't clickable, but a lot of times a table will be, it'll be a way to select something. And so for that reason I'm going to use cursor with the value pointer to change to our little hand here that makes it look like I can actually go ahead and click on it. So I would usually use this on a hover pseudo class in most cases to just show that it's something that could be clicked on. And that is the beauty of the hover. You want to kind of change the color just to give that feedback to the user that again they can click on something. Okay.
03:31:11.106 - 03:31:41.670, Speaker A: And the last thing I'm going to do is I'm going to style my t foot element. So you can see that it already looks a lot better here. You can see that by call span five. My footer is the whole width of all five columns. But we want to actually add some color because this is actually just the silver color from behind it. So we're going to give it a background dash color and we're just going to go black. And of course we'll need to change the text color and we're going to change it to white.
03:31:41.670 - 03:32:13.832, Speaker A: And so now it really pops. Okay, so that's basically it for our css styling of our table here. You can see that the box shadow obviously is a lot more subtle now. But yeah, I would say that that is a, a very big transformation. And our table looks a lot better. All right, so in the next one, we're going to tackle that image elements project that we did in module number three. I'll see you in that one.
03:32:13.832 - 03:32:49.948, Speaker A: Bye for now. Alrighty. So we're on to our second project. This is our image elements project from module three. Again, this is the HTML code that we left off with. I'll provide a link within the module. So, as a refresher of what we had here for our HTML, we have our h one.
03:32:49.948 - 03:33:24.070, Speaker A: For our page title, we have our h two for our section title. We have our image here, and we're actually setting the width and height within the element itself. You remember that we got our images from unsplash. We have our alt description of our image. And then if we scroll down, we have our SVG element section here. We have our h two, we have our description with our paragraph element. We have our svg here written out in code.
03:33:24.070 - 03:34:05.820, Speaker A: And then lastly we have our picture element section here. And we have a couple different sources. So this first one will be if our minimum width is 800, which it is right now, we have our 500 pixel. If it's less than 800, but it's more than 500, we'll have our much lower quality image. We can alter these a little bit if we want to. And then lastly we have our fallback image, which will be applied if it is actually less than 500. So that's something to keep in mind as well.
03:34:05.820 - 03:34:47.100, Speaker A: So that's it. For our HTML, we had absolutely no CSS. So let's add some here. It's not going to make maybe as dramatic of a difference as our table example, but it still will be a difference again. Maybe pause the video here and try to do some styling on your own and try to match the example that I showed previously. Okay, let's get started with our CSS here. Okay, so again, I'm going to start with the body, and we're going to set our font family to be arial, comma san serif, always the nice first thing.
03:34:47.100 - 03:35:20.390, Speaker A: We are going to add some padding to the bottom of our body. So padding dash bottom is going to be 20 pixels. We're not going to bother adding a padding or margin all the way around, but we do want to have some on the bottom here underneath our last picture. Next, we're going to give it a margin of auto. Okay. And we're going to add back some spacing here. You can see everything kind of went over to the left.
03:35:20.390 - 03:35:46.150, Speaker A: We're going to change our line dash height so our text height for our paragraphs. We're going to make it 1.6. So it's going to be slightly bigger. It'll actually affect our header elements as well. It's going to give things a little bit more space. And we're going to give it a background dash color of white smoke for everything. So instead of white, we're going to have white smoke as our background.
03:35:46.150 - 03:36:17.350, Speaker A: And we're going to say that our text color is going to be black, which it is by default. But I just want to write it out to show you here because some of our text color actually won't be black, but we'll change that in a second. Okay, moving on. We'll start with our h one, which is at the top here. And we're going to start with the text dash align. And we're going to give it a value of center. So we're going to center our title right here.
03:36:17.350 - 03:36:44.350, Speaker A: Next, we're going to add padding of 20 pixels. So we want this padding all the way around. You'll see that kind of shifts everything down. And we're going to give it a background dash color of dark cyan. Cyan. One word. And that's going to give us our nice band that we saw in our final example.
03:36:44.350 - 03:37:27.166, Speaker A: And we're going to go ahead and change the font color to be white so that that really pops against that dark cyan. Okay, moving on. We're going to go on next to our h two element here. And we're going to change this color to be dark cyan as well. So it's going to match the background of our h two s. So it's nice to usually add color to our titles to kind of differentiate it from just the paragraph text usually there would be a lot more paragraph text than we're seeing right here. Next, we're going to add some padding.
03:37:27.166 - 03:38:02.592, Speaker A: We're going to have zero on the top and bottom, but we want 20 pixels on the left and right. And so you see that that shifts our h two headers over a little bit, which is very nice. Next we're going to move on to our paragraph elements. So we're going to do a similar thing. We're going to do padding zero and 20 pixels so that we're moving it to line up now with our h two s. So that already looks a lot better. But, you know, we have a bit of a gap here between our section title and our text.
03:38:02.592 - 03:38:48.202, Speaker A: I want to close that gap a little bit so I can actually use position relative. This is a perfect use of position relative. And then I'm just going to go top and I'm going to give that a value of minus ten pixels to actually move my paragraph element up. I'll maybe do -20 pixels just to really show you the difference. So you see it gets a lot closer, but let's go the in between of minus ten. But I just wanted to show you that it was actually moving it up from where it was by ten pixels. Next, we're going to target our image, our SVG and our picture.
03:38:48.202 - 03:39:26.240, Speaker A: So you see right now all three of them are kind of stuck to the left here more. So our image and our picture, but we want them all to kind of actually be in the middle. So we're going to target all of them. So I'm going to do image comma and I've been writing out these comma separators for my selectors on one line. But you can also see it, or you might also see it written like this where they're actually on a new line. And that's definitely helpful when you have a longer selector. So if you're selecting for an attribute as well, you might want to write it out this way.
03:39:26.240 - 03:40:12.190, Speaker A: And I'm going to start with display block. So this is going to make it take up the whole width and I'm going to give it a max dash width of 100%. And I'm going to give it a height of auto and I'm going to give it a margin, zero, top and bottom. But I want auto for left and right. And that is what's actually going to bring it into the center here. Okay, cool. So you can see now that all three images are centered, so everything looks a lot more aligned, which is what we were going for here.
03:40:12.190 - 03:40:54.372, Speaker A: Next, I'm going to go ahead and add a class to my first image here. So we actually are going to modify the HTML a little bit. So you see, I have my image element here at the end here. I'm going to add a class equals first IMG for image. I'll go ahead and minimize that. And I'm going to dot first dash image, and I'm going to give this a padding, five pixels. And I'm also going to give it a border, two pixels dashed this time, and black.
03:40:54.372 - 03:41:19.492, Speaker A: So I'm going to give it a little bit of a picture frame here. So, yeah, I like how that looks. It kind of makes it look like a stamp. So, yeah, I like the look of that. And then lastly, for our SVG element, we're just going to give it a little bit more of a margin. This is, again, personal preference. A lot of CSS is like that, where it's kind of up to you to decide what you think looks good.
03:41:19.492 - 03:41:52.102, Speaker A: Again, your final version of this project might look very different than mine. So there is no right or wrong answer for everything in CSS. There are only things that look good most of the time. But things like colors are very subjective. And the way you want to lay things out, there's a lot of different schools of thought on how to actually do it. There is an art to it, and art is subjective, of course. Okay, so I think that that already looks very good, and I'm happy with that.
03:41:52.102 - 03:42:23.330, Speaker A: I think that that's an improvement, especially the way we had our header at the top here. And I like that our h two s are matching the color of the background of our h one s. I really like the having that background banner on our h one. I like the border on our first image here. And, yeah, I think that that looks really good. So I'm going to stop here for now. And in the next one, we're going to tackle that audio and video example also from module three.
03:42:23.330 - 03:43:04.750, Speaker A: All right, I'll see you in that one. Bye for now. Okay, so we're already onto our third project here. And this is our audio and video example, also from module number three. So this is the code exactly as we left it. We had our HTML, again, only, no css yet. So let's review what we have for our HTML before diving into our styling.
03:43:04.750 - 03:43:36.322, Speaker A: We have an h one here at the top. That is our page title. We have an h two here as our section title for our audio example. We have our audio element here, and then we have our h two for our video example title. And then we have our video element here. You can see that I've actually paused the video. I actually noticed that in recording the last lesson, that having it playing all the time really increased the file size of the video.
03:43:36.322 - 03:44:06.108, Speaker A: So I am actually going to temporarily modify this so that it does not autoplay. But I will add that back when we get back to it. You can see that we still actually have our poster. So I'm actually going to remove the poster for now as well. And we're going to just not have our poster because it is going to autoplay eventually. So we don't need to worry about having our poster there. Okay, so let's get started with our CSS.
03:44:06.108 - 03:44:49.492, Speaker A: There's not a ton of things to style here, but again, I think we can make it look just a little bit better. So we're going to start, as always, with our body, our font dash family, and that's going to be arial again, San serif. Feel free to use other fonts. This is the one that I like to use. But we'll get into a whole module on different fonts and we'll use Google fonts and you'll have a lot, a lot, a lot more options for fonts. Next, we're going to do a background color of white smoke, as we've done a few times. I'm going to save it so it doesn't keep yelling at me about it.
03:44:49.492 - 03:45:33.340, Speaker A: I'm going to have a margin of zero all the way around on our body. We're going to add back our margin slash. We're actually going to center most things, so we don't actually need that margin on our perimeter like we just had it here. And we're going to go ahead and use our text dash align center on our body because we actually want to center literally everything. And you can see that just by that one property value combo that we have centered every element on our page, which is what our final result looks like. Next, we're going to move on to our h one. We're going to do a similar design as the last time, but we're going to use some different colors.
03:45:33.340 - 03:45:58.010, Speaker A: So we're going to start with our background color this time. I'm going to use lime greenhouse, and we're going to have a color of white. We're going to do this also in a little bit of a different order than last time. And we're going to give it a padding of 20 pixels all the way around. And that looks a lot closer to our final version. And we're also going to give it a margin. Bottom.
03:45:58.010 - 03:46:24.568, Speaker A: We just want to space out everything below it and that's going to be 50 pixels. Just get a little bit of separation there. Okay, next, our h two elements. We're going to match the background that we've established here. So we're going to use color, lime green again, one word. So now this text matches a background here, which I think looks good. Okay.
03:46:24.568 - 03:47:08.938, Speaker A: And moving on, we're going to target our audio comma video elements and we're going to have some shared styling here. So we're going to do display block and we want a width of 90% so you can see that it actually made it wider. And you can see that our controls are now wider. But because of our video being 16 by nine, it doesn't go to the corners. So we're going to fix that after. And we're going to have a max dash width of 800 pixels. So it's actually going to make everything a little bit smaller.
03:47:08.938 - 03:47:44.120, Speaker A: In this case, you can't see it because it's very stretched out already, but you can see everything is clinging to the left. But you can see that even though it's 90%, it's not taking up 90% of our screen here. So we're going to put this back to, let's say 950. Why not? That should be enough space. And we're going to have a margin 20 pixels top. And then we're also going to do auto. So that auto value is what is actually centering our audio element and our video element here.
03:47:44.120 - 03:48:16.354, Speaker A: And we're also going to give now a border dash radius of ten pixels. So our audio element actually already does have that. But you can see now that our video element has that too. So it looks, again, a lot more modern. I'll comment it out just to show you here. So we had a regular square corner, but we are actually able to round the corner of our video element as well, which I think looks a lot better. And you can also see that our audio element is kind of getting lost here.
03:48:16.354 - 03:48:39.352, Speaker A: You can see it's kind of blurring with the background. So we're going to add a box shadow to fix this. And this is going to be zero pixels. Zero pixels. You can actually also write out zero pixels as just zero. So I'm going to do that just to save space there. And 20 pixels is going to be my spread.
03:48:39.352 - 03:49:15.640, Speaker A: So you can see now we can definitely see the audio element and we can see the edge of our video element. Even though it was white, and even though our audio element is close to being white as well. But we're going to want to make it a little bit more subtle than that. So we're going to use our RGBA value again, zero, comma zero, comma zero, and then 0.1. And that looks a lot more subtle. But then you can still see that we have the separation here. And we have a clearly defined audio element, even though it is very close to the background color.
03:49:15.640 - 03:49:48.970, Speaker A: Okay. And one very last thing is, again, we want to make this video stretch to fit the size of our container. So we're going to target just the video element this time. And we're actually going to use a new property we haven't seen yet, object fit. And we're going to use the value of COVID We'll get more into that later on in the course, but you can see that it magically now fills the whole container. So I think that looks really great. Okay.
03:49:48.970 - 03:50:15.460, Speaker A: And you can see here, when I go in closer, you'll see that the video is going to keep scaling, which is perfect. That's exactly what we wanted. And I think that looks very, very nice. Very, very modern. Again, subtle changes. We didn't change a ton, but I think that that does look a lot better. I'm going to add back my autoplay so that we can see our video in action here.
03:50:15.460 - 03:50:45.920, Speaker A: And you can see that the controls disappear because it's already playing. And, yeah, I think that that looks really, really great. I think it looks a lot better. I'm going to just zoom out for a second here so you can see the final full page here. But yeah, I think that that looks way, way, way better. Okay, so we have two more projects to get through. And the next one, we're going to be working on our job application.
03:50:45.920 - 03:51:30.562, Speaker A: All right, I'll see you in that one. Bye for now. Okay, so we're on to project number four. This is our job application form. From module number two, you can see that we have just our HTML, just as the others, just as we left it in module number two. So to start with, I'm actually going to make a change to our HTML here. I am going to use command x or control x on Windows.
03:51:30.562 - 03:52:06.950, Speaker A: And I'm going to use control v or command v to actually paste our h one. And I want to actually nest it inside of our form. I'm just going to make a comment here for our title. And the reason for this is. And then I'll just line this up. The reason for this is our form element is actually what's going to act as our container. And I want our title to actually be inside of that form container for our styling purposes, just like in the example I showed you in the first lesson of this module.
03:52:06.950 - 03:52:47.860, Speaker A: Okay, so we're going to go ahead and save that and let's just run through the HTML that we already have here. We don't have any css yet, just like the other projects so far in this module. To start with, we have our title, of course, and then we have a name input and a password input with our labels here. We have our radio input with our labels right here. We have our same thing with our checkboxes here. Next we have our drop down input that has our country selections here. And below that we have our number input.
03:52:47.860 - 03:53:17.090, Speaker A: We have our up and down arrows to change that value. We have our email input. Below that we have our color input. We can pick a different color. We have our file input where we can choose a file, specifically a PDF, and we have a date input. We can click on our calendar and use that to select it date. And then lastly we have our submit input here, which looks an awful lot like a button.
03:53:17.090 - 03:53:59.398, Speaker A: So that's it for our HTML. We actually had some JavaScript which I had showed you in the previous lesson, so I'm not going to go over it again, but you can see that if I click submit application, it tells me that I need to fill out this field. You can see that's because we have the required attribute and we have it actually on quite a few of our inputs here. So we're going to add a little bit more styling to actually show which inputs are invalid. Because right now, technically the password is also invalid. It needs to be filled out, but there is no visual queue to tell me that there is more than one input that I need to fill out. But actually if I hover over it, it will tell me that.
03:53:59.398 - 03:54:42.428, Speaker A: But if I'm not hovering over it, I actually don't know which ones are required and which ones are not. Okay, so you can see we have a fair amount of HTML here, which means we're going to have a little bit more styling than the last couple. And that also means we're going to have a little bit more of a dramatic difference in our end result with our styling here. Again, I would suggest maybe you pause the video here and see if you can attempt the styling on your own and see how far you can get trying to make it look like the example that I showed in the first lesson. Of this module. Okay, so let's get to styling. I'll show you how I would style this.
03:54:42.428 - 03:55:05.294, Speaker A: Let's start again as always with our body and again, as always with our font dash family. And we're going to make it arial again sans dash serif. We're going to make the background color. We're going to use a different color now. Azure. Azure. I don't know how to say it exactly.
03:55:05.294 - 03:55:37.290, Speaker A: Tomato. Tomato. But it's a nice light blue color here. And we're going to have a margin of zero all the way around. You can see everything kind of locks to the left side here. We're going to add back some margins in some of our other elements so we don't need it on the body there. And next we're going to go on to our form element and we're going to start with the background color and that's going to be white.
03:55:37.290 - 03:56:13.190, Speaker A: And you'll see that everything basically now is white. But you can see a little bit of that blue at the top there of our body. But we're going to change that in a second. We're going to give it a border radius of five pixels. We want to round our corners of our form here and we're going to give it a width of 450 pixels. So you can see now it is not quite as wide. And you see that we have some blue on the outside here and we're going to change our margin.
03:56:13.190 - 03:56:45.620, Speaker A: So we're going to have a margin of 50 pixels. And that's going to be for our top and bottom and then for our left and right, we want our auto. So again, that's going to go ahead and center it. You can see that that is nice and centered now. So we're going to move this back over to where it was. I just want to show that that is centering our form element there. And we're going to have a padding 20 pixels.
03:56:45.620 - 03:57:47.174, Speaker A: So you can see that that gives everything a little bit more breathing room inside of our container here. Next we're going to add box dash sizing and we're going to give it a value of border box. So you can see that this kind of shrank everything a little bit. So what this is actually doing is if you recall before in our box model lesson we talked about width in relation to margin and padding. So the width is the width of the content plus the margin plus the padding. So using box sizing, border box, it will actually ignore the margin and padding and it will actually combine it. So that the total width becomes 450 pixels instead of 450 pixels plus 100 plus 40.
03:57:47.174 - 03:58:15.188, Speaker A: It's just 450 total. So it'll actually make the content a little bit smaller. And lastly, we're going to add some box shadow to just make it pop a little bit more because the white and the blue are very close to each other. So we're going to go zero pixels. Zero pixels. That's our horizontal vertical offset, meaning it's going to be balanced coming out of every side. 30 pixels is going to be our spread.
03:58:15.188 - 03:58:40.116, Speaker A: You see that? That spreads it quite a lot. And again, very dramatic. So we want to change that by adding our rgba again as we have been zero comma zero comma zero. That means everything is black. And then we're changing the alpha value, which is the opacity. We're making it 0.2. And you'll see that that adds a much nicer and much more subtle box shadow.
03:58:40.116 - 03:59:10.182, Speaker A: But you can see now that the white of the form is popping a lot more against the light blue. Before, they were kind of blending into each other. So that also fixes that. Okay, moving on to our h one. So the main thing we want to change with our h one, by default, it has a certain amount of margin on the top and on the bottom. We want to actually reduce the margin on the top. There's too much white space here.
03:59:10.182 - 03:59:43.170, Speaker A: I want it to be kind of closer to the amount of white space it has on the bottom there. So I'm going to go ahead and do margin top. So you only want to target the margin on the top. And we're going to give that a value of zero. And you can see that that kind of balances it out a little bit more. So we have kind of an even margin on the top and the bottom, which I think looks a lot better. Okay, and moving on to the next element, we're going to target our label comma paragraph elements.
03:59:43.170 - 04:00:30.716, Speaker A: And we're just going to make sure that that font color is black, which it is by default, but just to make sure. Want to have it be black. Now, next we're going to be targeting our inputs, but we don't want to target every input. We only want to target the ones that have this input field here. So we don't want to target our radio inputs, we don't want to target our checkbox inputs, and we don't want to target our file input here, but we want to target the rest of them. So to do that, we're actually going to use our attribute selector that we showed off in our selector lesson. So to do this, we're going to do input and then square bracket.
04:00:30.716 - 04:00:56.622, Speaker A: When I just type the left one, it creates the right one as well. And then we're going to type type equals double quotes. Again, when I just do one, it adds both. And we're going to target the text type input, which there's actually only one. And then we're going to have a comma and we're going to put the rest of them on a different line. So I'm actually going to paste these. We have a couple here.
04:00:56.622 - 04:01:43.910, Speaker A: So we have for our password, our number, our email, our color and our date. So now I'm going to change the attribute values here. So password, number, email, color and date. And we also want to target our select as well. So we're going to do that as well here, select which is our dropdown. And we're going to start by making this a width of 100%. So you'll see that that now expands to fill the whole space that we have here.
04:01:43.910 - 04:02:15.780, Speaker A: Next we're going to do a padding of seven pixels. You can see that that makes them a lot taller there. And we're going to do a border dash radius of five pixels. And I make sure it has like a rounded edge there. We're going to have a border one pixel solid gray. You can see that it had a 3d border there. By default, we're going to make it dark gray.
04:02:15.780 - 04:02:57.002, Speaker A: One word, okay. Which is actually a little bit lighter than gray. Ironically. Again, you might see here that we are all the way to the right here and we're not quite centered. So to fix that, we're going to use our box sizing again and our border box value. And you'll see that that fixes everything so that it has an even space on both sides now. So basically it's factoring out the border and the padding and it's just making it with 100% and then it's just folding those values into it.
04:02:57.002 - 04:03:58.440, Speaker A: So it's basically a max of 100%, which means it is respecting the padding that we have of 20 pixels all the way around. So we have 20 pixels on this side and 20 pixels on this side because we're using our box sizing border box. It's going to 100% minus the 20 pixels on both sides. Okay, next we're going to go ahead and add a margin, bottom five pixels because we want to separate it from the next label value there. I think that looks better already. But you know what? We'll add a margin dash top as well and that's going to be three pixels so that we have some space between the top of the input and the bottom of the label as well. Okay, so next we're going to style for our invalid pseudo class like I mentioned.
04:03:58.440 - 04:05:00.542, Speaker A: So we're going to target our input type with a colon and then we're going to type invalid and we're going to give that a border one pixel solid red. And you can see right away that we have a lot more red inputs going on here and that's because they're not filled out. You can see that this one actually is retaining the value here, but if I clear that, you'll see that one becomes red as well. But let's take a bit of a breather and we'll pick up the rest in the next lesson. Let's pick up right where we left off. Okay, so we're getting there. We're not quite there yet, but it's looking a lot more like the form example I had showed.
04:05:00.542 - 04:05:41.292, Speaker A: But let's keep going. So the next one is the color. I don't really love this very tiny sliver of color here so we're going to want to fix that. So scroll down here and we're going to target our input with the type equal to color. So our similar attribute selector here and we're going to give it a padding of five pixels, which is less than the amount of padding that we had before. And we're also going to set the height to be 40 pixels. So we're going to make it bigger.
04:05:41.292 - 04:06:47.304, Speaker A: So if we can actually see our favorite color a lot better as a result. Next we're going to style our input for our file here. You can see that it needs a little bit of space on the top and bottom. And when we have the red outline here you can see that it's square but the button is rounded so we want to add some border radius for that as well. So we're going to go ahead and target our input square bracket type equals file and then we are going to give it a margin top three pixels and a margin dash bottom of ten pixels. So it's going to space it on the bottom here and then we're going to give it a border dash radius of five pixels to match our other border radius. And you can see now that our red border is more so hugging the button that we have there.
04:06:47.304 - 04:07:52.864, Speaker A: So I think that looks a little bit better. Now next we're going to go ahead and style our radio and our checkbox inputs. So I'm going to actually copy this instead of writing it out again and we're going to paste it comma enter paste it again and then we're going to have our selector and the first one is going to be radio and the next one is going to be checkbox box and we're going to start with a margin. So this time I'm going to actually have all four values here. So we're going to start with zero on the top. So zero top and then ten pixels right, ten pixels bottom and three pixels left. So I always remember that top was right bottom left like they had an argument.
04:07:52.864 - 04:08:20.740, Speaker A: So that's a silly way that I am remembering that but it works for me. So yeah, maybe it'll work for you. Okay. And moving on, I think that these inputs are a little bit small so we want to actually make them a little bit bigger. So we can use our transform property here and we're going to do scale as our value and then a bracket and then 1.5 and that's going to make it 1.5 times bigger.
04:08:20.740 - 04:08:48.430, Speaker A: And you can see that now that more so matches the size of our labels. Okay, that's looking good. And the last thing, I want to give it a cursor pointer again to kind of highlight that it is something that can be interacted with, it can be clicked. And I always try to add a cursor pointer to make it very obvious that it's something that can be clicked. Okay, same thing down here. Great. That looks good.
04:08:48.430 - 04:09:21.056, Speaker A: Okay. And the last thing that we want to style, we're looking pretty good overall. The very last thing that we want to style is our submit application button. We just have our regular generic button here. So we're going to go ahead and change that so we can paste this in here again and we can change the type here to be submit now. And we're going to style our button. So we're going to start with a background dash color of azure.
04:09:21.056 - 04:09:50.530, Speaker A: So we're going to give it actually the same background as our body background here. You can see that by default we have the 3d border going on here, our ridge or groove border. And we're going to change that. But first we're going to change font color is going to be black. It is by default. But again, I want to just explicitly say that. And we're going to change our border to be two pixels and solid black.
04:09:50.530 - 04:10:30.028, Speaker A: So we're just going to have a black outline instead. And we're going to add some padding so we want ten pixels on the top and bottom and 20 pixels on the left and right to make it more of a longer rectangle. Here we want to have a border dash radius of five pixels. We kind of want all of our border radiuses to match. Usually we don't usually want to mix and match different values for our border radius. Again, this is something that we can click on. So we want to give it a cursor pointer and we want to center this.
04:10:30.028 - 04:11:11.670, Speaker A: So we're going to use the text align center and that is going to center our button. But before that we actually have to use display block to make it fill the whole line. And then we also need to give it a margin of auto so that it has that automatic left right margin. And you can see now we have it centered. Great. And the very last thing I want to change in our styling is when I hover over it, I want to have some more visual feedback that I'm actually on the button and ready to click it. So we're going to paste this again and change this to submit.
04:11:11.670 - 04:12:00.990, Speaker A: And we can actually add a pseudo class to this. So we're going to do colon and then hovered. And we're going to change the background color to be light sky blue just to change it from the azure color to just make it very obvious that we are hovering over it. So you see now it's very obvious as soon as I'm in the corner of it that it's ready to be clicked. Okay, so just for fun, we'll fill out our form here so that we can see it in action and switch this to Canada. I'll leave that at one test.com. change my favorite color back to like a reddish.
04:12:00.990 - 04:12:24.504, Speaker A: We're going to upload my resume here and we're going to put in my birthday. I'm just going to pick a random day and we're going to submit the application. Congratulations on applying. We'll be in contact soon. Okay, very cool. So we have successfully styled our job application. I'm just going to zoom out so you can see better the final product.
04:12:24.504 - 04:13:04.492, Speaker A: But to me that looks a lot, a lot better than what we started out with with just our raw HTML. And we even have some visual form validation with our styling for our invalid pseudo class. All right, so that's it for this one. We have one more project to go and that is our semantic website. I'll see you in that one. Bye for now. Alrighty.
04:13:04.492 - 04:13:51.566, Speaker A: So we're on to our final project for this module and we're going to be looking at our semantic website all the way back from module number one. So again, we have only written the HTML. This is exactly as it was when we finished with that lesson. So the first thing we're going to do is I'm actually going to modify this. Before I forget, we're going to actually remove this strikethrough because it actually is going to be a web page with CSS. So that's an important little change to make. Next, we can just take a look at the rest of the HTML that we're starting out with here, just as a little bit of a refresher.
04:13:51.566 - 04:14:40.138, Speaker A: So we have our header element which is wrapping our h group, which is our page title as well as our section title, our h one and our h two. Below that we have a nav element with an unordered list that has a group of anchor tags in it. And you can see that they just look like regular links, doesn't really look like a navigation yet. And you can see below that we have our main element here and within that we have a section and an article inside of that. And then we have a few of these repeating themselves. We have an h three for our subsection title. We have a paragraph element with some text and then that repeats again here.
04:14:40.138 - 04:15:35.746, Speaker A: And then below that we have our Progress bar. So that is using our progress element here we have our value of 50 51 hundred here. And if we scroll down we have our mark element which is just showing the highlight here that we can see here. And then below that we have an aside that has related links. But you can see that the aside really has no styling inherently, but we are going to add some styling for that. You can see that we have an unordered list that has two links to different references here w three schools and developer Mozilla, which we've been using a lot so far. And then at the very bottom we have a footer element and we have our copyright and then zero to mastery 2023 at the bottom.
04:15:35.746 - 04:16:12.362, Speaker A: But again, it just looks like text. It does not look like a footer at all. So I think we have a lot of room to make this look a lot better with adding some css to it. So again, pause the video here, see if you can try to style it on your own. Try to match the example that I showed in the first lesson of the module and we'll take a beat and we'll get started with our styling. Okay, so I'm going to style it how I did in the example. We're going to start here with targeting a few different elements.
04:16:12.362 - 04:17:11.892, Speaker A: So we're going to target our body, our h one, our h two, our paragraph element, our unordered list and our list element. So we're going to target all of these because we're actually going to remove all of the margins. So margin zero, padding zero, and you can see everything kind of compresses. We're going to add it back individually and then we're going to do our box sizing border box. So just as a reminder of what this does, it's not going to make a difference right now because we haven't added any margin or padding back. But just to remind you, let's say that I had an element that I set the width of 100 pixels, but we also had a padding of ten pixels and a margin of ten pixels. So instead of adding 20 and 20 for the left and right for each of them, so adding 40 total.
04:17:11.892 - 04:17:52.786, Speaker A: So that means that total element becomes 140 pixels. It maintains that the maximum width of that element is going to be 100 pixels. So it adds the padding and margin still or it maintains them, but it actually shrinks the content so that the maximum width is whatever width we are setting it to. So that is what box sizing border box does. It is very useful when you want to make something an exact width but still have that margin and padding. Next we're going to go on to just styling our body here and we'll start with our font family. I think you can guess what I'm going to say.
04:17:52.786 - 04:18:32.580, Speaker A: Arial sans serif like every other one. And I'm also going to do background color of white smoke, like a lot of them. I do use this a lot. Even at work it is just a little bit easier on the eyes to set it to white smoke instead of just having a white background for everything. Next we're going to move on to styling our header element. And for this we're going to change the background color and we're going to make this dim gray one word. So this is kind of going to act as our banner that we have on the top here.
04:18:32.580 - 04:19:13.848, Speaker A: Next we're going to change the font color to be white. So we want that to pop a little bit more. You can see that looks a lot more dynamic and vibrant there. And next we're going to add padding, ten pixels top and bottom and then zero left and right. But we're going to add it back in our next set of styling with our h group h one, h group h two. Actually, this is just going to be for a margin instead of padding. So margin zero, top and bottom.
04:19:13.848 - 04:19:47.488, Speaker A: But we want a margin of 20 pixels on the left and right. So that's going to push everything over but using margin instead of padding. So that pushes both over from the outside rather than actually pushing it from the inside with the padding. Okay, next we're going to start with our navigation needs a lot of work. So we'll start with a background dash color black. So we want it to be separate from our header. We want it to look a little bit different.
04:19:47.488 - 04:20:21.182, Speaker A: We're going to give this a padding of ten pixel top and bottom and then zero left and right. So you see we have the top and bottom has a little more room. Now, next we're going to keep on this. We're going to target our nav unordered list. So we're targeting the unordered list that is the child of our nav element. That's what it means when we're not adding any other combinator value there. And we're going to do display flex.
04:20:21.182 - 04:21:18.150, Speaker A: I know we haven't gotten into flexbox yet, but this is kind of a little sneak peek of what it can do. So we're going to use display flex to initiate flexbox and then we're going to use justify content. So this only works with display flex and we're going to use space around. So what that means is we're adding an even space between each one and then it's half the space on the left side and the right side because we're not doubling the space. So we have an even space on the left and even space on the right for all of them. But because essentially we have the left and right values together from each of these, these spaces are all bigger, but then the far left and the far right are slightly smaller. And then next we're going to have a list dash style type of none.
04:21:18.150 - 04:21:45.548, Speaker A: So it's an unordered list. We're getting rid of any other list styling. So sometimes you would actually still have the little dots of our bulleted list. So that would get rid of that. Next we're going to target our anchor tags that are children of our nav elements. So we don't want to target all of our anchor tags like these ones down here. So that's why we are being more specific here with our selector.
04:21:45.548 - 04:22:24.700, Speaker A: We're going to change the color to be white. We're going to have text decoration as none and that's going to get rid of our underline. There and lastly, we're going to have a position relative and a top value of ten pixels. That doesn't look great right now, but it will make sense in a minute. We still have some margin to actually add back here, so just bear with me. We're working in progress here. Okay, so we'll go now on to our main element.
04:22:24.700 - 04:22:54.210, Speaker A: So main and we're going to add some padding, 20 pixels all the way around. So you see that, that spaces out everything within our main here. And we're going to change this background color is going to be white. And okay, that's done there. You can see that right here on the footer alone. That that is our white smoke. So it is slightly a different color.
04:22:54.210 - 04:23:40.274, Speaker A: We're going to add a margin of 20 pixels and this will make it a lot more dramatic. So we have our white smoke kind of border all the way around our main here and then we're going to add our border dash radius. We want to round those corners. And when we scroll down, we actually are going to want to add more of a margin on the bottom because we want to have some extra space for the height of our footer. The footer is going to take up some space here. So we want to still be able to have this even value all the way around this 20 pixels. And our footer with its own margin padding is going to be about 80 pixels.
04:23:40.274 - 04:24:24.870, Speaker A: So that's why we're adding the extra margin bottom, 100 pixels. So this is the other reason to use margin and then margin bottom. I only want to change one value and it's kind of easier to write it out and be more explicit that this is the one value out of the four that I am changing. And then lastly, we're going to go ahead and add a box shadow and very similar to before, but we're going to do zero 00:10 pixels. And you see that it adds some shadow here. But again, we want to make it very subtle. So rgba zero comma, zero comma zero comma 0.1.
04:24:24.870 - 04:25:06.708, Speaker A: So that's going to add a nice subtle shadow, but it is going to pop that white against that white smoke. It is a lot more visible there. Okay, so we're going to pause here, but we're not done yet. We're going to pick this back up in the next video. Welcome back. Okay, moving on. We are going to go on and add some margin bottom to our section.
04:25:06.708 - 04:25:39.720, Speaker A: So we're going to target our section element. Margin bottom is going to be 20 pixels and you'll see that? That kind of pushes each one of these. It has that margin on the bottom. Now we have our three sections there. Next, we're going to go ahead and target our h two. So let's go ahead and do that. So we want our h two and we want our margin, margin bottom to be ten pixels.
04:25:39.720 - 04:25:56.004, Speaker A: Okay. But we can see that that didn't make any difference. I might have made a mistake here. Yes. Okay. So I need to fix the styling for our H group here. So I did this in a bit of a wrong way.
04:25:56.004 - 04:26:28.110, Speaker A: So I actually wanted the H group to have this value here of our margin top bottom 00:20 pixels left right. But then I wanted the h one and the h two to both have a margin dash bottom of ten pixels. And you can see that that spreads them out a little bit more. And actually, I probably don't need this because I am already doing that above. Yes. Okay. So that makes more sense.
04:26:28.110 - 04:26:47.878, Speaker A: Now. That's looking better. Now let's move on to fixing our navigation here, which still doesn't look great. So we're going to target paragraph element and our unordered list element. And we're going to give that a margin dash bottom of 20 pixels. Okay, perfect. So that looks a lot better.
04:26:47.878 - 04:27:21.320, Speaker A: Now that all makes sense. Again. Moving on. The next thing we're going to style is our aside here at the bottom. So we're going to target our aside element and we're going to have a background dash color of white smoke. We're going to have a padding of 20 pixels. We're going to have a border radius of five pixels again to match.
04:27:21.320 - 04:27:48.452, Speaker A: And we're going to have a margin. Whoops. Margin dash bottom of 20 pixels as well. Give it a little more space to breathe there. Next we're going to target our aside unordered list list items. So our unordered list item. And you see, we still have our bullet points here, which we want to get rid of.
04:27:48.452 - 04:28:24.000, Speaker A: So we're going to do our list style type of none here. And that's going to remove our bullet points. Perfect. And we're going to give these, each a margin dash bottom of ten pixels there. And next we're going to move on to styling our progress bar. We're going a little bit out of order here, but we're going to style our progress bar. And we're going to start with a margin five pixels auto.
04:28:24.000 - 04:29:09.874, Speaker A: And that's going to space out each of those lines there. We're going to set the width to be 100% so that's going to have it be the full width of our container here, our main container. We're going to give it a height of 20 pixels. So that's going to increase the size of each of those lines. And we're actually going to give it a little bit more of a border radius of ten pixels. And you'll see that because I changed that border radius value, it actually eliminated the previous styling that we had here. And so we're going to actually need to go ahead and redo the progress bar and the progress value styling.
04:29:09.874 - 04:29:42.090, Speaker A: So the bar styling will be the bar in the background, and the value styling will be the value on top here. So we'll start with the bar. And this is actually going to use a pseudo element. So we have two colons here. And then Dash Webkit, and then dash progress dash value. So Webkit browsers are chrome, Edge and safari. Those all count as Webkit browsers.
04:29:42.090 - 04:30:19.674, Speaker A: The only major browser that isn't Webkit is Mozilla. So we're gonna have a comma here. And we're also going to target the Mozilla equivalent of this pseudo element, which is going to be dash moz, dash progress value to try to cover our bases here. So we're going to change the background color to be silver. Maybe it's just background and not color, actually. Maybe it's already silver. Okay, let's see what happens here.
04:30:19.674 - 04:30:51.274, Speaker A: And our border radius is going to be ten pixels. Is that going to change? Okay, maybe I need to do these separately, actually. So let's go ahead and remove this one. Okay, so now that worked here. Oh, that's why I meant to do bar, actually. Okay, so let's put that back and let's do bar instead of value. You can see that everyone makes mistakes, even me sometimes.
04:30:51.274 - 04:31:13.354, Speaker A: Is that going to work? Okay. No. Okay, maybe I do have to separate these. Yeah. Okay, so now that's working. So I am just going to copy this and I'm going to paste it and I'm going to target Moz. I guess there's no way of checking this because I'm not in a Mozilla browser, but I will just need to double it and I'm going to assume it's going to work.
04:31:13.354 - 04:31:48.990, Speaker A: Definitely test anything that's going to be very important for everyone to be able to access because there are some people that do use firefox out there and we're going to do a similar thing. I'm actually just going to paste this one more time and we're going to change this to progress value. And we're going to make this slate blue and we're going to have the same border radius. Okay, cool. And I think that that looks very nice. We're going to copy this and we're going to paste it again. And this time we're just going to change this to moze.
04:31:48.990 - 04:32:21.274, Speaker A: Okay. So hopefully we have our bases covered for our progress bar here, but it looks a lot better with this custom styling, I think, that we've added here. Very nice. Okay. And the last thing is our footer down here that we want to style. So let's go down our CSS file here. And we're going to target our footer and we're going to give it a background color of dim gray just like we have on the top here.
04:32:21.274 - 04:32:54.180, Speaker A: We're going to match them and we're going to have the text color be white and text dash align center. We're going to center our footer text. We're going to have a padding, 20 pixels on the top and bottom. Left and right is going to be zero. And we're going to have a width of 100%. And we're actually going to use position fixed. And this is going to fix it at the very bottom here.
04:32:54.180 - 04:33:22.658, Speaker A: And we need to add a value for our position fixed. You can see it just disappeared. And if we add a bottom value of zero, you see that it stays now locked at the bottom. And you see if I scroll up or down, it stays locked right at the bottom there. So I just wanted to give another example of position fixed and the very last thing where the text is. I don't really love that. I want to kind of nudge the text a little bit.
04:33:22.658 - 04:33:48.082, Speaker A: So we're going to target our footer, paragraph element. So paragraph element nested within our footer. And we're going to use our position relative trick here. And we're going to have a top value of ten pixels. You're just going to lower it by ten pixels and center it there nicely. Okay, cool. So we're done with our CSS here now, I think that looks a lot better.
04:33:48.082 - 04:34:35.326, Speaker A: If we zoom out, we can see the full effect and what our actual page looks like. Okay. So I think that that is a much better looking version of this page by adding just a little bit of CSS. Okay, so that concludes this project, this lesson, and this module, and it also concludes our beginner boot camp. So in the next one, we're going to dive into actually setting up your developer environment on your local computer. We're going to move away from codepenous and onto using visual studio code, and we're going to tackle a lot of subjects in a lot more depth. That's going to include things like typography, which is our fonts.
04:34:35.326 - 04:35:29.267, Speaker A: We're going to have a whole module on color, flexbox, CSS grid, responsive design. We have a lot of great stuff coming up in the course, and I can't wait to get started on all of that with you. All right, so that's it for now. I'll see you next time. Hello, I'm Bruno, the founder and CEO of Typographics. First off, welcome and congratulations on landing the intern position here. I started this AI startup with a clear mission to revolutionize text and image generation, and having bright minds like yours is crucial for our journey.
04:35:29.267 - 04:36:21.159, Speaker A: But before we dive into the creative realms of AI, there's something foundational we need to set up our development environment. It's like building a house without a strong foundation, even the most beautiful of structures can crumble. Whether you're on a Mac windows, make sure you have your preferred integrated development environment installed. In our case, we prefer using visual studio code. We primarily work with web technologies here, so an understanding of HTML, CSS and a bit of JavaScript will go a long way. Now, let's talk about collaboration. We believe in team synergy at typographics, so let's get you on boarded with GitHub GitHub is like a massive playground for developers, but more than fun.
04:36:21.159 - 04:37:32.770, Speaker A: It allows us to work on projects collectively, track changes, and ensure we don't step on each other's toes. With GitHub, you can track your progress, make changes, and ensure that the styles and visuals you create fit seamlessly into our projects, as well as host your projects on GitHub pages for others to see. Remember, the beauty of web design, especially when delving into advanced CSS, lies in details and precision, and these tools will help you achieve just that. So get your environment set up, get cozy with GitHub, and get ready for an exciting journey into the world of typographics. Welcome aboard. Hello and welcome back. So we're on to module number six, and this is the last module of our beginner boot camp before we really dive in to the main part of the course.
04:37:32.770 - 04:38:43.498, Speaker A: And this is a very exciting module because it is going to be exclusively hands on projects. So if you recall, in modules one to five, there were several projects that we only created the HTML, and I said that later on in the course we would add some css to make them look way better than they currently look. And that is exactly what we're going to do in this module. So before we dive in, I just want to say that in this module I would like you to try to do some of the styling on your own before actually looking at the next couple of videos where I will actually break down how I am going to style each individual project. So to do this, I want you to consider the styles we've learned so far specifically relating to layout. It's very important. So that is covering position, display and box model related properties.
04:38:43.498 - 04:39:24.270, Speaker A: So to remind you box model is related to margin, padding, borders, things like that. Also, I want you to try to use different selectors and experiment with different properties. Feel free to make it your own. Just try to make it look as good as you can and it doesn't need to look exactly like my examples, even in your finished product. Lastly, I just want to touch on colors. So we haven't really talked about colors too much. I've been using only named colors so far.
04:39:24.270 - 04:40:09.958, Speaker A: I've had a couple projects where I've used colors already. I'm going to link to a resource that has a list of these, but again, feel free to choose your own colors. So at this link you're going to see there's a list of 16 standard colors. So you can see we have black, we have white, we have purple, we have red, we have green. And if you continue scrolling down this page, there's another 150 named colors that you have to choose from. So in my following examples, I'm going to stick with just using named colors. We will have an entire module on colors little bit later in the course, but for now I'm going to just stick to the named colors.
04:40:09.958 - 04:40:54.582, Speaker A: But you can feel free to use hex code colors if you want, or any other type of colors that you would like. And again, they don't have to match the ones that I have chosen. You can choose whatever colors you like for these projects. Okay, so now I'm going to show you some before and after of the projects we're going to tackle. So up first we're going to be tackling our simple table example. So in the top left you can see the HTML of that simple table example, and down here you can see that exact same example, but with some CSS. So you can see that a little bit of styling can go a long way.
04:40:54.582 - 04:41:36.610, Speaker A: We've added some background colors to the table, caption to the table, headers to the table footer. Even each row has slightly different colors. We've also added a different color when you actually hover over each row. So a little bit of CSS goes a long way, as you can see in this example. So try to make yours maybe look something like this. You can of course alter the colors as much as you'd like, but again, give it a shot on your own, see how far you can get. Next, we have our example where we had our different image elements.
04:41:36.610 - 04:42:20.092, Speaker A: This one looks pretty similar, but on the left side you can see our original. That was just HTML. Obviously the images themselves and the SVG element is doing a lot of the heavy lifting here. So the CSS isn't changing it too, too much. But you can see that I've made my page title stand out a little bit more by having a background color and then just having my title be in white. I use that same color for the h two for each little section here you can see that I've added some padding and a border to my first picture. Here you can see all the images are centered and that's basically the main things that I've changed.
04:42:20.092 - 04:43:08.874, Speaker A: So see if you can try to make something kind of similar to this. Next we have our audio and video example. On the left here is just our HTML, and on the right here includes our css. So I did a similar thing with the title as I did in the last one, and I've also made the video fit any little window that basically I've made it responsive. So instead of it being stuck at this aspect ratio, regardless of what the size of the window is, it will automatically fit in this box. So I think that'll look pretty cool. Moving on, we have our job application form.
04:43:08.874 - 04:43:47.234, Speaker A: So again, we have the HTML here on the right, and it doesn't look very good at all. And you can see here that we've made quite a few little changes here. We've added a background color, we've added some box shadow, we have spaced things out a little bit better. We've made everything the full width here. We have styled our button a bit. So there's lots of little things that you can do to make it look again a lot more professional than just with our HTML here alone. And then lastly, we are going to be looking at our semantic webpage.
04:43:47.234 - 04:44:17.620, Speaker A: So this is actually from our very first module. You can see that this is a very dramatic transformation here. We have the HTML up here. Specifically, if you look at the navigation bar, we just have a series of links here, whereas on the CSS version it actually looks like a navigation bar. Our header at the top has a background color. And we have our main container that is in its own little div. That's this little separate container from the background here.
04:44:17.620 - 04:44:46.408, Speaker A: And everything has a much better font. In all of these projects, we've added some color to our progress bar. We've made our aside look a little bit different. And then of course, we've added an actual set of styling for the footer instead of just having our footer text here. So those are the five projects we're going to tackle. I'm going to go in this same order that I just showed you the projects. So I would challenge you to start with the table project.
04:44:46.408 - 04:45:32.744, Speaker A: See what you can do on your own before going to the next video where I'm going to show you how I chose to style the table project. And then I would ask you to do the same thing for each one. And then I will show you each one in the next five videos. All right, I'm excited to get started. I'll see you in the next one. Bye for now. Okay, so in this video, I'm going to be showing you how to set up your local development environment on macOS or Linux.
04:45:32.744 - 04:46:28.136, Speaker A: In the next video, we'll be setting up your development environment on Windows, but the goal of both will be the same. We want to set up git so that we can use GitHub and eventually GitHub pages in order to host your projects online for free, as well as installing visual studio code so that we can write and organize our code on our computer instead of using something like codepen. Okay, so let's get started. The first step on macOS or Linux is going to be to install homebrew. I'll provide a link to this within the course, but the website is simply brew sh. So what this is is it is the missing package manager for macOS. And the only thing we need to do is paste this code into our terminal on Mac and let it run.
04:46:28.136 - 04:47:04.164, Speaker A: And it will basically allow us to use brew install and then whatever package we want. So in our case, we're going to be installing git, but you can use it to install a lot of different packages online. Okay, so first things first. We're going to copy this code here. And next we're going to use command spacebar and we're going to type in terminal to open up our terminal window. So I'm going to make this a little bit bigger and I'm going to zoom in as well on the font. Okay.
04:47:04.164 - 04:47:36.852, Speaker A: And we'll just slide that into view here. All right, perfect. Okay, so now I'm going to use command v and I'm going to paste in my code here. And then I'm just going to press enter and it's going to check for my password. So I'm going to type in my password here. And then I'm going to press enter, and it's telling me all the things that it's going to do. So you'll see that it's going to install brew, homebrew, a few other things, and all of this.
04:47:36.852 - 04:48:23.166, Speaker A: Great. And I'm going to press enter because I want to install homebrew. And we'll just wait and let this finish. Okay, so you might have noticed mine maybe took a little bit longer than yours did, but that is because I have Xcode installed. So it might be a little bit quicker and it might look a little bit different, but I, in the end, eventually you will be back to your name at imac and then you can type again in the terminal. So once you can type again in the terminal, that's how you know that it is complete. All right, so we're going to go back to our browser here.
04:48:23.166 - 04:49:03.352, Speaker A: So now that we're done with homebrew, we're going to go to the git webpage. So again, I'll provide a link for this, but basically this is the instruction to download git for macOS. So the first option here is to install homebrew if you don't have it already, of course, we just did that. And then we simply type the simple command brew install git. So that's what we're going to do next. So we're going to go back to our terminal here, and we're going to type brew install git and press entertain. Okay.
04:49:03.352 - 04:49:23.368, Speaker A: And that's done as well. Again, once you can type, that means it's done. And we're going to just make sure that it's working. We're just going to type git version, press enter, and you can see that it is working. Version 2.37.1. Perfect. Okay, so we're done with our terminal.
04:49:23.368 - 04:50:11.170, Speaker A: We can close that now, and we're going to go back to our browser here, and we're going to go to the visual studio code website code dot visualstudio.com. and you can see that when I land on this page, it already knows which operating system download Mac Universal. So I'm going to go ahead and click on that and you'll see that the download should get started. And we can see that it's downloading here. Okay, so now we can go ahead and open the file and we can see now we actually have our application here. So if I click on this now, you'll see that it's going to open visual studio code. This actually doesn't need any setup.
04:50:11.170 - 04:50:52.634, Speaker A: We need to confirm that we want to open it. And here we are, we're in visual studio code and this is actually a sneak peek of a project we're going to make later on in the course. Okay, so we have visual studio code installed and we have Git installed as well. So you can skip the next video because it's going to be about the Windows setup. But after that we're going to look at setting up visual studio code itself, including some basics about that as well as some visual studio code extensions. And then we have a few more topics to cover in this module. All right, that's it for now.
04:50:52.634 - 04:52:01.920, Speaker A: I'll see you in the next one. Alrighty, so in this video I'm going to be going over the installation of Gita and visual studio code on Windows. So the first thing we're going to do is we're going to open up our browser and we're going to type in git for windows.org. you can see it's popping up here and on this page we're simply going to click on the download button and we're going to wait for this to finish downloading and then we're going to go ahead and open up the installer. Okay, so you can see that we have our installer open. We do want to install this. Yes, we can minimize this for now and you'll see that we have our installation here.
04:52:01.920 - 04:52:32.570, Speaker A: We're just going to click next. You can change the folder that it's going to install to, but for me this is fine. Going to click next. And one thing to note just to make sure it's checked is we have a Windows Explorer integration and it has a checkbox for open git bash here, open git Gui here. So I actually find this very useful. I'll explain why in a few minutes, but just make sure that this is checked here. Then we're going to click next.
04:52:32.570 - 04:53:14.570, Speaker A: Next again. And now we have come to the question of which editor would we like git to use. So you can see in the dropdown there's a few different choices here. And we actually want to use visual studio code as Git's default editor. So we're going to click on that. And you can see that the next button here is grayed out that's because we haven't yet installed visual studio code, but we can do that by simply clicking on this link here and we want to open this in edge. And so we're at the visual studio code website and we're going to go ahead and click download for Windows.
04:53:14.570 - 04:53:41.330, Speaker A: And this should be downloading here. Yep. And we're going to wait for it to finish and then we're actually going to run the visual studio code setup first before we finish our git setup. So we're going to go ahead and open this file now, minimize the browser. Okay. And we're going to accept this agreement. Again, you can choose which folder it's going to install in.
04:53:41.330 - 04:54:04.336, Speaker A: For me. That's fine. Next. And we're going to call it visual studio code in the start menu. Sure. And again, there's a few things that you can check here and they're related to the Windows Explorer file context menu and the directory menu. So basically it adds an option to open with code.
04:54:04.336 - 04:54:48.564, Speaker A: I'll show you what that means in a moment. And also I usually like to check register code as the editor for supported file types. So open up anything that is code related within visual studio code automatically. It will associate all of those file types. And I'm going to go ahead and create a desktop icon here as well. Then I'm going to click next and install. Okay, now that the setup is complete, I'm not going to launch visual studio code quite yet, but I'm going to click on finish and now it's still grayed out the next button here on our git setup.
04:54:48.564 - 04:55:25.792, Speaker A: So I'm just going to hit the back button first, then I'm going to click next and you can see now that I've installed visual studio code, I can now click this next button. For the rest of these settings I'm just going to go with the defaults. So I'm just going to keep clicking next. Okay. And then that is going to finish our setup for git on Windows here. Okay, great. That's finished as well.
04:55:25.792 - 04:55:54.610, Speaker A: We don't need to view the release notes, so we're just going to uncheck that and click on finish. Okay, great. So we've installed git on windows as well as visual studio code. Now I want to show you a few things about the context menu. So for me personally, I am normally developing on Windows. I work with Windows at work and I worked with Windows when I was learning development. Though I am going to be recording the course on a Mac.
04:55:54.610 - 04:56:38.950, Speaker A: Most of the rest of what I'm going to talk about is going to apply throughout the rest of the course. However, what I'm about to show you doesn't quite work the same way on Mac. So this is unique to Windows. So if I right click I have a code folder here, you'll see that I have a few different options in the context menu. So that was what I was mentioning in both setups. So what this allows me to do, if I click open git bash here, it allows me to actually open a terminal within this file path. So it's a quick and easy way to get directly to this location on my computer instead of having to use commands to actually get to this specific file path.
04:56:38.950 - 04:57:29.926, Speaker A: This can be useful for a whole host of things, but for me personally, I always found it useful when I was trying to create a new angular app. Because to do that you just need to type ng new and then the app name and then it will automatically create an angular project within that folder. Just something to consider in the future. And the other cool thing is if I right click on this and I click open with code, this will allow me to automatically open this folder up in visual studio code. So you can see that right away I am in this project and I can go ahead and click on the code within the project. So this is very useful for Windows. I'm not going to be able to show off either feature because I'm going to record the rest of the course on MACD.
04:57:29.926 - 04:58:30.830, Speaker A: But if you are using Windows, it is very handy to be able to right click and open with code or to open a git bash terminal in any folder location. All right, so that's it for our Windows setup. Everything else we're going to discuss for the rest of the course it will apply to both Windows and Mac related to visual studio code and everything like that. That is the great thing about it is that it works the same way regardless of the platform that you are using it on. All right, that's it for this one. Bye for now. Alrighty, so now that we have our local development environment set up in this video, we're going to be looking at the basics of using visual studio code while setting up a template project.
04:58:30.830 - 04:59:17.056, Speaker A: So a template project is a great way to get started. It allows us to link our style sheet and our script file, as well as some other resources like font, awesome icons and a favicon things that we're most likely to need on every single project. And it allows us to then copy that template and paste it and then rename it and then we are not starting from scratch every time we want to start a new project. Okay, so let's get started. You can see on the desktop that I have a code folder here. So we're going to click on that and you'll notice that there's already an icon in this folder. We'll get to that in a few minutes.
04:59:17.056 - 04:59:57.002, Speaker A: But first I'm going to right click and I'm going to create a new folder and I'm going to call it space and then template. So the reason I am naming it with two dashes at the start is so that if we are sorting this folder alphabetically, it is always going to be at the top. Okay, so we can close this now and we're going to open visual studio code. So I'm going to use command spacebar and I'm going to type visual. And you see it pops up here. It's actually still in our downloads folder, which is fine. And we're going to click on it to open it and we'll make it full page.
04:59:57.002 - 05:00:28.930, Speaker A: Okay, so we're going to land on this welcome page here and you can see it has some suggestions on how to start. And I'm going to go ahead and click open. And you can see that this is already inside my code folder. And I'm going to go ahead and I'm going to click on the template folder and then I'm going to click open. Okay, so now we are in our template and yes, we're going to allow it to access files on our desktop. And yes, I'm going to check this. Always trust the authors.
05:00:28.930 - 05:00:59.226, Speaker A: Yes, I trust the author because the author is me. Okay. And you can see right here on the explorer that we're in our dash dash template folder. And the first thing we're going to do, we can actually close this. We're going to create a few files here. So we're going to click on this icon here. We see when we hover over it says new file, we're going to click on that and we're going to start by creating our index HTML and you'll see that it opens that file there.
05:00:59.226 - 05:01:35.106, Speaker A: Then we're going to create a style css. So this is going to be our CSS file and then we're also going to create a script dot j s file and this is our JavaScript file. Okay. And you can see it has all three open here. Now we're going to start with our index HTML file. So the very first thing we're going to do is we're going to set the doctype as HTML, which is good practice to do. We're going to use our bracket and you see that it actually is the very first suggestion.
05:01:35.106 - 05:02:07.700, Speaker A: So we're going to go ahead and click on that and it does the rest for us. Okay, very handy. So that's one great thing about visual studio code is right out of the box. It has a lot of cool autocomplete stuff for us, similar to what exists as well on Codepen. So now we're going to need to create our HTML element, our head element and our body element. But we have a handy shortcut for this. We're just going to type doc doc and you can see it's an emmet abbreviation.
05:02:07.700 - 05:03:10.080, Speaker A: And then we can go ahead and press enter and you'll see that it creates our HTML element, it sets our language as English, it creates our head and our body and our closing tags. And it also creates a few meta tags as well as a title for our page. Awesome. So that gives us a nice little head start there. The next thing we're going to do is we need to actually link our CSS file and our JavaScript file to our HTML file in order for them to actually work. So to do this we're going to start with our style sheet and below our title here we're going to type out link and then we're going to go ahead and press tab and by default it's going to add the attribute of rel as style sheet here and our href we are just going to go ahead and start typing style and you'll see that it comes up here and I can just go ahead and click on it and it'll finish the rest for me. And that is our style css.
05:03:10.080 - 05:03:53.076, Speaker A: We're just writing it like this because it's actually within the same folder. If it was in a different folder we would need to use slightly different syntax, but in this case it's in the same folder. Next we're going to add a link to our JavaScript file. We're actually going to do this inside of our body and we're going to use comments first. So we're going to use command question mark and then we're going to just type script or control question mark on Windows. And then we're going to type script. And you see again has some abbreviations for us and we can go ahead and type this script source and it adds the source attribute for us.
05:03:53.076 - 05:04:32.970, Speaker A: Same thing. We're going to type SC and you can see it pops up here and I can actually just press enter to add our script js link. Okay, so we've linked our style sheet as well as our script file awesome. So next we're going to want to do a few other things. First, we're going to be adding font awesome icons to our project. This is something that is very useful because you'll normally use things like social media icons on your portfolio. Or if it's a website you're creating for a business, it's very handy to have font awesome icons in your project.
05:04:32.970 - 05:05:22.240, Speaker A: Okay, so we're going to jump over to the browser to take a look at this. So again, I'm going to provide a link for this exact page. So this is going to be using font awesome version five. They are currently on version six, but I prefer using version five because it requires just a style sheet to work, whereas the newer ones require a J's file and need to sign up for that. So to me this implementation is a little bit simpler and you can see that if we scroll down here, I've also filtered on free and there's over 1500 free icons that you're able to use. We have a lot of different examples here and it's perfect for social media icons. So for example, I have a GitHub icon here.
05:05:22.240 - 05:05:54.450, Speaker A: Okay, so we'll come back to this in a moment. To access this with just the style sheet that is hosted externally. We're going to go to another website. This is a content delivery network, J's website. So that's what CDN stands for, content delivery network. And we're going to go ahead and click on or we're going to actually copy this link here so we can use command C to copy this again. I will provide a link to this in the course as well.
05:05:54.450 - 05:06:32.144, Speaker A: And we're going to jump back over to visual studio code and we're going to add this style sheet actually above our style Css and we're going to do the same thing. Link press tab. It's a style sheet again and we're going to do command v to paste it in here. You can see now that this is a bit long and it's actually stretched out our page here. So we can actually fix that by using Alta and Z. And that is going to word wrap. So you can see here that line seven and then we have a gap here.
05:06:32.144 - 05:07:22.298, Speaker A: So it's technically one line, but now we can actually see the full line. It actually is wrapping to the next line so that everything is visible. This is very helpful, especially when you have a paragraph that has a lot of text in it and then you'll be able to actually see the whole paragraph. Okay, so we're going to go back to our browser and actually before we do that, we're going to go to our desktop and we're actually going to open up our code folder and we're going to open up our template folder. And you can see that we actually have the three files here that we created. And we're going to go ahead and we're actually going to open our index HTML file so that we can actually see the project that we're working on. And you can see that it has the document title here.
05:07:22.298 - 05:08:04.368, Speaker A: But right now we're not actually seeing anything. So the reason I wanted to open this is because we want to test to make sure that our font awesome style sheet is working. And to do that we're going to need to use an icon, try to use an icon and we're going to go with the GitHub icon. And if we scroll down and we click, you see that it's going to copy that code snippet of. And then we're going to go back to visual studio code and we're going to go ahead and we're just going to paste it in the body here. You can see that this is saving by default and that is actually because I have auto save enabled. So this isn't enabled by default, but I have it enabled.
05:08:04.368 - 05:08:31.758, Speaker A: So every time I make a change, it is automatically saving all of my files, which is very handy. Okay, so we're going to go back to edge and we're going to go to our project. And if I refresh this, you can see we have a very, very small GitHub icon. That's because we haven't added any styling to it. But if I zoom in on the page, you can see that. Yeah, we have a GitHub icon here. Okay, perfect.
05:08:31.758 - 05:09:12.140, Speaker A: So that means our font awesome style sheet is working. Next we're going to look at favicons. So what is a favicon? So if you don't know what that is, it is actually this little icon that you're seeing on the tab here. So you see, there's one for CSS tricks, there's one for our CDN, there's one for font awesome. But if you look at our project, it just has this blank page here. So in my opinion, a favicon is always an important thing to add to a project, as I do think it makes it look a lot more professional than if you just leave it blank. So that's why I'm talking about it so early on.
05:09:12.140 - 05:09:43.216, Speaker A: So there's this great article here on csstricks.com and it allows you to actually use an external link for a favicon. So you don't even actually need to have a file. So as a fair warning, this might not work in the future. It is using a feature of Google. So essentially Google is indexing all of these favicons and this is what is allowing us to use them. But it might not always work, though it is working for now.
05:09:43.216 - 05:10:27.536, Speaker A: We're going to go ahead and we're going to copy this link here and we're going to go back to our code and we're going to go above this style sheet here. I can actually also close this explorer to have a little bit more space by just clicking on the icon there. And I'm going to comment a title for this. And this is going to be grab favicon from Google. And I'm also going to add a little bit of a warning might be unsupported in the future. Okay. And we're going to go ahead and we're going to add a link again.
05:10:27.536 - 05:10:53.152, Speaker A: So LinkedIn. And then we're going to press tab. This time, though, it's actually not going to be a style sheet, it's going to be an icon. And we're also going to add a type to specify the type of icon it is. And that's going to be equal to image png. And then for ahref we're going to go ahead and paste that in there. But instead of using CSS tricks, I'm going to actually use my own website.
05:10:53.152 - 05:11:09.930, Speaker A: You can use any domain you like. You could use codepen IO or whatever you like. But I'm going to use my own website, Jacinto dot design. Okay. And I'm going to actually make a comment for this while I'm at it. Font. Awesome.
05:11:09.930 - 05:11:28.814, Speaker A: Version five. Okay. And this is already saved automatically. Again, that's one of the great features of visual studio code. And we're going to go back to our browser and I'm going to go ahead and refresh the page. And you can see that we have our icon here. It's a little j.
05:11:28.814 - 05:11:57.934, Speaker A: That is my favicon. Okay, cool. So that is working. So that's one way you can add a favicon to your template. And what we're going to do though is actually add a file, the file that you saw in the very beginning of this video. So we're actually going to comment this out. So that is one way to do it just by having this link and then grabbing a favicon, but the other way is to just link to a local file.
05:11:57.934 - 05:12:46.386, Speaker A: And so that's what we're going to do here. And we're going to comment out a title for this. So this is going to be our zero to mastery favicon and we're going to have another link, oops, tab link. And again, not a style sheet, it's going to be an icon. And again, our type is going to be equal to image, slash, png and then our ref. So we actually have to copy this into our template folder. So now it's inside of our folder and now we're going to have just type f a press enter and it does the rest for us.
05:12:46.386 - 05:13:09.748, Speaker A: And we're also going to change this title while we're at it. This title is going to be template. Okay? And we're going to go back to our browser and we're going to refresh. And you see we have our zero to mastery icon there. Okay, very cool. Now there's a few more little things we're going to do here. We're going to remove our font.
05:13:09.748 - 05:13:35.954, Speaker A: Awesome. We're going to talk about that more in the future, but we're actually going to add some default styling. So we're going to have very small amount of default styling. So we're going to target our HTML element. So that's another way of targeting everything. And we're going to use the box sizing and you can see it actually offers some suggestions. Again, this is very handy and we actually want the first one border box.
05:13:35.954 - 05:14:31.526, Speaker A: So we're going to do that press enter. And what this does is when you add padding or margin or a border to an element that has a width, it actually adds the padding margin border on top of that and actually doubles it because usually you have it on both the left and the right or the top and the bottom. So it's actually going to double whatever those values are, add them all together. And what this does is it essentially bypasses that in a way because it will actually decrease the total width of your element. So let's say that your element was 100 pixels wide and you had a ten pixel padding and a ten pixel margin. So it's going to add the left and right padding and then the left and right margin. So ten times two is 20 and then again is 20 because they're equal.
05:14:31.526 - 05:15:10.162, Speaker A: So that would be 140 would become your width instead of 100. So when you have box sizing border box, your width will actually stay at 100 and it will actually shrink the content of your element to compensate. The good thing about this is that it actually prevents the horizontal scroll bar that you might have at the bottom of your page. That to me doesn't look good. It's nice to just have that nice vertical scroll bar. Okay. And the next thing we're going to do is on our body element, we're going to remove the margin that is on our body by default.
05:15:10.162 - 05:15:50.558, Speaker A: We're going to set it to zero on all four sides. We're going to add margin when we need to on specific elements rather than having margin by default. And then the last thing we're going to do is we're going to add a min height value of 100 vh vport height. So we want the minimum height of our project to always be the size of our browser window at minimum. So I'm going to illustrate this by adding a background color and we're going to make it Dodger blue. You see, it even has suggestions for named colors, which is great. And we're going to go back to our browser.
05:15:50.558 - 05:16:31.930, Speaker A: Then I'm going to refresh and you see that everything is blue. We have no vertical scroll bar and we have no horizontal scroll bar, but it is taking up 100% of the height of the page with our vh. 100 vh. Okay, cool. So that's basically it for our template. We're going to go ahead and remove the background color, want it to be as plain as possible, but this is going to be a great starting point for our future projects. One other very quick thing I'm going to show you that is very useful that I use all the time is if you see here, there's an icon that allows me to split the editor.
05:16:31.930 - 05:17:20.940, Speaker A: So when I click on that, you can see that. Now I have two style CSS files and this is very handy when you're doing mobile responsive styling. So your media queries and your style sheet might actually be very long and might be several hundred lines long. And you can have one side at the very bottom doing your media queries and you can have the other side up above. That's looking at your main styling and seeing how you're going to need to alter that. Or you could also just have your HTML file along with your CSS file. Usually I would drag this so my CSS file is a little bit smaller, but you can see that also because we're word wrapping, we're still able to actually see everything in our HTML file, including these longer links, you can see that we have double lines here.
05:17:20.940 - 05:18:15.260, Speaker A: Okay, so those are the very basics of visual studio code. In the next one we're going to dive into actually installing some extensions for visual studio code, which is going to supercharge our productivity even further. All right, I'll see you in that one. Bye for now. All righty. So in our last video we learned about the basics of using visual studio code and we also set up our template project. In this one we're going to be looking at installing extensions within visual studio code that is going to add some very useful functionality.
05:18:15.260 - 05:18:55.180, Speaker A: All right, so let's dive in. We can see that I have visual studio code opened here in our template folder. And on the right side we have our HTML file of our template. And if you recall, when I click on this icon here, it opens up the explorer that shows the files within our folder. And if we go down to the bottom here, these blocks, if we click on this, this opens up our extensions pane. So you can see that there are some popular extensions here for Python C, things like that. And it also has some recommended ones down here.
05:18:55.180 - 05:19:38.060, Speaker A: I'm going to just minimize these for now. And you can see that we have zero installed extensions currently. So we're going to change that and we're going to install a few of them. So I'm going to start with a few different ones here. First one is going to be called color highlight and you can see that it's the first option here and if we click on it, it gives us some information about it. But basically this thumbnail here tells you all you need to know. Essentially it is going to highlight the hex code or whatever color value that you have in the actual color that it is.
05:19:38.060 - 05:20:02.180, Speaker A: So I find this really useful because I don't memorize what all of the hex codes are. There's 14 million combinations of hex codes. So this is a great way to actually see what the color is. So we're going to go ahead and click install. Okay, great. You can see that it's installed and we're going to go on to a couple more. We're going to test them all out at the end.
05:20:02.180 - 05:20:45.770, Speaker A: So the next one I'm going to suggest is intellisense for CSS. And we can see, yes, it's this one here, it's for CSS class names. And you can see that it actually has a little video down here. But basically what this is doing is it is taking any classes that exist in a style sheet that is linked to the HTML. And then basically it adds a way to autocomplete and use a class that is already existing that is being referenced from our HTML. So that is very handy. We'll test that out in a moment.
05:20:45.770 - 05:21:21.038, Speaker A: Okay, that one's installed. Next we're going to add another extension called CSS Peak. Okay, great. And this one allows us to, in our HTML document to hover over a certain class. So let's say I have this class called comments. It's going to allow me to hover over and actually have a little preview. You can see like this rectangle here, a little preview of what the styling actually is for that style class.
05:21:21.038 - 05:21:54.280, Speaker A: And it also allows you to jump over to it. But for me, just being able to peek and see what the properties of the CSS class are is very helpful like this. Okay, so we're going to install that as well. Okay, great. That one's installed and we will install a few more extensions later on in the course. But the last very, very important one and I think the absolute most useful extension is going to be live server. So you can see it has 39.5
05:21:54.280 - 05:22:31.800, Speaker A: million downloads. So we're going to click on that and we're going to install this. So what this allows us to do, you can actually scroll down and see and we kind of have a similar setup here. So at the very bottom of the page it's going to have an option that's going to say go live. Yeah, you can see it's right there. And basically what this is going to do in combination with the autosave that we already have turned on, it's going to in real time update our HTML file without us having to actually press the refresh button. So that is very, very helpful.
05:22:31.800 - 05:23:13.690, Speaker A: Okay, so those are our extensions. We're going to start by testing out our live server extension first because that to me is the most important of the ones that we've installed. So I'm just going to go ahead, make sure that you are on the HTML file. It will not work unless you're actually on that file. And we're going to go down to the bottom and we're just going to click go live. And you can see that it loaded another tab and the address is one hundred twenty seven, zero, zero one and port 5500. So that is using a localhost server to actually serve our static web page.
05:23:13.690 - 05:24:03.770, Speaker A: So I can go ahead and close the existing one. And now if I make a change, so let's say I change the title to testing you'll see that it automatically refreshes. I didn't need to refresh the page and because I have autosave enabled in visual studio code, it is just basically changing by magic, which is very, very nice. Okay, so let's add some content now to our page. So first we're going to add an h one test press enter. So it's going to create our h one element with our class of test and we're going to type hello world. And then below that we're going to create an I element and we're going to show off the intellisense extension.
05:24:03.770 - 05:24:35.072, Speaker A: So this is going to work because we are linking to this font awesome style sheet and it's going to automatically pick up all of those classes. So if I go ahead and I add the class attribute. So we're going to start with f a and you can see it's there at the top. That's the first one. We need to add an icon and then from there I can actually search. So let's say that I wanted a star icon. I can actually just type star and you'll see that it has all the options that have star within it.
05:24:35.072 - 05:25:15.166, Speaker A: And we'll go ahead, just click on the first one and you can see here that we have our star icon. Okay, so that's how the intellisense works. That's very nice. Next, let's go ahead and actually create our test class here. So in our css we're going to create our class test and we will use a color to show off our color highlight here. So let's add a color of Dodger blue and you can see that the whole text is now Dodger blue. And I can do a similar thing with a hex code.
05:25:15.166 - 05:25:41.670, Speaker A: So let's say that I just did zero, zero and that's black. And you can see that it automatically colors it black. And I also have the option when I hover over the color that I can use a very handy color picker. So I can do that. And then I let it go and you can see that the text again becomes highlighted in that color. So that is very useful. So we'll get rid of that for now.
05:25:41.670 - 05:26:08.842, Speaker A: Let's say that we want to also maybe add a margin back to this. So let's say we're going to add a margin of ten pixels as well. Okay. And if we go back now. So that's our color highlight extension in action. Okay, so we're going to go back to our HTML document here and we're going to test our last extension and this is our CSS peak extension. So on a Mac you're going to hold down the command key.
05:26:08.842 - 05:26:54.610, Speaker A: On windows you'd hold down the control key and then you're just going to hover over the class name. So I'm going to go ahead and hold down command and then I'm going to hover over test and you can see very, very cool. We have our popover window and it shows us the values within our test class. Okay, that is awesome. All right, so those are the four big extensions that I'm going to suggest starting out with. There are a lot of other extensions that you can experiment with on your own and we'll probably install another extension or two as we go along in the course. But that's it for, for the basics of adding some fundamental extensions to visual studio code.
05:26:54.610 - 05:27:33.500, Speaker A: In the next one we're going to be looking at the browser developer tools. That's going to be a fun one. All right, I'll see you in that one. Bye for now. Okay, so in this video we're going to be looking at the developer tools that are built into your browser. Specifically, we're going to be looking at documentation for the chrome dev tools. So Chrome is by far the most popular browser.
05:27:33.500 - 05:28:09.280, Speaker A: I'm actually using Microsoft Edge, which is fundamentally the same as Chrome. It's built with the same engine. If you're using Firefox or Safari, the experience will be largely similar. They will both have similar dev tools built into them. Though the features might not be exactly the same, they will fundamentally do the same things. Okay, so Chrome dev tools. So it's a set of tools built directly into Chrome or whatever browser, and it helps you edit pages on the fly, diagnose problems and much, much more.
05:28:09.280 - 05:28:47.768, Speaker A: So how do we open the dev tools? So if you right click anywhere on the page, the very bottom, you can click inspect. This is a quick way. There is also some keyboard shortcuts that you can use to open up your dev tools. It will by default open into the elements panel and that's the main panel that we're going to be focusing on for now. We'll get more into other things within the dev tools as we get further into the course. But basically the things that we want to look at for now are viewing and changing the Dom. So the document object model.
05:28:47.768 - 05:29:28.050, Speaker A: So basically that is our HTML, including our content as well as the pages styles. So our CSS, eventually we're going to look at it for optimizing our website as well, but we'll get to that a little bit later on. So the devtools UI can seem a bit overwhelming. There's a lot of tabs. We're going to start out very slow and again, just focus on one panel for now. That is going to be very helpful for our HTML and CSS. The other thing I want to point out is that it does contain a device mode which is perfect for testing our responsive design.
05:29:28.050 - 05:30:15.050, Speaker A: So it allows you to actually simulate a different device. So in this case it has an iPhone six and you can even flip it horizontal or vertical. You can see that it is horizontal here. So again, perfect for testing our mobile responsiveness on our websites. You can even actually simulate that it's a little bit slower on a mobile device, which it might be, if it has, you know, mobile Internet, it might be slow in some cases. And again, the main thing we're going to focus on is our elements panel. And you can see at the top here that we have all of our HTML and at the bottom here we have our styles and we also have our box model that we have mentioned before.
05:30:15.050 - 05:30:40.354, Speaker A: And you can see that there's a lot of different things that we can do here. So you can click on each of these if you want to learn a little bit more. But we're going to dive into most of this here. So you can again view and change the Dom. View and change your css. You can inspect and tweak your pages, edit your styles, edit the Dom. There's lots of different things that you can do.
05:30:40.354 - 05:31:22.860, Speaker A: We'll dive into all this eventually as we get through the course. And yeah, without further ado, let's actually, you know, see it in action. So I'm going to go back to my music player example here. So this is a project that I had created previously in my previous course and I'm going to start by just right clicking and clicking inspect. You see that this opens up my dev tools here and you'll notice we have our HTML here and we have our styles down here, just like we saw previously. And the first thing I'm going to do is you can see that everything is collapsed. I can actually right click on this line.
05:31:22.860 - 05:31:45.242, Speaker A: I can do a lot of different things. I can add an attribute, I could edit as HTML, I could duplicate an element, I could delete an element. So it actually allows me to play around. So let's say that I want to delete my body. So if I do that, everything is gone. So don't worry, this is not permanent. I can just refresh the page and everything will be exactly as it was.
05:31:45.242 - 05:32:20.242, Speaker A: This doesn't actually change your project. It just changes what has actually loaded here on your machine, but it doesn't actually change anything fundamentally about the project itself. The other cool thing, if this is collapsed again, I can right click, and there's a cool option here, expand recursively. So what that does is it expands everything within the body. So everything that was nested is now expanded. So you can actually see my complete HTML here, which is very cool. You can see that as I'm hovering over stuff, it is actually highlighting it within the page here.
05:32:20.242 - 05:32:50.426, Speaker A: So that allows me to, let's say I want to click on this and I want to check out the style for the duration. You see that I actually have my specific styling here, which is very useful. And you can see that I also have my box model here. And as I hover over the content, you can see that it shows the content there. There's no padding, border or margin. So you can see those are all dashed out. There's no number there, but I can actually hover on it and it will actually show it, which is very cool.
05:32:50.426 - 05:33:15.824, Speaker A: So if I hover over something else, let's see. Yeah, so my progress container here, you can see that as I just hover over it, you see a lot of orange. And that's showing you that this is actually the margin. And if I hover over it in real time, I can actually see the margin highlighted there, which is very cool. And I can see the content right there. So it's 360 pixels wide and it's only four pixels tall. And then you can see the margin outside.
05:33:15.824 - 05:33:48.778, Speaker A: Very cool. So I can also scroll back up. And again, I can see all of my styling here. And from here I can actually do something like change the color. So I can click on this color input basically here, and I can drag this and I can change the color of that and test out different colors. I can actually even use the dropper tool to click somewhere. Let's say I want this like blue color here, and I can just click on that and it will actually change the color to that.
05:33:48.778 - 05:34:20.082, Speaker A: So that's very useful, this eyedropper tool. And you can see I have my hex code here. I can copy and paste that as well. So it's very great to be able to experiment with my colors within my dev tools. I can take that even further if I want to change, let's say, my border radius or let's say my width. That'll be more dramatic to see. I can actually use my up and down arrow to actually change that again in real time and see what that would look like.
05:34:20.082 - 05:34:46.970, Speaker A: So this is perfect for getting the perfect spacing for something. You can actually do it in the dev tools. Find out what the value is and then copy that value back into your code. So again, you have to make sure you're copying it into your code if you want to have it be a permanent change. So that is very, very useful. We also have, if you click up here, you'll notice we have a hover, an element state. It's our hover pseudo class.
05:34:46.970 - 05:35:20.324, Speaker A: So if I click this, it will show any styling that is related to the hover. In this case, there isn't any, I guess there is on my play button. So I can actually use this also in the top left to select a specific element. So you can just click on it on my main page and you'll see that it selects it here. And I click on that and I click the hover. You can see that it actually shows my hover pseudo class here and it shows the styling here. So I can change this to be 110, I'll change to 10%.
05:35:20.324 - 05:35:53.540, Speaker A: Okay. So you can see it got much darker. So I changed how my hover works compared to how it was before, which is very cool. And I'll just refresh the page to undo that and you'll see the cool thing. Even when I refresh the page, everything goes back to how it was, but it actually stays on the element that I had selected, which is very handy. Okay. And other than that, we also even have something to work on, our box shadow.
05:35:53.540 - 05:36:32.754, Speaker A: So we have a box shadow inspector here. So you can see that our shadow editor. So you can see it has a little bit of a different symbol to our color picker, which we have one here. So if I click on this, you can see that I can actually change the, the values of my box shadow in real time. So if I turn this blur all the way down, you'll see that it just becomes a solid box. I could change my offset to be more, I can actually like drag it around like that, which is kind of cool. So let's say I change it to that and then I can increase the blur back to actually make it look a little bit better.
05:36:32.754 - 05:37:04.364, Speaker A: And I could change the spread to make it larger. So it's very cool to have a box shadow editor built into your dev tools because then you can get the perfect box shadow just by adjusting these inputs here, which is very nice. And I can do a similar thing with my rgb a. So see that this is a little bit different. Instead of having a hex color, it has my rgb which is just black because they're all zero. But you can see I also have a slider for my alpha value. So I can actually slide this to change that alpha number.
05:37:04.364 - 05:37:49.510, Speaker A: And you'll see that that's obviously very dark and I can drag it all the way down if I want to make it a little bit of a lighter shadow. This helps me kind of experiment with how much opacity I want on my box shadow. So you can see that this is going to be very, very useful to test things kind of in real time without having to do that trial and error. It allows you to have a live preview within the browser of what it actually looks like. And I think that that is something that is going to be super, super, super useful for us. Okay, and moving on, the next thing I wanted to show is the device mode here, the device emulation. So again, this is all just in our elements panel.
05:37:49.510 - 05:38:16.890, Speaker A: That's all we're going to focus on for now. And if I toggle this on, you'll see that it is simulating a Samsung Galaxy ultra here. And this is the screen size. It looks very similar, but you can see that it is a vertical rectangle now. And you can see that I can change it to throttle the Internet performance. Just to check, you know, how fast is my web project loading. That's what that is for.
05:38:16.890 - 05:38:46.510, Speaker A: And I can also rotate it. You'll see that it doesn't look perfect there, but it allows me to rotate to the horizontal orientation. So that again is going to be perfect for our responsive design work that we're going to do a little bit later in the course. Okay, so that's kind of an overview of the developer tools. It is very, very handy. I will show one other thing. So let's say that I delete my container here.
05:38:46.510 - 05:39:18.326, Speaker A: So I am also able to actually add. So I can edit this as HTML. So you see that it just turns into HTML and I can actually add my own elements if I want to change things. I'll just show this as an example. Oops. And then I can click off of it and you'll see that, yep, we can actually modify this page completely and add our own elements. So that's another function of our dev tools here.
05:39:18.326 - 05:40:02.034, Speaker A: Okay, very cool. The very last thing I wanted to show as well is I'm going to refresh this one more time. This is in the browser itself. It's not quite the dev tools but you'll notice when I clicked inspect above that we had an option to view page source. So if I go ahead and click on that, it's actually going to load the HTML file, which is very cool. This is from my GitHub page and this is the complete HTML and I'm also actually able to click on my style css and I can actually see the css for the page and I can do the same thing for my script js. So I can actually see the JavaScript.
05:40:02.034 - 05:40:53.354, Speaker A: So you can actually use these developer tools and this view page source on other websites. Not everything is going to be maybe as transparent as this and you might not be able to see all the styles or the scripts, but it's a great way to get ideas from HTML and css of sites that you like and maybe try to see how some things are being done. And if I go back to my source, I can even actually click on this jpeg, so it'll actually load the raw image there. Or I can click on the favicon and it will load the raw favicon there. So yeah, we can also use view page source to kind of see under the hood of other websites. Okay, very cool. So that's a brief overview into the dev tools and also view page source.
05:40:53.354 - 05:41:41.840, Speaker A: You'll see that there's a lot of power in the dev tools and it's going to be very helpful for our purposes of learning css and being able to tweak things in the browser is going to be very, very helpful. All right, that's it for this one. I'll see you next time. Bye for now. Okay, so in this one we're going to be talking about GitHub. So the first thing you're going to do is you're going to need to sign up for a GitHub account. If you don't have one already, then we're going to configure GitHub on our local development environment.
05:41:41.840 - 05:42:39.480, Speaker A: Then we're going to create a repository on GitHub together so that we can push our template project from our local machine onto our GitHub repository. And then lastly we're going to configure GitHub pages, which is going to allow us to host our project and any future projects online for free so that we can share them with everyone. Okay, that's the plan for this lesson. Let's get started. So you can see that I'm here at the GitHub website and you can see down here to sign up for GitHub, you can just click on this and this will take us to another link here and you can see that it has a bit of a process to it here. I am not actually going to sign up for GitHub right now because I already have GitHub. But you can go ahead, you're going to fill in your email address, you're going to create a password, etcetera.
05:42:39.480 - 05:43:08.960, Speaker A: And then from there you're going to sign in to your account. So I'm going to go ahead and sign into the account that I already have. Okay. And once you sign in, you're going to land on a dashboard page. It might not be as populated as mine. I've been using this GitHub account for many years. You can see on the left side I have my top repositories and in the middle there is a feed that's related to people that I am following and projects that I am following.
05:43:08.960 - 05:43:42.454, Speaker A: But for now I'm just going to go into my profile here. So if I click on the top right, I can go to my profile. You can see that I have my six pin projects here and this will show you your contribution. So every day that you add a commit, you'll have a dot here which will show more or less commits. So some days have more than others. And if we go up here in the top, you see that I have repositories here. So I have a bunch of different projects that I've already created.
05:43:42.454 - 05:44:12.500, Speaker A: And what I'm going to do is I'm going to start out by creating a new repository. So I'm going to go here and click new and I'm going to start by typing out the repository name. So I'm going to name this template and I'm going to add a description. It is optional. So this is a template project. Okay. I'm going to go ahead and leave it as public.
05:44:12.500 - 05:44:41.220, Speaker A: I am not going to add a readme file, that's fine. And I'm not going to add a gitignore for now, and I'm not going to use a license for now. And I'm just going to click at the bottom and I'm going to click create repository. So this is what you'll do. Just follow along with this part to create your repository. And you can see here that by default we have a page with a lot of instructions on it. There's no code or anything in here quite yet.
05:44:41.220 - 05:45:18.458, Speaker A: And so this is the quick setup if you've done this kind of thing before, which I have. So I'm going to walk you through it, but if you haven't, this is some of the steps that you would use. We are going to use these steps as well and let's just get started and actually commit our local project into this repository. So I'm going to go ahead and I'm going to copy this. For now we're going to use it in a little bit, but we're going to come back to this browser in a second. For now, I'm going to go back to visual studio code. So we have our template project open here.
05:45:18.458 - 05:45:55.618, Speaker A: I've actually removed everything from the body. For now, we're just going to have our plain template. Okay. And the next step is going to be to actually open up a terminal window. So the great thing about visual studio code is that it has an integrated terminal so we don't need to go into another application. And to open this up, we're going to go up to our top taskbar here under view and you can see that we have the option of terminal. So we're going to click on that and it's going to open a terminal window at the bottom here there's also a keyboard shortcut which is control and backtick.
05:45:55.618 - 05:46:41.706, Speaker A: So that is the key right below the escape key. And now we're going to need to do a few things at first to configure our global environment related to git. So we're going to run a few commands that you'll only need to run once ever and then you'll never need to run them again. So let's start with those git space configured space global and then user name. And then I'm going to put in my username, which is Jacinto design. Okay, and then press enter and then we're going to add another one. Git config global user email.
05:46:41.706 - 05:47:31.456, Speaker A: And then again I'm going to put in my email, so make sure you're putting in your information here and not my information. And then lastly, by default when we create a repository, it has the branch name of master, but we're going to switch that to be main instead. To me that makes a bit more sense. So git config global init, dot default branch, uppercase b and then space and then main and then press entertain. Okay, so those are our global git configs. We only needed to run those once and we don't need to run them again. Okay, so I'm actually going to close this one and I'm going to use a shortcut and I'm going to create another terminal here.
05:47:31.456 - 05:48:10.584, Speaker A: So every time you have a new project, you're going to need to initialize a git repository. So to do that we're going to type Gita init and press enter. And you can see here that it initialized an empty git repository in my folder. So it's actually creating a git file. And you can see now that all of our files are now highlighted in green and they have a u next to them that stands for unstaged, meaning we have unstaged changes. And if we click right here, you see we have the number four. We have four files that have been changed.
05:48:10.584 - 05:49:08.628, Speaker A: So that's four files that have been changed in relation to a totally empty repository, which is what we just created. And so every time you make a change to a specific file, it will have this green u to signify that you have unstaged changes within that file. I'll show you more on that in a minute. You can see that we could actually enter our commit message here and we can use this button here to commit, but I'm just going to show you how to do it in the terminal for now. So if you'll recall, we copied the link from our GitHub repository when we created it and we're going to be using that right here. So we're going to type git remote add origin, and then we're going to paste in what we copied and then press enter. So that is going to configure our repository to point to the repository that we created on GitHub.
05:49:08.628 - 05:49:46.640, Speaker A: So it's pointing to that remote origin. And then now we're going to add our unstaged changes. So we could type git add and then we could type index, HTML, style, CSS, etcetera. But it's much easier to just type git add and then period. And that's going to add everything. So we're going to press enter there and then we need to add a commit message as well. So we're going to type git commit dash m, and then single quote initial commit and then another quote to close that.
05:49:46.640 - 05:50:22.526, Speaker A: And then I'm going to press enter. And you can see as soon as I do that it actually has all the file names that have changed. So four files changed and then we're inserting different lines of code. That's what that's referring to. And the very last thing we need to do now, you can see that our files are no longer green and this number went away. That means that these changes are now staged instead of unstaged. But the last thing we need to do is actually push these staged, this staged commitment to our GitHub repository.
05:50:22.526 - 05:51:15.048, Speaker A: So to do that we're going to type git, push origin main and press enter. So if this is the first time you've done this, you'll see that it wants you to actually sign in with GitHub. So we're going to click allow and it's going to go to our page here. We have already signed into GitHub so it should just work. If we now click open and it's going to go back to visual studio code and it's going to say allow an extension to open this and I'm going to don't ask again. And I'm going to click open and you'll see that it signed in successfully. And you can see that it compressed our objects, it wrote our objects and then it also said where it wrote the objects to and you can see it went onto our main branch.
05:51:15.048 - 05:51:52.108, Speaker A: Okay, so we've successfully now pushed our initial commit into our GitHub repository. Awesome. So now if we go back to our browser and we actually refresh this page now we're going to actually see all of our code here. Very, very cool. So we've now committed our changes onto GitHub. Now what do you do if you need to make changes to your project? So let's go back to visual studio code and see what that would be like. I'm going to close this terminal as well.
05:51:52.108 - 05:52:59.880, Speaker A: And I'm going to go ahead and I'm going to write back my h one that is saying hello world. And then you can see that it's auto saving and you can see instead of a u it's actually saying modified. So we're modifying this file that already exists. And you can see same thing we have this m here and we're going to go ahead and we're going to now go through the process of committing a change. So we don't need to initialize this repository again and we don't need to add the remote origin again either. So whenever you're committing again to the project that you've already set up on GitHub like we already have, we just need to type git add and then period git commit. We need to still add a commit message dash m and then single quote, we'll just say hello world, single quote, press enter and you can see one file changed to one insertion.
05:52:59.880 - 05:53:53.042, Speaker A: And then we're going to do Gita push origin main and then press enter and you can see same thing, it's compressed our objects and written our objects to our repository. Okay, very cool. So now we're going to go back to the browser and if we refresh this, you'll see that now we have a different commit message specifically for index HTML. So it actually only changes the file where we have modified it. So you'll see that these other files have the same initial commit and they have not been changed. We can see though in the top right that we have two commits and if we click on that it will actually show our commit history here. And if we click on this one specifically, it'll actually show us exactly line for line, what has been changed.
05:53:53.042 - 05:54:37.936, Speaker A: Very cool. Okay, so back out to our code here. So we have successfully pushed our template project to our GitHub repository. The last thing that we're going to set up is hosting on GitHub pages. So to accomplish this we're going to go over to our settings here, and on the left side here you can see that we have pages. We're going to go ahead and click on that and to set up GitHub pages here, we're going to deploy from a branch and we're going to select a branch here and it's going to be our main branch and we're going to go ahead and save that. And you can see at the top here it says that our source has been saved.
05:54:37.936 - 05:55:02.204, Speaker A: You can go ahead and refresh the page. And now it says your site is live at this link. Perfect. And we can go ahead and click visit site. And there we have it. We have our hello world in our template project and it is on the Internet and we can now share this with anybody that we want. Very cool.
05:55:02.204 - 05:55:39.080, Speaker A: So we've hosted our project online for free. That is awesome. It might take a few minutes when you refresh the page to actually see the link, and it might take a few minutes if you have a bigger project for it to actually appear in GitHub pages. But eventually it will be deployed and that is very, very cool. All right, so that's it for learning about GitHub. You can repeat this process with any of your future projects and you can use this video as a reference. Eventually you will get the hang of it.
05:55:39.080 - 05:56:16.250, Speaker A: But that's basically it for this lesson and for this developer setup module as well. In the next one we're going to be diving into design principles and typography. It's going to be a lot of fun. I'll see you there. Bye for now. Back so soon? Fantastic. Your passion is exactly what we need here at Typographix.
05:56:16.250 - 05:56:46.578, Speaker A: You know, I might be the CEO, but even I don't know everything, which is why I surround myself with brilliant minds. One such mind is Jacinto. Jacinto is our lead developer. Hes a master when it comes to web design and has a special love for typography. Now that youre all set up, I think its best you work closely with him. Its a pleasure to meet you. Working here has shown me that words arent just words.
05:56:46.578 - 05:57:25.760, Speaker A: The way they look, feel and present on a screen can change everything. Exactly. At typographics, we emphasize the integration of AI and design, but foundational design principles remain paramount. Typography, the art of arranging type, is at the heart of our company's mission and that's where we'll start. Typography isn't just about choosing a fancy font and calling it a day. It's about readability, aesthetics and conveying a mood or emotion. Think of it as the voice tone of your written content.
05:57:25.760 - 05:58:37.820, Speaker A: Thats beautifully put. You see, integrating AI in our work doesnt replace these design elements, it enhances them by learning the fundamentals. With Jacinto, youll soon see how we merge classic design principles with cutting edge AI technologies. So, are you ready to explore the wonderful world of web typography with me? Alrighty. Now that we have our developer environment set up, and before we dive into the nitty gritty of advanced CSS techniques, it's crucial to understand the core web design principles that will guide our work. These principles provide a solid foundation for your projects, ensuring they are visually appealing, user friendly and effective at delivering your message. Throughout the course, we'll explore how these web design principles tie into advanced CSS techniques.
05:58:37.820 - 05:59:53.610, Speaker A: For now, we're going to start building that foundation with four main principles of design, you'll be able to wield the power of CSS more effectively to create stunning and engaging websites that will leave a lasting impression on your users. By keeping these in mind, in this module, we'll be focusing mostly on typography, including Google fonts, font styling as well as the use of icons. Typography plays a vital role in conveying the tone and personality of your website, and mastering it will set you apart as a skilled web developer. Lastly, in this module, we'll dive into creating our first typographics project, where we will create a minimalist website to help link to our social media platforms. All right, so let's get started. Web design fundamentals so it's important to always think about the user's perspective when designing the look and flow of your web projects. The field that addresses this is known as UIux, or user interface and user experience.
05:59:53.610 - 06:00:48.190, Speaker A: This field is not only limited to the web, this is also an important field for things like video games and mobile app development and things like that. We're going to start by looking at some principles of design, and this is a great free resource off of paperleaf. I'll provide a link within the course, and you might have heard of these principles before. They are called crap, crap. Contrast, repetition, alignment and proximity. And these principles don't only apply apply to web design, but they also apply to newspapers, magazines, product label design, any type of design really. So starting at the top here with contrast.
06:00:48.190 - 06:01:18.320, Speaker A: So contrast is important because you want elements to be able to stand apart from each other. So we have some examples of color contrast. We have examples of black and white contrast, size and shape contrast, directional contrast. There's lots of different ways that you can contrast your elements. And of course we'll dive more into that as we go. Repetition. Repetition breeds cohesiveness in a design.
06:01:18.320 - 06:02:00.650, Speaker A: So having buttons that all look the same or using the same style of fonthe things like that help create consistency and a unified looking design. Next, alignment. So proper alignment means that every element is visually connected to each other. So you can see that we have some left center right aligned, we have vertical alignments as well. So you do have to think about alignment both horizontally and vertically. This also factors in with text. Of course, you can have left align text, right align text, center align text, but also justified text.
06:02:00.650 - 06:02:42.790, Speaker A: We'll dive more into that within this module. And then lastly we have proximity. So basically how far apart you are spacing your elements. So that will either leave the user with a feeling of everything is too cluttered or everything is too far apart, it kind of feels disconnected. Or we want to just be in that middle ground where everything is spaced appropriately from each other. Okay, so we're going to dive into each of these in more of a web related context. So contrast is important to keep in mind when planning background and font color, especially.
06:02:42.790 - 06:03:27.070, Speaker A: So in this example, we can see that we have a black background and we have white text and so we have a high contrast. We'll get more into this later on. And there are various tools that will help us check our accessibility, meaning how good our contrast is in our text, between the background color and the text color. And you can see a bad example here below where we have a gray background with gray text. So that is much harder to read than our high contrast of our black background and our white text. So that is something to keep in mind when it comes to text elements. Okay, repetition.
06:03:27.070 - 06:04:12.984, Speaker A: So repetition is about keeping consistent styles across the project, including font, family colors, button styles, etcetera. So these examples don't just apply to text. As you can see, having all of these buttons look the same creates a more unified feeling across our website, rather than having all of these buttons be different colors. Next, alignment. So alignment in general is all about the positioning and layout of all of your elements, keeping in mind how they are related to each other. So in this example here we have our text and our button. Everything is centered, aligned.
06:04:12.984 - 06:04:50.550, Speaker A: It all looks like it goes together. And then in our bad example here, we have the title is left aligned, the body is right aligned, and then the button is left aligned. And you can see that it just doesn't look like it goes together. So this applies not only to text, but to all elements. And our last principle of proximity. So proximity is about ensuring the related elements are organized together with proper spacing. In the left example, we can see that the first item and the title are too close together.
06:04:50.550 - 06:05:40.580, Speaker A: And in the right example, we can see that everything is evenly spaced and aligned well. So again, something to keep in mind not only for text, but even for images, things like that. We want things to be spaced in a way that makes sense, especially things that are related to each other. We want to have that be something that is nice and balanced. So those are the four main principles of design that we're going to incorporate throughout the course as we go. Now we're going to dive specifically into typography and some suggestions for how we approach it. So, typography in web design, typography creates an appealing visual environment and improves user experience by making content more readable and digestible.
06:05:40.580 - 06:06:20.112, Speaker A: It's important to pay attention to font selection, hierarchy, contrast, spacing, alignment and responsiveness when working with typography on the web. Okay, and let's look at all of this in a little bit more detail, starting with font selection. So there are three main groups of fonts. We have Serif sans serif and decorative and script fonts. So serif fonts are generally used for more traditional classical designs. They have small decorative strokes at the ends of the letters. So we have two examples up at the top.
06:06:20.112 - 06:06:53.556, Speaker A: Here we have times new Roman and Georgia. If you'll notice, at the bottom of the t, the I and the m. They have little ticks at the bottom that are almost touching each other. So these are the serifs that we're referring to. I know that when I was in school, every essay that I ever submitted, they requested this times new roman font because it was easier to read paragraph after paragraph. Okay, moving on. Sans serif fonts.
06:06:53.556 - 06:07:41.006, Speaker A: So we have arial and Helvetica here. These are our sans serif fonts examples, and they're preferred for a modern, clean look. And they lack these decorative strokes. So you can see we have an eye here as well, and you can see that it is flat at the bottom. There is nothing reaching out either way to the letters on either side, and it does look a lot more modern, and you've probably seen this pop up a lot more in the last several years. And then lastly, we have decorative and script fonts. So, these are normally used for headings, logos, or highlighted text, but rarely for body content due to readability issues.
06:07:41.006 - 06:08:30.890, Speaker A: So you might recognize papyrus here, and that is very similar to the avatar font, very famously. And we have another font here called Broadway, which is kind of an art deco font. So, fonts can get very, very specialized and very decorative looking, and they should only be used for titles. They should never be used for big paragraphs of text. Okay, so these are just a few examples. Next, we're going to move on to font hierarchy. Establishing a clear hierarchy is vital, using different weights, sizes, and colors to distinguish between headings, subheadings, and I body text.
06:08:30.890 - 06:09:15.426, Speaker A: This helps guide the user's eye and helps in understanding the structure of the content. So, in the top here, we have a good example where we have a main heading that is bigger and a darker color than our subheading. And then we have, of course, smaller text for our body text. And we have a bad example here where everything is styled the same, and it's hard to tell what is important, what is the structure. It all kind of blends together. So this is an example of font hierarchy not being used and being used effectively here. Okay, moving on to font spacing.
06:09:15.426 - 06:09:55.410, Speaker A: So, we have three main ideas here to keep in mind. Line length, line spacing, and letter spacing. So we don't want our paragraphs, if we can help it, to be too long or too short when it comes to our line. So you can see that we have an example here. We have all of our css below here, and we want to keep this paragraph to maybe 50 to 75 characters of line length to make it easier to read. Next, we're looking at our line spacing. So, line spacing ensures better readability.
06:09:55.410 - 06:10:36.180, Speaker A: And a good rule of thumb is to have it be 1.5 times the font size for your body text. So we have appropriate line spacing here. And then lastly, letter spacing between characters should be balanced, not too close, not too far in order to maintain readability. Okay, so those are important to keep in mind as well. Okay, moving on to font alignment and whitespace so text can be aligned left, right centered or justified. Left alignment typically is the most readable for left to right languages like English.
06:10:36.180 - 06:11:52.230, Speaker A: And it's also important to keep in mind that you want adequate white space around your text elements to make the content more digestible and help focus the user's attention. So you can see we have all of our different text alignments here. The thing to note with justified text is that basically it has the left margin and right margin are locked and then it actually spaces the letters a bit more so that it can maintain these hard left and right margins. You might notice that more in newspapers and magazines, but you can do it on the web as well. And in summary, it's important to keep a consistent typographic style throughout the website to enhance the overall aesthetic and user experience. You want to limit to two or three different font families, though the main text should always be the same font family, and it's also very important to keep in mind that text should be clear and easy to read. Legibility is affected by font choice, color spacing and size.
06:11:52.230 - 06:12:23.960, Speaker A: So on the top here we have a nice example, consistent, easy to read main text with a consistent title. Below we have a bad example of chaotic design. Here. We have our comic suns, we have Broadway. We have multiple texts here for the body as well as we're using a decorative text called Joker man. And that really does not work. It is very, very difficult to read.
06:12:23.960 - 06:13:17.848, Speaker A: So keep in mind you want to make it as easy to read and as consistent as possible when you are choosing your fonts and styling your fonts. Okay, so the other thing we're going to tackle within this module is we're going to explore using Google fonts. This is a great way to inject many different styles of fonts into your projects. And you can see we have at least 1500 different font families that you can choose from. And the other great thing about this is it is guaranteed to be consistent across different platforms. So windows and Mac by default have a certain amount of fonts and they actually are different depending on the platform. There are some that are available on both, but some that are only available on one and not the other.
06:13:17.848 - 06:14:13.922, Speaker A: And using Google Fonts is a great way to ensure that it will appear the same to every user regardless of their platform. And after we talk about Google fonts, we're also going to talk about font awesome icons. So what's great about font awesome is it's very simple to implement and you can customize these icons because essentially they are using vector graphics, which vectors are what make up text. And that also makes it infinitely scalable without losing quality. And there's over 2000 free icons to choose from. You see, we have a GitHub icon here, and it's also great for performance and accessibility. It can optimize web performance by reducing requests for multiple different icons.
06:14:13.922 - 06:14:45.460, Speaker A: You're requesting them all from one source, and it also has accessibility built right into it. Okay, so that's basically it for our introduction. We're going to tackle all of this with some practical examples. We're even going to have some games that are going to teach some of these design principles. And in the end, we're going to create our first typographics website project. I'm very excited to dive into this one. Let's start creating.
06:14:45.460 - 06:15:34.046, Speaker A: Alrighty. So in this lesson we're going to be looking at five design related games that are going to help reinforce some of the fundamentals that we discussed in our introduction. The first one up is called can't unsee. So you see that we have a left image and a right image. So the goal of this is to select which of these two is most correct. So this tutorial example, it looks pretty straightforward. You can see that we have a skewed circle.
06:15:34.046 - 06:16:16.560, Speaker A: We have comic sans as our font here. We have some bad contrast, and we have some inconsistencies in our design here. Even our Wi Fi symbol here is tilted the wrong way this time also doesn't make sense. 3178. So it's very obvious that this is the correct one as we go along. Things will actually get a little bit more difficult as we go. Okay, so you can actually also hold down the compare button to compare the previous one, and it will actually tell you which is right and the reason why.
06:16:16.560 - 06:16:47.240, Speaker A: Okay, so number two, select the design that's more correct. So you see that we've already gotten a little bit more difficult, but you can see we have. This is too far spaced out, so that goes back to proximity. You can see that this text should be bold because it's kind of the hierarchy here. It should be like this here, of course. So we're going to click on this one and you can see icons, fonts, shapes. And we're going to go to the next one.
06:16:47.240 - 06:17:23.806, Speaker A: And you see here we have some, again, this is a lot closer. These two examples, as we get more and more into it, they do become a lot more difficult, actually. And you can see that the main difference here is we have all of this white space here that we shouldn't have. So I'm going to go ahead and click on this one. So again, it tells you the specific reason and you can hit compare to actually see the difference between the two overlayed. Okay, so I'll play the easy round, but you can go ahead and play. It actually goes up in difficulty.
06:17:23.806 - 06:17:46.610, Speaker A: I'm not going to play the whole game through, but just to go through a couple of these. Okay, so again, this is a little bit more subtle. We can see that this is maybe not enough contrast. This font here is a little brighter. Okay, got that right. I also can't promise that I'm going to get every single one perfect. This game can be a little bit tricky.
06:17:46.610 - 06:18:04.672, Speaker A: This one's pretty straightforward. We want usually to hang up our hangup symbol to be red and not blue. Click on that one. Destructive action button color. So a destructive action, like a delete or ending a call. Yeah, should be red. Okay.
06:18:04.672 - 06:18:31.132, Speaker A: For this one, you can see that we don't have a background to contrast our image here. So I'm going to go ahead and click that one. Yep. So we want that contrast with our price tag. Okay, moving on. These look pretty similar, but you can see that we don't have consistent capital letters here on enable camera. So I'm going to go ahead and click on this one.
06:18:31.132 - 06:18:55.090, Speaker A: Again, I can compare the two overlaid. That's the main difference is the capitalization. Okay. Very obvious here you see that this guitar image is skewed quite a lot. So I'm going to go ahead and click on this one. So you can see that aspect ratio is way off there. And this one, again, contrast, very easy to spot.
06:18:55.090 - 06:19:25.050, Speaker A: So you can see the difference here. The background is way too faded and way too close to that font color. And this is the right one here you can see that we don't have consistent solid icons like we do on this left example. So you can see that there. And this one, this line is a little bit too thick. Doesn't need to be that thick. So separator width.
06:19:25.050 - 06:19:47.582, Speaker A: Yep, I've got that right. And this is pretty subtle, but the contrast is a bit off here. The foreground icon color is a little bit brighter here there's more contrast. So you can see. Yep, icon contrast. Okay. And onto the search bar.
06:19:47.582 - 06:20:09.352, Speaker A: I believe it is this one. We want it to have more contrast rather than less in that example. And. Okay, this one's obvious. Again, the photo aspect ratio is off. Okay. And with this one we can see that this text here is not vertically aligned.
06:20:09.352 - 06:20:33.710, Speaker A: So this comes down to alignment, whereas we can see that this text here is aligned with this camera icon. So you can see it here more obviously. Okay. And it's actually this color here. It should be green to show like online. Online is usually associated with green. That's literally the only difference there.
06:20:33.710 - 06:20:58.840, Speaker A: With this we can see the text contrast. We want more contrast rather than a dark text color on a darker background. Okay. And capitalizing the first letter of search. Okay. Pretty straightforward. And here we want the contrast between these two.
06:20:58.840 - 06:21:29.650, Speaker A: Skip is more of a negative action. So we only want one button with the default style. And skip, we want the user to consider it differently so it has that contrast in that button style. And you can see with this one, the camera icon is a little bit too big. So I'm going to click on that one and you can see the difference. It's taking up way too much space. We want to have that kind of white space between our icon and our text here.
06:21:29.650 - 06:21:48.592, Speaker A: And then the last one, I talked about this, I think before. Border radius makes everything look nice. So we have our rounded corners here and here we do not. So you can see. Yep. Border radius is the only difference there. Okay, so I'm going to just stop right there on the easy level.
06:21:48.592 - 06:22:25.558, Speaker A: I'll let you do the rest on your own. They definitely do get progressively more difficult as you go along, but go ahead and have fun with this one and you can let us know your score in the discord. Okay, moving on. So we have another game here. It's called pixactly. And the idea behind this is that you're going to try to draw a box that matches the dimensions given. So it's better to have a lower score rather than a higher score.
06:22:25.558 - 06:22:52.852, Speaker A: So let's go ahead and enter this. So we're going to have five rounds here. And the goal is we want to draw a box that is 30 pixels wide and 30 pixels tall. So we're going to essentially draw a square here. So I'm going to guess I'm not super good at this game, but I will give it my best try. Maybe like that. Okay, pretty good.
06:22:52.852 - 06:23:06.902, Speaker A: I was only off by seven. Not too bad. That's actually, I think the best I've done at this game so far. Okay, 100 pixels wide and 140 pixels tall. So let's go hunt. Oh, I let go. Oops.
06:23:06.902 - 06:23:25.050, Speaker A: Okay, that was an accident. I was gonna definitely draw more than that. My finger slip there. Okay, well, that happens. Okay, let's try this one with 75 pixels. So maybe about there. And height 160.
06:23:25.050 - 06:23:42.400, Speaker A: I'm gonna guess maybe like that. Okay. I was way off on the height, but I got the width pretty much on. Just too off there. Okay. Width 325. So let's say maybe like that.
06:23:42.400 - 06:24:07.908, Speaker A: And then height will be 220, maybe like that. Okay, I was way, way, way off there. That one I genuinely did try, and I was way off. Okay, so again, I'm not perfect at everything, but. And this game, I think, is actually very, very challenging. So let's try one more time. This is the last round with 305.
06:24:07.908 - 06:24:22.998, Speaker A: So we'll go like maybe there. And then actually, this is very similar to the last one. So I'm going to guess it's maybe like that. Okay, that was still pretty close. Not as bad as the last one. Okay, so my score is 501. So the first round, I did great.
06:24:22.998 - 06:24:36.918, Speaker A: I was only off by seven and I was. Okay, 7384. This one, my finger slipped in my defense. And this one it didn't. And I did even worse in this one. I'm better with width than I am with height. Practice makes perfect.
06:24:36.918 - 06:25:16.342, Speaker A: I'm sure you can probably do better than that score, but, yeah, that's a great one to just kind of wrap your head around how many pixels of width and height are in the certain elements. Okay, we're going to move on to the third one here. So this one is called, it's centered. That. So basically you need to determine whether or not this dot is centered, in this case, in the left rectangle. And it is looking to see if it's centered both vertically and horizontally. So this is a great way to train your eye to see alignment.
06:25:16.342 - 06:25:30.650, Speaker A: Again, I'm not the greatest at this, but I will do my best. I do think that that is alight. Yeah. Okay, great. I was right. Okay, so I can see right off the bat that this one is not aligned in the center there. So I'm gonna click no.
06:25:30.650 - 06:25:49.240, Speaker A: And this one is also off to the left as far as I can see. Yep. Okay. Ooh, this one is close. I think it's a little low. Okay, well, I got only three. I'll try one more time.
06:25:49.240 - 06:26:01.720, Speaker A: This is a fun little game. Okay, so that's off to the top left. Yep. Okay, I think that one is good. Yep, perfect. I think that one's good. As well.
06:26:01.720 - 06:26:18.158, Speaker A: Okay, just barely off. So. Yep, that's a hard game. Feel free to try that one on your own as well. Okay, moving on. We have two games here that are actually related to typography. Refresh the page, it'll give you a little preview.
06:26:18.158 - 06:26:44.660, Speaker A: So basically the goal of this is to better understand good letter spacing. So as I hover over, there are two letters that can move here, the a and the v. And basically I want them to be, I want the letter spacing to be equally aligned in this. So let's say I want to move this over a little bit of. And I want to move that over. Maybe this should go back a little bit, maybe like that. And then I go ahead and click.
06:26:44.660 - 06:27:22.556, Speaker A: Done. And this one scores each individual round. Okay, so I got 100, so pretty close. You can see the blue is, I believe, where it should have been and the white is where I placed it. So the a should have been slightly over to the right. This game also does have keyboard shortcuts where you could just nudge it over by one pixel, but I'm going ahead and using my mouse to do it. Okay, so this maybe like there, maybe like there.
06:27:22.556 - 06:27:41.850, Speaker A: Okay, try that. Okay. 80 my y should have gone over a little bit more. And the p as well to the left. Okay, not perfect, but not terrible. And I'll just try one more here. Okay, I think that should be maybe like.
06:27:41.850 - 06:28:02.392, Speaker A: Okay, interesting. Maybe like this. Let's try that. Okay, I got 100. All right, not too bad. It should have been maybe over a little bit more to the left, but I still have a score of 100 on that. So that's a fun little game to try to get you a little bit more familiar with letter spacing.
06:28:02.392 - 06:28:42.740, Speaker A: Again, feel free to try that on your own. It scores each one individually, so it's just one round at a time. Okay, and we're going to move on to one last typography game here. So this is talking about the relationship between font size, line height and line width. So it's talking about the perfect triangle. So, meaning we are wanting to combine all of these things together in a very specific way. You can see that the font size and the line width are fixed and the only thing we can adjust is the line height.
06:28:42.740 - 06:29:00.690, Speaker A: So we have ten levels here and we're going to try to match these other parameters. So you can see it's a slider, I can move it and it will change. So let's say maybe like 1.5, let's say. Okay, so let's check that. And. Okay, nine out of ten.
06:29:00.690 - 06:29:17.070, Speaker A: Not bad. Move on to the next level. Okay, so our line height is 1.6. Font size 18. So this is going to determine the line width. So we talked about this in the introduction. We want usually 50 to 75 characters.
06:29:17.070 - 06:29:38.520, Speaker A: So let's go ahead and maybe right there, we'll see how that is. Okay. I was way off, so I guess it should be way less than that, I think is what the skinny triangle means. Okay. Font size. Let's try this one. Okay.
06:29:38.520 - 06:29:51.580, Speaker A: Maybe like that. Maybe, maybe like that. 14 pixels. Let's try that. Okay, not bad. Three out of three out of five. All right.
06:29:51.580 - 06:30:10.950, Speaker A: Again, I'm not perfect at all these. Line height of two. I think it should be a little bit less. Maybe like maybe 1.7. Okay, not bad. Okay. Could be better.
06:30:10.950 - 06:30:29.818, Speaker A: Doing very average here. I haven't played this game much before. Okay. Align with, I think should be like way less or should be. Okay, maybe like this. Maybe try that. Okay, not bad.
06:30:29.818 - 06:30:52.128, Speaker A: Twelve out of 15. Okay, I'll take that. Definitely a lot closer than last time. Okay. Our yden font size is max here. We definitely want it to be less than this, but we also want only 50 to 75 characters. Let's maybe try that.
06:30:52.128 - 06:31:13.660, Speaker A: 21 pixels size. Okay, not bad. Okay. Better than zero. Okay, we'll try a couple more. Okay, obviously you can see that this spacing is way off for our text here. So I'll go ahead and increase that to maybe 1.65.
06:31:13.660 - 06:31:22.920, Speaker A: Let's try it. That looks a little bit better to me. Oh, I got it. Perfect. Nice. That's great. Okay, a couple more here.
06:31:22.920 - 06:31:41.060, Speaker A: Yeah, that looks way off, maybe like that. 480. Way off. Okay. Three out of 15. All right, cool. And I'm definitely not as good with the line widths.
06:31:41.060 - 06:31:54.234, Speaker A: Okay. I think this needs to be smaller to make my line height make sense. Maybe. Let's go 14. Nice. Okay. And last level.
06:31:54.234 - 06:32:10.110, Speaker A: Level. Ten here, we're going to adjust the line height. I think we want it to be maybe 1.7, let's say. Okay, not bad. Again. Better than zero.
06:32:10.110 - 06:32:42.650, Speaker A: Okay, so I passed, I guess. I'm sure you can do maybe better than that. This is my first time actually playing it all the way through. I've tried it, like once or twice, just a few levels, but, yeah, those are the design games. You can try them more than once. It'll help you, again, reinforce some of these design principles that we have talked about so far. Okay, so in the next one, we're going to dive into codepen and we're going to look at some text styling.
06:32:42.650 - 06:33:26.510, Speaker A: All right, I'll see you in that one. Bye for now. Okay, so in this one, we have a codepen project, and we're going to use it to kind of experiment a little bit with some different font styling. Okay, so let's dive in. First thing we're going to need to do is add some font. So we're going to go div dot text container, press tab. So we've created a div with the class of text container.
06:33:26.510 - 06:33:44.690, Speaker A: And next we're going to add an h one. And it's going to be for our exciting title here. Okay. And we're going to add a paragraph element. And we're going to add some lorem text. So lorem. And then tab.
06:33:44.690 - 06:34:10.432, Speaker A: Lorem. And then tab. And we're going to go ahead and add two more paragraphs. So paragraph lorem tab. And then paragraph lorem tap. Okay, and then one last thing we're going to add. We're going to create another div outside of this that we're going to use to make some vertical text.
06:34:10.432 - 06:34:43.618, Speaker A: So I'm going to go div dot vertical dash text press tab. And we're just going to put a byline by Cento Wong. Okay, so that's it for our content. I'm going to go ahead and open up our css pane here. And the first thing we're going to do is we're going to start with our text container. So we're going to target our text dash container class. And the first thing we're going to change.
06:34:43.618 - 06:35:20.990, Speaker A: You remember what I said about line length. So you can see that we have a lot more characters here than just our 50 to 75. So we can actually use with our, with property. And we can set a value of 50 ch ch standing for characters. And that will automatically make our width approximately 50 characters. So that's very helpful in maintaining our readability. Okay, next, I'm going to give it a margin zero and auto.
06:35:20.990 - 06:35:52.906, Speaker A: And this is going to center our main text container there. I'm going to give it a font size of 16 pixels, which is what it actually is by default. So you'll see that nothing changed there. And I'm going to give it a line height of 1.5 em. So, Em, you can see that that just shifted there. EM is referring to the font size.
06:35:52.906 - 06:36:20.788, Speaker A: So in this case, I am making it 1.5 times the font size of 16 if I had it at one em, which is what it is. To start, our line height is 16 pixels and changing it to 1.5 makes it 1.5 times that. So you can see that it has spread out our lines a little bit more. And if I were to make it two, that would be double, but that would be a little bit too far.
06:36:20.788 - 06:37:05.860, Speaker A: So we're going to go ahead and stick with 1.5 em. Next, we're going to go ahead and change our letter spacing, letter dash spacing, and we're going to do a similar thing, but we're going to do 0.05 em for our spacing here. That adds a very small amount of spacing, but you can see that it spreads it out just enough to make it a little bit easier to read. Next, for our container itself, we're going to give it a background dash color of our favorite white smoke just to make it stand out. And we're going to add some padding, five pixels top bottom, 20 pixels left right.
06:37:05.860 - 06:37:42.140, Speaker A: And we're going to go ahead and we're going to use some border radius of, let's say ten pixels to round the corners nicely there. Okay, cool. So we already have something that's much easier to read. We're actually using the default times new Rellman font here. You can see that it is a serif font if you look closely enough, and it has those little ticks in between certain characters to make it a little bit easier to read. Okay. So that, to me, already looks a lot better for our text container.
06:37:42.140 - 06:38:21.308, Speaker A: But we're going to want to style our h one now. We don't want that classic times new roman font. And we're going to go ahead and change the font family to be Helvetica comma sans serif as a fallback. Okay, I'm going to make this a little bit bigger here. Okay. And our font size is going to be two em. So the way that Em works is it also compounds itself.
06:38:21.308 - 06:38:46.146, Speaker A: So because we have our h one inside of our text container, their text container is the parent of our h one. It is going to one Em will be 16 pixels. So two Em is 32 pixels. And then if I did three em, it would be triple. And you can see that the line height doesn't really work there. It's too big. I would have to increase the line height even further.
06:38:46.146 - 06:39:15.190, Speaker A: But in our case, we're just going to leave it at two em because I think that that fits nicely there. Next, there's a couple other cool things that we can do related to text that will make it stand out a little bit more. So we have some options for text decoration and I'm just going to pick a few different ones here. So underline, wavy. So on a wavy underline. And we're going to make it hot pink. Okay.
06:39:15.190 - 06:39:56.240, Speaker A: That's a nice little example of some text decoration here. I don't like that the G is cut off and we can't see this continuous line here. And to change that, we can actually use another property of text that can be very handy. And this is a text dash transform. And we can actually force all of our text to be uppercase. So this is especially useful if you're getting data input from users and you want to make sure everyone's username is in all caps. This is a great way to do it using just css.
06:39:56.240 - 06:40:40.780, Speaker A: Also, let's make it a little bit more of a title looking thing. And we're going to change the font style to be italic just to give it some extra emphasis. Okay, cool. So we've changed our h one there. Let's look at our vertical text now. You can see that at the bottom here we have our text that is decidedly not vertical. And we're going to target our vertical text class and we're going to change the writing mode and we're going to set it to vertical lr for left right.
06:40:40.780 - 06:41:19.340, Speaker A: You can see that it kind of works, but it's pointing it down. So we can actually transform this. I want it to be writing up. So I'm going to use the transform property and we're going to rotate bracket 180 deg for degrees. And you can see that that flipped it so that now it's reading bottom to top. And then lastly we want to put it at the top of our page here. So we're just going to go ahead and use position absolute and top ten pixels.
06:41:19.340 - 06:41:42.586, Speaker A: Okay, very cool. So an example of using our vertical text here. You can see, I can even highlight it vertically. Very cool. All right. And the last thing I want to just highlight is our text alignment. So a lot of people like to use text align center and I don't really think that it is the easiest to read of.
06:41:42.586 - 06:42:19.768, Speaker A: So you'll see if I use text align center, it might be good for a title in some cases or if you have a very small amount of text. But I see it a lot, especially on mobile designs where for paragraphs and paragraphs it is center aligned. And to me that doesn't look very good. To me it's a lot harder to read because the start of this line is here. The start of this line is back here. There's an inconsistency to the start of each line, even way down here, because we only have a few words on this line. So I would recommend in general staying away from text align center.
06:42:19.768 - 06:43:09.146, Speaker A: Unless you're using it for titles like over images or if you have a very small amount of text, but for any amount of text, even one paragraph, I think it's not really making sense to use text align center. Of course, we also have text align right. Again, I would only ever use this for a title or to line up with images or something. You can see that this is also equally difficult to read. The other option besides left aligned is justify. So again, this is what would be used in like newspapers and magazines to create columns. So if you had a lot of text and you had five or six columns in a row, this might be a good way to draw the user's eye to each column.
06:43:09.146 - 06:43:55.658, Speaker A: But you can also see that in places we have like a huge gap between words. So sometimes this can be maybe a thing that makes sense. But to me, most of the time I would say for ease of readability that you're going to want to go ahead and stick with just text align left for big paragraphs, that is. Okay. So that's a little bit of playing around with some text styling here. In the next one, we're going to dive into Google fonts and a lot of different font types because there are 1500 of them on Google fonts and so far we have only scratched the surface of the couple fonts that are coming with our operating systems. So I'm excited to dive into that.
06:43:55.658 - 06:44:49.476, Speaker A: Alright, I'll see you in that one. Bye for now. Okay, so in this video, we're going to be diving into Google Fonts. Right now we're in the knowledge section of the Google Fonts website and it has some great information on choosing font types, which we're going to go through. It also has a lot of other information here as well that you can feel free to look at on your own. Okay, so choosing font types. So when you have a text, how can you choose a typeface? Many people, professional designers included, go through an app's font menu until they find one that they like.
06:44:49.476 - 06:45:37.610, Speaker A: But the aim of this module here is to show that there are many considerations that can improve our type choices. By setting some careful constraints to aid in our type selection, we can develop a critical eye for analyzing type along the way. Okay, so we're gonna go through this and we're going to go this checklist here for choosing type. It will kind of COVID all of these topics here, but you can go through each of these separately to get more information. And then they also have a glossary of terms that they are using throughout. We talked about m units in the previous lessons, and they have some more information down here at the bottom. Okay, so we're going to go ahead and click on this checklist here.
06:45:37.610 - 06:46:14.170, Speaker A: And we're going to go through this article. So this is designed to be a useful guide. You can see we have essential terms over here and we're going to just go through this. So there's a checklist itself. And the idea is we need to think about certain things when we are picking a font. So the first thing we want to think of does the typeface suit the purpose of the project? So types definitely set a tone and personality, and we definitely want to keep that in mind. We wouldn't use comic sans for something very serious.
06:46:14.170 - 06:46:50.980, Speaker A: We might use it for something that's catered more to children. Again, we don't want to use a decorative font for the main body text. You can see we have a glossary here, body referring to the main text in a piece of content. And next, the typeface's design is comprehensive, so it needs to be legible. It should have at least basic weights and styles. So being able to have a bold version, an italic version, even better. It has alternate glyphs and it also has additional weights and styles.
06:46:50.980 - 06:47:33.554, Speaker A: It'd be great if it has multiple widths. We'll get through all of this, but, and we'll go through this on Google fonts as well. It will actually show you what is available for each font. Number three, the font files are reliable, so they want to meet this checklist above, make sure that the fonts are properly spaced, they're readable, and number four, that they're usable in a situation required. So there needs to be a suitable balance between if you're using multiple fonts, that's very important. And lastly, we need to make sure we have the appropriate font licenses. Okay, so let's explore each of these in a little bit more depth.
06:47:33.554 - 06:48:38.520, Speaker A: So number one, typeface suits the purpose of the project. So you can see here that we have a bunch of different examples here. So we have a playful font, we have a wistful font, we have a contemporary font, handcrafted, friendly, strong, etcetera. So you can see just by looking at these fonts that they do have their own unique personalities, and people will associate certain things with them just by looking at the type of font that we are choosing and as I mentioned, we have an example here of comic sans. So again, comic sans might be perfect for a children's activity timetable in a school. I definitely saw that a lot when I was in school, but it's not appropriate for, for announcing a scientific discovery. So something to keep in mind, you need to have the type that is appropriate for the content that you are trying to show, so its design fits the intended use.
06:48:38.520 - 06:49:46.958, Speaker A: So again, as we talked about, if we're using this type of font here, this might be perfect for a title. It is very stylized, it's decorative, but again, you shouldn't be using it for large chunks of text because it will be very difficult to read. Number two, the typeface's design is comprehensive, so it's great if it has multi language support, meaning that it has characters that have accents. Not every font does, but something to keep in mind, especially if you're going to use it in a language that has accents. It contains legible details, so this is referring to legibility. And for example, there could be a font where the uppercase I, this vertical line and the number one all look the same, but we want to be able to tell the difference between them. So on the right here, we have an uppercase I and we have a vertical line and we have the number one.
06:49:46.958 - 06:50:33.360, Speaker A: And they are very distinct, so it's very easy to tell them apart. So that is something to definitely keep in mind. It has at least the basic weights and styles. So again, we want a regular, an italic, a bold, a bold italic, at the very least, if we're going to be using it for multiple things within our website, if we're using it for a header, sub header, body, other stuff like that. Even better, it has alternative glyphs. So this is referring to having the smaller. If we're using like one, four or things like that, that is definitely helpful.
06:50:33.360 - 06:51:01.010, Speaker A: If we have some alternate numbers here. And even better, it has additional weights and styles. So you can see a great example here of the typefaces, lato and epilogue. So we can see that it is very, very bold. So it has a very high weight here. And then you have a very, very fine version of it, very low weight. And this is great for hierarchy and emphasis.
06:51:01.010 - 06:51:55.154, Speaker A: There's also the idea of having multiple widths, so there can be a narrower version of a font and a wider version of a font. So the extra wide face is great for titles and things like that. And a narrow typeface would allow you to fit more characters per line, more words per line, something to keep in mind, a font can also have different optical sizes. So in this case, the text is actually kind of more squished together in this top one, and then by the end, it's actually a little bit wider. So this can be good again for using one font. They have the source here, one font for everything. You can see we have our main title, our subtitle and our body, but it all looks a little bit different.
06:51:55.154 - 06:52:29.846, Speaker A: And our footer, and it all looks slightly different, even though it is only using one font. Okay. Number three, fonts are reliable. So this is important to keep in mind that we actually have all the features within the font file that we're using. So it's important to consider if we are using a pro version or a non pro version. There are fonts that you can actually pay for. So there are premium fonts, but there are many fonts that Google fonts will offer for free.
06:52:29.846 - 06:53:03.130, Speaker A: And that's the ones we're going to be looking at. Something to keep in mind, and it's also important to make sure that the fonts are properly spaced so that they are readable. You can see that there's kind of some weird spacing happening here. We have a lot of spacing here, but then the a and B are very close and the a and D are very close together. Definitely something to keep in mind. And number four, the fonts are usable in the situations required. So there needs to be a suitable balance if we are using multiple fonts.
06:53:03.130 - 06:53:39.688, Speaker A: You can see here, this is a great example of using two different fonts. We're using one different font here for emphasis. They don't match exactly, but in terms of the x height of. But it is something that ends up fitting very well if it's just shifted a little bit and the stroke weight appears approximately the same. So they do look like they go together. And yet lastly, yes, making sure that we have the appropriate license for our use case. Okay, so that's basically it for our checklist.
06:53:39.688 - 06:54:29.130, Speaker A: Let's actually now dive in to Google fonts themselves. First, I want to mention there is a resource that I discovered as well that is kind of curating the fonts that are trending. So. And specifically, it is targeting free fonts. So this website is called Type Wolf. And again, I'll provide a link within the course and you could get a zip file of all these 40 fonts and have them locally and then add them locally to your project. You sign up for their newsletter and you can see that it has an asterisk to indicate the family is body text friendly, meaning it contains regular italic and bold styles and has low to moderate stroke contrast, large counters, open apertures, and a large x height.
06:54:29.130 - 06:55:04.370, Speaker A: So these things are all factored in when considering what makes a good body font. So you can see that this asterisk down here at the name shows that it is a good body font. And you can see that it has a preview for everything here. If we scroll down, we have some very different examples, but you can see and get an idea of some fonts that are trending and popular right now. Okay, nice work so far, but we're going to continue this in the next lesson. I'll see you there. Bye for now.
06:55:04.370 - 06:55:46.586, Speaker A: Alrighty, back in action. Let's get back to our lesson. And now we're actually going to go to Google fonts itself in the fonts section. So when you first land on the page, it might look different by the time you're looking at it. They do seem to change the layout of this quite a lot, but this is what it looks like right now. On the left side, we have a pane here that we have a preview. We can type something.
06:55:46.586 - 06:56:28.240, Speaker A: We'll do that in a second. We have a slider where we can adjust the font size so we can make it look more like our title. We can have a filter for language, so we can support different languages. Here we have the ability to filter variable fonts or color fonts. So these are more for, you know, some very stylistic titles. We have our serif fonts, we have our sans serif fonts, we have our handwriting fonts, we have our monospace fonts. Oh, there's no.
06:56:28.240 - 06:57:01.418, Speaker A: Oh, I have to reset my filters. Reset all. We have our monospace fonts, so mono space fonts are important to note. They're used in every text center we would use for coding. So code, penniless visual studio code. Basically what monospace means is that every character takes up the same amount of width so that if you're writing code, everything is going to line up with each other if you're looking vertically. I'll show you this in a moment.
06:57:01.418 - 06:57:48.540, Speaker A: But something to keep in mind, it's very good for coding and it can also be good for readability, but it doesn't, you don't necessarily need to pick a monospace font to achieve that readability. Okay, so those are all the filters we have here. And you can see we can also sort right now it's sorted by trending, but we could sort by most popular instead. And our goal at the end of this module. The very last lesson is we're going to create a minimalist website using Google fonts for our typographics company. And the cool thing is you could type anything you want. So anything you want here and it will automatically type it in all these fonts.
06:57:48.540 - 06:58:27.070, Speaker A: And then you can just scroll through and see which ones you like. So that's very, very handy and a quick way to preview many fonts at once. So let's say we just want to put in our company name here and we can just scroll down and actually see what it would look like in all these different fonts. You can also see that it notes how many styles it has available. So our font weights our bold, italic, regular, etcetera. So that also gives you an idea of which fonts would be good for body text. So that's something to keep in mind as well.
06:58:27.070 - 06:59:08.176, Speaker A: Okay, so I also have in mind a list of fonts that we're just going to test out here. And we're going to open a codepen project in order to show how we're going to import them. So I'm going to go ahead and actually search these fonts. So the first one is nabla and we're going to go ahead and click on this font. And when we click on it, you see that we have a sample here and we can scroll down and we can see that we have just regular. There is no other type, but that's fine. We would only use this obviously for a title of some kind.
06:59:08.176 - 06:59:47.642, Speaker A: So I'm going to go ahead and click select regular. And there's a plus sign here. You have the option also of downloading the font, but we're going to be importing it into our project directly from Google instead of downloading it. So you see that we can embed a font using either a link or we can use an import and this will go directly into our CSS file. You can see that we have our font right here. And the cool thing is we can actually add multiple fonts to one import statement. So I'm going to go ahead and search the other ones that I like.
06:59:47.642 - 07:00:20.298, Speaker A: So there's one called tilt Neon. This is the one here. And we're going to scroll down and you see that by default, 120 pixels. Again, this one only has a regular. And we're going to go ahead and click select and you'll see that it adds it here for me to review. And you can see in my import statement I have nabla here and I have tilt neon here. It doesn't specify the font weight or style, because both of these only have one style.
07:00:20.298 - 07:00:36.158, Speaker A: Okay. And we'll continue on. It's a couple more silkscreen. It's another one that I like the look of, again, very stylized. These are good for titles. All of these. You can see in this case that it has two different styles.
07:00:36.158 - 07:01:08.602, Speaker A: So I'm going to go ahead and select both, and you'll see that it actually specifies weight at 407 hundred. So this will show you which styles you're actually importing per font as well, if you were to actually read the import statement very closely. And we'll have a couple more alumni sans pinstripe. Okay. Yeah, it filtered that. And again, this one has two styles. It has a regular 400 is the weight.
07:01:08.602 - 07:01:33.548, Speaker A: That's the font weight in number and an italic. So let's go ahead and add both. And we'll add one more font, and it's going to be called outfit. Okay. And, yeah, I like the look of this one. And you can see that this is the first one that we have a lot of different versions of. So we have a 100 weight, which is a thin font.
07:01:33.548 - 07:02:17.916, Speaker A: That's the thinnest it can go. We have an extra light, which is 200 light, which is 300, and regular, which is 400, medium 500, semi bold 600, bold 700, extra bold, 800, and black, 900. So this, essentially, is every possible weight that we can have. You can see that we don't have any italic, but we have all of our font weights accounted for here. So I'm going to go ahead and select the thin, the regular, and the bold, let's say. And again, you can see that our import statement is getting a little bit larger here. But again, we can import all of these in one statement.
07:02:17.916 - 07:02:45.046, Speaker A: And then it also actually tells you the rules to apply. And it even has the different fallback options. In this case, it's not just sans serif. We have some cursive fonts here, as well as the fallback. And one last font I'm going to add as well. We'll go back to our fonts page here, and we'll go back to filters. I do want to add a monospace font as well, just to show how that works.
07:02:45.046 - 07:03:23.624, Speaker A: So we'll go with IBM, plex, mono, why not? Okay. And we'll go ahead and we'll just add the regular here. You can actually see it right now if I scroll down, even though we have a thin font here, an italic font here. And then as we keep going, you can see that the eyes are all lining up. With each other still. So it doesn't matter what the weight is or if it's bold, italic or whatever. All of these monospace fonts will always line up every character.
07:03:23.624 - 07:03:53.450, Speaker A: Capital, no capital. Font weight doesn't matter. That is the whole point of it being a monospace font. Okay. And you'll notice that my sidebar at the right here has disappeared with my import statement. To get it back, we are just going to click on this icon here, view selected families, and you can see that all of the fonts that I previously selected are here. And if I scroll down, you see that I can go back and grab my import statement.
07:03:53.450 - 07:04:18.740, Speaker A: So we're going to go ahead and do that right now. And we're going to go over to codepen. Okay. So you can see that I've just prepared an h one and a lorem paragraph of text. We set our font family to Helvetica and we have a width on the paragraph of 50 characters. Okay. So we're going to go ahead and paste this import statement.
07:04:18.740 - 07:04:36.248, Speaker A: I usually like to put it as the very first line in my CSS file. Okay. And now let's test it out here. So we're going to go ahead and start with the first one of nah blah. We're going to do it in single quotes. And boom, there we go. We have our font there.
07:04:36.248 - 07:04:56.690, Speaker A: We can go ahead and change the font size if we want. So let's say we want this to be 50 pixels. Yeah. So we can see it a little bit better there. Okay, very cool. Let's try a couple other ones here. So we can actually read our import statement here.
07:04:56.690 - 07:05:23.336, Speaker A: And we have our family of Nabla that we've just used. And we'll go to the next one of outfit. And you can see this one. We have our three different weights, 100, 407 hundred. So by default an h one is bold. So it's going to have a font weight of 700. And you see when I do that with Nabla, nothing happens because we only have our one style.
07:05:23.336 - 07:05:47.914, Speaker A: But if we go ahead and we type in outfit, you'll see that that's already 700. I can prove it by just commenting this out. And you see that that is 700. But I can go ahead and I can make it a lighter font weight if I like. So I can go 400 or I can even go 100 to make it very, very thin. Okay. So that's how our font weight will work.
07:05:47.914 - 07:06:14.272, Speaker A: And again, you can read it off the import statement. Okay. The next one we're going to go with is going to be silkscreen. So I'm going to comment this out for a second. So we have silkscreen here and we have 400, 700. And you'll see that I can change this now. So again, there is no 100.
07:06:14.272 - 07:06:32.874, Speaker A: So that's going to default to 400. That's. You see that it got a little bit thinner. So, yeah, that's the 400. And then we can go back up to 700. Have the full weight here. You can see that this width of this text is wider because we still have it at 50 pixels.
07:06:32.874 - 07:07:10.800, Speaker A: But you can see that it has broken onto two lines, unlike the previous. And next, we'll try our tilt neon and we won't worry about the font weight here. Of course, when you're experimenting with Google fonts, feel free to choose any font that you like. I am just choosing ones that I like, but feel free to choose whichever fonts that you would like. There's a lot, a lot of options. Okay. And there's one more title font we're going to try out, and that is our alumni sons pinstripe.
07:07:10.800 - 07:07:50.480, Speaker A: And this one has the option to be italic as well. So font style italic. Okay, cool. So we have seen all of our fonts here. I'm going to go ahead and leave that one as it is. And the very last thing I want to show is our monospace font and how that will look in our body text. So I'm going to change this font family here and it's going to be IBM plexen mono.
07:07:50.480 - 07:08:34.096, Speaker A: And you'll see that everything does line up. I'm going to maybe change the width to just be 500 pixels. We're going to have a straight width value and you can see that everything is lining up with each other. It's not actually necessarily lining up at the end, but if I look down, it's a lot easier to see everything being lined up and everything just has that nice spacing to it. Even our capital letter m here is actually centered on the comma that we're seeing on the line below. Okay, very cool. So that is experimenting a bit with Google fonts.
07:08:34.096 - 07:09:19.720, Speaker A: In the next one, we're going to be diving into font awesome. Okay, I'll see you in that one. Bye for now. Okay, so in this one, we're going to be diving into font awesome, which is an amazing icon library. I've been using font awesome since I first started web development when I went to make my developer portfolio website. It was the perfect way to add social media icons to my project. Okay, so let's dive in.
07:09:19.720 - 07:10:27.220, Speaker A: You might have remembered when I was creating the template that I used a CDN link to a font awesome five stylesheet. So we're actually at font awesome version six now, and they have an even better way of adding font awesome to your project, and that is using a kit. So the main benefit of the kit is it allows for subsetting. And what does that mean? So instead of loading a style sheet that has thousands of icons, when I'm only going to use maybe five or maybe ten icons, subsetting allows us to only load the icons that we're actually using within that page, so it will allow our site to load even faster. So we can do this by adding one line of code. It is going to be a script file. There are 26,000 icons in total, but there are actually 2000 free icons, including all major brands.
07:10:27.220 - 07:11:17.796, Speaker A: And if we scroll down we can see that. The other benefit is that we can have instant updates. So when there's a new version release of font awesome by using this kit, it will automatically update and include those new icons. We have our simple syntax that is easy to remember to add our icons, and it also has some accessibility features that are automated into the icons to help with screen readers and compatibility. So you can see that it is the web's default icon set. It's used on over 200 million sites. They do have a lot of different icons here and they are grouped into categories to make them a little bit easier to find.
07:11:17.796 - 07:11:47.284, Speaker A: And they also have different styles of the same icons. So you can have a solid, a regular, a light, thin or even duo tone. And you can see we have our brands icons right here. We scroll down just a little bit more. We have a nice little playground here. So you can see that we have a duotone example and you see that we have our code snippet down here. I can go ahead and change this.
07:11:47.284 - 07:12:38.750, Speaker A: We have a lot of different options here. And let's say we want our rocket here. We can also change the to be regular or light or solid or thin, but we're going to stick with Duotone. We can change the color to be red or purple, and you see our code changing down here and we can even change the size. We can also do this within our custom CSS, but it's nice that it offers the option to do that as well. We'll switch that to large and we can even animate just by adding some different style classes from font awesome as well. So you can see we can have it scale up and down, we can have it bounce, we can have it flip, we can have it shake and we can even have it spin.
07:12:38.750 - 07:13:15.442, Speaker A: Okay, very cool. So that is the brief overview of the features of font awesome. Let's dive into actually using it. Okay, so we're going to go back up to the top here and we're going to click on start for free. And what you will need to do though is you'll need to enter in your email to get started with your free kit and agree to the terms of service. I already have an account so I'm going to go ahead and sign in. Okay, so I'm signed into my faun awesome account.
07:13:15.442 - 07:14:03.170, Speaker A: I have my kit that I've already generated here. If you do not have one, you just have to click on the add new kit button up here and it will generate one and then you can rename it whatever you like. At the bottom of the page here it is pointing out that I only have one kit that I'm able to use on a free account as well. I can only have 10,000 page views per month from this kit. If I go over that limit, it will cut the icons to my website for the rest of that month unless I upgrade to a pro account. But I don't think I'm going to get more than 10,000 per month. And if you are, you can probably afford the pro license.
07:14:03.170 - 07:14:30.650, Speaker A: Okay, so we're going to dive into our kit. Just click on it here and you can see that it is very easy to use this kit. It is just one line of JavaScript that we're going to copy into our project. So for now I'm going to go ahead and copy this and I'm going to put this in my codepen project. I'm going to add it to the bottom, my HTML file here, paste it in there. Okay. And that's it.
07:14:30.650 - 07:15:00.160, Speaker A: I've added font awesome to my project. Okay. And if we look at our icons tab here, you see that in the free account we only have solid and regular and brands. So we don't have light, thin or duotone. But that's okay, that will serve our purpose. The main thing we're going to be using is our brand icons. And in our settings you can see this is where we can change our kit name.
07:15:00.160 - 07:15:49.740, Speaker A: And you see that we're using free icons, we're using web fonts, we're using auto subsetting, again, only loads the bits of the style that are necessary. It's using the latest six X version. By having six x it means that it will keep updating that version six to the minor version updates that it has, it won't necessarily upgrade to faun awesome. Seven, you probably have to use a new kit for that. And the kit is open in this case, which is fine, which means it can actually be used by anyone on any site. If I add a specific domain, which I would encourage you to do, then it will only work on that domain. Okay, so that's basically it for our settings here.
07:15:49.740 - 07:16:33.056, Speaker A: Now we're ready to take a look at the icons. So we're going to go ahead and just click icons here at the top and we can search for some icons. I'm just going to search for the Twitter icon, press enter and I'm also going to sort by free just to show the icons that we will have access to. And you can see we have our new X Twitter icon here. That is one of the primary reasons we're going to be using the newest version of font awesome is this icon has changed recently. You might have noticed it in a lot of places. I did like the original Twitter icon quite a lot, but this is the one that is now appearing everywhere.
07:16:33.056 - 07:17:17.066, Speaker A: And if I click on it, you can see that we have our code snippet to actually add our Twitter icon and we can go ahead and just copy that to our project. But I want to also point out that it does enable you to do things like rotate 90 degrees. You see that it added an extra class there. I can change the default size to be large or two times xl, put that back to default and no rotation. And we can even actually add in animations just by adding a class. So we just added the FA beat class and it is adding an animation to our icon. All right, very cool.
07:17:17.066 - 07:17:38.284, Speaker A: We're going to go ahead and just click anywhere down here to copy the code snippet. You see that it's copied. And close this for now. And we're going to go to our font awesome project and we're just going to paste it in there. Okay, cool. So we have our xenore Twitter icon there. Awesome.
07:17:38.284 - 07:18:14.078, Speaker A: So that's working perfectly. Let's go back to font awesome. And we're going to take off the Twitter filter and we're just going to filter by free. So you see that we have our 2000 icons here and I can filter by even what's new in version six, staff favorites and I also have all of these different categories. So childhood clothing and fashion coding. Let's go ahead and click on coding for fun. Okay, so these are all related to things you might add to your website here.
07:18:14.078 - 07:18:49.830, Speaker A: I can uncheck that. I can see what's new in version six. You can see that there's actually 300 new icons in version six that were not in version five. You can see that there's a lot of variety here of our icons, but it is important to note that, yeah, these icons are always being updated, which is great. Now I want to look at the documentation a bit. So there is a lot of documentation here with codepen. And specifically I want to look at styling our icons.
07:18:49.830 - 07:19:12.142, Speaker A: So I think we understand the basics. We just kind of went through that. I want to first touch on size here. So the great thing is this comes with again classes that are built into font. Awesome. That will allow us to adjust our sizing. You can see that we have our extra small, which is 0.75
07:19:12.142 - 07:19:48.928, Speaker A: em, equivalent size in pixels is twelve pixels. So because this is a vector graphic, we're actually using the font size property in our CSS. So we can actually add a custom value and just target that font size property. But it does have some classes built in that will do that for you. And then they also have literal sizing. So we have fa one x, two x, three x, four x, etcetera. And you can see that that is the equivalent to one em, two em, three em, four emerald.
07:19:48.928 - 07:20:20.240, Speaker A: So that's a great way to scale it, very obviously according to our EM property. So we're going to go ahead and try that now on our twitter icon here. So we can just add fa one x. We'll do nothing, I just realized, and we'll do two x. So you'll see that that will make it bigger. And then we do five x, even bigger. And we can go all the way up to ten x.
07:20:20.240 - 07:21:09.774, Speaker A: Okay, so you can see also that it's still just as sharp as when it was small. That is the benefit of using icons. They're vector graphics and they will scale infinitely. As I mentioned, I can also target this using CSS. So if I did fa, xdev, dash twitter, I can customize this further, just like I could customize font. So first thing I can do font size and I'll change this back to one x just to show actually I will remove it altogether. And I can change the font size here now to be 100 pixels and I can set it very specifically anything I could use for font size.
07:21:09.774 - 07:21:47.250, Speaker A: So I could also use, like they were using ten em. And you see that that changes it a bit. So let's say I want it 150 pixels and I can also now change the font color, just like I would change a regular font so I can say dodger blue and I can change the font color just like that. So I can use any color for my icon as well, which is super helpful. Okay, now moving on, we've kind of gotten the grasp of sizing our icons. Let's go back to our docs here. And let's go back to styling our icons.
07:21:47.250 - 07:22:32.550, Speaker A: And you can see that you can make icons fixed width so that they fit nicely together. You can add icons in a list, you can rotate them, you can animate them, you can stack them, and you can use duotone if you have the pro account. But we're going to go ahead and just focus on animation right here. So we have a couple examples. So I can go ahead and just copy this code snippet in here. And if we go back to our project, I'm just going to paste that in and you can see that that's going to add a lot of different icons here that are pulsing. I'm going to make this a little bit bigger so we can kind of see everything.
07:22:32.550 - 07:23:06.330, Speaker A: So let's say, I just want the simple one here. You can also see in this example that it is actually putting this three times sizing on the parent and it's affecting everyone below. And this is an example of the beat animation, which makes sense in the context of a heart. It's a heart beating. And we have other examples here. So we have our fade examples. So this will fade these icons in and out.
07:23:06.330 - 07:23:54.730, Speaker A: So you see we have it for kind of warnings here. And we also have it for a cursor, which we'll probably use later on actually for like an animated typewriter effect that you might have seen in other places. And let's see what else we have here. So I wanted to also show the shake animations here, which are kind of cool. And they're trying to give examples that are kind of context specific things you might actually use it for. So this is more like, you know, an alarm going off or a bomb going off, or the locus, if you tried to log in and it didn't work, let's maybe get rid of the bomb. We don't need that one.
07:23:54.730 - 07:24:44.350, Speaker A: And lastly, I just wanted to show this spin icon animation as well. And so the great thing about these spin ones is that they can be used for quick and easy loading spinner. I personally would use maybe these three to me are the ones that kind of look the best. I actually like the cog quite a lot for a loading spinner. Okay. And I think that that is a good overview of font awesome. We have touched on how to find our different icons, how to color them, how to change the sizing, and we've even experimented with some of the animations that are already included in font awesome.
07:24:44.350 - 07:25:25.360, Speaker A: Okay, great. In the next one, we're going to be diving into our typographics website using everything that we have learned about typography and icons in this module to create our landing page. All right, I'm excited to dive in. I'll see you in that one. Bye for now. Alrighty. So we're in the last lesson of the module and we're going to be tackling a practical project.
07:25:25.360 - 07:26:11.956, Speaker A: We're going to be making the first version of our typographics website. And you can see it here, you can see that it is very simple. For now, we have a title we're using a Google font for, and we also have our font awesome icons. And when we hover over, they're getting a little bit bigger and we have our footer here down at the bottom. But if we refresh so on our first page load, you see we have a little bit of an animation that is related to letter spacing and blur so that everything kind of comes into focus. Okay, so this is our version one. We are going to improve on this and make a version two and a version three in the next two modules.
07:26:11.956 - 07:26:59.790, Speaker A: But for now, we're going to focus on keeping it simple. I would challenge you on your own, now that you know what the final product looks like, to try to recreate this on your own. I'm going to now walk you through the steps that I took to create this exact version. But feel free to use different fonts and different icons. Okay, so let's get started. We're going to close this first and we're going to go back to our desktop here and in our code folder. We're going to go ahead and as I said, we're going to copy our template and we're going to paste it here and we're going to call this project typographics v one.
07:26:59.790 - 07:27:35.400, Speaker A: And we're going to go ahead and close this and we're going to open visual studio code. Okay. And we're going to make it the full screen here. And we're going to go ahead and open a folder and we're going to open our typographics v one. Okay. So we're going to change a couple things right off the bat here. So in our index HTML file and we'll also open our CSS file, we are not going to need anything else.
07:27:35.400 - 07:28:13.030, Speaker A: We are going to go ahead and leave our icon as it is. We're going to remove this for now. We don't need it in this project. And we're also going to reference font awesome differently using our font awesome kit. So I'm going to trim that up a little bit there and we can remove our hello world for now. And we're also going to change the title here to just be typograph. Okay, now we're going to start by adding our font awesome kit.
07:28:13.030 - 07:28:52.342, Speaker A: So we're going to go ahead and we're going to jump back to the browser and in our, once we sign in here, you can just click on your kit and it'll default to the setup page. And we're going to go ahead and copy our script here back to our code. And we're going to go ahead and we're going to paste this right there. Okay, cool. So we have our font awesome linked. Next we're going to go ahead and pick our Google font for our project. So I already have one in mind.
07:28:52.342 - 07:29:39.696, Speaker A: Close that for now. And it's called jost Yoast. I don't know exactly how to pronounce it, but this is the font that I am going to choose for this project. What I like about it is it has a lot of different styles here. So we have a lot of weights as well as italic versions of the font as well. So you might remember from last time, we actually have all of our selected values here. So I'm going to go ahead and remove all of these because I want my import statement to just use the one font that I'm going to use in this project and I'm going to go ahead and add the ones that I want.
07:29:39.696 - 07:30:15.040, Speaker A: We'll start with the extra light and extra light italic and light light italic, regular regular italic. And then we're going to go a medium, medium italic. And then lastly we're going to select the bold and bold italic. Okay. So we have all of our styles here. We can actually collapse that. And we're going to go ahead and copy our import statement here and we're going to jump back to our code.
07:30:15.040 - 07:30:38.890, Speaker A: And again, I like to add it at the top of the CSS file. So we're going to go ahead and paste it right there. Okay, cool. So we have that sorted out. We're going to go ahead and now launch our live server so we can see exactly what we're doing here. Okay, we have it launched. Nothing to see there yet.
07:30:38.890 - 07:31:17.476, Speaker A: So let's go back and add some content. So we're going to start with our HTML first and inside of our body we're going to start off by using our main element. So this is our semantic element just to show that we're in the main section of our project and I'm going to comment out a title. So command question mark for that. And I'm going to create a comment for my header. I'm going to then create a header element, header dot header. So a header element with the class of header.
07:31:17.476 - 07:32:03.152, Speaker A: And then inside of this I'm going to create an h one and I'm going to just have my typographics. You can see that it is intellisensing that there. Next I'm going to go ahead and create my social icon container. So div social media icons press enter and I'm going to go ahead and add in my icons. So I actually know these. But you can search on font awesome for whichever ones you would like to use. Keep in mind that if you are using brands, you need to use I fabrands for each of them.
07:32:03.152 - 07:32:37.172, Speaker A: And then I can actually add another class. So I can add dot to add another class and that other one is going to be Fa Facebook. And I can press enter and you can see that it created my eye element with a class of brands, FA brands and Fae Facebook. I'm going to go ahead and also give this a title. So the reason for adding the title attribute is that when I hover over it, it's going to tell me what the icon is for. Okay. And I'm going to repeat the process here.
07:32:37.172 - 07:33:25.410, Speaker A: So I'm going to do I fay brands dot and we're going to do Instagram next and enter title equals Instagram as well. And you know what, I'm actually just going to copy this and we're going to paste it three more times. We have five icons. Again, you can choose any icons that you like. And we're going to use our x dash Twitter. And this is going to be for Twitter, put in brackets x. And we're going to do YouTube, YouTube, YouTube.
07:33:25.410 - 07:33:54.326, Speaker A: And lastly we'll do GitHub, GitHub and GitHub. Okay, cool. So that's it for our social media icons and our header. The last thing we're going to do is create our footer. So I'm going to comment out another title so that I have a clear separation. It'll be easier to read our code this way. And I'm going to have a footer element again with the footer class.
07:33:54.326 - 07:34:24.126, Speaker A: So footer, dot footer, press enter to create that. And then I'm going to use small as my element here. And inside I'm going to use and sign and then copy and semicolon. You can see that it's autocompleting for me there. And you can see that it turns blue. So it's going to be for our copyright symbol and we're going to put the year and then typo graphics. It's going to auto complete.
07:34:24.126 - 07:34:46.208, Speaker A: I'll do that. Press enter and then all rights reserved. Okay, cool. So that's basically it for our HTML content here. Now let's jump over to our browser and see. Okay, so perfect. We have all of our icons there.
07:34:46.208 - 07:35:12.210, Speaker A: They're all very small. Of course, our footer looks pretty good. And you can see that we still have our default font here. We do not have our Google font yet. Okay, so let's start styling this. Okay, so we're going to start by styling our or adding in our Google font. And we're going to do that on the body here.
07:35:12.210 - 07:36:09.190, Speaker A: So we're going to target our font family and single quotes and we're going to use Jost comma sans serif. And we're going to also have overflow hidden in our case, we don't want scroll bars vertically or horizontally. And we'll jump back and we can see now we have our better Google font there and it looks even better on the footer as well. Perfect. Okay, moving on, we are going to add a position relative to our main element. And this is because we're going to use our position absolute on our header. So again, if you recall, it is important to have position relative if you're going to use position absolute for it to work as intended.
07:36:09.190 - 07:37:03.490, Speaker A: Okay, so our dot header class here, we're going to use, as I said, position absolute. Again, it's going to auto suggest that I can just press enter. I don't actually have to type it all out. And then I'm going to do a few tricks here to center it vertically and horizontally in the page. So I'm going to do left 50%, top 50%, and then I'm going to use transform translate bracket -50% and in this case I'm going to do 70% because I actually want it to be a little bit higher. The header is going to be pretty big and we also want our header width to be 100 vw for viewport width. Okay, so let's go ahead and check that out now.
07:37:03.490 - 07:37:30.150, Speaker A: Okay, so that looks not very good. We can see that our footer now is on top of the page and our header is here. So we have a little bit more work to do. So we need to actually style our h one. So we're going to do that next. So we will target our header and then h one to target an h one. That is a child of the header class.
07:37:30.150 - 07:37:54.110, Speaker A: And to start with, we're going to want our font size to be bigger. We're going to go 100 pages pixels. Okay. So that already looks more like a header. And the font weight by default is 700, which is bold. We're actually going to go down to 500, which is a little bit more than regular and a little bit less than bold. If we go back.
07:37:54.110 - 07:38:20.094, Speaker A: There we go. That looks good. And we're going to also add the font style of italic. And you see that's very close to our final version here. And next we're going to add a text. And you see it even can auto complete my properties. So I'll click on that or I can hit enter and then you see the first suggestion is center.
07:38:20.094 - 07:38:53.586, Speaker A: So I will just press enter to add that. So text align center. Okay, so we have our h one looking very similar to our final header that we have here. That's a good place to pause for a breather. I'll see you in the next part of this lesson. Bye for now. Alrighty.
07:38:53.586 - 07:39:26.984, Speaker A: Welcome back. Let's pick back up where we left off. Okay, so we have our h one looking very similar to our final header that we have here. And the next thing we're going to do is we're going to target our social media icons. So we're going to do dot social dash media dash icons. And we're going to increase the font size here. So we're going to use font size 70 pixels.
07:39:26.984 - 07:40:01.066, Speaker A: So remember, for styling purposes to think of the icons as font, they will use all of the font properties. And we're going to give it a position of relative and a top of -60 pixels. And we're also going to give it a text align of center. Okay, so let's check that out. Okay, perfect. So that's looking very good. We still have our footer all the way at the top here.
07:40:01.066 - 07:40:38.436, Speaker A: So let's maybe go ahead and fix that. And we're going to go and create another comment here for our footer. And we're going to target our dot footer class. And we're going to use position absolute here as well. And the top is going to be kind of responsive. So we're going to use something new. This is called calc, and this is a method that allows us to calculate two different values to create a position or a width.
07:40:38.436 - 07:41:14.806, Speaker A: In this case, we want our footer to be 100 vh is our top, so that means it's pushing it down from the top of the page. 100 vh, that would be at the very bottom, bottom of the page because we have no overflow. And then I'm going to do -50 pixels. So at the very bottom, but 50 pixels up from there. And we're going to do a width of 100%. And we're also going to have a text align of center. Okay, so if we go back.
07:41:14.806 - 07:41:46.010, Speaker A: Perfect. That's exactly where I wanted that to be. Okay, so from a static perspective, we are done. This looks like our final version, but you can see that when I hover over these icons, nothing is happening. They're not getting bigger, and there's no cursor pointer to show that I can click on it. But we do see that we have our titles here, which is good, but let's go back and make that a little bit more interactive. So we'll start with our social media icons.
07:41:46.010 - 07:42:28.234, Speaker A: So we're going to target again, this is going to autocomplete for me. I'll press enter and we want to target each individual I element, which is our icon. And we want to add first a cursor pointer so I can just press enter and it actually filled in the property and the value. And if we go back now, you see, now we have our cursor making it look like they can be clicked on, but they're still not growing to be a little bit more interactive. So we can go ahead and target the same thing. So social media icons I. And then this time we want to add a pseudo class of hover.
07:42:28.234 - 07:43:04.668, Speaker A: So colon and then hover. And then we want to just add a transform scale, 1.1. So that means it's going to get 10% bigger when we are hovering over. So now we can see, okay, that looks pretty good. But you see that it also just kind of jumps in between. We want that to be more of a smooth getting bigger and getting smaller. So to accomplish that, we're going to add a transition and our transform.
07:43:04.668 - 07:43:33.710, Speaker A: So we're targeting this transform property here specifically. And we want it to take 0.5 seconds. And we want it to ease. So ease allows it to transition in a more balanced way. So you can see that as we hover over and hover off, it doesn't just pop, it smoothly goes back to size. Okay, perfect.
07:43:33.710 - 07:44:08.070, Speaker A: So we have that all done. The last thing we're going to add is our animation. So we will have a full module on animation. But I wanted to show a little bit of how an animation can work using our letter spacing property. Okay, so let's dive back to the code and we're going to go ahead and we're going to create our animation right here. So to create our animation, we're going to start by creating keyframes. So this will dictate the start of our animation and the end of our animation.
07:44:08.070 - 07:44:51.898, Speaker A: And it will animated from one set of properties to the other. So I'm going to use the sign and then keyframes and then I'm going to write the name of my animation. So focus in contract and then I'm going to set the values here. So we're going to start with 0%. So meaning from the very start of our animation, we want our letter dash spacing to be one em. So in this case that's basically meaning 100% of the parent. In this case it's equivalent to 100 pixels.
07:44:51.898 - 07:45:52.222, Speaker A: But the reason we're using one em is that later on when we make this site responsive, the font size is not always going to be 100, but this will always be 100% of whatever the font size is. Okay, and next we're going to add a filter and we're going to use the blur method and we're going to blur it by twelve pixels. And lastly, we're going to add opacity and we're going to give that a value of zero, meaning that it is not visible. And then we're going to do the 100% values. So basically we're creating the start properties and the end properties. And over the course of the animation it's going to blend from these one set of properties to the next set of properties. So in this case, we're going to go back to our default letter spacing, which is going to be zero.
07:45:52.222 - 07:46:52.112, Speaker A: So we're going from 100 pixels essentially to zero for our letter spacing and for our filter blur. Again, we're going to reset to zero to our initial value and we're going to do the same thing with opacity and we're going to set that to one which is equivalent to 100%. So we're basically resetting everything and we're starting off at these spaced, blurred and see through letters. Okay, so let's go ahead and we're going to add this animation now to our h one here and we'll start by using our animation name and that is focus dash in contract. So I'm writing this out the long way and I'll also show you the short way to write this animation duration. I just wanted to show you exactly what's happening. So our duration is going to be 3 seconds.
07:46:52.112 - 07:47:37.830, Speaker A: So I do three s and then lastly we're going to have our animation dash timing function and press enter there. And this is going to be linear, meaning that the animation is going to move smoothly and evenly. It's not going to go fast at the beginning and then slow at the end or it's going to just be uniform in its animation. Okay, so let's go ahead and check that out. Okay, very cool. So we basically have recreated our animation. It wasn't crazy complicated and we want to go ahead now though, and add that as well to our social media icons.
07:47:37.830 - 07:48:21.010, Speaker A: So what we're going to do now is we're going to actually write out the shorthand for this and we're going to go down to our social media icons. I selector and we're going to add it in at the top. And so the shorthand for this, I can actually just write animation and then I can type in the animation name first and then the duration, which is 3 seconds and then linear, which is the timing. So this here is equivalent to this. So it is obviously a lot more concise. You will probably want to learn how to use this animation shorthand. And again, we'll talk about this more.
07:48:21.010 - 07:48:44.830, Speaker A: We will have a whole module on animation. Okay. But for now, let's check it out. Okay, so those are animating now. And if we refresh we can see that they're both now animating together. And there you have it. That is the complete version, one of our typographics website.
07:48:44.830 - 07:49:18.476, Speaker A: Alright, so that's it for this module. In the next module, we'll be diving in to colors. Can't wait for that one. I'll see you then. Bye for now. Congrats on finishing the crash course. I know this was a bit of a long one, but you stayed dedicated and pushed through, which is great because there's still lots to learn.
07:49:18.476 - 07:50:01.180, Speaker A: There are over 30 hours of additional lectures to finish in Jacinto's complete CSS bootcamp course. So come join zero to mastery and take your next step in mastering CSS and getting hired. Oh, and the best part, by joining zero to mastery, you get access to our private discord community where you can get help from experts like Jacinto and other ZTM instructors watch the video on your screen to get a glimpse of our vibrant discord community. One more thing, I promise if you enjoyed this crash course, the least you could do is show Jacinto some love by dropping it a like and leaving a comment with your thoughts, questions or feedback down below. Alright, thats it from me. I look forward to seeing you inside the zero to mastery academy.
