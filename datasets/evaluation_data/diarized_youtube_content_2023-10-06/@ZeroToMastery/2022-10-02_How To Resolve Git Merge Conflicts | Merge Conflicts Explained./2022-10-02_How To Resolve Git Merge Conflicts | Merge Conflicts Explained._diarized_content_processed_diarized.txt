00:00:00.320 - 00:00:37.338, Speaker A: What is going on, people? It is Aldo from zero to mastery. And today we are talking all about merge conflicts. What is a merge conflict and how can we fix it? Well, first things first, what is a merge conflict? So a merge conflict, all it is is an error that occurs when trying to integrate two different branches that have conflicting code. Now I know that sounds a little bit complicated, so let's get into the code and I'll show you exactly what I'm talking about. Alright, so let's get into it. The first thing you want to do is open up your preferred code editor. For me it's visual studio code.
00:00:37.338 - 00:01:11.452, Speaker A: And I'm going to open up a folder just to do this tutorial. And so I'll go ahead and do that. That was not the right step. Give me 1 second and we'll call this merge tutorial and we'll open this one. Okay, beautiful. So the next thing is we're going to add a file. So I'm going to add a notes dot TXT, which is just a text file.
00:01:11.452 - 00:01:39.436, Speaker A: I'm just doing it this way because I want to make it as simple and as clear as possible. You guys can follow along if you'd like. You don't necessarily have to, but it might help. Now, once you have your file created, this file is going to hold groceries. We're going to make a groceries list to do this example. And I'll put bread, rice, chicken, fruits. Okay.
00:01:39.436 - 00:02:26.730, Speaker A: And then we're going to open up the terminal and we're going to initialize, get and then we're going to add and commit. Okay, now once that is all set, so once we have added and committed, I'm going to create two different branches to create this merge conflict. So I'm going to use Andre as an example and then I'll use myself. So what I'll do from here is I am going to do a git branch and add Andre. And then I will add git branch and then add myself, Aldo. So our two branches, Aldo and Andre. And then we have our main.
00:02:26.730 - 00:03:07.044, Speaker A: If you want to check that out, you can go to little source control over here, branches. And you see Aldo, Andre and Main. So we have those there created. Now, first thing is let's check out to Andre's branch. Okay, so now that we're on here, let's say that Andre is not a big fan of fruits. So he'll take that off and he will put steak. Now this is obviously a pretty simple example, but just imagine like this was a feature that he just added on the same file that we're working on, and you'll see why this is going to cause a conflict.
00:03:07.044 - 00:03:42.320, Speaker A: But in this case, he added steak, right in our little groceries example, and then he's going to get, add and commit these changes. Okay, perfect. And then I'm going to check out to mine. So obviously online we still have fruits, right? Let's say I also don't want fruits. I'm working on another feature and I update this line. And I don't want fruits. I want cereal.
00:03:42.320 - 00:04:19.702, Speaker A: Cereal is always good. So we will go ahead and add and commit that as well. Let me bring this up a little bit. Okay, so now we have, now we have both files, or both branches have worked on the same file. And this is where it's going to become a problem when we're trying to merge into a branch. So let's say that Andre finished this feature and now he wants to merge into mine. So we're only working on one branch.
00:04:19.702 - 00:04:49.968, Speaker A: So if he were to do that, it would be git merge and then Andre, and it's Andre because we're merging Andre's branch into mine. We're checked out to my branch, which is what you need. So you need to be checked out onto the branch that you want to merge into. In this case, Andre is merging his branch into mine. So we'll do that. And as you see, we have a conflict. We have a problem because we have worked on the same lines of code, and that's, this is where the conflicts happen.
00:04:49.968 - 00:05:34.712, Speaker A: When you have the same file and you're working on the same lines of code, I there's going to be issues if they're not addressed. So in this case, you see this, you have accept current change, accept incoming change, accept both changes and compare changes. But let's say that you get nervous or you want to talk to someone else about what should be, what code should be taken in and what code should not. So what we'll do here is a git merge, double dash, abort. And what this does is it just absolutely just escapes the whole, the whole attempt to emerge the branches. So think about it like, that is your escape clause. That is the way to just absolutely, like, abandon the thing.
00:05:34.712 - 00:05:57.082, Speaker A: And I want to wait or I want to think about it. So that is the safety blanket. Git merge, double dash abort. Now let's go back into the merge. And of course, we're still going to have that conflict because it hasn't been addressed. So the first thing here is accept current change. The current change is mine.
00:05:57.082 - 00:06:16.396, Speaker A: So I have serial on that line of code that would accept serial. So if I had a feature, it would accept my work, because that is the current change. We're on my branch. Incoming change is Andre's work. So we're going to accept Andre's work and overwrite my work. That's the next one. Accept incoming change.
00:06:16.396 - 00:06:51.910, Speaker A: I'll show you. So let's accept mine first, and you'll see that serial gets kept. If we want to go back, we go to edit undo. And if we were to accept incoming change, it would stake would be the one that would be kept, and my, I guess my code would be abandoned. And if we undo that, so we're in the same place. Now, if we accept both changes, that means that my code gets kept and Andre's code gets brought in as well. It just gets stacked on, but all the, all the code would be kept.
00:06:51.910 - 00:07:28.378, Speaker A: So if we accept both, you'll see serial and you'll see steak. And if we undo and compare changes, you can see what the problem is. So on line six, we both worked on line six, but Git doesn't know which one to take because Git's thinking, okay, so they're both working on the same file, and they both worked on the same line of code. Which one is the correct one? I don't know. I'm just a computer, you know, I'm just trying to figure it out. So that's why we have to address these situations for git. Now, again, this is all dependent on you and what needs to be kept and what doesn't.
00:07:28.378 - 00:08:07.832, Speaker A: Like I stated before, it's really one of those things where I. It goes situation to situation, and it gets a little bit more complicated when you have a lot of different lines of code that need to be fixed or the conflicts need to be taken care of. So the best thing to do is, first understand your options. Again, accept current change is the change that we have on the file that we're trying to merge into. Accept incoming change is the file that we're merging, and then accept both changes, keeps all the changes, and then compare changes. You could just compare and see where the problems are at, but those are really, that's all it really boils down to. It's not too complicated.
00:08:07.832 - 00:08:32.866, Speaker A: I know it seems a little scary at first, but once you get used to it, it's pretty standard, and it shouldn't give you a problem from there. So let's say that for this example, I wanted to go ahead and accept Andre's changes. Let's say steak was definitely gonna beat cereal. I mean, we all knew this. This was in, this wasn't a hard decision. So we will accept Andre's changes. We'll do accept incoming changes again because we're merging into my branch.
00:08:32.866 - 00:09:09.982, Speaker A: So those are the incoming changes. We'll go, we'll go ahead and accept that once those are accepted, you see stake. Let's say we like that. That's the feature that we wanted to keep. Then we are going to go down here into our console, bring it up a little bit more, and I will get additive git commit. And it's all set. Now, Andre's branch has merged into my branch and we have Andre's changes because we accepted Andre's incoming changes.
00:09:09.982 - 00:09:57.542, Speaker A: If we go back to our source control or not the source control. If you go back to your commit details, if I can bring this up, I guess not. You can see the steps that went into this because of our commit history, but there's a couple different areas you can also do this just to doing a git log. If I go to my console and you can see it there just to, I guess, have a visual representation of what you just did, just git log it and it'll show all your commit history there. But that's really all to it. I hope this did clear some concerns up for you and that's all to it. I hope this video was helpful and straight to the point.
00:09:57.542 - 00:10:10.070, Speaker A: Let me know in the comment section below if this cleared up some of your concerns. But like always, if you enjoyed the video, smash that like button and drop a comment down below letting me know what you want to see next. That's all for today, and until next time.
