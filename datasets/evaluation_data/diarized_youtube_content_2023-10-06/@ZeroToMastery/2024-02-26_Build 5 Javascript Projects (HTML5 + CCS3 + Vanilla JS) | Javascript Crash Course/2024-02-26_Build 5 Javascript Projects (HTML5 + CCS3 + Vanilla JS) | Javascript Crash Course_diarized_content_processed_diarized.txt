00:00:04.360 - 00:01:03.248, Speaker A: Welcome to the best resource online for you to build your dream JavaScript portfolio. Whether you're looking to freelance, get hired, or just advance your career, this brand new crafts course will take you step by step through five JavaScript projects that you will be able to customize and put on your portfolio right away. Now we all know it's pretty easy to find JavaScript projects to work on online. There is literally a plethora of YouTube videos where you can just copy and paste paste the code, but wheres the fun in that? This course is different in that not only do we have modern projects using the latest features of JavaScript and browser APIs, but we also do a code review of each project. After each build, Andre will go through the code and explain how we can improve it. This is your chance to have a senior developer working alongside you and finally show you what good code means, common mistakes, and how to write maintainable code. All you need is some basic HTML and CSs to get started.
00:01:03.248 - 00:01:33.704, Speaker A: Now you probably just want me to shut up and tell you what we're building today. Fair? In a minute, Andre will give you an exact rundown of the projects that you will be tackling today. Just stick with me for a bit longer. I promise it'll be quick. This course is taught by not one, but two instructors, ZTM founder and lead instructor Andre Niigoy and senior developer Jacinto Wong. These two have a combined 20 plus years of experience experience with JavaScript. Yup, you heard that right, 20 years.
00:01:33.704 - 00:01:51.540, Speaker A: One more thing, if youre finding this crash course helpful and are truly enjoying it, make sure to smash that like button and drop a comment with your thoughts, feedback or questions down below. Alright, thats enough chit chat from me. Let me hand it over to Andre so you can see exactly what youre going to be building. Enjoy.
00:02:07.020 - 00:02:31.710, Speaker B: Hello. All right, all right. I'm very excited to start the course. I hope you are too. But before we do, as always, we need to see where we're starting and where we are ending so we have a clear path to success. So let's see what this course looks like for you. Now, although you can do these projects in any order, pick the ones that you like.
00:02:31.710 - 00:03:14.730, Speaker B: With that said, we have ordered the projects and the code review in a way that makes sense in terms of learning, so we recommend following the order we have set the course in and we will also provide all the code for the projects right off the bat so you can follow along. Or if you don't like coding along, you can use that code and customize the projects on your own. And because we have 20 projects, I'm not going to go through them in depth just in this video because, well, you're going to get bored of me talking. So this is going to be a quick, quick overview of what we're building just to get an idea. And then we're going to jump straight in. Ready? Let's have a look. First we're going to start with the developer setup.
00:03:14.730 - 00:03:53.100, Speaker B: We're just going to set up our computers in our environment to make sure that we can follow the rest of the course. It's going to be very, very quick. We're going to set up things like versus code so that you have a professional setup. Then we get into the fun part. The first project we're going to build is a quote generator. And I mean, who doesn't love a good inspirational quote? We also add some nice functionality here, but also the ability to tweet out a quote, which is a really nice feature, I think. Next we learn about a feature that's very common in modern website that is this ability to infinitely scroll through pictures.
00:03:53.100 - 00:04:30.322, Speaker B: How do we keep loading pictures that is performant and well, has nice user experience. A very useful technique that you're going to use throughout your career. Between the code generator and the infinite scroll, we're going to learn about fetch, about async, await cores issues and how to avoid them. About events, scroll events and listeners. We then jump into picture in picture. This is going to be a fun one. We're going to learn about the screen capture API and we're going to show you how you can have perhaps a coding video or a YouTube video running on the screen while you're browsing the Internet.
00:04:30.322 - 00:04:45.428, Speaker B: This is going to be a fun tool that you can use your workplace to pretend like you're working, but instead watch movies. Okay, I'm kidding. Don't do that. Next we're going to tell some jokes. Well, not us, but we're going to build a little robot that will till.
00:04:45.444 - 00:04:51.012, Speaker A: The changing random stuff until your program works is hacking and a bad coding practice. But if you do it fast enough, it's machine learning and pays for x your current salary.
00:04:51.116 - 00:05:30.720, Speaker B: Okay, we're going to build a joke teller app. Now, I can't guarantee that the joke teller is going to be funny, but it's going to be a fun one. And we're going to learn about using text to speech and of course using async await and the Joke API. Next we're going to do something really, really fun and learn about a feature that we see a lot in modern websites, that is dark and light mode. And we're going to dynamically store this information in local storage so that every time we refresh a page, a user's preference is remembered. All right, enough talk, let's get started and let's start building some projects. I'll see you inside.
00:05:30.720 - 00:06:31.840, Speaker B: Let's talk about JavaScript. Why does it exist? You see, JavaScript came onto the scene in 1995 specifically to make websites more interactive. Up until that point we had HTML and CSS, and that allowed us to have text and styling on a webpage, for example. This was the very first website created. This is it. And if we open up the developer tools and we have a look here, we'll see that we have our HTML, which is right over here. And then although this website doesn't have any styling, we can add styling if we wanted to.
00:06:31.840 - 00:07:10.270, Speaker B: Let's say we wanted in header one to have a background of blue. Now we added some styling, but this website is static. That is, it doesn't really change. What we see is what we get. But now with JavaScript we have the ability to make things interactive. We have the ability to change our websites based on user actions. And websites like these, by the early two thousands turned into web apps because they started doing more and more things than just displaying information.
00:07:10.270 - 00:08:28.560, Speaker B: But throughout the years, the role of JavaScript has not really changed. All JavaScript is doing is saying, hey, based on what the user does on the website, do something on the screen, do something based on inputs. What do, I mean, think of it this way, all we're doing with JavaScript is to add logic to our websites, right? If this happens, then do this. And in this course we're going to learn the if this happens, then do this paradigm and you'll find out at the end of the day the equation or the function that we use is always this. When the user does something, let's say loads a website, clicks a button, hits refresh. When a user does that, with the JavaScript that we write and the input that we get, that is the user action, returns some sort of an output, and that output is usually something displayed on the screen. We take the user, we write some JavaScript that waits for these user actions and then returns our desired state or desired website.
00:08:28.560 - 00:09:45.392, Speaker B: If this happens, then do this. And this course is all about that. What is this JavaScript file that we can use, that we can code, that we can write to build some really fun projects and we're going to use the power of JavaScript with the window object. What do I mean? If we go back to our browser and we go to the console we can type in the window object and this window object is a swiss army knife or a tool that all the browsers provide for us that gives us a lot of powers to do things, to use JavaScript, to do these interactions. And throughout the course we're going to be using this window object. Things like settimeout, things like the DOM or the document object model, which is what we see over here to modify this dom, this HTML to make it interactive. Now why is this interesting? Why do we care? Well, because at the beginning we had these static sites and now with JavaScript we can have dynamic sites, pages that dynamically respond to user input and actions.
00:09:45.392 - 00:10:14.450, Speaker B: And don't worry, at the end of it all, once we finish all our projects in this course we have a special section where you learn what the advantages of frameworks like angular libraries like React and Vue, what the advantages are and when you should use them. So make sure you hang around for that one because when you get to that part and you finished all projects, you'll finally understand what those popular libraries actually do. So let's dive in.
00:10:29.510 - 00:11:26.130, Speaker A: So if you've never done any web development before, I'm going to walk you through everything you need to code along with the projects in the course. And I'm also going to show you how to be able to host your projects online for free so they can be shared with anyone. For this first video I'm going to show you how to install git and visual studio code on your Mac. There will be another video that will go over these installations on Windows as well. So git is necessary to push our local code into our GitHub repository, which in turn allows us to host our projects online. Visual studio code is the program we're going to use to actually work on our code itself. Alright, so first on a Mac there is an extra step we're going to take and that is installing homebrew.
00:11:26.130 - 00:12:00.670, Speaker A: So homebrew is self proclaimed as the missing package manager for Mac OS and for Linux. And you can see it has instructions to install. We're going to paste a line into our macOS terminal, but first we're just going to take a brief look at what does homebrew do. So it installs the stuff that you need that Apple or Linux didn't install for you. And this is usually things that are related to web development. Obviously that's what our case is. So we are going to follow their instructions.
00:12:00.670 - 00:12:31.080, Speaker A: Copy this. And we're going to open up our terminal. We're going to use command Spacebar and we're just going to type in terminal and that'll open up our terminal. We'll make it full screen. And I'm going to use command to zoom in so we can see it. And I'm going to paste that in there, press enter and it's going to ask for my password and put in my password here, press enter. So now it's telling you this is what it's going to do.
00:12:31.080 - 00:13:10.838, Speaker A: It's going to install these things. I'm going to press enter to allow it to do that. And it's going to ask me for my password again and again and again. Okay, so now it's going to install. It asked me for my password multiple times just because I was having some issues with my sudo commands here. But for you, it should just actually run what it's running now. Okay, so we have successfully installed homebrew.
00:13:10.838 - 00:13:46.390, Speaker A: Awesome. So we can actually close this terminal for now. Now if we go back to our browser, we can see that to install git, we have just one simple command in homebrew that we're going to run. So we're going to actually create another terminal. So I did not need to close that other one, but I did. So let's open a fresh one, start over. And we're going to just run the command brew install git, press enter and you can see it's downloading.
00:13:46.390 - 00:14:15.976, Speaker A: Okay, that's done being installed. Let's just confirm that it is installed. We're going to type git version and we see that we have a version number there. Perfect. It's installed. All right, so next we can actually now close our terminal. We're done with it and we're going to go back to our browser and we're going to download visual studio code.
00:14:15.976 - 00:14:44.498, Speaker A: We can see that there's a Windows version here, but we're on Mac right now. So we're going to download the Mac version. Okay. Once that's finished downloading, we're going to click on the file and we can see we have the file here. If we click on it, we can see that our application is downloaded from the Internet. Are we sure we want to open it? So you can see that this is actually already pre bundled. We don't even need to install anything.
00:14:44.498 - 00:15:26.208, Speaker A: And you can see that this opened my previous project, my quote generator. So yeah, that's all working perfect. So that's it for the setup that is specific to Mac. In the next videos I'm going to go over the rest of the setup that you'll need that will apply to both Windows and Mac, starting with setting up our GitHub account. Alright, I'll see you in the next one. Bye for now. Alrighty.
00:15:26.208 - 00:16:32.958, Speaker A: So as I mentioned in the previous video, I was going through the installation of Git and visual studio code on a Mac. In this video I'm going to go over the installations of those two things on Windows. So the intention of this video is to walk you through the process on Windows if you've never done any web development before. So we're going to start from the very beginning. So git is something necessary to install because it allows us to use GitHub to push our local code to a repository online that can then be shared so you can share your actual code with people and they can look it over and they can suggest changes and it also allows us to host projects online for free. Visual studio code is the program we're going to use to create the code for each of our projects. So the first thing we're going to do is we're going to install git for Windows.
00:16:32.958 - 00:17:10.540, Speaker A: So we're going to go to git for windows.org. you can see it's popping up here already, going to press enter and all we're going to do here is click on the download button. Okay, once that has finished downloading we're going to click on it here to launch the setup. We're going to click yes, we want to install it and we're going to go through the setup here. So we're going to click next. And next you can install it wherever you want. And yeah, we're going to install in that folder anyway.
00:17:10.540 - 00:17:42.650, Speaker A: So we do want to make sure that we have checked our Windows Explorer integration. Our git bash is very important. It allows us to create a git related terminal by right clicking anywhere in a folder. And that's important if you ever want to create a new angular project in a folder, for example. So we're going to leave that as it is. Make sure these boxes are checked here and we'll click next. Next.
00:17:42.650 - 00:18:27.650, Speaker A: And so now it's asking you to choose the default editor and for this you can actually go down the dropdown and select visual studio code as the default editor and you can actually click on this link and it will launch to the site to actually download visual studio code. And we're just going to click this download button here. Okay. And once that's finished downloading we're actually going to run this setup before we finish our git setup. So we're going to accept the terms click next. You can choose whichever folder you want, but that's fine for me. I'm going to click next next again.
00:18:27.650 - 00:19:05.280, Speaker A: And the other thing I'm going to add is I'm going to add these two things here. So I want to add open with code action to the Windows Explore file context menu and I also want to add the open with code action to the directory context menu. And you know what, I'll also register it as the default text editor for supported types. And I'll also create a desktop icon. You don't have to do that. And I'm going to click next and install. Okay, so this is done installing, but I'm not going to launch it right yet.
00:19:05.280 - 00:19:56.182, Speaker A: I'm going to just click finish and I'm going to close the browser to jump back to our git setup. So you can see here that the next button is grayed out because it's saying you should use this editor, but we don't have it currently. If we go back and then we go forward, you can see that now we can go next because we have visual studio code installed. And for the rest of these settings I'm just going to use whatever the recommended settings are. So I'm just going to click next next next and I'm not going to install the experimental support and just click next there. Okay, so that's it. I'm not going to worry about viewing the release notes.
00:19:56.182 - 00:20:40.520, Speaker A: So I'm just going to uncheck that click next and we're finished installing it. So you're going to notice that almost all the course is recorded on Mac. But I actually spent most of my life using Windows, so there's a few advantages to using Windows when it comes to visual studio code and git. And again, they're related to the Windows Explorer context menu. So I'm in my J's course folder and we'll talk about our templates in the next couple videos. But I just wanted to right click to show you the things that we added to our Windows Explorer. So if I click on git bash here, this allows me to create a terminal in the folder that I'm currently in.
00:20:40.520 - 00:21:21.300, Speaker A: So instead of having a cd into the location, you can just open the folder in windows. Right click open git bash to automatically have a terminal within that folder. So that's very handy. And the other thing is that I find super handy on Windows that I don't have on Mac is that I'm able to right click on any folder and use the open with code option. And this automatically opens visual studio code directly into this folder. So you can see I'm in my template folder here. So I find that very very useful.
00:21:21.300 - 00:22:16.520, Speaker A: So if you are using Windows for the code, feel free to take advantage of using that, even though in the videos I'm creating I'm not able to do it that way because I'm working on a Mac. Okay, so that's about it for the Windows version of our setup for git and visual studio code. You can follow along from video three onwards in this section. The rest of the things I will show on Mac, but the rest of everything will apply to both Mac and Windows users and that goes for almost everything else. Well, everything else within the course will apply for both Windows and Mac users. Feel free to reach out. If you have any questions or have any issues with your setup on Windows, or if it operates a little bit differently than it does in my videos, please let me know.
00:22:16.520 - 00:23:12.794, Speaker A: All right, that's it for this one. I'll see you in the next video. Bye for now. Alrighty, so now we are ready to dive into the basics of visual studio code. First thing I'm going to do is I'm actually going to delete this test folder from our GitHub video and I'm going to create a new folder, dash, dash, space and then template. So we're going to create a template project that we're going to copy and paste to create our further projects. And this is going to allow us to have some of the setup done so that we can just jump right into coding the project.
00:23:12.794 - 00:23:48.584, Speaker A: Okay, so I'm going to open up this folder within visual studio code. Okay, so we can see we have our folder here and it has nothing inside of it. Before we actually get to the project itself, I want to start by talking about extensions. For that we're going to click on the icon with the squares here and you can see that we have some extensions. So this will allow you to customize the way that visual studio code runs. So there are two extensions I'm going to show you that I think are very useful. The first one is called color highlight.
00:23:48.584 - 00:24:20.040, Speaker A: So I'm just going to search for it and you can see the first one here, color highlight. And what this allows is anytime you have a hex code for a color or an RGB value for a color, it will actually show that color within the code. So you can actually see what it is at a glance. So we're going to click install. Okay, it's done already. You can see it's installed globally. Next we're going to install our second and even more important extension, and that is live server.
00:24:20.040 - 00:24:59.214, Speaker A: So you can see we want the first one here, live server five 6.1 and we're going to install this. If we scroll down we can see a little bit more about it, but more or less what happens is it allows when you update your code you can see that we have the project open here on the right side. It will automatically refresh and save your changes and reflect them in the project itself. We'll test this out in just a minute. So before we get to that we want to go back and actually create the files within our project. So first we're going to use this icon here to create a new file.
00:24:59.214 - 00:25:49.056, Speaker A: We'll start with our index HTML, press enter and then we're going to make a style CSS file, press enter and then lastly we're going to make a script JS file and press enter. So you can see that it opened the three files that we just created and they're all currently blank. We can also minimize our explorer here by pressing this button. Now I'm going to show you some intelligent autocomplete functions within visual studio code. So first if you're starting from a blank HTML file we are going to include first a doctype. So you see I pressed just an arrow here and the first option is doctype. I'm going to press enter and by default it's HTML.
00:25:49.056 - 00:26:35.722, Speaker A: Perfect. Next thing I'm going to type out doc and you can see that it has an Emmet abbreviation. And if I press enter it will populate with the things that are needed in a standard HTML document. So it creates our head, it creates our body and it creates our HTML element itself. Very cool. The next thing we're going to want to do is we're going to want to connect our HTML file to our style and our script files. So first for our style files we're going to use a link element in our head and we're going to press tab and you can see by default it's looking for a style sheet and the href is the location.
00:26:35.722 - 00:27:28.080, Speaker A: And so for us I'm going to type s and you can see it's trying to help autocomplete. I'm just going to use the down arrow to select style Css and I'm going to press enter. So now our style file is linked to our HTML file and then for our script I'm actually going to do this at the bottom of the body and I'm going to comment out a title. So you would do this with control question mark on Windows or command question mark on a MACD and you can see that it creates a green comment. So this is code that will not actually be executed. This is what is used to provide notes on codes or titles just to explain what things are. So in our case we're just going to write script and then below this we're going to have a script element again, we can press enter and it'll auto complete that for us.
00:27:28.080 - 00:28:21.490, Speaker A: And specifically we're going to add in the SRC attribute, press enter and we want to point this to our script js file. Okay, so now we've linked our css and our script to our HTML. What we're actually going to do next is we're going to close visual studio code and reopen it now that we have an index HTML file so that we can actually trigger our live server extension. So I'm going to do that and go back and open a new window. Okay, I'm going to click on open folder and I'm going to open my template folder again. And we can see now at the bottom right we have this option called go live. I'm going to click on this to launch our project.
00:28:21.490 - 00:29:00.730, Speaker A: Okay, so we can see that we have our project launched and we have our title here of documents. So if we jump back to the code and we change this, we are going to change it to say template now. And if we save it, jump back, we can see that it's updated to now say template. Okay, very cool. The next thing we're going to be looking at is we want to add a few things within the head of our HTML file in order to import them. So first we're going to start with font awesome. So font awesome is a site where you can have many different icons that you can use in your project for free.
00:29:00.730 - 00:29:35.348, Speaker A: And this is something we're going to use in a bunch of our projects. So it's a good idea to add this in the template so we don't have to configure this every time. So we're actually going to use a content delivery network for this just to simplify the process a little bit. And I will provide a link for this within the course. Just zoom in here so you can see that a little better. And basically we just want to copy the CSS. The first one here we want the css all min js so we can click the copy button there and jump back to our code.
00:29:35.348 - 00:30:23.190, Speaker A: And what we're going to do is above this style CSS or we're going to create a link element and press enter and then we're going to paste this in for our href. Another trick in visual studio code is word ref. So you can see that this is kind of a long line and we can't really see it all and see the rest of our code. So I'm going to use Alt Z and that will word wrap to allow us to force all the code to be visible. You can see that there's a gap between seven and eight because technically this is one line, but to us it's showing up as two lines so that we can read it all. Okay, so now we have font awesome added. Let's just jump back to the browser and let's just pick an icon at random.
00:30:23.190 - 00:31:10.770, Speaker A: Let's pick this first one here and again I'll provide a link to this within the course. How this works is you're just going to copy the HTML from whichever icon you want and then back in our code I'm just going to paste this in the body and I'm going to save that and I'm going to jump back to our template and you can see we have an icon. It's very, very small because we have installed it, but that proves that the connection is working. Awesome. Next, I want to take care of this favicon. So in my opinion, websites look a lot more professional if they have a custom favicon rather than the default globe that we have here. So to take care of that, I'm going to link to this article about favicons.
00:31:10.770 - 00:32:05.140, Speaker A: And within this article it discusses a trick that can be used to use Google's Favicon service. So this will allow you to pull a favicon from a website that already exists instead of having to add that file in every single time in every project. So we're just going to copy this URL here, copy this link address, and we're going to jump back to our code and above our font awesome. We are going to create another link element, but this time instead of a style sheet, we're going to delete that. And this is an icon and we're also going to give it a type attribute. To be more specific, it is an image png. And then we're going to paste this link in here.
00:32:05.140 - 00:32:40.852, Speaker A: We don't want the CSS tricks domain specifically, but I'm just going to pass in the favicon from my own personal website. You can type in your personal website here in your project, but that's what I'm going to type and I'm going to save that and we can jump back. And you see it's now changed from a globe to a J. Perfect. Let's jump back and we can get rid of our fun, awesome icon here. Next, we have a few things that we want to add in our style CSS. So let's jump over there.
00:32:40.852 - 00:33:26.636, Speaker A: The first thing we're going to add is on our HTML, which is our parent element. We want to add a box sizing of border box. So what this means is anytime that you add padding to any element, what can happen is that padding will stretch the page. So let's say that you had a page that was 100% of the viewport's width. And if you added padding to something, it would make that more than 100% and it would force a horizontal scroll bar. So what this does is it prevents that from happening because it prevents padding from adding extra width or extra height to the page. So that's something that we'll use in every project.
00:33:26.636 - 00:34:10.998, Speaker A: So it's something that we're going to include in the template. Next, for the body, we are going to add a margin of zero. So this will be zero on all four sides, top right, bottom left. And we're also going to add a min height of 100 VH. So VH stands for Viewport height and that is the full height of the entire window that you're in. So that means that we want it to always stretch our background, at least the full height of the screen, even if the content isn't enough to take up the full height of the screen. You know what, let's give it a background color just to be sure we can see what's going on.
00:34:10.998 - 00:34:42.011, Speaker A: So I'm going to give it a background color of, I don't know, Dodger blue. Okay, so let's save that and jump over. Okay, so we can see that we have a background that is taking up literally the entire screen. Excellent. So we can go back and get rid of that for now because the template should be as plain as possible. So that's all we need to really add to our template. So you can make sure that you save that as it is.
00:34:42.011 - 00:35:11.280, Speaker A: And if not, I will provide a version of the template within the course if you didn't want to actually make it manually yourself. But this is what we're going to use throughout the course. A few times to actually create our projects. In the next video we're going to explore actually hosting on GitHub pages. And also I will explain a little bit more about the dev tools, which I'll reference many times throughout the course. All right, I'll see you in the next one. Bye for now.
00:35:11.280 - 00:36:23.110, Speaker A: Now that we're done with our CSS, we're going to move on to test our JavaScript. So if we go back to our code, we are going to go into our script js file and we're going to use something called console logging. So I'm not going to get too deep into an explanation on this, but basically our browser window is represented by something called our window, and within our window we have something called a console. And this allows us to log certain data that we can then see from our JavaScript in our browser. So this is helpful. If we are calling an API and we want to just see how the data is formatted, we can console log that data and pass it into our browser. So we actually don't need to type out window console because by default all JavaScript is in the window element.
00:36:23.110 - 00:37:09.446, Speaker A: So we're going to write out console log and then brackets and then in single quotes we can pass in a string, or if you're passing in a variable you would pass it in without the quotes. But in our case we just want to write testing and then we'll throw in a semicolon at the end so we can save that and jump back to our browser. And so where this is going to show up is in our dev tools. So our devtools is something I'm going to reference many times throughout the course. To get to our devtools we can right click and inspect and you can see that our dev tools has opened up here. By default it will open on elements. So you can see that we have our HTML here and we actually have our css here as well.
00:37:09.446 - 00:37:54.314, Speaker A: We have our margin zero and our min height of 100. The cool thing is this actually allows us to turn our styling on and off and test out different things. So if I wanted to test out a background color on our body, I can just type in whatever I want and it will update in real time. And if I wanted to just get rid of something, I can just uncheck it to get rid of it. You can see next to it that we have our console, and you can see here that we have testing showing up. So this means our console log is working and it means our JavaScript is connected to our HTML perfect throughout the course we're going to learn more about different things here. So we're also going to learn about the network tab.
00:37:54.314 - 00:38:27.292, Speaker A: If we refresh the page we can see that it actually shows which files are loading. So we have our index HTML, how long they take, the size of them, what order they're loading, and more information. But those are the basics. And the other thing is our application tab. As you can see, this is from a project within the course. We're actually saving bookmarks into our local storage, but we'll get to that later in the course. The important thing is everything is working as we want it to.
00:38:27.292 - 00:39:12.718, Speaker A: So let's jump back to the code and we're going to get rid of this and save it. Now, the last thing I'm going to show you is how to actually host your project online for free using GitHub. So if we jump back to GitHub here, we're going to create a new repository and we're going to give it a name template test and we're not going to worry about a description and we're not going to worry about a readme. We're going to click create repository. Then we're going to copy this here. This is the remote that we want to add and we're going to jump back to our code and we're going to open up our terminal. If you remember, we're going to start with our git init.
00:39:12.718 - 00:39:50.680, Speaker A: It's going to initialize an empty repository within our folder. We are going to add the remote origin. So git remote add origin and then we're going to paste that in. Then we're going to do git add space and then period. Because that's going to add everything and then git commit MH and then we're going to type in a message. This will be our initial commit and you can see that there are some changes here and it shows the three files that are going to be added. And then lastly we're going to git push origin master.
00:39:50.680 - 00:40:36.010, Speaker A: Okay, so that's done. Now if we jump back over and we refresh, we can see that we have our three files here now. And so that's how the process would work if you're setting up a project for the first time. But let's say that we made a change in our index HTML, we can move this down a little bit and let's say we're just going to add an h one tab and we're just going to have it say hello world, let's save that and now we can open up another terminal. And so anytime you make changes to a project, you're going to save the file. And then we only have to type in three commands. So I'm going to type in git add and then period.
00:40:36.010 - 00:41:02.060, Speaker A: That's going to add everything that's been changed. And then I'm going to go git commit m and then I'm going to add my commit message. So I'm just going to add hello world. And then you can see I've only changed one file, our HTML file. And then I'm going to do git push origin master. Okay, so that's done. I can jump back to my repo if I refresh the page.
00:41:02.060 - 00:41:47.778, Speaker A: I can see now that I have my hello world commit, now I can scroll back up to the top. So we're going to scroll over, I'm very zoomed in here, but for you you'll be able to probably see this whole page. We're going to go to the right and we're going to click on settings and we're going to scroll down in our settings until we find GitHub pages. So this is designed to host your project pages. And what we're going to do is we're just going to switch the source from none to master branch and you can see that the page source has been saved. And if we scroll down again we can actually see that. Now we have a website where our project is going to be live.
00:41:47.778 - 00:42:24.746, Speaker A: So we can right click and open this in a new tab. So you can see right now that the site is not found. So something to keep in mind when you're using GitHub pages, when you enable it for the first time, it'll take about ten minutes. So let's wait for ten minutes and come back. Alrighty, so I've come back ten minutes later and I've refreshed the page and you can see now we have our title, we have our favicon and we have our hello world h one. Excellent. This is the process you can use going forward over and over again.
00:42:24.746 - 00:43:08.020, Speaker A: Anytime you want to share your projects online with people for free, you can start with the template I've created here. Create and initialize a git repository, push the changes to the terminal in visual studio code and then update them as you work on the project. Lastly, don't forget in your settings that you want to enable GitHub pages and you want to have the source be the master or main branch. That's about it. That's all there is to hosting. So I'm going to remove the h one from this template because again, we want it to be as blank as possible. That's the version I'm going to save in the course, but that's about it for our setup.
00:43:08.020 - 00:44:04.190, Speaker A: I think we're finally ready to get started with the course and the rest of the projects. Alright, I'll see you in the next project. Bye for now. Alrighty, so this is a cool project. This is actually something that I first worked on when I was learning web development and that is a random quote generator. So in this project I'm going to show you how to make an asynchronous fetch request to a rest API in order to get our quotes. But we're actually going to run into the dreaded cores error and I'm then going to show you how to solve that problem in case you encounter it in the future using a proxy API.
00:44:04.190 - 00:44:42.300, Speaker A: Now, when we actually take a look at our project, we can see that I've tried to make it look as modern as possible. The first of these elements is adding a hero patterns, vector background. There's many to choose from, so that will allow you to make it look unique. There's font awesome icons here, and I'm also using a custom Google font and there are many of those to choose from as well if you want to make your own version. Down at the bottom we have two buttons. The first is a new quote button. You can see that we have a loader that loads between quotes.
00:44:42.300 - 00:45:22.284, Speaker A: The idea is that when this takes a long time to load, which it does, sometimes we want to signal to the user that something is happening behind the scenes, even if they can't see it, like right there. And the other button we have is a Twitter button. So when we click on this, it will open Twitter in a new tab. And if we were logged in, it would allow us to tweet using this button. Alright, pretty cool. The very last thing I'm going to show is that this project is also mobile responsive as well. So we can see we have a pixel two XL size that's about the size of most large smartphones.
00:45:22.284 - 00:46:25.622, Speaker A: And you can see that our quote container is fitting the size of the screen and it has a little bit of a margin on both sides. Alright, looks pretty good. Let's get started. The first step is going to be duplicating our template folder that we previously created, and we're going to rename this version to quote Dash generator. And next we're going to open that up in visual studio code and once inside, we're going to open up our three files, our index, our style and our script files. And we'll remove that explorer to give ourselves a little bit more space. So the first thing we're going to change is our page title from template.
00:46:25.622 - 00:46:47.960, Speaker A: We're going to type in quote generator just to know that we've actually updated our template. We're going to save that. And if you see at the bottom here, there's a blue bar. We're going to press go live to use our live server extension. And you can see that the project has opened up. It's totally blank, but we can see that the page title has changed. Okay, awesome.
00:46:47.960 - 00:47:11.680, Speaker A: The next step is we're going to go to the Hero Patterns website, heropatterns.com, in order to find our vector background. There are many different patterns to choose from, as you can see here. And you can customize your colors however you like. There is one in particular that I am going to go for. It's my favorite one. It is the circuit board.
00:47:11.680 - 00:47:41.758, Speaker A: It's kind of near the bottom here. And there it is. So we're going to click on this and we're going to change the foreground color to be black and the background color to be white. And then we're also going to bring down the opacity quite a bit. You can see as I do that, that it actually changes this number here. And we're going to bring it down to zero eight. Okay, that's perfect.
00:47:41.758 - 00:48:19.892, Speaker A: And then we're going to copy this and we're done with this page for now. We can go back into the editor and into our style Css and we're going to start styling our body here. So the first thing we're going to do is we're going to eliminate the margins. So we're going to do margin zero. Normally there's a ten pixel margin all the way around the body, but we want our background to extend all the way out. We're also going to give a min height of 100 vh viewport height. Okay.
00:48:19.892 - 00:48:42.356, Speaker A: And now we can paste in our hero pattern here. We can see that the SVG is one giant line. We don't need to worry about that though. We'll just leave it as it is and we'll just tab that over. Okay, now we're going to save it and go over and check it out. Okay, that looks great. We have our circuit board pattern on our full screen background.
00:48:42.356 - 00:49:02.354, Speaker A: Awesome. Next we're going to go to google fonts to get a custom font. You can see that this site has changed a bit in recent weeks. I actually prefer the classic site. So I'm going to click up here, return to classic site, and I already know the font that I want. But of course you can go through. There's many, many fonts to choose from.
00:49:02.354 - 00:49:38.080, Speaker A: I'm going to go with this very popular font here, Montserrat. And we're going to click the add button here. And we're going to go to embed and we're going to import it. So we're going to add this in our css and we're just going to copy that. And we are done with that page. Now back in visual studio code, we're going to add this import for the font at the top here. Okay, so we have that imported and now we're going to actually add it into the body.
00:49:38.080 - 00:50:33.848, Speaker A: So first we want our font color to be black so that it contrasts our white background. And now we can include the font family here. So we're going to add our Mont Saurat and we'll also add a fallback of just San serif. We want a font weight 700, which is a bold font. We want all of our font probably throughout to just be centered just to make everything look nice and clean. And we're also going to use display flex to align everything in the center both vertically, which is align items, and horizontally, which is justify content. Okay, we're going to save that and that's pretty much it for this first video.
00:50:33.848 - 00:51:15.820, Speaker A: In the next one, we're going to start actually creating the UI for our project where our quotes and buttons will live. And we'll make sure that our font awesome and Google fonts are both working correctly. All right, I'll see you in the next one. Bye for now. Alrighty. Welcome back. So in this video, we're going to get started on creating the HTML for our quote container as well as all the elements inside of it.
00:51:15.820 - 00:51:43.800, Speaker A: All right, let's get started. So we're going to use our Emmet abbreviations to speed up this process. We can type out a div and then use a period to denote the class. In this case, quote container for our quote container. And then we can also do a hashtag for adding an id. In this case, it's also going to be quote container and we can press enter and Emmet will do the rest. Very cool.
00:51:43.800 - 00:52:20.020, Speaker A: Alright, so moving on, we're going to want to keep things pretty tidy like I have with this script comment on line 15. We're going to do the same thing for each of the elements that we're making inside of our container. So to comment something out the keyboard shortcut on a Mac would be command and on windows it would be ctrl. So I'm going to hit that and we're going to start with our quote element here. The other cool thing about Emmet is that you actually don't even need to type out div. We can just start with period and then our class name. In this case it's going to be quote text.
00:52:20.020 - 00:53:11.138, Speaker A: And you can see that we have a div with the class quotetext. We're going to use this to adjust the size of our font for our quotes and inside of here the first thing we're going to add is our font awesome icon. So this is the quotation mark icon we have to the left of our quotes in order to do this, I'm going to use Emmet again and this time it is an I element and it's going to have the class of f a s, which stands for font awesome solid. There are different types of font awesome icons. We'll see another one in a second and then I'm also going to give it a class of FA quote dash left. If you want to learn more about how font awesome works and finding new icons, then definitely check out their website. Okay, and the next part is the most important part.
00:53:11.138 - 00:53:47.030, Speaker A: It's our actual quote itself. And we're going to use a span for this. And we're going to give this an id of quote. We're going to use a span because this isn't going to take up any space on the page other than the text itself. And we're using an id of quote so that we can target this element in the JavaScript and dynamically change the inner text. For now we're going to have to just use static elements for our UI building because obviously we haven't done the functionality yet. So I'm going to just type out the quote that we had when I was first showing the project.
00:53:47.030 - 00:54:21.550, Speaker A: Okay, so you can see that this kind of messed with the spacing of our project when I typed out all this text and that wasn't even a lot of text. Imagine a paragraph. So in order to fix this we can turn on word wrap by using Alt Z. So you can see that now it's broken up this one line into two lines to be able to show all of the content on it. This is going to be very important for you going forward when you're adding any text to any website. So something to keep in mind. Next we're going to add in our author element.
00:54:21.550 - 00:55:12.840, Speaker A: We're going to start out with a div with the class quote author, and inside of that we're going to have another span, this time with an id of authorization. Same thing. We're going to replace this with our JavaScript, but for now we're just going to type it in ourselves. Lastly, for this box we're going to want our two buttons at the bottom. So we're going to comment out a title for our buttons and we're going to have a container for our buttons. This will allow us to have a flexbox inside of this element that will be different from the flexbox that's within the body. In this case, we're going to spread our two buttons as far apart as they can go.
00:55:12.840 - 00:56:03.354, Speaker A: Next we're going to create our button, our twitter button. So we're going to start by giving it a class of Twitter button and an id of Twitter. We're also going to give this a title. You can see that it populated this here you can just press entertain. And the reason we're going to give a title is so that when you hover over it, in case you're unfamiliar with what it's actually representing as the icon, you can have a little bit of an explanation that will pop up when the user hovers over on a computer. Inside of this button, instead of having text, we're actually going to have another font awesome icon. So we're going to use an I element, this time with the class of fab or font awesome brands.
00:56:03.354 - 00:56:34.780, Speaker A: So that's the class you would use for any kind of social media or tech company. And we're going to use fa Twitter for this icon. Okay. And we have one more button. We're going to give this an id of new quote and we're going to type out new quote inside. And this will of course be the button for getting a new quote. Okay, so that's it for our HTML for now.
00:56:34.780 - 00:57:10.610, Speaker A: So let's save this and head over and check it out. Okay, so, looks pretty good so far. Even though we've had pretty much no styling. The main thing that we have working here is that our body is using Flexbox and we're centered on the vertical axis and the horizontal axis, which is making everything look great. All right, so now we're going to be looking at the styling for our container itself. We're going to add a background color. We're going to make it a maximum width so that even when the quote text is longer, it wraps to the next line.
00:57:10.610 - 00:58:03.102, Speaker A: Instead of just expanding wider and wider, we're going to make our quote text itself bigger than the author text. We're also going to try to differentiate the author text in another way and we're going to increase the size of our quote icon here. All right, so let's jump back to the code and get started on that. So we're going to switch back over to the CSS now and we're going to scroll down and we're going to start with our quote container. So we're going to write out our class here, quotecontainer. And then we're going to give it a width of auto and also we're going to cap the maximum width at 900 pixels. So as I said, we don't want the box to just be as wide as possible.
00:58:03.102 - 00:58:46.698, Speaker A: We want it to be centered in the screen and we want the lines of the quote to actually wrap to multiple lines. We're also going to add some padding to the box so that it automatically spaces out of all the quotes and buttons and everything. We're going to give it a top and bottom of 20 pixels and a left and right of 30 pixels. Next we're going to add a border radius. This is going to give our box a rounded corners look, which is very, very modern. You will see that on many, many, many designs. We're going to add a background color and this time we're going to use an RGBA.
00:58:46.698 - 00:59:24.952, Speaker A: You might be familiar with RGB. RGB A is pretty much the same thing, but the a value, the alpha value, allows us to control the opacity of the object. So the reason we're adding this is so we're making a white box, but we want to be able to see through a little bit to the background of the page. And lastly, for our quote container we're going to add some box shadow. This is another very modern element. If you want to learn more about box shadow you can very easily look it up. But I'm going to just set in the values here of 00:10 pixels.
00:59:24.952 - 00:59:47.408, Speaker A: Ten pixels. Ten pixels. This is the horizontal offset, the vertical offset. So the up and down. This is the blur and this is the radius. And then the last thing we'll add is another rgba. This time we're going to use black and we're going to have 0.2
00:59:47.408 - 01:00:11.506, Speaker A: for our opacity. All right, so let's save that and go check it out. All right, so that's looking a lot better. We can see we have our rounded corners, we have our shadow and we can see the text better, but we can also see a little bit of the background. Okay, that's a good start. Let's now start changing up our text. Alrighty, let's jump back to our code.
01:00:11.506 - 01:00:56.288, Speaker A: And below this we're going to target our quote dash text and we're going to make it bigger by giving it a font size of 2.75 rem. You might be wondering why I'm using REM instead of pixel for font size. The short answer is that it helps with responsive design. The longer answer is that REM stands for relative size compared to the root element, specifically the HTML element. In most browsers that will have a default value of 16 pixels. So why does that matter? Because that 16 pixel value can become bigger on a mobile device when a user scales their text bigger.
01:00:56.288 - 01:01:25.872, Speaker A: Basically it helps us maintain a consistent and responsive design. So one REM equals 16 pixels and in this case 2.75 REM would equal 44 pixels. Okay, so we can save that and check out how that looks. Okay, so that looks a lot better. Awesome. So we want to make our quotation mark a little bit bigger and we also want to add another class in case our quote is longer than this.
01:01:25.872 - 01:02:02.386, Speaker A: And we want the font size to be a little bit smaller. So below this we're going to add a long quote class. And for a long quote we're going to give this a font size of two REM, which is 32 pixels. And we will dynamically turn this on and off in our JavaScript when it's needed. And lastly, we will change the size of our font awesome icon. So we're just going to target this specific font awesome class here. Fa quote left.
01:02:02.386 - 01:02:26.644, Speaker A: And we're going to give this a font size of four ram or 64 pixels. Alrighty. So let's save that and check it out. Okay, so that quote icon looks like it's a good size compared to our quote text. Next we're going to work on our author text. We're going to want to make it bigger. We could probably stand to space it a little bit away from the text.
01:02:26.644 - 01:02:59.558, Speaker A: So we'll add a margin top and let's also make it italic. And to change it up even a little bit more, we're going to change the font weight as well. So let's go back and do all of that. So we're going to target our quote author class. We're going to give it a margin top of 15 pixels. We're going to give it a font size of two rem. So our quote text is 2.75
01:02:59.558 - 01:03:19.552, Speaker A: rem. We're going to give it a font weight of 400 which is normal. Everything else has a font weight of 700 which is bold. And lastly we're going to add a font style italic to make it italic. Alrighty. So let's save that and check it out. Great.
01:03:19.552 - 01:03:47.510, Speaker A: I think the author text looks a lot better. It's spread out and it has a little bit of a different style to it. So it looks like a separate idea. Perfect. Now let's have a look at our responsive design on a mobile device. So you can see that for the most part everything is looking pretty good other than the buttons which we haven't done yet. But I actually want to always have a margin on the left and right so that we can have a clearly defined box.
01:03:47.510 - 01:04:55.576, Speaker A: So let's go back to our code and fix that by adding a media query at the bottom. So you always want to add media queries at the bottom because you want it to be able to override anything else throughout the code. So we're going to writeia to start our media query and screen to show that we only want it on screensh and we want it to only be on devices that have less than 1000 pixels of width. So in this case anything that is a standard tablet or smaller. So we want to change our quote container to have a margin auto on top and bottom because we're not that concerned with that margin. But we want to make sure that we always have a margin of ten pixels on the left and the right. And while we're here, let's also make the quote text a little bit smaller on a mobile device.
01:04:55.576 - 01:05:16.566, Speaker A: So instead of 2.75 rem, we're going to do 2.5 rem. Okay. So let's save that and go back and check it out. Okay, perfect. So the text is a little bit smaller and we can also see that we have our margins on the left and right.
01:05:16.566 - 01:05:48.154, Speaker A: Okay. That's pretty much all we need to do for mobile responsive design. So that keeps it pretty easy. So in the next video we're going to fix our buttons. I'll see you in that one. Bye for now. Alrighty.
01:05:48.154 - 01:06:41.080, Speaker A: Welcome back. We're going to be looking at the buttons for our quote generator today and the very first thing we're going to do is work on our button container. We're going to start by adding the same margin top that we had between our quote text and our author text, 15 pixels. We will use Flexbox to put one button in this corner and one button in this corner. All right, let's jump back to the code. Okay, so we're going to work above our media query here and we're going to start out with our button dash container class and we're going to give it a margin top of 15 pixels, then a display flex to initiate flexbox and then justify content. And we want to space between.
01:06:41.080 - 01:07:08.610, Speaker A: Okay, so let's save that and check that out. Okay, perfect. So we have our space here. There's a bit of a gap and we have our buttons on either side. Awesome. Let's get back to actually styling the buttons themselves. So we're just going to target the button element because we don't have any kind of major differences between the buttons other than the hover color, which we're going to specify later.
01:07:08.610 - 01:07:41.950, Speaker A: First, for every button we're actually going to add a cursor pointer because by default it doesn't have that little pointer when you hover over a button. So we're going to have to add that ourselves. Next, we're going to use REM still for our font size and we're actually going to use it for the rest of this as well. So that if the font size does change, everything around it will change as well. So the height of our button is going to be 2.5 rem. We don't want to have a border around our button.
01:07:41.950 - 01:08:12.058, Speaker A: We want our button to be rounded like everything else. So we're going to give it a ten pixel border radius. We want the font color to be white and the background color will be a dark gray. So I'm going to use 333 for that. We don't want a blue outline when we click on it. So we're going to do outline none and we're going to want some padding. I'm going to use 0.5
01:08:12.058 - 01:08:43.721, Speaker A: rem on the top and bottom and 1.8 rem on the left and right. Lastly, I'm going to add box shadow this time. It's going to be a little bit different because I'm going to only put in a horizontal and vertical value. So horizontal is zero and vertical is 0.3 rem. And we're going to give it an rgb of 121-12-1121 for kind of a light gray.
01:08:43.721 - 01:09:26.770, Speaker A: And we're going to give it a little bit of opacity, but we'll still mostly be able to see it. So the reason that I'm doing this is so that you can see that's how our buttons look. We're going to add a transition so that when we click on the button it looks like the button is actually being pressed in. Actually, before we get to that, I want to quickly add a hover pseudo class so that when the user hovers over the button there's a slight color change. So let's jump back and take care of that. Right below here we're going to use the pseudo class hover by adding a colon and then hover. We want that to all be one word.
01:09:26.770 - 01:10:18.010, Speaker A: And a very easy way to do this is with filter brightness and we're going to make it 110% brighter. There are definitely better ways to do this, but I found that this is the quickest, easiest way to accomplish this. So let's save it and go back. And you can see it's very subtle, but when we slide over the button it gets a little bit brighter. Okay, now let's add the effect of actually pressing in the button. Okay, so below that we're going to use the pseudo class active this time and we're going to have a transform translate and then zero and 0.3 ReM.
01:10:18.010 - 01:10:59.240, Speaker A: So you might recognize that 0.3 Rem is the same we have up here. So essentially what we're doing is on the horizontal axis we're not moving the button, but on the vertical axis we're moving the button down by 0.3 rem, meaning that it will go into the page. The other thing we're going to manipulate is the box shadow to give slightly less box shadow in order to again, help with that effect. So we're going to use an rGBA of white 255 three times and then 0.65 again as well.
01:10:59.240 - 01:11:25.876, Speaker A: Forgot a semicolon there. All right, and let's save that and check it out. Okay, that looks awesome. Looks like the button is syncing right into the page. So you can see that our box shadow is disappearing and the whole button is also moving down. Perfect. All right, so last thing, we want to just modify our Twitter button a little bit.
01:11:25.876 - 01:11:52.204, Speaker A: We want this icon to glow Twitter blue when we hover over the button. And you know what, we also can stand to make the icon a little bit bigger. By default, it's one rem. Let's make it 1.5. All right, back to the code. And we're going to target our Twitter button again with the pseudo class hover. And I already have found this color.
01:11:52.204 - 01:12:18.060, Speaker A: You can look it up, of course, if you like. This is the official Twitter color. It's hashtag three eight, a one f three. Okay, awesome. And while we're at it, let's just add in our size change for our Twitter icon here. Font size 1.5 rem.
01:12:18.060 - 01:12:40.344, Speaker A: Okay, let's save that and check it out. Alright, so our icon is definitely a little bit bigger and when we hover over it, it is Twitter blue. All right, so that's pretty much it for our UI. Our styling is done. I think it looks great. And in the next one we'll start getting to the JavaScript. I'll see you in that one.
01:12:40.344 - 01:13:27.716, Speaker A: Bye for now. Alrighty. Now that we're finished with the HTML and CSS, the goal of this video is to actually get quotes from an outside source. And I'm also going to show you how you can get quotes locally. The benefit of that is that you'll be able to actually customize the quotes yourself. The first thing I'm going to do is I'm going to show you the API I've chosen for us to actually get our quotes from. So I found this API just googling around.
01:13:27.716 - 01:14:25.644, Speaker A: There are several out there that you could use. Keep in mind that the format that the data is returned in will be different with different APIs. So you might not be able to use exactly the code that I'm using here, but hopefully you will understand the concept that you just need to match what is being returned. So you can see here, if we press the fetch quotes button, we can see that it didn't return just one quote, it actually returned a list of quotes. So that means this data is being sent back in an entire array of quotes. That means we're going to need to do a little bit of work to take that array, store it, and then pick one quote randomly every time we press our new quote button. There are lots of quote APIs out there where you wouldn't have to do that because some of them will actually just deliver a single random quote at a time.
01:14:25.644 - 01:15:16.610, Speaker A: And so that would be a little bit of a different process. If we go to this next page here, you can actually see this is the format that it's being returned in. This is actually the link to the API itself, and you can see that it's breaking it up into objects within an array, and each object includes a text value and an author value. So that's what I'm saying. Keep in mind, when you're using a different quote API, it might just return one thing that is text, it might call it quote. You just need to check what's being returned and make sure that you are using the correct syntax with the data that you have. Okay, so let's jump over to our code and see if we can get this implemented into our project.
01:15:16.610 - 01:16:10.940, Speaker A: Okay, so we're going to start in the JavaScript here. So the first thing we're going to do is we're going to comment out a title. We're going to use command or control question mark, depending on if you're Mac or Windows. And we are going to say that we're going to get quotes from API. And to do this we're going to use an asynchronous fetch request within a try catch statement. So what does that mean? An asynchronous function can run at any time independently and it won't stop the browser from completing the loading of a page. So for now we'll need to write async function and then we'll name our function getquotes and then we'll have our brackets here space and then we'll have curly brackets and then we will press enter.
01:16:10.940 - 01:17:13.088, Speaker A: The next thing we'll need is our API URL. So I'm going to have constant here for API URL and that's going to be equal to single quotes here. And we're actually going to jump back to the browser and I'm just going to copy this address here. I will provide all the links of course within the course and we will paste that there and then now we're ready to set up our try catch statement and our fetch request inside. So a try catch allows us to attempt to to complete a fetch request, but if it doesn't work we can catch the error information and do something with it. So you see that we have our try and then we have our catch, and then in brackets we're going to pass in the error that would get received. And in this case I'm just going to comment out that this is where you would handle your error.
01:17:13.088 - 01:18:14.920, Speaker A: In a production website you'd potentially pass that into an alert. So something like this, and then you would pass in your error or you would actually pass it into some other kind of specific UI element that you created to show users of any issues with functionality. But in this case we're focused more on just generating a quote. So we're not going to worry about that in this project. Now that we have our API URL here, we need to set up our actual fetch request inside of our try statement. So we're going to start with a constant for a response, and this is going to be equal to await fetch and then we're going to pass in our API URL. So this means that this constant will not be populated until it has some data fetched from our API.
01:18:14.920 - 01:19:35.060, Speaker A: So that means by default, if we did not do asynchronous and we did not do await, it would try to set this response value before it had a chance to fetch, and that would cause an error. So in this case we're only setting the response constant when we actually have data and it can actually be set, or else it would just be undefined. Next, we're going to use a global variable here, and this is going to be called API quotes and this is going to be equal to await response JSON and then brackets there. So what that means is we are getting the JSON from our API as a response, and then we're turning that response into a JSON object, because from a web server it's actually just a series of strings as we saw in the other one. And then we're going to pass that into a global variable called API quotes. So we're actually going to need to create this above in order for it to be available in every function and not just in this function. So we're going to use a let here instead of a constant and we're going to call it API quotes and this is going to be equal to an empty array.
01:19:35.060 - 01:20:19.290, Speaker A: The reason that we're using a let statement for this variable instead of a constant is because in the beginning we're setting it as an empty array, but here we're actually changing the value of it to pass in the quotes. You would only use a constant if the value is never changing, like our API URL here. And then the last thing we're going to do in this function is we want to console log API quotes. You can see it auto completed for me there. The very last thing we need to do before we can check it out is on load. So I'll comment out another title here below. We want to actually run our getquotes function as soon as the page loads.
01:20:19.290 - 01:20:58.550, Speaker A: So we'll need to set it up here like this. Okay, so we're ready to save it and check it out. Okay, so we're going to right click and inspect to have a look at our console here. And you can see that we have returned something. It is an array with 1643 objects inside of it. So if we expand this, we can see that we have all of these objects. If we expand further, you can see that they're all indexed and they have a text value and an author value, just like we saw in our JSON on this webpage here.
01:20:58.550 - 01:21:33.002, Speaker A: Perfect. So that's working. We are actually pulling in that array of objects, but the next step is we actually only want one at a time. So if we go back we can actually use an index number by adding square brackets and then a random number. I'm just going to pick the number twelve. And this is going to log one specific quote in this array. That is the 12th quote, or I guess it's the 13th quote because it's a zero indexed array.
01:21:33.002 - 01:22:07.850, Speaker A: But it's just going to pull out one this time. So let's save it and make sure that's working as expected. Okay, so you can see instead of an array now we just have one quote and we can see the text and the author. Awesome. So this is what we want for our project, just one quote at a time, but we want it to be random every time. We can't just assign the index manually each time. So what we're going to do is we're going to break this out into another function so that we're only running the fetch request once.
01:22:07.850 - 01:23:25.540, Speaker A: And then we're going to use another function that is going to pull a single quote from our local API quotes array. And that's the function that's going to get triggered every time we press the new quote button in the UI. So we're going to start with jumping back to the code and instead of console logging here we're going to delete this and we're going to replace it with what our new function is going to be called, which will be new quote. And then above this we're going to actually create that function. So we're going to call this function show new quote and we're going to create function new quote, bracket space, curly bracket and press enter. So how this is going to work is we are going to need to do a similar thing with the index of the array, but we want it to be dynamic and in order to do that we're going to need to use some math functions. So if we jump back to the browser, we can see here that we have on this page here an article linking to math random.
01:23:25.540 - 01:24:19.860, Speaker A: So this is a math function that returns a number between zero and one. So it's going to return this number to a lot of decimal points. You can see something like this here. And then in turn we're going to use that to multiply by the length of our API quotes array so that it will never be a higher number than the number of quotes that we actually have. We're going to need to combine this, though with math floor. So math floor is important because it allows us to return the largest whole number or integer that is less than or equal to a given number. So for example, if we multiplied 1643 by 0.5201,
01:24:19.860 - 01:24:59.470, Speaker A: et cetera, et cetera, we're going to get a number with a decimal place. So what we'll need to do is wrap our math random in a math floor in order to make sure. So like in this case it's 5.95. If we ran math floor on that, it's going to return just five. So we'll need to do that in our project. Okay, so let's dive back to the code and implement that. So first we're going to comment out a title here, and this is going to be to pick a random quote from API quotes array.
01:24:59.470 - 01:25:41.384, Speaker A: And we're going to assign a constant called quote. And this is going to be equal to API quotes. And then square brackets, because essentially what we're doing in the square brackets is we're making index just like how I had twelve, but this time we're doing it dynamically. And so that's going to be math floor. So remember we have to wrap our math random in math floor to make sure it's a whole number. And we're going to do math random, another set of brackets and then a space and then times. So this is the number eight on your keyboard.
01:25:41.384 - 01:26:09.760, Speaker A: So shift and then eight to create the asterisks. And that's for multiplication. And then we're going to do API quotes length. So if you remember, it was 1643 was the amount of objects in our array. And then we'll add at the end here a semicolon. Lastly, we will just console log our quote to see if it was working correctly. Okay, so let's save that and check it out.
01:26:09.760 - 01:26:38.370, Speaker A: Okay, awesome. So we can see that we got a different quote from last time. This is a Carl Jung quote this time. And if we were to refresh the page, you can see that we got another different quote. Awesome. So that is working exactly as we want. We're able to pull a single random quote from an array of quotes that we just fetched from an API.
01:26:38.370 - 01:27:39.358, Speaker A: So from here you could actually continue on to the next lesson. But the one last thing I would like to show is how we can accomplish a similar thing, but using an array that exists locally in our project. So you might have noticed in the index HTML file at the very bottom we have a script source for a quotes JS file. And in the Template project that you should have downloaded to start this project. We will see that in this quotes js file that essentially we just have a constant called localquotes which is an array of objects and it's actually the exact same format as before. I've just copied and pasted this from the API we're using though this has a lot less quotes. Instead of 1600 it maybe has 100 or so.
01:27:39.358 - 01:28:14.824, Speaker A: You can see that some of the authors are null. That's something we will tackle in the next video. But the benefit of using something like this is that you can actually customize the quotes yourself and just change the text and the author field. So I wanted to provide this as an option just in case you want to do something that is customizable. And it also doesn't need a fetch request. And if this other API we're using goes down, you can still use this instead. So we can close this because we don't need to modify this.
01:28:14.824 - 01:29:06.270, Speaker A: But back in our JavaScript we're actually going to simplify our code quite a lot. So if you are using this local array we can actually comment out this entire getquotes function and we can comment out our getquotes on load. So instead we would need to have new quote unload and then we can also get rid of this. We no longer need the API quotes global variable and the last thing we'll need to change instead of API quotes. So I'm going to highlight this and I'm going to use command D or control D depending on if you are windows or Mac. And I'm just going to change this to be local quotes instead of API quotes. So now we can save that and check it out.
01:29:06.270 - 01:29:43.804, Speaker A: Okay, cool. So we can see that it's still working. We have our text and we have our author. And if I were to refresh, you can see that it loads even faster because we're actually not pulling it from a fetch request, we're just pulling it locally so it works instantly. So you can see I'm refreshing multiple times and we have multiple quotes very very quickly. Awesome. So I will leave the choice up to you whether you want to use the local method that I've shown you here, or whether you want to use the fetch request like I had previously.
01:29:43.804 - 01:30:42.498, Speaker A: If we jump back to the code, I'm actually going to undo all these changes and I'm going to stick with the fetch request because it has more quotes and the API also has the possibility of being updated as time goes along. So that's the other benefit of using an API, it's also better to use locally. If the API stops working or if it has problems, you have something else to fall back on. Okay, so in the next one we're going to tackle populating our UI with the current quote as well as adding our Twitter integration. All right, I so I'll see you in the next one. Bye for now. Alrighty.
01:30:42.498 - 01:31:44.310, Speaker A: So the goal of this video is to populate our UI with the dynamic quote text and quote author, as well as enabling our new quote button and our Twitter button as well. So let's dive right in. The first thing is back in our HTML file we can see that we have several ids on our elements. Here we have our quote container, our quote, our author, our Twitter button, and our new quote button. So we're going to need to target these in our JavaScript in order to interact with them or in order to take user input. For example, every time we press our new quote button we want to be able to trigger a specific function, in our case our new quote function. So to do that we need to go to the very top of our script js file and we're actually going to create a corresponding constant for each of these elements.
01:31:44.310 - 01:32:22.998, Speaker A: So we're going to write it out in camel case like we've been doing before. That means that the first word is lowercase and then any next words are capitalized. So in this case quote container, the c in container is capitalized and this is going to be equal to document getelementbyid. I can select that and press enter to autocomplete that. And then in brackets in single quotes we're going to pass in the id that we had there. Quote generator. Make sure that your ids match or sorry, quote container.
01:32:22.998 - 01:33:17.060, Speaker A: I already made a mistake there, but that goes to my point. Make sure that your ID in your HTML matches the one that you have in your JavaScript or else you will have an error saying this element is undefined. So we'll change that to quote container. Okay, and I'm actually just going to copy and paste this four more times here. And now the first one we're going to do is quote text, capital t on text there, and this is just going to target our id of quote. The next one is going to be authorization text and this is going to target our id author. Then we have our twitter btn for button capital b on the btn there.
01:33:17.060 - 01:34:14.200, Speaker A: This is going to be to our twitter id. And then lastly we're going to have a new quote button btn so again, capital b there. And this is going to be to our new quote id. Okay, so now that that's all done, the next thing we want to do is actually jump back to our HTML and we're going to remove our placeholder text here, our Buddha quote. So we'll remove the text and we're going to remove the author as well because they're about to get dynamically added in our JavaScript. So we can save both of those things, jump back to our script js file. And what we want to do is we want to remove our console log in our newquote function, and instead we want to actually populate the text content of our author and quote elements.
01:34:14.200 - 01:34:49.194, Speaker A: So first we'll look at author text. That's our constant that we just created right here. And this is going to set the value of the text content. So this will allow us to pass in a string that is then shown in that element. And we're going to use quote author because we want to just get the author, not the entire quote object. And we'll do a similar thing below for quote text. And this is also going to be the text content.
01:34:49.194 - 01:35:09.146, Speaker A: This time it's going to be quote text. So let's save that now and check it out. Okay, perfect. So we can see that it's working. We have a dynamic quote here. If we refresh the page, we see that we have another dynamic quote. Awesome.
01:35:09.146 - 01:35:50.752, Speaker A: So that is working. That's great. So if you remember from the last video, when we looked at the local quotes array, you might have noticed that some of them had a null value in the author field. We want to be able to replace that with a string of unknown to make sure that there's always something there. Instead of having a blank space here, it'll say unknown if the author is empty. So that's a check we're going to have to do in our new quote function before we actually assigned this value here. So I'm actually going to cut this line and I'll make a little bit of space here.
01:35:50.752 - 01:36:34.130, Speaker A: I'm going to comment out a title. And this is to be to check if author field is blank and replace it with quote unknown. Okay, and we're going to use an if statement here. So if I quote author doesn't exist. So we can actually simplify this to just be exclamation marks. So that means if there is no quote author, you could also do if author null. But this is a more simplified way of writing that out.
01:36:34.130 - 01:37:34.640, Speaker A: Then we want our author text textcontent to be equal to and then we're going to pass in our string of unknown and then in our else statement. So this means if we do in fact have a quote author value and then we can paste in what we had before, the text content will be equal to the quote author. Okay. And conversely, another thing we want to change is if our quote text is really long, we actually want to apply our long quote CSS class, meaning that we're going to change the font size to be smaller on longer quotes and have it be the normal font size on every other quote. So we'll comment out a title for this as well. So we're going to check the quote length to determine the styling. So we're going to do another if statement here.
01:37:34.640 - 01:38:22.620, Speaker A: If quote txt length is greater than for now, let's just put it at 50 just to show that it's working. But we will change that number in a moment. And then inside of these curly brackets we want to have quote sorry, quote text. So this is our actual element class list. So this is going to add a CSS class using classlist add and then in brackets and single quotes we're going to pass in the name of the CSS class. In this case it was long quote else. So if the quote text length is shorter than whatever number we put here, feel free to modify the numbers if you like.
01:38:22.620 - 01:39:00.490, Speaker A: We're going to, instead of adding that CSS class, we're going to remove that CSS class and we're going to leave this at the bottom because we still want to set our text content with the value of the quote one way or another. But this is determining whether or not we want a smaller font size or a regular font size. Okay, so let's save that and check it out. Okay, so you can see that that's already working there. Our font size has gone down. It's closer to the size of the author itself. If we refresh, see if we can find a short one.
01:39:00.490 - 01:39:41.130, Speaker A: Okay, so there's a shorter one. And you can see in this case that the quote text is bigger in this case. So we'll just go back. And I actually prefer to have this at 120 characters, but it's up to you if you want to make it bigger or smaller, depending on at what threshold you want to have a smaller font size for your quotes. Okay, so that's working great. The next thing we're going to take a look at is we need to get our buttons to start working and we're actually going to start with our Twitter button first. So there's a link here that I will provide in the course.
01:39:41.130 - 01:40:31.520, Speaker A: And this is how we're going to actually be able to tweet a quote that we have on Twitter. So it's actually going to pre populate a tweet with the quote text and quote author. So in order to do that we are going to need to copy this URL here. And eventually what we're going to do is we're actually going to pass the query parameter of text. And then inside of that text parameter we're going to pass in a template string that features our quote and our author values separated by a space and a dash. Okay, so let me show you what I mean by that. If we go back down to the bottom here, we'll actually make this function at the bottom.
01:40:31.520 - 01:41:06.924, Speaker A: We're going to comment out a title first and this is going to be to tweet quote and we're going to create a function called tweet quote. Okay? And then we're going to have a space and then our curly brackets press enter. Then we're going to create a constant called twitterurl. And this is going to be equal to a template string. So I just want to highlight the difference here. So a template string uses backticks. This is the button right below your escape key.
01:41:06.924 - 01:41:36.890, Speaker A: This is different than single quotes. So that's single quotes right here. And this is backticks. You can see that it's kind of slanted. So make sure that you're using backticks and not single quotes for this. The reason being we're going to paste in our Twitter URL that we copied and then we're going to have a question mark to show that we're going to have a query parameter here and then that parameter is called text. And then that's going to be equal to.
01:41:36.890 - 01:42:13.600, Speaker A: And the reason we're using a template string is because a template string allows us to pass in a variable and it will be converted into a string. So in order to do that we're going to use dollar sign and then curly brackets. And you can see here that that turned blue. That's how you know that it's working correctly. And in this case we're going to pass in the quote text textcontent. So that's what we're setting up above. And then after that we're going to have a space and then a dash and then another space.
01:42:13.600 - 01:42:48.840, Speaker A: And then we're going to do the same thing. Dollar sign, curly brackets and this time it's going to be author text. And then after the backtick we're going to have our semicolon here. So I'm going to use alt z to word wrap just to be able to see everything. But that is all existing on one line. And then the next thing we need to do is just window open. And this is going to allow us to open a window using our Twitter URL.
01:42:48.840 - 01:43:34.300, Speaker A: And we'll also pass in another parameter with a comma. And we're going to pass in single quotes blank. And using this single quotes blank is going to allow that Twitter window to actually open in a new tab. Okay, so lastly, to get our Twitter button to work and our new quote button to work, we're going to need to add some event listeners. So these generally go at the bottom because you want to declare your function before you call it. So in this case we'll comment out a title here for our event listeners. And the first one is going to be on our new quote button.
01:43:34.300 - 01:44:06.046, Speaker A: So newquotebutton addeventlistener. You can see, I can use the arrow to select the second one here. Press entertain and then brackets single quotes click. So we want to target a click event and then comma. And then we're going to run the new quote function. So we don't need to have curly brackets on this quote itself, we just need to pass in the function name. And then we'll do a similar thing for our Twitter button.
01:44:06.046 - 01:44:36.202, Speaker A: So Twitter btna, that's our constant. And then dot, add eventlistener, bracket, single quotes, click comma. And then this time we want to target our tweet quote function that we just made. Okay, so let's save that and check it out. Okay, so we're going to start by trying out our new quote button. So remember before we were actually just refreshing the page. Okay, awesome.
01:44:36.202 - 01:45:08.920, Speaker A: So that's working. And it's working really fast, pretty much instantaneously. This is because our API quotes array is now local once we fetch it the first time, and that's why it is loading so quickly. You can see that our unknown has worked as well in this example. So this would have been blank before, but because we passed in that string of unknown, we have that showing up there. Awesome. And lastly, we just want to make sure that our twitter functionality is working as well.
01:45:08.920 - 01:45:32.250, Speaker A: Okay, awesome. So you can see that we have our quote here. We have a space and we have a dash, and then we have the author, which in this case is unknown. Okay, perfect. So that's working exactly as we want it to as well. Awesome. So in the last video we're going to go over adding a loader animation.
01:45:32.250 - 01:46:22.524, Speaker A: Though in our current setup you will likely only see it at the very beginning when we are fetching the quotes from our API because after that we're just pulling instantly from our local array of quotes. But we'll check that out in the next video. I will see you then. Bye for now. Alrighty. So the last thing we're going to add to our project is a loading animation. So this is going to show up when we are making our fetch request at the beginning and then it's going to be hidden.
01:46:22.524 - 01:46:56.470, Speaker A: Once we are finished that fetch request and we are able to show a quote for this, we're going to use the w three schools example. I will provide this link within the course. I think that this is a good option to use. Of course there's many other options out there and I'll show some other ones off throughout the course. But I like this one because of its simplicity. So it looks something like this. If we scroll down we can see that in the HTML, we just need to add a div with the class of loader.
01:46:56.470 - 01:47:56.670, Speaker A: And right below that you can see that this is all the css we need, including our animation here in our keyframes. So what I'm going to do is I'm going to copy this and then we're going to jump back into our code. So in our HTML, the first thing I'm going to do is below our quote container here, I'm going to comment out a title for our loader. And then inside of this we're going to use the autocomplete in visual studio code. So I'm just going to do loader and then hashtag loader and press enter. And you can see that that automatically creates a div with the class of loader and the id of loader as well. And then in our CSS, right above our media query here, I'm going to create some space and then I'm going to comment out another title here for our loader.
01:47:56.670 - 01:48:26.360, Speaker A: Then I'm going to paste in the CSS. So I'm going to remove these comments here for the colors. And also instead of it being blue, I'm going to change it to be a gray so it'll be hashtag 333. Of course, feel free to use any colors you would like throughout the project. But this is what I am going to go with. So I'm going to save both of these things. And now we're going to need to jump over to our JavaScript.
01:48:26.360 - 01:49:28.970, Speaker A: So the first thing that we're going to do is we need to actually create a constant for our loader just like we have with everything else here. So we're going to create constant loader equals document getelementbyid, bracket, single quotes and then loader. Next we're going to need to create a loading function and a complete function. So the purpose of our loading function is going to be to show that we're loading and this function is going to be called loading brackets, curly brackets. And then inside of this we're going to have loader hidden. So this hidden attribute is actually on any HTML element so you can use it for anything. In this case, we're hiding our div and this is going to be equal to false, meaning that we don't want it to be hidden and we're going to do the opposite with our quote container.
01:49:28.970 - 01:50:23.226, Speaker A: So quote container hidden is going to be true. So that means when our loader is going, we're only going to see the loader and nothing else. And then in the next function we're going to create a complete function and we'll just comment out a title here that'll be hide loading and the function is complete. And in this one we're going to do the opposite. So our quote container hidden will be equal to false, meaning we want to show our quote container and our loader hidden will be equal to true, meaning that we're going to hide our loader. Okay, so to test this out, we're going to go to the very bottom and we're going to comment out our getquotes function here. And instead we're just going to call the loading function just to make sure it's all working.
01:50:23.226 - 01:51:00.810, Speaker A: So let's save that, check it out. Okay, perfect. So you can see that all we have on our page is our loading spinner and our quote container is hidden. Awesome. So now if we go back we can remove this and we will restore our getquotes function. But now we're going to need to actually call that loading function at the beginning of our getquotes function. So we're going to scroll up here and in the first line of our get quotes function we're going to call loading.
01:51:00.810 - 01:52:04.190, Speaker A: And you can see here that it actually goes into the newquote function if we have successfully gotten a response. So we'll need to go into that function now and we're actually going to add the loading function again here at the top. This is because when we press the button, we're actually bypassing this function and we're only launching this function. So on the second and third time you press the button, we're going to bypass this all together. So we want to make sure that if it does take some time that we allow it to load again. And then what we want to do is at the very bottom we're going to actually comment out a title here above this because we want to set the quote and we also want to hide the loader. And so right after we actually set the quote in our UI, we want to then call our complete function.
01:52:04.190 - 01:53:06.290, Speaker A: So again, at the beginning we want to have our loading function, and then at the end we want to have our complete function to hide the loader and show our quote container. In our case, as I mentioned previously, because our API quotes after the first fetch request is stored locally in our API quotes variable, we actually probably won't see the loading happening. But that is a result of its loading so quickly that it's flying from here to here in a fraction of a second. So that's why we might not actually see it spin, except for on the first time when we're loading the array of quotes at the very beginning. So let's save that and check it out. Okay, so I'm going to refresh. And you see at the very beginning, just for a second there you see the loader for like half a second or even like a 20th of a second.
01:53:06.290 - 01:53:44.442, Speaker A: Okay. And then if we do new quote though, you can see that it doesn't spin at all because we have everything stored locally. It's loading so quickly that we actually don't need to even see it. So the main benefit of this is just on the initial load, it might load a little bit more slowly for you. I have a pretty fast Internet connection and if that's the case, you will see the loader spinning at the beginning. But that's something that you can add to any project, just like how I added it here, you can use this same w three schools loader. You can do something similar, creating a loading function and then a complete function.
01:53:44.442 - 01:54:14.084, Speaker A: And then in whatever you're doing, you want to put the loading at the top and then the complete at the bottom. All right, so that's pretty much it. For the functionality of this project. I have shown you how to fetch quotes from an API. Keep in mind there are many APIs you could use for this purpose. They will return data in potentially a slightly different format. I've also shown you how you can actually pull quotes from a local array as well.
01:54:14.084 - 01:54:38.912, Speaker A: So I've given you two options, two different ways to do it. So hopefully that's going to work for everybody. And be sure to post your version of your quote generator project in the link in the course. Share it with everybody else. I've already seen a lot of great entries and looking forward to seeing some more. Okay, so that's it for this project. I'll see you in the next one.
01:54:38.912 - 01:54:40.100, Speaker A: Bye for now.
01:54:55.040 - 01:55:26.190, Speaker B: I know I keep saying this, but come on, this was another awesome project. I really like it. But let's take a look at the code and see what sort of comments we can make or what improvements perhaps we can make. So looking at the code here, I want to talk about a few things. One is the naming here. So we see over here that we have a loading spinner and a remove loading spinner. So we have complete and loading here.
01:55:26.190 - 01:56:14.266, Speaker B: Okay, now if we take a look at the script and let's say we're a new programmer that's joining the team and it's taking a look at this code now because this is in a single file, we only have 64 lines of JavaScript. It's not hard for us to say that. All right, well, here's a comment. Loading spinner shown remove loading spinner. Okay, and then we're getting the quote, we're loading the spinner and then we're completing the spinner loading. But how can we improve this? You see, naming things in programming is super important because names are part of what allows us to describe what our code does. Remember, most of the time when we work at a company, we are working with others.
01:56:14.266 - 01:57:16.644, Speaker B: And when we work with others and we didn't always write the code or people see our code, we want to do our best job to make sure that people understand our code. One of the toughest things for a programmer to do, especially ones that are just starting, is to make their code clear and understandable. I argue that the best programmers are not the ones that are clever, that can do all sorts of tricks with code. Instead, they're the ones that when you look at the code you understand, you think, wow, that's so simple. I like how they did that. So how can we improve the readability and the naming with our variables here? Well, imagine if this get quote was in a different file and I look at loading and then complete. Do I know what that does? I mean, sure, it completes something, but without me looking at the complete function, I don't understand what it does.
01:57:16.644 - 01:58:12.940, Speaker B: So one thing we can improve here is maybe instead of just saying loading because this is all about the loading spinner, just say show loading spinner. And now we can even remove the comment that's less lines of code. And this is very easy to understand. It's simply show loading spin. In the same way we can say remove loading spinner and we save another line of code. We don't have to clutter our code with comments, and it's super clear what this function does, what both of these functions do. So now I can just replace these parts with properly named functions so that I can even remove this.
01:58:12.940 - 01:59:05.420, Speaker B: So that now even if I don't know what the show loading spinner function does, or I have to go into a separate file to see what it does, I don't need to because that's pretty self evident. The name simply says show loadingspinner. So I expect this function to show the loading spinner. And just like that we improved the readability of our code. Awesome. So think about naming your variables in a way that makes sense. If somebody read your code, does it make it super obvious? And one thing to think about is when you comment your code, can that comment be removed and perhaps be included in the naming of your function? That's a good way to think about things as a senior developer.
01:59:05.420 - 01:59:40.330, Speaker B: Now the next thing I want to talk about is this code. Do you see any issues with this code? Give you a second. Can you break this code? Well, here's what I can do. I can say that right now we're saying get quote and we run these things to get our quote. But if we ever encounter an error, we run get quote again. This is what we call a recursive function. A recursive function is a function that calls itself.
01:59:40.330 - 02:00:18.088, Speaker B: It's kind of mind melting, isn't it? It's hard to understand, but yeah, if there's an error, just run this function again. Now, when you have a recursive function like this, a common trick is to go into an infinite loop. What do I mean? Well, let's say that here we actually have an error. Let's say we can throw an error with JavaScript by saying throw new error. And in here I can just throw whatever error I want. Let's just say oops. So right now this is going to throw, it's going to make this function error.
02:00:18.088 - 02:00:42.894, Speaker B: It's going to catch, and then we're going to run the get quote again. Just to double check. Let me just make sure I can console log error here. Now if I save this, go back to our project, open up the developer tools, let's make this bigger. And I refresh this. Okay, nothing's happening. Okay, it's starting to spin.
02:00:42.894 - 02:00:46.294, Speaker B: That's good, that's good. Oh, look at that. I get errors.
02:00:46.422 - 02:00:47.014, Speaker A: Oops.
02:00:47.102 - 02:01:32.540, Speaker B: And it keeps going, keeps going and keeps going and keeps going. Why is that? Well, because I'm constantly running the getquote function. If I go to my network tab, check this out, look at all of this. I keep making the same API request over and over and over and over. And look at all this data that's being transferred. Not good, right? We just broke our code, so let me stop this. How can we fix that? Well, we want to make sure that right now, the way we have it, we're assuming that there's no errors in our code because if there are errors, we get this infinite loop.
02:01:32.540 - 02:02:32.800, Speaker B: So some of the things that we can do is maybe we have a counter, we create a variable that does maybe count up to ten, and once that counter is up to ten, then we stop running the get quote because obviously something is wrong. Maybe we send an error to the user saying sorry, there's something wrong with the page instead of keep running it and running it and running it. So it's a good idea to always look at the code and try to break things. Does the code make sense? What happens if something errors out? When we get an error and purposefully doing an error with code, does it work as expected? And this is where testing comes in. By writing tests for this script JS maybe we could have avoided this issue. We could have tested out our code and seeing hey, what happens when we throw an error? Alright, that was a fun one. Theres a lot more to cover so ill see you in the next one.
02:02:48.550 - 02:03:24.590, Speaker A: Hey, welcome to the project. You can see very briefly we had a loading animation there. I'm going to show you how to make your own loading animation with the loading IO website. There are a ton of cool customization options to make yours unique. The goal of this project is to show how you can implement infinite scroll functionality. This is something that happens on social media. As a user scrolls near the bottom of the page, another network request is made, but it happens before you reach the bottom so you don't see it and it feels like you're seamlessly scrolling forever.
02:03:24.590 - 02:04:27.916, Speaker A: That's what we have going on here. The images are photos fetched from the unsplash API and we're tracking the moment all the images are loaded in order to dynamically hide our loading animation. It is one long column of images with a margin on the left and right. And as we get closer to the bottom, if you watch the scroll bar on the right you're going to see it jump up when the next network request is made and we're fetching more images. But you can see as I'm scrolling that it is a totally seamless experience. Now if we hover over an image we can actually see the description and if we click on the image we can see that image on the Unsplash website so that we can see the author or download the photo if we want. The last thing I'm going to show is if we open up our dev tools we can see that it's also mobile responsive as well.
02:04:27.916 - 02:05:16.782, Speaker A: So instead of having big margins on the left and right in a mobile device, we just have a ten pixel margin all the way around. So that'll look great on mobile as well. I will also give you several pointers along the way for how you could expand on what I've done and make your own unique version of the project. So let's get started. Hey, welcome to the project. You can see very briefly we had a loading animation there. I'm going to show you how to make your own loading animation with the loading IO website.
02:05:16.782 - 02:06:02.376, Speaker A: There are a ton of cool customization options to make yours unique. The goal of this project is to show how you can implement infinite scroll functionality. This is something that happens on social media. As a user scrolls near the bottom of the page, another network request is made, but it happens before you reach the bottom so you don't see it and it feels like you're seamlessly scrolling forever. That's what we have going on here. The images are photos fetched from the unsplash API and we're tracking the moment all the images are loaded in order to dynamically hide our loading animation. It is one long column of images with a margin on the left and right.
02:06:02.376 - 02:07:01.168, Speaker A: And as we get closer to the bottom, if you watch the scroll bar on the right you're going to see it jump up when the next network request is made and we're fetching more images. But you can see as I'm scrolling that it is a totally seamless experience. Now if we hover over an image we can actually see the description and if we click on the image we can see that image on the unsplash website so that we can see the author or download the photo if we want. The last thing I'm going to show is if we open up our dev tools we can see that it's also mobile responsive as well. So instead of having big margins on the left and right in a mobile device, we just have a ten pixel margin all the way around. So that'll look great on mobile as well. I will also give you several pointers along the way for how you could expand on what I've done.
02:07:01.168 - 02:07:42.350, Speaker A: Make your own unique version of the project. So let's get started. Alright, so to start with, let's create our project. Good place to start. So we have our handy template folder here. We're just going to copy it and paste it and I'm going to rename it. So Infinite scroll enter.
02:07:42.350 - 02:08:22.334, Speaker A: And while we're at it, we can copy our loader into our infinite scroll folder as well and then open it in visual studio code. Okay, so once we have it loaded up in visual studio code, we can open up our files here and we're going to start with the index HTML. We'll start by changing our title here. We're going to call it Infinite scroll. We can use our alt Z word wrap and we can remove our font. Awesome. Because we're not going to be needing it for this project and we're going to save that and use our trusty live server here.
02:08:22.334 - 02:08:48.616, Speaker A: We're going to click go live. And you can see we have our project loaded. We have our title up here. Nothing yet to show, but that's good. It's running. So the next step is I like adding google fonts to most of my projects because I feel like it gives them a unique feel and it also ensures that it'll always look the same, even on different operating systems. So we can see we're at the site here, it's just fonts dot google.com
02:08:48.616 - 02:09:23.988, Speaker A: dot. I'll provide the link within the course. Something that I personally like to do when I'm trying to make a title for a site is I can actually change this to be custom. And you can see we have our sample text here, but I'm actually going to change it to be the title that we want. So I can type that in and we can see that now it's previewing every font with that specific text. I've personally found that that's the best way to choose a font. So I personally know what font I want already.
02:09:23.988 - 02:10:11.846, Speaker A: So I'm going to change this to Babis new. So whenever you find a font that you like, you're going to click on it. And then over here we're going to select this style and we're going to embed and we're going to copy the import statement. So let's highlight that and copy that and we can jump back to our code. So at the top of our CSS file, we're going to add that in. And we're also going to update the body to add font dash family. And we're going to add our font here, Babis new comma san dash serif.
02:10:11.846 - 02:10:53.572, Speaker A: So I always like adding a backup just in case our Google font doesn't load for whatever reason. So let's test this out in our HTML. We're going to add in an h one so we can comment out a quick title here called title. And we'll pass in our h one. So I can just type h one and then tab thanks to the autocomplete within visual studio code. And I'm going to write out the title unsplash API infinite scroll. Okay, so let's save that and we'll save our other file as well.
02:10:53.572 - 02:11:36.220, Speaker A: And let's jump back and check it out. Okay, so we can see that our Google font has loaded. So there's a few things I'm going to change right off the bat, we can see that the background color is white. I've actually started using a color called white smoke instead of white because it pretty much looks white, but it's a little bit easier on the eyes. So let's switch that quickly and spot the difference here. Background, so white smoke and save that jump back so you can see it's a little bit grayer compared to the white right here. So you can see it's mostly white, but a little bit easier on the eyes.
02:11:36.220 - 02:12:06.002, Speaker A: Okay, so now onto the h one. Styling, I want it to be centered and I want to have an even margin on the top and bottom compared to the image that's going to go below it. And the other thing I'm going to show you is a neat trick called letter spacing that can actually make a custom font even more unique. Let's jump back to the code. And below this, we're going to start styling our h one. So first thing we're going to use text align. You can see it autocompletes here.
02:12:06.002 - 02:12:43.624, Speaker A: I'm just going to press enter and center is the first choice, which is what I want. I'm going to press enter again. And then below that I'm going to add a margin top of 25 pixels, margin bottom 15 pixels. And I'm going to make it a little bit bigger. Font size, 40 pixels. And I'm also going to change the letter spacing to be five pixels. So this works for the font that I've chosen, but you might need to have a little bit of different styling depending on the original size that your font is.
02:12:43.624 - 02:13:10.940, Speaker A: So let's save that and jump back. Okay, so to me that looks a lot better. So I'm going to actually just show you the difference here. If I right click and inspect and I'm going to select, I'll actually show you the difference with white smoke as well while I'm here. So you can see that's white and that's white smoke. White smoke. So I think it's a little easier on the eyes.
02:13:10.940 - 02:14:00.094, Speaker A: And now I'm going to use the selector and I'm going to select our h one and I'm going to turn off letter spacing so you can see everything's kind of crammed together and with the five pixel letter spacing it looks a little bit better. Okay, so the next thing is we're going to integrate our loader into our project. So we're going to jump back into our HTML and below our title here we're going to comment out another title for our loader and we're going to create a div with a class and id of loader. So division loader, hashtag loader. And I'm going to press enter. So you see it created our div for us. And then inside of this I'm going to create an image element.
02:14:00.094 - 02:14:39.060, Speaker A: So image press enter and the source is going to be, you can see as soon as I typed l it's autocompleting because it's telling that this file is in the same folder. Just press enter, have it autocomplete and for our alt property we will type in loading. Okay. So we can save that and check it out. And yeah, we have our icon within our project now, but we're going to need to do a little bit of styling. So we want to have an opaque background. So a background that you can kind of see through but it kind of blocks everything out on the entire page.
02:14:39.060 - 02:15:25.654, Speaker A: And we want to center this loading icon in the vertical and horizontal center of the page. So let's jump back to our css and start taking care of that. Okay, so below our h one here, we will comment out a title for our loader. And we will start with the class loader. And we're going to make it position fixed so we don't want it to move even if the user is scrolling on the page. And we're going to use a little trick here to make it extend over the entire page. So we're going to use top, bottom, left and right are all going to be zero.
02:15:25.654 - 02:15:45.730, Speaker A: So they're all pulling from their own respective corners. And then lastly we're going to add a background RGB a. So we're including an alpha value. In this case it's going to be white. So 255, 255, 255. And then I'm going to control the opacity. I'm going to make it 0.8.
02:15:45.730 - 02:16:13.480, Speaker A: Okay, add the semicolon there and let's save that and check it out. Okay. So we can see that our opacity is working and we can actually see that our loader has switched positions here. It was a little lower down before so we're part of the way there. The next part is going to be to actually center the loader right in the middle here. So let's do that. Jump back to our CSS.
02:16:13.480 - 02:17:06.116, Speaker A: In this case we're actually going to be targeting loader image. So that means we're targeting an image that is a child of the class loader. So we also want position fixed because we want it to stay in the center even if someone is scrolling. And then the trick here is for making this work is we're going to give it a top of 50%. So 50% from the top and then 50% from the left and then transform translate and then -50% comma -50% so that's the x and Y axis. So I'm going to save that and then show you in the dev tools why we're doing it this way. So save that and jump back so you can see that it is in fact working.
02:17:06.116 - 02:17:36.933, Speaker A: That's exactly what we want. It's in the center. But if we open up our devtools, I'll give a little bit more of an explanation. So if we scroll up here we can see that we have our loader. I want to actually select the image part. So we just click on it with our selector here. And if I were to remove this transform translate, you can see that the top left worked, but the top left is actually the top left of the picture is in the center.
02:17:36.933 - 02:18:22.892, Speaker A: But we want this whole thing to be centered regardless of the size of this. So that is how this transform translate is accounting for centering the image within the center of the page. So that's what we've done here. Okay, that's pretty much it for our loader and we're going to come back to it later in our JavaScript when we actually want to introduce it. But for now, while we're building out the rest of our styling for our page, we're actually going to keep it hidden so we can do this very easily in our HTML. And we're just going to within this div type hidden to provide the hidden attribute. And we can save that and check it out.
02:18:22.892 - 02:19:06.896, Speaker A: And you can see that our loader is gone and the background is gone as well. All right, I think we've done enough setup for one video. In the next one, we're going to look at how we're going to style our image grid with a test image in order to perfect that part of the design. I'll see you in that one. Bye for now. Okay, so to start with, we're going to go over to the Unsplash website, unsplash.com dot.
02:19:06.896 - 02:19:48.420, Speaker A: This is a website I've been using for a few years. It's a great source for royalty free images that you can use in your projects. I'm going to select the nature category and I'm going to scroll down and I'm just going to pick any picture that I like. This one's pretty good. And I click on it and it doesn't really matter the image because I'm just using it for testing purposes. I'm going to right click and copy the image address and that's pretty much it for unsplash. Let's jump back to our code and below our loader here we're going to comment out another title for our image container.
02:19:48.420 - 02:20:34.346, Speaker A: And inside of this we're going to create a div with the class image container as well as the iD image dash container, press enter. And then inside of that we're going to create another image element, press entertainment. And we can paste in what we have there into our source. And we're not going to worry about the alt because we're actually going to be deleting this image. But we do want to copy it twice because we want to actually show something kind of similar to a column of images. So let's save that and jump over, check it out. Okay.
02:20:34.346 - 02:21:19.700, Speaker A: So we can see that that's okay, but it's a little wide. We definitely don't want it to be wider than the page. So we're going to need to do some styling on this. This is going to be pretty straightforward because we've chosen to use a container element for our images so we can style that. So we'll jump back and below our loader here we can comment out a title for our image container and we'll scroll down a bit. And our dot image container class here, we're going to start by just adding in a margin of ten pixels. And that's going to be for the top and bottom.
02:21:19.700 - 02:21:48.648, Speaker A: And then for the left and right we want 30%. So that means in total we'll have 60% margin and 40% image. Below that we're going to type out our image container class again. And similar to our loader image, we're going to target the image element that is a child of the image container class. And then within that we're just going to type in with 100%. So let's save that and check it out. And.
02:21:48.648 - 02:22:20.090, Speaker A: Okay, that looks a lot better. So the one other thing I guess I would like to tweak is I'd like a little bit more of a gap between our images. So let's jump back and we can simply add a, a margin top of five pixels to our image within our image container. Save that jump back. Okay, that looks great. So you can see what I was talking about before. My title is centered evenly between the top of the page and the image below.
02:22:20.090 - 02:23:06.778, Speaker A: To do that in your project, you might need to adjust the margin top and bottom a little bit. Okay, so one last thing to consider is how it looks on a mobile device. So let's right click open up our dev tools and we can click this toggle device toolbar to show our mobile view. This is for our, if we widen this a little bit for our pixel two xl, which is the default that I like to use, let's fit to window. So we're just going to show the entire screen of the phone and we can move this a little bit more so we can actually kind of see what's going on. Okay, so let's use the element selector. The first thing we're going to want to change is our font size because we want this all to be on one line.
02:23:06.778 - 02:23:37.394, Speaker A: You can see we have our font size 40 pixels. So we can click on this and we can actually just use the down key to lower the size. And I'm going to lower it just a little bit extra to 20 pixels. Okay, I think that that's good. And the other problem is now we don't want 60% of the page to be margin, we want much less of a margin. So to change that we can highlight our image container here. Okay, we have our image, let's scroll up.
02:23:37.394 - 02:24:24.048, Speaker A: We want our image container and we can simply just remove this 30% and then that'll make ten pixels all the way around. And that looks perfect. So let's jump back into our code and use a media query and apply these changes. So below this we're going to comment out a title for media query for large smartphone. And inside of this we'll make our actual media query screen and bracket max dash width. And the standard is 600 pixels. So that means anything less than 600 pixels.
02:24:24.048 - 02:24:53.494, Speaker A: We'll apply this styling. We're going to change our h one font size to be 20 pixels and below that we will change our image container. You can see it autocompletes there to just margin of ten pixels only. Okay, so let's save that and jump back. Okay, that looks great on mobile. Let's just go back to desktop and make sure. Yep.
02:24:53.494 - 02:25:29.432, Speaker A: So you can see our font got bigger and we have our margin still on desktop. Very nice. Now we're finally ready to start looking at the functionality of our project, starting with setting up our connection to the unsplash API. So we'll do that in the next one. We'll see you there. Bye for now. Alrighty.
02:25:29.432 - 02:26:02.590, Speaker A: Welcome back. So we're going to get started with the functionality of our project and that's going to involve us setting up using the Unsplash API. This is going to allow us to return high quality random images that will allow us to showcase our infinite scroll functionality. So we're going to go over to unsplash.com documentation. I'll provide the link within the course. And we can see here that we're wanting to set up an application so we can click that jump to the documentation.
02:26:02.590 - 02:26:27.354, Speaker A: And the first thing it's telling us to do is we're going to need to join. So let's click on that. And you have the option of joining with Facebook or you can just log in with your information. I already have an account, so I'm just going to log in. Okay. So once you log in, you'll be at a page like this. It's the your apps page.
02:26:27.354 - 02:26:55.088, Speaker A: I we're going to come back to this in a few minutes. Let's just jump back to the documentation and learn some more about it. So if we scroll down here, let's start looking at our schema. So you can see that this is the location for the server, the API that's running. The responses are set as JSON. That's great. If we scroll down we can learn a little bit more about it.
02:26:55.088 - 02:27:35.880, Speaker A: So there's different kinds of requests. We're just going to have a get request which we're going to use our fetch API for. And if we go down authorization. So we're going to need an API key it looks like, and we're going to need to pass that. You can see in this second example here that we can pass our client id as a query string parameter. So you can see that's denoted with the question mark here and we have the same base of our API and then we can see photos. So let's actually copy this line here and we're going to start building this out within the code as we go along.
02:27:35.880 - 02:28:40.710, Speaker A: So let's copy that, jump back to the code, comment out a title here and we're going to create a constant API URL equals and we're going to make a template string because we're going to populate this later with some variables. But for now let's just paste this in here. Okay, and let's jump back to the documentation and see what else we need. So if we scroll down on the left here, we're looking to get a random photo. Okay, so you can see we have handy link here. So to retrieve a single random photo we're going to need to pass after our photos we're going to pass random within our API URL and we can see that we have some different parameters here. So you can actually filter random photos by different collections or even different users.
02:28:40.710 - 02:29:27.842, Speaker A: Or you can actually do like a search or if you only want landscape or portrait or square photos you can filter that way as well. For our purposes, the main thing that we're going to filter is the count because we want to switch to the maximum of 30 rather than the default of one in your own application. Feel free to change up these query parameters and even display different information if you want to. But let's finalize our API URL. So we're going to need to add random and we're also going to need to add count as a parameter in our query string. So let's jump back and do that. So after photos we're going to put in random and then a slash.
02:29:27.842 - 02:30:30.788, Speaker A: Let's use alt z so we can actually see everything we're doing here. We're going to word wrap that and after our client id we can and count equals. And then this time we're actually going to make a constant for our count so that we can change it more easily. So const count equals in this case we'll start out with ten, we'll change it later and we'll also do the same thing for our API key. We're going to make a constant for that and for right now we're just going to leave it blank because we don't have one yet, but we're going to pass it into our template string here. So we're going to use dollar sign and then curly brackets and then we're just going to pass in our count and we're going to do the same thing for our API key and dollar sign, curly brackets, curly bracket, and then our API key. Press enter.
02:30:30.788 - 02:31:13.540, Speaker A: Okay, so that's populated there. We can save that for now. So let's actually jump back to the Unsplash website and get our API key. Okay, so when we logged in, it automatically showed us to the your apps page. You can see that I already have an app here, but if I didn't I would click on new application. And you can see that it has some terms and conditions and you're going to have to agree to these conditions and accept the terms. And then you can name your application, name of application.
02:31:13.540 - 02:31:45.010, Speaker A: And then just a description, description here. And then you're going to create your application. Okay, so we can see our name of application here. This is our demo project. If we scroll down we can see the guidelines for applying to become a production project. The main difference is that a production project can make 5000 requests per hour, but you need to adhere to very specific criteria for our purposes. We'll just leave it as a demo for now.
02:31:45.010 - 02:32:26.140, Speaker A: And if you go down, you can see our requests and usage. So in demo mode we can only get 50 requests per hour. So that's something to keep in mind during development. If it stops working, it will return an error saying that you've reached your limit for requests. And if we scroll down a little bit more, we can see that our API key is right here. So I will let you copy your public API key and once you've done that, we'll copy that back into the code. In my case, I'm just going to put a placeholder here, but for you, make sure that you actually put in your API key.
02:32:26.140 - 02:33:49.024, Speaker A: The next thing we're going to do is actually set up a fetch request so that we can see what data is returned from the API. So below this we're going to turn off word wrap first, alt z and we're going to comment out a title for our function. We're going to say what it's going to do, which is get photos from unsplash API and we're going to create another async function called get photos. And inside of this we're going to use the same try catch statement that we've been using and we'll fill out our catch as well. And we'll just comment out title here, catch error here. And for our try function we are going to create a constant for our response which is going to await the response from our fetch request which is going to fetch from our API URL that we've set above. And we'll set a constant data to await the response JSON.
02:33:49.024 - 02:34:31.732, Speaker A: So the response will run through the JSON method and be returned as JSON. And then we'll console log that data. And the one last thing we'll need to do is make sure we're actually running that function so on load and we're going to get photos. Okay, so let's save that and see what we get in our browser. Okay, so back in the browser we're going to right click and inspect to open up our dev tools again. You can see we have three dots here. I'm actually going to use this to undock our dev tools into a separate window just so it's a little bit easier to see.
02:34:31.732 - 02:35:02.920, Speaker A: And right now we're just looking at the data so it has nothing to do with the page. I'm going to go to the network tab specifically and I'm going to hit command r or whatever it tells you to hit here. If you're using windows, it'd probably be shift r. So I'm going to press that to reload the page. And we can see that we have all of our network responses here. You can see we have our fetch request here. So I'm going to click on that and we can actually see that we have a preview of our response here.
02:35:02.920 - 02:35:24.080, Speaker A: We have ten results. So that's perfect. Our count is working. It ends at nine because this is zero index, but there are still ten items here. Great. So if we actually click on one of the items we can see what is being returned. So the things that stand out to me are the alt description.
02:35:24.080 - 02:35:59.654, Speaker A: We can use that as a title or we can use that for the alt element of our image. You can see it has other things like the main color when it was created and even the camera make and model. In this case the information isn't there. And if we go down a little bit further we have links. So this is a nested property. So to access we would type links dot and then whatever we want. In this case we want the links HTML because that will give us a link back to the Unsplash website.
02:35:59.654 - 02:36:30.700, Speaker A: So you can check out more of the author's work or any other functionality of the Unsplash website. And let's see what else. Sometimes there's even a location as well. And if we check out URL's, we can see that this is actually where the image is located. So we're going to use this as the source attribute for our image element. I'm going to go with regular just to keep it medium size. We don't want necessarily the full size because that'll be a lot bigger of a file size.
02:36:30.700 - 02:37:21.690, Speaker A: But in your own projects you can decide which of these fields you want to use. So let's say hypothetically, if you wanted to create something that showed all the cameras that are used to take all the pictures, you can use the information in this part of the data to show that. So it's up to you how you use this data. But as I said, for our purposes we're going to use our alt description here, we're going to use the HTML link here, and we're going to use the regular URL. Okay, so we accomplish what we wanted to with this video, which is to actually return the data in the next one. We're actually going to create an element for each of these image objects and pass in the relevant data. All right, I'll see you in that one.
02:37:21.690 - 02:38:20.180, Speaker A: Bye for now. Alrighty. Welcome back. So now that we've hooked up our unsplash API, I thought it was a good opportunity to visually go over what we've done so far as well as what we're looking to accomplish in this video. I will also provide a copy of this diagram within the course. So what we've done so far is we have our get photos method using our fetch request with the parameter of our API URL, which we built to include our API key. And we're contacting the unsplash server and that is returning a response that we set to a constant of data.
02:38:20.180 - 02:39:29.970, Speaker A: Now, looking ahead, we're actually going to change that up a little bit. So we're going to have a global variable called photos array and we're going to pass the data into that photos array and within our display photos method we will also call that photos array and we will use the foreach method on it to run a function for every element within the array and we will use that to create our HTML elements for each object. So there are many properties being returned in each of the objects, but these are the three that we are going to use for our purposes. You can see that we're starting with an anchor element that is wrapping an image element. The anchor element is pointed to the links HTML. So that means when the user clicks on the image, it will take them to that image. On the Unsplash website, the image itself is having its source dictated by the regular URL.
02:39:29.970 - 02:40:13.580, Speaker A: So you could use a bigger file if you wanted. And we're also populating the alt and title attributes with the alt description. When a user hovers over the image, they will see the description. So that's what we're looking to accomplish in this video. Let's jump into the code and get started. Okay, so first we're going to start by creating a few constants at the very top. So we're going to create first our image container and that will be equal to document getelementbyid and image dash container.
02:40:13.580 - 02:40:54.610, Speaker A: And we'll also have one for our loader while we're at it. But we're not going to use our loader for a little while. Okay. And below that we're going to create our photos array as our global variable. This time we're going to use a let instead of a constant because the value within our photos array is going to change every time we make a request. So that is going to be equal to square brackets, meaning an empty array. So let's now jump into our getphotos function and we're going to get rid of our data here.
02:40:54.610 - 02:41:28.420, Speaker A: And instead of using const data, as I said, we will just type in photos array. You can see it autocompletes if I press enter there. And actually below that we'll have a console log just to make sure that we're getting our photos array being populated properly. Okay, so let's save that and check it out. Okay, so we can see that we have ten items here and yeah, it's working. We're console logging our photo array. Perfect.
02:41:28.420 - 02:42:23.980, Speaker A: So we can start building our second function now. So back in the code within our getphotos method we can remove our console log and instead we're going to call our function display photos. We haven't made it yet, but let's make that now. So we're going to make that above our getphotos function. Let's start by commenting out a title with the intended functionality. So we're going to create elements for links and photos and we're going to add that to the domenna so function display photos. Okay, so within our display photos method, we're going to comment out a title for our foreach method.
02:42:23.980 - 02:43:18.760, Speaker A: And so we're going to use our photos array foreach bracket and then another bracket we're going to pass in our variable name. So that means that each object is going to be assigned to the photo variable. As we are running through our foreach method. We're going to create an arrow function and then our curly brackets and then enter and we'll put the semicolon there as well. And now we can actually go about creating our elements with what we had in our photos array. So for example, this is the first one of the elements within our photo array. You can see that we want our alt description and we want our links HTML and we want our URL's regular.
02:43:18.760 - 02:44:20.930, Speaker A: So let's jump back and take care of that. So first thing we're going to comment out a title to explain exactly what we're doing, which is we're creating an anchor element to link to unsplash and we're going to make a constant item which is going to equal document createelement. And in brackets we're going to put single quotes and then a so that's just going to create a blank anchor element. Then we're going to need to set some attributes on this item. So we're going to do item set, attribute bracket, single quote and we're setting the href attribute comma and then we're going to provide what we're going to actually set it with. So in this case photo links HTML and we're also going to want this to open in a new window. So we're going to set another attribute.
02:44:20.930 - 02:45:04.470, Speaker A: This time we're referring to the target comma and then single quotes. Again we're going to pass in a string blank and that will open it in a new tab. Okay, so that's it for our item. Next we're going to do a similar process for our image. So we're going to comment out a title, create image for photo, and we're going to set a constant called IMG for image, same thing, document createelement. And we're going to this time use an image. Then we're going to set some attributes again.
02:45:04.470 - 02:46:30.944, Speaker A: This time we need to start with the source because that's what's actually going to load the image and we're going to use photo URL's regular. Then the next attribute is going to be our alt attribute, which is going to be photo dot alt description. We can actually copy this because it's going to be similar and we're going to paste that and we're just going to change alt here to be our title attribute. And the very last thing we're going to need to do is we'll comment out a title for it is we're going to put the image inside the anchor element like we had in our diagram and then we're going to put both inside of our image container element. So in order to do that, we're going to start with our item, which is going to be the parent of our image and we're going to append child. So we're going to add a child and that is going to be our image constant and we'll do a similar thing this time the image container is the parent and we're going to append the child that is the item. So that's pretty much it for that functionality.
02:46:30.944 - 02:47:05.174, Speaker A: What's going to happen is for each item in this array, we're going to run through this every single time and we're going to create an item, we're going to create an image, we're going to put our image into our item and then we're going to put our item into our image container. Let's save that and check it out. Okay, so we can see that's a little weird. Looks like we have our same three images but we scroll down. Oh, we have our other images. It's working. We're actually loading our other images from unsplash and you can see if we hold over it.
02:47:05.174 - 02:47:31.370, Speaker A: We can see we have our title here with our description. That's amazing. So the one thing we'll need to do is actually delete the placeholder images we had. So let's jump back to our HTML and do that. So we're going to delete all these because we're going to populate this entire image container dynamically in our JavaScript. So let's save that and jump back. Okay, amazing.
02:47:31.370 - 02:48:02.720, Speaker A: We have our unsplash images loaded. We have our description as you can see, and if we actually click on it, it takes us to the unsplash website. You can see the user that created the image and we have some options to download the image. And that is amazing. That's exactly the functionality that we wanted. But I think we can make the implementation a little bit better. So back in the code we can actually improve our set attributes here.
02:48:02.720 - 02:49:01.522, Speaker A: An important tenet of modern development is creating dry code. So dry stands for don't repeat yourself. So in this case, instead of repeatedly typing out the set attribute method, we can actually create a helper function that will do this for us. So we can create it above our display photos function. We'll start by commenting out a title, and we're going to name the function setattributes with an s, and we're going to pass in two parameters. One is going to be the element and the other is going to be the attributes, and we're going to use a for in loop to loop through for each of the attributes we want to set. We're going to start by assigning the key constant.
02:49:01.522 - 02:50:22.510, Speaker A: So that's going to be the ahref, target source alt title in attributes, which is going to be an object containing both the key and the value we actually want to set. And we're going to pass in the elements that'll be our item or our image. And then we're going to run the regular set attribute method, and we're going to pass in the key as well as the attribute with the index of that specific key. So we'll need to actually make some changes within our display photos method as well. So we can comment out this for now, and we'll comment out this for now. And instead what we're going to do is we're going to call our setattributes function that we just made. We're going to pass in item first, then comma, then Curly brackets to create our object, add the semicolon before we forget, and we're going to have href as our first key, and then we're going to have the same thing we had above, which is photo links, HTML comma, and then the target will be our next key.
02:50:22.510 - 02:51:24.128, Speaker A: And again we're going to pass in the same thing, underscore blank, and then another comma. And we can remove this now and we'll do the same thing below for our image. So again, call set attributes, pass in image as our element, comma, curly brackets for our object, add the semicolons, and this time we are having our source as our first key. And then photo URLs, regular comma, alt and photo alt, underscore description comma. And then we'll copy this again and paste it below, and we'll just change our alt to our title. And we can remove this now and we can save it and see if it works. Okay, so you can see that we have some new images here.
02:51:24.128 - 02:51:43.280, Speaker A: It's working perfectly. That is excellent. And we can see here that our code is no longer repeating itself. Perfect. So the next step in the next video will be looking at actually adding our infinite scroll functionality. I'll see you in that one. Bye for now.
02:51:43.280 - 02:53:08.220, Speaker A: Okay, so now that we have our unsplash photos being loaded in our dom the next step is to figure out our infinite scroll functionality. So what we want to happen exactly is as we scroll before we reach the bottom of our page we want an event to trigger our getphotos method so that the pictures load below before we have a chance to scroll past them. In this case of course we're reaching the bottom of the page because we haven't implemented that just yet. So a good first place to start is with this w three schools resource which I'll provide a link in the course and we're going to look at the possible Dom events within HTML if we scroll down. The most popular event of course is a click event but in our case we are looking for the scroll event. So right here we can see that the scroll event is an event that occurs when an element scroll bar is being scrolled. This means that we can apply this scroll event to any element.
02:53:08.220 - 02:54:16.636, Speaker A: So we're going to go to the bottom of our JavaScript here and we're going to comment out a title and then we're actually going to add the event listener to our window. So the window is the parent of the document and the grandparent of our body. So we're going to the highest possible level and we're going to add event listener. And then in our brackets single quotes we want to target the scroll event. And then what we want to do on that scroll event, we're actually going to make an arrow function and we're going to create our function actually within our event listener here. So what we're going to do, nice and simple, is we're just going to console log scrolled so that we can have an idea of how often this is actually triggered. So let's save that and jump back.
02:54:16.636 - 02:55:00.946, Speaker A: We're going to refresh the page here and we're just going to scroll down until we reach the bottom. Okay, so you can see we've reached the bottom here and we have called this event 43 times. So of course for our purposes we only want to call it once when we get to the bottom of the page. So we're going to need to narrow this down a little bit. So there are multiple ways to implement infinite scroll functionality. I'm going to explain the thinking behind my implementation visually. So to start with, I mentioned earlier that the window is the parent of the document and the grandparent of the body.
02:55:00.946 - 02:55:36.946, Speaker A: That's where our event listener is attached. It represents the entire browser window. So we're going to need two values from our window. The first is going to be window inner height all of these values are in pixels, by the way, and this is going to represent the total height of our browser window. This is a number that is going to stay constant unless the browser window is resized. And the second value we're going to need is window scroll y. And this is the distance from the top of the page that the user has scrolled.
02:55:36.946 - 02:56:13.132, Speaker A: So this is a number that will keep going up as the user scrolls further down the page. We will add these two numbers up on the left side of our if statement and we'll need to compare them to something. So if we move over here, we'll see. We're going to compare it to the height of everything in the body, including what is not within the view. So that'll be the combined height of all of our images in our case. But we can't just have the body offset height. We will actually need to modify it a little bit.
02:56:13.132 - 02:56:59.710, Speaker A: And in this case we're going to subtract a pixel amount. This can be any value, but in this case I'm putting 1000 pixels because most window inner heights are less than 1000 pixels. So that means when the user scrolls to this point, that is when we will trigger our event and load more photos. I will also provide a copy of this diagram within the course so that you can check it for reference in the future. Let's jump back to the code and see how we're actually going to implement this. So within our arrow function, we're going to delete our console log and we're going to replace that with an if statement. Let's actually scroll down a little bit.
02:56:59.710 - 02:57:47.840, Speaker A: If window inner height, that's the height of our browser window plus window scroll y how high we are from the top of the page is greater than or equal to the right side of our if statement, which will be document body offset height. And we're going to subtract 1000 for our 1000 pixels. Okay. And then we'll add in curly brackets. I'm going to copy in a number of console logs just to show what exactly is happening with this logic. Don't worry, you don't need to copy these into your project. I will be deleting them momentarily.
02:57:47.840 - 02:58:22.490, Speaker A: Let's jump back and check it out. So if we scroll to the bottom of the page, let's see what happens. Okay, so you might be noticing a few things. First, we didn't run the function 50 times, but we did run it more than once, which is not great, but we'll come back to that. Let's check out some of the values here. So we can see that our window inner height is 821 and it always stays 821. So that means 821 pixels from here to here.
02:58:22.490 - 02:59:19.770, Speaker A: And we can see that our window scroll y is increasing with each log. And of course our combined value of inner height plus scroll y is also increasing every time. And lastly, we can see that our document body offset height -1000 is staying consistent because once the page has loaded, we have the full height of all the images. So you'll notice that the first time this triggered, this number on the left side, 4386, is bigger than this number on the right side, which is 4261. You'll notice the same thing in all the rest of the console logs. So this is only being triggered once the left side of our if statement becomes a bigger value than the right side of our if statement. So we are definitely getting closer back in our code.
02:59:19.770 - 02:59:53.666, Speaker A: We can get rid of our console logs. If you want to add one that just says load more, that's something you can do. But we will now call our get photos method. So let's save that and just see what happens. So when we scroll to the bottom, we can see that we're triggering this multiple times at once. You can see it jump from three to six and you can see that we've loaded more than we would like. Ideally we want to only load once and then wait until we hit the bottom and then load it again.
02:59:53.666 - 03:00:31.800, Speaker A: But you can see that we've loaded it six times instead. So we're going to need to be getting a little bit more specific in how we're determining when to actually load more photos. In order to do that, we're going to need to create a ready boolean and this will be true only when the images have finished loading. We're going to take a look at that in the next video because that is also deeply tied with our loading functionality where we want to show the loading animation when we first load the page. So we'll tackle that in the next video. I'll see you then. Bye for now.
03:00:31.800 - 03:01:26.504, Speaker A: Alrighty. So our first goal here is to be able to know exactly when all of our images have finished loading after each call. So we're going to go back and look at our Dom events in w three schools and this time we're going to look for a load event. So you can see this event occurs when an object has loaded. If we click on it to have some more information and we scroll down a little bit, we can see that we can add an event listener. So that's what we're going to do. And if we scroll down a little bit more, we can actually see an example here on an image.
03:01:26.504 - 03:02:27.370, Speaker A: So we have an image and when it's loaded it's going to run the load image function and it's just going to pass an alert saying that the image has been loaded. So we're going to implement a similar thing in our project. So let's jump back to the code and within our display photos method right below here, we're going to comment out a title. We're going to target our image constant and we're going to add event, listener and single quotes, load comma. And then the function we're going to run is going to be called image loaded. We haven't made that function yet, so we'll need to scroll up to the top to do that. So let's put it at the very top here, comment out another title, create our function.
03:02:27.370 - 03:03:12.282, Speaker A: And inside we're just going to have a console log for now and we're going to log the string of image loaded. So this is going to run on each individual image. The last thing we're going to do is we're going to change the count from ten to the maximum of 30 and we can save that and check it out. Okay, so let's refresh the page. And we can see that slowly our number went up to 30. So we're loading all of our images and you can see if we refresh again that it's hitting every number along the way. So that proves that our event is working properly.
03:03:12.282 - 03:03:42.080, Speaker A: Next, we're going to need to set a variable for this number as well as a variable for the total amount. So that when we load the total number of images we can set a ready boolean to be true again. So let's jump back to the code at the top of the page. We're going to set these variables. So we'll start with our ready boolean. So let ready equal false. So when the page first loads, we want it to be false.
03:03:42.080 - 03:04:21.236, Speaker A: Let images loaded equals zero. So that was our number ticking up to 30 just now. And we're also going to want to keep track of the total images so that we know when it's done loading everything. Okay, so we can go down now to our image loaded method here. So remember that this function is going to be called for each individual image. And so we can use this to increment our images loaded value, which is starting at zero. And we're going to increase it by one with every individual picture.
03:04:21.236 - 03:05:05.958, Speaker A: That's loaded. To accomplish that, we'll just type images loaded and then plus plus semicolon there. Below that we're going to have an if statement. So if images loaded equals with three equal signs total images, then that means our page is ready and everything has finished loading. So we're going to set our ready boolean to equal true. And we're going to console log ready equals comma and then the actual value of ready. And below that we're actually going to need to set total images because we haven't actually set that number yet other than setting it at zero.
03:05:05.958 - 03:05:39.364, Speaker A: And we'll do that inside of our display photos function. So total images is going to be set to the photos array dot length. So that is a number value for the amount of objects within the array. And below this we will console log total images comma and then the value of total images. So let's save that and check it out. Okay. So we can see that loaded pretty quick.
03:05:39.364 - 03:06:00.756, Speaker A: Let's refresh it and see. Wow, that's fast. But you can see that this number ticked up to 30 very quickly. And then after that we can see that ready now equals true. And we can see here that our total images is 30. So that's awesome. That means that we have our ready boolean working properly.
03:06:00.756 - 03:06:38.876, Speaker A: So now we're going to need to adjust our scrolleventlistener in order to only run if ready is equal to true. So let's jump back and take care of that. We're going to scroll down to the bottom here. And after this 1000 we're going to set an additional condition. So to do that we're going to use two and signs and we're just going to type in ready. So this means that we have to meet this condition of the left side needs to be bigger than the right side. And in addition to that, ready needs to be true.
03:06:38.876 - 03:07:08.232, Speaker A: So we can remove this console log here. And the other thing we're going to do is we're going to set ready to equal false once this runs so that it will only be ready again if our images loaded equals our total images. So it's only going to be set to true right now here. So let's save that and check it out. Okay, let's refresh the page again. Okay, same thing. Everything's true.
03:07:08.232 - 03:07:43.430, Speaker A: Let's scroll now to the bottom. Okay, we can see it's loading again. Perfect. But this time we can see that the ready did not equal to true even though we have 30 images loaded. So just to confirm we're going to scroll to the bottom and nothing's going to happen. Huh? So we've run into a little bit of a problem here. I would challenge you to pause the video and see if you can figure out what the problem is.
03:07:43.430 - 03:08:18.098, Speaker A: I'll give you a hint. It has to do with something used in our image loaded function. Pause here and see if you can figure it out. Okay, welcome back. Let's go through and I'll show you what the problem was in our imageloaded function. At the top here, you can see that we're console logging when each image is loaded. But what we should be logging is actually this image's loaded variable.
03:08:18.098 - 03:08:56.300, Speaker A: So let's do that right below console log images loaded. So we'll get rid of that one, save it, jump back and check that out. So you can see this time that we just have a number here. And then at the bottom we still have our ready equals true. You can see that we have 30 loaded here. So let's scroll to the very bottom and see what happens when we trigger it the next time. So you can see here that instead of going to the number 30, our images loaded is going to the number 60.
03:08:56.300 - 03:09:42.860, Speaker A: So the problem with that is our total images is 30. And so our if statement is asking is images loaded equal to the value of total images. In this case, 60 is not equal to 30. So that is why we are not seeing our ready true again. So this is a relatively simple fix. We just need to go back into our code and in our display photos function we actually just need to reset the value of images loaded to equal zero every single time we are launching our display photos function. So let's save that and check it out so we can refresh the page.
03:09:42.860 - 03:10:12.698, Speaker A: So we have our 30 here, ready equals true. So we'll scroll to the bottom and this time we can see that we're counting back up to 30 instead of 60. Perfect. And our ready equals true again. That is excellent. If we scroll down again, in theory we should be able to load even more images. Okay, excellent.
03:10:12.698 - 03:10:38.960, Speaker A: It loaded again and we can see we have more images here. That is awesome. So we have our core functionality figured out. That is great. There is one last thing to do however, and that is to add back the loading animation. Just for the first time the page loads. We don't want it on subsequent loads because we want to have the illusion that the user is just scrolling forever.
03:10:38.960 - 03:11:20.334, Speaker A: So in order to do this, we're going to go back into our code, into our HTML, and we're going to remove this hidden attribute. Okay, so back in our JavaScript, we're actually going to want to hide the loader in here. But we only want to hide it once our images have loaded for the first time. So below our ready true, we're going to add loader hidden equals true. So we're going to set the hidden attribute on our loader element to true only when our images are loaded. Save that and check it out. Okay, let's just refresh the page so we can see.
03:11:20.334 - 03:11:49.192, Speaker A: We saw our loader spinning there. That's perfect. And we just want to make sure that as we scroll down we are loading more images and we can see. I'm going to keep scrolling. You can see in the console we just loaded some more images and you can see that from a user perspective, it just looks like I'm continuing to scroll and I have no idea that the pictures are all being loaded in the background. That is amazing. So that's it.
03:11:49.192 - 03:12:15.698, Speaker A: Our final functionality is done. One last quick thing to do is I'm just going to go back to the code and clean it up a little bit because in production code we don't want to have console logs everywhere. I'm just going to quickly remove console logs that we had here and we're going to save that again. Jump back. We can close our console, have a look at the desktop version, our loader there. Perfect. All right, so that's pretty much it.
03:12:15.698 - 03:12:23.830, Speaker A: We're done with our infinite scroll project. I hope you had a great time making it and I'll see you in the next one. Bye for now.
03:12:40.900 - 03:13:12.868, Speaker B: All right, guess what I'm gonna say. Yep, that was another great project. Fantastic work. Now, what does it really mean to be a good programmer? Sure, you have to write good code. You have to write code that works, but it also means understanding what you are doing. You're not just coding along without understanding exactly how things work internally, how your code might affect users. So let's think about this.
03:13:12.868 - 03:14:03.186, Speaker B: Let's look at the code that we just wrote. Are there any things that we can do to improve performance? For example, I actually have slowed down my Internet connection and check out what happens when I refresh here now as the images load. All right, we have a bunch of pictures that come up, but it's extremely slow. Right? I am scrolling through this and oh boy, I'm getting bored. I want to switch off from this website because it's taking too long. When we program, when we create websites, you want to think about who is going to view our website and one of the biggest things is performance. Not everybody has good Internet connection and Google actually penalizes you for their SEO ranking.
03:14:03.186 - 03:14:38.140, Speaker B: If your website performance is bad, if the user experience is bad on a website, you're not going to have good SEO. So how can we analyze this? If I open up the developer tools and I go to network, check out what happens. Let's refresh. All right, so now you can see we're getting our photos and one by one they're being downloaded. But you can see here that's taking a long time. Still going, still going, still going. So right now this is taking forever.
03:14:38.140 - 03:15:22.450, Speaker B: So based on that, what can we learn? Well, if you want to improve the performance on a website, only ship the necessary piece that you need. For example, the easiest thing to do here is to just grab one item. So if I save this and refresh, look how much faster that was. Right. Instead of 30 photos and then loading up the page, we now just have one. So what can we do here? Well we can create, let's say for fun, a initial variable. So let's just call it let initial load.
03:15:22.450 - 03:16:33.032, Speaker B: And we're going to say the initial load is set to true. And in here what we'll do is we'll simply say that count is going to equal, let's say five for now. But what we'll do is after the initial load, so let's say that images have been loaded, then we could just simply write initial load is going to equal to false and then we can change count here to equal, let's say 30 now. So when we load our initial page, this whole JavaScript file runs. And then once our images are loaded we're going to set the initial load to false and the count to 30. As a matter of fact, now that I look at it, we don't even need the initial load and the initial load false. I mean we can clean up our code but we don't really need it, right? We only need this count 30.
03:16:33.032 - 03:17:04.920, Speaker B: So count five and count 30. Let's see if that changes anything. If I refreshed, let's open up the developer tools. I refresh, I get 12345. That's it. Just five photos here. And now we're loading 30 at the end.
03:17:04.920 - 03:17:51.026, Speaker B: So you can see here that the domenna content loaded and the load only took 4.62 seconds. Again, just to test this I'm going to refresh again. And you'll see here that yep, we're just loading five photos. But as soon as these images are loaded and I scroll, we now get all the other photos as well. And just like that, we're able to improve the performance of our website. So using your developer tools and understanding what your website does can really, just by simply understanding it, can improve your code or you can make changes to improve your code.
03:17:51.026 - 03:19:02.260, Speaker B: Now, I argue that what I just did here is a little too complicated in the sense that it doesn't make sense or it's hard to understand. I have count to five and then count to 30. What's really happening here? So I can make this code more readable by perhaps changing this variable name to image count or image count to load. Or I can create a different function that checks if this is the initial load and if it's not the initial load, then we want to increase count to 30. So as an exercise, how can you make this code more readable? So that we initially load five photos and then 30 photos and you can share your solution or where you came up with on our discord server. So again, the lesson here is to really understand your code, what it's doing, looking at the performance of it, using the developer tools and seeing what can be fixed. Most of the time when it comes to performance, if you're shipping less code, if you're shipping less data, if you're loading less data, your website's going to perform better.
03:19:02.260 - 03:19:04.600, Speaker B: I'll see you in the next one. Bye bye.
03:19:20.510 - 03:19:56.236, Speaker A: Alrighty. Welcome back. So the application we're going to talk about today is an interesting one and it has a bit of a story behind it. So one day on my smartphone, I noticed when I was watching a video in Google Chrome that when I minimized the window, I had a small picture in picture window on my home screen. I've always been interested in picture in picture. I had a tv about 20 years ago. Yes, I'm old that had that feature and I used it to play video games and watch tv at the same time.
03:19:56.236 - 03:20:30.600, Speaker A: So naturally I was very curious about this. I thought that there must be something cool I can do with this. Fast forward a little bit. And I'm sitting at my desk at work. I have a desk with my back to everyone and people would approach and I wouldn't be able to see them. This was not ideal because usually I'm wearing noise cancelling headphones and I can't hear someone when they're behind me. I thought to myself, if I could pass my webcam feed through picture in picture, then I could always see what's behind me.
03:20:30.600 - 03:21:24.980, Speaker A: It worked well enough, but then I thought, this picture in picture is great. Because I can move it and resize it and it will stay on top of everything, allowing me to essentially have a virtual second screen. I realized that this would be even more useful, so I set out to make a project that did just that. The point of the story is that if you have an idea, try and search and see if you can find technologies you can combine to make a unique solution to your problem. I'll now show you the process I would use for figuring something like this out. So first I'm going to Google picture in picture API. You can see I've already typed this, press enter and I'm going to, I guess, click on the first link I see, see what it has to say.
03:21:24.980 - 03:21:50.950, Speaker A: Being a developer involves a lot of reading, so that's what we're going to do here. So let's scroll down and check it out. Okay, so it's talking about the origins of picture. Picture, it's a small floating window, it stays above others. It's an idea that came from tv. Yes, I'm aware of that. And it looks like it started to be supported in Android eight and later.
03:21:50.950 - 03:22:27.650, Speaker A: And also it is working only in Chrome and edge at the moment. Okay, that's good to know. You can see we have a little chart that actually explicitly says that I would recommend mainly using this app, desktop Chrome. It doesn't quite work on mobile Chrome at the moment, but it might in a future update. So if you check out this article or if you go directly to can I use, you can find more information about compatibility. Okay, so let's scroll down and see how to use it. Okay, so this is using it for video.
03:22:27.650 - 03:23:06.560, Speaker A: We mainly just want to know how to trigger this picture in picture button here. So if we go down a little bit more, let's see if we can find something that jumps out at us. Okay, yeah, that qualifies. So entering picture in picture mode, you can see here in this code example that basically this is what we're going to need to implement. We're going to add an event listener to a button. We're going to have a video element and we're going to run the request picture in picture method so you can see it returns a promise. Okay, perfect.
03:23:06.560 - 03:23:43.910, Speaker A: So I think that that will serve our purposes. What I would normally do, I'm not going to show this part, but I would copy and paste this code. I would try to get it working for myself and if I could get it working great and then I'll continue on. If not, I would search Google for this method and try to find out more information about it and if there are other working examples that I can see. Okay, but we do know, because I made the project, that we got this working. So now we need to look into the screen capture API. So again, we can simply google it.
03:23:43.910 - 03:24:12.298, Speaker A: Screen capture API. And we're going to ignore the ad for now. Well, ads, plural. So the first result that's not an ad is developer Mozilla. So these are the people that make Firefox and they have some excellent documentation. So we're going to click on that one. So before we get into this, we can see up here that there are other web APIs.
03:24:12.298 - 03:25:02.784, Speaker A: So if we open this up and we can see this is a list of all the APIs that are available on Firefox. So these are ones that are kind of supported by multiple browsers. The two most important ones, in my opinion are the Dom. So manipulating the elements in our HTML and the fetch API, which is something that we use to get data from another rest API, another source, and that's used quite a lot. We're going to also touch on a couple of these other APIs within other projects throughout the course. Just wanted to show you that, and if you see anything here that's interesting to you, definitely click on it, read about it, see what kind of projects you can make with it. Okay, so back to our screen capture API.
03:25:02.784 - 03:25:44.340, Speaker A: Let's have a look at this. So if we scroll down here, we're going to read about the concepts and usage. So the screen capture API is relatively simple to use. Its sole method is Mediadevices getdisplaymedia, whose job it is to ask the user to select a screen or portion of a screen to capture in the form of a media stream. So to start capturing video from the screen, you call get display media on the instance of media navigator media devices. So you can see here that we have an example right here. And so basically this is what we're going to be using in our project.
03:25:44.340 - 03:26:24.730, Speaker A: We don't need to pass in any parameters, but other than that, that's exactly what we're going to use. This was a pretty straightforward process. Obviously it isn't always, but this is an example of how I would just go about searching and reading a and trying to see if I can get it to work. Alright, so now let's have a look at the project in action. So I'm actually going to go to another window and I'm going to go to YouTube and I'm just going to search for a fireplace video. Okay, there's already one here. So let's click on that and we can see we have our video running here.
03:26:24.730 - 03:27:11.746, Speaker A: I'm going to go into full screen and then I'm going to go back over to our other full screen chrome window and I'm going to refresh the project here. So you see, from our get display media method in our screen capture, it's prompting us to select what we want to use. You can see that I have multiple screens here, but if you only have one screen, you can still use this. You can even get more specific and target an application window, or you can get even more specific and target a chrome tab. So in this case, we want to share our fireplace. So we're going to click share and then it's going to jump back over to the screen that we're sharing. We can jump back to our project.
03:27:11.746 - 03:27:46.204, Speaker A: You can see it's giving us notification that we're sharing and we can press start. And we've initiated our picture in picture. We can resize it, we can move it and it will always stay on top. So if I want to do some more reading, I can jump back and do that. You could also use it for a code tutorial video here and be working on the code in the background. I think that's really cool. So let's jump into the project and see how to make it.
03:27:46.204 - 03:28:27.182, Speaker A: I'll see you in the next one. Bye for now. Alrighty. So we're going to start this project the way that we start most projects. We're going to right click on our template folder and duplicate it. And then we're going to rename it picture Dash in dash picture. Okay.
03:28:27.182 - 03:28:59.336, Speaker A: And we're going to open that up in visual studio code. Okay. And now that we've opened up the folder, we're going to open up each of the files that we're going to modify and we're going to start with our index HTML. So the very first thing, we're going to change the title to be picture in picture. And in this case, I'm going to use word wrap alt z. And I'm actually going to delete this font awesome link because we actually don't need font awesome in this project. Okay.
03:28:59.336 - 03:29:39.760, Speaker A: And I'm going to hit alt z again to undo my word wrap. And I'm going to save that. And this blue bar at the bottom is our live server which will allow us to run our project. So you can see there's nothing there. It's totally blank. But our title has changed, so that proves that it is working alright, back in the code we're going to start by modifying our HTML which will be pretty straightforward. So first thing we're going to do is we're going to comment out a title which is command question mark or control question mark depending on if you're windows or Mac.
03:29:39.760 - 03:30:28.560, Speaker A: And we're going to comment out a title for video. Next we're going to use the Emmet abbreviations built into visual studio code to make our video element hashtag with the id video. So hashtag allows you to assign an id to an element and we'll press enter there. So you can see we have our element created nice and easily. We actually don't need the source for now. We're going to update the source later on. But in this video we also will want to add controls and we're going to set a height equals 360 pixels and a width that equals 640 pixels.
03:30:28.560 - 03:31:02.360, Speaker A: And for now we're actually going to make it hidden as well. That will become clear later on. On the next line we're going to comment out a title for our button and we're going to make a div with the class button container. So to do this we actually don't even need to write div. We can just write period to denote a class and then type in our class name button container. And then we can press entertain. So you see it created a div element with the class button container.
03:31:02.360 - 03:31:34.038, Speaker A: Quick and easy. Inside that we're going to make a button element with the hashtag here to denote the id of also button. Okay, so we made that. And then inside of that we're just going to type start in capital Letters. And believe it or not, that is it for our HTML. So we can save that and go over to our browser. You can see it's not much to look at, it's just a simple button here.
03:31:34.038 - 03:32:01.436, Speaker A: But we'll get to a little bit of the styling right now. So first we're going to go over to Google fonts. You'll notice that the favicon here is blue. This is actually the new version of their site, but I prefer the classic version. So I'm going to return to classic site and you can see that the favicon is now orange. So if it's orange you're on the same one as me. So you can go through and look at the fonts and choose whatever font you would like.
03:32:01.436 - 03:32:33.442, Speaker A: But I have one in mind and that is called Barlow. So I'm going to just search for that and you can see it's this first option here I'm going to click the plus sign to select the font. And then I'm going to go down here where it says family selected. I'm going to click on it. I want to embed it, but specifically I'm going to actually import it into my CSS. So I'm just going to copy this here. Copy and I can close this now and go back to the code.
03:32:33.442 - 03:33:04.496, Speaker A: And in our css we're going to paste this at the top of our style sheet. Okay, cool. Now we can start styling our body a little bit of so below our HTML. I'm going to type body curly bracket here. And first thing we're going to give it a margin of zero. By default, every body has like a ten pixel margin that is basically ten pixels of white space. So we want to avoid that.
03:33:04.496 - 03:33:41.708, Speaker A: We want to give it a height of 100 vh, which stands for viewport heightendem. Viewport height is a measure of the height of the window that we are currently using. So for this purposes, we want the height of the body to at least be the entire height of the screen that we're using. Even if we change the size of the screen. Next we're going to add flexbox with display flex. We're going to justify content. You can see that that auto completed for me.
03:33:41.708 - 03:34:05.224, Speaker A: And center, I'm going to press enter. That will justify on the horizontal access. And then we're also going to do align items, align dash items that also autocompleted. And we're also going to do center as well. I'm going to press enter again. And the last thing we're going to do is we're going to add a background color. So I have one picked out.
03:34:05.224 - 03:34:20.580, Speaker A: You can use whatever you want. And I'm going to do RGB and my value will be 37. 37. 37. And that is a dark gray. Alright. So we can save that and check it out.
03:34:20.580 - 03:34:57.712, Speaker A: Okay, so you can see that that's a little bit of an improvement. We have a nice gray background and we can see that our button is centered both vertically and horizontally. And our background is taking up the entire screen. Perfect. Okay, so in the next video I'm going to show you how to make it look like that real button that I showed you in the introduction. However, if you're not interested in the styling, you can skip to the next video after that if you want to just work on the functionality. All right, well, I'll see you in the next one.
03:34:57.712 - 03:35:34.406, Speaker A: Bye for now. Alrighty. Welcome back. So you can see that I've changed up my layout just a little bit. This is to make it easier to see the style changes as I'm making them. So in order to do that I'm going to actually enable an awesome feature of visual studio code which is autosave. It will automatically save as you're typing.
03:35:34.406 - 03:36:15.960, Speaker A: This is really handy when it comes to CSS, but you might not want to leave it on when you're doing JavaScript work, especially if you're making multiple calls to an API. So we can turn that on for now. And I'm just going to scroll down a bit in my css and we're going to start by styling our button container. So button container and our curly brackets. The first thing we're going to add is a border. Two pixels solid black. Okay, so you might be able to see that it's kind of small, but we're going to add some padding, ten pixels.
03:36:15.960 - 03:36:58.020, Speaker A: That'll make it a little bit more obvious. So you can see the border now and we're going to give it a border radius of seven pixels to make it look more modern. I find that rounded corners on everything makes it look more modern. Okay, so that looks pretty good, but we want to give it a 3d effect. So we're going to accomplish this with the box shadow property. So you can see once I start typing that it will autocomplete if I press entertain first, we are actually going to add inset. That means that the shadow is going to be on the inside of the object rather than on the outside if you had left it blank.
03:36:58.020 - 03:37:22.930, Speaker A: Next we have five values to fill out. The first one is the horizontal offset. In this case it's going to be zero. We only want the shadow to be up and down. The vertical offset will be 20 pixels. So you can see now we have some darkness happening above our start button. Next is the blur, how solid or not solid the color is.
03:37:22.930 - 03:37:52.098, Speaker A: So this is going to add just a little bit of a blur. If you had nothing there, it would just be a solid color. Next is going to be spread. This is how far out the shadow spreads. If it has a negative value it will actually reduce the spread. So in this case we're going to put negative 19 pixels and we're going to see that it mostly went away, but you can see it a little bit there at the top still. Next we're going to add the last one which is the color.
03:37:52.098 - 03:38:25.180, Speaker A: So we're going to use an RGBa value. This is red, green, blue and alpha, which is another way of saying opacity, we're going to use white. So 255 comma, 255 comma, 255. And then we're going to set our opacity, which is going to be 0.7. Okay, so that looks a lot better already. We can see that the button container kind of already looks 3d. All right, now next, let's get on to actually styling the button itself.
03:38:25.180 - 03:38:55.510, Speaker A: Scroll down a little bit here. So there's quite a few things we're going to need to change for our button. Let's get started by typing button curly brackets and jump inside of. So the first two things are things that I would recommend putting on any button. So the first is cursor pointer. You can see that when we just type cu, it comes up with the suggestion of cursor pointer. We can actually just press tab twice to add it.
03:38:55.510 - 03:39:39.506, Speaker A: So what this does is when we click in our browser now when we hover over the button, it changes to a hand. So by default it actually doesn't do that, even though that's something you might expect on any button on any website. The next thing we're going to add is an outline of none. So normally when you click on a button, it'll give a blue outline if it had been clicked. So we're preventing that with outline none. Next, for this specific button, we're going to start by setting the width, which will be 120 pixels and then the height, which will be 75 pixels. Next, we're going to assign the font family.
03:39:39.506 - 03:40:18.890, Speaker A: So I didn't assign it to the body because in order to change a buttons font family, you need to explicitly type it in the button itself. So you can see now our font has changed a bit, but it's a little small. Let's change the font size to 25 pixels. Okay, that's looking better. And we actually want our text to be white because we're going to make our button gray. That's a lot harder to see. So to combat that, we're actually going to add a text shadow, which is similar to our box shadow property.
03:40:18.890 - 03:41:06.570, Speaker A: And we're going to pass in again zero on the horizontal, two pixels on the vertical, five pixels for our blur. And we're going to have a color of just black. So you can see that it kind of raises it up off the page a bit as well, which is a nice side effect of the text shadow. Okay, so let's scroll down a little bit more. Next we're going to be adding the background color to the button. We're going to accomplish this with the background property and we're going to give it a linear gradient so you can see again, if we press enter it'll auto complete that for us. And we're going to have it go in a certain direction first.
03:41:06.570 - 03:41:50.240, Speaker A: So to the top, then we're going to put a comma, then we're going to put in our two colors. So the bottom color first and then to the top color. So the first one is going to be hashtag 696969 which is a gray color. And then it's going to go to a slightly darker gray separated by a comma here and then hashtag 575757. Okay, so that's looking pretty good. Next we're going to want to change our border color. So instead of that white we're going to want a black border, same as before in our button container, two pixel solid black.
03:41:50.240 - 03:42:34.770, Speaker A: And we are also going to do the same border radius of seven pixels as well. Okay, so again, that's looking a lot better. But the magic of the 3d comes in again with our box shadow. So this time we're actually going to be using two box shadows at once separated by a comma. So the first one is actually going to be the same that we use in our button container. So I'm going to use alt z for our word wrap here so I can copy this whole thing. So we're going to copy this and we're going to paste this here.
03:42:34.770 - 03:43:10.834, Speaker A: And this time we're going to actually change the opacity to be a little bit less. So instead of 0.7 it's going to be 0.4, it's a little more subtle. And then comma. Now we're going to do our next box shadow which is actually going to be on the outside of the button, this time on the bottom. So zero for our horizontal offset again and then twelve pixels for our vertical offset, twelve pixels for our blur and then zero pixels for our spread.
03:43:10.834 - 03:43:43.818, Speaker A: And then we're going to change the color RGBA. And this time we're going to use black. So zero comma zero comma zero. And then this time our opacity is going to be 0.3. Okay, so you can see that we have a nice little shadow going on here. The reason that we need to have a box shadow on the bottom is because when our button is active we can cut these numbers in half to give it the illusion that it's being pressed in. Okay, very cool.
03:43:43.818 - 03:44:23.730, Speaker A: We can use alt z to turn off our word wrap for now. Next we want our button to do something when the user hovers over it to give them some feedback that they're hovering over the button. So we're going to target button hover. So this is called a pseudo class. So that means that any time a button element is hovered over we're going to be able to change the style. So in this case I need alt z again and I'm actually going to copy the background linear gradient that we have on our button. And the main thing that I'm going to change is instead of to top, I'm going to write to bottom.
03:44:23.730 - 03:44:49.220, Speaker A: So it's going to flip when I hover over it. So let's check that out. Yeah, very cool. So it looks more like there's something happening when I'm actually hovering to engage the button. Awesome. Last thing we're going to do is have the effect of the button being pressed in. So we're going to use another pseudo class this time button active.
03:44:49.220 - 03:45:46.546, Speaker A: And for this one we're first going to add a transform translate y so we can select that one there and three pixels. So what that means is when we press down on the button, it will go down by three pixels. And the very last thing we're going to change, it might seem pretty subtle, but we're actually going to copy this box shadow here, as I said before. And we're going to make the values a little bit smaller to make it look like we are pushing the button into the page. So we have an extra semicolon here and we're going to change these twelves into sixes. Okay, let's have a look at that. So you can see that the box shadow is receding a little bit and it looks like we're really pressing in a button.
03:45:46.546 - 03:46:21.896, Speaker A: Okay, that is excellent. And that's pretty much it for the styling for our button. So in the next one we will actually get a start on our functionality. I'll see you in that one. Bye for now. Alrighty. So we, we have our awesome looking 3d button here.
03:46:21.896 - 03:46:50.840, Speaker A: If we click on it looks like it's being pressed into the page. Great. The next step is we're actually going to focus on the functionality of our project. So we're going to jump back into the code. First thing I'm going to do is I'm going to make sure that autosave is actually off. I turned it on for the styling, but we want it off for our JavaScript. Next, we're going to assign a constant for HTML element that we want to target, in this case our video and our button.
03:46:50.840 - 03:47:36.288, Speaker A: So we're going to start by writing const and then our name for our constant is going to be video element. This is written in camel case, meaning that the first word is not capital and any subsequent word is capital and that is going to equal document capital Getelementbyid. So you can see it's the first suggestion. I'm just going to press enter, then bracket single quote and then the id of our element. In this case it is video. I'm going to do the same thing for our button. So const button equals document getelementbyid, bracket single quotes and then buttonhood.
03:47:36.288 - 03:48:41.300, Speaker A: Okay, the next thing we're going to do is we're going to comment out a title for our function that we're going to make. It's going to be an asynchronous function and it's going to prompt the user to select a media stream and then it's going to pass that to our video element and then it's going to play. So to write an asynchronous function for now, what we'll need to do is type out async, then function, and then we're going to name our function select media stream. So again, that's written in camel case brackets and then curly brackets. And inside of the function we're going to use a try catch statement. The benefit of this is that anything that needs to be resolved after we complete our call, we'll wait until the try has completed instead of just throwing an error. And then we're going to use the catch statement to catch any errors within the console and log it.
03:48:41.300 - 03:49:29.160, Speaker A: So first we're going to add a try and then curly brackets enter, and then on the second curly bracket we're going to write catch and then another set of brackets. Inside this we're going to type error and then another set of curly brackets. So just to show you very quickly how this is going to work, just comment out here. This is where we're going to catch our errors. I'm going to just type something that will not work. So I'm just going to literally write something and then below that within our catch, I'm going to console log and I'm going to write a custom message with a string using single quotes. So whoops, I error here.
03:49:29.160 - 03:50:21.508, Speaker A: The reason you might want to add custom messages is if you have a really big project and you have many asynchronous functions, you want to be able to know exactly which function is throwing the error. And then after the comma we're going to pass in the actual error that we're catching. And one last thing we need to do is we need to actually call the function. So we're going to comment out down here on load and then we're going to write out our function name, select media stream bracket and then semicolon. You always want to have the function being declared before you're calling it. That's why we're putting this on the bottom even though it's the first thing we want to load. Okay? So we can save that, jump back over, we're going to right click and inspect and we're going to go to our console and we can see that we've already thrown our error here.
03:50:21.508 - 03:51:03.950, Speaker A: Whoops, error here. Something is not defined, okay? So that shows how our catch statement is going to work. We can close the dev tools for now and jump back into our code. And now we can get started on our functionality. So we're going to start by removing this and now we're going to be working with the screen capture API. If you want to learn more about this I will provide a link in the course that will talk more about it. But to boil it down, we're going to be able to capture live screen contents by calling navigator mediadevices, get displaymedia.
03:51:03.950 - 03:51:44.880, Speaker A: So we're going to start by setting a constant that is going to be called media stream. Again, capital s on the stream and that is going to equal await. So we're going to wait for the Navigator dot media devices. Again, it's autocompleting for us dot get display media bracket and semicolon. And that's where most of the magic happens. From there we're going to need to actually do something with the stream. And for this we're going to use our video element.
03:51:44.880 - 03:52:52.420, Speaker A: So first let's go into our HTML and we're going to remove this hidden attribute for right now. We're going to save that, go back to our JavaScript and continue on. We are going to use our video element and we're going to provide a source with source object. So video element, source object equals mediastream, the constant that we just set above and below that we're going to type videoelement dot onloaded metadata, which is something that is true when it has finished loading equals and we're going to use an arrow function here. So the bracket is the same thing as writing out just function bracket and then equals. And then we have a greater than sign there bracket. And then inside of this we're going to do video element play.
03:52:52.420 - 03:53:44.974, Speaker A: And then again we're going to have a bracket and a semicolon. Okay, just to recap, we are setting a constant that is going to have our media stream data and we're waiting to assign that until the user has actually selected which screen or window they want to share. Then we are passing that media stream into our video object as its source object. Then when that video has loaded its metadata it's going to call a function that is going to play the video. Okay, that's about it. Let's save it and go over and check it out. Okay, so you can see that we have a video element here and we have our start button here.
03:53:44.974 - 03:54:11.670, Speaker A: We're going to refresh the page and you can see again we're prompted to select something. I'm going to select the same video. So we're going to press share. And you can see it's already playing within our video element. We can even see the time as it's passing. And you can see over here we have some options. We can full screen this or if we click this menu we actually have the option of triggering picture in picture.
03:54:11.670 - 03:54:52.396, Speaker A: So if we click on that that is going to accomplish what we want to accomplish. Awesome. So we are almost there. What we're going to want to do though is we're going to want to bypass this video object altogether and have this start button launch our picture in picture functionality. So let's stop sharing and we can refresh this and we can jump back into our code. Okay, so what we're going to do is we're going to scroll to the bottom and we're going to add an event listener for our button. So we're going to type out button, dot.
03:54:52.396 - 03:55:24.142, Speaker A: And you can see the first suggestion. Add event listener. I'm just going to press enter and then brackets. And first we're going to use single quotes to show that we want to target a click event. Next we're going to pass in a function within our event listener itself, an asynchronous one. So we're going to type async and then we're going to use an arrow function again. So bracket equals greater than sign and then curly brackets again.
03:55:24.142 - 03:56:00.180, Speaker A: And then we're going to press enter. We're going to add the semicolon there at the bottom before we forget. And within this we're going to comment out some titles just to explain what's happening. So the first thing is it's going to disable the button when we click on it. So button dot disabled equals true. Below that we're going to comment out that we are going to start picture in picture. There's a great article about this that I will also link within the course.
03:56:00.180 - 03:56:45.780, Speaker A: And this time we're going to await the video element requesting. So request picture in picture bracket semicolon. So we're waiting for the video element to request and we're not going to do anything else until that happens. So the next thing we're going to add is that we are going to reset the button. So button dot disabled, false. So this is only going to happen if we successfully request our picture in picture. If not, our button will remain disabled.
03:56:45.780 - 03:57:09.250, Speaker A: Okay, so we can save that and jump back over, check that out in action. I'm going to refresh the page. I'm going to choose my fireplace here. So you can see we have our video there, but instead of touching the video at all, let's just press the start button. Okay, perfect. So it does exactly what we want it to do. We have our picture in picture here.
03:57:09.250 - 03:57:52.732, Speaker A: Now we're just going to quickly get rid of the video and check it again. So let's jump back to the code, go back to our HTML, and we're going to add back our hidden attribute and then save it, jump back over to our project refresh, choose our fireplace again and we can hide that and press the start button and. Perfect. That is it. That's exactly what we wanted. So there's no video element on our page and we're able to trigger our picture in picture functionality just by pressing our start button. Okay, so that is it for this project.
03:57:52.732 - 03:57:58.610, Speaker A: I hope you guys had fun working on it and I'll see you in the next one. Bye for now.
03:58:14.070 - 03:58:37.154, Speaker B: Holy smokes. That was another fun project and I really liked it. That was fun. As you can see, it was a very nice simple JavaScript file, nothing too crazy, and it's very easy to read. We have some great comments here. We're using some async await function which is a new feature of JavaScript. We're having a try catch block, which is really nice.
03:58:37.154 - 03:59:28.724, Speaker B: We can catch errors if we want here. So if you want to do something with an error, we can do that here, maybe console log, something to the browser. So this looks great, but I want to talk about one thing in this video, and this is the await keyword. You see, async Await is a fairly new feature in JavaScript and as you can see it's usually used with a try catch block in order for us to catch any errors. And we have to put in this async function that is the async keyword in front of a function to let us use this away keyword you see, without the async function in front of here, this would give us an error. But here's the thing, JavaScript is constantly evolving. This async await is a new feature.
03:59:28.724 - 04:00:18.680, Speaker B: Any programming language is constantly evolving as the times change, as best practices evolve. For example, things like Const didn't used to be part of JavaScript. Even try catch didn't used to be part of JavaScript. JavaScript is the language, but the JavaScript programming language follows a specification called the ECMAScript, and the ECMAscript proposal is exactly that, the standard of what JavaScript should look like. A group of really smart people and people that are respected in the community decide how to evolve the language. Each year they add new features to the language. Not a lot, usually just a few, but in an attempt to keep the language modernization also useful to programmers.
04:00:18.680 - 04:01:05.068, Speaker B: So I'll link to this resource here, but as you can see here, there's different stages that things are being proposed and you can see what are some of the upcoming stages. We have some stage zero, stage one, stage three. Stage three usually means it's a good sign that it'll be introduced to the language shortly. And the one I want to talk to you about and keep this in mind, you don't need to actually stay on top of this. Usually every year there's an announcement and you just learn some of the new features in the language. But one of the upcoming ones that is quite interesting is the top level await. What does that mean? Well, if you ever wanted to find out about a new feature in JavaScript, you can just go to this proposals and click on it and learn about it.
04:01:05.068 - 04:02:01.886, Speaker B: But instead of waiting and reading, let's just figure out what this does. You see, remember how I said you need the async function in order for us to use the await keyword? So await always has to be wrapped in an async function, at least as of now. But with a new proposal that's actually going to go away. Where you can use await in top level, let me show you. Let's say that I grabbed this piece of code where we use the await keyword and we're not using anything other than the navigator mediadevices, which is a web API. So this we should be able to run in the browser. So if I copy this code, go to my browser, open up the developer tools, and let's make this a little bit bigger.
04:02:01.886 - 04:03:18.044, Speaker B: If I copy and paste this, hit enter look at that. My share your screen toggle came and I didn't get any errors. Why is that? Why did await work when I just told you that async function needs to be wrapped around it? And that is because the Chrome browser runs something called the V eight engine and the V eight engine is what reads our JavaScript. And because the people at Google and Chrome are always on top of the TC 39 and know what the new proposals are, sometimes they implement features that they know are coming, even though they're not officially part of the language yet. So in this case, the Chrome browser actually, if you have the latest version of Chrome, will actually let you write a weight at the top level. But other browsers that use something other than the V eight engine, that is another thing to read their JavaScript, like Safari. Well if we open up the developer tools in Safari, go to console and let's make this a little bit bigger and I paste in the same code, I hit enter, I get an error, no idea what's going on.
04:03:18.044 - 04:04:16.600, Speaker B: What you just send me is not JavaScript because well, we have an unexpected token. What's going on here? We have no idea why you're using await without using the async keyword. So the interesting thing here is you want to use features that are available in all browsers, and different browsers implement features at different times. In this case we want to wrap the function in an async function because we don't know that our users are all using the latest version of Chrome. Maybe they're using different versions, older versions. So what we want to do is to future proof ourselves. Now, as the time progresses over the years, more and more browsers are going to be updated, less and less users are going to use older version of browsers, and more browsers are going to adopt this top level await once it becomes part of JavaScript.
04:04:16.600 - 04:05:13.422, Speaker B: So more and more code bases are going to start using just top level await without using the async function wrapper. So we can just hypothetically remove these parts of the code. Now I personally like the async function because it just lets you know that hey, this function is asynchronous, which is a really, really nice feature. But hopefully by looking at this you kind of understand that being a JavaScript programmer, you have to keep an eye on what the language adds, what the new features are. But also keep in mind that some browsers are slower than others at adopting new features. So you want to make sure that whatever code you write, because you don't know where your code is going to land. The user that uses your code, that checks your website can have any sort of browsers, any sort of outdated browsers.
04:05:13.422 - 04:05:45.510, Speaker B: So you want to make sure that whatever your target audience is, well, you use the appropriate features. Now, by the time you watch this video, maybe await, top level await. It's a big thing and you don't use async function anymore. But again, this is a lesson in just keeping up with the TC 39. Being part of the JavaScript programmer ecosystem is all about seeing what evolves, what new features we get in the language, so that our programming becomes hopefully better and better.
04:06:01.620 - 04:06:38.510, Speaker A: Hello everybody. So I have a cool little project here today. It is a joke teller. So I got the idea from virtual assistants like Cortana and Siri that will actually tell you a joke out loud if you ask them to. I wanted to be able to accomplish the same thing with JavaScript, and I've done that with this project. So how we're going to do this is we're going to call a joke API to get a random joke. Then we're going to pass that to a text to speech API and it will tell us that joke.
04:06:38.510 - 04:07:05.280, Speaker A: You can see that we have a nice little animated GiF robot here. I got this from Giphy.com. i did not make this, but I'll show you that when we get into the specifics of the project. For now, I'll just show you how it works. We have this tell me a joke button and all we have to do is press it. What do you call a developer who doesn't comment code? A developer. Okay, that was pretty funny.
04:07:05.280 - 04:07:51.880, Speaker A: Excellent. So that's the basics of the functionality. We just have a simple button and it will tell us a joke. Let's dive into the code and get started. Alrighty, so starting out this project is going to be a little bit different. Instead of using the template that we've been using up to this point, I'm actually going to provide you with a template specific to this project. So once you've downloaded that and unzipped it, you'll be at this stage here.
04:07:51.880 - 04:08:43.698, Speaker A: So the first thing you should do is rename it to just be joke Teller and remove the fact that it's a template. And then you're going to open that up in visual studio code. Inside we can see that we have a little bit of a different file structure. The first thing that should be obvious is that we've added the animated Gif. So I've added this locally to make it easier in the style CSS I've also added a link to the source where I got it on Giphy and you can check out more work from the artist. They're very talented. Lastly, in the script js file I've added some minified code from our text to speech API that I have actually modified a little bit, but we will explain more of that when we get to it.
04:08:43.698 - 04:09:39.780, Speaker A: So for now let's open up our files here and we're going to start with our index HTML. So the first thing we're going to change is the title here. We're going to change that to joke teller and we can use Alt Z to enable word wrap so that we can see our long lines here and we can actually get rid of font. Awesome. Because we're not using any special icons within the this project inside of the body. We're going to make a container and we're going to do this in a fast way using Emmet abbreviations, which is built into visual studio code. So in order to make a div I can actually just type the class so dot to represent the class and then container and then press enter and it will automatically make a div for me.
04:09:39.780 - 04:10:15.328, Speaker A: I can do a similar thing for our button, but I'll need to type out button first as an element. So button this time we don't need a class, we just need an id. We can accomplish this with hashtag and then the id name, which in this case will be button. And then inside of that we're going to write our button text, which is just tell me joke. Underneath that we are going to add in an audio element. So audio again. We want a hashtag of the name.
04:10:15.328 - 04:10:59.900, Speaker A: So audio again and then we're going to press enter. That's going to create our audio element. For now we're actually going to eliminate the source because we're going to provide that dynamically in our JavaScript and we're going to add in controls as well just to see what is happening with our audio. All right, so that's pretty much it for our HTML. Let's save that. And before we get too far, let's actually go down to this blue bar at the bottom and press go live so that we can actually see our project using live server. Okay, so we can see that we have our button here and we have our audio element and we have our title change.
04:10:59.900 - 04:11:34.190, Speaker A: Alright, so that's a decent start. We're going to need to now jump into our css to add the color for our background as well as our robot GiF. So let's jump back to the code. Okay, so in our css we are going to start with our body. So body curly brackets entertained. We're going to start by eliminating the margin as we usually do. So there's a ten pixel margin around every body element.
04:11:34.190 - 04:12:02.442, Speaker A: We're going to get rid of that so that our background color goes all the way to the edges. So in this case I have a very specific color in mind. So I'm going to enter in the hex code for that. So that is hashtag four, five, b a d d. So this is just the same background as the GIF. So I just pulled out that color and let's save that and jump back. Okay, so that's already looking a little bit better.
04:12:02.442 - 04:12:49.888, Speaker A: We have our background color going here. Now we're going to go back and start styling the container for our objects. Okay, so below this we can scroll down a bit. And we're going to target our container to target our container class. And inside of that we're going to start with the height, which we're going to use 100 VH, which stands for Viewport height. And then we're also going to do width 100 VW, which is a viewport width. So the reason we're using this and not pixels or percentage, it's just a way to dynamically scale our project based on the size of the viewport or the size of the window.
04:12:49.888 - 04:13:18.434, Speaker A: It means the same thing. Okay, moving on. We're going to use flexbox by typing display and then flex. And we're going to use this in order to do a couple of things. The first thing will be we're going to justify our content center. You can see it's auto completing. I can just press enter here and align items center as well.
04:13:18.434 - 04:13:48.390, Speaker A: And that is going to align our items horizontally and vertically respectively. For now. Because we have two elements, we can also change the flex direction to be column. So the reason for that is when we have two items, we want them to go top bottom, not left right. So we can save that and check it out. Okay, perfect. So everything is centered and we have everything going top bottom instead of left right.
04:13:48.390 - 04:14:27.060, Speaker A: All right, so that's a pretty good start. The last thing we'll need to do is actually set up another background property where we are passing in the robot GIF. So let's jump back and do that. So below this we're going to start with a background property and we're going to use a URL and then single quotes, period forward slash. And then you can see it autocompletes for us if we hover over robot and press enter. So that's the path for our local file. Below that we want to actually adjust things a little bit.
04:14:27.060 - 04:15:06.326, Speaker A: So we want our background size to be containd and that means that the image will be fully visible on the screen. That's the idea behind that. Next we're going to set the background position and that is going to be left center. So left. The first property is the horizontal property and center here is the vertical property. So that means it'll be this part of the page but to the left. And then lastly we are going to use background repeat and no repeat.
04:15:06.326 - 04:15:33.070, Speaker A: So we only want it to happen once. So we can save that and jump back over and. Perfect. So you can see that we have our robot slightly to the left but it is still centered vertically. Excellent. So we're off to a good start here. Let's take a break and then we'll jump back in with fixing our button styling as well as adding mobile responsiveness to the project.
04:15:33.070 - 04:16:22.210, Speaker A: All right, I'll see you in that one. Bye for now. Alrighty, welcome back. So you can see that I've changed up my view here a little bit and that is so that you can see the style changes that I'm making in real time. The other thing that is going to help us accomplish that is turning on autosave in visual studio code. This is a great thing to have on when you're working with CSS, but it's usually something you want to turn off when working with JavaScript. So we will do just that when we get there.
04:16:22.210 - 04:17:08.500, Speaker A: All right, so first off, we can see that our robot is very small here in our mobile looking view. So in order to fix that we're going to need to add a media query at the bottom of our style CSS file. So first we're going to comment out a title for this. This will be using command or control question mark, depending on if you're using Mac or Windows. And you can see it creates our comment here. And we're going to type that we have a media query and we're going to make it for tablet or smaller. And now to the media query itself we're going to use and then media.
04:17:08.500 - 04:18:02.250, Speaker A: We specifically want to target screensh and we specifically want to target screens that have a max dash width colon of less than 1000 pixels. And then we're going to make our curly brackets here. And inside of this we're going to need to pick a class or element that we want to target in this case, we're going to target our container. We're going to have another set of curly brackets. And inside of that we are going to start by changing our background size property and we're going to make this cover and see what happens. Okay, so our robot is bigger, but we can see that it's not in the center. So in order to change that, we're going to also target our background position and we're going to make it center and center.
04:18:02.250 - 04:18:38.976, Speaker A: And that is looking a lot better. Perfect. Next we're going to start styling our button. So back up above our media query here and we can add the button curly brackets. And the first thing we're going to add is cursor pointer so you can see it autocompletes here. If we press tab twice, this will allow the cursor to change to a hand instead of the default cursor when the user hovers over at the button. Next we're going to add outline none.
04:18:38.976 - 04:19:14.000, Speaker A: So normally when you click on a button, it'll have a blue outline. And we want to eliminate that. We want to just have our own styles on our button for this specific button. Now we're going to start by adjusting the width which will be 200 pixels. And then we're going to add a height of 50 pixels. Then we're going to change the font dash family. So keep in mind for buttons that you will always need to explicitly state the font family inside.
04:19:14.000 - 04:19:48.152, Speaker A: You can't just state it within the body. And so we're going to use one of the suggestions here, which is courier, new courier and monospace. The reason I chose these is because they will work on windows and Mac. They're very standard fonts. Below that we can change the font size to make it a little bit bigger, 20 pixels. We will make the color of the font white. Then we're going to change the background of the button.
04:19:48.152 - 04:20:14.778, Speaker A: Again, I have a very specific hashtag in mind. This is the pink of the robot. So ff 34. Okay, so that's looking great. We want to actually get rid of that white border. So we're going to say border none. Then we're going to add a border radius for rounded corners, five pixels.
04:20:14.778 - 04:20:45.020, Speaker A: I find that that helps make everything look more modern. And the last thing we're going to add is a box of shadow. So I find this is also a very helpful way to separate elements from the background. So there are five different values that we're going to enter here. The first one is the horizontal offset. So that means the shadow will go two pixels to the right. Next is the vertical offset.
04:20:45.020 - 04:21:22.904, Speaker A: It'll go two pixels down. The next one is the blur, which is how far out the blur of the shadow will go. And the last one is the spread which will put ten pixels and that's how far out the whole shadow will spread from the element. Lastly, we're going to add in the color. We're going to use an RGBA value which stands for red green blue alpha. And this will allow us to actually change the opacity of the shadow a little bit more. So in this case we want a black shadow.
04:21:22.904 - 04:22:12.244, Speaker A: So we're going to go zero comma, zero comma, zero comma, and then our alpha value which will be 0.2. Okay, so you can see it's a very subtle shadow. We're actually going to add a little bit more of a shadow into our mobile version than we will need on our desktop version. So let's go ahead and actually add that now while we're at it. So in our media query here, we're going to target our button element and we're going to change our box shadow up a little bit here. It's going to be five pixels, five pixels, 30 pixels, 20 pixels, and then we're going to have an RGBA. You can see that it actually autocompletes the other one we had.
04:22:12.244 - 04:22:42.020, Speaker A: So we're going to use that, but we're going to make it a little bit darker, 0.5 instead of 0.2. Okay. So you can see that's a little bit more of a dramatic box shadow, which is more important in the mobile view because we have the buttons centered over the robot here, whereas in the desktop the robot is off to the side. So we want more of a subtle box shadow for that. Alrighty. Now let's go on to styling the button when the user is interacting with it.
04:22:42.020 - 04:23:26.804, Speaker A: So to do that we're going to be using what's called a pseudo class. So a pseudo class is something that will style an element when a given event or state has occurred. So in this case we can initiate it by targeting our button with a colon and then adding in our pseudo class, in this case hoverdeze. So this means it will change the styling for the button when we hover over it. So I just want to change the color slightly to give the user some feedback. We can accomplish this by using filter and then brightness. And then we're going to change the brightness to 95%.
04:23:26.804 - 04:24:11.070, Speaker A: So that means it's going to get 5% darker when I hover over it. You can see it's a very subtle but it's nice to give the users some visual feedback. Second, we're going to add the active pseudo class to the button and inside of this we are going to transform and then scale our button down to 0.98. So that means our button will be 2% smaller when we click it. So you can see it almost makes it look like it's being pressed in. Okay, very cool. And the very last pseudo class we're going to have is for disabled.
04:24:11.070 - 04:24:59.580, Speaker A: So when this button is disabled we want to make it darker and we also want to change the cursor to be the default cursor to show the user that they can't quite click on it. So in this case cursor default is what we want and we want to filter with a brightness this time of just 30%. So we can't see this right now but we'll see this in our JavaScript when we start disabling our button. That's pretty much it for our styling. I think it's looking a lot better. We're not going to bother styling our audio element because in the final version of the project I'm going to be removing it. But other than that we're done the styling for now and let's jump into the functionality in the next video.
04:24:59.580 - 04:25:49.690, Speaker A: Alright, I'll see you in that one. Bye. For now let's start by thinking about what we want the user experience to be. So we want the user to be able to press this button and it will tell them a random joke. Okay, so how do we do this? Let's start with the talking part. So we're going to need to feed text that we get from our joke API and we want audio in return so we can try to search for a text to speech API. And in a future video we will search for a joke API as well.
04:25:49.690 - 04:26:39.500, Speaker A: But for now we will start where most developers would and that is with Google. So let's just type in text to speech API and see what we come up with. So normally I would skip the ads and as we scroll down here we can see that I've kind of clicked on a few already. We have one from Google, one from Microsoft, but I think they're a bit too complex for our purposes. And down here you can see we have the eleven best text to speech APIs. So this is from the rapid API website, let's click on that, it'll give us a variety of options. This might be a good thing to use in the future as well for other APIs that you might need to look for.
04:26:39.500 - 04:27:00.472, Speaker A: Okay, so let's zoom in a little bit. Okay, so it's asking us to sign up. You don't have to. I will sign in with GitHub usually, but for now I'm just going to click this x to avoid signing up. Okay, so we've zoomed in a little bit more. We have our text to speech APIs here. We can see each has its own card and some numbers.
04:27:00.472 - 04:27:22.618, Speaker A: So average success rate, average latency and popularity. Okay, so I think that's pretty important. We can see that this is a 9.5, this is a 9.7. This is more of a translator though, so that's not quite what we need. This one here is free it says, and it converts text content to audio content. Okay, perfect.
04:27:22.618 - 04:27:59.076, Speaker A: Let's click on that and check it out. So let's zoom out just a little bit for a moment. I will provide the links for anything we come across here in the course so that you can check it out on your own. And we can see here that we have an option to test the endpoint but this button is grayed out. So it looks like we are going to need to get an API key from this website. And if we scroll down we see yeah, we need to put the key here and it is required. Okay, so let's click on that website.
04:27:59.076 - 04:28:40.070, Speaker A: Alright, so we're at the registration form here and we're going to fill it out. It's not asking for a ton of information, it's totally free. We don't need to worry about any kind of payment information or anything like that. And I'm just going to put in the rest of this information. Then we're going to scroll down, I'm going to say I'm not a robot and I'm going to register and you can see instantly that we have our API key here. I don't mind showing this because I'm not planning to use this key for anything. I'm not even going to activate it, but let's just copy it.
04:28:40.070 - 04:29:37.158, Speaker A: You can see my account's inactive and if we go back to our rapid API and we're going to scroll down, we're going to paste in our key here and now we should be able to test the endpoint. So let's click that. Okay, so actually it looks like we must sign up in order to test our endpoint. So I'm just going to sign in with GitHub. Okay, so I'm automatically signed in here and now we're going to try to test the endpoint and you can see that we have a 200 success, meaning we were able to contact the API but the body just returned an error saying that the account is inactive. Okay, so what that means for you is that you'll need to check your email and they will have some sort of link to activate. So go ahead and go into your email and try to find that.
04:29:37.158 - 04:30:06.138, Speaker A: Click on the link and once that's done and you refresh this page, it will say active. Once you're at that point we're going to go back to our rapid API page and we're going to press test endpoint again. Okay, so we can see this time that the body returned what looks like an audio element. When we hover over we can see that the audio has been sent in the form of a really long string. Let's hit play. Hello world. Okay awesome.
04:30:06.138 - 04:30:38.600, Speaker A: So we can see that it's working. All right, so let's jump back to the voice RRS website and let's check out the documentation. So reading documentation is a big part of being a developer. So let's do some of that now. So you can see that it creates a high quality audio stream. So we know that already we got our audio returned to in that last test there and we can scroll down, it is a get or a post request. This is the URL format so we can use HTTPs.
04:30:38.600 - 04:31:12.858, Speaker A: So we're going to use this one and the question mark is the query string and we're going to be passing in different parameters. So let's scroll down and see. So we're also going to pass in our API key. This is an example here. Our language is English and our source is hello world. So we can see more of our parameters here. We can see that our API key is mandatory and the source SRc is mandatory as well.
04:31:12.858 - 04:31:49.030, Speaker A: This is the text that is going to be converted to speech. So that's our hello world. And the other mandatory thing is our language which is English. So we're not going to worry about that too much. We'll just leave that as it is. You can see if we scroll down we have some other options too, including the speed, the type of audio codec, the audio format, and if we scroll down it goes into detail about the language, the audio codecs, the audio format and at the very bottom we can see that we have a list of errors here. So you might remember we got this error.
04:31:49.030 - 04:32:10.926, Speaker A: This account is inactive. We can see that there is a request count limitation. For reference. I do already know that it is 350 requests per day on the free plan. That should be enough for us. Okay, so let's scroll back over here. There was a side menu here.
04:32:10.926 - 04:32:47.258, Speaker A: Let's see what else is in it. So you can see that we have something here called SDK. And if we scroll down there is one for JavaScript. So SDK stands for software development kit. What that means in this context is that there is a minified JavaScript file that will handle the core functionality. So that should definitely make our lives easier. We can click the download button and that will return us a zip file and we can scroll down to have a look at how we would actually implement this SDK here.
04:32:47.258 - 04:33:31.360, Speaker A: So you can see that we have a speech method here. And inside of it we're passing in our parameters. So our API key you're going to need to put yours in here. And we're also passing the source which is the text that we are converting to speech. So the standard here is hello world. So let's start by copying this and we're going to jump back into our code and we're going to create a function called test and we're going to paste this inside. And then below that we're also going to call our test function.
04:33:31.360 - 04:34:12.370, Speaker A: Make sure that you're including your API key here and then we're going to save it. Next I'm going to demonstrate how and why I modified this SDK that I included in your template. You don't need to code along with this, but I will tell you when it's time to start working on the project again. Okay, so you can see here we have two versions of our SDK. This is the minified one up here I'm going to use word wrap with Alt Z to show the entire minified code. And you can see it's pretty hard to read. So we're going to comment this out for now.
04:34:12.370 - 04:34:48.729, Speaker A: And below that you can see that we have another version that's a lot easier to read. So this is the original file that I have unminified to show what's actually going on inside of it. So we can see here that we start out with our speech function. This is going to call a validate function and a request function. It looks like the validate function is mostly in charge of throwing errors. And if we go down to our request function, we can see that this starts by building the request. So this is actually passing in the parameters that we're setting.
04:34:48.729 - 04:35:23.684, Speaker A: And then eventually down here it is creating a new audio element and it's passing in t responsetext and then it's playing. So let's save this and jump back to the browser and check it out. Hello world. Okay, awesome. So it's working. So we can see here that we have the response from our voice RRS API and we can see that it passed in this audio data as a string. But the problem is that it didn't actually pass it into our audio element.
04:35:23.684 - 04:36:19.690, Speaker A: The reason that this is a problem is because we want to have more control over the audio that's returned from our API, because we want to be able to control it and potentially call an event on it later. So I'm going to jump back over and show you how I fix this. So I'm going to comment out this line that is currently playing the response. And below that I'm going to write out a constant name that we have not yet made, audio element, element with a capital e because we use camel case for our constant and variable names. Then we're going to set the source attribute src and that is going to equal the t response text. So that's the same thing as above. And on that same element we are going to now call the play method like so.
04:36:19.690 - 04:37:02.664, Speaker A: And that is all I am modifying. So I'm taking out this line and I'm putting in these two lines so now I can actually delete this because we are now caught up with the minified code that I've added into the template. So I'm going to delete that and then I can uncomment out this and I'll use word wrap again alt z to hide it. Okay, and now it's time for you to get back to coding with me. So we're going to start at the top here and we're going to target our two HTML elements. So we have a button and we have our audio element. So first we're going to write out a constant const for our button.
04:37:02.664 - 04:37:48.040, Speaker A: We're going to call it button and that's going to equal document getelementbyid. If I press enter it'll autocomplete for me and in brackets we're going to pass in single quotes the name of our id that we had and that is button. We're going to do the same thing for our audio element. You can see it actually even autocompletes here and I'll just press enter there equals document getelementbyid. And then this time it's an id of audio. Okay, so make sure you have your API key in here and we're going to save it and test it out. Hello world.
04:37:48.040 - 04:38:20.695, Speaker A: Okay, so awesome. We have our hello world working and this time we can see that our audio element is populated. So if we hit the play button hello world, we can hear it again. That's excellent. So we finally overcome our first big challenge of finding a text to speech API and getting it working exactly the way that we want it to. In the next one we'll look at how to track down a joke API and how to get that up and running. Alright, I'll see you in that one.
04:38:20.695 - 04:39:05.906, Speaker A: Bye for now. Alrighty. Welcome back. So now that we've sorted out our text to speech API in this video, we're going to look at sorting out our joke API. So the very first step that I would do is I'm just going to Google and see what I can find. So joke API and I'm going to click on the first result. Okay, so you can see very important, there's actually a new version of this API.
04:39:05.906 - 04:39:26.612, Speaker A: So I'm going to click here to go to the new version. Okay. And we can see we have some information about this API. So it's a restful API. It serves a well formatted jokes. It can be used without an API key, membership, registration or payment. Okay, that's awesome.
04:39:26.612 - 04:40:01.369, Speaker A: Makes it easier for us. And the usage is very simple. It requires a basic knowledge of HTTP requests and JSON. Okay, let's scroll down and see what else we can learn about this. Okay, so it looks like there's a way to customize the parameters that we're passing to the API in order to get certain types of jokes. We can see that we have an example of the URL that we're building from these parameters and the result. So we're going to need to click send request to actually see a result.
04:40:01.369 - 04:40:29.718, Speaker A: Okay, so the first thing I'm going to do is I'm going to customize this a little bit. Okay, so I only want programming jokes. So I'm going to click custom and then the checkbox programming. Below that there are a list of things to blacklist meaning we do not want to include. So I'm not going to include any of these. I'm going to keep the jokes as tame as possible. We're going to return it as JSON.
04:40:29.718 - 04:41:03.456, Speaker A: Yeah, that works. And for now we're just going to take single jokes. So you can see at the bottom here that now our URL has changed and it's a little bit more complicated. So programming our blacklist flags and we only want single jokes. So let's send the request, okay? And you can see that we have our result here. So we have our JSON object and you can see we have several different values here. So we have our categories programming, our type is single.
04:41:03.456 - 04:41:29.054, Speaker A: You can see that we have our joke and this is our joke string here. Okay, we have our flags, we have an id and we have an error, but we can see that it's false. There was no error. Okay, so let's out of curiosity see how the two part jokes look. So let's send that request. Scroll down. Okay, so I'm noticing a big difference here.
04:41:29.054 - 04:42:09.720, Speaker A: We no longer have a joke value and instead we have a setup and a delivery. So the joke is split into two different values. So we're going to probably need to do something to deal with that because we want all of our jokes to be in one uniform way, being sent to our text to speech API. All right, so I'm just going to briefly explain how we are going to turn this URL into a joke within our application. So we're going to use fetch. So this is also from the Mozilla developer website. I'll provide the links to all of this stuff.
04:42:09.720 - 04:43:07.022, Speaker A: Within the course we can see that the fetch API provides a global fetch method and it is making a complicated process more simple. So if we scroll down we can see an example here where we are using the fetch method and we are passing in the one argument which is the path to the resource you want to fetch, and it's going to return a promise containing the response. So that's the JSON object. So this is just a response, not the actual JSON. To get at the JSON we're going to need to extract the JSON from the response. So you can see in the example here we're fetching from the resource, then we're turning the response into the JSON and then we're getting the data. So this is one way to do it.
04:43:07.022 - 04:44:11.484, Speaker A: This is using the promises format of returning data, but there's actually a better way that I'm going to show you now this is on the Google developer page. Again, I will provide this link, but this is an example of how we can improve this. Instead of having the typical promise code here, we can use an asynchronous function along with a try catch statement in order to make this process a little bit more simplified. So in this case what's happening is we're going to try to fetch. If we are unsuccessful, this catch statement will initialize and it will console log the error if it is successful. This constant is not going to be set until this fetch request has completed. And then from there what we're actually going to do is we're going to have another constant for the data, which is going to wait until we have the response in JSON format.
04:44:11.484 - 04:45:07.690, Speaker A: So let's jump back into the code and show a practical example that will probably make a little bit more sense. Okay, so the first thing we're going to do is we're going to comment out our test function for now and let's scroll down here a bit and below this we're going to start by commenting out a title explaining the desired functionality of our get jokes function. So we want to get jokes from joke API. And then inside of that we're going to write an asynchronous function. So we're going to start by typing async, then function, and then our function name is going to be get jokes. And then inside of our curly brackets here we're going to make our try catch statement. So we're going to do try curly brackets again.
04:45:07.690 - 04:45:44.940, Speaker A: And after the second curly bracket we're going to add catch and then in brackets we're going to pass in our error parameter. And then we're going to have curly brackets again. And then I'm just going to comment out. This is where we're going to catch errors, catch errors here just as a reminder. And I'm going to write a console log and I'm going to add a custom message. This is a good thing to do when you're checking for errors so that you know where it's coming from. In this case, I'm just going to write whoops comma and then I'm going to pass in the error variable here.
04:45:44.940 - 04:46:24.764, Speaker A: And within the try statement I'm just going to try something that I know is not going to work just to show how it is catching an error. So I'm going to try and something okay, so let's save that and jump back to the code. Let's go back to our project, to the console, and we actually need to call our get jokes function for anything to happen. So let's do that as well. Get jokes. Okay, so save that jump back. Okay, so you can see that in our console we have our whoops I and then it's actually including the error reference error.
04:46:24.764 - 04:46:56.140, Speaker A: Something is not defined. Okay, so we can see that our catch statement is working effectively. So now let's get our actual fetch request to work. The first step will be to jump back to our joke API website and we actually want single and two part jokes. So I'm going to check this box. You can see that it actually shortens our URL. And we're actually going to copy this because this is what we are going to try to get with our fetch request.
04:46:56.140 - 04:47:39.170, Speaker A: So we'll jump back into the code and at the top of our function here we're going to paste in our API. We're going to make it a constant API URL, capital u equals and then single quotes. And then we can paste so we can see that's a long line. We don't need to word wrap though because we don't really need to touch this again. We'll just add a semicolon at the end here and then down here we can scroll back. Okay, so now in our try statement we're going to start with const response equals await fetch. This is our fetch method.
04:47:39.170 - 04:48:22.090, Speaker A: And then inside of this we're going to pass our API URL constant that we just made. So this is equivalent to this. And below that we're going to do something with our response. So as I said, we're going to make a data constant and that is going to equal await response JSON. And that's going to turn the response into response JSON. That's what's going to become our data. We're going to wait until this is done to set this response value and we're going to wait until it's done being converted to JSON to set our data value.
04:48:22.090 - 04:49:02.100, Speaker A: And then below that we're just going to console log the data. Okay, so let's save that and check it out back in our project here. So you can see in our console that it's already working. Let's double check our network tab here so we can see that we have our programming call. And you can see here, yeah, it's returning everything exactly as it was in the website example. Okay, that's awesome. But our next challenge is how do we return just the joke and not the whole response.
04:49:02.100 - 04:49:41.380, Speaker A: So if we jump back to our console where we've logged our data, we can see that we have these values that we can actually target. So we have setup and delivery here. If it was a single joke, we would just have joke. So we can target into our JSON object by separating with a period. So back in the code instead of console logging data, let's try console logging data. Joke to target that joke child. Okay, so let's save that and jump back so we can see that it's now undefined.
04:49:41.380 - 04:50:20.400, Speaker A: So why is that? Let's go back to our network tab. Let's look at our programming call so it looks like it worked. But as we discussed before, this does not have a joke. It just has a setup and a delivery, all the two part jokes. So now it's time for us to actually figure out how we're going to deal with that. So if we have a setup, it means we have a delivery. Essentially we're going to need to create our own joke variable that will either equal the joke of a single joke or it will equal the setup and delivery of a two part joke.
04:50:20.400 - 04:51:17.810, Speaker A: So let's jump back to the code and see what we can do. So, above our API, the first thing I'm going to do is I'm going to create our own joke variable. So I'm going to do let joke equals and I'm just going to put in single quotes to create our joke as an empty string. And then inside of our try statement, we should be able to work this out with a simple if statement. So let's get rid of this for now and we're going to go if data setup. So that means if there is a setup which is only going to happen with two part jokes, we want our joke variable that we created to be equal to our setup plus our delivery. So to write this out, I'm actually going to use a template string.
04:51:17.810 - 04:51:51.518, Speaker A: We can do this by using backticks. So this is the button below your escape key. It looks kind of like quotation marks, but not quite the same. And the reason we're going to use this is it's easier to add strings and variables together into one string this way. So with dollar sign and then curly brackets, you can see it turned blue. That means now it's expecting a variable. And so we're going to pass data dot setup and then after that a space and then dot, dot, dot.
04:51:51.518 - 04:52:28.302, Speaker A: So the orange is an actual string and the blue is variables. But in the end it will all just be a string. And we're going to do the same thing for our delivery. Dollar sign, curly brackets, and then data delivery. Okay, we'll add a semicolon at the end here. We're going to write our else statement here and then another set of curly brackets and this time is a little bit simpler. We're just going to assign our joke variable is going to equal data dot joke and then we'll have another semicolon here.
04:52:28.302 - 04:52:52.022, Speaker A: And then below that we're going to console log just joke. So the joke variable that we created up here. Okay, so let's save that and check it out. Okay, so we're going to jump back to the console. Okay, so we have a joke here. Let's look at our network tab here. This is a single joke.
04:52:52.022 - 04:53:23.870, Speaker A: Okay, so let's refresh this time we have another single joke. We want to make sure that we're getting our two part jokes as well. Okay, this is a two part joke, so we can see that we have a two part joke separated by the dot, dot, dot that we added. Okay, so that's perfect. We're not getting any more undefined and we're getting our single and two part jokes returned as a string. So that's pretty much everything that we needed to do to set up our joke API in our project. Awesome.
04:53:23.870 - 04:54:07.830, Speaker A: So now in the next one we're going to have a look at how the two APIs are already working independently and then we're going to figure out how we're going to combine the two together. All right, so I'll see you in that one. Bye for now. Alrighty. Welcome back. So we've covered quite a bit in the project so far. I thought it was a good opportunity to take a step back and review what we've done so far.
04:54:07.830 - 04:54:39.746, Speaker A: So I've created a nice diagram here. I will share it in the course. And you can see that on the left side it's showing our joke functionality, and on the right side it's showing our text to speech functionality. You can see that currently they are not connected. So that's the goal of this video. But first, let's just review each of them separately. So I will zoom in a little bit here and we'll start with our text to speech.
04:54:39.746 - 04:55:40.360, Speaker A: So in our test function, which I didn't include here because we're going to get rid of it, we're calling the speech function and we're passing in the parameters for our API, including our key and most importantly our text. So currently that is just hello world. We're passing that through the minified JavaScript, which is the voice RSS SDK and this is connecting to their server. And then we're getting a response from their server in the form of audio data. And we actually modified the SDK to pass this audio data into our audio element as its source. And then we are triggering the play method on that audio element and we're able to hear something. Okay, simple enough so far, I guess, I hope, at this point.
04:55:40.360 - 04:56:51.830, Speaker A: And let's look at the joke functionality. So if we zoom in a little bit we can see that we're starting out with our asynchronous getjokes function. This is using the fetch method to pass in the API URL which has our query strings, the types of jokes and everything that we want. And we're passing that to the JK API server and then it's giving us a response and we're turning that response into the JSON because we only want the body of the response and we're passing that into a data constant. And then from there we are getting the setup and delivery for two part jokes and just joke for a one part joke. And in our functionality we are creating our own joke variable that is being populated from the two part or one part jokes that's using the if statement that we had in the previous video. And in turn eventually we are outputting our joke variable with the string of the joke that we got from our API.
04:56:51.830 - 04:57:33.900, Speaker A: Okay, so that's what we have so far. Now we need to figure out how we're going to connect the two. So I've actually made a more complete version of this diagram. So you can see that what we're essentially going to do is we're going to add another function called tell me that is going to take the parameter of joke. We're going to need to call that inside of our get jokes function so that we can pass our joke variable here. And from there we're going to call our speech function inside of our tell me function. We're going to be passing in the joke as the source.
04:57:33.900 - 04:58:29.790, Speaker A: Okay, so we have a pretty clear path forward. Let's jump back to the code and see what we can do. Okay, so we're going to start by making a function above our get jokes function. We'll start by commenting out a title to explain the functionality. We want to be passing our joke to our voice rsS API. Eventually that's the end result and we're going to make our function tell me that we just explained and we're going to pass in our joke as a parameter. And inside of this we just want to console log with a message tell me just to make sure that we are getting our joke within this next function from our first function so we can actually delete this console log here.
04:58:29.790 - 04:59:15.046, Speaker A: And instead we're going to call our tell me function and we're going to pass in our joke. Okay, so let's save that and check it out. Okay, so it already looks like it's working. We have our tell me here and we have our joke awesome. So we've successfully passed that from one function to another. The next step will be to put back together our speech function so that we're actually passing the joke to our text to speech API. Okay, so let's start by going back up to the top here and we're going to uncomment out our speech function here and we're going to cut it.
04:59:15.046 - 04:59:48.954, Speaker A: We're going to delete the rest of this and we're going to add this to our tell me function. So we're going to paste it in there, of course, make sure that you have your API key in here. And instead of passing hello world this time we're going to pass our joke. Okay, so let's save that and check it out. Joke. Okay, so we can see that we must have made a little bit of a mistake here, joke. Because it's just saying the word joke.
04:59:48.954 - 05:00:16.710, Speaker A: I think I know where we went wrong. Okay, so I think I can see the problem. You see, in our console log our joke is blue, but in our source it's orange. So we're passing it as a string. But we're meaning to actually pass the joke variable. So we're going to remove the quotation marks here and we can remove our console for now as well. And let's save that and try it again.
05:00:16.710 - 05:00:31.844, Speaker A: The six stages of debugging. One, that can't happen. Two, that doesn't happen on my machine. Three, that shouldn't happen. Four, why does that happen? Five. Oh, I see. Six.
05:00:31.844 - 05:01:07.326, Speaker A: How did that ever work? Okay, so that is amazing. We finally have successfully called our joke API and passed it through our text to speech and it returned the audio in our element here. That is absolutely perfect. So the biggest challenges of this project are overcome. There's a few little things to do from here. We need to get our button working to actually get our jokes. And I think we can probably hide our audio element here and just hear the jokes.
05:01:07.326 - 05:01:44.920, Speaker A: But let's get to that in the next video. I'll see you in that one. Bye for now. Alrighty. So let's start with the task of getting our jokes function to run when we click our button here. So let's jump back to the code. We can accomplish that by adding an event listener to our button element.
05:01:44.920 - 05:02:18.540, Speaker A: So it is considered good practice to always call a function after it's already been declared. That's why we're going to create our event listeners at the bottom here. We can start by getting rid of our get jokes function here that we were calling when the page loaded. And we will comment out a title for our event listeners. And then we're going to target our button constant. And then you can see the first suggestion, add event listener. We can press entertain.
05:02:18.540 - 05:02:47.082, Speaker A: And then in brackets we're going to pass in two parameters. The first one is going to be the type of event. So in this case it's a click. We're going to use single quotes and you can see again that it's populated here with a suggestion. I can press enter to have it, add it for me, and then comma. And then the second parameter is going to be the name of the function that we want to call. So in this case it's going to be our get jokes function.
05:02:47.082 - 05:03:17.176, Speaker A: You can see it auto completed again. I'm going to press enter. Ok, put a semicolon there. Let's save it and check it out. So you can see now that we did not have a joke play by default and we actually have nothing in here. And let's see what happens when we press our button algorithm, a word used by programmers when they don't want to explain how their code works. Okay, awesome.
05:03:17.176 - 05:03:53.484, Speaker A: So we are hearing a joke after we click the button. But let's say that I'm really excited as a user and I want to click the button again before it's done. The glass is neither half full nor half one. Open terminal tombgate why did the functional programming developer get thrown out of school? Have a great week. So you can see the problem here is that we want to not be able to press the button again until our joke is done being told. So let's think about a solution to this. So you might have seen on other websites that a button can be disabled.
05:03:53.484 - 05:04:39.400, Speaker A: On our rapid API website the button was disabled until we entered our API key. So we want to do a similar thing here. We want to disable the button as the audio is playing and when it ends we want to enable the button again. So there are a few possible ways to do this, but I think the best way would be to make it dynamic. And the way to do that is we want to disable the button as the audio is playing and then enable it again when the audio is done playing. So now you can see why it's so important that we have access to our audio element. And if you don't see why it's so important, we're going to explain a little bit more about the audio element so you can have a better understanding.
05:04:39.400 - 05:05:22.028, Speaker A: So this is another amazing reference w three schools. I'll provide a link to this within the course. And you can see it's talking about the audio and video elements because they're more or less identical in terms of how they are made up. And if we go down, we can see that we have a certain amount of methods that we can run on these elements. So you might recognize the play method that we added into our SDK. Well, it was already there, but we re added it and so that's what's actually playing our joke right now. If we go down, we can see that there are some different properties that we can add to the actual audio element.
05:05:22.028 - 05:06:03.390, Speaker A: When we made it, we added controls that allows us to have a play pause button. And if we go down even further, we can see that we have some different events. So we can see here that we have an ended event. And so this will fire this event whenever the current playlist is ended. In this case, we just have a single audio element, so it'll fire this ended event when the joke is done being told. And then from there we can launch a function to disable or enable the button. Okay, so let's jump back into the code and we will figure that out.
05:06:03.390 - 05:07:03.526, Speaker A: So we're going to need to add another event listener. This time it's going to be on our audio element, and this time instead of a click event, we're going to use the ended event and we're going to call a function that's going to be called toggle button. So we're going to need to make that function. That's why it's not yellow yet. So we're going to make that up at the top right now. Okay, so let's scroll up to the top just below our SDK and we will comment out a title here, disable enablebutton and it's going to be a function, togglebutton and then curly brackets. So we're going to use the disabled attribute, which is available on button elements.
05:07:03.526 - 05:07:37.870, Speaker A: So button disabled. So this can equal true or false. It's a boolean. So a quick way to do this to toggle between the two is just to have button disabled equal the opposite of button disabled. So we can accomplish that with an exclamation mark button disabled. So if button disabled is true on this side it'll equal to false and vice versa. If it's false it'll be the opposite, which is true.
05:07:37.870 - 05:08:07.380, Speaker A: But let's think about how we actually want this to work when the page loads. So when the page first loads we want the button not to be disabled. So that's fine. Because we're not calling this function yet, but on our event listener we are calling this function here. So it's being called once, it would actually launch for the first time after the audio has ended. So it would actually do the opposite. It would disable the button once the joke is done.
05:08:07.380 - 05:09:01.432, Speaker A: We want it to disable while the joke's being told and re enable when the joke is done. So that means we're going to need to call it again when we click on the button. So when we click on the button we're launching our get jokes function. So within this we need to call our togglebutton function to disable it at the right time. So at the bottom of our try statement we can also comment out a title for this function here, and below that we'll comment out another title and this is going to be to actually disable the button, and then we'll call our function with the brackets here and then a semicolon and let's save that and try it out. Okay, so let's press the button. Java is like Alzheimer.
05:09:01.432 - 05:09:38.030, Speaker A: It starts off slow, but eventually your memory is gone. Okay, so we can see that the button was disabled while the joke was being told, and as soon as it was done it was enabled again, allowing us to press it again. Awesome. So I think everything is pretty much working exactly as we want it to in terms of functionality. But there's one final thing I would like to do, and that is to hide our audio element because we don't actually need to see it, we can just hear the jokes. So this will be pretty easy to do. Similar to how we have a disabled attribute for our button.
05:09:38.030 - 05:10:39.270, Speaker A: All HTML elements have a hidden attribute and we can actually trigger this within our HTML because it's something that we want to be hidden the entire time. So as the page loads we can just type hidden here. And normally in JavaScript for a loader we could toggle this on and off by making it true or false within our JavaScript, but for our purposes we want it to remain hidden permanently. So let's save that and jump back and check it out so we can close this so we can see we no longer have our audio element. Let's test it out and see if it works. Why do Java programmers hate communism? They don't want to live in a classless society. Okay, so it works exactly as we wanted to, we hid the audio element, we got our button working exactly as we want and that's pretty much it for the project.
05:10:39.270 - 05:10:46.010, Speaker A: I hope you guys had a lot of fun with this and I will see you in the next one. Bye for now.
05:11:04.360 - 05:11:48.340, Speaker B: Alright everybody, that was a fun project. I mean, who doesn't like a good programming joke app? I definitely had a few laughs, some of them I don't even get. But anyway, before we get too distracted, I want to do a code review and talk about two things from this project. Now the first one is this voice RSS JavaScript SDK. We use this as a way for us to have audio and have the robot speak the joke out loud. Now the interesting thing here is that we can actually separate this out into two files. For example, if I comment this out and I save, and I go back to the project and I say tell me a joke.
05:11:48.340 - 05:12:34.074, Speaker B: It no longer works because, well, we're not using that API anymore and I get a syntax error. What we can do now is in our index HTML file, have another script. In this script, let's call it Voice Js. And voice js will be a new file that we create. In my case, I already created it here. It's completely empty, but I'm going to copy this code and paste it in here and just remove the comments. So now there's a voice RSS and if I save this again, this is commented out in script js.
05:12:34.074 - 05:12:39.670, Speaker B: If I save this and run. Let's refresh our page and run this.
05:12:42.010 - 05:12:47.790, Speaker A: If Bill Gates had a dime for every time windows crashed. Oh wait, he does.
05:12:49.290 - 05:13:14.310, Speaker B: Oh, a classic Bill Gates joke. Hilarious. But you see that, that is working. Now. Why is that working? If we open up our developer tools here. So let's go view developer tools in our chrome browser and we go to network. If I refresh this page and you see here that I have documents selected, we want to make sure that all are selected.
05:13:14.310 - 05:13:52.560, Speaker B: We see that we have our script js that loads up, but right before that we have voice js. So what that means is that voice dot J s file has loaded before our script runs. Before this runs, voice js runs. And because this is a global variable, it's not inside of a function or inside of an object. We have access to voice rss. Let me prove it to you. If I go over here and I do voice rss, you see that I have access to this.
05:13:52.560 - 05:14:23.414, Speaker B: This is exactly what we had in our code. And this is because it's a global variable. So as long as the voice J s loads before script js, we are able to use the global variable voice rss. So now I can actually test this. If I move this line to down here would that work? Let's have a look. If I refresh and click tell me a joke.
05:14:23.582 - 05:14:36.700, Speaker A: A guy walks into a bar and asks for 1.4 root beers. The bartender says, I'll have to charge you extra. That's a root beer float. The guy says, in that case, better make it a double.
05:14:38.440 - 05:15:08.250, Speaker B: All right, that worked. But hold on. You're asking yourself, Andrey, you just told me that this code shouldn't work. I mean, voice J s got loaded. After script js, pause the video and think about why that still worked. Well, if we go to script js, you'll notice that when we call voice RSS, it's when we do the tell me joke. So in here we actually only use the tell me joke.
05:15:08.250 - 05:15:56.070, Speaker B: Let me close this out. We use the tell me joke when we do the get jokes function. And the getjokes function only runs when I click as a user on the tell me a joke button. So, because by the time I click the button, the voice RsS was loaded. That worked. But if I try to, let's say, console dot log voice Rss before I even click, when the script js initially runs, let's save and I refresh, I get an error. Voice RSS is not defined because remember, when we first load a project, our scripts run, my script js runs, and then voice js runs.
05:15:56.070 - 05:16:51.460, Speaker B: But script js because it runs before voice js, well, gets an error because this voice RSS doesn't exist yet. How cool is that? What we've just done here is we've cleaned up our code a little bit, right? We don't necessarily need to use voice RSS, this giant piece of code, which we've kept on a single line. In this file, we can just simply have a libraries JavaScript file that we load up before our main script file that we write runs. So this way we're able to separate our logic so that instead of having just one big JavaScript file, we can be more organized with our code. Now, the second thing I want to talk about is this API key. This API key is what we call a secret. This is valuable.
05:16:51.460 - 05:17:45.836, Speaker B: You see, most APIs, although this is a silly one, but most APIs that are useful cost money. Most companies create these APIs so that they can make money, so that their business is from having users that pay money to access some sort of data. Now, when we have an API key out in public like this, you don't really want to share that, because right now this API key is available to anybody in the world. So anybody can just copy and still your API key and use it. Let me show you this website. If we put it online, how can I find the API key in this code? Well, I would go to sources, go to script, and if I scroll up, yep, there's the API key right there. I can even do this on, let's say a website that I was visiting.
05:17:45.836 - 05:18:15.650, Speaker B: I can go to view page source which gives me the HTML. And then if I click on script js there it is. That's the entire script. And there's my API key. So in practice you never actually want to display an API key on the front end. This is a fun application, this is a fun API, so it doesn't really matter. But if you are putting your code on GitHub, you wouldn't want to include this in here.
05:18:15.650 - 05:19:08.752, Speaker B: Or let's say you are paying for an API. You definitely wouldn't want anybody else to find out about it. Now the way this is resolved is usually using some sort of a server. So you would create your own server or have a server that a client or a user can see, and we instead grab the key and instead run the tell me function. So that is this function over here that requires the API key. We run it on the server. This way the server is hidden from my users and because only we have access to the server, we can use the API key and then respond from the server to our front end with just the voice RSS, the actual data that doesn't include the API key.
05:19:08.752 - 05:19:21.420, Speaker B: Now this is an advanced topic so we don't really need to get into it. But I do want to mention that when it comes to API key, you usually never want it on the front end. I'll see you in the next one. Bye bye.
05:19:38.370 - 05:20:25.840, Speaker A: Alrighty, welcome to the project. So you can see that we have a pretty basic website here. We have some custom Google fonts, we have an SVG pattern, background from hero patterns, and you can see we have a navigation changes color as we hover over it. If we click on one of these, it will actually smoothly scroll to that section of the page. In this section we have some illustrations from undraw that match our primary color, which is orange. If we go to the next section we have a series of buttons here as well as a text box. And lastly we have a section with font awesome icons that also change color as you hover over them.
05:20:25.840 - 05:20:59.638, Speaker A: You might have noticed in the top right that it says light mode and we have an image of a sun. If we flip this switch it changes to dark mode and an icon of a moon. Very cool. We can see that everything has now changed color. So our background is black and our primary color has changed from orange to purple. And now when we hover over it is white instead. If we go back up, we can see our text box now has a white background instead of a black background.
05:20:59.638 - 05:21:55.978, Speaker A: All of our button colors have changed and even our undraw illustrations have changed from orange to purple. Very cool. So I will show you how to make your very own dark mode light mode website in this project. Let's get started. Alrighty, so let's get started. I've created another template for this project that includes most of the CSS as well as the image files in the example. This is different than the original template we've used for most of the projects, so make sure that you download it from the course you will need to unzip the file.
05:21:55.978 - 05:22:47.872, Speaker A: So I've done that already and next I'm going to remove the template from it just to show that I am now working on the actual project and I'm going to open it up in visual studio code. Okay, now that I have the project open, I'm going to open up each of the files and I'm going to close the explorer and we'll start with the index HTML. So the first thing we're going to do is we're going to change the title as we usually do. Light dark mode, save that and then we'll use our live server extension to launch the project. Okay, so you can see we have a white page, but we can see that our title has changed. Awesome. There's a few things I'll need to explain about this project as we're setting it up.
05:22:47.872 - 05:23:36.648, Speaker A: The first is an explanation of how I chose the colors for our light dark themes. So there's an interesting article that I will link in the course that talks about the Google material design themes, specifically their dark mode themes. This is one part of that article that is talking about on colors. So that is something that we will need to consider as we are working. We're going to have a primary color and then a primary variant that's going to be a darker color, a secondary color that complements these other colors, but is a different color. You can see that this is like a teal versus some shades of purple. We have our background color and then we have these on colors.
05:23:36.648 - 05:24:42.658, Speaker A: So these are designed to be the font colors and these are designed to be background colors. So if our background is black, it means our on background color would need to be white in order to be visible. There's lots more in this article that talks about color palettes and contrast and things of that nature, but because this isn't a design course, I'm not going to dive too deeply into it, but feel free to read more if you're interested. Let's jump back to the CSS and we can see the color palette that I've created for you. So as we jump into the code, we can see that we have a lot of colors here and they're written in a unique way. So we can see that we're using the root pseudo class and we're actually using CSS variables. So what that allows us to do is define all of our colors at the top and then use these variables within our CSS, allowing us to change all of the values of something like primary color all at the same time from the top of our code.
05:24:42.658 - 05:25:37.730, Speaker A: So that is why we have it all set up like this. This gives you an opportunity, if you would like to, to change up the colors. So you'll notice that there are two different sets of colors here and they share all of these variables in common. The one exception is box shadow. This is not quite a color, but it is something that it would be nice to be able to change all at once because we're going to use it in multiple places within our project. So on the top we have our light mode or default colors on our pseudo class root, which allows them to be recognized globally in our CSS, and at the bottom we have our dark theme colors, which we won't see until later on when we enable it in our JavaScript. So for now we're going to build out our project with the default colors.
05:25:37.730 - 05:26:26.018, Speaker A: The next thing we're going to do is we're going to set a background pattern for our project. To do that we're going to use the Hero Patterns website. A hero patterns website is a very handy tool. It is a collection of repeatable SVG background patterns for use in web projects. As it says in the description. What that means is because it's using scalable vector graphics, it is going to output its patterns as chunks of code, which means smaller file sizes and also the ability to scale at any resolution and still remain sharp. So this is a great tool that allows you to create many different backgrounds with many different patterns.
05:26:26.018 - 05:27:11.940, Speaker A: You can see as I'm scrolling through that there are a lot of different options. This gives you the opportunity to make your very own unique project and choose whichever one of these you would like. For me, I'm going to go with the diamond pattern. So when you click on that we can see that we have some generated code here and we can alter the foreground color, the background color and the foreground opacity. So to start with I'm going to lower the opacity as I do that. You can see the number change in the code above and I'm going to bring it down to 0.3. Next, I'm going to change the background color to be white because we want something for a light mode.
05:27:11.940 - 05:28:04.620, Speaker A: And I'm going to change the foreground color to something that is resembling our secondary color because our secondary color in light and dark mode are kind of similar. They're kind of like a teal color. So something kind of like that. And then I'm going to double check with the background to see that it looks good on a dark background as well. Yeah, I think that looks pretty cool. And we can leave it back to our light color and we're going to select this code and copy it. And now we can jump back into our project and we're going to scroll down a little bit and we're going to paste this within our body and we can use alt z word wrap to be able to actually see everything here and we can put this into place.
05:28:04.620 - 05:28:37.800, Speaker A: The background color is the first thing that we're going to change. So instead of using this set color, we're going to use one of our variable colors. So we're going to type var, then bracket dash, dash and then background. You can see it's autocompleting for us. We can just press enter. And while we're at it, let's change the color as well. So the color for our fonts and everything is going to be another var.
05:28:37.800 - 05:29:14.400, Speaker A: And this time dash, dash we want on background because we've set our background color to background of course. And let's save that and check it out. Alrighty. That is looking awesome. So the great thing about these SVG pattern backgrounds is that they automatically stretch to fill the entire space. The next thing we're going to tackle is creating the sections for our website. So feel free to use this project as a template and change up the sections and content as you like.
05:29:14.400 - 05:29:56.670, Speaker A: But I'm going to recreate my example of course. So I'm going to start by commenting out a title for my home section. Then I'm going to create a section element with hashtag for the id and then home as the id press enter. That's visual studio codes. Handy. Emmet autocomplete then within this section I'm going to create a div with the class of title group. And within this I'm going to have a title and a subtitle with an h one and an h two.
05:29:56.670 - 05:30:40.970, Speaker A: Below that I'm going to create about and project sections with just an h one in each for now. And then a contact section with nothing in it at the moment we're going to place our font awesome icons in there. Later on I'll just fast forward through that. Okay, so we can see that we have some css already in our template. We have our titles and everything centered within our section. You can see that also each section is at least a min height of the entire screen. That allows each section to have its own space.
05:30:40.970 - 05:31:32.340, Speaker A: Alrighty, so the next thing we're going to do is add our navigation within our HTML. So at the top here, we're going to comment out a title for our navigation and then we're going to use a nav element and give it the id of nav with hashtag nav, press enter and that'll autocomplete that for us. And then within our nav we're going to have anchor elements that are pointed to our section ids. So for example, the ahref for home would be hash home. And this will go directly to our home section. And I'm just going to fast forward as I write out the other three. Okay, so we can save that and let's just jump to our CSS to see that we have most of our navigation styling done already.
05:31:32.340 - 05:32:09.470, Speaker A: I'm just going to explain a few things here. So first, we have a z index of ten. This is allowing our navigation to always remain on top of every other element. By default, every other element has a z index of one. Next, we have our position fixed. This is to ensure that even as a user scrolls, the navigation stays at the top of the page. We have a padding, 25 pixels, which means we have a padding on all four sides of 25 pixels, so that we have a bit of a gap between the top, bottom, left and right of our navigation.
05:32:09.470 - 05:33:02.880, Speaker A: We have a width of 100 viewport width, meaning that it is as wide as the window. And you'll notice that we have our colors already filled in for our anchor elements with our variable colors. So by default our anchor elements will be the primary color and when we hover over them, they will switch to the on background color and they'll also add a border underneath. I have taken the liberty of adding these variable colors to the rest of the project just to make it a little bit easier. You will notice on the navigation itself that we're not using a variable color. This is because I'm going to show you how you can change the color within the JavaScript. You'll also notice that this is a little bit of a different syntax.
05:33:02.880 - 05:34:06.808, Speaker A: So instead of writing out RgBA and having commas between each color, we can actually simplify it a little bit, eliminating the commas and having a slash and then the amount of the opacity and writing RGB instead of RgBA. Okay, so let's check that out. Okay, so we have our navigation here, and you can see as we hover over it changes color. When we click on it, it jumps to the section. Now you can see why we wanted a minimum height for each section to at least be as tall as the window, so that each section is totally separate. But wouldn't it be nice if we could scroll smoothly to each section? Luckily in HTML there's an easy way to accomplish this with one simple line. So if we go back up to the top and we go to our HTML element, we can simply add scroll behavior.
05:34:06.808 - 05:34:32.082, Speaker A: You can see it autocompletes here. I'll press enter and we want it to be smooth. So let's save that and check it out. And now when we go to our section, we are smoothly scrolling down. Okay, awesome. So I think we've covered a fair amount in this video. Let's take a break here and in the next one we'll finish building the rest of our page.
05:34:32.082 - 05:35:14.050, Speaker A: I'll see you in that one. Bye for now. Alrighty. Welcome back. So as I mentioned in the previous video, most of the CSS is already written. This is because I expect that if you make your own project, you're going to change a lot of the content and therefore you'll need to change a lot of the styling. So the main thing I'm going to go over is all of the things that are customizable.
05:35:14.050 - 05:35:47.690, Speaker A: So far I've talked about the colors and the custom background. Next I'm going to talk about fonts, specifically using custom Google fonts. So I'll provide a link to this within the course. It's fonts dot google.com and you can see that there's a lot of different options here. So this is a perfect opportunity for you to put your own spin on the project and choose whichever fonts you would like. I have three fonts in mind, so I'm going to search for them and add them to the project.
05:35:47.690 - 05:36:13.148, Speaker A: So I'm just going to type in the name. The first one is Oswald. I'm going to click on it and I'm going to scroll down and I just want the regular. So I'm going to press select this style and I'm going to go back and I'm going to search for the next one. Okay. And I'm going to do the same thing. Okay.
05:36:13.148 - 05:36:42.630, Speaker A: And go back. And the last one. Okay. Yep, that's the one I wanted. And I will select this style as well. Now that I've selected multiple fonts, I'm going to click in the top right here to view, to view the selected families. Now that I've selected all three fonts, I'm going to go to the top right here and click where it says view selected families.
05:36:42.630 - 05:37:04.498, Speaker A: And you can see I have them all here. And I'm going to go over to embed. And specifically I would like an import statement. So I'm going to copy this right click copy. And I'm going to jump back to my css. And at the very top of my css, I'm going to paste this in. Okay.
05:37:04.498 - 05:37:46.970, Speaker A: We can scroll back to the left here, now that that's pasted in and we can start actually adding the fonts to our project. So in our body, I want to add font dash family. And this one is going to be comforta comma. I'm also going to add San Dash serif as a fallback just in case the font doesn't load. And below this, I'm also going to add in a font family for the h one. And this one is going to be my Kashan script. And same thing, I'm going to have sans serif as a fallback.
05:37:46.970 - 05:38:16.550, Speaker A: And let's save that and check it out. So that's looking a lot better, in my opinion. We have a nice bold title font. It's something very unique. And we can see that we have our comfort font here and here, but we're actually going to change that for our navigation. So one other thing I'd like to change is these are the same color. It would be nice if our subtitle was slightly lighter just to make our title pop a little bit more.
05:38:16.550 - 05:38:56.810, Speaker A: So if we jump back to our css and our colors, we can see that we have an on background color and an on background color alt. So this is the same color, but this is 70% opacity. So it's going to seem like it's a little lighter. So let's add our on background alt color to our h two. So remember var and then bracket, dash, dash, and then on background alt you see it autocomplete. So I'm going to press enter and let's save that and check it out. Okay, so you can see it's very subtle.
05:38:56.810 - 05:39:25.500, Speaker A: It's a little bit more of a light gray. And now our title pops a little bit more in comparison. Awesome. Next, let's change the font for our navigation. So if we scroll down right above our font size, we're going to add in our font family. This time it's going to be Oswald, comma sans serif. Let's save that jump back and that's looking a lot better.
05:39:25.500 - 05:39:53.360, Speaker A: Okay. Awesome. So we have our fonts taken care of. The next thing we're going to tackle is our illustrations. And for that we're going to go to the Undraw website. So the Undraw website is an open source project that provides modern looking illustrations. It's very straightforward and easy to use, and it also uses svgs, which will have the same benefit as our pattern background.
05:39:53.360 - 05:41:09.916, Speaker A: You can see that we have many different choices here, and we have a color changer here at the top, which allows us to add custom colors to any of the illustrations. So this is perfect for us because we can save two versions of the same image, one with the primary color for our light mode and one with the primary color for our dark mode. So once you have one that you like, you're going to click on it and download the SVG so you can see that you'll have an SVG file. If we actually jump back to our project folder, you can see that I've taken the liberty adding the examples for you, so you can see that we have one of each image that has a dark and a light mode color. And if you want to, you can simply use these within your project. But if you want to make your own, keep in mind that you'll need to save two versions, and you'll also need to add dark and light at the end of the file name so that we can trigger them in our JavaScript. So back in our HTML we can add the elements to the page.
05:41:09.916 - 05:41:53.560, Speaker A: Of course I'm going to use the ones from my example. We're going to do that in the about section, and we're going to start out making a div about container. So a div with the aboutcontainerclass. And then within that I'm going to create another div with the image container class. And within that I'm going to provide an h two for a title here. And then I'm going to have an image element with the id hashtag image one. Press enter and the source is going to be image slash.
05:41:53.560 - 05:42:27.514, Speaker A: And you can see it actually autocompletes all of the possible options here. In this case, I'm only going to use the light options. So I'm going to use proud coder light. And I'll just type in something for our alt tag just to be thorough. And a word wrap just so you can see everything here. And I'm just going to copy and paste this image container and add the other two images so I'll fast forward through that. Okay, so I can save that.
05:42:27.514 - 05:42:58.120, Speaker A: Now make sure that you're changing the ids of each because we want a unique id for each. So image one, two and three. All right, let's check that out down in our about section. Okay, that's looking pretty awesome. You can see that we already have our styling done for these. We have a border around the outside, we have our box shadow here, and all the images are sized correctly and spaced apart from each other. Awesome.
05:42:58.120 - 05:43:36.190, Speaker A: So we can move on now to our next section where we're going to show off some buttons in our text box. So let's jump back to the code. And for this we're going to again have a div to contain our buttons. So div dot buttons. And within that I'm going to create a button with the class of primary and I'm going to have it say primary on the button itself. And I'm going to make five other buttons designed to showcase the different colors. I will fast forward through that.
05:43:36.190 - 05:44:20.390, Speaker A: While I'm at it, I'm also going to add a text box below this. So div with the class of text box. And I'm also going to give it the id of text dashbox because we're going to target it within our JavaScript. And inside of this I'm going to have a p element and I'm going to show a neat trick to add placeholder text within visual studio code. We can simply type lorem and then press tab to have a block of placeholder text. So let's save that. And first we're going to jump over to our styling just to show everything that's already included.
05:44:20.390 - 05:44:54.290, Speaker A: So in our project section, we can see that we have our buttons class on our container. That's just adding a margin top and bottom for each of our buttons. We have this different styling here. You can see that we're using different colors for different buttons. So the primary color is the default. If we look at our secondary class we can see all of these secondary buttons are using the secondary color, of course, and you can see that it will change on hover. And you can see that for our outline buttons.
05:44:54.290 - 05:45:21.452, Speaker A: We have some different colors here as well. And we can see that for our text box. Again we have a non variable color. This is another one that we are going to change within our JavaScript. So let's jump over to the page and see how it looks. Alright, so that's looking pretty awesome. We have our primary secondary colors, we have a disabled button and we have ones with outlines as well.
05:45:21.452 - 05:45:49.260, Speaker A: And we have our text box here. Awesome. The very last thing we'll need to do is add the icons within our contact section. For this we're going to be using font awesome. This is another opportunity for you to add your own custom field to the project. If you're unfamiliar with how this works. I'm going to provide a link to the icons gallery within the course where we can search for specific icons.
05:45:49.260 - 05:46:58.072, Speaker A: In this case we're looking for social media related icons as they are prevalent on most websites. The great thing about these icons is that they are also svg, so they are small sizes that will stay sharp at any size. So we can search for something like GitHub and once we found it we can click on it and it's actually going to give us the code for our HTML right here. If we click on it, it's automatically going to copy it and so we can jump back to our HTML. So you might have remembered in our original template that we're actually including a link to the font awesome style sheet within the head of our document. Let's go down now to the contact section and actually add in the icons. So we're going to have a container for these which will be div with a class of social icons and we're just going to paste in our GitHub icon there and I'm going to repeat the process and add five more icons.
05:46:58.072 - 05:47:44.610, Speaker A: So I'm going to fast forward through that, but feel free to choose whichever icons you would like. Okay, so you might have noticed that these are made up of two different classes. One is fab and then it gets to the specific icon we want. Fab stands for font awesome brands, so that is specifically for companies and social media and things like that. Later on in our project we're going to use a generic solid icon which will have the class f A s. So let's save that and we'll just jump over to the CSS to just see the styling that we've included. We are actually going to use font size to make our icons bigger or smaller.
05:47:44.610 - 05:48:21.058, Speaker A: And you can see that we're using the primary color just like our navigation. And when we hover over it we're changing to the on background color again just like I our navigation. So let's jump to the page and check it out. All right, so that is looking very, very nice. Okay, so we're finally finished setting up our content of our website. In the next video we're going to look at actually adding our light dark mode switch and starting to get into our functionality. I'll see you in that one.
05:48:21.058 - 05:49:03.430, Speaker A: Bye for now. Alrighty. Welcome back. So we are almost done building out our project. The very last thing we're going to need to add is our custom toggle switch. So I created the custom toggle switch based on this example in w three schools, which I will provide a link to within the course. I have modified it a little bit, including adding our color variables.
05:49:03.430 - 05:50:05.700, Speaker A: So let's jump into the HTML and build it out. Okay, so first thing I'm going to comment out a title at the top of our body here and within this let's scroll down a little bit. We're going to start with adding a div with the class theme switch wrapper and within this we're going to have two different things. The first thing is we're going to have the text and the icon and then we're going to have the switch. So first we're going to have a span with the hashtag of toggle icon. So we're adding that id, meaning we're going to alter it using our JavaScript. And within that we're going to have another span, this time with the class of toggle text and we're going to have it say light mode.
05:50:05.700 - 05:51:11.170, Speaker A: And then below this we're going to add in a font awesome icon for a sun or moon depending on which mode we're in. So we're going to add an I element and we can manually add in the class of f a s. So this is our font awesome solid that I mentioned in the last video. And we're also going to give it a class of fa son. Okay, and next below that we are going to add a label with the class of theme switch. We don't need to worry about this for attribute and within this label we're going to add an input and the type is going to be checkbox because we just need the switch to work as on or off. And below that we're going to add a div with the class of slider and I'm going to add another class with another period of round.
05:51:11.170 - 05:51:44.820, Speaker A: So you can see there's a space. We have a slider class and a round class and that's pretty much it for our HTML. So we can save that and take a look at our style css. So we can see at the bottom of our project we have our dark mode toggle styling. One thing that might jump out at you right away is that we have a z index of 100. So you remember our navigation had a z index of ten. We want this to be on top of our navigation, so we gave it an even bigger number.
05:51:44.820 - 05:52:24.372, Speaker A: We also have position fixed, meaning we always want to see this in the same spot on the page. In this case it will be 25 pixels from the right and 30 pixels from the top. If we scroll down, we can see that our toggle text is using our on background variable color. And if we go down we can see here that we are actually monitoring when our input is checked, our checkbox and we're changing the color to become the primary color when it is checked. And lastly, we can see that for our fas font. Awesome. Solid.
05:52:24.372 - 05:52:50.100, Speaker A: We're again using font size to determine the size of our icon. So let's jump over to the code and check it out. Okay, so that's looking awesome. We have our light mode here, we have our sun icon here and we have our custom toggle here. And you can see that when we click it, it is now checked. And you can see we have our primary color here. Awesome.
05:52:50.100 - 05:53:36.522, Speaker A: So we're finally finished actually building the elements within our website. Now it's time to move on to the functionality. The first thing that we want to accomplish is we want to add an event listener to listen on this item for whenever it is checked or unchecked. And then we want to be able to run a function from there. So the first thing we're going to need to do is target our switch within our JavaScript. So we're going to do that by adding a constant called toggleswitch and that's going to be equal to document. Normally I would use getelementbyid, but you might remember we actually didn't add an id.
05:53:36.522 - 05:54:32.630, Speaker A: So I'm going to show you another way to select our checkbox and that is using document Queryselector. This allows you to select an HTML element of or a class if you want to. So we're going to type in single quotes input and I'm going to be even more specific and I'm going to use square bracket and I only want an input of type equal to checkbox. Okay, and we're going to add the square bracket there and the semicolon at the end and we can save that there. Now we're going to need to figure out the event listener. If we jump back over to our page here we can see that we're going to want to use a change event instead of a click event. So you can see that a change event is occurring when the checked state has been changed.
05:54:32.630 - 05:55:21.370, Speaker A: So if we scroll down we can see an example of an event listener here for the change event for our checkbox. Okay, so let's implement that within our code. Let's comment out a title here for our event listener. And we're going to use our toggle switch constant add event listener bracket single quote and we're targeting our change event. And then we're going to add a function called switch theme. We haven't made that function yet so let's make that above comment out another title. And this is going to in the end switch our theme dynamically.
05:55:21.370 - 05:56:05.730, Speaker A: Let's create the function and we're going to pass in the event and we're going to console log the event to see what we get when we click on our switch. So let's save that and check it out. We're going to right click and open up our dev tools. We can see that this project is not mobile responsive because again the main point is our light mode, dark mode. We're going to go into our console and see what happens when we click on our switch. So we can see when we clicked it it passed in our event. And if we open this up we can see that there's a lot of different information here.
05:56:05.730 - 05:56:50.688, Speaker A: So we're going to need to explore the target which is our input element. And if we go inside of that we are looking for our checked property. So you can see right now our checked property is true because we have the switch checked. Let's actually change up our console log to be a little bit more specific and actually get to this target checked value. So we're just going to add to our console log event target checked to see the value of that boolean from our checkbox. So let's save that and check it out. And we can see now every time we flip the switch it's true now.
05:56:50.688 - 05:57:45.342, Speaker A: False, true, false. Okay, so we are now tracking the value of our checked boolean what we're going to do is when our boolean is checked we want our dark mode, and when it's unchecked we want our light mode, which is our default mode. You might remember that within our css at the very top we had our two different sets of colors. Now you can see here that when our data theme is equal to dark, we are switching to these colors. So that's what we want to do when our checkbox is having a checked value of true. So how can we do this? So we will need to set this attribute at the highest level of our HTML. If we go back to our browser, we can see that.
05:57:45.342 - 05:58:31.726, Speaker A: I have another article here that explains that. Document documentelement returns the element that is the root of the document, for example the HTML element for HTML documents. So that will allow us to have the highest level element, and we're going to need to set the attribute of the dark theme on that element. So let's go back to our JavaScript and implement that. So instead of console logging this event target checked, we're actually going to add in an if statement. So if the event target checked. So this means if it's true, we want our dark mode.
05:58:31.726 - 05:59:32.734, Speaker A: So we want our document documentelement second option here, going to press enter and we're going to set the attribute just like we would on any HTML element, and we're going to add in the key and the value. In this case our key is going to be data theme, and then we're going to have a comma and then we're going to have our value, which is going to be dark. We'll add a semicolon there and then below that else. So if it is not checked, meaning if our checkbox checked equals false, we're going to have a similar thing, document documentelement dot set attribute, and we're going to use the same key data theme, but this time the value is going to be light. We'll add the semicolon there and we can save that and check it out. Okay, so moment of truth, let's test out our switch. Okay, awesome.
05:59:32.734 - 06:00:03.590, Speaker A: We can finally see our dark mode colors. Perfect. So we can see that most things have changed, our background color has changed. We can see that our illustrations haven't changed, our text box background hasn't changed, but our buttons have changed. And we can see that our icons have changed and our navigation has changed. We can also see that our light mode text and our icon hasn't changed. And our navigation background also hasn't changed.
06:00:03.590 - 06:00:50.500, Speaker A: So I will show you how we're going to manually change all of these things within our JavaScript. We'll do that within the next video. I'll see you in that one. Bye for now. Okay, welcome back. So we can see that we've finally have our switch working, but we still need to alter some styles and content within our JavaScript. So let's jump back and we're going to start by making a constant for everything we would like to change in order.
06:00:50.500 - 06:01:47.060, Speaker A: That is our nav, our toggle icon, our image, one, two, three and our text box. I'm going to be using getelementbyid for each of these and I'm just going to fast forward through that now. Okay, so we can save that now. After that's done we're going to need to use our switch theme function and actually call two separate functions, one for our dark mode and one for our light mode. So our first if statement we're going to add in dark mode function brackets semicolon and we're going to add a light mode function in here for our else statement. And above that we're going to start with creating our dark mode function first. So we're going to comment out a title and create our function.
06:01:47.060 - 06:03:13.950, Speaker A: And within this function the first thing we're going to want to change is the background color of our navigation and our text box. So first we're going to use our nav constant and we're going to target the style of our nav constant and we're going to change the background color and we're going to set that to a string with single quotes RGB. We're using our new syntax here, so zero space zero space zero slash and we want 50% opacity and we'll close off the bracket there, add a semicolon at the end and for our text box we'll repeat the same thing. Style dot background color is going to be equal to RGB and this time it's going to be white 50% so 255 255 255 50% bracket. Then we're going to add a semicolon there so we can save that for now. The next thing we're going to want to deal with is our text that says light mode, dark mode and the icon. If we jump back to our HTML we can actually see that we have the id here on our parent, but we actually want to change two separate elements within it.
06:03:13.950 - 06:04:14.760, Speaker A: So we're going to see how we can accomplish that if we go back to our JavaScript and we actually console log our toggle icon children, because that's what we actually are going to want to target and we jump back over to our code. When we flip the switch we can see our navigation is working and we can see our text box is working now. Perfect. But if we open up our console, we can see that we have HTML collection two and you can see that it returned our span toggle text. You can see it's highlighted here and our icon of our sun here as two separate objects within an array. So to be able to target these we can simply type children square bracket zero or square bracket one to target one or the other. So let's close this console and jump back to our JavaScript and do that.
06:04:14.760 - 06:05:15.360, Speaker A: So we want to switch our toggle icon, children bracket zero. So this is our text and we're going to use something called text content. This is a very secure way to change the text value of an HTML element of and in single quotes. We're just going to type in our string, which is dark mode. Then below that we're going to use toggle icon children square bracket one. And then this time we want to alter the class list so the CSS class that we have and we want to remove our fa son because that's the default class and we can actually copy this line and instead we want to add a different class. In this case we want to add fa moon instead.
06:05:15.360 - 06:05:40.816, Speaker A: So let's save that and check it out. Okay, so you can see again that it actually reset to our light mode. That's something we'll address later on. But if we flip the switch now we can see that our text content has changed to dark mode. And instead of a sun we have a moon. Perfect. We can see though that we still need to deal with our images.
06:05:40.816 - 06:06:23.030, Speaker A: So let's do that now. So as I mentioned before, we have two different files for each image. One is ending in dark and one is ending in light. So below this we're going to need to target our first image, image one, and we're going to change the source of our image. And this is going to be equal to image slash and then the path of our image. I happen to know it off top of my head, but you might need to look and see what it is. So it is undraw proud coder and the most important part, dark svg.
06:06:23.030 - 06:06:48.350, Speaker A: And I'm going to add in the other two as well. So I'll just copy and paste this and fast forward through that. Okay, so let's save that and jump back and check it out so you can see everything is orange here. And when we flip the switch, perfect. Everything is purple now. Awesome. So that's done exactly what we wanted it to do.
06:06:48.350 - 06:07:32.406, Speaker A: If we flip the switch back though, we can see that things have not changed back. So we have our dark mode still and we have our purple instead of our orange colors. That's because we have not actually made our light mode function yet. So let's do that next. So this is not going to be super difficult because we can actually copy our dark mode function and we're going to just change some things around. So first we're going to have light mode change the function name to light mode. And for our nav and text box we actually want these to be the opposite.
06:07:32.406 - 06:08:19.190, Speaker A: So this one is going to be white now and this one is going to be black. Okay, obviously our text content here, we want this to say light mode instead of dark mode. And we also want to switch because we want to remove our moon icon and we want to add back our sun icon. And then lastly we just want to change dark to light here. And we can do this quickly with a handy extension which is command d or control d that will select these similar occurrences. You can see that we have a cursor three times here. We can actually just type in light there to change them nice and quickly.
06:08:19.190 - 06:08:49.372, Speaker A: So let's save that and check it out. So again, it's in light mode by default, but let's switch to dark mode and when we switch back, perfect. Everything's working. So you can see our navigation's light mode, our Texas light mode, and our images have changed back to orange. Awesome. So that's pretty much it for the functionality. But if we go back to the code, we can see that we have a lot of repetition happening here.
06:08:49.372 - 06:09:34.008, Speaker A: And in modern development, something that we want to achieve is dry code, meaning do not repeat yourself. I would challenge you to pause the video here and see if you can figure out a way to refactor the code in a way that has less repetition. I will give you a hint. It includes adding a new function that uses template strings. So pause the video here and try and see if you can do it. Okay, so now I'll show you how I would refactor this code. So the first thing off the bat, let's look at our icons here.
06:09:34.008 - 06:10:08.604, Speaker A: Instead of having this as two separate lines, we can do it as one. So instead of using remove and add, we can get rid of our add line here and we can use replace instead. And we're going to pass in the first value, which is going to be sun. In this case, that's what we want to get rid of. And the second value is what we want to replace it with. So in this case it is moon. We'll need to copy this to our light mode function, but of course we're going to flip the order.
06:10:08.604 - 06:10:58.890, Speaker A: So we're going to replace moon with sun. Okay, so we've saved one line each in our function. Next you can see that for our image source we have this code repeating in six different lines. We can break this out into another function in order to save some space. So above this dark mode function, we're going to comment out a title for dark or light images and we're going to create a function called image mode. And this is going to take a parameter of color. And then within this function we are going to cut this and paste it in.
06:10:58.890 - 06:11:41.254, Speaker A: And instead of using just a string, we're going to use a template string and we can use our select trick so our command d or ctrl d to select our single quotes. And we're going to replace all of these with a backtick. That's the button right below your escape key. And so this converts it into a template string. The reason for this is we want to be able to actually pass in a variable instead of hard coding the entire file name. So we'll use our select again here to replace dark with dollar sign curly bracket. You can see it turned blue there.
06:11:41.254 - 06:12:23.094, Speaker A: And then we're going to pass in our color variable. And in order to actually make this work for each of them, we're going to call this new function that we've created, image mode. And we're going to pass in the string of dark in our dark mode. And we're going to pass in the string of light within our light mode. So let's save that and make sure everything is still working as intended. Okay, so we're in our light mode here and we switch to dark mode and our images have switched and we can switch back. All right, awesome.
06:12:23.094 - 06:12:43.180, Speaker A: So everything is working as intended. One last improvement. We can make it. Sure would be nice to not default to light mode every single time we open the page. In the next video, we'll explore how we can solve that problem. I'll see you in that one. Bye for now.
06:12:43.180 - 06:13:52.430, Speaker A: Alrighty. So in order to save our theme within our browser so that when we come back it's the correct theme, we're going to use something called local storage. You can see that I have an article here about it, which I will link within the course. But to summarize, it allows you to store data between sessions, meaning that if you turn off your computer and come back a week later to a particular website, your local storage data will still be there. In our case, we're going to be storing a string value that will simply be our theme of dark or light. So let's jump back to the JavaScript and see how we can accomplish this. So like our console, it exists within our window object and can be called directly.
06:13:52.430 - 06:14:31.052, Speaker A: There are a few different ways that we can use local storage. In our case, we're going to be focusing on two of them. We're going to set a value in local storage and eventually we're going to get a value from local storage. So let's start by setting the value to show what actually happens when you do that. So within our switch theme function, we're going to set a value for each of these. So first, local storage, you can see it autocompletes there, dot setitem. We're going to use the setitem method and we're going to pass in a key value pair.
06:14:31.052 - 06:15:14.610, Speaker A: So our key is going to be theme and our value is going to be dark. And we're going to copy this and we'll have the same thing below, except for this time our value is going to be light instead of dark. Okay, so let's save that and check it out. So we're going to open up our dev tools again and if we click on this arrow we can see that we actually have an application tab. And so this is where we can see what is stored in our local storage. If we click on the arrow we can see that this is the URL for our live server, the page that we're currently on. This will always be whatever the current page is.
06:15:14.610 - 06:15:44.740, Speaker A: So if we click on that we can see that we have a key and a value here. And let's see what happens when we flip the switch. Okay, awesome. We can see that we are saving our dark theme here and if we hit the switch again we can see that now the value has changed to light. Awesome. So the next step is that we always want to try to retrieve this value. So that's where the getitem method will come into play.
06:15:44.740 - 06:16:24.400, Speaker A: Let's clear this value though for now to pretend like we're a user visiting the page for the first time. So if we go down to the bottom we can comment out a title. We're going to check local storage for theme and we're going to create a constant for this called current theme. And that's going to be equal to localstorage getitem. And then in a string we're going to pass in the key, which in this case is theme. So let's console log this and see what we get. Console log our current theme.
06:16:24.400 - 06:17:02.206, Speaker A: Okay, save that and jump back. So if we open up the console, we can see that our value is null. So that is because you can see that we have nothing in our local storage. And when you first visit a website, you wouldn't have anything in local storage. So in order to address this, we're going to need to have an if statement for our current theme. We only want to run a function if we actually have a value for current theme. You can see if we actually went into our application and we flip the switch, we have a value here.
06:17:02.206 - 06:17:40.938, Speaker A: And if we refresh the page, you can see that we've stored the dark value, but you can see that we still have light mode here. So we're going to need to address that. So let's jump back to the code now and we'll remove our console log here. And we're going to add in an if statement. So this is something to keep in mind. Whenever you're using local storage, you want to check if it exists before you try to retrieve it. So if there's a current theme, we're going to want to use it to set our theme like we did above.
06:17:40.938 - 06:18:20.540, Speaker A: We can actually copy this, paste it in here, and instead of having a string for dark, we're going to put in our constant of current theme. So let's save that and check it out. Okay, so you can see that we are defaulting to our dark mode this time instead of defaulting to our light mode, which is an improvement. But we can see that our image colors are wrong and it still says light mode up here. And our checkbox is unchecked. We actually want this to be checked if we're in our dark mode. So in order to do this, we're going to need to add another if statement.
06:18:20.540 - 06:19:08.462, Speaker A: So inside of this if statement, we'll add if the current theme is dark. So equals to dark with three equal steins because we don't want to set the value we want to read. If it matches, then we're going to want to change the toggle switch's checked boolean value to be equal to true. So we're setting it as true using one equal sign. And we also want to use our dark mode function above because that's what's actually changing the images and the navigation background and everything else. So now let's save that and check it out. Okay, so you can see we defaulted to dark mode.
06:19:08.462 - 06:19:59.280, Speaker A: Our images have changed to dark mode or navigation. We have our text dark mode and we can see that our switch is checked and we can go back and forth and it's working perfectly. Another fun thing you might notice is if we refresh the page and you take a look at our switch here, is that it's actually sliding into position as the page is loading. And you can see if you look closely at the images that it will flicker orange before switching to purple. So we can see that it's doing it automatically flipping our switch for us. All right, so that's everything that we wanted to accomplish with this project. I hope you've learned a lot about the intricacies of applying themes, and I look forward to seeing your unique versions of the project.
06:19:59.280 - 06:20:04.040, Speaker A: All right, so I'll see you in the next one. Bye for now.
06:20:20.670 - 06:21:21.420, Speaker B: What, are you kidding me? How cool is this project? I know, I know, I love all projects, but come on, this is, this is pretty nice. I'm excited to see everybody's version of light and dark mode, but. All right, before I get carried away, let's do a bit of code review. Now, one thing you may have noticed in this project is that we are repeating ourselves a lot. And one of the biggest principles when it comes to programming, not just JavaScript, but just programming in general, is that we as programmers, our job is to make the tasks that are boring, that are constantly repeated, making them easy, making them automated, so that the machines do them for us. And this is what programming is, right? We write programs to tell computers what to do. And one of the ways that we want to use the power of programming is to not repeat ourselves.
06:21:21.420 - 06:21:58.524, Speaker B: When we program, we have the ability to do things repeatedly, really, really fast. Right now, if we look at the code, we see that we do the get element by id multiple times, multiple lines of code. We adjust the image source multiple times. The dark mode and the light mode kind of looks similar. I mean, yeah, sure we have a couple of properties different, but at the end of the day we're doing the exact same thing. So this code can actually be cleaned up. You'll often hear the phrase dry or do not repeat yourself in coding.
06:21:58.524 - 06:22:23.298, Speaker B: And that is a good practice. If you ever find yourself repeating things, copying pasting lines of code, and changing small things, that's usually an indication that you can probably clean things up. So how can we clean this up? We can do that for get element id. We can do that for source. But I kind of want to clean this up. The dark mode style and the light mode style. Let's create a new function.
06:22:23.298 - 06:23:07.910, Speaker B: And this says function toggle dark light mode. And this is going to accept an input whether it's dark mode or light mode. So let's just say is light as the input. And this input is going to adjust our navigation styles. So let's say that in here I'm going to copy this code. And obviously this is for the light mode. And I'm going to copy it for the dark mode or dark mode in light mode as well.
06:23:07.910 - 06:23:40.870, Speaker B: All right, so let's look at the first line. The first line is here, background color. So there's changes here just in the RGB value. So I can copy this and say if is light. So that is a ternary operator. So I can say is it light mode? If it's not, then I can do an or statement and just do this. So if it is light mode, then return this.
06:23:40.870 - 06:23:53.400, Speaker B: If it's not live mode, then do this. And again do the same thing for the next one. So I can remove this line. Nice. Next one we have background color. Again we can do the same thing. So let's just say is light.
06:23:53.400 - 06:24:28.608, Speaker B: If it's not, let's just copy like that and do the or statement. So either or next is the text content. So again, same thing. We just copy is light dark mode or light mode. And I see here that I actually have this. The opposite. So it's either dark mode if it's true, light mode if it's not.
06:24:28.608 - 06:24:50.386, Speaker B: So let's just say is dark here. Very. There you go. And then we can delete these slides now. And then the finally class list replace. So we have sun and moon. So this is going to be replaced based on whether it's dark or it's light.
06:24:50.386 - 06:25:12.108, Speaker B: So I can just say is dark. If it's dark, do this. Otherwise, oops. And I just realized it's not over here. It should be like this because that's how a ternary operator works is what happens when you record for hours on end. You start losing your mind. Okay, I'm getting distracted.
06:25:12.108 - 06:25:54.180, Speaker B: So we have is dark over here and then otherwise let's just remove this over here. So otherwise do the sun version. And finally is dark. If it's dark, run this. Otherwise run image mode light. So if we did this correctly, let's remove the dark mode and the light mode. And we now have this chunk of code.
06:25:54.180 - 06:26:20.400, Speaker B: So if we did this correctly, this should work. But there's a few things that we need to add. First, we need to say copy is dark and dark mode now is going to be is dark. Yes, we want that to be true. And let's say light mode. Dark mode is going to be false. We can probably name this better.
06:26:20.400 - 06:26:48.366, Speaker B: So we can maybe actually give it a variable, say have a let or a constant or a let variable that is darkest. But for now I think that's fine. So let's just make sure we have everything set. And over here for the local storage, just make sure we do the same thing. Dark mode is true. So if we take a look at the code, everything should be okay. Let's test it out.
06:26:48.366 - 06:27:08.270, Speaker B: Going to refresh. Okay. Yeah, look at that. Everything still works. If we open up our developer tools, no errors, that's good. So our code works as expected. And what we just did was we essentially cleaned up our code.
06:27:08.270 - 06:27:42.220, Speaker B: We have now just one function instead of two. But there's a few other things that we can probably fix. For example, we're doing the is dark question all over the place. There's probably small things here that we can adjust. We can improve some of this function, maybe some of the get elements by id. But just like that, we made our code a little bit cleaner and it's pretty nice, right? It says toggle dark light mode. Is it dark? Well, it's going to toggle based on whether it's dark or not.
06:27:42.220 - 06:27:59.170, Speaker B: Just like that. We are not repeating ourselves. So as a challenge to you, see if you can go through this code and see if you can clean up some of this repeated code and share your solutions in our discord server. All right, I'll see you in the next one. Bye bye.
06:28:14.960 - 06:28:58.898, Speaker A: Wow, you made it all the way till the end. Did you build all five projects? If so, drop us a link to your portfolio. We cannot wait to check it out. Why stop now though? Want to keep building more exciting JavaScript projects with Jacinto, Andre and thousands of other developers from the ZTM community? Then come join zero two mastery now and take the rest of Jacinto and Andres complete JavaScript web projects course where there are 15 more projects waiting for you. Oh, and the best part, joining zero to Mastery grants you access to our private discord community where you can engage daily with experts like Jacinto, Andre and the rest of our instructor team. Dont miss out. Click the video on your screen for a glimpse of our vibrant discord community.
06:28:58.898 - 06:29:14.770, Speaker A: One last thing, if you found this video helpful the least you could do is show Andre and Jacinto some love by dropping this video a like and letting them know your thoughts in the comment section down below. Alright, that's it for me and I look forward to seeing you inside the zero to Mastery Academy.
