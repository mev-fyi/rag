00:00:07.280 - 00:00:42.288, Speaker A: Let's talk about our next data structure. And this one is called a dictionary. In other languages, it might be called a hash table, maybe map or objects. In Python we have this idea of dictionary, or as Python likes to call it, dict. I have to make sure I pronounce that properly. That's a really hard word to say when you're recording and you're repeating it over and over. Anyway, dictionary, what is it? Well, it's a data type in Python, but it's also a data structure.
00:00:42.288 - 00:01:17.434, Speaker A: Remember that I mentioned this idea of data structure when we talked about lists? There were the first data structure in Python that we learned. It's a way for us to organize our data in a form that is has some different pros and cons on how we access it. For example, with lists, we saw that they're easily ordered. We can access them through indexes like zero, one. We can reverse them, we can insert into them. It was really, really nice. What about dictionaries? Well, let's see what a dictionary looks like.
00:01:17.434 - 00:02:01.808, Speaker A: A dictionary will look something like this. We'll have a key and a value, then another comma and then another key and another value. Let's decipher this. So I'm using curly brackets here, which denotes a dictionary. And unlike a list, we have what we call a key value pair. A key is a string for us to grab the value. What do I mean? Well, in order for us to access any of these values, I would go dictionary and then say the key.
00:02:01.808 - 00:02:36.622, Speaker A: In our case, let's say we want to grab b, we would grab the key, and then when we print here the result, we get the value two. We're essentially telling the computer, hey, I have this variable dictionary. Remember, I can name this whatever I want. I have this variable dictionary. I want you to go find the key b and this key b, if it exists, grab me the value. So it's going to go into your memory or into the machine's memory. It's going to find where b is stored in our memory and grab the value.
00:02:36.622 - 00:03:04.322, Speaker A: So in the bookshelf b, we have the value two. What if we do c, which doesn't exist. If I click run, nope, I get an error. It tells me, hey, sorry, you're looking for key c, but I don't really have that key. And this is what a dictionary is. A dictionary is an unordered key value pair. What do I mean by that? Unordered means that they are not right next to each other in memory.
00:03:04.322 - 00:03:42.396, Speaker A: Remember, with lists, we could access lists with index of zero, then index of one, index of two. All those bookshelves were right next to each other. A dictionary, on the other hand, they're all over the place. Although I've put a and b here. This might be in one spot in memory and this one in another spot in memory. And if I added, let's say, x, this will be in another spot in memory, and this might not be in order. Maybe I've written it a bx, but when I actually return the entire dictionary, maybe I don't have this in order.
00:03:42.396 - 00:04:27.776, Speaker A: These are all just scattered all across our memory, as you see here. When I receive the dictionary, I get these things in order, but that's only because it's small. If I had a really, really large dictionary, I might not have them in order that I've inserted it in. So a dictionary is an unordered key value pair. And as long as we know the key, that is whatever the key that we're looking for, then we just give that and our computer is going to know, hey, where in memory to look to grab the values. Now here's a cool thing about data structures like dictionaries and lists. They're containers around data, right? So this can be anything that we want.
00:04:27.776 - 00:04:48.164, Speaker A: Let's say we want this one to be a list. One, two, three. Maybe we want this to be a string. Hello. And maybe this is a boolean value, like true. That is completely valid. I can access the a like so and I get the list.
00:04:48.164 - 00:05:29.650, Speaker A: What if I want the second item in the list? Well, I do index of one like this. And there you go, I get two. And this is the same with lists. And you'll see this a lot where if we had a list, or let's call it my list, and my list contains a dictionary that has, let's say a one. And you know what? Let's just copy and paste this. We'll do this. So we'll have the first item in the array like this, then comma, then another item in the array.
00:05:29.650 - 00:06:08.980, Speaker A: And this time around, this one has four, five, six, so that I can now grab from my, listen, the first item in the array and then maybe grab the a, that is the a key. So remember this is a string. And then we want to grab, let's say the third item. So we'll go to run this, I should get three and two. There you go.
