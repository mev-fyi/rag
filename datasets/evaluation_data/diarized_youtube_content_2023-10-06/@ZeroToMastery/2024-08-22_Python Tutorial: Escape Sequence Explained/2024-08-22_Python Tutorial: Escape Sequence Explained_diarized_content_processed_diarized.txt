00:00:07.000 - 00:01:04.020, Speaker A: Welcome back. Let's talk about something called escape sequence in Python. Let's comment this out and let me ask you a question. What if we wanted to have a string that tells me, let's say the weather, and here we want to write it's sunny? Hmm. You see how the highlighting changed here? Because I want to say it's with an apostrophe s, but Python is reading this and saying, okay, this is the start of the string and this is the end of the string, and then I have no idea what this is. And then we're starting a string again. How can we fix this? Well, we can add a double quote string instead, and this now works.
00:01:04.020 - 00:01:53.990, Speaker A: But what if for some reason we also wanted to add its kind of sunny in quotation marks? Well, now we have another issue. So how can we solve this? Because in human language we have double quotes and I apostrophes. Well, we can use escape sequences here. And this is a little hard to understand at first, but it's simply adding a slash like this. So the one right above your enter on the keyboard. So this slash, when Python goes through it is going to say, all right, whatever comes after this, I recognize this symbol. Whatever comes after this, I'm going to assume it's a string.
00:01:53.990 - 00:02:36.062, Speaker A: So now if I do backslash here and then backslash here, it's going to say, hey, python, I'm letting you know whatever comes after this is a string. I'm letting you know whatever comes after this is a string. And then I'm letting you know what comes after this is a string. So that when we print the weather, everything is printed nicely. Awesome. Now, this escape sequence can be used in multiple ways. For example, if I want to have an actual backslash, well, I can go like this.
00:02:36.062 - 00:03:14.972, Speaker A: And because it's saying whatever comes after this is a string, it's going to assume that this is a string. Now, so if I run this, you see that we get this backslash, and there's a few other neat tricks that you can do with it. For example, one of it is the backslash t. Hmm, what does that mean? Well, let's remove this for now. There you go, the backslash t, remember? Well, let's add a space in here so we can distinguish. It is going to say, hey, whatever comes after this, I want you to add a tab. This is a special meaning here.
00:03:14.972 - 00:04:16.520, Speaker A: So if I click on run, you see that it's added a tab spacing to my string. Another one is using n or a new line. So let's leave t here and then add a backslash nde and then say, hope you have a good day. What do you think will happen here? If I click run, I have a tab from the backslash t, and then I have a new line after, kind of sunny because I do the backslash n, which denotes a new line so that this shows up on a new line. Now, these escape sequences are hard to see at first, but they're pretty much available in all programming languages that use strings. So if you come from another language, this shouldn't be that strange to you. If it's your first time seeing this, you just need to get used to this syntax.
00:04:16.520 - 00:04:29.470, Speaker A: And every once in a while go to the python documentation and just type in escape sequences and you'll see all the ones that we have. These are the main ones that you need to know. All right, more to learn in the next video.
