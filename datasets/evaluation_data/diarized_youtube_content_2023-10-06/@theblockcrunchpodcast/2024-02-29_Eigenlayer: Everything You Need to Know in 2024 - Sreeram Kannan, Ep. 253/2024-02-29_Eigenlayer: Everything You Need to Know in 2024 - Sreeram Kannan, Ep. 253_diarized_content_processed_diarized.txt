00:00:00.200 - 00:00:05.014, Speaker A: The most successful outcome for Eigen Lair would be web3 offers a brand new petri dish.
00:00:05.054 - 00:00:06.846, Speaker B: Our job is to buy great tech at great prices.
00:00:06.910 - 00:00:08.934, Speaker A: AI is also libertarian right?
00:00:08.974 - 00:00:11.246, Speaker B: Enable a use case that people haven't been able to do today.
00:00:11.310 - 00:00:14.910, Speaker A: The next hundreds of millions of players, they will come to the market through mobile.
00:00:14.982 - 00:00:44.268, Speaker B: My personal reason why I could be bullish in the next twelve months is. Hey everybody. Welcome back to another episode of the BlockFrench podcast. I'm your host, Jason Choi. I'm the founder of the Angel Fund Tangent, and everything we discuss on this show is not financial advice and not reflective of our respective companies opinions. Now, one of the biggest buzzwords of this year is restaking. And the go to project in this vertical is obviously Eigen layer.
00:00:44.268 - 00:01:21.248, Speaker B: Now, today, even before the launch of the token Eigen layer has already attracted almost $8 billion in funds deposited. This makes it the fourth largest protocol by total value locked according to defi llama. So already I'm getting a lot of messages from. From people saying it's either the most transformative thing to happen to Ethereum, but also increasingly more people are talking about potential systematic risk that comes with the concept of restaking. So as an angel investor in Eigen layer, these are the questions that I've also thought a lot about over the past few months. So I'm really, really excited and grateful for Sriram, the founder of Eigen Lair, to come on the show to chat with us today. So welcome to the show, man.
00:01:21.336 - 00:01:27.220, Speaker A: Hey, thank you so much, Jason. Really excited to be here. Looking forward to dive into the depths of the project.
00:01:27.372 - 00:02:04.748, Speaker B: Absolutely. So I actually stayed up last night, and I went through a lot of your tweets and a lot of the transcripts for your podcast interviews. And I realized there's actually so, so much to go over. But I guess before we dive into the meat there, I love to kind of dial the clocks back a little bit with start with the origin, because I know you've been interested in P two P networks before 2008 and doing your PhD there. And then you moved on to computational genomics, I think, later, and then stumbled into crypto in 2017. And I heard that you almost began your journey by building on Cardano first. So I'm curious, how did you go from that to deciding to build this kind of restaking idea?
00:02:04.836 - 00:02:43.320, Speaker A: Yeah, no, actually, like, we didn't. We didn't begin by trying to build on Cardano. The story goes back even further. So, you know, in 2017, 2018, you know, around end of 2017, actually, when I got to know about blockchain. My first reaction was, you know, is this some kind of like a speculative bubble that, you know, and last time I worked on peer to peer wireless networks, that didn't turn out well. So I was a bit skeptical of the whole premise because centralized systems are more efficient and they have a way to outrun decentralized systems. So that was the kind of starting point.
00:02:43.320 - 00:03:52.994, Speaker A: But when it turned, for me is when we realized that blockchains can basically help us coordinate in the absence of trust. And just like the Internet is the information superhighway, blockchains and crypto could be our coordination super highway. That was the kind of, like, operating model. And once I could see that, okay, actually, if trust is so central, if we can have a neutral, decentralized source of trust, that can be, like, really valuable. But, you know, the particular problems we were working on at that time was, how do you scale a consensus protocol? What properties can a consensus protocol have? You know, how would you build data availability or an oracle or other systems with various properties? What is the game theory for some of these things? What are the mathematical guarantees? This was kind of how we got introduced into it. And the obvious kind of thing we wanted to do was to get, like, you know, bitcoin or ethereum to use some of these ideas. And, you know, we were so far away from the space and had no real connections that we found it quite difficult to kind of understand, like, and interact with the crypto space.
00:03:52.994 - 00:04:42.112, Speaker A: And, you know, it appeared that the most kind of, like, the only way we were seeing that people from the academic background were getting into blockchain and crypto was actually going and starting, hey, you know, here's a new consensus protocol. I'm going to build a layer one blockchain around it. And we thought, okay, there's no other way. This is the only way to, like, take an idea at the level of a consensus protocol, because you can't build it as a smart contract on Ethereum because the whole point is to change the way that the nodes come into consensus. And so I said, okay, maybe we should build our own, like, layer one. And we were actually, we took a very purist approach, and we said, like, let's first actually build the whole system before we even do a fundraise. So we had a project called Trifecta where we built a blockchain.
00:04:42.112 - 00:05:31.542, Speaker A: We were running it on hundred nodes at that time. There's an MIT crypto economic summit video where we demonstrated running at, like, you know, hundreds of thousands of transactions per second, but that project never launched. And that's why, you know, if, if you're a listener and wondering, where is this trifecta blockchain? It doesn't exist. It was a, it only has had a short lifeline, you know, lifetime, as a kind of proof of concept. So I, because, you know, we, the questions that we got asked from investors and other people was, hey, okay, you got these hundred thousand transactions per second. Where is the user base? Where is the ecosystem? How are you going to build all of this out? And I said, I don't know, you know, if blockchain is a thing, you know, fast blockchain is a thing. And here is the thing that actually does it.
00:05:31.542 - 00:06:16.030, Speaker A: And from that point, actually, you know, one of the things that I realized is kind of like a fundamental problem for starting a new, like, you know, decentralized protocol is the source of trust, right? I couldn't just take it and throw it on top of ethereum. If it was like that. That would have been so amazing, right? Like, I just, just like you write a smart contract and throw it on Ethereum, let the blockchain, like, supplies the trust. So this is when I came up with this model that, you know, it's very simple once you state it. Basically like a general purpose smart contract. Blockchain is like selling trust and earning fees in return for selling trust and selling trust to whom? To applications. So applications are choosing to live on top of a blockchain because it's consuming the trust.
00:06:16.030 - 00:07:04.074, Speaker A: Okay? So once I understood this economy, the question was like, how can we do this more generally? Like, you know, more than just smart contracts? Can we kind of like take the same set of nodes, same economics and some more, transfer it? And we tried all kinds of things. Can you build it on bitcoin? You know, can you build it on Ethereum? And the original set of ideas we had were not really related to restaking. It was some kind of like a complex crypto economic game. But the core idea was, hey, now I know I can run a different virtual machine on top of a different blockchain. What would I do with it? And this was in 2021. And one of the things we knew we could do was to run EVM on non EVM blockchains. This was the starting point of the Eigen layer.
00:07:04.074 - 00:07:33.704, Speaker A: Project is we said, let's bring EVM to all the non EVM blockchains as a starting point. We took Cardano because Cardano was probably, it had a badly functional smart contract programming environment. At that time. What that meant was and it was very difficult for developers to build on top of it. If we had EVM easily virtualized on top of Cardano, that would be a cool thing. And you could do this on any blockchain. It was not specific to Cardano, but was a starting point for what we could do.
00:07:33.704 - 00:08:29.552, Speaker A: But as we were thinking about it, one of the things that clicked to me was if the fundamental thing is you want to have a common source of decentralized trust, then building on distinct source of decentralized trust is replicated effort rather than aggregated effort. The obvious place which was powerful and central for us to build was Ethereum. And so we wanted to then, like, think about what we would build on top of Ethereum. And at that time, I actually had no good idea for what to build on Ethereum. And the story is, you know, I had an interaction with Kyle Samani of multicoin and, you know, pitching this, this idea that you can actually do virtualization of EVM or non EVM blockchains. And Kyle, in his characteristic style, said, you know, evium is a piece of, you know, star, I don't want, you know, you should not be working on that. And I'm like, okay.
00:08:29.552 - 00:09:03.654, Speaker A: And then, you know, I said, oh, no, but you could run like arbitrary virtual machines on top of Ethereum too, like if you wanted. And then he said, no, this is some kind of an optimistic type roll up. It will never work. I said, like, why wouldn't it work? Because optimistic roll ups are going to be very expensive. I went back and we sat down with the team and we were trying to understand this peculiar statement. I didn't know at that time, went through all the optimistic roll ups, this is 2021, and found that the fees was much higher. And I thought ZK rollups should be more expensive because I have to give a ZK proof.
00:09:03.654 - 00:09:35.880, Speaker A: So why is an optimistic roll up more expensive? It was because of data availability and all the costs were going into publishing data on Ethereum. We then said, oh yeah, now it all fit together. We had been doing research on data availability for many, many years before that. So we said, I know how to scale data, let's just build that. So we said, okay, we're building on Ethereum, we'll build data availability on top of it. So now we have a killer application. So that was the beginning of how we decided to build on Ethereum, but also we wanted to build on Ethereum.
00:09:35.880 - 00:10:07.652, Speaker A: We just didn't have a good use case at that time. We didn't know what programming environment would be interesting. I had all these high level pictures where I'd say, oh, you can build AI, you can build databases, you can build gaming environments, all these things. But you know, you have to start somewhere where, you know, there is market traction. And we found that with data availability. So that's the origin of Eigen Da and Eigen layer on Ethereum. Add to this, what happened was we said, like, let's go to eat Denver, you know, we're going to eat Denver now next week.
00:10:07.652 - 00:11:01.410, Speaker A: But this was, you know, 2022, and go to Denver and hang out with all the people that I didn't know, anybody that I actually know, zero people in Ethereum at that time. And I connected with the vibe of Ethereum, which was decentralization, permissionless innovation, censorship, resistance. It felt like this community had a set of principles that they're anchoring on rather than either individuals or expediency towards profit or even a product, which felt very different to me. I came back and told a friend who was working in Google at that time, imagine somebody just goes to a Google conference. They're not a Google stock owner, they're not a Google programmer, they're not even a Google really application developer. They just feel like they're a Google person at the end of a Google conference. That's how I felt at the end of e Denver.
00:11:01.410 - 00:11:04.134, Speaker A: And so we decided to build on Ethereum after that.
00:11:04.994 - 00:12:04.486, Speaker B: Yeah, I think the three biggest lessons that I've learned over the past years of investing in this space is that Ethereum's greatest exports are three things, right? It's the liquidity of Ethereum is the programmability of EVM and the ideology of Ethereum. And it sounds like to me that when I first saw Eigen layer, I thought, okay, this is actually a project that helps expand this vastly beyond just the Ethereum chain itself. And I know you describe Eigen layer as a generalized mechanism for anybody to build arbitrary distributed systems on top of the Ethereum trust network. And when my normie friends asked me, okay, what the hell does that mean? I basically explained to them, well, you can stake your ethnic, and not just validate for the ETH network, but for any project that chooses to borrow the security of this stake. So I was actually quite fascinated because I feel like I've seen similar ideas before in Polkadot or Cosmos, this idea of shared security. So how much of the inspiration came from observing what is being done on other chains, what worked, what didn't work?
00:12:04.590 - 00:13:19.722, Speaker A: I would say that at least our own journey was from. We started from looking at bitcoin, where we were looking at, hey, can you borrow trust from bitcoin? And the set of ideas we got exposed to was mostly merge mining. The idea that you have a mining common mining power and a lot of energy is expended on mining. Can you reuse that mining for other, like securing other blockchains? This idea was called merge mining back in the day. And I think even Satoshi wrote about it in one of their bitcoin talk or whatever. And the thing is, we looked at merge mining, and one of the big incentive problems in merge mining is if you merge mine bitcoin and some other altcoin, the problem is you can attack the altcoin with impunity, because if there is an attack on the other chain, it doesn't do anything to my mining equipment or my bitcoin price is not affected by the attack that happens on this other chain or coin. So the crypto economics of bitcoin is very uniquely tied to bitcoin itself, which is that I have invested this bunch of money in, like, buying the mining hardware.
00:13:19.722 - 00:14:07.726, Speaker A: And therefore, if I do some big harm and a majority tries to do an attack, then my mining hardware may become useless because the BTC is not valuable anymore. This was not the case for merge mining. And so the realization came from, when you do staking, the dynamics are quite different, because staking comes with slashing. The equivalent of slashing is like going and finding out which miners behave badly and then burning their mining equipment. That's not even thinkable as a possible strategy. Right. The thing with staking is stake is intrinsically, like, you know, on the chain, and therefore, you can burn the stake for misbehaviors on.
00:14:07.726 - 00:14:54.002, Speaker A: On the chain. And this was such a powerful concept. And then we realized that if you had a general purpose staking mechanism, you can transfer the crypto economic trust to arbitrary other services much more easily. We didn't know about much of the other stuff, like Polkadot or even L2s or, you know, what was going on in Cosmos or avalanche at that time. But of course, later, as you start exploring these ideas, you find, oh, yeah, these other things are in this vicinity. And what we, I think, have built is the most generalized system for shared security, which is more gentle than all the other systems in the flexibility with which trust can be offered and shared. So that's how I would phrase it in relationship with some of the other systems.
00:14:54.178 - 00:15:23.734, Speaker B: Like any networks or protocols, there's many different stakeholders. So obviously, there's the restakers who are staking their ETH, and then also choosing to provide security with that stake to other applications. There's the operators that run the network. But I think the concept of the AV's is quite interesting and not something that many people in crypto have kind of really come across before Eigen layer. So can you help us explain what exactly are these AV's? Maybe that's a good segue to talk about the origins of Eigen DA as well.
00:15:24.234 - 00:16:04.964, Speaker A: Yeah, AV's is actively validated services. It's a term that we coined to explain what types of things can be built on Eigen layer. Because a lot of people look at Eigen layer, at least right now, in the context of some kind of a DeFi protocol. It was never intended to be a DeFi protocol. It was intended to connect stakers and operators to innovators, people inventing new distributed systems and decentralized protocols to borrow and share the trust and security. And we had to come up with an umbrella term. People usually think of these as chains, but we think chain is a very restrictive and a narrow way of thinking.
00:16:04.964 - 00:17:14.911, Speaker A: So we think of these as services and why service in the cloud? There is an analogous thing called software as a service, right. Software as a service is you write a piece of software, throw it on AWS or Google cloud, and let it run there. And as people are using the software, you pay for the cloud, but you also make money. And if the unit economics work out, then you're actually making money as a SaaS. But the most important thing for me in the structure of SaaS and cloud was how much open innovation that actually enabled, because you have the cloud and you don't have to think about all the hardware and like how to run it and how to scale it, and how to provision the enough amount of compute to actually run your services. What happens is you have a very powerful system where anybody can come and innovate and build new SaaS services and put it on top of the Internet. This led to super specialization, very, very narrow, specialized SaaS services that were built and lots and lots of people all around the world, like, you know, in places which could not compete on the hardware basis, could compete purely on a software basis.
00:17:14.911 - 00:18:01.992, Speaker A: And this is a very interesting, important thing that happened with the Internet. And so if you think of what is the analogous, analogous thing that can be done on top of the crypto blockchain infrastructure, that's what an AV's is. An actively validated service. An actively validated service is a service that you write, and it is anything that requires decentralized validation. These decentralized validated services are then managed by Eigen layer to make sure that all the node operators opt in. The enough stake is backing it. How much particular attributable economic commitment has been backing that service? All of this accounting is managed by Eigen layer, but as a creator, as an innovator, you can just write the service and put it on top of Eigen layer.
00:18:01.992 - 00:18:50.762, Speaker A: So that's the category of actively validated services. It includes something like running a new layer, one chain, but not exclusively running a chain. You may be running very specific services. And what might that service be? To take usual examples, it might be to run an oracle, which fetches data from the Internet, has a group of nodes agree that that's the correct data, and then put it on top of a blockchain. It may be a bridge which reads data from another chain and then moves it on top of another chain. It may be an AI service. You may be sitting on Ethereum and you want to request some AI inputs, and you need to run an AI inference to actually adjust the prices or something on top of your uniswap pool.
00:18:50.762 - 00:19:46.528, Speaker A: So these are all examples of services. There may be other much more nuanced and specific services that show up on Eigen layer, which we're already seeing. For example, we see things like proof of location. Proof of location is I want to know where these nodes are placed. Can I run a decentralized service to know the location of these other either operators or users in a decentralized manner? And how might the decentralized nodes know it? By sending network latency information like I send a packet, when do I receive it back? If I can receive it back within 30 milliseconds, it must be close to one of my locations, and many, many nodes can do it in parallel and triangulate where the nodes are. So that's a really interesting kind of piece of information. So, proof of location, that's an example of a service, but we've seen all kinds of different services, I would say like 20 categories of services that are kind of building on top of eigen layer.
00:19:46.528 - 00:19:55.512, Speaker A: So that's the AV's actively validated service is a category. I can go into some of these examples, but that's a high level overview.
00:19:55.608 - 00:20:24.784, Speaker B: Yeah. And given how diverse these use cases can be, I'm curious. And this is something that a lot of people are discussing as well in terms of the security assumptions, because you mentioned the concept of slashing. So let's say if someone is restaking for like 20 different applications. One of those applications happened to do something bad and the validator has to be slashed. What does that process look like? And how do we think about the implications for the entire eigen layer stack?
00:20:25.924 - 00:21:36.400, Speaker A: The way to think about it is slashing is encoded into smart contracts that talk to the eigen layer contract. Whenever a staker is opting into a new AV's, they're basically opting specifically into an AV's contract. And the AV's contract specifies the conditions of registration, the conditions of payment, and the conditions of slashing. So basically, who can come in? What's the positive incentive? What's the negative incentive to do this stuff? And those are encoded in the AV's contracts. And so now when a staker opts into a bunch of AVss, what they're actually saying is I'm opting into these bunch of conditions of like positive and negative incentives, and I need to do this bunch of work to actually keep up my positive incentives. And if the contracts, if the slashing conditions are written in code on Ethereum smart contracts, and, you know, for a moment, let's assume there are no code programming errors, which we have to deal with. But you know, then essentially what you're saying is you're opting into rigid, objectively verifiable slashing conditions which are returned in code on Ethereum.
00:21:36.400 - 00:22:32.720, Speaker A: And what that means is if I know that I'm running the software correctly, I won't get slashed by this contract. In fact, I may even run a piece of code we call an anti slasher. What an anti slasher does is whenever I issue a signature, it checks that this signature will not trigger slashing before it issues the signature. This kind of an anti slasher can be done locally, and so you know that you will not get slashed if you actually, if the contracts are correctly returned. So that's the first level, which is as a staker, you're opting into objectively verifiable, rigid conditions return as smart contracts on Ethereum. So the trust model is very similar to the other kind of trust model when you're going and opting into a uniswap or aave or any of these kinds of defi protocols. But to protect users even more, we have another layer of protection because we know that code can sometimes be buggy.
00:22:32.720 - 00:23:11.616, Speaker A: And we see this all the time in crypto. Like sometimes a protocol has a buggy code and then suddenly people lose their funds. And this is something we are taking a cautious approach to. And the way we take the cautious approach is by actually having what we call a slashing veto committee. This is a committee of external parties, experts in kind of protocol design, who can actually vet whether the contract triggered the slashing for a, you know, on, on, on the actual protocol or it was a bug that led to the slashing. If it is adjudicated as a bug, slashing does not happen. So therefore, slashing requires two distinct things.
00:23:11.616 - 00:24:10.984, Speaker A: The objective contract to trigger the slashing and the kind of human committee to approve it. Otherwise, slashing is not fulfilled. So we, you know, in the balance of powers between stakers and AVss, we lean on protecting stakers, because stakers are basically underwriting the system with their own risk. And the guarantee we want to give to a staker is if you are not malicious, you will not be slashed. So slashing is there only for absolutely attributable actions that the staker or operator took which are malicious, not for regular operations where they made a configuration mistake or the program had a bug or anything like that. So because, you know, when you're building a pseudonymous system where anybody can come in and participate, you need to protect the system against like malicious actors infiltrating the system. So you need a system of karma, like positive and negative incentives to keep the system going.
00:24:10.984 - 00:24:35.496, Speaker A: And that's what Eigen layer does, is make sure that as a staker, you don't have any incentive to try to like, attack the system, whereas also make sure that AVss, you know, have no agency to attack the system, even if they put in a buggy code. Firstly, they have to put in smart contract code, not like, you know, have arbitrary adjudication conditions, but smart contract code. And then even then, there is a backstop in terms of a common slashing veto committee.
00:24:35.680 - 00:25:12.294, Speaker B: My guess is that a lot of people who are kind of, you know, concerned about systemic risks that Eigen layer could introduce are almost confusing the concept of restaking with the concept of re hypothecation, because they see this concept play out a lot in defi, where somebody has a bunch of collateral and they use that to margin to do some sort of lending or borrowing, and then they use the stuff they borrow to margin again and borrow more and more and more. But this is something fundamentally different than that, right? So if you do get slash, it's not like everything, just like every single app that's tied to that stake suddenly just like collapses and stop functioning. Just to make that very clear to our listeners.
00:25:12.874 - 00:25:51.854, Speaker A: Yeah, absolutely. I think there are lots and lots of differences. I think to take the kind of comparison between the two two things you just laid out. Imagine you take, people are thinking by restaking into 100 protocols is the same as like taking a hundred x leverage position. Actually, these two concepts are not at all related. And the easiest way to see it is if you take 100 x margin lending position, if the market price of that asset moves 1%, you will get liquidated, you will lose your entire position. Whereas if I opt into 100 protocols, and I don't act maliciously on any of them, I will never get slashed.
00:25:51.854 - 00:26:30.846, Speaker A: It's a completely different thing. And maybe this analogy that I recently came up with may be useful. Imagine you go into a store, you go into a mall, and then there is this main store that says that, hey, you have to put up a deposit. If you come and steal anything here, you will lose your deposit. And then I come in and say, hey, anyway, the main store, you're putting up dollar 100 deposit to enter. Why don't you make a promise that with this hundred dollar you will not steal anything? Even on the other smaller stores in the mall, they say, yeah, now it's in your control to not steal at the mall. It's very different from taking a margin lending or any other kind of financial position.
00:26:30.846 - 00:27:13.854, Speaker A: So the risk is endogenous to the staker except smart contract risk. And smart contract risk is just pervasive in all of blockchain. And that's just what it is, right? And even that, we are trying to build a very cautious, governed system in the beginning. Over time, these governance features can be removed. But that's the trade off that we are taking, is be cautious in protecting the stake. So to take another, like, mental model that people have, which is, I think, very erroneous, when 100 protocols are sharing common stake, the model is, oh, you know, maybe there's no risk from the staker side, maybe there's a risk from the protocol side or from the AV's side. And I think this is also erroneous.
00:27:13.854 - 00:28:10.374, Speaker A: And the reason is, if there are 100 protocols, each of which can sustain $1 billion staking on their own, let's say that's the 100 protocols. And so, which means they're paying some amount of fee which is sustaining that amount of stake in their platform. Now, if you aggregate all of this and create a $100 billion pool, this can be restaked across 100 protocols. The fee is identical to the previous world because, you know, you're paying the same fee and you're able to sustain $100 billion. Now, to attack any one protocol, you need $100 billion, rather than requiring $1 billion, security has this non linearity, where the more stake you need to do an attack, the more stake you need to actually profit out of and escape in real world. With all this kind of crazy stuff becomes impossible. There is no liquidity on an exchange.
00:28:10.374 - 00:28:42.892, Speaker A: There is no tornado or whatever to go and hide your transactions. It's simply not possible to pull off an attack beyond a certain scale. So there's hardening of security that actually happens at scale. So that's the other, I think, model which is missing, because when people are thinking about 100 protocols sharing the same stake, they're thinking the amount of stake is going to remain the same as the number of protocols increases. But that's not the case. As more and more protocol bring more and more fees, the amount of stake will keep increasing. So this is a market equilibrium.
00:28:42.892 - 00:29:25.934, Speaker A: And another feature that we're building with Eigen layer is what we call attributable security. When 100 protocols are sharing a common pool of, let's say, $100 billion of stakeholders, there may be one protocol that says, hey, I just not only want to have this pooled security, but I also want to have unique attributable security just to myself. Which means even if all the protocols get attacked simultaneously, I should be able to slash and redistribute, let's say, $10 billion. Because I'm Coinbase. I want to be very sure, I want to be able to slash and redistribute $10 billion on my own. You can do this on Eigen layer. Eigen layer gives you an ability to express both unique attributable security as well as pool security in a common system.
00:29:25.934 - 00:29:39.066, Speaker A: And the power of pool security is very similar to why, like nation states have like security functions, cities don't have security functions is because there is a hardening of security at scale. So that's the basic principle.
00:29:39.170 - 00:29:57.632, Speaker B: And I think when Vitalik was discussing Eigalaya recently, I think the two kind of areas to look out for that he mentioned were the security and the centralization aspect. So I think we talked a lot about the security aspect. What are some considerations that we should have when we think about the centralization that Eigen layer might or might not introduce?
00:29:57.808 - 00:30:35.054, Speaker A: Yeah, I think this is a much, much more nuanced topic. I'm glad you brought this up. There are various layers of decentralization that protocols like Ethereum may want to have, and the most, I think direct is operator decentralization. Does Eigen layer contribute to more pressures for operators to centralize maybe there are only a few operators when there are lots and lots of services that need to be opted into. And the answer to this is.
00:30:37.754 - 00:30:38.042, Speaker B: In.
00:30:38.058 - 00:31:39.230, Speaker A: The structure that we are building in Eigen layer, we want to minimize the pressure to centralize. So this is a kind of like an operating principle that we are taking in building Eigen layer. And, you know, if a different team was building Eigen layer, they would operate on maybe different principles. But like I said, we came into the space because of, like, you know, particularly building on Ethereum, because of the shared values. And so one of the particular things we do is, can we try and encourage services which do not require a lot of computational effort? And this is how Eigen Da, the first service, is built on Eigen layer. Eigen da is built to be horizontally scalable, which means as you increase the number of nodes, the system's performance keeps increasing, rather than I need to have a lot of node requirements on each node to satisfy a certain amount of bandwidth. So, for example, systems like solana scale, by vertical scaling, each node needs to have more and more in order to actually do well.
00:31:39.230 - 00:32:28.148, Speaker A: And Eigen da scales horizontally, which means the total performance of the system is the product of the amount of bandwidth available in a node times the number of nodes. So you can increase it by like increasing the performance of a node, or you can increase it by increasing the number of nodes. And because the system is horizontally scaling, decentralization itself becomes scalability. The more nodes you have, the more bandwidth you have, and therefore you can scale. So, this is a principle that we used to build eigenva. Okay, beyond that, what can we do to encourage decentralization? And I think over time, what will happen is there will be services that require more centralized operations, there will be services which will require more decentralized operations. And I give us this example, the secret sharing.
00:32:28.148 - 00:33:13.100, Speaker A: Imagine I have a secret, and I want to store it in a decentralized network. So each node has a little bit of the secret. If all the nodes were just the same party, it was all just coinbase, like running hundreds of nodes, then I don't get any secret sharing benefit. It's the same guy, just like running 100 nodes and storing portions of the secret. So if I'm running a secret sharing network, I actually want decentralization. And so one of the really powerful things we're building with Eigen layer is expressivity and flexibility. For a service to specify that they only want, let's say, more decentralized operators, how do they know which operators are more decentralized? They can choose to use the oracles of their choosing to decide which are more decentralized and which are more centralized.
00:33:13.100 - 00:33:54.882, Speaker A: Maybe something as simple as I want to exclude all the exchange nodes and I want to exclude all the major LST nodes, maybe a thing that somebody wants to do. So there are lots of expressivity in the Eigen layer platform. And if decentralized trust actually has utility, which is what we all believe, Eigen layer creates a marketplace for the decentralized nodes to potentially even more earn more than centralized nodes. Because you can't go to Ethereum today and say, hey, I'm going to pay a transaction fee. But this transaction fee only goes to home stakers. That's not a thing. Your transaction fee goes to whoever picks up the transaction and minds it.
00:33:54.882 - 00:34:28.494, Speaker A: But on Eigen layer, you can actually do it. You can actually say like, hey, I only want to build an oracle which uses the home stakers. And, you know, so we will find out the market value of decentralized trust by actually allowing Eigen layer to exist. And our thesis is, you know, there is enough interesting things to be built that decentralized trust has a real value. And actually, for the first time, very first time in Ethereum, decentralized nodes could earn something more than centralized nodes. Still now always the centralized nodes are better.
00:34:28.614 - 00:35:15.905, Speaker B: Yeah, that's actually a huge reason why I was very excited to invest in Eigen layer is because one of my big thesis is, I believe crypto is the best way to create a market for anything. And I think this is the first market for actual decentralized trust. You can actually put a value like a dollar amount fee value on how much people want to pay different type of stakers and what sort of centralization they actually want to see beyond the posturing you see on Twitter, because now people can put the money where their mouth is. So I'm very excited for that. And I love to kind of talk about the commercial aspect as well, because one trend that I saw in the past few years is projects verticalizing into their own infrastructure. So you see dapps like Dydx becoming their own chain. You see some guilds or games like Merit circle verticalizing into their own chain.
00:35:15.905 - 00:35:43.634, Speaker B: So it seems like the market is almost rewarding projects for becoming infrastructure, for verticalizing and creating their own l one s. So this is almost, would you say this is kind of antithetical to Eigen layer, since Eigen layer is basically telling everybody that, hey, you don't need to do that. You can just simply use existing security from Ethereum. So from a commercial angle, what drives founders of AVss of apps to use Eigen layer versus becoming an l one or l two themselves?
00:35:44.054 - 00:36:51.804, Speaker A: The way to think about it is if you are an AV's founder, what are the choices on the table? Option one, build with your own token and your own trust network. And option two, build on top of an existing trust network like Ethereum Eigen layer and deploy your service. And in the simplest world, one would say maybe a lot of avss would want to get started off as the second one, which is use Ethereum and angular and find product market fit and then maybe go and do their own thing. So one of the things we did as we thought through, what are the incentives of the protocols? We know that crypto runs on incentives. If the incentive is not aligned, people are not going to come and build on top of us. One of the things we did is to break the binary choice between, hey, I stake my own token or I get security from Ethereum. We support natively what we call dual staking.
00:36:51.804 - 00:37:53.534, Speaker A: Dual staking means ike as an AV's can borrow trust from two distinct parties. One is stakers of my own token, whose interests are directly aligned with, like the protocols well being, because, you know, they have exposure to the token and a neutral high value quorum, which is coming from Ethereum. So we have this dual quorum model, which is a very popular model among the many AVss. Even if they're launching on a single ETH quorum to begin with, over time they have the idea to actually build their own other quorum. And instead of forcing a binary choice where we say, oh, either you choose your, your own token quorum, or you choose, you know, the ETH quorum, you can say, oh, I'm sending 80% of the fees to the ETH quorum and 20% to my own quorum today. And over time I'm going to maybe spend, send more to my quorum and less to Ethereum. Maybe at some point I may even send zero to the Ethereum quorum and send all the value to myself.
00:37:53.534 - 00:38:54.864, Speaker A: So what this means is specifically, if you try to use some kind of a discounted cash flow model to try to value, like an AV's, you know, a token, you might say that the total value that can be accrued by the AV's because you have. And the thing is, this decision between how much value goes to the AV's token versus how much value goes to ETH is decided by the AVss governance, which, which will be in their own native token. So the at the end of the day, Eigen layer is continuous and pure optionality. Like you have the option to use ETH if it is beneficial to you. You have the option to opt out if it is beneficial to you. And what this does is it breaks this binary choice. And in this world, the value of the AV's token with Eigen layer is actually only greater than the value in the absence of Eigen layer, because adding an option to consume additional security in a way that you can opt in and out as needed doesn't increase your cost basis.
00:38:54.864 - 00:40:08.114, Speaker A: That's the first thing is the dual token model basically completely breaks this artificial trade off and makes it very, very smooth for people to borrow as much security as they need to keep their platform in continuous utility. In this case, one of the downstream questions I get is, does it mean that over time, services will launch on ETH Quorum and eventually just migrate on their own? And this is really a question of whether Eigen layer is viable not only as a bootstrapping platform for avss, but also as a continuous service platform for avss. And so it's incumbent on us to find ways to create synergies across these avss in a way that they actually want to stay rather than they're stuck with us. And, you know, we have this, you know, entrenched monopoly to like keep this platform going. And there are many interesting ways we can actually do it. And one way I pointed to examples of the cloud early on, and one of the really powerful things, Amazon's cloud is called EC two, which is elastic cloud compute. And elastic compute is the idea that I can borrow as much compute as I want.
00:40:08.114 - 00:41:02.940, Speaker A: And eigenlayer is elastic scaling of security. If Amazon's EC two, like Eigen layer is es two, and es two is basically elastic scaling of security, which is you can borrow how much security you want. And so why is this meaningful? Imagine a bridge who's doing a weekly transaction volume of like anywhere between 10 million and 200 million. Okay, so now how much security do I need? If I have to provision security separately for the bridge, I need to provision, worst case, 200 million. So I need to have 200 million of security just for my bridge. But in the Eigen layer worldview, there is this common huge pool of security. I can randomly pull the amount of security that I want exactly like the cloud, which amortizes across all the services, creating a big compute platform from which you can pull the amount of compute that you want randomly.
00:41:02.940 - 00:41:52.750, Speaker A: And that's exactly what happens with Eigen layer. So this reduces dramatically the cost of security because you're not over provisioning for the worst case, you're, you're consuming security just in time how much you need. This is one benefit of Eigen layer. There's also all kinds of other benefits where what happens is if adapt consumes multiple Eigen layer services, I want an oracle, I want a DA, I want some other thing. Instead of paying for security separately for each of these services, they can just pay one time because the same pool of security is backing all of these services. So there is an economy of scale in Eigen layer that actually incentivizes services that kind of are mutually synergistic to stay together. So these are, you can create almost what I call like a x market bundling.
00:41:52.750 - 00:42:39.414, Speaker A: Like instead of bun, somebody could have thought and said, oh, let me create a new middleware which is an Oracle plus da plus AI together. But who knows how to build an Oracle plus da plus AI together? In today's market condition, like figuring out how to build one is already a huge lift. So the Eigen layer allows post market bundling of these services into like useful things that services can consume, reducing the cost basis as well as offering a consumer segment across these different services. Just like you go to AWS and you have a bunch of SaaS services and you just hook into like five. A statistic is a typical web two app has 15 SaaS services integrated in the backend. Something like that could happen on Eigen layer.
00:42:39.534 - 00:43:09.554, Speaker B: I think another under explored incentive for developers to stick around with eigen layer long term is the fact that it enables new primitives to be built. One such new primitive that I came across on Twitter is this idea of coprocessors. For instance, you talked about this idea of intelligent DeFi as well, which is not something that at least I don't think you can build without Eigen layer. So can you kind of break us down? What exactly is a coprocessor? And what did you mean by intelligent defi?
00:43:09.714 - 00:44:18.700, Speaker A: Yeah, a coprocessor is kind of like a L2 system, but L2 normally you think of as like a chain. So this is one of the reasons I don't like the chain terminology. So imagine I'm sitting on Ethereum and I'm writing a smart contract program, and maybe I'm on uniswap. And you know, one of the things I want to do is instead of doing passive liquidity provisioning, which is I just put it into a pool and fix a certain price level at which I'm provisioning liquidity instead. I want to dynamically move around the liquidity. But then the question is, who is doing it? Are you an active participant? Are you a passive participant? What is going on? What might happen is somebody may come up with a machine learning or an AI protocol which takes the history of all the transactions and moves around the liquidity like provisioning spectrum based on these hard inputs on the blockchain. Imagine that I can actually get high integrity provision of the service, which means when the service says that this is the right, like if I ran this AI on this history and this is the output I get, and it's absolutely correct.
00:44:18.700 - 00:45:41.130, Speaker A: If you had this access and what you could do is you could write in your defi program that, hey, I'm a passive provider, but I'm provisioning liquidity to this AI protocol and I'm just hands off after that point, and the AI sits and keeps adjusting your liquidity range. This is a really interesting service if it could be built, but it's not possible to write this in EVM or fit it into the small gas limit of ethereum. But if I had an Eigen layer service that I can sit and call on top of, like Ethereum, these nodes run the AI service off chain and sign off on the output of this AI service and then put it on top of Ethereum, back it with a certain amount of economic security. Now you have a rigid input that the protocol can take and move around this liquidity based on that, this becomes really, really powerful because now we called this thing smart contracts. And smart contracts, as they exist today, are rigid, but not that smart. Not that intelligent. Smart means, is it an agent? Is it doing complex adaptations? You have to write it in simple, easy code.
00:45:41.130 - 00:46:33.314, Speaker A: Uniswap has this curve called XY equals k, which is like the first kind of simple programmatic thing that one might think of. And what if instead, like, you had a complex expressivity while not giving up rigidity or correctness? How can I get smart and accurate execution simultaneously? And that's what eigen layer promises. There are other technologies like ZK prooves, which could give you this, but they're very, very expensive today. You know, running a ZK proof may be as expensive as 100,000 times just running the software. You know, this is, this is possible for simple applications, but when I'm, when you're talking about running complex AI, this cost just like blows up out of control, whereas on Eigen layer, you don't incur such a cost. So that's, that's the idea of crypto economic co processors.
00:46:33.394 - 00:47:07.792, Speaker B: I'm going to link your tweet in the show notes below as well for anyone who wants to check out this idea, because I think this is one of the more interesting directions that DeFi can take that can really revitalize. Um, now, Sriram, I think my last question for you, just to wrap us up, is, uh, let's assume that there are many parallel realities, and we're able to zoom out and see all these realities. And in one reality we have Eigen layer at its most successful. And then one where everything's gone wrong. Something has, you know, horrible habit, something horrible has happened. So what would Eigen layer look like in these two universe? Like, what is the most kind of successful outcome you can see? And the least successful outcome for Eigen layer?
00:47:07.848 - 00:48:34.652, Speaker A: The most successful outcome for Eigen layer would be that, you know, it accelerates this whole crypto vision, which is that we can actually enable anybody to come and build new and interesting services on top of a common coordination layer. And so what that means is you have this rich world of not only like we talk about end users owning assets, but also developers owning the platform, or like, working on immutable platforms on which they are building their projects. So their long term source of sustenance is actually, like, really rewarded. So many people coming and building new, interesting services, you know, a rich and vibrant economy of consumption of these services to build things like the open metaverse, to build our decentralized AgI, to build things like, you know, secure, private homomorphic encryption, all kinds of interesting things running on top of this common substrate. So that's what the most successful, interesting world for Eigen layer looks like. What is the most catastrophic thing that can happen? We think about this a lot because we want to make sure that we maximize the likelihood of the successful outcome and minimize the likelihood of the catastrophic outcome. What would a catastrophic outcome be? Something got hacked and people lost money.
00:48:34.652 - 00:49:24.670, Speaker A: I think that would be a catastrophic outcome. We take a lot of precaution to try to ensure that that's very unlikely. But in blockchains, we don't know. These are new and new systems, so there is always some risk that nobody understands. So that's one aspect that could be some smart contract problems in the eigen layer ecosystem that leads to some kind of loss of funds. Okay, the other catastrophic outcome I can envision is something happening not in eigen layer, but some layers on top. And one kind of a layer on top is this financialization layer, where something like there is this whole ecosystem of liquid restaking tokens.
00:49:24.670 - 00:50:35.488, Speaker A: And what they do is they take people who have staked in the Eigen layer protocol and issue like a receipt token, which is representing their position in eigen layer. This itself, I think is not at all harmful. Having a liquid representation of your token actually buffers the system quite heavily. Because when somebody has, if you don't have a liquid restaking position, what might happen is if somebody has a staked position and wants to go and collateralize it to do lending or borrowing or whatever, and they get liquidated, then the only way to clear off their loan is to go and withdraw from eigen layer and from Ethereum, their stake. And this leads to pressures into the protocol, into the eigen layer protocol, as well as into Ethereum itself. What a liquid restaking token does is by issuing a fungible representation, which is a token that can just be, that change hands instead of actually going and withdrawing, actually buffers the risk out of the deeper layers of the stack. But what we see happening, which might be a risk to the financialized infrastructure on top, is people taking leverage on top of their liquid restaking positions.
00:50:35.488 - 00:51:38.064, Speaker A: When people are worried about leverage in eigen layer, this is the place we should focus on is are people lending and borrowing against their liquid restaking tokens in a kind of unmeasured way? Ideally there is no leverage, but in practice, leverage should be kept very minimal. And this is where I would urge the lending protocols, for example, to urge caution when estimating the value of a liquid restaking token instead of pegging it at it will always be one one to eat. They should take cautious approach so that people don't take excess risk and externalize it onto other parties who may then have lent their ETH into these lending protocols and so on. So that's the place where I can see some kind of financialization go wrong. This is one of the reasons we don't necessarily either build these liquid restaking tokens or lending platforms. But we do want to urge all the users to exercise caution at these layers to minimize this kind of an outcome.
00:51:38.144 - 00:51:58.962, Speaker B: Yeah, well, sir, I'm really appreciative of how candid you are with this, and I look forward to seeing you make sure that the universe we live in is the first one and not the second one. So thank you so much for coming on the show. And we're going to put your socials in the show notes below as well. So for our listeners at home, or if you're watching this on YouTube, just click the dropdown and you can follow sirium on Twitter. So thank you so much for coming on.
00:51:59.098 - 00:52:00.994, Speaker A: Absolutely really enjoyed this conversation.
00:52:01.034 - 00:52:36.538, Speaker B: Jason hey, thanks for supporting another episode of the Blockcrunch podcast. If you've enjoyed this episode, please give us a five star rating on Spotify and Apple podcasts or whatever platform you're listening to this on. It really helps us a lot. Or if you prefer YouTube you can subscribe to our channel and YouTube as well. To not miss an episode. I'd love to hear from you guys as well and I personally make sure to read every single comment on YouTube or tweets that are directed at me, so feel free to leave a comment there. Let us know what project you want us to bring on or what trends you want us to talk about or tweet at merjacenchoi or heblockcrunch on the platform previously known as Twitter, currently known as X.
00:52:36.538 - 00:52:39.454, Speaker B: And thank you so much for supporting and I'll see you in the next episode.
