00:00:00.200 - 00:01:05.974, Speaker A: Most basic representation of those financial primitives was expressed on the chain. The reason that you did those interactions was held off chain with AO because we can host arbitrarily large computations inside the network themselves and give them smart contract like guarantees. You can build systems that have the intelligence inside, not outside, and also give smart contract like guarantees to that intelligence. A simple example might be for your personal finance. Imagine that you have a process in AO and you want all of your value to be expressed in a specific portfolio split like 80%, some token and 20% fiat, something like that, or stablecoins. Okay? So when someone sends you a token, your process in AO can immediately respond on your behalf intelligently, going to rebalance your portfolio for you inside the system. And it does so trustlessly with the same guarantees that you would get from a lending protocol.
00:01:05.974 - 00:01:44.150, Speaker A: But that's just basic. What if instead we wanted to have an algorithmic trading fund, but fully on chain, so you could have a fund that and again, the basic case looks at the price of bitcoin as it moves up and down. It moves its orders up and down because everything is 0.82 correlated. This is a sensible system and will allow you to remain neutral in the market to some extent. Well, you can make that fund as a process in AO and have it run autonomously with smart contract guarantees. And so people can come along and put tokens in the top.
00:01:44.150 - 00:01:55.170, Speaker A: The agent does things in the economy and they take tokens out the bottom and they don't have to trust a fund manager anymore. Web three offers a brand new petri dish. Our job is to buy great tech at great prices.
00:01:55.242 - 00:01:59.082, Speaker B: AI is also libertarian right enable use case that people haven't been able to.
00:01:59.098 - 00:02:00.642, Speaker A: Do today, the next hundreds of millions.
00:02:00.658 - 00:02:28.024, Speaker B: Of players, they will come to the market through mobile. My personal reason why I could be bullish in the next twelve months is all right. Hey everybody. Welcome back to another episode of the Blockcrunch podcast with me, your host, Jason Choi. I'm an angel investor and co founder of Tangent. Now, as a disclaimer, nothing we discuss on this show is financial advice, and nothing we discuss is reflective of our respective company's official opinions. And we may also hold assets.
00:02:28.024 - 00:03:02.654, Speaker B: We discuss now recently, the decentralized storage network Arweave announced the launch of AO, which is a new hyperparallel computer, and as the next phase in its vision. So they call it an absurdly scalable network, which I really liked. And as an investor whose thesis for infrastructure since 2018 is to maximize scalability, I was very, very intrigued by this. So to understand what AO is and see whether it could be the next dark horse in crypto, I'm really honored to have our refounder Sam Williams on the podcast with us today. So Sam, welcome to the show. This episode is brought to you by YGG. I'm excited to partner with Yield Guild Games to bring you today's episode.
00:03:02.654 - 00:03:21.076, Speaker B: You may know YGG as the leading guild in web3 that helped drive the success of games like Axie, Infinity, and pixels, but they actually have much bigger ambitions than just that. I've also learned a lot about gaming from the founder Gabby Desan throughout the years. So here is Gabby to tell us more about why so many guilds seem to be launching their own L2 s, but YGG chose not to.
00:03:21.140 - 00:04:00.208, Speaker C: Right now, there's no plans for YGG to launch an l two. And the reason for that is that if you have your l two, that locks in as a vertical platform, meaning that you want to attract your own content to build on top of your own platform and fill up the block space. Right? Ygg is unique in that we consider ourselves to scale horizontally, meaning that we can pick and choose to support a game on any chain, on any platform, and support it in different ways with assets, with our community, with our questing and reputation programs, so that we can choose from the best games across web3, no matter what chain they're on, and make sure that we help them become more successful.
00:04:00.256 - 00:04:01.568, Speaker B: And now back to the episode.
00:04:01.616 - 00:04:02.680, Speaker A: Thanks so much for having me.
00:04:02.752 - 00:04:16.714, Speaker B: Before we dive into AO, Arweave has a lot of history as well. So Arweave started as a way for people to store info online forever, which I thought was a really, really cool goal. So can you explain briefly the history there, and how did that lead to ao?
00:04:16.794 - 00:05:22.394, Speaker A: To put it simply, we realized at some point approximately four years ago that if you have a machine that stores data forever and you have deterministic virtual machines, you have a mechanism by which to create reproducible state as a result of computation. So essentially, if you take a deterministic virtual machine and an input log as well as an initial state, and you store those in a way that can't be lost and is decentralized, then you essentially get decentralized compute, if you will, for free on top of it. We knew this since about early 2020, approximately, and it became known as Smartweave. And then after the proof of concept that we put out, which was really just a, an exemplar, it was like 150 lines of JavaScript that I built with someone else on the team in an afternoon. It's like the first version. Yeah. After that we realized there's something about this machine that is far more powerful than the existing mechanisms of decentralized computing.
00:05:22.394 - 00:06:26.306, Speaker A: Particularly what you could do with that is you could defer computation to the later stages. Basically, to the reader, potentially was the first way it started, and then later it was just outside of consensus. So there would be nodes you could speak to that would give you the state of the computation, but they would do so asynchronously from the consensus about the inputs itself. This ends up being like super, super powerful. One of the things you can do with it, for example, is running arbitrary amounts of compute inside smart contract interactions, because you're no longer requiring the nodes that are decentralizing the data essentially, and giving consensus on its ordering. Yes, you are dissociating those from the computation task itself. If you have a long running smart contract, you can just say, well, ok, the people that are going to execute this are going to be willing to wait some period of time in order to get the result, but the network still continues to move forward and come to consensus.
00:06:26.306 - 00:07:19.718, Speaker A: And at the time we were like the only people in the world talking about this. There's a name for this approach in computer science, which is called lazy evaluation. And Coindesk wrote an article at the time that said that we've had a lazy approach to, to smart contracts, which was not very helpful. But the only other people that had really cottoned onto this idea around approximately that moment in 2020 was lazy ledger that then became Celestia. And ever since then we've known that, okay, so you have some superpowers in this, if you will, but they're not quite complete. Like, it's not the fully scalable compute system that we would like to see. And we've kind of known in the back of our minds, yeah.
00:07:19.718 - 00:08:35.984, Speaker A: Since approximately, I guess, 2022, something like that, that if you could get smartweave to be able to send messages asynchronously to other processes or contracts, we used to call them, then you can have a way for arbitrary amounts of this computation to happen in parallel. So the way that virtually every smart contracting system right now is built is that there is a global synchronized state. And what this means is that fundamentally you must elect a single leader. It might be a very large leader, but it's one leader who writes to the network over time and that rotates around the world, but it's one computer. To put it simply, we realized, well, actually, if you can make asynchronous parallel smart contracts that message each other using arweave as a message bus. Then you can have any number of those threads running asynchronously at the same time and coordinating together. It wasn't until about this time last year, something like that, that we started really, it was a bear market, so we had some time to think and to build, which is always great.
00:08:35.984 - 00:09:27.894, Speaker A: Yeah, we use that time to focus on, okay, can we actually solve that problem? Can we make it so that this works? And sure enough, we can. And what you get at the end of it is it's a supercomputer, to put it simply. Basically, it's a decentralized compute network, where if you add more computation capacity, you increase in the amount of output that you can create, which should seem normal, but this is crypto. The networks and protocols so far don't work like that. You add more computation power to ethereum, you get exactly the same number of state reductions per block. It just doesn't change. And the same is true of Solana and really pretty much everything at this point.
00:09:27.894 - 00:09:49.764, Speaker A: Yeah, we built this system that lets you have arbitrary numbers of parallel virtual machines with Arweave as message bus between them, and what links back to, if you will, the origins is, it turns out, like a history of computation gives rise to a computer, and that's essentially exactly what we built.
00:09:50.264 - 00:10:21.862, Speaker B: That is really, really interesting. And I like the tidbit about lazy ledger as well, because in my last job, we invested in lazy ledger before they pivoted Celestia. But I didn't know about the story that you guys were also doing this thing. And I think it's quite interesting the way you portray the positioning as well, the fact that if you add more validators to Ethereum, it's still one block proposer. You're not going to speed up the network by adding more actors. But in this case, it seems like that's where the infinite scalability comes from. The more actors you add into the network, the faster it can become.
00:10:21.862 - 00:10:23.874, Speaker B: Is that rough intuition?
00:10:24.374 - 00:10:35.152, Speaker A: Yeah, that's exactly right. Um, the way that it works is that there are distributed networks of. Actually, this is kind of helpful, being in my office. I can show you this.
00:10:35.248 - 00:10:36.048, Speaker B: Oh, nice.
00:10:36.216 - 00:11:59.984, Speaker A: There's three different subunits in the system. Basically, we broke down the traditional blockchain node structure into sub components, and then made each of those subcomponents scale horizontally, and then glued it back together, if you will, and then put Aviv as the base settlement layer on top, where the consensus is derived from yes. And so what you get in this design is decentralized networks of compute units, scheduling units, which kind of like data availability, plus a little bit more basically, as well as messaging units. And once you have those three things, and you can make each scale horizontally, then when you glue it back together, you end up with what I think is better described as a single computer, not a compute network per se, because it creates what we call in computer science, a single system image that is, it's actually a concept from distributed operating systems that they were messing with like 40, 50 years ago. The basic idea was, ok, if we're going to have to scale computation horizontally, which is the way that the traditional computing environment has always worked, can we make it so that a single, or rather a cluster of machines looks like a single machine to the end user? That's exactly what AO does. Any process in AO is not able to read the memory of any other process. That would require global synchronized state, which is where you get these bottlenecks from.
00:11:59.984 - 00:13:07.434, Speaker A: Instead, what we do is we have local state to each process, and then using the scheduling subnet, the ability to have any number of those in parallel, then the compute subnet gives us the ability to resolve the state of those transitions, regardless of the amount of computation that happens inside them. And then a messaging layer that basically uses arweave as an, if you will. Yeah, arbitrarily sized message bus between processes. And so they can't call each other's memory anymore, but they can just send a message. And so that would be something like, if you want to send a token to me, perhaps you would send a token to the contract, the process in AO speak. And that process would then send another message to me saying, you have a credit notice, and it would send a debit notice to you. And these messages are pushed around the system asynchronously, so there's no point of synchronization, where, if you will, they are waiting for one another when this interaction happens.
00:13:07.434 - 00:13:45.234, Speaker A: Yeah. And when you glue it together, it feels like you're using one giant machine. We like to think that ethereum is kind of the proof of concept of this, where you could do, it's like everyone in the world is sharing a scientific calculator. It's cool. You can build programs inside and you can write to my programs and mine can write to yours, and that's where we get composability from. But we've just scaled that up so that it's arbitrary, massive compute, and it really does feel like a supercomputer. The testnet's running on 220 machines, something like that.
00:13:45.234 - 00:13:57.150, Speaker A: And you can use the full power of those machines in your computations. And by the time it's running as we want it to be, there'll be tens of thousands of machines. So it'll literally be a democratized supercomputer.
00:13:57.182 - 00:14:15.356, Speaker B: I guess from a developer's perspective, for people who are used to writing smart contracts on Ethereum or writing smart contracts in South Solana, is the experience or the way they think about how smart contracts interact with each other? Is it transferable to AO as well? Or are there kind of fundamental differences or adaptations they have to make?
00:14:15.500 - 00:15:01.480, Speaker A: There's one adaptation they need to make. They need to not use the system of shared memory and instead coordinate via sending messages between processes. But we actually think this is even more intuitive when you think about large scale systems than a shared memory approach. A shared memory approach is this kind of weird idea, if you were to put it in human terms, that you would create a rendezvous with someone. Two people get together, they exchange a bit of state and they're both locked when this happens and one might be waiting for the other and then they leave and they go do something else. Now imagine that across an entire global economy, that's essentially what Ethereum and Solana are attempting to do with AO. It's more intuitive from a programming point of view.
00:15:01.480 - 00:15:33.338, Speaker A: It's okay, I am an actor in the system, if you will. AO stands for actor oriented. It's a type of programming where every piece of computation is seen as an actor and they can communicate with one another. Yes. So when I want to get something done, I might send you a message like on Telegram we did to set this up and you can get to that message when you want to and reply. And meanwhile I've gone off and done other things and so there's something about this that's very, very intuitive. At the base level.
00:15:33.338 - 00:16:21.044, Speaker A: AO is actually virtual machine agnostic. So you could in theory write using EVM or Solana VM bitcoin script, I guess, if you really want to. But, but we built on top of it to launch it another layer which we called AOS, which is basically a decentralized operating system. It lets you program in Lua, which is not a super common language, but it is an extremely easy and intuitive and simple language. I think in the testnet already we've had somewhere around 5000 developers get on board and use this system. We launched I think three weeks ago. So the developer response has been pretty crazy, frankly.
00:16:21.044 - 00:17:15.132, Speaker A: Yeah, the word is still spreading in the rest of the community. But I think the developers have intuited, oh, I see. This is a radically new way of doing decentralized computation, and what it offers just feels different to use. It feels like you're using a giant, global shared computer that has but infinite amounts of resources, essentially, rather than this hyper constrained, constricted approach where every smart contract to deploy might cost you six or $7,000 for the large ones on Ethereum. In a bond market, it's night and day difference. The way that you use AOS, at least, is that as a developer, you just log into a process. You log into it just like you're using secure shell, which every developer is familiar with.
00:17:15.132 - 00:17:54.264, Speaker A: They're deploying to a web two server, and then you issue it commands, and you have a command line, and you see the messages people are sending to you. You add handlers interactively and you prototype stuff. And then when it works, you can make it immutable, but you can also essentially build your smart contracts in real time and then log into them to debug them and just change the code whenever you want, until the point that you want to make it immutable so that it offers people rights when they use it. But that development flow is just so radically better than the existing systems. The developers really love it, I think.
00:17:54.564 - 00:18:38.232, Speaker B: I remember I was interviewing Anatoly from Solana back in 2018, and in the interview I got the sense that, hey, this is a zero to one type of moment, and I'm kind of getting a similar sense here. From the way that you're describing AOS, there's a zero to one next step in what decentralized computing should look like. So I really want to make sure whoever's listening to this to really understand actor oriented. So in order to explain it to a less technical audience, I actually plugged the entire white paper into chat GPT and asked it to explain to me as if I'm a five year old. So I like to kind of read that explanation and just to get your take on whether this is accurate at all. So this is what chat GPT says. They said the concept of an actor oriented computing is like imagining a big room full of people, and these people are the actors.
00:18:38.232 - 00:19:04.726, Speaker B: They cannot move from their spots, but they can shout messages to each other to get things done. So each person has their own set of skills and tasks they can perform, and they communicate by passing notes or messages around. So if one person needs something done, they write a note, send it across. The recipient reads the note, does what's needed. And this way, even though everyone is just standing in their own little space, they work together smoothly by talking through notes. Is that in any way an accurate assessment of what acti oriented is?
00:19:04.800 - 00:19:36.254, Speaker A: That's actually not so far from the example I gave of how it feels intuitive to people, because it's exactly how humans work. We are all actors, if you will, in this decentralized compute system of human society. It achieves tasks together in precisely the same way every person acts. Individually and collectively things get done, which is precisely what happens in actuarial oriented programming, too. I'm not sure I would go with the no one can move around thing, but.
00:19:38.474 - 00:19:57.574, Speaker B: There are limitations to chat GPT still, I think earlier you also mentioned the point about composability. Is there a trade off in composability if there is no shared memory between different applications? If I want to talk to another application, or I want to draw liquidity from some other defi pool, is that still possible with AO?
00:19:58.254 - 00:21:00.694, Speaker A: Totally, yes. People have already done it. The first applications are essentially were the ones you'd expect. Things like bark, which is a decentralized amm. Except unlike traditional systems, every single Amm pair runs on its own asynchronous process. So you get the full power of a single thread of execution, which is essentially all the power that you get in Ethereum, or I mean, Ethereum doesn't even come close actually, but the full power that you can get from a single cpu core, yes, per pair of tokens that you want to trade, and then you can have an arbitrary number of those. And if you ran out of composability or scalability on a single thread, you could also just spin up multiple pairs running in different processes, and then you'd have arbitrage opportunities between those, which is actually not far from what happens in centralized tradfi exchanges when they want to scale.
00:21:00.694 - 00:22:13.844, Speaker A: If you run out of capacity on a single thread, where you basically just make multiple order books and just have people spread between them, and then there's automated market making or market making bots between them. Yeah, but where things are heading now I think is really interesting, which is that we have those basics in place. You had all the composability that you do with traditional defi, but now you can run large amounts of compute on chain. And we don't just mean like slightly larger amounts, like, I don't want to mention names, but let's say the prior generation of smart contracting systems, where they went for this combined consensus and execution approach, where they basically just scaled up the size of the machine, if you will, and there's actually probably something we should get into there. When we say hyper parallel compute, that's not just like marketing buzzword, there is meaning behind the hyper. There are many parallel computation systems right now that are gaining in at least awareness, and they are essentially going the Solana route. So Monad is just EVM Solana.
00:22:13.844 - 00:23:19.632, Speaker A: You can lock small parts of memory and operate on them, and then eventually, when the block is constructed, the state is resolved to a single point, if that makes sense. Just like Solana, you can do some amount of parallel computation, and then the transactions that don't interact or override each other, they get merged together into one point, and we call that point the block. With aO, it's different. You have not just one machine's worth of computation. So that's parallel, if you will, to the edge of a box. With AO, we allow you to perform arbitrary amounts of computation across many boxes in parallel, and then they can message each other rather than sharing memory. When they do this, it means that you can do very long running computation, like I described with smartweap at the beginning, but now without the intermingled memory, which is perfect for AI use cases.
00:23:19.632 - 00:24:06.318, Speaker A: Yes, we have the basics of Defi in the system now, but where we think this is going next is. There's no good word for this yet. I'm curious what you think of these. Maybe autonomous finance could be one way of saying it. Basically, the financial system not just being expressed in the chain itself by the settlement layer, but also by the intelligence that makes it up. So, if you look at the global financial system today, we see things like the price of Tesla or the price of bitcoin. And the price that were observing is actually the result of this sort of decentralized computation hive mind of human expectation and understanding.
00:24:06.318 - 00:24:43.394, Speaker A: It's an estimation of our understanding of the value of an asset. And this is extremely complex to derive. Everyone has their own points of view, but we get one number at the end. So this is the result of a sort of intelligent computation, you could say. And in defi at the moment, what we really have on chain is the settlement mechanics, the mechanism design expressed on the network itself, things like, well, it started with payments. I might pay you to do something, but why I paid you to do something is off chain. It's just that the settlement of that transaction happened on chain.
00:24:43.394 - 00:25:30.454, Speaker A: Then we had things like swaps on Ethereum. I put in one token, you put in another token, tokens come out the other side, swapped between us. Okay, then there were things like lending protocols. I lend some tokens, you take them, you do something with them, you return them, but only those interactions. The base layer of the most basic representation of those financial primitives was expressed on the chain. The reason that you did those interactions was held off chain. And with AO, because we can host arbitrarily large computations inside the network themselves and give them smart contract like guarantees.
00:25:30.454 - 00:26:37.902, Speaker A: You can build systems that have the intelligence inside, not outside, and also give smart contract like guarantees to that intelligence. So a simple example might be, well, yeah, for your personal finance. Imagine that you have a process in AO, and you want all of your value to be expressed in a specific portfolio split like 80%, some token and 20% fiat, something like that, or stablecoins. Okay? So when someone sends you a token, your process in AO can immediately respond on your behalf intelligently, going to rebalance your portfolio for you inside the system. It does so trustlessly, with the same guarantees that you would get from a lending protocol. But that's just basic. What if instead we wanted to have an algorithmic trading fund, but fully on chain, so you could have a fund that, again, the basic case looks at the price of bitcoin as it moves up and down.
00:26:37.902 - 00:27:10.752, Speaker A: It moves its orders up and down because everything is 0.82 correlated. This is a sensible system and will allow you to remain neutral in the market to some extent. Well, you can make that fund as a process in AO and have it run autonomously with smart contract guarantees. And so people can come along and put tokens in the top. The agent does things in the economy, and they take tokens at the bottom, and they don't have to trust a fund manager anymore. It's entirely autonomous.
00:27:10.752 - 00:27:30.604, Speaker A: And to think about it, at basic level, what's happening is that the intelligence that is running the machine that's causing people to make the trades that they're making is taken on chain and made trustless in the same way that Defi took the primitives on chain. We think that could be huge.
00:27:31.744 - 00:27:43.404, Speaker B: Is the training and I guess the maintenance of these AI bots. Is that all happening off chain and then you're bringing the output on chain, or is the entire process end to end just on chain?
00:27:44.144 - 00:27:48.084, Speaker A: It doesn't have to be. Yeah, you could have the training on chain if you want to as well.
00:27:48.624 - 00:27:54.964, Speaker B: So this is something that you really can't do on the current blockchains, just because of the scale constraints?
00:27:55.344 - 00:28:47.958, Speaker A: Yeah, absolutely, because they tie well, two reasons. They tie execution with consensus, which was something that lazy ledger and we at Arweeve calmed onto early that wasn't a sensible idea, because it means that your consensus basically has to wait for the computation to end, and if the computation is long, it's not going to work. So there's that component, and then the fact that we don't share state between different processes, they run in parallel. Yeah, it really allows you to run arbitrary amounts of computation asynchronously. You essentially think of it like, fundamentally you can have any number of processes inside the system working as hard as they want. I can have something that needs to be extremely real time, like an on chain order book. And they don't interact fundamentally unless we send messages.
00:28:47.958 - 00:28:58.666, Speaker A: They're just not waiting on each other. They're just unblocked, if you will. Yeah, it is radically, radically different than the existing systems, I guess, in terms.
00:28:58.690 - 00:29:13.186, Speaker B: Of the security trade off, because you mentioned that some of the, we can run, for instance, AI bots, and you can have the same security guarantees, or similar security guarantees as like DeFi primitives on Ethereum. So how are you able to kind of guarantee the security?
00:29:13.330 - 00:29:48.654, Speaker A: So at the basic level, AO is actually just a data protocol, interestingly, built on top of Arweave. It's just a way of representing what is a process, what's a message. Actually, those are the core primitives. It's pretty simple. And then what virtual machine you should use with it and so on. And all of this is stored in Aviv. So we inherit Arweave's consensus and the security from that for the long term preservation of the log on the front end in these different units that we have in the system, the subnets.
00:29:48.654 - 00:31:09.900, Speaker A: At the moment, it uses a proof of authority system, which is essentially the developer chooses the keys that they trust at the beginning, and those keys can write to those locks. So in the same way that you get mechanistic security of smart contracts on Ethereum, regardless of who owns the stake, no one can just change your balance in USDC to a billion and mine to zero. You can't do that because it's state computations. You get those guarantees already, but you have a mechanism of, you could say trusted sequences. But this is just in the testnet of AO. Where we're going next is building a decentralized proof of stake network that essentially safeguards each of those subnets, ensuring that scheduler will write every transaction or message that you want to have interact with your system into the flow of your process, doesn't censor, so it also has liveness and a few other fundamental properties enforced by this proof of stake system. And then for message passage, we make sure that messages are, yeah, are validly transferred, so there's no forging of messages in the middle and so on.
00:31:09.900 - 00:32:14.724, Speaker A: And we do so against stake, of course. But the interesting part about that in AO is that you get to choose the stake that you need for the message that you are processing, essentially. And so what this looks like in practice is that, well, when I use Ethereum, Im buying about $64 billion worth of stake for every interaction I make. Even if its like, you know, settlement, this doesn't really make sense. Instead, in AO, what you can do is you can say, okay, well, this interaction has a maximum economic damage of $100, so I really don't need to see more than 10,000 or $100,000 of stake. And so you get to choose these parameters as a user and as a process in the system, which is really powerful, I think, actually like, yeah, again, that in itself is a huge, huge shift from the existing networks. And what do you say? The validity guarantees flow back to compute units as well.
00:32:14.724 - 00:32:31.320, Speaker A: These units basically calculate your state. Just like messenger units are staked against the messages that they relay. Compute units are staked against the state attestations that they give to you as a user or to a messaging unit. Also, they talk to each other in order to achieve a task.
00:32:31.392 - 00:32:59.098, Speaker B: I love to contextualize this in the context of the blockchain trilemma, because I always thought this concept is quite helpful. Even after the concept of a blockchain itself was challenged with the introduction of separate DA layers, separate settlement and execution layers, people can still contextualize different designs within this trilemma. In the trilemma of what's the three? Security, scalability, and decentralization. What kind of trade offs is AO making?
00:32:59.226 - 00:34:03.954, Speaker A: Well, the interesting thing about it is that it is fundamentally more at the base layer of framework for implementing different types of security systems, which will have their own trade offs rather than something that's prescriptive. You can, for example, if you really want to use bitcoin as a scheduler, as a sequencer, uh, for an aO process, and then have it written to arweev, um, afterwards. And so you inherit the, the data availability security of bitcoin, which is extraordinarily high, of course. Um, you can also have a system where you just have a staked node and you have a way of slashing that stake, uh, if there's any liveness problems and so on. And so, so it, it outlines a design space there's actually, interestingly, an Internet computer protocol developer, I believe he calls himself. Well, I would pronounce it a fat, but I wonder if he wants it spelt a f a t. I know he's on Twitter, goes by that name.
00:34:03.954 - 00:34:49.644, Speaker A: And he wrote an article about Ao because in the Internet computer, people are very excited about building a world computer. And as soon as they saw ao, they realized, wait, isn't that what we were gunning for? He looked into it and he made this pretty elegant graphic that showed, okay, he didn't quite show it in the form of the trilemma, but pretty close. It's like a two dimensional version of the trilemma missing out one of the factors, but he showed, okay, so here's ICP. It's here. Here's bitcoin and a couple of others in Ethereum. Well, instead of just being a point on that graph, AO is actually a kind of shaded area. It's a large area that more or less encompasses the whole design space.
00:34:49.644 - 00:35:11.072, Speaker A: So the answer is that depending on the requirements of the user and of the process in question, you can choose the right spot in the design space and the trade off space for you. And we think that is super, super powerful. Yeah. And to be frank, I think I.
00:35:11.088 - 00:35:30.176, Speaker B: Saw that thread as well. I remember I was quite surprised to see, I guess they used to be called dfinity, now they're called Internet computer protocol. I was surprised to see this guy talking about AO just because he's talking against his own interests, basically. But he was saying, AO is exactly what we wanted to build, but someone else did it for us.
00:35:30.320 - 00:36:25.224, Speaker A: And to their credit, the series developers in the ICP community were remarkably open minded when AO came along, which was great to see. They wrote a number of threads outlining where AO is different than ICP and outlining some of the fundamental advantages. I think it took them a while to get their heads around the difference in design. Fundamentally, the idea that you can dissociate consensus from computation with something that's just not like in the ICP sphere at all. They just haven't really dropped that yet. But other than that, they really were quite welcoming, which was surprising. There were some members of the ICP community that sometimes I now get tagged in posts on Twitter where people just randomly say, no, ao for me, only ICP.
00:36:25.224 - 00:36:33.608, Speaker A: Okay. Um, and it gets brought up in, like, random conversations. So it's really kicked up a stir there.
00:36:33.656 - 00:36:53.848, Speaker B: You mentioned earlier is actually how extensible AO can be, because you can be, you know, leveraging the security of bitcoin, leveraging the. The EVM, leveraging SVM as well, so you can actually be integrated into all the ecosystems. Which is why I found it quite surprising you guys decided to start with Lua first and not, you know, solidity or rust. So can you explain the kind of rationale there?
00:36:53.936 - 00:38:14.222, Speaker A: So, when you use ao, you log into it, you can load a chat client, you start chatting with your friends inside the machine. They build stuff, you send messages to it. All of it is interactive and flexible and intuitive and forgiving, which is a really fundamental thing, which is not the case in, I think, essentially, all of these other languages. Basically, the other languages people write in are inherited from the line of systems programming languages because they're built to be extremely efficient, which is completely absurd in my mind. Before I started Aviv, I was doing a PhD in distributed operating system design, which, funny enough, I ended up building the distributed or decentralized operating system I had dreamed of back then but didn't have the right tools for. But when I was doing so, I wrote a lot of c and assembly, and it's virtually unfathomable that the lineage of languages, so solidity and rust, that people build smart contracts, they're going to manage billions of dollars, they have to do so securely, are written in these languages. I love C, actually.
00:38:14.222 - 00:38:41.994, Speaker A: I think it's an incredible language because of its flexibility and sort of. I don't want to get into the complexities of the programming, but it's got a wild nature to it. You can really do whatever you want. It let you interact directly with the machine. Same with assembly language. But I can't imagine how stressful it is to write hyper security sensitive code in those environments. It sounds like a nightmare because you're thinking about the wrong level of abstraction.
00:38:41.994 - 00:39:36.466, Speaker A: Rust is built for systems programming. It's built for extremely highly performant code, which is why it ended up being used in the blockchain space, because basically, we have these extremely limited computers, and now if we don't have those limited computers, the only thing that makes sense to do is to reset our expectations that we should be programming at a high level. We should be thinking about our. Would you say, computational abstracts? Yeah. Abstract computational mechanisms with no concern for things like memory allocation. Have I freed my pointer? Should not be something you're having to worry about when you're really trying to focus on. When I sum up these numbers, one person is going to create value or move value, and the other is going to lose it.
00:39:36.466 - 00:40:46.708, Speaker A: Is this done correctly? There's a really fundamental thing that needs extreme focus and attention on the right areas, basically. And so what Lua gives us is something that is extremely simple and flexible and it has the right level of high, what do you say? Yeah, high level abstraction, we call it in programming language design, where you're thinking about the problem with the, with the right level of. How would you describe this to a non programmer? It's like my mind is not busy with all of these tasks about managing the computer. The computer itself, yeah, it's simplified and I'm just focused on the mathematics of moving money around or, you know, doing this defi primitive or an AI agent that's going to, you know, basically put people's money in the market. And that's very serious stuff. And you need to make sure that there's as little clutter in the mind as possible when you're doing that. And Lua offers that because it's essentially JavaScript without the crazy, if you will.
00:40:46.708 - 00:41:16.120, Speaker A: Like it's JavaScript really cut down to the basic elements, simple sensible abstractions and no talk of memory management or anything like this. Whereas in solidity what these developers are doing is quite crazy in a way. Developers will frequently switch to writing the assembly level of the program directly in order to optimize gas.
00:41:16.232 - 00:41:29.834, Speaker B: Very low level developers, versus just focusing on building the best app. They have to figure out, okay, what do I tweak in the infrastructure layer to make this app work? And they become backend and front end and all that complexity just becomes crazy.
00:41:30.534 - 00:41:52.414, Speaker A: Yeah, exactly. When you write in assembly language, it's like you are interacting with the computer as if it's a calculator. It's extremely, extremely basic and you can do it for efficiency purposes, but I really wouldn't want to mix those efficiency purposes with financial primitives. It seems like a catastrophe. I was a catastrophe waiting to happen, but we see it happen all the time.
00:41:52.454 - 00:42:15.224, Speaker B: All the time. That's why there's a massive auditing industry as well. And I think for the non developers in the audience, a good analogy is like imagine you're supposed to drive a car, but when you're driving the car you also have to tweak the engine and also spin the wheel yourself and basically get into the actual nitty gritty of operating the car itself instead of just stepping on the gas and turning the wheel.
00:42:15.884 - 00:42:21.892, Speaker A: Right? Yes, it's like, it's like a manual car, but like way more manual.
00:42:21.948 - 00:42:39.294, Speaker B: Sam, for the last part of this I wanted to focus on the ecosystem community side because you mentioned there's a lot of developers that are interested in AO right now. What are you seeing in terms of what people are interested to build? And are there things that you simply cannot build on other chains that you'd like to see people build on? Al now?
00:42:39.674 - 00:43:06.164, Speaker A: Yeah, they're already doing it. The thing that comes to mind is that people have really taken to this arena game that exists inside the system. So it's a fully on chain game. There's no elements of it that exist off chain. It's not like the token is settled on chain or something like this. All of the mechanics, they just live inside AO. And it's an arena where there are players and they just move around and they can attack each other.
00:43:06.164 - 00:43:47.314, Speaker A: They can some basic things as energy management, this type of thing. And what's interesting about it is that these developers are competing against each other to build better and better AI agents that play in this arena. Twenty four seven to earn tokens, to earn testnet cred from one another. They're essentially betting them on, on these bots. What's interesting about that is that we actually built the arena before Testnet launch. We did so because a game like that is engaging to developers, but also it's the primitive that makes up the economy. Fundamentally, these markets are just games.
00:43:47.314 - 00:44:35.408, Speaker A: Those mechanics of lending protocols are just literally call it game design. Right? It's mechanism design, yes. And so when you have those basics in place and people are starting to build agents that train against each other, today it's fun games with bots that move around and shoot each other or whatever it is. But tomorrow it will be markets, fully decentralized on chain intelligent markets. And so we think that that's super, super exciting and it has the same mechanics, which is basically if you build a better bot than someone else, you can earn the tokens from that bot in like a player versus player arena style. Again, exactly like markets are eventually. So that's an exciting beginning.
00:44:35.408 - 00:45:04.510, Speaker A: People are also building on chain social systems. It's one of those we can't get talk about, unfortunately. But another is that it's like a decentralized chat room and has Twitter like elements. You can send tokens to people as they talk. And really it's been like two and a half, three weeks of testnet. So that they're building things at all is kind of incredible. And the seeds of an ecosystem are already there.
00:45:04.510 - 00:45:09.174, Speaker A: I mean, it took two or three years for arweef to get to the same level, at least.
00:45:09.254 - 00:45:20.156, Speaker B: I think the closing question here, I'm sure a lot of people are excited about the timeline. So what is the current status in AO? I understand you guys are in testnet. When can we expect the next big milestones and what should people be watching out for?
00:45:20.300 - 00:46:18.834, Speaker A: We don't rush security sensitive things. Fundamentally we're also not going to call it mainnet until we're virtually certain that the core specification doesn't need to change. We really believe in building real protocols. We think that crypto has unfortunately lost its way quite significantly in the path between bitcoin and web3 as we see it today, where the line between a centralized startup and a product and a supposed protocol has become extremely blurred. And fundamentally, what is a protocol supposed to do? Well, it's supposed to be a neutral language that many participants can use to achieve a task together. And if it changes all the time, it's not a neutral language, it looks far closer to a product. And if it's not a real protocol, then it can't offer users rights.
00:46:18.834 - 00:46:57.024, Speaker A: If you use Ethereum before, or if you're an Ethereum miner before the proof of stake switch over, was it 18 months ago now then your rights in the economic game that was created inside Ethereum, that is Ethereum if you will, were not protected. And then the day that that switch happened, $8 billion worth of gpu's became useless. Thats not a real protocol. Sorry. I love Ethereum. Took part in the ICO way back. Funny enough on the website, the tagline at that point was Ethereum is the world computer.
00:46:57.024 - 00:47:28.214, Speaker A: Thats cool. I want to be part of that. So I took some bitcoin I'd mined and put it in the ICO and they did create something truly astonishing. Smart contract systems and decentralized finance. But it's not the world computer and it's becoming more of a protocol perhaps. But realistically it doesn't necessarily give users that many rights. It has a long roadmap of things that they promise will change about the system.
00:47:28.214 - 00:48:27.774, Speaker A: When you have that, its just very hard to marry it with the guarantees that are offered by real protocols in the space outside of crypto or bitcoin itself. So with AO, what were trying to do is make sure that the protocols themselves, the components are stabilized before we call it Mainnet, and we think were actually pretty close to that. When you look at Ethereum, what they spent most of the time doing is attempting to solve scalability. And if you look at most of these other systems, really the fundamental thing is, well it can't be full and complete because it isn't yet scalable. So we want to get it to that point where the network is truly at a place where it not only works today, and it would work without our intervention ever again, but it would also work and scale arbitrarily. That's the kind of thing that gives people rights that they can build against. We want people to set up data centers running compute units.
00:48:27.774 - 00:49:03.644, Speaker A: We want people to stake large amounts of money in the system for the passage of messages. That will happen much easier if people can understand, well, this thing isn't going to change from under my feet. Okay, here's a controversial take. In some senses, a roadmap is a rug pull. What you're promising is that in the future, things will shift. So if you use the system today, the way it is presented to you now will be taken from you. If you were those GPU owners, well, the system rug pulled you.
00:49:03.644 - 00:49:46.414, Speaker A: And if there's a group that's always constantly stepping in and changing it along some roadmap, for a start, maybe they don't actually finish executing the roadmap, which is what happens 90% of the time and the other 10% of the time they do, and you lose your rights as they currently existed in the system. And, yeah, this just doesn't speak to us. This is not what crypto is about. And so we have the opportunity here because the system is arbitrarily scalable, and we defined it a couple of times. It's very flexible. You can plug in whatever virtual machine you want. You can choose whatever staking or security system that you want to use with your process because it has that flexibility.
00:49:46.414 - 00:49:57.954, Speaker A: We think we have a good shot of getting a stable protocol out there that really does offer users rights and other people can build on with guarantees that won't be taken from them.
00:49:58.934 - 00:50:20.684, Speaker B: I think that's an amazing note to end this on. I really like that portrayal of roadmaps is like a slow mo for total rug pull. That's the first time I've heard anyone put it that way. So that's very interesting. Well, Sam, I'm really, really honored that you came on the show and explained to us what the AO vision is for people who want to stay on top of all of this. What are the best channels for them to do this?
00:50:21.144 - 00:50:49.742, Speaker A: Yeah, there's Ao. The computer is Twitter account, one of the main ones. There's also a decentralized ecosystem around AO already, fortunately. So there's AO computer club. If you're like a sort of techie, you might want to follow that as well. They talk about the parts of AO that based on this idea, it is a shared computer and you can compose on each other's stuff, and it's almost like a mailing list or like a magazine. So it has that kind of feel to it.
00:50:49.742 - 00:50:58.722, Speaker A: Ao the computer is much more sort of crypto focused. Yeah. And ao dot arweave dot de v or actually ao dot any arweave gateway we get you to the website.
00:50:58.918 - 00:50:59.386, Speaker B: Awesome.
00:50:59.450 - 00:50:59.674, Speaker A: Perfect.
00:50:59.714 - 00:51:01.970, Speaker B: Well, thank you so much for coming on the show, Sam. This was a blast.
00:51:02.042 - 00:51:03.098, Speaker A: Amazing. Thanks for having me.
00:51:03.146 - 00:51:40.664, Speaker B: Hey, thanks for supporting another episode of the Blockcrunch podcast. If you've enjoyed this episode, please give us a five star rating on Spotify and Apple podcasts or whatever platform you're listening to this on. It really helps us a lot. Or if you prefer YouTube, you can subscribe to our channel and YouTube as well to not miss an episode. I'd love to hear from you guys as well, and I personally make sure to read every single comment on YouTube or tweets that are directed at me, so feel free to leave a comment there. Let us know what project you want us to bring on or what trends you want us to talk about or tweet at Merjason Choi or Heblockcrunch on the platform previously known as Twitter, currently known as X. And thank you so much for supporting and I'll see you in the next episode.
