00:00:00.160 - 00:00:26.270, Speaker A: Alright, just a quick one before we get going, so please don't take anything you hear in today's episode is financial advice. Please speak to a trained professional if you do wish to participate in markets. Crypto is inherently risky and you will lose all your money, particularly if you listen to us for financial direction. So enough of that. Please give us a, like, subscribe, enjoy the show and see you next time. Welcome back. Still early, so you're in for a treat today.
00:00:26.270 - 00:00:45.644, Speaker A: We've managed to drag Brian Pellegrino on to take some time out of his busy schedule to come tell everyone about lazy or V two. And this is an excel, extremely selfish episode for me because I've been doing a lot of deep dive. I'm in the middle of writing a v two article, so I just want to pick Brian's brain. But first of all, Brian, thanks so much for jumping on. Thanks for doing this. I really appreciate it.
00:00:46.024 - 00:00:55.284, Speaker B: No, absolutely. And hard to turn it down after they show me this ten hour block of research ahead of schedule, so I'm excited to see what comes out of it.
00:00:55.684 - 00:01:17.704, Speaker A: Yeah, honestly, I'm all day just looking at kind of founders at a building in the background. I'm like, I really want to kind of ask them to come on. I think, like, overly polite Englishman inside me just, like, knows how kind of busy you guys must be. But we do have an extremely cheeky South African in Jedi who will ask anyone anything. So that's how we've managed to pull it off.
00:01:18.244 - 00:01:18.984, Speaker B: Nice.
00:01:20.044 - 00:01:28.534, Speaker A: So how's it been? I can only imagine the extent of the work that it's taken to kind of push v two and the kind of chaos that comes with it. What's it been like?
00:01:28.614 - 00:01:45.638, Speaker B: Yeah, definitely. I mean, it's been basically a year worth of. Two years worth of learnings, a year worth of. We're building slowly. And then you have your. Your full audit cycles, your sort of approach into testnet, and then this is right in the midst of us. You know, we just moved offices and team is growing and all this, all this other chaos.
00:01:45.638 - 00:01:59.082, Speaker B: But it's. No, I mean, it's everything that we wanted to get in a protocol and everything we've learned from v one. So, like, I couldn't be happier with the end result. That's exactly what we wanted to build. So, awesome.
00:01:59.258 - 00:02:00.574, Speaker A: How big is the team now?
00:02:01.434 - 00:02:03.106, Speaker B: 70, basically. Yeah.
00:02:03.250 - 00:02:05.122, Speaker A: Shit. Wow.
00:02:05.178 - 00:02:16.394, Speaker B: And we're 100% in person, or almost 100% in person. So, yeah, everybody's here. We have, like, a real, real office. We've made 65 people move their lives to Vancouver and. Yeah.
00:02:16.514 - 00:02:27.354, Speaker A: Do you see immediate benefits of being in person? Because I know a lot of teams across will have teams distributed across the world. Was that like a, like a really strict night and day decision?
00:02:27.434 - 00:02:48.402, Speaker B: Yeah, yeah, yeah, night and day. I mean, we were 100% remote before and then we went together for five months and then at the end of that we were just like. Our output was ten x what it normally would be. What's normally, you know, just a cost of coordination. Right. Normally it's like you put out a slack message to someone, you have to wait for them to read it. They respond with a Google Meet link, they have to wait for you to read it.
00:02:48.402 - 00:03:08.604, Speaker B: And then you get on a call and it's like these long cycles of everything and now it's like if I want to know something or I need, like, I will just walk over and I'll tap the person and we will talk. We'll debate the merits of a certain thing we're thinking about implementing. Like, everything is just streamlined. I think, for what we wanted to do and the pace that we want to move, that super, super important wouldn't do it any other way.
00:03:08.944 - 00:03:40.526, Speaker A: Yeah, that makes a lot of sense, I suppose. Really difficult in this, this industry as well. A lot of people want to be purely remote, but you want to get shit done, you need to kind of have that coordinated effort, don't you? So, um, yeah, so I want to. I want to jump straight in. I'm sure people have heard your backstory a million times, so I want to kind of skip over that and I think there's too much to pick off from b two, but, uh, so doing a lot of, doing a lot of the deep dive on it, um, Mark's kind of explain a piece was, was brilliant. That was a huge help. But your video, by the way, where you.
00:03:40.526 - 00:04:09.750, Speaker A: It was like a piece to camera video where you guys have pushed it out. Love that ship. It really, really like that sort of stuff. I think we should see a lot more of that in this space, but we don't, we don't seem to see it, but so I think where's the best place to start? Here is a kind of brief history of v one. And then I kind of think that sets a scene a little bit for everything that came with v two. So can you kind of give the listeners a kind of a high level of what layer zero v one was or is?
00:04:09.842 - 00:04:54.250, Speaker B: Yep, yep. Laser V one came into place because honestly, not something we ever wanted to build, just something we couldn't find like, we wanted to build something and it wasn't a transport layer, and that would made any sort of sense for anybody to use. We thought everything was broken, and so we just started to piece together, like, what did we think was wrong with the existing use cases? And so we thought, like, the two main things we thought were really wrong at the time is everybody was using upgradable patterns. So there was like, we, like, very much valued immutability and like, this just everything that got us into the space. And then, like, every bridge and every, I mean, there wasn't really much messaging. It was really pure bridging for the most part, but everything was like, fully upgradable. Now we're just like, that's a total nightmare.
00:04:54.250 - 00:05:11.530, Speaker B: And obviously we've seen a ton of hacks from that. And then the other thing was everything was a middle chain. It was just this hub and spoke model of, like, we're going to throw all economic security into one central layer. It'll parameterize everything. Everybody will subscribe to that layer. It will be a source of truth. Probably heard me talk about this a ton of times.
00:05:11.530 - 00:05:40.940, Speaker B: I didn't dive into too much, but I think we thought that model was completely unscalable. You've seen it go to 300, 500, maybe a billion dollars of economic security, like five different times. None of them have gone past that. None of them have really scaled. There isn't a world where you're going to secure hundreds of billions of dollars of value without that model scaling to hundreds of billions of dollars of latent economic security, which just seems incredibly unlikely and would be super capital inefficient. So those were like, the two premises. So started build v one in the way.
00:05:40.940 - 00:06:24.956, Speaker B: Ryan and I, my co founder, build is just, like, hyper adversarial. Every idea that we came up with, we were just like, tear apart from each other. Like, here's how to break it. Here's what sucks about it over and over again for months, right? And so, like, the three core things we landed on is, if you want the uniswaps of the world, aaves, you know, all of the largest protocols, you really value decentralization, immutability, all of these things, right? Then you need to give them a couple of sets of guarantees. One, the contracts need to be 100% immutable. Like, there's no way these protocols should be relying on you, not introducing a bug into the code that can change their security guarantees later on just out of whim. And so we've seen a bunch of hacks, the nomad hack the wormhole, hack the socket, hack recently, all of these things all stem from the same thing.
00:06:24.956 - 00:07:05.800, Speaker B: This upgradeability pattern, it has to be 100% immutable, has to be entirely permissionless. Anybody can play any role in there. There is no like privileged actor, there is no ability, like, we shouldn't have control over the end state of the protocol. It has to be fully censorship resistant. So that we, again, from an adversarial mindset, think about what does the landscape look like? If you have high degrees of pressure from centralizing forces, this can be nation states, this can be whatever, saying, hey, we don't like this segment of the Internet. We don't like these people being able to transact on this. Right? Like, we don't think there's any room for a protocol that can basically do that.
00:07:05.800 - 00:07:38.950, Speaker B: We think over time, over time, if there's the surface in a protocol for that to happen, it will happen. Like some regulatory environment will enforce strict rules that make the protocol just like unusable, or at least tainted as a whole. And so those are like the main things. Immutable, permissionless sensors are persistent. So we built this structure that was like, you have these endpoints that are entirely immutable, libraries that live on each chain, and they just deal with nonce. And basically they're just registering a message that's going outbound and dealing. Like, you just imagine a transport pathway.
00:07:38.950 - 00:08:01.134, Speaker B: And what layer zero is at its core is like arbitrary contract invocation of the bytes array. You're just like a packet on the Internet. Bytes here in some blockchain, read what the bytes are, move them over, and put them in another contract and invoke it with those bytes, just moving bytes around. Pure generic messaging. And so immutable contracts. One of the downsides of immutability is like, you can't change it. Like, okay, great, uniswap v one and then v two, and v two is great.
00:08:01.134 - 00:08:25.546, Speaker B: And now we're moving to v three. And like, it takes like a year for liquidity to transition over. And even still it hasn't transitioned in many cases, right. You can't just like upgrade something. So developer experience is tough with immutability. You have real trade offs. And so our approach to this, which was, I think we were the first people to do it, it was at least very novel at the time, was you get a messaging libraries that control how validation happens.
00:08:25.546 - 00:08:49.306, Speaker B: Those are completely immutable. We can never change them and we can never remove them, which is super important, because if you can remove them, then you can effectively center and change these things over time. So as soon as one is published, it exists forever, but we can always add a new one entirely. Opt in. If any developer wants to opt into the new one, new technology comes out. Ethereum switches from Merkel trees to verkle trees. ZK becomes extremely popular.
00:08:49.306 - 00:09:34.798, Speaker B: Any of these things that could happen, we didn't think there's any way you embed on a single technology stack and so you need the ability to add these, but it's append only, can't change any of the others. And then you have the applications build and the applications basically get to set their parameters of how many block comps they want to wait, what messaging library they want to use and who they want for relayers and oracles. And so you have oracles, you have relayers in the existing network. Oracles are meant to provide security, relayers are meant to provide execution. Anybody can run those, including the application themselves, and then the applications basically opt into doing this. So that's effectively v one at a very high level. Important things to us again were if we disappear from the face of the earth, we're not there, we're not going to run anything, we're not going to participate in the network at all.
00:09:34.798 - 00:10:16.754, Speaker B: Network still exists, anybody can come in and run it. It's a piece of immutable infrastructure that will live forever. If we wanted to be extremely adversarial and try to harm applications, any application wants to protect themselves, nothing that we can do, right? No application needs to rely on us being a good actor, you shouldn't need to trust us. And so you had these oracles who were going to present a block header, you had these relayers who were presenting a transaction proof, you'd combine these two and do a Merkle inclusion proof in the destination chain to validate this incoming message, and that was that. So again, I go into the differences if you want, but that's basically v one. Oracles and relayers, immutable layer of smart contracts, any application can build on it.
00:10:17.094 - 00:10:43.684, Speaker A: Yeah, absolutely. And there was one of the really impressive kind of upgrades from everything that I've been reading is this idea of decoupling the liveness or the liveness and security. So can you kind of fill us in where this switch from more oracles to relayers has kind of changed from change towards dvns and executors and kind of what that means for v two as an implementation?
00:10:44.064 - 00:11:01.250, Speaker B: Yeah, absolutely. In v one, again we have these oracles and relayers. Oracles could be anything, can be IBC style, an entire chains, validators signing off. It can be a single node. Chainlink is an oracle. Not in the price feed. Oracle, terrible name by ask.
00:11:01.250 - 00:11:33.980, Speaker B: Got so much grief from having this stupid oracle name. But chainlink also is an oracle within the layer zero network, as are a bunch of other groups. So it can really look like anything. We always thought people were going to create these meta oracles, right? So Oracle is just like an abstract concept, but you can throw in, you can have chain link and Google Cloud and yourself and whoever, and you can say, listen, I want three to four, I want me. You can do anything in there. It can be as expressive as you want. And then the relayer was really just meant to provide gas abstraction and they provide the transaction proof and then they execute this transaction on the other side.
00:11:33.980 - 00:12:00.228, Speaker B: So they provide the primal piece and then execute this leg from our side. That was very obvious. Again, you could do all these things. What we found out is that most people are reasonably lazy and nobody made the meta oracles. It was just not easy. They weren't going to do it. This got painted by a lot of people as a two out of two multisig, and it didn't matter that the oracle itself could be a sufficiently decentralized system.
00:12:00.228 - 00:12:48.098, Speaker B: It's like take a sufficiently decentralized system and add one thing and it's now intuitive to multisig, like ignore all the nodes, right? And so there were like a lot of grief, a lot of misunderstanding around this as a whole and. But all of that's fine, right? People misunderstanding, totally fine, like not being able to explain it well, totally fine. The thing that really made us like decouple this and really make the big shift is uniswap. And Uniswap governance brought up a very interesting use case that we hadn't originally paid attention to, which was we'd always taken the stance, if you're an application and you have contracts on both sides you want to communicate between, and you have the ability to swap out relayers and oracles. So if one of them is bad, if one of them goes down some sort of liveness failure, this thing just shuts down for whatever reason. You just switch out to another one and you have control over that application layer. Uniswap wanted.
00:12:48.098 - 00:13:20.114, Speaker B: We live in Ethereum governance lives on Ethereum. We're going to execute a vote, we're going to push out a message that just is like turn on the fee switch. Like that's the only message they'll send. Just push out a message and we don't want a multisig or any sort of control for a contract on the other side. So if the relayer goes down now, we have no ability to update on the destination chain and swap out the relayer there. And that actually is like a very real concern. That's like, okay, now this relayer represents like permanent liveness failure from the governance side.
00:13:20.114 - 00:13:45.930, Speaker B: And that was something that was really worth addressing. And so we spent a lot of time thinking about that use case specifically. And so the v two model is, we switched the terminology a little bit. And also relayers are just like incredibly hard to run. What you're providing is gas abstraction across chains. And so you're quoting, right, we're on 50 something chains or 50 chains. You're quoting n squared pathways in real time on chain that anybody can accept at any point in time.
00:13:45.930 - 00:14:28.616, Speaker B: So you have to be razor accurate on all of these n squared permutations of quotes, because if you're off, then somebody can just grief you and steal a bunch of money. You have to have about $30 million of gas assets spread out across all of these chains to support flow and moving gas across them. And you have to be able to do this incredibly quickly in real time. So again, like, we're doing 50 to 80 billion RPC calls a month with our relay, which is like very, very heavy lift. And so while we thought a lot of people want to do that role, it turns out that it's like pretty hard and not that many people are able to do that role. So move to v two. We have what we call dvNs, decentralized verifier networks, which is basically, you can think about it as the meta oracle.
00:14:28.616 - 00:14:48.120, Speaker B: A DVN can be any abstract number of nodes. It makes it very easy. And implicitly within the protocol, you have this x of Y event. So if you want to say, I have ten groups of, there's like 20 plus dvns just onboard. And this is everybody from Gitcoin to block them into all sorts of groups. Anybody can run them. You can use deviant adapters.
00:14:48.120 - 00:15:11.514, Speaker B: Now you can use L2 native bridges. If you want to use the native bridge to go there, you can use external verification subsets. You can do anything, right? So Debian is just a principle of any validator network. We're agnostic to it, we don't care what it looks like. And you can create any subsets. You can say, I have ten of them, I want to have seven out of ten, and I have to be one of them. So I want veto rights everything.
00:15:11.514 - 00:15:48.334, Speaker B: I must attest that this is, like, done. And then everything else sort of backs me up. So you're going to have whatever you want for that construction. And the execution side now becomes very interesting because once you're DVN. So the reason we built v one the way that we did is that in the old model, if you looked at how things work, the experience really sucked for developers. It was like you would sign a message on Ethereum and you would wait some unknown amount of time, and then you would check your Solana repeatedly, and you'd be like, okay, it's arrived now. And you'd have to, like, get Saul in your, like, create a Solana wallet, get Saul in your wallet.
00:15:48.334 - 00:16:07.722, Speaker B: Claim the transaction on the other side, sign, like eight messages. And then, like, now your transaction was resolved, right? And so one of the things that we wanted in v one was we want this gas abstraction. We went like, listen, we're going to give you a quote ahead of time. Here's the price of Sol. You have ETH in your wallet, great. You're going to Solana, great. Here's the price of Sol and units of ETh.
00:16:07.722 - 00:16:20.130, Speaker B: You need like 300,000 gas on the other side. That's going to cost you $0.04. Pay us $0.04 on source. We're going to pay on destination for you. So you sign one message, whole flow gets executed. User experience gets magical.
00:16:20.130 - 00:16:45.590, Speaker B: Great. What we realized is all of that really should live outside of the protocol. And so the protocol now in v two is once these deviations, once your security set has signed off on a message, the message is now ready to be delivered. It's a valid message. Anybody can pay the gas on the other side. So if you had zero executors in the network, the protocol would look exactly like I just described. Message happens on source, you wait.
00:16:45.590 - 00:17:11.968, Speaker B: Message is ready and available to execute on destination, you claim and pay the gas on the destination side. People aren't going like most, it's not a great experience. Most people don't want that. But in the terms of the protocol, there's completeness there that is now a full transaction. So as soon as your security threshold has been met, the message is valid and it can be written and delivered on the destination chain. Now, an executor lives outside of that. And what that means is that they're giving you a quote ahead of time.
00:17:11.968 - 00:17:22.336, Speaker B: You're accepting the quote and you're saying, hey, I need my four cents of sol over there. So I'm going to pay you $0.04 on ethereum. Great. Done. Executor handles it, transactions done. Whole things just as magical as before.
00:17:22.336 - 00:17:39.806, Speaker B: There's two really important parts about that. One is now there's never any liveness issue. Even if their executor goes down forever, dies. Like, Uniswap has no permanent liveness failure. As long as their security set signing off, they can just deliver the messages on the other side. Anybody can step in and do it. That anybody can permissionlessly do this on chain.
00:17:39.806 - 00:18:19.928, Speaker B: So entirely permissionless execution. And the other thing is that there's a surface of censorship or maliciousness where like there's a vote going on and the executor has some stake in it, some vested interest, and it's in their favor, but there's like some big voters who could affect this and like, hmm, there's only 30 minutes left. Like maybe we should just conveniently have some downtime. Like, oh, downtime. It doesn't work. Like our vote on uniswap, like, oh, we can't count a 16 z's vote. So like, I guess it doesn't count this time, right? So like you have, you know, you have this process of like, okay, you know, something happens and now the votes don't count.
00:18:19.928 - 00:18:43.666, Speaker B: That should never be the case. Like very clear if you're thinking of a voting system, like, you don't want that. And so what this allows is even if the executor goes down, the end user can always go and just self execute their own vote. Anybody can clear the queue. You can always make sure your vote is counted. Again, liveness has, now it lives outside of the protocol. This like execution layer in the protocols lens, it's totally complete and it's liveness on demand whenever and whenever anybody wants to execute.
00:18:43.666 - 00:19:13.084, Speaker B: And so decoupling this liveness and security is like a very big shift into v two and also changes a huge number of the throughput constraints we're breaking, you know, every l two we broke, avalanche, phantom, all of these chains, 18 hours backlogs, they couldn't egress messages as fast as we were giving them. So huge amount of issues now lets you basically have, you can scale more or less to infinity to the constraints of the blockchain itself. You can just fill up every single block entirely and not be constrained by the dawns at all.
00:19:13.464 - 00:19:53.850, Speaker A: Awesome. So a couple of points on that. So there was a really, really nice graphic on how certain protocols who were kind of built on top of, in or around layer zero might have been overpaying while some might have been under secured. And I think this whole idea of your DVN network, how extensive do you want it to be? Do you want it to be a one of one of one, or do you want it to be whatever kind of config you want off the back of there? But can you kind of like expand on that smooth brain explanation of what I've just give out to the audience? And like, how important is that?
00:19:53.962 - 00:20:18.350, Speaker B: One of, one of the big things we also didn't like about the monolithic structure, middle chain, is that chain sets parameterization for everything. So you can think about what these middle chains are selling. They're selling a validator set, right? And so again, layer zero is agnostic. We don't care what the validators are like. The market can decide what it values that what they're selling you is. Here's a bunch of validators that live in a network. Here's their economic security.
00:20:18.350 - 00:20:53.664, Speaker B: You can leverage that. It costs X. Let's say X is $5, right? It costs $5. The problem is you have a bunch of different constraints. You have like lending protocols or perp dexs who are dealing in hundreds of millions of dollars and huge liquidations, and you have NFT projects who are dealing in like literally free nfts, or that they want to subsidize or like sub $0.01 nfts. And it's like, okay, is $5 the right price for the amount of security that we're getting? Like maybe this one actually wants much less security because their nfts are free and they don't care as much, and they're willing to price it as cheaply as possible.
00:20:53.664 - 00:21:30.664, Speaker B: And maybe Ave's and the $100 million liquidation perp Texas want much more security, right? And if everybody needs to opt in the same point, then these guys are not getting nearly enough security, and these guys are like wildly overpaying. And so the entire thesis of any validator set that you combine as you want is you can basically create the security stack for whatever, whatever overall constraints you want. You can make something as secure as you want. You can use the native bridges, you can use yourself as a backstop in veto, you can use every other validator. You can use ZK lite client for polygyny. You can stack and amalgamate all of these things together. And even within a single application, you could think of a Dex.
00:21:30.664 - 00:21:59.890, Speaker B: Let's say uniswap is sending cross chain swaps. Now, you can think of a world where you say, listen, if you think purely from block comps. Let's go back to proof of work. Ethereum probabilistic finality. They're had them in a three block reorganize years and years and years, you might say. Listen, for transfers that are like $10,000 or less with an aggregate outflow of a million dollars or less, we want to use three block comps and make it extremely fast, right? 45 seconds, 42 seconds. Whatever it is, outbound.
00:21:59.890 - 00:22:42.254, Speaker B: Great for transactions that are like a million to $10 million plus. We're totally fine waiting 30 block comps and having maximum finality on source chain, or just as much. Even if you talk about that level of parameterization, you can do all of that within a single application, within layer zero. I guess our end, like our strongest belief is that a monolithic set of parameters, regardless whether it's a validator set, whether it's a number of block comps, whether it's the technology that you're using in certain pathways for how you validate things, or using ZK proofs, or using X and Y and Z, all of that should live at the application layer. All of that needs to be modular. Anything that does that in a monolithic fashion will not scale to meet overall need. You just can't do it.
00:22:42.694 - 00:23:20.874, Speaker A: Yeah, that makes a lot of sense. And there was a kind of another kind of recurring theme of kind of vendor lock in as well. And all I kept kind of coming back to throughout all the kind of reading and research, it was just like you kind of giving people the tools to build whatever they need. And it's not at the whims of like this, as you say, this underlying monolithic kind of infrastructure. And it just doesn't, doesn't necessarily make sense, does it? Like, even at the l one level for, like, we're getting a lot of pushback for Ethereum at the same time. And it's like a similar sort of dynamic as if, like the next fucking board API club is, is minting. And as you say, vave has gone through liquidation.
00:23:20.874 - 00:23:47.704, Speaker A: Like, should we really be like, having that same kind of gas war that's going on there? And there's kind of like that kind of trade off that's happening on here. Aside from that on, I know we've mentioned anyone can execute. Who are we typically seeing execute? So, like, who are they? Why are they? And kind of, is it more of a who can actually submit the best quote for that final execution? Like, how does that whole dynamic work?
00:23:48.044 - 00:24:08.732, Speaker B: Yep, definitely. First, I just want, I want to touch on vendor lock in very quickly because it's very, it's, it really makes me laugh because it gets thrown at us. A lot of like, don't go layers here. Like you don't want to be like locked in and vendor lock in. Like we're pure infrastructure. The protocol is literally immutable. We don't care.
00:24:08.732 - 00:24:31.652, Speaker B: There isn't. If you want to validate using this L2 bridge and chain link and Axelr, all is your validation layer. Great, we support it. Do it through DVN adapters, literally mix and match, do whatever you want on the validation layer. That is what the protocol is built for. There is no vendor. It is an immutable piece of infrastructure that doesn't even need us.
00:24:31.652 - 00:25:09.854, Speaker B: Again, anybody can come in and they can run all of the dvns, all the execution in like layer zero labs. Us doesn't exist. We don't like do anything within the protocol. And so I think our biggest vision when building the protocol is the protocol itself should be like sanctum, like it above all else, right? And so, like we should not be permissioned actors in any sense. It should not pay any tithe back to layers or labs. There's like nothing special about us. The protocol is ethereum, and we're like consensus, right? Like we're trying to build things that are value accretive to the ecosystem.
00:25:09.854 - 00:25:43.728, Speaker B: And this can be things like pre credit, this can be things like our relay or executor, this can be all of those things. And so, to answer the question on execution right now, we run an executor, and we're the primary and the v one. We were the only relayer that ran. And the reason is most people don't want to put up 30, $40 million of gas assets. And again, when you talk about pure RPC consumption, we're 50 to 80 billion a month. I think that probably puts us in probably a top ten range worldwide, something like that. I think we're one of the largest customers for basically every RPC company.
00:25:43.728 - 00:26:32.960, Speaker B: We run all of our own nodes or running mini alchemy internally. We're doing all of these things on 50 plus chains. Very difficult to do and to do well and reliably on top of that, actually writing transactions to chain, right? So, like, you have a bunch of things that consume a lot of RPC calls, but the end user is like executing and getting it to go to a go in write on chain and make sure it gets included in a block. And like, if the user submits with too low gas on metamask, like maybe they just wait, I don't know, 30 hours until gas goes down, right? Like this stuff happens for us on arbitrum and optimism. We're like six of the top ten gas consuming applications. Like, at some point in time, we were submitting, like, we were writing 50% of the transactions were being written to the chain. And so, like, that itself is also incredibly difficult.
00:26:32.960 - 00:27:04.762, Speaker B: So when you stack all of this together, like, very, very hard to do. The way that the executor monetizes or the way that it makes money is when you're doing this gas abstraction. So again, you're, let's say you're going to pay a dollar on source gas and you're going to pay $0.10 on destination. What you're really saying is, here's the quote of a and units of b. Pay me b up front and I'll pay a on your behalf. Now, what that means is that I'm taking this asset and I'm giving that asset and I suffer duration, risk involved, risk for the latency that that happens.
00:27:04.762 - 00:27:37.502, Speaker B: So if this is three minutes and 15 seconds of finality that you're waiting for, even if I was to perfectly sort of be able to sell this on the other end and do whatever, there's still risk where I've taken $0.10 here, but by the time I get over here, gas has spiked. And I'm actually paying like $0.18 on your behalf. And I've already made a promise that I'm going to submit the transaction. And so it's going in, I'm paying eighteen cents and I'm losing money. I'm losing the delta there, right? So that's the risk the executor basically bears is this duration of all risk.
00:27:37.502 - 00:28:00.950, Speaker B: And so for that, what they do is they mark up the destination chain, gas, by about three to 5%. So again, if you're paying a dollar on source and $0.10 on destination, that $0.10 on destination is going to be marked up by 5%. And so now altogether on source, you're going to pay $1.10. And so you'll pay that on source, and then we'll get paid. And again, the executor will eat the loss either way.
00:28:00.950 - 00:28:22.970, Speaker B: So that's the way they monetize. But very capital intensive, very operationally intensive. There are now a bunch of reference implementations for executors that exist, and a bunch of parties have shown interest in running them. So we think we'll have a lot more. But it's also one of the most important parts, why within the protocol has to be decoupled completely. Again, executor. All that it is providing is gas abstraction.
00:28:22.970 - 00:28:55.284, Speaker B: It's an external service, has nothing to do with the actual transaction itself. The transaction, transaction on source chain security, set DVN, sign off on what is a valid state, and then now the message is valid. Living in the endpoint, ready to be executed. The user can execute it, application can execute it, any third party can execute it, or you can have paid a executor ahead of time and said, hey, give me gas abstraction, I don't want to deal with this, and then they'll just do it on your behalf. But it is sort of entirely value add outside of the core protocol.
00:28:55.584 - 00:29:05.944, Speaker A: Awesome. Yeah. And I suppose the more executors that come online and start wrapping their head around this, it's, it becomes much more beneficial for, for the end user as well. Obviously, people are kind of 100%.
00:29:05.984 - 00:29:38.926, Speaker B: It should, I mean, both, both for the security side and for the execution side. Like it should be a marketplace. Like we're there. We heavily encourage any other parties to come in and ultimately like for us to survive as labs entity. All of these things that we build that are meant to be accretive. And the way that, again, consensus builds metamask and infuria and all of these like core tools that Ethereum uses every day and has gone on to catalyze a huge amount of the growth in the ethereum ecosystem. Like we need to build good products that people want to use and are the most competitive overall.
00:29:38.926 - 00:29:48.354, Speaker B: And so the end user should always be able to pay like they don't care, they just want the cheapest and most reliable execution on the other end. We need to be able to do it more efficiently than anybody else.
00:29:48.734 - 00:30:41.534, Speaker A: Absolutely. So with this, I'm kind of seeing this kind of weird reversion in the industry, and I think you guys have went completely the opposite way with regards to kind of permissionless immutability and censorship resistance. And it feels like there's a lot of stuff that is looked at what is currently available that falls under that category and being like, well, it's not hyper efficient, so we should just settle for this kind of Web 2.5 in between. Like what's it, what's the kind of thoughts on that? Because I know there's like a really strong core ethos from you guys that everything has to kind of be at that core, kind of crypto philosophy of immutability, decentralization and kind of censorship resistance. Like why do you think we're kind of getting that? And how do you guys kind of play into this?
00:30:42.234 - 00:31:23.968, Speaker B: I mean at the end of the day, like I've been in the space for 13 years, almost 14 years from first touch, like eleven years full time. Like I got in from the very hardcore libertarian skew. Like that's what brought me here of just like self sovereignty, don't need to trust anybody else, no intermediaries. Like all of these things, right? Those are the things that I align with very deeply. I think there's a couple of things. I think people have started to make very strong trade offs in search of a better price. Like we're basically reinventing always available tradfi.
00:31:23.968 - 00:31:54.532, Speaker B: And you see it bridging is like a great, when we built Stargate, it was very clear. The overall thesis was like Stargate should be like 100% immutable. All of the logic lives on chain. It should like strive to be uniswap for liquidity between chains, right? Like that should be the goal. Everything should be self contained, everything should be on chain, everything should be immutable. What you see is the market moving. And this happens with aggregators too, right? I mean look at the majority of like all the volume going through any of the, of the Dex aggregators.
00:31:54.532 - 00:32:32.964, Speaker B: Like all of that computation is done off chain, right? Like people have started to say it's okay to rely on, it's basically, it's okay to sacrifice liveness and uptime as long as you're not sacrificing security. So if you can give me strong security guarantees, but weak liveness guarantees, then at the application level the end user is willing to accept that trade off for a better price. Maybe that's right, maybe that's wrong. That's sort of the way the market is. I think at the protocol level people are still strongly like very ethereum, bitcoin aligned. I think they're still leaned in heavily. Maybe once you get further down the layer one stack there are more trade offs being made there.
00:32:32.964 - 00:33:27.610, Speaker B: And I guess some of the layer threes and stuff you are seeing some of these trade offs, but I think it's really strong still. Like this will be the core infrastructure of the future. And I think it's sort of frustrating to see at the infrastructure level of messaging, like ultimately in the long tail chain of tons of L2s, tons of layer ones, like broad expansion, the layer of messaging is going to be incredibly, incredibly important. Incredibly important how that's built. And people are willing to again and again and again take on upgradable patterns, centralized systems, like all of these things. And there are things that people just don't like from the censorship resistance. I talk about it all the time, but like, one thing that people don't seem to understand is like, look at tradfi right now.
00:33:27.610 - 00:34:14.360, Speaker B: Like, what sucks about it, right? Does it suck that? Like, Citadel is front running every one of your Robin Hood trades and does it suck that? Like, like even in HFT, it's like relatively meritocratic. Like it's still the fastest single human of all. These HfT people get to race and take the order, right? And it's like, okay, whoever can ping the exchange gets the order and they get the most. Like, we're talking about a system where effectively half these systems are being designed that the telco can basically front run and back run your packet as it's being sent across. Like your ISP is now front running every packet that's getting sent across the Internet. And it's not even like a fair system where it's just like the fastest or any sort of meritocratic nature. It's just like, literally the ISP now owns everything.
00:34:14.360 - 00:35:23.976, Speaker B: They can reorder transactions. You could be have a hundred transactions going across, each with an mev of one. But they can say, you know what? If we hold this transaction back and reorder all of these, we can extract like an mev surface of like 250. And like, who cares that you get less preferred execution? Who cares that we can always pair our counterparties or someone who pays us in a subsidized side deal with, with, you know, preferential order processing. All of this stuff, all of that is being recreated. If you ask yourself, like, why does one of the, like, largest high frequency trading firms in the world, like, want to own the messaging layer, right? Like, these are the reasons, you know, it is the ability to literally have 100% control over front running every single transaction that is ever sent across the Internet, right? And if you think about like, what the financial implication is that it is massive. So you can either build these rails in a way that are fair and immutable and have these properties like non sorter enforcement, censorship resistant, built into the protocol, or you will end up with a financial system of the future that's as bad or worse than the current one that we have.
00:35:23.976 - 00:35:58.184, Speaker B: It might be always available and you might be able to do it in, you know, emerging markets, and that's great, but it's going to be pillaged in the same way that the current financial system is pillaged. And there's going to be none of the democratization of any of this. Right. And so, like, it has been really, really, really surprising to me that more people don't care deeply enough about it. And I think it will happen with time. But it's like very interesting, the trade offs that people are able to make right now. And I think people, they don't care enough now they say, does this seem relatively safe from purely the validator set perspective? It's like, great.
00:35:58.184 - 00:36:31.796, Speaker B: Look at every single hack that's happened. Like $6 billion of bridging hacks. Zero of them have been from the validator set. Unless you include, I mean, I guess you can include social engineering of axie Ronin and of Harmony Bridge where they got the underlying keys and basically rugged this. But guess what? That's because these things had strong elements of centralization and they have upgradeability and they have all these things within them that take the people who have those keys to be able to do something. I think what people don't think, so everybody thinks validators act zero hacks have happened because of validators. None today ever in any bridging protocol at all.
00:36:31.796 - 00:36:55.126, Speaker B: Like that has never been a surface. That's not to say it's not important to think about. Clearly that matters as a system scales. Clearly that side of security will matter. But people aren't looking at, again, over and over and over again, the same exact things of upgradable contracts, uh, people introducing blugs, whether on purpose or not on purpose, like all of these things. Uh, and it's just, yeah, it's, it's really wild to see.
00:36:55.230 - 00:37:14.110, Speaker A: Yeah, but it's, it's always the same, isn't it? It's like people don't care until it's too late. Um, and like, if you take it like, to the extreme examples of what we see in kind of last cycle where everyone was like, oh shit, I'm getting like 11% on my bitcoin. It's like, yeah, because fucking deposit in blockfi or Celsius or some shit. Like. And then that blows up. Or it's just like, oh, well, yeah.
00:37:14.142 - 00:37:25.874, Speaker B: FTX is like 60% of y combinator startups were built on, like, on terra, right? Like 20% APR on dollars. Like, let's just all create new neo banks around this.
00:37:26.774 - 00:37:58.064, Speaker A: Yeah, but it is always preaching the convert here. But it's like, it's always when it's finally too late that people realize. But I don't know, I came in with a kind of, the underlying philosophy is, as you said, it's just like. And I think a lot of new folks are coming to come into the industry and the market and not kind of coming in with that lens, which is kind of, kind of sad to see. But as I say, it'll all come out in the wash, I think. So people who are building in the right direction are always going to be come out Trump's in the end, I think.
00:37:59.724 - 00:38:24.816, Speaker B: Yeah, we'll see. We got, we got a lot of people coming in from banking and HFT and all these other areas now where being, I don't know, embraced, embraced with open arms despite the underlying architecture. So, wow. We'll see if this space is definitely. There's a great post the other day about it just being a lot less like cypherpunk than it was in the early days. Yeah, and it definitely is a lot less right now. I was saying, hopefully it's a pendulum, it's going to swing back.
00:38:24.816 - 00:38:52.614, Speaker B: But I do think a lot of the early, very high ethos, very high, let's say high conviction, early on, strong principles, all of that. A bunch of them just got absurdly rich from being early to this thing that has just gone through massive expansion and expansion. They've been replaced in a lot of cases by like rent seekers or people like trying to capitalize now on this like newer set of technology. And I think there's real danger to that.
00:38:54.554 - 00:39:18.064, Speaker A: So I suppose one of the other benefits, and you'll obviously be able to explain this a lot better than me, that basically anyone can execute. So that creates a system where everything doesn't have to be executed sequentially, which I believe was the case with v one. How does this play into throughput? Can you talk us through that?
00:39:18.484 - 00:40:03.418, Speaker B: Yeah, it basically just shifts. I was talking about the property before. In a financial system, what you want, the guarantee you want as a user, is that every order is going to be executed in the exact order that it's received. And so if I'm making a swap, I want to make sure if all of this is tied to one string of execution, my swap is first. I want it to be executed first on the other side. I don't want, again, this hundred transactions going through and you realize you can extract more by like holding mine back 15 positions and then charging me more or getting me worse executed price or any of these things that could happen because I want to buy something and you realize that now because I want to buy it. If your friend buys it ahead of time and marks it up and you know all of these different things.
00:40:03.418 - 00:40:25.348, Speaker B: Right. And so in financial systems, in a bunch of systems, you want this in like a bridge. You don't really care. As a user. You're like, I'm bridging $10, I want to get $10 over there. I don't care if I'm first or 35th or 47th. Like, it just doesn't matter to me, the order, right? And so there are things where order matters and the things where it doesn't matter.
00:40:25.348 - 00:41:06.064, Speaker B: We now push all of that to application. And so you can decide, do you need strict ordering or do you not at the application level? So that will determine throughput constraints. But what's very important for the protocol is that validation happens in the exact order that it's received. And so what that means is you cannot execute a future order until everything before it has been validated or verified. And if it's been verified, then anybody can execute it. And so what this means is if you haven't verified all of these here, you can't execute this one over here because that would mean if you can execute that one, then you could censor these. You would drop packets and just continue down the chain, and you don't want them to be able to sensor or drop packets.
00:41:06.064 - 00:41:39.304, Speaker B: So as soon as it's been verified, it can be executed on the other side, which means it's impossible to censor because the end user can just always go executed themselves as soon as verified, censorship resistant. Everything you would want from that is fully embedded into the message itself, into the underlying packet. And so it must be verified in the exact order that's received in. Can't execute anything ahead of everything before being verified. After that's done, the application decides, do I need to consume these in order or not? And that just depends on the application. For some applications, it matters a lot. For other applications, it doesn't matter at all.
00:41:39.924 - 00:42:05.844, Speaker A: Okay, yeah, that makes a lot of sense. So can you give me kind of a primer on this idea of unified semantics and how this kind of plays into scaling the network and why chains need to be kind of thinking about, well, just basically future proofing themselves, you know, like, I think a lot of people are so, like, heads down building. It's just like, there's this huge expansion that's going on in the, like, in the cross chain and omni chain kind of landscape. And then, like, can you just talk us through, like, where your head's at with that?
00:42:06.744 - 00:42:49.694, Speaker B: Yeah, I mean, unified semantics is basically like, listen, as an application, maybe you live on ethereum, right? And you want to go to arbitrum and optimism and base. You want to go to all the l L2 s, and naturally you're going there, like, let's use the native L2 bridge, right? You would think naturally they want to do that. Great. Now, maybe you also want to go to aptos, and maybe you want to go inter L2, and maybe you want to go to Solana and whatever, right? And so the question is, for each of these different pathways, do you want to have to build an entirely different interface? As a developer, do I want to say, okay, here's interface for this L2 is interface for this L2. Here's the interface to somehow interact with aptos. Here's another messaging protocol that supports Alana. Here's another one that does this.
00:42:49.694 - 00:43:19.304, Speaker B: Right? As a developer, you don't want eight different interfaces for eight different chains. You don't want to have to deal with managing and upkeep and tracking all of those. You don't want to manage eight different sets of security properties between each one of these and what the underlying contract is. So unified semantics is saying, listen, with layer zero, there is one way to send and receive messages. It's the lowest level possible. You know, just sending arbitrary bytes. You can do anything you want with the bytes, as long as you can do it in a smart contract on blockchain.
00:43:19.304 - 00:43:45.166, Speaker B: You can do it over layers or just sending bytes, arbitrary bytes, and interpreting those bytes, what you use as a validation methodology. In each of those, you can use whatever you want. If you want to use the L2 bridge natively for all of them, fine. If you want to use this external validator set, fine. If you want to go to this chain, there's a non EVM and this chain, that's an EVM, and inner, inner, l, two s, all fine. Same exact interface for all of them. The developer only ever thinks about one thing.
00:43:45.166 - 00:44:03.680, Speaker B: Send and receive, send the bytes, pack and send the bytes, interpret the bytes, and do something with them. Same interface, no matter what. Nothing else of the underlying matters. Everything is abstracted. So the unified semantics is just, that is giving developer one interface, one set of semantics to do the same thing regardless of what the underlying technology is.
00:44:03.712 - 00:44:27.834, Speaker A: The VM, anything that makes a lot of sense. And so been quite heavily in the Solana Bollcan for quite a long time. How difficult is it for an integration with layer zero? Is there a lot of lift there? Who's doing the heavy lifting? How's that going to look? Because I know a lot of people are crying out for this.
00:44:28.214 - 00:44:57.016, Speaker B: Oh, yeah, definitely. Listen, we love Solana. I have, like, an absurd amount of respect for anatoly. We've been, like, fans for a long time, generally. Ryan, my co founder, when he first read the proof of history white paper, I think it was like his favorite paper had read just in forever. He loves the mechanism, even though implemented letter for letter. When we started, we launched, we had zero expectations.
00:44:57.016 - 00:45:30.740, Speaker B: Very easy for us to just be like, all right, we're building this immutable thing, so we have to get it right. We've done all of our audits, but we're just going to, like, put it out in the world and see what happens. Fast forward a year. There's billions of dollars in the contracts. There's billions of dollars being moved across the network, and now your burden of responsibility, like, goes up a lot, right? We go to aptos as our first non EVM, and that's great. And we're doing all of this other, and we start to go to Solana. And Solana has been built at its core for a while, but Solana has some things that the EVM doesn't have.
00:45:30.740 - 00:46:13.884, Speaker B: It doesn't have dynamic dispatch in the same way that the EVM has. If you think about it, when you make a composable element in Ethereum, you make something and anybody can compose it, right? So it doesn't matter, you know, anybody can build an application that wraps uniswap and does, like, x and then swap and then does y with the output of that. That's like, the beauty of composability. And so you build, like, stargate, and anybody can bridge and do something on the other side. So I want to, like, bridge and swap, or, like, swap a to b, bridge b over and swap b to c. One of the hard parts about the way that Solana handles this is that you need to allocate all of your memory ahead of time, ahead of the call to all the addresses. So you have an application and it's going to make a call on the other end.
00:46:13.884 - 00:46:45.808, Speaker B: And as you pre allocate all those addresses, addresses, all of the memory for those addresses, and it doesn't know, like, the application, right, when Uniswap gets deployed and then some application composes it, Uniswap has no clue what that application is. It doesn't care about it. It existed. It existed before it. It's immutable. Anybody can use however it wants in Solana style. The thing, the uniswap in this example that it was deployed and is sitting there is supposed to be immutable, needs to know about the thing that's composing it to be able to make the call on the other end.
00:46:45.808 - 00:47:37.414, Speaker B: And there is no way to do that easily. In Solana, we were working on, how do you bridge this gap of what the current developer experiences in the rest of layer zero in the developer experience in this new VM? Do you find a way to get around that and create a structure that does that? You just have an experience that doesn't have that and is much less composable as a whole. Is that as high of utility? Then you get into there's anchor, so there's macros that are built, and you have like Solana Rust. It's not all of rust. A certain amount of rust is Solana Rust and compiles into the VM. You write this code in anchor and all these other things, and then that compiles to. So if you like, our EVM contracts, 2000 lines of code for v one, maybe even less for v two.
00:47:37.414 - 00:48:36.788, Speaker B: Now, in Solana, you have a couple thousand lines that compile to like 50,000 lines of rust. And that is a surface for a security vector is just daunting. Right? It's just, who do you trust to audit that? Who do you trust to do all of this? Who, like, you're exposing, you're opening up the world where there's a lot of real value. This is something we take super seriously about getting right. We will absolutely be on Solana, but it's just been a, you know, I think a lot of people wish we'd just move faster, but, like, it's not within our core set to, like, move fast and potentially have broken something or have this. Basically, there's a reason we've never, you know, we've never had an exploit ever in layers of our history. And so, you know, through, through all of this, it's just a matter of getting it right.
00:48:36.788 - 00:49:03.740, Speaker B: And so going to any new environment, that's a new VM. Like, you have to understand the VM very deeply. You have to understand the interaction between the VM and the languages that sit above. If there's a layer above that, and you just need to, you have to get it right. So, like, we've spent a lot of time, I think we're pretty close. I think we are more and more confident with the underlying structure. I think Solana foundation and team have been super supportive.
00:49:03.740 - 00:49:12.174, Speaker B: They helped us when whatever we asked for it. And I think we're just, you know, we'll get comfortable and we'll get it right and we'll ship it there we go.
00:49:12.674 - 00:49:47.514, Speaker A: So this is kind of one final one before I want to ask you a really stupid question. So we full disclosure. I've seen investor in Tapioca, so like a truly omnichannel money market. And like, as soon as I seen that I was like, this just makes sense because of fragment liquidity and just overall, like it just completely makes sense from a product perspective. Is there anything you'd love to get see built more natively on top of layer zero that you think could be really interesting?
00:49:48.174 - 00:50:31.554, Speaker B: Yeah, I mean, I've been talking about native lend and borrow for a very, very long time of just like I want to be able to collateralize eth on Ethereum and like borrow Sol on Solana or borrow X or Y or Z. Right. So I think that's a massive unlock, huge displacement of wrapped assets. I've always thought that is super important. I think there's some really interesting things you could do with the Dex around ofts themselves. Ofts introduces very interesting interaction of like minimal standing liquidity requirements. But you can create like quite an interesting product around swapping that with much less need for capital.
00:50:31.554 - 00:51:23.186, Speaker B: I think a wallet that fully abstracts away the underlying chains and all changing RBI all of these things that just is like more seamless from the user experience and from the way, like so much of the tooling now just doesn't exist for this multi environment world. I think stable coins have been very, very interesting. I think the world like, you move to a world where before you have bridges and you're 6810, twelve bps, whatever it is a fee to move assets around now you have the ability to move like $100 million of stable coin for the price of gas. I can move $100 million of insert stable for $0.11. Now I can ARB. Every spread between chains spreads get incredibly tight because ARB is incredibly efficient. Like you really make.
00:51:23.186 - 00:51:32.098, Speaker B: Like, you reduce the friction which expands. Like overall, what can be done with that? So I think stable coins something is very interesting. I think there's a lot of interesting things, but those are a couple of them.
00:51:32.266 - 00:51:57.662, Speaker A: Yeah, absolutely. So I think that's it from the sensible questions. So thanks very much for that. And as I said, we're going to have some notes on this and there should be a report coming out that tries to break everything that we've covered down into kind of ape speak for all the complete degenerates who are watching this. I usually do a quick fire here, but I've recently came across these stupid questions on the Internet I find absolutely hilarious. And I might ask you one or two.
00:51:57.718 - 00:52:02.022, Speaker B: So we can do either or both. I'm fire away.
00:52:02.198 - 00:52:06.274, Speaker A: So the first one is, how many chickens do you think it would take to kill a lion?
00:52:07.574 - 00:52:21.254, Speaker B: Chickens to kill a lion? I bet somewhere within 100 and 150. I bet it's not like that many.
00:52:24.714 - 00:52:31.374, Speaker A: And the next one is, would you rather fight a horse sized duck or 100 duck sized horses?
00:52:31.714 - 00:52:42.592, Speaker B: Yeah. This is a classic. A horse sized duck is terrifying, man. Like, really, really terrifying. I don't know how I beat a horse sized duck. I think I could take the duck sized horses. Like, they don't know.
00:52:42.592 - 00:52:51.724, Speaker B: Yeah, yeah. You kick them. You run around like, they got a little biting vector versus, like, bills. It's easy.
00:52:52.904 - 00:52:59.324, Speaker A: And then the final one that we've been debating internally is, are there more doors or are there more wheels on planet Earth?
00:53:00.304 - 00:53:26.544, Speaker B: Doors or wheels? All right, this is. This is a great question. And we used to play, obviously, as a poker player, we used to play Laudan's thing. Laudan thinks a lot, which was a game that was. It didn't matter what the real answer was. It mattered what the person guessing was. Or maybe there's three of us, and I could say, hey, Grant, how many ounces of water or how many atoms or whatever.
00:53:26.544 - 00:53:51.664, Speaker B: How many atoms in the universe? How many molecules of water do you think there are in the Pacific Ocean? In, like, the two of us bidding, we would auction it off. And so I might say a billion, and they'd say a trillion, and I'd say, like this, and then someone would say, like, sold. Which meant, like, okay, you get that number in higher. I think I get everything lower, right? And so the truth didn't matter. It just mattered about the person. Sometimes you'd be off by, like, so many orders of magnitude. We're just like.
00:53:51.664 - 00:54:04.604, Speaker B: Like you said, there's, like, a thousand molecules. What are you, retarded? And so, like, you know, it was very adversarial between all parties about doing this, but questions like this all the time, so, all right, more doors or more windows?
00:54:05.464 - 00:54:06.604, Speaker A: More wheels.
00:54:06.974 - 00:54:08.366, Speaker B: Oh, wheels. Wheels. All right.
00:54:08.470 - 00:54:09.994, Speaker A: Wheels is better.
00:54:15.334 - 00:54:20.634, Speaker B: Man. Interesting. That's a really good question.
00:54:24.174 - 00:54:27.714, Speaker A: Every time you think you've figured it out, you're like, oh, shit, but what about this?
00:54:30.134 - 00:54:50.454, Speaker B: I mean, there's a lot. There's a lot of wheels, for sure, in multi wheeled vehicles and all that kind of stuff. And every almost bicycles. A lot of things that have wheels also have doors. But, like, a single house has so many doors inside, man. I think it's. I think it's doors.
00:54:50.454 - 00:54:59.234, Speaker B: That's my guess. It could be way off. Is there, is there, is there, is there any. Have you googled this? Is there any.
00:54:59.394 - 00:55:00.930, Speaker A: That's the beauty of it. No one knows.
00:55:01.002 - 00:55:02.682, Speaker B: There's no good. No good answer.
00:55:02.818 - 00:55:07.046, Speaker A: I'm going to hire an intern to go and count every single one of each wheel and each door on the planet.
00:55:07.070 - 00:55:33.314, Speaker B: And there's going to be a reasonably decent heuristic for estimating, for estimating the number of doors. What if you can look at wonder? I want to look up door production companies, see how many they're rolling out every quarter, maybe just how people's minds work. Who produces doors versus who produces wheels and what are the rate of which they're sort of entering the market right now. I bet you can get a pretty decent heuristic on that.
00:55:33.944 - 00:55:54.400, Speaker A: Well, there we go. If anyone's got any answers, you can leave them in the comments below. Or just berate Brian on Twitter and tell him evil, which way. Yeah, thanks so much for taking the time out. I know you guys are super busy and really appreciate you coming on. And open invite, as I say, whenever you guys are pushing anything else, I just want to jump on. Love to have you back.
00:55:54.400 - 00:56:06.324, Speaker A: But yeah, thanks again. And if you're listening and you haven't subscribed yet, I don't even, I don't really know what else to say to you. Just please do as a favor and just do that. And yeah, we'll speak to you next time. Cheers. All right. Thanks for listening.
00:56:06.324 - 00:56:10.964, Speaker A: If you enjoyed the show, please give us a, like, subscribe and turn the notification bell on for next time. See ya.
