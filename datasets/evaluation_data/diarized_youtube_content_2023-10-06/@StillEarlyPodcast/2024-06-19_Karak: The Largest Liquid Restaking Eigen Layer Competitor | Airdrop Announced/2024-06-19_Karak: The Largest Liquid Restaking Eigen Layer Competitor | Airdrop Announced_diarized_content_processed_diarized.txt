00:00:00.280 - 00:00:04.510, Speaker A: Quick one, nothing here is financial advice. It's for entertainment and educational purposes only.
00:00:04.590 - 00:00:11.330, Speaker B: Always do your own research or speak to a financial advisor before making any investment decisions. Enjoy the episode and like. And subscribe.
00:00:17.630 - 00:00:36.070, Speaker A: And welcome back to another episode of still early. We have been requested many, many, many a time in Blockman's discord to try and get these guys on. So we finally managed to nail down a time and despite these guys being extremely busy. So, Drew from Karak, how are you doing?
00:00:36.770 - 00:00:38.498, Speaker B: Pretty good. Pretty good. How are you?
00:00:38.634 - 00:01:08.190, Speaker A: I'm all good, mate. I'm all good. Drew. Drew said he can't come on camera because he's Barbara has given the worst food he's ever seen in his life. We've all been there. But, yeah, for people who might have, I'm pretty sure they will have came across you guys even just in passing. But, like, people coming in calls, do you want to kind of fill people in what you guys are up to, what your role is there, and kind of the mission that you guys have just set out on?
00:01:08.930 - 00:02:00.118, Speaker B: Yeah, I'll introduce Karak first, and then we can step into. I just heard a beat. We can step into my background and fuse it all together. So for those that haven't really been involved in the crypto space recently, Karak is basically a restaking protocol, similar to Eigen layer. And what our goal is to basically build this open, permissionless restaking protocol that anyone can use and build upon and most importantly, restake any asset on. So what this really means is that on Caraq, if you're building a. If you're building a service that these distributed validators and you want economic security attached to that, and we can dig into some of these terms later on.
00:02:00.118 - 00:02:51.350, Speaker B: You can come to Karok and build your validator, or your DSS, as we call them, distributed secure service super fast in a matter of probably a weekend, and you can deploy it and start getting people to stake their assets with you, and you can now have basically a decentralized network of operators that have economic stakes that can get slashed if they misbehave, and you've basically created a service that's decentralized, that can serve your application. But, yeah. So in the past six, seven weeks, we've accrued about a billion dollars in TVL. We're one of the fastest restaking protocols to get to a billion. I guess there's not many, but we were there pretty fast. In terms of users and our point system, we have 110,000 unique users participating in that program. We've integrated 40 assets across four different chains.
00:02:51.350 - 00:03:26.520, Speaker B: And a lot more assets and chains are on the way. Because again, our goal is to be restaking everywhere on all the EVM chains, maybe even beyond EVM one day for any asset that a user or a DSS wants to use. In terms of my background, it's actually pretty, a pretty different background than usual. I got into crypto when I was 13. So I started mining bitcoin when I was 13. Basically, it was the day bitcoin hit dollar 30. I think it was March, sometime middle march of 2013.
00:03:26.520 - 00:04:20.004, Speaker B: I was watching a tech youtuber and he's like, hey, bitcoin is at $30. And they sort of like brushed it off. I'm like, what is this bitcoin thing? So I started really like looking into bitcoin, bitcoin mining. And then every day I was at school or I was asleep, which is like 16 hours a day, I would just run bitcoin GUi miner at the time on my, on my computer, and it would mine, you know, some small amount of bitcoin. And it rapidly got more and more difficult because it became pretty popular at that time. So, yeah, I got, you know, I got screwed over Mount Gox and a lot of those other exchanges. I actually, I mean, mostly sold my BTC for Amazon gift cards and steam gift cards because I couldn't, like, I didn't have a credit card and I mostly just wanted to buy like dota items or random stuff on Amazon, like a keyboard, like mechanical keyboard.
00:04:20.004 - 00:04:51.194, Speaker B: So I just sell it. I'm like, oh, this is great. But it was good exposure because it's like, look, I'm actually using crypto for what it's worth. Like the purpose of crypto, which was like spending at the time using as a, you know, people didn't see bitcoin as a store value as much back then. So it was like, spend it, use it, you know, some guy bought the bitcoin pizza and the core use really was buying things and at around the same time started programming pretty intensely. And then, let's see, 2016 came around. Um, I was about 16 then.
00:04:51.194 - 00:05:22.308, Speaker B: And then one of the first big ethereum hackathons happened pretty close to where I live. And I was, it was like summer. I was like, screw out of ten. Um, I ended up doing decently well, built like this little, uh, proof of Providence, uh, thing on, on Ethereum. But, you know, that's how, that's where I learned how to write solely smart contracts. That's hackathon thing worked pretty well for like students, because hackathons would always occur on weekends. And so you go to school Monday to Friday, fly off to a hackathon or go somewhere, go to a hackathon and come back Sunday night, go back to class on Monday.
00:05:22.308 - 00:06:02.560, Speaker B: I ended up winning a bunch of hackathons, tried building a bunch of this random stuff in solidity. So I got a decent amount of experience under my belt. Helped build like, this small stellar fork with a small group of guys, and it was like a social crypto. We grew up to a decent amount of users, but it really didn't take off. And then interned at Coinbase on the, the wallet team side. So it's the Coinbase wallet that you download to interact with DeFi and those types of things. And this really started to think about security in DeFi, security in crypto in general, and that all sort of accumulated into what we built today.
00:06:03.220 - 00:06:16.662, Speaker A: Awesome. That's one of the cooler origin stories I've heard. There's a lot of people saying, come from. There's a lot of different paths into where people get to it in this space, but that's a, that's certainly one of the cooler ones that I've heard on here.
00:06:16.686 - 00:06:20.450, Speaker B: So, yeah, I've spent about half my life in this industry, which is very.
00:06:22.150 - 00:06:44.790, Speaker A: Definitely not. So what's. You'll obviously have this very unique perspective of the current kind of liquid staking and liquid restaking landscape. Like, what's, what's, what's the current landscape look like? As, have we surpassed expectations? Are we, have we scratched the surface yet? Like, what's the kind of layer of the land just to kind of fill people in?
00:06:45.770 - 00:07:40.370, Speaker B: Um, so I think with, with liquid staking, I think for the most part, we've, we sort of capped, or we're sort of, like, at the point where I think, for the most part, liquid staking has been thought out. There is pretty cool innovations, mostly on making it more decentralized or, like, less dependent on centralized entities. For example, I think Etherfi is one where, and this is a bit technical, but basically the core innovation. And I'm not 100% educated, but this is like the high level synopsis of it. Basically, there's like, these bonds in Etherfi, and basically the validator can't hold the stake hostage. So it's more decentralized than that. Now, if you want your money out of validator, you can get your money out, and they can't hold the hostage forever.
00:07:40.370 - 00:08:09.600, Speaker B: So there's these types of innovations that make that are still happening in the liquid staking. Sphere. There's liquid staking on Cosmos. Teams like stride are allowing you to stake in liquid stake, um, cosmos assets. There's, you know, liquid staking on Solana through Jito, and they're adding things like PBS, where they're actually helping innovate on the chain. But on the Ethereum front, I think for the most part, it's. It's been pretty.
00:08:09.600 - 00:09:17.740, Speaker B: Pretty much the same. Just like small incremental changes to make it more decentralized, but nothing really zero to one, I think, like Lido for the most part, and rocket pool for the most part, where the core innovations and everything else is sort of like smaller, significant changes, but like, much smaller changes that are less, like zero to one. But that's the LST side. The LRT side, I think we're just sort of getting started, and I think most of the LRT game is actually yet to play out. On the LRT side, I think a lot of teams are building their own lrts right now. It's sort of the capital aggregation point where everyone is trying to aggregate and collect all the capital they can, all the eth they can into their LRT's, and then making those LRT's like part of Defi finance. Getting them integrated in lending markets, getting them putting up, getting liquidity into the pool is to allow them to swap in front D pegs, creating some of these innovations.
00:09:17.740 - 00:10:08.130, Speaker B: A lot of the LT's came alive right when Eigen layer started taking off in November and December, but they're at this phase where they collect all this capital now they got to innovate. And so I think we're just at the start of a lot of the LRT mania teams. Like, what is it, swallow building their own l. Two different innovation. Each of the LRT's is becoming a little bit more and more different versus everyone considering. I think everyone presumed they would all become sort of the same, but they've all sort of, like, started building their own separate niches and things that should set them apart. And now on our side, right, we have, you know, we're working with some of the same lrts, but we're also helping new LRT's get off the ground.
00:10:08.130 - 00:10:40.362, Speaker B: One is vector. I think they just rebranded a kernel protocol, but they're building a LRT on top of Carac natively. We have our own little LRT sector coming and emerging where people are building their own LRT's. In our second version. It's going to become a lot more easier to build an LRT on top of Caric. The TLDR is, it's a volt centric design. You deposit as you positive assets, like a standard 4626 volts.
00:10:40.362 - 00:11:10.186, Speaker B: And you can sort of do whatever you want with those, like whatever you want with those assets in that you can allocate to different cara restaking services. We call them DSS's distributed secure services. You allocate them there, you can build it custom so you can allocate to LP pools. Take those LP positions, restake. You can use native restaking or you can take an LST. You can do something with custody. Like, the possibilities are endless with the way we've designed our second version.
00:11:10.186 - 00:11:39.540, Speaker B: And so we can only, like, I only foresee the LRT's as booming once we start pushing out some of our core innovations because it's like endless possibilities and what you can do with it. We're seeing some of them pretty interesting things like, you know, the LRT's. Are you splitting your yield? You're splitting your points. Um, you're able to secure roll ups with LRT's, things like that. Um, but I think that's just at the beginning. You're going to see a lot more.
00:11:39.960 - 00:12:20.440, Speaker A: Yeah, I was, I was going to ask actually, like, uh, on one of the questions, like how, how exotic can these, the kind of deposit assets be, all the collateral assets be? Because obviously I think people will have came to expect, yeah, you can definitely deposit your Eth or your liquid staking tokens and things like that. But with you guys, what I, what really piqued my interest is being like a complete defi nerd, then started to see different levels of composability and like, how exotic can these, these assets get? You mentioned, like LP tokens and things like that. Like, is like, is it just a complete blank canvas? Like, how did, how did you guys like, decide to go down that route? And what kind of possibilities is that open?
00:12:21.580 - 00:13:00.258, Speaker B: Yeah, so I think when we launched, once we came out of stealth, there was a good amount of people being like, no, you can't restake with, you know, any asset. It has to be pristine eTh. Or ask me natively, restate the ETH. I think people are just starting to set arbitrary rules. They really can't back it up. I mean, they can try to create, do some mental gymnastics to back it up. But if you really think deep down, like, fundamentally, what is economic security? In the end of the day, it's dollars, right? Dollars backing some, some service, I'll rephrase.
00:13:00.258 - 00:13:44.896, Speaker B: Dollars backing the, like, legitimacy and the correctness of a service is a decent way to define it. Now, I can't mint a billion tokens lp it, so it now looks like a dot. It's now a dollar in price with like $10 of liquidity, and say, now you have billion dollars economic security. Right? But no one's saying that. And I economic security, like it can be for any token that has like the liquidity to sort of back it at that size, right? So the meme was, I can't wait to restake my whiff. We can break it down. I mean, you could, you could, right? Because we've had a shit ton of liquidity, right? It's got a bunch of liquidity on Jupiter and radium and all the other Dexs.
00:13:44.896 - 00:14:18.970, Speaker B: So why can't you restake? I know we're taking it to an extreme here. Yeah, but it makes people think, right? Why can't you restake with these assets that have decent liquidity, that are decently well traded, that really don't have anything else you can do with them, right? Eth is a. It's a pristine asset, right? It's seen as like the cleanest asset. It's been around for eleven years. It's, you know, or ten years. It's very decentralized. You can do an infinite amount of things with it.
00:14:18.970 - 00:14:42.520, Speaker B: You can literally run like arbitrary code on a network secured by Ethereum. It's the pristine asset. But because it's pro pristine, it's also in high demand, basically everywhere in the crypto sphere. You can use it on the l. On the ethereum L. One, you can use on Ethereum, L. Two, heck, there's even cosmos chains that accept Ethereum, right? You can use it literally everywhere.
00:14:42.520 - 00:15:18.060, Speaker B: So to compete and to get people to give you eth for your service. If you're a DSS, to convince people to give you your eth, it's kind of hard. Like, you have to create rewards that make sense. And I think many people aren't talking about this point, which is eigens got 20 billion. How can you create rewards that can compensate 20 billion for the risk that's being presented to them? Right? Our position is simple as this. Like, okay, yes, Ethan, a pristine asset. It's got a high cost of capital.
00:15:18.060 - 00:16:34.862, Speaker B: What if you can reduce the cost capital? What if you can take tokens like governance tokens that sort of don't have much of use? Maybe they can just be staked first, locking them up. But that's not really, like has, that's not really utility. But take governance tokens that don't have some use and give it a use. And because the cost of capital is less for these tokens, you can then expect, depositors will expect a lesser yield and be fine with lesser yield, right? And as a DSS, as someone that's designing a distributed service, it's easier for you to attract capital and get started, right? If you're only allowed to attract ETH as economic security, it's a lot harder to get off the ground, I would say, especially as something new, maybe more risky. But if you're able to say, for example, bring in arbitrum governance token, because you're writing it a DSS that's meant for arbitrum and for arbitrum specific protocols, you can get the community behind it. You can attract a lot of early capital that's willing to use your service or to at least to restake on your service and secure your service. And you can do it all for a low costs, like less token inflation, or, you know, however you're gonna give a yield token inflation, or actually like giving them, you know, USDC or ether, other tokens.
00:16:34.862 - 00:16:50.638, Speaker B: So that's the idea. It's like you need to think of it as a spectrum of cost of capital. And like the type of, type of collateral you have. You can't just think of it like zero. It's like it's shitty collateral. And eth or bitcoin, you got like a spectrum. So.
00:16:50.638 - 00:16:59.534, Speaker B: And it's an open marketplace, so the DSS can sort of choose which collateral it's okay with accepting. Now, there's one thing that people are.
00:16:59.542 - 00:17:04.526, Speaker A: Gonna say, is it okay with multi, multicollateral as well? So, like a basket? Yeah, yeah.
00:17:04.718 - 00:18:31.738, Speaker B: So idea multicolored actually has a pretty good argument versus single collateral. The argument is that if you have multiple, like multiple types of collateral, then if one of those assets, for example, D pegs or loses a bunch of its value, then the other assets can sort of hold up the DSS saying, meaning that this thing has secured for $100 million day one, won't fall to $1 million day two, because the asset deep or there was a dump or something like that. If you basket the other assets in the basket, sort of make up for the loss of price of one of the other assets in the basket. So we enable that already. So you can, like, for example, if you are building something for GMX, arbitrum, right? Say you're building oracle for some new type of asset they've added, you probably want a basket of arbitrum, GMX token maybe the GLP token and maybe some ETH, that mix of collateral allows you to, you know, allows the users to restake their GMX, maybe reuse their GLP, earn some additional yield, gives arbitrum token a opportunity to be deposited and also has a little bit east for its pristineness. Now you have a basket that sort of represents your user base, represents like your user base your users, but also has some security from that eth side and from maybe the arbitrageum side.
00:18:31.914 - 00:18:45.742, Speaker A: And is there an aligned interest for that to act accordingly as well? If that's the end, that makes a lot like, it's very more, it's much more tailored towards the specific use case. I really like that idea.
00:18:45.846 - 00:19:28.784, Speaker B: That's really exactly. And that goes into one of our philosophies. It's like a DSS, an AV's, you know, whatever you want to call it is going to be, for the most part, teams building extensions, building new features on set of product. And those teams would more rather use tokens that sort of align with them, whether it's their own token or tokens for projects that are aligned with them. Right. So using tokens, I mean, people already say use tokens as instruments of alignment to align groups with your product. Well, this is another tool that allows you to do that, but also as a side effect, extend the functionality of your, of your product 100%.
00:19:28.872 - 00:20:09.440, Speaker A: I think that's really cool. I never really thought about it that way, but that is actually, that's really smart because I know there was a lot of talk about like taking ETH to secure different infrastructure on Solana and Cosmos and stuff like that. And then I was like, yeah, that makes a lot of sense. But now when you frame it that way, particularly like the GMX example, I think that's a really good one because I think they pay a shit ton of money to chain link for their low latency oracles every single year. I think it's like a portion of the fees that they get or something like that. But if there was a product that was more GMX aligned that could help secure that on a low latency basis, I think that's a, yeah, you just give me a lot to think about that. That's really cool.
00:20:09.440 - 00:20:33.060, Speaker A: Can we get into the demand side with the DSS's? And what does that kind of, what does the asset and the user flow look like? So if someone's deposited, say some eave, some saver coins, maybe an LP, if we get like really fruity, and then even if you can just give us some examples of the DSS's and we can see where that the asset flow goes there.
00:20:33.720 - 00:21:03.554, Speaker B: Yeah, so if we talk about it, if we talk about the flow, that's not specific to any of DSS yet. In our v two, basically what happens is that a user comes and we'll call them a staker. A staker comes with their assets. They see that their asset is supported by this vault. So when they look at a vault, they're seeing, hey, here's an operator. And if for the most part it's, you know, some of these professional operators, but it can also be home operators. Nothing's restricting them from participating.
00:21:03.554 - 00:21:36.436, Speaker B: They see an operator that they like, they see, oh, here's like the DSS's they allocate to. And here are the assets they support. Like, okay, great, my asset is supported, let's just say USDC for the sake of example. Like, okay, I guess in USDC, let me allocate towards. Let me allocate some my USDC to this operator. Okay, so you've allocated towards an operator. Now the operator has the decision and sort of ability to or discretion to delegate that stake of USDC to DSS.
00:21:36.436 - 00:22:26.134, Speaker B: So what it's going to do is look down all the DSS's that are available that accept USDC and figure out the ones it's comfortable with allocating the capital to. So say it picks a handful of DSS's. Maybe there's like a roll up DSS, there's an Oracle DSS or the bridge DSS, and it allocates it that USDC to, to those DSS's. What's actually happening is, for example, if 100 USDC is in the vault, 100 is given to each one of these DSS's to use. Now the DSS's have expressed a max slashing amount. They're saying if anything goes wrong and or if you as operator misbehave, then you will be slashed. But, you know, before the operator has delegated to them, there's like a disclosure where it's saying, okay, here's the max amount.
00:22:26.134 - 00:23:08.796, Speaker B: The DSS will slash you over some seven day period. So it can say, hey, you may get up, slashed up to 10% over a seven day period, or you may be slashed 100% over that seven day period. Now the operator's job is to make a good decision. Is a risk reward worth it? Is this a good audited DSS? Does it have a track record? What's actually happening here? What are the conditions I may be slashed in, et cetera and if it, you know, sees that it's a good opportunity, it will delegate to it. The operator also runs software on a node, and that software is basically created by the DSS. And they run the node, the nodes gonna appear to the other nodes in the DSS. It's gonna work with them.
00:23:08.796 - 00:24:09.330, Speaker B: It's gonna get tasks, you know, arbitrary tasks, depending, they're specific to the DSS. But in this example, there's the arbitrary, you get some tasks, it'll complete the tasks and it will get rewards. As those tasks are completed, those rewards then flow back to the operator, and the operator can give it back to the staker after taking some cut for, you know, its fees. If something goes wrong during the task and the specific operator or a set of operators is deemed at fault, they can get slashed up to that predefined slashing limit for their fault. So basically what happens is some party, whether it's operators or Joe Blow who's watching the operations, can challenge a task and say, hey, this was not done correctly. Say for a basic example, the task was to add two plus two and someone returned five. You can prove that on chains like, hey, I, the task was two plus two and this guy returned five, he should get slashed.
00:24:09.330 - 00:24:51.306, Speaker B: And so what will happen is they get queued for a slashing because their result was wrong. Now this takes place on chain, which is the important part. You can't just, for the most part, you can't just arbitrarily decide, hey, this should be slashed with an off chain vote. It usually has to be done on chain. And then after they've been, the DSS decides to slash them. They go enter a slashing queue where there's a, again, a five day period where they can, the slashing can be overturned by a veto committee. So this veto committee will be like, I think, nine or eleven signers that have vote with a super majority and they can veto a slashing.
00:24:51.306 - 00:25:09.010, Speaker B: And this is like a safety mechanism to make sure there's no inadvertent slashings and people aren't randomly getting slashed for things that weren't intended. But yeah, that's the flow. Basically, you delegate if things go well, you get rewards. If things go bad, you could potentially lose your stake.
00:25:09.910 - 00:25:21.570, Speaker A: Do those who get the kind of veto surge that they have to put down any collateral, like, how does that work? Is it, how do you, how do you select those kind of, how do you select that kind of committee?
00:25:23.030 - 00:26:07.040, Speaker B: In the beginning, it's, it's mostly just like people that we trust that can, from the from like the community of made people that we can trust that can go in and spend the time to understand what the task was, how the DSS works, and if this is indeed a proper slashing or simply just like misconfigurations or like something that was supposed to be unintended. So people that are more technical, there's no like formal governance process yet, but we probably will intend to have one. And then once things are more ironed out, once we've run the DSS's for a while, once people are used to everything that you can relinquish that role and then there won't be a veto committee anymore. If it's flagged or slashing, it's flagged for slashing. There's nothing we can do.
00:26:07.420 - 00:26:46.590, Speaker A: Makes sense with the DSS, the operators that are getting paid the rewards. This is going to come in the form of people paying to use whatever specific DSS it is. And then do you think they would be an allocated amount in maybe like the DSS's native token as well? How does this obviously drastically reduces the amount for the security budget if they were going to use their own native token to secure that specific service? Like anecdotally, what does that look like for the DSS's? And how much of an economic serve is that for them?
00:26:47.570 - 00:27:01.606, Speaker B: You bring up an excellent question, and this is a point that's been becoming a point of debate, which is, again, how do you pay rewards on 20 billion? It's hard, right?
00:27:01.638 - 00:27:03.730, Speaker A: Yeah, I wouldn't like.
00:27:04.750 - 00:27:49.010, Speaker B: It's hard, right? Because the DSS, like, you gotta create like a pretty. Like a DSS that can do or av's that can like, I don't know, do fission or something may be worth that, but it's a hard problem to solve. So our approach is. There's a few prongs to our approach that I think allows us to approach this problem. One is that cost of capital we talked about earlier about allowing you to use different assets that are not as pristine. If you can take an asset that you can't really stake and you give it some staking yield here or restaking yield here. Well, if there's no other option, then people are probably more keen to take this only available option.
00:27:49.010 - 00:28:17.550, Speaker B: Right? So now you have people that demand less for their assets. So you could. Now if you're taking assets that aren't as per se, you can pay less yield to them and people will be happy. And when people keep their assets locked in, second is introducing asset limits. Right? So you want to introduce asset limits, say, hey, this is a small DSS. This is supplementary to a DeFi protocol. And say the protocols, maybe you got 100 million.
00:28:17.550 - 00:29:11.422, Speaker B: It. Let's just say we don't need more than $10 million in economic security to secure, for example, the oracle. Then you cap it and we have the ability with our vaults and they're pretty flexible. You can say, hey, I only want 10 million in this, in this allocated DSS. Anything more will just be rejected and reverted. Okay, now you've capped it, now you have a predictable amount of economic security and now you can actually budget and forecast, oh, how much do I have to pay these delegators? A third feature I think that's going to be pretty important, that will be built upon what we're building is like basically locking in capital for a fixed amount of time and giving a fixed amount of rewards for that duration, right? Almost like fixed and variable income. If you can do that, then now as a DSS you basically have people that probably want less rewards because we're flexible on the capital.
00:29:11.422 - 00:29:54.380, Speaker B: We accept limited upper cap on how much capital we're actually taking in. So we can actually give people sustainable rewards that are make sense for the amount of capital they've provided. And three, we have a fixed amount. So we know that if I wake up tomorrow, my economic security that was once at 10 million is not going to be 1 million and compromise a lot of my, a lot of the services we built. So once they have that, then we got to talk about what they'll pay the rewards in. Ultimately it's up to the DSS, right. If it can somehow create yield in a non native token, then it can pay that out if it needs to.
00:29:54.380 - 00:30:31.628, Speaker B: It can create its own token and pay the rewards out there. But again, these three prongs sort of allow it to limit the emissions that it needs to achieve its goal. When I, if you ask me, hey, what do you do? I think is more likely. I think it's gonna be a mix of both. I think there's gonna be protocols that just, you know, want to create services are complimentary to their existing protocols. Don't want to go through the hassle of launching another token that may pay on their native token or just like USDC eth or some other token. And then there'll be teams that are creating a DSS that's so big they believe, yeah, let's add us up.
00:30:31.628 - 00:30:50.360, Speaker B: Let's create a token for this DSS because it's basically crypto infra. It's doing something so big that we believe it needs a token. But yeah, it's up to the DSS ultimately, but that's the sort of the way I look at it, I think the smaller guys will probably use existing tokens and the big ones will probably launch their own tokens.
00:30:51.390 - 00:31:17.318, Speaker A: Yeah, I think. I think you. And you mentioned arbitrum. That really like piqued my interest because I know the governance forum and stuff like that is. It's a bit difficult to read at times because everyone's climbing all over each other to get themselves heard. But they were even thinking about some kind of sequence of rebirths. If you staked your arb and it was going to be like this tiny, minuscule amount for the amount of people that expected to stake.
00:31:17.318 - 00:31:34.790, Speaker A: But then again, for tokens like that, where you don't necessarily have an awful lot of utility. Beyond the fact of just voting, I think this being able to unlock additional sources of yield and revenue across aligned DSS, I think that's really, really interesting.
00:31:36.210 - 00:32:10.860, Speaker B: It's only that it's not just like, I think especially with the modular narrative, when you can go cross chain, it's going to be pretty cool. A lot of ras are coming up. You have things like initiative billing, like minutias and like the smaller roll ups. You have apps that are building their own chains by using celestia, like rolling into Celestia and using roll kit, things like that. I think there's going to be a lot of assets moving across chains and restaking there. Our infrastructure can be deployed anywhere, by the way. So it's not specific to Ethereum.
00:32:10.860 - 00:33:00.280, Speaker B: It can be torn any EVM, and then we can always extend it to work on other virtual machines, but then it can be deployed everywhere on all these evm chains. And you can sort of have this very interesting dynamic where it's like, you know, you have, for example, maybe Tia, and have Tia come into your roll up and be used as a restaked asset to secure your roll up, right. To make sure and have nodes that are washing the chain and making sure the transitions and the DA is being posted properly and that the state routes are being posted to l one, you can have this, you know, its modularity to the extreme, where now you're plugging in modules, you're taking assets from a bunch of different places and plugging those into those modules. It can create a very interesting landscape I would say that we haven't seen yet.
00:33:01.340 - 00:33:16.460, Speaker A: So with any of the DSS's announced yet, is it going to be like more of a sandbox style rollout where it's a little bit permissioned. And then you slowly start to test the waters and then see how close to permissionless you can get it. Like what's the kind lay of the land?
00:33:17.280 - 00:34:06.492, Speaker B: Yeah. So I think this is a good time to start explaining our first DSS. I'll explain why we built it and then I'll explain some of the other DSS's that are being built on the side and why we're excited about them and hopefully gives the audience maybe some ideas if they're interested in building something on top of karak. So one of the first DSS's that we are building is called CUDA, but with a k. It stands for Karak Universal data availability layer. I guess the l is not part of it, but yeah, you get the point. So the purpose of this DSS is to make it easy for l two s rollups to access all the different types of das that are popping up.
00:34:06.492 - 00:34:29.080, Speaker B: Right. Initially in November we had Celestia and then 4844, then avail Eigen Da. I think near has a DA. I think also binance has a DA, according to our docs. Right. There's a lot of das coming up and we're just at the beginning, I would say. And as there's more and more da's, it becomes harder for, I think the roll ups to.
00:34:29.080 - 00:34:54.056, Speaker B: To integrate them. Right. When you. And we did this personally with K two, which is our roll up, when integrating Celestia early on, it was a bit difficult because it was just up something brand new. Right. Well, as more and more da's come out, teams will have to continually integrate all these da's if they want to switch between them or they want to use a few. Like for example, they want to use Celestia and then fall back to 48 44.
00:34:54.056 - 00:35:30.890, Speaker B: If there's an issue, they have to integrate both of those. Right. And so our idea with Cuda and this came from building K two was why isn't there a simple interface that connects to all the Das out there and all the DA's that will come in the future and I can pay with one asset and then, you know, the. It will convert it and pay with the native asset on that DA. It will make sure the information is posted properly, that, you know, if it's like celestial, the commitments correct. Or if it's one of the other days, the KZG commitments correct. It has generated and make sure everything's posted properly.
00:35:30.890 - 00:36:00.568, Speaker B: Can you build that? Almost like a SaaS product. So if you're an l two, you simply post to Cuda and Cuda will take care of the rest. Route the information where it needs to go based on your, your intent. So you'll be like, hey, post to Celestia. If not, post to 4844. If there's an error or you know, my price I set is too low, you can do another one where it's like, hey, post to avail and then post to Celestia and then post to 48 44. Both those fail.
00:36:00.568 - 00:36:35.742, Speaker B: Or post to any of these based on which one's cheapest. So that's the idea behind Cuda. And then what this really gives you as l two again, is a SaaS like experience. You plug in, you're ready to go, you're up to date. We'll integrate on the cuda side any of the new das. If there's any proving schemes that we need to integrate, we'll integrate those for you. For as an l two, you just need to load up a wallet with USDC, set up your desired intent for what DA's you want to route to, and the rest is handled for you.
00:36:35.742 - 00:37:22.390, Speaker B: Now, what's actually happening on the backend, without getting too technical, is basically you have these nodes that basically will bid on your request and say, hey, I can post it to this data you've sent to Celestia for ten cents, twenty cents, thirty cents. Whoever the lowest bidder is gets the task. They go and they post the data. And then the other other nodes basically verify the data has been posted properly. The data that came in has been posted properly. And if it's celestial, it uses their commitment scheme. If it's one of the others, they use like KZG and make sure everything's posted properly and then returns the data that the l one or the l two needs to post on the l one as part of its DA inbox.
00:37:22.390 - 00:38:11.150, Speaker B: But yeah, it ends up creating a SAS like experience for l two s allows them to focus on what makes them more unique versus like, the text parts that really like. For the most part, the customer doesn't really care about, but it really exemplifies, you know, what the DA can do. It exemplifies what a DSS can do on karak. It allows us as a team to dog food our own SDKs, our own contracts, and make sure the developer experience is good. Because at the end of day, the customer is really our is the developers that are building the DSS's. If they're unhappy, if they don't like building on us, if it's a pain in the ass to build on us, then our product's no good. And so this allows us to make sure our product is good.
00:38:11.150 - 00:38:51.834, Speaker B: If we're pulling our hair out, we need to go back to the drawing board and fix it. And yeah, it's basically creating this. Like, I mean, our goal should be to create like a stripe like developer experience where it's super elegant, super simple, tons of examples. Based on what I want to do, I just go look, see an example I like or best fits my needs, copy it over, change it to exactly what I need, and get it shipped off all permission, permissionlessly. So you don't have to come to us and ask for permission. You don't have to ask any of that. Deploy it, we'll help you promote it, we'll help you get the capital, help you get stakers, get operators, and you're off to races, right? No politics, none of that.
00:38:51.834 - 00:38:55.090, Speaker B: Actually. A truly permissionless restaking protocol.
00:38:55.830 - 00:39:13.690, Speaker A: Awesome. Love that. And can you fill me and the listeners in on k two just as a high level, what that is what it would be used for and the reasoning behind the actual roll up and the architecture of it.
00:39:14.230 - 00:39:47.928, Speaker B: Yeah. So one of the limitations of restaking right now is the off chain consensus uses thing called PLS signatures without, again, getting too technical. It's basically a signature scheme that allows, it's like the game telephone. When we play as kids, you have a message, and we each pass on, like, you say the message to one person, he says it, the next person, he says the next person. Think of that, where you're like, you have a message and you're basically, every one of you guys is assigning it to say, hey, I saw this message, or I saw this piece of data and I'm confirming it's true. Right? And you pass it on to next guy. He does the same thing.
00:39:47.928 - 00:40:39.356, Speaker B: He passed on next guy and does the same thing. It's sort of like this scheme that sort of allows us to make sure a lot of people have signed off on something in a very fast manner, in a very computationally efficient manner. It's used on the ETH consensus layer to verify, like all the validators have signed off, but we also use in restaking. And there's one limitation, which is when you go verify these on smart contracts, it's actually kind of size restrict in it, you can't verify too many of these without hitting the gas limit. So in K two, we basically have made a precompiler that allows you to verify the BLS signatures, meaning that you don't have to hit the gas limit. And that means you can have a lot more validators as part of your DSS. You can have a lot more validators party.
00:40:39.356 - 00:41:33.926, Speaker B: You can create something a lot more decentralized. The other draw of K two is basically sandbox for DSS to build new things and test it out in a small, yet still adversarial environment. If you want to either a, you're building a new DSS, or b, your existing DSS and you want to test some new features, you can come to K two. There'll be a pool of assets that will allocate to things that are cool or innovative or whatever. And you can start running a DSS at a small scale, make sure it works, and then you can go find and deploy on its intended home, whether it's arbitram, mainnet, or any other chain that we support. But, yeah, that's like the two big draws of K two. Now, there'll probably be apps that are built specifically for our purpose, built for restaking, like maybe LrTz, um, maybe like Dexs to swap out of the LRT to the underlying assets, those type of things.
00:41:33.926 - 00:41:43.010, Speaker B: But the core innovations there are those two, which is allow you to build a lot bigger, lot more decentralized DSS's and to a sandbox that allows you to innovate and try new things.
00:41:43.390 - 00:42:21.250, Speaker A: Awesome. Love that. And, um, yeah, as you mentioned at the top of the show, you guys have, like, amassed a ridiculous sum of capital in such a short period of time. Like, how are you guys kind of thinking about the whole XP program and that whole rollout and, you know, like, the whole kind of points matter and just how do you guys kind of think about that to make it a little bit more interesting and kind of keep people excited for, like, a longer duration, you know, because you've seen a lot of mercenary capital in the space, for better or for worse. But, yeah, how do you guys kind of think about that and keep it. Keep it fresh?
00:42:22.550 - 00:42:55.240, Speaker B: So I think it's less. I think everyone's fatigue is a little. I mean, yes, everyone's doing a points program. The way we look at it is the thing that should come before points is the community. So we actually spend a lot of time focusing on community, building a community, educating the people in the community about what we're building, making sure they're aware what restaking is, what are the risks involved with restaking and helping educate them so they can evangelize and help people. The entire team, we're all in the discord right. So if you need anything, we're here.
00:42:55.240 - 00:43:20.044, Speaker B: I'm, you know, I'm working on support tickets. Everyone else is working on support tickets at night. Like, we're one with the community. We're in the trenches. We don't, you know, we don't see ourselves in the ivory tower. And I say all this and know we can see feedback and respond to it really fast because we're, again, in the trenches. I'm seeing a sentiment in real time, and we're responsive to it.
00:43:20.044 - 00:43:54.120, Speaker B: So taking that to the points, I mean, points is a very straightforward program. You deposit, you get points every day. What people can, can see is that we're a fast moving team. And hopefully they can. They see we're a fast moving team. We've shipped a lot in the two months we've been live and plan to ship a bunch more in the next coming weeks. And hopefully, you know, people could stay with us and see that we're fast moving team and see that we ship product and stay encouraged to participate in the.
00:43:54.120 - 00:44:27.946, Speaker B: In our points program. We've gotten, again, a billion TVL in about seven weeks so far, which is pretty damn impressive. But I think this is just the beginning. Right? Once we ship, start shipping out these products and people start seeing some new stuff, right? We talked about the Cuda da, but there's a lot like the Cuda DSS. There's a lot more dss that are being built, right? You have people building bridges and resticking on top of the bridges. You can build oracles. You can build rasses to help secure roll ups and make it easier.
00:44:27.946 - 00:45:02.612, Speaker B: You can do rasses for other vms. Right. On the other part of the spectrum, there's things that are completely new that we haven't seen. Instead of securing things that already exist and making them a little more secure, we're seeing things like, you know, the AI AI, like AI Abs's aid, sss that allow people to do. Have, like, on chain agents or to do inference or whatever, right. Some of the new products, even on, like, the BTC front, right. Restaking, allows you to do some interesting things with BTC, like creating BTC bridges.
00:45:02.612 - 00:45:32.134, Speaker B: BTC l two s or l two s secured by rap. BTC or somehow like a new type of BTC that you've bridged. There's so much there. There's so many new ideas that if anyone's looking to build something crazy, unique, they can always reach out. If you're someone that's interested in, you know, restaking or just want to build something here, but don't have an idea. Of course, you can still reach out tons of ideas to you build on. We can jam together.
00:45:32.134 - 00:45:57.100, Speaker B: We have first class developer support, meaning that you have access to the core engineers. You have access to me almost 24/7 if you need anything. We're not. We're not going to sit there and choose favorites against the open permissionless protocol. So we, as a team, make sure we embody those that ethos and are open to any one building. But, yeah, like, we're a fast moving team. And I hope the points program sort of shows that.
00:45:57.760 - 00:46:16.880, Speaker A: Awesome. Love that. So, um, is there anything I might miss? Stuff that you'd like to kind of leave the audience with or, like, what's kind of next for you guys? Is it just heads down building as usual, and then waiting for more dss to come online? Like, the floor is yours if you have anything to kind of self show.
00:46:18.700 - 00:46:51.410, Speaker B: Yeah, I mean, I presented Cuda. Cuda's coming into testnet pretty soon. Alongside Cuda will come two other parts that are very important to the roadmap. So we have our V two. Our V two introduces a lot, basically everything needed to build a DSS, right? So it introduces the idea of these custom vaults. So if, you know, again, if you're building LRT's or you want to build custom strategies, that's the place you can have endless creativity. It introduces the ability to delegate to operators.
00:46:51.410 - 00:47:41.688, Speaker B: So if you're an operator, you know whether you're operating and you know if you're operating and verifying chains on Cosmos or you're running ETH validators or Solana validators, this is where you can participate as an operator. And then if, of course, if you're a DSS, someone is building a DSS, someone that has a defi protocol, building one. Then once some component that's being run off chain or something that's too advanced to run on Ethereum smart contracts or the EVM, you want to build some component, but you want it to be secure. You can always come and build a DSS super easy. We'll be introducing the SDK alongside the v two, and the SDK will allow you to easily build, again, a DSS. Use the SDK to build it in typescript or rust or whatever your favorite language is. Super simple.
00:47:41.688 - 00:48:11.210, Speaker B: We'll have a bunch of examples for you to follow. Find the example that works best for you. Clone it, start building so that the SDK closed. Beta comes pretty soon too, alongside v two. And we also are introducing native restaking so if you have an Ethereum validator, you can easily point it to Ethereum or to our native restaking vault. And that will allow you to restake without, like using an LST and keep a home validator. You can still restake and participate in the card network.
00:48:11.210 - 00:48:44.746, Speaker B: It's not restricted to LST's and other tokens, but yeah. So both the v two, the native restaking are under audit, and then the CudA comes out in Testnet. Pretty soon the SDK follows. And that's just the core side. On the ecosystem side, we have, we're onboarding a ton of operators, and these guys have operated on everything. So they've operated on Cosmos, Solana, they run Ethereum validators, etcetera. So their experience, they can keep up the infrastructure.
00:48:44.746 - 00:49:29.288, Speaker B: They have good infrastructure uptime, and we're super excited to start working with those guys because that really brings, like, that makes it so you have world class infrastructure running on karak and that there's infrastructure people can delegate to and trust that stuff won't break and for the assets not to be slashed. And then, yeah, as I said, we're onboarding a lot of developers to build DSS's from a wide variety of use cases. So small things, like, again, bridges to huge things, maybe like AI. And we're giving them all our resources without, you know, we don't ask for anything in return. We don't need NDAs or anything like that from anyone. Just come build, we'll give you our full attention. We'll give you whatever you need from our side.
00:49:29.288 - 00:49:39.510, Speaker B: Whether it's marketing or developer help, you have access to the core developers themselves. No politics, none of that. Let's get building. That's our whole philosophy internally.
00:49:39.850 - 00:50:07.070, Speaker A: Love it. So if you are listening and you want to kind of see if you can progress an idea forward, then I'll leave all the links below to be able to get in touch with Drew and the team. But thanks so much for joining us, man. I really appreciate that. I know you guys are super busy, so thank you very much for taking the time out to speak to us. And then if there's anything you need help with from us, please just let us know. We're always happy to help the people who are pushing the industry in the right direction.
00:50:07.070 - 00:50:13.850, Speaker A: So thanks very much and open invite. If you ever want to come back on you push a new product, just let us know and we'll do it again.
00:50:14.630 - 00:50:16.302, Speaker B: Perfect. Thanks so much for having me.
00:50:16.446 - 00:50:18.462, Speaker A: All right, take it easy, everyone. Speak to you next time.
00:50:18.526 - 00:50:18.902, Speaker B: Bye.
00:50:18.966 - 00:50:24.590, Speaker A: All right, thanks for listening. If you enjoyed the show, please give us a like subscribe and turn the notification bell on for next time. See ya.
