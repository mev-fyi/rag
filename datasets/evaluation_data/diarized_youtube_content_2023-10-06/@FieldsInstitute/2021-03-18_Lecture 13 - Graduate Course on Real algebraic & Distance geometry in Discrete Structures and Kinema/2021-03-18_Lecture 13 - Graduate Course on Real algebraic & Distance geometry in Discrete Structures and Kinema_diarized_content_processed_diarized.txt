00:00:00.280 - 00:00:40.374, Speaker A: We left off last time talking about three flattenability, and we're going to characterize it. So my plan for today is to characterize three flattenability, talk a bit about single interval frameworks, and then if you have any other questions, we can discuss that then at the end of the class. Okay, so where we left, we made a result a lot earlier, saying that a graph is a partial three tree if and only if it doesn't have one of these forbidden miners. Okay, so k five k two two, or the octahedron v eight or c five cross c two.
00:00:40.914 - 00:00:41.854, Speaker B: Hey, Sean?
00:00:42.194 - 00:00:42.762, Speaker A: Yes.
00:00:42.858 - 00:00:45.562, Speaker B: Can you remind us what a partial three tree is?
00:00:45.738 - 00:01:10.870, Speaker A: Oh, okay. So a three tree is something you get by just gluing k four simplexes together at faces, at triangle faces. And you just keep doing that operation. And then a partial partial three tree is just a subgraph of that. Does that make sense? It's a bit of a quick definition, I guess.
00:01:10.982 - 00:01:12.554, Speaker B: Yep, that was good. Thanks.
00:01:12.974 - 00:01:45.476, Speaker A: Okay, so the, basically, so with the previous cases of partial one trees is the same as being one flattenable. And partial two trees was the same as being two flattenable. But it's actually. So partial three trees is not the same as being three flattable. Okay. And we're going to discuss that. So what's going to be our method of characterizing three flattenability? Well, first thing we're going to see is actually some of the above are actually three flattenable.
00:01:45.476 - 00:02:24.516, Speaker A: And this is what I'm saying about partial three trees and three flat ability are not the same thing. Partial three tree, being a partial three tree is a strictly weaker condition. Okay, so our method for characterizing three flattenability, the first step is to prove that the minimal forbidden minus for three flatten ability are some combination of the above. This will make things easier because it could be that maybe these two are. Well, it's going to turn out that these two aren't three flattenable. We already know this one isn't and these two are three flattenable. But it could be that maybe there's some other minor that we're somehow missing.
00:02:24.516 - 00:02:36.228, Speaker A: So we need to prove that the minimal for middle minors have to be some combination of these four. And then we're just going to determine which of the four it is. That's the method we're going to do use to prove it.
00:02:36.356 - 00:02:36.932, Speaker B: Sean?
00:02:37.068 - 00:02:37.572, Speaker A: Yep.
00:02:37.668 - 00:02:40.934, Speaker B: What is some combination of a graph mean?
00:02:41.274 - 00:02:43.654, Speaker A: Some combination of the four graphs.
00:02:44.634 - 00:02:48.602, Speaker B: So not just some combination of or a union or.
00:02:48.738 - 00:03:10.822, Speaker A: Yes. Yeah. So we're going to say that the forbidden miners is some subset of these. It's going to turn out it's just going to be these two. But we're just going to prove that, yeah, it's some subset of these four are the forbidden miners. Because it could be, yeah, it could be these two. And then there's some third forbidden minor, which is somehow bigger than these two.
00:03:10.822 - 00:03:46.774, Speaker A: And something like this. It could be something a bit funny like this. So yeah, we're just going to prove that's not the case and then we're going to determine which ones are three flattable and which ones aren't, and that will give us the result. So that's the method. Okay, we've got a few cases to cover, so the first one is going to be low connectivity cases. So this will allow us to reduce the problem to three connected graphs only later on, which is going to work easier. So when I mean low connectivity here, I'm going to mean, well, I guess disconnected is easy to do.
00:03:46.774 - 00:04:32.114, Speaker A: You can always assume these graphs are connected because if they're disconnected, you can just use, do one or the other component one connected and two connected, not three connected and not two connected, but connected, I guess. Well, I'll explain in a second. So, okay, we've got here some graphs. You can assume they're all connected and they're all joined together at two vertices. Okay? But even more than that, they're all joined together at some edge xy. So each graph Gi contains the edge xy. And then we just glued them all together at the edge xy.
00:04:32.114 - 00:05:15.212, Speaker A: Okay, this is going to give us our graph g, and we can also talk about g. So g is just, we glue them all together at the edge. G is we glue them all together at the edge and then we just take away the edge. Okay, what we're going to have is that the flattenability of all three of these graphs is exactly the same. Now this is going to help us reduce to the problem of three connected graphs, because if we have two graphs, if we have a graph that's got a one, a one separating set, it's kind of easy to see that we can just deal with. We can separate out into two graphs and then just deal with both halves. So we're doing the same with two connect with.
00:05:15.212 - 00:05:51.058, Speaker A: If you've got a two cut, that's a clique. If you've got something like this, we're going to be able to separate it out. Okay. And this is kind of the idea. What we're going to say is that what we're going to prove later on is that, okay, if the graph is not three connected, but it is too connected, you would look at the separating set and realize, okay, I can actually just decompose this into two of the graphs and then just repeat the problem later on. Right? So first thing, if g is deflattenable, then so too is g. That's fairly obvious.
00:05:51.058 - 00:06:38.294, Speaker A: G just contains g. Okay, what else? If g is deflattable, then it's immediate that these are all deflattable as well. But we can also actually say that if g contains g one to gn as minus, then g does contain g one to gn as minus. So if g is definable, then so are g one to gm. Now the way to see this is each of these graphs Gi is connected. And a connected graph can always just be just by edge contractions, can just be contracted to a single edge. Okay, so what we can do is if we want to look at the graph g one, we contract g two all the way up to gn to a single edge.
00:06:38.294 - 00:07:24.930, Speaker A: And then what we've got left is we've contracted from g to g one. So g one is always a minor. And similarly, so is the same for g one, g two up to gm. Okay, so the only direction that we have left to prove is that if we have a load of graphs that are deflatt, so these g ones to whatever, and we glue them all together an edge, the graph g is going to be from this gluing is going to be deflatable. Okay, so if we assume they're all, um, deflatt and we choose a realization of, um, G. Okay, what we're going to now basically say is that, so we have this realization p of G. This is going to be in however many dimensions you want.
00:07:24.930 - 00:08:06.604, Speaker A: What we're going to basically say is we can decompose p into, uh, these p I's. So the PI is just a restriction of p to the vertex set of Gi, the set vi. So we can decompose it into these different components. Each one of these components is flattenable. Okay. And then we can just basically say, okay, we can kind of glue them together in a sensible way. So to be more slightly more specific, we've chosen our realization p of G and we define PI to be the restriction of p to to the vertex set of Gi to vi.
00:08:06.604 - 00:09:05.224, Speaker A: As each of these Gis is deflattenable, there exists a d dimensional realization qi of Gi. Okay, that's just from definition. By applying translations and rotations, what we notice is that we can always assume that the x coordinate of the q thing is at the origin and the y coordinate. Sorry, the x vertex of the queue is at the origin and the y coordinate is on the x axis. So maybe x and y weren't the best choice of letters, but. Yeah, so we've just translated it, put one vertex here and then rotated it around till it touches the x axis. But we already know that the length of the, the distance from qix to qiy has to be the same for every single y because they all came from this placement p.
00:09:05.224 - 00:09:31.376, Speaker A: And all the p has a set length. So that means all the p I s have the same length between the two vertices. So I've got this CI here. Well, we know that this CI has to be constant. Okay. And now we just say, okay, well, we know where each qi x is and where each qiy is, so we can just glue the qi's together to form this new realization. Q.
00:09:31.376 - 00:10:11.360, Speaker A: Q is going to be d dimensional. So then it follows that we flattened out p gp into gq and we're done. Okay. And as you notice, this works in any dimension. We can kind of say something similar with. What's it called? If we have any clique. So what I've got here, basically, if we have a graph which is deflattenable, and instead of it being xy, that the or container was x, y, z.
00:10:11.360 - 00:10:36.954, Speaker A: So it was like a triangle, as long as it contains all the edges in each one of these gis, then you can make a similar statement about g and gi, and then similarly, you can make a similar statement with g. So this result can be extended to higher cliques, but we only need it for edges. So that's the reason for just doing it this way. But, yeah, that's a homework problem. If you want to do it, you can extend this. Yep.
00:10:37.074 - 00:10:41.890, Speaker B: But then there'd be restrictions on the d related to how big the clique is.
00:10:42.002 - 00:10:58.214, Speaker A: Yes. Yeah, that's true. Yeah, I guess it would be. Would it cause problems? I guess it would just be trivially true in some ways. Maybe. Let me think. Oh, no, I guess there's g would cause problems.
00:10:58.214 - 00:11:02.326, Speaker A: Yeah. So, yeah, there's a restriction on the size of the clique. Yeah.
00:11:02.510 - 00:11:09.074, Speaker B: You have to make sure the clicks are deflattenable. You could work with anything up to a d clique.
00:11:10.374 - 00:11:11.158, Speaker A: Yes.
00:11:11.326 - 00:11:14.056, Speaker B: But bigger than that, you'd have a problem with this.
00:11:14.080 - 00:11:18.244, Speaker A: Yeah, bigger than that, you're going to have. Nothing's flattenable, so it's going to cause a problem.
00:11:21.064 - 00:11:39.648, Speaker C: Sean, I was going to say, if all of the GI just have a common subgraph, and you know that all the GI are flattenable, then as long as you realize the common subgraph in the same way, then it seems like it should work.
00:11:39.816 - 00:12:00.364, Speaker A: It does not, because you could have, the common subgraph is maybe like a tree, and it could be. One realization has the. Maybe it's just a path of length three. So one of them is like this and another one, it's like this. Well, then we can't do the gluing operation that we did. It is required, the subgraph is required to be a clique.
00:12:00.784 - 00:12:01.496, Speaker C: Okay.
00:12:01.600 - 00:12:30.024, Speaker A: It might be true, but the proof that I've given will not follow at all. In fact, I don't think it's always true. I think you can construct examples where it breaks. Okay, so this actually ties into, if I can find it, this thing here. So we got a graph here and a graph here. You can see the two different graphs. They share a subgraph which is just these two vertices.
00:12:30.024 - 00:12:37.112, Speaker A: But what I've took is a two flattenable graph and glued it together with a two flattenable graph. And I've got something that's not too flattenable.
00:12:37.308 - 00:12:39.124, Speaker C: Right? Yeah. Okay.
00:12:43.104 - 00:12:51.604, Speaker D: Wait. Why isn't that example. Sean, why isn't that example a? Wasn't that g prime for.
00:12:54.464 - 00:13:04.994, Speaker A: Because the two graphs, g one and g two, one of them is k four, which is not too flattenable. So it does tie into this result, basically.
00:13:05.144 - 00:13:05.478, Speaker D: Right.
00:13:05.526 - 00:13:10.474, Speaker A: The result says they're. Yeah, yeah. Actually, maybe I should be a bit more specific.
00:13:11.294 - 00:13:21.034, Speaker D: Yeah, well, okay, so, yeah, this, maybe the proof uses g deflattenable and.
00:13:22.014 - 00:13:22.598, Speaker A: Yeah.
00:13:22.686 - 00:13:24.846, Speaker D: Like one and three being equivalent.
00:13:24.990 - 00:13:36.794, Speaker A: I think I should remove two. So if we cross out two. I think you're right. I think this is not correct.
00:13:36.874 - 00:13:38.018, Speaker C: Is this actually.
00:13:38.066 - 00:13:38.266, Speaker A: Yeah.
00:13:38.290 - 00:13:43.514, Speaker C: For the same example. Right. Because if you add the edge, you've got g. If you subtract, you got g. Yeah.
00:13:43.554 - 00:14:07.110, Speaker A: So I think remove two. Yeah, because I don't think two's even. Yeah. So where does it go wrong? No, no, no, it's. No, it's still fine. It's still fine because G is still not too. So g is still not too flattenable.
00:14:07.110 - 00:14:34.474, Speaker A: In that case. Yeah. So, no, no, it's still fine. One, two and three are still equivalent. There's no issue with that because the graph that we've got is the k four nudge with. It's basically, you've took k four and you've done, you've divided up the edge, you've subdivided the edge that's still going to be not too flattenable. So it doesn't contradict this at all.
00:14:34.474 - 00:14:37.934, Speaker A: The statement is still fine. Yeah, sorry, I got confused then.
00:14:38.094 - 00:14:59.664, Speaker D: So, okay, so I understand from the proof why one implies two and why one implies three. And I understand from the proof why three implies one. Okay, but why does two imply one?
00:15:00.644 - 00:15:13.824, Speaker A: So the Alex has put the proof did one implies three? It did not. It did. Two implies three here. So this sentence here, g prime contains.
00:15:16.984 - 00:15:17.856, Speaker D: Minors.
00:15:18.000 - 00:15:45.612, Speaker A: So I think this is the part that doesn't extend to higher cliques. What I'm saying is if you take one of the gis and you contract it, you can contract that to an edge so that fills in the edge. So you take g one and you take g two and you contract g two because they're joined at a single thing and there's no edge here you can contract that to a single edge and then you've got g one in the graph. Right? Right.
00:15:45.668 - 00:15:49.596, Speaker D: So two implies three. Yes, that's true.
00:15:49.740 - 00:15:50.852, Speaker A: And then that's fine.
00:15:50.988 - 00:15:56.724, Speaker D: And then three implies one is the argument that you're making. So everything loops around. Okay.
00:15:56.884 - 00:16:31.652, Speaker A: Yeah. So this argument, the, so this argument will, for higher cliques, will fail if you include two, I guess because my argument was that if you have a missing edge, you can always contract the rest of the graph to a missing edge. But if you have a clique with no edges, you could contract the graph and only get one edge or something like this. So that part will fail. But yeah, you can still do this for higher cliques and say one is equivalent to two. That's fine. So the bit that's a bit different is the g.
00:16:31.652 - 00:16:33.744, Speaker A: And there's something in the chat as well.
00:16:36.624 - 00:16:43.404, Speaker D: I think was just explaining the applications. That's right.
00:16:49.624 - 00:17:40.164, Speaker A: Okay. Okay. So from this, we basically said that the one connected case and the two connected case we can ignore, because if we have a two cut, if we have a one cut, then it's fairly easy to see that we can just separate this out into two graphs and just deal with the flatten ability in either of the graphs. And what this result here says is that if we have a graph that's two connected but not three connected, we can go to the two cut and either it's going to have an edge, in which case we've got g, or it's not going to have an edge and we have g. But in either case, this is equivalent to just the components when we separate them out, adding the edges as we need to, it's equivalent to them being deflattable. So basically this says we can always just reduce to the three connected case. This is the only one we care about.
00:17:40.164 - 00:18:43.094, Speaker A: Okay, I think I do this as a bit of a black box. Just double check. Yeah, so we have a lemma here and it says, basically if we, my graph is either v eight or c five cross c two, and I pick any two vertices that are non adjacent in the graph. If I add the edge, then, oh, contains, it should say contain as a minor. So if I add an extra edge in, I will always contain k five or k 222. So to give a quick look on this, if I take this graph and I add an edge here, basically I can contract the rest of these edges into one single vertex and then I'll have k five. So I'll show that with a pen.
00:18:43.094 - 00:19:33.148, Speaker A: So if I draw a line, I don't know why that's that color. If I draw an edge in between here, then I've got a k four. So I've just added some edge and then I can contract, if I contract this edge, this edge, this edge, this edge and this edge, or all of these edges. So if I contract all of them to be one vertex, what I now notice is that this edge, this vertex is connected to here, this vertex is connected to here, and this vertex is connected to here. So when I contract it, I've got a k five. And basically this lemma is why I didn't go into it. It's just you're checking all possible cases because of the transitivity of the graphs.
00:19:33.148 - 00:20:00.454, Speaker A: It makes things a hell of a lot easier to just do. But in the paper they just check all the cases. There's not many to check and they just check them. So I didn't want to go into too much detail on this. Yeah. So the lemma says if I have a v eight or a c five cross c two, and I add an edge, then it's going to contain either k five or k 222 as a minor. So this should set as a minor.
00:20:00.454 - 00:20:42.308, Speaker A: Okay. Right, we're going to make an extra definition here. You might have seen this in terms of rigidity, and this is kind of close in some ways. So what this is saying is we're looking at a special type of edge contraction. So if you have a graph g and you have a graph h that's obtained from g by contracting an edge where both vertices have degree, at least three. So I'll draw that out. So we have one vertex here, one vertex here, we know they both have degree, at least three.
00:20:42.308 - 00:21:31.764, Speaker A: So there has to be two extra edges here and two extra edges here. When we contract it, we're going to get something like this. Okay, maybe we have some extra edges over here, some extra edges over here. Okay, the operation that goes back. So it takes us from h to g, we call a vertex split, because we took a vertex and we split it. Now, if they don't both have degree three. So say we have something like this, and then that's doing something over here.
00:21:31.764 - 00:22:26.960, Speaker A: The operation we get when we contract this edge is going to be like this, and then we're going to get this other vertex over here with the three edges sticking out. So we've gone from here to here. Now, this is not called a vertex split, basically, and the reason is, if you look at it going from here to here, all you have to do is subdivide an edge well from here to here. You can't. That's not how you got them. That's not how you went from h to g. Does that make sense? So, in the rigidity literature, they have special types of vertex splits where I would split the vertex, but I would have maybe some edges go across and stuff like this.
00:22:26.960 - 00:22:46.254, Speaker A: And there's certain rules on it. But here we're just doing a very basic thing. If I can go from here to here, like I said, contracting an edge where the endpoints both have degree, at least three. Going back again, we call that the vertex split. And this is. We call this a subdivision of an edge. But we won't.
00:22:46.254 - 00:23:26.894, Speaker A: We won't require it. Okay. Why have we done it this way? Well, this is really nice theorem from Seymour in the eighties. So it basically says if we have a graph that's three connected and it contains a three connected minor, that is not the wheel graph. So that's our assumption. So h is three connected, but it is not the wheel graph. Then we can always obtain g from h by a series of either just adding edges or these vertex splits.
00:23:26.894 - 00:24:07.044, Speaker A: Okay, it's a bit of a strange theorem, but it's going to be very useful for us. What to consider about this is basically that the graphs we're dealing with k five, k two two, v eight, and c five cross c two. All of them are three connected. None of them have any two separating sets. So they're all three connected. So we can always do these sort of edge additions and vertex splits to get from the miner to something else. This is what we're doing here.
00:24:07.044 - 00:25:06.854, Speaker A: Okay? Right, so now we've got this lemma, which is what we're going to be using. So G is going to be a three connected graph, and we're going to say that it doesn't contain k five or k 22 as a minor. If it does have a minor that's v eight or c five cross c two, then the graph is c five or v eight or c five cross c two. Okay? And you can kind of see why we're going to need this, because what we're going to say is we're going to prove later, is that these two graphs are not three flattenable. So, and we know that if we have something that's a partial three tree. So if we have a graph that doesn't contain this, this, this, or this, then we know for a fact that is three flattenable. So the only case we have left to check is if we have a graph that doesn't contain this or this, but it does contain one of these two.
00:25:06.854 - 00:25:44.914, Speaker A: And what we're going to say is that, okay, if we have this, then the graph is v eight or c five cross c two. And then by proving that those two graphs are three flattenable, we finish the proof. And that will, that will finish the proof. Okay? So by Seymour's theorem, g can be formed from h by a sequence, like so. So we start at g naught. We go to g one, g two, so on and so forth all the way up to g. And the way we do it is every time we're just throwing in an edge or applying a vertex split.
00:25:44.914 - 00:26:33.032, Speaker A: That's all we're doing every time. Uh, obviously, if naught is n is equal to naught, then g is just equal to h, and we're done. That's what we have over here. If n is greater than equal to one, then I claim, and I'm using it as a bit of a black box, then g, one will contain h plus e for some edge not equal to e as a minor. So obviously, if g, one is obtained from g naught by adding an edge, this is clearly true. But I'm also saying that if g naught, if g, one is attained from g naught by a vertex split, then it's still true. Basically the way to check that.
00:26:33.032 - 00:26:33.776, Speaker A: Oh, sorry. Yeah.
00:26:33.800 - 00:26:39.764, Speaker D: Will, don't you just contract the vertex split edge?
00:26:40.344 - 00:26:45.546, Speaker A: No, because if we contract it, we will just get h. We won't get h plus e, so we got some extra.
00:26:45.650 - 00:26:46.074, Speaker C: I see.
00:26:46.114 - 00:26:46.674, Speaker D: Okay.
00:26:46.794 - 00:27:17.596, Speaker A: That's the important thing, basically, to prove this, all you do is you check cases, because the graphs of v eight and c five cross c two are vertex transitive. There's literally a very small, finite number of cases you need to check. I didn't want to go into it because it's a bit tedious, but all you do is you check. What happens whenever you do a vertex split, because these are very. If we do an edge subdivision, it's not true. But if it's always a vertex split, we can show it's actually always true. And it is just.
00:27:17.596 - 00:27:53.924, Speaker A: Yeah, you draw out the graphs, you look at them. It's always true. By our previous lemma, it follows that G contains c five or c 222 as a minor, which is a contradiction. So that means that the only case that can work is n is equal to zero, and the proof is done. Okay, so we've only got one. Well, we've only got four things left to, or three things left to do. We have to show that the, we have to determine which of the four minors forbidden minors are actually forbidden minors, I guess the four possible candidates.
00:27:53.924 - 00:28:33.454, Speaker A: So the first one is this one. C 22 is not three flattable. That's the first thing we prove. Okay. I'm not going to give too many in depth proofs on this sort of thing, so it's just going to be kind of sketches of what's going on. Okay, so to prove this, we're going to pick an edge of our octahedron graph, and then the remaining four vertices can be basically grouped, as I said. So we've got, we picked any edge then the last three vertices, z one, z two, z three, z four.
00:28:33.454 - 00:29:14.554, Speaker A: We're going to have that z one, z two and z three are a clique, so they form a triangle. Z one is only adjacent to x and z two is only adjacent to y, and then z three and four are adjacent to both. You can just check this on the graph. This is always true because of vertex transitivity. Yeah. If you can show it for one graph, then it's always true. Okay, what you can now do is you can actually form a realization of k 22 where z one, z two and z three are collinear but distinct.
00:29:14.554 - 00:30:26.974, Speaker A: Px and Py are the same point and the set px z two, z three and z four are in general position. Okay, this is kind of a bit of a thing, so show you kind of in picture form. So we've got z one, z two, z 3123 a collinear. We're going to have a point up here which is going to be x and y. Okay. And we're going to have another point here, I guess, in a different plane for z four, basically. So you can picture these lot being in some plane and x and y being in the third dimension.
00:30:26.974 - 00:31:01.100, Speaker A: Okay. What we're going to have is basically that there's going to be a finite many or a finite amount of. So this thing has to lie in three dimensions, like I said, just from how I've done it, because three of a collinear, we have another one that defines a plane. And then the fourth one, the fourth and the fifth. The x and y are the same thing. So this thing has to be three dimensional. What we notice is that there are only finitely many realizations of this in three dimensions.
00:31:01.100 - 00:31:47.034, Speaker A: Modular isometries are equivalent to this minus an edge pull. And the reason is basically the edges that we have remaining kind of go like this. So the edges that we have to fill in like. So px is joined to z one, z three and z four. And so this is just a zero extension to add the x, a three dimensional zero extension. And the y is the same, but we join it instead of to one, to two. So what we've took is something like this, this kind of weird.
00:31:47.034 - 00:32:07.854, Speaker A: It's not even a triangle. What we've taken is three collinear points that are all connected. So this is rigid. And added an extra vertex connected to the endpoint. So this is still rigid. And then by applying the zero extension, we've got something that's still rigid. And then applying the same with y, another extension, we've got something that's still rigid.
00:32:07.854 - 00:32:24.450, Speaker A: So in 3D, we don't even need the last edge. And the last edge will be between x and y, but we don't actually require it. So we form something that's rigid, not infinitesimally rigid, it's just rigid in 3D. Yeah. Will, do you have a question?
00:32:24.562 - 00:32:33.824, Speaker D: Yeah, sorry. I don't understand why a z four is connected to z one and z three, z four.
00:32:35.044 - 00:32:49.140, Speaker A: It just has to be just in the how the graph looks. Basically, I probably spelled out quite quickly, but, yeah, if you look at the octahedron graph, this has to happen. Yeah, I've skimmed this.
00:32:49.292 - 00:32:52.224, Speaker D: Okay. Okay. Yes. I'm okay with that.
00:32:53.664 - 00:33:36.704, Speaker A: Okay. So because this is rigid, we know that there's only going to be finitely many realizations in three dimensions are equivalent to it. Okay, now we can, we can. Now we have to go into four dimensions. And this is why I wanted to give a sketch of the proof and not really go into it too much, but basically what we're going to notice is that the vertices z one, z three and z four, they act as a hinge in 4D for our vertex x, because in one dimension one point makes a hinge. In two dimensions, two points make a hinge. In three dimensions three points make a hinge.
00:33:36.704 - 00:34:33.832, Speaker A: Okay, so what we now do is we take our vertex, it's connected to these three of the vertices, and we rotate it in four dimensions. So we're rotating px out. Okay, now I said that the distances in 3D, there's only, because there's only finite many, many realizations in three, d of k two, twenty two, x yp, there's only finitely many distances that we can possibly have between px and py in three dimensions. But in four dimensions, because we have a continuous flex, we have an infinite amount. So obviously only finitely many of them can be realized. Most of them can't be realized. So our last step to create our unflattenable framework is we take our vertex x and we rotate it in the fourth dimension to some point which cannot be flattened.
00:34:33.832 - 00:35:06.846, Speaker A: And then we add the bar between x and y, and then this framework in 4D cannot be flattened at all, which is quite a nice, it's quite a nice way of doing it. Any questions on that? It's a bit strange, it's hard to think in 4D. So this is some of the problems. No. Okay, I will now move on then. So I have a question. Oh yeah, yeah.
00:35:06.846 - 00:35:09.174, Speaker A: So the graph you're true is rigid.
00:35:09.214 - 00:35:11.142, Speaker B: But not even a similar rigid.
00:35:11.198 - 00:35:14.994, Speaker A: Right. It's not infinitely rigid, no.
00:35:16.334 - 00:35:17.634, Speaker B: Why is that?
00:35:18.774 - 00:35:49.462, Speaker A: Because you can just use the combinatorics. So k 222 is minimally, infinitesimally rigid. So if you remove an edge, any placement has to be infinitesimally flexible. And that's it. Basically, if you're infinitesimally, yeah. If a graph is infinitesimally flexible at a generic point, then all of it, every single placement, is infinitesimally flexible. So that's right.
00:35:49.462 - 00:36:22.370, Speaker A: Okay. Okay, I see, thank you. Right, so next is to prove v eight is flattenable. Now I'm not going to prove this because the proof is quite complicated. I'm just going to sketch out why it works, because the idea is more interesting than the actual technicalities. So what we're going to do is we're going to take any framework v eight p. So we took v eight and it's in some dimension, we choose two vertices, x and y.
00:36:22.370 - 00:37:04.714, Speaker A: And what we're saying is they're at least three away from each other in the outer ring. So what this means is we took maybe this vertex and one, two, three, this vertex. So this will be x and this will be y. Okay, we take them so they're three away. Why now claim is that by moving x and y away from each other until they can no longer be any further apart, we can find an equivalent framework, v eight q. So all we've done is we've took our framework in however many dimensions. And I claim that we can always just stretch it out until those two are as far apart as possible.
00:37:04.714 - 00:37:27.734, Speaker A: It's effectively what we've done. So if it's not flexible, then we. It's not a problem. If it is flexible, we, then we just stretch it out as much as possible. Okay, so Connolly, when he does this, he used, Connelly and Belk used the idea of there's a strut. You put some strut in between them and you've just extended the strut as much as possible. So they're as far apart as they can possibly get.
00:37:27.734 - 00:38:04.854, Speaker A: Okay, since the distance between these two is maximal, then there's a result that Connelly has that proves that there is a non equilibrium stress. Basically, the idea is kind of, you've forced yourself into a bit of a weird position where the. Because it's maximal, they can only, you know, they can only go in. They can only get closer together. In a way, it's basically the idea. I don't want to go into it too much, but yes, it's vaguely the idea. This paper is just belk.
00:38:04.854 - 00:38:22.054, Speaker A: Ah, yeah, will is correct. Yeah, sorry. This is just belk, by the way. Sorry. It's not Connelly and Belk, it's belk. Okay, so they get this stress, um, off this thing. What's the point of the stress? Well, the stress can then be used to kind of gain insight into the geometry of the framework.
00:38:22.054 - 00:39:03.652, Speaker A: So, for instance, if you have a stress between, uh, if you have a stress on a triangle and nowhere else, then you know that that means. So if the stress is non zero on the triangle and everywhere else is zero, you know, the triangle is degenerate, you know, it's flattened out in a line. And this is basically the idea of what they do. They say, okay, well, we have this stress. This tells us all the information we can get, and it boils down to a few cases. So what we then do is we check all the cases and in every single case, the framework can be flattened. Now, if g, if v eight, q can be flattened, then it means that the original framework that was equivalent.
00:39:03.652 - 00:39:24.812, Speaker A: V eight p. That can also be flattened into three d. And that's the idea. So it's a bit of an. It's quite a nice way of dealing with it. We can also do a similar argument for c five cross c two. So there's a similar method of, you put a.
00:39:24.812 - 00:40:00.764, Speaker A: Basically, you put a struct between two of them, you extend it out, you look at the stress you got, and then you boil it down into individual cases. But I'm not going to go into this because this roughly takes about 15 pages of working to prove. There is a lot of cases to check. This is kind of, to me, indicates why talking about four flatten ability is very difficult. Because even talking about three flatten ability is very, very difficult. And it also kind of indicates why we want these minor free properties. Because determining whether a graph is three flattenable without them is very difficult.
00:40:00.764 - 00:40:43.400, Speaker A: Okay. With all this, you combine all this together and we're going to be able to show the theorem. So a graph is going to be three flattenable if and only if it doesn't contain k five or k 22 as minus. So as k five and k 222 are not three flattenable, the only direction we need to do is the other direction. Okay? So we only need to show that if a graph does not contain them, then it is three flattenable. Okay? So take g to be a graph that doesn't contain them. By our previous results, we may as well assume that g is three connected.
00:40:43.400 - 00:41:02.000, Speaker A: If it isn't three connected, we can always separate it out into subgraphs. And then we just check the flexibility. Sorry, the flatten ability of the individual subgraphs, maybe subgraphs plus an edge or something. We can just check the flattenability of them. And if they're all flattenable, then the original graph was flattenable. So that's all we need to do. This is why we have this.
00:41:02.000 - 00:41:36.464, Speaker A: So we can just assume that g is three connected from the off. Well, if g is three connected, we. And. Sorry, if g is free connected, and it doesn't contain v eight or c five cross c two, it's a partial three tree. But if it does contain v eight or c five two, c five cross c two, then it is equal to v eight or c five cross c two. So if it doesn't, we know it's a partial three tree, then it's three flattenable. If it does, is equal to v eight or equal to c five cross c two.
00:41:36.464 - 00:42:12.744, Speaker A: And we've just shown that those two are three flattenable, and therefore we're done. And that's the proof. Any questions on that? Okay. Right. I've got now some stuff on single interval frameworks, but I've only got 15 minutes left, so there might not be much point going into it. Too much. So yeah, in fact, I'll call it an end here.
00:42:12.744 - 00:42:33.754, Speaker A: Call this the lecture if you're interested. I've got some other stuff on sip stuff, but otherwise, here is the references for everything I've covered, including some stuff I didn't. Yeah, and does anyone have any questions about any of that? And previous lectures as well included?
00:42:42.834 - 00:43:12.364, Speaker C: So if nobody else has a question, I just wanted to quickly go back to the g sub I's gluing them together idea. So I think I phrased what I was trying to say badly, but I think if you have, say just g one and g two, and their intersection is a connected graph, then I think the argument still works.
00:43:12.864 - 00:43:13.960, Speaker A: It does not.
00:43:14.112 - 00:43:14.920, Speaker C: It doesn't.
00:43:15.032 - 00:43:16.964, Speaker A: It does not. There are examples.
00:43:17.624 - 00:43:19.124, Speaker C: Huh? Okay.
00:43:19.584 - 00:43:50.664, Speaker A: Yeah, it's unfortunately incorrect. So I mean, you could take a graph where. Try to think. So we could do a graph where adding an extra edge causes a triangle, which then causes the graph to not be flattenable. Okay. We got like two edges like this. And then we could glue a framework at those three.
00:43:50.664 - 00:44:04.392, Speaker A: And basically then there'd be a way contracting it so we get a triangle and then this will be not three, uh, three flattenable maybe, or something. There is other ways of doing it. I could probably cook up an example at some point, but.
00:44:04.528 - 00:44:09.004, Speaker C: So does Gi contain the intersection in these?
00:44:11.424 - 00:44:14.712, Speaker A: Yeah, it's still a problem is the thing. It's still an issue.
00:44:14.848 - 00:44:15.604, Speaker C: Okay.
00:44:16.984 - 00:44:26.020, Speaker A: It's not just connectivity, it needs to be a clique. That's what's required. Basically you can kind of get away with it in 2d. Basically.
00:44:26.212 - 00:44:27.264, Speaker C: Oh, I see.
00:44:27.844 - 00:44:31.984, Speaker A: Because. But in anything bigger, it starts falling to pieces.
00:44:32.764 - 00:44:33.664, Speaker C: Okay.
00:44:46.244 - 00:45:12.344, Speaker A: Does anyone else have any questions? Nope. Okay, well, we've got an extra ten minutes. I guess. If anyone has any questions about single onto frameworks, then I'm happy to answer some of them. But we didn't really cover the topic.
00:45:12.384 - 00:45:13.884, Speaker E: Just define what one is.
00:45:14.704 - 00:46:08.286, Speaker A: Okay, I'll do the definition, but I won't go through the proofs. Okay, so what's a better way of describing it than all this? Okay, so we take a graph and we take an edge that's not in the graph, that gives us a pair g and f and a single. We say that it has the single, the d dimensional single interval property is if that no matter what framework you give me for g, if I look at the configurations, if I look at the distance between the endpoints of f, that will always. The distances between them will always make a interval, basically. So maybe it's how it flexes. It flexes and it makes an interval, but maybe you could reflect it and put the point over somewhere else. It will still just make an interval.
00:46:08.286 - 00:46:30.658, Speaker A: In a way. Does that make sense? In a way, it's kind of like any equivalent. If you look at all the equivalent frameworks to your framework, then the. And you take all the distances that f, all the possible lengths of f, and you put that together as a set, that set will be an interval. And this is the single interval property.
00:46:30.826 - 00:46:39.290, Speaker D: So in contrast to having like a, some kind of loop or some kind of tree, what would the contrasting thing be?
00:46:39.362 - 00:47:08.616, Speaker A: So contrasting thing will be, you have something where. Ah, okay. Actually I can give an example. So this would be something that doesn't have the two dimensional sip. So all I've took is k four. I've removed an edge. So the graph that I'm doing the single interval property with is the one that's in bold, and the one, the line that I'm applying it to is the dashed line here.
00:47:08.616 - 00:47:26.368, Speaker A: Now, this doesn't have a single interval property, because I can find a framework where I draw it literally like this, and the possible distances between this vertex and this vertex is either zero or root two, right? Because I can have it like this, or I can fold it over. So this doesn't have the single interval property.
00:47:26.536 - 00:47:33.134, Speaker D: So here the configuration space is just two points, right?
00:47:33.294 - 00:47:34.034, Speaker A: Yes.
00:47:34.654 - 00:47:52.234, Speaker D: But what if the configurations, do you have an example where the configuration space is one point is, sorry, one dimensional, but it's not, that's not a single interval. Is it a loop then? Like, should I be thinking of it as a circle?
00:47:52.894 - 00:48:08.294, Speaker A: No, not necessarily. Because you can have stuff that's flexible with the single interval property, and you can have stuff that's flexible that doesn't. So, I mean, I could cheat and just put an edge here or something like this. This would still not have the single interval property, even though the configuration space will be a loop.
00:48:08.594 - 00:48:15.818, Speaker E: But now the configuration space would be. Would have two connected components. It would be a loop and then reflect over to another loop.
00:48:15.946 - 00:48:34.004, Speaker A: Yeah. So if the configuration space is just a single loop, then that framework will have the single interval property. But you've got to make sure that every framework has the single interval property. I guess that's kind of the idea. But yeah, having a single loop is fine. That's. Yeah.
00:48:35.344 - 00:48:44.032, Speaker E: If the particular pair of non adjacent vertices you care about are globally linked, does that count as having single interval property?
00:48:44.208 - 00:49:04.842, Speaker A: So this is a big question, because globally linked, a lot of it's to do with generic, and it gets a bit hazy. So I did look into generic single interval property at one point. The problem is basically nothing is really known about globally linked vertices. I think Tibor and Shinichi did some stuff, but they don't have any definite answers.
00:49:04.978 - 00:49:09.586, Speaker E: Tbor Bill and Zoltan Zabadka have a couple of papers on this, but there's.
00:49:09.610 - 00:49:21.906, Speaker A: No, there's no 100% guaranteed characterization. You have to use like sufficient conditions to say that it's true, as far as I can tell. Yeah.
00:49:21.930 - 00:49:24.758, Speaker E: Even in 2d it's not a. An easy thing.
00:49:24.886 - 00:49:52.564, Speaker A: Exactly. Yeah. So this is kind of where the problem comes up, the single intent property, because you can say that you're looking at every possible framework, it makes things a bit more tractable in some ways. But yeah, it's a difficult question. The characterization for. I need to get rid of this line, I think, drawings. The characterization for the 2d version is this.
00:49:52.564 - 00:50:54.282, Speaker A: So it basically says that a graph, a pair, has a single info property in 2d. If and only if, every maximum clique sum to some component of g plus f that contains f is too flattable. So a clique to some component is basically, you look for a two cut, which is a clique, and you separate the graph out and do that. And a maximal one is just as big as it possibly can be. And what we say is, yeah, we say this result here, now this is going to have the single interval property, this pair. So the graph is all the lines that aren't dashed and the dashed edge is f. And what we notice here is that if you look at the maximal clique two some components, they're either going to be the triangles, because we're looking at all the ones in g f.
00:50:54.282 - 00:51:24.984, Speaker A: And we've also got this k four, but this k four doesn't contain f, so it doesn't matter. And it kind of makes sense because this k four is just kind of hanging on an edge. That's not really, it doesn't really matter what the k four does. So the only things that really actually are important, we can basically delete this triangle, delete this triangle, delete this k four, and then all we're looking at is this framework here. And this framework here just has this motion. So it has the single intel property, basically. That makes sense.
00:51:24.984 - 00:51:33.556, Speaker A: Yeah. I was hoping I'd have a bit longer at the end to discuss this, but I'm kind of running short on time.
00:51:33.740 - 00:51:48.654, Speaker C: Actually. The forbidden minor characterization works in 2d. We know which. Anyways, the, that non edge you've drawn can't be retained in a k four since it has the sip.
00:51:51.234 - 00:51:57.374, Speaker A: Yeah, yeah. This is the ways of characterizing it as well. That's true. Yeah. Yeah.
00:51:58.114 - 00:52:01.374, Speaker E: Why does somebody care about Sip?
00:52:02.234 - 00:52:06.992, Speaker A: I have no idea, but I can give. Will might be able to answer some.
00:52:07.048 - 00:53:00.992, Speaker C: Answers, so you can. There's two papers that I'll be giving a lecture on in like two weeks that basically talk about the single interval property of tree decomposable linkages. And there's, doctor Sithrom has papers called like how the beast really moves and everything. And it uses kind of all this theory to just give you, if you give two realizations of such a linkage, a tree decomposable linkage, you can find a continuous motion between the two linkages. Assuming it's flexible, one do have flexible. And so finding a continuous path like that is generally very hard to do. And I think current methods still, you have to give a lot of parameters and intervals of where you think the path or what properties you think the path has.
00:53:00.992 - 00:53:05.084, Speaker C: So this gives you kind of a really fast and easy way to find a continuous motion.
00:53:07.324 - 00:53:27.972, Speaker F: Also, there is a slight generalization where instead of just getting the configuration space on one edge, if you wanted to do it on multiple, like if this thing had multiple degrees of freedom and you wanted to get the configuration space on multiple non edges, that's convex, that.
00:53:27.988 - 00:53:30.224, Speaker A: Would be making more edges dashed, I guess.
00:53:30.804 - 00:53:47.624, Speaker F: And that that configuration space is convex. So if you want to lay out the configuration space, it becomes very easy. And we've applied this to modeling molecular assembly, where it's super useful.
00:53:50.404 - 00:53:52.584, Speaker A: So does that answer your question, Tony?
00:53:53.844 - 00:53:54.944, Speaker B: Yeah, I guess.
00:53:56.744 - 00:53:59.084, Speaker E: I have to digest this property, I think.
00:54:00.224 - 00:54:20.444, Speaker A: Yes. Unfortunately I couldn't have a bit more time. But yeah, it has a lot of uses. It's tied to flattenability, as you can see. But it's not the same thing as flat ability because I've got a k four here and it doesn't matter. Basically, stuff like this. Yeah, what else to say? So I had a lot of proofs on this.
00:54:20.444 - 00:54:54.814, Speaker A: The characterization I gave doesn't work in 3d, even if you extend it, basically. So something like this is three dimensional sip. But if we were using the extension, the natural extension, I won't go into it too much, but if we do the natural extension, of the previous thing I said, this would say that it's not sip, but it is. So, yeah, it's more complicated when you get to stuff. That's something that me, Rahul, will and lefty are working on at the moment. That's something we're not looking into.
00:54:54.974 - 00:55:10.234, Speaker C: We had hopes for higher dimensions, but it seems extremely difficult unless, you know, the forbidden miners. So we're kind of lost there on four dimensions or higher, but three dimensions, you know, since we know the forbidden miners, then might be more manageable.
00:55:10.694 - 00:55:45.612, Speaker A: So, yeah, to say a word on that, you kind of. You want to be able to say that you want to look at basically a lot of the things boil down to special cases, and the only way to deal with the special cases is by having some idea of what they look like. So having. Knowing what the forbidden minors are, tell you what the special cases are, and then you know what you're dealing with. So if you don't know the forbidden miners, then things become very difficult and it's very hard to say for definite what's going on in some ways. You can give some nice basic examples. Yeah.
00:55:45.788 - 00:55:59.854, Speaker E: So the partial free trees were known before Belkin Connolly's paper. So I'm guessing that's 15 years ago or so. So is it not possible that since then someone solved the partial fortress? Have you really searched?
00:56:00.394 - 00:56:16.626, Speaker A: I've looked. I couldn't find anything immediately, so I looked before me. You and Jim had a quick talk weeks ago about stuff and I couldn't see anything then. That doesn't mean. Maybe I just didn't look very hard, but, yeah, I couldn't see how the.
00:56:16.650 - 00:56:21.302, Speaker E: Partial free trees proof went. Maybe we can do it ourselves and do partial four trees.
00:56:21.418 - 00:57:00.564, Speaker A: Oh, it was quite a long paper, if I remember correctly. I would have to look into it, but it seems a lot of like you're saying that there is an issue to stop you being a partial forgery. So you check the possible cases of what can go wrong and you boil it down to so many cases they end up with, like, a massive class of graphs. And then they said, oh, actually, a lot of these graphs can be reduced to smaller ones and stuff like this. So they ended with a big class of forbidden miners, but they weren't minimal forbidden miners. You could get something that's smaller and then they got the smallest possible, which is those four. That was the rough idea.
00:57:00.564 - 00:57:00.804, Speaker A: Yeah.
