00:00:00.200 - 00:01:08.774, Speaker A: Today I'll talk about flex paths and distance interval frameworks. And this is going to be, I mean, this sort of project is joint work with Amira Sitaram and William Sims. Okay, so I'll start by defining a distance interval framework. So a distance interval framework is a tuple, g, p, and delta, where g is the g is a graph of distance constraints, p is its euclidean point set, it's an embedding and delta maps the vertices I comma j in v. That is a vertex set to a euclidean distance interval delta ij. And the actual length of an edge in g should be from this delta ij interval. So as you can see, a bar joint framework is a special case of a distance interval framework where delta ij is just one single value instead of being an interval.
00:01:08.774 - 00:01:51.314, Speaker A: So, you know, when we say bar joint frameworks, we just ignore delta. A lot of the results I'll talk about will be about bar joint frameworks. And I'll, you know, say when we actually use distance and twelve frameworks. Okay, so we are interested in what are called flex paths. And to describe what flex paths are, I'll start by describing what we call an edge move. So we start with a minimally rigid framework. This is again a bar joint framework.
00:01:51.314 - 00:02:49.134, Speaker A: And an edge move consists of the following three operations performed in order. We start with a minimally rigid framework. We remove an edge, and once we remove an edge, the system has a flex now and generically it has a flex, and we use that flex to reposition the framework in a different way and we put the edge back. In the last operation, when we put the edge back, we have three different options. The first option is you put the same edge back at the same length, but you're in a different configuration now. So what I'm showing on the right here is the first case. So I started in that configuration, I removed that edge, then I flexed the framework and brought this edge around here and I connected it another way.
00:02:49.134 - 00:04:17.796, Speaker A: This we call a flex linkage path. Then the second type is when you, after you flex the framework, when you, when you're adding the edge back, you add a different edge instead of the original edge. And that we call a flex contact path. But, you know, when you add a different edge back, you still want to make sure that the added edge still gives you a minimally rigid framework because we want to do this operation over and over again to sort of give a path. And third, and the most general case is when you can add any edge back at any length. So each type of edge move is an equivalence relation on a different set of frameworks. Okay, so flex path, like I said, between two isostatic frameworks, f one and fn, is a sequence of isostatic frameworks, f one, f two, and so on, where each fi in this sequence is obtained by performing an edge move on the previous framework in the sequence.
00:04:17.796 - 00:05:07.424, Speaker A: So I take f one, I do the edge move that I described earlier, and I get f two, and I keep doing this till I reach fn. So that, that is a flex path. A flex path is called a flex linkage path if all the fis in this sequence are equivalent, as in the underlying linkage is the same. So this corresponds to in the previous slide adding the same edge back at the same length when in the third step. So that's, that's a flex linkage path. And similarly a flex contact path is. So here we make use of a distance interval framework.
00:05:07.424 - 00:06:18.990, Speaker A: So we started the distance in minimally rigid distance interval framework. But when we add the edge back in the third step, we add it at a pre specified length given by our delta here. So we use distance interval framework here because, you know, the delta we use for distance interval framework gives you lens for all pairs of vertices. So when you're adding, so previously, what was a non edge when you're converting it to, into an edge now, now it has, you know, you have a pre specified length where you want to put it. That's called a flex contact path. The third and most general case, we just call it a flex path. Okay, so what we want to do with this operation is start with a minimally rigid framework and start with two given minimally rigid frameworks and see if there's a path or not.
00:06:18.990 - 00:07:47.368, Speaker A: So this table kind of gives result, I mean, some of the results we have found so far. So when I, the type of framework is the class of graphs for which we are asking the question. So if I give you two general Laman graphs, does there always exist a flex linkage path? Does there always exist a flex contact path? And so on. And similarly, you know, tutori or a subclass and so on. So what I'll do for the rest of this lecture is go through each of these little boxes, not, not probably all of them, but several of them, and talk about some of the results we have found. Are there any questions? Okay, so first thing we looked at was general Laman graphs. And we found that, you know, if I give you two general Laman graphs that have the same and two general laman frameworks that have the same underlying linkage, you could not always go from one to the other.
00:07:47.368 - 00:08:37.314, Speaker A: And we have simple counter examples that exhibit this. So this is Hanneberg one framework. And these are all, I mean these are all different realizations of the same framework. So they have, they all have the same underlying linkage. Now if I want to go from this framework here to this framework here, all I would have to do is remove ce and bring e over here and then add ce back. So I can go from here to here. But I cannot go from this realization of this linkage to this realization.
00:08:37.314 - 00:09:32.754, Speaker A: This figure is slightly off because so what I've done here is basically reflected this triangle over here and this triangle over here, and then sort of reoriented it. So this should actually kind of look, you know, like, like that. So b should be here and a should be there. But you can prove that no matter which edge you remove and try and flex it, you can never reach from this framework here to this framework here. And what prevents that is. So let's try a few edges. So let's say that I remove the framework, absorb the edge ab and try and squeeze these two together.
00:09:32.754 - 00:10:51.364, Speaker A: So the flex is trying to push a inward and be also inward in the hope that they kind of cross over and you get the framework, you get this realization. Now what prevents that is this, the length of EC plus ed is too small to allow you to stretch this out fully. So that a can pass over to the other side, we can cross over to this side. So if I'm given free choice of what kind of edge lengths I can choose for my frameworks, I can always design edge lengths so that, you know, these kinds of moves are not possible. So you can try this with remove, try this by removing any of the edges. But you cannot go from this framework here to this framework here. So the next result is the idea of flex contact path for general Amman graphs.
00:10:51.364 - 00:11:58.904, Speaker A: So in this previous result, when I removed an edge, I had to add the same edge back at the same length. But here I'm giving you a little more freedom. I'm saying that I'll give you a framework, I'll give you two frameworks, not necessarily of the same graph, but, but you have to get from one to the other by doing this edge move. So we found that even here you could not do this. Because I'm allowed to engineer the edge lens however I want it. I can force, you know, I can give you um, these distance intervals where um, you know, the only possible, the only possible, um, edges you can add back correspond to edges in the flex linkage. So for example, um, let's take this, um, same example as before.
00:11:58.904 - 00:13:11.172, Speaker A: Now, in a flex linkage, in a flex contact path, let's say I remove ce. If I remove ce, I can add any of the other non edges when, after I flex it. So I can either add eb or ea or I cannot add cd. So I can, in my distance interval framework, I can specify the delta so that whenever you remove ce, the possible edge lengths for eb and ac do not lie in our delta interval. So I can kind of force you to just use a flex linkage path. And we already have counterexamples for these. So the, so for, we found that, you know, it was not true for general laman graphs.
00:13:11.172 - 00:14:21.054, Speaker A: So we started looking at sub graphs to see if, you know, subclasses of laman to see if, you know, flex linkage or flex contact paths were possible between any of those. So we found that even for two trees, you know, this, this was not possible. So in all of our counterexamples, we, you know, kind of found that we were exactly, we were able to, you know, engineer these counter examples mainly because we were allowed to choose whatever edge lengths we want. So the next natural question was what would happen if we did not allow this? So we started looking at unit distance frameworks. So we started with unit distance, two trees. So just to recall two trees, a graph that's a subclass of Hanneberg one. So you start with a triangle and then successively paste triangles on an edge in the existing graph, and you get a two tree.
00:14:21.054 - 00:15:14.184, Speaker A: So a two tree framework is associated with a sine vector, which we call the flip. So this gives you all the, this gives you a way of characterizing all the realizations of a given two tree linkage. So the sign of a sign in the flip vector just says the, you know, which orientation a particular triangle is pasted in. So for example, let's say I have this triangle, this two tree here. I'll take a small simple one here. Hope you can see this. Let's call this ABCD and e.
00:15:14.184 - 00:16:03.336, Speaker A: So this two tree has eight different realizations corresponding to how we place each of the three triangles, a flip vector. So let's call this t one, this t two, and this t three. So t one, t two and t three. So if I say t one, t two, t three is plus plus plus, that is one orientation of the triangles. Let's say this is the plus plus plus orientation. If I say minus plus plus, then I would draw this slightly differently. So a, d, c, e.
00:16:03.336 - 00:17:24.284, Speaker A: Now b is kind of folded over and it kind of coincides on, on this. So I've basically taken this and flipped it over onto, I can't see the bottom part of your screen so I can't see. Okay, that's better. Okay, so basically I've taken b and flipped it over. So you can clearly see that, you know, there are two to the number of triangles or two to the n minus two, where n is the vertices number of orientations or the number of realizations. So we proved that if you're given a two tree, you can always go from, if you're given a unit distance two tree framework, you can always go from one realization of the underlying linkage to any other realization. And the first thing, the first result to sort of think about is that in a two tree, a unit distance to tree, if one of the realizations exists, then all the realizations exist.
00:17:24.284 - 00:18:40.994, Speaker A: So what we do, and the next result you have to kind of see is that I can always go from a realization of a two tree to another realization that differs in it, that differs from the first realization by one sign in the flip vector. So. And so what we do is we define, we define an operation that gives you, you know, given, given two different realizations of the same two tree that differ by one entry in the flip vector, I can go from one to the other, and this is how I do it. So for example, let's say I have this realization of a two tree. I want to go to the realization where this triangle AFB is flipped. So I want to get a over to the other side here. So what I do is I remove f b.
00:18:40.994 - 00:19:43.894, Speaker A: Once I remove fb, I kind of get a flex here. And so I push these, I mean, I flex a towards b and, you know, it coincides with d. Now I can keep flexing it, and now I can add fb back. So because you can go from one realization to another realization that differs by one flip. And since all the realizations exist, we can pretty much go from any realization to any other realization. So since unit distance two tree, we found that, you know, the flex linkage path always exists. The next question was, can we do it with, you know, a superset of this, which is unit distance? Hanneberg one graphs.
00:19:43.894 - 00:20:45.350, Speaker A: So here we have this example, which is a, which is a counter example. So in this framework, this is, most of this is a two tree, except this last step where I have, you know, added this vertex v ten, so that this kind of forms like a straight line as you can see this graph is not independent. So if I remove the vertex v eleven and v three, I don't get any flex at all. So it's not independent. So you can pretty much try removing any edge in this, in this graph, in this linkage. And you cannot get to any other realization of this, of this framework. Sorry, of this, of this linkage.
00:20:45.350 - 00:22:23.604, Speaker A: So this is sort of like a counterexample because you cannot go from any, you cannot go from this realization to any other realization of this linkage. But we are not really sure at this point if this is the only obstacle that we have this dependent edge that is causing this. We want to find either a counterexample that does not have this issue of dependency, or we want to prove that you can always go from one realization of a Hannibal unit distance, hannibal one linkage to another using an edge move, using flex contact, flex linkage path. Okay, so, so far we've talked about, you know, some results of flex linkage paths. Next we'll talk about some flex contact path results. So remember that flex in, flex contact paths, when you remove an edge and flex the framework, when you're adding it back, you can add it at, um, you know, you can add any other edge back. But in, in the flex contact path case, there is, I mean, you cannot add the, you know, the new edge at any length you want.
00:22:23.604 - 00:23:42.244, Speaker A: There is a pre specified length at which you're supposed to add it. So here we have this theorem which says that given two frameworks, f one and f two, whose underlying linkages are identical, unit distance two trees, it is always possible to find a flex contact path between them. So, to prove this, the proof idea is fairly straightforward. The first thing you need, the first thing we do is if you're given a unit distance two tree, we kind of straighten it out into like a chain of triangles. And once you have a chain of triangles, I mean, you straighten out both the source and the destination to two different chains of triangles. And then, you know, we prove that you can always go between different chains using edge moves. So how do we, how do we do this? So, to think about.
00:23:42.244 - 00:24:38.474, Speaker A: Yeah, yeah. So, before we go into the proof of this, it's useful to think about what we call a dual graph of a, of a two tree. So, so let's take a simple two, three. Let's name this a b. Oh, can you see this? Sorry. Let's take a simple two tree, name this abcdef.
00:24:40.774 - 00:24:44.314, Speaker B: I can't see the drawing.
00:24:44.974 - 00:24:46.234, Speaker A: Can you see it now?
00:24:48.994 - 00:24:50.394, Speaker B: Yeah, now I can see it? Yeah.
00:24:50.474 - 00:26:48.934, Speaker A: Okay, good. So the dual of this two tree, to get it, what we do is we first name these triangles, let's say t one, t two, t three and t four. And if in your dual graph you have two different types of vertices, one are the triangle vertices t one, t two. How do I show both of them anyway? Okay, and that's the first kind of vertices. The second kind of vertices are, I'll draw them in a different color, are the edge vertices. So if you look at the original graph here, there are several different, so let's call this ab, bd and ad. And there, there is an edge between vertices.
00:26:48.934 - 00:28:01.794, Speaker A: We can't see the bottom part. Okay. There is an edge between, um, the edge edge vertex and the triangle vertex, if the edge forms the, you know, boundaries of the triangle. So this ad, for example, and now ad is also. Yeah, ad is also connected to t two and you can keep going this way. So, yeah, so let's see, what else do we have? Cd ce, df and ef. And you have.
00:28:01.794 - 00:29:06.564, Speaker A: Yeah, so, and you build this dual graph this way. So once you have this, this dual graph, define what? A chain. So I said you can open this two tree up into a chain. So we say that a two tree is in a chain configuration when, if I take a path from t one all the way to t four through different edges. So I don't think there is an edge here. The edge goes through adjust. Yeah.
00:29:06.564 - 00:29:14.804, Speaker A: So when I take a path along this, it's a straight line path. So there, there are no branchings.
00:29:16.904 - 00:29:23.952, Speaker B: So can I ask question? Yeah, what one, there's no edge between like df and t four.
00:29:24.008 - 00:29:56.994, Speaker A: Oh yeah, there is. So df two. There's df two, d four, ef to t four. Then t three is shared with ed. There's one more, one more ed shared this way. Yeah, so I just didn't complete it.
00:29:57.514 - 00:29:59.294, Speaker B: I see, yeah, I see.
00:30:02.274 - 00:31:03.072, Speaker A: So if you start from, let's say t one and you keep following and, you know, you take the path all the way to t four and you've hit all the triangles on the way. That is, it's in a straight line sort of configuration. Then we say that, um, this is in a chain configuration. So if there are several different branches. So let me draw, okay, let me show when this is. So in this case. So I'm, I'm going to use sort of shortcut here.
00:31:03.072 - 00:32:10.468, Speaker A: I'm just going to place vertices this way. So if I start from one triangular facet and go all the way to some to the edge of a leaf. I haven't hit all the different triangles I want. So this is not enough. This is not in a chain configuration, whereas this earlier one was. Okay, so the first thing we have to show is that you can always, given a two tree, you can always straighten it out into a chain. So here's the proof idea.
00:32:10.468 - 00:32:41.194, Speaker A: So let x be a triangle node in the dual graph. So this is the dual graph. So this is what I mean, like a triangle node. And it doesn't have to be the, you know, it doesn't have to be the one at the end or anything. Pick any triangle node and make it the root of the tree. So this root is, I mean, this tree is not a tree. So just make it a rooted tree by sort of pinning this as the root, for example.
00:32:41.194 - 00:33:31.874, Speaker A: Now, you know, there are always, you can show that there are always what we call free triangles, that is, you know, triangles that have these two free edges that, that are not shared between any other triangles. So if you look at this graph here, so t one is a free triangle because it has two free edges that it's not sharing within any other triangle. This t two is not a free triangle because, you know, it has two edges that it shares with other triangles. Okay, so if we pick any triangle node.
00:33:34.494 - 00:33:36.310, Speaker B: T three have three nodes, right?
00:33:36.342 - 00:33:55.054, Speaker A: T three has. T three has two shared edges. So we call a triangle a free triangle if it has two unshared edges. If it has more than one shared edge, then it's, it's not a free triangle.
00:33:55.554 - 00:34:09.986, Speaker B: So, yeah, I'm seeing your graph in the two graph. T three should have three. Three nodes, right? Should be connected to three nodes. Cd, dc, d three and ce. So yeah, t three should be connected to c language.
00:34:10.130 - 00:34:33.846, Speaker A: Okay, hold on. T three. I have missed Cd, ed and ce. Yeah. C, d two. Okay, so I've connected this wrong. I think you're just missing one red node on.
00:34:33.910 - 00:34:35.434, Speaker B: Yeah, c and t three.
00:34:37.214 - 00:35:22.874, Speaker A: Yeah, I just connected this wrong. So t two is, does not have ce as a, as an edge bounding it. And I think I'm missing something for d two. So ac, ad and ac is missing. Yeah, that should make it. Yeah. So for any triangle, for any triangle node, it should have three.
00:35:22.874 - 00:36:16.896, Speaker A: It should have degree three. Three. Okay. Okay, so, um, you can always show that you'll have at least one free triangle. And what you do is, you know, so let's suppose that I had pinned t two as one of the roots. So I have kind of a branch going off from t two in one direction I have a branch, another branch going off in the other direction. All I would have to do is, you know, move, you know, let's say this t four here, all the way along to, so that it connects to t one or the other way around.
00:36:16.896 - 00:37:37.774, Speaker A: So you can always show that, you know, if you have this free triangle, kind of can walk along your tree using a flex contact path, and you can attach it to the end. So, for example, what we would be doing here is, let's take this t one, I remove AB flex this, and I would attach it to t four. Okay. Um, so we, we've shown that, um, you know, you can always go, you can, given a tutorial, you can always straighten it out into a chain. Now all you have to do is show that, you know, you can go between two different chains. So to do this, we have this lemma which says that, um, you know, if you have a chain, then you can always switch the vertex labels of two vertices just by doing an edge move. And because we can do this, we can permute the triangles however we want to get any different chain we want.
00:37:37.774 - 00:38:39.804, Speaker A: So I've shown that, you know, given any two tree, I can straighten it out into a chain, and I'd straighten both f one and f two to a chain, and then I can permute between the two chains. So we kind of have a path that goes from the source to your destination. Of course, for this to work, the underlying thing should be a unit distance, two, three. Otherwise, you know, this, this idea of walking. So sort of moving this triangle, t one, into a chain configuration may not work. Okay, the last thing I'll talk about is this idea of a flex path. Again, to remind you, flex path is when, during the edge move, when you remove the edge and flex it, you can add any edge back at any length you want.
00:38:39.804 - 00:39:27.984, Speaker A: So this turns out to be true. So G is isostatic or minimally rigid. That's, that's what we start from. So you consider the space of all the 2d realizable edge lengths of g, edge length, tuples of g, we call this. Yeah, of g. So for a particular framework of g, we denote this as delta Gp, because g is isostatic. This delta g, that's the space of all 2d realizable echelons of g, is connected, and it's e dimensional because of its isostaticity.
00:39:27.984 - 00:40:40.924, Speaker A: Now, because it's connected, you can show that there's always a path from any Framework to any Other Framework. But you have to kind of, our requirement is that you have to be able to do it using an edge move. So BeCause it's E diMensional, for any edge, there's some Finite Motion, you know, along every edge dimension, if you will, there is some Finite Motion. So what you can do is Sort of move along one. So as in remove an edge and move along the possible lengths of that edge while maintaining all the other edge lengths. This kind of allows us to, you know, walk along one edge dimension a little bit, walk along another edge dimension, and so on. So if I have, if I give you a source and a destination, I can kind of create like a Manhattan path along all the different e dimensions to get from my source framework to my destination framework.
00:40:40.924 - 00:41:30.194, Speaker A: Okay. Yeah. So how much time do we have? 15 minutes. Okay. So to go back, initially, I showed that for, if you want to do flex linkage path, that is, you're removing the edge and adding it back at the same edge, back at the same length, if you're doing, if you're dealing with unit distance. Henneberg one, we had this graph that was, we had this counterexample of a graph that was dependent. So we have some directions in which we want to go.
00:41:30.194 - 00:43:04.684, Speaker A: The first was to see what are the possible realizations that exist, because this is not like a two tree. For a two tree, unit distance, two tree, you can show that if one realization exists, all the other realizations exist. So the first obstacle for us to understand this sort of configuration space is to characterize what are all the possible realizations that can exist. And the first thing we did was we showed that if you have a unit distance framework, Heineberg one unit distance framework, you can always embed it on a three direction mesh. And I think it's true that, you know, it has to be embeddable on a, I mean, it can, it has to be embeddable on a two direction mesh. And we conjecture that if you have a realization that's on the three direction mesh, if you take any of the access lines, you know, all of these axis lines, if a realization exists, the reflection of the graph along the axis line, that realization also exists. Here, for example, I've taken this axis line, and I'm kind of reflecting it, reflecting this portion of the graph onto the other side.
00:43:04.684 - 00:44:20.090, Speaker A: And it, we conjecture that this exists. So it kind of gives us some idea of what realizations exist and how to deal with them. So we are also interested in three trees, sorry, in all of these graphs in 3d, but in 3D, we don't have a characterization like Laman. So we looked at what we knew for sure were rigid, like three trees where you just paste a whole bunch of tetrahedral on top of each other flex linkage path, you can show that you can always get from one unit distance, three tree to another unit distance three tree, with the same underlying linkage. It's very similar to what we showed in the 2d case. You remove an edge, this tetrahedral, this tetrahedron kind of flattens out and kind of moves on to the other side and, you know, the same result, same kind of proof goes through. But for flex contact parts, you know, some of our proofs don't go through.
00:44:20.090 - 00:45:19.224, Speaker A: We don't. I mean, these are not really concrete counter examples, but, you know, we, our earlier proofs don't go through. So one of the earlier for the flex contact is what we did was if you had this two, three, we straightened it out into a chain and we folded back, folded it back up however we wanted it. You know, that that was true for the Hannibal case also, where, you know, if you have a Hannibal construction on an edge, you can always make it a triangle, and then you have a two tree, and then we can kind of straighten it out again. But in this three tree example, you know, I can have a Henneberg sort of construction on three vertices here that don't share any edge. So it's kind of in a limbo here. And if I remove one edge, there's no guarantee that I'll be able to move this tetrahedron onto on top of another face.
00:45:19.224 - 00:46:10.890, Speaker A: So there's no guarantee that I'll be able to straighten it out into a chain. So this is, again open. Okay, so I have about twelve minutes. So I wanted to talk a little bit about what I talked about in the last class. So here we are talking about the molecular assembly problem, and there we were talking about parts in the molecular parts in molecular assembly. So we are given a rigid configuration of two molecules, you know, that pairwise distance, into a constraint. Then, you know, we want to go from one rigid configuration to another rigid configuration by dropping one edge at a time.
00:46:10.890 - 00:47:00.204, Speaker A: So if I'm given this rigid configuration, for example, if I drop one constraint, this will give me a flex. So this is very similar to the flex contact path that we've been talking about. So I loosen one contact here, that gives me a degree of freedom. So what I'm showing here is all the possible flexes of this framework. So I can move here, and after I move, I can form a different contact and then keep doing this, you know, after I form a different contact, I can remove a different edge. I'll end up in a different configurations, 1d configuration space and so on. I can keep doing this up and down.
00:47:00.204 - 00:47:52.550, Speaker A: But like I said last time, this 1d region here, we use Klee parameterization here. And because we do Klee parameterization here, this 1d configuration is not just one curve. It is potentially up to eight different curves because Kle parameterization is a many to one map. So I showed this figure last time. I said that, you know, these were all the possible contact graphs. I'm just picking out one of these contact graphs to show that, you know, when we realize these two molecules, the configuration of these two molecules, we have three different tetrahedra. So that's why we have eight potential realizations.
00:47:52.550 - 00:48:32.208, Speaker A: So here, these blue little dots are atoms that belong to one molecule, and these green little dots belong to atoms on the other molecule. So we consider this entire molecule to be rigid. So you can consider that, you know, there's a, there's a triangle here. There's a clique here, right? I've just not shown it here. This is a clique here, and there's a, there's a clique here. Now I'm kind of drawing it in the form of three tetrahedra. So ABC, the blue, you know, the label vertices labeled blue ABC belong to the blue molecule.
00:48:32.208 - 00:49:28.370, Speaker A: The vertices labeled def belong to the green molecule. And this is the clique. The ABC is the clique, and def is the clique that comes from the rigidity of these two molecules. Now, there is here, whenever there's an edge between these two molecules, I put an edge here. So, as you can see, if you take vertex a here, that's, let's say this is vertex a, I can form a tetrahedral, form a tetrahedron. Okay, so it looks like this is vertex c is vertex c. So if I take this triangle as a base, I have three different contacts, just like three here and so on.
00:49:28.370 - 00:50:35.034, Speaker A: So when I have three different tetrahedra to realize, like I said earlier, I have two to the three realizations, or eight potential realizations for each individual klee configuration in this, in this one d k region. And, you know, like I showed before, you know, the placement of the tetrahedra either on one side or the other side depends on the sign of the flip vector. But sometimes what can happen is because of the lengths you have chosen. Let's say, let's take this triangle, this tetrahedron, ABCD. I I can choose lengths for Bc, ac, and BD. So that this b kind of collapses onto the triangle face. ACD when I do that, you know, you can see that the solution, you know, whether I place b on one side or b on the other side, they are identical.
00:50:35.034 - 00:52:01.634, Speaker A: So if I were to, you know, start pushing b into the face and start to pull it out on the other side, you can see that at that particular point where the tetra hidden volume becomes zero, this, you know, the two solutions kind of meet and they come out on the other side. So this sort of gives like an interesting character to how the, you know, how the 1D Kaylee configuration space, this innocuous looking line here internally, may look something as bad as this. So all I'm showing here is that, you know, zero to zero through seven are all the different flips for a Klee configuration. That is, each little cube here is a Klee configuration, and zero through seven are all the flips. So let's say, you know, this is the, this thing that goes like, this is the solution sp. I mean, it's all the solutions in the 1d region for this particular orientation of the Klee configuration. Whenever a particular tetrahedron becomes zero, as you can see here, let's say that tetrahedron one volume becomes zero.
00:52:01.634 - 00:53:04.274, Speaker A: Then, you know, the only thing distinguishing, there is nothing distinguishing flip zero. That the only distinguishing factors are how t two and t three are placed from, for example, this flip four. So if no matter how I place tetrahedron one because the volume is zero, um, these two are the same. So that kind of corresponds to these two flips meeting. And whenever one tetrahedron volume becomes zero, you know, multiple solutions kind of come sort of meet at that particular klee configuration. I've shown tetrahedron one becoming zero here, tetrahedron two becoming zero here, and so on. And whenever two tetrahedra collapse, four flips meet at the same location and so on.
00:53:04.274 - 00:53:23.104, Speaker A: So, yeah, so I just want to share that to kind of show the complexity involved in finding, you know, a path in the Kelly region here. Okay. Are there any questions?
00:53:32.964 - 00:53:42.224, Speaker B: Can I explain this in your previous slides? There's a picture of this AbCdE.
00:53:44.024 - 00:53:44.964, Speaker A: This one.
00:53:45.624 - 00:53:57.524, Speaker B: No, no, in the beginning. And you explain the fixed contact pass cannot work.
00:53:59.664 - 00:54:00.424, Speaker A: Contact path.
00:54:00.464 - 00:54:04.520, Speaker B: Yeah, yeah. This seven. Seven. Page seven.
00:54:04.672 - 00:54:09.324, Speaker A: Okay. Okay. Yes, yes. So this is for a flex linkage path.
00:54:10.884 - 00:54:21.828, Speaker B: Yeah. So you said. Yeah. The second one cannot move to the third one, right?
00:54:21.916 - 00:54:22.904, Speaker A: Yes, yes.
00:54:23.724 - 00:54:26.544, Speaker B: This because the constraint you have.
00:54:27.244 - 00:54:29.784, Speaker A: So why this cannot.
00:54:31.684 - 00:54:38.124, Speaker B: Be plus e is less than DB, plus CBD. Yeah. Why this could not happen?
00:54:39.424 - 00:55:17.114, Speaker A: Why does this happen? So here I'm showing that if I'm allowed to pick whatever edge lengths for these, the edges in this graph, I can pick edge lengths so that no matter what edge I remove, I won't be able to flex the framework however I want it. So here, for example, let's say I want to go from here to here. Let's try removing AC. If I remove AC, we cannot get onto the other side because this edge will prevent it. Like Dce.
00:55:18.534 - 00:55:19.714, Speaker B: Yeah. PCE.
00:55:23.094 - 00:55:26.914, Speaker A: Will not allow it to flex beyond a certain.
00:55:28.274 - 00:55:32.178, Speaker B: So, yeah, BCe cannot flag flex beyond.
00:55:32.226 - 00:55:44.226, Speaker A: A. Yeah, you can. You can do the same thing with picking any edge. So I can pick. I can remove ab. For example, if I remove ab, this kind of C. C kind of stretches out.
00:55:44.226 - 00:56:31.594, Speaker A: So let's say I remove ab with the intention of flipping a over to the other side, right. This kind, you know, the flexes that, you know, c and D are moving apart. When they're moving apart, at some point, ce plus ed will become shorter than what, you know, CD. The length of Cd you require to move a over to the other side. So I've ab and I'm trying to flex this. So, so that a goes to the other side and b comes to this side, right? Yeah. The flex is that c and D are kind of moving apart from each other.
00:56:32.454 - 00:56:33.310, Speaker B: Yes.
00:56:33.502 - 00:56:54.364, Speaker A: Yeah. So at some point, the length of EC plus ad, it'll become a straight line and it cannot flex any further up. Right. At that point, I won't be able to move a at that point, the moment of a and b towards each other kind of stops because it's not stretching enough.
00:56:55.424 - 00:56:56.204, Speaker B: Yeah.
00:56:56.664 - 00:57:04.084, Speaker A: So, you know, at that point, I cannot go to any other place where I can put a b back at the same length.
00:57:07.864 - 00:57:16.352, Speaker B: So if you don't have a d and a c. Yeah, this is possible.
00:57:16.488 - 00:57:56.684, Speaker A: Yes, yes. Because, yeah, if you don't have that, you have essentially a two tree, two triangles pasted on top of each other. You remove one thing and you can flex it. But we showed that even for two trees, there are counter examples where this is not possible. All you would have to do is instead of having just one triangle on top of an edge, have two or three different triangles, and then I won't be able to flex some of the smaller ones. So some of the smaller ones will prevent the bigger one from kind of going through.
00:58:03.624 - 00:58:07.808, Speaker B: Some smaller ones, not preventing the big one.
00:58:07.976 - 00:58:41.434, Speaker A: Let me draw smaller. Okay. So let's say I have this edge here and I have a triangle like this. Have another triangle like this, and I have another triangle like this. So if it is just this, I can get a, get away with it. But if I add decorations on top of this or on top of this, that prevent me from removing this edge. Right.
00:58:41.434 - 00:59:08.874, Speaker A: Now, if my only option is to say remove this edge. Now if I try to move these two things apart with the intention of trying to get this triangle over onto the opposite side, this will stretch out to align and then it will prevent it from going through.
00:59:11.734 - 00:59:18.434, Speaker B: I see, so, yeah, so why can I remove this long edge?
00:59:18.854 - 01:00:13.894, Speaker A: No, no, I'm not saying that you cannot, but I can engineer a graph where that is, that removal is not possible. I mean, even if you remove that, you'll not be able to go through. So let me see if I have that example here. Hold on, I should. Yeah, here we go. Okay, great. Okay, let me start from the beginning.
01:00:13.894 - 01:00:37.974, Speaker A: So this is, this software is, by the way, called kmos. This is for generating the configuration space of linkages that have low klee complexity, as they say. So here I've taken this two tree, this is a two tree, and I've removed one edge. So I've removed v one, v two.
01:00:38.474 - 01:00:39.254, Speaker B: Yeah.
01:00:40.914 - 01:01:10.634, Speaker A: So there is one triangle here, another triangle here. And on all the edges of the original v zero, v one, v two, have two different triangles. Right. Now, you know, even if I remove this, this is not much flex. I can get to put v three on the other side. If I remove this, I cannot get enough flex to remove that and so on.
01:01:12.654 - 01:01:15.926, Speaker B: Yeah, because it's rigid, right. You remove, it's too rigid.
01:01:16.070 - 01:01:54.882, Speaker A: Yeah. So here. So what this software does is I can pick two realizations of this graph, and if it is possible to go from one to the other, it'll show that they are all connected in one connected component and it kind of generates the entire configuration space. So here it's showing that there are two different connected components. So this is my source configuration, this is my destination configuration. I've just flipped one of the vertices. So this is showing all the flexes the source can take and it's not reaching the destination.
01:01:54.882 - 01:02:16.374, Speaker A: And in a minute, I think I'll show the destination kind of flex where. And you can, you know, here I've removed one edge and tried to do this. You can remove pretty much any edge and you'll have two different connected components. So this solution is not reachable to this solution, no matter which edge you remove.
01:02:19.234 - 01:02:24.414, Speaker B: Okay, I see.
01:02:26.274 - 01:02:30.034, Speaker A: Okay, I've gone over a little bit. Apologize for that, sir.
