00:00:00.160 - 00:01:03.632, Speaker A: Okay, so it was several days ago. So what were we doing? We were looking at, we were looking at de rigid graphs. Minimally de rigid graphs, but they were, weren't just arbitrary bar joint structures, they were pinned frameworks. So it was minimally rigid as a pinned framework. So remember we used this partition of the vertex set into pinned vertices and inner vertices and so we have our minimally pinned, pinned, minimally de rigid graph g. And what we did was we assigned particular kinds of orientations to the edges so we would give it a dedirected orientation which means we orient the edges so that for every inner vertex the out degree is equal to two and for every pinned vertex the out degree is equal to zero. And so given one of these graphs you can always assign such an orientation and properties of the orientation will help us understand the rigid subgraphs of g.
00:01:03.632 - 00:02:01.204, Speaker A: And in particular the strongly connected components will tell us the minimal in terms of size as well as minimal in terms of deleting edges, minimally rigid parts of the assure components of the, the graph. So here's an example. We're going to take a two dimensional picture. So notice I've used squares for the pinned vertices as I did last time and all of the, the other vertices are inner. So I have in advance assigned hopefully correctly a first drawn and minimally pinned two rigid graph and then assigned a, a two directed orientation to it. So what can we say? Let's use a different color. So our smallest component will be this triangle and it's free edges to the ground.
00:02:01.204 - 00:03:01.584, Speaker A: So the pinned vertices, so that's my c one you can see over here, it's the first vertex in the sort of partial order over there. So it was a triangle with three edges to rule out the pin vertices ruling out the isometry. And you can see from the directions this triangle is a strongly connected component with only edges heading out down to the, towards the pins. We then reinterpret that entire graph so on these three vertices as well as the free pins as all being pinned vertices themselves and look for the next smallest pinned minimally too rigid component. So let's change color again. So here we have two choices, right? So I could just take this vertex and it's two out edges to the, the pins or I could have taken this one and it's two out edges to the pins. So I have a c two and a c three which occur over here in the partial order.
00:03:01.584 - 00:03:28.838, Speaker A: Then at the next step I look for my next. So they, they were trivial strongly connected components because it was just single vertices. So there wasn't really much there. But my next strongly connected component. Have I done that right? No, I haven't. So that edge should have been like that because the out degree here was already was one two. So this one had to be an in.
00:03:28.838 - 00:04:11.084, Speaker A: Yeah. So again, let's move to green. So next strongly connected component is this triangle and it's free out edges. Again, all of these things are reinterpreted as pinned. And so that gives me my fourth component, c four, which you can see over here and then again at the end. I have two choices for the remaining components. I can either just take this vertex and it's two outgoing edges, two pins, or I can take this one and it's two outgoing edges, one to a vertex every interpreted as a pin and one to an actual pinned vertex.
00:04:11.084 - 00:04:59.144, Speaker A: So there's my c five and c six, which you can see over here. Okay, so that's the idea. Basically what we did last time and the theorem we stated that said these components c one to c six that I get are exactly the strongly connected components and they're also exactly the smallest minimally pin de rigid components. As you go up, so you want to find the smallest subgraph which contains the pins, which is de rigid itself, and then you up. And there was nothing special about the two here. So the picture only works in R two because I particularly chose a graph that was minimally rigid in R two. But if you go to rd for any d, you can do the same thing.
00:04:59.144 - 00:05:36.224, Speaker A: You're given in advance, the pinned rigidity. So you're given in advance, you've avoided something like a double banana. And you look for the decomposition and the strongly connected components will still guide you. You move from a two orientation to a deorientation, but otherwise you can do the same same thing. So I guess that's the comment here. Okay, so I want to do two more small things about a few graphs before we move on to body bar frameworks. So the first is really strongly motivated by the engineering application.
00:05:36.224 - 00:06:28.482, Speaker A: So I'm going to say that a Dsur graph on these doubly minimally pinned rigid things is strongly dsu if when I delete any one edge, I get an infinitesimal motion. That's obvious because it was minimally rigid. But the infinitesimal motion has non zero velocity at every vertex of the graph. Okay, so the Leman Polacek Geringer theorem you can use without too much work to deduce in two dimensions that actually this is just a reformulation of the definition. So two is here and strongly two is here are actually the same. But when d is great and equal to three, it's not true anymore. So I think this is interesting just to one to say that this is, this sort of stronger definition works in 2d, that this is really a lemma.
00:06:28.482 - 00:07:16.756, Speaker A: And what I put in these brackets, and to illustrate the example that Offi Shah, Nan Schlocker and Walter Whiteley came up with maybe 2011, that shows it's somewhat like the double banana. As you'll see there's a k five minus an edge here with the one pinned vertex. So based on double banana kind of complications, you can show this is not true. So we're in 3d, so we want the number of edges to be three times the number of inner vertices. If you count up including the dashed edge, then that's satisfied. And so I'm going to remove the dashed edge. And if it was strongly a co, what you would like is that deleting one edge gives an infinitesimal motion that has nonzero velocity at every vertex.
00:07:16.756 - 00:08:18.310, Speaker A: But actually if I delete this dashed edge here, the non zero velocity only occurs at the blue vertices. So by removing this one I allow the rotation through the line through those two, but I don't put any of the other parts into motion. Okay, so this is a showing that the sewer world does get more complicated when the dimension goes up, even though we can say the nice strongly connected thing in all dimensions. The other theorem I wanted to mention about a sewer graphs is this one from Brigitte Sivatius offishai and Walter Whiteley. And the point here is to make a nice link back to circuits in the two dimensional rigidity matriarch. So this is all about two dimensions. I take a pinned minimally too rigid graph g, and then this is a characterization of when such a graph is a two issue graph.
00:08:18.310 - 00:08:49.290, Speaker A: So when it has no pinned minimally rigid subgraphs, proper subgraphs. And so that's true if and only if, the graph you get from contracting all the pinned vertices to a single vertex is a circuit in the 2d rigidity matrix. So it's an r two circuit. There's, you can already see here, there's one exception to this. So this is how they state the theorem. It bothers me a little bit, but I will accept this. So this is a pinned vertex.
00:08:49.290 - 00:09:18.350, Speaker A: This is a pinned vertex, obviously a degree two. That's an example of a pinned minimally two rigid graph. When you contract the pins, you get this graph, which is a multigraph, not a simple graph. So you have to accept that this is an example of an r two circuit, for this theorem to be true. But maybe that's okay because it's one exception. It's very small, a nice kind of example you can get, and you can generalize this very easily. Take any cycle.
00:09:18.350 - 00:10:16.554, Speaker A: So here I've took a four cycle of inner vertices and join each one to a pin. As long as you use at least two pinned vertices, it doesn't matter whether you use n for your n cycle, or just two or anywhere in between, it will always be pinned minimally too rigid, it will be a two SEO graph. And when you contract all the pins you obviously still have the cycle, and then you have one vertex and adjacent to everything on the cycle. So you have a wheel, which is one of the major examples of two reals circuits that we saw way back a couple of months ago in the course. Okay, so the theorem says you're a two or graph if and only if. When you contract the pins, you get a circuit. Actually the proof is, I mean, you can look up the proof if you like, but if you want to challenge an exercise, it's not too hard to, to prove, so feel free to have a go at that.
00:10:16.554 - 00:11:18.260, Speaker A: The last thing I want to say about a sewer graphs is you can do this in other contexts. So for example, if you want to do it in a forced symmetric rigidity context, which we'll talk about in two weeks time in the course, then there's a paper that does this. Another kind of thing we haven't talked about is direction length frameworks, where you have some edges that constrain the distance between two points and some edges constrain the angle that the line through those two points makes with the positive x axis, say for in the plane. And so seographs do work in these contexts. But I mainly mention this point because I know there's usually a group of postdocs who come here who might like to think about whatever kinds of contexts a serographs work. And for example, I would think they work pretty easily in the periodic context and it could be adapted to that, and maybe that would be interesting to explore. And so I'm sure there are other contexts where they would also work.
00:11:18.260 - 00:11:48.488, Speaker A: In fact, in the periodic context, I did think about this at some point and have some notes somewhere. In general, in other rigidity contexts it might be useful to extend the SEO ideas. Okay, so unless there's any questions about SEO graphs, I will flip to another document and talk about body bar and body hinge frameworks for the second section of the lecture. No, that's wrong.
00:11:48.656 - 00:11:49.564, Speaker B: This one.
00:11:55.464 - 00:12:25.504, Speaker A: I'm just opening the chat in case anything goes in there. Yes. So, as we know, in dimension at most two, we can understand generic rigidity and generic global rigidity very nicely. We've gone through that in dimension two in great detail. In dimension three, it remains a challenging open problem. And we've talked about some special cases that were based on. Well, this is a nice class of graphs and we can understand something, for example, planar graphs.
00:12:25.504 - 00:13:17.824, Speaker A: I want to extend this in a slightly more geometric way. So we're again going to look at special cases, special cases that can be understood combinatorially in all dimensions. And so the most natural first one you might think of is body bar frameworks. Instead of having bar joints, where the joints are thought of as being essentially just points, we're going to have substantial bodies and joining them together. So let's see how that's going to work. So, a body bar framework, I'm still going to use GP because I'm going to think of these as special kinds of bar joint framework frameworks. So it's a bar joint framework in which the vertex set is partitioned into pairwise disjoint complete graphs.
00:13:17.824 - 00:14:11.224, Speaker A: And so these complete graphs and deferring, telling you exactly what size they are for a few minutes, correspond to the bodies of the body bar framework and the edges that are not in the complete graph. So the edges between the bodies are the bars of the body bar framework. And so these bars are always going to be independent. They're pairwise disjoint connecting the bodies, but they're never going to hit a body at same vertex. Two bars are never going to hit the body at the same vertex. Okay, so more geometrically, the bodies are going to be compact, connected subsets of euclidean space that affine the Spanish. And the bars are then line segments, and the endpoints of these line segments belong to distinct points on the bodies, in fact, generic points on the bodies.
00:14:11.224 - 00:14:52.810, Speaker A: Okay, so, yeah, so again, I guess it's just some more sort of intuition for this. You have these rigid bodies and they, the rigid bodies themselves can move arbitrarily in RD, as long as they preserve the contacts of the bars. So in particular, a rigid body has six degrees of, say we're in three dimensions, say we take d equals three. Then a rigid body has six degrees of freedom because it has free translations and free rotations that it can do. And then the bars in contact with that body will restrict these degrees of freedom of the whole structure. Down to only being the translations and rotations. And that will be what we think of as rigid.
00:14:52.810 - 00:15:19.704, Speaker A: So it's really the same problem. We have this special case. So we're going to model our body bar frameworks by a multigraph, a loopless multigraph. So the vertices of this multigraph will be the bodies. And so then say imagine you have, you have two bodies. It was possible for you to have multiple edges between them. So we really can have multi graphs rather than simple graphs because there's nothing stopping us.
00:15:19.704 - 00:16:18.098, Speaker A: Having multiple edges and multiple edges between two bodies will, as you can sort of see instantly, will help you to reduce the degrees of freedom, which wasn't the case in the bar joint case because it really was just repeating the same constraint a second or however many parallel edges times you had. Okay, so the body bar framework is modeled by a multigraph age. The vertices correspond to bodies and each bar connecting different bodies is represented by an edge. We go the other way as well. And maybe this becomes clearer of an example. So you start with a multigraph h, a loopless multigraph. Then we can define the body bar graph induced by this multigraph g, sub h to be the graph obtained from the multigraph by replacing each vertex of h by a complete graph called bv.
00:16:18.098 - 00:16:44.708, Speaker A: So this is really the complete graph modeling the body. And the complete graph has number of vertices as the degree of the vertex in the multigraph. And then you replace each edge by an edge between the two bodies. But make sure that the bars incident to any body are pairwise disjoint. So here's an example to try and make that clearer. We'll do, we'll go in two dimensions. Here's my, my multigraph h.
00:16:44.708 - 00:17:11.154, Speaker A: It's just two vertices and three parallel edges. So I want to replace this vertex with a complete graph on three vertices. That's this one. And I want to replace this vertex with a complete graph on three vertices, that's this one. And then the free parallel edges are replaced by free edges between the two complete graphs. I don't want any of those two edges to meet at a vertex. I want the bars to be, to be nicely disjoint.
00:17:11.154 - 00:18:05.842, Speaker A: So I've put it as this, this nice prism graph. So we can understand the rigidity of the body bar graph by looking at the rigidity as a bar joint structure of this graph on the complete graphs with the bodies being complete graphs like this. So we can apply all our usual bar joint rigidity definitions if we like. Okay, so just to do one more example, I drew the free parallel edges graph h and saw that this was, as you know, is a nice minimally rigid fig. If we take one away we can see as well that it's a nice flexible example. So here the two vertices of the body bar graph had degree two so they were replaced by complete graphs on two vertices. And again the two edges were, were made nicely independent between them.
00:18:05.842 - 00:19:07.486, Speaker A: But obviously the full cycle is easily seen to flex. Okay, so I said this already in 3d, but in general all the degrees of freedom you have for translations and rotations are the degrees of freedom you have for your, your bodies. And I sort of hinted at this, this just now, but basically we're going to. I'm going to be lazy because I want to, I don't want to this body bar section to span more than the one lecture. So we're just going to have to think about our body bar frameworks as special case of bar joint frameworks and import the definitions. This is not the thing you should do if you want to study and work on body bar frameworks or the body hinge or molecular frames we'll get to what you really should do in that context is going to the projective geometry viewpoint and think of body bar frameworks in terms of the plucker coordinates. And so this was, was introduced by Tay in the eighties and then you develop a new rigidity matrix with things like two extensors.
00:19:07.486 - 00:20:00.386, Speaker A: But I don't decided I did not want to try and spend an hour doing that as a preliminary lecture for this one. So there is a much nicer way to do it. This what's done. If you read any of the references and want to prove things about body bar frameworks I just want to tell you some of the results and give you a little bit of the intuition for the nice combinatorics that comes out. But there are good sources for this and hopefully within the next few days Bernd Schultz, Walter Whiteley and I will put a sort of survey paper on the archive which does include a lot of the details of how the plucker coordinate stuff works for body parts. So there is a. There will certainly be one more than there already is nice reference for where you can read about this very soon.
00:20:00.386 - 00:21:13.080, Speaker A: So I'm deferring any of the technical details of what the rigidity matrix looks like, et cetera. I'm just basically going to do what I've tried to do in most of the course, and why try and do it in my research actually is think of rigidity as just a rank condition on some matrix, and really not worry too much about what the matrix is, but study combinatorially the graphs that have the, the right count. I missed this bit. So let me just, just say this. I have a, if I want to have a body bar framework, I could, instead of having GP as a special bar joint, I could have a GB where b maps a pair ev to the body of v in this sort of way. But I think it's best to think of them as a special case of bar joint frameworks where effectively you're studying, maybe it's called cluster graphs or something, where you just have big complete graph, big complete graphs, and then some sort of edges spread amongst them and we'll see that that's really what we're studying in the combinatorial viewpoint as well. So we just said the rank condition.
00:21:13.080 - 00:22:00.800, Speaker A: This gives us the Maxwell condition, which we'll state in a moment. I can't remember if I went in the what generality I introduced tight and sparse graphs, whether it was for just for D comma, d plus one, choose two, or whether it was more general. So I've said it again, if you have already seen it, then it's just reminding you. We say a graph is k sparse. I of x remembers the number of edges induced by x. For a subset x of the vertex set, we want the number of edges induced by any subset to be a most kx minus k. So this k the scalar, sorry, yeah, the scale, what we scale x by is the k and then the constant is the second k.
00:22:00.800 - 00:22:56.254, Speaker A: So in general, you could have a k and an l if you like, and we also. So that's sparse and it's kk tight if it's sparse and you have the, exactly the maximum possible number of edges for the entire graph. Okay, so if we take k to be d plus one, choose two. Then our rank condition rigidity matrix implies by linear algebra that if you take an infinitesimally rigid body bar framework, then the graph contains a d plus one, choose two, comma, d plus one, choose two tight subgraph. If it's minimally infinitesimally rigid, then it would be tight. But if it's just rigid, it contains a spanning subgraph which is tight as well. So, and I'm not sure this, this example has a huge amount of value, but it's just a three dimensional example.
00:22:56.254 - 00:23:48.534, Speaker A: So here the, the d plus one choose two is six, six tight. So we want three times six minus six is twelve edges between our bodies. And so I've put four, four and four is my partition of the edges among them, the edges within the bodies we don't care about. We're just imagining each of these as a nice complete graph. And we're going to imagine always that the number of vertices in that complete graph basically matches up at least as a minimum to the number of connecting points, because we want to think of each of the vertices on the body that are incident to these edges across to be basically generic. So at least they're all distinct points that are nice spread out. And so the same for these ones and all of these ones too.
00:23:48.534 - 00:24:21.324, Speaker A: So I mean, it might be worth convincing yourself just for intuition. If you have three bodies, each of them moves with their six independent degrees of freedom. If you put six between two of them, that will nicely rigidify it and make it just so you can only translate and rotate the entire thing. And then you could put six more. But instead I did a four four four split. But it's also valid. So it might be worth just thinking through the details for yourself, if you like.
00:24:21.324 - 00:25:13.568, Speaker A: Okay, so these k k type graphs are very natural in graph theory and combinatorial optimization. And the, the sort of starting point for that is a theorem of Nash Williams from the sixties that may also have been proved by tut around the same time, I think, which basically says that KK tight graphs are exactly the graphs which decompose into k trees. So if k equals one, then one, one tight is exactly the definition of a tree equals v minus one. And there's no subgraph that has too many, so there's no cycle in there. So it's nice. Just a tree. If k is greater than one, then you, you get a non trivial union and take the edge disjoint union of k spanning trees.
00:25:13.568 - 00:26:07.696, Speaker A: So two, two tight graphs decompose into two edged joint spanning trees. So an example would be that k four, you can decompose into one tree and a second tree on your, on your, that span all the vertices of the, the k four. And you can do this for whatever kk you want by the theorem. In fact, as I sort of point out here, one direction of the theorem is, is not so hard. It's, if you have the edge disjoint union of k spanning trees, then you know that they all span. So each tree say it has edge set ei for the I equals one up to k for your k trees, then you know this is true. So when you take all the k together, you very clearly get this, because they all span, so they all have the full vertex set.
00:26:07.696 - 00:27:22.194, Speaker A: But have the different edge sets, and the sum of the eis adds up to e. And if you very slightly more careful, you can do the inequality version so you can check this direction without much work at all. And going the other way is the, the content of the theorem actually the, if you read Nash Williams paper, then you'll see that it's presented in a slightly different way in terms of partitions. And then, so I thought I'd just illustrate that a little bit as well. And by the way, this reminds me that quite a bit of what I'm getting here, I understood from reading a nice article by Chaba Kirai and Shinichi Tanegawa. It's a chapter in the Handbook of geometric constraint Systems principles, where they, they go through all of the what's known about survey, what's known about body bar and body hinge and molecular frameworks. So if you are curious about things, I'm saying that's probably a good starting point for extensions from this lecture.
00:27:22.194 - 00:28:19.836, Speaker A: Okay, so yes, so the alternative version of it is to think about partitions. So let's say it is the necessary condition in the other way around. So a body bar framework is not rigid in RD. If there is some partition of the vertex set such that this strict inequality holds where e of p, the thing on the left hand side, denotes the number of edges connecting different sets in the partition. So maybe I just want to draw, I don't know how valuable it will be, but I just want to draw one blob first. So you sort of imagine your partition in your graph is into all these blobs, and then your condition is counting the number of edges between the blobs. So there may be many vertices in the different bits, or it may be the trivial partition where each element of the partition as a single vertex.
00:28:19.836 - 00:29:12.336, Speaker A: But if you can do it for any partition, and get this, this inequality, then you're not infinitesimally rigid. So here's a two dimensional example. So we're looking at the we want to find some partition where there's at most three two plus one. Choose two times the number of elements in the partition minus one. So here's a graph ABCD, and I'm going to consider the partition where a is its own set, I've colored that blue, c is its own set, called that red, and bd is one element of the partition. So b and d are colored green. Then the number of edges ep the number of edges connecting different sets in the partition are this one, this one, this one, this one, and this one.
00:29:12.336 - 00:29:45.224, Speaker A: But none of the ones between b and d, because they're in the same set. So I counted up to five. However, the constraint here was three times the number of elements in the partition, minus one. There was three elements in the partition, so three times two is six. So I did have the strict inequality. And that demonstrates that this framework is not infinitesimally rigid. If you write, you draw out the, the framework with the, of this multigraph.
00:29:45.224 - 00:30:17.840, Speaker A: Okay. In this particular example, it was also easy to see it a different way, because there were four parallel edges between B and D. So you could have done this using the first version, since the number of edges induced by b and d, the four parallel edges, and we've come to compare that to. We're talking about free spanning trees. So it's free times the number of vertices minus two, and there were two vertices and b and d in that subgraph. So four is greater than three. So we fail the free free sparse condition as well.
00:30:17.840 - 00:30:58.166, Speaker A: So in either way you can check it. But I thought it is worth thinking about this, this partition version, at least for a short amount of time. Okay. So these necessary conditions are also sufficient. So I jump straight to the theorem the tay proved was the first proof. And there's a nice paper by Whiteley on body bar frameworks as well, and a number of other authors have thought about these structures as well. But the first thing, the first one was Tay showed that a generic body bar framework in rd for any d is rigid if and only if g contains d plus one.
00:30:58.166 - 00:31:57.742, Speaker A: Choose two edge disjoint spanning trees, so it has this d plus one, choose two, comma, d plus one, choose two tight count for any, for some spanning subgraph. If I wanted to give a proof, because of the way I've been teaching it, in this module, we do a recursive construction, and there's a paper, a separate paper by Tay after the one I've referenced here, called Henneberg's method for body barf rings, which does exactly a recursive construction proof. In his original paper, tey used a sort of matriarch union idea, and this is really the, the more natural one that comes up and is used a lot for more recent results in the body bar context. So if you read the papers, you're more likely to see things about matroid unions and direction networks or frame matroids. But I'm going to not do any proofs in there in this lecture at all, actually. Yeah, so that's.
00:31:57.918 - 00:32:06.382, Speaker B: Tony, can I. Sorry, can I click about the recursive technique that tay uses.
00:32:06.438 - 00:32:07.074, Speaker A: Yeah.
00:32:07.694 - 00:32:20.474, Speaker B: So as far as I understand, we have issues with stuff like x replacements, feed replacements for 3d. Do these not come up as issues for body bar frameworks?
00:32:23.754 - 00:32:57.370, Speaker A: So they, they do for bar joint frameworks, but in the special case of body bar. Yeah, I should have read, I should have read up on this. So he must get around them just because it's a fair. So it is true that he. So he's looking, say we're in 3d, he's looking at the count 6 volts, six. And so he has to deal with vertices of minimum degree less than somewhere between six and twelve. Right.
00:32:57.370 - 00:33:54.974, Speaker A: So he has to do with like a zero extension here and a one extension for a degree seven, and then all sorts of complicated things where you're deleting many edges. And so the. I think a nice place to read about this, this sort of thing, combinatorially is a paper of fecate and Zego where they express the extensions when you're deleting many edges as a pinching operation. So the pinching operation, you have some number of edges and maybe they look like this, and you subdivide all of them simultaneously and then collect all these green vertices into one. So you end up with one green vertex that goes to all of these different endpoints. By just merging all of these vertices into the, the one here. And in this kind of operation, in the special case of body bar, he's able to prove that it preserves rigidity.
00:33:54.974 - 00:34:07.658, Speaker A: I don't think I know any more than that to say how he does it, but yes, somehow he avoids the general x replacement problems, I guess.
00:34:07.826 - 00:34:15.094, Speaker B: Fecte and Zego's methods uses double edges, which gets around some of the issues.
00:34:15.674 - 00:34:55.646, Speaker A: Yes, that's right. So the graph that contains the spanning trees is a multigraph, so tay as well, in the. So fecate and Zago is more general than Te because tay is for KK tied and fecate and Zego is for KL tides, where L is zero is less than L is less than K. Maybe, or some, some range that's roughly like this. Okay, yeah, maybe that just fixes it then. It just works through that. Yeah.
00:34:55.646 - 00:35:18.576, Speaker A: Interest curious now. So I might look at Taser. It's not this one, it's a paper that I said, it's called Henneberg's method. Henneberg's method for body bar frameworks. I think it's in structural topology in the late eighties. I might look after the lecture finishes too. Well, thank you.
00:35:18.576 - 00:35:53.700, Speaker A: Yeah, thanks. It's an interesting question. Okay, so that's body bar frameworks, and I'll come back to them. I'm realizing I don't have that much more time. And I want to finish on time today because there's a something at 04:00, 04:00 my time, 11:00 your time. So I want to quickly mention body hinge frameworks, which you can think of as somewhere partway from body bar frameworks as an easy case to general bar joint frameworks. But there's actually just a little step from body bar and can be understood as well.
00:35:53.700 - 00:36:37.754, Speaker A: So this time you still have the bodies, you still have these compact subsets that I finally span the space. And you can still have, you could even have body bar hinge if you like, but I've just said body hinge, I guess for simplicity. But now instead of having bars, I'm just going to rule those out for simplicity. The way you restrict the motions of your bodies is by hinges. So you use hinges, which are d minus two dimensional simplexes that connect a pair of bodies. So in the plane this would just be a pin, and you'd have two rigid bodies that that were forced to stay together but could still rotate about the pin. In 3D, it would be a line that you hinge.
00:36:37.754 - 00:37:33.644, Speaker A: Your motions can still move about, but it would stop them from moving apart. So the bodies are free to move in RD, subject to the constraint that the relative motion of any two bodies joined by a hinge should be a rotation about the hinge. So as I said, the natu, they're hinges. In our free, I did this terrible drawing of two bodies at a hinge, but which probably has no value, but I'm sure you can imagine the hinge motions. So as before, it's just a special case of bar joint frameworks, but it's an interesting special case, and it's a little bit harder special case than the body bar case. And so again, we can form an equivalent bar joint framework by replacing each body by a complete graph that's sufficiently large. And if you like, you replace the hinge by a load of edges as well.
00:37:33.644 - 00:38:31.240, Speaker A: So the way we're going to express this is to use this notation. So kg denotes you take some graph g. So for example, I could take a four cycle as gift, and then I could say 2g, which is the graph you get from 2g, not 26. 2g is the graph you get from g by taking the same vertex set and replacing each edge of g by two parallel edges. So this is 2g from the, with g is the four cycle and so, in general, kg is the graph obtained from g by replacing each edge with k parallel edges. Okay, so we replace our bodies with complete graphs, and we replace hinges with one less than the degrees of freedom bars, which can translate our body bar necessary condition into a necessary condition for body hinge. And I am speeding up.
00:38:31.240 - 00:39:28.444, Speaker A: So if I am becoming unclear, then please do say so. I haven't told you what the h is, but let's just think of it as a special case of bar joint frameworks and not worry for, for time reasons and simplicity. So if it's infinitesimally rigid as one of these body hinge structures, then if you take d plus one, choose two minus one copies of every edge in your graph. You should contain d plus one, choose two edge disjoint spanning trees. And so this is the necessary sort of Maxwell condition, which again, you can get if you write down the rigidity matrix, which we're permitted to do, and you can look at the, the degrees of freedom. And then Tay and Whiteley independently showed that this is a sufficient condition as well as necessary. So this, this graph with all these extra parallel edges should contain exactly the same number of spanning trees as we needed in the bar, the body bar case.
00:39:28.444 - 00:40:13.620, Speaker A: Okay, so I'm rushing through. There is another kind of structure called a, a molecular framework, which is basically a body hinge framework. Except in the body hinge framework, I was always thinking of the bodies and hinges as being nicely generic. So I transfer to the, think of it as bar joint with bodies as complete graphs and hinges as d plus one, choose two minus one parallel edges. Then you, everything was a generic bar joint framework. But now I want to have a molecular framework which is really named because these were the things that were interesting in the study of molecules. And the, the reason they were interesting because was they were non generic body hinge frameworks.
00:40:13.620 - 00:40:58.758, Speaker A: And the non genericness was that the hinges at any given body should all pass through a point. So I guess that means that concurrent is the word, I guess, where all the hinges incident to any given body pass through as a special point. And the combinatorial object that was used in the study of these is the square of a graph. So what's the square of a graph? Well, you take your graph. So again, I've just chosen a small cycle as my graph. You form the square on the same vertex set by putting an edge between two vertices in the square, if and only if. In the original graph, the vertices were distanced at most two apart.
00:40:58.758 - 00:41:21.994, Speaker A: So this vertex is adjacent to this one. So the distance is one, so it was drawn. Here it is distance two from this one, so that one is drawn and it's distance adjacent to this one. So that's drawn, and distance two from this one, so that's drawn, but it's not. But its distance is free to that one over there. So this one wasn't. And similarly, you can go around and you see what happens in the example.
00:41:21.994 - 00:42:15.484, Speaker A: And so then there was the molecular conjecture, was a conjectured characterization of the rigidity of these molecular frameworks. And then a really big result of Neoku Keito and Shinichi Tanegawa was the solution to that, the molecular theorem, and still trying to fit everything in, in four minutes. So let me just say this is a really nice result. So you can express your molecular framework rigidity as the generic bar joint rigidity of the square of the graph. This is all three dimensions only, by the way, that paper says some things in D dimensions, but I'm only saying things in, in three dimensions. And then you have the disjoint spanning tree condition you had for body hinge, which was that d plus one, choose two minus one. So in this case, 5G contains six edge disjoint spanning trees.
00:42:15.484 - 00:42:57.386, Speaker A: So the non genericness effectively has the same combinatoric. So it wasn't putting too much difficulty on there for the last few minutes. I wanted just to say that something about briefly, about each of these three contexts for global rigidity. So we have body bar, we have body hinge and we have molecular frameworks. The first two, there are global rigidity theorems that I want to briefly mention, and the third is an open problem. So that's the ten second summary. To try and give the two minute summary, you can also think about body bar, body hinge frameworks for global rigidity, say again? I think about them as bar joint frameworks.
00:42:57.386 - 00:43:48.956, Speaker A: So the global rigidity means in the bar joint context, in the bar joint context, we have necessary conditions. We showed the Hendrickson conditions, which was that if you're globally rigid as a bar joint framework, then you must be d plus one connected, and you must be redundantly rigid, so they must hold in this context, or you have to transfer them from the graph to the multi graph, or to 5g, or whichever way you want to do, or to the square of the graph. So when you do that, the d plus one connectivity condition sort of disappears and will only be there implicitly in what's going on. So here's the. The theorem for body bar frames. This is due to Bob Connolly Tebow, Jordan and Walter Whiteley in 2013. So they proved that a generic body bar framework is globally rigid in any dimension.
00:43:48.956 - 00:44:34.076, Speaker A: D if and only if g minus e contains d plus one edge disjoint spanning trees. So the rigidity characterization was that g contains edge disjoint spanning this number of edge disjoint spanning trees. So this right hand side is saying you're redundantly rigid. So it's saying if you delete any edge, you're still rigid, you still contain the same number of edges, joint spanning trees we needed in the rigidity case, and that should be true for all edges of your graph. So it's exactly the redundant rigidity condition for body bar frameworks. In terms of body hinge frameworks, it's a. A few years later, T bore, Jordan Chabukiwai and Shinichi Tanigawa solved this problem.
00:44:34.076 - 00:45:29.174, Speaker A: And again, it's exactly the statement that you just turn the right hand side of the body bar rigidity result from rigidity into redundant. So we want the global rigidity in RD, if and only if, the same sort of 5g kind of thing. D plus one, choose two minus one. G minus any edge for all edges contains d plus one, choose two edges joint spanning trees. And here I should emphasize that it's for all edges in this, this big graph, rather than for all edges in g to start with. And then in the last one. And I'm going to finish right on the ten two, I guess the molecular theorem, I guess there are some sort of, some work in progress notes that I heard people were looking at, and to extending the molecular theorem to global rigidity.
00:45:29.174 - 00:46:13.474, Speaker A: But as far as I know, nobody has managed to do that. And the molecular theorem for rigidity was a difficult and complicated proof. So this would be a really important and difficult and very deep result if it could be done. So, as I say, let me finish. I'm happy to have up to ten minutes of questions if people want, but let me remind you that on Friday, Georg Grassiger will talk about knack colourings, and that talk will not be recorded. So if you can and you want to see it, please do come along on Friday for Georg's talk. I will stop there.
00:46:13.474 - 00:46:23.324, Speaker A: Apologies for rushing a bit, certainly in the second half of the lecture, but I did want to finish on time. So over to you, if there's anything you would like to ask.
00:46:25.944 - 00:46:50.052, Speaker B: So, with the body hinge stuff, if I'm right, if something's like, if a graph gives a rigid body hinge thing in 2d, then it will give a rigid body hinge thing in higher dimensions. Right. Because you're. I have to get the numbers right.
00:46:50.148 - 00:46:55.184, Speaker A: But, yeah, I was going to the statement to make sure I could do. So. This is this one.
00:46:55.804 - 00:47:10.160, Speaker B: Yeah, because. Okay, so if, if we say 3G contains three edges. Hang on. So if 2G contains three edge destroyed spanning trees.
00:47:10.352 - 00:47:11.604, Speaker A: Sorry, I got that wrong.
00:47:14.424 - 00:47:31.680, Speaker B: Then if you want to go to the next one, which would be showing 5G has six edges joint spanning trees, then to get from five g to six g, you're just adding three sets of edges at every get from two.
00:47:31.712 - 00:47:33.004, Speaker A: G to five g?
00:47:33.394 - 00:47:44.850, Speaker B: Yes. You're just adding three more edges every time. So you can definitely, you can just find a spanning tree of g and then just have that as the edge disjoint spanning tree each time.
00:47:44.962 - 00:47:58.134, Speaker A: I think. So if 2G contains free edge disjoint spanning trees, you draw those free trees and then you add the.
00:48:01.854 - 00:48:35.854, Speaker B: Yeah, because you can kind of think of it as you subtract 2g from 5g, that gives you three g and you need to find three edge disjointing trees that are remaining. But you can easily do that. It kind of makes sense to me. It's kind of like the hinges have more ways they can go wrong. Yeah. They're more rigid in two d. I guess it's kind of how I think of it, but it just seems quite a nice thing.
00:48:35.854 - 00:48:45.254, Speaker B: So you wouldn't even need coning or something. Rigidity is just preserved down dimensions.
00:48:45.914 - 00:48:55.264, Speaker A: So I'm momentarily confused because there's a. If 2G has three edge bounding trees and surely 4g has six.
00:49:01.164 - 00:49:02.420, Speaker B: Oh, yeah, that's a good point.
00:49:02.492 - 00:49:24.804, Speaker A: Yeah. So I think what's happening is that the ones you would get from your construction wouldn't be minimally, they would be minimally rigid here, but they wouldn't be minimally rigid here. And so you can be minimally rigid here is something that wasn't obtained from your doubling process.
00:49:25.664 - 00:49:26.064, Speaker B: Yeah.
00:49:26.104 - 00:49:26.416, Speaker A: Yeah.
00:49:26.480 - 00:49:27.512, Speaker B: Okay. Yeah.
00:49:27.648 - 00:49:33.804, Speaker A: So you can go up, as you say, but it won't be a tight result when you go up a dimension anymore.
00:49:34.424 - 00:49:37.496, Speaker B: So you're kind of gaining extra redundancies every time.
00:49:37.560 - 00:49:45.604, Speaker A: Yeah. So it gives you a construction of things that are, of some things that are rigid. That's maybe interesting, but it doesn't give you the everything you want.
00:49:46.404 - 00:50:01.876, Speaker B: I guess you're gaining more connections in the hinges as you go up dimensions because a two dimensional hinge is just going to be one joint, but three dimensional one will be kind of two. So I guess it's the hinges again, stronger?
00:50:02.020 - 00:50:04.664, Speaker A: Sometimes, yeah.
00:50:05.884 - 00:50:08.064, Speaker B: There's just something I noticed.
00:50:09.204 - 00:50:42.626, Speaker A: Yes. So one thing I didn't say that I probably should have. So these bodies and hinges. You. You think so? Bodies are nice, full dimensional things, and hinges are d minus two dimensional co dimension, two things. But you can also think about what happens if you replace the bodies by maybe co dimension one by rods or things of this nature and try and say similar things. And so shinichi tanegaro has a nice paper on body rod barbed, all sorts of hinges and rods and bars.
00:50:42.626 - 00:51:00.174, Speaker A: And maybe Walter's interested in clamps. And there's various different things you can do that are additional to the ones I mentioned as well. So that it might be that you end up with something like a rod rather than a hinge or something when you do your process. I don't know, I'm just speculating wildly there.
00:51:03.594 - 00:52:03.392, Speaker C: Can I ask a question based on this discussion? So if I understand correctly, you're saying that if you have a generic body hinge framework in 2d, that's rigid, then it's rigid in higher dimensions because of this whole just being able to find spanning trees thing, because we're doubling edges over and over again. But, so, and maybe this is what you were just saying, but when you go to higher dimensions, what's your point? That the hinges become higher dimensional, like they may not be aligned. It could be like a two dimensional subspace or something like that. Do we have to take that into account? Or does it just work like if you take a body hinge framework so that the hinges are just lines in two d and then go up to higher dimensions? Do you have to generalize the hinges, or are you saying that that body hinge framework with the lines is going to be rigid?
00:52:03.528 - 00:52:22.728, Speaker B: So I'm saying with the. So you can't just take the framework and go to a higher dimension? It's a bit more complicated than that. We're looking at the. So what is described as a hinge will change when you go from two dimensions to three, and what's described as a body will change from two dimensions to three. So you need to change all that.
00:52:22.776 - 00:52:24.208, Speaker A: To take that into account.
00:52:24.376 - 00:52:32.064, Speaker C: Okay. So it's not. It's. Okay, I see. So it's not just the same framework. It's like the same framework with different hinges. Okay.
00:52:34.844 - 00:53:27.872, Speaker A: In the body framework definition in dimension d, a hinge, it has dimension d minus two. So it's like a pin in the plane or it's a line in r three. So I thought what Sean was saying was you take the same graph, g, and because this thing turns 2g into 5g, you can turn the combinatorial condition of having the spanning trees from dimension two to three, say, by moving from two g to five g. As we've talked about, it wasn't, it doesn't seem to be tight, but it does say, if you have free edge disjoint spanning trees in 2G, then the extra free copies of every edge allows you to find free more. So, you can say that if this graph realized as a body hinge frame 2D is rigid, then you could realize the same graph as a body hinge frame three d, and you would also be rigid. Or you could realize it in four d, and it would also be rigid. But as.
00:53:27.872 - 00:53:40.568, Speaker A: As I think you were worrying about, William, that the bodies would be d dimensional things, so they would change and the hinges would change to d minus one dimensional. So what did the geometric thing look like would be very different in the different dimensions.
00:53:40.696 - 00:53:57.334, Speaker C: Okay. Yeah, I guess. Okay, that makes more sense then, because I guess, combinatorially, what it's saying is that the higher dimensional hinges are taking into account everything that changes when you go to higher dimensions. So you just have to worry about the combinatorics still. Okay.
00:54:00.274 - 00:54:10.554, Speaker A: Yeah. But as we said, when you go up a dimension, you don't get everything just from this process. Understanding it in 2D is not enough to understand every dimension.
