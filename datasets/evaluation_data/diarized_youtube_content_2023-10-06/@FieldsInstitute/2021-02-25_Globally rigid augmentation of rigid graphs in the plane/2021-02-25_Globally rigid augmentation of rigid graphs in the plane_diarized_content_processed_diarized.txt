00:00:00.240 - 00:01:00.948, Speaker A: I start with the problem itself. So it's a metaproblem. We are given a rigid graph and we want to find an HTF of minimum size such that it augments original graph to a globally distributed graph. So here everything will be generic and the main part of the talk will be on two dimensional rigidity and global rigidity. So here, for example, this first figure shows a non rigid graph, and then this second one shows a rigid one which is not globally rigid because you can translate any of the three outer vertices to this line. And the third one is globally rigid. These two blue edges augments the previous one to a globally rigid graph.
00:01:00.948 - 00:02:22.994, Speaker A: And it's an optimal augmentation because you must connect all these three vertices, because if you don't connect one of them, then you can translate it again to the lines so it won't be globally rigid. Okay, so let's start with the problem in one dimension. So in this case everything is much more simple because in this case generic rigidity on the line is just the connectivity of the graph and the global rigidity is two connectivity. So our problem is to find two connected augmentation of a connected graph, which was already solved by Azverand and Tarjan in 1970. They considered the two connected components of the graph and this forms a tree like structure as shown by this figure. And so you must connect each leaf of these three. So this means that you need at least the number of leaves over two edges for the augmentation.
00:02:22.994 - 00:03:40.316, Speaker A: And if you have a vertex which cuts the graph to k components, then of course you need at least k minus one edges to connect all these components. And Esva and showed that if you take the maximum of these two values, the second one is in fact m values. So of all these values, then that will be the optimum number of edges. And a possible algorithm to find such an augmentation is the following. We add the edges connecting leaf components to our augmenting headset f one by one, in such a way that this maximum of these values for g plus f reduces by one in each step. And in such a way you will find an optimal augmenting asset. Okay, so let's turn to the two dimensional case.
00:03:40.316 - 00:04:39.280, Speaker A: In this case, rigidity is characterized by sparsity, by Pulitzer, Geiringer and Lamann's theorem. So a graph is called sparse. If each vertex detects on of cardinality, at least two, induces at most two x minus three edges, and it's called ti. The hoagraph induces two v minus three edges and the famous theorem and of polar. Geringen and Lamans says that a graph is generally rigid in the plane if and only if it has a spanning tight subgraph. And also the global rigidity was characterized in the frame by Jackson and the ordan. So for this we need the definition of redundant rigidity.
00:04:39.280 - 00:05:39.574, Speaker A: A graph is redundantly rigid if we can delete any edge, any single edge, in such a way that the rigidity of the graph is. And the CRM of Bill and Tibor says that the graph on at least four vertices is globally rigid only if it's redundantly rigid and three connected. So now for blame turns to be the following. We are given a rigid graph. So from now on, rigid means rigid in the plane and we want to find and minimal cardinality, etcetera, such that g plus f is redundantly rigid and three connected. And here this redundant rigidity augmentation and three connectivity augmentation are known things. So let's start with three connectivity.
00:05:39.574 - 00:06:54.504, Speaker A: So a rigid graph is always two connective. And Tibor showed that the two to three connectivity augmentation problem is quite similar to the two connectivity augmentation problem. The only difference is that if we want to augment the graph to three connected, there may happen that in a graph we have a cut pair uv, which separates another cut pair, u prime, v prime, in such a way that u is in one connected component of g minus uv and v prime is in the other in another connected component. And such a cotton pair is called v cut. But Biel and Tibor showed that in a rigid graph, no such v cap exists. So by this result, it follows that now the two to three connectivity augmentation problem is the same as the two connectivity augmentations problem. So again, the cut pairs and the three components form a three like structure.
00:06:54.504 - 00:08:00.354, Speaker A: And if we have a cut pair uv and it cuts the graph to k connected components, which we will call three fragments of the graph, then we need at least k minus one edges for the augmentation. And if we have t disjoint three fragments, then we need at least t over two edges for the augmentation. And the maximum of all these values will be enough. Moreover, this step second maximum is obtained by the leaves of these three. So a leaf of these three will be a minimal tree fragment, which we call a three end. And because of this tree like structure, they will be all disjoint. Okay, so now let's turn to the redundant rigidity augmentation problem.
00:08:00.354 - 00:09:31.594, Speaker A: When we want to augment the rigid graph to redundantly rigid this problem was considered first by Garcia and Taher in 2011. And they showed that it is Mp hard, but it is polynomial solvable, at least when the input graph is tied. So this Mp harness doesn't look too nice for us, but we will be able to handle it when we want to augment the graph to globally rigid. And the idea was the following. So if we are given a tile graph and we add an edge to this graph, then this edge will induce matrix circuit in this graph, and this matrix circuit in the original graph is just the minimal tight subgraph, inducing both u and v. Yeah, and when we add this edge uv, then the edges of this puv type subgraph will be the redundant edges. Okay, and let's denote by r e 01:00 et the edge set of g, which become redundant when we add this set of edges.
00:09:31.594 - 00:10:47.664, Speaker A: And the first Lamhole Gaussian Tejas showed that exactly the union of these tight sub graphs will become redundant when we add these edges. Okay, so, Gastriente has given algorithm, a polynomial algorithm than the input is tight. But their paper did not give a real characterization of min Max theorem for the optimum, so it was somehow hidden in the algorithm. But the characterization is. But with Andrew we did this characterization. So we used cotite sets for this. So, a set x will be cotton tight if it induces a tight subgraph of g, and it will be co tight if it's non empty and its complement is tight.
00:10:47.664 - 00:12:24.724, Speaker A: So, it's easy to see that each cotite set must be covered by the endpoints of the augmenting. Except, because if we add an edge, then as we have seen, it augments to redundantly rigid minimum tight subgraph containing u and v. But if a cotite set is not covered by any of the endpoints of the edges, then this cotite and all these tight sets will be disjoint from this cotite set, because its complement is tight, containing all the endpoints of the edges. Okay, and so our result is the following. If so, the minimum number of edges needed for the augmentation equals to the maximum the half of the cardinality of a family of pairwise disjoint cotite sets of G. And to prove this theorem, we use the result of T. Bauer who showed that the minimal cotite sets are almost always pairwise disjoint in G, except in the case when a single edge augments the graph to a redundantly rigid graph.
00:12:24.724 - 00:14:15.224, Speaker A: And after this result, we proved that the connected set on a transversal of them, of the minimal liquidite sets augments g to a redundantly rigid graph. And after this, we reduced this headset to a matching by the following lemma. So if we have three edges connecting this joint minimally cotite set, then we can substitute them by two edges, this two red one, or these two blue ones, in such a way that the same headset will become redundant after adding those edges. Okay, okay. So now let's turn to the global rigidity augmentation problem first with tight input, and let's denote by bg the maximum number of components of g minus uv. Overall cut pairs under the theorem is the following. The minimum cardinality of an et set which augments the g to globally rigid graph equals to the maximum of bg minus one and the maximum of the half of the cardinality of a family of pairwise disjoint cotite sets and three fragments of g.
00:14:15.224 - 00:15:33.530, Speaker A: So again, all cotite sets and all three fragments must be touched by an edge in the augmentation, because otherwise the result won't be three connected or won't be redundantly rigid. And so this theorem is the same as the redundant rigidity augmentation theorem when the graph is reconnected. So, we may assume that our graph or the input graph is not reconnected. And in this case, let's define the atoms of g as the minimum numbers, the family of all cotite sets and all three fragments of g. And so the minimum members of this family will be some striens and some minimal cotite sets of g, but maybe not all of them. Okay, and the atoms. So we showed that the atoms are always pairwise disjoint when the graph is not reconnected.
00:15:33.530 - 00:16:59.974, Speaker A: So just recall that the minimal cottage sets are not always, but almost always pairwise. This joint, the three ends, are always pairwise disjoint. And now we show that the atoms are all pairwise disjoint when the graph is not three connected. And again, we take a connected graph on the transversal of this family, and we have shown that this connected graph augment g to a globally rigid graph. And finally, by combining the ideas of the redundant rigidity augmentation algorithm and the global rigidity augmentation and the three connectivity augmentation algorithm, we have shown that this set can be reduced to the number of atoms over two, which will be the optimum value. So for this we used almost the same trick as for the redundant rigidity augmentation. So it's also true when these vertices are from atoms, that we can take two instead of the three of them.
00:16:59.974 - 00:18:48.174, Speaker A: And so to also get three connectivity augmentation, we need that in the three connectivity augmentation algorithm, are able to find the vertex y for which two edges are fixable in such a way that the result is still optimally augmentable to a three connected graph. Yeah, and now let's turn to the case when the input is rigid. So again, the redundant rigidity augmentation problem is np hard in this case. And in fact the whole thing started in Banff in 2012, and we went for a walk with finish and I was working at that time on an opposite problem which is still open. And the problem is that if we are given a rigid graph, find the net set f of minimum size such that g minus f is not rigid. And so yeah, I couldn't solve this problem, but Shinichi called my attention to this paper of Garcia and Tejev and they showed this mp hardness. And he said that maybe it will help to prove Mp hardness in other similar results.
00:18:48.174 - 00:20:17.434, Speaker A: But fortunately here this is not the case. So here we can solve the problem polynomiali and why we can do this is that here we can use a stronger property, which is the m connectivity. So the circuit of the rigidity metroid are usually called m circuits, and one can define an equivalence relation on the edges of g by saying that the two edges are equivalent if they are equal, or there is an amp circuit of j containing both of them. And the equivalence classes of this equivalence relation will be called m components of g, which will be all induced sub graphs of g. And if a graph has only one m component, then it is called m connected. And it's easy to see that if we have an m connected graph on at least four vertices, then it is always redundantly rigid. But the converse is not always true.
00:20:17.434 - 00:21:46.658, Speaker A: However, Bill and thibault show that if a graph g is three connected and redundantly rigid, then the graph g is also m connected, and which means that if the graph is globally rigid, then it is m connected. So in fact we need an m connected augmentation of our graph. Okay, and to find such an augmentation we define the m component hypergraph for a graph in which we take the same vertex that b as we have taken for g, and for each m component of g with vertex at x, we add this set x to the hypered set two x minus three times. And okay, so for hypergraphs, sparsity, tightness, rigidity and redundant rigidity can be defined similarly as for graph. So we call it sparse if it induces, if each vertex attacks in use is at most two x minus three hyper edges. And. Okay, so tightness can be defined similarly.
00:21:46.658 - 00:23:40.600, Speaker A: Call it rigid if it has a tight spanning subgraph and we call it redundantly rigid when deleting an edge obtains rigidity. And one can check that this hypergraph, this m component hypergraph, is always a tight hypergram. And next we proved that if g is rigid and g plus f is m connected, which should be the case in for or problem, then this etcetera means this hypergraph to a redundantly rigid hypergraph. And conversely, if an etcetera augments this hypergraph to a redundantly digit hypergraph, and we know that it also augments g to a three connected graph, then it will augment g also to redundantly rigid and in fact to an mcconnected graph. So we need an, we need to find an at set f which augment this, augments this hypergraph to a redundantly rigid hypergraph and the g to three connected graph. And in fact from this point the same method works as for the type case and we have almost the same CRM. So we only need to change one thing here that we need the cotite set.
00:23:40.600 - 00:25:06.894, Speaker A: So this hypergraph and why this method works. As for the type cases, that this redundant rigidity augmentation result also works for high power graphs. Moreover, it also works for any sparse graph. So also kl and sparse graphs, and also kr sparse hypergraphs. And in fact the whole method was for first graphs, almost the whole method. So we must, so for this, this m connectivity result, not this this result of index on and your dime, we need that l should be at most three over two times k. And the other difference is that when l is at most k, in that case the input graph is only connected and in that case we want to augment it to two connective.
00:25:06.894 - 00:27:24.424, Speaker A: But as we have seen before, the two connectivity and three connectivity augmentations are almost the same in this case. So for example, with this method, one can find the globally rigid augmentation of generic framework on the cylinder, because the rigidity is characterized by simple two two rigid graph. So, two two graphs, which has a two two tight spanning subgraph and global rigidity is characterized by redundant rigidity for that case and two connectivity. Okay, and another remark is that when we have no rigid input, then we do not have any result, any exact result, but we have at least a two approximation. In this case, we can augment first to a rigid graph and next to a globally rigid graph. But it's maybe the main open problem in this topic, what can we do with no rigid input, or at least for sparse input? And there is a closely related problem, which is the global rigidity pinning problem, where we want to pin down some vertices in such a way that the result is globally rigid, where this spinning down can be modeled by adding a complete sub graph, complete graph to this set of vertices. And this problem was considered before by George Feket and Tibori Ordin, who gave three augmentation algorithm for any input.
00:27:24.424 - 00:27:39.944, Speaker A: And then now our result implies an exact algorithm for this problem when the input is rigid graph. And that's all. So thank you for your attention.
00:27:42.844 - 00:27:52.890, Speaker B: So thank you, Chava, for the really nice talk. So. So once again, I will throw things.
00:27:52.962 - 00:27:53.574, Speaker A: Open.
00:27:55.674 - 00:28:27.474, Speaker B: To the audience for questions. I'm monitoring the chat. Or if you want to be brave, you can simply demute yourself and shout out your question. So I suppose so. If not, I guess I will ask, so, have you thought about doing anything in 3D?
00:28:29.614 - 00:28:45.334, Speaker A: So to do anything in 3D, we will need at least the characterization of rigidity in three d and maybe also for global rigidity. But.
00:28:48.114 - 00:28:51.374, Speaker B: If you allow yourself some linear algebra or something, I don't know.
00:28:53.954 - 00:30:14.380, Speaker A: I think it's not too combinator, not enough combinatoria for myself. But yeah, it's a good question, what can we do in 3D? So at least whether we can find an approximation algorithm for this problem. I mean, maybe, maybe if you, maybe if you restrict to a class of graphs where you do have. Yeah, so for example, that's true. So if you reduce yourself for body bar or body hinge graphs, then it's, in fact, it's the redundant rigidity augmentation which gives you the global rigidity augmentation. Because for body bar and body hinge graphs, it's enough to get d plus one, choose two d one, choose two redundant augmentation, and it will be always globally rigid in that sense. And from that result, it also follows that it's enough to add bars to a body hinge framework.
00:30:14.380 - 00:30:30.544, Speaker A: And you don't need to add the hinges. So it doesn't matter whether you add hinges or bars because of this lemma of gaussian health. Thanks for the nice talk. Very nice.
00:30:34.444 - 00:30:42.144, Speaker B: That's really nice. So, other questions? Okay, so in the chat there is the question, how are you defining the term atom?
00:30:46.084 - 00:31:31.594, Speaker A: Okay, I can go back maybe. So, yeah, so we just take a family with all the cotite sets and all the three fragments of g, and we take the minimal, the inclusion wise minimal members of this one. So these members will be, of course, three ends or minimal cotide sets because those are the minimal members of the two original families. But not all three ends and not all minimally quoted sets will be an atom.
00:31:34.454 - 00:31:37.758, Speaker B: Okay, good. So I see. Yeah, yeah.
00:31:37.806 - 00:31:56.774, Speaker A: So, and then you add in the general case. Then you take the minimum members of the family of all quota sets of the hypergraph and all three fragments of G.
00:32:01.234 - 00:32:09.054, Speaker B: Okay, great. So if you're done with that one, I see that bill has his hand up. Bill, I'm calling on you.
00:32:10.494 - 00:32:35.874, Speaker C: Thanks, Lois. So I don't understand the hyper edge construction. Could you give some idea why you add hyper edges to each m connected component and why you don't distinguish between three connected m connected components and ones that aren't three connected?
00:32:36.824 - 00:33:39.054, Speaker A: So it doesn't really matter whether you distinguish between them, but because you find. So because you want to augment g to three connected. And. Yeah, so why we add this number of edges to an unconnected component is that we want to get a hyper graph. And so we know that the original graph g was rigid. And so each. So then if you take a base in each m component then you can start with this and get a tight subgraph of g.
00:33:39.054 - 00:33:59.874, Speaker A: And so this means that if you just substitute. If each m component with this number of hyper edges, then the result will be also spares and also tight.
