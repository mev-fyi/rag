00:00:00.240 - 00:01:05.872, Speaker A: So we are interested in rigid graphs and we're interested in embeddings in some kind of space that I'm going to define. So already in the picture here you have one of the main motivations of these kind of problems. We have heard a lot of motivations during the thematic program and during this week. So structural bioinformatics is just one of them, where we have data expressing distances between atoms, between points, and we would like to reconstruct the 3d structure. So let me get to my definitions. I'm going to be interested in graphs that are generically rigid, which means that they admit a finite number of embeddings in a space that I'm going to define just later, modulo rotations and translations. And we are interested in generic rigidity in the sense that the lengths that are specified, the edge lengths that are specified are assumed to take generic values.
00:01:05.872 - 00:02:15.378, Speaker A: In this sense we are computing worst case number of embeddings, right? So genericity is going to maximize the number of embeddings of the graph. And we are also interested in minimally rigid graphs, which means that given a graph, if I would remove one of the edge constraints, the graph would become flexible. So when I talk of rigid graphs, I imply minimal generic rigid graph. Okay, I'm not going to say the whole thing, I'm going to say rigid graphs, but I'm focusing on this kind. So I assume that the Euclidean embeddings are clearly useful in applications and counting them is an important problem. We would like to have exact counts and we would also like to have general bounds, asymptotic bounds in terms of the dimension and the number of vertices in a graph. So this is, here is my definition.
00:02:15.378 - 00:04:02.624, Speaker A: A Euclidean, a euclidean embedding in general of any graph which is simple undirected but has weights on the edges, is a mapping of the vertices to some euclidean topology to real space that respects the edge length, which means that the distance of the embedded vertices should be equal to the lambda, where lambda is the weight of the edge for the edges that are given for the edges that are in the set e. Now it turns out that one of a class of very important tools that we have in bounding the number of embeddings is counting algebraic roots in system of polynomials. So counting the zeros of well constrained algebraic systems. But such bounds on algebraic roots usually come in counting, usually count complex roots, so they count roots in a complex closure in algebraic closure of the coefficient space. So we don't have very good bounds on real roots of polynomial systems and we don't have general bounds of this type that could be applied directly the way that I'm going to apply my complex bounds. So I would like to extend the notion of real euclidean embeddings to the complex case. So in the complex case, I assume that every vertex is mapped to a point in complex space of dimension d.
00:04:02.624 - 00:05:31.916, Speaker A: D is a parameter of the problem, and the embedded points should satisfy this kind of equation down here, which is an extension of this length equation that I had before. So I would like the sum of the squares of the difference of the coordinates to be equal to lambda squared. Okay? So in this case I would allow, of course, any, everything to be complex, so even the lambdas could be complex, right, because I'm going to consider a more general problem, which is the complex problem, and the count on complex solutions is going to give me an upper bound on the real solutions. It turns out that in most examples, the two counts coincide. So we do not have a lot of examples where the complex count and the real count are very far apart. Of course, it could be very well the case that the complex asymptotic bounds that we derive, one reason of the gap that they have from the lower bounds is due to the fact that we compute complex counts. But it's already an important tool, so it's already an important approach to be able to bound well the complex solutions of an algebraic system that is going to express the embeddings in this case.
00:05:31.916 - 00:06:43.304, Speaker A: So in order to go to an algebraic system, I'm going to consider the constraints that are given, and the constraints are essentially the edges. So we know that if the graph is rigid in the sense that we discussed, a consequence is that the edges must have a certain number equal to d times n, dimension times number of vertices minus b plus one. Choose two, which is the way to fix the coordinate frame. Okay, to fix, and to avoid rotations and translations, and the sub graphs must satisfy the same kind of formula with an upper bound with an inequality. We know that in the plane this kind of equation, the inequality over all subgraphs v prime, e prime, leads to the famous characterization of Laman graphs, which apparently was first derived by Paula Sergey. And in fact, I will later on focus on the planar case on d two, because it's much easier to explain. But our approach applies to any d.
00:06:43.304 - 00:07:47.944, Speaker A: So what is important here is to remember is that the edges characterizing a rigid graph are roughly do d times n. And this is going to lead to the first kind of bounds. So my first observation, when I get to counting a number of embeddings, which I call embedding number, is that the complex embeddings, the number of complex embeddings, upper bounds, the number of real euclidean embeddings. If I construct the simplest kind of system of equations, I would have one quadratic equation for every edge. So I would have an equation expressing the length of the edge which is of degree two in the unknown coordinates of the vertices. So here I'm assuming, as I said, the simplest formulation, unknowns are the coordinates of the vertices. Every equation, it's a polynomial of degree two expressing the given length.
00:07:47.944 - 00:08:37.940, Speaker A: How many do I have? I have roughly d times n. Each equation is degree two. So Bezou tells me that the product of the degrees, of the total degrees of all these polynomials, upper bounds the number of complex solutions in the corresponding projective space. Okay, but this is already an upper bound on the affine roots. So this is a very straightforward bound. I might even call it trivial. But it turns out that it was the state of the art until very recently and it is very loose because already in the plane, this gives me d, sorry, gives me two to the two n, which is four to the nth power.
00:08:37.940 - 00:09:23.560, Speaker A: Whereas the best lower bound in, in the plane, even for complex solutions, is 2.5 to the nth power, roughly. And in three space, which I would, the upper bound is eight to the nth power. I have about three to the nth power as a lower bound. So there is a huge gap between upper and lower bounds. There is also a gap from what I would get if I applied only Henneberg one steps to construct my graph. Henneberg one steps multiply the number of embeddings exactly by d in every step, so that in the plane would give two to the n, whereas the upper bound is, sorry, in the plane it would give me every step would multiply by d.
00:09:23.560 - 00:10:14.454, Speaker A: So I would get d to the n embeddings by applying only Henneberg one steps. D to the n is very much slower than two to the dn. Okay. Many people have looked at this problem and some very sophisticated math has been applied. In particular, determinantal varieties have been studied by Borsa and Strinu back in 2004, a very interesting paper. They employ some quite deep techniques from algebraic geometry and focusing on determinantal varieties because the varieties that we have here can be expressed by minors and determinants. So I gave you the simplest formulation of quadratic equations.
00:10:14.454 - 00:11:34.184, Speaker A: But we can have equivalent algebraic systems by considering the Kelley Menger matrices and their minus. But despite this heavy machinery, the upper bound was not significantly improved. So asymptotically it remained at two to the DN, which is basically the Bezou bound. Stevens and Theobald looked at low dimensions and they applied mixed volume, which is an algebraic bound for exploiting the structure and the sparseness of the algebraic system. But then again, they could not get anything asymptotically better than two to the DM. However, we managed to employ some combinatorial techniques and a different algebraic bound. But you'll see that the main contribution of our papers has been the combinatorial techniques, and we managed to get last year, in collaboration with Josef Siho and Vagelis Barjos is my PhD student, we managed to improve the upper bound only for cases for dimension larger than five.
00:11:34.184 - 00:12:40.996, Speaker A: But using those ideas, our latest paper, which, as I said, is not yet published, is going to get a significant improvement in every dimension that I'm going to show you right now. So, one thing that we use is the multi homogeneous Bezou bound, which of course is a very classic bound. And the interesting thing here is not that this, okay, it does capture some kind of structure, this homogeneous structure, but more importantly, it allows us to go to reduce the problem to a combinatorial problem, namely to counting orientations of the original graph. The original graph is a weighted graph with no orientation. It's undirected. So I'm going to forget the weights, I'm going to use the graph. So I'm going to use the edges that are given defining an undirected graph, and I'm going to count how many directed graphs can be defined on this graph.
00:12:40.996 - 00:13:31.344, Speaker A: So I'm going to discuss this later during my talk, okay, before I get to the math, let me go very fast. Sneak preview, go to page 18. So this is what we get. So the Bezu bound is the last line, the top line is the dimension. So in the plane, Bezou gives us four to the n. So this table shows you the base which is raised to the nth power. I repeat, n is the number of vertices.
00:13:31.344 - 00:14:09.388, Speaker A: So for Laman graphs, for instance, we know that four to the n is the upper bound derived by the Bezou's bound on the standard system, or by the other attempts that have been around for some time last year with Siho. As I said, we did not improve this case. But in this paper, I'm going to show you how we can get the ball to 3.776 to the nth. And the same technique applies to other dimensions. And we get 6.84 instead of eight to the nth power for 3d space and so on.
00:14:09.388 - 00:14:56.428, Speaker A: You see it here? Okay, so this is the topic of today's talk. Okay, so as I said, my first ingredient is going to be an algebraic count based on multi homogeneous Bezu bound, which is called M. Bezou bound. As, as the term suggests, we exploit the multi homogeneous structure of the equation. Of the equations. This means that if we split the variables into groups, we observe that the equations are homogeneous in every group of variables, in every subset of the variables. And then we can have bounds that are lower than the classic Bezou boundaries.
00:14:56.428 - 00:16:00.900, Speaker A: Okay, multi homogeneous Bezou bound counts the number of routes in a product of projective spaces depending on the structure one defines in these subsets of the variables. It is not as tight as mixed volume for sparse systems, but it lies somewhere in between Bezou and mixed volume. And it turns out that in our case it's pretty good because our equations are multi homogeneous. So let's see how I advance next page. Okay, so let's consider the length equations that I already mentioned, the simplest formulation. And let's see how I'm going to write them to take advantage of this multi homogeneous structure and reduce the problem to counting graph orientations. So I assume that every vertex v is embedded to some point with coordinates capital xv.
00:16:00.900 - 00:17:13.146, Speaker A: So capital xv is a vector of dimension d that encodes the yet unknown coordinates of my vertex. And the actual equations are here. So the equations are, as I said, it's this sum of squares of the difference. So if you, if you expand the equation that equals to lambda square, then one gets the sum of the coordinates squared for the, for the first vertex u plus the sum of the coordinates squared for the second vertex minus two times the inner product. Okay, so this is inner product of the vectors capital x u, capital xv. Now here I introduce new variables, Su sv, that are placeholders for the sum of squares of the coordinates. This is a very powerful technique when once, when one wants to make manifest the structure of the equation.
00:17:13.146 - 00:18:06.820, Speaker A: And mathematically you can think of it as removing some solutions at infinity. In fact, this removes solutions at toric infinity. And it works very well for decreasing the mixed volume. This is a trick that actually we discussed with Stevenson Theobald and they applied it in getting very tight mixed volumes for counting graph embeddings. Okay, so this one can see it as a variable substitution. One substitutes this sum of squares by a new variable. And now the length equations, which are the heavier equations, are bilinear in the xu coordinates and the xv coordinates.
00:18:06.820 - 00:18:57.930, Speaker A: So, in the xu variables and the xv variables. So, in applying my multi homogeneous technique, I'm splitting my variables into subsets. Every subsets corresponds to the variables expressing one vertex embedding. And the equations now are linear in every such group of variables. Okay, now, it turns out that the edges of a certain clique kd are fixed. They do not take part in the, in changing the embeddings. So, I'm going to consider the graph edges without the edges of the fixed clique.
00:18:57.930 - 00:20:36.338, Speaker A: And the multi homogeneous Bezou theory tells me that in order to count roots in this algebraic system that I've written up here, I need to create a new polynomial with some placeholder variables that I call y, because they correspond to the capital x variables, and the coefficients of this new polynomial correspond to the degrees of the capital x variables encountered in the original system. So, because this capital x has degree two, I use two as a coefficient, and because the capital x variables here have degree total degree one per set of variables, I'm using them linearly. And the theory tells me, the embezzle theorem tells me that I have to consider this polynomial, which I simplify in the right hand side. And now, the coefficient in this polynomial of the product of powers y one to the d plus one times yn to the d plus one is an upper bound on the number of roots, the system. So, this is the m bezoo bound for the original system. And in fact, I consider the coefficient of the whole expression, which is the coefficient of this product in the product of products times a power of two. Okay, because I've simplified this writing.
00:20:36.338 - 00:22:49.958, Speaker A: So here I'm stating the mbezzoo theorem applied to my system of equations and what we observed somehow, okay, and what we observed in the paper with Joseph Sicho, is that if we construct this system and we look at the coefficient, we can simplify a little bit of discussion and look at this coefficient in this kind of polynomial. Then this coefficient is going to give me the number of orientations in the graph, in the input graph, where I require that every vertex outside this fixed clique has now degree d. So, I count how many ways, in how many ways can I impose a directed graph on top of my given undirected graph such that the out degree of every vertex is exactly d? The number of such orientations, I call them graph orientations. The number of ways of creating, creating directed graphs with this constraint equals the solutions of those of that system, which corresponds to the number of embeddings. So I'm reducing the number of embeddings to counting graph orientations. And why graph orientations equal this multi homogeneous bound? Because I'm considering the way that this coefficient is defined inside the expansion of this expression, and I observe that every set of variables capital y that corresponds. So, okay, yeah, every set of variables capital y that corresponds to one vertex embedded with coordinates capital x contributes to the monomial that I'm looking at only once for every edge.
00:22:49.958 - 00:23:38.480, Speaker A: And because I have d of those, that's why I need out degree d. And yeah, every such set of variables for one vertex contributes a total of d times exactly d times. Okay, that gives me the constraint that every vertex must have all the grid d in the orientation. Okay, so this is the crucial step to get to a combinatorial problem, counting orientations. It turns out that in the paper with Josef Sicho we did not manage to fully exploit it to get much better upper bounds on the number of embeddings. As I said, we got an improvement only for d larger or equal to five. And actually we had one more ingredient in that proof.
00:23:38.480 - 00:24:14.912, Speaker A: We looked at permanence matrix, permanence whose value is connected to the multi homogeneous bezu bound. In the new version, we don't need permanence, but we need a more refined view in the combinatorics in counting orientations. So let's see what is the version. So this is basically a theorem. I call it a lima, because for today the main result is the next one. And so this is how we apply that theorem to our case. So I'm going to start with a rigid graph g.
00:24:14.912 - 00:25:08.902, Speaker A: I'm going to consider any fixed clique. The choice of the fixed clique will affect the bound at the end. For Laman graphs, this clique is just an edge that I have to fix from the origin to the first vertex, let's say. And then I define a new graph g prime. So g prime contains the same vertices but fewer edges. I have to delete the edges of the fixed clique and I'm going to count the orientations of the new graph which as I said, have constraints on the out degree, namely that every vertex that remains in the graph besides the fixed clique has out degree exactly d. The out degree of the fixed vertices must be zero.
00:25:08.902 - 00:25:59.060, Speaker A: So fixed vertices are these defect vertices in the fixed clique. And by the previous lemma, this is connected to the embedding number by this relationship. So if I manage to bound the number of orientations capital b, I will multiply by an exponential t two to the n minus d and I will have an upper bound on the appendix. Okay, so the question here is how to bound the number of orientations capital b. Okay, for a given choice of a fixed clique. So this is an example. I take the desert graph, I fix the edge that is dashed and I count the number of orientations with the constraints that I mentioned and there are exactly two such orientations.
00:25:59.060 - 00:27:05.324, Speaker A: So b equals two. Therefore the upper bound is two times the power of two gets 32 where we know that actually the number of real and complex is 24. So I'm getting upper bounds with this approach. Let's see how we, I can give you in five minutes a gist of the method focused on Laman graphs. So when I throw out this fixed clique I'm going to end up with a graph that is missing some edges and I'm going to define an elimination process where I'm going to reduce the number of vertices and while I'm eliminating vertices I'm going to be counting the orientations that are defined based on that vertex. So at the end of the process I will have the total number of orientations. Intuitively I have a bound on the orientations that depend on that vertex.
00:27:05.324 - 00:28:09.200, Speaker A: I delete it and then I have a bound on the orientations of the remaining graph and I take the product. So inductively the product of these partial bounds is a bound on the total number of orientations of the original graph. So these steps are steps in the elimination process that is going to create what I call pseudo graphs. The reason that I have to deal with pseudographs is that sometimes we delete a vertex and what happens to each edge when I have an edge and only one vertex is deleted, the edge remains as a hanging edge. I call it hanging edge if it has only one vertex and no second vertex. The hanging edges are necessarily directed outward from the remaining vertex of theirs. So the pseudograph is going to contain vertices, is going to contain standard edges which I call normal, defined by two vertices.
00:28:09.200 - 00:28:47.454, Speaker A: And it's going to contain hanging edges. It must always be connected. And I can consider for every vertex its total degree, which is standard edges and hanging edges its hanging degree. And of course the normal degree is the difference of the two or otherwise stated. The total degree is the sum of normal degree and hanging degree. So for every vertex I have to remember its total degree p and its hanging degree h. So I have this pair that characterizes vertices.
00:28:47.454 - 00:29:51.584, Speaker A: This is an example. So if I start with this graph and I remove the fixed edge, I end up with a pseudo graph which is here. And I have to apply this elimination process to this pseudograph. And the elimination process, as I said is going to count orientations gradually until it gets to a base case. So it's like an induction that gets to a base case and the base case is going to be a tree that admits zero or one orientations basically and constrained orientations, right orientations where graphs have vertices have a degree d or a degree two here. Okay, so this is an example how we define a pseudo graph and we wish to count the orientations. I also call them valid orientations, those that satisfy this, this constraint on the out degrees.
00:29:51.584 - 00:31:02.494, Speaker A: Okay, and this slide gets, now I have a few slides, three or four I think on the technical aspects of this elimination process that removes one vertex at a time. In some cases I am allowed to remove l vertices if they form a path and they are of the proper degree. So this is the case of three comma, one vertices, total degree three, hanging degree one. In every case when I eliminate l vertices I also delete two l edges from that adjacent to that vertex. The deleted edges are the edges that I decided to orient outwards from the remote vertex. That's why this deletion step is like counting orientations, because it's like fixing the orientation for these two outward vertices. And then if I fix it I delete that, that vertex and I count essentially in how many ways can I fix the orientations around this vertex.
00:31:02.494 - 00:31:41.030, Speaker A: I remember this count, I forget the edge and then I go to the smaller the subgraph, to the new pseudo graph. Okay, this is the idea. This, this, the number of orientations that I have during a specific step is called the cost of the step. So the product of costs bounce the orientations. Capital b that I need. This is the base case that I mentioned where I end up with a tree. And then we, we have lemmas that derive bounce on the cost for a single vertex elimination, the cost of a path elimination, which is always two.
00:31:41.030 - 00:32:43.384, Speaker A: Of course I'm not going to go into any detail. I have some examples here but maybe I should wrap up to get some time of questions. Maybe I'll use a couple of minutes more if nobody has any question right now. So here I give an example of eliminating a vertex that has three normal edges and no hanging edges. Hence of degree three comma zero. And when I delete this vertex, as I said, I delete two edges because two edges are fixed with orientation outside this vertex and there remains one edge. So I have three choices of which edge remains therefore I have to take into account these three generated pseudo graphs, the edges in these cases, in every case they are hanging and basically this is the cost of this elimination step.
00:32:43.384 - 00:33:43.308, Speaker A: Okay, this is the number of orientations I'm getting at this deletion step. I have also the example of three one vertex where this vertex already has a hanging edge and another two normal edges. It has two possible outcomes after deletion of the vertex and this is obtained by our formula which is this binomial coefficient. And I also give you an example of a path elimination. As I said, we eliminate paths of consecutive three one vertices and they always lead to two possible pseudo graphs that I have to treat in the next step. So here you may say that this gives me a disconnected graph, but I'm only focusing on a part of the graph. I assume that the graph remains connected, but there is a lot of vertices and edges that I do not see here.
00:33:43.308 - 00:34:32.510, Speaker A: So I'm focusing on the eliminated vertices. So I'm getting close to my conclusion. This is the table I showed you before. The upper bounds are always of the form b to the power of n where n is the number of vertices in the rigid graph and b must be as small as possible of course. So maybe we should read the table bottom upwards. Bezou had two to the d as a basis. Our first approach slightly improved it actually improved it from d larger or equal to five.
00:34:32.510 - 00:35:21.406, Speaker A: But the new combinatorial technique that I just outlined manages to improve the Bezu bond for the first time below. Two to the d, everything to the nth. And these are the numbers of course it applies to any dimension and it goes on, this table goes on. We have a paper on archive that has much more details of course, and a bigger table. It's interesting to notice that people for the past few years have been in this topic for a few decades now. So it seems that topics that started like five or six years ago are kind of new to me. Spherical embeddings turn out to be an area of study and we can apply our methods to spherical embeddings and we get the same bounds.
00:35:21.406 - 00:36:16.174, Speaker A: Okay, so I think this is also very interesting. Let me try to conclude. These are the papers I mentioned. The one with Josef was published in JAAC last year. The current one is submitted to DCG and as I said there is an archived version from last year and we are working with master's student Jarados Zamos here to further improve this bound. We already have some results but I did not want to get to very technical details I'll conclude with pictures of some further applications, because I think this topic is very exciting, because it combines math and very useful real world problems. Thank you for your attention.
00:36:16.174 - 00:36:17.794, Speaker A: Any questions are welcome.
00:36:19.494 - 00:36:36.042, Speaker B: Thank you, Yanis, for a really interesting talk. And like, a very nice results. So I can see, actually, that Walter already has his hand up. So, Walter, there are overlap, at least.
00:36:36.098 - 00:37:54.570, Speaker C: In the techniques of directed graphs, with two parts of the literature, one of which is assured decompositions of pinned graphs, which comes from mechanical engineering. And there's some literature, some good characterizations in the plane, and some extent other literature in higher dimensions. The other place where we routinely use these two directed or three directed or whatever graphs is whenever we're computing a pure condition, each of the directions produces a term in the, essentially the Laplace decomposition of the matrix. So that's two pieces of literature that would be worth at least comparing to see what is available or not. One of the nice things is that maple and sage have built in algorithms for finding the directed graph for two direction or three direction graphs for a given thing. And two different set of directions are equivalent by reversing a directed cycle. So you can look a little at that literature.
00:37:54.570 - 00:38:03.378, Speaker C: If you want, you can contact me to see a bit more, but it's just that it is being used in other parts of rigidity theory.
00:38:03.546 - 00:38:23.878, Speaker A: Yes, yes. Thank you very much. I will contact you because I took some notes, but maybe not very complete. Yeah, of course it's used. We already use some lemmas from graph theory, such as the block cut tree. It's also reminiscent to some. Yes, yes.
00:38:23.878 - 00:38:31.862, Speaker A: Some work that I have seen. I forget the name, but you're right. I'm going to look at that. Thank you very much.
00:38:31.958 - 00:39:05.966, Speaker C: Just the origin of assure graphs was about 1910. A russian mechanical engineer trying to decompose his mechanism into small components, each of which would have an algebraic equation. And he could handle the small ones if he could break the thing up. So that became sequential. Solve this algebra, solve this algebra. And then you could describe the paths of the mechanism so that the name assure comes from a russian mechanical engineer.
00:39:06.150 - 00:39:07.834, Speaker A: Okay, good, good.
00:39:08.294 - 00:39:16.794, Speaker B: Okay, so the next question. So Bill has his hand up. Bill.
00:39:17.134 - 00:39:33.634, Speaker D: Thanks, Lewis. Yeah, so I thank you for the talk. I thought it was, I also thought it was really good. So I have maybe a silly question, and it's what you do when D is greater or equal to three, because you seem to want to start off with a complete graph.
00:39:35.934 - 00:39:58.158, Speaker A: So from. From the given rigid graph, we fix a clique, KD, which is then removed from consideration. And then the same techniques carry on in arbitrary dimension. But of course, we have to replace two by D. So, for instance, we are looking at.
00:39:58.326 - 00:40:01.874, Speaker D: Sorry, what happens if your original graph doesn't have a clay?
00:40:03.254 - 00:40:24.022, Speaker A: Yes. Okay, that's a good question. So we discussed this in the paper. Yes. It turns out that in almost all interesting cases, there is a click and we can find it. But indeed it's something. Yes.
00:40:24.022 - 00:40:46.014, Speaker A: It's something that we have to take care of at the beginning of the. Of the process. Yes. I did not discuss it. It's a bit technical. As I said, we argue about it in the paper and we give reference to other works that in most or all known cases, this works. But it's one of the assumptions.
00:40:47.154 - 00:40:48.614, Speaker D: Okay, thank you.
00:40:50.954 - 00:40:55.054, Speaker B: Okay, so other questions.
00:40:57.594 - 00:41:16.054, Speaker A: Let me add one thing that we discussed before Pebble Games is. What I wanted to say is a very similar approach. It's reminiscent. So we get inspired by public games. We referenced the paper. I did not mention it. Yes.
00:41:16.994 - 00:41:42.364, Speaker B: Okay, that's very cool. So I was also going to ask if. If somehow, like. So you start with some. Some given mostly out degree de orientation. And then I guess a way of moving between them is somehow doing cycle reversals. Did you try cycle reversals? Can you get any combinatorial results out of them?
00:41:42.944 - 00:42:15.332, Speaker A: That's a good question. We played with cycle reversals. When we're experimenting with that in order to arrive to that formulation, I don't see any immediate connection the way it's now. But we did consider it when we're experimenting different things. But it might give. I don't know if it could give some improvement. By the way, I'm sure that the method can be improved because it's kind of fresh.
00:42:15.332 - 00:42:26.384, Speaker A: And I'm sure we have not explored it fully. I don't know if cycle reversals is the way to go, but it might be worth to examine.
00:42:27.124 - 00:42:34.224, Speaker B: So I see that Chava unmuted himself and Walter has his hand up. So I'll let you guys discuss.
00:42:35.204 - 00:43:05.684, Speaker C: Just the cycle reversals can be used to. You can decompose the graph into strongly connected components, given one of the orientations. And that sort of at least gives you. Separates it up into a nice sort of lattice. And you can do the components one at a time, which probably some can give you some kind of reduction in bound because you probably have a bound for each component.
