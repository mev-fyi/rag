00:00:00.240 - 00:00:57.246, Speaker A: The title is globally optimal solution to inverse kinematics of a serial manipulator with seven degrees of freedom. That's the outline. So I'll start with first the inverse kinematics problem, and I will reformulate it as a pop. What I call a pop is a polynomial optimization problem. So, an optimization problem when all the data are polynomials. And then in second part, I will explain to you briefly how this pop can be solved numerically with the so called laser hierarchy moment sum of squares hierarchy. And I will not explain the details of it, but just application of it and its limitation, and limitation in terms of the size of the problems can be, it can solve.
00:00:57.246 - 00:01:54.554, Speaker A: And then I will show you how this original pop, formulated in the first part, can be reduced using compulsory algebra to a smaller degree pop for which the lake can be applied much more efficiently. And I will conclude with the parts and experiments on the serial manipulator. So feel free to interrupt me during the talk if you have questions, and you can also post your questions on the chat. I think Kaia agreed nicely to let me know if there is a question posted on the chat. So don't hesitate to interrupt and ask. So first, how can we formulate inverse kinematics as the polynomial optimization problem? So first, what is inverse kinematics? So that's a problem in robotics. Problem in robotics, which consists of finding robot control parameters.
00:01:54.554 - 00:03:17.500, Speaker A: Typically, it will be angles of joints that bring it into a desired position under constraints, under configuration constraints, collisions, limitations in the case of robotic arms, robotic manipulators with six degrees of freedom. Solving the inverse kinematics problem boils down to finding the finitely many real solutions of a system of polynomial equations. As soon as we have more than six degrees of freedom, there are infinitely many solutions to this inverse problem. And this can be formulated as an optimization problem over the solution set of finitely many polynomial equations. That's an algebraic variety, and this is what we call the polynomial optimization problem for short. So, a little bit more into the formulas. So, the problem of forward kinematics can be formulated as follows, as a matrix product.
00:03:17.500 - 00:04:15.886, Speaker A: So each of these matrices correspond to, each of them correspond to one degree of freedom. And so these are four by four matrices containing a three dimensional position vector and rotation matrix. And these are in red, seven angles corresponding to the joint angles of the robotic manipulator. And the action, the serial action of this manipulator can be modeled by a matrix product matrix of seven products of seven matrices. And so the inverse problem consists of having this matrix here from end to base this transformation matrix being given. So we want the robot to have a given configuration, a given position, and given rotation, and we want to find the angles. So these seven angles.
00:04:15.886 - 00:05:32.394, Speaker A: So if each angle is parameterized by its cosine and sine, this form can be written as a system of twelve polynomial equations of degree seven in 14 variables, which is quite difficult to solve in full generality. So this degree seven can be reduced to four, just by observing that this matrix product can be rewritten like that. Here I had my matrix m, and I can multiply from the left and the right by inverses of these transformation matrices. And these are also transformation matrices, which means that now we have three angles on the left, four angles on the right, and the equations are of degree up to four. As I said, if there are seven degrees of freedom, seven angles, there are infinitely many solutions. And among all these solutions, continuum of solutions, we may want to minimize some objective function. And here it will be a weighted combination of differences between the angles to be found and desired angles, denoted here by theta, hat.
00:05:32.394 - 00:06:26.594, Speaker A: And of course, this is subject to physical constraints on the position of the various joints of the robots. These are subject to bound constraints. So, these are numbers which are given constraints on the angles, so that inverse kinematics eventually can be written as a polynomial optimization problem. As soon as the angles are written in cosine and sine form, we have c the cosines and s the sines, both vectors of dimension seven. So, 14 real unknowns, and so, this is the objective function, and this is the kinematic constraints. So these are these twelve polynomials up to four in 14 variables. And these are just the trigonometric relations linking the cosines and the sines.
00:06:26.594 - 00:07:47.964, Speaker A: The bound constraints can be formulated as linear constraints on the cosines and the sines, as follows. So you see that we're interested in solving this problem, this polynomial optimization problem globally. So, 14 real unknowns and equations up to four. So for that we can use technology that we developed partly here in Toulouse with my colleague Jean Bernard Lacer, that's called by some people now the Lasser hierarchy, and it's also called the moment sum of squares hierarchy. It relies on the duality between the cone of positive polynomials and the cone of moments and their approximation using sum of squares, polynomial sum of squares and semidefinite relaxation. So, instead of solving non linear polynomial optimization problem, we solve the family or hierarchy of convex semidefinite relaxations of increasing size. These relaxations are indexed by a so called relaxation order, denoted r here, until some rank conditions which are done on the numerical solution obtained by semidaf in a programming solver.
00:07:47.964 - 00:08:44.566, Speaker A: This rank condition certified global optimality. So all of that has been developed in the early two thousands. So almost 20 years ago. And we developed into lose also an interface which is available in Matlab that allows you, given a pop, to construct automatically this semi definite relaxation and call third party external semi definite solver the one of your choice. Then, as a post processing step, these rank conditions are satisfied and numerical linear algebra is used to extract the global optimizers out from the solution of the semidephony problem. So for us, this is mathematical technology. And so it has been applied to many problems in many fields.
00:08:44.566 - 00:10:11.844, Speaker A: And while this is a recent account of this story from tools perspective, so it's a book that has been published last year with two colleagues here in Toulouse, Milan Cordin and Jean Bernard Lacerre. And there is currently also running european project with I think 13, maybe 14 PhD students working on the topic of polynomial optimization. So, you may have a look at this webpage if you are interested in these topics. So, the main drawback of this moment, sum of squares laser hierarchy, is that the size of the semidefin program, they grow quite fast. So they grow in the order of r to the n, when r is a relaxation order, so it's a polynomial in r, but the exponent is a number of variables of the, of the pop. So we know based on the experiments, numerical experiments, that the global optimality, this rank condition will be satisfied for small values of r, typically. Yet the exponent here being equal to 14, and the degree of the problem being four, makes it quite a challenge to solve the semi definite relaxation order three.
00:10:11.844 - 00:11:11.428, Speaker A: It involves almost 40,000 variables and full, dense semi definite blocks of size, more than 3000. So, on a standard laptop computer, this is too large a problem. And hence, for the problem of seven degrees of freedom, inverse kinematics, pop. Applying readily the laser hierarchy, does not, not always solve the problem. So that what I will present next is the systematic reduction of the problem, which is not used, which is not using the equations of kinematics or mechanics, but which uses computer algebra. So, that's the main result that we have. It's a computational result.
00:11:11.428 - 00:11:55.274, Speaker A: It says that the ideal, which is generated by the degree four kinematic polynomial that I denoted pj and the degree two trigonometric polynomials, qi. So the same idea can be actually generated by a set of degree two polynomials. So I will not display this degree two polynomials. They are messy and they do not come from the physics, but they come from linear algebra. And you see the proof is really computational. We choose a generic random instance of the several manipulator on the poles. Then we generate a grobner basis that I did before of the ideal spine by the polynomials pj and qi.
00:11:55.274 - 00:12:53.064, Speaker A: And then from the polynomials in the basis, I take only polynomials of degree two, not more than two. And I generate grobner basis for the ideal generated by this polynomial. This to quadratic polynomial in b four. And then using again linear algebra, we just verify computationally that the ideal generated by b two and b four is the same. So since we do that generically with probability one, we prove that the ideals generated by these new polynomials is the same as the ideal generated by the former ones. So this is the maple script that we used for that purpose. So it's rather elementary, uses basic maple computer algebra commands.
00:12:53.064 - 00:13:41.230, Speaker A: And this is the experimental validation of this technique. So we use the very standard Kuka manipulator at seven degrees of freedom. It's used in labs, there are plenty of them in the robotics group in Prague. And so it's not really a challenge to solve the inverse kinematics problem for this robot. Actually, the robot has been designed so that inverse kinematics can be solved easily by appropriate methods. So we do not claim that solving the inverse kinematics problem for that is really an achievement. However, for us, this was used as just validation of our approach.
00:13:41.230 - 00:14:45.728, Speaker A: And we hope that with the same approach and the same reduction process will be able to solve more challenging kinematics problem. Inverse kinematics problem. So we observed experimentally that the semi definite relaxation in the hierarchy, this relaxation order three equals three, solves, almost always globally, the reduced polynomial optimization problem. So almost for almost all instances. So as I said, the original relaxation before reduction, has a size which was just too large for standard semi definite solvers. The reduced pup with the relaxation, the corresponding relaxation of other three, has much more manageable size. You see, it has a little bit more than 3000 variables, and the size of the dense, the largest dense semi definite block is 120.
00:14:45.728 - 00:15:44.364, Speaker A: So it can be solved routinely on a computer in a matter of a few seconds on the standard laptop. So this is the graphical illustration of the non reduced pop and the reduced pop solved by the hierarchy. So you see here in red, the red dots corresponds to a position in space that we want the manipulator to take. And in red, it means that the original could not be solved by the second relaxation in the hierarchy. So we have a failure rate which is rather high, one third, almost. In blue, you have positions that cannot be reached by the manipulator. In green, you have positions that can be reached.
00:15:44.364 - 00:17:03.024, Speaker A: Here, you see, with a reduced pop, we reduced the degree of the polynomial optimization problem, but we also reduced the rate of failure of the approach, in the sense that we could solve these third relaxations now, and we fail to solve them to global optimality only in 1.2%, so much more reasonable failure rate than before. And this is the execution time. So with degree four polynomials, just. Well, that's the. Sorry. The modeling time and the solving time using our interface doctor poly was of the order of 20 seconds, whereas after the reduction step, which takes a few seconds, we, we can solve the problem much faster without sacrificing for the error, and as I said, improving dramatically the rate of failure of the approach.
00:17:03.024 - 00:17:56.144, Speaker A: So in these 1.2% of cases that failed, it means that the third relaxation in the hierarchy could not certify global optimality. So then, in principle, then we have to go to the fourth relaxation. But as I said already, this would be, even for the reduced problem, too large a problem to be solved on the sandalapto. So this is a profile for feasible, infeasible and failed poses the profile of modeling and semi definite solving execution time. So you see that it's a few seconds, and this is the reduction time, this grobner basis computation, you see also that's routinely done in a few seconds. And that's about it.
00:17:56.144 - 00:18:55.054, Speaker A: So this slide is here just as a summary. So, contribution was first, the formulation of inverse kinemetric as a degree four pop. So this was known before. But what is not known is the reduction, the systematic reduction, using computer algebra, of this very problem into a degree two pop. So that whereas the third relaxation in the momentum of squares hierarchy could not solve many instances of the original degree four pops, this is not the case anymore for degree two pop. And this has been experimentally validated with semidefinite programming in the moment squares hierarchy. So, things that I did not cover are possible extensions in principle, for the poses for which there is no solution.
00:18:55.054 - 00:19:54.294, Speaker A: We can use convex duality and semi definite duality to certify numerically that the pose is infeasible. So this is something that can be done and also probably much more challenging. We could maybe exploit the very specific structure of the population to prove, maybe under some assumptions and some constraints on the problem, that the second relaxation in the hierarchy is always globally optimal, it's always exact. So with that, I would like to thank you for your attention. So the research work reported in my talk can also be found in written format here. Also, the computer experiments and the globtipoli and maple code can be found here.
