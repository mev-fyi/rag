00:00:00.160 - 00:00:42.176, Speaker A: Today we're going to start global rigidity. So I know in the first lecture or two I did define global rigidity, but I'll remind you of that, and then we're going to start working on generic global rigidity. So basically, the aim of the next three or four lectures is to build up an analogous result to the polycheck, Geringer Leman firm. So remember, for rigidity, we showed that generically in two dimensions, rigidity was equivalent to this graph counting condition. And we showed then in free and higher dimensions. It's not true in general, but we could understand something in some special cases. So we're going to have a similar sort of procedure for global rigidity, but roughly everything gets harder.
00:00:42.176 - 00:01:25.936, Speaker A: So let's go, let's just get started. So recall that a framework GP is globally rigid in d dimensional space. If every other framework that you can realize that graph as. So you realize the same graph G with a different map q, but has to be equivalent, which equivalent means the edge lengths are the same in GP as in GQ. So GP is globally rigid if every such GQ is actually just a congruence of P. So the distance between any pair of vertices is the same in both. So not only are the edge lengths the same, but actually the distances between any pair of vertices is also true.
00:01:25.936 - 00:02:15.638, Speaker A: So every equivalent framework should be congruent to you, but it's every equivalent framework, GQ, in the same dimension that GP lives in. Okay, so this is a generalization of or it's a harder property to be satisfied than rigidity, because in rigidity we cared about locally equivalent supplied congruence. So there you had to have a continuous deformation, or that moved one framework to the other. Here we can sort of have discrete jumps, so you can pick up part of your framework and move it around. So the sort of very simple example is in two dimensional space, this one we know is rigid. But it's easy to see that if you just reflect through the diagonal, then you can draw a second realization of the same graph. And so this shows it's not globally rigid.
00:02:15.638 - 00:02:43.064, Speaker A: If I'd drawn these a bit more carefully, they would have been equivalent. But obviously, this distance and this distance difference. So this is a non rigid, but non globally rigid framework in two dimensions. And so we want to, as I say, we want to understand global rigidity generically, and we want to show it's a property of the graph. And what that property of the graph is, it turns out we can do this fully in one and two dimensions. And so we'll get there. One dimension.
00:02:43.064 - 00:03:40.488, Speaker A: We might get to the end of today's lecture, but two dimensions will build up over several lectures. And so the main purpose of today is to prove that there are two natural, necessary conditions that every globally rigid generic framework, whatever dimension you live in, must satisfy. And so these are a connectivity condition and a redundancy condition. So the first one's relatively straightforward. So let's just jump straight to that. So let me remind you, in case anyone is not so comfortable with the graph theory, so remember a graph is called k connected, so k is just some natural number, it's k connected if g minus s is connected for any subset of vertices with at most k minus one elements in it. So you form the graph g minus s by deleting all the vertices in the set s and every edge is incident to at least one vertex and s gets deleted as well.
00:03:40.488 - 00:04:06.664, Speaker A: If no matter how you choose at most k minus one vertices, you still remain connected. Then the graph was k connected. And there's also a trivial condition. So for example, the complete graph on four vertices. For technical reasons you don't think of it as a four connected graph because, I mean, if you take four away, then there's nothing left. So you have to wonder a bit. And what we say is that you need to satisfy k connected, you need to satisfy this.
00:04:06.664 - 00:04:41.362, Speaker A: So k four, this is a free connected graph. It's also a two connected one connected. There's nothing saying the k has to be exactly the right number, but this is not four connected, not five or six or anything higher either. Okay, so why is this, this connectivity necessary? Well, the k is going to depend on the dimension, but otherwise it's going to be pretty easy to see. So here's the, the lemma. Take a generically globally rigid framework in d dimensional space. You don't really need the generic in this result actually.
00:04:41.362 - 00:05:30.778, Speaker A: So you take a globally rigid framework in RD. Then the claim is that the graph must be d plus one connected. Okay, so as an example, here's a graph that in two reals which is not free connected, so this has a two vertex separation given by the two that were colored blue that I've just made red. So that two vertex separation, if you delete those two vertices, you have these two left and these two, and all the edges, all the other edges are incident to one of the two red vertices in the top picture, so they disappear. And obviously this has two connected components, so it's not connected. And what you see from a geometric perspective is that if you take the line through those two vertices, this dotted line through the two red vertices. Then it's easy to see.
00:05:30.778 - 00:06:16.256, Speaker A: Maybe you just, you fix these two and you reflect the other two over through that, that line and you find a second equivalent but non congruent realization. So if the so since this graph was not free connected, we can easily see the equivalent but non congruent realization which shows the graph is not globally rigid. And in fact, what I've just said there is basically the proof of dilemma in general. So let's just go through it anyway. So if our graph is not d plus one connected, then we have a vertex separating set s of size at most d. And just for simplicity argument, assume that s has size d. If it doesn't, just throw in a vertex that's not in the separating set in and do the same thing.
00:06:16.256 - 00:06:53.074, Speaker A: Or you can do it even more, wild reflections et cetera to it to find the non equivalent, the equivalent but non congruent realizations. So I have this separating set of size at most d. And when we're saying it's equal to d, delete the vertices in the separating set and all are incident edges. We know the graph was not d plus one connected and this was a separating set s. So we know the graph we get g minus s is not connected. So it has some number of connected components. It could be many, but just let H be one of the components and let g one be everything else.
00:06:53.074 - 00:07:32.676, Speaker A: Then you have this picture. So I have my separating set S, I have some component h and then I have the rest of the graph g, which is some reason I've changed what it's called. So that's g one. And we can do exactly what I said in the two dimensional example above. So we can define an equivalent but non congruent framework by putting p equal to p for all the vertices, this time on the right hand side. And you can also put p equal to for all the vertices in S. And you can just choose to reflect through the hyperplane determined by the vertices of S.
00:07:32.676 - 00:08:19.658, Speaker A: There were d of them and reflect the vertices in H through that to move them all over the hyperplane and change their distances. So then if you pick any one vertex here and any one vertex here, then their distance will change after the reflection. So that's what I want to say here. So you set Pv dash by reflecting pv through the hyperplane determined by the separating set, and you get an equivalent framework GP. None of the edge lengths have changed, it's easily to see it's equivalent. But some of the distances did change, so it's not congruent, and hence we get a contradiction of the hypothesis that the framework was globally rigid. So, as I said, hopefully it was quite easy, but feel free to just jump in if you have any questions.
00:08:19.658 - 00:08:23.094, Speaker A: I am keeping my eye on the chat as well, if you want to do it that way.
00:08:23.594 - 00:08:40.454, Speaker B: So I have a question. So we have d vertices in the separator set, right? Do we have any result that says that up to d vertices you can reflect, and more than after d plus one vertices you cannot reflect?
00:08:43.583 - 00:08:56.403, Speaker A: I'm not sure what you mean. So if I had less than d here, I could just take the, say there was d minus one here, then just pick one out of here and throw it into the set. It will still be a separating set, so you can just do the same argument.
00:08:57.503 - 00:09:08.610, Speaker B: No, what I mean is, if. So the separating set has. It is less than d plus one connected, right?
00:09:08.802 - 00:09:09.602, Speaker A: Yes.
00:09:09.778 - 00:09:15.254, Speaker B: So I'm asking if, if it were d plus one connected, you won't be able to reflect.
00:09:15.554 - 00:09:16.122, Speaker A: Correct.
00:09:16.218 - 00:09:25.974, Speaker B: So I'm asking if there is a result that says, you know, after d plus one connections, you won't be able to reflect, and less than that you will be.
00:09:26.394 - 00:10:06.650, Speaker A: Yes. So I mentioned, maybe I was confusing. So if you assume the generic, which I said you didn't need to for this, but if you wanted to. So if you weren't generic, it's possible that your D minus one things only define a hyperplane. But since if you assume generic, then, and you had a D plus one connected graph, then you would need d plus one vertices in a separating set, and they don't, they're generic, so they don't define a hyperplane. So you could try and reflect, but the D plus one points would be spanning all of RD, so you wouldn't be able to do the reflection.
00:10:06.842 - 00:10:07.890, Speaker B: Okay, thank you.
00:10:08.042 - 00:10:53.018, Speaker A: There's comments in the chat. Oh, so Alex is saying thanks, roughly what I said, but maybe it's worth reading that as well. Okay, so the second necessary condition, and this one we have to get a bit more involved in. The necessary condition is called redundant rigidity. So I first need to define that. So I'm going to talk about as a property of a graph, you could talk about as property of a framework if you like, but I'm going to talk about it generically. So a graph is redundantly rigid if when you delete any edge, it still remains rigid, so you can look at all the possible edges, every single graph, g minus e for all e and e, have to be rigid.
00:10:53.018 - 00:11:25.264, Speaker A: So every edge has to be redundant. It's not deleting, it doesn't affect the rigidity. So here's a two dimensional example. This one we said before was rigid. It's clearly not redundantly rigid because if I delete one of the edges, well, I guess there's two options. Either I could delete an edge like this and then I have a degree, one vertex here, which maps around on a circle centered at this neighbor, or instead I could have deleted the diagonal. And then I have a four cycle which you can easily see is not rigid either.
00:11:25.264 - 00:12:01.010, Speaker A: So for any edge I delete, this is not rigid. And all I needed to show was not redundantly rigid was there existed some edge when I deleted. It's not rigid. This one on the other hand is redundantly rigid because if I delete any edge from k four, I get to the graph I had here, a four cycle with a diagonal, and that always is rigid generically. So this is an example of a redundantly rigid graph. But you can have much more complicated examples. And we'll talk a bit more detail about the combinatorics of redundant rigidity in future lectures as well.
00:12:01.010 - 00:12:39.432, Speaker A: But for today we want to just show how it, how it is necessary for global rigidity. Okay, so I have a couple of remarks first. So as long as we're not talking about dimension one, these two necessary conditions I'm showing you are distinct conditions. So d plus one connectivity does not imply redundant rigidity, and redundant rigidity does not imply d plus one connectivity. Eg, in the two dimensional case, here's a simple example of a redundantly rigid graph. If I take any edge away, it's still rigid, but it's clearly not free connected. We already saw this example before.
00:12:39.432 - 00:13:57.646, Speaker A: On the other hand, you can be free connected and way too sparse to even be rigid. For example, the Peterson graph, where you can, you can be, um, highly connected without having, more highly connected than freedom, without having enough edges to be minimally rigid, say, in two dimensions. So these are very distinct conditions. In general, dimension one we'll talk about a bit towards the, the end, okay? And the second remark I wanted to make was that since I want to characterize global rigidity as a graph theory property in two dimensions, generic global rigidity, it's worth saying that my characterization, which we won't get to today, but when we get to it, will include redundant rigidity. But, so I wanted to point out that by the polycheck Geringer Leman theorem, we can express redundant rigidity as a purely combinatorial property in two dimensional space. So by that theorem, a graph is redundantly rigid if in two dimensions, if after you delete any edge, you still have a spanning two free tight subgraph. And so what this means, one consequence of this is that the pebble game algorithm, which I went through, which checks minimal rigidity in the plane by checking this two free tight condition, can also check redundant rigidity in the plane.
00:13:57.646 - 00:14:20.544, Speaker A: And in the plane where the d plus one is free connected, there are efficient algorithms also for chest testing free connectivity. So the global rigidity characterization we're aiming towards, which it will be these two properties, the d plus one connectivity and redundant rigidity, when d equals two are nice and you can test them by fast algorithms. Okay.
00:14:21.724 - 00:14:35.894, Speaker C: Okay, so, sorry, the algorithm for testing connectedness, is that just the max flow min cut theorem, essentially.
00:14:40.194 - 00:14:55.386, Speaker A: So I think, I think yes, but also no, because I think there are many algorithms for testing k connectivity. So that I'm not, I don't, don't actually know if the fastest one is a maximum in cut one, but certainly it is one way you can do it.
00:14:55.490 - 00:14:56.530, Speaker C: Okay, great.
00:14:56.682 - 00:15:11.354, Speaker A: And so as the cake in k connectivity, as your k gets lower, you get faster and faster algorithms. But I think maybe it gets more and more clever tricks people can do with a low k. So I wouldn't want to try and guess which one they actually use for the current best.
00:15:11.514 - 00:15:12.178, Speaker C: That makes sense.
00:15:12.226 - 00:15:17.938, Speaker D: Thanks, Tony. Could you discuss the first remark one more time? I didn't.
00:15:18.106 - 00:15:20.134, Speaker A: What was the first remark? This one.
00:15:21.474 - 00:15:22.138, Speaker D: Yeah.
00:15:22.266 - 00:15:55.834, Speaker A: Yes. So we've proved that, let's say we're only talking about dimension two. So we proved that free connected, every globally rigid graph is free connected, and we're going to prove, the next thing we're going to work on is we're going to prove that every globally rigid graph is redundantly rigid. So that the remark is just saying that these two are distinct properties, that neither one implies the other, so you can satisfy one without satisfying the other. So globally rigid things being one of them does not imply it's the other thing. We have to prove them both separately.
00:15:56.364 - 00:15:59.596, Speaker D: Okay, but in dimension one, they're apparently the same.
00:15:59.780 - 00:16:11.944, Speaker A: Yeah. So I left dimension one out. We'll come to that at the end. But yes, in dimension one, it turns out that, well, they're not quite the same, but one implies the other. But we'll get to that.
00:16:12.484 - 00:16:13.664, Speaker D: Okay, thanks.
00:16:17.444 - 00:16:54.466, Speaker A: Okay, so we want to show this redundant rigidity idea is necessary for global rigidity. And so this is going to be a sort of, I don't know, if it's differential geometry or differential topology. So some elementary facts from that we're going to use. We're only going to end up giving a sketch of the proof. But I want to give you as many of the ideas as I can as we go. So remember we had, we defined, maybe in the first or second lecture, the configuration space for a framework GPU. So it's the set of Q in RDV such that GQ is equivalent to GP.
00:16:54.466 - 00:17:41.910, Speaker A: So we just have this nice space and you can make an equivalent formulation of global rigidity if you like, quotients. You take this configuration space quotient by the Euclidean group and you ask that the equivalence class of the realization you start with is the only realization. So this entire space is just this one equivalence class, and so you can't actually move anywhere else within your space. So you quoted it out by the Euclidean group. So we've got rid of translations, rotations and reflections. So it's saying that that one equivalence class you've got left is unique because that's the entire space. Okay? And so in some sense, this is the kind of the rough thing we're going to work with, except I don't like quotienting.
00:17:41.910 - 00:18:25.158, Speaker A: So I'm going to do the quotienting part in a more elementary way when we, we get to the relevant point. Okay? So really everything is going to revolve around one lemma from differential topology. And so just need a couple of definitions. So suppose I have smooth manifolds x and y, and f is a smooth map between them. Then, I mean, I guess most of you, you know this, but, and we say that an element x of the manifold x is a regular point of the map f. If the jacobian derivative of f evaluated x has maximum rank. Otherwise you might say it's a critical point.
00:18:25.158 - 00:19:10.734, Speaker A: But I don't think I'm going to use the word critical further on. And f is a regular value of f if for all y in the inverse image, y is a regular point of f. So regular points we're used to in rigidity, but we're going to have to work with regular values in, in what we do today. Although again, I'm going to skip over some of the difficulty. But this is, these regular values are important, where all y in f inverse fx is a regular point. Okay, so here's the important lemma. I mean, I don't think the lem, the proof of this lemma is hard, but it is the sort of where the, what we're going to, the machinery we're going to use.
00:19:10.734 - 00:19:50.284, Speaker A: So again, we have x and y are smooth manifolds, a nice smooth map f between these manifolds. And suppose x has dimension m. Take a point x in x, and suppose that f is a regular value of f. And suppose that the rank of the jacobian of f evaluated x as t. So I give you all that information. Then the lemma tells you that f inverse fx is an m, this dimension of the domain of the map minus t, the rank of the jacobian dimensional smooth manifold. So we get an m t dimensional smooth manifold.
00:19:50.284 - 00:20:24.444, Speaker A: Okay, so what's going to happen in our case? Well, f is going to be the rigidity map, which takes this to remind you. So f takes Rdv into re, and it gives us the list of the edge lengths. So, and so the jacobian derivative will be the rigidity matrix up to scaling. And so let's say, for example, we're in two dimensions. So maybe I should have done that here. So this is from r 2 volts. So the dimension of x is 2 volts.
00:20:24.444 - 00:20:52.134, Speaker A: And suppose you're minimally rigid. Then we know the rank of the jacobian rigidity matrix. And if you can show the, the regular value things, etcetera. So the hypotheses are all nicely hold. Then our f inverse fp, which is just the configuration space, will be an m minus t, so 2 volts minus the rank for minimally rigid. So two v minus three. So a three dimensional smooth manifold, and the three dimensions will just be the translations and rotations.
00:20:52.134 - 00:21:39.354, Speaker A: So really it's applying this lemma in this kind of way is what we're going to be, be doing. Okay, except I don't really want this, this number to be free. And this is why I said this quotient before. And really I want to get rid of the isometries, but instead of quotienting, I want to do it in a slightly more elementary way. So I'm going to apply the lemma to, as I say here, frameworks without isometries, and so that the free from the isometries will disappear, and I'll actually get a zero dimensional manifold for, in the case when it's rigid. Okay, so how do I want to avoid isometries without doing the quotienting thing? I want to use standard positions. So I say that a framework GP in RD is in standard position.
00:21:39.354 - 00:22:11.532, Speaker A: If, and so you can see for yourself how to generalize this to RD. But let me just do it for a couple of dimensions. So when d equals two, I've got three isometries. I've got two translations and one rotation. So I'm going to pin the two translations, rule them out by saying one vertex is lies at zero zero. So by fixing these two points, let's pretend I always have connected graphs so I don't have to worry too much. Then pinning one vertex will stop the two translations.
00:22:11.532 - 00:22:59.796, Speaker A: And so then I only need to rule out the rotation. I can do that by putting a second vertex on the axis, by just pinning one of its coordinates. Okay, in three reals you have six isometries, so pinning one vertex takes away the free translations. And then to take away the two rotations, the free rotations, I have to be slightly careful. I couldn't just pin pv two in at a certain location because that would not rule out all three rotations. So what I do is I make the first two coordinates of pv 20 and the final coordinate of pv 30. And in four reals, where you have ten isometries, four translations and six rotations, pinning one vertex gets rid of the translations and then you have to split your, your six rotations among three different vertices.
00:22:59.796 - 00:23:23.458, Speaker A: So I do that like this. And you can sort of imagine now how to extend this to the d plus one. Choose two isometries in d dimensions. You pin one vertex and then you have to worry a little bit about how you do the, the rotations. And actually there's lots of choice in what you do. But what you can't do is what things like what I said before. So in r three you can't just say, well, I pinned this vertex and pinned this vertex.
00:23:23.458 - 00:23:31.194, Speaker A: That would be how you think pv two and pv three might be incorrect. Which line, Alex?
00:23:31.354 - 00:24:11.034, Speaker D: Imagine pv two is zero, zero z. So you've put it on the z axis. Then if you're going to rotate around the z axis to take vertex three somewhere, it has to be in the z and some other component. You can't guarantee that the third component is zero. You could guarantee that one of the first two is zero. So I think there's a compatibility issue. So if you leave p of v two like it is, then you need to zero out either the x component or the y component of p of v three.
00:24:12.174 - 00:24:21.914, Speaker A: I have to try and imagine a picture in my head, but. Yeah, so this one.
00:24:31.914 - 00:24:33.214, Speaker C: Yeah, that makes sense.
00:24:34.514 - 00:24:35.482, Speaker A: You agree with Alex?
00:24:35.538 - 00:24:49.694, Speaker C: Well, yeah, when you rotate around the z axis, you're only able to like, say, fix the x coordinate to be zero of p three.
00:24:50.234 - 00:25:00.354, Speaker A: Yeah, I agree as well. Yeah. Okay. Okay, thanks. So, yeah, so what you said Alex, was to do this one instead.
00:25:03.294 - 00:25:08.834, Speaker D: Yeah, I mean, typically I have the zeros creep in from the right one at a time.
00:25:09.134 - 00:25:19.366, Speaker A: That would be more sensible if I thought through this through carefully enough. So, yeah, so then in four reals you want it to look like this. If that makes sense.
00:25:19.430 - 00:25:20.858, Speaker D: That would work. That would work.
00:25:20.926 - 00:25:35.954, Speaker A: W two, a z three, w three and a y four, z four, w four. So the r 41 will also be wrong. But something like this, if you can read that scribble, will be okay.
00:25:36.074 - 00:25:36.774, Speaker D: Yep.
00:25:37.514 - 00:25:39.274, Speaker A: Yeah, yeah, yeah.
00:25:39.394 - 00:25:43.414, Speaker D: I was just doing this the other day, so that's why I spotted it.
00:25:44.034 - 00:26:02.712, Speaker A: Great, thanks. Yes. So what that means is that. So now we've put it in standard position and two dimensions, it was fine. And then three dimension and upwards, Alex is fixed. So the GP in standard position is. Now I'm going to think of it as a point here.
00:26:02.712 - 00:26:32.864, Speaker A: I'm not going to think of it as a point in RDV with loads of zeros. I'm going to think of it as a point in this smaller space. So this is going to change the dimension of the domain. And when I apply the lemma, so it's going to be have this smaller bit which is going to get rid of the, the free that I had in dimension two or the d plus one, choose two in general. And so to do this, I'm going to define fg to be the restriction of the rigidity map to apply to this domain. So to frameworks in standard position.
00:26:33.524 - 00:26:35.824, Speaker C: Is this called pinning?
00:26:36.524 - 00:27:42.674, Speaker A: Yeah, sorry, you can call it. Yes. Yeah. Effectively what I'm doing is I'm pinning one vertex and then I'm pinning the, some of the columns in the rigidity matrix corresponding to the rotations. Okay, so, but notice that I want to talk about generic global rigidity, but I'm introducing non genericness with these coordinates of these, these vertices being zero, because if you really want to be algebraically independent, then everything is transcendental, so you certainly can't have zeros. So I want to define a framework to be quasi generic if it's congruent to a generic framework. So I take a generic framework and if I translate that generic framework to put a vertex at the origin and then I trans rotate to put all the vertices at the et cetera points, as we just talked about, then that generic framework will become quasi generic because I've zeroed out some of the positions, but it still has exactly the same rigidity properties, so the translations and rotations won't affect things.
00:27:42.674 - 00:28:21.560, Speaker A: So we'll work with these quasi generic frameworks which are ones congruent to a generic framework. So. And that's what I say here. So any framework in standard position is non generic. But if I give you a generic framework, we can always just apply isometries to get a quasi generic framework in standard position, and they'll have exactly the same global rigidity properties. So there's no loss in generality in thinking about quasi generic standard position frameworks. Okay, so, yeah, as I said, so the main technical problem about showing redundant rigidity is a necessary condition for global rigidity.
00:28:21.560 - 00:29:26.756, Speaker A: We haven't got to the sort of proof technique yet, but the main technical challenge will be in showing we can actually apply the previous lemma. And so what I mean by that is showing the assumption that for this restricted rigidity map, F F GP is a regular value when p is a quasi generic and standard position. Okay, so, and maybe this is, this is a right point to say that the argument I'm going to present, it's a proof of what's called Hendrickson's conditions, redundant rigidity and d plus one connectivity. But Hendrickson's original proof showed this, but really only showed it for in a weaker circumstance. So Hendrickson used Sartre's theorem to show that this is true almost all the time. But what we wanted to be true is not just almost all the time, but the almost all the time that is every single generic framework. So it was possible from Hendrickson's theorem that they almost all missed some generic and included lots of non generic, say, but it wasn't quite true for all generic frameworks.
00:29:26.756 - 00:30:19.586, Speaker A: So, to get that extra bit about all generic frameworks, you need a result from algebraic geometry, so you need sort of some quantifier elimination kind of results. And so a Tarski Seidenberg result, in particular the result, and I'm not even going to go into it, but the proof I'm using is, is from a paper of mine with Bill Jackson and Tom McWhorton. And there, the version of Tarski Seidenberg we used was simply a projection of semi algebraic sets. Yeah, so I do say it here. So this is what I'm saying that Hendrickson showed almost all globally rigid frameworks are redundantly rigid. The fact that it's true for generic, for all generic, globally rigid frameworks really is due, is due to Bob Connolly. And I think that in the literature, we just take this extension to be implicit.
00:30:19.586 - 00:31:10.112, Speaker A: It's Connelly introduced using these sort of tarski Seidenberg things in combination with Sartre's theorem in one of his papers. And so the same technique basically makes Hendrickson's theorem work for all quasi generic, rather than just almost all frameworks. If there's any experts in the room who want to correct me on any of that historical commentary, then please do. Okay, so here's Hendrickson's theorem from 92. So I take a quasi generic, globally rigid framework for D, at least two. So as I said, dimension one two connectivity and redundant rigidity are linked, so we don't need to worry about that. And there is one place in the proof where it will be useful to be a dimension at least two.
00:31:10.112 - 00:31:57.924, Speaker A: But every such framework is global, is redundantly rigid. Every such globally rigid framework is redundantly rigid. Okay, so let me do sort of a detailed sketch of the proof so I can apply translations and rotation. So without loss of generality, I can assume my framework lives in standard position. And in standard position means that, for example, the first vertex is fixed and never moves. And so it means that and say in dimension two, where the second vertex is at zero y two, the zero never changes in the second vertex either. So we're looking at this restricted rigidity map and equivalent but non congruent frameworks have to still have the zero zero for the first vertex and for the first half of the second vertex.
00:31:57.924 - 00:32:34.920, Speaker A: Okay, so we know global rigidity implies rigidity. So I mean, you can do this argument just that I'm about to say in a moment if it's dealing with a flexible case, but it's not interesting. So let's just say that globally rigid implies rigid. This is not hard. So now I want to do a contradiction argument. So I suppose that GP is not redundantly rigid, and I want to show its find a second equivalent but non congruent realization, which contradicts the assumption that the framework is globally rigid. So I'm assuming it's not redundantly rigid.
00:32:34.920 - 00:33:09.170, Speaker A: What does that mean? It means I can choose some edge such that when I delete that edge, it actually becomes flexible. So I have my framework gp, which is rigid. It's a generic rigid framework, but it's not redundantly rigid. So when I throw e away, it becomes flexible. And hence we know the rank exactly, because g was rigid. G minus e is flexible, so we know the rank is exactly one less than the Maxwell count. So the rank of rigidity matrix for g minus c is dv minus D plus one, choose two minus one.
00:33:09.170 - 00:33:47.582, Speaker A: Okay, so now we want to apply the dilemma. So as I say, what we're taking is, given the hard part, that this restricted rigidity map, g minus e is a regular value of this restricted rigidity map applied to the graph g minus e. We know the domain of f. G minus e is. This is r to the dv minus D plus one, choose two. So it's dv minus t plus one, choose two dimensional, and we know the rank, so we know everything we want. Now to apply the lemma.
00:33:47.582 - 00:34:15.784, Speaker A: And that tells us that this inverse image which we define to be the configuration space for g minus ep. This is a frameworks in standard position. We know this is a dv minus D plus one. Choose two minus Dv minus D plus one. Choose two minus one dimensional smooth manifold by the lemma. And so obviously, this gives us a nice one dimensional manifold. Okay, so now it's a one dimensional manifold.
00:34:15.784 - 00:35:00.804, Speaker A: That lemma has really told us a lot about how this this when we deleted an edge from a rigid, but not redundantly rigid graph, what the configuration space can look like. And we'll use what we know about that to find our second equivalent but non congruent realization. So, in particular, what we're going to do is take our one dimensional smooth manifold, and next we're going to show it's compact. And actually, if you look at Hendrickson's paper, his proof that it's compact is basically one line. It's very easy. I've added a few more details just because, just in case, it's not so easy, for example, from a combinatorial perspective, maybe, I thought it was worth adding a few lines to this, but it is quite easy to show it's compact. So we know the configuration space lives in here.
00:35:00.804 - 00:35:48.314, Speaker A: So all we have to do is show that it's closed and bounded. So, closeness, I mean, Hendrickson says it's trivial. Let me just write three or four lines for us, just to make sure. So, take a sequence of points, p one, p two, et cetera, in our configuration space, which converged to some limit point Q. Then the corresponding frameworks, all these points were in this configuration space. So they're all in standard position, and they're all equivalent to G minus Ep. And so they converge to the limits point Q, which is also, I guess it's easy to see that G minus Eq will also be in standard position and also be equivalent to G minus Ep.
00:35:48.314 - 00:36:20.226, Speaker A: So our limit point Q is in the same configuration space, so we're closed. So it's almost tautological, but I just wanted to write out a couple of sentences for it. And then boundedness is the point where we use dimension at least two, because we know G is rigid. And rigid graphs in dimension, at least two, are at least two edge connected. So when we take an edge away from a rigid graph, we're still a connected graph on the line. This is not true. You can be a tree and be rigid.
00:36:20.226 - 00:36:49.290, Speaker A: So you take one edge away and it's no longer connected. But dimension, at least two g minus e is always a connected graph. And so the edge lengths are fixed and you're a connected graph. So you, clearly you can come up with a bound that stops you moving too far away, given you have one vertex pinned at the origin. So boundedness is okay. So I've shown it's one dimensional compact manifold. I haven't shown the manifold as connected, so we have to worry about which connected component.
00:36:49.290 - 00:37:29.426, Speaker A: But this is easy. We just pick the connected component of this configuration space which contains the p we started with, and then we use the classification of one dimensional smooth manifold to say that this o, the connected component which contains p, is actually just a circle. At least it's diffeomorphic to a circle. So topologically, we're just working with a circle. So we have some circle and we have our point p on it. And so this point p is where the length of the, I want to think of this point p is where the length of the edge e that we took away in g minus e is the right length. It was in Gp.
00:37:29.426 - 00:38:23.814, Speaker A: So if we get back to the same length as this point, p will have found somewhere else with the same length for that edge, and we can add it back and we'll have an equivalent but non congruent framework to Gp. So now we use the fact that p is generic. So since p is generic, it's not an extreme point for the function of, which changes the length of this missing edge for e. So there exists a q one and a q two such that the length of the edge of e in the framework gq one and the length of the edge of e in the frame of gq two are smaller and bigger than the length we want. So I have a q one somewhere and a q two somewhere else on this circle, and I know one of them is smaller than p and one of them is bigger than pull. And so obviously it's a circle. So there's two paths between q one and q two.
00:38:23.814 - 00:39:08.520, Speaker A: I could go via p, or I could go around the, the other way, and I can use the, the intermediate value theorem to find a p one and say it's over here, which has, which is not equal to p, because I've had, I've been able to go the other way, which has the same length. So q one is less than piece length is less than p. Q two, the length is bigger than p. So as I traverse from q one the other way around to q two, I find somewhere else with the same edge length as p, and I call it p one e. So I found Gp one, which is equivalent to Gp. Okay, so now I want to say I found an equivalent but non congruent realization, and I'm finished. But I'm not quite, because I.
00:39:08.520 - 00:39:41.154, Speaker A: My pinning only got rid of the the continuous isometries. I only got rid of translations and rotations. So it's still possible that p one is simply a reflection of p or a composition of reflections of p. But this is also something that's not hard to check. But I'll let you think about that for yourself. So the proof is complete. If you can show that p one is obtained from p by a composition of reflections, then you do get this non congruent but equivalent framework, gp one, which contradicts global rigidity.
00:39:41.154 - 00:40:30.968, Speaker A: Okay, any questions about. I know there was a couple of points, at least, where I sketched rather than proved, but any questions before I move on? Okay, so now I want to come back to the one dimensional case, and I think this was one of the things that was asked about earlier. So, in one dimension, d plus one connected means two connected. But if you're a two connected graph, then it's certainly true that if you delete any one edge, your graph remains connected. But every connected graph is rigid in one dimensional space. So every two connected graph is redundantly rigid on the line. So the two connectivity condition implies the redundant rigidity condition, which I.
00:40:30.968 - 00:41:06.866, Speaker A: So, the dimension one case that I left out from the Hendrickson's theorem is immediate from the two connected necessary condition. And actually, more is true. So, in one dimensional space, we have an easy ish result. But if your graph is too connected, you can go the other way as well. So your generic framework on the line is globally rigid if and only if the graph is too connected. I do actually need generic. So if you remember back to the start when we talked about one dimensional rigidity, we didn't need generic to characterize rigid on the line as graph connectivity.
00:41:06.866 - 00:41:42.416, Speaker A: But for global rigidity, even in one dimension, we do need to use generic, or quasi generic, if you like. Okay, so I thought I would give a little example showing that genericness is necessary. So this is the four cycle realized twice on the line. So what's happened here? V one v two have been switched in their positions, but you can see that length is the same up to my, my bad drawing. And v three, v four have been switched in positions. But again, the lengths are the same. You notice the length here and that's the v two, v four, which is that one.
00:41:42.416 - 00:42:22.624, Speaker A: And this is the, the v one, v three, which is this one. But you can check that. I mean, if I'd drawn the picture slightly more better, it would probably been easier to see. But you can check that these have the same lengths, but they're, they're not an isometry of each other because v one, v four, that's a long way away. And here v one, v four is close together, so the non edges have changed their distances. So these are the same graph, but equivalent but non congruent realizations. And graph, both times it's two connected.
00:42:22.624 - 00:43:08.954, Speaker A: So this would be a counterexample to the, the theorem if you got rid of the word generic. It's not a counter example because this particular thing I've drawn here is not generic. Okay, so they both, neither of the realizations are generic. And so I guess what I say here is that the edge lengths are the same in p one as in p two. I know the edge lengths not being the same is enough to show you it's not generic because you just move along, say, from the v two to v four to v three. The sum of those two non generic things tells you how to move from v two to v three from its location to location. So the points are not generic either.
00:43:08.954 - 00:44:09.898, Speaker A: Okay, so I want to prove this two connectivity is sufficient for global rigidity on the line. There's one thing that we're going to prove next week, at some point next week, which is a result about stress matrices, which I haven't really introduced yet, but we're going to prove it then. But I want to say the proof about this theorem now. So we're going to have some fact that which could take us through for now that we will go into the details of next week. And the fact, well, it's a theorem due to Connolly that there's also uses stress matrices, that there's also an alternative proof by Jackson, Jordan and Zabadka, which uses algebraic number theory instead. It's kind of elementary algebraic number theory, but it's still quite a nice proof. So what does the fact say? It says that the one extension operation preserves global rigidity and we're going to see it will work in any dimension.
00:44:09.898 - 00:44:52.934, Speaker A: But I just want to use the fact that it works in one dimension. Okay, so let's say we have two generic frameworks, Gp and Hp, where if you restrict p to g, then you get p, so that the two generic frameworks are related. The graph h is obtained from g by a one extension and the smaller graph g is globally rigid. Then the result, the fact is that the bigger graph is also globally rigid. This is a statement about the line. So our one extension takes an edge and subdivides it. So it introduces a new degree two vertex and deletes this edge.
00:44:52.934 - 00:45:28.128, Speaker A: But we'll see that this is true in D dimensions and we'll go into some of the details of the proof next week. Okay, so this is a fact we need. Okay, so we know that on the line every globally rigid framework is two connected. We want to prove the converse. I want to take a two connected graph and show it's globally rigid. And we're just going to use this fact. We've just had an induction on the number of edges and actually the only remaining non trivial bit other than just saying that the setup is going to be left as an exercise.
00:45:28.128 - 00:46:04.426, Speaker A: Okay, so we want to show a two connected graph is globally rich and we're going to use induction on the number of edges in our two connected graph. So the smallest two connected graph is k three. It has three edges. It's just a complete graph which is clearly globally rigid. That's an easy case. So suppose we have at least four vertices and our two, sorry, four edges and hence four vertices in our two connected graph. If you can delete some edge and still be two connected, then by the induction hypothesis, g minus e is globally rigid and hence adding e clearly can't destroy the global rigidity.
00:46:04.426 - 00:46:33.602, Speaker A: So that's, that's a good case. So we may assume that G minus E is not too connected for every edge of the graph. So in other words, you're a minimally too connected graph in the sense that deleting any one edge destroys two connectivity. Okay, so then here's the exercise. The only bit I'm sort of omitting, this implies that there must be a vertex of degree two in your graph. Okay? And so the exercise is to show this. But it's not a hard exercise.
00:46:33.602 - 00:47:16.316, Speaker A: It's in my third year undergraduate graph theory course, for example, so we know our minimally two connected graph has a vertex of degree two. Suppose the vertex is called v and it has neighbors x y. Since it's not the complete graph on three vertices and g is minimally too connected, we know that xy is not an edge. And hence, we do the inverse of this one extension argument. So we take our this is v, this is x y, and we know this edge is not there. And so we go back the other way and add it in. We add in e equals xy, and we get a smaller graph, which is two connected.
00:47:16.316 - 00:47:43.424, Speaker A: So we get this graph, g minus v plus, which is two connected. By induction, that graph is globally rigid. And so I guess h here should be this g minus v plus xy. Sorry. Is globally rigid. And hence, by the fact this operation, one extension preserves global rigidity, we're done. And we've shown that our two connected graph, g, whatever it was, had to be globally rigid as well.
00:47:43.424 - 00:47:48.844, Speaker A: Okay, so I've come to the end of what I want to say.
