00:00:00.360 - 00:01:02.194, Speaker A: So remember last time we talked about a lot about the detail of circuits in the two dimensional rigidity matrix. These are two reals circuits we from Leman Sphere, and we knew exactly what graphs these circuits were and we spent a lot of time looking at structural results to find that you could always have a degree free vertex in a circuit and reduce your circuit to a smaller one. So this doesn't completely give you a recursive construction, but so that's the first thing I want to do is say a little bit about that problem because we assumed free connectivity to make that work. And so I have to talk about what happens if you're not free connected. And then we'll start thinking about the more general case of free connected, redundantly rigid graphs that are not necessarily circuits. And it turns out that these are much more complicated than just saying you take a circuit and you add some edges in, there can be much more complicated structure to the graphs. Okay, so what do I start saying here? So we've shown that if the circuit is free connected, then it has an admissible node.
00:01:02.194 - 00:02:03.608, Speaker A: Okay, but I want to, first of all, and I said this briefly last time, I want to comment that the containing one admissible node is not best possible. So what Berg and Jordan proved precisely was that as long as you have at least five vertices, your free connected circuit has either four admissible nodes or three pairwise non adjacent admissible nodes. I won't go into the proof, but this is just an example to illustrate that what they found was actually best possible. So here the four blue vertices are admissible, and here there is only three, but they're pairwise non adjacent and all three of those are admissible. Okay, but what I do want to spend a few minutes on is the case when the circuit is not free connected. So it's easy to check that all two reals circuits are two connected. And it's also not so hard to show that if they are, if they do have a two vertex separation, that there's no edge between those two vertices.
00:02:03.608 - 00:02:52.782, Speaker A: So the two vertex separation looks like this one you can see here. And hence what we're going to do is use this operation that I'm showing in this picture. So, to deal with two but not free connected circuits, we go back to the two sum operation we saw earlier. So the two sum operation took two circuits. In this case it's two copies of k four, and you pick an edge e in one of the copies and an edge e in the other copy and identify them and remove the common edge. So the end vertices of e, u and v become the n vertices here, and the n vertices u v are identified with them. So u and u becomes this one new vertex here, and similarly v and v dash become a new vertex and the common edge is thrown away.
00:02:52.782 - 00:03:40.424, Speaker A: So this is a standard matriarch operation, but it's going to be the one, exactly the one we're going to use to generate all our two reals circuits. Notice that this is not going to be helpful for global rigidity, because the, the two vertex separation shows that this graph is not globally rigid. So the result of the twosome operation is never going to be a globally rigid thing because it always introduces failures of free connectivity. But it's just interesting on its own, I think, to note the recursive construction of the general class of circuits as we go. So here it is that this theorem was in the Berg Jordan paper. So a graph is a r two circuit if and only if it's a connected graph, which you can obtain from vertex disjoint copies of k four. So it might be you need many, many copies.
00:03:40.424 - 00:04:15.400, Speaker A: It might be you only need one. It depends on the particular graph you're interested in, but it's obtained from some number of vertex disjoint copies. By taking two sums of connected components and within any connected component you can apply as many one extensions as you like. But notice I never took two disjoint components and did a one extension, deleting an edge over here, adding a new vertex that was adjacent to the second disjoint component. It was always one extensions within connected components. And the only way I took two disconnected graphs and connected them together was by the two sum operation. Okay, so let's do the proof.
00:04:15.400 - 00:04:44.364, Speaker A: And do the proof. And by do the proof I really mean I'll say about two lines and leave it as an exercise. Okay, so a connected graph constructed in this manner is an r two circuit. We know the one extension move preserves the property of being a circuit, and the two some move also does. So the other direction is the, the non trivial part. Here we use induction on the number of vertices. Suppose we've got at least more than k four, so at least five vertices.
00:04:44.364 - 00:05:37.304, Speaker A: Then here's an exercise and really I just said it. If a two reals circuit has a cut pair xy, then it's not so hard just to do a little count and prove that it must be that the two vertices in the cup pair are not joined by an edge. And with that you can then see that if you have a two vertex separation, you separate out into the two parts and add the edge on both sides. You result in two circuits, so adding xy to each side gives you an two reals circuit on each side. So you start with one. With this two vertex separation, you break it into two smaller circuits. So this is an exercise if you want to check, but it's just some counting argument using the fact that circuits are graphs with e equals two, v minus two, and I of x is at most two, x minus three for all proper subsets of v with at least two elements.
00:05:37.304 - 00:06:21.524, Speaker A: If you're just using the counts on both sides, it's not, you won't find it so hard. But that exercise tells us exactly what to do whenever there's a two vertex separation. So from the exercise, you can assume that the graph is free connected. And then all the work we did in the previous two lectures tells us that either the graph is k four or it has a vertex of degree free. We can reduce by a one reduction, and hence we're done. Okay, so I think it is nice just to observe the full recursive construction of circuits. As we talked about last time, what we actually need for the global rigidity application is for our admissible node to be feasible to preserve free connectivity as well as the circuit property.
00:06:21.524 - 00:07:01.632, Speaker A: And then we need to extend that to look at redundantly rigid and free connected graphs instead to do the whole case. Okay, so, yeah, so first of all, I guess I want to talk about this feasibility. Maybe I didn't mention feasible last time, so maybe what I just said about feasible didn't make much sense. But it's here. So I'll say it in more detail. So we know that we want our, all of our globally rigid things are going to be free connected. It's possible, since circuits can be two connected but not free connected, that I take a nice free connected circuit, do a one reduction on it and break free connectivity.
00:07:01.632 - 00:07:40.760, Speaker A: So that's going to be bad, because then I reduce to something we know is not globally rigid. So we're not going to be able to say this smaller thing is globally rigid. One extension preserves global rigidity. Hence the bigger thing is globally rigid. Okay, so what we want is our admissible node that we reduce to a smaller r two circuit with. We want it to also preserve free connectivity. So what we do is we say that in a free connected two reals circuit, the node is feasible if there is an admissible one reduction at that node, adding some edge among the neighbors such that the graph you obtain is free connected.
00:07:40.760 - 00:08:18.774, Speaker A: As well, so feasible means admissible plus preserves free connectivity for the particular, for some of the one reductions. So it may be there are three different one reductions at the vertex. One of them fails to preserve admissibility, one of them preserves admissibility, but not feasibility. But as long as one of them preserves admissibility and feasibility, we're happy. Okay, so here's, here's a small example. In fact, this is an example in the Bergen Jordan paper. So here, if you look at this vertex v, this is a r two circuit you count up for yourself if you like, look at the vertex v in blue.
00:08:18.774 - 00:08:54.114, Speaker A: If I remove v and add one of the edges, then what can happen? So suppose we added this edge here. Then v would have disappeared. So what we'd be left with. So when v disappears, this edge would go. And so this vertex and this vertex would separate this one and this one from the rest of the graph. So it would, we would create a two vertex separation. So if you look at v, you remove it and its free incident edges.
00:08:54.114 - 00:09:36.538, Speaker A: Then you would see there was a two vertex separation which removed these two vertices from the rest of the graph. And similarly, it's sort of symmetric. So you could say the same thing about this one, and you can also talk about adding that one. But then that one would leave it a two vertex separation in here because this edge would have disappeared. So I don't know how clear the colors I'm scrolling on here are, but in each case, if you just draw the picture yourself, you'll see that all three possible one reductions at b result in a not pre connected graph. However, in this particular graph, there are other vertices of degree free. For example, these ones.
00:09:36.538 - 00:10:27.228, Speaker A: And so you can check and go through and see that actually at least one of them preserves free connectivity. But just this was to show they don't do exist. This bad thing can happen sometimes, so we have to make sure that it, at some point it doesn't. Okay, but when I say we have to make sure, I'm actually going to omit any more of the detailed combinatorics from this course and say that what happens is that Berg and Jordan proved that it's okay that if you're free connected, then in fact you get two, not just one, but you must be able to get two non adjacent feasible nodes. So they improved the admissibility thing. We've talked about the last couple of lectures to show, in fact, you can always find an admissible node that preserves free connectivity as well. Okay, but then that.
00:10:27.228 - 00:11:21.082, Speaker A: So now we know how to stay within the class of three connected circuits. So that does immediately give us the theorem that we want for the special case of r two circuits. So their result says a graph is a free connected two reals circuit if and only if it can be constructed recursively from k four by a sequence of one extensions. Okay, so we know we can get every free connected r two circuit from k four, which we know is globally rigid by a sequence of one extensions, which we know preserve global rigidity. Hence we have the nice corollary that every free connected r two circuit is generically globally rigid in two dimensions. And so Bergen Jordan's paper is called a proof of Connolly's conjecture, because Bob Connelly conjectured this, and then obviously they proved it. Okay, so that's sort of the, the end of circuits.
00:11:21.082 - 00:12:06.732, Speaker A: And now I want to move on to the more general case of free connected redundantly rigid graphs. But does anyone have any questions about the circuit case before we progress? Okay, I am watching the chat, by the way, if anyone prefers to type a question. Okay, so I'll say what m connected means in a moment. It's a particular type of graph, but m is for a matriarch. It's a particular matriidal property that we're going to put on the rigidity matriid and have a class of graphs satisfying this matriidal property. But we'll get to what it is in a moment. So this is all just sort of repetition.
00:12:06.732 - 00:12:36.394, Speaker A: We want to show that free connected redundantly rigid implies globally rigid. We've dealt with the minimum case. So the smallest number of edges you can have and be redundantly rigid is e equals two, v minus two. But if you're redundantly rigid and have that number of edges, you're exactly r two circuit. So if you're free connected as well, then you're a free connected r two circuit. And we just talked about that case. So now we want to look at redundantly rigid free connected graphs that don't aren't necessarily two reals circuits.
00:12:36.394 - 00:13:10.918, Speaker A: Okay, so here's the the matriarch connectivity idea. So we say a graph, and I'm only defining it. This is a general matriarch theory idea, but I'm only going to define it for the rigidity matriarch, the two dimensional rigidity matriid, but it's a general concept in matriarch theory. So we say a graph is two reals connected if every pair of edges of the graph. So this should be a graph. This is a graph. G is r two connected? If every pair of edges of g belong to a common two reals circuit.
00:13:10.918 - 00:13:48.920, Speaker A: So you tell me the edge is e and f in the graph, and I have to be able to show you an r two circuit that contains that pair of edges. So, for example, if the graph is a circuit, then the whole graph is a circuit. Every edge is in the circuit, so it's automatically connected. But it might not be a circuit. And so this is sort of a generalization of circuit. Okay, so we have to show this is a natural generalization of circuit, but why is it relevant to our problem? Well, we're going to do that with a lemma and then a theorem. I'm going to show really that it's equivalent to redundant rigidity, at least for free connected graphs.
00:13:48.920 - 00:14:14.532, Speaker A: So one direction is quite easy. So suppose a graph g is two reals connected, so every pair of edges is contained in some circuit. Then the graph is redundantly rigid. Okay, right. So here's a. I can't fit it all on, but it's a short proof. So why is this true? Since I'm two reals connected, every edge is in a circuit.
00:14:14.532 - 00:14:52.344, Speaker A: Circuits are rigid by the Laman Polachek Geringer theorem. So my graph that's two connected must contain some redundantly rigid subgraph because every circuit is redundantly rigid and it contains circuits because every edge, every pair of edges must be in a circuit. So we were able to choose a maximal redundantly rigid subgraph and call it h. So what I was just saying was why this maximal redundantly rigid subgraph exists. There must be something redundantly rigid, which take a larger one. Okay, h is a vertex induced subgraph. Otherwise, add the edges in and it's a larger subgraph.
00:14:52.344 - 00:15:38.820, Speaker A: So what's true is either h equals the whole graph, this maximal redundantly rigid subgraph is everything. But then we're done, because that's what we want to conclude. Or the vertex set of this maximal redundantly rigid subgraph is strictly contained within the vertex set of g. Okay, in this second case, there are edges in g which are not in h. So let a be such an edge and choose some edge f in h r. Two connectivity tells us that there is a circuit containing e and f, and we're going to use that to get what we want to contradict the maximality of h, I think. So, since g is two reals connected, there is a circuit c containing this pair e and f.
00:15:38.820 - 00:16:23.380, Speaker A: So e was in g, not h, and f was in this maximal redundantly rigid subgraph H. So we've got some circuit c containing e and f. Okay, so the number of vertices in h intersecting the number of vertices in c is at least two. So why is that? Well why is that? That was easy to me before the lecture. Why is that? Oh, because it's two reals connected. So it's two reals connected. So we have this circuit C that contains the pair e and f, but f was in h and f has two end vertices, so there's two end vertices are in the intersection.
00:16:23.380 - 00:16:54.464, Speaker A: So it's at least two. So both the end vertices of f are in this intersection. But if you take two things that are, are both rigid in the plane and they intersect at least two vertices, the union will be rigid. So H union C is rigid. So we want H union C to be redundantly rigid to contradict the maximality of H. We now know it's rigid. If you're rigid and every edge is in some circuit, then you're definitely redundantly rigid because you're rigid and you can throw any edge away.
00:16:54.464 - 00:17:26.264, Speaker A: It'll be in a circuit so it won't change the rank when you delete it. But that means that we're done because our two connected graphs, every pair of edges is in a circuit. So certainly every edge is in a circuit. So I say it here. So h union C is rigid, since every edge of h union C is in some circuit. H union C is also redundantly rigid and it's bigger than h, so it contradicts maximality and we're done. So we've proved that every r two connected graph is redundantly rigid in two dimensions.
00:17:26.264 - 00:18:07.574, Speaker A: Okay, the converse is harder. And in fact the converse is not true in general. But we need this free connectivity assumption or so we're going to use something very close to free connectivity, in fact, to get a best possible kind of result. So here's an example that shows that in general, m connectivity, and in our case, what I mean by m connectivity is r two connectivity is a stronger property than redundant rigidity. So here's the example. I've just taken three k four s that intersect in this sort of triangular way. So there are exactly three circuits in this graph, the free copies of k four.
00:18:07.574 - 00:18:39.374, Speaker A: Okay, so each copy of k four is a circuit. It's not hard to see that there's basically nothing else. Okay, it's also not hard to see that you can generate this thing by zero and one extensions from a triangle. So it's a, by the Leman theorem, say instead, if you like, this is a rigid thing. So every edge is in a k four, which is a circuit, so it's rigid and every edge belongs to a circuit. Hence this graph is redundantly rigid. But I claim it's not two reals connected.
00:18:39.374 - 00:19:15.810, Speaker A: So for example, choose this edge e here and this edge f here. Then the pair e and f. All the circuits are k four s and they're not in the same copy of k four. So there is not a common circuit that contains e and contains f because the only circuits are the k four s. So this is an example of a redundantly rigid graph which is not two reals connected. So it is a different property. But what we're going to see is that the two vertex separations like this or like this pair are exactly why it's not.
00:19:15.810 - 00:19:42.784, Speaker A: And if we're free connected, it would have been both at the same time or neither. Okay, so just, we could just do this for free connectivity. We don't really need this nearly word, but this is what they, they did. And this is a result from Bill Jackson and T. Boyd Jordan in 2005. And it's no extra work really to include this nearly word. So I did.
00:19:42.784 - 00:20:31.800, Speaker A: So a graph is said to be nearly free connected if g can be made free connected by the addition of at most one new edge. So it might have a two vertex separation. But if I just add one edge in, I'm going to get back to being, being free connected. Okay, so what's their, their result? If you give me a nearly free connected graph, then the graph is redundantly rigid if and only if it's two reals connected. And so this will allow us for free connected graphs to translate our redundant rigidity free connectivity problem into a r two connected and free connected problem. Okay, so we've just shown that every r two connected graph is redundantly rigid. That's the easy direction.
00:20:31.800 - 00:21:13.364, Speaker A: But now let's do the harder direction. Okay? And it's really going to be a little bit of setup and then one sequence of equations. Okay, so suppose our graph is redundantly rigid but not two reals connected. So we can think about the two reals connected components within our graphs. That is the maximal r two connected subgraphs and we're going to call those r two components. Okay, so our graph is not two reals connected. So it has some number of components, some number of maximal r two connected subgraphs that h one to hq be all of those components.
00:21:13.364 - 00:22:04.674, Speaker A: Okay, and now we have, need some definitions or just some, some notation, I guess. So let xi be the vertex set of the r two component hi minus everything that's in some of the other hj's. So xi is the set of vertices in hi, which belongs to no other two reals component, and then yi is the vertices of hi minus the ones that belong to nothing else. So in particular you could look over here, so maybe you have the four black components that you can see there. Then the blue areas are the parts of each hi which are in nothing else. So they're the xi's and the green parts are the ones that are in something else. So they're the y is.
00:22:04.674 - 00:22:34.048, Speaker A: Okay. So hopefully that sort of picture makes the notation a bit easier to digest. And then I want to have some letters to simplify the equations that follow. So Ni is the number of vertices in the two reals component hi. Xi is the number of vertices in set xi and y. I is the number of vertices in the set yi. So obviously we've just split Ni up into Xi and yi.
00:22:34.048 - 00:23:21.438, Speaker A: So we have this xi plus Yi is Ni and the number of vertices in the whole graph. All of that, we go through all of the components, so we have to add up all of the xi's, all of the bit, the blue bits. We get to take all of the parts that were in hi but nothing l nowhere else. And then we want to add up the others. But it's a bit more complicated because some of the greens could have been in many different places. So we just take the union of this of all the green sets instead. Okay, and we can say one more thing about the, about the y eyes is that we know there's at least two vertices in common between any hi and the rest of the graph.
00:23:21.438 - 00:24:17.850, Speaker A: So actually we can say that the sum of the little yi's is at least twice the size of the union of the yi. Okay, okay, so this, this is all set up, which I'd really like to have on a board in the top of the wall that we can then use in the equations, but we'll just try and remember it. Okay, so I guess there's a few more words yet. So every edge of g is in some circuit, and every circuit has at least four vertices. So every one of our maximal r two connected components has at least four vertices. So ni is at least four. Since we're nearly pre connected, we know that yi, the number of bits shared from hi with the rest of the graph, is at least two for all of our q different two reals components.
00:24:17.850 - 00:24:50.302, Speaker A: But because it's nearly three connected, it's actually at least free for all, but at most two of them. So this is this is where I could just say it's great and equal to three for all of them if I just cared about free connectivity. But because we want this nearly word, we just have this one extra little bit for one or two of the sets. But you'll see that that's not going to cost us anything in the end. Okay. Each two reals component is definitely redundantly rigid. So each two reals component has the rank.
00:24:50.302 - 00:25:10.970, Speaker A: The rigidity matrix is the right thing for it to be rigid. It's two ni minus three. Okay. And you can have done p restricted to HR. You can imagine there was some generic framework p because I never said a p in the, in the statement of the dilemma. Okay, so here's an exercise. I mean, it's not so hard.
00:25:10.970 - 00:25:55.686, Speaker A: I just didn't want to try and do this part in the, in the proof because I thought it was a slight distraction from the main thing I was getting across. So I want you to show that the rank of the rigidity matrix is equal to the sum of the ranks of all of these different hi's. So for example, in this k four case, where there are three k four s, take the rank of the three different k four s and I add them all up and it would be five for each of the k four s in that case. Okay, so now we come to the equations. And I might skip back up if I, if I've forgotten at least. So we want to just look at the rank of the rigidity matrix. We just said we can write it as the sum of the ranks of the hi's, and the rank of the his was two ni minus three for each of the hi's.
00:25:55.686 - 00:26:40.234, Speaker A: So from there and there, the rank of g is equal to this sum. Okay, but we know what ni is, so we can express ni is xi plus yi. First of all, we'll just simply take the two outside and just have the sum over n sum of ni because we just get a minus three q times. So we can just take that out as well. So now I want to replace this sum of ni with ni is xi plus yi, and that gives me twice the sum of xi plus twice the sum of y I. Except I've written that twice the sum of y I separately because I want to split them up and I've still got my minus free q. Okay, so, okay, so the sum of xi.
00:26:40.234 - 00:27:18.678, Speaker A: Oh yes. So let's, let's go back up. So remember we had this here. So the number of vertices is the sum of the xi plus this. But if we replace the size of the union with the sum of the yi is greater than or equal to it. We can just put an inequality in. So this gives us, from the blue underlined bit here, we get twice the number of vertices twice xi plus yi plus gives us the two v, the sum of the yi.
00:27:18.678 - 00:27:56.170, Speaker A: This gives us free q minus two. The free q is because it was at least free connected for all, but at most two. So free q minus two, where the minus two is taking one off for the other two to get down to the, where it could have actually been two vertices in the intersection. And then the free q continues on. Then of course, the free q and the free q cancel, and you get two v minus two. So what we've said is that the rank of the rigidity matrix is equal, equal, greater than or equal to, greater than, or equal to equal to two v minus two, which is strictly bigger than what the rank can possibly be. So we've got a contradiction.
00:27:56.170 - 00:28:47.354, Speaker A: So we've contradicted the fact the rank of the rigidity matrix for any rigid graph is twice the number of vertices minus three. So we supposed there were all these different r two connected components and we found a contradiction. So there was actually just one and we were happy. So what we've proved, I said it before, but what we've proved is that if we just look at free connected graphs, and now we're going to forget the word nearly, we're not going to worry about that anymore. If we just look at free connected graphs, then the graph is redundantly rigid if and only if it's two reals connected. So to recursively characterize free connected redundantly rigid graphs, we can just look at free connected r two connected graphs and see what we can say about those. And you'll see in a few minutes that it gives us a much easier way to understand them than I'm aware of that we would be able to do for redundantly rigid graphs directly.
00:28:47.354 - 00:28:59.274, Speaker A: Okay, so the idea. Are there any questions about that? So now we've translated from redundant rigidity to two reals connectivity.
00:29:00.134 - 00:29:03.674, Speaker B: Yes. Could you just go to the third line of the equation again, please?
00:29:05.304 - 00:29:06.084, Speaker A: Yes.
00:29:06.464 - 00:29:10.964, Speaker B: Okay, good. I'd read that wrong. Thank you.
00:29:12.504 - 00:29:13.364, Speaker A: Okay.
00:29:17.024 - 00:29:18.524, Speaker B: Okay, that's good. Thank you.
00:29:19.064 - 00:30:12.556, Speaker A: Great. Okay, so what's about to follow is an idea from matriarch theory called an ear decomposition. And you can see it has some definition that takes a bit of digesting, but I'm not sure I want you to digest it in a huge amount of detail. What I want you to think is that this definition that's coming of an a decomposition is a property that r two connected graphs have, which will allow us to find vertices of degree free in an r two connected graph. And I will show an example after the definition of what happens if the matriarch is the cycle matriidal, where it really is. Forget about matriarch theory and just talk about graphs, and then it will hopefully be a lot clearer. And you'll see by analogy the kind of idea, but I will go through the definition.
00:30:12.556 - 00:31:00.434, Speaker A: I'm just, if you're not so comfortable with matroids, or it's not so clear, then sort of saying it's not necessarily a block to your understanding of the intuition that I'm trying to get across in this part. Okay, so we take a matroid with ground set e and independence condition I, and pick some sequence, a non empty sequence of circuits in this matriid. So it's not necessarily a rigidity matrix of any kind, it's not necessarily one where we understand what the circuits are in any great way, but just some sequence of circuits. And I'm going to take some notation. DJ is the union of the first j circuits in this sequence. And we do this for all possible J's. So there were t circuits.
00:31:00.434 - 00:31:48.984, Speaker A: So we go anywhere from one to t. So this sequence of circuits, c one up to ct, is called a partial air decomposition of the matroid. If for all I between two and t, we satisfy three conditions. So the first one says that your new circuit, CI, has to intersect the union of all the previous ones with something. Okay? The second condition says that your new circuit minus what's in the union of the previous circuits has to have something new outside. So they're sort of obvious things that you would want, you want to sort of be related to the previous bit and have something new so they're easy. And then the third condition is a sort of technical one.
00:31:48.984 - 00:32:52.824, Speaker A: So the third condition says, no circuit satisfying e one and e two. So this is no circuit CI satisfying e one and e two has what's missing from when you take away di minus one from CI, properly contained in CI minus di minus one. So somehow you've chosen the minimal circuit you can add to the union of the previous ones to continue on in your path. Okay? But as I say, the reason why these three conditions are sensible things to be looking at is not necessarily something that you need to worry too much about for the purpose of this lecture. Okay, so a little bit of notation. The set that you get from the circuit CI by deleting what's common to the previous union of the previous I minus one circuits is called the lobe, and we use CI tilde to denote this, this lobe. We're now following a paper of Jackson and Jordan.
00:32:52.824 - 00:33:32.824, Speaker A: By the way, it's their idea to use this sort of matriarch theory stuff in rigidity. Okay, so that was a partial air decomposition. We took our set of circuits. Satisfying these conditions gave us a partial air decomposition. An air decomposition is one of these partial, a decompositions where the union of all the circuits is the entire edge set of the graph. Okay? So for example, it follows that every edge in the graph must be in a circuit, otherwise you have no chance, because otherwise you wouldn't be able to have this. Okay? So as I say, let's think about the cycle matriid.
00:33:32.824 - 00:34:13.648, Speaker A: So if m is the cycle matriid, then circuits are just cycles in the graph. So we can just think about graphs and think about cycles within it. And in particular in undergraduate graph theory courses. For example, the third year graphic course I teach, we prove that every two connected graph has an ad composition of this sort of form. So here it's not, the conditions are not so complicated because you just draw a cycle. For example, you might draw this one and then you have, you draw a path that starts at some vertex on the cycle, finishes at some other vertex in the cycle and goes around. So it's more just about cycles and paths.
00:34:13.648 - 00:34:58.581, Speaker A: And really, if you like what I did, there was a second cycle, but the new thing was just a path coming off and you just keep doing this again and again. And the real crux of this, and the real reason why, at least in my head, the real reason why this is a good thing to do, a useful technique to use that when you're doing this. So in the case of two connected graphs, it's true that the minimum degree is two. So this would be minimally two connected in the sense if you delete any edge, it still remains two connect. So if you delete any edge two connectivity fails. So it's minimal with respect to being two connected. Then it must have an, have a vertex of degree two.
00:34:58.581 - 00:35:36.224, Speaker A: Because in the, say this green one I added over here was the last year in the ear decomposition, the last cycle. Then on this path every vertex would have degree two, except for these guys at the end. So you'd have, you'd have found your vertex of degree two. The case when it wasn't minimal would be if the last ESA was like that and it added just an edge between existing things. But that would, if you get rid of the minimal condition, you could have just, you can't have an edge as one of the ears at the end. So the same idea is what we want to do here. We have circuits, c one, c two, c three.
00:35:36.224 - 00:36:32.754, Speaker A: We have these more complicated intersection conditions and what's new, etcetera. But it's the same idea that in the last circuit, when you finish in c three, there's enough new things here that weren't common to what already existed, that you can find some vertex of low degree, and then we can start playing the structural game we played in the last couple of lectures to find a node we can reduce again. Okay? Okay, so let me give you an example with the two dimensional rigidity matriarch. So here's a graph. It looks a bit like the complete bipartite graph, k, except it has an extra edge between v four and v five down here. Okay, so what I could do, I could have my first circuit in my ear. Decomposition could be the everything except for vertex four.
00:36:32.754 - 00:37:06.328, Speaker A: So if I take away vertex four, then what I have is exactly a copy of k three four, which you can check for yourself as a r two circuit. Okay, then I could take c two to be everything except for v five. Okay, so what did we have to check? We had to check that there was some overlap with what we had before. That's clearly true. For example, all of these were common. There is something new that wasn't there before. Well, v four wasn't there before, and now it is.
00:37:06.328 - 00:37:38.724, Speaker A: So that's true. And we've only added one new vertex. So it's not so hard to check the minimality condition again. But again, we get a copy of k three four as our circuit, and then as our third one, all we want to do is add this final edge, b four, b five. So here the minimality is easy, because we just need to have anything that's a circuit and includes that edge, and that edge will give us something new. So all we need to do is make sure we overlap with something which is, again, trivial. So all we really need is to pick a circuit.
00:37:38.724 - 00:38:09.908, Speaker A: And if you take the graph and subtract vertex seven and vertex eight, then what you get is k three three plus an edge between two of the vertices in one of the components. You have all possible things here, and you have that edge. And again, that's not hard to check. It's a circuit. Okay. Oh, and I even wrote down what the, these lobes are, the c two tilde. So in the c two tilde was.
00:38:09.908 - 00:38:56.244, Speaker A: Remember, v four was the relevant part, so it didn't get v four, v five, but it was the other three edges incident to v four. At that step for c two, and then for c three, the only new thing was v four, v five. So that's just this one. So hopefully this example is also a little bit helpful in understanding these ear decompositions. So I mentioned that our two connected graphs have ear decompositions. This is a general metroid fact from Coulard and Hellestein from the nineties. So for any matriid it has this connectivity property that every pair of edges is contained in a common circuit if and only if it has an ear decomposition.
00:38:56.244 - 00:39:43.346, Speaker A: So we know that we will have this, a decomposition for our free connected two reals connected graph. And that will help us, as I say, to find vertices of degree free. Basically. Okay, so I think I've just skipped past a sentence or two that I had already said. So obviously it was easy to see that r two circuits had vertices of degree free because our two circuits all have this equation. So by handshaking lemma, the average degree is strictly less than four and zero, one and two are not possible easily as well. But it's not so easy to come up with a similar bound to this for redundantly rigid graphs, or for m, or for r two connected graphs.
00:39:43.346 - 00:40:27.004, Speaker A: So we needed a more complicated, but we needed a reason why you have a vertex of degree free, because we want to just use one extension. And so this is what we're going to be able to do. So I need a bit of a technical lemma, which I'm not going to give a proof for, and then we'll see the result. Okay, so I take an two reals connected graph g, let h one up to h two. These are graphs. They're the circuits induced by an ear decomposition, which is really the edge sets c one up to ct of the rigidity matriid. And if there's exactly one circuit, we know that's an easy case.
00:40:27.004 - 00:41:30.530, Speaker A: So let's assume there's definitely at least two circuits in the graph. Okay, so for the, let's let y be the, the vertex set of the final circuit of HTML minus what's already come in the previous t minus one circuits, and x be the vertex set of ht minus y. So y and x are just really telling us what's new and what already existed with respect to this last circuit. Okay, then this is just technical. So I'm not even going to go into really why it's true but what I am looking at is I had some circuits, c one or h 1234 etcetera. And then at some point I have my last one and I have the overlapping part and the new part. Okay, so y is the vertices of this circuit ht, which is not already existing.
00:41:30.530 - 00:42:04.096, Speaker A: So this is y and this part is x in here. So either part a is true, which says y is empty. And so if y is empty that means there's no new vertex. So essentially all y added was an edge. And if it's empty, then the lobe has size one because it's only just an edge. Or y is non empty. And then every edge in the lobe is incident to, to y.
00:42:04.096 - 00:42:49.256, Speaker A: So that means there's no edge like this. Every edge is, is like this or this. And then again, so half of that is kind of self evident and half we're not going to ask you to worry about. And then part b says the size of the lobe, the size of what's new is equal to two y plus one. So the number of vertices out here times two plus one is exactly the number of edges in the whole thing. Okay, so, but again, it's not so hard either part, but I'm just not going to worry you with it. But here's the theorem that sort of, I guess the, the last result I'm going to mention in, in this lecture.
00:42:49.256 - 00:43:35.902, Speaker A: But this is going to be the key towards using what we used for circuits for redundantly rigid graphs in the next lecture. Okay, so I take an two reals connected graph and suppose that if I delete any edge, I fail to be two reals connected. So I'm two reals connected, but minimal in the sense that if I throw any edge away I lose my two reals connectivity property. Then there is a vertex of degree free in the graph. Okay, we've already talked repeatedly about the theorem being true. When you have an arc, when the whole graph is a circuit, they're clearly minimally two reals connected, but it's just true for those. So suppose my minimally two reals connected graph is not a circuit.
00:43:35.902 - 00:44:23.914, Speaker A: Then it has an a decomposition c one up to ct of the rigidity matriarch with at least two circuits in the air decomposition. And these circuits were edge sets. Let the graphs corresponding to them be h one up to HTML. Okay, and as before, y is the vertices of the last circuit minus the union of what came before, and x is the vertices of the last circuit minus what's in y. So what existed before? Okay, so by the minimality of g and part a of the above we have y is not the empty set because that's what I've said here. So if y was the empty set, then the lobe was size one. So it was just adding an edge.
00:44:23.914 - 00:45:02.024, Speaker A: So if we take away that edge, we would get a smaller r two connected graph and we'd violate this condition. So we've supposed a way that that case can't happen. So we know that y is not equal to the empty set. Okay. And then this is a standard fact. So it's true that, I mean, I think I have mentioned this in the previous lecture, but every two reals circuit is free edge connected. In fact, every Rd circuit is d plus one edge connected, for what it's worth.
00:45:02.024 - 00:45:52.660, Speaker A: So since the circuit ht is free edge connected, we can use part B. So remember what part B said that? Just said that the size of the lobe was like this. So the fact that it's two y plus something says the average degree in Y is a bit more than four. So we don't automatically win, but because it's only very slightly more. And we have a number of edges because of the free edge connectivity that don't contribute to the degree because their ends are in x rather than in Y, the two y plus one. And the free edge connectivity takes us to less than two y, really for average degree purposes, and finds us a vertex of degree free over here. Okay, so that gives us the vertex of degree free we want.
00:45:52.660 - 00:46:25.136, Speaker A: And then. So at the start of the next lecture, I'll just finish slightly early today. I won't move to the next set of nodes. But at the start of the next lecture, what we'll do is talk about finding admissible and feasible nodes in r two connected graphs rather than in circuits. We really won't go into the details. So if you're getting sick of combinatorics by now, we will be moving on to other ideas pretty soon. But I will just spend five minutes at the start of the next lecture explaining how, or just at least talking a little bit about the extension from circuits to our two reals connected graphs.
00:46:25.136 - 00:47:00.184, Speaker A: But really, we've done the heavy lifting. Now, in terms of what we're going to do in this course, there's still a lot of technical stuff if you read the Jackson Jordan paper, but for our purposes, we basically got, for everything I wanted to get across in terms of trying to get you some understanding of how it works. And we will just quickly next time, get to the global rigidity theorem and then start thinking about other, other things. Okay, so I'm happy to have questions since I'm gonna. I'm twelve minutes before the hours, so there's lots of time if you want. Or we can just finish up early. So over to you.
00:47:09.904 - 00:47:24.884, Speaker C: I have a question related to the maximal matroids rigidity project, but I'll hold off on that in case other people have other questions. This decomposition idea thing seems very interesting.
00:47:34.284 - 00:47:36.864, Speaker A: There might not be any others, Daniel. It might just be you.
00:47:37.284 - 00:48:01.808, Speaker B: Wait, I've got one. Sorry. The three edge connectivity condition, is that between CT and each other's CI? Or is it. Who knows? Is that between HT and each other? Hi. Or is that between ht and the rest of the dt minus one?
00:48:01.936 - 00:48:05.280, Speaker A: So aht itself is a free edge connected graph.
00:48:05.432 - 00:48:06.164, Speaker B: Yeah.
00:48:06.544 - 00:48:15.704, Speaker A: So remember I had this split into y's and x's where you look at, say, t is two. And I have my first circuit and my second circuit.
00:48:15.864 - 00:48:16.272, Speaker B: Yeah.
00:48:16.328 - 00:48:32.896, Speaker A: And then at the end what I was doing was I was using the count of y, which was just this part over here. So I wanted to be thinking about the sub graph induced by y and finding a vertex of degree free in g that was located in this red part.
00:48:33.080 - 00:48:33.560, Speaker B: Yeah.
00:48:33.632 - 00:48:41.444, Speaker A: So what I was saying the free edge connectivity gave me was that say, okay, there's some vertices in the, in here and some vertices in here.
00:48:41.744 - 00:48:43.528, Speaker B: And those two sets are.
00:48:43.696 - 00:48:58.204, Speaker A: But because it was free edge connected, there was at least three edges across here, which gave me at least three things that didn't count towards the degrees in the two y plus one. So it was just enough to push the two y plus one under and apply handshaking. Yes.
00:48:58.244 - 00:48:59.384, Speaker B: Okay. Thank you.
00:49:20.424 - 00:49:23.124, Speaker A: Daniel. I guess it's on for you.
00:49:23.664 - 00:49:33.208, Speaker C: Yeah. So have you thought about this ear decomposition idea as a way to understand, like, maximal matriids with, you know, a set of prescribed circuits?
00:49:33.256 - 00:49:33.464, Speaker A: Right.
00:49:33.504 - 00:49:46.814, Speaker C: Like, I know, obviously a circuit itself is not going to have a very nice or interesting irid composition, but like, you know, if you're in, say, the minimal, you know, matriid with respect to.
00:49:47.394 - 00:49:47.754, Speaker A: Yeah.
00:49:47.794 - 00:49:55.978, Speaker C: K four and k three three. Right. Like. And you have a circuit in that. Like, you know, if you add some edge, you're, you know, maybe. Maybe you're too connected or.
00:49:56.026 - 00:49:56.226, Speaker A: Sorry.
00:49:56.250 - 00:50:02.014, Speaker C: Maybe you're connected in the corresponding matrix. Maybe you're not. But like.
00:50:02.914 - 00:50:03.498, Speaker A: Yeah, I don't know.
00:50:03.506 - 00:50:20.328, Speaker C: Is there, is. I guess. Have you, have you thought about like, using your decompositions to kind of get a handle on this? I mean, is this. Or is there, like, this seems like a nice tool for this, but if you know, you haven't thought about this and Shinichi and Bill haven't thought about this. I'm worried it's doomed.
00:50:20.376 - 00:50:51.634, Speaker A: So yeah, yeah, so I've never even thought to try. So maybe I should think about it a bit. But as you say, that, that bill who came up with the t ball, came up with using ad compositions in rigidity, maybe would have thought about that quite quickly in their sequence of papers for maximal matriids. So maybe somehow that's implicit in some of the stuff they do. Or maybe it doesn't work. I'm not sure. Okay.
00:50:51.634 - 00:51:00.994, Speaker A: I don't immediately see a way to get started using it for maximum atroid problems.
00:51:02.234 - 00:51:37.714, Speaker C: I mean, I guess like it would come down to like take a circuit that's not one of your prescribed circuits, add an edge. Maybe that's too connected, maybe it's not. If it's too connected, it has an ear decomposition and then keep going. And then maybe you get to something, you know, a way to essentially like generate, you know, generate your circuit from your, like things that you assert are circuits. I don't know what this, the set needs a name. This, you know, set of circuits you start out with.
00:51:45.374 - 00:52:31.414, Speaker A: No, I don't think I have a good answer for you, but it's an interesting point to think about a bit. So when you're doing maximal matriids, at least in my head, I'm usually thinking about independent sets or about circuits. And both cases don't have interesting ear decomposition. It's only when you very redundant that you have lots of circuits and lots of interesting ad composition to play with. And in that case, I don't know what you can actually learn about the maximal matriids.
00:52:32.354 - 00:53:50.244, Speaker C: I mean, I guess like sort of the thing I noticed when I was playing around with circuits of this, like, you know, k matriid is that like basically every circuit you can sort of, you know, on up to like, you know, eleven vertices or until I sort of ran out of patience and computational power. Like you can tell that something is a circuit by finding either an almost k three or an almost k four, which is, you know, a k through three without an edge, or a k four without an edge. So in other words, like there's an always an edge you can add such that you see like, oh, this is just, this is explainable in terms of like smaller circuits. And so what if you just add an edge, like just, you know, you know, without being too strategic about it. Like, or maybe there's always an edge you can add such that you're oh, maybe here's the thing. Maybe you can always add an edge to your circuit such that the resulting graph is, you know, too connected or connected in the, in the matrix sense, then this gives you an ear decomposition and you know that that new edge is going to have to, you know, play some like pivotal role in it. Right.
00:53:50.244 - 00:53:56.804, Speaker C: And then this sort of like, you know, this, this gives you kind of like an induction step, right, where you can.
00:53:57.584 - 00:54:10.594, Speaker A: And these are all, is this kind of what they do in the closure operator definition of the maximum matrix, though? Because you sort of, you're adding, you're throwing in implied edges, aren't you? Yeah, yeah, same way they do.
00:54:11.774 - 00:54:15.514, Speaker C: Yeah, yeah, I mean it's that same, yeah, it's a similar idea.
00:54:18.694 - 00:54:53.894, Speaker A: I mean, also one comment is that I strongly suspect. I know you're not talking about the rigidity matrix. You're talking about this matrix completion one. Yeah, but for example, if you talk about the three dimensional rigidity matriarch, then if you're very small, everything is just gluing k five s together and there's double banana kind of things. But I think that's just, that's very much a very small graph property and that if you're big enough, it won't be true that you'll, you just have k three, three minus an edge and k four minus an edges explaining everything. There'll be much more subtle reasons higher up, I guess.
00:54:55.394 - 00:54:58.050, Speaker C: Yeah, I guess k 55. Right. That you can't.
00:54:58.122 - 00:55:02.714, Speaker A: Yeah, well, that's a rigid circuit, but yes, things like that.
00:55:03.814 - 00:55:12.114, Speaker C: Okay, so if you stick an edge into k 55. Yeah. Is what you get two connected?
00:55:14.054 - 00:55:21.094, Speaker A: Yeah, because it's got a spanning circuit. So you take k 55 as the first one and then any circuit containing the last edge is at the next one.
00:55:21.214 - 00:55:21.494, Speaker C: Right.
00:55:21.534 - 00:55:41.354, Speaker A: Okay. I have to have to add up the numbers, but k 45 plus an edge maybe is a circuit as well. I'm not sure. Okay. All right. Okay.
00:55:41.434 - 00:55:46.114, Speaker C: So the ear decomposition you get is not interesting because k 55 is just going to be one of the circuits.
00:55:46.274 - 00:55:48.374, Speaker A: Yeah. Okay.
00:55:59.494 - 00:56:20.804, Speaker C: But maybe this can be sort of like a distinction between like possible complexities of these kinds of matriids, right? Like, yeah, like in the, in the 2d rigidity matriarch, everything is explainable in terms of k four, I guess. Or is that, is that true? That seems true.
00:56:23.544 - 00:56:28.744, Speaker A: I'm not quite sure what explainable in terms of k four means, but probably if you phrase the question rightly, yes.
00:56:28.864 - 00:56:47.344, Speaker C: Like you can always. No, you don't always have an almost k four but you can always, like, every circuit consists of, like you can take two smaller circuits overlapped in a certain way and then remove a single edge. Is that true?
00:56:51.884 - 00:56:56.824, Speaker A: I think that was a result of Ileana's from the workshop a couple of weeks ago.
00:56:57.364 - 00:57:02.024, Speaker C: Oh, no, but those are okay. But she had the issue where those weren't always circuits. Right.
00:57:04.084 - 00:57:12.604, Speaker A: In general, that move doesn't preserve circuits, it just preserves dependent. But she had some way around that that I haven't read. Haven't found the paper yet to read.
