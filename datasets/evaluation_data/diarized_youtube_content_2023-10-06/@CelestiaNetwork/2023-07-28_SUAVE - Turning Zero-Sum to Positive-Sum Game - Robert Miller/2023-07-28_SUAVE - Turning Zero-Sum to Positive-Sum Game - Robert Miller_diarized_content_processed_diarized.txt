00:00:00.090 - 00:00:56.106, Speaker A: I'm Robert Miller. I have a talk here, obviously. And in thinking about what to talk to you all today about, I thought first, should I say something about PBS? It's PBS day and I thought, no, you probably have heard something about PBS before at this point. You know about it, someone else will talk about it. Then I thought, should I talk about Suave? We just released a new blog post outlining an architecture introducing the mevm. I thought, Well, I'm not sure that's the most interesting thing since you can go and read my blog post on how the mevm and our latest design for swap works. And looking at the past schedule that I had this week, it seemed that there are a lot of new chains and domains that are interested in integrating PBS and they're interested in knowing about how SWAV can support them if they do support PBS.
00:00:56.106 - 00:02:16.338, Speaker A: And so that's sort of the premise of my talk, is how does Suave support many different domains, heterogeneous domains that have different virtual machines, different ways of ordering? And what is the architecture that enables that? And I'm going to begin by giving you a little bit maybe these slides are a little different than I expected, but I will begin by giving you some context on the thinking behind Suave and where we were a few years ago when the early ideas of Suave started to coalesce for Flashpots, something like late 2021. So this is kind of the first idea. Mev is fundamental, it's fundamental to every domain and that's for a few reasons. The first is this ability that blockchains give you to make commitments and you can commit to pay for some arbitrary state and that then alters the incentives of the party that's ordering transactions. Second is that we use this ability to commit as a part of a common design pattern in building permissionless systems. So these commitments are a fundamental part of something like DeFi in liquidations. You give a permissionless bribe to anyone who will update the state of your collateral when prices have moved.
00:02:16.338 - 00:03:06.258, Speaker A: Or in CryptoKitties, you give a permissionless payment to anyone who calls a function to update the state of the system. So this permissionless bribe, this permissionless commitment that anyone can capture is kind of this common design pattern to the systems that we're building. And lastly, mev is fundamental because even if you don't have mev on one domain, there exists mev between the boundaries of different domains and that creates value extraction opportunities. If there was no mev on Ethereum, there would still be mev between Ethereum and BSc as an example. So that was the first idea. Second idea, mev has these negative effects. So rational actors pursuing their incentives, pursuing these permissionless commitments that make you money are going to create negative externalities in their wake if you don't deal with it appropriately.
00:03:06.258 - 00:03:51.442, Speaker A: Says things like priority gas auctions, spam, latency wars that lead to wasted block space network load at the limit it can destabilize consensus itself. Which is where Mev began with Flushboy 2.0 economic centralization of validators integrating with trade firms and sandwiching, et cetera. There's all sorts of ways in which mev can have negative effects if you don't properly deal with this. And we unfortunately have a slightly old version of my slides, but we will roll with it. So what do you do about this? What Flashpots is trying to do is our project called Suave. So that stands for the single unified Auction for value expression.
00:03:51.442 - 00:04:54.250, Speaker A: It's our project attempting to address this really ambitious problem of mev being fundamental to every single domain. It having negative effects and there being many different types of domains in the future that have heterogeneous different designs. So there are non EVM chains, there are chains that will order with first come, first serve and we can't just copy paste Flashbots and other people's mev infrastructure to every single domain. How do we offer mev solutions to many different domains in a way that is actually decentralized? And what I want to get across today is that there's these two key ways that Suave addresses this in the broadest way possible. And again, we're rolling with an old set of slides, but that's fine. So the first is the mevm we just announced this last week. It's this modular, expressive composable programming framework that allows developers to leverage credible and private compute.
00:04:54.250 - 00:05:28.226, Speaker A: And I'll dig into that a little bit more in a moment. But what that means is you can take what is currently centralized off chain mev infrastructure and turn it into a smart contract on a decentralized blockchain. And the second is what we call execution predicates. This is arbitrary preference expression on the execution you desire. Again, we'll dig into that. So first the mevm, it's a modified version of the EVM that Flashbots is launching. We've taken the normally EVM, we've added new pre compiles to it for mev use cases.
00:05:28.226 - 00:06:05.618, Speaker A: That's really useful because by exposing every primitive in the mev supply chain as a pre compile, you can program your mev infrastructure as smart contracts on a blockchain which you think is really cool. And moreover, you can do it within the familiar developer tooling of the EVM. You can do it in foundry, you can do it in your normal developer environment. And it really lowers the barriers to entry of deploying new applications because anyone who knows solidity can do it. So how does the mevm work? This is what the architecture looks like. There are a few stakeholders, a few components. I'll run you through each of it.
00:06:05.618 - 00:06:47.546, Speaker A: So at the core of Suave is this mevm chain that we're launching. Again, it's standard EVM with extra pre compiles for mev use cases that's things like take a transaction, simulate it, return me the result. We have a confidential data store in the middle. You can think of this as a data availability layer where encrypted data is stored because there's too much data to store at all on chain. So this is decoupled from the chain state itself and we have an execution node. This is not a consensus node, but it's tightly coupled with the chain. It's a node that provides private and credible compute that can be called by the mevm's pre compiles.
00:06:47.546 - 00:08:08.866, Speaker A: And the way that these different stakeholders interact with SWAV is developers define contracts like order flow, auctions, block building algorithms, centralized RFQ routers maybe users send what we call bids. That's a combination of contracts that they authorize to access their private data and some private data like a signed transaction and executors who are your arbitrageures, your searchers builders are looking at bids, seeing how you can interact with them and trying to backrun them, merge them, do mev things. Finally, Suave produces blocks for proposers that are listening to them to dig into the notion of execution nodes a little bit more because this is a really important concept. The actual chain swap chain itself stores what bids are pending. It doesn't store any private data that's stored in this off chain confidential data store, but it registers a user's bid. So a user saying like hey, I have this private transaction, I want it included on chain. And it also registers these contracts that developers have programmed their mev applications in and those contracts, when the user authorizes them, are executed within what we call execution nodes, where an execution node will read the code of a smart contract and execute it accordingly.
00:08:08.866 - 00:09:07.050, Speaker A: I'll give you an example in a moment, but as an example, a smart contract might say simulate this transaction and allow a searcher to try to backrun it and if the searcher successfully backruns it, send that on to a blockbuilding algorithm. We run these execution nodes in trusted execution environments like in SGX to provide some level of integrity and privacy to it that isn't contingent on centralized trust in a party like Flashpods. This is an example mevm contract. So it's standard Solidity with a couple extra pre compiles. So you can see here the fifth line we get ethereum state, something that you normally can't do within Solidity. We're deploying this on swap chain but we can have access to the latest Ethereum Mainet state. It takes a bunch of bundles that are sent as inputs, simulates them, so it's simulating ordered lists of transactions in its ethereum main net state.
00:09:07.050 - 00:10:27.170, Speaker A: We're getting the gas price of those, sorting them, trying to apply them to a pending block. So it looks really similar to Solidity because it literally is. But it is able to leverage these new mev precompiles that call out to the credible private compute provided by the execution node in a trusted execution environment to let someone program a block builder which right now is this monolithic thing off chain in solidity on swavchain which we think is pretty cool. And one of the ways that we are thinking about scaling suave to many different types of domains is that you don't need to only run EVM type execution in execution nodes. So you can have an execution node that supports WASM, or you can have an execution node that supports any weird roll up VM that exists and then users can program their smart contracts to call out to that within native EVM on swab chain. So you can do block building for non EVM chains so long as you have these execution nodes for different domains. So for every given VM we'll have execution nodes that folks will run in these trusted execution environments and you have this single unified platform for writing mev infrastructure that can access many different types of execution nodes.
00:10:27.170 - 00:11:51.994, Speaker A: That's one way that we are attempting to address mev across many many different types of heterogeneous domains. The other way that I think is really interesting to talk about is this notion of execution predicates. You may have heard this as intents or preferences before, but this lets users define arbitrary conditions that they want to be executed for. So in familiar Nev use cases, I want to pay x if transaction hash zero x baba is included in block 100. I want to pay only if this array is included or things that you can't do today, which might be interesting for some use cases like I want to pay if my contract emits a log. And why I'm talking about this is because this unlocks new searching strategies that you can't do with current mev infrastructure today. So as an example, I want to pay one ETH if you call my contract and it emits a log, provides an incentive for either latency or spam searchers to try to hit your contract until it's successfully called, right? So you could deploy this contract on Suave, have a corresponding contract on a low latency domain where spam is the dominant strategy, and it provides an incentive for this marketplace of people to spam your contract on your behalf.
00:11:51.994 - 00:12:58.574, Speaker A: So democratizing mev search on other types of domains even if they're not natively integrated into PBS itself, which is very interesting. Or cross domain I want to pay for x state on Ethereum and y state on Arbitrum gives this incentive for atomic execution across two different domains. And since you are programming this in solidity as a smart contract you can get as bespoke as you want with these execution predicates which is really interesting because searchers can express or users can express conditions that are more complicated than anything the market currently supports at the moment, which either incentivizes people to collaborate together to execute on these conditions or it incentivizes the creation of new infrastructure to be able to support more complicated types of predicates. So that was my talk. Slides got a little bit screwed up, so I had a little bit more content, but that's okay. So thanks for listening. That's how we plan on addressing many different domains for Suave, regardless of whether you are PBS or not PBS.
00:12:58.574 - 00:13:24.380, Speaker A: We have a couple different call outs here, so if you're interested in integrating as a roll up, please reach out. If you're a developer interested in building Mev applications on Suave, please reach out as well. Wallets if you're interested in Mev Redistribution, searchers for private order flow, and that is a QR code if you want to work at Flashbots. So thank you so much. We really appreciate it. I think we have Mike coming and talking about PBS next.
