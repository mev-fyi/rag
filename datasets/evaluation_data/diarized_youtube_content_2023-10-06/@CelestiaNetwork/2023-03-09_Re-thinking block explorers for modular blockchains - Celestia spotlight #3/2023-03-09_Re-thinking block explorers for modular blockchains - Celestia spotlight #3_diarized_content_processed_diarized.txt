00:00:00.490 - 00:00:39.242, Speaker A: Hello, all you modularists out there. Welcome to another episode of Celestia Spotlights, where we hear from the people at the forefront of the modular movement. I'm Nick White, COO of Celestia Labs. And today my guest is LZRs. He is building modular cloud, also known as Celestia Scan. And they're building a block explorer but also cloud services for modular blockchains. So he's going to tell us all about what they're building and then we're going to dissect and unpack all this really interesting content and the vision that he has for modular cloud.
00:00:39.242 - 00:00:43.340, Speaker A: So, LGRs, welcome and take it away.
00:00:44.590 - 00:01:27.000, Speaker B: Thanks so much, Nick. I'm glad to be here. So today, what I want to talk to you guys about is what the implications are as blockchains move from monolithic architecture to a modular architecture. And the thesis I want to put forward here is that we're going to have to not only rearchitect our blockchains, but we're also going to have to rearchitect the tooling and basically everything in the ecosystem around these blockchains to accommodate this new architecture. And while this might sound like a headache or a pain, it's actually going to also unlock a bunch of capabilities that we previously didn't have. And ultimately it's going to be a boon for innovation and it's going to make everything a lot better. So that's what I'm going to talk about today.
00:01:27.000 - 00:02:19.830, Speaker B: This is a presentation that I have given before, and so this deck does have some information that's a little bit old. So we have already launched our block Explorer, celestiascan.com. You can go check it out. The block explorer for Celestia, we have dime scan for dimension, and we have explorer modular cloud, which is our main generic block explorer. So go ahead and check that out. So today I want to focus on block explorers and a lot of people who are building in the modular space. Sometimes they'll ask me, why are you building a block explorer? Why don't we just use existing block explorers that are honestly really good and we can just use them in a modular context? And so what I want to argue today is why it makes sense to actually have a special block explorer for modular blockchains.
00:02:19.830 - 00:03:02.754, Speaker B: So before I do that, I just want to lay down some first principles just so everybody's up to speed on Celestia and therefore up to speed on how modular blockchains work. And this will also show you how I think about all of these things. And it will all make sense in the end. So you can kind of think of Celestia kind of like a platform that roll ups run on top of. And so there's users, and the users use roll ups, and roll ups have sequencers. So a user might send a transaction, and then another user might send a transaction to a sequencer, and this sequencer is going to package up these transactions and roll them up, so to speak, and put them into a block or a batch, which is just a collection of blocks. And that will go onto Celestia.
00:03:02.754 - 00:03:39.186, Speaker B: And Celestia has this ledger, and people can put data onto it, and that's what sequencers do. And so now let's say there's another user up top, and this user does another transaction, and this time it's to a different sequencer, and each color represents a different roll up. So in this case, this user is using a different roll up, and this sequencer for this pinkish purple, whatever color that is, this roll up, it makes its own block. And this block now goes into celestia. And as you can see now we have two blocks on Celestia from different rollups made by different sequencers. And these are in a specific order. And this process just goes on and on.
00:03:39.186 - 00:04:10.966, Speaker B: And celestia keeps collecting you. And you can kind of conceptualize this. Think of each block here as a piece of data put onto Celestia. And each color is a different roll up. And inside each of these blocks is an ordered list of transactions. And therefore, what this makes is this is actually Celestia provides an ordered list of transactions across many different roll ups. So this first square has a bunch of transactions.
00:04:10.966 - 00:04:43.910, Speaker B: The second one has a bunch of transactions. And this is all just ordered data. So it's an ordered list of data. And what Celestia enables is it provides this thing called the namespace Merkel tree, which allows you to look up certain data while ignoring other data. And this is very efficient process. And so one way you can think about this is like a filter on an ordered list, like a simple filter function on an ordered list. So in this case, celestia is operating on this ordered list of the consensus data, and it's filtering by namespace.
00:04:43.910 - 00:05:24.718, Speaker B: And then if you want to think more about what a rollup actually is, you can conceptualize it like, this roll up is like a reducer on this list of filtered data on celestia. And so this is kind of a functional way of thinking about a roll up. And this is, I think, a very useful mental model. So let's just run to a quick example. So we have all this data on celestia from different rollups. Now we filter out each color, and these are the namespaces for each roll up. And now we run a reducer function on each of these lists of data, and we get some sort of state calculation.
00:05:24.718 - 00:06:10.962, Speaker B: And this is how a rollup works. And so one cool thing about celestia that I really like is that originally it was called lazy Ledger, and the name lazy ledger alludes to this thing called lazy evaluation. So went ahead, too. So lazy evaluation is basically, without going into too much detail, the normal way that you would do something is, let's say you're creating a list of numbers. You would go and you would add each one independently to the list, and then you would go and access the one you want. Well, that's how it worked in python two with the range function, and in python three, they implemented it with a lazy evaluation where the range function returns a funk. And then you can just resolve the third element whenever you need it.
00:06:10.962 - 00:06:43.838, Speaker B: And so this is actually a way quicker way because you don't have to calculate the entire list. Instead, you just calculate the element that you want on demand. It's called lazy evaluation. You're lazy until you need to evaluate. And so if you look here on the left, this is an official Celestia graphic on how Celestia works. There's the base layer, which is Celestia, and then there's the execution layer. And on top of that, there are these roll ups, or the roll ups are the execution layer, actually.
00:06:43.838 - 00:07:19.514, Speaker B: But here I have this in can define each of these roll ups, a, B, and C, like this. It's actually, you can just represent it almost as a simple function. And of course, this is for how this would be a sovereign roll up, which doesn't have a settlement layer. And when you bring a settlement layer into the mix, it does get a little more complicated. But you can still think of it this way. And essentially, the way I like to think about it is that this is a lazy ledger with all of these roll ups running on it. And when you run a node for, let's say, roll up a, you are actually forcing an evaluation on this function.
00:07:19.514 - 00:08:09.602, Speaker B: And similar with b and C. So in a sense, when you're using Celestia, you're running all of the roll ups all at the same time, simultaneously. And this includes all the, like, if one roll up forks, you're actually running both forks at the same time. And any potential fork, you're also running that but you're just not evaluating all of them because that would be a ridiculous amount of compute. So this is a really cool system. And this brings us to the modular block Explorer and we'll see how a modular block Explorer fits into this mental model really well. Okay, first let's talk about what is a block explorer in general, a block explorer is in my opinion, I like to define it as a web user interface for a full node.
00:08:09.602 - 00:08:46.994, Speaker B: So here you have like a command that goes for a bitcoin node and you can run this RPC command, but then this will return you the same data that's displayed on this bitcoin block explorer that I have depicted below. And so this is kind of how it works. This is how a block, I like to think about how a block explorer works. You have consensus data, which is just ones and zeros, some binary data, and there's some protocol that goes and retrieves this data from a peer to peer network and you get this ordered list of data. But data by itself is meaningless. It doesn't mean anything to humans. Humans can't understand it.
00:08:46.994 - 00:09:46.310, Speaker B: So what you need to do is you need to take the data and you need to decode it and you need to parse it into some structure that is human readable and human understandable. And then if you have smart contracts or applications running on a blockchain, you then need to execute those applications and calculate the state of the blockchain. And so that's what a block explorer does. It takes this consensus data and it displays it in a way that's understandable, in a structured way that's understandable, and it gives relevant state and transaction information on the web. And so a naive approach to making a block explorer in a modular context would just be to take a normal block explorer and you would just do one for each module. So you would have, Celestia would have its own block explorer, and then a roll up on Celestia would also have its own block explorer, and a settlement layer would also have its own block explorer. And that will be okay.
00:09:46.310 - 00:11:03.066, Speaker B: But I don't think that that is actually the best fit for this architecture. So what I am setting out to build is something that looks more like this, where the block explorer actually takes into account all these different execution paths. And what it does is it eagerly evaluates as many different useful interpretations of the data as possible. And also it is also programmable so that it can execute and calculate any state that may not have already been cached and made available for the user. And another way that you can kind of think about this is that you have all these different protocol calls that are all interconnected, and this is going to get way more complex as the modular architecture matures. But I would like to point out that this is similar to kind of like a microservices architecture that people use in web two. And as people have shifted from a monolithic back end to a microservices back end, this has unlocked a lot of capabilities in terms of scaling, but has also required a lot of new tools.
00:11:03.066 - 00:11:35.706, Speaker B: So this is kind of analogous to what we're trying to do here, is make new tools that enable this new form of scaling. Okay, that's a lot of theory. So let's just talk about the direct benefits of what something like this could provide. So here is a trade off curve, and this is not a trilemma, but this is something where people will often not be able to hit all three of these. So let's say you want to build a block explorer for your roll up. For example, you could use an off the shelf block explorer for your roll up. Now, the downside of this is it's going to be easy to set up.
00:11:35.706 - 00:12:17.350, Speaker B: It's going to be pretty good. It'll have some really great features, but maybe it will lack some features that will show you, for example, where your data is in the data availability layer or something like that. But it's pretty powerful. But the problem is it's not flexible because if you deviate from an architecture, a common architecture like, let's say you have a cosmos chain and you want to actually deviate from Cosmos standards, then you can't do that. You're going to lose compatibility and it's going to break things and you're going to have to adapt it. Basically going, this approach is going to limit your ability to innovate. So another option that you could do is you could actually just build your own block explorer.
00:12:17.350 - 00:12:42.974, Speaker B: In this case, you're going to have kind of two problems. One is you could either build a simple block explorer and that will be really easy and it can be flexible. And even if you're innovative, you can still make it work and it'll be easy to do. But the problem with that is that it's not going to have a lot of the capabilities that you would want it to. It's not going to be very powerful. But you could then, of course, say, well, I'm going to make it powerful. I'm going to do a great job.
00:12:42.974 - 00:13:10.602, Speaker B: I'm going to make it a really good block explorer that works for my new innovative architecture that's different than anything else that's ever existed. Okay, great idea. The problem is that's hard. So now you're diverting resources away from your innovative project and you're putting it towards this. So this is kind of a tricky situation that people get into. But we do have a solution and it's to use a modular block explorer. So this is how it works.
00:13:10.602 - 00:14:10.380, Speaker B: How can we do this? Let me show you. So basically what we do is we have this network of integrations and we are going to integrate with everyone. So when you are building a new piece of this modular blockchain stack, you're going to be connecting to lots of different layers and lots of different modules and maybe you'll be providing a module that other people are using or maybe you're going to just be building an application that's utilizing many choices from a menu of different modules. And so we are going to already have all of these modules integrated into our system. So it's just a matter of selecting what you're using and we will already know how to handle those components of what you're building. So when you integrate with us, you only need to show us how to integrate with the thing that you changed. So that's a very simple, in many cases that's a very simple process and we're working hard to make this very easy for you.
00:14:10.380 - 00:14:47.506, Speaker B: When you are normally building a blockchain and this includes tooling for blockchains, including block explorers, you have to consider all of these things in the modular context. What we want to allow you to do is just to focus on the innovation. You tell us what you changed and we will know how to handle how you're talking to data availability, how you're talking to settlement, we'll be able to pull that data. We'll be able to show the relationship between your roll up and the other protocols that it's connecting to. So let's just go through one concrete real world example that's live right now. Dimension. Dimension.
00:14:47.506 - 00:15:28.662, Speaker B: You can go to dymscan.com, Dimescan, or you can use any of our explorers explorer modular cloud and you can go and you can look at dimension data. And currently there is the Dimension hub which is the settlement layer, and a roll app which is a roll up. And in the future people are going to be deploying their own roll apps and it's going to be a way that you can scale your blockchain based applications. So if you want to create a new roll app using their toolkit and connecting to their settlement layer. The good thing is we already have this integration, so we will be able to make it effortless for you to just send us the, you just sync your GitHub, we'll clone the code, we'll run it. We already know how rollouts work.
00:15:28.662 - 00:16:32.390, Speaker B: If you don't do anything extremely technically different, we'll be able to deploy this in one click and we'll be able to connect your data with all the data throughout the modular stack. And as a result, there's a lot of cool implications of that. But even if you decide to change how your roll app works technically, we'll also make it easy for you to provide a function that can define the difference of your roll up and how we expect it to be. So it'll be very easy to sync any sort of innovative protocol into this context and one of the other benefits so you're going to get a block Explorer, you'll have a roll up, you'll instantly get a block explorer as soon as you register with the hub so your users can start understanding what's going on on your chain and developers can start working efficiently. But we also are deploying a cloud platform and that's why we're called modular cloud. So our block Explorer is free, it's open source, it always will be. Go ahead, check it out on GitHub.
00:16:32.390 - 00:17:28.982, Speaker B: Modular cloud Explorer. But the way that we're making money is we are building a cloud platform. So also when you integrate with our platform, not only will you get a free block Explorer, you're also going to get a whole suite of APIs and cloud services that your users and developers in your ecosystem can use from day one. So you do a simple integration, maybe you have an app that fits a formula, it's instant deployment. Or you have something that where you're innovating on the technology side, not on the application side, you write a simple integration, you get a block explorer and you get APIs and other services. And we hope to have a huge offering of services for you such that you can have cloud parity with Ethereum or Solana or any other major established ecosystem. You are no longer going to be at a disadvantage by innovating and going your own way, starting your own chain or protocol.
00:17:28.982 - 00:17:46.660, Speaker B: You can start it, you'll integrate with us easy, and we can provide you everything you need for developers to start building on day one in your ecosystem at scale. And yeah, so go check us out at modular Cloud, or you can follow us on Twitter at modular cloud one.
00:17:47.510 - 00:18:44.514, Speaker A: Thank you wow, thank you, lzrs. That was incredible. There's so much to unpack there. I first just want to say that I love the mental model of lazy evaluation for Celestia and how you have all this data and you first filter out the data that's relevant for your roll up or your application, and then you run some kind of evaluation over it, and that gives you sort of like the output state. That's a really amazing mental model, and I hope that that gets shared more broadly in the modular ecosystem. And the vision of, I think, modular blockchains in general, celestia being one piece, is that people should be able to deploy their own blockchain in one click. And there's a lot of different elements to that.
00:18:44.514 - 00:19:34.740, Speaker A: One is you need to have functioning, consensus and data availability layer like Celestia. You need to have some kind of roll up sequencer out of the box and you need all these tools. But another piece is outside of the core. We tend to think mostly just about the protocol, but outside of the protocol are tools that you just assume and you need for usability of the protocol itself. And a block explorer is one of the really key ones. And the vision of a developer being able to deploy their roll up with one click, but not just their roll up, but all the associated infrastructure, is really important and a beautiful vision. And I think this is going to be a very important piece of infrastructure for the modular stack as a whole.
00:19:36.650 - 00:20:13.230, Speaker B: Yeah, I totally agree. I think that we're just getting started in terms of what we're seeing in the developer experience. It's so exciting to see people working so hard at making these roll up toolkits and roll ups as a service. And it's going to be so easy to deploy a new decentralized application that has such high security guarantees, and you're going to basically just get a whole bunch of tooling. It's going to be amazing, it's going to be effortless. I think it's going to be as easy to deploy a roll up, I mean, you guys say as a smart contract, I love that. But I also think it's too hard to deploy a smart contract right now.
00:20:13.230 - 00:20:46.762, Speaker B: I think it's going to be as easy to deploy a roll up as it's going to be a lambda function on AWS or even one of those wrappers around lambda functions that some SaaS companies provide, where you just like something that versel. For people who do front end development, you'll know versel is a very easy platform for deploying websites and you just say versel now or they used to have this thing called Zeit. You say Zeit now and it just uploaded your website and it would be live with one command. I think we're heading towards a developer experience that is that easy.
00:20:46.896 - 00:21:58.290, Speaker A: I love that I found someone who's even more bullish on modular blockchains than me. So I have a question for you, which is, how standardized do you think this will be, or will it be super diverse? Because one of the things that you said is like, well, now that you're supporting dimension, right, and you understand the sort of the roll app model, it'll be really easy for you to basically support anyone who deploys a new roll app because it kind of follows sort of the modules that you already understand and sort of the format that you already understand. In that one slide you had, here's basically a menu of someone like a developer who's deploying their thing, like, okay, choose this execution model, choose this data availability layer, choose this settlement function or what have you. But that depends on the fact that there's sort of a finite set of those things. But also part of the modular vision is that this is customizable. So how do you see the balance between customizability and sort of standardization in the future of infrastructure?
00:21:59.590 - 00:22:50.690, Speaker B: Yeah, that's a great question. So basically, one of the ways that we architect our software differently than other people in this space is that we are optimizing towards flexibility. And so there's often a debate that engineers will have about whether to build a system that's very, in a very general way, or to build a specific solution that's easier to get out and probably works better for any given solution. And this debate always happens whenever anyone's trying to decide how to build a new product. And the reason there's no set answer is because it depends on the context. And in this context, we believe that the modular architecture shifts things towards the need for tooling to be more flexible, because there's going to be a huge diversity of different options. So we are building our system in a way that is, some might say over engineered for the case of n equals one.
00:22:50.690 - 00:23:50.998, Speaker B: But in the case of n equals many, we're focusing on building things in a general way that where if you do something different, you can plug into a general framework that will be able to work with the way that you do it. So that's a huge focus for us, is the developer experience of syncing a completely new innovative protocol. And for example, we're working with Eclipse, we're working with dimension, these are two very different projects. Eclipse is building a solana virtual machine that runs as a roll up on Celestia. Dimension is building a cosmos based roll up, and they have a settlement layer, and these are very different projects. And we're also supporting Solana virtual machine, ethereum virtual machine. So we're already dealing with a good amount of diversity, and so we want it to be very easy for people to self service integrations onto our platform for free.
00:23:50.998 - 00:24:34.514, Speaker B: That's a huge key piece because, as you said, people are going to be selecting from the menu of integrations. So we want to have every integration. Unlike other companies, we don't want to charge for integrating with our platform. We'll charge people who want to retrieve data from us or run computations on our cloud platform. And the onus is on us to provide really great tools that are useful for developers. But we want to have that data set of integrations where we have all the data from everyone we know, all the state of every chain, every transaction, and we know how it all works and we have it all connected. We understand the relationships between all of these different entities, and we think that's going to position us in a really great spot so that you can come along, say, I'm using these things.
00:24:34.514 - 00:24:56.854, Speaker B: I'm not using these things. I have my own settlement layer. I have my own roll up and my own settlement layer. We're going to do these parts differently, but we're still using Celestia, so we can help you with that. And then we make it easy for you to integrate your other things and you have a settlement layer. Maybe other people want to use that, too. And so now we're going to make it easy for anyone using your settlement layer to use your settlement layer.
00:24:56.854 - 00:24:58.860, Speaker B: So that's basically how it works.
00:24:59.470 - 00:25:55.120, Speaker A: Love it. And the other cool thing that people might not be aware of is that in this new model of block explorers that you're building, you can actually, it's not just like one single blockchain. Let's say I was exploring the roll app on the dimension chain. It actually shows me, okay, it's settling to the dimension hub, and I can click in and go to the dimension hub and it says, oh, well, all this data is being posted to Celestia. I can then kind of navigate to Celestia. So what's really cool is that it's now kind of like this, the connections Explorer, like a multi chain explorer, virtually somewhere, like, you can actually see and see the connection between all these things and how they're fitting together. And so that kind of blew my mind just because, I don't know, I hadn't thought of that before, of what the next generation of lock explorers will look like, but that's exactly what it will be.
00:25:55.120 - 00:26:16.440, Speaker A: It's like kind of like visualizing and mapping out this modular stack. So that's really cool. So I have a question which is obviously block Explorer is the first product, but the name of the project is modular cloud. So give us a quick sort of overview of the long term vision beyond block explorers for modular cloud.
00:26:18.170 - 00:27:16.502, Speaker B: Yeah, so basically we can think about it in several ways. So there's these decentralized protocols, and at the core that's, I think, the best, most general way of talking about any of these applications, that they're decentralized protocols and they provide certain functionality and sometimes there's other bits that are bundled in there with them. So for example, let's just take Celestia as an example. Celestia is a decentralized protocol and there is a proof of stake mechanism that comes to consensus on data, and it indexes data in a very specific way, and it has data availability sampling, which enables roll ups. So this is the core functionality of what Celestia does, and it does it really well. Now, bundled in that is a few other things. Like for example, there's an RPC endpoint that's bundled into that, and that is essentially another application.
00:27:16.502 - 00:28:03.094, Speaker B: It's completely separate. There's this consensus mechanism that plugs into a peer to peer network. It downloads the data, stores it in like level DB or something, and that's on your disk. And there's this other application that shares a lot of the same schemas, and it's actually a web server in go that's running alongside at a different port. And this is how people go and get data when they're making an application that interfaces with Celestia. So this is one of those things where this is necessary in order for people to be able to programmatically interact with celestia. But it's not an optimal tool for every type of case in which people would want to do something like this.
00:28:03.094 - 00:29:28.782, Speaker B: And so there's a lot of ways that you might want to access that data that are not supported by the API or maybe the performance characteristics are not good of it. Like for example, if you put too many people trying to hit that endpoint, it's going to crash the node. So one class of products that we are going to be offering is stuff around data retrieval, and we're going to be offering a more robust infrastructure that will enable people to access the data that they want in a scalable way and using the APIs that they want. And generally speaking, that's a huge thing is taking stuff that already is possible, but making it either changing the APIs in a way that's more suited for certain use cases or changing the performance characteristics. Like for example, if you're deploying an iOS app or a web app, a lot of protocols won't be able to support that through a peer to peer means. And there's a lot of reasons why you actually can't connect to a peer to peer network in the browser, for example, in a good way, or you need like a signaling server, or there's still some centralized infrastructure so we can help people scale in that way. So that's one class of products, and another class of products is stuff around just like compute.
00:29:28.782 - 00:30:15.380, Speaker B: So we're running on Amazon Web services, so we have access to this giant super data center that we can run giant computations on that you just simply cannot run on your own machine. And so there's a whole suite of potential products that we can build that will allow people to run amazing computations or really complicated queries on this large data set that we're going to be acquiring as we integrate with every single blockchain. So we'll know all the data from all the transactions, all the blocks, all the state of every chain. And we have a giant, giant data center that can do virtually unlimited compute. Whatever you can pay for, you can get. Now, if you know a useful thing you can do, you can pay us. We will make it easy for you to run those computations on that data set.
00:30:15.380 - 00:30:56.990, Speaker B: And I think just like the last component in here is that these are centralized things and we are not setting out to replace anything that is decentralized. What we would like to do is we would like to provide these types of centralized services, and eventually we would like to offer that through a decentralized network. If anyone's working on a decentralized network for accessing these type of services, please let us know. We would love to sell through your network if that is something that is economically sustainable. Otherwise we'll eventually create our own decentralized access protocol.
00:30:58.130 - 00:31:46.414, Speaker A: Got it. So it sounds like in addition to the Explorer there's RPC endpoints and also like indexing and lots of other stuff on that. And I also really resonate with the vision for decentralizing it. I think it's difficult. I mean, I know that there are teams that have been trying to build decentralized RPC, obviously decentralized indexing. It's a tough nut to crack, but I do think eventually we will get there. And a last thing that I want to mention is, at least for Celestia itself, one of the things that we really believe in is people actually running light nodes themselves in their wallet, in the browser or wherever their wallet is, maybe on mobile, so that they don't have to rely on an RPC endpoint to send transactions and everything.
00:31:46.414 - 00:32:02.500, Speaker A: Because RPC endpoints are sort of a central point of failure. Like if you're only interfacing with the blockchain through an RPC, it's not really decentralized. You don't actually know for yourself what the state of the chain is. You're kind of trusting someone and.
00:32:04.310 - 00:32:04.638, Speaker B: It'S.
00:32:04.654 - 00:32:45.298, Speaker A: A compromise essentially on the real vision of blockchains, but at the same time. But RPC endpoints are also like dedicated RPC endpoints are very useful for a whole host of other reasons, and everyone should have the choice. That's awesome. So I guess to wrap things up, give us just a really short thing on the near term roadmap, anything that's on the horizon for you. I know you just announced your fundraise. You launched dim scan and fleshy scan and everything, so there's a lot of progress recently. What's the next up? And then as a last thing, where can people find out more? Or if someone's building a roll up or a blockchain and they want to work with you, sort of.
00:32:45.298 - 00:32:47.860, Speaker A: What does that look like and how do they get in touch with you?
00:32:49.190 - 00:33:21.370, Speaker B: Yeah, we launched our block explorers, as you said, and we announced the fundraise. And so next up, we're basically doing three things. One is we're making improvements. This was an early launch, there's a lot to improve. So we're working hard to make this as great of a product as possible. We love feedback, so anyone who wants to go on our website and answer and suggest, check it out, see what they can suggest for us to do better, please let us know. It's really helpful.
00:33:21.370 - 00:33:51.800, Speaker B: We want to have a lot more integrations with a lot more protocols. We're in discussions with many teams. We're really excited about this. We're working on our self serve integration. So right now we're doing everything manually and we're optimizing to make it easy for ourselves to do it manually, but we want to have this self serve integration. So when you have launched your protocol or roll up or something. You can integrate with us very easily without having to have any conversations, and we're always also willing to help.
00:33:51.800 - 00:34:17.630, Speaker B: But if you do have a protocol or a roll up that you're launching soon or that you've already launched, please get in contact with us. We'd love to have an integration and we'd love to either support your application to your users, give them visibility into their data on the web through our block explorer, or help people. If you're building a platform, we can help people build on your platform by providing block explorers for people that are in your ecosystem.
00:34:18.690 - 00:34:53.780, Speaker A: Fantastic. Lots to be excited about and so good to hear your vision for the modular stack and the tooling that will come along with it through modular cloud Elziras, thank you so much for coming on. Really appreciate it and thanks everyone for listening to this episode and stay tuned for more spotlights with really cool projects. There's so much happening in the modular space, it's actually hard to keep up, but we're doing our best, so stay tuned for the next episode. Thanks again, lgrs yeah, thank you so much.
