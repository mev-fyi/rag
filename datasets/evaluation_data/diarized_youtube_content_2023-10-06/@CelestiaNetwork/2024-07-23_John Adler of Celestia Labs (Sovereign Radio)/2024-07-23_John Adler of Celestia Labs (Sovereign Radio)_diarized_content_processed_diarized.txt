00:00:00.800 - 00:00:06.450, Speaker A: Hi, everyone. My name is Laura Shin, and I'm here with Jon Adler, who's the director of protocol engineering at Celestia.
00:00:06.910 - 00:00:07.750, Speaker B: Hi, Laura.
00:00:07.870 - 00:00:09.686, Speaker A: Hi. Nice to see you.
00:00:09.798 - 00:00:10.742, Speaker B: Nice to see you, too.
00:00:10.846 - 00:00:21.846, Speaker A: So Celestia has taken off since launch last year. What are some of the accomplishments you've been especially proud of, and what are some of the surprises that you've had since launch?
00:00:21.998 - 00:01:06.380, Speaker B: Yeah, so I guess I would say there's two accomplishments that I'm particularly proud that we managed to do. One of them happened already, and one of them is about to happen. One of them is. The first one is a large number of people have been running light nodes on various devices around the world in Internet constrained regions, et cetera, which I think is a very big milestone in the development of blockchains in general, or how blockchains are used, because other than basically bitcoin, no other blockchain except Celestia has lite clients, especially lite clients, that people can run on such cheap hardware and then with such small bandwidth constraints.
00:01:06.680 - 00:01:11.920, Speaker A: A light client, basically is what? It's not holding the full blockchain.
00:01:12.000 - 00:01:37.390, Speaker B: That's correct. It doesn't download the full blockchain. It only downloads block headers, they're called. But more importantly, that is not just that celestial lite clients only download block headers. They also perform data availability sampling, which is the secret sauce of celestia that allows lite clients to be as secure as full nodes. So it's not just that celestia liteclients, it is data availability sampling. Like clients, and like I said, all of them in bitcoin, where, like, clients are actually very popular.
00:01:37.390 - 00:02:51.626, Speaker B: And like Satoshi in his bitcoin design paper, spent an entire section, and there aren't that many sections in the paper on lite clients, which he called SPV clients back in the day. And basically no other blockchain except Celestia really puts these things, this type of client, as a first class citizen. So that's kind of the first accomplishment we've done that I think I'm particularly proud of, which is there's like, clients data availability sampling, and people can run them, and many, many people do. The second one that is currently in progress but close to completion is what we're calling the Lemongrass hard fork. It's the first hard fork of the celestial state machine that introduces a number of new features and improvements and sets the groundwork in terms of various upgrade paths for future hard forks. And it's kind of the first network upgrade that's going to be forthcoming in the next month or so. And I think it's a pretty big accomplishment from the whole team to be able to ship such a major change to the celestial protocol and also do it in a way that resembles Ethereum style hard forks in that they allow optionality, they allow sovereignty, they allow users to choose if they want to follow this new network upgrade or nothing.
00:02:51.688 - 00:02:59.638, Speaker A: So let's take a step back and just also now think, before you launched, what were the main problems you were trying to solve with Celestia?
00:02:59.814 - 00:04:13.008, Speaker B: The idea of Celestia back then called Lazy Ledger, was created by my co founder Mustafa al Basam, right, and it was a way to scale blockchains. And you can say, well, the scaling problem is rather generic, but around that time there were a lot of people thinking about how to scale blockchains by separating things and roll ups. For instance, rollups had started coming into the popular conscience with the creation of Zk rollups by Barry Whitehat, where he basically said, ok, let's post all the data to Celestia, or sorry, to Ethereum back in the day, Ethereum called data. Let's wrap execution in a ZK proof and verify that on Ethereum. So there this kind of separation going on between what the base layer does, which is data availability, and where execution happens. But even with such schemes, there were very significant and very severe restrictions on how much data the base layer could handle. Ethereum at the time, Ethereum pre EIP 4844, and these restrictions meant it was still extremely expensive.
00:04:13.008 - 00:04:39.324, Speaker B: So cheaper than using base layer Ethereum, yes, but still extremely expensive. That's where the insight was. By separating data availability from execution, you take it a step further, where you make the base layer only do data availability, it can be much more scalable. It has the scale up property with the number of light nodes and therefore it can lead to reduced costs for rollups. That was the primary problem that was being solved there.
00:04:39.412 - 00:04:42.300, Speaker A: And what was your background before you started Celestia?
00:04:42.420 - 00:05:21.072, Speaker B: Yeah, so before Celestia I was a research engineer at consensys. I was doing research in the plasma roll up space, while as a consensus I developed ADF optimistic rollups. Actually, after Mustafa had developed the idea of lazy Ledger, because I saw that and I'm like, yes, this is really the way that blockchain should be scaled through this modular approach. I mean, back then it wasn't called modular. There were various other names that weren't as nice, but that led to the creation of the optimistic roll up idea. Also based on the Zika roll up idea by Barry Whitehat. So that's the space I was doing research in.
00:05:21.072 - 00:05:30.576, Speaker B: And then Mustafa reached out to me one day asking if I wanted to start this new blockchain. I'm like hell yeah, because this is exactly how I thought blockchain should be scaled.
00:05:30.768 - 00:05:41.336, Speaker A: Well, so now Celestia is working on new things. There is a new primitive that's been called lazy bridging that uses account abstraction. So can you explain what that is?
00:05:41.448 - 00:06:24.024, Speaker B: Yes. So lazy bridging is an application of ZK accounts. So I should probably take a step back and first explain ZK accounts in the context of Celestia and then explain lazy bridging. Celestia as a blockchain just performs data availability, it doesn't do execution. This means that unlike Ethereum, there's no smart contract execution environment. And in the absence of a smart contract execution environment, you can't do things like verify that a roll up has executed correctly and then do certain things such as deposit and withdraw to and from the roll up funds from the base layer. You can't do that because, well, you can't verify that the roll up has executed correctly.
00:06:24.024 - 00:06:59.248, Speaker B: There's no verification, there's no execution. Now similar to bitcoin, where bitcoin uses predicates over utxos and these predicates can define some spending conditions. Predicates are verified in bitcoin, they aren't executed like they are in Ethereum. And by doing verification instead of execution, you get a lot of performance benefits and you get nice security guarantees. You get predictability. There's a bunch of benefits to doing verification only. So in a similar vein to bitcoin, but without introducing a without introducing a virtual machine which will actually have a bunch of benefits.
00:06:59.248 - 00:08:02.794, Speaker B: We can have this primitive called currently that we're calling ZK accounts that were also introduced by Mustafa, I want to say a year ago or so in a research post on the Celestia Research forum where if you're interested in general blockchain research and scaling research, you should definitely check out, because there's a lot of exciting posts that continue to happen on there. The notion of a ZK account is basically enshrine some verification logic, but only verification logic, into the celestia base layer. This way, Celestia does not do execution. Still, it doesn't need a generic vm, it only does verification. But specifically it only does verification of a ZK proof. Not of a generic, like a semi generic vm, like a bitcoin script. It just verification of a ZK proof and with just that one small thing, you can actually have a system where when you combine it with all the things such as account abstraction, you can have a huge amount of expressivity without needing a generic vm and without needing execution on the base layer such as ZK accounts.
00:08:02.794 - 00:09:05.942, Speaker B: So how does EK account work? It's essentially a special account type on celestia that changes to the account require a valid ZK proof to be posted on celestia and verified in the celestia state machine. And this proof is completely generic. Like what is being proven over is entirely dependent on what happens off chain. So you could have a very complex vm, you could even have the Ethereum virtual machine happening in a ZK rollup completely off chain. That is very complex logic around what is valid and what is not valid state transition in this roll up, and only needs to verify proofs. Verifying a proof successfully allows the state of the account to transition. So this could do things like for instance, it could emit a withdrawal if the proof verifies successfully, and if there's some withdrawal logic that is successfully verified from the roll up, which again the celestial base layer doesn't care what that logic is, it's okay, here's some withdrawal.
00:09:05.942 - 00:10:13.560, Speaker B: Then the withdrawal can be processed in the celestial state machine to say, unbridge some tokens that were previously bridged into the roll up. When you combine this with more interesting things like account abstraction, which you can combine this with, you can have things like a ZK account controlling another ZK account, potentially controlling another ZK account, and so on. And this allows you to have atomic transactions between various ZK rollups, such as withdrawing from one and bridging to another. Or you could have something like a keystore roll up, or you have a roll up that stores key mappings. Vitalik actually talked about such an idea back in the day, and people use that as a mechanism to, instead of directly mapping the ledger device, instead of directly mapping the public key on that ledger to their account, they can map some unique identifier, and then they can rotate the key behind this identifier to their account. So if they want to do some sort of key rotation, they don't need to transfer all their assets to a new ledger. For example, they just send one command to the keystore roll up to rotate keys, and now, boom, all their assets, all their nfts, whatever, are all on a new roll up.
00:10:13.560 - 00:10:37.676, Speaker B: Sorry, are all on a new ledger or a new wallet, what have you. So ZK accounts plus account abstraction allow for a huge amount of flexibility. And this can all be done without adding generic execution to the base layer. But you get a lot of the functionality. Not just a lot, but you can get basically all the functionalities that you get out of a system, such as like a generic blockchain VM system, such as the Solana's virtual machine or Ethereum's virtual machine.
00:10:37.788 - 00:10:55.996, Speaker A: That example about the key management, it reminds me, I don't know if you remember back in the day when you had Google Authenticator, you would have to individually update each of them every time you got a new phone, but then now they changed it, where literally the second you get the new phone, somehow every single code is updated. I don't know if you remember that.
00:10:56.028 - 00:11:19.432, Speaker B: But anyway, I don't use Google Authenticator, but I can imagine that. And that's an example where it was a huge hassle back in the day. And in a blockchain system is not just a hassle, it's also very expensive because you have to send multiple transactions, which let's say the base layer is congested or whatever. That could be very expensive and very time consuming, especially if every transaction has to go through a hardware wallet. Click, click, click. Yes, yes, yes. Approve, approve and do blind signing.
00:11:19.432 - 00:11:55.730, Speaker B: It could also be rather insecure if you blind sign something incorrectly. But with this kind of keystone roll up, which again is not an idea unique to Celestia as Vitalik proposed it, as proposed such a thing a while back in the context of ethereum, it allows you to do rotation in just a single transaction. Boom. Now all your keys for all your assets, they still belong to the same id, but the key behind that id has been changed. So instead of directly mapping your key to your assets, you add a thing in the middle so you can change the key, but all your assets are still attached to this id. Smart contract walls work in a similar way.
00:11:56.050 - 00:12:13.346, Speaker A: Yeah. And I would imagine like just using the ZK accounts like that allows you to kind of keep the base layer dumb and like not have to do all these like hard forks to upgrade that necessarily while you upgrade the functionality just through these external ZK accounts.
00:12:13.418 - 00:12:13.786, Speaker B: That's correct.
00:12:13.818 - 00:12:15.994, Speaker A: So there's like efficiencies in that way.
00:12:16.082 - 00:13:03.600, Speaker B: That's correct, yeah. So there's a lot of flexibility there because the ZK accounts, like in the ZK roll up that is behind the ZK account. That logic can be arbitrarily complex. Imagine you can literally have the EVM in the CK roll, which is even more expressive than bitcoin script, and you can define various conditions around who receives what funds. You can have a keystone roll up, you could have a generic EVM roll up, you could have arbitrarily stylus, if you want in there, you can basically do whatever you want and have that as the condition. It's extremely flexible, while, like you said, the base layer, all it needs to do is, say, verify this, a generic verification system for ZK proof. And you don't actually care what the specificities around the spending conditions are.
00:13:03.600 - 00:13:05.544, Speaker B: That's all punted up to the L2.
00:13:05.632 - 00:13:17.400, Speaker A: In a way. It's like a notary, where the notary, they get a huge range of documents. Some of them are very simple and some are very complicated. And all they do is they do the stamp. And it's like that for the base layer.
00:13:17.440 - 00:13:18.380, Speaker B: That's correct, yes.
00:13:19.080 - 00:13:21.488, Speaker A: But anyway, so I should get to Lazy bridge. It's a precursor.
00:13:21.544 - 00:14:13.950, Speaker B: Yeah, to lazy bridging, that sets up the primitives and the context. So now what's lazy bridging? Lazy bridging is one application of ZK accounts, or something you can build on top of ZK accounts. And I alluded to it a bit when explaining ZK accounts in the sense that it allows bridging. So the current issue with data availability only layer is that how do you get funds from the base layer to the roll up and back, potentially providing some more context. One of the nice things, or one of the benefits of a modular blockchain approach, is that the various execution layers can share security with a base layer. They share security because in order to revert what happens on one of the roll ups, you need to revert what happens on the base layer. So all the economic security of the base layer transfers to the roll ups is very powerful.
00:14:13.950 - 00:15:05.320, Speaker B: But this only applies to state transitions, it doesn't automatically apply to funds. So, like actual assets, if we actually see how are things deployed, well, you need to move assets to and from chains, and you need to potentially move assets to and from external to, completely external to the celestial ecosystem. Let's say you're on Solana, you have some, I don't know what's on some NFT on Solana. You want to move it over into this last ecosystem to use. So you use some protocol, like wormhole, for example, so it gets sent in. Now you have fragmentation happening where people who eventually have this asset need to rely on the custodial power of the wormhole bridge operators. And then you have a bunch of other bridge operators, relayers or what have you, that can move funds to and from chains.
00:15:05.320 - 00:16:05.988, Speaker B: And in the absence of native bridging between the celestial state machine and rollups, you also have this for TIA and other assets that are bridged into the celestial state machine through IBC, for example. Obviously this is not ideal. So what is lazy bridging and how does it use ZK accounts? So one of the things you can do in a ZK account, given that the condition to transition the state of the account is there must be a valid ZK proof. You can have a system where you have a bridge with two parts. One of them is enshrined in this last JSA machine that basically says if the ZK proof does some particular thing, it conforms to some API, and it makes an API call that says withdraw, then you withdraw funds on the roll up side. You implement the other half of the bridge where you have certain logic in your rollups state transition function that says this is a valid withdrawal. It could be some special transaction type to burn funds, whatever.
00:16:05.988 - 00:16:31.870, Speaker B: Every roll up on Ethereum, for example, isn't just the EVM. It has some mechanism in there enshrined in the roll up state machine logic that allows it to burn funds on the roll up and have that apply as a withdrawal in the Ethereum. Smart contract. The bridge contract. So you essentially have that system. Now you have that system where it's like the bridge is implemented in two halves, one shrine and Celestia. Some API.
00:16:31.870 - 00:17:12.444, Speaker B: So it's not specific to any one roll up, it's just some API. And then the ROPs implement this API and use it to successfully deposit funds from Celestia and withdraw funds to Celestia. And this thing that we're calling lazy bridging is a way to have a bridge that was described that does not require any trust on any committee. The bridge that I described is purely just. Is there a valid state transition on the roll up that properly executes this withdrawal function? So long as there is, and it's all verified in the ZK proof, the withdrawal happens. So you don't have to. At no point do you require a vote by a committee.
00:17:12.444 - 00:17:38.250, Speaker B: At no point you need validators on the role. Brad and thank. It's entirely based on. Is the ZK proof actually correct? They're entirely math based. And once it happens, then the withdrawal happens. So this is a way to have a bridge that doesn't require trust in any third party. You only have to trust that your celestial full node is operating correctly, basically, and the celestial state machine is executing correctly based on your own full node.
00:17:38.250 - 00:18:25.684, Speaker B: And then you can have a bridge to bridge to funds to and from celestia. So you get the kind of the what you would get out of a smart contract roll up in that you have a trust minimized two way bridge, but it doesn't require any execution, so it's lazy. And this finally allows you to reduce and eliminate the fragmentation problem, where instead of requiring trust in these various bridging and relay providers to move funds to and from roll up celestia and external to the celestial ecosystem, you can have this nice unfragmented cluster of chains, rops and celestia rops on Celestia and Celestia itself, that all have trust minimized bridges with each other. And that eliminates a lot of the fragmentation issues around having to have around moving fans around.
00:18:25.772 - 00:18:42.412, Speaker A: So, obviously, as you just mentioned, fragmentation is an issue. It solves. But obviously, we've also seen there are many hacks with bridges. Does this resolve that in any way? Or at least I know for some of them. Some of them had centralization issues, so that led to the hacks. So I imagine that is minimized or.
00:18:42.476 - 00:19:16.236, Speaker B: That's correct, yes. So long as the ZK logic, the circuit is implemented correctly, then yes. You don't have to rely on a third party to properly secure its keys, for instance, and to custody funds. The funds are essentially custody by the celestial state machine itself and the. The rules of the state machine. So you don't have to trust anyone else to custody the funds and to not get hacked. And obviously, the celestial state machine got hacked, just like how, you know, imagine there was some major bug in the Ethereum virtual machine or the Solana virtual machine.
00:19:16.236 - 00:19:46.484, Speaker B: A bunch of people lost money. It's like, you know, you would. If there was an actual bug in the virtual machine, you would expect there to be some sort of fix that the community would more likely than not adopt. Obviously, no one can force the community to adopt it, just like no one can force the theorem classic supporters to accept that the dial happened and we should fix it. Which wasn't even a bug in the EVM, was a bug in a smart contract. But there was a bug in the actual underlying virtual machine, which is quite rare because a lot of these state machines are fairly simple. There's less just a machine, for instance, that's dead simple.
00:19:46.484 - 00:20:06.972, Speaker B: So it'd be rather hard to have a bug in such a system because it's not like a smart contract. Smart contracts are. You can say smart contracts are small, but also they can be very complex and how they interact with things, because there's a lot of assumptions, a lot of asynchrony. There's very few debugging tools. It's hard to write tests. So that's a whole different world. But yes.
00:20:06.972 - 00:20:16.356, Speaker B: So this kind of bridging system would maybe not completely eliminate, but it would greatly, greatly reduce the issues that come from hacks that we've seen from bridges in the past.
00:20:16.548 - 00:20:29.018, Speaker A: Okay. And then just to make it a little bit more concrete for listeners, could you contrast, like, the current experience of bridging to what it would look like with lazy bridging?
00:20:29.154 - 00:20:54.106, Speaker B: Yeah. So the current experience is that you would have to choose a bridging provider if you want to move funds. Let's say you have some TIa and you want to move that Tia into a roll up. You would have to choose a particular bridging provider. Then they would move that TIa, let's say, into the role. And then it wouldn't be Tia, it would be Tia from that specific bridging provider, which is different than TIa from a different bridging provider on the same roll up. That was kind of one of the problems.
00:20:54.106 - 00:21:40.002, Speaker B: And if you wanted to unbridge your funds or to bridge them back to Celestia, then you have to do the reverse process. You'd have to find the bridging provider for which you can successfully redeem the Ti that you happen to hold at the time on the roll up and withdraw it, which you could end up with weird liquidity issues, et cetera. You could end up with custody issues and hacks. Unless you're knocking away, that doesn't happen, et cetera. So there's fragmentation there in the future because there's now this canonical bridge that provides strictly better security. You could just use that. Similar to how if you wanted to bridge from Ethereum into arbitram or optimism, you could use the canonical bridge.
00:21:40.002 - 00:22:04.860, Speaker B: There's no wrapping of any specific bridge provider. You get Ethereum, you get eth on the roll up, and that's it. It's just eth. There's no prefix, there's no suffix, there's no, like anything, anything else, it's just eth on the raw. And that's how luck. If you wanted to bridge, let's say, TIa or other assets that are bridged into the celestial state machine through IBC, if you wanted to move into the roll up, then they would all just be that asset.
00:22:05.560 - 00:22:16.648, Speaker A: Yeah, definitely, definitely. Sounds much easier. So Celestia is also helping to enable sovereign rollups. Can you talk about what those are and how they differ from smart contract rollups.
00:22:16.744 - 00:22:54.438, Speaker B: Yes. So rollups are something that is a concept that I think we're particularly excited about. It's a type of roll up roll up in the sense that it posts its data to a data layer and thus share security with the data layer. But it does not have a smart contract that kind of enforces what the. That enforces the correctness of the roll up. The correctness of the roll up is determined by the users of the roll up rather than the celestial state machine. So in Ethereum, for example, if just picking an example, let's pick optimism for.
00:22:54.438 - 00:23:34.104, Speaker B: No, just completely arbitrarily. But all the roll ups on Ethereum that are smart contract roll ups work in a similar way. If there is a bug in the optimism bridge contract, for instance, then that's what determines the correctness or the canonicalness of the optimism chain. It's entirely determined by that one contract, and the contract is a bug. Then you have to rely on the Ethereum validators and the Ethereum community to fork the chain to fix that bug. Now, if that bug is severe enough and a lot of people lose money, that's, that's possible. That happens when it happened with the DAO, but it's also possible it doesn't happen.
00:23:34.104 - 00:24:00.824, Speaker B: Maybe the Ethereum community really doesn't like the optimism, or for whatever reason. Let's pick a different roll up. Maybe there's a cardano roll up, and then the Ethereum community doesn't like it. I don't know. Then maybe they don't work and they don't recover the funds. But with the sovereign roll up, the correctness is not determined by the state machine or the base layer. Rather, the correctness is determined by the node runners and the community of the roll up itself.
00:24:00.824 - 00:24:45.468, Speaker B: Because let's say in a ZK roll up on Ethereum, the bridge contract verifies a ZK proof that the ZK proof is correct. And so long as you run an Ethereum node, ethereum full node, which is actually rather expensive, and you run the bridge contract in your evm, and it verifies all the proof, then you say, okay, I know the role of is correct, but no one said that that's the only way that you can verify the ZK proofs. You can also just run a node for the roll up that verifies Ek proofs. And actually that's what Mina is doing, the Mina blockchain. Ignore the roll up part, like the posting of the data part. But the Mina blockchain, the Mina nodes, verifies Ek proofs of correctness of the Mina blockchain. They don't rely on a smart contract to verify those proofs.
00:24:45.468 - 00:25:12.320, Speaker B: They just verify them directly in the node software. So you can just do that. So a software behaves in that way where if it's sovereign ZK roll up, the node is going to verify ZK proofs. If it's a sovereign, optimistic roll up, they would just. You would have a full node or you could have a light node that verifies fraud proofs and you just verify the blocks just like you do in any other blockchain. So you get the shared security aspect of it being a roll up. It shares security with other rollups that are on the same data layer, such as Celestia.
00:25:12.320 - 00:25:37.380, Speaker B: But you don't have to, in case there's any issue of you want to upgrade this roll up, you don't need to have a committee, like a multi state committee to upgrade the roll up. You can just do it. The state machine logic of the roll up, you can just do it because it's a sovereign and you also don't, if there's a hack or anything like that, you don't need to rely on the celestial state machine and the celestial community to fix that because you just fix it because it's software.
00:25:38.080 - 00:25:45.424, Speaker A: Yeah, yeah, it's definitely. This, to me, feels like all part and parcel of the modular vision.
00:25:45.512 - 00:25:46.158, Speaker B: That's correct.
00:25:46.264 - 00:26:02.082, Speaker A: Yeah. Because, I mean, I wrote very extensively about the Dahac in my book and, yeah, that was a giant mess. So, yeah, if something similar were to happen in that type of system, then yes, it would be very kind of surgical to resolve it.
00:26:02.186 - 00:26:02.950, Speaker B: Exactly.
00:26:03.810 - 00:26:06.506, Speaker A: Well, so what else is on this lessee roadmap?
00:26:06.658 - 00:26:36.096, Speaker B: Yes, so one of my other co founders, Ismail, actually presented the celestia technical roadmap literally just like half an hour ago. But it's kind of divided into three facets. One of them is abundance. So we're talking about a large amount of block space. The other one is verifiability. So this means you can do things like people can run light nodes. I'll expand on these shortly.
00:26:36.096 - 00:27:34.220, Speaker B: The last one is I'm still jet lagged for my travel, so I forget the name. But it's lots of users, which is the obvious one, like adoption and stuff. So from a technical minded person, the first two are kind of the more interesting ones. So I'll dive more deeply into those. So the kind of big blocks, the abundance track is kind of the one where we say, okay, plus, yeah, can provide a certain amount of data availability, it can do it securely, which other blockchains can't. Celestia, I think, is the only blockchain live in production that has data availability sampling and like I said, also has light nodes with data availability sampling and can still provide substantially more throughput and throughput that is more flexible than systems such as EIP 4844. Now obviously it can't provide as much data available throughput as AWS or protocols that are Google forms like Eigen layer, for instance, or Eigen DA, right, because it actually has security.
00:27:34.220 - 00:28:35.830, Speaker B: So it's going to have slightly lower throughput, sure, but we can increase that throughput through hard work, through, I don't want to say ingenuity, but let's say through hard work and a lot of blood, sweat and tears, we can increase that block size. So on the roadmap is to get to a point where we have things like 1gb blocks, one gigabytes every 12 seconds that will contrast the current throughput, which is two megabytes every 12 seconds. So we're talking orders of magnitude increases on top of what is already orders of magnitude increases that the celestial base layer already provides compared to a lot of other blockchains. So that's the first track abundance. The second one is verifiability. So in this one we want users to be able to run light nodes, run light nodes very cheaply so that everyone has access to this high security of data availability sampling in their data availability sampling lite nodes. So towards this, there's various things that are being built, such as in browser lite nodes and eventually in a wallet lite nodes.
00:28:35.830 - 00:28:54.592, Speaker B: So the agger team is building a rust lite node that can compile down to wasm. And since it's in WAsM, you can run entirely in your browser. You don't need to download any software at all. You run it entirely in your browser and it verifies not just the header chain, it also performs data availability sampling entirely in the browser.
00:28:54.666 - 00:28:55.324, Speaker A: Wow.
00:28:55.492 - 00:29:21.916, Speaker B: And then eventually wallets will be able to hook into this. So instead of just relying on a centralized RPC provider, you know how metamask just relies on infuria, for instance, completely trusted infuria. And the only alternative to that is you have to connect it to your full node. Well, a full node is very expensive to run. On Ethereum, I actually used to run a full node and run a home validator, but I don't anymore because it just filled up my hard drive. I had a two terabyte. No, not my hard drive, my solid state drive.
00:29:21.916 - 00:30:03.190, Speaker B: I had a two terabyte drive and it got full. And I'm like, well, I don't want to. Buying four terabyte drive, it seems like kind of a waste of silicon. So running a full node is very expensive. But, Slusta, you can have your wallet connect to not just a light node, but an in browser light node and have that very high security with very low resource requirements. And then there's various other things that are being worked on on that front. There's things like header pruning, block pruning, header trimming, et cetera, that are all going to reduce the cost to run a light node such that users, not just that they can run them in the browser, but they can run them extremely cheaply, make this more accessible to a large number of users.
00:30:03.190 - 00:30:28.330, Speaker B: And then this also gets us. This ties into the large blocks thing, because the large blocks has two components. One of them is, can you physically make blocks big enough? The second one is, is it secure? And Celestia has this amazing scale out property where as the number of light nodes increases, as the number of nodes that perform data availability, Samsung increases, you can increase the block size while maintaining the same security.
00:30:29.030 - 00:30:39.694, Speaker A: Wow. Okay, well, this is definitely a glimpse of the future. It's been super exciting to chat with you. Thank you so much for sharing your current work with Celestia and your future vision.
00:30:39.822 - 00:30:40.350, Speaker B: Thank you, Laura.
