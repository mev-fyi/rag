00:00:00.970 - 00:00:43.046, Speaker A: Hey, everybody. Nice to meet you. So, I'm Magnus, first time public speaking for Skip, so we'll see how it goes if I crash and burn. But when I was a kid, I really liked this game, Neopets. Anybody played that before me when they were a kid. Yeah, so, little game, you know, you basically raise these animal and you did things with them. And I remember the first time that I tried to play Neopets, I went home and I just typed in Neopets into my browser and it didn't work, right, because I missed the www dot and I missed the and I was confused.
00:00:43.046 - 00:01:53.250, Speaker A: I didn't understand why didn't this thing just work? I went back to my friend, I asked, how do you actually put this thing into your browser? And then once I learned, I was like, okay, I guess I just have to do that. That's just what you do, right, in the Internet. And then comes a time like later in your life when you understand the Internet, right? You understand TLS and you understand DNS and you understand the name servers and how they all route together. You probably get a little bit too lost in the sauce, so to say, like, you understand it maybe too well, but the Internet still works, right? There's still that kid who just does that, puts it in and everything just happens. Understanding it isn't required for making the Internet work. That is to say, the Internet has great UX, right? You don't have to understand it at all for it to actually work. And I'm going to transition that into sort of like IBC, which I would argue has shit UX.
00:01:53.250 - 00:02:23.686, Speaker A: Should be clicking, maybe. There we go. IBC is shit UX. Trust me on it. And I'd say this is sort of the same thing for crypto in general, right? You really have to understand the tech in order to make it work. You have to understand wallets, you have to understand the Bridging protocol. Has anybody ever done an IBC transfer by chance? And I don't just mean like using Osmosis, which is like easy mode.
00:02:23.686 - 00:03:37.010, Speaker A: I mean like sort of like having to put in your channel ID and understand what paths it has to go through and basically having to know the underlying protocol in order to actually use it. So one of the really annoying things about ibcux is that you have to understand this concept of pathing, right? So if you want to go from one chain to another chain, you might not be able to take the most direct route there. So, for example, in this case, if you want to go from Alice's source to Alice's destination, you can't go directly there. You actually have to unwrap it by going initially through the token origin, right? And so it's very different than the Internet in that you really have to understand the underlying protocol in order to use it properly. And it makes sense why it's like this, right? Like, you're picking up the security assumptions of each underlying intermediate chain. Therefore, you have to unwind it through those to sort of basically have it become the token that it once was. So you end up with this situation, right, where you have all of these IVC denoms all over the place.
00:03:37.010 - 00:04:31.620, Speaker A: They're all interwoven with each other, just like, look at all those tokens, right? What are they all doing? Why are they there? I don't need them. I don't understand what they are. So I love this quote by Chris Goes. Do you think God stays in heaven because he, too, lives in fear of what he's created? It's obviously not an actual Chris Goes quote, but it is from Spy Kids, and that's sometimes how I feel when I'm using IBC. So we tried to solve this. We tried to make basically what that Neopets like experience is for IBC, where you don't have to think about the Www, the TLS, the DNS, the name servers. You just use it, right? You just use IBC in the way that you want to, right? So this is that same issue, right? So starting on chain A, you want to go to chain D.
00:04:31.620 - 00:05:11.354, Speaker A: Every path that you go through basically will change the token, right? It's like you and your friend are basically on the Upper East Side. You want to go to a bar together. I take the four train. You take the six train. Does different number of stops, and you end up as different people, and you're just like, what's going on? That's essentially what happens to IBC tokens as they traverse the interchange. Different paths will actually change the token. And that, of course, does not intuitively make sense, and users will lose their funds if they don't follow this, right? They will end up in a denom that maybe has no liquidity and there's no decks, and maybe they don't even have the gas token.
00:05:11.354 - 00:05:41.414, Speaker A: And so, basically, interchange UX is screwed by all of these different problems. And it's true for cosmos. You guys can learn from Cosmos. We've done many different things, and we've screwed up a couple of them. But when it comes to the roll up world, it's going to become ten times worse. Absolutely, because you'll have way more pathing and you'll have way more gas tokens, and you expect users to understand all of that and have all those gas tokens. So basically, one does not simply send over IBC.
00:05:41.414 - 00:06:32.638, Speaker A: You can't just use the protocol. You have to use it very specifically. How do we fix this? Well, basically, we need to do unwinding, right? So this concept of if I want to go in this case from chain B to C, I need to first be unwound through chain A. And I can have somebody tell me, okay, here's a transaction that will actually unwind you through chain a or wherever you need to go automatically so that you end up in the right place and abstract that into something super easy to use. Basically abstract that into a browser URL, so that all the routing, all the DNS, everything else just happens underneath the hood. That's what we've built at Skip. Basically, this is somewhat of the structure of the API.
00:06:32.638 - 00:06:58.820, Speaker A: The user gives the intent to transfer. We send back this multi hop IBC message. Oftentimes it does a massive unwinding flow. The front end sends back the user signed receipt, and then they get a success. And so all they see on the front end is basically, I had my token here on this random chain. I don't know how wound it was I wanted to go there. And maybe it's even a different token, right? And they just end up with that experience.
00:06:58.820 - 00:07:59.094, Speaker A: But wait, there is more. So the ideal experience in our minds, and this might not be right, but this is what we believe is you want to go in the future over IBC from any chain, any token to any chain, any token, and that of course, might require a swap, right? So now you've further complicated this workflow where you're not just routing the same token, you actually have to at some point change into a different token. And you want to do that in one click, right? You don't want to have the user have to go to different applications and figure them out and have to use them. So you want to just have this sort of all done in one transaction. So this also works with the Skip API. The way that we figured this out was there was some credible middleware tech that was built inside of IBC called packet forward middleware, which allows you to, once you get to a chain, it will automatically forward it to the next chain. And you can chain this together.
00:07:59.094 - 00:08:48.310, Speaker A: So you have multiple chains in a row. And then you use these things called IBC hooks that allow for arbitrary smart contract execution on any intermediate chain. So in this case, oftentimes what will happen is three unwinding flows, a swap on Osmosis, and then more unwinding all in one transaction. So this is basically what it looks like if anybody's interested in trying it out. We built this fun little front end called IBC fun, and it's just what you think it is. Basically, it will show you the different routes and swaps that it's trying to do, and then it all completes in one transaction. So I don't know if this is going to play, maybe looks like it's not going to play, but this is a demo of me actually doing it, going from Osmosis to a different token and just seeing sort of like how fast it is.
00:08:48.310 - 00:09:43.810, Speaker A: It went over five different routes, which know in IBC quite complicated. And then it all sort of completes extremely quickly. So we're trying to figure out these other UX problems that we think roll ups and IBC chains already have, right? And we argue that these main ones are these gas token issues where you have to have so many different gas tokens, and that's like a big ask for the users to have this concept of sponsored payers. So basically, you can subscribe to a wallet and they'll just figure out some of these issues for you. Maybe they give you, like, a gas tank model where you have all your gas in one place, and they'll just swap it out into whatever you need. Best price deck segregation, and then also instant cross chain settlement. There's been a lot of conversations, I assume, about intents.
00:09:43.810 - 00:10:27.526, Speaker A: I don't know what they are, but some people seem to, and how those might solve UX in the future where you might just be able to give this intent of this massive cross chain workflow and then a third party actor might be able to come in, solve that intent and basically give you whatever you need on the destination. So if you're interested at all, the API is free. It's something that we made sort of as a public good. I think it might be technically interesting to just delve into sort of like, the reality of IBC and what you can do with it. This is a problem that will be true for all bridges, this unwinding and winding problem. It will be true for hyperlane. It will be true for many others.
00:10:27.526 - 00:10:53.200, Speaker A: And if we want to have a permissionless IBC standard or permissionless bridging standard, we really need to fix these issues, right? We really need to turn the internet, or we really need to turn IBC into something like the internet, where you don't have to think about all of these different problems. You can know. Type in neopets, and that's it. Thank you so much. Appreciate it.
