00:00:01.840 - 00:00:17.090, Speaker A: All right. Hello, everyone. I'm Terrence. Let me see if this is working. Cool. I'm Terrence. I'm one of the co founders and CEO of Cartridge, one of the core contributors to the dojo tool chain, and one of the co creators of the dopors ecosystem.
00:00:17.090 - 00:01:28.768, Speaker A: I'm excited to share a little bit more with you guys about the work that we've been doing at Cartridge and Dojo with this idea of building fully on chain games and autonomous world. Something that we've been working on for about two and a half to three years now since we created dope wars. And we originally started trying to build a fully on chain version, a recreation of the classic game drug wars, which you might be familiar with. But before we dig into, like, the specifics of the solution that we've been developing, I wanted to walk you through a little bit of the history that got us to this point and some of the challenges that we've been solving and the gaps that we've had to bridge in order to enable bringing these really ambitious, complex, immersive experiences fully on chain. So it obviously starts in 2009 with the introduction of bitcoin by Satoshi Nakamoto to enable peer to peer electronic cash. And the really massive innovation in bitcoin was this ability to introduce scarcity, ownership, and durability into the digital realm. Something that before it had never existed before, before everything in the Internet was essentially immutable, something that you had to trust someone to not change without your permission.
00:01:28.768 - 00:02:39.326, Speaker A: And bitcoin, through the introduction of proof of work and consensus and all these other parts, really introduce this idea of digital hardness, or the ability of a digital system to make a very strong commitment to its future state that it will proceed according to the specified protocol. And in the case of bitcoin, this is obviously 21 million bitcoins can only exist and some other parameters around the blockchain. But this concept is incredibly interesting and applies in the physical world to almost everything we see around us. There's so many systems in the physical world that we take for granted that they cannot change. For example, the coefficient of gravity or the amount of wind resistance allows us to fly airplanes without worrying about an airplane not being able to fly in the future. And so immediately, this idea of digital hardness became interesting to a lot of people for a bunch of other use cases outside of bitcoin. So we started to see omni and namecoin and colored coins, which tried to introduce abstractions on top of bitcoin, or forks of bitcoin to introduce hardness to other other domains, for example, namecoin, with provisioning names in a namespace, something similar to Ens.
00:02:39.326 - 00:03:21.304, Speaker A: But it didn't work. There was too much complexity involved in doing this with the tools that existed at the time. You had to basically fork bitcoin, which was incredibly complicated and wasn't designed to be easily extended. And the performance of the network was really designed for bitcoin. It was digital gold at ten minute block time, and it was insane for any type of other application to ask someone to wait ten minutes to interact with it. And the interoperability, because all these standards were kind of emerging, there wasn't like this coherent standard that everyone mutually agreed upon that enabled interoperability. And even if there was, given the limited feature set of bitcoin, you couldn't really do anything with those assets that were minted with colored coins or protocols like Omni.
00:03:21.304 - 00:04:09.916, Speaker A: To address a lot of these issues, Vitalik introduced Ethereum in 2013. Ethereum is obviously a Turing complete, smart contract platform. It provides strong guarantees around the programmability and the composability of decentralized applications and digital assets, while maintaining the core properties of bitcoin. And it introduced this idea of the world computer, this single, globally replicated, decentralized execution context that anyone could interact with, anyone could install some new logic to. It could deploy new contracts, operate on the state, and anyone could arbitrarily create programs that had very strong commitments to the future of their state based on the implementation. That was easy for anyone to see and verify. And this idea was obviously incredibly powerful.
00:04:09.916 - 00:05:16.098, Speaker A: And we saw a lot of interesting people in the early days of Ethereum trying a bunch of weird stuff. We had things like cryptokitties, which was one of the first unchained, gamified experiences with their breeding mechanic. We had fully on chain social networks like PPath, and distributed computation networks like Gollum, and on chain perpetuals with Didx, and even attempts to build fully on chain games on top of Ethereum inside of, for example, the realms ecosystem. But none of these ended up working, not for a lack of functionality, but because the limited execution, the resources available in this global execution environment, basically crowded out these applications. The parameterization of Ethereum meant that it couldn't support the types of transactions that were necessary to make these applications successful. And instead we saw high value transactions from applications like Uniswap, Aave, blur and curve, crowd out those transactions and make them not feasible on mainnet Ethereum. And so the challenges with Ethereum, I mean, it obviously did an incredible job of solving this for DeFI use cases, as we see until today.
00:05:16.098 - 00:06:49.520, Speaker A: But the scalability, given the parameters that it was targeting around decentralization of 15 to 20 transactions per second was just not enough to provide enough computation for all of these use cases at the same time and performance. You know, while it's significantly better than Ethereum, I mean, bitcoin with ten minute block times twelve to 14 seconds is still a lot of time compared to what consumers are used to in existing world, particularly in games where you want tens of millisecond response times for interactions with the servers, and then constraints that had to be imposed on the network in order to maintain decentralization around smart contracts. Size and even the language of solidity, which was not designed for these very complex applications, limited the expressiveness of Ethereum as a platform for these types of applications. And then in 2020, Starkware introduced Starknet, a novel scaling architecture on top of Ethereum that uses zero knowledge proofs to be able to dramatically expand the execution context of Ethereum and allows to put a lot more computation on chain. Starks basically have this magical property where you can attest to an unbounded amount of computation with the constant side proof that you can verify on Ethereum. And so you enable this massive expansion of the computational capacity of Ethereum without having to compromise on the security and the decentralized properties that Ethereum provides. So Starknet provides us strong guarantees around the scalability, security and composability of applications through zero knowledge technology, while preserving Ethereum's core features and securities.
00:06:49.520 - 00:08:18.802, Speaker A: And this is this idea of this integrity web, essentially, this like fractically scaled computational network that exists, can exist, and can be a substrate for a future Internet that leverages cryptographic guarantees as a core primitive to make a verifiable network, and allows us to put a lot more applications eventually on chain. And so now we've seen on top of applications like Socknect as well of other roll up approaches that have been able to provision this dedicated computational capacity, that these experiences that we tried to build on Ethereum Mainnet and eventually got crowded out are now possible. So we've seen in the stocknet ecosystem, autonomous worlds like influence, or dungeon crawlers like loot survivor go on chain and successfully deploy in this shared execution in context and still be able to maintain sub $0.01 fees for users interacting with it. And Dydx was maybe the first demonstration of this, of a perpetual protocol that deployed on Ethereum. Mainnet wasn't practical and it was moved to a L2 with Starkx which was the original service that predated starknet and uses starks for scaling or validity proofs for scaling, as well as some others, like lens, which is now a fully on chain social network and actually is practical with some of the new technology unlocks. So this was great for a lot of applications and there's a lot more possible for us to do in the context of Ethereum today and as we inherit these like properties of digital hardness into a much wider variety of games.
00:08:18.802 - 00:09:34.768, Speaker A: But there's still a lot of challenges that exist, especially in the context of fully on chain games and autonomous worlds, where we have the highest demands from a performance perspective and latency is a big one. As soon as you have a global execution context, like something like Starknet or optimism or anything, you are limited by the speed of light. You have to do communication around the world so everyone can participate in the networking to be able to come to a consensus on what are the transactions that we're going to include in blocks and sequence. And as soon as you have this global scope, you're going to add at least 100 to 200 milliseconds to any interaction with the blockchain, as well as some of the other parameters of the blockchain that potentially aren't designed for fully on chain games. And then as you have these roll ups or blockchains that increase transaction throughput, state bloat becomes the next major bottleneck. You're creating so much more transactions, so much more state, and with the current architectures of blockchains, you have to persist that state indefinitely into the future, and someone has to pay for this. And so as soon as people start using these more and more, a similar problem to what, you know, bitcoin, the original problem they've, they faced with the block size, that they decided to settle on one and a half megabytes.
00:09:34.768 - 00:10:49.250, Speaker A: And then Ethereum has a big challenge with today. There's a lot of optimizations, but is it one of the most important resource constraints on scaling Ethereum and any other roll up has the same thing to a larger extent as you increase the throughput of it, and then other constraints in order to maintain this global execution contracts and avoid denial of service around contract function, execution times constrain the amount of applications, the types of applications that we can deploy to them, as well as contract sizes. There's a lot more considerations that need to come into play when you have this shared execution environment. And so we've been working on this problem for the last two and a half years to be able to bring these games fully on chain. We introduced a solution called slot last year, which extends the execution context of Starknet and provides dedicated execution context for on chain games right now on top of Starknet, but is interoperable with a bunch of other settlement options in the ecosystem like Celestia, that we're working on right now. And slot basically extends the properties of the underlying layer to provide stronger guarantees around latency, throughput and cost. We can deploy execution shards close to users.
00:10:49.250 - 00:11:29.524, Speaker A: We can provision them dedicated computations so they're not competing with other people for resources. And because you're not competing with us for resources, we can provide consistent pricing, like essentially the price of compute to bring it on chain is just the cost of proving it. And this is critical to enable this idea of autonomous worlds to bring on these massively multiplayer on chain games, eventually fully on chain and fully verifiable on chain. And the tool chain that we're building to enable this is called dojo. I'll show you a little bit, I'll talk to you a little bit more about dojo. And specifically, it has a few different components to it. It has the world, which is the on chain representation.
00:11:29.524 - 00:12:15.524, Speaker A: It's the world. It's the logic and state of your application or your game. It's implemented in a provable language, Cairo, which is the most efficiently provable, turing complete provable language. We have Katana, which is a gaming specific sequencer that we've developed for the dojo ecosystem. Tori, which is automatic indexer designed to expose the information of the world to clients. And have, we have SDK integrations with languages like with game engines like Unity and typeScript, and a bunch of other ones that you can use to very easily create reactive type bindings to the world state. And Saya, which is settlement service, which manages coordinating all of these different services and eventually settling them on chain in order to be rolled up to whatever the settlement layer is.
00:12:15.524 - 00:12:57.498, Speaker A: And this is a little bit what the architecture looks like. You have some underlying blockchain, you can shard that blockchain, you can just basically fork it. The blockchain, the underlying blockchain, serves essentially as a code repository where you could in theory execute, execute these programs directly on it. So it also provides strong guarantees around liveness and censorship resistance. But you can optionally fork it and get this dedicated execution environment with a much lower latency and much cheaper. And that also has interesting affordances around, like the amount of state that you can interact with inside of this execution context. And then eventually, after you're done playing the game, you do the proving recursively with the proofs.
00:12:57.498 - 00:13:38.924, Speaker A: So you basically verify proofs, insider proofs, to end up with one single final proof that you can settle on chain for very cheaply. And it can attest to, for example, an entire dungeon run inside of a game very cheaply, without having to do the full execution in the context of the blockchain. And so the architecture that we're working towards ends up looking something like this. You have some settlement layer, like I think, Ethereum. You have some global shared layer like Starknet, that you can have the economic layer of your applications, where you can do high value transactions. You have regional shards that can host players that are close to those shards. So for example, EU or the US.
00:13:38.924 - 00:14:42.462, Speaker A: And then you can have further constrain the execution context to just like a single instance of a dungeon, for example, inside of like a game like World of Warcraft, or you know, a single round of game in League of Legends. And then you can even go further to the player itself and you can start to introduce client side proving, where you just have your own execution context in the case of a single player game, where you have even less constraints. And you can just roll up these proofs through fractal scaling, through recursive proofs and proof aggregation, and settle them to some base layer. And this is also possible with infrastructure like Celestia. So we've been working on enabling sovereign roll up architectures, which I think are particularly interesting for on chain games. Sovereign roll up architectures allow games to have full control of their ecosystem. And by removing them from being anchored on a blockchain like Ethereum, removes some of the inherent financialization components of games, which I think is quite interesting for a lot of the gaming audience today is quite skeptical about the technologies that we're building.
00:14:42.462 - 00:15:37.930, Speaker A: So in this architecture, instead of checkpointing proofs and verifying them on a settlement chain like Ethereum, you would instead set all the proofs and the state diffs to Celestia and then do the verification on the client. So every client can come to its own, like build confidence in the current state of the world by verifying a zero knowledge proof and the state that is exposed through Celestia. And this solves a lot of the problems that we challenges that we face in building games. You have very low latency inside of these execution shards. You have stateful applications where you can access essentially like an unbounded amount of state. And you have dedicated execution contexts that remove you from the resource contention of typical roll ups and allow you to provide very cheap and consistent pricing your users. And today in the dojo ecosystem, we have a bunch of games building on top of this technology.
00:15:37.930 - 00:16:07.210, Speaker A: There's over 20 studios now building on top of dojo. Something like 25 to 30 games. There's new ones coming out all the time. These are some of the ones of note that were interesting when I was putting this presentation together. We have paved, which is like an on chain Carcassonne. We have the dope wars original, roll your own game, Starkain, which is like on chain Final Fantasy, kind of rpg loot, Survivor, Dungeon crawler, force pride. There's a lot of interesting stuff spawning up in the ecosystem.
00:16:07.210 - 00:16:18.630, Speaker A: Cool. So hopefully that gave you a little bit of introduction to the dojo ecosystem, what we're building with cartridge. Thank you all for being here, and thanks for listening. Happy to answer a question or two. If anyone has any.
