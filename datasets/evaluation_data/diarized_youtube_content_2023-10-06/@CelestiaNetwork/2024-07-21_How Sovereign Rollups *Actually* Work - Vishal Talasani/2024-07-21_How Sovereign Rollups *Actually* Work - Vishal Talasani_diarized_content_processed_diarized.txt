00:00:01.600 - 00:00:34.428, Speaker A: Hey, everyone, thanks a lot for coming. I'm Vishal, one of the co founders of Stride Labs and a core contributor to the Stride protocol. We're going to be talking today about how soft and rollups actually work. I've seen a lot of disagreement online, on Twitter or forums, et cetera, around what soft roll ups are. Is it really just a vibe they differ from Ethel Two's? How far can you really push definition from a soften roll up? And I myself really did not really know what a softened roll up was and how different from L2. And I want to use this as an opportunity to kind of tell you all about what sovereign roll ups are. And I think they are a really novel way of operating a blockchain.
00:00:34.428 - 00:00:51.340, Speaker A: So let's get into it. So this talk is going to be inspired by a talk given by Kevin Fichter, sorry. From optimism on YouTube. Would highly recommend checking it out. I think it's one of the best talks I've seen, not only in crypto, but just in general. It's on YouTube. It's called how rollups actually work by Kelvin.
00:00:51.340 - 00:01:11.086, Speaker A: Highly recommend. So the talk is going to be kind of like building off that slash inspired by it. I want to say I really did not know what a software roll up was. I thought I did. I did not. I imagine it's true for maybe some of you in the room here, some of us in the world in general, and hopefully by the end of this talk, it's going to be more clear. So start off maybe like a guiding question.
00:01:11.086 - 00:01:42.296, Speaker A: Is Venmo a sovereign roll up? I'm curious, do you all, show of hands, who here thinks Venmo is a sovereign roll up? All right, we got some. Who thinks it's not a soft roll up? Yeah, we got some hands on both directions. A lot of undecideds. Well, we'll see where it goes. So maybe to start off, let's talk about how rollups work in general. And some of this might be familiar to you, but I think it's helpful to set the stage on just what the general map is of a rollup. So let's start off with a smart contract rollup, which I think is the most common type.
00:01:42.296 - 00:01:58.800, Speaker A: Like something like base or optimism. All of those. So you start off, you have your normal l two, you got your network here, you got your blockchain. It's not that useful, just a blockchain. So we tend to have some apps as well. So you have uniswap, friendtech, whatever. You got some apps.
00:01:58.800 - 00:02:21.188, Speaker A: But right now, this is a blockchain. This isn't really an l two. It's just functioning by itself. So what actually makes it secure? You have Ethereum and you have this big old bridge connecting you to Ethereum. This is really critical for an l two. This bridge handles basically everything that's important on this blockchain. In particular, all the transactions in the blockchain end up going through this bridge at some point.
00:02:21.188 - 00:02:57.042, Speaker A: And so it's really important the bridge is able to communicate down to Ethereum what's going on on this blockchain. And then in particular, we tend to have some sort of guard dog or something on the bridge that verifies all the transactions going through the bridge are proper or valid different kinds of guard dogs in this bridge. There's like a ZK guard dog. There's optimistic guard dogs, maybe other types of guard dogs in the future, but it's really important. This bridge is very secure, but this isn't really the whole picture of a roll up. You also have users. And how do users interact with the roll up? So imagine you have all these little metamasks over here.
00:02:57.042 - 00:03:14.262, Speaker A: All these little users. They have transactions. They want to submit. They're like, maybe they want to buy an NFT. Maybe they want to take out a loan, submit a stablecoin payment, all sorts of things. They will submit transactions down to this big old muscular, beefy sequencer. And that sequencer will take all the transactions from these little metamasks.
00:03:14.262 - 00:03:42.728, Speaker A: It'll combine them, it'll aggregate them, it'll send them down to the roll up. The roll up will hold onto them, then it'll send it through the bridge. The guard dog will say, these transactions are good. It'll go down to ethereum. And that's generally how an l two works. But how does this model change for software rollup? And I'm going to start off by going through what I thought a sovereign roll up worked, and how I thought it kind of functioned in my mind. Sovereign rollups, they start with my mental model of.
00:03:42.728 - 00:04:03.246, Speaker A: It started with the l two model and then try to build on top of that to get to what a software roll up is. So this is just going to describe how I thought a soft roll up worked, how I imagine some of you might think soft roll ups work as well. So let's go back to this image we have of the l two. So for soften roll, first things first, we don't really need this big old bridge. Sovereign. Sovereign. You'll need to send everything down to the l two.
00:04:03.246 - 00:04:24.818, Speaker A: Or to l one. So replace this big bridge with a smaller bridge. You don't really need to send as much stuff onto it. You probably send some stuff. It's not really clear, at least in my mind, what exactly was being sent. And I think there is some sort of validation or I knew there was some kind of validation going on, but it's not quite the same as a Zk or optimistic type bridge. So maybe there's some sort of guard cat.
00:04:24.818 - 00:04:47.550, Speaker A: I wasn't really sure, honestly what exactly this bridge looked like, but I knew that there was something like this for a software roll up. I also know software rollups have da layers. There's involved. Truthfully, I knew you store your data. There wasn't really sure how it ties into the rest of the ecosystem. So in my mind it's like I have some writing to Slesia. I know Slesia is really fast and cheap and cool.
00:04:47.550 - 00:05:15.434, Speaker A: By writing your data there, your blockchain is now also cheap and fast and cool. And you can say you're a modular project now which is marketing partner really likes it. But truthfully, I didn't really understand how this ties into the rest of this picture or what part of the stack really interjects. And then I also know sovereign roll ups are sovereign. They make their own choices and so they're allowed to fork. Not really sure where the forking fits into this picture. So in my mind there's just this random button on the blockchain you can press called fork that changes the blockchain state.
00:05:15.434 - 00:05:44.736, Speaker A: Wasn't really obvious to me, and it might not be for you as well. How dangerous forking is? Is it value destructive? Is it easy? Is it just changing the code? Is some social consensus? Does all the value on the blockchain kind of collapse after you fork eat eat, classic kind of thing? I know it's possible for soft roll ups, wasn't really sure. So in my mind this is kind of the picture I had for how soft roll ups worked. Importantly, this is not correct. This is not at all how soft roll ups work. And this should not be the model that you use for soften rollups. But it was, at least for myself, the model I was using.
00:05:44.736 - 00:06:14.898, Speaker A: So maybe let's go into what the right model is for Sodworld, how we should think about them, how they differ from conventional l two s. So let's start with just very basic. What is a roll up in general? And it's not like a smart contract roll up versus a sovereign roll up. It's just like what is broadly a roll up. This is going to be taken mainly from the talk I talked about earlier from Kelvin. So shout out to him. So a roll up is starts off with just an ordered set of transactions, ordered list of transactions.
00:06:14.898 - 00:06:34.426, Speaker A: So you have transactions, 1234 n plus one, et cetera. Making that list of inputs. Transactions. That process is called consensus. This is where all rollups start. They define this list of inputs, then they process those inputs with some set of code. This is called execution.
00:06:34.426 - 00:06:57.196, Speaker A: From almost all roll ups today. This process is like the EVM. So you have some inputs, some transactions, you process them with some code, for example, the Ethereum state machine. And then as a result you get some sort of output. Output, one, two, three, et cetera. This whole process of going inputs code to outputs, call these output settlement. Traditionally, when you finalize a set of outputs, this is all a roll up is.
00:06:57.196 - 00:07:42.748, Speaker A: And all rollups have this basic structure. And then they basically differ on how exactly they construct inputs, what kind of execution environment they use, and how exactly they decide what the outputs are. But all roles fit into this broad framework. So then given this framework, where exactly do sovereign rollups fit in? And I think really what we should be focusing on is on this execution and settlement layer on sovereign rollups. And that's really where they differ very dramatically from Ethel two s. So how exactly do they differ? What do software roll ups do on the execution layer and the settlement layer? And really at a very high level, sovereign rollups, the nodes in the sovereign roll up itself, those will define the execution and settlement on the roll up. So let's say I have a sovereign roll up.
00:07:42.748 - 00:08:04.848, Speaker A: Like Forma is one that launched a couple weeks ago. Forma is like an NFT marketplace. It has a bunch of different nodes. When we say sovereign, mean that those nodes themselves, that is where the execution and the settlement lives. We'll dig into this a little bit more shortly. That's like how you should start thinking about this. Importantly though, those nodes, anyone can run a node in a sovereign roll up, and all the nodes are kind of equally important.
00:08:04.848 - 00:08:45.324, Speaker A: Whereas you think of like an ethel two, there's like some nodes that are more important, like the nodes sequencer, for example, soften roll. All the nodes are like anyone can run, it's permissionless. And those nodes themselves really truly are the network and the community or the set of people running those nodes. They collectively decide what the properties are of that network. So if all the nodes, for example, are like, hey, we actually don't like these rules, want a different rule? That's what makes them sovereign. They can choose their own execution stack or their own settlement stack, and it's not defined by some external party. So when we think about sovereign roll ups versus like EFL two, there's main difference we should keep in our mind is who defines execution and who defines settlement.
00:08:45.324 - 00:09:11.770, Speaker A: So for a sovereign roll up, the nodes themselves define extrusion. I know I'm saying this a lot of somewhat of a novel concept. It hasn't really existed before. Whereas for eth l two, the way that you define who's executing or who settles is the l one itself. So let's take base. There's a smart contract on Ethereum, that smart contract literally owns settlement execution. And what we mean by that is, let's say the nodes in the smart contract differ on what is settled.
00:09:11.770 - 00:09:29.386, Speaker A: So let's say I have the base node, it says I have 100 eth, and then I have the smart contract that says I actually have ten. Ethan. The smart contract wins. Always. There's no way for the nodes to override the smart contract. Smart contract gets to determine what the ground truth is. Whereas for a sovereign roll up, whatever the nodes say is right.
00:09:29.386 - 00:09:50.158, Speaker A: That is right. That is the true state of the world. It's what we've agreed upon. Maybe tying this back to this earlier image of the world. So this is a smart contract roll up like we talked about before. We have users, sequencer, network, bridge, and Ethereum itself. And we mean by ethereum is kind of like it defines where execution Stalin is, is.
00:09:50.158 - 00:10:30.174, Speaker A: We've canonicalized this bridge. The bridge has all the power here. And the bridge gets to define what the roll up itself is. Taking this example from earlier, there's ever any disagreement in this whole image, unlike people in different states of the world, or they think something is true and something like they differ on what transactions were submitted or anything like that, you always default to this bridge. Like in particular, the smart contract side of that bridge. And that gets to determine the state for everyone else is maybe somewhat obvious for a regular l two, because we've used l two s. We know, you see on your block explorer, when you submit transaction on base, it's like it's got that little gray pending thing until it gets settled back down to the l one.
00:10:30.174 - 00:10:56.938, Speaker A: We're all pretty familiar with this, but then how does this work on a sovereign roll up? So, let's reconstruct this picture for a soften roll up. So you have one node, you have your base chain, you have some node there. But in the software, if you really don't have one node, you have many nodes. And importantly you really do need all these nodes. This network is one basically collective unit in the software roll up. And it's important for them to all have sort of joint structure. So you have all these nodes.
00:10:56.938 - 00:11:16.610, Speaker A: Then you have some apps as well. Again running on the nodes. You have uniswap aave I want to have. But now these nodes themselves, they get to define everything about the roll up. And so we canonicalize them. They're the ones who decide the ground truth of the world. And importantly, at this point in time, we don't have any other blockchains.
00:11:16.610 - 00:11:34.454, Speaker A: Like there's no bridge connecting it to anything else. There's no da layer. There's nothing else really. And the reason for that is these nodes get to define all those other rules. They're where the ground power lies. These nodes can decide, for example, they want to use an s three bucket as data availability, or they want to use any other part of the stack. They have that freedom.
00:11:34.454 - 00:12:03.740, Speaker A: No one else can override that power to them. Typically though for soft roll ups today you do have a bridge to a DA layer. So let's take Celestia. So this sovereign roll up, you have these nodes. They agree that anytime they have a transaction, they post it on this kind of like semi industrial bridge over to Silesia. And then they all agree that only after the transactions are on Slesia that they can kind of process those transactions from that point onwards. But want to really keep in mind, the power doesn't lie in this bridge, it lies with these nodes.
00:12:03.740 - 00:12:27.400, Speaker A: So these nodes can choose to change that bridge. They can say it says Lesia, we actually want to use Eigen da later, or we want to use some other da later. Or we want to use an s three bucket, whatever. These nodes really can define what the rules are they want to use. But this network, it's nice, but it's not that useful because there's no other blockchains that are really connected to. So let's say we have these other blockchains that we like. We have Ethereum, bitcoin, Solana, et cetera.
00:12:27.400 - 00:12:57.570, Speaker A: We want to get those tokens over to our sovereign roll up. We can totally normally construct bridges from any other network to our sovereign roll up in the same way you can any other chain. But importantly, these bridges aren't canonicalized on the l one. They don't really control settlement or execution. They do like each bridge, let's say the bitcoin bridge. That bitcoin bridge is in charge of all the bitcoin on that network and it kind of gets to determine who owns that bitcoin, but it doesn't get to determine anything else about this network. And you can, for example, upgrade a bridge.
00:12:57.570 - 00:13:36.938, Speaker A: So say Ethereum bridge. You now went from a four out of five multisig to a ten out of 15 multisig or something. That's totally fine. You can upgrade that bridge and it changes the properties of eth on this network, but it doesn't change anything else about the sovereign roll up like execution or settlement. Maybe digging into this a little more and trying to ask some more guiding questions to see, to probe around understanding how is our soft rollups different from l two s? Is venmo a soften roll? Let's go back to that. And then does this matter? I feel like in crypto we often over intellectualize things. We kind of make these small differences or kind of very technical differences, but does it actually affect users or communities in any meaningful way? So digging into this house is different from eth two.
00:13:36.938 - 00:14:00.238, Speaker A: We've already kind of talked about this at length, but it's ownership over the salmon execution. Sovereign owns its own executions element. Ethel two s they don't. It's fully owned by ethereum. And one way to kind of like really draw, bring home the point here is ethl two s have exit hatches. And this is something where the sovereign rollup can never override the exit hatch. That's because the Ethereum l two has the power or controls where Salomon is.
00:14:00.238 - 00:14:32.824, Speaker A: So let's take for example a user who wants to exit like base network. They don't need to at all care about the nodes on base. They just submit a transaction down to a smart contract on Ethereum and then that will exit them from that network. And there's nothing else they really need to do because that contract controls all the power. So they don't need roles permission. They only need the permission of the smart contract to exit. I've seen people talk about this at length online though around like why can't l two s just fork and ignore the exit hatch? What really is canonicalizing that exit hatch? I think this actually is a very good question.
00:14:32.824 - 00:15:22.020, Speaker A: Theoretically it is possible for an l two looking at l two to maybe fork and say I'm not going to care about the exit hatchen. So why can't they do this? I think that there's one core reason this is such a core part of the blockchain itself, the Sabin execution layer. By overriding it, you really destroy a lot of the fundamental value of that blockchain. Importantly for eth l two, if you ignore the exit hatch, all the eth in that chain is no longer respected by the ethel one, and all that value basically becomes destroyed. The blockchain is free to do this, but it basically now is severing ties. So it's something execution layer, which is where almost all the value drives from. So it's, in practice, not really possible for any sort of l two to fork in such a way where you don't respect exahatch or you want to change the rules in such a way where ethereum doesn't want you to have that rule change.
00:15:22.020 - 00:15:46.620, Speaker A: Now, maybe going back to the question from the very beginning of the talk, is Venmo Sovereign roll up? So talk about this a little bit. There's like four core parts of most blockchains and sovereign rollups. Sovereign roll ups own their own soviet execution. For Venmo, it does have all of these. There is a sequencing aspect of Venmo. There are Venmo servers. They'll order transactions like I'm trying to send my friend a dollar, friend trying to send someone else $2, it'll order those transactions.
00:15:46.620 - 00:15:59.840, Speaker A: It does make the data available. There's an API and a UI. You can go observe this data. It's accessible to anyone. There is execution. There is some type of I want to submit friend dollar. There is some state transition that happens.
00:15:59.840 - 00:16:16.710, Speaker A: I have one less dollar, they have one more dollar. It's a totally valid state machine. And there is settlement. Whatever Venmo Limited, the company says, that's how many dollars you own. That's how many dollars you own Venmo. There is a time when that transaction is settled and finalized. So it has all these kind of components and in some sense it's sovereign.
00:16:16.710 - 00:16:36.500, Speaker A: Venmo doesn't care about what Ethereum says its state should be. They can define their own state. But I'd say Venmo is not a sovereign roll up. And importantly, it misses two very key properties. So it is indeed a ledger. We just described all these things, defines a ledger, but it is not a permissionless network. And not everyone can join as nodes.
00:16:36.500 - 00:17:02.224, Speaker A: If I want to join the Venmo network to observe data, it's not possible. It's gated through the Venmo servers. And even more importantly, nodes can't fork. So if all the users of Venmo were like, I really don't like these rules, I think we should have different ways to send money, or I want to add this extra feature onto Venmo, let's say all the users want somebody to split bills and Venmo or some other feature. They can't go do that. The users can't decide, I'm going to fork and make my own feature. It's totally impossible under the structure.
00:17:02.224 - 00:17:25.066, Speaker A: But for sovereign roll ups, if the users all want something they don't like the current network as nodes, they can just fork that network away and there's no one stopping them. This is really what prevents Venmo from qualifying as sovereign roll up. Last question here. Does it matter if it changes the SOV and roll up or an l two? And I think it does quite a bit. Mainly like sovereign. It's in the name. Sovereign rolls have freedom.
00:17:25.066 - 00:17:40.002, Speaker A: They can choose their own future. They can change their own rules at any point in time. For example, they can extend the EVM. Later they can switch to an SVM, they can add additional types of rules. They can make gas changes whatever they want. They have full freedom to change that layer of their stack. Whereas regular ethel two does not have that freedom.
00:17:40.002 - 00:18:02.980, Speaker A: It has to go down to the smart contract on the Ethereum layer to make those sort of changes. Also you can fork very similar. The way I would think about sovereign is it's very similar properties to a sovereign blockchain. Like a cosmos SDK chain or some other SDK built chain. But it's much simpler to launch. You don't need a validator set, you don't need a token. You really just need a few pieces of software and a few computers that agree on some state.
00:18:02.980 - 00:18:23.934, Speaker A: You need nothing else really. You don't need to pay anyone. You just need people to run nodes. Let's go through maybe some examples of soft roll ups and how they might be different from l two s. So first you have NFT holders that take slots. Big NFT project. They can make a chain where only slots can transact on the network and then they can mute later.
00:18:23.934 - 00:18:41.796, Speaker A: Actually now I also want baby slot to be able to transact in this network. Might want to change those rules. Totally possible and very easy to do with the sovereign blockchain. You might imagine you have some MMO like Runescape or something where they have their own game currency. They want to build out a more fully functioning economy, but controlled by the users, not controlled by runescape itself. That could be a sovereign blockchain. Super easy to make.
00:18:41.796 - 00:19:03.916, Speaker A: They can control that currency, but some way to tie that back into the base game itself. But the currency can be a fully functioning economy. Also another example, maybe a little bit more wonky, but co ops often allocate resources. Those resources can be allocated on a sovereign blockchain. There's a really good paper by Paul Krugman called the babysitter co op or babysitter economy. Really recommend you all check it out. Super interesting paper, and I think actually it does tie in.
00:19:03.916 - 00:19:36.382, Speaker A: It gives a good example of a case where software blockchains really would really enable an economy to function much more elegantly. Okay, that is all. Last thing I want to say. If you are thinking about launching a roll up, please reach out to us at Rolluptridelabs Co. We've been doing a lot of work on rollups and talking to people who are making rollups and thinking about how we can make it easier folks to build a rollup. We have a tia bridge as a service for rollups, so if you all think of making a slushy a rollup, a big problem is how do you actually get Tia onto that roll up? We've talked to four or five different teams building rollups, and this is a problem everyone has. We just offer this now as a free service.
00:19:36.382 - 00:19:54.670, Speaker A: So if you need a safe, secure, scalable bridge to get t onto a rollup, reach out to us. We'll run it for you like all the infra, et cetera. Forma, which is the first slushy software blockchain, launched about a few weeks ago. Stride runs the canonical Tia bridge to forma. We're going to do that pretty soon for a few other blockchains, so please reach out to us. Thanks so much for your time.
