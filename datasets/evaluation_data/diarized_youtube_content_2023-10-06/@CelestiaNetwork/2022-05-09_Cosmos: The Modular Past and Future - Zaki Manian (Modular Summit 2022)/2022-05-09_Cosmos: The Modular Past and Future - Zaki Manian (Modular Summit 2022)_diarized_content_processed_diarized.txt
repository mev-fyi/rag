00:00:03.930 - 00:00:19.102, Speaker A: All right. Oh, you're already up. Next up, we have Zucky, co founder of many projects, also one of the founding fathers of Cosmos. I'll let him take it away. He's going to talk about the modular past and future of Cosmos. Cool.
00:00:19.156 - 00:00:38.540, Speaker B: Thank you. Didn't seem like it's working. Is it working now? Cool. Awesome. Sweet. Here we go. All right, so what does Cosmos have to do with Celestia? This, I think, is the hardest question to answer because no one knows what Cosmos is.
00:00:38.540 - 00:01:48.682, Speaker B: And Cosmos is sort of this emergent bottom up effort or emergent bottom up system that emerged out of a bunch of work on building blockchains in this modular way that started in 2014. And so I kind of am frequently the face of explaining the system architecture to the world. But credit to Jay for basically foreseeing a lot of the problems that Mustafa and Alex just talked about, which was, we want to run a lot of experiments. We want infrastructure to enable running a lot of these experiments. Back in the early days, we were extremely capital constrained. You could kind of understand the scope of the problem of how do you build like, a global financial system? But it was just like a bunch of people who were like it was like small groups of people who were coding. We had very little money, we had very little resources.
00:01:48.682 - 00:02:56.034, Speaker B: And to build all this stuff, how could you actually achieve the system? Another sort of sort of anecdote just about how this is all destiny, it was all destined, it was all foretold. The original idea that Jay and Ethan came to me with, which was their idea for a public blockchain, was called Supertanker. And Supertanker was basically the idea of have one tendermint chain where you write the block headers from other tendermint chains to and then you would do fraud proofs if those validator sets for those other tendermint chains produce an invalid state transition. So doesn't this sound, like, awfully familiar? My objection back then this is 2016. My objection to the super tanker design was we don't have a solution to data availability that scales like, tenement blocks can only be so big. We can't write the transactions for hundreds or thousands of blocks to the tenderament blockchain. We should do something else.
00:02:56.034 - 00:04:00.966, Speaker B: And so I kind of was very much pushing a bunch of other ideas about how you would get sovereign interoperability that I found in Mark Miller's work from the that's how we sort of got to the architecture that we sort of launched in 2021. We had no idea that it would take that long, but there were many hijinks and adventures along the way. So Cosmos, though, has been this, like so, like Mustafa mentioned, ABCI. ABCI is sort of Cosmos's modularity. I'll get to a little bit of the origin story of that later, but largely, I would say, the modularity that we built into the system has had a number of big success stories. So there are a number of chains that have used Tendermint to augment Geth, going back all the way back to 2016, maybe 2015, where, like, Kobe shows up in the Tendermint slack and is like, I have geth running on top of Tendermint, let's call it Ether mint. And then all of this code was open source.
00:04:00.966 - 00:04:48.142, Speaker B: A lot of people ran with it. And you get things like polygon and Binance, which are sort of elaborations on this original idea of augmenting death. With tendermint. The tendermint team focused on the Cosmos. SDK and we've had a bunch of big blockchains now that have billions of dollars of value that use the Cosmos SDK chain, the sort of raw Cosmos SDK and interoperate with the whole Cosmos SDK ecosystem of wallets and block explorers and all these pieces. And you get this shared component architecture around the Cosmos SDK with strong network effects. So, like terra luna, osmosis, atom, that all works? Then we also have this explosion of smart contract VMs that have emerged in sort of this ecosystem.
00:04:48.142 - 00:06:00.350, Speaker B: So you have Agoric evmos Cosmosm and probably there's going to be more. It's very exciting. And then you have people who have built entire alternate application frameworks like Oasis and Penumbra and Nomic. So this to me is like, hey, this is the shining example of sort of the social and adoption benefits and how sort of making these choices to build Tendermint through this ABCI interface as consensus separated from application has yielded enormous benefits to our entire industry. And so this is sort of, to me, why modularism has been good, why I am really happy with how we went about building Tendermint and Cosmos because I think all of these things have been massive wins. So our sort of layers of modularity are ABCI and ABCI application blockchain interface. So there's when you build on top of Tendermint, you get this list that's probably about a page of APIs that you have to provide in your application.
00:06:00.350 - 00:06:40.694, Speaker B: And it's sort of obvious things. It's like, okay, begin a block. So what should the application do when a block comes in? Deliver all of the TXS, so execute all the transactions, end the block, commit the block. These are like the sort of standard APIs. It's pretty simple. If you look under the hood of many other blockchain stacks, you see the same design patterns where basically the same application consensus interface. But what was unique about the tendermint approach was that we took this approach of sort of standardizing that API.
00:06:40.694 - 00:07:44.702, Speaker B: It hasn't changed that much since like 2015, 2016, though ABCI Plus is a new thing that's coming out of the Tendermint team to sort of enable all of the things that we didn't foresee. And hats off to Dave Ojo for sort of really extending the API in a general way. But this has enabled things like Optimint and Celestia to use ABCI in this really powerful way. But all of those chains on the previous slide are all ABCI users. The Cosmos SDK has also this modular interface where you can extend it with various modules. This has allowed very diverse use cases like THORChain, Axelar, all of these things really have very different systems interfacing throughout this module architecture. We also built IBC, the sort of built in Bridging protocol to the Cosmos and Tenderman ecosystem in a modular way where you could actually pull out, where you can actually extend the client interface.
00:07:44.702 - 00:08:54.200, Speaker B: So, like the transport layer, like, how do you authenticate a message coming from which blockchain? So we actually could have multiple security models and then we've always had support for many different signing algorithms and many different sort of cryptographic primitives inside of the Cosmos SDK has also been a huge enabler and sort of innovation and integration with different ecosystems. Like, you see all of these things coming out of the Evmos ecosystem that support the Ethereum signing algorithm. And people have tried to build in support for Polkadot signature system as well. Okay, so these are all sounds really great, but we've been doing this a long time and obviously hasn't all been beautiful and perfect. So Tendermint itself is a bit of a monolith. It has excessive interdependency between things like consensus and peer to peer layers. And though a number of teams that have tried to build experiments sort of like within that system have failed because of just sort of the overwhelming complexity of that task, we have a lot of large scale users that are also sitting on ancient versions of the system.
00:08:54.200 - 00:09:42.790, Speaker B: The version of the Cosmos SDK that Polygon is using for their Tendermint chain is, I think, from 2019. It's kind of terrible. We've also seen a number of teams kind of mostly finance as the biggest one. Take tendermint, make a bunch of changes to it, and then never open source or upstream their changes Phantom built. One of the dreams of Cosmos was not only could you have many applications built on top of tendermint, but you could have many consensus implementations because we don't believe that tendermint is like the end. State of consensus could also implement ABCI. And Phantom was the first blockchain to do this, but it never really shipped and it's sort of sitting on the shelf.
00:09:42.790 - 00:11:07.090, Speaker B: And then we basically abandoned the idea, though there's some community members who are trying to keep it alive of making the sort of local database of tendermint pluggable because modularity frequently imposes a lot of sort of maintenance cost on the core team. Okay, so how did this all start? So Tenderman's modularity came about because of an IP dispute. There was one set of Tenderman contributors who really wanted to GPL the entire software suite and another set, and Jay wanted to Apache licensed it. And in hindsight, I think Apache licensing tendermint was like a huge reason why the modular systems, why this has become such an important modularity layer. And it's like one of the things that worries me about sort of the modular blockchain stack is like, we're playing too many games with the licensing and the IP system and it's going to hold back innovation as people do business source licensing and stuff like that. I think getting tendermint to be Apache Two license was like a huge innovation enabler, especially in those early days of blockchain. So what we did was Jay came up with ABCI as a way of separating the GPL components from what he wanted to Apache license.
00:11:07.090 - 00:12:20.970, Speaker B: And this is how we got the modular system, that sort of formative thing sort of turned into the philosophy of Cosmos, which is sort of this extremely modular system architecture that I think has really proved its roots. So this is the start of modularity in Cosmos. What's the future hold? So ABCI is this very composable thing or this very powerful addition to the modularity system of tendermint. You can do a lot of things you can do mev mitigations. I think one of the things that you see from, for instance, Starkware has this proposal about using tendermint to decentralize the L two sequencer. And you can use ABCI plus plus to require a set of sequencers to agree on external data availability before producing another state update. And so we sort of somewhat intuitively, somewhat informed by all of these emerging requirements as sort of the modular stack evolves and we want to meet the needs of the modular, sort of builders of modular blockchains.
00:12:20.970 - 00:13:46.020, Speaker B: We are building these functionalities sort of into core tenderment to sort of enable people to do this without forking tendermint. One of the other questions that we've been thinking a lot about and there's been a lot of conversations is can we extend IBC itself to be sort of fit within the roll up paradigm? IBC is the sort of currently somewhat trustless in the sense of, hey, we have this thing where the packets are authenticated by the validator set of the sending chain. So if you already trust those validators, which you needed to because you were using that blockchain, there's no additional trust assumptions. But we could build and we've sort of always wondered about approaches to building actual state machine verification. So you actually could move away from trusting the majority of a minority of those validators to just being able to say, hey, the bridge itself authenticates or has fraud proofs. And all of this stuff actually composes very nicely into sort of the overall design of IBC. And I'm very hopeful that one of the things that emerges out of the celestial work is sort of like an IBC ecosystem that does sort of trustless settlement or state machine verifiable settlement, but across like in the sort of multipolar IBC world, rather than in this sort of hierarchical settlement layer up world.
00:13:46.020 - 00:14:45.190, Speaker B: We've been going back to the super tanker story. We've been thinking about fraud proofs for the Cosmos SDK. Also. If you go back to the historical split between polkadot and Cosmos, it was like we wanted to do interoperable multi chain blockchains and Gavin and Rob were like, yeah, we want to do all that too, but we want fraud proofs though they didn't end up actually doing fraud. We actually I think we have a relatively good architecture for adding fraud proof support to the Cosmos SDK and that'll allow it to sort of fit start like you to build applications in the Cosmos SDK actually. So open questions. We still really haven't I've been working in the zero knowledge proof ecosystem for many, many years, but we still haven't been able to figure out exactly where zero knowledge proofs fit in the Cosmos ecosystem.
00:14:45.190 - 00:15:19.940, Speaker B: And I still think that's like an open question. It continues to be like a sort of constant error of discussion. I like talked to the Mina team about using tendermint for data availability. We talked to the Starkward people about using tendermint for sequencer decentralization. It seems like there's some piece that tendermint is supposed to plug into the Xeronology ecosystem, but we still haven't actually figured that out yet. So a little bit of predictions about the future. Modular and monolithic blockchains are going to coexist for a very long time.
00:15:19.940 - 00:16:41.062, Speaker B: There is a kind of purity to being able to reimagine your entire system from the ground up. And there are things that I don't know how to build in the modular paradigm that I still think are useful in the blockchain space, but modular systems will outperform on decentralization. I think one of the coolest things about Cosmos is the sheer number of teams that contribute at every layer of the stack. And what you will see, what I expect to see with Celestia is now you will start seeing teams that are building settlement layers and roll up SDKs and zero knowledge proof execution environments. They're all built on top of Celestia, but they're also going to contribute to the core data availability layer. They're also going to find bugs, they're going to improve because as you build these modular architectures it's very friendly to sort of modular organizational structure because you can have different organizations own different parts of the stack and you also have incentives because you're building at one layer to fix problems or improve performance at other layers of the systems. Finally I have a project called sommelier.
00:16:41.062 - 00:17:13.814, Speaker B: And Sommelier is to me like the best example of a thing that doesn't work in the modular environment. It is a blockchain that is sort of coordinating DeFi strategy execution on other blockchains. And really the only way to do this is if you own consensus up in sort of your core application stack. And so this would be my counterargument to the modular blockchain. Thesis is going to rule them all. There's still going to be a place for modulates. I certainly have a lot of experience building them and that will be that.
00:17:13.814 - 00:17:37.600, Speaker B: Yeah. And the other thing is, I think stuff like sort of like the direction that many of Mustafa's co founders on Chainspace have kind of gone down with MISTIn and Swee is another great example of how you are building highly, very interesting monolithic systems are still to be built. So thank you very much.
00:17:39.250 - 00:17:39.950, Speaker A: Questions?
00:17:40.100 - 00:17:41.214, Speaker B: Do you want to do questions?
00:17:41.332 - 00:17:58.840, Speaker A: Take some questions? Yeah. Any questions? Can't see. All right, time for my walk. Excuse me. Here you go.
00:18:02.250 - 00:18:09.718, Speaker C: Can you comment on the use of Optimt with the Celestia stack in terms of modularization?
00:18:09.894 - 00:19:06.598, Speaker B: Yes. So optimint is an alternate ABCI provider. So, like, Tendermint is like the normal ABCI provider and OPTIMIT is an alternate ABCI provider. And the expectation is the way I think it's going to work is we are going to add new APIs to ABCI on Optimint that add what's necessary for fraud proofs in the Cosmos SDK, and then we'll add them on the cosmos SDK. And then the dream is that eventually gets upstreamed into sort of the Tendermint provider. And so we continue to have one ABCI, but now we have these fraud proof mechanisms. The other thing that Optimate, I think we need to figure out is exactly how we're going to because right now, leader election is owned inside of one of the questions I think is about this is in Tendermint, leader election is owned inside of Tendermint.
00:19:06.598 - 00:19:23.220, Speaker B: It's not owned inside of the application. And we either need to change ABCI to move that over or Optimate will just have like a standard leader election system for roll ups, like sequencers on top of Celestia. Does that make any sense? Yeah. Thanks.
00:19:25.190 - 00:19:37.240, Speaker A: Anything else, guys? Any other questions? AHA, all right. Is that oh, there you go.
00:19:39.610 - 00:19:57.770, Speaker C: Thanks for the presentation. My question is, do you think that in the future, monolithic chains will be more of a niche product that solves like, let's say, only one use case? And if it is, the follow up question is how in the future you think monolithic chains can scale?
00:20:00.990 - 00:21:10.580, Speaker B: So the reality of the situation is there's plenty of room to scale monolithic chains. You do have to exponentially increase the amount of resources that are involved in sort of the core engineering, but there's plenty to do in sort of monolithic scaling to get an order of magnitude to orders of magnitude throughput. The real reason why I think modular wins or like modular is sort of so fundamentally important and is basically like the future of finance layer is because what we need is we need the infrastructure to become public goods. We need to disperse the knowledge of how to maintain and build and improve and bug fix this to a very large community. You need lots of contributors. And really the only two systems that I think that have ever done this are like the Tendermint ecosystem and the Ethereum ecosystem. Everything else.
00:21:10.580 - 00:22:03.266, Speaker B: The knowledge of how to maintain the core system, how to improve the core system, how to change the core system is really siloed in a very specific group of people, typically a company. And the modular architecture is the only way to do that and that's the only way we're going to build a system that is fundamentally different from the legacy finance systems that we're trying to replace. And so my general bet would be you may see monolithic systems really succeeding in gaming, gaming, NFTs, all of these other entertainment, more entertainment applications. But I do think that the Ethereum sort of team is very right in their sort of directionally right that if you want to build the future of finance, modular is the only way.
00:22:03.448 - 00:22:04.420, Speaker C: Thank you.
00:22:08.410 - 00:22:09.160, Speaker A: Questions?
00:22:09.530 - 00:22:12.360, Speaker B: No, right behind you.
00:22:13.050 - 00:22:13.960, Speaker A: Go ahead.
00:22:15.050 - 00:22:26.380, Speaker C: How trivial or non trivial would it be for a monolithic blockchain in the future to evolve into part of a modular one as sort of a roll up?
00:22:28.670 - 00:23:33.790, Speaker B: So Alex was basically trying suggesting that it is more of a continuum than an absolute and there's an extent to which that's true. But I really think about these things as the social process of building them as being what overdemines the future technical direction rather than what the actual constraints of the software. What I've yet to see is ever a project that started out building sort of a monolithic architecture, ever ending up with the social organization to do a modular to build modular. They don't know how to run a multistakeholder process right. The success of a monolithic blockchain comes from doing the opposite, like not running a multistakeholder process, being like we are going to build a blockchain, we are going to make these technical trade offs. Like if these don't work for you, screw you. That is the way in which you successfully build a monolithic blockchain.
00:23:33.790 - 00:24:19.278, Speaker B: If you want to build a modular blockchain, you have to run this multi stakeholder multi entity process which is very messy and it's harder to figure out what's going on. It requires a lot of engagement. We see it in Cosmos, we see it in Ethereum like happening in real life and that is a very difficult social shift. So I think if innovations from the monolithic blockchain world actually make it into the modular blockchain world, it's mostly going to be like forking the code and rebuilding the social structure rather than the monolithic people being like, okay, we have gotten to the end of our monolithic story and we now are going to build a modular system.
00:24:19.444 - 00:24:20.640, Speaker C: Thanks very much.
00:24:21.650 - 00:24:36.610, Speaker A: Thanks. All right. Anything else? No questions? Okay. There you go. Whoop.
00:24:38.170 - 00:25:04.030, Speaker D: That was really interesting, really interesting talk. I wanted to ask you. You mentioned that there are some features or functionality in monolithic blockchains that you think would be or you don't know how you would build in a modular blockchain. So I was interested in what are the most challenging things to build in a modular system that currently exist in a monolithic.
00:25:04.930 - 00:26:10.350, Speaker B: So what are the things that make some of these things really hard? One is where you want the story basically comes down to situations where you can tightly couple the properties of consensus with the properties of the application. So if you want to change the rules of walk production in a very specific way that's about observing external systems, what you need is sort of monolithic total control. You want to have encrypted transactions that are decryptable. You want to be able to control your scheduling in such a way that you react to and execute to events autonomously from other blockchains. All of this kind of tightly bound integration between consensus and the application still represents something that's very hard to build in my mind, in the modular ecosystem.
00:26:12.770 - 00:26:18.370, Speaker A: Cool all. All right. I think that's it. Cool. Thanks, Aki.
