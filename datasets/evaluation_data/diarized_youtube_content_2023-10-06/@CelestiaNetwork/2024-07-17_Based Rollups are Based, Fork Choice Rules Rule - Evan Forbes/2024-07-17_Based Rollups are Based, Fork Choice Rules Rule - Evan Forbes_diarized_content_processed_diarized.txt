00:00:01.920 - 00:00:25.782, Speaker A: Hello, everyone. I hope you're having a good modular summit before I even start my talk. Thank you all for coming. And also just. It's easy to wake up in the morning and work all day when I get to work next to, like, adjacent to, or even with some of you, just because you guys are so smart and so much fun, and we have so many shared goals. So I deeply appreciate that. And the motivation for this talk was one.
00:00:25.782 - 00:00:56.960, Speaker A: I'm admittedly a bit frustrated. We're nothing prioritizing some of the things that I think we should be prioritizing. And the vibes on Twitter, at least in Cosmos and ethereum land, have been way off. So I'm hoping to try and energize people, get people a little amped up on some of the innovations in the space. So anyway, I'm going to start off with a quote. Apps that can capture their own mev will outcompete those who cannot. They will outcompete those who cannot.
00:00:56.960 - 00:01:20.904, Speaker A: Now, just because Abe Lincoln said this doesn't mean it's true. But if it is, this means something. This means that things like this, where this is the validator tips. So the tips to the validator for Solana, I believe this means that this is going away. Because if apps are capturing the value now, validators are not. This is a change. This is a change in the status quo.
00:01:20.904 - 00:02:04.930, Speaker A: Same thing for arbitrum. This is how much eth, at least in revenue, that arbitrum has captured, and they're not going to be able to capture all this anymore. It means something else, too. It means if you are the person or the entity that's doing this infrastructure that is allowing applications to capture their own mev, guess what? You win. Your margin is my opportunity. I drink your milkshake cucks, meaning the people who are enabling applications to capture their own mev, so they are seeding their ability to capture mev, will eat your margin. And ironically, there's nothing you can do but watch.
00:02:04.930 - 00:02:47.830, Speaker A: Now to the title of my talk based rollups and fork choice rules. Based rollups, along with the fork choice rules, I argue, are some of the most powerful tools that we can give applications to capture their own value. So applications are going to capture their own value. It's inevitable because they're going to be able to out compete the other ones. And here are the tools that we're going to use to do it. And anyway, there's one blocker, technically, arguably maybe two or three, but really there's only one, and it's censorship resistant. Sequencing, this completely unblocks and being able to programmatically capture Mev.
00:02:47.830 - 00:03:12.320, Speaker A: Because the status quo is apps must execute only the transactions that I want. Because I'm the proposer in my basement. I'm this basement Karen proposer in the order that I want. It's absolutely ridiculous when you think about it. It's completely antiquated. It's like why? It just makes absolutely no sense. It's completely just this tech debt that we've just inherited, and it's time to fix it.
00:03:12.320 - 00:03:36.972, Speaker A: So we have some people who have been talking about this for quite a long time. This is agnostic, Chad. So apps should be order agnostic. When you have censorship resistant sequencing, you can have apps pick the right transactions they want. That's best for them in a programmatic way. You don't have the proposer picket, you have the application picket. This is credible comparisons.
00:03:36.972 - 00:04:22.224, Speaker A: Most of the time it's framed as a credible auction, but fundamentally this is just a credible comparison in an auction. I'm just comparing the best bid and only apps know which transaction is best for them. So here sort of illustrates the point. At the top here we have these transactions that are censorship resistant. Normally the Karen proposer would pick the poop emoji one, but our application pick the fire one because that's good for the application. So if this was like in the case of like a liquidation, for example, the proposer is going to pick the liquidation that pays it the most money. It's kind of trash where the one here picks the one that's best for the application.
00:04:22.224 - 00:04:55.120, Speaker A: That could be burning the applications token. That could be a bit, that could be a million different things, and it's entirely arbitrary. Now we're going to talk a little bit about base rollups. Based rollups are incredibly powerful because they inherit the censorship, the finality, and the Reorg resistance of the sequencing layer. They just inherit the entire sequencing of the sequencing layer. And it's actually really easy to do. You literally need one thing and it is just to be lazy.
00:04:55.120 - 00:05:28.618, Speaker A: In this case, at least, being lazy is a superpower. I'm not going to execute the transactions until they've already reached consensus on them. Once I have that, then you already have a base roll up. I think every single cosmos SDK chain already works like this. You already use deferred execution, so it's not even something that difficult to have a base roll up. And based rollups, since they inherit the sequencing, they're just like a smart contract in that way where they can be. You can inherit you inherit this.
00:05:28.618 - 00:06:10.460, Speaker A: Like when I deploy a rollup, I don't necessarily always get all of the censorship resistance or all the liveness, because you can have a centralized sequencer, but with a base roll up, that's not the case. It's just like a smart contract. Simultaneously, it's not even nearly as limited as a smart contract, because now I'm almost close to a full l one. Not quite. I'm limited by the sequencing that I'm inheriting, but besides that, I have all the normal access that I would to like all the customization that I could make. With a custom chain, for example, you can build the block however you want. I don't necessarily think this is a good idea, but you could simply order all the transactions in a deterministic way.
00:06:10.460 - 00:06:47.114, Speaker A: You could literally just order all the transactions that are censorship resistant. Right. You can order them by gas price in your tokenization because you don't care about the base layers token. You can execute the transactions in whatever vm you want in whatever easy way you want. But this n block one is actually really fascinating. It makes things like order agnostic applications really simple, because most of the time with an order agnostic, like in the case of a liquidation, right, you sort of keep track of all the liquidations, and then at the end of the block you just pick the right one. The protocol picks it.
00:06:47.114 - 00:07:15.954, Speaker A: It makes gas price easy. Your users don't have to run these crank transactions to pay for all the gas to do all the comparisons. You just do it at the end of the block. You have block validity rules. Block validity rules are some of the most powerful things that you can do, that you can never do with a smart contract. So you can stop all valid blocks from being produced if you don't have, for example, an oracle update. So this is something like slinky that already exists that you can use in cosmos.
00:07:15.954 - 00:07:46.254, Speaker A: You can do the same thing on a roll up. Oh, and you can reduce your reliance on multisigs. This is like, sadly, most of the state of the industry at the moment is we make heavy reliance on multisigs instead. You can use hard forks. You can kind of see this guy's quads. They're very large, where if you go back, if you look at those quads, hard forks. Okay, fork choice rules.
00:07:46.254 - 00:08:21.040, Speaker A: Fork choice rules rule. They're kind of insane because you can mix and match some of the properties of proof of stake and proof of work, which is really mind blowing. That, again, I don't really hear people talking about this. You can have permissionless block production. You're inheriting the sequencer set of the l one. But if it's truly censorship resistant, anyone can produce a block. You don't need a token, right? This is what the proof of work people complain about all the time with proof of stake is like, oh, well, no, it's not really permissionless, because you need to have a token.
00:08:21.040 - 00:09:03.450, Speaker A: You need people to delegate to you. You don't need that for a base roll up. You can have credible comparisons. But like before, where we were just talking about having individual transactions and picking the correct one, except for you can do this for an entire block, right? Anyone can produce a block or a header for your block, and you can use a constraint. So, however you define your constraints in code, can pick the best block. All you need to do is you timestamp and publish your transactions. And then anyone can produce a block that is the most optimal, because you just compare it with your fork choice rule.
00:09:03.450 - 00:09:33.318, Speaker A: However you define what an optimal block is. Again, this is incredibly arbitrary and incredibly, incredibly powerful. A lot of people talk about using convex math to convex functions. I think that's what they're called, convex functions, in order to optimize things for amms, you can do that here. That's your optimization function. You can have tunable finality. So you are limited in finality.
00:09:33.318 - 00:09:55.130, Speaker A: For example, if you don't have single slot finality, then you're sort of limited. But if you do have single slot finality, then as a base roll up, you can change that. You don't need to have single slot. That's the minimum. But you can have even greater, because in some scenarios, it's actually beneficial to reorgs. Reorgs are not always bad. They could be good.
00:09:55.130 - 00:10:24.440, Speaker A: In most cases, probably bad, but in some cases, they could be good, especially if your blocks, like half a second. If your block is 12 seconds, maybe not. But if your block is half a second, then maybe reorgs could actually be good. You could just have a simple rule. If you improve the function by so much percent, now you're allowed to reorg, or if you can fit more transactions in the. From the original transactions that you fit, more trades in, you made more people happy. Now you can reorg.
00:10:24.440 - 00:11:14.508, Speaker A: And one of the last things that I'd like to talk about is that Celestia is actually the perfect protocol to do this. Everyone has the things that they optimize for. There's trade offs for everything. No hate ethereum, at least from my interpretation of this, tends to prioritize solo staking, where Celestia tends to prioritize like clients. And this changes the design space, at least for so far, right? With Celestia, we have fewer validators, and we have some stakers. But the most important piece right here is light clients. Light clients can hold the validators accountable because they do data availability sampling, because they force the validators to have fraud proofs or validity proofs for, for every single thing.
00:11:14.508 - 00:11:41.140, Speaker A: And because of that, you can have fewer validators and still be decentralized, because the decentralization doesn't come from the number of validators. It comes from the light clients. It comes from us verifying things on our phone. So because of that, the design space is much different. We can have way faster blocks. We can still have efficient, robust, and optimistically fast gossiping. And even if the topology changes, you can have a stricter topology here.
00:11:41.140 - 00:12:04.270, Speaker A: So here we have a validator directly sending votes to all the other validators. And the reason why you would do that is because it's super fast. This is how you get, like half a second block time. But even if that doesn't occur, the only thing that changes is blocks. Slow down a little bit. You're still just as robust, even if the network isn't in the most optimal way. But as the network becomes more optimal, the faster things get.
00:12:04.270 - 00:12:37.840, Speaker A: And even if things are, and I would like to note that fast here, I do not mean high throughput. High throughput is always a base thing. It will always happen. But speed, as in, like, I sign a transaction, I look up, and it's already included in a block. That's what I mean by fast. Okay, so sometimes I feel like when we hear things, we sort of gloss over them if we hear them too frequently. And a lot of times we hear this every single week as new paradigms that have the promise to change the way we interact and transact.
00:12:37.840 - 00:13:22.208, Speaker A: I feel like in crypto, many of us, we get into this space because we want to improve things. We see the status quo, and we're not satisfied. It's so easy to become disillusioned with the status quo, and we really have an opportunity to change things. I'm not saying that I know how to change things for the better, but I do know what doesn't work. And I think it's feasible that when you have all these systems that are constantly trying to capture value at every single interaction, every single transaction, that it compounds into complex problems that seem like you can't solve them. So we saw this in web. Two people said, nice things don't be evil, right? Of course, it didn't really work out that well.
00:13:22.208 - 00:13:51.878, Speaker A: What we want is can't be evil. That's much harder. We have to encode these things, but I really think that we can get there and with can't be evil. Again, I don't know a perfect solution, but I do know, just from anarchist values, that you can't really pick a perfect solution for everyone. But at least they can pick a solution for themselves. And if they're not happy with the outcome, they can pick a different solution. At the very least, we can aim for that.
00:13:51.878 - 00:14:19.892, Speaker A: That seems like a safe bet. And we don't have to pick these systems that are constantly trying to extract as much value as possible. I was stuck at the airport, like many of us were recently, and I ran into a vc and they were talking. They got me talking. We started talking about Celestia, and they asked me, they were like, oh, how does Celestia capture value? This was like the first question that they asked me, and I was like, bro, you totally missed the point. I was like, we're supposed to build a system that doesn't capture value. That's what we're here for.
00:14:19.892 - 00:14:33.700, Speaker A: We're not here for capturing value. It's absolutely insane. So I don't know. When people are sad on twitter, just, I don't know. Remind yourself that there's a lot of people like us out here. We're trying to improve things. We kind of don't care.
00:14:33.700 - 00:15:11.660, Speaker A: No matter what happens, we're going to build these systems, we're going to forego profits, and we're so determined that we're just going to out compete everyone. It's like, we can have public goods that are designed by people like Satoshi and Vitalik and Mustafa. We're just going to use those and we're going to build them, and there's nothing you could do to stop us. We have fancy mathematic and we have fucking computers. We're going to do whatever the heck we want. So fuck the status quo and fuck the status quo. And cucks are chads, okay? That's my talk.
