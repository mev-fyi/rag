00:00:01.610 - 00:00:12.414, Speaker A: Hello, everyone. So my name is Mike Neuter. I work at the Ethereum Foundation. And today I'll be talking about ethereum. PBS. R D roadmap. So a quick sketch of my talk.
00:00:12.414 - 00:00:57.600, Speaker A: I'll first go through what we define as PBS. This is kind of a buzword lately, so I'll define it in terms of what we mean for the Ethereum consensus layer. And then I'm going to run through kind of rapid fire style five implementations of PBS. There are some overlaps between them. We can kind of see the similarities, but I'll present each of them kind of in their own right. And then after that, I'll try and synthesize by pulling them together, explaining the design tradeoffs between each one, the timelines and yeah, kind of try and connect the dots in a way that hasn't been done very well yet because I think a lot of the proposals and the discussion has been scattered across different forum posts and Twitter threads. So, yeah, that's kind of what we're going to go through.
00:00:57.600 - 00:01:37.942, Speaker A: Cool. So, defining Proposer Builder separation in Ethereum l one, this is a post from Vitalik in June of 2021. So this was already over a year before the merge. And the idea here is to keep the proposer set, which is kind of the decentralized set of validators that are selected through proof of stake, to propose blocks for a given slot. And we want to keep them relatively unsophisticated. So we want it to be kind of accessible for people to run these validators at home on consumer grade hardware without much. Sophistication on the other hand, the builders are the people who are going to construct very valuable blocks.
00:01:37.942 - 00:02:22.934, Speaker A: And what this means is they're capable of extracting a lot of mev. This might require liquidity on different exchanges. It might require a lot of compute intensive algorithms because there's a lot of different permutations of transaction ordering to try. And so these will be highly sophisticated actors. And the goal is to decouple these two roles to avoid the centralization pressure. And what I mean by centralization pressure is that if we don't kind of formally decouple these two roles, then there's very likely to be a world in which builders collude with large staking pools. Staking pools are incentivized to do this because they can kind of benefit from the builders who are really specialized at extracting mev.
00:02:22.934 - 00:03:03.622, Speaker A: So they get higher rewards and the builders basically collude with them. And, yeah, the reason that the collusion is able to be kind of credible is because the staking pools have reputation. And this reputation isn't something that would be accessible to the kind of everyday solo staker. And this kind of fits into the broader picture of the Vitalik's endgame post, which is the idea that block production is going to be highly specialized. We kind of have to accept that and firewall off the centralization from the decentralized validator set in some way. So that's what Proposer builder separation aims to do. Cool.
00:03:03.622 - 00:03:37.202, Speaker A: So this is the first of the five designs I'll run through and oh, I should say the designs I like to categorize in terms of in protocol versus out of protocol. And what that means is if it's in protocol, then it's something we change in the consensus layer spec. It's part of the honest behavior of being a validator in the Ethereum proof of stake network. Oops, sorry. Oh yeah, this is right. But if it's out of protocol, then it's kind of like this sidecar thing that the consensus layer isn't aware of, but maybe many of the validators are making use of. So Mevboost is what exists today.
00:03:37.202 - 00:04:10.486, Speaker A: This is the software that was written by Flashbots right after the merge. And the idea here is that there's a third party to facilitate the relationship between the builder and the proposer. And this third party is called the relay. They broker the trust between the two and conduct this auction to give the proposer the highest paying block from the builder. So builders are sending blocks to relays. Relays forward the headers onto the proposers and the proposers commit to a header without actually seeing the block. So the trust assumption from the builder to the relay is that the relay doesn't steal the builder's mev.
00:04:10.486 - 00:04:56.730, Speaker A: The proposer trusts the relay to serve them a valid header because they're signing some header to a block without actually seeing that that header corresponds to a valid list of transactions. So the trust is brokered there. And the way the Relays interact with this is they run this sidecar software called Mevboost. So Mevboost kind of interacts with the consensus and execution layer clients and outsources the block production rights to this external block building infrastructure called the relay. And we see very massive adoption, like great product market fit for Mevboost. So 95% of Ethereum blocks are being built using this infrastructure immediately after the merge. It kind of skyrocketed from 50% all the way up to nearly every block being built through Mevboost.
00:04:56.730 - 00:05:44.758, Speaker A: Cool. The next design I wanted to talk about is kind of the original two slot PBS design. And I would say for the past two years about this has been kind of historically what people referred to as enshrined PBS or in protocol PBS. And this is a post from Vitalik and he presents this idea where you separate each slot into two blocks, basically, or two slots. So there's a beacon block. The beacon block contains some commitment from a builder to build a block and the intermediate block or the builder block actually includes the set of transactions. So kind of logically we're just splitting one execution layer, update one set of transactions into two blocks and it's this kind of commit reveal scheme that we use in Mevboost.
00:05:44.758 - 00:06:27.314, Speaker A: It's just authenticated and kind of authorized through the protocol itself. And the way a testing committee works is the testers are the people who vote for different blocks, kind of saying, I think this is the head of the chain and the testing committee is split between the first block and the second block. And yeah, the partition happens. And the kind of TLDR of this is that it actually weakens the security properties of the consensus layer. And I won't go into the details of this now, but because of this we thought of a new design and this is pretty recent. This is a few weeks ago and it's called the Payload Timeliness Committee. And this is another in protocol solution.
00:06:27.314 - 00:06:59.890, Speaker A: I should say the previous solution was also in protocol. So these are changes to the consensus spec that facilitate the PBS implementation. So this is quite similar to Vitalik's two slot design. The difference here is that we have a consensus layer block similar to before. It contains a commitment to a builder bid. The builder bid just basically says like, this is how much value I'm willing to pay to produce the block in your slot. And it also contains the header, which is like a commitment to the list of the transactions.
00:06:59.890 - 00:07:42.030, Speaker A: So this is voted on with the testing committee. This is all like as it happens today. The only difference is there's kind of a hole in the block where the execution payload will go and the builder reveals the execution payload once they're confident that the proposer proposed will become on chain. And then we have this thing called the Payload Timeliness Committee, which actually makes these votes to the timeliness and the availability of the payload. So it's quite similar to before. The differences are mostly in the fork choice rule. But the important thing here is we think this has better reorg properties in terms of securing the consensus layer.
00:07:42.030 - 00:08:36.574, Speaker A: Cool. Now, I wanted to present one other kind of out of protocol solution for PBS, and this is what we're calling optimistic relaying. And the difference here is that instead of kind of doing the in protocol version where you go through EIP process, you modify the consensus spec, you update the client software and then you perform a hard fork. We have this relay infrastructure that's already running. We already have 95% of blocks using the relays. So we can make the mevboost relay ecosystem look slightly more like the enshrined PBS version by changing the code that actually runs on the relay and reducing the relay responsibilities. So this diagram shows the block submission flow for mepboost and you can see there's kind of a lot of tasks that the relay does and a lot of latency involved in those tasks.
00:08:36.574 - 00:09:31.854, Speaker A: So the builder submits the block, the relay validates the block against the execution layer and then publishes the block through the consensus layer client. So the idea is, how can we make this look more like EPBs? And when we say EPBs, that's enshrined or in protocol PBS, like, how can we take the infrastructure today and evolve it towards what we want it to look like in protocol. And the idea is we can just work from what we have today and remove some of the relay responsibilities. So optimistic v one, we say, okay, take the block validation out of the system. This saves some latency. It also makes the relays easier to run because now they don't have quite the operational and compute costs of simulating all these blocks very quickly. And the way we protect the proposers is we say if a builder ends up submitting an invalid block that wins the auction, we'll have some builder collateral and we'll execute some out of protocol builder slashing.
00:09:31.854 - 00:10:07.866, Speaker A: So we'll just say, okay, we're going to use the builder collateral to refund the proposer. No problem. That's how we get around removing the validity check from the submission. The second version of the optimistic relay is actually removing the block download from the fast path. So in the same way before, if the builder submits a block or doesn't end up sending the entire block contents to the relay, we say, okay, we're going to slash the builder. That's a penalty that will be able to use the collateral to refund the validator. And the end game version of optimistic relaying.
00:10:07.866 - 00:11:05.146, Speaker A: And these diagrams are kind of wordy, so don't worry too much about the details. But the end game here is that the builder and the proposer actually interact through the PTP layer. So the builder gossips the bid, the proposer gossips the signed bid. And the relay essentially just takes a snapshot of the mempool of the PTP layer at a given timestamps and attests to the accuracy and the timeliness of different events. And really if you kind of break it down, this is kind of what the payload timeliness committee does, but it's just being done by the relay itself and the relay holds the collateral rather than the protocol. So this is kind of the molding of the relay responsibilities and the relay efficiency into something that should potentially be more compatible with enshrined PBS. Okay, and the last PBS design, and again, bear with me, the remainder of the presentation is about drawing the connections between all of these.
00:11:05.146 - 00:11:53.854, Speaker A: The last one I wanted to talk about is called Proposer Enforced Protocol commitments. Again, this is an in protocol implementation and it represents a much more general framework for allowing proposers to commit to things in the protocol. And it's actively being worked on by Barnaby and Diego. And the idea is that you use block validity to enforce commitments. So proposers commit to doing something and if they don't fulfill that commitment in the block that they produce, that block just won't be valid according to consensus rules. So the kind of cool thing about this general framework is that PBS can be enshrined through these protocol commitments. So you can have a proposer commit to a builder and then if the proposer block doesn't include that builder's bid, then the block won't even be considered valid.
00:11:53.854 - 00:12:23.530, Speaker A: So the difference here is we check the block validity. We use that to enforce the proposer commitments rather than the testing committee. Cool. So that was kind of a fire hose, but hopefully the next few slides will help connect the dots and draw the relationships between all these things. So on the top row I have two slot, PTC, payload timeliness committee and Pepsi. So those are the in protocol versions of PBS. The bottom row is Mevboost and optimistic relay, which are the out of protocol versions.
00:12:23.530 - 00:13:10.214, Speaker A: So PTC and two slot are really closely related, but basically we trade off what's called reorg resilience. Or this is part of like the consensus stability, the consensus safety. We trade it off for builder safety. So we're saying, okay, if we're choosing between these two, basically we decide how much we want to give the builder assurances versus how much we want the protocol to have certain properties to go from PTC to Pepsi. We use block validity instead of a committee. So this is kind of like who is doing the enforcement of these commitments and these checks and Pepsi is doing the commitment at the block validity level on the bottom. Oh, I should say also this is the heart diagram.
00:13:10.214 - 00:13:40.110, Speaker A: So hopefully that will become clear in the next coming clicks. The bottom we have mevboost, which evolves into the optimistic relay. And this is just relay evolution. And this is kind of already happening. Some relays are running optimistic, some relays have private closed source versions of their software. So this is kind of like already in progress of happening. And if we want to go from two slot to Pepsi, we can kind of view it as a more general version of doing PBS.
00:13:40.110 - 00:14:32.942, Speaker A: So Pepsi doesn't put any constraints on what the exact mechanism you use to do the PBS. It just says have some way for the protocol to enforce commitments from the proposer. Now the left side of the heart is as mevboost evolves into two slot or the payload timeliness committee, we can kind of think of that as just enshrining the existing commit reveal architecture of Mevboost into the protocol. So that's like the enshrinement path for those two things is through that evolution. And then the right hand side of the heart is evolving the optimistic relay into the payload timeliness committee. And this is essentially just as I was saying before, replacing the relay responsibilities with the payload timeliness committee responsibilities. And the cherry on top is Mev burn and inclusionless.
00:14:32.942 - 00:15:15.450, Speaker A: So these are kind of two additional features that are hopefully going to be part of the protocol. I'll give a quick overview. Mev burn is the idea that we want to take mev and instead of giving it to the proposer, we want to burn it. So kind of provably destroy it through the protocol. And inclusionless is a way we can say we want a certain set of transactions to be kind of force included into a slot. So this is a mechanism to enforce censorship, resistance and both Mevburn and inclusion list depend on one of two slot, payload Timeliness Committee or Pepsi. So that's why the three doted arrows kind of come down and show the dependency between those two and one of the in protocol solutions.
00:15:15.450 - 00:15:55.760, Speaker A: And the key takeaway here is that you can't do either of those things with an out of protocol solution. So that's kind of one of the big cons of having this out of protocol software. Cool. So that was kind of like a mind map of the relationship between all of the five designs. I also thought it would be cool to kind of go through a few specific categories and compare the designs kind of directly versus each other. I clumped optimistic relaying and mevboost into the first column. The second column is just Payload Timeliness Committee or two slot and the third column is Pepsi because Pepsi is kind of its own variant of a design space.
00:15:55.760 - 00:16:26.310, Speaker A: So the first axis I guess we can evaluate them on is the time to ship the protocol diff. So the Mevboost relay is already running. Optimistic Relay Roadmap is kind of in progress. This is something we can do now. Oh, I should say the three colors, red, yellow, sorry, green, yellow, red, green is kind of the good outcome, yellow is the medium outcome and red is the bad outcome. So that's why I call it the traffic light matrix. So yeah, Mevboost is already running.
00:16:26.310 - 00:17:10.870, Speaker A: It's kind of already in existence today. PTC we think of as a relatively minor diff. Like there's a big change to the consensus layer, but it's not so dramatic that it requires a whole consensus layer rehaul essentially. And Pepsi is really dramatic insofar as it allows proposers to commit to kind of arbitrary things. There's a lot of design considerations around what those commitments look like, how those commitments are encoded on chain, et cetera, et cetera. And you can kind of think of Pepsi as almost like an enshrined eigen layer. So there's all sorts of kind of tail risk at least associated with kind of opening up the doors and letting people to commit to arbitrary things as proposers.
00:17:10.870 - 00:18:00.178, Speaker A: The next axis I wanted to present was decentralization. So Mevboost is kind of by definition centralized. There's only about eight relays that handle all the blocks and that's kind of part of the expectation is that there's only going to be a few relays and a few builders that connect with those relays. PTC is extremely decentralized in that it shouldn't change the validating role at all. Basically being a validator changes the role that the validator plays in the ecosystem has very minor differences. So in that regard it has the same decentralization properties that we have today from the validator set. And Pepsi I put as yellow because there's a world in which Pepsi involves many more commitments.
00:18:00.178 - 00:19:10.678, Speaker A: Those commitments might require higher compute, higher bandwidth and as a result, there might be kind of a competitive advantage of joining a staking pool that is able to run more infrastructure in the same vein of arguments that present Eigen layer as a potential centralization vector in the system bypassability. So this is the idea that there's kind of some way to get around the mechanism that we design and for builders to collude with proposers. Typically the process is builders colluding with proposers to avoid any kind of tax imposed by the system or any inefficiency imposed by the system. So mevboost, I say, is not really bypassed or it's green in that regard because the builders already have close relationships with the relays. The relays kind of do the builder's job of connecting to the validators. So there's not really any incentive for builders as currently existing today to go around the relay because the relay is essentially like subsidizing the builder's job for them. For the PTC I put it as red because there's kind of no way to enforce that the proposer actually uses the mechanism that we put into the protocol.
00:19:10.678 - 00:20:20.918, Speaker A: The relay infrastructure would probably still exist, they could just outsource their block production to the relay rather than using the PTP layer to get their blocks. Pepsi I put as yellow because there's a world in which the enforcement of the commitments and the set of commitments that a proposer can make makes it harder for the builder to circumvent the protocol. And in that regard it might be better in terms of bypassability, in terms of censorship, resistance, I put mevboost as red because there's basically no way to do inclusionless, there's no way to force through transactions in today's relay ecosystem. But both PTC and Pepsi are very out of the box compatible with inclusionless and that's the censorship resistant design that we're looking forward to in the future. Yeah, the next one is flexibility. So in terms of what you can do with the relays, I put it as yellow because it seems like there's a relatively large amount of things you can do. But since it's out of protocol, you can't enforce things like mevburn, you can't enforce things like inclusion lists so the relays can evolve.
00:20:20.918 - 00:21:20.170, Speaker A: And it's kind of a latency game where the relays are maybe competing with each other, maybe updating their software in a closed source way, but in the same vein, they're not able to do anything through the protocol because it's this out of protocol software. The PTC flexibility is red because really we're just saying we're going to take an opinionated stance on what we're going to include in the protocol and it's going to be this commit reveal scheme very similar to mevboost and we're just going to kind of make it happen in the short to medium term. Pepsi, on the other hand, is maximally flexible because you're saying these proposers can commit to any arbitrary thing, essentially. And we want to give them the flexibility to decide if they commit or if they don't. And those commitments are going to be enforced at the protocol layer. Okay, two more unknown unknowns. From the relay perspective, I don't really think there's any unknown unknowns because we're already kind of in this regime for PTC.
00:21:20.170 - 00:22:06.650, Speaker A: We think the spec change would be relatively minimal and something that we can envision kind of in today's world. Pepsi, I put as red because I keep calling back to the Eigen layer thing, but we're just really not sure what people will commit to. We're really not sure how those enforcements will go. It has kind of increased slashing potential. There's just a lot less we know about the potential tail risk events that this type of system enables. Lastly, mev burn compatibility. This is something that I mentioned in the heart diagram, but the idea here is that in order to do mev burn, you need one of the enshrined versions so you can't use the relays as existing today, you need to do either PTC or Pepsi.
00:22:06.650 - 00:22:40.166, Speaker A: And to wrap up, I thought just kind of like a TLDR Vibe check on each of the three. I would say that the relay approach is kind of move fast and break things. This is like the Silicon Valley style of we're all going to play this game, we're going to compete, and may the best relay win. PTC is more like, let's get something in the protocol. Like, the relays aren't very sustainable. There's talks about relay funding issues and sustainability around the current existing framework. Like, it doesn't feel like we're in an equilibrium in any way.
00:22:40.166 - 00:23:17.342, Speaker A: So if we decide to go ahead with PTC, we could get something in protocol in the next yeah, hopefully months. And that's the goal of the middle column. The Pepsi version is this is kind of an aesthetic thing. It feels correct in terms of protocol being maximally flexible and maximally idealistic in some way of letting the proposers to commit to things. But it could be opening Pandora's box. So we're unsure what we're getting at. There's kind of these tail risk events that I mentioned earlier, but it could be the right approach in the long run.
00:23:17.342 - 00:23:22.520, Speaker A: So yeah, thank you very much. And that's all.
