00:00:01.720 - 00:00:47.792, Speaker A: Hi everyone, and thanks for Celestia and the modular summit for hosting and having me here. My name is Scott. I'm the founder of Argus Labs. And today I want to talk to you about the journey of how we beat the speed of light, and how geo localized sharded roll ups will define the future of on chain compute. I've spent the past four years of my life working on fully on chain games. The video game industry as a whole is a massive industry that has dwarfed the normal Hollywood filmmaking making industry for many decades now. In terms of market size, it's almost a $200 billion industry that continues to redefines itself in a medium and the way that we build better games and to how we can get it to the hands of as many people all around the globe.
00:00:47.792 - 00:01:51.726, Speaker A: From someone who is just like playing League of Legends in their bedroom, to people who play them competitively in the largest stage around the world in a sports tournament. And fully onchained games is like no different. Fully onion Games is yet another medium that we are exploring and we believe is going to be the future of how we build video games. And since the day that I started working on fully on gene games back in 2020, when I created Dark Forest, which is the first fully on chain games that defines the category, people have always asked me, why on chain games? Why build a game where every single game move and transaction happens on chain? Blockchain is shit, the blockchain is slow. Why go all to this trouble to build a game that is fully on this quirky compute platform? And so, to answer this question, I really want to take us back to the history of the evolution of video game as a whole. This is the Atari 2600. It's made in 1970s.
00:01:51.726 - 00:02:28.614, Speaker A: This is the days where microprocessor is still a new invention. They're expensive. It's not accessible. The small hardware, while you can fit it at your home, doesn't really have a lot of space for the hardware of the time. So you don't really have a lot of space to store these large bucket machines. And remember, in 1970s, the dominant form of fun and gameplay in a video game is large coin operated machines that you would have to go to an arcade to to play. These coin op machines are producing many companies, and even Atari themselves, like millions of dollars of revenue.
00:02:28.614 - 00:02:59.270, Speaker A: They're successful. People play them all around the globe. And everyone knows that arcade machine makes money. Atari 2600 on the hand, is somewhat of a dark horse. You don't really understand this new hardware. You don't really know whether people will buy them, it has a lot of constraints. It was expensive to do, research to develop, and even the games that you can play in this Atari 2600 is nowhere close to the quality of games you would be able to have access to in these large arcade machines on the coin op.
00:02:59.270 - 00:03:59.286, Speaker A: But sooner or later, within a few years, the tar 2600 became one of the most successful video game console in North America. It became the dominant form of play and wiped coin operated machines of the planet. You might see coin machines these days, but it's nothing more the novelties dwarfed by the mobile phones and the game consoles that you see today. This is Doom, made in the early 1990s by the legendary programmer John Carmack. From its software, Doom was the pinnacle of computer graphics at the time, when every other games was just a simple 2d game. One crazy guy called John Carmack decided that, hey, we'll build one of the early primitives for 3d games, which resulted in Doom being created. There was no clear reason why we needed a 3d game, but it was something that was exciting, that it's something that inspired people, and to this day have transformed the way that we see and build video games.
00:03:59.286 - 00:04:34.300, Speaker A: And most importantly, it defines the leading edge of computer graphics in the 1990s. This is ultimate online, launched in the late 1990s by Origin Systems, which is under the umbrella of electronic Arts. At the time, the Internet was this new weird, quirky thing. People didn't really understand it. People even didn't really think email have a real purpose. And Origin systems built Ultima Online under the umbrella of EA, where their business analyst thinks Ultimate Online would never succeed because Internet wasn't as accessible. It was expensive.
00:04:34.300 - 00:05:10.694, Speaker A: Those dial up phones has a shitty user experience. People wouldn't want to play these games that is so hard and will never make money. And boy, how would they go wrong. Ultimate Online quickly redefines the MMO category and is now the ancestor of all the many massively multiplayer online games that we play today. If you think about it, video game is very different than many softwares that we're building and using every day. We can't really see video games from the lens of a B two B SaaS product. Video game is closer to an art form looking for a new medium.
00:05:10.694 - 00:06:16.780, Speaker A: For wherever there is, there is a place for a video game to go. Fun, it will be derived from it. And if you think about it too, one thing that all these games have in common, from the Space Invaders of Atari 2600, to doom of the personal computers, to Ultima online of the Internet age, to Farmville, from the days of Facebook games to Candy Grush, from the age of mobile games. All of those things have one thing in common, which is that they use compute as a medium. And we believe where there is compute, there will be some new novel form of fun, and there will be computer games. And so we realized that the better question to ask ourselves is not why on chain games? The answer to ask ourselves is why not on chain games? Because yet again, blockchain is just yet another novel form of compute. It gives you weird tools in a toolbox for a video game that allows you to create new novel form of fun, such as interoperability, composability, immutable immutability.
00:06:16.780 - 00:06:55.152, Speaker A: And the list goes on and on. This is the painting the great wave of Konagawa, which is a form of art from Japan called Ukie. The great wave of Konagawa is beautiful, and it's also made 200 centuries ago in the 18 hundreds. This is the Mac pain. This is a software made by Apple in the 19 hundreds, obviously, like in just these past recent decades, in the 1980s. And it cost $200 at a time to purchase. And like, if you convert this to a dollar amount, today, Mac paint costs $600 for one piece of software.
00:06:55.152 - 00:07:22.998, Speaker A: The Mac paint is expensive and it's like extremely limited. You don't have a large canvas size. You don't even have colors. All of those fidelity, all the things that you could have done in a traditional painting 200 years ago, you cannot do in Mac paint. But yet again, this is like where we are. This is where blockchain currently is today. Blockchain so far have been a terrible medium for us to create video games.
00:07:22.998 - 00:08:03.394, Speaker A: Just like how the Mac paint is a terrible way for us to make digital arts in the 1980s. And so what is really making it hard for us to develop video game fully on chain? Why does all of these defi protocols and all of these different dexs and whatever use case or stable coins can work just fine in a blockchain. But these seemingly simple and joyous industry of video games are not able to build their product in a blockchain. Everyone tells us that the infrastructure is already there. It's already solved. But why are we not seeing on chain games? The answer is simple. It's speed.
00:08:03.394 - 00:08:48.596, Speaker A: And when we talk about speed, people often underestimate how performance intensive building a video game is, and especially how important speed is in building online game. And when we're talking about speed, we can't really boil it all down to just transaction per second. When we're talking about video games, especially online games, there are many measures of speed that we have to understand. There are ticks per second, there are entity updates, and there are also action latency. First, let's talk about the first two by talking about this one very simple game called Agar IO, which many boring high school students and college students play in their classroom all across the globe. A guard IO is an indie game. It's one of those games that you just built for fun.
00:08:48.596 - 00:09:55.560, Speaker A: It's not a complex game onto its own, and even Agar I O has 20 ticks per second and are able to support 200 concurrent players per room. This might not seem like a lot, and it's hard to understand if you've never really developed a video game, let alone an online game. But to put this in a blockchain terms, for us to be able to easily understand, Garrio has basically 50 millisecond block time with their 20 ticks per second. And for every tick you need to create a transaction, synchronize the player position, which in 200 players context would have been 4000 transactions per second. And to put this number into perspective, some of the fastest roll ups that we would call blazingly fast today would have a block time of 2 seconds, with a maximum theoretical transaction per second of only around 1000 transactions per second. This is nowhere close to even supporting one single gar I o game, let alone being able to scale to tens of thousands of daily active users that Agar IO would have. And now this is only one part of the issue.
00:09:55.560 - 00:10:47.260, Speaker A: The second part is what we like to call action latency. And this pretty much exists in all forms of games that we have today, from games like brawl stars which exist in your mobile phone, to fast based action game like Counter Strike that has hundreds of ticks per second. Fast action latency is something that's inseparable with the modern games that we have today. This is no different with fully on chain games. And if you have bad action latency, and this happens from time to time with even the modern game servers, you will quickly be welcomed by an angry mob of players. Even with 100 milliseconds. 100 milliseconds, you will get players complaining on Reddit or your forum or wherever your game community is.
00:10:47.260 - 00:11:53.584, Speaker A: And even with 200 milliseconds, they will try to scream at the developers to kick and ban these players out. And to really understand why this is a problem for fully onchained games today, we first have to understand how the networking architecture of existing blockchains work and to really analyze this architecture we have an easy way to measure this by introducing something that we like to call time to action. Time to action is the time it takes for a player move to be recognized. And this is measured by calculating the client to the server latency. How much time does it take for the client to submit a data to the server? The state transition delay, which is the time it takes for the server to process the state transition, and then afterwards sending that new state, the new world game data to the client, to your screen and getting it rendered. So if we were to trace all of this, we will see that we will be bounded by the speed of light as many thing in computation. There's nothing you can do to really beat, in its literal sense, the speed of light.
00:11:53.584 - 00:13:00.984, Speaker A: You are limited by how fast light can travel in your hardware, in networking cables and so on and so forth. And if you were to follow the path of Light in a fully engine game move, you'll first have to submit your game client transaction into a fullnode RPC, which is based on where you are in the world. And afterwards your full node would have to gossip that transaction into a sequencer, which will take an extra like, you know, hundreds of milliseconds depending on where your full node is collocated. And then you have to wait an additional second of block time for the sequencer to process the block and an additional net, an additional 200 millisecond of network latency for the full node to sync. And then afterwards you'll also still have to rely on an external indexer to fetch the data from a full node, which could take multiple round trips of times, network latency and only, and then it's not quite done yet. Then we have to process those data and then store them in an external SQL database. And only after completing all of those steps that we're able to go back to the game client and send the data there.
00:13:00.984 - 00:13:45.560, Speaker A: And so the way that we can measure this is by isolating this step right here, right, so the process where the state transaction actually happens. So if we add this up, we get this chart, and if we add this up, we'll have the number around 1520 milliseconds, or in like human terms, 1.5 seconds. And it's like a very conservative estimate. In reality, the numbers can be much higher and much higher variance due to congestion issues like p two, p layers being unreliable, weight limiting, et cetera, et cetera. And this is the state of the art for current on chain games. And the question here is that we're not even done yet we haven't added up this client server latency that is based on the player's location.
00:13:45.560 - 00:14:53.444, Speaker A: Here we have our old enemy, the speed of light. The Internet, as you might have known it, is comprised of many undersea cables that connects many regions all across the globe. And for data to travel from one server or one your computer to the server, it needs to travel all of these paths. And the longer the resistance of these cables to the destination, the higher the latency and the longer it will take for your data to reach its destination. For example, if you have a blockchain that is based in North America, maybe, let's say in this example in California, and you have players all around the globe, the players in Asia would have to end your 200 milliseconds of latency to just play your game. And like the same way for people in South America, Africa, Europe and whatsoever, these are all paths that will introduce friction for gameplay and will cause a lot of forms of games to be completely unplayable as a fully on chain game. This is like a chart that I took in my hotel room using the hotel Wi Fi from Brussels.
00:14:53.444 - 00:16:15.464, Speaker A: And as you can see here, to reach different servers, to reach different AWS regions all across the globe, you can vary from something as under to 50 milliseconds if you have a server hosted in Frankfurt to up to 200 milliseconds in my home city, Jakarta, and this also have other regions like us west, us east, which I kind of couldn't fit in this chart. But to give you an example, if you were to have, let's say, the server in Jakarta and you're hosted in Brussels, you would have to endure these 200 millisecond round trip time, which is going to be split across the client server and server client latency, bringing up additional time to action for your game. Again, to put these numbers into context, we have around 1700 milliseconds of time to action latency for these blockchain games, and the standard for an online game that has real time interactions are under 100 milliseconds. Remember that Agario is being played at 60 millisecond latency. And so the current speed for blockchain we have today is nowhere close to be able to reach this. And so the question here is, are we fuck? Well, if you've been listening for the past ten minutes, you'll quickly know that the answer is yes. And thanks for coming, but I'm just joking because that would be not fun if I just end my talk here.
00:16:15.464 - 00:17:14.658, Speaker A: So a lot of these things are the problems that I've learned from helping build the first in game Dark Forest back in 2020. As we build the game, we quickly realized that all these three problems are appearing left and right and affecting the gameplay of our users. And the same problem that I've mentioned today, speed for ticks per second, entity updates and action latency is everywhere. Every part of the gameplay is affected by these three key pillars that we have talked about in the previous slides. And so this is like why we built the world engine. The world engine is built on three fundamental thesis that we have in our vision towards the future of how we are going to make fully on chain games practical, realistic and fun. And our first bet is that we believe that the general purpose blockchain does not fulfill the intensive requirements for a fully onchained game.
00:17:14.658 - 00:18:13.530, Speaker A: The architecture, the things that a blockchain on l one and l two typically optimizes for transactional types of applications like e commerce app or Defi trade. These are very, very different server architectures than one you might see in a traditional game server. And the only way that you're able to really scale and achieve the flexible demands of a game server is through execution sharding, which allows it to be indistinguishable with how traditional game servers scale. And building fully on chain games eventually will be as easy, if not easier, than building a web two game. These are the three main goals that we're working towards and this is like how we are going to achieve them using the world engine. So first we need to understand how role engine execution sharding works in a traditional roll up. And our basic roll up in this chart we have the way that you would scale compute is by spinning up new roll ups which have settles to the same settlement layer.
00:18:13.530 - 00:19:08.704, Speaker A: And it would have maybe a seven days challenge period for you to be able to communicate with different roll ups. This is problematic because it fragments composability and it also slows down the ability for your players to interact with each other if they're located in separate roll ups. On the other hand, world engine with using execution sharding is comprised of a single unified roll up cluster that has both the EVM base shard and unlimited amount of game shard that you can deploy to scale to the demands of your users. And another thing that we do, and you might have noticed from the previous slide, is that we don't only have a single runtime for everything. We have two different runtimes for processing two different kinds of application usage. And this is what we like to call our multi runtime asynchronous execution. To really understand how this works, we first need to understand again, put this into a magic perspective of railroad tracks.
00:19:08.704 - 00:20:11.476, Speaker A: If you were to see a basic roll up, you can imagine this. Imagine the world having a single rail track. You're going to have blocks for once every 1 second, only for one EVM runtime and nothing else. So if there are more user demands, or you need faster blocks, or you need to have more users, et cetera, you can't really have more of them because you only have one realtor track and this is all you get with a one single basic roll up. With a world engine sharded execution, you could have multiple runtimes running along next to each other, processing different games at the same time, or different game rooms at the same time. You can still have the EVM shard running at 1 second per block, but you can also have game shards running up to 30 ticks per second side by side to them. So to give an example like our old friend Agar IO here, with 20 ticks per second and 200 concurrent players per room, we can feed this nicely into the world engine architecture by splitting each of those rooms into its own dedicated game charts.
00:20:11.476 - 00:20:54.134, Speaker A: This allows the world engine to scale to the demands of your game. So if you have more users, you can easily spin up more game charts and open up more real world tracks to process your game transactions. And by using this multi runtime approach, you get the best of both worlds. A lot of blockchain developers do not want to relinquish the tooling compatibility that you have from the AVM. And it's like where the AVM base Shard will come into play. It will become the economic hub and composability hub for your game, develop for your game players, and also other infrastructure provider to integrate with the rest of your gaming ecosystem. This will be your hub for economic activity where you can have item marketplaces, game treasury, et cetera.
00:20:54.134 - 00:21:46.268, Speaker A: And you can use this for cross shark component composability, which is again the secret sauce for many fully on chain games that allows you, your users to deploy smart contracts to extend the game fully on the EVM. And on top of that, again, the EVM base Shard is fully compatible with EVM wallets, tools, et cetera. So you don't have to use another new wallet app for your EVM base shard. And on top of that, GameShart is a dedicated blockchain. That is, we designed from the ground up to be high performance and is designed to handle performance intensive on chain gaming computes and it allows us to process this at 30 ticks per second, more than 5000 entity operations per seconds, and allows for many performance gains via our native entity component system. Data locality caching and I O optimizations. These performances are comparable to classical game servers.
00:21:46.268 - 00:22:30.724, Speaker A: These are numbers that we benchmark against, like the unity, netcode and other game server architecture that we found in the market. And the game shard fits that side by side. And now we've solved part of the equation. But we still have one more thing that we need to resolve, which is the action latency. Recall that this is like how a traditional basic roll up is architected today, and this is how we are able to simplify those architecture in our game. Optimized sharp with a game shard architecture, it is wholly designed for fast time to action. A basic roll up these days that uses a normal go Ethereum client has a lot of baggage that is unneeded from a layer one architecture.
00:22:30.724 - 00:23:24.538, Speaker A: It has a mempool that requires p two p message gossips. It has bad data caching, which makes it reliant on an indexer, which also slows down and increases the complexity of your server architecture for your on chain game. By eliminating all of those dependencies, we're able to make the game client be able to talk directly with a game shard sequencer and eliminating a lot of these unneeded network latency that plagues your game. And this is made possible yet again with the gameshark state optimization that is only possible by dedicating one architecture towards this one simple use case. And this is where we are today. From a regular blockchain that would take one and a half seconds. We are able to reduce this time to 30 ticks per second, which is 30 milliseconds, which is a staggering 1480 milliseconds seconds faster.
00:23:24.538 - 00:24:14.590, Speaker A: But this is again still a part of a problem. We need to figure out the client server latency and the server client latency. So again, remember that this is how a regular roll up works. A regular roll rollups only has one block producer which is based in one region, and therefore your players will have to endure different latency delays based on where they are located in their regions. And this is how the world will look like with the world engine. With sharding, you can have multiple block producers just geolocalize into many regions all across the globe, allowing you to have a fast low latency experience for all of your users, regardless where you're from. And this gives you like, this gives you also additional benefits by reducing geographic centralization, which leads to better availability and fault tolerance for your gameplay community.
00:24:14.590 - 00:25:23.346, Speaker A: Adding all of these up together, the 30 milliseconds client server latency and then like server client latency of those 30 milliseconds and also the speedup that we have from the state transition delay, the world engine is able to provide you with 18 and a half times faster time to action in comparison with the current basic roll ups that we have today, allowing more fully on chain games to be built and wider variety of gameplay mechanics to implement fully on chain. Now we have solved all these chain remain problems. Have we solved everything? Unfortunately, we have one more thing, and this is developers development time is like one of the most important thing in video games that people don't talk about as players. We just like waited until like, you know, EA publishes their new game and we don't really know how much it takes to like, you know, build a video game from scratch. And like some of these games will take years to build. And this is the problem we also have with fully onchained games. Developing a fully onchained game is extremely difficult and it's a time consuming and calming complex endeavor with talent shortage plaguing the industry due to how difficult it is to build a fully on gene.
00:25:23.346 - 00:26:27.334, Speaker A: And this is one thing that we want to solve with the world engine too. As game developers ourselves, we build a lot of toolings to make the life of game developers easier by creating a CLI tool to make it easier to scaffold a project, and also world editor, which is a graphical user interface program that allows you to inspect the entire game game state easily and also manipulate the game state as you iterate and prototype your game, and many other tools that can't fit within this slide. And we will have integrations with all the major game engines such as unity, Godot, Unreal and programming language SDK for JavaScript, C sharp and so on and so forth. And none of this would have been really cool without some game pictures. And so I'll give you some examples of the games that we've seen made on the world engine. One of them is Dark Frontier, which many people from the modular community have been fortunate to be able to play, which is launched earlier this year. And Dark Frontier was a fully on chain Space Conquest mmorts powered by Zero Knowledge proof, launched in December 2020.
00:26:27.334 - 00:27:07.484, Speaker A: And during the week that was launched, it has processed 700,000 transactions, which is staggering amount due to the intensity of gameplay that the game has. And of course just right before our talk. We have evolute who is revealing Gravitation IO, a novel real time fully on chain game where Agar IO meets some virus fiber. It has the performance intensive real time interaction that we talk about being previously impossible in a fully on chain game, but now made possible by the world engine. It utilizes geo localized shards to ensure low latency for players. It also scales horizontally due to user demand using the world engine. And last but not least for this presentation is ark and reveal.
00:27:07.484 - 00:28:14.700, Speaker A: Arkin Reveal is one of our experiments that we created together with seismic to combine the power of fully engine games with private verifiable compute powered by trusted execution environments or TE. The world engine gamesharks integrates with the seismic private compute framework and it allows fast paced, fully launching game with fast time to action by eliminating the need for client side ZK proving overhead. And today you can start building using the world engine by visiting World dot de v dot today, not tomorrow, not next month. This is something that is available for you to use today because we still have one more thing, and that one thing is block survivor. In the past month we've been experimenting with the world engine and we've been deciding like fun, simple little game called Block Survivor, which is a real time race battler game that we are launching very soon. But you guys have first access Vue to try it out today by visiting the Argus booth right after this talk. And so to wrap all of these things up, we see the blockchain today.
00:28:14.700 - 00:28:43.090, Speaker A: Like the Mac pains of the 1980s, it's expensive, it's slow, smart to use, et cetera, et cetera. And the world engine is going to turn the Mac pains of today into where the modern 3d game engines is today, with all of its powers and glory. And within the next few years, we will remember this period as the onchin game renaissance where people are able to build fully on gene games that you previously couldn't using the world engine. And with that being said, thank you everyone for coming.
