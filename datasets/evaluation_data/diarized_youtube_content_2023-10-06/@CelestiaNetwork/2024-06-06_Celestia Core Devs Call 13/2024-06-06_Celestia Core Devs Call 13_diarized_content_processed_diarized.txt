00:00:18.560 - 00:00:19.470, Speaker A: Okay, you can start.
00:00:19.510 - 00:00:21.450, Speaker B: I got a checkmark from Alex.
00:00:22.110 - 00:00:42.540, Speaker A: Whenever you're ready. Okay, starting in three, two, one. All right. Welcome everyone, to another Celestia Cordef's call. This is Cordev, call number 13. And let's get started from Alex.
00:00:43.120 - 00:00:44.460, Speaker C: Whenever you're ready.
00:00:46.360 - 00:00:59.630, Speaker A: I'm hearing some echo, by the way. So let's start with the roll call from the consensus side of things, core acting.
00:01:03.130 - 00:01:04.950, Speaker D: Hi. Rachel here.
00:01:05.570 - 00:01:07.070, Speaker E: Hey, Evan.
00:01:08.650 - 00:01:14.030, Speaker A: Thank you. Strain, fluff? No. Ibc.
00:01:14.930 - 00:01:16.950, Speaker F: I'm Ted. Susanna.
00:01:18.300 - 00:01:38.400, Speaker A: Hey. Binary builders. I don't think there's mark on the call. Informal. I think Ethan said he can't make it today from the DA side of things. Celestia node. Renee either.
00:01:39.580 - 00:01:40.760, Speaker G: Hey, Michael.
00:01:44.270 - 00:01:59.210, Speaker A: Okay, has there been any kind of updates from the working groups? Let's start with the DA working group. I don't know if there's been any updates. No updates from that group. What about Schwab and roll out?
00:02:05.110 - 00:02:17.520, Speaker G: So, I believe Schwab is set to be launched after modular summit. Like around a month at least. That's the last info I heard that. We don't want to rush it.
00:02:18.420 - 00:02:21.292, Speaker D: Yeah, it might take a bit longer than that, but.
00:02:21.316 - 00:02:24.120, Speaker F: Yeah, definitely not before modular summit.
00:02:26.260 - 00:02:43.650, Speaker A: Sounds good. Any updates from the interface working group? I believe there was a meeting a week or two ago. Any updates on that meeting?
00:02:47.510 - 00:03:14.590, Speaker G: Yeah, so, there was a proposition from Josh around the core API that's based on current celestial node API, but expressed in Protobuf. And that excludes all the admin privileges guarded APIs. And it was mostly discussed, but I'm not sure if there was anything that was, like, particularly agreed on.
00:03:17.970 - 00:03:38.556, Speaker A: Sounds good. Thanks, man. Anyone else has anything to add to that? Okay, any updates from the CK working group? I believe there was a call before this call.
00:03:38.748 - 00:04:46.116, Speaker C: Yeah, I can take that. We've been having biweekly calls and Zaki and I also had out of band calls. We've been going through the IBC light specification and mapping language from IBC to roll up and going through what are the requirements of the transport layer. So we are getting into a direction where we can have a real specification for the transport layer. There was also two weeks ago, we went through ICA version two, if we can get something from there for the application layer. And there are very valuable discussions. And coming up next, we will have an out of band call with Zaki, Aditya and I to discuss more the newest updates of the IBC lite specification.
00:04:46.116 - 00:05:02.340, Speaker C: And with that knowledge, after modular summit, we should be good to have concrete a full list of requirements and seeing if that is met by IBC lite. I'm talking about ZK accounts here.
00:05:03.280 - 00:05:12.288, Speaker A: Nice. Will there be a specification but the ZK account? After the modular summary in SCIP, I'm.
00:05:12.304 - 00:05:30.540, Speaker C: Not sure if it will be ready for a cip. There will be probably the specification will be. We'll do rounds in the ZK working group first, but it'll be definitely a milestone that we are aiming for.
00:05:31.400 - 00:05:35.568, Speaker A: Okay, sounds good. All right.
00:05:35.744 - 00:06:02.350, Speaker F: I just wanted to. Sorry, I had one thing to add is, like, assuming. Well, maybe not assuming, but if IBC light meets all of the requirements, Celestia would need to upgrade to SCK V 50 and we would release IBC lite in V ten of IBC go. So that's just like a note for, I guess, feasibility on the.
00:06:03.010 - 00:06:04.310, Speaker C: That's very good contact.
00:06:07.690 - 00:06:25.720, Speaker A: Sweet. Thanks, Susanna and Nashku. And I think there's a comment by Ismail about the interfere's working group that there's an ongoing discussion, and the next step will to drop a draft first version with all the feedback from there.
00:06:29.060 - 00:06:37.520, Speaker C: If you have input on how the API or interface should look like, please chime into that discussion.
00:06:42.510 - 00:06:50.570, Speaker A: Thank you, Ismail. Next up, let's talk about lemongrass hard fork and any kind of updates related to that.
00:06:51.230 - 00:07:45.450, Speaker D: Hi, I can talk about this. So, since last call, informal systems kind of wrapped up their audit of V two, which is great. And then we addressed all of our. The critical findings and cut subsequent release candidates of Celestia V two. So right now we're in the process of testing those release candidates on this, like, internal robusta chain, this like, internal devnet testnet thing. And shortly after modular summit, we plan on trying to roll this out to Arabica, then to MoCA, and then to mainnet with like, you know, like two weeks of delay in between there. So I would say this lemongrass hard fork is, like, roughly on schedule, maybe a little bit delayed, because we're testing on a testnet internally right now.
00:07:45.450 - 00:07:53.370, Speaker D: But that's kind of the update on that. And then there's this proposal thing that's under Leningrad's hard fork, but I'm going to hand off to Evan to talk about that.
00:07:54.430 - 00:08:04.130, Speaker A: Before we go into that proposal, were you able to sync with conduit on any kind of roll up testing as part of the private Devnet?
00:08:04.510 - 00:08:31.480, Speaker D: Yes, yes. Sorry. Maybe I should be a little bit more clear. So that's the private testnet thing that I'm talking about testing right now. And so we're working with Emiliano from Conduit, who's deploying an op stack roll up on top of this testnet, which will stimulate the hard fork upgrade tomorrow. So we're just kind of monitoring the testnet and the roll up to make sure they work before and after the upgrade.
00:08:32.340 - 00:08:49.760, Speaker A: Nice. I don't know if it's too late or if it's needed, but I would recommend. I don't know if they're doing it like an arbitram roll up as well, but I don't know if it's too late for them to deploy one before tomorrow is hard fork on the private.
00:08:50.420 - 00:08:52.894, Speaker D: I can talk to Emiliano about it.
00:08:53.092 - 00:08:56.070, Speaker A: Yeah, just to make sure we cover all tracks.
00:08:56.490 - 00:08:57.242, Speaker D: Okay.
00:08:57.386 - 00:09:12.074, Speaker A: All right, that's good. Um, then I think we have a proposal, governance proposal. Um, I don't know if this is part of lemongrass. Um, whoever wanted to cover.
00:09:12.162 - 00:09:53.710, Speaker E: Yeah, it's not part of lemongrass. This is just one of the blockers for adopting the relayer incentivized middleware. The main blocker at the moment now is just like, this audit is scheduled, or I don't think the audit is technically scheduled yet, but we forwarded Carlos and the IBC engineer, who I think is going to be answering questions for Zelik in a telegram group. I don't think there's a huge rush for that audit. So it's just whenever everyone has time, and then that's just like one less blocker for our layer incentivize middleware. The other blocker is just like, updating, but that's v three thing. So the next hard fork after lemongrass.
00:09:55.410 - 00:10:22.880, Speaker A: Nice. Okay. Okay, let's cover CIP 21. Did we cover in detail last time? I don't know. Column. Did you go over it before? I don't recall if we covered it last time.
00:10:30.060 - 00:10:34.600, Speaker H: I think we did. I'm happy to go over it again.
00:10:35.780 - 00:10:43.920, Speaker A: Oh, did you cover it last call? If you did, it's fine. We can just talk about what change we should move into. Review status.
00:10:44.710 - 00:11:15.420, Speaker H: I think it was two calls ago that I talked about it, basically based off this issue. I can also give you an update on where it is implementation wise, but I've sort of moved it just from draft to review. At the moment, there is work done in two repos. So one is the go square one, which has all the square encoding logic, and that's almost all done. So we'll be cutting a v two of go square soon. And so that just leaves the remainder of work in the celestial f itself. It should be the smaller part.
00:11:15.420 - 00:11:20.780, Speaker H: And so hopefully it's been targeted to be completed by mid July.
00:11:24.000 - 00:11:33.064, Speaker A: This is not part of lemongrass, is that correct? It doesn't require hard.
00:11:33.232 - 00:11:39.270, Speaker H: Okay, yeah, it does require hard fork. I assume we'll be targeting v three. My bad.
00:11:39.310 - 00:11:50.210, Speaker A: Okay. Yeah, I guess. Also, there's one part missing. I don't know if you guys already started with the implementation, but I would complete that part as part of the review process.
00:11:50.990 - 00:11:58.890, Speaker H: Yeah. Retool board that I plan to finish the reference implementation once it's been solidified. Like once we know what the implementation looks like.
00:12:00.630 - 00:12:01.490, Speaker A: Sweet.
00:12:01.830 - 00:12:02.810, Speaker C: All righty.
00:12:05.400 - 00:12:11.020, Speaker A: Now let's cover CIP 22, which got added today by Nashq.
00:12:13.960 - 00:13:48.950, Speaker C: Okay, so I can talk about it. The change is removing the blob start index. I will update this CIP to remove the whole index wrapper because the only thing that is being wrapped is this lopstart index. So I would just update the normal closure because I was taking it from the specification, but the specification got updated. Why do we want to remove this start index? The original purpose for it was to create compact inclusion proofs for broad proving when their square layout was wrong. So let's say a PFB was submitted, but the blob wasn't there, or the blob was wrong, things like that. Now with the discussion of moving to ZK proofs instead of fraud proofs for Celestia, we would not need this index anymore because it's not used right now.
00:13:48.950 - 00:14:54.056, Speaker C: There doesn't exist any fraud proof for it. So the light nodes wouldn't be reduced in security wise. Why it's nice to remove it is because it makes the PFB transactions itself deterministic. So the square layout would also be simpler like we would. We could simplify the app because right now, when the PFB is created, you don't know where your blob will land because the PFB namespace pushes all the blobs more and more and more. So only after the square layout is full, you would have to inject the index into the the wrapper. And because it is encoded using protobuf, it's also variable length.
00:14:54.056 - 00:15:39.990, Speaker C: So the estimation is not perfect of filling the whole square. So the whole thing will make it deterministic, which is also a predetermined to fast blocks law squares. Otherwise you cannot create PFB transactions and shares format without knowing the location of the square. And that would decouple that. So it is a small change, but it is consensus breaking. It would need a. Yeah, I think it would need a hard fork because it also would change the app.
00:15:39.990 - 00:16:00.790, Speaker C: Okay, but the implication of accepting the CIP are quite big because that would be the first step forward into moving to ZK proofs instead of fraud. Pros Faucetf.
00:16:03.220 - 00:16:28.760, Speaker A: Good. Yeah, so like, I have a few comments. Given that, you know, there's another work stream on CK accounts or the CK proof part, it sounds like either one has to happen before the other or vice versa. So are you saying we need to incorporate like, you know, this has to be included in the Celestia network prior to CK accounts.
00:16:29.090 - 00:17:01.340, Speaker C: Okay, so we, those are two different things in the sense that ZK accounts is a primitive for roll ups built on top. It will be a roll up lifeline. But here we are talking about the celestial light node and how it gets is its trust minimization from. So we have bad encoding fraud proofs, but this would move into the direction of ZK proving the whole state the less estate machine instead of using fraud proofs.
00:17:01.880 - 00:17:09.680, Speaker A: Okay, thank you. That makes a lot more sense. Um, my other feedback is, yeah, go ahead please.
00:17:09.840 - 00:17:31.340, Speaker H: Yeah, that's a question as well. So my understanding is originally putting those indexes in was to prove that that blob had been paid for, not that it had been included, because you can prove inclusion outside of this stuff by just having it there sort of NMT proof to the root. So I guess we would have a.
00:17:33.400 - 00:18:55.110, Speaker C: I can comment on that in the sense that the payment part is touching the state machine. So we would to be able to ensure that we can pay for a blob that would be fraud proving the state machine the index does not affect that. We actually cannot fraud proof right now. If APFB was paid for, because you would need to add a gas accumulator to have single round fraud proofs for gas payments currently, you would need all transactions to, in the worst case, to fraud proof if one of them wasn't paid because gas is calculated at the end of the block, I believe. So what I wanted to say is the, if a blob was paid for, wouldn't be like, if it wouldn't have be paid for, wouldn't be fraud proven using the index, but a state, a single round fraud proof using intermediate state routes and the state transition function.
00:18:57.570 - 00:19:05.830, Speaker H: Yeah, I was trying to say that the inclusion proof is different to this. Like you can improve inclusion without anything to do with the start index.
00:19:07.170 - 00:19:08.306, Speaker C: Yeah, but you need.
00:19:08.338 - 00:19:10.550, Speaker H: So this doesn't actually affect inclusion proofs.
00:19:10.730 - 00:19:18.090, Speaker C: So, okay, so you need the index to be able to prove that it wasn't included.
00:19:20.150 - 00:19:58.226, Speaker E: The reason for the index, sorry, I had raised the reason for the index is simply to reduce the size of the proof. Because as column said, you can prove inclusion of this blob outside of without using this index. However, that proof of inclusion is larger than the blob itself. Therefore without. Oh yeah, the fraud proof is so big that the blob can be the size of the block. Therefore, light client would have to have this limit to the size of messages that they download be the size of the block. Therefore it defeats the purpose of being a light client.
00:19:58.226 - 00:20:03.870, Speaker E: So this index allows us to only prove a subtree root instead of having to prove the entire thing.
00:20:04.580 - 00:20:17.440, Speaker C: I'll give you a strong note. Imagine a blob is not included and you don't have the index. How do you prove that it's not included?
00:20:27.100 - 00:20:30.440, Speaker H: Okay, how do you prove it's not included if you do the index? What do you mean?
00:20:31.030 - 00:21:02.660, Speaker C: Oh, the, okay, so I'm saying that you need the index for fraud proofs for blob inclusion. Fraud proofs where like by a counterexample would be. Now what if you don't have the index? Can you still prove that a blob wasn't included in a compact way? It's like a thought exercise.
00:21:08.360 - 00:21:11.980, Speaker H: I'm just trying to think about the use case of like, why are you trying to prove that's not included?
00:21:12.440 - 00:21:41.172, Speaker C: Oh, because it's like, it's a. Oh, okay. There was fraud. Celestia was malicious. Two thirds were, you know, malicious. And there is a PFB transaction which says that the blob should be included, but it's not. So someone paid for the blob, but Celestia cheaped out and didn't include it, even though it says it did.
00:21:41.172 - 00:21:43.640, Speaker C: And we need to prove that fraud.
00:21:46.380 - 00:21:54.240, Speaker E: Yeah, exactly. We can get rid of the index if we can ZK prove the block validity rules. So if that's our approach in the future, then we don't need this.
00:21:54.860 - 00:21:55.640, Speaker C: Yeah.
00:21:57.580 - 00:22:05.480, Speaker H: But I would hesitate from like, removing these things until we actually have a specification for a ZK proving it.
00:22:09.380 - 00:22:10.556, Speaker E: That makes sense.
00:22:10.748 - 00:22:32.170, Speaker C: That is a fair point. The counter argument would be that we do not have the capabilities or the specification for all the fraud proofs right now.
00:22:39.560 - 00:22:40.992, Speaker B: Can I jump in for a second?
00:22:41.176 - 00:22:42.060, Speaker C: Go ahead.
00:22:42.560 - 00:23:23.870, Speaker B: Sorry, I was trying to find where I raised my hand, but there's no raising hand button here. Yeah, I guess I just wanted to say that it's true that maybe we don't want to, for instance, have the CIP be deployed on mainnet without a specification of zkstate machine. But that doesn't also mean that we can't, for instance, say that the CIP is accepted, but for it to actually be included in a hard fork, it needs to be bundled with additional cips that fully flesh out this transition to a ZK state machine. Yeah, these two things are actually independent.
00:23:27.290 - 00:23:36.450, Speaker H: Complexity. But I don't mind, like, you're having this thing of like, oh, we can have two or three different cips and then they're all dependent on each other. Like, I prefer atomic units.
00:23:37.030 - 00:23:58.090, Speaker A: No, but that's part of the like within the CIP process. You can also say that this CIP depends on another CIP while still having that CIP flushed out. Even if it doesn't go and be implemented in a future hard work. It's okay to create the specifications ahead of time and say that this is requires something else because it's still in graph, it can be updated later.
00:23:58.890 - 00:24:03.070, Speaker H: Yeah, I'm saying it's okay. I just say it's like, makes things unneedlessly complex.
00:24:07.650 - 00:24:12.070, Speaker C: Will you be in favor of moving to ZK proofs?
00:24:15.290 - 00:24:30.436, Speaker H: I don't have information to make that decision yet. Call me old fashioned, I'm sure it's great, but I just want to see the proof of it first.
00:24:30.548 - 00:24:31.200, Speaker E: Right?
00:24:32.260 - 00:24:35.360, Speaker H: Instead of just thinking of it as some magic bullet that's going to save us.
00:24:37.660 - 00:25:04.030, Speaker A: I think it's a fair point. In the absence of a specification, it's hard to make a decision, but that's okay. Like, they're going to have to be implemented or specified really quickly. So maybe Nashku, what is your timeline on actually creating a specification for the CK proof? It doesn't have to be finalized or with implementation details, but just like a draft, kind of like how you did it for this one.
00:25:06.850 - 00:25:14.430, Speaker C: I don't know. The specification of how and.
00:25:16.340 - 00:25:16.772, Speaker A: It will.
00:25:16.796 - 00:25:38.280, Speaker C: Be ZK proven is a big can of worms in a sense that the easiest way that I would imagine is rewriting the application in rust and just throwing it at SP one or zero.
00:25:39.980 - 00:26:18.274, Speaker E: I would also agree that we should specify that at first. I do also think that you can have fewer constraints than running the entire application, and even if you run the entire application, that might not be constrained properly enough to actually provide the proof. So I do think that you could have this be independent. All we need to do is be able to read the proof and stick it in something like SB one, or read the square. Sorry, the square or the block. You might even be able to get away with the block. But anyway, I also agree that we need to specify that before we could even like really make a good decision.
00:26:18.274 - 00:26:27.710, Speaker E: And then I also would not advocate for just throwing everything in SP one at the moment, like the entire thing, like rewriting the entire application.
00:26:28.530 - 00:26:31.830, Speaker C: Yeah, that was the most naive solution.
00:26:33.930 - 00:26:34.950, Speaker E: Every time.
00:26:38.150 - 00:26:58.930, Speaker C: Okay, so you would suggest, you know, you have the square, we have constraints on the square. And given the square, does it meet those constraints? That's the ZK proof that will be needed to remove this index.
00:27:01.320 - 00:27:10.980, Speaker E: Yeah, we have to know all of the little tiny constraints that are necessary to make sure that, to make sure that this is actually the case.
00:27:14.120 - 00:27:15.060, Speaker C: Makes sense.
00:27:19.240 - 00:27:31.170, Speaker A: Okay, other points is for the backward compatibility. Does this only impact celestial node or would it impact packed? Either Lumina?
00:27:33.750 - 00:27:46.370, Speaker C: Oh, it would I guess. Also no, like celestial node is not impacted by that. I'm not sure if iger is impacted by that.
00:27:48.270 - 00:27:54.170, Speaker G: Yeah, can you say that again? Sorry, I just heard looming out of nowhere.
00:27:54.790 - 00:27:56.370, Speaker A: It's about this point.
00:27:57.970 - 00:28:11.790, Speaker C: I'm saying that Celestia note, and probably the implementation from you guys, does not consume the index in the BFB transaction.
00:28:13.050 - 00:28:52.492, Speaker G: Yeah, so we don't care about those, to be honest. Like if user wants to fetch those, he will get it. But we also expose kind of celestia types, library grade and celestia proto. And this one has this proto definition compiled to rust just in case someone wants to use it. But the node itself, it doesn't care. So it would be API breaking. In example, in a chat I mentioned it's breaking for sovereign SDK who uses it.
00:28:52.492 - 00:28:58.720, Speaker G: Yeah, but it's just kind of a translation to rust library.
00:28:59.260 - 00:29:27.152, Speaker A: Okay. All right. Based on that, what I would recommend is to abstract this point, Nash, instead of celestial, just call it da. Clients like celestial node and Lumina would not be, you know, the other point is also raised by Mac. It's breaking for sovereign SDK roll up on Celestial. I think. Yeah, you covered it here except sovereign SDK.
00:29:27.152 - 00:29:38.704, Speaker A: However, here the statement should be specified that you're talking only about sovereign SDK. I think we told, mentioned that point because there are roll ups live on Celestia, but they're not sovereign SDK roll ups.
00:29:38.832 - 00:29:40.712, Speaker C: Oh, I got the comment now.
00:29:40.776 - 00:30:38.560, Speaker G: Okay, can I add something? Yeah, so when I'm saying it's breaking for sovereign roll ups, it's not that I know the exact ZK logic if it utilizes that, but I know that currently they are pushing for this signer inside of namespace inside of blob itself, and due to lack of it, they need to unpack the transaction and just unpack it through correct wrappers. So index wrapper is one of them. And. Yeah, and from what I know, ZK rollabs needs this circuit hash. The programs route, something like this. So basically the hash of the ZK circuit, whenever you change the code, you need to update it. And this requires like whole roll up update, which is not trivial, let's say.
00:30:39.580 - 00:30:46.210, Speaker C: Yeah, so if we have the signer, then it will not be breaking anymore for solver.
00:30:48.230 - 00:30:49.646, Speaker G: That's my understanding.
00:30:49.758 - 00:30:51.290, Speaker C: Yes. Thank you.
00:30:54.830 - 00:31:22.894, Speaker A: Okay, sounds good. Yeah. So feedback is just like on this component. Just clarify, sovereign SDK. Otherwise, this statement that I'm just abstract to da layer here. Small minor comments, but yeah. Um, and I guess we have to follow up on the, um, like the ZK proving specification.
00:31:22.894 - 00:31:31.822, Speaker A: I know it's like a little bit early to talk about it. However, um, other than that, I do want to congratulate you on your first CIP Nashq.
00:31:31.886 - 00:31:33.370, Speaker C: So props.
00:31:35.310 - 00:31:36.410, Speaker E: I'm excited.
00:31:36.870 - 00:31:51.770, Speaker A: Yeah. And yeah, I think it's been a great discussion so far. Has there been anyone who wants to add any final comments on what we covered today, or can we end it? I have one question.
00:31:53.150 - 00:32:10.530, Speaker F: Do you. I know it's a while away, but kind of. The celestia developers know if you're planning to upgrade to SCK V 50 in the v three hard fork, or is it just too early to.
00:32:11.670 - 00:32:30.780, Speaker E: At the moment, we're trying to change our upgrade mechanism so that it's more compatible with the rest of the other cosmos SDK modules, which is currently blocking this. But yeah, that is like an extremely high priority for us updating IPC specifically because we're on the deprecated version now and who knows what could happen.
00:32:32.680 - 00:32:40.500, Speaker F: Okay, cool. I guess I was interested in from thinking about the ZK working group stuff as well.
00:32:40.800 - 00:32:41.860, Speaker E: Yeah, yeah.
00:32:45.120 - 00:32:47.180, Speaker F: Okay, nice. Thanks for the context.
00:32:50.320 - 00:33:17.716, Speaker A: Okay, sweet. Great call today. And. Yeah, let's. I think in two weeks time when the next call should be. In two weeks time, that will be like 17 July after modulus summit. So, care bear, maybe we can put that on the calendar for cordecall number 1314.
00:33:17.716 - 00:33:27.638, Speaker A: Yes, we'll do 14. My bad, my bad, 14. All right, y'all, great call. Looking forward to next steps on lemongrass.
00:33:27.734 - 00:33:28.206, Speaker C: And.
00:33:28.318 - 00:33:30.050, Speaker A: Yeah, take care.
00:33:31.750 - 00:33:32.894, Speaker D: Cool, thank you.
00:33:33.022 - 00:33:34.510, Speaker F: Thank you. Bye.
