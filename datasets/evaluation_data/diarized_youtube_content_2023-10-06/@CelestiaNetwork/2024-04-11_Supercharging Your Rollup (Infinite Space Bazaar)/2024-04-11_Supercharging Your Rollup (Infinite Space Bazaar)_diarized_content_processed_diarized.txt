00:00:03.320 - 00:00:21.754, Speaker A: GM and GN. Everybody, we're excited to welcome you to another Infinite Space bazaar workshop. Today I'm joined by Leo from Owl Protocol and we're going to be learning about Owl protocol today from Leo. Leo, if you want to introduce yourself, feel free.
00:00:23.094 - 00:01:07.126, Speaker B: Hello everyone, my name's Leo. I'm the founder and CEO of Owl Protocol. Today we're going to be mastering building applications on roll ups via the L protocol API. We want to encourage devs to be able to build various interactions that kind of merge the boundaries between web two and web three. We'll be using our platform to launch smart contracts, no code, and then our Zapier plugin to connect various different plugins that can enable real world use case and the goal is for this to be a starting graph for you to think about various ideas where you could connect things like ticketing, gaming, real world assets, et cetera. So as a brief introduction. Yeah, go ahead.
00:01:07.230 - 00:01:14.794, Speaker A: I was going to say it's the first time I've heard of Zapier being used with a roll up, so I'm really excited to learn. I'm going to go ahead and pass you the floor. Thank you.
00:01:15.494 - 00:02:08.602, Speaker B: Perfect. As a brief introduction, I'll go over a few slides, but then we'll also jump into a live demo through my screen share. So in terms of the agenda, we'll go through all protocol, then brief walkthrough, and then show you how to integrate automations via Zapier. So all protocol, our goal is to enable web three use cases that scale. We have an API first approach, which means that everything that you'll see in this no code demo through Zapier or through a dashboard is also triggerable via simple rest APIs. Our solutions enable various integrations thanks to Zapier, but also other solutions that you can go through our docs. Our dashboard makes it very easy to have a big overview of project and also add various team members to your team, so that if you have a collaborative project enables interactions between team members.
00:02:08.602 - 00:02:45.814, Speaker B: And then the magic behind our protocol is these powered by ERC 4337. So we use account abstraction and MPC wallets to make this experience seamless both for the developer and and the user. So one thing you'll notice is there are really very little interactions with any type of metamask or crypto. Now it doesn't mean that you can't use those, it just means that to get set up, we handle a lot of this abstraction for you. And like I said, we want to connect web two introgression. So a key part of that is oracles. One key differentiator of our protocol is that we're not focused just on public chains.
00:02:45.814 - 00:03:23.874, Speaker B: So when you go on our platform, you're able to launch on various public chains. We have our own testnet that's op stack rollup with data availability on Celestia, powered by Caldera that we launched. It's called Owl Hedwig Testnet, but that is just a playing around. And you can also use various testnets. You can use the gelato testnets, you can use any big public testnet. But the other solution you can use is self serve, which means you can launch your own roll up, whether it's through a roll up as a provider or through various toolkits like Rolekit, and then have our protocols infrastructure work on your roll up automatically. You don't have to call us, you don't have to contact us.
00:03:23.874 - 00:04:14.170, Speaker B: Everything works out of the box and you'll have access to the same features that you have access to on public chains, meaning APIs, dashboards, smart wallets and zapier. So some quick examples use cases. Like I mentioned earlier, you could do loyalty programs with ticketing, pulling Oracle data about real estate, gaming. Really, the possibilities are endless. Our goal is to really push web three adoption, and for that we need to build products that are familiar to users so that they're easily onboarded. They also have the power of web three, which is, you know, non custody, having decentralization, and also the interoperability across apps. So if we're integrating your roll up here, we have a quick screenshots, but we'll also do a demo on our dashboard.
00:04:14.170 - 00:05:03.190, Speaker B: You can just log into our platform, create a team and a project, and then add a custom network. So this is one key differentiator of our platform. The single crypto transactions you'll have to do is when you're launching a custom network, you'll have to fund our ERC 4337 relay. And most providers, for example like Caldera, will give you a faucet where you can just get some free testnet ETH when you're doing testnet, of course, otherwise you can bridge a little and deposit there. And then if your app roll up scales, you can of course always contact us and we can find a solution to sponsor more and more transactions. But this is the idea to get you started in developing as soon as possible, like I said. And then you can also leverage our no code dashboard to create projects and create collections and then start building quickly.
00:05:03.190 - 00:05:17.150, Speaker B: So I think now is a good time to take a pause between from the slides and show you guys how this works live. If there are any questions. I don't know if I can take questions during the workshop or at the end. Josh?
00:05:17.342 - 00:05:23.834, Speaker A: Yeah, you can take them whenever. I would say that if you're on YouTube, please drop them in the chat. We can put them up on the screen.
00:05:24.774 - 00:05:47.144, Speaker B: Cool. So in the meantime, I'll share my screen. Okay. I will share my entire screen. All right. So I hope you guys can see my screen a little wide.
00:05:48.164 - 00:05:49.624, Speaker A: It's kind of hard to see.
00:05:51.324 - 00:05:53.344, Speaker B: Is this good? Stable.
00:05:54.424 - 00:05:59.044, Speaker A: Yeah, it's. It's in a wide screen. Like a wide screen. So it's going to be hard to see on the stream.
00:05:59.784 - 00:06:03.084, Speaker B: Oh, God. Okay, I got it. I can make it like this.
00:06:03.784 - 00:06:08.000, Speaker A: Yeah. And then share the window maybe. I think that would. Oh, God.
00:06:08.032 - 00:06:30.692, Speaker B: Okay. Got it. All right, so let me stop sharing. This is better. Perfect.
00:06:30.868 - 00:06:33.224, Speaker A: Yeah. A lot easier to see. Thank you.
00:06:34.204 - 00:06:54.014, Speaker B: Got it. Perfect. So right now, I'm in the owl protocol dashboard, so you can create various teams and add various projects. It's very modular. Like, if you're working with various people, you can have different teams. Here. I have a project for the Celestia workshop.
00:06:54.014 - 00:07:21.834, Speaker B: So this workshop is. This is set up right now on the out protocol testnet, the Hedwig testnet. But later on, I'll try to show you a demo on a custom role with that kind of slide I showed you where you can add a custom network. So this is. This is kind of my project dashboard. And you can, you know, you can see I have various collections. So a very simple thing to do is we can.
00:07:21.834 - 00:07:50.900, Speaker B: We can, you know, create a collection here. And I can call it just like, my collection. My call. Just call it my call. And you'll notice, like, I don't have to upload a banner image, if you like. And very quickly, without having to need any gas, I'll be creating a collection. So this takes a little bit of time because it's a production network, but my collection has been deployed here, and I can mint items.
00:07:50.900 - 00:08:38.140, Speaker B: Now, what I want to show you is I've already deployed a collection here, which is called Eventbrite, multi ticket savior. So in this demo, we have an NFT collection, and we have three types of items. So we have regular tickets, golden tickets, platinum tickets, and these are going to map to the different tickets I created on my eventbrite page. So here on eventbrite, I have our demo project for my guests, and I created three classes of tickets. Now, the question is, how do we connect these. One key thing to note on our protocol is you have this API key. So right now it's hidden, but you can copy this and you can use this for programmatic usage through our API or through various plugins.
00:08:38.140 - 00:09:08.990, Speaker B: Now let's go to Zapier. So Zapier, if you're not familiar with it, let me share back those slides. Maybe. Is there a way we can move the slides? Okay, perfect. So if you're not familiar with Zapier, as a brief introduction, I just want to give a quick intro for those that might be not familiar. Zapier is a very popular low code solution that has over 6000 plugins. So you can connect things like not just eventbrite, but GitHub.
00:09:08.990 - 00:09:42.202, Speaker B: So you can mint like NFTs, for example, or some other digital asset for how many people commits people make, or, you know, how many pull requests they close. You can connect stripe or squarespace for like e commerce. So there are a CRM like HubSpot. If you're tracking customer relationships, there's very various different solutions that you can connect very quickly. So what we're going to do now is we've created, I've created a zap. And this will trigger based on our eventbrite. Eventbrite action.
00:09:42.202 - 00:10:23.304, Speaker B: So coming back here to Zapier, I've created a zap here. And you'll notice initially I created a zap here that says it's connected. So if I click edit zap. So this will be the, while I'm editing my zap, this is the interface that I see when I'm interacting with Zapier. If I click my zap here, there's different events I can use. So I could, for example, instead of doing a trigger based on people subscribing to my event, like buying a ticket, I could also do it based off of checking. So when a user checks in or some other trigger.
00:10:23.304 - 00:10:56.670, Speaker B: And based on the app that you connect, you'll have different triggers. So here, this is a. We've built a more advanced example. So a very simple example would be simply minting nfts based off of tickets. But here we have different classes of tickets. So one thing we want to do is we've set up, we've set up path rules. So these path rules enable filtering the trigger based off of the type of ticket so that we can then match it to the various templates that we've created on our protocol.
00:10:56.670 - 00:11:30.726, Speaker B: So here you'll see there's one for the regular ticket, there's one for the gold ticket, and then another one for the platinum ticket. And finally here again, low code. We connected the our protocol application. Now, right now this isn't published publicly, but if you go to our docs, there is an invite link that is accessible to all. So you can have access to this particular quickly. The app is currently under review but you can start using it today. And once you connect it, you'll add your API key here when there's going to be a button here that says connect app.
00:11:30.726 - 00:11:58.294, Speaker B: And we pick the mint ERC 721 event, which is a simple ERC 721 min. So we have our account connected here and then finally I want to go through this. This is the kind of where the pudding is made, which is all the different fields you can input. So our original NFT is launched on our testnet. So that's 133. 133. But you could input here your own custom chain id once you've added it to our protocol.
00:11:58.294 - 00:12:24.480, Speaker B: Right. So that's the first step. So that's slightly more advanced, but we'll go through that right after our collection address. And then here we're pulling the email of the user. So one key feature of our protocol, like I mentioned earlier, is we leverage account abstraction, but also, but also smart wallets. And our API can automatically generate and resolve email addresses to wallets for users. So this enables very quick onboarding.
00:12:24.480 - 00:13:14.160, Speaker B: Now if you had a form or some other solution that supports like an address, this too could also be regular ethereum address, right? So either works here we have a token template id. So what that is, is essentially a set of base metadata that we're going to pre fill. So essentially if I go here into my collection, you'll notice I created three types of items, regular ticket, gold ticket and platinum ticket. And I uploaded the image and I didn't add any attributes. But what we're going to do is in the zap itself, in the zap itself we're going to add an attribute because the template is just a fixed set of metadata. So any goal ticket will always have the image. So we don't need the image field here because eventbrite doesn't give us an image.
00:13:14.160 - 00:13:41.234, Speaker B: So we just uploaded on our protocol and just use the template id. But if we wanted to, we could also have an input form or something like that that generates like an image URL and the image could also be dynamically generated. That's also a possibility. And we've decided to add custom attributes. So by default we propose these kind of simple attributes, but you can also add custom attributes. So here we're adding when the ticket is created. So this is kind of the general setup of our zap.
00:13:41.234 - 00:14:06.598, Speaker B: And you can see how it's kind of very kind of low code. You can stack multiple of these, you can add various different. You could add something else to inventbrite. And finally, let's do the, let's actually buy a ticket. So let's reserve a spot here. Let's buy a, let's go platinum and then reserve a spot. There we go.
00:14:06.598 - 00:14:27.654, Speaker B: And so I'm going to buy a ticket for. So I already bought a ticket. I mean, this would also work. But what I want to show you is also that tickets accounts can be generated on the fly. I'm logged in. I'll just use my email. Oh, I can use it.
00:14:27.654 - 00:15:12.974, Speaker B: Okay, perfect. So I'm going to use my colleague Oscar's email. So I input my colleague Oscar's email and I'm buying a ticket. I'm going to get my ticket. And so here in the next couple minutes, what's happening is that eventbrite is going to trigger our zap. The zap is going to select which path to use. So in this case, it's going to be the platinum ticket.
00:15:12.974 - 00:15:53.482, Speaker B: And then the zap will call the owl protocol API and mint a new ticket. We can also monitor this through the Zapier ux. So under the zap runs tab or zap history here, we can see when our event, when our zap triggers. So this is an old one. Refresh. Okay. So you'll notice, like the, we had this, this ticket trigger worked, right? So sometimes it might trigger errors based off of like, eventbrite might not always give the email initially, but once the, once the email is updated, it will trigger the emit.
00:15:53.482 - 00:16:12.474, Speaker B: Right. So this is not really an issue. This is just ignore. But this, this triggered our emit, you see, at 08:48 p.m. And we can also view this on our block explorer, courtesy of Caldera. So this is, I'm on the block explorer. I have the add collection id of our collection.
00:16:12.474 - 00:16:41.660, Speaker B: And if we're looking at the block explorer, you'll see it should see. Am I on the right collection? I know this is the. I'm on the wrong collection. Give me a sec. There we go. So this is an old example that I have single ticket. Yeah.
00:16:41.660 - 00:17:09.404, Speaker B: So see here we can see that this token was minted. And so this block explorer is courtesy of. Yeah, it's powered by Caldera's block scout, so we can see that our token was minted. And finally, our protocol also indexes the token on the dashboard. So if we refresh here, refresher collection. The screen share is slowing down a little bit. The loading.
00:17:09.404 - 00:17:56.394, Speaker B: If you refresh here, you can see Oscar received his platinum ticket. So this was kind of a very simple example with our zapier triggers and using our API. Of course, if you have more complex interactions, you can use the API programmatically as well via a simple rest API SDK, or also support TRPC for those that use typescript. So I think we can take a small break for Q and A. And if we have time, I can show a demo with a custom roll up. It takes a little time to set up on Caldera, but I think maybe it's a good time to take any questions.
00:17:57.924 - 00:18:09.636, Speaker A: I don't see any in the chat, but I do have some myself. Thank you for the demo. That was really cool. What are some things that you would like to see built with owl protocol?
00:18:09.780 - 00:18:10.904, Speaker B: Sorry about that.
00:18:16.804 - 00:18:17.864, Speaker A: Oh, you're good.
00:18:30.344 - 00:18:32.284, Speaker B: My headphones are kind of.
00:18:32.904 - 00:18:33.792, Speaker A: Oh, good.
00:18:33.928 - 00:18:38.208, Speaker B: Yeah, sorry, I had audio issues. I hope my audio was coming through, though.
00:18:38.296 - 00:18:40.804, Speaker A: Yeah, it was good. Yeah, yeah.
00:18:41.784 - 00:18:42.604, Speaker B: Awesome.
00:18:43.824 - 00:18:55.060, Speaker A: There's nothing in the chat, but I am curious myself, like, ticketing is a really cool use case, but I'm curious, like, what you'd like to see built without protocol. It seems like you could.
00:18:55.092 - 00:19:32.244, Speaker B: Yeah, great question. Good. What was your question? Yeah, it seems like you could do just anything, right? Yeah. Yeah. So ticketing was a kind of simple example that is kind of people are familiar with, but what we want to enable is think about experiences that are more recurring. Because I think a big issue we have in web three today is that users will log into some web three platform mints, some NFT or min, some token, and then they won't really come back. They won't necessarily, especially when we look at comparatively to web two platforms, people are checking into Instagram every day.
00:19:32.244 - 00:20:21.176, Speaker B: So what we'd like to see is people come up with various use cases that encourage loyalty, people signing back in every day, every month, or gamification, whether it's in a game or in some type of product. And this can be, you can launch something very quick through Zapier, but then you can also build more complexity in the future with the API. And so we also want to push users to devs to build very smooth experiences. So this is why you'll have noticed most of the UX is kind of gasless. The only requirement for crypto is when you're setting up a custom roll up. Yeah, I guess. Anything else yeah, I guess to hear.
00:20:21.200 - 00:20:41.074, Speaker A: From you, you mentioned Instagram as an example of something that has user retention and people log in every day. I'm curious what the most web two combination you could think. Think of using our protocol that could be built but that still has like a crypto use case.
00:20:42.374 - 00:21:08.240, Speaker B: Yeah. Yeah. The most comment that we return retention. I mean, right now one thing we're looking at is simple loyalty programs because we also want to keep the barrier low. Right. Like if I were to say like, hey, build a new social network, there are people that are building like dedicated, full on protocols for that. What we're seeing ourselves as a platform is a dev tool and also eventually kind of explorer slash app marketplace.
00:21:08.240 - 00:21:54.406, Speaker B: So I like to say we're building kind of like the Xcode right now until you get the App Store or web three. Right. And so loyalty seems simple enough for web two devs to build because in my view, a reason that why web three UX is very, is not the best is there's technological limitations, but it's also the amount of developers is way it's not that big. And so we want to encourage people that don't know much about web three to build kind of fantastic front end and then they don't have to worry too much about the infra or the smart contracts. So loyalty is very interesting, especially because we've seen this like have a certain amount of success with like Starbucks. Like Starbucks had the, has the web three loyalty program on Polygon and that had, you know, significant user base. It's not like at the level of Instagram, but it's still a good proof concept in my opinion.
00:21:54.406 - 00:22:16.326, Speaker B: So the loyalty is a big one. So, you know, build something like we did today. But where like you track check ins, for example, and track the amount of check ins, the total amount of check ins, that could definitely be something you can build. Right. So not just like I get an NFT for an event, but like if I check in multiple times, I unlock some tiers and then certain rewards, then maybe third parties can plug into that or something like that. Nice.
00:22:16.510 - 00:22:19.558, Speaker A: Yeah, that's really cool. I don't have.
00:22:19.606 - 00:22:24.554, Speaker B: And then roll ups are a big part of this as well. Yeah, yeah. Good. No more questions. Cool.
00:22:24.674 - 00:22:27.334, Speaker A: Yeah, you can go on that if you want. I'm curious.
00:22:28.074 - 00:23:04.460, Speaker B: Yeah, yeah, I mean, I think roll ups are a big part of it. This is why we've built this kind of native support. Is that in my view right now we're in that kind of early burgeoning stages of roll up adoption where, you know, we have, I would say like a, if you look, track the history of blockchain. You had kind of big, don't coin very slow, kind of mostly like a single application for money. Then you had a theorem or program things, but it was like slower and expensive, especially once you got like a lot of people using it. Then we've got like l two s, like Polygon. L two s are cheap, but they're not as cheap as they used to because now there's a lot of people using them as well.
00:23:04.460 - 00:23:38.516, Speaker B: And roll ups really provide, I think, you know, that kind of infinite scalability. I mean, I know it's a meme at this point. And I think the trigger like roll ups are now I would say about a year old if you think like the early roll ups. But the difference with today is we have data availability solutions like Celestia that make it even cheaper. But also info provider roll up as a service providers that make it very easy to launch these. So if I'm an enterprise, I'm a dedicated chain for my project, I can launch a roll up quickly. There's no real difference between roll up and app chain might be at this point it's more like launch a roll up.
00:23:38.516 - 00:24:14.680, Speaker B: You might be the first only app there first, but then your partners might join you. That's the key narrative in my view. And where Alper call situates itself is we don't deal with the roll up infra like we let other people that are specialized in that, but we let you just like add your RPC and just fund our relayer and then you're good to go. And then if your roll up really scales, we can start deploying dedicated infra for that roll up. Essentially we have a two tiered system. Like if you're a public chain, you get more bandwidth than if you're just in dev mode. But yeah, that's kind of the thesis.
00:24:14.680 - 00:24:50.034, Speaker B: We might enable every roll up to leverage this tooling because usually you have like this specific framework that you really like. Specific like infra provider that's doing like indexing, for example, but it doesn't work on your custom chain. And then like, to get that set up, you have to like, I don't know, get some partnership with them and call them. It's like, it's not really, that's not a solution that's scaled, especially for like smaller projects, right? Like, okay, like, yeah, you want like, you know, some huge aa solution to work on like a big chain that has a lot of funding. They'll work, but, like, if I'm kind of more mid tier, I don't have those contacts. It's not going to work. So our self serve solution kind of works very quickly.
00:24:50.774 - 00:24:52.142, Speaker A: I guess that might be all right.
00:24:52.158 - 00:24:54.074, Speaker B: I think. I think that's good for now. This.
00:24:54.974 - 00:25:02.134, Speaker A: Sorry, I was going to say I think that might be a good segue into showing us how to add a custom chain or a custom roll up.
00:25:02.174 - 00:25:15.476, Speaker B: Yeah, yeah, of course. Yeah, yeah, definitely. Let's. Let's do that. So I wasn't sure if we had time, but let's do that if you want. Sorry.
00:25:15.660 - 00:25:18.388, Speaker A: We can go another half hour if you want. We don't have to.
00:25:18.476 - 00:25:24.064, Speaker B: All right. Okay, awesome. Okay, awesome. Let's try. Let's try. Let's try this. So let me share my window again.
00:25:24.064 - 00:25:57.744, Speaker B: So this will be a good way to showcase everything from start to finish. So right now I'm on Caldera, but you could use any solution you want. So you'll notice this is a different chain that the one we use. So we use the official protocol Hedwig testnet, but I just created like ten minutes ago a new custom chain. And so I have my RPC endpoints and this is like all you need. You need RPC endpoints. It doesn't matter what provider you use or your own roll up.
00:25:57.744 - 00:26:38.416, Speaker B: That's all that matters. Next thing I'm going to do is I'm going to go to the protocol dashboard and I have my. So I'm going to join my team, right? So this is the celestial workshop project I had created. And right now our configuration is we have one project per chain. We might add ability to do multi chain for projects, but right now we want to keep things simple for users. So I'm just going to create a new project and I'm going to call it like workshop custom chain. The next thing I'm going to do is I'm going to add a custom network.
00:26:38.416 - 00:27:09.824, Speaker B: You'll notice here you have all the public blockchains that are available. So these are some public chains we've deployed. We'll deploy on a couple more as people ask us to. But the downside of these is you need a little bit, doesn't take a lot of time, but you still need to reach someone on our team here. I'm going to add my custom chain, so I'm going to copy my endpoints here. So I have my RPC URL. I say, like workshop chain.
00:27:09.824 - 00:27:52.370, Speaker B: I'm going to copy my chain id, which is here. Sorry. So one thing to note is when you do this, your chain is only accessible. I mean, the RPC is public, but the chain itself on the out protocol infrastructure is only accessible within your team. We have to do this for security purposes because if other, I could launch some shady node on this if I wanted to. So right now it's scoped to your team, but then you can build your thing, test if it works out and then you can contact us and then we can make it as a public chain as well. Right? So this is because like I could launch something with like chain id one, for example.
00:27:52.370 - 00:28:18.120, Speaker B: So right now we just don't want public chains, like fake public chains, if you will. But this works with every, everyone on your team will have access to this. So this is an ETH native on op stack. And then we can also add our. The explorer isn't live yet. Okay. So we can also add our block Explorer link.
00:28:18.120 - 00:28:41.144, Speaker B: Right. So this is deployed by, if you have a block explorer, this is optional. So I'm going to click create network. Yeah. All right, perfect. So now you'll notice my, the chain is, is accessible here. And so now it's creating the network.
00:28:41.144 - 00:29:19.184, Speaker B: So this takes a little bit of time to set up. Sorry. Sometimes you might have to refresh because it hasn't loaded your chain yet, but so you'll notice. So we have these two addresses. So let me check. We have, so one thing to understand deeper how our protocol works is we have a gas tank address and a relay address. The only thing you have to worry about is the gas tank address.
00:29:19.184 - 00:29:44.970, Speaker B: This is essentially just an address that stores whatever native token your chain is using on public networks. We fund this on testnets. This is free on main nets. You get some free. Once we launch on main nets you'll have some free credits and then we'll charge you in fiat based on your expense. The gas tank is, yeah, is a gas tank, essentially. And then the relayer is what submits the transactions that you're see 4337 transactions.
00:29:44.970 - 00:30:02.786, Speaker B: But really the only thing you have to worry about is the gas tank. Okay, yeah, so we're getting an error here, but the reasons. We recently reduced the threshold, the minimum amount that you have to fund. So it is funded. I checked on the blockchain. So please ignore this error for now. We'll update this.
00:30:02.786 - 00:30:41.714, Speaker B: But so this, this, you'll notice the gas tank is funded right now. And so I had my colleague just fund it in the background just to speed things up a little bit. But essentially you can, you know, take funds here from the faucet that Caldera gives you and then deposit those onto that address. And so now I can create a collection. Collection. And then this should deploy as we watch. And so you'll notice there's.
00:30:41.714 - 00:31:16.842, Speaker B: So you'll notice that there's a transaction that was sent from the gas tank. Right. And so this is kind of diving a bit more deep into how our protocol works under the hood. So this is kind of the first transaction that sets up the owl protocol stack, which will fund the relayer and deploy all core contracts required for owl protocol. Sorry, try again. Let me try again. It seems there was a little bit.
00:31:16.858 - 00:31:21.054, Speaker A: Of bug, the collection type.
00:31:22.314 - 00:31:45.256, Speaker B: So I think the issue is it's not funded. I think. Let me. Okay, one sec. I don't want to spend too much time on this right now, because it's. I think I need to fund it with more Ethan. But essentially, once you fund it with the gas tank, all of this should work smoothly.
00:31:45.256 - 00:32:09.224, Speaker B: We reduce it to lower. Okay. We have a tutorial online that shows how to do this. I believe right now you got to fund it with, like, one ETH. It's kind of the minimum. So if we can go on the faucet right now, access the faucet.
00:32:12.724 - 00:32:13.012, Speaker A: This.
00:32:13.028 - 00:32:37.726, Speaker B: Is going to take a whole time. So, essentially, we have a terror online that you can follow, and the only step you have to do is fund the gas tank with one ETH, and that will enable you to deploy the NFTs and do all the same interactions we just did earlier on your custom chain. It does take a little bit more time, so that's why we did on the public testnet. Everything is standardized, essentially. Cool. I think we can end it. End things here.
00:32:37.726 - 00:32:39.914, Speaker B: If there's any more questions in public.
00:32:40.574 - 00:32:52.054, Speaker A: There are not. I don't see any on Twitter either. Double check that. I have to ask, though. I'm assuming you're a Harry Potter fan. Is Hedwig a reference?
00:32:52.094 - 00:33:06.470, Speaker B: Yeah, yeah, yeah. It's a Harry Potter fan. It's also, like, we're pretty work pretty late, so we're pretty night owls. So that's. That's kind of the theme. Makes sense of our company. Awesome.
00:33:06.470 - 00:33:07.926, Speaker B: Awesome. All right.
00:33:08.110 - 00:33:11.726, Speaker A: Was there another slide that you wanted to get to?
00:33:11.870 - 00:33:20.702, Speaker B: Uh, we can go. Yeah, we can go. We can go through. I think it was mostly Q and a at the end. Yeah. Oh, yeah. You can follow our dogs, and you can join our discord.
00:33:20.702 - 00:33:29.024, Speaker B: Uh, this is our discord link, and also we have a discord in the hackathon slash, uh, discord. So if you have any questions, feel free to ask us.
00:33:29.884 - 00:33:40.984, Speaker A: Sounds like discord is the place to ask questions about l protocol. I want to thank you again, Leo, for showing us the really cool demos, and I look forward to seeing people build with owl protocol.
00:33:41.964 - 00:33:54.284, Speaker B: Awesome. And we'll also be sharing a write up of this video later today so on medium and on our docs. So that should also enable kind of a more for those that prefer reading over videos.
00:33:54.704 - 00:33:59.544, Speaker A: Yeah. Awesome. I like the double video for everybody.
00:33:59.584 - 00:34:02.244, Speaker B: All right, have a great day everyone, and good luck with that hackathon.
00:34:02.944 - 00:34:04.248, Speaker A: Thank you. Bye.
