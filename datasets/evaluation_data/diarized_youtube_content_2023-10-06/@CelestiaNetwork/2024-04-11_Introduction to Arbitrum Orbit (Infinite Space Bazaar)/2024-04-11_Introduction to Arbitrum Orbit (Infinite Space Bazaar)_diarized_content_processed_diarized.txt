00:00:02.840 - 00:00:33.484, Speaker A: Awesome. And we're live. Good morning, good evening. Good afternoon, everybody. Who's tuning in? Thank you for being here. We are having another workshop for the infinite space bazaar, and today we'll be learning about arbitrum orbit with Celestia underneath. Today we have Diego from the Celestia Labs team, and he'll be going through how he built the integration and what you can do with it.
00:00:33.484 - 00:00:39.952, Speaker A: So, Diego, if you want to introduce yourself, you can go ahead.
00:00:40.128 - 00:01:10.914, Speaker B: Yeah, absolutely, GM, everyone. Like Josh mentioned, my name is Diego. I'm a solutions engineer at Celestial Labs, working mainly on integrations. More specifically, I work on l two integrations. Right. So, like, the roll up stacks that you usually associate with, like, ethereum, l two s. And today, more specifically, we're going to talk about the arbitrum nitro stack, more specifically, arbitrum orbit.
00:01:10.914 - 00:01:45.044, Speaker B: Right. Like, what does that encompass, and how does that stack with celestial underneath? Like, kind of works. Right. We're not going to go too deep into the weeds, but we're going to try to give you a good overview of kind of, like, what's going on so you understand what you're dealing with. And then we'll get into, like, a quick demo of, like, how easy it is to deploy your own arbitrum orbit roll up with Celestia underneath in, like, around 15 minutes and. Yeah, so I guess, like, let's get started.
00:01:45.624 - 00:01:52.554, Speaker A: I'll let you take it away. If you do have questions for Diego during the talk, please put them in the chat and we'll get to them towards the end.
00:01:53.494 - 00:02:10.794, Speaker B: Awesome. Awesome. Thank you. All right, so introduction to arbitrum orbit with celestia underneath. Right. If you. If you ever looked at the arbitrum nitro repo, their attack line is nitro goes vroom, vroom and fixes everything.
00:02:10.794 - 00:03:07.518, Speaker B: So that's why I picked a little race car emoji with the dust and the Celestia underneath sparkles because we're about to give you a really, really fast, in my opinion, overview of, like, what is nitro, what is the arbitrum stack, and how does Celeste underneath come in and make dh fees cheaper, but also makes the stack still verifiable and secure? Right. So this is, like, probably the, I would like to say, 10th or so presentation in NYSE. You probably already heard about what Celestia is, so I'm not going to do, like, a deep dive on what Celestia is, but just to put it on the top of our heads. Right. Celestia is the first modular data availability network that securely scales to the number of users. This is thanks to data availability sampling. More on that later.
00:03:07.518 - 00:03:47.330, Speaker B: We can talk about that during the q and a time, but basically the more people run light notes, the more people are sampling the network, the bigger we can make the blocks without sacrificing the hardware requirements to verify the network. What is blobstream? You're going to hear me say blobstream multiple times during this presentation. Might as well define it. Now. Blobstream is a data attestation bridge between Celestia and NEDM chain. Currently it's live on arbitrum one as well as base. And it's also on testnets.
00:03:47.330 - 00:04:43.134, Speaker B: Right, like Arbitrum one sepolia and base sepolia. And more specifically, the version that's live is Blobstream X, which is a parentheses CK version of Blobstream. Right? So it's the same concept of a data to station one way bridge between Celestia and EVM chain. But instead of doing it, and I guess like, let's call it the naive or the simple way of like verifying the validator signatures in a smart contract, which obviously becomes very gas intensive and expensive, we use, we use ck, right? We use a snark proof to verify celestial consensus. This was done by the folks at succinct labs. Shout out to them for their amazing work. And now, what is Arbitrum orbit? There's multiple definitions around the arbitrum docs.
00:04:43.134 - 00:05:26.584, Speaker B: I just picked this one from the website of Arbitrum orbit, which is really cool. But basically arbitrum orbit is the permissionless path for launching a dedicated chain using the arbitram technology. So arbitrum orbit in and of itself is not like its own tech stack. It's not necessarily its own thing like library or repo, but it's more of a concept. So it's in the same way that other l two s have their own stack. Orbit is a way to refer to the way in which you can use the arbitrum tech stack to deploy your own chain. Now what is this arbitram technology? Right.
00:05:26.584 - 00:06:01.344, Speaker B: I'm not going to give you a deep dive into each one of these, otherwise that would take too long. But we're going to do a brief introduction into what you're getting into. What is this arbitrum tech stack? Why choose orbit? Why choose the arbitrum tech stack? First of all, Nitro, Nitro is a fully integrated, complete l two optimistic roll up system. That just means it's a oru, right? Optimistic roll up. It actually has fraud proofs. They're live. They've been live since inception around two years ago.
00:06:01.344 - 00:06:36.062, Speaker B: And it has everything else that you would need to essentially build a roll up, right? It has sequencing. It has the token bridge contracts. It also has advanced data compression. It has a bunch of other cool little features that are meant to make it essentially as good as possible. And then there's other things, right, in the arbitrum tech stack stylus. You may or may not have heard of this. It's essentially an upgrade that will be added to the Arbitrum nitro.
00:06:36.062 - 00:07:31.034, Speaker B: Like repo, right? So, Arbitrum Nitro is the software, both the combination of roll up node and sequencing stack, as well as the contracts that make an optimistic roll up using the arbitrum tech stack possible. Stylus is essentially a upgrade, if you will, to the virtual machine or the execution environment of Arbitrum nitro. It's an upgrade that adds a second coequal vm to the EVM. What that means is that we're not replacing the EVM. We're actually adding a second virtual machine that you could use in tandem with the EVM in your roll up. And this allows you to write programs in Rust, C, and more while still preserving the EVM. That's why they call this the EVM.
00:07:31.034 - 00:08:38.180, Speaker B: You're not giving away what you're used to. You're not giving away EVM tooling and languages. But now you're also gaining a secondary vm through the stylus upgrade that allows you to write your contracts using essentially any language that compiles down to awesome. And the cool thing here is that it has a lot of improvements on how to essentially make execution. I don't want to necessarily say more performant, but let's say more efficient stylists can accomplish a given task in less opcodes in the arbitrary machine. Then it would take solidity, since, under the hood, what's happening is that you have the EVM, which compiles down to arbitrum wasm. Now you have stylus, which allows you to compile these, like, rust and c programs, et cetera, into arbitrum wasm.
00:08:38.180 - 00:09:35.634, Speaker B: So it's more efficient. It's cool, lets you do all these crazy things. We can talk more about this later, but here's a cool little diagram from the arbitrum docs, more specifically on stylus. And it shows you what the idea is of, like, having the EVM, right? That's. That's what? Like arbitrum one and arbitrum nova and basically any orbit chain nowadays has, right. It's just an EVM roll up with fraud groups and some advanced techniques that a roll up user usually doesn't really even see or notice. And then here's the EVM, right? What we just talked about, it allows you to do all this cool stuff, right? And last but not least, there's bold, right? So bold or bounded liquidity delay is dispute protocol that enables permissionless validation for arbitrary chains.
00:09:35.634 - 00:10:28.816, Speaker B: Right? Now, what does that mean? So currently, if you deploy a or. Well, even before we talk about deploying an orbit chain, if you look at the current arbitrum tech stack roll ups like arbitrum one, they have a limited set of validators. Essentially, validators are whitelisted. You can't join, you can't try to validate the chain if you're not whitelisted. Obviously that's not great because it's not fully permissionless, but that is essentially getting sold by both, which the code is like live on GitHub. You can go check it out. And this is what will allow not just arbitram one and arbitram nova, but also any orbit chain to have permissionless fraud proofs.
00:10:28.816 - 00:11:08.028, Speaker B: Right? Now, let's just try to pack everything that I just talked about into a nice little sentence. So how does orbit relate to the arbitrum tech stack? Right. So an orbit chain uses nitro. Right, the roll up software stack. But it also benefits from all these upcoming upgrades like Stylus and bold, plus the already existing tooling in the ecosystem. Right. What that means is that if you launch an orbit chain today, with or without Celestia underneath, you're not locked in into your current status quo.
00:11:08.028 - 00:12:08.614, Speaker B: Right? Like the day stylus becomes available and merged into nitro. Right. Soon after, it will become available to orbit chains, including ones that have Celestia underneath. Same thing with both. It's part of the kind of workflow and overall integration, because ultimately, as we're going to unpack in a bit, adding DA to something like Nitro doesn't, doesn't necessarily change a bunch of other stuff in the text tag in the code, and it allows us to essentially be ready for when these upgrades come along to the arbitrum tech stack. Now, let's talk about arbitrum orbit with celestia underneath. Orbit with celestial underneath is the first quote, unquote, all da to have working fraud proofs in the nitro stack.
00:12:08.614 - 00:13:28.404, Speaker B: What I mean by that is arbitrum, or more specifically, nitro, right. Has fraud proofs. And so far, it only works with the vanilla roll up mode that posts data to ethereum or to the underlying l one or the underlying layer, right? Because an orbit chain can be an l three. So we post to an l two, and then there's any trust, right? So any trust already had or has working fraud proofs, right? But Celestia now joins this family of like da options in the nitro stack that have working fraud proofs, right? So there's no, there's no cutting corners here, right? There's no funky stuff going on. Using Celestia da with orbit doesn't mean you have to give up the same security, the same fraud proof system that has been securing nitro for such a long time. You get to keep all the goodies from the arbitrage stack, like I mentioned, you get to keep future compatibility with stylus, you get to keep future compatibility with both. You get to use all these libraries and things that the arbitrum ecosystem has.
00:13:28.404 - 00:15:18.630, Speaker B: Also libraries that the off chain labs team has built around monitoring your chain, token, bridge, uis, etcetera. You don't have to rebuild everything. And last but not least, in my opinion, the most important thing here is like, you have secured the a thanks to blobstream and data availability sampling. Without that, right, the fraud groups wouldn't be secure. So it's really important to note that, right? And yeah, so what exactly does it look like to modify arbitram nitro? And at Celeste Da, right, we talk a lot about integrations and supporting Celestida for different l two stacks, but people don't realize that on the big picture, it's actually quite simple. Here is a picture from the nitro docs on essentially, what is a nitro chain, right? So if we look at the, at the, at this diagram, right, starting all the way from the top left, a nicer chain essentially just takes user transactions, right? There's a sequencer out there, and the sequencer takes all these user transactions and makes them into an order list of sequence transactions, right? The sequencer gives you this like soft guarantee of finality, right? That's why if you interact with arbitrage one using metamask or whatever, you don't have to wait for the roll up to post the batch of beta to ethereum for it to be finalized. It gives you a soft guarantee that your transaction will be included.
00:15:18.630 - 00:15:44.446, Speaker B: So that's what gives you this good ux when using a roll up, right. You don't have to wait ages for the transaction to be included. It's included. The sequencer gives you a soft guarantee. You move on. And then once that sequence of transactions gets essentially billed by the sequencer rate. There's two things that happen in this diagram.
00:15:44.446 - 00:17:23.394, Speaker B: One of them is you take that entire batch of data that forms the sequence transactions, and you compress them using a compression algorithm called brotli, and you post them to your l one chain, right? The l one chain, in this case, being ethereum, right, for arbitrum one and arbitrum nova. But this l one chain, or underlying chain, could be an l two, right? If you're building an l three, you're posting to arbitrum one, right? For example. And on the other side of this diagram, right, sequence transactions get passed one by one according to the order of the sequence through the state transition function, and then the state is updated accordingly. It creates an l two block, and then those l two blocks are settled on the l one. Now, this is what it looks like for a nitro roll up, right? So what does it look like to absolute CDA? It's this simple, really, like from a big picture, right? If you're a roll up developer, or you're more specifically, someone who, who is looking to deploy an app as your own roll up, and you want to use Celestia four da, you don't have to be scared that this is like some complicated series of changes that is going to entirely affect the way the stack works. It's as simple as taking the compressed batch of data, posting it to Celestia. In the case you are unable to post to Celestia, we have this thing called fullback.
00:17:23.394 - 00:18:07.014, Speaker B: We didn't build it. Actually, the arbitrum nitro stack already has it for any trust, so we take advantage of that. So in the case that, say, the batch poster is unable to post to Celestia, because let's come up with some scenarios. It ran out of funds, it got disconnected from the Internet, something happened. Who knows? Then instead of posting the batches, Celestia would be posted back to your underlying l one, right? In the case it is posted to Celestia successfully, you had no problem with your connection to your node. You had no other issue whatsoever. And Celestia is running live as expected.
00:18:07.014 - 00:19:52.334, Speaker B: Then the data gets posted, and then what this batch poster does is essentially post a data pointer to the l one chain, right? This essentially allows people looking at the inbox sequencer contract on the l one to look at it and then see for a given batch number, where does that data live? On Celestia. So the footprint of what we're posting to your settlement layer is really small. It's essentially the height, the height of the Celestia block and the block commitment for which you post to your data, and additionally a data route that corresponds to the header of the celestia height that you're posting to, which is then used to verify that the data was included in blobstream or not. So that last part, what that really means is that in the case that somebody wants to initiate a challenge, right before you can get into the challenge, you have to prove that the data for a given batch was even posted, that it's been made available. And what progress would do is essentially take these proofs of inclusion and verify them against blockstream. In the case that that verification is not successful, then we discard the batch because either data was not made available for some unknown reason, or the batch poster tried lying about the nature of the location of the data in some way, shape or form. But other than that, as you can see from these two slides, it's very simple.
00:19:52.334 - 00:21:12.048, Speaker B: We're not changing the vm here, we're not changing the way arbitrum does things. We're just adding an option for you to essentially be able to post your data to reduce your, your da fees, but more importantly, without having to sacrifice, right, cheap fees and security at the same time. Right? So you're getting the like, in my opinion, right, bias, whatever, best of both worlds, right? You're not just gaining cheaper da fees, you're also gaining a stack that's been shown to be performant for the past couple of years, and you're getting a DA layer and an integration that has working fraud proofs, that has data availability sampling, that has blockstream, that has this data cessation bridge. Now, using blobstream, like I mentioned, using blobstream gives us an on chain way to verify whether some data was posted to celestia or not. This is then leveraged in the nitrous smart contracts to see if a batch of data was posted to celeste or not. This is true of pretty much every kind of roll up, not necessarily just arbitrary, morbid. That's the cool thing about blobstream.
00:21:12.048 - 00:22:50.442, Speaker B: We can deploy it on ethereum zero one, you can deploy it on whatever l two, you want. You can deploy on whatever EVM chain you want. If you want to make a roll up on top of that EVM chain. Now you have a way to essentially verify whether some data was posted to Celestia or not and then act accordingly in your roll of protocol rules, right? This is a diagram from the Celestia docs that shows you what the overall interaction and flow between the blobstream x contract that, as I mentioned, is currently live on arbitrum one and base, and how that interacts with the Celestia network, how that interacts with the succinct prover network and how rollups interact with all of that. So as you can see in the diagram, what happens is that rollups verify that data was posted to celestial rate in order to gain security from it. All that interaction happens with the Blobstream X contract and at the same time the role of poster data to Celestia. And then these like Blobstream X proofs from celestial consensus data get ingested, right by the succinct improvement Network, which then verifies these blobstream X proofs goes through a succinct gateway contract and then it updates the state of the Blobstream X lite client contract on, on your chain.
00:22:50.442 - 00:24:52.234, Speaker B: And that's basically the end to end flow for what happens when, say, you post a transaction to a roll up that uses Celestia DA and blobstream all the way back to how that gets verified right now. Why Celestadier? Specifically, in this case of using arbitram orbit, it's the only solution that has working nitro fraud proofs. As we mentioned before, it's the only solution that has data availability sampling that's live today. And it's the only solution currently that has slashing thanks to data availability sampling. Now what does that mean? It means you use the same fraud proof system that has kept arbitrum chain secure for the past like two years. It means that celestial validators can be held accountable for their faults, right? Unlike in systems without slashing, which means that all this equals working fraud proofs systems equals working validating bridge equals you can trust when you interact with these bridge uis and with orbit chains with select underneath that this is being validated. Not only is this using, like I mentioned, the fraud proofs from, from the nitro stack, but it's also using celestia da, right? Which is which availability is being verified by data availability sampling like clients, right? And additionally, you can also trust, right, that blobstream is integrated into this, into this roll up stack, right? So basically you get the highest trust assumptions that you can get from this sort of construction, right, from, from optimums with celestial, for lack of a better word or terminology.
00:24:52.234 - 00:26:09.474, Speaker B: And yeah, I mean this is, this is basically me, right, giving you a good reason to go and try out the orbit with select underneath stack or integration. And with all that said, with that overview done, let's get into deploying a chain. Let's go to orbit together. If you want and you have arbitrum sepolia ETH available, then you can follow along. If not, you can wait after this because you do need to have testnet ETH on arbitrum sepolia one to essentially do this tutorial. You can also do Bayes Apollo, but for the purpose of this presentation today, we're going to go ahead and do arbitrum one sepolia. So now let me share my screen for the arbitrum orbit deployment UI for chance with selection underneath.
00:26:09.474 - 00:27:17.420, Speaker B: This is a modified version of the already existing arbitrary morbid deployment UI. Shout out to the off chain labs teams because they built this UI essentially, right? Like the original one. All I did was take it and use whatever little front end skills I have to modify the background and add the correct typings and map the map into the contracts that orbit chains with Celestia underneath use for communicating with blobstream. Right. So let's go ahead and connect to the website. All right, so once you have your arbitrum sepolia ETH, right, or your base sepolia Ethan, you can choose either or, right. You go ahead and you click deploy orbit chain.
00:27:17.420 - 00:28:14.718, Speaker B: Really doesn't get easier than that. The next screen, right, allows you to choose your da solution and the vanilla or let's just call the OG arbitrum one deployment UI. It only gives you the option to deploy a roll up or to deploy in any trust chain. So that's why we have a modified version, because until the integration is fully upstream into nitro, it's hard to coordinate across all these different repos and stuff. For convenience, we just have this modified UI like I mentioned, that's not just like celestified, right. But it also allows you to pick a Celestia da, right as your da layer. So here we're picking Celestia da through blobstream.
00:28:14.718 - 00:28:44.874, Speaker B: Right. Then you pick next. And now this page allows you to configure your chain, right. You can pick your chain id. Be wise about that. Don't pick an already existing chain id or suffer the consequences. You can pick a chain name and then there's also other modifications that you can do so you can modify the challenge period blocks.
00:28:44.874 - 00:29:08.866, Speaker B: If you don't understand what that means, you can just use the default. That's probably best. You can also change the base stake needed for validators on the network. You can pick the owner. You can add validators. For this run, we're only going to have one validator for Testnet. That's fine.
00:29:08.866 - 00:29:51.114, Speaker B: If you heard deploying one of these things on Mainnet, please don't have only one validator. That's not good. Then you can also pick or modify the batch poster address. This on the side gives you quick little description of what each of these values is and what it does, right? But today we're just going to basically go with the defaults and we'll modify the chain name. But before that, the other thing to mention is that you can pick a custom token, sorry, custom gas token. So you don't have to use ETH as a gas token. You can use your own custom token for gas.
00:29:51.114 - 00:30:45.416, Speaker B: Do take into account that for this to happen, your custom gas token needs to exist on the settlement layer. That means if you're deploying an orbit with Celestida chain on top of arbitrum one, and you want to use your own token that you created for gas, that token needs to exist on arbitrum one. It can't just pick it up from from nowhere, it can't just create it into existence. It has to be like already. It has to already exist, right? Or be ported over a bridge to average from one. But anyways, let's move on chain name. Let's do something like ISB orbit, right? I know, very original.
00:30:45.416 - 00:31:40.346, Speaker B: Don't judge me for that. Now you click deploy. The screen share won't show it, but this will pop up metamask. It will ask you for some of your sepolia ETH, and obviously you want to confirm if you want to move on. And that will send a transaction to our return sepolia, essentially deploying the necessary contracts for your roll up stack. And that will then take you to the next page. Now this page shows you essentially your roll up configuration, right? It shows you your l three configuration, and it also gives you access to the addresses for your validators and batch poster, as well as the addresses for your contracts.
00:31:40.346 - 00:32:02.610, Speaker B: Right? Now what that means is that if you want to go check it out, you can go click on it. You can see freshly created contract. There's nothing here. I don't know if it verifies them for you. I think it does not. That's a task that you would have to do, I believe. But let's not worry about that.
00:32:02.610 - 00:32:46.552, Speaker B: The next step is to download these zip files. Essentially take your orbit config zip files, right? This is very important. And then you will move on to the next step. The next step, finally, is step number four, which is to deploy your chain locally. And if you give me a second, what I will do is launch my light node real quick. And then I will show, I will share my screen and show you how to follow along these steps. Or.
00:32:46.552 - 00:33:31.284, Speaker B: Hmm, yeah, I will show you what happens once you have all this setup. I will most definitely not show you step number three. Even though it's a dummy account, I am not giving you all my private key. So here, I think you meant the previous page. We'll look at that in a second. Let me fetch the right stuff. So I'll get that.
00:33:31.284 - 00:34:36.592, Speaker B: And then we will fire up the celestialite node. All right, so let me now present. Let's see, let's see. Okay, so now we're running a light node, right? This is against Mocha, and this probably kind of small. Zoom in so people can see it, right? So you run a light node. All good. And then you want to make sure that you've cloned the celestial.org
00:34:36.592 - 00:35:11.248, Speaker B: setup script. Oh. Which essentially has everything wired up so that you can follow along this tutorial. And what you want to do, if you haven't already, is you want to do yarn install. I believe you need to use node 18.17 or some version higher than 18.0. So I'm just going to go with 18.0
00:35:11.248 - 00:35:52.102, Speaker B: and we'll do yarn install. While that's working, the next step is to have Docker running. You want to have a. You want to have Docker engine running in whatever machine you're using, right. You want to be able to launch containers, right? Right. Without that, this will not work. And then what you want to do, before you even get to that, is actually to go here.
00:35:52.102 - 00:36:28.084, Speaker B: And for your config, you can actually, this is some old config that I have. It's not able to delete it. Interesting. Hmm. 1 second technical difficulty. Who, how did that file get into my system that I did not have permission to delete? That is beyond me. So give me 1 second while I get rid of that.
00:36:28.084 - 00:38:06.554, Speaker B: We will get rid of that file real quick. Okay, so we've gotten. Okay, that's awkward. And I think now I should be able to just move that to trash and we good. And then what we're gonna do is take our node config and our orbit setup script config that comes from the sip file that you downloaded. On step three, you open that zip file, and then all you have to do is drop it in your config folder inside of orbit setup script. Give me a second while I do that.
00:38:06.554 - 00:39:17.074, Speaker B: Just have to find which one I just downloaded because I have a couple of them. Then we'll show you how to run this. Okay, so we got them here, we'll just move them to config and then that would work. As you can see, you can use the vanilla parent chain connection that comes with the orbit setup scripts. In this case, it's just the sepolia architram RPC. The scripts do generate some wallets for you. And then last but not least, you have the celestiate config or the Celestia CFG that you can use to essentially run your chain.
00:39:17.074 - 00:40:22.004, Speaker B: Here you have the blob stream x address on arbitrum sepolia one or arbitrum one, whichever one is correct. And what you want to do here is get your auth token for your celestia node so that you can put it in your config, right? And that way you can actually talk to your chain. So let me do that real quick. So what you want to do is celestialize auth admin. You want to make sure that you're doing the the right network. In this case we are going to do mocha. Then that will give you your Celestia auth token.
00:40:22.004 - 00:41:38.102, Speaker B: If you try to mess around with me, be advice, I will be changing this. But anyways, you have your auth token, you can set all the defaults to true, you're fine, you don't need anything else. If you are a batch poster, the current version that this is running does require you to have a alchemy or, sorry, not an alchemy, a websocket connection, which I will not be sharing with you, but I will run it and then we can see everything in action. So once you have everything together, what you want to do is follow the instructions here. Doesn't get simpler than this. You can just docker compose and that should start running your chain. Might take a little bit of time, and then the following thing that this would do is, or the following steps would be to take the private key that you use to deploy this roll up.
00:41:38.102 - 00:42:17.050, Speaker B: Right, so this is for testnet only. Please only use like dummy addresses that don't have any real value, especially if you're in a predicament like me and you're sharing your screen with other people online. Be smart about this please. You're advised. But basically, once the, once your docker containers with your sequencer, batch, poster, etc. Start running, we'll give that some time. You will run this script which will then fund the right accounts in the chain.
00:42:17.050 - 00:43:22.824, Speaker B: It will fund your batch poster, it will fund on your validator, et cetera, et cetera. And then you can follow along and look at the docker compose logs. And you're going to have to wait for me for this to run or for the docker containers to be done doing their thing whenever that's ready. And then I will run everything else and show you kind of like what the output is. And then I will attempt a bridge transaction. And finally, because the bridge transaction to bridge out will take a while, we can get into q and a. Okay, so now we got this and then we'll do this.
00:43:22.824 - 00:44:36.174, Speaker B: Just give me 1 second while I fund my account. Okay, so we'll run one thing to improve here. I will take this as a valid submission is to make this so that you don't have to copy paste so you don't have to copy paste the private key into the into the CLI command. That would be great for other people in the future that decide to present on any arbitrum orbis stack related stuff. And then give me 1 second while I pull out some stuff out of here. Let's fix this. And this.
00:44:36.174 - 00:45:39.200, Speaker B: Just give me 1 second. I'm just being precautious and not showing you this private key. So give me 1 second while those locks are like ready. But it is funding the debatch poster account. Let's see, let's see. Hmm. Oh, I see, I see there was some error with my error with my config.
00:45:39.200 - 00:46:28.444, Speaker B: I set up the wrong config. Let me fix that real quick and should be back on back back in business. Meantime, I do believe we have ten minutes left or 15 ish minutes left. I know why it's running, why it's taking so long during this live stream. But I do have instructions on a twitter thread. We do have these instructions in the celestia.org docs on how to deploy your own arbitrum chain.
00:46:28.444 - 00:47:08.524, Speaker B: Excuse the technical difficulties. I have not set up the right endpoint, but now I'm rerunning the chain and I think this must be very boring. I am sorry y'all, that I can't show you my screen. I can share this for now. It's running the chain again. I had to fix it. Fix the config.
00:47:08.524 - 00:48:17.454, Speaker B: I had to rerun the containers celestial light node. Nothing new. You've probably seen those already. And once this is done, I will attempt again to run the transaction as you can see here I had an issue because I was not using the right URL for one of my endpoints. So now, now everything should be running okay. So should be good to go now. Yes, it's working.
00:48:17.454 - 00:49:11.666, Speaker B: So all our containers are working, right. So our chain is running. And then let's see if I can get the funding part done on time. Let's see, let's see, let's see. So far so good. You know what, I don't have anything on this account, so I don't care if you use this private key. There's no funds there.
00:49:11.666 - 00:50:06.844, Speaker B: It's just testnet, whatever. Just to make this more interesting, so now we resume the operation of funding the accounts, right. We're currently running some transactions on the background thanks to the architecture morbid script. And basically it's taking funds from my tested account, right, and deploying the right contracts for the token bridge as well as funding the right accounts for my roll up. And while we do that, what you can do, as shown in the screen, you can actually go here and start logging the output of your nitro chain. You're likely to encounter a lot of warnings. I am using a public RPC.
00:50:06.844 - 00:51:22.568, Speaker B: If you use your own RPC for your chain connection, you will be probably fine. You won't get as many warnings as I do. And while we wait for this to complete, that's basically it. Apologies that it took longer than expected, just impromptu issues with getting the right RPC connection set up or whatnot. But once you're done with using the arbitrary morbid deployment UI, we have this quick little page to guide you to some RAS providers like caldera, conduit, outlier and gelato. So if you are someone that's building a orbit chain or are considering building an orbit chain, and you want to use Celestia da, right, but you don't want to fail like I failed today to, to demonstrate how to run this on your command line simply, and you don't want to maintain like you don't want to do DevOps, which is like a valid excuse, then you go to roll up as a service provider. They make it easier than this UI.
00:51:22.568 - 00:52:26.814, Speaker B: This UI is for demonstration purposes, really. It's a testnet thing. This UI does not work on Mainnet, but the people that you will be able to talk with once you want to launch an orbit chain with Celestia da on Mainnet are on this page. And yeah, now let's go back here. We see that everything has been set up and that means we are done with this tutorial right? Like, our chain is running, our accounts have been funded, and we are able to go play around with our account, right. You will be able to connect Metamask or your favorite toolings, right, like foundry, to your roll up and start deploying contracts, start playing around with it, bridge in, bridge out, etcetera. And what that does now is we'll go back to the presentation to just finish it up.
00:52:26.814 - 00:53:11.370, Speaker B: Thanks. You can build. You can leverage the order stack and the scalable module idea of Celestia to build your app as its own roll up, right? So if you're already in, you know, you're participating in the infinite space facade, right? If you're building a roll up, right, which, my opinion, you should, hopefully you are. You have choices to make as to what roll up stack you can use. And hopefully today, this presentation gave you an idea of what it means to use the orbit stack. So you can build your whatever app idea you already have as a roll up using the arbitrum orbit stack with celestia underneath. And other things you can build is actually, you can play around with stylus.
00:53:11.370 - 00:53:54.554, Speaker B: So Stylus is currently not integrated with Celestia Da. It will be integrated with nitro soon. And that means you will be able to also soon use Celestia da and stylus together. So there's no damage done if you can't demonstrate stylists running with Celestia da. But what you can do is still use stylus, because stylus is really cool, right? If you go to their docs, they actually teach you how you can add a new smart contract language to stylus. So if you are a programming language or compilers nerd, shout out all of them that are on Twitter, many of them good friends, you can actually go ahead and do this. I would take this as a very good and valid submission.
00:53:54.554 - 00:54:39.474, Speaker B: You can add a new smart contract language, and additionally, you can use stylus to build cool things because of better execution, cheaper compute, et cetera, and celestia ba underneath. Soon you can start experimenting with building generative compute heavy AI models on chain games, et cetera, et cetera, et cetera. And with that, thank you for your time. Thank you for bearing with me and my not so amazing presentation skills and the hiccups that we had along the way. But, you know, go house whimsical. And if anyone has any questions, more than happy to answer those.
00:54:41.974 - 00:55:09.794, Speaker A: Yeah, thank you for the walkthrough, Diego, and definitely no stress with the few hiccups. I think it's always bound to happen with any kind of live demo. So we do have a few questions in the chat, and I'll go with the first one, and we'll get to the rest in a second. What are the main differences with the op stack? So, between op stack and nitro, apart from fraud proofs?
00:55:12.054 - 00:56:00.034, Speaker B: Hmm, good questions. So I know it says apart from fraud proofs, but like, a quick thing to note is that the nitro stack compiles down things to WaSm, whereas the op stack or the plan for opstack drop proofs is to compile them to things like mips and other instruction sets. It's supposed to be more modular, but to get to the actual part of the question, what's the difference? They are both EvM rollups. I can't sugarcoat it. I can't change that. But Arbitram does have stylus, Opp stack does not. That is a big difference.
00:56:00.034 - 00:56:57.176, Speaker B: You can start playing around with stylus, which lets you write contrast and rust c. It lets you add your own language, so it's not bounded by only those two languages. And, I mean, additionally, there's a difference of, like, arbitrum will have bold, but that's also not that big of a difference because optimism has permissionless route proofs, right? Working on testnet. So those are similarities more than anything. But I would say it comes down to arbitrum using WASM under the hood, thus leading to stylus. That's something that opstack does not have. And there's other differences that are not necessarily technical regarding licensing and the fees that you paid when deploying a roll up, and the freedoms that you have when you deploy an op stack chain.
00:56:57.176 - 00:57:40.924, Speaker B: People usually have the super chain in mind. With arbitrum orbit, there's no concept of a super chain or shared sequencer, and you're free to deploy your chain, like, wherever the license lets you. And on the technicals, there's very small differences, but they're ultimately optimistic roll ups that use the AVM. So they do have more similarities than they have differences. I think if you want to dive deeper into that, it is. It might be a little bit outdated because it's from like a year ago, I believe. But North Swap, who used to work at optimism, has a really good article on, like, what, how they compare.
00:57:40.924 - 00:57:47.412, Speaker B: Like, what are the differences? But yeah, other than that, thank you.
00:57:47.588 - 00:58:31.104, Speaker A: Look at two, a few more before time's up. Montreux asked, what are the tools and resources we'd recommend for interest for those who are interested in starting to deploy a roll up, I can answer the first part, I think heading to our docs is a good start. And then also going to answer two and one here. Ryan came in a little late. He's wondering if there's a way to test or play around with orbit without actually deploying or going live. And Alt layer is actually hosting public testnet. So I'm going to send that in the chat now.
00:58:31.104 - 00:58:50.894, Speaker A: And it's called the nitrogen testnet. And some more questions for Diego. What are the main technical advantages of using celestia for DA in an orbit roll up compared to others? So this comparing to using Ethereum for DA, for example.
00:58:53.074 - 00:59:46.606, Speaker B: So comparison wise, aside from like the technicalities that are dependent on the integration, right. Like I mentioned before, Celeste is currently the only LTA that has work and fraud proofs. But you know, that's probably hopefully fingers crossed, not forever. And other people integrate fraud proofs with arbitrary nitro before they launch chains with all DA on maina. But the other like the actual differences, right? Like why Pixel CDA? I can just say two words. One is blob stream, the other one slashing. So when you're publishing data to Celestia, right, there's no like because there's no inherent connection between blob stream and, sorry, between Celestia and Ethereum or Celestia and your l one settlement layer.
00:59:46.606 - 01:01:02.282, Speaker B: You need to have a data attestation bridge and that's where blobstream comes in and it allows you to do on chain verification that your data was actually published. That's a very important thing. I'm not aware of how other DA layers do this, but as an example, orbit from any trust doesn't necessarily verify inclusion. I think it just takes the signatures of the, and runs with it. Whereas we're running like an actual, actual proofs and checks and then second slashing because celestialite clients run data availability sampling, because there are people running data availability sampling nodes, and because these orbit chains run like clients under the hood, there's people sampling, um, the, the celestial headers, there's people that are making sure that the data is available. Um, and if, if it's not, then they're able to um, slash the perpetrators through social consensus, right? That's the only way, um, social consensus is the only way in which we know you can slash data on availability. Um, other solutions, they haven't even bothered with it.
01:01:02.282 - 01:01:20.554, Speaker B: They don't even have slashing live. Um, so I mean take your pick, right? Like do you rather have security and cheap fees or do you rather have like no security that's my opinion. That's like the biggest difference. Really. And, yeah.
01:01:21.974 - 01:01:40.574, Speaker A: Thank you. Great question and a great answer. The last question we'll get to, and then we're going to be up on time, is what are some common problems we might face during the deployment of this system and what are the best practices to solve them? Where is the best place to ask or check questions about this.
01:01:43.714 - 01:02:58.284, Speaker B: Common problems you might face during the deployment of the system? So, I mean, I would say you gotta make sure if you're gonna be running one of these orbit chains on Testnet, you have to account that these things obviously use your testnet, Ethan. So when you fund your validators, you fund your batch posters, et cetera, you have to make sure that if you're going to run this for like a day or two, etcetera, that they're funded so that they don't run out of ETH like test net ETH. Otherwise, you know, they stop posting and doing things. And other than that, I mean, like any other common problem that you might encounter would probably be for, because of some misconfiguration, which we can always help in the discord chat, right, with things around not just configuring your nitro chain, but also configuring your light node, etcetera. And the best place to ask or check about this stuff is both the celestia docs. But also, Josh, correct me if I'm wrong, the discord chat for the ISP, I would say that would be the best place.
01:03:01.704 - 01:03:33.844, Speaker A: And on that note, we have a thank you from Sammy. Thank you everyone, for tuning in today. And if you're watching it after it's already happened, thank you for watching the recording. If you have any questions, as Diego said, the discord is a great place to ask those. But yeah, thank you, Diego, for teaching us about nitro. And we look forward to seeing you all in the discord and at future workshops.
01:03:34.184 - 01:03:36.176, Speaker B: Thank you, everyone. Have a good one.
01:03:36.360 - 01:03:37.384, Speaker A: Thank you. Bye.
