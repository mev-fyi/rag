00:00:02.920 - 00:00:24.954, Speaker A: GM. Everyone, welcome to another workshop for the infinite space Bazaar. I'm your host, Josh from Celestial Labs. I work on the Devrel team, working with documentation and integrations and doing fun things like this. Today, I'm excited to welcome Ken from Polymer. And Ken, what do you do at Polymer?
00:00:25.414 - 00:00:38.794, Speaker B: I'm a technical growth manager at Polymer. I do a lot of dev rel stuff. I also help with, like, BD and our partnership. A lot of. A lot of different things, but, yeah, really excited to be here. Thanks for. Thanks for having me.
00:00:39.254 - 00:00:44.394, Speaker A: Yeah, you're welcome. I guess a better question too, to, like, start things off, is what is polymer?
00:00:44.854 - 00:01:06.064, Speaker B: Yeah. Polymer is the interoperability hub of Ethereum. I'll go into this in the presentation, but essentially it brings IBC technology that's common and part of the cosmos ecosystem to Ethereum. L two s. And the vision is eventually expanded even beyond.
00:01:06.644 - 00:01:10.864, Speaker A: Awesome. And on that note, I'll give you the floor, and I'm excited to learn more.
00:01:11.444 - 00:01:36.696, Speaker B: Awesome. Cool. Yeah, thanks, Josh. So, yeah, I'll be monitoring the chat as this presentation goes on. I'll try to be answering questions, like, proactively, and then we'll open it up to questions at the end too, that we can have a discussion, but without further ado. Yeah, I'll get right in. So, as mentioned, technical growth manager at Polymer, my name is Kemiyachi.
00:01:36.696 - 00:02:49.484, Speaker B: I'll have my information at the end of the presentation if you'd like to reach out or contact me. So, Polymer, as mentioned, is the interoperability hub of Ethereum. It connects right now, it connects op stack l two s, but the grand vision is to eventually connect other l two s, such as arbitrum, scroll, etcetera, and then even beyond the Ethereum ecosystem to cosmos chains and other chains throughout the entire web3 ecosystem. So what does the interoperability hub mean? The term port city was coined by two members of the cosmos ecosystem, Ethan Buckman and Sam Hart. And port city is a clearinghouse for trade routes that connects different ports or entities to communicate with one another. So polymer is the port city of Ethereum, which establishes trade routes both to ethereum as well as external ecosystems. The example that I like to use is the port of Los Angeles.
00:02:49.484 - 00:03:54.764, Speaker B: Los Angeles, right. The United States has a bunch of different trade laws, routes, et cetera, within itself, and you can think of that as kind of a whole ecosystem in itself. But then the port of Los Angeles is the largest in the US and is a trade route, is the entry point to many other entities, cities throughout the world, that then get transferred within the United States. And so the grand vision is to be like the port of Los Angeles. Connect Ethereum to the rest of the web3 ecosystem. Right now, we're specifically focused on op stack l two s, and we'll slowly expand to other l two s, and then the full Ethereum ecosystem. So going into polymer's technology, how does polymer do this? How does polymer become the port city of Ethereum or the interoperability hub of Ethereum? The two, I would say, core components of the technology are IBC transport and ethereum settlement.
00:03:54.764 - 00:05:03.384, Speaker B: So the inter blockchain communication protocol, IBC protocol is a transport communication protocol which is used in IBC. And this is what polymer uses to connect all the different l two s in the ethereum ecosystem. And what it does is it separates transport level execution from application level execution. So anything that you're using to transport or pass messages across chains is separate from the actual execution logic that is in your applications occurring in the roll ups. The second kind of core component of polymer's technology, stack, is ethereum settlement. So polymer, not only the IPC client, but polymer itself, is an op stack roll up. And it uses ethereum settlement to read the true state of both the rollups and itself to have a highly secure picture of both the state of the l two s and all the transport and cross chain communication that is going on between the different roll ups.
00:05:03.384 - 00:06:37.518, Speaker B: A little deeper dive into what ethereum settlement and what that means and why it's important. Polymer extends the native Ethereum bridge, so all l two s bridge information communicate information to the Ethereum l one through the native bridge, and polymer utilizes that native bridge and extends it to implement their communication protocol. So if you see on this graph right here on this diagram right here, what Polymer is doing to transport and pass messages from rollup a to roll up b. It's actually reading the state of the l one, reading rollup a state to instantiate and initialize a communication that passes a message to roll up b. And this provides a much more enhanced security model over some other interoperability protocols because it's still utilizing Ethereum, the Ethereum L1 security model to secure message passing throughout the different roll ups, just as any transactions on any individual l two does as well. It still relies on ethereum settlement for finality at the end of the day. So why does IBC matter? IBC matters for a couple of different reasons.
00:06:37.518 - 00:07:32.784, Speaker B: Maybe the first one is on the right hand side. If you look at this, this was a tweet by, I believe, the IBC Foundation a couple, couple of days ago, I thought it was a good and very simple visualization of why IBC is great zero exploits throughout their four plus years of existence, or three plus years of existence. That's super, super impressive. I think a lot of the hacks and security issues that have happened recently in web3, overall, specifically, even last year, was bridging protocols. A lot of bridges had a lot of exploits and security vulnerabilities that led to millions, if not billions, of dollars of lost funds. And if you look at IBC, it's led to zero exploits. So the, the technology is not only mature, but battle tested and proven to be extremely, extremely secure.
00:07:32.784 - 00:08:38.496, Speaker B: Kind of what I think what has gone into creating very zero exploits and very strong security is this concept of acknowledgments. So in many kind of cross chain communication protocols, yes, you send the message, you send the information or the data to, from chain a to chain b, or from an application on one chain to an application on another chain. But what IBC implements in their spec is this concept of acknowledgement. So for a full packet lifecycle to be successful, not only do you need to send the packet, but the destination needs to receive the packet and then send back an acknowledgement, really enhancing the overall security of the total message transfer overall. So IBC is kind of a cosmos. You know, Cosmos invented technology. How does polymer bring IBC to Ethereum? What polymer has implemented and created is a concept called virtual IBC.
00:08:38.496 - 00:10:05.124, Speaker B: And virtual IBC are smart contracts, which implements the IBC spec in solidity. And it offers the same functionality as IBC does in the cosmos ecosystem. The goal of virtual IBC is to target chains that don't natively implement it. If you're a cosmos chain, you natively have IBC kind of in your, in your chain implementation, you're able to communicate cross chain between different, between different protocols. In the cosmos ecosystem, what VIBC does is that it creates an IBC native feature set for non IBC chains, eggs ethereum chains. So if you deploy the virtual IBC contracts on your roll up, you'll be able to communicate with polymer to then transport communicate with other chains throughout the kind of connected polymer ecosystem. So, going into some more details about how to visualize polymer and what your mental model should be about polymer, a common comparison that we make is to a concept called service meshes.
00:10:05.124 - 00:11:24.624, Speaker B: Service mesh is a software layer which handles communication to different services and applications in cloud environments. And so a popular architecture in cloud was microservices. Applications are a set of different microservices that all communicate and interact together in order to create, like, a full application. You can think of, like you have authorization and authentication microservice, and then you have maybe your, you know, your data store service, and you have some, I don't know, execution service, and they're all communicating together to create the full blown application. And so there's a popular server called istio, which is a service mesh platform, and it connects all these different microservices and applications to create broader range applications and across different clouds as well. Polymer, with the help of IBC, is what is establishing this communication protocol and policies among the different components of the Ethereum ecosystem. One way to think about it and to visualize it, instead of what we had previously were cloud providers here, AWs, Google Cloud, and then different microservices applications.
00:11:24.624 - 00:12:32.264, Speaker B: In the Ethereum ecosystem, your different components are your l two s. And then there's even now a shift towards more modularism, application specific l three s. So the comparison here is that polymer is the istio of the Ethereum ecosystem, where it is, the polymer is establishing the service mesh for the different components, the l two s and the l three s, to communicate with one another and interoperate very, very seamlessly. So this is a Celestia hackathon. It's the infinite space bazaar. Where does Celestia fit in here? What is Celestia's connection to Palmer? So, opstack chains are rapidly adopting the migration to Celestia Da for a variety of reasons. It's cheaper, it's faster, and there's a variety of different benefits of just going modular and having more flexibility in your chain architecture.
00:12:32.264 - 00:13:53.748, Speaker B: DA is a crucial part of verifying and validating cross chain transactions. So Polymer's integration of Celestia DA is required to maintain the security of cross chain transactions. In order to confirm that a transaction is valid from chain a to chain b, polymer needs to be able to access, just as any other execution environment needs, able to access the data that is used in that transaction to either submit fraud proofs or confirm that it's a valid transaction. So this integration ensures that Palmer can integrate and support op stack chains that utilize Celestia da layer. And so then going into more of the actual bounty. So kind of just explained, polymers core technology talked about the connection to Celestia and the migration towards more of a modular ecosystem, which makes interoperability even more important. Now going into.
00:13:53.748 - 00:15:46.664, Speaker B: Hey, what is this hackathon bounty? What are some of the participants in the hackathon building? If they choose to build for the polymer bounty. So Celestia really introduced this paradigm shift that we're currently undergoing in the web3 ecosystem towards modularism as I mentioned before, modular ecosystems, just like microservices, it's extremely important that they have interoperability, right? I think a lot of people talk about the problems with Ethereum right now of them being fragmented, and a lot of teams are working on the interoperability problem so that that fragmentation is reduced and there's less friction to communicate between chains, which is essentially right now the path towards scalability. The validation of these transactions is a critical component of ensuring interoperability and verification of cross chain transactions. Yes, you can send messages across chains through an off chain relayer, etcetera, but if that transaction isn't valid or you're introducing a variety of double spends or security issues, then interoperability is meaningless. An important concept to understand is that cross chain transaction validity comprises of two different steps. You need to have data availability confirmation and then Ethereum verification in this modular ecosystem where you're using a DA solution. And so the goal of this hacker bomb is to create a server or an IBC lite client that verifies availability of valid data on Celestia DA for L two transactions and specifically op stack L two transactions.
00:15:46.664 - 00:17:07.478, Speaker B: So this is a high level overview of kind of what the general integration would look like. The server or project would be extracting the l one would be retrieving the l one state route, extracting the l two state route from that from the Ethereum l one. Then further in step two, getting the l two block associated with that state route, extracting the individual transactions from that block and then being able to query the blob stream in Celestia for that transaction data to confirm that it is in fact available. You could do even more and say, hey, I want to actually run the DA proof to further ensure validity of the that the transaction happened. This is a pretty big lift, especially if you were going to make this hackathon project an IBC Lite client. Right now, IBC Lite clients are set up to interact with tendermint and so you would first need to create an IBC Lite client that, you know, was able to receive transactions from the op stack chains and then be able to integrate Celestia da verification of Celestia da Josh, do you have a question?
00:17:07.646 - 00:17:15.622, Speaker A: Yeah, I was going to ask for people who aren't as familiar with IBC Lite clients. Could you give us a brief explanation of what that is yeah.
00:17:15.718 - 00:17:51.134, Speaker B: IBC Lite clients is a set of interfaces and like specifications to essentially track the state and updates of cross chain message passing. So you would have like clients on essentially your chain and both chains, and it's used to confirm the state of each chain so that both endpoints of your communication can have the same information that they're working off of to communicate with each other.
00:17:51.444 - 00:17:53.304, Speaker A: Got it. Cool, thank you.
00:17:55.964 - 00:19:54.824, Speaker B: And yeah, so to that point, like clients and IBC, there's like a bunch of work that would need to be done to create those interfaces in order to become integrated with slesy and op stack chains. And so I put this in the Discord channel for polymers in the infinite space, bazaar server for polymer. But I tried to break this down in much smaller steps so that it could be feasible in the time period of this hackathon. And so step one is essentially abstracting away the IBC lite client aspect of this and then just creating a server which receives a transaction hash from an op stack l. Two, you could think of this, you could create an event listener, you could index the chain and just say hey, at every block, like extract some transactions and then check the celestia chain specifically if they have data associated with that transaction hash. And it would essentially be just returning a boolean saying hey, is this da? Does this data for this transaction exist in the celestia blockchain? Would be step one of this. And that would be like a really great starting point for hey, how would you eventually integrate celestia into polymer? Then step two, what would, what would kind of, if you get that piece done, what would this next phase look like? To expand on this, the next phase would be then checking the blob stream contract for the proofs associated with the op stack l two transactions.
00:19:54.824 - 00:21:29.354, Speaker B: So polymer, as I mentioned you know, previously in the presentation, it uses ethereum state to, it expands the native bridge to really secure all cross chain transactions. And so also relying on the Ethereum l one for the essentially source of truth for data availability is the most ideal and where we'll eventually get to as well when we integrate Celestia DA. And so Celestia currently right now writes the DA proofs to the Ethereum l one through the blob stream and writes it to the blobstream contract. So instead of checking the celestia chain directly, you would now be checking the blobstream for the DA proofs. The third step, which would be going one step further, would be now actually executing the proofs in your server to confirm the validation of the transaction and that it existed. And so this adds a little more complexity. You would have to understand some concepts about Celestia and how to execute proofs, but then that would add even another level of security and verification for transaction validation in your application.
00:21:29.354 - 00:22:48.252, Speaker B: And then last but not least, if you did want to tie it all together and implement an actual IBC lite client which implements Celestia DA, I've posted a bunch of documentation on this at the end of the presentation, but you would essentially be implementing four main interfaces. You would have to understand what client state was. You would define your client state, your consensus state, what a client message looked like to update your client state and your consensus state, and then your overall client module, which kind of controls all of the communication from your chains and updates the state of the lite client itself. You would create this IVC light client interface which utilizes Celestia DA to provide interoperability to these Ethereum roll ups. I think any one of these steps would be really interesting and useful. Just being able to connect and verify information on Celestia would enable a lot of new features and technology to be used in the interop space. This is just some basic pseudocode I wrote that was walking through.
00:22:48.252 - 00:24:25.820, Speaker B: What would the steps look like from an implementation standpoint that you would need to create this or define this in your server. You could do something about these right here. This is getting the state root, extracting the block information, then getting the transactions from the blocks, figuring out your connection to the celestial client, going through all the transactions in the block, decoding that transaction, and then having some function that says, hey, is this valid or not? And at the most basic level that verification could be is the data available or not for this transaction? And then in maybe the more robust and mature version could be, hey, given this data associated with transaction, can we execute the proofs? Obviously. Fan yeah, great question. So I believe the transaction information that is part of the hackathon, I think will be figuring out what the best mapping from Celestia blob to l two transaction will be. I think what you might need to do is for a l two that utilizes Celestia is track the original DA commitment from the l two. But there could be a variety of different solutions there of how you extract or how you map the l two transactions to the celestial da block.
00:24:25.820 - 00:24:49.644, Speaker B: But that is definitely a key component of this. Let's see, what step would it be in? Yeah, so right this line here, transaction data equals await Celeste, your client get data transaction by hash, figuring out. The logic that would be in there to create that mapping is pretty critical to accomplishing this hackathon bounty.
00:24:50.504 - 00:25:13.574, Speaker A: I think part of, like, that mapping the transaction itself would actually probably be within a roll up block itself. So, like, one l two transaction might correspond to a blob that is attesting to a batch of transactions or a batch of blocks on the roll up itself.
00:25:14.594 - 00:25:33.816, Speaker B: Yeah. Yeah. So to that point, right. I think, Josh, what you just mentioned was right. There might not be a one to one mapping because there might be. Right. A blob might be associated with proofs associated with a batch of transactions.
00:25:33.816 - 00:26:49.314, Speaker B: And so determining that mapping is definitely novel work to understand and to be able to accomplish this for sure. But definitely really interesting. Yeah, I would say really interesting research. And then. So, yeah, like, right here is some tutorials on IBC as well. As, you know, one of my colleagues, math, is prolific in writing, talks a lot about interoperability and kind of IBC in general, but has a bunch of good information here. The Palmer whitepaper, which goes into much further detail about Palmer and some different blogs that we have as well as kind of, I believe these are the Celestia blobstream blog and specs, which kind of is probably a really good place to start if you're kind of looking into that question that IBC fan had about how do you establish these mappings? But, yeah, thanks for listening in, guys.
00:26:49.314 - 00:26:59.294, Speaker B: But, yeah, would like to open up to any questions or can. Can discuss, like, maybe more details about, like, you know, what people are building. Would love to open this up.
00:27:03.634 - 00:27:27.554, Speaker A: I don't see any in the chat yet. I'm going to go ahead and. And ask a few that I wrote down during your presentation. I'm curious if polymer can be used between not only, like, l two s, but l three s? Or would polymer itself need to be, like, deployed onto l two s to be then used on an l three?
00:27:28.134 - 00:28:10.964, Speaker B: Yeah, great question. So right now, polymer supports only op stack l two s. Cool. I think once there is significant, like, exit velocity or enough l three s, where, like, interoperability is, you know, starts becoming kind of an issue. Fragmentation starts becoming an issue. We plan to expand to l three s, but right now, yeah, it's currently focused on l two s. But I think the process of expansion would be, you know, l two s support beyond op stack l two s, l three s, and then beyond the ethereum ecosystem, can you connect, like, you know, ethereum chains to cosmos chains and any other ecosystem as well?
00:28:12.424 - 00:28:26.684, Speaker A: And I guess on that note, I'm also curious, can I use polymer between l two that uses ethereum for da and between one of ethereum dal two and a celestial dal two?
00:28:27.294 - 00:29:16.398, Speaker B: So that's definitely what we're trying to get to. Like right now, the celestia integration is not fully done, but yes, because going back to my presentation, maybe. So here, essentially, let's say this, maybe go back even further. Say roll up a, used Ethereum SDA, and roll up b, used Celestia polymer would be reading the state from the l one. But instead of kind of ethereum da, it would be reading from the Celestia Da on roll up b in order to do it. So in theory, yes. Like that would be completely any sort of da.
00:29:16.398 - 00:29:33.704, Speaker B: Actually, that settled to Ethereum, we would be, we'd be integrated with so that we could connect Celestia teams that use Celestia da teams that use ethereum da or even change that use any other DA solution that could all communicate with each other. Sure.
00:29:34.684 - 00:29:48.114, Speaker A: And I guess I'm curious if you want to maybe go more into the bounties and like, secondary question to that is what are some things that you'd like to see built with polymer?
00:29:49.934 - 00:31:06.450, Speaker B: Yeah. So the bounty, I believe is for ten k. And essentially, I think you can think of it as two n's, but. Right kind of. To IBC fans question, it's like, first, it's like, hey, I think the biggest thing, even with step one and why I tried to break the problem down even further, there is already some complexities of mapping individual transactions to kind of like, how do you confirm that on Celestia? And so I think you can take one angle of like, hey, do we start basically a very ethereum op stack, very ethereum focused approach at the beginning and say, hey, can we just confirm that we have the data for a specific transaction hash? So that would be, I think one angle and like, keep building out from there is kind of what I've outlined in this presentation. And then the other angle is to take more of the IBC native approach and kind of work from the other way. Start with, you know, the like client and say, hey, can we create a like client that essentially can communicate with Celestia? And then there you kind of work the other way around.
00:31:06.450 - 00:31:53.174, Speaker B: Okay, can communicate with Celestia. Now, if this lite client can also receive transactions from the op stack, and then you can build it back the other way, are, I would say, the two main approaches, but anything that I think on one side enabled data availability, confirmation of individual transactions would be a really, really big, I think, milestone and really interesting problem to solve. And then on the other end, anything related to advancing the, and extending the functionality of like, clients to be able to interact with Celestia would also be like another great thing to see built.
00:31:54.234 - 00:32:10.724, Speaker A: Awesome. I actually don't have any more questions except for maybe if there's anything else you'd like to share about polymer. We have some time and then what's the best place for people to reach out?
00:32:11.384 - 00:32:46.578, Speaker B: Yeah, there we go. Yeah. So definitely if you're here, right, I think the main place of communication, that kind of the polymer community and our team is on, is on discord. So definitely like join our discord server. There's a lot of activity going on there. We are going into phase two of our testnet next week where we'll be launching a really interesting application that will kind of stress test our network, stress test developers, etcetera. And so we're really excited about that.
00:32:46.578 - 00:33:13.014, Speaker B: Definitely. Check out the polymer GitHub. We have a lot of really interesting projects on there, both from an infrastructure level. There's a bunch of template code and starter code to develop applications, as well as a really large library of community built applications. And then of course follow our Twitter as well. And then down below is my personal information both on Telegram and on Twitter. Definitely feel free to reach out.
00:33:13.014 - 00:33:25.134, Speaker B: Would love to talk about Palmer in general, or if you want to discuss this bounty specifically. Definitely, we're here to hop on and help any of the builders get this done.
00:33:27.714 - 00:33:49.254, Speaker A: I guess, like thinking back, I am a little curious, maybe if you want to go a little deeper into it about how there haven't been any exploits using IBC and like why this is the case. But also if there is any attack vector where an exploit could happen, or is it really just that secure?
00:33:50.434 - 00:34:55.017, Speaker B: Yeah, no, it is a great question. So maybe I'll go in reverse order of how you. In terms of attack vectors. Actually, my previous background is mostly in the ethereum ecosystem, and then I worked at near for a couple of years, so I was not in the cosmos IBC ecosystem. And so I don't have enough intimate knowledge to understand, like, hey, are there any potential attack vectors? But I do think kind of the, these numbers are pretty impressive in speak, right? And so I think there's probably a bunch of technical, there's a bunch of deep technical information about like, hey, what are potential attack vectors? Why haven't they been exploited? But, you know, cosmos itself is a pretty large ecosystem. There is, I believe, now over a billion cross chain transactions that have occurred. So it's like, not like it's like there's been zero exploits because there's zero usage.
00:34:55.017 - 00:36:07.626, Speaker B: You know, it's used, but there hasn't been zero exploit. I think from a fundamental standpoint, the security really comes down to this kind of concept of acknowledgement at the most simple level. Right. So a lot of times, right, in cross chain communication, async, asynchronous processing, if you have a send, there could be a failure over the course of the lifecycle of that send or at the destination, and then that causes an exploit. A lot of these bridges, it was getting drained because there was a transaction, you know, being exploited in a contract either on the source of the destination, but when you have this concept of having it be acknowledged, there's no way to like just send a transaction out and have it go into like the abyss. And if there's a security exploit, it can kind of like iteratively run it and either keep draining it or keep exploiting the security vulnerability. And so that acknowledgement, I think has really hardened the security overall.
00:36:07.626 - 00:36:53.962, Speaker B: And yeah, the proof is kind of in the pudding of kind of how it's been able to perform over a pretty long period of time. And yeah, I think it takes. Right. There's more logic associated now with a transaction. So in terms of like, performance, you now not only have to deal with actually sending it, but the acknowledgement. But I do think the security trade offs, the performance security trade offs are beneficial to essentially ensure that, you know, there won't be any exploits. And one of the reasons I think one of the secure design principles around polymer was really enamored by the technology about IVC, the resilience, maturity and stability of it.
00:36:53.962 - 00:37:06.744, Speaker B: I believe the spec hasn't changed. Like, the core IBC spec hasn't really changed since basically the beginning, and so was very thoughtfully designed and has been proven to be very robust as well.
00:37:09.604 - 00:37:29.294, Speaker A: Cool. And I guess, yeah, as someone who's used IBC, but also used like bridging between different Ethereum, like EVM chains, it always continues to blow my mind a little bit when I do an IBC transfer or an IBC swap or something, because you actually, you don't have to really wait on it nearly as long and it just tends to work.
00:37:29.994 - 00:38:08.224, Speaker B: Yeah, yeah, I think definitely. Right. IBC Cosmos, it was designed with that principle as kind of like a guiding principle of the ecosystem, whereas now I think others are starting to try to adopt it. But yeah, I think kind of the design of the different l one protocols, underlying protocols kind of create that ux difference that you're seeing when you're doing a cosmos transfer versus, like a, you know, a bridge transfer or anything like that, for sure.
00:38:09.284 - 00:38:27.694, Speaker A: Well, thank you again, Ken, for sharing everything about polymer with us and teaching us some things as well. If there are no more questions, we're going to go ahead and end the stream, but I wanted to know if you had any last words or anything to remind us about again?
00:38:29.434 - 00:38:42.954, Speaker B: Yeah, no, just thank you for having me on. Definitely. Really appreciate it. And excited to see what everyone builds. Yeah, definitely. Feel free to reach out. As I said before, excited to see all the submissions.
00:38:43.414 - 00:38:50.278, Speaker A: Awesome. Thank you again, everyone, for attending. Thank you, Ken, once again, and have a good Friday and a nice weekend.
00:38:50.446 - 00:38:51.470, Speaker B: Thanks, Josh.
00:38:51.662 - 00:38:52.094, Speaker A: You're welcome.
