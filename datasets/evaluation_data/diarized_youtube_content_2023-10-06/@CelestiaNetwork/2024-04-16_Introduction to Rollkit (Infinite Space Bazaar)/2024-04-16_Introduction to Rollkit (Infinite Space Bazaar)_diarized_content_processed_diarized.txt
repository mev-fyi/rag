00:00:03.040 - 00:00:27.134, Speaker A: Welcome, everyone, to another workshop for the infinite space Bazaar. My name is Josh. I'll be your host today, and I'm excited to welcome Manav from the Rolekit team. Today we'll be learning about Rolekit, doing an introduction of rollkit, and then I think we'll be seeing some roll ups in action. So I'm looking forward to it. Manav, it's great to have you here. Do you want to introduce yourself?
00:00:27.514 - 00:00:34.378, Speaker B: Yeah, for sure. Yeah. Thanks for having me here. Yeah. Hi, everyone. I'm Manav. I am on the Rolekit team.
00:00:34.378 - 00:00:49.618, Speaker B: I'll be talking about introducing what Rolekit is, and before that, we'll talk about what Sovereign roll ups are as well. So everyone can see my slides. Right, Josh?
00:00:49.786 - 00:00:51.598, Speaker A: Yeah, we're good. We're out there up now.
00:00:51.786 - 00:01:39.774, Speaker B: Yeah, we're good. So Rolekit, is there currently no sovereign roll ups that exist? To my knowledge. So Rollkit is the first sovereign roll up framework. And before we talk about what Rolekit is, let's talk about what sovereign roll ups are, because that might be helpful before we consider the sovereign roll up framework. So a sovereign roll up is a type of a blockchain that publishes the transactions to another blockchain, typically for ordering and data availability, but it handles its own settlement. So when, like, there is no set extra settlement layer in a solvent roll up. A solvent roll up handles its own settlement.
00:01:39.774 - 00:02:21.324, Speaker B: And that's a question that comes up a lot, which is the, what is the settlement layer? Just like a layer one, standalone l one does not have a separate settlement layer. A sovereign roll up doesn't. A sovereign roll up kind of gives you the sovereignty of an l one or, like, it's just like launching an l one, but you do not have to, like, the time to market is really fast and you do not have to pay for bootstrap. Your own economic security. You don't have to, like, you just would pay for economic security as you go, as whatever you need on demand. So that's where the solvent roll up is.
00:02:21.864 - 00:02:27.204, Speaker A: This is kind of a quick question about, yes, settlement. So I guess, like going back.
00:02:30.024 - 00:02:30.336, Speaker B: Can.
00:02:30.360 - 00:02:43.024, Speaker A: You, like, help understand, like, what's the difference between a sovereign roll up and something like optimism or like arbitram or something? So are those settling to Ethereum?
00:02:43.324 - 00:02:43.916, Speaker B: Yeah.
00:02:44.020 - 00:02:44.348, Speaker A: Yeah.
00:02:44.396 - 00:03:24.724, Speaker B: So that's a great question. Yeah. So something like optimism, arbitram. Right. Their smart contract roll up. So they have a smart contract on Ethereum that they post their state routes to, and they have to prove to Ethereum every, like some, like every hour or every ten minutes or something, depending on the role of limitation that the state that the stateroom they're posting is correct. And they, the transaction data that they post that could be on ethereum or it could be on another layer like Celestia.
00:03:24.724 - 00:04:07.180, Speaker B: That's a different question. But those roll up frameworks would have a smart contract on Ethereum, and with that is called a bridge contract. And you have to constantly prove to that chain that my state was correct. So if you wanted. So there is another chain that is kind of, you're settling to is kind of what called, and you are proving to it at state. So you're kind of committing to that like state all the time. So you cannot, we'll get into it later on.
00:04:07.180 - 00:04:16.264, Speaker B: You do not have the ability to hard fork a smart contract roll up, but a solvent roll up, you do. Just like an l one.
00:04:16.684 - 00:04:18.800, Speaker A: Okay, that makes sense. Thank you.
00:04:18.972 - 00:04:57.904, Speaker B: Cool. Yeah, so just kind of an overview of like the modular stack, the different functions in a modular stack. So a sovereign roll up is doing both execution and settlement. In case of a small contract roll up, the settlement layer would be like Ethereum, but execution would be the roll up itself. Yeah. And who actually verifies a chain? So this is like another kind of, uh, difference here. So in a sovereign roll up, the, the nodes of the sovereign roll up are responsible for verifying whether the new transactions are correct.
00:04:57.904 - 00:05:55.892, Speaker B: But the transactions that are posted on the chain are correct. And if there any are any invalid transactions that get pushed, that get published to the dealer, they're rejected and ignored by those nodes. And the nodes of the solvent roll up are responsible for determining its correct chain, not the dealer. So just to contrast again about how it differs from a smart contract roll up, in that case, if you're settling to Ethereum, Ethereum is verifying your roll up that you have to prove to it that my state was correct. So you are proving everything to Ethereum instead of your nodes. So that's the key distinction in what sort of settlement here means. Yeah, and this is sort of another diagram to visualize what a solvent roll up is doing.
00:05:55.892 - 00:06:42.594, Speaker B: It is posting its transaction data. So the roll up blocks that gets produced, they get posted to the DLA, and that's what the transaction data is. And the roll up light nodes, or roll up nodes will be running the da layer light node, which depending on the dlayer, they'll be doing data bay sampling. And like celestial case it does. And then any kind of proof systems that the solvent roll up is, they would verify that as well. So it's a visualization for it. Before we move on to what is Rolekit, let's talk about what really makes sovereign rollup sovereign.
00:06:42.594 - 00:07:58.648, Speaker B: So it is how we define it, as the ability to upgrade via hard forks. That's not something the current roll ups, which are not sovereign, that's not something they have right now because you need the settlement layer to fork if you wanted to fork a smart contract roll up. But for a solvent roll up, they have the ability to upgrade via hard fork, just like a layer one blockchain. And even if most nodes upgrade, a node cannot be forced into accepting an upgrade, which is what makes it sovereign. The community which defines a blockchain, a blockchain is just community computer kind of like, that's like one definition and that that community has the power to decide what they accept or not instead of, and by contrasting it to a smart contract roll up, that is the community of the settlement layer that decides what the roll up state is. But if you want to have a sovereign blockchain, a sovereign roll up, your community decides. So that's like a very key distinction.
00:07:58.648 - 00:08:05.484, Speaker B: So there's no extraneous element layer. So yeah. Any, any questions before we move on?
00:08:05.824 - 00:08:07.200, Speaker A: Not yet, no.
00:08:07.392 - 00:08:58.304, Speaker B: Okay, awesome. Yeah. So what is Rolekit? Rolekit utilizes the shared security of a modular data availability network to allow anyone to launch their own sovereign customizable blockchain as easily as smart contracts. So we want to make launching your own chain, which has its own superpowers with your app, as easy as a smart contract using another chain like a DLR like Celestia. So this is overview, like a short diagram of where Rolekit fits in. So the app itself is sort of independent from Rolekit. And Rolekit talks it via an interface which is currently this application blockchain interface.
00:08:58.304 - 00:10:02.468, Speaker B: And Rolekit is like the component that ties the middle component here that is responsible for interacting with the app and the DLA and all the other components that make up a roll up blockchain. So go into it after that as well. So some things you get with Rolekit, you utilize all the existing powerful tooling that exists in an already vibrant ecosystem of cosmos. So there's all these features like IBC, ABC. There's been a lot of thought that has gone in this ecosystem to make these building blockchains as powerful as it can be with all these tools. And so with Rolekit, it's ABci compatible. And all this, it's equivalent with what is comet BFT right now, which is like usually right now used with all Cosmos SDK chains.
00:10:02.468 - 00:10:58.736, Speaker B: But Rolekit is sort of a replacement as an alternative to Hamid BFD. So it's an ABCI client software, and you get all the great features of the cosmos ecosystem along with it. You can pick and choose. What we're trying to build is when you want to build a blockchain, you can pick and choose a different modular components of what makes a blockchain. And those involve the DLA sequencer, uh, executor. So the, the node currently in the current rolekit node is uh, does both sequencing and execution. Uh, but we want to and like are working towards supporting um, separating this thing, these two things of sequencing and execution.
00:10:58.736 - 00:11:46.802, Speaker B: And you can kind of pick and choose all the components you would like. And this just enables like, which is a, it just enables another degree of freedom for developers to pick and choose all these different module components you can have in a chain so you're not forced to pick one. So that's what we're building. So you feel free to, you're free to optimize for your needs, your chain, you can control your block production on how fast your chain wants to go or how block gets produced. So those are all kind of great things that come with the cosmos decay as well. So Rolekit just is compatible with all those things. This is a core feature.
00:11:46.802 - 00:12:46.868, Speaker B: Rolekit allows you to take control, which means that again, revisiting you have the ability to hard fork. And when would you want to hard fork? If you want to upgrade or in the event there's some sort of hack or a bug on the chain. In a smart contract roll up, you cannot really upgrade unless you have an upgradeable smart contract which has usually a multisig or council. So you do not need any upgrade keys here. Like a smart contract roll up. So that is usually like a, poses a centralization risk because there's usually a council that has the keys to this bridge contract. But with a sovereign roll up, nodes choose to participate in upgrades and you would just have a fork in case that someone, a node doesn't decide to participate.
00:12:46.868 - 00:13:49.314, Speaker B: So that is, that's like a feature of sovereign prolapse. You do not also, just like we talked about before, you do not need to have an extra different settlement layer since you own it, you have complete power over it, so you don't need to pay any extra settlement cost. So in the smart contract rollout, that would be ethereum. And yes, that's kind of an overview of what kind of the core features of Rolekit and how it works. Let's try to dive into actually deploying a role rollup. So we'll deploy a cosmosm rollup for this demo, for this workshop, and we will go through one of our tutorials that we have and actually go into the script of what is going on under the hood when you launch a chain. And we'll see a chain live on Celestia.
00:13:49.314 - 00:14:04.354, Speaker B: When you deploy a chain, you will be able to see in the Celestia block export the roll up blocks being posted. So let's get into that. I will present my screen before that. Are there any questions yet.
00:14:07.254 - 00:14:18.054, Speaker A: From the chat? I guess I was going to ask you what features you're most excited about that are maybe in the works or planned in the future for Rolekit.
00:14:18.954 - 00:15:29.106, Speaker B: Yeah, for sure. I guess. Let's go back to the slide features I'm most excited about is making. Currently having Rolekit enable be like right now we still have support like stage zero roll ups, which means they are still the node that exists for Rolekit that does both sequencing execution and it's a centralized node. So I'm excited about decoupling these components and adding more options and interfaces to allow developers to pick and choose these things. And more excited about these different execution environments that are coming in. And how would you have different proof systems and different state validity modes for these particular execution environments? So, yeah, just more generally excited about enabling more degrees of freedom for a developer and giving them more choice.
00:15:29.106 - 00:15:40.974, Speaker B: And that allows a bigger community of developers to use Rolekit and have their own sovereign chain. So, yeah, and I think that's very powerful.
00:15:43.874 - 00:16:03.614, Speaker A: Standing straight. You could also take something like osmosis, just as an example and turn that into a roll up using rollkit. Right. So it works with this thing, Cosmos SDK chains. Or if you build a Cosmos SDK chain, you could use rolekit as basically the consensus mechanism.
00:16:03.934 - 00:16:48.384, Speaker B: Exactly. So a cosmos decay chain like osmosis or any cosmic agent that exists. Right. Those, right now there's the most popular option there is comet BFT for their consensus mechanism. So that is also called like AbCi client. And there's the Cosmos DK app talks to comet BFT via this interface called ABCI. And Rolekit is a replacement, or it's an alternate way to use Cosmos decay for rollups instead of a layer one chain.
00:16:48.384 - 00:17:29.489, Speaker B: So you do not need to bootstrap a whole validator set now. So yes, you could take an app that exists like osmosis, a Cosmos SDK app, and you could just replace Comet BFT with Rolekit and you would just have a roll up now, and you don't have to coordinate a bunch of validator sets anymore to launch the chain. And you still get, you don't have to bootstrap security from scratch, you get it from the dealer. And we have a bunch of DLR options in Rolekit. Celestia. Celestia Bitcoin is another one launching avails. And then we're completely, Rolekit is completely neutral.
00:17:29.489 - 00:17:54.974, Speaker B: We're building it as a neutral public good. So any of these options can be, we just have interfaces for them and any implementation. So Rolekit is neutral to those. So anyone could add an implementation to use their component to Rolekit. Cool. Yeah, cool. Let's go spin up a cosmos and roll up.
00:17:54.974 - 00:18:14.462, Speaker B: So we will go share my screen. Cool. Are we good? Can we share the screen? I'll make it a little bigger. That's good.
00:18:14.658 - 00:18:16.054, Speaker A: Yeah, maybe kill that.
00:18:16.094 - 00:18:19.430, Speaker B: Yeah, a little bit. Is this good?
00:18:19.582 - 00:18:20.382, Speaker A: Yeah, that's good.
00:18:20.478 - 00:18:24.646, Speaker B: Okay, further hurt, I guess. Further what?
00:18:24.830 - 00:18:27.314, Speaker A: Maybe zoom in more to get rid of the sidebars.
00:18:28.414 - 00:18:48.054, Speaker B: Okay, that is good. Okay, this is better. It's good. Awesome. Yeah. So, so we'll deploy a cosmosm roll up. So this is one of the tutorials on our website.
00:18:48.054 - 00:19:34.014, Speaker B: It uses Celestia's mocha testnet in this example. And I have the environment set up here, which is basically just installing Golang and installing rust. But. So I'll skip ahead to the part where you actually deploy a roll up. So here I have cosmosm. So we go to the cause of awesome repo and we get clone that. So I have that in, in my ide here.
00:19:34.014 - 00:20:46.494, Speaker B: And what we have done here is we just went and replaced the Cosmos SDK version that it was importing to be rollkit's fork. We currently have a fork that just replaces how the app is started. And instead of using Comet BFT, it would just use Rolekit. And we have this script when you launch chain all the things you need to do here. And I have a celestialite node running on mocha here in the background. That light node is exposed on a port that the script talks to. So it's exposed on this RPC address called in just a local port, 36657 on my machine.
00:20:46.494 - 00:22:00.944, Speaker B: And we will just go over how exactly launching a chain here will look like, and we will also find this roll up on celestial Explorer for Mocha. Let's get into actually the script that we'll be going through. So here we're just setting our chain id, the initial genesis token amounts. So we have a token called UWASM, that is the token that is local to the cause of wasm rollup. So we define a bunch of these variables that are local to the chain. We will also get the latest DA block height from a Moca RPC. So that is where we will start posting roller blocks from.
00:22:00.944 - 00:22:56.076, Speaker B: We get a auth token from the celestial light node, which is basically needed for us to write to Celestia. So this is standard on how any roll up would use celestia and we would initialize the chain, reset everything, initialize the chain. There's some configuration things we need to do for wasm itself. So just like configuring things like minimum gas price chain id, all the kind of things we define here through configuring. And just like how you would have a comet BFT chain, you would initialize it, you would do the similar things. You would add your key to the list of keys in the binary. Create a Genesis account with that key.
00:22:56.076 - 00:24:00.454, Speaker B: So that key, which is televasm key here, is taking this like assign this token account. So we created a Genesis account for this key here. And we have a single genesis transaction that gives this key that allows it to stake this amount that we defined earlier. And then one last thing we have to do before is to just take the, when we launch a roll up node, the address of the sequencer node, which is like the roll up node that is going to be producing blocks. We just need to add that to the Genesis file. And that genesis file is what is shared by any verifying full node of the roll up. So everyone knows that who is the roll up sequencer that we have defined and whose signatures to validate against this part that's doing that.
00:24:00.454 - 00:24:34.032, Speaker B: We can skip over this. It's just creating a restart file to actually start the chain. We are going to take the binary which is wasmd, wasmd start. We're going to say it is a block producer. This is the rolekit sequencer we pass in the DA auth token to give it permission to write to DA. And we will have a DA namespace. So let's change this namespace so that we can kind of look at in the block explorer.
00:24:34.032 - 00:25:08.984, Speaker B: So I will pick something random by, let's say five, six, pc. And then the DA height is what is going to be queried at the beginning. And then some things about like the, where you actually talk to the DA node. Those are all the things we are passing in to start the chain. And we are working towards abstracting this away. So you would just put this in a config file. Instead of passing all these flags to improve the developer experience, let's now start the chain.
00:25:08.984 - 00:25:39.990, Speaker B: We're just going to run the script. Let me actually save this so that we get this reflected. So we're going to rear everything. So we have a roll up chain that's running now. It's producing blocks. We have it configured to be producing blocks every second. So you could actually configure your block time here as a flag as well.
00:25:39.990 - 00:25:57.314, Speaker B: So it can go really fast if you wish to. And really fast. Yeah. So this is just every second it's producing blocks. Right now it's just empty blocks. And then let's go and actually see this. Try to find this namespace on Celestia block Explorer.
00:25:57.314 - 00:26:26.554, Speaker B: So let's do that. So I will, we will take this Bloxfro explorer and zoom it in. So this is Mainnet. Let's go on Mocha and let's try to find our namespace. So our namespace ended with five, six BC. So we should see it here.
00:26:26.714 - 00:26:28.854, Speaker A: There's a lot of data on mocha though.
00:26:29.634 - 00:26:52.134, Speaker B: Yeah, there's a lot of data in mocha. Um, let's see. I feel like, yeah, we should be able to do this. I tried this before. Okay, it is right now. Let's see. So it's, oh, it's five, six BC.
00:26:52.134 - 00:26:57.294, Speaker B: So one thing I'll do here.
00:26:59.414 - 00:27:01.230, Speaker A: String in the browser.
00:27:01.262 - 00:27:32.284, Speaker B: Yeah, I'll put the string here. Eight e. Like here. Let's try this again. 656 BC is like what I want to find. There's a lot of activity in mocha.
00:27:34.464 - 00:27:36.004, Speaker A: Was there an error log?
00:27:37.464 - 00:28:00.336, Speaker B: It's an error log in trying to submit to da. So maybe we can start that again. So I will start my node again here. So that is good. Let's make sure it is syncing headers. Finish sampling headers. Okay.
00:28:00.336 - 00:28:40.004, Speaker B: Finish sampling headers. So should be good there. Start that. This is to start the chain. Okay, great. So we will start a chain again and I'll make sure to see in the logs that the data is submitted before we actually go and try to find one there. So it's creating and publishing blocks and every once in a while it will also publish to da.
00:28:40.004 - 00:28:42.484, Speaker B: So cool.
00:28:42.864 - 00:28:46.264, Speaker A: It's batching up like, like 15.
00:28:46.924 - 00:29:03.604, Speaker B: It is bashing blocks, the roller blocks into one da block. Yeah. And it posted. Yeah. So it says successfully submitted to the DLA. Yeah, it says excel is submitted to the DLR in DA. Height 167.
00:29:03.604 - 00:29:34.964, Speaker B: So this is like something we can probably will be helpful again. We are looking at 56 bc. Okay, we found it. So if you look at the namespace, very fresh. We are posting blobs to it. This is 1230, so our blobs have made it to Celestia. You can look at the messages.
00:29:34.964 - 00:30:19.884, Speaker B: Each blob. Celestia blob contains a bunch of roller blocks. So if you refresh, we'll probably see even more coming in messages. And if you look at this pay for blob data, selenium allows you to look at this, and you can look into the raw data. What is going in here, which is just the signer here would be the celestial light node that I am running. This is serialized, so you can really read it here. This is the raw hot data, but you can see the data is making it into Celestia using the roll up.
00:30:19.884 - 00:31:13.884, Speaker B: You could go ahead. You have a roll up now. You could follow the rest of the tutorial to actually deploy smart contracts and have whatever your favorite app roll up you'd like to see. So one thing I would encourage is to go into, for example, osmosis apps and try this out. So there's a lot of applications here which have the cosmosm smart contract linked. And you could just take those smart contracts, and if you're a cosmosm developer, you could take these contracts and deploy on your own roll up, and you get dedicated block space for your application in this way. So that is an example of spinning up your own cosmos and roll up and still producing blocks.
00:31:13.884 - 00:31:22.604, Speaker B: So I will. Are there any questions before I kind of conclude here?
00:31:23.904 - 00:31:30.914, Speaker A: There are questions from the chat. I'm curious, though, if you go, I guess, back to selenium.
00:31:32.614 - 00:31:35.790, Speaker B: Oh, back to selenium. Okay, I'll do that.
00:31:35.982 - 00:31:44.314, Speaker A: Sure. Why? Why is there an array? Can you zoom in, please?
00:31:45.054 - 00:31:46.074, Speaker B: Yeah, of course.
00:31:46.414 - 00:31:46.838, Speaker A: Yeah.
00:31:46.886 - 00:31:47.474, Speaker B: Nice.
00:31:47.814 - 00:32:00.244, Speaker A: So if you go to that pay for blobs transaction, and then there's a. It looks like there's a lot of blobs, like, in an array. Is that like, each block or something?
00:32:01.104 - 00:32:41.284, Speaker B: Yeah, that's a great question. So these are. So since the roll up blob roll up is configured to produce blocks every 1 second, and the block time at celestia is 12 seconds, the roll up actually posts, like, batches. All the roll up blocks together and posts it as one paper blob on Celestia. So these all blob sizes. This is one pay for blob transaction on Celestia. And that includes, I guess, twelve or 13 of these blobs, which are the roll up blocks.
00:32:41.284 - 00:33:01.528, Speaker B: And then each of them right now is a constant size, because right now they're empty. And you can see all the commitments on Celestia and all the blob sizes. So the data here kind of constitutes all the roll up blobs. All the roll up blobs scroll down.
00:33:01.576 - 00:33:11.668, Speaker A: On selenium in that window. But on the page, it looks like you can see all the unique blobs that have been posted.
00:33:11.856 - 00:33:37.704, Speaker B: Yeah, you can see all the blobs that have been. All the roll up blocks that are part of this PFB transaction. So you could even. Not sure if you can, actually. This is just kind of the. Yeah, that's what you'll see version of it. Yeah, yeah, this is just a hash of the.
00:33:37.704 - 00:34:01.134, Speaker B: I don't know if the base 64 would do anything, but. Yeah, this is. You can kind of. This is what the roll up blob is. Roll up block is on Celestia on this namespace that we configured. Yeah, and the signer is the my light node account that I funded on the Celestia discord in the mocha faucet. Yeah.
00:34:01.134 - 00:34:30.962, Speaker B: Cool. So you can kind of, on slam, you can see everything about the blob. And since our roll up is still running, we should be able to see the namespace just being populated more and more. You can see cool graphs in selenium as well about it. Yeah, go ahead.
00:34:31.018 - 00:34:32.854, Speaker A: Can I bridge between rollups?
00:34:33.754 - 00:35:29.672, Speaker B: Can I bridge between rollups? Yeah, you can bridge between rollups. It depends on where our. So right now, roll kit rollups, they have IBC enabled, but we're starting with, since it's a single roll up node we're starting. And then in IBC, the standard tendermint like client verifies the signatures of the validator sets. And in this case, the role of Iota is just one. So that one, the current version of IBC that rolek is running, it supports, it has high trust assumptions, so we don't condone using it. But we are working with the IBC go team towards making these lite clients more trust minimized.
00:35:29.672 - 00:35:59.516, Speaker B: So that's the work with IBC. But you could also use other kinds of bridges, like hyperlane, that are permissionless to use. And that's kind of where bridging would fit in. Those are kind of the most two popular options, Hyperlane and IPC. There's also Axelr that you could have. If there's a way to have a permissionless axar deployment, you could have a bridge from there. But yeah, those are the bridges that exist right now.
00:35:59.516 - 00:36:48.738, Speaker B: So this is different from a smart contract roll up in the sense that there's no canonical bridge from the settlement layer for, like, ETH liquidity. But in the cosmos ecosystem, there's like, IBC is the most popular kind of bridge. And you can bridge from a roll up. You could bridge from Celestia to the roll up. You could bridge Tia, you could bridge any assets on osmosis to the roll up, or there's USDC or noble. So you have all these kind of the major assets that you can bridge to the roll up. But just like a sovereign l one, most, we expect, like, most of the assets kind of would be native to the chain.
00:36:48.738 - 00:37:06.950, Speaker B: Like, just like how a sovereign l one does not necessarily rely on a bridge. A sovereign roll up does not need to rely on a bridge. It can have a lot of its assets be like native assets. Got it? Yeah, that makes sense.
00:37:06.982 - 00:37:17.222, Speaker A: And I guess in theory, like, if I had two roll kit roll ups, I could right now, like, there's a high trust assumption, but I could bridge between them using IBC.
00:37:17.398 - 00:37:18.634, Speaker B: You could? Yes.
00:37:19.894 - 00:37:23.486, Speaker A: I can also bridge from a Cosmos chain to a roll kit chain.
00:37:23.670 - 00:38:01.924, Speaker B: Yes. You can bridge by IBC to a Cosmos chain to a roll kit chain. Or you could bridge between two Rolekit chains. You would just need to right now, like, run an IBC relayer for that. And we have instructions on how to do that in our docs. So if you went to the Rolekit docs, you can. There's this, I think we just have just moved stuff here, but there is IBC connection guide that likely got moved.
00:38:01.924 - 00:38:32.480, Speaker B: Oh, yeah, here. Yeah. How to add IBC connection to your roll up. So you go through this. And we're also working towards adding, like, there's a lot of overhead right now to run all the infrastructure related to a roll up yourself or run relayers. So working with these RAS providers to add rolekit as an option to launch your own software roll up out of the box. So you don't necessarily need to, like, later on.
00:38:32.480 - 00:38:44.004, Speaker B: Understand? Or if you would like to not do you deal with running your own infrastructure. But we have everything, all the instructions here, if you would like to, you know, so.
00:38:46.744 - 00:38:48.804, Speaker A: Would that be something like kurtosis?
00:38:49.344 - 00:39:28.184, Speaker B: That would be something like kurtosis. So Kurtosis is also partnering with ISP. They're participating in the infinite space bazaar. So you could take a look at their docs as well on how you would spin up, or I think they should already have some things on their website or talk to them, if not on their discord, on how you would spin up all the rolekit roll up related infrastructure through kurtosis. So you don't have to run infrastructure yourself, necessarily. Yep.
00:39:28.884 - 00:39:34.424, Speaker A: Might be wrong. I feel like. I think they have a bounty actually for the infinite space bazaar.
00:39:35.044 - 00:40:12.866, Speaker B: Oh yeah, they do. Kurtosis does. Yeah. If you look at the infinite space bazaar page, they have a whole bounty on different package authorships or interoperability applications. So definitely take a look. And I'm sure they have great docs on how you would go and add all these different infrastructure from faucets to Oracle or bridge like hyperlane. So they have all these packages out of the box and you could just use that to spin up a roll up as well.
00:40:12.866 - 00:40:41.014, Speaker B: Or you could do something between kurtosis and Rolekit. So Rolekit also has a you could check out if you're wondering about what you should build. We have a list of ideas that we linked here on. Like our team compiled a list of different ideas you could things you could build. So talk to us in the ISP discord. We also have office hours every Wednesday. Just look at the ISP calendar.
00:40:41.014 - 00:40:47.234, Speaker B: Yeah. And encourage you all to explore building a solvent roll up with Rolekit.
00:40:48.694 - 00:41:09.714, Speaker A: I have a few more questions. So going off that last one, if I were a developer looking to build a kurtosis package for Rolekit, for example, what would be the best thing to build a package for? Would it be like a vanilla Cosmos chain or maybe cosmosm chain?
00:41:11.664 - 00:42:16.214, Speaker B: That's a good question. So I think here you don't necessarily, there is the application. So Rolekit is agnostic of the application that runs on it. So when you make a kurtosis package, it would likely just be packaged to run roll up node, roll kit node with a specific application that you already created. So that shouldn't be dependent on what the application here is, whether it is cosmosm or a custom Cosmos DK chain. And what does matter though, here is the relating infrastructure, the supporting infrastructure that comes with it, like a block explorer or a faucet or indexer. Those are more generally more specific to the application you're building.
00:42:16.214 - 00:42:51.514, Speaker B: Something to add. We also have just straight up a cosmosm testnet that the Rolekit team is hosting. So to I will update those things on the infinite space bazaar bounty page. But if you look at our docs, we have a Testnets page where you could find all the links to all the instructions on how you would deploy to this cosmosm testnet as well. Yeah, but I will also link that in the discord.
00:42:52.174 - 00:43:03.984, Speaker A: So the cosmosm testnet, if maybe I were considering doing a cosmosm roll up of my own. This is probably a good place to play around first before I actually.
00:43:04.524 - 00:43:05.704, Speaker B: Yeah, exactly.
00:43:06.404 - 00:43:08.516, Speaker A: And do all the DevOps side of that.
00:43:08.540 - 00:43:53.340, Speaker B: Yeah, absolutely. If you're just trying to initially building a cosmosm app using something like abstract. Right. They have a great library for supporting infrastructure, for adding, for building a cosmosm app, you could first go and deploy on the Cosmosm testnet just to get a flavor of it. And once you're kind of tested your app or played around with it, you would like your own roll up, dedicated block space. Instead of sharing the testnet with multiple apps, you can just spin up your own roll up or even talk to the kurtosis team to just for them to handle it for you. But you'll have dedicated block space customized eventually.
00:43:53.492 - 00:44:03.580, Speaker A: We've seen during the workshops here the EVM roll ups, where you can basically one click deploy. I guess that's the end goal for something like Rolekit too, right?
00:44:03.652 - 00:45:12.324, Speaker B: That is end goal, yes, that's the end goal of what we are working towards. We just had, since it's the first algorithm Rolla framework just had went through audits and we have a release that is production ready now for people to go and deploy rollups on Mainnet. The next step really is to make it really easy and accessible for anyone to launch roll up using this one click deploy using different infrastructure providers, like kurtosis or like in the future caldera. There's another one called numetric, or if any other raspberries would like to add it. But that's the next step and end goal, so that it's really easy for anyone to have their own chain. And we're also working towards adding all the sort of supporting infrastructure for a chain out of the box. So in cosmos there is, you could actually have custom blockbility rules, or you could even have an oracle that is enshrined in block production.
00:45:12.324 - 00:45:30.868, Speaker B: So the SCIP team has a great product called Slinky that we are right now working towards adding that integration. So any rolekit roll up can get an oracle out of the box in the future. So that's in the works as well. Just like a teaser.
00:45:31.016 - 00:45:36.024, Speaker A: Yeah, you mentioned that was skip. I'm going to drop the link to the chat there.
00:45:36.444 - 00:46:07.114, Speaker B: Yeah, that'd be great. Yeah, they have a great oracle that they worked on, and fortunately we're working on towards having the integration with Rolekit. So anyone can get their oracle with a rolekit roll up out of the box. So you don't need to have something when you launch a chain, you don't need to go and find an oracle separately and figure out how that would work if you're building something in Defi.
00:46:09.614 - 00:46:17.634, Speaker A: We do actually have a question in the chat from Garang Patel. Is there a specific release or just main branch?
00:46:17.934 - 00:46:44.594, Speaker B: Yeah, great question Garang. Yeah, that would be v 13.1. That's the latest release as, as far as I remember. Yeah. So we 13.1, if you go to our GitHub repo, GitHub.com rolekit rollkit on the bottom right, you would see releases and that'll be v 13.1.
00:46:44.594 - 00:47:01.460, Speaker B: That is what you would use to be if you're building a roll up today. Yeah. And I've also added that in the Discord channel for future use.
00:47:01.572 - 00:47:07.664, Speaker A: We have some compliments from Yarik and Matt. Thank you. Awesome.
00:47:09.044 - 00:47:10.064, Speaker B: Appreciate it.
00:47:12.364 - 00:47:22.744, Speaker A: I would just ask one more time if there's any questions in the chat. And in the meantime, I have one for you. What would you like to see built during the infinite space bazaar?
00:47:23.684 - 00:49:11.536, Speaker B: What would I like to see built? I would like to see applications that are, that benefit from being on their own chain, like, and then we have some examples in the sovereign roll of ideas, but some of them are like sovereign communities like Daos or NFT communities to have their own platform for their community to coordinate together. So I would like to see things like that there. I've linked, you can find more in the notion doc, that I have. I would like to also see some supporting infrastructure which is like an application maybe that takes advantage of a custom block related rule that again, SCIP has this thing called block SDK, which allows you to add custom block related rules to Cosmos SDK. So an example of that is maybe a roll up that allows you to have limited gas free transactions for certain users that meet a criteria, like holding a certain NFT under the chain. So you can build things like that which are more custom for a particular app, or even things like just like a game using cosmosm that people can play on this dedicated roll up, or this coming up with different VM implementations. Like right now, Rolekit supports Cosmosm and custom Cosmos SDK apps.
00:49:11.536 - 00:49:55.584, Speaker B: We're working towards having an EVM and moviem on top of Rolekit, but something that'd be great to see the SPM. There's a huge community which understands like the Solana virtual machine and has experience building apps there. So it'd be cool to see SVM roll ups on any using rolekit. And they can choose to pick any DL layer like Celestia. Yeah. So definitely check out the list of ideas that we wrote down. I did those with a bunch of people in the community.
00:49:55.584 - 00:50:03.964, Speaker B: Yeah, I would like to see all of these things, hopefully, but we'll see what people create.
00:50:04.424 - 00:50:06.284, Speaker A: Looking forward to see what people build.
00:50:06.784 - 00:50:07.400, Speaker B: Likewise.
00:50:07.472 - 00:50:11.484, Speaker A: Looking forward. One last slide, so I want to let you get to that.
00:50:12.064 - 00:50:20.284, Speaker B: Yeah, yeah. Last slide. Yeah. Thank you for your time, everyone. And go house mind flux. I'm part of that. So great.
00:50:20.284 - 00:50:26.034, Speaker B: Just wanted to mention that if any other questions before we drop off.
00:50:28.654 - 00:50:46.994, Speaker A: Speak now or ask them in the discord if you have more questions. Yeah. On that note, I think we're good to end this. Thank you, everyone again for attending. And thank you, Manav for teaching us about Rolekit and we look forward to what everyone builds.
00:50:47.694 - 00:50:50.694, Speaker B: Looking forward. See everyone. Bye.
