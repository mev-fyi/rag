00:00:01.960 - 00:00:54.612, Speaker A: Okay. Yeah. So this is some of like my impression of how the way in which dapps use Ethereum and the kind of value that the ethereum l one in particular provides to Dapps has changed over the last ten years. Right. So I think to start off, I have this, there's this interesting table from a post I wrote about a few months ago that's basically titled ethereum has blobs. What do we do now? The point of that post was to basically say that, look, we actually have scalable L2s now. Transaction fees on L2s are consistently less than one cent.
00:00:54.612 - 00:02:07.500, Speaker A: And basically, who here remembers bitcoin maximalist people on Twitter saying ethereum is never going to scale? Who here remembers them basically hearing me saying that the Internet of money should not cost five cents a transaction and basically acting like that's an argument against Ethereum? Who here remembers them saying ethereum is never going to switch to proof of stake? So since then we have switched to proof of stake. We've switched to full proof of stake and now we actually have functioning loyalty scaling. And now as of a month ago, both optimism and arbitrum are at stage one. And so they are not just multisigs and they're at least halfway there to being fully trustless. And some of them are at least saying that they'll get to being fully trustless pretty soon. You know, I think that's like the next milestone, right? The next milestone is like, I mean, you know, a lot of them, you know, they say like two or three, only a few months, and then we'll get to stage two. Anytime someone says something that involves a timeline, you multiply it by three, unless it involves zknarcs or AI capabilities, in which case, apparently you divided by three.
00:02:07.500 - 00:02:35.684, Speaker A: But basically, yeah, you, the, you know, the next milestone is like, you know, you actually like have actual like peer dots. So we have like actual Das for the blobs, then you have stage two. So we have like actual full trustlessness for the roll ups. Right. But when that's coming, then all the critics are going to go away, right, Justin? Okay, that's fine. Hopefully your phone is an eth phone. We have to actually use our stuff.
00:02:35.684 - 00:04:03.710, Speaker A: But the point is that the way that we, now that we've hit this important milestone, it's really important, still really think through how we actually use Ethereum and basically really make sure that everything that we're building now actually does fit the paradigm that really makes sense going forward into the next decade. Basically from an architecture perspective, 20 ten's Ethereum, you build everything on l 120 twenty's Ethereum. You can either build on a specific l two, which could even be your own l two if you want, or you can architect the application in such a way that it supports every l two that follows some set of standards. So in the case of Ens, for example, basically they are going to get on their own l two. And then they also are supporting the CCIP based approach, which actually basically lets you have subdomains on L2s, for these are the techniques that make sense privacy. So back in 2014 and 2015, everything is public. And I think this was the tail end of the era where people were saying, privacy is dead and we're not supposed to care about privacy.
00:04:03.710 - 00:05:30.000, Speaker A: I still remember, actually, I think even visiting some kind of a traditional web conference in Shenzhen somewhere, and there were even speakers on stage even in 2018, basically saying, hey, the privacy thing is dead. And I think these days, especially within this space, it's become more and more understood that some kind of control over where the information is flowing is pretty much mandatory. And so the question now is basically, how do we actually engineer it? How do we get that actually adopted? So basically the new paradigm is that, that we're trying to build toward is like a user's data is private by default. And when you disclose data, you should disclose the data that you need to disclose in order to satisfy some particular purpose. Now, this also involves a lot of changes to infrastructure. It involves a lot of different conceptual changes because there were lots of Dapps in the 2010s that were basically just dumping everything on chain just in case they were just dumping more things on chain, basically just for user convenience purposes. That's, in this kind of context, not really acceptable anymore.
00:05:30.000 - 00:06:17.194, Speaker A: For a wallet, for example, you have to think about not just your key store, but also where you're going to store nullifiers and encrypted values and hashes and various other things that you have to pieces of data that you have to hold onto in order to be able to use your assets. Sybil resistance in the 2010s, you must have 0.01 eth. And then these days, there's like more of a zoo of different approaches. So you can require an ETH deposit, and then you have clients that are offering wrappers to non crypto users. And basically you have these centralized wrappers that provide some kind of centralized anti symbol in order to reach those users where that's what they have. And they don't have crypto yet.
00:06:17.194 - 00:06:59.872, Speaker A: Wallets. So 2010 is externally owned accounts. And then these days, I have account abstraction wallets, and then within account abstraction wallets, you have key recovery, different kinds of access control for different kinds of security levels, sponsored transactions and blah blah blah, and then proof of community membership. Basically we have, I think at the beginning we basically had nothing because we basically only had eth. But then you started to have things like token gated stuff. And then you're starting to have airdrops. And then for airdrops you're trying to, you know, like, figure out, like, who actually deserves, like some claim in an airdrop based on more complicated criteria.
00:06:59.872 - 00:08:13.230, Speaker A: And so, you know, that's also turning into a more complicated zoo. Right. So there's like lots of things that are turning into these ecosystems where there's like a lot more options and it's more complex, but also at the same time more powerful. And a lot of the time responds to a lot of the challenges that we've come to understand over the last two years. So what does this all mean for applications? Basically, for applications, one question is where do you build? Are you building on l one, on l two, on something that's not a chain? How do you interoperate with other applications? How do you interoperate with infrastructure? What does composability mean? I think there's this mentality often that composability means synchronous composability, but I think over 80% of the time, like, what you can, the kind, the thing that you want out of composability can be satisfied perfectly asynchronously. And then there's definitely, like, even like, sub ecosystems where they basically have been arguing for a long time that, like, well, actually everything should be asynchronous. And like, that's good for parallelization and so on.
00:08:13.230 - 00:08:48.896, Speaker A: So we can look at a specific example. Right? Yeah, you know, I generally, yeah, think, you know, like, at some point you have to stop talking about generalities, and at some point you have to talk about specific things just to make sure you're actually talking about something that makes sense for anyone at all. So, specific example. Let's do Twitter. On ethereum 2015, there was this thing called ether tweet. It was one of the very first applications. I think it came actually very soon after some of the, like, really? Yeah, fun stuff that happened, like, very early on.
00:08:48.896 - 00:09:49.816, Speaker A: Like, who here remembers in 2015, Ethereum, you had these contracts that were like, you know, like provably fair Ponzis, where like, basically, yeah, you know, you put like one Ethan. And then you join a list. And then whenever, you know, like, the two nth person joins the nth person. Like with one eth, the nth person gets like 1.9 eth out. Like, remember this stuff? Like back in 2015, this was like a little bit after that we started getting Twitter on Ethereum, right? And I think this makes a lot of sense, right, because I think it makes even actually more sense now than it did then, right? Because then we were still in this era where decentralization was this very theoretical thing. But now, if you want to ask the question, like, what's the point of a Twitter being decentralized and not being controlled by a single actor or company, a nation state, whatever, there's like, the answer is it's just abstract ideology.
00:09:49.816 - 00:10:31.180, Speaker A: There's very specific examples over the last couple of years that you can point to. So either tweet was basically, it was basically a demo. And then here you have a Firefly, also built by mask. And Firefly is like this really amazing client that's simultaneously a client of forecaster and lens and Twitter itself. You can do things like multipost. So whenever you see me tweet out a blog post, and then it gets tweeted on Twitter and farcaster and lens at the same time, this is what I use. And at the same time, it's actually a good client.
00:10:31.180 - 00:11:03.516, Speaker A: The UX actually looks really nice and it looks web two competitive. Right? So let's talk about some under the hood technical differences between these two things. Right? So where does user account stuff go on ether tweet? It's just ethereum l one on firefly. Optimism where the tweets go on either tweet. Ethereum l one on firefly. They have this structure called a CRDT, which is not technically a blockchain. It does replication, but it does not have any guarantees on order.
00:11:03.516 - 00:11:39.204, Speaker A: And they've designed their application so that it doesn't need any kind of consensus on order. And then there's also an anti denial of service piece, basically the thing that I called proof of stake hash cache on eth research on some occasions. And that's part of the user account stuff. Forecaster frames. So ether tweet did not have this. And in firefly it's on servers. So how do non crypto users get served? Right, so ether tweet, there isn't really any way to do it at all.
00:11:39.204 - 00:12:23.390, Speaker A: If you want to use if from you're a non crypto user and you want to start using ether tweet, you'd have to both start using ether tweet and you'd also have to start using an ethereum wallet. Right. And so the, like, the initial bump in UX costs to even get into an application was just higher because you had to get into these two separate things. And warpcast acts as a wrapper. So basically with Warpcast, it basically sets up your own account. And so it also basically at the same time implicitly does this higher convenience, lower security key thing. And then for the account recovery, by default it's warpcast.
00:12:23.390 - 00:13:06.240, Speaker A: Or you can set it to your own ethereum address and Warpcast has an option for how to do that. And that's what I did. And so I got my four out of six gnosis safe, and I can call it a gnosis safe because I created it before they rebranded and I think I haven't upgraded yet. But the four out of six gnosis safe that actually serves that is the thing that actually does the recovery. And honestly, I trust that more than web two recovery. With web two recovery, it's okay. Yeah, I have my account and then with my account, like my gmail accounts, basically at some point I actually did not even do anything wrong.
00:13:06.240 - 00:13:35.510, Speaker A: I did not even forget my password. But at some point they just said, okay, password's not good enough, we need to confirm your phone number. Then they asked to confirm some phone number from five years ago that I just don't even have control over anymore. And then they don't have any kind of other way to get your account back. And so I'm screwed. So actually this is part of the reason why I show social recovery everywhere, because I actually think it's better than not just the decentralized stuff, but decentralized stuff. So these are the differences.
00:13:35.510 - 00:14:26.078, Speaker A: Basically. A big part of it is Firefly just does more stuff in order to fill a larger set of users needs in order to actually be competitive with, and often super competitive with existing web two applications. And there's just more infrastructure that needs to exist in order to make that possible. So how apps handle user accounts, this is one of those big changes. So 2015, bring your own web3 wallet, only 2021. I think I definitely saw some applications that were basically saying, you know, oh, we're going to be mainstream applications and then we're going to do sign in with social. And like, this made me like completely die in my heart because like, no, the point isn't to build web3 on social.
00:14:26.078 - 00:15:24.110, Speaker A: The point is for web3 to replace the social. But the thing that they were getting at, right, is basically trying to like get existing, you know, like users and like basically help existing users join the application in a way that's like not super fragile, because if you just store a private key inside of browser local storage or whatever, that's too easy to lose. I saw some of that in 2021. These days, in 2024, I'm seeing this very welcome shift toward figuring out a way to support both. I think Farcaster is a good example of this. Basically, if you just use Warpcast, then by default it just feels like a traditional web two app. But then it does offer this way for you to upgrade yourself into actually being a proper Ethereum user.
00:15:24.110 - 00:16:31.804, Speaker A: I think this is an ideal best of both worlds. Basically, if you don't already have an Ethereum wallet, then you should not have to download both an Ethereum wallet and an application in order to use an application. But then at the same time, applications should be designed in such a way that if you are already an Ethereum user, you should be able to use the Ethereum application the Ethereum way and just benefit from the Ethereum wallet just being your root of trust. You should not need to have these eleven different routes of trust and ideally have some way to pretty seamlessly switch from one to the other. So right now this is kind of happening at the application level, and I'm hoping in a few years, once we have better account abstraction, this will even start happening even more at the smart contract wallet level. Thinking about composability. So how do different Dapps talk to each other? I think one of the big trends is basically that back in 2015, everything was on chain, everything would talk to everything else by making synchronous calls.
00:16:31.804 - 00:17:18.484, Speaker A: In 2024, we see much more use of asynchronous off chain. Lazy evaluated various hybrid methods. Airdrops are a good example of this. The way airdrops used to be done is if you do an airdrop, then you just basically have a bot, and your bot just sends 100,000 transactions and you as the airdropper pay a huge pile of gas. And then since then, the dominant paradigm, basically we switch to being something like you have a Merkle branch and you just put the root on chain, and then for someone to claim, they have to claim by providing a branch, and then they pay the cost of the claim themselves. There's other things that could potentially switch over to asynchronous and off chain methods. So oracles is one example.
00:17:18.484 - 00:18:21.182, Speaker A: So I think right now there's a lot of inherent inefficiency in even chain link pushing data to multiple l two s because it's data redundant in a certain sense, right? And one way to solve that whole problem is basically kind of real time asynchronous oracles, right? Like if you want oracle data, then like you provide it with a signature and then the other. But then there is a possibility of like a curveball where we actually move back to being synchronous for that sort of stuff, which is the l one s load l one synchronous call. And like that whole bubble of ideas, right? The ideas were like l two s all or most of the major ones just like develop the ability to make synchronous reads or calls into l one of some kind. So some switches into what's happening here. So what lives on ethereum? L1. So in 2014 or 20, or rather in 2015, it was everything today. So what you have, you have l two root logic.
00:18:21.182 - 00:19:15.934, Speaker A: In theory, you have user activity in emergencies. So this is like the idea that if something bad happens to an l two users are supposed to be able to exit and move to a different l two. This hasn't really happened at scale yet, but this capability needs to exist in order for l two s to have good incentives. So that's something that l one needs to be ready to handle even if it's not handling it very often. High value defi still on l one key stores. So this is still in idea stage, but being developed. This is the idea that if you have a wallet and you smart contract wallet and you want your wallet to exist on lots of different l two s, then if you want to be able to upgrade it instead of having it upgraded n times on n different l two s, you just have the logic live on zero one.
00:19:15.934 - 00:19:52.086, Speaker A: I mean, then staking related services staking. So the various liquid staking daos and like all of that stuff, basically it has to live on o one because it ultimately has to directly interact with the deposit and withdrawal system. So how do I summarize all of this? Right? Basically, yeah. Like dapps need to plug into this and like much more heterogeneous mix of stuff. And that stuff is sometimes layer one. Sometimes it's one L2. Sometimes it's like any L2.
00:19:52.086 - 00:21:24.256, Speaker A: Sometimes you have other systems, sometimes you have things like CRDT's, then. Then sometimes you have things that are not even like blockchain or data y things at all. So all of the different, I mean, like oracle types. So modern standards for user experience, the desire to actually build things that can serve like regular users in practice and not just early stage Ethereum geeks, leads to demanding more of applications and that's where a lot of these other components are starting to come in. L1 is still playing an important role, right? Like l one still continues to have a lot of functions. And so basically we're moving from the Ethereum verse as infrastructure being just the Ethereum chain to it being this kind of combination of a bunch of various stuff, right? And I think one thing that's really valuable to remember is like, this has always been the vision, right? So who here remembers? I mean, look, this chart back from the early days, and like Gavin Wood presenting the web3 vision. Okay, so some people, right? But basically the early vision, this is like how Gavin, well, would present about Ethereum back in 2014 and 2015 is like you have this concept of web3, right? And like the idea of branding it as web3 is basically to say, we're not thinking about Ethereum as being bitcoin, but it can do smart contracts.
00:21:24.256 - 00:22:07.650, Speaker A: We're thinking about Ethereum as open source software, but it has a shared memory. And these are two different frames. And that second frame is one that's actually also super valuable to think about and one that lends itself much more to non financial applications. Basically, the vision there was that you'd actually have this set of sister protocols. So you'd have Ethereum, which does the shared memory, then you would have whisper, which is just a decentralized messaging protocol for passing messages around. And then you'd have swarm, which does decentralized off chain storage and basically larger blobs of data that you don't need consensus over today. This is actually, both of these are starting to happen.
00:22:07.650 - 00:22:48.240, Speaker A: You see a lot of things that are being served on ipfs, though. I think we could do a lot more to bring back mist and actually verify IPFS hashes directly and all that. Whisper, so rebranded to Waku, is still being developed. It's still actually actively being used. So status actively uses it, the live railway client actively uses it. So that's how your withdrawal messages make their way to the wrapper providers. So the idea of the Ethereum blockchain being one piece of this heterogeneous stack is like a thing that's.
00:22:48.240 - 00:23:07.620, Speaker A: I think it's always been the idea, and this is basically what's ended up happening, but which specific pieces actually are the sister protocols is something that definitely has changed over time, and I expect that it's going to continue to keep changing.
