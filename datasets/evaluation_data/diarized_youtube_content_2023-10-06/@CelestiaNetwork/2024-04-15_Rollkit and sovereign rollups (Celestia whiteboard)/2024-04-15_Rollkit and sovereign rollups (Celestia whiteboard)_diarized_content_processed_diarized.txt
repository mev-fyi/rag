00:00:02.600 - 00:00:33.164, Speaker A: Cool. So we are going to discuss, um, first, like how rollups work. But before that, let's dive deep into what, um, why you would even use a roll up. Right. Um, a rollup is just a blockchain that inherits security of another blockchain. Um, so let's discuss why a roll up first. So let's say you want to write your web3 app.
00:00:33.164 - 00:01:39.374, Speaker A: What options do you have? I think the most common way people go about is you deploy your app on Ethereum. So you can do that, but the advantage of that is you get really high security. But a downside of that is it's very costly for users since every app is deploying on top of it can be costly. So another way you can go about it is you can deploy your own chain, an app chain, and with that, sure, the only users on the chain are people using your app. So it's very cheaper or it's really cheap for those users. But the downside is that you have to maintain your own security of the app and you have to. That is very costly, both in money and time.
00:01:39.374 - 00:02:48.124, Speaker A: Another way you can go about is you could just deploy on another layer, one which is cheaper, right? But security wise, again, you might have weaker security, but again, you run into the same problem where now everyone deploys on this, and you run into the same problem that it just becomes costly for users. Another option you have now is you could deploy a roll up. With a rollup, you, um, you get your own chain, but that inherit the security of another chain. So you get both high security and it's cheaper for users. And if you wanted to retain control and decision making power, you could deploy something called a sovereign roll up, um, which is what rolekit enables for you. And that's something we'll discuss in the next slide and how that works. Any questions about this?
00:02:48.424 - 00:04:06.832, Speaker B: So this is a good example of security versus costs. How does scale impact or impact the decision across these options? In this example, it's kind of clear when deploying an application the choice between choosing high security and users, or in cost to users. I think there's an assumption that ease of deployment is similar across all of them. Curious if it's worthwhile talking about how each of these options scale and how that impacts them. I guess leading that question, like thinking about deploying on Ethereum, as that ecosystem scales, the cost just continues to go up, whereas an app chain or something, as that scales, the security does actually go up, so it gets closer, but then at some point, I would assume the cost also then starts going up. So how scaling each of these individual ecosystems or options impacts and which one has the best long term scaling in trade offs or benefits?
00:04:07.008 - 00:04:47.514, Speaker A: Yeah, that's a good question. Yes. On Ethereum, as the number of users increases, the cost would keep increasing, gas cost increasing on an app chain as well. But in this case, you're not having multiple apps compete. So in this case, if another app, like another app chain, has high activity, your app chain would not necessarily scale, scale, or it wouldn't necessarily have a high cost for users. So that is local to your app. So it's only your users that are competing to execute transactions on the app.
00:04:47.514 - 00:05:49.134, Speaker A: And for an Alt L1, you kind of run into the same issue as something like Ethereum. And for a roll up, you can also have multiple rollups on top of that are inheriting the security of a base layer. So as the number of users increase on a rollup, you could have also multiple versions of a roll ups that users are using. So that's kind of like scales. In terms of costs for security, you don't, to launch a roll up, you don't have to spend more to, you inherit the base security or the security of the base layer. But in terms of costs for users, those can be also spread across different roll ups. Answer your question.
00:05:49.134 - 00:06:35.394, Speaker A: Cool. So move on. So we'll just discuss how a sovereign roll up works and what are the different components of it. So a solvent roll up is also a blockchain, but it's just, it would have just like any blockchain would have blocks that are being produced. So, so, but how do these blocks get produced? So when you launch a roll up, you launch something called a rollup block producer, or what is called a roll up sequencer. And when there are transactions that users submit. So users of this roll up are running a rollup lite node.
00:06:35.394 - 00:07:14.550, Speaker A: So let's say a user wants to submit a transaction. Um, so they would submit a transaction to this. So like a pool of transactions. Let's say there's just two transactions for now. And every, uh, every roll up, what we call a roll up block time, let's say it's like a second or two. Um, the roll up block producer will look at this pool of transactions that exists. And this pool is shared across all the roll up nodes.
00:07:14.550 - 00:08:14.938, Speaker A: So these roll up lite nodes can actually submit transactions to any other roll up node. And this happened to be in this pool. So let's just say the roll up block producer has access to this pool. So all the roll upload producer is going to do every rollerblock time is take transactions from this pool and order them. It is also going to produce something called a header from these transactions. And the header has something called a stateroot, which represents what was the state of the roll up after these transactions were executed. So let's say, um, my previous state looks like it's an account a that has five units of currency and account b that has ten units of currency.
00:08:14.938 - 00:09:01.114, Speaker A: And a transaction just says that a is going to send two units to b. So that's just what the state will look like. Here should be clear. And the role of block producer is going to create this header from this new state by taking a hash, something we call the hash of this. And it is going to create a header. Now by combining the header and the set of transactions in a block is you get something that's what you call a full block. So this is just a block data and this is the header.
00:09:01.114 - 00:09:35.642, Speaker A: So the role of block producer is signing over the header that was produced. This is just a block. And this block is going to be appended to this chain, the roll up chain. So it has internal notion of what the state of the chain is. So let's say like roll up block, roll up slow block height one, two, three. Just produced roll block height three. So roll up block three.
00:09:35.642 - 00:10:40.926, Speaker A: And it is going to append this and is also going to publish this block to the base layer, which is something which is DLR, like celestia, that is also a blockchain. And that chain usually has bigger blocks than the roll up chain. And how is this block going to be submitted to the dealer? These roll up blocks, every roll up node runs da light node, um, which is what it's used to submit to the DLA. So, so the same block is going to now live on the DLA. So just redraw it. And anyone who would like to run the, the other type of node is a roll of full node. So that's something anyone can run that's permissionless.
00:10:40.926 - 00:11:37.064, Speaker A: So if anyone wants to verify the state of the chain or they like, they would be gossiping transactions to this pool, they will run something called a roll of full node as well. And these nodes have their own p two p layer. But the primary way is they're looking at the DL error. So the role of full node is just going to be looking at these blocks. So every the roll node is also running a dlite node of its own. And the roll of full node is going to do two things. It's going to verify the state is correct.
00:11:37.064 - 00:13:03.074, Speaker A: And if the state is not correct, it is going to tell alert, notify the network that something wrong happened and it would halt. So all the full nodes of the network and light nodes will know that there was an invalid state transition. If the state is incorrect, if the roll up block producer tried to produce an invalid transaction, the roll up full nodes would halt and light nodes would also know. So that is how solvent rollup works. Um, and next we can talk about, and, um, maybe one thing we can go over is like, that's a common question, is where is settlement happening in the roll up? So sovereign roll ups have their own notion of settlement, um, which means they, they maintain the, the state, like in rollerblock producers and full nodes. So that does not have to be on any other layer. Any questions?
00:13:04.534 - 00:13:17.604, Speaker C: Curious? What happens if there is an invalid state transition on the roll up and the chain halts? Like what is the process after that to recover and restart the chain or for the chain to continue producing blocks?
00:13:17.724 - 00:13:54.334, Speaker A: Yeah, if a block producer, if there's an invalid state transition, then the roller block producer is malicious. They include an invalid state transition. In that case, the chain halts and there'll be social consensus. And the associated, if there's a stake associated with a block producer, that will get slashed and you would just start the chain again from the last state that was correct, and there will be another blockblock producer that does that.
00:13:55.954 - 00:14:01.174, Speaker C: And is the stake that you're talking about stake on the roll up or stake on the base layer?
00:14:04.874 - 00:14:43.040, Speaker A: That's sort of like an implementation detail? Yeah. That can be configured both ways. Yeah. Then we're just going to move to how you actually create this roll up using roll call kit. So we'll, before this go with this, we'll assume that you are a Cosmos SDK developer. Right now. The primary way how RoleKit works is through the framework, Cosmos SDK, which is a framework to build blockchains.
00:14:43.040 - 00:16:11.640, Speaker A: So if you're a Cosmos SDK developer and you have written your app logic already, so, and now you want to launch your chain, how would you do that right now is you would have to, before you launch a chain, you would have to gather a validator set and that, and you would have to bootstrap your own security for that validator set. And that is a huge effort. It costs a lot of time and money. Um, and that's how you, like, launch a cosmic chain right now. But now using Rolekit, all you have to do is you can plug Rolekit in your app and you can decide an already existing block DL air like Celestia, and you can inherit the base, inherit the security of that base layer, and you can launch your chain just using the same app. You can just plug Rokin in your app and you would just launch it over blockchain. And the benefits you get is nothing.
00:16:11.640 - 00:17:44.654, Speaker A: All the, all the existing tooling around the whole cosmos ecosystem, you get that out of the box. So what is that tooling? You still get ABCI, still IBC compatible, all your wallets that you used to, you still get support with them, and you have full RPC compatibility between all your tooling with block explorers and such. And last thing is, you would also retain full sovereignty over your app, so you don't have to give that up to another chain. What does that mean? If there is ever a bug in your app or your app has a exploit, then you don't have to worry about not being able to fork because you settle on a different layer. You can fork easily and you can just upgrade to the fixed version that the community decides. And you can still have all the great, you can still have on chain governance to do those upgrades. So that's what you can do with Rolekit.
00:17:44.654 - 00:18:14.802, Speaker A: And if you want to learn more, you can go to our website, it's rolekit dot de v dot. Look through it, launch a roll up. And if there's any feedback, just talk to us and reach out via telegram. Yep. Hashtag. Are there any questions?
00:18:14.978 - 00:18:26.850, Speaker C: Yeah, I had a question about the before and after picture and the differences between having a validator set and maybe like a single sequencer or a few sequencers.
00:18:27.002 - 00:18:27.734, Speaker A: Yes.
00:18:28.374 - 00:18:41.814, Speaker C: Can you explain more about what the security assumptions are? I guess, or what you inherit as far as security goes between a cosmos chain with 1000 validators and a single sequencer?
00:18:41.974 - 00:19:18.460, Speaker A: Yeah, that's a great question. Yeah. If you have a cosmos chain with 1000 validators every block, all those validators are re executing those actions, coming to consensus. Right. And they have their own security that they have to bootstrap. But in the case of a single sequencer, you're not actually violate, you're not actually, you're only trusting the sequencer for liveness. So, which means if the sequencer goes down, then the chain will halt.
00:19:18.460 - 00:20:44.504, Speaker A: But if there is an invalid state transition, um, then you, uh, depending on the roll up type, if it's a pessimistic roll up, then there's roll up full nodes that can detect that. Um, and if it's an optimistic roll up, there's, uh, prop roofs being generated by these full nodes to all the network participants. And in the case of ZK rollups, each block that gets produced by a sequencer has to be accompanied by a ZK proof. So with a sequencer that is just inheriting the security of an existing chain, the DLR like Celestia, and that layer already has also a validator set, the sequencer is actually getting security from that layers validator set so you don't have to have your own and do all this work, which costs a lot of time and money. So that's a common misconception that you were going from a huge validator set to a smaller one, but in this case, you're still inheriting the security of the dealer. Any other questions? Cool.
