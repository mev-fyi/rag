00:00:00.170 - 00:00:24.480, Speaker A: You all right? Hey everyone. This is going to be. This is going to be fun because I literally have two talks and way too many slides. So it's going to be a little bit rush, but I'm putting ideas out there. If you don't understand something, don't feel dumb and just come find me. Ask about it. So it's like for small brains, but also brains are on crack basically.
00:00:24.480 - 00:01:15.906, Speaker A: I hope you follow me in this journey. So basically the two things I'm going to speak about is why onchain games should be roll up. Should use roll up, what's the point and what are the benefits? And then something I'm really excited about, roll ups is the possibilities afforded by sequencing to do good things for games. And so I'm going to speak about the design space for decentralized and shared sequencing, which is a little bit technical, but a little bit fun to talk about if you're a little bit nerdy like me. So I hope you find exciting. So I had this talk in ECC, which I'm basically going to give you the smooth speed up version, like the executive summary of that. Also, I've done this talk like three times this week, so I have that part phrased down so I can do it fast.
00:01:15.906 - 00:01:44.266, Speaker A: So I'm working on a card game called Xerox Fable. It's fully on chain and it's like magic the gathering or Earthstone. It's under development and I want to do this game right. So I want to make it decentralized. I want to make it such that every can extend it. And for this it needs to be on chain and it needs to be, I think its own roll up for a bunch of reasons. This is a gaming track so I probably guess you know why games should be on chain.
00:01:44.266 - 00:02:01.938, Speaker A: But if you don't, I have a talk at Denver that explains my reasons for that. So here are some challenges that game face like game have a lot of action. So they need throughput. You probably want to onboard a lot of users. So this user probably don't want to pay $0.10 for each of their transactions. So a transaction should be free.
00:02:01.938 - 00:02:23.130, Speaker A: You don't want nft drop to just disrupt your gas. So that's gas isolation. You can already see having your own chain ensures gas isolation. You want actually decentralization. You don't want anybody to be able to shut down the game if they press a button. That's the goal. You want cost to be low because you probably still want to make money from your game.
00:02:23.130 - 00:03:02.882, Speaker A: So you're running a business, you might have cost and you have future free transactions, so you're not making money on the roll up. So costs should be really low. As you know, if you ask a user to install metamask and this guy is not in crypto, he's like, okay, I want to play this game, so I have to install this thing. I have to remember these twelve words, write them down, store them under my underwear and inside my swiss bank. And then I need to log on to my bank and transfer to Coinbase, and then from Coinbase to optimism, it's not going to work. So you need a way to at least let people try the game for free. And then, without doing all these shenanigans, then there are a few more challenges.
00:03:02.882 - 00:03:34.240, Speaker A: These are not super specific to roll up, but like my game versus my card game. You draw a hand of cards, and these cards, the opponent cannot see them, so it's private information. You can't do that on a normal blockchain. You need something like zero knowledge proofs. I think games should be extensible, so that there's a whole software architecture for that. And if your game has some financial aspect like nfTs, maybe you need trading liquidity, so that you can connect the buyers and the sellers. And probably you want to have some kind of people that speculate so that they can supply liquidity on your stuff.
00:03:34.240 - 00:04:07.078, Speaker A: So my point is like, roll ups help with most of these for various reasons. And really what they do is that they have low cost and they have good integration and security. So if you don't know why roll ups are secure, I don't have time to explain it to you, but just ask me. It's a way to make a chain that inherit the security of another chain. Often ethereum. What's not obvious is that they're cheaper to run than their own chain. There's like cosmos, which is an ecosystem of sovereign chains.
00:04:07.078 - 00:04:30.126, Speaker A: Everybody can run their own chain and they all talk to each other. It might not be obvious why running a roll up is cheaper than to run a cosmos chain. So I want to explain that. So there's two reasons why the roll up is cheaper. One is the security is taken care by the layer one chain. So for instance, Ethereum. And so what you need when you run a layer two is something called a sequencer.
00:04:30.126 - 00:04:48.490, Speaker A: A sequencer is the entity that takes a transaction and makes a block out of it. If the sequencer is evil, two bad things can happen. First, if the sequencer just stops, your game is stopped. You roll up stop, nothing happens. Second thing is, a sequencer does not like you. We can just say, ha ha, I'm not going to put your transaction in the block. That's censorship.
00:04:48.490 - 00:05:22.082, Speaker A: But at least the sequencer cannot steal your shit. So that's what you call liveness and super distance and stealing your stuff, that's security. And so because it's a little bit less crucial, you need less stakers, need less people to run the sequencers versus the validators. And l two s can do something like restaking and restake. So basically you want to pay the validators. If you have a chain, if you are a roll up, you want to pay the sequencers. The problem if you are a chain is that you either have your own token, which means you're printing money.
00:05:22.082 - 00:05:51.070, Speaker A: This is great. The problem is like people need to stake your token so they're exposed to a very volatile crypto something. So they will want to be paid like 50% return every year because of the risk. And you could also print your own token and just spend it. So that's still money. The other thing is you could use an existing token, so you could use Ethereum. But if you do that, people can use Ethereum to get returns somewhere else, right? They could do staking and earn 6% per year.
00:05:51.070 - 00:06:35.466, Speaker A: So you need to beat that rate. If you use something like restaking, it means like people are already earning returns by validating Ethereum, but on top of that, they can also validate your node, and if they cheat there, they'll be slashed also. So basically they stack the yield and they stack the responsibilities. And because it's additive, you need to pay less of a yield for that. And so that's why roll ups are cheaper. The other thing that's annoying if you're a game developer like myself and you want to launch a roll up, is you need to recruit all these sequencers, right? If you're a big roll up, if you're auto optimism arbitram, it's okay. You just go to chainlink, you go to alchemy, you go to inferra, and you say, can you run my node? Can you sign on the website? And they're like, yes, of course.
00:06:35.466 - 00:07:12.514, Speaker A: You all know this is a good thing for us. If it's me, they're like, who the fuck are you? Fuck off. And so what I want to do is build a marketplace where everybody that's interested in sequencing can come and say, hey, I'm posting my bond here that is open to be slashed, and I will let you contract my services to sequence your roll up. And then if I'm a roll up a game, let's say that wants to be a roll up, then I come and say, hey, here's my note software, here's how much I will pay you. And then you sort of match these two things and you cut a lot of the red tape. And so it's easy. Finally, the final opportunity, and this is the bridge.
00:07:12.514 - 00:08:09.742, Speaker A: The second part of the talk is that decentralized sequencing is when you just don't have a single sequencer, right? So you avoid the censorship and liveness issue, because if a guy goes offline, or if a guy is evil and wants to censor, there's always another guy that can do it. After shared sequencing is when you have decentralized sequencing. But also you say, well, all these sequencers, they're not just going to validate one roll up, they're going to validate many roll ups. And then if they do that, what they can actually do is they can do cross chain transaction that are safe, at least they're as safe as the set of sequencers. And they're fast, they're immediate, in fact. And so this is not very figured out how to do that. There's a big design space where multiple trade offs, and I want to talk a little bit about these trade offs today, but it would be amazing, right? Like you have your own chain, you have all the benefits of your own chain.
00:08:09.742 - 00:08:56.466, Speaker A: It doesn't have a lot of cost, it's easy to set up. And also you can get instantaneous bridging to other chain, you can get liquidity, you can even split your own game into multiple roll ups. I think I have a slide, speaking about that later. And so one of the design you will explore is that all your sequencers that you have, a few hundreds of them, one of them is picked to propose and all the others sign on it. And if you do that, well, you have 200 signatures on your block. And this is less secure than the security of Ethereum, but it's still more secure than just one random dude saying like, hey, this is the block. And so if you're comfortable with a lower level of security, you could use that to do fast bridges, even outside of shared sequencing.
00:08:56.466 - 00:09:31.810, Speaker A: And you could also do that for cheap data availability. So data availability is where you put your blocks so that other people can re execute them. And right now you need to put it on Ethereum, very expensive on something cheaper like Celestia eigenda. But the cheapest thing you can do is not put it anywhere, just on the nodes. And if 200 sequencers say I have seen this block and I can give it to you, that can be a good enough insurance. Like if you're doing a game especially, and if it's not the economic part, it might be a little bit less secure, like you say, oh, I'm going to roll back the last 2 hours of World of Warcraft. It's not going to crash the financial system.
00:09:31.810 - 00:10:04.800, Speaker A: So you might accept the trade off there. Yeah. So why centralized sequencing is good for game? I just pretty much explained this. Another thing is that the only way right now to deploy your own roll up is to something called the op Stack. The op stack is as of now not super secure because there's no fault proof, which is a system that ensures the security. And so in the meantime, like having this signature from the sequencers, that could improve the security of the op stack. So if we can implement that fast, that would be great.
00:10:04.800 - 00:10:44.700, Speaker A: So shared sequencing, this thing where a bunch of sequencer lets you sequence a bunch of stuff, a bunch of roll ups, what can you do with that? You can do game style sharding. So if your game is so big that it doesn't even fit on a single roll up, you have so many transactions that it doesn't fit. Well, why not split it in multiple parts? Like if you have rpg and you have a continent, put multiple continents in your game, in game world, just put a continent on every roll up. Or maybe split by system. Like the financial system is going to be on a roll up that's going to be a little bit more secure. And the game system, the battle system, is going to be on our roll up. And then you just do instant transactions between them.
00:10:44.700 - 00:11:33.386, Speaker A: Okay, this first part of cock, this is going to be tough. Shared sequencing. I'm going to rush through six model of shared sequencing, of decentralized and shared sequencing, and sort of highlight some trade offs that you can have there, because it's not like so far I painted a rosy picture like, oh, we can do instantaneous things that are secure, right? It's not that easy. And I'll explain why. So the basic, basic thing you can do is you have a bunch of sequencers, 300 of them, you just pick one every turn to propose and that's it. You can do one at a time. So like you're number one, you're number two, your number three, or you can just pick randomly and after a while the probabilities will even out.
00:11:33.386 - 00:11:57.634, Speaker A: This is actually safe, right? The thing is, it's safe in the sense of roll ups. So you can't really. A roll up is really safe. To bridge from l one to l two. So from ethereum to optimism, really safe, really fast. From optimism to ethereum, you have to wait seven days to see if nobody says, hey, there's a problem there. This is an easy design.
00:11:57.634 - 00:12:19.382, Speaker A: It's easy to extend, to be shared. The problem is, like, if some guy says, it's your turn to do a block, and it doesn't answer, well, you just missed the Block. Too bad. And then there's this thing called Mev, where people just do arbitrage and stuff. And it would be good if we could capture some of this profit for the chain. And this model doesn't do that. And some of the model we'll see later can do that.
00:12:19.382 - 00:12:49.826, Speaker A: Okay. This really simply is just this idea that you have 300 sequencers. You want them to sign on the block that's being proposed, at least two thirds. And you can do a bunch of things that I already mentioned, data availability for cheap, low security bridge. The thing is, though, because you need everybody to sign on it, it limits the set of sequencers. So you cannot do 10,000 sequencers, because then the time to just get everybody to know about everybody else's votes would be too long. So there's a trade off there.
00:12:49.826 - 00:13:09.506, Speaker A: But because we're not using this for security, it's kind of fine. Okay, so this is the model. We just take the previous one. Just a guy proposes, and we add, all the other guys sign on it. Right? This is basically it. It feels safe and fast. It's still easy, extensible.
00:13:09.506 - 00:13:46.850, Speaker A: Now we get all the extra goodies. We get data availability, bridging. You can also sort of, once you see the signature, you're like, okay, my thing is in. I can have some confidence that this thing is going to be on the chain. The problem is, if nobody signs, if there's a network split and one third of the network is there, one third is there, and then one other third is like, I don't know, just nuked by China. Your consensus is broken, and the question is, how do you deal with that? Do you let it go? Do you go into recovery mode where signatures are no longer needed? So that's something you need to think about. You're still not capturing any mev.
00:13:46.850 - 00:14:29.518, Speaker A: I'm going to skip that. There's some way to mitigate the problem. That's why I just said, like, just go into recovery mode if you don't get signatures. Okay, so no shared sequencing. Simplest model you take the previous model, and then what you add on top is like, oh, instead of validating one roll up, now you're validating a bunch of roll ups, and you're proposing blocks for all of them. And so what you can do now is like, oh, this transaction wants to do something on chain a, and it wants to do something on chain B. And you're going to put these two things, and if you lie, the other sequence will be like, hey, you did the thing on chain B, but you didn't do the thing on chain a, and you'll get slashed and the block will be invalid.
00:14:29.518 - 00:14:55.770, Speaker A: So this is super secure. It's super fast. What's the problem? Well, the problem is essentially the red thing there, which is you're essentially one huge roll up that just happens to be made of smaller roll ups. And so this doesn't scale at all, but it can still be useful, right? Because each roll up can be configured completely differently. It can have blocks that take different time. It can have different tokens to pay the fees. It can even be implemented completely differently.
00:14:55.770 - 00:15:45.734, Speaker A: And it's easy to paralyze because most transactions will not be cross roll ups. You just have one server for roll up, a, one server for Rob B, and then you have one server to handle sort of the coordination of them, but still, it's not rescalable. Some idea to make this better is like, okay, we have a big set, and we're really strict about which roll up can be in this set, but maybe I'm making my game roll up, and I really want to share. I really want to do cross chain transaction with optimism. So I'm like, hey, I'm looking for guys to sequence my roll up, but only the guys that are sequencing optimism can be included. And so let's make it a little bit more permissionless and lets you sometimes do cross chain transaction. Another model is, and this is decentralized.
00:15:45.734 - 00:16:14.642, Speaker A: So we're going back to decentralized instead of shared, but then we'll do that. But shared is the meva model. And so Mev is this thing where you extract value from the chain, from arbitrage and oracle backgrounds. And a is for auctions. And so in this model, there's no sequencer that's being selected to propose the block. Instead, it's like people are bidding. They say, I want to propose the block, and I will pay the network two east, ten east, whatever, three cents to have this.
00:16:14.642 - 00:16:34.214, Speaker A: Right. And, yeah, this is pretty simple. It lets you capture the image, which is good. And otherwise, that's all the same characteristic as before. The extension to share sequencing is tornie. That is the next slide. And there's multiple auction models.
00:16:34.214 - 00:17:17.080, Speaker A: So either you need to bid in advance, but then you don't really know about the MEV that you will have. Like, you don't really know how much money you can make, so you need to bid very little. Or multiple people are bidding, but they're including all their transaction in public. And that's sort of annoying because people have, like, secret sauce to make money and they don't like when that's revealed. And then you can take that and make it shared. So now the model is the person that's bidding is not only bidding to put a block on a single roll up, they're bidding to put a block on Rob ABCD, for instance, but also be on Rob D and E. Like, they can select the set of blocks that they want to bid for.
00:17:17.080 - 00:17:47.966, Speaker A: So this is a great model. I like it because sort of the market decides which roll ups are going to be connected with cross chain transactions. Now, there's a hard problem with this, which is like, these bids can be overlapping. And how do you select which bid is winning? So I gave an example. You got the first auctioneer on the right. The first bidder is like, okay, I'm going to pay rob a $2, rob B one dollars or c $2. And then the other guy says, I'm going to pay a $2 as well.
00:17:47.966 - 00:18:08.700, Speaker A: I'm going to pay b $3. So that's more. I'm going to pay c one dollars, so that's less. And the question is, which one do you pick? Because you can accept both at the same time. And if you try to think about all the sample solution, they don't really work. Like, in this case, I'm going to pick the one that pays the most in total. But then that's unfair to.
00:18:08.700 - 00:18:45.560, Speaker A: That would be the one on the right, but that's unfair to b, which is paid less. And maybe b is systematically being paid less, and that's a problem. And you can't also, there are a few solutions and we don't really have time to go into it, but it's also important that it's not manipulatable. So people sort of make fake bits to manipulate the thing. So I have a strong solution there, but this is like just a shower idea, basically. If that's something that's interesting to you, just talk to me. Oh, we already had the last one, so I think we'll make it in time.
00:18:45.560 - 00:19:34.820, Speaker A: Amazing. So far, the model we've had was the model of atomic execution, where I have a transaction that has multiple parts on multiple roll ups, and I want everything to succeed. The sort of a classical example is I want to swap like a token on a chain, bridge the swap token and buy NFT with that. But if I can't buy the NFT, then I don't want to do the swap in the first place. I don't want to pay fees, I don't want to be exposed to volatility. Another model of cross chain execution is atomic inclusion, where I say I want to do this action on chain a and I want to do this action on chain b, but it's sort of not a causal relationship between the two. And atomic inclusion does not guarantee execution, does not guarantee success.
00:19:34.820 - 00:20:01.526, Speaker A: So you say both of these transactions will be included on their chain. That's what I guarantee. But maybe they will fail there. I should guarantee they'll be included at the same time. So that's a lot less powerful. So you can't do bridging, for instance, because bridging is typically okay, you lock some tokens here and then you mint them on the other side. And if you just take that and you include them, both of them, and the locking transaction fails.
00:20:01.526 - 00:20:44.380, Speaker A: Now you've minted token and they've not been locked on the other side, so you've just printed money. So that's obviously bad. But if you can do that, and there's some ways to use that with escrow models or for some other examples that are not bridging, it can be useful. If that's good enough for you, then that's really easy to operationalize because basically you just make a new roll up, you let it sequence all the Cross chain transactions. So you say, okay, this set of transactions needs to be included, this set needs to be included, et cetera. And then all the other roll ups have to follow this single roll up and just obey the rules. They say, okay, this bundle was a transaction for me, so I should include it.
00:20:44.380 - 00:21:13.838, Speaker A: And so that's pretty simple, but it's powerful. We can skip this. I will skip this. So I'm interested in working on this. I know there's all our companies, like working on something similar right now, and I'm trying to talk to them. My interest is building something that's fully open source. Everybody can deploy permissionlessly, make it really easy on the small guy, essentially, because some of the sequencing work is really for the big roll ups.
00:21:13.838 - 00:21:42.874, Speaker A: I want it to be like, hey, I'm just two guy in a bedroom. We work in a game, we want to do our own roll up. It shouldn't require even tens of thousands of dollars, just a few hundred should be enough. It should be easy to do. Just clone a GitHub repo and just do some comments. And there's a lot of people interested in pursuing that vision. And I'm looking for people to build with me to use this stuff, to comment on it, to fund it, that kind of stuff.
00:21:42.874 - 00:21:51.520, Speaker A: So yeah, if you have any kind of interest or any kind of question, if you did not understand anything, but you're interested, just talk to me and yeah, that's just about it. Thank you.
00:22:03.970 - 00:22:21.046, Speaker B: As way to secure the decentralized sequencers and then do they apply to all of these models? How do you see them overlapping with the different ways of doing it? Different kinds of designs that you showed?
00:22:21.158 - 00:22:46.850, Speaker A: Yeah. So in general, there's two roles to staking. One is sibyl resistance. So if you're going to select in a set like round robin or randomly, you need staking to make sure that I don't come in and behave. I'm 10,000 sequencers. The other role is to prevent misbehavior or discourage. I think in a lot of case there's not a lot of safety thing that you really need slashing for.
00:22:46.850 - 00:22:57.720, Speaker A: But it's good to desensitize annoying behavior like oh, I'm not answering. And so encourage liveness, discourage censorship, resistance and things like that.
00:22:58.890 - 00:23:02.390, Speaker B: So does it apply to all of the models?
00:23:02.810 - 00:23:22.240, Speaker A: I think it mostly apply to all the models. You probably don't need it in the auction model as long as you ensure that the auctioneer always pay their bid. Because it might be that they say like they win the bid, but then they don't post the block or they do something invalid. So you want to make sure that in any case they paid what they say they would pay.
00:23:23.810 - 00:23:24.750, Speaker B: Thank you.
00:23:24.900 - 00:23:25.840, Speaker A: Thank you.
00:23:32.610 - 00:23:58.710, Speaker C: Thank you so much. I wanted to ask too, one of the important priority of shared sequencers, that in order not to be like a bottleneck, they skip the execution part, it just be the mechanism for ordering. But when we start talking about MeV, especially like cross chain MeV, does it mean that shared sequencers need to be protocol aware and actually execute transactions to understand where is the MEV?
00:24:00.090 - 00:24:35.220, Speaker A: Yeah, I don't think any design is really going to ever be, you don't execute. I think you always execute. And the reason for that, even if you design something where you don't theoretically execute, there's going to be the proposer builder. Separation where the proposer is the person that's in the protocol and has a right to propose and the builder is the person that's actually going to supply the transaction. Just going to have an off chain deal if you want with the proposer to do that so that you can extract indeed the MEV. I guess it could be possible if you don't have any which for games it's very possible that you don't have any image. Right.
00:24:35.220 - 00:24:37.320, Speaker A: So that would be possible.
00:24:38.010 - 00:24:50.040, Speaker C: I see. Okay, thanks. I was just like wondering if isn't like it's like another bottleneck that we trying to avoid going from layer one to layer two is like another.
00:24:50.570 - 00:25:16.880, Speaker A: Yeah, that's a big problem. That's why this thing don't scale. And the shared one for atomic execution. You really want execution unless you're doing the last model atomic inclusion there you can literally just do sequencing like you said without execution. All right, thank you very much.
