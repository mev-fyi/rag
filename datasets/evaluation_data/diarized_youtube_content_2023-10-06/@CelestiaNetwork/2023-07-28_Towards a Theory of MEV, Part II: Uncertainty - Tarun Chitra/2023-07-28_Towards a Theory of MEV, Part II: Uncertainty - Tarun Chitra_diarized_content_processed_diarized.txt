00:00:00.570 - 00:00:43.480, Speaker A: Um cool. So, yeah. So we're going to talk a little bit about something I've been probably working on for a few years at this point, which is to try to really come up with a good understanding of what the word mev means. And if you try to really formally define it mathematically, it turns out to be quite a bit difficult. But it turns out there's a bunch of different components to it. And this is the second of some number of parts. I'm not sure how many there will be in the end, but I guess these are the old ones.
00:00:43.480 - 00:01:40.002, Speaker A: So basically the idea is that understanding what mev is from an incentive mechanism standpoint involves really understanding many different applications. Right? There is of course the most common type of mev with AMMS, but AMMS, of course, add a ton of different properties that make it easy to understand them. There's mev for liquidations in lending protocols and perpetual protocols. There's mev for front running NFT auctions. All of these things have different sort of levels of understanding for the user. And in theory, right, blockchain is supposed to provide audibility properties, verifiability properties, and other things that have formed to users. So you might say how is there uncertainty that can come from these things? So I like to think about the uncertainties as falling on a spectrum.
00:01:40.002 - 00:02:34.110, Speaker A: And the spectrum is sort of defined by how much the payoffs that users are taking vary and are uncertain. And PBS is aiming to kind of change some of that uncertainty amongst the first four categories which are ordering, inclusion, atomicity, and relaying. So ordering uncertainty is I submit a transaction to a blockchain and I expect a certain payoff. I expect to pay a certain price for a trade, I expect to sell an NFT for a certain price. But my realized outcome is not that inclusion is censorship resistance. Like if I send a transaction, does it actually get in in the next block? And it's slightly more severe than say, just liveness, which is I eventually get my transaction in. I may want to have some time preference on how fast my transaction is accepted.
00:02:34.110 - 00:03:31.790, Speaker A: Atomicity is of course the idea that I can compose two things and it's executed as sort of fill or kill. Like the entire transaction is executed or single transactions executed. Relay, which I'm sure you'll hear a lot about today, is the idea of having a networking layer and some sort of agents who convey transactions who may be more trusted than you think. And I think that's certainly the one part of the PBS system that we'll hear today has some of the incentive problems from many different speakers. And finally, since we're at the modular summit, we should also remember the highest payoff uncertainty for the end user can come from a DA layer. If a DA layer doesn't work, doesn't behave as expected, you can have arbitrarily bad payoffs. Your roll up is not working as expected.
00:03:31.790 - 00:05:10.030, Speaker A: And one question you might say is like what does it mean to move from left to right on this diagram? So just as an illustrative example and this is more a statistical learning theory perspective on this is I have sort of a class of payoffs that's the script. Curly F I have sort of some functional say like a variance or some type of deviation, and I have some sort of notion of the types of uncertainties, and I say, what is the conditional expectation of that functional? And what does it look like? What's the worst case? So one definition of MEB you could use is any sort of mechanism that creates payoff uncertainties where unsophisticated users lose value relative to sophisticated users and the uncertainty is the key to the unsophisticated users expected payoffs. So of course there have been sort of multiple different ways that people have tried to go about this. It's not lost on me that everything in the communist side is only a paper and not a product and everything in the capitalism side is a product and not a paper. So just as a funny aside, but the communism side is things where the mechanism designers or the protocol designers are trying to enforce a lot of constraints on what types of orderings are allowed to be conveyed to the blockchain. And the capitalism side, the blue pill is how do you make a competitive market for transactions. So Flashbots sort of created that initially.
00:05:10.030 - 00:06:35.606, Speaker A: I guess arguably the spam in the ethereum mempool prior to Flashbots was the first version of this and then it sort of expanded and now we see this whole ecosystem built around this, right? So we have the red pill, we have the blue pill. Are there really only these two options? Well, one thing that purveyors of all parties will tell you that hey, our mechanism reduces uncertainty for users, it reduces payoff uncertainty, it's easier for unsophisticated users or it's more efficient for the system as a whole. But neither of these types of mechanisms, neither the full ordering complexity piece nor the economic piece actually can remove these uncertainties for users. So maybe we should take a step back and try to understand what fairness looks like in general. So I found this actually very nice old paper from 1970s from Hal Varian who's the chief economist at Google now on distributive justice and welfare economics and theories of fairness. And the TLDR of sort of the principle of fairness uses the maximum payoff for any particular individual is not so much greater than the average payoff, average welfare of any individual. And that's sort of the maximum for how to measure this type of uncertainty.
00:06:35.606 - 00:07:53.394, Speaker A: I look at the maximum payoff that any user gets, I look at sort of the average payoff people get and as long as those two things are relatively similar, you're relatively fair. And you could argue that the communists, the order fairness things focus on one side of this but they're very payoff agnostic. So they kind of can't tell you anything about whether you're getting the worst case or best case. They just say, hey, well, Validator said you got this transaction first, so I guess I'm putting in first maybe. And the economic mechanisms sort of focus on maximizing payoffs, right? Maximizing revenue that goes to validators, maximizing revenue that goes through the system but it doesn't really capture the externalities necessarily as well as you might think. And so one question is how do you get this balance between maximizing revenue, which obviously can be good for the stability of these systems, especially if they rely on arbitrage, versus making sure the expected welfare for all participants on average is not so far away from the worst case. So one important thing to think about is maybe fairness should be done on an application specific level.
00:07:53.394 - 00:08:56.418, Speaker A: So the analysis we'll talk about is from the perspective of there being sort of fixed universe of transactions. So adversary or malicious validator could have added or removed transactions before we analyze it and the only actions that the malicious adversary can take are reordering transactions. So maybe I have a bunch of sandwich attacks, I'm reordering them so that the most expensive ones are first so that the later ones have to pay a higher price. And the key thing that we'll talk about is we're going to view these as these kind of payoff functions that depend on a permutation and give you a value, a real number. And that's sort of the fundamental objects we're looking at. So in AMMS you have kind of this very smooth payoff with enough liquidity ordering doesn't really change the price impact enough and you can kind of smoothly vary how that looks. But then on the other hand we have liquidations, right? Liquidations are very not smooth.
00:08:56.418 - 00:09:44.546, Speaker A: If the price never touches a certain point, there's no payoff to the user to say a searcher. Of course the price touches a single point, you have a jump and discontinuity in your payoff. And so what we'll see is that these actually turn out to be the fundamental basis of all the payoffs of this form where you're looking at reordering. So let's maybe try to demonstrate this in pictures. So we take an AMM like uniswap a CfMM and now consider a set of transactions. There are seven transactions here and there are four transactions that are price goes up one unit, those are the green bars. There are three transactions that are price goes down one unit.
00:09:44.546 - 00:10:53.194, Speaker A: And as you can see, if I permute the green and red arrows I get different price trajectories, right? And so you can see the first one sort of is like up, down, up and then the second one is up, up down. And at each point you can say given a permutation here's the price trajectory created by this ordering. And so the x axis is sort of the index as the transactions are processed. So one of the first part of the towards theory sequence sort of showed that for AMMS, this thing is actually bounded in a very interesting way in that provided you have a particular liquidity constraint, the worst and expected behavior are only separated multiplicatively by a factor of log N. So that sort of is actually pretty good. It means that realistically, I'm not going to get that much worse of a price even if I'm sandwich attacked. And that paper also showed some examples where people get better prices if they're sandwiches, where someone takes a worse price, but the end trades in the block get better execution.
00:10:53.194 - 00:11:44.670, Speaker A: And so there's sort of this somewhat surprising thing, of course, that these sandwich attacks, these things that the re jewels of the world would call robbery, can actually help the welfare of the system, which is like a totally interesting and surprising result. But the thing is, this doesn't really dictate all the other types of mev, right? It doesn't tell you anything about NFT minting, it doesn't tell you anything about liquidations, it doesn't tell you anything about cross chain. So we'll start with a gadankin, like a thought experiment. And the thought experiment is, suppose we construct this is not necessarily a good DeFi protocol, but this is just one that you can analyze. And so you'll see why this is important. But imagine I have an AMM. I have two nDEX trades.
00:11:44.670 - 00:12:25.930, Speaker A: Half of the trades are plus one, so half of the green arrows, half of the trades are minus one down arrows. And given a permutation, I get one of these charts, right? One of these three things. You can see how like permuting the indices gives you different price trajectories, right? And if the price trajectory touches the red line, the liquidation has a payoff of one. And if you don't never touch the red line, it's zero. So the idea is, this is a very simple thing where I say I give you some trades, I look at all the permutations. If it ever touches a particular point, then you realize a gain. If you don't, you realize a loss.
00:12:25.930 - 00:12:50.580, Speaker A: So what you can do is you can kind of look through the sets of permutations and say, okay, does this one give me a loss? No. Yes. Does this one give me a loss? No. Yes. Does this one give me a loss? Yes. And I somehow found some Mortal Kombat fonts online and I wanted to write the finish him finish her thing. I figured writing liquid data in that font would be fun.
00:12:50.580 - 00:14:07.900, Speaker A: So one very, very interesting fact is any payoff function that you can write in a blockchain that is a function of these reorderings, of these permutations can be written as a linear combination of these liquidation games. So any payoff that means for any application is written as a sum of these different liquidation games. That's sort of something that's very unintuitive, that these kind of very abstract things that you find in d five for people taking leverage somehow are a basis for the set of all payoffs you can get. But the interesting thing is the liquidations are much worse than the AMMS. In the AMMS, we showed this thing where it's bounded by log n, but in liquidations, I can construct something where it's actually the ratio of the worst case payoff to a user versus the average case is o of n factorial, which is obviously significantly worse. Needless to say, that's not really an ideal thing. So that sort of says this idea that the space of these welfare metrics that you're measuring on users can vary quite a bit.
00:14:07.900 - 00:15:42.182, Speaker A: And again, a lot of the kind of things people have made and said that would fix and make things more fair don't solve this problem. Like none of the ordering schemes in the communist column actually can correct this. So you might say, okay, well, what do we do to actually measure how fair these things are? Is there a way for me to say, give me your function and tell me what the difference between the maximum payoff and the average payoff is, and give you some guarantees on fairness? And so we'll see that sort of some analog of a fourier transform is a way to do this. So one thing kind of just as a reminder, or if you haven't seen it, well, what is the traditional fourier transform? So if you think about sound waves, what you're doing is you may have this turquoise curve that represents the analog sound signal you're hearing, but you can decompose it into high frequencies and low frequencies. So maybe high pitched voices and low pitched voices represent the red and blue curves and the fourier transform lets you take different segments, break up the curve into pieces and say, okay, this is the sum of these different components. You might say, what does that have to do with mev? That's like a smooth curve and someone's singing and all sorts of things like that. But the interesting thing is, it turns out all of these payoffs under reorderings you can write as these sums of liquidations.
00:15:42.182 - 00:16:41.514, Speaker A: And the analog of the sinusoid curve, the single pitch, is actually a liquidation. And so the high frequency modes are liquidations where there's very few permutations that can trigger them, very few reorderings, and the low frequency modes are ones where there's many permutations that trigger them. So you can kind of think of it as when I expand out a payoff, I am looking at how constrained I realize that particular payoff. And again, as I was saying, this is sort of a fundamentally important thing. Is that something that we understand relatively easily and that people do in practice, liquidations actually generates a set of all payoffs. Now, this expansion might be very big, right? I have a sum over a subset of subsets of permutations. There's two to the N factorial of those.
00:16:41.514 - 00:17:37.966, Speaker A: So there are many of these. You might need to expand it. But the key is that this is a basis like it represents the core set of all these payoffs. And I put examples of people involved in the algebraic versions of Fourier transforms as pictures. So one question is again, how do we interpret this Fourier transform? What does it really mean? So, one way of thinking about it is the Fourier coefficient f hat, and these are sort of heuristics. There's a lot the Fourier transformers over finite groups is quite a bit different than the continuous one is if a set is large of permutations and the Fourier coefficient or that set is large that sort of says the permutations have the function achieves its average value on those. If the set is small but has a very large Fourier coefficient, you're near the maximum value.
00:17:37.966 - 00:18:18.982, Speaker A: And so the idea is that this is why the spectrum of this thing captures what the maximum and average values are of these functions. So there's a bunch of things you might need to talk about these. We're definitely not going to talk about them. And since it's a Celestia conference, I had to put jacob always says weird aphorisms such as none of these words are in the Bible. He's mad at me, though, for picking this picture. But it's the first thing you find when you Google his name. So you might say, okay, great, I have this Fourier transform.
00:18:18.982 - 00:18:57.598, Speaker A: I can take any function you give me in a blockchain. I can sort of write it as a sum of liquidations. And that's like what the user gets paid. But that's great. But what does that tell me about bounding, the difference between the max and expectation? Many of you may have heard of things memetically like uncertainty principles, but uncertainty principles exist outside of just physics. In fact, they exist in information theory in general as these sort of lower bounds on localization. So if I can squeeze a function and make it very sharp, I can't make its Fourier transform super sharp.
00:18:57.598 - 00:20:07.812, Speaker A: Also. And a very nice thing that turns out, and this is exactly why all of the stuff we're talking about earlier is important is A, liquidations generate all the payoffs, b, the Fourier transform gives you a way of going from your payoff to the payoff represented in the basis of liquidations. So the Fourier coefficients really give you how to expand it in terms of liquidations. And C, the uncertainty principles give you A, bound on the max over the expected value over the max value, which is the difference in payoff for users. So this gives you an explicit way to quantify this type of fairness. And you can kind of think of this inequality as showing you fairness bounded by sort of these spectral properties. I didn't want to go into any more details of this but you can read the paper but I'll just give you a very, very tiny kind of understanding.
00:20:07.812 - 00:21:20.960, Speaker A: But the idea is if you allow a large enough number of permutations there's sort of a notion of the size of the number of orderings you allow is sufficiently large relative to the Fourier transform. You actually avoid the maximally unfair payoffs where the expected value is extremely small relative to the maximum. On the other hand, if your sort of sets of orderings don't have sufficient overlap with your coefficients, you'll get a lower bound on unfairness, you'll always be at least some amount unfair. And this sort of shows any of these types of ordering mechanisms. Whether they're the time based ordering in Arbitrum, whether it's pure fair ordering sequences, whether it's sequencing rules they all only work for certain payoff functions, right? They only work if they restrict the set of orderings to a certain size set of orderings. But that means they distort any payoff functions that depend on orderings with a larger size. And so you get this kind of sort of Shannon sampling limit of like the payoffs are tied to your ordering algorithm.
00:21:20.960 - 00:22:04.680, Speaker A: You can't get a free lunch of offering things like first come, first serve and satisfying every possible payoff function. Which is what this says. The second thing is you could think of this as like a sampling theorem. So these sampling theorems are the most practical time you've ever encountered. One of these is when you've maybe listened to an M P three that sounds really shitty. And then you go get a vinyl and you listen to it and it sounds great. And you're like oh, why does the MP3 sound bad? Well, the MP3 didn't sample enough frequencies for it to resolve correctly versus the analog.
00:22:04.680 - 00:23:05.404, Speaker A: And this is sort of a sampling. It says like for a payoff you have to have resolved enough frequencies for you to be fair in that payoff. So what this sort of suggests is the communist version of the world, the fair ordering type of stuff, things that are sequencing rules is always going to preference certain applications over other applications. We always talk about mev as being sophisticated users taking advantage of unsophisticated users. I would posit that the communist ordering world is sophisticated application developers taking advantage of unsophisticated application developers. All you're doing is changing who the person who's enduring the penalty is because the application developer is defining the payoff function. And if they don't understand how all this works then they may have defined one that's extremely unfair on purpose and now you're forcing the application developer to understand that.
00:23:05.404 - 00:23:48.040, Speaker A: Whereas that's not as true in the unrestricted ordering case. But what this says is application specific orderings. Orderings tied to these functions can be better in practice. And maybe that comes from marketplaces like suave things that allow each application to specify some sets of rules as opposed to having these global sets of rules and yeah, it's much better than sort of some of the useless communist versions of things. So what's part three? Well, everything here is like a formal theoretical thing. There's a lot of N factorials everywhere. Not all of us love sharp p complete problems.
00:23:48.040 - 00:24:46.012, Speaker A: Dot, dot, dot. So the next part is approximation. Can you come up with measurements that you can make on real functions that give you some notion of measuring how much the max and expected mev are up to some error in production and monitor these types of metrics and see see how well people are performing and paper? So with that, I actually finished 30 seconds early. So if any question so cal swap is an example, how do you sort of apply? Yeah. So you gave this point about cal swap. Great point. When I talked about the O of log n thing, calsop is achieving that.
00:24:46.012 - 00:25:14.440, Speaker A: So that's what I'm saying. Log n is not that bad, right? If there's N trades and I'm able to knock it front run, but I may have to pay, in the worst case, log n more in price multiplicatively. It's not that bad. Paying N factorial is much worse. Right? So that's the idea. This is a way of quantifying how much the worst and average are. And the point is, once we can approximate these better, you can run these on live systems and say like, oh, actually, secular payoff is not that fair.
00:25:14.440 - 00:25:32.590, Speaker A: You should loosen the orderings or shrink the orderings, and the marketplaces can then adjust after that's. Anything else? If not, thanks. I'm around all day, so.
