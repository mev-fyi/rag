00:00:04.760 - 00:00:12.392, Speaker A: All right, Jill, welcome to the modular summit. We're here right now and we're going to talk about Espresso.
00:00:12.536 - 00:00:14.396, Speaker B: Thank you. It's great to be here.
00:00:14.498 - 00:00:14.860, Speaker A: Yeah.
00:00:14.930 - 00:00:15.884, Speaker B: Good couple days.
00:00:16.002 - 00:00:21.340, Speaker A: Oh, my goodness. So Jill and I haven't seen each other since five years ago.
00:00:21.490 - 00:00:26.900, Speaker B: Indeed. I've gone through a rebrand since then. Last name?
00:00:26.970 - 00:00:30.640, Speaker A: Yes, Jill. I confirmed. This is Jill Carlson.
00:00:30.720 - 00:00:34.740, Speaker B: It is, yes. Same person. Same Carlson. Now, Gunter.
00:00:35.320 - 00:00:43.864, Speaker A: Yeah. So now you're working on Espresso. Tell us about in what capacity you're working on it and what is it?
00:00:43.982 - 00:01:19.604, Speaker B: Yeah, absolutely. So, Espresso Systems is a company that I'm one of the co founders of. We got started about two years ago. We actually started out building a privacy oriented L1, and we've since pivoted around and explored some new directions. One of our key insights was that Ethereum and the modular future was where it was at. And what we're now working on today is building a decentralized shared sequencer. I'm going to throw out a lot of buzwords here.
00:01:19.604 - 00:01:40.810, Speaker B: We'll break it all down. A decentralized shared sequencer that roll ups can plug into in order to get better interoperability, still maintain great scale and also have the security of decentralization. Again, I just gave you all the buzwords. We should break it down. Yeah.
00:01:41.200 - 00:01:49.292, Speaker A: Before this interview started, we were just making fun of how there's all these made up terms don't we talk about.
00:01:49.346 - 00:01:56.832, Speaker B: As though they're real. So seriously and it will be real. It will matter. It's coming. It's all happening.
00:01:56.966 - 00:02:04.412, Speaker A: But, yeah, modular future, the modular interchange.
00:02:04.476 - 00:02:14.656, Speaker B: Of roll ups, they're all going to be braided together to create one super decentralized network of applications.
00:02:14.688 - 00:02:16.052, Speaker A: Actually, that's the next thing.
00:02:16.186 - 00:02:17.136, Speaker B: Sunny's been meming.
00:02:17.168 - 00:02:18.164, Speaker A: It mesh security.
00:02:18.282 - 00:02:19.508, Speaker B: So that's the next thing you're going.
00:02:19.514 - 00:02:20.564, Speaker A: To be hearing about.
00:02:20.682 - 00:02:25.044, Speaker B: Oh, God. If Sunny's been meming, it, I'll put it in my buzword soup.
00:02:25.092 - 00:02:28.760, Speaker A: Yeah. Just pay attention for the next few years when it pops up.
00:02:28.830 - 00:02:31.340, Speaker B: Perfect. I'll add it to the marketing on the website.
00:02:31.490 - 00:02:39.480, Speaker A: Good. Yes. Okay, so Espresso is a decentralized shared sequencer.
00:02:39.560 - 00:02:40.190, Speaker B: Yes.
00:02:41.120 - 00:02:59.236, Speaker A: Let's break that down. Okay, you know what? Why don't I frame it for our audience? First of all, first of all first of all, first of all, because Ethereum needed to, quote unquote, scale, came up with the roll up concept, which an evolution of plasma, which is real.
00:02:59.338 - 00:03:00.436, Speaker B: Roll ups are working.
00:03:00.538 - 00:03:01.652, Speaker A: Yeah, working.
00:03:01.706 - 00:03:20.996, Speaker B: We've made T shirts for this conference that say Roll ups aren't real. It's kind of like a tongue in cheek riff on a blog post that went viral, I don't know, a couple months ago. Whose blog post was it? John Charboneau. Okay, brilliant. Mind, you should all follow him. But I do think roll ups are real. I go in and use roll ups.
00:03:20.996 - 00:03:27.644, Speaker B: They are. However there's a but however, it does.
00:03:27.682 - 00:03:35.472, Speaker A: Trade off a bit of decentralization because it's not actually inheriting the security of the ETH layer. One.
00:03:35.526 - 00:03:36.592, Speaker B: Right, exactly.
00:03:36.726 - 00:03:48.596, Speaker A: One sequencer you kind of have to trust that sequencer. So now we've kind of reverted back to a trusted setup and all of.
00:03:48.618 - 00:04:38.276, Speaker B: These roll up projects. Firstly, it's a huge undertaking to develop and launch a roll up. Got a lot on their plates, but they all have decentralization on the roadmap. This is not a trade off that is sort of like intentionally being made or that we're thinking about as something that's going to have to stick around for a long time. We all accept that decentralization will happen. And so what we've done is we've gone and said, hey, all right, let's tackle that part of the Ethereum roadmap and build a solution that in our vision of the future, any roll up will be able to plug into and take advantage of and get that decentralization back without compromising on their scale. And then there's all kinds of other interesting things that happen around interoperability when you do that.
00:04:38.378 - 00:04:59.220, Speaker A: Right. So to help myself and the audience create a better framework around this thing so a sequencer is effectively the consensus layer, right. They're the ones that are ordering blocks or are ordering ordering transactions, creating the blocks.
00:04:59.300 - 00:04:59.976, Speaker B: Yeah.
00:05:00.158 - 00:05:20.252, Speaker A: And so the status quo is that there's only one right now. And if you're creating a shared sequencer network that allows anyone to come in and become a sequencer in a trust minimized way, then that improves the decentralization of this whole roll up paradigm.
00:05:20.316 - 00:05:47.060, Speaker B: Exactly. So what we've built is a consensus mechanism and we're, over the coming months, going to start onboarding nodes externally to it. We're still in development. We just released our second testnet, actually, yesterday at the conference. Big news. But we've developed a new proof of stake consensus mechanism. So you can think of it as akin to an l one blockchain.
00:05:47.060 - 00:06:16.656, Speaker B: The big difference is that what those nodes are coming to consensus on is really just the order of transactions that's being submitted to them by the roll up. They're not executing the transactions. It's a much lighter weight thing than a fully fledged blockchain. The execution of transactions is still being done by the roll ups themselves, but indeed it is a decentralized network of nodes. Again, running this consensus.
00:06:16.768 - 00:06:23.552, Speaker A: Okay, so can you go further down a level about the consensus?
00:06:23.616 - 00:06:29.596, Speaker B: Happy to. Okay, don't take me too far into the weeds, but I'm happy to go a level further.
00:06:29.648 - 00:06:48.296, Speaker A: Fair enough. Proof of stake consensus. So there must be a token involved and it's put up as collateral for slashing. And how do the nodes that run the software decide how blocks are ordered? Transactions are ordered.
00:06:48.408 - 00:07:38.910, Speaker B: Yeah. So it's not that different from the proposer role that nodes play on Ethereum today. So if you think about Ethereum today, traditionally we've sort of thought of Ethereum as, okay, you create transaction, the transaction goes into a mem pool. Those transactions then get picked up by Ethereum validators. Those Ethereum validators build a block, they decide what order to put the transactions in and then they propose those transactions. A proposer is selected for each round through this consensus sort of election mechanism, proof of stake. And the proposer then puts that block out to the world, broadcasts it, and that becomes final on the L1.
00:07:38.910 - 00:07:50.636, Speaker B: As Ethereum's evolved, there's this idea of we're getting back into Buzword land, proposer builder separation that has emerged where there are more PBS.
00:07:50.748 - 00:07:55.672, Speaker A: My goodness, we're on day two of PBS day at modular.
00:07:55.756 - 00:08:02.132, Speaker B: That's right, it's PBS day today. It's only fitting that we talk about it wherein you have for at least.
00:08:02.186 - 00:08:05.632, Speaker A: Some subset of speaking of Buzwords I can't. I just can't.
00:08:05.696 - 00:08:06.310, Speaker B: Okay.
00:08:08.220 - 00:08:15.428, Speaker A: Another one. Okay, wait. Okay, Pete. Proposer block separation.
00:08:15.524 - 00:08:18.596, Speaker B: Proposer builder sorry, separation builder.
00:08:18.708 - 00:08:20.360, Speaker A: Biddler separation.
00:08:21.600 - 00:08:45.372, Speaker B: So you have these specialized entities, builders, that come in. And the way I think about it is basically they're super smart about the order in which they put the transactions. And they're smart about it in the sense that they figure out the optimal order to be able to extract value from those transactions.
00:08:45.436 - 00:08:51.396, Speaker A: So now we're intentionally front running, in a sense.
00:08:51.498 - 00:09:35.772, Speaker B: But Validators have been doing this since the beginning of Ethereum. We just were, or at least I was a little bit naive about it. Right. But I think about my first sort of experience of this was trying to participate in the Zero X Token crowd sale and all kinds of games were being played in terms of fee markets and you had to put in a sufficiently high gas fee in order to get your bid in. I got nothing. I was totally naive about the games and the optimizations that validators were even making their transaction ordering. Validators were themselves front running people's transactions and putting in transactions.
00:09:35.836 - 00:09:38.320, Speaker A: Yeah, especially in Ethereum Land.
00:09:38.390 - 00:09:39.452, Speaker B: Yeah. In ethereum.
00:09:39.516 - 00:09:43.320, Speaker A: It's hard to fall for that when optimizing for more validators.
00:09:43.340 - 00:10:40.056, Speaker B: Again, now it's just these specialized entities coming and doing this. And then there's all kinds of methods actually that become enabled to try and minimize the harmful effects of all of this extracted value. Just a whole other conversation. But so you have now builders on the one side building the transaction order. They pass that off to the Ethereum validator set via probably an auction mechanism. And then whoever the elected proposer is on the validator side for a given round basically takes a little kickback from the builders and then takes that builder's, whichever builder has won the auction takes that order and broadcasts it to the network. Now, this is all relevant to us because it's important to understand that when I say that we're building a shared sequencer, I'm talking about the proposer side of that.
00:10:40.056 - 00:11:07.330, Speaker B: We have not built a builder that is going to be super savvy about ordering and is going to optimize the order and extract value from folks, et cetera. We think that probably in the roll up landscape, in the modular world that we're going to, those types of entities will emerge. But today, we've just built the proposer side of that equation. Okay.
00:11:09.460 - 00:11:13.280, Speaker A: Where do the blocks actually get composed and finalized?
00:11:14.580 - 00:12:13.412, Speaker B: Finalization. There are different definitions, I suppose, of finality. But true finality, I would say, is still happening on the Ethereum L One. If it's an Ethereum roll up plugging into Espresso, we have a smart contract ourselves as part of our product that runs on the L One that then propagates the transaction order back to the roll up contracts, et cetera. So true finality is still happening at the L One. But part of the beauty of roll ups, how they operate today, and also of what we can offer, even with decentralization, is faster finality in the form of soft confirmations or pre confirmations, whatever you want to call it, which is something that users of decentralized applications rightfully have gotten used to. But today we're getting there through some kind of shortcuts being made again on the decentralization side.
00:12:13.412 - 00:12:15.796, Speaker B: And those are what we're trying to remove. Yeah.
00:12:15.978 - 00:12:22.692, Speaker A: Okay. So one last question about this before we move into the greater narrative, the modular narrative.
00:12:22.756 - 00:12:23.370, Speaker B: Yeah.
00:12:23.980 - 00:12:54.988, Speaker A: So I tend to wonder if PBS was born out of mev, right. Was there a need to separate what used to be one role, propose and produce a block into two separate roles? Because mev was so rampant in Ethereum land. I mean, it's still like in Tenderman land, it's still one role.
00:12:55.084 - 00:12:55.440, Speaker B: Yeah.
00:12:55.510 - 00:12:55.804, Speaker A: Right.
00:12:55.862 - 00:14:23.820, Speaker B: But I don't think it's something that has sort of emerged by design, necessarily. And I'm not an expert on sort of the history of mev. So someone from Flashbots or something can correct me if I'm wrong here, but my understanding is it didn't emerge by design, but it sort of emerged a bit more organically that these types of more specialized builder searcher filler entities started to crop up. But the fact that we now have this paradigm of proposer builder separation does introduce some ways to potentially mitigate, again, kind of the harmful side effects of mev, the sort of rent extraction from users. Again, I think that Flashbots and others are working hard on these problems to not only create paradigms that will continue to further mitigate mev or the bad side effects of it, but then also thinking about ways that that value can be redistributed back to users. I know the Ethereum Foundation has their own kind of enshrined proposer builder separation. That's another great buzword enshrined of how to start to think about that being more fully baked into the Ethereum protocol.
00:14:24.180 - 00:14:51.284, Speaker A: Right, okay. Just like one last thing about decentralization. Does it at all concern you that the majority, as in over 70, even up to 80% of the proposer tends to proposers tends to be Flashbots or the builder. The builder.
00:14:51.332 - 00:15:20.640, Speaker B: Okay, well, so Flashbots also it's not quite the builder. Flashbots. Again, my understanding is running a relay that various entities can use to sort of play this function or role. For sure, though. I mean, I think I made this joke to someone yesterday, but it's not really a joke. It's actually totally serious. When I first learned about these dynamics a few years ago, I was like, everything I know is a lie.
00:15:20.640 - 00:16:43.624, Speaker B: Is this all smoke and mirrors? Like, decentralization? But I don't think that firstly everything I knew was a lie to begin with, though, anyway, because of the same dynamic I was just talking about where, like, this was happening anyway, it was just the ethereum validators doing it right, right. And that has its own kind of centralization side effects that are arguably worse and harder to make better if you don't have this separation. I think in terms of the role that Flashbot specifically plays, I think that they are great advocates, and I think that, as I've observed so far, anyway, they've done a great job of really living their mission of like, no, we want to mitigate the harmful effects of this. We want to create open systems that are permissionless where anyone can come in and play and like anything else, does that have to start out in a more centralized way, just like roll ups have had to start in a more centralized way to then decentralize? Over time, I've gotten to a place where I'm comfortable with that, but certainly if we're talking five years from now and these are still the dynamics, still.
00:16:43.662 - 00:16:44.888, Speaker A: Like a bunch of single point of.
00:16:44.894 - 00:16:55.884, Speaker B: Failure, I'll be more jaded than I am now. Okay, great. Our next five year reunion. Since we haven't seen each other in five years. Okay, we can revisit this conversation.
00:16:55.932 - 00:17:14.870, Speaker A: Yes, we will. Okay, last question before we wrap up. How does this in turn lend itself to the greater interoperability ecosystem as it pertains to either Celestia DA in general, maybe using IBC to communicate these?
00:17:15.560 - 00:17:58.976, Speaker B: Yeah. So shared sequencing helps with interoperability, we think, quite substantially. It's not a silver bullet, though. You can't achieve interoperability excuse me, just through having multiple roll ups plug into a shared sequencer, you're still going to need, whether it's bridges or other kind of communication protocols, across roll ups. Or builders, in fact, can actually help with interoperability. But what a shared sequencer can get you is great efficiencies operationally. For example, if you're a builder, you wouldn't have to coordinate across five different proposers for five different roll ups.
00:17:58.976 - 00:18:43.536, Speaker B: You'd be coordinating hopefully just with one, the Espresso sequencer. Similar dynamics with bridges and other types of communication protocols. I'm not an expert on IBC, but all of the smart people around me, I think, take a lot of inspiration from it. That's something that we're very interested in. And I think that, again, interoperability and composability and this is something that I think the ethereum ecosystem is really learning from. Cosmos is a huge part of what these permissionless decentralized systems are all about. And today it kills me again that we don't have that in the roll up space because roll ups are real and I'm using them.
00:18:43.536 - 00:19:23.948, Speaker B: But what a pain it is to have to withdraw from optimism and then deposit into ZK sync and blah, blah, blah. And again, we have things like hop protocol or more kind of like centralized bridges or else yeah, these communication protocols, which do help, but it's not there yet again, in terms of the operational overhead of it, the ability to have these things be decentralized at their core and have good sound security guarantees as well. So those are all the types of things that we feel strongly shared sequencing is going to help with in the roll up ecosystem.
00:19:24.044 - 00:19:48.332, Speaker A: Okay. 10,000 foot view, macro perspective about this thing five years from now. Okay, so now 80% to 90%, let's assume, of decentralized apps are their own sovereign roll ups. Why would they do shared have their sovereign roll ups and they're using a shared sequencer layer. Shared sequencer layer.
00:19:48.416 - 00:19:49.784, Speaker B: I like where your head's at is.
00:19:49.822 - 00:20:04.270, Speaker A: Integrated and speaking to any DA layer that is maybe optimally suited for the roll ups needs. And that's what the space looks like.
00:20:04.800 - 00:20:49.604, Speaker B: Yeah. So we do have our own DA approach that's sort of baked into the sequencer. Like, all of the same nodes that are running the consensus on the order are also participating in data availability. But the beautiful thing about data availability and the beautiful thing about the modular stack is it's free to developers to choose to the developers of all of these sovereign roll ups to choose what DA they want if they want to use the Espresso sequencer. We welcome that. You should get in touch, but you can use that alongside using Ethereum for DA or Celestia for DA, and we totally welcome that, and we're building with all of that in mind.
00:20:49.722 - 00:20:50.052, Speaker A: Okay.
00:20:50.106 - 00:20:51.612, Speaker B: For sure. All right.
00:20:51.666 - 00:20:55.596, Speaker A: Yeah. Very exciting. Yeah. Well, thanks for getting on the show, Jill. Thank you.
00:20:55.618 - 00:20:57.916, Speaker B: Chango. Thanks for putting up with the buzwords today.
00:20:58.018 - 00:21:01.900, Speaker A: Oh, yeah, I love it, man. This is a buzword podcast.
00:21:03.600 - 00:21:05.050, Speaker B: Awesome. Thank you.
