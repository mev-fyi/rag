00:00:00.410 - 00:00:39.290, Speaker A: Thank you for coming everyone and we hope you're having a good time at the modular summit today. I'm going to be going over how to run a light node. First I'm going to go into a little bit into the architecture of the different types of nodes and then we'll learn a little bit more about what the light node is used for. And I guess first I'll introduce myself. My name is Josh. I'm a solutions engineer at Celestia Labs. And Celestia Labs is building Celestia which is a modular data availability layer one blockchain.
00:00:39.290 - 00:01:39.424, Speaker A: I was previously a developer advocate and teaching assistant at my last companies or projects. I'm a huge fan of the Good Morning or like Emoji or just the use of GM in this weird crypto world. And then I guess I got my start in something called Developer Dow at the bottom there. And this is a decentralized.org that is really just place for people to grow their development skills in the web3 world. So first we're going to go through what a modular blockchain is, what shared security is, and then a little bit about execution and settlement and how that fits into the picture with Celestia. Then we'll go over Celestia and kind of where it fits into the modular blockchain thesis and then we'll go into how to run your own light node.
00:01:39.424 - 00:02:20.100, Speaker A: So that is probably why you're here. But I just wanted to do some background before we do that. So first, what is a modular blockchain? We're here for the modular summit. You've probably heard modular more times than you want this weekend, but let's define it. Modular blockchain is a blockchain that decouples the core functions of the blockchain as we normally understand it and these are execution, settlement, consensus and data availability. Execution and settlement often get combined into one. But there are designs where these two functions do happen differently.
00:02:20.100 - 00:03:14.150, Speaker A: A good way to think about modularity when it comes to blockchains is the OSI model for software. Basically this is the way that most of the tools that we use today are set up. There's a different layer for each specific piece of the stack. So when you send an email it's interacting with a lot of these different layers. But we don't really see that as a user. But the thing that it helps us with as a user is we don't have a bottleneck in any of those layers of the process. So the way that we're thinking about blockchains and modular blockchains is splitting apart this current structure that we understand and breaking it apart so that people can customize it, make it faster, make it tailored to whatever use case for their application.
00:03:14.150 - 00:03:51.420, Speaker A: And this is what we're calling the modular blockchain era. So historically we have a monolithic era where everything is very tightly coupled. It's all run on the same software and there is basically one monolith. So you can think of this as ethereum or Bitcoin. And in the modular software era we have the Cosmos vision. And the Cosmos vision is actually tied together by the software that actually runs those blockchains. So you can run your own blockchain on Cosmos.
00:03:51.420 - 00:04:47.120, Speaker A: They can bridge to each other but you have to actually set up your entire validator set and security layer. The security layer is at the bottom and that's where consensus and DA happen at least in the modular stack. And what this does is it allows people, instead of using the same software on top it allows them to use whatever they want. And this is something that allows people to actually build whatever they want and with the freedom of choice for software. So let's say in the optimistic view in the future there's a restaurant who's starting up their own roll up to handle orders and then there's some kind of delivery service. They might work together but they could run different softwares and still interact with each other. So breaking it apart a little bit.
00:04:47.120 - 00:05:52.470, Speaker A: The modular stack configuration can be seen in a few different ways. You'll hear a lot of talk about sovereign roll ups where execution and settlement are coupled together and then they basically live on their own on top of Celestia but they can still communicate with other roll ups. There's also a design where there's a roll up where it settles on something like Ethereum, for example. But the execution environment could be its own entire own namespace and those are still going to post data to Celestia. Then we have something called a Celestium where execution happens on the Celestium but settlement and consensus happen on Ethereum and basically call data just gets posted to Celestia instead of Ethereum. And call data isn't something that we really need to post to Ethereum all the time. So that's the reason that you can split that apart and kind of offload a little bit of your data availability to a data availability layer like Celestia or Avail or anything else out there.
00:05:52.470 - 00:07:29.340, Speaker A: I guess looking at the stack as a whole is really important. The Web two cloud stack is very centralized to a lot of data centers across the world and this requires a lot of compute like petabytes of data in all these I actually don't know, a magnitude higher probably of servers in all these places, very centralized locations. But the vision that we have for building this data availability network is to put the power of the freedom of Verifiability in the user's hands so that they can run their own nodes and verify the chain themselves. And do that on something like a cell phone instead of having to run a server in a warehouse somewhere or even running a server at your home. So why Celestia? As I mentioned earlier, we're building a base layer and on top of that we want anyone to be able to build whatever they want. So in the Cosmos vision this is possible to build something custom but you have to basically there's a lot of social coordination to organize all your validators and set up all those validators. There's also a very high cost of maintaining that consensus network and taking a step back.
00:07:29.340 - 00:08:37.570, Speaker A: This is just not really sustainable in the long term if we have a lot of layer ones that are their own islands but they're not connected by a common security layer and I'll get to more about that in a second and why it just doesn't make as much sense in the long run. But what you can do by building on Celestia or another shared security layer is you can scale your execution environment where your smart contracts are without sacrificing throughput. If you've ever interacted with something on Ethereum you probably have had high transaction costs and you might have to wait a while. But if you're able to put your users in their own environment that's just for a game or it's just for a restaurant or something like that. You don't have to worry about everyone else using the same execution environment and it makes things more scalable. You also inherit the crypto economic security of the base layer. It's kind of similarly to the way that people build on Ethereum.
00:08:37.570 - 00:09:13.450, Speaker A: You really just have the security of the network that everyone else is running alongside you to back up whatever you're building. So let's get to the nodes now. I think that's probably why you're actually here. So in a blockchain we typically have two different types of blockchain nodes. The full node. In the normal, I guess, standard design, it downloads all of the data from every single block. And if every single one of us in this room submitted a transaction it's going to download and re execute every one of those transactions.
00:09:13.450 - 00:10:16.586, Speaker A: But in practice this doesn't really make sense because it requires a high you just need a lot of compute, you need a lot of resources and bandwidth which can cost a lot. I think running a validator could cost tens of thousands of dollars a year just in the internet bandwidth that you would need to host it somewhere assuming you're getting good enough connection to run that for the whole year. And what this causes is a minority of users being able to verify the chain and you have to end up trusting something like a centralized RPC provider to say hey, I want to check my wallet balance. Could you please tell me what my wallet balance is? And you just get that response and you trust it. But there's no way to verify that that's actually correct except for trusting the block producer or the validators. And a light node only downloads block headers. It doesn't verify the data and there's a lower barrier to entry.
00:10:16.586 - 00:11:14.882, Speaker A: And what this allows is this is not the celestial light node, but it allows the majority of users to run this node. And at the end of the day, we are looking forward to a future where more users are running nodes rather than just trusting the full nodes that are, in practice, a lot more centralized than something that someone could run on their own. So when we're talking about light nodes there are different types of light clients or light nodes. A basic light client will just check the block header and it will trust the body of the data. A celestial light node will download the header and then it'll take a tiny portion of the data and make sure that that adds up. And basically all of us are going to put our heads together and say that we checked our portion of the block and the data that we think is there. It is there in fact.
00:11:14.882 - 00:12:23.306, Speaker A: So we put our heads together at the end, not literally, but at the end we can say that 99.9% certain that all of the data is there. So if I go and fetch my balance from the core network and it says I have one Tia and then I go and verify that with my light node that the data is available, I have a very high certainty that my balance is one. So instead of having to redownload the entire block like a full node I can just check a small bit of that data along with everyone else and we can basically come to consensus and say that yes, the data is there. So I think it's also important to distinguish the difference between data availability and data storage. Data availability is transaction data that's getting verified for the first time. So you can think of this as the transactions in the mempool or the transactions that are being verified in the current block and then data storage is the way that you retrieve old transaction data.
00:12:23.306 - 00:12:56.194, Speaker A: So on Celestia for example, we still have data storage. You can go and sync the history of the chain. But the real important thing is the data availability. That is the most recent transactions. And we want to make sure that those are legitimate. And by sampling them, we can have a higher degree of trust that or lower degree of trust on the validators and a higher degree of certainty that the data is there. So like zooming out a little bit.
00:12:56.194 - 00:14:18.378, Speaker A: The big picture of this, one of the reasons I got excited about Celestia when I started learning about it was that one of the core fundamental concepts that we are kind of building towards is this idea where more users we have running nodes, the bigger the blocks can be. And instead of like in the monolithic sense, the full node will download the full block and the bigger the blocks grow, the more hardware you need. So you can imagine if the block size on Ethereum doubled or the block size on, I guess, Bitcoin doubled. You would have to scale all of those servers exponentially to keep up with the size of the blocks. But by having more people sampling little bits of data with light nodes in the modular vision the cost increase that happens is much lower. And by having more people sampling blocks, the blocks can grow in size. So, for example, if everyone in the world was running a node, it would be up there in the petabytes blocks.
00:14:18.378 - 00:14:44.550, Speaker A: But obviously that's a pie in the sky vision. I guess I should stop before I go further. Are there any questions right now? Everybody in the world? Yeah, Mustafa. Yeah. If everyone 5 billion people, if they have a cell phone. Mustafa said that, I think you might have done the math. We could have about 12.5
00:14:44.550 - 00:16:01.866, Speaker A: petabyte blocks, but obviously we're not there yet, so we're going to start small. So data availability sampling is something that makes this increase in block size, but minimal cost increase possible. And that's the way that we're sampling little bits of data and then coming back to put our heads together and agree that the data is there. So data availability sampling, it allows light clients to have a high probability guarantee that the whole block is there and valid by downloading less than 1% of the block. And this increases scalability, reduces cost, and allows more people to operate nodes on the network and actually have control and sovereignty over basically the information that they're getting from the chain rather than having to trust full nodes. So, yeah, I think a good way to think about this is with compact disks or CDs and QR codes. For example, these two QR codes use erasure coding, which is the similar mathematical primitive to well, it's what we're using in data availability sampling.
00:16:01.866 - 00:17:04.850, Speaker A: And basically the QR code on the left has a little bit more metadata built in so that if the chance that some of it is missing, we can still actually retrieve it all. And this basically uses really fancy polynomial math to match like an exponential function to the data that's there. And if you are only missing a few pieces, you have a pretty good chance of being able to reconstruct that data. So on the right side here, I think there's about 20% of the QR code missing, but it will still scan and go to the right place as the one on the left. I guess going back to the CD, if your CD is scratched to a certain degree, it can still figure out what was there, but once it's too scratched so if I took out even that much, it's not going to work. Oops, are we still good on sound? Yeah. Sweet.
00:17:04.850 - 00:18:00.470, Speaker A: So yeah, I think these QR codes might go to the docs on how to run a node. If you're interested in learning more about this, I recommend reading Mustafa's papers. I would say first reading Lazy Ledger, which is pretty much the design for Celestia and the previous name for the project. And then there's also a paper written by Mustafa Alberto Vitalik and ishmael on fraud proofs and data availability. And this is also one of the core concepts of how we are building Celestia. So I think I've already touched on all this. But the benefits, like after we know about the nodes and the architecture of Celestia, the three things we're really trying to get out of this new paradigm is scalability, shared security and sovereignty.
00:18:00.470 - 00:19:06.550, Speaker A: So you can see in the shared security section, instead of chain A and chain B, each having their own consensus, DA layers, they're linked together so that they can inherit the same security properties from the base layer. And then sovereignty is really important to us. We don't think it makes much sense to constrain people to the Ethereum virtual machine or the Solana virtual machine or move. But giving them the choice to use any of those or anything else that's out there or anything else that might not exist yet, like a JavaScript virtual machine, we want that to be possible. Because the more tribes we have, the harder it will be to connect all this together. So diving into shared security a little bit more, we have the monolithic. We can think of the left side even as like the Cosmos vision almost, where each of these is their own Cosmos chain.
00:19:06.550 - 00:19:55.510, Speaker A: Maybe this is Ethereum over here, but the amount of security that you can have in your chain is only it's dependent on how much basically it's dependent on the size of your network. And by sharing a security layer, that network can grow, keep growing, without you having to set up your own little one and start from scratch. So you can think of that as like this little circle here. It might take a long time to get to the point where it's as stable as this one. So in the monolithic blockchain design, execution, consensus and DA are often coupled together. And this basically just causes there's a lot of bottlenecks this way. And what we're doing is splitting apart execution and DA.
00:19:55.510 - 00:20:33.986, Speaker A: I think I've already touched on this. It's just another diagram to help illustrate. Yeah, I guess why we're here is to run a light node. So we're going to get to that in a second. But running a light node ensures that more of us can participate in the network and more of us can be first class citizens of the network and not have to trust some centralized entity which could be corrupted very easily by governments or et cetera. So, yeah, more light nodes equals bigger blocks. So let's go ahead and I think I have a duplicate slide.
00:20:33.986 - 00:20:56.240, Speaker A: Sorry about that. We're going to get to running a node now. So you've probably seen things on Twitter of people running them on a Kindle. Wayne Wehner, for example, got it running on a Kindle. I actually saw him this week and it was really cool to see that in person. I actually got one running on a phone I have here. I'll start it up later on.
00:20:56.240 - 00:21:20.850, Speaker A: And this is the goal of what we're doing. We want this to be as lightweight as possible. We want as many people to be able to run this. So maybe one day we can hit the twelve petabyte blocks or something like that. So you might be wondering how can I run a light node and that's why we're here. So let's get started. There's a few different ways to run a light node.
00:21:20.850 - 00:22:08.646, Speaker A: I'm actually going to just hop over to our website now. So if you go to Celestio.org and if we go to the Explorer tab also if anyone's following along and if you're not it's cool. If anyone's following along and you want me to slow down just like flag me. This is going to be like more of the demo portion of the workshop and I think we have time, I might go through the three different ways to do it. So when we're running a light node there's a few different ways. We've already gone through what it is and the first way would be to run it using your command line.
00:22:08.646 - 00:22:58.310, Speaker A: So this is maybe if you're not a developer, you haven't spent much time in your terminal. This is probably going to be intimidating. But at the same time we have a few other options. We have the option to run this with Docker. And what Docker is, is a program that allows you to isolate an environment inside your machine that is separated from the rest of your computer without impacting all of the programs that are already on your computer. And then I also have a light node application that I made for Macs right now and you can in a few clicks get a node started. But I guess the Asterisk here is that it only works on M one and M two Macs right now.
00:22:58.310 - 00:24:11.230, Speaker A: But if you do have a Mac, happy to help you get that started here. So the first thing we're going to do is go over to the docs for run your node via command line and I'm going to go ahead and open a terminal on the other side. If you're on a Mac you can use terminal and I'm just using a different program. I like the way it looks a little bit more so I think it'd probably be good. I zoom in a little bit and right now I'm just clearing off some old folders just so we can see what it looks like when we start from scratch. So before getting set up, this way is going to require some more dependencies if you're on Ubuntu. So Linux we have some commands ready for you to upgrade your local environment and set up some dependencies.
00:24:11.230 - 00:25:04.640, Speaker A: The next thing to do is actually install Golang. So I'm going to go ahead and copy and paste this one thing to keep in mind is we have a few different networks right now and actually Blockspace race is not running. So you'd need to do this on either Arabica or Mocha. And then once you select the network, you can go under and select your operating system. So I'm going to go ahead and install Go and this is going to download and build Go for me so that I'm able to download the Celestia node software and build it. What's that? Yeah, so for Windows, you can't build it on Windows. So you would need to use Docker and I'll go through that one next.
00:25:04.640 - 00:25:43.980, Speaker A: So that can be done on Linux or Windows or Mac. The software just can't build on Windows itself. Is that an iPhone? Yeah, no, you could use a virtual machine. You would have to set an app up that connects to a cloud like virtual machine in the cloud. But there's no is it good? Yeah, I think so. It just got caught on the chair. Oh no.
00:25:43.980 - 00:26:20.280, Speaker A: So the short answer is no. The longer answer is yes, it's possible, but I don't think you'll be able to set it all up right now because you'd need to create a new Ubuntu machine in the cloud and then log into it from your phone and then do all the commands from your phone. I don't know if it's ideal. Yeah, actually I'll get that going here, I'll give it to you. If you want you can start the script and run it. Yeah. So you can get the like yes.
00:26:20.280 - 00:27:11.110, Speaker A: So now I have go. Yes, that's okay. Can you go up? Yeah, I'm going to stay here actually. And then we'll go to this picture here and blow that up a little bit. So yeah, thank you for asking. I mentioned earlier that we have a consensus network and that's where the validators live and we also have full nodes there, but then we also have the data availability network and that's the place we're trying to grow these blocks and get more people running light nodes. So for a light node, we recommend about 2GB of Ram.
00:27:11.110 - 00:27:52.422, Speaker A: It's been done on less, but in order for it to run smoothly, that's the recommendation. You need a single core CPU, so single threaded, and for disk space, you might need 25GB of storage. But this is a little bit probably too high. You could probably get away with like 5GB. The one that I have running on the phone is only taking up like 80% of 1GB. You could but it might be slower. Yeah, but it should work.
00:27:52.422 - 00:28:39.998, Speaker A: Actually, I've never actually tried that. So you could have the software running in using external storage. It is possible. And then for the other types of nodes, the requirements are a little bit higher, but really not terrible. So we're going to go ahead and get back to the other page. So now that I have Go installed, I need to set up the path in my computer and what we're going to do here. If you type in echo dollar sign zero on a Mac or Linux, you can see the type of shell that you're using.
00:28:39.998 - 00:29:19.226, Speaker A: And the shell is the little interface that we're in here. So right now I'm in Zsh. This is just like a little fancier version than Bash. You can see that Bash doesn't have all the fancy highlighting and stuff like that in here, I guess. Not really great examples right there. So once you've done echo dollar sign zero and figured out what type of shell you're in, you can go ahead and set your path for me. That actually wrote it twice, but it'll still work.
00:29:19.226 - 00:30:01.960, Speaker A: So the next thing to do is verify that you have Go installed and we can see that I have the Darwin Arm version. If you actually selected the wrong distribution, it's probably not going to build. There is a chance though that it might build and think it's working, but you want to make sure that the version is correct. The next thing we can do is install Celestian node. We're going to actually build this from the source code. So we're going to build the binary or the software by downloading the code, compiling it, and then it will produce a binary for us. So we're going to go line by line.
00:30:01.960 - 00:30:33.614, Speaker A: I'm going to copy it all at once, but I'll explain exactly what it's doing. We're first changing to our home directory just to make sure we're in the right place. I wouldn't want to be doing this in my writing folder or something. I want to have it in my root directory so I know where it is or home directory. I'm going to then get rid of any old copy that I have of this just to start from scratch. I guess you could also pull it if you wanted to. The next thing we'll do is get clone.
00:30:33.614 - 00:31:00.910, Speaker A: So we're going to download the source code. We're going to change directories into Celestia node. Then we're going to change to the right version. We're going to pick 11.0 RC eight. Then we're going to run a command called Make Build, which basically runs some scripts to build the binary. We'll then install the binary in the location that we want it and then build something called cell key, which is the utility that helps you manage your keys.
00:31:00.910 - 00:31:45.580, Speaker A: So I will go ahead and hit enter there. We're going to see that building should take about 30 seconds or so, depending on the WiFi. And we'll just keep an eye on the logs here to make sure nothing funny happens. And then just like highlighting again, you want to make sure that you have the right operating system selected. I should have pointed out if you're on a Mac, the M one and M two chip is the Apple version and then anything older than that is an intel version. So right now we are at the building Celestia part. Now it is installed Celestia and in a second here we'll see that it's built the cell key as well.
00:31:45.580 - 00:32:26.830, Speaker A: All right, so we're really close to this thing being ready to run. I'm going to go ahead and give us a little bit more space on here for the logs. All right, so the first thing we can do now that we have downloaded it, we want to make sure that the path is set correctly. So this is using the Go path. So we want to go ahead and check that we have 11.0 RC, eight. If we want to really go look at it, we can see the actual commit shaw and we could reference this on GitHub.
00:32:26.830 - 00:33:04.460, Speaker A: Let's say we wanted to verify we're running the right software, make sure nothing's malicious. This is how we know you'll also see the system version. So again, we're on Arm 64 Darwin and we're on Go 1.20.2. So the next thing to do is to initialize the light node and we're going to do the P to P network. That's going to be the network that you've chosen here in the tabs. We're going to use Arabica because it's a DevNet and it syncs a little bit quicker. So we'll actually be able to interact with a node here.
00:33:04.460 - 00:34:13.074, Speaker A: So now I have a new we'll go kind of line by line. It has created a node store in my root directory or my home directory in this location. And we have a new configuration file that's been created. We also have a new key store that's been created. So this is the key to your wallet, the key to your node. You want to probably save this somewhere safe, but what we can do is take this address and go to the Arabica DevNet page and go to the web faucet and I'm going to put my wallet address in there and click Run. And it will be sending me some tokens on the DevNet so that I'm able to post data to Celestia.
00:34:13.074 - 00:34:41.130, Speaker A: So the next thing we want to do is start the node. You'll be running a similar command as the last one. We're just going to need a core IP, which is an endpoint to a core node. And the core node allows us to join the P to P network. So we can basically pull data from those core nodes and then verify the data. We have an example command here. We also have a lot of other endpoints on the documentation.
00:34:41.130 - 00:35:24.382, Speaker A: If you want to try out different endpoints or even use your own, you could actually run your own full node alongside your light node and you wouldn't have to put any endpoint in besides your own. So the first thing to do here, we can just copy the command and go ahead and start our node up. So at the beginning of the logs it's going. To move quick. In the beginning here we're going to see that the DA node started. We're also going to see the network as the chain ID. So if on the off chance you installed the old version on accident and it says Arabica eight or Arabica six or something like that, but it's probably not going to work.
00:35:24.382 - 00:36:16.730, Speaker A: But there's a reason that's just because it's an older network that we don't run anymore. So you can see in the logs here that we are downloading old headers basically in hundreds and we're sampling those headers as we download them. We sample them and this allows us to slowly catch up to the most recent point in time. We can also see that as it goes, we're going to see well yeah, so we're still syncing. It's going to take a while before we see new headers coming in. I'm going to just let this run in the background for now. So this is kind of an optional section on keys and wallets.
00:36:16.730 - 00:37:21.582, Speaker A: You can see more information about your keys. In order to do this you need to be in the Celestia node directory that you downloaded earlier and we're just actually going to list whoops, I'm missing something there. Yeah, there we go. So this is going to list that key just in case we want to see it again. But what we can do now is actually go to a different tutorial. We have a node tutorial and this is in the developer section of the docs. And what this allows us to do is send transactions or post data to the network and we're going to be using something called the RPC CLI.
00:37:21.582 - 00:38:07.582, Speaker A: This is the remote procedure call command line interface. The command line interface is the ability to use it on the computer without needing to do too much complicated stuff. So the way that we're able to this is going to walk through the installation steps again. So I'm skipping down to the bottom so we already have it running and we can get started right here. So this allows us to type in a few commands in the command line and then we can get data back from the network. So the first thing we're going to do is we're going to check our balance. In order to check your balance or run any of these commands, you first need to set an auth token.
00:38:07.582 - 00:39:07.080, Speaker A: This is basically a password so that no one else can use your node to use your funds and post data. It's just a security measure so that your node is safe. There's a little bit more here but it's not crucial to the demo. So the first thing we can do is actually check our balance and we're using Celestia RPC state, so state meaning like the state of the chain. And we're looking for our balance so we can see that we have 100 million UTL, which is 100 Tia. The U is for micro so it's ten to the negative six and then what we can do is go back a little bit up. I do recommend going through this whole thing on your own if you get around to it.
00:39:07.080 - 00:39:58.310, Speaker A: But what we can do is submit a blob. So we have Celestia RPC blob and you can think of a blob as just data. It's arbitrary blob of data getting posted to the network. And the way that we're going to do that is we're going to use the submit pay for Blob method and we're going to put the namespace in Hex form so you'll see the zero X at the beginning and then we'll do the data in Hex as well. And this is the quickest way to just test out that that works on the top here. We're going to see a log soon, maybe not. Anyways, we see the log on the bottom that we at this block height 126,512.
00:39:58.310 - 00:40:27.022, Speaker A: We posted a blob to the network. Now, in order to retrieve this, we're going to need to let the node sync. And this is something that might not be the case in the future, but we're able to retrieve the data from the block. So I will copy the bottom here and then replace the block number with 126,000 and 512. Actually. Okay. We did get the data back.
00:40:27.022 - 00:41:37.378, Speaker A: So look at that. And if we go to convert this back to Hex, I'm going to use Base 64 Guru, because it just works. If we want to convert this back to Hex we can see that we have the same data so the zero x we can ignore that's basically just a prefix but we have the rest of the data as f one f 20 and ending in five f five. So it's the same data. We can see that we just posted it to Celestia and retrieved it. And that's pretty much like, for now, the demo on running it from a binary side, I'm going to go through real quickly how to run it in docker, but if you do want to test out some more of the commands in here, I highly recommend going through this tutorial in full. You can check the balance of another address, you can check your node ID, the account address, you can get headers.
00:41:37.378 - 00:42:29.960, Speaker A: We'll do that real quick. So we'll go ahead and get the header from 126, 512 and this is going to be the full header. That's the thing that light nodes normally only download but the celestial light node is also going to sample the data. We also have some more examples on sorry, should have zoomed in node info sampling stats is something that's useful so we can see that we are not caught up all the way. We're actually only at block 35,000 right now but we were able to retrieve that data. There are some more resources down here. There's a little bit of a bug in this right now, but if you want to play around with it, feel free to check it out.
00:42:29.960 - 00:43:32.458, Speaker A: So going back to this page, I'm going to go ahead and take my node down right now and you can do that with Control C and then I'm going to just clear out this window and CD to go back into my home folder and get rid of that other one. So the next way to do this is to run it with Docker. If you're in here right now and you're going to try to use Docker, there's a good chance the download might take too long. So if you already have it on your computer, all you need to do is start it up and we're going to go to the Docker setup page that's linked from the home page to do that. So with Docker, it's actually only going to take one command. It's going to be very similar looking to the last one. Basically we're giving it an environment variable for node type as light.
00:43:32.458 - 00:44:24.460, Speaker A: We're giving it P to P network flag as Arabica and then we're telling it where to find the image. The image is basically the binary that we built the celestial binary that we built from the source code. And the GHCR is basically you can think of it as like Google Drive for software. So we're going to download that and start with celestial lite Start and point to the core IP again as well as telling it once again that the network is Arabica. So if we do this, this is probably the easiest way to get the log showing. This is also the way to do it on Windows. I'm just zooming back or scrolling back up to see that we have a confirmation that it did Start.
00:44:24.460 - 00:45:00.200, Speaker A: We didn't get stuck in this little intro phase. And the node is syncing. So we can also go into Docker if we want. You can also see the logs in there. That's how to run it with Docker. I guess the final thing here would be if you want to stop it, you can just do Control C again. And then if you run Docker PS, you'll see that there's no containers running so it's definitely been shut down.
00:45:00.200 - 00:46:38.200, Speaker A: So the last thing we could do is run this using something that is called Quasar. This is a Mac app that I built to run light node on a Mac OS machine without having to do anything you don't know how to do. I would imagine most of us have installed a program on here before and I'm going to go ahead and delete it real quick. So if you click Celestial Light Start, it's going to take you to the docs to download this directly and I'm going to go ahead and click Download directly. That's going to end up in my downloads folder. We can actually check once that goes through, we can see the size of it and it looks like it's only 48 megabytes, which is a pretty low amount of small amount of data to have to download to run this. I would imagine the other ways that we did it just took up like maybe five to ten times as much bandwidth.
00:46:38.200 - 00:47:35.804, Speaker A: Now if I go to my applications what? I didn't do it right. Okay, so now that I've dragged and dropped it into my application folder, I can go ahead and double click Quasar. It's going to give me a warning that's asking if I'm sure I want to download this and I want to say yes. If you haven't downloaded software from a developer that shared it directly to you or something off of the App Store before, you'll need to go to your privacy and security settings and then select to allow applications downloaded from App Store and identified developers. So now that I've already done that, we just bypassed a little warning. I'm going to go ahead and delete the old node store that I had on here. And I guess the one thing I can't do here is zoom in.
00:47:35.804 - 00:48:10.830, Speaker A: So what you need to do to initialize the light node is just click initialize your light Node. It's then going to say that the initialization was complete. It's going to show your mnemonic. It's also going to show you your account address. You can click OK and then have a little bit of a safety check here to make sure that you've saved this somewhere safe. So I have a little copy button. You can copy this to your clipboard, put it in a password manager of some sort.
00:48:10.830 - 00:48:48.990, Speaker A: If you're not going to use this node for anything and you're just going to play around with it once, you don't really need to do this. And then the public address is also good to save just so you have like mnemonic or seed phrase matched up with some public address. So now that I've done that, we'll pretend like I saved it somewhere. I'm going to click that I've saved it somewhere safe and now we can start the node. So once we click start the node, we're going to see that the node is starting up. Basically, this is just waiting to come online. When we saw the log version, it's the thing that everything that happens before it says celestial light node started.
00:48:48.990 - 00:49:27.784, Speaker A: So now we can see that the network head see if I can change the resolution. We can see it fine here. We have a few statistics that we can see what's happening with the chain. The network itself is at height 126,000 549. We have caught up in terms of downloading old block headers and bits to sample. We are at about 9200 blocks right now. And then we are sampled up to 7600.
00:49:27.784 - 00:50:38.092, Speaker A: So in order to see the power of our light node just the same way that we did in the command line, we can open the faucet and we'll put in our address there that we copied using the little button in the app and we'll click Run. It's going to take some time. Obviously this has to be confirmed on a block, so I'm going to go ahead and wait about a few more seconds and do that. In the meantime, we can go to the Explorer and look for my account address and then we can see that I have 100 Tia on there. But we want to actually double check that with the light node itself because this isn't being sampled, this is just coming from a full node. So if I check my balance on the node now, if I check my balance on the node, it should show up as 100. It looks like it might have stalled though, so I'm going to stop it real quick and start it and check that balance again.
00:50:38.092 - 00:51:31.264, Speaker A: Cool. So, yeah, I have 100 Tia in this wallet. I'm not going to do much else with this, but if you want to just get a node started, this is definitely the easiest way. And if you have any issues or have any suggestions on how to make this application better, you can do that on GitHub and I have it under a good chance this might move in the future. So just keep an eye out, I guess. And if you want to learn more about the app and what the features are, I have a little bit more in the documentation on the site, so there's some more steps on installation and then troubleshooting in case you need to turn on that setting. Yeah, that's all I've got, I think.
00:51:31.264 - 00:52:12.270, Speaker A: I'm a little bit overtime, but I guess I'm also doing the next workshop. So are there any questions? Yeah, thank you for coming and then yeah, enjoy the rest of the modular summit. Thank you again. My Linux has not played on business, so if I want my Windows, I put Linux on just you have Windows? Yeah. Not Linux. I have Linux, but only on windows. Yeah.
00:52:12.270 - 00:53:06.110, Speaker A: So docker. Yeah, Docker would be the easiest. There's actually really no other good way to run it on Windows, so yeah, Docker and then you need to download Docker and then you can run that command. Yeah, I guess if you go to Docs Celestia.org you can see in the Run a node section we have a quick start portion and in there we have some Docker images. I guess it's also important to note we have a little chat bot that I made. Let's see what it says.
00:53:06.110 - 00:53:42.808, Speaker A: Yeah, okay. I guess to be fair, there is nothing in here that says explicitly you can run this on Windows, so at least it didn't give us a wrong answer. Yeah, there's no Windows in here. Okay, so that's something to add to the docs for me, but yeah. Thank you for coming again. I'm going to probably take like a five minute break I guess some of you are here for Op Stack workshop to be completely transparent. I don't have any slides prepared or anything, so I was just going to go through how to run that.
00:53:42.808 - 00:53:51.060, Speaker A: We're going to run a local DevNet, deploy a contract to it and then spin up a front end, if that's cool with you. Yeah, sweet.
