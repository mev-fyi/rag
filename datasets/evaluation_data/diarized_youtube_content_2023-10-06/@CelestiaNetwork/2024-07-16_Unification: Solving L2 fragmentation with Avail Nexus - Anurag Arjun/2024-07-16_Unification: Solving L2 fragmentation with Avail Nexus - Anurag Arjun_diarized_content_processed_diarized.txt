00:00:02.120 - 00:01:15.070, Speaker A: Okay, quick introduction my name is Anurag. I'm founder of Avail builds data availability scaling solution that implements databloody sampling using validity proofs slightly different from Celestia which uses fraud proofs. Although I'm not going to talk too much on the data availability part today, what I'm going to cover today is solving the issue of l two fragmentation with Avail Nexus, which is a component that we build on top of availability. Some background of avail before I get into the meat of the topic. So what is really avail? Most people might have heard of avail as I myself also said that the base layer is the availability part, which is this state of the art data route layer which implements database sampling with validity proofs. But we don't stop at that because we've built this base layer with validity proofs. We are also able to build something called Nexus on top.
00:01:15.070 - 00:02:18.692, Speaker A: And what is Nexus? Nexus. You can think of Nexus as this permissionless verification hub so that roll ups that operate on top of a whale can also verify proofs, for example on top of Nexus. And that allows us to kind of unify these roll ups and chains together to enable interoperability and async composability between these roll ups and chains. How we do this, I'll get into the details of that, but we do it with this mixture of proof aggregation, ZK proof aggregation and data availability sampling proofs of. We also build have a component called fusion that I will not get into too much detail. You can look up our website for more details, but I will cover some of it from a availability perspective just to kind of start off the presentation. As I've already said, state of the art data availability layer implements data sampling with validity proofs.
00:02:18.692 - 00:03:01.734, Speaker A: So what we do slightly differently is we do not have fraud proofs. We use KZ polynomial commitments to implement this. This is similar to the primitives that Ethereum wants to implement on its dank sharding roadmap. And we've gone ahead and already built that and the mainnet is coming out pretty soon. So that's what Availda stands for. Nexus is this permissionless verification hub that, as I said, employs this ZK proof aggregation technique. So imagine ZK sync proof, execution proof and polygon ZK EVM proof.
00:03:01.734 - 00:03:56.598, Speaker A: We kind of aggregate these proofs together, combine them into a single aggregate proof, and then get them verified on the availability itself, but also permissionlessly on the lite clients. So we also embed Nexus proof verifiers on our data already sampling lite lines that can independently verify these proofs. Optionally, these proofs can also be sent to something like Ethereum for added verification guarantees. When we actually started to build out avail, and this was during 2020. So just to give some background, Awail was actually started within Polygon. I actually previously founded Polygon and Awail started within Polygon back in late 2020. And that was the time when the roll up centric roadmap was taking shape.
00:03:56.598 - 00:05:13.390, Speaker A: And we realized that for the roll up centric roadmap to come true, you really need this infrastructure that would support roll ups at scale. And we looked at all the possible combinations. Of course, Celestia has been doing great work in general, but they started on this roadmap of the fraud proof route and we took a very alternative route. We went on the royalty proof route because we at that time in 2020 when we began efficient Kzgnomial commitments had already where possible. And so we went out route and it has proved very beneficial for us and that allows us to actually build out avail nexus on top because we are able to now combine execution proofs on the roll up side with data availability checks just to complete the avail product suite. We also have a component called fusion security. The problem with each new l one blockchain bootstrapping is that there is limited crypto economic security at the beginning.
00:05:13.390 - 00:06:25.620, Speaker A: And that's the whole reason for the roll up centric roadmap. The roll up movement has grown so much because rollups inherit the security of the base layer. And so when you're building a base layer yourself, you need to be thinking about ways to increase the crypto economic security. So of course we rely on the native avail token for crypto economic security, but we want to go beyond, we want to kind of increase the crypto economic security of the base layer sooner. And so we kind of leverage newer primitives in the space to kind of use alternative assets like ETH, BTC and other tokens to complement or augment the crypto economic security of the base layer. And so you can think of fusion as additive crypto economic security that essentially helps increase crypto economic security or shared security for roll ups in that sense. So, I mean, hopefully I've provided a brief overview of the entire avail suite, but let me kind of dive into what avail Nexus really is.
00:06:25.620 - 00:07:56.790, Speaker A: And I'll just start off with like the brief vision that we have in mind. Like what principles are we building out from? So from a web two perspective, like if you kind of look at how applications work at scale, apps on the Internet really work on microservices like there's a bunch of microservices that talk to each other and do a bunch of stuff. So, for example, if you're doing buying a product on Amazon and when you want to purchase it, it really makes a call to, let's say PayPal or a stripe, for example, and which in turn maybe also talks to a visa microservice, for example. And so all of this is a very asynchronous sort of flow. It happens so fast with minimal latency that you, most users don't even know that there's a lot of complex backend engineering that is going on. And I think what we are able to now do with rollups, hopefully in the next few months and years, is that instead of this whole ux around individual chains and rollups, we are going to get into this phase where there will be more application specific roll ups, which will look more and more like microservices, where you kind of specialize in each service, for example, you specialize in payment, you specialize in payment coordination, for example, specialize in logistics, for example, and so on. And all of this is going to play out in a very asynchronous manner.
00:07:56.790 - 00:08:55.846, Speaker A: And so that's the kind of end goal that we are kind of building all this infrastructure for at avail. This is currently how most interop solutions work in practice today in Web three. So bridging assets specifically is like this sort of mint and burn mechanic. Essentially, there is some message passing mechanism that is implemented and on top of which you implement things like asset bridging, for example, and so on. And generally there is this mint and burn lock and unlock sort of mechanic that is there. And how it plays out if we increase the number of chains is there is a, you have to have a connection between each in the ecosystem. And as we know, because of the bundling of unbundling of, you know, like monolithic blockchains into this whole modular future that we are doing a three day summit.
00:08:55.846 - 00:09:44.450, Speaker A: For in general, the number of chains are increasing day by day, right? Like even today, if you see there are probably 100 odd l two s that are in production and that number keeps on increasing because the trend is that these roll up stacks are commoditizing. It's now very easy to spin up this chains. The cost of spinning up a chain has become lower. And I'm just talking about general purpose chains like EVM and stack, Cairo based vms. The application specific roll ups are still to come into production, like sovereign labs tackle labs, for example. And so the number of roll ups is only going to increase. And so essentially what this is going to look is akin to something like this, right? Like, I mean, it's going to be a very messy sort of a universe.
00:09:44.450 - 00:10:57.260, Speaker A: And so essentially what Nexus, you know, if I want to simplify it down to the very basics, is this concept of Nexus where we kind of aggregate different sorts of proofs from different ecosystems, from different types of roll ups, for example, and then aggregate it into this one single unified proof. And so this of course requires a bunch of tooling that is production ready today or will become more efficient in the coming months and years. But even right today, as of today, we have been able to do a prototype of taking a ZK sync proof and a ZK EVM polygon, ZK EVM proof and aggregate it into a single proof. And this is something that we will releasing probably in the end of this quarter as the MVP. But I. The idea is generalizable. Like we build Nexus to be this generalized verifiation layer which can verify different proofs.
00:10:57.260 - 00:12:09.626, Speaker A: Why we do this is because we kind of want to move away from this world where each chain has to verify each chain's state transition and basically default to the possibility of each chain just verifying this one single proof, because that single proof has already verified the state of other change in the ecosystem. We focus on ZK rollups for now because it's easier to do this orchestration on ZK rollups at the moment. But we are also working on plans to implement or integrate optimistic roll ups. This we are doing with a combination of consensus ZK proofs and storage proofs, and we'll be releasing more details on this pretty soon. But essentially, if you want to take away the idea of what Nexus is, this graphic is really what paints the picture. This is one more representation of what I want to say. So of course there is the proof aggregation component, but there's a lot more components to it.
00:12:09.626 - 00:13:44.580, Speaker A: There is a messaging layer on top of it, for example, and there is various abstractions on top and so on. So Nexus is really this async messaging layer that we build on top of Awlda. So this is like continuation of the initial end vision that we wanted to kind of convey is that we are getting into this world of this multiple chains, and really where we want to go is move into this world where you can kind of do stuff on multiple chains with one single framing. For example, this is initial graphic of what we do. We started with doing grot 16 proof aggregation, but the current version that we are working on is based on risk zero. We are also been looking at working with succint for using their SP one prover, but the Ris zero vm has become pretty performant and so we are getting actually pretty good results from it. So in general, but you can look at the overall architecture as being that each roll up for each roll up stack we build like this adapter that kind of standardizes the information that comes from the roll up and then inputs that into the proof aggregation system and then that's how we arrive at the aggregated proof system.
00:13:44.580 - 00:14:51.366, Speaker A: One great thing that is also enabled by the overall architecture of the nexus is we are able to now do conditional execution. So as with real world web, two use cases, for example, when you're doing like this purchase on Amazon, and if the credit card payment fails, the e commerce transaction gets rolled back and so on. And so we are also able to enable conditional execution and rollback based on timeouts because of the Nexus solution. And so this is like a high level overview of how we do this in general. Please feel free to go to our blog, our docs for more details or reach out to us if you are interested in contributing to this. But this is something that I am very bullish on in general, enabling conditional execution across chains. Yeah.
00:14:51.366 - 00:15:29.778, Speaker A: How it all fits into the avail ecosystem in general is avail Nexus is not an independent solution. It's not a separate layer. It's just a simple sovereign roll up built on top of availability. It doesn't have any arbitrary execution. It's just for the, you can think of it as a coordination roll up on top of Availda. And it works with the availability sampling guarantees. So this is a graphic of, you know, like how you can think Nexus will work out to be.
00:15:29.778 - 00:16:26.462, Speaker A: So we work with all majority roll up stacks to kind of build adapters into nexus so that we can standardize that information to create this unified proof. Yeah, so I'll just quickly end by essentially see what is happening in the roll up landscape. Is that because Ethereum has kept their base layer pretty unopened? So there's been a lot of roll up stacks that have developed. It's, you know, like there's a private market structure to Ethereum's ecosystem in general. Like you keep the bezel unopened. And so there's this bunch of l two teams that have been working on various roll up stacks and they're of course extremely competitive. They've come up with their own implementations.
00:16:26.462 - 00:17:02.802, Speaker A: And also there's a reason also that these ecosystems are now becoming a little siloed. So each ecosystem is going and building their own interop solution. So, if you think of this optimism, has the super chain, Zksync, has the hyperchain polygon, has the ag layer. Sharkware, has its own l three effort. Arbitrum has the orbit effort, for example. And all of these are kind of developing in silos. And so it is really up to a neutral third party to kind of sit in between and connect all of these together.
00:17:02.802 - 00:17:31.540, Speaker A: And that's what we really. What was that? I didn't see. Okay, so, essentially, this is really what we are trying to do in general. So enabling the unification of web3 by enabling model execution layers to scale and interrupt in a secure, interest minimized way. Yeah, I think my time is up. Yes. Thank you.
