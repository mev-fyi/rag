00:00:01.760 - 00:00:25.610, Speaker A: So anyways, my name is Jonah Burien. I'm an investor at Blockchain Capital. I'm also a researcher, and as a hobby and a passion, I've begun to do a lot of MEV research and collaboration with some Yef folks. And I do want to say it's really an honor as well. They're super inclusive. You want to try to put some work out there, you want to do some research, they like take you into the fold, they help you out with your papers. It's really a lovely community.
00:00:25.610 - 00:01:17.298, Speaker A: So the topic of this talk is about protocol MeV capture, and basically new mechanisms that are being designed for Ethereum itself to capture its own MEV, as opposed to leaking it to proposers. So the talk's gonna kind of motivate why this area of research is even interesting to begin with. Go into, I guess, the two high level solutions that have been proposed walk you through a couple of the trade offs and specifically focus on centralization. Trade offs. So that's going to be the topic of the talk. So what is MeV, or where does it come from? Well, MeV is a pure function of having a monopoly on the execution payload. And what I mean by that is execution payload is the object in ethereum that basically you have the ordered list of state transitions of transactions, and the ability to control that object and choose the ordering actually has more value.
00:01:17.298 - 00:01:48.752, Speaker A: There's more value associated with it, namely MeV. One of the classic examples is a sandwich attack where if you see there's 1000 ETH buy, probably you want to put a transaction to buy Eth right before and sell Eth right after. That's a basic the price is going to move, so I'm going to buy right before it and sell right after. But MeV is basically all these games that come with the ability to order and include. That is what MeV is, it's that value. So, I mean, everyone here is familiar with MeV, or do you need more of an explanation? Raise your hand if you're not familiar with MeV. Oh, this is awesome.
00:01:48.752 - 00:02:16.090, Speaker A: Okay, so in today's Mev pipeline, we use PBS. And the idea here is that a validator has a one slot monopoly on this execution payload, but they might not be sophisticated enough to exploit it or to basically milk out as much value from it as possible. So what do they do? They have this monopoly right. They sell it. They auction off the right to kind of use that monopoly. That is what PBS is at the highest level. I have a monopoly.
00:02:16.090 - 00:02:59.070, Speaker A: I can't really exploit it. So let me auction off the right to use it, which means, in effect, where does the value of MEV flow? It ends up flowing the lion's share of it to the validator because they hold the monopoly right, so they should, with proper mechanism design. And PBS does this, gives the validator a lion's share of the MEV reward. So in the current pipeline, there is MEV that exists on Ethereum. The fact that Ethereum turns over monopoly to the validator means that now the validator is basically able to kind of win the most amount of rewards from the MEV, and they're basically soliciting builders to do that. So that's kind of what the current pipeline looks like. By the way, I'm using Barnaby's photos from one of his articles, so I'm very thankful to him because I am not this clean at making diagrams.
00:02:59.070 - 00:03:46.350, Speaker A: But what are the problems with this mechanism? So there are two big problems. The first is an allocation question, and that is this is a normative problem. Why does MeV go to the proposers? Why is that the right sink? Why do they deserve the value? I think a great argument is that applications deserve the MEV, right? They produced it, they deserve it. A lot of applications are realizing this, which is why a lot of applications are being designed to be MEV aware. So you have protocols like Cirella that are doing this for Uniswap, to capture Uniswap MeV and a lot of new lending protocols are kind of thinking about this, but so applications are working on it. Future applications won't leak as much MEV, but you'd be pretty hard pressed to find someone that says there will not be MeV in the future. There will always be residual MeV.
00:03:46.350 - 00:04:16.180, Speaker A: And the question is, should that go to the proposers? And the answer is its value the protocol generates. Probably it should go to protocol holders, namely Ethereum holders. And how do you do that? You have to capture the MEv and burn it, which in effect distributes mev pro rata to Ethereum holders. So that's the allocation problem. Like MEV is probably not flowing to the right spot right now. There's a principal agent problem, and the agent of the protocol is the proposer. And because they're an agent, they basically get to exploit this monopoly.
00:04:16.180 - 00:05:04.708, Speaker A: The other problem is a centralization problem, and this is a very nuanced problem. And I want to talk about timing games briefly. So there's a really interesting work, Fahad and some others on it, but the basic idea is that the longer amount of time you have to exploit MeV, the more MEV you can exploit. And in fact, MEV scales proportional to the amount of time to the power of 1.5. So monotonically increasing super linearly, which means, imagine you're a naive proposer, right? You have your execution payload, you send it out great, you earn some mev. Amazing. But if you're sophisticated, you realize if I just wait a little bit longer to send out my block, I can actually earn more money, and it actually grows super linearly.
00:05:04.708 - 00:05:56.366, Speaker A: So as a result, there's this incredible game you can play, which is, why don't I invest in better networking equipment, co locate with the testers and send out my block at the last second I could, which makes me earn a little bit more money. And there's a nice Tim Rothgarden paper that shows that kind of these minor deltas and average APY you can make as a proposer in the long run, has a centralization vector. Why, you're just earning more money. So people are able to play these games or be the winners more consistently, they can bid higher and all of that, and eventually it'll have a centralization vector. And not only will it be an essentialization vector in terms of who's doing it, but also a geographical one where there's actually an incentive to co locate. So Mev in its current state. Not only is there an allocation problem, but there's a deep centralization problem, and it's actually an exponential centralization problem, which is interesting.
00:05:56.366 - 00:07:02.524, Speaker A: So how do we fix it? Well, the insight that MeV is a function of a monopoly and a principal agent problem can actually help us with a solution. And the best solution to solving a principle agent problem is you sell the right to be the agent, exactly what PBS is doing, just one level higher in the stack. So any new MeV capture, MeV protocol capture solution, what they're doing is saying, huh, what if Ethereum sold the right to being, to proposing the execution payload? So what does that do? It does two things. Number one, it separates the act of constructing the payload from being involved in consensus, which actually fixes some of the time in game questions, though it could produce other timing games, and that's an area of research. But kind of the timing games around with proposing, like you get, you just disintermediated the execution payload constructor from the kind of the typical ethereum validator. So it solves that problem. But what it also does, if you're selling away the write to the execution payload in protocol, what you've effectively done is captured the MEV, the protocol, the same way that the proposer in the current state captures MeV.
00:07:02.524 - 00:07:45.140, Speaker A: Suddenly the protocol captures it, and now the protocol ends up with the MEV and they can burn it, or we can burn it, which effectively distributes MeV pro rata to Ethereum holders. So now the big question is, okay, great, so now we have this insight. There's a monopoly, we want to sell away this write in protocol that will help us capture MeV, help us avoid timing games. But there's a lot of ways to design an auction, and there's a lot of trade offs based on how you design it. So there's been kind of two modems of thinking, well, actually, let me start with naive auction, and then I'm going to kind of go into the two paradigms that we're kind of working with now. The naive way is just run PBS in protocol. So rather than running PBS from the proposer, you literally run PBS at a protocol level that's called EPBS enshrined PBS.
00:07:45.140 - 00:08:24.310, Speaker A: Unfortunately, I'm not going to get into it, but there's a lot of articles on ETH research, so any of those who are interested, there's a lot of problems with it, there's bypassability problems, it creates weird timing games. It's not a perfect solution. So there's been really two dominant forms of solutions that have been proposed. The first is using an auction mechanism so similar to PBS, and we call that execution auctions. And a second idea is using a lottery mechanism, which has been termed execution tickets, which is why on Twitter, if you guys see little ET pictures floating around, it's probably in reference to execution tickets. It's ET. Okay, how do executions auctions work? Quite simply.
00:08:24.310 - 00:09:27.500, Speaker A: Quite simply, what an execution auction is, is I am selling the write to the execution payload for 32 slots in advance. So it's like, oh, interesting, I'm selling the right to the execution payload, 32 slots in advance. So at slot k, the protocol sells the right to be the execution payload proposer in 32 slots. So it's like PBS, but your write comes in the future. And if you think about it from a game theory perspective, how much am I willing to bid for that write? Well up to the expected mev, I can extract in that slot, which means that in this mechanism, and I get into the math a little bit later in the talk, you're basically selling expected future mev, which means that this asset you get, or this right you get, is a function of future mev, and you're basically selling away mev and expectation, which means you're burning mev in expectation, which is very cool. Here's just a little diagram of, again, a Barnaby diagram. Thank you, Barnaby.
00:09:27.500 - 00:10:03.300, Speaker A: Let's get to execution tickets. Execution tickets have a little bit of a different mechanism. In the steady state, there exists n tickets in the pool that people are holding. At every block, one ticket is chosen and they become the winner of execution payload. Their ticket is burnt and a new one is minted and sold. So what's an execution ticket? You have a right to a future unknown block where you're going to be the one that proposes execution payload. So how much are you willing to pay? Will you willing to pay the expected future MeV in an unknown block is basically what that asset represents.
00:10:03.300 - 00:10:48.650, Speaker A: So the core difference between execution auction and execution tickets is that one uses non determinism, one uses. Sorry, one uses determinism and one uses non determinism. So you can, like, look at this slide, I guess, later, but I'm not going to bore you with the math, but if you just do some very, very basic math on this, you basically get some really clean results, which is both of these protocols assuming a competitive environment. And this is a huge assumption and this needs to be studied, but assuming a. Yeah, competitive environment should capture all mev in expectation. So the expected future MeV that is produced by Ethereum, these protocols should be able to capture, which is very cool. And on top of that, another really nice property is an execution ticket.
00:10:48.650 - 00:11:29.652, Speaker A: And the right in the execution auction about equals the value of the average mev per block, which is a nice result as well. You basically are holding onto Mev futures, which is very neat. On top of that, when you're selling away these writes, the write holders the variance they experience. So the variance, because they're not getting this mev, they're getting future meV, is about the variance of just per block mev, which means the protocols are not really introducing too much new variance to the mix. So assuming there will be variance discounts, probably in the pricing and all that, but at least you're not introducing too much new variants. But these results are a little bit more complicated. There's a lot of assumptions baked in there, and I wrote a paper on it.
00:11:29.652 - 00:11:56.308, Speaker A: There's a bunch of papers online, a lot of people have been studying it. I'm actually putting out another paper in a couple of weeks about this. But there's a lot of people have been thinking about this question. This is like super high level illustrative results, but the core idea here is there's a monopoly, you could sell it away. There's two different mechanisms. And if you sell it away, Ethereum can actually captures an MEV, burn it, which effectively gives me pro rata to Ethereum holders. So we only have a minute and a half left.
00:11:56.308 - 00:12:33.368, Speaker A: So we don't really have too much time to compare each, um, each of the protocols. What we can do is compare them along one line, and that is centralization. And what I want to talk about is multi block control. And this is a very interesting question, which is in execution auctions, you have a really weird property which is you can guarantee buy multiple slots in a row. I can guarantee myself, being a proposer, for two slots in a row, so I can buy slot n plus 32 and n, slot n plus 33. And what happens then? Is that a bad thing, a good thing? We don't really have that today. People might win two slots in a row in expectation.
00:12:33.368 - 00:13:04.026, Speaker A: I mean, Lido wins two slots in a row every single day. But to deterministically get it, that's kind of strange. So to understand and unpack that, there's a whole literature, a new literature on multiblock MEV, which is MEV associated with the control of multiple blocks in a row. We have 42 seconds left, so we're going to speed run this. The TLDR is multiblock MeV provides you more MeV than the sum of the two blocks itself. So there actually exists more MEV from controlling multiple blocks. The intuition has to do with the super linearity, won't get into it.
00:13:04.026 - 00:14:02.582, Speaker A: But basically, if you can make more money from controlling consecutive slots, if you happen to win slot 32, you're going to be able to bid more for slot 33 and as a result more for slot 34. So there's actually an endogenous centralization vector in this protocol, which is a very strange thing. We don't exactly have this today, and there's a whole literature on inclusion lists which basically trying to mitigate this. There's a lot of open questions we began riffing on at the beginning, but inclusion list ends up becoming a core new primitive that needs to be there to solve the kind of this new centralization vector. So to sum it up, I know I'm at negative 12 seconds, we, I'm not going to get into these diagrams, but the high level we want to capture MeV and distribute to Ethereum holders. The current state of MEV provides a lot of problems and probably net ends up with centralization. The new in protocol designs are meant to mitigate this and capture MeV.
00:14:02.582 - 00:14:22.272, Speaker A: There's a ton of open questions. ETH research is full of fantastic articles by very smart people, and I encourage all of you to read about it, write about it. It's really interesting, and you might get nerd sniped. So I award you in advance the charts you. I had to give some more context. Oh, I have two more minutes. Oh, damn.
00:14:22.272 - 00:14:57.918, Speaker A: Okay. Well, we spoke about how in execution auctions, you guarantee yourself control of consecutive slots. Well, in execution tickets, you don't. These execution tickets, the non determinism of them, actually protect you from consecutive slots, guaranteed. And the reason is you don't know when you're going to win a slot. And there's a kind of a, I made this little illustrative chart, but I guess, oh, it's really hard to see on the screen. But the idea here is, let's pretend there's 100 tickets in the pool, okay? And you own 20 of them.
00:14:57.918 - 00:15:43.432, Speaker A: So that's this little blue line over here. If you want to win two c. Wait, if you want to win, sorry, I'm reading the chart wrong. If you own 90% of the tickets and you want to win 20 slots in a row, you have less than a 2% chance of doing that. And this chart kind of shows you the percentage chance of winning consecutive slots. And the intuition that this chart shows is even when you own a lion's share of the tickets, getting consistent consecutive control is very difficult. So the non determinism of execution tickets actually protects a little bit from kind of native centralization vectors, which is an interesting result.
00:15:43.432 - 00:16:39.380, Speaker A: So even though execution auctions are so pretty, right, they're so simple, you're just auctioning off something in 32 slots. They're like epbs, it's great. They introduce this weird kind of endogenous centralization vector, whereas execution tickets, even though they're a little bit more complex and harder to wrap your head around, they actually, the non determinism mitigates multi block control in some sense, which is an interesting result, because that's kind of what we see today, right? Like slots are handed out randomly and as a result, we don't see people consistently exploiting multi block meV. But there's a whole, there's a whole other side to this story where it actually, in today's world, people are self limiting and purposely not exploiting multiblocked mev, even when they have the option, which is an interesting phenomena. But I think that's for a different talk. So anyways, thank you guys for hosting me very wild to speak after Vitalik, I have to say, and I encourage all of you to read more in this literature.
