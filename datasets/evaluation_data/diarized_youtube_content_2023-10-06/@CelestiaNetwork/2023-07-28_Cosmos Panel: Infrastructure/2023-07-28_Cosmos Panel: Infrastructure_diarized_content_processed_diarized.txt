00:00:01.050 - 00:00:01.262, Speaker A: Cool.
00:00:01.316 - 00:00:22.910, Speaker B: So we have a small, intimate audience, so everyone will get a chance to ask questions. Looks like cosmoverse, right? Looks like a cosmoverse panel. We had modeler, but it looks like cosmoverse. Yeah. So cosmos infrastructure, I think. I'm going to start with Marco here. Maybe you can explain for the audience that is not familiar with how things work in cosmos.
00:00:22.910 - 00:00:31.650, Speaker B: What's the lay of the land? How. How do you. What are the different part of the stack for cosmos? And who are the builders behind each of these parts?
00:00:31.810 - 00:00:50.602, Speaker A: Yeah. So at the core layer, there's three distinct protocols. So there's comet BFT, currently maintained by informal systems. Above that comes the. I like to call it the middleware and the state machine. That is a Cosmos SDK that is maintained by myself and binary builders. Then we have IBC go.
00:00:50.602 - 00:01:16.610, Speaker A: And this is like the third component of the core layer. I like to call it the kernel layer that is maintained by interchange gambah. And then above that, we have a few application layers. So we have Polaris, ethermint, cosmosm, some moviem, stuff like that. But I'd say, like, the three core layers that are fundamental to the interchange stack would be comet, BFT, IBCGo, and the Cosmos SDK.
00:01:17.190 - 00:01:25.042, Speaker B: And Jack, I think you have a lot of thoughts about you guys, especially Marco and Jack. You worked on something called the Cosmos Builder foundation.
00:01:25.106 - 00:01:25.478, Speaker C: Right.
00:01:25.564 - 00:01:34.586, Speaker B: And you have thoughts about the way know funding for all the different part of the stack should work in cosmos. Maybe you can share a little bit of your thoughts on that.
00:01:34.688 - 00:02:20.902, Speaker C: Yeah, I think right now, the interchain foundation is doing most of the funding, and that's not a long term sustainable path. This is kind of a classic open source funding problem where there's a lot of economically viable businesses, essentially, that build on top of this core software, and we need to find a way to get those folks to help contribute to the maintenance of the core stack. And I've been talking to a lot of folks for a long time, but that's kind of the fundamental friction point there is. There's folks out there who want to do it. There's folks out there who have the money to do it, but there's nowhere to put that right now. That's sort of credibly neutral and sort of made up of a council of the core builders and. Yeah.
00:02:20.902 - 00:02:26.106, Speaker C: Still looking for folks to work with on that. Been chatting with skip quite a bit about that. Yeah.
00:02:26.128 - 00:02:28.122, Speaker B: So skip actually is kind of a new project.
00:02:28.176 - 00:02:28.394, Speaker A: Right.
00:02:28.432 - 00:02:38.670, Speaker B: Marco and Jack have been cosmos for a while. Was there for you anything like surprising or obvious that cosmos should do to kind of improve the current model that we have?
00:02:38.740 - 00:02:40.314, Speaker D: The current model of funding.
00:02:40.442 - 00:02:45.010, Speaker B: Of funding, yeah. And the way work is being done in general to build the stack.
00:02:45.670 - 00:02:49.630, Speaker D: Yeah. I don't want to be too critical.
00:02:49.710 - 00:02:54.050, Speaker B: But you should be very critical. It's a very small audience. You can say whatever you want.
00:02:54.120 - 00:03:50.902, Speaker D: I mean, we started out by basically learning tendermint, and tendermint was a very complicated code base for us to learn. And we quickly realized, one of the things we realized quite quickly was how the stack is meant to be modular, meaning AbCi is sort of this abstraction that is outside of tendermint. We realized that tendermint and the cosmos SDK are actually quite coupled in many different ways. And I think this was found out by other teams afterwards, like Polaris, et cetera. And so I think one thing that could be done is making those different pieces of the stack a little bit more accessible. I think there's been really good work that's sort of happening behind the scenes here, but tendermint basically becoming more comprehensible and easier to understand, more modular, more easily easy to add things to and take things out of. We started by having to modify tendermint and build this thing called Mev tendermint, which now we're moving sort of away from.
00:03:50.902 - 00:04:11.610, Speaker D: But basically we try to build in basically an ordering mechanism into the mempool, which didn't really exist. It was sort of this FIFO based system, and it was very difficult. It took a long time, and I think it was tough to modify the core stack in that way. And we learned a lot through that, and I think hopefully shared a couple of those things with core builders.
00:04:12.430 - 00:04:20.538, Speaker B: Sean, I think you were part of the initial tournament team. You took part in some of these decisions, right at informal.
00:04:20.634 - 00:05:18.258, Speaker E: So while I was at informal, we spent a lot of work trying to position the software of tendermint as a core consensus engine in a position where it could be, like, testable. I think it was very hard to make significant changes. I think that tendermint, when it was conceived, was like heads and shoulders above any sort of alternative. And since then, I think the industry has had a lot of time to catch up while tendermint innovation has really slowed. And I think we could attribute that to some of the complexity and the architecture there. Coming back to your original question about funding and what role does the capital flows have to do with this, which I think is sort of the more interesting question. We have to look at where the money came from and I think most of the money that funds most of the core infrastructure comes from a single entity, right? Which did not intend to raise enough money for that when it raised it.
00:05:18.258 - 00:05:32.040, Speaker E: So, like, Tenderman raised like 16 million, that ballooned to like half a billion dollar treasury and then spent years reconfiguring itself to be capital efficient with that much money, which I think is a very hard thing to do.
00:05:32.570 - 00:05:33.830, Speaker A: Still ongoing.
00:05:34.730 - 00:06:12.466, Speaker E: Still ongoing. And I think fundamentally, it's like, this is at the core of the broken model, because there isn't really any sort of genuine economic surplus that you could sort of redirect to places that are more productive or take away from places that are unproductive. So broadly speaking, most of the capital that is allocated is unproductive. So that's like the base level, right? That you don't know. There's very few profitable protocols modulo, the cosmos hub. Most other protocols are very unprofitable. So it's very hard to say, like, oh, as an ecosystem, we're going to let those ecosystems die or let those chains die or redirect it where it needs to be.
00:06:12.466 - 00:06:23.960, Speaker E: So I think what's really missing is a new way of doing surplus recycling and not just funding a new entity, a new centralized entity, or a set of entities with vc money or whatever.
00:06:24.410 - 00:06:38.620, Speaker B: But still, the ACF has like $300 million right at the moment on the books. If you were the president of the ACF or the managing director of the ACF, what would you change on day one?
00:06:41.950 - 00:07:17.000, Speaker E: I would send it all to a burn address and then see if the ecosystem was meant to survive. Or I would take the cosmos hub and I would inflate it maybe like $1 billion, into a fund that was governed by a multi sig of people who could get easily unelected. It could be jack or whatever, I don't care, the initial version. But what's important is everything else should go away. Any capital that is held underneath a body which is not elected in a transparent way should probably go away.
00:07:17.610 - 00:07:59.334, Speaker A: It is kind of like in cosmos and all these ecosystems, it's always been like, everyone, we license the software Apache, we stand by Apache. Everyone can take the software, do whatever. It's a pro and a con, because if you license it some other way, they're not going to come. Users aren't going to come. And so it's like a double edged sword there. But the other part is, from the get go, no one ever really thought of, oh, what will be the funding story in five to ten years? And so no one really built that narrative of like, oh, we should build a narrative of when there's a launch of a chain, the team coordinates, assists the team, helps them launch, and then they get an allocation, or they get some sort of continuous allocation to help align roadmaps. That was never thought.
00:07:59.334 - 00:08:16.474, Speaker A: And now it's kind of like, I mean, we're having this conversation not only in the cosmos ecosystem, in ethereum, polka dot, literally everywhere, that, oh, raising into a single foundation off a single ICO is a good idea for the first five years, but if you want to last like 100 years, you're not going to be here if that's the only plan. Yeah.
00:08:16.512 - 00:08:24.646, Speaker B: Because if you hear composable finance talking about parity and the way things work there, it doesn't seem to work much better than we work in cosmos.
00:08:24.678 - 00:08:42.914, Speaker C: With the ICO, I think there's like an age old startup montage. Raising too much money will kill your company just as surely as not having enough money. And I think that there's a lot of lessons that we've forgotten from the web two world and kind of the classic startup world and blockchain. And I think that that's a really key one.
00:08:43.112 - 00:08:46.918, Speaker B: So you, Jack, if you were president of the ICF, what do you do on day one?
00:08:47.004 - 00:08:49.462, Speaker C: I like Sean's idea. That's real base.
00:08:49.516 - 00:08:50.440, Speaker A: Burn it all.
00:08:51.690 - 00:09:21.326, Speaker D: I also think we need to stop hating on developers who want to monetize their software. The ICs nine nine nine stuff is kind of like cringe to me because Larry put a lot of work into that and it seems very good, but people sort of are saying to him, well, no one's going to use it because it's not open source, and you get a grant for it, but then, okay, the grants expired, then money's out, and then it's open source and you can't make any more money off of it. It's like, why would you do this?
00:09:21.428 - 00:10:31.650, Speaker C: I think for a lot of reasons. Application. So I agree with you, we need to get developers paid more. But I think the ICs nine nine one and IBC application protocols are kind of a special case because really, in order to do that, you have to bootstrap a bunch of chains that do it in order for it to have any value, and then there need to be apps built on top of it. But how do you bootstrap that without giving it away? And then at what point are you going to start charging for it? And there's no real built in mechanism to be able to do that at the application protocol layer. The light client layer, I do think is a much better layer to add those types of BSL licenses and to allow applications to have certain exclusivity periods or put in riders where there's a certain amount of public good funding that needs to be reached before those things become fully open source, because it kind of, like, forces the settlement layer narrative, and it allows that chain a chance to help build some IBC routes through it, build those trade routes and bootstrap them, whereas the application protocol layer, there is that bootstrapping problem that exists. So, yeah, the Larry thing is tough.
00:10:31.650 - 00:10:36.374, Speaker C: I love Larry. I really like ICs nine nine nine. I'd love to use it more, but.
00:10:36.412 - 00:10:40.120, Speaker E: It'S, yeah, Larry should be the president of the ICF. We should just change the burn address.
00:10:40.570 - 00:11:42.774, Speaker A: But if you go down that path, then it's like, I like to think of early parody. They license everything like GPL and substrate was licensed, GPL and enterprises would come and just be like, hey, can you please relicense it to Apache so we can work out a way to use it? And I think the cosmos SDK has a ton more users that we actually don't know of that I find out daily that it's like, oh, I was talking with wormhole and jump, and they have a private Cosmos SDK chain for their signature process and stuff like this. And it's just like, people use it because they don't have to worry about this license issue. But then it's like, the downside is, like everyone's been saying, everyone uses it, but no one ever thinks back, like, oh, we have to give back because it's sustainable. But it might be that if the ICF were to say, every year now the budget's going down and down for these products, and it's like, if the ICF says, oh, we're cutting it off at this number, whatever else is more you have to get from anywhere else. I think teams might start showing up and being like, hey, we need this feature. We want this feature.
00:11:42.774 - 00:11:52.314, Speaker A: We want this feature. And if the teams are like, sorry, we're getting paid only to do this, then teams are like, okay, we're happy to contribute. And then that kind of bootstraps the conversation.
00:11:52.362 - 00:12:06.738, Speaker B: An interesting thing about the BSL license is you can set a cap beyond which you go full open source. So, for instance, you could have some software developed under BSL. And then each chain, we need to contribute some amount, and when that cap is reached, it becomes fully open source for everyone to use.
00:12:06.824 - 00:12:11.110, Speaker C: I like that model a lot. That's what we're working on with duality. I think that's a great idea.
00:12:11.260 - 00:12:33.440, Speaker B: Yeah, I think more people should be using that. So, talking about duality, and I think you're talking about the roll up stuff with duality. So let's talk about that and how we make IBC roll up friendly. We are at the Celestia summit here. Jack, for you. You are the IBC guy. What's needed to make sure that rollups use IBC between themselves and also between app?
00:12:34.370 - 00:13:22.182, Speaker C: You know, we need to build out the infrastructure. This requires funding and it requires teams. I'm sitting here talking to the dimension guys, and they have a working fraud proof IBC implementation, which is really cool seeing that more broadly adopted. But I think the biggest problem with the roll up model right now is there's no overall consensus on what the final architecture for these roll ups is going to be. Each of the architectures that's been developed by these different companies, each has their own sort of like unique cryptographic assumptions that you would have to bake into a light client. So there's, I think, a two pronged approach to this problem. One is we've done a lot of work in the core code bases, IBCGo, IBCRs, relayers, both Hermes and relay, to help abstract away the sort of like, cosmos specific assumptions.
00:13:22.182 - 00:14:16.430, Speaker C: A lot of this work has happened over the last year, helping bring the composable finance work to market. And I think we're going to do three or four non standard IBC integrations this year as a community. Next year we need to do 30 to twelve to 30, probably. We need to mini x this capacity, this ability to bring IBC light clients to new places. So I think that's one part of it. But I think also building in better relationships with teams like wormhole, Hyperlane and Axilar, where there's these committee based solutions that might have different transport layers, but we can build shims or other compatibility mechanisms to allow developers to use those IBC interfaces anywhere and sub in different transport layers, because that's fundamentally what they are. And those committee based solutions can go places that a light client based architecture can't a little bit quicker.
00:14:16.430 - 00:14:22.270, Speaker C: And we've always thought that they're going to be hubs, and those are potentially hubs.
00:14:23.250 - 00:14:37.682, Speaker B: I want to come back later to the hyperlain stuff because that was an interesting topic last week or the week before that. But first, the skip team has been working. I think you guys got a research grant from Celestia on the MEV stuff.
00:14:37.736 - 00:14:41.414, Speaker D: How do you know about that? Yeah, we're working a little bit, yeah.
00:14:41.452 - 00:14:41.942, Speaker A: Okay.
00:14:42.076 - 00:14:45.846, Speaker B: Well, what is it about? Do you know about that, or do.
00:14:45.868 - 00:14:48.594, Speaker D: You not know about that, about IBC.
00:14:48.642 - 00:14:54.460, Speaker B: Or about the sales tax grant? Is there something there, or is it just something I made up?
00:14:54.830 - 00:16:03.326, Speaker D: We are working with them. On the research side, I think the most apt thing there is less about MeV, but more about sort of IBC and this idea of these APIs that we put out, where the idea is like, no matter what bridging protocol you use, if it's hyperlane, if it's layer zero, or whatever else it is, or if it's IBC, of course, you can do these things in one click, right? You can transfer, you can swap, and it's not a complicated pathing problem. And so a lot of that work has been helped out by PFM and IBC hooks, one by strangelove and the other by osmosis. But they allow you to just mesh together all of these different bridges and just have these workflows be extremely simple. And I think in the rollup land, this talk that I gave before, but in roll up land, that's going to become a lot worse, I think. Right, like, you're going to have so many different roll ups, they're all going to have their own gas tokens, they're all going to have their own routing protocols, and you just want to create an abstraction above that. And I think I'm going to say the word, but I also think intents might be helpful here.
00:16:03.326 - 00:16:09.730, Speaker D: CC braps. But there needs to be a solution there to help fix that.
00:16:09.880 - 00:16:27.270, Speaker B: Right now, from the Cosmos SDK side, there's already stuff like rollkit, for instance, where they're taking the Cosmos SDK. They are essentially removing comets from the Cosmos SDK. Can you talk a little bit about that, how you see rollup framework evolve and how they compare to the SDK.
00:16:28.170 - 00:16:57.090, Speaker A: So the direction we're going with SDK is we want to abstract ABCI away from the user. We want to abstract consensus engine away from the user. It's already kind of there. And kind of like when you're developing an SDK application, EVM or no EVM? Cosmosm. No cosmosm that it's like either a roll up or a chain. And so we've been working with the roll kit team. They have a lot of ideas in terms of different block construction, different header construction to enable different use cases.
00:16:57.090 - 00:17:49.666, Speaker A: What we're really learning the past months is that ABCI is really limiting in what you can build with it just because it provides these limitations, you can't access the p to p layer. It has this mempool. People want to do different things with the mempool, but you have this app side mempool now, and now it's kind of like being conflated on what is app, what is the consensus engine, what the app should take care of, and what the consensus engine should take care of. And so, going forward, we're working with a few teams roll kit dimension and just talking on what they need to enable a better roll up future. Just so we are as competitive as everyone else, and also just, like, rebuilding the software in a way that, okay, roll ups are today. What is tomorrow? If tomorrow is something else, are we ready? Can we take advantage of that? And so we're just taking the software, like, basically almost rewriting the software to enable mean.
00:17:49.688 - 00:18:04.038, Speaker C: Marco, the way that you've described it to me is the SDK is this layer that helps coordinate between different consensus mechanisms and different security mechanisms on the bottom and then different vm layers on the top. Is that kind of how you describe it?
00:18:04.204 - 00:18:20.940, Speaker A: Yeah. The SDK is kind of like this middleware kernel, and then the modules, like, in EVM world, we can kind of call them, like, pre compiles, and then those are, like, their kernel level APIs, and then the application layer will be your EVM cosmosm. Move whatever you really want.
00:18:22.290 - 00:18:33.522, Speaker C: I just think that that is clearly the final architecture for application or VM framework. And the work that you guys are doing right now, I just think it's awesome.
00:18:33.656 - 00:19:03.638, Speaker E: Can I ask a question? How, Marco. No, Sean, but how do you design, like, a general framework for roll ups when there aren't any roll ups, and they're still like, I don't know how roll ups are going to work. I've spent a lot of time looking at shared sequencers, a lot of time studying, like, across fuel, across roll kit, all the roll ups that will be right. What are the core primitives that they need, and how do we embed that in the SDK?
00:19:03.734 - 00:19:04.380, Speaker B: Well.
00:19:06.750 - 00:19:42.198, Speaker A: The sequencer, the roll up aspect of it is like a replacement of the consensus engine. And above, we're kind of, like, meant to only really worry about, here's a consensus interface. If you do the consensus interface, we can just mimic ABCI plus plus prepare, process, vote, extension, and finalize. And then it's just like, the roll up has the option to implement it as no ops or not. And so it's less. So, like, what is a roll up and what is not a roll up to the application, to the application. It's just a distributed system state machine, and underneath it can be comet, it can be whatever.
00:19:42.198 - 00:20:07.358, Speaker A: And then in the future, the idea is like, okay, so we kick started this runtime working group, and now we're doing some research on different consensus interfaces. So you kind of have this immediate finality that is tendermint. Then you have roll kit, you have longest chain, you have rollups, you have longest chain, and then you have this hybrid consensus world. And it's like, what is a consensus interface that kind of fits these worlds to enable users to do really whatever they want?
00:20:07.524 - 00:20:48.246, Speaker C: I think. Sean, just to your direct question, while we don't have a lot of idea what rollups are, are they real? We don't know what we do have a lot of idea about, and a lot of prior art on is what application developers want need. And I think that fundamentally, the whole purpose of roll up is to decouple the application development experience from the other concerns there. And I think that we do know what application developers need. They want to write in the programming languages and paradigms that they're used to. And the closer we can come to providing those in an ergonomic way to as many users as possible, that's how we get the adoption on the developer.
00:20:48.278 - 00:21:01.182, Speaker D: Side also, just curious, when Polaris was sort of being developed, did that inform any, or I guess bring out any sore spots in the SDK that, oh, 100%.
00:21:01.316 - 00:21:40.074, Speaker A: I'm curious about those. No, it's perfect. We can all go home today. The SDK is perfect. You don't need to build any more mean like they're really pushing. So the SDK and comet in the initial design, and if you talk to Jay, if you talk to like, it's meant to be this modular software that raised too much money and then all of a sudden slowed down and then they needed to launch and they needed to glue things together real quick. And so we're kind of like going in that original, but it's like Polaris is pushing the modularity of the software to the brink, and we're learning a lot, and the feedback loop is very close with them.
00:21:40.074 - 00:22:08.630, Speaker A: Just because they're a user that we're considering, a power user that will push the envelope of the SDK as a middleware. They just had their workshop devs giving a talk, and they have asynchronous pre compiles for their EVM and so on. And so all this stuff is really pushing it. And then it's like Dave, we hop on a call every two weeks, and he's like, okay, these are the issues. He gives me a list of, like 50, and then we try and fix at least 20 of them before the next call. And then the list just keeps growing.
00:22:09.450 - 00:22:10.754, Speaker B: One more question for you, Marco.
00:22:10.802 - 00:22:18.490, Speaker C: Is that Dave from Osmosis or Dave from Barrachain? And does it even matter? Do you just add them together and just call it all Dave?
00:22:19.230 - 00:22:30.374, Speaker A: We just aggregate them? Yes, sometimes, depending on who you talk to, it could be a ZK proof.
00:22:30.502 - 00:22:32.220, Speaker D: Except bear chain isn't real.
00:22:34.110 - 00:22:43.470, Speaker B: So do you see the Cosmos SDK to move? So I like the way you describe the kernel and the vms on top, but do you see the cosmos SDK becoming itself like a roll up framework?
00:22:45.730 - 00:23:19.606, Speaker A: At the end of the day, we want it to be more of a library, and today it's roll ups. People are raising millions of dollars on the phrase in their pitch decks of roll up. I am a roll up. And so it's like, yeah, sure, it's a roll up SDK, and then maybe tomorrow it's a blockchain and everyone's back on the blockchain sovereignty. Like owning your own DA and everything like that. And then all of a sudden, okay, we want it to be where the application developer can decide between a roll up or a blockchain up until launch. So basically they're building their state machine.
00:23:19.606 - 00:23:52.230, Speaker A: Everything stays the same. They're just deciding between finality or longest chain, and then all of a sudden it's like, okay, we want to be a roll up or we want to be a chain. Because maybe it's like they raise money to be a roll up, and then all of a sudden they're getting a lot of hype. They're getting a lot of users on their testnets and stuff like this, and they're like, okay, maybe we can own our own sovereignty and our own da, and let's see how that goes. Because at the end of the day, if it doesn't go well, they can also roll back to be a roll up. I mean, we're seeing this with Crescent is also kind of like playing around with the idea of being a roll up instead of a chain.
00:23:52.730 - 00:23:55.970, Speaker B: If it turns out roll ups aren't real, they can come back to being a chain.
00:23:56.050 - 00:23:56.834, Speaker A: Exactly. App chain.
00:23:56.882 - 00:24:08.374, Speaker B: Good deal for them. Sean, you're going to be my tournament comet expert. We. Because you have experience in that, how do we make comet more roll up friendly? The same way we do with IBC.
00:24:08.422 - 00:24:10.246, Speaker E: And rewrite it in rust.
00:24:10.438 - 00:24:11.482, Speaker B: We write it in rust.
00:24:11.546 - 00:24:53.818, Speaker E: That's step one. I think at this point, I've thought about this a lot, and there's one idea of making incremental progress on sort of the core components, like block sync state sync, the p to P layer, these sorts of things, rebranding it. I think what would be interesting, and a good sign of commitment to the future is if we actually put together a little bit of money. It doesn't have to be that much all at once. Maybe 5 million to start. And we actually just pot commit to building a second implementation of the core client that's supporting like, $100 billion of value. I think probably 5 million is enough to start, and I think it'll probably cost 20 to finish something like this.
00:24:53.818 - 00:25:19.860, Speaker E: And I think you could build in different incentivizations. Maybe it's mev, maybe it's relayer fees. I don't know. There's probably a bunch of ways to sort of create a sustainable model for when this infrastructure has product market fit. You should probably not monetize infrastructure before it does, but when it does, it should be monetized. And, yeah, I think it'd be interesting to start from scratch, because it's like Tenderman's, what, ten years old in crypto time, which is. No.
00:25:19.860 - 00:25:24.670, Speaker E: Yeah, it's ten years old, which is 100 years old in crypto.
00:25:24.750 - 00:26:16.386, Speaker C: Yeah. I think whether it's in rust or another programming language, what we fundamentally need is better modularity. Out of tendermint, we accumulated users before we able to make the breaking changes that we needed to really have the flexibility in the core software. And if you go look at the one function that is the state machine with the giant switch statement, you see all of the pieces of storage and P to P and Mempool just plugged directly into that function in a way that makes it literally impossible to pull out the different pieces and work on them individually. If we had a more modular tendermint, then we could allow users that want to continue to use the core protocol to do it, and then allow better experimentation at each of those layers in an independent way where it doesn't block on a core team. And, yeah, I've got a lot of thoughts on to.
00:26:16.408 - 00:26:18.166, Speaker E: Just to build on what Marco does, too.
00:26:18.188 - 00:26:19.074, Speaker C: And there's something we can't.
00:26:19.122 - 00:26:19.990, Speaker B: I forgot.
00:26:22.570 - 00:27:09.990, Speaker A: Talking to the roll kit team. If you look at roll kit and what it is, if Comet was modular and they had interface separation between everything, roll kits would most likely be using the glue, like the node package, to glue their specific packages together, their own p to p, whatever they want. But at the fundamental base, at the fundamental foundation, it would still be comet, and they could still be using the mempool in a much more easier way than they are now. And so it's like, I mean, potentially you could say that if Comet tendermint was fully modular and it was actually nicely written, there wouldn't be a need for roll kit. Roll kit would just be another couple of modules for Comet.
00:27:10.970 - 00:27:15.942, Speaker B: That's interesting. I don't know if they talk to us about that, but that would be something to follow up on.
00:27:16.076 - 00:27:20.794, Speaker C: I also think actively chatting with Audi about it quite a bit.
00:27:20.912 - 00:28:13.642, Speaker D: There's like this opportunity. I know, for example, scroll is looking for a decentralized sequencer, and they're considering tendermint, right? And it's like tendermint can play multiple roles because it is many things at once. It is a consensus layer, but it's also a sequencer and a decentralized sequencer. And I think when you ask the question, how do you make tendermint more friendly to roll ups? I mean, first of all, it begs the question of what is a roll up? And sort of like, what do you need to abstract out? Like, in the case of Celeste, it's posting the data to the data availability layer. So it's like maybe creating some kind of better tooling around that. But I also think it's like, I think you want to separate out the pieces of tendermint so that the people who need the decentralized sequencer, which I think is going to be a huge thing in roll ups, can just use that. And the people who need the consensus, which they may not need, can be.
00:28:13.696 - 00:29:02.438, Speaker C: Just like separated out on that. The. And this sounds horribly heretical, but here it is. I think that the POA design space is something that's incredibly like, why would you pay a DA and a sequencer and all of these different pieces if you just need to spin up like a five to ten node validator set, that maybe there's some ability to rotate those validators, some different controls over who the validators are, different ways to punish misbehavior. And then you've got full tendermint, you've got the ability to IBC to anywhere. And maybe it allows you to still opt into some of those services like data availability, that you might need. But I think that that's probably one of the biggest needs is a better POA module for the SDK.
00:29:02.438 - 00:29:26.930, Speaker C: I've got one that I've been working on that's sort of like a copy of the open Libra one where validators vouch for each other. And if you've got enough vouchers, you can join the set. And if your vouchers get pulled away, you get kicked out. A very simple mechanism, but you can easily imagine advancing that more, how those vouchers are given out, the number of vouches that are needed. There's a lot of easy parameters to play around with there that I think would offer a lot of flexibility to app builders.
00:29:29.030 - 00:29:29.634, Speaker A: Right.
00:29:29.752 - 00:29:33.220, Speaker B: As a short term solution or as a long term solution. This POA thing.
00:29:34.950 - 00:29:52.474, Speaker C: I think that there's this idea of progressive decentralization. Everything starts out a little bit more centralized. Like an idea starts in one person's head and then it sort of propagates outwards. And we see this deeply in the Ethereum community with the optimistic roll ups. Op is the super common stack. But I don't think they have the fraud proofs working on Mainnet. Right.
00:29:52.474 - 00:30:23.090, Speaker C: So like, does it give the trust assumptions that they're billing it? No, it's like one sequencer running in AWS. So is a five person validator set better than one sequencer running in AWS? Can you pull that POA module and then plug in a different staking module or a different implementation for security later? Absolutely. And I think that because of the flexibility out of the core stack, the ability to sort of progressively decentralize and change those mechanisms over time is a huge benefit.
00:30:23.670 - 00:30:54.062, Speaker B: So Marco, you may take note for the POA module from Jack. Yeah. So let's talk a little bit. Since we have skip and Mechatech here, you guys have been evolving like both projects kind of move, I believe. Maybe that's what I feel, at least away from MeV and more into interns and UX and more like emitted topics. So maybe, Sean, I think you retired a module recently, like you had built an MEV module for chains. Maybe.
00:30:54.062 - 00:30:57.786, Speaker B: Can you talk a little bit about that decision and where Mechatech is heading?
00:30:57.898 - 00:31:19.122, Speaker E: Well, I think Mechatech never wanted to introduce new intermediaries into the supply chain. I think we wanted to integrate the parties that were there. MeV was founded to. Sorry, Mechatech was founded to rewrite tendermint and Rust is the truth. And we explored MeV because we thought it was going to be a viable way for sustainable funding for infrastructure.
00:31:19.186 - 00:31:20.840, Speaker B: That's why you had the budget and everything.
00:31:21.690 - 00:31:52.350, Speaker E: That was like the whole premise. When we look at MeV, and I think skip also diagnosed, I think we had similar diagnosis at the same time, is like one, there's not that much. And it's really an application level thing that is inevitably going to be internalized by protocols. Right. I don't think there's going to be a singular block space think, or unified execution environment or whatever you call it, swap. I think swap is going to be great, but I think Uniswap X is also going to be great for those things. I don't think cowswap is going to go away.
00:31:52.350 - 00:32:01.650, Speaker E: The day that swab is live, there's going to be many markets, and so we want to build the infrastructure that supports those many markets.
00:32:03.990 - 00:32:04.740, Speaker C: Sorry.
00:32:05.370 - 00:32:37.834, Speaker D: Oh, all good? Yeah. I mean, MeV is very small in cosmos. If you want to be a searcher, I would not recommend it. I'd say where we've looked more is we got very deep into this transaction pipeline. Right. So looking at where transactions are coming from, IBC based chains really have two sources of order flow. One is from the front ends, so like your wallet or front end, and then the second one is relayers.
00:32:37.834 - 00:33:31.386, Speaker D: Right. So relayers are inputting transactions into a chain. And we just started to think a little bit more about, well, how can we sort of move a little bit higher up the stack to actually leverage some of the stuff that we had done to make things easier to use? And so that's really when we got into this IPC routing issue, which we realized was a problem for a lot of people. That's generally where we'd like to be in the future, is really thinking about how can we better use the transaction lifecycle to help users and make cosmos usable and interoperable and sort of power it by MeV. Use the pieces of MeV like simulation and bundling and ordering and block space construction to try to make that process financially sustainable, potentially, who knows? But then definitely better usage.
00:33:31.578 - 00:34:18.160, Speaker C: Yeah. And just to tack onto the end of that real quick over at the other stage, there's a lot of folks talking about proposer builder separation, complex mev strategies and a number of other things. And I think a lot of the reason for that is in Ethereum, there's one big pipe where all of the exploitable information comes through, and that's where the MEV comes from. And because of the architecture of Cosmos, there's never going to be that one big pipe. And because of the ability of app devs in the app chain world to control their underlying consensus, it gives them a lot more tools to combat this, and there's a lot more different ways. But I think that we're very lucky as a community to be able to watch that one big pipe, see how the battle over it plays out, and pick the best in class solutions for that over time.
00:34:19.170 - 00:34:34.740, Speaker B: I was wondering for one more question for skip and makeate. You guys are both evolving in the same space. Are you looking at each other to see what the other is doing and trying to fill another need, or what's the strategy between your two companies?
00:34:35.610 - 00:34:36.806, Speaker E: We talk every month.
00:34:36.908 - 00:34:37.654, Speaker D: We talk a month.
00:34:37.692 - 00:34:38.374, Speaker E: Yeah, talk every month.
00:34:38.412 - 00:34:38.834, Speaker C: Nice chat.
00:34:38.882 - 00:34:39.960, Speaker B: What do you talk about?
00:34:40.490 - 00:34:42.870, Speaker A: Whether NDA.
00:34:44.890 - 00:35:01.374, Speaker E: Boxing, rematches? No, that'll be fun. We talk about what we see the ecosystem needing and then how we can complement each other in growing that pie and seeing if there's room to collaboration or friendly competition. We try and stay open to both.
00:35:01.572 - 00:35:48.090, Speaker D: Yeah, I'd say both have a lot of respect for each other's team. And, yeah, I think in general, we want to make sure that. I think both of us want to make sure that we're actually moving in this direction of Ux, as far as I understand it, and making sure that we're not. Just like we've recently been tweeting this thing, like, grow the pie, right? That's really where we want our mindset to be, because we've just realized ourselves, like, Cosmos is not big enough to support us and to support the amount of teams that I think want to grow. And so we're just really laser focused on trying to bring, do anything we can to try to grow the ecosystem, no matter what it takes, because otherwise, it's like, what are we doing? And that's really where we've shifted.
00:35:49.310 - 00:36:08.642, Speaker B: Cool. Jack, I wanted to talk about hyperlane with you. So that was a big deal last week, right? Like, hyperlane is going to be, at least the way I understand it, quite competitive to IBC within the cosmos ecosystem. What's your take on Hyperlane? And why did you decide that transloc should work with them?
00:36:08.696 - 00:36:52.522, Speaker C: I mean, Mag's just down there talking about growing the pie, and I really think that that is sort of key to my thinking as well. We need better routes in and out of this ecosystem, and for better or for worse, this is just the reality of the situation. We haven't been able to deliver them as quickly as we needed to with IBC, and especially with the advent of roll ups and all of these things coming, we need a way to be able to participate in those economies as cosmos. And if we don't have them, then this problem of ecosystem growth continues to be compounded. That's why we chose to take the work with Hyperlane. They've got a lot of traction within their existing community. They're incredibly ideologically aligned with IBC, and as part of the contract with working with them, they've agreed to figure out a way to align Hyperlane with IBC.
00:36:52.522 - 00:37:37.466, Speaker C: Whether it's figure out a way to fit the hyperlane verification into an IBC client, which looks practically impossible in a lot of ways, but building a shim layer that allows developers to use either semantics and the different transport layers moving to and from these roll ups. I think even we were talking earlier about the number of different light clients that need to be developed for these different roll up architectures. That's a huge lift. It's going to be hard, and people are going to be inventing these things faster than we can connect them, and there's always going to be a need for these kind of committee based solutions. And I think it was like in January, I had a long dialogue with Zachie about this. I went back and forth with him for like a month. And I was personally, really, honestly, like, I've dedicated the last bunch of years of my life to IBC.
00:37:37.466 - 00:38:10.594, Speaker C: And I was like, this seems competitive. Do I need to? Do you know, we do need to do it. And we're not going to win by sitting off on an island and telling everyone we're right, we're going to win by being pragmatic. We're going to win by working with more and more people. And IBC is this open standard with no token attached. With this sort of like immaculate conception. I do fundamentally believe it will win, but we need help and we need to work with some of these other things and figure out how to build those developer experiences and keep linking this ecosystem to more ecosystems.
00:38:10.594 - 00:38:12.780, Speaker C: And that's why I took the hyperlane work.
00:38:13.790 - 00:38:42.942, Speaker A: It's kind of like early on where cosmos came about because it was like, oh, there's a bunch of chains, they're all siloed. They can't communicate to each other. Let's create a communication protocol. But then there's now so many communication protocols, but they're all like ecosystem bound. So like within Polkadot, you have XCM, that's within their ecosystem. But then you have a multi Sig bridge going out in cosmos, you have IBC, and then a multi sig bridge going out in Ethereum, it's like more or less all multi Sig bridges. And Solana, it's all multi Sig bridges.
00:38:42.942 - 00:38:53.074, Speaker A: And so now it's like we kind of have siloed ecosystems of trustless bridges. So now it's okay. Like, we can connect chains in ecosystems. Now we have to pass the barrier between ecosystems.
00:38:53.202 - 00:38:55.574, Speaker E: But I also have a question. What is it?
00:38:55.612 - 00:39:04.386, Speaker B: I think they just asked me to stop the. I wish we could continue, but I don't know if we have. Like, this lady asked me to stop the bell.
00:39:04.418 - 00:39:05.160, Speaker A: I don't know.
00:39:05.770 - 00:39:11.420, Speaker C: I think someone's up next. Tiba, thank you very much. Thank you, Tivo, for moderating this great question. Jensen's great discussion. Thank you.
