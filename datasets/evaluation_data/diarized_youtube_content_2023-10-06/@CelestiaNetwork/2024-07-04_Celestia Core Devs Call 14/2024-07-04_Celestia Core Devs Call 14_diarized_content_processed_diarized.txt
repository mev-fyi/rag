00:00:02.600 - 00:00:06.918, Speaker A: Thank you. Callum, Evan and Auratul here.
00:00:07.094 - 00:00:08.370, Speaker B: Yep. Rutul.
00:00:11.310 - 00:00:13.170, Speaker A: Excellent. Strangelove.
00:00:15.710 - 00:00:16.650, Speaker C: I'm here.
00:00:17.830 - 00:00:21.450, Speaker A: Thank you. Alex. The IBC team.
00:00:23.510 - 00:00:24.450, Speaker D: I'm here.
00:00:25.720 - 00:00:47.460, Speaker A: Thank you. Susanna. Binary builders. Do we have anyone from binary builders here? I don't see. Don't see Marco. I guess not. All right.
00:00:47.460 - 00:01:06.426, Speaker A: Informal. Also, don't see anyone from informal. Correct me if I'm wrong. Maybe they'll join a bit later. Okay. And then on the DA side, from Celestial Labs, Celestia. No.
00:01:06.426 - 00:01:07.030, Speaker A: Team.
00:01:08.570 - 00:01:09.310, Speaker D: Hi.
00:01:10.490 - 00:01:25.560, Speaker A: Hello, Renee. Hello. As well. Okay. And then from the iger team, I'm doing iger. Hello. Hello.
00:01:25.560 - 00:01:33.772, Speaker A: Okay, I think that's it for the roll call. Should I be sharing my screen? I guess I should, yeah.
00:01:33.796 - 00:01:37.436, Speaker E: I didn't want to interrupt you, but I need to restart Zoom to do that.
00:01:37.628 - 00:01:45.904, Speaker A: Okay. I should be able to do it here. Can you guys see my window on the Celestia cordo's call agenda? Yes, I'll take that.
00:01:46.032 - 00:01:50.112, Speaker E: Would it be good to zoom in a little bit or increase the font size?
00:01:50.296 - 00:02:01.500, Speaker A: Yeah. Thank you. There we go. Okay, let's start with working group updates and then talk about cfps. So, any updates from the DA working group?
00:02:02.600 - 00:02:03.940, Speaker F: No, no updates.
00:02:04.960 - 00:02:24.440, Speaker A: No updates. Okay. Any updates from the interface working group? I don't see Josh from Astria and I think Ismail is. Ooh. Is there anyone else from the interface working group who can represent?
00:02:32.140 - 00:02:32.880, Speaker F: Yeah.
00:02:33.300 - 00:02:33.756, Speaker G: Yeah.
00:02:33.828 - 00:02:49.220, Speaker F: Ismail wrote up the initial draft of the CIP for the canonical API, so I know he's out last week and this week, so probably next week. I would imagine he'll sort of give everyone a nudge to look at that and review it. So some progress has been made, but there hasn't been a meeting.
00:02:49.960 - 00:03:15.198, Speaker A: Excellent. Then we'll discuss it. We can discuss the CFP in the next core devs call. Do you know if it's one of these cips? It's still an interrupt. Right now it is not. Okay, then we can see about discussing it in the next core devs call, but in the meantime, anyone who's interested in making use of the canonical celestia API, please take a look at that draft. It should be this one here.
00:03:15.198 - 00:03:27.690, Speaker A: Canonical API PR number 167. And please provide feedback. Okay. Lastly, updates from the ZK working group. Do we have Nash or zucky here?
00:03:29.950 - 00:03:32.064, Speaker H: I'm here. Can you guys hear me?
00:03:32.262 - 00:03:33.000, Speaker A: Yes.
00:03:36.460 - 00:04:18.690, Speaker H: So sorry for the background noise. I'm on the airport right now. But the update is that we are talking more to sovereign SDK and realize that snark generation isn't incentivized because of KVM's not supplying recursive snarke verification or like it's still not accelerated. So the discussion of the proof system came up again and that is the most the thing that's been looked at recently.
00:04:23.310 - 00:04:48.340, Speaker A: Thank you. All right, let's. Yes, and there's a lot of exciting work going on in the ZK working group. If you're interested in that, please reach out to Nashki or Zucki or myself. The call is going on for this. All working groups. Okay, let's now go over updates on active cips, starting with CIP 17, I believe.
00:04:48.340 - 00:04:51.900, Speaker A: Yep, let's go. CIP 17, the Lemongrass hard fork.
00:04:55.750 - 00:05:41.730, Speaker B: So SiP 17 is already final, but this is just going to be a bunch of updates on getting that to mainnet. So basically since the last call we tested a little bit of selectia v two dot zero, a little bit more, we cut a few more release candidates and now we're basically ready to cut the final release of v two 0.0. So expect that by the end of this week. Shortly after that gets released, we're going to try to incorporate that in Celestia node. So hopefully this V two release gets included in Celestia node, hypothetically Vo 16.0 but TBD. And then once Celestinode supports Celestia app V two, we'll roll this out to Arabica, hopefully in early August.
00:05:41.730 - 00:06:25.894, Speaker B: Just two other call outs. One is last call. We talked about conduit potentially like testing Celestia v two on an ephemeral testnet. They weren't able to do that yet, so we're kind of like waiting for them to do that. But at this point we might end up just getting it deployed on Arabica and testing there. So that leads into the second point which is if you run a service like a roll up or an indexer or anything on top of celestia, please deploy your service to Arabica and MoCA so that you can get signal on whether your service continues to work after the lemongrass hard fork is activated on those testnets. So that should be coming pretty soon.
00:06:25.894 - 00:06:39.680, Speaker B: So like if you haven't deployed already and you're not making use of those testnets, please do because that'll help us prevent any service downtime on Mainnet. So yeah, those are all the updates.
00:06:39.720 - 00:07:00.968, Speaker A: I thought of or specifically deployed either after those testnets have respectively upgraded or deployed before and then monitor after versus just deploying it now and then, not monitoring after the upgrade then for upgrades. I believe the upgrades to the tasknets and Mainnet eventually will be announced in the Celestia community telegram channel. Please question?
00:07:01.024 - 00:07:10.480, Speaker B: Yeah, yeah, definitely on Telegram, hopefully also on Discord. So if you can follow those communication channels, that'd be great.
00:07:11.420 - 00:07:13.120, Speaker A: Excellent. Thank you.
00:07:13.660 - 00:07:23.972, Speaker E: Want to jump in and add just the pipeline for upgrading is going to be from Arabica, then to MoCA, then the mainnet. So, yeah, I just wanted to clarify.
00:07:23.996 - 00:07:59.430, Speaker A: That with at least a couple of weeks in between each. So this isn't something that's going to be in mainnet tomorrow looking at, you know, if Arabic has early August, okay, it's mid August, then we're looking at, you know, late August for Mainnet, assuming no bugs, which, given the excellent work of all the engineers involved in this, let's cross our fingers and hope there's no bugs. Okay, next CIP is CIP 21, introduced blob with verified signers or authored blobs? Is that the same thing? Callum, are you here? Please take it away. Yes.
00:08:00.610 - 00:08:26.720, Speaker C: So I just finished cutting the first release candidate, the V two of Go Square, which is where most of this actual protocol work is in place, and now started integrating it with Celestia app. So hopefully this will be done within a week or two and then we'll start testing in QA. It is likely that this will also go through audits. So that's the current status update.
00:08:29.220 - 00:08:40.200, Speaker A: Thank you. Was there a call to revisit CFP 21? Okay, 21 and 23, this currently in review. Do we want to move it to final? Is there time for that yet?
00:08:44.900 - 00:08:47.460, Speaker C: Well, I think it's last call is in between.
00:08:47.540 - 00:08:49.890, Speaker A: Right, my bad. Last call? Yes.
00:08:51.390 - 00:09:08.690, Speaker C: I'm not opposed to moving it to last call. The only thing that would cause us to rethink it is if in QA or in testing, there is some sort of major flaw or something that we had to change and then we probably have to readdress it. But at the moment everything seems in order.
00:09:09.510 - 00:09:21.780, Speaker A: Okay, how about we wait for that preliminary QA at least, and then if there's no red flags, then I can move it to last call. Any objections to that?
00:09:22.120 - 00:09:23.120, Speaker C: Sounds good.
00:09:23.280 - 00:09:38.900, Speaker A: Okay, excellent. Thank you. Callum. The next CIP is CIP 22. Mood to review. So this is removing the index wrapper. I don't know if you're available, Nash, to discuss this or if you're still running through the airport.
00:09:43.770 - 00:09:47.830, Speaker H: I'm definitely listening. And if there are any questions, I could answer them right now.
00:09:48.530 - 00:09:55.350, Speaker A: Oh, do you want to give a summary of the index? Do you want to give a summary of CFP 22 and its current status.
00:09:57.250 - 00:10:19.580, Speaker H: Yeah. So I moved it to review status and updated it with the updated specification. All the feedback that I got from the last community call and I'm still in favor of removing the index wrapper. Yeah, that would be the update.
00:10:22.360 - 00:10:26.540, Speaker A: Excellent. Are there any objections to removing the index wrapper?
00:10:28.520 - 00:10:36.468, Speaker G: I feel like this isn't break anyways. Use case is anyone relying on the.
00:10:36.484 - 00:10:45.388, Speaker A: Index driver backwards compatibility? It's consensus breaking, but shouldn't affect anybody upstream except potentially.
00:10:45.564 - 00:11:03.540, Speaker H: Yeah, I don't. Yeah, if they're going to end up using author blobs, then it's also not going to affect sovereign because they're not going to be looking into the PFB namespace anymore. And celestial node doesn't consume the index and nobody else really does as well.
00:11:05.760 - 00:11:19.700, Speaker G: But in terms of like why we bring this in the first place, simplify a square layout creation, I'm not sure. That also seems to have backwards, like changing the square layout also seems to have, I'm not sure we can change that without breaking backwards compatibility as well.
00:11:22.720 - 00:11:25.976, Speaker C: Yeah, it'd be a breaking change and like a hard fork to have this.
00:11:26.008 - 00:11:36.780, Speaker G: Sound to realize the benefits of this CIP that we also need to change the actual square layer equation. Like what? What are the benefits of the CIP in isolation without future cips?
00:11:40.760 - 00:11:47.100, Speaker H: What do you mean by the. Okay, first. Okay, let's. John. Okay, go ahead.
00:11:49.480 - 00:12:23.498, Speaker A: No, no. I guess my question was what do you mean by the square, the square layout? Because those things like the logic to create the square layout. And there's like various constraints on the square layout in general, regardless of the logic to create it from transactions, at least in the CFP description here, it looks like assuming someone didn't assume the square layout in all cases with all constraints exactly as it is, which they shouldn't have. It looks like this doesn't completely change the square layout, it just changes, it just changes like one thing. But correct me if I'm wrong, what's.
00:12:23.514 - 00:12:26.150, Speaker G: The benefit of the CIP isolation?
00:12:29.730 - 00:13:13.838, Speaker H: In isolation, it makes the PFB transaction deterministic. So currently you would ingest the index into the PFB wrapper after the blob has been inside the square. But now you can have a deterministic PFB transaction. And the square construction is much much simpler. So it would delete a bunch of code, at least in app and core. That just does the mediation and the wrapping. And this is in isolation.
00:13:13.838 - 00:13:43.380, Speaker H: That would happen right now, in the future. This also enables things like fast blocks those squares as a prerequisite in the sense that you need to have the PFB to be deterministic because of the deterministic square construction out of the blocks. So the bytes, the PFV bytes stay the same and don't change. Otherwise you would have to prove equivalence of the data root of blocks to the actual bytes that are in the square.
00:13:47.080 - 00:13:56.020, Speaker G: In terms of backwards inquisibility, you're saying the change to sovereign SDK pausing logic, is that, how big of a change is that?
00:13:59.520 - 00:14:29.830, Speaker H: Are we assuming that the, like, even sovereign SDK is not consuming the index inside the circuitous? They just would have to, it would make the circuit simpler because they need to do less proto maliation. But if they're going to end up using author blobs, then they're not going to end up looking into the PFB transaction namespace anyway.
00:14:31.210 - 00:14:38.420, Speaker G: Yeah, but I seem to need a, like you're saying they don't use information anyway, so I assume it should be a fairly simple change. Just like it.
00:14:40.120 - 00:14:43.820, Speaker A: They don't use it. Then it sounds like it's just removing the parsing of a single field.
00:14:44.440 - 00:14:57.020, Speaker H: Yeah, like if we remove the whole index wrapper, you need to basically simplify the circuit to not parse through the index wrapper. So it makes the circuit simpler, but you have to change it.
00:14:59.090 - 00:14:59.990, Speaker G: I see.
00:15:02.810 - 00:15:04.870, Speaker A: Evan, send your hand up.
00:15:05.530 - 00:15:45.190, Speaker I: Yeah, I think that this has, in the ideal case, we would sort of explore this more as to what this means for the rest of the square layout. Just because if we remove this, there is no way to do fraud proofs for blob inclusion and PFP inclusion. Therefore that changes so much. Like that changes padding, that changes the non interactive defaults or the way that we calculate the commitment in the PFB, like none of that means anything. It's not like there's no reason for it if you get rid of this index.
00:15:49.010 - 00:16:33.230, Speaker A: So everything you said is correct. Just because you're correct doesn't mean you're right. So I think it's correct that some things, like for instance, you say you can't do full fraud proofs of blob inclusion. Sure, that's correct. However, the plan is to move towards CK validity proof of, well, not just blob inclusion, but the whole square construction. Now you know whether or not this makes things like the default, default layout, which the non interactive defaults, which I guess aren't defaults anymore. There's a rule along with the blob commitment.
00:16:33.230 - 00:17:12.860, Speaker A: To a certain extent that's also correct. But my understanding is that as we move towards a world with validity proofs, of square construction, which, given the stateless nature of this, it should be quite feasible the blob commitment itself can be made simpler. It's currently this weird Merkel mountain range over subtree roots and that kind of stuff in order to support some compact proofs. But you can have a simpler commitment scheme if we move to an entirely ZK world. So. That's true. But I also don't think that this requires changing any of those things today.
00:17:12.860 - 00:17:28.879, Speaker A: No, they might serve no purpose anymore if we're moving towards ZK land. And they would get changed towards, you know, if we go in that direction. But that doesn't mean they need to be changed today. Like, they would still work. Yeah, they don't serve the entirety of the original purpose.
00:17:29.219 - 00:18:02.290, Speaker I: I think. I think all I'm advocating for here, I guess, is that we measure twice and cut once, so we at least explore what this new ZK square layout would look like and compare that with what it would look like with fast block slow squares. So then we have a better idea of where we're going instead of just the worst case scenario. In my opinion here, which isn't that bad, would be removing it and then adding it back in for some reason.
00:18:03.030 - 00:18:53.270, Speaker A: I agree, yes. Although my understanding is we don't actually need to implement like, other than the fact that some of these, such as this, removing a field may lead to some slightly more compact transactions, which one field, which isn't significant, I don't think these need to be implemented until we are deployed, rather in a hard fork, until we get closer to that end goal of decaying everything. Of course it doesn't hurt assuming that we have a path to get to that it doesn't hurt, because some of these things are actual optimizations. They remove things, make things simpler, et cetera, that aren't needed. But you're right that having a path to get there would avoid us having to put this back in, which would be really not great. This or other things. Thank you, Evan.
00:18:53.270 - 00:19:04.900, Speaker A: Okay, but I don't hear any fundamental objections to this, so that's good. Now, next is reviewing CIP 23 and status I believe.
00:19:08.520 - 00:19:11.568, Speaker E: Has her hand rings. I don't know if that was for.
00:19:11.584 - 00:19:14.380, Speaker A: The old sanaz sana's. Please go ahead.
00:19:14.680 - 00:19:45.190, Speaker D: I wanted to ask a question about this removal of index wrapper. How would that impact the way that a transaction author can actually locate the blobs for a PFE transaction? Would it actually incur additional computational cost when you query for a transaction like the blobs within the PFB in the square because like previously we had the indices, but right now you're removing it. I just want to know how does that look like?
00:19:48.490 - 00:19:53.330, Speaker H: So could you repeat like concise the question in.
00:19:54.110 - 00:20:13.054, Speaker D: Yeah, I mean, when I'm, if, I mean with this change, if I have submitted a PFP and later I want to query like where the blobs are included in this square. And how would that, would that change basically or does it stay unchanged with this removal of the index wrapper?
00:20:13.182 - 00:20:19.780, Speaker H: Okay, so do you mean querying on the core app site or querying on the, the no side?
00:20:20.280 - 00:20:22.100, Speaker D: No, on the core and app side.
00:20:24.560 - 00:20:27.260, Speaker H: How is it currently, how does it currently work?
00:20:27.920 - 00:20:50.400, Speaker D: No, with this change, after this change, would that, would that be impacted the way that someone can query where the bulbs of a PFB is located in the square? So like the, on the, basically when you query that does, the query has to do additional work to locate the blobs of a PFB in the square.
00:20:50.780 - 00:21:15.026, Speaker H: I don't know. I actually have to look into it. I don't know how. I know that Celestia nodeside creates their own for blob queries and it's not dependent on this one. But I'm not sure how current app does Blob querying. So I don't know how it actually gets impact. I have no idea.
00:21:15.026 - 00:21:16.538, Speaker H: We'd have to look into it.
00:21:16.714 - 00:21:36.070, Speaker C: I don't think it's expected for users to query Celestia app for blobs. That's what we have solicitor node for. And with that you can query by blob commitment. So long as you have the blob commitment for the blob you submitted, you should be able to see if it's included. Does that answer your question? Sinatra?
00:21:36.450 - 00:21:48.602, Speaker D: So it means that you don't have to know the exact, basically index of the blobs in the square in order to query so it doesn't impact the user interaction.
00:21:48.666 - 00:22:11.670, Speaker H: I honestly did know that we can even query blobs through core enough. I thought it was only gonna like only happening through node. Like, like I think we can do whole namespaces but can we actually query single blobs through core app? Like is that a feature that we have?
00:22:11.970 - 00:22:13.234, Speaker B: I don't think you can.
00:22:13.402 - 00:22:14.290, Speaker C: No, I don't think so.
00:22:14.330 - 00:22:19.706, Speaker D: Okay, sorry, my bad then. But I mean, I was just wondering about the query process.
00:22:19.818 - 00:22:43.600, Speaker H: How would we have that feature then? It would be impacted, I think because there needs to be some mapping and then mapping can be derived from the index, but that mapping exists on the celestial node part which they generate for themselves and are not deriving it from the PFB, but internal, through internal logic.
00:22:44.260 - 00:22:46.396, Speaker D: I see. Okay, thank you.
00:22:46.588 - 00:22:58.880, Speaker I: Yeah, we would have to, at the moment, the blob stream, if you generate share proofs from core, it does use that index, the index wrapper on the PFP, but we're removing that anyway.
00:23:03.730 - 00:23:28.412, Speaker A: Excellent. And also, as noted in the chat here, that the index just being removed is currently on chain, but it also doesn't need to be on chain. It can just be off chain like some index, or it can index it off chain, stuff like that. Okay, thank you. Thank you for the question. That was good to know. Last is CIP 23, which is currently in draft.
00:23:28.412 - 00:23:32.960, Speaker A: This is the coordinated prevo time. Callum, did you want to discuss this?
00:23:34.620 - 00:24:23.224, Speaker C: I can. The aim of this is to solve the problem where we see inconsistent block times. So when there is a large block or a large amount of data, it's usually a lot more delayed than if there is nothing. So if there's an empty block, and we kind of want to provide finality on a regular cadence. So this is a solution to that suggested by Sanaaz, in which instead of pre voting immediately, we delay our pre vote until the end of the timeout propose. And then if we were to pre vote for that block, that's when we do it. So that way everyone kind of pre votes sort of at the same time, and at the same time we reduce timeout commit, which is the time that we were previously waiting for.
00:24:23.224 - 00:24:34.220, Speaker C: So something like zero or 1 second. That way the sort of the time that we're waiting in between is sort of like including that of the block propagation.
00:24:38.560 - 00:24:43.498, Speaker A: Excellent. Did you discuss this in the previous core devs call or this the first one?
00:24:43.634 - 00:24:45.074, Speaker C: No, I think it's the first one.
00:24:45.202 - 00:25:09.510, Speaker A: Okay, excellent. There were some additional, I think additional, there were some additional variations on this, but this one was the final thing that was decided to go with, at least initially. Did you consult with, say, the comet BFT team or any of the teams working on that, on whether or not this would have any weird effects?
00:25:10.310 - 00:25:48.864, Speaker C: There was some discussion with them, and a lot of us has similar ideas to so common. PFT has ADR 115, which was to allow the application to control the timeout commit. And this takes an element of that in it as well. And as to like the delayed pre voting part, we've been talking with Dave from osmosis about it. So far it looks good in theory. Of course, we'll have to prototype and see if it actually has the desired change. And I think the informal will definitely be involved in auditing this.
00:25:48.864 - 00:25:52.940, Speaker C: So either now or later on, they'll be involved.
00:25:54.480 - 00:26:00.100, Speaker A: Excellent. Is there an estimated ETA on having a prototype?
00:26:04.250 - 00:26:05.522, Speaker C: For a prototype?
00:26:05.666 - 00:26:06.390, Speaker A: Yes.
00:26:09.010 - 00:26:11.882, Speaker C: I can make an estimation whether that's correct or not.
00:26:11.906 - 00:26:17.314, Speaker A: Is that some sort of estimation? Is this like something that's going to be like a month from now or like six months from now?
00:26:17.442 - 00:26:19.030, Speaker C: No, it's like a week or two.
00:26:19.410 - 00:26:40.960, Speaker A: Awesome. Okay, then this is a pretty exciting. Here's your ad. Or 115. Okay. Is pretty exciting to make more consistent block times. Does anyone have any fundamental objections to this? Okay, I don't hear any fundamental objections.
00:26:40.960 - 00:27:19.210, Speaker A: Yeah, I discussed this with some of you guys offline, so I think this is perfectly fine as a direction. Let's see, next is not a cip, but discuss features for the Celestia state machine b three. And then I guess since I'm here on the agenda, there's also a new CIP website here created by Josh. Thank you, Josh. Kind of like the ethereum EIP website. That kind of is a nice way of rendering and viewing all the cips that are currently active and proposed. Thank you, Josh.
00:27:19.210 - 00:27:30.346, Speaker A: Now we can discuss v. Three features for the state machine. V three. Okay. Evan unmuted himself. Please go ahead, Evan.
00:27:30.538 - 00:28:18.080, Speaker I: At the moment we're just planning on for sure authored blobs and this delayed voting, assuming that delayed voting, assuming that there are no further issues with either of those things. If we have time, we will also include a refactor to how we're upgrading. So this refactor makes it so that it's. I don't think we've written a ADR for this. It's not, doesn't need a CIP because I don't think it's, I don't think it's consensus breaking. It might actually be, but this refactor just allows us to have like a much more Cosmos SDK friendly upgrade system. So we can just use normal Cosmos SDK modules off the shelf and can upgrade while still having a rolling upgrade.
00:28:18.080 - 00:28:32.836, Speaker I: So that's exciting. That's currently being prototyped that will optionally be included or where. That's the current thinking. Not will. It is. The current thinking is that it could be included along with those other two. There's so far at least.
00:28:32.836 - 00:28:41.080, Speaker I: My current understanding is that social consensus is aiming for the other two. So I think that's CIP 21 and CIP 23.
00:28:44.230 - 00:28:47.370, Speaker A: Awesome. My understanding. Sorry, go ahead.
00:28:47.670 - 00:28:55.290, Speaker I: We need to write up the meta CIP for those two and I guess we can discuss that in the next call.
00:28:56.150 - 00:29:20.740, Speaker A: Yeah, it'd be good to get started on the meta CIP. Just might as well. And to then to also have, like, a concrete and asynchronous way of discussing what's included, something that's easily discoverable for what's going to be included in this next hard fork of the state machine. And my understanding is that this is going to fall out relatively quickly after the Lamont grass hard fork. Is that correct?
00:29:21.640 - 00:29:24.980, Speaker I: Yeah, that's the hope.
00:29:27.280 - 00:29:49.030, Speaker A: Let's hope across our fingers. Excellent. Brings us to the end of the agenda. Does anyone have anything else they wanted to discuss in the court of call? Okay, I don't see any hands up or any unmuting, so I guess that's it. Thank you, everyone, for attending, and we'll see you all in two weeks.
00:29:49.610 - 00:29:53.306, Speaker I: Bye bye, everyone.
00:29:53.498 - 00:29:54.370, Speaker D: Bye. Thank you.
