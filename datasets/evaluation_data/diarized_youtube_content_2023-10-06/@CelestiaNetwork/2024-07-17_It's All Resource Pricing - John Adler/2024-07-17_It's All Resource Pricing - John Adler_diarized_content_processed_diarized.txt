00:00:01.800 - 00:00:21.490, Speaker A: Okay. Good afternoon, everyone. Ga, I guess, as it was. I'm John. I'm here to talk about resource pricing yet again. This is the third time I'm talking about this at a conference that's ECC or adjacent. Okay, thank you.
00:00:21.490 - 00:01:34.750, Speaker A: Okay, so where did this series of talks start? So they started at ETH CC four, I believe, in 2019. Oh, 2021 down there. You can see the picture of me here. So in this talk, I started talking about blockchain resources from the perspective of a multidimensional market and that there's multiple independent resources in blockchain systems and blockchain state machines that need to be metered and priced in various ways, some good, some bad. I will later in this talk kind of go into more detail on some of these, but there's kind of an overview of what was described in these talks if you want to go back and take a look after that. I described how on Ethereum, gas is used prior to EIP 4844, gas is used as this kind of uniform way of metering resources on Ethereum and resource consumption on the blockchain. Other blockchains do things potentially slightly differently.
00:01:34.750 - 00:02:23.160, Speaker A: Bitcoin also has some mechanisms for metering things and it also has some, not a gas schedule, but some sort of resource consumption schedule. For example, in bitcoin, signatures that use Segwit are priced four times cheaper than. Well, not signatures, but witness data is priced four times cheaper than non witness data. So that's an example of a resource schedule. And using these limits, we can kind of start using the schedule, impose limits on the resource consumption of the blockchain on full nodes. Okay, so I can talk. Oh, my bad.
00:02:23.160 - 00:02:41.102, Speaker A: Okay, so I can talk. So this one was at ECC five. Unfortunately, I don't have a, I don't have the one with the title slide, but it's okay. Next year we'll do one with three levels deep. And I'll put it on my t shirt as well. We'll start a trend. So this one here was the second one in the series.
00:02:41.102 - 00:03:29.626, Speaker A: I talked about how the free market, which is if you have a market for block space in the form of the gas price, it's a free market, or maybe it's not, but it's on market. Free markets are not very good at pricing in negative externalities. In other words, things that happened to not the market. An example of this that I gave in the talk was pollution from plastics. Right? Like manufacturing, plastic is fairly cheap. Using plastic is fairly cheap, but it has very serious long term effects that don't directly affect, and don't immediately affect the producer or consumer of the plastic. Rather they have effects on the planet and everyone in general.
00:03:29.626 - 00:04:18.180, Speaker A: And these work long term. So if you appropriately priced plastic to account for these negative externalities, it might be much more expensive. Who knows? But as it stands, the free market is not very good at pricing negative externalities. Why are this relevant to the blockchain space? I'll get to it in a second. And another point that ties into this that we'll kind of synthesize together is that on ethereum you have a single market for resources. You have gas, or at least you had at the time. And that's not exactly a very good way of metering multiple resources that are independent of each other, such as at the time, there's things like storage, state, growth, bandwidth, compute, et cetera.
00:04:18.180 - 00:05:12.050, Speaker A: Having a single uniform metric for these things in a single market is not exactly very great. That's why in more recent years, various blockchains have been and various ways of building blockchains and blockchain stacks have gone towards a more multi dimensional approach for resources. And the way that looks is you'd have separate markets for different resources. Okay? So in any market you have supply and demand, and where the two meet, you end up with a price. This is obvious. But also this is how the gas price or the transaction fees work on any blockchain. Assuming that they have a free market and they're not permissioned, assuming they're decentralized and permissionless, there's going to be free market for inclusion on the blockchain for use of block space and therefore for use of resources on the blockchain.
00:05:12.050 - 00:05:56.940, Speaker A: And you can't really control demand directly, but you can control supply and you can control how that supply is used through what I called at the time, and I would still call it that, which is regulation. The gas schedule and how it changes is a form of regulation, and it directs people to using blockchain resources in a certain way. If you make one resource more expensive through regulation in the form of social consensus, then that resource will be used last because it's more expensive. Great. Let's see if any of the. Okay, next slide. Ok, now we're going to kind of dive into the mean of things.
00:05:56.940 - 00:06:35.112, Speaker A: So what are the different blockchain resources? This is not necessarily a comprehensive list, but there are various kinds. You have cpu cycles, this is commonly called compute. You have power, which is not many people talk about in the blockchain space. But if you're running on, let's say a phone or a low power device, then power actually becomes a non trivial concern just because something runs fast. If it uses a lot of power, that could be very bad for a phone, for example. In certain contexts, that could be a consideration. You have network bandwidth, you have memory.
00:06:35.112 - 00:07:17.830, Speaker A: This could be both memory usage, memory capacity, and also memory bandwidth, which are two different things. And then you have disk, which could come in the form again, of disk I o, and also disk storage, long term storage. And the storage could come in flavors of hot storage, like in state, or cold storage, like chain history. As you can see, there's various different resources. And you have to somehow price all these different resources that aren't necessarily dependent on each other and how they're used. Like you could imagine a system that uses a lot of storage, but that uses very little compute. Like you just a DA layer, for example, right? A Da layer doesn't process complex things, but it just stores a bunch of data.
00:07:17.830 - 00:07:56.936, Speaker A: Okay, so how do things work? In the old EVM pre 844, it works with a single dimensional resource pricing model, gas. And the way it works is, rather than focusing on resource pricing, really, it's resource markets. That is the important thing. You can hear people talk about resource pricing and whatnot on Twitter. But the real thing that's important here is how many markets are there? And in this case, there's a one market, right? Preip four, eight, four. You had one thing. You had gas.
00:07:56.936 - 00:08:28.430, Speaker A: There was one market for gas. No market for anything else. And this gas, the way it was, the way it modeled the usage of different resources in this regulation is there was some sort of fixed ratio, some sort of fixed ratio in costs between different instructions and EVM storage. Washington 20,000 gas under certain conditions. You know, an ad might be. I forget, I think it was three gas or something, right? There was some fixed ratio. This ratio could be changed through changes in regulation.
00:08:28.430 - 00:09:20.430, Speaker A: And on those changes in the social consensus of what is. Ethereum can change the gas schedule of the EVM, but ultimately there's a fixed ratio. Okay, then how does it work? In a multi dimensional resource pricing world? You have multiple markets. That's kind of the key differentiator. You have multiple markets for the different resources and the ratio of pricing for those resources, at least within those markets. Because it could be the case that one market, for instance, storage, is available in one market, and it's also available in a different market. But they're two different markets, because one market might have storage plus some other stuff, and the other one, say it might be just storage, which is sending out EIP 4844.
00:09:20.430 - 00:10:10.510, Speaker A: So the ratio between the resources on the different markets, it's implicit and it's floating depending on what price the market decides to set. You know, the intersection of supply and demand. That's kind of where you get the implicit ratio, the implicit setting of price where there's different resources. Okay, so let's think about examples Celestia and EAP 4844. I'm not going to cover in this slide just yet, the dynamic ERP 1559 style resource pricing for ERP 4844, because that's actually orthogonal to the fact that there's different markets. You could have built a system like EAP 4844 with blobs. Without that, obviously you wouldn't have, or potentially you would.
00:10:10.510 - 00:10:59.184, Speaker A: But for now, I'll just talk about the fact that they're two different markets. So the way they work is they have one market for execution, they have another market that's purely for data availability. In other words, not storage as in state, but storage as in historical blocks block data. And there's kind of a difference between these two. One of them is that EIP 424 is a single chain theorem that provides these two markets, while another one, Celestia, is multiple chains that provide these markets in the sense that Celestia doesn't provide a market for execution, but rather the market for execution is available on different layer rollups. For what it's worth, Ethereum also has such a thing. So Ethereum doesn't just necessarily have two markets for resources.
00:10:59.184 - 00:12:13.170, Speaker A: That actually has one, the base layer ethereum, then another, also the base layer ethereum in the form of the EVM, and of course the roll ups of their own markets. Okay. And if you want a kind of very formal treatise on resource pricing and multidimensional resource spicing, this amazing paper, along with a follow up by Theo and his colleagues, is definitely one to look at. Okay, now let's do some case studies now in the last ten minutes, and let's see how DA markets interact with the base fee. And this is EIP four 8.4, the thing that I was alluding to earlier that I didn't talk about in the previous slide. Okay, so for EIP 1559, and when you have any sort of dynamic fee system where the base fee of the system gets modified over time, completely programmatically and completely based on the usage of the market, how do you set the target and the limit? We'll see how to set a concrete limit later, but first we can talk about what are the resource constraints, and we use that to set the limits.
00:12:13.170 - 00:12:47.436, Speaker A: So there's two different types of resources. One of them is burst resources. The other one are sustained resources. And these are kind of the two constraints that we can use to determine what our limits are. So what is a burst resource? It's something that happens over one block. In other words, something like, can I even execute this block within the block time? Can I verify this block within the block time? That's an example of something that would be a burst resource constraint. It could be the case that, say, a block is just too large and you literally cannot verify it within the block time.
00:12:47.436 - 00:13:14.320, Speaker A: Then of course, if your block is larger than whatever you can verify in the block time, the blockchain just won't work. So you'd probably want to set some limits based on that. The other one is sustained. So this happens over multiple blocks. So burst resources are only one block, not two blocks and not three blocks. It is one block. Anything that occurs over multiple blocks, things like state growth, for instance, the growth of history is some sustained resource that introduces a constraint.
00:13:14.320 - 00:14:01.850, Speaker A: So the target for EIP 1559 style dynamic pricing, you want to set this using the sustained resources. The burst resource constraints don't matter at all for setting the target. Where they come in is when setting the limit. You want to set this as the minimum of what you can, the resource constraints that are burst and sustained. Of course you want it to be the case that you never exceed the burst constraints available to you, because if you do, then the blockchain just won't work. And also you don't want to exceed over a period of time, which is where you set your limit. Well, actually, where you set your target, really, you don't want to exceed over a period of time, some usage of resources.
00:14:01.850 - 00:14:51.890, Speaker A: So just stake growth. Okay, now EFP 1559, the real bottleneck thing and the reason the target was chosen and the limit that was derived from the target is state growth, which is sustained resource. Right. You want the state to grow at most at a certain rate a year, because the state continues to grow and ever shrinks because we don't have things like state pruning or things like state rent. People have talked a lot about state rent in the past and it kind of didn't go anywhere. Sorry, Alexi, but the bound that we choose for the target is based on the state growth. Okay, now what if we don't have any execution? What happens if we want to price, such as an EIP 15, sorry, EIP 4844, whatever we want to price data availability.
00:14:51.890 - 00:15:23.620, Speaker A: There's no state growth. State growth doesn't matter for data availability because there's no state. There's just block history. So what resource would you use, and what would be the limits for the burst and sustained resource constraints for data availability? I want to actually answer this question. I'll leave that as an exercise for the reader. Okay, let's do another case study, which is very interesting. I had to ask Anatolian Merritt on Twitter about this the other day, because it turns out Solana doesn't work the way I thought it worked as of a couple months ago.
00:15:23.620 - 00:16:07.010, Speaker A: But how does Lin influence date rent? Like I mentioned, a lot of Ethereum resource pricing, a lot of the regulations, as it were, around resource pricing on Ethereum are derived from the state growth parameter. Ultimately, that constraint is something that's really significant. And how resources are based on Ethereum, Solana has some form of state rent. Or does it? We'll find out. So how does state work on or how does resource pricing for state on Solana work accounts on Solana, which are similar to accounts on Ethereum? There's some differences, but they're not relevant for this. Basically, accounts periodically pay rent for the state. Paying rent decreases the balance on the account over time.
00:16:07.010 - 00:16:51.560, Speaker A: Eventually it'll hit zero and be pruned from the state. So in this way, you don't have to worry that much about state increasing forever, because it means if you have some state, some contracts or whatever that just aren't used, well, eventually they'll stop paying rent and then they'll just kind of leave the state. This is amazing, but actually that's not how it works at all. But accounts can be rent exempt if you make a deposit, if you make some sort of minimum deposit, then the rent logic doesn't apply. And I say large in quotes because it's actually not that large. I think it's a few dollars. I don't know, but it's not a significant amount of funds currently.
00:16:51.560 - 00:17:41.090, Speaker A: But then again, Solana is doing its thing. But the state rent, as of a few months ago, this whole logic that I described in the first line here actually was removed. The way it works is that you can post a deposit same as you did before, and any transaction that tries to reduce the balance lower than this threshold just doesn't work. It just fails. So in this way, you don't need state rent. Rather, you need all accounts to maintain some sort of deposit. And this is actually interesting, because implicitly, a second order of consequence of this is that you have effectively capped a the size of the state, because each state element isn't just free to write to, and then that fee is recycled into the system.
00:17:41.090 - 00:18:22.380, Speaker A: Every state, every account on Solana needs to have some sort of bond associated with it, and that is very finite. There's no recycling. So you effectively cap the size of the state, which is an interesting solution. Now, assuming. Now there's a caveat here, because apparently there's some cases where instead of periodically deducting state rent, it just kind of happens all at once based on certain conditions over time, which we won't go over to. What is the challenge? And this last line here around garbage collection and preventing replay attacks was a big challenge for state rent. Implementing state rent on Ethereum, basically state run on Ethereum, they wanted to prune an element from the state.
00:18:22.380 - 00:18:51.430, Speaker A: But in order to prevent replay attacks on Ethereum, you need a nonce, right? Each account has a nonce. And if you completely remove that account from the state, now it's nonce would reset to zero. And then replay attacks would be possible if someone ever started using the account again. So how does lino do it? They actually don't use a nonce. Instead they just say, okay, a transaction has some sort of time to live. It's fairly short transactions within this time window, which is canonical to the chain. It's a consensus rule.
00:18:51.430 - 00:19:17.660, Speaker A: There can only be one from this account. So that's how you prevent short term replay attacks. And there's no long term replay attacks because every transaction basically has a very short time to live. So in this way, they don't need nonces. And not needing nonces means they can actually completely prune things from state. And that has allowed them to have this different model of pricing state than Ethereum. Now they can do this thing like the state run stuff where they expire things from state that Ethereum can't do, because Ethereum uses nonsense.
00:19:17.660 - 00:20:16.450, Speaker A: Okay, now how would things work with a modular layer, such as you have celestia with rollups on top, or you have ethereum with roll ups on top as an example. So this one is interesting because you have two independent markets. Rather than having a blockchain that provides atomically two markets, you have two blockchains or two systems, or more than two, that each have their own markets. And this is, this is different, of course. And it has some challenges. One of the challenges that we've seen in various roll ups on ethereum, for example, the challenges around how do they actually price the resources that you pay for on the l two? Arbitrum has a notion of l two gas. I think optimism has the same how you price l two gas in terms of l one gas, and therefore in terms of the fiat dollars that are required to actually run the system, is very non trivial.
00:20:16.450 - 00:20:57.298, Speaker A: Okay, last slide, I believe. Yes, last slide was the last 20 seconds, which is how, as an application developer, how does resource pricing affect you? You're not actually necessarily tied to just your hands aren't necessarily tied. You can do some stuff with resource pricing, one of which is whenever people do manual contract optimizations, they're working around the regulations off the gas schedule. Second one is gas token. Someone said, hey, there's a loophole in this regulation. We can exploit it to reduce the cost that we pay under certain circumstances. And it turns out those certain circumstances are quite numerous.
00:20:57.298 - 00:21:34.730, Speaker A: And gas token was eventually killed because regulators don't like loopholes. Or you can change the regulations. Tstore is an example of there were resources available, memory, but using memory in a certain way wasn't available in the EVM. Tstore doesn't actually use storage. It entirely uses memory on a physical computer. But you couldn't actually use this memory in a certain way because it wasn't exposed in the EVM. But through changes to the EVM itself, to the state machine rules developers, application developers pushed it through, and now you can use memory much more cheaply.
00:21:34.730 - 00:22:00.300, Speaker A: What happens if you're building an application specific chain, like using Cosmos SDK? You can actually go in, and depending on what your application does, you can go and change the gas schedule application to make it more optimal based on things we talked about today, or things that you see around, or if you use one resource very heavily, or one less heavily, for instance, well, you can be your own regulator. And that's the end. Thank you, everyone.
