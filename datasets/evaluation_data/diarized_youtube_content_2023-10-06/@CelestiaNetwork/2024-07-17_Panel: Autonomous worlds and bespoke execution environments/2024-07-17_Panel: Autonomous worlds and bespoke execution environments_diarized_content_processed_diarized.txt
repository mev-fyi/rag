00:00:01.800 - 00:00:14.130, Speaker A: So, as per usual with a panel, let's just introduce ourselves real quick and what we're building. I know some of you have already done the talk, but good to do that again, if that's okay. Maybe start from the end there.
00:00:14.950 - 00:00:25.250, Speaker B: Yeah. So I'm North Swap and I built happy chain, as you just heard about. It's a l two gaming chain that aims to make onboarding super easy for users and integration easy for devs.
00:00:26.320 - 00:00:41.260, Speaker C: Hey, everyone, I'm Terrance. I'm one of the co founders of Cartridge building Dojo, one of the co creators of dopors. Been building fully on chain games and towards this idea of autonomous worlds for about two and a half years now. Yeah, that's me.
00:00:41.640 - 00:00:42.160, Speaker B: Hello, everyone.
00:00:42.200 - 00:00:53.700, Speaker D: My name is Scott. I'm the founder of Argus Labs. We are building the world engine, which is an on chain game roll up framework designed with execution sharding to allow you to horizontally scale your games. The load agency at geolocal issuance.
00:00:54.320 - 00:01:10.740, Speaker E: My name is Billy. I'm the founder of Trifolabs. It's a new on chain game company. Prior to that, I was in charge of the Cosmos Network Foundation, Interchange foundation, and the Cosmos hub lead. But I began in the space building games with Clover's network back in 2017.
00:01:11.840 - 00:01:33.810, Speaker A: Okay, perfect. I'll start off with a bit of a softball question here. So how do autonomous worlds and flexing games actually push the boundaries of what's possible in gaming? And can you give some concrete examples? I know we just saw some very good examples of this, but if you would elaborate on this, maybe. Yeah, because you just went as well.
00:01:34.350 - 00:02:04.250, Speaker B: I was trying to find something a little bit different. Hmm. Which one's my favorite? I think what excites me the most is user generated content and the ability for players to create in these games very easily and then maybe even pay for the user generated content or have that become the center of focus of a game? I don't think that's what draw people to a game in the first place, but it's sort of the end game that I'm most excited about.
00:02:06.230 - 00:03:14.890, Speaker C: Yeah, I definitely agree with user generated content. On top of these type of open platforms that are enabled by the blockchain, where you have extensibility, composability, and permissionlessness by default, and you remove the platform risk from centralized providers, just enables much more interesting types of ecosystems to build on top of them. Like in the traditional gaming space, we've never seen the ability, or it's rare for the ability for someone to invest in someone building a game on top of someone else's game because there's too much platform risk associated with that. With fully on chain game autonomous worlds, that's completely different, right? You can build on top of anyone else's game with very strong guarantees that the foundation will remain there. And then I think along with that is very interesting monetization strategies that you can start to integrate because like financial rail are embedded directly in the blockchain, you can, as a user generated content contributor, you can monetize at so many different levels depending on how the platform decides to integrate this. Like you can have low level primitives that can be composed together and revenues from a game can flow to multiple different creators very easily. And that can be scaled in a way that was never possible before.
00:03:15.790 - 00:04:05.592, Speaker D: I'm very tempted to just like say the same thing with different words, but I think they already covered all of the things that I would say with regards to the interoperability and composable primitives of fully engine games. So I'll try to come up with a kind of more creative answer. So my take here is that fully launching games bring back the fucking around and finding era back to multiplayer games, because previously we were talking about these game servers. A lot of these technologies are built in early two thousands and they have been the same for almost like two decades. Some of the largest game servers out there still run in this windows server that you can't run in anywhere else. You have these windows OS and it was just these headless unity client and all of that. These are really, really archaic technology.
00:04:05.592 - 00:05:12.804, Speaker D: There has very little and very few of innovations in between. What fully launching does is really bring back this energy of trying to unlock new primitives from these games through again distributed systems, through a novel virtual machine runtime environment that allows you build more cool features using composability. And I think what most exciting to me is actually to introduce more like, you know, like larger range of freedoms into these massively multiplayer online games. As MMO game designers, we often talk about the degrees of freedom in an MMO game and like fully launching games is really kind of the end game, or I would say like the Macnam Opus, like imaginations of a lot of MMO game designers. Wherever you don't have any limitations on what you can actually do and what kind of emerging behaviors can form on top of your fully launching games. So not only there will be emergent strategy or emergent meta gameplay or like Min max strategies for your game, you will also have an interesting economic emergent behavior where people could be building your own banks. They can be building their own guilds, they could be creating their own marketplaces.
00:05:12.804 - 00:05:26.910, Speaker D: And all of this will, I think, at the end of the day, increases the potential maximum gdp of a massively multiplayer online game that have in the past been limited due to constraints that the game developers created upon their own users.
00:05:28.770 - 00:05:54.026, Speaker E: It's a long list of things. I actually have two reasons why. I think it's an exciting space to build on. And both of those reasons went into the name that I chose for the trifle. So the first one comes from this play theorist named Bernard Suits. And it's basically a player matrix, which says that players who play with the rules and play with the objectives, that's the norm. That's a normal player.
00:05:54.026 - 00:06:21.018, Speaker E: Players who play with the objective to win but with different rules are cheaters. They basically modified the rules or ignored them, but they still preserve the objective. Spoilsport throws out both. They walk right through the magic circle, but there's a fourth quadrant, and that's called a trifler. And a trifler preserves the rules of a game, but for a different objective. And I think that that's really at the core of what is interesting inside these spaces. It's also, like, at the core of the hacker ethos.
00:06:21.018 - 00:06:51.280, Speaker E: You know, this was built for a completely different purpose. But if I look at it this way and think of something else to do with it, I can use that entire structure for a different purpose and I can build on top of it and make something completely novel. So that's the trifler where trifle comes from. But the other one, of course, is just a trifle, is like something a little meaningless, something silly. It's a toy. And I think we all know that some of the most transformative technology begins looking like toys. So I thought beginning with toys is probably the most important way to sort of work in an industry in which we're trying to make transformative tech.
00:06:52.860 - 00:07:22.858, Speaker A: Okay, yeah, those all very good examples. I think interoperability and composability is something, of course, everyone immediately thinks of. But then I think back of a tweet, I think it was two, three days ago, of someone that said, has anyone already managed to bring their sword into another game? So are people, do you think, really waiting on this? And if so, how can we actually achieve this in a manner that is quite seamless for users? Anyone wants to take this?
00:07:22.994 - 00:07:53.726, Speaker D: Yeah, I think I'll take this one. I think, like, I think, like the whole, like, oh, taking this sword to another game is like, made like by marketers in the 2018. They've never really thought about composability and crypto games. And now we're like stuck with this like, you know, joke about this sword being bring to another game. And technically speaking, this is not a problem. These are technically trivial. But there are good game design reasons why you don't want to bring a sword from World of Warcraft to Eve Online.
00:07:53.726 - 00:08:54.914, Speaker D: For example, when we're talking about composability and interoperability in the context of fully unchained games, we often think about it more towards how existing game players can build on top of the existing game and expand existing game ecosystem instead of trying to bring over source from a different game which has completely different physics and rule sets and might not even be compatible. Sure, things like cosmetics you can do, and it's very trivial, but I think the whole idea of bringing these swords is somewhat of a distraction. And I think there are more interesting things that you can do by allowing the players to extend the gameplay environment using smart contracts, you know, let's say building kind of these banks or building these like cooperative systems within the game, creating systems like, you know, let's say a mercenary market or something like that, without having to like, you know, ask a game developer for like permission, like, oh, I want to add this feature. So to summarize, it's like, I think composability in the context of a fully onchain game will kind of start being.
00:08:55.042 - 00:08:56.586, Speaker F: From within the game itself.
00:08:56.738 - 00:08:57.938, Speaker D: And then maybe as like the fully.
00:08:57.954 - 00:08:59.578, Speaker F: Launching game space matures, you're going to.
00:08:59.594 - 00:09:10.290, Speaker D: Have like these like on chain game publishers and these on chain game publishers could coordinate interoperability, perhaps in their portfolio games and from different game studios under their umbrella.
00:09:10.590 - 00:09:12.502, Speaker F: And then I think a lot of.
00:09:12.526 - 00:09:25.530, Speaker D: These interoperability across random games, I think is more of like a pie in the sky. And I think it's oftentimes kind of more a party trick and less so about being practical and relevant to fully launching game developers and players.
00:09:26.160 - 00:09:59.190, Speaker E: I think there's also this kind of cart before the horse aspect of it. So if you look at that level of composability as being similar to user generated content, you still need to create value in the game to have that initial player base, to have them invest enough interest, care and value to care about moving it somewhere else. You know, if you build Minecraft without the actual playable game, you don't have a successful product. Like, you have to have a game which is fun inside of there to build up the community, to build up the value to build up the interest in making user generated content.
00:10:00.370 - 00:11:01.060, Speaker C: And I'll add just one thing that we've noticed inside of the dojo ecosystem, where we have the loot realms ecosystem that are producing a bunch of different games that are within the same lore, but even within there, and even though Dojo as an engine is designed to be natively extensible and composable, most of these teams are building their own instances of the realms world with their games inside of it because it's too early on to kind of ossify these, like, foundational layers and start to share them. And I think, you know, to Billy's point, like, once there is something very successful that has a lot of tension and has value, then that will essentially, like, ossify as like and become the canonical implementation for a particular lore that everyone else will start building on top of. To have exposure to that audience that lives already inside of that world until that exists, is not a whole, like a super compelling reason to basically take on the dependency of other teams. Like during this very early iterative phase of development where you want to have a lot of velocity because it definitely slows things down a lot.
00:11:02.400 - 00:11:05.140, Speaker B: I got absolutely nothing to add. I agree with everything.
00:11:05.440 - 00:11:21.990, Speaker A: Okay, perfect. We're talking here about indeed card before the horrors and those types of things. So if so, are there still some cultural technological gaps that still exists that we would need to solve before we can realize the full potential, of course, of what we're discussing here today?
00:11:22.810 - 00:11:23.706, Speaker E: Yeah.
00:11:23.898 - 00:11:24.778, Speaker A: What are they?
00:11:24.914 - 00:11:27.002, Speaker E: Every single talk today was about those problems.
00:11:27.066 - 00:11:30.058, Speaker A: So what is, in your opinion, the most important one?
00:11:30.234 - 00:11:35.082, Speaker F: Well, I think, like, I think I'll answer this question by not answering a question.
00:11:35.266 - 00:11:35.970, Speaker A: Wonderful.
00:11:36.090 - 00:12:02.802, Speaker F: And like, I think, again, like, the way that I think about video games are like, kind of like an artist, right? I think, like, you don't really ask an artist, like, you know, what. What color of paints don't exist yet. Like, you just don't know until you have to paint something. And then you realize, oh, I don't have this like, color of color ink or like, I don't have these, like, you know, paint or I don't have these, like, you know, type of brush that I want to achieve a certain stroke or a certain look. Right?
00:12:02.906 - 00:12:07.816, Speaker D: So from a perspective of game developers, it's all tools in a toolbox.
00:12:07.898 - 00:13:07.588, Speaker F: And so the more canvas, the larger the canvas that you have, the more variety of brushes, the more powerful that your brushes, or like your medium, et cetera, or like, your tools, the more kind of games that you're able to build, right? And so I think like right now we're at the point of the fully launching games where a lot of the problems are really kind of like basically solving the table stitch problem that is already solved with web two games, right? So in my talk, I talk about, you know, scaling to like, you know, tens of thousands of users like this, like geo latency and like time to action and like all of that having these like fast block times, like improving the developer experience, et cetera. All of these things are like table stage problem that currently exists in like fully launching games when let's say someone that brings in the mental model of let's say like, you know, their web two development and they're facing these issues, they want to have these things solved because like I. Otherwise you'll feel constrained in the kind of things that you're building. This is have always been the topic for any on gene developers out there.
00:13:07.644 - 00:13:10.156, Speaker D: Is like if someone wants to create.
00:13:10.188 - 00:13:12.532, Speaker F: A new game, before you even think.
00:13:12.596 - 00:13:14.156, Speaker D: About what game you want to build.
00:13:14.228 - 00:13:37.860, Speaker F: You'Re already so frustrated thinking about the constraints that you're going to have when you're building a fully on chain game. And I think that's one of the key priority that we have at Argus when we were building the world engine is to reduce significantly the amount of constraints. And then after that, this is when you will see new primitives start flourishing and people being able to chase their creative freedom to the fullest extent.
00:13:38.360 - 00:14:26.402, Speaker E: But yeah, I think even deciding which problems are worth solving is of course one of the most important steps in that. And it's why we found it really important to be first and foremost a game studio over a platform or necessarily like an infrastructure project. You need to have a really tight feedback cycle between I'm trying to make this game and I want to make it fun, like what do I need to make that happen? And that should inform the sort of technical decisions. I think it's always tempting to sort of build out ahead, assuming that you know, what people want, especially in the blockchain space. And I think it's really dangerous. And so I think that what's the most important tech thing is actually most relevant to the specific game that you're trying to make. Like in my talk I talked about most of the games we see today are essentially digital board games, which is great.
00:14:26.402 - 00:14:35.830, Speaker E: I just, I wonder how many of those were sort of retrofitted into the fact that those are the only kinds of games you can make. But if you really want to make a board game and you begin with that. Actually, we're kind of ready for you.
00:14:37.330 - 00:15:09.806, Speaker B: Yeah, I would divide the issues in three buckets. The first one is onboarding, because I think we have games today that are pretty fun, but struggle to find their audience because it's just too hard to get playing. That's why at happy chain we're focusing on. On building this onboarding first. The second one is scaling, because once you reach a certain amount of player, the current technology we have doesn't scale. I think onboarding is more important because onboarding is a problem of finding success. Scaling is a problem.
00:15:09.806 - 00:15:42.520, Speaker B: When you have success, then you have to solve that. And then the third one, which maybe sometimes gets less attention, is death by 1000 paper cuts. So we have a lot of tech that's kind of there, but not really. And you realize there's a lot of limitations that you're not aware of. So it's going to take you one week, two weeks to integrate something that should have taken a few hours, and you multiply that by ten or 15 for everything you need, and suddenly you spend six months just building support for your game and not really like the game itself.
00:15:44.540 - 00:17:04.928, Speaker C: Yeah, I think my perspective is, I mean, I think we're all obviously very focused on the technical side of things now because it's the easiest to talk about. And I think we have pretty tractable solutions, and it's a matter of execution to be able to scale the execution context of blockchains to support these kind of experiences. I think if you look historically at games, every platform shift has been driven by some distribution innovation. And all of the work that we're doing rests on the assumption that there is some distribution innovation enabled through the blockchain. And I think that there definitely is something with crypto economic incentives to solve like, you know, a really critical problem for games, which is basically this cold start problem of being able to attract players to reach some critical mass to turn it into a sustainable game. But we're so early in the phase of building on chain games that no one has really even started to experiment with. How can we start to use these crypto economic primitives that are only enabled by the blockchain to kind of solve this and build some unique distribution advantage, which is going to be really critical because things like the App store or the Steam and consoles are entirely hostile to on chain games and or any crypto enabled applications.
00:17:04.928 - 00:17:32.028, Speaker C: And it might be a while before they kind of come around to that. So we need to have something incredibly compelling to build new distribution channels through web, through progressive web apps where users is a strong and value proposition that they're willing to kind of go around existing structures to, to interact with these experiences. So I think that's like, in my opinion, probably the, you know, the final Horseman, the biggest challenge that we ultimately all need to figure out how to solve before we can be successful.
00:17:32.164 - 00:18:18.540, Speaker E: Well, can I just speak for a second on the topic of distribution? I think it's really interesting. I've heard that a lot, and I imagine it's true that all the phase changes in gaming is always, you know, with an update and distribution. And I agree that I think we have that opportunity, and I think we've seen it partially, but I don't think we've seen it taken advantage of enough. And one of the goals for our first game is actually that it'll be fully on chain, so you can take advantage of third party marketplaces as an interface to the game. One of the other framings for on chain games I really like are client agnostic games. You know, the core logic lives somewhere immutable and accessible, but the way you access it is sort of up to the user or variable or you can imagine as many different ways to it. And so trying to sort of begin with a game, that there's the default way to access it.
00:18:18.540 - 00:18:31.500, Speaker E: Sure, it's our domain, etcetera, but having it hooked into this alternative distribution method, which we already do have through NFT metadata, was a really exciting concept that I would love to see sort of explored further. And we hope to push, too.
00:18:32.280 - 00:19:01.660, Speaker A: I'm glad you guys touched upon distribution and also about things like the Apple Store, where there's a lot of censorship and a lot of moderation. But of course, that then brings into perspective the other side of fully on chain games where you want to be very decentralized, but you also don't want to allow certain things to happen. We see this also now with AI agents, marketplaces and so on. So what is your perspective on the, on the battle between moderation and decentralization, and how do you plan to tackle that if you want to tackle that at all?
00:19:03.840 - 00:19:29.120, Speaker B: I think decentralization can solve that as well, in the sense that you could have a protocol that's on chain, that is fully neutral, it doesn't censor anything. But then on the front end side, you can host different front end, different interfaces to access the same content that then can have their own filtering and censorship guidelines.
00:19:30.540 - 00:20:37.142, Speaker C: So, yeah, I don't think this, people often pose this as like a unique problem to the blockchain and I think it's not. It's like a problem everywhere, right? You see it on Twitter where they have like dedicated engineers trying to filter scammers, and the scammers just move faster than them. So I think there is actually a competitive advantage in the decentralized context with autonomous worlds and having these open ecosystems that your community can start to innovate on filters to apply to the event stream or whatever, to curate what is the interesting components and remove the spam from a particular type of experience. And that could manifest in identities and reputations and all these types of things to gate and find smaller communities within an ecosystem that you want to interact with or new clients that are built on top of this. And even in the context of, of AI and machine learning and bots, like I recently saw, I think it was GDC last year, they now have computer monitors with computer vision algorithms built directly into them. So they're just, you know, now you're even with existing approaches to anti cheat, where you're kind of monitoring like the runtime and trying to see modifications to the binary. This is just layered entirely on top of the game.
00:20:37.142 - 00:20:49.746, Speaker C: It's impossible for, to detect by any of the existing anti cheat software. So I think this can become a bigger and a bigger problem in the future for everyone. And it's certainly an interesting question. I don't have a good question.
00:20:49.818 - 00:21:13.278, Speaker A: Maybe to challenge it. A bit like the anti sheet, right? So those types of models, they are centralized and offshane, of course, let's be honest, they don't want to open source that at all. If that is all on chain, don't you then expect certain, yeah, even AI models and so on, to be able to circumvent that in a way to go around that. If everything is truly on chain, how do you then prevent that?
00:21:13.454 - 00:21:55.320, Speaker C: I think it will be reactive. I mean, I think that anti cheat as exists today for traditional games is like a low level process happening at the binary level, trying to detect modifications to the game's runtime. Right. When you have cheating software that essentially just emulates a human and how they interact with a computer, it becomes almost impossible to detect. And then you have to look at probability distributions and try and have some statistical methods to filter these things out. I think the same will be true in the blockchain context. You have all this open information, the communities can come around and figure out the particular run was way out of distribution and we want to provide more scrutiny to it.
00:21:55.320 - 00:22:15.400, Speaker C: I think it's an interesting open area of innovation where all this information being public allows people to define what they want to be a part of the meta and allowed to be happening inside of a particular instance of a game or interpretation of an autonomous world. Just throw away a lot of the things that you don't want to interact with.
00:22:16.660 - 00:22:58.960, Speaker B: Yeah, I pretty much agree. I think some game models are never going to be a great fit for a blockchain like a first person shooter. It's going to be difficult to know that someone is not using a namebot. Like Terrence said, you need statistics and it's quite difficult. There are some things you can do, but I think it's not going to be the strongest fit. So we should focus on games that have more moving pieces and where these machine learning models we have today can't really learn the thing because it's just moving too fast underneath it. And I think that can lead to some very interesting game design decisions as well.
00:23:00.180 - 00:23:05.176, Speaker D: Well, I think my synthesis out of all this is the best part of fully on chain games is like basically.
00:23:05.248 - 00:24:15.076, Speaker F: Letting the market or the community itself create a shelling point and create your own agreement. In terms of this is basically going to be the canonical marketplace or this is the primary way we're going to get this game client or gameplay to the hands of the users. Instead of having to go through this top down oligopoly of Epic Games Store Apple or Google, et cetera. We're already even seeing this market structure being shift even in traditional games itself, right? So if you guys play games like, you know, you'll notice that a lot of like more and more game publishers are starting to make their own like game launcher, right? Like, you know, back in the days, everyone just installs Steam and just like, that's like how you get all of your games. But with modern like game publishers like Riot and like, you know, Bethesda, it's all of that may increasingly they are building their own launchers and because they're the, they want to have the power to define their own rule sets, they want to have capabilities to modify and distribute their games in a way that they want to distribute it. And maybe they want to have different take rates on the fees, etcetera. They want to make it easier for their players to trade their items, so on and so forth, by having your own rules.
00:24:15.076 - 00:25:28.170, Speaker F: And I think that this is already kind of the natural way that the game industry is going to shift. With more and more indie game companies not wanting to basically be stuck in the kind of rules that they didn't create. They will kind of like prefer to actually have more options and being able to actually let the community decide which, like, distribution mechanism or which like, you know, platform or like, you know, App store that they want to use and therefore agree on a shared kind of like, you know, rule set and constraints they want for games. Right? So as like, you know, we previously discussed there might be some games like, you know, for example, one of the games that one of my friends made, like Kamigochi, willingly just embraced bots and all these AI's and whatsoever, because they designed their games to allow these bots and AI to proliferate. And it's a part of the gameplay itself. But some games, example what Nordstrom said, counter Strike, a first person shooter, they probably don't want as much bots and AI just playing the games instead of the users. So yeah, I think the best part about fully unchained games or crypto games probably is to allow the players and for these new market structures to exist instead of it being prescribed to game developers.
00:25:29.310 - 00:26:00.788, Speaker E: The bug question is really interesting. I think we could probably do a whole panel on it, but I kind of see it in maybe like three different areas. The first sort of accelerates all the way into just bots versus bots. All games have to be built bot native. We have robot war tv shows. Why not bot games? The question then just becomes what games are entertaining enough to watch bots play each other? If you think about basketball, humans have a pretty good idea of how hard it is to play basketball, even if they don't do it very frequently. So when you watch a professional, you're like, wow, that was really cool.
00:26:00.788 - 00:26:33.888, Speaker E: So we have to find sports or games that it's actually entertaining to watch bot versus bot. The other side is, oh God, my mind's going a little blank. Well, you can always kind of try to remove the incentives. So basically, bots have been able to beat games for a while, right? People still play games because games are fun. You don't necessarily have to play at the highest level of competition to enjoy a game. You know, I do puzzles all the time. I know that I could solve this puzzle with a computer.
00:26:33.888 - 00:27:24.904, Speaker E: I know that I could look up the answer, but I still spend the time doing it. So I think that there's still a lot of opportunities for games like that. Of course it opens up the question, well, what's the point of being on a blockchain anymore? Where's the incentive mechanism? Where is all this coming from? But the same way that advertising was a solution for content, it's just getting someone's attention. I think we have a lot more opportunities to monetize attention in ways that aren't as specifically as extractive as advertising. Oh, I know. The third one, of course, is going in the entire different direction, which is that the only truly equitable way to allow players and bots to participate with each other is if random number generators are involved. And then you're basically fully in the casino mode, which is maybe not terrible as well, because that random number generator also has a lever, it can be fully turned on, and then you have a slot machine, or it can be somewhere in the middle, and then you have backgammon or poker, things like that.
00:27:24.904 - 00:27:39.720, Speaker E: Things that destabilize, still make it possible for humans to have fun playing against the bot, who, on average may beat them over time. But the idea that you beat a player that's better than you is so exciting, and it's still enough to, like, I think, get you in that arena when you know you have a chance.
00:27:40.180 - 00:27:55.480, Speaker A: Yeah, I agree. Maybe small side question, and you said randomness, how do you. And unpredictability, how can you include that fully on chain without. Yeah, and while still maintaining fully on chain verifiability.
00:27:56.220 - 00:28:09.398, Speaker E: I feel like that's a perfect question for this conference, because it's just, we're going to engineer away that way. That one, they'll just go away. It'll be solved through some techniques. There's new techniques, there's other techniques. I don't think that it's unsolvable, but.
00:28:09.414 - 00:28:13.430, Speaker A: It'S important, right, to have this randomness.
00:28:13.470 - 00:29:11.020, Speaker F: Bar is, I think, at this point, fairly solvable. Like Nord Swap, I think, is working on randomness stuff, but there are things like verifiable random functions, for example, that allows you to have randomness on chain. So this was an issue if you were in 2018 2017 solidity era, where chain link doesn't exist and whatever, and all you have is block timestamp to seed entropy, then you're kind of at the hands of the block producers who actually give you randomness. But these days, I think there are a lot of primitives to solve randomness. The key question that is left is, how fast can we produce randomness, is the part that I think a lot of infrastructure are working towards, especially for games, because if you want to, let's say, have randomness happening at every, let's say, on a millisecond level, that you can't have a fire viable random function that submits the randomness to the blockchain only once every 15 seconds, for example, so, yeah, but I think randomness is one of the, I guess, the more easily solvable problems within fully on gen games.
00:29:12.000 - 00:29:46.622, Speaker A: Okay, maybe then turning it more into a positive thing around AI and bots. Earlier this morning, Stani from lens was talking about how AI can help them do also some moderation, for example, as you said, I think Taran's community could, for example, vote on certain parameters and they would just scrape it. Do you see other opportunities for AI agents? I know that everyone is hyping up AI as if it's the second coming of whatever, but do you think that we will see this in the near future where AI agents will be shaping these autonomous on chain worlds?
00:29:46.806 - 00:30:32.756, Speaker C: I think there's a lot of interesting intersections between on chain worlds and autonomous worlds and on chain games and AI. The one that I'm actually most particularly excited about is just raising the level of abstraction so that people can contribute to these through like generating code or assets and stuff like more offline processes that introduce content into the world. I think autonomous agents, or AI agents on chain, in my opinion, is not really practical at the scale that you need to make interesting experiences right now. Just like verifying the execution of the models that you want to use. It's just not practical. Definitely not with ZK. And you can do some stuff with optimistic stuff, but it introduces a lot of additional complexity to the stack.
00:30:32.756 - 00:30:56.130, Speaker C: I mean, I do think that there's much simpler models that you can. You know, there's a lot of tooling now being built around, taking models from like Pytorch or something, exporting them to be run on chain. And there's a lot of stuff you can do with just much simpler models as well inside of games. But yeah, I think it's like a interesting new space opening up. I'm mostly focused on how people can contribute with it.
00:30:56.590 - 00:31:41.652, Speaker F: I guess one thing that I'm somewhat. I think I am somewhat annoyed by, by a lot of these. The rise of the LLMs are kind of like assuming that AI agents can only be achieved through these arbitrary large language model. When Tron, which is an arcade game from the 1970s, have AI. But it's just not an AI agent powered by a large language model, which is like basically bringing bazooka into like a knife fight. Right? And realistically here, like, you know, game state machines are like one of those things that are very easy to model for a computer. And based on the heuristics of these, like, you know, the game state, you can actually build, you know, an AI to a part of the game itself that you don't need to rely on these like large execution model and all of that.
00:31:41.652 - 00:32:53.770, Speaker F: These large language models are going to be great for, let's say, if you want to generate quests, which is one of the things that I'm most fascinated by based on this anime that I really like and I named my company after called Sword Art online, where you can have AI to generate new content for the game, et cetera, but not necessarily as replacing the AI bots that is playing within those games that can be easily encoded as a part of the tick runtime. If your chain of choice, if you use a world engine, you can have kind of bots encoded into the block like transition function and all of that. And that will allow you to have like NPC and bots that are like, you know, running around your game in real time. And all of this doesn't really need to rely on like, you know, fancy large language models which are a black box you can just use like dumb if else statement, right? Like you don't need a large language models to create a bot to play. Like, I don't know, like a Tic tac toe game. You can just like write this with eval statement. And so that's like kind of basically, I think the part that I think like when everyone's talking about AI agents or like AI in general with, in the context of games, like people's, like will, like, I think the natural way of doing that is through like, you know, decades of like how we've built, you know, in game AI's.
00:32:53.770 - 00:33:11.230, Speaker F: And I think like adding large language models or like what people these days call AI agents are, I think, like going to introduce some new dimensions for like storytelling and so on and so forth. But I think less so for the actual gameplay itself. And yeah, I guess that's my hot take.
00:33:13.210 - 00:34:03.640, Speaker B: I'm generally more bearish on AI than other people, but I'm really curious where it will go. I think there's potential and there's something we talked about. So there's like bots that already exist for games. Like how can we leverage them? Can we watch them? Is that fun? Can we maybe use them as part of the strategy where every botanical is a different strategy and an underlying game and then there's a broader game on top of it where you select the various strategies that you want. I would be really excited with agents that are like autonomous and they create this world that is moving without you. I think today it's just too easy to just hijack the bots and make them do some bullshit. But you could even do that in a way that's not at all like driven by the technical innovation of the last few years.
00:34:03.640 - 00:34:36.166, Speaker B: And there are some people doing that, just an enormous amount of work. But just like a rule engine that says, you know, when you piss this person off, this NPC off, then reputation lowers and then it has all kinds of repercussions are just like really normal code. It just gets involved pretty fast. I know some web two games are doing that. One of those is like super horrendous, like ascii graphics kind of thing. It's also dwarf fortress, which is also horrendous graphics, but that's another one that's very famous. And yeah, I'd be excited if we could have that technology.
00:34:36.166 - 00:34:40.330, Speaker B: There were some people working on it back in the day, but I don't think it went anywhere.
00:34:42.030 - 00:35:27.620, Speaker E: That question makes me think of the use of AI or large language models in two different ways. One is like LLMs as a game space, which I think are really interesting. I played a game recently where you are basically trying to convince an LLM to reveal their name, like Rumpelstiltskin. It's like such a really bizarre, diverse player space to work with. So I'm actually bullish on verification of LLMs on chain too, just from seeing some of the updates in the last years. So I don't think it's that far off. To think that these extremely versatile lore based LLMs could be actual player environments with the right prompt can be really interesting and the actual aspects of it still private as necessary on chain.
00:35:27.620 - 00:36:28.290, Speaker E: And then the other direction is basically the bot wars thing, right? So you have that possibility going in that direction. Of course this is like kind of scary if you're a game developer and you're trying to preserve the human player aspect of it. But I had a conversation with somebody yesterday who was asking me about like, I want to make this library of models that are good at playing games and people like maybe a library for them. And the first thing that I thought of was like, actually, you know, I almost built a bot while developing our game because end to end testing with a game is so difficult. I mean, you end up sort of having to build a bot if you want to be able to test your game in any sort of complicated method. And I mean, of course then you're like, am I giving in and making this evil thing that, you know, I'm going to try to contain it inside my repository and hope nobody ever gets a copy of it because they'll be able to use it against me or something. But if you let go of that fear, I think it's an extremely useful tool, possibly to have an LLM or a trained model on your game's logic, to be able to actually use it in testing environments.
00:36:28.290 - 00:37:05.032, Speaker E: And then you take that a step further and you can do the entire playtest cycle if you have a model which is able to interact with your game. I mean, playtests are one of the most important parts of making a game, and it does nothing scale. You have to sit down and you have to really interact with that person playing the game. And that person also has to be, like, fresh to your game. You kind of can't do it twice on the same person. So the idea that you could have, like, an infinite number of completely fresh, naive play testers go through and massively run through your game and give you back feedback like this is just way too easy, way too hard, totally confusing. I'm an idiot LLM, but I should be able to do it.
00:37:05.032 - 00:37:09.458, Speaker E: Like, that's a really exciting development for not necessarily on chain gaming, but games.
00:37:09.514 - 00:37:37.954, Speaker A: And models themselves fully agree, actually. So we're running almost out of time. I just want to have one more question. Panels often get like, this reputation of everyone is agreeing with each other all the time, and it doesn't add value. So I would like to just ask you after now we're almost at the end of each cc the entire week, what is the most controversial opinion you have after this week that people can come up to you afterwards and. And ask you about? I know it's a difficult question, so.
00:37:38.122 - 00:37:40.830, Speaker F: We should never host a conference in Brussels again.
00:37:41.490 - 00:37:42.978, Speaker A: As a belgian, I would never host.
00:37:43.034 - 00:37:45.030, Speaker F: A conference in Brussels again.
00:37:46.010 - 00:37:47.550, Speaker E: I don't think that's controversial.
00:37:48.170 - 00:37:49.110, Speaker F: My bad.
00:37:52.010 - 00:37:57.430, Speaker E: I actually don't think it's controversial here, but I think premature decentralization is the root of all evil.
00:37:58.290 - 00:37:59.510, Speaker F: That is not controversial.
00:38:02.260 - 00:38:28.210, Speaker C: Yeah, I guess it's probably not controversial either, but I think there needs to be a much stronger focus on actually bringing interesting experiences to users and not just building. We have so much over provisioned capacity at the infrastructure level now, searching for someone for 1gb blocks and these types of things. We need people to actually use this stuff now. I think it should be a more increasingly important focus.
00:38:31.830 - 00:38:42.810, Speaker B: Well, I guess the one thing I say all the time is we can get normal people to play on chain games, and some people agree, but quite a lot of people disagree. So I would say that's my spicy opinion.
00:38:43.350 - 00:38:48.374, Speaker A: Perfect. Thank you. Everyone. For being here. And, yeah, thanks for moderating.
00:38:48.502 - 00:38:49.046, Speaker C: Thank you.
00:38:49.118 - 00:38:49.350, Speaker E: Thank you.
