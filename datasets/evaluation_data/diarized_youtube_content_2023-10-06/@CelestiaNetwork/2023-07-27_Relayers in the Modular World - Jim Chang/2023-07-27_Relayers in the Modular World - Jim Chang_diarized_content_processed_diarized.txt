00:00:02.490 - 00:00:51.082, Speaker A: Awesome. Well, thanks for the Celestia team and the Maven team and all the other sponsors for having me up here. Really excited to be talking about something that I don't think many people actually talk about in the interoperability space, and that's relayers, and how relayers are incredibly important to kind of the cross chain ecosystem, but also incredibly important as we scale into a modular world. And there's more and more kind of modular layers that need more coordination. And before I start, just a little bit about me, I'm Jim. I'm the co founder of Catalyst, which is a cross chain liquidity network. If you guys were here for the RAS panel earlier, they're talking a lot about liquidity and interoperability and how that's really important to kind of this role as an ecosystem world.
00:00:51.082 - 00:01:32.842, Speaker A: And so we're trying to solve that. I'm also a Defi and Dao builder, and so I've been building this space for coming up on six years now. Most recently, I was a product manager at Aave, and I've contributed to a few dows like pleaser and gitcoin as well. So kind of have loved and known this space for a long time. And I'm also a crosschain enthusiast, which I don't really know what that means, but I read a lot of blog posts a little bit about catalyst, although we're not going to talk too much about it today. We call it permissionless cross chain liquidity for the modular future. Basically what that means is we have sovereign liquidity that lives on different roll ups, and they're able to actually coordinate permissionless cross chain transfers with one another.
00:01:32.842 - 00:02:24.566, Speaker A: And we can connect all ecosystems, so not just EVM, not just celestia, not just move, we can connect all of it quite trivially, and we do that through integrals and other kind of complicated math, but not going to kind of go over the details of that today. Instead, we're going to talk about relayers and why they're important. And so a little bit of context. I have liked relayers for a few years now. I think it's probably the unsung hero of really cross chain and interoperability. Broadly, relayers are called a lot of different names. You can call them agents, solvers, underwriters, what have you, but basically it's just an entity that moves packets and coordinates any sort of off chain data in between two different blockchains.
00:02:24.566 - 00:03:20.534, Speaker A: And so pretty important in the context of moving between blockchains, as you can tell. But why are relayers important and why are they going to be even more important? It's because of the modular blockchain stack, right. I think all of you guys are familiar with modular blockchains, hence why you're here splitting up all these different kind of tasks that a monolithic blockchain does into three separate tasks. But I think now there is a bit of an evolution on the thinking of it and it's less about there's three different tasks, but it becomes four different tasks, right? You have transaction ordering using shared sequencers. And so now there's four parts of the modular blockchain stack. But, uh oh, what do we have here? If you guys were here earlier in the week and you guys attended Polygon today, you would have seen that polygon kind of unveiled their stack. And their modular blockchain stack has a few other names.
00:03:20.534 - 00:04:15.206, Speaker A: They have things like staking and proving and interoperability. And so if you look at it holistically and you see kind of the modularity of blockchains and more specialization and more specialization, it starts to look a little bit more like this. And so we started off with three things that modular blockchains could do. Now became four things, now becomes six things or seven things. You have proving you might have liquidity, stakingrestaking, you might have interoperability. And that gets a little complicated, right? And I think what becomes more complicated about it is as there's more and more modularization and more specialization of these blockchains, there's more complexity in the verification. If you're trying to send a transaction from one chain or another or one roll up to another, you actually have to verify all the different pieces to ensure that this is a valid transaction.
00:04:15.206 - 00:04:43.094, Speaker A: Right, to verify the state verification. So it used to be okay, just moving from chain a to chain B. But when you go to a monolithic blockchain, you have to make sure there's DA proof. With a shared sequencer, you have to make sure there is a transaction ordering proof as well. And it gets more complicated now you need an execution proof, you need a settlement proof, you need interoperability. All these things need verification. And how do you do that? I think the simplest way to do it is just to have native verification, I.
00:04:43.094 - 00:05:22.770, Speaker A: E. You have light clients that are pointed to one another. And so if I were to send one transaction in this new modular world, I'd probably have to have six forms of verification. And that gets very complicated very quickly. And how do we pass all those light client header updates to all those different layers? How do we actually coordinate the communication between these execution layers and one another, it's with relayers. And so you're starting to see, okay, wait, relayers are super important. They're going to become more important, and they're kind of everywhere.
00:05:22.770 - 00:06:29.062, Speaker A: And so is it all relayers when you look at the modular blockchain stack? Not quite, but yes, and I would say it always has been. And so at catalyst, when we think about building cross chain solutions, we think it's really important to build a really good relayer system. In fact, we've had the privilege of working with every interoperability protocol, assessing their relayer systems and seeing that it's not quite good enough. And so we kind of took it upon ourselves to think about, okay, what is a really good relayer system, and how do we bake in the incentives for a good relayer system into this cross chain sovereign liquidity network that we're building at catalyst? So a little bit of a public good, a little bit of a side quest, so to speak, but something that we love and feel very nerd snipe by. And so what are good requirements for a relayer system? One, calls always arrive. It's good when you have things queued up in the outbox and you actually receive those messages. Two, pricing is transparent and fair.
00:06:29.062 - 00:07:05.442, Speaker A: You actually know what you're going to be charged and you know what the margins are, you're going to be charged. Right now, I think a lot of relayers are public goods in the sense that they're lost leaders. You have foundations that run them at a loss, but I think at scale, you probably want to bake in some economics to it. And then lastly, relaying sufficiently decentralized. And it's not decentralization for decentralization sake, there's actually a really important reason why we need that. And I can talk about that a little bit later in the presentation. And so the first thing, double clicking, we think a lot about what are the big questions behind designing a really important relaying system.
00:07:05.442 - 00:08:05.730, Speaker A: And then when you break down the requirement of having calls always arriving, you realize that there's kind of two pieces to it. Calls need to arrive, but calls need to arrive quickly, right? They need to arrive within a reasonable time span, or else you add latency. And therefore, what is even the point of having this happen? And so at catalyst, we were kind of under the assumption that things were just relayed, right? They just happen. And if you're in testnet may be the case, but if you're in production, if you're on main net, not typically a case, right. And so a little bit frustrating there. And so we realized that calls don't always arrive within a reasonable time span. So how do we incentivize this? Right? Are we building a system in which relayers are penalized for not having timely delivery of messages? Or are we building a system in which it's more of a kind of a willingness to pay, users have a willingness to pay some sort of bid ass system in order for relayers to be relayed.
00:08:05.730 - 00:08:56.342, Speaker A: We're kind of still designing the system. And the second piece is, what if calls don't arrive in a timely manner? Right? And so calls should be able to be canceled or timed out. But what happens when a message gets stuck? Do we need to implement some sort of recovery system? Do we need to implement some sort of bidding system? How do you design a mechanism in which people understand, or users rather understand or applications understand, when relayers are taking too long and you just need to pull the whole plug and try it again? And so that's something that's really kind of top of mind for us when we think about designing a good relayer system at catalyst. The second piece is pricing being transparent and fair. Like I said before, relaying is free right now. Well, not free, but free for the user. And it's being paid by someone.
00:08:56.342 - 00:09:44.694, Speaker A: And it's usually the core teams of these interoperability protocols or the foundations, or subsidized by the validators or what have you. But I think in the end state, it's really important to have some sort of economic system for this. And so when you're implementing economic system, you want it to be fair, you want it to be transparent, and people want to know how these routes are actually priced. And so there's a couple of ways you can actually think about pricing a route for a relayer system. You can have it be an algorithm, right? You go, okay, here's all these different factors of this is what the gas limit is, this is what the gas price is, this is what the consumption is, this is what the congestion of the network is. You sped out a number, right? And people just take it, that's totally fine. Another system is having a certain sort of bid ask kind of order book, so to speak.
00:09:44.694 - 00:10:58.974, Speaker A: And so users have willingness to pay, relayers have willingness to accept certain services within a certain threshold. And so it starts looking a little bit more like an order book, which has, of course, mav implications that I'll talk about in a second. Or you can have user determined bounties, right? And so I think this one's pretty popular within the IBC ecosystem. You have a standard called ICS 29 that has this kind of user escrowed bounty where you're saying, hey, the user knows how much they want to pay for a cross chain packet and they'll put it up and then the relayer will take it. Right? And kind of the criticism of that is like, how do users know, the users know they're going to pay one dollars, $2? It's kind of hard to say. And you're kind of leaving a lot of money on the table in that regard. The second piece is prepaid versus pay at the end, right? Are you going to kind of load up a balance and have someone withdraw from it? Are you going to actually kind of pay them at the end once they do this delivery? If so, there's all sorts of implications, right? One is, what token do you pay it in? Do you pay it in the origin chain? Do you pay it in destination chain? Do you pay in USDC? What is the price risk of these relayers? And if there is kind of a price risk, how is that fairly priced? Right.
00:10:58.974 - 00:12:12.354, Speaker A: What is kind of the oracle, in order to have some sort of mid market price in order to do the swap, let's say if it's from USDC to eth or it's from eth to matic or what have you. And so you're starting to see that, okay, so a very simple kind of idea becomes very complicated very quickly. You're like, oh, yeah, we should price relayers. And now you go down this rabbit hole and you say, okay, actually, it's pretty difficult to do so, right? And then the last piece is, how is gas handled? Right. How is gas estimated paid front end destination? And as I'm going to talk about in two slides, it's actually a pretty big trust assumption that you have, no matter what kind of system that you're architecting. And so what are the assumptions on that last piece? Right? So the most important question when you think about gas estimation is who is doing the gas estimation? Who is calculating that? And so calculating gas on an origin chain is pretty straightforward, right? It's what any kind of client does or interface does, but doing it for the destination chain gets a little tricky, right? And so you can obviously have some sort of trusted solution. You can ping an RPC or you can have some sort of somewhat trusted solution.
00:12:12.354 - 00:12:43.806, Speaker A: You can use some sort of gas oracle. But the question is always, who's making a gas oracle? Are they taking the margin on the quote, if so, how much is it? Totally fine. But I would say from our experience of using all these different primitives is that it's pretty opaque. Someone's making money, user doesn't know. And that is not really ideal for us as we're designing our relayer system. And there's also trust assumptions on the delivery, right? Let's say everything's perfect. You have this perfect price that everyone feels very comfortable with.
00:12:43.806 - 00:13:16.970, Speaker A: You're leaving no kind of leakage in this economic system. You're still trusting someone. Right? And so many protocols, they pride themselves. They're like, yes, we have a one of n relaying assumption, but the reality is it's not one of n, it's typically more of a one to one. And why do I say that? It's because users have to trust the relayer that they're paying at any given time. And so if you find a relayer, you want to pay them, they're going to send the message, you give them the money. How do you know they send the message? Right.
00:13:16.970 - 00:14:05.126, Speaker A: Oh, I think as a kind of caveat, you could probably pay a lot of different relayers, but now, instead of charging one dollars to deliver one message, you are holding up $5 for one of those five relayers to deliver a message. And so I think the takeaway here is lots of trust assumptions on this real delivering the message, and there needs to be some sort of mitigation for that. And so I'm posing a lot of questions with no answers, but this is probably the closest answer that we have so far. And we call it conditional payments. And so it's basically a one time payment on the source chain with some transparent pricing in mind, and we try to make it as trust minimized as possible. And so the flow for this is as. So there's a price quote that's generated for the relayer.
00:14:05.126 - 00:14:38.306, Speaker A: Right. Let's say we're using some sort of top down systemic pricing algorithm. We actually use catalyst as this kind of price oracle. And so we're able to calculate how much gas is on the destination chain and what is the actual fair rate between the origin and destination chain gas tokens for the swap. The user's payment is then escrowed on the source chain with a time decay. And so there's an incentive for these relayers to go very quickly in order to actually capture the full amount of this escrow. And then a relayer must return with some information from the destination chain in order for the escrow be released.
00:14:38.306 - 00:15:59.200, Speaker A: And so we're talking about round trips here, not just one direction, but one direction, and then sending an acknowledgment back that something actually happened with the necessary mercury proof in order to prove, so ends a one of end design, because this bounty is open for anyone to claim. And so we think that this is a pretty good start on what we think is a much more trust minimized and much more kind of robust and transparent relaying system. And then over time, we do want to overlay Mev to this. And so, like I said, one way you could do pricing is have some sort of bid ass system or an order book system, which begs the question, where is the mev kind of coming to that? And so I think the holy grail that people like to talk about when they talk about relayers, and when I say people, I mean me and four other people in a telegram group, because no one's really talking about this is ofa, which is order flow auctions, right? As folks may be familiar with mempools and flashbots and private mempools. And so ofa. And so you think about this, there's an Ofa for an origin chain, and they're actually queued up in some sort of auction, and then you have these relayers actually bidding for this order flow, right? And why would they do that? Because then they have the exclusive right to be the relayer for that order flow. And they extract what we call Rev, which is just relayer extractable value.
00:15:59.200 - 00:17:08.630, Speaker A: And they're able to bundle this order flow and have some sort of sandwiching as what vibob from socket kind of talks about in this screenshot here in the right. And they can extract value from it, right? And there's this kind of additional element that we call censorship MeV, which is, okay, what is the willingness to pay of a user if their transaction that spans two different domains has a lot of MeV to be extracted? If all the relayers coordinate and say, hey, we're actually not going to pass this message, right? And so a good example of that is that you have a position that's about to be liquidated on Ave, you have some collateral that lives on a different chain. The relayer recognizes that and says, hey, you're only paying me one dollars for this $100,000 liquidation position. I think you need to be charging me a little bit more, or else we're not going to be delivering that message. And so really, really big design space as we look at censorship MeV and relayer extractable value. And again, me and four other people on telegram, just nerding out about it. So the short answer is yes, MeV is going to be really important for incentivizing relayers and having sustainable economics through relayers.
00:17:08.630 - 00:17:55.586, Speaker A: But we're not quite there yet in terms of having sufficient transaction volume or messaging volume in order to justify it. And we think that there needs to be a really kind of robust way of doing what we call self relaying, which is if there's no MeV being generated by this specific message, you kind of have to relay your own message. Right. Because in this paradigm, no one really wants to deliver your packet if you're not generating sort of economic value on their behalf. And so, before I get to the last piece, I just want to say we're thinking a lot about exactly what a super robust relayer system looks like. We care a lot about the timely delivery of these messages. We care a lot about the transparent pricing and the incentivization, and overall the future proofing by including Mev into this.
00:17:55.586 - 00:18:55.126, Speaker A: But lastly, and I almost think more, most importantly, we want to think about the sufficient decentralization of these things. And so, again, some interop protocols have this kind of one to one relaying message delivery. It could be overtly like layer zero, right? Where even before you deliver a message, you have to specify a relayer. Or it could be more tacitly where you have this kind of one on one payment assumption. You already pay the relayer, you hope they do something, but you don't know for certain, like what I talked about before, or you have this kind of one of n system that's slightly more robust, but the n is really small, because realistically, it's just these core teams are running relayers, and so the n is more two, three, four, or what have you, and not quite as robust as what one of n sounds like when people say one of n for a mechanism design, and then self reeling can always be a fallback, I think it needs to be much, much more robust. I think this is a very similar narrative than to what the roll up folks call forced inclusion for roll ups. Right.
00:18:55.126 - 00:19:36.374, Speaker A: There's censorship from the sequencer. You want to kind of submit into the settlement layer. I think this is a pretty good analogy. I think self relaying needs to be much, much more robust and have a lot more research behind it. And we at catalyst think a lot about that, think a lot about all the different pieces of a relayer system. And why is it important to us? Because ultimately, we think that healthy relaying will equal a healthy modular world. It's really hard to have modularity, really hard to have state verification between DA layer, standard action ordering layer execution layer, and eventually all the other fun layers that kind of come out in the future like a staking layer proving layer, what have you.
00:19:36.374 - 00:20:19.020, Speaker A: They need relayers, right? And so not necessarily the core focus of catalyst. Our core focus is liquidity, which is something, again that all the RAS participants in the last panel said was top of mind for them as a major pain point. But relaying and decreasing the latency and decreasing the trust assumptions between moving liquidity between roll ups is super important for us too. Therefore, we think a lot about relaying and we want to make it a mission for us in terms of research and a public good perspective to push forward the thinking on relaying research. So thank you guys so much for your time. Thank you. Feel free to follow Catalyst for more updates on that.
