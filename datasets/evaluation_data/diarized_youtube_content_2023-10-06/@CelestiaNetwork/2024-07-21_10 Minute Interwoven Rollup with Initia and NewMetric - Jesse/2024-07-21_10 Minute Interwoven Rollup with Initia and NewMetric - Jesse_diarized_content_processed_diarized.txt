00:00:02.040 - 00:00:28.524, Speaker A: So yeah, we'll start. My name's Jesse. I'm a founder at New Metric. Basically, new Metric is a company that runs all the infra for inertia currently like today. L1 RPC, l two ras. Everything we do, huh? Yeah, so basically that's what we do. So we research group that focuses on scaling blockchain infrastructure to plus infinity, positive infinity.
00:00:28.524 - 00:01:08.570, Speaker A: What that means is day to day business. We set up nodes, we set up whatever blockchain. But then we almost always run into this scaling problems of, hey, our RPC isn't able to handle the incoming traffic or whatnot. The bridge is not working. We don't just run it, but we do work on the code patches that makes your blockchain software more efficient to run. So naturally we do a lot of like RPC, like ArCs, like RPC Ras for initiative, and a lot of like code, code based researches as well. So I don't know if it works though.
00:01:09.350 - 00:01:10.370, Speaker B: Just project.
00:01:11.030 - 00:01:48.574, Speaker A: Okay, like I said, we don't just run the node assets. Yeah. So we actually get to do something about the code itself to make it actually high performance. That means we don't just run your node as is, we change something in it. So in our software, patches, the boring stuff like concurrency, performance, whatever, whatever, whatever. That's our forte. Just outsource all of those to us because our performance is about 73 times better in terms of how scalable it actually is.
00:01:48.574 - 00:02:08.468, Speaker A: And then it is 99.9% compatible with the underlying Cosmos base system. That means like about any blockchain out there that's built on top of Cosmos plus initia, everything, it's all compatible. So it's like designed to be like drop in replacements. So, you know, you can just come talk to me if you want.
00:02:08.524 - 00:02:12.760, Speaker B: Hey, can you tell me why Cosmos SDK is so bad?
00:02:13.460 - 00:02:20.886, Speaker A: That's a long story, but okay. Do you know what Mutex is?
00:02:20.918 - 00:02:26.370, Speaker B: This mutex is like get a lock on something, right?
00:02:27.470 - 00:02:52.742, Speaker A: Right. So there's a lock in a way that any RPC call or any transaction, like running the transaction, acquires something called we call lock. Right. That means Cosmos SDK is able to do only one thing at a time. So let's say your RPC query, a single query, takes like 10 seconds. That means your node is blocked out for 10 seconds. It cannot even do anything in terms of consensus.
00:02:52.742 - 00:03:17.190, Speaker A: It cannot even handle any other stuff. The changes we made is we made cosmos actually concurrent on any given time. If you have, let's say, a million requests coming in or node is designed to be able to actually handle million requests at the same time. That's the biggest change, I'd say. What is that putting.
00:03:18.210 - 00:03:21.510, Speaker B: So most cosmos chains just don't get the traffic?
00:03:22.170 - 00:03:56.990, Speaker A: No, it cannot. So the only way to, like, what foundations usually do is they set up multiple nodes, let's say 1020, to just handle the RPC, like ingress. But then at the same time, like, it's unnecessarily costly. Right. Because the cost for running 20 nodes is probably not really efficiently spent. If you had a solution that is able to handle all this volume, any volume of traffic as one node, that would be more efficient. So that's what we do mostly.
00:03:56.990 - 00:04:36.090, Speaker A: We actually do something about mempool as well. So when you broadcast a transaction, I don't know if you've been there, but there's some lag or performance tax and the volume of transactions that's coming into your node. So we also fixed that, like, and improved it by, like, 360%. And the benefit is, like, benefit of this all concurrent architecture is our nodes actually get to stay in front of the chain almost always, like I said, 100%, but really. Yeah, 100%. So it doesn't really get behind this thing. I'm just winging it.
00:04:36.090 - 00:04:54.846, Speaker A: I'm just winging it. So, yeah, always stays in front of the chain. So it never sort of lags behind the sink. I think we all been there where your node is behind the sink, so you cannot quite use it for our piece of purposes. We don't have that problem. So that's what we built. Next up is Anisha.
00:04:54.846 - 00:05:36.626, Speaker A: So, in case you don't know, Anisha is basically. I copied the text from the landing page. Binding a highly interwoven system of modular networks through architectural ownership of the l one orchestration layer, l two network. And the communication protocol comes with universal consistency. Whatever guided sovereignty multi vms are, this is my interpretation of it. Simply put, what initiate allows is for you to spin up a roll up. Basically, it's a roll up.
00:05:36.626 - 00:06:25.234, Speaker A: Any minutiae is a roll up that comes equipped with either move or Cosmos or EVM from day one. So when you set up minisha, it's either three and then. The good thing about is this is particularly what I'm bullish about initiative, is that it comes with all the batteries included from day one. So all the boring stuff, like bridging, all the boring stuff like coordinating with wallet, what has to be uploaded to somewhere, I don't know, to make your l two exposed to the world. Initiative, as far as I know, has thought of that for two years. They actually tried something to make the onboarding procedure a lot easier. Really, all you got to do is just spin up a roll up.
00:06:25.234 - 00:06:51.014, Speaker A: That's it. Probably. You got to register it to wallet, which I'm going to demo just in a minute. But that process is quite simple, so you can start building today. This is what I believe in, sovereignty by code. Unlike other roll ups, what Minisha allows is basically get you to. You actually get to change something about the chain itself.
00:06:51.014 - 00:07:39.764, Speaker A: Unlike optimism or arbitrum or other evms or centric roll ups, they pretty much run the same software underneath. And then the only thing you get to change is the contract that you deploy on top of it. Whereas minutia, it being Cosmos SDK chain, just in a roller fashion, you actually get to dictate what is the rule in this particular roll up that you just put out and then tweak something about staking, tweak something about, I don't know, how bridging work, how bridge works, what is the token emission? You actually get to change something by code. And that level of ultimate customizability is definitely the selling point of minisha.
00:07:39.892 - 00:07:43.240, Speaker B: You can change all that, make it really hard to deploy.
00:07:46.020 - 00:08:35.456, Speaker A: Well, if you were to do it yourself, that would be somewhat difficult, I'd say, because you got to now care about all these code differences, test it, something like that. But we're just going to demo it for a bit. Basically, we're doing rasp for initiative, where you have some changes in your code. Let's say there's a branch on GitHub you can directly deploy from that GitHub branch to our RasP service. That means we don't just get to run base mini move, for example, we actually let you fork minimove, do something about it, deploy that modified mini move to us. So that at this point, I like to say it's basically like a vercel of blockchain or roll up in general. So all that stuff is what we do.
00:08:35.456 - 00:08:51.959, Speaker A: So minutiae, great. Nemetric, great. So let's see. So initiative is the multi chain garden of Eden. I don't know what that means, but sounds cool. Yeah. So, starting your minisha journey.
00:08:51.959 - 00:09:37.312, Speaker A: I don't know if you noticed, but the title of this workshop is ten minute journey of minisha or whatever, right? Yeah, yeah, yeah. Thanks. I didn't set it. So what I'm going to demo now, basically, we nemetric, we have a dashboard where you can basically do deploy miniature. Just like think about Conv or caldera, which has more of an EVM centric ras solution. We are that, but for so. Well, basically the first screen you see after you're signing up with our dashboard is this.
00:09:37.312 - 00:10:00.346, Speaker A: Just simply go to. There's a new button under a very sophisticated product name called maze. I don't know why that named it maze, but maze is our product name for this roll up deployment. It is not very simple internally. I just. That's why. So what we got to do.
00:10:00.346 - 00:10:19.050, Speaker A: So today, I don't know if it's like mini event out, probably. It's not yet. Yeah, it's not. So we support minimove and minimazum. These are the latest version of each variant. So first thing you want to do is choose which variant of mini, which variant of mini move you want to deploy. Right.
00:10:19.050 - 00:10:35.548, Speaker A: Just select it and the next thing you want to do is set chain id. I'm going to call it. I don't know. No, sleep one. Okay. Token denomination. You sleep.
00:10:35.548 - 00:11:01.570, Speaker A: Let's call it you sleep. So minisha requires you to have a number of system keys, like validators, bridges, everything. We basically pre create them for you. Well, this is exposed to you over the Internet because we're on Testnet, but on Mainnet, we will figure out how to give you the keys basically securely.
00:11:01.950 - 00:11:03.102, Speaker B: Yeah, it's clear.
00:11:03.286 - 00:11:45.116, Speaker A: Yeah. And then you can also add some user accounts to Genesis just by clicking something, and then it will also give you the keys. This is generated on the website itself, so you can just copy and download your spec of the deployment. So next thing you want to do is basically decide whether you want to have Oracle or not. Like I said, the good thing about minisha is batteries included. One of those batteries is oracle. All the l two s are going to be able to receive the oracle feed from l one directly from l one, because l one happens to have oracle feed for all sorts of different, like tokens.
00:11:45.116 - 00:12:20.292, Speaker A: Right. It's powered by skip go, I think, recently rebranded skip connect, was it? Yeah, skip connect. Basically by clicking this on, you will get a live feed from l one to l two so that your l two has exposure to like almost real time, I'd say just, just real time. Real time oracle feeds. So that's great for this demo. I'm not going to do it because it'll complicate things a bit more. Yeah, it does.
00:12:20.292 - 00:12:55.694, Speaker A: Yeah. We are running about six minutes right now, or five on our cluster. Two of them are using Oracle and then it's working great. So you know it's working. We deliberately sort of not have further like advanced customizations and like for example, some parameters and staking whatever. We don't have it deliberately for testnet period, because we are still trying to find out, you know, what is it that people need to configure on the screen. But any parameter like you can just set it later anyways, so that's fine.
00:12:55.694 - 00:13:33.028, Speaker A: We'll just start a chain. I'll just save the spec of this deployment first and then just click deploy. It'll take about two minutes, not ten minutes. So when it's done it'll give you, you can access the chain with our PC and rest URL just given here. We also have GRPC in case you want it. We plan to add the address to the GRPC here. When it's done, the current height, current timestamp, any metadata will be visible on the dashboard.
00:13:33.164 - 00:13:34.732, Speaker B: What's the rest URL?
00:13:34.876 - 00:13:58.650, Speaker A: Rest is what we colloquially call lcd. So it's like a chain may have many modules. Those modules define their own API interface. I don't know why we started calling it lcd, but it stands for lite client daemon. It is your gateway to accessing blockchain. Okay. Hey, come in.
00:13:58.650 - 00:14:31.420, Speaker A: Hey, come in. No, that's all right. Let me just quickly check if it's really working because I did check like three times before this, but just in case. Yeah, wi fi, it'll work. Don't worry about it. Yeah, so until it's actually getting deployed, if you have any questions, now is a good time to ask.
00:14:32.720 - 00:14:37.776, Speaker B: When you enable the oracle, do you have to pay skip for the oracle.
00:14:37.808 - 00:14:40.620, Speaker A: Feed or pass the oracle? I think zon's paying for it.
00:14:40.960 - 00:15:13.548, Speaker B: So our validators on the lambda, they post, they post data to the layer one every block and that's just something they have to do through boat extension. So if they don't, they get slashed. And then there's a relaying system that relays those prices to the L2s. And on the L2 there's a mempool prioritization system. So those oracle updates will be automatically filtered to the top of the block. So even if there is congestion on L2, the oracle updates will still be fresh.
00:15:13.724 - 00:15:38.280, Speaker A: Yeah. So if you're talking about gas price on l two, because somebody needs to relay those payload to l two, right? L two miniature is special in this way too. So all these operator keys, the system keys are basically gas exempt. So any ingress from l one, for example like Oracle feed from directly from l one to l two is basically free. So it's just a matter of enabling disabling it.
00:15:38.320 - 00:15:47.456, Speaker B: What about like the layers? So the Oracle update I think is every layer one block time, which is about one and a half seconds. Yeah.
00:15:47.608 - 00:16:19.590, Speaker A: And then there's of course like duration at which interval at which the bot, the relayer in between is running. I think it's about like second ish. Yeah. So obviously the oracle duration is tied to how fast l one s can feed the oracle itself, which is currently 3 seconds, I believe. So every 3 seconds oracle feed is updated and one more second before it reaches l two.
00:16:20.250 - 00:16:31.440, Speaker B: If there is a demand for having oracle data every L2 flock, which is then you would have to pay six additional dollars.
00:16:32.660 - 00:16:35.036, Speaker A: Okay, I thought you were paying for it.
00:16:35.188 - 00:16:52.690, Speaker B: We're paying for it for the l one stuff. But if you want on the L2 every block, then we have to work some math. But for almost any project of lending, whatever, this is fine. If you're doing something like purse dynamic instance.
00:16:55.470 - 00:16:59.566, Speaker A: They'Re doing. Yeah, they're doing their own oracle was it, right?
00:16:59.678 - 00:17:04.290, Speaker B: Yeah, I think blackmail will be having script be directed to them.
00:17:06.710 - 00:17:40.672, Speaker A: Sounds great. So chain is now up, you know, we'll just do checking whether this is really running. It's running well that's the standard way of checking what is the current height of your chain, basically status. It is working. You also have the full API interface to your chain so things like params you can check. So it's not fully working. So it's now up, it's running.
00:17:40.672 - 00:18:23.562, Speaker A: What you now want to do is register your chain to initiate wallet. Basically, like I said, initial wallet from day one is designed to onboard l two s as easily as possible. So all you got to do is just copy this, change JSON under here and go to wallet. So darken well, so there are two ways of adding your chain to the wallets. The first, this way is more manual. So this is useful when you just want to test things out. Right.
00:18:23.562 - 00:19:08.626, Speaker A: So you have local deployments, you have test deployments on our cluster, you know, we just provide you with all the information needed to register your chain directly on wallet. The more official way will be to go through the initiate registry. So registry will be something like. Yeah, registry will be a bunch of files that describe what your chain is like, where your chain is located at, what is the chain id, what is the token denomination, et cetera. But right now we don't want to go through registry step because it needs to review and stuff like that. So we're just going to submit. So just like that, ignore all this.
00:19:08.626 - 00:19:23.722, Speaker A: Ms. Whatever your chain is registered right now, what I want to do is, as a user on l one, initial l one, I want to transfer some token from l one to l two to see if the bridging is really established from day one.
00:19:23.866 - 00:19:27.002, Speaker B: So you establish all the bridging and IPC relayers as well.
00:19:27.066 - 00:19:58.792, Speaker A: Yeah. So deploying deployments on RSTAT doesn't mean we are just deploying the sequencer itself. We also deploy all the necessary bots, sidecars, everything altogether. So there's op bots as well as iv. Three layer would automatically set up, so we can do. So. This is basically me saying, hey, I want to transfer some token from my wallet to no sleep one.
00:19:58.792 - 00:20:26.620, Speaker A: The chain, we just spin up, and then we'll probably send, like, 1010 in it, right? It's from the Wi Fi. Yeah. Okay. Wi Fi. Yeah. Come on. Wallethood.
00:20:26.620 - 00:20:56.496, Speaker A: Yeah. So you now see token transfer to Noslapon, and then given that there's a lot of contracts actually deployed on the zell two, you can interact with all the l two s. You can also transfer these token back to l one, which had gone through a lot of changes, like, recently. I don't know what the change narratives are, but usually there are two ways. I don't know if you were to explain it, that would be helpful. Sure. Yeah.
00:20:56.528 - 00:21:18.074, Speaker B: There's two ways to. Well, it depends. So, you know, in cosmos, there's IBC. You can IBC a token directly to a L2 and IBC it back down. But if you go through something like the optimistic bridge, there'd typically be a seven day settlement window. And so we built this thing called minuteswap, which allows you to bridge IBC token.
00:21:18.122 - 00:21:18.362, Speaker A: I mean.
00:21:18.386 - 00:21:42.830, Speaker B: Sorry. Optimistically, bridge tokens back down to the layer one instantly for a small fee. And so you could wait the seven days if those tokens go through the optimistic bridge. Or you could use minuteswap and take the small fee and bridge instantly. If you bridge that token through IBC originally to the L2, then you'd be able to bridge it instantly down to layer one as well without minuteswap.
00:21:43.220 - 00:22:00.820, Speaker A: Would it be close to. So, miniswap, would it be close to, say, somebody purchasing, like, token transfer? That's not finalized yet, but then give you money advanced system, where the person.
00:22:00.860 - 00:22:30.806, Speaker B: On the layer one can basically fund you and take the arbitrage of the seven day settling delay, like Stargate fund starting. And so there's this omni pool setup where you have the init, layer one tokens pooled with the init equivalent across every L2, and then there's a bunch of parameters so that someone can't rug all of the tokens, but that allows basically capital efficient markets. You don't have to set up a pool between every L2 and the layer one token.
00:22:30.998 - 00:23:07.870, Speaker A: That's great. So easier to move tokens from l two to l one and it's optional, right? It's great, yeah. So now the chain is set up, I won't probably try to like deploy any contracts without have something handy on this laptop, but proven my point deployment is there takes about two minutes and then you can like directly register this chain within the initial wallet. Obviously the interface, everything like, I still have like a lot of backlogs for like pretty fun this. It will look better in the future, trust me.
00:23:09.290 - 00:23:26.202, Speaker B: How does it work to get like standard roll ups in the wallet besides your own development environment? Like, do you guys list them? Chain registry? Yeah, we have chain registry similar to like the Cosmos chain registry. And if you put yours there with like your logos, it'll just be like default added.
00:23:26.306 - 00:23:54.058, Speaker A: Yes. So you go to Testnet. These are the list of all the other roll ups that are already on Testnet. So go to blackwing the changes in which has a lot more detail in it. We will provide all this detailed information as well. But then basically this format is exactly the same as Cosmos registry, I believe. So even Cosmos registry can use it.
00:23:54.058 - 00:24:26.190, Speaker A: So Kepler, whatever other wallets can support your LT as well. So that was a brief demo. If you want to try it out, go to this address here, or just app dot new metric XYZ. We're still in closed beta, so what that means is upon signing up, you will be prompted to waitlist. But if you were to let me know of the user id, I'll just let you in. Don't worry about it. It's to protect sudden surge.
00:24:26.190 - 00:25:19.170, Speaker A: Imagine everyone deploying something. I cannot pay for that. So let me know if you want to try something. So why deploy with us? Why deploy with us rather than deploying everything yourself? Well, usually people tend to think altos or roll ups nodes is sort of smaller or reduced version of l one, but it really is not. When it comes to operating the actual node, in this case the sequencer, it's a bit more tricky to keep the node up because the sequencer is the only validator of your network. So if that node goes down, there's nothing, there's no blockchain at all. So that reliability and ops related stuff you can probably outsource to us because we do that part really well.
00:25:19.170 - 00:26:01.360, Speaker A: Also, it comes with the best in class RPC. So like I said, all the performance related tunings we made, you can add that RPC, the high performance RPC, as an add on later. What that means is you deploy just a sequencer now, but then if you feel like, hey, I'm going to need a better RPC for my million users, you can just add the better RPC. So that's the thing we support, and it's automatic. So you just click a button, we're going to set up everything for you. Performance difference full node. Usually this is like apples to apples comparison full node.
00:26:01.360 - 00:26:34.636, Speaker A: Let's say it does about 750 requests per second. Our one node can do about 17 times more, and then it scales from there linearly. So for example, initiative Testnet, on the first week, there was a time when the aggregate request per second was like 130k ish. We handled all of it just without any trouble. So, you know, it's performed. So I went to my code, like I said, you can just git push your code base to us. We're going to provide you with the actual git address later.
00:26:34.636 - 00:27:09.624, Speaker A: But this makes our platform more like a versatile for Minisha. So whatever changes you have, whatever dev branches you have, you can push to us and then deploy it right away. So that's another feature that other ras don't really provide, but needed for minutia. That's a good thing. We also have a little product called cradle. So cradle, what it allows you to do is fork a running network into a dedicated testnet. And this is all done in SAS fashion.
00:27:09.624 - 00:27:44.230, Speaker A: So you just come up on our dashboard, go to, I'll just, I don't know, fork, say Juno, for example, you click deploy, it'll take about a minute, but then basically it is a fork of the actual mainnet locked at this specific height. What that gives you is an ultimate testing bed where. Hey, because what you want to test is like whether your next version of code is compatible with the main state, right, or the sequencer state.
00:27:45.450 - 00:27:55.420, Speaker B: This is not something that exists in cosmos right now, right? Like everyone that tests stuff spins up, basically a fresh chain redeploys their shit and then tests against that.
00:27:55.540 - 00:28:31.816, Speaker A: Either that or, I think since Cosmos v 50, 0.50, there is a similar feature. But it's not like you can fork out of any height. You got to start from a locally stored snapshot, and then you can only start fork shape from there. The problem with that is it writes back to the database. The database that you have locally is now the testnet only not mainnet. So you got to do a lot of manual planning and how to have what version of snapshot locally.
00:28:31.816 - 00:29:11.450, Speaker A: This doesn't have that problem. So I just spun up a fork at whatever height, I can spin up another if I want. Let's say we go back in time, something like that. You can just actually go back in time and then create on demand fork of any height. This is particularly useful for rollups because rollups don't tend to have tended not to have test nets, right? So and I believe Mainnet is the only correct testnet because that's where all the liquidity is, that's where all the users are. Without this you're just testing with fake parameters, right? You don't want that, you can use it. We have all the support from day one.
00:29:11.450 - 00:29:21.910, Speaker A: So you know when you deploy, what? When you deploy with us, this is all the feature you get. That's it. So bye.
