00:00:01.800 - 00:00:20.030, Speaker A: Hello. Cool. Yeah, so thanks for the intro. I am Brandon. I'm a founding engineer of o one labs now. I'm the CEO. We incubated Mina and we still build stuff for Mina.
00:00:20.030 - 00:01:07.880, Speaker A: So yeah, it's the one proof to roll them all. You might think this is Lord of the Rings themed, but it's not. It's children's storybook illustrations of stranger things, the tv show themed. So, okay, so let me tell a story. So, okay, blockchains are supposed to be decentralized. Um, that's a thing. Uh, and you know, um, I would say, like, historically, like, it's working pretty well, but there's been a struggle to balance scalability and decentralization.
00:01:07.880 - 00:01:43.246, Speaker A: Um, if you have a ton of activity, then the chain grows really fast. And if the chain grows, then it's harder to sync to and limits who can participate. And if you take shortcuts like, uh, checkpointing, you kind of sacrifice security assumptions and, and like, I. Lots of things happen. And then ZK the superhero comes in and is one way to help with these issues. I think a lot of people here or watching this probably are aware of the thing that people talk about all the time, which is ZK rollups. And that's one way to deal with this.
00:01:43.246 - 00:02:20.910, Speaker A: Here's my diagram of a ZK rollup. Uh, you know, if we have a lot of transactions, um, rather than applying them to a base layer directly, we can prove that the application is valid. Uh, of a bunch of these things, make a proof. We can combine proofs together, um, and then we can take our transaction proof and post it to, uh, a layer one, um, and it goes into a block. And then, uh, you know, we're happy. So this helps because we can prove transactions without recomputing them. We don't need to store them for too long in some cases.
00:02:20.910 - 00:03:22.040, Speaker A: So there's kind of tricks that you can do to get more scalable. But what I've observed anyway is a lot of these projects, like all of them, they seem to be launching in a way that's sort of incrementally decentralized. These projects are optimizing for getting something out the door and performance at the cost of some aspects of scalability and certainly decentralization. And that's fair and useful. And if you're on top of a base layer, then you in some ways inherit security. And there's all these nice arguments. And I don't want to get into a fight with anyone, but I just want to highlight that Minae is different, but I want to sort of show it in this lens with Mina, we always have kept kind of this purism form of scalability and decentralization as we've been building it and releasing it and upgrading it.
00:03:22.040 - 00:03:53.800, Speaker A: And just now we're starting to tug the threads of performance because that's obviously important too. So the point is, Mina is different and we end up in this upside down world. There's the stranger things. So, okay, if we think about Mina compared to zkrollups, let's start at the bottom right of my beautiful diagram. We have a bunch of transactions. We create transaction proofs. Then we combine these transaction proofs together.
00:03:53.800 - 00:04:34.660, Speaker A: But instead of just taking the transaction proof and being done, we put it into a proof of the blockchain. So the blockchain is actually a bunch of proofs. So it starts with an initial proof and then it expands and grows without growing by just sort of incrementally proving the next block. And in that block we include the transaction proof of some aggregated bunch of transactions. So it's kind of like another layer of proving. And I think, I don't know, this is interesting because we designed this a long time ago. Mainnet launched also a bunch of years ago.
00:04:34.660 - 00:05:16.574, Speaker A: And I'm not just going to spend this talk, talking about things that are years and years and years old, but I think it's interesting because when we were building Mina, it's kind of ZK rollup y like, but we didn't even consider centralizing sequencer approvers. That's the decentralization of those things is what people are talking about these days. So, you know, for decentralized sequencing like you do consensus. And in Mina, we do it in a snark because it gets tiny and, you know, decentralized proving like you do a proof marketplace, people are talking about that now. And we have a basic one in Mina and it's been functioning for a while. And it's, you know, it's cool. So I don't know.
00:05:16.574 - 00:06:09.576, Speaker A: I saw this tweet, it went viral recently, saying that l two s have a long way to go before we can consider them decentralized. And basically all of these things, Mina does them, which is cool. And you can kind of view it a little bit like a Zk rollup, but it also kind of rolls up more. So instead of just stopping at the transactions, we keep rolling up blocks. And so you can think of it like it's one single proof of everything that has ever happened in the mena world. So it's a proof of everything. And this proof of everything has been sort of aggregating more and more things for a few years on the l one.
00:06:09.576 - 00:07:03.996, Speaker A: And I'm happy to say we never had any downtime, no emergencies. Everything kind of was stable and working. So it's a nice strong foundation, but it's been going for a few years just with fixed function primitives. So inside the Mina's proof of everything, until recently, it was just payments, stake delegations, things like that. But obviously we wanted to do more, and that led us to work on this big upgrade to the network that we just recently shipped to about a month ago, which is the Berkeley upgrade. And what this does is it makes the proof of everything able to aggregate arbitrary compute. So smart contracts, things that people want to do, and this is cool, I think.
00:07:03.996 - 00:08:20.300, Speaker A: And the way this works on Mina, we have a compute model that's more sort of off chain, so you can do a client side. There's predictable gas, there's affordances for composing smart contract calls even though you're off chain. There's facilities to deal with races and things in a nice way. And on this platform we have an SDK, which is a typescript framework called O one js, formerly known as Snarky J's. There's cool stuff in it, there's recursive functions that map to recursive proofs, custom gates, cool libraries, and this platform that we've been working on for a while, it's here now. I'm not good at celebrating things that I work on, that kind of bragging type of thing, but I want to try and be proud of Mina. It's the first general purpose programmable ZK platform, like an l one or an l two, that you can actually use to do real ZK things and build applications that have privacy and do interesting things.
00:08:20.300 - 00:09:14.398, Speaker A: So that's cool. And I'm also really proud of recursion API. We have Coby, the king of ZK awesomeness, recently tweeted that he appreciated the ONJs recursion API. And I want to just show it because it's so easy to explain, and if you haven't seen it before, maybe you'll get excited to play with it. So it's called ZK program. So we're going to build a simple recursive proof that starts at zero and incrementally adds one. So it's a really simple thing that we're proving, but I just want to illustrate how little scaffolding there is cool.
00:09:14.398 - 00:09:38.824, Speaker A: We're going to output a number that's a field element. So public output field. And then we have some methods. So there's a base case. The base case takes no private inputs, but this is where you'd put in some private inputs if you needed that. And then there's a method, it takes no public inputs, but it returns a public output. So zero.
00:09:38.824 - 00:10:10.136, Speaker A: That's where we're starting. And then in the recursive case we'll call it step, but you can call it whatever you want. And you can have more of these. We have one private input, and that is this recursive proof that we're building. So you say self proof to refer to that. And then in the method we take the one private input, which is the self proof, we verify it, and then we return the proofs. It says public input, but it should be public output.
00:10:10.136 - 00:10:58.434, Speaker A: So the last proofs, public output, and we add one, and that's it. And now we have a recursive proof that you can use in a smart contract on Mina. So you should try it and play. And even if you're just learning about recursion in ZK and you really want to get your head around it, I truly think that this is a good place to play around and learn that stuff. And you know, people are using this, using the platform, using the tools to build verifiable applications. Today there's people building game engines, l two s on Mina, DeFi experiments like decentralized science voting. And it's still early.
00:10:58.434 - 00:12:13.376, Speaker A: We just launched Mainnet, so there's like, you know, lots of room to play with stuff, I think, because this is really the first production platform, but in this space also one of the really early platforms for really working with ZK. It's kind of a brand new space to play around with. And I'm just excited to see what people can come up with. I don't even know what you're going to build. But anyway, this is modular summit, so how does this fit in a modular world? And I want to talk about that. So if we think about Mina as this proof of everything, and we track its timeline, the initial mainnet release, and since then it's been sort of aggregating fixed function compute in Mina, like payments and delegations. Then there was a transition point very recently where we enabled arbitrary compute, and it's on Mainnet and it's live and you can play with it.
00:12:13.376 - 00:13:00.276, Speaker A: And what this does is it expands the scope of what the proof of everything can consume to any sort of arbitrary computation you want in the Mina universe. But ideally, and sort of where we're working towards now, and where we want all of you to sort of help us get there is to make the proof of everything on Mina a proof of everything on everywhere. So what does that mean? It means not just stuff directly on Mina, but things connecting elsewhere and everywhere. And I'll go into more detail, but it means I. It means more bridges, it means more adapters to different proof systems. It means embedding a Zkvm. All these things are sort of in progress in the ecosystem.
00:13:00.276 - 00:13:41.040, Speaker A: It means more web, two sort of injections. So like zkemail, ZK TL's, ZK Oauth, all things that are sort of in progress. It means getting data from the real world, like from government ids. People are working on that. And in this world, you can view Mina as a place where proofs go to live and play with each other and compose on top of each other and combine and mix and match. And they can go off of Mina to another chain, like an EVM chain through a bridge. And we just announced a partnership with aligned layer to accelerate that.
00:13:41.040 - 00:14:24.060, Speaker A: You can access da from Celestia soon. There's an integration that geometry is working on, and a lot of people are building l two s, zkl two s to settle onto Mina because this recursion is so easy. It's just like a really great place to build those things. And other chains can even go back into Mina so you can get these strange feedback loops. And as we're building more and more of this infrastructure, we can start to imagine really weird and crazy things. And this is some fuzzy imagination, so bear with me, but. Okay, so I'll go one by one here.
00:14:24.060 - 00:15:17.090, Speaker A: So, Ethereum. Why is Ethereum cool? A lot of reasons. But one reason it's cool is people can build these smart contracts, and they're kind of out in the open, programmable, and anyone can build on top of them. What we got was these are what we have. And what's continuing to grow is this really interesting space where contracts build on top of each other in ways that the original authors didn't understand. It's this power of composability. But what we don't see on Ethereum directly or other kind of blockchains is this kind of same ability to compose things and, like mix and match and move things around, but with large data from web two world.
00:15:17.090 - 00:16:45.520, Speaker A: So there's some projects now that help you make proofs about data and post them to Ethereum, let's say. But Mina is a place where we can make proofs about the web two world, or with huge, enormous data that we sort of compute on and sort of combine them in a really nice and easy way using the ZK app layer that we built. You can imagine scaling any kind of verifiable computation that is enormously complex through recursion. And I think our platform's one of the best places to do it because it's just so easy to use, both from a software development kit level and at the platform level. It's always first class in the system, and you can use this to do a bunch of things. But one thing that's kind of cool, I think, is you can imagine this huge, huge computation graph where anyone can explore parts of it and you can prove your way down, but really, you shouldn't have to run that more than once. Once someone runs it, it should be done.
00:16:45.520 - 00:18:07.074, Speaker A: Imagine we're proving this computation graph, and we can do this in an incremental way so we can pause somewhere and resume it. But the really cool thing is you can imagine that you can share the graph so other people can force different edges of the computation graph, and maybe you can have access through authorization based on your identity or interesting ZK things. And, you know, you can build things like shared insurance pool where, like, but you keep your privacy, or, I don't know, tons of weird, interesting out there ideas. So all that is like kind of out there and weird. And, like, I don't even have the best exposition of it yet. But, like, the point is we're really trying to make, like an Internet of true things. So, like, when you prove something, it's true, you know, like, if you have a proof and the proof verifies, then that thing is true against whatever you're proving.
00:18:07.074 - 00:18:35.012, Speaker A: So. And that's cool. But what's cooler is when you can connect it together and make an Internet. So come build stuff. Join our developer grant programs. You can deploy apps on Devnet that upgrades all the time. You can deploy on Mainnet now, you can help us shape this Internet of true things, and that is it.
00:18:35.012 - 00:18:37.300, Speaker A: And I'm perfectly on time. I like that.
