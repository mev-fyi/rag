00:00:02.730 - 00:00:28.114, Speaker A: Okay, everybody, I think we are live. So it's a pleasure to have Anatoly, John, and Neil here today. These gentlemen need no introduction, but in case you don't know them, anatoly is a co founder of Solana, john is a partner and co founder of DBA, and Neil is the founder of Eclipse. I'm Nick. I'm the CEO of celestial Labs. Today. The title of the discussion is Modular meets Monolithic.
00:00:28.114 - 00:01:39.318, Speaker A: So a lot of people think of modular monolithic as kind of opposing communities with different philosophies about what blockchains are for, how they should be designed. But Eclipse announced a few weeks ago that they're launching this SVM L2 that combines elements of modular and monolithic blockchain ecosystems, building on top of ethereum, celestial and salana at the same time. And so the point of today's discussion is to use Eclipse as a starting point to explore where modular and monolithic might actually have some common ground or where they are actually different, how these different philosophies can be aligned. And benefit each other and in general, just talk about how Eclipse is going to be essentially benefiting all three of them so that solana ethereum Celestia don't necessarily have to be competitive. There's actually a win win win here. And so the first thing that I want to start out with is just generally to set the stage. I want to hear from each of you guys about what you think the trade offs and differences in philosophy are between monolithic and modular blockchains.
00:01:39.318 - 00:02:23.238, Speaker A: And then where do Ethereum, Solana, and Celestia sit within that spectrum? And as a result, what tradeoffs do they make? And I think just to also kind of add some context, I think of obviously Anatoly bringing the Solana perspective. I can bring the Celestia perspective. And John, I know you're all over the place, but maybe today you can be a representative of the Ethereum community. And obviously, Neil, you're representing kind of the mix or like an outside perspective and representing Eclipse. But yeah, let's start there. What do you think? Let's frame this debate around modular and monolithic and Ethereum, Solana and Celestia. Totally.
00:02:23.238 - 00:02:24.540, Speaker A: You want to start off?
00:02:25.310 - 00:02:26.060, Speaker B: Sure.
00:02:26.670 - 00:03:41.630, Speaker C: Well, I think the way that Solana is designed and the way that we really think about it is that there's this one really core problem that we want to solve, and that's how to synchronize information globally. And there's nothing to do with runtimes, there's nothing to do with blockchains or anything. It's just that if you've ever traded, if you ever used any kind of API and interactive brokers or whatever, you get streaming data from these markets and you submit orders, and if somebody delays the data that you receive, they have an edge. Somebody delays how you submit the order or gets to look at it and route it and stuff, they have an edge. And this is something that I found really annoying as an amateur trader, and this is something that permissionless public blockchain solve and can solve in a way that's competitive with the best centralized systems. And this is kind of like I think the key part that most people don't understand is that even if something trades at nanosecond speeds, information still has to propagate around the world. Some news event happens in Singapore, that news wire travels to a poorly run desk at some magazine, then they publish the wrong tweet.
00:03:41.630 - 00:04:24.802, Speaker C: That data still has to propagate around the world. And by the time it hits, like, a trader's desk with their terminal and they see the newswire, they need to look at markets that have already reflected that price. And the way that Solana is designed is that if there's a market running on Solana and a market running at Nasdaq, they should have the exact same price. Because as soon as that news event happens, say it happens in Singapore, there should be a transaction starting from Singapore that's propagating around the world that reflects that change. And that means that we've achieved this parody of the noise in the world is now fully synchronized in one spot. And that's the dream. That's what we're building for.
00:04:24.802 - 00:05:00.394, Speaker C: And from my perspective, it was just, like, kind of a coincidence that all this other stuff happened, that Ethereum exists as a settlement blockchain, that there's this meme for store of values for Bitcoin and stuff like that. I think all these things are really cool, but the core problem is that information sync problem. So you can't if there's a better design, if all of a sudden Celestia just did a better job of that, we would just swap everything out for Celestia's code. That would be like my engineering kind of decision. Be like, oh, yeah.
00:05:00.432 - 00:05:00.634, Speaker A: Cool.
00:05:00.672 - 00:05:08.080, Speaker C: That's a better design, obviously. Why didn't we think of it? Boy, are we dumb. It's all open source code. Let's rewrite it and make it better.
00:05:10.370 - 00:05:30.360, Speaker A: Got it. And so the trade offs of things that you guys emphasize is, like, latency and consensus at the speed of light, essentially. We can talk about that more, but I wonder if there are sacrifices that trade offs you have to make on other things that you lose if you only focus.
00:05:30.810 - 00:05:38.694, Speaker C: Absolutely, yeah. There's definitely trade offs across the board, and I'm happy to dig into them, but I want to give everyone else a chance.
00:05:38.732 - 00:05:44.714, Speaker A: To you, why don't you speak? Or Neil go like, yeah, I definitely.
00:05:44.832 - 00:06:20.466, Speaker B: Relate to experiencing that from the Solana community. That is by and far what they're most interested in. It's like, latency throughput and totally. You just posted this tweet, like, what is Solana aligned? And it's like anything that reduces latency or increases throughput. And to me, that's very indicative because it basically speaks to the values of the Salana community and the folks that are building on that. L1, which is that, for example, if they had to pick between Fire Dancer and Tiny Dancer, they'd pick fire Dancer, where Fire Dancer is building a faster client at higher throughput. Tiny Dancer is more focused on Verifiability and Das and fault proofs.
00:06:20.466 - 00:06:33.260, Speaker B: And I think that's what's interesting about allowing people to fork the code and making it open source because for the same piece of tech, people might have different goals. And I think that's what Eclipse is effectively doing with this whole lot of code base.
00:06:36.590 - 00:07:27.426, Speaker D: Yeah. Just quickly for me, I guess the thing that I kind of start to realize and especially like Eclipse kind of demonstrates this more, the whole modular versus monolithic is like we draw it as this super clear distinction of these two completely separate systems when it really kind of isn't in practice and you can actually kind of mix them together. And when we talk about a modular blockchain, it's like Celestia being a modular blockchain. Even Celestia does all of the things that a monolithic blockchain does. It does its own execution as minimal as it is, it does its own consensus, it has data availability. It's just like different layers in the stack. You can put them together so you can have a roll up on top of something like ethereum or Celestia that does try to synchronize state as fast as possible among its own sequencers and then you have this kind of slower path behind it that's used for other purposes.
00:07:27.426 - 00:07:49.970, Speaker D: Because that fast path is probably not going to be the most useful thing if we're trying to do things like data availability, sampling. Which brings it other trade offs. And you start to realize as you play out the end game of all these things, the boundary between them is really fuzzy at the end of the day and you can really kind of mix them together. It's not this clear distinction of these are the modular blockchains, these are the monolithic things and it's two separate ways to build it completely.
00:07:50.120 - 00:08:04.520, Speaker B: Yeah, and to Tole's point earlier, there's nothing that a modular blockchain can do that a monolith can't. You can always just incorporate that code into the monolith or vice versa. So it's not really as much of a technical distinction as people like to make it out as.
00:08:06.490 - 00:08:07.094, Speaker A: Yeah.
00:08:07.212 - 00:08:27.790, Speaker D: And that's a lot of the tweets that Tolly's had that I've liked on the like no one can stop you from taking all of Solana's data and putting it on Ethereum or Celeste or something like now. Is it a modular blockchain, or if I launch a roll up on top of Solana, is it a modular blockchain? Like it seems to fit the definition of the way that we've called it. So it gets pretty fuzzy.
00:08:29.330 - 00:09:02.570, Speaker C: I think you need some engineering focus. Otherwise yeah, we can build everything and then you build nothing. Right. As much as I can to hurt the cats, I try to focus them on figure out to increase throughput how to reduce latency. And obviously if stuff like Tiny Dancer adding features to support Das and sampling. If it doesn't impact latency or throughput in a dramatic way, we should add those features because they're good. They're obviously like a massive benefit to users.
00:09:02.570 - 00:09:56.266, Speaker C: And all the research that folks do in other communities, especially Ethereum, has been an awesome, just free research that we didn't have to do. It's just been awesome. Part of open source development and super helpful, I think, across all the ecosystems. So there is a lot of collaboration is happening across these competitors that I don't think existed any other time in software development. If you compare it to how the 90s software development was done in a very proprietary way, where people were hiding their code and algorithms and afraid of Poaching directors or whatever, it's just awesome to see that. I have a really good idea. I'm going to try to explain it to all my competitors and convince them that it's really good.
00:09:56.266 - 00:09:59.130, Speaker C: That's a de facto of how people operate.
00:10:00.770 - 00:10:48.602, Speaker A: Yeah, I love this discussion already. And I think to add from the Celestia perspective, building off of what Toli said, which is anything that decreases latency and increases throughput, I think Celestia's version of that would be anything that decreases trust or increases trust minimization and increases throughput. So I think that's maybe the difference between the philosophies is like we believe that blockchains are about trust minimization and obviously you need to have throughput so that they're usable. So I think that's kind of like the difference. I want to move the conversation a little bit towards bringing Eclipse here. Right. Because Eclipse is borrowing components from each of these ecosystems to build something that sort of benefits from the strengths of each one.
00:10:48.602 - 00:11:14.498, Speaker A: That's the way that I see it. And so I think it'd be interesting to talk specifically about what we each see as the strengths of each protocol and then why it makes sense to combine them and what the result is. And is it possible for Eclipse to take only the good stuff and avoid the downsides of the trade offs? So? Yeah. I don't know. Neil, maybe you want to open this topic up?
00:11:14.664 - 00:12:24.998, Speaker B: Yeah, the way that I think about it is the big difference between Solana versus Celestia is yeah, there's obviously Solana is optimizing purely for latency throughput. Celestia cares about Verifiability, but I think it's also the modularity of Celestia is more a statement about the market structure. And it's about now we have multiple execution layers all on Celestia, which are all competing with each other, which impacts how development occurs. And that's why, for example, when I think about a project like Tiny Dancer, it's the Eclipse version of how we'd want that kind of innovation to occur in our ecosystem. If someone creates a different competing part of some module and then they try to get us to switch to that one, that, to me, makes more sense than building it in house or trying to merge it into Celestia. Because, like to toley's point earlier, the constraint on Tiny Dancer getting merged into the Salana l one is all about if it doesn't impact latency and throughput. Whereas I could see to me, rather than Salana Foundation funding that via a grant, maybe like the modular way that it could have been approached is someone forks salana does basically the opposite of Eclipse.
00:12:24.998 - 00:13:32.222, Speaker B: They throw out the SVM and then they add Das and basically launch a celestial competitor that's like the modular market structure version of how that would have happened and then they launch a token or they raise money off of it. So that's what I like about modularity, which is that it encourages more competition, like what I think is a more economically efficient way because the downside of the tiny dancer approach is also like, what if that team doesn't work out? I think it's a really strong team, but what if it's not actually the optimal result and some other team could have done it in a more efficient way or innovated more so that's what we try to borrow from Celestia. And then the second part is just the ethereum Celestia vibes of Verifiability and making sure that the end user can still verify every action that happens. So we're trying to take solana and preserve as much of the throughput and latency as possible with the constraint of Verifiability. Whereas I think for Solana it's somewhat the inverse, whereas it's like preserve the constraint is maximize latency and throughput and then add in as much Verifiability as possible. But yeah, happy to be interested to hear totally John thoughts on that.
00:13:32.356 - 00:13:43.698, Speaker C: Yeah, that basically nails it. And it's awesome to see other folks doing research on Verifiability because as soon as there's a good idea pops up, it's like on the table for us to try to work it in.
00:13:43.784 - 00:13:45.940, Speaker B: Exactly. Yeah, you can always upstream it.
00:13:48.630 - 00:14:27.226, Speaker D: Yeah. My short answer overall to the initial, like, can you just take the good pieces from all of them without any trade offs? The answer is like, absolutely not. There are trade offs for all of these systems. Eclipse is not better than Solano or better than ethereum roll ups or worse or vice versa. It makes different trade offs in a way that I find very interesting because it is a very unexplored space of there are pretty strong extremes of Solana goes to a very extreme end of optimizing for complete latency and the strongest real time guarantees. On the other end, ethereum rollups are very different. And as a result of that, Eclipse will make different security assumptions on its bridge versus typical ethereum roll ups.
00:14:27.226 - 00:14:39.074, Speaker D: And there are security assumptions there, but it comes with added Verifiability and lower cost. So it's picking what do you think are the best trade offs as they stand right now with the options available. But there are definitely trade offs on all spectrums here.
00:14:39.192 - 00:14:57.020, Speaker B: Yeah, I mean, there are cases where something is just straight up not on the efficient frontier, but at least for the leading blockchains, it's pretty rare. And I think another interesting constraint that scroll and optimism obviously impose is full EVM equivalence or compatibility, which is just different than what we're doing too.
00:14:59.070 - 00:16:06.100, Speaker A: The way that I see it is when I tweeted this, I think of the SVM as currently the best in class execution layer. I think of Ethereum as the best in class settlement layer. It has the moneyness, it has the liquidity and the users and the community. And then I think Celestia is the best in class data availability layer. And so I think that's a pretty powerful combination because you're able to benefit from each one of those features of each ecosystem or technology stack and that's why Eclipse is so compelling to so I guess you did bring up Verifiability, and I know that Tolly is saying that Verifiability is important. If there's something that gets innovated that would be folded back into the Solana stack, I'm curious how realistic that is. And is that something that Solana would eventually do? Like maybe support data availability sampling and or fraud or ZK proofs? Because we've talked about this and you have appreciated and said those designs do make sense.
00:16:06.100 - 00:16:14.660, Speaker A: And so I'm wondering if that's actually something that Solana takes seriously or if that's just sort of like, I don't know, still a ways away.
00:16:16.970 - 00:17:47.620, Speaker C: Let's see the work to enable SPVs and stuff like that for Tiny Dancer that's already in progress, we're trying to wrap our heads around. Is it possible to kind of reuse some of the work that we use for Turbine erasure coding and use that for data availability sampling? It's tricky because one is really optimized for latency and fault tolerant real time propagation. The other one is trying to minimize the amount of samples that you need to take from the blocks. We're all debating these and if we find that perfect solution, we'll take it. Right? But the likely outcome is that I think we'll have separate paths and the data availability sampling path might be asynchronous with like in my ideal scenario, there's a very fast way to propagate the block and vote on a fork and everything else then can run asynchronously and provides those services without impacting throughput or latency. And that would give us kind of a lot of flexibility and adding features that have these need bigger chunks of the data, take longer to run and then we can kind of play around with maybe you do data availability sampling on actually more than one block on a chunk of blocks because it's more efficient. And that's within the fraud timeout that the light clients need to wait anyways, like stuff like this.
00:17:47.620 - 00:17:58.470, Speaker C: So yeah, we're actually seriously discussing these and some of the stuff the early stages to support like Tiny Dancer are already moving through production.
00:18:00.490 - 00:18:17.900, Speaker A: Wow, that's exciting to hear. And honestly, that'd be a massive win for the space, I think, because that's been I think from my perspective, my main complaint about typical monolithic blockchains is that they are hard to verify, but it doesn't have to be the case. They can always implement these things.
00:18:19.310 - 00:19:25.460, Speaker C: The risk kind of fraud, ZK verification that they're doing for Eclipse, that's very much like we can just port that to SVM. It's awesome that there's a whole separate team that's just like 100% focused on that. So that's a huge win of having them go do the R and D and build a product around it. And in my mind, in a lot of ways, supporting what Neil said, it's really good that there's a separate team, a separate funding, separate product vision that actually build these technologies, because oftentimes public goods die if it's just a public good built for the sake of the public good. There's no commercial dependency on it. Nobody cares, nobody uses it, and it kind of bit rots away a lot of really good ideas and technologies end up there. And it takes a miracle like Linux or something like that to keep an open source ecosystem going where everyone continuously feeds back really good ideas and really good technology back into it.
00:19:26.070 - 00:20:03.386, Speaker A: Yeah. The fact that Solana could then actually take this sort of fault proof thing that Eclipse is building and actually integrate it into the original Solana protocol is awesome because it's kind of like what we talk about modulism not maximalism in the sense that modular chains or the fact that there's multiple people building different chains in parallel can accelerate innovation. And then whatever innovation works, they're experiments. And if something does work and proves useful, it can be folded back into the original thing. So in that way, I can see Eclipse being extremely beneficial to Solana.
00:20:03.498 - 00:20:41.210, Speaker B: Yeah, and the tech can be repurposed in different ways too. Like the Zksvm might be not used to prove every single transaction on the Solana canonical chain because that would probably be too expensive. But when you really do need it, then you can generate one. Or like another project that I find interesting in the SVM ecosystem is Roam, the shared sequencer protocol. So that tech is going to be very useful for Eclipse for almost simulating EVM roll ups on the Eclipse L two. So the same tech that they need to make Salana into a shared sequencer is a tech that we were kind of scoping out for a separate purpose.
00:20:43.310 - 00:21:25.094, Speaker A: Yeah, that brings up another point I wanted to talk about today, which is, I think, of Solana. There's like a lot of innovation wrapped into Solana, but SVM is one part that obviously Eclipses borrowing. But then the consensus layer is another thing that has been really heavily optimized. And to me, now we already have SVM rollups, which is something that I thought would make a lot of sense. Maybe the next step is to have shared sequencing based on Solana's consensus protocol. And I don't know whether that should be Solana itself or that should be like a new shared sequencer that just forks the code similar to what Eclipse has done.
00:21:25.212 - 00:22:32.000, Speaker C: I think this is where not that I don't want to discourage people from innovating, I think the core value that a sequencer provides is actually the physical decentralization of the validator network, like the boxes and the people running it. This is where you're trying to get sensors of persistence and increase mev competition and stuff like this. And this is basically what we do day in, day out. Look at graphs and try to add more people to the network and find data centers and ASNS that Solana is not in and optimize that from a very kind of silly example. Imagine there's a Solana Validator in every ASN in the world. There's actually no reason to have another instance of the network for that purpose of information like censorship, resistance, because there's a box in every ASN, every internet link is in the same network subnet as a Solana Validator. You're covered, right? The entire world is covered at that point.
00:22:32.000 - 00:22:50.290, Speaker C: So I would love to see that kind of sequencer code running on Solana, Mainet and anything that I think would help them accelerate that. Any system calls that they need or something like that to improve performance, those are all on the table.
00:22:50.630 - 00:23:28.000, Speaker B: Interesting. Yeah, I agree with the end result that the shared sequencer should use Salana l one. But the reason why I find it interesting isn't so much about the number of sequencers because I don't think that we need quite that many sequencers for a roll up. But I like the fact that there's already existing economic stake there because if you look at Astria and Espresso, in order for them to provide atomic composition between transactions on different roll ups, they basically trust the builders and they slash them if they lied about transactions, not reverting or both. So like, the fact that Solana already has that in place, I think makes it a really attractive option.
00:23:30.610 - 00:23:33.742, Speaker A: John, do you have any I mean.
00:23:33.796 - 00:24:53.066, Speaker D: I've had some thoughts on how important economic security is and maybe not as important as a lot of other people think it is in these cases. The main thing for me, I would say is particularly for roll ups, you have a bit of a different trade off where particularly for a traditional integrated chain that's entirely reliant on its consensus, like Sauna for basically all security guarantees on all time horizons, it then particularly makes sense to maximally decentralize it. But in the case of a roll up, you're effectively already paying another consensus for exactly those responsibilities on just like a slightly different timescale. So if you're already paying ethereum or Celestia or whatever else for the strongest possible security, including censorship, resistance and liveness on a slightly delayed timescale, the question is, does it make sense to maximally decentralize the thing that you also need for that commitment within the first 15 or 30 seconds? Or is it okay to make meaningfully different trade offs to just maximize the hell out of the efficiency of this thing? And in most cases I tend to think it will. I don't think it's going to make sense for most roll ups that need any kind of shared sequencer that has thousands and thousands of validators. It seems to be a bit repetitive in most circumstances for me. But again, there is value in it.
00:24:53.066 - 00:25:11.070, Speaker D: There are trade offs. You do make different assumptions on real time censorship, resistance and liveness. And that is what Solana is building in large part for is the real time guarantees versus something like ethereum that is building for a slower, very strong guarantee. So it's different grades of finality and assurances, kind of like different timescales.
00:25:13.990 - 00:26:01.294, Speaker C: Yeah, there's a lot actually to be said there. If you're doing actual analysis of how much does it cost for you to run your own, even centralized sequencer, that's very reliable. You're paying X amount of dollars per month. That actually pays for a lot of transactions for most sequencers. It's just cheaper to just use Solana mainnet because there's a lot of overhead in running boxes and if you can share that overhead with a bunch of users, you get a lot of cost reductions. It's not true every time there's a bunch know caveats there. But I'm also curious, and I tend to agree with John, I'm like there's no such thing as economic security.
00:26:01.294 - 00:26:16.710, Speaker C: It's only like physical security that matters. Economic security could be an incentive to increase physical security, but when the rubber hits the road, it's the physics that matter. I'm curious to see how this will play out in the long term.
00:26:19.610 - 00:27:18.738, Speaker A: So, to bring the conversation back to the original topic a little bit, we have modular blockchains and monolithic blockchains. Typically kind of the way that I define the definition is modular blockchain borrows components from a bunch of different protocols, whereas like a monolithic or integrated blockchain is one standalone protocol that does everything. And that's kind of a comment on the actual technology stack and the way it's implemented. But then there's also a lot of sort of philosophical associations related to modular versus monolithic. For example, fraud and fault proofs ZK proofs tend to be associated with modular blockchains, but they can be implemented in a monolithic blockchain like Solana. Or same with database sampling. There's things like app chains versus general purpose execution or like a multi chain world versus a single shard.
00:27:18.738 - 00:27:51.810, Speaker A: Right. There's also questions around Verifiability, we already talked about that a little bit. But sovereignty is another topic where typically modular blockchains tend to be more aligned with this notion of sovereignty. Developers and applications should have more control and customizability. So I'm curious if these distinctions are actually it makes sense that they are sort of associated with modular versus monolithic? Or is this also another area where it's kind of arbitrary?
00:27:54.070 - 00:28:19.770, Speaker B: I agree with some of those. The sovereignty one, that's like a very Cosmos idea, which originally applied to full monolithic L1s. Each cosmos chain does everything for itself. And I don't think you're really fully sovereign as a roll up. I mean, you're far from fully sovereign, right? You're subject to the fees of the L1. The L1 could theoretically fork and change the state of your bridge contract. They can do all kinds of stuff if you're an L two.
00:28:19.770 - 00:28:54.806, Speaker B: So I don't think it's sovereignty is really the reason to be on a roll up, so to speak. And I think it's sovereignty is probably the biggest reasons for appchains. Like, if you're going to do an app chain, it's pretty much the number one reason. And there are these rare, exceptional cases like MakerDAO, such as even the existence of Eclipse to some degree, is like a sovereignty decision, right? We want to prioritize different things for the tech, so we forked it rather than trying to build into Solana all one. So those cases, I think, matter, but it's not super common. I think for apps especially, Solana is.
00:28:54.828 - 00:28:57.430, Speaker C: A sovereign roll up of Filecoin.
00:29:01.690 - 00:29:03.498, Speaker B: Nowadays. Is that actually happening?
00:29:03.664 - 00:29:41.480, Speaker C: Yeah, I think they started dumping all the data there, so it's not fully public yet, but it seems to be happening. It's pretty funny. I actually think this is one of the unsolved problems, and it really ties to governance and coin voting and all this stuff. It's very hard to have a system that people can all agree that this is the rational choice that needs to be done. We all agree that it needs to be done. We can all do it, and it's easy to do it if we all individually do it and update our code. But it's very hard to pass a governance vote to do it.
00:29:41.480 - 00:30:28.420, Speaker C: No one has been able to fix this problem probably since as long as there have been humans around with their own personal interests and something to gain out of going the wrong way. I don't know if it's fixable. It might not be. This is why I think the reason for app chains is, like, a very strong, compelling case that is much stronger than performance on any of these other problems, which I feel like will become marginal within five years. I don't think there'll be any difference between using running multiple apps on one Solana chain versus each chain with its own instance I think should be indistinguishable or we're bad engineers. But the governance problem is really hard. I don't know how to solve it.
00:30:28.420 - 00:30:37.160, Speaker C: I think I'm reading History of Rome to see if there's solutions, but it doesn't seem like there are.
00:30:39.930 - 00:31:17.166, Speaker D: Yeah, I strongly agree with all that. Like modular and roll ups and app chains. All these words kind of just get mixed. Together in general. I think modular is trying to poke at the verifiability and data availability sampling side of things, which I think that as totally mentioned, like a chain like Solana can do that. App chains are a very different thing to like we just kind of associate them with a world of many chains. But that is the main reason that I see for app chains is that practical sovereignty aspect of figuring out governance is a really hard problem and the ability to meaningfully coordinate a fork is incredibly valuable.
00:31:17.166 - 00:31:39.610, Speaker D: That is probably the strongest argument still to me actually for app chains right now is that in the long term because that doesn't seem like a clearly Solvable engineering problem in the way that most other app chain uses seem like just hard engineering problems that you can kind of solve over time. This seems like a pretty fundamentally difficult one where it's just like a completely different way of doing governance.
00:31:40.430 - 00:32:01.470, Speaker A: So John, just to understand what you're saying, you're saying that the governance is just a fundamental problem that maybe only having separate chains will be able to solve. But then the other aspect of app chains where you want to customize the VM for your use case is something that you could still build the same thing eventually on a general purpose execution layer.
00:32:01.630 - 00:32:49.614, Speaker D: Yeah, most of them just feel like hard engineering problems, like the ideas of internalizing mev. It is definitely easier to do that in an app chain context. But if you get creative with the way that you're auctions are done for liquidations, that you can have a progressive auction where most of the value ends up going back early liquidations for auction liquidations were really shitty and most of the value didn't go back and they were super inefficient. But people learn those things over time and then you fix them. This practical sovereignty aspect seems very difficult to solve fundamentally. It's not just an engineering problem, it is token governance and being able to change things on chain versus not. And that's also why in part I've pushed back a lot on the sovereign roll ups versus smart contract roll ups because I don't think that's actually the important distinction.
00:32:49.614 - 00:33:32.000, Speaker D: It's like what is your practical ability to fork? And you can have a sovereign roll up where all of the money on that thing is bridged from somewhere else. It's a general purpose chain with a million different people on it's, got a bunch of USDC, you're not going to fork that chain if all of those other stakeholders don't agree versus a single cosmos. App chain can be incredibly sovereign because it is like an aligned community that is reasonably able to coordinate and they understand what is the valuable state there and we own it and they have that practical ability to fork. So that is a really important and valuable thing and I don't know how you solve that in a completely general purpose context with a million bridges and all these different things and apps like living together, it's difficult.
00:33:35.250 - 00:33:36.766, Speaker A: Neil, were you going to say?
00:33:36.948 - 00:34:27.998, Speaker B: Yeah, yeah, I was just going to say about John's point about the bridge is basically that's something that imposes constraints on how forkable you are, and that doesn't really change whether you're a roll up or whether you're an L1. Either way, there's a place where most of your money is coming from, so I was just going to point that out. But yeah, it just reminds me of Kyle Salani's piece, which gave a lot of good examples about how you can internalize mev and you can come up with these. Gotcha examples where it's either very difficult to do, but those cases just aren't that common. And it just doesn't really matter enough for that to be the main reason why you have an app chain. Because there's all these downsides of having an app chain or app roll up. And I think that the reason why people do that and the reason why all these terms got conflated is largely a function of the fact that roll ups and L two S, that market trajectory was heavily shaped by ethereum scaling.
00:34:27.998 - 00:34:43.590, Speaker B: So that means that they're trying to take the EVM. Even the fact that roll ups are considered a scaling solution is kind of like an ethereum centric thing because the fees are so high on ethereum, whereas I don't know if that's inherently true necessarily.
00:34:44.730 - 00:35:19.026, Speaker A: I mean, to push back on that a little bit, if it were so easy to do mev mitigation or capture at the actual smart contract layer application layer, why do we have things like Flashbots or the equivalent on Solana mev boost cheetos thing? Yeah, exactly right. Extra protocol things are not like Uniswap doesn't have some kind of mev thing that they built in. They should have if they could. Right. So what's going on there?
00:35:19.128 - 00:35:46.250, Speaker B: Yeah, I feel that, just to preface what I'm going to say, non ethereum L1 mev, I just feel is really small to begin with, so it only really matters on Ethan One. And I think part of the reason why Uniswap doesn't just build that in is because that would be a breaking change I think the community would fight. I don't think that's necessarily a good thing for Uniswap to change the protocol that people have willingly LP it into everyone's using it because of its partly.
00:35:48.110 - 00:36:28.710, Speaker D: Yeah. In short, I think this actually is a very clear example of it very much is an engineering problem of yeah. You started from the most inefficient thing possible with super long block times in AMM. That's like a completely public everyone's sending it to. And what are the continued steps of these different versions of hooks that help you internalize mev v three? Adding concentrated liquidity reduces the amount that you're pushing prices, and out of the extreme end of you're starting to see with Uniswap X similar to cowswap is like, okay, we can batch more of these things, do it off chain. And there are different variations of mev capturing AMMS. Everything is getting better and better and better and better over time and we see that continued march.
00:36:28.710 - 00:37:10.134, Speaker D: So we see what it is today of what is the most inefficient thing possible. Yeah, there's a lot of money being left on the table and that's why someone like Uniswap has a very high incentive to, okay, how do we internalize that more? And that's why they keep doing that in every single design is they are internalizing that more and more and more. And that seems like a reasonable expectation to continue. And again, there will always be, I'm sure, unique cases where you fundamentally need to change something. Like dYdX is a very good example of we want the validators to hold the order book in memory. Yeah, you can't do that on a general purpose chain unless you could tell the validators what to do. But it seems pretty clear that those are generally far and in between.
00:37:10.134 - 00:37:15.560, Speaker D: Like those things that are pretty fundamental versus most of them are just engineer problems that keep getting better over time.
00:37:18.270 - 00:38:16.198, Speaker C: Yeah, tend to agree there even in Solana, you see between order books, which have a fraction of volume that Uniswap has, there's a difference between Openbook and Phoenix. They've made optimizations that improve performance and everything's faster. And you see a reduction in mavs simply because cancel messages are cheaper and easier to land. So stuff like this happens naturally as engineers just keep grinding it. There is kind of really fun engineering problems there. How do we fully solve this? We have a bunch of ideas on multiple concurrent leaders and stuff like this that are pretty hard, really hard engineering problems, but will also again, each one of these improvements cuts the available mev by 50% or whatever. And eventually you get to a point where I think you're fighting physics.
00:38:16.198 - 00:38:34.980, Speaker C: There is some value in being able to be first to synchronize information and first reflect it on the chain. And people should get rewarded for that. And that's actually we want to make sure that happens, that an attacker can't steal that information and steal the work away.
00:38:37.030 - 00:39:04.122, Speaker A: So to close off on that topic, it does sound like in the modular versus monolithic debate, app chains and sovereignty are something that is more enabled by the modular architecture. But at least from your guys perspective, app chain part is not as important as sovereignty or sovereignty seems a little bit more useful of a feature overall. I think that's kind of what you guys are saying.
00:39:04.176 - 00:39:18.014, Speaker B: I just don't know if modularity really enables more sovereignty or less sovereignty. Because the Cosmos l one is pretty sovereign. Right? That's a monolithic chain. And then also having a roll up, you're pretty much dictated by how many assets come.
00:39:18.132 - 00:39:32.210, Speaker A: Yeah, I think what I'm talking about. Obviously, if you launch your own L One that L One is sovereign. Right. But I'm saying I'm building an app on Salana on a shared state machine. I think that's less sovereign than a roll up.
00:39:32.360 - 00:39:37.570, Speaker B: But what about building an app on scroll? Am I more sovereign on scroll?
00:39:38.710 - 00:40:12.506, Speaker C: You could actually take your state and go this is like I think what people don't realize is that you could have a Token SPL Token. You don't even own the Token contract, but all of a sudden you can say F solana and it totally sucks. And you can actually take all your users and move them to Ethereum, to another chain, whatever. It's because the ultimate test is the self custody. Right. If people own their own keys, you can then coordinate this. It's just much, much more difficult to do that the less of the stack you own.
00:40:12.506 - 00:41:30.726, Speaker C: And I think when you're dealing with a complex DeFi protocol that has billions of dollars of real world assets, there is this fear that Governance Token is going to be able to somehow attack these RWA based databases, right, that are very important for long term product market fit and reliability of this thing. So how do you make sure that no matter what, the governance or whatever cannot go screw with people's money? It's just like there is no good solution there. But you still need governance to be able to do code updates because there's bugs and there's features and computers change. Right. It's just like people will need to rewrite the code all the time. Yeah, that's like the hard problem is that you can always fork. Anyone can always look at the chain, it's public data and take it and go, but how do you do it in a way that is incremental and gradual and allows for these updates that are benefit to the product without introducing an attack vector that could completely blow everything up? There is no really good solution there right now.
00:41:30.908 - 00:41:42.734, Speaker B: Yeah, it's like related to the problem. We can't just make an l Two bridge contract immutable. That's something that we could theoretically do, but it's not like a wise thing to do because you do want to have the ability for governance to upgrade it.
00:41:42.852 - 00:41:47.630, Speaker C: And to your point earlier, honest majority assumptions everywhere.
00:41:50.210 - 00:41:50.960, Speaker A: No.
00:41:54.290 - 00:42:02.610, Speaker D: Still one of my favorite memes, I think it was Andrew Miller who had made it. And it's like the Scooby Doo like behind the mask thing and it's like cryptography and honest majority assumptions.
00:42:06.790 - 00:42:24.410, Speaker C: I think we're going to all realize that a really well constructed quorum is a beautiful thing and there are actually ways that we can do that and understand what makes good quorums and what makes bad quorums and do a good job of selecting good quorums.
00:42:26.990 - 00:42:30.800, Speaker B: Sounds a lot like regular meat space governance, right?
00:42:31.970 - 00:42:32.720, Speaker A: Yeah.
00:42:34.290 - 00:42:36.000, Speaker C: It's made of people, man.
00:42:38.130 - 00:43:33.300, Speaker A: Yeah. I think from my perspective it's okay to rely on a quorum for certain things, like consensus is unavoidable. Consensus requires a quorum, but the validity of the chain should be enforced by the users and the people who have money and the stakeholders, essentially. And if you offload that to a quorum, the disincentives to break that are going to be so high for the quorum participants that I don't know, it's just not going to be a stable equilibrium. There's always going to be a threat that those people are going to collude and screw everyone else over because they have every incentive to do that. And if we're going to put trillions of dollars of assets at whatever, like the most critical coordination for humanity on chain, and then it all just boils down to a group of people who can rug it behind closed doors. I don't know.
00:43:33.300 - 00:43:36.980, Speaker A: I feel like that's not why we're here. I don't know.
00:43:38.550 - 00:44:10.010, Speaker C: 100% agree with you. The best people to make a quorum out over the ones that want better than honest majority assumptions, those are the best participants. Yeah, I think these are the harder problems because they're not clearly engineering problems. Probably why there's going to be a wide variety of blockchains in the future, despite my best efforts.
00:44:12.910 - 00:45:32.598, Speaker A: Yeah. Okay, so to shift the conversation a little bit, I want to talk a little bit more about sort of like the economics and value capture of this stuff. And so I want to talk about Eclipse's existence and when it launches, what impact will it have on each ecosystem and will it benefit all of them? Will it benefit them equally? Are some bigger winners than others? Are there threats that Eclipse poses, for example, to Salana? L1, and building on that, is this idea of a value capture where to me, if you use an underlying protocol and you're paying fees to that protocol, it's a different relationship to forking the code and reusing the code. Right. A really good example of that is Cosmos, where the code base cosmos, SDK, and Tendermint, et cetera are widely adopted, but many people criticize the ecosystem for lacking value capture and all that adoption of the Cosmos code has not resulted in value capture to the underlying protocols. And so I'm curious if there's a parallel here with Eclipse using SVM. I know that on Bankless that was kind of one of the positions they took.
00:45:32.598 - 00:45:52.560, Speaker A: They positioned as sort of like a threat. Obviously, we've already talked about a lot of the benefits of Eclipse to Solana. Anyway, I just want to open up that broad topic because I think it's a really interesting one to think about because it will shape kind of the future of how modular blockchains affect the various ecosystems that they borrow from and build on.
00:45:55.570 - 00:46:53.282, Speaker C: I wish every l one, if the world was that Ethereum and its roll ups were the only EVM chains and everything else was SVM, salana Bayonet would be just so much more further along in adoption and value capture and everything else, it would have been, I think, an amazing outcome. So people from a technology perspective and developer adoption and trying to get somebody to build on your, like, I think the worst thing, what I wish all my competitors did is build proprietary blockchain that prevented open source collaboration. That would be like the biggest win for Solano. Like, yeah, take our code and steal it. That's basically adoption with developers is really hard. It's just like the hardest thing. And any roadblocks that you put up there in terms of licensing or anything else will kill you.
00:46:53.282 - 00:47:23.366, Speaker C: And there's many technologies that die because of that. I think over the long term, anything that doesn't have a moat will get kind of eaten away anyways. Like, Ethereum has a moat around the assets that it's settling. And it can have very slow performance if people still go there because it's the only place to settle those assets. And roll ups will be more expensive than Solana. But because they expose those assets in a more native way, people go and use them. And that's ethereum's moat.
00:47:23.366 - 00:47:34.590, Speaker C: And it doesn't matter to Ethereum if people copy EVM around. So Solana, Mainet, needs to have its own moat and that's really hard to achieve, but it would be much, much harder if Devs just didn't want to use SVM.
00:47:37.330 - 00:48:14.922, Speaker D: Yeah, for the Cosmos example of not capturing mean, Cosmos has a lot of mind share, but I mean, there's no value capture because they don't have users in value. Like, that's the reason why they're not capturing value. And if that happens at the end of the day, like here, then yeah, then obviously the same thing. But it's getting to that hurdle is the hardest thing in the first place of getting people to care about your. And like, that is how you do there's. In my mind, there's clearly benefits to all three here. For solana, Celestia and ethereum, just all in different ways.
00:48:14.922 - 00:48:17.754, Speaker D: Like Solana is that point of like, yeah, it's getting adoption, it's getting people.
00:48:17.792 - 00:48:18.570, Speaker A: To care about it.
00:48:18.640 - 00:48:38.500, Speaker D: The problem isn't that they're not fast enough or not cheap enough. That's clearly not the problem today at all. It's just getting more mind share. And for Celestia, obviously, it's beneficial. Yeah, you have a roll up that's using you. This is the whole purpose of something like Celestia. And then to Tolly's point of.
00:48:40.390 - 00:48:40.706, Speaker C: An.
00:48:40.728 - 00:49:33.186, Speaker D: Ethereum roll up, l two, whatever we call these things, is like exposing that in a more native way to Ethereum users. That does make a difference to people when you have an alternative that is going to be significantly cheaper than other traditional single threaded EVM roll ups but has the same kind of benefits of it's really simple and easy to understand for people to have that same asset mapping in their head of they get to use the same wallets. Everything's denominated in ETH. You pay in ETH everywhere it feels like an extension of Ethereum and all of these kind of roles together, that does make a difference. Tangibly even if it is very possible that we'll see when Celestial launches. But I would expect it's very possible that Eclipse is more expensive to use than Solana. But the question is, again, that's not what Ethereum users, at least currently, and other ones need because they're clearly paying more, a lot more than they will here to use Ethereum roll ups right now.
00:49:33.186 - 00:49:38.360, Speaker D: So that is clearly not the most important thing to them. So it's finding what is the right trade off spectrum there.
00:49:39.690 - 00:50:11.520, Speaker B: Yeah, and I feel like obviously there's a direct benefit to Ethereum in that we put the canonical bridge there. But I actually feel like the biggest benefit to Ethereum, similar to Solana, is this indirect benefit, which is that we're just encouraging more innovation on. Like this is one of the probably first prominent non EVM chains. So just getting people out of the EVM world, even Vitalik's latest post on Enshrinement was all about Zke. EVMs, like, doesn't even mention other VMs, so getting that more into the Zeitgeist I think is going to be really beneficial for.
00:50:18.310 - 00:50:36.360, Speaker A: That was kind of leading to my next question. Neil which know Solana already exists, it's already cheap to use, has plenty of why, why does Eclipse need to what, what's new about Eclipse that I'm a developer or user? Why would I go to Eclipse when there's solana? It's like.
00:50:38.250 - 00:51:08.398, Speaker B: Yeah, it's for a different set of users, likely with more Ethereum aligned values, meaning Verifiability is at the core of this. And that's always going to be the constraint for us. The second is keep their money in ETH, so they're bridging that over. That'll be the currency that denominates like our NFT ecosystem, our DeFi ecosystem. And those to me are the biggest benefits to users, just like at first glance. And then for developers, this gives them another audience to tap into. So if you're a Solana dab, you're going multi chain.
00:51:08.398 - 00:51:27.030, Speaker B: And that's when people are like, it's worth asking the question, is this a vampire attack? And I think the answer is pretty clearly no, because it's a second deployment with separate liquidity. It's often separate developers even, but it gives them an opportunity to derisk themselves rather than just deploying to one environment.
00:51:27.930 - 00:51:36.826, Speaker C: There's definitely competition between every execution environment. Like everything that runs transactions is competing with everyone else.
00:51:37.008 - 00:51:43.562, Speaker B: It depends on the specific user, right? Some users might just not be willing to leave Ethereum, so you're not competing over that user.
00:51:43.706 - 00:52:46.882, Speaker C: Right. So we're in the grand game, right? We're competing for the users. We're competing for the devs. At the same time, what's best for Solana is that there's more SVMs out there because a developer will be like, well, I can build my code that's compatible with Solana and have optionality I can deploy it on Eclipse, I can deploy it here, I can deploy it there. And they're more likely to make that choice because a lot of them make that choice because EVM is kind of the de facto thing, and that's really tough to compete without either winning the entire market to where the optionality doesn't matter, or you actually have optionality and you give your technology away to these other competitive environments. So those are the trade offs. If there was a clear path for a proprietary blockchain to win 80% of the users without being open source and letting competitors use it and create optionality, somebody would have taken that option already and done it.
00:52:46.882 - 00:53:20.758, Speaker C: I don't think that's just feasible at all. That's just never going to happen. So the only alternative is you try to get your technology spreaded far and wide and you have something unique that captures value, and hopefully you're lucky that that unique thing is the one that the market cares the most about and you win. Right. But there's no guarantees in life, right. We're all competing, in my view, too. I think typically software has maybe at most six months lead on a software edge.
00:53:20.758 - 00:54:15.440, Speaker C: If you build something in software, if it's really important for PMF, a competitor should be able to get there in six months. And it took a while, but we were starting to see more parallel execution environments coming out, and I think that's very important in the long term, and I would really rather not. It would suck if there were yet a third VM, whatever it may be called, that was parallel and was also competing for Developer Mindshare versus SVM. I'd rather be SVM. It just would be even harder for Solana to attract developers if there was another virtual machine to compete with. So it's much, much better long term for, I think, any ecosystem that's trying to be a platform to be open, unless you're Apple and you have a monopoly and you can kind of bolt everything down, but that's very hard to get there.
00:54:21.010 - 00:54:38.870, Speaker A: Cool. Well, I think that's a really enlightened perspective, and I love that Solana is so open and embracing of lots of people using the SVM. And I do think that's strategically completely the right angle.
00:54:40.730 - 00:54:53.210, Speaker C: I would have quit if I couldn't build open source code. I would have just like, out of here as like a personal thing. There's just no way I'm ever building something that's not open source.
00:54:54.030 - 00:55:56.880, Speaker A: Love that. And I think that's something that's deeply aligned between modular and monolithic is like, we are all aligned that we should be building open source code. So we have just like, maybe ten more minutes here. And so I want to sort of start to sort of wrap things up a little bit. I'm wondering if, based on the conversations today and what we've talked about, the advantage of Solana, the trade offs of Solana, Celestia and Ethereum, is it possible that each protocol could take a page out of the other's? Should should Celestia, for example, enshrine an execution or settlement layer? Or should Solana implement das and fraud ZK proofs and or maybe become support some kind of shared sequencing? Or maybe should Ethereum get rid of its execution layer? What are some of the ways in which each protocol can kind of learn from each other? Or should they stay where they are in this trade off curve? Because those are kind of like optimal points.
00:55:58.930 - 00:57:07.300, Speaker D: I think all can learn from each other to some like and that's a lot of what we were talking about before. A lot of what Ethereum is doing is free research for people like Solana and it will be great to adopt those things over. Like you can prove anything, you can add bas to this stuff later on and add that kind of separate path if that verifiability ends up being important to users. As far as the kind of settlement part of it, the longer it goes along in my mind, it potentially becomes less important for Celestia to have this quote, unquote settlement in my mind. Because the whole reason for settlement is basically you're just saying this is the place where our really important bridges, this is where the assets are coming from and there's just such a large kind of path dependency on that keeps increasing. And that's the reason that Eclipse will in large part settle to Ethereum is because that is where the interesting assets are that people want to use ETH, people want to use the other ETH ecosystem assets in a native way in a canonical bridge that has these security properties, Et. So like there's a reason to settle there.
00:57:07.300 - 00:57:45.620, Speaker D: It becomes less clear why you should settle to something like Celestia when the reason that you settle there generally is because you find the native state there super interesting. And that is less likely going to be the case given what Celestia's kind of trade off spectrum is that there is naturally not going to be that abundance of assets and state that people really want to touch into the same extent. And then ethereum learning from Celestia. I mean, obviously both are building very similar things on the data availability side of Ethereum has a very similar kind of long term roadmap to what Celestia is going to be launching soon too, and both are going to keep building there.
00:57:48.870 - 00:58:24.480, Speaker B: Yeah, I think there have been massive misunderstandings around settlement and John's been done a great job like pushing back on that stuff and we've tried to as well with Eclipse to explain what benefit is it to be a settlement layer. And there was a version of Eclipse where we were going to try to do settlement ourselves with some sort of honest minority scheme. It was incredibly complicated. And then we were thinking about maybe even restricting execution. There wasn't much benefit to doing so it really comes down to, like John was saying, the assets on the chain and that's why Ethereum is so good for that because there's just the most assets there.
00:58:30.370 - 00:58:33.380, Speaker A: Tolle, did you have anything to say?
00:58:33.910 - 00:59:15.854, Speaker C: Yeah, I mean, this is kind of like ecosystems have a lot of different people that are building and moving it in every direction. Each one is chasing PMF, they're going to kind of slightly pull them in sometimes opposite directions. I think that a lot of the ideas, as soon as something good comes out, people will copy it. That's just natural. And that's really generally good for technology to even have multiple redundant implementations of the same idea. You can get innovation just out of that too. It's a natural process.
00:59:15.854 - 01:00:01.690, Speaker C: I don't know what I remember working in Linux. It took like ten years for BSD jails to get him re implemented as namespaces, even though it was a really good idea and everyone kept pointing at it and saying, look, this is really awesome and you can use it. It was a niche product until it became namespaces and then Docker or whatever made a product out of a man page. So when this stuff actually matters is really hard to tell. There's a lot of good ideas floating around. It's up to each developer that's actually working in a product and chasing users to figure out what to pull. It's a natural process.
01:00:01.690 - 01:00:16.510, Speaker C: I don't really see if there's nothing we need to do about it. It'll happen anyways. As long as you're writing open source code. And even if you're not, as soon as you write something proprietary and it's good, somebody will re implement it as an open source alternative.
01:00:17.430 - 01:00:34.360, Speaker B: I feel like that's actually what Ethereum does best with their roadmap. It makes itself very conducive to people taking tech from other ecosystems like Cosmos and now we're seeing it with Solana and bringing it back to Ethereum. So that's one advantage of the direction that Vitalik has left for them.
01:00:36.010 - 01:01:14.850, Speaker A: Absolutely. So to wrap things up, the last question know basically monolithic or modular or some secret? Third thing is monolithic and modular, are they actually useful distinctions? Is everything just kind of on a blurry line? And with that, are all these different ecosystems competitive or are we all kind of building something that can be collaborative and is something like Eclipse a win win for everyone involved?
01:01:17.210 - 01:01:28.810, Speaker C: Long term, there's only going to be one giant execution environment that'll do native Settlement because every BFT system does settlement and it'll soak up all of the world's transactions.
01:01:30.750 - 01:01:32.326, Speaker A: That sounds like monolithic.
01:01:32.438 - 01:01:43.980, Speaker C: Yeah, for sure. For the sake of the argument, I will take that position.
01:01:47.410 - 01:02:19.350, Speaker A: My comment is well, I don't even know if I believe in one single DA layer necessarily. But I do think that consolidation at the DA layer does make sense. But execution I feel like, will be split up for scalability reasons, for sovereignty, for all those different application specific use cases. That's my position. But. I do agree that it makes sense to pool on the DA layer because that's where you share trust minimization.
01:02:20.890 - 01:02:52.702, Speaker C: My counter reason for that is that DA is the easiest thing to commoditize. It's just kind of data and people are going to care less and less about it. And if you can get stickiness around like a single gen execution environment, it'll kind of be like a gravity sink. Like, yeah, I want my contracts to execute there, and everything else, obviously. Who the hell knows, right? I don't know. And it'll change at some point. Maybe it'll be a hot thing that there's one execution environment.
01:02:52.702 - 01:03:02.850, Speaker C: Five years later it'll be a new narrative that no, we have all these very highly optimized, unique things and it's technology, right? It comes and goes in waves.
01:03:03.010 - 01:03:38.158, Speaker B: Yeah, I think it's essentially what Ethereum is also trying to win and they have this advantage that they just have a ton of assets there. So that's basically the Ethereum playbook. And yeah, I tend to agree with totally that the reason for execution to consolidate is that you have smart contracts that compose with each other. Users typically want to be where other users are. If you're playing a game, you want to play a game that other people are playing. So you lose atomic composability the moment you have multiple execution layers. And I think it just comes down to what does the community that's using that chain want? And communities will certainly consolidate.
01:03:38.158 - 01:03:53.590, Speaker B: If there were like an exact Eclipse fork, which is emphasizing Verifiability in the same way, then I don't see the need for both of those chains to exist. But given the two chains have the same values and they're optimizing for the same thing, then they should probably be consolidated.
01:03:55.530 - 01:04:36.638, Speaker D: Yeah. At the limit. I definitely think the modular versus monolithic breaks down at the end of the day, what is the difference? If you have salana and they add this slow path for Asynchronous like Das and ZK versus Eclipse becomes the one L two execution layer and it effectively sucks up all of the data bandwidth of its DA layer. And that's the slow path for getting Das and then proving after the fact what is the difference between those two pictures. At the end of the day, it starts to logically become basically of two tokens. I don't know. I guess that's the difference at the end of the day and then the practical difference is that along the way, different sides are making gigantic practical trade offs.
01:04:36.638 - 01:05:04.640, Speaker D: I'm like, okay, where do we actually think that we kind of land on that spectrum at the end of the day? And so it is obviously clear that there are generally two directions of what is the direction that Salon is going versus if you're building an app specific rollup that is very different. But at the end of the day, these technologies can be shared across each other and they will be shared across each other at the end of the day and the best stuff will get used by other protocols if it is successful at the end of the day.
01:05:05.650 - 01:05:51.790, Speaker A: I love that. That's a good note to end on. I really appreciate your guys time and I think leaving this conversation, we have a lot more color and clarity on this topic and this ongoing conversation about modular and monolithic blockchains and it's going to be interesting to see Eclipse launch and see how that goes. Celestia is also launching soon, so a lot of these things are actually going to become real and we'll be able to see based on this conversation, what the market actually says or sort of like how things play out in reality. Do you guys have any other closing thoughts or anything you want to leave with the audience?
01:05:55.330 - 01:05:57.040, Speaker C: There's no economic security.
01:05:58.610 - 01:06:02.782, Speaker B: That's a separate podcast for sure, but no.
01:06:02.836 - 01:06:36.410, Speaker C: Yeah, it's awesome actually to be in the space because of how open everything is. It's been really refreshing despite people think that there's a ton of tribalism or something like that on Twitter. Actual developers, when they get together, we're all very much want to help each other and there's been countless of times that I've messaged like, dunkrad and stuff and gotten an answer of him on a technical question without like, it's just an awesome place to work. So don't pay attention to the Twitter maximalist fights.
01:06:37.230 - 01:06:55.700, Speaker B: Yeah. And I think if I have to plug one thing, I think we've been pretty vocal about it, but we're launching our main net this year or the first main net beta or whatever. So, yeah, keep your eyes out for that. If there's any developers that are looking for a new environment to build in or looking for any kind of support, you can DM me directly or DM the Eclipse team.
01:06:57.350 - 01:07:13.800, Speaker D: I'll just second Tolly's message. These communities, I think, are going to start to get close over time. People are going to realize that Ethereum community is doing amazing work, Celestia community is doing amazing work, solana community is doing amazing work and they are going to start to mix together more over time. So excited to see that.
01:07:14.570 - 01:07:44.240, Speaker A: Yeah. And I think that also, if you zoom out, we're still so early in the adoption of this technology, and it really does not make sense to fight over the tiny pie that is like the current ecosystem and instead focus on the win win, which is like, let's grow this space together and share innovation and adoption and be open and collaborative. So I love that as a message to end. Thank you guys very much.
01:07:45.250 - 01:07:46.640, Speaker D: Thanks for having us.
01:07:47.410 - 01:07:48.160, Speaker C: Thanks.
01:07:49.410 - 01:07:50.010, Speaker B: Thanks, Nick.
