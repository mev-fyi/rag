00:00:01.960 - 00:00:22.182, Speaker A: First we should do quick introductions. I'm Hart Lamber. I am the co founder of UMa. And across and across does use solvers to do cross chain intents to facilitate very fast cross chain bridging. So I might insert a few comments along the way. Dan, why don't we start with you and just say what you're up to and we'll go this way.
00:00:22.246 - 00:00:38.630, Speaker B: Hey, I'm Dan Elitzer. I'm a founder of nascent. We're early stage investors and builders in the space we invested the pre seed and seed stage. We're involved with a number of projects doing stuff in the mev flow and intense space as well.
00:00:39.050 - 00:00:54.630, Speaker C: Hey, I'm Josh Bowen. I'm one of the co founders at Astria. We're building a shared sequencer network and that implies it's like a decentralized sequencer. And we assume because it's a lazy sequencer that we have roll ups doing block building before submitting to the sequencer. And maybe that implies cross roll up block building.
00:00:55.460 - 00:01:05.360, Speaker D: Hey, I'm Marcus founder, propeller heads, and we build solvers for all kinds of intent auctions such as Unix cow swap, one inch fusion and others.
00:01:06.380 - 00:01:15.160, Speaker E: Hey, I'm Dan or Dmars. I'm a credible auctioneer at Flashbots and we're building all the super cool stuff that shay just presented before this.
00:01:15.460 - 00:01:47.900, Speaker A: That was really efficient, guys, so let's keep going. But it was really efficient. All right, what I thought of in my five minutes of prepping for this is let's start with what today? What applications have actually been uniquely enabled by block building, solving and sequencing. And since you guys all haven't really thought about this very long either, I do want to make this be a collaborative brainstorm. But what do you guys think? We have actually built that required this type of thinking?
00:01:49.600 - 00:02:15.832, Speaker C: This is. Maybe this is still like an infra perspective, but I think one of the things interesting about specifically maybe cross chain things is there's always been this idea of an atomic cross chain lock. Whatever. I'm going to use the wrong word, whatever. And the implication was that had a liveness requirement on a third party. We've always known that it's better than bridging in, that it doesn't require a wrapping and trust assumption on the other thing. And I view intent bridges as being a form of solving that.
00:02:15.832 - 00:02:35.410, Speaker C: The thing that happened is just via searching building PBS, we have essentially incentivized the creation of crypto native market makers who are able to satisfy that. So I think that's one of the interesting things that have become enabled via more of an institutional development rather than. But it was forced by the incentives that we constructed through building.
00:02:35.750 - 00:03:13.770, Speaker A: Yeah, I mean, Josh, you're talking my book here, but across, in solving crush and intents, it uses solvers to, in my mind, emulate atomicity. And it's maybe atomicity's the wrong word here, but it's by using a third party who fronts their own capital to fulfill a bridge transaction. It appears to the user like it happened almost synchronously, even though it didn't. And I think that is a application that very fast cross chain bridging is enabled by this solver like thinking, what else do we have today?
00:03:14.550 - 00:04:04.040, Speaker D: Gases transactions. Yeah, so we have through all the order flow auctions or intent auctions, we now have universal gasless execution enabled not by account abstraction, but by solvers basically fronting the capital and acting as paymasters and taking part of the, well, part of the out tokens or in tokens to pay for the gas. I think that's now become ubiquitous and standard without anybody making a big fuss about it, which improved Ux. And we also have batch auctions. We never really had batch auctions in tradfi, and now they are a large chunk of all order flow that's being settled, and they work and they function well.
00:04:04.340 - 00:04:49.400, Speaker B: I think if we look back at what we're all circling on, it's ux. A lot of the hard stuff we're trying to do on a cryptographic level is going to take longer, it's going to be slower. We talked about, the previous speaker was talking about what can be done in teas, what can't. But we get to get to a better UX faster for what I would consider retail transactions of all types. And it's still fine if you compare to tradfi institutions. If you're moving a million dollars or tens or hundreds of millions of dollars, you're fine waiting a little longer and having stronger guarantees and doing things differently. But because you can actually price risk around using some of these solver frameworks, and there's professional market makers effectively taking on ultimate settlement risk in some cases.
00:04:49.400 - 00:04:58.000, Speaker B: Some of the main pain points that we see at the retail user level get solved a lot faster with this type of construct.
00:04:59.300 - 00:05:17.580, Speaker E: I think another example too is customized trading logic. So I don't know which perp Dex this is. If someone knows, let me know. But I've heard there's a sequencer that basically is able to like recognize cancellations, which just allows for more efficient trading on the Dex.
00:05:18.160 - 00:05:53.900, Speaker A: Yeah, I don't know what that is, but it is cool. I'd add a couple others if we just want to talk about what blockbuilding has enabled. PBS and Mevboost made Ethereum usable. We were going to drown in MEv priority gas wars without it. And sequencing made Ethereum scalable by having rollups sequence. So maybe the point here is that a lot of these innovations have been infrastructure improvements that have enabled applications to actually be usable. Like Dan, to your point about good ux.
00:05:53.900 - 00:06:08.390, Speaker A: So maybe that doesn't answer Tina's question about finding applications, but it does push are the current applications would not function without these concepts.
00:06:09.690 - 00:07:16.300, Speaker C: I think we're looking for new application. It's not a new application because I'm a bias. DeFi is the point or finance is the point of the blockchains. But if we look from swaps as an application or a product functionality, we're highly reliant on amms. And my somewhat DeFi naive understanding is that one of the points of that was the ability to provide liquidity without a liveness requirement, which is again a similar thing to the atomic swapping. There's a question in my head, and this is more Schilling Aori's book now, but why are we still using amms if basically every single swap that is going through the chain is having a market maker as a counterparty to the thing? We're trending that way with solver networks, both in cross chain and then in the aggregation solvers and Uniswap X and whatever. Should we be moving towards an order book mechanism on chain versus amms? And is that like a new application? Or is that just again, like we now have more infrastructure that we have incentivized and now we can provide more efficient design spaces that provide better ux to users.
00:07:17.080 - 00:07:24.872, Speaker A: So maybe you're saying solvers will actually delete applications, we'll get rid of Amms and replace them with solver networks.
00:07:25.016 - 00:07:57.924, Speaker C: Yeah, Solver network. Maybe it's like still backed by something as like a settlement on chain, but that settlement on chain is like no longer an AMM because it's assumed to have like a live entity, like interacting with it. It doesn't need this naive passive liquidity. And is that deleting an application from the user's perspective? They're like, I have token a, I want token b, click the button. I don't really give a damn what happens in the middle. Do that as fast and as cheaply as you can for me. But today we have generally poor capital efficiency from how much liquidity you must get in a pool versus how much volume you do over that pool.
00:07:57.924 - 00:08:09.864, Speaker C: So this is again, infrastructure enabling better user experience so that we don't have, oh, I want to go provide low slippage for a user. I have to go get an enormous amount of liquidity to do so.
00:08:10.032 - 00:08:44.924, Speaker D: I think that's an unfair comparison. Like taking V one Amm implementations on arguably we've won chain implementations and comparing them to an off chain centralized order book, and then saying that obviously that's better and we need to move our liquidity there. Because if you do that, we're going to lose decentralization and liquidity. And that arguably is an important part of DeFi. And if we don't have that liveness and decentralization and the liquidity, you are probably risking a lot of the structural stability of Defi.
00:08:45.052 - 00:09:22.426, Speaker C: I just think that there's been a lot of app specific sequencing talks and directions of apps. I think the apps are trying to fragment the liquidity and take the decentralization of the liquidity regardless. Anyways, you see, again, this is not the purpose of the panel, but Cirilla is a very good example of them saying we want the app to have more control over the sequencing rules. And they are doing that in a way to change where the liquidity goes. But that means that liquidity has to be in their pools to run their custom rules over it. I think there's somewhat of. Maybe this is pessimistic, but inevitability of the liquidity being more fragmented, trying to capture more value.
00:09:22.426 - 00:09:37.570, Speaker C: If that is the case, we should certainly do that in a way that provides the highest quality user experience using the infrastructure we have, and not do that in a way that results in fragmented liquidity, but also a poor user experience, which is somewhat historically like what we've seen and maybe what we're seeing across rollups.
00:09:38.110 - 00:10:45.836, Speaker A: So, Josh, maybe like, I could take the annoying, like, Silicon Valley like, bundling, unbundling type framework here, but if we put like a little tiny bit of historical context, we invent amms like a very useful application, and then we invent a bunch of them that are different but the same, and that creates a shitty user experience, because now where do you go? Liquidity is fragmented user doesn't know where to go. Okay, so that happens. But we've invented something very cool along the way. Then the solver network and what one inch Fusion and Uniswap X are trying to do is rebundle all of that by using a solver network to aggregate these different sources of liquidity. And this fits very much in the modular thing here. We now have all these different modules, but we now to make the Ux usable, we need to aggregate them back together. And the software networks seem to be doing that in a sense inventing a new application, which is the better swapping experience then.
00:10:45.836 - 00:11:11.980, Speaker A: Yeah, I don't think it ends there. It's one of those things where we'll invent new Amms and we'll go to the other direction or something like that. But I guess, okay. To push forward because trying to think what applications can be enabled, where do we think this goes besides the AMM example and solver networks unifying AMM experiences, what else do you guys have? We got to brainstorm these questions on the spot here.
00:11:14.520 - 00:11:51.350, Speaker B: Well, we're seeing a number of teams working on things on the security front, ways that you can look at preventing hacks and pausing protocols and doing things like that before you actually have state updates on chain. And so that's an interesting area because I think we can all agree one of the biggest problems Defi has is security. When you start seeing hundreds of millions of dollars, billions of dollars a year being stolen, if we've got a new tool in our toolbox to be able to prevent that from happening, that can be a game changer adoption wise.
00:11:52.970 - 00:13:12.760, Speaker C: Yeah, I am familiar with the general philacs and comparable security things that essentially are doing, again, this is taking advantage of the infrastructure, that there was a past dependency and bootstrapping this ecosystem. But now we have economically incentivized, sophisticated entities who are willing to do pre simulation prior to settlement of transactions. One of the things they can do in that is they can check for various invariants and say, this transaction is going to move this many funds out of this pool. I will set a rule that says you're not allowed to do that. And I think this points to, again, I'm showing your book, but there's an enormous amount of intersections between modern bridging constructions and modern block building, relaying whatever constructions where if you look at bridges who have circuit breakers or whatever you want to call it, where it's saying, oh, I want to, you know, I see one transaction, it wants to withdraw a million dollars out of a bridge. You just say, no, we stopped that transaction. We're essentially seeing that on sequencing or potentially like block building or whatever, where it says, hey, I see some invariant violated that can ideally be defined as some more simplistic kind of predicate that is like less complicated than, you know, because the risk is someone makes maybe a bug in like a solidity contract, but you have a more simplistic form of designing a predicate such that you can say, just if this bounce changes by a value over this number, just like reject that transaction, don't ever settle it, and then propagate a user.
00:13:12.760 - 00:13:48.120, Speaker C: So I think the broad category I see of like block building, or whatever you want to call it, saying we have sophisticated actors that are doing pre settlement execution and simulation. What benefits can we take advantage there by having this kind of robust entity of actors? I think it's worth noting that we have less of these actors than we have people that are actually going to do the post settlement validation. We're always going to have more validators, and we're going to have builders, searchers, market makers, whatever you want to call them. But we should take advantage of the fact that they are present in the transaction flow for 95% of the blocks.
00:13:48.740 - 00:14:23.370, Speaker A: So yeah, Josh, it feels like you could summarize that as saying we're tapping into sophisticated actors in the blockbuilder solver type world that give us a better user experience, that we can use the sophistication of these sophisticated actors to do a bunch of things so the user doesn't have to think about them, which I think that seems like a very useful concept, although it does seem like it's in making better applications, not exactly in creating new applications, but these things now seem very correlated to me.
00:14:24.470 - 00:15:32.216, Speaker D: It also like there's certain applications that were possible before on the margin, but they were extremely hard and clunky and that are now much easier to do. Like expressing complex order types, for example, that were hard to implement, like buying a portfolio of assets and buying a portfolio of assets in flow over time, or liquidating a portfolio of assets, or expressing a pair trading strategy preference amongst a set of assets and weighting assets. All of this was theoretically possible, but you'd have to launch your own pool and then provide incentives to searchers to rebalance your pool, and that's very expensive and hard to maintain. But now with servers, you can basically inject these conditional order types and have them execute that for you. We already see that in a prototype version of searchers, or rather liquid funds, expressing arbitrage on every solver's API. So everyone who publishes a routing API has the same problem. Someone will come and ddos you with orders.
00:15:32.216 - 00:15:54.560, Speaker D: I want 1001 USDC for my 1000 dai, and you get plenty of those. And they actually go through like they find opportunities through the. Through the solvers. So is already being abused for. Not abused, but they being used for finding opportunities with liquid trading. But I think that will progress into like. Yeah, expressing all sorts of portfolio preferences.
00:15:55.220 - 00:16:33.068, Speaker E: To me it seems there's two categories of things you can do here, maybe with specific sequencing rules. The first is cool complex order types. Maybe you're Amm makes sure that every trade goes the opposite way. And there's other fun designs like this, but I think all those end up being pretty financial. There's probably game specific sequencing you could do that is very specific to this, whatever the rules are in the game. I think the second category though would potentially be things you could do between rollups. But I think that opens the boundary a bit because it's not just a single app anymore.
00:16:33.068 - 00:16:41.084, Speaker E: But I don't know, it would be cool if you could make a tweet and then somehow auto register that in a prediction market or something like that.
00:16:41.132 - 00:17:39.094, Speaker C: I don't know, at some point that just looks like web hooks, essentially. I don't want to necessarily encourage. I'm trying to think I want to encourage that pattern. Just having been in a world where the web hooks get slightly out of hand, where you now have to trace one event fires and how many events fire off of that, and what is your traceability of that? But there is these kind of, again, flows where one of the things that is historically been intentionally or not missing from blockchains is sometimes the game people talk about the missing of a crank. In Cosmos, SK, there's a concept of an end blocker, and you can create an end blocker code, but in Ethereum it's often you're not triggering something that happens on some kind of cadence, but with these sophisticated off chain entities, you could say, I'm going to define some kind of signal and I'm going to register that with you in some mechanism, whether that's on chain or off chain. If I do this action, you should take that as a signal to also do this action. And this can kind of chain.
00:17:39.094 - 00:18:14.534, Speaker C: This looks structurally a lot like what we see with like multi hop IBC. Again, there's a lot of analogies between bridging, where essentially I submit one IBC transaction, I have additional forwarding data that encourages a relay to go do another thing. But we can see that within a single state machine, within multiple state machines, whether those are sovereign cosmos chains, whether those are roll ups, and it does kind of broaden a design space where it allows you to do multi block, asynchronous execution where that could be useful from a UX perspective again, and then from a product perspective, I just am not on the app side, but I.
00:18:14.542 - 00:18:48.620, Speaker A: Think there's something here to play with. Dmars, you're right. We're on this panel generally thinking from a financial perspective, and the solver networks let us use sophisticated actors to figure out better. I'll call it financial routing, and I mean that in transaction sense and different constraints and all that stuff, that seems kind of cool. But if we play with this web hooks idea, Defi 1.0, people got all so excited about composability. It's like in a single transaction I could take my flash loan and then swap it here and then deposit in a lending pool and do this kind of stuff too.
00:18:48.620 - 00:19:15.550, Speaker A: If we call them web hooks and we talk about it that way between rollups and we start having applications that are like app chain specific applications or app chains, the idea of us using a solver network to hook between them at a consumer scale kind of use case, that does seem like it's kind of interesting too.
00:19:16.050 - 00:19:29.218, Speaker B: I still think we're talking financial applications though, because there has to be an incentive for the solvers to actually step in and take these actions. So it's hard to think of a pure non financial application being able to make use of this infrastructure.
00:19:29.394 - 00:20:01.210, Speaker A: Maybe. But if we have paymasters and that kind of thing set up too, and the costs here are cheap enough, is there a set of things where if I had like if we take web two applications, if I have like my Twitter and I have my Gmail and I have, I don't know, something else, and it's like an action happens in one and it triggers a few set of things in others. Kind of like a turbo charged. If this, then that type setup, is there cool composability things that emerge there that are a new paradigm that we haven't played with yet.
00:20:02.160 - 00:20:20.740, Speaker B: I think it'd be awesome if there were, but my instinct is probably not. Because if you don't need the trust minimization that you have in these permissionless financial applications, just do that with your own centralized service. It's going to be fine. There's no reason you can just do that on AWS.
00:20:21.920 - 00:21:05.916, Speaker D: It's starting to sound a lot like anoma. Tell us this architecture. One of the things that they published was public signal. It's an article I didn't, I don't think I fully read it. But the idea, as far as I understand it, is you can use these intent networks and to invert the economics of the classical economics of systems that we have. Like you could have credible pre commitments to purchase a product and use these pre commitments to trigger a funding of a product at a certain threshold. So it's like an inverse Kickstarter, where you source the needs of people, then you propose solutions.
00:21:05.916 - 00:22:01.190, Speaker D: If the solutions fulfill the needs, you automatically get funded and you can then do your project. And this could potentially make economics a lot more efficient because people would freely express their set of needs or their set of wants, and could probably do so privately as well, and only if there is sufficient ones for a certain product, then that product automatically gets funded and you receive the benefits. So you could have like a more efficient matching of the worlds that people want to live in. And there's many of these coordination problems today, like they're all over the place, like I want to go and live with friends for two months in a cool place. But the coordination problem is just too hard to do it without someone coordinating it. But the need is definitely there, and it would just happen. If the system existed, it would just happen.
00:22:01.190 - 00:22:04.178, Speaker D: If this makes sense, I wonder, this.
00:22:04.194 - 00:22:36.680, Speaker B: Is just, I'm curious, when I was going to push back on this, having this building and sequencing and intent frameworks, it doesn't necessarily unlock anything completely net new that you couldn't do fully on chain, aside from the efficiency gains that you get in doing so. We reduce what needs to happen on chain largely to the state updates. But anything that example you're talking about, we could do that on chain and fully enumerate it within a contract.
00:22:36.980 - 00:22:59.910, Speaker D: But today would be a hard profession. It would be very hard because there's a big information flow control piece that goes with that. I don't want everyone to see, I don't want default transparency on all of those. I want default control over the information. If we had fully encrypted, if you had a fully encrypted chain, then I would agree. But today I only have one choice, which is full transparency.
00:23:01.890 - 00:23:21.170, Speaker E: Dmars yeah, I would push back a bit on it being not that different than, I guess, just composability between apps on l one, mainly because if you're dealing between different roll ups, then you can have different execution environments, so they can just do wildly different things. You could have one send a tweet out or something, which is just not even feasible on l one.
00:23:21.790 - 00:23:33.822, Speaker A: Okay, so is our conclusion that block builders, solvers and sequencers do not enable any new applications, they just make them more efficient and more usable?
00:23:33.966 - 00:23:49.340, Speaker C: Yeah, but the analogy I'd be is like energy or whatever, right? You get an order of magnitude cheaper energy. There are applications that on the margin were impossible before were aware of them. It's not like a completely novel idea, but now people will actually be able to do it because it is sufficiently easy, cheap, whatever.
00:23:49.460 - 00:24:16.098, Speaker A: Yeah, I like that. And actually I've always thought the idea if you take a product and you make it ten x better, it's actually a completely new product. And I think there's a lot of use cases here where using the solver block builder sequencer sophistication allows us to build web3 applications that are ten x better than what you can do on chain today. And hence that application is actually something totally new and different.
00:24:16.274 - 00:24:53.806, Speaker D: And you gain a completely new user group if you make it ten x easier, if you make it easy enough that it's below a certain threshold, that it's within the reach of the average user, you now have also decentralization and public access. There's a search example I gave earlier is maybe a good simple example. It used to be incredibly hard to atomically search for atomic opportunities. Let's say there's a new amm, a new Unib four hook that launches, and there are now arbitrage opportunities there. No searcher has them integrated yet. But maybe a solver has to find these opportunities. You need to build the entire routing infrastructure.
00:24:53.806 - 00:25:29.630, Speaker D: Okay, it's a huge ask. Maybe there's like 20 teams that do that now today with the solver infrastructure, it's like one API call that you need to make. So maybe with chat GBT that's within reach of almost everybody, but you could even imagine just have a liquidity pool struck in front of that, doing these API calls. And now it's within the reach of everybody because you can just provide to the liquidity pool and all the yield gets commodified and you now have a common good where people can just capture this. And so with ease of use, I think you're bringing things back into the Commons as well.
00:25:30.890 - 00:25:47.030, Speaker A: All right, guys, I think we took our last minute panel, started with no idea how to answer this question, and came to a conclusion that we don't directly invent new applications, we just make things ten x better, which invents new applications. That feels like a good conclusion.
00:25:49.170 - 00:25:57.312, Speaker F: So sad. Disappointed. This is what happens when you have like four infra people here. How are there known your applications on that?
00:25:57.416 - 00:25:59.380, Speaker A: There were. They're ten x better.
00:26:00.480 - 00:26:04.780, Speaker F: That's such a lame conclusion skills issue.
00:26:08.280 - 00:26:13.460, Speaker D: We were not allowed to include Tes if we included Tes in this discussion, we would have plenty of new applications.
00:26:14.680 - 00:26:16.320, Speaker E: Yeah, there's a talk on that later.
