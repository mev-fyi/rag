00:00:02.010 - 00:00:58.830, Speaker A: Okay, so I'm going to try to go through these really quickly because I know we're running a little bit behind. But very simple explanation here is just, this is a very fancy car, right? It's a Lamborghini and this is a Toyota Prius, right? And so despite being so different in some ways, they actually share a lot of similarity. And one of the similarities they share here is this company called Autolive. And Autolive, it manufactures seatbelts. And so whether you're sitting in a Lamborghini or whether you're sitting in a Toyota Prius, you are using an auto live seatbelt. And the reason is because seatbelt manufacturing requires compliance adherence regulations, making sure people are safe when accidents happen. And car companies, right, Lamborghini, they want to build these super luxurious cars.
00:00:58.830 - 00:01:56.290, Speaker A: Toyota wants to build these super economical cars that are efficient, right? And so everyone has what they want to build in mind, their vision for a perfect car. But that perfect car doesn't require them to build the seatbelts from scratch by themselves. And so instead they purchase seatbelts from Autolive. And it's the same in many industries, right? So in technology, you've got software as a service system, integrators that bring together pieces from all over the place, and then even airline seats. So Airbus, for example, they don't build their own airline seats, they just buy manufactured airline seats and stick them into planes. And so that's exactly what we're doing using zero knowledge. And so the problem with zero knowledge is that it's traditionally extremely complicated for a solidity engineer, right? So if you're building a decentralized application, you're focused on building an NFT marketplace, you're focused on building some sort of defi lending protocol.
00:01:56.290 - 00:03:10.710, Speaker A: You don't know cryptography, you may not know rust, you may not understand math behind elliptic curve cryptography and all that other stuff. But that's a problem because ZK right now, and I think in the future of web three, is a critical piece for actually scaling out a huge user base, right? If you've got 5000 daily active users, sure, maybe ZK isn't necessarily important, but when you try to scale that out to 10 million daily active users, like what Duolingo has, then all of a sudden now you've got 10 million people making data points on the blockchain every single day, and every single data point is fully public. And so that becomes a huge issue, right? Because now it becomes a huge surveillance tool. And so ZK inevitably is a critical component for decentralized applications. But the problem is that there's not really any way for solidity engineers to easily build these types of applications. And so that's where we come in. So we offer, in an environment where we actually abstract away all that complexity on the ZK side and offer it as sdks, offer it as interface contracts, so that solidity developers can actually integrate these features into their applications without having to build it from scratch themselves.
00:03:10.710 - 00:04:09.770, Speaker A: So back to the seatbelt analogy. You don't have to worry about the compliance, you don't have to worry about the regulation, you don't have to worry about the safety, you don't have to worry about the materials, right? Like it's all there through our circuits that are abstracted away through the smart contracts. And so why is Manta Pacific that perfect environment to build? It's because we have lowered and optimized transaction fees, transaction costs for ZK related transactions on chain. And so if you've ever used like a ZK tool on Ethereum, it's super expensive, especially compared relatively to other applications on ETH. And so we've taken away some of that cost through using Celestia for the data availability layer. We have modified the op stack through Caldera, and we are introducing our universal circuits through the ZK side. And so we call it ZK as a service.
00:04:09.770 - 00:04:42.134, Speaker A: It essentially allows people to build ZK enabled features directly into their applications only using solidity. And I'll give an example of this just a second. So ZK shuffle is actually one of those example circuits. ZK shuffle allows on chain private shuffling. So what that means is like if you're playing a card game, right, you probably want to shuffle the deck. But if you shuffle the deck without any privacy, then everyone can see the state of the deck. So everyone can see where every card is, and that ruins the whole card game.
00:04:42.134 - 00:05:28.786, Speaker A: And that's why card games on chain don't exist, right? You might have card games off chain that bet with crypto, but you don't have fully on chain card games. But with ZK shuffle, using zero knowledge proofs and homomorphic encryption, you're actually able to achieve that. And yeah, if you don't want to interface with the actual contract itself, we have sdks as well. And so our SDK allows developers to actually build even faster than just interacting with our contracts. ZK holdum is actually live on our testnet right now. And in the past two days of being live, they've run about over 5000 games now around the world from people that are actively playing online on chain poker, fully on chain poker with each other, you can try it out yourself. And.
00:05:28.786 - 00:05:46.490, Speaker A: Yeah, so just to kind of give you an example to quantify this. So if we're building a very simple game, a very simple game where we shuffle the deck, and then we choose a card from the top, and then before we reveal the cards, we place a bet. And we place a bet, we reveal the card, the higher card wins, basically.
00:05:46.560 - 00:05:46.746, Speaker B: Right.
00:05:46.768 - 00:06:10.946, Speaker A: So it's a pretty simple game, but if you were to build this game from scratch on any sort of EVM machine, it would probably take 1000 lines of code. By comparison, if you use the manta interface contracts, through the universal contracts, it's going to take about 150 lines of code. And then if you use the SDK itself, it's only going to take you 30 lines of code to build that same exact game.
00:06:11.048 - 00:06:11.314, Speaker B: Right.
00:06:11.352 - 00:06:36.380, Speaker A: So the amount of time and effort that it takes is significantly reduced, not just on the coding side, but also on the mental readiness side, because you don't have to think about the cryptography. Learn rust, learn circom, et cetera, et cetera. So it takes a lot of time, or it takes a lot less time, and it takes a lot less coding. Friction. Yeah. So we're live and. Yeah, that's that.
00:06:36.380 - 00:06:48.620, Speaker A: Cool. I think I have 2 minutes left. Any questions? All right, yes.
00:06:49.550 - 00:06:55.662, Speaker B: So the use of op stack in conjunction with the universal circuit, how does that architecture work?
00:06:55.796 - 00:07:03.966, Speaker A: Yeah, good question. So there's two phases to this. The first phase is actually we're deploying the universal circuits as contracts themselves.
00:07:04.148 - 00:07:04.542, Speaker B: Right.
00:07:04.596 - 00:07:29.302, Speaker A: And so that's going to enable us to just allow developers to hit the ground running from day one. But what we are doing is we're essentially building them into the pre compiles on the execution layer. And so in the future, the verification happens directly within the execution layer. And so that can help with covering costs even further. So right now it's just smart contracts, and in the future it'll be on the execution layer. Cool.
00:07:29.436 - 00:07:35.970, Speaker B: For the VM you're using, are you using the PSC Zkevm or using your own Zkevm or how you sort of.
00:07:36.060 - 00:07:39.898, Speaker A: Oh, it's not a Zkevm, it's op.
00:07:39.984 - 00:07:40.234, Speaker B: Right.
00:07:40.272 - 00:07:46.220, Speaker A: So we're not using any sort of ZK on the infrastructure level or the scalability side.
00:07:48.670 - 00:07:50.630, Speaker B: The shuffling has been done correctly.
00:07:50.790 - 00:08:08.750, Speaker A: Yes. Some of these circuits we'll be using like some ofhore from PSE, and then some of these we're actually going to be building in house. Okay, cool. Yeah, that's it. Thanks.
