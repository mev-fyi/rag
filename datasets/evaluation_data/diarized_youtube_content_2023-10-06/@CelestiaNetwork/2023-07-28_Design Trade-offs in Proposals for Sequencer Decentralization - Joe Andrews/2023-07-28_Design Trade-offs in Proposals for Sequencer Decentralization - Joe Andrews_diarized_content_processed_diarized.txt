00:00:00.330 - 00:00:21.066, Speaker A: You. Cool. So my name is Joe. I'm one of the co founders of Aztec, and I'm going to run through PBS, Mev and some of the considerations on L Two S. It's not quite as simple as we may think. I'm Joe. So what is Aztec? We're a fully private ZK roll up on Ethereum.
00:00:21.066 - 00:00:50.300, Speaker A: We have private state, and we have fully posable contract calls between contract A and contract B. We also have hybrid execution. So there is mev. We have things like public function calls for AMMS. And as such, we're trying to think through what does decentralization look like. And we have a big focus on launching decentralized. You can follow me on Twitter and follow Aztec for more info on that.
00:00:50.300 - 00:01:51.886, Speaker A: I'm going to try and get through this in 15 minutes, but we're going to go through why we should care about decentralized sequences. Differences of block building on l two versus l one. There are some key distinctions, a walkthrough of two proposals we received in our RFP process for decentralizing the sequencer, and a little kind of some thoughts on Enshrining Mev auctions in L Two protocols. So firstly, why should we care about decentralizing sequences? I think it's fair to say the industry doesn't really care right now. L Two Beat has an amazing dashboard, and I think no one, including Aztec Connect, has made it past stage zero or stage one on the Training Wheels framework. If this was kind of like a report we're doing pretty badly, you get the Meme. I think, like, some of the actual reasons we should care, a lot of roll ups are designed to be first.
00:01:51.886 - 00:02:18.920, Speaker A: So we want to be the first private roll up, the first Cke EVM. And this actually kind of has pretty harmful consequences. I think we should start designing things to be last. They need to stand the test of time. Decentralized systems need to be really robust. We learned this the hard way with Aztec Connect. Trying to decentralize a system with hundreds of thousands of users is way harder than just going to the whiteboard and getting it right first time.
00:02:18.920 - 00:03:16.886, Speaker A: And if you're at the whiteboard, I think we can start to solve some of the issues in the l One block supply chain and try and get to a world where maybe more than five people are producing blocks and the last one won't be a surprise. I think regulation is a key reason to do this. Crypto is global, but regulation definitely isn't. And having a very centralized point of failure is something we need to kind of work around, especially with headlines like this between the differences between the UK and US, for example. All right, so let's look at the differences between blocks on l One and blocks on L Two. I think the first place to start is around the size of transactions. So for kind of non private chains, you just submit a signature over kind of like a request or a transaction request, but for the privacy L Two, you submit a proof of execution.
00:03:16.886 - 00:03:57.554, Speaker A: So a zero knowledge proof of the transaction. This leads to kind of much larger transactions with Aztec. If we use something like Goblin Plonk and very wide circuits, they could be kind of 20 times larger than a normal Ethereum transaction. This isn't a deal breaker, but it just means that the same infrastructure or same things we need on L 1 may need to be adjusted on L Two. The second area is compute. So just a quick look at kind of like the CPU cycles that are needed to actually produce a block on these different kind of domains. First of all, everyone's kind of familiar with searching.
00:03:57.554 - 00:04:39.990, Speaker A: There's a lot of compute that goes into the Napsack problem trying to figure out the correct ordering for a block on L One. And then you've got to execute all the transactions and do kind of the state updates. For L Two, we're meant to be scaling Ethereum, so there's going to be a lot more searching, as we heard previously, cross domain searching, cross domain mev, and much more transactions per second. This leads to more execution, and you can see that already there's centralizing forces on the amount of compute you need to be a Builder, potentially on an L Two. It doesn't really stop there. For ZK l two S. We also have proof construction.
00:04:39.990 - 00:05:32.322, Speaker A: So constructing a proof of correct execution can be a million times slower than actually executing the transaction. So when you're going to put all that together, the summary is kind of block building on L Two s is not really the same as block building on L One. So should we use the same systems to kind of produce our blocks? And I think the main point of this slide is just this is like a huge centralizing force. If you need ten times the compute, 100 times the compute to be a block builder, and you're the fifth best block builder, is it really worth it to turn on your machine? So that's something we need to design around. We don't have all the answers, so we did an RFP to try and crowdsource some of them. We had some fantastic input from teams like Espresso Systems and Flashbots and Astria. So thank you, everyone who participated.
00:05:32.322 - 00:06:21.880, Speaker A: I'm going to run through two of the proposals now. One of them was written by me, and one of them was kind of written internally, but also it learns a lot from some of the Espresso Systems work. They also have drinks names, which I don't know where that came from. If you want to kind of look at the in depth write ups, you can scan these QR codes, just wait for 5 seconds. So the first one for Net, it really isn't that different to Ethereum. It tries to kind of take what works on Ethereum and mold it a little bit for L Two, and it really focuses on fast transaction pre confirmations. To do that, we use an L One smart contract to administer the whole process.
00:06:21.880 - 00:07:30.410, Speaker A: And we have a proposer builder separation. Like we're all familiar with. A proposer, likely with the help of Mev Boost, will submit a block header to the L One contract, and that will include commitment to the ordering of transactions, hiding the actual ordering, but a commitment to that through just a commitment scheme and a VRF output on their staking public key. All proposers have to stake in this model, and the VRF output between proposer A and proposer B will differ on each block. After kind of the proposing phase ends for a given slot or epoch, the proposer broadcasts the block contents to L Two and provers who are listening to kind of the L Two can compare the VRF outputs, look up on the L One contract and see if it's a winning score for the VRF. If it is, and all the data is available, they can start constructing a proof from the contents. So the cool thing here is that anyone can submit that proof back to the L One.
00:07:30.410 - 00:08:22.438, Speaker A: And it doesn't have to be kind of submitted for the chain to move forward at that point in time. It's needed to be submitted for finality. But you can kind of look at the chain and be like, if I've got all the data and this is the winning VRF output, I can move forward. And eventually the block, which has a valid proof and the highest VRF output, will become canonical. This means that we can get soft finality by building or proposing blocks that build off kind of unfinalized blocks if all the data is available. And you can use this with shared sequencer designs and kind of it's quite extensible, much more like Ethereum. Yeah, if no proof submitted, you kind of roll back to the last canonical block in B 52.
00:08:22.438 - 00:09:04.460, Speaker A: This is where things get a bit more controversial. My kind of goal with it was let's try and get rid of the proposer. And to do that, we enshrine an Mev burn auction in the protocol and we instead focus on decentralizing the proven network. So firstly, I guess, why does a proposer exist on L One? Which may lead us to kind of see, could we get rid of the proposal on L Two? And I think it exists because you need to check the work of other proposers. It's the main reason it exists. A proposer on L One could technically lie, and other proposers check that work. That's kind of the power of the Ethereum consensus model.
00:09:04.460 - 00:09:54.726, Speaker A: And it also exists for censorship reasons. The wider the set of proposers, the higher the chances are that eventually someone will come along who's not willing to censor me. So it's pretty good reasons for it to exist on L One. And as such, the block rewards on L One kind of incentivize creating a very large validator set on a ZKL Two. My claim is that these properties don't really hold so we don't need to check the work of other proposers. You can't lie. ZK proofs mean that if the proof system is correct we just submit a proof to L One and we can inherit the checking work of all the proposers on L One and we also don't need the censorship property because we can force transactions in directly from the L One smart contract.
00:09:54.726 - 00:11:17.080, Speaker A: So these two kind of main reasons for having a proposal don't really exist on a ZKL Two so what's the point of enshrining a proposer into the protocol who can really just sell their right to produce blocks to someone else instead we could use a block reward to incentivize approving network or something else in the protocol. So how that works, we split things in B 52 into two distinct phases there's a block proposal phase and a proof acceptance phase a bit like finet, there's no proposer here so the builder is doing everything in this scenario the builder broadcasts a block header to the L Two network. This contains commitment to the transaction ordering like before and a bid in the Mev burn auction. This is the amount they're willing to burn for this block to become canonical. They also commit to payment to the Staking network who's going to help them make a proof later on stakers then vote on the L two for which proposals they will construct proofs for, likely based on how much they get paid. But there could be other factors like censorship or other factors which influence this. And each vote is weighted by a VRF output from the Staker's public key.
00:11:17.080 - 00:12:17.666, Speaker A: The builder then kind of aggregates all these votes on the L Two and they assemble a transcript of the block. This is committed directly to L One and it kind of allocates who's going to do what in the proof construction phase and also lets us define a total score for the block. And the l One roll up contract can rank these proposals by this score. And the two weights are kind of the sum of the prover votes and the amount they're willing to burn. We're still modeling this so it could change significantly again, like with Vinet, because this is on L One. At this point the prover network can just look up on the contract and see which blocks have data available for them. And are they safe to start constructing proofs for anyone then can submit a proof to the L one roll up contract and the same property kind of applies.
00:12:17.666 - 00:13:24.642, Speaker A: The proof with the highest score becomes the head of the chain and you can pay a block reward to the winner plus uncle provers as well to keep liveness. So these proposals differ quite a lot on what happens to mev and we don't know what the right answer is right now, but we can look at kind of other L two S and see what's happening and see how we compare. So on optimism, I think the rough model is a centralized sequencer at the moment extracts mev to fund public goods. That's a great outcome on Arbitrum, I think with the time boost proposals, any mev that comes from that or like fees will go to a dao, potentially Aztec, if we go forward with the finet proposal, will look very much like Ethereum. You'll have a proposer and a builder who can extract mev from the protocol. And this will be facilitated by a market like Flashbots, for example. If we go forward B 52, we've deleted the proposer.
00:13:24.642 - 00:14:12.762, Speaker A: So it's the protocol and the builder that can extract the mev via an in protocol mev auction. So to help us decide on these, we're doing a lot more research, but I've tried to put together some rough economics of what I think the different variables are in this. So if we look at kind of the revenue stack for a proposer today, it's roughly transaction fees, block reward and the bribe they get from the builder to get the block on chain. And the costs are pretty straightforward. There's also, obviously, the builders revenue stack. The ordering preference fee is designed to kind of just encompass all of the different arbitrage opportunities that exist for the different builders. And there's kind of the unknown relay costs.
00:14:12.762 - 00:14:55.946, Speaker A: We don't really know who pays those at the moment, but I guess it's species and some costs associated with searching. If we were to kind of remove the proposal, the builder's revenue stack could look a bit like this. So they would get the full transaction fees, the block reward and the ordering preference fee. And in return, they have to increase their costs by doing some in protocol mev burn. So, yeah, I guess my claim is that these are the same thing. So the bribe that's currently paid to the proposer could be paid to a protocol for a ZKL two. Lots more research needs to be done on this to see if this is a good idea.
00:14:55.946 - 00:15:41.574, Speaker A: There is research on ethereum around maybe doing something like this, but for a ZKL two, I think the requirements are a lot less strict because we can rely on the L One for a lot of these censorship properties. So main takeaways so far of where we've got to in our decentralization of the sequencer journey. The two proposals we're kind of going forward with at the moment are slightly based, so it's not full anarchy. You can't just submit roll ups to L One whenever you want. But they do use an L One contract to decide which blocks canonical. And there's some scoring logic in that contract. For both proposals, they also both used a VRF.
00:15:41.574 - 00:16:19.510, Speaker A: This helps us kind of protect against 51% attacks and someone kind of acquiring too much of the stake or other attack vectors here. Finet. Decentralizes proposers like ethereum and B 52 tries to decentralize the proving network. We need a lot more research on enshrining MEP markets. And that's pretty much all I've got time for. So instead of you guys asking me questions, I'll ask one question to you guys. Should we enshrine mev at the protocol? Well or not? If you have any thoughts, please come and talk to me afterwards.
00:16:19.510 - 00:16:21.460, Speaker A: Or now.
