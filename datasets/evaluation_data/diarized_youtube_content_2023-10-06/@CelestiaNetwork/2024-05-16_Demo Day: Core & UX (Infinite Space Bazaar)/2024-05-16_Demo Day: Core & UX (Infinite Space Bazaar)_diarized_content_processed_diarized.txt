00:00:07.480 - 00:00:25.922, Speaker A: Awesome GM, everyone, and welcome to some of the last streams for the first infinite space bazaar. My name is josh. I am going to be hosting today from celestial Labs, and I'm joined by brian from the Door Hacks team. Thanks brian, for being here.
00:00:26.118 - 00:00:31.170, Speaker B: Yeah, thanks, josh. Yeah, super excited. Everyone did a great job. So excited to see some of these demos.
00:00:31.362 - 00:01:05.484, Speaker A: Yeah, likewise. And just want to thank you guys for helping organize the whole hackathon. Wishing that, or hoping that everyone had a great time doing the hackathon and looking forward to seeing what they built during demo day. So today we'll be doing the core and Ux tracks of the hackathon. Um, tomorrow we'll be doing community and build whatever. And the first up today is going to be the ods visualizer. We're going to be doing core track first.
00:01:05.484 - 00:01:49.104, Speaker A: So I would like to invite up Bowen, who will be presenting the ODS visualizer. I guess a little bit of background. On demo day, we're going to be doing three minute presentations followed by Q and a of like one to two minutes, depending on how many questions there are. So if you do have a question for the presenter, we ask that you please put that in the chat. And after their demo, we'll go ahead and put it up on the screen and ask it out loud. So, yeah, without further ado, I want to give the floor to Bowen. Whenever you're ready, we're going to go ahead and get started.
00:01:51.324 - 00:02:33.804, Speaker B: Sure. Hey, everyone. Yeah, so my project for the hackathon was to create some sort of terminal application so that you can visualize the ods in a fairly visual manner, fairly simple application. I didn't use any of the go libraries and chose to do it in rust because that's what I'm more familiar with. So ended up using like the Lumina client that some of the folks have created. Also used, I guess, trusted points node API. So grateful to them for letting me use that.
00:02:33.804 - 00:03:55.994, Speaker B: Yeah, I guess I'll just keep this presentation fairly short, and it's probably easier to just see what happens. Just the demo. So what it does is like, it subscribes to like new block headers from the node API, and whenever a new node appears, it captures like the ods that's in the blob, and then it visualizes all of the individual shares within it. So if we just go for this one in particular, like, you see that the pink is like all the paper blob transactions, the remaining is like padding, and then the individual sections are like, you see the specific namespaces inside the ods and all of these colors are somewhat unique to the specific namespace id. What I did was just hash the namespace ID and then like use the first three bytes as like the RGB values so that they always remain the same regardless of whenever, when you do it. So like you can see that this blob, there wasn't that much information here. And then in some of the other ones you have like much bigger, much more activity here.
00:03:55.994 - 00:04:40.020, Speaker B: This is like the streaming subscription, so you start at one point in time and it just get listens to new block headers. However, you can also query like a specific block. So I just chose a random one that happened before and hopefully yeah, so this is like the block that pops up. But I only did this in terminal because I have limited front end experience. So hopefully some other people can pick this up and put it in explore somewhere. I feel like that would be much more useful. Yeah, that's it from my side if there's any questions.
00:04:40.020 - 00:04:41.064, Speaker B: Happy to answer.
00:04:46.364 - 00:04:59.954, Speaker A: Awesome. Thank you Bowen. I don't have any questions myself. We do have some praise in the chat. Rutul says ods visualizer is so cool. Thanks for working on this.
00:05:02.654 - 00:05:05.558, Speaker B: So yeah, that's where I got the idea from. Yeah, so thanks.
00:05:05.606 - 00:05:25.214, Speaker A: I could that. Oh nice. Awesome. I didn't know that. That's awesome. So yeah, looking forward to seeing where this project goes, I guess. A good question, kind of on the note of like building a front end, what do you think your next steps are for the project? What do you want to do next?
00:05:27.314 - 00:05:49.374, Speaker B: Not really sure. I just created this mainly as a proof of concept for people to pick up. So someone with better front end experience can of course make this more visually appealing and integrated in various other front end applications. Yeah, happy to help out wherever I can if they're interested, so please feel.
00:05:49.414 - 00:05:58.714, Speaker A: Free to reach out. Awesome. And then one question from the chat from Yaz. What was the most difficult part of building the ODS visualizer?
00:06:01.614 - 00:06:46.784, Speaker B: Honestly, I feel like the documentation was fairly straightforward, so I read the Celestia specs a lot and this was like a good introduction to how Celestia worked. I didn't like the fact that the nodes had to be like access gated by like an authentication. Yeah, that just made it harder on my site to actually test. So I was lucky to find someone who was willing to share their node with me. And then I guess on the client side, I'm really happy that someone's working on like a rest client for this. There were some bugs that I made prs four in there, so that was another good sort of learning experience as well.
00:06:47.644 - 00:07:31.874, Speaker A: Awesome. I'm glad to hear the specs were helpful. Yeah, thank you again, Bowen. And we look forward to seeing the ODS visualizer in its future forums. I guess I did want to throw out there that distractedmind just commented in there. This is unrelated to the comment, but this reminds me of a tui that distracted mine built for running a light node, so it would kind of show you your sampling stats in a visual form instead of just as JSON. So yeah, really looking forward to seeing where this goes.
00:07:31.874 - 00:07:53.374, Speaker A: Next up we have pessimistic validation and Ghermund is going to present for us today on pessimistic validation. Yeah, yeah, I guess it would make sense to do little intros. Yeah. Great to have you here. I'll go ahead and give you the floor.
00:07:55.114 - 00:08:25.924, Speaker B: Thank you. Yeah, so my project was. So my name is Yerman Garaba. I'm a, I don't know, Cosmos engineer, I guess. And yeah, the project is called pessimistic validation to enable safe IBC for optimistic roll ups. In particular. I've been working on Rolekit for this, but yeah, the main goal I had was to sort of find a good solution for IBC from optimistic roll ups to deal with the dispute, period, which is just terrible ux.
00:08:25.924 - 00:09:46.994, Speaker B: And while it's technically possible to ignore it, then you would have one node that would validate it, which is not very safe. The solution that I came up with was to have a receiver chain that does partial validation, like a proof of stake chain that does partial validation. And then basically all you need is one honest full node for it to be safe, and it solves a bunch of different issues. The way I've done this is to create a Cosmos SDK module that has these validation objectives that validators can sign up for, and then they basically just need to run full nodes on the roll up and sign off on the different heights. You combine that with a regular lite client that's like a tenement light client, and ideally also obviously a data data availability. Then you can have a pretty good security assumption around the different heights for the IBC packets and you can actually accept them without having to deal with deal with the dispute. Period.
00:09:46.994 - 00:10:46.144, Speaker B: That's the goal anyway. So this is done with IBC lite clients and comment BFT board extensions to sort of update the pessimistic live client, as I call it. So that sort of happens automatically. And then you can do the IBC connections directly to that light client, and it will only be able to use packets that have been validated by, you know, a part of your validator set. So, yeah, there's a bunch of different ways you can set this up with. You can have bounties on the validation objectives so that you actually get paid to run the full nodes and some sticks in form of. You can have native slashing easily built into this so that if there are actually are fraud proofs that come in, then you sort of have someone who has not really done the validation.
00:10:46.144 - 00:11:28.700, Speaker B: Yeah, there's a bunch of ways to make this a lot better, as I've learned throughout doing this. But, yeah, you can do a lot with middleware, and you can sort of build this out to a lot more than what it is now. But, yeah, I guess that's time, right? I cannot hear you, Josh.
00:11:28.852 - 00:11:40.564, Speaker A: Yeah, I'm definitely muted. Yeah. A good first question from me would be what your plans are for the project. Kind of like, what the next things that you're working on are.
00:11:41.984 - 00:12:13.596, Speaker B: So I'm trying to figure out where this would make the most sense. I feel like having, like, a liquidity hub that can. Can sort of run and validate a bunch of roll ups could be very, very useful for both sizes. Like, it feels like a very easy win win kind of situation. So I'm just. I'm trying to just talk around. So I'll be doing that in Berlin at the end of the week and next week as well.
00:12:13.596 - 00:12:16.384, Speaker B: We'll try to figure out where this might fit in.
00:12:17.324 - 00:12:24.704, Speaker A: Sounds like a good week to show it off in Berlin. Speaking of, Bidon asks when public testnet.
00:12:26.164 - 00:12:31.280, Speaker B: Yeah, good question. I don't think.
00:12:31.392 - 00:12:32.484, Speaker A: No, it's okay.
00:12:34.104 - 00:12:34.884, Speaker B: Cool.
00:12:35.744 - 00:12:45.644, Speaker A: I don't think there are any other questions in here. I'll kind of go back to the one that Yaz asked. What was the most difficult part of building this?
00:12:46.704 - 00:13:09.334, Speaker B: I think there was some lack of documentation around, especially vault extensions, where I have to infer a lot from a few examples. So, yeah, mostly around, like, hacking around these things that I just haven't done before, like, vote extensions and lite clients. That's just a little tricky if you don't know them.
00:13:10.074 - 00:13:24.334, Speaker A: Awesome. Well, not awesome, but, yeah. Thank you. We're gonna have to get to the next presentation. Thank you, garment. Again, thank you. And, yeah, we look forward to seeing what you build with the project.
00:13:24.334 - 00:13:33.374, Speaker A: Next up, we have Bub's Oracle with Leo.
00:13:34.314 - 00:13:36.854, Speaker C: Hey. Hi. Can you hear me?
00:13:37.474 - 00:13:45.254, Speaker A: Yep, we can hear you. When you're ready. If you want to throw your presentation up or share your screen.
00:13:48.494 - 00:13:50.034, Speaker C: I'm sharing screen.
00:13:59.014 - 00:13:59.994, Speaker A: There we go.
00:14:03.174 - 00:14:12.074, Speaker C: So hey guys, this is Leo here with Bugs Pro. So basically the part of the blockchain is all contracts, right.
00:14:18.104 - 00:14:18.984, Speaker D: But the main.
00:14:19.024 - 00:14:50.994, Speaker C: Part of the data like offshore. So how do this offshore decentralized. So it comes up. So what we have built is we built Oracle contact which fulfills our API request or request video from our smart contract. And our server listens to this and makes an external API calls and give it back to the contract and make it decentralized. So here goes the flow. So you could see.
00:14:53.894 - 00:15:34.114, Speaker A: No, I was about to jump in and ask him to cut his video off to maybe help the bandwidth, but yeah, we'll go ahead and hold the timer for Leo. I feel like in the name of time we might actually have to just jump to the next presentation and then come back to that one. Yeah, cool. Okay, so sorry about that, Leo. When you're watching recording, we'll get back to you. But next up we're going to have Ashish with CNTSC. Yeah.
00:15:34.114 - 00:15:39.154, Speaker A: If you are ready, can I have you go ahead and start a little early?
00:15:40.854 - 00:16:28.380, Speaker D: Hi everyone, myself ashish. I am in the last year of my hearing currently, so my project basically is a CNTC. So you can check out the my, check out my project by going to the, by scanning this QR code. So I'm a front end developer currently mainly working with typescript. So I wanted to develop something with an SDK which can interact with celestia node in typescript. So currently it supports all the endpoints provided by the Celestia. So how can you use this? First you need to use initiate your own node, celestia node.
00:16:28.380 - 00:17:10.344, Speaker D: Josh has a nice video about how to run your node. You can check that out. There is no limitation, there is no condition on which type of node you need. You can use anyone, you only need the authentication token from that and then you can use this command to integrate the project, integrate this library into your project. To start with you'll need node URL and your auth token and you need to initiate your own client with this. I use light node for this. You can use anyone.
00:17:10.344 - 00:18:09.016, Speaker D: Just make sure you provide all the correct parameters when get using any method. So get all method usually requires just height and namespace Id. So there is one example about that and some of the next steps for this project is currently in some of the methods I use just any type, it will be changed to the proper types which are needed. And all the tests I did was manually. I want to write some tests for that and add more examples to help the developers. There are some methods remaining in prod and header so I will add that. And some of the community members have already suggested some improvements.
00:18:09.016 - 00:18:24.044, Speaker D: I will work on that. And one of my own goal was to publish a library on NPM. So I'll start with this. I'll start by publishing this one. So thank you. If you have any questions.
00:18:30.064 - 00:18:56.258, Speaker A: Thank you, shish. First, I guess as someone who's more of a front end developer, I'm excited to see this type of tooling being worked on. I think a lot of other people would probably like second that there is a question in the chat and Baidon is asking Ashish what was the hardest part of building CNTSC?
00:18:56.306 - 00:19:17.154, Speaker D: Ashi so how everyone can use this documentation was namely the not documentation, but how everyone can integrate this into their project. Thinking about all the cases? Yeah. So that was the most, that took the most thinking actually.
00:19:17.854 - 00:19:21.474, Speaker A: Yeah. And what plans do you have for the project?
00:19:22.534 - 00:19:42.364, Speaker D: Yeah, so mainly improve the improve library according to community suggestions and add some methods to the fraud and header endpoint. That's the first thing. And after that I'll publish on NPM, hopefully.
00:19:44.664 - 00:20:00.484, Speaker A: Awesome. The next question cracked me up when celestial light dart client issues. So I guess this dart is that flutter, the like multi platform language. That would be pretty cool.
00:20:01.464 - 00:20:05.364, Speaker D: Yeah, I'll try to work on that. I don't know exactly what that is, so.
00:20:06.384 - 00:20:12.564, Speaker A: And then the last question from the chat from Yaz, are you open to continue maintaining it?
00:20:16.264 - 00:20:24.564, Speaker D: If you have any suggestions, you can raise the issues, I'll try to work on that. If I'm not able to, I'll ask you guys to contribute.
00:20:28.624 - 00:20:42.864, Speaker A: Yeah, I think this is one that we'll definitely keep working on. Ashish, thank you so much. We're going to get back to Leo and Bob's Oracle now and hey man.
00:20:42.904 - 00:20:44.404, Speaker C: I'm sorry for the inconvenience.
00:20:44.984 - 00:20:57.894, Speaker A: Oh no, it's all good. We're just glad to have you back and I think you do need to share your screen again and then we'll roll with hoping the video saves a little bit of bandwidth.
00:20:58.674 - 00:20:59.454, Speaker B: Awesome.
00:21:02.234 - 00:21:25.706, Speaker C: Yeah. Okay. Hey guys, it's Leo here with bub sorkle. So the basic idea of the blockchain technology are revolves around decentralization and it mainly focuses on smart contracts. So these smart contracts can interact with on chain data and provide the data to your DAP. So. But the major part of the data still remains in the off chain.
00:21:25.706 - 00:22:02.866, Speaker C: So how do you make this off chain data more decentralized how do we access this off chain data? Decentralized. So here comes the play of oracle system. So what we have built here is in, we have built an oracle on Bubs testnet. So basically an oracle contract has been built and this oracle contract helps us to call external off chain data APIs and get this API data and make it decentralized. So here is the flow. So the DAP we have will have a call for the endpoint, endpoint. So this user contract is our contract in which we have been initializing the Oracle contract to make external API calls.
00:22:02.866 - 00:22:42.850, Speaker C: So the user contract will request to the oracle contract to make an external API request. And this oracle contract will emit an event with a request. And our server catches this event and makes an external API call and give it back to the Oracle contract. And this contract will all the data now and this data will be passed down to user contract. And the DAP can you, that app is able to use this data right now in the app. So basically we will just into a demo right now. So yeah, here's the interface we have built for Bubs Oracle.
00:22:42.850 - 00:23:05.604, Speaker C: So yeah, you'll see, right, the Oracle address, this address could be used in any of your smart contract deployed in Bubs testnet. And this contract, this, this could make your external API data available and you could easily call the external API, this Oracle address. So right now I'm giving an external API with just the placeholder API and I will get a title from it.
00:23:11.744 - 00:23:12.644, Speaker B: Okay.
00:23:15.224 - 00:23:49.988, Speaker C: Let me sign the transaction. Yeah, meanwhile I get to this thing and I will make this request again. So yeah, you could see the title of the thing over here, right? So the same thing. A minute please. Yeah, yeah, you could see that uh, the fulfilling value with request id with the value of the same thing has been written over here. So basically this is a state issue. I guess maybe another time will work.
00:23:49.988 - 00:24:32.830, Speaker C: I guess basically here's the server, it's running over here and yeah, here you could see that server is running over there and this will get this API call and this will be fulfilled by a thing. So yeah, id was 60. Which value, value has been given over here? This is the title value we were expecting over there. So this value has been given to the DAP and yeah, here we go. We could see the value of title over here. So this is how the bits oracle works. So you could easily integrate this oracle into your smart contracts.
00:24:32.830 - 00:24:41.918, Speaker C: You could just, for right now we could just make a get API call. But in future we are hoping to develop it more forward. So this oracle address.
00:24:41.966 - 00:24:42.670, Speaker B: Thanks Leo.
00:24:42.782 - 00:24:43.470, Speaker A: Thanks Leo.
00:24:43.542 - 00:24:48.202, Speaker B: You're the three minutes is up so just want to keep it, keep it moving but appreciate it.
00:24:48.398 - 00:24:51.494, Speaker C: Yeah, I'm open for questions right now.
00:24:54.154 - 00:25:00.934, Speaker A: I don't see any questions in the chat. We'll stick with my go to of what are your plans for the project.
00:25:02.074 - 00:25:28.334, Speaker C: So yeah, as I told like we have been, we have just build this for get get requests, get API questions at the same time we could, we couldn't able to handle object responses like instead of getting adjacent format, if the format is of object type and we need to figure it out, figure out a way to just handle this object requesters so that this oracle is more more of more of dynamic to the gate API requesters.
00:25:29.474 - 00:25:59.394, Speaker A: Awesome, thank you and looking forward to seeing it. Next up we are going to start the UX track and the first project from the UX tract is going to be blob tools. So we have Joshua to present on blob tools. Welcome again, Joshua. Oh, your audio is off.
00:26:02.414 - 00:26:03.838, Speaker E: Okay, can you hear me?
00:26:04.006 - 00:26:05.794, Speaker A: Yep, good to go.
00:26:05.954 - 00:26:46.212, Speaker E: Let me just refresh and then. Hi, welcome, my name is Joshua, I work with my teammate Joel. And yeah, we work on blob tools. So it's a suite of tools. But initially it's mostly a blob migrator for EIP 4844 and the goal is to enable better celestial developer experience migrating blobs from other ecosystems. Now the root issues I think firstly, data availability is an industry that, you know, it's less than a year or celestial live production live less than a year. Many of these ideas about data availability are coming up.
00:26:46.212 - 00:27:37.744, Speaker E: A couple of chains coming up. The issue from the perspective of developers is there's too much choice. There's 4844 proto Dank sharding, there's Polygon avail, there's Eigen Da, there's Polkadot blockchains, there's many, many more. So there's too much choice available. Often developers end up defaulting to past norms, things that they know rather than things that make sense. Secondly, the developer experience being very new, there is a lack of UI tools to actually start tests, to put relevant blocks over multiple networks and see how they work over common solutions and roll up chains like in this case Zksync's hyper chain, or they call them ZK chains, or optimism roll ups or abyssin robs. And of course as a result of these two problems, there's high perceived switch costs.
00:27:37.744 - 00:28:08.654, Speaker E: People either think it's too expensive or it takes too much time to experiment. But honestly I think that Celestia's data sampling approach with light nodes like it scales to the light nodes. It's a cost leader opportunity. You can be the cheapest. In fact, we did a brief test about this, just comparing standard one to eight kilobyte blobs on your 4844 to Celestia. We've had at least 40 to 50 x cost savings. Sometimes a blob costs $15 compared to $0.25.
00:28:08.654 - 00:28:36.368, Speaker E: So yeah, blob tools is sort of a frictionless UI UX application. Basically. In this case we look at Zksync error, there's sort of a ZK roll up EIP 4844 blobs. We take that, we extract it directly from its ethereum code storage area and pull it into celestia. Yeah. How it works. We have basically a front end and an application server on the back end.
00:28:36.368 - 00:29:08.744, Speaker E: We connect with ethics scan and blobscan APIs, as well as celestial light nodes. Yeah, yeah. Many future improvements. Honestly, it's not at this stage, there's no span prevention, you can just migrate any blobs from Ethereum. Of course a pool of sustainability is required, and definitely we'll be able to improve the celestial JavaScript, JavaScript library and so forth. Okay, so I want to jumping straight into the demo. So all you need to do is just go to blob tools.
00:29:08.744 - 00:29:51.888, Speaker E: And yeah, as you can see here, right in this diagram, you would see which batch number and which blob it comes from. So if you look at something like zksync, ZK sync has these ideas of batches. So each one of these batch creates a commitment and a blob. And if you go to the relevant blob, so in this case blob 4700, 470,000. If we do a refresh of that, you would see that. Yes, I'm extracting out this blob, and if you click here to upload the blob, it goes directly from ethereum side to celestial and you can compare the cost differences. So here it's only $0.25
00:29:51.888 - 00:29:56.960, Speaker E: versus $16. That's amazing. That's more than 60 x cost.
00:29:57.152 - 00:30:03.136, Speaker B: Hey Josh, I'm going to jump in and cut you off, but really good demo, thanks for sharing.
00:30:03.320 - 00:30:06.204, Speaker E: Yep, sure. Any questions?
00:30:09.664 - 00:30:17.324, Speaker A: I don't have any in the chat, I'll just stick with the standard. What are your plans for the project? It looks like it's pretty far built out.
00:30:17.804 - 00:30:49.932, Speaker E: Yeah, I am, definitely. It's a project that needs a few things. Definitely. We're thinking of standard JavaScript libraries. Currently. We use the node itself to call the RPCs, but standard JavaScript libraries will mean that people could bring their own guests. Other areas of opportunities would include leveraging roll up as a service providers, such that they can be the main distribution point for celestial data availability.
00:30:49.932 - 00:31:09.140, Speaker E: So think of it this way. Like Caldera, some of these roll up as a service providers, they offer the service of, let's say an optimistic roll up, but they give you the choice for Celestia. And the question is why? Well, a service like this offers the migration path and as well as the estimated cost savings.
00:31:09.292 - 00:31:09.668, Speaker B: Yeah.
00:31:09.716 - 00:31:14.884, Speaker E: So definitely it's something that I think will benefit the community, would need community fundraising for.
00:31:15.344 - 00:31:16.244, Speaker B: Got it.
00:31:16.704 - 00:31:26.928, Speaker A: And just two questions from the chat real quick. Hey Joshua, does a cost comparison with Ethereum include 4844? I think it did, yes.
00:31:27.056 - 00:31:36.864, Speaker E: Specifically, we're looking at the blobs. So to be very clear, we did not use the core data because call data depends on the execution path.
00:31:36.904 - 00:31:37.104, Speaker B: Right?
00:31:37.144 - 00:32:04.590, Speaker E: So it's specifically the blobs. And just on the blobs alone, you know, ceteris purpose one is to one it's at least 40 x savings. And that's because, and now, you know, if you go into a bull market, the architecture design EIP 4844 is, you know, a group of nodes, sort of, you know, finite number of nodes, doesn't grow to the capacity, doesn't grow to the bull market.
00:32:04.662 - 00:32:04.894, Speaker A: Right.
00:32:04.934 - 00:32:27.954, Speaker E: So I think something like a celestial design could potentially be a cost leader. The analogy, I would just leave you a last comment. The analogy I'll give you is if you look at cloud computing, if you look at AWS versus GCP or any of these things, at the end of day, people are looking at what is the most cost effective solution that is also decentralized. So I think that's where the industry is going.
00:32:28.814 - 00:32:47.694, Speaker A: Awesome. Thank you again, Joshua. Next up we have private Venmode and Kamal will be presenting for that project. Welcome, Kamal. If you want to go ahead and share your screen, we can go ahead and get started.
00:32:50.234 - 00:32:53.614, Speaker F: Hope my audible is clear. I hope my audio is clear.
00:32:54.154 - 00:32:55.454, Speaker A: Yep, it's clear.
00:32:57.844 - 00:33:29.006, Speaker F: I'd be starting now. So hello everyone, my name is Kamal and I'm a blockchain developer. And welcome to Private Venmo, a fast, safe on chain social payments, gifting and donations on layer three roll up. So private Winmode is deployed on the l three roll up using conduit and rolekit. That settles on mode and uses celestia as the data availability layer. So this ensures efficient, secure and scalable transactions. So coming up with the problem statements.
00:33:29.006 - 00:34:03.742, Speaker F: So by default, as we all know that the default transactions on the layer three roll ups are public. And this has potentially compromising the user privacy and confidentiality. And there's a lack of privacy. So if I send someone on the blockchain, some transaction, if I send a message, it is by default public. And then the third one is lack of user friendly, friendly Dapp experience. So the DAP lack a user friendly interface, hindering adoption among the everyday users. So I built private Venmo.
00:34:03.742 - 00:34:34.580, Speaker F: So it's a platform where you could gift tokens along with a message in the unwrap it in the form of gift and send it to someone. So we have like special features like these are the key features where we have time logged gifts. So you can schedule your gifts to be unlocked at particular future date. This is all based on the contract functions. So it's all very transparent. And then we have gift claim codes. So you could just send a gift anonymously or surprise someone with a claim code.
00:34:34.580 - 00:35:11.016, Speaker F: You just have to give them a claim code and ask them to visit our site and claim the gifts. So, and we have recurring gifts. So say you are an employer and you want to send regular payments to your employees, you could set up recurring gifts for them. Or this is sort of payments. And it's decentralized and secure as it is, as it is built on the layer three chain. And we have the most important encrypted messaging. So the message that goes along with this, along with your tokens in the form of the wrapped gift, so you could just encrypt that message so that other people cannot, you cannot read it.
00:35:11.016 - 00:35:54.392, Speaker F: And that is part by hyperlinkotosis. And in course. So how does it work in the backend? It sounds like how can we implement privacy on roll ups? So we are utilizing fully homomorphic encryption, which is a form of encryption algorithm based on mathematical concepts. And we are so with it, we are implementing privacy. So this is fhe. So fhe, with fhe, what we can do is we can implement the encryption and this is the encrypted form of the data that we give. And then we can get the ciphertext and whatever operations that we perform on the cipher text, like decrypting and passing a hash of it, we can transform.
00:35:54.392 - 00:36:21.632, Speaker F: And when we decrypt, finally we get the same value. So how are we utilizing it? This is an overview of the architecture diagram. So on the front end we are bridging. So initially we thought of bridging the ciphertext from the front, from our roll up to the. This is the inco chain. Enco provides us with the confidentiality as a service. So initially we decided to bridge the ciphertext, but it was taking one third of the ethereum block space.
00:36:21.632 - 00:37:06.094, Speaker F: So we decided to innovate this problem. And what we came up with was hashing. So we generate this cipher, this encrypted text, we generate a cipher, we hash the encrypted text and then what we are doing is we are sending it on our roll up. So on our roll up, with the help of hyperlink and kurtosis, we send it to the encoding. So what happens on the enco chain? Encode has like a receiver smart contract that we wrote which has a handle function and it calls and it emits an event whenever the cipher text reaches the receiving chain, which is the encore here. And then we have this off chain oracle, which listens to that on chain event. And whenever that is called, it sends like it calls this oracle part and there the text is decrypted.
00:37:06.094 - 00:37:07.954, Speaker F: So it's a mall.
00:37:07.994 - 00:37:17.694, Speaker B: I'm going to jump, I'm going to jump in, just so we stay fair to all the other demoers. But yeah, I think we can move to questions now.
00:37:18.274 - 00:37:23.334, Speaker F: Yes, no problem. I pretty much explained the architecture background, by the way.
00:37:24.034 - 00:37:34.134, Speaker A: Thank you, Kamal. One question here is could you explain how you address security and data protection in your project?
00:37:34.954 - 00:38:24.244, Speaker F: Yeah, so, so as I showed you in the architecture part, every the data is encrypted using the full fully homomorphic encryption. And so Xama AI is the blockchain which is implementing, but I tried to find some way with which I could perform those privacy thing from my roll up and use the confidentiality as a service from inco. And that way the data is always encrypted and it can only be decrypted. So say I send to Josh, I send a gift along with the token and encrypted message, like saying, hey, congratulations, Josh, this is a small gift from me. So that same message would be encrypted and only Josh can decrypt it using his public key by signing it up. So no transaction involved. But you have to sign it so that it knows that Josh has the same address which I sent.
00:38:25.304 - 00:38:29.124, Speaker A: Cool. And then which house are you presenting or representing?
00:38:30.324 - 00:38:32.204, Speaker F: It's called mind flux.
00:38:32.324 - 00:38:33.060, Speaker B: Something nice.
00:38:33.132 - 00:38:46.424, Speaker A: Same. Cool. Thank you again, Kamal. We're going to go to the next presenter, which is opkit domains. We have chum presenting.
00:38:52.404 - 00:38:54.104, Speaker C: I think I have chat skin.
00:39:02.184 - 00:39:05.320, Speaker A: Yep, I can hear you. We see the streamyard though.
00:39:05.432 - 00:39:12.040, Speaker D: Can you hear me? Yes, hello, can you hear me?
00:39:12.112 - 00:39:12.764, Speaker B: Yeah.
00:39:14.304 - 00:39:15.124, Speaker A: Yep.
00:39:18.744 - 00:40:09.654, Speaker D: Okay, cool. Okay. Hi guys. Today we gonna present about optkit domains. The journey begins with the user minting a domain on the Opkit opstack chain. The data is then indexed by the indexer and then posted to celestial DA which serves that's a central data hub. Another indexer subsequently indexes the data from celestial data availability and connects natively to the server load up such as locate.
00:40:09.654 - 00:41:11.954, Speaker D: With the locate we can access any records natively in a trustless way. This is not possible with a smart contract because the liar needs to submit data one by one and consensus is also required. Next, let's see our live demo. Okay, so let's start by connecting our wallet and switching to the Opkit obstruction which we have deployed using conduit. It doesn't rely on any third party interoperable infrastructure, not even layer zero. We will show how Opkit domains can provide interoperability without this dependencies. Next, let's look at our identity system.
00:41:11.954 - 00:42:06.844, Speaker D: It supports connecting Opkit domains to social media accounts, which improves on chain user verification. You can link your domain to Twitter or X Discord and GitHub which will enhance your on chain identity. Another key feature is our connection to the Opkit wallet. This allows users to connect their domain and interact with the others blockchains in a user friendly way. For example, you can seamlessly integrate with platform like Celestia and Object locate. Now let's mint the domain. Once you mint the domain, you can immediately use the Rokit chain.
00:42:06.844 - 00:43:07.130, Speaker D: There's no need for the bridge because our chain connects directly to the indexer, making the process faster and more efficient. For example, on the Rokit chain we can perform several actions like list all domains associated with an object address, list all domains, link to an EVM address, and list all domains based on the key and value of string records such as Twitter and GitHub. You can see on the output that we have domain name that we just mint. Return on the response of each clearly, which means that lowkey chain has access to real time domain records on the opstack chain. Moreover, user can thanks John.
00:43:07.322 - 00:43:14.094, Speaker B: Thanks John. I just want to be mindful of everyone else's time, but thank you for the demo and I guess we'll go to questions.
00:43:14.634 - 00:43:15.934, Speaker D: Yep, thank you.
00:43:16.994 - 00:44:05.264, Speaker A: Thank you. The question from the chat is this a rentable contract for domains or does it stay forever per account? I think it's forever per account. Awesome. Thank you. We're going to go with the next project now. Are you here yeah. Okay, so we have chat space with Arthur and Yuki.
00:44:05.264 - 00:44:10.224, Speaker A: If you want to share your screen we can go ahead and start.
00:44:13.354 - 00:44:16.014, Speaker C: Hey, can you hear us? Hey all.
00:44:19.114 - 00:44:20.414, Speaker A: Yep, good to go.
00:44:20.754 - 00:44:50.044, Speaker C: Okay, so welcome. Chatspace is a gamified social network in web3 and this is our team. I'm Arthur and he's Daniel. We are engineering students from Brazil and we constantly find that social networks still fail to meet certain needs of the users. First of all, social networks are to streamline connections and enhance global experience. Currently, most engagement is built around user interactions. However, it still lacks personal motivation like a gamified experience.
00:44:50.044 - 00:45:24.164, Speaker C: Another feature that they miss is blockchain. Harnessing this technology diminishes friction in global marketplaces and unveil novel paths in content creation. Like for example, NFTs creators economy is still fragile in this environment. Also, ownership and creation rights are not guaranteed. Additionally, there are no promotional mechanisms other than advertisements. Chatspace is here to solve all those problems. Chatspace is a social network in web3, but exactly it's a social experience.
00:45:24.164 - 00:46:33.252, Speaker C: So who is Chatspace for? Chatspace is for web two users because it has instructive onboarding quests that brings naturally web3 concepts in web two like interface. For example, our gotcha and it's for web3 users because we bring a frictionless marketplace with unique NFT marketplace experience and it's for everyone because we provide a complete mobile and desktop experience as a PWA with easy register experience and account creation. So chat space user engagement mechanism is divided into pillars quests that can be promoted by us, the shop and promoted by users. This too separately has their own features and it's shown here in the right side of my screen how quest looks like. The second pillar is the achievements. Achievements can track users progress and can bring users to enjoy one time events. They have value because they gamify user experience.
00:46:33.252 - 00:47:39.434, Speaker C: They unlock unique cosmetics for our users and they reward users loyalty. So users engaged users thrive the market for creators and why a creator would use our platform. A creator would enjoy true verifiable ownership and fair creation rights from the NFTs that we deploy and we would facilitate market adoption and a native marketplace with complete token system and enhance the creative visibility by our gotcha. So where Gacha come in in this game, our gotcha is compatible with creators collections and our Gotcha takes NFT experience to the next level. By latching users mean to random NFT and without really need to expand real money. So it's attractive to newcomers like webtoo users and we consider this mechanism great because it nurture a creative medium where users are encouraged to become creators. And welcome web two users to NFT's fantastic world, streamlining their experience.
00:47:39.434 - 00:48:17.274, Speaker C: So thank you a lot for your attention. We need to thank our partner, our modular cloud, especially our zRs, for his help, gelato for providing us a roll up, Celestia for their brilliant da layer solution. And finally, our team, just because of that, we could make this project work. Thank you. Any questions? Okay.
00:48:19.094 - 00:48:21.794, Speaker A: What are your next plans for the project?
00:48:23.174 - 00:48:43.984, Speaker C: Okay, our next plan is to implement some features that we already didn't. Yeah, we have. We haven't actually, actually worked on them because we. We are full time students and we. We couldn't dedicate 100% of ourselves. But right now, we need to. We need to build some of those features.
00:48:43.984 - 00:48:45.164, Speaker C: Yeah, exactly.
00:48:45.944 - 00:48:51.844, Speaker A: Awesome. I look forward to seeing them. And then what houses are you representing?
00:48:52.504 - 00:49:01.484, Speaker C: We are lumentry. Basically, our project feeds a lot of lumentry, but actually, in the test, I'm mindflex. We have both mind flux.
00:49:02.084 - 00:49:22.704, Speaker A: Nice. I see Karen. Awesome. Cool. Thank you again for your presentation and looking forward to seeing what else you do with chat space. Next up, we have Lustian and we have Leon here to present.
00:49:23.284 - 00:49:23.660, Speaker D: Cool.
00:49:23.692 - 00:49:53.722, Speaker B: Thanks, guys. All right, give me a second. Okay, so everyone's been creating these crazy projects. I'm kind of going the opposite way of creating a dapp for grandmas. Something super simple where anyone can use it with or without code. So the project is called Lestrian, which is a one click light node. And the problem is, right now, it's quite technical.
00:49:53.722 - 00:50:24.118, Speaker B: To run a light node, or any node for that matter, you need Cli bashes. You need to type in stuff on the keyboard, and there are no rewards. So this is what I see when, if I were to show this to my grandma, this is what I imagined her just freaking out, not knowing what to do. And the solution should be pretty straightforward, is to create a one click light node, and it'll earn rewards running in the background. So this is what I imagine when grandma clicks this and getting it working right. Magnificent. Cool.
00:50:24.118 - 00:50:43.926, Speaker B: So that's the demo. Let's look at the website. So in order to test it out, go to lustre. You can see, you can download it for Mac. Right now it's only for Mac, but it should be for other platforms. If you scroll down, you can talk about more detail on how it all works. We have some words that Nick here made up.
00:50:43.926 - 00:51:05.286, Speaker B: Modular magic. It's a really good tweet. You can check it out. There's a lightpaper or documentation on how this all works. We have a GitHub and a Twitter to visit, but to the actual project so you can click download Mac here and it should open the different releases. This just got released like an hour ago, so hopefully this works. But v one 0.0
00:51:05.286 - 00:51:27.884, Speaker B: should work. Go to assets, download it here. I have it on my desktop right here. Open it, drag it into applications. I have it dragged onto my desktop so I will open here. So far, hopefully grandma can click download, I can double click an icon and this is the homepage. So it's really easy.
00:51:27.884 - 00:51:51.202, Speaker B: All you have to do is just toggle this on. I'll get back to this real quick. And the incentivize system is how you set it up here so you can sign in, you can paste in your address. This is completely optional by the way. And by running this in the background you earn points. So right now we don't have an exact way of what rewards it is, but we're just keeping track of who is using it. Okay, cool.
00:51:51.202 - 00:52:10.282, Speaker B: So hit the toggle and that's it. Right. It looks pretty simple, but if there's a secret little code here that if you. It's like a cheat code. If you click on the I here and you go to console, you can actually see all of this stuff working. So you can see that it's running the celestial da light node. Here's the version.
00:52:10.282 - 00:52:24.224, Speaker B: If I scroll down, you'll see that it's syncing up with the headers. This is totally optional, but the idea is something super easy where, you know, your grandma can run and earn some rewards. So this is lustrian in a nutshell. Thank you.
00:52:27.324 - 00:52:30.544, Speaker A: That was sweet. How did you get the logs to show up again?
00:52:31.804 - 00:52:32.624, Speaker C: It's.
00:52:34.124 - 00:52:37.180, Speaker B: I forgot what I did. I think I.
00:52:37.332 - 00:52:39.024, Speaker A: Same way that you do it in a browser.
00:52:39.324 - 00:52:49.584, Speaker B: Yeah, exactly. Yeah. So the trick behind it is it's using electron, I think. I'm just logging everything from the console into the console log.
00:52:49.924 - 00:52:54.956, Speaker A: Nice. That was really cool. The first question is, what was your inspiration for the project?
00:52:55.140 - 00:53:14.588, Speaker B: Yeah, so back on the first slide. A lot of these projects are super technical. Just to get started, I wanted to create something even more simple than, you know, a web two project where you just double click a couple times. There's one toggle. It just works. This is primarily focused on the UX track where you don't have to be a developer. That's the main goal.
00:53:14.588 - 00:53:29.944, Speaker B: The second one is running a light node right now is just out of the goodness of your heart. It's quite technical to run all this stuff, so we want it super simple where anyone in the world can run this. It runs in the background. Right now, I'm running it, and it's keeping the network secure.
00:53:30.824 - 00:53:45.844, Speaker A: Awesome. And when Celestia on a microwave. When Celestian on my. Sorry, lest you. Not Celestia. When Lestian on my Tesla plaid. And when Lestian on my vape asking for grandma.
00:53:46.504 - 00:54:04.344, Speaker B: Yeah, well, grandma is pretty techie, and she has a Tesla. Oh, my goodness. And a vape. She should probably stop vaping, but right now it's on Mac. The goal is to make it cross platform, so we'll start there. I'm not sure about the Tesla yet.
00:54:05.124 - 00:54:18.700, Speaker A: Cool. And then I guess someone else loves your grandma. But the next questions up are, how do the rewards work and where do the rewards come from?
00:54:18.852 - 00:54:42.134, Speaker B: Yeah, so right now, we're just keeping track of how long you're running these light nodes for. So it keeps track of the headers it's being sent, and we're keeping track. In terms of points, there's no token reward yet, or we don't know what it is yet, but as of right now, it's just tracking usage. Maybe further along in time, when we roll this out, we can reward these folks with something more tangible.
00:54:42.514 - 00:55:03.644, Speaker A: Cool. Yeah, it's been fun to see you working on that. I know you're one of the projects who's been sharing on Twitter. Just, I guess maybe reminder to anyone else who hasn't shared it online. This is a really good way to get eyes on it. We have. We're coming up on time.
00:55:03.644 - 00:55:08.720, Speaker A: So how often do you get the rewards? I think that's something that's to be determined still.
00:55:08.872 - 00:55:11.764, Speaker B: Yep. The points are every. Every block, basically.
00:55:12.104 - 00:55:22.664, Speaker A: Okay, cool. Sweet. Thank you again, Leon. Last up, we have Celestia Hubble. So I'll be inviting Alex up.
00:55:24.084 - 00:56:25.988, Speaker C: Hello. Hello, everyone. I'm Alex from Selenium, and, yeah, I'm excited to introduce to you our project, the Hubble Celeste network dashboard. Let me share it with you. And the idea for Hubble came from trending discussion in Twitter, where people were talking about how every major tech company should have their own in house dashboard to clearly display their current activities, total performance, and they would be able to put it on, like, big screens in halls, on meetings, and etcetera. So, inspired by this, we decided to create something special for Celestia network, and we came with Hubble. This is dashboard for Celestial Network, where you can track and identify the activity on the celestial landscape.
00:56:25.988 - 00:58:05.794, Speaker C: And first of all, you might notice that in the center we have like big planet, it is Celestia Globe and on its surface you can see that new transactions, real time transactions that appear on Celestia, they show as comments that fallen on that planet. And on the left side you can see also the list of these transactions and you can also view more details of each particular transactions by clicking on the link and you will go to selenium. Also you can change the network and see this dashboard for mainnet and Mopa networks. On the right you can see block of active rollups where we put the top performers between registered rollups and sorted them according to the total amount of data that they have published on Celestia. And the last but not least, on the bottom of this dashboard you can see network statistics like Celestia Price, amount of data that was posted by each day for the last 60 days, gas price per day also and other cumulatives. I believe that's it. You can go to and look at live at Hubble Selenium IO and I would like to hear questions if you have.
00:58:09.934 - 00:58:35.724, Speaker A: Awesome. Thank you Alex. I think there's one from the last. Yeah, I think I have the questions mixed up when Hubble for Mars oh, slush light notes are being deployed on Mars next year. Can you show jpegs or gifs on Hubble that people post as bobs?
00:58:37.784 - 00:59:18.694, Speaker C: We can show it on. We do show it on selenium right now, and on Hubble we display just like a list of all transactions and we currently do not show each blob that is posted where we are paying for blob transaction. But as we all know, appetite comes while eating. And while we were building that dashboard, we want to put on that planet also rollups and other networks entities. So it will be more visualized and it will be much more easy to read.
00:59:19.394 - 00:59:51.524, Speaker A: Awesome. Thank you again for showing us Hubble. Look forward to playing around with it myself. Thank you. And I think that brings us to the end of demo Day part one. Thank you everyone for joining. Thank you Brian for the help moderating and we'll be excited to welcome, welcome everyone back tomorrow for community and build whatever tracks.
00:59:51.524 - 00:59:56.364, Speaker A: That concludes demo day for today. Thanks again, everyone.
00:59:57.504 - 00:59:59.324, Speaker B: Thanks everyone. Thanks, Josh.
00:59:59.864 - 01:00:00.384, Speaker A: Thanks, Brian.
