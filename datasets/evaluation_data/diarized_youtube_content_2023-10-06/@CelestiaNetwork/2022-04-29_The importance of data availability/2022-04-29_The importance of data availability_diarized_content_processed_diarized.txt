00:00:00.250 - 00:00:00.800, Speaker A: Um.
00:00:04.450 - 00:01:32.806, Speaker B: So there are a couple of things in which data availability is like, designed to solve the problem for you. So I typically like to explain this in terms of like, the optimistic roll up model and the optimistic roll up model and the, well, and the sort of validium zero knowledge ZK roll up model. But one of the most important things about these systems is who can propose a block and who can verify the state. So in an optimistic roll up model, you need to have both a broad set of people. You need to have as broad a set of people who can verify the state, because you need people to detect if there is invalid state transition and then play the interactive verification game. And then the second in the zero knowledge world, the zero knowledge proof provides proof that every state transition is valid. But you need data availability to enable other people to propose blocks.
00:01:32.806 - 00:02:03.810, Speaker B: Otherwise you end up in a situation where a single centralized party can censor. So really the core properties of a blockchain, censorship, resistance and auditability, are entirely dependent on this actual property, which is data availability, if you want to operate in this sort of hyperscaled million blockchain world. And that's why data availability is like the fundamental problem of blockchains.
00:02:05.850 - 00:03:01.720, Speaker A: Go for it, Mustafa. Yeah, so, I mean, it's an interesting question because it sounds very counterintuitive. Data availability is like the core primitive that blockchain provides. We've seen tweets from AvA and on their team saying that data availability is just some random problem. They don't understand why it's even relevant in the first place. So it's very counterintuitive to understand why. If you've been looking at blockchains in the old model that bitcoin has introduced, where consensus and execution are coupled together effectively, but where you have a model where the consensus nodes don't execute your transaction, then it starts to become clear why this availability is important.
00:03:01.720 - 00:05:06.126, Speaker A: Before Celestia was created, or before it was called celestia, it was originally called lazy Ledger. And the reason why it was called lazy Ledger was because I was trying to figure out what is the most minimum viable blockchain you can make, or in other words, what is the least amount of work that a consensus node could do for that chain, and how much, if you look at, if you had an extreme, how much computation and work could you actually push to the end user like clients and make it so that the consensus knows now how to do it themselves? And the conclusion I came to you was, if you wanted to take this to an extreme, let's say you wanted to build a version of bitcoin with this, you would basically just need a chain where you can dump arbitrary data on it and every single transaction is allowed. So imagine a version of bitcoin, for example, where invalid transactions are allowed to be posted on chain. Like you can steal people's money on chain. How would that be secure? It will still be secure because you just insert a rule on the user's node to say we will simply ignore invalid transactions that have been first on the chain. And in the case, let's say like there's two transactions that are trying to do a double spend and those two transactions are trying to spend the same coins, and then obviously you just ignore the second one. But in order to know which one came first, if you have two conflicting transactions, in order to know which one came first, not only do you need ordering over the transactions, you also need data availability, because obviously you need to know the complete set of transactions that have ever been posted in order to know which one is the first transaction with a specific property.
00:05:06.126 - 00:05:49.700, Speaker A: Like for example, which is the first transaction that spent this CTxo. So this is kind of intuitively why, if you look at it from first principles, why data availability is kind of a core primitive of blockchains, and this isn't anything new, by the way, even back in 2014, before Ethereum, bitcoin developers were kind of arguing about this and discussing this. And one developer, there's a mailing list post where Peter Todd argues with Gregory Maxwell about what a blockchain fundamentally is. And Peter Todd was the first person to realize that a blockchain is fundamentally a data availability layer, and he refers to it as a proof of publication system. Effectively, you're proving this to people that you publish data.
