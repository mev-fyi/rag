00:00:00.890 - 00:00:30.262, Speaker A: Hey, all you modularists out there, welcome to Celestia Spotlights, where we hear from the people at the forefront of the modular movement. I'm Nick White, COO of Celestia Labs. Today I'm thrilled to have on Neil Somani. Neil is co founder of Eclipse, where he's building the first customizable modular roll ups using the Solana VM. Yes, you heard that right. The Solana VM is going modular and coming to a roll up near you. Neil is here to tell us all about that and more.
00:00:30.262 - 00:00:35.400, Speaker A: Neil, welcome to Celestia Spotlights. It's been a crazy week. How are you doing?
00:00:36.250 - 00:00:59.726, Speaker B: Hey, Nick, thanks for having me. Yeah, it has been a crazy week, especially for the Solana community. A lot of folks, they were indirectly or directly impacted by FTX. So want to take a second and acknowledge that a lot of people, I think, are getting back on their feet, which is good. And I think this is going to end better for everyone than how it started. So I'm feeling pretty positive about things now.
00:00:59.908 - 00:01:37.930, Speaker A: Yeah, I think we've all been a bit distracted with everything unfolding blow by blow on twitter. And the cool thing is that the builders are here to stay. And I actually sense that in the Solana community that this is a real trial by fire and the core community is going to stick around. And so, yeah, it's good to have you on, and I know that you're embedded in the Solana community, but you're also kind of taking a new spin on it. You're going taking Solana modular. So anyway, I think let's start out by just tell us a bit about your background. I know that previously you were on the dark side of finance over at Citadel.
00:01:37.930 - 00:01:41.690, Speaker A: What brought you over to crypto?
00:01:42.430 - 00:02:13.138, Speaker B: Yeah, so I was working over at Citadel. I was doing commodities research, so specifically doing power and gas, and I was always interested in crypto. I bought my first bitcoin in 2015 or something. But around March of this year, I left, I was reading a bunch of crypto white papers and I started building something in the terra ecosystem. So I was building an EVM. It's a way to run Ethereum bytecode on terra. And I thought that was interesting because I just saw how quickly finance smart chain took off, given it was EVM compatible.
00:02:13.138 - 00:02:42.602, Speaker B: And I saw all these other EVM compatible l ones really precipitously growing. And I saw Terra growing without that. So I thought it was a very natural idea to bring EVM compatibility to one of these cosmos chains. Obviously Terra de pegged. And then you reached out and I chatted with the Celestia team. I was already talking with Jacob Arlock before he had joined Celestia, and he had already sort of gotten me primed to like the Celestia thesis. You guys made a very strong argument that rollups were the path to scaling crypto.
00:02:42.602 - 00:03:04.280, Speaker B: I read off on my own, came to the same conclusion, and hit the ground running, and started talking with a lot of folks in the Salana community who are interested in the idea of having their own Salana VM roll up for many of the reasons mentioned. Just that they get to customize the roll up however they want. They get sovereignty. They can always leave the l one if they want to. And those are the kinds of benefits that we want to bring to the Salona community.
00:03:05.050 - 00:03:29.514, Speaker A: Very cool. Well, start out in terra ecosystem, then it dpegged. Now you're in the Solana ecosystem and all this stuff is happening. You're open too. No, I'm just kidding. So you touched on it a little bit that we reached out to you and we started talking to you about modular blockchains. And Jacob obviously was sharing sort of the modular viewpoint.
00:03:29.514 - 00:03:39.220, Speaker A: But I'm curious if there was an aha moment for you. When did you really feel like you fell down the modular rabbit hole? And what was it that spoke to you?
00:03:39.990 - 00:04:11.658, Speaker B: I think it's after Terra's dpeg. I saw a lot of the TVL flow out of a lot of the l ones. And then I realized that every time we spit up another l one, in order to secure it, you basically have to split the security and take some of that security from existing l ones, because there's only a finite amount of economic resources out there. So if you're like a proof of work chain, for example, you spin up another proof of work chain. Some of those computers now have to secure this new chain. And at some point, and if that's the only way that we're going to scale, then at some point we're just weakening the security every single time. Whereas for roll ups, it has the exact opposite effect.
00:04:11.658 - 00:04:32.050, Speaker B: Where you're building on top of the same decentralized base layer, you're increasing the economic activity and that increases the fee. But then that also incentivizes more computers and more nodes to join this highly decentralized base layer. So that was the sell. And I think that's still the reason why I think that it's the most viable path toward economic scalability, or like economically sustainable scalability.
00:04:32.550 - 00:05:12.726, Speaker A: Yeah, I agree with you. You're touching on the point that in a roll up setup, everyone's sharing a common security layer. And rather than fragmenting that security with separate blockchains that then have to spin up their own validator sets, have their own proof of stake token or what have you, you can all kind of share down your resources into one common layer, and it makes a lot more sense. And it's also lower overhead to launch a new chain. Absolutely. Yeah. There's so many different aspects of it, but I'm so glad that we had those conversations and convinced you to sort of hop into the modular ecosystem.
00:05:12.726 - 00:05:27.780, Speaker A: So now tell us a little bit more about eclipse. Specifically, we know that it's salana virtual machine roll ups, but give us more color, give us a little bit more of an overview of the project.
00:05:28.790 - 00:05:54.778, Speaker B: Yeah. So the way that I've been describing it lately is as Salana virtual machine roll ups as a service. It's like you want to have your own chain. Maybe you're a web two company who wants to build a web two scale application. You're Disney, and you want to let people stream movies and stream micro payments as they're watching it or something like that. So you want to have your own chain, and you want to use the fastest vm out there, which right now is a Salana virtual machine. And you want to be future proof, even if some l one becomes outdated.
00:05:54.778 - 00:06:25.318, Speaker B: You don't want to have to rebell all of your code. You want to be able to swap that out very easily. So this is the motivation behind it. And the problems that we basically have to solve in order for that to work is we have to first factor out the Salana virtual machine and the Solana execution layer from this very monolithic repo. Second, we have to turn it into a roll up. So we have to set up this scaffolding for optimistic settlement. And the third thing is that we have to basically enable IBC messages to connect it to the cosmos ecosystem, which has never been done before.
00:06:25.318 - 00:06:30.806, Speaker B: But that's why we received a Solana foundation grant, and that's how we initially funded that development.
00:06:30.998 - 00:07:02.770, Speaker A: Got it. So on the technical side, you're taking the Solana sort of virtual machine out of the Solana consensus, all the rest of the node software, essentially. So you're isolating that piece, then you're building this sort of optimistic roll up capabilities, as well as like, a settlement layer. And then the last part is the IBC, sort of for interoperability. So you're, I guess, adapting IBC or making it compatible with the Solana VM, right?
00:07:02.840 - 00:07:37.680, Speaker B: Yeah. Like, if we wanted to build on Ethereum, and that was the only alone that we wanted to support, then we probably would have implemented the Solana optimistic roll up settlement on Ethereum as a smart contract. But the reality is that we're not that long the Ethereum donk sharding roadmap because it's so slow, and I feel like Celestia is already there. That's the reason why we like Celestia so much, because it's what Ethereum should be and it's what they already should be working toward much more aggressively. And I think that it basically gives us the opportunity to launch a blockchain of the future now rather than waiting for Ethereum's roadmap to actually come to.
00:07:40.050 - 00:08:21.482, Speaker A: Well, to Ethereum's credit, I think that they are willing to adapt. Right. And they were one of the first ecosystems to actually go all in modular with the roll up centric roadmap. And over time, their sort of tech stack or their end game has started to look more and more like Celestia's roadmap. Agreed. Fortunately for Celestia, we're starting from scratch, whereas they have sort of this monolithic l one baggage essentially, that they have to kind of build around. I think that they will get there, but it's just inevitably a much slower process and there's so much more value at risk.
00:08:21.482 - 00:08:47.380, Speaker A: So, yeah, I understand where you're coming from. So you talked a little bit about the different Ethereum as a settlement layer versus other places. Tell me why. How do you see settlement playing out in the long term? Will there be one settlement layer to rule them all? Will there be one virtual machine that everyone settles down to, or is there going to be lots of different ones? And why?
00:08:48.230 - 00:09:35.902, Speaker B: Yeah, so I think the settlement layer, to some degree has to accommodate the execution layer that you're writing on top of it. So for the Solana virtual machine, if we wanted to use multiple layer ones, then we could have re implemented settlement on every single layer one. But because we want to allow people to customize that, we have to break the settlement layer out. So similarly for other virtual machines such as the EVM, I'd also expect people to build, like, honest minority settlement layers for the EVM, which I think, like Astria is doing, or maybe dimension and any other maybe move, for example, might have its own honest minority settlement layer. Then we might also see settlement layers that exist on l ones. But then that also sort of makes the l one less specialized, because now it's not only used just for data availability, but it also has to have settlement capabilities. So that's kind of what I see as a future of settlement.
00:09:35.902 - 00:09:47.670, Speaker B: Maybe you'll have people doing settlement on Ethereum, and then you'll also have honest minority settlement layers, but I see very little reason to be doing, for example, settlement on chain on Solana. That seems like the worst of both worlds.
00:09:48.110 - 00:10:04.278, Speaker A: Yeah, that makes sense. And do you think that it makes sense to couple settlement with the data availability layer? Should settlement be enshrined or should it be like a separate chain that builders can build?
00:10:04.384 - 00:10:33.958, Speaker B: Yeah, depends on the use case. Right. I feel like if someone's willing to pay the fees to make it an Ethereum roll up with settlement on Ethereum, then they should go for it. But if you look at optimism right now, it's still not trivially cheap because ethereum gas fees are still high. They have to do settlement on chain. If they did settlement elsewhere, it'd still be pretty expensive because now they still have to store data somewhere. But in the case that if Ethereum actually builds out their dong sharding plan and it was just used for data storage, then that's like a much more affordable option.
00:10:33.958 - 00:10:45.146, Speaker B: So, yeah, I think it depends on how decentralized or how much you care about the security of the. I guess it basically depends on what your threat model.
00:10:45.328 - 00:11:04.014, Speaker A: Yeah. Yeah. Well, the reason I ask is that we get a lot of flak from people about not having enshrined settlement on celestia because in some ways it makes it so there isn't like this easy pluggable option for role of developers. So it means that people have.
00:11:04.052 - 00:11:06.210, Speaker B: Yeah, you should do settlement somewhere else now.
00:11:06.360 - 00:11:47.360, Speaker A: Yeah, but what people don't realize is that actually you can build a settlement layer on top of celestia, and those are already happening. Eclipse is going to be one Astria dimension. There's a bunch. And I think for Celestia, what we really care about is being credibly neutral. And I think in order for a data availability layer to be credibly neutral, it should not enshrine settlement because it's favoring one specific settlement layer, one specific type of settlement environment, and rather we want to be as universal as possible and cater to as many different ecosystems as possible.
00:11:49.090 - 00:12:13.990, Speaker B: Agreed. Yeah. That's what people are sometimes confused by that because they'll ask, how is it possible that you're doing a solana VM roll up that's storing blocks of data onto polygon or something, or onto Ethereum because they don't use the SVM. But that's exactly the point, because we factored out settlement, and settlement isn'tied to the data availability layer. All that DA is doing is just storing blocks, and that could be blocks from any virtual machine.
00:12:14.570 - 00:12:47.650, Speaker A: Yeah. So we covered settlement. I now want to shift to execution and the different execution environments out there. Obviously, EVM was the first and the most widely adopted. Probably has the best tooling, the most projects building on it. But where do you see the Solana VM growing in the next few years? And what do you think has contributed to its success? Because I would say the Solana VM is the second most widely adopted blockchain VM after the EVM.
00:12:48.630 - 00:13:25.742, Speaker B: Yeah. The SVM is solving a different problem, which is that the Solana virtual machine, and specifically the C level runtime is highly parallelized. So it's optimizing for just extremely high throughput. And as a result, it imposes more requirements on developers, such as the fact that you have to say what addresses you're going to read from or write to, because that's how it enables that parallelism. But I think there's a lot of cool stuff going on, such as, like Seahorse lane lets you write Python programs. You can write your Solana program in Python, and it'll actually convert it to a fully typed rust program that can then be run on Solana. There's like a great fee market coming up soon.
00:13:25.742 - 00:13:58.454, Speaker B: The Solana VM will support move bytecode, and Neon's coming out in December, so it'll support EVM bytecode. So the Solana VM is like the swiss army knife of virtual machines can support all sorts of bytecodes. It's super parallelized, and that's why we picked it when we were developing the rollup. Initially, we were like, should we just make our own bespoke, fast VM? Should we just borrow move? But these are, like, untested, and this is like a completely new territory. Whereas if we use the Solana virtual machine, then we benefit from all this tooling that already exists. So that was the thinking behind why we chose it.
00:13:58.652 - 00:14:23.918, Speaker A: That's pretty wild, that you can run. I guess you were already kind of doing that, but that you can run, move, or even EVM by code on the Solana VM. I guess that touches on your previous project, which was you were trying to build an EVM on top of cosmosm. On, on. Yeah, I guess that you're pretty familiar with how those things. Yeah.
00:14:24.004 - 00:14:46.840, Speaker B: The way it normally ends up working is it'll be a fork of some repo like Sputnik. VM is an EVM implementation for rust, and it's almost kind of like get like go Ethereum. It'll go through each line of bytecode and be like, oh, you want to add these two numbers? I'm going to add them now. And it just goes through line by line. And it's a smart contract written and deployed to the blockchain that you want to have EVM capability for.
00:14:47.210 - 00:15:25.970, Speaker A: Yeah, the interesting thing is that this also connects to settlement in that a settlement layer. It's easy for it to, for example, verify a fraud proof within an execution environment that it knows about. But if it doesn't natively know about that execution environment, then it has to verify that fraud proof within a smart contract that understands that execution. So I guess I hadn't thought of that before, but it's actually a very similar problem. So maybe even the eclipse settlement layer can use some of this technology to in the future settle roll ups that are not only Solana VM roll ups.
00:15:26.950 - 00:16:01.390, Speaker B: Yeah, definitely. And I think it's a lot easier when you're building your own settlement layer because you can control the gas costs and stuff. Whereas if we were trying to do Salana VM settlement on Ethereum, then maybe some of the elliptic curve operations or something are super expensive to settle on the Ethereum L one. Or maybe it's just like not even, it's just prohibitively expensive and it's not possible at all. Whereas by having our own settlement layer, then we don't have to worry about that and we'll always be able to do the settlement. The question is just like, what is an honest minority with respect to which l one are we depending on for security? And that's sort of up to the user.
00:16:01.730 - 00:16:23.400, Speaker A: Got it. Well, we're getting pretty technical here, but one last thing on this sort of general thrust is how do you think about the difference between sovereign roll ups and roll ups that actually aren't sovereign that use a settlement? Where do you see the trade offs there? And which one are you building?
00:16:25.050 - 00:17:11.958, Speaker B: So eclipse roll ups aren't sovereign from the eclipse settlement layer. They're like governance roll ups, whereas a sovereign roll, like our settlement layer, is sovereign in the sense that the settlement layer doesn't necessarily rely on any particular l one. But yeah, I think it's, the thinking is like if you want to be able to truly replace all the parts or what your chain is building on, then obviously you need complete sovereignty. But I think most people don't want to be responsible for all of those parts. And that's what's nice about having this variety of options. It increases the design space and people can say, oh, I'm okay with relying on eclipse or selamand because I feel pretty confident they're going to do that correctly. And we'll give them the option where if they want to plug in their own consensus and become their own layer one, then they could.
00:17:11.958 - 00:17:32.890, Speaker B: But by default, I don't think people want to have that. I don't know if they need that level of sovereignty. Whereas being like a sovereign roll up I think is a really good in between stage for someone who was previously their own layer one, then they become a sovereign roll up. So that's like a first step for them. And then maybe down the line they become just like a total roll up and they're dependent on some other enshrined layer.
00:17:33.050 - 00:18:10.220, Speaker A: Yeah. To me modularism is all about choice and flexibility. And obviously Celestia has been beating the drum about sovereign roll ups, but it's not because we think that sovereign roll ups are better than non sovereign roll ups or that you have to build one way or the other. It's just that we think people should have the choice. And other ecosystems like Ethereum overemphasize that you have to use the settlement layer. Right. But we feel that it's important that people realize that roll ups can be their own chains in and of themselves.
00:18:10.220 - 00:18:48.200, Speaker A: They're not fully independent because they do borrow the security of an underlying l one, but they don't have to post their state update somewhere. And they should be able to via their own social consensus fork and upgrade and do these things if they want to. If they don't want to, they don't have to. It's totally optional. So yeah, it's cool that you guys are kind of like, you see the pros and cons and I think most people may, if you're a casual developer, you might just want to deploy onto a settlement layer. It actually makes your life a lot easier in a lot of ways. So there's no right or wrong.
00:18:49.290 - 00:18:50.710, Speaker B: Yes. Agreed.
00:18:51.850 - 00:19:12.350, Speaker A: So let's go back to eclipse a little bit more specifically. You guys are going to build the sentiment layer and it is its own standalone chain with a set of validators. Or is it going to be itself a roll up that has its own sovereign settlement?
00:19:13.170 - 00:19:19.358, Speaker B: Yeah. So the settlement layer is honest, minority. So it is a roll up and it'll post those blocks of data for.
00:19:19.364 - 00:19:29.730, Speaker A: The Solomon layer to Celestia and it's going to be an optimistic roll up with fraud proofs that are sent around on the peer to peer network.
00:19:30.470 - 00:19:31.458, Speaker B: Yes, that's right.
00:19:31.544 - 00:19:32.962, Speaker A: Yeah, got it.
00:19:33.096 - 00:19:51.206, Speaker B: Eventually we'll become a zero knowledge roll up, and we're developing that right now. We're actually leveraging the risk zero code. And we do this JIT compilation between salana programs, which is typically bps by code and risk five by code. And then we use risk zero, which is able to run risk five by code and give it zero knowledge proof.
00:19:51.318 - 00:20:35.190, Speaker A: Yeah, I'm a real fan of risk Zero. For the people listening who aren't familiar. RISC Zero is building a proving system for RISC five instruction set. So what that means in more like layman terms, is that you can take code and then compile it down to risk five and then prove it. And that way you can build, like. It makes it a lot easier to build ZK roll ups, because rather than using these new instruction sets like Cairo, risk five already has a ton of support. It might not be optimized, but it has the support there and it's very easy.
00:20:35.190 - 00:20:51.994, Speaker A: I think there's already compilers right from, let's say, rust or a lot of these high level languages down into RISC five. So that's really exciting. So you're starting optimistic you'll pivot towards ZK in the future when that's ready, yeah.
00:20:52.032 - 00:21:18.580, Speaker B: And it might even just be an option that we give to people. It's like you deployed an eclipse roll up. Do you want to use optimistic settlement zero knowledge, or do you want to just do, like, proof of authority? That's an option too. And it might make sense for a lot of these centralized entities who are moving into web three. Maybe they just want to run all the nodes, but they also want to get the benefits of transparency. And people can make sure that nothing was done in an invalid way. Maybe they do have some sort of verifiable randomness still.
00:21:18.580 - 00:21:27.160, Speaker B: But then they also want to collect all the sequencer fees themselves, or maybe they want to subsidize gas. They have some reason why they want to run the nodes themselves.
00:21:28.270 - 00:22:06.420, Speaker A: Yeah. One of the things that I find really interesting about modular blockchains is that the earlier cycles, those of us who have been around since 2017 and 18, wave, one of the really popular things was enterprise blockchain or like private blockchains. And obviously nothing really came of those things like hyperledger and all those things, for obvious reasons. And that's because blockchains, I think the real value proposition of them is that they're public and verifiable. So if someone's running a private blockchain, it's like, well.
00:22:08.470 - 00:22:10.820, Speaker B: Yeah, why not just use a server at that point?
00:22:11.270 - 00:22:56.034, Speaker A: Just use a server. Right. But the interesting thing is that what roll ups do is I think they strike this middle ground where you can have, let's say I'm circle, right, and I want to have like a USDC chain. It's probably bad for me, from a regulatory perspective, to launch my own blockchain and have my own proof of stake coin and whatever else. And this would be the same for lots of different enterprise entities. But if I launch on, let's say, Solana or Ethereum, I may not have the control and the customizability or even sovereignty that I might want. So you're kind of stuck between these two options.
00:22:56.034 - 00:23:27.600, Speaker A: And the cool thing about a roll up is it's kind of like that, Goldilocks, like middle ground where you can have your own chain without actually having to do all this kind of regulatory scary stuff. Again, you're just paying fees to the data availability layer, and yet you have the customizability and sovereignty of your own chain. So I could see a lot more enterprises using roll ups going forward because they just kind of unlock a new use case.
00:23:28.290 - 00:23:55.670, Speaker B: Yeah, enterprise roll ups make a lot of sense, especially compared to enterprise l ones, which don't. And maybe that's what FTX should have looked like, like a centralized exchange where because you still want to control stuff like making the blockchain permissioned, you don't want random people being able to on ramp onto the exchange necessarily if they're a centralized exchange. But then you also get proof of reserves and maybe they could have somehow incorporated proof of liabilities. We could have prevented the kind of fraud that occurred.
00:23:56.170 - 00:24:19.114, Speaker A: Yeah, absolutely. If everything was on chain, if it was a roll up, it would have been transparent. There would have been safeguards, essentially. They wouldn't have been allowed to take your funds. It wouldn't have been custodial to begin with. Yeah. So again, I feel like I'm almost there, but I want to fully understand the sort of eclipse stack.
00:24:19.114 - 00:24:41.510, Speaker A: So we mentioned three things at the beginning. One was taking the Solana runtime out. The second one was the fraud proofs and settlement. And the last thing was IBC. We kind of talked about the fraud proofs and settlement. I'm curious, how challenging has it been to extract the Solana VM from the Solana node software?
00:24:42.650 - 00:25:10.590, Speaker B: Yeah. So it's pretty monolithic. But I think what jump did recently with fire dancer is really interesting, and we haven't looked too carefully at it, just given that we've been working with the Salana core repo. But they basically turned the Salana client into this modular repo. But the thing is now, in order to run that, it's like ten different binaries. You have to run all of them separately. So there's pros and cons to it, but it also means that you can take a piece out of it and use that separately.
00:25:10.590 - 00:25:42.562, Speaker B: We basically want to take out the vote messages in particular. If you look at the Salana blocks, for every validator, they have to put this additional transaction in, and that's counted toward salana transactions per second. So if you look at popular public measurements, it'll say Salana's TPs is like 3000 TPS or something like that. But actually, like, three quarters of that is votes. So the true TPS is closer to, like 700, 800. Whereas for eclipse, we don't have those vote messages. So we're actually able to get more throughput out of the salon of VM.
00:25:42.706 - 00:25:56.926, Speaker A: Wow. Yeah, I think a lot of people don't really. There's a lot of Fud. It goes both ways. People are always like, look how high the TPS is. And then all the ethmax is like, oh, well, all of its votes. But then it's like, well, even if it is most of its votes, it's still pretty high.
00:25:56.926 - 00:26:51.834, Speaker A: But, yeah, I find it interesting that that choice was made to have the votes as actual transactions. But, yeah, you touched on the fact that I didn't realize that fire dancer was making the Solana stack modular. It's cool because we're seeing this across all the different ecosystems. Obviously, Cosmos was the first. And again, for the audience, there's an important distinction between modular software stacks and actual modular protocols. So when we say modular blockchain, what we mean is a protocol that itself is modular, meaning it just does one function like data availability or it does execution. But there's also this other side, which originated with Cosmos, which is modular software, where the way that they built their software, they still build monolithic protocols, but the software inside the protocol is modular.
00:26:51.834 - 00:27:27.574, Speaker A: So you have the piece of code, the library or the piece of code that runs consensus, then you have the piece of code that's actually doing the execution, like the state machine and all that. And so cosmos kind of started this with Cosmos SDK and tendermint, and then Ethereum started going this way. More recently, they have the execution client, and then they have the actual e two proof of stake client. So I didn't realize that Salana is doing the same thing. And there's just so many benefits. It makes sense. Modularize everything, including the software, is kind of my perspective.
00:27:27.574 - 00:27:31.150, Speaker A: And it probably is going to make your guys life a lot easier, I imagine.
00:27:32.290 - 00:27:36.190, Speaker B: Yeah. You can do things like swap out the consensus or throw it away altogether.
00:27:37.250 - 00:27:50.500, Speaker A: Very cool. And then now to finish up sort of the eclipse stack, tell me a bit about the IBC side of things. What are the challenges there and what does development look like?
00:27:51.190 - 00:28:35.738, Speaker B: Yeah, so this is the first ever IBC implementation for roll ups. And then it's also an IBC implementation for the Solana state. So for roll ups, especially for optimistic roll ups, usually there's a challenge period. So if you go and send IBC messages out of your optimistic roll up, that can pose an issue if your optimistic roll up is rolled back, because for the next week or however long the challenge period is, that's always a possibility. So you actually need those IBC messages to be either subject to a challenge period where you could pass a fraud proof, or you just only send the IBC message when finality has already occurred. So that's the challenge with IBC. It also requires just getting, I mean, there's like different elliptic curves that are used for Solana.
00:28:35.738 - 00:29:00.490, Speaker B: So a lot of IBC, I don't think any IBC relayers support the elliptic curves that are used. So that's the kind of work that we have to do. We push a lot of that upstream. So that's the IBC work. And then you also have to implement just like a regular bridge. So like a non IBC bridge, maybe one that uses full nodes. And the reason for that is that then you can get fast finality bridging out of the Eclipse network, because otherwise you'd have to always have to wait that challenge period.
00:29:01.150 - 00:29:06.906, Speaker A: When you say, like, full node bridges, what do you mean? Do you mean something like, should be.
00:29:06.928 - 00:29:25.202, Speaker B: Like something that's running the. Yeah, it's running the eclipse client, and it's just following all of the eclipse blocks. And it's aware of what the fork choice rule is. And basically, if you want to bridge your money out, it's like, all right, nothing's going to get rolled back up until this point, so we can go ahead and just do it.
00:29:25.336 - 00:29:44.978, Speaker A: Got it. But that's not running on chain, right? So that would be like an intermediate service. Like. Got it. Yeah. And didn't. I think, if I recall correctly, the Solana foundation gave you guys a grant to build support, like IBC support for Solana, essentially.
00:29:45.154 - 00:29:50.790, Speaker B: Yep, that's right. Yeah. That's what our grant is for, to basically build IBC messages for the Solana VM.
00:29:51.450 - 00:30:04.220, Speaker A: That's pretty, it's. It's very cool to me that the Solana ecosystem is supporting you guys and the work that you're doing, because I think it's going to benefit them in the long term for sure.
00:30:04.910 - 00:30:28.766, Speaker B: Agreed. Yeah. Anatoly is the nicest guy. He also personally angel invested. And the thinking is that if there's going to be a bunch of roll ups and chains out there, they'd prefer that it's the SVM rather than some competing execution layer like the EVM. And it helps everyone because we might make improvements to Solana virtual machine as well. Like, we're going to possibly work with skip and introduce the concept of blocks back into Salana.
00:30:28.766 - 00:30:39.506, Speaker B: And maybe that's not ideal for the Salana l one, but the reason why you might want in a roll up is because now you can do an MEV auction. So it's just giving people more options on how to use a Salona VM.
00:30:39.698 - 00:31:14.654, Speaker A: Yeah. Well, Anatoly and the whole Salana team, we have a lot of respect for them, and I love that they're very positive for Celestia. Our ethos is modularism, not maximalism. Right. It's not about competing and who's going to be the chain or the ecosystem to rule them all. It's like, hey, this is a positive sum game. We are each building different components and contributing to this larger, this huge tech stack.
00:31:14.654 - 00:32:00.820, Speaker A: And if we build it in the right way, it's going to be possible for everyone to sort of benefit together. And builders will win as well, because they can mix and match everything. And so, yeah, I'm really stoked that the Solana ecosystem is backing you guys. For people who haven't heard of skip, another really exciting project coming out of the cosmos ecosystem that are taking a new approach to meV, like a more modular approach to meV. So I'm excited to hear that you're working with them as well. So we got the eclipse stack, those three different components. Now, I'm curious, where does the data availability layer come in? Where does, for example, eclipse plug into Celestia? How does that work?
00:32:01.670 - 00:32:37.950, Speaker B: Yeah, so the execution layer for eclipse. So the Solana VM produces a block, and that's stored on some data availability layer. Or alternatively, you could pass that to the settlement layer. The settlement layer does whatever work it needs to do, and the settlement layer stores both its blocks and the execution layer block onto Celestia or whatever da layer you want to like. We've chatted with other DA layers like polygon, Abel, and Eigen layer, but we're excited to be starting with Celestia and we'll continue supporting it because Celestia is also the whole motivation why we made this blockchain modular. And I think it's going to be first to market. So that helps.
00:32:42.370 - 00:33:06.470, Speaker A: Just to explain again. So you have the eclipse settlement layer, which is itself a roll up on Celestia, or another data availability layer, and then you have the other sort of eclipse instances, which are roll ups that are settling to that layer and they're all kind of posting their data down, or they might post it to the settlement layer and then down, depending on sort of their preference.
00:33:07.130 - 00:33:07.880, Speaker B: Yes.
00:33:08.250 - 00:33:27.280, Speaker A: Will there be a separate, so let's say you'll first launch on Celestia, then let's say avail is live. Later, will you launch a separate settlement layer on top of avail? Or will there be some way to unify these ecosystems and have one single settlement layer across them?
00:33:27.810 - 00:33:35.038, Speaker B: Yeah, this single settlement layer right now, the way it's being designed is this one settlement layer will be able to post to different data availability layers.
00:33:35.214 - 00:33:40.658, Speaker A: Got it. And so will it post to all of them simultaneously or will users choose?
00:33:40.744 - 00:34:01.740, Speaker B: I think you would just pick one. Yeah. So that's like the thinking. If you deploy a roll up, then you get to pick which da layer do you want to use? Depending on maybe some DA layers are more decentralized or something, and maybe they're more expensive, whereas other ones might be totally centralized and super cheap. So they get to pick that part and we leave it up to them.
00:34:02.190 - 00:34:24.880, Speaker A: Got it. That makes sense. And how do you guys see the sort of evolving ecosystem of data availability layers? What do you think is most important for a data availability layer to provide? And why would a developer or a user or an ecosystem like eclipse choose a specific one over the other?
00:34:25.650 - 00:35:02.106, Speaker B: Yeah, well, I think table stakes is just the sophistication of the data availability proof. So some chains just have better datability sampling than others. Or maybe the worst case is if you just have to store the full block and then it's not really doing data availability, but it's just doing data storage, and that's how we're implementing it for the Salana L one right now, we just have to store the full block there. And there's no sort of clever sampling that's going on. And that's also a very expensive solution. But maybe some user wants to use Solana because maybe that's where they're coming from. Maybe they like Solana consensus and they're willing to pay the price for that.
00:35:02.106 - 00:35:36.440, Speaker B: And alternately, they might go even more extreme and store it on Ethereum or something where the fees are even higher. But I think ultimately people are going to be thinking about what's their cost preference and their cost sensitivity, and they're going to be thinking about what are the other benefits that a specific data availability layer confers in terms of how decentralized is it and whatever other properties. Maybe they might prefer a KZG commitment if they want to have some sort of zero knowledge data availability proof. Maybe there's some more sophisticated users might have preferences about that.
00:35:36.810 - 00:36:35.178, Speaker A: Yeah, I think what you were touching on there is the overhead of a data availability layer, because if I'm a roll up and posting my data to a specific data availability layer, then all the clients of my roll up also have to check that the data is available. So if you're using a monolithic blockchain like Solana or even right now, the EVM that does not have data availability sampling, you have to actually just download all that data. You have to go and retrieve all of it, which is a lot more overhead. And in a blockchain like Celestia, it's just sampling. So it's a very light process and very low overhead. So I think that's definitely a big one and also the actual security of the scheme as well. How secure is their sampling scheme? I think there's going to be a range of tradeoffs there.
00:36:35.178 - 00:37:43.200, Speaker A: And then, as you said, the KZG versus optimistic from our perspective, at least from what we've seen in the benchmarks of KZG commitments, they're just very expensive and slow to compute, so it doesn't seem practical at this stage, but it might be. And there's actually even a possibility that there's going to be other ways of having a sort of validity, a non optimistic encoding scheme, but only, only Mustafa could explain that to you. But yeah, that's cool to hear your guys know on the different trade offs of data availability layers, it can be really exciting to see as more of them come online, how they measure up to each other. And I think costs obviously is going to be a big one. How do you guys think about cost in the data availability landscape? Is that really one of the main points of the trade off curve for you guys? Like, oh, this one's going to be too expensive, or is it going to be like, as long as it's below a certain threshold, that's fine, we'll use it.
00:37:44.450 - 00:38:36.398, Speaker B: Yeah, similar to you guys, we try to maintain credible neutrality so if someone's building an eclipse chain, we don't want to push our preference on them. Me personally, that's definitely something I was thinking about as we were building this initial version of eclipse out because I was initially going to deploy it to Ethereum and the cost was just so prohibitively expensive that I was like, this is just never going to work and we need to find some other solution or just scrap the idea altogether unless there is some data availability layer that exists. And that's why celestial is a perfect solution. But yeah, for most people I think it's something more like there's a threshold where people think this is effectively zero. Like if they're using the salana blockchain, for example, the gas cost in general is so low that people don't even think about it. Whereas for ethereum, people, 100% time the gas, like they'll be waiting there. They're like, oh, I should wait 30 seconds because that's the site's suggested time or whatever.
00:38:36.398 - 00:38:49.750, Speaker B: So it's like a zero one thing on whether people are thinking about gas at all or whether they're not thinking about it. And then there's the other binary decision which is just, is this so egregiously expensive that it's just off the map altogether?
00:38:50.730 - 00:39:47.240, Speaker A: Yeah, I think the real benefit for the ecosystem of data availability layers is that it's going to make block space so abundant and so cheap. And hopefully we can go back to a world where users and developers don't even, it's not something they think about. It's not like they're like, oh shit, I really got to optimize this gas. Or oh, I want to wait. Oh, today gas is too expensive, so I'm just not going to mint my nfts or what have you. So I'm excited for that to happen. And the last question on data availability layers is what do you think about the ecosystem on top of a data availability layer? Do you think that that's important? Like the network effects of, let's say, the other roll ups? Because as you know, one of the benefits of a modular blockchain stack is that roll ups that are built on the same, on a common data availability layer have trust minimized bridging, meaning that they can bridge in a fully secure way.
00:39:47.240 - 00:39:58.794, Speaker A: So there is sort of a network effect around that property. Do you think that's going to be an important thing, or do you think developers are going to be like trusted bridging is?
00:39:58.832 - 00:40:50.330, Speaker B: Yeah, I think they accrue more to the settlement layer because if you're bridging money between definitely, if you're sharing a data availability layer, then obviously you only have to rely on this one assumption, which is that l one is not going to be compromised or something. But also it's like you can get fast finality bridging between optimistic roll ups that exist on the same settlement layer, whereas if they're on different settlement layers, I guess you'd run the risk that both of these chains get blood back or something. Yeah, they're effectively sharing settlement layers in some way. I think the network effects for roll ups are a little bit weaker than on a monolithic l one, just because when all the smart contracts are deployed together, of course you get atomic composability. But yeah, there are definitely still some serious network effects in bridging.
00:40:50.770 - 00:41:14.180, Speaker A: Yeah, it's going to be exciting. And I love having debates on Twitter with people about where will the network effects accrue, because it's still anyone's guess. So zooming out to just the modular blockchain ecosystem in general, what are you most excited about and where do you see the space evolving as a whole?
00:41:15.030 - 00:42:03.650, Speaker B: Yeah, I think I'm really excited about those sorts of institutional roll ups that we were talking about before where like the Disney's of the world or Spotify's or something might have their own roll up or I think games having their own roll ups is really interesting. Mythical Games is building their own l one right now, which probably doesn't make that much sense in the context of what we're discussing, which is that they just want their own execution layer, really, and they don't want to have to worry about running the infrastructure for an entire l one. So I think we're going to start seeing more of that. I think gaming is a really great application because oftentimes games could use their own chain for a variety of reasons. Maybe they want to adjust block times, or maybe they want to mint a million nfts. That's one cool wave, and another one is token incentivized physical infrastructure. So helium drops, I think like a million nfts every week, some crazy number.
00:42:03.650 - 00:42:46.800, Speaker B: And there's not really a great chain that could support that volume of NFT drops. Even Solana like NFT drops, are famously what causes Solana to throw up. So having infrastructure that's designed for NFT mints, it probably shouldn't be its own l one because now roll up tech is at the point where we can actually use it. So I'm excited to see unique solutions to the kinds of problems that have sort of hampered the mass adoption and scalability of applications on layer ones. So those are the two things I'm keeping an eye out for. I think it's got to get to a point where it's as easy as deploying a smart contract. Or even simpler than that, even smart contracts are almost too difficult because if I want to deploy like a website to AWS, they have all these.
00:42:46.800 - 00:42:59.502, Speaker B: You could spin up your own instance and do all that stuff, but they also have extremely simple ways to just scaffold it instantly, just deploy it, scrape with your ClI. So we need stuff like that. I think that's the next you.
00:42:59.576 - 00:43:32.720, Speaker A: You took the words right out of my mouth and that's kind of been our vision and I'm glad that you share it, of making it as easy to deploy a new blockchain as it is to deploy a smart contract. And actually, even like you said further, it should be like AWS, it should be like cloud for web two, where it's just a few clicks and then boom, you have your server, your website, your web app, whatever, live and ready to go and it can scale up and down, you can shut it off, all those things. That level of flexibility is where we should be shooting for.
00:43:33.970 - 00:43:55.400, Speaker B: I agree. People aren't thinking nearly big enough in terms of how usable crypto needs to be in order to have mass adoption. Like these tiny things like waiting challenge periods or waiting for gas, people are like, oh, it's not that big of a deal. But that's leagues away from where it has to be in order for my mom to be able to use crypto. She's not going to wait for gas prices. She shouldn't even know what that means.
00:43:55.850 - 00:44:26.100, Speaker A: Yeah, absolutely. I think we will have one. When people aren't really aware that they're using a blockchain necessarily, it just works. Yeah, that's amazing. So to wrap things up, I want to ask you, where is eclipse now in the development cycle? What are the upcoming things on your roadmap? When can people start trying stuff out and using things?
00:44:27.510 - 00:44:56.918, Speaker B: Yeah. So we're excited to launch our testnet end of January, beginning of February next year. So 2023. So q one, 2023. We'll have three testnet chains. One's for DFI, one is for consumer gaming NFT stuff, and the last is for token incentivized physical infrastructure, and they're going to be able to pass IBC messages between each other. Sounds like we're probably going to enable testnet IBC messages, possibly with OKC or some other chain, just to kind of show that we're able to pass IBC messages outside of the eclipse network.
00:44:56.918 - 00:45:41.180, Speaker B: We'll support Celestia as a DA layer, possibly others, such as polygonabail or eigen layer, depending on if their testnets are ready to accommodate us. But at a minimum, we'll support Celestia. We're giving early access to a handful of protocols. We're keeping it to 30 protocols for early access, but there's hundreds of protocols that have signed up and we'll let them just deploy on their own. But we're going to actually handhold some subset of these protocols who are either especially big protocols that are moving to eclipse, or maybe they just are a unique use case. They're just getting started, such as a lot of these token incentivized physical infrastructure projects are just, they're early enough where we're even connecting them with venture partners right now, and we're helping them with their architecture. So we might take a more hands on approach for some of those.
00:45:41.710 - 00:46:01.760, Speaker A: Wow, so you already have testnet coming up. You have people already lined up ready to go, lots of first use cases. That's amazing. And where do you see Eclipse? When do you plan to launch Mainnet? And then what do you see for the first, let's say, year or two of the project from there on out?
00:46:02.450 - 00:46:33.020, Speaker B: Yeah. So Mainnet will be end of Q two of next year, so we're going to align with, obviously, we're limited by Celestia's main net launch, so we'll sort of time it with you guys after that. I think the next step is getting these big web two enterprises to start deploying eclipse chains professionally, and then it'll be self service. We'll enable settlement. So initially for the testnet, we're going to run all the nodes ourselves, similar to optimism's launch, where they run the node, they don't enable settlement, so they don't enable fault proof, but we'll enable that stuff later.
00:46:33.630 - 00:46:54.510, Speaker A: Got it. Yeah. Well, Celestia Mainet launch Q two 2023. Stoked that you guys will be there with us along for the ride. So if people want to, is there any last message you want to share with the audience? And where can people find out more about eclipse?
00:46:55.330 - 00:47:13.330, Speaker B: Yeah, so one thing is we're going to be launching our brand soon, so you can sign up for our testnet on our website. You can put your email in. We'll send you details there. The second is to follow us on Twitter. It's eclipse snd eclipse foundation. That's our handle on Twitter. You can follow me personally, Neil Salami.
00:47:13.330 - 00:47:15.206, Speaker B: And we'll be posting about all the.
00:47:15.228 - 00:47:33.840, Speaker A: Updates for, well, Neil, you know I'm a big fan of eclipse and what you guys are doing. It's been a pleasure to have you guys on Celestia spotlights. You guys are the first project, which is cool. And thank you so much for sharing all this information.
00:47:34.930 - 00:47:36.586, Speaker B: Great. Thank you, Nick.
00:47:36.778 - 00:47:37.660, Speaker A: All right, take care.
