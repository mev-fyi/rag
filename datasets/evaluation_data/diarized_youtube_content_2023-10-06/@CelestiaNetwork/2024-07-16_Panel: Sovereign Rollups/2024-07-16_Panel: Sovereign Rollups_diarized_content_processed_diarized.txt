00:00:02.040 - 00:00:02.920, Speaker A: Good afternoon.
00:00:03.062 - 00:00:03.558, Speaker B: Hello.
00:00:03.654 - 00:00:04.734, Speaker A: How are you doing, guys?
00:00:04.902 - 00:00:06.262, Speaker B: Doing good, doing well, how are you?
00:00:06.326 - 00:00:09.014, Speaker A: How's your ECc, etc.
00:00:09.062 - 00:00:09.638, Speaker B: Been nice.
00:00:09.734 - 00:00:13.570, Speaker A: Yeah. Modular summer a little bit better, hopefully.
00:00:14.670 - 00:00:15.806, Speaker C: Definitely bigger.
00:00:15.918 - 00:00:17.050, Speaker A: Yeah, that's right.
00:00:17.390 - 00:00:18.150, Speaker B: Cool.
00:00:18.310 - 00:00:32.100, Speaker A: We are here to talk about sophomore roll ups, so maybe we'll just start with like a lightning round of introductions and what youre, what you do, what your projects do with the conversation, evolve from there. I am David, I'm an investor at anagram.
00:00:32.800 - 00:00:55.130, Speaker C: Sure. I'm Felipe, I'm a co founder of Cartesi. Our idea is to let builders build more complex and intricate depths. So to do that, we build a RISC five execution environment which allows you to bridge web tooling. And the idea is to work and let the builders build more complex depths than the ones we currently see on the normal blockchain applications.
00:00:55.790 - 00:01:18.806, Speaker B: That's awesome. Hey everyone, my name is Jim. I'm one of the co founders of Sovereign Labs. And what we build at Sovereign is we try to build the most flexible and performance roll up framework. So users just bring similar to Cosmos SDK or substrate, bring their business logic. This time it's in Reddit and rust. And we take that and we enable it to be deployed as a roll up on any base blockchain.
00:01:18.806 - 00:01:24.626, Speaker B: It could be bitcoin, it could be Celestia, it could be Solana and yeah, cool.
00:01:24.698 - 00:01:37.670, Speaker A: Awesome. Okay, so I don't want to start a semantics war. However, I think it's really helpful to start with just shared definition of what is a sovereign roll up. Jim, do you want to lead us off?
00:01:38.170 - 00:01:54.050, Speaker B: Sovereign roll up from our perspective is just a roll up that doesn't have a validating bridge to the smart contract or like execution layer of the l, one of the blockchain that the roll up inherits its security from.
00:01:54.830 - 00:02:17.080, Speaker C: Yeah, so actually I'm definitely not a specialist in sovereign rollups, so I'm here to learn from him a lot. But I see sovereign rollups as a pure function over data availability layer. So it's like you choose the data availability and then everything else is governed by social consensus and you don't have an official place that you settle to.
00:02:19.380 - 00:03:06.376, Speaker B: Yeah, so our view of it is a bit different. So like the social consensus has been talked a lot about. But from our perspective, at the end of the day, when you're like bridging to any other like roll up, or if in your case your sovereign roll up does have a validating bridge, your roll up does have a validating bridge. There still needs to be the canonical state transition function that these bridges will respect. And in that sense you can't just use social consensus to update all these other bridges. So that is defining the bridges basically. In this case, in ethereum based smart contract rollups, there's a single bridge that defines the roll up.
00:03:06.376 - 00:03:26.700, Speaker B: In sovereign roll ups case, it's more like cosmos all the like. Well like the roll up can be connected to many different roll ups. And like the l one and the state transition function that those bridges accept is the right version of the roll up.
00:03:26.820 - 00:03:39.618, Speaker C: So just asking more question. So you don't fork by social consensus, you actually have to have a like you cannot just hard fork your sovereign roll up because the bridge is connected to a bunch of other roll ups. Right?
00:03:39.754 - 00:04:17.260, Speaker A: Yeah. Interesting. Okay, so we are at a point in crypto, I think, where we've separated out a lot of the primitives for building your own sovereign blockchains or roll ups. And we've made those tools much easier for application developers to where we've kind of like compressed the time to build your own sovereign roll up or blockchain from months or years to really weeks at this point. Why do application developers want to choose a sovereign roll up?
00:04:18.800 - 00:04:57.274, Speaker C: Yeah, so at Cartesi, as I said, we're a modular execution layer. So our execution environment can be used for, you can be l two and l three. You can run as a sovereign roll up. I think sovereign roll ups are good use cases for applications that are quite big and independent and they don't need to interrupt that often. So that's my current view on it. And I believe that's like say if you are running World of Warcraft on chain, then a world of Warcraft can be a sovereign roll up because it doesn't have like shared assets between many different layers. You can fork more easily because the assets are all basically defined in the roll up itself.
00:04:57.274 - 00:04:59.910, Speaker C: So that's how I think about sovereign rollups.
00:05:00.650 - 00:06:01.634, Speaker B: Yeah, again, our thinking is a little bit different here. By the way, at sovereign we don't necessarily see ourselves as purely sovereign roll up toolkit. You build a roll up and this sovereign roll up versus regular roll up is a bit of a semantic and not existing like the definition. So as long as you generate a secure roll up, you can run it as a sovereign roll up or you can have a validating bridge if you're deployed in Ethereum or if you're deployed on Solana. And at that point it doesn't, it's not a sovereign roll up, it's like a regular like smart contract roll up. And from our perspective, there's not that big of a difference between the two. So it's hard to say that one is like, in which instances is a sovereign roll up more useful? Or like, not because like, do you need a bridge to the l one? If you need like, does your l one support execution environment enough to be able to build a bridge? Sure, build that bridge.
00:06:01.634 - 00:06:40.360, Speaker B: And in that, like, if you do that, then like, your roll up is not going to be considered a sovereign roll up. In Celestia and bitcoin, you can't currently build that bridge anyway. So you have to build a sovereign roll up. So. But it's hard to say, like, when it's like much preferable to be a sovereign roll up versus a roll up deployed on Celestia. If we dig a little bit deeper, it could be like liquidity. Because if you are really dependent on being tied to the Ethereum ecosystem or the Solana ecosystem, and you want to have a trustless bridge to these l one s, then you likely don't want to have.
00:06:40.360 - 00:06:48.752, Speaker B: You likely don't want to be the sovereign roll up. You just want to have that bridge to Ethereum or Solana.
00:06:48.936 - 00:07:05.620, Speaker C: So just to align a little bit. So if you believe, like, if there's a roll up that has like three canonical bridges, meaning that it has assets on Ethereum, maybe it has its own Solana and has its own, I don't know, like base. Is that a sovereign roll up to you? Because it doesn't have a single canonical bridge but has many kind of canonical bridges?
00:07:06.490 - 00:07:51.800, Speaker B: No, from our perspective, a roll up can be a roll up on us. Only a single blockchain that has to be only a single blockchain that you inherited your security from. I mean, there are very complex ways to like, like have to roll up, like have inherited data from like multiple blockchains, and then you get the security of worst of like both blockchains. But normally in the simple sense, like a roll up can be a roll up of a single base blockchain, and then it can have regular IBC type bridges to other blockchains. Like you can have Solana is through Picasso connected to IBC. Hey, Connor. It's connected to Ethereum through Axelar.
00:07:51.800 - 00:08:03.900, Speaker B: And so as long as it's deployed in one dA layer, then it can connect to others through trust minimized bridges. But it can't have this validated bridge.
00:08:06.200 - 00:08:07.160, Speaker A: Hey, Connor.
00:08:07.320 - 00:08:07.920, Speaker D: Hey.
00:08:08.040 - 00:08:31.430, Speaker A: Hey. Okay, cool. So when we're thinking about sovereign roll ups and you touched on it a little bit, we talked about bridging interoperability surely is an important thing for sovereign roll ups, whether that's synchronous or asynchronous, and we can get into that. But how are you thinking about pitching to the application developers this interoperability?
00:08:33.610 - 00:09:28.312, Speaker B: How are we thinking about interoperability? Yeah. So at sovereign Labs, as we're building sovereign SDK, initially liquidity was a major problem for a lot of our users. So we, for our Celestia deployments, we started work on an IBC integration similar to regular IBC bridges. Sovereign SDK roll ups that are deployed on Celestia will have IBC connections. Hopefully in time, we think we can have IBC connections to sovereign SDK roll ups on bitcoin. And the way it works is that in a regular IBC bridge, you validate the signatures of the base blockchain, like base blockchain validators. And in a sovereign SDK rollup, if you're running on Celestia, you run that same verification, which I think Conor has worked a little bit on to do it in ZK.
00:09:28.312 - 00:09:53.410, Speaker B: And on top of that, you run a snark verifier that enables you, or the optimistic lite client, to make sure you can get to the state root of the roll up. And once you get to the state root of the roll up afterwards, it's kind of like a Devx issue. You can integrate any type of bridge, you can integrate IPC, you can integrate hyperlane, any sort of those higher level bridging tools.
00:09:54.910 - 00:10:26.474, Speaker D: IBC is a spec. It doesn't force you to trust the validator set. What's nice about it is part of the spec is the definition of a light client. And there's two implementations that currently exist to implement the IBC lightclient interface. One is the tendermint consensus verifier, and the other is called the solo machine. And theoretically you can develop as many more of them as you want. You said you want to connect bitcoin roll ups with IBC.
00:10:26.474 - 00:10:48.212, Speaker D: You could do that. You can create some sort of bitcoin verifying thing that conforms to that software specification, and then you can do it. Same with Ethereum or any other chain. You can also upgrade it to somehow verify the state transition function. You could somehow upgrade that to verify CK proofs of correct execution. Or you could even add a delay and do fraud proof style.
00:10:48.396 - 00:11:22.768, Speaker B: So that's exactly what we're doing. We're using the light client like the Cosmos lite client that celestial already has. And on top of that, we're asking for like destination chains that are trying to bridge from a sovereign SQL up to verify the snark verifier on top of Cosmos litecoin. But I'm very excited about someone building a bitcoin SPV like client as a cosmos that adheres to the IBC spec. And in that way we can also bridge from bitcoin sovereign roll ups. That would be very cool in your.
00:11:22.784 - 00:11:38.320, Speaker C: View of roll up that wants to interoperate with the other sovereign roll ups. It has to run the lite clients of each of the roll ups that it's running in a sense, whether that's verifying a validity proof or knowing how to play a fraud proof game of that other roll up. Is that it?
00:11:38.860 - 00:12:22.478, Speaker B: So yes, if you're deployed on the same base blockchain, then you have to run. If you're trying to bridge from a Z Carlop, then you just have to run a single snark verifier and we have our whole blockchain succinct like Mina. So there is no much like machinery outside of this snark verification. And then we can aggregate the proofs of all all roll ups that live on the same Da layer. All the ZK rollups that live on the same DA layer. So with a single proof you can get basically a state root view into like infinite number of roll ups that live on the same da layer. If you are trying to bridge from like a fraud proof based like optimistic roll up on the same day layered, you have to run their lite client.
00:12:22.478 - 00:12:33.160, Speaker B: But that's why we kind of expect the hub on spoke model to work for optimistic roll ups and for ZK roll ups, they'll just be connected as in a mesh connection to all the other roll ups.
00:12:35.220 - 00:12:51.360, Speaker A: Awesome. Karna, thanks for joining us. I'm wondering if you can give us a little bit more about what you do at celestial Labs and what you're working on, because I think there's actually been a few breakthroughs just as of late that take a place that might be interesting to talk about.
00:12:51.750 - 00:13:28.376, Speaker D: Sure. I am substituting for Manav, who couldn't make it today, and he's a better fit for this panel. If this is a panel about sovereign rollups, but I used to work on Rollkit. I spent a year working on Rolekit, which is a sovereign roll up framework. And yeah, I don't know. Rollkit is a sovereign roll up framework which is compatible with the Cosmos stack. So you can use Cosmos SDK or other kinds of ABCI state machines to create sovereign roll ups on arbitrary DA.
00:13:28.376 - 00:13:35.592, Speaker D: Layers easily. Were you asking about new breakthroughs on that side or on the Celestia side?
00:13:35.656 - 00:13:39.968, Speaker A: On the Celestia side. That might kind of bolster what we're talking about here with soft Roblox?
00:13:40.024 - 00:13:44.380, Speaker D: Yeah, yeah. Let's see.
00:13:47.970 - 00:13:49.430, Speaker B: Pretty open handed question.
00:13:50.290 - 00:14:18.270, Speaker D: I'm just trying to. I'm just thinking if there's anything that has been done on the Celestia side to improve sovereign roll ups recently, there's been some stuff to improve non sovereign roll ups recently. The snark account stuff is there may be some utility for the SRus from snark accounts, but I think people are mainly excited about snark accounts for, like, settled roll ups. The non sovereign kind of roll up?
00:14:20.410 - 00:15:15.910, Speaker B: Yeah, like, since we don't, like, really look into the distinction of sovereign or not sovereign and, like, sovereign labs. It's funny, but, like, snark accounts, once implemented, will enable a lot of, like, all the TIA to be trustlessly transferred to the roll ups where, like, they can be used for any purpose because these roll ups are turing complete. So I think that's one very exciting development. On the other hand, there's lots of engineering improvements that happen that obviously don't get talked about because these are implementation details. But we've been working with celestial labs and, for example, we need to verify Celestia's data structures inside our ZK proofs to be able to build these succinct roll ups. And there has been, like, a couple of engineering improvements that, like, make our life way easier. So we're happy about that.
00:15:15.910 - 00:15:38.750, Speaker B: I'm talking about the authored signer for the blobs. The which authored signer like address of, like, the pay for blob. Like, the blobs sender address gets included in the blob as, like, the first part, small implementation detail. But on the engineering side, like, small implementation details help us a lot to move fast.
00:15:39.810 - 00:16:13.666, Speaker D: Oh, also, this may be something that we should talk about. Not on a panel, but I think I spoke with Preston and I asked him, how do you. Because you guys have to go through every blob, and you have to. For the blobs that are not relevant to the SRU that are in the namespace, you have to prove that they're not relevant to the namespace. And I think Preston told me that that was easier to do on bitcoin than on Celestia, which is a huge problem because we're trying to be the best chain to do exactly that. So we need to talk about whatever makes it easier on bitcoin. We need to bring to Celestia?
00:16:13.778 - 00:16:15.110, Speaker B: Yeah, definitely.
00:16:16.490 - 00:16:57.040, Speaker C: Yeah. I'm very excited about select personally, because at cartes we have this concept that we try to put forth called the cone of innovation. So since we are focused on an execution environment and computational scalability. Computational scalability makes less sense if you don't have a very good data layer to support real data, because it doesn't matter if you have a very good computer if you can only use very little amounts of data. So we see the design space of applications opening up a lot when you start to work with app chains and good execution environments. And you see like a data layer that can actually support like real amount of data, as in you have on web two.
00:16:58.460 - 00:17:08.640, Speaker A: Cool. How do you guys think about like governance. Governance for sovereign roll ups in terms of upgradability? How do users reason about that?
00:17:09.060 - 00:18:38.908, Speaker B: I think there are two models. One of them is if you're, if you want to, like if you want to upgrade your application, you deploy a new version of your application and slowly your users that want to get onto the new version move their assets out of the previous version and move on to the new version. Another path is to encode an automatic voting based upgrade process into the main state transition function of the roll up, so that all of the bridges can update the view of the roll up binary. Basically, we've seen demand from users for both. And I think as people deploy these roll ups more and more in production, people will come with more interesting, more complex ways to do these upgrades that fit their business model. But those are the main two things that I'm seeing, see for now, and one cool idea that we had, we will only implement if there's actually feature request work. But you can imagine a scenario where if there's an issue with some of the business logic of the application, a Security Council could revert the roll up to being only of transferring assets, rather than all the business logic functionality that's inherent to the roll up.
00:18:38.908 - 00:18:48.480, Speaker B: And so at that point, people can only use roll up to exit. So that like, that's one like crazy idea that we had that we have to analyze more. But those are some ideas.
00:18:49.820 - 00:19:24.946, Speaker C: Yeah. My understanding before, my understanding before coming to this panel was that roll ups, sovereign roll ups would fork through social consensus. So like, they would upgrade through hard forks. But if that's not the case, then I think, like, I agree with you on the options. You can either launch a new version, and that's in a sense an opt in upgrade, because users have to move their assets, or you can have the upgrade baked into the state function, the state transition function, either through a governance model or say a security council or anything else. And then that's in a sense an opt out method. Right.
00:19:24.946 - 00:19:36.780, Speaker C: Because you leave the application if you don't want to get upgraded with it. I think that's much better than forking through social consensus because I think social consensus is actually much more expensive than it looks.
00:19:37.640 - 00:19:59.600, Speaker D: Oh yeah. I think there's a gigantic difference between the roll ups that can be easily upgraded with social consensus and the ones that need some sort of vote because you have a trust minimized bridge to the base layer that's immutable or something. Gigantic stark difference between those two things. Which is why I still like to use the distinction between sovereign and settled roll ups.
00:20:01.060 - 00:20:42.402, Speaker B: Yeah. In any roll up, anytime that you start having bridges to the base blockchain or to another roll up, the moment you add like validating bridges, you have to have a model of like you can't use social consensus unless all the bridges somehow accept upgrading through like social consensus, which is hard to reason about because presumably the other roll ups are also going to be like, the other roll ups are also going to have some sort of bridges and they're also going to have to upgrade. And so you like, there has to be some. Yeah, like social consensus doesn't go too much with roll ups.
00:20:42.426 - 00:21:23.400, Speaker D: Unfortunately, the reason everyone says roll ups aren't real now is because it's like theoretically possible for, for a l two with an immutable validating bridge to the l one to fork away from that bridge and break it. So for example, arbitrum hard forking in such a way that all the Arb tokens and all the other tokens that were minted on there go to the hard fork. But then the eth is broken. And so the ETH that was bridged up through the original bridge goes to zero on the l two. Technically that's possible. No one's ever going to do that. So like roll ups are, or, sorry, rollups aren't real in theory, in practice they're very real.
00:21:27.940 - 00:21:44.740, Speaker A: Interesting. Okay, so, you know, we're all building for a future where we actually have applications on sovereign roll ups. I'm curious what you're seeing in terms of adoption of these frameworks and what types of applications are actually being built.
00:21:46.160 - 00:22:47.990, Speaker B: So we have a few users in the, we have a few derivatives exchanges being built on sovereign SDK because sovereign SDK can provide very, very low latency soft confirmations which in the case of derivatives exchanges becomes extremely useful thanks to like, the fact that we can also build roll ups on bitcoin. We have a category, we have a bunch of users. Straya open Labs bison building on sovereign SDK forks on bitcoin and derivatives exchanges bitcoin roll ups, Solana roll ups. One of the derivatives exchanges I mentioned about is building on Solana. And a few gaming and other like applications are looking into Solana roll ups just as an ecosystem wise, they want to be connected to Solana. And lastly, we're seeing people building SVM roll ups using sovereign SDK and moviem roll ups. So we're all over the place, to be quite honest, in terms of, because the SDK's main goal is to be one of the most flexible frameworks.
00:22:47.990 - 00:22:55.770, Speaker B: And so that leads to users from a lot of different ecosystems and use cases. But it's nice to see the momentum.
00:22:58.280 - 00:23:03.220, Speaker D: One roll kit user that I can shale is Astra, the new Stargaze roll up.
00:23:05.360 - 00:24:08.882, Speaker C: So thinking about the difference between sovereign rollups and settled rollups that I know you don't agree with too much, but I think good use cases for sovereign roll ups are those that are very big applications that a lot of people use, but they don't have to interrupt a lot, especially exchange assets with other roll ups. So say big games in which like, if you have some financial interoperability, that can be done by liquidity providers who live in that chain, but also live in like whatever other chain you want to exchange your money to. So I do like sovereign roll ups for those kinds of applications because as I said before, say, a World of Warcraft on a sovereign roll up doesn't have to pay the price to settle on another chain or to settle on a bunch of different bridges. Right? So I like those types of applications for sovereign roll ups, for other applications that have more need of interoperability and so on. I think settled roll ups are very good. So, for instance, we have a Cartesian. There's a very cool application that's being built called Rives, which is an arcade game, a world arcade, decentralized.
00:24:08.882 - 00:24:39.860, Speaker C: And you not only can play the games, but can also sell and buy cartridges. So you can program your own game, you can sell that to the protocol and then that would be available for players to play. I think that it would be a good use case for sovereign roll ups if all the games were there from the beginning. But this cartridge market makes it a better fit for settled roll ups, in which you can actually have a market that interacts with a shared liquidity of whatever your Canango bridge is.
00:24:42.640 - 00:24:53.090, Speaker A: Another open ended question. But you know, in a world where we have hundreds, thousands, tens of thousands of sovereign roll ups, how are you guys thinking about UX and uis for these different things?
00:24:54.270 - 00:26:00.562, Speaker B: So there are two limiting things in the current state of blockchain technology that's limiting UX across roll ups. One of them is that the consensus, like the time it takes, the time it takes these base blockchains to come to consensus, because that's always going to be a limiting factor of how fast these roll ups can communicate. And actually the bigger bottleneck at the moment is ZK proving latency. ZK proving for a roll up to communicate with other roll up completely trustlessly, you have to first publish your data on the base blockchain. The base blockchain block needs to be produced and then over that produce block. Block needs to be finalized, and someone needs to come in and prove that block. So until we see these latencies come down a lot, sending messages trustlessly between these roll ups will take quite a bit of time and will lead to inefficiencies.
00:26:00.562 - 00:26:43.110, Speaker B: But at the same time, we see that for a lot of users, for users that are not moving tens of millions or like billions, we do see that for the everyday user, the relayer systems, or like low security systems, like do help a lot. They do. Relayers provide fast messaging and so users opt into that quite often. So as long as we have the roll ups actually running in production and their throughput way higher than where they are now, I think the bridging issue, which is the main UX issue right now, will be elevated quite soon.
00:26:46.890 - 00:27:31.740, Speaker D: If you give everyone a standard to follow. Like IBC, which is a really complicated spec that has very, for the first few years of its life, had very messy UX and difficult to read code, it's worth it. It pays for itself over time. Because once there's a standard, even if the UX around the standard isn't great at first, it allows someone to come in later with a little bit of software engineering elbow grease, and build something that will knock everything into place. You can see this now with the skip API. IBC is nothing bad anymore. Now you can go to IBC Dafun and seamlessly jump around cosmos chains and it actually feels very good.
00:27:31.740 - 00:27:47.060, Speaker D: It reassures me that creating the IBC standard was worth it and it will pay off. And UX is just a matter of time and a little bit of elbow grease.
00:27:47.480 - 00:28:34.604, Speaker C: Yeah, I definitely agree that UX is a matter of time. I think about UX in two main verticals. One is dev UX. So the UX of those built in applications that the end users are going to interact with. And I think for those UX, for the devs, there are a few things that help them a lot in their journey to build application. One is predictability of the so standards, good written standards, very well established APIs, also web tooling in a sense, so making their environments, the environments that they interact with as close to the ones they're used to as possible, allowing them to have many layers of abstraction and convenience so they don't have to rebuild the wheel every time they can import and reuse code that was built by other people. So I think there's a lot of work to be done there.
00:28:34.604 - 00:29:29.380, Speaker C: In the developer UX. I think for the end user Ux, it's often a trade off between centralization and UX. So for the paranoid user, I don't think we have to give them that much Ux. I think for the, say, naive user then I think we have things like chain abstractions, you have things like infuria and so on for Ethereum. And I think what we have to work on is to make sure that those centralized actors for providing you with UX are as, in a sense punishable as possible, so as transparent as possible, as so likeable as possible. But I do think it's very hard to provide the UX that you're used to in like say normal world without making some trade offs in the centralization spectrum.
00:29:30.000 - 00:29:41.430, Speaker A: Yeah, definitely. Okay, so Connor mentioned, like maybe roll ups are not real. Jim, like, what is the most common misconception that you would like to clear up about sovereign roll ups?
00:29:42.450 - 00:30:48.720, Speaker B: What's the most general misconception? Before I answer that question, I do want to come back to the previous question of user experience because I think it's super important. I do think I just wanted to share one excitement from my perspective. I think wallets were a huge distraction, like point of like pain for lots of users. But thanks to like a lot of blockchains adopting, I'm forgetting the team's name, like the social login type systems where like you're able to generate a private key on the browser for the application that you come in later if you want to bridge to another application, you can export your keys and like put them into another preview. For example, like preview. Like solutions are really making blockchain application UX not that much different from a regular web two UX. And I think that's where we should be striving on top of that, we've seen that with roll ups people are very okay with trusting centralized sequencers because in the worst case, if the centralized sequence is acting bad, you can exit.
00:30:48.720 - 00:31:41.682, Speaker B: So now we can give soft confirmations at the levels of web applications, which is another incredible user experience improvement, which I don't think we've seen the whole implications of. I think lots of web two developers will come to see this and build applications on blockchain technologies thanks to these improvements. The last thing is just sending messages. Async calls on Internet takes about 300 milliseconds or so right now on blockchains. On Cosmos it takes about 5 seconds on rollups it takes anywhere from 15 minutes for ZK rollups to a day or so for optimistic roll ups. And that will come down as ZK gets cheaper and ZK proven latency comes down and block times for base blockchains comes down. But bridging aside, we're doing really well on user experience front on all sides almost.
00:31:41.682 - 00:31:59.900, Speaker B: And the ZK's technology is improving so fast that in a few years I think that UX problem will also be solved. Okay, so about like the, what people like, what was the question?
00:31:59.940 - 00:32:09.044, Speaker A: I guess what's the misconception about like what sovereign roll ups are or the trade offs that application developers are making by choosing to do this?
00:32:09.172 - 00:32:43.820, Speaker B: Yeah, the biggest misconception from our perspective is that we don't see much of a difference between sovereign roll up and like smart contract roll up. Do you have a bridge to the l one or not? That's the main thing. And what we build in sovereign Labs sovereign SDK enables roll ups of both types. It's just that we don't need the smart contract to function out of the box roll up work as sovereign roll up and then if you deploy the bridge it becomes a smart contract roll up. So for us there doesn't need to be as much focus on a roll up being sovereign or not. It's a roll up at the end of the day and that's the biggest misconception that we're dealing with.
00:32:45.040 - 00:32:56.050, Speaker C: I think the biggest misconception that I see is that sovereign roll ups cannot interoperate with anything else and that's not true. But yeah, I think that's a very common one.
00:32:56.590 - 00:32:57.650, Speaker A: Yeah, for sure.
00:33:01.190 - 00:33:21.370, Speaker D: Biggest misconception about rollups. I think that they don't have a good definition. I think that it's like an ambiguous hand wavy thing is a misconception. I think whether or not something is a roll up is a very clear. Yes or no?
00:33:21.790 - 00:33:33.610, Speaker B: Would you not say that a roll up that posts data to another blockchain to inherit its security, both safety and liveness, is considered just like, by definition, a roll up?
00:33:34.310 - 00:33:35.982, Speaker D: Any chain that posts this data to.
00:33:36.006 - 00:33:44.584, Speaker B: Another chain, not state data to another chain so that it can inherit the full safety and liveness of another chain.
00:33:44.632 - 00:33:45.688, Speaker D: Yeah. That's a roll up.
00:33:45.824 - 00:33:46.160, Speaker A: Yeah.
00:33:46.200 - 00:33:47.980, Speaker B: So I think we have a definition of.
00:33:50.320 - 00:34:03.432, Speaker A: Cool. Okay, Jim, if you had a magic wand and you could wave it and fix one thing that would increase the adoption of Sodom robes or the performance of Sodom robes, what would that be?
00:34:03.616 - 00:34:07.522, Speaker B: Just shift faster, ship at insane speeds.
00:34:07.626 - 00:34:09.114, Speaker A: More engineers, more.
00:34:09.202 - 00:34:10.750, Speaker B: More cracked engineers.
00:34:13.170 - 00:34:35.470, Speaker C: I think I'd reduce the censorship. Censorship possibilities. I think a lot of the challenges that you have technically come from this idea that we have to reduce the amount of actors that can censor you and for how long they can censor you. I think if you start to reduce that, then you can improve a lot of the UX and a lot of the performance around blockchains.
00:34:36.890 - 00:34:49.710, Speaker D: The one thing that would do the most to accelerate sovereign roll up adoption is just for one really, really cool one to ship. And then once people see how cool they can be, a lot more people will be attracted to use this kind of architecture.
00:34:50.010 - 00:34:50.990, Speaker B: Absolutely.
00:34:51.690 - 00:35:06.860, Speaker A: So break out applications. We need more engineers, more developers working on applications for software. Cool. Okay. We're kind of bumping up on time. Do you guys have any closing remarks? No.
00:35:07.320 - 00:35:13.380, Speaker C: Thank you for having us. See you around. If you have any questions about Cartazi and so on, just meet me. I'll be around.
00:35:14.240 - 00:35:16.848, Speaker D: Yep. Thank you. Thank you for coming and thank you.
00:35:16.864 - 00:35:19.320, Speaker B: For the thoughtful questions. Thank you, guys.
