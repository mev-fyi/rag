00:00:01.880 - 00:00:19.674, Speaker A: And we're live. Welcome, everyone, to another workshop for the infinite space bazaar. I'm Josh from Celestial Labs, and I'll be hosting Ramin today. Ramin is an engineer on the celestial node team, but I'll let him do a more proper introduction on his own.
00:00:22.374 - 00:00:59.168, Speaker B: Hey, everyone. Yeah, thanks for having me. Yeah, yeah, Julian, everyone here today I work on Celestia node. There was a request for a little sort of demo webinar display of how to get up and running and building something against Celestia node, and I drew the short straw here I am presenting to everyone today, unprepared. We were just talking before, it's like, are you ready? Never ready, always ready. Same thing. But yeah, I mean, it's, you know, the node, Celestia's data availability node is your interface to sort of building whatever on Celestia.
00:00:59.168 - 00:01:22.904, Speaker B: So it's sort of the most, for better or worse, it is the interface that you use. Right. So it's the most important part of the developer experience when building something. So, you know, being shown the ropes and how to get up and running is pretty important. So hence Josh summoning me here today to, for us to give a little demo here. So I think the goal is just to sort of like step through it. Very informal.
00:01:22.904 - 00:01:56.044, Speaker B: We'll go through Josh's docs on how to get up and running on one of our testnets. I'll share my enormous screen and try and blow things up. So it's easy to follow along, and we'll just try and get set up, show you the ropes of how to sort of initiate the node, run a light node, get it starting to sync with the network, make some RPC requests. If we get that far, maybe we'll get ourselves some testnet, submit a blob, and then maybe we'll write a little bit of code, a very teeny bit of code, and then see if we get that far and we'll go for it. Yeah.
00:01:56.504 - 00:02:05.684, Speaker A: So this isn't a validator or like a consensus node, but a data availability node. And that is what data availability sampling, right?
00:02:06.224 - 00:02:38.704, Speaker B: Exactly, yeah. Yes. So I don't know how deep you've gone in these previous sessions with everyone of the different node types or the celestial network architecture, but you know, if, you know, you have consensus nodes, you know, they operate block building, finality, consensus transaction settlement. That's where our data is actually written to as a transaction. But we have this separate network. So we have two networks in celestia. We have the consensus network, the data availability network, and we have this concept of a bridge between the two.
00:02:38.704 - 00:03:42.454, Speaker B: But then additionally, if you've read the white paper and everything, a huge part of the security of the network is, comes from the enablement of many people to run what we call these light nodes. So data availability sampling, to make it very short, means that lots of these light nodes are easy to run. They're quite light, hence the light in the name. But the idea being that they are continuously sampling data and verifying if there is some sort of data withholding or data integrity attack, hopefully not in trouble if that's not an official term, but yeah, verifying that across the network. But the side effect of that is that having one of these light nodes is essentially your account, if you like. And then as a developer, if you're trying to build something, you need something to operate against as you interact with the network. And so yeah, the best way to do that is you run a light node yourself.
00:03:42.454 - 00:04:15.894, Speaker B: It has its own API that you can speak to over RPC. And then as we'll show as we go through the docs, you'll have an account with some keys on your machine that you provision. That's where your balance for submitting blobs or submitting transactions to the network are broadcast from. And that's why, going back to the beginning, what I was saying, that is your interface essentially, and spinning something up to build something, you're also sneakily, you're also sort of enhancing the security of the network. So you get two for. It's pretty nice.
00:04:16.954 - 00:04:24.594, Speaker A: Awesome. I'm excited to learn some and post some blobs here, but I'm excited for the code demonstration too.
00:04:24.754 - 00:04:46.430, Speaker B: Okay, yeah, let's see. We'll see. Anything else you think we should cover? Like. Yeah, anything else about the node before we sort of dive into running through the tutorial? That is important to point out for folks or. Yeah, what else do we want to achieve here in terms of an intro to celestia node? Like, what else is important to know?
00:04:46.462 - 00:04:53.074, Speaker A: Do you think about like high level, what you didn't cover? And I can't really think of much.
00:04:53.574 - 00:04:54.434, Speaker B: Okay.
00:04:56.214 - 00:05:03.154, Speaker A: I guess you mentioned a bridge, like a bridge between the two, like the data availability census network. How does that work?
00:05:04.294 - 00:05:53.384, Speaker B: Yeah, essentially it is the celestial node running in a different mode, if you like. And basically it's almost, I don't want to use this word because it implies other things, but essentially it is a relay between the two, the two networks in terms of, you know, a block gets settled, there's some data it gets, you know, that gets broadcast back through the bridge node, where the bridge node is making standard GRPC requests to the consensus network versus them gossiping over peer to peer. And then once that data is retrieved from the consensus network, it is then gossiped out to the DA network. So it's sort of a peculiarity of the architecture that we will eventually get rid of. It was more just an easy way to bridge them. But it's a side effect. Well, there's two things really.
00:05:53.384 - 00:06:32.184, Speaker B: It's a side effect of adding two peer to peer networks. So, you know, on the DA side it's lib P two p. On the consensus side it's like sort of vanilla Comet BFT, but yeah, and it's sort of a Conway's law kind of thing too, where you can sort of sense that there were sort of like two software projects that needed to get stitched together. And the architecture reflects that. If anyone's familiar with Conway's law, which is basically your software architecture, will be a mirror of your team communication architecture. It's kind of the best example I've ever seen of that being actually the case. It's like, oh yeah, there's two different teams there.
00:06:32.184 - 00:06:58.360, Speaker B: Yeah, that's how it was conceived. So there you go. Yeah, that's something that is like buried in the literature that isn't necessarily obvious to everyone, is we have these two networks and they have this sort of interplay between them. It's important to understand, especially as a developer, what's going on there. Yeah. And we'll see. When we start the light node, there is a flag that everyone on their first spin up forgets to add.
00:06:58.360 - 00:07:07.484, Speaker B: And then you submit some state and it says cannot do it. And you're like, why? You're like, ah, you need to speak to consensus node. Yeah, so we'll go.
00:07:07.864 - 00:07:26.132, Speaker A: And I guess on that note, Gaurang Patel asked maybe general architecture networking overview. You mentioned lib p two p. So what is lib p two p and how does it fit in? And then why are there separate networks? Kind of already answered, but yeah, I.
00:07:26.148 - 00:08:20.666, Speaker B: Mean lib p two p from protocol labs. It's like a general sort of networking toolkit. I believe Ethereum uses it like almost every sort of peer to peer application is using that as a set of libraries. It's very well tested, very rich, very robust in terms of all the different types of like peer to peer networking topologies or stacks if you like, kind of waffling a bit, but that it implements. So it essentially uses dynamic hash tables like the DHT from like BitTorrent, but uses that as a general purpose library for you to use. So essentially if you're building a peer to peer network, very unlikely that you need to do something completely undifferentiated like using HTTP or something at this point where you're like, you don't need to implement it from scratch. And there are these libraries that are very good for doing it.
00:08:20.666 - 00:09:11.416, Speaker B: And in terms of data interchange and everything, things like bitswap, which we use for gossiping data around the network, is very well tested, robust in production. On many other projects, it could take years to implement it from scratch yourself. That's one side of it in terms of we're building this data availability network. But then yeah, in a similar vein, leveraging the cosmos SDK for all of the consensus network, they just happen to have their own, they didn't use lipid p two p or you know, they have comet bft which is their own thing. And in a similar vein, trying to modify that to speak to the DA network might have been a many years undertaking, which yeah, would be a very fun research project. But our sort of internal metro after Mainnet was like we have to ship, you have to ship. So.
00:09:11.416 - 00:09:39.600, Speaker B: Right, so like, yeah, having the bridge as a stopgap just to get to mainnet, prove the network, get things going. But yeah, there is ultimately a goal to reconcile and merge those two networks at some point. How we do that, whether it all goes to comet, whether comet gets ripped out. But it's a serious undertaking and it's working right now. But it's definitely. Yeah, sounds like. Yeah, I guess my put, it's a huge project, a huge undertaking.
00:09:39.600 - 00:09:58.644, Speaker B: Lots of unknowns I guess. Yeah. The two networks isn't for any reason other than it was the quickest way to ship and it works. There isn't like oh, there is some security reason or like some reason related to the design of the network that requires the two. It just happens. It's like implementation detail I guess.
00:09:59.504 - 00:10:03.684, Speaker A: Yeah. Honestly, it really confused me at first when I was getting into this world. So.
00:10:04.174 - 00:10:05.158, Speaker B: Yeah, yeah.
00:10:05.326 - 00:10:13.514, Speaker A: It's interesting to know that it was actually just, it's not really that necessary as much as it was just the cleanest path forward.
00:10:13.974 - 00:10:14.542, Speaker B: Yeah.
00:10:14.638 - 00:10:18.114, Speaker A: You mentioned bitswap. Is that used on slushy node as well?
00:10:18.614 - 00:11:05.820, Speaker B: Yeah, yeah. And the bishop's not something I can speak with too much expertise about. It's just, it's a very fast way because if you imagine like we're a data availability network. So the core sort of primitive that we're passing around is blobs and like the segments of the erasure encoded data. So that needs to get gossiped around. And Bitsoft is, as far as I understand, without being too expertise in that protocol is the fastest way to collectively gossip it around the network such that it's queryable and retrievable. Because when we do, gosh, we're getting deep into it now, but when we're doing reconstruction of the square data square, which, please don't ask me to go deep on the data scans, but, you know, there are, there are parts that you have to get from around the network and you're reconstructing it or like trying to reform it.
00:11:05.820 - 00:11:36.524, Speaker B: And so you have to like ask around the network, hey, have you got this piece? Have you got that piece? And yet, at least the way that that data is passed around as the, you know, a new blob comes in or a new block comes in and it gets gossiped around the DA network. But no, I don't believe it's used for querying too. But yeah, it's a standard way of reliably gossiping this data in a distributed fashion, if you like. That is well researched and implemented and yeah, you want to use, but you don't want to build it yourself because you'll screw it up.
00:11:36.984 - 00:12:06.544, Speaker A: And I guess to kind of reel back in the separate networks, I feel like it's also important to understand that although there are two networks, they're actually really one network, meaning all the things that you post to the data availability network end up in a block which is passed around by the consensus nodes. So it's not like there's two different blockchains running or anything. It's just a matter of how the whole entire system works. Yeah.
00:12:09.004 - 00:12:30.304, Speaker B: I would sort of classify it when you do sharding or any sort of key space design. Yeah. There is one logical network, which is Celestia, the network. There are two physical networks implemented that make up that logical network, which are the consensus network and the DA network. Maybe that's one way to look at it. Yeah, that's a good point of clarification for sure.
00:12:30.604 - 00:12:40.076, Speaker A: Yeah, I feel like it can get kind of confusing. Yeah, maybe it's a good time to jump into running a node and.
00:12:40.180 - 00:12:41.340, Speaker B: Sure, why not?
00:12:41.532 - 00:12:42.944, Speaker A: Posting some blobs.
00:12:43.724 - 00:12:44.732, Speaker B: All righty.
00:12:44.908 - 00:12:46.784, Speaker A: Maybe sampling something random.
00:12:50.224 - 00:12:54.604, Speaker B: We can try. All right, do you want to, is my screen up?
00:12:55.104 - 00:12:57.000, Speaker A: Oh, you got to share and then I'll edit.
00:12:57.072 - 00:13:28.116, Speaker B: Oh, am I not sharing? Okay, it's all good. I didn't realize, you know, I'm going to do one window at a time just to make it sane. And I'll switch around, possibly. So just for everyone who's following along, we're going to go through this. Run a node mocha testnet tutorial here. So if you wanted to follow along, this isn't actually the right one.
00:13:28.140 - 00:13:33.684, Speaker A: It's good as a developers or if you click.
00:13:33.764 - 00:13:56.312, Speaker B: Oh, yeah, yeah, totally. Here we go. This is what I was looking at. Yes. Submitting data. So is it this? Okay, we're going to need this later, but this is what we're looking at. Sorry, I was getting a different consensus note earlier.
00:13:56.312 - 00:14:00.404, Speaker B: Yeah. So this is what we're going to go through here. Maybe I can put. Should I post it in the chat?
00:14:03.934 - 00:14:05.914, Speaker A: Okay, perfect. Now that works.
00:14:06.734 - 00:14:44.954, Speaker B: Oh, that's okay. But yeah, and then, yeah, we're going to run through this. I am not going to share this because my screen's big. I'll just switch to my terminal, but we will run through this. So I think if I stop square sharing, switch to my terminal here, that'll be saner. So start with, I've checked out Celestia node from our main celestia node, repo. I've checked out to the tag the released version v 13 three, which is the current version, and you can see the sort of file structure.
00:14:44.954 - 00:14:45.794, Speaker B: Oh, go on. Sorry.
00:14:45.834 - 00:14:48.074, Speaker A: Or increase your font, I guess, in that terminal.
00:14:48.154 - 00:14:58.086, Speaker B: Oh, yeah. Okay. How's that, better? Is it better if I make this smaller? How's that work?
00:14:58.270 - 00:14:59.394, Speaker A: Yeah, that's better.
00:15:00.214 - 00:15:00.994, Speaker B: Yeah.
00:15:01.654 - 00:15:03.754, Speaker A: The bigger the better, I think.
00:15:04.374 - 00:15:08.758, Speaker B: Okay. Yeah. How's it looking for everyone? Yeah, pretty good. Okay.
00:15:08.886 - 00:15:09.594, Speaker A: Yeah.
00:15:09.894 - 00:15:21.444, Speaker B: Yes. So one thing I always do when I pull it down is just run the test just to make sure I've got a good thing. But you don't really need to do that. Yes. If you're getting started. Oh, go on.
00:15:22.464 - 00:15:25.864, Speaker A: You're saying it sounds like good practice. That's not something that I've done, so.
00:15:26.024 - 00:15:59.158, Speaker B: Oh, really? Oh, yeah. I just noticed, you know, whenever I check something out from. Certainly from like the main, it can be broken or something, but yeah, I always like to run the test because. Especially because I work on it. So I often feel like I work on something and then it's all broken and I'm like, oh, it can't possibly be my fault. So if you run the test before you screw everything up and you know, and you know, you really did screw everything up, it was your fault. Whereas, yeah, if you haven't run the test, you're like, must be someone else's fault.
00:15:59.158 - 00:16:24.374, Speaker B: But anyway, let me open a new tab. So the main, the main thing when you do you want to do when you're here is just run, make, build, building celestia, and that will build out a version of the binary for the node. Might take a second because I'm on a slow computer and I'm running the tests, but once that's done we'll be able to do some stuff.
00:16:26.354 - 00:16:29.850, Speaker A: Sorry to do it again. Can you zoom in like, oh, it.
00:16:29.882 - 00:16:30.934, Speaker B: Doesn'T retain.
00:16:32.754 - 00:16:33.894, Speaker A: So it's big.
00:16:34.314 - 00:16:35.134, Speaker B: Yeah.
00:16:39.954 - 00:16:44.602, Speaker A: I feel like it's like adjusting back to the lower font.
00:16:44.738 - 00:17:00.650, Speaker B: Smaller font. Yeah. You know what it was? I opened a new tab, that's why, and it sort of reverted, I think I did have it built before. I thought it'd be nice and quick just to run the build.
00:17:00.802 - 00:17:05.570, Speaker A: Good. Doesn't take very long. So this is building the binary and.
00:17:05.602 - 00:17:46.170, Speaker B: Then yeah, once it's built we'll have a built binary of node in the build directory, which. Yeah, I'll show you here. So, so you'll see we have Celestia there, so I can do build, it'll give me some output which is e, there's the node. So automatically you're dealing with it as a CLI tool. I know in the instructions it says make, install. I kind of never do that, and maybe that's just a side effect because I'm always on different versions and working on it, so I never really install it, but yeah, I don't, I don't know if you have a comment there. Do you always install it or do you always just do?
00:17:46.362 - 00:17:56.854, Speaker A: Yeah, I usually just install it. So then I can use Celestia as the command instead of like living in that directory. And the build Celestia.
00:17:57.314 - 00:17:58.574, Speaker B: Yeah, I see.
00:17:59.154 - 00:18:06.274, Speaker A: So yeah, it just makes honestly the commands a little cleaner. That's like the best real reason I can give and easier to.
00:18:07.454 - 00:18:48.088, Speaker B: Totally. So that shows you can verify, like there's the version commit, we could go to GitHub, if I was sharing my whole screen, we could go to GitHub and see what the last commit was. Reconcile that against the last tag and the commits there you can see we built it just now. You can see I'm on a juicy m version Mac. So yeah, so at this point the main thing to do is you need to set up your accounts, your keys, and account for the node. I'm going to give you a shortcut here. So the default location for this is in your home folder against the celestial folders.
00:18:48.088 - 00:19:21.624, Speaker B: And the main thing is to communicate is that we have two testnets, arabica, mocha and then there's mainnet. So if you are on either of these networks as you're doing this kind of stuff, it will be appended to the name of the folder here. But I don't know when the last time I used arabica was. So I'm just going to get rid of that. Let's see. Oh, I've got an arabica eleven. So I've got nothing there.
00:19:21.624 - 00:19:52.242, Speaker B: So I have a mocha set up before that's already synced to head and everything and has some tier. So I'm going to leave that as is and just like step through getting set up here with arabica. And then as we get to sort of trying to show some commands, I'll move to mocha. So yeah, so maybe I'll try and do the make install just to make it clearer because it matches because I normally do the build Celestia and keep it that way. So because I'll throw it away after an hour or so of work one evening. But yeah.
00:19:52.398 - 00:19:55.134, Speaker A: And then this will put it into your go bin.
00:19:55.674 - 00:20:14.370, Speaker B: Yeah. Okay. So now I can save which Celestia got it there. I can do celestial version. So now obviously I'm not doing the build so I'm trying to make sure it's the one on the path. And let's see, that was 13 three, same one built today, same as this. Okay cool.
00:20:14.370 - 00:20:34.792, Speaker B: So installed. I'm not confused about which binary I'm using now. So that's good. So do you always say Celestita? I always type Celesta instead and that's like I think of like mamacita or something like that. Yeah. So let's see here. So let, so here's what we do.
00:20:34.792 - 00:20:58.450, Speaker B: We're going to initiate a light client or a light node. So the main, this is essentially the command for it. So let's just light init. So init, yeah. I think everyone here is a builder computer program. But initial, initialize, it's basically set it up and the main thing that you need to ensure you're adding here. So if I do this without anything, it will do a main net initialization.
00:20:58.450 - 00:21:33.700, Speaker B: And if you've already done this before, meaning you have one of those folders in your home directory in the default location, it will basically just say, bro, I've already got one, nothing more to do, it's initialized, blah, blah, blah. So you'll see that's very different to what we're about to do, which is now I'm going to do light in it on network Arabica. You saw I deleted those folders. Now we get slightly different here. So here you go. No keys, found, new key, generated key name. Here's an address and here's something you should never share on the Internet.
00:21:33.700 - 00:22:08.186, Speaker B: But for now we're on, if someone on the stream wants to grab this and run ahead and maybe give it some testnet tier and do it all, go for it. But yeah, so now you can see we've got this, it's your responsibility to say these, your recovery words. But yeah, now the node is initialized and the next command for it is just the start. Right. And that will start the light node. So this is going to now. Oh, what? Oh, it's because I've already got one running.
00:22:08.186 - 00:22:47.940, Speaker B: Let me, let me just stop this guy back here. I can do it. Yeah, yeah. So you know, so there you go. So now it's run up, you see, so when we were talking about Lib P two P earlier, this is this multi address format that you see, which is something they have, which is, you know, you can see it's IPV four, which is the transport, the IP TCP is protocol there, the port like, and this is so in the DHT network, this is the node ID of myself. Like you don't need to know about this, but that just shows you what's going on. So what we're doing now is essentially doing address to say that again, that's.
00:22:47.972 - 00:22:52.076, Speaker A: Different than the address of the, like the actual like public key of the node.
00:22:52.100 - 00:23:13.814, Speaker B: Right, right, yeah. So this is the address of the node as a peer to peer node in the network, not you as a user, I guess, on the network, which is an identity attached to your key from mnemonic. Yeah. So how would you describe what's happening now, Josh?
00:23:14.874 - 00:23:36.614, Speaker A: So right now, yeah, I mean what I'm seeing is that it's sampling old headers and it's basically catching up to the, like, to the tip of the chain. And it's going pretty quickly though. So I don't know how many blocks Arabic has on it, but it probably 1.6.
00:23:36.954 - 00:23:40.346, Speaker B: Yeah, earlier I did it, left it.
00:23:40.370 - 00:23:41.814, Speaker A: Running, it would sink.
00:23:42.194 - 00:24:15.682, Speaker B: Maybe, maybe. So, yeah, there's two things going on. It's doing an initial block download, which I don't know if we call it IPD in celestial, but we call it that in bitcoin, which is, okay, you need to sync to network head, download all the data. But what's interesting there is, it is also as data is coming in it is sampling headers. So that's what we alluded to earlier, is that when you start one of these light nodes. Yes, it's pulling down all the data it needs to have the history of the chain. But it's also, as those are coming in sampling, which is that security aspect we were talking about earlier.
00:24:15.682 - 00:24:40.522, Speaker B: In these logs spinning by here you will see both things happening. Let me split this up. So make that smaller. So we've got all these additional commands here. We've got that one. What's another good one to show?
00:24:40.618 - 00:24:45.158, Speaker A: I like you could show the sampling stats. I think that might.
00:24:45.346 - 00:24:48.486, Speaker B: That's what I was going to do. I need to do node store, right?
00:24:48.670 - 00:24:55.474, Speaker A: Yeah, soon you won't have to, which is actually good ux improvement.
00:24:55.934 - 00:25:41.324, Speaker B: Yeah, this sucks, but yeah, essentially every time you make one of these commands, you do have to reference the folder where the keys and the settings are. So before we jump to that, let's just have a look at these available commands. So each one of these in node world is called a module of kind and each one bundles or bounds some type of functionality. So blob, which is what this is all building up to, is submitting blobs. And so the mo of the celestial network, it's data that you share. Bridge node, which we alluded to generate some auto completion for your cli das. Data availability sampling, which we'll mess around with.
00:25:41.324 - 00:26:07.456, Speaker B: So full and light along the bridge are the three sort of node types. So we saw earlier we were in light. So what happens actually if you do that? You do give you some additional commands. Celestial light config remove init start. So we used init start. We actually do need to do auth admin. So this is a neat one there, which you'll need later on as a developer, which is.
00:26:07.456 - 00:26:30.592, Speaker B: This generates you a JWT token for making commands. Yeah, making requests to the RPC of the node. You also have the ability. So if you leave off that last command, it's a little noisy, but you'll see that there's different permission levels here. Read write admin. I, as default was do admin because I'm naughty. It allows you to do absolutely everything over RPC.
00:26:30.592 - 00:26:31.028, Speaker B: But we.
00:26:31.056 - 00:26:37.484, Speaker A: Yeah, I guess to clarify, that's also different than the private key for a public address, right?
00:26:37.564 - 00:27:18.064, Speaker B: Yeah. So this is for you as a client connecting to Celestia node, wanting to make requests and the authentication will happen over the authorization header, which if you've got a client you won't need to know about. But yeah, that's how you get some admin keys. So let's go back to where we were. Okay, that's pretty cool. So that worked. Do you use JQ a lot, Josh?
00:27:18.844 - 00:27:23.100, Speaker A: I mean, I like it. I don't actually use it enough though.
00:27:23.292 - 00:27:35.734, Speaker B: Me neither. Me neither. So, so here's an example. Like we're making RPC requests. That's what this is about. We've made one. So we're using the DAS module, which is data availability sampling.
00:27:35.734 - 00:28:16.554, Speaker B: So if you join any sort of like celestial node GitHub issues or any of the core devs calls, people will call about Das, dassing, Dasa, Das. It's kind of a internal odd word that isn't a real word, that we've all sort of internalized Dassing's data availability sampling. So what we said earlier, like what Josh pointed out, is that we're sampling headers. We're also catching up with initial block down so you can sort of see the network head height, head of catch up. So we're running these catch up jobs that's trying to get the old data, sample it, and actually store it to get us up to speed here. So each time we run this, we should see these numbers change. So what are we on? Head of sample chain.
00:28:16.554 - 00:28:31.450, Speaker B: Head of catch up. 507, 757-5501, if we go back. Where is it now? Yes. So it's going pretty fast. Like you said, it wasn't going that fast earlier. Maybe that's because on mocha. Mocha is definitely not as fast as this.
00:28:31.450 - 00:28:36.534, Speaker B: But why is that, Josh? Is that because there are lots of developers are on mocha, like actually running things?
00:28:36.914 - 00:28:59.744, Speaker A: I think that's the real reason, yeah, I think there's just more data and more transactions that need to be synced. Sampled. And I guess it's also maybe important to point out that although it's going back and sampling, it's also still receiving the new network headers. So occasionally there will be a log here, I mean, every like 15 seconds or so.
00:29:00.444 - 00:29:01.944, Speaker B: Let's see if we can get one.
00:29:03.324 - 00:29:05.784, Speaker A: And it'll say that. Receiving.
00:29:07.084 - 00:29:11.104, Speaker B: Yes. Oh, new head. There you go. Right.
00:29:15.124 - 00:29:23.784, Speaker A: Yeah, new network head. It's hidden in all the other ones, but yeah, it's not like it's forgetting about the new blocks, basically. It's still sampling.
00:29:24.124 - 00:30:03.014, Speaker B: Yeah, I think that's a great point to point out. Yeah, yeah. It's not just waiting and going up to speed and then we'll be there. It's like in parallel, like getting new stuff and sampling in the background. So that's what all these concurrent, concurrent workers are. So if you're running locally and maybe one part of your application requires the chain to be synced in your code, you could hit the das module, sampling stats, look for this catch up done false, and be like, okay, if we need to do something, wait for that to be true, because it could be the case. There's something you're waiting for, maybe some state or something to come over the network and you don't want some of your operation.
00:30:03.014 - 00:30:26.504, Speaker B: Maybe it's just even, it's like a toy application you're building that's waiting for data to. To be up to date. You don't want your code to run so you could write a polo that says, okay, we spun up a node. Is our node ready? Match against that. There's one sort of little piece of developer, something you could do. It's like there's an endpoint, there's a module, and you can see if catch up is the end of story.
00:30:27.844 - 00:30:32.384, Speaker A: I think you can also sync from a trusted hash rate.
00:30:33.404 - 00:30:39.060, Speaker B: You can, yeah. Currently in an issue.
00:30:39.132 - 00:30:53.704, Speaker A: But yeah, I know it works because I've used it with Viet, sync some things quicker. But that's also a good way. If you're running on mocha and you don't want to really wait for it to sync everything, you can just use a trusted hash and sync from that point.
00:30:54.244 - 00:31:12.786, Speaker B: Yeah, it's documented in an issue because there is a bug. Right. There's some case where I think it syncs on a new node, maybe like if you. If you have no existing state, it works, but if there's any existing state, it just says, I've already got some, I'm not doing it. It's something like that, right?
00:31:12.850 - 00:31:13.570, Speaker A: That sounds great.
00:31:13.642 - 00:31:29.834, Speaker B: Yeah, yeah, something like that. Okay, so let's go back. Let's look at a few others. State is a. State is a good module. There's a lot of good stuff in state. So, like, here's a good one.
00:31:29.834 - 00:31:54.422, Speaker B: Let me make this wider, a bit long, maybe. We say account address is a good one, right? Oh, so here we go. Perfect. This is, this is what we. This is what we want. This is what we alluded to earlier, right? So they. Do you want to give it an explanation, Josh?
00:31:54.478 - 00:31:55.326, Speaker A: Oh, you got it?
00:31:55.430 - 00:32:05.414, Speaker B: Yeah, I got it. All right, so there you go. So node is running without state access. Run it with core IP. So this is what we're talking about earlier. Like, everyone runs into this and. Is that.
00:32:05.414 - 00:32:53.608, Speaker B: Yeah, you spin up the node, you're ready to make a request. Do something, but essentially the light node or the node beyond like the actual data that is in the DA network is arguably stateless of a kind in terms of state from the consensus network. So you need to configure it to speak to a consensus node to be able to like access states. So in this, in this instance, it's trying to look up a account address for my private key and figure out, you know, you know that. But yeah, as we get further along in this, we're taking a while, but when you submit a blob, that blob will need to be written as state back to the consensus mode too. So. And let me try and find a radical consensus node.
00:32:53.608 - 00:33:31.224, Speaker B: So if you go back to the. Do you have one handy? Consensus node, maybe RPC? Did you have one handy for me? Yeah. So what we'll do here, just keep going. So if you remember, we started the light node with P two, P network. What we need is core IP. IP is a bit of a misnomer because it doesn't have to be an ip.
00:33:38.444 - 00:33:45.744, Speaker A: Actually flagged up. I'm just going to test it real quick and then send it because.
00:33:48.404 - 00:34:01.940, Speaker B: See if this works. Yeah.
00:34:02.052 - 00:34:10.464, Speaker A: So we can use validator dash one. Send it in the chat.
00:34:15.574 - 00:34:49.954, Speaker B: Brilliant. Okay, so I'll be back here. So start it with the core ip. You'll see we started up correctly there. And now I should be able to rerun this command of the state module account address. And we didn't, we didn't keep a log of it, did we? But you'll have to trust that this was actually the, the address that we had here.
00:34:51.534 - 00:34:55.718, Speaker A: The log is up there somewhere, but yes, can be.
00:34:55.806 - 00:35:13.412, Speaker B: I might not have that much history, but. Yeah. Yeah, so that's, that's our address and I think balance for address, I think, right? Yeah.
00:35:13.428 - 00:35:16.692, Speaker A: And I think that'll give you, I.
00:35:16.708 - 00:35:19.492, Speaker B: Should say we have zero t. I.
00:35:19.508 - 00:35:25.664, Speaker A: Think if you run that without the address, it'll also just fetch the address that from the node that's running.
00:35:27.324 - 00:35:36.004, Speaker B: Let's see, what's the address? I thought it wanted the algorithm.
00:35:37.784 - 00:35:40.912, Speaker A: I feel like there's another one for the balance of your node.
00:35:41.048 - 00:35:57.018, Speaker B: I think you might be right. Yeah, I think just balance right. Maybe that was it. This is. Yeah, for checking other addresses too. So maybe balance just works. There you go.
00:35:57.018 - 00:36:28.544, Speaker B: You've got a few options. Yeah, there you go. So you know what, I'm not showing my whole screen, but. So this is a good point if you wanted to. All right, so if you wanted to actually get some testnets here, you do it through the celestia discord. So there is the room there, arabica faucet. You can go in and you, you make a request in the chat, which is like request address like this.
00:36:28.544 - 00:36:35.380, Speaker B: And then you will eventually get some. I'm going to go send myself some now and then we can, yeah, there's.
00:36:35.412 - 00:36:46.224, Speaker A: Also, I think it's good to point out, I guess for rabbit hole at least there's also a web faucet. Oh there is, yeah, just drop that in the chat too.
00:36:46.644 - 00:36:47.504, Speaker B: Excellent.
00:36:50.094 - 00:36:51.834, Speaker A: Might be quicker than discord.
00:36:52.374 - 00:36:53.154, Speaker B: Yeah.
00:37:04.734 - 00:37:09.726, Speaker A: And I've also got an address that I'll send you to. Check the balance of mine with your node.
00:37:09.750 - 00:37:30.574, Speaker B: Okay, cool. All right, sounds good. Oh, there you go. I got mine. So you can see there. We got it. So awesome.
00:37:30.574 - 00:37:35.914, Speaker B: Going back to the RPC guide, should we just try and submit a blog?
00:37:36.074 - 00:37:37.094, Speaker A: Yeah, why not?
00:37:37.514 - 00:38:01.354, Speaker B: Why not? So I'm just going to copy and paste the exact command you had there for the GM. Eleven namespaces. Do you have a good way to describe namespaces when you're submitting a blog?
00:38:02.414 - 00:38:26.234, Speaker A: Yeah, I feel like, I don't know, put me on the spot. I feel like it's just a way to think about how the data is stored. Like there's this massive library and you can pick whatever shelf you want to put on wherever you want to put your data or like in a folder basically. But the thing is anyone else can also put their data there.
00:38:27.094 - 00:38:41.154, Speaker B: I think that that's the important part to point out, right. Is that they're not private, not for you only like, yeah, it's like a, like a, like a, like a public filing system maybe is what you might, might say. Right.
00:38:41.194 - 00:39:11.614, Speaker A: So, and it's big enough where there are enough combinations in theory that like you really don't have to share necessarily with someone else a namespace if you choose it, I guess, well enough, but always a chance that someone will be able to post data there. So I guess if it comes to like your application logic, it's important to know that there might be other blobs that are posted to that namespace. So you have to only watch for yours.
00:39:15.474 - 00:39:46.568, Speaker B: Agree, agree. There's nothing stopping someone from like, yeah, just looking at, and we can switch this maybe. Yeah, looking at a block explorer, seeing, yeah, watching blocks come in, seeing a new namespace you've created and being, just being a shade person and being like, yeah, I'm going to write to your namespace. So yeah, you can't assume that everything in the namespace will only be yours. So that's something I think to bear in mind as you build something. Yeah, you need a namespace. You can't rely that.
00:39:46.568 - 00:39:57.132, Speaker B: It'll only be your data in there. So if. Yeah, so let's try this. So how did you guys come up with this namespace? Was it just like a random one for the documents?
00:39:57.308 - 00:40:06.308, Speaker A: There was a random one, and then I think the length of it was extended. Like the argument size was extended. So I just added junk at the beginning.
00:40:06.476 - 00:40:08.332, Speaker B: Okay, I see that's not going to.
00:40:08.468 - 00:40:26.324, Speaker A: Turn into anything in plain text, but I think it is important to point out that if you want to, you can basically convert from Hex or from text, like a plain text to Hex, to come up with a more clever namespace that will show up on the explorer.
00:40:28.344 - 00:40:42.004, Speaker B: And you have two options, right. You can do base 64 or Hex, where if you take some string and hex it and you have to add the ox beforehand, or if it's just base 64, it can be as is.
00:40:43.544 - 00:40:48.854, Speaker A: Yes, I think that's right. I haven't actually recently tried it on the CLI.
00:40:49.874 - 00:40:51.058, Speaker B: I haven't tried it on the CLI.
00:40:51.106 - 00:40:59.334, Speaker A: I'm going to also send the specifications for namespaces in case anyone is interested in diving deep on that.
00:41:01.714 - 00:41:40.604, Speaker B: Yeah, I would say, yeah, definitely. Me revisiting as part of all this and being like, okay, how can I come at this fresh, I think some explainer, you know, some sort of, I don't know what it is, some docs or something about namespaces. I feel like we, we brush right over it, like, oh yeah, and then here's your namespace. And you're just like, wait, what? Tell me, tell me more, tell me more. So there's always so arguably, yeah, this should submit. Hey, it worked. So we've used the blob module we submitted to this random namespace that Josh made up, and we submit some string text which is GM.
00:41:40.604 - 00:42:10.464, Speaker B: So what we've got back is a result object which is the height of the block, the block height at which that blob was submitted, and a commitment. The commitment. Oh gosh. How do you describe a commitment? That is a sort of, yeah, I didn't, I didn't prepare for pulling the data back. I was only thinking about some. But how would you describe the commitment? So essentially you need that to ask for the data back? Yeah, yeah, yeah.
00:42:10.504 - 00:42:24.084, Speaker A: Hash or like, dang. Yeah, basically like a hash for the data where you can use the block height and the commitment to find your data.
00:42:28.024 - 00:42:36.628, Speaker B: What I'm going to do now actually is I'm going to switch sharing and go to like selenium and we can look for our data maybe. How does that sound?
00:42:36.796 - 00:42:38.344, Speaker A: Sounds like a good idea.
00:42:39.844 - 00:43:05.302, Speaker B: Okay, let me try something else. Okay, so I'm not that familiar with selenium, but like, okay, if you remember we're on eradica. So you have this network chooser here. So we're in Arabica. We should be able to look up our, what do we say there?
00:43:05.478 - 00:43:06.954, Speaker A: Easiest to look up.
00:43:08.734 - 00:43:10.874, Speaker B: You can look up the namespace. Right.
00:43:13.854 - 00:43:16.074, Speaker A: It might be easier still look the address up.
00:43:16.414 - 00:43:34.492, Speaker B: Yeah, that's true. So what does that say? Decode or preview content? Gm I believe that's us. Let me look back at our address. Ended in seven a, three e. Seven a, three e. That's us. Three.
00:43:34.492 - 00:43:40.504, Speaker B: So you can see the sign here. This is the stuff we've done. So maybe if I submit another one, we'll see it.
00:43:41.564 - 00:43:50.036, Speaker A: I just submitted one to a namespace that translates to bizarre. There's a lot of data being posted though, so.
00:43:50.140 - 00:43:58.454, Speaker B: Oh really? Okay. I don't know if this does this live update or do I have to refresh? Is the page at selenium?
00:43:59.314 - 00:44:03.090, Speaker A: It doesn't. I don't actually know. I think it does, but there you go.
00:44:03.162 - 00:44:21.824, Speaker B: Yeah, didn't I refresh? But I just submitted another one there. So if we look at this, so you see we've done the pay for blob paper. Blob. Oh gosh. It's interesting. Yeah. That they convert the namespace back to the base 64 even though it's submitted as the, the hex.
00:44:21.824 - 00:44:24.904, Speaker B: Can we go back and see that blob.
00:44:32.324 - 00:44:37.172, Speaker A: Looking on the Arabica explorer or the mocha explorer for an Arabica blob?
00:44:37.348 - 00:45:19.704, Speaker B: Oh yeah, there you go. There you go. Yes, I mean, that's the gist of it. And then yes, getting, so we have this sort of RPC docs and you can see it mirrors here like the different modules we were talking about. So we did blob submit, but you can also get here. So with what you had from the height, the namespace and the commitment, which is that response we got, we can use that to request the data back. So that's why that response you get from the submit is important for you to retrieve your data later.
00:45:19.704 - 00:45:24.420, Speaker B: Are there any questions or anything besides.
00:45:24.452 - 00:46:18.942, Speaker A: There was a question to find it from Goblin. John. Goblin, John, I guess are you able to run a note on an iPhone and the answer is yes, with the caveat that it's more of like a demo integration and it's a version like it's at this point quite a few versions behind. I'm using my camera. My phone is my camera, but yeah, I can get it running online. I think you'll need an Apple developer account to be able to unlock your phone. Actually, Romine, you might know more, but to be able to run your own custom software from Xcode on the phone, the setup is pretty janky, to be honest.
00:46:18.942 - 00:46:26.194, Speaker A: But if you're familiar with Xcode and willing to get your hands dirty a little bit, it doesn't take too much except for having that account.
00:46:28.334 - 00:46:57.570, Speaker B: Yeah, I guess the point being it is not released in the App Store that you just download. So it's as though you can download the source set up in xcode and side load it onto your phone as though you were a developer developing an app. Therefore it hasn't gone through App Store review or anything that's on the iPhone. There is a. I don't know if it's an Android version or like folks running Linux on their Android devices on another os that has a light node too. But I'm not an Android, I'm anti Android.
00:46:57.762 - 00:47:25.264, Speaker A: That's also kind of jank to get set up. Okay, so like you can do it. You'll have to keep like the terminal running probably. I have a guide on that that I made about a year ago. So it's a little outdated. I haven't gone through it recently since I had it running iPhone. But you'll basically use like an emulator for running Linux emulator.
00:47:25.264 - 00:48:04.264, Speaker A: It'll basically be like a container for that. And yeah, it'll run, but there's also a package called Vimana. I think it might be a little bit outdated maintenance wise, but that's basically like a quick install, like the way that you would install an NPM package. It allows you to run a light node that way. But the real good answer is there's no way for people to just download this onto their phone from an App Store yet. Soon. At some point yet.
00:48:04.764 - 00:48:39.354, Speaker B: Yeah, yeah. And we have some like growing diversity of data availability nodes. So there is a. There, there is a fork that's being maintained of the celestial node version that celestial labs maintains, which is what we've been using, which modifies quite a bit, but packages up the light node as like a wasm build which can then run in chrome, which is like very early but works. Does Dasync, as I was saying, like. Yeah, internalize that term. If you're going to be in this world, it will be Dasan, Dasan in the browser as a full light node.
00:48:39.354 - 00:49:09.304, Speaker B: So there's that. There's a rust implementation that's really good, too. So, yeah, I mean, ultimately, in terms of the network and ecosystem, the goal is to have, what do we say, like millions of these light nodes. Light nodes should be running everywhere, dashing all the time. That is sort of, you know, the security guarantee is enabled by everyone running nodes everywhere all the time. So, like, that is an absolute goal of more nodes, easy to run, lighter. And then.
00:49:09.304 - 00:50:01.264, Speaker B: Yes, similarly, in terms of node readiness, we're working on, as we were saying earlier, doing that initial block, don't download and sync. You kind of do have to wait for that to get far along before you can sort of have an effective running node. But we'll be working on something in the next three, four months to basically sync backwards. So instead of saying, okay, I need to go from the start and move forward, and then you're up to date is like immediately you're ready to go, and it will backfill the data in a way that makes it such that it's backfilling and working in reverse, which seems like really straightforward. But, yeah, I guess when you're building these things from scratch, all you think about is like the beginning and going forward, and then you realize, damn, in four months we're going to have like, I don't know, Mocha's like 1.6 million blocks or something, I think. Right? So it's up there like it takes a good hour to sync.
00:50:01.264 - 00:50:40.746, Speaker B: And then if your computer goes to sleep, you're not paying attention. You're like, oh man, I'm still waiting here. Yeah, so we're really short for time, but while I've got the browser shared, I'm going to go ahead because I have Celestia RPC. I think it's called the Celestial RPC base. Oh, here we go. So this little project here will get you up and running with making RPC requests in go like instantly. So there's a little bit of jankiness with if you're a go developer with your go mod where you have to do some of these replaces here.
00:50:40.746 - 00:51:17.842, Speaker B: And I didn't form a syscall, I just got it up to latest version of 13.3 today. But there's a few packages we swap out for our forks, like Cosmos SDK and stuff like this. And if you were to just go and import RPC client directly from node like this, it's not going to work. Like your go mod is going to have issues, you're going to have a bad time, but if you do these replacements in your go mod, it'll be ready to go. A quick way to think about this if in the future you're trying to do it, is you really just have to copy the replacements in Celestia node. So these all get added when you do go mod tidy.
00:51:17.842 - 00:52:02.110, Speaker B: But if you scroll to the very bottom you can copy, you know, copy this, put it in yours and you'll be able to do go mod Tidy, go run your main and you'll be good to go. Like you'll be able, you'll have a code like this. So here you could do, you know, import the client, client, new client, and then yeah, we'll talk about this shortly, but then you'll be ready to go. I'm going to blast through this real quick, just to make sure we cover it. There's a couple of things that are really important of note here. You can connect over HTTP here, but there are a few JSON RPC endpoints that offer you back a subscription or a channel. There's specifically one called subscribe if we go to rpc.com.
00:52:02.110 - 00:52:33.202, Speaker B: I had them a minute ago here if you go to header. I thought we were going to run out of time. So if you see this one here, subscribe. So this, for better or worse, this JSON RPC thing tries to represent go like go lang idioms in the RPC. So this is why you see this thing here, it's showing you this channel. It's because it's trying to show to you like hey, you're speaking over the network, but pretend it's go. So what this does here, the subscribe one, this is what I was going to demos.
00:52:33.202 - 00:53:11.340, Speaker B: It gives you a subscription channel as new headers come in. But the thing that gets people is if you connect over HTTP here instead of websocket, it will give you a very oblique error and you'll be like what is going on? And so that's what you need to know there websocket. And then the other thing here is where you need your JWT. So if you remember we did celestialite auth, then a permission level read write admin. If we go back to node here, you can see what permissions you need here. So subscribe just needs permissions read sync state read. Then maybe we look at some others here.
00:53:11.340 - 00:53:29.734, Speaker B: There you go. Begin redelegate. That's a bleak one, but that needs rights. Probably some state ones. I don't think any of these do need admin in the RPC. So this gives you an opportunity to say, you know, maybe I'm, you know, maybe my application is only using three or four of these endpoints. They're all read only.
00:53:29.734 - 00:54:25.424, Speaker B: Therefore I can generate, you know, read level JWT and not worry about accidentally leaking out an admin JWT into my environment somewhere. Yeah, maybe I'm not going to like pull it all down and write code because we ran out of time, but maybe if I just pretend so here, you would effectively be able to do RPC head, it looks something like this. Maybe I'll push something up and share it later, but it'll look like this. Any go programmers out there, this all look good. Return. You should catch the error. Then you could do four header range headers and you could do, this will work.
00:54:25.424 - 00:55:05.440, Speaker B: I'm not going to run it, but like, yeah, that would be a way for you to say, okay, my RPC client, each of these new clients has, your editor will complete it for you, but each of those will have something that maps to one of these modules here. So header subscribe and the code. The code in this go thing will look the same. RPC header, subscribe. You can see it gives you an error. If it wasn't able to connect because you're on HTTP, not websocket headers, then yeah, you can sort of dig through this and see. So subscribe gives you a response, which is, well, this one just gives you a channel.
00:55:05.440 - 00:55:44.814, Speaker B: But yeah, once you're in there, but maybe I'll post this, my repo in there and someone can try and pull it down and mess around. Like that's a quick way to get started on this. Let me just cancel changes. But this repo is a real quick way to just get up to date. So if you're feeling super inspired after this, after speaking to me and Josh, and you're like, yeah, I'm going to write some code, and then you want to keep the momentum going, pull this down and just, yeah, you should be, just remember, paste your JWT into that field there and then you should be able to write some code. Maybe a good one is to do one like we started. Stop with like state.
00:55:44.814 - 00:56:11.218, Speaker B: What was it? Like state balance or something like that and just see what you get back and it'll work. And then I would, the fun one is to do the subscribe. I like that one because it's, you can subscribe, set up the loop, it'll run forever and you can just print out the height and it will look like our heads coming in that we saw running the light mode, it'll be your code and then it's working. You can build whatever you want. So, yeah, that's it. I thought we would. Yeah.
00:56:11.218 - 00:56:16.698, Speaker B: Does this always happen? You get going and then you run out of time? I thought I'd be like 20 minutes and, like, nothing left to do.
00:56:16.746 - 00:56:23.642, Speaker A: So it's all good. We can keep going if you have time, but also want to respect people's time. So.
00:56:23.738 - 00:56:40.240, Speaker B: Yeah, no, totally. That's good. I think that's good there and then. Yeah, I'm. I don't know, I'm available. Like, I think people tweeted at me, but, like, yeah, Twitter or discord if anyone wants to ask me anything about any of this or. Yeah, but otherwise that repo should get you up and running, like, instantly.
00:56:40.240 - 00:56:49.804, Speaker B: As long as you have go, you can pull it down, write a few lines, as long as you set it. Followed Josh's beautiful tutorial there with the docs. You should be good to go.
00:56:51.104 - 00:56:59.364, Speaker A: And I guess I wanted to show we have. Yeah, there's a light node running on my iPhone.
00:56:59.704 - 00:57:00.444, Speaker B: Nice.
00:57:00.864 - 00:57:13.234, Speaker A: We're getting got by the focus, but yeah, so it's getting way new headers, it's getting new blocks. It also has about 100 peers. So I don't know. That's pretty cool.
00:57:14.974 - 00:57:15.754, Speaker B: Nice.
00:57:17.094 - 00:57:42.444, Speaker A: Are there any last questions from the chat also? Hey, Montro, Didier, Nicholas, Sammy Garang, thank you for coming today. Thank you everyone else, for joining. I think we're going to call it. So, yeah, you mentioned that Twitter is a good way to reach you. Discord.
00:57:42.524 - 00:57:58.530, Speaker B: Yeah, for sure. Discord. I don't check too much unless I'm trying to get testnet, so I don't know what's preferred support, but like, yeah, on the repo, Celeste, find me. I'm on Twitter. I'm rmn on Twitter. Yeah. Anyone always happy to chat and see what folks are building.
00:57:58.602 - 00:58:12.098, Speaker A: So if you ever run into a problem, just submit a ticket for it. If you run into a problem with the doc, submit a ticket for it. We definitely like to know when things are going not as they should.
00:58:12.186 - 00:58:20.374, Speaker B: So if something's going bad, call him. If something's going good, say it's because of me showing you how to do it.
00:58:21.854 - 00:58:35.294, Speaker A: Well, thank you, Ramin, for, thank you and thanks, everyone again for joining. I will see you again for a few rocket workshops today, so have a good one and see you in the infinite space bazaar.
