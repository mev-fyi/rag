00:00:01.850 - 00:00:35.042, Speaker A: Welcome everyone. My name is Rohan. I'm one of the senior research engineers at Sovereign. I work with Gem and yeah, welcome to the workshop. So a little bit about the agenda. I'll spend a little bit of time talking about sovereign and some general stuff that a lot of people might be familiar with, but it's still worth reiterating. We'll go through the bulk of the demo would actually be building like a very simple module using the sovereign SDK.
00:00:35.042 - 00:01:31.914, Speaker A: And after that we'll also cover other aspects of the SDK that I'm not able to cover in the demo because it's relatively time bound. And then we'll spend a little bit of time talking about some of the current and future work that we're looking at. Sovereign's mission if I had to summarize it in the most succinct way possible, it's to make it as simple as possible for developers to build powerful blockchain based applications. So what does it mean? Right, like when we say simple, it's both in terms of effort and time. We want to be able to make it easier for developers to build. And by powerful, sure, you can deploy a smart contract anywhere. You can deploy applications in several places, but we want to give developers as much flexibility and their applications to be as powerful as possible.
00:01:31.914 - 00:02:09.142, Speaker A: So let's look at what the problem statement is. Right? Yeah, building blockchain applications is hard, like most of us here know it. And what are some of the common approaches? So you can deploy your application as a smart contract on a layer one. But what are the problems with that? There's no dedicated throughput. Your state transition function is rigid. That means the abstract state transition function is already coded into the layer one. And you can't really change or customize consensus or anything if you want to.
00:02:09.142 - 00:02:44.122, Speaker A: And there's also a problem with value accrual because most of the value is accrued to the infra layer or the layer one and not your application. So that's the issue with smart contract roll ups. You have application chains. They do solve some of the problems above, but there are new problems now. So you need to spend developer resources on non application logic. Because now if you have to build your own app chain, you need to look at blockchain logic. There are some sdks, but you still have to consider networking, consensus, storage.
00:02:44.122 - 00:03:10.540, Speaker A: These are all choices you need to make. And you also need to recruit a validator set. That's like a very prominent problem, because now you still have to be decentralized. You need to satisfy byzantine fault tolerance. And your coefficient needs to be high enough to prevent any sort of reorg attacks. So, standard problems. So what about roll ups? Yeah, they solve some of the above problems.
00:03:10.540 - 00:03:56.614, Speaker A: They eliminate the need to recruit a validator set, because now you're using the underlying DA layer. You have dedicated throughput, something that your smart contract chains don't have, because now all the resources are. You have resources for your application. The value accrues to the application, which is pretty great because you are capturing all the value and not some other layer one. And the STF is customizable, so that is beneficial. Similar to application chains, you have full control over the logic that you encode around the state transition function. But this is the core of the problem, right? Even building roll ups is actually hard.
00:03:56.614 - 00:04:41.106, Speaker A: It solves a lot of the problems. But the effort involved in building a roll up is not trivial. Like you have to make a choice about the proof system. Like, okay, am I going to be an optimistic roll up? Or how is my finality determined? How are nodes going to consider something final? Is it optimistic? Or are they going to wait for proofs? And the second problem is censorship resistance. So now this is a commonly brought up problem that your application roll up can censor or they can prevent users from interacting with the chain. So that's one other problem. And then obviously, even in a roll up, there is slightly less protocol engineering.
00:04:41.106 - 00:05:24.862, Speaker A: But you do need to write code that interacts with the DA layer or whatever layer, one that you're using. And that includes things like rpcs. Your goal as an application developer is to build the application, but now you're doing all of these things like you're writing code to submit blocks to the DA layer, consume them, and then build like an RPC server to let other people interact with it. And by tooling, I mean even like wallets and everything, there's a lot of additional stuff you're doing as an application developer. And there's protocol development. I made it separate because even if you use an SDK, you still need to debug networking issues. And for testing, you need to be able to launch multiple machines.
00:05:24.862 - 00:06:02.558, Speaker A: So there is a lot of work that you're doing. So the direct consequence of this is that there are very few feature complete roll ups. I think if you went by the actual definition of a roll up, inheriting security from the underlying layer, there's just one that actually does that. Everyone else probably makes some compromises, usually because they're like, okay, we'll decentralize later, or we'll add in fraud proofs later, or only this specific address can submit fraud proofs. So they're trade offs like that. Right. So this is basically where sovereign SDK comes in.
00:06:02.558 - 00:06:52.910, Speaker A: The goal is to address each of these problems. So what is sovereign SDK? It's a free and open source toolkit that we can use to build roll ups. So sovereign lets you seamlessly plug in either an optimistic or a ZK proof system. So by seamless we make use of like sovereign is built in rust and lot of it is actually, we provide abstractions around having the right traits that a developer needs to implement. So you have a lot of scaffolding and boilerplate already built in and auto generated. So the end result is you can seamlessly change the proof system. You don't particularly need to give too much thought to it, not even just ZK, but even multiple types of ZK proving systems.
00:06:52.910 - 00:07:31.210, Speaker A: And then censorship resistance. Yeah, we have a single sequencer, but we also support base sequencing. So those other kinds of sequencing algorithms are also pluggable. And the code to interface with the DA layer. There are already some built in adapters that we already provide Celestia and avail, and there are more DA adapters that are in development. And we also auto generate a lot of the tooling and other infra that you need. And even the protocol development part, which is like I mentioned, the storage is abstracted, the networking is abstracted.
00:07:31.210 - 00:08:02.914, Speaker A: Typically when you have a chain, what happens when a new node joins? Right. It has to start syncing and catch up. There's like config management. So all of these are handled by sovereign SDK and how to use it. Yeah, you focus purely on the application logic and the rest of it is mostly like plug and play. Like you can plug in existing DA adapters, you can also customize them if you really want to. It's the same for prover systems and for the SDK.
00:08:02.914 - 00:08:56.834, Speaker A: Once you implement the necessary traits, the SDK auto generates the RPC for you. We're also working on generating an open API specification, so you can have any client. Lots of languages have tools to auto generate a client. If you have an open API spec, so the CLI tooling and then the prover, and you also get the node implementation, which is the full node and the light node you don't really need to particularly care about. Yeah, the ultimate goal is that you focus purely on the application logic. And if you implement the right set of traits or you plug in adapters that are already implemented, that does the job for you. And one of the reasons we use rust is performant and the type system is actually pretty expressive.
00:08:56.834 - 00:09:54.278, Speaker A: So we try to encode as much as possible into the type system so that when you're running something, it fails at compile time rather than, hey, you plug in this protobuff for something, you start running and then the only way you know something is wrong is when you actually send a message and it breaks in production. Right? So yeah, that being said, we can probably step into the demo, which is like a simple coin module. I'll try to live code it, but I do have the changes on a branch in case we start seeing like weird compilation errors or something. I hope the font is readable for everyone. Okay, yeah, so a small overview of the repository itself. There's a folder called examples, and this is actually one of the best places to start if you really want to look at sovereign. Like get into sovereign.
00:09:54.278 - 00:10:47.780, Speaker A: There's like a demo roll up and a demo prover and we'll mostly be in the demo roll up area. But yeah, if you want to create a new module or a new, like in our case it's a coin module, right? So it's typically the same as starting like a new crate or something. So if we go into, yeah, I'm calling it simple token. And at this point it's just a standard rust crate. There is nothing in it, just the test code. So I will import some dependencies. I'm mostly copy pasting a lot of this stuff because typing it will take much longer.
00:10:47.780 - 00:12:06.750, Speaker A: But if we look at what we imported, yeah, it's just some standard serialization libraries and everything, but we're also importing the module API and a few other things that are relevant to when you create a new module. What do you primarily need when you create a new module? So I have three files here, or just make it a little bigger. When you create a new module, you need to be able to submit transactions to it, you need to be able to read from it, which is what is the value of a certain account. Or you need to be able to query state, you need to be able to modify state. And there's genesis, which means when your module is first deployed, what is the initial state? Right, so for each of these we can create like three files. We'll call them like call rs, Genesis, rs, and query rs. So those are the three files.
00:12:06.750 - 00:12:29.078, Speaker A: Before we even look into that, let's look at what the structure of our module is. Right. So what we really want is like this is the core structure. When you create a new module, it's like creating a new contract, essentially. So let's look at what I did here. I'm auto deriving module, which is like part of the documentation. You can see that.
00:12:29.078 - 00:13:03.922, Speaker A: But ultimately I'm creating a struct and I'm annotating a few things. I'm saying that, okay, there is an address for the module itself, which is mandatory. If you don't do that, you get a compilation error. And there are two pieces of state. One of them is the supply, which is U 64 value. The other one is balances, which if you're familiar with Ethereum, it's literally just a hash map that stores an address to the balance. So this is a very simplified version of the module because for the purpose of demo, just to understand the core aspects of it.
00:13:03.922 - 00:13:44.814, Speaker A: Right. And then you have the standard imports that I just want to add here. And there is something called like the config, which I can explain in a little bit. It's basically this is what determines what the initial supply is. So yeah, you created your struct, which represents your state, but after this, now you actually need to implement the module trait. As I mentioned, a lot of sovereign is actually implementing traits that are defined in the SDK because the rest of the engine or the runner makes use of these traits to run. So as long as you satisfy the constraints of a certain trait, you're fine.
00:13:44.814 - 00:14:27.964, Speaker A: Like you can write anything that satisfies those trait bounds. If I do this, just looking at why autocomplete isn't showing up once again. So basically, if I try to do a cargo check or something at this point, it'll say that some of these tray. Oh yeah. So one of the things you need to do is all of it is based on a workspace. So I do need to add it into the main. So we created a new module.
00:14:27.964 - 00:15:14.896, Speaker A: So I'll just add it into the workspace here. So this is the simple token module. So now it should be able to tell me if something is broken. Yeah, so it basically highlights the error saying that, hey, you are saying that you want to implement the module trait, but you're missing a whole bunch of things, right? So let's just say implement members and all the mandatory members for now we can just leave this as unimplemented, which is pretty cool with rust. You can add that in later as long as it type checks. So for context, we already have a value c. I'll just use that.
00:15:14.896 - 00:15:51.020, Speaker A: The config represents the initial state and we just created a struct here that says what do I need. In order to initialize my genesis state, I just need a supply of the token, and I need an address of the token. Naturally, you can make this more complicated and say that I also want to have a name for the token or whatever those fields are. As long as they satisfy certain traits, it's fine. Like, they need to be serializable because you're storing it in your rocKsDB or whatever storage. Right. So at this point, I'll just say, okay, my config type is actually this, and it's generic.
00:15:51.020 - 00:16:18.292, Speaker A: And my call message. So the call message is, what's the call message that you're using for the transaction? At this point, we didn't define the call message yet. So once we define this, we can just see if it type checks or not. It should. Yeah. And it did, because that's actually one of the cool things about rust. Even though you didn't implement it, you're not using it.
00:16:18.292 - 00:16:50.368, Speaker A: So you can leave unimplemented for now. And as long as the types are correct, it's still okay. Now that we have our basic struct, let's look at what the Genesis looks like. Right? So in Genesis, what I'm doing is. Let's see. Okay, so all we're doing here is we're implementing a trait for our. Yeah, this is actually pretty simple as far as logic goes.
00:16:50.368 - 00:17:29.064, Speaker A: I have my struct, and I'm implementing a function for it. This is just a private function. This is not really enforced by the trait or anything. But all I'm doing here is, I'm saying, okay, I'm taking the config object, which is of the type that we defined, and I'm just setting the supply to whatever supply is part of the config. And I'm setting the balance of the creator to the supply. So just to explain this part, what's happening here is when I create my new token, the genesis state will specify what the supply of simple token is. So I need to provide, like, a supply and a creator, the address of the creator.
00:17:29.064 - 00:17:59.510, Speaker A: Those are the only two things that are needed for Genesis. And now, in Genesis, we can actually write the specific code for calling that, which is. Let's see. Yeah. All we're doing here in this place, the implementation for Genesis, is basically just call in it module, the function that we just defined here with whatever config is passed into Genesis. So naturally, these variables are used now. So it'll complain.
00:17:59.510 - 00:18:57.314, Speaker A: Yeah. For these things to be usable, you do need to add them as, like, this is a standard rust thing. So mod genesis, mod call, and mod query is not really needed, but I'll just add it anyway at this point. Let's see. Yeah, so this is the init module function that's being called when the module is initialized. And if there are any issues, it will say genesis failure, which is fine, because when you're starting up your new chain, you want it to break immediately if you misconfigure it. Right, so let's get to the more interesting part now, which is how are we going to define what a transaction is for our call module, for our simple coin module, right? So the most basic thing you want to do, a more complicated module for tokens, would have things like mint burn, freeze.
00:18:57.314 - 00:19:30.386, Speaker A: There are a lot of additional features, but for purpose of simplicity, we're already fixing the supplier genesis. So the only real call that we would need is actually just transfer. So this is kind of what it looks like. Let me just have this here. So what we have here is a call message. So this is an enum type, which is, if you're familiar with rust, it's like the sum type. So what are the types of messages that my system can accept? So here it's just a transfer.
00:19:30.386 - 00:20:13.402, Speaker A: And what does a transfer need to specify? Who am I transferring the tokens to and how many tokens do I want to transfer? Right. So that's basically the only message that is supported. But if you want to look at a more feature, complete implementation of this in module implementations, sovereign does provide like the bank module, which is if you look at the call there, it'll have like a create token transfer and then a burn. There is like a mint functionality and a freeze functionality, as I mentioned. And this entire thing is an enum. So as long as you send the serialized enum to the application, it'll accept it. Like all of that is auto generated.
00:20:13.402 - 00:20:47.654, Speaker A: We'll see that in a little bit. But yeah, so now I need to actually encode what happens when I get a transfer message. So for that you just need this function like you can write. This is the core of the business logic. Right? What am I doing when I need to? How do I transfer things? So we can look at the function. It's basically you're getting the sender. So there's a context object that has information like who signed the transaction and everything which is available to all modules.
00:20:47.654 - 00:21:26.786, Speaker A: So you can get who the sender is and the signer is. So I have some very simple logic here without checked math or anything, so that we can focus on the core part of it. So all I'm doing is I'm getting the sender, I'm getting the balance of the sender, I'm checking if what the sender wants to transfer. If it's less than the amount, I'm just going to bail with, okay, not enough funds, and then the rest of it is just some basic checkmath. Like, okay, what's the balance of the person you're transferring to? I'll just increment that. That's it, actually. So in production implementation, you would have like, checked math.
00:21:26.786 - 00:22:02.610, Speaker A: If you're familiar with solidity, which is like, check that, check, subtract, prevent overflows and things like that. But the core logic is still the same. If you're writing any module, this is where you put your, like, you define what the type of message is, which is an enum. Different types of different variants of the enum would be the actual messages that you want to pass to the system to update the state, and then you encode the logic on how to handle it. But these two are not connected yet. Like, we have a call message and we just have a function. Right? So how do I connect this to the actual module? So that's where this call comes in.
00:22:02.610 - 00:22:36.080, Speaker A: So in Genesis, when you implement a module, you need to tell sovereign SDK requires you to specify genesis and specify how to handle a call. So in Genesis, we wrote the logic. We're like, okay, there is a config that is always part of Genesis. Once it's passed in, you initialize the module with that. And for the call, this is actually quite basically, this is like the routing mechanism. When you get a message, you need to decide which function to call. So let me just see.
00:22:36.080 - 00:23:36.406, Speaker A: Yeah, so this is all it really is. What you're doing here is you're basically matching the message and you're deciding like, okay, what is my type? So here the call message. So this is one of the nice things about rust as well, because you have type checking at this level. If you're trying to handle the wrong kind of like an enum that doesn't exist or something, it'll just fail to compile right at the beginning. So I'm just saying that if the message that you got is a transfer message, then just call the transfer function by extracting these elements from the enum. So that's basically all that's actually happening here. So at this point we have, yeah, let me just quickly cargo check it and make sure it works or doesn't break it.
00:23:36.406 - 00:24:06.354, Speaker A: Yeah, so this happened because when we auto filled the trait, it set call message to blank. Right. But now we actually have an implementation for call message. So I'll just set it to that. So all of these are things that you need to specify. Yeah, generic. So now we specify what the context is, what the config is for the genesis, and we're specifying what the call message type is.
00:24:06.354 - 00:24:39.820, Speaker A: So at this point it should type check without any issues. But yeah, so now we have, now what did we do? We filled out the genesis. We filled out what kind of messages the system handles. So now we can also do like the query part of it, which is the RPC. Like how do you read? So we looked at initialization write. Now we're looking at read, which is also fairly. Yeah, so some standard imports that you need to use.
00:24:39.820 - 00:25:17.810, Speaker A: By the way, I wanted to cover this later, but I can actually do it now. The thing is, I am creating the module from scratch just to illustrate how it's done. But in the modules there is like a module template that you can also use, which has a very simple example with a lot of documentation around how you can fill out all of these. Right. And going a little bit. I think we're already currently working on a cargo template, so you can just generate the scaffolding directly. So let's get to the query.
00:25:17.810 - 00:26:16.380, Speaker A: There are some imports and yeah, this is the part where we're using macros to auto generate lot of this code. So what we're actually doing here is I just defined response type. And for the response, all that the RPC requires is that it's serializable, right? So we're deriving some traits that rust provides, which is serialized and deserialized. And then what we're doing is we're defining a simple function that says, okay, if somebody passes you an account, then query the balances. Like if you look at our original struct, it had these address supply and balances, right? So we're just querying balances and getting the account. So how does the actual RPC infrastructure come in? That's where these macros come in. So like sovereign has a pretty rich set of macros where we auto generate a lot of code.
00:26:16.380 - 00:26:46.694, Speaker A: So if you say that you want to RPC generate, you just provide the namespace and what the name of the method is. And this is very similar to JSON RPC. Like there is a rust crate called JSON RPC, which is how you define RPC servers. And we use the exact same annotation scheme. So all we're doing here is these are the two annotations that we added. This RPC is in the simple token namespace, and this function's name is get balance. That's it.
00:26:46.694 - 00:27:22.590, Speaker A: And all we're doing here is I'm querying the balance from RocKsDB and I'm returning this serializable struct. That's all the RPC macro cares about. And if you do something wrong here, it'll fail with a compilation error. Yeah, okay, this is fine. So at this point our module is actually completed. Like we have the query, we have the Genesis, and we have the library. Right? So now how do you plug in this module into an existing roll up? Like I said, you can customize a lot of logic, including the state transition function and everything.
00:27:22.590 - 00:28:31.160, Speaker A: But we do have a simple demo roll up implementation. When you build your own roll up completely from scratch, there are a lot of things you might want to consider. Like what is my address type? Is it 32 bytes, 20 bytes, or what is my signature scheme? Like, am I going to use Sec P eD 255 19 or BLS? So all of those there are pre built adapters that you can just use. The demo roll up uses ED 250 519. It has like standard 32 byte addresses, it uses rocksDB for storage, and it uses Celestia for the DA layer. So all we're doing now is we're basically just saying, okay, I have a new module, I want to plug this module into my roll up, right? So what you actually need to do is the logic of your state transition function is defined in the runtime. So this runtime is basically just a struct that says what are the modules that are loaded? So demo roll up comes preloaded with the bank module, the election module, and a few others.
00:28:31.160 - 00:29:23.974, Speaker A: We just want to import our module here. So to import it, first we have to just add it into this thing here. Let me just see if I have. Yeah, so into the demo STF, I'm just saying, hey, I created a new module called simple token and I just want to import it. So once I do that, I can import the other things that I need here. So I'll just say we called it like 1 second, do this. Yeah, so these are auto generated actually.
00:29:23.974 - 00:31:07.204, Speaker A: So there is an RPC implementation and an RPC server. So if you notice, we didn't have to write anything related to RPC directly. So we're just saying like simple token, and I'll just call it like it can actually see why it's complaining about it. Okay, yeah, this had to be like a public module. And I just made it like a private module, which is fine. It's a very simple fix. Yeah, just make them public now.
00:31:07.204 - 00:31:09.140, Speaker A: It shouldn't complain anymore.
00:31:12.760 - 00:31:13.244, Speaker B: It.
00:31:13.322 - 00:31:52.864, Speaker A: Okay, so now we have the RPC implementation, and we need to plug in the module here. Right? So let's put it right after accounts. We'll call it simple token. And that will be simple token. And it's not accounts, it's basically the simple token struct. You might notice there are a few places where we have, like CFG feature experimental. So what we do is when we write new modules that we're actually experimenting on, we feature gate it with experimental so that people who are using it know that it's actually experimental.
00:31:52.864 - 00:32:30.470, Speaker A: It's part of our release process. And you might also see like, feature native. So the reason you have feature native is because there are certain things that you only need in your native code and certain things you don't need in the ZK prover system. So that's basically what distinguishes your non ZK provable code from your native code. And it's fine. Most of this is abstracted, so you wouldn't need to directly delve into it unless you're modifying it. But yeah, so there is like the simple token here, and I will add it here as well.
00:32:30.470 - 00:33:01.820, Speaker A: The thing is, this actually derives genesis. So if I try to compile it now, it should complain that I'm not actually. Basically, it's saying that, hey, you gave me a new module, but you didn't really tell me how to initialize it or how to do the genesis. Right. So it tells you exactly where you need to add it, which is pretty nice. So there is a genesis config. And this is where, when the roll up is starting, you're, like, configuring all.
00:33:01.820 - 00:33:36.900, Speaker A: So all the modules that we defined in the code, all the other modules have genesis. So we'll just end up adding the genesis here as well. So for Genesis, it's basically. Let me see. Yeah, and we just need to import that as well. So once it's imported. Yeah, it says that, hey, I need this genesis.
00:33:36.900 - 00:34:03.980, Speaker A: So the simple token config should be part of this. I have a clone here, but I don't have a clone here. Yeah. So we'll just see if this checks. Okay. Yeah, so at this point, we've basically completed our new coin module. So we can actually.
00:34:03.980 - 00:34:43.816, Speaker A: Let me just check if I missed something because I implemented it, called it in. Okay, I think we're good, because it's checking at this point. So one of the things we provide as part of sovereign SDK is we containerize Celestia so that you don't need to connect to the network live if you're doing something. So we have a make file that is pretty comprehensive in terms of starting the docker container and everything. So let me see if Docker is running. It drains battery, so I usually kill it. Okay.
00:34:43.816 - 00:35:15.696, Speaker A: So I'm just doing make clean, which cleans up the docker container. So at this point, if I do make start, it starts Celestia locally for me. And yeah, it's just waiting for the container to start up. How are we on time? Okay, good. On time. Yeah, perfect. So now the container is started and you can actually see Celestia actually generating these blocks.
00:35:15.696 - 00:35:41.442, Speaker A: Right. So now we start our roll up. So just cargo run in demo roll up. And it should actually just start picking up blocks. Yeah. So whatever blocks are being generated by Celestia are being picked up here. The good thing is we just did a genesis so we can check if our new token actually exists.
00:35:41.442 - 00:36:13.698, Speaker A: Right? Because in Genesis we basically, let's look at what we said in Genesis. I said, okay, create a token with a supply of 1000 using the sequencer address. I just used that because I didn't want to generate a new key. And if I do like this is just a curl command, it hits the RPC. And if you notice, the namespace and the function are basically what we specified in query. So in the query part we said this is the namespace and this is the method. Right.
00:36:13.698 - 00:36:39.002, Speaker A: So that's basically what we're using here. Simple token, underscore, get balance. And for the parameters I'm passing in the address. Let me just see if this. Yeah, so there's a token of balance 1000 against this address. So now we can also try to do a simple transfer. So in order to do the transfer, what you need is, what is our call? We define call.
00:36:39.002 - 00:37:07.230, Speaker A: Right, let's look at call. So we need an enum of the type transfer with a two and an amount. So we automatically provide JSon surdy from your enum. So as long as you have a json that can be deserialized into this enum, you're good. Which is basically what I ended up doing here. Let me quickly see where it is. Yeah, so in the request there is a simple transfer JSoN.
00:37:07.230 - 00:37:43.614, Speaker A: And if you see it's pretty identical in structure to the enum that we have the transfer enum, I'm transferring it to a specific address and I'll transfer like 100 tokens from. So now I need to create the transaction. Right. How do I do it? Yeah, so we have like the sovereign Cli, which handles a lot of these things. So I can quickly show you what it looks like. So if I do cargo run h, it shows you the functions that are. By the way, let me know if any you can see font is visible, right? Okay.
00:37:43.614 - 00:38:05.702, Speaker A: Yeah, so at this point I can just. So this is evolving. We're trying to make it significantly easier as well. But once you have your JSon message, you want to serialize it to pass it to the server. Right. So that's actually what we're doing here. So when I serialize, I tell it what the private key that it needs to use is.
00:38:05.702 - 00:38:30.490, Speaker A: So the private key in this case is the sequencer private key. So let me see, keys and. Yeah, so it's this key and then the module name. So that's also auto generated, so we don't need to. The module name is basically simple token. That's what we generated just now. The call data is the JSON that I just created with the 100 tokens.
00:38:30.490 - 00:38:55.830, Speaker A: So test data and request. And you have the simple transfer JSon, and then you need to provide the nons. We didn't do any transactions from here, so the nons is zero. So once I do this, it's essentially serialized. This transaction, celestia accepts blobs. Right. So we need to bundle the transaction into a blob.
00:38:55.830 - 00:39:32.910, Speaker A: By the way, I'm just doing all of this manually just to illustrate how it works. To give people an idea, it's much simpler. We already have a pr where the CLI gets the complete command line tooling for the module directly. So there's something like if you do sob Cli submit H now, the module will turn up as an option. Yeah, so we serialized the call. Now we'll just bundle it into like. Yeah, we have something called make blob, which bundles the transaction into a celestia blob.
00:39:32.910 - 00:40:02.218, Speaker A: You can bundle multiple transactions, but we only have one transaction. Yeah, so there's like a simple transfer DAC, so it prints out hex, which is the API that Celestia accepts. I'll just put it into like a blob and submit it to the DA layer. Right. We also have the RPC. There's also a sequencer module. So there's something called a publish batch and a submit call.
00:40:02.218 - 00:40:32.688, Speaker A: So the sequencer does all of this. But just to illustrate it, I'm trying to run it manually. So once we have a blob in order to submit it, we just. Let me see. Make submit. Okay. Yeah, so it's make submit transaction.
00:40:32.688 - 00:41:11.930, Speaker A: And all of this is in the documentation, so it's not data. Sorry. Yeah, so this is the blob and we can see our roll up is running here. Right. It's still fetching blobs. I'll just submit this and see if it's okay. It submitted it and we just have to wait for it to go through the Celestia and for the roll up to pick it up.
00:41:11.930 - 00:41:52.424, Speaker A: Okay. Yeah, so the sequencer outcome is rewarded and it applied the state transition. So if we check the balance, I mean, we can check the balance of the new address, but we can just check the old one because that was 1000 tokens, so now it should be 900 tokens because 100 tokens have been transferred to the new address. Twelve minutes more. But yeah, that's basically what an end to end flow looks like. You define your module and then you plug in your module into the roll up. That just requires like two lines of code.
00:41:52.424 - 00:42:44.090, Speaker A: As you saw, there's an existing demo roll up and whatever. Rust create native code that you created, as long as it satisfies the necessary traits. You just plug it in and you write some logic for Genesis and then you're good to go. And if you make any mistakes along this process, you get a compilation error, which is pretty nice. That's the demo part of it, and I think we have some time to go over some internals of the sovereign SDK as well, which is we have the demo prover. It works in a very similar way to demo roll up, except that when it's running, it's picking blobs and also proving them. So we don't have enough time to demo the prover itself, but it's completely compatible with the roll up.
00:42:44.090 - 00:43:37.220, Speaker A: If you put something into the roll up, you get the prover for free. So if a machine is running the prover, whatever is part of the roll up, as long as you're able to generate valid risk five code, it ends up generating proofs for it. And the prover is also capable so your light clients can validate the proofs before accepting the blocks. So that's the prover part. And let me see if there's. Yeah, so regarding work in progress, we have an EVM module that's already checked into main with the experimental feature. As I mentioned, the goal of the EVM module is right now, the example that I showed you is native rust code for business logic.
00:43:37.220 - 00:44:13.990, Speaker A: But this one encodes the entire EVM as a sovereign module. So you can actually deploy contracts and submit contracts and everything, and interact with it as you would with a regular EVM roll up. Sorry, regular EVM chain. Our goal is to make it fully compatible and RPC compatible with metamask as well. It's a work in progress and I think it's pretty close, to be honest. And there's the open API spec generation as well. So these are two of the most immediate things we're working on, but we're also working on a lot of other stuff.
00:44:13.990 - 00:45:00.500, Speaker A: Again, as I said, it's like fully open source. So anybody can we absolutely welcome anyone to visit, take a look. And we also pride ourselves a good amount on the documentation. So if there's anything wrong with the documents or anything, or if anything is not clear, you can always ask in discord and we'll be more than happy to answer. So everything that I explained is a small part of the tutorial. And all of that is here actually. So when you get started, how do you run like a local DA instance and what does the make file do? It's pretty comprehensive and we want it to be anybody.
00:45:00.500 - 00:45:30.270, Speaker A: Like we said, the goal for sovereign is to let you focus on application logic. You shouldn't have to worry about anything to do with the prover, networking, storage, consensus. Just plug and play. Start focusing on your business logic. Yeah, we have ten minutes for questions. Anything? Yeah, go ahead. Oh, thank you.
00:45:36.960 - 00:45:38.220, Speaker B: What's the German?
00:45:41.440 - 00:46:35.652, Speaker A: So, because we're like, because it's a sovereign roll, the consensus is actually left to the base layer. What you care about is sequencing because the ordering is done by the base layer. So we support Celestia and avail right now and any DA layer that fits our adapter model can support it. So the consensus, that's actually one of the beautiful things about rollups or sovereign rollups, you don't really need full BFT consensus in the application layer, the sequencing and the ordering and the Riog protection is actually from the base layer. So whatever celestia uses, that's tenderament avail might use something slightly different, but I think. Jim, do you know if the diagram is in the repo? I'm not sure if we put it there. Okay, yeah, that's fine.
00:46:35.652 - 00:47:09.630, Speaker A: Yeah. So on the roll up, what we care about in terms of protocol is decentralizing the sequencing. Yes, the blob, it's similar actually. So like you bundle your transactions into blobs, the blobs go into a celestia namespace and your roll up full nodes, all of them. Let me actually see if I have the diagram. That would be cool if I did.
00:47:25.690 - 00:47:44.558, Speaker B: Which virtually, when you handle a patch from the VA, it's like creating a virtual and the transaction from the VA handled after it, or it needs to.
00:47:44.564 - 00:48:40.792, Speaker A: Be both verified, then can not. Depends on which node, because full nodes execute the transactions on their own, so they don't need to verify proofs. They can if they want to, but okay, you have your blobs going to the DA layer, right? You also have the proofs going to the DA layer. The full nodes are going to take the blobs from the namespace and directly execute the transactions on their own. The light nodes will wait for proofs because that way full nodes don't really need. So yeah, in terms of, for the user, if you're a light node, naturally you need to wait until it's proven. If you're a full node, if you're a full node, it'll be bound completely by the DLA.
00:48:40.792 - 00:49:23.808, Speaker A: So as soon as the DLA sequences the block, you can apply state transition. I mean there are optimistic models that you can use where you can actually take the blobs from the sequencer directly as well. And if you have some assurance that they will be sequenced in a specific order, like degrees of finality, right. You can have like a soft finality where it's faster. So in the case of a centralized sequencer, you can directly take the blobs from the centralized sequencer because you know the order. In case of base sequencing, it's a little harder because the DA layer could reorganize it. If you have a more complex sequencing algorithm where they have a leader election process, that becomes slightly better.
00:49:23.808 - 00:49:34.810, Speaker A: But there can be a reorg if something happens and the algorithm isn't okay.
00:49:38.860 - 00:49:46.728, Speaker B: And there's more transactions, wait until the blob finalized for the first transaction.
00:49:46.824 - 00:50:19.868, Speaker A: No, because you just keep posting blobs at network speed. The sequence keeps posting. So the sequencer technically doesn't need to execute, it just needs to check. There are some validity checks that we actually do. So there's a sequencer logic here which handles the reward system. But to answer your question, the sequencer's job is not to execute, it's mainly to sequence blobs and post them to the DA layer. So you're only bound by the speed at the scalability of the DA layer and how many blobs it can accept.
00:50:19.868 - 00:50:42.030, Speaker A: So you can keep submitting transactions, they keep going to the DA layer, and as long as you have a full node that is reading blocks. As soon as they're sequenced, they're executed in order of what they're being sequenced. As the full nodes execute the raw logic. They don't need to care about proofs. But yeah.
00:50:45.860 - 00:50:47.170, Speaker B: Solution to the.
00:50:49.560 - 00:51:26.060, Speaker A: It is, yeah, so that's actually another you can completely module. But yeah, it's basically currently what we have is. So in the CLI, I have an example actually. So let me quickly run. So there's actually two calls here, one that says submit call and publish batch. This is more like when you keep submitting, the sequencer keeps holding them. When you trigger published batch, it sends the blob.
00:51:26.060 - 00:52:11.310, Speaker A: So this is in case you manually want to play with it, but you can tune it however you like. Like I said, the base sequencing model is more like as soon as you get the blob, you throw it into the DA layer. But yeah, there is some batching. Like by the default logic we have it based on both time and number of transactions. We are actually looking at IBC compatibility right now. Bridging for sovereign roll ups is more based on light clients. Because one of the reasons why for us actually provers are like first class citizens, we didn't want to go live saying we'll add this later.
00:52:11.310 - 00:53:38.026, Speaker A: All the work we're doing with the prover system is completely concurrent to the full node and light node. So any other roll up that can run a light client can actually validate it on another roll up. So we're looking at IBC compatibility. Chem can probably talk a bit more about that. Yeah, sorry, I'm just trying to find the diagram. Oh yeah, here it is. Full screen it or.
00:53:38.026 - 00:54:19.014, Speaker A: Yeah, basically this is what the architecture would look like you have. Do I need to zoom in? Maybe a little bit, yeah, so basically you have the DA layer. It's stuck for some reason, but yeah, you have the DA layer, you have the sequencer. The user submits the transaction to the sequencer. The blobs are posted to the DA layer and they get sequenced in a specific namespace. And in terms of what is interacting with the DA layer, you have both the full node, the prover, and the light node. The full node's job is let me just pick the blocks, let me extract the blobs that are relevant to my namespace.
00:54:19.014 - 00:55:18.078, Speaker A: I will validate them, I will execute them and I will modify the state. The prover on the other hand, is like a superset of the full node. In addition to executing it, it also creates completeness and correctness proofs for each of the blobs generates the proofs and those proofs get posted back to the SQL like the DA layer. So what you have here is the light nodes. On the other hand, they sync only the headers of the DA chain and they sync the proofs from a different namespace. So this is basically what the very raw minimal architecture looks like. Oh, that is completely, that's basically what the roll up was doing here when I ran it, which is, yeah, typically what you would actually do is every DLA also has a light client, right? The light client already syncs the headers and fetches the data.
00:55:18.078 - 00:55:44.680, Speaker A: So you would actually use the logic of the light client to do that. You can write custom logic and interact with the API as well. But the good thing is most DA layers come with light clients and nodes that also do some validation for you. Right, because you can fetch a block, but now you need to validate whether the block is correct or not. It's better to leave that to the DA layer. Yeah.
00:55:48.410 - 00:55:57.150, Speaker B: Such that all this state with some index.
00:56:03.490 - 00:56:33.590, Speaker A: So we actually use the default implementation uses JMP like the jellyfish mercury tree, because it's easier to prove. I'm not sure I understood your question about indexing, but yeah, currently there is no state pruning if that's what you're asking. But we have discussed on state expiration or something to prevent state bloat. But yeah, the full node implementation is basically that as you keep getting blocks, you keep building your JMT and it keeps growing.
00:56:34.410 - 00:56:40.090, Speaker B: Well I guess all historical state and changes would be under the air layer.
00:56:42.830 - 00:57:23.900, Speaker A: So when you say state, there are two things, right? There is the actual state tree, there is the ledger. So the ledger can be pruned very easily because you only might need to maintain the last 1000 blocks or last two or three epochs or something. But the state tree itself is maintained in full. But also one of the reasons why we went with risk zero initially is there's recursive proofs. So we're looking at a model where in your ledger as you add new blocks, you recursively prove so that at any point in time you can sync the entire state tree and know what the Merkel route of that is. And there is a proof of that as well.
00:57:25.310 - 00:57:29.660, Speaker B: So in order to get the state of your rollout one year ago.
00:57:31.550 - 00:58:24.010, Speaker A: You have to reread it from the like I said, it's recursive proofs, but the intermediate proofs are also submitted on chain. So two options, right? One is let's look at it in terms of blocks. Let's say, currently, we're at block 10,000, and you want the state at block 4001. Option is you play from Genesis. The other option is if you have snapshots, because we have recursive proofs. If somebody says the state at block 800 is x, and this is the proof for that, if you can just download the state snapshot, you already have proof that that's the correct state, because the proof is also published on the chain, and you only need to play the remaining 200 blocks to get from block 800 to block 1000. So that's actually one reason why we're very interested in recursive proofs.
00:58:24.010 - 00:58:34.040, Speaker A: Sorry. Yeah. Okay. Yeah, we're already five minutes above, but we'll be around for questions. I will.
