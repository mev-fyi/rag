00:00:02.090 - 00:00:38.920, Speaker A: Okay, well, everyone, good afternoon. Thank you so much for joining us for our rollups as a service panel. I'm Tracy Wang. I'm a deputy managing editor at Coindesk. Excited to moderate because we have four rollups as a service projects all on stage, and so hopefully nobody starts fighting. But why don't we just start with if we can go down the line and have everybody introduce themselves, kind of a little bit of your background. Any other previous projects you've worked on that are notable and kind of how you got to where you are in just like a 32nd intro?
00:00:39.290 - 00:01:03.790, Speaker B: Yeah, sure. Hello. If you weren't just here for my talk, I'm Matt, I'm the founder of Caldera. Got into crypto back in 2012, 2013, bounced kind of in and out of the space, did a lot of stuff around startups, some performance engineering for things like games and operating systems, and found my way back into the space working on rollups as a service, trying to unlock scalability for novel applications on Ethereum.
00:01:04.930 - 00:01:48.830, Speaker C: Yeah, hi everyone. Yaoji here from earlier. So actually, I started my research back in 2012 mainly on consensus protocol and also privacy, mainly publishing sort of research papers. But in 2016 and 17, together with some colleagues, we started to do research on scaling mainly sharding at that time. So we co founded Zilica and basically pushed the midnight for the sharding protocol. And later on, also working on some multi chain approach. And then around two years ago, we started earlier to build this decentralized roll up service protocol for applications to quickly spin off a roll up and scale their applications.
00:01:49.810 - 00:02:25.750, Speaker D: Hey, I'm Neil. Great to see some familiar faces here. Founded Eclipse, and prior to that I was working at Citadel as a quant researcher in the commodities group. So I did like power, gas, electricity, and then I left. I was briefly building an EVM for the Cosmos SDK, so people here might know like Ethermint or EVmos and stuff like that. So what this was instead was you take the regular webassembly virtual machine and you try to run EVM bytecode through that. And the advantage of doing it that way is you get better atomic composability between EVM smart contracts and WASM smart contracts.
00:02:25.750 - 00:02:51.570, Speaker D: So that was the thinking. My main reason for doing that at the time was actually Terra, because Terra had a lot of momentum. So when Terra de, I just scrapped that project and went back to the drawing board, was chatting with the Celestia folks for a while, was chatting with some folks at Xerox park and finally ended up building eclipse because we wanted to address this gap we saw in the market for really highly parallelized high performance roll ups.
00:02:53.430 - 00:03:37.538, Speaker E: Hey, everyone, my name is Kotuk. Kind of started building on Ethereum in 2018, but then I caught the AIML hype of that time. But then I realized it was not for me. And back in 2020, I came back to the space and started learning, reading, and researching more about scaling in general. I worked with the Ethereum foundation in the PSE team a little bit, working on the Hubble roll up project and the BLS wallet project, and also worked with Lifepayer for a little bit, moved their protocol from mainnet to Arbitrum. And I think last year I took inspiration from Hubble and spun up stacker, and it was basically a framework for building roll ups. And, yeah, that's pretty much about me.
00:03:37.704 - 00:04:24.510, Speaker A: All right, thank you. So we are at modular summit, and so if you guys can briefly talk about kind of how roll ups as a service kind of fits into the modular vision of the world, and also if you can give a very high level definition of what a roll up as a service is for any of our new joiners that might not know. And I think there is this simile that some people use that like Amazon Web services is to web two as like roll ups as a service is to web three. I don't know if that's directly like a good comparison. And so if you could kind of explain what roll ups as a service is and kind of how that fits into the modular vision of the world, why don't we start with UIQ?
00:04:25.010 - 00:05:15.790, Speaker C: Great. So for rollout service, right? So I think we are talking about modular a lot today and probably tomorrow. So as we know, right, like two years ago, like Mustafa mentioned about this celestia, and also modular at that time, we are trying to move from this monolithic blockchain model to this modular model. In that case, we try to decouple the monolithic sort of design from this execution layer, settlement layer, DA layer, into multiple modules. Like Celestia handling this DA and execution basically belongs to different rollabs. Like we know that optimism, arbitram are all different ZK jolabs. And then we also have the settlement layer, typical ethereum.
00:05:15.790 - 00:06:08.450, Speaker C: So in that case, when we talk about modular for us, we mainly focus on this execution layer, really run the rollabs for the applications. So that's sort of the definition for the modular when we talk about the app as service. But as you mentioned, if in layman terms, it's really like AWS or cloud services in the crypto, world. So people can really just define the parameters names and just click a button and then quickly either use us or some of our projects platform to quickly launch a rollout for their application. It's either sort of EVM compatible, or it can also be wASM compatible, even SVM compatible, or even like JavaScript compatible. Right. It's really like in general execution layer, but mainly for a lot of these decentralized applications.
00:06:08.450 - 00:06:14.340, Speaker C: Sorry, my explanation a little bit long, it's not as short as the number one.
00:06:14.710 - 00:06:18.502, Speaker A: Do you have anything to add or take issue with YQ's answer?
00:06:18.636 - 00:06:43.766, Speaker D: I like that analogy. AWS for crypto. That's very flattering. I'm going to use that. Yeah, I feel like what's interesting, well, I won't get too much, I feel like I'll just say, but what's interesting about all layer is that it's reducing the fixed cost substantially by making it a short term roll up. That's kind of the idea, the ephemeral roll up, but yeah, roll ups as a service it's like managed infrastructure. This way you don't have to actually do the deployment yourself, and more than that, you don't have to maintain its reliability.
00:06:43.766 - 00:07:00.050, Speaker D: Some other team and you're outsourcing that to them. Though I think where it can go wrong is when the roll up as a service is spending too much time on consulting or things like that, because that's not scalable revenue in SaaS terms. And I mean Ras, the whole name, kind of tries to piggyback off the connotations of SaaS.
00:07:01.030 - 00:07:39.966, Speaker E: Yeah, of course. So also I think it is nice to make a distinction between roll up as a service and roll up frameworks for now. So as Neil mentioned, it's basically managed infrastructure for RASp projects. So for us it's mostly around the framework model. So it's interesting that still it can be thought about as AWS, because AWS has other services also that you can use to build the cloud project as well. So for us we think of it more in terms of building tools for creating those state machines and creating those roll ups instead of having a chain which you can deploy applications on. But yeah, the AWS example still works well.
00:07:39.988 - 00:08:00.930, Speaker D: I guess the reason why that AWS example doesn't quite work is because we don't own the hardware ourselves. At least I don't think any roll up as a service at this point owns it. And that's why AWS works so well, because they get economies of scale when more people use AWS, their data centers grow or whatever. It's like the whole Amazon flywheel. And maybe that is the direction that rollups as a service can move in. They start to vertically integrate even further.
00:08:01.090 - 00:08:28.286, Speaker B: Yeah. To build off of that for a technical audience, the example I like to give are platform as a services. So like a heroku or render railway, there are a bunch of these that are built effectively on top of AWS or GCP, but then offer services on top. That's effectively what I think all of us are doing. I suspect none of us are running our own hardware. We're all on top of a public cloud. I think that the definition was good, so I don't have too much to add.
00:08:28.286 - 00:08:57.720, Speaker B: The one thing I'll also say is I see roll ups as service, as the distribution layer for the rest of the modular stack. So if you have the roll up frameworks themselves, Stacker being one of them, you have DA shared sequencer networks, et know, but who are like the people and the projects that applications or people who want to build chains are going to come to. They're probably going to come to us. And so we get to act as kind of like the top of funnel for all the amazing projects lower in the stack and help them reach adoption as well.
00:08:58.810 - 00:09:15.470, Speaker D: One thing to keep in mind is like, Heroku never became a huge business though, because as a result, when a company got big enough, they would just move off of Heroku. So I think that's something that distinguishes roll ups to the service, which is that you want to build in something that makes it a little stickier or builds in a network effect into the whole deployment.
00:09:17.970 - 00:09:42.280, Speaker A: Let's back it up a little bit and kind of talk about do you think that kind of roll ups as a service only makes sense if we exist in a world where there are a lot of roll ups? This is a two part question. One, do you think we need roll ups, or whether you think that there will be a future with a bunch of roll ups and why do we need them as a service?
00:09:43.770 - 00:10:44.886, Speaker B: Yeah, I'm happy to go. So I think, honestly, there's less of a distinction between whether we need roll ups versus whether we need block space, really. Roll ups are on some level an implementation detail. And the reason why we've seen a lot of proliferation of roll ups as a service versus side chains as a service which could have been done back in 2017, 2018 and kind of was done with enterprise blockchain but didn't really go anywhere, is that with roll ups, it's much easier to provide them as a service the model makes more sense and it's easier to be more aligned with a chain like ethereum. And so that's kind of one of the reasons why we've seen proliferation of roll ups as a service. And the motivation behind that is just more block space and varying types of block space on blockchain networks. So all of us have probably spent some time talking about fully on chain games, on chain social, high throughput applications, high latency applications, all sorts of blockchain applications that are continuing to further blockchain as this platform for general compute.
00:10:44.886 - 00:11:19.134, Speaker B: If you see those trends moving, you need some way to scale. And roll ups as service, I think are just the easiest way to get there. And then the question is why roll ups of service versus just like roll ups in general or hosting it yourself? I think it is similar to the cloud services model where you could run things on bare metal. There was a time when people did that. I remember an anecdote from the early Facebook years. Every time they added a new university, they physically went into a server farm and racked a new server and added that to their platform. So you could do that in a roll up world without needing roll ups service.
00:11:19.134 - 00:11:21.480, Speaker B: It's just adding another layer of abstraction on top.
00:11:21.930 - 00:12:08.342, Speaker E: Also to add on top of that, you mentioned, do we need so many roll ups and stuff? So I personally see roll ups as more on the application side of things than chain side of things. So I think the whole theme for today has been, at least in this room, has been like, roll ups should be as easy to deploy as smart contracts. Right now we are building smart contracts, applications as smart contracts. But in the future, if we have better tooling and better infrastructure on that, we can just start building applications as roll up. So instead of applications being deployed on a roll up, application becomes roll up in itself. So I think one of the most prominent examples is DydX. So DyDX is like just doing before that, before it moved to its own chain, it was basically a stackx app.
00:12:08.342 - 00:12:15.160, Speaker E: And that's something which I see happening more once you build better infrastructure to deploy apps like that.
00:12:15.770 - 00:12:40.922, Speaker D: Yeah. All right. So that point on the block space being the reasoning, I guess what's interesting to me is there's a lot of commodity block space l ones out there and they're far from saturated. So I actually think that the biggest reason why people deploy their own chain is economics. And that also explains why we never saw side chains as a service. Because the fixed cost for a side chain for it to actually be secure is much, much higher. For a proof of stake chain, you actually need some amount of stake, probably millions of dollars to secure that chain.
00:12:40.922 - 00:13:00.166, Speaker D: And on top of it you need like 100 validators, each of which is burning some amount of money every month. So you're burning millions and millions of dollars, whereas for a roll up, the fixed cost is very low because you only need a small number of sequencers. So what you're inherently doing is you're reducing the fixed cost. And the trade off is that you've increased the marginal cost because now you have to post every transaction to an l one you have to pay for.
00:13:00.188 - 00:13:00.658, Speaker B: Da.
00:13:00.754 - 00:13:33.278, Speaker D: But the upside is that when there is execution, congestion and things like that, then you actually share in that upside. So you're going from being a rent seeker to being more of a homeowner. So that's my thinking. And yeah, as far as why roll ups as a service, I'd agree. It's not something that I think application developers should be thinking about as far as running their own stack. Reminds me of when people used to have their own in house data centers at Citadel. We used to have that actually, and it was actually much cheaper than using AWS if you don't account for the engineering time that went into maintaining that whole system.
00:13:33.278 - 00:13:49.720, Speaker D: So eventually we pushed everyone to AWS. That confused a lot of the portfolio managers because they're like, what, the in house thing is so much cheaper? That's because Citadel wasn't really doing the accounting properly. They should have been properly attributing the engineers that worked for the reliability team and trying to average out that cost as well.
00:13:50.330 - 00:15:02.070, Speaker C: Actually, I can provide some extra real world examples because we all talk about this block space in theory, right? So we know that your life can provide much cheaper block space. And also at the same time, if we can provide fraud proof of validity, proof, we can still derive the security guarantee from the l ones like Ethereum. But beyond that, we need some real world example, right? One of the example I can give is that we are working with one of the biggest gaming partners right now. So the thing like, they got a lot of ips from Saiga, Ubisoft and some of them. So the thing like they couldn't really do this manual consulting one by one for their partners. So what they have right now, like collaborate with us and later use us to launch for the games, they can make it scalable. Like for example, instead of assign like ten people or 20 people team like consulting company, and to talk to different sort of ips right now, they can just use us to quickly just click a bunch of buttons and quickly launch that multi sequencer with fraud proof rollout for them to serve their customers.
00:15:02.070 - 00:15:46.874, Speaker C: In that case, they can quickly just scale the business, not just talk to them one by one, but really once they got the deal, and then they can quickly smear off the rollout for them. That's something I believe probably if all of us, especially in the room, right, we believe in the web three future, we must probably eat the pie of Internet industry, right? So in that case, definitely we have to envision in the future more and more the mobile applications will use blockchain in the future, right. As a back end. So in that case, we definitely need a much more scalable and high performance infrastructure. So what we can provide at this panel for the developers to use. Yeah, got it.
00:15:46.912 - 00:15:59.280, Speaker A: Thank you. Could we go down the line and kind of talk about now? We are all convinced that rolls as a service is the future. Why is your project the one that developers should work with?
00:16:00.210 - 00:16:35.354, Speaker B: Yeah, great question. I think this is going to lead to some interesting answers for us. We're really focused on providing the most mature stacks that exist. So op stack optimism and arbitrum orbit. And also we have really high focus on customizability. Anything from changing the chain parameters easily using Alt Da, choosing which stack to use, all the way down to custom stateful pre compiles. We've been working on interfaces to allow developers to do that more, all the way to potentially additional vm level modifications as well.
00:16:35.354 - 00:17:02.820, Speaker B: We have a big focus on middleware. I think one of the things we've realized is just like as what it takes to produce a viable chain doesn't stop at the sequencer, we're really focused on providing additional infrastructure, looping in folks we work with, with other infrastructure partners, creating a broader ecosystem of modular services and modular infrastructure. And our focus is just on devex ease of use and getting people to the market with a viable roll up in the shortest amount of time.
00:17:03.670 - 00:17:29.734, Speaker C: So on our side, we are a little bit more crypto native. Most of the team members join the crypto space since 2016, building these public blockchains. So for us, we are mainly focused on this decentralization security. So the stuff you can use all layer via our dashboard. You just click button. Within two minutes you can launch a roll up. But what you can have is a decentralized sequencer.
00:17:29.734 - 00:18:09.480, Speaker C: You can choose the number of sequencers you have and also multivm support. Right now it's EVM and Wasam compatible. And beyond that, we also have our own proof system, so you can choose a settlement layer like Ethereum or the EVM chains. And later, if there are anything wrong, you can have challenger verifier to do the challenge for the proof. So these sort of, most of the advantage we have is really to highlight the decentralization and security. So that's why we spent like almost two years on the implementation for this multivm and proof system.
00:18:11.610 - 00:18:50.406, Speaker D: I guess my view is that all the roll up frameworks to some degree are in their infancy, and that especially optimistic roll ups, none of the fault proofs, are permissionless or enabled. So to me, what distinguishes different roll up frameworks or roll ups of service is what they chose to focus on and consequently what they could not focus on, because that implies a trade off in terms of their positioning. So for us, we focused on one was high throughput and high performance. And the trade off there is that the nodes are heavier, so they're beefier nodes, but they're very powerful. So you could run just an unheard of number of transactions. And we have games that are posting literally hundreds of transactions per second on chain, and it would only be possible with a parallelized EVM. So that's one reason.
00:18:50.406 - 00:19:26.420, Speaker D: And then the other thing is avoiding vendor lock in. And that's something that also implies a trade off to some degree, because it means that there's no strict allegiance to any ecosystem. You can actually pick which ecosystem you want your roll up to be aligned with. But as a result, eclipse itself is not really aligned with a specific ecosystem. It's more like people, when they deploy an eclipse chain, they choose the positioning for it and they have to make that positioning known. So that's kind of how I think about it, trying to think if there's anything else that really distinguishes, because I feel like all the integrations, things like that, everyone has to provide a block explorer, you have to provide bridges. These are just necessary conditions to having a viable roll up.
00:19:27.750 - 00:19:57.482, Speaker E: So for us, I think we stand a little different from all the other projects right now over here. So our focus is mostly on developer experience. So we want to build systems so that you have a very web two style of building web, three native applications, and that's what we are going towards. So it's not a chain that we are providing, it's a toolkit that we are providing. It has a bunch of library functions. So you can think of it as like how you develop, react front ends or something like that. You have like a whole component system.
00:19:57.482 - 00:20:35.160, Speaker E: You pick and place components and you just place them so that it just builds your own state machine. So that's the thing that we are focused on, making people easy, give them access to build their own custom state machines. And those custom state machines, we are calling it as micro roll ups because they are literally what you want them to do. So if you'd want to do like you want to build a token transfers application, you just pick and place the components required to do that. If you're building a gaming application, you just take in like an ECS system and you just build a state machine out of that. So that's the mode that we are trying to build in and provide.
00:20:36.010 - 00:20:47.126, Speaker A: So moving over to economics, how do you envision rolls as a service? Kind of monetizing, I guess we'll start with Neil.
00:20:47.318 - 00:21:13.650, Speaker D: Well, I don't think that there's anything realistic beyond fixed plus variable. The question is just like what is the variable fee charged on? Is it on the size of the transaction or is it based on volume or something like that? And then the question is how much is that fixed amount? And it should be some function of the cost of running nodes. It should be some function of just like the market, it depends on where the surplus accrues, whether it's to producers, consumers, but some variation of fixed plus variable.
00:21:14.870 - 00:21:47.626, Speaker C: So actually I really like the data, Neil, and also Matt just presented in the talk as we know. Right. I also give a talk at ECC on the first day. So the thing like we have to have the breakdown of all the roll ups either for the general purpose roll up or the application specific roll up. So in general it's like they all discussed, right? So three parts. One, the execution cost. So you can charge these part of fees from the users to cover your l two operator costs.
00:21:47.626 - 00:22:26.170, Speaker C: And probably also sometime when you post the data either to DA or to the l one. So this kind of average cost. Beyond that, they are also regularly post data to da, right? So for games, probably always prefer cheaper price. So then it's celestia, Eigen, da and Avo probably are the better solution. But in the end, I believe probably for all of us, we are trying to make it as modular as possible for developers and project. They can choose what kind of solutions or pricing plan they want. But for either it's sort of the normal pricing plan, different tiers, or we make it like pay as you go.
00:22:26.170 - 00:22:55.618, Speaker C: But in the end it's sort of like after the cost from running the infrastructure plus the service fees, we can charge from these developers or projects. Beyond that, I think one good thing for all of us. If some of these roll ups are quite successful by running these sequencers or executions, we can sort of have some premium on the l two fees, either from the users or from the project.
00:22:55.784 - 00:22:58.360, Speaker D: So how many different pricing plans do you guys have then?
00:22:58.810 - 00:23:14.294, Speaker C: No, I just give you one example. It's sort of like the multiple ways, right? You can try pricing plan, all these pay as you go, it's different models, but in general we need to cover the cost for the l two infrastructure.
00:23:14.342 - 00:23:15.946, Speaker D: Yeah, there's a lower bound on the cost.
00:23:16.128 - 00:23:22.190, Speaker A: So if you're talking about hypothetical pricing plans, I'm curious what your project currently is charging.
00:23:23.810 - 00:24:14.570, Speaker C: For me, to be honest, it really depends on the sort of customer. So I can give you one example, because we are providing different types of products, right? One is so called flash layer. So for some FT mint and also some games, they spin off the flash layer for a few hours and then they tear down. We roll up all the Ft back to the l one, like Ethereum Polygon. In that case it's like a one time charge for this flash layer, and another one is relatively like a persistent one. So in that case it sort of depends on the number of sequencers you choose and also the DA. So on our side we can charge sort of the infrastructure cost for the number of nodes you run by the same time, if it's really successful, there's a premium sort of from the fees we can get something like that.
00:24:14.570 - 00:24:33.890, Speaker C: But still, right? Really case by case, some game providers, I mean we work with them, they charge nothing from the users, they recharge nothing. So it's a zero gas we provide and basically in that case we can only charge the fees from the game providers. It's really case package at the moment.
00:24:34.040 - 00:24:38.870, Speaker D: Yeah. So gasless transactions are interesting because how do you prevent spam with that specific architecture.
00:24:41.690 - 00:24:47.366, Speaker C: For these games, right. They have typical, they have the wireless, have a wireless for you, there's some.
00:24:47.388 - 00:24:49.400, Speaker D: Kind of built something like that.
00:24:49.710 - 00:25:21.566, Speaker C: That's why I say it's really case by case. I mean a lot of these web two applications, probably stacker has similar experience. So their requirements are quite different from the crypto native applications. They don't really know how to install metamask, they don't really care. Like you tell them 15 seconds, 2 seconds, they don't care, they just want 100 millisecond. So what can you do? We have to make it very fast, but at the same time need to fulfill their demands on all this stuff. That's why just some examples.
00:25:21.566 - 00:25:26.578, Speaker C: But in the long run, definitely we can choose our customers, right, if we're becoming very big.
00:25:26.664 - 00:25:32.310, Speaker D: Yeah, well, I guess once you have a self service thing though, then you can't do it. So like case by case you have to have some standard pricing.
00:25:32.890 - 00:26:19.502, Speaker B: Yeah, if I might jump in here. I think one of the interesting things about the RasP space in general is any given pricing structure has certain kind of failure modes. If you're charging a flat fee for hosting maybe a small amount per transaction, you might end up securing billions of TVL, making a few grand a month on the other end. If you're trying to charge based on TVL or bridge volume, you might be supporting an on chain game with no activity for very little. So I think pricing models, yeah, it does sort of need to be a little bit bespoke when you're thinking about different types of applications. And really, at least for us, our north Star is just like, we want to price it so that the user feels like they're getting a fair deal with the value we're providing. And that might be different for different types of applications.
00:26:19.566 - 00:26:33.210, Speaker D: Yeah, that's an astute point about the failure modes of pricing models. And actually offering different pricing models makes that problem worse, because then the amount you make is the minimum of all of those. It's like not a great outcome, actually. You have to kind of accept the failure amount of your pricing model.
00:26:33.280 - 00:26:49.806, Speaker B: Well, it's like something of like an iterated game, right? Yes. You could find someone could act adversarially here, but presumably you're actually providing value to them. They have some value that they're willing to pay for.
00:26:49.828 - 00:27:01.154, Speaker D: Well, I think you can at least assume that people are economically rational, right. They're going to pick the best deal for their application. So if you have two pricing structures, people always pick the one for their specific application that's more favorable for that app.
00:27:01.272 - 00:27:09.046, Speaker B: Sure. But if the company ultimately has the decision, like the power to make a decision there, right?
00:27:09.148 - 00:27:14.070, Speaker D: Yeah, take the one that roll ups as a no.
00:27:14.140 - 00:27:18.762, Speaker B: I'm saying that the roll ups of service company has the decision of how to deal with.
00:27:18.896 - 00:27:21.500, Speaker D: Right? Yeah. You don't have to offer multiple options.
00:27:22.750 - 00:27:25.258, Speaker B: It's just like typical enterprise sales. Right.
00:27:25.344 - 00:27:43.460, Speaker E: Also, it's a question from you guys, like how we see things differently on the experiment side, but how do you feel like the companies running the application, like putting it the charges onto the user, how do you see that happens? What are your thoughts on that?
00:27:44.470 - 00:28:15.018, Speaker B: Oh, that's a good question. I think in certain cases it makes sense. You mean basically charging users transaction fees. It makes sense. In general, we, as a company, we're very skeptical on business models that are entirely dependent on that, on user paid transaction fees, just because there's pretty massive incentive misalignment there. Right. Like, you know, we, there are some folks working in the space who are like, they're taking some percentage of fees that users are making, and it makes sense now.
00:28:15.018 - 00:28:18.598, Speaker B: And you'll see a lot of vc tweets talk about this with optimism or arbitrum.
00:28:18.614 - 00:28:18.794, Speaker D: Right.
00:28:18.832 - 00:28:32.798, Speaker B: I don't know if anyone in the audience has seen these tweets. Like, once 4844 gets merged in, the margins that optimism and arbitrum are going to make are going to go to the moon. What's actually going to happen? Fees are going to come down. Margins aren't going to go up. Right. Margins are probably going to stay roughly the same.
00:28:32.964 - 00:28:42.260, Speaker D: Well, it depends on how that surplus is distributed. Right. When costs go down for a business, they can also make more money or it can be completely passed on to the customer.
00:28:43.670 - 00:28:50.182, Speaker B: Yeah, that's true. But historically, what we've seen is that these get competed down to very little.
00:28:50.316 - 00:29:01.658, Speaker D: I think that's because optimism and arbitrum, though, offer commodity block space. The user or the DAP developer doesn't care about whether they're deploying to one of those or the other, and therefore they compete directly, right?
00:29:01.744 - 00:29:19.870, Speaker B: Yeah, that's correct. It depends on how you view the role ups as service space. On some level, there's differentiation. I think we know that when users talk to one of us, they're talking to most of us. And so on some level, there's commoditization.
00:29:20.210 - 00:29:25.970, Speaker D: Yeah, I agree with that. The biggest benefits, which is economics, are common to all chains.
00:29:27.750 - 00:29:44.230, Speaker A: All right, let's move on to developer pain points. What are some of the common pain points that teams that you work with bring up and kind of how do you plan on solving them? And then also, I want to leave some time for questions from our audience after this question.
00:29:44.380 - 00:30:29.374, Speaker D: It's got to be liquidity, fragmentation, I think, and interoperability. And that's a tough one to answer because for a lot of apps, the right answer is that a roll up at this point is not quite right for it if it really needs to do heavy composition, especially atomic composition, and even through shared sequencers. Espresso had this awesome workshop yesterday on shared sequencers, and they gave this toy example about a bank, and the bank contract is on two chains. It shares a sequencer. So that sequencer produces full blocks for each of the two chains. And what you want to do is you want to put USDC on one side and get Dai out of the other. And the tricky part is making sure that it doesn't fail and you don't put USDC on one side and the DAI doesn't come out on the other side, or vice versa.
00:30:29.374 - 00:31:05.678, Speaker D: Dai comes out and USDC does not go in. And that basically relies on the builder providing a block, which is correct, because the builder can execute all the transactions. They know if the block they submitted is going to revert or not. So you want to make sure that builder is acting honestly. So then they said, you can just have the builder put up some stake, you can slash the builder. And to me that was like a fun example, but at first I was like, it seems reasonable. But then for like an hour after the talk, I was like, there's so many failure cases for that, actually, because if the bank could lose out and there's like collusion issues, the stake size, it was like the devils and the details there.
00:31:05.678 - 00:31:21.270, Speaker D: And also, how do you prove the transaction failure? Do you use the l one for. Maybe this is a tangent, but my point is that atomic composability is really hard to achieve between roll ups. So as a result, you basically have to kind of focus on apps that don't rely on that so much across chains.
00:31:24.730 - 00:31:58.766, Speaker C: Okay, I will continue using the real cases we handle recently. I think the major issues right now is still about technical issues. We have some back to the sort of the partner, right, the assassin. To have this kind of latency, you can have a try. It's like you must provide less than 100 millisecond. And basically you play a fully on chain, give every move on chain, but at the same time it's seamless and no latency. That kind of the ridiculous requirement asked by our partner.
00:31:58.766 - 00:32:47.538, Speaker C: So the deal is like, can you achieve it? If you cannot achieve it, then forget about it. So we have to spend a lot of time, a few months, to really optimize and reimplement the execution layer ourselves to make it EVM compatible to achieve this last 100 millisecond latency. But this is something like an extreme case, right? One case like this, another case, we also got some crypto native partners. They want like super decentralized sort of roll up system. They don't care about latency, but they want it as decentralized as possible and as secure as possible. Better. You have a lot of sequencers, but at the same time you must have a proof system, otherwise we won't use it because this one is used for public good or something that.
00:32:47.538 - 00:33:31.438, Speaker C: So it's really from one extreme to another extreme. This includes a lot of this technical development to tackle a lot of technical challenges which the existing general purpose l two haven't solved yet. But as sort of like a provider, we have to solve this technical question probably ahead of the big players in l two space. That's why I highlight there are a lot of technical challenges here. But do you think it's worth it? I believe so, because we all dream, like probably for the next ten years. It's a word for web three, right. So we want to handle like billions of users to use blockchain in the normal application.
00:33:31.438 - 00:34:01.020, Speaker C: So in that case, latency, we need to solve it. Decentralization, security, we also need to solve it. These are all the great properties for blockchain. But at the same time, you can see. Right. I feel like we are still in the early stage. It's not like we are talking about Russ and we feel like we already have four great companies, but at the same time there are a lot of new problems we need to solve, and I believe it's too early and we really together fix all these solutions for that.
00:34:01.870 - 00:34:30.482, Speaker E: So also we see developer experience, like building in web three itself, as a developer experience problem. And that is also something we would want to optimize for. So if you're building a game, you write some component in solidity, then you write a front end in some other language and then you connect them. And it's just hard. The integration is just hard. And also, like you mentioned, the latency issue. So we kind of categorize two different things, the developer experience and the user experience.
00:34:30.482 - 00:34:51.530, Speaker E: And we're kind of like optimizing for both. So you get both the web two experience for building web three. I've been saying that over and over. So that's the kind of thing that we are solving for on the experience side of things. It's not just the developer experience, but also the user experience that needs to go along with while building applications.
00:34:52.510 - 00:34:56.394, Speaker B: Yeah, I want to leave some time for questions, so I won't rehash what they said.
00:34:56.432 - 00:35:09.760, Speaker A: All right, do we have any questions from the audience? No. Yes, you just stand out, Joe. Actually, I'll come over.
00:35:13.010 - 00:35:14.906, Speaker B: In the case where you have applications.
00:35:14.938 - 00:35:17.426, Speaker D: That are seen as killer applications, do.
00:35:17.448 - 00:35:23.698, Speaker B: You expect that you have to compete between the four of you and offer sort of concessions to them to get.
00:35:23.704 - 00:35:24.994, Speaker D: Them to build on you instead of.
00:35:25.032 - 00:35:26.674, Speaker B: Some of the other people that are there?
00:35:26.872 - 00:36:12.386, Speaker D: I think there are cases when a roll up framework is uniquely suited to serve a particular application. And to me, things like virtual machine compatibility actually result. They actually represent a reduction in fixed cost or one time cost for a user to use your ras. For example, if you have SVM compatibility, technically Dap coming from Solana doesn't have to use you, right? They could use an EVM chain, rebuild all their smart contracts and EVM. And that's what's funny. I remember when Starkware was writing the contracts for DyDx and Cairo, people were dunking on that a lot, but actually they were interpreted, to me, Starkware was doing exactly the right thing. All they were doing was it could have been built by DydX or it could be built by starkware, but that's just some cost that's being incurred by someone.
00:36:12.386 - 00:36:32.250, Speaker D: They're just saying, we're not going to pass it on to you, we're going to incur it ourselves. So I thought that made sense. But yeah, there are cases where definitely we'll be talking with a few different. They'll even just tell us, hey, we're talking to these other folks. These are the models that they've given us. Could you just highlight the differences rather than giving the whole rehash?
00:36:33.070 - 00:36:58.020, Speaker B: Yeah, you mentioned concessions. I think people are less focused on concessions when it comes to pricing and business model than they are on which service makes the most sense for them. This is for a lot of applications, like the biggest infrastructural architectural decision they will ever make, at least for that version of the product. And so typically we find it's more on the fundamentals than on price or anything else.
00:37:01.750 - 00:37:15.720, Speaker F: Should I just shout thanks? On some level, obviously you're all kind of competing with each other, but I wanted to ask who you view as your biggest competitors, maybe in kind of an unexpected way?
00:37:16.890 - 00:37:17.398, Speaker A: No.
00:37:17.484 - 00:37:44.986, Speaker F: Hang on. Pick someone to cage fight amongst the four of you. No. Is it like apps looking app developers looking at the cosmos ecosystem to have more modularity and control over their stacks? Is it other l ones? What are the alternatives that your customers are looking at outside of launching their own roll ups?
00:37:45.098 - 00:38:09.714, Speaker D: It depends on the stage of development that the application is in. It depends on the vertical and things like that. But overwhelmingly, the competitor is actually the status quo, just whatever they're already doing, because it just is cost for them. But they have to put in a lot of effort to switch to another chain. They're not necessarily even going to have their own chain. I find that usually it's not between cosmos l one versus roll up. I find that that's not as common as I would have expected.
00:38:09.714 - 00:38:25.470, Speaker D: And I actually thought that we'd be competing with Salana more initially just because they're also a high throughput chain. Then I guess Solana kind of favor became totally irrelevant. Oh, they are. No, I think it's Solana. I'm super long. Like, totally. And those guys, I think they're really smart.
00:38:25.470 - 00:38:33.486, Speaker D: Yeah. But that's just reality. Who we typically find we're talking to. Yeah.
00:38:33.508 - 00:38:53.640, Speaker E: I think to his point, like, the stage of which the project is at, it's the most important thing. So some may want to spin off of an existing l one protocol to roll up as a service, or some projects which are just starting out might just pick a chain to just build off of or a framework to build off of. So I think that's very important.
00:38:54.490 - 00:38:59.670, Speaker A: All right, I think we're out of time now, but let's give a big round of applause to our panelists.
00:39:03.290 - 00:39:03.654, Speaker D: And.
00:39:03.692 - 00:39:07.700, Speaker B: A round of applause to our moderator, please. Thank.
