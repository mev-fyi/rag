00:00:01.840 - 00:00:46.410, Speaker A: Hi, everyone. I'm shay. I'm from flashbots, and my talk today is going to be an optimistic and futuristic talk about what MeV on Ethereum could look like in 2025, thanks to, in particular, new technologies like trusted execution environments, or tees, that have sort of fundamentally changed the trade off space in MeV. First, I want to briefly explain why you keep hearing people talk about tees. You know, why now, and why in MeV we care so much about them. Second, I also want to look at how tees can upgrade the MEV supply chain. So from block building to searching to relays, and even how we actually kind of define those roles to begin with.
00:00:46.410 - 00:01:46.900, Speaker A: So why tees? I think it's long been clear that the optimal MEV application, like a block builder, will have three properties. It'll be fast, meaning it's performant. It lands transactions quickly on chain, which is very key for UX and high load use cases like searching. It'll also be private, which means that it keeps sensitive data from being leaked and front run, which is important because information actually has financial value in MEV. And finally, it'll be decentralized, meaning that it keeps. No one party can control the system, so everybody can trust it to treat them equally, which is really important, actually, because in block building, value increases combinatorially, not linearly, with the amount of flow that you have. So a decentralized builder will be able to create more valuable blocks, because it can capture more flow from parties that would otherwise compete with each other and sort of maximize the natural economies of scale.
00:01:46.900 - 00:02:34.600, Speaker A: There's actually a lot more to say about this trilemma, but for now, I'm going to move on. I did give an earlier talk at ECC if you're interested, but I think the TLDR from this is that the reason we call it a trilemma is because so far, it's not been possible to get all three of these things at once. You know, all we really have today are partial solutions. So centralized builders are fast and private, but not decentralized. And you actually have to trust them for privacy, which doesn't really scale. The public mempool is decentralized and fast, but obviously not private, which means that users tend to get front run, and then they fragment their flow to private mempools. And finally, cryptographic privacy could actually solve this, but it isn't performant enough today for me use cases where basically every millisecond counts.
00:02:34.600 - 00:03:20.078, Speaker A: So the reason that you keep hearing people talk about tees is that we think they can solve this trilemma because they give us privacy and integrity without having to trust someone. So instead of trusting a centralized builder, you can just safely send flow to any Ted operator. Like a trading firm, for example, could send their bundles to a builder run by another trading firm. And because of this property, we can actually get a lot of people to spin up a lot of these nodes, which gives us architectural decentralization. You'll actually probably hear a lot more about tees in other talks. I'm not going to go into detail about how they work. What I actually want to focus on is the properties they give us and what that means for applications specifically.
00:03:20.078 - 00:03:45.452, Speaker A: Can you actually run applications in mev in this, like, block building? Are tes fast enough? Basically. So we tried this. This is the flashbots rust builder. It's a new block builder that we open sourced about a week ago. And it's fast. Builds blocks in, oops, in sub 100 milliseconds. But we basically wanted to know, if you take this really fast builder and you put it in tees, will it still.
00:03:45.452 - 00:04:13.616, Speaker A: Still be fast? So, not to frontrun myself, but we did that and it was fast. It built blocks in sub 100 milliseconds. So once we saw this, we thought, well, okay, that's very interesting, but benchmarks are easy to game. We don't know if we should trust this, so we should actually test it out. We should put half of our production builders in tees. So we did that, and they actually started landing about half as many blocks as our vanilla builders. This is actually a screenshot from a couple months ago.
00:04:13.616 - 00:04:49.640, Speaker A: Recently, it looks a little bit different because of some unrelated quirks, our infrastructure. But what's very interesting is when we normalize for that, they're actually on par. The final thing. Oops. The final thing, final thing I want to note is that even flashbots can't see your bundle data. So the code that we're running is actually open source, which means we can attest to what's running in the tee. So if you submit a contribution to our builder, you can prove that it's running in prod on one of our tees.
00:04:49.640 - 00:05:37.640, Speaker A: And if you submit bundles, you can check exactly which version of the code is live. And as this slide says, we actually have a working builder with attestations today. So if you send to it, we don't even know what you've sent us. So the answer is actually yes, you can run block building in trusted hardware, and we're doing it today in your native performance. And this is one of the reasons that you've probably been hearing about tees so much because we can finally use them to performantly and securely run some of the most intense MEV applications. And this really opens the floodgates, I think, for what we can do. So what should we do with this? There are three main things that I want to look at, builders, relays and searchers, and how we can upgrade all of them with tees.
00:05:37.640 - 00:06:17.874, Speaker A: So I'm going to start with block building. Recently we have heard from a number of users that the current MEV auction on Ethereum is not serving their needs generally. To speak in some high level what most of them want is a sealed bid second price auction, where bids are private and users are refunded. So they only ever pay the second highest bid. And the reason many people want this is because it tends to be simpler and cheaper for users. So what's interesting is one property we get from the tee builder is that it is a credible private auctioneer. Te operators can tamper with your transactions or selectively censor them.
00:06:17.874 - 00:06:41.810, Speaker A: And it's easy, obviously, to encrypt bits and keep things private. And this means also that the tee must execute the rules of the software, like an auction as you define it. So we built this. As of this week, we're giving second price refunds to everyone who submits to flashbots. So if we could include you at a lower price, you get a share of our builder profit. That's it. It's pretty simple.
00:06:41.810 - 00:07:16.030, Speaker A: What's notable about this refund rule is that it's open source and we can run it securely in tee. So this is a screenshot from our public docs, and that means that there is no way for anyone to tamper with the auction because the tee builder actually can't change it without invalidating its own attestation. And this means we basically have a credible second price sealed bid auction. That's a mouthful. Implemented via refunds in this tee builder. And like I mentioned, a lot of people have been asking for something like this for a while. So I wanted to look at two cases that I think are pretty exciting.
00:07:16.030 - 00:07:45.190, Speaker A: The first one is searching. So searchers really want to pay the second price on their bundles. And there's a very good reason for this, because they make more money. We looked at a bunch of markouts recently for some sextext firms and tried to estimate what would their profit have been if they paid the first versus the second price. And we saw that in about three months on just one pair. So this is Ethiopia, the difference in those prices is something like a million dollars. For the top firm, paying the second price is kind of a big deal.
00:07:45.190 - 00:08:39.270, Speaker A: It's actually such a big deal that many of these firms today are vertically integrated and run their own block builder. Because if you run a blockbuilder, you can make the Mevboost auction second price by basically observing all the other public bids and kind of adjusting your own bid accordingly. But while this is a very rational behavior, you make more money this way. It has a bunch of negative externalities. If you're in this room, you've probably heard us talk about these, but you know, vertical integration tends to be centralizing, causes order flow to fragment, leads to rent seeking on user transactions, and it just kind of degrades the whole market structure. So what's exciting is that with a tee builder, we can let everybody participate in a second price auction. So searchers can make that $1 million or whatever in extra profit without actually running their own block builder, which actually could be key to reducing some of these like, very core centralizing forces in MeV.
00:08:39.270 - 00:09:23.322, Speaker A: And searchers also aren't the only ones who could benefit from an auction like this. There's a lot of demand from roll ups too. So if you remember a few weeks ago, during the layer zero airdrop, there was a massive spike in transactions from users on rollups who were trying to claim their airdrop. And this caused the l one blob market to spike because rollups were trying to post Daein, and it basically stayed that way for hours, which meant that blobs could not get included quickly, consistently, and they all paid really high fees. So this is a funny example. They actually sometimes paid more than call data, which is what blobs were supposed to replace. So this is, I think, blast paying something like five eth more for their blob than they could have paid in call data.
00:09:23.322 - 00:10:06.890, Speaker A: I think Matt from block native shared this example, which I think is funny, and there are a lot of reasons why it's hard to land blobs. A couple of these things have to do with what I'll call the UX. So basically, you have to only choose one blob transactions per slot. They're really expensive to replace, they're big, they're slow to propagate, and people are working on this part. But I think even if you solve this sort of like UX side of the problem, there's still a more fundamental issue, which is actually the auction. The worst externalities that we see during periods of congestion with blobs like, people overpairdeze paying like this or waiting hours for the market to clear. These things usually happen because of how the l one mev auction is structured.
00:10:06.890 - 00:10:58.676, Speaker A: Specifically, it is a public first priced auction. It's the Mevboost auction. And you know what it takes to do really well in the Mevboost auction? Well, it's to be as sophisticated as a block builder. And most of those builders are also searchers because of vertical integration. So when blob prices spikes, roll ups basically have to turn into searchers, um, and they have to watch each other's bids and manually adjust their strategies, uh, which is extremely tiresome and also just orthogonal to the sort of expertise you want to focus on as a roll up. This is a direct quote also. But what if this auction was second price and the bids were private? Then rollups could just express their true willingness to pay and know that the auction will refund them if they overpay relative to markethouse, which could avoid some of the massive overpayments that we've seen.
00:10:58.676 - 00:11:40.284, Speaker A: Also, if the auctioneer is credible, then roll ups are protected against manipulation by maybe other sophisticated actors, like builders that get involved. And what's nice about a tee builder is that it can provide both that credibility and, with second price refunds, actually enforce the optimal auction. This is exciting. I think preventing centralization in vertically integrated searcher builders, scaling Ethereum through an efficient blog market are really important goals. And the tee builder basically gives us a path to improve both of these things. Okay, so that's the builder. Now, I kind of want to look ahead to other parts of the MEV supply chain and how we can use tees to upgrade them.
00:11:40.284 - 00:12:21.072, Speaker A: So I think a natural next step here is the relay. Today, if you're not familiar, you know, Mevboost relies on centralized relays to connect validators with a market of block builders. And these relays provide very essential guarantees, things like data availability, validating blocks, preserving privacy. But in the long term, it seems pretty suboptimal for Ethereum to rely on a few centralized actors to lend something like 90% of blocks. So for this reason, replacing the relay has been a sort of longstanding goal in PBS. But if we want to replace the relay, we need something that gives the same guarantees. I think tees are the tool that can give us the same guarantees.
00:12:21.072 - 00:13:05.044, Speaker A: Specifically with tees. We could actually change MeV boost to allow validators to connect directly to block builders. And the flow could look something like this, where tee builders generate a tee proof which demonstrates that their block is valid, and they send that with a header to a validator who can then validate this proof to confirm that the block is correct. And this would actually remove the need for a relay in the get header call of Mevboost. And on top of that, it actually gives you better guarantees. So it gives you better privacy because the builder never needs to reveal its payload to anybody during get header, it just sends a proof. And this is actually much better than today because relays have to see the payload during get header.
00:13:05.044 - 00:14:03.898, Speaker A: It also, I would say, gives us better integrity because the risk of a malicious relay submitting an invalid block is probably much higher than the risk of spoofing tee proof, which basically you'd need a bunch of different people to collude to make that happen. So we could actually have better privacy and integrity guarantees and no centralized relay in the loop. I'm actually just focusing on the get header call like I mentioned today, but I think it's exciting to think about what MeV could look like if you actually don't have an MvBoost relay might look like this. You could effectively combine the builder and the relay into a single system. And if the tee builder can be decentralized, as we think it can, then so can this sort of combined tee builder relay. And also, if you run all of this in one place, then you don't have the latency penalty that we have today. With relays, there's no extra hop between builders and validators.
00:14:03.898 - 00:14:52.280, Speaker A: And because you have less latency, you can actually produce more valuable blocks. One other interesting consequence of this is that the tee builder relay might actually also give us something on the Ethereum roadmap, which is encrypted mempools. We want encrypted mempools for a bunch of reasons, a big one being censorship resistance. And if you have a unified sort of tee builder relay system, then transactions would be entirely private from when they're submitted to this network of tees to when they're revealed to a validator. So in sum, I think these developments on the relay side could give us a path to address two very important challenges. First, the centralized relay in Mevboost. And second, encrypted mempools.
00:14:52.280 - 00:15:53.440, Speaker A: And I think with this step, there's a picture that starts to emerge of what the next phase of the MEV supply chain looks like, which might actually not be a supply chain of discrete actors, as we're accustomed to thinking about it, but more of a single, unified and decentralized system. So to complete that picture, I want to look at one final important actor in MEV, which is searchers. Okay, so, so far we've been concerned mostly with public verifiable code, open source code running in tees, but you can actually also, we think, run private programs in tes. We've been researching some techniques to do this, I'll call them sandboxing, to give it a word. And sandboxing basically lets you create an environment with very specific constraints so that a private program can run in it, so long as it adheres to certain rules. So something like we add restrictions about how inputs can be sent in and what outputs can be sent out. So you don't have data leaks.
00:15:53.440 - 00:16:42.000, Speaker A: But, okay, that's like cool. That's very researchy. You know what private programs are most interesting? Well, what about searchers? Imagine you could put a whole searching program inside of a te with sort of constraints around what it can accept and what it can output to protect both the searcher's alpha and user data. Then you could imagine a tee builder which sends opportunities to the te searcher that generates some new bundles and sends them back. And this actually also unlocks something that we can't do right now, which is searching with full information on private state. So today, searchers don't actually have access to full information about every opportunity. In an order flow auction, you might only see the pool somebody's trading on, and in other cases nothing is available.
00:16:42.000 - 00:17:17.890, Speaker A: So an interesting example here is at the bottom of every block, there's often an arbitrage opportunity. And these Arbs can be quite valuable, but there isn't a secure way to search on them without leaking state information. So many builders just don't capture them today. But if we can make opportunities like this available and give searchers full information when they search, you could actually generate a lot more profit, something like five times more. So take bottom of block arbs, for example. With tees, builders can safely outsource. So we could actually get privacy in both directions.
00:17:17.890 - 00:18:02.738, Speaker A: The builders and their users get privacy from searchers because they're kind of constrained by the sandbox that they're running in. And the searchers also get privacy if they're submitting back to a tee builder because it can't see their bundles. And this is actually one of the next things we're working on at flashbots. This is an internal screenshot of a prototype, so it's very cool. We're also excited about how TT searchers can upgrade other products, like order flow auctions or even maybe create new types of ofas between searchers who have very sensitive data. So this can make ofas like Mevshare, which is a screenshot from Mevshare five x, more efficient, we think, than they are today. The other thing I'll note is that most of the things I'm saying here, I've been saying searchers, but they can apply to solvers, too.
00:18:02.738 - 00:19:01.650, Speaker A: So, you know, searching for arbs at the bottom of block, for example. Okay, so in the limit, you could imagine that the end state of searching starts to look more like this, which is a nexus of tee searchers, all cooperating and passing opportunities and bundles between a te builder and themselves. And by doing this, they can actually access new opportunities without risk to either users or their own alpha. And over time, you might even imagine the Te builders start to outsource more of its responsibilities to searchers. So even moving on to core functions of block building, like bundle merging, and even beyond that, you could imagine other block builders today kind of joining in and running parts of this computation. And at that point, I think the distinction between builders and searchers starts to blur. It just starts to seem more correct to think of them as being just different nodes in a unified but distributed system of tees.
00:19:01.650 - 00:20:03.064, Speaker A: So, to close, I think that in 2025, the MEV supply chain might look less like a traditional supply chain and more like a sort of distributed, decentralized network of many different programs that are running in tees with certain guarantees and rules, like sandboxes, that constrain searchers from exploiting user data or integrity and availability guarantees. So validators receive good blocks. And this could let us sort of break out of today's mold, where we've created these divisions of roles for safety and to prevent one actor from centralizing MeV. But now, with Tees, we can actually safely unify essential functions in one place that's both more efficient and more decentralized. You might even call this a single unified auction for value expression, or suave, if you want to be fancy. But I think what's very clear is that, whatever you want to call it, this is where MEV is going in 2025. So very excited to build it.
00:20:03.064 - 00:20:03.240, Speaker A: Thanks.
