00:00:27.634 - 00:00:49.814, Speaker A: Welcome everyone to another workshop for the infinite space Bazaar. Today I'm excited to welcome Mustafa, CEO of Celestial Labs to teach us about roll ups as sovereign chains. Mustafa, welcome. We're glad to have you here. Yeah, good to be here. Would you like to do a quick intro and then we'll get started?
00:00:50.634 - 00:00:57.224, Speaker B: Yeah. As you said, I'm co founder CEO at Celestial Labs, which was a project started in 2019.
00:00:59.404 - 00:01:03.304, Speaker A: Awesome. Get to it.
00:01:04.564 - 00:02:19.445, Speaker B: So as Josh said, I'm going to be talking about roll ups as sovereign James, or this idea of sovereign roll ups. And I'm going to be talking about, first of all, before talking about sovereign roll ups, let's take a step back and discuss like what are roll ups? And then how do they differentiate from sovereign roll ups? And then I'll talk about like why sovereign roll ups are a good idea and why they can be useful. And finally, I'm going to talk about some of the existing states of sovereign roll up frameworks or how you can build sovereign roll ups. So first of all, like, what are roll ups? Fundamentally, roll ups are basically blockchains that post their transactions to another blockchain known as data layer. So it's effectively this idea of separating consensus and execution. And the point is that a roll up could have a set of sequencers or even one centralized sequencer. But you don't have to trust that sequencer to behave correctly, because even if that sequencer misbehaves by including invalid transactions in the chain, someone could easily challenge that using a fraud proof to prove, using the data posted on data layer that those transactions were invalid.
00:02:19.445 - 00:02:52.364, Speaker B: Or the sequencer could be required to post a ZK proof to prove that the transactions were actually valid. So you have three different types of roll up nodes. You have the sequences which make the roll up blocks. You have the full nodes which you can run a roll out full node. And full nodes verify the roll up chain by re executing every transaction and potentially making for proofs if the transactions are invalid. And finally, you have light nodes. And in the case of Ethereum, that could also be an on chain light node that acts as a bridge.
00:02:52.364 - 00:03:55.084, Speaker B: And this light node is basically taking block headers and verify the roll up chain by checking the fraud or ZK proofs. And this is basically fundamentally what the idea is of a modular blockchain that separates consensus and execution. Roll offs do the execution, whereas the base layer is only responsible for consensus and data. And you basically have three elements, execution, settlement and consensus, and data availability. In the stack, consensus provides ordering over arbitrary messages. Data availability provides a verifiable way to actually publish those ordered messages so that you can prove to anyone that those messages are actually available to anyone that wants to download it and might want to reconstruct the chain, the state of any roll up that has posted that data to the data layer. And finally, you have the execution layer, which performs computation over the transactions to output a state which might be an account, a list of accounts and their balances.
00:03:55.084 - 00:04:27.414, Speaker B: And finally, you have a settlement layer, which is kind of like the most controversial loaded one. And in this presentation, I'm basically defining a settlement layer as a special case of execution layer that bridges or that provides a bridging hub between other execution layers. So for example, roll up a and roll up b might want to transfer funds to each other or between each other. They can first transfer it to the settlement layer, which verifies the headers and for proofs and validity, proofs of these roll ups, and then transfer it to roll up b, or vice versa.
00:04:28.914 - 00:04:33.214, Speaker A: And what a good ex, what's a good example? Oh, there we go. Sorry.
00:04:34.794 - 00:05:10.914, Speaker B: Yeah, obviously Ethereum is a good example of that. Ethereum is a, acts as a solid meth layer for these roll ups. So on Ethereum, as I mentioned previously, roll ups have light nodes, and those light nodes can be on chain. And the bridge contract on Ethereum is basically on chain light node for roll ups. The bridge contract downloads the block headers or receives the block headers for the roll up. And it can verify fraud or biology groups. And Ethereum in this case is basically acting as kind of enshrined settlement layer.
00:05:10.914 - 00:06:09.074, Speaker B: And the reason why it's an enshrined settlement layer is because it's the bridge contract on Ethereum that's defining what the correct or canonical roll up chain is. So if the sequencer decides to like fork a chain, if your roll up is not a sovereign roll up, but has enshrined Ethereum as a settlement layer, then the ultimate source of truth will be that bridge contract. So it's the bridge that defines that roll up. But let's talk about solvent roll ups. And how do they differ from roll ups that enshrine settlement? So first of all, we have to remind ourselves that roll ups are basically blockchains with their own, what's called a fork choice rule. A fork choice rule is basically, as I mentioned, if a roll up has a fork, let's say you have a malicious sequencer in that roll up, and they fork the chain. They say at block one, at height 1000, they produce two conflicting blocks right.
00:06:09.074 - 00:07:46.730, Speaker B: Then you have to basically choose, the network has to choose or figure out what is the correct gain. And that fork choice rule basically resolves that conflict by choosing which is which part of the fork is actually the correct chain. So, for example, in proof of work, that will be settled by whichever block has the most proof of work, in proof of stake, that will be settled by whichever fork has the most accumulated stake. For example, for roll up, that's typically, that's typically figured out by how the blocks are ordered on data layer. But it depends if it's a sovereign roll up or non sovereign roll up. So in the case of a kind of like a typical roll up, as I mentioned, the fork choice rule, whether it's sovereign roll up or non solving roll up, the Volkswagen rule only says that a specific block is correct if that block, in the case of a ZK roll up, has a correct balancing proof, or in the case of a optimistic roll up, does not have any fraud proof within a specific challenge window. And if you think about it, roll ups are actually very similar to this pre Ethereum protocol called Mastercoin, which was first, kind of like first in 2013, where the Mastercoin protocol basically is very similar to this idea of a sovereign roll up.
00:07:46.730 - 00:08:25.888, Speaker B: Because you can, for example, USDT or tether is actually built on this protocol, on the bitcoin protocol. And what Mastercoin basically does, it allows you to create other, other chains or create other protocols on bitcoin that basically use bitcoin as data layer. By using. By embedding data in bitcoin transactions. By embedding data in bitcoin transactions, you're basically only using bitcoin as a data layer to order and make available those transactions. But the execution of the transactions are basically happening off chain. But there's no bridge to bitcoin like Mastercoin protocol or tether.
00:08:25.888 - 00:09:04.424, Speaker B: You cannot bridge those assets to bitcoin or back and forth. So there's no bridge contract that defines what the correct choice, what the correct fork or view of that roll up is. Instead, you can say that's a sovereign roll up. Because ultimately it's the end users that define what the correct fork choice rule of that roll up is, or what the correct fork of that roll up is. As I mentioned, in the case of Ethereum, we have Ethereum roll up with each Ryan's element. The full choice rules. That roll up is basically wherever headers are submitted to that the smart contract on Ethereum.
00:09:04.424 - 00:10:04.412, Speaker B: And importantly, you have to remember that because these roll ups have fraud availability proofs. That means those roll ups have what's called the state transition function. And that basically defines what the rules, what the transaction validity rules of that rollover are. So for example, things like what transactions are valid and what transactions are invalid. And so that means ultimately it's the Ethereum smart contract that defines what transactions are valid or what transactions that are invalid according to the forward or validity proof system. But the key, but with sovereign roll ups, the key difference is that because you're not enshrining a specific bridge contract, you're basically saying that it's not the bridge that defines the roll up, it's the users of the chain that define the roll up. And so what that means is that it's not the bridge that defines what transactions are valid or invalid in that roll up, it's the users that do.
00:10:04.412 - 00:11:06.714, Speaker B: So for example, the users could decide to hard fork their roll up. Like let's say they wanted to. Like for example, you know, a few years ago, there was this massive hack on Ethereum called Dow Hack with something like 5% of the e supply was compromised and Ethereum did a hard fork to undo that hack. Because Ethereum is a sovereign chain. Like who defines what the correct Ethereum chain is, is ultimately the end users of the system that defines what the correct chain is. So like if they, if they, if the Ethereum community decides to hard fork or doing some kind of network upgrade, and that is not backwards compatible with the previous chain, they have the ability to do that because it's a sovereign chain, right? But whether if they roll up enshrines a smart contract as a bridge or for settlement, then the roll up will not be able to do that. Unless that smart contract is upgradable, which may break, which depending on how that's done, might defeat the whole purpose of a roll up.
00:11:06.714 - 00:13:23.504, Speaker B: If there's, if there's a multiple, if there's upgrade heat, for example, so seeming like it's a kind of a pure roll up where a maximally secure roll up with no upgrade keys, then users, like then the end, it's not the end user that decides even if there is upgrade keys, it's not the end user that decides what the correct, what the, what if the roll up could be hard fork or not, it's the bridge that decides, sorry, I have a bit of a cough. And if the bridge has upgrade mechanism, then what that basically means, let's say that, let's say that bridge is some committee, for example, then that's basically saying that the committee is deciding what transactions are valid or invalid in that roll up? And in some way that kind of defeats the whole point of blockchains, because the whole point of blockchains is that you're not supposed to rely on any specific honest majority of people or some committee or even a DAO controlled by tokens to enforce the protocol rules of that chain. Because if you do, what that effectively means is that you're, that means you're effectively saying that some committee can, for example, steal, like violate the rules of the chain and steal all your money, for example, or print new money off in there or blacklist someone. And that's not the threat model of the bitcoin or Ethereum l one, for example. So with sovereign roll ups, assuming that there isn't some enshrined bridge, the upgrade mechanism for roll up is not some bridge, but it's the end users of the chain. Now an interesting question about this is that now this is in theory, but in practice you might ask like what does it look like in practice? Like if for example, 99% of the assets for roll up are coming through one bridge. In short, even if that roll up in sovereign, then maybe in practice it's not really a sovereign roll up because the Ethereum smart contract is ultimately has so much, has so much influence over their roll up that like also the pretty much sovereignty is lost.
00:13:23.504 - 00:14:33.414, Speaker B: Now this is how comparable to, for example, like if you think of like Ethereum, if you think of USDT and USDC. USDT and USDC are basically like roll ups or not roll ups, but USD bridge to Ethereum via a centralized third party. So in that sense, you can potentially consider Ethereum to be a sidechain to USDC or USDT. Because if you think, if you think, consider for example, if Ethereum wants to do a future controversial software upgrade, then, and you know, tether or circle doesn't like it and they don't abide, they don't upgrade their software or they don't participate in the hard fork. In practice, we might end up in a situation where even though the Ethereum community agreed that this is a good upgrade to do, then the market will decide that, well, we don't want to be on a chain. That's where the USDC and USDT has no value and circle until they will honor the value of those USDCs and USDT. So we're also going to reject the hard fork.
00:14:33.414 - 00:15:31.694, Speaker B: In that kind of scenario, USDC and USDC would have overwhelming power or reduced the sovereignty of Ethereum as a chain. So similar to like if a smart contract, if a roll up has 99% of its assets controlled by one smart contract bridge, that'll be a similar scenario. But where software roll ups do make more sense and are kind of like interesting is if you're create, not all roll ups are designed to necessarily scale l one. So for example, you imagine a scenario where a roll up, the most of the value of the roll up comes from assets not bridged from other chains, but from assets minted inside that roll up itself, for example. And that's in that scenario, then it kind of makes sense. Then the roll up will have a lot more sovereignty because the bridges will have way less value. That's a bridges would have less, could have way less value than the actual assets natively minted on that chain.
00:15:31.694 - 00:16:22.564, Speaker B: And also another similar scenario could be maybe you don't only have one bridge controlling 99% of the assets of the roll up. Maybe have like multiple bridges, maybe have like three or four bridges. This is like something that optimism is like wants to do. So for example, like maybe a roll up has multiple canonical bridges, maybe has like a ZK proof bridge as a ability bridge. It has an optimistic bridge. And let's say like it's not the case that 99% of the assets are through one bridge, but they're all equally distributed across multiple bridges. Then it's the case that the roll up hasn't necessarily lost all of its sovereignty to one specific bridge, but there's multiple bridges, are participating in the fork choice rules that roll up.
00:16:22.564 - 00:17:13.026, Speaker B: If they're, if the community that roll up wants to do hard fork, then you have multiple bridges deciding whether that bridge, their bridge should participate in that hard fork or not. If you think about like a sovereign roll up with a non enshrined bridge. So like, if you think about like a. Normally, if the. So if the sovereign roll ups don't share a DA layer, then effectively they would have no shared security. But if they have, if they do share a D layer, that they would have shared security and their sovereign roll ups could still bridge each other. It's just that, as I was saying, it's not so much that one single bridge, like in one smart contract, potentially upgradable y wan committee is controlling, is deciding the entire full choice of that roll up.
00:17:13.026 - 00:18:23.914, Speaker B: Because 99% of assets entire bridge. But you can have multiple bridges. And because that roll up might have most of its value in minted native tokens, then it's the case that that roll up and then the for choice of that roll up is more kind of vaguely defined by the ecosystem of that roll up. And to me this is very important because as I mentioned, that the whole point of blockchains to begin with is not that some committee or some upgrade committee can decide unilaterally to violate the transaction rules of a roll up and for example steal someone's money or print more money after there, according to some like government order or regulations or politics. But the whole point of blockchains is that there's basically trust minimize, and you don't have to trust any middlemen or third parties to behave accordingly through the chain. Because the whole point is that you as an end user can run a fully validating node that actually verifies that the chain is correct. But if you give the power of the or to a single bridge, then, and pretty much give that roll up no sovereignty, then to me that kind of defeats the whole point of using a blockchain in the first place.
00:18:23.914 - 00:19:31.424, Speaker B: So that's why I think sovereign roll ups are kind of important to make sure that roll ups are kind of similar, more similar or more aligned with the whole point of blockchains in the first place, and closer to the actual security model of bitcoin, of the bitcoin Ethereum L1. So as I mentioned, what are the advantages of sovereign roll ups like? Firstly, you have more freedom over the execution environment. You also have that with standard roll ups. But the cool thing about sovereign roll ups is that because you're not confined to specific, to making sure your validity proofs or fraud proofs fit within a specific format. For example, to satisfy the Ethereum virtual machine, you have a lot more flexibility over what you can do. So for example, the sovereign SDK, the validity proofs, because the validity proofs aren't defined by some, aren't processed by some smart contract. But what they've been able to do is they've been able to make ZK rollups that have way faster finality times than ZK rollups that are not sovereign and have insurance element.
00:19:31.424 - 00:21:01.370, Speaker B: And the reason for that is that because the roll up is defined by effectively the data posted on chain and by the end user, even before there's a ZK proof, you know that a block has finality effectively, because you don't have to wait for that ZK proof to be on the enshrined bridge itself to know that the roll up has finality. You also have no sharing of computational resources, which means that, and that kind of also applies to the cell met layer. Roll ups have effectively their own computational environment and they have to share resources with everyone else. But most importantly, the most important thing is the ability to hard fork if something goes wrong. Because to me, as I mentioned, this is the whole point of having a blockchain in the first place, which is this idea that the chain is defined by the community of that chain. But if you, if you have a roll up, the enthroned bridge, you're effectively giving away, you effectively either have to accept that roll up is not readable or you're giving away that ability to some committee or some doubt, which, which kind of violates the whole point of a blockchain in the best place, in my opinion. And the cool thing about sovereign roll ups is that they basically allow you to effectively have the ability to have the same advantages of having your own sovereign blockchain.
00:21:01.370 - 00:22:08.258, Speaker B: Like for example, if you create apocalypse chain or cosmos l one, your strain will be sovereign. But that requires a lot of overhead because you have to recruit a ballet. I said, but with sovereign roll ups, you can kind of use an existing DA layer, but you still have sovereignty because that DLA does not find what the transaction validity rules or can of your chain and it cannot prevent your chain from hard walking. And this kind of like, to me, a big point of blockchain is that it allows groups of people with shared goals or shared kind of like missions to have this right to self organize without being burdened by either untrustworthy institutions or middlemen. And that includes relying on some upgrade committee or some valid asset to tell you what transactions are valid or not. So you can think of blockchains as well describe as top level social contracts. So I'll describe what a social contract is in a second.
00:22:08.258 - 00:22:56.404, Speaker B: But you can then think of blockchains as having few layers. So you obviously have the data layer and layer one and L2 is computation, which is what the roll ups do. And that's what the standard definition of layer ones and twos are. You have the DA layer and then roll ups, but there's a lot of like, kind of like debate of what, what layer zero is. But in this contract, I would actually say layer zero is social consensus. Because as I said, ultimately it's the social consensus of the roll up to define what the correct chain of that roll up is. For example, Ethereum has hard forked many times with various network upgrades.
00:22:56.404 - 00:24:05.104, Speaker B: And the reason why the ETH ticker, well, if the current Ethereum chain has the ETH ticket to ticker, is because people have been, is because the community of Ethereum has social consensus that those upgrades are valid. And that should be the chain that is associated with the ETH ticker or the chain known as Ethereum. But it could very well be the case that someone does a hard fork that people don't agree with, and then that chain wouldn't be canonically known as Ethereum. For example, Ethereum classic, right after the Dow hack, a bunch of people thought this was a bad fork, and then they kind of pan out to Ethereum classic that did not follow the Dao hack for. But even though Ethereum classic was supposed to be the original chain, the broader community of Ethereum did not agree that that was the correct chain. And so that actually means that the social consensus of a chain defines what that chain is. Ultimately, it's people that use this blockchain and it's people that define that that chain has value, or which specific fork of that chain has value.
00:24:05.104 - 00:25:05.118, Speaker B: So in a similar way to like how with fiat currency, people decide that pieces of paper are worth value, that on paper they're not worth anything. But people agree to have to agree that they have value, and so they do. And the market agrees with that. I think the reason why it's interesting is if you look at the personal computing revolution in the nineties, the idea was the individual could be sovereign. So then in the two thousands, you had various social media platforms like Instagram, Facebook, Twitter, YouTube. And the idea is that gives individual sovereignty because they can express themselves without having to rely on, like, centralized media to spread messages. Instead, like, people can have spread messages, spread messages in a peer to peer way to each other directly.
00:25:05.118 - 00:26:02.182, Speaker B: And that allows individuals to be sovereign. But you can think of blockchains as a kind of a community computing revolution. It allows communities to be sovereign because it allows communities to have their own state machines or else communities that eventually have shared computers with specific rules or programs in them, that is, that are collectively enforced or have value, because the social consensus of the community is a social contract among people in that community that they do have value. And that's why you have, except various daos. And for example, Daos is a good, is a potential potentially good, interesting example of that. So I mentioned social contracts. So, like, what are social contracts? So as a social contract is basically agreement among a group of people that is kind of economic, typically economic in nature.
00:26:02.182 - 00:27:09.594, Speaker B: So, like, I may agree to, like, I'll buy your services and you provide this. So that's like a kind of like a contract between me and someone, but you can have more of a community contract where, for example, one of the social contracts of Ethereum when it launched was that Ethereum started with proof of work. But it was always the case that it was very early on, there was a case that it was the expectation of the community that Ethereum would switch to proof of stake. So there was a social contract in Ethereum that we're going to switch to proof of stake. And that's why the proof of stake, that's why when Ethereum upgraded to proof of stake, it was very non controversial because it was like a social contract that participants in the ethereum ecosystem already agreed on when Ethereum was effectively created. Whereas like with bitcoin, for example, if you try to switch with proof of stake, that would be extremely controversial because that's not part of the social contract or it's not part of the beliefs of the bitcoin ecosystem. It was like it never said in the bitcoin white paper that we should switch to proof of proof of stake later on.
00:27:09.594 - 00:29:01.606, Speaker B: And you can kind of think about this as like, if you think about like traditional organizations, sorry, 1 second, if you think about traditional organizations, like an organization or a company is basically a social contract among the kind of like the participants in the organization, like the shareholders, the employees, anyone who's got a contract with the organization. But like, what actually enforces the social contract or the contracts that the organization has? Well, effectively, you have like a law, a legal system that does, right? You have corporate law and an organization is incorporated under, have a corporate law, for example, like you might have company law in the UK or in the US, but who decides what that law is? You might have like a parliament in the UK, for example, or Congress in the US, or some kind of like governmental body that creates or democracy that creates or agrees on what these laws should be. But what gives a government or a certain constitution or democracy legitimacy? Like, why does, why do we agree that the 500 people in Congress have the ability to create those, like, great laws? It's because there's a social contract, effectively, that agrees that those laws have value. Yes, there's like military and so on and so forth. But I felt ultimately the military consists of people that agree to be part of it. Like we're all effectively participants in a kind of like a large scale social contract that agrees that these processes are the correct processes. These processes are actually processes I value.
00:29:01.606 - 00:30:21.342, Speaker B: But we've seen in history that these processes could be changed very quickly. That you have revolutions, for example, and revolutions can create, can cause jurisdictions have completely new constitutions and completely new processes, and a completely new social contract. Now, what layer one's fundamentally enabled is this idea. Like for the first time in history, the fundamental thing that blockchain is enabled is this idea to have a, have a social contract without going through like a government or some, somewhere, some nation state, because you can have a layer one blockchain, like bitcoin, ethereum, and the rules of that, you can embed rules in that chain and there's social contract. And those rules basically implement the desires of a certain social contract. And I call these effectively top level social contracts because there's no greater authority over that social contract. Like who decides what the bitcoin rules are? Who decides that the bitcoin code base is the one that decides what the bitcoin chain is, right? It's not some government or some jurisdiction.
00:30:21.342 - 00:31:34.094, Speaker B: It's this kind of like generic or loose social contract among the users of bitcoin all over the Internet. That, that bitcoin, that the bitcoin chain is the correct chain that has value effectively. And so that's the fundamental thing that blockchains enable. It allows you to basically implement top level social contracts for the first time or basically create your own top level, like social contracts for the first time with no greater authority above it, without having to go to some nation state. For example, now if you think about application on layer one, if you deploy an application on layer one, like, let's say it's a dark, for example, that Dow is still is inheriting the central contract of the shared layer one. So for example, if you have a Dow on Ethereum, if you have Dao on Ethereum, that DaO is kind of inheriting the social contract of Ethereum. Despite that DAO might have, it might have its own community and its own social consensus and its own social contract, because Ethereum could hard fork and decide that the assets like introduce a new opcode or make a new set, a new opcode more expensive.
00:31:34.094 - 00:32:35.834, Speaker B: Or in, for example, in Dao, hack, undo certain transactions that happen. But with a sovereign chain, kind of like the interesting thing about sovereign chain, if you have a sovereign blockchain, whether it's layer one or a sovereign roller, that chain, let's say you have a dao on that chain. There isn't any other social contract above it. It's like it's its own social contract. It's a top level social contract in its own right. And that kind of like is fundamentally like a new thing like that you can do for the first time in history, like people, random people on the Internet, can get together and agree on certain values or certain, on a certain goal, and then create a community computer for that goal and embeds that values interview. And there's no one assuming that computer is sufficiently decentralized and distributed.
00:32:35.834 - 00:33:27.000, Speaker B: There is no one above that chain, and there was no one above that social contract. And that's kind of like a very, very powerful thing that blockchains and layer ones and sovereign chains fundamentally enable. And that's why I think sovereign roll ups are very interesting because they enable users or communities to create their own sovereign chains very easily or very quickly. Whereas historically they would have to recruit about the asset. They have to create a proof of stake that worked from scratch using cosmos or for example, or poster dot. So in terms of software, still very early, but there's a few people working on frameworks to allow people to create, to deploy sovereign roll ups. So you have sovereign SDK, for example, and sovereign SDK is a framework for deploying sovereign ZK roll ups written in rust.
00:33:27.000 - 00:34:41.034, Speaker B: Then you have Rolekit. And Rolekit is a framework for playing sovereign cosmos roll ups. So you can take like, you can literally build a cosmos chain. And instead of having to use tenement or common BFT with its own proof of sync network, you can literally like within seconds deploy that cosmos chain using some DLA to give you that shared security, but still retain the sovereignty of allowing your community to hard fork if something goes wrong, if there's a hack or bug, for example, without relying on some like some centralized committee of people or some upgrade process to decide if that's, you know, if that hard fork should be considered values or not, so effectively gives like the same power that ethereum l one had when dao hack happened. Whereas like, if you had a smart contract, Ethereum, that smart contract would not have that power. But, and finally, you can just simply create a solvent roll up by posting and reading blobs directly to lecture. You can like for example, create like a very simple state transition function that posts data to celestia and then reads that data and then perform some computation over it.
00:34:41.034 - 00:35:35.764, Speaker B: You can create like for example, a simple domain name application or like a simple currency and so on and so forth. And this was actually like the original, the original prototype in Las literature paper in the lazy ledger paper was actually a prototype of application that reads data directly from Celestia that implemented a simple currency system and a simple domain name system. So if you want to learn more about like the theory of software roll ups, you can check out this blog post if you want to kind of like dig into implementation. You can check out these frameworks, they're still very early on and I think sovereign SDK is in Devnet, but and then Rolekit is still like more testing that phase. But as they mature I expect to see more sovereign roll ups. Thank you everyone. I'll open it to questions if there's any.
00:35:36.704 - 00:35:52.434, Speaker A: Awesome. Yeah, we have a one in the chat. Thank you for teaching us about sovereign roll ups, Estefla. The first question is from Nicholas Martin. What would be a good app case for a sovereign roll up?
00:35:53.454 - 00:36:49.574, Speaker B: I would say like a Dao. A DaO, for example, like a Dao with its own native asset would be kind of like a good use case of a sovereign roll up. Because that DAO effectively has, that DAO would not rely on, rely on upgrade committee, it would not rely on some community or some token holder governance to decide on actions. Also the upgradeability of the DAO, but like that, Dow could have its own sovereignty directly. And there's kind of like more like sovereign rollouts could be, could be useful for any application because like the actual definition of sovereign roll up is very controversial in the sense like optimism calls itself a sovereign roll up. Like, well, there's argument optimism is software because they say, well actually no, it's not the bridge that defines the roll up. We could hard fork if we wanted to.
00:36:49.574 - 00:37:34.164, Speaker B: The community that defines, defines a sovereign rollout. But of course in practice, of course in practice you need assets. You need to have assets actually natively deployed in that roll up for that to make sense. And the reason why software roll ups make sense for any application is because, for example, as I mentioned, with the sovereign SDK, those roll ups can have way faster finality then roll up with an enshrined settlement layer. We have to wait for the ZK proof to be posted and accepted by the bridge contract in a batch. To have binary in sovereign roll up, you can have users or some set of decentralized sequences posted directly to the chain. And as soon as that data is posted, the state transitions are all finalized.
00:37:35.524 - 00:37:45.464, Speaker A: And how would you mint assets on a sovereign roll up? Or how would you have assets on a sovereign roll up if they don't rely on some other like chain or contract?
00:37:46.764 - 00:38:06.284, Speaker B: For example, like if the example of a DAO that you have its own dao token, for example, inside that roll up, but instead of bridging that token from another chain, just mint it directly inside your chain, you would have a contract inside your chain that does the minting instead of meeting it somewhere else and then bringing it over.
00:38:08.224 - 00:38:22.124, Speaker A: So is there a case where there's a hard fork on Celestia that would impact sovereign roll ups the same way that the DaO hack impacted Ethereum broadly?
00:38:25.264 - 00:39:08.574, Speaker B: That's a good question. It's possible that a fork or Celestia could a focus Lester would not be able to violate the transaction validity rules of a roll up. It wouldn't be able to say, like, hey, this, I'm going to change this state transition function of this roll up to make certain transactions valid or other transactions invalid. Or like, say like, sedentary. Can't afford to say like, hey, I'm going to print a bunch of money on that roll up. Whereas like a roll up, an intransigent element can do that. Because if the bridge is not l one, then you can hard fork the roll up to change what the bridge believes to be the correct chain.
00:39:11.434 - 00:39:24.854, Speaker A: I guess maybe the only thing that could happen there is you don't like something that Celestia implemented. You could switch da layers. Your roll up could still be sovereign. You would just change your da layer.
00:39:25.434 - 00:40:04.504, Speaker B: Yeah, I mean, it's possible that like, although SGA can't violate the transaction validity rules of the rollout, it could like do a reorg or undo certain transactions. But that's kind of like, that's already this, that's already the security model of bitcoin, I think security model of bitcoin, Ethereum is that you, you're only trusting the validator set for censorship resistance and preventing double spends, but you're not trusting the validator sets for transaction correctness or transaction validity. And that's the same with the sovereign rollout that uses the less share.
00:40:06.644 - 00:40:16.444, Speaker A: And what are the, like, what are the potential attack vectors or like, points of fault with sovereign roll ups that you know of?
00:40:17.664 - 00:41:09.814, Speaker B: Um, one thing, ultimately it just boils down to what the bridging, bridging, um, existing roll ups looks like. As I mentioned, like, even if you're a sovereign roll up, but 99% of your assets are coming from one bridge, then is it really suffering a lot? So like, one potential, like, um, failure case is like if that, if one bridge becomes overly, um, powerful for that roll up, similar to Ethereum also has a similar flaw where you can argue that circle and tether, because they control, have influence over which chain is correct. That actually honors USDC and USDT. You argue that Ethereum is actually a bridge to cycle together, and those entities actually define what Ethereum chain is. And Ethereum has lost a bit, a little bit of sovereignty that way.
00:41:13.964 - 00:41:29.104, Speaker A: And so today most roll ups are settled roll ups. They're like smart contract rollups. And there might be a few sovereign roll ups out there, but there's not very many. Why do you think sovereign roll ups will succeed in the long term?
00:41:30.484 - 00:42:17.632, Speaker B: So I think the reason why they will succeed is because if you look at the current market to roll ups, a lot like a majority of like, there's basically like hundreds of roll ups in the pipelines, like being deployed. Like l two beach was like, you know what, like five roll ups two years ago. Now it's like something like 50 roll ups and there's like hundreds more in the pipelines thanks to roll up as a service providers making it very easy to deploy this roll ups. But I think if you look at like why people are deploying this roll ups, that they're deploying application specific roll ups. Like instead of deploying a new smart contract, they're deploying a new roll up with the application. But they're not deploying a roll up necessarily to scale. To scale an l one, right? It's not like two years ago we had like optimism.
00:42:17.632 - 00:43:27.144, Speaker B: Option one and those paid net roll ups exist to scale. The Ethereum l one we're seeing recently more and more application devs simply building application specific roll ups, not because they want to scale l one, but because it just makes sense for the application, right? Like the purpose of application specific roll up is not to scale l one, it's just to have a good application, right? So I think sovereign roll ups could have a superior developer user experience by having less constraints as l three s or roll ups that require to enshrine a specific bridge. And in the future, if your goal is just to deploy application specific chain, you just want to deploy the application. Somebody care about scaling Ethereum? Then you might be very interested in playing a sovereign roll up, especially if the user experience for that roll up is better. So for example, with, as I mentioned, with sovereign SDK, you have faster finality and you also have, you can write your contracts, you can write your application in rust, for example, with rocket, you can, you know, you can create a cosmos chain, for example. That's all I'm so forth.
00:43:29.004 - 00:43:37.304, Speaker A: And we have some questions from the audience. Now. First one is from Santosh A. How do we make roll ups more decentralized?
00:43:40.084 - 00:44:48.344, Speaker B: Yeah, I mean, I think like there's different, there's different kinds. Like there's different meanings when we see decentralized. Like for example, the one that applies to all roll ups, whether it's over in or cell would be censorship resistance. So for example, like a lot of roll ups have single sequences, but that's okay as long as there's a way to, for users to force transactions to be included on the roll up if the sequencer is sensing transactions. So for example, with arbitrum, even though they have a single sequencer that you can still, if that's, if that sequencer is sensitive transactions, the end user who's being censored can still submit their transactions to what's called a inbox that will force the sequencer to include that transaction anyway. And that way the roll up is basically inheriting the decentralization of the base layer. And in any well constructed roll up, that's always going to be the case.
00:44:48.344 - 00:45:44.714, Speaker B: But what this presentation is more about is like, is digging into how decentralized is the upgrade process for roll up, right? As I mentioned, with a roll up with a signal bridge, there's like the bridge, all the bridges typically have something like, except for fuel v one, all the bridges have some kind of upgrade process. And that typically involves either like some tokens, all the governments by DaO or some upgrade committee, you know, and to me that's very centralized, as I mentioned, that, that defeats the whole point of the blockchain, even if it's token holder governance. Like I don't think it should be like whoever has the most money gets decided what the rules of the chain are. Right? Right. So as I mentioned, we can make more worlds more decentralized by not relying, by using sovereign roll ups that don't rely on a single bridge either. Have like a wide variety of bridges. Like how optimism plans to have like multiple bridges, multiple canonical bridges.
00:45:44.714 - 00:46:09.474, Speaker B: You know, you have optimistic version SDK bridge, for example, and like have a lot of assets in a roll augmented directly in some. In some this makes sense. This makes more sense in some cases more than others. But if your roll up has a lot of native assets, then mint those assets directly in your roll up, not somewhere else, and then bridge them over.
00:46:12.494 - 00:46:28.084, Speaker A: I guess. In summary, sovereign roll ups are the answer to that. What about, I guess most sequencing is centralized. Does decentralized sequencing kind of open the doors for that to grow?
00:46:29.144 - 00:47:36.814, Speaker B: Yeah, I mean, there's definitely people working on decentralized sequences, including Astria, which is building like decentralized sequencer celestia. And I think decentralized sequences are very, depending on how they're constructed, can be a good idea for increasing censorship resistance, even if you have an on train inbox that we can bypass the sequence through, it's typically the case that that on chain inbox, like, for example, might have a 24 hours period where your transaction is only included after 24 hours. So although it does provide sensitive resistance, but even if you have one sequencer, it's like very slow sensor persistence. So if you, if you have decentralized sequencers, that will increase the speed of sensitive resistance because, like, you can have immediate sensory resistance or closer to immediate kind of sensor persistence because you don't have to rely, like, you don't have to use the forced inbox if one transaction, if one valid error is being honest, because you can rely on other sequences.
00:47:39.874 - 00:48:03.814, Speaker A: We have a get well soon Mustafa pillow, turquoise hot chocolate from Sammy. Thank you, Sammy. And Bear is wishing a speedy recovery as well. Another question from the chat is from Yaz, and he's asking, is it true that if there's a disagreement in a sovereign world community, it can fork while keeping same level of security due to shared security?
00:48:04.994 - 00:48:47.694, Speaker B: Yeah, definitely. Because, like, it doesn't matter what. Like, even, like, if, let's say you have a sovereign war upon celestial and it forks. Like, both sides of the fork are still posting the data to Celestia, right? And so, like, if. If the sequences on both sides, either side of the fork misbehave, that data will still be on celestial, whichever side of the fork you're using. And that data can generally be used to create for proofs or Zk proofs or so on and so forth. So it is the case that if there's a kind of contentious, hard fork, then roll up, both sides of the fork will still inherit shared security from Celestia or the DLA.
00:48:53.914 - 00:49:00.174, Speaker A: Next question is from Nicholas. Is a sovereign roll up a roll app or an app chain?
00:49:02.774 - 00:49:09.794, Speaker B: What's the difference? App change. Roll up is just a roll up. Is this an app change as a roll up? Right. So I guess technically it's roll up.
00:49:11.054 - 00:49:12.474, Speaker A: I actually have a similar.
00:49:12.974 - 00:49:16.222, Speaker B: Oh, is that roll. You mean roll up or roll up? Roll app, yeah.
00:49:16.318 - 00:49:18.234, Speaker A: Or an app chain, or they're all the same.
00:49:18.654 - 00:49:27.994, Speaker B: It's ambiguous because it could be a typo. Because it's a typo either way. Because it can either be the dimension definition of a roll up or roll up with you, but either way.
00:49:28.374 - 00:49:29.246, Speaker A: Yeah.
00:49:29.430 - 00:49:33.742, Speaker B: I mean, technically it is a roll up because it's an app change. That's a roll up.
00:49:33.878 - 00:49:38.314, Speaker A: Yep. And would you consider a roll up a blockchain?
00:49:39.734 - 00:50:03.654, Speaker B: Absolutely. Like a roll up is a blockchain. It's a chain of blocks. That post is blocks to another blockchain. For sure, it's basically a blockchain inside of a blockchain, similar to how like a virtual machine is a computer inside a computer. And people use virtual machines today on AWS and digital version as a default way to develop and deploy the applications.
00:50:07.674 - 00:50:33.744, Speaker A: So getting to the modular ecosystem side of this, I think in the last year and a half or so, the ecosystem has come a long way. You mentioned a few frameworks that people can build sovereign roll ups with. We've also seen a lot of subtle roll ups that post data to Celestia. What would you like to see in the next twelve to 18 months in the ecosystem? What are the big goals?
00:50:34.924 - 00:51:39.294, Speaker B: Yeah, as I mentioned, right now something is the case in Devnet and then marketplace. You can play roll ups there, but it's kind of like closer to that phase. So I kind of want to see more and like floating roll ups framework mature more so that they're more production ready and more like developers you expect friendly from a developer UX perspective. And finally, I want to see like once those frameworks are more production ready, even though you can experiment with them already, I want to see roll up as a service providers support their sovereign roll up frameworks. So you can actually deploy servant roll ups using roll up the service provider. Because as I mentioned, my thesis is that a majority of developers deploying applications on roll ups and service providers using rollups, they're not doing it to scale l one. They're doing it because creating a roll up application specific chain is simply a good way to deploy a decentralized application.
00:51:39.294 - 00:51:42.704, Speaker B: Whether or not it scales specific I want.
00:51:45.884 - 00:51:54.664, Speaker A: And in the more near term, we have a question from Yas again, what are some things you'd like to see the hackers build in the hackathon?
00:51:56.004 - 00:53:03.904, Speaker B: Yeah, as I mentioned, one of the things it could be like a DAO, like a DAO created a sovereign roll up either using sovereign SDK or rocket, where most of the assets in the DAO are natively minted. And that would be really, that's really powerful because it's a DAO that has its own social consensus. So now you can spin up daos to have the ability to hard fork, which is, which is really powerful. And another thing that would be cool to see on more of like a infrastructure experiment is like experiments with like just instead of using a framework, create some kind of application that reads and writes data to celestial directly. Like that could be like any application. So like what if you took for example, like I don't know, like what if you took like, I don't know, like a Pokemon game or something. And you made it like a community computer by making it possible so that anyone can submit transaction on chain to do certain keyboard presses in that game.
00:53:03.904 - 00:54:08.454, Speaker B: And someone can replay the entire game by kind of like looking on chain and reading this lecture there and replaying the keyboard controls. And I think people. And if that kind of like roll up as assets, you can make it so like, okay, if you own that asset, you have the ability to make a movement in that game, for example. But what is interesting is because, or kind of like a cool experiment is because it allows you to create like roll ups with any arbitrary computer program, like, or any arbitrary execution environment. Like you could literally use like a NES simulator with Pokemon on it. Whereas like, previously without solving roll ups, you'd have to make sure like, you compile your roll up into some fraud proof system that the EVM understands or you would have to ZK prove your roll up, which kind of is very limiting. With this, you can literally take any computer program and do that.
00:54:08.454 - 00:54:14.354, Speaker B: You can take some desktop and do that, for example, next desktop, for example.
00:54:16.694 - 00:54:24.074, Speaker A: A follow up question to that from Gar and Patel is, wouldn't it be quite expensive to record all the steps a player takes?
00:54:25.664 - 00:54:32.244, Speaker B: I don't think so. Because, like, I expect, like, in most games or computer programs, it's just like keyboard presses, right?
00:54:32.624 - 00:54:33.000, Speaker A: Yeah.
00:54:33.032 - 00:54:46.480, Speaker B: So it's like press up or like press certain keys certain number of times. For example, it's like one character. It's like one. It's like it takes like one byte to record that information, right?
00:54:46.592 - 00:55:14.014, Speaker A: Like a byte per transit, basically. And more on the fun side of things here, people might have seen the sloths, the celestial sloths, recently. I'm wondering what the next laziest animal or thing you could see being built as an NFT collection on Celestial.
00:55:15.174 - 00:55:16.394, Speaker B: I have a good question.
00:55:18.814 - 00:55:19.754, Speaker A: Oh, no.
00:55:20.374 - 00:55:22.886, Speaker B: Is a snail a snail?
00:55:22.950 - 00:55:23.342, Speaker A: Nice.
00:55:23.438 - 00:55:28.566, Speaker B: Yeah, a snail is lazy. And what, maybe it's something more creative, but like just googly.
00:55:28.750 - 00:55:30.494, Speaker A: That's great some stuff.
00:55:30.574 - 00:55:31.274, Speaker B: Yeah.
00:55:32.294 - 00:56:01.284, Speaker A: And that's all I have for questions today. I'll do a last call in case there's any last ones in the chat. Thank you again for teaching us all today. And we look forward to seeing what sovereign roll ups people build during the hackathon. Maybe snail chain and yeah, thank you everyone for attending and wishing everyone a good time during the hackathon. Mustafa, do you have any last words?
00:56:02.744 - 00:56:07.856, Speaker B: Nothing, except for build modular and be sovereign. Awesome.
00:56:08.000 - 00:56:08.464, Speaker A: Thank you, everyone.
