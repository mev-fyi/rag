00:00:01.800 - 00:00:31.460, Speaker A: Hello, everyone. Thanks for coming. We're going to be talking about, is Solana going modular today? I found out that I was doing this yesterday, so I'm kind of just going to make up the questions. Feel free to interrupt me if you have any questions from the audience or if you want to dive deeper into a hot take or whatever, just let me know. But to start it off, let's just do some brief intros. Let's start with Andrea and then kind of work our way back here.
00:00:32.440 - 00:00:42.380, Speaker B: Everyone, I'm Andrea. I'm the CEO and co founder of Magicblock. We are building a high performance engine for fully on chain games and fully on chain applications on Solana.
00:00:43.720 - 00:00:52.848, Speaker C: Hey, what's up, guys? BJ here. I'm the CEO of Eclipse Labs. Eclipse is building the first SVML two that settles to Ethereum and uses Celeste.
00:00:52.864 - 00:01:02.402, Speaker D: GF for Daevdeh Anil founder CEO ROM protocol. We are bringing Solana as modular services for ethereum l two.
00:01:02.426 - 00:01:26.240, Speaker E: Sven. Hey, everybody. Sven, co founder of Light protocol and we're building together with Mirt and his company ZK compression and ZK compression scales. Data storage on Solana makes it incredibly cheap for applications to build on the Solana L1. And by doing that also introduces CK accounts and verifiability on Solana.
00:01:26.540 - 00:01:58.090, Speaker A: Cool. My name is Mert. I run mobile networks on Solana and sometimes payment networks as well, and occasionally post on Twitter. Ok, let's actually, first, before discussing if Solana is going modular, let's define what everybody here thinks, what the word modular actually means. And then this time we'll start with Swen. Just in your own words, what does modular mean to you? And does it line up with maybe what everybody else thinks?
00:01:59.350 - 00:02:32.550, Speaker E: When I hear modular, I think a lot of very highly optimized parts of one system, and I think in the sense of blockchains, that would be what you refer to as maybe execution, settlement. DAev, while I think that matches overall with what others in this room might think is modularity, I do actually think that it's not diametrically opposed to an integrated blockchain. So I think it's sort of like orthogonal. You can be integrated and highly modular at the same time.
00:02:33.850 - 00:03:07.750, Speaker D: Yeah. So for me, it is more like a Lego pieces. That's modularity. You can put those pieces together to create different things. It brings the explorer out of us when you are modular, it brings the innovation, it brings the searching kind of mentality that we all have as a kid. So it creates a lot of surface area for us so that we can all be explorer and create new things that usually are not visible when we are thinking one directional. So that is what modularity is for me.
00:03:09.790 - 00:03:54.210, Speaker C: Yeah, I would agree with a lot of what these guys have said. I think I would add that to me, it's unbundling all the components of the stack, from execution down to da and fraud proofs, and really allowing teams to specialize and build highly capable versions of each part of that stack. And I think as a result, you end up with a much more competitive environment where there's a lot more creative destruction. And I think the speed that teams need to execute just becomes a lot faster, and the quality of sustained execution as well, because you can now take the best parts of the stack and create these custom implementations. And so the barrier to entry is also a lot lower for the ecosystem as a result of that.
00:03:57.030 - 00:04:37.930, Speaker B: So I'll go by the current taxonomy of separation of execution, consensus, data availability, settlement. But for me, what is most important is what modularity entails. What are the trade offs between being able to customize your runtime, for example, versus being able to, or being forced to run on a generalized compute layer, or the benefit that you get in terms of state access versus the ability to accrue your own fees? Modularity is really about what are the tradeoffs and the spectrum of tradeoffs that developers can play around with to really make the best application for the users.
00:04:38.270 - 00:05:09.510, Speaker A: Okay, so let's talk about those trade offs, right? So maybe there's modular, integrated, monolithic, whatever I'm gonna call it integrated Nick. But let's actually dive into those trade offs. Okay, you mentioned that it's about maybe exploring what those are and where they might make sense in certain kind of application settings. So you're doing a gaming engine. So what are some of the things that you found as a shortcoming of Solana that you felt you needed to go this way?
00:05:12.050 - 00:06:15.182, Speaker B: So by far is the latency. So when it comes to building games entirely on chain, 400 milliseconds is not nearly enough. And it goes down to the question of why am I putting state and logic of my game on chain? But I answered some of those questions before, is verifiable compute, permissionless composability, and the ability to create games in digital world that persists forever. So if you are fine with those assumptions, and you want to go down that path, then 400 milliseconds is still too long of a time for interactions, players interaction, basically. And on the other side, there's an argument that app do want to capture their own fees, or they do want to be able to whenever there's congestion. That happened in Q one, for example, there was sort of a wake up call, I think, for many projects in our ecosystem that even Solana can get congested. And so at that point, you obviously don't want to be constrained by the block time.
00:06:15.182 - 00:06:22.210, Speaker B: You want to potentially, you know, have more DP's, spin up more, more block space, and accrue some of those feeds.
00:06:23.030 - 00:06:37.490, Speaker A: Okay, Vijay, you guys are doing an SVM roll up that settles on Ethereum, uses celestial for DA. What did you kind of find insufficient about maybe existing roll ups such that you felt the world needs something with that arrangement?
00:06:38.590 - 00:07:47.224, Speaker C: Yes, maybe from the Ethereum centric perspective. Right. I think if you look at a lot of the existing l two s out there now, they were definitely prioritizing for decentralization and building amazing ecosystems. But I think if you look at the TPS of the apps or the realized TPS of a lot of the existing apps on Ethereum, l two s, it's generally at max and the hundreds, like, say, in the case of arbitrum. And so for eclipse, the genesis of what we're building, it actually came out of building app specific roll ups, and we kept on seeing the same construction over and over again. So using the Solana VM for execution, settling to Ethereum, which is still the largest user and asset base in crypto, and then using Celestia for DA. And what we kind of organically realized is if you can really build a very dialed in version of the SVM and building on a lot of the work that the firedancer and Enzo and other teams are doing and use that same architecture, you can sort of have this one general purpose, l two, that can support the needs of 99% of dapps out there.
00:07:47.224 - 00:08:28.800, Speaker C: And so for me, my background is largely in the DeFi and the trading world. So I was previously at Dydx and Uni. What you kept on seeing is that a lot of the leading perp stacks would go the way of a Cosmos app chain or essentially build something that some might say is effectively centralization masquerading as decentralization. And obviously, there's a spectrum there, but I think our philosophy is there's a lot of power to building one shared general purpose, l two, that can support the needs of 99% of dapps out there, and where you don't have to worry about the noisy neighbor or hotspot problem that you traditionally have had to worry about on Ethereum.
00:08:30.510 - 00:08:41.254, Speaker A: What about roam protocol? What gap did you guys kind of see there that exists in kind of the crypto ether that you felt you can use Solana to help bridge that gap?
00:08:41.382 - 00:09:14.504, Speaker D: Right. For us, it was the Solana as a state machine. So we find Solana as a state machine is one of the best state machines. I mean, we compared it to aptos in terms of performance. We find Solana very well decentralized, bringing Solana's consensus layer as a modular service for sequencing, roll up transaction. So the l two s, they are faced with ordering of transaction. We see this problem of having to secure enough stake to guarantee this ordering of this transaction.
00:09:14.504 - 00:10:05.706, Speaker D: So we want to bring that part of Solana to Ethereum, l two s, where the ordering is immutable, where they feel that the transaction finality is much faster. So we are bringing that to Ethereum, Altus. And we discovered when we were building the sequencer that it is not just the ordering of this transaction. There are a number of services that we can build for l two, so they can become as decentralized, as fast as Solana. So bringing Solana's fastness and security decentralization to l two s because. Because l two s suffer the centralization problem, and Solana being the third biggest chain, and such a performance chain, bringing that consensus as a modular service, because consensus and DA are so far been treated as a single module. So we want to break that.
00:10:05.706 - 00:10:17.366, Speaker D: You can have a separate consensus from DA. So we are bringing salesia as a DA consensus of Solana as ordering of transaction to Ethereum, l two s. So that's what we are planning to do.
00:10:17.478 - 00:10:31.822, Speaker A: Okay. Okay. So let's get to the easiest question. Swen, is ZK compression a roll up? Actually, what is it? Okay, maybe start from first principles, describe what it is, and then we can classify it.
00:10:31.886 - 00:11:02.382, Speaker E: Okay. Okay, so I'll keep that answer to the very end. Before that answer that, you could answer it for yourself, maybe. So the main thing that ZK compression does is it scales data storage for Solana. So a little bit of context, and Solana is a little bit unique in that sense, compared to something like the EVM, where you have compute and data storage and state sort of mingled together. In Solana, it's two separate things. And so compute is really cheap.
00:11:02.382 - 00:11:37.310, Speaker E: On Solana, data storage is pretty expensive, and so all the validators on Solana have to keep around the current state of all the different accounts. For instance, token balances in their active fast memory. And that's pretty expensive. There's a thing called rent. It's actually a bond that if I want to send you all token balances, I have to create that account, and I have to pay for it. Currently, for a token account, that would be roughly $0.30 or something like this, which is pretty expensive if you think about that computer's magnitudes of order cheaper than that.
00:11:37.310 - 00:12:24.526, Speaker E: And so what ZK compression does is it allows Solana and smart contracts on Solana to reason about data and state that is not actually stored in on chain accounts. So it's stored somewhere else. For instance, on the Solana ledger, which is ledger history, similar to something like call data or blobs, where the validator doesn't keep that state that data around for a long time. I think it's pruned over a couple of days, but you can still index it as long as you have an archival node around. And so ZK compression allows you to store the data outside the on account space. That way it reduces the cost by orders of magnitude. And so that's next to latency.
00:12:24.526 - 00:13:23.382, Speaker E: That's sort of the second huge problem that builders on Solana have right now, is they create a lot of accounts, they pay a lot of state cost. And so I would say back to your question. At the core level, ZK compression is much more like what any ethereum space you would call like a stateless client. That being said, if you look at the system and you take a step back, it looks very much like any stateless execution environment where you have a state root on chain and you advance it through some service, maybe through l one ordering. This is what ZK compression does, and this essentially allows roll ups or validiums to plug into that. ZK compression itself is not a roll up, definitely not, in my opinion. But it sort of opens up the design space for a lot of these different VM designs.
00:13:23.526 - 00:13:33.840, Speaker A: Cool. Anybody have any questions around that? I feel like there was a lot of chatter about it, but no. Okay, yeah.
00:13:35.700 - 00:13:55.044, Speaker F: But then how do you verify whatever the state is that's stored off chain on chain? That just sounds like a roll up to me. Right? Is there a commitment to that state that's stored on chain? There's a merkle root of some other state elements.
00:13:55.172 - 00:13:55.644, Speaker E: Exactly.
00:13:55.692 - 00:14:17.160, Speaker F: But then how do you prove to that whatever that state is actually on Solana, that the changes are valid if it's not a roll up? And it also sounds like you're still storing, like the transactions are being executed, but they're being stored in the ledger of the history of salon. So you're using salon as a DA layer, like to me, it just sounds like a roll up. So explain to me why it's not.
00:14:17.500 - 00:14:18.468, Speaker E: Yeah, I believe you.
00:14:18.484 - 00:14:20.040, Speaker F: Because you know more than me.
00:14:20.600 - 00:15:05.416, Speaker E: Great question. So there's two parts to this I want to highlight. So one is typically what you have with rollups as you know them from the Ethereum space, or the modulus stack, is that the state transition function of the roll up which batches together off chain compute is happening off chain, not on chain. And so you prove the state transition function, which includes more than just the inclusion or ability of state, but also the actual state transition. This is not the case with ZK compression core primitive. This on chain VM that we've built with lite protocol verifies all the state changes on chain. And then your custom smart contract can decide whether to do an off chain or on chain state resistant function.
00:15:05.416 - 00:15:53.696, Speaker E: But the core primitive that most apps use today, if you have a smart contract that lives on chain, it's on chain state transition. So what is being proven is just that, as you mentioned as well, the actual data was previously committed or published on chain, like with any timestamp server. And so you have the inclusion state simple Merkle proofs. They get batched together into a snark. So there's some similarities to rollups, but the actual STF is on chain. And then the second element that I want to highlight is that with rollups, it sort of also alludes to the batching together of many different transactions into one batch, and then you roll them up. This is also not necessarily the case with ZK compression.
00:15:53.696 - 00:16:16.620, Speaker E: You can have individual users executing their single transactions on chain. They provide this very fast. There's very fast generation of the validity proof because it's just simple merkle proof sort of batched together in the end. Right. And then you have the on chain state transition. So not necessarily batching together. So that's why I don't classify it as a roll up.
00:16:20.240 - 00:16:21.460, Speaker A: Do you have a follow up.
00:16:24.240 - 00:16:33.020, Speaker F: Earlier, when you're introducing it, you mentioned that you call it ZK counts. I wonder, are you familiar with Celestia ZK counts? And do you see any similarities?
00:16:34.320 - 00:17:23.850, Speaker E: Yeah, on a high level, I'm aware. And so, and that's sort of a more longer term or sort of more sort of division aspect. Or another thing that this enables next to just like scaling data storage, is that if you have a custom program or smart contract, this doesn't have to be purely on chain, it can have DSTF off chain. So as long as you can ZK proof your own smart contract logic. Then you can plug into all the l one tooling that lite protocol provides. You can verify your state position function on chain. You can invoke the vm that we have, and you can handle your state changes through this forest of state trees that we maintain.
00:17:23.850 - 00:17:54.600, Speaker E: And then this is pretty arbitrary, as long as you can prove your vm in a ZK proof, in the end, you can have this sort of status execution on Solana. So it's sort of, you know, I think ZK accounts and Celestia are more of even an underlying primitive. So probably light protocol would be somewhere in between celestia, ZK accounts and something like an ag layer, but it's not actually aggregating a lot of roll ups. So it's somewhere in the middle there with regards to sort of the spec.
00:17:57.030 - 00:18:46.546, Speaker A: Okay, well, so I'll just ask this. I guess modularity kind of fundamentally relies on some pieces of the stack being reliable that you kind of plug into. For Ethereum, for example, they've made a decision to say, okay, we're going to scale up your roll ups. We'll keep the base layer kind of minimally complex. And then every time somebody proposes something to the embracer, people are like, no, no, no, we don't want to do that, etcetera. But Solana is kind of the opposite, where we're kind of, okay, we're just going to ship something and it's going to work, probably, hopefully, whatever, which makes it harder for people that are building modular things on top of it. Right, because the chain could kind of change at any moment, because it's not necessarily being tailored explicitly towards other people hooking into it.
00:18:46.546 - 00:18:55.770, Speaker A: How do you guys kind of think about that? Do you have any concerns around? So, for example, with the gaming engine, core change of Solana kind of affecting your business model, et cetera.
00:19:02.470 - 00:19:52.030, Speaker B: So the way our delegation works is leveraging this separation, native separation of state and logic of Solana, plus the ownership of pdas. Programs own these pdas. And so I don't think that's going to change anytime soon. But because it's so intrinsically embedded into the runtime, that is just some core feature of Solana. And there might be changes that kind of affect our current design. For example, we have atomicity. When we delegate and undelegate, we can, in the same transaction, move the ownership into a different program and upload basically the state into the FM roll up session, meaning the ownership is now in the delegation program, in the validator.
00:19:52.030 - 00:20:00.250, Speaker B: So there might be changes to that, but that doesn't fundamentally affect the way it's an implementation detail, basically.
00:20:00.630 - 00:20:33.370, Speaker A: Okay. Actually, I think this question can be kind of generalized to all of you, which is, say, you use some part of Solana Stack. Solana doesn't necessarily care about. I mean, Solana is just, I don't know, Solana labs or onsite or fire dance or whatever, they'll just ship whatever they want without potentially, I don't want to say cheering, but like, not chairing as much as, let's say, ethereum would, about breaking the modularity kind of chain dependency there. So in the case of an SVM roll up, for example, there might be a lot of core changes to the SVM. How do you think about, like, integrating those and kind of being in sync with Solana?
00:20:34.640 - 00:21:37.728, Speaker C: Yeah, it's something that is very much top of mind for us right now, especially with what's going on with the ANZ team and the agave client firedancer team and Franken dancer. So I think just zooming out, it makes for a very interesting ecosystem. I think it's a little bit less centrally coordinated and maybe the way it is for ethereum, but that just leads to, I think, a little bit more of a grassroots vibe and kind of more players potentially coming in over time. And, like, sure, maybe there's like, a little bit more duplication of efforts that might be happening. Right. But I think, you know, for example, like Frank and dancer, which I think is expected to go live before end of this year, maybe by breakpoint, but where you're sort of using firedancer networking and the agave client to runtime, like, sort of like a hybrid, and, you know, it's not full fired answer yet, but you kind of end up with these things that are a little bit more incremental and allow people to build while the plane is in midair. And so that's something that we're very much a part of as well.
00:21:37.728 - 00:22:33.220, Speaker C: Brad and I think for eclipse, the implementation we're thinking about long term is leaning into having a pretty centralized sequencer set. So just being totally orthogonal to what you see in most of ethereum l two land, and potentially even having a single sequencer. So being able to really tap into hardware acceleration and the way that fire dancer is doing with. With FPGA's and maybe even over time, like, really move towards, like, asics and try and try and drive and keep driving an order of magnitude improvement in the TPS potential of eclipse. So that's kind of what we're thinking about. And, yeah, I think just going back to your point, mert, like, there's definitely a little bit more, you know, I think just staying up to speed with what multiple partners are doing, but it just creates a very interesting kind of research environment where people are able to feed off each other as well.
00:22:34.840 - 00:22:44.384, Speaker A: Yeah, I mean, for roam protocol, I feel like you guys actually really depend on Solana, basically. They're not changing in a sense, but fire dancer will just say, I don't care. How do you plan to deal with that?
00:22:44.512 - 00:23:47.262, Speaker D: Yeah. So for us, it is especially very important to have diverse opinion of the network. So we take splitting of the team and then your team, Helios and other dev coming up. It is actually a net positive for Solana, I think, because diverse opinion, diverse people contributing to Solana and having a vision that is not, let's say, monolithic itself in thinking or linear in thinking. So it brings, I think, the diverse opinion along with the respect for what other people want to build more in play, rather than when it is a centralized development environment, development team that is doing it. So there are number of challenges that we face for shared sequencer in terms of transaction size, having abstraction of the consensus layer little bit more than what it is. So these are like, very important thing for us.
00:23:47.262 - 00:24:24.212, Speaker D: And it helps to have diverse opinion talking to other people, like how we can get that. When you have a very high performance chain, it is easy to still build your modular stack on that performance, because that performance of the chain hides. You are able to hide some of the slowness that is caused by making it modular. But eventually you would have to provide some abstraction. So if I were to just throw in like, okay, creating a proof of history as an l two on Solana, right. So if I want to provide that as an l two service to anybody who wants to use plural history. So today I cannot do that.
00:24:24.212 - 00:24:36.320, Speaker D: But if there was some abstraction that was available on Solana, it would be very easy to provide that kind of l two, which could be very beneficial to those who wants to use proof of history in some form or fashion.
00:24:36.830 - 00:24:50.890, Speaker A: Okay, swen, how about you? I mean, maybe one case is like, ZK syscall is not being live on l one. You kind of don't have a control over that. The state kind of cost could be like, it could actually be enshrined. So you get compression core protocol. How do you think about that?
00:24:51.670 - 00:25:34.574, Speaker E: Yeah, for sure. So there's multiple facets to this. I mean, with regards to this is. Cause it's a funny and long story. I mean, you know, when we started building the first syscall for ZK into the runtime. That was mid 2022, and back then it was pretty quick to merge something into the runtime, which is sort of, I think that's just a natural process with any successful l one. Just spoke with someone who was there in Ethereum early days and was able to merge, had push writes to the Ethereum client code base fast forward today it's nearly impossible to get something merged into the Ethereum code base.
00:25:34.574 - 00:26:29.488, Speaker E: The same is happening with Solana. And so there's another whole tangent there, which is that I would say, but I'll get back to that later. To answer your question, ZK compression liprocal is very based. Unless there's any breaking changes with existing applications on Solana, then we'll be fine. There are some things where you do have, if you're building infrastructure on NL1 for application protocol developers, you're always at the risk of being enshrined. I think that's actually fine. It's a healthy competitive thing where as a protocol that's building infrastructure on an l one, you just have to outrun the l one and sort of try to provide more value than what the L1 can catch up with by enshrining you.
00:26:29.488 - 00:27:57.420, Speaker E: And at the same time, I think that over the long term, all the good things, infrastructure wise, should be enshrined into the l one. I think actually if that's not happening, then you do have a problem from an l one perspective. So that gets me back to the beginning of the point, which is the day that Solana really stops pushing stuff and changing stuff, and in that way maybe also competing with some of the infrastructure layers on top of it. That's actually sort of the beginning of the decline, I would say, of a successful chain, because you need both, you need the protocol changes, you need people to actively push the protocol forward, and then you also need, on the application level, you need infrastructure builders of various different sizes and shapes to push the chain forward. And in total, you always need to remember that the goal is to make it easier for application developers to build on top. And I think as long as everybody's pushing into that direction, which is also interesting, speaking of social fragmentation, et cetera, around the incentives, around launching your own l one, et cetera. But like, if you can keep sort of a standardized interface and can all sort of, as application and protocol developers push towards a single decent platform for application developers to build on, then I think that's a long term success case for an L1.
00:27:57.420 - 00:28:01.600, Speaker E: And I think Solana is on a pretty good track so far.
00:28:01.760 - 00:28:33.120, Speaker A: Okay, I'm going to actually, you said something kind of spicy there, which is that everything that maybe is successful should be enshrined into the core layer, which is to say that if you play out the modular kind of roadmap a little bit in its end state, you have kind of these pieces that as they fit together nicely and you kind of see a path with success, they actually become integrated. Does anybody have any strong opinions in the audience that disagrees with the thesis that everything should be enshrined over time?
00:28:37.460 - 00:28:53.524, Speaker G: I mean, I think swain kind of set the point that a specialized team is likely to outpace the team on the l one because they're doing so many different things at the same time. So I think something that's not enshrined would always out compete the enshrined thing. So I kind of agree with some extent on that point.
00:28:53.692 - 00:28:59.970, Speaker A: Okay, does anybody not agree? I see a lot of hands over there.
00:29:08.870 - 00:29:38.472, Speaker H: I think you should probably enshrine stuff because at some point you don't want critical infrastructure in the hands of top party operators, because that's something dealing with Ethereum, even if you have this business that's really good, sensors resistant and secure and digitalized, but like, you have like critical infrastructure operating on top of it. And if that goes down the affect like Ux and stuff, so you want that stuff downstream like the base layers as soon as possible.
00:29:38.536 - 00:29:38.664, Speaker E: So.
00:29:38.672 - 00:29:49.970, Speaker H: Yeah, and you want it also operating as a public good, so free of capture and all of the things, the nice things that come with like base layers as well. You want that for critical public infrastructure as well. Okay.
00:29:53.070 - 00:29:55.250, Speaker A: Do you have any, do you agree? Disagree?
00:29:57.030 - 00:30:49.016, Speaker E: Yeah, I mean, he made a couple of good points. So there's, I would say sort of like the antithesis here is like, you'll always have this, like bundling and unbundling, and like everyone who's successful will eventually compete on the same things. So there's a natural incentive to start as a protocol on the l one, and then you eventually try to unbundle and build your own platform. And so there's this competition. And if the l one, from an l one perspective, you start out quite fine because all the applications build on top of you. Eventually you hit this sort of negative network effect where congestion is actually really bad for applications building on top. So they try to go away, maybe they have their own fee incentives.
00:30:49.016 - 00:31:39.850, Speaker E: They go away, build their own l one, maybe to increase their fee capture mechanisms to make that more beneficial for them. But if you don't enshrine, then you have lost. Because then the competing l one has just so many benefits because you're congested and a newer one can launch a token and it's a going to be debased in relation. So like you as an l one, from the l one perspective, you definitely want to enshrine over time, you are also always going to be slower than an l one. So it's like sort of this, you know, that's always the battle there. You're going to be slower than the application building top just because of technically that etcetera. But yeah, my point, I think my point still stands is like, if you're in l one, you need to enshrine, otherwise, okay, you lose.
00:31:40.010 - 00:31:50.506, Speaker A: Yeah, I mean, these are pretty complex questions, so let's maybe come back to a super simple one, and I'm going to ask this every single one of you. Does Solana need roll ups to scale? Let's start with Andrea.
00:31:50.618 - 00:33:08.006, Speaker B: Well, I'm kind of biased because I'm literally building ephemeral roll ups on top of Solana, but so I think it makes sense to scale or to have roll ups, let's call them custom execution environment, where you can run some computation off chain for many different apps, for fully on chain games. That makes sense. The question is, what are the tradeoffs? Because an integrated chain. You didn't ask us what we like about Solana, but pretty clearly we are all building on Solana, or we are building on the SVM, because we think that composability is the killer property for blockchain. When we started building on Solana, at least we loved the idea of building a single composable state machine that could settle globally at the speed of light, where developers, users, primitives were all in the same place. And so you have to pay attention to leaving behind those things when you are building on a different execution environment. But I think it makes sense for many different use cases, and perhaps for more than we think, to being able to selectively move some of the competition off chain.
00:33:08.006 - 00:33:28.370, Speaker B: And so in our particular case, I'm obviously biased, but we came up with this idea of deploying this smart contract on Solana and then execute state transition function for specific accounts in this off chain environment. So that's kind of my thesis and our approach.
00:33:28.750 - 00:33:29.650, Speaker A: Vijay?
00:33:30.710 - 00:34:23.107, Speaker C: Yeah, I think over a long enough timeline, they will definitely be a part of the fabric. I think this is talking about when web two developers are coming in with web two scale type use cases and you're looking to build these fantastical game worlds that you guys are thinking a lot about. And there's lots of other use cases out there, including DPIn. Definitely at some point it still may be a bit early, but I think we'll get there, mostly because Solana as an l one has to worry about the shared security component. That's what every l one has to worry about. As an l two, you don't need to worry as much for that or manage multiple trade offs. You can really lean into the performance aspect and rely on the l one for the shared security piece of.
00:34:23.107 - 00:34:37.899, Speaker C: So I think from a design perspective, I definitely see that becoming a trend, but I think if there is no one that's capable of supporting millions of dapps out there, it's going to be Solana.
00:34:39.719 - 00:35:08.000, Speaker D: Yeah, I mean, I think simple answer from my point of view is, yes, people have diverse opinion, developers have diverse opinion, people have different need and their expects expressed in a different way. And having roll up allows you to express that opinion in terms of application. And Solana is no different than, I think, any other chain that would need roll up for their expression of that opinion.
00:35:10.780 - 00:36:30.740, Speaker E: Cool. Yeah. If Solana core teams manage to increase the blocks block size, I think that would lower the value of a lot of these sort of off chain computation constructions. So I think it mainly hinges on those sort of questions, can we, when is that going to happen? And then also, I mean, I think helios as an RPC provider is currently working on like zero to one slot confirmation times, which is on DL1. So those sort of things, Solana not necessarily being opposed to increasing block size, they haven't really done it yet, which I'm surprised by. And then also other infrastructure teams working on really fast confirmation times, even within a shared block space, give me a lot of confidence that there are a lot of base constructions you could build on Solana. And also for the time being, and I think if you can have that sort of an integrated developer experience, I think that's extremely powerful to then sort of get to hopefully new applications that sort of can lead to sort of a new wave of action on chain.
00:36:30.740 - 00:37:08.060, Speaker E: That being said, I also do think that there are good arguments for SDL1 protocol development slows down for sovereign tweaks you can do to runtime. So I see value in that. And I also see that there is just this super capitalistic nature to trying to unbundle and build your own platform if you are a successful application. I think roll ups are definitely happening on Solana. It depends on a couple of other factors, as I said previously, whether or to what degree they are sustainable.
00:37:08.480 - 00:37:20.980, Speaker A: Okay, cool. Well, we have, like, basically no time, so I want to save a minute or two for any general questions to any Solana people while you guys have us here.
00:37:22.400 - 00:37:53.300, Speaker I: All right, great. Any questions from the audience? All right, how about a little poll? Do we think that celestia, do we think that Solana is modular? So raise your hand if you think the answer is yes. All right, let's see the nose. All right. Well, it's interesting voting participation from all you guys in here, but it sounds like Solana is modular. So if there's no more questions, then I want to say thank you to the panel, to Mert, and let's give him a round of applause.
