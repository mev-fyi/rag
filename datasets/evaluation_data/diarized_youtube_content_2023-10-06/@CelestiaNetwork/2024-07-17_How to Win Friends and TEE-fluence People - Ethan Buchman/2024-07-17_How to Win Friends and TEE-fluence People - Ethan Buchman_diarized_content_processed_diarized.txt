00:00:01.880 - 00:00:30.052, Speaker A: All right, hit it. Yeah, cool. Thanks, everyone. So I'm Ethan, co founder of Cosmo, CEO of Informal and incubating cycles. I'm here to talk about how to win friends and te fluence people the case for Tes in blockchain. So really, I just want to lay out a kind of mental model for how to think about Tes and why we need tees, and why we can actually use them in a way so that they're only strictly better than what we currently have. And of course, you can use them in other ways, too.
00:00:30.052 - 00:00:58.382, Speaker A: There are things you can do with them that you can't do with just cryptography. And this isn't an attempt to dismiss any of the amazing work that's happening in the cryptography ecosystem. All of that is essential, and we need to see all of that moving forward. But even with all of that, there's still a case for Tes. And in the meantime, while we're advancing the state of cryptography, there's a strong case for using Tesla. So what are we even talking about? Well, we're talking about private computation, right? And this is the thing that's on everyone's minds. This is pretty fundamental stuff.
00:00:58.382 - 00:01:19.450, Speaker A: Privacy is a fundamental human right. So is the right to transact. I mean, that's really what bitcoin, ethereum, all these cosmos, all these kind of fundamental global settlement solutions, that's really what they're securing, this fundamental human right to transact. But to transact privately should also be a fundamental human right. And so we need to add support for that. And so. Yeah, right on.
00:01:19.450 - 00:01:47.414, Speaker A: But how do we do it? Right? There's all this talk about ZK. I mean, ZK tech has exploded in the last ten years. Ten years ago, it was like moon math, some stuff that we may or may not ever really figure out. And now it's very practical. It's in production, people are using it all the time, and it continues to accelerate. But ZK is not enough. And the problem with ZK is that it really only gives you privacy when you, as the user, have enough data to produce the proof.
00:01:47.414 - 00:02:21.722, Speaker A: So it doesn't give you privacy for more global computations. So it works really well when the prover already knows all the inputs. These are examples like Zcash or penumbra, these sort of shielded pools. The only relevant data that you're publishing a proof about is data you already have. It's your user data. And so then you get these very incredible privacy preserving solutions. But in many of, say, the ZK rollups, or in other kinds of applications where you want to do some more global computation, the solver or the prover actually needs access to all the data, just saying they're producing a ZK proof.
00:02:21.722 - 00:02:58.782, Speaker A: Well, maybe verification is private. You're keeping data private from the verifier, but the prover themselves needs to see all the data. Right? So it works for privacy when the user has all the inputs they need to produce the proof, but it doesn't work on these global computations. And so ZK has kind of become more synonymous with proofs of correctness or integrity or validity, rather than necessarily privacy. And it's actually kind of interesting that the original constructions were really about proving succinctly that a computation occurred, and privacy was actually kind of like a trivial add on to that. Right. But we don't really have time to talk about that.
00:02:58.782 - 00:03:26.228, Speaker A: Okay, what about multiparty computation? This actually does solve the problem, right. This is like true encrypted computation. This is great stuff, but you're basically encrypting values to polynomials, distributing them across n agents. No single agent can see the inputs or the intermediate values or the output. So it's a, it's great, but you have to trust k of n agents, to be honest. And the problem with this is that there's very high overhead. It's very expensive at an I O level.
00:03:26.228 - 00:04:05.528, Speaker A: And so if you want to increase, and there's this trade off between how expensive it is and how many agents you have, because you have to trust some of the agents not to collude, and worse, if they do collude, you have no proof that they colluded, so it's unaccountable. So you're going to want to use a large set, but then that can become impractical for certain computations. Now, turns out MPC seems to be actually quite practical today, especially with smaller sets for certain kinds of computations. And more and more projects are using it for signing and things like that. And that's great, and I strongly encourage more of this. But for large, more global computations, it scales exponentially or quadratically. So that's challenging.
00:04:05.528 - 00:04:35.966, Speaker A: What about fhe? There's a lot of hype about fhe, but actually it's not an independent solution. Right. You still need MPC for managing the decryption keys. One way to think about what FE Ach achieves. It allows you to trade off the IO overhead of MPC for the compute overhead of fhe. So you trade the network overhead for a compute overhead, but you still need to use MPC when you're doing kind of global operations for a blockchain. Right? And once fhe actually gets.
00:04:35.966 - 00:05:03.530, Speaker A: Gets. Gets really faster or much faster, then it will help accelerate MPC, but you can't use it independently of NPC. And it's actually. It's kind of useless for blockchains if just a single key can decrypt everything. So that has led our friend Micara bad crypto bitch to produce a succession of memes. And to really show this, the NPC is coming up on it. Never ask a woman her age, a man, his salary, or an fhe team how they're going to split the decryption key.
00:05:03.530 - 00:05:26.850, Speaker A: So follow bad crypto bitch. All right, so what are we going to do about that? Well, so ZK doesn't give us private compute. That's too bad. MPC is expensive and it doesn't give us collusion resistance. That's too bad. Fhe is expensive, but at least in principle, it's going to make MPC cheaper one day. And this is like, you know, all of us waiting for MPC or not me, but some of you waiting for MPC and fhe to be fast enough.
00:05:26.850 - 00:05:48.896, Speaker A: So the question is, what's a practical solution that we can use today that gives us sufficient guarantees and that we can combine with other techniques as necessary and as they're ready. You guessed it, pictee dummies. This one's mine. Big fan of Amy Santiago here. All right, so let's talk about trusted execution. Environments basically gives us private compute and trusted hardware. It's practical, it's fast.
00:05:48.896 - 00:06:14.876, Speaker A: The isolated enclave means that no one can access the data, even the host. That's actually the goal. It gives you proof of correct execution, similar to how ZK gives you proof of execution. And it gives you relatively straightforward signature verification. But of course, there are somewhat significant downsides. It's vulnerable to potentially devastating mic drop side channel attacks. And you have to trust the central issuer, which is generally intel.
00:06:14.876 - 00:06:40.560, Speaker A: So let's talk about intel. Intel sgx. It's not like a separate chip or anything. It's a set of instruction codes that are available on existing cpu's. And in addition to those extra opcodes, it gives you hardware based encryption of memory. So an area of the ram is actually encrypted and can only be accessed by passing through the special op codes. And it's that encrypted memory that really constitutes the enclave.
00:06:40.560 - 00:07:28.782, Speaker A: So it's not like it's a separate chip. But the assumption is that the operating system itself is untrusted and then there's a root of trust baked into the chip that essentially goes back to intel that allows you to remote attest to executions that are happening on the enclave so a signature can be produced out of the enclave that says, this is the binary that ran and these are the inputs and these are the results essentially. And of course that will just leverage the traditional TL's style, HTTPs style certificate chain like your browsers use, but ultimately rooted in intel. There was an amazing talk yesterday by Sylvan, I think his name is Bellamore, on how we actually move past SGX and have secure by physics chips. And so I encourage you to watch that when it's available. Those talks will be available, right? Yeah. Soon.
00:07:28.782 - 00:07:49.150, Speaker A: Okay, soon. Tm. Okay, so what about, you know, I said potentially devastating vulnerabilities. What do we do about that? So it turns out we can mitigate these side channel attacks by using blockchains. Blockchains are actually perfect for helping us address the issues in tees. And the way you do this is you stick a light client in the enclave. Everyone loves light clients.
00:07:49.150 - 00:08:59.296, Speaker A: People are running around modular summit with light clients of the Celestia blockchain on arbitrary devices where you can stick a lite client in the tee and you require that all the execution that happens in the enclave has to go through a round trip with the blockchain. And the reason that's important is because this can constrain who runs the enclave, how often they run it, and what data that they run it on. And so the way these side channel attacks are typically exploited is that you run, remember, there's encrypted memory, and what you're trying to do is get it to leak something. And so what happens is if you can run the binary over and over again and control the inputs that go in, then the attacker can kind of keep trying until they start to get something to leak and they get a little bit of information out. And after enough runs, they can maybe leak a whole key or leak some data or whatever, because the operating system is untrusted, but the operating system is actually responsible for allocating memory and stuff. We don't have to get into all the details. So if you can lock it down, if you can prevent the host from being able to run the enclave arbitrarily however they want, which you can do with a light client, then you can actually prevent them from trying to exploit these side channels.
00:08:59.296 - 00:09:32.888, Speaker A: So this can actually potentially help us lockdown side channels that we're not even aware of yet. And then this is the kicker. This should hammer it home. Why we should use these things is because you can actually use zero knowledge proof still. You can still just produce a zero knowledge proof out of the enclave so that you don't depend on the enclave for integrity or correctness or validity at all. So all you depend on it for is privacy, which you don't have otherwise. And so if intel completely rugs you or there's some side channel attack or none of this works, you just fall back to what you already had before, which was transparent blockchains.
00:09:32.888 - 00:10:21.636, Speaker A: And so the tee used with a proper zero knowledge proof gives you strictly better guarantees than what you would have had other ways otherwise, right? So that's the core idea. So the tes are always leaky. How do you solve it? You slap a lite client on it. Now, when I first put this meme together, I was like, oh, what does this mean? Mean? Is this actually a permanent solution to this problem, or is it like a temporary thing? So I went and looked this thing up, this flex tape stuff, and the guy is pretty convinced this is permanent. So he takes a boat, like a literal boat, and he cuts it in half, and then he tapes it back together with flex tape and just goes like, cruising around on the lake to prove that this stuff works. So the Tes, they're going to keep leaking until we make the secure. By physics, they're always going to be leaking, and so we can slap light clients on them and fix those babies.
00:10:21.636 - 00:10:56.538, Speaker A: So, summary ultimately, complete design will combine everything. Fhe, MPC, ZKP, Tee. We love our three letter acronyms, but even fhe plus MPC plus ZKP will benefit from using a Tee because it prevents collusion. The TE can actually, you know, help add additional guarantees that there won't be collusion. In the meantime, it gives us practical private compute and rapid prototyping, which is great, can reduce side channel attacks with blockchain design, protocol design. And we can reduce the dependence on the tes for correctness by using zero knowledge proofs. And we can do defense in depth with different kinds of tes, different kinds of zkps and so on.
00:10:56.538 - 00:11:25.580, Speaker A: So another one of these bad crypto bitch memes, there was a summit the other day, ZKP's FHe NPC, and that's what it looked like. And then there was the Te salon. And yeah, that's, I think, Tina sitting in the middle there. So we're building a framework called quartz for bringing Tes to cosmosm. Cosmosm is the sort of native cosmos smart contract environment. I'm not going to go through too much detail because I'm sort of running out of time. But it essentially does everything I just talked about.
00:11:25.580 - 00:11:50.028, Speaker A: Desired properties, replay protection, forward secrecy, censorship, resistance and integrity. All the usual stuff we'd expect. We put it all together like client proofs, encryption. It's really wonderful. This is essentially what it looks like. You have encrypted intents and you could just throw those into a DA layer. You have execution happening in the sidecar, and then you have settlement happening on chain processing, everything like I talked about, this like client thing, just a little bit more detail.
00:11:50.028 - 00:12:15.864, Speaker A: All communication with the enclave happens through a light client based round trip. You can really lock down execution in the tee. So you initialize via handshake. You want to prove the blockchain to the light client or, sorry, to the enclave. And then you want to prove the enclave to the blockchain. And as long as you're doing both of those things, you can have this handshake and you can have all the computation in the enclave be gated by what's happening on the blockchain so that the enclave's binary won't run unless the blockchain gives it permission. Very powerful.
00:12:15.864 - 00:12:41.500, Speaker A: Now why are we doing all this? Why am I up here talking about tes? Well, we're building what we think is one of the most compelling applications of blockchains. It uses the multilateral atomic settlement properties of blockchains to build a very useful application for people. It's called cycles. Cycles money. It's an open clearing protocol. It's designed to clear the most debt for the most people with the least amount of money. And most people think that the way to take on banking is by going after the assets.
00:12:41.500 - 00:13:24.206, Speaker A: If only the power banking is on the assets, and if only we can build permissionless, counterparty free assets, then we can beat the banks. But the banks are laughing all the way to the central bank with that kind of thinking, because the real power banking comes from the liabilities. And the banks have been, oops. The banks have been gathering and clearing clubs and clearing huge amounts of debts with almost no money at all for hundreds of years. And the rest of us are systematically excluded from that. Maybe you've used splitwise, that's probably the only time you've ever had any experience with clearing, but that's just like that only works if you're with trusted group of friends in a small trusted environment. Right? Whereas what we're building with cycles is going to bring that kind of experience of clearing to everyone, anywhere at arbitrary strangers with arbitrary debts, clearing the most debt for the most people with the least amount of money, but doing it in a privacy preserving way.
00:13:24.206 - 00:13:52.230, Speaker A: And so, in order to do this kind of thing with privacy, we need to operate on a global graph, right? And so we have to collect intents from a large number of users and then run a graph solving a graph flow solving algorithm, and then produce zero knowledge proofs of what we did. But we don't want the solver, we don't want the prover to have access to all that data, because then we'd have to trust some particular prover. So we do it in a tee, using the framework I just described, Quartz. And that solves it. That solves it for us. So that cycles. Check it out.
00:13:52.230 - 00:14:07.712, Speaker A: That's kind of it for me. Unless you want me to wrap, but this is me. This is informal. We're building cycles and we're hiring. So we need a lot of smart, passionate people to help us build this. We're very ambitious project to transform finance. We need business people too.
00:14:07.712 - 00:14:13.880, Speaker A: We want to make this thing real. So reach out, talk to me, go to the website, and. Yeah, thanks so much.
