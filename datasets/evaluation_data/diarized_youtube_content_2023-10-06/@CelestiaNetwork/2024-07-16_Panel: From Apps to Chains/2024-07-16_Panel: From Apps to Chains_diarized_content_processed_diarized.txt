00:00:01.840 - 00:00:21.170, Speaker A: Hello, everyone. Welcome to from Appsachains panel. I'm Ben Rodriguez, protocol specialist at Coinbase. We are going to have a very good conversation on this kind of evolution from smart contract apps to chains. In general. Everybody's building a chain. Build anything, anything you want all at once.
00:00:21.170 - 00:00:30.198, Speaker A: We're going to get right into that right now. Would love for my panelists here to start introducing themselves and then we'll get right into it. Griffin, let's start with you.
00:00:30.374 - 00:00:59.960, Speaker B: Yeah, pleasure to be here. I'm griffin. My background, so I studied computer science at Stanford. I was a researcher to begin with. So did embedded operating systems, worked at the hardware software interface before getting into cryptography while I was a student, did zero knowledge protocol design and somehow fell into financing nfts, which is where the business started. And I've been in the industry, founded Halladay for over two years now.
00:01:02.300 - 00:01:26.330, Speaker C: Hey, everyone. Mike from Lyra here. I'm one of the founders. I guess my background in crypto is I used to work at a DeFi protocol called Synthetix, and I left to start Lyra like early 2021. We were one of the first op native apps and have since made the transition from pure protocol to app change. So pretty relevant to what we're talking about today. And yeah, keen to get into that, Andrew.
00:01:26.950 - 00:01:40.050, Speaker D: My name is Andrew, I'm the founder and CEO of Conduit. We're a roll up platform. We enable anybody to quickly, securely, cheaply launch their own roll up. We work with Mike at Lyra. Excited to be here today.
00:01:40.550 - 00:02:07.068, Speaker A: Andrew, you're just everywhere today, right? You just finished a talk and stuff and now you're on a panel. It's great. All right, cool. Let's actually get started into what we want to talk about here. So there's just kind of been a debate, and this is a call forward to Myrt and the modular roast on, I think, day three. So it's like monolithic versus modular. So first things first is what can be built in either case, specifically try to make the case to modular is better.
00:02:07.068 - 00:02:22.210, Speaker A: There's certain things that can be built that's not for monolithic and stuff like that. Can we get right into that? Because I do want to get into how it seems like it gets complicated and stuff like that. But first, what is the benefits of modularity? Anybody can start.
00:02:25.350 - 00:03:01.112, Speaker D: I think the benefits of modular are that it's not one size fits all. For example, you see this on Ethereum where they're prioritizing the solo staker, quote unquote, for decentralization. I think that makes innovating and adding features slower and more difficult. I think the modular blockchain enables teams like Lyrae to build better applications by enabling them to customize parts of the stack. And it's not one size fits all, it's kind of application specific. And I think that's how we'll get best in class apps. And I think that's one of the reasons we're seeing ladder half the success they've had.
00:03:01.256 - 00:03:02.344, Speaker B: Yeah, yeah.
00:03:02.392 - 00:03:35.580, Speaker C: I think the only things you really want to build that are monolithic are like base layer primitives, like monies, like bitcoin, ethereum as well, kind of not settlement stuff. Anyone who's trying to do high performance execution, whether that's defi gaming or fully on chain gaming, that kind of stuff, you probably want to go for a modular approach. It's going to give you scalability you just cannot possibly get in the monolithic context. So I'd say pretty much everyone at this point would do better building modular, unless you're trying to start a new money, but that's probably going to be pretty hard.
00:03:37.730 - 00:04:30.284, Speaker B: Yeah, I think the reason I sort of gained such high conviction on modular blockchains when I was looking into the industry was honestly the history of computing and web two, where once the Internet started scaling, there was this trade off between verticalizing hardware and designing horizontally scalable databases. And if you look at any Internet scale technology, I can guarantee you there is not a single vertically scaled application servicing hundreds of millions of people. And you almost get to like, laws of physics reasons why this is not possible. But you cannot run the Internet on a single threaded computer. And that is fundamentally what a monolithic blockchain is. If it's truly a blockchain, it's absolutely ordered. And you can't run hundreds of millions of transactions per second on a system like that.
00:04:30.284 - 00:04:45.340, Speaker B: You need this sort of asset compliant, eventually consistent model. Google is running 4 billion containers concurrently to service their workload. If Google has to do it, in all honesty, we're going to have to do it as well.
00:04:46.080 - 00:05:16.110, Speaker A: That's fair. That's fair. So then that's actually going back into the architecture part of it. What I like to describe to some of my normie friends is that in web two, we have something called microservices. And the idea here, just take an example like Uber. Uber has Uber taxi, Uber eats, they have Uber package or delivery or whatever it is. And at one point they had a monolithic architecture where if you wanted to deploy a change to taxi, you have to deploy change to the entire code base, to everything.
00:05:16.110 - 00:05:40.000, Speaker A: It would affect everything, like all the operations, but they moved into microservices, where it's like, oh, we'll split this up between business units, independently deployable. And then what happens is that now, if I want to make changes on Uber taxi, I don't have to affect the Uber Eats app or something like that. Would you say that we're at kind of like a microservices part of building modular right now?
00:05:44.140 - 00:06:20.460, Speaker D: I think we're still in the early days. I think we're seeing a mix of things conduit. We see both ecosystem chains that are building, tracking all the integrations, making it easy to build and pursuing that route, and then we see a lot of application specific chains. And I think, frankly, at this point, it's more of a compute constrained thing than anything else. And I think the more compute you have, the more interesting things you can build. And I think roll ups are kind of the only way to do that today, securely. And I don't know if it's necessarily microservices versus monolithic.
00:06:20.460 - 00:06:55.446, Speaker D: I mean, there are different reasons why you might do that in a web two architecture. I think of it more as, like, sharding a database. And so I think, yeah, more compute, more data, more storage, and you get to co locate the logic that's important to you. I think Griffin had a good point earlier around, like, Google runs for billing containers. I think beyond that, it's not like Google and Facebook and all these big apps are, like, composing all the time. There's actually maybe not as much data flow between those things, or it's kind of isolated. And I think we'll probably see a similar model emerge amongst crypto apps.
00:06:55.446 - 00:07:10.570, Speaker D: Right, where, like, you know, I don't know, that pirate nation needs to compose with, like, Lyra, necessarily. I mean, that might be a collab you guys do in the future, but maybe the simplest version of that is just like, you know, you can bridge between the two chains. And I think there's. There's good primitives for that today.
00:07:10.950 - 00:07:13.770, Speaker A: Sweet. Anybody else got anything to say about that?
00:07:14.350 - 00:07:48.624, Speaker C: Yeah, I mean, I would just say from our perspective, like, it all just comes down to being able to optimize for execution and data storage. As Andrew said, microservice architecture feels like, yeah, maybe a decent mental model in the future, but, like, right now, we're just. I think we're still a little bit earlier than that. We're really focusing on being able to get our users, like, high performance, like usability, that rivals what they'd be getting on a centralized exchange while still retaining all the decentralized foundations that we sort of come to know and love over the last few years. Yeah, sweet.
00:07:48.752 - 00:07:49.940, Speaker A: Got anything, Grevin?
00:07:50.640 - 00:08:25.112, Speaker B: Yeah, I think that this the part of the analogy that I like and I think why microservices got adopted in industry. There's a joke in distributed systems, which is rule one of distributed systems is don't distribute the system. Right. Nobody actually wants to deal with the complexity of asynchronous coordination, your abstraction interface as being a network boundary. These are all bad things. They make things more complex. But when you're at scale, and especially when you talk about a shared computer like a blockchain, you don't want these sort of systemic dependencies.
00:08:25.112 - 00:09:02.728, Speaker B: You don't want one really successful app to take down the rest of the ecosystem. A lot of it is actually just pragmatism at scale, where you isolate failure modes, you isolate strong dependencies to talk to each other in one place. That actually dramatically simplifies the sort of macro level computing system. So I do like that idea of like push the complexity to these smaller nodes so that you don't make the entire system brittle. Is it exactly a microservice? No, but I do like that idea of segmenting the different computing environments that's seen everywhere in computing.
00:09:02.904 - 00:09:18.234, Speaker A: Sweet. Awesome. Thanks for that. Let's actually get into the building of app specific chains and stuff like that. There's the idea. And Andrew, you're enabling this with what you're building at conduit, right. With being able to build an l two or an l three in just record time.
00:09:18.234 - 00:09:37.190, Speaker A: Right. Which is super awesome. You also just recently closed arrays, which. Congrats on that. Right. That's awesome. So then my question here is, right, when would you say it would be appropriate to build like an l two versus an l three? Can we see the, can you talk about the differences between the two and why would you build one over the other?
00:09:37.610 - 00:10:06.580, Speaker D: Yeah, for sure. I think that's a great question. A question we get a lot at conduit and kind of help folks navigate. Listen, I think that launching your own l two kind of means that you're competing with the big boys. So like a beast or like it kind of depends on what you're doing, but I think it tends to be a little more competitive and a little more expensive. I think you are a bit closer to Ethereum. And so I think that means that bridging is probably a bit easier, onboarding is probably a bit easier.
00:10:06.580 - 00:11:00.548, Speaker D: For folks that are already on Ethereum, I think if you want to go the l three route, why we might see that is if you're a smaller app specific chain that wants to use kind of an l two settlement layer as a means of getting users. And so like base, for example, has a bunch of infrastructure integrated. They're going to have like Coinbase onboarding, they have smart wallets, they have all this great stuff, and you can leverage that and the users already existing, the assets to have really great onboarding. And so really, I think it comes down to what you're trying to build. If you're really tied into the base ecosystem, your users are there, you're going to benefit from the wave of innovation and activity happening there. Then an all three would make a lot of sense. I think if you want to be a bit more sovereign and kind of ladder is a great example of paving their own path.
00:11:00.548 - 00:11:09.200, Speaker D: I think an l two makes a lot of sense and enables them to, one, start out as an app specific chain, but in the future, they might even become their own ecosystem.
00:11:09.500 - 00:11:15.340, Speaker A: Sweet. Can you get into that with Lyra, actually? What was the decision to make as an l two? And you go right into building that?
00:11:15.500 - 00:11:37.098, Speaker C: Yeah, for sure. So a little bit of context. Lyra is a decentralized derivative protocols. We do options, perpetuals, structured products and the like. We started off as a pure protocol, actually on optimism main chain back in like 2021. And back then, that was kind of the place for us. And we were able to grow our community pretty quickly on optimism.
00:11:37.098 - 00:12:55.226, Speaker C: But kind of over time, we ran into some sort of like fundamental scaling constraints of being a pure protocol. And when we came back to design our v two, this was like 2022, 2023, we kind of went back to the drawing board and realized, look, we need to do things like portfolio margin on chain, which is like, for people that aren't like derivatives experts, kind of like 5100 positions in one account, all sort of getting margins against each other, which is what market makers need, stuff like that to provide institutional grade liquidity. And very quickly, you start to kind of run into gas constraints and like how much gas can actually fit into a block and settle on op mainnet. And that's when we started to think, maybe we want to take control of the actual underlying infrastructure stack and launch our own chain, which is where we met Andrew and the conduit team. The other part of that as well, though, which I think is important, is there is an economic model to running your own chain, which can be profitable if done correctly. Can also be wildly unprofitable, as we found out I the very start, because we were actually settling to ethereum l one da, like late last year when gas was spiking and this was like pre 4844 and pre span spam batches. And so we ended up losing like 37, 38 Eth in the first month.
00:12:55.226 - 00:13:57.640, Speaker C: But there was actually a solution for this, which is we were able to migrate to Celestia and get our Da sort of ported from ETH to the Celestia da solution. So now running a much more economically viable chain. And I think like for any app that is running on say an op mainnet or an arbitrary mainnet at some level of scale, you're going to start to probably think about should we be internalizing this gas market that we're just renting at the moment. The trade off, of course, is you're leaving a more established ecosystem like an arbitrary or a base, and going out on your own. But I think there is a point there where it does become sensible for applications to go and build their own chains. That's what we decided to do. So just to recap, it was sort of like on the one side, like fundamental technical constraints that we want to be able to push the boundaries of, and like, you know, change the gas limit, potentially make some modifications to the actual op stack code that we, that we're running, but secondarily also bring a new economic model into the Lara ecosystem as well.
00:13:57.940 - 00:14:27.538, Speaker A: Sweet. Awesome. So now I have another question here. Do you think there will be other layers, like an l four for example? I know it's been a little bit memed on stuff like that, but I can think of potentially use cases for an Al four, maybe an isolated environment for private transactions, for example, that you don't want to mix up with public transactions. That's what I think at least. But would there be situations where we might need l four s anyway?
00:14:27.674 - 00:14:55.558, Speaker D: I think there will be l five SDE. No, I think realistically, I think the end game is that it doesn't matter what layer you're on. This is just like crypto compute. And as long as it's easy to use, it kind of doesn't matter where it's anchored. And so I think we might see l ten s one day. And I think if you go. I think traditionally we've looked at crypto as so kind of supply constrained that there just hasn't been that much built.
00:14:55.558 - 00:15:12.540, Speaker D: We've just seen fees go up. But I think if we have all this compute that can actually fulfill that demand. It's going to be like this huge tree coming out of ethereum. I think it'll keep going up, the layers will keep going up, and we just need to make it easy to transact across these chains.
00:15:13.200 - 00:15:35.526, Speaker C: You mentioned something before, Andrew, about sovereignty. Obviously, as you go further and further up the stack, what do you think the real trade off is? As you get up to l three, l four, l five, what are you trading off? You're obviously gaining a ton of scalability, cost reductions and everything like that. But do you think at some point it starts to undermine some of the fundamental sort of decentralization? How do you think about it?
00:15:35.598 - 00:16:20.722, Speaker D: Yeah, there are certainly trade offs there. I think stacking an l three on top of L2 probably makes it a little bit less secure, at least in terms of some of the fault, proof, delay, game theory, logic. I think ultimately a lot of these l three s are already making some trade offs. For example, like orbit any trust chain with a one out of one DAC, which is a lot of them, is really just treating the roll up as a server. And if you're running a game, maybe it doesn't matter that much. I think, frankly, what kind of stacking layers one does, it does cost compression, and the compression is quite good. But then two, it's how close are you to a specific layer? It is easier to use or kind of bridge from a layer that you're settling to.
00:16:20.722 - 00:16:31.218, Speaker D: And so I think as these layers expand and as they fill kind of the supply of block space available, you'll see natural branches of these layers kind of launching on top of them.
00:16:31.394 - 00:17:06.934, Speaker A: That was a great question. Thank you for asking that, Mike. And also you hinted at decentralization as well. There's criticisms from different parts of the community, outside communities and stuff like that about l two s being quite centralized as well as an l three settling to an l two would be kind of centralized. So can you address kind of like the decentralization aspect? What does it look like for the different parts of the stack? We can start with l two s, l three s and stuff like that, and then it's kind of like addressing that potential concern. What does the centralization look like in a modular world? Anybody? Griffin, you want to go?
00:17:06.942 - 00:17:35.136, Speaker B: Yeah, I'm happy to speak on this one. I think the primary trade off is not necessarily decentralization. There's many axes to what that actually means, right? There's censorship, resistance. There's execution, correctness. There's liveness. The thing that changes with these sort of off chain execution environments that commit to a state transition. They're computationally, they have to be correct because of fault proofs.
00:17:35.136 - 00:18:04.654, Speaker B: And the industry is moving towards zero knowledge proofs. That's the design of these. You can't get all three because the consensus is network bound at the end of the day. So if you want to scale, you do need to sacrifice on one part, and that's liveness at the end of the day. Right. Because if you're running your own shard and your server goes down, transactions might not be accepted, but you can always sort of go back to the l one and sort of abort the transaction and get your money out. So it is trustless, actually.
00:18:04.654 - 00:18:28.060, Speaker B: So I don't think it is as decentralized as you can get, except there's a slight liveness issue where if anything goes wrong, you need to result to something that's higher latency. But it is really the best of both worlds, because without that, what we're saying is, oh, we're going to scale on a monolithic architecture, which is just from an engineering perspective, is not possible.
00:18:30.120 - 00:19:18.030, Speaker D: I think that was a great overview of the core characteristics of a roll up. I think maybe there's characterization of rollups today as their multisigs, but I think there's been a lot of progress on at least the frameworks that we work with at conduit, on permissionless validation, and moving towards stage two rollups, where multisigs have a time delay and they can only do actions when multiple fraud proofs actually disagree on the outcome. And so I think we're making really great strides towards scaling ethereum. And I think, as with any new technology, you want trading wheels. And I think that's why the multi sigs exist today. And I think we've clearly hit some trade offs on the l one that run amuck of performance. And I think that's what rollops are here to solve.
00:19:18.530 - 00:19:44.808, Speaker A: Sweet. Awesome. I mean, obviously, we get all criticisms aside, there's progress that needs to be made, because then we talk about onboarding a billion people, and my my take is that, like, we're not ready for that, right. We need more of this, like, you know, infrastructure to be built out and all that fun stuff, right. And that is like, you know, going into different layers and all that fun stuff. But this also brings up to the point about fragmentation. Right.
00:19:44.808 - 00:20:06.360, Speaker A: Many different chains. Right. Many different things. And it's very confusing to, you know, any kind of user. I mean, I tell this to my mom all the time, and she's like, I just don't know what to do, you know, whatever it is. Right. So I think one thing I want to ask is that, like, with all, all of these chains that are coming out and we expect to happen in this modular, expanded future, where does the user onboard?
00:20:09.420 - 00:20:12.372, Speaker D: I think if we look at web, Web two is pretty fragmented.
00:20:12.516 - 00:20:13.180, Speaker B: Sure.
00:20:13.340 - 00:20:48.750, Speaker D: And so I think application, I think there's a little bit, and I maybe touched on this earlier, is that we assume that the billion users were going to onboard are going to be exactly like the users that we have today. And I almost think that maybe that's not quite right. And as we onboard the masses, I think it'll probably be more about applications. And I almost think that the fragmentation is going to be abstracted away. And whether that's third party bridges, there's a bunch of, I'm sure, like intense stuff, that intense protocol, people that would love to kind of jam on that, but I generally think that this will be abstracted away and people will just be using apps.
00:20:48.910 - 00:20:53.430, Speaker A: Okay, cool. Griffin, I think maybe you want to talk a little bit about what you just released.
00:20:53.850 - 00:21:33.786, Speaker B: Absolutely. Yes. I think this problem we're very, very familiar with at Haladay, and the way I like to describe it from a web two analogy, is imagine you logged into Netflix. You choose a piece of content, and before you can actually watch the content, the application says, hey, please tell us which backbone network you want to use. Or is it a tier one? Tier two ispennae, are you on Cloudflare? On Akamai? Do you want us to use a Cisco router? That's the level of abstraction that we're giving to our users. And where we sit in the stack is we're a payments business. And we say, okay, a user wants to spend $1 on a modular chain.
00:21:33.786 - 00:22:14.582, Speaker B: They don't care how it gets there. They don't care where their funds are sourced. They have an outcome that they want, which is, I want to spend $1 of my balances that exists on my fiat bank account in a centralized exchange, or on one of a plethora of chains. And so what we released, and we call this commerce automation at the company, which is providing a uniform interface on top of automating where the flow of funds go, it is an intent based architecture. You sign a declarative outcome, and then it just works. And that is the level of abstraction that people want. That's the level of distraction that developers expect, too.
00:22:14.582 - 00:22:44.372, Speaker B: Like, you have these amazing businesses in the prior version of the Internet, like visa, that make it easy to talk to hundreds, if not thousands of banks. Same with stripe, right? We're trying to do the exact same thing, but for paying into a blockchain. And the whole pitch is, look, grow your volume, grow your tvl by making it easy for people to bring in their cash and bring in their tokens. You shouldn't be telling them how to route networks and do all that stuff.
00:22:44.556 - 00:23:02.044, Speaker A: So then if we have native asset issuance, like for example on some type of l three or whatever it is, putting that using holiday, that doesn't really matter in terms of trying to do something else. Maybe put that asset on another l two or three.
00:23:02.172 - 00:23:39.824, Speaker B: Exactly the sort of use case I'm excited about. And one that we can power is, let's say you want to buy an NFT on chain eleven, you have ten balances across ten l three s. And you just want to buy that asset because it's a new application, it's a new app with our technology, you click, once those get pulled, they get routed, they get eventually settled, and you just buy the thing you want. You don't need to worry about the. Ideally you don't even think about this execution threading. I think they're going to be single video games that get launched, that are popular, that will have hundreds of chains, maybe even hundreds of thousands of chains if they're big enough. Right.
00:23:39.824 - 00:23:49.620, Speaker B: Think about World of warcraft, that's running a server per zone, or maybe many servers per zone, we're going to that world. I don't think we should expose that to people.
00:23:50.080 - 00:24:31.498, Speaker C: Yeah, I was just going to add, I think if you go all the way back, the first step usually for people onboarding into crypto, is to buy some crypto from Coinbase or binance. One of these centralized exchanges which frankly do an amazing job of onboarding everyone. So I think from a decentralized application perspective, starting to see these binance web3 wallets, OKX wallets, even though the self custodial versions like Coinbase's wallet as a service that we've integrated for me, is still. That's where you see the next ten, maybe 100 million users coming into deFi. Cause they do still have to come through that funnel at some point. So that's kind of where I'd be looking in terms of the onboarding problem.
00:24:31.674 - 00:24:43.546, Speaker A: So you think that people will be mostly onboarding through sexes and stuff like that? Or you don't think people are gonna be potentially like onboarding directly onto, let's say. I'm not trying to shill, but base, for example. Right.
00:24:43.658 - 00:24:49.090, Speaker C: Well, I mean, where are base is users coming from at the moment? Are they coming from Coinbase or are they coming somewhere else?
00:24:49.210 - 00:24:51.746, Speaker A: I mean, definitely a lot from Coinbase, I would assume.
00:24:51.778 - 00:25:25.790, Speaker C: I actually don't know the numbers, but I would assume that's kind of still where most people get their start. And I think that's a great point of call for centralized exchanges and maybe long term that's kind of what they end up becoming is more just the sort of entry point into the defi ecosystem. Certainly they're much better at customer acquisition than anyone in Defi is. They've been doing it for over ten years. We're trying to get better, but it's an education process and you've got to get the user used to what crypto is fiat, all that stuff, changing that into crypto, and they do that much better than anyone in Defi.
00:25:27.570 - 00:26:07.400, Speaker D: One really interesting thing we're seeing at conduit is I was maybe a little bit bearish initially on custom gas tokens for a chain. But I think one of the things it enables you to do, especially if you control the token, is to easily onboard your users. So I think what a lot of applications will do is they'll launch their token, make it a custom gas token, and then just airdrop balances to their users. And it's really cheap. It's their own chain and that kind of circuits around all of this onboarding problem. And so they can have weth on chain, they can have USDC, and they can swap into it from that custom one. But I think that's a super interesting application of the custom gas token that I hadn't previously appreciated.
00:26:08.260 - 00:27:04.020, Speaker B: Yeah. One thing that I think is exciting as well is there's a whole sort of group of big payment institutions and financial institutions who are now aware of blockchain. And I think that for people who are onboarding through apps, and what we've seen this in web two as well, is that I think embedded finance and these embedded checkout solutions will be the dominant form of transacting in the future. And the reason it's hard right now is there's a KYC burden at the sort of because tokens are convertible virtual currencies. But what we forget is that there are all these businesses, the credit card businesses, the telephone networks, the traditional financial institutions that already have all this data for everybody. And once they sort of hop in and connect to the crypto rails, that is going to unlock a whole slew of loot, because you don't need to go through a four day, five day onboarding process with those guys because they already have it.
00:27:04.320 - 00:27:04.928, Speaker C: I don't know.
00:27:04.984 - 00:27:26.380, Speaker A: Makes sense. Makes sense. So let's get into some maybe more fun things if you want to, if you want to consider at that. What do you want with this modular expansion? What do you want to see built? Andrew, I know you enable all that stuff through cloud, but what are you thinking right now where it's like, this is something that needs to be built right now.
00:27:28.200 - 00:28:18.656, Speaker D: As an infra provider, it's typically not my domain. What I do want to see is I want to see builders utilize the blockchain more as a server. And I think right before this, I gave a talk on proof of play, which is a game that is currently running at 40 million gas a second consistently. That's 20 x ethereum, that's five times base. And I think once you start thinking in terms of, I have this entire thing to myself, how do I max it out? And even down the line, how do I shard this? How do I run multiple chains? And then what is the interop story there? I think you start getting into the more traditional web two lens of thinking, where I can build something great and the scale. I'm not inhibited or held back by some of the fundamental limits that people have today.
00:28:18.808 - 00:28:24.520, Speaker A: Sweet. I know you're building Lyra, man, but do you have anything that you think would be like, yeah, this needs to be built, or something like that?
00:28:24.600 - 00:29:10.130, Speaker C: I think the main thing for us and anyone in Defi who's pursuing their own app train is you do give up composability when you go to your up chain. And that is kind of where most of the magic happens. If you look at what's going on ethereum, it's like restaking into Pendle, into something else, back into pendle. And when you go off on your own, you give up some of that. So I think for app chains like ours to truly thrive, and one of the great things about options and structured products, they are composable instruments. But if we don't sort of enable some good level of asynchronous composability, like we obviously can't get synchronous between different networks, we do kind of undermine our own sort of efforts. And so I just want to see the interop and asynchronous composability space continue to be developed.
00:29:10.130 - 00:29:38.030, Speaker C: Teams like socket layer zero are obviously pushing that really far. And as they continue to do that, we can make an application which gets the best of both worlds, like high performance execution environment on rl two, where we can do all the portfolio margin and derivatives logic and all that, but still be able to have those tokens and vaults kind of like proliferate out into the broader defi ecosystem, whether that's on Ethereum, arbitrum, or any of these other app chains, and l two s that are coming, that are coming up.
00:29:38.650 - 00:29:39.946, Speaker A: That's something. Griffin.
00:29:40.138 - 00:30:25.204, Speaker B: Yeah. One thing I would love to see be made possible is just asynchronous computing in a way that's not just for fungible tokens. And the reason I say that is it's pretty simple to get this sort of asynchronous model with cross chain atomic swaps. You have this escrow lock, a lot of the intent protocols, they lock money front the capital, and then you release it on the other chain after the fact. That's great for moving tokens around, but that doesn't work for arbitrary state management. And if we want the blockchain to be a computer and a server, you need a way of moving the bytes around that are not fungible from one place to another. And that's sort of in the way that you expect with like node js.
00:30:25.204 - 00:31:01.290, Speaker B: When I call a server, right, there's a nice wrapper around the fact that it's asynchronous. I think we should bring back the Yank opcode. There's an old ETH research paper on this, and it was basically saying you should be able to take part of contract state, freeze it on one chain, and then move it over just in time. And what that lets you do is you can start sharding truly and having access to memory. The OG analogy would be like pipes in an operating system where you can actually move data. Not just a lot of interop today is not really interop. It's just fungibility reduces the problem.
00:31:01.290 - 00:31:09.690, Speaker B: Data interop is almost impossible right now. Unless you use these wrapper constructs, you're not actually moving state between the chains.
00:31:10.370 - 00:31:29.402, Speaker A: That's pretty cool. So more info, more infrastructure. All right, so we have actually a little bit of time, and I don't mind to just. We got a couple minutes. If anybody has any questions, I'll run to you. If you have any questions for anybody on the panel or me. If not, then we can end.
00:31:29.402 - 00:31:40.320, Speaker A: And this has been really great. But first, let's get some questions. I also can't see, so you might have to call out. These lights are like killing me right now.
00:31:42.260 - 00:31:42.892, Speaker C: All right, great.
00:31:42.956 - 00:31:45.260, Speaker A: Perfect. All right, so I've been Ben Rodriguez.
00:31:45.380 - 00:31:49.308, Speaker B: A protocol specialist at Coinbase Griffin, founder.
00:31:49.324 - 00:31:53.988, Speaker D: And CEO of Halladay, Mike from Lyra, Andrew from Conduit.
00:31:54.044 - 00:31:55.220, Speaker A: And thanks for joining us on this panel.
