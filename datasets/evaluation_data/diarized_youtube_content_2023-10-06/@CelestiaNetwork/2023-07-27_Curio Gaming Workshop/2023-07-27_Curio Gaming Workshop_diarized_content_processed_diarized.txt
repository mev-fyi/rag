00:00:00.570 - 00:01:07.246, Speaker A: So just a heads up, I'll be talking about the blockchain infra that is needed to build fully on chain games and really just blockchain games that really can break out of the niche right now and start to be interesting. I will take perhaps not quite a workshop format where I don't have a ton of hands on things that you can download on your computer and start trying things. Even though Keystone, this is already open sourced, we're still polishing a lot of this stuff. And probably you can expect a more thorough article next week, which you can use to start building on Keystone if you like. But today I will take a more need based or like, I guess, first principle approach, starting from the experience that players are looking for or that can be uniquely addressed in fully on chain games, and then the game paradigms that will arise. And then I will talk about kind of our journey in building on chain games and the specific solution that we came up with, which is called Keystone. It's a fully on chain game engine that we've made in the past couple of months, and I'll talk about what problems that solve.
00:01:07.246 - 00:01:38.726, Speaker A: Okay, let's get started. So before I begin, can I have a show of hands? How many of you here are go or solidity programmers or engineers who write code frequently? Just raise your hand. Curious. And how many of you are rts games or strategy game players? Okay, sounds good. Yeah. Let me briefly introduce myself. I'm Eja.
00:01:38.726 - 00:02:45.570, Speaker A: I'm one of the co founders for Curio. And for those of you who haven't heard about us, we are a fully on chain or crypto native gaming infrastructure company dedicated to supercharging the arrival of really cool and successful on chain games. And as I said earlier today, I'll be talking ultimately about the tech that we really, over the past couple of months, which is called Keystone. I think it's a revolutionary framework on chain game, framework that can change a lot of the things and solve a lot of problems that are facing onchain games today. But before I get into that, I will talk first about the experience that we're trying to shape that we think fully on chain games have a unique stab at, and the design paradigms that support those experiences. So first, a quick philosophical detour is what do you think makes the real world feel real? Is it just the rendering quality or is there something else? And in our opinion, humans have been social animals since the beginning. And the relationships that we have with other people are really important and are very valuable assets of ours.
00:02:45.570 - 00:03:35.026, Speaker A: But the types of interactions are not very well created in the virtual world or in games compared to the real world today, right? Think of one game that rivals or exceeds the complexity of social interactions that you have in real life. There's not such a game, even if there are many mmos that claim to be very interesting. And why is that? Right. So let's take a brief look at kind of the current social models in games today. So first, how many of you recognize this game over here? Yeah, so, yeah, this is Starcraft. It's one of the most popular RTS games. And the thrill of commanding a lot of armies and annihilating other people's armies is quite interesting, I would say.
00:03:35.026 - 00:04:08.922, Speaker A: But the social interactions, if you think about it, in Starcraft and in games like CSGO and Overwatch, are pretty purely competitive, right? There's not much outside of directly competing with other players. There's not really any cooperation or anything that sits between cooperation and competition, right? And that's drastically different from the real world. So this is what we call social 1.0 games. The primary relation there is PvP, or pure versus pure. And on top of social 1.0, we have 2.0,
00:04:08.922 - 00:05:05.646, Speaker A: which are overwhelmingly mmo for massive multiplayer online games. And this game here, shown here is an mmo style strategy game called Rise of Kingdoms. It's one of the most popular strategy games on mobile, basically the longer but less strategic version of Sieve, if you're familiar with Sieve and the Paradox games. And there's a lot of other category games that you may or may not have played or heard. Eve Online, World of Warcraft, all of these games, what these games added on top of the first generation of social games or multiplayer games is the collaboration within a certain group. And the primary competition happens on the level of the group, not an individual, in these games. So if you think about it, right, in rise of kingdoms, for example, you join as an individual, as a player, but you are quickly pretty much forced to join one of the existing alliances, and if you don't join, you're annihilated pretty quickly.
00:05:05.646 - 00:06:01.038, Speaker A: If you join, however, you pretty much are binded to the group from that point on, right? You can still choose to leave and go to another alliance, but if you stay in one alliance, your goal is pretty much to grind, to put in time and to wail, to put in as much money as you can to kind of reach the top social hierarchy in the group. And there's not really anything else that you can have, right? Like, let's say you're this player over here, and you want to trade with this other player in a different guild or group, there's not really a purpose or a way for you to do that. Unlike the real world. And whether it's a trade or a non aggression pack between you two, you can't really do that. And it doesn't apply just to individuals. This also applies to group. Let's say this guild on the left want to team up with the guild on the right, top right, to, let's say, defeat this guild first.
00:06:01.038 - 00:06:48.480, Speaker A: They can't really do that. They can verbally agree that we want to team up. But if one starts to attack another, there's not any way to enforce that promise. And because of that, the social interactions in virtual worlds have been very simple. So what does the real world do better than games at social relations? In my opinion, there are two very important things. The first is the existence of highly valuable assets, such as your house or anything that you think are really valuable, and they serve as collateral for your actions. They basically let people take responsibility for their actions, right? Because otherwise, these very important things to people can be taken away.
00:06:48.480 - 00:07:54.706, Speaker A: But who will ultimately enforce these promises and deals? It's the court or the law enforcement entities which are actually effective in the real world. These things form the foundation of such a multifaceted social world in our real world. And how do we create that for online games or virtual worlds? I think we already figured out half of the puzzle, which is the existence of virtual assets, which can be very valuable and arguably more safe than in the real world. But we don't yet have a mechanism to protect people's actions and interactions around these assets. And let's think of a specific scenario. So here you have a grand strategy game you're playing, and you see this player of italic who's right next to you, and you're similarly strong. You both have a lot of troops, and you're fighting over a couple gold mines that's sitting in between you, let's say.
00:07:54.706 - 00:09:07.030, Speaker A: All of a sudden, one day, Vitalik texts you and says, this guy named Justin sun is approaching both of you with lots of high level horsemen, and you're both going to lose if you continue fighting against each other. And you ask Vitalik what he wants to do, and he proposes a non aggression pack, a temporary one, that basically you stop attacking each other for three turns, and whoever violates pays the other 500 gold. Simple enough, right? This is probably the simplest kind of deal you can make. But if you think about it, if you agree to this and then decides, oh, you really want the gold mines in two turns, and you attack Vitalik anyways. What happens? Nothing really happens, right? Vitalik gets angry. If lots of players does that to him, he quits the game, but justice never comes. So what would add this missing law enforcement layer that enforces these interactions and promises people make? In January, or actually last year, around September, October, we came up with this system called treaty, which is basically using smart contracts, but not in the purely financial world of defi and nfts, but in the more context rich gaming worlds.
00:09:07.030 - 00:10:06.702, Speaker A: So an example can be a non aggression pack for three turns or for forever, to things as complex as NATO, which is a defense pack that declares what type of capital is used, in what circumstances. You can define a guild currency. Imagine like Saudi Arabia with a lot of oil can they can issue their own currency with their own schedule, one to one backed with a barrel of oil to protect that resource. You can have on chain democracies, other kind of governance organizations that pass policies in different ways. And all of that really is open to players interpretation and creativity, right? As long as you have this framework. And the nice thing about treaty, compared to traditional worlds is that traditionally, game logic is closed. And even if it's open, right, you don't know the game that you've seen through the front end is verifiably the game that the game company claims it to be.
00:10:06.702 - 00:10:38.122, Speaker A: Right. Imagine, I don't know how many of you are poker players, but a lot of poker players online bet much less than in real world, because even if the probability is tweaked in a very slight way, even if it's not intentional, it could cause very big damage. Right. And that's why we haven't seen a lot of these. There's no such thing that would actually make up the social component. So treaty is also uniquely suited for blockchains. And this is pretty powerful as a concept, and we build a game out of it.
00:10:38.122 - 00:11:24.818, Speaker A: We basically started building this game in November on top of our past kind of forex. We built demos before, and we basically built a better demo or like a proof of concept where it's a forex strategy game. Every player starts with a capital, commands a bunch of troops, and tries to capture the center tile, which is the victory condition, within a week. So the game lasted for a week in this January. And I think when you hold the center tie for 6 hours, you win. So originally we added the feature treaty inside. How it works is our past game was implemented with fully smart contract based logic, as well as social contracts.
00:11:24.818 - 00:12:45.858, Speaker A: So basically the game back end is entirely written in solidity that lives on a custom EVM roll up that we have to maximize the performance while preserving EVM equivalents. And we basically, at the beginning of a lot of player functions such as move or battle, there's a function that basically fetches all the treaties that the player has signed with other players, and it checks whether any of those treaties invalidate or disallows the move or the action. Let's say I sign with any of you saying that I cannot move on your territory, and if I do, I'll give you 500 gold, or maybe I just can't move onto your territory, then that will get automatically executed when the trigger is met. And the game was interesting in one part because the treaty actually affected the result of the game. Towards the end of the game, I think it was 12 hours before there was one alliance that. So this is not the final picture. This player over here and this player over here, and then another player alliance and basically held a lot of troops in a senate tile hoping that there's no army that can defeat them.
00:12:45.858 - 00:13:33.402, Speaker A: That wasn't the case. And there was one player who basically created a loan treaty that allowed them to loan armies from another player and basically pay them later. And they signed this treaty with another player who was farther away from the center, who had no victory against the victory on his own, but had a lot of troops to support this player. So that player actually ended up winning because they got two people's troops and together rated the center. So that was super cool. And people made a bunch of wife's jokes about just like spending a lot of time in the game. And yeah, we're building a breakthrough real time war strategy game on top of this idea, but kind of much bigger.
00:13:33.402 - 00:14:24.810, Speaker A: And we've already tested the game internally with prototypes and it's fucking awesome. And we hope to launch the game in a couple of months. So that's the game building side in curio. So let's get back to infra. Let's think about what I kind of briefly talked about our previous infra. With fully smart contract based logic as well as social contracts, what do we actually think a robust layer of infrastructure framework need to support these fully on chain games? To aim for these very high stake PvP and very rich social interactions, we obviously need the first two things which are crypto native. I would say the first one is composability.
00:14:24.810 - 00:15:54.202, Speaker A: That's a term that people throw around. But what I mean by composability is the ability for players to express any kind of relationship with other players in a way that the game engineer understands and can execute. And then the second piece is trustlessness of assets on chain. But if we think about it right now, I think smart contract based logic engines can totally do both of these. But why are fully on chain games still such a niche and kind of unplayable? To be completely honest, the elephant in the room is that game actually needs much better performance to support a lot of the best design paradigms that exist out there in the world, right? So FPS games, TPS games, MOBA, all of these games, MMO games, even some rpgs, require a level of performance and throughput that is simply untenable today with purely smart contract based logic, right? That's something that I think a lot of the game framework infrastructure players today ignore or intentionally not talk about. People will keep saying on chain games will be fundamentally different. That is true the case, but games still need to be playable in order to be fun, right? So we had the same problem in this game that we built in January.
00:15:54.202 - 00:17:11.880, Speaker A: We optimized our smart contracts a lot and ran into stack too deep issues many times, used diamond and use foundry to test everything. We did our best and I think it's pretty well written. I wrote the smart contracts, but the reality is when 20 players are playing concurrently, each action, such as battle, right, which had a for loop, had a bunch of extra get functions because of stack two deep issues costed around hundreds of millions of gas, which is not because of I hope it's not because I'm a terrible coder, but it's really because the game is very context rich, right? And you need to actually get and set a lot of state that Defi and a lot of existing applications simply don't need. And this is not unique to us. I think a lot of other current frameworks have this problem, but you can't just simply have players wait 15 seconds, 20 seconds for each action. And this is not even counting. Taking games into continuous movement space where every move is like a small tile, then the number of transactions you have is also pretty crazy.
00:17:11.880 - 00:17:50.830, Speaker A: And this is a problem. The dark forest on top, right? Solve this or avoid this problem by having each action take from several dozen minutes, like 15 20 minutes anywhere, to several hours. The primary action in Dark Forest v. Six was sending energy rays to conquer other planets, and it was, I think, the most well known fully on chain game up to date, and that worked for its purpose. But most games that are really fun to people aren't this slow. Right. And because of that, actually Dark Forest had an insanely high user entry barrier.
00:17:50.830 - 00:18:27.934, Speaker A: And that's why, even though many people heard of it, not that many people actually played. This is the proof that our game had the same issue. The player here says the blue ones, which are the moving troops, don't actually move and the red ones don't actually attack. So people are challenging, are like questioning themselves for whether they're doing the right thing. Yeah. Why is that? What? Cause these performance issues. Fundamentally it's because you're using EVM opcodes to execute and basically implement the game logic that EVM wasn't meant to support.
00:18:27.934 - 00:19:04.902, Speaker A: Right. And that is like 100 times slower than typical game engines. And on top of that, you don't have the game tick in blockchains. And why is that bad one? You can't really. For example, for pathfinding, which is too expensive and too costly to implement in smart contracts, you basically have to use the front end to do pathfinding, which is very unfriendly to AFK or away from keyboard. And on top of that, it's a huge performance bottleneck on its own. Because let's say you're trying to move from point a to point b, and what that is, is actually an intent.
00:19:04.902 - 00:20:17.086, Speaker A: What your movement looks like is every small step at a time, right? You might take 100 or 500 steps before you get to point b, but in blockchains or in today's onchain games, every mini step you take is a transaction. And in a transaction, obviously you need to check permissions, you need to check timing, whatever, a bunch of other things that usually doesn't have to be repeated for an intent, right? But it has to be done like 500 times, which adds to the performance through a bottleneck. And finally, solidity is not, this is a minor, less important problem. But a lot of, I think today's simple launching games are enough with solidity. But there's a lot of think of genshin impact or the biggest games that you see. It's very difficult to create that in solidity because it's not meant for games and it's not as well tested as a lot of other more traditional languages like Javascript or Gill. And we basically thought of all of these problems and took several months to really think first principles like what kind of experience do we want to preserve for players? We definitely want to preserve the full social composability.
00:20:17.086 - 00:20:52.634, Speaker A: We want to preserve everything being on chain, the assets beyond chain, the logic be on chain. But we also want performance. We also want players to one day play web two like games, but with additional gameplay features on chain. And so we made Keystone. It's a pretty revolutionary roll up based onchain engine framework made to specifically 100 x the performance of onchain games. And before I dive into details, this is a demo, it's a tech demo. It's not complete game project, but basically we put the Warcraft game entirely on chain.
00:20:52.634 - 00:21:23.210, Speaker A: So everything you see here, the location of houses, the buildings, every attack, every movement of every troop, the trees, like all of that happens in real time on chain. So hopefully that's pretty impressive to see. And the interactive demo will come out in one to two weeks, so you can definitely feel free to try it out on your own.
00:21:23.900 - 00:21:24.810, Speaker B: How many?
00:21:28.620 - 00:22:08.756, Speaker A: So we didn't count that part because I think a lot of the, I'll explain, get into the technical details, but essentially a lot of, let's say many troops are moving together. That is a parallelized transaction or like parallelized action that you can count as one or many transactions. And basically not everything happens as transactions. In this case, the intent is a transaction, but the actual change of state do not necessarily take place as transactions. So key features of Keystone. First of all, it's a high throughput ECS game engine. ECS basically means a way to store game states.
00:22:08.756 - 00:22:55.140, Speaker A: And we have things like fast gametic and enshrined indexer in this engine supporting basically the fastest rts. We wanted to put Starcraft on chain, but we couldn't use the assets, so we chose warcraft. And it supports historical state querying. So if you sign a treaty that says, hey, if I don't attack you four or three turns, you give me something, right? That four three turns part is not about the current state, but historical state and a progression. So that is definitely needed for a lot of types of treaties and deals. And ultimately it supports automatic smart contract execution with EVM contracts. And finally it's written and go, so allowing for much better and faster game development.
00:22:55.140 - 00:23:44.288, Speaker A: So this is the infrastructure, this is the details. It's not that detailed, I know, but I'll briefly explain and then next week we'll have a more detailed article explaining everything. You can also dive into our repo on our GitHub. Basically how Keystone works is have the EVM sitting side with the game engine, or the game engine lives inside the EVM. So the game is really in chain rather than on chain. And these two systems microsystems interoperate with each other using safeful pre compiles so the EVM can read from the game engine and stores the sade in Merkel trees and vice versa. And basically the EVM has all of the social contracts that players define.
00:23:44.288 - 00:25:00.860, Speaker A: And they would, let's say, want to get the number of golds that a player has. That would be a pre compile that gets a specific number right and you can set state in the same manner given that you're not violating the game physics. And this basically serves as one system and has one game tick, the data of the game in real time is settled to Celestia as DA and then to Ethereum or whichever l one people choose. The community chooses for the staking management and the final payout and a lot of other features. And the game is run by a community of guardians, a multi sig of guardians. It could be one at the beginning and multiple and basically more and more over time. And if a Guardian cheats, the setup is pretty similar to arbitrams where if one of the Guardian acts maliciously, the community can, anyone can point out using the DA that this guy acted maliciously, another Guardian and the multi sig can decide to do that and basically invalidate the mistaken payouts.
00:25:00.860 - 00:26:04.050, Speaker A: So that's the setup. And yeah, we think this is kind of the first step towards building actual, actually robust and interesting fully on chain games that can get to social 3.0, allowing a lot of new types of interactions. Basically I think the end state will be something like you're making deals with 500,000 players in the same game in various magnitudes. You can do a simple resource to resource trade with some, you can do life alliances with some others, and you don't really have to worry about them reneging or like rug pulling you or whatever, right? Because the system take care of that, takes care of that for you, so you can truly focus on what's important. And with that, I think game developers will also have a much bigger design space to design these games with complex social dynamics. It wouldn't just be simulation games, wouldn't just be physical simulation games, it will be social simulation games as well.
00:26:04.050 - 00:26:39.708, Speaker A: What are we doing to answer the plot from now on? The first one is we'll keep improving Keystone. We'll basically publish or release v two in a couple of weeks by taking like we first publicly announced Keystone a week ago. So we're still in the process of getting feedback and definitely by all means give suggestions. Like this is a very early version, there's probably a lot of problems. Let us know how we can improve it or go contribute some code to improve it. Yourself. Right.
00:26:39.708 - 00:27:20.392, Speaker A: We are building the flagship game. As I mentioned earlier, I think today's onchain games are insufficient and we really are waiting for a game that just gives people a eureka moment. Right. And we're aiming for that. And ultimately I think the amount of design space that just open is bigger than anyone's imagination and we certainly cannot explore all of it. So we want to actively support other game developers and teams who have good ideas to build on Keystone to explore, whether it's like social interactions or some other thesis you have. And we want to provide very intense hands on type of help because we know that games don't just succeed because of simple mechanisms, but because of holistic experience.
00:27:20.392 - 00:27:43.900, Speaker A: You need fairly good art, you need capital, you need distribution. All of that are very exhausting to think about. So the resources we have there we'll share with you to build the game. And more details on that will come next week. So our Twitter for sure. And yeah, that's everything. So open for questions if you guys want to discuss more technical details.
00:27:43.900 - 00:27:46.950, Speaker A: Yeah. One of you.
00:27:48.840 - 00:27:57.988, Speaker B: Yes, elaborate the layer one connection manager on the layer one.
00:27:58.074 - 00:27:58.992, Speaker A: Yes, elaborate.
00:27:59.056 - 00:27:59.670, Speaker B: Why.
00:28:05.900 - 00:28:09.930, Speaker A: What is your question like? Why can't it, why can't it manage the entire state?
00:28:10.560 - 00:28:16.750, Speaker B: If you, if you can elaborate on the connection between the roll up state and layer one.
00:28:20.160 - 00:29:01.500, Speaker A: Yeah. So if I get your question correctly. So this up, let's say we're running like the first game lasts perhaps anytime between 30 minutes to three days, let's say. Right then let's say payout that can be settled at the end of the game. Once all of the state is finalized, there's basically challenge period where people can say, oh, let me check whether the game is entirely honest. And once that happens, like let's say for a day or seven days, probably not seven days, the payout will happen. And.
00:29:01.500 - 00:29:02.190, Speaker A: Yeah.
00:29:03.520 - 00:29:07.470, Speaker B: Generic settlement on the letter one or is that something?
00:29:15.140 - 00:29:31.910, Speaker A: So I'm not sure if I. Oh yeah, you can. You can. Yes, you can change the l one so the community, like it's a solver roll up so people, the community can vote to switch from eth to Polygon. Let's say.
00:29:34.850 - 00:29:36.240, Speaker B: I think what is asking.
00:29:39.730 - 00:29:55.880, Speaker A: Right? Oh, I see. I think it depends on what you change. It's possible that you will need to. Yeah.
00:30:03.770 - 00:30:08.970, Speaker B: Like gaming oriented general settlement.
00:30:09.550 - 00:30:11.900, Speaker A: It's game specific. Yeah, it's game specific.
00:30:14.750 - 00:30:18.620, Speaker B: Why is that to have.
00:30:22.050 - 00:30:48.230, Speaker A: So the biggest reason I would say is we want much better performance than using EVM for executing game logic because that's the bottleneck. That's the bottleneck that's facing on chain games right now. And we want basically the equivalence of that in terms of composability and the security of assets while running much faster games.
00:30:49.450 - 00:30:51.800, Speaker B: Did you run your game engine?
00:31:00.980 - 00:31:11.110, Speaker A: Yeah, I think this is our current setup with like when we forked op Stack and. And like this. This part is the op stack right now. Yeah.
00:31:15.330 - 00:31:21.280, Speaker B: How do you do the actual 100? Like you said you manage.
00:31:22.710 - 00:31:54.966, Speaker A: Yeah. So most of the improvement happens when you basically get and set state in the game engine as opposed to using get code and set code. Sorry. As opposed to using ECS architecture that's built into solidity. Basically we benchmarked this. It's over 100 times. I can't remember the details.
00:31:54.966 - 00:32:18.260, Speaker A: I think it's something like. Yeah, I can't remember the details because it varies based on how much data you're playing with. But it's more than 100 times faster. Yes, exactly.
00:32:20.070 - 00:32:21.540, Speaker B: In terms of like.
00:32:25.690 - 00:32:56.334, Speaker A: Right? Oh, yeah. You can do for. For many games like 60 ticks per second. So approaching like today's games. Yeah. Whereas traditionally with onchain games, our previous TPS was around one in the best case. So the latency comes down to something like 15 seconds when you have a bunch of players and the system is not.
00:32:56.334 - 00:33:45.740, Speaker A: Also not stable. Right. Not for all of the games. And there's one caveat to that is let's say you have some complex treaties that need to be checked on a very high frequency basis. Then you can't have 60 frames per second even if your game's engine supports that. Because you might run into issues where a practical example would be let's say we sign a non aggression pack and it's somehow very complex because of detailed logic that basically needs to be checked every time you get close to my territory, let's say. And it checks every time you battle, whether you're battling me.
00:33:45.740 - 00:34:49.152, Speaker A: Right. And if so, the punishment clause is triggered. And if that smart contract function takes more than 160 of a second to run, then what you can do is one either to slow everything down to how long that smart contract takes to run, or you can have a lore of the game which basically reverts some of the stay changes. If you find there's kind of a judgment day type of thing where I think of it as like tax auditing, it doesn't happen every time you pay something, but it can check and punish you retroactively. No, this is already resolved. We basically run this on top of a roll up as a service provider and either us or them can take care of the gas. Yeah.
00:34:49.152 - 00:35:17.450, Speaker A: The player doesn't have to pay for the gas spam. I think there are many, honestly, we haven't run into as much spam problem, so I think we'll have to think more detailed on that. But there's many ways, like whether you have some action point type of system or you can look at like buy wallet and. Yeah, there's a bunch of ways.
00:35:22.300 - 00:35:33.410, Speaker B: Those are the high performance, probably aggregate together and make quantum smartphones like that. Them.
00:35:34.100 - 00:35:34.850, Speaker A: Yeah.
00:35:36.820 - 00:35:50.050, Speaker B: High speed. Because essence don't pay for it however you want.
00:35:51.060 - 00:36:24.120, Speaker A: Yeah. And the settlement frequency can really also be dependent on the game as well. Like you could have a scenario where you need very high frequency settlement. Then that could be done as maybe some trade off. Yeah. Other questions or comments? If not, I'm here to chill till I think, chill for 15 minutes. So.
00:36:24.120 - 00:37:16.650, Speaker A: Yeah. Oh, you want players to pay for gas, then we actually need to implement a gas like calculation mechanism for the game engine, which we haven't done. But I think that's an interesting thought. Yeah. What would be the, what's the scenario you're imagining for a players to pay? Like does the player have to pay for every transaction? Because here's the thing, right? Like let's say, let's say in a continuous movement game, every movement, do you pay for that or do you pay for an intent or do you pay by a time basis, like every 24 hours? What type of mechanism are you imagining?
00:37:19.230 - 00:37:21.340, Speaker B: I don't know, let's say.
00:37:24.670 - 00:37:48.980, Speaker A: Okay, well, I think that will come with some trade offs in performance, probably. I would just ask why you want players to do that. Because to pay for every little movement as opposed to maybe if you're worried that people will rug the system, maybe ask them to pay upon the sending of the intent and then reimburse them if the stop, the movement is stopped at some point.
00:37:57.530 - 00:38:02.134, Speaker B: Yeah, but then it was fraud. Then after one week.
00:38:02.252 - 00:38:02.630, Speaker A: Right.
00:38:02.700 - 00:38:03.750, Speaker B: I discovered.
00:38:06.430 - 00:38:30.660, Speaker A: I mean, that's the shared problem with all fraud proofs, I think, or like fraud proof systems. So I think it's like, it's definitely not as critical as Defi because just there's much more stake at hand. Yeah. But it could be very important once the game, it's like scales with the importance of the game. Um, yeah.
00:38:34.150 - 00:38:47.590, Speaker B: How difficult, how separated game engine and the engine layer.
00:38:50.410 - 00:39:25.740, Speaker A: I would say it's fairly, it's not strongly coupled. So it's definitely possible to change one without worrying about the other. We've thought about that. Ours doesn't do that right now, but I bet you can make a system that does that. Yeah. Yes. DLC system.
00:39:25.740 - 00:39:50.496, Speaker A: Oh, DLC system. Like treaties. Okay. Right. Yeah. That's a very, that kind of has to do with, like, ordering. Yeah.
00:39:50.496 - 00:41:08.796, Speaker A: So I think this is a problem that may very well occur, and it'll probably occur. It's kind of a good problem to have because people are using them intentionally. So one way is to throw your hands up and make it into the lore. Be like, if you make treaties in some way and people can still break it in some ways and without punishment. The second would be you can run some system that checks for the worst case. Maybe when your balance goes below a certain threshold based on the treaties you signed, it says, oh, I don't know, it may be possible you can't pay back all of your loans, so you get punished in some other way. Yeah, I think it's case by case, but I think it's safe to conclude that the sequencing, absolute sequencing ordering is not as important in the EVM or Ethereum as in games, because actually, a lot of times it's just like whoever seems to get first to the server does whatever they need to do and.
00:41:08.796 - 00:41:09.690, Speaker A: Yeah, that's a good question.
