00:00:01.840 - 00:01:10.370, Speaker A: One kind of interesting thing to think about is sort of some of the risks that exist within the modular stack and how we kind of quantify them. So this is going to be sort of a quasi technical talk, not a fully technical talk that kind of gives some initial analysis of this form. So when I think about the economics of modular systems, a natural way to describe them is via matching markets. And I know some of you have probably heard about them. And the interesting thing about matching markets is they are very different than things like auctions that you often see in blockchains, in that they are optimizing for stability as opposed to optimizing for revenue or welfare. If you view things as a matching market, you can actually try to get bounds on what the minimum amount you need to pay for security is for each of these networks or for each of these components. And from that you can figure out sort of some notion of what the economics of these moderate systems needs to be.
00:01:10.370 - 00:01:56.390, Speaker A: Okay, so what are matching markets? Matching markets show up in a lot of places, whether it comes from kidney exchange or whether it comes from things like online dating. This is an example where you have one group of people on the left, they each have preferences. Another group of people on the right each have preferences. And this shows the sets of matchings that are feasible, with one of the matchings actually being blocked by this pairing. So matching markets show up in a lot of places outside of, definitely outside of crypto, one of the most studied sort of models in economics. The main idea is you have a set of inhomogeneous goods. Those goods have some shared properties, but they are unique.
00:01:56.390 - 00:02:54.416, Speaker A: And then there's demand from buyers who have a lot of constraints. So, for instance, if I need a kidney, not all kidneys can be donated to me, but the ones that can, there might be some preferences based on the particular blood types, based on particular other constraints. So there's usually this kind of high dimensional constraint vector for kidney deposits. So matching, again, is very different than auctions. So auctions are really about maximizing revenue, maximizing welfare. So an auction is, you know, if, say I go to an art auction and there's someone who's bidding $10 million, and then that person is removed from the auction and the next highest person is bidding $1 million. Well, the auction has this ten x lowered revenue, right? It's sort of unstable to single individuals.
00:02:54.416 - 00:03:40.774, Speaker A: Matching is much more focused on, hey, if I add or remove individuals, can I keep the matching the same? So, like, if I have a kidney donor who gets removed, can I ensure that the kidney recipients are stable. The matching doesn't change a lot. Like you still have the same matched partner. And so in crypto, we actually, I think we always think of things in terms of auctions first, because there's MEV auctions or NFT auctions. There's a lot of auctions historically. But I think this world of intense off chain aggregation, having modular systems, is actually much more of a matching problem than an auction problem. You know, you naturally think of matching in terms of graph theory.
00:03:40.774 - 00:04:36.170, Speaker A: You have some notion of a set of supply, a set of users on one side, and you also have a notion of demand, a set of people on the other side of people who are receiving the kidneys. And when you think of it in this sort of graph theory sense, then it becomes this question of what is the set of matchers? How do you kind of, what is the set of ways you can allocate between the two sides? Usually, matching markets are studied in the case where they're static, so people can't join and leave the graph, which is obviously not true in crypto. And the other thing is, there's always a central planner. So a central planner who chooses the optimal matching or maximum matching. Decentralized matching markets don't have this. And you can view the modular world as my demand side is people who want to do some sort of sets of transactions. The supply side is the set of each individual modular component, and I want to figure out prices to match them to which components they should be using.
00:04:36.170 - 00:05:19.520, Speaker A: So I think inherently modular systems are sort of simply a decentralized matching market. I think the idea in an auction is also usually there's only one seller. One seller is selling some set of goods. In matching markets, there are many sellers, and you're trying to buy some subset from each of them. Okay, so a natural question you might ask, why are decentralized matching markets so much harder to analyze? First off, people can join and leave, so the matches are unstable. Second, without a central planner, you have to use money effectively. Like there's sort of, there's a whole world of people who study how to do matching markets with no money.
00:05:19.520 - 00:06:24.626, Speaker A: But in the decentralized world, you can basically show that you have to have some notion of money or rewards or incentives, otherwise it's unstable. And finally, you have to explicitly model your adversaries for when they're allowed to attack and which components they attack at a particular time. So I think one reason this is sort of difficult to analyze is it's oftentimes hard to quantify the exact cost of an attack in the metric market. But in restaking, that cost is actually much easier to measure because it's, hey, did my whole, in the worst case, it's like, did my entire stake get slashed? So we'll take this lens from restaking. But you should really think of this as applying generically to how you think about fees in modular systems. I think the difference is, in generic modular systems, you can use ZK and advanced cryptography to restrict some of the sets of things versus purely economic means, but you can formulate the problem in the same way. So the main model of study is something called a restaking graph.
00:06:24.626 - 00:06:54.636, Speaker A: And so I think it's nice to look at it pictorially. So the reason we talked about this matching market stuff is, in restaking, you have a set of node operators. These are the values v. They each have some stake. They each are, there's some set of services that these node operators are operating. There's a set of maximum profit that can be extracted if the node operators collude to extract from one of these services. So you could think of a double spend attack.
00:06:54.636 - 00:07:21.858, Speaker A: You could think of any attack that is a slashable offense. And then there's a corruption threshold. So this is, in BFT, you want one third of people being honest. In longest chain, maybe you need one half of people being honest. In optimistic finality, BFT, it's 20%. So there's, that threshold is how much you have to corrupt the state to take over. Okay, so now we have this sort of matching market.
00:07:21.858 - 00:07:57.400, Speaker A: These node operators, they choose services. They try to do this in some way. But what does it mean to attack one of these things? Well, there are two real things you have to consider. The first is profitability. If I attack a set of services, what is the worst case profit I could get? And so this is sort of saying the total profit from attacking a subset of services is greater than the maximum slashing penalty from any attacking cartel. The second is feasibility. This is sort of, this attacking cartel needs to have enough stake.
00:07:57.400 - 00:08:38.480, Speaker A: If they have too little stake, they can't actually attack the system. And these are sort of the kind of mathematical definitions of it, and they come from sort of these two papers. The second paper is what we'll talk a little bit about. Okay, so one important thing about these restaking graphs is very different than the security model for proof of stake is that for this graph here, each individual service. So you can think of these services as two Pos networks. Imagine one is Solana and one is Ethereum. Individually, they are secure, there's more stake, six, than the max profit, four.
00:08:38.480 - 00:09:29.316, Speaker A: But if I can attack them together, there's actually more profit than stake. So I can get a profit of eight, but there's only seven stake validating them. Now, in the case of Solana and Ethereum, because they're not sharing stake, this middle node that's validating both of them doesn't exist. But in these restaking and composable systems, you oftentimes have these overlap, and this overlap is where generally all the risk exists. Okay, so how do these attacks look so pictorially? Imagine that you have a way of taking out a node. Maybe you ddos the node, maybe they lost their keys, maybe they got slashed to zero. So that's this node that's knocked out with an x, and you can think of that as losing some fraction of the stake in the network.
00:09:29.316 - 00:10:16.366, Speaker A: So this is sort of a shock of size psi. So maybe this is, I lost 5% of the network. Now, when you lose that shock, that might create some attacks. So some things that weren't profitable prior to the shock are now profitable, and you do the attack against that particular node, and once you do the next attack, that might open up another attack. And so this cascade is sort of this idea of like, you take a little shock of stake, and then you see what's the maximum amount you can attack afterwards. You can think of this as the proof of stake version of a lending liquidation cascade, or sort of perpetuals liquidation cascade. And it's in these modular components where you have separate services that maybe are sharing validators or sharing some economic arrangement.
00:10:16.366 - 00:11:26.388, Speaker A: You always have to worry about this type of thing. So how do you quantify these? The first thing is, imagine we have a sequence of attacks, kind of like what we just saw where I took out one service and took out some operators, took out another service, took out some operators. That's what this sequence is. And we defined this quantity, RSI, as the maximum percentage of stake that can be lost due to a cascade attack, due to a initial loss of up to PSI percent of stake. This is what it looks like in symbols, but basically how much stake is lost is burnt in the attack divided by how much stake you start initially and maximum overall configurations. So in the restaking case, if you could measure this RSI quantity, it sort of tells you how much stake you need, right? Obviously, the $20 billion or whatever that's currently there is probably much larger than RSI for any existing service. But one way of thinking about this RSI is it gives you a way of parameterizing how much stake you need.
00:11:26.388 - 00:12:08.676, Speaker A: Ok, I want my service to only lose at most 10% of its stake under a shock of size, 33%. This allows you as a user to sort of a developer, to figure out how much stake you really need your service. Unfortunately, this paper, which supposedly is going to be out next week, shows that's not true. There's actually an infinite family of graphs where the amount that you lose in the cascade is the entire network. So this is like the worst case. This is like I get slashed, it causes all these other nodes get slashed, and then the network blows up. The nice thing is, this example can be looked at pictorially.
00:12:08.676 - 00:12:39.838, Speaker A: So this is another representation of bipartite graph as a hypergraph. Each black dot is a validator or a node. Each box is a service. So there's two services with six operators. So those are the two rectangular rows, and then there's four services with three operators. What we have here first is we have a shock to one node, which causes the first node to be attackable. So for each of these you need two, three.
00:12:39.838 - 00:13:39.680, Speaker A: If you have two or four, you can attack them. And as you can see, you go down the sequence, you get this thing and you can attack everyone. So the slightly less bad news is they show this over collateralization condition. You can think of this as the proof of stake version of your decentralized stablecoin needs to be sufficiently over collateralized to avoid a cascading DPEG. But the condition is so strong that every service has to have as much stake as the sum of the max profit over all services. In the worst case, concretely, if you have two services, one in which you can extract one ETH of profit, one in which you can extract a million ETH of profit, the one ETH service has to attract a million and one ETH to avoid cascading attacks, which is bad, obviously, right? Like if you're the one ETH service, like, there's no way you're paying enough to attract that much stake. Okay, it's a dead end, I know, I got a minute, so I'm gonna rush.
00:13:39.680 - 00:14:49.802, Speaker A: Well, we. Okay, the thing that's missing here is the incentives, right? These node operators, in everything I said so far, they're just, I gave you this graph, they just chose nature, somehow chose them in that configuration. In reality, that's not true, right? They need to get paid somehow, either by inflation, like in a proof of stake network, or by fees. So now consider an incentivized re staking graph. So one where you add rewards that you pay at each service, and in response to rewards you allow reallocation. So look, if you look here, this initial graph only has both services operated by the middle one. But this other graph in response to rewards has all the services operated by all the node operators in that attack I showed you before, this rebalancing means that as nodes are getting attacked and services are getting attacked, actually the rebalance allows some of the services to attract a new stake post getting slashed, to avoid themselves getting slashed.
00:14:49.802 - 00:15:41.182, Speaker A: And the reason they're able to attract that stake is they gave enough rewards, someone got slashed who was validating that. Now everyone else's yield went up, which means that someone you can join and still do it profitably. So the idea of this rebalancing is like it allows people to, in response to slashes, and you stake to come in and avoid these cascading failures. So the good news, and this is researchable paper, will be out kind of hopefully a couple weeks, is that given the incentivized rest taking graph, you can actually bound these cascade attack sizes. And there's sort of a parameter for how much you pay in rewards. That court controls how much cascade you have. So the simplest interpretation of this is, and so this kind of skips a lot of exactly how this works.
00:15:41.182 - 00:16:34.310, Speaker A: But if adversaries who are attacking face some cost of attacking, like it costs them something to accrue stake in multiple networks, node operators are smart, they rebalance as slashes happen. And if the services pay enough rewards, only a small amount of stake can be lost. In the modular world, you actually have a very similar thing where if I have a service, say a roll up that's utilizing a bunch of other services, and they have some economic arrangement with each other, if one of those services loses security in order to continue operating, we may actually have to have stake come into another service. I think again, the restaking world at least makes you can quantify this. I think when you add improving, it gets a little bit harder. But this is kind of the TLJR, thanks to.
