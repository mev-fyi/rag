00:00:30.380 - 00:00:55.922, Speaker A: Sadeena.
00:00:55.976 - 00:01:11.970, Speaker B: Hello, everybody. Good morning. Happy to have you. I'm happy to introduce to you. Oh, the clicker's over there. Mats Matthiesen running away. We picked him up in China.
00:01:22.030 - 00:01:47.710, Speaker C: I'm very happy to be opening this here at Modeler summit. Day three, last day of the summit. I am Mas known as rain and coffee on Twitter. I do research at mail eleven. And the goal of this talk, essentially is to tell developers why they should build modular and why some are doing that already. And the goal essentially is to prove the memes wrong. And there is a lot of memes about modularity being completely pointless.
00:01:47.710 - 00:02:13.520, Speaker C: I love to say why it's not. And that's essentially what we're going to do today. So the methodology behind this is essentially the model of solid stock we do have. So usually we know about the roll ups, optimistic ck. We have based roll ups that are sequenced on the l one. We have sovereign roll ups that settle to themselves, and we have what we call old da roll ups. So a roll up using Celestia may be settling to a separate settlement layer like in Ethereum.
00:02:13.520 - 00:02:42.074, Speaker C: And there's some nuances here that we maybe don't care much as much about. But milladiums, app specific, generalizable and so on and so forth. And monolithic setups are great for some things and terrible for others. So some of the shortcomings are specifically fee markets. You generally share fee markets with all the applications on the blockchain that you're on. There's some nuances here, such as Solana, which has local fee markets, which helps with the noisy neighbor problems. There's also state bloat.
00:02:42.074 - 00:02:58.880, Speaker C: So you have the state of every single smart contract. That could be hundreds of thousands of applications. And this all bloats the chain as well. And there's a humongous lack of control. This is probably the biggest issue. So you cannot do any upgrades for your specific application that you might need to make on a chain. There's no customization.
00:02:58.880 - 00:03:22.978, Speaker C: You don't have any ordering opcodes, gas limits and so on and so forth. But you have some pretty powerful powers that you don't even have in sort of traditional web two. So synchronicity, you can call any application and make calls to it, swaps whatever you need. This is super, super powerful. And you do lose that in a model that set up to some extent. And generally you have a pretty decentralized validation setup. So Ethereum has a ton of validators.
00:03:22.978 - 00:03:50.848, Speaker C: The same goes for a lot of other larger monolithic setups as well. And you have users generally, which some modular setups are still missing at this point, modeler setups and the properties are of sort of the opposite. So you have some shortcomings. You generally have to derive some security, and there's some new ones here we'll get into later as well. You also lose generally interoperability. So most monolithic setup, as I said, have synchronized composability. They can call smart contracts and so on and so forth.
00:03:50.848 - 00:04:20.666, Speaker C: You don't really have that as much with modeler setups unless you have a very homogeneous setup with IPC, for example, and you have the synchronous calls that you also lose. And this is where we have synchronized on the monolithic setups. The powers you get, though, are pretty cool, so you get sovereignty. I think Nick White will speak about this later today as well. And you get upgradeability. So if I need to make any upgrades about the things we talked about earlier, you can do that. And then I generally also believe that apps have to and are opinionated.
00:04:20.666 - 00:04:57.850, Speaker C: So generally you have some opinion about what kind of things your app should have, what they should be able to say, and so on and so forth. And you also gain ordering and customization, and we'll get into why this is powerful, especially for Mev. And you're also elastically scalable. So an ethereum is generally only the same amount of power throughout. Even a model is set up, you can change things out as you need, which is super, super powerful. Now, one large issue that Solana solves with the local theme markets is this noisy neighbor problem. So this doesn't just extend to gas fees, but also to things like state boat and doing inventory.
00:04:57.850 - 00:05:31.630, Speaker C: Risk management becomes extremely difficult because you're essentially sharing a warehouse with a ton of different applications instead of having your own specific warehouse where you set the pricing. And this goes for things like a swap, a transfer, and many other things as well, where you essentially are dependent of what other applications are using at the same time to how much you have to pay in gas. Now rollups are growing. I think that is extremely clear. We have a ton of generalizing rollups coming out. Currently we have 58 that are live. We have layer threes, layer fours, layer five, layer six, et cetera.
00:05:31.630 - 00:06:09.900, Speaker C: And we have a ton of upcoming products, I think, which only is somewhere around 200 that are coming out. Many of these are generalizable, but application specific blobs are also coming out, which is quite exciting. And there's a variety of methods that are using to divide security, some of these are more scalable than others. We'll get into why specific shared consensus is not quite ideal. And I think what we've seen is that this move from generalizable to app specific roll ups is happening. And this is sort of a result of this stack and communication of this maturing, which makes it a lot easier to launch a roll up. You can do that in a few minutes on things like gelato, conduit, caldera and so on and so forth.
00:06:09.900 - 00:07:04.514, Speaker C: And generally, if you look here on how much people are posting to things like Celeste J theorem in terms of call data or blobs, we generally see the biggest ones being both lightsaber. But we have some interesting ones here that are actually app specific things like proof of play and psy as well, and also orderly, which is on Celestia. Now, what has been very clear over the last year is that DeFi is going multi chain, so developers are more often than not actually launching their applications on multiple roll ups rather than a singular one. Now there are still issues with this. We need things like chain abstraction, but there's a ton of different applications working on this. Specifically, we also come into an issue where specifically in model setups we might need things like suite builders, and obviously we lose the synchronisticity that is super powerful. We also have a ton of inventory risks that are specifically caused by intent based bridges.
00:07:04.514 - 00:07:47.274, Speaker C: So we need solvers to take the risk because of challenge periods, which causes an optimistic setup seven days before you can get your funds out. As such, we have people taking inventory and they'll take a fee because of that. We also have pretty crazy state fragmentation, but things like storage proofs, VM extensions, so things like res zeros, Bonsai. But also plenty of these storage providers are doing a good job here as well. But one issue is that these rules for state are still different from rollups of rollup. But I think there's some pretty cool things coming here in the future as well. We'll skip over these slides, but what we're starting to see is that fast monolithic blockchains are starting to realize that yo, we actually need modularity.
00:07:47.274 - 00:08:30.600, Speaker C: We can't just stay monolithic. A recent example of this is Isa on Solana. They have specific needs that can only be serviced in a setup where they're modeler because they need some sort of customization. This is experiencially important for Dexs and Amms, but what we also saw recently was the announcement of CK compression on Solana, which essentially is this based validium setup where because of the incredible amount of state that Solana is producing, we need ways to put some of this state off of the main chain, but we still won't be able to update this state. What is very clear is that Solana, Monad and many others are probably going to come down to a bombard sie. We actually need setups. We need setups that can provide us these powers.
00:08:30.600 - 00:09:03.480, Speaker C: And I think we're going to see in the next year or so a ton of roll ups actually coming to Solana, which is sort of breaking the idea that monolithic setups are going to be a constant thing. They will obviously be powerful for some applications, and it's more of like a funnel. You probably start as a smart contract there. Now, the real powers that you get from building a modular setup, as we talked about earlier, was the customization. So here are things like precompiles, block times, gas limits, also the ability to change vms. We're seeing SVM rollups, move roll ups, wasm roll ups. We're seeing blended roll ups using all the above.
00:09:03.480 - 00:09:35.500, Speaker C: And if you need specific things like CK, you can also do this. So an Ethereum only has a BNS 128, which is not the most secure sort of way to verify CK. You might want to change these things. You're also able to specialize specifically for your purpose. So this could be, you want to be able to scale elastically with the amount of users that you get without needing to sort of make crazy upgrades or cause problems for other people on the chain as well. You also be able to do things like in protocol data sources. This could be things like slinky from SCIP, which is super powerful.
00:09:35.500 - 00:09:59.414, Speaker C: Oracle. This can cause things like oracle extractable value. You might also want to do things on a database level. So a lot of people think of execution, consensus, and those things as the bottleneck. But things like reads and writes to the database is also super important to optimize. People like sovereign labs are working on this, obviously monad, but also mega eth. And maybe you want to do things like monitoring and response.
00:09:59.414 - 00:10:28.272, Speaker C: Maybe you are real world assets roll up, and you want to be able to choose who can actually access your roll up. If there's an exploit happening, you might want to censor this. We can call this good censorship. Now, one of the most powerful reasons for people wanting to build modular because we want to internalize our MeV revenue. So a uniswap, for example, creates a son of MeV. We might want to actually be able to control this or maybe provide fair ordering. So generally MV, for example, is extracted by a leader.
00:10:28.272 - 00:11:09.366, Speaker C: And where the leader proposes a block, you can extract value because you decide what get put into the block or not. And this makes monetization extremely easy. As an application, you can also do things like set ordering rules, so you could do verifiable sequencing rules, frequent batch auctions, intense censor applications. And I said earlier, you can do things like good censorship if you believe that's a thing. Now, as mentioned, MeV is extremely powerful. So as a model application, you tend to get to the point where the monetization you're having here is priority fees that we generally call MeV. You might also have some base fee that you have to collect as well.
00:11:09.366 - 00:11:49.058, Speaker C: That's probably higher than the amount of cost you're paying in coredata. And to make state updates. The cost of a modeler setup is generally just DA, maybe storage and maybe compute. And there's some nuances here if you're like a shared security setup. Now one of the most powerful things I think is that as Ken alluded to yesterday in some of the panels that he had, is that Uniswap has quite a few problems with creating value for the LP's that are things like LVR. And there's a ton of meV that is created on Ethereum, but it's all going to Ethereum validators rather than Uniswap token holders or Uniswap LP's. So they create a lot of large amount of inefficiencies.
00:11:49.058 - 00:12:30.420, Speaker C: Searches are paying a lot of amount of money to extract these profits, and these are being paid to the proposer rather than actually to Uniswap itself. So if they can control inclusion, they can extract priority fees. And this is essentially something I think especially things like Uniswap maker Aave would benefit from extremely. Now there are some issues here. They probably want synchronous composability, especially in a base roll up type setup where they can get this and keep this while still having auctions to extract meV. We'll get into this a little bit later as well. But I think Uniswap is a perfect example of somebody who would take, have an incredible advantage of being actually in a modeler setup.
00:12:30.420 - 00:13:08.446, Speaker C: Now, as we talked about earlier, one of the things that you do need to do when you're a model HF needs to derive some degree of security. Generally there's three ways to do this. There is data availability. So things like Celestia, avail, Eigen DA, and this is generally the last passion of truth, and then you have settlement, which is generally censorship, resistance of discrete resolution. So think things like challenges for optimistic roll ups, CK verification, and what have you, and then you have consensus, which is sort of this shared security model. You have an interchange security, but you also get this with things like Eigen layer. Generally the cost of consensus sharing is extremely high.
00:13:08.446 - 00:13:43.124, Speaker C: So generally if you have other validators, they're going to be opinionated. And if you're opinionated, you're going to want to be paid a specific amount of money because you're taking on some risk. So you have a cost of flushing. And generally opinionated security is really not the way to go. The costs are high, you have to incentivize and maybe give away fees. But if you're big enough to create fees, why are you giving away the fees? That's generally the way I look at it and all the way down. I think DA is the only thing that is scalable in terms of derivable because of the fact that with DA, the DA validators are not opinionated.
00:13:43.124 - 00:14:30.040, Speaker C: They'll take your data, they'll order it, they'll put it in a block, they'll sample it, but they do not care about what kind of data they actually have. It's an extremely powerful way to actually derive security. Now, one thing that we have also been seeing with this commodification of the modeler stack is the fact that we can see this in chatfire and web two as well, is that when the demand for a product increases, it's generally because the prices of it decrease as well are the complements that they're reliant on. And when that happens, we see a great amount of innovation. And we're starting to see this specifically on these app specific roll ups, which is super, super powerful. And generally we hope to get to a point where we have this commodity price where you have indistinguishable goods, and generally this is probably going to be way further out. Crypto is generally more bd attention driven at this point.
00:14:30.040 - 00:15:04.460, Speaker C: But I do hope, and I think other people hope as well, is that as the industry matures, this becomes more of actually the thing that's going to happen. But what we are seeing is this API economy that we know from web two coming into web3 as well. So you can plug each link to data availability layers. You can use roll up SDKs if you want shared sequencing for some implementability, or easier ways to launch your roll up, you can do that as well. Maybe you want some MAV alignment, you can do auctions. Maybe you want some intents, whatever have you, or maybe you want this economic security, although just covered. Why? What is might not be the best idea.
00:15:04.460 - 00:15:43.732, Speaker C: And in general, you can have a ton of different types of ckvms that are generally open source that you can use as well. Now, as mentioned, the apps are not quite here yet, but it does seem to be that they are actually on their way. We're having this masker modification. We're seeing things like light nodes and wallets, which means we can use them on undiagnosed sampling blocks, and as such we can increase the size of them. We're getting things like CK accounts on Celestia, which enables some really, really cool use cases as well. Chain abstraction is coming to the Model S setup as well, which will make utilizing different types of setups without these model routes a lot easier too. And we're seeing an incredible amount of outsourcing.
00:15:43.732 - 00:16:37.890, Speaker C: So no longer do you need an application if you want a roll up to do all this work yourself, you can still be outsourcing to other people as well. And what we're seeing, this rise of these global state layers and things like storage providers that are creating this state, and liquidity uniformity, also driven by intents as well. And if we look at selenium, which is a great work, explore where you can see data posted Celestia, you can see that the amount of apps here are actually growing. So you have things like orderly Evo and so on and so forth. And I expect this to grow a hell of a lot more over the next couple of months as well. Now, as mentioned earlier, we probably need some kind of base setup specifically for applications like a uniswap. And the reason for this is that specifically uniswap needs to be able to make synchronous calls to l one s and other applications calls to them as well.
00:16:37.890 - 00:17:03.524, Speaker C: And this is because a ton of applications depend specifically on uniswap. For the application, this could be intent sending ones. There's also a lot of people just calling uniswap smart contracts. The same goes for a maker or an aave as well. And there's generally a spectrum with these page roll ups. So generally either we need based execution. This is a lot more difficult because it's very hard to scale this up on a decentralized blockchain like ethereum for example.
00:17:03.524 - 00:17:59.860, Speaker C: So generally the way this is going to happen is probably going to be some sort of based inclusion. We have inclusion guarantees from the developer data set of Ethereum, and you might get these super builders that are building or buying flow for these roll ups, and this would be extremely, extremely powerful. And what happens when you are included in the same block as all the other transactions that are happening on Ethereum is that you can start to have these synchronous calls, you can actually start to have these auctions to extract mev. And this means that these super powerful, super cool applications can now start to internalize this mev revenue that they're creating, instead of giving this away. But it also does mean that we're going to have these super pillars, and these builders are already extremely powerful. We have three major ones on Ethereum that are generally building most of the blocks that we're getting. This could probably get even worse in a base roll up world where we might have maybe a Beauvolt building for 15 roll ups, maybe an async building for 14.
00:17:59.860 - 00:18:35.972, Speaker C: But because these 15 roll ups are creating more mev, they'll not be able to win every single Ethereum block building bit, which is pretty problematic. And generally also now the Ethereum block times are quite slow. So 12 seconds, this is pretty bad ux if you're depending on this. So we might need things like pre confirmations as well. So you won't have to wait for 12 seconds before your transactions get put through, which makes it pretty unusable for most applications. Now, as many have been saying over the last couple of months, is that it seems like most people are essentially building the same thing. We're seeing these auctions for flow and write to sequencing.
00:18:35.972 - 00:19:27.222, Speaker C: We're seeing base roll ups come out, and we're seeing this hyper specification, specifically on these modeler setups, specifically on our application specific ones. And what this is causing is that we're seeing also this on shared sequencing. We're seeing this on things like suave. And the cause of this is that many of the things that we realized we have to build, everybody else is realizing the same thing. So it seems like we are, well, in a world where the things that we are calling different things are actually the same thing after all. But it's probably going to be extremely exciting where we get these base roll ups, and it's usually going to be happening out of protocol first, especially in these extremely large, decentralized setups where we talk earlier about the fact that it's very difficult to make upgrades, and you need a lot of people to agree on these things. So generally, things like base roll ups are probably going to be happening together with pre conformations out of protocol.
00:19:27.222 - 00:20:02.874, Speaker C: We might get this coming to in protocol, but it might take a couple of years for this to actually happen. But it's probably a world that's going to be quite cool for you. Like uniswap. We heard Ken yesterday. One thing I do want to touch on before we end here is the fact that it seems that we need to take this idea of global state further. If you want to keep the synchronicity and sort of go for this idea of a protocol to a state because of these global asset laws are completely different from roll up to roll up. We might want to set up where we have state that is sort of uniform in the ideals that they have.
00:20:02.874 - 00:20:20.610, Speaker C: So think like a Solana account model and having these state laws being the same from bullets of roll up, maybe on a uniform layer, maybe with super bullets in this case. And this would make interoperability extremely, extremely easy. And that's all for me today. Thank you so much for having me.
