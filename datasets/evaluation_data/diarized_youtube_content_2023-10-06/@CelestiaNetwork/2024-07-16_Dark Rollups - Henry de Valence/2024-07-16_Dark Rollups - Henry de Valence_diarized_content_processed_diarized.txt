00:00:01.840 - 00:00:31.496, Speaker A: Hello. Great. Well, my name is Henry. I'm the founder of Penumbra. So, yeah, today I'm going to be talking to you about dark roll ups, and maybe we will figure out what those are together. So this is a fun word that's meant to kind of draw attention to what I think is an interesting new design space for, for roll ups. So my talk today is actually not going to be primarily about penumbra.
00:00:31.496 - 00:01:21.710, Speaker A: If you already know about penumbra, then I'm sure you're excited. If you don't, you should find out. But for this talk, what I want to do is try to broaden overall design horizons. So my thesis is that right now there's sort of two concepts that are mashed together on top of each other, just kind of by the accident of path dependence, and that we can do some interesting design thinking if we take those two concepts and we pull them apart. And the two concepts are data availability and data visibility. So data availability by this point in the conference is probably a term that you've heard. The idea is that you want to build a system where people can get a guarantee that some data was made available to all of the other participants of the system.
00:01:21.710 - 00:02:54.640, Speaker A: Data visibility is about, okay, who actually gets to have insight into what that data means. And the reason that I want to pull these things apart is because when you build a public blockchain, these things are necessarily the same. There's no notion of control over information. But once you have a notion of control over information, you can ask, should these really be the same groups differentiate between these two sets of users? So looking at this kind of very conceptual, modular picture, the basic idea that we're working towards is first we have a bunch of individual roll ups and they can post data to some common scalable data availability layer. And that layer here at Celestia, there could be others, is going to be optimized for just doing that one thing and scaling at it very, very well. So we want to build one system that can give these global trust guarantees and scale to massive size by having a very specialized sort of limit of functionality. Then each of those roll ups gets to form their own interpretation of that data, and they don't have to worry about, they don't have to worry about all of the consensus properties because they can know that they all are operating on the same view of what information is out there.
00:02:54.640 - 00:04:27.660, Speaker A: So this is a cool idea, but one thing that is actually not required is that the data that is posted to this underlying base layer should actually be visible to anyone beyond the roll up participants. And again, this is kind of this path dependence for public blockchains, where generally it's assumed that, oh, if someone is building a roll up, that means that the set of participants should be the entire world. But this doesn't necessarily have to be the case. And if the data that is published to this underlying DA layer is encrypted, then you can have some really interesting designs where you're separating between who those participants in this specific roll up are, but still allowing them to take advantage of this global security layer, the security guarantees of this global common data availability layer. So what I would suggest that people do is actually look to shielded chains for design examples of how to do this. And here's a little bit of a side point that I want to make is in the blockchain industry, a lot of the time people get kind of like pigeonholed into narratives, right? People have these sort of narrative sound bites that let them structure like, oh, this thing is like this, this is like that. And that's kind of a convenient shortcut, but it can actually kind of give people a bit of a tunnel vision.
00:04:27.660 - 00:05:32.042, Speaker A: And sometimes if you defocus your eyes just a little bit and you look out at the structure of things that appear to be very different, you might notice that there's actually a lot of commonality. And so if you look at a shielded chain like penumbra or Zcash or Nomada or Alio, these are not roll up centric or they're not branded as such, and they're not modular. They're usually monolithic systems because they're built to try to achieve one thing. But if you take a closer look, you can actually see a lot of interesting commonality with this sort of roll up centric design vision. So in a shielded chain, you have some kind of private base layer, and you have shielded transactions that are posting encrypted blobs and proofs about the validity of that data. And each of these clients is going to sync its own view of the data that it is able to see. So if I have my wallet, I get to view my transactions, but I don't get to view yours.
00:05:32.042 - 00:06:42.766, Speaker A: And there's not going to be some server that is just going to be compiling all of my data. I have to do that on my own on my client. And in this case, not only is it not required that there's visibility between these different clients, but actually the whole point of why you would do this is to try to not have that, but when you look at it this way, you can kind of think of each individual user as having their own little personal roll up. And that specific example is something to kind of dig through and look at in detail. So we're going to look at how shielded transactions work from this sort of roll up centric view. The first kind of conceptual idea there is that on a shielded chain you want to have composable state. So rather than having one big global tree of state where each transaction can basically modify anything, you need to have a system where the state is split up into many different fragments, and each transaction declares certain input fragments that it consumes and produces some new output fragments.
00:06:42.766 - 00:07:57.536, Speaker A: And again with this sort of defocusing our eyes, looking at similarities, you can see also that there's kind of a convergence here between kind of a Utxo model, or if you have a global state model with access lists, we'll kind of end up converging to the same place, but composable state. Why do we need that for shielding? We need it because what we're going to do is make all of the state transitions private by moving all the actual data off the chain and onto an end user device. So instead of actually having this big tree on chain of all the raw state, we'll just have state commitments. And instead of each transaction having an explicit description of the state change that it makes, we're going to wrap that all up in a ZK proof that lets each participant certify to everybody else that they did their state transition correctly. And what this means is that the execution is actually moving off chain onto the end user device. And each user has their own little personal roll up of their own account data, their own utxos, their own notes, etcetera. And that has.
00:07:57.536 - 00:08:46.969, Speaker A: So let's look at this slightly in more detail. Here's a shielded transaction as its own little micro rollup. We have a ZK proof that provides trust. We have some commitments that are going to bind the output states, and we have a way to mark the input states that have been consumed as being spent and no longer being able to be used. This is done with a technique called nullifiers. And the only important thing there is that there is a way to do this that you are not revealing precisely which state you are consuming. The interesting thing though is each of these shielded transactions is going to have its own encrypted payload blob to try to make the resulting state data visible only to the recipient.
00:08:46.969 - 00:10:43.630, Speaker A: So this transaction that is being submitted is, it's almost like a sort of monolithic bundle of a little micro roll up where it has both the updated state route and also the opening of the data that was rolled up that's encrypted so that only the recipient can see it. And you could ask, even though this shielded transaction system is not conceptualized in this sort of roll up language, what's the meaning and importance of data availability here? Why is it important to know that data was definitely published, even if it's just me making my own internal transaction? And the reason is that these commitments are opaque. So if I ever lose this plaintext opening of like what was my state update, then I'll never be able to spend those funds ever again. And so even in this single player context where like I'm making my own transactions, it's actually quite important for me to get some kind of ironclad guarantee that the plaintext data that I'm not revealing to anybody else was actually securely stored somewhere. What happens if my laptop crashes right after I make the transaction and submit it? But before I save that locally, what happens if I need to restore on a new device? All of these problems that show up in this big open world byzantine fault way, if you can solve them there, you can actually solve them much more usefully in the single player context. So that's kind of this like classical shielded transaction picture. The connection with okay, what does this mean for roll up design? Probably is still a little bit unclear.
00:10:43.630 - 00:12:01.910, Speaker A: So the next example that I want to show that I think points in a more interesting direction for what are some first use cases for building roll ups that use global da layers for private participation is actually the idea of trying to build shielded multisix. So if we go back to this diagram, what happens if we want to have joint control? This is pretty common. Like Nosis safe is is probably one of the biggest products that people use, but that requires that the participants in that joint custody are all public. And when they want to sign things, they're going to do that by just posting signatures. And so you're revealing to the world a lot of information about who has custody over those funds, and that probably isn't actually wise, right? Like if you have a joint custody of some kind of treasury, you probably don't want to be declaring to the world like here's the ETH address of the person whose house you can show up at. But once you say, we're going to do this privately, we're going to use threshold signing, where we're going to produce a signature that's indistinguishable from any other signing method. We have this problem that all of these signers need to coordinate with each other.
00:12:01.910 - 00:12:56.778, Speaker A: And for penumbra, we actually built a threshold signing tool. It's kind of our minimal proof of concept, but it's intentionally scoped to kind of point or punt all of that, the complexity of that problem out. So it just works on the command line. You copy paste messages or whatever. And we've been thinking about what does it look like to try to turn that into a coherent product that people could actually use without giving up any of the decentralization aspects or the security aspects. So our thinking here is like, okay, how can you have threshold signers who are coordinating off chain amongst only their own little committee? But we want to have certain properties. We want to not require that they're all online, right? So we need to have some place where they can post messages and then download them.
00:12:56.778 - 00:13:43.180, Speaker A: If we all, if we required that they were all online, then this whole problem would go away because you could just do a direct peer to peer messaging. But the assumption of everyone is always online all the time is just not realistic. So if you build a product like that, you're not going to have a good time. The other requirement is we want to have all of the signers having a consistent view of what messages other signers have sent. If you think about the experience of using a safe, for instance, you log into the front end and you can see here are all the new signing requests. And there's not a possibility for people who are part of that group to be confused about what the set of active proposals is. Everybody gets to see that.
00:13:43.180 - 00:14:33.072, Speaker A: And if you're coordinating off chain now, you need a way to coordinate all that. So that state that you have to synchronize between all these signers. And the last and kind of subtle thing is we want to have signers be able to recover their shares of the key from their own seed phrases. Right. If you have a. People have talked a lot about the ux of seed phrases or whatever, but one thing that's genuinely very good about that design is as long as you remember that one secret, you can determine, deterministically recover all of your data. But in a threshold signing setup, the participants have control over a joint key, and so their individual shards aren't necessarily going to be derivable.
00:14:33.072 - 00:15:24.594, Speaker A: So we need some way for people to basically back up a list of. Here are all the committees that I've ever been part of, and I'll encrypt my key for that committee to myself so I can recover it later if I lose my computer. And that way you can recover. This kind of the seed phrase is enough to get everything. You're kind of aligning this system with people's existing expectations. And part of the thinking of how do we solve all these problems is that we don't want to have any kind of central service, right? So we don't want one of these individual signers to be dependent on a specific service run by a specific company. One of the things that we've done that I'm really proud of for penumbra is we made the wallet just be entirely end user software.
00:15:24.594 - 00:16:24.620, Speaker A: There's no backend. But if you want to provide this functionality, how could you do that in a decentralized way? And the thought process is maybe actually this is an opportunity to build some kind of system using rollup, where all of the participants in this committee can be posting encrypted messages to each other, to this big global da layer like celestia. But they're restricting the visibility, they're restricting the interpretation of what those messages mean to only be the members of their own little committee. So I think this is a really interesting thing to think about. Looks a lot like a dark roll up, right? So this is kind of a fun word. We can invent our own meaning for it and design new kinds of roll ups, but that's the contents of the talk. So if you are interested in discussing, you can show up on the penumbra form.
