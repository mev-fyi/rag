00:00:02.090 - 00:00:06.746, Speaker A: We also have a special guest here today. Dangle from scroll. Yeah, a little cameo appeared.
00:00:06.778 - 00:00:10.574, Speaker B: I was going to just try to act like I was Tina, but whatever works.
00:00:10.772 - 00:00:48.620, Speaker A: Yeah, I think you do a fair impression. Hi, everyone. I'm David Phelps. I am not a Deverel. I am a founder of a project called Jokerace, where we build on chain contests that are really used for customer acquisition and retention, which means my job is talking to devrels all day, because they're really, I think, the people in the ecosystem who do the acquiring and retention of our users who are devs. So I'd love to talk about that a bit. And I think to start, I guess, an open kind of question I have is what is the responsibility of getting people into this space versus what is the responsibility of getting people who are already in the space into your specific project? And how do you think about that?
00:00:52.270 - 00:01:31.818, Speaker C: I can start. So when it comes to getting people into the space, you have to think about it from their developer Persona. Like, are they coming from the gaming sector? Are they coming from the web two sector? And then for each one of them, you have a different strategy for onboarding them into your specific platform. But for people already in the space who understand those technical complexities that come with web3, you definitely have a different strategy for the developer journey for web3 people. So it actually depends on the developer Persona that you're targeting. So for celestial, I mean, we're modular. We go for everyone.
00:01:31.904 - 00:01:32.202, Speaker D: Right.
00:01:32.256 - 00:02:09.560, Speaker C: But there are priorities, obviously. Yeah, it depends on what is the priorities. So right now, we really like EVM developers because EVM is the biggest developer market for web3. And we're also looking at Cosmos. Like we focus on Cosmos. And within that, people who want to build in DFI or gaming or NFDs, each one of them would have a specific kind of developer journey so that we onboard them with their favorite smart contract language to whatever demo application they want to build, so that they know how to add complexity over time and build their dream products.
00:02:10.730 - 00:02:38.526, Speaker E: I think generally all the Devrels here and all the devrels in general see themselves as educators. So I think all of us see our roles as bigger than our companies because people appear. I don't really know exactly, but we've all worked at different protocols. No one works for one project for like 20 years. And that's the only thing you care about onboarding to. I think, at least for me speaking, I like meeting people where they are. And for me, getting them onboarded into my specific project matters less just because first and foremost, I believe in education.
00:02:38.526 - 00:02:51.780, Speaker E: I have certain principles that I stand by. So for me it's more important to get people thinking about blockchain and meeting people where they are. If it's like they know nothing about it, then we go there. If they're like, I really want to spin up my own roll up, then we go there.
00:02:52.310 - 00:03:14.198, Speaker D: Yeah. As for me, I don't do what you describe. I don't have an overarching goal. I like educating people, but it's a mean to an end and my objective is to get as many people building in my ecosystem. Right. So I guess one of the challenges where do you draw the line as to what people need to know? And that's what you were describing, right. You have to define your user Persona.
00:03:14.198 - 00:03:40.126, Speaker D: My perception is that especially when you're a small company and we're in a small ecosystem, you got to focus. So there are some people I just don't talk to. I have a bunch of resources to point them and if they want to pick these up, I'm happy to help them. But the people I go after and I make sure they follow up, I tend to draw the line to a pretty small number of people. So I tend to focus on specific developer and a specific developer category.
00:03:40.238 - 00:03:42.114, Speaker A: How do you find them and target them?
00:03:42.312 - 00:03:51.640, Speaker D: Usually they find us. Usually we don't do a lot of outreach. We spot people on social media who ask questions and then we follow up with them.
00:03:52.090 - 00:03:54.402, Speaker A: It's really targeted towards certain individuals.
00:03:54.466 - 00:03:55.318, Speaker D: Yeah, exactly.
00:03:55.484 - 00:03:56.200, Speaker A: Interesting.
00:03:59.290 - 00:04:09.740, Speaker E: Yeah. But I think like you said, maybe we just have different kind of profiles. Because before I was in crypto, I was an educator. I taught k to twelve computer science. So I just have a different view of what Devrel looks like, I think.
00:04:10.110 - 00:04:44.680, Speaker B: Yeah, and I think for any of these. Right. Oftentimes Devrels are a developer's first contact in the space with any project, whether that's through YouTube videos or being at a conference, we're the accessible piece of our projects. And so I'm happy to have lots of conversations with people that want to build on Starknet or want to build anywhere else. Right. I think we have kind of a responsibility to give developers the best experience in the space, to keep them around in the space. That is the thing we're still trying to do.
00:04:44.680 - 00:04:57.900, Speaker B: And if that doesn't mean they land on scroll, no real skin off my back, honestly. Right. I want them to build the best products they can. And so if that means I can make connections to other folks, that's great too.
00:04:58.990 - 00:05:08.750, Speaker A: All right. So let's make this a little bit spicier. I think everyone's given the nice answer here, which is we all want to grow the pie for the ecosystem and get more people here, but there are some l two wars going on right now.
00:05:08.900 - 00:05:09.600, Speaker B: Really.
00:05:10.050 - 00:05:54.222, Speaker A: And so I'm especially curious. We have two great l two, if we can call it, if we even use that term anymore. Devrel is here, and there's been certain battles between, let's say, scroll versus Polygon, I think has been like the wwe for modular people to follow on Twitter. So I am also curious, how do you think about differentiation with competitors? You probably have an easy answer for this one with Cairo, which we'll come back to. But to what degree are you really competing with others who have very similar tech, but maybe different ideologies or different communities and different values? And to what degree does that play a role in your work? And Daniel, I would love to start with you on this one.
00:05:54.356 - 00:06:45.446, Speaker B: Yeah, I mean, I think you named out a lot of the things that are differentiators, right? Like maybe at the tech level, if I'm not talking to someone that's interested in protocol level research stuff, they might not be too interested in the difference between Zkevm backends and zero knowledge proofs. Right. There's no reason to really get into some of those details if we think that. Again, I view Devrel as a social practice, not just a technological education thing, which education is social, too. But at that level, I think you can let how you interact with devs, how you engage them, how you see and try to meet their needs, be a differentiator. Right. And other teams do great Devrel.
00:06:45.446 - 00:06:58.482, Speaker B: And it's great to look at them and be like they're supporting their developers better than we are. What are we doing wrong here? What can we steal from them to better support devs? But I don't know, maybe that's the too nice of an answer.
00:06:58.536 - 00:07:04.530, Speaker A: But yeah, it's a differentiator for you. I mean, those are the categories of differentiation. But what's the specific differentiator?
00:07:05.530 - 00:08:11.866, Speaker B: Yeah, I guess it is. But there's another aspect too, where it's know the background context being like, obviously the polygon folks are brilliant, right? And the worst engineer at ZkevM is like a far better dev than am, right? So I think I can talk about what drew me to scroll, which is this kind of really true intention of being community first and trying to engage with individuals and less of a transactional relationship with the people that are maybe building on us. Right. And maybe that just kind of comes back to my interests personally. But I think we're all trying to solve a really hard question, which is, if we're sticking to certain crypto ethos, at least that I believe in, is that we're trying to solve multimillion dollar engineering, things like, that's the human capital that it takes to have this happen, which brings in vcs in the world. If there's vcs in the audience, I love you, but we also don't want corporate capture of these protocols and the technology that we're building. Right.
00:08:11.866 - 00:08:33.540, Speaker B: And so doing our best to make it clear and to make sure that there's pathways that say, as we're building scaling solutions for Ethereum, we have to scale the technology, but we also have to scale the community and the ethos and the things that actually make it special, or else we'll lose Ethereum before we end up getting these billion users right.
00:08:38.470 - 00:09:48.140, Speaker C: The way I approach differentiation, when people be like, okay, so why should I build on Celestia over ethereum? Because of 48, 44, or polygon avail or eigen layer? And one of the biggest differentiators that actually drew me in was that we don't have an execution environment, and that's so liberating. We don't really care where people's execution environments are. So if you're coming from the EVM world, you can build a roll up on top of Celestia. If you're coming from the Solana world, you can also build a roll up on top of Celestia. Compared to any, what you would call competitors, which I don't really call competitors, but they're all attached to one execution environment, which is the EVM, and they're very limited in the kind of market share they can capture in developer space, whereas because we're actually more like, we don't have an execution environment, that, for me, was the biggest differentiator, any kind of l one that comes out right now with a unique execution environment, the way I see them is, oh, that's a cool new roll up on top of Celestia. So that's how I approach it.
00:09:49.230 - 00:10:35.990, Speaker B: Can I ask you a question about that? I feel like there's something interesting there where, as a product, your developer audience would seem to stray a lot from. I think these people just building smart contracts. Right, like, doing protocol design that needs your product is like a much deeper tier of knowledge and experience and other things. And so do you feel like you're put in a position to suggest a DA layer as a solution to things that it's not a solution for, or do you just try to mostly hone in on these? I guess maybe the underlying question is, how many roll ups do there need to be, and how do you see that for talking to devs about what they're trying to build?
00:10:36.140 - 00:10:36.502, Speaker D: Yeah.
00:10:36.556 - 00:11:00.734, Speaker C: So the challenge there has been. Initially, coming into Celestia, my assumption was, like, the whole thing about it was deploy a roll up as easy as deploying a smart contract. But to capture most devs in the smart contract space, they're like, they come with their smart contract code. They're like, they're so excited. Oh, modularity and stuff. And then they go to the docs, and the first thing they got to do is run a node and then deploy a roll up. And they're like, wait a second.
00:11:00.734 - 00:11:52.218, Speaker C: I just want to deploy my smart contracts and play around with things, right. So that was initially an interesting challenge to try to address, because you want to capture two different types of Persona that emerged as a property of modular ecosystem. One is those smart contract developers. And then there's a new category that I'm calling roll up developers. And the roll up devs are what I would consider a merge between the application smart contract devs on the upper layer and core devs on the bottom layer, because it allows you to mix strengths from deploying a roll up and then deploying your smart contract on it. But it was a gap in the beginning, and how I addressed it was, we deploy testnet. So I have a big testnet driven development strategy for onboarding developers.
00:11:52.218 - 00:12:08.680, Speaker C: So the first thing, if they're interested in an EVM, we provide them a testnet first so they can deploy their smart contract. They're like, okay, I'm playing around with it, and then take them into the roll up if they're interested to deploy a roll up, which should be, like a few lines of code for them.
00:12:09.770 - 00:12:51.774, Speaker E: That's actually a good story, because I remember, like, six months ago or something, I was helping the East Denver team organize, like, a pre eth Denver workshop series. And they were like, we specifically want to get people who were maybe thinking about hacking for the first time pulled all the way in. So let's do some really easy beginner workshops for something that they can come to East Denver and do and feel proud of. Like, yes, I did this one thing for the first time, and I remembered that was kind of one of my worries when Josh, my friend at Celestia, was like, can we do a celestial one? And I was like, well, these are people who maybe have never coded before, have never done anything in crypto coding before. So I don't know if they're going to be able to deploy their own roll up. I don't know if that makes sense. And Josh was no, like, it's going to be easy.
00:12:51.774 - 00:13:16.218, Speaker E: And I was like, I don't know. There are people who don't even know how to set the solidity version in the compiler and we ended up doing it and they ended up finding a way to address it. But I do remember at one point in Celestia that was something that I was worried about is like, how do you capture the vast majority of developers when the vast majority of developers are not protocol developers, but rather app developers? So it's good to see how you guys have solved for that in the last couple of months.
00:13:16.304 - 00:14:19.726, Speaker C: Like the answer testnets for every new architecture that you want to build. Let's say it's an emerging market kind of EVM testnet l one that wants to become an l two on top of Ethereum stuff, you can build an architecture for that. We have a thing called the quantum gravity bridge where it allows you to roll up to settle on Ethereum or any other settlement layer, but take data from celestia. So for the application dev to be like, okay, that allows me to have an optimism roll up that is scalable for my application, but I don't know if I'm confident enough in running that roll up in a test environment. So you provide them a test net for that architecture, for them to see the benefits of scalability. Others might want to do a sovereign roll up, which is what we call that allows them not to pay a fee to the settlement layer and stuff, to become sovereign in that sense. And people might be interested in that and see what that architecture is like.
00:14:19.726 - 00:14:51.990, Speaker C: We provide them a testnet for that. So for any kind of specific architecture, we just give them an RPC endpoint and a faucet. They don't have to really understand how it got deployed, but it allows them to deploy the application and see how easy it is, and then it takes them to that next step, after which would deploy their own node. Frankly, I'm very biased about nodes and stuff. I love running a node. I think everyone should be running a node, even a light node. It doesn't matter if it's celestia or Ethereum or any kind of protocol.
00:14:51.990 - 00:15:16.590, Speaker C: Running a node should be really straightforward. And I think everyone who's a developer should do that. But also you don't have to maintain one, because that's like infrastructure level stuff. So as a dev, it's nice to have something like infura or something else that actually improved your developer experience. But even though that's available just for to practice, you should be running a node just to practice.
00:15:17.970 - 00:15:21.438, Speaker E: To practice. For the end of the world, we all have to run our own node.
00:15:21.614 - 00:15:53.390, Speaker A: So I think there's a recurring theme here, which is the tech is getting more complex every year, which means the learning curve for new people entering the ecosystem is getting harder. And so this answer, create testnets, like create sandboxes for devs to play in. The person I'd really love to hear from here is Henri, because I think in some ways probably starkware has the most formidable tech, maybe perhaps we could say in the space. And so I'd love to hear how you're facing those challenges of getting people onboarded to Cairo, which even for deep devs is not often their background.
00:15:54.370 - 00:16:31.434, Speaker D: Yeah, I mean, I agree with you, we do have interesting tech, but there are really interesting stuff everywhere and there's a lot of stuff I don't know about. We don't have the greatest tech, we have great tech, everyone has a lot of. Formidable, formidable, sorry. So, yeah. So how do you onboard people on Cairo and how hard it is? Well, I don't know. Often the question comes like, why should I learn Cairo? Is it difficult and everything? And I have a few one liner. So usually I ask people like, hey, is solidity the last language you'll ever learn? Most people say no.
00:16:31.434 - 00:17:06.690, Speaker D: Right. Because it doesn't make sense. The point is convincing them that it makes sense. Right. So it's showing them why it's worth learning a new language versus using something you already know. And I think that at the end of the day, nobody stays in an ecosystem because there has slightly better tooling or the developer experience is slightly better. People stay for either a deep conviction they have in the fact that the tech is good and powerful or for the community, like David said earlier, and I fully agree with that.
00:17:06.690 - 00:17:29.838, Speaker D: So I tend to focus on those stuff. Right. The developer experience is not great, not great, of course, but this is something that most people can overcome. And if you explain and you take time to explain, then most people will overcome it. Will overcome it. So we just focus on what's in the distance and the people around you. That's what we tend to do.
00:17:29.838 - 00:17:30.960, Speaker D: That makes sense.
00:17:32.050 - 00:18:24.154, Speaker B: Yeah. I feel like Starquare is in a pretty cool position, right. Because on the one hand you do have this barrier to entry but it lets you kind of have that style, right, where you are finding people that are already interested and then you can pull them in a little bit. I think the quote that I think of is someone in your team has compared it to the eating glass, right? And web3 is full of masochists that for some reason want to run up against the bleeding edge of technology and just hit their head against a wall a lot. But once you've done that, you've kind of created a community of people that have gone through this collectively, together, fully. They understand deeply what everyone else is kind of like working with and doing. And it kind of creates this moat for your project and your product where a L2, right.
00:18:24.154 - 00:18:47.750, Speaker B: You can take that smart contract. Our goal is to kind of be a boring product in a sense, right. We want to be as EVM compatible as possible. So you can take your code from Mainnet and put it on scroll, but that also means you can take your code off of scroll and throw it anywhere else, right. And so we really have to focus in on figuring out what does it mean to build that community when we don't have a shared glass eating ritual.
00:18:49.210 - 00:19:22.640, Speaker D: I think the glass eating meme is awful, but it is fun. I'll say this, and we're at an interesting point now because the dev experience and the user experience is getting much better. So we're going to have to switch a little bit the way it works. And I'm really curious to see how we're going to get the community who are like super tight eight class together, how they get familiar and nice with people who are not and who are not in the club yet and who won't have to smash their head against the wall.
00:19:25.570 - 00:19:51.874, Speaker E: I think I maybe had a similar experience from my time at fuel because we also had a programming language that we created and we're trying to onboard people to. And what I found was kind of the same thing as you is that people who, people are masochists and they're like, there's barely any documentation. We have like a new release every day. So my code breaks like every other day. The tooling changes every day. Like my commands from yesterday don't work. But they were into it and they were in the form helping other people answer these questions.
00:19:51.874 - 00:20:23.522, Speaker E: They kind of became advocates for the community, for other developers. And I always tell people, they're like, oh, is it going to be hard to learn a new language? Am I going to be able to pick this up? And I'm like, I think all the developers, I always tell them, what's the first language you ever learned? They're like Python or Javascript or whatever, and then I compare it to solidity. I'm like, how different is it, really? It's not that different. Like, just different syntax, but everything is pretty much the same. And that kind of helps them get to a place where it's like the language itself really isn't the problem. And I think Cairo is probably the same thing. The language itself really isn't that hard to learn.
00:20:23.522 - 00:20:46.490, Speaker E: It's really not that different. All of the mental models for how to program are the same. You just have to look up, is it a colon, is it a semicolon? Is it a comma? And that isn't that hard. You just look it up. But the real thing is, why are people coming in at fuel? I think it was like we were building a different vm, and that was something really interesting to developers who were trying to look beyond the EVM, so less about the language.
00:20:46.910 - 00:21:23.814, Speaker C: I see a lot of mistakes people make when it comes to languages. They look at, oh, we're designing this really good language that's going to replace solidity or something like that, and that's valid. But the thing is, the best language never wins in terms of adoption. It's always what people are most interested in. Solidity is notorious for not being that great, but it still has the largest adoption, like sway versus cosmosm, for example. Both are rust based. Cosmosm is inferior to sway, but yet cosmosm dominates the cosmos community.
00:21:23.814 - 00:21:54.610, Speaker C: Nobody's know, all the things about the features added in Sway are much better than in cosmosm, and yet cosmosm dominates. And even though it has those things, so it's always like, the way I see it, I don't see, oh, Python is better than Javascript, solidity is like, sway is better than solidity. I see, where's the market share? And I'll just go for that, because I'm not going to be there to improve the programming language. I'm just going to go for the developers that are interested in the one that have the largest programming language adoption.
00:21:58.310 - 00:22:24.470, Speaker A: Yeah, this is interesting. I mean, something I think a lot about with community building is that there's almost a trade off between acquisition and retention. If users are very easy to acquire, they're often very hard to retain, because if they were easy for you to acquire, they're going to be easy for someone else to acquire as well. I think this is what you're getting at with the broken glass, right? It's like, it's very hard to acquire devs to your ecosystem. Once they are in, they are going to stay. Right. So hard acquisition often leads to really good retention.
00:22:24.470 - 00:22:57.282, Speaker A: And I think that there's almost a trade off here, right. Because it's like there are things we want network effects for, like languages. For languages, you want as many people as possible using that because that's what's going to dominate, right. If cosmos solidity take over, it doesn't matter what else comes along if they're dominant in that position. On the other hand, within your own project, like Starknet, you might not want to get as many people involved as possible. You might just want to get the really good ones, right? And so there's different goals at play here, right, between trying to scale language versus trying to scale a company. And yeah, I'm just curious how you guys think about retention here of users too.
00:22:57.282 - 00:22:57.940, Speaker A: Yes.
00:22:58.310 - 00:23:03.558, Speaker C: So when we talk about acquisition versus retention, we're looking at a sales funnel, right?
00:23:03.644 - 00:23:04.038, Speaker A: Correct.
00:23:04.124 - 00:23:04.470, Speaker D: Right.
00:23:04.540 - 00:23:48.274, Speaker C: But in Devrel, you can't look at it as a sales funnel. You have to look at it as a cycle. It's more like a cycle that the developer journey has to be a continuous cycle. So on the acquisition part, this is what we call developer marketing. How do you get them to notice you, whether it's a hackathon that they see? Oh, you're a protocol building a hackathon. There's a conference, like a Twitter post, a blog post and stuff that gets their interest so that they go to your documentation and then there's like five stages of that journey and stuff. But basically by the time that there's a retention, at the retention model, you're basically have you know them so well, you know what they're looking for.
00:23:48.274 - 00:24:31.982, Speaker C: They helped improve your product with feedback and stuff and you're just thinking about developer success. How do we give them a grant and stuff? Because they're like, they went through all of that journey and stuff, and when they go get a grant or they maybe get an investment to start their startup with that new application, they built on your protocol that actually continues the cycle because you can use that success story to pull in new Dev back to the acquisition model. So it's actually more of a cycle because keep in mind we're not selling anything that requires you to buy something and then you sell it. It's actually open source code, right. So it's much harder to quantify it from a sales point of view rather than from contributions and project being built on top of that protocol.
00:24:32.046 - 00:24:40.342, Speaker A: I mean, it almost sounds like we're building religions in a way, right? Where it's like you want to draw somebody in so that they will then draw more people in as well.
00:24:40.476 - 00:25:24.370, Speaker E: That's your point here is crypto, an MLM? There's this thing that I use called the orbit model that's used to describe how we grow communities. And I learned about it sometime last year, actually, while I was working in crypto. And it kind of describes what Yas has, where it's not about how long do they stay in and then when do they leave and how much money did it take to acquire them or how much time, but rather a way of looking at it as, like, orbits, where there's an outer orbit, where there are people who are aware of you but don't really care, are not involved. There's people who are observers. Sorry, these are the observers, and there are people who participate somehow. They like your tweets, or they want to show up to your thing. They want to show up to your side event, and then there's people that are building on you.
00:25:24.370 - 00:25:57.902, Speaker E: And then finally there's, like, the core team, there's, like, people who are diehards, people who are the advocates or whatever program you have who fall into that category. So instead of looking at it as acquiring and retention, it's like, where are they in that map? And for a lot of people, it's like a ven diagram of all the different ecosystems. We're all observers to most ecosystems. We tend to be like participants in a few, and then we're like the core of one or two. It's not like winner takes all, some zero sum, but rather, how can you get the most people as close to your inner circle as possible?
00:25:58.036 - 00:25:58.286, Speaker D: Yeah.
00:25:58.308 - 00:26:33.914, Speaker C: And your strategy with that orbit model is basically for every orbit level, you're trying to think of a strategy to pull them to the next orbit level until they get to become fanatics. That's like the closest orbit to the core devs. These people are like your diehard fan. They see your core devs as superstars and rock stars. You see a lot in the past, especially with Ethereum. If you go to any Ethereum hackathon, a lot of these hackers, when they see a core dev from the EF or from the EIP process, they look up to them. They read about them.
00:26:33.914 - 00:27:01.700, Speaker C: They see them on Twitter, they see them on the calls and stuff. So these are your superstars. And having those fanatics at that closed level, there's a lot of strategies you can do for keeping them in that orbit, like inviting them to dinner or special limited edition swag or hanging out with your core devs and stuff compared to people at the farthest orbit where might have signed up to a newsletter and you're just sending them updates until something piques their interest that they go into your community and find out more.
00:27:02.710 - 00:27:43.918, Speaker D: I kind of like thinking about it in terms of acquisition and retention. The orbit model, I hadn't heard about it, but it sounds interesting. But in terms of acquisition and retention, I feel like it's not exclusively a sales thing, right? I mean, it's about how you get people interested and do they stick around? They can go somewhere else, but I don't know. I feel like it makes sense. And on my end, should Devrel focus on acquisition versus retention? I think you should be aware of both because doing acquisition without retention makes no sense and you can't do retention if you don't have acquisition. Right. And from my perspective, what really impacts this is mostly like the maturity of your product.
00:27:43.918 - 00:28:20.186, Speaker D: If the product is really hard to use, you have to focus on retention a lot. And you mentioned this earlier, right. And retention, we do a lot of retention through community stuff like you mentioned, because that's what make people stick around in my experience. And as far as acquisition go, we do a little bit of that, but it's not where we spend most of our focus. Now we're again in a fun place where this is going to change in the next few weeks. I'm super curious to see how this is going to go, but how do you quantify it? I don't try to quantify it. I don't try to quantify it and.
00:28:20.208 - 00:28:28.730, Speaker C: Put numbers on because you mentioned community for the retention part. But in fact, community should be for both. Like with community you get acquisition and with community you get retention.
00:28:28.810 - 00:28:48.182, Speaker D: I mean, you can use community for everything. And we try to scale through the community. Everything we do. At the end of the day, we don't want to be a central hub where everything goes through us. We want to empower the community to grow itself route. Right. And to a certain extent this goes for tech infrastructure, but also for this kind of stuff.
00:28:48.182 - 00:28:52.470, Speaker D: So I mean, we use community for retention but also for acquisition.
00:28:53.690 - 00:29:29.998, Speaker B: I look forward to the KPI session we have after this on our metrics here. But I think there's also something fun. I think that maybe is maybe in this panel unique to scroll, but I'm not sure which is that. You mentioned dev personas a little bit, right. But more and more at scroll, I've been trying to evangelize internally that it's hard to call our devs a singular community. Right. We really have to start thinking about the devs that are building on our platform and consuming scroll as a product versus the devs that we want building scroll.
00:29:30.094 - 00:29:30.306, Speaker A: Right.
00:29:30.328 - 00:30:03.530, Speaker B: Like we want people contributing to our core protocol. We want people contributing to our ZK circuits and building interesting things on the edges of the ecosystem that blur the line between core code and stuff that ends up living on an EVM. Right. And for each of these, you kind of have to have different tactics and different ways to approach it and really think about what motivates someone that's writing halo two circuits in an open source context versus your adaptive.
00:30:07.010 - 00:30:20.930, Speaker D: It must be a much smaller community, right? I mean, the number of people who are able to write this kind of circuit and contribute to scroll. You don't treat a community with a few tens of people or hundreds of people the same way you treat a community with like thousands of people.
00:30:21.000 - 00:30:30.902, Speaker B: No, I think that's kind of the point though, right? We have 500,000 people in our discord. That's not a community. Right. It's something very different.
00:30:30.956 - 00:30:31.174, Speaker A: Right.
00:30:31.212 - 00:30:54.302, Speaker B: And so I think most of the time when people in web3 use the word community, they're talking about an audience. And I don't think that's something that we should be diluting the word community. And that's why I think identifying actually what are the sub communities, the set of communities that make up the scroll community lets us really meet the needs.
00:30:54.356 - 00:30:55.214, Speaker A: Of those devs, right.
00:30:55.252 - 00:31:25.240, Speaker B: Whether it's five hardcore people that really want to learn these circuits really deeply or it's people. We have a decently large Devrel team at scroll and we have folks that I think do general education super well. And they'd be very poorly suited to be devrels for those circuits. And by letting people kind of focus on those things and know what they're good at and know where they need to push things off to other folks, really helps us kind of focus in on that.
00:31:25.690 - 00:31:36.620, Speaker C: You mentioned that one sector is smaller than the other. I don't think it matters because if you find me one really good core dev who's external to the team, that's worth a lot.
00:31:38.350 - 00:31:45.534, Speaker D: My point is not in term of value, it's in terms of tool. Right. You don't communicate with ten people the same way you communicate with 1000. Right?
00:31:45.572 - 00:31:46.238, Speaker C: Of course.
00:31:46.404 - 00:31:47.214, Speaker D: Telegram group.
00:31:47.252 - 00:31:51.242, Speaker C: Yeah. Because you want to follow the one to end relationship with developers.
00:31:51.306 - 00:31:51.486, Speaker D: Right.
00:31:51.508 - 00:32:59.794, Speaker C: But when it comes to the core protocol, there are a lot of programs and strategies you can do to actually align core devs external and internal around your core protocol. Like the EIP process, which is actually based on IETF standards and python enhancement proposals as a process is something that's actually really well done, because in the end, when you have so many external core devs, like in Ethereum, they call it cat herding because it's really hard just to get everyone together and stuff. But at the end of the day, you have a really dedicated community, even though it's small, of core devs who actually understand the protocol in and out, even if they're not paid or they're know an external researcher and stuff, they actually care and they're actually building that community. Like, look at Tim Baco. Tim Baco is not necessarily a devreau in the traditional sense, but he does have that Devrel Persona. When he would go on every EIP call for the all core devs, he would live tweet about what people are saying, and then he became the coordinator of the EIP process after that because a lot of people follow what he's saying. There was a lot of debate in Ethereum.
00:32:59.794 - 00:33:22.682, Speaker C: There was like, hey, what's updates on the merge? And stuff like that. So, yeah, even if it's a smaller community, that's the community that changes everything related to the protocol. If you look at Geth, there's probably like 30, 40 people in the world who understand Geth as in and out. Right? So even though it's smaller, these people are super valuable because Geth is so important.
00:33:22.736 - 00:33:55.398, Speaker A: For Ethereum, I think you're going to add something that I'm really interested in, which is attention economy. To what degree is important to play into. You referred to before as rock stars in the ecosystem, right? If you can get one of those rock stars in the ecosystem, that's going to do a lot of damage for you. So, Cammy, this is really for you. I think you've been pretty unique in this because you've developed, I think, a Persona as a creator in the space, which is your Gen Z Devrel. Right. So people follow you and they know you as a personality, not just as a dev.
00:33:55.398 - 00:34:26.820, Speaker A: They know you for where you're going, what you're doing, and it's like people love you for. Yeah. And this is what Yaz was saying. Know, to what degree is important for everyone here to be a rock star, or to what degree is important to think about attention economy and how you're commanding this new world we live in of the creator economy, where you are a creator, or at least maybe some of your devs, are also creators that command wide audiences. And people care about on a personal level as well. This is really a question about brand and brand building.
00:34:29.110 - 00:34:35.042, Speaker E: I'll start by saying I don't think it was a purposeful thing. I think it just happened over a long period of time.
00:34:35.096 - 00:34:36.338, Speaker A: Personality was just too strong.
00:34:36.424 - 00:35:08.558, Speaker E: Yeah. Vibes were too good, and then people were just, like, feeling it. No, but I do think that in Devrel, a lot of your job is to be on the forefront of technology. So it's like this new thing exists. You're one of the first people in the space that knows how to do it. So you have to make the video, you have to write the docs, you have to make it possible for everyone else to know how to do it. And I think because of that, it kind of creates this image of rockstar ism where it's just by nature of, you're one of the first people in the space who's able to do something because you're the closest to the devs who made it.
00:35:08.558 - 00:35:47.094, Speaker E: You're the closest to the people, the John Adlers of the world who you can sit down and be like, hey, how do you do this? And then you make it palatable for everyone else. But how important is it? Honestly, people ask me this all the time. Teams come up to me and they're like, how important is it to have a Twitter personality, be my Devrel versus just someone who's a good engineer? And I always tell them it's not the most important thing. That's not the thing you should be optimizing for, but it is important. I think it is important, and not just because for your brand, but because brands are built around people. They're not built necessarily around tech. Because, like Daniel was saying, there might be a point where your tech is so similar to ten other companies, especially as l two wars rage on.
00:35:47.094 - 00:36:44.174, Speaker E: I think in a year there'll be five to ten more evm l two. So it's like, if they're all the same, the differentiator isn't the tech, it's not like the low level stuff that matters, but it's how does the people on your team make everyone feel? How do you lead a community? It's just like, how do you make people feel? How do people feel about you and how do people trust you? I think when you're a Devrel, it's more about trust. Someone asked me, they're like, I posted a picture of you playing basketball. Of all here in Paris, and they're like, do you ever work at these conferences? And then I replied, I was like, deverell is a long game as a joke, but it's true because it's not about me trying to sell you whatever project I'm working on right this instant and you have to use it today. But it's a relationship that gets built over many months and sometimes many years, and it's something that in a year and two years, when I'm working on something, people are going to be like, oh, I trust what she's working on, because over the last two years, I've seen her be like, XYz adjectives, and now I have trust in this person. And that's how brands are built. I think.
00:36:44.292 - 00:36:59.730, Speaker A: Yeah, I mean, this feels like a huge shift that we're seeing across all of culture, which is that brands are now a reflection of the people who work for them, rather than people being a reflection of the brands they work for. And, yeah, I'd be curious, everyone else is thinking about this question of how important is it to be a Twitter personality.
00:37:02.150 - 00:37:48.340, Speaker C: My strategy has always been to make the core dev the rock star. So I tried as much as possible to create that culture in Ethereum that allowed for core devs to actually become more visible and stuff. Now, it's kind of tricky because core devs, they don't necessarily want to be very public facing and stuff, and they don't have to be. Right, but people should know who the core devs are. So I focus more on actually making the core devs on my team more visible. And there's a lot of ways that we're planning to do that and stuff, because I want an element of trust in who is building this protocol and who they are and stuff, and to follow what kind of features we want to implement the trade offs and stuff. When it comes to me personally, I've been in the space for six, seven years.
00:37:48.340 - 00:38:28.240, Speaker C: I don't really care about building a Twitter Persona. I think it's important for a lot of people, but for me, I'm not tweeting that much. I tweet, maybe know, spicy takes every now and then. Right? But it's not my way of trying to pull in people to the space. I'd rather utilize more the protocols Twitter account for that kind of stuff. For me, I think that's more for the personal brand, and personal brand is super important. But I think getting people into that space doesn't only have to come from your Twitter account, it can come from different Twitter accounts and that can be utilized more.
00:38:29.970 - 00:39:19.374, Speaker B: Yeah, I wish I lived in a world where personal brand was a phrase that didn't exist, but it does. I think core tenets of Devreau like values that you just have to have are accessibility and empathy. Right. I think the Twitter thing can be a double edged sword, where, one, if people feel like they kind of know you and they can kind of know your personality, it makes them feel very free to come up to you and start a conversation and tell you about what they're building and ask you questions and kind of breaks down that barrier. So for accessibility, it's incredible. Right. But I think also, if your Persona and brand pushes too far from letting you actually be real and empathetic to needs and people come and start seeing falsity there, that can be an issue as well.
00:39:19.374 - 00:39:32.850, Speaker B: Because I think what it can do is, as a Devrel, it can put you to have transactional relationships as opposed to ones that are more long lived and more, I don't know, actually worrying about people as opposed to the transaction.
00:39:35.110 - 00:40:32.630, Speaker D: So does personality matter? I'm not very good at it, so I'll say no. But joke aside, I'm kind of like you. Yes. I don't like that much making things about me, but I see the power of this, and people follow people, so you need people leading the pack. And then again, I think my approach would be slightly like the same as you shine light on people who can lead other people, I would tend to shine light on people in the community, people who have interesting life stories, people who are doing inspiring stuff, people who are accessible and trying to, instead of being the light in the dark that leads people, being the catalyzer that makes various lights shine, and if possible, ideally outside the core team and the lead developer, because it helps with decentralization and it helps multiply viewpoints.
00:40:33.050 - 00:40:44.020, Speaker A: All right, well, this is all the time we have. I just want to say, everyone's being modest on this stage, but these actually are four rock stars of the ecosystem. So big round of applause for everyone here. Thank.
