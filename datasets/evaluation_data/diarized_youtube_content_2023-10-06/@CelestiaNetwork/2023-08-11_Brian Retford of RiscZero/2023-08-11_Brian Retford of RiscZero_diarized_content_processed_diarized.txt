00:00:04.120 - 00:00:07.884, Speaker A: Welcome to the show. Tell me your name. All right, tell me your name.
00:00:08.002 - 00:00:09.288, Speaker B: I'm Brian Redford.
00:00:09.384 - 00:00:13.276, Speaker A: Nice to meet you, Brian. And what's your involvement with Risc Zero?
00:00:13.378 - 00:00:15.580, Speaker B: I'm a co founder and the CEO.
00:00:16.480 - 00:00:20.572, Speaker A: If you were to give an elevator pitch of what that is. Give to me.
00:00:20.626 - 00:00:43.092, Speaker B: Yeah. Risk Zero is a computational platform that brings the power of ZK to the developers across the modular ecosystem and really any on chain and off chain ecosystem with a current strong focus on enabling applications to prove very complex computations that were previously infeasible on Ethereum.
00:00:43.236 - 00:00:45.892, Speaker A: Okay, and how were they previously infeasible?
00:00:46.036 - 00:01:28.020, Speaker B: Just in terms of overall gas? For instance, you can take an existing EVM, run this on top of risk zero, or build a very complex order book or set of voting primitives, for instance, that take into account any number of other signals, and produce an application that actually verifies all of this stuff on chain. So you can think about how like DyDX or some of these other acne order books are largely off chain. By using Risero ZKVM, it allows you to actually do those computations sort of alongside the chain and then prove them very easily on chain.
00:01:29.020 - 00:01:32.120, Speaker A: Does it introduce any centralized components?
00:01:32.940 - 00:02:04.192, Speaker B: Currently, yes. However, we'll be progressively decentralizing over time. So right now, especially because of ZK, there's not as much centralization risk. But clearly we really care about ensuring there's a wide pool of people being able to prove these computations. And then obviously the sort of permissionless and unbreakable nature of decentralization has got to be, is critically important for any of these kind of.
00:02:04.246 - 00:02:11.510, Speaker A: Yeah, of course. Sure. The single point of failure then, in the current state, what is that?
00:02:12.360 - 00:02:20.824, Speaker B: Yeah, I would say, I guess the sort of centralized server on top of Amazon, but it's pretty resilient. So AWS, like a lot of us.
00:02:20.862 - 00:02:22.936, Speaker A: If AWS goes down, then.
00:02:23.118 - 00:02:50.464, Speaker B: Yeah, then much of the network then bonsai. The service that we're launching on top of a zero won't be working. Yeah, for that period of time. However, the ZKVM itself is completely open source and is actually independent of any particular bit of infrastructure. So people can use the ZKVM anywhere already. It's not the sort of service that packages it up for people.
00:02:50.662 - 00:02:59.212, Speaker A: Is there any risk of whoever runs the server lying about what it's proving?
00:02:59.276 - 00:03:10.600, Speaker B: No, that's the beauty of ZK is it's actually as long as your ZK system is implemented correctly and the security level is high enough, then it's actually as far as we know, impossible. Yeah.
00:03:10.670 - 00:03:16.968, Speaker A: Okay. All right, so the ZKVM, can we talk about the architecture a little and unpack that?
00:03:17.134 - 00:03:22.088, Speaker B: Yeah. So it depends on how familiar the audiences are with ZK in general.
00:03:22.174 - 00:03:28.972, Speaker A: Cosmos audience, pretty deeply technical. ZK is not going to be a mystery for them.
00:03:29.026 - 00:04:38.616, Speaker B: People are probably most familiar with ZK evms, and people are familiar with what an EVM is. The EVM has a very long set of instructions, and it was primarily designed to do smart contract style computation. And over time, it's sort of accreted more and more of these pre compiles and gadgets. So our team sort of, two years ago when we started this, we had built this high performance ZK proving system. And when we took a step back and looked at what we thought was going to be most useful in general, it was to not build a ZKe EVM, but to build a ZKVM that actually implements the same kind of computer architecture you would see inside a computer. So the main reason to do this is to allow normal applications to run in a ZK context, including even the EVM itself that I mentioned earlier. So this approach effectively lets you run programs written in rust, c, go, Python, typescript, or even solidity in a ZK context without having to sort of rewrite everything or spend a ton of energy building a very specific sort of VKVM.
00:04:38.748 - 00:04:47.332, Speaker A: Okay. Is the thought process around that not to constrain the possible set of developers to solidity only?
00:04:47.466 - 00:05:16.656, Speaker B: Yeah, it's to allow people to leverage the tons of work that's already been done in the rest of the sort of computing landscape. Like, we just published an example of ZK sentiment analysis that you can just import a library, pass a paragraph into it, and you can get sentiment analysis out of it back, which would be useful potentially in a social network setting where you might want to prove that your content, a certain tone or certain whatever before you actually post it.
00:05:16.758 - 00:05:22.610, Speaker A: Okay, got it. So are those the set of use cases that you had in mind when building this?
00:05:24.020 - 00:05:53.580, Speaker B: The main set of use cases we had in mind when we built the company was really just scaling decentralized computing in general. So we had sort of explored building an Alt L one, utilizing ZK as the consensus layer. And I still think there's some really interesting possibilities there, but especially with the evolution of the sort of modular narrative, I don't know that traditional kind of very vertical l ones make much sense anymore.
00:05:53.920 - 00:05:54.428, Speaker A: Right.
00:05:54.514 - 00:05:57.320, Speaker B: Or make as much sense the way they used to be constructed.
00:05:57.400 - 00:06:17.356, Speaker A: Right. There's also the, if you introduce novel cryptography, then it potentially breaks compatibility and composability with a lot of the other applications at the l one level. So then how does risk zero introduce a ZK layer that doesn't break composability?
00:06:17.468 - 00:06:30.484, Speaker B: Yeah, well, I think one of the most interesting things about ZK is that it's actually highly amenable to increasing composability, as we've seen with all the kind of ZK like client work that people like succinct have done and people are doing across the industry.
00:06:30.532 - 00:06:37.000, Speaker A: Because you can prove, does it increase composability but trade off decentralization at all?
00:06:37.150 - 00:06:39.944, Speaker B: I think the trade off, not fundamentally, no.
00:06:40.062 - 00:06:41.150, Speaker A: Right, sure.
00:06:42.000 - 00:07:22.036, Speaker B: But yeah, because you can run the sort of cryptographic system of another chain, inside off chain in the ZK context, and then prove that in a way that's easily verifiable on the chain that you're interested in proving this thing to. You don't necessarily need to introduce new cryptographic primitives depending on the chain. For instance, we use starks, but after we produce this megastark that maybe represents an entire ETH block, we can then sort of produce a graph 16 snark, which can easily be verified on Ethereum. So there are lots of ways to sort of take a proof and I think make it more portable to particular ecosystems.
00:07:22.068 - 00:07:26.840, Speaker A: Okay, so how does this tie back into the modular architecture?
00:07:27.340 - 00:08:07.136, Speaker B: Bondi so the service we're launching on top of the ZKVM is really intended to be a modular execution framework that lets people use Zk to process any kind of computation they want on that state, and possibly sort of include off chain state or historical data in that computation, and then use that as part of any application. So rather than having this sort of monolithic world where you have the execution engine as a very strong part of a particular stack, this lets people leverage a bunch of additional computation from roll apps, from l ones, from l two s, et cetera.
00:08:07.248 - 00:08:16.884, Speaker A: Okay, so has this effectively decoupled the roll up application from the what DA.
00:08:16.932 - 00:08:58.852, Speaker B: Layer, or it's more from the execution could take into its extreme? So you could imagine the sort of order book case, you place your order on chain, and then the DA layer actually makes sure that the order is valid, places it on the DA layer, and then after some period of time passes or after every order is placed, logic actually runs off chain that does most of the application logic. So in a sense, it decouples application logic from the chain. And that depends on whether you actually want that application logic to be on chain visible in your smart contract and you're willing to pay the gas associated with that logic.
00:08:58.996 - 00:09:17.630, Speaker A: What are the trust assumptions involved in this? If there's some, there aren't a lot, not a lot if the computation is happening off chain. And how does the DA layer understand whoever's submitting the data is doing it?
00:09:18.400 - 00:10:00.520, Speaker B: Yeah, I don't know that the DA layer would necessarily understand, but the execution layer would be able to actually run a program that verifies the proof. Just like you have programs ethereum that verify graph 16 proofs, you can verify any kind of stark or anything else. And usually in that proof it would contain okay, here's the input state, or at least a hash of the input state, and here's a pointer to the program that was run, and here's the actual results. So in the case of an order book, it would be the set of orders that are settled, and then the logic on chain would just verify that and then effectively advance the state to the next state. So it turns blockchains into more of simple state machines.
00:10:02.080 - 00:10:07.310, Speaker A: Okay, cool. Does it actually use Celestia in any way?
00:10:08.480 - 00:10:17.664, Speaker B: It certainly can. We haven't had any applications built on it, but that's actually going to be part of this sort of voting example that we've been building out.
00:10:17.782 - 00:10:24.610, Speaker A: Okay, so what part of the modular stack does risk zero sit?
00:10:25.620 - 00:10:39.944, Speaker B: Yeah, a couple of different ones actually. So there are some roll app frameworks that actually use risk zero to prove their state transitions kind of behind the scene, like sovereign sovereign SDK. We were sort of one of the first adapters for that.
00:10:40.142 - 00:10:48.810, Speaker A: Sorry, let me interrupt you for a second. Is the idea to circumvent the need for light clients and use ZK to.
00:10:49.260 - 00:11:11.040, Speaker B: That's one thing you can build with it. So I would say we will also be building an e for lite client and sort of an ethereum co processing module on co processing modules for a bunch of other chains. That said, you can also use it in a pure infrastructural capacity where it's effectively transparent to the user. So we have a couple of projects like Eclipse and swap doing this.
00:11:11.110 - 00:11:14.690, Speaker A: When you say you have a couple of different projects like Eclipse, what do you mean by that?
00:11:15.540 - 00:12:05.968, Speaker B: So eclipse and sovereign both are these sort of roll apps, and we've talked to rollkit a bunch, although we haven't really done anything sort of formally with them. And then there are a couple other projects like incubation stage who are effectively trying to build new ways to write programs and use ZK to make these more composable worlds. I'm not familiar with sovereign, but they have an SDK. You program your app in this SDK and then any app made in the sort of sovereign world has automatic composability with other apps in that world, but they're still effectively completely otherwise completely silent. So you don't have any kind of cross app gas concerns. And they use us and other proving engines in the future in order to actually make the sort of seamless composability happen behind the scenes.
00:12:06.064 - 00:12:08.784, Speaker A: Sovereign sounds similar to Vistara.
00:12:08.832 - 00:12:15.856, Speaker B: That's another one that Vistara actually uses. They actually support creating sovereign apps from Vistara.
00:12:16.048 - 00:12:26.170, Speaker A: Okay, and how does the developer compose all of these different tools to build a sovereign roll up at the end of the mean?
00:12:26.700 - 00:12:59.300, Speaker B: I think Vistar is probably on the right track with trying to build some tooling to help people figure this out. So we're currently more concerned about the sort of base infrastructure level rather than packaging it all up in a way that's easy for customers to use it. I think sovereign is a great way for customers to navigate that. But I also think that developers are going to have a lot of options in terms of construction kits to figure out how to piece together various aspects of the modular ecosystem.
00:12:59.640 - 00:13:04.144, Speaker A: Right, great. So where do you think this whole thing is headed?
00:13:04.272 - 00:13:04.964, Speaker B: That's a good question.
00:13:05.002 - 00:13:30.190, Speaker A: I mean, you clearly have drunk the sovereign roll up Kool Aid, the modular architecture Kool Aid. And as soon as it clicked for me, really quickly coming from the cosmos ecosystem, although I think for most people who are going to be listening to this podcast, maybe even a couple of years in, it's not going to be completely obvious.
00:13:30.800 - 00:13:36.784, Speaker B: Yeah. I mean, to me, just coming from 20 years of computer science, it just.
00:13:36.822 - 00:13:41.584, Speaker A: Kind of vertical extensibility and scalability, it makes sense.
00:13:41.702 - 00:14:04.248, Speaker B: Yeah. And just also lock in and creativity developers don't really like having single vertical silos where they're told, okay, those things are very useful for making bleeding edge platforms and increasing productivity. But at the end of the day, developers want to have the freedom to create. I think modular architectures do that.
00:14:04.414 - 00:14:13.528, Speaker A: Not only that, but practically that kind of architecture doesn't scale to the billions of users. Of online users.
00:14:13.624 - 00:14:27.904, Speaker B: Yeah, generally not. I mean, I think there are some limited example, like in the trusted world, there are examples of people building highly vertically siloed, non modular architectures that scale well, but yes, in a decentralized context, almost certainly not. Yeah.
00:14:27.942 - 00:14:28.304, Speaker A: All right.
00:14:28.342 - 00:14:31.216, Speaker B: As people say, if you could do it on ETh, it would have been.
00:14:31.238 - 00:14:43.312, Speaker A: Done by was the. Is ZKVM a completely original implementation from RISC Zero, or was it forked from our implementations?
00:14:43.376 - 00:14:45.444, Speaker B: Yeah, it was completely done by us.
00:14:45.562 - 00:14:50.570, Speaker A: Are there other projects that you imagine would be forking it in future?
00:14:52.700 - 00:15:25.920, Speaker B: Yes, I think some people might have forked it the way it was sort of open sourced. It makes it somewhat difficult to fork, I guess, because the circuit descriptions are just a giant file. It's kind of hard to decode. But realistically, at this point, there are like 2025 proof systems in development, so it's a really active area, so people might fork it. The version that we're working on now, the sort of version three, will be far more useful for people to modify and do whatever they want with.
00:15:26.070 - 00:15:44.104, Speaker A: I'm assuming that in the short term, the ZKe EVM is going to have market dominance. So I would imagine that the ZKVM, if it were to try to be compatible with that ecosystem for growth purposes, how is it not, or is it.
00:15:44.302 - 00:16:30.384, Speaker B: Yeah, it is entirely compatible at this point in the sense that you can run the EVM on top of the ZKVM. So all of these evms, obviously lots of them, are written in rust. You can compile rust or well, not go right now, but rust in general to RISC five, you can run risk five on top of our ZKVM and then prove something. So there's like proof of reserves examples people have made. There's proof of exploit examples people have made, and these are basically the proof of exploit example. People can provide a solidity program, and you can actually prove that you can drain a contract without showing how. I extracted $500,000 from this contract.
00:16:30.384 - 00:16:49.368, Speaker B: But I'm not going to show you how. I'm just going to show you proof that that was possible. So that's like one example of compatibility there. So we will be building out this effectively full eth client that looks a lot like a ZK EVM, but it'll be based on existing EVM code. We won't have written any of the EVM results.
00:16:49.464 - 00:17:15.104, Speaker A: Okay, given that you have this vision of how the blockchain space is going to evolve in the like, how do you think it is going to evolve? Is the EVM or ZKE EVM going to be Lindy still, or is the Ethereum layer one going to maintain its status as the de facto settlement layer? Where do you think it's headed?
00:17:15.152 - 00:17:21.972, Speaker B: I think the settlement layer dominance is going to persist for a while, personally.
00:17:22.036 - 00:17:24.388, Speaker A: Although we'll see what happens into perpetuity.
00:17:24.564 - 00:17:25.592, Speaker B: I mean, I doubt it.
00:17:25.646 - 00:17:26.248, Speaker A: Okay.
00:17:26.414 - 00:17:42.380, Speaker B: But it's hard to say. Just because the space is so nation and the interest level and broader society tends to go back and forth. It's hard to say. Like, are CDBCs going to adopt Ethereum as their set on the layer? Are they going to have anything?
00:17:42.450 - 00:17:43.980, Speaker A: They're adopting XRP.
00:17:44.560 - 00:17:59.670, Speaker B: There you go. Yeah. So I don't know. It's hard to say. Pretty bullish overall on the long term prospects of the ecosystem, especially with account abstractions starting to come into play and just the set of user experience improvements that are coming online.
00:18:00.680 - 00:18:11.712, Speaker A: Given that we're at the modular summit and this is a Cosmos podcast, how does risk zero potentially tie back to Cosmos?
00:18:11.776 - 00:18:26.060, Speaker B: Yeah, we've actually had fairly limited support for Cosmos for nine months ago or something. Jake Hartnell added, made a little dowdow ZK voting example on Juno.
00:18:28.560 - 00:18:30.044, Speaker A: Using risk zero.
00:18:30.242 - 00:18:57.830, Speaker B: Yeah. So because Cosmos, through Cosmosm has the ability to do a lot more than the EVM per se, for the EVM, we have to go through this process of building up the snark, converting it to, or stark, converting it to a snark, and then putting it on chain. On Cosmos chains, you can just put the stark directly on the chain and verify it. And it's incredibly. Yeah, so it's already kind of supported the cosmos ecosystem for a long time.
00:18:58.360 - 00:19:00.536, Speaker A: From a PoC perspective, from a.
00:19:00.718 - 00:19:11.252, Speaker B: So, you know, as soon as we're sort of wrapped up, the Ethereum integration, obviously, kind of our next target is to do a more first class integration with cosmos chains.
00:19:11.316 - 00:19:12.132, Speaker A: Oh, that's exciting.
00:19:12.196 - 00:19:13.332, Speaker B: So it's not just poc.
00:19:13.396 - 00:19:17.660, Speaker A: Yeah. Right. Was that actually on your roadmap or is that something that you spun up just.
00:19:17.730 - 00:19:22.376, Speaker B: No, it was actually more on a roadmap than Ethereum, I think, before FTX.
00:19:22.488 - 00:19:25.184, Speaker A: Collapsed, how did FTX change things?
00:19:25.302 - 00:19:44.790, Speaker B: It seems like it just shifted the dominance away from some sort of all belt love narrative and everybody kind of piled on to that and vkevms being complete. I think people and the merge, Ethereum kept doing things right. Other ecosystems kind of stalled out in a lot of ways. It seemed like.
00:19:46.840 - 00:19:53.850, Speaker A: How was the merge? Right. And how did other moves by other ecosystems stall out?
00:19:56.300 - 00:20:29.380, Speaker B: So the merge is probably one of the most complex sort of examples of replacing the engine on the plane while it's in flight. As someone who's fairly new to the space, I remember insane pessimism around the merge. Like, is it ever actually going to happen? And proof of stake, is that ever going to work? For ethereum, it seemed like there was a lot of doubt around the maybe future viability of the Ethereum ecosystem until the merge was complete. And after that it seemed like a lot of people sort of went back in that direction.
00:20:30.760 - 00:20:38.980, Speaker A: How did FTX's collapse lend itself to bad optics for alt one ecosystems?
00:20:39.320 - 00:20:45.464, Speaker B: Yeah, I mean, maybe the tie is not so strong there. That was just kind of my perception afterwards that salana kind of like disappeared as a thing.
00:20:45.502 - 00:20:49.256, Speaker A: Okay, all right. For Solana. But why would that?
00:20:49.358 - 00:20:58.060, Speaker B: I don't know if it really impacted cosmos at all, but I think I started playing with Cosmos Apple after collapsed.
00:20:58.400 - 00:20:58.956, Speaker A: Okay.
00:20:59.058 - 00:21:20.390, Speaker B: No strong opinions there other than it was a perception of and seeing also, Aptos's launch kind of go nowhere after that could have been due to the FTX collapse and the kind of lack of external money to kind of pump early ecosystems, but certainly seeing Suisse start to take off again.
00:21:21.000 - 00:21:29.316, Speaker A: Right. Okay, got it. Are there any milestones that you're looking forward to that you could share about what risk zero is planning?
00:21:29.348 - 00:22:08.140, Speaker B: Yeah, absolutely. So sometime this fall we're going to be officially at version 10, which in our mind is like DFI ready. So currently being an earlier project and a cryptography project and something that lets you roll up a ton of PVL and transactions into a single block, it's pretty critically important that you get security right on that front. So in addition to stabilizing the APIs and doing a general release of the multi service, we'll actually have the system at solid 10 that anybody can use to build applications on main net.
00:22:08.230 - 00:22:15.540, Speaker A: Okay. Do the cost savings compare to what's proposed via dank sharding?
00:22:16.040 - 00:22:35.900, Speaker B: I think they're really application specific. I think dank sharding lowers the cost effectively for the kind of things we would do in Ethereum. I don't think we've done a full reanalysis of the sort of gas savings and all the use cases.
00:22:36.880 - 00:22:41.580, Speaker A: So is defi the primary use case that you had in mind when building this?
00:22:41.650 - 00:22:48.640, Speaker B: No. We've seen a lot of traction and interest in the Defi side, outside of the sort of proving other state machines.
00:22:49.700 - 00:22:56.900, Speaker A: Okay, you did mention order books, but what else were you, did you have in mind initially?
00:22:58.440 - 00:23:15.880, Speaker B: Sort of any application, especially gaming and social. Those are the things that are most interesting to me and I think most relevant. But the more we've gotten into it, the more I'm sort of convinced over the long haul there's going to be a lot of enterprise, sort of automation, business automation.
00:23:16.380 - 00:23:25.740, Speaker A: Enterprise always seems to come back and forth. It comes back and it's full swing and then goes back out and then comes back security tokens.
00:23:26.240 - 00:24:00.730, Speaker B: I feel like the combination of ZKML account abstraction and getting ZK to a point where you can actually reconcile swift bank transfers very easily, as well as the likely increase in, I guess, regulation and maybe the space and regulators are going to come to some kind of detente and agree to some amount of inspection and you can actually use ZK to make sure you can preserve privacy while still giving regulators some ability to interact with what's going on.
00:24:02.140 - 00:24:42.420, Speaker A: I'm honestly pessimistic or realistic about the regulation space. Yeah, fair enough. Yeah. The more clear the regulatory framework becomes, the more it seems like they are definitely going to apply the web to traditional framework, to web three, or decentralized tech, and it still fails to recognize the decentralized nature of a lot of these things. So it still does not answer the questions that we have. And at that point, we may need to create a wholly separate regulatory, like a self regulatory body for our own.
00:24:42.570 - 00:25:08.556, Speaker B: I've actually. Was I talking to alluvial? I don't think that they're doing this exactly, but I was talking to some people here who are trying to effectively build up reputation scores and these kinds of things so people can build some amount of monitoring in. And I do think because the technology necessary to kind of self regulate is quite advanced, I don't know that the regulators pick up on it on their own. So yeah, we might have to actually build.
00:25:08.738 - 00:25:09.790, Speaker A: Yeah, we can.
00:25:11.040 - 00:25:15.950, Speaker B: Then they probably will adopt it after people understand that it's actually better for everyone, maybe.
00:25:16.880 - 00:25:19.372, Speaker A: Okay. And with that, thanks for coming on the show.
00:25:19.426 - 00:25:20.510, Speaker B: Of course. Thanks.
