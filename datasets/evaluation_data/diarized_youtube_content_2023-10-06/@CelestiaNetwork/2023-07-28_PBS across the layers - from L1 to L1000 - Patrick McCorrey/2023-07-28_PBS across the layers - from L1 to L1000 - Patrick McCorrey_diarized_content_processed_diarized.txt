00:00:01.370 - 00:00:33.826, Speaker A: Hi guys. My name is Patrick McCorry. I work at the Arbitrum Foundation. And today, yeah, there's my really dinky slides. So I didn't have that cool intro before, and I'm just going to talk about PBS across the layers for layer one and L2. And so let's just jump right in, you know, let's have an overview of layer one, and let's have a consider about how mev sort of evolved there. So at basic level for a blockchain system, you have Alice, and Alice wants to transact, and she needs to get her transaction and communicate it to the block proposers.
00:00:33.826 - 00:01:11.454, Speaker A: But the question is, how does she get her transactions across? And historically speaking, you would send this to a gasa protocol or a peer to peer network. So Alice will send it to the gasa protocol. Every peer will get the transaction, validate it, and then pass it on to the next peer. And the block proposers live on the gasa protocol. So they'll hear the transaction and then include it in their block as well. Now the question is, who else lives on this peer to peer network searchers do. And I'm sure most people here are aware the search will hear the transaction.
00:01:11.454 - 00:01:37.962, Speaker A: They'll inspect it, they'll say, oh, I can extract value from this. So they'll copy it, paste it, and get it to the block proposers first. And they'll pay a higher transaction fee so it gets into the block proposers first, or sorry, their transaction will get in first. But now not just one searcher is there. Many searchers are there, and they're all typically competing for exactly the same opportunity. And we call this a priority gas auction. So maybe let's raise our hands.
00:01:37.962 - 00:02:26.438, Speaker A: Does anyone remember these gas auctions? Okay, awesome. And did anyone ever steal your transactions? Have you ever been a victim to the PGA game? Okay, maybe one or two hands there. Anyway. So what is a priority gas auction? Why is it important? So what happens is that I stole this graph from someone, from this really nice article about it, but basically within that twelve second window, one searcher will place a bid, another searcher will place a higher bid. And very rapidly, throughout those 12 seconds, you could have 100 different bids that are all competing for exactly the same mev opportunity. The block proposer will simply take the bid with the highest fee because that's going to pay them the most money. And so there's two problems that happened here with these priority gas auctions.
00:02:26.438 - 00:03:01.222, Speaker A: And this is sort of like 2019. 2021 was wasteful and failed transactions because the successful transaction would get in alongside all the field bids. So it was a waste of block space. And two, it's sort of unrestricted mev as well. You're sort of taking the user, throwing them to the wolves, and their transaction may or may not be executed at the very end. And so when Flashbots emerged, they sort of resolved this problem. So has anyone ever used a direct transaction before with Flashbots? A few people here.
00:03:01.222 - 00:03:31.230, Speaker A: Awesome, cool. So the way they solved the problem is very simple. They set up a direct communication channel between the user and the block proposers. Okay? And so you just basically bypass the peer to peer network. You bypass the dark forest so they cannot eavesdrop on your transaction. But what can we extract from this scenario? So first we have to consider the transaction ordering policy. So on a layer one blockchain, we typically use the highest fee first.
00:03:31.230 - 00:04:52.380, Speaker A: Whoever pays the most money is going to get ordered first. The second is the communication protocol. Can a searcher eavesdrop and learn about the user's transaction and then extract value from that? And finally we have to consider is the user experience, what guarantees did the user get and how long does it take until they figure out, oh, my transaction has been confirmed or someone's extracted value from me? And so what do you do about this in the layer one world? What do you defend against the mev? Or do you try to embrace it and just take the sort of it's going to happen anyway, let's embrace it and use it to protect the protocol. So in the layer one world, we've sort of gone down the path of embracing mev and PBS games. And why is that? And that's because to this day I am not aware of a protocol that can defend against mev. When we take into account 500,000 validators at the protocol level, we just don't have a protocol that can defend against mev in any meaningful manner at the layer one based layer. Because after all, one of the overarching goals of a system like Ethereum is to maximize who can be a validator, maximize that set and make the operators of the system as decentralized as possible.
00:04:52.380 - 00:05:54.750, Speaker A: And one of the other problems is that one of the reasons why you would embrace mev is because one of the assumptions at a layer one blockchain is that all validators roughly get the same reward. If I get the same reward as the other validator, then we'll both earn rewards at the same amount and we'll be equal partners or equal competition. If one validator can take the mev for themselves and it's not shared amongst the validators, then they'll grow bigger than everyone else because they'll earn more rewards than everyone else as well. And that's a terrible outcome. If we're not careful of how mev is embraced, we'll break the property of fair rewards for the validators and one validator will grow basically defeat everyone else. And so that's why Flashbots and PBS sort of solves that problem. When you think about what Flashbots have done is that they've taken this on chain auction protocol and took it off chain.
00:05:54.750 - 00:06:42.346, Speaker A: And what they enabled was to allow block proposers to outsource the work of mev. And then a marketplace of searchers can all compete to extract the mev and of course share some of the rewards with the proposers and then they get some of the reward as well. And this is also acknowledging that someone in their bedroom can probably do mev better than someone who's running like a validator farm for Ethereum. I'll sort it to the best people who can do the work and share the rewards between both parties. And that's why it's really cool. You can share the reward and you also reduce this on chain spam. Now, what about a roll up just to highlight that's why we have PBS for the layer one, to protect the decentralization of the validators.
00:06:42.346 - 00:07:30.390, Speaker A: But what about a roll up? Is the environment any different? And it's exceedingly different. A roll up already assumes that we have Ethereum. We already assume that we have this decentralized platform with hundreds of thousands of validators. We don't need to replicate this at the L2. We don't need 500,000 validators, we just need a handful, maybe 12345 sequencers and that's it. And as we'll see the sequencers there to offer the user experience and the fast path, they don't actually impact the safety of the system. But that's cool if you only have a small sequencer set, that's a much more tangible problem to deal with in terms of, you know, the scenario is very straightforward.
00:07:30.390 - 00:08:12.700, Speaker A: Alice has a direct communication channel with the sequencer, so Alice can give her a transaction over, then the sequencer can give an instant response. The sequencer has ample time to do whatever they want with the pending transactions. They have a list of basically like a basket of pending transactions. They can apply any ordering policy that they want and they could do this within a few minutes or up to a few hours. They have ample time to extract as much mev as they want if they wanted to do that. And of course, eventually the sequencer will take the list of order transactions and pass it on maybe to the executors, the provers, et cetera. So all they're doing is ordering transactions and that's it.
00:08:12.700 - 00:08:38.942, Speaker A: So let's again compare the core components. So L2 is very different. In L2, the sequencer can apply any ordering policy that they want. The communication channel is very different. It's a direct communication channel to the sequencer. There's not necessarily an opportunity for a searcher, the eavesdrop on this communication and finally the user experience. The user sends a transaction, the sequencer can give instant response.
00:08:38.942 - 00:09:20.110, Speaker A: It's a bit like playing with the legacy web two world where you get this instant response when you sort of interact with a website. But as we're going to see, as you try to improve the user experience, you're going to impact mev, its ability to be extracted. And there's this sort of weird trade off between extracting mev and how users experience using a roll up or a L2. So, as I mentioned, lots of ordering policies, you can consider has extraction, first has fee, 1st, 1st come, first serve. It could even be cal swap. That's an ordering policy, any ordering policy that you want there. But most roll apps today implement first come, first serve.
00:09:20.110 - 00:09:44.386, Speaker A: What is first come, first serve? Very straightforward. I give the sequencer my transaction, they timestamp it, they respond to me, then they order the transactions by know it's straightforward. And you would think with first come, first serve, there's still no mev here, so raise your hand if you think there's mev. Let's see. There we go. Awesome. Now, of course, there's mev.
00:09:44.386 - 00:10:28.370, Speaker A: Why? So what Arbitrum tried to do, at least, is that the sequencer has a data feed. So we get user transactions. We do first come, first serve, and then we reveal that in a data feed every 250 milliseconds. And the reason for this is that we want to provide Coinbase, Ether scan and Fura with up to date data so a user can send their transaction, look at RB scan and say, oh, my transaction is confirmed. Well, if you have a sequencer feed where you're giving out this pending data to these infrastructure providers, searchers pop up. Of course they do. And what do they do while they listen for the transactions? If they find a back running opportunity bomb, they send it out immediately.
00:10:28.370 - 00:10:59.978, Speaker A: Oops, look at that. There's a searcher right now. Sorry. Always listening, aren't they? But this is it. You have this rise of this latency game because in Arbitrum, you didn't just get one searcher, you got 150K WebSocket connections to this data feed. And so one is a latency game because they're all competing with each other. And two, it's a bit like a denial of service attack on the sequencer because you have to maintain 150K WebSocket connections, which is not an ideal scenario.
00:10:59.978 - 00:11:30.838, Speaker A: So the off chain Labs guys came up with a really elegant solution, in my opinion. But there was some outcry. You're already laughing about it, aren't you? They basically wanted to implement has cash because it's basically you create like, 20 priority lanes. You do some proof of work, you have the lowest proof of work, you gain access to the priority lane for 24 hours. So reintroducing proof of work in order to solve this problem. But as you can imagine, there was a lot of outcry. People don't want to use proof of work to solve this problem.
00:11:30.838 - 00:12:00.594, Speaker A: This, of course, for me is an elegant short term solution, but it doesn't really solve the problem long term. But this is really frustrating, right? We have this trusted sequencer, this ideal scenario where we can fully trust them, not the extract mev. And the mev bots are still there. I mean, look at this guy. He just doesn't go away, does he? That's Phil Diane, by the way, from Flashbots. Don't know if you know who he is, drew little evil eyebrows on him, but he's always there doesn't leave us alone. Well, what a guy.
00:12:00.594 - 00:12:33.374, Speaker A: The dark forest is always lurking. So then the question is, what's more fair? Are these latency games fair? Clearly not. Is a denial of service attack on the sequencer and they're just fighting amongst each other. So then it brings you back to the question, well, what about auctions? That's how it was solved in the layer one. We create this auction and let them bid for the opportunity. And that's sort of the idea behind the time boost proposal by Ed Felton from Offchain Labs. And I'll give you a high level overview of basically, I mean, it's very straightforward, as you're going to see.
00:12:33.374 - 00:13:00.962, Speaker A: Maybe they have an academic paper that's slightly more complicated, but the idea is simple. Alice gives her transaction to the sequencer. The sequencer still has this data feed where they reveal the transactions. But now the sequencers compete in these little bundle auctions, very rapid auctions. And then of course, the winning bundle gets sent to the sequencer. Then the sequencer then decides, okay, here's the transaction batch. But the point here is that this bundle auction is configurable.
00:13:00.962 - 00:13:38.734, Speaker A: It could be really rapid, it could last 500 milliseconds, it could last 3 seconds. And what you're really doing is purchasing the right that go back in time. So within this auction window you're saying, I want to go back 250 milliseconds in the past. Another way to think about it is that you're buying for a specific position in the ordering. Maybe you want to be the 20th transaction, the 30th transaction, but you're buying for that opportunity and you can be selective. So in the time boost proposal, their goal is only to allow back running because back running is not seen as bad mev. There's a lot of moral questions around that, but it can be configurable.
00:13:38.734 - 00:14:32.238, Speaker A: You could allow front running, you could allow sandwiching, and because the bundles are so small and the auctions are so rapid, you could probably inspect it, look at the transaction and say, okay, I will accept that type of mev, but I will not accept this type of mev. And so my last slide is basically some interesting questions around that. Should the sequencer be allowed to inspect an mev bundle and then decide not to include it? This could impact the credible neutrality of a roll up because now they're sort of being subjective over the transactions they include. But if it's better for the user, then maybe they should do that. The auction time window is set to only enable back running. But should we allow front running and summary Gin as well? And maybe the last one because these are rapid auctions. So the whole point here is to enable a marketplace of searchers who can all compete to find these opportunities.
00:14:32.238 - 00:15:01.050, Speaker A: But if it only lasts 500 milliseconds and there's only five transactions, they know there's probably only one mev opportunity. So maybe you want to set the time window. So there's 50 transactions or 100 transactions, and so then you can get more interest in Mev marketplaces out of that, because they're all competing for different opportunities. But for me, the time boost paper sort of inspired this talk. I thought it was really interesting, and I've been just thinking a lot about it. So it's not really my work at all. It's just whatever I've gathered from breeding.
00:15:01.050 - 00:15:07.050, Speaker A: So I hope you enjoyed the talk anyway. Gigi GM GM. Thank you, Patrick.
