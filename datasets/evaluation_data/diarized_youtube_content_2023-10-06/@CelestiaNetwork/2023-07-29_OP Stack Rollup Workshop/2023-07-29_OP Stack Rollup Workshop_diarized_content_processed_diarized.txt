00:00:00.650 - 00:00:37.510, Speaker A: Thank you for coming. My name is Josh. I'm a solutions engineer at Celestial Labs. I do a lot of documentation maintenance kind of work on new integration like demos and stuff like that. And that's what we're going to do today. So welcome to the op Stack workshop. We recently released an integration with a modified version of the op stack, and this is something that posts call data to Celestia instead of Ethereum while still settling on Ethereum.
00:00:37.510 - 00:01:48.890, Speaker A: I didn't prepare any slides for this. If you want to read more about it, this is all in the docs. It describes in detail exactly what's getting posted, where basically the op batcher is written to Celestia op node reads the data back. An op batcher is basically what's taking all of the l two blocks and batching them up to post to the l one. In this case, we're going to be running a local devnet that is using a local Celestia da and using a local l one to mock Ethereum. And what we're going to do after spinning this all up is we're going to deploy a smart contract to it to see that we can use that Ethereum virtual machine with the op stack to actually interact with smart contract. So I guess if you really wanted to interact with this testnet, the easiest thing to do is to go to the bubs testnet.
00:01:48.890 - 00:02:40.830, Speaker A: This is a testnet that we're running with Caldera and it is built with our modified op stack. And this is something that we made so that developers who are friendly with the EVM can just build with the evm. I guess I come from more of an Ethereum background, and this is something that's really exciting to me. I love a lot of the front end tooling that exists out there, so it's really exciting to be able to use that again. I'm not going to bore you with the text. If you really want to read it, I guess, please refer to the docs. The way that you could build on this testnet is by going and using one of the RPC URLs to actually interact with the chain.
00:02:40.830 - 00:03:39.170, Speaker A: And then there's also a faucet on there so you can fund your wallet as well as a block explorer. We're not going to do this right now, but I do have a demo of how to deploy your own smart contract to the testnet, and then also how to deploy a DAP on the testnet. There's also the option to use something called third web. Actually, I don't want to sign that right now, I guess don't sign messages blindly. So you can see on this third web dashboard, this third web is basically a tool that allows you to deploy contracts without actually having to write the whole contract. Their contracts are audited. And just based off of that, if you're going to do like an NFT collection, it's probably a lot easier to just use something that's already audited and written rather than reinventing the wheel.
00:03:39.170 - 00:04:16.462, Speaker A: And on here you can also see the chain id, the RPC, the block height, and then we're going to get the latency to the actual RPC endpoint that we're using. So the reason I'm showing you this is I have a few demos here. The first one is going to be the GM portal. We're on the wrong network right now. I'm going to go ahead and switch to the bubs testnet and. Nice. So this is a little dap that I built.
00:04:16.462 - 00:04:49.602, Speaker A: It should be displaying all of the posts on the wall, but there's no pagination. So they're living on the contract. And basically it's been, I didn't expect 12,000 people to post on this, let alone like 500 even. This is the same thing that happened on the previous version. Someone bought it and it hit like 250,000. So if you're like a front end developer in here and you want to add pagination to this, there's an open issue, but I just haven't had time to do it. But this is like the first way to interact with the Bubs testnet.
00:04:49.602 - 00:05:39.930, Speaker A: We're going to get a pop up in our wallet there to send that transaction. Since we're not going to see it come through on the front end, we can copy the transaction id and then go to explorer, Bubstestnet.com, put in that transaction hash. And we're going to see that we made a contract call. We're not going to see the actual information about that on here just because the contract is not verified. But we can see that there is a call to make a GM that we called that and the data was GM. So we can also go and see the contract that we interacted with and we can see that there's quite a few internal transactions.
00:05:39.930 - 00:06:35.180, Speaker A: Looks like a few other people were posting on this a few hours ago. But another example demo that we have running on there is a little marketplace that I built with third web. So this is using the marketplace v three contract and their marketplace template. And I've basically added a collection that I made with a Python script. So if you want to go ahead and mint an NFT that's technically on Celestia, this is the place to do it. The URL is buildmarket XYZ, and that can be found in the demos page in the docs too. I think I have a limit of one on this, so I'm actually going to see that the claim limit is reached for me.
00:06:35.180 - 00:07:20.950, Speaker A: But if I were to switch wallets or have a different account, it would work. But I guess I shouldn't encourage Sybil attacks. So taking a step back, I'm going to go and we're going to set up our own op stack locally. If you start running into a bunch of issues with things downloading, we can go ahead and just walk through it on my end because I already have everything cloned. But what we're going to need to do is open a terminal. I'm using something called warp. You can also use terminal or like iterm or whatever you have installed.
00:07:20.950 - 00:08:00.950, Speaker A: The first thing we'll want to do is set up our environment. If you're on Mac, you just need to do the things under the Mac tabs. If you don't have homebrew already, you'll want to install homebrew and then that's going to allow you to add some dependencies that we'll use later on. You also need to install goling. If you were in the light node workshop a little bit ago, you already have this installed. I also have Wget installed and JQ installed as well. So I'm good to go on the dependencies on this.
00:08:00.950 - 00:08:33.934, Speaker A: So I will get into it. The next thing we need to do is clone the repository. I'm going to actually go ahead and just wipe the one that I have there so we can do a real demo. I'm going to check out to version that is linked with so this is our version 0.1.1. Optimism. It was on version 1.0.6 when we made this.
00:08:33.934 - 00:09:18.750, Speaker A: And celestial node is on v zero point 11.0 r c eight. So that's release candidate eight for version eleven. And the next thing we need to do is set up ASDF. This is going to help us manage our first I'm going to clone that. The next thing we need to do is if you don't have NPM and yarn installed already, you're going to need to use ASDF or some other NPM like our other package manager to install the right versions. So now that I've cloned and checked out on optimism, I'm going to go ahead and do this in another tab.
00:09:18.750 - 00:09:51.560, Speaker A: Oh no. Okay, so I already have ASDF installed. I'm going to go ahead and speed through that. And we're going to be using node JS version 16.16.0. And I have NVM on here, so I'm going to set my version of NPM. I guess. Honestly, if you're in here and you don't have node or yarn, it's probably going to take a long time to install the dependencies and build everything.
00:09:51.560 - 00:10:27.970, Speaker A: But the docs should work pretty perfectly if you try this on your own. And if they don't, please submit a ticket or reach out to us on discord. So I'm going to just double check. I do have NPM already. You can see the version, the versions in the optimism repo and I already have Python installed, so that's good to go. I already have foundry installed, so that's good to go. I also have yarn and Docker compose.
00:10:27.970 - 00:11:32.770, Speaker A: These are all the pieces that you need to build optimism. It's kind of specific to the requirements for optimism, unfortunately, and there's a lot of dependencies. But once you have all that installed and you have Docker running to make sure that's on, we can actually build the devnet. So the way to do that is to change into the optimism as opposed to the local development environment dependencies that we had on the list, like in the last few steps. So that's just for our computer. But then we need to actually download a bunch of definitions and dependencies for typescript packages in this project. It's kind of finicky on macs, so I honestly expect some people to run into issues.
00:11:32.770 - 00:13:30.072, Speaker A: Still, I haven't tested this on something older than an m one chip, so there might be differences in different versions, but we can see that everything was installed and we're good to go. So the next thing to do is to run makebuild ts and this is going to build the whole project. What this is doing is basically compiling everything so that we can run the devnet. This is going to take a little bit more time, should take like three minutes max. In the meantime, I'm going to clone, I'm going to clone not the Astria dev cluster, but the GM portal. And that is a front end and smart contract, like a mono repo with a front end and smart contracts to deploy a GM portal, which is basically the thing that I was looking at earlier. And if we want to do that, we can CD.
00:13:30.072 - 00:14:08.532, Speaker A: So change directories into that folder. We're going to go ahead and check back on this typescript build and we can see that everything is going as expected. We'll see some logs here. We can see hard hat is compiling, which is like a solidity contract tool. And then we're also still running some checks on the rest of them. I'm going to go ahead and wait for the GM portal, just so I don't get too distracted with it. This should be finishing up in a second.
00:14:08.532 - 00:14:40.790, Speaker A: The next thing we're going to need to do is set some environment variables. This is just so that optimism knows where the l two address is and also where the sequencer batch inbox is. And unfortunately, I just need to wait for this to finish. Are there any questions right now? Yeah, happy to answer. What's up? That's a good question. I couldn't tell you exactly. I can jump in the code and actually look for that itself.
00:14:40.790 - 00:15:57.170, Speaker A: That's the wrong repo. It's used as an environment variable and for some reason I think we have it hard coded, but it doesn't. Yeah, so this is used in the roll up config and that's basically, it's something that helps the batcher, I guess, the inbox for the batcher, it might be where the l two blocks go, and then they get batched up by the batcher and posted to Celestia and Ethereum like the l one. In this case, I didn't build the integration, so apologies there, but we can also give it a shot here. Why not? Oh wow. Okay, so it knows more than I thought it did about optimism. So it's a smart contract on the l one.
00:15:57.170 - 00:16:40.220, Speaker A: And the sequencer uses the batch inbox to roll up all of those transactions and everything and then post it to the l one. That's really cool that that worked, by the way. I tried to do it for the light node and I didn't have windows in the docs for Docker, so it was like, I don't know how to run it on windows. So now that we have skipping ahead a little or taking a step back, I'm going to go ahead and export those environment variables. I'm then going to run make Devnet up. And this is going to start up. If you've ever used like truffle or hard hat, you can really easily spin up your own layer one, like Ethereum on your machine.
00:16:40.220 - 00:17:18.776, Speaker A: What this is going to do is set up a big docker setup with the layer one, layer two, which is the thing that we are really focused on. It's also going to spin up a data availability layer. It's going to be a mock devnet. So a local Celestia devnet, managed or maintained by the roll kit team, and also the sequencer, which is op node. And that's the thing that's going to be reading the data back from Celestia. Also we have a batch submitter that's going to be posting to Celestia, and then we have the op proposer that's posting state routes to Ethereum. So things are still settling on the l one.
00:17:18.776 - 00:17:53.670, Speaker A: At the end of the day, I didn't run it. So we're going to run make Devnet up and we're going to see a lot of logs. Honestly, we'll just go ahead and keep an eye on them so we know what it looks like on a successful run. I guess. Again, I'll pause and see if there's any questions. I might not know the answer, but the bot might. So nothing is off limits.
00:17:59.050 - 00:18:04.438, Speaker B: Demos to companies and things. What sort of companies?
00:18:04.524 - 00:18:07.286, Speaker C: What sort of people are you doing demos for?
00:18:07.468 - 00:18:08.920, Speaker B: Who's interested in.
00:18:10.810 - 00:19:16.042, Speaker A: I guess my demos might not be the greatest example. Like I made a, the GM portal is a contract that doesn't have a limit on how many times a single address can post to it. So like, it got spammed. That's not really a good use case, but I think where this becomes really useful is what's up, Diego? It becomes really useful where, for example, Curio is using this version of op stack to run a gaming roll up. So the ideal use case for this is someone who wants to have a lot of execution environment space, more or less that's isolated from everyone else, so they can run a game or run a payments platform or something like that, or a messaging service, like actual text messaging or something like that would go through chain. As far as the demos go, like the demos that I built, it's just a message wall and then like a marketplace. But those are both the only thing that's happening on that network.
00:19:16.042 - 00:20:05.120, Speaker A: So you shouldn't really run into any lag on that end of things. Does that help? I feel like the demos that I've built aren't the greatest example, but the things that some of our partners are building are really the bread and butter of why we have this. Yeah. Diego Curio Caldera is running a testnet. The manta is using the op stack modification as like some of those, they really want high throughput and a lot of scale for the execution environment. Those are the important ones. It is still downloading some dependencies in go, so we're just going to wait it out.
00:20:05.120 - 00:20:08.580, Speaker A: Any other questions right now?
00:20:16.760 - 00:20:19.300, Speaker C: Are they still running EVM based chains?
00:20:20.840 - 00:21:22.920, Speaker A: Yeah, so the ones that I mentioned are all op stack EVM. We do have like a Cosmos SDK EVM that we're kind of working on with another team. Well, we're modifying it to be able to be used with rollkit, and that would be a Cosmos SDK version of the EVM, similar to Ethermint, which is like originally what Evmos's EVM was called. But those are going to be a little bit different in architecture. I don't think you could really post state routes to Ethereum as easily by using Cosmos SDK. So this op stack, like jailbreak or modification, I forget what we called it exactly. It's really meant to cater to the EVM dEvs because there's a lot out there, and I think in terms of tooling and accessibility, it's probably a little bit easier to work with than Cosmos SDK.
00:21:22.920 - 00:22:29.090, Speaker A: I think one of the cool things about this, though, is that I'm also confused why it's stuck on this, but this happens. The other cool part about it is we can have an EVM that is basically actually the EVM running. We also have the option to use like a Cosmos SDK version of the EVM. So depending on who the developer is or what the actual use case is, I think that's like those two existing on their own is a good example of what Celestia can be used for. There's also teams that are doing things like Solano Vm and Movevm and stuff like that. So in terms of why build on Celestia, the goal is to allow anyone to actually build whatever. We're kind of using that as the new slogan, but we really want people to be able to build whatever and not constrain people to a certain tribe, even if the tribe is great.
00:22:29.090 - 00:23:21.170, Speaker A: The more tribes there are, the more isolated things get, and the less interconnected all of this is. And I'm like quoting Mustafa from this, but from his fireside chat yesterday, the more value that each one of these new L ones builds and then extracts is detrimental to the entire ecosystem. So most of the Alt L ones probably won't last in the long term. We've already seen some of them that have crashed, and basically those people have just sucked out the value from the whole entire ecosystem. And that's not really a positive sum game. It's pretty much zero sum. So that's kind of like little ramblings on things still building.
00:23:21.170 - 00:24:11.660, Speaker A: Ah. In the meantime I'm going to go back to the docs and get a command ready to view the logs there. This is expected considering we're on conference Wifi and there's probably a few people here. Now in order to stop the devnet, you can run make Devnet down. And then if you want to start all over, you can do make Devnet clean. That'll clear out the old config and the old chain history. If you want to view the containers, you can do Docker Ps and it will show you all the containers that are running right now.
00:24:11.660 - 00:25:08.686, Speaker A: Obviously not. Obviously. Sorry, we're not going to have anything because there's nothing running once this is all spun up. If you want to catch the latest block from the l one, you can use cast block latest with the RPC URL flag to do that. And if you wanted to do this for the l two as well, you can change it to 9545. Another thing we can do is read the transaction call data from the l one and then we can find that data on Celestia. I guess the next thing you can do with this, after you have built, after you've ran the make build ts.
00:25:08.686 - 00:25:33.020, Speaker A: So built the typescript dependencies. You can actually also run this on a Celestia like Devnet or Testnet. And we're going to be using. So if we're using a light node, this is like a more beta integration. And I actually think I need to edit this a little bit. It should work with mocha as well right now. And we're going to be.
00:25:33.020 - 00:26:11.506, Speaker A: I actually think this is old. Don't need to worry about this. What we can do with a light node, we're going to sync a light node on our own so that we can submit and retrieve blobs. Because if the node is not synced and not funded, we won't be able to retrieve the latest blobs because we haven't sampled the entire chain. And if it hasn't been synced, I have a note here, you'll run into errors and it'll look like there's something wrong, but it's actually just a syncing problem. Yay. Okay, let's get back to here.
00:26:11.506 - 00:27:16.268, Speaker A: So something happened on the build, and if I'm going to clean that real quick and just try it again, because it looks like it was a networking issue. It worked on my computer part of the workshop where it doesn't actually work. So yeah, so we're going through the little testnet page. The way that you set this up is the same way that you set up the devnet, except the make command is a little bit different. It'll be testnet up and after you have your node synced, you actually stop the node and it's going to use your local node store to post data to Celestia, stopping it and cleaning the testnet. We're going to work the same way there. We're going to go back to the optimism category.
00:27:16.268 - 00:28:20.010, Speaker A: And in the meantime I'm going to go ahead and deploy a GM portal dap real quick. We'll come back to that. We're going to use the Bubs testnet for now. So I'm going to CD into the front end and then I'm going to run yarn and yarn dev. And this is yarn is going to install dependencies. Yarn Dev is going to actually start up my front end and then I need to make a burner wallet. So I guess the easiest way to do this is we're going to set up a new account.
00:28:20.010 - 00:29:40.630, Speaker A: The UI changed and it actually doesn't look terrible, but it's kind of confusing. Anyone use this recently? What the heck? The heck? All right, there we go. So don't do this at home or don't do this on a live stream. Rather. I'm going to go ahead and pull a private key from this wallet. I'm going to also open a new window. So jumping around a little bit, I'm going to export my private key from that burner wallet that I just made.
00:29:40.630 - 00:30:31.976, Speaker A: Where did it go? No go. Like the safe way to do that would actually be to set it as an environment variable, like in a EMV file. But for the sake of demo, we're just going to do this real quick. We're also going to export the Bubs RPC URL. That's interesting. And then we're going to open it in this other second window that we have. We're going to go into the contracts folder and actually have the command ready right here to deploy the GM portal contract to the RPC URL that we just set above with the private key that we have.
00:30:31.976 - 00:31:22.274, Speaker A: The issue here is that I don't have any funds in there, so I'm going to go ahead and send some from my other wallet. Just go with the one to be safe. This is actually not worth nothing. It's just confused. So that transaction is going through. If we want, we can actually. So if we want to actually see that transaction on the block explorer.
00:31:22.274 - 00:32:09.190, Speaker A: We can go ahead and click that and we're going to see it on the Bubs Explorer. This is built with block scout by Caldera and the next thing we can do is deploy the contract now that we have some funds. So the compiler run was successful, we're using forge. We can see that we set up an EVM. We have some logs saying that the contract's talking to us saying GM and it's on Bub's testnet. We then can pull the contract address and we're going to go ahead and interact with that first through this command line and then we'll go ahead and interact with it on the front end. So export contract address as the one that returned above.
00:32:09.190 - 00:32:52.950, Speaker A: I'm going to then send a GM. I'm going to customize it a little bit just so you know it's real. We're going to say GM from modular summit 2023. All right, so now we're making a call to the contract that we deployed on our EVM. That is a roll up running on top of a Celestia devnet and we're interacting with that. We're going to get a response here in a second and we can see the transaction hash a bunch of information about the actual call itself, the logs gas used. If you have been an Ethereum dev in the past or ever played around with this, this should look familiar and hopefully is a little refreshing.
00:32:52.950 - 00:34:08.730, Speaker A: The next thing we can do is use get all GMs call to retrieve the actual data from them. It's going to be in hex and we see that it just say GM from Paris. We're also going to see that show up on the contract once we start it on the front end. So in order to update the front end, we need to update the ABI. This is actually going to be the same right now as it was when I made it, so I don't need to do that. If we go to localhost 5173 though, we're going to see that we can connect our wallet. Oh wait, oops.
00:34:08.730 - 00:35:16.230, Speaker A: I'm going to go back here and pull that contract address again. I'm going to put it into this. I do need to change some config in main here. I'm going to change the RPC URL to HTTP localhost 9545. I'm going to also comment out the websockets there and we can go ahead and get total gms again. We can see that there's now two. So once we get this front end working correctly, which it should be right in a second.
00:35:16.230 - 00:35:41.680, Speaker A: We're going to go ahead and log in with that burner we made. Oh, nice. So I think I left a piece out of the tutorial. Yeah. So you need to change the RPC in main TSX. This is in the SRC folder. You just need to change that to localhost like this.
00:35:41.680 - 00:36:24.810, Speaker A: And the symbol and name and chain id is all the same. So you don't need to worry about that. Websockets are not going to work right now as far as I know, and that doesn't really matter. We have the GM portal running over here. We can see the posts that we made a little bit ago. They're definitely from the address that I, the address that I made as the burner for this. And if we want, we can also interact with the contract from the front end.
00:36:24.810 - 00:36:58.680, Speaker A: So this is going to prompt a transaction in our wallet again. We can hit confirm and look at that. It should post in a second here. Any questions? That's fine. Thank you for coming. We'll go ahead and refresh this again and we can see that that contract call went through. We posted on the front end and if we really want to believe it's real, we can see that there are now three posts on there.
00:36:58.680 - 00:37:32.048, Speaker A: This is. But I think it's just a networking issue like conference wifi problem. Thank you for coming. That was it. I'm going to go ahead and try it for one more. Yeah.
00:37:32.134 - 00:37:42.004, Speaker C: So currently if you deploy an optimism stack l two, you need to pay like the sequencer has to pay a bunch of fees to submit to the.
00:37:42.122 - 00:37:54.568, Speaker A: Yeah. So you would still be posting state routes as far as I know. Right. To Ethereum. And then you would be. No.
00:37:54.654 - 00:38:47.670, Speaker B: So we post a very small, almost like. And we post the height of the block, of the ocean block as to the sequencers job in the same way that currently top off sequencer for them to work, they would have to top off the sequencer software with token so that they put. But we're also working on different ways in which we can abstract all that away from developers. Let them pay with ease whenever we want and gets routed to.
00:38:59.280 - 00:39:16.390, Speaker C: My second question is what type of editors are you looking to use? Celestial? Is it like general purpose, like ultimate martial? Or are you thinking maybe there are some Apple Cosmo styles, maybe there'll be like specific case EVM chains or anything?
00:39:17.960 - 00:39:19.252, Speaker A: Both really.
00:39:19.306 - 00:39:58.800, Speaker B: Anything. Right. In terms of income tools, it's honestly like anybody that just wants to have cheaper va cost. But obviously the land look at something like a federal versus sovereign. Those are different trust assumptions, different bottlings, et cetera.
00:40:06.480 - 00:41:03.330, Speaker A: I'm just trying to see if I can get this to build. Because you think that's why? Yeah, it was like a certain go package of some sort. We'll see. I definitely will give up on this after this one, though. If you're using Linux, like if you're watching the recording of this or you want to go home and use Linux, I know for a fact that you can copy and paste this whole thing and it'll work. So if that's any silver lining. But I think we're going to have the same issue again.
00:41:03.330 - 00:41:20.880, Speaker A: Any questions? Any last questions? I think I need to close this down a second. No. Thank you for coming. Bye.
