00:00:02.250 - 00:00:36.438, Speaker A: Okay, so for context, Eclipse builds roll ups as a service. So this topic might be confusing for some folks and in this presentation. So I'm Neil, I'm the founder, and what I'm going to explain is one, different economic or technical considerations for app specific roll ups. Gonna talk about the roll up as a service landscape. And yeah, let's get right into it. All right, so there's been a lot of discussions about Ras or roll ups as a service. And what I want to do is I want to first define what is a roll up as a service.
00:00:36.438 - 00:01:23.926, Speaker A: And a roll up as a service is something that deploys roll up frameworks and that requires understanding. What is a roll up framework? A roll up framework is something that implements execution and settlement related capabilities for a roll up. So this is something like Op stack or Arbitrum orbit. You deploy one of these frameworks yourself, or you can use a Ras and then you can start having your own chain for your own application. So this is a market segmentation in a Masari Think piece, which I actually signed off on at the time. So this is partly my own fault for not thinking it through fully. But what I think is more useful for this kind of segmentation is to think about what parts of this stack are cooperative with each other, which parts are competitive, and I think if that's the right way to frame it.
00:01:23.926 - 00:01:53.546, Speaker A: So the way that they framed it here is they have SDKs, which I'd probably call Frameworks instead, since they're not all SDKs. You have shared sequencers and you have no code deployment. And I'm going to talk about how I'd reframe this a little bit. So what is a sequencer? Sequencer? I mean, we just had a panel on sequencers right now, but it's something that just is ordering. Ultimately with that ordering, you have to compute the actual state transition. So that's execution. So roll ups as a service as they exist right now, this is maybe a little bit too narrow.
00:01:53.546 - 00:02:18.578, Speaker A: I called it isolated Sequencers as a service. Usually it's also deploying the execution related capabilities, but that's essentially what roll ups of the service as they exist right now are. They might do some additional support consulting and some stuff which I added as a footnote. I'll talk about that a little bit more. But what I want to describe is basically what is a business model. So right now it looks like some amount of fixed fee that might be a fixed fee. I'll charge there's some variable components.
00:02:18.578 - 00:02:55.586, Speaker A: So it's a percentage of the sequencer fee, which you have to actually define that a little bit more clearly because that could be a percentage of the congestion fee or the execution fee for a roll up. That could be just a premium that you add to every single transaction. But this is kind of what I want to address and I think that this is something that every roll up as a service should have a view on. But the first thing is that the roll up framework to some degree actually competes with a roll up as a service and that's something that I'm going to cover in the next couple of slides. So I'm not going to talk about it too much right now. The other things that roll ups as a service have to think about is that given that they're deploying isolated sequencers as a service, there aren't actually a lot of network effects. There aren't really economy ease of scale.
00:02:55.586 - 00:03:32.000, Speaker A: For every single isolated sequencer, for each additional roll up that you deploy, the service doesn't really get better or it doesn't get cheaper. Unlike a shared sequencer, for example, for every additional roll up now you have additional composition between those roll ups or for certain types of services like DA, the more folks that are using a single DA layer then there's more fees coming into the system because blocks get full. Maybe it's a fee market, it goes up that incentivizes more validators to run for like Celestia or something. So that's very synergistic. Whereas for a roll up as a service that kind of network effect doesn't naturally exist alone. There might not even be a token. So that's something to keep in.
00:03:32.000 - 00:04:00.786, Speaker A: So I think this is the right way that I want to frame that discussion of how a roll up framework could be competitive with a roll up as a service. And the way I want to put it is by thinking about the functions of a modular blockchain. So we're here at modular Summit. Everyone should be aware of this stuff, but the functions as Celestia puts in their docs, we have execution. And I threw a bunch of stuff in there. I put sequencing the actual execution of the transactions and computing the state transition function. I put proving for ZK rollups.
00:04:00.786 - 00:04:48.280, Speaker A: The second part, which John Char would say doesn't even exist, is settlement. So that's figuring out what's the canonical chain or what's the correct state of this roll up. And then there's DA, which hopefully everyone's aware of here. But let's say you're an optimistic roll up, you're a verifier. You need to know what were those transactions that were run in order to even call for a fall proof or even on any L1, you need data availability just so that all the full nodes can know what transactions were run, they can keep in sync with the network. So another way of thinking about these functions of a blockchain is these are the possible ways you can try to accrue value or the places where you can try to capture value, whether you're a roll up framework or some other type of part of the blockchain stack. Now I want to go a little bit more deeply into each of these three areas and think about where could a roll up framework feasibly capture value.
00:04:48.280 - 00:05:18.434, Speaker A: So settlement to me is not a viable place to capture value because one, we're not even sure that it exists, but two, settlement doesn't make very much money. So for optimus and main net, and this is actually all about optimistic roll ups, partly because that's what we have deployed for Eclipse right now. So that's what I think about the most. But you can probably make similar arguments for ZK roll ups. Settlement costs might be a little bit higher, but even if they're 100 times higher, that's still only like $500 a day. Not a great business to be in for every single chain. Whereas optimus and mainnet, it's optimistic roll up.
00:05:18.434 - 00:05:40.438, Speaker A: So it's just basically posting state routes. And in the happy path, that's just $5 a day. So that's basically zero to me. It should be to everyone else as well. So a competitive settlement layer to Ethereum is going to make even less money because they don't have the security budget of Ethereum to justify why they would charge more. There's less congestion, fewer people would use it. So that's not a great place to play is my point.
00:05:40.438 - 00:06:23.090, Speaker A: And then DA, this would basically be the case where a roll up framework deploys their own competitive DA layer. So this would be like if Arbitrum had a Celestia competitor or something, or if any trust became the primary business model. And my argument here is that's not a very great place for a roll up framework to play either, partly because Celestia already exists and we're all using it. And for DA in particular, there's very good reasons for all the rolloffs to try to use the same DA layer because you're all posting to the same place, the fees go up. Like I was saying before, it's synergistic for everyone to use the same DA layer because more people are providing security for that DA layer. Then I'm saying the only place that's viable is actually execution. And as a result, those fees that come in from the sequencer are basically zero sum.
00:06:23.090 - 00:07:03.182, Speaker A: Like you can charge more, but that just makes you have a less competitive sequencer or less competitive roll up framework or Ras. So between the roll up framework and the and I call it ISATS here, isolated sequencer as a service. Maybe I shouldn't have done that because it's just like additional jargon, but I just put it there for simplicity. And this is a graph on the left side. I want to think through the business model game theory of an Isas compared to a roll up framework. And those numbers might not make sense because Chat GPT generated the graph. But what I want to convey is that I want to start with the isolated sequencer as a service and think about whether it plays nice or doesn't play nice with the roll up frameworks that it's deploying.
00:07:03.182 - 00:07:41.262, Speaker A: And playing nice means that it shares revenue back to the roll up framework and not playing nice means that it tries to capture all the value for itself. And in the case where it shares value, my argument is that they're subject to being undercut. Anyone can choose to not play nice and they're going to win from an economic positioning. And economics is probably the biggest reason why people deploy their own app chain. So I don't think if that's a sustainable configuration, and if the roll up as a service chooses to not play nice, then the roll up frameworks themselves needs to monetize somehow. So the roll up framework likely will deploy their own Ras, similar to what optimism has done with Conduit in my opinion. So that's kind of how I would think this through.
00:07:41.262 - 00:08:24.362, Speaker A: And what I feel is that the stable configuration is for roll up frameworks to have their own roll up as a service, because then they have all the flexibility in business model. They're not forced to share some fixed amount of sequencer fees, they're not getting undercut by someone else, they get all the profit for themselves. So that's kind of my thinking. And then this is just considering a little bit further the case where a roll up as a service competes with a roll up framework themselves. So this is like if someone's deploying a roll up framework that they don't own versus a roll up framework deploying their own reps. And then I'm just comparing these two cases where my argument is that the roll up framework has more flexibility, they likely already have a liquid token, they can subsidize fixed costs. So this is not a fatal thing.
00:08:24.362 - 00:09:06.474, Speaker A: It's more just something that every roll up as a service should have an opinion on this and they should establish their positioning, think about what's their business model and how do they expect to sustainably capture value. And the reason why it's really important is because developers care, because developers don't want to build on a stack that they think won't exist in like one or two years, and that it's probably going to happen. There's no sustainable business model. So this is how I'd reframe the Masari framing from before. And I basically renamed roll ups as a service to isolated sequencers. And what this really shows is that you can only have an isolated sequencer or a shared sequencer, but you can't really have both. And then similarly I renamed rollups SDKs to roll up frameworks just because I like that better.
00:09:06.474 - 00:09:46.422, Speaker A: It's a little bit more general. And then if you're in the rollup framework category, you should probably find yourself also in isolated sequencers or shared sequencers, similar to how Opstack or optimism has the super chain that's likely going to manifest as a shared sequencer. All right, so this is like an economic thing and this slide is a little bit dense, so I won't go through all the specific numbers. But what I wanted to look at is let's say you ran an op Stack chain. I use Op Stack because it's just an open source framework. So I deployed it and it costs about one ETH to deploy the smart contracts. I consider like roughly zero, just because over a long enough it's a one time cost.
00:09:46.422 - 00:10:16.830, Speaker A: So if you're running a roll up for years and years or something, it gets amortized. So the recurring costs are more interesting to me. And for a lot of optimistic rollups, they're still posting to the DA layer even if no transactions are run. That's because the sequencer is allowed to do some additional stuff. So that's half an ETH a day of just overhead cost, which gets amortized over the number of transactions, and that brings it down. And then there's some variable cost, and that's the biggest component for all roll ups. And Sanjay at Electric actually wrote like a great piece on the cost breakdown for a given transaction on a roll up.
00:10:16.830 - 00:10:46.742, Speaker A: But the DA cost is the biggest one, so I'm not going to make you do the math, but it ends up being about $0.15 on a good day. This is assuming like 25 gray gas price and then assuming $2,000 per ETH. But that's basically like the cost that a roll up transaction can never get lower than that if it's deployed to Ethereum itself. So this is considering some of the other things that could potentially impact this. Like after EIP 48, 44, maybe the cost goes down by like ten times or something. That's all speculation because we'll have to wait until it's mainnet.
00:10:46.742 - 00:11:31.306, Speaker A: Similarly, we don't really know the Celestia main net cost because once that's up we'll have to see similarly with Eigenda. But my point is that just look at that variable cost and you should think about what applications make sense or don't make sense. Given that, and I think an obvious one, for example, a game would never make sense, like a fully on chain game couldn't make sense on the Ethereum l one as a roll up because fifteen cents per transaction is likely prohibitive unless somehow the players are making money off of every transaction. But if it's fully on chain, every transaction is likely not profitable for them. So that just seems unlikely to me, whereas a DAC could make a lot more sense. So having a variety of DA options is really critical to enabling things like consumer apps. Another way of thinking about this is what does make sense.
00:11:31.306 - 00:12:07.076, Speaker A: That's probably like DFI people don't really care about paying ten bips or something like that on a big DFI trade. So this is probably reasonable given the price propensity or the marginal propensity to spend for DFI users on Ethereum. A lot of them would make sense to be on their own roll up given that they're used to paying such high fees. It's a strictly better solution for those DeFi apps. And then I just want to think about most applications. Do they have that transaction volume to justify amortizing or to feasibly amortize the fixed cost associated with running a roll up. And the answer for most apps is probably no.
00:12:07.076 - 00:12:31.324, Speaker A: NFT projects in particular probably doesn't make sense to be on their own chain. Small DeFi apps probably don't have enough volume. I'm not saying this to discourage app specific roll ups. I think people can experiment. But we've seen a lot of app specific roll ups on testnet, which would never be viable on mainnet. So I just want to point that out. And then this is like one last consideration that I want to talk about.
00:12:31.324 - 00:12:57.056, Speaker A: And yeah, there are some technical reasons. Like in order to do shared sequencing, it assumes that there's some builder the builder needs to generically support many I'm maybe assuming some knowledge here, but we just had the shared sequencer panel. But builders need to be able to execute for base. They have to run a full node for all of these different chains. So that implies some sort of interface for execution. For settlement, you need to have some restrictions on how execution can occur. So those are some reasons.
00:12:57.056 - 00:13:50.792, Speaker A: But the main reason to constrain a customizable roll up is really just to better motivate the use case. Because if you look at Cosmos SDK, for example, this might offend some folks in the audience, but I never really felt like there was a plethora or diversity of use cases or implementations for Cosmos SDK. If you look at Terra, for example, without the stablecoin, it was just a regular Cosmos SDK chain. That's how a lot of the chains look at this point. So what I think makes a lot more sense is sector specific architectures, such as a DeFi specific architecture with extra short block times that might impose an additional constraint, such as the sequencer must now be centralized in order to support that short block time. Or maybe for games, for example, like we were talking about earlier, it might need centralized DA or a DAC or something like that. So this is an example of a sector specific architecture that we put together for Worlds, which is some polychain backed game fully on chain avenue worlds previously built unreal Engine Five.
00:13:50.792 - 00:14:31.872, Speaker A: So he comes from a traditional gaming background and his view is actually contrary to mine. But his view is that the purpose of the blockchain for the game is to act as a read only interface. Well, for the users it's not read only, but as a game developer, they just write to that blockchain and they make it a public API for anyone to compose on top of, similar to the Steam Items API or to I mean, there's like a bunch of these that people can compose with. But the advantage of being on a blockchain is that it's standardized. So that's how he thinks about it. And as a result, he had these additional constraints, which is, one, he doesn't want the users to know that they're using a blockchain. And that's particularly important because he can use Steam if he abstracts the user or if he abstracts the blockchain from the user.
00:14:31.872 - 00:14:49.592, Speaker A: And Steam is the biggest distribution channel for games. So that's one thing. He doesn't want to build financialization himself such as these play to earn games. He's not like a play to earn guy. And then he also wants to put a bunch of data on chain. And like we talked about before, that can constrain the DA options for him. So as a result, we built this chain for him.
00:14:49.592 - 00:15:15.248, Speaker A: We deployed one of the standard Eclipse chains. We put an EVM on it. I don't know if everyone here is familiar with Neon, they actually recently went mainnet, but it's like a Sputnik EVM. Sputnik VM is a rust implementation of the EVM deployed as a smart contract to the SVM. So this is how they achieved this parallelized EVM higher throughput than any other EVM chain. The settlement layer. The point that's here is basically that a ZK roll up.
00:15:15.248 - 00:15:48.124, Speaker A: It'll never be strictly better than an optimistic roll up. And the reason for that is that there's that additional cost for generating the ZK proof, whereas for an optimistic roll up you're just posting state routes. It's always cheaper to do that. So they kept it as an optimistic roll up and then the DA layer will hopefully Celeste is cheap enough for this to be viable and then otherwise we'll switch them to a DAC. So that's what the world's chain looks like right now and they've been using it pretty heavily. And now I want to talk about what our roll up builder looks like. And this is our self service deployment framework or website for this.
00:15:48.124 - 00:16:05.490, Speaker A: This is a soft launch. We haven't posted this anywhere. So you're getting the first glimpse at it. This is what it looks like. It was actually a video before, but I removed that because I didn't want to risk the video not playing or something. But this is the front page. Can specify the network name, standard configuration options like the VM and things like that.
00:16:05.490 - 00:16:34.700, Speaker A: Specify block times or things that are a little bit more technical. In the future, you might expect this to look like templates or just specifications based on the type of application that you're deploying. Whether it's DeFi or something else, it just tells you what the roll up is going to look like. And this is what the chain looks like. We are giving a one week free trial. So you can heavily slam the chain, you can benchmark it, you can try it out yourself, and then after a week you can actually pay. And it's going to be NFT gated.
00:16:34.700 - 00:17:09.954, Speaker A: So if you scan this QR code and I won't waste everyone's time and stay here too long so you can scan this, you can get an NFT. You'll be on the waitlist, I'll be sure to let everyone off who is here at the modular summit. So I'll get the list later and you can try out this roll up deployment website. So I'll pause for a second. Yeah, of course. Yeah, go for it. And one last thing.
00:17:09.954 - 00:17:45.310, Speaker A: We're doing an accelerator in San Francisco. So this was inspired by modular what was it? Modular fellows, which is actually kind of how Eclipse came about. It was Nick who reached out after Terra D Pegged, and we were just talking about how we could make solana into a rollup. So we wanted to do something kind of similar for Eclipse to motivate the use cases for app specific roll ups. We have some ideas on the types of apps that make sense and we'd want to see in our ecosystem. There's also a few RFPs for things that we need built into the Eclipse core product, so we'll have those out as well. We're putting aside, I think, like 203 hundred grand, something like that.
00:17:45.310 - 00:18:19.046, Speaker A: We'll be funding different projects and we're actually going to host them in our office in SF. So it's an San Francisco based program, but for exceptional projects that are outside of SF, we can actually fly you in. And this is kind of funny, but we have rooms in our office, so we can house you and you'll be living with our team and you can talk with our engineers every yeah, that's kind of the idea. So it's smaller than modular files. This is only five. It might even be as small as three depending on how much we think we can reasonably support. All right.
00:18:19.046 - 00:18:26.980, Speaker A: And that's it. So I think the rest of this is just like appendix stuff, so yeah. All.
