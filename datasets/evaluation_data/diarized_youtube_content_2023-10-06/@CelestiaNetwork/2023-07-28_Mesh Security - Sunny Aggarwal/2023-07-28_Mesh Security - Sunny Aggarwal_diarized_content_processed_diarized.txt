00:00:00.730 - 00:00:01.280, Speaker A: Hello.
00:00:02.130 - 00:00:15.454, Speaker B: I, in fact, will not be talking about mesh security. I'll be talking about some other stuff, but it'll show off a little bit at the end. I think I've just been sending mesh security as the title for all the talks that I haven't come up with a talk for yet. And they're like, oh, yeah, that sounds good.
00:00:15.652 - 00:00:16.942, Speaker A: No, but I'm going to be today.
00:00:16.996 - 00:00:39.500, Speaker B: Thank you guys for coming. My name is Sonny. I'm one of the co founders of a project called Osmosis. And we're going to be talking a little bit about how osmosis will be interacting with the modular ecosystem. So a little bit of background for anyone who's not familiar with what osmosis is. Oh, yeah, that's better. Anyone who's not familiar with what osmosis is.
00:00:39.500 - 00:01:22.818, Speaker B: We are a decks built on the Cosmos SDK. We have liquidity swapping ability. We launched, like, contrary to liquidity, very recently. You can do all sorts of have assets from over 50 different blockchains on the osmosis blockchain. We have over $100 million in liquidity. We have all sorts of pro trading tools, like basically the most advanced developed decks in the cosmos ecosystem. And, yeah, liquidity from all different places, both from within cosmos and outside of cosmos.
00:01:22.818 - 00:01:29.894, Speaker B: Out of all of the assets, like four out of five biggest pools are from non cosmos native chains.
00:01:29.942 - 00:01:30.540, Speaker A: Right.
00:01:31.710 - 00:02:10.770, Speaker B: And along with just the Dex itself, we have this ecosystem of applications really meant to build this full unified defi experience on top. So beyond just your basic spot trading, you have your margin trading. You have your perps, you have your launch pads, you have your fiat on ramps, you have lending protocols. So basically a full integrated DeFi experience, everything. The goal here is you go to binance.com, you have all these trading tools, you have all this things in one unified experience. Osmosis is going to provide that in a decentralized know as by being this liquidity center for the cosmos ecosystem.
00:02:10.770 - 00:02:50.980, Speaker B: We are sort of the center of IBC traffic today. So if you look know, on any metric by users or by IBC traffic by volume, osmosis is sort of the center of that and has found itself as this IBC hub and liquidity hub of the cosmos ecosystem. And so now, very soon, hopefully, we will have a new entrant to the cosmos ecosystem, right? The Celestia blockchain will be launching and as part of the Celestia blockchain launch, the goal of the Celestia blockchain node implementation is to be as simple as possible, right? Obviously, we need this thing to.
00:02:52.710 - 00:02:53.122, Speaker A: With.
00:02:53.176 - 00:03:25.882, Speaker B: Celestia, we're going to have this beginning of all sorts of new modular chains and roll ups building on top of the cosmos ecosystem. And there seems to be this thing about, oh, app chains versus modular. And I think this is some weird dichotomy, because really, the whole point of app chains is this idea of modularity, right? It's saying like, hey, we don't need to put everything into one blockchain. We can break out what you need. Osmosis. We're trying to be a Dex. We can say like, hey, we don't want to deal with bridging.
00:03:25.882 - 00:03:48.370, Speaker B: We are going to completely outsource that. That's not our problem. We're going to go find someone else to work with. We're going to go work with the Axlar team or the wormhole team, right? We're going to go outsource bridging completely. This is part of the modular idea, right? Or if it comes to things like data availability or if we need to base money, it's like, okay, we're not building that. We're going to outsource this. It's all modular.
00:03:48.370 - 00:04:42.934, Speaker B: So what I was saying was, yeah, the goal of the celestial blockchain is to act as this app chain and to be as simple as possible, because obviously, we got to run it on our kindles and we got to keep the nodes as light as possible. And because of that, the celestia code base is actually very minimalistic. You'll see that it actually imports very few modules. Ishmael just talked about, how can we avoid adding a general purpose VM or anything to this chain? So the one module that it does have, though, one of the few modules that it does have, obviously, is the IBC module, which is great, right? And so this is this decentralized, this permissionless bridging protocol that allows you to send tokens, data assets, anything between any IBC enabled blockchain. And so IBC is growing. It is built on the Cosmos SDK. There's other chains as well.
00:04:42.972 - 00:04:43.174, Speaker A: Now.
00:04:43.212 - 00:05:27.666, Speaker B: Now we finally have it on Polkadot. We have it on the Penumbra Andoma stack. So IBC is slowly growing, but with Celesia now and this ecosystem, the modular ecosystem that's being built on top, we have a whole bunch of new frameworks being built, right? You have the op stack now, right? You have rollkit, you have the sovereign SDK, you have eclipse. And it is going to take us time to go and build out IBC for every single one of these, because the goal of IBC is to really build in your bridging protocol at the same security level as your consensus system. It uses light client proofs, and it will take time for us to get, you know, the goal is we want IBC everywhere. And there are people working on this.
00:05:27.688 - 00:05:27.826, Speaker A: Right?
00:05:27.848 - 00:05:58.666, Speaker B: Like polymer is working on adding IBC, like ZKiBC to all of these sort of different stacks, but it'll take us some time to get there. And so right now, how do we do this? We're going to have to rely on other bridges. Right. So the question is, how will all these roll ups and chains and sovereign roll ups and everything on all these different stacks access liquidity, especially TIA liquidity.
00:05:58.698 - 00:05:58.846, Speaker A: Right.
00:05:58.868 - 00:06:24.226, Speaker B: Because they need that TIA to pay for their data availability. How are they going to get that TIA to there? Well, this is where osmosis comes in. So osmosis is really expanding on its bridging support. So obviously we support IBC today. We work very closely with the Axlar team. Wormhole just announced yesterday at Osmocon that they're launching worm chain, which is going to be a Cosmos SDK based chain. And then the important one here is hyperlane.
00:06:24.258 - 00:06:24.454, Speaker A: Right?
00:06:24.492 - 00:07:34.794, Speaker B: So hyperlane seems poised to be the first bridge that's available to a lot of these different stacks because of the way that it's been designed as this very modular bridging system where you can choose what kind of security system you want. And so we are working on adding hyperlane to the osmosis chain because of its app defined security model. We can write it as a cosmosm contract. And with this, we're going to be able to use osmosis as the connector between Hyperlane and IBC. So now you have this flow where finally you can say, hey, how do you get Tia from Celestia onto something like eclipse or onto an eclipse based roll up? Well, you can IBC from Celestia to osmosis and then hyperlane from osmosis to. And the idea here is that we're going to use hyperlane to connect to all of these sort of different roll ups and get TIa onto them. Now, well, what do you do when you're at the center point of transportation routes?
00:07:34.842 - 00:07:35.198, Speaker A: Right.
00:07:35.284 - 00:07:36.702, Speaker B: Well, you build a trading center.
00:07:36.756 - 00:07:37.358, Speaker A: Right?
00:07:37.524 - 00:07:38.826, Speaker B: You build Constantinople.
00:07:38.858 - 00:07:39.150, Speaker A: Right?
00:07:39.220 - 00:08:15.114, Speaker B: You're at the crossroads. You build a trading center there. And that's what we're building with osmosis. So we want to be the place where we build up as much tia liquidity and liquidity for the entire modular ecosystem and provide these services and product that we've been building for the cosmos ecosystem, but expand just beyond that. And so one of the things that I'm really interested in is, like, protocol owned TIA, because if anyone remembers, a couple of months ago, the arbitrum chain basically came to a halt because some dev account didn't have enough eth in it to pay its data availability and stuff.
00:08:15.152 - 00:08:15.402, Speaker A: Right?
00:08:15.456 - 00:09:02.940, Speaker B: So we should be moving to a world where, no, you shouldn't be relying on some foundation or some dev team to be paying for your submission proofs to your dA, to Celestia, right? You should be actually moving towards a system of protocol owned TL. And so, you know, there's a bunch of different ways that we can do this. So, one, we have this protocol called streamswap, which is basically auction system built on top of the osmosis chain. And I think a lot of the new projects that are launching can do these stream swaps. It gives you this initial distribution, but you can do it for TIa. So that way you have this initial distribution of your token. But now your protocol owns TIA in its community pool or treasury, and it can pay for its own DA without directly from itself.
00:09:02.940 - 00:09:47.266, Speaker B: We also have built this thing for the cosmos ecosystem called fee abstraction. And what fee abstraction is, it's meant for transaction fees. So what you can do is you can take a chain like Stargaze, right? Stargaze is an NFT platform built on cosmos. People can start paying their transaction fees in stars, but they can also pay their transaction fees in any token. They can pay in USDC, they can pay in Osmo, they can pay in bitcoin. And what we've done with this fee abstraction module is stargaze can accept these fees in all these different tokens. But what the chain will do by itself is it will send all the tokens to osmosis, swap them to its own native token, and then send them back to the stargaze chain.
00:09:47.266 - 00:10:16.010, Speaker B: So that way they can be distributed as fees or burnt or whatever they want to do. So this module is available? It's available on our GitHub. You can go to GitHub.com osmosislab fee abstraction. You can import it into your cosmos chain today, and any cosmos chain can start accepting fees in any token. Okay, what's the next step? The next thing that we're going to build with this is da fee abstraction. How do you let all of these roll ups pay? Let's say they don't want their own protocol owned TIa in their treasury.
00:10:16.010 - 00:10:57.706, Speaker B: But what you can instead do is say, hey, a chain like Manta can say, oh, we are going to hold our own native token, Manta, but we need to pay our DA. They can send it to hyperlain it to osmosis, it will automatically swap it to Tia and send it to the celestia chain in order to pay for the DA. And so we are working with some teams to actually build this out in production. Now, another way that beyond just for fee abstraction, with this whole modular idea. A lot of these chains, we work very closely with the Argus team. We can build this idea of outposts where they don't have to build their own Dex infrastructure for their own chain. They can actually provide things like swaps and everything over IBC.
00:10:57.706 - 00:11:39.642, Speaker B: So let's see if this works. This is a demo that we built of the Cosmo swap, which is basically, this is a swap on the Juno chain. You're swapping Juno for Osmo, you make a single transaction on the Juno chain, but what it's doing is it's actually sending the tokens to osmosis, swapping them to Osmo, and then sending them back to the Juno chain. So basically, Juno doesn't need its own native decks. Let's say you have a dao on Juno, or whatever you're trying to do, you can tap into osmosis's far deeper liquidity. And so the Evmos team has also built a similar version, the same similar concept for the EVM. The skip team.
00:11:39.642 - 00:12:30.650, Speaker B: Know, you saw them present a couple like an hour ago about IBC fund. You can basically swap from any chain to any token on any chain to any token on any other chain over IBC. And we'll be working on integrating hyperlane into the system as. Yeah, all through osmosis. Anyways, so these are some of the ways that osmosis is planning on integrating more deeply into the whole modular ecosystem. One of the other things I'm actually really interested in is obviously, I do have to talk about mesh security and how we want to incorporate data availability into mesh security. So the premise of Cosmos, and I think a lot of the module, like the thesis in a lot of the modular ecosystem, is this idea that every chain is the l one for its own internal state and an l two for its foreign state.
00:12:30.720 - 00:12:31.386, Speaker A: Right.
00:12:31.568 - 00:13:14.934, Speaker B: This is sort of the whole idea behind these sovereign roll ups. And so osmosis is the settlement for the Osmo token, but it acts like an execution environment for any axle that is bridged IBC to osmosis. And so as part of IBC today we do these sort of light client proofs where two chains are going along. You send an IBC packet that includes some sort of light client proof. But what we want to do is eventually make know the security model between these chains better than just lite client proofs. We want to start to incorporate things like fraud proofs. And finally now, thanks to things like Rollkit, we actually have fraud proofs for the Cosmos SDK.
00:13:14.934 - 00:14:18.026, Speaker B: Now, the thing is, fraud proofs have this huge time delay to them, right? You have to wait the entire challenge period. And the UX that people have come to expect in cosmos is like very fast bridging, right? You can IBC between two chains in a matter of seconds. And that's sort of one of the things that people really love about it. And so we don't want to build in this fraud proof window into the IBC bridging protocol because it'll just massively deteriorate the UX. But how we can use fraud proofs is in mesh security. So mesh security is this idea of restaking where you can say like, hey, validators are going to give certain guarantees about they're going to be restaking their Osmo. And as part of this, what we've done is the initial version of mesh security is mostly about tendermint fraud proofs, so it'll be able to detect, hey, okay, this validator did something malicious in the consensus protocol.
00:14:18.026 - 00:14:27.966, Speaker B: We're going to slash them. But the way mesh security is implemented is actually as it has this interface called a slasher contract. And you can write arbitrary slasher contracts.
00:14:27.998 - 00:14:28.194, Speaker A: Right.
00:14:28.232 - 00:14:46.962, Speaker B: You can do it for things like, oh, we're going to do mesh security restaking for an oracle protocol. And if one validator's oracle price is too far away from everyone else, that is a valid slashing condition. What we can also do is build roll kit fraud proofs as a slashing condition.
00:14:47.026 - 00:14:47.254, Speaker A: Right.
00:14:47.292 - 00:14:52.598, Speaker B: And so I think that eventually every cosmos chain will start to use roll kit style fraud proofs.
00:14:52.614 - 00:14:52.986, Speaker A: Right.
00:14:53.088 - 00:15:39.734, Speaker B: And so that's great, but then how do you make sure that you have these fraud proofs? The idea is that, okay, we're not going to block IBC bridging on it, but if a byzantine state machine sends an invalid packet in the future, they will be slashable for it. But to make them slashable for it, we need to make sure there's data availability. So this is what we can block for. We can at least block on data availability before accepting IBC packets. So let's say chain two wants to send some assets to chain one, what it can do is generate a transaction. It will post the data onto something like Celestia or any DA system. And the validators of chain one will be running a data availability sampling like clients of Celestia.
00:15:39.734 - 00:16:19.540, Speaker B: So in the validator software, we should be having this DOS like light client built into the software. And then what they will do is when IBC data is sent from chain two to chain one, the validators will basically use a vote extension to approve whether or not that they actually got. They'll validate that the data is available. So they're not going to actually validate the fraud proof itself. They're just going to validate the data is available so that someone in the future can submit a fraud proof to the mesh security contract if needed. Anyway, so thank you guys so much for listening, and I hope you learned a little bit about osmosis and mesh security and what we're building. Thank you.
