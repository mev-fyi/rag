00:00:01.760 - 00:00:27.634, Speaker A: GM. Everybody, welcome to another infinite space bazaar workshop. I'm excited today to invite Justin Biebus from Conclave and Fede from mode. And we're going to learn about programmatic defi for yield hunters. My name is Josh. I'll be your host today. And I'm a Devrel on at Celestial Labs.
00:00:27.634 - 00:00:34.894, Speaker A: So looking forward to learning about what mode is building with Celestia underneath. Fede, you want to introduce yourself?
00:00:35.234 - 00:00:45.690, Speaker B: Yeah, for sure. Thanks, Josh. Hey everyone, my name is Fede. I'm head of Devrel for mode, the ethereum. Layer two. Focus on Defi, part of the super chain. We'll get more into that later.
00:00:45.690 - 00:00:53.174, Speaker B: And today I got an amazing guest. Justine, thank you so much for being here. You can introduce yourself as well.
00:00:53.714 - 00:01:15.694, Speaker C: Yeah. Hi everybody, I'm Justin, founder, CEO of Conclave. Some of you may know us as Byte Masons, but we are the biggest defi engineering firm in the business, building, maintaining more than ten apps across over a dozen networks. And we are big time mode fanboys. So happy to be here and kind of talk to you all.
00:01:17.274 - 00:01:19.214, Speaker A: Awesome, thank you.
00:01:21.104 - 00:01:47.792, Speaker B: Great, I'll take it from here. Josh, thank you very much for the intro. So, programmatic Defi for yield hunters. I'm very bad with names. I came up with this. I kind of loved it because I wanted to do a different workshop that maybe you're used to and used to grow hackathons. As you may know, we have three bounties, ten k for each, so 30k in total.
00:01:47.792 - 00:02:29.316, Speaker B: I think it's the biggest bounties for this hackathon. So why programmatic Defi for yield hunters? You'll understand better as we go through the workshop. The idea of this workshop is that you understand this title. So this is specifically for the infinite space Bazaar. And thank you so much, Celestia, for hosting all of this. I hope every developer out there listening to us and in the future can get something out of this workshop that I think is going to be great. And the core, core value of the things that we'll be seeing today, Justin is going to give you an amazing intro to Defi and actually what it's like developing on Defi, because it gets complicated.
00:02:29.316 - 00:02:56.984, Speaker B: There's a lot of things. So just let's get started. What is mode? A little intro. So mode is Defi L2, part of the super chain. We're really close with optimism, and we want to be the Defi hub we have right now. A lot, a lot of Defi applications and things you can go and play around with. We're an op stack chain, meaning that we're using the op stack, which is a series of technologies optimism has developed for anyone to run their own L2.
00:02:56.984 - 00:03:40.942, Speaker B: That means we're EVM compatible. So if you've deployed on base on optimism, we will have a similar developer experience and it would just be a copy paste in most of the things. Our objective, our mission and our vision is to have a product and ecosystem that growth, that has growth mechanics implemented into the protocol. This means that whoever helps us grow the network, they will grow as well. How are we going to do that and actually do that? Big bold claim. Well, you've seen our point system, which is one thing and one way to incentivize users for developers. We have the dev drop as well, with a series of interesting mechanics.
00:03:40.942 - 00:04:19.912, Speaker B: We also have sequencer fee sharing for people deploying on mode. You can claim part of the fees that go through your smart contract, meaning that you are bringing users to the network. We'll give you part of the fees that we earn, so we share the revenue and we'll have dashboards for developers, for users in the future. So all of these things will just get together to foster a place and ecosystem that will grow with its users and all the people helping build it. That's kind of our idea, our mission, our vision, and we're going to be the Defi hub for the super chain. So let's get started with our objective. Step number one.
00:04:19.912 - 00:04:38.944, Speaker B: And that is deploy a Defi protocol in an optimistic roll up layer three. That settles on mode. Awesome. Let's get started. What? Like what? Right, let's go over again. So deploy a Defi protocol. We're good up to there in an optimistic roll up layer three.
00:04:38.944 - 00:04:56.850, Speaker B: Okay. What is, what is, okay. And that settles a mode. Right. I'm going to try to break this down a little bit so you don't get lost in all of these big words. So conduit, along with mode and Celestia have come up with these layer threes. I know.
00:04:56.850 - 00:05:16.374, Speaker B: I know what you're saying. I know. Do we really even need layer threes? We have a ton of L2s already. So just so you know, these layer threes can be deployed with one click. Right. This means an optimistic roll up. Layer three means using the optimistic roll ups structure.
00:05:16.374 - 00:05:47.096, Speaker B: It's layer three that's on top of mode, that settles on mode and uses celestia as the data availability, uh, as a data availability. Right. So we're using conduit mode and celestia in one layer three. This sounds super complex. But let me show you that this is not as hard as it looks like, right? So we're gonna leave the confusion aside. Please lose the fear. I want you guys to be brave here and come test new things that nobody else knows how to use.
00:05:47.096 - 00:06:14.526, Speaker B: So it's fine if this is confusing to you. This is confusing for almost everyone, even the people that did it. And that's why we've been working with the developer experience to make it super smooth. So right here we have a screenshot of how it is to deploy layer three. I am sorry for the screenshot of the website into the presentation. I know that is a no no, but this is the best way for me to show you. So in this screenshot you have everything you need to deploy your own layer three on mode.
00:06:14.526 - 00:07:00.904, Speaker B: So to deploy your own blockchain, you just have to do a few clicks, change your chain id, and just deploy it. Here you have things, for example, the framework we mentioned, optimistic roll up, right? So you have the op stack or arbitram. In this case, we're going to use the op stack for optimistic roll ups. Then the settlement layer is going to be mode for super cheap fees as well, and to participate in these bounties. And then the data availability is going to be celestial as well to make it ultra cheap as well. On the right side, on what's included, you can see you will get a built in block Explorer, a tracer and a bridge specifically for your layer three. So you will have all the tools in the ecosystem given to you in order to use it.
00:07:00.904 - 00:07:32.176, Speaker B: You will have high availability. Sequencing conduit is managing everything really, really nice and it works really smooth. I know if you go look in the bottom left part to deploy a testnet layer three, which is okay for this hackathon and most of the development will see it costs $50 a month. And I already know what you're saying. You're complaining because you don't want to pay to test things. And I agree with you. You are developers, you are superstars here, so you should be doing it for free.
00:07:32.176 - 00:07:53.152, Speaker B: That's why we have codes for you. So shut up and take our codes, please just come to discord. Come to the, to the mode chat, to the mode chat in discord and I'll give you codes. We don't have a lot, but we have a few for you to go test it for free. I know you guys, it's free to use and you can go and deploy your layer three.
00:07:53.208 - 00:07:58.336, Speaker C: Justin, are you saying we can annoy you directly if we want to deploy a layer three.
00:07:58.520 - 00:08:20.636, Speaker B: Yes, 100%. I'm putting my body, my time, and my resources out there for all of you to come and bother me. So I give you a code. 100%. Yeah, for sure. So this is my layer three. So after you put the code, you deploy your own testnet with your own name and all the cool stuff that you want to configure there.
00:08:20.636 - 00:08:49.668, Speaker B: You have to wait a few minutes, and you'll get your own layer three. This is your dashboard to see and control your layer three. Now, just know that my layer three here is running. And what I want you guys to do right now is take your phone, because I know you're scrolling, Instagram, YouTube, whatever, real TikTok. I don't know what you're doing with your phone right now. Just open the camera, scan the little QR in the bottom left part. That will take you to a notion page, right.
00:08:49.668 - 00:09:44.934, Speaker B: This notion page has a lot of resources of the things that we'll go through today, but especially it has a link to go to a similar place like this, where you will find the RPC URL for my layer three, the Websocket URL, a block explorer for it, and also the bridge, and also all the network information to add it to your wallet. What I want you to do, guys, there's two things. You can deploy your own layer three and test it out with the codes that we have. But if you don't want to do that yet and you are lost and you first want to try the experience of deploying a smart contract on a layer three, you can use mine. So feel free to scan this QR code, go get the information, use the RPC URL and the network information, and deploy a contract on my layer three and just start spamming it. If you want to spam it, spam it. I want to see crazy bots there.
00:09:44.934 - 00:10:28.592, Speaker B: Just test out the developer experience before deploying your own layer three. So you see it's the same as any other EVM compatible chain. So even if you're participating for bounties in this hackathon or not, I would recommend you to just get remix, go to this, scan the QR code, go to this URL, go to my layer three, deploy some contracts and random contract copy paste from remix or whatever into the layer three. Check out the block explorer, check out the bridge as well, and just see the experience of it and come back to us with any question. If anything's not working, please let me know and we'll make sure to improve it. So yeah, that's all you needed to do for the layer three. I'll go back 1 second.
00:10:28.592 - 00:10:47.484, Speaker B: So deploy a Defi protocol in an optimistic roll up. Layer three that settles on mode. You now know how to do it. It's just a few clicks. You have my layer three to test it, so please go ahead and spam it. And I want to see your contracts deployed. I'm going to be paying attention to my dashboard here.
00:10:47.484 - 00:11:27.460, Speaker B: You can also see metrics as well and change a few settings, so it's pretty cool to do. Now, finally, I have my own blockchain without really knowing how to run one without it. Lastly, why is it called programmatic Defi for yield hunters? This weird name. And this is all to introduce you the Defi dev concept. So a little story. Last week I was chatting with Justin and I was like, hey, Justin, I just came up with this new idea, this amazing new thing called the Defi Dev. And Justin told me, yeah, dude, I've been writing about it for the past four years.
00:11:27.460 - 00:12:25.118, Speaker B: So, yeah, yeah, you're right. I was like, okay, that's good, that's awesome. There's people that recognize this defi dev. And what is a defi dev? Or like, what's the profile of it? Or what do I imagine when I say a defi device? Well, it's a developer that knows solidity, they know blockchain, they know web3 in general, but also they're very specified into finance and defi, right? So they need to know about amms, they need to know about LP's liquidity pools, they need to know how to do swaps, what is leapage, they need to know about gas optimization, Mev, all of these standards out there that they need to know and understand of different tokens and how they work. Bonding curves yield, Univ. Two, Univ three, how it changes, how it changes the mechanics, the Ux for users, it's a lot. So I know it is.
00:12:25.118 - 00:13:20.742, Speaker B: It gives a little bit of anxiety not knowing where to go or the next thing to learn. I know it's hard to say, well, should I get deeper into solidity? But then if I learn too much solidity and security, I might as well become an auditor, not a Defi dev. I know all of this about solidity. Why don't I just read the code others are writing? So within all this confusion and all these different concepts that are really outside of solidity, like flash loans and all of this infrastructure and things you need to manage and learn how to do, that's what I call a Defi dev. And I think just in here is like the prime example of the chat defi dev that just managed to learn all of these things and probably still lacking a lot of knowledge in newer things, because a lot of things are moving, a lot of things are new, and it's okay. So just presenting all of these. So you are chill with the layer threes.
00:13:20.742 - 00:13:47.586, Speaker B: I know it's complicated. I know it sounds like a different word, but all of these just takes time, practice, and exposure. And that's why we have just seen today here for the step number three. And he'll be able to tell you much more how to become a Defi dev. What are the things that you can look into? What are interesting resources that you'll have? So right now, I'll go back. I'm sorry for this. On the QR code on the bottom left, scan it.
00:13:47.586 - 00:14:43.512, Speaker B: You have the resources that Justin has shared with me to bring down the anxiety a little bit, understand what's the better path to follow to become a defi device and learn all these complex, all the complex subjects and things that chill. Everyone's on the same page. All of us have had to read about lp's, amms and learn about them. If you want to become a defi dev, you not only need to understand them, but also know how to interact with them with code and with all the tools that are surrounding that and finalizing this long, long introduction to give the word to Justin. I just want to tell everyone here that if you need anything on the development side, any help for layer threes, for l two, s for mode, just come to the chat, to the discord group. We can have a chat there. Even if you're participating on the hackathon or not.
00:14:43.512 - 00:14:51.964, Speaker B: Just reach out, we'll help you. We'll have a chat and. Yeah, that's mostly it. So, Justin, I'll leave you to it.
00:14:52.564 - 00:15:08.204, Speaker C: Heck, yeah. That was a, that was a really good intro. And just making sure, if we use your code to launch an l three, when we raise a billion dollars from a 16 z, do you get a cut of that, or is that all for us?
00:15:08.244 - 00:15:15.024, Speaker B: Oh, oh, yeah. There's. In the, in the little. I'm gonna make you sign the contract. I get 75% off.
00:15:15.404 - 00:15:16.484, Speaker C: Yeah, that's fair.
00:15:16.524 - 00:15:16.724, Speaker B: That.
00:15:16.764 - 00:15:18.068, Speaker C: Just making sure. Okay, great.
00:15:18.116 - 00:15:18.772, Speaker B: Thank you.
00:15:18.908 - 00:16:10.984, Speaker C: Okay, yeah, cool. Really great to talk to you all about defi. In the history of software development, software engineering and finance, I would say there's a history of excellence. And you look at Jane street, you look at jump, you look at all of these high frequency trading firms, and these are some of the, you know, best engineers in the entire world. And I would say DeFi at the top level is no different. And the calculus that goes into creating Defi software and then on top of that, the security and performance considerations will really test your skills. And it's one of the reasons a lot of passionate engineers fall in love.
00:16:10.984 - 00:16:54.498, Speaker C: I'm with going to teach you about DeFi from first principles here, and hopefully, by the end of it, we can have a decent idea of how to be successful in the world of Defi and how to be a good software engineer here. So, let me see if I have the power. Oh, I do. So quick reintroduction. I'm the founder and CEO of Conclave. We run the biggest Defi engineering firm in the business. We've been building for a long, long time, managing billions in TVL, doing this, that the other, but I think maybe most importantly, is our team is really sincerely passionate about pushing decentralized finance forward.
00:16:54.498 - 00:17:29.936, Speaker C: And hopefully I can translate that a little bit in this talk here. So, forgive the clip art. You know, I was mining deep in Google images, making this presentation, and by deep, I mean the first line. So let's get started. So, first, I think an important thing is to figure out maybe what DeFi is before I talk about why it matters. And it's really simple. DeFi is financial systems that are built on the blockchain.
00:17:29.936 - 00:18:10.880, Speaker C: And the power of the blockchain is its determinism, and it's built in security and its capability for building in automations. And the way you do that is weird and out of scope for this discussion. But long story short, we're doing banking and finance on the blockchain. It's very cool. So why does it matter? So, number one is it's uncorrelated. And what does that mean? So when you're an asset manager, you think in terms of correlations, your risk is represented by the correlations in your portfolio. Why does bitcoin matter? Why does ethereum matter? Why does DeFi matter? It matters because it creates an uncorrelated asset.
00:18:10.880 - 00:19:02.918, Speaker C: So we are giving risk managers a tool to be successful in a way that doesn't track the rest of their portfolio. And that means if the S and P 500 explodes, you can generally assume if you hold a fair amount of bitcoin or ethereum or defi positions, you won't necessarily explode along with it. And that's kind of the reason that we do a lot of this stuff. And the reason Defi yields are so cool is because it's not correlated to t bill yields. We might get 60% APR because of funding rates on a centralized exchange, whereas your dad is begging for 5% in his money market account. So the next reason it's cool is it's compoted, it's composability. So when we think about composability and tradfi, we think about fintech giants like plaid or stripe.
00:19:02.918 - 00:19:36.114, Speaker C: And essentially these are duct tape. When you think about PayPal, plaid, stripe, whatever, it's technology companies taking archaic finance systems and taping them together. And it does not work very well, as I'm sure all of us have experienced on several occasions. And if you know about banking infrastructure, a lot of it is built on COBOL. A lot of it was built 60, 70, 80 years ago. And a lot of it is crap, frankly. And DeFi is a total re engineering of finance from the root.
00:19:36.114 - 00:20:37.066, Speaker C: And our team hires from fintech, and you get a fintech engineer learning about DeFi. He's like, oh my gosh, I feel bad for my old company because it truly is inevitable. There is product market fit here, and it's very dope. And next, talking about transparency or auditability. So transparency is really cool, because when you look back at the 2008 financial crisis, and even when you look back at the centralized exchange failures in FTX, et cetera, a lot of these issues happened because banks weren't communicating or people weren't watching what they were doing. So when you think about mortgage backed securities, when you think about dangerous rehypothecation, things of that nature, the blockchain is designed to make it very easy to circumvent issues like that, so totally audible, auditable from tip to tail. And that's why it's quite awesome.
00:20:37.066 - 00:21:46.248, Speaker C: And lastly, automation, which isn't super exciting, of course, but because everything is so deeply composable and ingrained, you can develop automation of operational action or business actions on chain, and do it in a way where one person can do the work of 100 if they're a really good engineer, that's quite dope. And it makes starting up in Defi very fine. Obviously, once you get to a really high level, there's lots of DevOps and lots of pain and agony, as there is with any scaling any software company. But if you're looking to just dive in, I would say there's nothing better than Defi. The open source community here is absolutely legendary. So what problems are we solving? So the first problem is fragmentation or capital formation. So what we find, it's less of an issue in tradfi right now, thanks to systems like achievement Fednow or whatever it's called, and all these different tools to kind of link together banking systems.
00:21:46.248 - 00:22:29.764, Speaker C: It took them 60, 70 years to develop this. But in crypto and Defi, there are so many blockchains. And think about it from the context of Celestia. So with Celestia, with conduit, with dimension, all of these different platforms, you can now create a new blockchain in an afternoon. And taking it one step further, what if you onboard liquidity to that blockchain? That's liquidity that's not going to be somewhere else. And when I talk about liquidity, I basically just mean money. When that money is here and it's here and it's here and it's here and it's here, then if someone wants to make a trade, they need to pick one.
00:22:29.764 - 00:23:18.716, Speaker C: And we see that as a really big problem. One of the goals that we're working on right now, or one of the problems we're working on in Defi, is taking all that liquidity and figuring out a way to either make it so efficient that it doesn't matter that it's spread out, or find a way to give users access to all of those liquidity pools such that they don't lose out because of the horizontal growth capabilities, which are amazing, facilitated by companies like Celestia. And then another big problem is obviously security and safety. So I'm sure all of us have seen DeFi exploits, crypto exploits. They're sometimes in the news. If you're in the crypto world, I'm sure you see them on social media. I'm sure you see articles and write ups about them.
00:23:18.716 - 00:24:15.884, Speaker C: And this is one of the most critical issues in Defi adoption, because think about an institution with a billion dollars. Are they going to look at those exploits and think, hey, that's something I want to be a part of, or is that going to scare them away? Well, the question is kind of rhetorical. Obviously they'll get scared away. And more and more that's happening lately and not going to get really in depth on underwriting and counterparty risk and things like that. But long story short, when you're doing the calculus that determines your risk level, generally when DeFi is involved, it's not as good as it could be. And it takes a really experienced operator to understand when they're safe and when they're not. So that's something every DeFi developer is working hard on so the next is related somewhat to number one, but execution and capital efficiency.
00:24:15.884 - 00:25:15.378, Speaker C: So if you've ever traded on Uniswap and seen that slippage number on the bottom, that represents how much money you're losing on the trade. And oftentimes when you trade on a centralized exchange or another venue, especially when you're trading in smaller amounts, you don't see that slippage, or you don't see nearly as much slippage. And one of the goals of Defi developers is to make sure that when you execute a transaction, you're getting as much value as possible on the other end, or when the transaction is finished as when you started. And some of that has to do with speed and throughput and gas costs, which Celestia helps quite a bit with. And some of that has to do with the calculus that goes into determining these payoffs and determining how transactions are settled. And this is a huge and exciting area of research in mathematics. And believe it or not, a lot of financial math is very similar to physics, as same goes with gaming math and other things like that.
00:25:15.378 - 00:25:50.004, Speaker C: So if you're a big math head or a big physics head, you will really like looking into how these payoffs are determined. So financial calculus is frankly a lot of fun. They should teach that in schools, but they don't. Instead, they teach you how to find the surface area of a cone or whatever. But the last is onboarding and user experience. So in the world of traditional finance, at the institutional level, onboarding generally requires signing 100 documents. I'm going to say bye to my fiance real quick.
00:25:50.004 - 00:26:55.094, Speaker C: Onboarding an institution generally requires 100 pages of documentation, several meetings. It's a big pain in the butt, and DeFi is positioned to solve this. We can technically onboard an institution in 5 seconds. The issue is we're not there yet, infrastructurally speaking, and in terms of user experience. So one of the goals of DeFi is being able to move and manage billions or even trillions of dollars of capital without the hurdles that we see in tradfi. And right now, a lot of developers are working on, how can we get users on board without them? Needing to memorize a private key or self custody is awesome for a lot of people, but when you're an institution, you want managed services, you want that custody to be taken care of by someone else. And our team, fire blocks, copper, et cetera, are all working on solutions to these problems.
00:26:55.094 - 00:27:59.074, Speaker C: So definitely big ones to think about. And I'll say as well, guys, if you have any questions, ship them into the chat and I will intersperse answers throughout because this stuff is complicated and I'm introducing some complicated concepts. So how do you start building in DeFi? When I started building in DeFi, there was something called truffle, and truffle was maybe one of the worst pieces of software of all time. Truffle is a developer environment that lets you test smart contracts, deploy smart contracts all in one interface. The problem was they had no idea what they were doing when they wrote it. So for example, like the API, there could be four different functions that you can call to do the same exact thing, and a lot of times they overlap and break. Then came hardhat, which was like, hey, we're going to do truffle, but it's going to be so clean and nice.
00:27:59.074 - 00:29:06.704, Speaker C: And with each of these you needed to learn JavaScript. You needed to understand, like okay, how do I effectively write typescript or JavaScript? How do I test contracts in addition to knowing solidity? So that was the standard for quite a while. And last year paradigm introduced a developer environment called Foundry. Foundry enables developers to have a fully solidity centric developer environment. And not only that, but they added some of the easiest testing tools known to man, and Foundry has slowly become the absolute top dog, and they're adding features and accelerating to a point where foundry will likely become forever the ultimate develop development environment. So you can think of foundry like your companion when you're developing smart contracts designed to make compilation super easy, deployment upgrades, testing, et cetera. So I would definitely like search up foundry.
00:29:06.704 - 00:29:43.484, Speaker C: You'll see this guy on their website or on their materials. Go ahead and bookmark that if you're interested in defi development, because learning foundry and Patrick Collins has a really good course on it with free code camp. Learning all that is hugely, hugely, hugely important. And let me kind of clue you into fuzzing. So analysis of math is one of the important ways to secure an accounting system or any financial system. And believe it or not, that's a really difficult problem. Doing it in a way that's simple and straightforward.
00:29:43.484 - 00:30:46.706, Speaker C: If you're familiar with formal methods or formal verification. It's something that analyzing ten lines of code could take you a week or more. When you're talking about something like fuzzing, you're talking about something that can accomplish the same thing, but in a way that is fast, sensible, and uses a ton of automation under the hood. Trail of bits, which is one of the biggest cybersecurity firms and most reputable cybersecurity firms in the space, recently made a blog post about how they're selecting fuzzing over formal verification. Because formal verification, the whole point is we are going to prove down to the binary level that there are no code or no bugs in this code. Whereas formal verification is like we're going to pen test the living shit out of this bath, and if we find an issue in any capacity, then we'll flag it. And both of those in practice accomplish the same thing.
00:30:46.706 - 00:31:21.024, Speaker C: And fuzzing does it much more efficiently. So understanding fuzzing and understanding how foundry can help you fuzz your smart contracts is like number one. If you learn how to fuzz smart contracts well, it doesn't even matter if you can write them well, you become employable instantly. So write that down. That is going to be the absolute most important skill in your tool set as a defi developer. And it's literally just a way to make sure you're writing your functions and doing your math correctly. And it will tell you if you're not.
00:31:21.024 - 00:32:33.692, Speaker C: So before I keep going and pontificating and yelling and going crazy here, I'll stop and answer some questions. So, Sharif muse, I hope I pronounced that right, asks, how stays the fee lower than 0.005 for mode l three, especially when TPS goes up? Isn't this a defense mechanism to raise transaction fees so a network doesn't get congested? Like Solana, for example? And this is a huge problem with with no simple answer, but essentially how gas auctions work, and interest rate curves and similar work this way as well. Is the lower the throughput or not the throughput, but the lower the traffic of a network, you're going to get an extremely, extremely, extremely low fee. And the nice thing about l three s is because they're scoped to a single application or use case, you can stay at that low transaction level while still being able to properly support that application. And so gas is going to be super low. And what we see with Solana and every other network is the cost of gas rises exponentially.
00:32:33.692 - 00:33:25.194, Speaker C: And part of that is the way gas auctions work, and part of that is the way arbitrage and opportunity cost works. So when the network is most volatile, when prices are moving the most, and bots need to go crazy to keep the markets in line, you might see gas go from a fraction of a penny to a dollar. You know, that's, that's totally not unheard of. And, and so the point of l three s is, hey, you know, mode is great. Mode will, will be a little higher cost because we know a lot of people are excited to use mode and it's a big permissionless, composable environment. There will be a huge vibrant economy there. But if you are creating an application that doesn't need all the bots, doesn't need all the arbitrage, doesn't need all this, that the other then an l three will ensure your users are always paying a fraction of a fraction of a cent.
00:33:25.194 - 00:33:29.526, Speaker C: And that's what's really exciting. And go ahead and add to that.
00:33:29.590 - 00:34:07.818, Speaker B: Yeah, yeah. I just wanted to add one little thing. Is that on mode right now, the fees are super, super low thanks to the Dankun upgrade that we've seen recently. That was an upgrade done on Ethereum, of course, but that reduces fees so much for mode since the, as Justin was talking, the fee market like that, where you auction the fee, right, where you, where you get the price for the, for the gas as well. It's separated now for L2. So on Ethereum, that made a crazy, crazy reduction on price fees on fee price, right. And of course it's not going to stay low forever.
00:34:07.818 - 00:34:58.650, Speaker B: And if we see a lot of interactions on mode and a lot more transactions and higher traffic at the same time. Right, like not distributed over, over time, that's gonna of course get the fees higher, but they will still be much, much less than Ethereum and other consistent we've seen, mainly because what we're doing is offloading the execution, as you said. Like if we put all the execution in the same gas auction, that's gonna rise prices like really, really high. But if we manage to encapsulate and say, like, okay, this execution, we don't really need to do it on Ethereum. We could do it in a layer too, or even go further. And my app is just a little game that doesn't really need to interact with a lot of other things and infrastructure. I could even put it on layer three and leverage and take advantage of that really, really low gas fees.
00:34:58.650 - 00:35:01.138, Speaker B: But, yeah, your question is completely right.
00:35:01.306 - 00:36:05.518, Speaker C: Yeah. When you're looking at demand for block space, anytime a block is unfilled, gas is going to be cheap, you know? And if you look at Ethereum, it's like the, the throughput is 15 transactions per second, I believe. So once there's more than 15, how do you fill the block space? People start bidding up and up and up and up. So it's like, okay, it hits this wall and then boom, it goes straight up. Because people want to get their transactions through because they're making money on those transactions and the amount of money that they can make, which has to do with the amount of liquidity and the scale that will determine where kind of the point of parity is for gas prices. And I guess, to answer Mister Yong Suk Kang or Kang, apologies for the mispronunciation in advance. What ideal user profile do you describe for people who use DeFi apps? So this is, if you were to see our are profiling figmas.
00:36:05.518 - 00:37:15.910, Speaker C: They're like as big as a frickin football field. But, you know, we kind of boil it down into, you know, a man between the ages of 25 and 35, and man, you know, obviously we're trying to get women interested in defi, but right now it's a very male dominated industry. So between 25 and 35 from Asia or Europe, countries like Korea, Singapore, China, are all amazingly active defi users with a risk appetite that makes them excited as opposed to afraid of big time yield opportunities. And then when you're talking about Europe, that profile is a little bit different. But those are people kind of in the same vein. And really, it's a compliance thing on the Europe front, where, okay, Europe has much more clear regulatory boundaries as it pertains to DeFi. And addressing that market, addressing institutions in that market, addressing users in that market, can be done much more formally.
00:37:15.910 - 00:38:24.864, Speaker C: And then America, for a lot of defi, we just kind of say, don't bother, simply because there's no regulatory clarity in America. So, generally, american users interacting with DeFi may use a VPN, or they may, like, ignore terms and conditions, et cetera. But marketing to Americans directly is not really something that anybody in the industry does. So, yeah, I won't get into the psychographics and all that, but long story short, if you're a korean gentlemen between the ages of 25 and 35, then you're probably going to be targeted by DeFi teams. But, yeah, let me move on to the next slide here, how to succeed in Defi. So, as a developer, you'll find yourself confronted with an explicit need for excellence. When you step into the world of defi, there is no playing around.
00:38:24.864 - 00:39:18.474, Speaker C: I mean, you can play around in a test environment, or play around with your friends, or deploy something or whatever, but when you're talking about building high VAR systems, VAR meaning value at risk, there's not room for error. And in the world of software development, that's a very rare case. And there are two reasons for that. One, there's not really accountability for a hacker or exploiter. You know, in the world of tradfi, it's much easier to pursue and persecute a hacker than it is in Defi. And to give you kind of a shocking example of how serious this is on every level of the organization, on the operational level, north korean operatives apply to work for our team constantly. We have an entire set of heuristics that we use to determine whether someone is with Lazarus group or not.
00:39:18.474 - 00:40:12.738, Speaker C: They are the most prolific social engineers in the space, and they know the industry top to bottom, and know how to kind of play on the needs of organizations to get in the board or to get on the development team. And they introduce bugs from the inside. So, you know, there was a project on blast called Munchables. They accidentally hired the same north korean developer for two different positions. It was the same guy pretending to be two different people, and he introduced a critical vulnerability in their software and stole $60 million. That is something that every single team in the space has to fight against and deal with. And because Defi and crypto is so fast paced and high octane, and everybody wants to make everybody else's dreams come true, they're desperate for talent.
00:40:12.738 - 00:41:31.498, Speaker C: And North Korea knows this, and a lot of antagonistic organizations or malicious organizations know this and use it as a way to work their way, wiggle their way into organizations. And generally speaking, we hire after a very long and honestly painful vetting process. After this vetting process is complete, we've got 37 team members right now, 20 engineers, and in our four years of operation, we've had basically no turnover. So once you're working in DeFi and once you can get settled in, it really is a wonderful job. But you need to make sure that the right people are around you and that the people are holding each other accountable, pushing each other toward excellence, and pushing each other toward creating the most secure, best environment for users. So digging into that, learn the language. If you're coming from the world of JavaScript, where libraries can basically handle everything for you, you're going to be a little bit shocked and solidity, where sure, there are libraries, but if you're inheriting a library and you don't know what it does, then game over.
00:41:31.498 - 00:42:14.962, Speaker C: You know, if you haven't read through all of your dependencies line by line, then you're not doing your job. And that's something that's very unique, because imagine going into your node modules for your JavaScript application and reading through thousands and thousands and thousands of, you know, libraries, many of which are redundant. But in defi and in solidity, we're building at quite a low level and solidity, the language is very easy. It was designed to be accessible and easy to use. But actually writing smart contracts well is extremely hard. And moving on to the next point here, learn the environment. So solidity isn't just about the language.
00:42:14.962 - 00:42:44.854, Speaker C: You can become a master of solidity fast, especially if you're a good developer. It's not that hard. The syntax is very familiar. If you've come from any kind of mid to high level language before, and even the assembly is relatively easy. There is like 250 some opcodes. It's not like you're not programming to an intel processor. You're programming to a very simple environment, and that's the EVM.
00:42:44.854 - 00:43:40.978, Speaker C: And some of you may not be programming on the EVM, but that's what I know. So that's what I'm going to talk about. You need to understand how it works, you need to understand how state is managed, you need to understand how transactions are executed, you need to understand your order of operations. And if you don't, you need to go back and read your textbooks and watch your tutorials. Because if you don't have a handle on the EVM, you're not going to be good at writing smart contracts. And an interesting thing about this is once you start learning the EVM, and once you gain kind of a level of proficiency, there's always kind of, I don't want to call it the Dunning Kruger curve, but you will very quickly, because this is probably going to be one of the first times you're really digging deep in an execution environment. You will think you're a God your first three months, and I'll tell you, that's fine.
00:43:40.978 - 00:43:58.764, Speaker C: And frankly, it's a lot of fun learning the EVM. It's simple enough that you can develop a mental map of the EVM in its entirety. And that's so rare. And it's what makes programming to the EVM so exciting. And then you'll get to a point where you know it so well that you learn to hate it again.
00:43:58.924 - 00:44:40.444, Speaker B: But I, you know, when I kind of learned a little bit about the EVM and the inner workings, I was like, oh, if you've ever took like a computers class, like looking at hardware, like how a computer is built, it's like, oh, this makes a lot of sense. And it's like pretty similar to how you would, you know, to a computer. And it totally happened to me in the first three to four weeks. I was like, oh, this is easy. Like, I can do this totally. And afterwards, and that's why we ended up with this defi dev thing is like, wait, there's like a whole universe of a lot more things that I thought I already knew and mastered, but no, like, it's a long path to master all of this.
00:44:40.784 - 00:45:51.454, Speaker C: Yeah, and the amount of work that goes into creating an execution environment like the EVM, like a really simple, solid, reliable virtual machine. And you can almost think of it as like a trusted computing space. If you've ever been interested in trusted computing, it is like it's a beast. You know, you can read the yellow paper, all hundred or so pages of it, you can figure out how everything works, but you don't need to be able to rewrite the EVM from first principles, but you do need to at least understand it enough to figure out if your transaction is going to work, how you think it will. And then number three is learning the exploits. So when you learn JavaScript, you learn the gotchas, you learn the easy pitfalls, but you don't really read about the history of every single cybersecurity incident that ever happened in JavaScript. I think there's not enough time in the universe to actually do that, but in Defi, again, same reason the EVM is so awesome.
00:45:51.454 - 00:46:47.054, Speaker C: You have the time, the entire history of exploits. There are maybe 100 or so that are worth noting. Figure out how people have messed up in the past so you don't make those mistakes. And the amount of times I've seen people make the same exact mistakes in DeFi, whether it be read only reentrancy or lack of permission on an initializer function, or mis implementation of a library. It's heartbreaking, because reading for ten minutes, spending ten minutes of your time reading through the classic Defi pitfalls would have saved users potentially millions of dollars. So definitely learn your exploits. And then I'm going to say this once, but I wanted to ring through your head a thousand times so I don't waste this whole time just telling you to test.
00:46:47.054 - 00:47:04.290, Speaker C: But you need to test your shit. This isn't JavaScript. This isn't typescript. You can't just whip out an app test in production. We're going to see if runtime catches our mistakes. We're going to see if the compiler catches our mistakes. The compiler is not good enough.
00:47:04.290 - 00:47:31.764, Speaker C: The solidity compiler is very strict. It'll never be strict enough. You need 90% plus test coverage. If you aren't willing to sit down and be annoyed, writing tests for a week or two after you make your cool, smart contract for every hundred lines of smart contract code. You'll probably need a thousand lines of tests. If you're not willing to do that, then don't do defi. It's really as simple as that.
00:47:31.764 - 00:48:04.004, Speaker C: And this is like, you will get good at it. But early on, this is the most annoying and tiresome part of Defi, and it's the price we pay to enjoy such a vibrant and challenging problem domain. So you need to test your shit. You need to fuzz, fuzz, fuzz. You need to understand how to test things, why to test things. And you need to understand all the good testing patterns. And I'll tell you, you know, this is not J's.
00:48:04.004 - 00:49:03.222, Speaker C: I'll tell you that. AI, GitHub, copilot, V two, if you write a really well documented series of tests, a lot of defi testing is writing the same code over and over again. So, being intelligent about your abstractions. So, okay, what code am I rewriting? Let's make it a function call. All right? What code is like brain dead simple? What code is super simple math? What library am I using? Whether it be mocha or chai, or using foundries built in mechanisms, how can I write them in such a way that AI can do a lot of the heavy lifting for me. That's something that we've been working on pretty extensively internally being, let's not write the same chai statements a thousand times. AI can do that for us.
00:49:03.222 - 00:49:40.044, Speaker C: But you need to know enough about testing and have been in the mines long enough to figure out how to do that well. So test, test, test, and you will save yourself and your users a lot of pain and suffering. So security is like, if you don't get like sweat thinking about an exploit, if you don't sweat thinking about keeping your users funds safe, then Defi ain't for you. And you need to get in that mindset. And if you're not in that mindset, you're not ready. And I cannot reinforce this enough. Test, please, test.
00:49:40.044 - 00:50:41.584, Speaker C: Okay, and then let's talk about going to market with Defi, whether you're on an l, three, l, two, whatever. And this is maybe not a problem for you, the developer, but it is a problem for you, the founder. If you want to take a piece of software to production, then you need to understand how, and this has been mastered through the grinding effort of many, many developers before you. And you need, first of all, maybe a mentor. If you've never taken a DeFi project to market before, or taken a web3 project to market before, find someone who has find someone who's made a lot of mistakes so that you don't make the same one. So, you know, all these eight points are eight of maybe 1000, but I'll try to kind of give you enough clarity that it's actually useful. So number one is validate your thesis.
00:50:41.584 - 00:51:35.722, Speaker C: So, you know, if this is your first defi application and your first time writing a financial application in general, you probably don't know what you're doing. And again, talking about that kind of learning curve, you will very quickly think you know what you're doing and that's you learning solidity and that's you learning solidity patterns. And then, and then you hit this brick wall called finance and financial calculus and you realize that some of your, your ideas might defy the laws of physics a little bit. So, you know, document your thoughts and your ideas thoroughly, research them very thoroughly and get someone who knows what the heck they're doing to read them and tell you if they suck or not. And if they tell you they suck, don't give up. You know, go back, make some edits and, and hit them again. And if you think they're wrong, find a second opinion.
00:51:35.722 - 00:52:16.176, Speaker C: You know, it's, it's your, your right to believe in yourself and make some cool software, but just make sure that you're not wasting your time or the time of investors or users or whatever. So make sure it's humanly possible. And one of the ways we do that is prototyping. So prototyping is honestly a little contentious in the world of software. How do you prototype? Should you prototype when or how? I just said both of those things. But long story short, the best way to validate that something is possible is to do it. And you don't need the perfect, most scalable, sustainable system.
00:52:16.176 - 00:53:10.186, Speaker C: You can have hard coded values, you don't need the perfect abstractions. You just need to figure out if the mechanism and the idea in your head will work. In production and writing your prototype will not only inform and help validate and improve your thesis, but it gives you a tool to start getting people on board. And, you know, when you're not a developer, you know, talking to me, you can talk about a mechanism and, you know, I've done this enough that I can build out the rest of my head and be like, okay, you know, that sucks, or, oh, that's awesome, good job. But when you're talking to normal people who don't do this all day, every day, you need to be able to show them. And the prototype is how you do that. So if you do a good job of prototyping, not only do you get that validation, but you have a tool where you can maybe go out and raise money, you can go out and build a team, you can go out and number three here, fill the operational gaps.
00:53:10.186 - 00:53:46.790, Speaker C: So if people know what you're doing and people can see the vision, it's much more likely that they'll be inspired and aligned themselves with that vision. And if you can't do that, you fail. And if people aren't getting it, always remember, it's your fault. You need to be comfortable that not everybody has the same knowledge or skill sets as you. You need to over communicate, you need to simplify. And like, in talking about, like, learn about copywriting, learn about good documentation, learn about good diagramming. Because if you can't communicate that idea, you fail.
00:53:46.790 - 00:54:15.036, Speaker C: And if you, if people don't understand it, then it is always your fault as a communicator. And, you know, maybe you can argue it's their fault, but it doesn't matter because it's your idea, it's your mission. You're asking them for something and you need to be able to communicate it. They don't need to go read a textbook to understand it. So keep that in mind. Let that, you know, clank around in the back of your head. It doesn't matter if you're the smartest guy in the world.
00:54:15.036 - 00:54:40.266, Speaker C: If people don't understand what the hell you're talking about, there is no way they can ever care, and it's not their fault. So just keep that in mind, you know? And, you know, once you have people aligned, like, let's say you have. Okay, I know what my weaknesses are. I'm a really great developer. I'm a good writer and documentarian. I suck at business development. I suck at operations.
00:54:40.266 - 00:55:22.724, Speaker C: I don't know how to hire people. I don't know how to scale a business, or I don't know how to talk to investors or develop partnerships. There are a lot of things you're not good at. And once you figure out what you're not good at, you're going to be way, way, way better at building a business and achieving operational excellence. So that's like a lot of self reflection. You know, go on a walk and think, why do I suck? What are all the ways that I suck? And luckily, there are plenty of people in the world who are great at everything that you stink at. And I'm sure that they would be happy to feel valued in working with you because being relied on feels good, and being valued feels good.
00:55:22.724 - 00:55:54.328, Speaker C: And as a founder, the best thing you can do is give someone the opportunity to be dependent on like that. So four, I'm not going to drill into it super hard again, but develop and test your system. And I explicitly say ant test because that is the most important part. Everyone can dive into an editor and whip out the most epic software system in the world. Oh, I'm so smart. Dude, the code is coming out of my fingers. You know, water.
00:55:54.328 - 00:56:18.592, Speaker C: Water from a waterfall. Okay, great. Everybody loves that. Everybody can do it. Test it. All right, test it, please, I beg you. And then once that's done, and I separate out writing the application, because a lot of times getting a client whipped up to actually interact with the application doesn't take as long as developing and testing and auditing it.
00:56:18.592 - 00:57:09.254, Speaker C: So maybe once you begin the testing process, start to start to look for someone to help you write the actual application. And Paul Graham says. Paul Graham, one of, I think, former president of Y Combinator or founder or whatever, but he always says, if you aren't embarrassed of your first iteration, you are not moving fast enough to market. So you don't need to be perfect, obviously, you need to be secure. That's why I've separated out the application and the development, development of the system. You need to develop and audit the system. That can take a long time, but when it comes to the client, the front end, the back end, it's okay if it's ugly, as long as it's good enough for people to use and understand, because there's nothing cooler than seeing a product go from ugly to beautiful and gaining product market fit in its own right.
00:57:09.254 - 00:57:41.440, Speaker C: And number six, which is maybe before number five, if number 4.5 was schedule your audit. Number 5.5 is actually get your audit. You need to get an audit before production. And an audit can cost anywhere from, you know, $10,000 to $500,000. And, you know, if, if you think, you know, what is the value at risk? Okay, if you're trying to onboard 2030 $40,000 through your defi app, all right, maybe go for the $10,000 option, you know, raise a little bit of money.
00:57:41.440 - 00:58:21.508, Speaker C: You know, tokens are really, really good for that. And make sure that you have a penetration tested platform. And the $10,000 audit is just finding a talented security researcher willing to spend a weekend making sure you did everything right. And if you tested your system well, you can get a lot of traction out of a $10,000 audit. And if you're thinking, hey, I want to house 100 million or a billion dollars, then I'm sorry, you're going to need to shell out six figures to a top security firm to handle that for you. And then number seven is enter beta. This is where you see points programs, this is where you see airdrops.
00:58:21.508 - 00:59:15.790, Speaker C: This is when you've actually assembled a team, got people ready to go with liquidity, with investment, et cetera, everything you need. Now's the time where we're going to hit the board and we're going to get people to test our stuff at great risk to themselves. So a thought in your mind should be how do we reward them conceptually, airdrops and things like that. Celestia, for example, all the developers that were spinning up nodes on their Nintendo switches or whatever, Celestia helped them out because they were the ones making sure that the software was good enough for production. And then finally launch from launch, there's again another 10,000 points, another 10,000 headaches. But every journey is different. So when talking about tokens, tokens are the ultimate tool for alignment of capital and ideas.
00:59:15.790 - 00:59:38.372, Speaker C: And if you can get to a point where you can launch a token and have people to believe in it and rely on it, then you've done an amazing job going to market. And I believe we are on the thank you slide. So rounding out that hour quite nicely. Happy to stick around and ask questions, but fetty, if you want to comment.
00:59:38.428 - 01:00:56.872, Speaker B: Anything, I was number one. I'm impressed mainly because how well you're putting the things that we've been living with mode for the past year and seeing a lot of founders get together with us, like really technical people, and putting everything in words, in clear words, and explaining like this makes a lot of sense. And it really, I can vouch for literally everything that you've said because you always see, you know, these founders, maybe non technical founders getting in and trying to push for their protocols. And sometimes they do much better than really technical founders that have developed the craziest and the best system for Defi out there. And that has to do with product market fit, with what you said of like, if nobody's understanding what you're saying, or if nobody gets the idea and you think you're alone in the world, then probably the problem is in your communication. Like you're seeing something that others are not understanding and you need to find a way on how to explain it to everyone else. Because again, we could sit here and you, Justine, could be speeding out really complex subjects and talking about really specific, complex things that maybe two people, two persons will, maybe one.
01:00:56.872 - 01:01:36.976, Speaker B: Right? And that's not the point. Like the point here is to dump it down and tell everyone and let them know, hey, this is a long path. It involves not only programming, not only coding, not only even solidity or like a few tools, but rather a whole ecosystem of other things. It involves knowing how to go to market. It involves human psychology as well. So I think you've given a very broad presentation that goes, that could take a solo founder with just an idea and a crazy thing that they built on a hackathon to actually take it to a startup and build and deploy a complete project. So like, I love that.
01:01:36.976 - 01:02:14.962, Speaker B: That's, that was kind of the idea of the workshop and why I was so happy to have you here, because I want to motivate these developers to find other people to build a team, to create a project and come to mode, deploy, give it a try. Go to testnet, go pen, test and test the shit out of your Defi protocol. You need to be testing a lot and ask other people to also help you with the testing and just, that's it. You got a battle test for everything here. That's kind of the idea of defi. And what we're doing here is put it out, get it tested, find auditors as well. And all of these tips I think are amazing.
01:02:14.962 - 01:02:46.444, Speaker B: So, yeah, I plus one, all of them too. To be honest, I was going to stop you with a lot of questions, but yeah, maybe just one little one with the prototype. Because I think especially for this hackathon and for hackathons in general, fast prototyping, it's like the key. And how you communicate is like the key. To win a hackathon, your product is really important, but how you communicate, it's super important. So my question is, do you. There's a difference between the prototypes that you mentioned and an MVP.
01:02:48.364 - 01:03:37.656, Speaker C: An MVP includes the client. So if you're a really good prototyper and a full stack developer, sure, the prototype can become the MVP. And a lot of times the best way to demonstrate it is, hey, let me pop open create react app, shove ether as j's in, and see if I can make some buttons and some data to impress whoever I'm going to be talking to about this. So they aren't necessarily the same, but oftentimes the prototype evolves into the MVP. And an MVP could also be a production piece of software. An MVP could be like, hey, here's a single mechanism that will eventually evolve into the entire system. I'm going to create an app that demonstrates that mechanism only.
01:03:37.656 - 01:04:08.834, Speaker C: We see that a lot in the world of social media, where it's like, hey, I have this cool, funny feature that I think will fit really well within, like, Facebook or whatever. I'm going to create an MVP for it and then get acquired for $100 million after a go to market strategy. So it all depends on how you build, who you're building with and who you're talking to. And if you'd like, I can. I can. I think the host here was nice enough to highlight all the questions. Thank you, Josh.
01:04:08.834 - 01:04:12.458, Speaker C: I could go through all those if you'd like, if there's time.
01:04:12.626 - 01:04:14.210, Speaker A: Yeah, I think we have time for it.
01:04:14.322 - 01:05:17.358, Speaker C: Totally. So, starting with Sharif's oldest question, why are circuit breakers not used more for defi protocols? And if you look at Yas Riadi's old blog post, he would propose circuit breaker patterns. Everybody and their mother, when they started building in defi, I was like, you know, why don't we do circuit breakers? And the reality is, the behaviors that can be deemed exploitative are very hard or borderline impossible to catch with circuit breakers. And most of the time, when you're thinking about, you know, the impact of a circuit breaker, the only people you're hurting are your users. So 80% of your TVL will be made up of, like, five to 10% of the actual depositors, thanks to hedge funds, et cetera, taking lp money, concentrating them into a single deposit. So circuit breakers, in practice, don't work that well. Everybody uses them.
01:05:17.358 - 01:05:53.868, Speaker C: But a lot of these circuit breaker logic is off chain. So we have tons of monitoring infrastructure. We have tons of emergency response infrastructure. We're in. You know, if we see a behavior or if we see something weird, we can pause and, you know, access control when it comes to administrative functions and blockchain, it's like, okay, you know, everything needs to be super granular. You have the pauser, you know, you have the manager with, which is, like, you know, more signatures, for example. So, yeah, unfortunately, they don't work in production.
01:05:53.868 - 01:06:22.034, Speaker C: But that is, like, a very good point. Check out Yas Riadi's old blog posts about circuit breaker patterns. They are pretty interesting back in 2020. So Sharif's next question. What is your experience with security firms and auditing smart contracts, which are really good? I know Patrick Collins started a security firm. So Patrick Collins started Cypherin. I would consider Cypherin a solid tier two firm.
01:06:22.034 - 01:07:11.624, Speaker C: So you can expect to pay between, you know, $20,000 and $80,000, you know, five figure range. And he's got a lot of talented security engineers under the hood, and, you know, achieving that tier one firm status just takes a lot of time that he hasn't. Hasn't had yet, but he's developed a really solid team, and his content is top tier, so totally, like, total Chad, developer relations guy. I would say, in terms of top tier firms, we have trail of bits and open zeppelin. Those are the top of the top. And then I would say equivalent to top tier firms are paying an equivalent amount of money at a platform like Cantina code, Farina, Sherlock. There's hats, finance.
01:07:11.624 - 01:07:54.962, Speaker C: There are a lot of code hawks, but there are a lot of these contest platforms wherein you can get really good bang for your buck, but it is a little bit of a risk. So, when you're working with a tier one firm, you get the tier one stamp of approval, and then you know exactly what you're getting. So they have a fixed product, whereas using a contest platform, if you're spending that same 200 grand on code Farina, you might get better, you might get worse. And a lot of that is about timing and marketing of the contest. So I would say both of those I would place in tier one, all things depending. And a code for. In a contest, for example, can be tier one, tier two, or tier three.
01:07:54.962 - 01:08:22.390, Speaker C: I would also consider tier one spear bit. So, spear bit is the most recent entrant into the tier one universe. They've been sniping all the best security researchers and very expensive, but well worth the money. And then tier 1.5, I would say quantstamp omnesha. There are a handful more, but there are a lot of solid tier 1.5, high five, low six figure audit firms.
01:08:22.390 - 01:09:00.111, Speaker C: And then when you're talking about tier two or tier three, I would say in that range, if you're looking to spend between five and 50 grand, you're almost always better finding individual security researchers, and some of that is, like, digging deep. I would say another tier 1.5 to tier two would be trust security, which is a solo security researcher that got a bunch of really talented friends to work on this stuff together. So, yeah, I know more than we have time to talk about.
01:09:00.287 - 01:09:06.760, Speaker B: You're an encyclopedia. How. How do you remember so many names? It's insane. But.
01:09:06.792 - 01:09:42.082, Speaker C: Oh, dude, that's like. That's, like, maybe 10%. Like, I mean, this is when you're. When you're spending a million dollars a year on audits, you freaking. You better know what you're spending your money on and it, the meta always shifts. Like, okay, what's the best bang for your buck? And, you know, I would back, I was one of the earlier, like, I started off in e sec, I was one of the earlier, like, security influencer type guys, as silly and funny as that is, but sometimes I would get like, oh, really good audit firm. And I'd start talking about it in podcasts and stuff, and then, oop, their prices rise.
01:09:42.082 - 01:09:57.354, Speaker C: So, you know, then we need to look for, okay, what's the most cost efficient option? But once you're tier one, it's like, price doesn't matter at that point. It's like, okay, I'm building for a billion dollars of TVL or more. You know, I'm going to get the best of the best.
01:09:57.514 - 01:10:37.106, Speaker B: Yeah. One security professor that I had in college, he was always saying, like, we were talking about web two, of course, like regular applications and audits and stuff. They were like, of course, it's not like how you're going to get how, like, it's either, like when it's going to happen. And with, with crypto, the problem is that we're managing millions of dollars and it's up for grabs to whoever can break that system. So I would just add this little advice, is that just one audit is not enough. Just one pair of eyes looking at something is not enough. A friend of yours looking at your contract is not an audit.
01:10:37.106 - 01:11:10.710, Speaker B: An audit requires a report. Really, really set down procedure of different steps, different pairs of eyes looking at it, really capable people with different, there's different ways of doing it. And as Justin said, you have done contests for like bounties and stuff that to me are good way of. I wouldn't even talk about auditing. I would talk about security measures in general and build like a security plan that involves audits with big firms, audits with independent contractors, bounties as well. So a whole plan for it.
01:11:10.742 - 01:11:55.374, Speaker C: Study devsecops. So if you Google devsecops, that is kind of, it gained a lot of popularity in the world of aerospace and defense. That is the holistic security pipeline kind of ideology. I mean, it's not an ideology. It's just like, this is what you need to do to make good software. And always remember that monitoring and emergency response are going to be, at the end of the day, you know, if, if an issue occurs, which if you've been a software developer for long enough, you know, it will, understanding what to do in those situations is, is very key. And when to do it.
01:11:55.374 - 01:12:49.624, Speaker C: And yeah, it's, it's one of the hardest things to get right and one of the reasons that we build so big at conclave, it's like, you know, we build for everyday people and a lot of DeFi teams might be, oh, you know, we're two or three guys. Two or three guys unfortunately can't build a robust enough DeFi ecosystem. And so our whole idea is like, let's share the security, let's share the cost, let's collectivize and conquer these issues as they pertain to security and fragmentation. So always like the bigger the better. You know, get people reviewing your code program defensively, you know, watch a video or read, read some research about defensive programming and, you know, befriend some pen testers. That's, that's the best ROI of the game. Befriend security researchers.
01:12:49.624 - 01:12:54.920, Speaker C: So they'll do it for free if you're, you know, trying to operate at lower.
01:12:54.952 - 01:13:02.100, Speaker B: And just know that they hate making reports, not auditing contracts like they love reading code and finding bugs, they just hate doing reports, so.
01:13:02.132 - 01:13:03.268, Speaker C: Yeah, exactly.
01:13:03.436 - 01:13:03.740, Speaker B: Yeah.
01:13:03.772 - 01:13:06.664, Speaker C: And you'll save a lot of money if you don't make them write a report.
01:13:08.524 - 01:13:21.212, Speaker A: I was curious, on the front of not just having one audit, is there like a safe range, like three or five that you would recommend? And I guess that obviously also depends on like what tier they are, et cetera.
01:13:21.268 - 01:14:02.540, Speaker C: But we have a whole framework for this and there's a lot of thought, leadership, writing, etcetera. But the things to look at are one. So you write a smart contract if something happens or you write anything new, feature, new periphery, whatever, what is the worst case scenario in that? Worst case scenario, you can grade it as low, medium, high or critical. Critical would be a loss of funds. High would be maybe like a mis distribution of incentives. A medium would be like a temporary DOS vector. A DoS vector can also be higher critical depending on if it is reversible or not.
01:14:02.540 - 01:15:06.428, Speaker C: And then a low might be some unexpected, very minor thing that happens as it pertains to precision or similar. So that's skill number one. And skill number two is what's the value at risk. So what is this smart contract going to hold? How is it going to hold it? What are my expectations and what do I need to do to remedy an issue? Do I have the tools to actually stop an exploit or similar? And if you don't have those tools, for example, you want to get more audits. If your smart contract is totally immutable, you don't have any intervention methodology. You want to get more audits, and more audits is not necessarily a good thing because you need to be extremely strategic about how you audit. Because, you know, if you're, if you're getting five guys, you know, with the same exact skill set, you know, hey, we're, you know, cybersecurity guys, we have phds in logical analysis.
01:15:06.428 - 01:15:31.360, Speaker C: You know, we're going to look at this. They're going to all be looking at it in similar ways. They're going to be using similar methodologies, et cetera. You know, maybe getting someone who specializes in fuzzing or formal verification to attack it from the programmatic angle. Like, okay, you've had the logical analysis guy pour through every line. Now we're going to have the programmatic engineer dig in and test all your math. Okay, great.
01:15:31.360 - 01:16:33.244, Speaker C: And then, you know, what about someone who doesn't have formal training, but is highly ranked on code Farina, for example? What about the prodigy and prodigies and security researcher, like, with the dawn of code Freena and ranking charts and similar, you can just frickin dm them on Twitter. And it's really a matter of like, okay, here's this person that obviously has an unorthodox method, probably knows a lot about standard practice, but is perhaps going to have a different perspective. Think about the kind of penetration coverage that you're getting. And so there are some things that we audit that we're like, okay, we know exactly what this is doing. So let's say this is a vault, like an accounting system. All we need to audit is the accounting system. Deposit, withdraw, make sure the funds going in and the funds coming out are accurate under any given circumstances.
01:16:33.244 - 01:17:15.330, Speaker C: We know specific researchers, specific hackers, specific prodigies, whatever that we can talk to that are so good and so experienced in, like, as you would learn a sport. They've learned how to just totally, like, master auditing that specific thing. We know people we can talk to about anything like that. So that's the sort of learning that as a founder or as a CEO or as a leader in the space, you need to frickin get it. You need to understand it. You need to have security researcher friends. You need to get involved with the community, the open source community, and that's how you secure a project.
01:17:15.330 - 01:17:56.604, Speaker C: It literally takes a village. And the key is not like, I'm just going to toss a check to these researchers and hope for the best. You need to integrate yourself with the security community if you want the best outcomes. And you need to deeply understand how to go from prototype to bug free. And that is a journey that is long and challenging and sometimes very, very expensive. And knowing when and how to spend your money and spend your resources will save you hundreds of thousands, if not millions of dollars, uh, in the long run.
01:17:57.304 - 01:18:00.120, Speaker A: Thank you. Uh, I do have more questions, and.
01:18:00.232 - 01:18:01.808, Speaker C: If we are muted, Josh, I think.
01:18:01.856 - 01:18:05.112, Speaker A: Oh, shit, I can hear you, Joshua.
01:18:05.168 - 01:18:07.152, Speaker B: No, Justin, you can.
01:18:07.208 - 01:18:09.544, Speaker C: Let me. Let me unplug and plug back in my headphones here.
01:18:09.584 - 01:18:17.528, Speaker A: Oh, yeah, well, we'll wait on that, but I think we do have more time. I'm going to go through a few more once we have audio back on Justin's end.
01:18:17.656 - 01:18:18.864, Speaker B: Yeah, for sure, I guess.
01:18:18.904 - 01:18:28.654, Speaker A: Fede, for now. I'm curious, what are some things that you'd like to see built on mode during the ISP, or maybe even on a mode l three?
01:18:29.234 - 01:18:57.476, Speaker B: Yeah, for sure. So, as I kind of mentioned, like, in the start of the workshop, this is all very new. Like, layer three is given by, powered by conduit, and with celestial as well. All of this is super new. There's barely any documentation out there. So what I would say is, like, anything that you think could work, just go ahead, go and test it. I want to see everyone playing around.
01:18:57.476 - 01:19:15.650, Speaker B: Even if it's the. What you think it's the dumbest idea, just go test it out. We need to test the developer experience. I need to know how it works. I need to know the things that work as well. Like, I'm just here, like, I could throw you a few ideas. Like, we've thought of a few things, like Gamefi, for example.
01:19:15.650 - 01:20:00.672, Speaker B: Like, games on layer threes are a great idea. Now, what's the problem with that is how do you make users get to the layer three if you don't have an easy bridge to use or one that people are used to? Right. So you're gonna have liquidity issues if you find a way of solving that, a smart way of solving liquidity issues with layer threes, I think that's a really great problem to solve. But again, I can tell you that because I've been playing around a little bit with it, I kind of understand what they are, and that's what I'm looking for people to do on this hackathon. Right. The three bounties that we have are detailed and general enough for you to just. If you have an app in any other EVM ecosystem, you can just bring it to the layer threes.
01:20:00.672 - 01:20:29.446, Speaker B: And the challenge is going to be how to improve the interactions from mode to the layer three. Or if you can take it from another ecosystem to the layer three, that's going to be a challenge as well. Yes, you get a bridge with conduit. You can manually do that. But to actually get to the masses, to more users or like to have a really good experience, that's going to be the hardest part to me. So, yeah, I wouldn't, I'm not going to give you specific ideas, guys. I want to see you playing around.
01:20:29.446 - 01:20:46.284, Speaker B: I want to be, I want to see degenerating all around the layer threes as well. So whatever crazy idea you have is valid right now because nobody else is building like, big, big stuff on layer three. We have a few things in the background going on, but yeah, there's a big, big opportunity here.
01:20:46.704 - 01:20:47.392, Speaker C: Totally.
01:20:47.488 - 01:20:47.904, Speaker B: Yeah.
01:20:47.984 - 01:21:38.300, Speaker C: And I would say maybe I always forget to plug, but if you check out mode, which I think you definitely should, it's a really great environment. Um, our team is building ironclad finance there and we're going to have lending, borrowing stable coins, all sorts of awesome stuff. And, yeah, like get in our discord and, and chop it up with us and feel free to talk security, talk engineering, talk defi, anything you want. We, we love the, the excitement and the activity. And I've, I've taught more developers how to, how to build on defi than I can even count. So I would say if you're interested in, in it, it's just like, you know, get connected with us and we're.
01:21:38.332 - 01:21:44.264, Speaker A: Happy to help you and. Yeah. Thank you. And fede, what is a good way to get in touch with the mode team?
01:21:45.004 - 01:22:12.372, Speaker B: I would say our discord, like number one on the Celestia discord, like we have a mode channel. Just ping me there. I'm literally hanging out there and in our Modi score as well. Just, you can come and ping me. Feel the team, we have the tech operators, which are our ambassadors, helping out as well. So you will be treated nicely. As Justin said, like any questions are, like, any questions are welcomed.
01:22:12.372 - 01:22:31.544, Speaker B: I enjoy having discussions like this. I'm going to be able to help you and talk to you and like, support you as much as I can. Of course, my time is limited, but I'll find a way to help you guys. So, yeah, I just want to see cool things built and my job is to help you build them. So yeah, we're here for you.
01:22:32.444 - 01:22:33.304, Speaker C: Awesome.
01:22:35.924 - 01:22:42.144, Speaker A: Yeah, I think that wraps it up. I do have more questions, but I think we keep going for a long time.
01:22:43.444 - 01:22:52.244, Speaker B: We can arrange for another time. We may do another workshop or something. I don't want to take more time of Justin. He needs to go teach even more developers.
01:22:54.904 - 01:23:21.624, Speaker A: Sounds good. Thank you, Fede and Justin, for everything today. Thank you, everyone, for attending and for the great questions. We look forward to seeing you again soon in some fashion. There's another workshop here at the top of the hour, so 02:00 eastern time, and we look forward to seeing you there. And good luck to everyone during the infinite space bazaar. And most importantly, we hope you have fun.
01:23:21.624 - 01:23:23.388, Speaker A: Thank you.
01:23:23.476 - 01:23:25.564, Speaker C: Thanks for your time, everybody. Thanks, Josh.
01:23:25.724 - 01:23:26.724, Speaker B: Bye, guys. Thank you.
