00:00:18.170 - 00:00:40.098, Speaker A: All right, my code's done. Time to ship it free. Box you dogwater zero earn zero pr in the age of AI, debugging and getting into software engineering has never been easier. Here are the exact six steps you need to take to unblock yourself from any software engineering error you'll ever get. Number one tinker try to pinpoint your error. You can usually use an AI buddy to help you out here. Pinpointing your error will potentially solve your problem before even going to an AI and allow you to craft a better question to an AI.
00:00:40.098 - 00:01:19.370, Speaker A: Once you've pinpointed the issue, you can move to step two, which is ask your AI. You can use chat GBT, find Bing's AI, or, if you want to give wrong answers, Google's barred there are six principles to prompt engineering so that you can get the best out of your AI. Write clear and specific instructions, give as much context as possible, use delimiters to clearly indicate distinct parts of the input, and especially look out for something called hallucinations. Hallucinations are when your AI gives you an output that it thinks is right but is completely wrong. For example, if I write about writing solidity invariant tests in foundry, VT disgraces us by saying we have to Mpm install it from Openzeppelin. These can be tough to spot, but once you try it out, you'll see it doesn't work. And finally, you want to understand the limitations of the AI you're working with and iterate constantly.
00:01:19.370 - 00:01:52.662, Speaker A: Large learning language models are trained on human conversations, so you can interact with them as if you're having a conversation. But it's important to know the limitations of these ais, as most ais have a limit on how many tokens or words they can keep in context at one time. AI is trained off human language, so if you're good at asking other humans questions, you'll probably be good at asking robots questions too. Asking questions is a skill, so keep practicing. I've got a link in the description to learn deep learning AI, which is a free course to help software engineers be better prompt engineers. Now, when the ais can't help you, you'll have to go back to the old standbys actually doing work yourself. And one of the first pieces of work is reading the documentation.
00:01:52.662 - 00:02:44.042, Speaker A: You probably should have done this already. However, we can still use chatgbt because a strategy that I constantly use is I'll copy paste sections of the documentation at chat GBts context and say something like the above are the docs for tool x based on those docs how do I do y so google might be crying because Chat GPT is eating its lunch, but google still has what AI doesn't have, the entire Internet. Previously, anytime I ran to an issue, I prayed someone else had run into it before I made a post on it so I could Google search that exact issue. There's a new tool called find that combines web search with AI as it does a web search and it crawls through all the data of the sites, reads them all, and then gives you an answer based off of what it reads. Five ask in a forum, sometimes the information just isn't out there and we need to ask human beings. We always want to ask our question on a webbed indexed forum like stack exchange, Stack overflow, Hirana, or Reddit. This way, web crawlers, and more likely ais can scrape the data from these sites and learn from us.
00:02:44.042 - 00:03:11.714, Speaker A: That way, the next time we have this question, we can get our answers quickly. Asking on Discord and Twitter are because your knowledge will get lost to the unsearchable conversations that Discord is and web crawlers don't index them. The super secret alpha is to ask a question on stack Exchange and then post your stack exchange link to discord. You should 100% always ask your questions and format them with markdown. And if you're not sure how to do Markdown, you can ask chat to Bt to help you format your questions in Markdown. Ask on the support GitHub or forum is the tool you're working on. Open source.
00:03:11.714 - 00:03:39.978, Speaker A: Awesome. Ask a well formatted question on their git page. Not open source. Never use that tool again. This is how we improve our tools, by creating issues, engaging with each other, and even taking on issues and contributing to the open source code. And then finally iterate, do all these same steps over again, and as always, keep hopping through the code and until next time, stay riveting, my fellow blockchain ears. All right, fantastic.
00:03:39.978 - 00:04:05.962, Speaker A: So now we know a little bit more about the different tools and techniques we can use. When we do in fact get stuck. We can use something like chat TBT forums to ask questions. We obviously want to Google search, and especially for this course. You definitely want to make sure you use the discussions channel. But I wanted to give you some very specific tips about working with this course. Number one, limit yourself triaging to 15 or 20 minutes.
00:04:05.962 - 00:04:39.078, Speaker A: For example, if we're trying to compile our priceconverter Sol and maybe we forgot to add the address in here, right? And we're going to go ahead and compile and we're getting this error. This is exactly one argument expected for explicit type conversion. Now, this should be pretty obvious what the error is. Hey, it's expecting one argument and we obviously just removed that argument. But maybe you're having a really hard time and you're trying all this different stuff and you can't seem to figure it out. Limit yourself to 15 or 20 minutes. We do not want to be messing around for so long that we can't figure something out.
00:04:39.078 - 00:05:06.138, Speaker A: Something like this would be very easy for us to hit, compile, copy this error, go to chat GBT, and say something like, hey, I'm getting an error. Compiling my solidity. Here is the error. Do three backticks, paste it in here like that. Three backticks is markdown. And like we said in the video, we want to use delimiters to clearly identify what is code versus what is not. Oops.
00:05:06.138 - 00:05:34.530, Speaker A: And I hit enter. Whoops, the daisy. We're actually going to hit stop generating and we're going to copy paste the question again. Now we're going to say, here is my solidity, it's wrong, and then we'll copy the solidity line. Once again, three back ticks. We'll say solidity here, we'll paste it in three back ticks to end it, hit enter, and it'll probably give us the answer here. And sure enough, the error message suggests that you need to provide an address when using explicit type conversion.
00:05:34.530 - 00:06:09.954, Speaker A: So we go, okay, whoops, we need to actually add an address in here. It gives us an example, and we can go back to our code and paste that address in here and be good to go. So limit self triage to 15, 20 minutes. That's going to be the first tip. Number two, don't be afraid to ask AI, but don't skip learning. The purpose of this course is for you to be able to learn everything here. AI is going to get things wrong, and it's only the people who actually have learned what's going on under the hood who are going to be able to call out when AI gets something wrong.
00:06:09.954 - 00:06:36.958, Speaker A: When AI gets something wrong, it does something called hallucinate. And we talked a little bit about that in that AI video we just watched. So hallucinations are when the AI makes something up that it thinks is right, but it's completely wrong. And that's something we absolutely need to watch out for when we're coding and when we're learning. A perfect example of this is with foundry, which is a tool we're about to learn very soon. In order for us to install foundry, we actually need to run this command right. Get foundry sh.
00:06:36.958 - 00:07:14.234, Speaker A: It's the first thing that it tells us to do. At the time of recording chat, GBT has not been trained on the foundry tool. So if I ask it a question, like, I'd like to initialize a foundry project with solidity, can you show me how to do that? And we'll hit enter. So the first sentence out the gate is wrong. It's not aware of foundry, so it tried to guess what foundry was, and it got it wrong. It is not a rust paced framework for building blockchains at all, and it is directly related to solidity. So it's really important that we use AI to augment our learning.
00:07:14.234 - 00:07:43.666, Speaker A: But we don't skip over the learning. With AI, it's really good to bounce questions, good ideas off of. But in order for us to be even able to recognize when foundry is hallucinating and making stuff up, we need to have that knowledge ourself. Step three of course, use the forums web3 education dev will have a place for you to ask questions. But in the meantime, definitely be sure to use the foundry. Full course discussions. Use this to your advantage, and use this to help other people out who have questions.
00:07:43.666 - 00:08:19.390, Speaker A: This is a community project. We're all going to be helping each other out. Learning number three, Google the exact error if AI doesn't know, the forums aren't no, Google the exact error. Maybe somebody else has come across this error previously, asked the question online, and you can just google it. And then of course, post your question in stack exchange or piranha. And like we said in that AI video, you want to use markdown and format your questions as best as possible. So if you're unfamiliar with how to use Markdown, if you're unfamiliar with how to format your questions again, please be sure to ask chat, GPT, or some other AI how to best format your questions.
00:08:19.390 - 00:08:46.742, Speaker A: You can even simply say, ask chatgbt. Could you give me an example of a well formatted stack overflow question with CoD or code? And it'll actually give us a really good formatted question, so it gives us the question. It formats the code for us. It's using this with the three backticks that I showed you in order to get this code block here. It's using three backticks, and it's being very verbose in giving all the details of the question. So be sure to ask questions like chatgbt. Awesome.
00:08:46.742 - 00:09:49.574, Speaker A: Again, let's say we're in here, we compile we get this error, exactly one argument expected for explicit type conversion. If we copy this error, go to Google, we paste just the error in, we'll remove our specific code. Looks like the first thing we get in Google is actually contract inheritance, and we can see that this is actually exactly the error that we're getting. It looks like this does actually explain the answer, but it's a little bit confusing to understand here. So maybe you would copy paste this into chat GPTS context, right? There's a lot of creative ways you can approach debugging some of your issues. Obviously when you're out in the wild and you're actually building things yourself, obviously the education site and the discussions channel of the GitHub repo, the people in these aren't going to have context for the new creative thing that you're working on. So I want you to get used to doing that methodology that we're teaching here, right? Asking your AI budy if your AI buddy doesn't know googling asking questions on stack exchange Ethereum asking questions on Piranha Piranha is arguably better because you're asking your questions in a decentralized location as opposed to a centralized server.
00:09:49.574 - 00:10:42.314, Speaker A: But I definitely want you to practice asking questions and go to Piranha, go to stack exchange, make accounts for these so that when you do run into an issue, because you will, you'll know where to post them. I highly encourage you to pause and post a question on one of these forms right now, just so that you get used to it, just so that you get out of your shell and you're going to suck at asking questions in the beginning. And that's okay. You will get better at asking questions as you continue with this course. Asking good questions is a skill in itself, and if you learn how to ask very good questions, that's the secret sauce to being amazing at AI prompting as well. Now, the final step in all of this is actually going to be posting an issue on GitHub. Git, a surprisingly incredibly important part of being a software engineer and being a developer in web3 is interacting with the community.
00:10:42.314 - 00:11:41.630, Speaker A: The vast majority of these tools that we're working with are going to be something called open source, meaning that the code associated with them is actually available for anybody to view. This tool foundry that we're going to be working with is one such example, and if you see it has this issues tab where there's just a ton of issues, people are posting while using this tool. This is how code is able to be improved and move forward all this code is public for people to use and work with, and if there's a question that isn't answered, you can post here and tell the developers of this tool, hey, I'm running into an issue, maybe we should make a project improvement. I would say be very respectful with the way that you make issues. You definitely want to do some searching on issues to make sure that nobody else has asked the question that you're working with. And be assured to use these other resources first, like Piranha, like stack exchange. But in the future, once you leave this core, it's going to be incredibly important for you to participate in the ecosystem by making issues, by making pull requests, and actually improving some of the tools that we're going to be working with yourself.
00:11:41.630 - 00:12:27.342, Speaker A: Even Ethereum has GitHub, and if there's any improvements that you want to make, you can add an EIP to actually improve Ethereum. We'll talk about eips some more later. You can improve some of the clients that Ethereum runs. So interacting with each other is incredibly important. And in fact, if you don't have a GitHub, we are going to get you set up with GitHub right now, because GitHub is the platform that most developers use to share code and write code and interact with code in between each other. So if you don't have a GitHub, let's sign up right now and we're going to use the GitHub to create our own portfolios of all the different cool coding projects that we've created. This way when you go to apply for a job, you can say, hey, go look at my GitHub, I've got all these really cool projects, so we're going to make you a GitHub right now.
00:12:27.342 - 00:12:55.540, Speaker A: If you don't have an email, you're going to need an email. I made a burner account just for this video, and I'm also going to walk you through formatting a question. And I know I'm belaboring the point here, but I really, really want to stress the importance of formatting these questions really well. So we're actually going to show a clip from my past video, so we're going to be using the full blockchain solidity course js. But again, for this video, just be sure to use the GitHub repo associated with this course and not that other old GitHub repo. All right, let's watch this video.
