00:00:08.280 - 00:00:30.424, Speaker A: You all right, let's get started now with our lesson three. Remember, everything is in the GitHub repository or the web three dev education. If we scroll down once again, we can scroll to lesson three. And again, a lot of this is undone, but it'll be done for the actual video. Scroll down to lesson three. And we have lesson three. Remix storage factory.
00:00:30.424 - 00:01:11.096, Speaker A: All the code that we're going to be working with is in this remix storage factory F 23 GitHub repository. All of the GitHub repos associated with this course end with f 23, which stands for Foundry 2023. I'm going to first do a brief walkthrough of what we're going to be coding for this lesson. So for now, just sit back and relax and enjoy. For this lesson, we're going to be working with three new contracts. Our original simplestorage Sol, which we're going to do a slate modification to a new five storage Sol, or add five storage sol and a storage factory sol. Our storagefactory Sol is actually going to be responsible for deploying new simple storage contracts.
00:01:11.096 - 00:01:35.940, Speaker A: Yes, other contracts can deploy contracts. Not only is this going to be able to deploy other contracts, but it's going to be able to interact with other contracts as well. What we could do is we could deploy this to a remix VM. Hit deploy. We'll compile all of our code, go to a remix VM, scroll down to select the contract. We're going to select storage factory, not simple storage. Deploy this.
00:01:35.940 - 00:02:27.908, Speaker A: See that contract that we just deployed down at the bottom? And you'll see our top function is this function called create simple storage contract, where if we pull up our terminal and we click create simple storage contract, you'll see we get a new transaction at the bottom. And this transaction is the transaction that we deployed, a simple storage contract from our storage factory contract. Now we can actually go ahead and interact with our simple storage contract. Remember, in simple storage we have a function called store, which takes a favorite number. We can actually call this store function on our simple storage contract from our storage factory contract using this f store function. So we'll add the index of our simple storage contract, which, since we only deployed one so far, it'll be at Index Zero and we'll say our new favorite number is one, two, three. We'll hit F store and we'll click SF store at 0123.
00:02:27.908 - 00:02:56.204, Speaker A: SF store stands for storage factory store. So we're going to store the number one, two, three on index zero. And again, don't worry about this making too much sense yet. We're going to explain this all in a minute. Now, if we hit SF get of zero, we'll go ahead and get back one, two, three. We're saying let's get the value of the simple storage contract stored at index zero, and we do indeed get one, two, three. Additionally, we have this list of simple storage contracts, array or list, and it's only size one right now.
00:02:56.204 - 00:03:10.640, Speaker A: But if we type in zero here, we get back the address of that original simple storage contract that we deployed. Additionally, in this lesson, we're going to learn about a ton of incredibly important solidity features, such as imports and inheritance. Without further ado, let's get froggy.
