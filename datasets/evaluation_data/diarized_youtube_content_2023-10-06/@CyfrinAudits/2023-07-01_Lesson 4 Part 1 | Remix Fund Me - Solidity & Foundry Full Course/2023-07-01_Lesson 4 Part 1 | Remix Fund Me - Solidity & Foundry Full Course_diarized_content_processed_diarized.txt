00:00:08.280 - 00:00:40.096, Speaker A: You all right, everybody, welcome back. We are now headed into lesson four. This is going to be our remix fund me. And once again, you can find all the code associated with this lesson in the GitHub repository associated with this course and also web three dev education. And let's do a quick walkthrough of these contracts before we actually start coding anything to see what we're going to be doing. We're going to be creating one contract, fundme Sol, but we're also going to have another file called Priceconverter Sol, and we'll talk about that in a little bit. The fundme contract is going to be our main contract.
00:00:40.096 - 00:01:18.384, Speaker A: This is going to be an example of a crowdsourcing application or a way to raise money. You could think of it as a web three decentralized kickstarter. We'll allow users to send Ethereum, polygon, avalanche, et cetera, or really any native blockchain cryptocurrency into this contract and allow the owner of the contract to actually withdraw all the funds for them to go spend on their new project. And we are going to actually deploy this contract to a testnet. And remember, use the testnet transactions sparingly. But if we deploy this to a testnet, we scroll down, we actually see that we have a couple of buttons and a new color button. We'll actually get a new red button for our fund function.
00:01:18.384 - 00:01:54.520, Speaker A: A red button indicates that a function is payable and we can send native ethereum or polygon or avalanche or whatever the native cryptocurrency of the blockchain we're working with is. We additionally will indicate a minimum USD amount to send to the contract. So funders have to spend at least $5 worth of Ethereum in order to call this fund contract. So if we go up to the value section, we can actually send some value with this transaction. And again, don't worry about this making sense yet, but if I want to send 0.1 ether, I'll grab that amount in way, paste it into the value section here, I'll scroll down, I'll hit the fund button. Metamass will pop up, I'll confirm.
00:01:54.520 - 00:02:32.852, Speaker A: We can see at the top the current balance of the contract is zero. And we'll wait a little bit for the transaction to finish going through. And after the transaction finishes going through, we can see an ether scan. We have a balance of 0.1 eth, and we can also see that after remix, after a slight delay, then we can allow the owner of the contract to withdraw those funds right now, the owner of the contract is also us, and after this transaction goes through, we'll see that balance removed from the contract, and it'll go back into our wallet. And as you just saw there, if we held our metamask up for long enough, eventually it would pop back into our metamask. Are you excited? Well, you should be, because after you complete this section, you'll actually know most of the fundamentals of working with solidity.
00:02:32.852 - 00:03:08.400, Speaker A: We're going to be going over a lot of advanced features in this section, and I'll let you know the specific parts that you don't need to fully understand quite yet. There's going to be a couple parts where, if it doesn't totally make sense, just keep going with the course, and as we get later into the course, you'll figure out why they make sense. But it might be a good idea to write down the questions that you have to ask, either an AI on the GitHub discussions or web three education dev. Make sure, of course, to use the discussions tab in the foundry, full course f 23 to ask questions and interact with other developers who are taking the same course, or go to web three dev education to learn more. All right, let's get froggy.
