00:00:11.110 - 00:00:52.646, Speaker A: All right, now, welcome to lesson seven, the foundry Fundme. If you're on the GitHub repo assisted with this course, you can of course scroll down to lesson seven here, and the code is all going to be right here. This is going to be the first code base that you actually push up to GitHub yourself. Doing this is an incredibly important step in your smart contract journey. Yes, being on GitHub or GitLab or radical or some version control system like this is incredibly important for being a part of the web3 ecosystem. We're going to be using GitHub because it's the most popular at this time. So let's do a little walkthrough of what we're actually going to be building here.
00:00:52.646 - 00:01:33.694, Speaker A: We're going to be using the fundme contracts that we created before. And if we go into the SRC of this folder, you can see we have our fundme contract in here, and you can see we're using the more advanced syntax here. We've got all caps for our constants, we're using I underscore for our immutables, s underscore for storage or state variables. And I know we talked a lot about storage and state, and we didn't really explain what it was, though. And so additionally, we're going to finally learn what this storage stuff really means. And we have an example that we're going to go through called fun with storage. We're going to learn how to, in a professional way, deploy this code using foundry scripts.
00:01:33.694 - 00:02:19.630, Speaker A: We're also going to learn some really cool stuff about interacting with storage. We're going to learn how to make it easier to deploy these contracts on different chains that require different addresses. And we're going to learn how to use foundry scripting to actually interact with our contracts in reproducible scripts instead of always from the command line. We're going to learn how to make our contracts more gas efficient so that people spend less gas using our transactions. We're going to learn a little bit more about advanced debugging techniques and more on making a professional foundry setup. And additionally, we're going to learn how to write really fantastic tests for our contracts. Writing tests is an essential piece of becoming a powerful and effective smart contract engineer.
00:02:19.630 - 00:03:14.552, Speaker A: So a lot of this lesson, we're going to be writing awesome tests. When you get to the end of this project, you should 100% push this up to your personal GitHub and share this on Twitter, on LinkedIn, on lens protocol, whatever, because this is going to be a huge huge step in your journey. And at the end of this, you're going to understand what all of this code does and be able to use it and talk about it effectively. So with all that being said, let's go ahead, let's jump into the code and let's start building our foundry fund v. All right, so here we are in our vs code, and we're in our foundry f 23 folder, which if we type ls right now, we just have our foundry simple storage. This is the only folder that we've created, so let's create a new one. We'll do Mkdir, which stands for make Directory foundry fundme f 23, and hit enter.
00:03:14.552 - 00:03:58.784, Speaker A: Now if we hit ls, which stands for list, we can see these two folders and we can type code foundry tab, F-U-N-D tab, and it'll autocomplete and we'll hit enter and this will open up a new vs code in that folder, which of course is going to be blank. Now if I pull our terminal back up, we can run, and we pull up the Explorer, we can run our command to initialize a blank foundry project. So we can do of course forge in it or forge init force and we get our basic project set up here. Fantastic. So we have some tests, SRC and scripts. We know what SRC is. We haven't worked with tests, but we have worked with scripts.
00:03:58.784 - 00:04:28.124, Speaker A: Most of the time, foundry will come default with this counter thing. And if your foundry doesn't come with these, don't worry, just watch for now. But if it does, you can play along with me. If we look in SRC or source, we see this counter sole contract. It's a very basic contract. We have a set number which takes a UN 256 new number as an input parameter and changes variable to whatever that new number is. We also have this function increment which just uses this plus plus syntax.
00:04:28.124 - 00:04:38.910, Speaker A: This plus plus syntax is equivalent to saying number equals number plus one. So whenever we see plus plus, that's the same thing as number equals number plus one, we have.
