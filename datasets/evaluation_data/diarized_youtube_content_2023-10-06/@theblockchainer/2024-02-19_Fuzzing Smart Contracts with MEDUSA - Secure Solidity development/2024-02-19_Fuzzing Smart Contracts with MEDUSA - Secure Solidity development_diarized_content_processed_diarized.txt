00:00:00.970 - 00:01:01.550, Speaker A: Hey guys, how's it going today? I want to speak about Medusa because I have already spoken some videos about a hidna. And definitely if you're using a hidna, it really is crucial to take advantage of Medusa as well because basically Medusa is inspired on a hidna and you don't need it actually to write test specific for Medusa, you reuse the ones written for a hidna. So what we will do today is go into the repository where I wrote the test for a hidna, we'll configure Medusa and we'll get it ready for running for our. So yeah, some of the features they claim here. So yeah, Medusa is a tool from trade off bits. And yes, they say here is parallel fashion testing methodologies across multiple. It's what's the benefits in general, from my point of view it's much faster.
00:01:01.550 - 00:01:39.546, Speaker A: I like a lot the logs, not the logs. Well the results basically when it's failing it's showing actually some nice and clear logs. While as in the hidden, sometimes it's a bit not that much clear. To be fair, it's a combination of both. I think it's really good to use them if you're already writing with Ehidna. So for those that don't have it installed yet, I have here just under the nodes that I made while installing. Of course you have them here, the installation part and so on.
00:01:39.546 - 00:02:11.702, Speaker A: Yet I found some things that I had to add. So that's why I want to go in my notes and yeah, just follow the installation command. You can also download it. They have a binary in the repository. Actually I think I downloaded it. And then when you run it, just make sure you have one of the frameworks for compiling. You will have to use them for compilation and go.
00:02:11.702 - 00:03:14.998, Speaker A: You do have install go. So yeah, the thing is you need to clone this repository, I will add the link in the description and then you run go build while in there. And this what it does, if I remember properly, it creates another binary. And what you need to do then is to add the directory to your path. So you just go and you can open the inmac, the terminal and actually send you this. You can write this command to the path where the binary was added and you add it to your bash, bash RC or this one depending the one you're using on windows. You can go to system properties, environment variables and edit the path variable and then go, you know what, we will see this in the VS code so it will be clearer.
00:03:14.998 - 00:04:42.070, Speaker A: So let's go here what, you already see it open? Basically in the previous lessons we went through how to use a hint now in assertion mode, and I'm basically reusing the contract, just call it differently. And what we are going to do is, well, I just did actually an extra verification here, but just for the sake of adding something, because I saw this value was not used from the one from calculate. So once you have your environment prepared, let's say, even though you have your config file and so on. So it's very easy. After doing the previous installation, you come here and you need to run the Medusa init and it says prose configuration successfully. So it generates the Medusa JSON and it is here. Basically it's like if you would see all the commands, all the possibilities that you have for a Hitna, that you can add all those flags for different, or you can add it also in the config Yaml file, but you have them all here at once and you can edit those that you need, in this case the ones that we care about for now, it's here in the deployment order.
00:04:42.070 - 00:05:26.102, Speaker A: We're going to need to pass the contract that we want to execute. So where our tests are then for now, those you can leave it, you can set of course, some test limit to to control that. And since in this case we are using, let me see, assertion mode, then we need to go to Medusa. We have assertion testing. It's by default false. So let's switch it to true. And somewhere here we have property testing true.
00:05:26.102 - 00:05:54.830, Speaker A: Let's set it for now as false and save it. If I'm correct, it should be enough. So yeah, we have this test. It's not too relevant. It's just increasing and doing some assertion that it's the counter smaller than the previous one and so on. I just want to run it to show you how it looks. And maybe I will run it also with a hidden to compare.
00:05:54.830 - 00:06:32.262, Speaker A: So let's run it. It's basically with meadows of files. Of course, if you don't create the meadows adjacent with a meadows I init, or if you don't use it, you can also add some flags here and it is under here somewhere. But they recommend. Yeah, you can add it like that, the flags, but they do recommend to use the metus Json. So yeah, that's what we do, what we want to do. So when you run it, it's even going to fail.
00:06:32.262 - 00:07:32.046, Speaker A: Actually, at the moment I don't care much, but as I mentioned earlier, the logs are pretty nice. It's some colors here, it's kind of organized. It's going to tell you, well, the information that it passed and so on, and the reason why it fell in this case is probably because of the assertion is not true. And this is mainly we will get into checking the coverage for the back end and so on, but for now it's enough so you can set it up and you can start using it. I also thought of showing you in a more bigger, let's say code that I have. Don't mind this warning, it's just about it could be restricted to view. But for instance here earlier today I decided to also add Medusa in it.
00:07:32.046 - 00:08:08.682, Speaker A: This is just some tests I created for practicing creating variants. And yeah, I thought of running it in this case. Those were property based tests, so not an assertion. That's why they are returning a value and not asserting. So in this case we would like so that you see, you can add it to an existing framework that you have with a Hina test. So the same you just do Medusa init, come to Medusa Json. And again here we need actually the property testing, so it's true.
00:08:08.682 - 00:08:54.598, Speaker A: And make sure that this fits the prefix of your test. And we need to make sure that the assertion testing is false and we are hitting, yes, the Hina simple amm. So let's see, let's run it and see what we get here. You will have all the tests that pass all the information, it's the amount of workers used and so on. And you can also add some events for the bug in, but we will get in the back end previous I mean in next videos. So this is it for now. I hope you found this useful or interesting.
00:08:54.598 - 00:09:16.330, Speaker A: And yeah, this is just the beginning. So I wanted to introduce it so that you guys start playing with it and then we will start in coming videos to get deeper into it. So if you like it, make sure to subscribe so you don't miss the next videos. And hit the like button guys. So thank you and take care. Bye.
