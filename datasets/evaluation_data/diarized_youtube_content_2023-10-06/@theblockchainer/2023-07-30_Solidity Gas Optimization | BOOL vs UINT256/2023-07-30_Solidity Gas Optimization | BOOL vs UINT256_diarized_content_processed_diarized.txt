00:00:00.490 - 00:00:58.798, Speaker A: Hey guys, how's it going? Look, I was checking a couple of days ago this report, and I noticed this, I noticed how much gas is being saved in this simple, in this issue and I wanted to investigate. So what I did in this case is I went to remix and I created a contract where I could test the approach, I mean the issue itself and see how much gas I could save. So this is just a contract with a whitelist. And in this mapping, we're mapping the address to a boolean. And I added a few functions, but basically to add or remove users and to verify if the address is whitelisted. If you want we can check the consumption of each execution. But actually you know what, to save some time, basically I did that already.
00:00:58.798 - 00:01:31.494, Speaker A: And as you can see the numbers here, it's the cost for each. So the one in the constructor is the cost for deploying the contract. And these other ones, it's for every time the function is used. So basically here it's going to turn to true. The default state of a boolean is false. So first it will be a change from false to true. And here, well, from true to false.
00:01:31.494 - 00:02:19.750, Speaker A: That's very simple. Here it's just reading the constant, reading the mapping. Sorry about that. Okay, so how to get this amount of hash reduced, what can we do? So let's see, let's jump to this other contract and I'm wondering if you can notice right away what's the big change here. But the thing here is that I have changed the mapping. The mapping is not anymore pointing to like the address is not mapped to a boolean, but to a u into 56. And that's why we get to reduce so much the amount of gas spent.
00:02:19.750 - 00:03:09.966, Speaker A: So the main thing I've done here, it's defining these two constants. And you might notice that I start with one and two. And well, the reason to not make it zero and one, it is because changing a value from zero to an on zero value, it is actually expensive as well, so it's not convenient. Again, the default value of the un 256 is zero. So the first time we would change, okay, let's go to the add user function. These values are the ones from the previous implementation. And these values are the ones with the new mapping to the UN 256.
00:03:09.966 - 00:03:51.074, Speaker A: And why there are here a couple of two more values. And is because as I mentioned, the default value of a uni 256 is zero. So the first time we changed to zero to non zero. So from zero to the number two, because we are adding it to the whitelist. So yeah, that's the one. It is just a little bit cheaper, right? So that will not make that big impact. However, in general, we can see that all of them are cheaper here, all of the functions are cheaper.
00:03:51.074 - 00:05:14.260, Speaker A: The big difference, it's in this case because once you have, for instance, let's say we have added a user and it went from zero to state added, which is number two, and when we remove it, it would change the state to number one. And the key point comes next because every time we would go back to adding that user. So changing the constant to the whitelist address to number two, it would cost only 7710 instead of that big amount. So now imagine that, okay, this is a simple example, let's say, because this change is not going to happen often, right? But let's say that you have another mapping that is used in many occasions. That means that every time you're almost going to save 20,000, because changing from true to false, it was this much expensive all the time that you were adding or removing. And I am going to show you how in a protocol it will save almost 300,000 gas. And that's here.
00:05:14.260 - 00:05:49.220, Speaker A: And I will show you in the raw implementation because it's not visible there. As you can read here, they found 17 instances and there are different type of mappings, as you can see here. And that is why every time you notice such a mapping, make sure to report it because you can save so much gas. Thanks guys and see you next time.
