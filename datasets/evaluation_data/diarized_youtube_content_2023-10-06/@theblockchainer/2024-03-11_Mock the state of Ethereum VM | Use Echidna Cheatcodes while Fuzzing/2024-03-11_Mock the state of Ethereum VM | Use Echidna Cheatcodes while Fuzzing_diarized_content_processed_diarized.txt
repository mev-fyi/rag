00:00:00.090 - 00:00:48.540, Speaker A: Hey guys, have you seen how experienced security researchers write their POCs? They are able to alter the state of the EVM mock data and simulate actions done from different addresses. All that is done with chipcodes. Now, the ones that you might be more familiar with are the ones with foundry. I'm sure you have seen before this prank, like seeing with this VM prank, and then an action is done. Or you have seen how people use deal to set some balances to a specific address, or for instance how they change the block of the transaction. So today I want to show you how to use the cheat codes on Eurekina and Meadowsa tests. And that is with using the.
00:00:48.540 - 00:01:54.046, Speaker A: So here you can see that HebM is an EVM environment mainly dedicated to testing and exploration. Its feature is a set of cheat codes which can manipulate the environment in which the execution is run. Now here we have what is the definition of the functions on the interface? There is a short explanation. And yeah, so we can actually use this in our HIdNa test because usually we were aware of how to use that in foundry, it's in the foundry book and so on. But yeah, I've got some questions from people asking how to do that with Hida and I thought it might be worth showing. So yeah, those things you've seen here, it's mainly you can add them to your repo or whatever you are testing. In this case, I've added, this is the repo I've been using for the hidden medusa videos and what I made, it's create the interface.
00:01:54.046 - 00:02:34.058, Speaker A: So I just added inside the source, for instance. And yeah, it is the interface and I basically copy pasted those things and I have some of them. I'm not going to get into how to use all of them and so on. I just want to use it the way you can add them and start using them and then you are free to start investigating using them and see whenever you will need them. So now let's see. So once you have this added and yeah, once you have this added and you have, like I'm reusing again some of the previous contracts. So we don't care much about what's in the implementation.
00:02:34.058 - 00:03:09.974, Speaker A: Then you create your new contract where you're going to create your test. What you need to do is you will import it in this contract, and we're also importing the contract that we want to use. And the first thing we want to do, I'm going to grab this code from somewhere else. We are going to define the address of the contract that we want to use. Here are our cheat codes. So yeah, in this case, now we have access to all the functions that were there. So all those cheat codes.
00:03:09.974 - 00:03:52.214, Speaker A: So I know, for instance something that you might need to use sometimes it's when you need to do some simulations of Alice, I don't know, sends some ether to Bob, for instance. Then in this case you're just going to use it like with foundry. If you haven't used it, then you know that you can use. In this case, for this situation you can use dill. I think if I click, yeah, it tells you that you need to add the user. Okay, I'm going to define, I have here some user, for instance, that it's a nice practice to have as well. So yeah, I have this user one.
00:03:52.214 - 00:04:45.142, Speaker A: So I'm going to add here the user one and the amount. I know we're going to add five ether. So yeah, here we are already covered having user one, some balance, giving him some balance so that later in the test if it will be needed, we're not going to create such scenario, but yeah, it's a way for you to know. So let's create some test and let's see how we can use some of the cheat codes I mentioned earlier. Let's code it, whatever test checking cheat codes, we make it public for hidden. And there we go. So yeah, we're going to use.
00:04:45.142 - 00:05:23.810, Speaker A: So at least I'm going to share the ones I've used the most. So that's mainly assume that's warp prank. I mean prank probably you have seen it a lot and it's the most used and yeah, that's it. In foundry you have start prank and so on. You don't have that here. So anyways you can handle in general with prank alone. So now what we want to do, let's see, I am going to define a variable because we are going to change the time with warp.
00:05:23.810 - 00:06:18.280, Speaker A: Let's see, because I want to be accurate, describing for instance, what warp is. Yeah, I mean, I don't want to make things up but yeah, warp is it sets the block timestamp to X. So yeah, X is what we're going to define. So let's start saying that, for instance, the initial time, it's block timestamp, right? I'm sure you have seen block timestamp used in many places. So the thing that we will do, let's start adding this. We want to move the action to ten days in the future. In the future.
00:06:18.280 - 00:07:25.190, Speaker A: So we would use the one chip code that we've mentioned we would use warp and see, that's the X that was said. So I know we can add here that the initial time would be block time sum. I mean, this is a simulation or just not a specific test, but this might be used in some specific tests where I know there is some lock so that people cannot withdraw or can withdraw. So I've tested such scenarios that it's not meant to be allowed for a user to take some money after this time, for instance. So nice invariant test is to check that you're actually not able to do so. So in this case, let's say that, I know in this case we call it this initial time, but imagine there would be some lock time or whatever. So we would add here that initial time plus ten days, for instance, as mentioned in the comment.
00:07:25.190 - 00:08:55.720, Speaker A: So we are going to test what happens when we do this action after in this state, in this stage. What else? What we want to do. Okay, you know what, let's say that we are going to be using the assertion mode and we want to pass here some. We want to make use of the faster, and I know we're going to pass an amount since we will pass an amount to that incrementor. However, we want to limit the oR, I know, maybe not limit, but we want to filter, I don't know, for some reason, let's say that, okay, let's add here the comment we want to filter the faster input and for some reason we want to here we're going to use assume. So we want to assume that amount for some reason is specified in the specification needs to be higher than this. Because I know sometimes, maybe this is not the scenario, but sometimes if you have the test running, it might be failing or reverting because overflow, that happens, at least I've seen it happen a few times.
00:08:55.720 - 00:09:31.474, Speaker A: And that's not an expected result that you want. It's not relevant. So you want to protect it from this and filter the inputs that the fascia adds. So yeah, it can be that. It can be whatever boolean you want to add here so that it filters those inputs out. So we already have the place in time where we want to do this. We are filtering the amount now let's say that we want someone specific since we have added some balance for user one.
00:09:31.474 - 00:10:14.466, Speaker A: Let's say that we want to set the user that will be triggering the next call. The next call, yeah. And how we will do it. This one probably, you know, it would be with prank here. We just need to add the sender and that will be our user one. And yes. So I think we can call this, this would be the preconditions, more or less like this is just for the test, but this two, it would be a precondition of the test.
00:10:14.466 - 00:11:03.290, Speaker A: So now what we want to do is the call, basically, now we make the call and just keep in mind this is not relevant, but let's say we. Okay, we need to call actually in the constructor, we need to instantiate this and deploy it. Incrementor new and incremental two. There you go. So now we can use it, I guess. Oh yeah, I need to define it above here. Incremental two, incrementor.
00:11:03.290 - 00:11:48.634, Speaker A: There you go. Now it's happy. So, yeah, now we want to call it and use one of its function, it's increase. And here we would be passing the function parameter. So this more or less how? Well, now you will be able to use the chitcodes with a hidden, and this is going to be super useful for writing the test, for writing Pocs and so on. And yeah, remember this is just a dummy test, but I think you got the idea. If you're familiar with foundry, hopefully with foundry chitcodes, now you can also add it with a hidden, so you can see it has, so it doesn't have all the options that foundry has.
00:11:48.634 - 00:12:03.000, Speaker A: But still it is growing in the possibilities and it allows many useful things already. So I hope you enjoy it. I hope it's been useful. And yeah, see you next time. Take care.
