00:00:00.170 - 00:00:45.066, Speaker A: You. Hey there people. I'm the blockchainer and I have been involved with web3 security and smart contracts with solidity for a few months now. Recently I discovered that the demand for rust smart contract developers and auditors is much higher than I expected. And since learning Rust has been running my mind for a while, I decided it's time to start the approach I chose to learn rust is not going step by step, but I want to go all in directly to understand how to write and audit smart contracts. And since I have solidity background, I decided that I would start by grabbing a smart contract, retain solidity, and implementing it in rust. I had a good experience learning in public as it encouraged me and others to keep pushing for more.
00:00:45.066 - 00:01:22.360, Speaker A: So this time I started to log every single step I took and every single thing I learned about smart contracts with Rust. I didn't prepare any fancy slides or similar. I will be going through my notes and commenting on how I got to those things if needed. Let's start then. So the first thing I had to install roast and I got this command from the main docs. So just make sure to go here and there will be any other things you might need to install like Xcode and so on, so on. I already had that on my laptop, so I didn't need it.
00:01:22.360 - 00:02:51.460, Speaker A: So yeah, once I run that there was this prompt and I had to select the default installation. If you know more details about it and want to customize it, then of course then to configure the current shell, you can either create a new tab, open a new tab, or just run this on your command line and you can just as usual when you install a package, just run the rust three and the version to make sure that the installation has been successful. You can keep your rust installation up to date with the latest version by running rust up update, but probably if you just install it now, it will be the last one now. Then I discovered about since I am going to use vs code, I found this extension about Rust analyzer and that's basically so that it highlights the compilation errors and so on, so that it detects the rust language. Next thing, the so called cargo when you install rust with rust app with a command mentioned above, the toolset includes cargo, among others. You can also get cargo, the rust package manager, to help download rust dependencies and build and run rust programs. There is a cargo new and that's basically to create the project.
00:02:51.460 - 00:03:32.678, Speaker A: So as you can see, it works like with solidity. You can open with foundry or with hardhat, a new project, and it generates some files. In this case, it generates a main RS git ignore and cargo tumble. Let's move forward now. As I mentioned, I want to start learning ROS by converting a smart contract written in solidity. So let's convert the smart contract below to rust and learn the language as we build it. You might recognize this contract is part of the Patrick's Collins course that I used to learn solidity.
00:03:32.678 - 00:04:36.914, Speaker A: So I think it's a very good example of a simple smart contract. Now, what's the rust equivalent of a contract declaration in solidity? In rust, there isn't a direct equivalent to Soliti's contract keyword, since Rust is a general purpose programming language, whereas solidity is designed specifically for smart contract development on the Ethereum blockchain. However, when developing blockchain applications in Rust, one typically uses a struct to encapsulate data and IMP or IMPL block to define methods operating on that data, somewhat similar to a solid contract. Here's a simplified version of the solidity smart contract that we have above. Didn't want to start with the whole translation, the whole conversion, but yeah, so looks different at first. Yeah, for sure. It was surprising to not use one keyword, but as it says, to use the struct and the implementation, we can see that the simple storage is the same.
00:04:36.914 - 00:05:17.566, Speaker A: And yeah, let's go through my notes. The simple storage is defined as a struct instead of a contract. The store and retrieve methods are defined within the IMP block associated with simple storage. We added a new method as a constructor, which is the common pattern in rust. We can see it here. It seems like a function because it's like the Fn, which I understand goes for function and so on. The pub or pub indicates that the function is public, and this arrow is the equivalent of the so called returns in solidity.
00:05:17.566 - 00:06:03.540, Speaker A: We can see that in the retrieve one. Now, where are the state variables from solidity in rust? Because here it's something that caught my attention. Why it's not at my February number? Why it's not in here? As you can notice, my February number has been moved from the main block or imp. In Russ, the IMp block is used for defining methods associated with a practical struct, enum, or trade. These methods can operate on instances of struct or enum and can access and modify their fields. Now, here are some of the elements placed outside the input. There are struct anonyms, definitions that the actual definition of structs and enemies are placed outside.
00:06:03.540 - 00:07:11.314, Speaker A: Also, function definitions that are standalone functions that are not associated with a particular struct or random go outside. Constant definitions from other languages I'm familiar with. Sometimes some constants are just placed outside a class, so this seems not a bit different but similar. Then the use statements or imports are also placed outside and some model definitions which I'm still not 100% what is it about? But we will figure out together. And here is what goes inside the inflow. The method definitions which are functions that can operate on an instance of the structure null and are defined inside the inflow. They always have a self or ampersand self node self parameter which refers to the instance they are operating on, and associative function definitions that are related to the struct or enum but do not operate on an instance of it are defined inside the implog, but do not take a self parameter.
00:07:11.314 - 00:08:09.818, Speaker A: The new function which is often used as a constructor, we've seen it above, is a common example of an associated function. I'm wondering if there's actually any more usage for associated function definitions, but let's see, I guess yeah, which takes me to the next question. Related I thought that I was wondering how and when to use the mute self or self like ampersand self and so on, because I saw that here in the functions, as you can see, some have that, the other one does it, then I can see self use here and so on. So it was a bit confusing. I want to know why things happen. Right, so let's go back to that. So in that self and percent self and mute self are used within metal signatures in an imp block to specify how the method accesses the data of the struct it's associated with.
00:08:09.818 - 00:09:13.622, Speaker A: Here's a breakdown, wanted to define each of them and when to use it and how. Cell the ownership transfer when a method has self as its first parameter, it takes ownership of the instance. This means that the instance can no longer be used after the method is called, unless the method returns the instance. How to use it this typically used for methods that transform self into something else and where it makes sense for the original instance to be consumed. Now, when I read this, it was not totally clear, so I keep digging and I want to show you more details about it. So I want to show you now both how would self be used and what would be the equivalent in solidity. So yeah, I got this code and it is passed here in the parameter, and as it says, the self will be dropped at the end of this method.
00:09:13.622 - 00:09:47.506, Speaker A: Now in solidity, the equivalent to ros self is this. However, solidity doesn't have the concept of consuming a contract instance like in rust, but let's say it's more or less applicable. And please, if anyone is listening to this and knows differently, it will be highly appreciated by everyone to just correct anything that I might not be correct about. Now. I hope providing these kind of examples is help you understand it. So let's continue. Now, the amperson self, it's an immutable borrow.
00:09:47.506 - 00:10:30.946, Speaker A: When a method has amperson self as its first parameter, it borrows the instance immutability. This means that the method can read the data in an instance, but cannot modify it. Usage is used for methods that need to access the data of the instance, but do not need to modify it. To me, it sounds like a getter, but that's it, because it's using the retrieve. I'm wondering if it's more using other getters. So this an example that we get from the contract above with the retrieve and the amperson self. Now, the ampersand mute self mute stands definitely for mutable.
00:10:30.946 - 00:11:30.010, Speaker A: So the mutable borrow. When a method has this as its first parameter, it borrows the instance mutability. This means that the method can read and modify the data in the instance. How to use it is used for methods that need to modify the instance, as we can see with a store function. And it shows the mute self because we are passing a parameterized every number which we are going to use to override the existing one. Okay, at this point, when I was this far, then I was speaking with some people on discord and so on, and I was wondering if I was writing properly the code in rust with a plain rust. I was wondering because I was doing some research, and I found some different frameworks and so on, so want to make sure to not lose my time.
00:11:30.010 - 00:12:03.698, Speaker A: So I made this small parentheses here. So, yeah, as I'm writing, I've just discovered that the best way to continue learning to write smart contracts with rust is to base it on a specific chain. And after some recommendations, I will be basing the smart contracts to work with near protocol other chains. As I heard, it's an arbitrum. It's also with stylus and for Polkadot with ink. But, yeah, let's stick. I heard good things about it.
00:12:03.698 - 00:12:58.520, Speaker A: And anyways, it's not meant to be too different or complicated to switch from one another. So, yeah, it seems I need to add something in my terminal. So, yeah, this is the command I run on the terminal. And yeah, then let's go on. So I had some compilation errors of course, like usual, and the solution was to add the right dependencies as we mentioned I showed you when did the cargo new and the name of the project when we created there is this file, the cargo Tom file and I added this at this time that I'm recording. These are the latest versions. You can always double check which are the versions at the moment you are adding it so that you can add the last ones or the later ones.
00:12:58.520 - 00:13:49.590, Speaker A: So this is how my simple storage bras file looks like at the moment with integration to near protocol. Don't get scared, but it's changed a bit. I also included the add person function that was not in the simple version I added before. So yeah, this is where I'm at the moment. This is what I raise. I got to this so far I actually was investigating about all these things and those imports and so on. So I will continue investigating and of course after I got some important updates and some nice resources I will keep sharing with you guys so far.
00:13:49.590 - 00:14:24.880, Speaker A: Well I don't want to die but yeah there are some things like this which to me sounds a bit like the Prague mind solidity. But yeah, so far I've got this. Please let me know if you have any questions because I will research about it and I can add it in the next sessions that we have for learning rust from solidity. Smart contracts. Okay guys, so this is it so far. Let me know in the comments if you like it. I'm also sharing some small updates on the go on my Twitter account so you can follow me there.
00:14:24.880 - 00:14:38.340, Speaker A: Yeah, let's learn together guys. And go ahead and subscribe to my YouTube channel so that you can get the latest updates on this journey and also like this video please so that we can make it reach more people. Take care.
