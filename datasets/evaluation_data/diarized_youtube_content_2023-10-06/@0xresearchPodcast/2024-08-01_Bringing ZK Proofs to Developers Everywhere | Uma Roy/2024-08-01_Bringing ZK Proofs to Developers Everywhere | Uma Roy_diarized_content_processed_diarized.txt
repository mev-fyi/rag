00:00:00.200 - 00:00:48.726, Speaker A: The existing paradigm is you have to have this team of like 30 to 50 people who are all like very specialized, and then you hand code like a ZK system for the ZK VM. So you like write this very complicated circuit. It's very hard to audit. And the problem with having this team that's built this very complicated ZK circuit is that if someone else wants to take your technology and use it as a roll up stack or framework, it's very hard because they can't modify it. I think that's why when you look at the existing landscape of roll up stack stacks and like Ras broadly, you'll see that op stack and the arbitrum stack is really popular because it is very easy to modify. They've been used a lot. And so I think the existing shortcomings of ZK rollups today is that it's really brittle and not that flexible.
00:00:48.838 - 00:01:07.470, Speaker B: The Polygon Community grants program was launched with 1 billion tokens, all for polygon builders. Season one is live right now and features 35 million in Matic to support the next generation of polygon. Five builders on Polygon. These grants are for you. Join the aggregated future today by applying at Polygon Technology grants.
00:01:10.570 - 00:01:27.408, Speaker C: Nothing said on Xerox Research is a recommendation to buy or sell securities or tokens. This podcast is for informational purposes only, and any views expressed by anyone on the show are solely our opinions, not financial advice. Boccaccio, Ryan, and our guests may hold positions in the companies funds or projects discussed.
00:01:27.514 - 00:01:28.212, Speaker B: What's up, guys?
00:01:28.276 - 00:01:34.800, Speaker C: Welcome back to another episode of Xerox Research. Today we're joined by Uma, the co founder of Sixect. Thanks for joining us, Uma.
00:01:35.540 - 00:01:37.640, Speaker A: Hello. Thanks for having me.
00:01:39.820 - 00:01:44.120, Speaker C: Before we get started, do you want to tell us a little bit about what you guys are building over at Succsync?
00:01:45.020 - 00:02:18.820, Speaker A: Yeah. So at succinct, we're building the tools to make ZK easy and accessible to all developers. In particular, we're building a ZK VM, a ZK virtual machine called SP one that allows any developer to just write normal rest code and then use ZK. And we're also building a decentralized prover network so that any developer using SP one can generate proofs using the prover network without having to have their own infrastructure and get proofs provided by a wide variety of these provers on the network.
00:02:19.570 - 00:02:24.190, Speaker C: What inspired you guys to build succinct? What were some of the problems that you guys wanted to solve?
00:02:24.570 - 00:03:00.580, Speaker A: Yeah, so my co founder John and I, we had been working in the ZK space for a little bit in particular, had been working on some particular applications and use cases of ZK. And we had seen firsthand that ZK was really, really difficult. You had to write these custom circuits. It required a lot of specialized expertise. You had to have a deep knowledge of cryptography. And it took a really long time to take all these things to production. And we realized that ZK wasn't going to go mainstream or get adopted if it continued down that path.
00:03:00.580 - 00:03:22.620, Speaker A: And the holy grail of ZK has always been that people can just write normal code and it just works. And we also really believed in that vision. And that's what inspired us to build SP one, which to just make ZK really easy and accessible to any person, not just someone with an advanced cryptography PhD.
00:03:24.160 - 00:03:34.660, Speaker C: That makes sense. The SP One is a ZkVM. What does that exactly look like? And why are ZK vms needed?
00:03:34.960 - 00:04:11.902, Speaker A: Historically in ZK, you've needed to write your function that you want to prove as this thing called a circuit, where you basically write your function in terms of these primitive operations, like additions and multiplications and maybe some other primitives. But it looks a lot like coding with assembly, so it's super low level. It's very difficult. It takes a long time. With a Zk virtual machine, what happens is you have normal rust code. It gets compiled to a particular bytecode format. So in our case, it gets compiled to the Risc V Isa.
00:04:11.902 - 00:04:54.696, Speaker A: So similar to how solidity in the EVM gets compiled to the EVM bytecode. Then we prove the execution of RISC five with your particular program, with a set of particular inputs. Instead of proving your particular function or computation, we have a circuit that proves RISC five. And then any RISC five program can be proven by our virtual machine. Why that's really powerful is now you can just write normal code, compile it to RISC five, which is a standard compilation target supported by Rust's compiler. So it's a very standard target. We didn't have to modify the compiler or anything like that.
00:04:54.696 - 00:04:57.900, Speaker A: And then any rust code can get proven within SP one.
00:04:58.340 - 00:05:18.840, Speaker D: Well, that's awesome. So, kind of cuts down a lot of the development time. You don't need to know circuits to write it, you just need to know Rust or maybe some other kind of like LLVM. But, um, so when you were making this, what did you notice? Any of the trade offs it has over other VM environments or other types of like CK proof generation?
00:05:19.220 - 00:05:53.690, Speaker A: Yeah. So the main, I mean, the dream of just right Rust get approved. It is kind of the dream. And so the trade off, or like historically, why it hasn't been done, is that it's been really slow. So of course it's like similar to any normal program, where if you spend a lot of effort, you write it all in assembly, it might end up being faster than if you just write it in like a higher level language. And so historically, zkvms have been much slower than if you wrote circuits. One of SP one's like biggest innovations was that it was actually really fast and performant.
00:05:53.690 - 00:07:22.810, Speaker A: And so it kind of made ZK vms actually practical for the first time for real use cases. And there's like a bunch of techniques we have in SV one to make that possible, both on the ZK algorithm side and also on the performance engineering side. I guess one of our biggest techniques is this usage of, or this notion of precompiles, where basically one key realization we had is that for most workloads that people care about, for example, verifying the Ethereum state transition function for ZK rollups, or verifying a proof of consensus for bridging or really any of these things, most of the time, and most of the prover overhead comes from very repetitive cryptographic operations like hash functions and signature schemes. And those can be really expensive in a ZKVM, because you are spending a lot of cycles doing this very computationally intensive thing. And we realize that if you are able to have a specialized circuit for that particular operation and have that within your vm, you can get the best of both worlds, where you have the performance of circuits where you need it, and then you have the flexibility of the VM. For us, in our ZKVM SP one, we have precompiles for catch, act and Sha. These are very common hash functions used in Ethereum world and for a bunch of signature verification schemes.
00:07:22.810 - 00:08:06.860, Speaker A: That makes our VM super super performant and actually practical. So in practice, we've actually found that our VM ends up being a lot faster and a lot better than even the circuits we used to write. Because with our VM also, we can optimize it a lot, because it's so broad and it's such a big platform, that every improvement to it improves so many different use cases that we can spend a lot of engineering effort optimizing it. In practice, we've actually found that it's a lot better than circuits, and it's a lot easier to build in because it's just writing normal code. So it's actually kind of strictly better than the old paradigm. Yeah, in all dimensions, like latency, speed, cost and developer experience.
00:08:08.180 - 00:08:36.120, Speaker D: That's awesome. It's not often that in blockchain you get something like Pareto efficient with the trade offs are so much more with it. I can definitely see how those precompiles will make things a lot faster and easier. Just a couple of questions on that. Does succinct make all of the precompiles? Can other people make their own? If they can make their own, are they allowed to share to the rest of the network as well?
00:08:36.710 - 00:09:27.380, Speaker A: Yeah, so SP one is fully open source. And one of the reasons we made it like that, other than of course that being really important for security and auditability, like if it's not open source, who knows? What you're actually proving, is that we wanted anyone to be able to contribute a precompile to SP one. And actually a few external teams have already done this for like their specific use case. So for example, if you have a particular workload, it has a very specific computational bottleneck. You can write your own precompile and then incorporate it into SP one. For right now, actually, the Sysync team has written all the precompiles that are used because honestly there's not that many functions that are bottlenecks. And so the current ones we have are kind of enough.
00:09:27.380 - 00:09:39.750, Speaker A: But in the future we hope. We're like super happy to take external contributions from other teams for common pre compiles that we think will be beneficial to a lot of people.
00:09:40.050 - 00:09:56.710, Speaker C: Related to you guys, being open source is actually something that I read that you guys touch up on, is that you're modularly architected. I kind of want to ask about why this is important and I guess how other zkvms have gone wrong or they've done wrong in terms of being closed source.
00:09:57.330 - 00:10:55.650, Speaker A: Yeah, so I think first of all, being open source is just really, really important for security and auditability. Like if you don't know what the constraints are, then how do you know what's actually getting proven? And so open source from that perspective, I think is a must have. Open source is also really nice because as I said, now the community can add their own precompiles. They can modify it, they can build on top of it. So for example, some people want to verify SP one proofs on a layer like bitcoin or something like that, or different execution environments. And because it's open source, they can take the proof system, they can maybe modify parameters, and it's just really customizable and flexible. And I think, for example, you've seen being fully open source and modular has really helped something like the op stack take off and kind of become the canonical roll up deployment stack, because it's easy to customize.
00:10:55.650 - 00:11:25.762, Speaker A: There's no risk of, there's no licensing risk or anything like that. And so for us, we view it very similarly. Our prover network is where we think we'll be able to provide end users with value. So SV one is open source, but running it on your laptop isn't really a fun time. I think most people will want to use SP one via the prover network. So we feel really good about that. And we think that open source just makes it so that there's more community around it.
00:11:25.762 - 00:11:40.870, Speaker A: It becomes the canonical shelling point. VM, you can have it verified in a bunch of different environments, you can have a rich community of precompiles and. Yeah, I think that's why open source is really key to our strategy.
00:11:41.330 - 00:12:07.000, Speaker D: Yeah, that makes sense. So it's kind of like it also helps to bootstrap the proven network that you're also trying to build right now. And then. Speaking of that, I think that's something that's probably missing from the industry right now. Let's just say a decentralized, proven network. Is that something that you can talk about a little bit more and maybe even more generally for the audience? The proof supply chain?
00:12:07.420 - 00:13:16.268, Speaker A: Yeah, so I think today, generally, if you want to use generally, most teams are running their own provers in the cloud. One aspect of ZK is that the proofs are self verifying, so there's no trust assumptions. With teams just running provers in the cloud, that's totally fine, they can't generate false proofs. But I think there's a lot of advantages of a prover network. One is that it is important in the end that it is decentralized for censorship, resistance and liveness guarantees and things like that. I think more importantly, if it's decentralized and there's kind of like a competitive pricing mechanism for all provers in the network, it'll lead to better price competition and then also drive down the price of proving. So I think that's another thing that's not talked about much for prover networks, is that it can actually reduce costs and reduce latency by inducing this competitive environment between a bunch of different provers, or all kind of competing against each other to generate proofs for people.
00:13:16.268 - 00:13:49.708, Speaker A: So in that sense, it kind of looks like a marketplace with really good, decentralization liveness guarantees and like price guarantees. And yeah, I think there is no currently live prover network. We're working on building one as a part of, you know, SP one today. I like to say that we kind of have a prover network with one prover, which is us. So if you want to use SP one, you don't have to use it on your laptop. In fact, I recommend you don't use it on your laptop because again, that's not going to really be a fun time. You just change one environment variable.
00:13:49.708 - 00:14:14.180, Speaker A: You can send proofs to the prover network and we'll generate the proofs for you and send them back. And then as we get further along that we've architected in a way where we're not the only, we don't have to be the only approvers on the network. And as we go further along that path and develop it out more, going to start onboarding more approvers and yeah, actually making it a real network with like many, many different people participating.
00:14:15.200 - 00:14:20.620, Speaker C: What does that onboarding process look like? Onboarding new provers? And what's the timeline for that?
00:14:21.160 - 00:15:04.290, Speaker A: I think that's something we'll focus on over like the next few months. In terms of onboarding, I think it's actually pretty simple. You just talk to our networks. So generally what happens is you have an application that's trying to use ZK, whether it be a roll up or a bridge, it sends a request to RPC Sysync XYZ that gets stored. And then if you're approver, you can talk to the RPC, you can claim proofs and say, hey, I'm going to claim this proof and then I'm going to actually generate it. And then once you generated it, you fulfilled the proof and you say, okay, I submitted my proof. The proof gets verified and then you get payment for it.
00:15:04.290 - 00:15:37.630, Speaker A: And so I think the onboarding process will look like pretty simple. You just have to basically have methods for claiming and fulfilling and then actually generating the proofs. And then different provers can also, for example, do hardware acceleration of SP one or really optimize where they're running the SP one prover. So for example, you might have like better costs if you're running your prover is not in AWS and stuff like that. Yeah, so I kind of like imagine that is how the onboarding process will play out.
00:15:39.010 - 00:15:54.900, Speaker D: And for the prover network, has any thought been given into like what fees that the provers will be rewarded in? And will there be any like staking to make them accountable.
00:15:56.720 - 00:16:28.356, Speaker A: Yeah. So one important thing in the network is that the provers, so the provers, you don't have trust assumptions on the provers, right. Because they can't generate a false proof unless there's a bug. But the hard part is making sure that they don't grief the system. So it's bad if a prover says, hey, I'm gonna generate a proof, and then doesn't actually end up doing it. And there's a few different mechanisms for ensuring this, like accountability and ensuring there's not these like griefing attacks, basically. And we're kind of still thinking through the mechanism design on that side.
00:16:28.356 - 00:16:35.680, Speaker A: So that's still pretty early, but we have some interesting ideas that maybe we will talk about in the next few months.
00:16:36.900 - 00:16:49.240, Speaker D: Okay, that's interesting. Do you think that it'll be more, I don't know if you can answer this, but do you think it'll be more. You will use an internal kind of staking mechanism, or maybe you will use something like ion layers restaking.
00:16:52.670 - 00:17:30.949, Speaker A: I think for Eigen layer. Generally, for Eigen layer restaking you have existing Ethereum node operators just running more services. But I think proving is a very, very specialized service that maybe if you're an Ethereum node operator, it also makes sense that you'd be running nodes for other networks. I think proving looks pretty different from that. Like you may need GPU's, you mean may need specialized hardware and stuff like that. So I'm not sure that restaking based networks necessarily make the most sense. So, yeah, I'm not sure yet as to what exactly that'll look like.
00:17:31.069 - 00:17:32.089, Speaker C: That makes sense.
00:17:33.429 - 00:17:34.581, Speaker B: I kind of want to talk about.
00:17:34.645 - 00:17:45.180, Speaker C: The SP one and who you view as the primary customers for it. Is it roll ups and app chains? If it is, is it new ones, existing ones?
00:17:45.680 - 00:18:18.794, Speaker A: I think our primary customer for like the next, you know, year or so is roll ups. I think every roll up is going to be a ZK roll up. Like I've, you know, talked about this a few times, like the current paradigm of all this optimistic roll ups and kind of this like infrastructure soup that's needed to get them working. Like you have liquidity layers and then LP's on top of the liquidity layers and then like a bunch of different bridges with like varying trust systems assumptions. And then, you know, all this stuff, I think all this stuff fundamentally doesn't really work. And it's also really expensive. Like people like to think ZK is expensive.
00:18:18.794 - 00:18:51.452, Speaker A: And I mean, the cost of ZK are rapidly coming down because it's like we're making progress on the algorithms of technology. But the cost of like all this, you know, mosaic of infrastructure is not coming down because fundamentally there is like this cost of capital. There's this cost of having capital locked up for seven days. And then there's this cost that needs to be paid to all these infra teams and it introduces like a lot of friction. So I actually think optimistic roll ups are very expensive. People like to say, oh, today it's free. Well, I think that's a total myth.
00:18:51.452 - 00:19:32.940, Speaker A: Like, it's not actually free. It's just the costs are much more hidden and then paid by the users and it's like a lot more obfuscated as to what's actually going on. But I wouldn't be surprised if it was actually like eight figures or even like low nine figures for big chains being paid out to like these different teams and all the LP's and all the layers and all the bridge fees and stuff like that. And so for me, I think the current paradigm of optimistic rollups is not really going to make it. It doesn't really scale, which is maybe not even that surprising because it's not, I think, true scaling ZK is actually scaling. It's actually verifiable compute. The optimistic stuff's more of a clever trick.
00:19:32.940 - 00:19:55.218, Speaker A: And. Yeah, so I think every roll up is going to be a ZK roll up. I think the only way ZK rollups are really going to work is with a ZKVM. Like the existing paradigm of running a complicated circuit specialized for the EVM that's impossible to upgrade. When the EVM upgrades, it's really unauditable. It's hundreds of thousands of lines of code. I think that doesn't really work.
00:19:55.218 - 00:20:26.036, Speaker A: And so I think every Zk rollup is going to use the ZKVM. Then I think we want to be the best CKBm. And so, yeah, I think for the next year or so, we just think we just want to convert all roll ups to using SP one. Like that's our biggest focus. I think there's also other use cases like bridges and interoperability. So for example, Polygon's AG layer protocol, which is like an interoperability protocol is built using SP one. I think they're doing a lot of really awesome work.
00:20:26.036 - 00:20:45.240, Speaker A: Bridging obviously is in a similar category. And so we're working with Celestia and avail to bridge their DA layers to ethereum using SP one. And then there's a bunch of like Oracle use cases. So I think those are all big use cases. But I think roll ups will be like, roll ups are a really high volume use case that I think we're very excited about.
00:20:45.620 - 00:21:14.160, Speaker C: That makes sense. I have two questions following up from that. One is one thing you mentioned is that ZK costs have come down quite a bit. And one thing I feel like I hear parroted a lot is that ZK is expensive and or user like optimistic roles are cheap. Can you, I guess, paint more of a picture of how much ZK costs have come down and how that's like what has happened over the last year, year and a half maybe, that it's become drastically cheaper?
00:21:14.860 - 00:21:47.030, Speaker A: Yeah, totally. I mean, I think even with SP one, I think we originally released it in like February or March. And since then we ourselves have improved our own performance and costs by like five x. And we have like this long list of ideas in notion to improve the costs by another five to ten x by the end of the year. And so I kind of see that every day very viscerally. Like, we wake up in the morning, we go to the office at 10:00 a.m. and our number on priority is just like make SP one cheaper and faster and better.
00:21:47.030 - 00:22:32.610, Speaker A: And every week, basically we improve it by a little bit. And we have so many ideas on how to improve it way more. So I think for me, actually, I've seen even the cost of SP one go down by five x in a few months and I see what we're working on to make that trend continue. So I know it to be intuitively true in terms of metrics, for example, for the existing ZK roll ups. So like Zksync, polygon, ZkvM scroll. The proven costs are actually pretty small compared to like fees paid to Ethereum for DA or like, you know, verifying proofs on Ethereum, which can be expensive. It's like 200k gas or 300k gas.
00:22:32.610 - 00:22:51.732, Speaker A: And so the proven costs are actually already pretty small. I think it ends up being like maybe between 0.1 cent to transaction, which is like pretty cheap. And yeah, I think that was totally unthinkable even like a few years ago. And I think it's only getting like cheaper and cheaper.
00:22:51.876 - 00:22:53.348, Speaker C: Hey guys. Permissionless.
00:22:53.444 - 00:23:44.282, Speaker B: The event for crypto natives is heading west to Salt Lake City and we're bringing the biggest names in crypto together for an incredible can't miss event. Join me and the rest of blockworks on October 9 to hear from more than 200 industry titans, including Nick White from Celestia Firam from Eigen Lair and Keoni from Monad. The conversations at permissionless will be covering the hottest themes in crypto, including modularity, restaking the bitcoin and Solan ecosystems, AI and crypto roll ups, l two s institutional adoption, and of course, the November election that will be right around the corner. We couldn't be more excited about this event, and it's happening in one of the most beautiful places in the US. Ticket prices will be increasing towards the end of June, so get your ticket today. Make sure to use their code so I get some credit and bragging rights from the rest of the team. Use Xerox ten for 10% off on your ticket.
00:23:44.282 - 00:23:55.018, Speaker B: One more thing, we're also hosting the permissionless free hackathon in collaboration with Biddlebox. The theme this year is a multi chain future to build a better cross chain experience so I don't have to have a heart attack every time I.
00:23:55.034 - 00:23:56.146, Speaker C: Bridge to a new chain.
00:23:56.298 - 00:24:42.466, Speaker B: All hackathon participants will receive a free ticket to attend permissions. So if you're a developer, come join us in Salt Lake City, team up with fellow devs and build the multi chain future. Polygon Labs is developing the next generation of open source ZK tech to aggregate crypto, liquidity and user bases, empowering developers to grow in a unified web of interoperable chains with the ag layer. The AG layer is the machine for network effect. Don't worry about bootstrapping liquidity, just build anywhere in the ag layer to tap the liquidity and users everywhere. To support the aggregated future and bootstrap quality projects, the Polygon Community Grants program was launched with 1 billion tokens, all for Polygon builders. Season one of the community grants program is live right now and features 35 million in Matic to support the next generation of polygon projects.
00:24:42.466 - 00:24:56.372, Speaker B: For builders on polygon or projects interested in migrating, these grants are for you. Join the aggregated future and feel empowered to grow in an infinite web of unified interoperable chains. Apply today at Polygon technology grants.
00:24:56.556 - 00:25:18.920, Speaker C: One other thing you mentioned is the state of current ZK. Well, you said that everything will be a ZK roll. All roll ups will be a ZK roll up. We'll talk a bit more about that later. That sounds interesting, but I just wanted to ask what you think of current ZK rollups. And you said that they, you mentioned a bit that their vms are having issues and they're overly complex. But in general, like, how do you view that space right now?
00:25:19.640 - 00:25:48.250, Speaker A: Yeah, I think with existing ZK roll ups obviously, their teams are super talented. They started a while ago. But the existing paradigm is you have to have this team of 30 to 50 people who are all very specialized experts in cryptography. And then you hand code a ZK system for the Zk VM. So you write this very complicated circuit. It's very hard to audit. It's very hard to upgrade.
00:25:48.250 - 00:26:19.876, Speaker A: The EVM is always upgrading every six months to one year. You have to keep up with that. I think the hardest part is that now we're in this world where there's app chains and people who want to really customize their roll ups. The problem with, for example, having this team that's built this very complicated ZK circuit is that if someone else wants to take your technology and use it as a roll up stack or framework, it's very hard because they can't modify it. Say they want to add a precompile. Good luck. That's not really going to work.
00:26:19.876 - 00:27:11.472, Speaker A: Say they want to even adjust the gas schedule. It looks very complicated. I think that's why when you look at the existing landscape of roll up stacks and ras broadly, you'll see that op stack and the arbitrum stack is really popular because it is very easy to modify. They've been used a lot. I think the existing shortcomings of ZK rollups today is that it's really brittle and not that flexible. And I think that's also even problematic for the teams, because if a significant portion of the best engineers on your team have to spend all this time in overhead maintaining the ZK stuff, that's less time that they can spend on making the sequencer better, or improving user experience or doing other things. And so that's why I think basically every roll up will become a ZK roll up, because that's kind of inevitable.
00:27:11.472 - 00:27:40.636, Speaker A: Like, I think that's the technological endgame. It has so many benefits for interoperability and therefore, like, user experience. But the way that's going to happen is not going to be through the existing way of people doing ZK roll ups. It's going to be through ZK vms. And I think, like, op stack, for example, will have like a ZK option in the future where there's like a full ZK version of op stack. And, like, people can just use that and it's like rated in rust. You want to add a precompile? Okay, cool.
00:27:40.636 - 00:27:42.120, Speaker A: You just like, write it in rust.
00:27:42.900 - 00:28:04.382, Speaker D: Yeah. I want to echo that trend that I do think that the current optimistic roll ups will become ZK roll ups. In the future. I mean, I think it's already like built like they're making it easy in their modular stock to like, switch off the type of proofs that they use. So, yeah, I agree with that. Curious to know, maybe versus other roll ups. So maybe with Sysync.
00:28:04.382 - 00:28:07.622, Speaker D: Specifically, what type of hardware is sysync.
00:28:07.646 - 00:28:31.460, Speaker A: Using to generate the proofs for us today? SP one can be proven on CPU and also GPU. So we have both CPU and GPU provers on our prover network right now we're doing GPU proving. So it's just like cheaper and more. More cost efficient or. Yeah, cheaper and more cost efficient. And then also faster. Yeah.
00:28:32.800 - 00:28:44.700, Speaker C: Curious to hear how you guys are, like, approaching go to market for six things. How do you incentivize people to build using SV one? What incentives do you have planned?
00:28:45.040 - 00:29:26.514, Speaker A: I think so far there's honestly been, like a lot of really organic interest in building using SP one. I think a lot of these roll up teams really realized that they kind of need ZK or will need ZK. And so we've been working with a lot of roll up teams. For example, Polygon, I think, is one of the bigger partnerships we announced recently where Polygon's new protocol, Aglaya, is built with SP one. Polygon obviously has a ton of ZK expertise. They wrote this library called Wonky three that's like an implementation of fry and Starks, which is kind of like the underlying proof system behind SP one. And we use that library.
00:29:26.514 - 00:30:32.480, Speaker A: So we've been really happy, like collaborating with them in like an open source capacity. But I think as they were building aglayer, they realized, you know, writing custom circuits for Aglayer in planky three or something like that was going to take like a lot of time and a lot of effort. And really, the hard part about building something like AG layer is making the protocol good, doing the bd for it, making the ecosystem. And yeah, it's a pretty non trivial protocol to get all the pieces correct. And so I think they realized, oh, we can just write, once we have the protocol, for us to be able to write it in rust and just use SP one to generate proofs is such a no brainer because it's fast, it's cheap, and now two engineers on our team can spend a few weeks writing it instead of having to have like this huge team of like ten or 20 people spending months writing it and not having it be maintainable or upgradable. And so I think with Polygon Aglaya, it really solved a real problem for them. And let them go to market a lot faster and have like a much smaller team working on it.
00:30:32.480 - 00:31:24.980, Speaker A: And I think for a lot of other use cases we've had, it's very similar where it's like, oh, either we'd have to hire like a really big team or we wouldn't be able to do this at all. And so SP one's solving a real problem for them, and I think we're just very focused on solving real problems for people. Similarly to the roll up teams, I think optimism especially has built their stack in this very modular, future proof way. They are big believers that when the ZK tech is ready, we'll plug it in. And that's why they architected their stack in that way. And so we've also been working with them on getting an SP one version of op Stack. And again, I do think that solves a real problem for them in the future of like with interoperability and their longer term plans to make all these op stack Ras chains feasible.
00:31:24.980 - 00:31:45.320, Speaker A: So, yeah, I think overall, our go to market is really focused on solving real problems for real customers. And it's really nice because it's very easy on our end. We don't have to do that much. All the developers just write rust. We obviously try to help people and provide them support. But yeah, most of the hard part isn't usually the SP one integration. It's like actually just writing your program.
00:31:45.740 - 00:32:23.326, Speaker C: That makes sense. So you guys are building with op stack to integrate SP one, and this is like, I know the arbitrum team is obviously also working on there and to do some ZK proof system. I kind of want to ask a bit, maybe this isn't particularly related to, I guess, more about roll ups, but how do you view that? Does it make more sense to, I guess, start off as an optimistic roll up and then move on to adopt CK proofs or. Well, now we're coming to a point where costs have come down drastically. Or do you think it makes more sense to approach it? Like, let's get it right from the very beginning that ZK is the end game approach.
00:32:23.518 - 00:32:56.512, Speaker A: I think, for example, with Op and arbitrum, they were able to like, go to market a lot faster because they started as optimistic roll up. Or I guess in Op's case, they didn't have fault proofs for a long time. So they just kind of start as a roll up and then they got to market a lot faster. They got a lot of Tvl they built out like dapps. They have like users and network effects so I think that makes sense. And now I think they're going to transition to ZK roll ups, you know, hopefully using our tech and ZK vms broadly. So I think that, like, go to market totally makes sense.
00:32:56.512 - 00:33:44.870, Speaker A: I think now with ZK, though, for example, say you're building a new roll up or a new roll up framework or like an app specific roll up, I think it just makes sense to start with ZK from day one because the technology is already ready. And it's honestly, like, maybe even easier to build it than having to build out this whole optimistic fall proof system. Like, the optimistic fall proofs are actually pretty complicated. The OP team's really, really smart and full of really amazing engineers, and there is a reason it took them such a long time to get fault proofs working. It is a very complicated system. And so I think if you're an existing team that has, like, already brought your product to market, has existing users and network effects, transitioning absolutely makes sense to ZK now. But if you're a new team, it makes sense to start with ZK from day one because I actually think it's like an easier experience.
00:33:44.870 - 00:34:26.514, Speaker A: Like, we provide something that's out of the box. You just write rust and it just works. I think you actually see this a lot in the bitcoin roll up ecosystem where, like, if you're building a bitcoin roll up today, I think everyone's doing ZK because there's like, they kind of have this, like, technological leap frogging, frogging effect where, for example, in the United States, first people had PCs and then they had mobile phones. But then if you look in the developing world, no one really ever had a PC. They just straight went straight to mobile. And I think with the bitcoin roll ups, it's kind of like they never did the optimistic stuff because it was like their ecosystem obviously came alive, I think a lot later. They're just all doing ZK from day one.
00:34:26.514 - 00:34:38.002, Speaker A: And so that's, I kind of imagine that all the roll ups starting now, that will really leapfrog and just start with ZK from day one because it is kind of the end game of all this stuff, and it's also much simpler.
00:34:38.066 - 00:35:13.912, Speaker D: I think that's great. I guess it must say something like optimism is looking to use sp one polygon is using it for the aglaya. Like you said, they have a team full of experts. So, I mean, I think it speaks volumes when they're using that, using tools that succinct develops to help, like speed up their process and go to market faster for themselves. So, I mean, with that in mind, what would you say the market for ZK VMS looks like in a few years? Is it like a winner takes all or do you see it being like a highly competitive space, maybe like an oligopoly or something like that?
00:35:14.096 - 00:36:10.492, Speaker A: Well, I like to think it'll be winner takes all and we'll be the winner. I think there's a lot of weak network effects from a VM where, for example, if we have a really rich community of precompiles, that's really nice. Or if we have a really rich community of integrations, or even for example the security store, this has been used in production and we start to trust it. I think, for example, there's a lot of developer tooling around it. I think you see that with the EVM to a certain extent, and you see that with any developer tool that there's these. Once a bunch of developers use it, it snowballs into more and more developers using it and having a really great developer experience that you can compound and refine over time. Then I think there's also weak network effects from the prover network where it's the more proofs the prover network gets, the more efficient it can be.
00:36:10.492 - 00:36:42.140, Speaker A: The more provers you'll have, they'll invest more in optimizing their proof generation costs, and then you'll get this really nice flywheel where like they will have the cheapest proofs and then more people will use proofs and then you kind of get this like flywheel network effect as well. And yeah, I think that's like what we're trying to build both with SP one and like cultivating this really rich open source developer community and then also having this prover network where it really drives down costs and latency and then enables more people to use like more proofs.
00:36:43.040 - 00:36:56.300, Speaker C: Perfect. We touched upon this a little bit, but I kind of want to get more color on how a roll up would integrate SB one. Could you expand on that a bit?
00:36:56.920 - 00:37:41.038, Speaker A: Yeah. So if you're a roll up, what does it mean to become a ZK roll up? You need a implementation of your state transition function in ZK. And so I think, for example, we work with a few new roll up teams like Tyco and sovereign, and there's some other ones where from day one they're coding their state transition function in rust and they're already proving it with SP one from day one. Or they have that very top of mind from day one. And then you need to make your bridge basically verify ZK proofs. So you have your bridge contract on Ethereum, and then it needs to verify a ZK proof of your state transition function. And then it'll have your roll up state route, and then you can use that to bridge in and out of Ethereum.
00:37:41.038 - 00:38:06.480, Speaker A: So if you're a roll up team, you want to integrate with SP one. You just need to implement your state transition function in SP one, generate proofs, integrate some sort of sequencer to call to the prover network, get the proofs and then submit them on chain. And then also modify your solidity smart contracts to accept SB one proofs. And I. Yeah, use that as a source of truth of what your roll up is on Ethereum.
00:38:08.540 - 00:38:14.280, Speaker D: Have the precompiles been audited for by succinct or anybody else?
00:38:15.180 - 00:38:48.670, Speaker A: Yeah, our whole system is audited. We've done a couple audits with two really top tier ZK teams that have audited like scroll and axiom and a bunch of other roll ups before. And that definitely includes the precompiles. We care a lot about security, and obviously if you're using precompiles, it's very important that they're correct. And then we've also hosted a public audit competition with Cantina, which is run by spirit. So this is a public competition. Anyone could participate.
00:38:48.670 - 00:39:20.140, Speaker A: I think there were dozens, if not more participants to look at the code and find a, you know, any potential vulnerabilities. Yeah, there was actually a lot of really smart people across the world that participated. Super awesome to see. And like, super inspiring that like, totally random people studied our system, understood it surprisingly well. It is pretty complex and like, they, yeah, had a really great understanding. And so, yeah, those are, that's kind of like the audit security overview of SP one.
00:39:20.890 - 00:39:29.150, Speaker D: And does it make it easier too, because it's in rust or is that just another layer of complexity added?
00:39:29.930 - 00:39:31.290, Speaker A: Oh, to audit it?
00:39:31.410 - 00:39:32.110, Speaker D: Yeah.
00:39:33.890 - 00:40:04.342, Speaker A: I think, like the, like. So rust is a memory safe language, I think, mostly for auditing, though that doesn't matter too much. You're mostly auditing the circuits and making sure it's constrained properly so the circuits can be expressed in like, whatever language, really. I think it helps. It's in like, our circuits are expressed with like, plonky three's system for, you know, constraining those things. And that's kind of like standardized. So I think that helps a little bit.
00:40:04.342 - 00:40:07.250, Speaker A: But yeah, I don't think the rust helps that much with auditing.
00:40:07.950 - 00:40:09.330, Speaker D: Okay, makes sense.
00:40:11.110 - 00:40:21.310, Speaker C: What does the succinct endgame look like? What is your like apart from SP one and prover network? What, what else are you guys focused on? What else is coming up?
00:40:22.650 - 00:41:12.700, Speaker A: I think for us, like, we're just really laser focused on getting SB one to be like as cheap and as fast as possible, getting it integrated into roll up. Stocks are really making that vision of like everlasting ZK rollup with SP one come true. Like every application in crypto that wants to use the uses SP one and then building out this prover network to make the costs and latency of proving as cheap as possible and also decentralized. So I think already that's a lot of work and we're really focused on that. I think something I'm excited about in the longer term though, is that ZK, I think, has a lot of applications even outside of just crypto and blockchain. So rollups is just like the short term one to two year plan. I think on the three to five year time horizon, you could imagine a lot of use cases outside of crypto, even in web two.
00:41:12.700 - 00:42:26.640, Speaker A: So, for example, today you have these credit union companies that are issuing you your credit score. And right now they have basically no accountability where they can just modify people's credit scores without any recourse. And it'd be really nice if there was an aspect of verifiability in that where you know that they're applying updates according to like some set of like known rules that we've all agreed upon that are like transparent and verifiable. So you can imagine like this idea of like verifiable servers just beyond roll ups being really important for a lot of companies that are, you know, really trusted. Today there's like a tested image editing where like, I think we're increasingly in this world where it's like really hard to tell, like, is an image coming from a real thing, a real camera, or is it just coming from mid journey? And so you could imagine that in the future, you have all these cameras basically sign that, hey, it came from real camera and then you do these verifiable transformations on top of it. So I think there's a lot of really interesting use cases beyond roll ups in crypto that I'm really excited about in the longer term. And yeah, excited to see come about.
00:42:27.370 - 00:42:42.190, Speaker D: That vision where, you know, it's used less outside of the blockchain network. Both of those kinds of use cases you described does that without require its own network or are we talking like client side proof generation?
00:42:43.090 - 00:43:15.010, Speaker A: Some of that might. So for example, for the verifiable server, they could just use the net prover network. Like they don't really require privacy, they just want verifiability. They can just use the prover network for privacy use cases that would require some amount of client side proof generation for a tested image editing. There's not really privacy, it's just like verifiable transformation. So that doesn't really require client side proving. But then yeah, there's also a bunch of other interesting privacy focused applications that have client side proving as well.
00:43:15.630 - 00:43:25.510, Speaker D: You said client side proven for privacy. How, how would that work? Would you need like proof aggregation or like how exactly would that work?
00:43:26.730 - 00:44:08.210, Speaker A: Yeah, I think basically you would generate a proof, you know, in your web browser, on your computer or in a mobile app, and then that proof wouldn't be that succinct and then maybe, but it would hide things and make them private. And then you could send it to the prover network to shrink it and make it more succinct. I kind of imagine that being how like client side proving would play out is you basically like do a really fast proof that's not that succinct because there's in general this trade off between prover time and like how succinct and like short it is. So you do a private proof very fast, not that compressed, and then you send in the proverb network to compress it and make it really small.
00:44:09.070 - 00:44:19.572, Speaker D: Yeah, that's kind of like wrapping proofs. You're like wrapping one of it. One is quick to verify, one is quick to generate, and you're getting the best of both worlds, basically.
00:44:19.716 - 00:44:21.100, Speaker A: Yeah, yeah, yeah, exactly.
00:44:21.220 - 00:44:22.400, Speaker D: Okay, gotcha.
00:44:24.860 - 00:44:34.680, Speaker C: Before we wrap it up, Uma, where do you want to point our listeners towards? How can they find out more about succinct? Or I guess, like, is there anything they should specifically be focusing on?
00:44:35.580 - 00:44:57.710, Speaker A: Yeah, well, if you're like excited to build a Zk, you can go to our docs. It's Docs succinct XYz. You can go to our website and then, yeah, you can follow us on Twitter at succinctlabs and follow me. I'm the Uma. And yeah, I think those are all pretty good resources. We have some blog posts talking about like sp one. Why, it's awesome.
00:44:57.710 - 00:45:26.832, Speaker A: And yeah, like it's very easy to try out, like on purpose. So yeah, I always encourage people to try it out and like see it and see kind of the magic, I think, especially if you've worked with ZK before, it's really like night and day. Like, I mean, as someone myself who used to do that stuff, I think there's been so many moments where I was like, oh my God, I can't believe this is possible. Like, I just import a library. I import like the Serde library in rust or the JSON library or Revm or rep. And it just works. Like, wow.
00:45:26.832 - 00:45:43.890, Speaker A: Oh my God. This would have used to taken me months. And now I do it in like an hour. And so, yeah, for ZK people, I always encourage them to just try it out and see for themselves because there's like, that is like irreplaceable feeling of like being like, oh my God, this is like really a new paradigm. It's like such a big shift.
00:45:45.710 - 00:45:51.090, Speaker C: That sounds awesome. I'll make sure to include those links. Thank you so much for coming on, Uma.
00:45:51.670 - 00:45:53.494, Speaker A: Yeah, for sure. Thanks for having me.
00:45:53.622 - 00:46:12.180, Speaker B: Are you currently building on Polygon or interested in migrating? Season one of the Polygon Community grants program is live right now and features 35 million in Matic to support the next generation of polygon projects. Builders on polygon. These grants are for you. Join the aggregated future today by applying at Polygon technology grants.
