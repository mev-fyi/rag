00:00:00.200 - 00:00:34.018, Speaker A: There's going to be a lot more roll ups like us. We are the first. But basically roll ups that acknowledge the fact that fragmentation is bad and try to become the shelling point where all dapps can live. And that necessitates a couple things like local fee markets and fee redistribution. And instead of incentivizing app chains and then interoperating via shared sequencer, I think you're going to see a lot more very high performance roll ups that can support the entirety of execution throughput that is required from their DApP base.
00:00:34.114 - 00:00:52.730, Speaker B: The Polygon Community grants program was launched with 1 billion tokens, all for Polygon builders. Season one is live right now and features 35 million in Matic to support the next generation of polygon products. Builders on Polygon these grants are for you. Join the aggregated future today by applying at Polygon Technology grants.
00:00:52.890 - 00:01:17.810, Speaker C: Pair is an innovative pair trading exchange built on top of Simeo. Users can trade trending narratives with one click from blue chip narratives such as long BTC, short eth right to the width versus bonk. The hat stays on. Simio's intent centric architecture enables deep liquidity, source off chain and broad on chain, and combined with pair has democratized access to complex trading strategies typically reserved for institutional traders.
00:01:17.930 - 00:01:58.658, Speaker B: Avalanche is a smart contract platform that has a novel consensus protocol, subnet infrastructure and the Hyper SDK toolkit, which allows web3 developers to easily launch custom powerful blockchain solutions. You can start building today by checking out the link below. Nothing said on Xerox Research is a recommendation to buy or sell securities or tokens. This podcast is for informational purposes only and any views expressed by anyone on the show are solely our opinions, not financial advice. Boccaccio, Ryan and our guests may hold positions in the companies funds or projects discussed. What's up, guys? Welcome back to another episode of Xerox Research. Today I'm joined by Ren and Terry from Eclipse.
00:01:58.658 - 00:02:00.870, Speaker B: Ren, Terry, thanks for coming back.
00:02:01.210 - 00:02:03.910, Speaker A: Thanks for having me. Thanks for having us.
00:02:04.210 - 00:02:05.690, Speaker C: She's going to be back too.
00:02:05.850 - 00:02:10.430, Speaker B: Before we get started, I want to ask Ren, are you happy to be back?
00:02:11.010 - 00:02:26.986, Speaker C: Yeah, I mean, obviously I host my own pod at Eclipse right now. It's sort of like a go to market focused pod, and we also talk about like stuff in the SVM land from time to time. But I have missed you, Paco, so it's good to be back. And Ryan too. Ryan too.
00:02:27.098 - 00:02:39.990, Speaker B: Okay, we'll link to the pod below. Cross marketing is apparently a good thing, so it'll be nice. All right, more seriously do you guys want to give a brief overview of what you guys are building over at Eclipse?
00:02:41.290 - 00:02:42.978, Speaker C: Yeah, I'll let Terry take this one.
00:02:43.114 - 00:02:52.400, Speaker A: Yeah, for sure. Eclipse is a SVML two. We are basically bringing the Solana virtual machine as a L2 on Ethereum.
00:02:53.420 - 00:03:01.480, Speaker B: So I think the natural question here is, why bring the Solana virtual machine to Ethereum? Why did you guys decide on doing that?
00:03:02.580 - 00:03:42.482, Speaker A: Yeah, well, we wanted to make something that was different. And if you come from first principles and you think about what type of execution environment you want to build out an L two for, there's a couple important facets to consider. The first one is that the execution environment that you're building out should have organic traction and a large ecosystem of Dapps and strong devex and devex infrastructure. So generally has network effects. And the EVM is excelling at that. The SVM obtained at this cycle. Number two is that the execution layer should have some sort of very intrinsic merit to it, right? Like, it's super fast.
00:03:42.482 - 00:04:22.750, Speaker A: The contract programming language has a ton of traction outside of crypto, something like that. And so when we observed and thought about the trade offs between the different execution environments available to build out a general purpose, l two, you know, the EVM was less interesting, and the SVM was really, you know, it was the execution environment with the most organic traction, the most highest in production transactions per second, the largest number of innovative dapps. And, yeah, like, it uses Rust, which a lot of developers are familiar with. It has a lot of organic infrastructure built around it. So that's why we decided to build on the SVM.
00:04:23.090 - 00:05:11.642, Speaker C: I'll follow up on that. I think if you look at the state of rollups and l two s today, right, they're not exactly like that performance. Even the most performant l two s only have 30 tps. And if you look at conduits, dashboard roll up, WTF, the total tps across all of the l two s on Ethereum have a combined TPS of 260. And I know that TPS probably isn't the best metric today, but it's still metric that is kind of useful for comparison sake. Whereas if you look at Solana and the SVM today, Solana very casually reaches probably like a thousand non vote TPS on a daily basis, on a daily basis, day in and day out. And it's one of the most battle hardened performance execution environment that we have today compared to any other sort of vm stack out there.
00:05:11.642 - 00:05:17.470, Speaker C: And I think that's the fundamental reason from, like, a more quantitative perspective, why we decided to use the SVM.
00:05:18.610 - 00:05:35.070, Speaker A: And a lot of people say that TPS is like a flawed metric, but it's only a flawed metric if you're disingenuous about it, right? Oh, yeah, I'm benchmarking on pure transfers or whatever. If you benchmark on actual transactions, that's what users do. So then you want to benchmark on what actual user actions are.
00:05:35.610 - 00:05:53.990, Speaker B: That makes sense. I have a few follow up questions on the SVM, so I want to hear from you guys what the difference between the SVM and the EVM is, like, both specifications wise, and you already gave a rundown of why, but I want to understand how exactly they differ.
00:05:55.890 - 00:06:39.058, Speaker A: Gotcha. Difference between the SVM and the EVM. Um, well, first of all, a lot of people are contentious about, like, what exactly the SVM and the EVM are, but I want to hear talk about it as if it's the entire execution environment stack, not just like the virtual machine specifications. Largely the two differences that I think matter when building out an L. Two is, number one, parallelism, which we all know about. The EVM is also adopting parallelism. The SVM uses pessimistic parallelism, which means that all state access and all accounts that are locked during execution are stated upfront in the transaction specification, while in the EVM parallelism methods, they're optimistic and current.
00:06:39.058 - 00:07:32.890, Speaker A: So basically, you run the transactions as if there is no contention, and then you have to re execute later. So that's number one in terms of the differences. Number two is that because of those differences, the SVM, specifically in the execution environment, has multiple levels of local state contention or local state local fee markets. So the first of those is that in a Solana block, an account can only take up 25% of the block. That's number one. And then number two, there are multiple proposals where over time, their fee mechanisms attached to write locking specific accounts, or like, basically writing to specific accounts that change dynamically per account, instead of in the EVM, where there's a global priority fee auction. Right.
00:07:32.890 - 00:07:50.770, Speaker A: So those are kind of the two differences. They're not entirely differences in the virtual machine itself. So, like the runtime virtual machine, you know how the stack and heap get allocated and things like that. But they're kind of overarching differences that I think matter more when it comes to, you know, user and how they interact with the DaP and how they interact with the execution stack.
00:07:52.030 - 00:08:12.850, Speaker B: Perfect. That makes sense. Um, one kind of follow up to this that I have is, and you guys go through this in your docs and on your website and like in other places. But why not just, why not Solana? And what you guys put in is that you want to be more, um, but I want to understand like what is more in that sense.
00:08:14.130 - 00:08:52.762, Speaker A: Yeah. A lot of people haven't taken advantage of the fact that as an l two, you basically have the ability and the leeway to get more performance out of your execution environment than in an l one. Right. An l one is basically encumbered by consensus, where you know a certain number of nodes. Even if you do asynchronous consensus, where you just agree on the ordering of a set of transactions, people have to do that communication and that. Yeah, that basically, like people have to communicate with each other and in the process incur some latency and incur some computation. In saying that, okay, yeah, this is the canonical ordering of transactions.
00:08:52.762 - 00:09:44.630, Speaker A: Meanwhile, if you have a single sequencer or a rotating set of sequencers, you basically only have one entity saying, okay, this is what the transaction ordering is. And in that process you shave off, you fundamentally are a little more performant there. The other thing is that l two s rely on verifiability of execution. L1 s rely on consensus over the post execution state route in order to enforce safety. But l two s rely on verifiability of the post execution state route, which has a one of n trust assumption, or sometimes not a trust assumption at all. In the case of Zkhdem, if that is the case, we can then increase the hardware requirements on the sequencer side, as long as we can keep execution costs. Re execution costs relatively low.
00:09:44.630 - 00:10:29.498, Speaker A: From the eclipse perspective, our verifier or l two full node, which keeps up with the tip of the chain, just downloads snapshots and reapplies data availability. It doesn't need to actually have the same hardware requirements of the sequencer. And of course, like re execution is one of n. So what you can do as an l two is you can push really, really hard on the hardware requirements of the sequencer. You can give it a ton of memory, you can give it a ton of bandwidth. You can even go into hardware acceleration, hardware software, co design at the sequencer level while still keeping the verifier hardware requirements low, and re execution trustless and permissionless. And so not a lot of teams have actually gone this route.
00:10:29.498 - 00:10:44.150, Speaker A: But that's what we want to do. Solana is performant, but we want to throw incredible amounts of interesting research, optimization and hardware at the block producer level to see what other optimizations we can get. How further we can get in terms of performance.
00:10:44.970 - 00:11:10.408, Speaker C: I would follow up there with a slightly more left curve explanation. I think if you look at the crypto landscape today, you see Solana and Ethereum are by and large two of the largest ecosystems, both in terms of user adoption and liquidity, in terms of like, assets that are utilized or just sitting on a chain where traditionally Solana hasn't been able to access the liquidity of Ethereum.
00:11:10.464 - 00:11:10.728, Speaker A: Right.
00:11:10.784 - 00:11:43.770, Speaker C: Whereas if you build an l two, we're able to access the God knows how much ETH sitting on Mainnet, the $80 billion worth of stable coins on ETH liquidity, while benefiting from the performance improvements of the SVM as an L two. And so I think just a scaling roll ups to an order of magnitude cheaper and higher throughput than existing l two s on Ethereum today, and b being able to benefit from access to Ethereum's liquidity is just like a slightly more left curve reason of why we want to bring Solana to Ethereum.
00:11:44.070 - 00:11:54.700, Speaker B: Yeah, that makes sense. What is the rest of the stack made up of? Okay, SVM for execution. What else are you guys using?
00:11:56.000 - 00:12:23.334, Speaker A: Yeah, so it's SVM for the execution layer for settlement, which just basically means that we post a state route to the settlement layer, like at certain periods of time for trustless liquidity. And trustless bridging is Ethereum. The DA layer is Celestia. And that was because we needed something that was more performant than ETh. I think. Dank sharding target data throughput is like 1.3 to 1.5
00:12:23.334 - 00:12:39.390, Speaker A: megabytes per second, and that's not enough to support even Solana TPS today. And so we needed something that was an order of magnitude higher, and Celestia provides us that. And then with the fraud proof mechanism, we hope to use risk zero for DA layers.
00:12:39.430 - 00:12:51.460, Speaker B: Are you going to be posting on one, like, only on Celestia, or are you planning on doing multiple DA layers? I've always wondered if, because it makes sense if it says it's so cheap, but I wonder how you guys are going to approach that.
00:12:51.880 - 00:13:02.500, Speaker A: Yeah, only on Celestia. I think Celestia is going to be cheap for a long time. Celestia has the ability to increase block sizes while still keeping verifiability. So, yeah, definitely Celestia.
00:13:03.640 - 00:13:11.974, Speaker B: That makes sense. And you chose ethereum as a settlement layer just because of the liquidity? Or is there something else that you guys are interested in?
00:13:12.152 - 00:13:26.590, Speaker A: Yeah, in large part it is because of the liquidity. Once you include the settlement layer in your chain derivation, you get trustless access to all liquidity on ethereum. Ethereum is where all the liquidity is. And so that's very interesting for us.
00:13:27.450 - 00:13:44.640, Speaker B: That makes sense. And what can I as a user expect different? Like with SVML two versus EvM two, what are like some immediate differences that I would face apart from low costs and incredible execution?
00:13:45.100 - 00:14:29.414, Speaker C: I would say that by and large, like, the user experience shouldn't be that different. Especially I'm not gonna amplify the fact that we have lower costs, cheaper transactions, faster transactions, just because a lot of these l two s are relatively cheap in the grand scheme of things, and all of them get pretty fast, like soft confirmations from the sequencer. Anyway, eclipse is not going to be different. I think one thing that is different is obviously a the user experience in terms of like the type of wallets that they're going to integrate with. Since we're SVM l two, you're not going to be able to use like some of the wallets that you may be traditionally sort of like integrated with. For example, like Ravi, you probably won't be able to use that. We will have metamask snaps, we will have salmon wallets.
00:14:29.414 - 00:15:15.432, Speaker C: We may have some other solana based wallets that will be coming online. So in terms of like the wallet user experience, it'll be very much like Solana and not that different. You would still have sort of like the same base fees, the same sort of like priority fee model. In terms of dapps, I would say the largest difference is that we are really optimizing for dapps that a are truly build, are truly scalable within an ecosystem. Because if you look at existing l two s today, right, like if you find like a semblance of product market fit, you're going to saturate block space for a single l two. And the incentive for you there is to move to an app chain. Whereas if you build on eclipse, you sort of have designated block space from the 25% cu limit, and the incentive is a little less there for you to become an app changers.
00:15:15.432 - 00:16:16.562, Speaker C: Of course, other factors to consider in terms of like, execution, value, accrual mev, but there's ways to fix that too. And the user can basically expect this, like, I want to say, the intersection of various ecosystems, right. First, you're going to have to trust us access to eTH liquidity, so you would have e face assets. Second, we will have bridging available from Solanum, so you'll be able to access assets such as Soul Jirasol season, Solana Land, and also using Hyperlink and IBC, we'll also be bridging over assets such as like Stake Dy, DX, Stake tier. So basically the goal is to become this, I don't want to say centralizing hub, but just a hub between these various ecosystems. And obviously there's a whole bunch of defi primitives that will basically flourish on these assets from these various ecosystems. Whereas if you look at the landscape today, I think it's hard to, for example, justify bridging ETH to Solana and then pairing like LP ETH and so together.
00:16:16.562 - 00:16:44.560, Speaker C: That's just kind of like a jank, weird setup. Whereas like on eclipse that makes a lot more sense because we'll have both bridging from ETH Mainnet and from Solana and you'll be able to LP ETH and so together. So user experience wise, pretty similar to Solana dev ecosystem wise, it's a good mix of like Solana, like native devs, some of them which are going to deploy in eclipse, and some other eclipse native devs with a mix of games, nfts, consumers and whatnot.
00:16:45.260 - 00:17:05.550, Speaker A: Yeah. And one thing to add here is, you know, the only reason for eclipse to exist is if we can, if we can be in order of magnitude better to the and normal user who submits one or two transactions a day, it might be imperceptible, but we do want to bring latency down, we do want to bring costs down and we do want to bring tps up by an order of magnitude, if not more.
00:17:06.130 - 00:17:20.680, Speaker D: Yeah, totally. So thinking from like what's your go to market to get developers to build on eclipse? And like, I'm thinking about this in the context like twelve months ago.
00:17:22.540 - 00:17:22.876, Speaker B: There.
00:17:22.908 - 00:17:53.650, Speaker D: Wasn'T much going on on Solana. And if you were thinking about building there, like one, maybe just like less competition or just like your go to market was very different. Now, like Solana has kind of come out of nowhere. It's the kind of story chain of this cycle. There's a lot of activity there. So like you're now like competing with them, whereas before, like maybe twelve months ago, like you guys had like a very clear go to market. Like what is the value prop to a dev to build on eclipse and not on Solana?
00:17:55.110 - 00:19:25.674, Speaker C: I would say there's kind of two ways of looking at this, right? First is capital has been like relatively sticky. If you look at ETH Mainnet's TvO, it's still an order of magnitude higher than Solana. And before the Solana haters come for me, I will acknowledge that Solana has traditionally seen a much higher, I think they call it capital efficiency, right? Like for the same amount of LP, Solana sees like a buttload, higher dex volume, borrowing, lending and defi activity, whereas I still think like a lot of capital is going to remain on Ethereum. Right? So for the pitch for like a Solani developer, it's basically, hey, you have a Solana dev if you want to try and give it a shot to access eve liquidity, which is still an order of magnitude higher than Solana in terms of liquidity, while still benefiting from the same performance benefits that Solana and the SVM provides. Eclipses for you, right? And then for slightly more like Ethereum based builders and Ethereum based apps, the picture is that no l two today probably provides you with the benefits of building a truly scalable dev. I think a lot of devs find product market fit first on one chain and then eventually build towards like this app chain using a modular stack. So our pitch is, hey, we're going to give you low fees, we're going to give you parallel execution, so your user experience will never deteriorate.
00:19:25.674 - 00:20:24.544, Speaker C: You will never have to sort of suffer from the noisy neighbor problem where one NFT mint takes up the entirety of block space and your users get priced out, the whole chain goes to shit. And basically your users suffer a really bad user experience, not as a result of anything or anything that you did. And so that's kind of the pitch to Ethereum developers. And to follow on to that, I think eventually we will get questions of like, okay, adapt has been built on eclipse. Why would he not basically build an app chain, right? And I think the pitch there is that a lot of builders have gone towards an app chain root because they did not have sort of dedicated block space and they basically get like pushed out of the block space. And so the incentive is there to basically control their sort of own block space. And the second thing is, I think a lot of ecosystem do staffs, because they cannot offer sticky paying customers.
00:20:24.544 - 00:20:48.820, Speaker C: Right. We want to aggregate this to a roll up through basically like this interoperable ecosystem that's composable where the sum is greater than the parts. And basically the value of staying on the roll up should surpass the value of becoming your own app chain, even for devs that find product market fit. And I think that's one point where we want to differ on ideology.
00:20:49.800 - 00:21:25.850, Speaker D: Yeah, that makes a lot, that makes a lot of sense run thinking about roadmaps, right? Like, everyone's excited about things like fire dancer, and there is a, there's a dev team over there. They have relationships with jump. Like, the market knows that. What is the eclipse, like roadmap in the context of, like, the s or in the context of Solana's roadmap? Right. Because, like, they have resources. They have, they have relationships. What's.
00:21:25.850 - 00:21:33.960, Speaker D: When Solana ships something? Are you guys copying and pasting? Like, are you guys going your own route? Like, like, what's that future look like?
00:21:34.460 - 00:22:12.878, Speaker A: Yeah. So specifically in relation to firedancer, eclipse will adopt firedancer when it goes live. And the fire dancer architecture is very modular, and there are many components of the fire dancer stack that scale linearly, to, say, the number of cores that you throw at it. Specifically, their quick implementation scales linearly. Their signature verification stack requires an FPGA, but they use a consumer FPGA. We could use something that's more sophisticated. Anza is currently solving a lot of the memory issues that will allow you to basically allocate more threads in execution in the banking stage.
00:22:12.878 - 00:22:37.780, Speaker A: And so in conjunction, we expect that if we are to use the fired answer stack, which we will when it is available on Mainnet, there is a lot of affordances by becoming an l two and using the affordances of centralization of an l two with fire dancer and optimized agave client. Otherwise, in terms of feature gates, yes, we will be completely main net compatible.
00:22:39.000 - 00:22:51.870, Speaker D: Got it. So when you say main net compatible, you mean like a SVM developer can easily copy paste their application to eclipse and just, it goes.
00:22:52.290 - 00:22:53.230, Speaker A: Exactly.
00:22:53.970 - 00:23:41.970, Speaker C: I'll add on to Terry there. We're going to be mainly compatible, and we are obviously going to utilize a lot of the sort of developments directly from Solana contributors, Solana Labs, or like Solana client related teams. But we are also making a heavy research push. Right. We don't really just want to take from Solana. We also want to contribute back to Solana. So whether that's like core value added client optimization and research there, or, for example, tinkering with transaction fee markets, we're going to be putting out a lot of research in the coming months, year that hopefully informs our own roadmap in terms of how we want to best implement the SVM and maximize its performance and hopefully deliver that value back to Solana itself or perhaps other like, SVM chains.
00:23:43.240 - 00:23:58.780, Speaker D: That's super interesting. So are there any, and, you know, maybe we can't speak to it today, but are there any, like, design decisions that you guys are thinking about? That are going to differ or anything that you would do differently if you were in control of that roadmap.
00:23:59.520 - 00:25:13.534, Speaker A: One thing that we've thought a lot about is the transaction fee mechanism. And obviously, like Solana, had a bit of issues with network congestion that were in large part because of cheap base fees plus incentives to spam. That is something that we're strongly considering. For one, our configuration right now makes us cheaper than Solana, and we are probably anticipating a lot more spam than Solana, which makes us want to think much more about adopting multidimensional fees, especially in relation to network congestion, faster, and especially in relation to local fee markets. I think one of the biggest benefits of Solana and SVM l two, we can specifically argue, and Ren touched on a lot of these points, that it can be a shelling point for synchronous composability within one l two ecosystem, especially if you have value accrual back to the dapps in some certain way, like Canto CSR or a MEF redistribution. Plus local fee markets, plus extremely scalable. Like an extremely scalable l two, you can then argue that, okay, all the apps can then live on this chain plus interoperate with each other.
00:25:13.534 - 00:25:23.730, Speaker A: And plus they have an incentive to stay on the chain. So tinkering with that type of thing is also on the roadmap for us, whereas it is much more difficult for Solana to do that.
00:25:24.590 - 00:26:04.040, Speaker B: You touched upon something I want to ask, and we gave. Ren gave a really good kind of introduction to this is like how you're going to onboard, but I think he gave more the pitch. But I want basically like the CSR is what you mentioned, which I think like did okay for Kanto as an idea, but it never really did that well. I want to understand like what are some steps that you guys are going to take because roll up competition is huge now, especially like onboarding dapps. And we've seen some good attempts, like the big bang thing from blast was good. Do you guys have any specific programs lined up or how are you approaching that in general?
00:26:04.900 - 00:26:42.400, Speaker A: Yeah, so Ren can speak about that in the go to market side. And I'm kind of thinking about this more from a technical roll of construction perspective. Right. Like with pudgy chain, one thing I realized is apps is reasons why. Well, it's very obvious that apps are the reasons why people go on chains, but the job of the chain itself is to provide developers and provide ecosystems and provide people with a reason to deploy on you. And the reason has to be that basically their revenue is going to increase if they deploy on your chain. And if that's not the case, then why would they deploy on your chain if they can get huge grants from other people? There's millions of developers that exist on ronin, et cetera.
00:26:42.400 - 00:27:26.754, Speaker A: From a technical perspective, we're thinking about different mechanisms that happen to you. Blast did a sequence of revenue share, Kanto did csrtainous. And then there's also other ways that have not really been explored that are being used in the app specific ecosystem that have not come back to l two. Specifically, there's mev redistribution. So harvesting non malicious mev at the sequencer level, and then doing some sort of attribution back to Dapps, and then redistributing that it's happening on the application side with things like Sorella. But no one has really explored and deeply thought about what that looks like in the l two. That's a lot of what we're thinking about.
00:27:26.754 - 00:27:33.030, Speaker A: How can we bring the value that we create at the sequencer level and best redistribute that back to the Dapps.
00:27:34.010 - 00:28:22.382, Speaker C: From the slightly more go to market side of things? Fundamentally, eclipse is in the business of selling block space, which means that we want to drive the most demand for block space. And I think there's a few ways you can do this. Like sure, you can do off like, the coffee pasta defi primitives, you know, like a Dex, a lending borrowing market, a perf Dex and whatnot. And I'm not saying that we're not going to have that for sure. We also want those defi primitives, and those defi primitives will be launching on our chain. But I think the way I think about this, which might be slightly different for other people, is that a lot of people often say like, l two s or chains build basically a, for like the vibes, or b, they have an existing community. I definitely agree with that.
00:28:22.382 - 00:29:32.060, Speaker C: There's definitely like a chicken and egg problem. You want to see like a sticky community, you want to see a large amount of liquidity. You want to know that demand for your dab and whatever product or service that you're building is going to be there just from like heuristics. But also I think the real, like ten x builders. If you build something that's truly breakout, truly drives value to the users, and it's truly something novel, interesting, fun, engaging, with high retention, people will bridge over to your chain, assuming it's not like insanely complex that you need to go through like three wallets or something like cosmos IBC, then people will bridge over to your chain to use whatever depth you have built given that is so valuable to them and it provides them with a lot of fun, happiness, or makes them a lot of money. Right? So thinking from that principle, I think basically we are indexing more on people that can build out these standout slash breakout devs that a are hopefully able to uniquely utilize the features of the SVM as an Ethereum L two, but b also trust themselves as builders that they will be able to bring over the users.
00:29:33.230 - 00:30:30.420, Speaker A: I guess in large part. One thing I want to add there is, I think what a lot of chains get wrong is that they are highly opinionated with capital allocation. Specifically, if you remember the 200 million arbitrum gaming fund, it's very difficult for a chain and a lot of mistakes that people make is that they basically invest in things that worked out last cycle and or worked out in their near memory vicinity. Like, okay, like meme coin launchers brought a lot of activity to Solana, and therefore I'm going to create an ecosystem fund that basically invests in meme coins that are native to our chain. But in a lot of cases, like what drives adoption and traction isn't necessarily like all my chain isn't what has worked in the past for someone else. And we want to be like incredibly mindful of that and be relatively agnostic in terms of, you know, what, where our capital goes to and where do we allocate our time and interest to in supporting builders that are doing novel things.
00:30:31.200 - 00:31:06.974, Speaker C: I'll follow on with that. If you're a builder, right, you're building a product. The main thing that you want is distribution. And we're really also very cognizant of that. So whether that's us helping make ecosystem introductions, intro into VC's, helping protocols work with each other to create like positive sum games. And that's one of the very large reasons why we created the podcast adips, right? It's a go to market focus podcast because a lot of pods that talk to founders today just talk about like, hey, your product is here. Like, these are like the fashion new features that you are going to announce in your roadmap.
00:31:06.974 - 00:31:35.614, Speaker C: Here's this new thing that you launched yesterday. And sure, that's great if you want to find out what's happening. But then as a builder, I'm like, okay, I have no clue where this guy went wrong. I have no clue. If this builder had to do it all over again, would he do anything differently? What were some of the key mistakes that he learned from what were some of like the largest growth levers. He pooed. And we basically want to drive value to builders, help them learn from it while simultaneously helping them with distribution and attention.
00:31:35.614 - 00:31:47.758, Speaker C: And I think on top of building true standout apps that don't just look at last cycle, what happened recently with a recency bias and saying like hey, that worked. The combination of that will lead to a successful ecosystem.
00:31:47.894 - 00:32:35.300, Speaker B: Polygon Labs is developing the next generation of open source ZK tech to aggregate crypto, liquidity and user bases, empowering developers to grow in a unified web of interoperable chains with the Ag layer. The Ag layer is the machine for network effect. Don't worry about bootstrapping liquidity, just build anywhere in the Ag layer to tap the liquidity and users everywhere. To support the aggregated future and bootstrap quality projects, the Polygon Community grants program was launched with 1 billion tokens, all for Polygon builders. Season one of the community grants program is live right now and features 35 million in Matic to support the next generation of polygon projects. For builders on polygon or projects interested in migrating, these grants are for you. Join the aggregated future and feel empowered to grow in an infinite web of unified interoperable chains.
00:32:35.300 - 00:32:38.604, Speaker B: Apply today at Polygon technology grants.
00:32:38.772 - 00:33:03.686, Speaker C: Pair is an innovative pair trading exchange built on top of Simeo. Users can trade trending narratives with one click from blue chip narratives such as long BTC short ETH right through the whiff versus bong. The hat stays on. Simio's intent centric architecture enables deep liquidity, source off chain and broad on chain, and combined with pear, has democratized access to complex trading strategies typically reserved for institutional traders.
00:33:03.798 - 00:33:46.052, Speaker B: The age of interoperability is here. With the launch of Teleporter, Avalanche becomes a seamlessly linked network of many sovereign blockchains that communicate so smoothly they feel like a single chain. Teleporter is an EVM compatible cross chain communication protocol built on top of Avalanche Corp message. It allows any EVM chain on avalanche to send messages, assets and data to one another in a simple, fast, affordable and secure way. Teleporter and Avalanche word messaging provide a new foundation for how avalanche blockchains can communicate and how developers can easily build cross chain applications out of the box. Build anything you want, any way you want, on the eco friendly blockchain designed for Web 3D. Check it out by clicking the link below.
00:33:46.052 - 00:34:03.796, Speaker B: Ren comes back on the pod and just shits on it. Man, that's crazy. No, but I agree with you. I agree with both of you, I've had like, three questions over the past three minutes. Just because everything, you're like, yes, but like, also this. I'm gonna start off with the MeV returns to sequences with Terry, and then we'll go on from there. But how.
00:34:03.796 - 00:34:12.720, Speaker B: How are you guys exactly thinking about that? I mean, obviously you said you haven't decided on it yet and how it's gonna work, but what are some choices that you guys are thinking of there?
00:34:13.340 - 00:34:58.934, Speaker A: All right, yeah, we've talked to a couple of different people that are working on this problem and ideating around it. Generally, it's an attribution issue. So, like, we can have a auction mechanism at the sequencer level to auction off the ability to propose blocks. Right? Because we have a complete monopoly over block proposal in perpetuity. If you have a single sequencer, we have a rotating sequencer, but basically same thing. And it's really a matter of just like, how do you make sure that if there are bundles and. Or like, entire blocks being proposed and there's an aggregate level of MEv being bid, like, how do you make sure that that is attributed correctly to the DApps that originated it, instead of, say, the users that originated? If the users.
00:34:58.934 - 00:35:55.806, Speaker A: There's already a product by flashbots called Navshare where the MEV generated by a single transaction. If you use a specific RPC, you get a rebate. Yeah, we're still thinking about the exact construction, but it's mostly that attribution issue. And that might not be a solved problem or a solvable problem. We're not sure yet at the moment, but it's something that I think will be highly interesting to Dapps. Dapps want to accrue value, and I think basically people are moving to app chains not because they want to make core modifications to the execution environment or the virtual machine, or they want to make runtime modifications out of precompile. They basically want to accrue value, and they don't want their fees and their users to be messed with because there's another mev generating event or a token mint or NFT Mint that's on the base layer that is basically losing the users because of the fees.
00:35:55.806 - 00:36:06.514, Speaker A: Right. And so, like, if we solve for these two things, I think we have a great chance of basically keeping all dapps on the chain without having giving them an incentive to leave through an app chain.
00:36:06.682 - 00:36:41.518, Speaker B: Thanks. That makes sense. Ren and Terry, I mean, you guys kind of brought up this issue before, but I want to understand attracting users to the chain. I think like, yes, you have apps and you have, I guess, liquidity, and, like, you have a very performant execution layer. But one issue that I feel like you guys might face is the metamask snaps and salmon wallet limitation. And I know you kind of mentioned that you're thinking of onboarding Solana wallets, but I want to understand, like, what that roadmap is. Like, basically.
00:36:41.518 - 00:36:56.610, Speaker B: I know, Ren, you said you don't want me to ask founders what the roadmap is, but I do. Like, this was something that I was thinking about quite a bit. Like, how is, I assume you guys have some plans with wallets coming up.
00:36:57.350 - 00:37:43.522, Speaker C: Yeah. So currently on, like, Tesla and Devnet, a user can only use metamask snaps or Simon Wallet. And there was something that you alluded to, right. There's sort of a problem with SVM chains in terms of chain ids, where a malicious staff can basically request a signature for an eclipse transaction, and then the simulation happens on eclipse networks, but then the staff submits the valid and signed transactions into Solana Mainnet. Because this sort of wall, I can't tell the difference between eclipses like SVM execution environment and Solana's execution environment. And the TRDR said it's basically a new phishing attack vector. So we do want to put out some research and a proposal around that to solve this issue, both for ourselves and other potential SVM chains that will be launching.
00:37:43.522 - 00:38:06.910, Speaker C: In terms of the user experience side, I do think not as many people are familiar with metamask, snapdein, or salmon wallet. We do have other wallet partners lined up that I cannot share right now, but I don't think Solana users should be too worried, I'll put it that way. That's perfect, or should not be worried at all. Perfect.
00:38:08.490 - 00:38:33.120, Speaker B: One more thing, Terry, one thing you mentioned was your sequencer design. We have, like, obviously, over the past few weeks, we've had a lot of talk about sequencers. John Charles released like, a 40 page report looking into sequencer designs. But I want to hear, like, how you guys are approaching that, because, I mean, you are a roll up, a new type of roll up. So I want to, I feel like that's the biggest topic now.
00:38:34.580 - 00:39:17.958, Speaker A: Yeah, well, I have some, like, stronger opinions about this. Largely, like John's post was about, you know, how based pre conformations will make, it's like Solana with extra steps. There's a huge centralization vector with proposers doing preconfirmations. And so if we're commenting on just the base sequencing part and or a shared sequencing part or layer that, you know, a lot of people have been shown showing interest in. Well, so the basic issue is that roll ups introduce fragmentation to the end user. You have to add different chain ids to your wallet. You have to interact and bridge across different chains.
00:39:17.958 - 00:40:21.472, Speaker A: Um, and in large part, like, shared sequencing is a very difficult social issue. I think Justin Drake said on a podcast, it's not a technical issue, it's a social issue. But I think that's why it's very, very difficult to solve. Right? Like, every chain that has a lot of user, user usage, a lot of Dapps use, a lot of users has an incentive to launch their own shared sequencer. If I'm arbitrarium, like, why would I ever opt into optimism super chain instead of just making my own orbit system? And some rebuttals to this have been that basically shared sequencers will harvest cross domain mev at the shared sequencer level and then redistribute that back to constituent chains with some sort of attribution mechanism. But then you can also generalize that to say, like, I can build a shared sequencing mechanism that does that as arbitram, as optimism. Right? So, like, from that perspective, I feel like everyone, every large chain has an incentive to build their own shared sequencer, which ends up resulting in these islands.
00:40:21.472 - 00:40:40.326, Speaker A: So right now you have these sequencer islands, or these roll up islands, or the roll up here, roll up there, roll up there. But then in the future, you're going to have something like shared sequencer there. Shared sequencer. Their shared sequencer gonna look almost exactly the same. You're going to be able to interoperate between, like, shards of a roll up. Right. And that kind of defeats the whole purpose of, like, you know, synchronous composability.
00:40:40.326 - 00:41:09.800, Speaker A: And so the idea that Justin Drake had was like, okay, because it's impossible to get a social shelling point with, like, a company building a shared sequencer. Let's have the Ethereum, like, l one proposer be the shared sequencer. But, you know, like, there's a lot of issues with that in that you can't get the same degree of performance. You're restricted to similar block times. That's where pre confirmations comes in. But that's where, you know, there's all these other trust assumptions. There's all this other issues with mev and centralization.
00:41:09.800 - 00:41:59.340, Speaker A: Yeah, and so, like, that's where the, the Vitalik post came in, where he was arguing either you can spiritually and technologically be a base roll up where you subscribe to kind of the trade offs that space has. You take that block time, you take what's possibly low latency. You take maybe out of protocol pre confirmation guarantees, which might not be delivered in time and or result in centralizing forces, but you go with that. Or you just go with a fast chain. You become a server with extra scaffolding, as he says. But in general, once a chain, an l two does not give an app chain incentive to leave. Then you don't need a shared sequencer mechanism to interoperate between your ecosystem.
00:41:59.340 - 00:42:15.900, Speaker A: And that's where we want to be like we want it. We want to be super scalable, have local fee markets to solve the noisy neighbor problem, and have value curl back to the Dapps. So the apps that are building on eclipse don't have an incentive to go build their own app chain, then we don't need to build our own shared sequencer.
00:42:17.170 - 00:42:56.270, Speaker B: That makes sense. I have two questions, but they're unrelated, so I'm going to ask the first one first. But then I. What? You mentioned apps, but this was the question that I forgot about before. What apps do you guys envision? Like I know you said you want to be unopinionated and that you don't want to decide and that a lot of roll ups kind of fail in that because they want to bring in like what happened in the past. But obviously, if you're building a very high performance chain, you have so certain dapps that you want to attract. Is there anything in your mind that you think is particularly suitable for eclipse because it brings in the SVM and the liquidity together?
00:42:56.650 - 00:44:09.360, Speaker C: I think as far as what that looks like today, there's a good mix of apps between defi consumer NFTs. And I will be blunt in that a lot of the devs today and how the devs function do not need the level of throughput that you see on a lot of these fast or high throughput chains? Right. I want to be very brutally honest about that, but if we basically scale to an order of magnitude larger user base, then these l two s will run into a load of sort of two point issues. So in terms of defi consumer nfts, as far as where our ecosystem is today, there's a good mix of Solana blue chips, there's a good mix of some eclipse native dabs. And I forgot to mention this just now, but we are going to be hosting a hackathon probably around the end of July or early August with five different verticals. And we hope to basically get like a bunch more interesting dabs there as far as where we want to see devs go in the future. Obviously, as Terry mentioned, we want to remain sort of like agnostic and really just enabling builders to sort of build something that they think really provides value to users.
00:44:09.360 - 00:44:46.914, Speaker C: But personally, I think some interesting ideas are, for example, devs that uniquely utilize the parallel execution environment. So for example, there's amms today. And amms operate by sort of living in this gigantic singleton contract, but with parallel execution. For example, you can build a sharded amm wherever every liquidity pool is a separate contract. And with a sharded amm construction, you basically enjoy like a. I think the papers say like a five x higher, like throughput within that ammo. So like, ideas like this are really interesting.
00:44:46.914 - 00:45:21.960, Speaker C: Personally, I also like to see more consumer breakout dabs. I think Defi today is like pretty limited in terms of what you can do, especially, you know, like just trying to make money on meme coins. And I think consumer apps are slowly but surely taking off. You know, you're seeing things like blinks, you're seeing like, things like tip. Then you're seeing things like Zk B two B, which are a lot of these barriers to building proper consumer depth slowly and slowly get broken down. And I think sodium sodi consumer builders will realize that and build interesting devs on chain. And hopefully we'll see some of that on eclipse.
00:45:22.260 - 00:45:35.010, Speaker B: Terry, you brought up fragmentation. Obviously, I'm very concerned about it. You're concerned about it, and I think 99% of Ethereum is very concerned about it. How do you see roll ups evolve over the next few years?
00:45:35.990 - 00:46:22.678, Speaker A: Yeah, there's going to be a lot more roll ups. Like us, we are the first. But basically roll ups that acknowledge the fact that fragmentation is bad and try to become the shelling point where all Dapps can live. And that necessitates a couple of things like local fee markets and fee redistribution. And instead of incentivizing app chains and then interoperating via shared sequencer, I think you're going to see a lot more very high performance roll ups that can support the entirety of execution throughput that is required from their Dapp base. I think it's naive for me to say that the future is going to look like one chain completely dominating the l two landscape. That is obviously, like, where we'd want to be.
00:46:22.678 - 00:46:43.010, Speaker A: But there will always be reasons for people to roll their own chain that doesn't have anything to do with value accrual. And it doesn't have anything to do with fee markets, right. It might be just like a cultural thing. People might want to do it for fun. People might want to actually make modifications to the run time. And that's a legitimate reason for people to branch off into app chain. And so those will always be incentives that are present.
00:46:44.710 - 00:46:45.850, Speaker B: That makes sense.
00:46:48.120 - 00:47:06.900, Speaker D: One thing that's interesting on the Solana roadmap is the possibility of multiple leaders. Right? I'm just like curious, what do you guys think of that? And is that an advantage or disadvantage versus what eclipse is building?
00:47:07.520 - 00:47:07.872, Speaker B: Yeah.
00:47:07.896 - 00:48:01.470, Speaker A: So one advantage you have as a multiple leader is that, well, think about like proof of work. One great part of proof of work was that there's multiple people that are competing for proposal. And if that's the case, then you have much less incentive to play, you know, monopolistic games that you can play because you are a, you are the monopoly for that slot, right? So things like timing games are much less feasible for us. Like there is an inherent trust assumption in relying on a centralized sequencer, especially if we are doing something like non malicious mev redistribution. And so like, we don't, we expressly don't want to go toward a world where we don't have that element. Like we think that element, a trusted sequencer, except with, you know, strong censorship resistant guarantees and strong verifiability. So, you know, safety and liveness are always preserved.
00:48:01.470 - 00:48:46.400, Speaker A: And there's a rotating set. Other than that, we think those are scaffolding enough to give people trust in being able to rely on one sequencer and being able to trust whoever operates that to not be malicious. And that gives us the affordances to really go hard on what is beneficial and what is possible with that construction, which is increase the throughput as much as possible. And that's where we want to operate it. We want to differentiate on execution and everything related to the execution environment. And we don't really want to think too much or compete in those other dynamics of, okay, let's have a maximally decentralized proposer set, for example.
00:48:46.820 - 00:48:57.560, Speaker B: I think that's a good place to end it. Guys. Terry Ren, thank you so much for coming on. Is there any place that I should direct my viewers to check out?
00:48:57.970 - 00:49:17.910, Speaker C: Yeah, definitely. You can find us on Twitter eclipse Fnd, or our website eclipse xYz. And feel free to hop in there. I'm basically trembling online and more than happy to chat with anyone who's interested in building on eclipse or just in general interested in learning more about eclipse. But thank you so much for having us on Paco. And thank you Ryan too.
00:49:19.770 - 00:49:25.336, Speaker B: Make sure to check out Ren's podcast as well and make sure to check out their hackathon at the end of July.
00:49:25.458 - 00:49:29.092, Speaker C: Ren, thank you for the show. Appreciate it.
00:49:29.276 - 00:49:50.240, Speaker B: Alright, have a good one. Are you currently building on Polygon or interested in migrating? Season one of the Polygon Community Grants program is live right now and features 35 million in Matic to support the next generation of polygon projects. Builders on Polygon, these grants are for you. Join the aggregated future today by applying at Polygon technology grants.
