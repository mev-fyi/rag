00:00:00.160 - 00:00:00.552, Speaker A: Hey there.
00:00:00.598 - 00:00:30.820, Speaker B: This is David Wong. This is the new episode of the podcast. This episode is a bit different because this time we have video, at least if you're watching on YouTube. You know, we're in 2024, God damn it. And for this episode, I did something different. I also am interviewing two people. One of them is Kevin Hurley, who I used to work with at Librandiem, who's an amazing human being, an engineer, and who was in the payment industry before, worked together for two years on the cryptocurrency.
00:00:30.820 - 00:00:37.380, Speaker B: I went on to work at Mina. He went on to work at Lightspark, which he will talk a bit about.
00:00:38.160 - 00:00:39.264, Speaker A: I thought he would be a great.
00:00:39.312 - 00:01:17.008, Speaker B: Person to talk about L2s on bitcoin. And another guest, this time we have two guests, is Alex Axelrod, and he's basically one of the OG Bitcoiner. Very knowledgeable all around about bitcoin. He works at Lightspark also, and he's actually one of the people that were cited on the original lightning network. Bitcoin Lightning network paper, which we're going to talk about. Also in this episode, I kind of wanted to stop talking about bitcoin. I've talked about bitcoin for many, many episodes.
00:01:17.008 - 00:01:56.680, Speaker B: I really wanted to do maybe one or two episodes about bitcoin, but there's so many things to talk about. And Bitcoin is like, sort of cool again with a bunch of new L2s coming on bitcoin, and we'll see what L2s are. And this new Bitvm thing that we will also mention in this podcast. So I thought maybe we should at least do one last episode to introduce this. What is an l two and why they're so trendy and cool these days. So I had a lot of fun recording that podcast, and I hope you enjoy listening to it as well.
00:01:58.900 - 00:02:11.480, Speaker A: Maybe taking the point of view of history, like, what would be the first l two that came? Of course, it wasn't bitcoin, but what do you guys would say the first l two was?
00:02:12.300 - 00:03:02.060, Speaker C: First? I think you should probably step back and talk about what an l two is. An l two is typically a layer that sits on top of the core blockchain, the layer one, and is used to add scalability so that you can do more transactions. You can do, at times, quicker transactions. You can potentially have more programmability built into it. So, for example, you could add an eVM type of sidechain to bitcoin or something like that. So you can have additional ability to do things you might not be able to do on the core layer one. Now, there's probably some debate on exactly what an l two can be, whether it requires unilateral exit, for example, where you can leave the l two without having any interaction with anyone else.
00:03:02.060 - 00:03:42.966, Speaker C: And there's a bunch of different ways you can actually make an l two. So you could have, for example, a federated side chain where you can do a bunch of fancy things, but it essentially boils down into a multisig, a big multisig. You can do merge mining, you can do a bunch of other variations where you're able to do different things. I think in bitcoin, Alex can probably talk through the history a lot better than I can. But I think it largely started with lightning as kind of the original one, and then you have liquid and a few others that came around the same time. But Alex, I'll kick it over to you for some of the history there.
00:03:43.148 - 00:03:43.870, Speaker D: Sure.
00:03:45.570 - 00:04:11.750, Speaker A: Also, can I interject just before. So it sounds like I always had this idea that they were very simple l two s that bitcoin started with. And I don't actually know if these were l two s by the definition of l two s, but I remember people talking about like namecoin and colored coin and these kind of things. I remember blockstream doing some, some stuff. Maybe before lightning network was a thing, but I'm not sure.
00:04:12.450 - 00:04:56.532, Speaker D: Yeah, so when you talk about the first l two s, I would definitely say that Namecoin is one of them. Colored coins is one of them. Initially kind of the fillman style payment channels that were proposed, but never, I mean, they were implemented in bitcoin J but never really took off because there was no CSV CLTV op codes, there was no malleability fix that came in the form of segwit in 2017. So, yeah, the Spillman style payment channels never took off. So bitcoinj is a bitcoin protocol implementation in Java. It was used by some of the very early, you'd call them SPV wallets. They're like lite client wallets.
00:04:56.532 - 00:05:17.870, Speaker D: Bitcoin wallet for Android and multibit, I think were the ones that used it. Mike Hearn was the main developer, and Matt Corralo, who right now works on Lightning, was actually contributed the implementation of payment channels to bitcoin J back in 2013 ish.
00:05:18.450 - 00:05:32.030, Speaker A: Okay, maybe 2013. And so if we, I guess if we go back to these like simple l two s that were proposed, like how would like namecoin? I don't. What's the difference between namecoin and color coin and like, what are these things?
00:05:32.330 - 00:06:36.780, Speaker D: Sure. So namecoin was basically is, I think it might actually still be in existence. It's a merge mined separate blockchain. So the idea is that miners could mine both namecoin and bitcoin, spending only on the bitcoin proof of work, but committing to a block for namecoin in the bitcoin block coinbase. And that basically let Namecoin have essentially the proof of work security of bitcoin. As long as namecoin nodes would validate the namecoin block. As far as colored coins, that is a way to mark Utxos on the mark transaction outputs or color them, allowing kind of like ordinals to be allowing for that marking to propagate according to a set of convex.
00:06:37.840 - 00:06:49.296, Speaker A: Okay, so is that, is that this kind of like protocol where like you use up return as like a trick to like, so that like special clients can like understand transactions on bitcoin differently from like.
00:06:49.488 - 00:07:26.260, Speaker D: So colored coins didn't really use op return. I think right now there are protocols like counterparty that use operatur and that came a bit later after colored coins. Colored coins, like the original proposal for this, colored coins let you send an output. And when you do, any output that came from, that are from the descendant transaction were also colored the same way. So you could propagate basically tokens that are marked as a different kind of token.
00:07:26.960 - 00:07:39.336, Speaker A: And so these are, how did you mark. So I always thought like, I always imagined that op return was like the OG of creating an l two. But so what, how did they like Mark these Utxos?
00:07:39.528 - 00:08:50.658, Speaker D: I don't remember exactly how they were marked. I think it was basically an agreement where you have a Utxo that had a certain amount of, that had a certain number of stats in it, and you would mark it outside of the bitcoin blockchain, as this is the parent utxo of this token. And then when that was spent, all of the outputs that matched that that came from it would also be marked as that token, so you could split it. I think there was a way to add fees to transactions that spent that and mark that and basically have that counted as something separate just for, basically just bitcoin for fee payments. But the colored coins were basically descendants of the original output. And you see something kind of similar with even taproot assets today. The newer proposals for l two tokens on top of bitcoin where there's an initial output that's marked a certain way and then descendant outputs from it.
00:08:50.658 - 00:08:54.270, Speaker D: Are considered marked in the same way.
00:08:54.570 - 00:08:59.802, Speaker A: Like in my word of ethereum is kind of like you're minting some like ERC 20 token and like.
00:08:59.866 - 00:09:51.390, Speaker D: Exactly oper wise. So oper turn itself came a little bit later as far as its use in data storage. But one of the most interesting uses, I think, is open timestamps. And I think that's also one of the simplest uses, and that's essentially committing initransaction to any, pretty much any amount of data, any set of data points that can be committed to using a Merkle root path that's put in the offer turn. And now with taproot, you can do that even more simply with tap script or, sorry, with tap trees, meaning you can commit data inside the tap tree and then validate it with a merkle proof. And in fact, this is how a lot of newer proposal work, newer proposals work, including again, that fruit assets.
00:09:53.690 - 00:09:58.562, Speaker A: So you're committing to miracle trees using these techniques on chain.
00:09:58.746 - 00:10:18.742, Speaker D: Yeah, exactly. There's not really on chain validation for what's in the merkle tree, but the L2 node software can enforce conditions on that, and some of these as valid or ones that don't match the rules as invalid.
00:10:18.806 - 00:10:42.820, Speaker A: Right. So it's always sort of what I'm trying to think about when I think of an l two. It's like you have some client software that sort of analyze the blockchain in a different way, and so you have some opaque data on the l one, and that opaque data only has sense on this l two, which is the l two doesn't really exist. It's just the way you interact with it, with your spatial clients, I guess.
00:10:44.000 - 00:10:48.740, Speaker D: Yeah. As far as concerns, the l two doesn't really exist or matter.
00:10:49.240 - 00:11:20.000, Speaker A: Right. And I guess they were. So I came, you mentioned like multisig and these kind of things. I feel like there's always a tension between, like what can be called a side chain and what can be called an l two, especially in the ethereum world, like everybody fights all the time about that. I'm wondering what's happening on the bitcoin. In the bitcoin world, it seems like there's a lot, a lot of new l two s. Like an l two on bitcoin is like the new trendy thing to raise funds with.
00:11:20.000 - 00:11:49.390, Speaker A: The criticism I hear is always like, oh, is this really an l two? Or is this more like a side chain? So I don't know if we should start getting into that, but I think that it would be interesting to get into this kind of distinction at some point, but I had a list of projects, and maybe you guys can tell me what do you consider them to be, and if they're l two s for you, maybe we can talk more about them. But I had blockstream stacks and rootstock are these.
00:11:51.290 - 00:12:24.742, Speaker C: Blockstream is like the company that does a bunch of things in bitcoin. So they have liquid, they have c lightning, they have green light, they have a bunch of projects that they work on. Liquid is probably more of a sidechain. It's like a federated side chain. Whether you consider side chains to be an l two or not is like you mentioned, kind of a big topic of discussion. Generally don't allow unilateral exits because you have a federation which holds the keys. They can decide if they want to allow you to withdraw or not.
00:12:24.742 - 00:13:21.144, Speaker C: There's usually pretty strict rules around that, so generally there's not a real issue with that. But technically they have control of usually the bulk of, if not all, the funds. Oftentimes there are things where they run this in hsms or other things to allow them to have more plausible deniability that they have ability to actually move the funds unilaterally. But technically, generally they are just giant multi segs in a lot of times, in terms of whether they are l two s or not, all those that you mentioned, there's probably debate on. I think stacks is probably a little bit more unique because it has its own token. So that makes it harder to justify maybe calling it an l two natively. But I think there's an argument to be made for all them, whether they're l two s or side chains, or whether you consider sidechains to be l two s.
00:13:21.144 - 00:13:29.980, Speaker C: I guess technically they're probably all side chains, but whether you consider l two s to be sidechains or not is kind of the big topic of discussion, and I'm mixed on it personally.
00:13:31.040 - 00:13:32.528, Speaker A: You're mixed, you said?
00:13:32.664 - 00:13:41.900, Speaker C: Yeah, I don't know if. I guess technically I would consider them to be l two s, but with more trade offs than many people might be comfortable with.
00:13:42.720 - 00:14:20.360, Speaker A: Yeah, I think another assumption, or like another factor in like this. This kind of distinction between l two s and side chain is also like, what is the trust assumption? Like, do you also rely on like a committee that can like, like sign stuff? And if you rely on a committee that signs stuff, instead of relying on the proof of work of bitcoin or something like that, maybe you're not really like a native l two, or. But I want to go back to what? What you were saying. You mentioned unilateral exits. Are there. Are there any projects today that, like, build on bitcoin that have that. That thing? And actually, what is it? Maybe if you can define it.
00:14:20.740 - 00:15:00.150, Speaker C: Yeah. So unilateral exit means that you can exit yourself from the l two without having to have any interaction with anyone else or reliance on anyone else. So in a federated side chain, where it is a. Let's assume it's just a big multisig, you effectively have to have the owners of the multisig send you coins back on l one. So if you sent coins into this big multisig contract that's now put in, that's kind of the peg into the side chain. When you want to peg out, you have to get all the entities that can sign off for the multisig. You have to have them sign off so that they can spend the coins back to you on l one.
00:15:00.150 - 00:15:25.450, Speaker C: On bitcoin. I believe the only one that actually has this property right now is lightning, because you can do a forced closure of your channel, where you just close the channel, and then you'll be able to recover your funds on chain at a later point, let's say a couple of weeks. So you don't actually need the counterparty to be involved at that point to withdraw your funds. I don't know, Alex. Are there any others right now that have unilateral exits?
00:15:26.190 - 00:15:29.650, Speaker D: Not that I can think of in wide use.
00:15:30.630 - 00:15:39.926, Speaker A: I mean, if you think of the way you were describing colored coin, wouldn't colored coin be since you're acting directly with bitcoin?
00:15:39.998 - 00:16:05.170, Speaker D: Colored coins have a different trust assumption from bitcoin in that their native token is not bitcoin. Bitcoin's blockchain is capable of enforcing money movements. For bitcoin itself, colored coins are tokens on top of bitcoin. Or if you have somebody that you can't exit a colored coin to bitcoin in that way, you can only trade it for bitcoin.
00:16:05.990 - 00:16:13.504, Speaker A: So it's like once you minted this new colored coin, I guess, or a token, then you're stuck with that token. There's no.
00:16:13.662 - 00:16:31.400, Speaker D: Unless you interpret it as satoshis. And then, you know, it could be like one satoshi is equivalent to one colored USD or something like that. But there is no unilateral exit into a, like, paper cast from a colored coin.
00:16:31.700 - 00:16:57.806, Speaker A: Okay, I think I understand what you're saying. So it's like once you move your coin to, like, this colored coin, l two, it sort of becomes like a different world according to, like, what people decide it to be. And so you could be like, my color coin is like a Utxo on bitcoin. And. And maybe you think it has more value because it's a color coin. Other people might not think it has more value, but I'm gonna, I'm gonna decide to make a trade with you offline. No.
00:16:57.806 - 00:17:08.840, Speaker A: And sell you that Utxo for more Satoshi, that what it says it is because in our world or spatial world of l two, we see it as more expensive.
00:17:09.940 - 00:17:11.200, Speaker D: Yeah, exactly.
00:17:11.580 - 00:17:24.940, Speaker A: Okay, so would you, to go back on the lightning network, would you say that it's one of the only real l two, then? If we use that unilateral exits metric.
00:17:25.100 - 00:18:01.850, Speaker C: Yeah, if that's how you're defining an l two, then the only one that really meets that criteria, that's in wide usage on the bitcoin network. There are others that are being proposed with additional opcodes that you can potentially do that. So there's cat vm, for example, which will use Topcat, which I think that will allow you to do unilateral exits. Correct me if I'm wrong there, Alex, but I believe OpCat allows you to do unilateral exits. I think maybe if you have ZK verify, I think you can also do that from some ZK roll ups. But all these are things that are in existence right now.
00:18:02.150 - 00:18:06.086, Speaker A: Do you need a fork of bitcoin to use these things?
00:18:06.238 - 00:18:09.370, Speaker C: Yeah, you need new opcodes to actually be able to do some of these things.
00:18:10.070 - 00:18:40.948, Speaker A: Okay, so I guess maybe let's talk about side chains. So you guys mentioned liquid. I've heard of like Merlin as a side chain. People talk about the fact that a lot of bitcoins exist as red bitcoin on chains like Thor chain. So do you consider all of these things sidechains? And do you see, are there like common patterns in side chains or like this kind of like, network? Imagine that I'm five and you want to explain these kind of side chains to me? Like, how would you even start?
00:18:41.044 - 00:19:05.126, Speaker C: So there's a few different patterns that you can see on sidechains. So one is kind of that multisig model where it's a federated side chain in that world. It's like, okay, I'll send ten coins to you and Alex. You guys can hold onto them. You can only spend them. If both of you agree to spend. We can then do a bunch of things on this side chain where we can transact.
00:19:05.126 - 00:19:56.170, Speaker C: You can say okay, Kevin has ten coins. He can send that to anyone else on the sidechain we have. And at the end, when anyone wants to go online, you and Alex sign off and you agree that those coins can be moved back to l one, and you'll send it from the locked funds that have been locked when they originally sent to you. So that's one model. There's another model where there's merge mining. And Alex kind of touched on this a little bit before, but the miners in bitcoin will also mine this side chain. So you get some of the benefits of having the miners do proof of work so you can have somewhat of the security of bitcoin and that you can kind of jumpstart your mining process so that you have some level of hashing on or mining on the side chain without having to spin up new validators and new miners because you're utilizing the same ones that were used on bitcoin.
00:19:56.670 - 00:20:13.710, Speaker A: So I'm actually not familiar with merge mining. Is it that whenever, like you're a miner in bitcoin, whenever you merge a block, you automatically get a free block on the other chain and so you advance both chains, like in a lock step, I guess, or in the same, the same cadence?
00:20:14.050 - 00:20:18.750, Speaker C: Is it how it works, Alex, I'll let you go into details there.
00:20:19.090 - 00:21:02.102, Speaker D: Sure. So it doesn't have to be just one block, but essentially every, when a miner is doing merge mining, they're validating the side chain as well. For example, let's take Namecoin. They're validating the namecoin blockchain, and they do commit, when they're mining a bitcoin block, they commit to the latest namepoint block, and they do collect the subsidies from Namecoin in that. But yeah, they commit the latest namepoint blocks through the coinbase in the bitcoin block and put all of their proof of work behind that.
00:21:02.206 - 00:21:02.870, Speaker A: Okay.
00:21:03.030 - 00:21:43.670, Speaker C: Is you can actually also do blind merge mining, where in merge mining, typically the miners have to run a node for the alternative sidechain that they're using. In blind merge mining, you can have a third party that decides what they want to bid on for this next block, and they can bid and say, okay, we want the next block to have, for example, this root hash. You include this one. Whoever bids the most gets it into. They tell the miner, okay, I'm going to pay you ten coins if you include this through hashem. And then the miner doesn't have to run the validation software for the alternative coin. So it's lighter weight from a miner's perspective.
00:21:43.670 - 00:22:03.396, Speaker C: And then you have economic principles where in theory it should only actually be bid on by a valid block because otherwise it won't actually be validated by the entities running full nodes on the side chain. So it would be kind of worthless for you to bid a higher amount for something that would considered invalid anyway.
00:22:03.588 - 00:22:18.660, Speaker A: So. Okay, so I think I understand, like you're using bitcoin to commit to like the data of your chain or like the history of your chain, like a checkpoint, like on bitcoin, but where do you commit it? Like, that was not too clear to me. Like do you put it inside a.
00:22:18.700 - 00:23:06.530, Speaker D: Transaction or with blind merge mining? Yeah, you can put it inside a transaction. An example that uses this is space chain. Wherever there's a chain of pre signed transactions that each is time locked. And as you get to a specific block, one of those transactions becomes valid. And then you can basically spend that along with another input of your own to bid on, including your transaction in a block. Only one of those descendant transactions can be mined, sending the phase chain output, but it's going to be the one that pays. It's likely to be the one that pays the most fees to the miners that will get included in the actual block.
00:23:06.530 - 00:23:16.878, Speaker D: So in this way, the merged miner can compete by spending bitcoin to get the block mined and essentially purchase mining part.
00:23:16.934 - 00:24:09.700, Speaker A: Okay, so another thing I realized also is that we kept mentioning multisig, but it might not be clear to everyone what multisig actually is. Oh yeah. Do you guys want to actually explain what does it mean to have a multi sig? And also maybe in the context of like, I don't either liquid Merlin or Thor chain or one of these networks, like do they just use a multisig in a. So maybe there's different ways of using multi sig. There's sort of just trust us, you know, like we'll sign stuff and maybe there's like we'll run our own consensus and these signatures are like the signatures of the consensus. I'm not sure if this is what Thor chain is doing, for example, or. But I think some of these protocols are basically running their own consensus.
00:24:09.700 - 00:24:12.948, Speaker A: And you're just verifying these signatures, but I'm not sure about that.
00:24:13.084 - 00:24:56.610, Speaker C: Yeah. So a multisig in general is, let's say there's ten people who we're going to trust to hold the keys. And we can say that some number out of the ten, it could be nine of 1010 of ten are required to sign off for any operation to actually happen. So I send ten coins into this multisig. It then requires, let's say, all ten of the people that are the owners of the multisig to sign off to be able to spend those coins. You can set a threshold so it can be seven, 8910, whatever number you want to, to be the threshold for the multisig, but the funds within it can't be spent without whatever number of those entities signing off to spend. And that's a multisig.
00:24:56.610 - 00:25:35.842, Speaker C: So it's really simple. It's just some threshold out of the total number of signatories need to sign off to actually be able to spend the coins in there in a network, like liquid. Like, let's say it's. I don't remember offhand, but let's say it's two thirds of the entities need to sign off to actually spend the coins. Now, there's some trade offs in liveliness there, because if, let's say, half of the entities go offline, they wouldn't be able to actually spend the coins. So I think in liquid, what happens is there's a fallback where it falls back to three keys that are held in cold storage. Blockstream might have one of those keys, someone else might have another of those keys.
00:25:35.842 - 00:26:09.352, Speaker C: So that those keys can guarantee that the funds can later be spent. Enough of the entities go offline. But that's effectively what a multisig is. It's just a big group of signatories that can agree on being able to spend the coins. Now, typically within l two, you have some level of consensus on what the latest state is. So you would do some form of consensus to figure out who has how much of each coin on the L2. Once that happens, then the signatories can decide if someone wants to withdraw.
00:26:09.352 - 00:26:36.610, Speaker C: Let's say they send it to some withdrawal address on the l two, which effectively burns the coins on the L2. When that happens, the signatories see that and decide, okay, these coins are gone from the l two. We need to send it now to someone on l one, and we'll send it to whatever address was included. When they burn the coins on the l two, then they all sign off on sending those coins to the layer one address, and the coins are moved back to layer one and what's effectively a peg out.
00:26:37.710 - 00:27:00.632, Speaker A: Yeah, and actually, it's nice that you explain it like that. That's something that took a while for me to understand. It's like, like, how do you breach things from this l two to, like bitcoin and. And basically all the time. It's only. There's a wallet or there's a public address on bitcoin that is controlled by this group on DL two. To send money to DL two, you send it to this multi sig wallets.
00:27:00.632 - 00:27:07.592, Speaker A: And when they want to send it back to you on bitcoin, they sign something to release something from these multi.
00:27:07.616 - 00:27:12.016, Speaker C: Sig wallets for federated multisigs. That's effectively what happens.
00:27:12.208 - 00:27:34.556, Speaker A: And they might use some consensus because it's just hard to figure out what they should sign without some consensus algorithm. And they might want to use even some token or something to have some sort of economic security so that you don't just trust a bunch of people to sign something. You also trust that they're incentivized not to sign whatever and follow some protocol.
00:27:34.748 - 00:27:52.320, Speaker C: Yeah, you can have them effectively give bonds on l one where funds are held. And if you're able to prove that they did something malicious, you can slash their funds. So there's ways to make it less trusted. But at the end of the day, you're still in a big multisig.
00:27:53.270 - 00:28:06.730, Speaker A: I think there's a project that allows to do things like that called Babylon that I've never really looked into. But you can stake your bitcoin to bootstrap the security of these l two s.
00:28:09.070 - 00:28:17.610, Speaker C: Your bitcoin for proof of stake systems that are other chains. Alex, do you know more about Babylon?
00:28:18.000 - 00:28:30.620, Speaker D: I don't know much about Babylon. I know that, for example, join market uses fidelity bonds like this to ensure behavior of the makers.
00:28:32.160 - 00:28:36.180, Speaker A: Fidelity bonds like real world assets.
00:28:37.120 - 00:28:45.140, Speaker D: No, like basically an output that can be claimed by anyone that can prove that one of the participants.
00:28:45.600 - 00:28:46.984, Speaker A: Okay, so not fidelity.
00:28:47.072 - 00:28:53.260, Speaker D: No, no, broker fidelity. Like acting, right? Acting according to the protocol.
00:28:54.680 - 00:29:26.238, Speaker A: Okay, so let's talk about something else that I don't know where to put these things. I think they're trying to be l two s or side chains, depending on what they're doing. But, like, people have been talking more and more about roll ups. And maybe it's worth mentioning, I think there's rolekit and maybe sovereign SDK doing some stuff. To my knowledge, they might work in the same sort of multi seq fashion. But I don't know if you guys knew more about what I know on this front.
00:29:26.414 - 00:30:32.388, Speaker C: So really, the new paradigm that has kind of enabled a lot of roll ups on bitcoin or in theory, will enable a lot of rollups on bitcoin, is Bitpmdez. So BitVM, at its core, is taking any program compiling it down into NAND gates and you can form any program out of the sufficient number of NAND gates. The theory is that you can then use that to create any program that you want to on bitcoin, ideally at any Turing complete or deter incomplete VM where you can do anything that you potentially might want to. Now the downside is it's actually pretty complex because you're breaking every program down into NAND gates, which can get to be pretty large in reality. You can simplify that sum, and it's not truly NAND gates for every single thing, but in practice it's easy to think about it's just a bunch of nand gates where you can have any program, you can execute it on BitVM, which is just a bunch of NAND gates. Again, in a program that's sitting on bitcoin. What you do is you actually run that off chain.
00:30:32.388 - 00:31:24.770, Speaker C: So you only actually go on chain if you need to dispute something. But you have this program that can, then you can think of it as compiling to be able to execute any arbitrary program, and you can run that on chain in the event of a dispute. So in theory this allows you to bridge to roll ups in a trust minimized way, where you only have to trust one of n entities, where the end entities are the operators of the BitVM rollup or the BitVM bridge. You can then use that to bridge to any other side chain or to a roll up in a very trust minimized way. There's still a lot of exploration into exactly how this will work and how to make it practical. There's a few variations of BitVM that have different trust assumptions in BitVM too. Anyone can challenge when something might be amiss, but it can become extremely expensive on chain.
00:31:24.770 - 00:32:03.450, Speaker C: In the original BitVM, only the actual validators. So let's say 100 entities can actually challenge when something goes amiss. And then something does go amiss and you publish or try to do a withdrawal that the operator wasn't allowed to do. It falls in to the next operator and the next one and eventually the land in being a one of one multisig or single sig, which has different trust assumptions and just a large multi sig would. But there's interesting properties because it enables you to actually almost, they're very trust minimized bridge over to a roll up or another l two.
00:32:03.910 - 00:32:10.090, Speaker A: So is this what rollkit and like this kind of roll up use then? Is that why you mentioned Big DM?
00:32:11.110 - 00:32:27.940, Speaker C: I'm not sure about Rolekit. A lot of the newer ones, there's like Citria, Alpine, there's probably 20 to 25 new ones that are coming out that are using BitVM. I don't know specifically for the ones you asked. Alex, do you know, are they using Bitvm?
00:32:28.520 - 00:32:31.136, Speaker D: I don't know. I think these are pre bitvm.
00:32:31.288 - 00:33:20.560, Speaker A: I believe sovereign SDK was using signatures, but they were, they were trying to move to using BitVM to basically run like a zero knowledge proof verifier. Like that would be the program. And run that into this. Yeah, like circuits spread across many transactions. So if I understand correctly, these are like optimistic protocols that work well if there is no problem. Sometimes people can lie. You need to have these like very long period of challenge periods where someone can produce a fraud proof in case there was a fraud and sort of challenge the result, I don't really know how realistic, I guess, using these protocols are, considering that these circuits might be very large transactions take time to get processed.
00:33:20.560 - 00:33:29.820, Speaker A: It's expensive, but I think that's the first time we're hearing about verifying more complex programs on bitcoin. So that's really interesting research.
00:33:30.720 - 00:34:14.844, Speaker C: Yeah, I think right now it's still pretty early. I don't believe any are actually launched. I think Citria has something on Testnet, but I don't know if anyone's actually gone to mainnet yet. It depends on the variation you're using. So last I'd seen, I think doing a snark verifier was about 4gb of on chain data, which at four megabytes a block, you're using 100 full entire blocks just to store your snark verifier on chain, which is obviously going to be pretty prohibitively expensive. There are other variations where you don't have to put quite as much on chain, and I think the original BitVM version, you don't have to put a quite as much on chain. So there's optionality, but there's different trade offs in terms of the settlement time.
00:34:14.844 - 00:34:51.620, Speaker C: So if an operator wants to withdraw in the original BitVM, I think it's about six months or so. In BitVM two, it can be down to like two weeks. So now that's only for the operator to withdraw. Users would do swaps out, so they can do a swap and the operator effectively sends them money of the operator's own money, and then the operator can later reclaim that money through doing a peg out. So there's different trade offs and there's different time to actual withdrawal for the operator, which also means they have to front money for longer periods of time or short periods of time.
00:34:52.120 - 00:35:05.880, Speaker A: So that's interesting because the operators could like. Yeah. Put money in the system. They would put money in the system to make the user experience faster. And. And if there's a problem, they would be the one trying to recover the money.
00:35:06.040 - 00:35:36.100, Speaker C: Yeah. Generally how this works is when you want to withdraw from the roll up or bridge, you again effectively burn the coins on the l two. When that happens, the operator will send you coins that they hold of their own on l one. And then at some point later, the operator can try to do the peg out themselves, and they can claim the funds on layer one to make them whole. So they're fronting you the money for some period of time, and then they can later reclaim those funds on l one.
00:35:37.040 - 00:36:16.050, Speaker A: Okay, very interesting stuff. Maybe we'll have another episode on BiTVM in a few months. So I think it's a good time to talk more about the lightning network. I was wondering, how should I. What question should I ask to sort of segue into that? Do we need to start with these? Like, I can never remember the name of this early protocol that use hash function to do cross swaps. It's like hash box, atomic contract, HTLC or. So do we need to start with that? Or can we go directly to, like, how would you introduce lightning network and what it is?
00:36:16.390 - 00:36:40.470, Speaker C: So maybe let's talk about why it exists. So the thought is that bitcoin can only scale. So far. You can only do, let's say, like six to seven transactions per second. Block times are ten minutes, and you have to wait for a certain number of confirmations. It can be relatively slow and expensive. And where lightning comes in is it allows you, in theory, infinite throughput.
00:36:40.470 - 00:37:13.320, Speaker C: You can send transactions immediately, have instant settlement at extremely low fees. So it allows you to actually scale bitcoin to a place where you can do real time transactions for negligible fees and do that in a way that's actually scalable. So that's kind of the theory behind why lightning exists. It allows you to actually scale bitcoin to something that is more usable for real payments. Use cases. Now from there, Alex, you're probably best to kind of talk through a little bit of the history of how it came about and how it got to where it is today.
00:37:13.980 - 00:38:10.620, Speaker D: Sure. There's kind of two parts to lightning. One is the channel that's almost like a side chain between two peers, where you have a multi sig between two lightning peers that transact with each other. And then there's a pre signed transaction that spends that multisig at every step of the way. And a new state is basically a new, what's called a commitment transaction that spends that multisig. And then there's, in modern lightning, there's a penalty for broadcasting an old state in that it's kind of like, kind of like slashing in that when one node broadcasts an old state, the other node can take all that money. There have been other proposals for update mechanisms for these channels, including duplex channels that use decrementing time locks that make it.
00:38:10.620 - 00:38:57.350, Speaker D: That basically means the latest states have the earliest time lock and be spendable first with new. With new covenant like constructions, including syntax and h three valve, for example, you can replace that state update mechanism. One example is like ln symmetry, which is called l two, instead of a penalty mechanism, will eventually let us replace old states with new states directly. So these channels are basically the first part of lightning network. And there's a variety of ways that they can work, and there have been multiple versions of them to make them work more efficiently on stage.
00:38:57.510 - 00:39:10.768, Speaker C: And then the interrupt you for just 1 second. So kind of taking a step back. The way I think about lightning at a high level is it's effectively like an abacus. So you have an abacus with beads on it and the beads. Oh yeah.
00:39:10.784 - 00:39:12.540, Speaker A: Okay, what's an abacus?
00:39:12.840 - 00:39:14.576, Speaker C: So like the abacus was like the.
00:39:14.728 - 00:39:17.432, Speaker A: Adding the chinese thing to cons, right?
00:39:17.536 - 00:39:39.324, Speaker C: Yeah. Or like if you ever went to like us dentist's office, they always had those toys where you could move the beads along these wires. And that's effectively kind of what lightning is. So you have this abacus where. Or this wire with beads on it, and the two sides are the two entities. So let's say I create a payment channel between myself and Alex. There's then these beads on the wire.
00:39:39.324 - 00:39:49.652, Speaker C: I can push the beads over to Alex, he can push the beads on his side over to me. And that's how we transact. So we just push these beads back and forth. And the beads are Satoshi's in this case.
00:39:49.796 - 00:39:52.476, Speaker A: This is a great analogy. This is really great analogy.
00:39:52.628 - 00:40:19.044, Speaker C: A big graph of these. So Alex then has another wire between himself and you, and you guys can again push beads. So if, then I want to send to you. We don't have a wire directly between myself and you. So what I do is I push beads to Alex. Alex then pushes some of his beads on the wire between you and him over to you. And this is done in an atomic fashion, so that either all the beads move or none of the beads move.
00:40:19.044 - 00:40:53.560, Speaker C: And it's a big graph of these wires between individual entities with beads on them that can be pushed back and forth, and it forms this big graph. So then I can connect to someone that I'm not directly connected to by pushing beads along the route. And again, that's an atomic operation. So it's not like I would push beads to Alex. And then he can keep the beads. He has to push them to you. He might push them to another entity, but it's a giant graph of these point to point connections where it forms a graph that you can move beads along the path of.
00:40:53.560 - 00:40:56.084, Speaker C: So that's kind of what lightning is in theory.
00:40:56.272 - 00:41:06.292, Speaker A: And this channel, it's on it. So, Alex, you said it's almost like users or peers that create channels between them are creating a side chain. It's almost like an l two. Right.
00:41:06.436 - 00:41:16.160, Speaker D: Since they can, each of these channels is like its own little separate side chain where there's a sequence of states that the channel has gone through.
00:41:16.460 - 00:41:27.630, Speaker A: Right. So every time you're moving these beads, you're sort of creating a new update, like a new state or a new view. And there is, like, a cryptographic protocol to do that so that you cannot just arbitrarily.
00:41:28.690 - 00:41:58.882, Speaker D: Yeah, exactly. And then there's a second part of the lightning network, which, as Kevin said, makes these payments across multiple channels. Atomic. And that's htlcs, which lock all of the payments in the payment path with a single path. And then revealing the pre image, the path will commit that payment across the entire. Across the entire chain of channels that the payment delivery.
00:41:58.986 - 00:42:10.430, Speaker A: I guess you. I'm saying it would take, like, an entire episode to, like, explain this. It's hard to explain that without a whiteboard. I would.
00:42:10.810 - 00:42:56.242, Speaker C: Every time I see these visuals to explain it well, but effectively, every entity along the path puts this hash timelock contract between them and their peer. And what they're saying is, okay, if the receiver of this reveals the preimage of the hash, that means I can claim the funds and we can put this on chain, and I can claim these funds anytime. We establish this across every hop on the route. And then the receiver of the ultimate receiver of the fund says, okay, I have the pre image to this, so I can claim the funds. So I give it to my immediate peer, and now we both know I can claim these funds on chain at any point. So we'll update our channel and remove the HTLC and say, okay, we settled it. We know we could go on chain at any point with this.
00:42:56.242 - 00:43:29.016, Speaker C: So we'll just clear out the HTLC and say, okay, now Kevin has the funds, and I push my beads over finally. And now I have the preimage. So I, or that entity has a pre image so they can show it to their peer, and it keeps going up the chain of peers that were in the flow of funds, and they keep revealing the pre image to the prior person, who then says, okay, now I agree that you could claim this on chain if you wanted to. So we'll settle out the HTLC, and it keeps going until it gets to the sender, and then everyone has effectively cleared out and settled the funds at that point.
00:43:29.088 - 00:44:08.080, Speaker A: So it's interesting. So in the first episode of this podcast, I was explaining correspondent banking and how when you want to pay someone somewhere in the planet, like, basically you have these protocols that will find a route between their bank account and your bank accounts, and it might go through like several bank, different banks and central banks and so on. And so maybe an intro, I don't know if it's a stupid question or an interesting question, but is there a notion of, like, central bank in this lightning network? Like peers that are connected to, like, more peers than others? And so it makes sense to try to connect to these peers because you'll go faster or cheaper like someone else.
00:44:08.580 - 00:44:53.316, Speaker C: I think that's always been a little bit of a debate. So there are hubs that are connected, they're very widely connected, and oftentimes individuals or other businesses will try to connect to those hubs because it means you have an easy way to reach most of the graph. Now, the problem there is that can create some level of centralization, because if that hub goes offline, then it becomes much harder to transact because everyone is just connected to that one peer. So there's, I think, always been some debate on, are hubs good for the lightning network or bad for the lightning network. I think well operated hubs are generally good because it enables you to actually transact more efficiently, but it also has that trade off of creating some level of centralization.
00:44:53.468 - 00:45:06.120, Speaker A: Yeah, that's an interesting, I'm guessing there's a lot of trade offs and things like that. And also we don't like, like people or we, or people don't like centralization in these kind of networks. So you have to play with that.
00:45:07.020 - 00:45:32.970, Speaker C: So the good thing is you could still establish a channel to individual entities and just transact over that channel. There's also a lot of different hubs that you can connect to. So it's not just one entity that is a central player, there are many, and you don't actually have to connect to those. So from that standpoint, you can still keep the decentralization, but oftentimes it's easier to connect to a hub because they have good connectivity across the graph.
00:45:33.550 - 00:45:48.622, Speaker A: So today, who uses the Lightning network? Where is it? And also, maybe that's a good moment to talk about where you guys work and what you guys have created with Lightspark and how it relates to the lightning network.
00:45:48.726 - 00:46:34.784, Speaker C: So what we do at Lightspark is we are trying to enable payments, overdose bitcoin, or enable bitcoin payments. And the way we're doing that is on lightning, which, as we discussed, is a L2 for bitcoin. It allows you to send funds instantly at extremely low fees. And we are trying to make it really easy to use lightning network. When we first started this, we went around talking to a bunch of crypto native companies, bitcoin native companies, and seeing why there wasn't wider adoption of lightning yet. And many of those said that it's just too difficult to use lightning network. There are a lot of paradigms that are different between using just a standard l one or even any other l two, because you have to figure out how to get inbound liquidity.
00:46:34.784 - 00:47:19.156, Speaker C: Because like we talked about, the beads on the abacus, if all the beads are on your side of the abacus, then no one can send you money because there's no beads to push to you. So you need to somehow establish beads on the other side of the wire so that funds can be pushed to you. Now, you could pay someone to open up inbound liquidity to you, or you could try to figure out ways to actually get inbound liquidity by doing swaps and things like that. But what we do at Lightspark is try to abstract all that away, make it so you never have to worry about inbound liquidity. You don't have to worry about how to route things over the network because we have a picture of the entire graph. We can help you route things and kind of know where balances are at any point in time so that we can have a high success rates and low latency. We can figure out.
00:47:19.156 - 00:47:27.868, Speaker C: I guess a good analogy is kind of, it's the Google Maps in a lot of ways, for the lightning network, we know where there are roadblocks.
00:47:27.964 - 00:47:39.600, Speaker A: Or is it the swift of like, if Swift is used in financial, like banking to find a route through all these banks is Lights park.
00:47:40.020 - 00:47:47.224, Speaker C: You can think of it kind of like Swift in some ways as well. Ideally a much better version of Swift. I think Swift kind of doesn't work.
00:47:47.312 - 00:47:51.264, Speaker A: Mastercard or Visa or. I'm not sure exactly who exactly does the wording.
00:47:51.432 - 00:48:18.972, Speaker C: Yeah, I mean, Swift doesn't work like, after business hours or on weekends. And what we're trying to do at Lightspark is make it so that you can send money 24 7365. You don't have to wait three days for it to settle. You get your money immediately. So what we're trying to do is kind of make the stripe like interface for lightning network where you can integrate in just a few lines of code, have it up and running really quickly, and have high success rates, and don't have to worry about any of the complexity under the hood.
00:48:19.116 - 00:48:25.440, Speaker A: So it's for, like, merchants, like for people like me, not just for big banks or.
00:48:25.980 - 00:49:23.990, Speaker C: Yeah, so we don't directly target end users, so we are an infrastructure provider for other businesses. So we recently announced that Coinbase, for example, is using Lightning through our platform, and they're offering lightning to their customers through lifespark. We also just yesterday actually announced a new bank. A major neo bank in Brazil is going to be offering lightning and what we call Uma, or universal money addresses, to their customers to allow them to be able to send over the lightning network. And what we do is we initially kind of build and make lightning very simple, and then we start to tack more things onto it to make it easier for the end users to use as well. So I just mentioned, universal money addresses is a way to have a human readable address, like Dollar Kevin at Coinbase and I could send to Dollar Alex at new bank. I can send my native currency, he can receive in his native currency, and it just settles over lightning networks.
00:49:23.990 - 00:50:03.010, Speaker C: You have this open interoperable system where I could send, let's say, euros, Alex could receive pesos and it converts to lightning, just for a moment, converts to bitcoin, sends over lightning, and then the other side, he can receive pesos. I don't have to know what's going on in the middle. Alex doesn't have to know what's going on in the middle. We just know that I can send my currency to his currency and it's super low cost open interoperable system that anyone can plug into. So we continue to build things on top of lightning so that we can make it more useful for end users and bring more people to using the bitcoin ecosystem.
00:50:03.630 - 00:50:09.770, Speaker A: Cool and so it's running in production today. Like you mentioned, Coinbase and Nubank.
00:50:10.270 - 00:50:28.610, Speaker C: Yeah. So Nubank is integrating right now. Coinbase is live in production. We have entities like Zappo bank. We have brain, many others that are on our platform as well, that are offering lightning through us, and many that are offering universal money addresses through us as well.
00:50:29.590 - 00:50:30.950, Speaker A: Cool. All right.
