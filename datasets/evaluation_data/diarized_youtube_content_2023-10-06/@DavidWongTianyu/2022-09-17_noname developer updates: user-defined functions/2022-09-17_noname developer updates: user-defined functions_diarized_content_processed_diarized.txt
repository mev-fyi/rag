00:00:00.330 - 00:00:43.722, Speaker A: Okay, so I guess this is a third video using this non end project as an education or as a way to like teach how programs can get compiled into git for zero noise group systems. I have just written the function feature, which is that you can actually implement your own functions in addition to the main function. You could only write a main function before and no, I believe this works. I just run it and it says that the proof was created and the proof was verified. I have no idea if it's actually correct. I'm going to use the debug output as usual, as I've done in the previous videos, to check if it's correct. And I guess we're going to do that together.
00:00:43.722 - 00:01:33.660, Speaker A: And if I find a bug, then we'll find a bug together. So yeah, let me copy that and I'll put that on the right so we can read that in an easier way. And from the gate go we have the public input, which uses double generic gate that sets the left input, the very left input, the first input as the public input. We've already seen that in the first video, so I'm not going to go over that here. That's weird. That's weird. Okay, so this feature of showing you the line is like using like a span thing.
00:01:33.660 - 00:02:03.970, Speaker A: A span is pretty much, you can look at the book. There's a book of no name that explains that. I'm just going to show you the markdown version, but it pretty much explains what a span is. It's just a u size and a u size. And the first one tells you where you are in the source code, and the second one tells you how long it is. So how long it is is this thing here. And so I use spans all over the place to sort of like tell you when you create a gate, what exactly created the gate.
00:02:03.970 - 00:02:59.880, Speaker A: But sometimes I have some bugs and it's not necessarily the most intuitive span. So if we go back to our program here, you create four from adding one to three, which is really going to call Al and do this thing. And so probably that's the first constraint it's creating. It's this thing, which is kind of weird because showing constraint three first before doing this thing. In any case, it would have been nice if it would have shown both, like both this line, the ad, because this is the one triggering the ad function and this line as well, because maybe you're calling the ad function several times and you want to know for sure that is this one call of the add function. I guess this is what you call a backtrace. And it would be kind of annoying to see the backtrace here.
00:02:59.880 - 00:03:31.454, Speaker A: If I would do that in HTML, maybe it would be fine because you could kind of hide things and you can open it up. Maybe I should do that in Javascript, it'd be nice. But yeah, for now I only add one span. I don't have real back traces. And so this addition here, it's not clear that it comes from here, but it does anyway. Hopefully that makes sense. Okay, let's analyze what's going on here.
00:03:31.454 - 00:04:05.894, Speaker A: Add a constant with a variable. Okay. So it knows that it's a constant. It doesn't encode the value three and then wire it to that addition. It actually just used the constant coefficient of that generic git. So maybe I'll write here if you don't remember, it's like first number times left inputs, plus second number times right input plus third number times the outputs, plus fourth number times left to the right. This is if you want to do a multiplication.
00:04:05.894 - 00:04:37.846, Speaker A: And then the constant equal to zero. And so if I want to do x plus y, which is really x plus three in my case, because this is a constant, y is a constant, I can basically write that as. So here, the left input plus set to one. So it's like c zero is one, c one here is zero. So this is one times left plus zero. So I'm not going to write it. We have a minus one here.
00:04:37.846 - 00:04:50.746, Speaker A: So it's minus one times o plus no multiplication. And then c four is set to three. So this is really a value set at compile time, plus three equals zero.
00:04:50.848 - 00:04:51.306, Speaker B: Right?
00:04:51.408 - 00:05:15.200, Speaker A: And this is equivalent to l plus three equals outputs. The left inputs plus three equal the outputs, which is exactly what we wanted to do here. So this is correct. Of course, we need some wiring. Let me do what I did in the previous video. Maybe that's too much.
00:05:19.490 - 00:05:20.494, Speaker B: Maybe that's enough.
00:05:20.612 - 00:05:30.974, Speaker A: We'll see. And I'm going to put the wiring next to it, the wiring here. So I just want to make sure that the one here is wired to this addition.
00:05:31.022 - 00:05:31.234, Speaker B: Right?
00:05:31.272 - 00:05:56.724, Speaker A: So get zero. To get one, get zero position zero. The left input, get one position zero, which is here, the left input. So this is correct. This is nicer. Okay, so we go here, we have the addition four here. And then we assert that four is equal to four.
00:05:56.724 - 00:06:34.992, Speaker A: So as usual we're going to see. Oh, I guess I always make a mistake. I always think it's going to encode that value in the circuit. But actually, oh no, it does. Okay, so it encodes a constant in gate number two and then it does the assert, oh yeah, because I guess it's not super efficient. We could have just done it should have done. I think we can do an optimization here where we just add the left input to a constant minus four and just check if it's zero.
00:06:34.992 - 00:07:20.300, Speaker A: Because basically here when we're checking these free variables equals to four, when we encounter the constant, we could have not have that as a free variable, but have that as a wire to the result of that addition here. So there's really something we can do here. There's really an optimization, and I guess I could do it in front of you. I don't know if it's a waste of time to do it now. Let me check if it's easy. So field has, oh no, the built in is not surf time. So where are the built insp? There are the built in functions somewhere.
00:07:20.300 - 00:07:52.054, Speaker A: These are crypto functions. Okay, so we have the assert and assert equal. These are the signatures. This is the code base. You don't really have to know about the internals, but maybe it's interesting. And here we're using assert equal, an assert equal, basically look at the left hand side and right hand side, and it checks. Are these two constants? If these are two constants, I can just check in real time.
00:07:52.054 - 00:08:13.430, Speaker A: We don't need to enforce anything if we have one const and one cell. So like a real variable and one constant, then this is what's happening. Constraint the consent first. So it calls constant constraint on the consent, which will create that anchoring the consent thing.
00:08:13.520 - 00:08:13.774, Speaker B: Right.
00:08:13.812 - 00:09:03.660, Speaker A: I'm actually writing that here and we'll create that generic gate. So if I click here, you can see calls compiler constant, igor indirection, and it adds a gate here. And then it adds a gate here with the constant variable that we just created. But I think we can do better. We can just do this. I'm going to add it here actually, so you can see exactly how I do it. I'm going to do VAR minus constant and I'm going to put the VAR here.
00:09:03.660 - 00:09:39.810, Speaker A: And I'm not going to put the constant in the variable. This vector is just variables. This is the type of the gate, and this is the comments that you see appearing here. And then you can set the coefficients. So this is like how you tweak your gate, and this is the span for debugging. So the gate we're tweaking here, the left input is on, the right input is going to be zero. And actually I think I don't need to write, it's going to be zero.
00:09:39.810 - 00:10:18.232, Speaker A: The output is still going to be zero. The multiplication is going to be zero, and then the constant is going to be negative. The constant, where is the CST? So can I do CST neg, I'm not sure. Where is cst? Constants? What's in the constant? It's a value here. So we're going to get the value and we're going to negate that. And I'm going fast because I know you can post the deal. And no, we don't need to have these gates.
00:10:18.232 - 00:10:34.582, Speaker A: We don't need to constrain the constant first. We can just have one gate. So we're going to see if it works. Looks like it worked. And no, we only have actually three gates.
00:10:34.646 - 00:10:35.318, Speaker B: Right.
00:10:35.504 - 00:10:44.942, Speaker A: Three gates instead of four and only two wires. Two wires instead of three.
00:10:44.996 - 00:10:45.214, Speaker B: So.
00:10:45.252 - 00:10:52.034, Speaker A: Okay, that's not bad. Let me copy these. And we're going to start analyzing from.
00:10:52.152 - 00:10:52.930, Speaker B: Scratch.
00:10:56.710 - 00:11:29.040, Speaker A: And delete a bunch of stuff so that it's more readable. And. Am I doing, what am I doing? Wrong direction. Okay, that's fine. So let's look at the git and let's look at the wiring here. And let's put back these functions file. Okay, so we're back here.
00:11:29.040 - 00:11:43.654, Speaker A: Sorry. The public input is still the same thing, right. We're not changing anything where this is broken so we know we're not encoding. Oh, sorry. The addition is still the same.
00:11:43.692 - 00:11:43.894, Speaker B: Right.
00:11:43.932 - 00:12:03.578, Speaker A: The constant is passed here. One plus three still the same. Nothing has changed. And the wiring is still wiring one to this place in the addition hasn't changed. And now we assert that the result of that addition, four, is equal to four.
00:12:03.664 - 00:12:04.250, Speaker B: Right.
00:12:04.400 - 00:12:23.300, Speaker A: And now we only have one way to do that. Beautiful. It's actually checking that the constant here is minus four. So here minus four equals zero. That's what it's checking. And we just need to make sure that four is actually wired. So four is the result of get one is wired to the left input of get two.
00:12:23.300 - 00:12:38.126, Speaker A: Left input of get two is where to the outputs of get one. And that's it. That's it. So we have a bug.
00:12:38.158 - 00:12:38.690, Speaker B: Right.
00:12:38.840 - 00:13:02.426, Speaker A: Eight is not calling double. Interesting. So, so I guess I'm going to have to figure that out. Did I? No, that's it now. So I guess there's a real bug here and I'm wondering why it will be a bug. Just check. Yeah, okay, interesting.
00:13:02.426 - 00:13:09.030, Speaker A: So I'm going to pause the video now and investigate why I have a bug.
