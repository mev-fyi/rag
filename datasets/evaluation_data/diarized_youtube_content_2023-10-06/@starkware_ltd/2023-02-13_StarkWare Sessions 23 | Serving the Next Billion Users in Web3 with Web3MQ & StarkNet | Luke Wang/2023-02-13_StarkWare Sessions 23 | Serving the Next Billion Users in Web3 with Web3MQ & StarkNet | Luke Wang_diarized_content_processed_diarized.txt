00:00:01.020 - 00:00:44.828, Speaker A: You. So yeah, just a real quick brief intro because this is going to be a 25 minutes session. So I did cut off the live coding session. So if you guys really want to try it out, do find me or find us on our official Twitter or my Twitter or telegram or whatever, feel free to. And yeah, I'm just going to use 25 minutes to really quickly introduce what we're going to be, what we're doing here, both for web three and around the Starknet ecosystem. And I guess just a real quick survey, who has used in before non web three development something called either Rabbit MQ or active MQ or any pub sub message queue software. Okay, so a good amount of people.
00:00:44.828 - 00:01:34.620, Speaker A: Okay, then you can probably guess why we named our software layer Westrimq then. Yeah, the technical core is actually a message oriented middleware layer. Now, the reason and the problem space, just doing a really quick intro. Why we wanted to build this was that when we started this project about six, eight months ago, we wanted to serve the next cycle. We were kind of betting at that time that this bull run was probably over. The age of DFI was probably going to be over, and if crypto and web three was going to have a next cycle, it was probably going to be about serving more and more users that were more normal, less DFI savvy. But the thing is, when you do want to serve average users, user interaction becomes very, very important.
00:01:34.620 - 00:02:17.700, Speaker A: And the thing about current web three is that everything interacts with the public chain, which is great. It's very consistent and very decentralized consensus, but you can't really interact between systems other than that, like public chains and public chains can't interact natively. Right. And also wallets, and wallets can't interact, and wallets and dapps can't really interact. And that creates some very specific problems too, in web three that are very painful. Right. So just as an example, the lack of wallet to Dap interaction means that if you have a mobile wallet and a browser dap, there's no way to actually route signature requests and signatures in a very native and trustless manner.
00:02:17.700 - 00:02:50.080, Speaker A: You can use a server to do that, like via AWS, but then it breaks the whole trustless continuity of web three infra. So that kind of also takes away the meaning of using web three infra. If you're not going trustless, then why don't you just do web two? Right. It's more mature and it's more well known. And then of course, for other applications like gaming, just signing again and again and again. It's a horrible experience right now. And the reason is because you all have to go through the public chain, and there's no way to really have talks between the wallet and the DAp.
00:02:50.080 - 00:03:14.264, Speaker A: And also not having wallet to wallet interaction means that there's no way to really do things like native talk, native social. And then, of course, I'm pretty sure people have came across the first scenario where there's an ENS domain that you really, really like. Actually, we don't own Web three MQ right now. I don't know who got it, but we really want to buy it. But it's actually not possible right now. Right. It's frustrating.
00:03:14.264 - 00:04:14.610, Speaker A: And you kind of feel, hey, it's literally an address, why can't I ping it? Right? So essentially, Web three MQ, what it does is it connects all of these different web three entities and stakeholders through messaging, trustless messaging as a bridge. And the way we achieve this is you can think of Web three MQ essentially as this very big published subscribe message oriented middleware. Of course, we can also do point to point messaging, but a huge message oriented middleware that's federated and that's what makes it trustless. In Web three, we always talk about decentralization, but I kind of also believe that when designing for decentralization, there needs to be a good goal. And so in terms of decentralization, our goal is to have trustless messaging so that if you guys are ever using web three MQ, you guys don't have to trust us. You guys don't have to trust me. Even if I don't like you, someday I can't really boot you off the network or do things to you.
00:04:14.610 - 00:04:55.804, Speaker A: And how we do that is we make it federated, just like ethereum nodes. Like anybody can join, we don't call them miners, but anybody can join as a relayer. And those relayers are essentially self sovereign as long as they follow the protocol. And this is what makes it a trustless ecosystem. And since this is a starknet event, so people might be wondering, okay, it seems very independent, right? It's an independent node network outside of any public chain. What's our relationship with Starknet? We are very likely to be a Starknet l three. It's not 100% yet, but this is a great community.
00:04:55.804 - 00:05:48.028, Speaker A: And I would say 80% to 90% probably just going to be on Starknet yet. And the reasons are that one actually is the community, and then I'll talk about it later. But abstract accounts are actually very important to us. And so aside from that real quick intro about kind of the space and how we're kind of positioned in this space. So there's about three families claiming to do web three communications today as infrastructure. The first family you do have a lot of services are claiming that they want to do decentralized web three communication, but they're essentially just AWS Ec, two instances slapped on with some kind of a web three address or domain name compatibility. And this I personally feel, well, it might just be better to use Sendberg because there's really no trustlessness there.
00:05:48.028 - 00:06:51.180, Speaker A: The second, which is the only alternative family outside of web three, MQ, if you actually want something trustless, is the Waku family. So Waku has been around for a long time, and it's built by some very good ethereum builders. I think right now the status Im team takes care of it. But Waku has a very big problem around scalability. So whenever you build federated networks like these, it becomes very important how you route messages across the network, because if you want it to be decentralized and trustless, well, generally you're not going to have a centralized registry, right? And so the way Waku propagates is they use something called gossip sub, which is essentially gossiping the messages amongst all of the nodes. And what that results in is, and this is their numbers, by the way. So around 100K Daus, I think they mentioned that each of their nodes would use around 500 megabytes of bandwidth, which is pretty big, right? And 100k isn't.
00:06:51.180 - 00:07:56.452, Speaker A: If you talk about web two scale, then what's going to happen if you reach a million users, 10 million to 100 million users? So with web three MQ, what we really kind of redid was built it around the thesis that scalability and performance was really important if we were going to serve users, because we're aiming for user interaction. So mainly this infrastructure layer is to serve new users of web three. And so we thought scale and performance was one of the really important things. And so right now we're about, with raw Waku, we're about two to five times better in terms of throughput and latency, and more importantly about 30 times better in terms of scalability. That's kind of the gist. Since this is a starkware event, I also wanted to real quickly introduce some of the key design spaces and really important things here. So any messaging system in web three, you'll find if it wants to be trustless, generally has two key pairs.
00:07:56.452 - 00:08:48.100, Speaker A: So the first is of course the original wallet key pair. That is sadly still, in most worlds, the account, right? And then on top of that, you actually have another key pair, which is the encryption key pair. Because if you're doing this with a trustless system of nodes, then you're routing your messages through nodes that you can't really trust, or you can probably assume that there will be bad actors anyways. And so you really want to encrypt all of your messages and there's going to be a key pair for that. But we all know that one key pair has created numerous pains for the community up until Starknet's been building native abstract accounts. And so having two key pairs adds an extra layer of challenge to it. And yeah, we've been designing our account system actually twice, even though we're only about five, six months old.
00:08:48.100 - 00:09:34.400, Speaker A: And this is something we really care about. So we do want people to be able to not have to remember things like seed phrases and then also be able to, because wallets, it's already frustrating enough that you can't really sync them across multiple clients that easily, but chat, it's probably more important. And then also we do want your account to be recoverable if anything happens. So the solution was to design this abstract account with. We do have numerous layers of keys, actually three layers aside, of the abstract account and wallet keys. There's an encryption key, which I was talking about. And then also we did an access key, or in some communities people like to call it a session key, which means that you don't have to sign again and again within the same session.
00:09:34.400 - 00:10:55.360, Speaker A: Because the way messaging generally works is you connect to the client via websocket or some kind of other persistent connection other than just a normal HTP get or other restful call. And the thing about having an abstract account is that, well, all of these things can be recovered if exposed either through social recovery or through some other intermediate credential authority that you believe that you can kind of recover for you. You can set it to Google if you want, but if you don't trust Google, you can set it to be your friends. And then the app strategic account also means that at the application level we can also support multiple chains very natively, even though at some of our core we do use a lot of Starknet's technology. But you can send messages between Solana wallets and BNB wallets, or BNB and Ethereum are both the same, but also like say move wallets, which are pretty hot nowadays. And of course Cairo wallets kind of. Lastly, I just wanted to really briefly give a few examples of what applications people can actually build with this trustless messaging as a fundamental component.
00:10:55.360 - 00:12:10.010, Speaker A: So one example would be what I mentioned earlier, which is right now there's no bridge between the DAP and wallet in web three, and it's actually still pretty important. So generally how people build this is you have a relay network in between, and then you relay the signature request from the wallet to our client SDK, and our network will handle how you send the message to the target. And then of course the wallet can then reply with the signature. And this is actually how wallet connect works today if people know. But wallet connect, the thing is, up until what they're already running, as far as I know, is still pretty centralized. And the thing about this bridge is it's a pretty important bridge, so people can monetize this bridge pretty aggressively if they actually take hold of it, kind of like the iOS App Store, because every form of attention or information from the DAP and wallet will have to flow through this DAP wallet bridge. So if you build with web three MQ, the difference is that this will be trustless, so you don't have to trust us or any other single node relayer within the system.
00:12:10.010 - 00:13:00.970, Speaker A: And then of course, what we're really excited about long term, and I can kind of also share some examples of what we're working with, the community is around more user use cases like social. Now, of course, dms are simple, right? You can kind of try to convince people to sell you their ens or stocknet ids through web three MQ. But also the thing about web three today is that it's also very deeply about communities. And the thing is, a lot of messaging protocols out there today don't support group chat. We support this natively because we are a native pub sub queue. And basically what you do is everybody subscribes to the same topic and that topic will be the room. And so yeah, you can build a group chat very natively through.
00:13:00.970 - 00:14:07.710, Speaker A: Yeah, and then also, I don't know if people realize or not, but Twitter is actually this huge, very pure pub sub service. If you actually think about, you know, people publish tweets and then everybody subscribes to that person if you're following them. And so yeah, we do also have some things we're exploring with the community here, which is we're trying to work with a few games. There's like say Clash of Clan style games where you battle other people and then your friends can receive notifications around, hey, you've won a victory. Or if somebody came to battle you and your friends want to revenge your defeat. It's also possible. So yeah, we think that having this as an open infrastructure and interoperable between both games and wallets will mean that your friend doesn't have to be on the game to receive notifications that hey, my good buddy has just been invaded by some other guy and I want to really avenge him.
00:14:07.710 - 00:15:07.584, Speaker A: Really having these social follows and social subscriptions across platforms in a very native and trustless manner using web three MQ, that's also possible. Yeah, it's only 25 minutes, so I'm going to cut off the section where I actually tell everyone how to live code, but just real quickly introducing if anybody's thinking about okay, so it sounds great, but how do I integrate all this? It's basically somewhat of an ethereum l three network. And the way it works is since it's a messaging network, you'll have to connect via websocket rather than just normal RPC. But the good part is that we can basically route everything through one websocket, whether it's signature requests or like push notifications or like dms and group messages. And then all you have to do is to write event handlers. And generally we have an SDK that handles most of the events. So unless you're doing custom events, the sdks will handle that.
00:15:07.584 - 00:16:06.016, Speaker A: And so it should be easy enough to integrate for your social applications or game applications, or just a simple wallet you're building. Yeah, and quickly, I guess, introducing kind of our roadmap, I would say, which is that for the first few months, from Q three to Q four, 2022, what we were building was really just the transport layer, the pubs up transport layer. We wanted to make sure that it was stable and high performance, like our story. If I was shilling something, I'd better live up to it. And one important thing this quarter is that we're probably going to start an incentivized testnet around either late February or early March. This will be incentivized. So if people run the nodes as relayers or quote unquote miners, then you will receive incentives for that.
00:16:06.016 - 00:17:06.064, Speaker A: And then there's also going to be a developer incentive program for people who want to develop with this. So that's kind of the very important milestone for this quarter, and we'll probably release everything open source. We're aiming to do that around this end of Q one, but maybe it will have to be pushed through end of Q two, but definitely within this year, everything's going to be totally open source. And, yeah, as to what the generation two means is that we think we can push this even further to be even more crypto native. Like, right now, it's very user centric, but also in terms of asset interactions, you guys will probably notice it's rather lacking. And so in terms of web three, MQ beta generation two, we'll be making sure that for those who want even more crypto native use cases for their users, we can support that at scale and at high speed and frequency, too. So, yeah, that's the general spiel.
00:17:06.064 - 00:17:45.408, Speaker A: And I guess I do have a little bit of time. So I'll introduce kind of the initial motivation for why building this, just using real quickly, two, three minutes. Actually, before this, I was building Web two social, mostly since 2017. And at that era, you realized that because of the way Web three infrastructure works. Sorry, web two infrastructure works, it was actually very hard to build large scale user experiences from zero anymore. And Clubhouse was a good example. Clubhouse was one of the few social efforts that was actually unique.
00:17:45.408 - 00:18:45.972, Speaker A: You have all these instagram mutations of different filters every year, and they kind of get popular for a week or two. But clubhouse itself, at least the audio room concept, is very unique. I myself made a lot of very good friends through clubhouse. But the thing is, they didn't do DMs back then, nor did they do the standard asynchronous information feed for you to follow friends when you're not actively on the app or when your friend is not actively on the app. And so what happened is they routed these things to Twitter and Instagram, and eventually, well, users would just become better friends with these people on Twitter and know when Twitter opened Twitter spaces. And naturally, right, for clubhouse, it was a very bad thing. But, yeah, imagine if all of these things were public goods, because DMs aren't that different, right? Facebook, DMs, WhatsApp, DMs, Instagram, DMs, WeChat, DMS, Cacao Talk, they're not that different.
00:18:45.972 - 00:19:42.632, Speaker A: They don't offer that much differentiated application layer value, but they do offer very important and foundational infrastructure value. It's like writing your name on a test. Writing your name on a test doesn't mean that you're going to have 100 points, but if you don't write your name on your test, you're guaranteed to get zero. So, yeah, these really key important parts of social infrastructure were lacking from the public as compared to content sharing, which was available from the very first www. We thought it was going to be super meaningful if we could build something that was a public good in the public domain and trustless so that people can build these composable, extensible and also continuous innovations for users throughout the ages. That's the end of the brief talk. And, yeah, I guess we have some, I guess, five minutes for questions, if anybody.
00:19:42.632 - 00:20:03.650, Speaker A: Yes, go ahead, ask about the bridge. Is it centralized bridge or do you have any? No, it's not centralized. So you would connect to one relayer, but it could be any random relayer and who you're sending to, whether it's a wallet or a user or a machine that can be on any other node or relayer. Yeah.
00:20:05.380 - 00:20:09.936, Speaker B: How big is your team, and do you plan to monetize the project?
00:20:10.118 - 00:20:49.368, Speaker A: Yeah, so we're about 1015 people at this point full time. And then the way we plan to make it a sustainable operation is through a crypto economic system. So there will be a gas fee for the message routing, although we don't plan to have end users just pay it, not like sms, but more as developers. Right. Yeah, that's a great question. So we're probably going to release that when we release everything. And here's why.
00:20:49.368 - 00:21:23.830, Speaker A: Because we're talking about trustless and whatnot, because a lot of protocols today are just building on top of other protocols, like the Waku family I mentioned. You guys probably didn't realize those two companies were building on top of Waku. One of those protocols is actually just a very thin wrapper around Waku, and they're claiming that it's their own messaging network. So we're not releasing that yet. But definitely the plan is end of Q one if we get everything goes well. But, yeah, definitely within Q two. Q three this year.
00:21:23.830 - 00:21:29.720, Speaker A: You first in the year? Yeah.
00:21:30.330 - 00:21:44.946, Speaker B: So many attempts doing federal loans. What makes you any different? Why do you think that you're going to give a better solution?
00:21:45.138 - 00:22:05.002, Speaker A: That's a great question. I mean, people have tried to build, like, interoperable messaging since before web three. Right. And I think at that age, the first problem was money. If you want something high quality, then you do want to support first the people that run the nodes, and then you do also have to support the maintenance and upgrade. Like XMPP is pretty good. Right.
00:22:05.002 - 00:22:48.346, Speaker A: But the thing is, it hasn't been upgraded for, I don't know, 1015 years just because there's zero money going into. Well, maybe not zero, but some donations going into XMPP. And so kind of why we thought now is a good time was one. Web three allows you to design these more sustainable crypto economic systems. And so that's why we're doing the incentivized testnet. So we're going to be testing our version one of the economy and two, within web three, I guess one, we're very serious about building this. We're not just raising a bunch of money to make some piece of money because personally I was very deep within this particular pain point.
00:22:48.346 - 00:23:14.980, Speaker A: And then two, I guess it's also about being very serious about technical execution. And what I think the starknet community is really good at is just people are so passionate about technology that changes social paradigms that you really can build good product market fit within this community. So those are the things that I feel give me confidence this time around. Yeah.
00:23:21.110 - 00:23:35.062, Speaker B: Because count obstruction is all about abstracting the signing mechanism from the actual account. So you have to consult the chain to validate so you can't tell anything about it.
00:23:35.196 - 00:24:28.678, Speaker A: Yeah, so the thing is, there is going to be a crypto economic system and we don't plan to host ledgers ourselves because we kind of figured that there's tons of people doing public chains and l two s and whatever. So we're not going to build the ledger system. And so you do have to interact with actual ledger chains to have that. Your sum of how much we owe you and how much you owe other people. But also starknet systems are also changing. We do have another layer actually on top which is within our node system that also handles accounts at our level. But we do make sure that any upgrades are mostly parallel to starknet system so that it's easier to use like people are used to the design.
00:24:28.678 - 00:24:29.400, Speaker A: Yeah.
00:24:36.190 - 00:24:38.506, Speaker B: If there's communication between account a and.
00:24:38.528 - 00:25:18.490, Speaker A: Account b, how can you know? Oh yeah. So that's a great question. So this is why we have, this is why we have an access key. This is a key that has to be generated from your very fundamental keys, like the wallet keys. But why we made it another layer is that just like in web two, these keys sometimes get exposed. Right now in JWT, most of the time people have a refresh token and an access token. And then generally the access token refreshes after 30 minutes or so.
00:25:18.490 - 00:26:23.366, Speaker A: We're not doing it like that. So access token does make sure that the network validates access to the account. I don't know if that answers your question, but yeah, how about we go with a young lady there? And for how do you suggest they prepare timeline to jump on it? Did you mean the web two space or web three space? Gotcha. Gotcha. That's a great question. There's been conversations of, like, say, discord would ever be possible for them to move to web three, but I think there's also legal problems there, so that might be an issue. Web three, of course, you're building from zero, so it's easier.
00:26:23.366 - 00:26:44.100, Speaker A: Web two, I guess it's going to be case by case if they're permitted by the legal jurisdiction of their region to actually do something like this. Yeah. Okay. Yeah. The time's over, so if you guys have any other questions, feel free to find me and I'll answer them one by one. Thank you.
