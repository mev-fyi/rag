00:00:04.680 - 00:00:43.032, Speaker A: Hi everyone. So my name is Sean. I'll be speaking about Starknet JSA, a library I started on Starknet. I'm also the co founder of Aspect and NFT Marketplace on Starknet and also Starkscan, the block Explorer on Starknet as well. So yeah, there are a lot of new up upgrades in Starknet in general, and I've updated the Starknet JS workshop to sort of reflect that. And I think something important to note is there's a regenesis event coming up. So a lot of developers would have to rewrite their contracts in Cairo 1.0.
00:00:43.032 - 00:01:33.656, Speaker A: And also if you're a user, you would have to upgrade your account to safeguard your funds. So a little bit brief backstory about myself and how I got involved. So I was working@blockchain.com and I was sort of exploring Ethereum for our bitcoin wallet. And then I was looking at different layer two solutions, right? Like side chains, like Polygon, optimistic roll ups and Zk roll ups. And I found that Starknet was only the real, only zk roll up solution that an individual developer could really test out and use in production. And I thought that was really powerful because other solutions were more closely working with bigger companies.
00:01:33.656 - 00:02:45.480, Speaker A: And as an individual developer you could already play around and try it out, even though the technology itself was still sort of emerging. And then I wanted to see what kind of web application I can build on this extremely well, theoretically extremely scalable blockchain. Because scalability has been an issue in blockchain since the inception of bitcoin. People have been talking about how do we go beyond the blockchain trilemma that has sort of plagued the industry. And when I was on Starknet, there was no way for my web app to even talk to the network at that time. So that's why I started Starknet JS and now it's a team collaboration with the folks at Argent and also shardlabs. So to give a sort of overview of what is itself of it allows javascript programs to talk to the Startnet network, right? So if your web app is written in javascript or you have a mobile app with react native, you could use Starknet JS to interface with the Starknet network.
00:02:45.480 - 00:03:46.116, Speaker A: And the architecture sort of follows ethers js. I remember seeing web3 js back in the day, but I think etherjs sort of abstracted the architecture to interface with the network really well. And we took a lot of inspiration from that architecture. And the three primary APIs are provider, account Signer, and the contract. So just to give an overview of the streaknet JS API already mentioned previously, those are the four primary ways that strikenet JS is architected. Yeah, sorry. Just to give more in depth of what each of these sections mean, when you use the provider, you're essentially calling the endpoints of the sequencer.
00:03:46.116 - 00:04:36.040, Speaker A: So you can do things like sort of get the transactions or get the data from the sequencer and sort of that's what the provider allows you to do. And then when you have an account, it allows you to interface with the smart contracts in Starknet. And then that's sort of the way you would call different dapps on Starknet. And then with Signer, it's mainly for wallets. Like if you want a hardware wallet, you might want to implement your own custom signer, or if you want to authenticate your wallet in different ways. For example, if you want a wallet on the web or multi signature wallet, you would implement your own signer. And then contract is, if you want to interface the contract directly, you can use the contract interface.
00:04:36.040 - 00:05:40.536, Speaker A: So a big part of what changed since the last sort of over the couple months in starknet was like the introduction to fees. And also now when you deploy a contract, you have its own kind of transaction. And now that when you deploy a new account or a new wallet, you need to pay fees. So basically you need to be able to fund an account that has not yet been created so that you're paying a fee to create a wallet, essentially, yeah. So the way you would do that is you would calculate an account address before it actually goes live, and then you would send some funds to it even though it's not really available yet, and then you can deploy it. So that lets you sort of automate that process and you can create your own accounts and then interact with the blockchain just through code. You don't have to go through an account wallet extension UI.
00:05:40.536 - 00:06:25.794, Speaker A: You can do everything programmatically to interact with Starknet however you want. I would prefer to go through some code examples, but I'm not sure if we're able to today. So if we're not, I think that's all I have for you for this workshop. Thanks. Let's see if we can pull up some code examples. Yeah, so that's because of account abstraction. Just to give an overview of what account abstraction is.
00:06:25.794 - 00:07:18.210, Speaker A: Basically wallets on Starknet are programmable and they made it natively implemented in the protocol so that anytime you interact with a contract, you need to go through a account contract. So essentially everything goes through a wallet contract before going through the final contract. So that's something, I guess, really interesting about Starknet, how wallets are programmable and everything goes through a wallet before going through the final contract. And if you're in Ethereum you probably just have metamask and then you talk to the contract directly. But then in Starknet you're always going through a account contract before you go through the final contract. So that makes accounts and wallets a lot more rich than you would previously, because now wallets are programmable, so you can do many more. You have many more possibilities with accounts and wallets.
00:07:18.210 - 00:08:11.390, Speaker A: Yeah. Do we have any other questions in the meantime? I think it's different because when Starknet was implementing how they wanted to approach accounts, they implemented within the protocol. I think with Ethereum it's more of a migration. I'm not too clear how it works, but it's not natively implemented. So I think in starknet everything has to go through an account contract. So that's sort of just how it works. So they have native support for account contracts.
00:08:11.390 - 00:09:22.700, Speaker A: Account abstraction, sorry, yes, you can have account abstraction on Ethereum, but I think it is not natively supported. If you're looking at a block explorer, for example, they won't show account abstraction things on the Explorer because they assume that everything just hits the end contract, like the wallet just interacts with the end contract. But on Starknet, if you are an explorer, you actually look at the account contract and then you look at the end contract. Because everything. I wish I could, but it doesn't seem like we can here. But I can show it to you later if you're interested. Is there any other questions? I can speak those or any questions about Starknet in general.
00:09:22.700 - 00:10:43.980, Speaker A: So I think I can't really speak about the Ethereum SDK. I would only say that we follow the architecture because we think it's abstracted really nicely, such that developers have, they have a lot of flexibility, but at the same time they have the proper abstractions to do what they want. So I think one of the APIs we have called contract, I think that's actually going to be deprecated. So you would have to go everything through an account. So you would have to use the account API to call any contract, because you can no longer call contracts directly, essentially, I think you can, but I think they're migrating towards where everything goes through an account contract. And I think that's sort of the really unique selling point is the native support for account abstraction, which means everything goes to an account contract before hitting the actual contract user intends to interact with. Yeah.
00:10:43.980 - 00:10:48.860, Speaker A: If there's no other questions. Thank you very much. Appreciate your time. Thanks.
