00:00:00.330 - 00:00:11.920, Speaker A: Live on YouTube. And we're live. Nice. So hey, everyone, and welcome to a new live workshops. I'm here with David today. Hey, David. Hey there.
00:00:11.920 - 00:01:08.338, Speaker A: So today we're having an impromptu workshop that we didn't release really, and we're having a live workshop to try the new Cairo Lang package, the new CLI that was just released that allows you to deploy Cairo one contract. So for those of you joining us, essentially two weeks ago, Startnet was updated, Testnet was updated so that you could deploy your first Chiro one smart contracts. This update is now live and you can deploy this contract. But the CLI was a bit hard to use. There was a new release today which makes it easier to deploy your contract. So we're going to walk you through the installation as well as actually using it. So we're going to discover it together.
00:01:08.338 - 00:01:46.080, Speaker A: We haven't done this yet, so this is going to be fun. I just realized that it's live workshop number 13, so I hope it goes well. I'm not superstitious, but anyway, you can never be too safe. So let's try, let's start. So I'm going to share my screen. I'm going to check, I'm going to post the link first on Twitter so that people can follow on YouTube if they want to. Up and let's go.
00:01:46.080 - 00:02:21.180, Speaker A: All right, so I'm going to share my screen. I'm going to share this thing here and. Nice. You should see my screen now. All good. So have a rotating background on my laptop. So in about 33 minutes, 23 minutes, I'm either going to be not noticed or be very embarrassed, but it's going to be fine.
00:02:21.180 - 00:02:57.586, Speaker A: So I'm going to use the instructions from start netbook that we're about to push on the repo. So these instructions, you can't see them yet, but we're about to push them. They will tell you how to install the Cairo Cli to your machine. So we're going to go through with three steps. The first one will be installing all the prerequisites to get all of this working. The second will be to install the Cairo Cli. So the python package that allows you to interact withnet.
00:02:57.586 - 00:03:12.954, Speaker A: And the third step will be to install the Cairo rust package that is essentially the Cairo one compiler that allows you to write and deploy, not deploy, to write and compile Cairo one contract. The font size.
00:03:12.992 - 00:03:13.914, Speaker B: Henry, please.
00:03:13.952 - 00:03:14.940, Speaker A: Yeah, for sure.
00:03:18.030 - 00:03:19.420, Speaker B: Maybe a little bit more.
00:03:21.330 - 00:03:21.838, Speaker A: Yeah.
00:03:21.924 - 00:03:23.280, Speaker B: Good, thank you.
00:03:24.610 - 00:03:44.830, Speaker A: Okay, so let's go with the prerequisites. So first you need Python 3.9 as well as Rust installed. For these installation, you need to click on those links. Essentially install Python 3.9 if you don't already have it, or install rust if you don't already have it. Rust is a very nice installation.
00:03:44.830 - 00:04:13.058, Speaker A: It takes a bit of time, but once it's done, everything is set up. So I have already this on my machine. So I'm not going to reinstall all of this, but I'm going to assume that you will. And probably if you've used Cairo in the past, you already have this set up. By the way, I want to mention that you can ask your questions on YouTube if you have some, or on Twitter. So Gatboot is saying I'm tuned in, tuned in. Sean is saying hey gatboot.
00:04:13.058 - 00:04:46.806, Speaker A: Hi Henry and David. I'm the only one watching on YouTube. No, there's two people. Well, happy to see, you know, maybe some people will watch the recording afterwards. All right, so let's move on with the Cairo line installation. So first of all, the first thing we're going to do is setting up a virtual environment. Virtual environment is a way for you to create a sort of sandbox on your laptop where you're going to install a bunch of python packages that won't interfere with other projects you may have later on.
00:04:46.806 - 00:05:24.530, Speaker A: So they are great for installing packages that are specific to your project, but you don't want them to affect other Python projects. So first you will create the virtual environment, then you will activate it. So activating it means that you're now in the venture tool environment and that everything you do in your virtual environment will happen in that context. Right. So here you can see this small thing says that I'm in the proper virtual environment. Sometimes this doesn't work well. So if it doesn't, try this part here.
00:05:24.530 - 00:05:53.082, Speaker A: We have added all the comments and you should be able to see them once your vm is activated. You should see this guy Booth is saying, is there a virtual environment for rust? No, I don't think so. Step two will be to install the dependencies. So we're in step two of installing Cairo Lang. So in order for Cairo Lang to work, you need a library called GMP. There's various ways to install it. If you're on Ubuntu, you can use it with apt.
00:05:53.082 - 00:06:17.634, Speaker A: If you're on Mac, you can use brew on my side. This is what worked best. That's what worked. Then you need to install a few python dependencies. So ECDSA fast, ECDSA and Sempi, you can copy paste that command and run it. And again, on my laptop this is already installed. So if I try to run this it would tell me well, this is already installed.
00:06:17.634 - 00:06:51.546, Speaker A: Maybe not actually, let's try. No it wasn't. So the pip installation runs in the vm. Installing GMP is something that is global on your machine. All right, and now I'm going to install Cairo Lang, the ClI. So if you're watching this video, there's a good chance that you've already interacted with Darknet and you already have a Cairo Lang package installed. If this is the case, I suggest you uninstall it before reinstalling.
00:06:51.546 - 00:07:37.950, Speaker A: That will make everything simpler. So just in case, run that command. I don't have Cairolang installed, so this won't work. See, it's not installed, no problem. But if it asks you for confirmation, confirm that you want to uninstall it and then you will run this command to actually install pyrolang. It's installing, everything looks like it's working correctly so far. All right, so let's see, does this work? How do I try this? All right, Starknet version version tells me that I have Starknet version zero point 11.0.2
00:07:37.950 - 00:08:40.222, Speaker A: installed, which is the right version I'm looking for. All right, sweet. I am done with this, so that's great. So here I have completed the first step, which is installing the Cairo Lang Cli. So now I have the CLi that allows me to interact with Starknet so I can send transactions, I can do a bunch of stuff with Starknet. So now I'm going to install the Cairo one compiler which is called Cairo, and I'm going to make sure that I'm able to compile the smart contract. So in order to complete this installation you're going to have to clone the Cairo one repo on your machine, compile the actual rust binary, and then make sure that from your ClI, from your terminal you're able to run this executable in order to use it in your workflow.
00:08:40.222 - 00:09:15.230, Speaker A: So we're going to go through this step by do. So this command will bring you to your home directory. So I'm going to go there and here on my machine. I think I already have Cairo. Wait, I don't think I have Cairo installed already, so I'm going to install it. So I'm going to clone Cairo the repo right now I have Cairo cloned into my own directory. But the thing is, I don't want this repo to be in the middle of my document folder and everything.
00:09:15.230 - 00:09:55.914, Speaker A: See, if I take a look here in all my folders there's a bunch of stuff and I don't want everything there to be here. So I'm going to move this to a hidden repo. So I'm going to move Cairo to Cairo. This won't be listed by default and it will look a bit nicer in my machine. Now I'm going to go into the repo and build the proper file. I'm going to go CD Cairo, now I'm going. So when you're building on Starknet you may notice that there is Starknet, there's the CLI and there's Cairo one.
00:09:55.914 - 00:10:32.966, Speaker A: Cairo one is independent of Starknet. You can write Cairo one code that doesn't run on Starknet. And Starknet has a fixed compiler version, meaning that when you deploy a smart contract it needs to use a specific version of the compiler. So that's what I'm going to do here. I'm going to check out the repo at the height that starknet expects. So these references, we're going to list them in documentation and you'll always be able to know which version of the compiler you should check out. In that case here I'm going to check out with the tag version 1.0
00:10:32.966 - 00:10:41.510, Speaker A: point alpha six, which is the one that is deployed on Starknet.
00:10:42.890 - 00:10:45.494, Speaker B: Can you cross a little bit more the font of the terminal?
00:10:45.542 - 00:10:47.290, Speaker A: Of course. Is it better?
00:10:47.440 - 00:10:48.140, Speaker B: Yeah.
00:10:48.590 - 00:11:49.470, Speaker A: So here it's telling me, oh, you're not anymore at the ED of the repo. And yeah, because Cairo one keeps on evolving, but I've moved back in time on the repo to be on the version that stucknet actually uses. In the future when there are updates to Stucknet, the compiler version will evolve. So you'll have to do this operation again and build again from that place. So now the repo is at the proper place, I'm going to build the binary. All right, so I'm not a rust expert, so I hope nobody will be mad at me for saying stupid stuff here. But basically what this does is it takes the code and it will build it in an executable that is made to be run locally on your machine and that runs nicely on your machine.
00:11:49.470 - 00:12:20.726, Speaker A: And all these binaries, they will be placed in a special folder in the repo you have cloned. So we're going to take a look at this folder and then we're going to try to see if they work. I see that we have Gan who is joining the stream. Jan, welcome. You're on the stream now you're live. Hello. And Jan is actually the person who wrote most of this documentation here.
00:12:20.726 - 00:13:14.082, Speaker A: She's the one who wrote this guide to make you have a safe and easy install. And we're going to push this later today so that you can access it too also. All right, so see it's building, it's taking a little bit of time, but it looks like it's working correctly. We're at four oh three over 411 packages and see things were happened correctly. There is a warning but everything is green so it looks correct. So now if I open the Cairo folder, you can see that in target release builds. No wait, it's in target release.
00:13:14.082 - 00:13:43.362, Speaker A: There's all these executable that were built. This is what we're after, this is what we're looking for. Cairo compile is the executable that will let you run stuff. So for example if I do here target release Cairo compile. See it's telling me something I'm going to tell him hey, tell me which version you're in. And this is an executable I can use. And see it's Cairo Lang compiler version 1.0.0
00:13:43.362 - 00:14:18.106, Speaker A: Alpha six. Now the issue is this shouldn't work on my laptop. It does work because I installed it somewhere else. So I'm going to delete it real quick to make my life more difficult and show you what I want to do. So I installed it here earlier. So I'm going to remove this folder now. This shouldn't work anymore, it still works, so I installed it somewhere.
00:14:18.106 - 00:14:47.998, Speaker A: That makes sense anyway. So here basically my terminal knows where to find Cairo compiler. So it might not be your case. So you need to do a few extra steps to do that. In order to do that you can do two things. Either you take this and you execute in your terminal, right? And at this point your terminal will know where to look for Cairo compile. The issue is once you close your terminal it won't know where it is anymore.
00:14:47.998 - 00:15:37.518, Speaker A: So in order to have this happen, every time you boot up a new terminal you need to edit a file that is called Bash ShRC or ZSRC. And in my case I think it's zs. So this you'll have to figure out with your laptop where it is and how it works. So in my case it should be here. See I have all these stuff installed. For example if I remove, so this is the line that allowed me to view to use Caro. I installed it in another folder.
00:15:37.518 - 00:16:45.354, Speaker A: So I'm going to remove it, see? So now if I save this, this won't work anymore. So I'm going to add this line that is proper, right? And it's more correct. Now I'm going to exit my terminal and open a new one. I'm going to make the fonts bigger. What happens if I do Cairo compile works? So it means that I've been able to build my repo correctly and I've been able to add this to my path. So so far I have completed step one, two and free. I've installed the prerequisite, I have Cairo lang installed and I have the Cairo one compiler installed.
00:16:45.354 - 00:17:20.940, Speaker A: So at this point I'm able to compile my contract and I'm going to be able to declare them. I've been here so far, but now we're entering unknown territory. So this is going to be going to be fun. I'm going to create here. I'm going to go, wait a minute. So these are the documentation, the docs. I'm going to open a new visual Studio code window for that.
00:17:20.940 - 00:17:51.650, Speaker A: I stopped sharing my screen for a while to make sure I don't show stupid stuff. Wait, no, this goes back here. This goes back here. Nice. So I'm going to share my screen again now. All right. Now the goal will be for me to deploy a new contract.
00:17:51.650 - 00:17:59.830, Speaker A: Any idea of David Gunn? What should we deploy?
00:18:01.930 - 00:18:07.426, Speaker C: I have a simple read write storage open right away if you want.
00:18:07.548 - 00:18:09.340, Speaker A: Yeah, definitely. Where is it?
00:18:11.070 - 00:18:21.020, Speaker C: Just a second. I'm going to send it your way. Sorry, you have too many tabs open.
00:18:29.170 - 00:18:38.660, Speaker A: I'm going to create a small repo here, call it live demo. Wait.
00:18:42.950 - 00:18:44.530, Speaker C: Pyro workshop.
00:18:46.090 - 00:18:49.000, Speaker A: All right, here.
00:18:53.530 - 00:18:55.080, Speaker C: Okay. Here you go.
00:18:55.450 - 00:18:57.000, Speaker A: Where did you send it?
00:18:59.210 - 00:19:01.830, Speaker C: I'm going to send it in the stream yard.
00:19:05.210 - 00:19:15.790, Speaker A: Files is very raw way of doing that. Yes, I can see it. Good. So you're using the one from our friends from finium.
00:19:16.130 - 00:19:18.234, Speaker C: Yeah, from the workshop.
00:19:18.362 - 00:19:19.520, Speaker A: This is very good.
00:19:19.970 - 00:19:26.446, Speaker C: Yeah, this is just the parallel to the simplestorage soul. Just the storage read and write example.
00:19:26.628 - 00:19:44.566, Speaker A: Exactly. Nice. So we have hellostocknet here. So what does our contract do? It has a balance. It has a function that allows you to increase the balance and a function that allows you to get the balance. Nice. So let's try to compile it.
00:19:44.566 - 00:20:05.886, Speaker A: So I created my repo. I have lost Cairo. Now I can do Cairo compile. While I'm doing this, can one of you find a Cairo zero contract? Because some people also use Cairo zero. So we are also going to try to compile and deploy something with Cairo zero.
00:20:06.068 - 00:20:10.394, Speaker C: I think you should do starknet compile because this has a contract macro.
00:20:10.522 - 00:20:30.520, Speaker A: Absolutely. Great. So here if I do Cairo compile, it sends something like, oh, it doesn't work. It doesn't work because it's telling me a few things. First of all, it doesn't understand what felts are. And I think it's because this wasn't moved to felt 52.
00:20:33.290 - 00:20:38.860, Speaker C: Yeah. Okay. This seems like the older one.
00:20:40.030 - 00:20:48.300, Speaker A: Now it's saying it didn't find balance. So let.
00:20:51.410 - 00:20:59.310, Speaker C: I think it's because of the felt error, only because it didn't recognize balance as a felt. So it probably didn't.
00:21:00.210 - 00:21:05.506, Speaker A: Wait, I don't understand. What do you mean?
00:21:05.688 - 00:21:08.562, Speaker C: Is this a recent error after you change to fail 252?
00:21:08.616 - 00:21:09.220, Speaker A: Yes.
00:21:11.270 - 00:21:13.490, Speaker C: Can you try Starknet compile?
00:21:15.270 - 00:21:43.920, Speaker A: Starknet compile will work for Cairo zero code, not for Cairo one. This should work with Cairo one code. So you know what? What I'm going to do is, I know this. You know what, actually we have Cairo 101 on which we're adding content on the Cairo one branch. So I'm just going to take a look at how storage is managed here. I haven't used Cairo one that much yet. See, should work.
00:21:46.610 - 00:21:48.160, Speaker C: Contract is correct.
00:21:49.330 - 00:22:23.100, Speaker A: You know what? Let's move this to u one two eight, see if it works. So this was updated. Let's see if it says something. Right. Let's see if somebody has the answer. In YouTube, there's always somebody screaming. Not this time.
00:22:26.990 - 00:22:33.210, Speaker C: I think this Cairo compile is still pointing to Cairo zero. That's probably why it's not recognizing.
00:22:33.290 - 00:22:53.700, Speaker A: I don't think so. Look, Cairo compile version. It's the proper one. You know what, let's not spend too much time on this. I'm going to use this other thing we did last time. This one should work, right?
00:22:54.150 - 00:22:54.900, Speaker C: Okay.
00:23:04.490 - 00:23:36.370, Speaker A: So this one works. So as in the Cli before, when you run it without argument, it's basically going to return to you whatever he stores when he compiles stuff. So this is not very useful. So I'm going to ask him to tell me something like, well, first of all, I'm going to check what arguments I should put. So output is the output file name. So I'm going to tell him to do work. Hello Starknet.
00:23:36.370 - 00:23:37.490, Speaker A: Jason.
00:23:39.670 - 00:23:44.610, Speaker B: Just a comment. Henry. I see in the Cairo one repo there is a starnet compiled binary.
00:23:45.190 - 00:23:54.920, Speaker A: There is a Starknet compiled binary. Okay, so in the Cairo Lang repo, and you can see here if I do.
00:23:55.290 - 00:23:59.574, Speaker B: No, no, in the Cairo, in the Cairo repo not cairo Lang in the.
00:23:59.612 - 00:24:12.480, Speaker A: Rust version, yeah, there's a to use, I'm not sure how to use this one, so for now I'm not going to use it. But wait, actually.
00:24:14.850 - 00:24:20.590, Speaker C: I think that one we have to use as cargo. With cargo cargo runsnet compile.
00:24:22.390 - 00:24:32.500, Speaker B: So you have to go back to the rust repo, build all the binaries, and if you see the release nodes for chiral Lang, it shows you how to.
00:24:37.990 - 00:25:05.710, Speaker A: You might be right. So if I run stocknet compile here, see what it says if I tell him. Okay, compile hellostarchnet Cairo. It does work. You see, I was expecting this not to work, so you actually don't really need to do it with Cairo compile. So Starknet compile works with hellostarknet Cairo. So this works, right? I'm going to do just like we did before.
00:25:05.710 - 00:25:59.230, Speaker A: Hello starknet compiled JSon. This works, and if I do, Abi does it do API doesn't like the. So here, where is my thing? It's your live demo. See I have lstarknet Cairo, lstarknet compiled JSON, and this other stuff that is I'm going to remove. All right, so I have a Cairo one contract. I've been able to compile it. Do you have a Cairo zero code I could try to compile also? Maybe it's okay, so no worries.
00:25:59.230 - 00:27:02.770, Speaker A: Can you find a small one and then I'll try to compile it here in the meanwhile, now I should be able to declare and deploy this contract. I think this one has been add just one thing here so that it's a new class hash because this one has been done a bunch of time. So now I should be able to declare my contract. So I'm going to need to set up my Cli with a wallet. Right. First I'm going to tell it when I use this to say I want to work on Girly, I want to use this wallet and then I should be able to create a new account. This I'm not going to do because I already have an account and now I should be able to send my declare transaction.
00:27:02.770 - 00:27:36.560, Speaker A: So I'm going to try to do this. So it's Starknet declare. I'm going to specify the compiled contract this time, hello up compiler JSON, and then the account is version eleven, so it still has the same issue.
00:27:37.490 - 00:27:40.714, Speaker B: You have to pass a flag called compiler.
00:27:40.842 - 00:28:01.474, Speaker A: Exactly. So here you can see I have the same issue. Basically it tells a, the binary that is in the compiler is not compatible. It's not exactly very explicit but that's what it says, so I have to give it a flag to tell it where is the binary. And I think the flag is. Do you know what the flag is, David? It's path or compiler?
00:28:01.522 - 00:28:09.990, Speaker B: Path is compiler underscore deer like directory.
00:28:10.810 - 00:28:12.280, Speaker A: Yeah, in my case.
00:28:14.030 - 00:28:18.570, Speaker C: I'm sending you a sample command in the studio Chat.
00:28:19.150 - 00:29:08.700, Speaker A: Nice. So if I do this, should this work? Let's see. No, it doesn't find it, so I'm going to tell it exactly where it is. And so it is in tilde Cairo target release and it should be there. Now it's going to try to use the stocknet binary. Now my stocknet declare transaction will go through. If I want to make this simpler, probably I can do an export with these, right, I'm going to copy this and the same way I had something where I exported a value here.
00:29:08.700 - 00:29:19.040, Speaker A: Does that work if I do up export? But let's see.
00:29:22.210 - 00:29:29.010, Speaker C: Did you make sure to remove that class hash error? That class has already been declared.
00:29:31.590 - 00:29:34.142, Speaker A: Wait, did I have this error?
00:29:34.286 - 00:29:51.014, Speaker C: No, you didn't. But this contract, if anybody has declared a similar contract and if it already exists, then it will show up an error, right. That this particular class hash has already been declared, as in it can find a similar code.
00:29:51.132 - 00:30:20.740, Speaker A: Yeah, exactly. In case this doesn't work, I'm going to try if I see I can make this later on. But you're right, if I try to do this command again it's going to tell me wait, this is already declared, but basically you can reuse stocknet declare with a flag that tells you, that tells it where the compiler is. Right. So now it's going to try to send the transaction again and it's either. Okay, so it didn't fail because this transaction is still pending. It's still not pending yet anyway.
00:30:20.740 - 00:30:30.630, Speaker A: All right, so I've been able to declare it so I didn't have to move the binary, I just have to specify where it is. And I'm going to monitor my transaction.
00:30:41.150 - 00:30:54.958, Speaker C: How people can use their existing Azure wallet account to actually deploy their contract using CLI. I get this question a lot and I haven't been able to figure it out.
00:30:55.044 - 00:31:32.474, Speaker A: Yeah, that's a good question. I think that I haven't done it myself. I use a specific CLI account, but here you can specify which type of account you use. I'm pretty sure you can use your Arjon wallet here. And there's a way for you to import your argent wallet, your set of basically your wallet, which is the address of your smart contract and the private key you're using to sign these transactions, you can use them in the CLI personally. That's not what I do. I have a wallet for deployment and then I use Argent to do management or bravos by the way.
00:31:32.474 - 00:31:45.742, Speaker A: And Arjun also has a nice uX to deploy stuff. So here in smart contract development possible.
00:31:45.876 - 00:31:49.630, Speaker B: With the CLI you can only do it with Protostar, what you're describing.
00:31:50.130 - 00:31:52.286, Speaker A: So with Protostar you can do it.
00:31:52.388 - 00:32:11.800, Speaker B: Yeah, if you export the private key from your Argentx wallet and you provide it to Protostar, Protostar will be able to actually use that wallet, basically just derive the public key again and just assumes that Argentx is just signing messages a certain way.
00:32:12.890 - 00:32:41.566, Speaker C: Nice. But this would be an interesting open source project to have your, because that people have, developers want to use that to track the transactions and then be able to see how their funds are moving and things like that. And also funds like you can just deposit bulk of your funds just for your development exercises and then keep using that for deploying contracts and stuff.
00:32:41.748 - 00:33:05.080, Speaker A: Okay, nice. All right, so see the transaction went through. So now I tried to declare it again and then it told me oh but this class is already declared. So see this is what you were mentioning earlier again. Now I'm going to try to deploy this. So I'm basically going to tell it. What's the contract? Class ash it's this one.
00:33:05.080 - 00:33:37.314, Speaker A: So I'm going to do class ash this and I think I need also to tell it what account I'm going to use. Sure. It's going to ask me for the compiler path again it didn't. Nice. So the deploy transaction went through and the transaction hash is here so I can monitor the transaction. Nice. So there you go.
00:33:37.314 - 00:34:02.090, Speaker A: I've built the contract and deployed a cara one contract. So roughly the difference here is that you need to specify the path in the CLI before to wherever you've built it so that it's easier for you to build. Okay, should we try to deploy a Cairo zero contract?
00:34:04.030 - 00:34:11.870, Speaker C: Yes, I sent you another link on the same finium workshop. They also have a Cairo zero contract.
00:34:12.210 - 00:35:00.974, Speaker A: I thought this was another one. Pretty cool. All right, so I'm going to take this Cairo zero code here. I'm going to save this live demo. I'm going to call it hello Starknet b zero Cairo. Right, so now what happens if I do Starknet compile? Hello Starknet. Earlier I did start net compile and this worked, right? So automatically it understood that this was Cairo Zero Cairo one.
00:35:00.974 - 00:35:31.142, Speaker A: Sorry, if I write to do Starknet compile? Hello, Starknet. It's going to tell me. Wait, of course wait, it's telling me contract not found weird. So I'm going to use the deprecated flag and I think basically in Starknet compile there is a flag that allows me to compile.
00:35:31.286 - 00:35:32.560, Speaker B: They changed that.
00:35:33.010 - 00:35:34.586, Speaker A: So you can't do this anymore.
00:35:34.618 - 00:35:40.926, Speaker B: With Starknet compiled, the binary is now called Starnet compile deprecated. The command itself.
00:35:41.108 - 00:35:46.734, Speaker A: Interesting. So the command is different. So Starknet compile deprecated and you can remove flag.
00:35:46.862 - 00:35:47.250, Speaker C: Yeah.
00:35:47.320 - 00:36:29.470, Speaker A: Okay, so you assign it. Now you have two different ways of compiling. One is for Cairo one, the other is for Cairo zero. See, same issue, I mean same issue, same stuff where it outputs something. I'm going to call this one v zero underscore compile JSOn and telling me it can't open it. So I'm guessing I have to tell it that this is the output because it's the same argument as before. Now I have in my folder a Lostarknet v zero compile.
00:36:29.470 - 00:37:29.020, Speaker A: Okay, so now I want to declare this one and send it. So I'm going to do stocknet declare this one hello stocknet v zero underscore compiled account. So I'm going to need the account. So I'm going to do a card version eleven. What else am I forgetting? Do you think I need to specify the path maybe? No, it needs contract for this one here it's saying oh, it's not a Cairo one contract, it's a Cairo zero contract. So at least here the error is explicit, it says pass deprecated. All right, I'm going to pass this flag, and now I'm able to send my transaction.
00:37:29.020 - 00:38:38.932, Speaker A: So, see, same thing here. I was able to declare a class of Cairo zero. Then later I'm going to be able to deploy it. All right, so summing up, so if you want to compile a Cairo one contract, you use Starknet compile, right? If you want to compile a Cairo zero contract, you use darknet compiler. If you want to declare a class hash with Cairo one, you specify your compiler directory to explain where you installed Cairo one. And if you want to declare a Cairo zero class, you use the deprecated flag that is here. We're going to detail all of this in the documentation that we're going to push today, and that's basically what I want to cover.
00:38:38.932 - 00:38:45.030, Speaker A: David Guan anything you want to mention or think would be useful for people to know.
00:38:48.440 - 00:39:20.130, Speaker C: Yeah, just from my end. For those of you who are exploring Starknet or thinking about learning Cairo, then we highly recommend Cairo one because Cairo Zero is going to be deprecated soon. This was just like a comparison example in case you are already users of Starknet and just want to know the difference. But Cairo one is what is going to be the one going forward. So yeah, you don't have to learn Cairo Zero starting at this point. Just want to make that clear.
00:39:20.660 - 00:39:56.380, Speaker B: I also just want to mention the reason of this difficulty right now is because the Cairo land, which is the CLI, is still written in Python as it was before. The carol Lang will continue to exist. It's just going to be the CLI, but eventually it's going to get rewritten to rust and at that point we will should be able to ship the Cairo one compiler as part of the CLI. So you don't have to do all this juggling with variables and references. But for now we're in this middle of having a Cairo one compiler and Ros and a Cairo Lang Cli with Python. We need to juggle with this complication.
00:39:57.840 - 00:40:29.028, Speaker A: Yes, and I fully agree with Kean, Cairo one is definitely the skill to learn right now. Don't go the Cairo Zero route for now, but for people who have Cairo Zero code and still want to use it, you should be able to do it with these commands. All right, so I don't see any more questions. I'm going to check real quick on Twitter. I don't see questions on YouTube. I see David Silva said something and then removed it. So I'm really curious what that was.
00:40:29.028 - 00:41:03.330, Speaker A: Yaman is saying hi, hi Yaman. As well as Giwuk. Hey Giwuk. If we get people from all over the world, Portugal, Turkey, Korea, that's great. Ori is saying what are the best resources to check for chiropone except for starkling, especially array functionality, syntax, we don't have many resources right now. We're coming up with a documentation which should be the place to go soon. But in terms of examples right now starklings is the best place to go.
00:41:03.330 - 00:41:52.960, Speaker A: So yeah, this is something. We are hard at work, we want to solve it quick, but the language is still evolving really fast, so it's hard to maintain resources. So Gilwick is saying, does every functionality on Cairo zero is built on Cairo one? That is a great question. And I think on the Cairo one repo there is a feature parity list. And actually if I look for the Cairo one repo, that's the thing that always pops up because I've been checking this for a long time. And apparently we have most of everything. I think the find elements are the dict, no dicts are being worked on.
00:41:52.960 - 00:42:29.036, Speaker A: I think this is working and this hasn't been updated in the past week. Maybe find element has not been implemented, but for the rest, for intent and purposes you're good to go. And I see Davide saying I was trying to send the link to the Finyam repo but YouTube didn't allow it. And he's right. I'm going to put it right here because it's a great resource. So finium came up with a Cairo workshop. I'm going to put it here and put it in the link, but I highly recommend you to check it out.
00:42:29.036 - 00:43:11.290, Speaker A: It's very extensive and personally I used a lot of the installation instructions they have in to set up my environment. I'm going to put it in the chat here. I'm going to also put the link to star clings because it's a great tutorials. And there it is. And we're about to release also Cairo 101. It should be updated today and you'll be able to interact with Cairo smart contracts pretty soon. So I'm going to put the link here, but you'll hear about it soon enough.
00:43:11.290 - 00:43:51.124, Speaker A: Right. So my Transaction went fro west dark scan, bought by Twitter or something. There's a doge for some reason. Doge, nice. Well, who doesn't like doge? It's actually quite soothing. It's nice when you're waiting for a transaction, you can just count the doge. Anyway, can you see the doge on my screen? I'm not dreaming.
00:43:51.124 - 00:44:22.000, Speaker A: They're there, right? Anyway, I've been starting to see doge appear randomly for some reason. All right, cool. I think we are good actually. Should I add it to. So Sean is saying that they have a repo Stark scans like Cairo one. Oh wait, he has a good list. Yes.
00:44:22.000 - 00:44:47.444, Speaker A: I'm going to share it here. Nice. So it's a nice list to check where compatibility is with all the tool we have around Cairo one. I'm actually going to present it because it's really useful. Actually share screen here. So as you can see. So Mainnet and Testnet were updated to version one, the integration environment.
00:44:47.444 - 00:45:09.056, Speaker A: Also some things have been updated, not everything. So Scarb is compatible with Cairo one. We don't have yet. The account contracts I guess I'm not seeing here. Devnet. Devnet was updated to Cairo one and you can actually use it with your smart contract. It has been really useful for us.
00:45:09.056 - 00:45:38.788, Speaker A: For Cairo 101. We've been able to use it to test it, but so far tooling is still working on it. So when? March 17. I'm guessing it's a little late, but, yeah, a good page to check out. Where are things standing for Cairo? One up and let's wrap it up. So, yeah. David Kian, thank you for joining.
00:45:38.788 - 00:45:46.150, Speaker A: To the people who listen to us, thank you for being here. Don't hesitate and send your questions if you have any, and we'll see you soon.
