00:00:00.410 - 00:00:55.924, Speaker A: It boom. Lived. Hi, everyone. Can you hear me? Guess. No, it. Yes, wonderful. Hi, how are you guys? The black hole.
00:00:55.924 - 00:01:48.850, Speaker A: The black hole. Can't hear you. All right, so today we're going to dive into Cairo. I know you're all expecting something. This will happen in the end of the stream, and there we're going to do the startlings. Yeah, we can't hear Ben. Ben, you have to unmute yourself or select the right mic and the left.
00:01:48.850 - 00:02:26.064, Speaker A: All right, so we're going to do the star clings by only dust, which is a good tutorial to start Cairo. I did not set up anything, I think, so we should be, we should be at the same step. Can you hear me now?
00:02:26.182 - 00:02:26.850, Speaker B: Yes.
00:02:27.380 - 00:02:30.160, Speaker A: Wonderful. Can everyone hear Ben?
00:02:31.460 - 00:02:32.450, Speaker B: Hi, everybody.
00:02:37.140 - 00:03:34.290, Speaker A: All right, check. You have like 20 seconds delay. All right, so let's start with the star link. So that starclink is a GitHub repo which you could find here. Copy the link. YouTube twitch. Yeah, I'm the only twitch.
00:03:34.290 - 00:04:41.530, Speaker A: All right, so you can do it with me or you can just watch me do it as you wish. So basically you clone the repo, then you open a terminal, and then you're in the start theme, then install your cli. We're going to source the CLI and parking watch, and it works. So, so let's start with the exercise. I know that Ben loves it.
00:04:43.580 - 00:04:45.828, Speaker B: Multiplex that terminal, man.
00:04:46.014 - 00:05:31.400, Speaker A: Yeah, multiplexing is always a good idea, but I have like a tiny screen, so it's going to be harder. But we Europeans are used to this. So start clean watch, then open vs. Code breaks everything. All right, first exercise, syntax one. So syntax one, syntax one. Oh, there's a readme.
00:05:31.400 - 00:06:03.504, Speaker A: Starknet uses the Cairo language to write blah, blah blah. You can mark, okay, you can check the documentation, but we won't check the documentation. All startnet files must start with a specific line indicating this file is a smart contract. So we're working on Startnet. So we're going to declare this file as a startnet file. So startnet. So this instruction helps the compiler understand that he's working with a startnet file.
00:06:03.504 - 00:06:41.264, Speaker A: So this is easy and it's completed. So I am not done. I am done syntax too. So yeah, this is like the first basis that you have to know to code. Net starknet. Second exercise, Starknet provides module management system. Actually it's the Python management, yeah, it's basically it.
00:06:41.264 - 00:07:20.236, Speaker A: So to import a file, you need to import. So like in python you can only import specific functions. You can't import like a whole file so here what we need is hash built in. Those two are built in, like, we don't need to import them. It's automatically done. Or you can go like this, I think built in range check or something. And something else, but we don't need to do it, so we won't do it.
00:07:20.338 - 00:07:22.712, Speaker B: Hey, Lucas, we got a question in the chat.
00:07:22.856 - 00:07:23.548, Speaker A: Yeah.
00:07:23.714 - 00:07:27.470, Speaker B: Some guy named Odin free wants to know where's the water?
00:07:28.420 - 00:07:38.960, Speaker A: The water is. The water is here with the awesome setup.
00:07:39.780 - 00:07:43.168, Speaker B: If you stay long enough, you get to see Lucas code underwater.
00:07:43.264 - 00:08:53.510, Speaker A: Yeah, but you have to stay long enough, especially you, Oli. You'll need to write a full smart contract to see it happen. So to import the file, the hash built in, it's like type. So we need from starkware, which is the package, like the python package, cairo, common, cairo builtins, I think import and we want hash builtins save and if we done, let's remove. I am not done. Exercise three post functions can take our and return result. So takes two arguments and returns one.
00:08:53.510 - 00:09:49.850, Speaker A: So basically here, this function takes like a and b sums them and returns them. So a is a felt, b is a felt, and it returns our results, which is a felt. For now, it's really basic, but I guess it's a good start and we pass the test. Let's remove this. Let's go to fourth exercise. Functions and other definitions can be scoped in namespaces, making the code more readable. So yeah, a namespace basically wraps like everything you want in a section, and you can just import a namespace and then to use it.
00:09:49.850 - 00:10:33.940, Speaker A: This will be like my namespace return. Something's probably what they want us to do. So my name says this, so yeah, it's almost like a class, but it doesn't need a constructor, so it's just like a scope. All right, let's move on. If you have any questions. The fifth.
00:10:37.160 - 00:10:44.410, Speaker B: Real quick. I'm monitoring the chat for questions, so if you guys do have any questions on what Lucas is doing, feel free to ping them out.
00:10:46.860 - 00:11:11.360, Speaker A: Yeah, don't hesitate. You can describe an object with a structure, so you need to declare a struct. And I'm cheating for this. Boom. Structural, and it has not currency.
00:11:12.660 - 00:11:16.136, Speaker B: Hey, Lucas, can you bump the font size up in the terminal?
00:11:16.268 - 00:11:57.100, Speaker A: Sure. In the terminal or in vs in the editor? Like, this should be good. All right. I feel like an old male. Everything is anyway, so the first member will be the name, and let's say tally. So here they can add a short string literal, which will be converted to a felt at compile time. So in the compiled file this will be transformed into a felt.
00:11:57.100 - 00:12:23.048, Speaker A: Let's check if I manage. Yeah, managed to do it. Yeah. Basically what I did there, it's like Cairo snippets. I already talked about it. Basically this is like a snippet file. This is the trigger word.
00:12:23.048 - 00:12:53.724, Speaker A: It's trigger word. Then you input what you want it to be filled with. You can add variables. Then when you press tab it just goes from first to the second to the third and you can define a bunch of them. Obviously this will not be compatible with the next gyro version. So version ten because we're changing syntax. So this will not be updated.
00:12:53.724 - 00:13:33.070, Speaker A: So I will update it. And yeah, I have it on a GitHub repo somewhere on the starknet.edu organization. Yeah, here you can submit prs, add whatever you think is relevant. You can just copy paste the file and then it makes your life easier for camera. So let's come back to this one. I am done.
00:13:33.070 - 00:14:28.736, Speaker A: And string. We're switching parts. Let's do the readme short strings. Okay, so basically it tells you that strings shorter than 31 characters are converted in a felt. So basically how it's done is something like that. So let's write what. So this is, this is height of a word.
00:14:28.736 - 00:15:29.220, Speaker A: And then we're going to convert it to felt, which is an int. And we're going to go like this. So it's begin to remember if there is an s or not. And here, this is the felt version of Underwater, which is what they found here. And here is the x of this. So let's work with strings. Okay, fix to say hello function by returning the appropriate short string.
00:15:29.220 - 00:16:29.630, Speaker A: Oh, like this. So hello in string. Hello in the field. Oh no. So we need to declare variables. String it, do that. Well, this exercise is a bit weird and.
00:16:29.630 - 00:17:11.160, Speaker A: Yeah, not that hard. Let's move on to the next one. Stream. One short stream felting these guys and they support the same basic operation. Yeah. And here I'm pretty sure that we can just. Hello, string everywhere.
00:17:11.160 - 00:17:37.780, Speaker A: Oh no. Okay. Random. Okay, let's come back to this. Find the key to decode the string that spaces. Test. Let key equals zero.
00:17:37.780 - 00:18:03.140, Speaker A: All right, you should produce liquid cipher. Twinkle, twinkle star. We could probably do that.
00:18:06.850 - 00:18:09.120, Speaker B: Are you converting that to hex in your head?
00:18:09.810 - 00:19:24.760, Speaker A: No, if it works, it's fine. And here everything is easier. Okay, let's do it the right way. So we need to convert this to hex or felt to get its felt value. Then we need to convert this to felt. And it felt this to felt. And then one minus the other.
00:19:24.760 - 00:21:38.910, Speaker A: It's, it looks like a huge gameplay. It and this one. So we need to find this value. So this equals this. So first remove this, and then we divide. Is so annoying to copy paste everything and. Okay, this is not the right.
00:21:40.000 - 00:21:43.740, Speaker B: Don't besmirch tmux on this coding session.
00:21:45.460 - 00:22:29.390, Speaker A: I got it wrong because of tmux. How could this be that big if we exit? All right, it. What am I doing wrong? Okay, it's your turn then. What am I doing wrong?
00:22:32.360 - 00:22:39.720, Speaker B: Nam suggests you do some math on the short strings. I have been monitoring the chat and haven't quite been paying attention.
00:22:41.020 - 00:23:24.150, Speaker A: So what would you do? You subtract the hex value to this. Noah has written plain text. Ciphertext equals plain text minus this divided. Now I'm looking for ciphertext. Ciphertext equals plain text divided by this minus this. Are we okay with this?
00:23:25.980 - 00:23:26.730, Speaker B: Sure.
00:23:28.460 - 00:24:29.230, Speaker A: So why does Python want to mess with me? Plain text is magic certain money. This divided this it. Okay, so this should work. And this does square.
00:24:47.140 - 00:24:50.690, Speaker B: Felt representation of Magic string money.
00:24:53.060 - 00:25:07.210, Speaker A: Basically what they do is that they have a cipher text and then they decode it, they decipher it, and it should be magic starting money.
00:25:09.580 - 00:25:15.160, Speaker B: So then you just need to do those operations in reverse. Right?
00:25:15.230 - 00:25:35.120, Speaker A: Yeah, that's what I wrote. Like, so ciphertext equals plain text divided by this minus x. Are we okay with that's?
00:25:37.300 - 00:25:38.688, Speaker B: We're good with that.
00:25:38.854 - 00:26:10.890, Speaker A: All right, so we're coming back to the plain text, which is this. So let's. So this is the plain text. Now we subtract the hex value, minus hex value.
00:26:14.720 - 00:26:16.190, Speaker B: Add the hex value.
00:26:18.240 - 00:26:35.670, Speaker A: No. Oh, yeah, it almost. So you know what? It.
00:26:51.590 - 00:26:53.490, Speaker B: Subtract first, then divide.
00:26:55.670 - 00:27:10.822, Speaker A: Math. It's hard, you know? All right, let's do it the proper way. So this adding hex value.
00:27:10.956 - 00:27:13.990, Speaker B: Sorry. Subtract and then divide.
00:27:15.790 - 00:27:25.260, Speaker A: No, we're looking. Divide and then add, subtract, then divide. No, add then.
00:27:29.330 - 00:27:35.070, Speaker B: Because the original is addition. So to go backwards, we need to subtract.
00:27:37.490 - 00:28:08.762, Speaker A: The original is an addition. But we'll look. Yeah. All right, so we've got this. We're looking for site a unit that's rewrite. Ciphertext equals plain text minus hex. And the whole thing divided by this.
00:28:08.762 - 00:29:20.882, Speaker A: Right? Correct. So this, okay, int of this minus x value divided by this. Okay, it, it's. Forget about all of this. All right? It's the end of the stream. Thanks for coming. What is wrong with this? I'm off by one, I think.
00:29:20.882 - 00:29:36.600, Speaker A: No, a bit more. This is correct. What's the fucking problem?
00:29:38.970 - 00:29:45.414, Speaker B: If anyone has the answer in chat, ping it out. I'm going to try to do it as well.
00:29:45.532 - 00:29:56.300, Speaker A: Cairo is hard. It's this, it looks like really painful to watch.
00:29:58.830 - 00:30:02.060, Speaker B: Someone said live coding is hard and they're correct.
00:30:03.150 - 00:30:27.080, Speaker A: Yeah, but no, I still have the same result. It.
00:30:32.810 - 00:30:35.030, Speaker B: Does it divide evenly?
00:30:36.170 - 00:30:37.078, Speaker A: What do you mean?
00:30:37.164 - 00:30:39.350, Speaker B: Like is there any float or carry?
00:30:40.970 - 00:31:56.200, Speaker A: It should not. It doesn't make any sense. It. All right, let's move on. We're going to go back to this afterward. Storage one. This one is easier.
00:31:56.200 - 00:32:28.800, Speaker A: There is no readme for this. Okay, create a storage variable named bool. Okay, so storage. And it's a function. Yeah, so everything is a function. In Cairo you add the decorator so the compiler knows that it's like a story variable. Storied variable are persistence across multiple calls.
00:32:28.800 - 00:33:57.900, Speaker A: So this is the way to declare a single value. Like this function will only return a value which is this perfect and I'm removing. So there create a storage named wallet mapping a felt to another. Sorry, once again, wallet. So the key will be felt and the value will be felt. Create a storage variable name has map pumping two false to another paste and a storage name id mapping a felt to an id felt. So these are maps.
00:33:57.900 - 00:34:39.820, Speaker A: Like the function takes an argument and will look into the storage at that key and return the value pointed by that key. If it's never set, the default value is zero. So you can safely call like a key that doesn't exist. It will only return zero. Search wallet mapping a felt to another height. Map mapping two felts. So here we have two keys.
00:34:39.820 - 00:35:09.140, Speaker A: This is a tuple. So yeah, it's a regular map. This will work. Let's move on to the next let. By the way, Ben, did you manage to solve this exercise? The stream?
00:35:10.760 - 00:35:15.496, Speaker B: Yeah, I'll ping the solution out to you in just a sec. You can go back to it.
00:35:15.598 - 00:35:53.424, Speaker A: Okay. You can update the stored values using externals, or just conceal them for free using tools. Implement togo external. So togo setting. Yes. So what we need to do is to write the value to bool. So we're writing and we're writing the value we want.
00:35:53.424 - 00:36:42.350, Speaker A: So here it's one toggle, which sets the boolean to true, which is one, and view bool. We need to write to read the value, select read equals. Here we need to add parentheses to unpack a tuple, because every function in Cairo returns a tuple. Here we're returning. I think we need name tuples now. But yeah, everything is one, like everything is tuple. So you need to unpack everything or you need to deal with it later.
00:36:42.350 - 00:39:11.100, Speaker A: It oh, toggle just switches the value. Okay, so let's do it. Reading bull train if 10 one and we need to return. So reviewing the pool here. So here we're viewing the code, we're reading it. Okay, it should be zero first, then we toggle it, illustrate that it doesn't encrypt compilation error. Anyway, let's continue.
00:39:11.100 - 00:40:13.100, Speaker A: Implicit arguments. This one is funny. Functions can take implicit arguments. You read curves, blah blah blah, try to make it past test. So yeah, you can add your own implicit arguments, but according to Shara, it's a bad practice, so do not do that. Basically this allows you to call a function without having to specify the arguments like in the parentheses. But it's a bad practice, so don't do it.
00:40:13.100 - 00:41:28.660, Speaker A: But know that you can do it because for some functions you will need to do it onto this fixed child function one. Okay, so here it needs a, and here it needs b. Current function. Okay, so this one will need help, this one. So this function will pass it automatically to this child function. So as I said, you don't need to specify it here like a regular function, but it's a bad practice, so really don't do it. All right, let's move to the next one.
00:41:28.660 - 00:42:43.160, Speaker A: What is really neat with implicit argument is that they return to succeed. Implement the blood box function to make the dispass it snap box with the secret it. Sure this won't work. It worked. Okay, so this is the solution and I am done. Basically what we're doing here is we're setting another variable which is called secret. And here as it's implicit, it will get returned to the newscope.
00:42:43.160 - 00:46:02.602, Speaker A: And let's move to the next one, which is recursion arrays can be passed in, right, that contains function body that returns one if the haystack contains the needle and zero otherwise. So haystack is here. So contains needle. Okay, here we want to check if value is there's. So if hastack equals, equals needle, return one and then, and then work on yo one stack n minus one. But we're not east it it. I'm not in the right exercise.
00:46:02.602 - 00:47:40.330, Speaker A: Could be recursion one here. Sorry for that. Fuel image writer recursive implementation of. All right, we're a bit running out of time, so we're going to dive into the more harder stuff, which is revoked references. And for that I will ask Ben to talk a bit with you while I set up everything for the revoked references. You can explain the string stuff and everything. I will need to do a small set up on my side, if you understand what I mean.
00:47:42.080 - 00:48:19.050, Speaker B: Hey, everybody. Yeah, so to go over the string stuff, I mean, the chat pretty much had it right. It's just the plain text subtracted by the hex value divided by 1337. The hang up is that when you're doing that in Cairo, the division wraps. So it doesn't look like the value that Lucas got from Python. So I put the answer out in the chat. So you guys should have that now.
00:48:19.050 - 00:48:49.100, Speaker B: For now, I don't really have the set up for starklings. Exactly. Ready. So if you have any questions about revoked references, feel free to ping those out to me. We can talk about revoked references a bit, or I can give you some history into what's about to know. We're all in disparate locations across the globe. The dev advocacy team for Starkware.
00:48:49.100 - 00:49:41.490, Speaker B: And we were talking about puns for we should do Cairo in Cairo. We should go deep with Cairo and do it in a pool. And so Lucas basically said we should do an underwater coding session. And at the time I was skeptical that that would happen. But Lucas has gotten a bunch of tools and he is prepared for maybe the most epic live coding session in at least Cairo's history. So what we're about to see is Lucas live coding underwater. I'm interested in the MacGyver setup he's got going on, so we'll see what's happening.
00:49:41.490 - 00:50:37.630, Speaker B: In the meantime, I can show you just like a step by step Cairo example of that string situation. It's a little bit easier if you do all your arithmetic in Cairo itself instead of python. And yeah, that resolution is probably going to be really terrible. Someone mentioned in the chat, I think it was nom, that we need to boost our resolution up to 1080. And I completely agree. We'll get that sorted out for the next session.
00:50:41.650 - 00:50:42.900, Speaker A: Where was I?
00:50:46.740 - 00:51:07.770, Speaker B: Yeah. So something like this going step by step through this is the felt representation of that string subtracted by the felt representation. Just because it's easier for me to read, you don't have to format it like this, of that hexadecimal number and then division by 1337.
00:51:11.340 - 00:51:19.070, Speaker A: All right, I'm ready. Okay, let's not be done.
00:51:21.120 - 00:51:24.476, Speaker B: I think your video is off.
00:51:24.578 - 00:51:26.990, Speaker A: Yeah, I know that. Okay.
00:51:28.800 - 00:51:32.124, Speaker B: You'Re going to just have your video off and say you're live coding.
00:51:32.252 - 00:51:47.190, Speaker A: Yeah, I'm just going to share my screen. Honestly, I'm not sure I'll be able to fix the chirophile because the keyboard in the water is not that great, but we're going to try. All right. Ollie is for you.
00:51:59.620 - 00:52:09.924, Speaker B: Okay. Live shot. He's better. Wear swimsuit. Okay, good. This is impressive. Okay.
00:52:09.924 - 00:52:59.990, Speaker B: He's got the underwater keyboard. He's got the breathing apparatus and the tank. We got to see some fingers typing. I think, technically he's done it. The man is dedicated. So, the other part of this is Henry now owes him a dinner, because he also was unsure that this was going to happen.
00:53:01.320 - 00:53:09.030, Speaker A: Okay. It's just terrible. I can't see anything because of the air that I'm breathing out. So I really can do that.
00:53:10.860 - 00:53:14.056, Speaker B: Did you technically get a keystroke on the computer?
00:53:14.158 - 00:53:23.100, Speaker A: I did. I pressed alt tab, but it's, like, really hard to see because of the bubbles.
00:53:23.600 - 00:53:25.630, Speaker B: That's a dev advocacy. First.
00:53:27.360 - 00:53:28.860, Speaker A: It'S some dedication.
00:53:29.280 - 00:53:30.760, Speaker B: Submit it to Guinness.
00:53:30.920 - 00:53:41.950, Speaker A: Yeah, I don't think. It probably has been done before. I can try once more, but I don't think I'll be able to see more.
00:53:43.440 - 00:53:48.550, Speaker B: I know it's tough, but frame the camera a little bit further down so it's pointed to your.
00:53:51.320 - 00:54:01.096, Speaker A: The computer is like, no, I think I put some more. Okay, you know what? Let's try.
00:54:01.278 - 00:54:03.940, Speaker B: Odin is skeptical. Odin is skeptical.
00:54:04.100 - 00:54:09.608, Speaker A: Yeah, but he just wants me to be so. Okay, I'm going to try once more.
00:54:09.694 - 00:54:10.650, Speaker B: Send it.
00:54:12.400 - 00:54:14.796, Speaker A: Okay, ready? Okay.
00:54:14.978 - 00:54:26.780, Speaker B: Live coding underwater, session two. Oh, no. What is this? Framing. All right, it's pointed somewhere weird.
00:54:27.460 - 00:54:29.340, Speaker A: No, don't worry.
00:54:29.500 - 00:55:03.580, Speaker B: Okay, I trust that's looking good. The suspense is killing me. All right, ping out if you want to see Lucas Globetrot the world while doing live coding puns. Ping out in the chat some more. Live coding puns. So, Cairo and deep. Going deep with Cairo as this one.
00:55:03.580 - 00:55:44.634, Speaker B: Give us some more Cairo coding puns. Summit the Cairo mountaintop, and Lucas has to go to Everest. Let's see. Debug your Cairo programs. And Lucas has to go into the Amazon rainforest. We got to get, like, a nature channel documentary of Lucas just going to the ends of the earth. Yeah.
00:55:44.634 - 00:56:14.170, Speaker B: Jay says make Cairo even harder than it already is by doing it at the top of a mountain. I hope he remembers to turn this camera on. Safety first. Bring the beers. I'm with you, Odin. Yeah. Let's see.
00:56:14.170 - 00:56:41.440, Speaker B: Is there a bar pun we can make? Ollie, I know you got a drinking pun in you for Cairo or starknet? I think the end game for this entire. Oh, here we go. Your camera was off.
00:56:41.590 - 00:56:42.240, Speaker A: Really?
00:56:42.390 - 00:56:43.136, Speaker B: Yeah.
00:56:43.318 - 00:56:45.410, Speaker A: All right, I'm going at it again.
00:56:46.040 - 00:56:46.980, Speaker B: One more time.
00:56:47.050 - 00:56:54.470, Speaker A: And then. This is really a big mess. I'm just going to dry the box off.
00:56:57.820 - 00:57:06.890, Speaker B: I think the end of this entire series has to be a play on star. And we basically shoot Lucas off.
00:57:10.960 - 00:57:21.500, Speaker A: This is a good idea. You know what? I'm going to write it down somewhere. And next one, maybe I can. A zero g plane.
00:57:22.000 - 00:57:22.750, Speaker B: Yes.
00:57:23.460 - 00:57:38.450, Speaker A: All right, one more time. I'm going to make a clown of myself. Just for a bit. All right, let's go again. It.
00:57:43.240 - 00:57:57.110, Speaker B: All right, that looks good. I'm going under.
00:57:59.800 - 00:58:00.830, Speaker A: It. It.
00:58:10.240 - 00:58:29.440, Speaker B: There it is. I saw keystroke. I can pretty much guarantee the tests are failing right now. But honest technicality, that is the first live coding underwater.
00:58:31.700 - 00:58:35.110, Speaker A: They didn't work. It worked great.
00:58:36.120 - 00:58:37.700, Speaker B: Are your tests passing?
00:58:38.600 - 00:58:39.204, Speaker A: What?
00:58:39.322 - 00:58:40.820, Speaker B: Are your tests passing?
00:58:41.240 - 00:58:48.230, Speaker A: To be honest, I can't see the screen. I'll tap, like thrice. That's it.
00:58:49.160 - 00:58:50.230, Speaker B: All right, man.
00:58:50.560 - 00:58:51.068, Speaker A: It.
00:58:51.154 - 00:59:05.090, Speaker B: Tell the people. Give the people a send off.
00:59:06.180 - 00:59:45.340, Speaker A: Yeah, I think we can wrap this up. All right, guys, thanks for coming. I hope that you liked the underwater stream. Okay. I hope it wasn't too painful to watch. And we'll see you next week for the community call and in two weeks for the next live stream. My computer is doing weird shit, so I'm going to drag it out and end the stream.
00:59:45.340 - 00:59:49.310, Speaker A: If you got anything to say, Ben, please do.
00:59:49.920 - 00:59:54.170, Speaker B: Thanks for joining. And we'll get the resolution figured out next time. And.
