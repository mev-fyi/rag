00:00:02.890 - 00:00:38.300, Speaker A: Good evening everybody, I'm Sriram. I started the Eigen layer project two years back. Also used to be faculty member at the University of Washington, Seattle. In this talk, I'm going to talk about how we can use Eigen layer to augment the Ethereum rollup stack. What do we mean by that? So you look at the model or Ethereum stack. The core idea here is if you want to scale Ethereum, you can move computation off chain and then just settle those computations on chain. Now, of course, Starquire is one of the prime examples of a system like this.
00:00:38.300 - 00:01:18.930, Speaker A: This scales by offloading computation and memory. It actually scales the system and inherits security from Ethereum. But there are still many drawbacks in modular Ethereum today. The first one is that the data bandwidth of Ethereum is very limited. You can only write all the roll ups have to write their data to Ethereum. So this sets the data bandwidth as a common constraint for everybody. Ethereum's data bandwidth today is very low 80 limitation of modular Ethereum so when you have roll ups which want to talk to each other, they have to settle to Ethereum.
00:01:18.930 - 00:01:54.350, Speaker A: And Ethereum's finalization time is twelve minutes. So this puts a minimum delay or lag on interrollup communications. So this is another problem. Also. We today rely on centralized sequences for fast censorship resistance. The bridging between both fast bridging across rollups, as well as bridging from Ethereum to other chains leaves much to be desired. And finally, MEV management is a major issue for rollups.
00:01:54.350 - 00:02:43.018, Speaker A: Okay, so what's Eigen layer? Eigen layer is a mechanism for sharing Ethereum security to any new services that can then be built on top. The paradigm is Ethereum's at the base. Ethereum itself is secured by staking you lock a bunch of stake and promise that you're going to run the Ethereum protocol correctly. If you can take that same stake and make additional promises, additional credible commitments, then that's what we allow. In Eigen layer, you take your ETH and then make additional promises that you're going to run other software correctly with the risk that you lose your eth if you don't do it correctly. And when you do it, what happens is on the other side of this market are people building new services. Think of these like SaaS services software as a service, but decentralized SaaS services, we call them avs, actively validated services.
00:02:43.018 - 00:03:24.910, Speaker A: You can imagine Oracle's data availability bridges all kinds of other things. So what ionleader enables is takers to opt in and secure additional services. In addition to securing Ethereum itself, each avs contains an off chain container, like, think of it like a docker container that you can download and run for. Each of these services also contains an on chain contract which talks to the Eigen layer contracts. Eigen layer itself is just a system of smart contracts on Ethereum. So you have the on chain contract on which you can do registration, slashing, payment, all kinds of functionalities. But the core component of each avs is actually running in its container off chain.
00:03:24.910 - 00:04:16.094, Speaker A: So validators stake their ETH and then opt into new things. And these new things can be in the form of containers means arbitrary code that you can run on your node. Okay, so that's the paradigm. And what the paradigm is trying to do is to share the Ethereum staking and security beyond the core protocol that Ethereum has designed. So any of the downsides that we found earlier could potentially be addressed by building new avss that cater to these services. Okay, what do we mean by that? Can we take Eigen layer and then figure out how to augment the roll up stack? Augment the roll up stack to solve all the problems. For example, if the data bandwidth is low, maybe you can build fast high data bandwidth service.
00:04:16.094 - 00:04:53.366, Speaker A: We built one called Eigenda. But you might imagine that other people can build some of the other things that actually I'm going to lay out. You can have people create new MeV management solutions, you can create super fast settlement services, you can create decentralized sequencing, you can create low latency, bridging all kinds of new things. We are not going to build all of these things. We're just provocatively calling it Eigenx. But the idea is anybody can build these abs services that actually fix problems in the Ethereum landscape. So you can think of this as like adjunct or adjacent to the Ethereum landscape.
00:04:53.366 - 00:05:54.154, Speaker A: You can build new things that actually solve these core problems. Okay, so that's the core idea of Eigen layer is augmenting the Ethereum modular landscape by taking some of the core problems on data availability, mev settlement, sequencing, bridging, and providing it through the same stake on Eigen layer. Okay, so the rest of the talk is going to be, first I'll talk about Eigenda. It's a service that we've built, a data availability service run by Ethereum stakers. And then I'll briefly highlight what other applications can be built. Okay, so if you look at data availability, what is a data availability service? Whenever you're running a roll up, you want to publish the inputs or outputs of your computation into a common place where anybody can read it so that they can challenge you, they can continue the computation, all of these things. So what properties do we want from a data availability service? Number one, we want throughput, right? Particularly, we want the throughput of this system to scale with the number of nodes in the system.
00:05:54.154 - 00:06:36.502, Speaker A: The more the nodes in the system, the more the theoretical bandwidth that's available. We should be able to utilize all of it just to get a sense of numbers. In Ethereum, we have like 500,000 nodes validators, and each validator requires like two megabytes per second. So if you multiply these two things, we are talking about one terabytes per second as the potential theoretical bandwidth that's available on Ethereum. But we are operating at 80 orders of magnitude off. How do we make this better? It's possible to build these kinds of services that actually cut this slack. For example, Starquare's goal is actually reducing the cost basis of running computation on Ethereum.
00:06:36.502 - 00:07:09.090, Speaker A: And we also need to worry about the cost basis of writing data to Ethereum. And one of the things here is you want to make it low cost. And what's the theoretical bound on cost? You can imagine just writing data to AWS, just a single server. That would be the theoretical minimum. Today, what's happening on Ethereum is every node needs to download and store the data. So it is actually quite a bit higher than one node downloading the data. So can we make it like just two? X the cost of a single node downloading and storing data? Latency.
00:07:09.090 - 00:07:38.382, Speaker A: You want the system to work at low latency. You want it to be verifiable. What do we mean by verifiable? The system's executing and publishing the data in public. We want to make sure that other people can verify that the system is doing this thing by sampling the system. So we call it verifiability. And finally, we want customizability. Each data system may have its own, like erasure codes, its polynomial field that they're using.
00:07:38.382 - 00:08:02.226, Speaker A: You may want to use a different token for staking. You may want a different trade off between safety and liveness. All of these things. You want it to be permissionlessly customizable. And we built eigenda to potentially achieve all these properties. I say potentially because there's a gap between theoretical limits and what you can actually build. But the architecture permits achieving all these properties.
00:08:02.226 - 00:08:48.034, Speaker A: So how does it work? It's actually relatively simple. So the idea is Ethereum stakers opt in, and they promise to serve data on eigen layer, and they opt into this particular service called eigenda, the data availability service. So eigenda is all of these. Each stakers download the eigenda code base and run it off chain. But they also have a contract, just like any other. AbS has a contract on Ethereum, which somehow keeps sync with what's happening off chain. Okay, so normally when you have a sequencer in a roller, what it does is it collects all the transactions, orders it, and then finds the state update, maybe attaches a proof along with it, and then submits it to Ethereum.
00:08:48.034 - 00:09:14.630, Speaker A: So this is what you would be doing normally. But instead, what you do is you take the data. Take the data, the data blob, and then erasure code this data. So you take the data and then erasure code it, and then you create proofs that you have erasure coded it correctly. Imagine one node, I'm telling the node you're getting x one plus x three, some other node. I'm saying that you're getting x two plus x three. These two need to be consistent with each other.
00:09:14.630 - 00:09:47.910, Speaker A: How do they know that they are consistent with each other? I attach a proof that they are actually consistent with each other. So that's what happens with KZG polynomial commitments. So you take this data, you take this data and then encode it. And what happens is, when you encode this data, you don't blow it up too much. You're just increasing the redundancy a little bit. If the total file size was f after encoding it, the file size is just two times f, but split into smaller chunks. Now you take these smaller chunks and then send them to the eigen da nodes.
00:09:47.910 - 00:10:23.554, Speaker A: Take the chunks, send them to the eigen da nodes. These da nodes verify that they got the right chunk. How do they know? Using KZG polynomial commitments, they know they got the right chunk. They sign off on the header using BLS signatures, and then send these signatures back to the sequencer. The sequencer aggregates these signatures into a single signature. All that goes on to Ethereum through the Eigen da contracts is one aggregate signature, which contains the commitment to the data. That's it.
00:10:23.554 - 00:10:59.214, Speaker A: So now that this commitment is there on Ethereum, a roll up can prove to Ethereum that on Eigenda, the data has been stored without the data having to be returned to Ethereum. So that's the core idea, and that's how we get all these properties. I'm going to skip this slide. Maybe this is helpful. Yes. What do we get from this kind of a system? Ethereum's throughput today is 83. There is a roadmap over the next three to four years to get to dunk sharding, which will improve the data bandwidth to 1.3
00:10:59.214 - 00:11:26.854, Speaker A: megabytes per second. But like I mentioned, theoretical limit of throughput on Ethereum is actually much, much higher. And I canda already operates at ten megabytes per second. We have a roadmap. We want to scale this 1000 x over the next three years. Okay, we do this without increasing the node requirements. We are not doing the Salana way where we are saying, oh, nodes have a lot of bandwidth, so let's get all the high performance nodes and therefore scale the system.
00:11:26.854 - 00:11:45.626, Speaker A: No, we are scaling horizontally. Every node does a little bit. Together they do a lot. So the strength is coming, the total bandwidth is coming from. Remember in the previous picture, every node was downloading a little bit, so that's how we're getting the scaling. Okay, so that's the core idea. Eigenda is also very cheap.
00:11:45.626 - 00:12:06.642, Speaker A: There's all kinds of really interesting things on eigenda. For example, you can reserve your bandwidth for your roll up on eigenda. Every system today is operating on congestion. In Ethereum. You don't know what the price is that you're going to pay. This is not a way to operate a business. It's unsure what your cost basis is.
00:12:06.642 - 00:12:30.826, Speaker A: So on ignda is very similar to AWS. You reserve how much data bandwidth you want, just like you reserve an AWS instance, you reserve that you want out of this ten mbps. You want 0.1 mbps just for your roll up. You can do that, and you're guaranteed that at the same price basis for your next year. We are able to do these things because we have an abundance of throughput, rather than a scarcity of throughput. And I think that changes the whole dynamics here.
00:12:30.826 - 00:13:14.934, Speaker A: Okay. It's not only for data availability that this technology is useful, it's useful for fixing all kinds of other things. How do you do decentralized sequencing for a rollup? You could have eigen layer nodes which opt in to run decentralized sequencing across many, many rollups. Espresso is actually building this already on Ethereum. Espresso is a project by Benfish and others who are actually doing something really interesting. So this is an example of how Eigen layer can complement the modular landscape by finding things that are missing and then enabling other people to build it. Similarly, one of the other things that's super important is if you're building a roll up, you want to give users instant confirmation or near instant confirmation.
00:13:14.934 - 00:13:56.258, Speaker A: You don't want to wait for twelve minutes for Ethereum to settle. If you want to give users instant confirmation, what you can do is you can actually get enough each stakers to opt in to a settlement layer. And what you do is you take your stark proof and send it to these nodes they have staked in, theoretically, potentially the same amount that's staked on Ethereum. You get $20 billion worth of economic security instantly, and you can send that certificate to your users. So you can do that on Eigen layer. So essentially it enables you to get super fast settlement by first writing the proof to these nodes. They check that the proof is right and these nodes are then going to write it to Ethereum.
00:13:56.258 - 00:14:19.338, Speaker A: So this is another super interesting thing. We don't have anybody building this right now. So if any of you are interested, there's something super interesting. Bridges you want to move. Imagine there are two roll ups that want to talk to each other. Pre settlement roll up. Hasn't it settled to Ethereum? Maybe it's an optimistic roll up that takes seven days, or it's a stark roll up that takes a few hours to aggregate the proofs and write it to Ethereum.
00:14:19.338 - 00:15:11.918, Speaker A: You want to still exchange information and talk to each other in the intervening while. If you have enough economic security, if you have enough nodes from Eigen layer opted in to Eigen Bridge, kind of a bridging service, you could then start exchanging information not only across roll ups, but even across other l ones. You can have these nodes run live clans of other l ones and then submit those proofs to Ethereum. Similarly for MEV management, which is basically just how to constrain the transaction ordering. You can build all kinds of interesting services, event driven actions. You can build partial block auctions, threshold cryptography, block space futures, all kinds of interesting things. Just to summarize, you have the modular Ethereum roadmap, where there is potential, which is because you have these off chain systems which can offload state and computation, you get a lot of benefits.
00:15:11.918 - 00:15:46.438, Speaker A: But there are limitations. Today the data bandwidth is small. Finalization time all the problems that I laid out earlier, you can start solving each of them by using Eigen layer. You can solve the data bandwidth problem Eigen Dai mentioned. You can solve the finalization problem by using settlement layers. You can solve the centralized sequencer problem by using decentralized sequencers, bridging problem by using lightline bridges, and mev management by building modular modules which actually solve for different kinds of ordering preferences. So Eigen layer is a great complement to the modular Ethereum roadmap.
00:15:46.438 - 00:16:43.798, Speaker A: And as you build interesting rollups, be it gaming or any other things, you might want to consider what you can take advantage of from Eigen layer. Just an advocate of picture here. By absorbing the trust from Ethereum through staking, Eigen layer can actually provide a bunch of different services that complement each other and complement the Ethereum roadmap. With that, I finish my talk. If any of you are interested in building some of these cool features, do ping us at our Twitter handle at eigen layer. Thank you. Yeah, so the question is, does Chad security imply accumulation of systemic risk if it's not done well? Yes, it can.
00:16:43.798 - 00:17:18.818, Speaker A: If it is done well, it need not. And one way to think about it is Ethereum itself. Forget Eigen layer, Ethereum itself is a system for shared security. Why am I saying this? Every application before Ethereum, when you want to build one DAP, you have to build your own chain. Ethereum aggregated all of these applications into a common security base, the EId staking base, and they supply the security to all these different applications. So shared security is actually like strength in numbers, strength stronger together. But you need to pay attention to how you're building it in order to actually make it work well.
00:17:18.818 - 00:17:36.490, Speaker A: So I think we are doing our best in actually figuring out how to do this best. But thanks for the question. Any other questions? No? If not, thank you so much. Thank you.
