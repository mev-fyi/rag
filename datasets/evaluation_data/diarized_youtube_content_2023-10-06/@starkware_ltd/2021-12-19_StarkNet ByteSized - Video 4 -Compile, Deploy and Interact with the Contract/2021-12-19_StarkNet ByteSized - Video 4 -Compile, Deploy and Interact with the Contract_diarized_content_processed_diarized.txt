00:00:05.750 - 00:00:10.634, Speaker A: Now that we've completed our brief contract overview, let's see how to compile and.
00:00:10.672 - 00:00:12.700, Speaker B: Deploy it to the Startnet system.
00:00:13.470 - 00:00:45.654, Speaker A: First things first, we'll use our startnet compiled CLI in order to compile our contract code. Startnet compile receives as input our Cairo code for the contract and outputs two files. The first are our contract compiled JSON, which is a representation of our compiled code, and the contract ABI which we will later use in order to interact with the contract's functions. Now we're done compiling our code, we'll use the Starknet deploy CLI in order.
00:00:45.692 - 00:00:47.640, Speaker B: To send it to the Starknet system.
00:00:48.250 - 00:00:58.746, Speaker A: This command receives us input our compiled code and if successful should output the following two things we want to note here. The first is our contract address which.
00:00:58.768 - 00:01:00.874, Speaker B: We'Ll want to save for future use.
00:01:01.072 - 00:01:54.460, Speaker A: And a transaction id which we can use to track our transaction in the starknet system. In this case, the transaction that is deploying our contract using the starknet get transaction CLI, we can input our transaction id in order to track the status of the deployment transaction in the system. So with this we can see that the transaction was already received. We have our contract address corresponding to what we've seen earlier and we can now start interacting with our contract. Quick reminder, our contract supports two external functions, get balance and increase balance. Let's show how to interact with them using Starknet call and starknet invoke. We'll start by using Starknet call to call our getbalance function.
00:01:54.460 - 00:02:19.650, Speaker A: Note that this requires the contract ABI which we produced when we compiled our code, as well as the contract address which we received when we've deployed the contract to the system. Providing these two with get balance should return the balance currently stored on the contract, which by default is zero. Next, we'll use Starknet invoke.
00:02:22.250 - 00:02:22.854, Speaker B: With our.
00:02:22.892 - 00:02:46.906, Speaker A: Contract address in order to increase the given balance by 1000. The difference between call and invoke in this sense is the same difference as with external and view directives. Using startnet call allows us to use functions defined on the contract without changing the state of the contract or any.
00:02:46.928 - 00:02:48.518, Speaker B: Of its storage variables.
00:02:48.694 - 00:03:17.110, Speaker A: While using Starnet invoke indicates that I intend to use an action that explicitly is going to change my contract state. In this case, Darknet invoke with increased balance will change the storage variable balance by 1000. Again, we have an indication that this transaction was sent to the system and we have our transaction id. We're going to copy it over and now will be a great time to show you our block explorer.
00:03:18.490 - 00:03:22.642, Speaker B: This is the Voyager block explorer developed by Nethermind.
00:03:22.786 - 00:03:28.774, Speaker A: It allows us to track any transaction sent to the Starknet planets Alpha. In this case, we can just paste.
00:03:28.822 - 00:03:34.166, Speaker B: Our transaction id here in order to find the information about our invoke transaction.
00:03:34.278 - 00:03:36.634, Speaker A: Which increased our balance by 1000.
00:03:36.832 - 00:03:38.474, Speaker B: Another way we can verify that this.
00:03:38.512 - 00:03:49.540, Speaker A: Has succeeded is by using the get balance function again, and this time, instead of zero, we expect to see that our current balance is 1000.
