00:00:00.170 - 00:00:27.910, Speaker A: Okay, so welcome to the community call. I'm glad to see a lot of people. There will be shard labs talking, and then we'll have a number of questions we'll answer. So you'll be able to ask your questions to Shard labs, of course. And then we'll be here to ask more general questions about Starknet. So feel free to ask your questions in the dedicated channel. And without further ado, if you can present, that would be wonderful.
00:00:30.730 - 00:00:58.640, Speaker B: All right. Hello, everyone. It's a pleasure to be here as part of Shardlabs. And of course, thanks to Starknet team for the invitation. My name is Thiago and I'm here today together with Fabian to talk about one of the developments that we are doing for Starknet on the tooling side. But first, let me just start by giving a quick introduction to Shardlabs. So, we're a blockchain specialized company.
00:00:58.640 - 00:01:58.660, Speaker B: Our core skills are around protocol development, such as bridges between chains, client forks and upgrades. But we also work with some DAP development and overall running blockchain infrastructure. And so why are we here today? We're here to talk about our Devnet and Hardnet plugin. Our main goal with these is to provide tooling, which allows developers to use a more familiar implementation for developing and deploying smart contracts on Starknet. And with this basically enabling you to quickly fire up your personal blockchain which you can use to run tests, execute commands, inspect the states while controlling how the chain operates, where Fabian will present.
00:02:01.190 - 00:02:02.260, Speaker C: Take it away.
00:02:02.710 - 00:02:06.402, Speaker D: Hi, thank you, thiago. My name is Fabian.
00:02:06.546 - 00:02:12.840, Speaker C: I will now share my screen where I will, then I'll start.
00:02:14.410 - 00:02:33.546, Speaker D: So I'm currently on the first slide showing you the title and the subtitle. Let's move on to the second slide which informs you about the assumptions this presentation makes. So, first of all, it is assumed.
00:02:33.578 - 00:02:36.942, Speaker C: That you have used Starknet command line.
00:02:36.996 - 00:02:51.890, Speaker D: Interface and that you know how to create the hardhead project with typescript support. Now, to install the plugin, it's just regular NPM installation.
00:02:54.710 - 00:02:55.958, Speaker C: And to finish the.
00:02:56.044 - 00:03:01.906, Speaker D: Installation, you'll need to include this import statement into your hardhead config file.
00:03:01.938 - 00:03:06.182, Speaker C: Now, I know it's a rather long.
00:03:06.236 - 00:03:12.090, Speaker D: Name, but I like to think of it as the longer the name, the better the plugin.
00:03:12.830 - 00:03:20.358, Speaker C: So after installing the plugin, two new hardhat tasks appear.
00:03:20.454 - 00:03:36.626, Speaker D: You can check them out with NPX hardhat, or if you have hardhat global installed, which is what this tutorial will assume, you can just use the abbreviation. So these two tasks introduced by the.
00:03:36.648 - 00:03:40.686, Speaker C: Plugin are Darknet compile and Starknet deploy.
00:03:40.798 - 00:04:10.446, Speaker D: Which obviously compile and deploy Starknet contracts. So the first of these two tasks is Starknet compile. Its main benefit is that. Okay, now I'm on the slide showing you the Starknet compile ask first bit. It shows that the main benefit of.
00:04:10.468 - 00:04:13.166, Speaker C: This task is that instead of what.
00:04:13.188 - 00:04:16.510, Speaker D: You would do with Starknet command line.
00:04:16.580 - 00:04:20.990, Speaker C: Tool can be achieved by simply typing.
00:04:21.410 - 00:04:25.010, Speaker D: The command in the lower part of the slide.
00:04:25.910 - 00:04:30.882, Speaker C: And in fact, instead of specifying the.
00:04:30.936 - 00:05:08.350, Speaker D: File path, the file name, you can just target all the contracts by not providing any path. And artifact generation scheme is the ordinary hardhead procedure. Like the sources structure is mirrored into your artifacts directory. So now I'm heading to the next slide, talking about Starknet deploy task.
00:05:08.850 - 00:05:11.886, Speaker C: So this second task introduced by the.
00:05:11.908 - 00:05:15.042, Speaker D: Plugin, well, its main benefit is that.
00:05:15.176 - 00:05:20.194, Speaker C: Instead of typing this long command in.
00:05:20.232 - 00:05:24.142, Speaker D: Starknet Cli, you will type this long command in the plugin.
00:05:24.206 - 00:05:26.694, Speaker C: Now, it turns out it's not much.
00:05:26.732 - 00:05:29.602, Speaker D: Of an improvement considering just the length.
00:05:29.746 - 00:05:34.262, Speaker C: But notice how the path that we.
00:05:34.316 - 00:05:46.986, Speaker D: Specify in the plugin section, it can in fact be either a file or a directory, or it can be multiple paths. And if for any reason you want.
00:05:47.008 - 00:05:50.506, Speaker C: To deploy all of your contracts, you.
00:05:50.528 - 00:06:14.930, Speaker D: Can just type Hhnet deploy and of course provide to which network you are deploying and all your JSON files corresponding to Cairo sources will be deployed. Now I'm heading to the next slide with the title interacting with Starknet Devnet.
00:06:15.290 - 00:06:34.714, Speaker C: So you may have noticed that it takes some time for transactions to be confirmed on the alpha Testnet. So to speed up your testing, you.
00:06:34.752 - 00:06:46.190, Speaker D: May want to use Starknet Devnet tool, also a tool developed by Us shardlabs which is a local version of Testnet.
00:06:47.810 - 00:06:52.560, Speaker A: If I can interrupt just a second. Can you specify again on which slide you are please?
00:06:54.310 - 00:06:58.660, Speaker D: It's the slide number eight.
00:06:59.350 - 00:07:00.980, Speaker A: Wonderful, thank you.
00:07:02.150 - 00:07:06.326, Speaker C: Actually I was just going from the.
00:07:06.348 - 00:07:08.022, Speaker D: Slide seven to slide eight.
00:07:08.076 - 00:07:08.680, Speaker C: Yeah.
00:07:13.050 - 00:07:24.460, Speaker D: Okay, now on slide eight. Yeah, like the stocknet Devnet.
00:07:27.200 - 00:07:28.112, Speaker C: It'S an.
00:07:28.246 - 00:08:18.492, Speaker D: Ordinary pip package which can be installed with pip install which adds this new command starnet Devnet. So if you run it, you get local instance of the devnet with the default settings of listening on localhost with the port 5000. And to be able to interact with the devnet through the plugin, you just need to update your hardhead config file with this little code snippet in the bottom of the screen. So now I'm heading to slide number nine, which shows you exactly which command.
00:08:18.556 - 00:08:22.310, Speaker C: You can interact with the devnet, so.
00:08:23.000 - 00:08:36.744, Speaker D: You can interact with it both through the starknet command line interface and through hard yet with the plugin. So you would need to specify either.
00:08:36.782 - 00:08:41.236, Speaker C: The gateway URL or since now you've.
00:08:41.268 - 00:09:04.560, Speaker D: Updated your hardhead config file in the previous slide, you can use the network with the name Devnet. Now heading to slide number ten we're going to discuss or I'm going to show you how this plugin affects the hardhead testing ability.
00:09:06.100 - 00:09:11.232, Speaker C: So this plugin doesn't really introduce the.
00:09:11.286 - 00:09:22.016, Speaker D: Test task itself, it's already natively present with hardhead. But what it does is that it allows you to interact with your starknet.
00:09:22.048 - 00:09:26.920, Speaker C: Contracts in hardhead scripts and in mocha tests.
00:09:27.260 - 00:09:40.444, Speaker D: So let's inspect the mocha testing case. But of course to be able to use it the devnet in the Mocha test, you also need to update your.
00:09:40.482 - 00:09:46.152, Speaker C: Hardhead config with the Mocha entry stating.
00:09:46.216 - 00:09:48.716, Speaker D: That you want the devnet to be.
00:09:48.738 - 00:09:51.760, Speaker C: Used as the Starknet network.
00:09:54.660 - 00:10:11.184, Speaker D: And now I headed to the next slide. I think it's number eleven with the title deployment and reusing of contracts. So installing the plugin made this starknet.
00:10:11.232 - 00:10:14.504, Speaker C: Object importable from Hardhat and you can.
00:10:14.542 - 00:10:58.832, Speaker D: Use its contract factory paradigm. Either deploy new instances or reuse the old instances. You will just need to specify the name of your contract, which is the name of file without the Cairo extension. Now heading to slide twelve about handling storage variables with this framework. So let's see how storage variables are handled. Assume these parts of a contract. So it's basically balanced storage variable like in the official tutorial.
00:10:58.896 - 00:11:04.408, Speaker C: That explains, that explains starknet interaction and.
00:11:04.494 - 00:11:20.680, Speaker D: We have the increase function and get function for the balance variable. On the next slide we can see how one would interact with this contract.
00:11:20.760 - 00:11:25.292, Speaker C: First using the command line interface, which.
00:11:25.346 - 00:12:19.970, Speaker D: Requires providing the ABI, the gateway URL, and you provide the inputs in a non structured manner like you just sequentially type them. Okay, so in this case it's just one input, the number ten and hardhead if you have the plugin enabled. First of all, notice how function and argument names are the same as in the source file that we defined in the previous slide. And also notice how the result, the res variable is mapped to balance, which is something you will probably want to do if you are using the plugin. Also, since version 30, the plugin relies on.
00:12:21.700 - 00:12:27.436, Speaker C: Big int type because Cairo's felt.
00:12:27.548 - 00:12:35.700, Speaker D: Type, which is the default type, can be too big for JavaScript ordinary number.
00:12:35.770 - 00:12:41.412, Speaker C: Type and this can cause some precision issues.
00:12:41.546 - 00:13:38.792, Speaker D: So all function outputs are the result of either invoking or calling will have their output in the begin form. Also notice how this code snippet this example is using the syntactic sugar of just appending the n after the number, which is available since eCMaScript version 2020. So on the next slide it is explained how signed transactions are handled. So in case your function requires, I don't know, the public key or it checks the transaction signature, you would use it like this. You would specify the signature as an.
00:13:38.846 - 00:13:44.104, Speaker C: Array, preferably of either strings or big.
00:13:44.142 - 00:13:46.232, Speaker D: Int, and you would pass it in.
00:13:46.286 - 00:13:53.000, Speaker C: As an extra argument after the actual function argument.
00:13:55.600 - 00:14:08.048, Speaker D: The next slide explains how arrays are handled, so assume a contract with this function called sumarray, which as its name.
00:14:08.134 - 00:14:17.024, Speaker C: Suggests it sums the elements of an array. This is how it would be handled.
00:14:17.072 - 00:14:39.848, Speaker D: In darknet command line tool. So you would first specify in the input its length and then its element. And if you're using the hardhead plugin then you can just provide the area itself. The implementation takes care of the length.
00:14:39.944 - 00:14:43.596, Speaker C: So you just need to provide the.
00:14:43.618 - 00:14:46.252, Speaker D: Elements and once again the result is.
00:14:46.306 - 00:14:49.340, Speaker C: In the type of begint.
00:14:53.620 - 00:15:10.644, Speaker D: Next slide deals with tuples and structs. So assume that you have a contract with struct called points with felt members x and y, and you have a function which sums a tuple of two.
00:15:10.682 - 00:15:18.040, Speaker C: Points and it returns the result as tuple of two felts.
00:15:23.020 - 00:15:34.184, Speaker D: On the next slide we can see the difference in the usage of this function in starknet command line tool and in hardhead with the plugin enabled.
00:15:34.232 - 00:15:46.768, Speaker C: So once again we can see that providing the numbers themselves is more well.
00:15:46.854 - 00:16:15.556, Speaker D: Structured and hardhead case. So you specify the member the members of the struct by their name x and y. And also since Javascript does not enable tuple support, so there is no native tuple support for this purpose.
00:16:15.748 - 00:16:23.084, Speaker C: Javascript arrays are utilized and this have.
00:16:23.122 - 00:16:49.056, Speaker D: Been the main use cases with which this plugin and devnet can be helpful. So it's time for you to ask questions or require additional clarification if I skipped anything or did not explain something properly. Thank you for your attention.
00:16:49.248 - 00:17:13.630, Speaker A: Wonderful. Thank you Fabian. So I see there are a lot of questions. I was following the presentation so I didn't see the questions, so I'm going to go through them. If you have questions, please write them in the channel. Fabian, if you see questions and want to address them directly, go ahead and do so. Otherwise I will ask the questions while I go through them.
00:17:14.480 - 00:18:07.276, Speaker D: Okay, I already see one question from elameno. I can answer it. So he asks, does the devnet connect to l one gurley or something? That's a very good question. So just last week an issue on our GitHub repository was raised concerning this same thing. So this is a feature that we are planning on adding. But currently, no, there is no l one l two connection between the Devnet or Ethereum, either main net or Testnet. But yes, we are planning on adding that.
00:18:07.276 - 00:18:10.720, Speaker D: If you have any architectural suggestions.
00:18:14.180 - 00:18:19.616, Speaker C: You can find that issue and suggest it there.
00:18:19.718 - 00:18:30.032, Speaker D: In fact, I will try to find this issue and I will list it in the chat.
00:18:30.176 - 00:18:31.750, Speaker C: Okay, here it is.
00:18:33.400 - 00:18:50.330, Speaker A: Thank you. I saw somebody raised his hand and then lower it. So if you want to ask another question, you can either write it or you can ask here in the. Okay. Oh yeah, you're here. Sorry. Let's go.
00:18:51.920 - 00:19:13.636, Speaker E: Thank you. Thank you Fabian, for the presentation. It was very interesting. I was wondering, when you do the invocations of methods on the smart contract, do you actually call the command line command like it was on the slide, or do you go directly through some kind of python library or.
00:19:13.658 - 00:20:07.830, Speaker D: No, how do you do? That's a good question. So our architectural principle is that we rely on Docker. So this plugin, if this question is about the plugin. Yes, I think it is. So basically the plugin runs Docker container which has the command line tools installed. So you need to have Docker enabled, which makes it a bit more difficult, for an example, windows users to use the plugin. But still it's possible.
00:20:07.830 - 00:20:12.550, Speaker D: Does this answer your question?
00:20:15.340 - 00:20:23.400, Speaker E: Yes. So you are basically calling the command line at every function call from Javascript?
00:20:23.820 - 00:20:47.730, Speaker D: Yes, that is correct. There are specialized NPM libraries. Exactly. For interacting with the user's Docker engine. So we are relying on these.
00:20:51.410 - 00:20:51.982, Speaker A: Thank you.
00:20:52.036 - 00:20:59.442, Speaker E: So in principle you don't need to install Starknet, it would be in the Docker image automatically, right?
00:20:59.496 - 00:21:09.654, Speaker D: Yes, exactly. You don't even have to install Starknet or Cairoing. Okay, cool, thank you.
00:21:09.772 - 00:21:23.050, Speaker A: Well, thank you for your question. Thank you for your answer. There's another question Francisco Chicon is asking. Do you think it will be possible to add forking from the live network?
00:21:25.390 - 00:21:29.370, Speaker C: Well, that's a bit more complex issue.
00:21:29.440 - 00:21:52.900, Speaker D: If I may notice that we haven't really considered this. This is an interesting proposal and I invite you to write an issue on our GitHub so that we can continue that discussion there.
00:21:56.310 - 00:22:01.880, Speaker A: Also, wouldn't you need a full node client in order to do that?
00:22:04.250 - 00:22:11.340, Speaker D: Probably, yeah. Yes, that is a good observation. Thank you.
00:22:12.350 - 00:22:49.290, Speaker A: Okay, so a quick aside on full nodes. So currently, all the interactions you will have with Starknet are through services that we, as Starkware, are providing. But we aim to change that and to have various full node clients available that you can run as part of your infra. And these efforts are ongoing, and we are targeting end of year to have something available that you can run. So once you have this, maybe this will open the door for networking.
00:22:49.470 - 00:22:52.310, Speaker D: Okay, thanks for the suggestion.
00:22:54.170 - 00:23:16.160, Speaker A: Okay. I don't know if there are other questions for Shard labs. I see a lot of discussions regarding Poap. I want to say a few words on that a bit later, but while we have Fabian and Thiago from Shard Labs, does anyone want to contribute or ask something else?
00:23:21.960 - 00:23:22.710, Speaker C: No?
00:23:23.080 - 00:24:00.588, Speaker A: Well, feel free to. I mean, Fabian and Thiago are not going anywhere. They're part of our discord, and they're here quite often. So if you have more questions, don't hesitate and ask them later on, and I'm sure they'll answer. And I want to say a big thanks to you guys first for presenting, because it's not always easy to show what you're working on, especially when the community call doesn't work perfectly. And mostly, I want to say thank you for what you guys are building. It's.
00:24:00.588 - 00:24:10.610, Speaker A: It's tooling like that that pushes the community forward, and I can't wait to see all the great apps that will be enabled by what you are doing. So, a big thanks to you guys.
00:24:12.660 - 00:24:13.650, Speaker B: Thank you.
00:24:14.900 - 00:24:47.330, Speaker A: And with that, I think we can move to Q A. So, like last time, if you guys have questions revolving around Starknet that you want to ask and that we can answer, now is the time. So I've noted a few questions. I'm joined today by Leron. Leron, do you want to introduce yourself quickly?
00:24:48.260 - 00:24:49.056, Speaker C: Sure.
00:24:49.238 - 00:25:16.890, Speaker F: Hi, guys. I'm Leron. I'm a product and ecosystem manager here. I'm doing a lot of work with trying to get protocols onboarded onto Starknet. Sorry. Mainly right now and getting ready for launch as well, which should be happening end of November. So I'm hoping I can answer some questions today that you may have.
00:25:18.380 - 00:25:19.396, Speaker A: Wonderful.
00:25:19.588 - 00:25:21.468, Speaker C: Yeah. Thank you.
00:25:21.554 - 00:25:49.620, Speaker A: So, actually, there are three topics that I think, or at least two that I think we could cover. The first one is, and I've seen this request a few times, was, can we talk a bit about data availability? Can we define a bit for the people who are not familiar with it? What is data availability? And what are the different options and trade offs we face when building Starknet?
00:25:51.400 - 00:26:22.876, Speaker F: Okay, so let me just take a step back, I'll explain it. I want everybody in the call to be able to understand this. So if I'm not clear, then please just raise your hand and tell me. I. E like the audience of my answer is not a blockchain researcher who's been reading white papers for the past five years. It's really just somebody, a hobbyist who's just joining this call. So we generate these stark proofs.
00:26:22.876 - 00:27:00.184, Speaker F: We have the zero knowledge roll up which does this fancy cryptography generates this proof, which we then send to Ethereum L1. Now the problem is, if we would just send this proof to Ethereum, Ethereum would know that the state transition that happened on Starknet was valid. I. E. Moving from state a to state b would be great, but Ethereum wouldn't know what state B is. So we would have this proof of computational integrity, but we wouldn't know what the state is. So that's where this whole category of data availability comes.
00:27:00.184 - 00:28:02.028, Speaker F: There are basically two things we need to tell Ethereum. The first thing is we have this valid proof, which the stark proof gives us. And the second thing is state availability, telling us we know that the new state is x. We know that LFG moon has 100 USDC now, whatever. And the problem is, this is expensive, because if you think about it, the whole idea of generating zero knowledge proofs is that verifying them is exponentially smaller than the number of transactions that are contained within them. So we have tremendous gas savings with that first half with the proof, but we don't have gas savings with the second half with the data availability, because we still need to tell Ethereum all the changes to the state that happened. So there are two basic approaches.
00:28:02.028 - 00:28:56.560, Speaker F: Well, three, let's say three basic approaches to solving this. The first one is validium, and validium comes and says, let's keep this data availability off chain, we won't send it to Ethereum. The advantage of this now is tremendous gas savings, because all of this data availability is not to be sought on chain. The big disadvantage of this is now that you have a somewhat centralized authority controlling this tree of the new states. And basically with every single time that we submit a proof now we also submit an approval from this, what we call a data availability committee, saying that the root of this tree, which summarizes all of these states, is indeed valid. So that's the validium approach, immutable and sorre. Use that right now on Starkx.
00:28:56.560 - 00:29:37.420, Speaker F: And then the other extreme is to say, no, we are going to store all of the data available in on chain. And this is currently what Dydx do, and it has its costs, but there are efficiencies that you can include here. I. E. If your balance does not change from proof to proof, because you're not actively trading, you're not actively interacting with the network, then we don't need to send any data for you. In that proof, we can assume that you've stayed the same. So basically all we need to do is send date differences to Ethereum.
00:29:37.420 - 00:29:41.496, Speaker F: Do you want to add something there? Go ahead.
00:29:41.538 - 00:30:35.120, Speaker A: Yeah, I wanted to add something here also. When you send this data to Ethereum, one cool thing that you still get is that you just need to update the state, but you don't need to update all the things that happened during that state. So what I wanted to point out is that basically if a user does 1000 transaction, you only need to update really his balance, right. You don't need to make 1000 updates. And this is aside from just executing the transaction, even for storing the transaction, you don't have to store 1000 things, you just store one thing, which is his updated balance. So that's already a good thing, but obviously not enough compared to validium. Yeah, I just wanted to add that.
00:30:35.270 - 00:31:30.636, Speaker F: That's a good thing to add and actually some trivia for maybe those people who are following here. DyDX is using on chain data availability. So the terms are terrible in the industry, but that's called a zero knowledge roll up. And then the other extreme is like immutable and Sorre are using validium, but what we've seen now is DyDX can actually have lower gas per transaction because of what Andre was saying. If most of the trades are done by market makers, and you only need to send the difference in the state. Let's say I'm doing 80% of the volume of DyDX for each proof. We only need to say that my balance was 100,000 and now 200,000 and we're only touching my one self, even I'm doing 80% of the transaction for 80% of the transactions.
00:31:30.636 - 00:32:09.740, Speaker F: And then the other cool thing that we're developing, that should be ready. I don't want to give, let's say January on Starknet is called volition. And volition basically comes and says that each user at the transaction level is able to decide whether they want to store their data on chain or off chain. And I want to speak about this for 1 minute. There are advantages both ways. So obviously the main advantage is cost. If you store your data off chain with the data availability committee, the costs are basically zero, negligible.
00:32:09.740 - 00:33:05.964, Speaker F: But the other thing is actually there are some users who are very ideologically aligned with decentralization, but they want to store the data off chain. And the reason is that they don't want to give away the trading secrets to other people. So if you're a very active high frequency trader on diversify or on some sort of audit book exchange or perpetuals exchange, and you don't want to actually reveal your transaction history to other people because you don't want to give away your trade strategies, then you prefer to use this data availability committee to use validium. So those are the two approaches. If I summarize validium, the data availability is off chain, ZK roll up the data availability is on chain and volition. It's up to the user's volition at the transaction level to choose whether it's on chain or off chain. And basically, if I speak for 20 more seconds on this, what's happening is you have two trees.
00:33:05.964 - 00:33:17.204, Speaker F: You have the one tree that's stored with the data availability committee and one tree that's stored on chain. And at your volition, you can choose which tree you want your node to be on and you can change that.
00:33:17.242 - 00:33:17.830, Speaker C: Even.
00:33:21.720 - 00:33:33.610, Speaker A: So, this means that volition is not something that you would have. It's not a choice from the app builder, but really from the user when he is making his transaction, right?
00:33:34.700 - 00:33:49.900, Speaker F: Correct. Now, it might be that certain apps will opt for default data availability for their apps, but it will be up to the user's decision.
00:33:51.700 - 00:34:38.510, Speaker A: It's interesting, really curious how the user experience would turn out. Is that because interacting with web free apps is already something that is kind of an adventure, especially for a non custom user? So now we're just throwing one more parameter in the mix. I'm really curious to see how designers and DAP builders will evolve with that, but I think it's better to have a choice rather than being coerced into state of affair. And we'll see how apps give choices or not to their user, or how they present the default and things like that. It's going to be an interesting design space.
00:34:39.120 - 00:34:39.964, Speaker C: Yeah.
00:34:40.162 - 00:36:07.976, Speaker A: Okay, thanks Laurel. I don't know if there are questions regarding data availability, but the big takeout for me is volition beginning of January, some kind of volition. Okay, and now there were no further question on the start chat. So now the second question was, what are your current updated plans for decentralization on road to universe? Since the blog post, the roadmap the road to Starknet permissionless network we've presented, I think it was over a year ago or something like how are we progressing on that front? So maybe I can say a few things and then you can comment later on. But basically the road to Starknet will be in many steps. So we talked about decentralization mostly in that blog post. So there were three steps, which was planet, constellation and universe, if I'm not mistaken, planets being single app roll ups, right? So applications with which you can interact in a zero knowledge mode, be it validium or be it ZK roll up.
00:36:07.976 - 00:36:49.560, Speaker A: But that would hold host a single app and that's more or less what was happening with Uidx and that is what was available on Starknet. On Testnet back in August you could build a Dap on Starknet, but it couldn't really interact with other apps. The second step was constellation. Constellation being a starknet network where you can interact with other Dapps and so you would get composability. And this we reached at the beginning of September. And now you can write smart contracts that interact with each other in Starknet. The third step was universe.
00:36:49.560 - 00:37:44.280, Speaker A: Universe being Starknet network where anyone can become a validator, approver, a sequencer. So basically a decentralized network that is fully decentralized and permissionless. And you have to distinguish here a bit of there are two different roadmaps here. There's one that is really revolving about the capacity of the network itself. So what can you do with Starknet smart contract, what kind of functionality you can have? And that's more the topic of the two first steps, right, what you can do with your smart contract and how you can interact with the others. The third step of the roadmap revolves more around network issues. How do you structure your l two so that it's censorship resistant, so that people can interact with it seamlessly.
00:37:44.280 - 00:39:19.192, Speaker A: Alpha on main net is right now a big test and the big rollout is constellation. It's a way to try and have computation done on an l two secured by ll one. Thanks to mathematic principles, we are still working on the decentralization part. We are currently studying various designs, various consensus algorithm, wondering how do you separate the different roles in the network? So for example, you may be aware that there is one role which is called the prover, which is the computer, or the participant, which is in charge of gathering function transaction payloads and executing them and generating a proof. There's another role we distinguish, which is the sequencer, which is the entity that will choose the transaction that go into the proof and order them. And we're still figuring out are these different roles, how do you structure them, how do you make sure that both are safe? And then there's leader, elections and all of these topics that we're tackling right now. We aim at sharing all these documents as soon as we can so that we can be transparent in this process and get your input because it's very valuable to that effect.
00:39:19.192 - 00:39:58.272, Speaker A: I want to say that we're working on rolling out this week Starknet Shaman, which will be a new forum where we'll discuss all of these topics regarding the network. So architecture, engineering and design of Starknet as well as provide support for the people building on Starknet. So that's what I would say for decentralization. For now we're testing the mathematics engine and we need to work more on the decentralization part. But it's the focus of our efforts right now. I don't know if you want to add something or correct something, say Leron.
00:39:58.336 - 00:40:58.404, Speaker F: Maybe nothing to correct. I think I would just add that the task of decentralizing sequences is not trivial. It's very different to decentralizing miners on l one. On l one you can just submit your transaction, have a transaction fee, and then the miners can just sort by the transactions of the highest transaction fees and then go and mine. But once you have a sequencer feeding transactions into approver, it gets a lot more complicated because there are checks, basically like checks that you need to do before you generate a proof, which you don't want to have a situation where there's just a race to generate the proof. You want to have it more, some other consensus mechanism. Everybody else, the whole space is struggling with this method.
00:40:58.404 - 00:41:19.310, Speaker F: We have obviously in depth discussions and progressing on that space. But I'm just saying that I think to Henri's point with releasing Alpha to Mainnet, the main things here are just testing the pipelines before decentralization. That's what I would add.
00:41:19.680 - 00:43:04.144, Speaker A: I think another interesting thing that we're currently tackling is, I would say the cinematics of the roles of each participants in the network in the sense that for example, what does it mean to be a full node in Starknet? For example like say starknet runs for two years and then after two years you want to join the network as a full node. You can take all the state diffs and you can verify all the proofs of execution and then catch up with the network pretty quickly, right? You just have to verify the proofs, update the state it's fine. And now you are up to date with two years of execution. But what happens during the time resolution between the last time a batch was proved to Ethereum? Your current execution time? Right. How do you catch up with state and state has not been proven yet, so one big parameter will be the frequency of proofs for sure. But still, like how do you as a full node match up to this? Do you solve the issue that you need to have a big state and store it or execute it? It gets a bit blurry when you start to think about the different roles and capacities of these machines and how you can also use consensus to distribute roles better. But what's really interesting to me is that these are new primitives that you're not really accustomed to in the blockchain world.
00:43:04.144 - 00:43:30.280, Speaker A: And so I'm really curious to see what we come out. But the really interesting thing is that these are really new tools and you can do really cool stuff with them. So we really can't wait to share more on these topics. So that's about decentralization. I'm going to take a look. If we have more questions that appeared.
00:43:30.620 - 00:44:18.200, Speaker F: You can also request to speak and we can bring on stage if you want to ask it verbally while people are asking questions. I'll just make a point that what happens next week is Starknet Alpha, which was worth currently running on Testnet, moves to Mainnet. And you should think of it as, I don't know. The way I like to talk about it is Ethereum in 2015, before Metamask, before Infuria. The infrastructure is being built in parallel. Don't expect to have some uniswap deep liquidity pools on November 30 where you can ape in, I don't know, but saying the ecosystem will be built together with this main net release.
00:44:21.980 - 00:45:09.320, Speaker A: So there are other questions here. So following up on DA, somebody was saying, oh, I would definitely like to see this opened up in permissionless in some way for data availability. I can't comment on what we have as options for data availability for now because it's still very much being decided. I just want to make a comment that we don't want to build a permissioned system. We're shooting for full decentralization on all aspects and all plan, and that's what we want to build. So we most definitely agree with you. We want this to be permissionless, so that includes data availability.
00:45:09.320 - 00:46:22.572, Speaker A: Actually, there is another question that popped up here regarding the Polaris prover license, and I'm curious if people have heard about it and what you think of it. I just wanted to make a quick mention on it. So Polaris aims at protecting the community using Starknet from a copycat, basically taking the prover code and deploying it somewhere else and stealing everything that the community has built. So far we've all seen copycat projects in the last few, I was going to say years. It feels like years, but it's probably months. But in the last few, let's say last few years we've seen projects come and go and fork the code and then steal a big user base and still traction. We want to give Darknet the best chart it has at being centralized and at being the main point of passage for the code we wrote.
00:46:22.572 - 00:47:29.904, Speaker A: Basically the objective with this license is not to extract value, it is to ensure that the value accrues to the community. And to that point I want to say that the code will be available. It's just that you won't be able to use it anywhere else than at the actual endpoint on l one that will have deployed for that. What I mean by that is that basically you'll be able to run approver. Anyone will be able to run approver without KYC, without being, I mean the prover role will be decentralized, fully decentralized. It's just that you won't be able to prove something and use say a different, deploy it to another chain and run it on another chain without the stocknet community being involved and accepting this change. So it's really about protecting the ip of the value created by the community.
00:47:29.904 - 00:48:38.890, Speaker A: And I want to say to that, that the people we want to protect from are not necessarily the one you think about. I mean we're not scared of some other crypto project stealing this code and using it somewhere else. I mean the people we're mindful of are more say the Amazons of the world, the Asia, Facebook, like say you have code that all of a sudden can onboard thousands, tens of thousands of users by being tethered to a permissionless network like Ethereum. The issue here is that we don't want people to be able to right click something in Amazon AWS and say yeah, deploy approver and that's it. And all of this value being created not accruing to the community. I don't know if that makes sense. If that's a topic that is of interest to the community we can most definitely discuss it a bit more and ask for people inside of Starquare to talk a bit more about.
00:48:39.420 - 00:49:16.610, Speaker F: Just want to add there's a question here. If the community wants an open source license, Ellie and Uri are not on the call and they can probably speak best to this license because they're the ones who join. I joined software afterwards. I think that one of the other big rationales here is you can always go easily from Polaris to open source, but you can't go the other way around. And they were just extremely concerned about developing the Starnet community first. This is a very important question because then it was asked.
00:49:20.540 - 00:49:21.076, Speaker D: That'S.
00:49:21.108 - 00:50:28.460, Speaker A: I saw a few questions pop up, but they got answered. So thank you for precising this. And yes, I think Ori and Ellie would be the best person to talk about Polaris. I wanted to address it, but if it's something that is of interest to the community, they can speak in length about it. Okay, and then we're going to take one last question and that I've seen pop up a few times already. Have you any plans for community expanded activities for those who are not it specialists? I talked quickly about this earlier, saying that right now we have a lot of work for technical work and a lot of technical staff, technical tasks to accomplish and I can't think at the top of my head of other community things that could be done. But Leron, do you have ideas of things we could ask of the non technical community to help for the Starknet launch?
00:50:29.040 - 00:50:57.396, Speaker F: I think the one area is translations to languages that are not just common languages. There's always useful contributions there with documentation of videos, et cetera. That's one thing that speaks to me. You can always message in discord if you have like design or UX skills that maybe other projects will want to use your services for.
00:50:57.418 - 00:51:00.980, Speaker C: That. Wonderful.
00:51:01.880 - 00:51:05.610, Speaker F: Fancy fan. I should have approved for you to speak if you want to ask your question.
00:51:08.950 - 00:51:10.450, Speaker A: Hi, can you hear me?
00:51:10.600 - 00:51:40.894, Speaker G: Yeah, I don't have a question per se, but I just wanted to say I'm part of the zigzag team and we are launching our zigzag decentralized exchange. It's an order book decks. We're planning to launch it at the same time as Starknet launches. We got $100,000 grant by Starknet. Yeah, we're working hard to launch it at the same time and publish our roadmap soon. And we're aiming to be the best decks on Starnet L2. So that's what I wanted to share.
00:51:41.012 - 00:51:52.210, Speaker A: This is awesome. Thank you for talking. Do you think we can get like once you're live, do you think we can get a demo in a community call. Do you want to present what you guys are working on?
00:51:52.360 - 00:51:53.266, Speaker G: That'd be amazing.
00:51:53.368 - 00:52:00.660, Speaker A: Yeah, for sure. Wonderful. Okay, so let's schedule it for next time. By the way. Sorry.
00:52:01.030 - 00:52:02.022, Speaker G: Let's stay in touch.
00:52:02.076 - 00:52:46.568, Speaker A: For sure. Wonderful. By the way, and I'm asking to the listeners right now, what do you think is a good frequency for these kinds of talk? Last call was two weeks ago. Should we do it at this frequency? Should we do it more often? Is it too much? What do you guys think? Actually, cake is asking the same question. Weekly would be good. Okay, so I see a lot of different, I mean, biweekly or weekly? I see a lot of weekly and biweekly pop up. So you know what, I'm just going to write a small poll to see.
00:52:46.568 - 00:52:51.850, Speaker A: I'm going to write a poll in announcement a bit later asking what is the good frequency? And you can comment with.
00:52:52.220 - 00:52:55.950, Speaker F: And the other thing we should ask is what time zone is the best?
00:52:56.320 - 00:53:01.772, Speaker A: Yes, good question. Okay, so time zone frequency, I'm taking.
00:53:01.826 - 00:53:06.450, Speaker C: Notes and be great.
00:53:09.060 - 00:53:33.050, Speaker A: I think we've covered most questions. We've been here for about an hour. There was a question about Ethereum and Starknet messaging. I answered with a link. If you have more questions, feel free to ask them on Starknet. And as a closing note, I want to say thank you for joining. It was great to have all of you here.
00:53:33.050 - 00:54:33.480, Speaker A: It's great to be able to talk about the things we're building and the people we're building it with because it's always nice to share things you care about and it's always nice when you see people caring about them too. So once again, thank you to shard labs for presenting. I can't wait to have other people presenting what they're building on Starknet. And we will be soon rolling out Starknet shamans, which will be our community forum where you will be able to have support. So if you have high level question, very technical question, you'll be highly encouraged to move the discussion there because that way we'll be able to leverage, well, let's call it data availability in the sense that discord, it's hard to keep track of all the technical discussions on discord. It will be much easier there. So we'll share the link for people to subscribe.
00:54:35.100 - 00:54:36.010, Speaker C: All right.
00:54:36.940 - 00:54:51.010, Speaker A: And I'll share the recording soon. Okay, so. Well, well, thank you. Let's end the call there. Do you want to say something else, Leron, or should we end it here?
00:54:51.780 - 00:54:53.170, Speaker F: We can end it here.
00:54:53.940 - 00:54:54.690, Speaker C: Sorry.
00:54:55.460 - 00:54:58.160, Speaker F: We can end it here. I've got nothing to wonderful.
00:54:58.740 - 00:55:01.630, Speaker A: Okay, well, thanks to everyone and see you soon.
