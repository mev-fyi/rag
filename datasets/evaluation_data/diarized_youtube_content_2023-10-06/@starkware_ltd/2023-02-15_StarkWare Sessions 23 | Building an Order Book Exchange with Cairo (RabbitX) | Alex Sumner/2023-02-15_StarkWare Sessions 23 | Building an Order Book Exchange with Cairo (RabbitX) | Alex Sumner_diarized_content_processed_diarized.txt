00:00:00.690 - 00:00:48.146, Speaker A: You okay? Good afternoon, I'm Alex Sumner from Rabbit X, and we are building a fast order book based decks. So I'd just like to tell you a bit about that now. In 15 minutes, just briefly, cover why anyone wants to do that, and it turns out quite a few people do want to do that. What the difficulties are up, why we think that starkware is a good way to approach it, what we've done, what we've learned, and what we plan to do next. So, decentralizing an order book based exchange is not straightforward. I think the motivation to be decentralized is obvious. It's certainly obvious to everyone here.
00:00:48.146 - 00:01:35.620, Speaker A: I would say the motivation to use an order book is perhaps less obvious, but a big part of that is the desire to increase the efficiency of price determination. What do I mean by that? Well, if we take a step back, what's an order book? In fact, what's an order? An order is an undertaking or an indication of willingness to either buy or sell a certain quantity of the thing being traded at a given price. And an order book is basically two lists of orders sorted by price. It's a list of the orders to buy and a list of the orders to sell. When a new order comes in, it's compared with the existing orders on the opposite side of the book. So the buy order coming in is compared with the sell orders that are already on the book. And it's matched, if it can be.
00:01:35.620 - 00:02:31.682, Speaker A: If it can't be fully matched based on the price and the quantities involved, then any unmatched portion of it goes onto the order book. It's inserted into the existing list at the appropriate place, given its price. There are two broad sort of types of users of an order book exchange. There's the regular traders who are there to buy or sell something, and then there's the market makers. And the market makers are there to provide liquidity to make the exchange flow better for everyone. So what they're aiming to do, they take a view on what they think the current price is or ought to be for the commodity, and they've placed a series of both buy and sell orders, where their Buy orders start fractionally below that price and their sell orders are starting fractionally above it. And what they're hoping for is that they'll get a steady stream of matches of both buy and sell orders, so that overall their position doesn't change very much.
00:02:31.682 - 00:03:01.902, Speaker A: They buy as much as they sell, but they make a steady profit because they're always selling a little higher than they're buying, and what they provide for everyone else is that the exchange is fluid. You don't arrive and then have to wait a long time before your order can be matched. And that's a tried and tested system. It's been used for a very long time, and it's great. It works very well. The problem is, if you try to put it on chain, and the issue there is that there's a lot of data here, there's a lot of data to be stored. All these orders, the order book, and it's changing all the time.
00:03:01.902 - 00:03:37.482, Speaker A: New orders are coming in, orders are being cancelled, orders are being matched, and so you've got a lot of storage updates and a lot of processing to match the orders. And the gas costs are prohibitive. And to solve this problem, the amm was invented, the automated market maker. And the amm solves the problem of how you put an order book on chain by getting rid of the order book completely. In fact, it gets rid of order matching completely, rather than trying to match individual orders against each other. What happens is that everyone trades directly with the exchange, which has its own reserves to facilitate that. And then you have a question of how you determine the price.
00:03:37.482 - 00:04:19.286, Speaker A: You don't determine it from the order book anymore, since there isn't one that's done algorithmically, and there are variations in how it's done. But the central idea is always to have a feedback mechanism. So the price that the exchange will take for the thing that it's trading goes down as the quantity of it that it has in its reserves goes up, and vice versa. The price goes up as the quantity in the pool goes down. And this creates a feedback loop, because if it's priced too low, you'll get lots of people who want to buy it at this low price and very few people who want to sell at that price. So there'll be a net outflow, and the quantity in the exchange will go down, so its algorithm will increase the price. And the other way around, if it's priced too high.
00:04:19.286 - 00:04:55.026, Speaker A: And that works? It works well. It's kind of one of the pillars of Defi, but it is a very expensive way of determining a price. Essentially, what the exchange is doing is trading its reserves at what is a bad price for it until that price has been corrected. And ultimately, the cost of doing that is borne by the people who provided the pool's reserves in the first place, which are the liquidity providers. So it would be much preferable to have an order book based system, but it's difficult to do because of the gas costs. There's the amm. Yeah, so that's problem number one.
00:04:55.026 - 00:05:40.974, Speaker A: How do you get an order book on chain, given that it's very expensive and you've got a lot of storage updates and so forth to deal with? A second problem you come across trying to do this kind of thing is that market makers and other people who are used to dealing on order book based exchanges expect low latency in high speed. They like to do high frequency trading often, so their expectation would typically be that an order is dealt with with a latency of 30 milliseconds or less. And obviously that's a bit of a challenge on a blockchain too. So startway to the rescue. I wrote this slide about five days ago. We had to submit our slides in advance and I think it's already slightly out of date. We've been here for two days now.
00:05:40.974 - 00:06:23.600, Speaker A: We've had a lot of conversations with people from startware and many other people, and we've seen a lot of presentations, of course. And one thing I think is abundantly clear is that we're not the only ones by far. There are a lot of people who are now quite sure that startware have built or provided everything you need to solve this problem. Now all the tools are readily available and various people are going about it in different ways. One thing obviously is you can do a lot more processing at a reasonable cost, though that will be true on any l two, I guess you still do have to be careful about storage. So on Starknet at the moment, storage isn't significantly cheaper than on l one because it ends up on l one. That's going to change in coming months, but that's how it is right now.
00:06:23.600 - 00:06:44.934, Speaker A: And then there's still this problem of speed. Your latency has to be. Can't be a block time. The block time is never going to be 30 milliseconds. There's a disclaimer at the bottom of this slide and it definitely applies. In the last few days we've been learning particularly fast, and I'm not sure I quite see our plan exactly the way I did five days ago. I think I've got three stages there.
00:06:44.934 - 00:07:28.034, Speaker A: I think maybe only two stages are needed. But anyway, our plan was, and still is to start with a hybrid exchange, which is order book based, and then make it more decentralized over time. So we're starting with Ravidex version one that already exists. It's currently in a public testnet, and the release for a public main net is planned round about the end of March. So in a few weeks time, and that does have a hybrid approach, the order book is off chain completely, the order processing is off chain accordingly. The latency is low. It's in the range we're aiming for.
00:07:28.034 - 00:08:03.310, Speaker A: What is on chain is the settlement layer. So user deposits and withdrawals, and that's based on using Starknet's l one to l two bridging. So we have an l one contract that traders deposit funds on. We then bridge the information across to the l two contract, the Starknet contract that that deposit has occurred and we take it from there. The users only need to interact directly with the l one contract, and they don't need to bridge tokens to l two because the tokens stay on our l one contract. They're always visible, we always have proof of our reserves. You can see they're still there, that we haven't lent them to someone else, for instance.
00:08:03.310 - 00:08:38.460, Speaker A: That doesn't of course prove that the exchange is solvent, because that's just our assets. You need also to know our liabilities to know that. And internally we have a lot of risk management going on, some quite sophisticated risk management that's happening all the time. So at every stage of processing we're doing numerous checks, including that the exchange is solvent. But that's not trustless at the moment. Only we can see that. So what have we learned so far in the process of doing this? I think the biggest thing we've learned, which isn't actually written here, is that the start net and startware community is a really great place to do something like this.
00:08:38.460 - 00:09:27.974, Speaker A: There's loads of really great technology, really creative and sort of interesting people who are all very open and friendly and helpful. You really couldn't wish for a better environment in which to be trying to do something like this. And in more detail, specific points I just noted here. I've mentioned we're using Starknet l one to l two bridging, which is really good, slightly off putting to start with, but actually great. And it's easy to test as well. We found if you use the hard hat plugin, you can test it on testnet or even have it running locally and test it on Devnet, which is a bit of a godsend sometimes because waiting for it on main net can give you quite a long testing cycle. As I say, the way we've used it, the users don't need to bridge tokens across to l two.
00:09:27.974 - 00:09:48.034, Speaker A: They don't need to even know that l two exists. They're purely on l one. Now that might work for you it might not, depending on what you want to do. I mean, obviously if you want to use things like account abstraction, then you may have to take it a different approach. But for us, it was all we needed. Caro dictionaries are another great thing. Caro is a pretty low level language at the moment.
00:09:48.034 - 00:10:17.818, Speaker A: We were working with Zero X 1.0 is coming out. That's going to be higher, of course, but cara dictionaries were great. They're a little intimidating at first sight, but very powerful, and they're well worth persevering with. I can't definitely recommend you look into those. You do have to be careful with storage, as I said. I mean, in coming months starknet will have the option to store variables on Starknet which are not stored on L one.
00:10:17.818 - 00:10:53.954, Speaker A: And they'll be much cheaper because you won't have the l one storage cost, but for now you don't have that. And so we found, for instance, we were storing booleans, and initially we had them, each in a word and a felt on their own. Of course, you can pack 251 booleans into a single felt, and that's not difficult to do, and it's well worth doing. It saved us, gives you two orders of magnitude saving in storage costs, which is pretty significant when storage costs are your biggest single cost. Our final point. Yeah. Be aware that block times do vary from Testnet to Mainnet, so that's something to worry about.
00:10:53.954 - 00:11:41.830, Speaker A: Well, not to worry about, but it's something to be aware of. What are we going to do next? Our intention is to take what we have now, which is a fast order book based Dex, and keep it fast. Keep the existing user experience essentially unchanged, but make it more decentralized. Cairo's and Startway's ability to prove that a given algorithm produced the claimed inputs from a claimed outputs from a given input is obviously very significant there. It gives you lots of possibilities, such as processing at one point and proving later. But we're looking at lots of different possibilities at the moment. We're having lots of conversations with lots of people about how to do it, but one possibility is to process fast and then prove subsequently that you didn't cheat.
00:11:41.830 - 00:12:24.498, Speaker A: I think the biggest single challenge in all of this is proving that you didn't front run people or ignore their orders. So proving that the orders you've processed arrived in the sequence that you claim they did, and that you've processed them all, there are different possible ways of approaching that. Consensus mechanisms for ordering, or an independent, unforgivable timestamping are two things we've been thinking about and looking at, and other people have as well, I believe. But that's ongoing. Yeah, that's my conclusion. Then Cairo and Starks open up and Starkware open up. A huge range of new possibilities for Dexs and indeed for many other things.
00:12:24.498 - 00:12:40.918, Speaker A: New ideas are coming up every day. Certainly quite a few have come up in the last two days. Exciting times ahead. Thank you. Any questions? We have a couple of minutes, I believe. Yeah.
00:12:41.004 - 00:12:55.900, Speaker B: Thank you very much. Obviously you saw v three, their concentrated liquidity provision that designed to overcome some of the limitations, always imitating an order in a sense. I wondered if you had a view on how successful that's been.
00:12:57.630 - 00:13:13.970, Speaker A: Well, it's reasonably successful, I think, but our view is still that the order book is a better solution if you can do it. Uniswap version three is obviously pretty impressive, works well. The question was how do we compare to uniswap version three?
00:13:14.040 - 00:13:18.610, Speaker C: Sorry, talking about the competition again, how do you compare against DYDX?
00:13:20.710 - 00:13:37.420, Speaker A: Dydx? Well, the moment they're on Starkx and they've announced they're going off and doing their own thing, I don't know in detail what their new plan is or what it's going to look like. So I can't really compare us with that. So, yeah, we'll have to wait and see, I guess.
00:13:39.070 - 00:14:04.160, Speaker B: Centralized the transaction or the proof was model. Do you think about decentralization of the off chain computation? Or how do you think about the off chain part?
00:14:06.290 - 00:15:20.686, Speaker A: Okay. Yes, the question was, given the limitations of working on chain, even on startnet or similar, the fact that you can't get latency anywhere near what we'd like various other issues. How are we going to approach this? The answer is we're still considering various possibilities. Layer three, I don't know if you're here, earlier there was talk about layer three, and that's definitely a promising approach, but it's not available right now. It's a matter of what we can do, when and how it fits in with what startware are doing and when they're going to do things, and we haven't really, it's a work in progress. Okay, sorry, could you speak a little louder? I can't hear you. So the question is it possible to have that 30 millisecond latency with an on chain order book? The honest answer is I don't know.
00:15:20.686 - 00:15:48.746, Speaker A: It may be that there has to be some compromise, that 30 milliseconds isn't enough, but maybe 100 milliseconds is possible, and that's good enough depending on. I mean, there are various people working on this right now. I don't have DyDx obviously amongst them. I have really no idea what they've achieved, but other people have achieved. I don't think anyone's live with it yet, but various people saying they're making great progress. So we'll have to wait and see how it all turns out.
00:15:48.768 - 00:16:07.860, Speaker C: I think you talked about front running issues. This is a problem both in uniswap. Is there any solution that you're involved?
00:16:08.020 - 00:16:20.124, Speaker A: So front running generally, Mev, as we normally know it, is a problem on any public blockchain where the mempool is visible and people can see your order before it's left the mempool.
00:16:20.172 - 00:16:27.328, Speaker C: Are there any possible information regarding settlement information?
00:16:27.494 - 00:16:54.090, Speaker A: Yeah, it's definitely possible. So at the moment we don't have a public order book and in fact starknet doesn't have a public mempool, so it isn't really possible to. There's not a problem there at the moment. As starknet becomes decentral wise, it presumably will have a mempool and I don't know how they're going to address that. But right now it's not a problem for us. Okay, I'm out of time. Thank you.
