00:00:03.540 - 00:00:30.690, Speaker A: Hi, nice to meet you, everyone. My name is Tom and thank you very much for being here. I'm actually very both excited. I mean, every time there is this kind of event for Starknet, so I get more and more excited as the time goes by. And also very, I don't know, humble. Right. So I mean excited because it's a very big event.
00:00:30.690 - 00:00:53.270, Speaker A: So today we're in Israel. So my wife is here, my father is here. My grandmother was also supposed to be here, but unfortunately she broke her leg. She's okay, but just couldn't make it. So, yeah, I'm very excited. My kids, they're in the kindergarten. Don't take them from there.
00:00:53.270 - 00:01:25.600, Speaker A: Yes. And humble, because every time it just feels more and more bigger than us. I remember this feeling when in April in Amsterdam, there was the first Starknet hackathon. And I arrived there and I was just a guest. There are many people working on Starknet and I was not interrupting them. So I have the same feeling each time there is a big starknet event. So now it's a Star wars event, but I'm a Starnet guy.
00:01:25.600 - 00:02:11.632, Speaker A: So this is what we're going to talk today. So I have two purpose for this talk. One is to give you an update, the same one that we had in Lisbon on what's the priorities for Starknet, what's the plan ahead, how we delivered on the priorities that we defined three months ago. But also since we're in Israel, it's a good opportunity to actually meet the people that I'm telling you about their job. Right? So hopefully when I say something, I will say the name. The guy will raise their hand. Kayoni, you ready? And you will be able to go talk with them afterwards and dive into the details because we're just touching the surface here.
00:02:11.632 - 00:02:48.096, Speaker A: Okay, great. So let's dive in. Also, the second objective was after I submitted the presentation, and they are very strict with the deadline, so I don't have all the names, but try to remember. Okay, so when we discussed three months ago on Lisbon, those were the three priorities that we defined for Starknet, right. One is to improve the performance, specifically the throughput. The other one was to release Cairo one. And the third one was to progress towards the seamless regenerasis.
00:02:48.096 - 00:03:20.416, Speaker A: So I want to start by going over each one of those and seeing how we did and what is still planned. And then at the end we have a surprise new priority. So try to think during the presentation what is missing. Let's see who guessed it. Okay, so I'll start with Cairo one because it's really exciting. There was a lot of progress and we have a lot of talks about it in the Star wars sessions. So Cairo 1.0
00:03:20.416 - 00:03:38.700, Speaker A: Alpha two was released two weeks ago, I think. Thank you very much. I think we have Gil here. Where is Gil? Hello Gil. So Gil is from the compiler team. He's doing a great job. You can grab him later.
00:03:38.700 - 00:04:27.762, Speaker A: It's called Alpha two because it's not yet the stable version, but it's still pretty amazing. And what's really, really amazing is seeing the pace of development there. So I encourage everyone to go to the repo and just see. It's a beauty seeing the progress and the pace. And to be honest, we aimed for it to be shipped a bit earlier, but I think what we missed was on the estimation of what it needed to do and not on the way the team execute. So on that end, this is Cairo one, and there are three talks, not four. Yeah, okay, nice, thank you.
00:04:27.762 - 00:04:59.950, Speaker A: So we have four talks about Cairo in the Stagwa sessions. Yuval will be discussing Cairo one status I think on this stage later today. So basically where we started, what we have today, deep dive into what the language can offer. So you're welcome to join. And Shaka will talk about how not to build a compiler and also about Sierra, what it is, what we plan to achieve with it and how we do it. And Ori, which is the team leader, will talk about how we do resource estimation in Cairo. Right.
00:04:59.950 - 00:05:43.882, Speaker A: For example, how do we prove a program consumed specific amount of resources? And this is a really important property for Starknet. So this is Cairo one. What can you do with Alpha two? So a nice example is you can write an ERC 20 contract. You can see here, I omitted some of the stuff, but basically you can see here a structure of a contract. You can see how we import a cisco, how we define storage or mapping an event, a function. Nice stuff, right? And this is actually applicable today. What is not yet applicable, what is not applicable is the ability to deploy it and run it on Starknet.
00:05:43.882 - 00:06:18.200, Speaker A: And I know we've done not the best job in explaining the separation here, so I'll try again, and if not, I'll try again the next event. But you can deploy it yet on Starknet because Starknet and Cairo are not the same thing. Right. Starknet is a system, it's a blockchain. And Cairo is a language which we use in Starknet to write contracts and also to write Starknet itself. But it has a life of its own. So the ability to write contracts and deploy them on Starknet is independent from Cairo one.
00:06:18.200 - 00:06:58.946, Speaker A: Did that help? Hopefully in any case you will be able in the next version, so maybe you'll forget about it soon. So zero point eleven, and now it's the time for Yoni to raise his hand and all the team, so they are working on zero point eleven and they're adding the support in Starknet to deploy and execute Cairo one contracts. If you want to understand what it means or why do we need to add the support, then I encourage you to go. I didn't ask for his approval, but go and talk with Yoni. Okay. And when we have this change. Oh, one thing I forgot to mention is that Cairo one alpha two is out.
00:06:58.946 - 00:07:37.234, Speaker A: But what is the next milestone? Or when will we say, okay, Cairo one is out? Basically when we reach feature parity with Cairo Zero. Okay, so when you'll be able to port everything that you've written in Cairo Zero to Cairo one will reach feature parity with Cairo Zero. And once we have those two, those two versions collide. Zero point eleven and Cairo one release, we'll begin the transition period. Now this relates to the third point of the regenerasis. Okay, good. So what is the transition period? Basically developers, you will start migrating their code from Cairo Zero to Cairo one.
00:07:37.234 - 00:08:09.734, Speaker A: Right. And this is with the goal of transitioning the whole Starknet stack to not use Cairo zero contracts and only use Cairo one. And this is basically the purpose and the motivation for what we call the Regenesis. Now the only thing I want you to remember about Regenesis is that you only need to care about you porting your code. Right. The migration itself, the event is seamless. It has no breaking change, it will have no effect on the developers or the users.
00:08:09.734 - 00:08:34.050, Speaker A: Apart from migrating the code to Cairo one. Okay, let's try to leave it at that. So this is Cairo one and Regenesis. The other thing we said was performance. Right. So back then, I remember the telegram groups, it was not nice, but throughput was a real pain. Yes, I will leave it at that.
00:08:34.050 - 00:08:57.098, Speaker A: So throughput was a real pain. And zero point 10.2 introduced parallelization to Starknet again. Yoni, Tim, you can ask him. Yoni and Elaine, Elina is not here I think. Are you here? Okay, but both of them. So we added parallelization and it was actually a dramatic change in the development experience.
00:08:57.098 - 00:09:19.330, Speaker A: Right. There was the backlog that was used to be in the testnets vanished. And even though we didn't reach the throughput or what we want to have for Starknet in any way. It was a very good solution for the time being. Okay. But it was not enough. So what is the next plan? Zero point twelve is the next big deal.
00:09:19.330 - 00:09:51.290, Speaker A: Okay. And what I mean by that. So zero point twelve, the focus of it will be again to improve performance and how we plan to do that by basically integrating the new shiny sequencer that was announced. I wrote it last week, but it was announced two weeks ago, announced an open source. Maybe it's a good time to, I don't know, clap. I don't know, never mind. Yeah, because it's actually very exciting if you know or don't know.
00:09:51.290 - 00:10:26.200, Speaker A: When we started Starknet, we used the Starkx infrastructure. Basically, if you heard about Starkx from the last presentation, which was a very good solution to start something very quickly, but it was not suitable for primetime. Right. And now for the past, I think, four months since November, we've been working on a new implementation for the sequencer, which is with performance in mind. In rust we implement all the lessons we've learned and it's really good. And zero point twelve will basically be adding this sequencer to Starknet. Right.
00:10:26.200 - 00:10:54.626, Speaker A: And it's a threefold improvement. What do I mean by that? There are three things that we're going to change in this version. First and foremost is the block execution logic. So when we take transaction and execute a block, this is logic that if we improve it, we improve the throughput. But there are other components in the life of a block that we need to improve. The first one is actually the Cairo execution. Right.
00:10:54.626 - 00:11:37.146, Speaker A: So we want to run a transaction, we want to run a contract, we run their Cairo. So zero point twelve will also use the amazing work that was done by Lambda class and integrate the Cairo Rs or the Cairo VM in rust to Starknet. So this is two and three. We also announced, I think it was at the beginning of the month, Papirus, which is the internal full node that we've been working on for the past six months. I think you can see down here it was also opened in an open source manner and we will use it for the state management. Basically. How do you do? Reads.
00:11:37.146 - 00:12:17.722, Speaker A: How do you do? Writes for the storage. So this will also be in a very efficient and performant way. So yeah. Okay. There is a graphic that's supposed to show the new sequencer which is the block execution. What? Elaine? Hello, this is Elaine. Guys, again, I didn't ask for approval, but if you want to understand what we're doing in this new sequencer, so this is Aline and her team.
00:12:17.722 - 00:12:49.446, Speaker A: Maybe Alon is here or everyone. It's not working. And there's nice graphics. Okay, what I want to say is basically that the same approach that we had for Starknet Alpha and in general for Starknet. Oh, there you go. We also apply it to the sequencer, right? So we're not building the whole sequencer client that will be used in the Starknet decentralized protocol and only then releasing it. We're approaching it in the same way we're building it.
00:12:49.446 - 00:13:22.140, Speaker A: Modules and modules. Still not working, but it's okay, no worries. So we're doing the same thing in the sequencer, right. We're starting from a very specific module, which we call the blockifier. Maybe it's not the best name, but you understand what it does, right? It creates blocks and execute them. And specifically in the blockifier, what I wanted to show you is that in zero point twelve we'll have the three components, right? The blockifier itself using the Cairo Vm, relying on the Papiros for the state. Amazing.
00:13:22.140 - 00:14:02.632, Speaker A: Now, okay, so this is Henry, Henry's work. You can also talk with him about memes, but in general, we love to in Starknet, to be very pioneers. So we were the first ZK roll up in production, the first ZK roll up to support general computation, the first layer to actually implement account abstraction, and also the first l two to add parallelization. And now I'm also very happy to announce that we'll be the first l two that removes parallelization. Yes, it's okay. Come on. Yes.
00:14:02.632 - 00:14:21.152, Speaker A: So it's just a fun fact, but basically the current sequential implementation of the sequencer is just much more performant. But it will be back, so no worries. But currently, yeah, apologies, yoni. Okay, great. So this is a performance. Hopefully we'll have questions at the end. Let's see.
00:14:21.152 - 00:15:08.474, Speaker A: Okay, so a newborn town, did you think, what is the next priority? Anyone? Anyway, don't say because maybe it's not the correct one. Okay, but the next thing is you can move. Thank you. Cost reduction. And this is very very important because even though stocknet today is cheap, for example, if you take, I don't know, a swap transaction, then you can probably get ten x reduction in cost compared to Ethereum. But ten x is not enough, right? We want to reach, I don't know, 100 x or there are some other types of computation that are just not cheap enough. So even though you can do them in Ethereum, you want to do them in Starknet, but it's still not cheap enough, right? So we want to make it cheaper.
00:15:08.474 - 00:15:46.726, Speaker A: And if we look at a transaction, what is the actual ratio between the costs? So we have two main components. One is just the l two computation. By l two computation, I mean Cairo execution, signature, verification, everything like that. So this is one part and the other part is the l one data. We are a roll up. Every state diff that we have, we post to l one, right? If not come later, I'll explain what it mean. And this is actually, if we look at an average, this is 95% of the cost, which is to me it was quite shocking.
00:15:46.726 - 00:16:27.666, Speaker A: But maybe it's also very, I don't know, nice anyway, but we still want to lower both components. And why is that? Because there are transactions. For example, let's say I want to use a hardware signer and sign a transaction with the cryptography that I have on my iPhone, right? So if we want to implement it today on Stagnet, it is cheap, but not as cheap as a regular transaction. So most people probably won't use it. And this is mostly costly in the l two computation department. And there are many other applications that are heavy on the l two computation department. So we want to make both of them cheaper.
00:16:27.666 - 00:17:04.466, Speaker A: Okay, so let's see what's planned. Okay, great. So for the l two computation part, it's actually very easy. We just reduce it by five x. Done, right? Yeah, it's not that easy. Because actually the main factor there, or what allows us to do this reduction, is what size of proofs we're able to generate. And as Ellie said, and as giddy, you can raise your hand, will say, I think maybe today or tomorrow, I don't know, we added recursion to our proof system three months ago or something like that.
00:17:04.466 - 00:17:29.910, Speaker A: And also Shah who did it. Hello. So Shah implemented it. And that allowed us to, as Ellie said, create much bigger proofs. Now because of that, we can, in zero point eleven, just reduce the cost of per Cairo step. And we did all the cost of the l two computation by five x. I think this is just the beginning, but we want to take it slowly.
00:17:29.910 - 00:18:15.002, Speaker A: So this is for the l two part, for the onchain data part. After I wrote it and published it, I thought maybe we should announce it better. But basically we're adding volition to Starknet, which is kind of a big deal, right? Yeah, I don't know. But anyway, the plan is in zero point 13, to add the ability to use off chain data availability in Starknet. And to begin with, we plan for this data availability method to be like ten act cheaper than just publishing on it on l one. Now we don't have time to deep dive into it. And if there are people from the hacker house that visited our offices, I tried to deep dive with them, but it seems anyway we don't have the time for it.
00:18:15.002 - 00:19:08.950, Speaker A: So I'll just say in a very high level, what is the main ideas? And hopefully soon we'll release a more detailed design plans and hopefully you'll give us feedback. But the idea is to allow developers in the contract level, in the storage cell level, to decide which data availability mode they want to use. Right? So when I write, I don't know, I want to write my balance, I can decide if it will be on chain or off chain. And also the idea is that this is not just two data availability modes. So it's not just use onchain data availability and off chain data availability. The design, as we now plan to roll it out allows you to be very modular, allows you to be very modular and to add more data availability solutions as time progress. Okay, so those are like the high level ideas.
00:19:08.950 - 00:19:51.154, Speaker A: And just to give an example, the way we plan to implement the rc 20 once we have that, is in some kind of a hybrid solution. So I think about it like a wallet and a bank. I can define some part of my balance to be in the on chain, secure but expensive part. And that will be like my bank. I don't touch it a lot, but it's there. And I have the guarantee of l one security that it will remain there. But I can also have some smaller parts, which is like a wallet that I can use for my day to day, I don't know, payments or paying fees or stuff like that, which will be on the apologies on the off chain part, which will be cheaper.
00:19:51.154 - 00:20:36.150, Speaker A: It will have the security guarantees of the l two consensus, which in my opinion is very, very strong for a large range of applications. And this is an idea on what developers will be able to do once we give them this power to decide in the storage cell level what the data availability mode will be. For example, Julian is here. So I'm very curious to see how this will be added into the accounts. What part need to be on chain, what part can be off chain. And in general it follows the same method that we have with account abstraction, right? We give power to developers and let them do the innovation on the applicative part. So this is volition.
00:20:36.150 - 00:21:39.690, Speaker A: I'm very excited by it for a long time it was on the roadmap but now that we made progress on other pods, we can finally find time and do that. And I think it will be quite life changing for Starknet developers. Just to sum up, we have one and a half minutes, so apologies, but there won't be a lot of time for questions, so just catch me later. But this is the roadmap as I plan it, or we plan it currently. I mean, as we know, things might change, but we're currently here and we'll progress there. But basically Starknet zero point eleven will introduce Cairo one into Starknet and hopefully, or this is the plan, will start the transition period to rotary genesis. Now once this is behind us, zero point twelve will bring us the performance trail, the blockifier Cairo Rs and Papiros into Starknet and will hopefully give us a huge leap in performance.
00:21:39.690 - 00:22:25.222, Speaker A: And lastly, zero point 13, which will focus on cost reduction, specifically via volition in Starknet. Now, I talked about Starknet core, right? So what we plan to do to improve the core features of Starknet, but you'll have to believe me, there are other efforts. Right? So we plan, or the goal for Starknet is to be decentralized, and we truly mean that. And being decentralized, it means both in the protocol side and in the decision making side. And I really encourage you to join. There you go. To join two talks.
00:22:25.222 - 00:22:58.866, Speaker A: One on decentralization, which will be done by ilya. Ilya, okay. Which will be done by Ilya tomorrow. And I think it will be very interesting because basically we're trying to tackle this problem for, okay, just 110 seconds. We're trying to tackle this problem for two years now. And I think now we are at a place where we have a very good understanding on the framework, right. The l two versus l one sequencers, improvers, how we add incentive to that.
00:22:58.866 - 00:23:37.082, Speaker A: And he will share this understanding with you. And I think we're at a very good place to actually progress toward actual implementations. So this is one. And governance, which will be done by Silv and maybe David and Mano here. Hello. Of course. Which will explain the first phase and the second phase of how we want to gradually move toward a status where also the decision making for Starknet roadmap and starknet protocol changes will be decentralized.
00:23:37.082 - 00:24:09.140, Speaker A: And hopefully, I don't know, six months from now maybe someone else can be here in my place and explain what Starknet plans for its roadmap. So, yeah, thank you very much again, I'm really excited to be here. It's amazing. And I'm here for any question you might have also. Yoni, Elaine, Dan, mano, Shaka. Very good people. Thank you.
