00:00:02.250 - 00:00:38.082, Speaker A: Cool. Thank you guys all for attending. I'm Terrence, I'm the co founder of Cartridge and a core contributor to Dojo. And we've been building on chain games on Starknet for the past two years or so. Today, I'll give you a little bit of a speed run of the history of it, where we are today and where we're going in the future. But before I get started, let me define what is an on chain game. So on chain game, like the name suggests, is a game that is fully on chain, where the state and the logic is all defined in smart contracts, which allows the game to inherit the properties of the blockchain, things like composability, extensibility and permissionless lists.
00:00:38.082 - 00:01:19.958, Speaker A: This is in contrast to web 2.5 games, which are mostly focused on just representing asset ownership on chain. And once you put a game fully on chain, it enables some interesting properties for these games, and new types of games can start to exist. Things like fully community owned projects, or permissionlessly extensible, forkable or composable games, and games that can live forever. So the journey into on chain games started about two years ago with the introduction of Starknet Alpha, and along with it a language called Cairo. And Cairo was on basically all accounts a terrible language. It was very slow, it was very verbose, it was low level, and it was very hard to work with.
00:01:19.958 - 00:02:20.098, Speaker A: But it had this one very interesting property, provability. And with that property, the promise of computational scalability on top of Ethereum. And was this property that excited some early members of the ecosystem. One of them, Parama, came early on into the dopores Dow and suggested like he wanted to create a fully on chain game, which was a recreation of a classic game from 1984 called Drug wars, which is an arbitrage game and well suited for the blockchain. And he actually was one of the ogs in the space that wrote a lot of the documentation that most of the people that got involved early on used to learn Cairo. Another was guilty Goiza, who you may be familiar with from the ecosystem. He very early on started doing some interesting physics experiments on chain and doing things like neural network inference, and today and since then has built a bunch of interesting games with the latest one, xiaoxin, which is a really cool demonstration of provable compute and the forces it provides.
00:02:20.098 - 00:03:28.874, Speaker A: And you guys should definitely check it out if you haven't already. And so early on about starting two years ago, there was a bunch of teams that despite all the shortcomings of the Starknet ecosystem, how slow it was how cumbersome it was to write smart contracts started building fully on chain games. There was the Dopor's team, there's the Realms team topology, influence and brick, a lot of them represented here at the conference today. And the interesting thing is, most of these teams started building on Ethereum, but very quickly ran into its limitations, not only the computational limits of trying to build a game on layer one, which obviously can be a very expensive exercise, but also with the programming language and the tooling and infrastructure that was more designed for simple defi applications. If you ever tried to define a very complex application on top of Ethereum, you very quickly run into limitations of the language itself, like stack too deep errors or contract size errors that introduce a lot of overhead to the development process. So today I'm going to talk a little bit about where we are today and the Starknet stack for gaming, which has come a tremendous way in the last year or so. Represented around the Sherrigan is the different components that we can dig into on the foundation.
00:03:28.874 - 00:04:27.278, Speaker A: We have the Starknet ecosystem itself. As Georgia mentioned, we had the introduction of Cairo one, which is a much better language. It's a modern rust like high level abstraction language that enables people to write complex applications very easily, safely and concisely. And along with it is a very high performant modern compiler which has a plugin system that we've used at Dojo to enable another level of abstraction to build an ECS framework on top of it, which makes it even easier to define the logic and state of games on chain. The next is the transition of the entire ecosystem to starknet and rust. So this has been an ongoing process, initially spearheaded in large part by the Lambda team, but now an ecosystem wide effort that has significantly increased the performance of Starknet. So early on in Starknet you were using Starknet and PI, and it was a very slow experience trying to do anything basically, and was definitely not where it needed to be to support games.
00:04:27.278 - 00:05:29.800, Speaker A: But today, with Starknet and Rust and the significant performance improvements, you can actually start to run fully on chain games in production with great user experiences, and with future improvements with things like Cairo native, which will allow compiling Cairo to native bytecode and executing them natively on hardware, we'll get even further performance improvements. And the next is Modera. Modera is a starknet sequencer that enables game specific roll ups that can be parameterized and customized specifically to the needs of games. Whereas most layer twos today are parameterized mostly around DFI requirements, games have a different set of requirements, like low, latency high throughput and can relax constraints and requirements around decentralization. And moderate makes this super easy to do. So moderate allows you to spin up your own layer three roll up or your own, like it could be a layer two or layer whatever that you can settle onto Starknet or Ethereum and you can have running specifically for your game. And we have a few games running on this today.
00:05:29.800 - 00:06:07.378, Speaker A: The next section is the dojo section. So the past eight months we've been building dojo as a participant in the Starknet ecosystem, along with others like brick and realms. And Dojo has been a culmination of a lot of our learnings from building games very early on in the Starknet ecosystem, and comes with a lot of toolings that makes it much easier to build games on Starknet. And so it has a few different components to it. One of them is Sozo. And Sozo is a way for migrating and deploying your game onto Starknet. It'll automatically identify all the smart contracts that you have and enables this property of permissionless extension of the world.
00:06:07.378 - 00:06:43.466, Speaker A: So when you define a game, if someone outside of the core team or outside of the people that deployed the original game want to extend some functionality, introduce new logic, they can easily do that with Sozo and deploy it into the game. It helps manage the installation of the functionality into the world and resolve permission issues. We have katana. Katana is a layer three or gaming specific sequencer. It's a high performance sequencer designed specifically around the requirements of onchain games. And it's very performance. It's focused on being a centralized sequencer and it's very easily modable and extensible.
00:06:43.466 - 00:07:42.878, Speaker A: So it's a great place for experimentation in novel sequencer architectures. Specifically for on chain games, we have Tori. Tori is a verifiable indexer. It automatically takes the components of an on chain world defined in Dojo, exposes them through different APIs like GraphQL and GRPC, and creates reactive bindings to them. So you can use the dojo client to easily consume the state of a world and build games in your favorite clients like phaser or unity or react or whatever you like to build your game front end in. And then finally we have cartridge and so cartridge. We found a cartridge about a year and a half ago to focus on enabling this on chain gaming ecosystem in response to our experience in building Dopor's roll your own game very early on and seeing both the promise of fully on chain games as well as the limitations that face them in bringing them to market, and so Dojo, we're vertically integrating the stack for fully on chain games, which we think is necessary to provide a great user experience.
00:07:42.878 - 00:08:31.758, Speaker A: We have a few different products that we're working on developing and offering. On the builder side, we're building managed infrastructure around the dojo ecosystem. So easy ways for developers to take a game from something they're developing locally to something they're deploying for playtesting, and then something that they're deploying into large scale deployments, including things like easily forking a chain, an existing game, adding some additional logic to it, distributing it to your friends to play and test it, and then helping the process of reincorporating that logic into the main game. After it's been finalized, we have Explorer. Explorer can be thought of as an onchain game. Explorer blockchain Explorer. So it's similar to Ethoscan, except for it understands the semantics of these worlds and you can visually explore the history of the world and interact with them.
00:08:31.758 - 00:09:44.150, Speaker A: It's a tool that I think will be really useful for developers when they're developing the core on chain logic, so they don't have to necessarily build like a front end for the application before to start testing the application. You can do something similar to ether scan, where you can call contract functions directly, or you can install different modules and components from a generalized interface and then play. So the play part of the cartridge stack is something that we focused on initially very early on last year with the demonstration of the controller with Webothen and starter packs, which was focused on onboarding players to games. We onboarded a bunch of users onto the starknet ecosystem for different games like Topology's mumu and the influence team. And the goal of play is to provide the interesting properties of the blockchain from the player's perspective, like the ability to have portable profiles and reputations across games, asset ownership and all these kind of pieces with a very seamless experience without having to extol extensions and all the other additional overhead that's typically required to get involved in the blockchain ecosystem. So these pieces come together to form the starknet stack for on chain gaming. And this is where we are today.
00:09:44.150 - 00:10:38.840, Speaker A: So today we have multiple games running fully on chain, written with a Doja framework deployed on layer three sequencers like Modera hosted by cartridge. This is kind of the architecture that we're working with today, and in the future we're working towards enabling even a further layer of just like instance specific roll ups or client side proved games where you're just executing things in the context of just the people that are involved in that particular round of a game or the instance of a game, and then settling that onto the layer below and potentially, like, unlocking worlds in the shared state of the global universe. So what's next is Starknet is a great platform for building on chain games. Today we have a few that we have in development at Cartridge. We have the original game that we set out to build two years ago, roll your own. That's in play testing right now. And we're starting a new round of play testing in a few weeks from now.
00:10:38.840 - 00:11:30.470, Speaker A: We have a drive AI, which is an experiment that we ran with the Giza team and the Starknet Explorations team. It's a fully on chain 2d physics engine where you train a neural network to basically navigate the car through this road fighter inspired racetrack. And so this was a really cool demonstration of using Giza's technology, Orion, to define a neural network and then export it and then deploy it on chain and you can use it. And then you can fully prove. One of the cool things you can do is you can fully prove the execution of your model and then just submit the proof on chain. So you don't even have to expose your solution to the problem, but you can convince everyone that you have the best model for driving a fully on chain car. And then the latest project that we've been working on in partnership with the Strucknet Explorations team is called Subasa.
00:11:30.470 - 00:12:13.400, Speaker A: It's a football inspired Hearthstone game, fully on chain, where we're experimenting with the affordances provided by the blockchain for the community to be involved into. Basically set the meta for the game. So defining what are the abilities of cards, introducing new cards, balance in the game, trying to figure out what are the different interesting mechanics that are uniquely enabled by the blockchain for the participants that are playing a game to be very involved in that process. And then outside of that, there's a bunch of interesting teams building in the starknet ecosystem. These are some of the teams building on top of Dojo. We have a bunch of new teams showing up all the time. We have a game jam happening this weekend that I think will be a lot of fun.
00:12:13.400 - 00:12:54.530, Speaker A: And yeah, if you're interested in building fully on chain games, the startnet ecosystem is ready for it and you should definitely hop into the Dojo discord and come join us. Thank you. Any questions for the company? Yeah, so cartridge is cartridge GG. I don't think I have it on a slide, unfortunately, but it's just cartridge. Cartridge. Yeah. GG.
00:12:54.530 - 00:13:18.586, Speaker A: Yeah. Just two G's. Like. Good game. Yeah. So Sozo is an extension of Scarb right now, because Dojo is a plugin on top of Cairo language. It enables a new abstraction on top of Cairo for defining entity component systems.
00:13:18.586 - 00:13:41.290, Speaker A: And Scarb doesn't support pluggable plugins just yet. We extended Scarb. Eventually it'll exist as something you can just configure in Scarb to compile with Dojo, similar to how you can compile with the Sarknet plugin. Thank you. Let's thank Terrence again. Thank you, guys.
