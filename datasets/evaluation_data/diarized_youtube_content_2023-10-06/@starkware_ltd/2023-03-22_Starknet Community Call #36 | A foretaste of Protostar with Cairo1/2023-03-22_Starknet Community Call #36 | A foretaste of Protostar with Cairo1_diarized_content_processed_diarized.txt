00:00:00.330 - 00:00:21.034, Speaker A: Is almost up pressing. Go live on YouTube now. And we're live on YouTube. Hello, everyone. So, I'm Henry from Starknet, and welcome to a new live coding workshop for Starknet. Today I'm joined by Maximilian Demitrazek. Hey, Max, can I call you Max?
00:00:21.162 - 00:00:23.342, Speaker B: Yeah, Max is completely fine. Hi.
00:00:23.476 - 00:00:29.094, Speaker A: Perfect. So, Max, you're working at software mention on Protestar, is that correct?
00:00:29.212 - 00:00:30.150, Speaker B: Yeah, exactly.
00:00:30.300 - 00:00:35.030, Speaker A: So can you tell us in a few words what's software mention and what's Protostar?
00:00:35.690 - 00:01:03.140, Speaker B: Software mention is like software agency. We in Poland call it software houses. And basically we do projects for clients, but also we do our open source. We are mainly focused on react native, which is our main specialization. Also we do video streaming related things. And from a year. Also we have blockchain and Starknet related projects as well.
00:01:03.140 - 00:01:53.540, Speaker B: We have multiple projects related to Starknet. One of these is the protester, which is tool for testing and developing Starknet contracts with multiple features. If you are familiar with Ethereum, it's kind of foundry for Starknet, and we are heavily inspired by foundry. Other projects we have, we have Scarp, which is Cairo, one package manager, which actually, we will be integrated with Protestar soon, but more on it later. And also we develop and maintain a couple of sdks, Python, SDK for Starknet, Swift, JVM, and that's probably it.
00:01:53.910 - 00:02:05.540, Speaker A: That's already pretty much. Thank you. All right, super cool. So without further ado, you're here to present a live workshop about Protostar and Cairo one we're all.
00:02:08.630 - 00:02:15.526, Speaker B: Will do. I plan to do a short live coding. Not everything will be like present. Today is completely finished, but you will.
00:02:15.548 - 00:02:27.930, Speaker A: See, and that's what life coding is for. We have this workshop every other week and the goal is really for people to show what they're working on and have people on their end be able to follow along with their keyboard.
00:02:28.830 - 00:02:33.500, Speaker B: Okay, so I will share my screen. Now.
00:02:35.550 - 00:02:40.394, Speaker A: You are sharing your screen for your glasses, but it's hard to pick up the details.
00:02:40.442 - 00:02:42.160, Speaker B: It's hard to avoid it. Yeah.
00:02:42.770 - 00:02:51.838, Speaker A: So you have a small icon at the bottom that says present. If you click on it, will ask you share your screen, and then at this point it'll be able to add it to the stream.
00:02:52.014 - 00:03:00.680, Speaker B: Okay, so we just need to pick the correct one. Give me a second. Okay. You should be able to add it right now.
00:03:01.850 - 00:03:03.000, Speaker A: You're in.
00:03:03.690 - 00:03:12.662, Speaker B: Okay, here it is. It's good size there because like, I'm.
00:03:12.726 - 00:03:17.578, Speaker A: So what we're seeing is a lot of colors with a white rectangle in the middle.
00:03:17.744 - 00:03:21.360, Speaker B: Yeah, that's weird because you shouldn't see that I'm showing. Okay.
00:03:23.650 - 00:03:30.400, Speaker A: Right now we see a terminal that says project looks a bit laggy, but maybe that's on my end.
00:03:31.250 - 00:04:00.380, Speaker B: Yeah, it's a bit laggy on my end as well. Okay, what we want to do, I want to show you how projects for Protestar in Carol one going to look and basically go you through kind of how testing flow will change because it will be kind of new. And if you are kind of used to current prestige flow, it might be weird. Okay, so we can start by creating a new project.
00:04:01.470 - 00:04:21.294, Speaker A: Can I ask some question first before we start? So Protostar was written in Python and the goal was for you to be able to write Cairo code and test it with Cairo code. Is this logic still going to hold with Protostar? Is it going to be still in Python? Will you write your test in rust in Cairo one?
00:04:21.492 - 00:04:57.370, Speaker B: So yeah, testing will be done in Cairo and we're still keeping up with that. Cairo one is much better. So it's even easier to do that. If we're able to do that for Kyro zero. We'll be definitely able to do that for Kai one. And I will still believe in this because keeping everything in one language helps a lot in a lot of scenarios. And also we modified our current flow to make it a bit more accessible to, for example, testing pure Cairo code, which is not like starting related, but you will see that in a second probably.
00:04:57.370 - 00:05:54.014, Speaker B: But yeah, we are still keeping up with Cairo testing flow. It's the same. Not everything is so focused on contracts right now. It's a bit more flexible, I would say. Okay, so if I would like to create a new project, there is a command in it and we have right now we use some prefixes for carry one. And I think you can see, I think, okay, so use some prefixes for carry one. Frost fixes and prefixes to right now distinguish comments, but those will be like in the future, replace the normal test comment, just like temporary, because we want to focus, give users interoperability between Kyrie zero and Kyrie one contract to make migrations move.
00:05:54.014 - 00:06:03.220, Speaker B: Because lots of people have contracts written in Cairo zero and they probably cannot be rewritten in one day.
00:06:04.630 - 00:06:08.978, Speaker A: Right now we're still seeing your terminal and says protestar in its Cairo one.
00:06:09.064 - 00:06:10.370, Speaker B: Is that what you're showing.
00:06:12.470 - 00:06:15.460, Speaker A: Right now says est.
00:06:16.330 - 00:06:17.080, Speaker B: Okay.
00:06:19.130 - 00:06:20.834, Speaker A: Your screen is pretty laggy.
00:06:20.882 - 00:06:25.814, Speaker B: Yes, probably. Yeah.
00:06:25.852 - 00:06:30.146, Speaker A: If you move your screen, your mouse.
00:06:30.258 - 00:06:34.300, Speaker B: I'll try to move it regularly. Okay.
00:06:34.910 - 00:06:36.410, Speaker A: Try moving the window.
00:06:38.110 - 00:07:12.200, Speaker B: Okay. So I can try moving the window as well. But generally it just doesn't. I would just try to kill and move them out. Sorry, I cannot do that right now. It's about that probably my computer isn't capable of keeping up. Okay, so we can see the in the new project right now and can open visual studio code.
00:07:12.200 - 00:07:54.962, Speaker B: And second I will recreate that with it easier because I had one project with named already like that and it just created a new. Okay, I will make it once again and name it test one. Okay, never mind. For that we can go to postcode. So if you open in a new window. Okay, so here it is and we can see if you are familiar with older versions, Protestar or not, or any other development framework or NPM or other languages. It's pretty something you can kind of intuitively see what is here.
00:07:54.962 - 00:08:28.046, Speaker B: Like we have source directory which holds our source code and we have test directory which holds our tests. Also have protestore config which is pretty similar to old Protestore config. We also only have like few new things which kind of let us separate, carry one things. Okay, so actually it doesn't update, which is a bit problematic because I show you something different. Do you see like we can see.
00:08:28.068 - 00:08:29.840, Speaker A: Vs code and we can see your.
00:08:30.210 - 00:08:31.726, Speaker B: Yeah, I open cursors are moving so.
00:08:31.748 - 00:08:43.360, Speaker A: I think it's okay. No, the file doesn't show. It still shows. Welcome. I'm going to try something real quick.
00:08:44.610 - 00:09:23.426, Speaker B: I it right now it's updated. It looks fine. So maybe it still doesn't it.
00:09:23.528 - 00:09:25.700, Speaker A: All right, let's see if this is better.
00:09:28.550 - 00:09:59.580, Speaker B: Okay. It still doesn't seem like it doesn't update like the window. I don't show what the reason is for that, but what I can try do is I can try to. Okay, right now it looks fine. No, it's still lagging. Okay, I will just go over how it is. Probably can do much right now about that.
00:09:59.580 - 00:11:22.870, Speaker B: Probably my Internet isn't keeping up with everything. Okay, so basically what will change? I hope it will update in a second and you will be able to see that basically old protester versions have been supporting, have been writing contracts as tests, as a contract. So you deploy basically each test is like contract entry point. This won't be a thing in Newprestar because right now you will just write if you are familiar with carrier one test runner, you will be able to write tests just like carrier functions which are not part of any contract, which changed a lot of things because right now a, you aren't able to directly access it doesn't haven't updated. It's a bit problematic because probably don't see what I want to show. Maybe if I try to stop sharing, it's okay. If I do that and try to try it again, maybe.
00:11:22.870 - 00:11:27.400, Speaker B: Yeah, that's right, because sub is problematic. It will show anything.
00:11:28.570 - 00:11:30.120, Speaker A: Yeah, it's kind of hard.
00:11:30.730 - 00:11:59.780, Speaker B: Yeah, I will try it here and still doesn't realize, but at least you see it again.
00:12:00.470 - 00:12:02.606, Speaker A: Do you want to try to move to zoom?
00:12:02.798 - 00:12:04.610, Speaker B: We can try, maybe.
00:12:04.680 - 00:12:30.118, Speaker A: Okay, so let's try this. So for the people watching us on Twitter, sorry, we're going to stop the broadcast on Twitter. And for the people watching us on YouTube, I'm going to try to reuse the same link, but maybe I won't be able to do so. If you want to follow connect on the new live that will appear in the starkware profile in a few sec. Okay, sorry, we'll be back soon.
00:12:30.304 - 00:12:33.406, Speaker B: And maybe it will be, I don't.
00:12:33.428 - 00:13:02.280, Speaker A: Know, let me see. Did. All right, I think we should be back now. Let's see. Yeah, actually I think we're Live on zoom now.
00:13:05.930 - 00:13:06.680, Speaker B: Cool.
00:13:08.510 - 00:13:36.420, Speaker A: It came back, did it? Hey, people in the chat, can you tell if you can hear me? I can see people saying revolutionary technology we are. I can hear myself. All right, I think you can talk now, Max. So actually you can share your screen. Let me activate screen sharing. Boom. You should be good to go now.
00:13:36.790 - 00:14:01.100, Speaker B: Okay, give me a second and I will share my. Okay. My system preferences. I haven't used Zoom before. Oh, that's problematic. I will need to reopen. Give me a second.
00:14:03.790 - 00:14:04.602, Speaker A: You need what?
00:14:04.656 - 00:14:11.870, Speaker B: Sorry, I need to restart my zoom because. Okay, it should be done. It's fine. It works.
00:14:11.940 - 00:14:16.590, Speaker A: Okay, nice. All right, this will be better. Yes, I can see your screen now.
00:14:16.660 - 00:14:31.620, Speaker B: Great. You see ever writing live or not? Do you see everything I show or. Yeah.
00:14:34.070 - 00:14:35.910, Speaker A: We can see your screen correctly.
00:14:36.410 - 00:14:52.810, Speaker B: Okay, so do you see if FDJ line eight? Yes, we can see. Great. Amazing. Took some time. Yeah, it works right now. So yeah, coming back to the. Otherwise, it's kind of intuitive, I believe.
00:14:52.810 - 00:15:40.022, Speaker B: So we have directory of source code, directory of tests and config file for Protestar and what it is. We can first check it out like our code. So right now Protestar does not support k one contracts. We are working on it actively and will be supported in next week. I will show you later how it will look. But yeah, we can see some carrier one code and we can see the test file which contains that test. And if you are familiar with older versions, protester, you can see, tests aren't contracts anymore.
00:15:40.022 - 00:16:33.180, Speaker B: So our testing test definitions is very similar to carrier one test runner, if you're familiar with the one provided with carrier one repository, and it's basically just carry one code, it's not executed by default in any way in kind of starting context. And this part works right now. If you can download protester right now and update it to 0.2, version 9.2, you can test your chiropract, which doesn't include any startant stuff. What you are working with now is to extend it to support start operations. And I want to show you briefly how this is going to look because it might be a bit confusing how we are going to support this flow like start net start.
00:16:33.180 - 00:17:29.466, Speaker B: So yeah, let's write some test. Let's name it test, contract. It's basically the same kind of test like the one below, but here we will be testing a contract. What we need first is a contract because here in default for the start template, there are no contracts. So I will create directory and contract and I will create Cairo. Okay, great. So I will copy here some basic Cairo one contract and showing you briefly what it does.
00:17:29.466 - 00:18:08.306, Speaker B: It basically has a balance storage variable and two external methods which you can. One is through increasing balance and one is through getting a balance, which makes it a very basic and hello world darkness contract. I hope it's like, but it isn't pretty important what it does, basically only for presentation purposes. Okay. And if we have added the contractor to our repository right now, we need to define this contract like in older.
00:18:08.338 - 00:18:14.358, Speaker A: Versions for Testar, the extension to contract is wrong. It says Cario instead of Cairo.
00:18:14.454 - 00:19:23.170, Speaker B: Oh, that's why I was wondering why syntax haven't been working right now. It's perfect. Okay, great. So we have to define this contract in our protocol tom, so we can name it, for example main or contract contract a. And we need to define the path to the contract. Here will be contract, and here it is right now, Protostar is able to find this contract, build it, which building is not currently supported or will be, and also is able to use it in tests and how it's going to look. Okay, so let's write this test and what we are going to do, we are going to declare and deploy this contract from this test and then we are invoked, we invoke it to see the whole flow.
00:19:23.170 - 00:20:41.450, Speaker B: Okay, so how this is going to look? First we need to declare it. Yeah, it's what we do as new contracts, because we cannot deploy a contract, it's not declared. So we want to do it, define a variable hash and we just call the function declare and our contract a okay. And it should declare your contract. How is this Magic works? Okay, Protestar has a custom fork of caravan compiler right now. Long term we'll be just extending it and we provide like external standard library with our custom functions which are cheat codes if you know it from older versions and we'll still name it cheat codes. So this one will product star will be able to interpret it and invoke underlying starting instance which is like in the hidden for user and just execute this declare on this starter instance.
00:20:41.450 - 00:21:17.940, Speaker B: Yeah, so basically it's declared right now. Protester has something called prepare, which you might know, it's kind of a side step only for calculating the address. It allows to precal the address of deployed contracts. It's something necessary for some testing flows. So basically it's prepare. It's pretty intuitive. And what we need to pass there is we need to pass the class hash and we need to pass call data.
00:21:17.940 - 00:22:10.070, Speaker B: But what is call data? It's an array carrier. One has pretty nice syntax for declaring arrays, defining arrays. So we can define this array here and we just create a new array here. It's like what we pass to prepare is constructor called data. So we need to provide arguments to constructor can check in our contract, we don't have any constructor, so we can just pass an empty error here and prepare. It seems kind of weird because it's not included in normal starknet testing, like Storkmat starknet flow, because there is only declaring deploy. Its deploy is done from contract.
00:22:10.070 - 00:22:44.414, Speaker B: But it's weird. But basically the use case is you can right now extract address from it. So it's sometimes useful. For example, if you need to want to pass this address, that's like if.
00:22:44.452 - 00:22:47.922, Speaker A: You want to send it money before you deploy it, if it's an account.
00:22:47.976 - 00:23:25.694, Speaker B: Contract, for example, something like that. Yeah, such scenarios, so you can know address before deploying the contract. But there is a bit tedious, these free steps is deployed, but we have some nice shortcuts for that. I will show it later. Okay. And then we can deploy the contract finally. So it will be the same address as the one above and we call deploy and pass the prepared stuff here.
00:23:25.694 - 00:24:09.820, Speaker B: Equal data will be like the same because it stored it. And here it is, contract from fruit start test is deployed. Okay, but how do we invoke, how would we invoke it? It's also pretty simple because we just used invoke and invoke takes three arguments takes contract address, which we have deploy. Also we can take it from the one like prepared. We need to pass a selector. Here we are going to invoke increase balance. So we call increase balance, just pass the function name.
00:24:09.820 - 00:24:53.254, Speaker B: And we need to pass call data differently so it won't be a complex, we'll get pretty same. But we define basically the same as we did before, only right now increase balance actually takes an argument, takes the one felt. So we need to pass it to the invoke. And what we just do, we pass it should be called that array, sorry. And we just call append in this array. So we add for example five to the array. It's only one felt as argument.
00:24:53.254 - 00:25:32.120, Speaker B: So we only pass it and it will invoke the contract and execute this. Okay, maybe there are a couple of questions about, because right now it's only one cell. Okay. But sometimes the arguments for metals might be a bit complex, so adding lots of elements and maybe some more complex structures might be a bit problematic. But we have plans to introduce nicer syntax sugar for that. But it won't be included initial version, it will be like included later. So this is it.
00:25:32.730 - 00:25:40.890, Speaker A: When you run this, what kind of output does it give you? How does it look like? So basically just say it pass or.
00:25:40.960 - 00:26:00.154, Speaker B: Does it right now it passes. Yeah. Okay. Cases, cases, cases. If you run this, prepare, for example, or you can run invoke here. Yeah. If you run invoke is a good example because you deploy the contract.
00:26:00.154 - 00:27:00.420, Speaker B: And for example you want to test if like we've given data, invoke will pass. So this one can panic if something fails behind and it will fail the test if it fails. So if it's just like right now, it won't give you any output because you don't want to have any output from tests you want to check, it only passes or not. But for example you were able to do, because it returns error from the call it contract. For example, if you want to specifically match for a specific error, you can do match, invoke. And sorry, if I don't remember properly, carry one syntax, I probably don't remember properly, but you can basically check if, for example, it will return some error, it will be okay. We can pattern much on that.
00:27:00.420 - 00:27:53.810, Speaker B: And basically, for example, it returns error, some error. We want to it to fail. But for example, we want to test to, okay, if I explain it properly, we basically can check what error has been returned by a given method. Okay, so you can test more complex flow here. But for example, if it fails, you can basically, can do error and pattern much into any and do a panic here, which is a bit more complicated to call because we also need to create an array for that. But also we can do an unwrap. If you are familiar with rust, it's a bit like you have to know carrier one to a bit, understand those flows because it's kind of really carrier one and rust flow.
00:27:53.810 - 00:28:45.860, Speaker B: But basically it gives a lot of flexibility. And basically what it does, it runs those cheat code like comments on underlying start instance. So invoke doesn't give you an input output. But for example, if you do a call, because call would also be similar smear flow as here. And if you do call, and of course call doesn't, for example without call data or into your git balance, you can for example, then later assert z equals five to unwrap it, probably because it returns result. Yeah, but something like this, I hope it makes sense.
00:28:47.590 - 00:28:48.354, Speaker A: Thank you.
00:28:48.472 - 00:29:53.260, Speaker B: Okay, so it's basically kind of flow is more standard I think because old test contract focused flow was a bit weird, like it was kind of something taken from foundry, but foundry actually does it this way only because solidity is not very good in being standalone language. And Cairo is, Cairo is much better than it. So we can leverage that and make much better flow and provide much better experience. And this is like a bit more understandable if you're coming from different languages because your test is just a code and you operate on some, like if you're familiar with Pytest, you operate some kind of fixture of startness. We kind of think internally about it like this. Yeah, so this is the flow also it will be like this is lot of code to just deploy a contract. So if you are familiar with older versions of Protestar, there was something like declare contract and it will be here as well.
00:29:53.260 - 00:30:01.580, Speaker B: So instead of doing the tedious declare, prepare, deploy, we'll be able to just call.
00:30:03.730 - 00:30:10.480, Speaker A: So Robert is asking in the chat, do you still need to define the available gas for these tests at the top?
00:30:11.010 - 00:30:13.022, Speaker B: No, for tests you don't have to do it.
00:30:13.156 - 00:30:15.360, Speaker A: No, for tests you don't need to. Nice.
00:30:17.970 - 00:31:20.582, Speaker B: For now, maybe there was some problems with that later because lots of questions we have right now are kind of open, but I don't think so it will be necessary and we don't want to do like we don't want to enforce it to users because it brings additional overhead. And for test you don't want to do that actually because I don't want to do that. And here we can just not deter, not deploy, do contract. And it does basically everything we did here and we have to unwrap it because it's like rust, like bezel, we will bind it if failed. So we can replace all of this, all of this with just this one. And it's probably more common scenario if you don't need some very high control upon things. Yeah, that's probably it.
00:31:20.582 - 00:32:13.800, Speaker B: In terms of demo, I can also tell about, because lots of people are using scarp right now, which is also like our tool. And it's probably pretty important how those two tools will interoperate, because right now Protostar has its own very primitive method of managing dependencies with GitHub modules, which is not the best one. And what we're going to do is basically protestar will become scarp test. So it will become the extension to scarp. So if you run something like comment in a terminal under the hood will use Protestar. So Everything Protestar has scar test will have in the future and you will be able to use, because Scarp has pretty nice dependency management and it really shines in it. It's much better than GitHub modules, it's designed specifically for that.
00:32:13.800 - 00:32:46.866, Speaker B: So you were able to leverage very nice product structure of scarp, and dependency management of Scarp, and just use Scarp to run Protostar, which will be like the testing machine behind. So that's it. And anything I suppose to say about it? No, I think that's it. There are any questions or maybe.
00:32:47.048 - 00:32:55.998, Speaker A: Yes, there is another question. Fox crypto boss is asking what you're showing. Is it in 9.2 already or is it still in development?
00:32:56.094 - 00:33:05.686, Speaker B: No, it's still in development. It's pretty far away actually, because we have like everything is supporting compiler only, plugging it to start and serial stuff right now.
00:33:05.868 - 00:33:08.250, Speaker A: So when will people be able to use this?
00:33:08.400 - 00:33:09.420, Speaker B: Few weeks.
00:33:10.270 - 00:33:11.226, Speaker A: Nice one.
00:33:11.248 - 00:33:24.646, Speaker B: Two weeks, I believe one probably is a bit optimistic, but two weeks I think if not major problems occur, because it's always like something may happen, but it's pretty close. So it's mostly developers.
00:33:24.758 - 00:33:33.678, Speaker A: And will the flow to, will you write scripts to deploy a bunch of contracts the same way? Will it be the same syntax or will it be a different kind?
00:33:33.844 - 00:33:36.110, Speaker B: You mean like scripts from CLi?
00:33:36.710 - 00:33:45.590, Speaker A: Yeah, like say I have two contracts and I want to write something where with one command I deploy these automatically. Will I be able to do it the same way?
00:33:45.660 - 00:34:04.780, Speaker B: Yeah, CLI will be like basically nothing will change there. CLI remains as it was. So basically the whole JSON structure is returned and whole bash CLi will be there. So nothing changed there only. We'll add new comments from start and CLI nice adapted to it.
00:34:05.550 - 00:34:15.326, Speaker A: I had another question regarding Kyra, one being written in rust. Is there plans for start to move to rust also?
00:34:15.508 - 00:35:12.058, Speaker B: Yes, it started very modestly. We are starting rewriting to rust. We have lots of technical, legacy technical stuff to go through, and it's not easy to because first is pretty big at the moment. It looks like we can just start it from scratch, but I think we have pretty decent plan how to approach your writing into rust. And it really seems, from my side, seems really executable and doable. I cannot promise the timelines on that, but we are starting working on that, and we really want to do that as soon as possible because we believe the biggest pain point right now in Protestar is the testing speed. It's still pretty fast compared to other style, but it's still biggest if you have bigger projects.
00:35:12.058 - 00:35:24.100, Speaker B: It takes a lot of time to test everything around the test, and we really want to improve that because it's critical for dev experience. Okay, cool.
00:35:24.890 - 00:35:30.630, Speaker A: I'm sorry you mentioned Scarb, but did you explain how Scarb integrates in Protestar?
00:35:31.690 - 00:35:40.410, Speaker B: Yeah. Okay, so basically what it happens. I don't have anything prepared to.
00:35:40.560 - 00:35:41.626, Speaker A: No, that's fine.
00:35:41.728 - 00:36:30.794, Speaker B: But if you have scarp tomu, I don't remember exactly structure. So right now, those two projects have the same, like, basically different configs. And the plan is to make protostardom, like, completely obsolete. And if you are familiar with poetry, they have something like tools. So you will be able to just basically define protostar config inside the scarp config. So it will be only one config for everything. And basically, when you want to run like, tests from Scarp, you will just basically have to install proto star, which is not determined how you will do that.
00:36:30.794 - 00:36:42.590, Speaker B: So I won't be able to answer this question, but basically you'll be able to lose carp test or some like Scarp protostar run tests through Protestar.
00:36:43.250 - 00:36:52.734, Speaker A: Nice. In the chat, Robert is asking how a user that worked with Scar will transition to Protestar with their existing project. Will it be easy?
00:36:52.932 - 00:37:41.290, Speaker B: It will be very easy. We are really working on that. So I think basically, if you have Scar project right now, there is still a problem with Protestar using Scarp dependencies, and we have currently pr for that. And I hope like next week what you only need to do like Protestar. Okay, so what will you do from next week? And it's pretty complicated. We will try to explain it properly in docs and we are not very happy that it's that complicated, but it's really hard to transition between different scenarios. But basically for some amount of time, Protestar will be able to already use scarp dependencies.
00:37:41.290 - 00:38:44.610, Speaker B: So if you have Scarp project right now, I believe next week or something like that, you'll just basically able to. Protestar will be able to read dependencies for Scarp Toml. So you'll still need Protestar Toml to configure Protestar stuff, but you will able to compile contracts, defined contracts and Cairo code defined in scarp and use it in tests. So basically Protestar will find your scarp tumble if you have it and read dependencies from there. So it's basically like, if you know, old like Protestar carapath, it will basically extract this caropath from scarp config. So it's basically be effortless for user and we'll make sure we all document it properly because maybe what I'm explaining right now is a bit hard to understand, but no, it will be very easy. And we keep in mind that people started working on projects with Scarp and there won't be much effort to do the transition.
00:38:44.610 - 00:38:55.046, Speaker B: Cool. And that's probably all my side. If any other questions I can answer as well, if there are any, let.
00:38:55.068 - 00:39:19.422, Speaker A: Me check, but it looks like we've covered most of them. All right. Well, Max, thank you for your time. Sorry for the difficulties in broadcasting in the beginning. And thank you for your work on Protestar. It's definitely a very useful and important tool for the ecosystem and I can't wait to see how we can use it with Cairo one.
00:39:19.556 - 00:39:42.374, Speaker B: Yeah, also very excited for that. And thank you for the time to speak and tell a little bit because I'm also really excited to release that things already and hear the feedback from users because it was developed under development for some of time I some time already and we are excited to release that. So we're happy for that and hope it will be good. If not, we will.
00:39:42.572 - 00:39:47.170, Speaker A: Yeah, wonderful. All right, thank you, Max.
00:39:47.250 - 00:39:47.606, Speaker B: Thank you.
00:39:47.628 - 00:39:49.010, Speaker A: Thank you everyone. Bye.
