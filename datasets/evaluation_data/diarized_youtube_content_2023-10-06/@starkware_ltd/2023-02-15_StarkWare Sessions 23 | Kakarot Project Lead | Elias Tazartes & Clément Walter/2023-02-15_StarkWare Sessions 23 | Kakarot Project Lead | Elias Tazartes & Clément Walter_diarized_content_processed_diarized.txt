00:00:00.360 - 00:00:17.580, Speaker A: You. Hey, everyone, thanks for being here. My name is Elias and we're going to talk about the Kakarot z kVM today. I'm a software engineer. I'm 25. I'm french. I've been involved in crypto for over three years and building on Stocknet, leading cacao with Clemont.
00:00:17.920 - 00:00:27.700, Speaker B: So I'm Clemon, I'm a machine learning engineer. I've been in crypto for a year and a half, and so building Kakarot for four months now, especially with Elias.
00:00:29.480 - 00:01:05.564, Speaker A: Today we're going to go through why. In my opinion, Zkvms are the scaling dream for Ethereum right now. How we have a competitive advantage in Kero, our dna and our vision. First, maybe a bit of primer for those who don't know the EVM, the Ethereum virtual machine, what it is, it's a distributed state machine where all the smart contracts and storage live in an Ethereum like chain. So mainnet, Polygon, et cetera. It's a stack machine computer architecture. And for those who know, it differs from kero in that kero is based on KeroVM registers.
00:01:05.564 - 00:01:51.032, Speaker A: Here, it's a stack machine. So what are ZkevMs really? They're eVMs in the sense that you can build in solidity, viper, Yule, deploy your smart contract and interact with it with normally the basic tooling, metamask, hard hat, foundry, dapps. And the key difference is in scaling, is in gas cost and or scaling performances. In layer one, Ethereum, when you send a transaction, it's re executed by every node in the network to check its validity. Whereas in ZK context, in ZK rollups, you execute your transaction once you generate a validity proof. And for the rest of the time, this is going to be validated. Of course, in rollups, this is simplified.
00:01:51.032 - 00:02:25.384, Speaker A: In rollups, you batch a lot of transactions and you validate the state diff. So why zkey vms, right? I know Abdel, I know. Louis retweeted this tweet. It's a bit of a hot take on Zkey vms. The race to zkvms. It's basically saying that why go to z keyvms when the ZKVM was not built for ZK? So you might as well build a very intelligent language such as Kero. Build a ZK VM without the e, and then you have a new DSL and a new community to build.
00:02:25.384 - 00:03:11.048, Speaker A: But it's made for ZK, so why focus on solidity? It's still young, we can still change my take is that you can keep the network effect of Ethereum and still conquer the innovatives at k scaling. I think there is some price to pay, which is performance. Right now, say a native Ko program will run at some speed and Kakarot will have some overhead, maybe two x to ten x. So there is some price to pay. But right now we feel like Kro is accepted is the new best language. But we have to remember we're in some kind of echo chamber and users are really lost. And in the recent years the maximum they've gotten used to is metamask, some dapps, maybe ave curve and not much more.
00:03:11.048 - 00:03:19.080, Speaker A: So it's a lot to ask to all the users and all the developers who know their basic pipeline in RDAT foundry to switch.
00:03:21.920 - 00:04:14.380, Speaker B: So I'm going now to give more details about exactly what's Kakarak today and how it works. So in this schema you can see the usual, I would say, distinction between the Ethereum main net l one at the bottom, at the top, the Stacknet l two network. So this is the stacknet as we all know, as we all use most probably. And on the left hand side you can see there is a user. So this might be you or Elise mozzarella if she's here, maybe. So the user, as you could expect from an evm, wants to sign the transaction using say, metamask or any of these wallets that he managed to install one day. So the role of Kakarot on its own, and first, the role of the Kakarot RPC node is to take this transaction, sign with metamask and to sort of rewrite it a bit to send it to Starknet.
00:04:14.380 - 00:04:54.280, Speaker B: So this is something that you really have to understand. And compared to some other people that talk about Zke EVM, we are a smart contract on Starknet. So we have not built a blockchain yet. It might be required some days, but as of today what we did is that we used Cairo as a language, as we could have used any other language. You could have used go rust to make a client. So what we did actually is what people did when they build get or what they build, they use a language and they write an EVM interpreter. We did this, we used Cairo and we put this interpreter on Starnet in a smart contract.
00:04:54.280 - 00:06:31.636, Speaker B: So at the end of the day, what happened is that when the user signed a transaction, we make a small translation and we send it to the Starnet blockchain. And actually it's interpreted by the Kakaot smart contract that will fetch say the bytecode stored in other Stacknet contract as in any other Stacknet based DAP, and then it will execute everything that needs to be executed and return the result to the user. So it means that in a sense all the applications that are deployed meant to be used with Kakot, the application on Starknet, which means that all these applications that are deployed with solidity executed in Starknet, they can communicate with all the application that are built in Cairo and deployed in Starknet as well. So it means that compared to a tool that you might be used to like warp, that helps only developers build on Starknet because it converts the solidity code into Cairo code that is eventually published to Starknet, we let the user still use the metamask wallet that he's used to, the developers use foundry or the tool they are used to. But we are still living in the same world. We don't split the TVL, we don't create a new small ecosystem. We are just here sort of to make this possible to use solidity in Starknet.
00:06:31.636 - 00:07:23.924, Speaker B: But we still realize Starknet. And the truth is that we have a clear distinction between our role and the role from Starquare. Starquare has been creating the ZK context, which is the language Cairo and the Starnet OS. And we have just been building the EVM using this context. And at the intersection of the bus there is of course this amazing language, Cairo that we use and that we love. And there is not only a language, but there are also like I would say in the beginning, two kind of people that managed to merge as well to create this ecosystem to Kakarot ecosystem. So we first had, I think Shah back in July that tweeted about the possibility to use Shah is here, the possibility to use his language, I mean the language Cairo to build an EVM.
00:07:23.924 - 00:08:33.596, Speaker B: And so people from Starquare, especially Abdel here, the exploration team started to think about this and some other people in some other community led by onlydest thought that, well, why not taking this change as well? It happened right before, I would say Lisbon, Akatan and eventually from two teams, we realized that, man, why not making just one team? We may go further. So of course I would say that some of the people that were here at the very beginning, and especially the exploration team and in person Abdel, he was not alone. But especially Abdel has had an important role, I would say, in structuring all these efforts and making the very beginning, I would say right decision about the structure. Unfortunately, at some point we have had to, for a view security reason, remove some of its work. So it happens. Abdel no worries. So I have said this is really, and this is not a joke, a community driven effort and we have been so far, I would say in three months because lots of people have just joined the work and not meant to be on their own, but just be here.
00:08:33.596 - 00:09:14.584, Speaker B: So we are now a team of more than 30 contributors. Some companies are here on the right and left because they give a stronger support, I would say either human support, financial support, it's just about grants and people that just come in and do a bit of development and they get funded. So they stay and they like the spirit. The youngest, I think contributor that we have is only 16 years old. He couldn't be here today because he had to work for a high school. So it means that you are all welcome to just be here and try to do something. And I think that you will stay this technical.
00:09:14.584 - 00:09:43.380, Speaker B: I would not talk about this. Yeah. Where we are today and what's next. So we are not on the 6th spot here. There is a problem. We are on the third, only the third. So starting out as a smart contract on startnet to build an MVP, this MVP is almost done, meaning that right now we are on 70% done in the RPC node, the EVM itself, the interpreter is deployed on Testnet and works, I would say perfectly.
00:09:43.380 - 00:10:27.204, Speaker B: We miss one pre compiled the pairing precompile and there might be some bug somewhere, of course. So then we will be able to make some end to end testing using Metamax and stuff. This is the third dot where we are in a month, maybe in a month and a half. And then there is this open question regarding interoperability. Either we want to stay on Stacknet if it's reasonable in terms of overhead, and with the announcement that they made with the evolution with the Stacknet zero point 13, maybe with Carol 1.0, the overhead will be completely reasonable. To stay like that, maybe we will need to do differently and to create an option or to move on to something like an l three.
00:10:27.204 - 00:10:42.088, Speaker B: These are completely open question. We will discuss this question in the community call that we have weekly community call. So again, feel free to join these calls. And yes, I think that if you have question, we are here now to answer this. Thanks.
00:10:42.254 - 00:10:43.210, Speaker A: Thank you.
00:10:51.000 - 00:11:54.790, Speaker B: Yes, not necessarily so. There is a deterministic mapping between an EVM address and the counterpart in starknet. So each contract being either each account, say contract account or an external account has its own counterparts as a Stacknet smart contract. So in the call upcode, depending on the address that you target, if it's like 160 bytes, or if it's 251 byte bits, not byte bits. Anyway, you can know what type of contract you are trying to call. And we can also make this a bit easier as well. Writing, I would say sort of a bridge, not really a bridge, but a bridge contract, say in solidity, so that for the developer it's easier with the possibility to use an interface as you would do in solidity.
00:11:54.790 - 00:12:47.112, Speaker B: But once again, thanks of the addresses, then it's possible just in the colop cut to make a small change. The question is, how is it possible to make this solidity developed? Contract interact with the starknet contract. So K robot contract? Yes, it's not. The thing is, I love Cairo as well. So I would not say Cairo is not a good language for writing certain facts. I think that you need to understand. There is the developers, but there are also the users.
00:12:47.112 - 00:13:25.816, Speaker B: So there is an ecosystem of tooling for the developers that you may still want to use. I mean, I love Cairo, but the tooling is not as good as the one that we have now in solidity. So you may want to start with the tooling that you have. That is a good one to go fast, deploying some solidity still on starknet. And then you know that with a good infrastructure, because you can still call normally starnet smart contracts, you can replace contract after contract, maybe with a proxy pattern, some part of your smart contract to make it more efficient. And on the other end, there are also the users that may not really be aware of the differences between the blockchain. So they want to keep the metamask that they have, they want to keep the address that they have.
00:13:25.816 - 00:13:54.608, Speaker B: They don't want to say, okay, if it's on this chain, use this address and this chain, use this other address, and so on, so forth, so on both end, I think that there is a business need, and the trade off is less efficiency, a bit more cost maybe, but it's maybe easier to start with. Yes, it would be about computational efficiency, a bit more costly, I think, for the user.
00:13:54.784 - 00:14:35.852, Speaker A: But essentially maybe we didn't address the fact that Kro was built for ZK and the EVM is not built for ZK. So there is an inherent problem with Zke evms is that they are trying to make solidity, or the EVM as an architecture fit into ZK. And so inherently there is a problem here because solidity and any other type of architecture was not meant for it. So we suffer from it and we have to find trade offs to make it work. So this is why we talk about performance, overhead and so on and so forth. And then I guess your question was like, why is ko better than solidity? I guess it's good because it's built for ZK. It's more modern.
00:14:35.852 - 00:14:54.040, Speaker A: It has all the problems of solidity that we've been fighting for five years. And then they leapfrog and they make it. They learn from the mistakes. Solidity has the network effect and Ko has the thought that has been accumulated. The experience in ZK, in opinionatedness, so on and so forth.
00:15:00.180 - 00:15:01.970, Speaker B: No more question. Someone.
00:15:03.700 - 00:15:06.270, Speaker A: Thanks everyone. It was a pleasure. We had fun.
