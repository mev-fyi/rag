00:00:00.570 - 00:00:01.120, Speaker A: You.
00:00:02.770 - 00:00:50.340, Speaker B: And we're live on YouTube also. Very nice. There's a delay of about 20 seconds between there's a delay of about 20 seconds between Zoom and YouTube. All right, so for the people looking, watching on YouTube or here on Discord, welcome. This is community call 21. We're going to start in a few minutes. We're just going to let a bit of time for people to connect.
00:00:50.340 - 00:02:56.816, Speaker B: And today we'll talk about two things. So we have today with us Lori, who is going to talk about his experiments around multi signature wallets on Starknet. Then we'll talk about the upcoming zero point ten version of Cairo Lank, which is packed with new features and breaking chains. So we figure it would be a good way, a good thing to talk about it. And we're going to start in like two, three minutes. It. So people are connecting little by little.
00:02:56.816 - 00:04:22.696, Speaker B: We have now about 30 people, 33 people on Discord. Welcome all. We're going to start in a minute or so. And today we talk multi signature wallets and the upcoming zero point ten Cairo version. As usual, you can ask your questions either in the comments on YouTube or you can ask them on Discord in the community calls channel. During the last community call, I was explaining to Laura, it's kind of a hassle because a lot of people are on discord and it feels like YouTube is easier to use because it's just one medium. We just use Zoom.
00:04:22.696 - 00:05:15.132, Speaker B: And if we use Zoom and Discord, then there's this weird echo where basically you get the sound of you talking from Discord and from Zoom and super bothersome when you're talking. But at the same time, we did try to do some clinical on YouTube and it turned out like a lot of people didn't connect and didn't listen. So I'm not sure what's best. It seems like we're losing people if we're doing just YouTube and we're losing content if we're doing just YouTube, we're losing people if we're doing just YouTube and we're losing content because we can't show stuff if we're doing just discord. So not sure if there's a right answer to that. So we'll see what we do in the future. All right, it's 236.
00:05:15.132 - 00:05:53.450, Speaker B: I suggest we start. So welcome. On our 21st community call today, we're going to talk about two things. We have Laurie here, who will talk about his work on multi signature wallets on Starknet, and then I'm going to talk a bit about the upcoming Cairo release zero point ten, what it includes and how devs should prepare for it. All right, so let's start. Laurie, welcome and thank you for joining us today on the community call. Can you introduce yourself in a few words, please?
00:05:53.980 - 00:06:22.630, Speaker A: Yes, sure. Hi everyone, Laurie Belton, and I'm working at Equilibrium. You are probably more familiar with the name from the Pathfinder node, which we are also building, but we have another team, which is me and a few other guys working on a multi signature solution for Starknet. So I thought I would come and say a few words and show a few pretty pictures and discuss how multi signature works in general.
00:06:23.080 - 00:06:24.740, Speaker B: I love pretty pictures.
00:06:25.560 - 00:06:26.660, Speaker A: Who wouldn't?
00:06:28.920 - 00:07:07.110, Speaker B: So just let me say that for those of you who want to see Laurie's screen, I'm going to share the link, the YouTube link in the community call channel. Let me find it. We have so many channels now on discord. It's impressive. There it is. There we are. And I tagged everybody.
00:07:07.110 - 00:07:14.100, Speaker B: All right, so now you get the link, you can see Laurie's screen. Laurie, the floor is yours.
00:07:14.860 - 00:07:31.870, Speaker A: Thanks. So let me share my screen. This one might be matched. I guess it's right screen.
00:07:35.840 - 00:07:38.830, Speaker B: I didn't get what you said, but we can see your screen now.
00:07:42.000 - 00:08:40.642, Speaker A: So you see it correctly. Okay, so as I said, we'll discuss multi signature and what it means and what kind of options there are. So I will first show a bit what is multi signature and then display a bit what we have been working on lately, the Starshine project. And then it seems everyone is talking about account abstraction around startnet. And it really is such a cool thing that I have to include it also here and a few words about what it means in the context of multisignature. So if we have our traditional setup without anything called multi signature, we have a private key, we have a user with a private key and he wants to interact with some contract which has some restricted functionality. For example, only the owner can call some functionality.
00:08:40.642 - 00:09:53.870, Speaker A: So what he does, he signs a transaction with his private key to the contract, and then the contract executes based on his address. But the problem with this kind of approach is that some attacker, if they get this private key or somehow social engineer the user into doing something, then they have full access to the contract. So we would like to have a few more safeguards here. If someone loses their private key, what can we do? So the whole contract is not compromised and what do we do with multisignature? So what it basically means is multisignatures are way of signing data so that it requires multiple private keys to sign some data, to have access somewhere. This is a typical setup for some multisignature. It can be just for one user with multiple devices, for example, or with multiple people using whatever devices they want. But the whole point is that there's multiple private keys which have access to the multisignature contract, and then that multisignature contract has some special access to the real contract.
00:09:53.870 - 00:10:50.718, Speaker A: So even if an attacker gains some access to one private key, somehow, it doesn't still compromise the end contract because the attacker would need all the private keys, or at least enough of them to be able to do something restricted in the final contract. So this is a way to safeguard your important access to contracts or whatever assets and whatever important things you have in some contracts. So what we have been working on is a project called starsign. It's a pure multi signature contract on top of Starknet. It doesn't have lots of bells and whistles at this point. Basically what we have is you can create a new multi signature contract and then you can use it in various ways. So here's just a screenshot of what it means to create a basic multi signature.
00:10:50.718 - 00:11:35.920, Speaker A: You write the addresses who have access to the multi signature. So these addresses are basically owners or signers in the multisignature contract. And then at the bottom you see how many of those addresses need to sign a transaction for it to be accepted. So in this example, you need one signature. Of course it would make sense to add another address also there. And basically the more you need signatures and the more you have signers, the more secure it is. But if you have 500 signers and you need 100 signatures, you will never get anything confirmed, because takes an eternity to hunt down 100 people to sign some stuff.
00:11:35.920 - 00:12:08.490, Speaker A: So it's a trade off. And once you have a multi signature contract, then you can have issued transactions from it. Here's an example of an ERC 20 transfer. So you put the token address and who should receive the token and how much. And we are planning next month, we are basically having an audit month for our contracts. And after that we hope our user interface is also ready for the product. And then we can launch everything in testnet around October.
00:12:08.490 - 00:13:25.380, Speaker A: Let's see how it goes. And then a few words about account of abstraction, what it can mean in the context of moldy signatures. So I think the best part here is that the moldy signature can pay for all your transactions. So for example, you can just store 100 or whatever million tokens, gas tokens in your moldisignature and you can set it up so that the multisignature can pay for all the gas costs. And this is like a huge user experience enhancement if you compare to something like ethereum, where you always have to have the ethers to pay for your gas costs. Of course, if you have something like off chain signatures, then you don't necessarily need the gas cost tokens or ethers. But currently we only support on chain signatures, but more stuff will follow and then we can allow different identifications, maybe just different signatures, kms, maybe even you can sign with metamask some stuff, and maybe you don't even use keys, maybe you use something completely different.
00:13:25.380 - 00:14:33.426, Speaker A: And whatever restrictions you can think of, maybe you can only interact with certain contracts or whatever. Maybe once a day is too much or something. The challenging part with account abstraction currently is that the wallets are not very supportive. They will have support for kind of choosing a custom account contract for yourself, but it's a bit tricky currently. So what we are hoping, and we need to keep on discussing with the wallet providers that when would wallets provide a possibility to switch your account contract in an easy way? It will come, but let's see when it will come. And then I was googling for some pictures about multi signatures and I found something relevant. So that's my slides and I think, Henry, you wanted to talk about these motor signatures between different l one and l two s.
00:14:33.426 - 00:14:36.154, Speaker A: I was also looking into it a little bit.
00:14:36.272 - 00:14:45.020, Speaker B: I already have so much questions, but yes, I'm definitely also interested in having the different l one l two stuff.
00:14:46.350 - 00:14:50.938, Speaker A: Yeah, well, we can go through the questions also, or however you prefer.
00:14:51.034 - 00:15:14.646, Speaker B: Wonderful. Okay, cool. Thank you a lot for this presentation and for this works. I think we often underestimate how important basic tools like multisignature wallets are, how important they are in an ecosystem. And it's really cool to see the community working on that. So congratulations on that. Yeah, I have some question actually for you.
00:15:14.646 - 00:16:18.620, Speaker B: So you mentioned that I think you answered that question. But there are various ways you could design multisig wallet. You could design a multi sig wallet like in bitcoin, or not necessarily like in bitcoin, but basically you could aggregate signatures off chain and have an account contract that will just verify one signature. Right? We could both sign something in common off chain and just provide one signature to the chain that will verify that at least two of us signed. Right? We could do something like this. We could also sign both separately and send both and have the account contract validate this. Or we could have something that is closer to what is done on ethereum, where it's basically a smart contract that will have my account contract interacting with it and your account contract interacting with it.
00:16:18.620 - 00:16:36.400, Speaker B: And if I'm not mistaken, this is kind of how say gnosis for example, works on l one. I'm curious which road you chose and why. And if you think this is something, which solution did you choose and why?
00:16:37.890 - 00:16:48.820, Speaker A: The account contract solution or the approach would be like really ideal, but it's harder to implement and it's not so well supported, so we don't want to do that at least yet.
00:16:49.510 - 00:16:55.350, Speaker B: Why is it harder and is it not supported?
00:16:56.250 - 00:17:23.310, Speaker A: Well, if you open your Argentex or Bravos wallet currently there is no easy option to switch. Like I want to use non standard account contract because that's what you would need here. This would be a non standard account contract, so you cannot easily switch between account contracts. You can create different accounts, but they all have the same default account contract underneath.
00:17:24.370 - 00:18:05.662, Speaker B: Okay, I think I see what you mean. What you mean is that right now you could build the smart contract, but building the UX on top of it would be a hassle. And also I'm guessing that if you wanted to have off chain aggregation of signature, you would have to have some kind of architecture to facilitate the flow of this transaction. Like say you have a multi signal on bitcoin, there's no way you can sign something. You need to transmit the signature for the other people, the other person to sign also. And so you need some kind of communication. So this means that you need to have either a server in between or some kind of transmission layer in the middle.
00:18:05.662 - 00:18:13.054, Speaker B: So of course it's more work and it's infrastructure that's harder to have.
00:18:13.172 - 00:18:41.720, Speaker A: Right? Yeah, we were actually talking with the gnosis people on a related topic and they said that yeah, in theory you can run our infrastructure, but it's a nightmare. So at least they have the experience that it's a nightmare to run and probably to implement. But if you want to have off chain signatures, in theory, of course you can let the users just send to them by email to the next user, but that's not going to work ever. So you have to have something.
00:18:43.210 - 00:19:24.040, Speaker B: I mean, I agree with you, but in a way it's kind of like saying, oh, it's too hard to have your own architecture, so let's just use the chain for that. But there's a cost associated to it, right? It's not like it's free to use the chain. Hey, you know what, maybe I should talk with one of these guys developing a node. Maybe they could have some kind of PTP layer on top of, let's say Pathfinder to have this kind of thing. Is it something that we could look for? I don't know how close you are to the Pathfinder team and I'm just thinking out loud, do you think it's something that you could add? You could have a node that has an extra API that allows multisig signature to circulate. Not really. What do you think?
00:19:25.130 - 00:19:49.754, Speaker A: Of course it's possible. If there would be some sort of plugin system or something like that. That's one possible alternative. But what we were actually thinking at some point would create this kind of. Some sort of registry contract where we register some of this stuff. It helps a bit, but it wouldn't really solve the issue. But doing through node would be an interesting approach.
00:19:49.754 - 00:19:51.680, Speaker A: I haven't even thought about that.
00:19:54.290 - 00:20:24.460, Speaker B: There are so many things to imagine, so it's just random id. Okay, cool. So right now you basically chose to follow the path of how it works on Ethereum, which makes sense because first for users it's easier, it's easier to do workflow they imagine. And running your own infrastructure, as you mentioned, can be really complicated. Still, do you think there are merits to the other approach? And do you think you can have some kind of in between? How do you think about these things?
00:20:25.870 - 00:20:29.498, Speaker A: Sorry, which other thing? You mean the off chain signatures are.
00:20:29.584 - 00:21:15.340, Speaker B: Yes, off chain signature. And basically. So the road you chose is that the multi signature wallet you built is a contract. It's not an account contract, it doesn't have a validate endpoint, for example. So you need to have an account contract calling this and then executing from this wallet. There's another path you could have chosen with a dedicated validate method inside your multi signature that would validate various signatures or work in a bunch of different way, but actually making the multi sig an account contract, do you think this is an approach that has some merit and do you see some, I don't know, some overlap or some evolution with that regard?
00:21:15.870 - 00:21:29.680, Speaker A: I think definitely that is a direction we will want to take. But I don't see any way to overcome the wallet obstacle currently. So even if we have the product built, there's no way to use it. So that's a bit.
00:21:31.330 - 00:21:35.680, Speaker B: I see what you mean. So you would have to build an interface on top of it.
00:21:36.210 - 00:21:40.000, Speaker A: Basically we would have to create a wallet. And that's not the funnest thing to do.
00:21:40.370 - 00:22:07.770, Speaker B: I see what you mean. Okay, cool. An extra question. So you showed us an interface where you could transfer an ERc 20. Is this a UX thing or is this something that is inside the contract? Meaning can your star sign account do any kind of transaction or can you do just the things that are defined in the UX you showed us? And is this something that is in the UX or is it something that is in the smart contract?
00:22:08.590 - 00:22:42.600, Speaker A: The smart contract is very flexible. It doesn't really care what kind of transactions. So this is a UX thing, probably the token transfers are the most common thing. So that's one option, but there's also another option for arbitrary transactions. But those are of course very much harder to craft currently because you have to really know what you're doing to create the parameters in correct format and that kind of stuff. So that's one area we have to improve a lot, like how to make that more intuitive. But it's possible currently to do those, but it's difficult.
00:22:44.090 - 00:23:19.700, Speaker B: Very interesting. Thank you. And so we talked about it a bit, but you mentioned that something that is a big factor into what you can do and are not. Is wallet integration, is wallet integration a prerequisite for what you're doing now, the approach you're doing now? Or do you mean just for the, if we were to take the account contract road or do you need specific fringe from wallets in order to have starsign have more features in the near future?
00:23:20.390 - 00:23:40.070, Speaker A: Well, the current version doesn't really care about your account contract. So you can use whatever wallet or whatever account contract you want to because this is called after the account contract. So this is just basically a normal contract just like any other contract. So in that sense this is very easy to integrate anywhere.
00:23:41.450 - 00:24:49.674, Speaker B: Very nice. Okay, cool. Also, by the way, I was talking, I think actually with both Argents and Braavos and I was telling them that we have a lot of people who want to try to do stuff around account contract. And people are kind of like, yeah, well, I want to design my own account contract, but then I won't be able to use Argent and Bravo. So what can I do? And it turns out that neither extension checks what's the bytecode of the account contract it's pointing to? So they disable it because they don't want regular user to do it, which makes sense. I mean, they don't want people basically the fear is that the possibility is the following. You can upgrade, your account contract is upgradable, so you can upgrade the version that is behind it, but they're afraid that somebody will spawn up a fake website and then trick you into upgrading your smart contract account to a malicious version and steal everything you have, which is a decent fear.
00:24:49.674 - 00:25:27.270, Speaker B: I think it will happen eventually. So they disable the functionality for you to upgrade your account contract inside their extension. But you can extract your private key and you can do this call manually through the CLI. So it's not perfect obviously, but for developers who want to write their own account contract and want to try stuff around that, there's a possibility to go into builder mode and pull up the hood and actually manipulate stuff like that. Just figure I'd mention that.
00:25:27.420 - 00:25:42.160, Speaker A: Yeah, I think either of the wallets, even if you want to add a custom network, it asks you what is the account contract address? So in theory you can use custom one, but it's just not a road like most users would go.
00:25:42.690 - 00:25:43.840, Speaker B: Yeah, for sure.
00:25:45.330 - 00:25:47.040, Speaker A: Doable, but not fun.
00:25:48.950 - 00:26:07.720, Speaker B: Very nice. Cool. So these were the questions I had. So you were mentioning l two wallets, did you mention it because it's something I mentioned or did you give it a thought or what do you think about that?
00:26:08.650 - 00:26:41.490, Speaker A: Yeah, actually you mentioned it originally and then I was looking into it a bit and I found some projects which do it already and they had some really cool features. So there's lots of stuff happening around there. And I think it's a really interesting possibility that you could sign stuff on l two, which is cheaper to execute something on l one. So all your basically signers could be on l two and then even the real contract will be on l one or other way around or a mix and match. I think it's a really cool concept.
00:26:41.910 - 00:26:46.980, Speaker B: Nice. Do you remember what the project who does that is? I'd be curious to take a look.
00:26:47.750 - 00:26:50.642, Speaker A: Snapshot X was looking at.
00:26:50.776 - 00:28:03.834, Speaker B: Yeah, for sure. Snapshot X are working on. The broad concept is aggregating user interactions on l two because it's cheaper, and then executing something on l one, which makes sense. And we also have one of our community member called Otman worked a bit on that and he did something around that. That's definitely interesting. And funnily enough, I was thinking about that, thinking, oh yeah, of course you want to aggregate user interactions to do something on l one. And then I got to thinking about how the other way is also very interesting because let's say you're an app on Ethereum and you already have your governance set up and you want to deploy an app on Starknet, you want to deploy a version or an extension of your app or whatever you want to deploy with an existing governance on l one, something on Starknet? Well either you re implement governance on Starknet and you need to have a new set of tools and you need to train all your members to use the same thing, or probably you're going to end up having to need this to do the same thing.
00:28:03.834 - 00:28:32.214, Speaker B: But from l one to l two, you're going to have to have an l two account that receives instructions from an l one multisig and executes stuff on Starknet. I think it's a fun concept, but yeah, I call it remote control account. I actually want to try to put a small PoC but yeah, it's fun to imagine a smart contract that's just on one layer and receiving instructions from the other one and just doing stuff.
00:28:32.412 - 00:28:36.520, Speaker A: Yeah. And you can even mix like some users can be on l one and someone l two.
00:28:37.850 - 00:29:33.130, Speaker B: Yeah, definitely. We were also exploring ids around recently around soul bound tokens. One of the difficulties around soul bound tokens on Starknet is that by default your account contract authenticates you thanks to a public and a private key. And you can change these. So how do you make ownership of inside an account contract soul bound? How do you make it? Sure it's not tradable because you could trade your account contract and change the public key. So probably the easiest way would be to just have an account contract where you can't update the private key. But there are other designs and one of them would be to basically have an account where you could always override who is the private key to manipulate that account from l one manipulated by an EOA.
00:29:33.130 - 00:29:40.140, Speaker B: And so it's a fun design space. So you can imagine all sort of fun stuff.
00:29:40.670 - 00:29:55.120, Speaker A: Yeah, I think all the account contract stuff, everything related, it gets weird or fun or strange and there's so much stuff to come. I feel. I just don't like to even comprehend what kind of stuff people will come up with.
00:29:56.770 - 00:30:26.380, Speaker B: Yeah, definitely. I think you can imagine so much things and I think what's really cool with what you guys did with starsign is that it's good to imagine stuff. It's also good to implement them, have them working and then iterate from there. So congratulations again on what you did. Where can people try star sign? How would you advise them? Do you guys have a website or a repo? How can people interact with what you guys built?
00:30:27.230 - 00:30:42.800, Speaker A: Well, in theory you can go to our GitHub and get the stuff from there, but because it's not audited yet, that audit is coming next month. So we are not really encouraging it. So we don't really advertise it, let's put it that way.
00:30:43.650 - 00:30:53.186, Speaker B: Okay. But let's say I'm a dev and I want to try and mess around with stuff. Where should I go then?
00:30:53.208 - 00:31:10.840, Speaker A: You probably should go to our user interface repo. I don't have the address right here, but you will find it through the eqlabs GitHub and then basically you can check some branch there which is already deployed and you can go play around with it.
00:31:11.370 - 00:31:27.630, Speaker B: Let me check if I can find the GitHub to post it right now. I'll take a look later on. Okay, very cool. So anything to add on multi signature?
00:31:30.920 - 00:31:35.030, Speaker A: No, if people have questions, of course.
00:31:36.600 - 00:32:10.016, Speaker B: I think for now we've covered most of my question, so thank you a lot for your time. And we will move on to the second part of the community call, which is the zero point ten upgrade of Cairo Lang. Feel free to stick around, by the way. That way I don't often get questions during community calls and if there are some things I say that are weird, please ask questions. I'd be grateful. It also feels less lonely if you can stick around. Cool.
00:32:10.016 - 00:32:45.070, Speaker B: All right, so let's move on to the second part of our community call. Let me bring up the page for Starknet zero point ten. So again, for people who are on discord, we posted on the community calls channel a YouTube link where you can see my screen. So feel free to go there. You can also ask your questions there. And if you have questions you can also ask them in the community calls channel on Discord. I'm just going to re share my screen.
00:32:45.070 - 00:32:47.900, Speaker B: Boom. That's what I wanted to show.
00:32:47.970 - 00:32:48.492, Speaker A: Perfect.
00:32:48.626 - 00:33:29.690, Speaker B: So I want to talk about the upcoming Cairo Lang version, which is zero point ten. I realized recently that some people confuse this with Cairo 1.0. So let me clear this first. So Cairo 1.0, you're going to hear about it a bit more in the next two weeks. We're preparing a post to explain what it is exactly, and what it is will be broadly a new compiler for Cairo which will come with a bunch of features. I'm not going to get into it right now, but this will come most likely later this year.
00:33:29.690 - 00:33:58.292, Speaker B: We don't have a fixed date for that, but it will be a big change to the Cairo language. Don't fear these changes. We will make sure that you get all the proper guidance and it's going to be easy to move from one to the other. But that's not that. Cairo Lang zero point ten is new version of Starknet and Cairo, like the one we did a few months ago, a few weeks ago, which was 0.9 and before that 0.8 and so on.
00:33:58.292 - 00:35:01.092, Speaker B: So it adds a few feature and it helps the network evolve. So first I'm going to cover all these points, and I'm going to start with the validate execute separation. The goal of this document here is to give a broad overview of what will be included in this version. There are more stuff and we'll get back into it for future community call, but I wanted to cover it right now to start. So the first thing that you will see in version zero point ten will be the validate execute separation. If you ever looked at an account contract, you notice that there's an execute endpoint like this, right, with two underscores before and execute basically was in charge of validating that you can execute your transaction and executing it. In order to make the network more resilient, we need a way to separate validation of the transaction.
00:35:01.092 - 00:35:54.868, Speaker B: Meaning can the transaction pay for itself and execution of the transaction? Meaning is the payload valid? So this version 0.9 include the first steps toward that which will be having two endpoints instead of one. In your account contract, you will have a validate endpoint that will basically validate that. The authentication mechanism you designed for your account contract makes this transaction valid, meaning the smart contract accepts to execute it and accepts to pay for it. Then it will have a second endpoint that is execute. Of course, right now Starknet doesn't have a way to authenticate whether your transaction failed or not. Your transaction either is executed or is not executed, but it can't fail.
00:35:54.868 - 00:36:41.080, Speaker B: In the future, it will be possible for transactions to fail. So right now this is just the first step to get towards that. So you'll have these two new endpoints. The second part which is associated to that, is that obviously you don't design a transaction the same way whether you're sending it directly to the execute endpoint and whether you're sending it to the validate, then execute endpoint. So we introduce a new transaction version. So up until now your transactions were crafted that way. You had to specify the selector and you had to send everything to execute, and the version was zero.
00:36:41.080 - 00:37:48.444, Speaker B: In this new Cairo zero point ten version, you will have version one where you'll have to, well, you have to specify your version, and you won't have to specify anymore the entry point selector you're sending. All right, so new transaction version and new validate execute workflow. The third big change will be the introduction of nonces to the protocol. So up until now, oh yeah, I forgot to mention about transaction versions. Both transactions zero and one will be accepted in zero point ten and probably in zero point eleven versions of the protocol. But eventually version zero will be deprecated. So what this means is that if you're an app and you design, you write software that sends transaction, you need to start working on moving to version one of transactions right now.
00:37:48.444 - 00:38:35.470, Speaker B: This is just a way for you to get time to deprecate version zero before version one becomes in forts. So you should get familiar with these formats right now and start working on this. The third thing that will change is the introduction of nonces into the protocol. And for some people this will break things right now. So up until now, nonces were not mandatory in your account contract or in the protocol. Basically, your account contract was in charge of making sure that when you send a transaction twice to the same account contract, it doesn't get executed twice, which is what people usually call replay protection. And most account contracts use nonsense for that.
00:38:35.470 - 00:39:40.850, Speaker B: The issue with that is if you don't implement replay protection, theoretically you could execute various time the same transaction and the same transaction, since the hash of a transaction is the hash of its content would have the same hash, and so you could have the same transaction with the same hash included various times in the blockchain. And this would mess up all sort of stuff, and it's confusing mostly, and it probably would create an attack surface. So we want to get rid of that. So we want to make sure that transaction hashes are unique. So we will make the nonce of an account or of a contract more broadly part of the protocol. Meaning account contracts will have a nonce associated to them that will make sure that a transaction can only be broadcasted once. And for contracts, regular contracts, they will also have a nonce associated, but this nonce will always be zero.
00:39:40.850 - 00:40:41.028, Speaker B: All right, so why will this break things for some apps? I know some of you want, for example, to send a bunch of transactions at once and don't want to have to deal with the nonce. And so you wrote custom account contracts that don't check nonsense or make sure that you just add a big nonce that is higher than the previous one, but you don't make sure they're sequential. This won't work anymore. So you need your nonces to be checked and sequential. And this will be enforced in zero point ten. So you need to find a solution for this. Now, going to make a small post to check if there are questions in the community call channel or on YouTube and catch my breath and I don't see questions.
00:40:41.028 - 00:41:36.390, Speaker B: So I guess I'm good. All right, so we talked about the validated seclusion workflow, the new transaction version. We talked about the nonsense. Now let's talk about the l one l two message fees. So in the past you might have noticed that when you're sending an l one to l two message, you don't pay for the fee of your message, you pay for the l one fee, but you don't pay for what your message will execute on l two. This is obviously an issue and an attack vector. Like imagine you design a smart contract that, I don't know, consumes a lot of gas on l two, and you don't pay the sequencer that will execute this transaction on l one.
00:41:36.390 - 00:42:45.464, Speaker B: That's a problem. So there is now a mechanism to pay for l two messages. This payment will be done on l one. So when you will send your message on l one, you will pay at this point for the future execution on l two. The documents here is pretty self explanatory, but basically if you're operating any kind of solution that uses a bridge, or if you design your own bridge, or the messaging, the messaging bridge, you need to take this into account because we'll now need to include a payload and a fee. All right, the fourth thing is that another attack vector currently on Starknet is the declared transaction type. So a few versions back we introduced the difference between invoke transaction and declare transaction.
00:42:45.464 - 00:43:59.410, Speaker B: So the way you currently deploy a smart contract on Starknet is that first you need to declare the smart contract class, meaning you need to send to starknet the code of your contract, which will be identified by its ash, and then you need to actually deploy the contract, which is just an instance of that class. In the past, the declared transactions were not paid for. You didn't have to pay for this. In this version we introduced, we introduce a way for smart contract developers to pay for this transaction declaration. This change is not mandatory right now, meaning that it has a transaction version like the validate execute workflow, meaning you can do things as you used to for a while. But I highly encourage you to start taking this into account to use this new version, because version zero will be deprecated in the future. So take this into account and you should start working on this.
00:43:59.410 - 00:45:10.836, Speaker B: And finally, the last change is the Cairo syntax change, which is kind of big also, and it's probably one of the most visible thing people will see. So starting with version zero point ten, the body of your functions will need to be defined here in curly braces. Right? They didn't used to be that way. And you will need to add a semicolon at the end of every line, which it didn't used to do. The third thing is that structs will need to be defined also inside curly brackets, and the member keyword will be removed. So it's quite a big change in the way you write Caro. And if you're thinking, does that mean I'm going to have to rewrite all my smart contracts? It kind of does, but it kind of doesn't also, because zero point ten will ship with a small script that will let you migrate all your Cairo files to this new format.
00:45:10.836 - 00:45:48.470, Speaker B: Basically, you'll be able to take all your project and automatically it will add the curly braces semicolon and manipulate your structs also. So you'll be able to automate that. But going forward, yes, you need to think about these. And these are the changes I wanted to talk about today. I'm going to check if there are questions. Laurie, if you think something I said wasn't that clear, please tell me so that I can answer it. And if not, I think we're good.
00:45:48.470 - 00:46:40.232, Speaker B: And I've covered most of what I wanted to say. All right, well, I don't see any questions either on discord or let me just check to make sure there are a few emojis, but no questions. I'm guessing everything is good, and I don't see any questions on YouTube also. So if there are no questions, thank you for showing up. Next. What's the program for the next community call? Our next community call will be in two weeks, on September 6. It will be on September 6.
00:46:40.232 - 00:47:13.284, Speaker B: We'll have a nap presenting what they did. Let me check who it is. I think it is friends land. Yes, it's friends lens. Who's going to present their game? We're going to talk a bit more about zero point ten because by this time, zero point ten will probably be either in integration environment or even on Gurley. So you will make sure that all the changes I described are clear for everyone. And next week we're going to have an online workshop.
00:47:13.284 - 00:48:14.472, Speaker B: So some of you may have followed last week's workshop. So we're starting a new program where basically every week on Tuesday we're going to do some kind of call, either a community call where we present Starknet roadmap, Starknet infrastructure and projects building on Starknet and we're going to do this every other week. And when we're not doing community calls, we're going to do online workshops where we will do some live coding session. It's not clear yet, so if you have ideas on things you want to see, questions you have, these calls will be the good time to show them. Last week we had a call with Ben who showed us account abstraction, the account abstraction tutorial. Next week. Next week is actually going to be a fun call because a while back, I was talking with Luca, who is also a dev advocate at Stucknet, and for some reason he said, oh, but I'm sure I could do a live coding session underwater.
00:48:14.472 - 00:48:41.460, Speaker B: And I'm not sure know. And I was like, there's no way you can do that. We made a bet and turns out he's actually going to do it. So next week you'll have an online coding workshop underwater with Luca. I'm still not sure exactly how he's going to do it, but apparently he's going to be doing it. So follow up if you want to see underwater life coding next week. Yeah.
00:48:41.460 - 00:48:53.840, Speaker B: And that's about it for today. I hope you learned something. And without further ado, have a good day. Bye.
