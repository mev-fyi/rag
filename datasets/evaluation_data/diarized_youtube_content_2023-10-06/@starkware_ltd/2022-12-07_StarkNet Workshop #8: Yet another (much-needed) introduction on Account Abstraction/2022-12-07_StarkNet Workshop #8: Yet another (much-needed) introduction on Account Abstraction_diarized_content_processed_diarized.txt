00:00:22.970 - 00:00:46.312, Speaker A: You. Hey everybody, how are you? Just a second. We are reviewing our sound. Just a second. Let's see how it sounds. Let's go. Mix, pick up and going.
00:00:46.312 - 00:01:20.494, Speaker A: Vial. Perfect. It okay? Perfect. Seems like we're selling okay, just a second. Strain. Perfect seems like excellent. Okay, so thank you very much for being today with us.
00:01:20.494 - 00:01:42.014, Speaker A: Today we're going to be talking about something very important, very relevant for the start ecosystem. We're going to be talking specifically about account obstruction. Thank you very much. Echo obstruction is something that is getting very famous right now. It's something that is. We can see it everywhere. Everywhere.
00:01:42.014 - 00:02:12.670, Speaker A: In each place. We're looking at a can of structure. I went to Defcon, amazing experience, and Defcon had at least six talks about a can of structure. And specifically a lot of them talk about Starnet. And this is not a coincidence because starnet is practically the only place also CK sync was. I haven't seen a lot of documentation on that, but it's practically the only place where we can have account abstraction natively at the protocol level. This means a lot of stuff.
00:02:12.670 - 00:02:54.246, Speaker A: This means that account can take place and not allow these account contracts to be second class citizens like in layer one. So we can do account obstruction, layer one. But it's not as easy and not as powerful as if you do it in the L2. Specifically using Starnet. In the future, we'll have also a kind of structure in other non EVM compatible virtual machines, for example in fuel in CK sync. So alternatives to the EVM are creating this new paradigm of account structure specifically and entirely at the protocol level. And this is not coincidence.
00:02:54.246 - 00:03:20.020, Speaker A: Again, account structure has proven to be very relevant, very interesting topic and very important for the future of Ethereum. When I'm saying that it is important, it is actually really important. So let me share my screen. Thank you very much for being here today with us. Let me share my screen. I have a couple of slides that are worth looking at. Okay, let's go.
00:03:20.020 - 00:03:56.762, Speaker A: So we're going to be talking today about this tutorial. Let me know you can see my screen. I think this looks better. We're going to be talking about this base camp tutorial. You can scan this QR code and go into it and see for yourself. This tutorial, mainly what we are going to be talking today is about this tutorial. So I recommend that you go into this and start looking at our tutorial at Basecamp.
00:03:56.762 - 00:04:23.430, Speaker A: What is basecamp? Basecamp is basically, I want to call it like the future of the starnet.edu tutorials. We have a lot of information there. I kind of also think about it like the Cairo starnet book because we have a lot of very relevant information there. Let me share my screen again, but in a different manner. Okay, I will share my entire screen. And now.
00:04:23.430 - 00:05:06.370, Speaker A: Sorry for that. Yes. So base camp is basically a place where you can find a lot of tutorials, very interesting tutorials that go from what are starks, how the L2 works up to how to code in Cairo, how to code with starnet smart contracts, and also then how exactly Cairo works. I really recommend it to you. We'll be starting on January a new version of Basecamp. So go ahead, you can register and you will have the Star wars team helping you to create these amazing smart contracts and leverage all the power that starnet and carrier can provide you. So just go ahead please, and start looking at basecamp.
00:05:06.370 - 00:05:56.530, Speaker A: And now let's go back to the slides we have so we can talk a little bit more about a can abstraction. So when we talk about account abstraction, as I mentioned before, Ethereum is really dependent right now on account abstraction. I like to say that Ethereum is at stake in the sense that Ethereum is depending a lot on account of structure. Right now. There are at least two reasons why Ethereum is at stake and account structure can help on that. Number one, most ethereum users are using centralized exchanges. You know that this means that we're not using all the power of self custody.
00:05:56.530 - 00:06:40.158, Speaker A: That is that we have, the power users have the power to use their assets, their money, their resources, and be completely owner of those resources. So a lot of crypto has to do with self custody. You are the owner of your things. This sounds a little bit crazy, but when you're using a central exchange, we have already seen with the recent problems we have seen with FTX and other companies that centralized exchanges or centralized service, overall, they can't have the power. And if required they will do it. They can stop giving you your resources. For example, you have some money stake on that, you have some token stake.
00:06:40.158 - 00:07:36.914, Speaker A: You cannot take them if they want you not to take them. So this is a huge problem and we have seen it more and more and this will continue to happen. Okay, the problem here is that most people, most Ethereum users are going into central exchanges because it's easy to use them. And even myself, I have like two accounts on different central exchanges. Thanks God. I haven't had any problem right now, but nobody guarantees me that this is going to continue well. So I don't know, maybe your aunts your grandma, your grandpa will be using central exchanges instead of maybe a metamask account, nargin account, a Bravos account, because these persons will require to, I don't know, maybe writing a piece of paper, twelve magic words that have all the power for you to lose or to have access to your wallet and of course, to all your assets.
00:07:36.914 - 00:08:09.822, Speaker A: So humans have always lose access to the passwords, and humans will continue to lose access to passwords. We always forget them. Maybe they get stolen, but mostly they get forgotten by us, by the owners. And this is going to continue happening. So the problem is that we don't have this currently at Ethereum, and this is a problem going to. The second problem is the imminent arrival of quantum computers. I like to think that quantum computers will be coming, will be arriving to the world.
00:08:09.822 - 00:09:09.010, Speaker A: And we already have quantum computers, but they are going to get much more powerful in the near future. And I don't know, maybe by 2028, something like that, we will have available quantum computers that can break the cryptographic ecosystem. Okay, so this is a problem, of course, and Ethereum right now, layer one, bitcoin, they can be breaking by quantum computers, which are much more powerful than normal computers. So we need another type of signatures, allow us to be quantum proof, also future proof, because we need to start thinking about the future. And again, when you're using Ethereum, you only use one kind of validation, one kind of signature. You cannot use quantum proof right now. So again, this is a problem that we will face, as this small image says, brace yourself, because widow is coming and we are facing a battle against these centralized services.
00:09:09.010 - 00:09:40.346, Speaker A: We need to keep crypto at its core as what it is. But also we have to prepare for the quantum computer. Okay, right now we are not ready for that. But account obstruction show us a new way in order to make front to this problem. So, as I was telling you before, account obstruction is a cool topic right now. Everybody is talking about it. You can see it, for example, at DefcOn 2022, amazing conference.
00:09:40.346 - 00:10:11.590, Speaker A: We had a lot of talks about it, at least I counted six. And this is some of them. For example, we got Martin Trai from OpenSea, Pali Vitalik, David Hoffman, Julian said you have vice and like lion talking about it in a panel, very interesting panel, and so on. I invite you again to go to the base, scan repo. You can scan this QR code, and you can go into these talks and see them. It's very interesting. And this is what opened my eyes to the relevance, the importance of a can of structure.
00:10:11.590 - 00:10:37.854, Speaker A: Sounds like it is going to be a game changer and we have to be prepared for that. And thanks God we have this already at starnet. So that's what we're going to be looking at today. So I don't know what account abstraction is at this point, I'm afraid to ask. This is very common. A kind of structure is not that simple. A lot of people say that it's trivial, but I don't think so.
00:10:37.854 - 00:11:10.426, Speaker A: And I don't want to tell you that this is simple, that this is very easy, because it's not. It's something different. And a can instruction already sounds kind of weird by itself. So exactly what we're talking about account structure. What are we talking about? Okay, a can of structure has at least two definitions. The most common definition is when a smart contract can pay for its own transactions. So we're going to look at that in a moment.
00:11:10.426 - 00:11:39.534, Speaker A: This is what we're going to be making using counterfactual deployments and then paying for the transactions using starnet, invoking transactions using these account contracts. For me, this second definition is much more interesting. Both are amazing. Both are very interesting accounts. Russia by itself is interesting. But the second definition opens a lot of different doors. It opens a lot of thinking, a lot of new ways, new vs.
00:11:39.534 - 00:12:19.766, Speaker A: To think about what account structure is and what it can provide for us. So definition number two is it is validation abstraction. So account obstruction is validation abstraction. There's only one way to validate your transactions. Retrieve an address from a signature, then look at that address in the state, determine if the non is okay for the transaction that was sent, and if the account has enough balance to perform the transaction, then we can go ahead. This is the way you can validate transactions in layer one. It's the only way you can do this with account section.
00:12:19.766 - 00:12:50.262, Speaker A: We are generalizing because abstraction is kind of a synonym in computer science for generalize. So make a general case. So we're generalizing this process. We are abstracting this process meaning that we can have different type of signatures, different types of validation schemes. For example, you can use different types of signatures of cryptographic primitives, for example starks. You can use different execution process. So the way you validate and you accept transactions changes.
00:12:50.262 - 00:13:25.442, Speaker A: So we're looking at something that provide us with a lot more of flexibility and power. When you are validating transactions, taking account this, because we're going to be talking about it a little bit more in the future. But taking account this account obstruction is also validation obstruction. Why is this so important? People are talking about this. But why? So what? So what? Okay, sounds interesting. Sounds. That theorem is a stake, but so what? Well, people are talking about this.
00:13:25.442 - 00:14:03.294, Speaker A: For example, Martin Troy from open sepulin. And please, these are not exact quotes. This is information I got from Defcon talks and they're not specific quotes. So if there is any mistake, this is my mistake, it's not from these persons. So Martin Tray from Opensepling says, for example, that account structure is the future of crypto user experience, UX and security. Julian, it said from Argent, I really recommend you that follow Argent's work and also Bravo's work regarding account structure because they are at the frontier. Everybody of these four persons here that I'm citing, that I'm quoting, they are the frontier.
00:14:03.294 - 00:14:42.560, Speaker A: They are at the building of a can abstraction. So it's worth following them. Of course you follow Vitalik, but check out for Martin Fry, Juliani set and Joab. So Juliani set from Argent says a canstruction means scaling self custody. So this is other mental exercise that you can have. Account is also scaling self custody, that is allowing people, allowing the next billion of users to have access to an easy way and a secure way to have self custody. Again, self custody is at the center of this problem.
00:14:42.560 - 00:15:13.810, Speaker A: We want people, we want the next billion users to go into decentralized options that provide you with self custody. You are the owner of your own assets. Okay? The problem again is that it is difficult. Try to onboard your grandma, your uncle, your aunts, using metamask, Arians, block wallet, whatever Bravos, wherever you want. And it's going to be hard for them. They won't be able to understand it. It's better to have a user experience from a bank.
00:15:13.810 - 00:15:46.366, Speaker A: We want to have the user experience that a good bank with a good user experience has. So maybe your grandma, your aunt, your uncle can have much more easier access, understand much better how their bank account is working. And for example, using their web services from a bank account, it's more easier to use than metamask. So we have problem with user experience. This is a fact. This is something that we need to face. We need to do something about this because, well, self custody means that you own the keys, you own the assets.
00:15:46.366 - 00:16:43.386, Speaker A: So yes, we want the next billion to use self custody wallets and stop using centralized exchanges because you know what happens when you are using a centralized exchange, a centralized entity for guarding your resources, it can go very wrong. I'm not saying that is a fact, that something bad is going to happen, but we have seen it in the last couple of weeks. So yes, this is very important, take into account. Okay, so Vitalik also says that smart wallets that are using account structure, it should be the default. And account structure is the key step for this job. From Ethereum foundation is also saying that account structure is key for security. So we're looking at a lot of very interesting words here, user experience, security, self custody, validation.
00:16:43.386 - 00:17:14.158, Speaker A: So yes, account structure sounds kind of magic, kind of magical, because we're referring and improving a lot of different stuff in the theorem ecosystem as you can see it. And this makes sense. This makes sense and it's going to be a game changer. Let's go ahead with this. So yes, Starnet and account structure. Starnet is leading the way in implementing the account structure at protocol level. We get gigabrains on top of Starnet building.
00:17:14.158 - 00:18:31.874, Speaker A: What are the primitives, what are the implementation, what are the good practices using a construction? And this is being done at Starnet and all the starnet. So we have people from open sepling working on this, people from Arjuns, people from Bravos, people from the same Star wars, they are all together creating what is going to be the future of a canonstruction. Again, if you go to all these talks on account structure that happened at Defcon very recently in October, you will see that Starnet is always mentioned as the proving grounds for how a cannonstruction could look in the future. So all improvements have been done here in Starnet thanks to these gigabrains that are working on this. That is going from Vitalik up to open Seplin, for example. Vitalik recently working on a proposal for an EIP for Ethereum that is, I think it's 37, I don't remember exactly a number, but it's working on how we could implement a construction at theeum layer one. And a lot of knowledge from this has come to be at Starnet.
00:18:31.874 - 00:19:09.342, Speaker A: So this implementation has helped improve a kind of structure in Starnet. So Starnet is at the frontier and we're working on this. If a kind of structure is implemented in the layer one, it's going to look a little bit like, it's going to look a lot like how it's looking right now in Starnet. Because again, starnet is a proving ground for this. We are making this, we are the frontier and we're going to be still in the frontier in the next years. So yes, start is the place where you can look at this right now. So, talking a little bit more and going deeper into self custody.
00:19:09.342 - 00:19:28.220, Speaker A: Again, this is very important topic, self custody is what we want in crypto. Crypto is about detail ownership. You have ownership of your stuff. And again, humans will always lose and forget passwords. Always remember this. This will continue to happen. It has happened always and will continue to happen.
00:19:28.220 - 00:19:58.210, Speaker A: And this is going to happen with a lot of keys myself that I work in crypto, I have lost my access to a metamask account. To my metamask account. I forgot the password and I forgot the words, the keywords. So it went very bad for me. A lot of people can happen this. I can only having to face all these problems. So it's not a good thing.
00:19:58.210 - 00:20:49.374, Speaker A: And citing, quoting here, Julian from Ariana Defcon. Again, if ethereum doesn't transition away from externally owner accounts, we'll live in a world where only a few use of custody and the rest use centralized exchanges. So this is a quote that happened at Defcom, but it's such a hard quote, it's like such important quote here. This means Ethereum dependent a lot on what happened with a kernel abstraction, because a canstruction means that we are forgetting about eoas and we are focusing on only contracts. So everything is a smart contract, including the accounts. We're going to look at that in a moment. But yes, this is a very powerful statement.
00:20:49.374 - 00:21:31.178, Speaker A: So we need to prevent people from using central exchanges. I think this is very relevant. And again, account structure is the key now. To transition away from eoas in layer one is very hard. Imagine making this change at protocol level. Vitali has been trying to push this since the beginning of Ethereum, trying to implement a construction and walk away from EOS in layer one from the beginning, but it hasn't happened. And time is passing, and as time passes, it will get harder to implement at layer one because more resources are secure in the layer one in Ethereum.
00:21:31.178 - 00:22:05.850, Speaker A: And imagine getting away from EOS means changing a lot of how currently solidity, Viper, whatever layer one contracts are implemented. So this means a huge change. And every day that it passes, it gets harder to pass more money, more resources are on top of Ethereum, on top of EOAS. So it's getting harder. But we know that we have it a L2. We're going to be having it a L2 with CKC, with fuel. But currently with the start, it is where we have it and we have it most advanced.
00:22:05.850 - 00:22:53.418, Speaker A: So yes, this is a hard topic from what I've seen, and this is my own opinion from what I've seen. Julian from Argent, one of the biggest exponents of account structure. From what I've seen, Julian doesn't seem very optimistic that it will get layer one, so that we will have a construction layer one. From what I've seen, the face of Julian, what he's talking about, it doesn't look like he's very optimistic on that. Again, this is my own take, don't take it to Julian. So where are we talking here? Let's go for some use cases is very relevant. We have seen that a lot of people are talking about that.
00:22:53.418 - 00:23:33.270, Speaker A: A lot of people are working on it. It's very interesting. Yes, but what can we actually do? So let's talk for example about social recovery. Imagine that the user's private key could get lost or compromised. Then account would allow for mechanisms to securely replace the key controlling the account. So you can replace it. Think about it like for example, when you lose access to your bank account, you can relatively easy recover your password, change the password, you can click on I forgot password and then you will be able to maybe receive an email and from there you can create a new password and go on with your life.
00:23:33.270 - 00:24:25.462, Speaker A: It doesn't happen a lot. Let's call this social recovery. So you don't have to worry about having and managing seed phrases again. You can start using your accounts, your resources as you were using a web two user user experience, because all these use cases is very interesting because these use cases actually already exist in the web two world. So we're not talking about something completely new, we're talking about something that already. So a kind of solution allow us to have web two user experience, which is key because Google has a lot of tractors, have a lot of people that don't like Google and Facebook and Instagram and so on. But they have dominated, they have dominated the user experience.
00:24:25.462 - 00:25:03.870, Speaker A: So it's very easy to use your Google account, it's very secure to use, it's secure to use your Google account. So they have mechanism in place. So what if we implement these mechanisms that Google, Instagram, Facebook, whatever, all these lessons learned have learned from these companies and bring them to web3, you can use a construction for that social recovery. Basically, you can recover your password if you forgot it. Key rotation. So imagine again that your keys are compromised, your passwords, whatever. Then instead of moving all your assets, that's what I had to do when I lost access to my metamask, to my l one wallet.
00:25:03.870 - 00:25:31.310, Speaker A: I have to move all my assets to a new wallet. And you know, it's very stressful because you're very worried that you won't click the proper bottom and then you will lose your money. So imagine you can simply rotate the key. Imagine changing your password. Again, very simple. It's something that we already know that because everybody here is user of the web two. So yes, that session keys.
00:25:31.310 - 00:26:24.490, Speaker A: Imagine when you are on your phone, your iPhone, your Android, whatever, and you want to sign in. Sometimes you can sign only once and then you can allow, for example, I don't know, metamask, your bank account, your keeper account, whatever. You can sign in only using your fingerprint or you can sign in with your face. So session keys are basically giving permission to a website to access these different keys that you have in your hardware, for example in your cell phone or in your computer, in your Mac, you can sign in again with your fingerprint. So again, this is providing web two experience and we'll see an example of this very soon. But basically we can already have session keys. So users don't even have to type their password, they can simply use their finger.
00:26:24.490 - 00:27:05.302, Speaker A: And with that they can sign transactions and go on with their lives. It's very interesting topic. Then we have custom transaction validation schemes. Again, account structure is also validation abstraction. So for example, imagine you have different signature schemes, such as maybe you can use bitcoin signatures or a terminator one signatures, but you can also use for example a more gas efficient signature or a quantum resistant one, maybe like the ones we have in starnet quantum resistant one. This is facing the quantum feature that we will face soon. So you can have different kind of signature schemes.
00:27:05.302 - 00:27:52.698, Speaker A: Again, you can use something that can be quantum resistant, which will be great. And it's very relevant for us, it's very relevant for us in the future. So yes, this is changing stuff. Then you can also have multi signature. Imagine for example, that, I always give this example, I think it's amazing. Imagine that you have a children, all these fintechs that are right now on the market, I remember one of them is allowing to create bank accounts for children. So for example, if these kids want to pay for something in their school or something like that, they can use their credit card or debit accounts and then with that they can have access to whatever they need to buy.
00:27:52.698 - 00:28:41.180, Speaker A: But for example, imagine that suddenly there's like a transaction that goes above, I don't know, $100. So there's a conditional there that if the transaction will cost more than $100, then a father, a mother, a parent, whatever, will have to sign and approve for this transaction. So it's not only dependent on the kid, but also on the father, something like that in the father, from the mother, from the parent or whatever. So they can also approve this transaction. Or imagine, for example, that this happens a lot with credit cards. If the credit cards detect that there could be some problem with your transaction. Hey, this transaction looks a little bit weird, not easy.
00:28:41.180 - 00:29:16.182, Speaker A: It could be fraudulent then. Actually this is something that Ariano, I think already has. So if they detect that this could be fraud, that this could be something bad, then they tell you. So you can confirm that you're making this transaction. So this happens a lot of credit card, with credit cards, they can maybe call you to your telephone, or maybe they can. For example, in the case of I use new bank here in Latin America, and if they see that the transaction could be a little bit weird, then you have to approve it in your cell phone, but also in your computer. So makes sense to have something like this.
00:29:16.182 - 00:29:51.042, Speaker A: Again. This is security, the next step for user experience and security for common users. Yes. So we're talking about, again, the future of what could be the user experience in web3. And in my opinion, the user experience should be like web two. Again, people have already experienced this, they have seen how this works and it works. So why invent the wheel? Okay, we can go on from there, but at least let's have web two experience, user experience, security, and then we can see what happens next.
00:29:51.042 - 00:30:47.650, Speaker A: So let's go to an amazing example of what this is. I believe actually Odin free from Star wars team says this is the first kind of russian application that is known as wallet. And I also think that I haven't seen anything like this before. Go to cartridge GG and you will see an amazing project that is really revolutionizing how ethereum looks and actually how blockchain and crypto ecosystem will look in the future. So for example, here they released this amazing application where you can mint an NFT from a player, and you can do this only by providing your user. For example, in this case, my username is Omar. And then from there I can sign in with my fingerprint and it automatically creates you a wallet.
00:30:47.650 - 00:31:16.074, Speaker A: Sorry, a starnet account. So for example, if you look at the second image here, the black one, you can see that my name there is helmer. It's on the start testnet. And I actually have an address for my account. You can see there zero x zero. And it ends with 7663. And basically this address is something that I don't have to create using, for example, argent or rabbles or whatever, metamask, whatever.
00:31:16.074 - 00:32:00.774, Speaker A: You can simply create it with your fingerprint and you have your account address. And I can sign into my address only using my finger. And I have a beautiful account in starnet that provides set cost to my assets. In this case an NFT from a soccer player, from a football player. And it's mine. And I don't even know where are the, there are no words that I have to make note of them in paper and keep them as if they were my life because I don't know, we don't need them. So again, this is user experience as if you were in web two simply using a password.
00:32:00.774 - 00:32:37.154, Speaker A: In this case, for example, your fingerprint, go in and do whatever you want. If I want to send my NFT to another account, then I can simply use my finger, use my password and then I can log out and then log in again. So I have an address but I don't even use in it. And I don't know, I think this is game changer. This is actually game changer again, this could be the first account abstraction application that exists. I think it was released two weeks ago, two weeks ago, something like that. So this is very new and I know this is just the beginning.
00:32:37.154 - 00:33:19.534, Speaker A: Let's look at how this will go into future. Because this was created implementing Web out n, which is, I know an expert that, but this is something that is very new and it's like the frontier of security for signing in, in anything. In web two, in web3, whatever. Well in web two, because in web3 we don't have it until now. So these guys from cartridge are making amazing advances. And this is actually open source. So you can go into the cartridge GitHub, repo and you will find how they implemented Webhouse in starnet using a construction.
00:33:19.534 - 00:33:57.350, Speaker A: Again, this is practically impossible to do in other places than starnet where you have it at protocol. So yes, we have something very interesting here, the next steps for what is going to be happening. So yes, let's go ahead and explore what this provided to us. I don't know, this is very interesting. Excellent. Okay, let's go ahead. Let's go ahead with this.
00:33:57.350 - 00:34:36.440, Speaker A: So we already seen and I hope that my mission here was to tell you what a cano structure is, what you can build with it. Why is this so relevant and why could be a cannonstruction the key for the future of ethereum. Now let's go on to see how can we implement it on stance. So for this we will be using counterfactual deployment and I will stop sharing and share again. But now I will be sharing my code. Just a second. Okay, perfect.
00:34:36.440 - 00:35:20.676, Speaker A: Let's go. Excellent. Sorry for that. Sorry for that. Okay, so let's go and let's take a look at base camp. So if you go to base camp here, we're trying to implement all educational material, or most of our educational material that we have at Starnet. And you go to the camp number twin, camp number three is getting deep into Starnet.
00:35:20.676 - 00:35:51.508, Speaker A: Of course, this is a work in progress. So I will go up to a calistration here. You will find most of what I tell you right now, but you will also find something, some very interesting information. Let me make. And let's go to how can you deploy? Okay, so account is already here and we can already use it. You can already look at amazing applications. And again, the design of this is also in the process of making.
00:35:51.508 - 00:37:07.640, Speaker A: But we have giga mines, such as those in Star wars open seplan and ariant implementing this. So I am very happy, very optimistic on what the future of a construction is going to be. So let's go to what is the process for deploying a construction obstruction contract? So you remember when we were looking at what a construction is? Definition number one says that this is when a smart contract can pay for its own transactions, right? Okay, so basically this will be simplified when we use counterfactual deployment. Counterfactual deployment is the process by which we deploy an account contract in starnet. So we don't have EOAS here as in layer one, that is externally owned accounts. What we have here is everything, a smart contract, okay, but account contracts, the contracts that are also accounts, they have some specific differences from other type of contracts and we will look at them. So the first step in order to perform counterfactual deployments is to calculate the canned contracts address before the deployments.
00:37:07.640 - 00:38:05.310, Speaker A: When you're using Starnet, you can use this very simple, using the starnet accounts commands. Then you can, for example, add network, you can use the accounts alias and just proceed to have your own account. So this new account commands from the CLI of Starnet will simply calculate what is the account address. So if you want to go a little bit deeper into what an address is and how it is calculated, it's simply using the prefix, the deployer address, which is currently always zero. Then the salt, which is a random number class hash and constructor call data. With that you will be able to calculate what the count address is. And if you run this in the testnet or in the main net, or in your devnet, or in your test two, in Carlo two, you will have something like this.
00:38:05.310 - 00:38:42.024, Speaker A: This is simply telling you that the count address is this one. This is the public key that it will have. And please notice here that the public key is a way to sign in, but it's not the only way. Remember that a construction is also validation obstruction. So maybe you can validate without using a public key and we will look at that in a moment. But yes, and then it tells you that you can move funds to this account now. And this is very relevant and please bear with me, this is a little bit weird, but again, this is all in the making.
00:38:42.024 - 00:39:45.420, Speaker A: So the start CLI, the start new account commands and all the CLI commands with Starnet are currently using an open Seplin implementation of account abstraction. It's not exactly implementation from open Seplin. It's like Star wars adaptation of the open Seplin contract for account structure that they built on Cairo for starnet users. For everybody that is using Cairo, but they are only using this implementation. This is the one starwar starnet wallets Opensepline Openseplin account this is a problem because if we want to deploy our own account contract, we cannot use these commands coming from the standard CLI. We have to calculate the address from our account contract by ourselves, not using the new accounts command. This is something that will change and will improve in the future.
00:39:45.420 - 00:40:28.524, Speaker A: But currently for the next couple of months we can only use the main implementation of the Opensplane account. However, in this tutorial I teach you, how can you calculate address by yourself? It's not hard at all. We have developed some utils, some utils that will help you do this and then deploy your account. So no problem with that. Just bear in mind with that. So in this case we are deploying here, we are calculating the address for a new account using the open Seplin implementation. Star wars implementation of the open seplin implementation and this will give you an account address and the public key.
00:40:28.524 - 00:41:18.680, Speaker A: Again, the public key could not be necessary right now. Just a second, let me go and. Okay, perfect. Now let's go and see a little bit about this contract implementation. Okay, yes, so this is the implementation that I was telling you before, this openseplingaccount Chiro this is the code of this implementation of Star wars implementation of opensplane implementation. Take a look at it. This is how they are implementing a can instruction.
00:41:18.680 - 00:41:41.052, Speaker A: It's very simple. And when you are using Starnet, you're using by default this implementation. It looks very nice, very simple. We'll go a little bit deeper into it in a moment, but I will leave it open here, close this and go ahead. Okay, so now we have account address. Now please notice that we haven't deployed this account. Actually we haven't deployed it.
00:41:41.052 - 00:42:02.490, Speaker A: We have simply calculated the account address, get the public key, and we have kind of like activated it, like getting this information. However, it doesn't exist. Okay, this account address, it doesn't exist. It doesn't exist in the block explorer. You won't even find it anywhere. You won't find it anywhere. Now we have this address.
00:42:02.490 - 00:42:40.596, Speaker A: What we will do is that this account contract will pay for its own deployment because when you deploy something, when you write something into the blockchain, you have to pay for it. But now we're going to be deploying this account contract. But this same account contract will be paying for its own deployment. But how can it pay for itself if it doesn't even exist? Okay, so what we're going to be doing is sending funds to this address. Even if it doesn't have a contract yet, it hasn't been deployed. Okay, but we can do this. We can do this.
00:42:40.596 - 00:43:22.628, Speaker A: So for example, if I go into paradigm here and this is the faucet for Gary in layer one, one of the faucets, and I can for example, go to here, to my block. Sorry. Yes, let's go. I can go to my block. Okay. Block wallet, then copy my password, go back, let's go here and I can open here my blog wallet, confirm. Sorry.
00:43:22.628 - 00:44:10.580, Speaker A: So here I have my account, then I can copy my address in Garly. Remember we're using Garly in layer one. And I can go here into the paradigm and go into claim. I cannot claim it right now because I have already claimed before today and you can only do it once per day. But I have funded my block wallet here, my layer one in Ethereum and then I can go and all this information is on the base camp tutorial. So go ahead there and there's where you will find information on how to do this in a written format, which I like and I prefer. But you can go into this contract, which is the contract in garlic testnet network for start for the garlic two.
00:44:10.580 - 00:45:05.732, Speaker A: So here you will find in writer's proxy the external deposit function. And there you can say I want to deposit zero, zero five it to this L2 recipient. So for example, if I went to, I go back to my base camp here and I can see that my account address was I can copy this address, then I can go back here and write it here and then I can write this, I will confirm this with my block wallet. Okay, so it has passed. I go back here, and now we have funded this account that doesn't even exist. Okay. Like funding this address, even though it's not deployed yet.
00:45:05.732 - 00:45:48.012, Speaker A: So the next step, now imagine that now, well, girly two is very fast, but imagine that it has already arrived, this address. Now I can go back and go to the third step of counterfactual deployment. Okay, so now we can go and I have to pass something that is called valid deploy. We'll talk about that in a moment. But we can already deploy this. We can deploy, for example, we could use the start deploy account. However, again, the standard CLI only works currently with the open seplin implementation.
00:45:48.012 - 00:46:33.752, Speaker A: It's not working with custom account contracts. So you want to create your own account contract? Don't rely on the standard CLI, no problem. We are currently building some tooling over that. So you are able to deploy any account contract without depending on the standard CLI. Sorry, I'm a little bit sick of my throat. Okay, so you can deploy it as you would deploy any smart contract, no problem. And finally, if this function that is called validate deploy on the account contract.
00:46:33.752 - 00:47:16.024, Speaker A: So I will go back here, this is again the account contract implementation, from Star wars implementation to Openclus implementation. And I will go to validate deploy. Now let's go first to this. So you remember that we were talking about a construction being also validation abstraction. Well, this is the key function for it. This is called it's valid signature. This is something that opens up, it's a function that opens upline recommends us to create, and it is worth creating, of course.
00:47:16.024 - 00:48:08.056, Speaker A: But basically what this is doing is validating if your signature is okay. So for example here we're using an ECDSA signature, and it is verifying that the message that is hash the public key and the signature, everything is in accordance to what we need. And if it's okay, then it approves the validation, it validates the transaction that we are trying to validate. This is a way of implementing it. This is implementing it, the classic public key, private key and so on. But we can do magic with this. So for example, I can even erase this and allow for your can contract to always validate, no matter what signature you sent.
00:48:08.056 - 00:48:49.830, Speaker A: So maybe a signature is not even needed for something. Could be possible, could be possible. So you don't create any validation scheme simply as that. But you can also do very interesting stuff. Again, if you visit the cartridge DG repo, you will find this library called web Cairo, Webauthen, which is an amazing library that they created. And with this you can verify your account using web out n. Again, web out n is a big thing in web two.
00:48:49.830 - 00:49:56.536, Speaker A: So this is the new standard, it's the global standard for secure authentication on the web, okay? And again, if you use cartridge, you can already use webhouse in web3, okay? And these guys from cartridge here is their implementation in Cairo. So take a look. But again, you can use this verifying scheme inside your contract, inside your account contract. So the validation in this case, instead of being the way that it's currently been done, using ECDSA signature, you can use simply the web out end validation scheme and you can write it here. And then this function is validate signature is going to be used everywhere. So right now we were deploying our contract, our account contract, right. So this account contract will be only deployed if this underscore, underscore validate underscore deploy underscore underscore function is approved.
00:49:56.536 - 00:50:33.608, Speaker A: And as you can see here, we're using, again the function is valid signature. So if this valid signature passes, then we'll be able to deploy our account contract. If not, we won't be able to do it, there's something wrong with it. And yes, so this is the magic then. For example, let me go back here and see the next part. And basically now our account contract is deployed. If it passes the valid deploy function, and also it has enough faults for deploy itself, then it will be deployed and that is it.
00:50:33.608 - 00:51:27.588, Speaker A: We have an account contract, owns the main net on Testnet, on the devnet, wherever you want it, and then you can start signing transactions with it. Now when you open an argent or a Bravos account, these accounts will be deployed. If you remember when you created a new Bravos account, for example, then you will see that it says deploying your account contracts. So this is because it is deploying the smart contract of the Bravos implementation of account contracts. But argent has a different implementation. Opensibly has a different implementation. We have launched right now a different implementation from the one of Argent or the one from Bravos cartridge has a different implementation, a different way of validating transactions.
00:51:27.588 - 00:52:07.704, Speaker A: So this opens a huge possibilities. You can create your own wallet, yes, but also maybe very interesting too is you can create your own applications with your own validation schemes. Of course you can follow the open seplin standards, which is the next step. Here you can see how their interface looks, how they represent a call. This is not very hard. And again you can go back into the basecamp, go to base camp, go to Cam three, and there you will be able to see and follow all this written tutorial. And yes, implement your account contracts as they are implemented by open cipline and recommended by themselves.
00:52:07.704 - 00:53:04.948, Speaker A: But also add your own magic. Yes, your own magic, but your own magic can be passed here in the validate, sorry, in is validate signature. Validate the way you want to validate again, for example, when you're a parent and you're a parent and you only want your kids account to be able to transact if it's with lower amounts than $100, implement that. Implement that. Create the first ever wallet for kids. Create the first ever ultra secure wallet, for example, in the sense that you're going to be checking as a company, you're going to be checking that these transactions are very likely not fraudulent, that it could be. If they are fraudulent, you will call your clients and tell them, hey, I am metamask two and I'm calling you to tell you that this transaction looks a little bit weird.
00:53:04.948 - 00:53:39.876, Speaker A: Did you make it or not? If you make it, then we can pass it, something like that. And then just let your imagination fly. And let's go to. The last part is the execution part. So again, underscore, underscore execute is what is going to be made. Let me see an implementation down here. I think we don't have it right now, but let's go to the actual implementation of the account.
00:53:39.876 - 00:54:33.844, Speaker A: And if we go to execute commands, the execute command, what is doing here again, everything that I'm talking about, you can find it written in a written way in the base cam, which is amazing. I will have live sessions starting on January. So we will release follow please, the starnet accounts from developer advocates such as me, Henry Ben Sivu, David Barretto. Follow us and we'll be launching very soon. We'll be opening the registration for the basecamp, which is going to be like a course, a course of zero knowledge using starnet. So it's going to be very interesting and we'll be talking about this. Basecam is the main material for that course.
00:54:33.844 - 00:55:46.700, Speaker A: So if you go to this execution function, you can see that what is simply doing. Okay, you can go over all this and whatever, no problem. The key part here is that you're making a multicol here. This multicol is simply that you will receive certain call data and you will be able to invoke, you will be able to call other contracts using this account contract again. For example, imagine that your kids is paying for their lunch at the school and at the school, they have to imagine this amazing world where everybody's using self custody wallets and they will be paying a transaction to the Bravos account from the small school mom and pop shop where they are selling casadillas or something like that. And they will be able to scan a QR code and with that transfer resources to this other wallet and they will be calling this and approving the sending of it up to this different account. Okay, so it will be passing by execute.
00:55:46.700 - 00:56:49.280, Speaker A: To execute, you have to provide the call data. Call data is basically the arguments for the call that you are making. So for example, what is the address of the account that you're going to be sending the it to? Or what is the information of these different, you're buying NFT, whatever. What is the call data for this function that you're calling? And yes, simply as that, and the execute function will be making a multicol, a multicolored here is simply making an invocation, a call for different calls at the same time. So forget about this problem that you have with ERC 20s where you have to first approve the transaction and pay for this approval and then sending the ERC 20 in layer one. So those are two different transactions that will cause you gas. Now you can do all this in a single call, a multicolor.
00:56:49.280 - 00:57:32.300, Speaker A: Again, this allows you to implement very amazing user experience. For example, imagine a shopping cart actually aspect. An NFT marketplace in Starnet already has this implemented is basically that you can have your nfts and you can say, hey, this seems very interesting, I will store it into my shopping cart. This also looks very interesting. I will store in the shopping cart and then you can go to the shopping cart and say, hey, I don't want this anymore, but I do want this and I want to buy these five altogether. Then with a single transaction. So paying gas only once you can execute a multi call pay and you pay for all them without having to pay for the transaction for a single each of them.
00:57:32.300 - 00:57:56.310, Speaker A: So you can pay for all of them altogether. So again, this is an improvement. And this implement using multi calls, you can go ahead and read this account Cairo contract in order to understand it more. But again, you will have everything in the base camp very well written. So also you can make pull requests if it is not well written. So we can improve it. But yes, a different explanation can be found here.
00:57:56.310 - 00:59:07.960, Speaker A: So yes, this is basically what we have here in the implementation of opensepline. And I want to make a call and tell you that how privileged we are that we can have open sepaline, argent variables, Star wars mines and a lot of different mines because we are also basing the starting implementation of canoe structure from what has been proposed for layer one in ethereum. So we're learning and we are on top of the shoulders giants to create a kind of structure. So now what we need is more amazing applications. So this is very new and we already have some very interesting applications such as cart Ug, but we're waiting for more. So start thinking, what can you do if you could have user experience as in web two? How can you do to onboard your kids? What can you do to onboard your parents? What can you do to improve self custody for everybody? So we are entering an epoch where we have a lot of responsibility because really ethereum is at stake. I am not selling you this as a clickbait, I don't know how to say it in English, but this is not to attract you to go into this workshop and use starnet.
00:59:07.960 - 00:59:45.172, Speaker A: No, really, Ethereum is at stake. It's not only myself that I'm telling you, look at Defcon talk stats. You will also find that in the base camp tutorial. But look at them. We're worried about this. We are actually worried about the relevance that centralized exchanges are having in people that are not willing to go through all the process to have a metamask account, a layer one account, block wallet account or a L2 account like Barbell source or argent, because it's much easier to use centralized chains. And this is not okay because we have seen what happens with centralized changes or centralized entities.
00:59:45.172 - 01:00:07.730, Speaker A: Overall using crypto, that is not good. And also the arrival of quantum computer is going to be a problem. So yes, we need right now a construction account is dependent on you. Now you know more or less what account is. That is my goal. If not, please let me know and go ahead to base camp and study a little bit further on this. We have everything ready for you.
01:00:07.730 - 01:00:22.356, Speaker A: Thank you very much for coming to this workshop. This is just the beginning. This is just the beginning. Starting is changing. We are on alpha. I don't know if we will soon be on beta, but we're working on it. We're working on it.
01:00:22.356 - 01:01:10.384, Speaker A: And stuff is getting easier for you to use a construction again, don't expect it to be very simple because it is not. You will get disappointed if you are expecting that, but it will get easier in the future. But you can be an early entrant to this market. We have created these utils accounts again in basecamp where you will be able to calculate the contract cash. You will be able to get the address of a contract. I didn't have time to go over this, but you can also do very interesting stuff without having to depend on the standard CLI, which only uses the open separate implementation right now. This will improve in the near future, but in the meantime we can create our own account contracts.
01:01:10.384 - 01:01:55.590, Speaker A: So go ahead. Please follow me on Twitter, follow the new team and you will be able here's my Twitter at Spechelmar and we'll be posting more utils, more libraries that will help you use a kind of traction and create these amazing validation schemes, these amazing validation programs. I kind of feel like a hurry to create material on this because, sorry, I will stop sharing. I feel kind of like a hurry on this. I feel like this is like we have no time and we have to implement this as soon as possible because yes, we are on a hurry. We have seen what's happening to centralized exchanges. It's not okay.
01:01:55.590 - 01:02:24.680, Speaker A: Yes, I don't like it, nobody likes it and we are on a hurry to implement this. Thank you very much. Please follow us and let's work together to build a construction self custody for everybody, provide rights of ownership, detailed ownership for your grandma, for your parents, for your right. Let's go to the next step. So thank you. Thank you very much for being here today. Bye.
