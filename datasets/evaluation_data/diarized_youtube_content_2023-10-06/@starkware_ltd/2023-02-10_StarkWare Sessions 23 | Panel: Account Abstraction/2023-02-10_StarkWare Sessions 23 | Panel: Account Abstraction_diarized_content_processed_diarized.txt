00:00:00.870 - 00:00:01.420, Speaker A: You.
00:00:03.470 - 00:00:37.314, Speaker B: Please welcome Alex Jupiter from product manager at Metamask. Motilavi, co founder of Braavos. Julian is co founder of Argent. We also have Juan Vice, the EIP lead for the frame foundation. And I think I'm missing someone, which is Nicola Bacca, who's going to moderate this panel. And we are not missing a chair. I was thinking we were.
00:00:37.314 - 00:00:48.310, Speaker B: So please give a round of applause and let's get started. And Lucas shore from co founder of Safe, which I think I forgot, which is very dumb.
00:00:50.570 - 00:01:23.060, Speaker C: So thanks, Louis, for the intro, and thanks everybody, for coming. So we are the first talk of the afternoon. I hope you had a good lunch and we'll try to make this very interesting for you. So account abstraction is quite a hot topic on Starknet. I would say that, well, you come for the scalability and you stay for account abstraction, but account abstraction is going to be, well, very. Maybe people have different idea of what account abstraction actually is. So I will start by asking all of the panelists to introduce themselves and tell us what is a contest fraction in their own world.
00:01:25.110 - 00:01:25.860, Speaker D: Yes.
00:01:32.310 - 00:02:12.420, Speaker E: So I'm your vice. I'm with the Ethereum foundation and I've been working on ERC four, three, seven. So my definition of account obstruction is to obstruct all the aspects of the account. So it means obstructing the signature, which is the authentication. It's obstructing the authorization, which is something that we don't even have in an EOA. Being able to decide what each key may or may not do. It's obstructing the replay protection, the gas payment, which can be obstructed and paid by anyone through any logic, and obstructing the execution, of course.
00:02:14.870 - 00:03:09.554, Speaker F: Hey all, I'm Lucas. I'm from safe, formerly known as nosysafe. We're building a safe wallet, which is a multi signature wallet used by daos, teams, institutions and little alpha here. We're also going to soon have safecore, which is basically everything what we've built so far, encapsulated as an SDK, so others can build their own account abstraction wallet on top of our battle tested protocol. For me personally, the definition for account abstraction is really making accounts programmable, having the logic detached from the protocol, from the underlying blockchain, and therefore making web free just more usable and more secure have these key aspects which we need to figure out in order to have mainstream adoption of web free. Because it's still not feasible for most people to have self custodial wallets because it's just too scary. It's not secure enough.
00:03:09.554 - 00:03:16.070, Speaker F: There's UX issues that come along and we fix a lot of these, maybe not all, but a lot of these with account abstraction.
00:03:17.370 - 00:03:58.180, Speaker D: Hi, I'm Julian, one of the co founders at Argent. We've been building smart contract wallets for the past five years, and we are continuing doing that on Starknet lately. My definition of account abstraction I think I've been talking to Joaf a lot the past year about account abstraction. So we basically share exactly the same definition. But so for me, I would say, is the ability to program the key functionalities of an account, which are, as you had said, the ability to validate the transaction or the authentication, the ability to pay minor fees or to pay for that transaction, to protect against replay attack and then to execute the transaction, but to give a little bit of a different flavor. I also think a collapsetion is a much better ux, and we all need that.
00:04:00.790 - 00:04:47.326, Speaker G: Hi, I'm Motilavi. I'm the co founder of Bravos, a smart contract wallet on Starknet. And naturally I agree with everything that has been said, and account abstraction really gives us a whole new design space for developing accounts and user experience. However, I would say something which might won't be that popular in this forum. I think that from user perspective, the term account abstraction is very frightening and we should consider adopting smart wallets and smart accounts. People have smartphones, they have smart tvs. I think it will resonate much better with greater audience.
00:04:47.326 - 00:04:51.942, Speaker G: So just worth to consider. Cool.
00:04:51.996 - 00:05:19.470, Speaker A: Hello everyone, I'm Alex. I'm a product manager at metamask. We're self custodial wallets in terms of account abstraction. I guess when we look at it, it's trying to solve some of the problems we have with Ethereum having two kinds of accounts, right? The externally owned accounts and the smart contract accounts, and then trying to bring some of that computation with smart contracts to eoas. Of course, metamask is heavily based on eoas. It's been great. Gives a lot of power to the user if they can back up their private key, keep it safe, never lose it.
00:05:19.470 - 00:05:43.670, Speaker A: We know that's a problem though. But account abstraction offers us a way to develop new user experiences, to add more usability and security for users, and then hopefully, sometime in the future, migrate people away from eaways, although that is a challenge. And we're experimenting with different forms of account abstraction using our metamask Snap APIs, which allow us to extend metamask in all manner of exciting directions.
00:05:45.530 - 00:06:16.240, Speaker C: Thank you. So we see that pretty much everybody agrees that account abstraction is great for the user experience, and that also it makes accounts very much flexible. But as Julian said, we have been developing, people have been developing smart wallets for a long time already. I mean, way before we were talking about account abstraction, or way before those specifications had actually a name. So maybe, can you tell us what are the new things that you can develop with those specifications, the things that you couldn't do before?
00:06:18.050 - 00:07:11.710, Speaker D: That's a good question. I think if you agree with the definition, that account abstraction is the ability to program the key functionalities of an account, you realize that there's multiple ways to do that, and one way is to use existing smart contract. So I believe there's nothing more that you will get. Smart contract wallets like Nosisafe or Argent, they have been doing account abstraction and all the features that we sell with account abstraction, all these benefits that can know social recovery, multicol, the ability for someone else to pay for transaction and so on. You can do all that on smart contract based wallet, and we both teams have been doing that for the past four years. But of course that come with a lot of complexity. And for example, on Ethereum, to operate a smart contract wallet, you need to use what's called metatransaction, meaning you need to have a centralized component, a relayer that will prepay transaction and be refunded.
00:07:11.710 - 00:07:45.990, Speaker D: And so that means that in practice, it's actually complicated to enable account abstraction at the application level. And for example, that's what ERC four three seven is doing, is basically standardizing all that. Because of course, we've developed one form of account abstraction on Ethereum, which is kind of custom. Nosisave did something different. And so there was a missing standard. And so I think now people are talking about like an abstraction with 4337, it means that there's a standard coming, but that's still at the application level. And then you have starknet, which has gone one step further.
00:07:45.990 - 00:08:23.740, Speaker D: They brought all that to the protocol level. And so for me, that doesn't mean you will get more feature, because you get exactly the same feature that we can do with smart contract wallet, but you still have some benefit on top of that, which I believe is the fact that there's no more uas. And so that means that everybody is using on that blockchain, that protocol, everybody is using exactly the same paradigm, which will make it much easier for developer to build good dapps and leverage this feature. So it's not like you get something more per se at the account level, you can do exactly the same with smart contract wallet, but as an ecosystem we get something more because everybody is not using exactly the same standard.
00:08:25.070 - 00:08:56.322, Speaker F: Yeah, maybe support that as well. The functionality that we're saying like social recovery match transaction that comes from the smart contract wallet, that's nothing new per se. And I think the adoption of that would have come inevitably. It would just take a lot of time because it provides these security and ux benefits users as they surface to the users. They just are being adopted. But then you have two ways to kind of speed up this process. If you really want to get to account abstraction, meaning every account is a smart contract account.
00:08:56.322 - 00:09:33.950, Speaker F: You can enforce it like Starknet, like every account by definition is a smart contract account. Or you can standardize it and coordinate the ecosystem, which is EIP 457 right now as an ERC, it's just like providing a more standard way for teams to know the interfaces, to know how they can build around account abstraction. And this just speeds up the process that we get eventually to that point. And I think we might also talk about this later, but having it as just a standard that's optional is not the end game. Also on EVM chains, at some point we also want to move away and have it really by default.
00:09:34.930 - 00:10:13.420, Speaker A: Yeah, and just to sort of return back to the question, to the benefits of the user, though, account abstraction could be looked at as abstracting a lot of the complexity that we have with wallets, so users can just have a better experience. One example could be session keys, for example. So at the moment, if you're playing a web3 game, you have to constantly sign transactions. If you're using metamask, you can set a session key so over a certain period of time you can auto approve transactions to be a much better user experience. We had a snap that was built by economy in Bogota that could be used in those examples. And so it's starting to take the account in a lot of different ways, adding that computation, but still having a lot of the self custodial benefits as well.
00:10:17.830 - 00:11:27.800, Speaker C: Okay, so we see that standardization is definitely what changes the game now with account abstraction, and we can see a lot more applications being interoperable with each other. But on those standards also, we see that it's a bit different between the EVM EIP four three seven and what is done on Stacknet, because actually both the standards will abstract the way we authenticate a transaction, so we can change the way actually we sign to recognize what is a valid transaction. But only on four three seven, we have two additional items which are standardized. So the way to manage replay protection, so the way to know how we are managing the nons and how we are going to protect again against denial of service against the network. So how transactions can, how people can actually pay for transactions. And this makes quite a difference in my opinion. So what do you think about typically the lack of standardized way to subsidize transaction or well, maybe a bit more directly, the lack of a paymaster on Starknet? Do you think this is an issue? Do you think this will be added coming forward? Or how would you deal with the lack of such a feature today?
00:11:30.550 - 00:12:14.106, Speaker G: So I definitely think it's an issue. I think any of us who interacted with blockchain on Ethereum found ourselves lacking eat for gas fee, but having USDC or whatever other token that we want to transfer. So abstract. In a way, the gas token is most certainly an issue and we need to solve it in order to improve the UX. And by the way, this is something that we wanted at Bravos. This is something that we wanted to already introduce here in stockware sessions. But unfortunately, as you said, it's still not well supported within the stocknet sequencer.
00:12:14.106 - 00:12:21.780, Speaker G: But going for Stocknet future here, I have no doubt that it will be supported properly going.
00:12:24.710 - 00:12:47.770, Speaker E: So I think gas obstruction is an important part of account obstruction. And I also agree with Moti that we shouldn't even call it account obstruction, but I think it shouldn't even be smart account. We just want it to be an account. And once we get rid of EOA, this is what accounts look like on the blockchain.
00:12:48.190 - 00:12:52.190, Speaker G: Sorry. It's like smartphones, right? You don't call them smartphones anymore, just your phone.
00:12:52.260 - 00:13:37.306, Speaker E: It's just a contract. And we just want accounts. Users should just use accounts. But in order to get there, we need a uniform standout because users are not going to be only on Starknet or only on arbitrum or any other chain. So in order to get there, we need to get to feature parity. And having paymasters, for example, like we do in ERC 43 seven would be a way to enable that on Starknet as well. I think that I would go beyond, I would go beyond just a gas abstraction and say that we need to use the same standard across all networks to have feature parity, so that wallet developers and users don't have to think about it.
00:13:37.306 - 00:13:54.660, Speaker E: All the complexity should be handled by the network itself, by the network itself, or by an abstraction layer above it like we do at the moment. Until we can push it to the network level everywhere so that wallets don't even need to think about it. Grass abstraction should be a part of that.
00:13:58.710 - 00:14:43.502, Speaker D: So I fully agree with all this. Maybe to give some use cases. The idea of a gas abstraction, for example, is the ability to pay in a token that's not the native token. So today users, if you go on Ethereum, you need to have ease to pay transaction. But there are some users that may just have USDC for example. And so using gas abstraction, that means that even if you have just one token, which is not the native token of the ecosystem, you can still pay your transaction. Another use case is the ability for adapt to sponsor the transaction of their users, which I think again is very important because if you want to onboard new users to the blockchain, they will come for an application, maybe a game or something that is actually low value, but you want to onboard them as well and as quick and as simply as you would do on web two.
00:14:43.502 - 00:15:20.890, Speaker D: And for example, that's why at Argent we announced yesterday that we're working with a web wallet, but of, because you can sign up with email and password, that's something user knows. But still the first thing they need to do is they need to take their credit card, they need to put money. And then you again evolve that friction that comes even before they've been able to play that silly game which has no transfer of value, for example. So account abstraction is really, this is really simplifying the UX and again, removing part of that friction. So it is desperately needed. And for those who've known argent, we used to, for example, sponsor transaction on Ethereum four years ago. On paper, amazing id in practice, a very costly id.
00:15:20.890 - 00:15:42.290, Speaker D: But that's the kind of thing that you can do. And it is coming on Starknet. I think it's a no brainer. I'm trying to look in the room to see if Tom is there, because if Tom is there, we need to collectively harass him so that they deliver. I know they are working on it, but I do think that this is something that's very important. So Tom, if you are there, raise your hand or don't raise your hand, but we may be committed.
00:15:45.450 - 00:16:38.360, Speaker E: And another use case of gas abstraction that is worth mentioning since we are here in the context of zero knowledge in starco sessions. So for privacy solutions, we absolutely need gas abstraction if the user wants to use different accounts for different things and not to dox himself by transferring ETH to each of the accounts, to each of the accounts. We need a way for the user to prove that a paymaster should pay for its transactions without having to associate it with an existing account. And this is something that you couldn't really achieve without gas abstraction. So for privacy solutions on top of ZK based networks, it would make sense to have that.
00:16:41.130 - 00:17:15.460, Speaker F: I also like to just throw in another idea for gas abstraction. So we heard the DAP sponsoring transactions, we heard paying in fees like a stablecoin, for example. But what I think will also be quite powerful is have a way for you to have pay fees on one chain, but for a transaction on another chain. I think this will also inevitably come, that when you start branching out from one chain and start using multiple chains, that you don't have to first bridge gas over into another native coin that you then use to pay for transaction fees there.
00:17:18.780 - 00:17:54.020, Speaker A: Yeah, I think to just go back to Julian's point there in terms of we could imagine a future where for big web3 Dapps or wallets, the first hundred transactions or so were sponsored by the company and they could be paid. So if someone comes into web3 right now, they have to learn about gas and they're paying for these transactions to use things they think are free from the web3 world. That doesn't make a lot of sense. Just imagine this really seamless onboarding mechanism where people are starting to learn all these intricacies that we all understand in this room, but everyone in the web two world doesn't. And that can really supercharge the growth of the ecosystem. Think. Be really exciting.
00:17:56.280 - 00:18:33.730, Speaker C: Okay, so yeah, I think we have pretty much a consensus here that gas abstraction is a nice thing and that we should have it in a centralized way on Snarknet. So as a moderator, I guess I'm supposed to stay neutral, but as a wallet, I would second this opinion, and it would be really great to have it as quickly as possible for the release, but maybe to get into a detail which we talked about a little bit, which might be a bit more technical and less well known regarding non subtraction. So do you think we can have new services also with this? Because it's something that's also missing on Starknet for the time being. So what's your opinion about that?
00:18:37.780 - 00:19:57.020, Speaker E: Yeah, so being able to abstract the nons, to use different replay protection mechanisms allows you to do more things like more efficient batching when you have transactions that are orthogonal to each other, where the order doesn't matter. For these use cases, it's an optimization, but for some use cases, such as a privacy solutions that I started talking about it becomes even more essential because you may be using a multitenant account, an account that gets its transactions for multiple users and performs operation on their behalf. And in this case, having a nons where it's multiple users using multiple wallets on different machines, it becomes impossible to keep track and to use linear noms. Now, I understand that in starknet currently it's not possible because they need to have uniqueness for the transaction id, but I believe this could be achieved without enforcing a linear nons. So that's something that we should probably explore.
00:19:58.240 - 00:20:42.584, Speaker D: Yeah, actually, when we started discussing with the Starnet team and Tom in particular, because they wanted to use our expertise or experience of building smart contract wallets on Ethereum. And so when we started discussing the nons, they were telling us we think we'd go for incremental nons at first because it's much simpler. We already have so much complexity to solve. Let's keep it simple. But one use case that I gave them, because I do believe there are new use cases enabled. If you have abstraction at the nonce level, it's what we do on argent vault on L1, you have the concept of a guardian that may need to approve large transfers. So for example, you can tell to your wallet if I transferring above $1,000, I need to have the confirmation of Joaf and Lucas, for example.
00:20:42.584 - 00:21:12.512, Speaker D: But that means that you need to create a transaction, including announce. And if you don't have transaction abstraction, you cannot use your wallet until they've confirmed the transaction. If you are abstraction at the nons level, you can basically prepare that transaction and wait for them to confirm. You can still use your wallet for lower value transaction. So having the ability to abstract nouns does enable new use cases. And again, I think as Matil was saying, account abstraction is a completely new design space. So I think these are just the use case.
00:21:12.512 - 00:21:50.190, Speaker D: The one you have mentioned, the one I'm mentioning as just the one we've been thinking about. But I'm pretty sure there's a lot of other possibilities that will come. So yes, having abstraction at the nonce level will open new possibilities and something that we should have. But again, it's a new frontier in the sense there's never been account abstraction at the protocol level. So I understand the point of view of starquare to try to keep it simple and go for the most important features, which they've done a really good job at, which is authorization and execution. But yes, abstracting the nons will certainly enable new use case and it's a property that we should try to have if we can.
00:21:50.640 - 00:22:14.440, Speaker A: Yeah, and going back to sort of batching transactions, let's again, is a whole new design space. Completely agree. But there's a lot of parallels of what users are familiar with now, such as say a shopping cart, for example. I think something I've seen on Starknet before, you can go along, choose your nfds, have it in the shopping basket, batch of transactions together. That'd be great. If something we're familiar with in the web two world, bringing that to web3 would be incredible.
00:22:17.980 - 00:23:09.080, Speaker G: So as you were talking, I got many ideas what we can do, if we will have the nouns abstracted away, all sorts of campaigns and coupons that we can send to multiple users with some sorts of time lock, et cetera. So as we repeatedly said, saying account abstraction gives us a very nice playground to come up with new and innovative ideas. But I agree, Starknet needs to prioritize what it does first. And I think that we all want proofs on rejected transaction and also rejected transaction to get announced increment before we move on to the more sophisticated stuff and call them the creme of the creme kind of features.
00:23:10.620 - 00:23:46.790, Speaker C: Okay, well, I think we have pretty much talked about the differences between the different implementations, but now thinking about how this is going to be rolled out on Stacknet and on the different evms, and even maybe regarding the new security padding that we are changing with account abstraction, which might require more audits of the wallets, maybe because we are putting more powers into the wallets themselves. How do you see these wallets happening on the different chains, regarding speed, regarding ease of use for the users? Maybe. What's your opinion on all this?
00:23:49.080 - 00:25:05.310, Speaker G: So I think that this is something that troubles me a lot. They say that with great power comes great responsibility, and with account obstruction, smart contract wallet, we have great power. We can do whatever we want in the account, we get the transaction, we can decide whether to send it forward to interact with other contracts on chain, or to do whatever we want with that. So definitely on the opportunity front, we have a lot of opportunity, but it does present a new security risk, because up until now, wallets, in terms at least of cryptography, had a very specific role to play and had a very specific attack surface. Either you did the signature the right way or you didn't. Now the signature is only one part of a lot of logic that goes on in the wallet. Me, myself, I don't have a very good solution for that other than the normal stuff of auditing hopefully formal verification can help us here a lot.
00:25:05.310 - 00:25:11.010, Speaker G: But I think as an industry, this is definitely something that we need to think about.
00:25:11.780 - 00:26:00.440, Speaker D: I think to comment on that, clearly, using smart contract as account open a new, the attack surface is definitely bigger. But again, I think if you look at nodise for origin on Ethereum, collectively there's billions of dollars, having been secure for the past four years without any issues. So I think you need to use the same mechanism and the same security and the same approach that you do with any smart contract that has value. Meaning auditing it, meaning giving the time, the benefit of time, because of course, if time passes, you can have more confidence that your contract are safe and so on. But I think on the safe there's what, $10 billion being secured and that's still fine. On Argent, we had a billion dollars. So I think we've proven that it can be really safe with a smart contract wallet.
00:26:00.440 - 00:26:51.436, Speaker D: And actually, I believe even safer because yes, you have a bigger attack surface at the account level, but because you can enable all these security flows, you make actually the user experience of security much simpler for users. I mean, the account on Ethereum and EOA is very secure at the protocol level, but actually doing that in practice, we all know it's complicated, you need to secure that seed phrase and so on. So I think when we think in term of security, we need to have a holistic approach. And from a user's point of view, the experience of security, the user experience, is as important as the underlying technology. So our feeling at argent, and that's why we've been doing smart contract wallets for a long time, is that actually it makes it much safer. So you need to think about security a bit differently than with an EOA, but for the user, you can actually make safer wallet. And that's why I think we are all doing that now in terms of how we think this will rolled out.
00:26:51.436 - 00:27:30.990, Speaker D: What I find interesting is that I think now there's a clear consensus that account abstraction is needed everywhere. And for me that's the biggest change. Four years ago, people looked at us like weird beasts, like crazy, storing money in a smart contract, and that was like a strange way to do stuff. And some people thought we were crazy. Today, I don't think there's a single person in the ethereum ecosystem that does not agree that account abstraction is needed. So for me, it's not really a matter of if it will happen, it's a matter of when and how fast we can make that happen. And I think that's basically what we can do collectively is trying to make sure we can push that as fast as possible.
00:27:31.600 - 00:28:15.908, Speaker F: I wouldn't say as fast as possible though, because stuff needs to mature. It also took us at safe but three years until people really trusted their contracts and put money into it. And I think while I love all the hype about account abstraction, let's take the time, let's do this seriously, because it just needs one issue, like one major issue and all the trust in account abstraction, smart contract world is lost. Probably four years. Again, it will probably take audits, former verification, and then some period where it's like application layer, it's like optional to opt in. We don't force users. There's some more brave people that start using it and then the more risk averse over time gain confidence.
00:28:15.908 - 00:28:30.830, Speaker F: And then we have this Lindy effect that after some time we really can say like this is something that we can then even take into the protocol level. And I think Joaf can show or probably has more of details like how exactly this roadmap will look like.
00:28:31.680 - 00:29:02.660, Speaker D: Maybe if I can bounce on that. I kind of disagree and I think it's good, as I was saying, it's good to have some controversy on the panel. I do think we should deliver that as fast as possible. I'm not saying throw smart contract wallet without them being audited. My point is that I think account abstraction for me relates to self custody, because in the end it's a property that we all want. That's why we are all excited about the blockchain is because you can really control your assets. And today we know self custody is way too complicated and that's why a lot of users are turning to centralized solution.
00:29:02.660 - 00:29:33.920, Speaker D: So I do think that we need to deliver that so that we can onboard more users to our ecosystem. And if we take too long to make that happen, users will continue to rely on centralized solution and in the end we will have failed. So of course that doesn't mean being reckless, but that means that whatever the protocol level, the EIP level, we need to provide the tools and trying to make sure that people can build an account abstraction and that we can move away from EOS. And for that I think we need to go fast if we want to onboard more users to our ecosystem.
00:29:34.740 - 00:30:34.964, Speaker E: So I agree with everything that's been said about we are introducing new complexity in the form of the possibility of smart contract bugs, which means we need a lot of auditing. For each such wallet we need formal verification. But the flip of it that I wanted to mention is that is the upgradability. If you try to do something like this, something with so much complexity at the consensus level from the start, then if there is a security issue, then it becomes a major catastrophe. You need a hard fork and you need a hard fork. You need to fix things retroactively. But with a smart contract, once a bug is discovered, and I think at least initially, every smart account should be upgradable, both for security and because we don't know the entire design space yet.
00:30:34.964 - 00:30:51.340, Speaker E: So we don't know what other use cases we'll want to add. Which means that you're able to upgrade your account. So if there's a security issue, hopefully wallets will fix it much faster than they could with the hard fork.
00:30:53.120 - 00:31:02.936, Speaker A: Yeah, metamask are all for upgradability. We've onboarded millions and millions of people into the EOA environment. We can't forget about them. So we have, I guess a slight innovative dilemma.
00:31:02.968 - 00:31:03.116, Speaker G: Right?
00:31:03.138 - 00:31:34.164, Speaker A: We've got a lot of existing people, we know there's a new world coming. We've got to be very careful. We're just talking about, though, I guess the fragmentation of account abstraction, what that means for security. And yeah, that is a concern. I agree with you, Julian, that we need to move fast in this space. I guess it's quite difficult for us though, to keep on top of it and through our history, not just with account abstraction, but this is why we're trying to open up metamask, to become a permissionless environment, so any developer in this room can start to build. On top of Metamask.
00:31:34.164 - 00:31:53.890, Speaker A: We have Starknetsnap, we can have other smart contractor accounts and different forms of account abstraction, and each one of those a sandbox, little Javascript programs, and they will all, a lot of the popular ones will have their own security audits as well. So we're trying to offload that and create that ecosystem around accounts using metamask as the core the of wallet there.
00:31:55.460 - 00:32:39.732, Speaker G: So I just want to second the notion that we need to move fast. This is what we try to do at Bravos. I think that the risk of not moving fast is that users will continue to use centralized exchange and centralized solution. And we know that there is a real risk there. So we should definitely move fast. We should take advantage of new and upcoming networks like Starknet in order to move fast. And the fact that accounts are upgradable and they are upgradable by a signature of the user, meaning we cannot upgrade the account without the user consent.
00:32:39.732 - 00:32:47.120, Speaker G: This is a major building blocks that can allow us to indeed move faster.
00:32:48.020 - 00:33:10.360, Speaker C: Well, thank you. I think this concludes the panel. So thanks all for participating. I'll summarize and saying that we will move fast and not break things. So that seems like the better things to do. I hope we had time for one question for the audience that I don't think we have, actually. So unless people tell me otherwise, this is the end of this panel.
00:33:18.320 - 00:33:31.520, Speaker B: We are indeed over time. But we can maybe do one question. So just one question. Anyone has a question? Okay. Oh, here. Great. Just coming here.
00:33:31.520 - 00:33:33.490, Speaker B: Okay. Actually we can you.
00:33:40.530 - 00:33:41.278, Speaker D: Thank you.
00:33:41.364 - 00:33:59.926, Speaker H: So I really like the statement about the increased attack surface. And you talked that you hope for formal verification there. And I guess for wallets, it's maybe a little bit simpler than for DFI apps to do formal verification. But how advanced do you think is it currently and how much should we rely on?
00:33:59.948 - 00:34:09.100, Speaker D: It's.
00:34:09.840 - 00:34:12.940, Speaker F: Is it about 457 or wallets?
00:34:14.400 - 00:34:14.716, Speaker D: Yeah.
00:34:14.738 - 00:34:35.876, Speaker H: In general, about having these, let's call it smart wallets, and that they increase their tax surface. And you said that one way to mitigate that increase in tax surface could be forbid verification. But as far as I understand, maybe easier for a closed system like a wallet that doesn't realize so many other composable contracts, but it's still hard to do, right?
00:34:35.978 - 00:35:09.596, Speaker F: Yeah, easier for sure, but definitely still a challenge. Like the safety form verification of the base contracts three years ago, and it took half a year, or even more than half a year to do so. And you need to do this with every tiny change you do to the contract. It gets easier. Now, I think there's like Sertora or something, like some providers that do this on a more continuous basis. It reduces the effort needed for each change, but it's still something that, it takes a lot of effort for sure. Also, I mean, form of verification is also needed on Starknet.
00:35:09.596 - 00:35:28.950, Speaker F: Like you have protocol level account abstraction, but with Ep 457 you have this entry point contract, which is exactly like the smart contract wallet security risk, as in, if there will be a major issue there, it could affect your account. And I think there's also plans for formal verification. I don't know how progressed they are.
00:35:30.440 - 00:35:59.916, Speaker D: And maybe to add something to that. I mean, formal verification is not a bulletproof solution in the sense that you still need to write specification. In the end, it's a human person that needs to write the correct specification, the same way that with the normal audit, it's a human person auditing your contract. So I do feel this is complementary. And because we're talking about smart contract accounts. You need to use every single tool available, and formal verification is one of them. But it's certainly not bulletproof solution.
00:35:59.916 - 00:36:11.590, Speaker D: We need to avoid it. We need to have formal verification, we need to have fuzzing, and then we need just to give time and contract to be battle tested to increase the trust in their security as well.
00:36:13.400 - 00:37:11.300, Speaker E: Yes. So I think formula verification plays a major part, plays a major part in security. It doesn't come instead of having an audit, in my opinion, but I think it's valuable for any contract developer, and in particular developer of a smart contract wallet, to think in terms of invariants to define. I mean, even before starting the actual formal verification, being able to say what are the invariants of the wallet? What could never happen. For example, like for example, if you say that the wallet, that nothing in the wallet can ever be triggered by anyone other than the authorized keys, then you already limited the attack surface because only a small number of participants can even transact with it. And you can have invariants about, you can define invariants about anything. So I think developers should be thinking from the start when building such a project about what the invariants are to facilitate later formal verification.
00:37:13.080 - 00:37:17.380, Speaker B: Thank you very much. Please a round of applause for the source and panel.
