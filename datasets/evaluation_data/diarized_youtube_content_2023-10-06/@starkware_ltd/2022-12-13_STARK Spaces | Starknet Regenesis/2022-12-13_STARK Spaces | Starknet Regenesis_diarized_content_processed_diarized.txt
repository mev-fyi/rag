00:00:01.610 - 00:01:03.134, Speaker A: Okay, so if you can hear me, let's start. So, hello everyone, my name is Tom Brand. I'm the product lead of Startnet at Startquare, and thank you very much for joining us. Also, thank you to all the other participants, which will introduce themselves shortly. Today we're going to discuss stagnant Regenesis, which is an upcoming event. What I want to achieve is to understand why we need it, to understand a little bit how we came up with the current design that we have, and then to hear from all the other participants how they are preparing for it, and maybe to hear for them some other cool news or what are they excited in the roadmap, which is not to the regenerative. That's it.
00:01:03.134 - 00:01:30.300, Speaker A: Okay, so first of all, let's start with a short round of intro. Each one of the participants, please introduce yourself. What are you building and how you started working on Starnet. Who wants to start? Or maybe I will start. It's a good idea. Okay, so as I've said, I'm Tom. I'm working at Starkware for almost four years now, or over four years now.
00:01:30.300 - 00:01:54.100, Speaker A: Yes, since last week. And I've been working on Starknet since the beginning, January 2021, when we just basically introduced the idea into the world. So that's my background. Kuba, maybe you want to go next?
00:01:55.350 - 00:02:22.140, Speaker B: Sure. So, hi, I'm Kuba, I'm a software engineer at software mentioned. We generally just help to grow the ecosystem around Starnet. You might know some tools that we develop, like proto stars, some sdks, like for Python. Recently also helped with the game of life, smart contracts. And thank you for having me here.
00:02:24.430 - 00:02:30.638, Speaker A: Oh, pleasure. Julian. Yeah.
00:02:30.724 - 00:02:59.558, Speaker C: Hey, Tom. So I'm Julian. I'm one of the three co founders at Argent, and at Argent we're building. It's still. Which was the first wallet on mean. We've known Starware for quite a while, I think, Tom, we met the first time at Defcon in Ozaka, quite a long time ago. And we've been having fun on Stacknet since, I believe October, something like, yes, September, October 2021.
00:02:59.558 - 00:03:17.802, Speaker C: And so in addition to Argent X, we are also contributing to some of the tooling of the ecosystem. I believe we used to be the domain contributor to Starknet JS and also to get Starknet. I'm happy to be here.
00:03:17.936 - 00:03:21.310, Speaker A: Amazing. Next in line, Moti.
00:03:23.170 - 00:03:56.386, Speaker D: Yes, thank you, Tom. So happy to be here as well. Thank you for the invite. I'm Moti, I'm one of the co founders of Bravos. Bravos is smart contract based wallet, fully focused on Starknet. I think I got acquainted with Starknet a bit over a year ago, so maybe around October 2021. Bravos is actually the second protocol that we build on Starknet.
00:03:56.386 - 00:04:08.940, Speaker D: The first one is my swap. It's the first DFI app to launch on startnet, both on Testnet and Mainet. And excited to be here as well.
00:04:12.130 - 00:04:17.470, Speaker A: Amazing. And last but not least, Yorick.
00:04:18.370 - 00:05:04.240, Speaker E: Thanks Alan. Yeah, my name is Yorick. I am a manager for Nethermind, which does a bunch of different infrastructure projects in the Starknet space. Up until a couple of weeks ago, I was on the lead devs on the warp transpiler project, which I've been working on about over a year, and have been very closely following all of the changes to Cairo as a result. And that's kind of why I'm so excited about Cairo. One which is coming hand in hand with the Regenerasis and the other things that Nethermind does is Voyager, which is a block explorer, and Juno, which is a client implementation for the stucknet ecosystem. So we're heavily affected by other Genesis and we're very excited to see it.
00:05:05.890 - 00:05:15.470, Speaker A: And also was mentioning you're doing audits. Yeah. And working on ave implementation for Starknet.
00:05:16.550 - 00:05:19.506, Speaker E: We end up doing so much, sometimes I forget to list it all.
00:05:19.688 - 00:06:20.478, Speaker A: Yes. Okay, great. So as I've said, the goal for me in this talk is to hopefully to explain what is Regenesis and why we need it, and then if Kuba will be able to tell how he helped design the way we want to approach Regenesis, and then it will be great to understand how it might affect the different parts of the ecosystem. So first and foremost how it will affect users. And we have our wallets to explain that, but then also the tooling and application developers. But let's start from what is Regenesis for Starknet and why we need it. So Starknet, we should mention is Starknet Alpha.
00:06:20.478 - 00:07:53.460, Speaker A: It was first released, then it was on Robston Testnet, but let's say to the world on June 2021. And the idea was there to basically try to have something out as soon as possible and to always release to the public, to the developers, the latest state of Starknet, and hopefully to be able to move fast. And that in turn meant also that we chose not to do a big design, but understand the needs as we go. And what that at the end resulted is that there were many changes during the lifetime of the project. For the last, let's say, one and a half years. On one hand, I think this decision was good, because it allowed us to, quite early on to allow developers and users and builders to start working on Starknet, be part of its creation, and also create a really amazing ecosystem in my opinion, which I'm very happy to be part of. But on the other hand, it meant also that we now have some things in the way Starknet works that we don't want to continue to have in the future.
00:07:53.460 - 00:09:30.398, Speaker A: And the way to remove this extra weight or unnecessary behaviors is to do a regenesis. What does regenesis mean? It basically means that we will transition the network to work in a state that removes all this extra weight. Specifically, one very important thing that was the main driver towards this decision was the fact that, as you know or not know, we're basically releasing the first major version of Cairo, which is a complete rewrite of the compiler, which is called Cairo one. We've open sourced it last week. Cairo one is just a much better language in almost every aspect from the developer point of view, but it also provides a property which currently does not, currently contracts in Stargate does not have, and that is the ability to move every transaction, even a failed transaction, which is a common behavior that we have today on Ethereum. And this property is very important for a decentralized Starknet because it allows us to have a simple decentralized protocol which is not prone to some attacks that otherwise we can have. But in order to enjoy these great benefits, we need to have a network which only operates with those kinds of contracts.
00:09:30.398 - 00:10:19.886, Speaker A: And both those two factors led to the decision to have a regenerasis. So hopefully it's clear. If something in my explanation was not clear, the other speakers can highlight it and I will try to explain it better. Yes. So this was the need for that. Now, when we originally thought on how to do regenerasis, even though the only solution we could come up with was to basically start a new chain from scratch. So deploy another instance of starknet and then ask the users and applications to migrate to it, either via, I don't know, just going to l one and then back to l two or some sophisticated mechanisms.
00:10:19.886 - 00:10:36.166, Speaker A: But in any case, it was not nice and not clean and very painful. Okay. And that's where Kuba enters the story. Kuba, may you come to stage and take it from here, maybe?
00:10:36.348 - 00:11:25.960, Speaker B: Yeah, sure. Okay. So it all started with Tom being sad and it ended with Tom being happy, I guess. So, as Tom mentioned, the flow initially was to migrate to put the state migration on apps. And unfortunately this is something not trivial to do, especially if we're talking about some currencies, things like that. And also the problem was that the UX of the end user was quite poor, to be honest. And I really want to understand the reasons why there has to be a complete state reset for that.
00:11:25.960 - 00:12:26.460, Speaker B: And I wanted to discuss this with my team. So I prepared some questions to Tom and asked him, like, why can't you just do x? And then he replied, we discussed it. It, and turns out that it is possible to create a simpler flow, one that is very smooth for users. Because as people doing wallets will explain you soon, it will only require end users to upgrade their accounts like they do currently. So it may be very smooth for the users and easier for the applications, because it will only require migration to k one code base and then making sure that the address is the same, so there's not much more to sell, to be honest.
00:12:28.990 - 00:12:39.600, Speaker A: Yes, this is true, but maybe you can, I mean, I can do it as well, but explain a bit how the new flow works and why better.
00:12:40.690 - 00:12:56.950, Speaker B: Okay, so one important thing to know is that the KrU one, after you compile it, then at the end you use the same assembly language as with Cairo use currently. That's something quite important in my opinion.
00:12:59.450 - 00:13:26.720, Speaker A: Just to explain on that, both the old version of Cairo and the new version of Cairo are compiled to bytecode that are the same, right? They're the same virtual machine. And from the perspective of Starknet, it really doesn't matter. I mean, not completely true, but it really doesn't matter if you wrote the contract in Cairo one or in Cairo Zero.
00:13:28.050 - 00:14:25.120, Speaker B: Yes, exactly. So I was thinking like, can't you just use a new transaction version? Like previously we had transaction version zero, and then there was upgrade to one. So why can't you create a new transaction version that would only be compatible with the new Krolang and. Yeah, and now the flow will be the following. There will be like a migration period when you can use both contracts written in current Kro version and Kro one. And I'm not sure how long it will take, probably like three months or more. And during this period, applications using kro one and k row zero can coexist, can call each other.
00:14:25.120 - 00:15:09.680, Speaker B: Yes, those two versions will coexist. And then after the end of the migration period, there'll be a point of time when the Ko zero contracts will be disabled. You will no longer be able to call them. Before that point you have to migrate your code base to Ko one, but you have a lot of time and it's not disruptive. For the users at all. And after this point of time, the end result is that you only have k one contracts that you can use.
00:15:11.570 - 00:16:08.286, Speaker A: Exactly. To repeat what Kuba said, basically when Cara one will be released, which is supposed to be early next year, it was a bit delayed. We will begin a period which we call the transition period. And in this period, applications will rewrite or port their code to Cairo one. And Starknet will basically allow existing contracts to replace or to update their code to Cairo one. And during this period, as Kuba mentioned, Cairo zero contracts will still be supported. And after we will finish with the transition period, basically we will disable the caro zero contracts and we will get the property that we originally aimed for, and that is to have a state which has only cairo one contracts.
00:16:08.286 - 00:16:45.790, Speaker A: And basically it means that every transaction can be proven. But the nice thing about this flow is that from the user perspective and from the app perspective, we maintain the state, each contract maintain its address, each user maintain its address, every contract can decide when to do the migration of the code and it will not affect anything else because the interfaces will remain the same. Yeah, that's a recap of the history and the flow. So thank you very much Kuba.
00:16:48.290 - 00:16:49.280, Speaker B: Thank you.
00:16:50.290 - 00:17:18.620, Speaker A: So now let's move to the next question. I think I've said it multiple times, but maybe just say it from your perspective, both the Argent and Bravos. Maybe Julian, you can start, but what does it mean for you to prepare for the regenerates, and how do you expect the user experience to be?
00:17:19.790 - 00:18:20.426, Speaker C: Yes, so actually with this new design, as Kuba mentioned, we expect the user experience to be exactly the same as a normal. I mean, users probably know there's been already a few upgrade of the account contracts, both on Argent and Bravos, I believe because the protocol has undergone some breaking changes. For example, recently 00:10 was introduced, which separated the execute method into execute and validate. And of course to adapt to that we needed to release a new account contract. And for the users this resulted in just a simple transaction, because the account contract is a proxy with a target implementation. So when there's a new implementation, we basically tell the user through argent, you need to upgrade your account. Users clicks ok, review the transaction, transaction fee sends the transaction and that's done.
00:18:20.426 - 00:19:12.782, Speaker C: So that's a flow that has been there in Argentx for quite a while, that's been already implemented several times by users, sometimes to their frustration. But that's what happens when you're in Alpha. And so we see this regenesis will be exactly the same, it will be under the hood. It will be a slightly different upgrade from a technical point of view, because it's not the proxy just we are not replacing the implementation the same way that we are doing now by just overriding or changing the value in storage. We are actually using a specific syscall that stackware will offer, but from the user's point of view it will be exactly the same. So as a user during the transition period, there is one day where we will make a new release of ArgentX. And when you will open Argentx, you will be invited to upgrade your accounts exactly the way you've done so far.
00:19:12.782 - 00:19:46.070, Speaker C: You will click on the button, review the transaction, send the transaction, and after that the underlying your account will be supporting KRO 10. So we know the experience will be extremely smooth for users. The only requirement for users to make sure they open their RGenx extension during the transition period. So if you're listening now, make sure that as soon as we've made that release, make sure you open your Arginx extension before the end of the period. But if you do so, everything will be extremely smooth.
00:19:48.910 - 00:20:24.100, Speaker A: Thank you very much. I would just mention that Kuba had another idea which was trademarked as the shadow proxy, which can also help in the case that users won't do the upgrade and, I don't know, come back a year after, but I won't mention it because I don't want users to rely on that. But I'm just saying that here. Okay, thank you Julian Moti, anything to add on that? Because I have a different question.
00:20:24.550 - 00:21:01.120, Speaker D: I think that from the technical perspective, you both covered that pretty well. The upgrade will be seamless to users. But I do think that Kuba here deserved, and the entire software mentioned team deserved a lot of kudos. Because while we were breaking our heads are to convey the fact to the user that there is going to be a state reset. They actually found a way to avoid state reset. So in that sense, Kuba, you didn't make only Tom happy, but I think you made all of us happy. And that's really great.
00:21:01.490 - 00:21:02.960, Speaker B: Happy to hear that.
00:21:04.070 - 00:21:12.450, Speaker A: And Martin, maybe you can also explain a bit how you plan to approach it from the Myslop perspective.
00:21:14.230 - 00:21:18.118, Speaker D: Yeah, so I think that similar to.
00:21:18.124 - 00:21:18.950, Speaker C: The wallet.
00:21:20.890 - 00:22:11.910, Speaker D: We will make the maximum in order to have it as seamless as possible to the users. The Myswap decks is also under a proxy contract, so it will be relatively easy to do the same flow. Myswap is already audited, so we will need to re audit of course, the code once we move to Cairo 1.0, but basically we say that God or Satan, you can choose this in the details, but basically, according to our understanding now, before diving into Kyle 1.0 should be completely seamless to users.
00:22:13.450 - 00:22:37.040, Speaker A: Yes, that's the goal. Okay, great. Yurik, you've mentioned that you are working on work, so maybe if you can say a few words about it and maybe explain how it affects you and how you plan to do. Also the migration to Chiro one.
00:22:37.810 - 00:22:57.400, Speaker E: Yeah, for warp, really, neurogenesis is dominated by the progression of Chira one and its release onto the starknet. So for us on our side, we just need to change a lot of the transpiler architecture to fit the new semantics. But that's something that we're looking forward to and will actually make it much better.
00:23:00.090 - 00:23:08.630, Speaker A: Maybe explain in one sentence what is warp and how it approached the mission that it comes to achieve.
00:23:09.070 - 00:24:16.480, Speaker E: Yeah, warp is a transpiler from solidity to Cairo. The idea was, how do we make the transition from all of the EVM application layer implementations as smooth as possible to Cairo itself, and basically just creates a perfectly functioning Cairo code from a solidity contract. So, for us, we've been following all of the changes of Cairo since almost a year and a half ago, and now Cairo one is like the largest change that we have to do for this transpiration process. But Cairo one comes with a lot of really nice features, a lot of goodies. It's going to be really nice language to work in, and it actually is much closer in some sense to solidity than the old Cairo was. So it's going to be a much nicer transportation process from now on. But the question around the regenerasis for us is how should we make these contracts upgradable? So there's some discussions now about whether or not we should automatically include the syscol into the output, Carol, or whether or not it should be a user decision to add this in.
00:24:16.480 - 00:24:37.960, Speaker E: We still haven't converged on a final solution here, but we want to make it as painless as possible to upgrade your warped contract. And then when the new version of warp comes out, it would just be a matter of swapping these contracts out. Yeah, I think the most.
00:24:38.730 - 00:25:35.670, Speaker A: Okay, so I will just maybe elaborate a bit on the last part of what you mentioned. So, to allow the upgrade of Cairo zero contracts to Cairo one, we basically introduce a new syscall. Syscall is the way that contracts interact with the state in startnet. So we introduce a new syscall that will allow replacing the existing code of the contract with Cairo one code. Now, generally contracts does not have the ability to call it right. It needs to be implicitly written or somehow accessible throughout the code. So one way to handle that is to use the proxy pattern.
00:25:35.670 - 00:26:21.160, Speaker A: Proxy pattern is a well known pattern for upgrading contracts on Ethereum and for all the account contracts, this is the default because it makes a lot of sense. For application contracts, this is not the default. And this is why Jarek mentioned that they are considering what is the best way to approach it for contracts that will be whooped and deployed in the upcoming, let's say three months or something like that. Okay, great. Thank you very much. Going back to my questions, just a second. And yes.
00:26:21.160 - 00:26:49.520, Speaker A: Okay, so I actually don't have more questions on the Regenesis. I have other questions so we can go over to them. But if someone from the audience have a question, you are welcome to request to be a speaker. And if someone else from the participants have anything they want to add, this is also the time. Otherwise we are moving forward.
00:26:53.570 - 00:27:42.910, Speaker C: Maybe here. Tom from Julian, I do have a question or something that I think would be interesting for the audience is to know a bit more specifically for builders the kind of the dates you have in mind. So, meaning when will this KRO 10 be supported on Testnet so that we can start building and experimenting? And when do you plan to have it on prod on Mainnet? I imagine that these dates can move, but I think it would be good to kind of explain the timeline, even for builders to understand when we can start doing what. Because as builders, we need to edit our contracts. And so I think we need to plan ahead exactly when we believe our contracts will be ready and so on. So knowing a bit more precisely the timeline I think would be quite useful.
00:27:43.590 - 00:28:33.570, Speaker A: Yes, so great question, the current plan, and it might change a bit because we are really trying to. Basically, as a general rule of thumb, we are trying not to couple projects together. Right. So if we want to introduce a big new feature, we want to have it when it's ready and on time. And here it's a bit different because the introduction of Cairo one is coupled with the regenesis and we understand that we want to have this event as soon as possible. So in general it's a bit different than the way we work on other stuff. But with regards to your question, the idea is the following.
00:28:33.570 - 00:29:53.610, Speaker A: The idea is to have by the end of the year an initial version of Cairo, one originally we hope to have by the end of the year, a version which supports all the existing features of starnet contacts in Cairo one. But it seems that we won't be able to get to it. So what we'll do is that we'll release a version of Cairo, one that allows to write stagnet contract, but without the full set of features. Hopefully it won't take long to achieve it, but it will allow builders to start writing or experimenting with it and start porting their contracts to it. And then I hope that somewhere on January we will constantly post updates that add more and more feature where we aim to have the full feature parity with the existing Starknet contracts in somewhere around the end of January. Right. So you will be able to start writing stuff by the end of the year, and you will be able to write fully all the things that you need somewhere around the end of January.
00:29:53.610 - 00:30:43.850, Speaker A: And then what we plan to do is still, let's say it's tentative. But I think that what we plan to do is to have it on testnet for something like January, February, something like that. And this will allow two things. One, builders to start porting their app, testing them and auditing them, and for Sierra itself to run on Testnet. And hopefully to find meaningful bugs before we edit to Mainet. And then somewhere around the end of February to introduce it to mainet and start the transition period. So those are basically the timelines.
00:30:43.850 - 00:30:48.610, Speaker A: Does that answer the question?
00:30:49.860 - 00:30:51.330, Speaker C: Yeah. Thank you.
00:30:52.120 - 00:31:37.010, Speaker D: Okay, Tom, maybe just a follow up questions. You released Cairo 1.0, I think late last week. We got a snippet to the syntax changes. They seem, I would say, not mild. Maybe you can touch upon what will it take for DAP developer on Starknet to port, to Cairo 1.0, so we get some sense of the scope of work that is ahead of us.
00:31:39.460 - 00:32:44.724, Speaker A: And again it remain. I mean, hopefully I won't be completely wrong, but there are indeed syntax changes. But the way that everything works and the way that the structure of the contracts, nothing of that change. So in that sense, there is no need to rewrite the application or the flow of the application, or the way it is constructed. There are changes. I mean, we're basically moving from Python like syntax to a rust like syntax, which is a big change from syntax perspective. But I think that once you get the hang of it, changing it across all the contracts you have, you will need to understand the new syntax of function or how to do that.
00:32:44.724 - 00:33:32.870, Speaker A: But once you get the hang of it, it won't be a new learning curve for all the functions that you have. Same for types, same for. So this is the way I view it. We do plan to release in the upcoming weeks and months more documentation and tutorials, and also to have like live porting sessions where we take existing code and do it together with the audience. The transition from Cairo Zero to Cairo one, we're planning to have these kind of workshops in the upcoming star code sessions on February. So this is currently the plan.
00:33:36.060 - 00:33:36.810, Speaker D: Cool.
00:33:40.460 - 00:33:49.470, Speaker A: Okay, great. I think I'm looking at the correct place and I see no questions. Ollie, correct me if I'm wrong.
00:33:50.560 - 00:33:52.716, Speaker E: Yeah, no questions so far.
00:33:52.818 - 00:34:29.210, Speaker A: Okay, perfect. Maybe. Okay, great. So the next question and each participant can answer independently. If we look past regenesis and generally into the future of Starknet, what are you excited about in the roadmap or in the general direction that Starknet is heading? You can take it wherever you want, the ecosystem, the features, everything. So yeah, let's start from Joel this time.
00:34:31.740 - 00:35:34.920, Speaker E: Thanks, Tom. I think the thing that's getting me the most excited is that Starknet has been building out from its core, from this alpha network that's still developing, to having argent, Bravos, Pathfinder, Protestar all coming together at around the same time and then suddenly getting much, much better. So everything seems to be converging right now to a really stable and useful ecosystem, which is really nice to see. So a lot of what I'm the most excited for is just the increases in performance that are coming along. The implementation of Cairo Rs, although I'd be very interested to know what Cairo one means for the. I guess it doesn't mean anything because it's the VM implementation, but that should make all the testnets run faster. And so I'm thinking that the barrier to entry and a lot of the niggles are being ironed out right now and should all kind of converge within the next couple of quarters.
00:35:34.920 - 00:35:58.230, Speaker E: So it's going to very suddenly feel like an incredible experience. You're working on Stacknet and I'm really looking forward to that convergence basically. Yeah. And then other things like proof parallelism. I want to see where that is going and how starknet increases its pps throughout the next couple of months.
00:35:59.720 - 00:36:04.580, Speaker A: Amazing, moti.
00:36:07.480 - 00:37:23.980, Speaker D: Yeah. So I think on the network level, as you know from a firsthand experience, I'm pretty excited about the optimization roadmap. I think that the latest update to mainet with parallel transaction is already bring some relief to the network and we see users that are happy again and not complaining about transaction speed. And that's great. And to know that this is like only the very first steps and more and more optimizations are ahead of us then I think that's both crucial and exciting for the success of Stocknet. Of course, on Bravo's perspective, I'm very excited about what account obstruction enables us to do about the hardware signer that we have launched to mainet yesterday. That gives users the strongest level of security when using Starknet through their mobiles.
00:37:23.980 - 00:37:29.490, Speaker D: And yeah, looking forward for more and more things ahead.
00:37:30.020 - 00:38:00.770, Speaker A: Okay, maybe I agree with all of that. And maybe I can add one thing with regards to the last point you said. So we talked, I think it was two weeks ago, we tried to understand how we can have the cost of the. How will signer signature verification be. Hear me.
00:38:02.600 - 00:38:03.636, Speaker D: Now? We can hear you.
00:38:03.658 - 00:38:45.568, Speaker A: Okay, great. We actually dived into it in the last two weeks and we basically tried to understand after the introduction of recursion, which happened I think two months ago or something like that, what should be the updated prices for the execution on L two. And actually from the work that they've been done in the past two weeks, we think that the actual reduction that we can introduce like, I don't know, pretty soon is something like between ten x to 20 x reduction in the cost per execution resources on L two.
00:38:45.654 - 00:38:45.856, Speaker E: Right.
00:38:45.878 - 00:39:06.440, Speaker A: So if today a Cairo step costs 0.5 gas, then it can easily go down to 0.5 gas, which I think makes the use of those kinds of signatures much more feasible.
00:39:08.700 - 00:39:30.640, Speaker D: So even more exciting. The road ahead was clear, but the fact that it comes so soon then, that's fantastic. I think that even after our session two weeks ago, which we ended up in a very optimistic way, we didn't expect that so soon and definitely. That's great.
00:39:30.710 - 00:40:33.520, Speaker A: Yeah, maybe in one sentence I will explain. Why is that possible? Because in very high level, up until the introduction of recursion, the amount of transactions that we were able to put in a proof were bounded by the size of the machine that we were able to use. So we used very big machines for the provost and we used like the biggest that we could find and that bounded some stuff. But once we introduced recursion, this bound is no longer the case because we can combine proof and I won't explain exactly how it works, but basically the amount of transactions that we can now introduce in a proof growed by something like ten x. So this is the first and foremost reason for why we can introduce this reduction. Okay, thank you. Moti Julian.
00:40:35.620 - 00:41:27.664, Speaker C: Yeah, I think it has been mostly said, but yeah, from personally and what excites us a lot at Argent is the scaling roadmap with the improvement, the rewrite of the kirovm in rust, the rewrite of the sequencer in rust, that's kind of the promise. And the holy grail for sparknet is to deliver on scaling. And for us, we've always been waiting for a blockchain which can scale and with account abstraction. And you launched with account abstraction from day one, which was great. But of course scaling has been limited so far. And so I think having a clear roadmap and delivering on that roadmap for us is very excited because we believe that. I think we will discover new use cases if we provide an environment with account abstraction and that can scale and onboard millions of users.
00:41:27.664 - 00:41:59.390, Speaker C: I think that will be a fantastic ecosystem to be in. But we're also excited by your path to decentralization. With the foundation that was announced recently, I think all this is what will make sparknet an amazing ecosystem. I mean, it is an amazing ecosystem, but we are still small for the moment. And I think with this roadmap and this stronger foundation, I believe it can be, hopefully the blockchain of the future.
00:42:01.140 - 00:42:02.160, Speaker A: Amen.
00:42:10.750 - 00:43:15.730, Speaker B: We can hear you, Tom, but I can go next, I guess so. I'm pretty bullish on KR one, to be honest. It just looks like a much nicer language to work with and will make onboarding for the new users much, much easier. Currently, with the k zero, it's difficult, and we have a saying in our team that with k zero, well, you can get used to it. So I'm pretty hyped about k one as a contract developer, but also I'm very optimistic about ecosystem moving towards native performance. Regarding the tooling, before it was mostly python based, so it didn't perform as good as it could. And now with the whole ecosystem moving more towards rust, the UX developers should be much better.
00:43:15.730 - 00:43:27.430, Speaker B: The feedback loop will be shorter for testing all that stuff. So yeah, those are two things that are most interesting to me.
00:43:28.200 - 00:43:58.110, Speaker A: Amazing. Yeah. And I think I will add one thing from my side, which might be small, but I think is meaningful. And that is that Kyo one will finally introduce the removal of implicit arguments. Hell yeah. I think it was needed and it soon will be here. Okay, great.
00:43:58.110 - 00:44:43.150, Speaker A: I have no more questions, and I don't see any other questions, only people saying hi. So hi everyone. And hello. Yeah, so that's it. From my mean, as a personal note, I'm working personally with each one of you, Moti, Julia and Yurik and Kuba, for a long time now. I don't know, let's say a year and a half. And personally, I'm very enjoying working with you, and I'm very happy, I don't know, without mentioning anything else, just for the fact that we're able to work together.
00:44:43.150 - 00:45:03.472, Speaker A: And today was also very pleasant and interesting discussion. So thank you for joining me here and for everyone who listened, whether you're a real human being or a bot. Thank you very much. Yeah, that's it.
00:45:03.606 - 00:45:08.210, Speaker D: Tom, thank you. It's a pleasure working with you and the entire starcoat team.
00:45:09.380 - 00:45:10.130, Speaker B: Absolutely.
00:45:15.900 - 00:45:19.240, Speaker A: So how do we end the Twitter spaces?
00:45:19.740 - 00:45:20.948, Speaker D: We say bye bye.
00:45:21.044 - 00:45:21.924, Speaker C: We say goodbye.
00:45:21.972 - 00:45:22.570, Speaker A: Yes.
00:45:23.500 - 00:45:25.704, Speaker D: Bye, everyone. Thank you very much.
00:45:25.822 - 00:45:27.636, Speaker C: Thank you, guys. Cheers. Bye.
