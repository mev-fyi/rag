00:00:02.670 - 00:01:14.360, Speaker A: You fast forward and our contract is deployed and ready to go. We can already see our expanded implementation in use get balance, which before had no input, now receives the user id as input and we can see that user number ten has zero in their balance. At present we can use increase balance to give the given user number ten an extra thousand in their balance. Note that beforehand increased balance only received the amount changed as input. By invoking yet balance again, we should see that our user has now had her balance increased to 1000 appropriately. One extra thing to note at this point is that we can also use darknet call instead of starknet invoke for functions that usually are allowed to change the state of our contract in order to use them without changing the state. What this means is for example, I can use this previous invocation of increase balance, but this time use it with startnet call and instead of receiving my transaction id as I did before, I get nothing.
00:01:14.360 - 00:01:58.690, Speaker A: What this did was it's sort of a dry run of this function. It's not going to change the balance, but it indicates to me that when performing this, if I have no error received, this function is performing as I expected and I'm safe to send it to the starnet system. I'll produce another example. In this case we'll do increase balance again, but not provide user id. In this case I get the appropriate error message and I know before committing this as a transaction to the system that this invocation will not succeed. That's a neat trick to use call versus invoke in this context. Furthermore, just to illustrate, we can use get balance again on a different user, let's say user number 30.
00:01:58.690 - 00:02:23.000, Speaker A: And we can see that even though user ten has had their amount increased by 1000, user 30 still remains at a resolute zero. And this is true for any arbitrary user will select at this point our get balance, or it just calls our balance storage variable, which by default allocates to any user that hasn't been allocated thus far default value of zero. So.
