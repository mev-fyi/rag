00:00:00.810 - 00:00:35.590, Speaker A: You okay? So good morning, everyone. Thanks for waking up early enough in the morning. So I'm an academic and my academic field is called algorithmic game theory. And this is a field that deals with incentives in computer systems. So we all know that we can analyze computation. Of course, without mathematical analysis of computation, no one could even start talking about ZK proofs or anything like that. But it turns out that you can also analyze incentives.
00:00:35.590 - 00:01:20.342, Speaker A: And that's a field that does that is called game theory. And basically what algorithmic game theory tries to bring this kind of analysis to computer systems. And in my case, in our case, I will talk about how we design incentives, how we think about incentives in computer systems in the context of transaction fees, as that we all know from blockchains. So let me start by defining the two word here, transaction fees and mechanism design. So I'll start with transaction fees. So a blockchain has a bunch of blocks. Each block gets a leader and the leader basically, sometimes the leader is called a miner, a validator does a sequencer, doesn't really matter.
00:01:20.342 - 00:02:06.846, Speaker A: The point is that we have one entity that begets to build the block. And basically users come and want to buy space on the block for their transactions. So this is going to be our point of view. So the leader gets a block, he can sell spots on the block to transactions and the users need to pay him for that. And something that's a little bit unique to blockchains and is not very standard in other situations. Not only can the user pay with tokens to the leader, but we can also burn tokens, basically take tokens and the mechanism can eat them up. Or the mechanism can also mint new tokens and give them to the leader, which gives us more flexibility, if you wish, in this respect, in blockchains.
00:02:06.846 - 00:03:00.470, Speaker A: So I think the most important point about this slide is trying to figure out what I'm not going to talk about. So I'm not going to talk about how the leader is chosen, neither whether we are proof of work or proof of stake, nor how exactly is the consensus of choosing the leader done. But the point is at some point we get and we know this is the leader now we can sell stuff. Also, I'm not looking inside the transactions, I'm just looking at transaction needs a space on the block and I'm selling this space in particular. This implies I'm not going to talk about anything like mev, right? Because mev, you need to see what's in the transaction. So these are the key things I'm not talking about okay, so now what is mechanism design? So mechanism design is a mathematical theory, part of economic theory. It's actually received a bunch of Nobel prizes in the last two or three decades.
00:03:00.470 - 00:03:37.694, Speaker A: And basically it talks about how do you design an economic transaction, the allocation, who gets what and the payments who pays what to whom, in a way that you get your goals, your desired economic goals. But the main point is in the face of strategic behavior of the participants. So this is completely standard for economists. If you have any kind of transaction, of course, every person has their own goal and they're going to optimize. I'm buying, I want to sell to pay the least amount of money. If you're selling, you want to get the most amount of money. And this is completely standard economic theory.
00:03:37.694 - 00:05:04.306, Speaker A: In computer science, we're less used to thinking about that because usually we have our input and the input just sits there. But of course, in the context of blockchain and in general, in context of decentralized systems, incentives are extremely important. So the point is, how do you design your systems that even though the different users, each one, the different participants, each one acts strategically, still you get whatever you want to get? So this is a mathematical theorem you have, like definition, proof theorem and so on. I'm not going to do that here. I'm just going to try to give you the flavor, the way of thinking that we get from this field of mechanism design and algorithmic mechanism design in the context of how do you design the Transaction fees of a system? So that's my agenda here. So let me start by asking even, why do we need transaction fees? Why do you need to pay even to put your transaction on bitcoin or ethereum or any other chain? So there's one easy answer, is if you don't pay the miner, the leader, to put your transaction in, he might not put any transactions in. Why should the leader make any effort whatsoever? You can't force him to put at least 100 transactions on the block because he can always invent fake transactions.
00:05:04.306 - 00:05:33.890, Speaker A: Who can know that these are not real transactions? Right? And he can say he never received any transaction. So you first need him to pay a little bit to the leader, just so it's worth his while to put your transaction in. But the more interesting and important point of view, and this is really what's going to drive us, is the fact that we get congestion control, usually our block. So now I have my block. I'm the leader. The block is limited by some sense. Usually there are some technological limitations.
00:05:33.890 - 00:06:29.394, Speaker A: We want weak enough computers to be able to be full nodes or to be sequencers or whatever. So there's going to be, the protocol is always going to define some limit on the size of the block in some sense of size. And the point is, almost always will have more demand for space on the block than supply of space on the block. Simply because if things are extremely cheap, then I will want to do my one penny transactions on blockchain or on ethereum. Why not? There definitely is much use to very cheap transactions. But the point is, if it costs a dollar to put your transactions, and of course all these new uses will not be put, will not be put onto the blockchain, but some other means, maybe I will actually have a penny and pay you, or maybe I just won't do these types of transactions. So the goal is always, we want the most important transactions.
00:06:29.394 - 00:07:14.434, Speaker A: We want our system to bring the most possible value to its users. So we want the most important transactions to be the ones that are taken into the block. Okay? So this means that somehow we must figure out which are the most important transactions. And the way we're going to figure them out is by how much is the user willing to pay for them. So our mental model, and this is really a point of view that one really needs to get used to. But it's really important and it's completely standard, by the way, in economics, is each user has some kind of value for his transaction. Now this value is not an objective thing that a transaction where you move a lot of money or a big nft or something like that is more valuable, but it's completely subjective to the user.
00:07:14.434 - 00:07:50.786, Speaker A: And the way you measure it is basically how much the user is willing to pay to put this transaction on the current block. So this is our value of the transaction. And the point is we want to basically maximize value. We want to put the transaction whose total value is as large as possible. This is how we bring the maximum amount of utility to our users. Now it's important to distinguish between this and a somewhat different consideration, that of maximizing revenue. How much money am I able to take from my users? That's another interesting goal, and we'll talk about that a little bit later.
00:07:50.786 - 00:08:28.974, Speaker A: But for now, just let's look at a blockchain that really wants to bring as much value as possible. So this is what we're looking at. So the point is that once we put a fee to get your transaction accepted into the block, the only transaction that will be accepted are those that are willing to pay more than the fee. I e those that their value for their user is bigger than the fee. And that lets you put the fee at the right place to get the maximal amount of. To get only the important transactions. So let's see the simplest kind of thing possible that you may think of.
00:08:28.974 - 00:09:07.900, Speaker A: And this is pay your bid, which is what is actually used in bitcoin. So basically in bitcoin, a user can suggest whatever fee wants, do this transaction for $17. Or miner, the leader, basically decides on an arbitrary subset of transactions that it wants to accept and collect the fees that they suggested. And this is basically what you do. And of course there is a limit. So the block, the limit in bitcoin is just total number of megabytes. And you need to fit in within the one megabytes that our miner has at his disposal to sell.
00:09:07.900 - 00:10:06.554, Speaker A: So let's now try to figure out what are going to be the incentives of the different participants in this mechanism, if you wish. Okay, so the easy part is, what will the miner do with a strategic validator who wants to make as much money as possible do? Well, for him, it's really simple. He wants to put in, to collect the highest fees possible from the transactions that he puts into the block. So the block fee is a completely different thing. He gets a lot of money and that's very important for him. But now that this is taken out of the equation, because he gets that, whatever he puts in the block, now he wants to take the collection of transactions that together give him the highest possible value fee. So if all transactions were exactly the same size, he will just take, maybe he can take 300 transactions.
00:10:06.554 - 00:10:46.906, Speaker A: He will take the 300 transactions that offer the highest fees. And that's what he would take. If there is also different sizes for different transactions, he would basically sort them according to fee per byte. And that's what the standard was. A strategic miner, the leader, who just wants to optimize his own utility, that's what he would do. And this is what happens in bitcoin. A more difficult consideration is what can you say about the user, about the person putting a transaction to bitcoin? How much fee should he offer? Because whatever he offers is what determines, first of all, whether it will be chosen or not.
00:10:46.906 - 00:11:20.054, Speaker A: And then how much it pays. So basically what I as a user would want to do, would try to guess the cheapest fee that would get me put in, obviously. But how do I know what that fee? It's very difficult to figure out because it changes all the time. It depends on the competition. It really does change with time. So I sort of have to guess my bid according to the situation around me. And this is what maybe your wallet will do for you.
00:11:20.054 - 00:12:33.550, Speaker A: Try to figure out the recent prices, add a little bit, try to put in, and that's a very difficult thing to do, and it's not clear how to do it completely well, from some very rough point of view, after a while you figure out essentially the prices in the system, or more or less, and everyone will bid the minimum price it would assured that it'd be in. But this is very much more or less, and it changes all the time. And it's not a certain kind of thing. So we see there is problem as it's not an easy kind of thing here for the user to bid in this bitcoin, this payer bid kind of transactions. Indeed, if we look at, I don't know, the prices from, let's say, last year, what I have here is two graphs. One of them, the green feet line, is the fee if you really wanted to get into the current block, while the purple fee is a fee. If you were willing to wait just six blocks, just a little bit, a minute or two, and you see that there are large differences, maybe more than a factor of two or three, in the price you need to pay.
00:12:33.550 - 00:13:51.478, Speaker A: Whether you're very impatient, really want this block, or whether you're willing to pay six blocks, wait six blocks, not more than that. Now, it could be some of this difference is because people really want it to be now, rather than in a minute or two from now. But I suppose that most of this difference is just due to the fact that people didn't exactly know what to bid, okay? Now, if you're doing $1,000 transactions, and maybe you don't care so much whether you're paying a fee of half a dollar or $0.20, but of course, if you're doing a one dollars transaction, you care a lot about that, because probably you're doing many of these one dollars transactions. So the question is, how can we optimize on that? So one of the main design goals in the whole field of mechanism design is to basically free the participants from all these kind of strategic considerations. So the participants, people, users in our case. But in general, any participant in our economic transaction doesn't really like to have to do this kind of strategic calculation, trying to figure out what exactly is the situation of the system and what is the best bid for me and so on.
00:13:51.478 - 00:14:59.078, Speaker A: It's much better if we have a mechanism that to begin with, I just say the information that I know specifically how much am I really willing to pay for my good, or in this case, for my transaction to be included in the next block. And once I tell that, I know that basically the mechanism to do what is best for me without really taking advantage of me revealing this information, but really that I only pay the smallest amount that I could have paid, there is nothing that I could manipulate the system in order to get a better deal. So if you could do that, you have a very robust kind of system. You have what's called, we call incentive compatible, or truthful, or strategy, or strategy free system, where you just need to figure out what you want, tell it to the system, and there's never any reason for you to manipulate. And this is really a good design goal because it makes things simpler to all participants. So the classic example of such a situation is what's called a second price auction. You sell a single item, suppose there was just one slot on the block.
00:14:59.078 - 00:15:57.120, Speaker A: The way to get this kind of incentive compatibility is you tell me how much you're willing to pay, the highest willing to pay bidder is going to take the transaction, but I'm not going to charge him what he bid, but rather I'm going to charge him the second highest price, the highest competition. And the logic is, this is the smallest amount that he could say in order to win the transaction. If he says less than the second price, he's not going to win it. So in this situation, and this is like a mathematical theorem, so you can definitely formalize it completely and prove it. And it's an easy mathematical theorem. It's just that the concept is really interesting that if you charge the second highest price, no one ever has any reason to manipulate you, people will just tell you what is the maximum they're willing to pay. So we would like to get similar mechanisms for our general situation, so we're going to build towards that.
00:15:57.120 - 00:16:57.250, Speaker A: But in the blockchain context, we don't only have users, which definitely, we want the users to be strategy free, not have to worry about their values. But we remember that also our leaders, miners, validators, sequencers, they are also strategic agents. They will not just do what we tell them in a blockchain because it's decentralized. We don't have centralized control over them, but they will do what's best for them. So we also have to make sure that we're incentive compatible for the leaders, for the miners. And in fact, that's another situation that's somewhat different in blockchain than in other situations. We also have to make sure that a coalition of a user and a leader also together, they do not need to strategize, because again, in the blockchain world, it's very easy for a leader to collude with some users without some kind of out of band, or maybe just invent new users, because I can also send my own transactions to myself.
00:16:57.250 - 00:17:36.270, Speaker A: Am I my leader? So we also need to be robust against collusion of a leader and several users. So this is going to be the type of goal that we have. We're not always going to get it completely, but this is the kind of thinking we have of what we want. So let's go to a mechanism that tries to solve that. And I'm going to present the famous 1559 protocol from Ethereum in two steps. First, a simplified version that is really nice, and then the real version. So the simplified version, just say, this is what's called a posted price.
00:17:36.270 - 00:18:11.418, Speaker A: For every block, there is going to be a price to get your transaction in the block rep. The price is going to be per gas, because theorem blocks are limited by their total gas size. But there's going to be a fixed price. And the fixed price is nothing that neither the leader of the block nor the users can affect. They just have to decide whether to accept it or not. The price is determined by previous block, by the history, and in some really interesting mechanism that makes sure that we find basically the correct price. Basically, if previous blocks were over demanded, the price goes up.
00:18:11.418 - 00:19:11.820, Speaker A: If they were under demanded, the price goes down. But once we get to the block, and this is our focus here, and that's an interesting mechanism, but as you can imagine, basically it works like most price adjustment mechanisms. If you see that the demand is greater than supply, you increase prices. Basically, that's it, right? But that's the history. Now that we're to the block that we're considering now, neither the leader has too much leeway, nor the users have leeway, if you say the right price enough, you will be included. Otherwise you will not, and the leader cannot do anything but accept transactions that are willing to pay the price that is set for him by the protocol. So now comes a really interesting, annoying, but important part of the mechanism, as that the price that is paid, this posted price, the price per gas that is paid, does not go to the leader itself.
00:19:11.820 - 00:20:07.802, Speaker A: It is completely burned. And this is something that you have to have if you want to have this type of incentive compatibility, because otherwise what would naturally happen is that a leader would collude with a user that's willing to pay less than the posted price, take the posted price and basically compensate him out of band. And this is something that's easy to actually do. So unless you actually burn the money, rather than giving it to the leader, you're really opening yourself to a lot of manipulations. So basically the designers of this system had to put in this kind of burning thing in place. So this burning, there are good things and bad things, and people have of course talked a lot about it. But what is clear, this has like, if you wish macro to economic implications in the sense that it changes the supply of money, it changes inflation.
00:20:07.802 - 00:21:08.162, Speaker A: And somehow we have this kind of different phenomena that we would probably want to control separately according to whatever we want, somewhat be affected by the situation, by the microeconomic, micro to economic considerations of what will go down in a block. And definitely this kind of coupling is not something that we really want. It's basically a constraint of the system. So that's basically the basic idea. And the important point is that if, and now I'm saying if something that is counterfactual, but if there is no really upper bound on the size of the block, then this is really incentive compatible for everyone. So no one has any reason to manipulate it, simply because as a leader, I'm going to take everything that's willing to pay the price, nothing better that I can do. And as a user, I'm going to bid basically the maximum price that I'm willing to pay.
00:21:08.162 - 00:22:12.562, Speaker A: Again, I'm only going to pay the fixed posted price and not more than that. So in general, if there was no actual limit on the size of the block, I would be fine. But notice that we still have here the average limit of the size of the block, according to which the prices change. Now, the actual mechanism also has this property, is that even though you aim for like 15 mega gas in a block, there is a hard cap of 30 mega on the block size. And the real question is what happens when, for some reason, even though the prices probably went up because we're increasing, because there was lots of demand at the current block, there is more demand than 30 mega for your block space. What am I as a leader going to do now? In general, this sort of shouldn't happen. The only time it can happen is where there is really a spike in demand.
00:22:12.562 - 00:23:32.266, Speaker A: So the prices that we had from previous blocks did not keep up with the current demand fast enough, but it could happen in these extreme cases. And the question is, what would the leader do? And basically what 1559 says in this case, I'm going to resort to the first price pay your bid kind of auction. And this is in sense of tips. So another ingredient in the protocols that's actually used in Ethereum is that in addition to this base fee, which is a big deal, and it's very incentive compatible, we have this smaller tip kind of thing that goes directly to the leader and which basically is used essentially to arbitrate between transactions in the unlikely situation that your block is completely full. So normally you would just put your bid, your tip to be the minimal amount that basically is worthwhile from the leader's point of view, a very small amount. But in cases of extreme congestion peaks, then you would actually use your tip, just like you would do if you wish in bitcoin, to actually play in a first price auction. And this would not be incentive compatible, but it would be pretty rare indeed.
00:23:32.266 - 00:24:30.670, Speaker A: If you look at the prices and the gas prices in Ethereum, this is like for a week, block by block, from, I don't know, a week or two ago when I was starting to prepare my slides, is the green thing is a base fee, and the yellow thing is a tip. So you can see that really, the tips are really a tiny amount of the payment, as you would expect. And most of the action is a green fee, which is incentive compatible, means you're safe bidding exactly what you're willing to bid. Okay, so now let me talk about, just to show you the design space. So we talked about like two mechanisms that are actually used just to show you the type of design space and other kind of considerations that come into account. I want to give you talk about a little bit, a theoretical proposal by Laviet al that tries to put in a few other elements into this mix. And basically this proposal says the following.
00:24:30.670 - 00:25:05.178, Speaker A: Let every person, every user, bid whatever he wants for his transaction. But now let the my leader, he can choose a uniform price for his block, just like in Ethereum. So there has to be one price per gas or per byte or per transaction. Doesn't matter for the block. But the point is that this one price is not determined by the protocol, by previous blocks, but is completely up to the leader to choose. So this is called a monopolist price. If I'm a monopolist in a market, I'm the only person selling, I don't know, tomatoes.
00:25:05.178 - 00:26:24.258, Speaker A: The way I choose the price of a tomato is not like the market equilibrium, but whatever will maximize my own utility, my own gain, and probably the price will be higher than what the free market would let it be. Which means that I would sell less tomatoes, just like classic econ 101. And the point is that we may want to do this in a blockchain for several reasons. One of them, it's not as bad mean being a monopolist for 10 seconds for this block, when someone else is going to be the monopolist for the second block as being the monopolist for tomatoes for a whole country forever. Right? So being a monopolist for 10 seconds has much less bad implications than being a monopolist for one block. The second thing is that there is some kind of worry that if you just let the prices be, if you wish equilibrium prices, and these equilibrium prices are either going to be because of any of the two previous mechanisms, will somehow reach, in a certain sense, market equilibrium prices, you may end up with very small fees. So in general, suppose we're in a situation where the technology has progressed so much more than the demand for blockchains.
00:26:24.258 - 00:27:09.362, Speaker A: So our blockchain now can do, I don't know, a million TPS. In this situation, the block limits have no bite, and the prices in any of the two previous mechanisms would go down to zero. The fees would go down to zero. And maybe that's a problem from the point of view of the security of your blockchain. So maybe you don't want to have fees so low, but really you do care about the revenue. Now, the revenue is really how much do the leaders make from transactions and not just from the block fees. Okay? So in this situation, this is one reason to choose this kind of mechanism that takes into account the revenue that allows the leader to get more fees, to basically to use a monopolist pricing.
00:27:09.362 - 00:28:17.958, Speaker A: And then the question is, how do you play with the parameter there? Do you really want to go to this level of more income to the leader? And what you pay for this is probably that you're going to actually give less throughput from the system, because if I take everything that I can, the prices will probably lower. So the fact that I'm allowed as a leader to increase prices is equivalent to allowed as a leader to decrease the block capacity, even though the technology can use much larger blocks. So one can analyze this in certain situations. In particular, the first thing that was analyzed by La Viet al and then by other people was that how does the incentives work? So quite obviously, the leader, his incentive is to choose a monopolist price, to choose the best price that he can in order to maximize his yield. But what about the users? And the point is that even though technically, this is not incentive compatible. I could be the exact user that changes the price in the whole block. This is very unlikely.
00:28:17.958 - 00:29:12.730, Speaker A: So one can show in certain formal senses it's almost incentive compatible. It's very unlikely that I'll be the one changing the price in the block. And if I not do that, then I really want to just say, what is the maximum that I'm willing to pay? So we're back into this simple kind of bidding that we desire. Now you can start continuing to analyze this kind of thing. So what happens if I'm thinking not just about this current block, but maybe I'm willing to wait for more blocks and there's a whole kind of analysis going on that I will spare you? So let me just say now how. So that was all pretty simple, but I hope that my point of view as algorithmic game theorist did give you something. But now let's see how, when we're going to the next level, why you really need to be start worrying and thinking about it more carefully, mathematically.
00:29:12.730 - 00:30:24.830, Speaker A: So the problem is, as we said, the main motivation of fees was basically to handle congestion and because there was some kind of limit on the block size. But what is the limit on the block size? Is it bytes? Is it gas? What does the gas mean? There may other be other, if you wish, resources that should be limited. And the point is, this really depends on the technology, right? So you really want to basically allow the least constraints that you have that you are sure that the system can still be decentralized and we can have computers can operate it in all the various kind of roles that you need to operate blockchain. So sometimes there are multiple different resources of that situation. So we don't have just one parameter for a block size, but we need to implement. But there are several different resources that we wish to basically control, and we can't have any, one of them being the only one that we look at. So here are like two examples, and we'll probably also, that's why we will need to pay separately for these type of resources.
00:30:24.830 - 00:31:50.094, Speaker A: So two examples. So perhaps the main example in the world of Ethereum is a question of storage. So if I create a new cell, that's something very expensive in Ethereum. But the point is, it shouldn't be limited at the length of a single block, because the total number of cells, the storage that we have in Ethereum is really important, but only in the long run, right? So a year from now, I don't want to make sure that I have trillions and trillions and bytes of gigabytes in ethereum, because no one can handle that. But in the current block, if someone decides he wants to create lots of different new cells, we don't really care. We only care about the total gas, the amount of effort, computation effort you have in the block. Indeed, at the beginning, one of the, when you could actually, in Ethereum, when you could actually create new cells and get money back for basically deallocating cells that you've used, there was a standard gaming practice that people will create new cells when the gas prices were high, and if you wish, sell them or release them, sorry, they would create them when the gas prices were low and release them and get money back when the gas prices were high, and in this way make a lot of money off the system and also really just add congestion and for no reason, not only for no reason, but for a bad reason even.
00:31:50.094 - 00:32:33.706, Speaker A: So, that was a problem. And the main reason for that was that storage prices were set in gas, and gas prices fluctuated as they should, because the current congestion is what should actually determine the price of gas at a given point of time. But the price of storage should not fluctuate so widely, but rather be something more constant. So that was one problem. And so now, basically, the way that ethereum fixed it, it just basically reduced by a lot the amount of money you get back for a storage cell, which is not a good solution. It was sort of a hack. An example in the case of l two s that work over some other l one is there is always going to be two different, very different type of resources.
00:32:33.706 - 00:33:29.982, Speaker A: One of them is the l two costs, whether it's sequencing or proving or congestion, anything that you do at the l two level. But then if some of your data is going to l one, that is going to be a different kind of cost, because that doesn't really depend on your congestion, it depends on l one congestion and l one gas costs. So it's going to be a different kind of. So it's going to be different kind of pricing is going to be needed for that. So once you really want to work, have better kind of pricing rules in this kind of multidimensional settings, you need to take both or all dimensions into account. And indeed, you can think of variants of the 1559 protocol, but also of the other protocols that actually do that. So there's a large design space of how to do that in the best way.
00:33:29.982 - 00:34:04.246, Speaker A: I just want to give, like the simplest type of thing that you can think of, which is basically, I think, good and this version goes like this. Suppose this is like an example. Suppose we have like three types of fees that we want to actually. Each one of them price separately because they're congested at different levels, different prices and so on. One of them is like l two compute fees. One of them is l one, data store fees, stuff that you actually need to pay to l one, and the other is storage fees. Each one of them can be set by the protocol for the block.
00:34:04.246 - 00:34:45.634, Speaker A: So it's still going to be a posted price. In my current block, I'm going to pay separately for each one of these different resources. And the way each one of these resources is priced by the protocol depends on its real use. So for example, the compute fees are going to be like a congestion like you'd currently do in Ethereum gas. The data fees are completely determined by the fees on l one. At the current point in time, the storage fees can be fixed and so on. And when you actually as a user, what you pay is we can still have the tips as in the previous one, but then you pay, you look at how much did you use of each one of the resources, and that's what you pay as a price for that resources.
00:34:45.634 - 00:35:09.200, Speaker A: And your total sum is a total kind of thing. So you can see from the point of view of the block, this is still a posted price. If I'm willing to pay these prices, everything is fine. If not, it's not. And okay, there's a huge design space from this point on, but let's leave it at that. And now you can start thinking about these questions. So thank you.
00:35:19.270 - 00:35:31.510, Speaker B: Thank you, noam. We may be able to take one question and then we will move to our next speaker. Apparently there is more than one question, so I'm going to start with Thomas.
00:35:37.530 - 00:36:04.622, Speaker C: Thank you for this so much. And question is about the storage size cost. If you want to introduce the governance model for that storage, how to avoid the problems of not being able to think long term with the governance, like political governance nowadays. Are there some models where we can somehow bind the decisions to the cost of hardware, to the number of nodes? Any ideas for the solution today?
00:36:04.756 - 00:36:43.858, Speaker A: Yeah, so I think that's an interesting question. So I think what you're referring to is if I really think about how do I want to price storage, which is not like a day to day congestion kind of thing. The first thing that you think of is governance. And you can basically do it in two different ways. You can either set a price and change it, I don't know, every year or every month or something not so good. Or you can design some kind of growth, the size that you want to grow, of your memory to grow and actually decide, I'm willing to have, I don't know, a billion new cells in the next year. And then according to how much you're doing, according to that goal, changes the prices.
00:36:43.858 - 00:37:21.580, Speaker A: It fluctuates the prices up or down. That may be a little more stable, but it has other problems also, you can actually try to have in the level of governance, you could have a general rule, let's see, what is the price that it's really going to cost? Me now, me is now all the different people who need to store the data, which is somewhat a tricky concept. You need to figure out how many of these in a decentralized system, how many of these operators you're going to have, and then try to index it to, I don't know, the price of Ram or the price of disk or something like that. All of these are excellent questions. I don't have a good answer to you. I'm just saying that indeed these are good questions.
00:37:24.830 - 00:37:36.590, Speaker D: So how is the La V model different than what happens today with validators that can basically say, well, I'm not accepting any transactions below this fee, this tip.
00:37:36.930 - 00:37:38.686, Speaker A: Sorry, I didn't get the question.
00:37:38.788 - 00:38:00.630, Speaker D: The La V model, where the sequencer, sorry, the leader, sets up a minimal price per block, how is that different from what happens today at Ethereum, where basically the validator can set up a minimum tip, and we know that don't accept anything. By default, it's zero. But it could be set up to any level by any individual party.
00:38:01.370 - 00:38:41.780, Speaker A: You're right. So I think part of it, you're right. But if all the validators together decided on tips going up and so on, that's one thing, right? But the point is that currently, if only me as a validator set a different kind of tip, I'm basically going to be ignored, right? Because the next guy is just going to play the usual price. Okay, so I think you're right that somehow, with a certain amount of collusion between validators, they could sort of bring you to the other situation, but it's not. And by the way, I didn't finish the analysis of this kind of monopolist pricing. I think after you look at it more carefully, after a longer amount of time, it sort of doesn't work. I believe.
00:38:45.030 - 00:39:01.814, Speaker B: Hi. The fees percolate from the miners that put them on the chain to the second layer, et cetera. But the miners that actually make the decision of taking the transactions. Why would they consider what is paid for other players?
00:39:01.942 - 00:39:30.434, Speaker A: Yeah, you're right. This is why probably. I think what you're asking is the miner decides on the fees if you wish. And then someone else is going to need to pay for it. Let's say the proverb puts it on the chain and he will need to put. So it just means in the simplest way, the way I presented it, it just means that the price you pay for l one fees is not going to be something that the miner gets to choose. Right.
00:39:30.434 - 00:39:43.670, Speaker A: It's going to be decided by the protocol, maybe according to expectation of future gas prices. And it's something that's going to be counted in your transaction. And it's something that is going to be set by the protocol, not chosen by the leader.
00:39:44.490 - 00:39:46.040, Speaker B: This is the last question.
00:39:48.570 - 00:40:03.280, Speaker A: On the topic of layer one. Da costs. Have you done any work around futurist markets? Work is probably extreme dream word, but definitely we've thought about that.
00:40:05.090 - 00:40:05.742, Speaker D: Please.
00:40:05.876 - 00:40:07.498, Speaker B: Thank you so much noam.
00:40:07.674 - 00:40:08.126, Speaker A: Thank you.
00:40:08.148 - 00:40:11.450, Speaker B: Give a round of applause for amazing presentation.
