00:00:00.890 - 00:00:30.758, Speaker A: And you can ask questions to us, okay? So don't hesitate. Do use the fact that we are here. It's great to have support, so be sure to ask questions. All right? Okay, so now let's talk a bit about the developer experience on Starknet. First of all, the thing you should know is that when you write smart contract for Starknet, the native smart contract language for Starknet is Cairo. It's not solid. Okay.
00:00:30.758 - 00:01:14.034, Speaker A: This is due to the fact that the architecture of Starknet makes you able to execute code that you can generate proof from. This is based on mathematics, and so technically the instructions you're writing to your computer do not combine to boolean logic, but to arithmetic, arithmetic equation. So you can't use just any programming language. We have to create one from scratch to get the most out of this possibility, for a bunch of interesting reasons. But I won't go into right now, but if you're interested, please ask more questions. And by the way, there's enough of us that you can ask questions anytime soon. If you have any questions, don't wait for the end.
00:01:14.034 - 00:01:35.306, Speaker A: Raise your hand and I'll be more than happy to answer it. Okay, so how difficult is it to write smart contracts in Cairo? It's not that easy. But it's not that easy, not because of Cairo. It is a bit difficult because writing smart contracts in general is complicated. Right. Two years experience writing smart contracts. Okay, cool.
00:01:35.306 - 00:02:18.722, Speaker A: So I think you're more or less aware of what I mean, right? Programming with smart contracts is different than writing your class code at home. Now, once you're familiar with that environment and that setup and this way of thinking, writing code in solidity or in Cairo is just a matter of syntax. You use a different keyword or something, but it's sort of the same thing, right? Cairo is a bit lower level than solidity. So you'll have, for example, for some expression to use various lines to do one action that you would do in one line in solidity. But it's easy to understand. And I want to mention that Cairo is still a very new language, and so it's very close to the metal, let's say. Well, in our case it's not metal, it's equation.
00:02:18.722 - 00:02:51.922, Speaker A: But so let's say it's close to the equation. And so it's a bit rough around the edges. It will only get better from here. So we are working to make it easier to use. And for sure in the next few months, you'll see, once you start writing Cairo, you'll figure that there will be a new stuff. So here is the link to the first tutorial to get familiar with the syntax of Cairo. If you've not completed it now, how about standard implementation, right? You want to build an app on solidity, you need an ERC 20.
00:02:51.922 - 00:03:53.062, Speaker A: What do you do? Open zeppelin, right? I mean, you're not going to rewrite your ERC 20 from scratch. Well, on startnet it's the same. Basically open Zeppelin is currently writing some standard implementation for Cairo and Starknet. And so you can just take the code and deploy it. And that's the goal of this tutorial here, is to give you a vision of how you take some code that exists, that is audited and that is being built and deployed. Anyone familiar with what this is? So it's a festival in the desert where you get a bunch of people spend a week and do a lot of crazy things and they get in the desert and when they get there, there's a bunch of infrastructure there already. Some people have spent a month more or less putting a sign for the road, putting up the toilet, bringing water, this kind of stuff.
00:03:53.062 - 00:04:31.426, Speaker A: Okay? And this is the phase we are in, in starknet, we are still putting up the infrastructure. My point here is that these Cairo standards for ESC 20, ESC 721, they are still very much evolving. We are still in the alpha phase. So if you use them in your project, in your project, keep in mind that you will need to pull from the repo and update them regularly. Okay? So make sure to keep this in mind. These things will evolve because we ship a lot of new functionalities. To give you an example, we've added events to our smart contracts about three weeks ago.
00:04:31.426 - 00:05:05.370, Speaker A: And so if you deploy before that in year C 20, then you have to redeploy it to be able to use event. Right. Makes sense. Okay, so now about importing functions. The importing pattern in Cairo is a bit different than it is in solidity. In solidity you can take a contract and just inerate from another and then automatically you get everything that is in that contract. It doesn't work exactly that way in Cairo and you'll get to see it in the tutorial.
00:05:05.370 - 00:05:43.114, Speaker A: Basically you import functions by functions. Right? Now the way importing works is in your smart contract you can import any kind of function. So if you import just a bunch of functions and some of them are external that are public, that anyone can call, they will be for your contract. But it's sort of a security vulnerability. Right. So my point is that it works a bit differently than in solidity and right now it's also an emerging pattern and an emerging standard. And there's a bunch of discussion in the community around that.
00:05:43.114 - 00:06:37.242, Speaker A: So do engage in them if you want to learn. Best practice with regards to importing functions. Okay, so in general, in Cairo we will get two kinds of contracts based contracts that implement just internal functions and what we call front end contracts, which will implement public functions that people can call and view function where people can retrieve data. I have to say the tutorial is not perfect and doesn't follow perfectly this pattern, but you will figure it out. Why? It's not that easy to follow, but it's a good objective to tend to. Okay, and I will say this also, the tutorial is designed to maximize your learning experience. It's not optimized for execution or for code cleanliness yet.
00:06:37.242 - 00:07:02.180, Speaker A: Right. It's a trade off. We need to find between making the code easy to understand for newcomer and making the code very optimized. Okay. Okay. Another important thing is account abstractions on Stacknet. So this is hard to wrap your head around in the beginning, but once you get it, then it all makes sense.
00:07:02.180 - 00:07:41.742, Speaker A: There is no such thing as an EOA on Starknet. You can't hold funds with a private key. Every account that holds funds on Starknet is a smart contract. Who here is familiar with the way Arjon wallet works? So it's a smart contract wallet basically. Okay, so you deploy a smart contract that will verify some kind of signature, and then you need to send the transaction to that smart contract which will verify the signature you passed as a parameter and then execute actions on your behalf. And it's the smart contract that holds the fund. Well, Starknet works basically the same way.
00:07:41.742 - 00:08:18.026, Speaker A: You send a transaction to a wallet smart contract that will verify some kind of signature, and then this wallet holds the fund and does all the action doing that is this means that in order to send the first transaction to the account, you don't need to pay gas, you don't need to have funds associated with the private keys. Right. So it works a bit differently. It works a bit differently than Ethereum. It's something that has been long sought after in Ethereum and works better. Yes, you can hear me. Good.
00:08:18.026 - 00:09:02.426, Speaker A: Okay, so it's fairly different than from Ethereum, but once you wrap your head around that, it's fine. Okay, so you should just assume that every party calling your contract is in our smart contract. Yes, sure. So basically when you send the transaction to Ethereum, you have to pay for gas for the transaction to be interpreted, right and so this is done with a combination of public keys and private keys. In starknet when you broadcast a transaction you need to broadcast it to a specific contract. That is an account contract. And for that part you don't pay.
00:09:02.426 - 00:09:33.662, Speaker A: You don't pay for your transaction to be received and interpreted by your account contract to see if you have gas to pay in the account contract. That makes sense. It's a bit weird. You know what, let's start the tutorial and then we can talk with more. If you guys are more interested in the way we implemented the contact abstraction. It's a fantastic topic. I do engage you to come and ask questions and we have Matt here from Arjun who is implementing Arjun xx which is a wallet for Starknet.
00:09:33.662 - 00:10:08.158, Speaker A: So if you have questions regarding that, please ask him also. He'd be more than happy to help you. But yeah, basically. So there is a notion of private key to authenticify yourself in front of the account contract. But this private and public key has nothing to do with the Starknet Os. So the starknet Os is just verify that the transaction was enough gas to pay for the fees and then do it. One thing I want to mention is that I'm talking as if this is in production and this is not in production like yet.
00:10:08.158 - 00:10:40.962, Speaker A: Fees are not implemented yet. So don't worry about fees for now. It will come later on. And when you're doing your transaction you'll see it's very easy to forget that you need to pay this. It's nice. Okay, so integrated development environment, you have three main tools you can use to deploy and manage your smart contract deployment. On darknet you have CLI that you can install, that is from us and you can do a lot of things with it, but it's very raw.
00:10:40.962 - 00:11:09.890, Speaker A: Right. Then you have two projects that will let you manage your deployments, your smart contract, and have a bunch of testing and stuff like that. I mean Stacknet Cli also has testing, but they've implemented it. More of it's made really for building that. Okay. The tutorial for today is based on Nile which is based on Python. And it is being developed by one of the developers of open Zeppelin.
00:11:09.890 - 00:11:32.698, Speaker A: Not here anyway. So all three are in development. All three are still rough around the edges, there are some bugs. But yeah, Startmith is not for the faint of the art. But I mean it's Thursday morning, it's 09:00 a.m. So there's no point of the art here anyway. Okay, cool.
00:11:32.698 - 00:12:07.560, Speaker A: So really the objective for me here is to give you the tools to get started with your project and to help clear quickly the little bugs you may encounter. Okay, so I'm not going to cover that part because it's a presentation by brick who are not here today. Okay, so how do we get started? First, are there questions? Up until now? Yes. What's the wifi? Good question. Andromeda, like the galaxy. What is the password? Okay. And the network is called.
00:12:07.560 - 00:12:28.442, Speaker A: Okay. East Denver messaged Dow and the password is androvida. Okay, so let's finish those slides on getting started, and then if you're comfortable here, stay here. If you want to stay at the. Be there at the table. Be at the table. We are here.
00:12:28.442 - 00:12:51.794, Speaker A: Don't hesitate. Raise your hand, ask questions. Do make the most of us coming here. We flew halfway across the world and there's an eight hour difference with our families. So make it worth it. Ask questions. I also do want to mention that we don't advertise a grant program, but we do have one.
00:12:51.794 - 00:13:32.750, Speaker A: And if you are interested in building stuff on Starknet, or if you're just interested in just messing around with Starknet, trying it out, giving it a spin to try to do stuff, reach out, we'll be more than happy to help you get a hold of it and explore what you can do with it. Okay. And yeah, one final note for this workshop, we're studying concepts that are very familiar to most of you who written solidity. Right. You can do a lot more stuff with Cairo than just tokens, so keep that in mind. It really is a toolbox where you'll be able to build crazy stuff. So do explore.
00:13:32.750 - 00:14:28.580, Speaker A: Nice. I like that you put QR codes, it's much easier. So I presented it during the previous workshop, but basically the goal of this workshop is for you to follow a tutorial where you will have to deploy code. And I have deployed another smart contract on startnet that will be able to correct your work and verify that you implemented the functions I expect correctly. Okay, so if you go to the tutorial here, there's a bunch of instructions and introduction. I think it's worth reading. And if you find some of these instructions unclear, please don't hesitate and make a pull request to make it better.
00:14:28.580 - 00:15:20.370, Speaker A: Okay, so the way it works is the following. There is here in the points list a high level description of what I'm expecting from you. Okay, so today you're going to deploy an ERC 721 token to track the life and death of animals. So you'll have to mint tokens that correspond to animals that have a set of attributes, and you'll have to use the mint function and the burn function to kill them on condition or make them live on condition. Okay, so the first part is just making sure you're able to deploy an ert 721 token. The second one is for you to get a bunch of random attributes that you'll need to give your animal so that I'm able to see that you are able to manipulate attributes. Okay.
00:15:20.370 - 00:16:06.486, Speaker A: So there's a high level description of what I'm expecting from you, and then you should go to that contract, which is the evaluator. So the way the evaluator works is that it's a smart contract. Well, it's kind of like a teacher. You have workshop, you will submit your workshop, and then the teacher will correct it. So once you've deployed a smart contract and you think it fits bill, it will complete the exercise. You need to call this function called submit exercise. When you're calling submit exercise, the smart contract will record what is your smart contract, and then you can call other functions, such as, for example, this one, which is up here to test your ERC 721.
00:16:06.486 - 00:17:00.630, Speaker A: And this will just go and look for your smart contract, call it and verify if it works. Yes, sure. All right, so that's the basic difference. So let's take a look at the first example. Okay, so that's the first function. What am I expecting from you? Okay, here, basically the contract will look who is calling, and then you will retrieve the address of the exercise you've submitted using submit exercise. Then it will look at its own address, and it will call the function owner of year 721 with the token id one and verify that he is the owner of token one.
00:17:00.630 - 00:17:40.680, Speaker A: So in other words, you need to deploy an ERC 721 and distribute token number one to the evaluator. The goal with that is for me to verify that you are able to deploy an ERC 721 and to call the main function correctly, to attribute the token to a specific address and so on. You'll just read and figure it out. And yeah, going through the tutorial will give you a good vision of it. Yes, I'm sorry, can you talk louder? I. Touching, yeah. Okay.
00:17:40.680 - 00:18:36.230, Speaker A: Does that work? Cool. Okay, now the other question you may have is, okay, how the hell do I deploy an ERC 721? There's a bunch of tooling here and code that you can reuse. So if you look in the contract section here for the tutorial, I use an ERC 20 and I use an ERC 721. So you can get inspired by that. So for example, here in my contract architecture, you can see there's the evaluator and then there's the folder token and the folder ERC 721. Here you have a bunch of contracts that you can call and deploy. The one a bit further down the line in the workshop you will see that I have deployed a smart contract, an ESC 721 that you can claim tokens from.
00:18:36.230 - 00:19:21.260, Speaker A: And so you can see how I implemented it, right? And so you can see the way I deployed it. So you see I have imported a bunch of function from est 721 base. So that's the base contract. The one with the internal functions I've imported also functions from the metadata implementation. Because I wanted to be able to manipulate metadata, I made it ownable, right? So then it imported all the variables and the functions used to make it ownable. And then there's my constructor, I call the initializers. And then here are the view function that I needed for my contract, right? So the view and the external function are hold in that file.
00:19:21.260 - 00:20:00.590, Speaker A: So once I've been able to pick and choose all the functions I needed to implement here at 721, I can deploy. So the first thing I want to mention is this is one implementation, it's a customized ERC 721. Maybe that's not what you need, right? So what you really need is this one. This one, ERC 721 Cairo. Take a look here, figure out how to call mint and burn. And that's basically the whole gist of this workshop, right? Figure out how to use this and build additional function to mint and burn tokens. Does that make sense? Is that interesting? Okay, cool.
00:20:00.590 - 00:20:30.664, Speaker A: And so once you've done that, then you want to deploy it. I need to add more documentation to that, but I've added here a file called deploy. So one of the things that Nile is currently developing but is not live yet is the ability to write deploying scripts. Okay? So right now you can't do that. You need to call them with the CLI. Okay, so here I have a file called deploying TXT. It's basically the routine I use.
00:20:30.664 - 00:21:07.876, Speaker A: It's not bash because it's just copy paste, but it's basically the routine I use to deploy the TD. So you can see that in order to deploy a contract, you just need to call Nile deploy the name of your contract, right? So if you want to deploy here, the one I wrote is TDA metadata. And then you pass the parameters. Something important with the parameters is that they need to be in decimal. Right. So if you want to pass, for example, an owner address, which is an exadcimal address, make sure to convert it first to decimal. Okay.
00:21:07.876 - 00:21:45.776, Speaker A: And then you specify the network here and that should work. Okay. So basically take a look at these resources and then try to tweak a few things and see how far it can go. Okay, does anyone have questions yet which QR code to access the repo? Apparently it's not the good one, but this is the address of the repo. Cool. So what we can do is, yeah, let's settle and then we'll go through the ranks and see if you have questions. Don't wait too long before asking questions.
00:21:45.776 - 00:22:19.468, Speaker A: That's what we're here for and we're more than happy to see to answer, by the way. Also I want to mention, you guys are kind of like guinea pigs to us. We are developing a new product that is cutting hedge and cutting. Right. And it's going to be a bit more difficult than what you're used to and your feedback is invaluable to us. So don't feel bad if something doesn't work or if you don't understand something. It's perfectly normal and it's just an input for us to make it better and easier for you to use in the future.
00:22:19.468 - 00:23:01.448, Speaker A: Okay. All right, let's go. Oh, and we have t shirts, so make sure to pick one before going on. All right, let's go. So I have to say that the reasoning about the tutorial and getting started is a bit convoluted. Once you've done the first few questions, like the first question, you'll have done 80% of the work. Not in the sense of getting started.
00:23:01.448 - 00:24:03.950, Speaker A: Then the rest will come naturally. Okay, so what do I want to do? I want to validate the first question. What is the first question? What does it do exactly? I want to be able to call that function here that is called test ERC 721. This question, what will the contract do? In this question, it will verify that the evaluator owns token one on the contract you have submitted. And then you need to verify that the functions to transfer us 721 work on your function. So here what it is doing is basically reading your exercise address, reading his own address, retrieving the owner of token one on your contract address, and verifying that he is the owner of token one. Okay, what does it do? Then it verifies that the balance of function is implemented and that it returns the correct value.
00:24:03.950 - 00:24:44.416, Speaker A: And then it verifies that and then it will transfer the, this is, okay, that's right. And then it will transfer the ERC 721. It will transfer token one to your address. Okay. It will transfer it back to you and then it will verify that the balances have been updated correctly. Yada, yada, yada. So basically it verified your ERC 721 is implemented correctly.
00:24:44.416 - 00:25:12.516, Speaker A: Okay. So what you need to do in that specific case is the following. All right, so I'm here, I want to deploy an ERC 721. What's the best way to go? The easiest way to go is to take one of these implementation, right. And you just copy paste it and you create a new file. That's what I'm going to do. So now this code, I know it deploys in ERC 721.
00:25:12.516 - 00:25:35.160, Speaker A: And then I'm going to customize it to fit my need. So I'm going to call that way. All right, so I know this works. Now I'm going to do two things. First, I'm going to open it and see what is inside. And then I'm going to try to deploy it, right? Because I mean, it's an important part of the process. So in order to deploy it, I need to find a constructor because I need to know how many parameters are there.
00:25:35.160 - 00:26:33.050, Speaker A: Okay. So it takes free felts as arguments for the constructor. So I'm first going to make sure I'm able to deploy it and then I'm going to make a nice version of it. All right, let me open my terminal, set up my vm. Okay, I'm going to compile my contract because if I try to deploy it right now, it has not been compiled so it won't appear. So I do Nile compile and I wait for a bit to see that everything compiles correctly. Okay, so once this is done, I want to deploy my contract.
00:26:33.050 - 00:27:06.550, Speaker A: How do I do? Well, I can take a look in the repo here. There's a bunch of commands I can use. Okay, so what is he doing? Okay, Nile deploy, then name of the contract and then the set of arguments and finally the network. So you know what, let's copy this. What's the name of my contract? It's ERC 721. Animals. Okay, let's put that, okay, so this will try to deploy my contract.
00:27:06.550 - 00:27:24.960, Speaker A: And now I need to put the arguments. So there are way too many arguments here. So I'm going to just give it two fake arguments here, one sorry, two free. Okay, so the command is formatted correctly. This should work. Let's try it. And then I'll make the code that way.
00:27:24.960 - 00:27:55.190, Speaker A: Does this work? I hope it will work. No, but it should. All right, so it looks like the transaction was sent and the contract was deployed. Good. So now I know that I have a file that I'm able to compile and deploy. Now let's make it relevant to what I want to do. Right, so what is happening here exactly? This was customized.
00:27:55.190 - 00:28:22.354, Speaker A: It's in the deploy folder at the root of the repo. Yeah, you get it? Okay, so here it looks like the constructor. So I don't know who deployed that contract, but it looks like it is basically doing what I want to do. Right. So it's minting token id one and sending it to that contract. Right. So I could do that.
00:28:22.354 - 00:29:01.722, Speaker A: Maybe if I just take the address of the evaluator and put it here, it will credit the proper token. So this could work. So, yeah, you know what? Let's try to do that. So what is the address of my, what is the address of the evaluator? You know what I mean? I don't really like values like that put directly here. Let's try and make something a bit more elegant. I'm going to pass this as an argument to the constructor. Okay, so I'm going to say this is the name, this is a symbol.
00:29:01.722 - 00:29:30.200, Speaker A: The owner, I'm going to give my address and then I'm going to add something like simple here, I'm going to say two. And instead of putting this here. Right, okay, so this will be the evaluator address. Now I need to put four arguments. When I'm deploying, don't hesitate and tell me if this is not clear. Okay. All right, so now actually I'm going to compile again.
00:29:30.200 - 00:30:36.788, Speaker A: And now I need to figure out how to put the proper argument. Okay, so I need the name and I need the symbol. So I'm going to use the file that has been sent by Luca. Let me pull here. Here you have two files, x to int, string to int. So how does it work exactly? I know Lucas pulled something. Okay, so strings to Ints.
00:30:36.788 - 00:31:00.256, Speaker A: I can put a string here. Okay, so let me try to do. That's. All right. So I put a value and it converted. So what name do I want to give to my contract? I'm going to call it Henry. And then I want a symbol.
00:31:00.256 - 00:31:11.150, Speaker A: H-A-N-R. Right. That's what I need. So I get two values here. So these will be the first arguments of my constructor. Right. The name and the symbol go back there.
00:31:11.150 - 00:31:43.190, Speaker A: This is the command I initially. So, name, symbol, what do I have to do next in the constructor? Oh, yes, the owner. I need to put my address. So which address will I work with? I'm going to go here to Arjun X. I'm going to use an account I haven't used yet. I think this one's fine. And I'm going to take my address.
00:31:43.190 - 00:32:03.704, Speaker A: All right, so my address, I need to convert it from x to int. So I'm going to do the same thing here. Python x to int, my address. Okay, so this is my address back. I'm going to put it back here. So this is my address. So I will be the owner.
00:32:03.704 - 00:32:37.726, Speaker A: And now I also need to convert the evaluator's address to decimal. Right? I'm sorry, I got dropped again. Yeah. Okay, so what's the evaluator address? Oh, it's here. Copy it. Looks like the Internet is not great. I'm going to do this.
00:32:37.726 - 00:33:16.442, Speaker A: Okay, so Python, right? That's the address and decimal of the evaluator. Okay, so now I have all the arguments I need to deploy my contract and this should work. Okay, so I'm going to deploy it and then we'll see what happens. So, deploying. Let's see what happens. So with the code I've written here, the contract should deploy near c 721, give token one to the evaluator and then I should be able to get my points. So this didn't work.
00:33:16.442 - 00:34:13.444, Speaker A: Let's see what happened. So what is the error? Disdain me cannot connect to ost shitty Internet connection. It. Yeah, I can see some of you already figured out that the connection is not good. It. Yeah, I'm sorry, I just think that it's a bit bad that the Internet connection is bad. Let's do that.
00:34:13.444 - 00:34:23.192, Speaker A: You're right. Yeah. Actually, if you can give me a shout out, that would be wonderful. Please. Actually, look, Internet is back. It looked like it's back. Okay, so let's leave that here.
00:34:23.192 - 00:34:44.480, Speaker A: We'll monitor what happened. Okay, so now I'm going to try to deploy my contract again. Let's see. All right, so my contract has been sent. It should be deployed anytime soon now. So this is my address. This is the ash of the transaction.
00:34:44.480 - 00:35:08.890, Speaker A: Okay, so let's see. I'm going first, go check on Voyager that. Okay, actually, I'm going to do two things. I'm going to check my contract and then I'm going to check the evaluator. The evaluator is here. My contract is here. So once deployed, my contract should appear soon.
00:35:08.890 - 00:35:30.784, Speaker A: Doesn't look like it's deployed yet. So I'm going to check the transaction, see if everything went through correctly. Right. Transaction hash is here. Okay, so my deployed transaction has been received. It should be updated soon and the contract will be deployed then. All right.
00:35:30.784 - 00:36:01.444, Speaker A: So, yeah, um, I I know you can pass them in exadecimal. I'm not sure if they're interpreted correctly. So, I mean, I do it in decimal because I want to be sure that they're interpreted correctly. But yeah, I think more generally what you're seeing here is that our tooling is still nascent. Right. It's very rough around the edges. So starknet is definitely like the wild west.
00:36:01.444 - 00:36:15.292, Speaker A: A lot of opportunities, but you're going to get your hands dirty. It's fun. Also, if you like to hack. Honestly, there's a lot of things to do. Okay, so the transaction has been accepted. This means my contract was deployed successfully. All right.
00:36:15.292 - 00:36:49.560, Speaker A: So now my contract has been deployed, let's try to correct it. Right. So I want the evaluator to know of my contract and to correct it. So I have two things I need to do, right. Because if I look at the evaluator code, what does it do exactly? It will first read the value of the address of my contract here. Right. So this means I need to first tell him which contract I'm working to know.
00:36:49.560 - 00:37:21.472, Speaker A: So the function you need to use for that is submit exercise. Okay, so the first thing I'm going to do here, what does this function do? It will retrieve your address. Then it will verify if somebody already gave that exercise as a solution. I don't want you to copy paste, but, I mean, I don't want you to use somebody else deployment to validate the exercise. Of course. And then it's going to record the address you provided as your solution. It's basically ending out your homework.
00:37:21.472 - 00:37:44.036, Speaker A: Okay. And then it will check if you already validated the exercise, if you already ever submitted a contract. If you did not, it means you've done something. Congratulations. You were able to deploy a contract. You get points. So in that case, it will basically give you validate the exercise.
00:37:44.036 - 00:38:11.076, Speaker A: So record that you've done it once so that you can't validate it the second time. And then we're generous, you get two points because you set up your environment and two points because you deploy the contract. Nice. Okay. So yeah, actually, let's check that. So I'm going to go here, I'm going to write contract because I want to call a function of the evaluator and I want to call submit exercise. I'm actually going to verify that I got the points.
00:38:11.076 - 00:39:02.750, Speaker A: So I'm going to go to the ERC 20 that gives points also to verify it in real time. See where is the, it's here points counter. So let's check my address, read contract. What is my balance of points? I should have zero points. Okay, I have zero points. So now I'm going to submit my exercise and see if I can get some points. So this is my exercise, right? Right, is it? And now I'm going to go to the evaluator and say, hey, check my exercise.
00:39:02.750 - 00:39:37.320, Speaker A: So here's something important. Make sure you connect it to azure x. If you're not, the transaction will be sent directly to the smart contract and MSG sender will be zero, so you won't get points. So it's not interesting. So I'm signing the transaction, it has been sent and now I can wait for it to be accepted on l two. And once it has been validated I should get my four points. Then once this has been done, I can go and verify that my exercise is good.
00:39:37.320 - 00:39:58.414, Speaker A: I really hope it is. I am a bit worried about wineline. So while the transaction is moving, I'm going to check. So basically I'm not sure what this is doing exactly. It looks like it is checking that. All right. No.
00:39:58.414 - 00:40:26.838, Speaker A: Okay, so what this is doing here is that it is comparing the initial balance of the evaluator with zero. So it's verifying that when you ask the smart contract how many token it has, it's not zero. So this will return either zero or one. If they're equal, it will return one. If they're not equal, it will return zero. We want the balance to be non zero, so we click zero. So we have an assert here.
00:40:26.838 - 00:41:06.180, Speaker A: Assert is basically the same as require and solidity, right? So we require them to be different. That's one of the things that is a bit painful in Cairo, right? You could basically have something invalidity. You would have one line which would be require evaluator init balance to be different to zero. Here you have three lines, want to instantiate zero, want to compare them and want to assert that the result of the comparison is zero. Right. This will get better in time. We want to make it of course easier to use, but for now it's a few extra line, but it's sort of explicit, I guess.
00:41:06.180 - 00:41:29.322, Speaker A: Okay, so let's go back to my transaction. It was accepted, so I was able to submit my exercise. Very cool. Let's see how many points I have now. I should have four points now. I'm sorry. So submit exercise gives you points the first time you call it.
00:41:29.322 - 00:42:21.966, Speaker A: Because when I was in high school, I heard somebody say, at some point, like, you can't give a zero to a student, you give him at least two points for the price of ink and paper, right? And this is the equivalent to that. You put in some work, you try to do something, you get points. Also, the objective with this tutorial is like, the next two points are never that far. I know a lot of people have finished it. I'm sure you guys have it too. Anyway, so, okay, I've sent my function now let's correct the exercise, right? So test year 721, let's try. Okay, so here, I don't need to pass any kind of argument because it knows what is my solution because I sent it in the past.
00:42:21.966 - 00:42:54.680, Speaker A: Let's open the transaction hash and hope I don't fail miserably at my own exercise. But it should be okay. All right, so we're going to wait a bit. So this is something new before that wire will always just show you, I don't know about this transaction now. It shows you that it has been received, it will show you when it will be pending, and if it's rejected, it will tell you that it is rejected. It won't give you much details. I kind of hope we get a rejected transaction at some point so that I can show you how to get more information.
00:42:54.680 - 00:43:53.222, Speaker A: But we'll do that in a second. Okay, so while we do that, let's take a look at the next exercise. Okay, so this first exercise, do you want us to look at the code that is below here, or do you want us to look at the next exercise? Let's take a look at the code. Actually, it's quite easy. And it so there's a lot of token, right? But here what we're doing is basically the evaluator will transfer his token number one back to the sender, right? So here you're saying it's calling function transfer form. In contrast to solidity, if you want to call an ERC 721 from another contract, in solidity, you import the ERC 721 contract, right? And you're able to communicate with it like that. It doesn't work in Cairo, because if you import the contract, then you become the contract.
00:43:53.222 - 00:44:33.986, Speaker A: So you have to import the interface that allows you to communicate with the contract. Right? Basically here, this ERC 721 is basically an interface that tells me, okay, so this function should work and it can do this and that. So I need to specify what is the contract address I want to call. Okay, so who is the ERC 721 I want to call and then the parameters. So this is me who is sending to who I'm sending and which token I'm sending. And then it will check the balance after, right, so I'm just calling balance off a bunch of time, right. I'm checking my balance here and the sender balance, your balance.
00:44:33.986 - 00:45:01.020, Speaker A: And then I'm checking who owns token one. Then I'm checking that token one is owned by sender address. And then I do a bunch of comparison which are basically the same as before. I'll let you take a look. And if everything passes, then I credit points, yes. Look, my exercise worked. Did I get points? Nice.
00:45:01.020 - 00:45:28.920, Speaker A: I got two points. Okay, so here's something cool also. See here, this is year C 20 of the contract, right? So I can do two cool stuff here. I can add the token in Arjun and it will show my balance. Here I get six points. So this is nice, but it doesn't refresh that much. So if you want to check your balance, I think it's easier for Voyager, but I know the argentine team is working on that to make it more smooth.
00:45:28.920 - 00:45:49.330, Speaker A: Okay, so I've made question one. Let's move on to question two. What is expected of me? So get animal rank. What is it exactly? Okay, get animal rank. Do I need to pass any kind of parameter? No. Okay, so it's calling an internal function. What is it doing? It's here.
00:45:49.330 - 00:46:38.030, Speaker A: Okay, no parameter actually, yes, there is a parameter. So you're sending an address. So this is called with my address. So what it is doing is basically, okay, so it's reading from a variable that is called next rank. And then it's using this to map this next rank to my address. Okay, so this is some kind of counter, right? And anyone that participates get assigned a rank when you call this function and then the rank is incremented, right? New next rank is plus one and then we check if we reach the max rank available. Okay, so the rational fear is that for this exercise, at some point I'm going to want you to customize something.
00:46:38.030 - 00:47:37.180, Speaker A: So in the smart contract, in the evaluator, there is a bunch of random values that are set up in the smart contract. And I want you to show me that you're able to do custom things on your contract by getting assigned some of these values and using them in your smart contract. Okay, so this function will just basically assign you a rank. So actually I don't need to do much, I just need to call this function. All right, so it's not this one, is it this one, this one, it's here, get an ML rank. Okay, so give me a rank, easy to font, right? Okay, now I have test declare animal. What is, that's declare animal.
00:47:37.180 - 00:48:49.400, Speaker A: Okay, what does it do? So it retries my address and I need to give it a token id. Okay, and then what does it do? Okay, so depending on my address, it will retrieve from the storage a bunch of attributes that I've decided before. Right, so I'm going to get a sex, a number of legs and a number of wings. Okay, then what does it do? Okay, it retries my contract and then it verifies that the token id I've sent to the evaluator. Okay, so I need to create a specific token and send it to the evaluator. And then what does it do? Okay, so it's calling my contract with this interface. Okay, so this is calling my contract with this function and the id, and it's supposed to get back three values and then it compares these values with the expected ones.
00:48:49.400 - 00:49:37.528, Speaker A: Okay, I understand. So now I have three values attributed to me, sex, wing, leg, and my contract has to implement a function that will attribute to a token these values, and I need to submit a token with these specific values that are expected by the evaluator. Okay, understood. So here I need to do three things. I need to implement this function and then I need to make sure that for a specific token it will send back these values. Does that make sense up until now? Sort of. Okay, you know what, I'm just going to add a function here, actually in order to do that.
00:49:37.528 - 00:50:36.364, Speaker A: Okay, so we have 15 minutes. I'm not going to take time to do that because otherwise I'm going to overlap on the next presentation and I don't want to do that. So what I would do here is the following. I need to create in my ER 721 some kind of internal storage, right? So that for each token I have an associated sex, number of wing, number of legs, right? So I can use a storage variable, and then I just need to implement a function that when I call it with the id of a token, it sends me back the attribute, right. Then I will need to have some kind of mechanism to assign these values, right? So I can either do it with the constructor like I did, or I can create some kind of function to create an animal with specific attributes. It's really up to you. You can start with easy functions, and then as you go along the tutorial, it will require you to do a bit more stuff.
00:50:36.364 - 00:51:25.596, Speaker A: You have a function that allows you to claim token and things like that. Okay, so we still have 13 minutes. I don't know, do you guys have questions? Yeah, can you speak other please? Yeah. So comparing, you know, basically when you want to compare values in solidity, you can just put these signs right. You can't use them yet. In Cairo you have to use specific functions that do the same thing. We want to simplify it, but it's not there yet.
00:51:25.596 - 00:51:59.076, Speaker A: So yeah, you have to use the serve function, and they're not the same function if you're manipulating felt and ua. Okay, yes. Yeah, good question. So let's take a look. You know what? So I'm going to send just this transaction, I haven't done the exercise, so it should fail and we'll see what happens. So we'll check that in a while. Yeah, sure.
00:51:59.076 - 00:52:47.872, Speaker A: So, you know, in solidity, when you import a contract, you know, there's a line at the beginning where you import the contract. Basically you're saying, I want to be able to use that in my file. And then you define your contract and you call this in your contract, there's not this notion of inside the same file you can have various contracts in solidity, you don't have that in Kyro, a file is a contract. So if you import something, then it's part of the contract. Does that make, I mean, when you're importing functions from another contract, if you're using interfaces, then you're not implementing this interface, you're just able to use it in your contract. All right, so let's see this transaction. Oh, it was rejected.
00:52:47.872 - 00:53:39.904, Speaker A: I don't have any info. Okay, so here in the tutorial I've put a link, this one here, it lets you get information, right? So I'm going to put the ash of my transaction here. And here you get a bit more information, still fuzzy, but you get a bit of information, right? So here, basically it's saying, okay, entry .0 x yada yada, not found. What is happening here, basically, is that it's trying to call a function that is not implemented. So it's failing by saying a this function is not implemented. Okay, so quick question, who learned something today? Cool.
00:53:39.904 - 00:54:29.200, Speaker A: Who thought it was too easy? Who thought it was too difficult? Okay, understood. It's not easy, right. When you start learning a new language, you get comfortable with it really quickly, and I'm comfortable with Cairo, but seeing all of you do these kind of things make me realize that we need to make it better. So your feedback and your input is invaluable. So hang on and do let us know what we can do better. We absolutely want to make this more useful. Once again, if you're interested in learning more about Cairo and you have an idea, something you could do, reach out for sure, we can help you pay your bills while you spend some of your brain time on Cairo.
00:54:29.200 - 00:54:55.192, Speaker A: I also want to mention that we have two hackathons coming. One of them will start in two weeks. It's an online hackathon. It's free. And there will be a bunch of these tutorials that we'll do online for three to four weeks, two to three weeks, something like that. And we'll cover basics like ERc seven to 21, ERc 20, bridging messages between l one and l two and things like that. So you'll get to learn a lot about it.
00:54:55.192 - 00:55:19.600, Speaker A: It's all free, so you'll be able to follow it on the Internet. You'll learn a lot. And then there's the hackathon where you'll get to build stuff. There's a bunch of money for prices and things like that, but it's also a great way to get involved with people who want to build on. So that's the online one. And then we have another one in April around just after Devconnect. Is anyone from Europe here? Yeah, some of you.
00:55:19.600 - 00:55:58.410, Speaker A: So if you want to join in Amsterdam, we'd be more than happy to have you and act with you for a few days. It's going to be really fun. So be sure to join. Yes. Um, yes, actually there is a website. There is, there was. Let me try to find it to approach us.
00:55:58.410 - 00:56:17.792, Speaker A: I. So if you have questions on Cairo, you can go on Discord. There's a lot of discussions there. You can post also on our forum to get support. The best way actually to do it. And you can send us an email or on Twitter. You get my contact here in the slides or in discord.
00:56:17.792 - 00:56:51.070, Speaker A: If you find admins you can reach us quickly or just after this conference, more than happy to take your contact and give you my info. Cool. Okay. So you can follow this thing and where is the link to that? Yeah, I don't know where it is. But basically these guys organizing the Starknet hackathon boot camps. Yeah, I don't know, somewhere here. I'm sorry.
00:56:51.070 - 00:57:28.856, Speaker A: Yeah, you can do that also, but I'll publish it soon if you need the information. All right. So thank you for your time and intention. I really appreciate all of you showing up on a Tuesday at nine. I hope you have a great conference if you want to start hacking this weekend on Startnet. We're here until Sunday. I don't know exactly what time is mine plane on Sunday, but I can squeeze you in probably on Sunday morning if you're around, reach out, ask questions and.
00:57:28.856 - 00:57:39.390, Speaker A: Yeah. Happy to discuss with all of you. Thank you. And we got place.
