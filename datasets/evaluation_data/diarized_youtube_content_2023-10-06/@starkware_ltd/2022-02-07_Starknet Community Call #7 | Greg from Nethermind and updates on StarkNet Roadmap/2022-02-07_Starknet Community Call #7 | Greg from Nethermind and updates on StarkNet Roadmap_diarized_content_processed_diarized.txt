00:00:00.890 - 00:00:03.760, Speaker A: Okay, so what do you think? Let's start.
00:00:04.530 - 00:00:05.278, Speaker B: Yeah.
00:00:05.444 - 00:00:30.742, Speaker A: Okay, very good. So thank you everyone for joining us today. This will be our 7th community call. So as mentioned in the past community calls we had both Zoom and discord. For this one we're going to be strictly on Discord. So just here we'll be talking. Next one, if we need video, will be on YouTube live for today.
00:00:30.742 - 00:01:21.494, Speaker A: As usual, we have one of our community member presenting what they are working on. And today our guest is Greg from the Nevermind team. And after that we'll have an AMA where you can ask questions to Greg about Warp, about what it is they're working on. And we'll also have a small update on the Starknet roadmap and you'll get to ask questions. We'll also make a small topic on various events that are coming for Starknet and that we want you to be aware of. Okay, so let's start with the main event for our community call, Greg. Thank you for joining us.
00:01:21.494 - 00:02:11.880, Speaker A: So Greg is working at Nevermind. I'll let you present yourself maybe, and nevermind in a minute. I just wanted to explain a bit what it is that Nevermind is working on for us at Stacknet. And specifically the Nevermind team is working on a tool that a lot of you have used. If you've used Starknet in the past, which is Voyager, which is basically the block explorer that allows you to explore Starknet. And another big project that Nevermind is working on and that you're here to present today is warp. Warp being one of, I don't know if it's the most expected feature for the past few months or one of them.
00:02:11.880 - 00:02:49.090, Speaker A: Certainly it's a big thing that was expected by a lot of blockchain devs that wanted to work on Starknet. It's basically a transpiler that allows you to write solidity code and transpile it to Cairo. Am I presenting it right, Greg, or you present? Okay, so Greg, without further ado, if you want to, I don't know, introduce yourself or never mind, explain a bit what you guys are working on and then talk a bit about Warp and what we can expect from this release.
00:02:50.230 - 00:03:55.080, Speaker B: Yeah, so, hey everyone, nice to see all you guys here. I'm Greg, obviously. I'm the team lead for Warp, which as Henry already mentioned, is the solidity to Cairo transpiler. And I think I'll kick this off by giving a bit of history on warp where we've come from and sort of where we're going. So back in June last year warp started off as a transpirer from EVM bytecode to Cairo. And we realized pretty quickly that that approach was unfeasible because when you take any, even an arbitrarily small solidity contract and you read out its bytecode, it's pretty long, right? And so the Cairo we were generating from that method was just way too, the size of the Cairo contract was way too large and it was way too inefficient. Example, an ERC 20 in solidity transpiled using that method was like 1500 lines of Cairo, which is a lot.
00:03:55.080 - 00:04:49.206, Speaker B: It's a pretty big Cairo contract. It's like 1112 megabytes without debug data, which is obviously massive. So we realized pretty quickly that we needed to do a bit of a uturn and went with Yule. So for those of you who don't know, Yule is solidity's intermediate representation. It's sort of like a lower level language that solidity will get turned into before it is transpiled or compiled to EVM bytecode. But currently the solidity compiler doesn't use Yule by default if you take your solidity contract and you deploy it on Ethereum. And the nice thing about Yule is that we could reuse a lot of our code because Yule only has a single type apart from string literals, and that's UN 256, which is the exact same the only type as the EVM bycode.
00:04:49.206 - 00:05:33.874, Speaker B: EVM opcodes and a lot of the EVM opcodes are just implemented as Yule built in functions. So we already sort of had a lot of those implemented and so now we have the warp Yule approach, which is pretty much, well it is essentially feature complete up to what starknet can handle. There's just some things that relate to like Ethereum layer one state that don't make any sense, like block difficulty, base fee, et cetera. Those are globally available variables that you can access in solidity. You can also check out the stuff that we don't support, I. E. Those things on our GitHub repo in our readme.
00:05:33.874 - 00:06:32.778, Speaker B: So another thing that we don't support currently is deploying a contract from within another contract. So like create or create two. And yeah, I hear support for that on Stocknet is coming soon. Currently the Cairo we're generating is not that efficient either. It's pretty much the best you can get with the Yule approach. And we took this approach because it allowed us to get something out there really quickly because we know all of you guys are sort of dying to write solidity and use it on Starknet, but concurrently we also have a new and improved version of Wolf that is being developed that is pretty much almost as good as handwritten native Cairo. And so we've got Dom on our team who's been working on this and some of us are shifting over to working on that now.
00:06:32.778 - 00:06:51.120, Speaker B: And yeah, you should see virtually no performance loss versus native handwritten Cairo with the new and improved warp, which we are expecting to be ready in about two months. And yeah, there is also a.
00:07:23.200 - 00:07:28.524, Speaker A: Um, there is because, well if you, if.
00:07:28.562 - 00:10:11.092, Speaker B: You, if you can, you can always, if you, if you're really good at writing Cairo, right, you can probably always beat the transpider. And it would be easier, I guess to, let's say there's a new built in that comes out right, like built in for vdfs, like verifiable delay functions. I know that's in the future quite far, but something really cool comes out in language feature in Cairo that there's no corresponding structure in solidity. Obviously that's when you would want to write Cairo instead. And another area where you would like to write Cairo is I think pretty much if you're starting something from scratch, I would be writing Karo and you don't have any existing, you have the bandwidth to learn a new language firstly, and you're starting something completely from scratch. I'd probably write Cairo, but if you have like a ton of existing library code or functionality that would be really helpful for what you're building, or you want to take some existing functionality, very written in solidity and deploy it on say Phantom or Ethereum one, then it makes a lot of sense to use warp. Yeah, so I think it depends on which constructs your current solidity code uses that warp doesn't support and how important they are for the protocol you're trying to transpile.
00:10:11.092 - 00:10:41.840, Speaker B: So an example where. So we don't support deploying another contract from within a contract, right, I. E create two. And if you're like uniswap you need your factory to be able to people to deploy pools. So that would be like a big blow for direct for just using warp for that situation until we have create to functionality on Starknet. So that's sort of like a showstopper run. So I think it's pretty situation dependent.
00:10:41.840 - 00:13:22.394, Speaker B: But in general it's not difficult to update your existing solidity code to remove stuff that we don't support like MSG value and block coinbase block difficulty. It's not too difficult at all, really. It shouldn't take you longer than like 10 minutes if the unsupported feature is not like a key part of functionality of whatever protocol you're, are you talking about? Well yeah, there's obviously levels here, right? It depends on how you define EVM compatible or like an actual EVM ZK EVM that takes solidity, that will run solidity opcodes, right? So I think an actual evm zke evm isn't that interesting to me because it sort of constrains you in what you can have. The design structure of your network and your virtual machine can be like. Whereas if you're creating a ZK roll up, you want as much sort of creative and intellectual freedom as possible to come up with interesting features and things you could do that would not be possible in the EVM, et cetera, et cetera. And I think it's also important. I think the reason that a lot of you would want EVM, like full EVM support is so you can have just take one of the existing clients like Geth or something, and fork it and use that to run it on your roll up, because clients are big complicated pieces of software, and that just solves like a big problem for you.
00:13:22.394 - 00:13:54.770, Speaker B: So it has that plus. But then again, you're constrained into this homogeneous programming model where everyone's always thinking in the same way about protocol dev and writing smart contract code. Whereas with these new sort of vms like Cairo, you guys, as I'm sure you know at stockware, get to sort of create your own new design space with new interesting functionality which could open up types of protocols that just aren't possible to build in EVM compatible.
00:13:58.150 - 00:15:06.860, Speaker A: I mean, I agree with you on that. I think that in a way, reapplementing and reusing the EVM in a roll up is sort of like porting your Game Boy game on a Nintendo 64. It makes sense if you want to play some games that you like on Game Boy, but it's also cool to use the feature set of the Nintendo 64 if you're building a new game, right? I am also curious about how you can integrate Cairo native smart contracts and warp transpile smart contract. So say I have a solid smart contract and I warp it. What does the Cairo output look like? Is it readable? Can I modify it? Does it have function name that I can use, that I can call? And if not, how do I write a Cairo smart contract that calls a warped smart contract and vice versa? How do I, inside a solidity smart contract, call a Cairo smart contract. Is that possible?
00:15:08.050 - 00:16:20.398, Speaker B: Yeah, this is a great. So with the Yule approach, right. The current way warp works is Yule exposes a lot of EVM semantics. So for example, we need to encode input as call data, and then we need to have a main entry point where we get this function selector and et cetera, et cetera, do a bunch of bit shifts to get the parameters. So if you wanted to write a solicit contract that would call a warp contract. Sorry, if you had a warped contract and you wanted to write Cairo to call that warped contract, then you would need to, let's say you want to call a function called transfer on the warp contract, you would need to Abi encode that call data like the way that ethers JS or web3 js would be. So you would need to have a look at the solidity code that the warp contract came from, and then Abi encode it using some library and then send that to the wart contract, to the wart Chira contract.
00:16:20.398 - 00:17:12.286, Speaker B: That's where the current UL approach. But this problem sort of goes away with the newer approach which we're taking, which I said is coming out in a couple of months, and where you will just be able to go and look at the function and read its arguments and call it like a normal handwritten Cairo contract. And at the moment the transpiled Cairo, it isn't very readable. Actually, I think a big reason for that is because of how we have to handle scope, because scope is a bit tricky in Cairo. So we sort of need to functionalize all the if blocks. And there's a lot of ifs in generated Yule. So you get like a whole bunch of generated like underscore, underscore warp, underscore block if functions.
00:17:12.286 - 00:17:23.640, Speaker B: So it's pretty difficult to read the generated Cairo. It's not impossible, but it's not fun at all. And this is also fixed by the newer version of warp that we're working on.
00:17:25.550 - 00:18:26.678, Speaker A: Super cool. Okay, so what I get from what you're saying is that it is possible to have warped contracts and Cairo contracts communicate one way and the other, but it might require some manual ABI encoding of arguments. Basically, it's relatively straightforward from a Cairo contract to call another Cairo contract, and it's relatively straightforward from a solidity smart contract to call another solidity smart contract. But doing crossing in between might require a bit more manual. And I guess a lot of it could be solved with the tools we got, like arthat, the Starknet plugin, or denial iDe. But it takes time to integrate these things too, right?
00:18:26.864 - 00:18:40.378, Speaker B: Yeah, you're correct. It definitely would require a bit more work to abi encode the transaction data when you're calling a warped contract from a non warped contract.
00:18:40.554 - 00:19:22.640, Speaker A: Okay, and another question is actually also regarding tooling. So I have to admit I haven't had time to try warp. It's on my to do list. It's been on my to do list for the past week, but I haven't had time. But when you fork the repo, you can warp your contract, obviously, and then you can deploy it. Do you have plans or have you been talking with tooling devs about integrating it in different frameworks so that people can maybe have part of their project in solidity, part in Cairo, and manage deployments, script deployments on Starknet? Is it something you've explored yet or not?
00:19:23.250 - 00:20:10.186, Speaker B: Yeah, so we're exploring integrating with Forge, which is, I think it's Georges's amazing solidity development. Really, really great. So we're just exploring integrating warp with forge at the moment. So that's what we have on the cards for devtool integration. But Warp has like pretty great functionality. You can deploy, you can write your tests in your solidity contract and that'll just get transpiled into Cairo tests and you can just type warp test in your root directory and it will transpire your solidity, deploy it to a local starknote instance and run the tests for you. So that's pretty neat.
00:20:10.378 - 00:20:37.910, Speaker A: That's very cool. If you're in the audience and you've tried warp, I'm very curious to have your feedback on it. If you've tried it, and if you have questions, and also if you have questions for Greg, now is the time to ask. You can ask them in the community channel, sorry, community call channel, and we'll answer them. How many people work on Warp, Greg?
00:20:39.850 - 00:21:02.830, Speaker B: Yes, currently I think there is six or seven full time, and we have three interns, or two interns, and soon to be about nine full time. Yeah, so there's a bunch of us, and majority of them are currently working on the new and improved version of warp.
00:21:03.650 - 00:21:08.960, Speaker A: That's a massive effort. Nine people is a lot of brain power.
00:21:09.910 - 00:21:43.290, Speaker B: Yeah, a lot of them are sort of newer to the Ethereum developer ecosystem. So often people will come in, they have a decent base knowledge, but they sort of like learn on the go, which is why we have a fairly sizable team at the moment. And it's sort of, well, never mind. We're hiring like crazy at the moment. Right. It's pretty difficult to find experienced devs for this sort of thing because it is quite niche.
00:21:46.690 - 00:22:02.162, Speaker A: Okay, very cool. Thank you. Okay, so on my side. Thank you. This was very clear. I don't have much more questions. If in the audience, some of you have function, please ask them.
00:22:02.162 - 00:22:07.700, Speaker A: So Ozzy is asking, is fallback function something that could be used?
00:22:09.110 - 00:22:10.420, Speaker B: Yes, it is.
00:22:11.030 - 00:22:35.900, Speaker A: So the fallback function, in the sense that if no function is specified, you call this function, right? Yeah, but not the receive fallback. Right. If you define the receive fallback to handle. Oh, but I guess if you define a receive fallback function and you do something on MsG value, then it won't work, right?
00:22:36.270 - 00:22:37.214, Speaker B: Yeah, it won't work.
00:22:37.252 - 00:22:51.810, Speaker A: It just won't compile. Does the fact that you can't use MsG value, does that mean that the payable keyword in solidity is usable at all? Do you have to remove it everywhere.
00:22:52.630 - 00:23:22.650, Speaker B: You can use it? We won't get any errors. So the way it translates down into Yule is that if a function is non payable, then at the beginning of the generated Yule, then there's basically just a check or call value, which we just have currently set to zero. So it is kind of like superfluous if you write payable or not in solidity for transpiration.
00:23:23.710 - 00:23:32.606, Speaker A: Okay, understood. Thank you. Marcelo is asking a very controversial question. Did you use snake case or camel case? What?
00:23:32.628 - 00:23:37.646, Speaker B: In your. We prefer snake case, I think.
00:23:37.828 - 00:24:12.810, Speaker A: Yeah. So you mean that the transpiler is in snake case, but the solidity code? Well, you don't write the solidity code. Right. You leave it to people to choose whether they use snake case or camel case, right? Yeah. I've written a bit of Cairo, and now I've tried doing what the others do. So basically, when I try to fit into an ethereum standard, like ERC 721 or ERC 20, I use snake case. Otherwise.
00:24:12.810 - 00:24:21.790, Speaker A: I'm sorry. I use camel case, otherwise, I try to use snake case, but sometimes I forget and I mix a bit both, which is probably the worst thing to do.
00:24:21.860 - 00:24:24.000, Speaker B: What is open zeppelin used for their.
00:24:24.610 - 00:25:10.400, Speaker A: Standards, so they do the same. So actually, Martin wrote a very cool post on shaman trying to define extensibility patterns. So it's not only that, but there's a bit of that too. Yeah. It's not exactly the same topic, but it's linked. And so basically, the external functions that fit the ERC 20 standard, they use the same function names as solidity. So camel case, but for all the internal functions, and for all the base contracts, the one that have internal functions that are not external and that are supposed to be called by external functions they use.
00:25:10.400 - 00:25:11.920, Speaker A: Snake case.
00:25:12.610 - 00:25:14.560, Speaker B: Yeah, I think that makes a lot of sense.
00:25:16.130 - 00:25:37.106, Speaker A: So, Ozzy is asking, flash loan, smart contract, would it be possible? I don't see why it wouldn't. I mean, I think that's an app specific question. When you're doing a flash loan, for example, on Ave, I think it depends.
00:25:37.138 - 00:25:39.990, Speaker B: On whether you're the provider or the taker.
00:25:41.290 - 00:25:42.360, Speaker A: What do you mean?
00:25:44.570 - 00:25:49.286, Speaker B: Actually, no. Yeah, it should be possible. Yeah, I'm just thinking about the way reverts are handled.
00:25:49.478 - 00:26:43.580, Speaker A: But I mean, if it's just manipulating ERC twenty s, I don't see why it wouldn't be possible. I wrote a bunch of tutorials lately, and I want to do something that sorts of work, like a flash loan, basically have a functionality. So the tutorials I wrote have various questions and people can do them one by one, manually. But I want to give extra points to people who manage to do all the workshop and all the tutorial in just one transaction with one smart contract. But in order to be able to grade that, you need to have them first call a specific function saying, okay, look, I have zero points. Then return to your contract, execute all the contract, and then go back to say, look, I have 20 points, so can I get an extra two points? Which is basically, I mean, it's sort of how a flash loan work, I guess. And I don't see why it wouldn't be possible.
00:26:43.580 - 00:26:54.926, Speaker A: Anyway, Laurie is asking, are there any initial performance comparison between native Cairo and solidity transpiled Cairo code? So, writing the same logic in either way?
00:26:55.108 - 00:27:54.130, Speaker B: Yeah, this sort of like largely depends on the complexity of the solidity contract that you're writing. And ironically, the more simple your solidity contract is, the bigger the performance overhead or transpiring it is. And this is because there's like a big initial performance overhead because of the way Yule works with entry points into a contract, you need to go through a bunch of switches, a bunch of switch statements, you need to decode, call data, do some bit shifts, et cetera, et cetera. So for really small and simple solidity contracts, the overhead is like fairly massive, like 200 x, but for bigger, more useful solidity contracts, the overhead is like 17 x, 20 x. It sort of really depends on the contract and what type of code it is. But this is why we are currently building the new and improved version, which should have very little to none overhead.
00:27:55.990 - 00:28:25.242, Speaker A: You're making it hard to sell Cairo, Greg? No, but I mean, that's great. If it means it's easier for developers to jump the stocknet train, I'm all for it. So that's great. It's good to have various tools to build. So that's great. Thank you. Okay, so if there are other questions, please ask them and otherwise I think we can.
00:28:25.242 - 00:28:48.978, Speaker A: Thank you, Greg, and thanks again for your work and for your presentation. I'm super excited to see you come back and present in a few months the enhanced warp version. So if people have questions about warp, where should they ask it? I think we have a channel on discord, right?
00:28:49.144 - 00:29:09.130, Speaker B: Yeah. So there will be one of us in the channel from the team to answer questions, obviously, as much as we can. Every day of the week there's a different person in our team assigned to the channel. And I think we should have some time to answer some questions there, if you guys have any.
00:29:09.280 - 00:29:30.260, Speaker A: Okay, so it's in warp transpiler. In discord, there's a category called Starknet third parties, and there's a channel called warp transpiler. You can go there if you have any question. Have you seen some questions yet? Do you have a way to measure if people have been trying to use warp yet?
00:29:30.710 - 00:29:47.110, Speaker B: Yeah, so we can look at the download stats for the pypy repository, for the pypy package and the number of clones on our GitHub repo. I think there's like in the last two weeks there's been, let me just check quickly, something like 2000 clones.
00:29:47.450 - 00:29:48.470, Speaker A: Pretty cool.
00:29:48.620 - 00:29:58.140, Speaker B: And on the PI PI package in the last month, there's been like 650 downloads. So yeah, that's what we're seeing so far.
00:29:58.590 - 00:30:22.100, Speaker A: Very nice. So I guess some of you in the audience are building stuff. Happy, looking forward to seeing what it is. Okay, well, thanks, Greg, again. And there's another question from Karen. What about warp working with fractal eventually? Is that part of the roadmap? I'm not sure what fractal is.
00:30:22.790 - 00:30:24.980, Speaker B: I'm not sure what fractal is either.
00:30:26.310 - 00:31:24.050, Speaker A: Okay, so Karen, if you want to write more details, we're not sure what fractal is. Okay, so let's move on. So Greg, I know you had a tiring period last time, so if you want to go and rest, please do. Otherwise, if you can stick around and if people have other questions, that's great. And I'll move on to the next part of our AMA. So I wanted first to mention the various events we have coming up for Starknet. So first of all, around the end of February we will have an online hackathon with community of devs that is called encode.
00:31:24.050 - 00:32:27.006, Speaker A: And basically we're going to have a series of workshops. So I mentioned them earlier, and if you've been on discord for a while, you've probably seen me post some tutorials on how to get on Cairo. This is part of an effort to write content to onboard devs to learn Cairo. And each workshop will have a specific topic. One is about Cairo syntax, the other one will be about ERC twenty s on Cairo, the other one is on ERC 721 on Cairo. And we have a bunch of them coming, and parts of these will be used in February during that hackathon. So we'll make online sessions that you'll be able to follow from anywhere you'll be we'll have first a small presentation, a video presentation that will have around an hour, maybe a bit less, and then exercises so that you guys can work and learn stuff about ERC 20, ERC 721 and all of these topics.
00:32:27.006 - 00:33:23.562, Speaker A: And so we'll have a bunch of workshops for about two to three weeks, and then you'll have three to four more weeks to actually come up with projects and participate in the hackathon. So there will be cool rewards and workshops. We haven't started communicating about this yet, so this is exclusive information for you all. So keep in mind, end of February and around March and before that, I actually forgot to mention, but we will be in East Denver. So part of the Starknet team will be in east Denver in Colorado in two weeks, actually. And while we'll be there, we will have two workshops and same idea. One will be about Cairo syntax, the other one will be probably about ERC 20 because I'll have it finished by that time.
00:33:23.562 - 00:33:56.646, Speaker A: If you're interested in following the workshops, keep an eye out. We'll be advertising them soon. And if you want to actually, I can tell you exactly when it is because we have finalized the dates recently. It will be on February 15 at nine my time. So at 01:00 p.m. Denver time and on February 17 at nine in the morning at 09:00 a.m. From 09:00 a.m.
00:33:56.646 - 00:34:38.050, Speaker A: To 11:00 a.m. So there will be these workshops if you want to get familiar with Skyro in Denver, and if you want to talk with us, present us your project, or just get in touch, get the coffee and talk for a bit, we'd be more than happy to meet you. So if you're in Denver, please reach out and we'll be happy to talk with you. So mid February we'll be in Denver. End of February we'll have the encode Akaton which will be cool. And then in April we will be at Devconnect in Amsterdam. So Devconnect will be an ethereum conference that will last for about a week.
00:34:38.050 - 00:35:10.570, Speaker A: And by the end of this week for two days, we will have a Starknet focused hackathon. So it will be a hackathon with only starknet focused projects. So we expect to have people building games, nfTs, a bunch of stuff really. And these are the things we expect. But I'm really curious about the things we don't expect which will come out of your mind. So please take note in your agendas. Be there in April.
00:35:10.570 - 00:35:48.314, Speaker A: It will be. Let me check the dates. I think it's 25th and 26 April in Amsterdam. So same thing. We'll be giving out information soon about this and you'll be able to register, but do know the dates. This will be a very cool event and it will be obviously a good time to write code and to deploy your application, but it will also be a very good time to meet more people because the Amsterdam hackathon will be on site. So it will be a good way to meet face to face and talk with people.
00:35:48.314 - 00:36:20.850, Speaker A: And it's nice once in a while to meet. So I'll be happy to see you all there. So that's what I wanted to mention, these free upcoming events and we'll have a bunch of other events. And by the way, the workshops I mentioned that we'll do for the hackathons. So we're going to do part of them for Denver. We're going to do part of them for the online hackathon. We're going to do some of them for the Starknet Hackathon in Amsterdam.
00:36:20.850 - 00:37:27.660, Speaker A: But we're also thinking about doing this for you, for discord. Because basically these tutorials, when we write them, then we need, I mean, I need some people to crash test it for me. I write the code and I like to have people try it out, tell me what is working, what is not working, what is too easy, what is too difficult. So if there's interest for that, please say so in the chat and we'll be more than happy to host a Zoom session soon and basically run the workshop with you to have you study the material, try the exercises and tell us what you think. Okay, so this is what we wanted to mention about upcoming events and it's not a big event. But I wanted to mention that still because it's a cool statistic that we kind of stumbled upon yesterday. We realized that there were ten k testnet smart contract deployed on Alpha girly for Starknet, which feels very big.
00:37:27.660 - 00:38:00.260, Speaker A: It's a huge milestone. It means that a lot of you have been hacking at Starknet and trying new stuff, and we feel very grateful to have you all aboard for this journey and trying stuff on this thing we built. So we're very happy for these ten k contracts and we're looking forward to the next one hundred k. Okay, so keep rocking and keep coding. So that's the part about events. I'm going to take a look in the channel. If there are questions.
00:38:00.260 - 00:39:06.170, Speaker A: If there are questions. Oh wow. Okay, so there are questions for Greg and there are other questions about Starknet. So first, Greg, if you're still around, there are two questions that I think are for you. One is what is something that is not possible in warp and that is common in solidity? If you have an example of things to that answer, I would say, ozzy, look at the blog post that is linked just above. You'll be able to actually the one by warp and you'll be able to see they have a list of keywords in solidity that are not transpileable to Cairo. So you'll have a very specific example of things you cannot do with warp.
00:39:06.170 - 00:39:46.950, Speaker A: Karen did give more precision about his question. What about warp working with fractal eventually? Is that part of the world map? So you meant about fractal scaling, getting various layers of scalability. These are two unrelated topics. Basically the way starknet can scale in a fractal way is more of an infrastructure topic than programming topic. So yes, it could work. You could write a smart contract on an L three or L 25 for Startnet. So that should work.
00:39:46.950 - 00:40:28.290, Speaker A: And then this one though is for you, Greg. And I don't have an answer to this one is Oxmrey is asking. Geoning is reporting a bunch of Cairo bugs regularly. Does this mean that Cairo will cause security problems in the future? Actually it's not for you, it's for us. Does this mean that Cairo will cause security problems in the future? I'm curious if you have more examples of that, Oxmray, of the bugs you're mentioning. That being said, I will mention again that Starknet Alpha is, well, in Alpha. So it means that there will be bugs, there might be bugs.
00:40:28.290 - 00:40:52.220, Speaker A: And that regardless of the programming language, there's always the possibility of bugs. Yeah, so I can't tell you Cairo will have no bugs. I can just promise that we're hard at work trying to squash them and make the language better. Okay, the following question.
00:40:53.230 - 00:41:20.900, Speaker B: There was a question about an example of something that is common in solidity that warp can't handle. I think probably deploying a contract from another contract. That's a common one. But again, as Henry already mentioned, all this stuff is listed in the readme on our GitHub page. So yeah, you can go have a look at that. There's a nice table there that'll tell you exactly what you can't do.
00:41:22.330 - 00:42:23.782, Speaker A: Thanks Rick. Okay, and then there's another question here that I think a lot of people have asked before, which is, okay, why is transaction speed so slow now? Any plan on getting it improved? So, as I'm sure a lot of devs among you have realized or notified, two things. First, that transaction speed has been slow for the past few weeks and that things have been getting better in the past few days and then a bit slower. Basically it's back and forth. So the reason for that is that as you know, in the roadmap of Starknet, or as you may know, we are currently rolling out Starknet while we're building it. So it means that we shipped the parts that are ready and we're building the parts that are not ready. Part of things that are ready is basically the execution engine.
00:42:23.782 - 00:43:18.330, Speaker A: The ability you have to write a smart contract, have it generate a proof, and have this proof be verified by Ethereum. And from that basic availability possibility build a network, a state machine, a global state machine that can iterate block by block and keep a global state and have smart contract interact with each other. So this was the massive achievement we've had over the past six months. In order to achieve that, we have put aside the decentralization aspect for a while, and now we are back at work on that specific topic. So this means that right now Starknet is operated by Starquare, the company. This means that we run the provers, we run the sequencer, we run basically the node. So we're at the same time all the nodes of the network.
00:43:18.330 - 00:44:16.618, Speaker A: Both we're all the miners of the network, we're all the infrastructure, the infer up of the network. So we're running everything at once and we introduce transactions without cost. So it's absolutely cost less to send things to Starknet. This is a combination that basically was very alluring to a lot of you, and rightly so a lot of you thought, oh nice, so we can build stuff. And so we received a lot and a lot, a lot of request, basically transactions and requests to read the blockchain, to read on Starknet and invoke and things like that. And it turns out that scaling is a moving target. And so every time we improve what we built, more applications come up, more people come up, and so we have to always keep on making things better.
00:44:16.618 - 00:44:53.154, Speaker A: So my point is, basically there is a fresh wave of developments coming live on Starknet in the past few weeks. And this is part of the reason why this has been slow. We're hard at work on that. We expect some massive scalability improvements in the next few weeks. And over the next quarter to semester you should see massive improvements in performance. You will also see the first full nodes being released. So this will also alleviate part of the pressure on our infrastructure.
00:44:53.154 - 00:45:17.198, Speaker A: So this is temporary pain. This will be solved soon. Sorry. So I took a bit of a tangent to explain out of it, but I thought it was important to explain, and now I'm realizing that audience answered this in three lines right after the question. Okay. Anyway. Okay, cool.
00:45:17.198 - 00:45:55.498, Speaker A: So seeing, I'm looking at the other questions that are coming after that. Okay. Most of the questions I've been asked and answered, which is okay, okay, so I guess most questions were answered. I asked Tom before coming on the community call if he had some things I could talk about for the upcoming roadmap. And I want to up, let me check. I think this page is public, so I'm going to publish it. No, it's not.
00:45:55.498 - 00:46:31.350, Speaker A: Okay, so we have the upcoming stocknet alpha feature web page. So I'm sure you can find it on stocknet IO. And so we have two versions upcoming. One is Stocknet Alpha 0.7.1, which is expected in the first half of February. What we expect in that version is improved finality time for invoke transaction, and improved gateway response time and reliability. So we're working on stabilizing the infrastructure and making it more efficient and resilient.
00:46:31.350 - 00:47:05.540, Speaker A: And we'll add a bunch of APIs to the full nodes. But for devs mostly, this is not essential. And then for the second version, which is expected by the second half of February. So, okay, you can expect two releases in this month of February. This will be for Starknet Alpha 0.8.0 and for this one you should have two. So one big feature and one a bit less big, but still important.
00:47:05.540 - 00:47:55.860, Speaker A: A bit less big, but still important is the l one. L two message cancellation currently, when you send a message from l one to l two, you can't cancel a message, then at this point you'll be able to do it. And the bigger feature that I think will affect lots of the way we interact with Starknet is the initial support for fee mechanism. So you'll be able to start to assess how much a transaction will cost and pay it eventually. So you'll be able to start integrating that into your applications by the end of February. Very okay. Yes, thank you Masik, for the link.
00:47:55.860 - 00:48:44.738, Speaker A: And that is about all I had in mind for that community call. We've been here for about 50 minutes. I don't know if some of you have more questions, you can still ask them, and otherwise you can always ask them on discord. We're around and so we'll be more than happy to answer. So Odin is asking for the Cairo tutorial. The new tutorial is very difficult for noobs. Is there an intermediate step or reference to literature explanations? Okay, so you mean the ERC 721, right? Odin, yeah, no, for now that's all I have in the sense that instead of doing it.
00:48:44.738 - 00:49:57.110, Speaker A: So basically for these, the, we want to produce content that help you handle Cairo. The approach we took was to study Cairo through solidity programming patterns. So basically is learning Cairo through ERC 20 standards. So how do you deploy an ERC 20 on Cairo and customize it? How do you deploy an ERC 721 and customize it? So right now the tutorials are more made and more easy to read for people who are familiar with solidity. So I guess we should add a bit more explanation on what exactly is ERC 721 and what exactly is ERC 20 in the readme so that you get familiar with the programming concepts around them first. So I think that's something we should add and I think my experience. So we've run a workshop two weeks ago in Paris where we did the year C 721, and people spent a lot of time setting up their environment.
00:49:57.110 - 00:50:40.280, Speaker A: And it turns out that when you want to start to compile Cairo smart contracts, this takes a lot of time. So this is something we need to make better. Also, we need to have something very easy for devs to basically in two click install in environments that allows them to write and compile smart contracts. So I think that's something we need to make a bit better. I don't know if that's what your issue was when you faced the first tutorial, or if that's more something really related to the programming of it. But anyway, thanks for the feedback and for sure we'll try to make things more intermediate for people who are newcomers. Okay.
00:50:40.280 - 00:50:55.450, Speaker A: So, yeah, if there are no more questions, I think I can. Thank you all again. A special thanks to Greg for coming to talk about warp. For coming talking about warp today.
00:50:55.520 - 00:50:56.758, Speaker B: Thanks for having me.
00:50:56.944 - 00:51:35.082, Speaker A: For sure. And I'll see all of you in two weeks. I've published on shamans the list of community calls, the upcoming dates, so you can bookmark them. And if you want to come and present your project, please feel free to do so. And write a message on that thread. Next time we'll have guilty Gioza explaining a bit all the crazy physics he's writing in Cairo, so be sure to tune in in two weeks. Okay? So leave it at that.
00:51:35.082 - 00:51:36.520, Speaker A: Thanks, you all have a good day.
