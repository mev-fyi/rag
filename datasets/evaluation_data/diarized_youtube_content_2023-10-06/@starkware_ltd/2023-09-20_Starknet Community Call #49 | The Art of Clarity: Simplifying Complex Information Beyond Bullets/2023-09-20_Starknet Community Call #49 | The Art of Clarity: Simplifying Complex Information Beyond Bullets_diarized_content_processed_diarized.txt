00:00:00.330 - 00:00:31.218, Speaker A: Okay, I'm going to go live on YouTube. Okay, we arrive. Hello, everyone. Thank you so much for joining us today. Today we are at community call number 49, which is all about the art of simplifying complex information beyond bullets. And I'm your host today for the day. My name is Gyan and I work as a debril with the Stocknet foundation.
00:00:31.218 - 00:01:53.610, Speaker A: And today we have Steve Goodman, who's a principal technical writer at Stackware. In addition to writing technical content, he's responsible for setting up the stocknet documentation infrastructure, mentors different technical writers. He also took an amazing session for us, is an ed Hat certified systems administrator, and has written and performed for bands including Don't Feed the Goat, the great neighbors, and offbeat. So today's session, we are going to keep it very simple, very casual. Today's session is going to benefit a plethora of audience. Initially, we'll start with how you can make the stocknet docs better, how you can contribute to the stocknet docs, and then we will also talk about skills that you can use to write simple to follow procedures, clear and concise concepts, and reference topics that developers can return to whenever they need. This session is especially helpful for those who are looking for Deverel jobs, or if you're looking for jobs in the content writing technical writing space, or if you are a hacker looking to present your project in a way which is very easily understandable by judges or by users.
00:01:53.610 - 00:02:24.220, Speaker A: Right? Nowadays, data is everywhere, and every time you either want to get a job or present some form of content to the user, you want to make sure that you're able to present it in a clear and concise way. And in a lot of ways, this call is going to be all about that as well. I've done my part. Now over to Steve. I'm also going to add the slides. Everyone's able to see this. Let's get started.
00:02:25.870 - 00:02:59.874, Speaker B: Okay. Thank you for that introduction. So, my name is Steve Goodman. I'm a technical writer at Starquare. So I just want to, just by a short introduction to what is technical writing. We've got some incredibly smart people in this space, and they come from a background, a lot of people come from a background of academic writing, and technical writing is kind of the opposite of academic writing, whereas academic writing is kind of, you want to show how smart you are by using big words and long sentences. We want to do the opposite.
00:02:59.874 - 00:03:49.750, Speaker B: We want to make things as short as possible. So we're going to talk about some of that stuff. So the agenda you already laid out, John. So contributing to Starknet docs, we'll talk about a little bit what you can do, and then we'll get into some of the specifics of ASCII doc and Antora. ASCII doc is the markup language that we use for starknet docs, and I'll talk a little bit about that choice. And then we're going to get into a lot of tips about writing minimalistically, which is what we talked about, writing concisely and clearly. And then we'll take a look at some actual contents and see how we can actually implement some of those principles.
00:03:49.750 - 00:04:18.640, Speaker B: So let's get started. So first off, let's start out by talking about contributing to starknet docs. So what can you contribute? Well, we are open to anything, really. Ideas for new content. If you've just got questions, bug fixes, anything really that comes to your mind, anything that I didn't mention. You got any ideas, John, that I didn't mention?
00:04:23.590 - 00:05:00.030, Speaker A: I think they're good. Maybe stuff like when something new is released, then you can also submit a writer about that. This would be a good way for people to explore a new concept and also get some open source visibility and improve your writing skills. For example, I was just discussing with Steve this morning that the stone prover is released and not a lot of people know about it, but I'm sure it's a very interesting topic and you can submit some new content on that which is already not there in the docs.
00:05:01.670 - 00:05:26.182, Speaker B: So that's a good example. Okay. So then the question is, how can you contribute? So we've got some contribution guidelines in the Starknet docs repo. I spent quite a while on those. I'll take a look at those after we finish this slide. Another thing is this, edit this page button in the docs. So this makes it really easy.
00:05:26.182 - 00:06:00.722, Speaker B: If you're reading through the docs and something very specific is not clear or you see a typo or a bug, something that you want to actually fix yourself. And let me just show you in the docs. Wait, let me find. I have so many windows open right now. Okay, so if we take a look, I actually did a little Twitter video about this that shows how it works up in the upper right hand corner here. Not sure if you can see it. Let me make my screen bigger.
00:06:00.722 - 00:06:47.330, Speaker B: In the upper right hand corner here, you see this edit this page button. So if you click on this, it'll actually, assuming you're logged into GitHub, it'll actually open up the page in the repo. If you haven't already done so, then it might ask you to first fork the repository under your own handle. And once you do that, then you can actually go into the page and edit it directly. And after you do that you can commit it and create a new pr. And we'll take a look at that. So I'm not going to go into that too much right now at all actually, because we already, like I said, I did a little Twitter video about it, so let's get back to the slides.
00:06:50.730 - 00:07:03.960, Speaker A: Yes, sorry. Later. Post the call once we are done, if you can share that Twitter video as well, I'll post it in the YouTube link so anyone who's interested can go and take a look.
00:07:04.270 - 00:07:07.340, Speaker B: Sure. I'm not sure. I think it's under the Starknet account.
00:07:07.710 - 00:07:11.120, Speaker A: Okay, cool. Okay, perfect.
00:07:13.010 - 00:07:42.840, Speaker B: So let's see what's the other? Well, it's very easy to create an issue if you see something wrong and then just go to the GitHub repo, which is right here. Here's the URL for the GitHub repo. And you can just open a new issue. Or like I said, you can open a pr. You can either do it with the edit this page button or if you have the motivation, then actually just open up a pr. Okay. Any questions about that?
00:07:46.680 - 00:07:59.144, Speaker A: No, I think we can proceed. I don't see any questions. As of the chat, we have about 13 viewers right now and there are about 1720 people who are joining on and off.
00:07:59.342 - 00:08:39.690, Speaker B: Wonderful. So I said I was going to show the contribution guidelines that we have in the repo. So if you go to the Startnet documentation, Repo, as you can see, this is it. Then the readme is pretty detailed in ways that you can contribute to the documentation. And it includes guidelines on how to write and how to get set up. It includes a link to a style guide. And essentially what we do with the style guide is we make use of existing style guides and then kind of make any additions or changes that we need to that are specific to us.
00:08:39.690 - 00:08:54.670, Speaker B: And we've got a page about setting up your environment. So I don't know, Jan, do you want me to go more into this, or is it enough that we just know that it exists and we can move on?
00:08:56.560 - 00:09:28.148, Speaker A: I think unless there is something specific that while contributing is required apart from what already exists here, then we can just move on to the next step. But if you think something is missing here that might be required for people to actually see. But basically the message is that when they are contributing. Also, they need to take a look at this style guide and then work on their content. Like basically bring this style guide onto their content.
00:09:28.234 - 00:09:28.484, Speaker B: Right?
00:09:28.522 - 00:09:29.980, Speaker A: While they're contributing.
00:09:30.160 - 00:10:16.390, Speaker B: Well, let's put it this way. We want contributions from anybody and everybody that wants to, and I don't want to put any stumbling blocks in front of everybody. So there's a lot of information here. So if you're motivated and you want to make your content, make it as high quality as possible, and also make it easier for us to push it through, then I would say review these guidelines. If you don't, then that's okay. We'll still review it. It just might take us longer because we've got basically there's one full time writer dedicated to the starknet docs and I'm also working on stuff that is kind of around it, things like stargate and writing posts and all kinds of stuff.
00:10:16.390 - 00:10:30.252, Speaker B: So we will both be happy to review anything that comes in. And the easier it is for us to push it forward, the less work that we have to do, then the faster it'll get merged. Makes sense.
00:10:30.306 - 00:10:59.670, Speaker A: Yeah, definitely. And I think another advantage of being familiar with a style guide is that once the community members start contributing using the style guide, this will become more or less like a habit to be able to do in any other project as well. It's something that's easily translatable elsewhere. So I would think that there is advantage in just knowing what this looks like.
00:11:00.120 - 00:11:36.160, Speaker B: Yeah, I think that's a good point. In fact, I really want to point out that. So what we do is basically we say our main guide is we use the Google developer documentation style guide. And I picked that for a couple of reasons, partly because it's open source or it's freely available, let's put it that way. I don't remember if it's actually open source. No. I mean, I think they maintain it internally, but the guidelines are freely available and I read through them and they're good guidelines.
00:11:36.160 - 00:12:21.996, Speaker B: They're very true to just quality. I mean, obviously they have a lot of quality technical writers at Google. In addition to that, there are some questions that are not answered by the Google Guide that the red hat supplementary style guide does answer. And so I say, okay, well, if I can't find the answer in here, then I'll go to here. And if I can't find the guidance or answer in here, then that's what our starknet documentation supplementary style guide is. So it's pretty new, what we have specifically in here. So the idea is if you've got a question or you want some guidance, you first look here.
00:12:21.996 - 00:12:50.410, Speaker B: If you can't find the answer here, then you look in the red Hat guide. And if you can't find the answer there, then chances are it's in the Google Guide. And the Google Guide has just so much good just writing, not just about styles, but also just about writing guidance. So I really think it's a wonderful document. Okay, let's go back. Anything else about that that you wanted to mention or ask?
00:12:51.420 - 00:12:55.130, Speaker A: I think we are good. Maybe we should move to the next.
00:12:56.460 - 00:13:28.740, Speaker B: Yeah. Okay, so ASCII doc in Antora. So ASCII doc is the markup language that I chose to use for Starknet docs. And so what is it? A lot of people are familiar with Markdown. ASCII Doc is very similar to Markdown. It's not really a superset because it's slightly different, but I kind of think of it as Markdown's big brother. I believe if I'm remembering correctly, it actually came into being before Markdown.
00:13:28.740 - 00:14:20.036, Speaker B: There's a quote up on one of the ASCII doc sites from Linus Torvald's who created Linux, that he says he just has wonderful things to say about it. You can use it to generate books, ebooks, slideshows, web pages, man pages. It's standards based, which is one of the reasons I like it. There's one flavor of ASCII Doc, whereas with Markdown there's lots of different flavors. And if you're looking for a specific feature, it might not be in this flavor, but it might be in that flavor. And if there's a tool that you want to use to generate a website, then you might be stuck with one flavor or another. That doesn't necessarily, and I haven't found any flavor that does everything that I wanted to do.
00:14:20.036 - 00:14:49.016, Speaker B: So Askidocs is standards based. It's got a working group under the Eclipse Foundation. A lot of big companies are members of that working group and contributed to it. And that means that there's a lot of professional technical writers that are saying what they want in it and what they need from this language. And so that's why I chose it. GitHub and GitLab, maybe. Others also like BitBucket.
00:14:49.016 - 00:15:26.490, Speaker B: I'm not sure about BitBucket, but they natively support ASCII docs. So you can write your readmes directly in ASCII Doc and it'll come out looking as it's supposed to. I'm not going to get into it, but there's a quick reference here at Docs ASCII doctor. Here's a little example glow comparison. I hope you can see my screen. Is this clear? I know this text, but so on the left hand side you can see Markdown and on the right hand side you can see ASCII doc. So they're very similar.
00:15:26.490 - 00:16:11.610, Speaker B: They're both very easy to use and very easy to read directly in the text format. There's slight differences. Actually, I wanted to show you something kind of neat on the aScIi doc.org site. Let me see here. So they've got this neat little sandbox where you can actually try out writing some ASCII code and it'll appear here on the right hand side. So I just took an example here to give you an example of what the output looks like.
00:16:11.610 - 00:16:59.476, Speaker B: I don't want to get into it too much. The point is just to show the basics of how you implement hierarchy, list items, notes. So what's nice, one of the things about ASCII doc is that it has these built in kinds of admonitions, notes, tips, cautions, so you don't worry about formatting them when you're typing. Like you don't need to make it bold text or anything. It's just that's taken care of in the style sheet it's got in here. As you can see, built in source formatting. And depending on the output format that you're using, there's also like source highlighting.
00:16:59.476 - 00:18:01.496, Speaker B: So you can see here in the source code I specified that this is ruby and it shows that this is ruby when you mouse over the code example. I want to show this too. One nice thing that's built into ASCII doc is we've got these code call outs, so you can type in like a number here, one, and then put that immediately after the source code example. And here's nicely, like in the actual output you've got this nice little one in a circle. So it just helps to document things within the code more easily as well. Okay, so that's ASCII doc. Now, Antora, I'm not going to go into really, but the reason I bring it up is because Antora is ASCII doc's native site generator.
00:18:01.496 - 00:18:41.780, Speaker B: It's open source, it's very actively supported, it's got a very active forum. One of the main maintainers for both Antora and ASCII doc is incredibly active. So if I have a question, I can go to the chat and post and within a day I get an answer to it. So that's about Antora. So if you take a look at the, then you know this is using Antora to generate what we see here. Any questions about that ASCII doc or Antora?
00:18:43.340 - 00:19:03.664, Speaker A: No, I just want to add that if you plan to contribute to the Cairo code and stuff on the docs, you can use the rust formatter just like there was Ruby, because most of the Cairo code is this format and styling is very similar to rust. So that's the formatter that you can use.
00:19:03.702 - 00:19:30.296, Speaker B: Yeah, you're right. I remember in Cairo zero, we actually implemented Cairo specific highlighting. But yeah, you're correct. The rust formatter, it's built in and it does a nice job. The only thing is if you highlight over the Cairo code, then it might show up as rust. But anyway, I think that's what we're using right now.
00:19:30.478 - 00:19:36.280, Speaker A: Yeah, that's what we're using right now. And it's much easier than developing your own stuff from scratch.
00:19:38.140 - 00:20:15.172, Speaker B: That is true. Okay, so now I want to spend some time talking about writing tips. Writing minimalistically. So what do I mean by writing minimalistically? There actually is something called minimalistic writing, and it has several principles. I'm not going to talk about it so much in terms of all those principles. I'm just going to go through a bunch of tips. But writing minimalistically is all about what we talked about at the beginning of when you described this talk.
00:20:15.172 - 00:21:08.536, Speaker B: It's about writing in a way that makes it easier for your reader to get in, read the document, and then get on with what they're doing. Nobody is reading documentation because they like reading documentation. So everybody is reading documentation because they want to do something else other than read the documentation. So we want to help them get to where they're going as quickly as possible. And that means we want to write in a way that doesn't make them ask questions about our writing. We want to write in a way that uses as few words as possible, and yet we want to make sure that we include all the information that our readers need, and we want to structure the information in a way that's clear and easy to digest as well. And we'll get into that more as we go on.
00:21:08.536 - 00:21:58.950, Speaker B: So let's just start. I'm just going through a bunch of tips now, or I wouldn't even say tips, I would say guidelines. So avoiding the passive voice. I put this at the first because this is one that is very, very difficult for people that are writing technical content for the first time to internalize we are so used to things like the first sentence, the service is queried and an acknowledgment is sent. And we'll kind of show an example of that later on in some real writing that we're going to review. An example of the active voice is of the same example above. So, passive voice, the service is queried and an acknowledgment is sent.
00:21:58.950 - 00:22:18.590, Speaker B: We're not saying who did anything. The active voice is send a query to the service. Oh, okay. So all of a sudden it's clear that I'm talking to the reader and I'm telling them to do something. And then I say that the server sends an acknowledgment. So again there it's clear you're not supposed to do something. The server does something.
00:22:18.590 - 00:22:51.016, Speaker B: Okay, here are problems with the passive voice. It can be ambiguous, like I just showed. It makes me ask questions. It can be unclear and hard to follow. Oftentimes, I can't say always, but oftentimes it's more wordy. And the active voice is generally easier to understand, more concise, and more direct. Now, I'm saying generally, and I'm calling these guidelines because I know that there are a lot of people right now that are thinking, but wait, what about.
00:22:51.016 - 00:23:34.710, Speaker B: And then some example, these things are generally true. What I always do when I'm faced with a piece of passive voice is I always try to convert it into active voice and see if it is clearer. I would say more than 90% of the time it is clearer. Of course, having said that, we all know that 88% of all statistics are made up on the spot. So take that 90% with a grain of salt. But it's very true that the vast majority of the time, the active voice is easier to understand. Okay, I hope I headed off any arguments about it there.
00:23:34.710 - 00:24:17.190, Speaker B: Here's an example of rewriting with the active voice. So the before is a message is sent informing you that the transaction was received. So this was in the Starkx documentation, and it made me ask questions in red. So who initiates the transaction? The user, the exchange, Starkx. I rewrote it, and I answered those questions in the finished sentence. The Starkx gateway sends you a message confirming that it received the transaction. Okay, let's move on.
00:24:17.190 - 00:25:03.712, Speaker B: I'm running through these. These are things that we could spend entire one or even two hour workshops doing, but I'm just running through them quickly, make it easy to scan. So one of the things writers often don't think about is that their writing is a product. And we want to make our product usable the same way that a user interface should be usable. And the way that we do that is to make it easy to scan. I know that for myself, and I know that good guidelines say that when people come to a page, they don't immediately start reading. They scan it first to get an idea of what it is, of what is on the page.
00:25:03.712 - 00:25:34.670, Speaker B: So all of these things help your readers to easily scan it and get an idea if this is relevant for them. Helpful titles and headings bulleted lists instead of comma separated terms numbered steps for procedures tables I'm sure there's lots more that we can do. Talk to your reader directly. So don't talk about your reader. Talk to your reader. Use the second person. That means you.
00:25:34.670 - 00:26:06.580, Speaker B: So for instance, if you're talking to the user, don't say the user sends the transaction. Say send the transaction. Use the present tense. Don't use the future tense unless you're really talking about the future. So here is an example. On the playground you will be so this is a tutorial about using a playground. On the playground you will be able to perform the following flows.
00:26:06.580 - 00:26:30.680, Speaker B: In this section we will review Starknet alpha fee mechanism. Okay? Instead, use the present tense. So on the playground you can perform the following flows. Or this section details the Starknet alpha feed mechanism. I use the same rule of thumb. If I can say something in the present tense, then I do. I don't use the future tense.
00:26:30.680 - 00:27:03.960, Speaker B: Of course, if we're talking about features that are coming down the line, then that truly does take something that's happening in the future. So not going to use the present tense for that. Be consistent. Use the same word if you mean the same thing. Different words referring to the same thing suggest different things. So on the left, here's an example. Sharp, that's the prover.
00:27:03.960 - 00:27:55.832, Speaker B: What do you call it? Starkware's shared prover is called sharp. So sharp is the off chain prover that uses an l one verifier. So we mix the terms off chain and l one. What I think should be done is either use off chain and on chain or l one and l two. So in the bottom where I says do I change it to sharpest the off chain prover that uses an on chain verifier? On the right hand side, here's an example of a description of parameters and how the first example the don't shows using different terminology for the two different parameters. So the first parameter says gets the value of first parameter of the first parameter. Sorry.
00:27:55.832 - 00:28:17.600, Speaker B: The second one says, use this command to get the value of parameter two so we can make both of those consistent. So if you see in the do they both use the same language? Gets the value of parameter one, gets the value of parameter two. Guana. See, you're talking. You're on mute. Did you want to say no?
00:28:17.670 - 00:28:19.280, Speaker A: No, I was just reading.
00:28:20.980 - 00:28:56.732, Speaker B: Okay, moving on. So, avoiding ambiguity. So this drives me crazy. People use the word may all the time, and every time I see it, I have to ask myself, what does it mean? Does it mean something might happen, or does it mean I can do something? Okay, so just use one of those words instead. So here's an example. In order to guarantee self custody of the funds, at any point in time, a user may opt to perform a forced request. So when I read this, these are the questions that come to mind.
00:28:56.732 - 00:29:41.608, Speaker B: Maybe the user might perform a forced request at any time, or doesn't mean the user has the ability to perform a forced request at any time, or the user has permission. So again, I don't want my reader to be asking questions about my writing. I want my user to get on with whatever they're doing. So just changing that word may to either might or can, and I haven't come across any other possible meaning for May. Then you're saving your user, your reader, some time and some thought on that same track. Then keep it simple. Don't use complex words.
00:29:41.608 - 00:30:25.060, Speaker B: Use simple words where possible. So, for instance, don't say utilize when you can say use, don't say wish when you can say want, don't say commence when you can say start. Um, I'm sure that a lot of people will disagree with me about this, but this is a guideline that we use. Avoid parentheses. If you're using parentheses in a sentence, then you're distracting your reader from the main point of that sentence. Is it important? Well, if it's not, then get rid of it. If it is important, then either use commas or create an entirely new sentence and let it stand on its own.
00:30:25.060 - 00:31:02.478, Speaker B: You can use parentheses as a labeling device. This is more of a stylistic thing. So, for example, see dogs, which applies to starkx perpetual, or cats, which applies to starkx spot hyperlink text. Okay, here's another one that drives me crazy. So use descriptive words or a page or section title or something descriptive. For hyperlink text, give a hint at what's going to happen when your reader clicks the link. It can be scary to click a link.
00:31:02.478 - 00:31:56.640, Speaker B: You don't know what's going to happen. Is it going to open up a new window? Is it going to take me to another place in the same window? Where is it going to take me? Am I going to stay in the same document or am I going to a completely different site? Am I going to a repo? I don't know. So in this first example, you can see the details of an early iteration of Starkneck's paymaster design here. So that word here, I have no idea what's going to happen when I click on here. So I rewrote that and I wrote it as the following. For details of an early iteration of Starknet's paymaster design, see Starknet account abstraction model part two on the Starknet community forum. So I gave the title I know I'm going to the community forum now, I'm not going to stay in this document, and I know what I'm going to see, that it's details of an early iteration of Starknet's paymaster design.
00:31:56.640 - 00:33:15.290, Speaker B: Oh well, I actually already said that, but those other things are true. And one more thing that I forgot to mention here, Google and I guess other, I'm assuming other search engines, when they do indexing, they take your link text into account. So you're actually helping yourself, not just your readers, by making your page more easy to find when you use descriptive text in your links. And this is just a general one, no fluff, avoid oh, this reminds me, I want to go back to this thing I mentioned at the beginning, that oftentimes these guidelines help you make things shorter. Here's an example of where I made the second sentence. The do sentence is actually longer than the first one, but I think it's a lot clearer and it answers your questions before you ask them. So no fluff, avoid unneeded introductory explanations like ask yourself, does this really help my user? Or am I just writing this so that I can put something here? Ask yourself if you can make a sentence more concise.
00:33:15.290 - 00:33:43.438, Speaker B: If you're writing a task, then keep it short. I actually copied these guidelines from a minimalism document that I read somewhere else. So five to 30 minutes per task. So yeah, that's a pretty big difference. But obviously you don't want to make anything too long. Limit your screen images. Oftentimes screen images, when you first do them, make things a little bit easier.
00:33:43.438 - 00:34:30.660, Speaker B: But then as soon as the UI changes, if you don't change your document along with them, then they're suddenly not nearly as helpful as they once were. Avoid roundabout expressions. Here are some examples due to the fact that and unnecessary modifiers, for example, very actual, you could usually get rid of the words very inactual without any other changes. Chunk long lists and other content into short digestible pieces. I talked about that at the beginning when I was talking about making things easy to scan. Okay, I'm rushing through this. This is a different thing, but it's very important when we're writing content.
00:34:30.660 - 00:35:24.910, Speaker B: And we're also going to kind of show an example of this here. I'm talking about something called structured authoring. And structured authoring means that the vast majority of the time when we have technical content, it can be divided into one of three types. Concepts are talking about something. So if we're talking about how to cross the road and we want to do structured authoring, then a concept might be what are roads, what are crossings? Topics that explain what those things are. And then we're going to have procedures which actually shows you how to do something. What are the things that might be relevant to crossing the road, how to put 1ft in front of another, how to use pedestrian traffic lights, how to see if the road is clear for crossing.
00:35:24.910 - 00:36:16.160, Speaker B: So these are procedures, things that you might want to write in as steps, how to do something. And then reference information are things that you want to come back to again and again because you might not necessarily remember them. Like crossing signals, a table of common crosswalk, pavement markings according to different countries, crossing laws by country. Okay, so an example of a non structured page. You know what, let's move on. And I think we're going to get into that anyway. So reviewing actual content, I'm going to drop off of the slideshow for a second, actually get into.
00:36:16.160 - 00:37:13.540, Speaker B: See, hang on a second. I got to find the window, the right window. So here. So Jan actually mentioned to me when we were first talking about this that there's a lot of interest, there's a lot of you out there that know involved in hackathons, and you've got to work on making your project as easy for the judges, not to mention users or other people that you might want to join in as developers. They only have a short amount of time to go through each project, so you want to make it as easy for them as possible. Okay, so, keon, do you want to talk about what we're looking at this project a little bit?
00:37:14.550 - 00:38:25.942, Speaker A: Sure. I also want to set a bit of context that I think why this is important, especially this section, is important for hackers. And this section is basically building on top of our previous section, which is how do you write minimalistically and what are some of the tools that are available for you to make your writing process much easier? Like ask your docs and stuff like that? One of the things that we generally face, and I have been a part of a lot of hackathons in the last two, three years, is whenever we submit a project during a hackathon, most of the outcome depends on how well we have structured our project, both from a GitHub perspective and also from a presentation perspective. Of course, it is also important how much of work that you have done in the short period of time and how you present your project, if you get the opportunity to present. But in a lot of hackathons these days, even in order to get an opportunity to present in front of judges, a quick evaluation is done. Basis what you submit online. For example, a GitHub repo.
00:38:25.942 - 00:39:32.286, Speaker A: So this is a project that we recently worked on, a team of us, and this was a project that we submitted during one of the global online hackathons. It's called validate, and basically it is a small application, which is a decentralized dating application. And the idea of this application is by one of my teammates. And it is largely dependent on the fact that a lot of dating applications these days need some form of privacy and verification. How do you actually verify that the person who's on the other side is a verified user? And then second is, what if you want to cut ties with someone altogether when things don't go well on the application, you just want to cut ties with them and you want to continue to remain anonymous. So these were some of the features that we thought were missing, and we wanted to build out an application. So this is what broadly the application is about.
00:39:32.286 - 00:40:59.840, Speaker A: I've decided to be the scapegoat for this session because we had a really short time to sort of work on the last pieces of submission. And this is why I want more and more people to watch this session as well, that it's important for you to understand how to present your content in a way that even if you have a short period of time, the content that you have, if you present it in a structured format, you have a good chance of getting through the first round of screening, at least. Like for hackathons like this, there are so many applications that they will only look at maybe like this readme, right? And in this case, the readme just has a link to the live application, which is probably not functioning anymore because we are not maintaining this project now. And then there is a presentation link which someone will have to click and then they'll have to go through. But if there was more information here, it could have been more appealing to the judges in terms of what are we building, what is the use case and stuff like that. So, yeah, let the analysis begin. So, Steve, on to you.
00:40:59.840 - 00:41:09.390, Speaker A: I think you're on mute.
00:41:14.390 - 00:41:48.970, Speaker B: I was pressing Ctrl D, but I was in the wrong window. So I just created a bookmark. Okay. So I went through this project, and after Guillan explained it to me, I had a bunch of questions. And so here are questions that came to mind when I was thinking about creating an outline for what this readme should be. So the very first thing that I'm wondering is, who's the audience for this? Is it the judge, is it the user, is it the developer?
00:41:51.010 - 00:42:45.280, Speaker A: So ideally, for these kind of projects, the first audience will be a judge. The judge could be a developer or could be a non developer, but they might be someone from the web3 ecosystem. I think it is safe turning that and then another type of user, another type of audience could be users or people who, if you publicize your project and decide to take this forward, maintain it, et cetera, could be other people who just want to come and take a look at your project. So probably, most likely for a hackathon project, it would be a Judge. But in any other case, you want to keep in mind that it's just even for general audience who may want to play around with your project, who may want to contribute to your project, or who may just want to see the code of your project or stuff like that.
00:42:45.730 - 00:43:28.860, Speaker B: Okay. Well, if it was me, I would put the judge in the place of either the user or the developer. So if I'm describing how to use the application, then I would speak to the judges as though they're the users, because they are, they're going to be trying it out. And if I'm treating them as developers, then again, I would speak to them. If I'm telling them how to clone the repo or what they need to install in order to start contributing, then I would talk directly to them. But it's still helpful for me when I'm writing it to understand. So basically, I'm not writing for a judge, I'm writing for a user or developer, and the judge will be one of those things.
00:43:30.750 - 00:43:33.180, Speaker A: Okay, yeah, that makes sense.
00:43:33.630 - 00:43:47.940, Speaker B: So then, whatever. I'm only going to include what they need to know about the project. So, for instance, if we take a look at the presentation, beautiful presentation, by the way.
00:43:48.790 - 00:43:51.540, Speaker A: Thank you. All credits to our design.
00:43:53.270 - 00:44:08.234, Speaker B: Okay. It's loading in here. So it opens up with this nice title page where trustworth. So this is really nice. That gives me an idea of what's going on here. I go to the next page and I see the validate team. Okay, that's nice.
00:44:08.234 - 00:44:34.750, Speaker B: But do I need to know that if I'm a user or a developer? Not really. So I don't really need this slide here. Problem statement for dating apps. So this is really helpful. This is helpful to me to understand the motivation for creating this thing. Okay, so maybe we want to include that on the page. Solution is validate.
00:44:34.750 - 00:45:09.680, Speaker B: Okay, so this tells me how you're going to solve. Okay, that's pretty nice. And then what's this next slide? The next slide is about the tech stack. Okay. Obviously as a user I don't care about any of this. So if you're writing this for the judges or for the developers, then they might care about this. But if you're writing for users, then this is of zero interest.
00:45:09.680 - 00:46:02.400, Speaker B: And then finally the future scope. Okay, so again, this wouldn't be, if this is really kind of something that you're going to definitely be implementing soon, then I as a user would want to know this. Otherwise it might be nice for marketing but not for actual helping to use it. So let's go back. So the things that I would definitely include for everybody, I would include the problem statement and the solution, and for developers I would include the tech stack. Now let's go back to the questions that I had. Okay, so what problem is it trying to solve with the solution? We just talked about that.
00:46:02.400 - 00:46:18.420, Speaker B: As far as a judge, I'd be wondering, did you succeed in solving the problem? Is that something ken, is that something that you would be able to say definitively during a hackathon or is that something that would remain open?
00:46:19.030 - 00:46:55.790, Speaker A: No, I think this would remain open and I think for most people this would be the case because hackathon projects are generally very small. So you can't really say like, yes, we succeeded, unless you are building a small feature on an existing product. So an existing product has a pain point and you're building something small to solve that pain point. I think in that case you can say, hey, this was a problem and we successfully built a solution. But in case you're building a product from the scratch, then I don't think you can say that definitively.
00:46:58.530 - 00:47:34.010, Speaker B: Small addition. Okay, what technologies does the project use? We had that slide. So like we said, interesting for judges, possibly for developers. So we might want to include that information in the section that's directed to developers, how does the solution solve the problem? Okay, so maybe this is connected to the tech stack, but as a judge, would this be something separate from talking about the technologies?
00:47:35.390 - 00:47:44.960, Speaker A: No, I think this will just be similar to these are the problems and validate is the solution for these problems. So something like that.
00:47:45.810 - 00:47:54.420, Speaker B: Let's get rid of that. What is innovative about the project? Do you want to talk about any of that? Is that something that would be interesting?
00:47:55.110 - 00:48:13.560, Speaker A: I think it would be interesting, yeah, I didn't think about this, but I would think that if, as a judge, if I see something that's catching my eye, like, oh, this is innovative about this project, maybe I may give more weightage to it.
00:48:15.450 - 00:48:23.850, Speaker B: Yeah. Okay. Is there anything else that I didn't ask that you think is worthy of attention?
00:48:24.910 - 00:49:26.480, Speaker A: I think this is enough information. I'm just thinking if anything else that may catch the judge's eye, like if there are any statistics from the application that are, like for example, whenever we add statistics to things like the block time of this has been reduced from 10 seconds to 4 seconds or something, that's always eye catchy. So maybe if your product is in a way that it can show some statistics, like by building this defi product, you will be able to save so much on your gas fee. Something like that. If your product is in that category, maybe it will definitely be lucrative. Because anything that is of advantage to people, they will always be drawn to that project. Like, oh, this project is making my life easy or something.
00:49:27.250 - 00:50:02.860, Speaker B: Got you. Okay, that sounds really cool. My next questions. So all these questions that I asked before are connected to concepts. We're going to be writing about the project, but we're not actually going to be explaining how to do anything. We're just talking about how it works, what we're trying to solve. All these questions that we ask are just about concepts, but the next kind of information that we want to include is the how to information or the procedural information.
00:50:02.860 - 00:51:00.990, Speaker B: What do I need to do? What can I do? So as users, what do I need? What are the prerequisites? Do I need an Ethereum wallet? Do I need any amount of ether? If I have to install it, then how do I do that? Or if it's a web app, then I need the URL. And then once I get into the app itself, how do I use it? Hopefully it's simple and self explanatory, but you should never assume that it is. So, like if we were to go into the live application. Now, you pointed out that this doesn't work. But still, we do see enough even right here. So this tells me that before I get started, I need to already have a wallet. So one thing we didn't mention at all, one thing you didn't mention in the tech stack.
00:51:00.990 - 00:51:43.370, Speaker B: I remember there was something about an NFT, but it didn't state anything openly that this is protocol, protocol, protocol. So I'm not well versed in what all these things are. Op stack mode Bayesor. So maybe somebody that's better, more knowledgeable than me wouldn't be confused by this. But I'm just reading this for the first time and this is the only thing I see that mentions anything hinting at a blockchain that I need to purchase an NFT.
00:51:45.150 - 00:51:48.540, Speaker A: The others are like blockchain protocols only.
00:51:49.890 - 00:51:54.160, Speaker B: Right. So proof of person.
00:51:58.050 - 00:52:07.220, Speaker A: Sorry, I was just saying maybe it is useful to write like that. This is a L2 protocol. This is a layer one protocol or something like that.
00:52:08.070 - 00:53:24.442, Speaker B: That'll be good. I'll say web3 related. Okay, so how to. So what are the things that I want to do? If I'm a developer, I want to navigate the repo, you need to provide an explanation of the directory structure, any special files, and if you want to invite contributions, then you need to make sure to include guidelines on how to contribute. Here's a couple of questions that just come to my mind. Do I need to fork before cloning and after looking, I just want to point out that after looking at this page where I don't see any information like that, I started clicking around and I went into the front end and I saw, well, there's a little getting started here, so we're going to work on this getting started and try to make this better. So here it is.
00:53:24.442 - 00:53:44.740, Speaker B: I copy and pasted the getting started into this document and I went through it and started asking some questions. So let's just go through kinds of questions and see if we can make this better than it is. So, getting started, what is it? Getting started. Doing what? Installing, contributing, running on your local machine. What is this getting started with?
00:53:45.510 - 00:53:49.570, Speaker A: Yeah, this one is running on your local machine.
00:53:50.310 - 00:54:21.638, Speaker B: Running on your local machine. Um, just say locally. Okay, I'm doing this really quickly, so maybe we can make this better. Okay. First run the development center server. So anytime I see this word first, this makes me wonder what's next. And if this is a procedure.
00:54:21.638 - 00:54:38.770, Speaker B: So when I see this word first run the development procedure, I want to put this, make this into steps. So I'm going to do that. But before I do that. I'd like to know, is there anything that I need to do before this step? Is there anything that I need to have installed?
00:54:42.470 - 00:54:51.910, Speaker A: Yeah, I think we should mention like install yarn prerequisites. Yeah, that's right. We should add some prerequisites.
00:54:52.330 - 00:55:04.540, Speaker B: Okay. And does that mean yarn is installed locally, globally? Or does that mean that yarn is just installed as part of the project? You don't have to know the answers to those questions. But those are like, you should be as specific as possible.
00:55:05.070 - 00:55:13.040, Speaker A: Yeah, we need to be more specific. Like we should install NPM. We should install yarn. And prerequisites like.
00:55:22.710 - 00:55:53.210, Speaker B: That means that NPM is installed. If there's a version number that we need, minimum version number, then we should say that, okay, there might be others, but let's move on. So I've got this prerequisite. So now I want to add. Remember I want to make this easy to scan. So I'm just going to put something here just as procedure. So lets me know immediately.
00:55:53.210 - 00:56:33.080, Speaker B: So run the development server and I'm going to make it clear that this belongs to this step. Hang on a second. I got to do a little playing around with Google. How do I do this? All right, I'm just doing some formatting games right now. I apologize, but I need to do this. What I wanted to do.
00:56:33.850 - 00:56:51.182, Speaker A: Yeah, I think we can just say in general that we need to format this because we have like four more minutes. We can extend it for a bit. But yeah, we should just, if you have more important points that you think we should focus on.
00:56:51.236 - 00:57:15.780, Speaker B: Understood. Okay, so let's see. So it looks like there's two steps basically here, right there's, run the development server and open your browser to this address to see the result. Okay, that's good. That's a very short procedure. Okay. But all of a sudden we talk about you can start editing the page.
00:57:15.780 - 00:57:25.640, Speaker B: So that makes me wonder, why am I doing this? Is this the same procedure or are we starting a new procedure? What are we doing by editing the page?
00:57:26.510 - 00:57:42.720, Speaker A: Yeah, so I think these procedures or whatever is following this is more like if you want to modify this project locally for yourself. So something like that.
00:57:43.090 - 00:57:56.980, Speaker B: Okay, you said you can start editing the page. Does that mean that, what's next after starting? Do you just mean that I can edit the page?
00:57:57.670 - 00:57:58.420, Speaker A: Yeah.
00:57:59.030 - 00:58:09.960, Speaker B: Okay. So I would rewrite this to be shorter. Edit the page. And I'm going to get rid of this.
00:58:15.130 - 00:58:41.680, Speaker A: It can be something like to edit the project. You can start by editing this page because it will have a lot of different pages. So this person wants to say like index TSX is the page where everything starts. So you want to start by editing that page and then you go to other pages that you feel like you want to edit and then see for yourself.
00:58:43.830 - 00:58:49.010, Speaker B: Great. So we did customizing the project and then what's this next section about API routes?
00:58:51.830 - 00:59:09.850, Speaker A: I think these are more instructions about customizing the project yourself. If you want to change the API routes, this is where you can find them. And this pages API is related to this API route.
00:59:15.710 - 00:59:21.230, Speaker B: How's that? Is that a good heading?
00:59:22.690 - 00:59:23.440, Speaker A: Yes.
00:59:24.770 - 00:59:43.540, Speaker B: Okay, so here's a good example of the passive voice API routes can be accessed on here. This endpoint can be edited. So you provide the information, but I would just rewrite it to be.
00:59:48.250 - 00:59:48.710, Speaker A: You.
00:59:48.780 - 01:00:06.300, Speaker B: Can access the API route. This is what you're saying, right? You're not telling me to do something. You're telling me how I can do something if I want to.
01:00:06.990 - 01:00:07.740, Speaker A: Yes.
01:00:11.570 - 01:00:16.670, Speaker B: And then I would say this endpoint can be edited. So I would say to edit.
01:00:21.170 - 01:00:21.594, Speaker A: This.
01:00:21.652 - 01:00:55.340, Speaker B: Endpoint, I don't know, edit pages API, you could be more explicit than that and say open it in your editor, but I don't think that's necessary here. And then you provide some information. The pages API directory is mapped to API. Files in this directory are treated as API routes instead of react pages. Okay, so what does that mean that they're treated, who treats them that way?
01:00:59.890 - 01:01:21.940, Speaker A: Actually treated is just like r like files in this directory are API basically, instead of react pages, they are treated as, it's not like who, I don't know, how do I rephrase this?
01:01:22.470 - 01:01:31.846, Speaker B: What are you trying to say here? Are you telling me how to relate to these pages, these routes, or the.
01:01:31.868 - 01:01:51.790, Speaker A: Files in this to modify? Whoever is going to be customizing the LMI routing for them, they should know that instead of react pages, these files are rather API routes.
01:01:52.690 - 01:02:15.910, Speaker B: These files are API routes? Yeah, if you're not actually telling me to do something, one way to do this is to be aware that files in this directory are API routes instead of react pages. What does that mean? This part about react pages?
01:02:21.290 - 01:02:22.680, Speaker A: Sorry, what's the question?
01:02:23.930 - 01:02:27.110, Speaker B: I don't understand this part about instead of react pages.
01:02:28.430 - 01:02:57.170, Speaker A: So react pages are like within react components, which is a front end element. So whenever you want to display something on the UI, you will create a new react page for it. So in a website we go to different pages and each of these pages could be react pages. So what they are saying is instead of them being standalone pages, these are going to be treated like each page is mapped to a route.
01:02:59.110 - 01:03:16.950, Speaker B: Okay. Oh, I understand. Okay. So beware. The files in this directory are treated as API routes, not as react pages.
01:03:18.570 - 01:03:19.320, Speaker A: Yeah.
01:03:21.050 - 01:03:31.260, Speaker B: I would leave this as are treated as, because I think it's clear enough for what you want to say. So even though it's the passive voice, I can't think of a way to make this clearer by changing it.
01:03:33.730 - 01:03:41.680, Speaker A: Yeah, that makes sense. I'm not an expert at react, so I don't think I want to take a stab at something and make it seem like it's technically wrong.
01:03:43.990 - 01:03:57.202, Speaker B: And then typefaces. Typeface. So this is more of a conceptual topic. Right. You're just explaining about.
01:03:57.336 - 01:03:57.922, Speaker A: Yeah.
01:03:58.056 - 01:04:00.290, Speaker B: That uses next slash font.
01:04:00.810 - 01:04:02.454, Speaker A: Yeah, that's right.
01:04:02.652 - 01:04:28.190, Speaker B: Okay. And I'm going to be pedantic here. I looked this up. I wasn't familiar with Google Fonts. So the actual name of the product, or I'm not sure what you call it, is Google Fonts. You can't actually say, I mean, Google's not going to come after you and sue you, but this is the kind of thing that I've gotten used to doing over the course of my career is noticing little things like that. So the actual name of the product is Google Fonts.
01:04:28.190 - 01:04:36.130, Speaker B: So I would rewrite this to be a custom font from Google Fonts.
01:04:39.030 - 01:04:41.970, Speaker A: It's Google font, is it not? Fonts?
01:04:42.470 - 01:05:08.442, Speaker B: Well, it's for this. For. I went to the Google fonts site and I couldn't find one example of them using the singular Google font. This way, when they're referring to the product, they say Google fonts. And when they're referring to individual fonts, then they just say font typeface. That's very pedantic. And most people don't need to be.
01:05:08.442 - 01:05:28.050, Speaker B: That's my job. Anybody that wants to contribute to these things doesn't really need to get that bent out of shape about it. Okay, so learn more. To learn more about next js. I think you told me this is kind of boilerplate text from the next js.
01:05:28.790 - 01:05:29.540, Speaker A: Yeah.
01:05:30.470 - 01:05:32.820, Speaker B: So is this helpful to anybody.
01:05:34.550 - 01:05:34.914, Speaker A: Or.
01:05:34.952 - 01:05:36.180, Speaker B: Can we get rid of this?
01:05:37.530 - 01:06:05.246, Speaker A: Yeah, it really depends. I'm assuming that if people don't know anything about next year's and just want to learn about it or something, it might be helpful for them. But otherwise, people who are going to come to this project repository and try to run this, they will have to have at least some basic knowledge about next js. Otherwise they won't even be able to run the project.
01:06:05.428 - 01:06:07.870, Speaker B: So we should have the prerequisites.
01:06:10.450 - 01:06:30.840, Speaker A: Yeah, but this is more like, okay, you know, something about next year's. But this is prerequisite can be have some basic knowledge of next year. And if you want to learn more or deep diver, I mean, dive deeper, then you go to the learn mode or something.
01:06:34.970 - 01:06:41.480, Speaker B: So then we could say. We could put that up here.
01:06:42.650 - 01:06:43.400, Speaker A: Yeah.
01:06:46.030 - 01:06:47.660, Speaker B: Let'S get rid of that here.
01:06:52.850 - 01:06:56.750, Speaker A: Oops. I also saw some questions coming on YouTube that I missed.
01:06:57.410 - 01:07:29.254, Speaker B: Okay, well, I think we got the point here, right? I think we've made this better. Certainly if we look at it now here, I'm just going to, I know you told me not to do this, but there we go. Now when we take a look at this page, I'm going to zoom out a little bit. I zoomed in so everybody could read it, but let's zoom out a little bit and just take a kind of a bird's eye view of the page. Okay. So now we've got getting started running validate locally. I see very quickly that there's a procedure here.
01:07:29.254 - 01:07:54.900, Speaker B: I see that. It tells me the prerequisites. I haven't read anything yet. I'm just looking at the headings and I see there's customizing the Ui and customizing the know. So without reading anything, I already have a better sense of what I'm going to see in this little getting started than I did when we started. Yes. Do you see the difference?
01:07:55.910 - 01:07:56.660, Speaker A: Yes.
01:08:01.110 - 01:08:05.640, Speaker B: So I think we made a good impact. So do you want to move on to questions now?
01:08:06.010 - 01:08:22.780, Speaker A: Yeah, there are two questions. One is by pauline. Is it better to use you straight to the reader or we as you make the whole process, including yourself, like while we are addressing or writing content?
01:08:24.030 - 01:08:27.290, Speaker B: Wait, I'm not sure I understand. Is the question in the chat?
01:08:27.710 - 01:08:31.146, Speaker A: Yes, it's in the YouTube chat. Do you see the YouTube?
01:08:31.338 - 01:08:38.640, Speaker B: No, I've got the other platform open. Can you send me the YouTube link real quick?
01:08:39.490 - 01:08:55.830, Speaker A: Yeah, sorry, I have the YouTube link, but it's not the one for public, so I'm going to share this one with you. Do I share it with you on chat?
01:08:57.210 - 01:09:00.920, Speaker B: How about if I unshare my screen and you share your screen? Is that possible?
01:09:01.450 - 01:09:20.720, Speaker A: Yeah, I can share my screen. Okay, let me share. Okay. Are you able to see it now? Oh, wait, I need to add my screen. Do you see my screen?
01:09:21.250 - 01:09:22.400, Speaker B: Yeah, I do.
01:09:23.490 - 01:09:24.800, Speaker A: Did you see the question?
01:09:26.370 - 01:10:04.666, Speaker B: Yeah. Is it better to use you straight to the reader or we as you make the whole process, including yourself, you, because it's not about you. The writer, it's about the reader. When you're having a conversation with somebody, would you talk about yourself when you're telling the person? That's what we try to think about documentation as being. We're having a conversation with our reader. So a lot of times in tutorials, a lot of writers, including myself, want to say we. Okay, so now we do this, now we do that.
01:10:04.666 - 01:10:10.720, Speaker B: Or the other. It's a general guideline that you just use the second person, you.
01:10:13.250 - 01:10:23.940, Speaker A: Okay, that's perfect. There's another one. Would you recommend a template for documenting hackathon projects since there is very limited time available to do the same?
01:10:24.950 - 01:10:46.710, Speaker B: Sounds like a great idea to me. I don't have one ready, but I think that would be really cool if you made one yourself. And I think that could help a lot of people. So you could even create just a little repo with just a hackathon template that people could come and copy and paste when they're actually doing their own projects.
01:10:47.930 - 01:11:03.630, Speaker A: That's a cool idea. And if you can share the Google Doc that you created with all of those headings and questions, I think maybe I can ask a community member, know, put up like a blog or like a repo like you mentioned, so that can be useful.
01:11:04.210 - 01:11:22.420, Speaker B: Yeah, we can do that after. I don't know if sharing this particular Google Doc is such a great idea, but what do you think the best way would be to do to share that? Why don't we take that offline? That sounds like a great idea. So, yeah, we'll address that. Are there any other questions?
01:11:23.270 - 01:11:29.080, Speaker A: Yes, there's one last how does starkware incentivize contributions from the community?
01:11:31.290 - 01:11:44.780, Speaker B: Starkware doesn't incentivize contributions to the community. We hope that the same way that community members want to contribute for the good of the community in any other situation, it's the same thing here.
01:11:47.630 - 01:11:58.080, Speaker A: Okay, perfect. So those are all the questions, and we can definitely discuss on how we can go about reading that template. That seems to be the one.
01:12:09.430 - 01:12:48.418, Speaker B: I'm not sure if anybody else is seeing this, but Gyan's screen just froze. So I think what we're saying is that we'll work on that template, not the template, the Google Doc, and try to make that available. I have no idea if I'm still in the show or not, so I see that the screen is frozen. Kean, I'm going to say goodbye and thank you very much. And thank you everybody that joined. I hope this was helpful. And you're free to contact me on Twitter if you have any comments? I'm not the most twitterific person.
01:12:48.418 - 01:12:56.900, Speaker B: I haven't really used it much, but I'm happy to if stuff comes up. So thank you all.
01:14:25.320 - 01:15:12.990, Speaker A: Hey everyone, sorry, my Internet froze so I'm just going to close and yeah, thank you everyone for joining the call today. The recording is already available on YouTube for you to check it out, so I think it should be good. And yeah, I hope if you have any other ideas and need any help in terms of technical writing documentation or you have questions on this call, feel free to post it on the YouTube channel and we'll make sure to get your questions answered. Thank you everyone. And thanks to Steve, who was able to give his time to get all of us acquainted with writing minimalistically and structuring our ideas. Thanks everyone and have a good one.
