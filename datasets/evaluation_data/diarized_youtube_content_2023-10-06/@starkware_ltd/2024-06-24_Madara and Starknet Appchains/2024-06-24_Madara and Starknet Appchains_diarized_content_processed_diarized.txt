00:00:03.560 - 00:00:21.446, Speaker A: All right, I think we're good. So GMGM. Welcome everyone. Welcome to the space. I'm Teddy, I work at Stocknet foundation. We've got a really interesting conversation set up for this afternoon. We're talking with, with AJ from Radius and Apoor from Karna.
00:00:21.446 - 00:00:42.650, Speaker A: We'll be touching on the topic of app trains, coordination layers and a bit more as we go. Feel free to drop comments either on Twitter or YouTube, wherever you might be watching from, and we'll go through them as the session goes on. But first of all, I'd like to kick off with some quick intros. Would you like to introduce yourselves, your products and what you're working on?
00:00:42.990 - 00:01:02.560, Speaker B: Yeah, sure. Hi, this is EJ, a founder of Radius. I'm doing the ZKN protocol research at Radius. Radius is developing a coordination layer to support decentralized sequencing for rollups. Thanks for having me.
00:01:04.340 - 00:01:25.690, Speaker C: Hey, I'm Apoor. I'm the founder of Carnot. Cardnot is working as a roll up as a service company for Stocknet app chains. So we essentially try to give one click deployment of chains on stocknet. And we are also one of the maintainers of Madara itself, which is one of the stacks to build app genes using Cairo.
00:01:27.670 - 00:01:57.800, Speaker A: Awesome. Welcome Doris. So let's get into the medium potatoes of the discussion. And perhaps the centerpiece of all that we're talking about is appshains. And since that is the discussion, I'd really like to know both of your thoughts on app shens, why they existed, their importance and the value that they bring to any ecosystem, not least the stocknet ecosystem approved. AJ, whichever one of you wants to go first, feel free to take it away.
00:01:58.780 - 00:02:43.124, Speaker B: Yeah, sure. I think. Yeah, I think the app chains offer many advantages. Like with full control over governance, you can set and enforce your own rules, ensuring decisions align with your community's interests. Like that. And also you can design your own economic structures, including like tokenomics and fee systems to directly benefit your users and incentivize desired behaviors and find that. So I think the, in a sense, the app chains provide like a customization, sovereignty, tailored economics and flexibility for, um, experimentation.
00:02:43.124 - 00:02:48.560, Speaker B: So making them ideal for decentralized application, I suppose.
00:02:49.820 - 00:03:37.340, Speaker C: Yeah, I mean, like, just to add on what AJ said, I think like app change was pretty much like always like the sort of like the end game, you know, like, first we started off with like bitcoin, which is like just like a dumb payments machine. And then we had like Ethereum, which was like, this is a decentralized platform and you can deploy like smart contracts, which are apps on top of it. Like the main aim over there was to show the world that decentralization matters and this thing works. And then it did work out and then realized that, you know, it's very congested and everyone is sharing the same block space. Doesn't make sense in the parallel, we already had this thing in web two where we could see that, okay, like this, this is how companies are scaling. Everyone has their own servers, everyone has their own code. Someone chooses to do it in python, someone chooses to do it in c or whatever, right? And like everyone has their own sovereign code, and that's how it works.
00:03:37.340 - 00:04:20.550, Speaker C: But in web3, we didn't have that because we started off like with the bare roots. We said like let's, let's build this shared system where we show people that decentralization works. It did work out. And now with time, we have matured the technology to like use that decentralized system, which is ethereum or like, like, for example, in the case of Stocknet, we're also leveraging bitcoin very soon. But yeah, we have developed the technology with, with ZK to leverage that security. And now it just makes sense to like go to the next step, which, which is like already there in web two. And the similar thing is how do we use that security but give everyone their own servers? So for me, app chain and like, for a lot of, like, I think people on working in the modular space app chains are basically web3 servers.
00:04:20.550 - 00:04:26.150, Speaker C: So yeah, it just makes complete sense. Take your server and start building your own like web3 app.
00:04:27.570 - 00:04:51.410, Speaker A: Totally. If I can go off a couple of those points too. I've always thought that app trains are also the end game, and perhaps it is in their name and that they're application specific. First of all, they're not these sort of generalized layers. They can be, of course they can be your generalized layers. They can be another evm on top of Ethereum. They can be another stocknet equivalent on top of Ethereum.
00:04:51.410 - 00:06:13.592, Speaker A: But primarily they create these sort of secondary block space markets. And I think specifically those block space markets being tailor made to specific features of a product, whether that product is stocknet or something similar, like you're saying, apoork, they enable that sort of horizontal scalability that we're also familiar with in L2, sorry, in web two applications. And they can be optimized for sort of application related operations. And in other words, I think what I'm trying to say for end users is that app trains are fantastic at abstracting away the many complexities that we might see in sort of our day to day interactions with applications on Ethereum, on Stocknet, on bitcoin, and what AJ is talking about here. I think the primary feature of app chains on Stocknet and with frameworks like Madara is that they provide that sovereignty to developers. They're less opinionated about how you should implement something, and they give you that flexibility to not limit oneself as a developer and to build a product that meets the requirements as end users need it to be. But I think one aspect of apptrain is that people come around to is that they often exist in isolation, and AJ, yourself and radius are doing significant work in this direction.
00:06:13.592 - 00:06:32.440, Speaker A: And I don't want to say that the word shared sequencer as sort of you mentioned a coordination layer, and I know you've touched on this, on the past, and that a shared sequencer gives a wrong impression. My question is sort of, is what you're building not a shared sequencer? And how is what you're building different in that regard?
00:06:33.340 - 00:07:28.584, Speaker B: Yeah, to answer that question, I need a bit longer, a bit explanation, and please bear with me. Shared sequencing can be seen as like a specific type of coordination. It's a mechanism to support synchronous composability between sequences of different roll ups. So from the start of our project, we've used the term shared sequencing layer. But we found out that this term led to misunderstandings when onboarding roll ups. For example, people thought that shared sequencing layer controls the sequences, or it takes profits from roll ups, which isn't true. So we are here to support roll up sequencing in fraud environments, both economically and operationally, without interfering with their sovereignty or revenue.
00:07:28.584 - 00:08:37.262, Speaker B: So we decided to use the term coordinator layer instead. So radius is developing coordination layer to support decentralized sequencing for roll ups, aiming to enhance user experience. Let me start by explaining why decentralizing the sequencer is key for better ux, and why coordination mechanism is essential in this process. So decentralization here means that three things, censorship, resistance, liveliness and safety. Currently, most roll ups depend on a centralized sequencer, so users have to trust that this sequencer won't do anything bad like sensor transitions or performing sandwich attacks. So beyond that, trust users have no fallback. So in terms of liveness, some recent layer three app chains have had a downtime of up to like 53 hours, meaning users must trust that centralized sequencing will stay up and running.
00:08:37.262 - 00:09:37.360, Speaker B: Lastly, for safety, when you send a transition to the sequencer, it promises to include it in a block and post it to ethereum for finalization, but there's currently no way to enforce that promise. So the need for coordination is clear. When you look at to look at how transitions moves from roll up to ethereum, when you start transitions on roll up, multiple actors are involved, like the sequencer, proposer builder and prover. So unlike centralized sequencing radius, coordination layer enables these actors to communicate in a trust minimized way. So for example, shared sequencer is, as I said before, a coordination mechanism to support this synchronous compatibility between multiple roll ups. So we believe that our coordination layer can help roll ups achieve decentralized sequencing in a trust minimized way, leading to a better user experience.
00:09:40.550 - 00:11:15.480, Speaker A: Awesome. I know one aspect that you've mentioned to me in the past, and I think it's really interesting. You've mentioned the importance of an ecosystem like stocknet, like Ethereum, being unified and being unified on the end user. And at the moment, like you've mentioned, there exists many different entities, each who have their own incentives, their own priorities, whether they are a layer one, proposer developer, L2, layer three, and so forth. That indeed causes that fragmentation, not just in terms of liquidity, but also user experiences, cultures, visions, but also, in my opinion, inbound innovation. And with a coordination layer like what you're developing, it really, in my opinion, enables that research and development, that collaboration, that working, that work towards that asynchronous composability of rollups, but also that sharing of a vision specifically related to users and building good products for those users. And in terms of coordination, I'm really excited about how this introduces that ability to have that inbound innovation, to help that knowledge disseminate that knowledge come into the ecosystem, that knowledge disseminate, and to help all parties who are using Kano or using auretus to find new features to build fantastic products, and to build an ecosystem that is sharing that common vision around a specific user.
00:11:15.480 - 00:11:30.510, Speaker A: I don't know if you want to touch a little more on that coordination between specific entities, but I think it's a really exciting arena. Do you have any, any thoughts, opinions on coordination layers?
00:11:31.890 - 00:12:47.994, Speaker C: I do. I mean, like. So basically, I think one very interesting thing about the shared sequencing thing is like how it, it sort of enables synchronous composability, and which I agree is like very important in some certain scenarios. But I also do feel that a lot of the interesting use cases can be solved with like asynchronous composability in the like. For example, I think Vitalik also had a very recent tweet about a similar thing where when it comes to like the UX problems in a fragmented app chain space, I think if we, if we solve asynchronous like composability with good abstractions on the front end side, we can create very good experiences, obviously, like not all the experiences that come with like something like synchronous composability, because then you have to rely with something like radius, for example, if you want like instant, instant price updates from a pragma chain, you might end up using a shared sequencer like Radius. So I think that's a place where I really feel like shared sequences will play a very interesting role when it comes to the decentralization part of it. I'm a little like my thoughts over there, and I would love to get Aegis views on this as well, is for me, a lot of these app chains are startups.
00:12:47.994 - 00:13:21.546, Speaker C: You just start something. You want to have a lot of training wheels in the beginning, and slowly with time, you remove the training wheels. I do agree, and I see the vision where in a decent, like, you need to have a decentralized sequencer set because it has its own advantages. Right? There's no arguing in that. But what I do see is that just in the beginning, there are like the disadvantages. The cons of like starting as a decentralized space might be too high for someone to consider, which is why we see most of the chains today start in a satellite setup. But I mean, I'm curious to know what AJ, what you think.
00:13:21.546 - 00:13:28.110, Speaker C: Is it possible to have those training wheels and still tap into some level of decentralization? Or maybe you have some different views on this.
00:13:29.810 - 00:14:29.426, Speaker B: Yeah, so that's why actually we applied this encrypted mapple thing. Because using an encrypted mapple to prevent this centralized sequences malicious behavior is a way to achieve both scalability and decentralization. Another way to stop add behavior on the sequencing side is to introduce consensus, but it's really somehow compromised scalability some extent, which is really crucial for app change. So with our example and our decentralized sequencing method, app change actually can benefit from some sort of centralizing sequences while preventing this censorship and harmful MEV extraction can be prevented on the user side. So that's why we using this kind.
00:14:29.458 - 00:15:01.450, Speaker C: Of thing is definitely something very interesting, but you can sort of prevent some sorts of MEV with that. Also, I would like not exactly mix it with decentralized, because like this won't technically solve the lightness problem, which you mentioned. It's still centralized and you still will have, for example, like the lightness issues, but it does solve, I think, a big problem, which is the MEV thing that you mentioned. And I agree that even in the setup of like a centralized setup, even if you want training wheels, something, having encrypted members is like a pretty good offering.
00:15:02.510 - 00:15:49.330, Speaker B: Yeah, sure, I totally agree. We'd like to remain like a leader based sequencing. So one leader, one like we can set up like a sequence of sets, and then one sequencer can be selected as a leader. This leader will build a block and then issue pre conformation for users. And then while these another sequences, which are kind of followers to sync up this whole blockbuilding progress, why, when this leader crashes or stop working, that's how we provide this liveliness for app chains. So we'd like to achieve this scalability with liveliness or decentralizing thing as well. That's our approach.
00:15:50.870 - 00:15:51.662, Speaker C: Anderson.
00:15:51.766 - 00:16:31.720, Speaker A: Yeah, I think MeV is an interesting topic for numerous reasons. It's sort of a feature nobody asked for, but certain users in certain ecosystems continue to benefit from it. I also see no reason why MeV can't be a good feature for a lot more people. But I think what AJ is talking about in terms of encrypted mempools and censorship resistance is incredibly important for the vast majority of end users in any ecosystem. And it's a really awesome environment to see in the stucco ecosystem. Specifically, I want to transition a little bit over to Kanar and yourself and poor. But before we do that, while we're talking about ad trends here, it's almost like we're talking about we're not addressing the elephant in the room.
00:16:31.720 - 00:16:44.040, Speaker A: And that is specifically Madara for you and your team are significant contributors to Madara. Can you tell us a little bit more about it, why it exists and why it's so exciting?
00:16:45.020 - 00:17:35.485, Speaker C: Sure, definitely. So basically, in one line, Madara is the only, I won't say the only, but it is one of the very close to production stacks, close to being production ready stacks that allow you to launch app chains using the stocknet technology. So when I say stocknet technology, I mean like using Cairo as your, as your language, you can use the same stone prover and like all the other advancements that like Stocknet is coming up with like parallelization, applicative recursion. So basically, like all the advancements that you get with, with stocknet and all that tech in an open source format is madara. But at the same time it's modular, right? So you can, you can make the advance, the changes that you need. For example, you can add encrypted mapping and in fact we already have the radius integration with Madara. You can have like autonomous palettes which the pragma team is working on, and like multiple other things.
00:17:35.485 - 00:17:48.220, Speaker C: So it's basically a framework for you to go ahead and like build your own app chain leveraging Cairo so that that's madara in like a brief on.
00:17:49.760 - 00:18:33.266, Speaker A: Awesome. I totally agree and I hope I don't go off on a runt here. I might, but if I do start to digress, let me know. I think Madara is super interesting for two main reasons. The overarching reason is that it provides this sort of fertile earth for both inbound and outbound innovation. For inbound innovation, it's about teams and developers coming in and bound into the app chain space, into the Stockland ecosystem with Madara and having that sovereignty that we're talking about over the tech stack, choosing how that app chain operates, whether that the opcode the VM is using or whether it's an entirely new vm itself. Developers need not be constrained by a specific vm if it's not the right one for them.
00:18:33.266 - 00:20:03.278, Speaker A: I think a prime example of someone who is developing an EVM in Cairo that is not the Cairo VM specifically, but is Kakarot and the development of the ZKE EVM in Cairo. But there exists so many evms out there, whether that's your solana virtual machine, whether that's a UtXO related VM or another vm that best suits your product. It's a huge feature that I think is incredibly important for developers to really hone in on and help them build a product that makes the most sense for their users, not least the permutations of Madara itself, whether that's a the consensus layer, whether that's the alternative data availability layers, whether you want to implement native account abstraction, custom fee tokens, no fees, the list goes on. I think it's incredibly important, Madara in part being a source of that inbound innovation, not least for research and development and building great product, but forming that sort of single arena for collaboration as the intellectual capital of the ecosystem continues to grow. For outbound innovation, I think it's similar, but other interesting topic and I think outbound innovation really, how does the knowledge in this ecosystem disseminate across the entire web3 sector? And so with that sovereignty of Madara Stack, you can build layer threes on stock. Brilliant. What else can you do? You can take Madara Stack and you can deploy it on ethereum and have a L2 on Ethereum.
00:20:03.278 - 00:21:07.196, Speaker A: Fantastic. What else can you do? You can deploy it to other EVM ecosystems. And what we're talking about recently is sort of starting as a rollout to both bitcoin and ethereum. So it's difficult not to imagine Madara diffusing across the bitcoin space, manifesting as bitcoin layers two, not least perhaps with a radius coordination layer to help that asynchronous compatibility across them all. And sometimes I like to now begin to digress a bit, but I like to rephrase that sort of that saying that software is leading the world, but rather say starknet, Madara and Cairo are eating the world, right. And while that original phrase, I think, looked towards more of how software was taking up the value chain associated with industries that were primarily existing in the physical world, since you're arguing that software is revolutionizing traditional industries by automating processes, creating new business models, I think very much the same for stockinette, Madara, Cairo, rhodias and Kano as well. They are eating the world.
00:21:07.196 - 00:21:59.150, Speaker A: And that these stacks give that developer the sovereignty they need to focus on users, not redevelop the wheel like a lot of teams continue to do, and succumb to the shortcomings of doing so. I think that Madara, with Carnot and radius in particular, they create that framework necessary to start, like you mentioned, approved. They are startups themselves. They are businesses. And it helps us force more of an entrepreneurial aspect into development to focus on a real end user, like what AJ is talking about in terms of sharing a vision and uniting around a user. That said, can you give us a bit more information on Carnot, how it works with Madara, and why it's a significant piece of value for the Stockholm ecosystem.
00:21:59.690 - 00:22:45.432, Speaker C: Definitely. And first, I would actually like to add on, on, like, the thing that you mentioned about, you know, like, Madara giving you the power to, like, develop whatever you want. And like, we're trying to say, you know, like, a lot of times when we are, like, doing things here at Cardinal, we do take analogies with the web two world. Because even though, like, the web two world is, you know, like centralized and everything, in terms of, like, devex, in terms of optimizations, it has, like, solved a lot of the problems that we today are, like, solving in the web3 space. And at the end, it's distributed computing. It's not like people weren't doing distributed computing before web3. So essentially today, the reason I said that is because, for example, in financial markets, everyone knows order books are very, very, it's the most efficient way to do your trading.
00:22:45.432 - 00:23:17.900, Speaker C: And we know in terms of games, we know that the tech today is at XYZ level, which makes such XYZ games possible. But when we, when we're seeing on chain things today, we see people take compromises because of the tech they're given with. Right. We see people go with amms, not audit books. We see people making like very, very basic games and not like how we see today, like high graphics or maybe, you know, like high interaction games. We don't see them coming along mainly because we're constrained by the amount of compute we're getting. We're constrained by the amount of cost that we have to pay, which is limiting experiences.
00:23:17.900 - 00:24:18.630, Speaker C: And Madara is like that door for all these apps to forget about all those constraints and just build things that have the best experience. But at the same time they get the security of, you know, like being decentralized or like get the security of whatever the base that they're settling on to. And yeah, we can go into like definitions of roll ups and all, but that's like a big rabbit hole. But yeah, I just wanted to add that. And about Carnot, like, I forgot to talk about it, but yeah, like, what we do at Carnot is that we are like a one click deployment solution for our app chains and we want the development, the development process for all developers to be extremely seamless. We don't want developers to care or think about how to set up your nodes, how do you manage the scale, how to do the monitoring, how to do the alerting, because running these chains and managing millions of dollars of funds, if not billions, is not an easy task. And especially when you're starting up, you don't want to care about these things and you want to focus on your business logic and you want to just cater to your customers.
00:24:18.630 - 00:24:50.708, Speaker C: So what we pitch to our customers is that let us handle all that for you, so that you code your business logic, you focus on your marketing and business and like just corner will take care of the rest. And coming back to the web, two analogies, like an analogy we like to give over here, is worse than next year's. So if you, if you have used, if you have done full stack development before, you have high chances, you have used these two things. Where next JS is like an open source framework to build front end applications, very optimized. Anybody can use it. It's completely open source. And that's how we say, like that's.
00:24:50.708 - 00:25:13.920, Speaker C: How we like to talk about madara open source. You want to run it yourself? Go ahead and do it. And it's a ZK roller based framework and carnot is a one click deployment solution. Just like how Versailles. So anything you build with next J's, if you want, you can use Versailles to deploy it in a single click. And that's how we like usually picture ourselves in this space and that's how we see our role as well.
00:25:15.980 - 00:25:16.380, Speaker A: Awesome.
00:25:16.420 - 00:25:36.400, Speaker C: I think that, like to add. Yeah, I would also like to add we are actually doing some very interesting things which I would like to cover down like later in this, in this talk around like improving developer experience, like, which is not exactly, which just works for Cairo, not specific to Madara, just improved developer experience for, you know, like development in the space. But yeah, just wanted to put that out as well.
00:25:36.780 - 00:26:16.050, Speaker A: I think, I think you're, you're right on the money here. And that developer experience is part of the reason why developers continue to struggle to onboard into web3. Not least people who want to build products for end users haven't been able to do so yet. So I think this is perhaps a question for both of you in terms of what do you think that sort of requirement is? What needs to be done to improve developer experience to onboard the next 10,000 developers into web3? The next 100,000 developers to be building actual products and businesses in the ecosystems like Stocknet, Ethereum, bitcoin.
00:26:17.670 - 00:27:15.620, Speaker C: So, okay, so I can take that up one first. So what something that we are working on that we have realized in our experiences in developing with Cairo and the stock ecosystem in general is not even stocking, I would say in general, in the web3 ecosystem in general in development is that it's a, it's sort of different than the normal web3 development, right? Especially if I talk about like the normal developers who are, you know, like not experts. Like in web two, how it works is that, you know, like I, let's suppose I'm using node js, I just write my code in node JS, I call my functions one by one. If I'm writing a backend server, I'll probably use something like Postman, right? So I write my code, I write my APIs and then I use postman to interact with my code. And then I just, you know, like if I'm using a database, let's suppose I'm using SQL, right? Mysql. So I go to MySql and just check, okay, are the values changing as I expected them to are my APIs responding the way I like them to? That's how mostly people, you know, get started with. And the experts probably go ahead and write test cases for each of their functions.
00:27:15.620 - 00:27:54.516, Speaker C: And they just test everything with their test cases. They don't need to run up postman or they don't need to interact with it. So essentially today, I think in the stocknet space, we are at the test case point, which is like the easiest way to get started testing your contract is to write these test cases, which is okay for Cairo experts, but a lot of people are getting started. It's a pain like understanding how to write these test cases is a pain. If I just want to quickly get started and see if things are working, it's not an easy process. I need to probably write my Cairo contract. I need to then fund my wallet, then I need to declare it, then I need to deploy it.
00:27:54.516 - 00:28:45.802, Speaker C: It's a big pain for a new person coming from the web to landscape. First he has to understand these terminologies and then he has to go ahead and test these things out of. And now let's suppose that, let's suppose I was writing a swap contract. So I created a liquidity pool, I added liquidity, I swapped, and I realized my swap isn't working. And now I change my code, compile it again, again, declare it again, deploy it again, set up the liquidity pool, and do all those things again to check if my swap is working fine, or obviously I write the test case for which I need more prerequisite knowledge to do that. So what we're trying to do at Carnot is really, really make this experience better. When I say make this better, the experience that we are aiming at is you just open your scar sn foundry, whatever, and you go to your configuration file and you add this specific config for our explorer.
00:28:45.802 - 00:29:19.820, Speaker C: So we are making a dev explorer from now. What happens is that whatever code you write, the moment you save it, we automatically compile it and deploy it for you at the same time. We show you a good interface where you can see all the functions of your contract in a very similar to Postman style thing. So, you know, like for developers, it's like they're interacting with Postman and you automatically have APIs for your contract. So every external function that you write in your contract becomes an API and you can interact with it. And once you interact with it, you can see the results. And this, we are trying to do something like a database as well.
00:29:19.820 - 00:29:55.422, Speaker C: So like you can see the interactive entire contract storage like a database. So we are in talks with like stockware to understand the VM structure for that. We had some good insights in our last conversation and we think it's possible, but I don't want to commit on it like before. We actually go ahead and try it out, but we think it's possible. So we can, we think we can actually emulate the experience where you know like you make changes in your contract, you save them, we immediately show you these are the APIs of your contract. You can interact and see changes in like a mic SQL database of your contract. Now if you figure out something is broken, you go ahead and make those changes again, save it.
00:29:55.422 - 00:30:30.550, Speaker C: And we make sure that we replace the same contract, but the storage is still the same. You don't need to even like set up the liquidity pool again. You don't need to do all those things again because the storage is persistent and you can just test the new logic again like you were doing it with Postman. So that is like the experience that we are trying to build over here. Obviously it's going to take some time to materialize, but we think that we have a lot of the engineering sides of these things figured out, at least at a theoretical level. Once we start implementing them, we'll see where can we get in the v zero and the v one. But that's definitely one thing that we really want to do to make the Cairo development very easy.
00:30:30.550 - 00:31:06.320, Speaker C: Another thing I would like to say about getting the masses to web3 is I think there's been a lot of attention towards getting normal programming languages and normal web two languages becoming provable. So you can just use them out of the box, for example rust or WaSM. So you just use these already mature stacks and you just make them provable. So people don't really need to learn a new language like Cairo and JavaScript. So I have my views on that. I think that's a very interesting use case. But the first thing I would like to say is that for example, you're talking about provable rust.
00:31:06.320 - 00:31:51.078, Speaker C: Then Cairo is already very similar to the rust, you know, like if you want to write smart contracts and rust and you want to solve interoperability between these smart contracts, then you anyways need to build a framework or some crate on top of rust which you expect everyone to use, right? And at that point in time, like it's like either you learn how that framework works in rust or you can learn Cairo because they are like already very similar. But I do think that there is one advantage in having existing languages provable like rust. And that's like the extensive library support. So there is like, for example, like if I want to build like a chess game, I can just import an existing chess crate which handles all the chess logic for me. Like it tells me when a checkmate has happened, it tells me if this move is legal or not, and so on. Right. So I think that is very valuable and those are.
00:31:51.078 - 00:32:29.690, Speaker C: And I think that that can really help to get a lot of developers. But like, if I think about, you know, like the scope of that in Stocknet, then I think one is, I think that there has been exploration about actually integrating rust itself in Stockman. I think it's very early. I think even stockware or Stocknet hasn't really come up to an answer to that. But I think it's definitely a possibility where, you know, like we could technically maybe write like LLBM in Cairo or wasm in Cairo and make these provable as well. Or the second thing is one of the teams, I'm forgetting the name, maybe you can remind me. But one of the teams built a rust oracle.
00:32:29.690 - 00:33:04.906, Speaker C: So Cairo today, sort of like, I think there's some final integration left, but once that's done, you can technically have Cairo use normal rust as an like in the form of an oracle. So it would be like your Cairo code can call an oracle which says, run this rust crate and give me the output and you get the output like you do. So it's rust hints, basically. Like we used to have python hints in a Cairo zero. So now you can have rust, hence using this and I think cartridge from katana, the cartridge. We're trying to integrate this with katana as well. And again, this is an amazing place to explore in app chains.
00:33:04.906 - 00:33:13.270, Speaker C: Right, because Stockland might not do this anytime soon or they might not do it at all. But if you want this, you can do it in app chain and you can like integrate it today because a lot of the code is already available.
00:33:15.730 - 00:33:17.990, Speaker A: Totally. Do you want to add anything to that?
00:33:18.770 - 00:34:19.662, Speaker B: Yeah, I'd like to explain like how this, our coordination layer benefit this stackman app chains from the perspective of app change developers. So our role of so appchains were introduced to achieve this better scalability while inheriting decentralization and security from Ethereum or starklet. So this is really indeed very promising approach. But however, like developing DApps based on a smart contract, there are a few additional considerations. So one of the biggest challenges is the need to run sequences independently. This incurs operational costs and to create economically a sustainable roller network, it's really essential to secure revenue to support these costs. So currently, the majority revenue comes from the user's transition fees.
00:34:19.662 - 00:35:42.680, Speaker B: But radius can provide additional revenue sources through its coordination layer, helping rollups build a more robust ecosystem. By solving these operational issues, roll ups can focus solely on developing their business logic, leading to the creation of more roll ups and ultimately achieving the scalability goals for Ethereum. So how does the coordination help generate revenue? As mentioned earlier, multiple actors are involved in the process of finalizing transactions on Ethereum from rollups. There are three scenarios where a coordination layer between these actors can help generate revenue. First, since these users are the primary creators of value, preventing the attrition is really crucial for roll ups to sustain economically. So by coordinating encrypted mapple and pre conformations between users and sequencers, we can prevent user attrition by avoiding censorship and sandage attack. Secondly, coordination between sequences and proposes can capture opportunities like a cross domain Mebanese when building blocks with each domain.
00:35:42.680 - 00:36:33.090, Speaker B: For example, a shared builder can guarantee atomic inclusion or atomic execution by simultaneously building blocks in two domains. Lastly, when sequences from different roll ups build blocks, coordination between these two sequences can capture opportunities like a cross roll of mev based on synchronous composability. So these are all related to sequencing. So through decentralized sequencing, shared sequencing, or even based sequencing, we can aim to help all roll ups achieve economic sustainability within the decentralized economy.
00:36:35.670 - 00:37:17.974, Speaker A: Totally. I think there's one other devex improvement that I could, I could name, and that I think we should talk about while we're all here. And that is the devex improvement of any Carnot radius collaboration. I think it would be wrong not to talk about here, because I think it's also a huge devex improvement that can be offered to developers in the ecosystem. And those who know me would find it funny if I didn't talk about toolkits or toolkit theory in any sort of conversation. And what that really means is that toolkits, the more toolkits can be layered together. For example, radius's coordination layer, madara, carnot, darknet, Cairo.
00:37:17.974 - 00:38:03.600, Speaker A: Each of these are toolkits themselves. Not necessarily that they are SDKs, but toolkits are institutions that formalize specific interactions or features. And the more these toolkits can be layered together, the more emergent products, the more emergent new business models can become. And that's one of the reasons why I was really excited to have this talk specifically about coordination, particularly about rollup as a service Madara Cairo, Stocknet, but specifically also on developer experience. Could you both talk a little bit about any sort of potential carnot and Rhode is collaboration that we might look forward into the future and see and how that can also improve developer experience in the Stockman ecosystem?
00:38:04.540 - 00:38:38.440, Speaker B: Sure. I will go first. Madara. It was the first roll of SDK that Radius actually integrated our features like encrypted Memphis and shared sequencing. So actually we have our own version of Madara that our features, so anyone can use our features as well. And then right now we are in a progress with collaborating Carnot to support Carnot's ROS provider that any, like any app change, who wants to build.
00:38:40.460 - 00:38:40.772, Speaker A: App.
00:38:40.796 - 00:38:54.000, Speaker B: Change with encrypted mapple or any certain features from radius, they can choose like some, some kind of options when using car notes. Those kind of collaboration are happening at this moment.
00:38:55.900 - 00:39:42.966, Speaker C: Yeah. To add on, like, like what I just said, like we're already like, their team was like one of the first teams to, you know, like integrate their stack with Madara and they've been here since the start. And we would, at Carnot, we would love them like to be there as shared secretsing solution and an encrypted member solution, like to any of the app genes. And like if anyone wants to, anyone that's using Carnot, we would like do our best to integrate them with radius and id the process. We want to make it very easy as well. So one interesting thing I think where I like to learn from is what paradigm is doing with REt. I think they have implemented this thing called Xx, which is like extensions on top of RET, which is like very interesting on how anybody can come up and build extensions on top of the Ethereum node to add on its into its capabilities.
00:39:42.966 - 00:40:38.086, Speaker C: So we actually got a lot, some of that benefits out of the box with substrate and the pallet structure where you can just add any new, you can either use existing pallets and you can also create your own palette, something what pragmatic pragma created its own autonomous palette that just sits on top of madara, integrates very well with the stocknet palette and it's provable. So you get autonomous contracts and that's something similar. We want to do with radius as well as we want to create a madara extension repo, where you have a list of all the palettes and you can just choose which palette you want to integrate and it just plugs into your code base and you get this like abilities out of the box. So it's like an extension marketplace, but yeah, like, like you might be aware as well. Like now there's this discussion about dropping off substrate, so that's interesting. Let's see how that plays out. But this is something we want to do, whether it's in the form of pallets and substrate or we, you know, we come up with an format of it.
00:40:38.086 - 00:40:51.090, Speaker C: But that's the idea. Like there should definitely be an integrations and an extension marketplace that makes it very easy to people, for people to, to add on to extensions. And it just, it's like a drop. Like you just pick it up and drop it in.
00:40:53.630 - 00:41:48.684, Speaker A: Amazing. Before sort of heading towards the end of the talk now, if anybody has any questions, feel free to drop them below the stream and we'll get to them as they come up. One question that I wanted to answer from a good friend, Robert, about what would you suggest for companies and projects interested in building private app chains? I think not just private app chains. Private app trains are incredibly interesting. And those interested in building private app trains on Stocknet should check out Garaga. Garaga allows for the efficient verification of foreign proving systems in Cairo. But one thing I would like to mention specifically around, if anything has spiked your interest in this call now, anything we've mentioned related to Radius and their coordination layer towards carnot and building app train with Madara.
00:41:48.684 - 00:42:23.390, Speaker A: If anything has sparked your interest at all, I would encourage you to look towards the foundation. The foundation runs grant programs for developers building in the Starknet ecosystem. I see Grant being the flagship program at the moment for early stage teams looking to take their first steps in the stocknet ecosystem. So if anything is sparked your interest, don't hesitate to get in touch. We'd love to hear from you and you're more than welcome in this ecosystem. So my DM's are open. If you're interested in talking more to ApuV and OJ, do reach out to them as well.
00:42:23.390 - 00:42:42.400, Speaker A: I know they'd be happy to collaborate and bring you into the stakker ecosystem as well. But like I said, do drop any comments below the stream and we can get to them as well. With that said, in the meantime, AJ, Apu, do you have any sort of closing thoughts or anything you'd like to mention as we head to the end of the talk?
00:42:43.660 - 00:43:43.294, Speaker C: Yeah, I mean like just something very similar to you said. Like what you said, happy to help anyone to whatever extent it's possible, right? Whether it's carnot or whether it's just Madara, feel free to connect. I really, really think that like every app eventually is going to become an app chain because that's what just makes sense. But even if you want to debate that, my DM's are open, would have to like always open to like have a lengthy conversation and learn. So feel free to dm me regarding any sort of help and how to start an app chain. Why do app change make sense? What is at least all belief and any sort of like development help and like, like we did announce like some time ago, like obviously there are these seed grants that you get from the stocknet foundation to get started with, but Karnaugh would like to club with that and you know, like give free hosting to everyone who wants to like just develop with Madara and get started. So if your concerns is how do you get started, how do you run the node and everything, we can do that entirely for you so that you can, you can just test it and you can see if it works for you and then we can move it forward from there.
00:43:43.294 - 00:43:45.010, Speaker C: So feel free to reach out.
00:43:47.590 - 00:44:28.680, Speaker B: Yeah, we also like, we'd like to meet as many app chains as possible because we want to help these robot projects, Appchain projects to deploy the network quite easily. So please don't hesitate to approach us. We can help you to build this kind of app change stuff with the sequencing or if you want to know this about whole, the sequencing thing are happening in like community or anywhere else. Just feel free to approach me to explain everything. I'd love to have a conversation with you.
00:44:30.540 - 00:45:04.920, Speaker A: Brilliant. And I believe we'll all be in Brussels in the coming weeks, so if anybody wants to meet up there, I'm more than happy to, I'm sure poor as well. So don't feel, feel free to hesitate. Don't hesitate to get in touch with us. I'd love to meet up with anybody interested in building an Astrakhan ecosystem, specifically if you're interested in applying to the foundation's grants programs. With that said, I think we're free to close out the call with no further questions. Approve AJ, many thanks for joining me this afternoon.
00:45:04.920 - 00:45:10.280, Speaker A: Really glad to have you here and take care and enjoy the rest of your day.
00:45:10.760 - 00:45:12.936, Speaker C: Same to you, and thanks for having me.
00:45:13.128 - 00:45:14.980, Speaker B: Thank you so much. Hi.
00:45:15.760 - 00:45:17.920, Speaker A: Yeah, bye.
