00:00:03.270 - 00:00:26.450, Speaker A: Hi everyone. Welcome to this panel, to this world, to production on Starknet. Panel, glad to have you there. I'm Abdel from Starkware exploration lead. Sorry. So we will talk about the difficulties of going to production. Like bring the lifecycle of the project.
00:00:26.450 - 00:00:42.550, Speaker A: You start with an idea, then you develop the project. And then there is a huge gap before going to production. So we will try to cover this gap and see the main challenges and difficulties. But first I will let the panelists introduce themselves briefly.
00:00:44.330 - 00:00:56.040, Speaker B: Thanks a lot for the intro. So I'm Eddie, CEO of Shardlabs Exeterium core dev, and now mostly working on talking on panels and stuff like that. So yeah, that's a short intro.
00:00:56.510 - 00:01:08.640, Speaker C: Hi everyone, I'm Thomas, I'm founder at Netamind. I spent the last five years working on Ethereum, last three years somewhere close to the Starknet ecosystem. And nowadays I'm also at the Starknet foundation board.
00:01:10.450 - 00:01:20.770, Speaker D: Hey, I'm Julian. I work at Teodo. We help our clients build digital products. I'm a product owner, so I'll be the non tech guy of the panel. And I work with Elias.
00:01:21.670 - 00:01:28.290, Speaker E: Hello. Hey everyone, my name is Elias. I'm a software engineer at Todo as well and currently the project lead of Kakarot.
00:01:30.250 - 00:01:49.420, Speaker F: Hey, in the community I'm known as Fresh Pizza. So I'm sticking with that name for now. I would say I'm an independent developer on Starknet now for I think it's close to one year, working on a variety of projects, a lot of open source stuff, but also just like tinkering on my own.
00:01:50.030 - 00:02:11.810, Speaker A: Okay, thank you. Actually I think I will start with a question for you specifically before talking about the challenges for project to go to production. I would like your opinion as an independent developer on the ecosystem of the current status of the project. Of the ecosystem. Like the Dapps on Starknet. What's your current opinion about the status?
00:02:12.630 - 00:03:05.154, Speaker F: I think there's a big difference between Mainnet and maybe Testnet. I think on Testnet there's a lot of things to try out for users and a lot of the experimental stuff is still there. And on Mainet it's quite limited to, I would say, very simple applications. It makes sense, of course, because most people still expect big changes to come with Carol. One for example, I think most applications that you look at with some examples, for example, I think brick is one of those that are a bit bigger that I've been building for a while. And I wouldn't call the application simple, but if you look at the, I think one example that is well known as like d phase space. I think they're like three amms that are now live and they're all on the stage of like uniswap v two, which is, I mean, v two was deployed what, four years ago or something.
00:03:05.154 - 00:03:20.780, Speaker F: Now, two years ago maybe on theorem. Right. So I think it makes sense to that extent. Right. So it's very simple, very limited domainet. But yeah, on testnet there's a lot of fun things going on and a lot of stuff in stealth. Yeah.
00:03:20.780 - 00:03:24.442, Speaker F: Is it a different direction? You're also thinking, no, that's fine.
00:03:24.496 - 00:03:25.100, Speaker A: Okay.
00:03:26.750 - 00:03:43.694, Speaker F: Yeah, it's a broad question. Right. So you can go into other things, like if we talk about standards or communication documentation, but I don't know if that's something we want to go into now or we can probably go back into that later on.
00:03:43.732 - 00:04:07.046, Speaker A: Yeah, I think there are different categories of difficulties for project, but maybe we can start by external difficulties, like building on a protocol that itself is not yet stable and mature and it evolves quickly. So maybe we can tackle this part first, like external difficulties related to building on a protocol that is evolving fast. If someone want to jump on the.
00:04:07.068 - 00:05:02.586, Speaker C: Topic, Thomas, please, I think I'll pick this one up, because we've been building a lot on Ethereum, and as you know, it's still evolving and still unfinished, which means that this is very important message for everyone. Building on Starknet, you always have something to wait for, and there will always be something just one or two months away from. And I went through that, people were telling, never mind that there is no sense to build ethereum client because soon there will be ethereum two and the Ethereum execution layer will be the commissions. Right? So you may hear this talks about discouraging talks that there's no sense to build in Cairo 0.1 because it will be the commission and so on. But the journey of the builder, of the founder is to keep learning. And when you built in one, you learn about the ecosystem, about the tooling, about the deployment, about the account abstraction and so on and so on.
00:05:02.586 - 00:05:28.000, Speaker C: And it doesn't matter if you just throw away the codes, whenever you throw away the code, you don't throw away whatever you've learned about. So I think this is the way of building in the ecosystem. Just keep building whatever tooling is available, built with what is available. Don't wait, don't pick up only the shiny things. Actually, the more established, even imperfect thing is there. Build on it.
00:05:29.250 - 00:05:54.040, Speaker B: Just to add on this, basically I joined Ethereum ecosystem also as a core dev in 2017. And back then there was not a lot of tooling. And when you start now building in Ethereum, it's still not good enough because you're benchmarking it against now. But that knowledge that we had from the past and so on helps a lot. And you get the advantage to others basically. So nobody can take that from you. So if somebody asks you when you should start, it's yesterday basically.
00:05:54.890 - 00:06:15.374, Speaker A: Okay, good. Yeah. Let's talk more specifically about what you said about the elephant in the room, which is the migration to Kairo one. Can we talk a bit more about this? Like how you guys plan to do the migration for your different projects. I'm interested in hearing more about that. So Elias, you want to talk about it?
00:06:15.412 - 00:06:49.402, Speaker E: Sure. First of all, it was good that Starknet said that there would be a regenerates period. The fact that there will be six months of cohabitation. I think I wouldn't know too much because I haven't spent that much time in software development. But every time I look at migrations and so on, there is a period where v one and v zero kind of both are accepted. Kind of like EIP 1559 and the legacy transaction format. So I think it's good that we have six months.
00:06:49.402 - 00:07:17.598, Speaker E: I think six months to rewrite everything. There is no state reset. So I think this is good. But definitely, for example, for Kakarot we have a big code base and we are going to have to do a whole rewrite. So it's going to be quite challenging. And thankfully we're not on mainland yet. But I've heard many people in the room, even I see them say we will wait for K one to deploy on Mainnet.
00:07:17.598 - 00:07:50.574, Speaker E: So there is. I agree that what you said, Thomas, about build now and worry later. At the same time, some people want some degree of boring technology and they want something stable. So sometimes there is some kind of zone, gray zone. We are in it right now, where you will not, probably not deploy ko one in Mainnet right now. Because it's clear that K one is around the corner, maybe one month from being stable. So people, big projects will probably wait from now on.
00:07:50.574 - 00:07:51.680, Speaker E: That's what I've heard.
00:07:54.530 - 00:08:47.038, Speaker F: A quick thing I want to add is actually starquare moves pretty fast. And the issue they oftentimes was in the past that actually the tooling didn't catch up. And that was actually for me and like going live, going on Mainet one of the big issues was mainly you have your whole pipeline deployment, pipeline testing pipeline. And now suddenly there was like an abrupt change and now whatever tooling you were using, I don't know, your Javascript tests or you're using Protestar or whatever, and now suddenly that didn't work anymore or you'd have to change that again. And if you want to do proper testing, if your code base is growing, that was always a big disruption. Now that Cairo one is actually open source, the tooling can actually develop with now Cairo one getting implemented. So that is actually, for me that's the nicest thing that I'm kind of sure that the tooling will also catch up and develop with Cairo one and will be ready on release with Cairo one.
00:08:47.038 - 00:08:52.018, Speaker F: At least I hope that the tooling teams are looking at the GitHub code and already getting to work.
00:08:52.184 - 00:09:30.750, Speaker C: Maybe to add here on the tooling side, since we have two large teams working on Warp and Horus, which is a transpiler, and the formal verification, those are extremely dependent on the Cairo language and the version. And still we pushed for the releases with zero one versions even as we could wait here. So the tooling, this is also opportunity for you to keep building the tooling, to replace the existing one, and to scare a bit of those who are not adapting the tooling fast enough. I think that the most successful teams on other networks were always those that were building the tools or they were building the big deliveries.
00:09:32.370 - 00:10:00.214, Speaker D: As a product owner, what I do appreciate on Starquare and Stacknet, especially with Caro one, is that you're giving guys more and more visibility on what you're doing. I think it's really important to have a clear roadmap. It's not only about the tooling and everything, but knowing where you're going. And I think, for instance, the six months of cohabitation between Ko Zero and K one is really important. And that's sometimes what big projects want. They want boring technology, they don't want the bleeding edge. They want to know where they're going.
00:10:00.214 - 00:10:08.570, Speaker D: And a major thing is giving the tooling, but giving you visibility so that we have a clear roadmap and you can build the products on top of it. I think that's what's really important.
00:10:08.720 - 00:10:34.580, Speaker B: Yeah, and also on the tooling, to go back to it, basically everything is open source. So if you need something more, you can always contribute and so on. And there are multiple competitive teams building like solutions basically for the same problem, which I think is crucial in this sense. So even if you have something suboptimal, you can switch or build your own tooling, get the funding and so on. Also like the people basically in the audience can do that, which is really important. And it's basically really what Starkneck has been driving at.
00:10:36.790 - 00:11:17.906, Speaker A: My opinion on that, I would like to encourage people to work on community libraries to help the language move faster. Like we will do something like we have the official library in the compiler, but we will start a community maintained library to experiment. And then time to time the compiler team can pull some features. So I really like this idea of us building altogether to build public good infrastructure for the ecosystem. Maybe we can talk about difficulties related to the project themselves. Let's say the network is stable in us. And what are now the difficulties related to your project specifically? I don't know.
00:11:17.906 - 00:11:21.300, Speaker A: It can be everything like project management, security, everything.
00:11:24.390 - 00:12:21.000, Speaker B: We do, also the consultancy. So I can say from our point basically of you is tech wise, stuff moves, but you can estimate how much time you will need for upgrades and so on. It's not like that all the time you have breaking changes now, like stuff is getting better obviously as the ecosystem is maturing and so on. One of the biggest frictions we have is compatibility with Ethereum. So that's one of the Pandora box maybe that we should or should not open. So is that a bug or a feature? I think it's both, but that's one of the core things basically moving forward now with the Kakarot effort and so on, there are multiple of these things that try to solve the issues basically on one front, but with Cairo part and then everything else, like with regenesis, I think we are reaching a point where production actually can start properly and we are reaching a scale also on the start as a network where you can process more and so on. So I think we are close to maturity soon.
00:12:24.810 - 00:12:53.070, Speaker C: When I was running a survey before this meeting, there was much of the commentary about the ability to run testnets, local testnets and testing everything that you're preparing. So any new tooling here should be delivered by the community, by the companies they're building with Starknet. And I hope this will be improving significantly in the next months. So maybe you might be the ones who will be building those better testing environments.
00:12:55.590 - 00:13:18.102, Speaker D: To me the next phase is definitely audits. We badly need some audits once again to give credential visibility to the ecosystem. And I think for instance, maybe also like on Kakarot of the issue is you want some audit and some confidence in the code you're going with. So I know it's going to happen at some point and we're really dying to see that.
00:13:18.156 - 00:13:33.790, Speaker A: Actually, Elias, you want to add something about. Okay, maybe Thomas, you can talk more about security audits because obviously you are also running audits.
00:13:35.090 - 00:14:19.910, Speaker C: Yes. One thing that we've seen is that there were teams that are about to move to 1.0 and there is this feeling that you're auditing the code again. So this may be big challenge of productionization with the changes to the core components that stability around the language after 1.0 in this sense might be very important. Well, security. So there are tools appearing from the, actually I think that darknet ecosystem now with everything that comes in the formal verification space with a few serious auditing companies it's in good shape.
00:14:19.910 - 00:14:40.450, Speaker C: As for availability of the good partners for your security concerns. But maybe this definitely is where you may want to feel like, oh, we should wait for Cairo one like you want to build on everything that's already there, but when you want to audit maybe you're looking for something more stable.
00:14:41.350 - 00:14:42.514, Speaker A: Yeah, makes sense.
00:14:42.632 - 00:15:20.350, Speaker F: Yeah. No, I would just agree. Basically anyone who did an audit before Kyow one might as well do another one, right? I don't know, I've seen a few ones where I don't know the audit was done. There's one specific project audit was done March last year and that doesn't mean anything despite the company itself maybe being whatever. But it's one of those things where. And then for smaller projects of course as well. Something like immunify, I've seen that very little until now as well that actually organizations, smaller groups on Starknet use immunify for example as a method of auditing which is more common on ethereum for example because at the end of the day audits are expensive.
00:15:21.330 - 00:15:23.498, Speaker B: Immunify is not a replacement for audits.
00:15:23.594 - 00:15:24.686, Speaker F: It's not a replacement. Yeah.
00:15:24.708 - 00:15:25.920, Speaker B: It's a supplement basically.
00:15:27.010 - 00:16:07.382, Speaker F: Yeah. So the reality of things is also with audits there are stages, right? It's like there's open zeppelin, there's nevermind. And then there are other types of plaques you can put on your project. Even an audit is never like a validity of 100% secure, right. If you go to the rect leaderboards of projects, a lot of them have been audited by decent companies. But as a user if I think about using a project you can also not look at the code. So there's something that is needed in immunify if you know a project at least has over a million dollars in bounties.
00:16:07.382 - 00:16:17.070, Speaker F: And I know this has been live for a year, is it not effectively the same thing. They're like really smart people. As long as the code is all open source. I don't know, I feel like it's almost equivalent.
00:16:17.570 - 00:16:46.554, Speaker B: Yeah, it's equivalent to testing a product. Also deploy the code without the audits and if it didn't hacked well it's more likely to not be have bugs. But I'm joking a bit obviously. But I get your point and it's valid point, but just it's iterative process also you change the code of your product and so on. So I don't believe that this move to 1.0 is so crucial because your product moves also. So you would do audits on new features and so on.
00:16:46.554 - 00:16:55.786, Speaker B: Again, maybe not on a whole code base, but this may be improved a lot. Some stuff that you couldn't do in the past. So there is that side I think also to it.
00:16:55.808 - 00:17:38.314, Speaker F: Yeah, no, it definitely depends when you did your last audit because like I said, march last year, you didn't even have the create opcode or something. There is so much missing. I don't see, it depends on the application I guess it depends on you. Yeah, it's very individual from project to project. But yeah, when it comes like testing also, I don't know for tooling, you guys know that better? Something like formal verification is one of those things that is cool, but maybe not like I see it very seldomly that that's something people demand of high quality projects even, but something like fuzzing those basic features that those are sort of there. I'm not sure which test tooling suites on Starknet that are available actually have more advanced features like that. But yeah, it's one of those things.
00:17:38.314 - 00:18:02.898, Speaker F: I'm sure it's going to be there all soon. And I really like the variety in testing libraries we actually have and that you can test in Python using Pytest on Kaka for really large projects, or just in the same language in Kyo with something like proto style foundry that we're getting. Or if you already want to test your front end library, which is probably javascript, you can use that. It's actually. I'm really impressed with the variation we actually have available.
00:18:03.064 - 00:18:08.050, Speaker A: Thomas, you want to add more about formal verification because you recently announced.
00:18:08.410 - 00:19:04.390, Speaker C: Yeah, so I think that it's important not to try to run too far ahead with fortifying your projects with something that's too easy to just feel that you pay for something and you receive it. Start first with the most hard work of testing fuzzing. Maybe limit the TVL that lands on your project, allow the users to be aware of the risks and then slowly mature. I mean, definitely the auditing and formal verifications will be either with the well financed projects or with the projects that already went through that phase of the collecting, TVL and trust of users. Don't try to be more mature than the network within which you operate. Get some attention, get some adoption proper, spend time on your testing, infra local tests, all the tooling.
00:19:05.130 - 00:19:22.620, Speaker B: But also it's not just smart contracts. In the end you have a lot of moving pieces. Yeah, we come to web two security also there. So we open the Pandora box and so on. So productivity is always, as you said, immunify, audits, stuff changes and so on.
00:19:24.830 - 00:19:56.402, Speaker E: I think I want to add on that, because as stockneck is moving really fast, one of the advisors we get is deploy with a proxy. Right? And then I talk about this with only a bit, is like, what security do you have on that proxy key? Because it might be a web two problem, or maybe just a human problem, but is it one person that has the private key? Where is it? Where do you hold it? And then maybe you have the best audit in the world, but you get wrecked from just leaking that private key and then all of a sudden your amm has a back entrance.
00:19:56.546 - 00:20:11.162, Speaker A: Yeah, exactly. Can you give your opinion about testing? Like, both because you are doing some test on Kakarot and also because you are involved in Cairo foundry, and I know you have some difficulties about Cairo Foundry with Cairo one. So can you talk a bit more about that?
00:20:11.216 - 00:20:43.010, Speaker E: Yeah, sure. First about Cacao, I think we had an interesting path, which is that we had Protostar. And then the latest version of Starnet or Kolong came out and we had to stop using Protostar because they had to take one or two months to support it. And we wanted to support the latest version of Kro. So we moved to Python to be our testing framework, Pytest. Right. And so we were executing directly in the KoVM, our tests, but as you said, use any tooling that is befitting.
00:20:43.010 - 00:21:12.362, Speaker E: So this was our thing. It took a lot of time. The test ran, I don't know if I can see it. RCI at the end ran in 4 hours on GitHub. Then we had to move to AWS for faster machines. Now it's 30 minutes. So thankfully that's a good transition, is that we wanted to move to rust VM from the Python one to have very, very fast test, because as you know, iterative process is also within the coding ecosystem.
00:21:12.362 - 00:22:15.474, Speaker E: You want to have quick feedback loops. So Timote, who is here, started the kero foundry project with Tan, and it was basically a testing framework inspired by foundry that run on the Rust VM. And I think there are many problems. One is that we inspired ourselves from the Protestar approach, which is to use hints and ciscos, but I don't think you're going to be able to use them in k one. So I know at the beginning I said I'm super happy about the communication of stackware. I would say that I am a bit worried about what you can and cannot do in k one, and I think it would be really nice to have some kind of ask me anything question with the ko one team to be able to say, okay, can I execute hints? Can I execute arbitrary python in my code as I'm using? Can I do rust even? What can I do actually? And this is going to be really helpful for the team that are building, mocking, spying, anything that is related to testing. And I think this we need to investigate more and it's not ready.
00:22:15.672 - 00:22:57.662, Speaker A: Yeah, I think there was some confusion with the fact that there will be no hint in Kairawan. So there will be possibilities to do the same thing, but in a different way. Like the idea will be to submit pull request to the Cairo compiler to add new function in Sierra. But if you want to do some crazy stuff, you can always fork the compiler. But in the future we will evolve to a structure where it will be available to extend the behavior of the compiler without forking, like adding some plugins or some stuff like that. So it will definitely be possible. And obviously we need a strong testing framework.
00:22:57.662 - 00:23:14.886, Speaker A: So I think the idea of Cairo foundry makes a lot of sense. Okay, I have a question for you guys now about when Mainnet, what are your tips for project to choose the right moment to go?
00:23:14.908 - 00:23:19.480, Speaker F: Tough one.
00:23:23.230 - 00:23:50.530, Speaker B: There are shades of gray here. So obviously you have to test the product first in this kind of environment. As Tamar said, run it, limited TVL and so on. Get the feedback from the user. Because what means mainet? What is the product? You have a community, you have marketing, you have all those stuff, partnership on the business side and so on. So Mainet is not just technological main. So more or less now we'll have Cairo one, we'll have like Mainet properly with regeness and everything.
00:23:50.530 - 00:24:14.700, Speaker B: So technically wise we are ready. But DPS, do you have composability? What do you need for your product basically to reach Mainet? Those are basically all the questions when you should hit basically that target because maybe your product doesn't make sense now. Maybe it will make sense in two years, basically when for example, sequencer decentralized or whatever. So more of a question than an answer. So maybe you can help.
00:24:16.030 - 00:24:54.680, Speaker D: Not a technical point of view, but like a macro point of view. I think you have also to differentiate who you want to go on the main net. Is it going to be startups, freelancers with really cutting edge technology once again? Or do you want big corporates, market makers that would go, I think as an early adopter, as a startup you can go pretty much whenever you decide to. If you just want to rush. I think for the corporates, once again for the big ones, they're going to wait, see what happens on the main net and then they will deploy. I think depends on who you're going to focus on and the needs are going to be different. And I'm going to let you guys talk about the exact needs for this guy.
00:24:55.610 - 00:24:57.798, Speaker A: Thomas, you want to add something?
00:24:57.964 - 00:26:04.410, Speaker C: I think there are multiple aspects of what does it mean to go to Mainnet? Does it mean to announce and productionize and go to Mainnet to users? Does it mean deploying your code on Mainet? But you don't really feel like this is the final stage. So many of those you'll judge by what's the cost of deployment. Is it currently expensive? Is it super cheap? If it's cheap, then do I possibly cause any harm to any users by deploying on Mainnet? Maybe I just want to test it. Will I cause any reputational risk to myself by deploying on Mainnet too early and people thinking that this is something that I consider to be a production. So all of those take that into account. And ideally from the technical perspective, I think the main net going to Mainet with a product that you want users to start working on should be in the case where you can almost like a one click test entire testing setup and know that what you're deploying on Mainet is perfectly mimicking what you've tested and that you feel like you've done it hundreds of times without any surprises. Then that's when you deploy on Mainnet.
00:26:04.410 - 00:26:10.590, Speaker C: This is when you feel the most comfortable and it's gold to have it when you go to Mainnet.
00:26:11.170 - 00:26:13.758, Speaker E: Elias sure.
00:26:13.924 - 00:26:15.710, Speaker A: When Mainnet for Kakara?
00:26:16.130 - 00:26:16.359, Speaker F: Soon.
00:26:16.359 - 00:26:47.238, Speaker E: Soon. No, but I think it's a trade off, as is everything. But I was saying I feel like brick people think of them as a flagship project because they were among the first to go to Mainnet. Maybe Starknet id so there is value to go early in Mainnet and it's also ship fast, maybe have a feedback loop. And then sure you have a proxy, maybe it's on a multisig, maybe it's on a governor contract. Then you have a security leak, you know it and you update. As you said, you limit the TVL.
00:26:47.238 - 00:27:20.178, Speaker E: Maybe at first you leak a few thousand euros dollars, then you repair. But if you wait too long, maybe you're going to go and get wrecked still. But as some of us know, maybe market makers amm, they have really bigger sums, they have millions. So they can't have this risk. So I expect they will probably one main net after audits and after Ko one audit and after tooling is audited as well. So I would say ko one in two months. So maybe tooling catches up two months later than audits.
00:27:20.178 - 00:27:21.400, Speaker E: So six months.
00:27:22.730 - 00:27:35.942, Speaker A: Yeah, I agree. It makes sense. Like if you take even the protocol itself, it still has training wheels actually. Like the TVL was limited on the breeds, stuff like that. So it makes sense to have training wheels and remove them progressively.
00:27:36.006 - 00:27:36.378, Speaker F: Okay.
00:27:36.464 - 00:27:37.382, Speaker A: Freshly jaw.
00:27:37.446 - 00:28:01.774, Speaker F: Yeah, just quickly for anyone who is actually developing. I feel like on Starknet it's quite underused, is actually mainet forks, right. Using that I think shardlabs. I think you developed that correctly. It's one of those things that is on Mainet. It's very commonly used, especially if you have, especially in the defi space. For some reason your protocol depends on other amms, certain markets that you test in that live environment.
00:28:01.774 - 00:28:27.610, Speaker F: And the Testnet really doesn't help with anything. And it's not a binary thing out testnet. And then Mainet, like you said, you can go first use on a local definite fork. The state of the mainet have that as something that users can also use. And then you go on Mainet, you limit funds or the amount of things you can do, how much you can deposit. So you can go in steps and then. Yeah, sorry, do you want to directly say something to that?
00:28:27.680 - 00:28:50.514, Speaker B: And then what that opens basically is also you can deploy specific environments for specific users. So you can limit exposure to users and so on, roll out releases and stuff like that. All that is unavailable too. Basically, like in normal, like web development and so on, you can now potentially mimic in this kind of environment. And users don't have to see the complexity. You can easily roll out and so on. But we are missing a lot of stuff, still automating all stuff and so on.
00:28:50.514 - 00:28:58.470, Speaker B: It will take a lot of tooling and so on. So for you listening here there are a lot of bunch of stuff to build, to improve.
00:28:59.210 - 00:29:20.410, Speaker A: I'm curious because we see that all projects have almost the same challenges and difficulties. I'm wondering what can we do basically to join forces and support the cost altogether, both on the protocol layer, but the Dapps also themselves. How can we work altogether to improve the overall quality of the ecosystem?
00:29:23.070 - 00:29:50.322, Speaker E: When I think of this, maybe I take the example of solidity or any type of software development. I think it's good to have automatic tools and if something is good, it should be easy. So I would say something really dumb, but a linter would be nice. Some kind of static analysis of your code. I know in solidity there are tons of challenges that say, okay, what is reentrancy, what is. I don't know. Only owner, some kind of leak, proxy leaks, I don't know.
00:29:50.322 - 00:30:20.414, Speaker E: So this type of thing. So education, education and tooling. So I think for example, I started rust a couple of months ago. But Clippy is a good example of amazing tooling to have you catch on good practices. I think it would be amazing if k one had clippy. Some kind of very strong linter that enforces good practices. I know when we talked about Kakarot, we said, okay, anyone can go on the repo, watch the code and say okay, this is to some extent idiomatic ko we try to do the best kero we can and it's a good example.
00:30:20.414 - 00:30:27.966, Speaker E: I guess people will go to soulmate and say, okay, this is proper way to write solidity. So in a way lintels and good.
00:30:27.988 - 00:30:46.242, Speaker B: Examples also like having a language like solidity is not non opinionated, let's call it like that. You can write whatever in it and it won't limit you. You have rust on the other side. Some people call it pair programming. You are Nicole pilot basically. So that's maybe the better approach and that's more safer approach. So you have those kind of two metals.
00:30:46.242 - 00:30:54.540, Speaker B: Cairo is maybe somewhere in like we are getting better, hopefully. So no more that kind of solidity. Bugs that we had.
00:30:56.510 - 00:31:23.954, Speaker F: Yeah, quickly. And on that note, on more of the like, I want to say social community layer, because it's weirdly, you see the ecosystems are sometimes different on the different side. Chains oil too, right. BNB chain has a special ecosystem, I would say, and different standards. It feels a lot more. It's not necessary that every project has an audit from open zeppelin or nethermind or something. Feel like the standards are a bit lower.
00:31:23.954 - 00:32:06.826, Speaker F: It's one of those things early on, depending on what the standards are for example in our ecosystem that we set on a social layer that might also then carry onwards. Right. For example, it's certain things like for the block explorers to definitely have that feature of being able to verify your code for example. Right. It's just the normal standard thing of having projects on Mainet expecting that they are either audited or that it is actually fully, it's a certain standard to set. And right now if we just let the users do it, I mean right now there aren't that many actually I would say natural users here from Starknet because the applications are somewhat missing. But the ones that are currently there, I don't feel like there's a big shout out for more high quality deployments.
00:32:06.826 - 00:32:42.970, Speaker F: So if that's something that it has to be set by developers and I don't think we actually have the natural, actually an incentive to do so. Right. Like a developer is an incentive to spend a lot of money on an audit. So yeah, there's some form of maybe pushing for certain. I mean a lot of the developers are big pro open source and I think are here for good reasons, especially on Starknet has very high quality developers, but that doesn't mean that eventually other groups might take over just because I don't know. Yeah, these developers don't speak out a lot enough or voice their opinions.
00:32:43.950 - 00:32:44.602, Speaker C: Yeah.
00:32:44.736 - 00:33:27.366, Speaker B: Automatic verification is quite close to me because one of the issues we tried to solve in solid in Ethereum foundation was a project called Solcify which we tried to do automatic verification on smart contracts. We hit so many brick walls. Main concern from developers was we're developing this, we don't want it open source at the start and that's one of the things that's viable feedback, they want to develop it and so on, audit it and so on, so they can showcase it. And we have a lot of flagship products on Ethereum also that don't have the whole code space, basically open source. So that part could help. But then again it's I think a better way to go. One of the things I would like to see in the future more is like making rust, maybe the first, comparable to Cairo.
00:33:27.366 - 00:33:43.306, Speaker B: Basically you can also code in rust because that way we target even more developers outside blockchains and so on. Maybe even some other ecosystem did it with JavaScript, sdks and so on. Maybe in a limited scope, but that could be a good onboarding experience for a lot of basic developers.
00:33:43.498 - 00:33:45.406, Speaker A: Yeah, that makes sense I think.
00:33:45.428 - 00:34:34.986, Speaker E: Yeah. You mentioned going into the code incentives. I don't know, I saw one, you did a YouTube video where he would actually go into the code of swaps on Starnet and kind of say his two cent about it. And looking back to Sam from not guardians, I think it's maybe a weird take, but we might need influencers on starnet developers that will actually say, okay, today I will go into the five most known NFT projects, look at their contract and say, okay, guys, what is this? Okay, this is good. Okay, maybe it's a hot take and maybe that person will be also questioned. Like do you have conflicts of interest? And so on. But I think a healthy environment should question people and challenge them if their code is bad and challenge them if their code is closed source.
00:34:34.986 - 00:34:47.540, Speaker E: And a good example is stackware. Stackware is respected for their tech and pragmatism, but challenged for their closed sourceness. And it worked because they open sourced most of things. So let's continue to do that.
00:34:48.550 - 00:35:24.206, Speaker F: Yeah, very quick. On that note, I have the feeling there's a lot of chitchat behind the scenes among developers and groups. There are very certain projects where I know they are not well liked. Also big ones, also ones on the sponsors list. And I don't know, it's very natural that these things don't go out because everybody has relations and interests and doesn't want to get in trouble or lose some reputation themselves. But it's unfortunate that that never goes out to the community or like people that are interested in the tech but are not very technical themselves. They miss a lot of maybe mischievous behavior, dodgy behavior, and it's not being called out.
00:35:24.206 - 00:35:40.740, Speaker F: So in that sense, yeah. Influencer is always a tough thing because you have both sides, the good and bad ones, but like technically informed people, but are not part of any one of those companies on either this list or employed anywhere else. Yeah, but how you get there that there are more people like that, I don't know.
00:35:41.670 - 00:35:47.060, Speaker A: I think we will finish on this because we are overtime. So thank you, guys. It was amazing.
00:35:49.670 - 00:35:52.040, Speaker F: Thank you.
