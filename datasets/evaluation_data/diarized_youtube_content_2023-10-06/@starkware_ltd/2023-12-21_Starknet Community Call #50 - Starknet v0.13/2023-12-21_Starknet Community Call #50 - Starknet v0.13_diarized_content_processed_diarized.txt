00:00:00.330 - 00:00:37.852, Speaker A: You okay? Let me check if this works. Okay, we are officially live, so hello everyone. Welcome to the 50th community call. I'm Robert, a developer advocate at the Starknet foundation, and I will be your host for today. We're delighted to have Ariel as our invited speaker for this session. Ariel is the product manager and blockchain researcher at Starquare. Our focus for today's discussion is Starknet version zero point 13, covering topics such as reduction in transaction fees, carrot 2.4.0,
00:00:37.852 - 00:00:55.780, Speaker A: and version three transactions for our viewers. If you have any questions, feel free to drop them in the YouTube chat section and we'll try our best to address them. Welcome, Ariel. I'm super excited about the session and eager to learn more about Starknet version zero point 13. Ariel, the stage is yours.
00:00:56.520 - 00:01:09.130, Speaker B: Hello. So I'll just share my screen, right? So you should be able to see my screen now, correct?
00:01:10.540 - 00:01:11.610, Speaker A: That's correct.
00:01:12.540 - 00:02:00.040, Speaker B: Okay, amazing. So, although this is the first version where we introduce paying with stock tokens and stocknet getting a native token, which we will discuss only at a technical level. So please don't ask me many questions because I won't have answers anyway. But we'll talk about the tech stuff in stocknet, which is always nice. Okay, so V 13, what have we got? V three transactions, which we'll talk about in more details in a few minutes. Payment with stock token Cairo 2.4 and reduced transaction costs.
00:02:00.040 - 00:02:14.444, Speaker B: So, all really nice things and let's jump into them. Robert, please ping me if there are any questions in writing because I won't see them.
00:02:14.642 - 00:02:15.630, Speaker A: Will do.
00:02:16.000 - 00:03:19.472, Speaker B: Okay, cool. Okay, so V three transactions, what's new special about them? First of all, so far, every transaction specified max fee in e units actually way. And with V three transactions, Max fee is replaced by Max price per unit and Max amount, which is more future compatible for the point in time where the protocol actually has a fee mechanism and you're able to actually propose a tip per unit of computation. So with Max fee there is not a lot of wiggle room. So v three transactions, take that into account. We are separating l one resources and l two resources, so shortly I'll dive more into that. But essentially every starknet transaction has two type of resources associated with it.
00:03:19.472 - 00:04:00.140, Speaker B: One is l one resources. Whenever I submit a transaction, I eventually need to prove it. This proving on l one has some costs measured in l one gas. And in addition to proving, there is also the data availability cost of the transaction, which I'll also discuss. So all these costs of the transactions are measured in l one gas. But on the other side there are stuff like sequencing cost. You actually need the sequencer to include your transaction, execute it, and all those type of things go into the l two gas category.
00:04:00.140 - 00:05:12.180, Speaker B: In all 13 it is not in use yet. We still did not define l two gas, but in order to keep future compatibility we introduced it to the transaction structure. So once we do define it, it's easy to use the existing transaction in order to split resources between l one and l two. Okay, in addition to l one and l two gas, we have a bunch of new fields and these are all placeholders for features that we are going to add to the protocol in the upcoming versions. First of all, tip critical for having a meaningful fee mechanism tip is the only way to express your desire to be included in a block more quickly than others. Max feet a day does not give you this flexibility. Volition fields volition is Starknet's way to reduce the costs of data availability significantly.
00:05:12.180 - 00:06:16.440, Speaker B: Obviously, we are in line with Ethereum's old map on this, which is EIP 4844, which will also significantly reduce data availability costs. But volition can further reduce them for those who want data availability mechanism which is completely independent from l one. And these volition fields fee data availability mode and non data availability mode allow you to say, hey, my nons and my balance, please take them from the off chain state rather than the on chain state because today whenever you submit a transaction there is a minimal cost that is induced by bumping your nons and reducing your balance due to fees. These are two separate state changes. Every state change must reach l one as call data. This is how it works and swallow roll up. And this already adds something like one to two k minimal gas costs for your transaction.
00:06:16.440 - 00:07:22.400, Speaker B: So hopefully with this we'll be able to get it near zero. Paymaster data allowing for someone else to pay with the native token for your transaction and allowing you to pay with different tokens and account deployment data which allows you to bundle the account deployment and the first operation in a single transaction. So currently how it usually works in Starknet is that the wallet, actually, not the user. The wallet determines the account address. Off chain holds on to the deploy account transaction until the user wants to do the first operation. And once you want to, for example, transfer funds, then the deploy account and the transfer transaction are sent to the network by the wallet. So this will allow the wallet to bundle those in a single transaction.
00:07:22.400 - 00:08:15.360, Speaker B: None of these are related to author team, these are just placeholders for future versions, but it tells you what we have in store for start. So these are v three transactions. And probably the most important detail about them, they pay with Stark. So older transaction versions always pay with eth or way. And v three transactions always pay with Stark or fry. Which is like way to e ten to the -18 stark. And for those wondering, Fry stands for the very concise name of fast read solomon interactive oracle proofs of proximity.
00:08:15.360 - 00:08:25.830, Speaker B: So that's a single fry. Okay, any questions? Comments on v three transactions so far?
00:08:27.080 - 00:08:40.532, Speaker A: I believe there was one question, and basically regarding the payment in stark token. That means that can we choose between Stark and ETh or is by default, Stark.
00:08:40.676 - 00:09:17.184, Speaker B: So you can't choose it in a single transaction. V two and prior transactions always pay with eth. V three transactions always pays with Stark. And gradually, as the ecosystem converges to this new change then the older transaction versions will cease to be supported eventually. For now, they are all still active. But eventually stock will be the token in which fees are paid. But there is no choice.
00:09:17.184 - 00:09:26.760, Speaker B: Within a single transaction. Either you are v three and you pay with stocks or you are v one or v two and you pay with eth.
00:09:27.740 - 00:09:30.344, Speaker A: Awesome. Thank you. That's it for now.
00:09:30.542 - 00:10:31.740, Speaker B: Okay, great. Okay, so the stock token, what can we say about it? And why do it? Why go down this route anyway? So recall what I said in the beginning, that l two started transactions have two type of resources, l one and l two. And it's kind of weird to pay for l two block space in a token whose utility is l one block space gas. And it, which is used to pay for gas, is very much associated with the ability to be included in an ethereum block. Which makes sense when I want to pay for the l one signature of a starknet transaction. When I want to pay for the proving cost of a transaction, it makes sense that I pay with it because this is a gas cost. This is an l one cost.
00:10:31.740 - 00:11:31.730, Speaker B: But when I want to pay for the sequencer, who's getting different proposals from transactions that want to be included in an l two block, it's weird to couple that with the token that is responsible for l one block space. So, yeah, broke pay l two fees with an l one token walk, pay l two fees with starks. Okay, so more about l one and l two resources. It's important to note that today we completely neglect the right hand side. All costs of a transaction, even v three transactions, is only measured on the left. We only take into account l one resources at this point in time, including version zero point 13. And the l one resources consists of two major parts posting state diffs to l one.
00:11:31.730 - 00:12:21.650, Speaker B: Today we use call data for that, after 4844, we'll use blob data. So whenever your transaction updates a storage cell, this diff, the key and the new value goes to ethereum as call data. And the second component of the l one resources is the proof verification cost. So these two together comprise the l one resources of the transaction. And on the other hand, we have the l two resources, which are neglected as of now, but in the future will be associated with l two gas. And these are the sequencing costs. These are the costs for computation on l two, for call data on l two, and for storage on l two.
00:12:21.650 - 00:13:45.130, Speaker B: So in the future, this will be the more dominant cost in the system because proven costs essentially raises logarithmically with the throughput, while this cost raise goes up linearly. And eventually we imagine that the dominant factor for the cost will be congestion in the network will be l two congestion. A lot of people want to get into a block. There is some Nft minting, there is some contract to inscribe to, there is some defi to do, there is any one of the numerous djen activities you want to do, and this eventually means you have to compete on l two block space. Okay, so again today we only price for the left in the future for the second one. And for the second one, it makes sense to not couple the costs with the unit that pays for l one gas. For the left side, it makes a lot of sense to pay with eth, which is what's being done prior to v three.
00:13:45.130 - 00:13:48.570, Speaker B: Okay, any questions?
00:13:50.160 - 00:13:51.630, Speaker A: So far so good.
00:13:52.400 - 00:15:03.570, Speaker B: Okay, cool. So what I said now raises a question, because if we're only charging for the left hand side and the left hand side is priced in eth, how are v three transactions paying with starks? Okay, so the answer to this is an it stark oracle. So the sequencer will need to know the ratio between it and stark. And the way he will do it is by using some it to stark oracle. So he will have to price l one guns in starks. And the way he will do it is by asking, relying on Oracle feed. Okay, so it's important to note that only the sequencer takes a risk here, because from the user point of view, he's signing on some max fee per unit and he doesn't care about the volatility of the oracle and that sort of stuff.
00:15:03.570 - 00:16:26.552, Speaker B: This can almost be viewed as hedging on the sequencer level. If the price is too low, then the sequencer will lose funds if the price is too high, then the user that wants to send the transaction from the wallet will see the high estimate and refuse to sign until prices go back to normal, which is the same experience that exists today. And just as a silly example, let's say the oracle tells us one if it's ten stocks and the l one cost of the transaction is one k gas and the gas prices are 100 guay, then the price for the transaction is obviously one k gas times the gas price, which is 100 guay. So 102 times ten to the power of minus nine times ten, because one it is ten starks, which ends up with 0.1 starks. So a very silly example, but just to demonstrate what the sequencer will do. So this is how we cope with the challenge of paying for l one resources with starks.
00:16:26.552 - 00:17:06.280, Speaker B: Obviously when we start focusing more about this type of resource, then we won't have the same problem. We need the oracle here because l one resources are inherent to l two transactions. You're changing the storage you need to post state ifs on l ones. This means you have some associated l one costs that you need to handle. So you must do the conversion somehow. Okay, so this is the east to stark Oracle story. Questions before I move on to speak a little bit about Cairo.
00:17:06.700 - 00:17:20.220, Speaker A: Yes, there's actually just one question that seems interesting. So basically on Twitter, panda is asking. So the stark we pay will be calculated based on the fee we're going to pay using eth?
00:17:20.980 - 00:17:21.730, Speaker B: Yes.
00:17:22.660 - 00:17:24.130, Speaker A: Okay, that's it.
00:17:25.460 - 00:18:06.300, Speaker B: Your stark balance will be changed. Your eth balance will remain unchanged, but the amount that you will pay will be determined by l one gas costs and conversion between ethics and starks. Yes, awesome, thank you. Okay, so not a lot to be said about Cairo. You should read this post, which I will very quickly go over, but it really dives into the changes in the new version. So I'll just show you briefly what you are missing. First of all, long strings.
00:18:06.300 - 00:18:40.500, Speaker B: Probably the oldest request in Cairo since the days of Cairo. Zero. So far we only had short strings, which were limited to 31 characters. So old enough. Cairo developers have developed the ability to estimate visually whether or not a string is longer than 31 characters. I think that's about something like this. Maybe not, but people in the ecosystem long enough can basically look at a string and tell you whether or not it surpasses 31 characters.
00:18:40.500 - 00:19:34.100, Speaker B: So no more with the string literals. You no longer have to care about it. We have the new Byte array type, and you can do all the string formatting that you can do in rust. So very nice stuff. Still missing from byte arrays is the ability to store byte arrays or strings in the contact storage. But this I think will very soon be merged on main, which means that if you're using Scarbon nightly, you will soon already be able to store strings and not have to wait to the next Cairo version. So these are byte raisin strings, a bunch of string related macros.
00:19:34.100 - 00:20:12.660, Speaker B: I won't really dive into them again, the post really goes into it. There's a new Sierra version, which is the reason we're even discussing this. The protocol knows the Sierra version. The protocol does not care about high level Cairo. What the sequencer needs to know is how to compile Sierra down to Cairo assembly. Remember that Sierra is what is actually being sent to the sequencer and not Cairo. You compile from Cairo to Sierra in your home and submit Sierra to the and so we've upgraded Sierra.
00:20:12.660 - 00:21:08.152, Speaker B: I won't dive into it, but I will just say that there's a very nice mechanism in Sierra to dynamically count the amount of gas being used by the program. It used to depend on linear programming, which made the whole thing not really stable. And now we have a much more straightforward algorithm to compute the gas usage of the program, which is very nice. This is still not used in production, but it solves many compilation issues which were brought on the compiler repository. So very nice. And if anyone has a concrete question about Cairo 2.4, then feel free to ask.
00:21:08.152 - 00:21:10.520, Speaker B: There's also the tyro one discord.
00:21:13.820 - 00:21:44.160, Speaker A: Definitely. I believe. I'm super excited about this version, mainly because the introduction of the new macros, I think those are very interesting to see, especially the format, the print macro, things like this. But also I believe the anticipated, well say feature, the long strings with byte 31 and byte array, I think that has been anticipated quite a long time ago. So super excited about this version.
00:21:44.820 - 00:22:34.580, Speaker B: Yeah, with the new implementation of store for byte array, I think this pretty much closes this long standing issue of long string, and I assume this will be incorporated in standard implementations of ERC 721 and the like. Awesome. Okay, cool. So these were strings and byte array. So we're coming to the last thing in this version, which is cost reduction. So transaction fees are going to drop rather significantly. So in a few points I want to go over what exactly is being improved.
00:22:34.580 - 00:23:25.768, Speaker B: Maybe I should start with the second point. So computation is 50% cheaper all across the board. The price of a single chiropractor step is reduced by a factor of two x. So if your contract is computationally heavy, then you're very happy about it. You are now paying 50% less fees. And on top of this, there are very concrete operations that were optimized by roughly 35%, which is the SeC P multiplication. These functions are used for either verifying ethereum signatures or verifying enclave signatures.
00:23:25.768 - 00:24:23.712, Speaker B: So very important if your account is facial recognition based, if your account is facial recognition based, then under the hood you're not using the regular stock signature, you're using SECPR one ECDSA. So this is a cost you pay in every single transaction to verify the signature. And this 35% reduction will obviously be very meaningful for such accounts, obviously alongside the general improvement for computation. So definitely stonks. This is on the computation font. There are also a few reductions on the data availability fonts. So today if I am updating a single storage cell in starknet, I am paying around one k gas.
00:24:23.712 - 00:25:13.280, Speaker B: Why am I paying around one k gas? Because I am submitting the key, the location of what I'm updating, and the new value. Each of those is 32 bytes, and each byte costs on Ethereum 16 gas. So 32 times 16 I end up with 512 gas. So around one k per a single storage update. One k gas per a single storage update. But today we are not accounting for zero bytes which are cheaper on Ethereum. So we reduced some of the costs in an ad hoc manner and this cost reduction will affect every single transaction.
00:25:13.280 - 00:26:23.640, Speaker B: So every single transaction updates the nons. When we update the nons, we send a single 32 bytes byte word that includes your new nons, the number of storage updates in the contact, and the number of storage updates in the contact. So by saying okay, assuming your account didn't do more than 16 million transactions and didn't update more than 64k storage slots, we can say both of these fit in at most six nonzero bytes. And this means we can, instead of charge the full 512 gas, only charge 200 gas. So this is around 300 gas reduction for every single contract that was updated. Every single contract that was updated, you will pay less 300 gas for doing it. And for every transaction you will pay 240 less gas because we'll charge less for updating your balance.
00:26:23.640 - 00:27:20.990, Speaker B: So updating your balance, since we're using account abstraction and your balance is just your regular balance inside an ERC 20, it means that every single transaction has at least one storage update, which is your balance because you are paying a bunch of fees, which means a minimal cost of one k gas per transaction. And since unless you're very rich, your balance does not exceed twelve nonzero bytes. We said, okay, the balance is at most twelve nonzero bytes, which means we can reduce 240 gas. So around 300 gas per every contract that you're updating will be saved and 240 gas for every transaction will be saved. Any questions?
00:27:23.380 - 00:27:39.430, Speaker A: Let me check quickly. Yes, nothing so far about cost reduction, but I'm very excited about this computation is 50% cheaper, so that's really interesting to see.
00:27:41.880 - 00:28:31.510, Speaker B: Yes, completely agree. One thing I didn't mention is on top of these concrete reductions, there's 10% of data availability costs. I feel like I'm in a supermarket. Data availability is 10% off only today, but throughout the version and from now on, the motivation for this reduction is that state diffs are squashed. So if you and I send different transactions within the same block that modify the same storage slot, we only have to send a single update to Ethereum. We're not paying twice. The sequencer does not pay twice to send those updates because we only send the newest value.
00:28:31.510 - 00:29:46.140, Speaker B: But there is no after the fact reimbursement for the transactions that modified this storage cell. They do not share the costs as of yet. Maybe in the future we will have some mechanism that allows splitting the cost between those who participated in actually changing this. But today there is no after the fact reimbursement mechanism. So the simple way that empirically looked like it takes care of this scenario was to say, okay, overall 10% cost reduction for all data availability costs on top of the above fixed importance. So on the computation front, 50% cheaper. On the data availability, 10% cheaper plus some concrete 550 gas transactions for a single transfer, probably more for more complicated transactions because this addition gets repeated for every contract that you're upgrading.
00:29:46.140 - 00:30:13.110, Speaker B: Okay, this essentially sums up all the changes in 13 v three transactions, pain with starks and cost reductions. Happy to answer any questions you or someone from the audience has.
00:30:15.160 - 00:31:05.460, Speaker A: Sure, let me check any questions regarding Starknet version zero point 13 from mine. I'm super excited for this update, mainly because it sets the stage for something even larger. And you discussed about this that the version three transaction sets the stage for paymasters fee market volition. So it's a very important step and I'm looking forward to the next versions. Let me see from chat we have any questions? Everything seems to be good. It's mostly regarding something else, so I think we're good. Maybe if you have anything else to say, Ariel?
00:31:08.940 - 00:32:02.440, Speaker B: Not really, but as you saw, there are a lot of stuff in store, probably a lot more cost reductions to be had, a lot more updates on the Cairo front, for example, we're starting to think about storage arrays and storage maps, which is something that has been requested for a while. Nicer loop syntax, a lot of news on the car fonts as well. And eventually this thing that I'm pointing at now, the l two gas will be very nice and a key step in the maturing of the ecosystem where we actually consider pricing l two block space and not only the l one signature of the transaction.
00:32:05.110 - 00:32:33.334, Speaker A: Awesome. Great. I think then that's a wrap up. No questions regarding this version. So Ariel, thank you once again for being here and for the presentation. I found the information about Starknet version zero point 13 to be exceptionally valuable and I hope our viewers feel the same to our viewers. Thank you for joining and tuning in into the 50th community call.
00:32:33.334 - 00:32:42.378, Speaker A: Wishing everyone a fantastic day, happy holidays and happy New Year. And until next time, take care. Thank you Ariel.
00:32:42.554 - 00:32:46.840, Speaker B: Thank you. Bye everyone.
