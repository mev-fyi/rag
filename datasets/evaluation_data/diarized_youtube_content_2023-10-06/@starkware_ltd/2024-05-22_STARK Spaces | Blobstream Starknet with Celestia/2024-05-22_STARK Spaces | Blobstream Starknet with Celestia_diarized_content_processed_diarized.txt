00:00:04.840 - 00:00:38.498, Speaker A: All right, we are live now. We're just going to make sure that all of our technical facilities are up and running. I'm going to do a quick check on Twitter to make sure I can hear me. Okay. Check, check. Okay. And it looks like Twitter now does have video, which I didn't realize.
00:00:38.498 - 00:01:26.264, Speaker A: So you guys all get to see our lovely faces. So if you've joined us, thanks for joining us. Today we're going to talk about Blobstream, Starknet, and the milestone that the dev community of Starknet, the open source ecosystem, along with some of the exploration team members have hit. It's been an amazing project, an amazing integration with both Herodotus and Celestia. It's been an interesting architecture to come up with, and we could talk about some of the roadblocks and snags and how we've moved past them. So Blobstream Starknet itself is an implementation or a reimplementation of some of the solidity code bases on Ethereum layer one. It's a one way messaging bridge from Celestia to Starknet.
00:01:26.264 - 00:02:04.384, Speaker A: The original way that we had conceptualized coming about this, it was about the same time that Celestia had talked about migrating fully to blobstream X. And I'll let Diego talk a little bit about the difference between Blobstream X and Blobstream. And so we ended up going the route of using Herodotus. So to start today off, I'd like Diego to maybe give an overview of what a traditional celestial roll up looks like, what it needs to commit to, and then we can talk a bit about what, what's been accomplished in blobstream. So, Diego.
00:02:05.924 - 00:02:27.444, Speaker B: Yeah, absolutely. So obviously the traditional way, quote, unquote, you build a celestial roll up depends on one, whether this roll up has a canonical bridge somewhere, aka it's settling to some other underlying layer.
00:02:27.484 - 00:02:27.684, Speaker A: Right?
00:02:27.724 - 00:03:19.702, Speaker B: That's the case with what we're trying to accomplish here with Starknet. L three s, for example, they settled to Starknet, for example. And then there's sovereign roll ups, which we're not going to talk about today. And then the other difference is whether you are doing a secret roll up or an optimistic roll up. Right? In the case of Starknet, we all know it's a CK roll up or validity roll up. And in the traditional way, right? Broadly speaking, without thinking about starting it, but just thinking about CK rollups for a second, the way you essentially build a Celestia ck roll up or validium slash celestium, whatever you want to call them is quote unquote straightforward. Like the idea is very simple.
00:03:19.702 - 00:04:27.674, Speaker B: You just move from posting your state diffs, or broadly speaking, your data or batch data for your roll up. And instead of posting it to Ethereum or to the same network that you're using for settlement, you would post it to Celestia. There's obviously a minor issue here if you just do that, which is that posting data to Celestia makes it available. But there's no way for the roll up system, and thus for the underlying user to know whether this data was made available or not. Right? They could run a celestial like client and they could verify that, but there's no way for the roll up system itself to basically know when it should proceed with a batch or not, etcetera. And that's where the use of blobstream comes in. Blobstream being the data attestation bridge that you can use to essentially build these constructions, these palladiums with celestia.
00:04:27.674 - 00:05:33.954, Speaker B: Da. And what Blobstream does as a data attestation bridge is that it lets you bridge or transmit messages from celestia to some other network. The original implementation was written in solidity, and it had some caveats, let's just say. And eventually, instead of launching the first version that was built by a team member at Celestial Labs, we launched instead Blobstream X, which is the same thing as blobstream in terms of functionality and what it does. But instead of submitting a long batch of celestial headers and verifying a bunch of signatures, it uses Ck to verify all these celestial signatures with one proof. It's more efficient, it's more portable, let's say. And this was built by the team at succinct.
00:05:33.954 - 00:06:26.300, Speaker B: But yeah, like traditionally it's very straightforward. You post your data to Celestia and then you take whatever your settlement contracts are and hook those up to blobstream so that whenever your settlement contracts are verifying a batch and a validity proof for your roll up, you also verify one way or another, whether the batch data for, for that specific, like, proof was posted on Celestia or not. And yeah, the obvious reason why we're here is to talk about how we kind of like migrated or build a version of this for Startnet, given that lobster was built in solidity and thus we had no way of like easily porting this to start. Net, right? But, yeah, sweet.
00:06:26.332 - 00:06:35.780, Speaker A: And then that transition to blobstream x moves all of the sigma, the signature verification off chain right into that snark correct.
00:06:35.852 - 00:06:46.476, Speaker B: It's, if I recall correctly, it's a plonkey three circuit, and then the proof gets wrapped into grot 16.
00:06:46.660 - 00:08:17.004, Speaker A: Awesome. Okay, so that kind of ties in nicely to the problem that we had with blob stream starknet and something that we'll talk about a little bit later today, which is Grau 16 is currently blocked on a syscall that basically needs to be implemented in our protocol stack that Marcello has some cool alpha about later. But we couldn't go the full direct integration of basically mimicking the succinct platform for proving those gross 16 circuits, which would lead to a clean architecture of basically just having exactly what blobstream X does on l one and port that to l two. So since the infrastructure is already stood up for relaying and proving those block header batches to l one, we essentially needed to appeal to the l one and get the information and the data commitments from l one where it's already doing the work. It's the same data commitments that need to be proved on l one as l two up to l two. That's where we needed Herodotus to come in. We basically use Herodotus storage proofs to prove what's going on on the l one, and prove the storage slots that reflect the actual data commitments for the Celestia blobstream X on l one, where it's actually already doing the work up to l two with the storage proofs.
00:08:17.004 - 00:08:45.224, Speaker A: And it's a pretty cool architecture. There's a little bit of latency built in just because we do have to route from l one to l two. But overall, heritage storage proofs have unblocked us, at least in the short term, until that syscall comes about. So, yeah, Marcella, if you could maybe talk about how unique architectures like this come about and how the storage proofs facilitated, that'd be awesome.
00:08:45.724 - 00:09:26.886, Speaker C: Sure. So thanks for giving the introduction. Maybe first I'll talk about what even makes storage proof possible. So, first of all, like, let's remind ourselves how blockchains are constructed. So whenever we verify the consensus, okay, we run at the end of the day just agreeing what is the latest state route, which eventually gets committed to the block hash. In the AVM, we have like opcodes that allow you to access the block hash, and as long as you trust that block hash, it also means that you trust the validator set of Ethereum. And that block hash, in a sense, commits to the full history of the chain because there is like a full linkage and also the block hash is a hash of a block header, and the block header contains the stateroot.
00:09:26.886 - 00:10:09.758, Speaker C: So now that said, it means that as long as you have enough compute to, well, run a bunch of hashes, you can verify the inclusion of either any piece of data ever present on Ethereum. And by piece of data I mean from state accounts with receipts, block headers, pretty much everything that was ever seen on the chain. And that's like the idea that makes storage proofs possible. But there is one caveat. It's really expensive to do it, especially directly on chain. So this is why we use ZK to basically do this heavy computation off chain and then on chain does verify the proofs of doing so. And now why how this is applicable to L2? So like I said at the beginning, the full commitment to the history of the chain is this one block hash.
00:10:09.758 - 00:10:56.074, Speaker C: So what if we can send using the canonical bridge, this one block hash to some L2, and then given the capability, the computational capabilities, let's say start method, also like we can verify this proof directly there, we effectively make L2. It's not just like some platform that derives the security of layer one, but kind of an extension of layer one because it gets access to its own state. So that's what storage proofs do. And now how this is applicable in this context, whenever blockstream x proof gets verified on layer one, we don't have to re verify it on L2 because we can just use the fact that hey, this proof has been verified on layer one. So let's just access the result of this verification on the L2. That's basically where we stepped in.
00:10:58.834 - 00:11:53.592, Speaker A: Awesome, awesome, cool. Well, at the end of the day, blobstream starknet is essentially a tool to enable l three. We do still need to have an integration. And I just talked to Elias at Kakarot, so we'll be doing the fine tuning of the integration with those guys over there. But yeah, I want to talk a little bit more about the broad scale application of blob streams, Darknet and l three s in general. One of the things that we obviously need is some of the things Diego mentioned, which is, okay, now we have a commitment to a state route that reflects a state diff. But how do we prove it? How do we prove that the Starknet OS actually ran the right computation? Some of the cool work that's been done on the Herodotus side, especially is the Chiro verifier.
00:11:53.592 - 00:12:25.864, Speaker A: If you look instead of the perspective of the actual blobstream starknet contract and move out to the actual app chain itself. The app chain itself will need to run the Starknet OS and re execute all the transactions and come and output. Two things, an execution trace to send to the stark prover and the state diff to basically post to Celestia. We need to tie those things together. So Marcella, do you want to talk a bit about the Chiro verifier and how it plays into all of this?
00:12:26.204 - 00:13:03.244, Speaker C: Sure. So yeah, I mentioned proofs already and like you know, with ZK we can build cool stuff such as for example ZK rollups because what a ZK rollup is depending on the model. But effectively we have some runtime that either relies or not. On some ZKVM we run some computation and part of the computation is also writing and reading to some state that we manage. And this is a ZK roll up. But the bottom line is that eventually just some proven computation. But of course when we have the trace, we put it into some prover, we get the proof, but this proof has to be verified.
00:13:03.244 - 00:13:55.014, Speaker C: And as of today the only existing on chain verifier for start proofs generated by stone, by the stone proverb was existing another one and was implemented in solidity. So well how do you build layer three? Right, because you have to verify also these proofs on target in that case. So that's effectively the work that we did. So we got some inspiration from the implementation in Cairo zero of sajorifier, which is used internally by sharp to do recursion. We re implemented the same logic in Cairo one of course with a few caveats, we changed a little bit the architecture, but yeah, now effectively you can take any kind of program such as for example starting to us, pass it through stone, prove it, take the proof, verify it on chain, and you have the usual logic and abstraction behind the fax registry and so on. So that's what we recently built.
00:13:55.914 - 00:14:22.514, Speaker A: Amazing. And yeah, that'll obviously be one of the crucial pieces to actually implement this in an entire app chain stack. So it's awesome that that's available today. Some of the things that's not available today, but that are super interesting is some of the equivalency services that, that Celestia has been working on. Diego, I wonder if you could talk a bit about maybe the future of blob streams, darknet or kind of architectures that this can potentially go.
00:14:24.254 - 00:16:18.184, Speaker B: Yeah, so I mean now that blobstream stagnet is like a thing, right? The community has done a great job at bringing it essentially to fruition, right? And we have a way to relay or read these data commitments from lobster Max on layer one on Starknet. And we already also have the integration with stacks like Madara that simply read and write data using a celestial lite node. The missing component here, to make this essentially a full end to end implementation, like you mentioned, would be to essentially verify, right, that the data posted to celestia corresponds to the state diffs, or, well, the commitment to the state diffs that goes into Starknet OS. And then in that case, there's like, as far as I know, there's like two ways that you can go about it, right? One way is to take your roll up program, which in this case is startnet OS, and you would add whatever necessary modification you need to add in order to essentially ingest the celestia blob commitment to your data, which is your state divs. And inside of starting OS, verify that whatever commitment you have for your data, be it for celestia or for anything else, matches the commitment of your data that is used internally on stagnant OS. That's the Poseidon or Pedersen tree, if I recall correctly. That's one way to go about it.
00:16:18.184 - 00:17:43.752, Speaker B: The other way in which you could finish this integration without having to modify stockinette OS would be to essentially prove equivalency of the commitments that start net OS does your data, but essentially at the settlement layer or at the settlement level per se. So the previous approach does everything essentially inside of the roll up. And you could think about it almost like aggregating proofs, if you will. It's in a certain sense simpler to think about or reason about, because now you just think about it as like, okay, I modified madara, I modified starknet OS, or added this like verification. And I use blobstream with my settlement contracts, which would be something like a piltover, right? And now you're good with the other approach. You would, for example, spin up your madara chain, right, to write batches of data to Celestia, read them. You would still use Pilltober, you still use blobstream to verify that the data routes to which you committed your data to are available on Celestia, right? But then there's the missing piece from step one that you could have done in stargate Os.
00:17:43.752 - 00:19:32.934, Speaker B: And the way you do this is by proving equivalency between the two commitments, right? The Poseidon slash Patterson tree for stagnet and the celestial blob commitment. And what you can do is prove this off chain, right? So you would run this with whatever logic you want, right? You could currently the work that has been done by CnOde at Celestial has been in risk zero. But you could perfectly do this as well in Cairo, right? Like Marcello mentioned, you could run for example like a stone prover, and you could write this equivalency service as a carrier program, run it off chain, verify it on chain, right? And you would just like hook that into the logic of like your settlement contracts so that you know that, that the sequencer slash batch poster, whatever you want to call the node that post data has made the data available. And that way you don't have to essentially get your funds frozen. That's the security assumptions of the lidiums. With this different approach, you would still obviously in the same way that an l three does, you would still run this computation off chain, but it doesn't require modifications to start net OS. It does obviously require having to like one, write this equivalency service either in Cairo so that it can be verified with the Herodotus integrity contracts, or, or program circuits, if you will.
00:19:32.934 - 00:20:27.168, Speaker B: Or it would, or in a similar way to the, I guess like Blobstream on Starknet V two, it would require the b and parents like the syscall to be able to efficiently verify route 16 proofs, because the current implementation of the equivalency service is built with res zero. And you would wrap those proofs into Grau 16 as an example. And yeah, like, it's hard to say which one is better. Ultimately, to make that decision, both of these have to be built right, and then you have to do some benchmarking, take into account infrastructure costs, gas costs, etcetera. But the options are plenty, basically.
00:20:27.336 - 00:21:06.888, Speaker A: Well that's interesting because, and I'm glad you mentioned Piltover, because Piltover is a project that spun out of blobstream, Starknet, just because it's an obvious part of the app chain stack. So Piltover is part of the Twitter thread announcement. I encourage you to go check it out. What it is, is it's the core contracts basically transposed to Cairo. But one of the things that those will free us up to do is experimentation. Those will essentially let us basically not be locked into. This is exactly how the update state function works for these app chains.
00:21:06.888 - 00:21:58.654, Speaker A: But here are five different ways the update state function can work in the Chiro code for these app chains. Pick whatever is right for your customizable app chain. So especially devs listening to this call open source devs we definitely love some contribution on Piltover, but all of those different, varying architectures that Diego said, we can basically have a trait that has an overall description of what needs to be done in that update state and then be able to implement it in a variety of ways. Cool. I mean, that's kind of the last thing I had. Do you guys have any other topics or pieces of conversation or questions or did we leave anything open ended? What do you think, fellas?
00:22:00.954 - 00:22:21.630, Speaker B: I mean, I guess it would be interesting to chat about, like, well, why. Why would someone build a stagnant l three, right? And like, why valydium, I guess, right? Like, that's. That's something that maybe we might be missing from this overall conversation, right? Like, what does this all accomplish, really?
00:22:21.782 - 00:23:19.084, Speaker A: Right, yeah, that's kind of like first principles, right? Like, yeah, what are we even doing here? Yeah, I've gone back and forth about that a bunch in my head. I mean, the stock answer is customizability, hyper throughput. You're always going to get some pushback from cynics that, well, just use a database, you know what I mean? But I do believe you are maybe lessening the trust assumptions as you walk up the stack, but you still gain security and trust from the stack beneath you in anything you're doing in blockchain. So I see value in it there with customization, the security gain and. Yeah, hyper throughput or hyperscale. What do you guys think?
00:23:22.504 - 00:24:53.170, Speaker B: I mean, I think for like once, right, you can essentially build your application that you would have otherwise built on Startnet, but as your own roll up or validium, you're still part of the Startnet ecosystem. There's a lot of things that you can experiment with. Hopefully, once we have versions of this that can be run on testnets, there's the low hanging fruits, like having like a Kakarot l three or Kakarot palladium right on top of Starknet. I think if when you combine the sort of like provable VM paradigm of like Starknet, right, with the verifiability and overall, like, cost reduction that like things like Celestia afford you, you can actually, you have more room to experiment, right? I say this as somebody that before working at celestial Labs, worked as a smart contract developer and I worked on an application that was on the l one. And it's always bothersome when you're thinking about what you're going to build and you're like, wow, this is so cool. It's going to be so dope. And then you realize oh, it's going to cost way too much money or not just to, like, the developer or deploy it, but like, more.
00:24:53.170 - 00:25:23.728, Speaker B: So, like, who's going to use this if, like, each interaction is like $200, right, right. And that's with low gas fees. Right. Obviously, l two solve this issue of, like, overall, like, gas fees on the Ethereum ecosystem, right. But when you. When you have things like l three s or like the lithium, right. Where you're no longer posting data to Ethereum, even after IP 44, which has done a good job at like, reducing fees, you're now talking about like, essentially like almost like zero fees.
00:25:23.728 - 00:25:52.012, Speaker B: Right. And the. In my opinion, the good thing about this combination is that you're. You're building l three set. Like, are verifiable, right? Like, they actually have proofs, right. There's no dangerous games that are being played with, like, trust assumptions and. Yeah, I mean, I'm overall excited to see not just things like Kakarot, like experiment with, like the lidiums and starting l three s or.
00:25:52.012 - 00:26:16.014, Speaker B: Well, the lidiums that are l three s. I don't know, the wording gets complicated, but things like Giza, things like Dojo, et cetera, especially like on chain games, like provable on chain games, really, like, I feel like benefit from like, this overall scheme that or architecture that's being built with Madara and the lidiums for sure.
00:26:16.054 - 00:26:39.824, Speaker A: There's almost like, if you build it, they will come thing where we don't even know the coolest things that will be built on an app chain yet once it's here. Dojo and Cartridge have thrown out crazy ideas, just like an entire autonomous world in an app chain, on a click of a button, you know, that kind of stuff. If you build it, they will come.
00:26:41.004 - 00:27:08.580, Speaker C: Yeah. Maybe. One more reason to build layer three, in my opinion, is that, like Diego, you served, like when. Whenever you have an application, deploy like L2. It's kind of natural to transition to NL three at some point, for many reasons. I think in my opinion, the most notable reason is that suppose that you build something amazing, but. But someone else also did something amazing, which is getting a lot of traction, let's say on layer one, driving up the gas piece, and it also affected, right.
00:27:08.580 - 00:27:33.714, Speaker C: Eventually. And, well, it also runs on the same sequence. Or if it's running both applications on the same layer too, you kind of run into the noisy neighbor problem. And with like a layer for you working complete isolation, you can settle whenever you want. When gas is cheap, you basically control your stack. And I think that's super valuable because you can abstract so many things from your users, you from your users, just because of that, it's probably worth it.
00:27:35.374 - 00:28:15.248, Speaker B: No, absolutely, absolutely. And I mean like there's, there's a bunch of other stuff that like started coming into my head, right? Like, like oracles, like Pragma, right. That are, if I recall correctly, building l three starnet. Right. And a lot of like applications that like benefit from not just the provable Vm or Cairo VM, right. But they also benefit from like cost reduction, but more importantly like verifiability. Like I think that's like the reason why without trying to like be biased, like you would choose something like Celestia Da or you would choose like alt Da.
00:28:15.248 - 00:28:31.054, Speaker B: That's not essentially an AwSs three bucket that ten people sign over like you, you want to have at least some form of like, like security guarantees if you will.
00:28:31.754 - 00:29:09.714, Speaker A: Yeah. And as far as the use case of some type of control over your roll up stack and not running into the noisy neighbor problem, it seems to me like that's basically been proved out. You have things like Dydx, Paradex, these things that have created massive amounts of volume that they don't have to worry about the noisy neighbor. The only thing this is doing is basically opening that stack to anybody who wants to deploy it. Yeah, just pretty powerful. Cool, cool. Anything else you guys have?
00:29:11.614 - 00:30:01.464, Speaker C: I think maybe it's worth to talk about. Also the verification of the graph 16 proofs on Stocknet, I think we didn't cover that, but yeah, there is a project called Garaga, which we have the pleasure to be contributors to as well. And yeah, basically soon. I think around the summer there is a chance that this will be available on Starknet, but also maybe here I would say something pretty weird, but actually today it's even possible to already have blobstream X in my opinion, because you can prove the execution of Garaga, which requires some heat. You can prove it, you can just prove it with stone and then verify like stone proofs and Startnet, which is also potentially like an interesting architecture, and you can batch those together, which is even funny.
00:30:02.244 - 00:30:41.858, Speaker A: Okay, let me ask you a question. Okay. So one of the things that gross 16 opens up is that cleaner architecture of basically verifying the succinct x. Diego, if you don't mind muting or maybe I can do it. So basically verifying the gros 16 proof of succinct X platform, which is what, what is it called? Grok. No, there's some solidity library that does it. For L1, it basically auto generates the function verifier on.
00:30:41.976 - 00:30:42.718, Speaker C: Yeah, thank you.
00:30:42.766 - 00:31:28.652, Speaker A: Thank you. So on L two, if we unblock this pairing, we can essentially do this function gateway, which is succinct X's, succinct's platform in solidity, where anyone can go auto generate a function verifier for Graa 16, and then they can basically prove whatever their circuit is proving. That's actually what Blobstream X is, actually one implementation of a function verifier in the succinct gateway. So maybe, Marcelo, can you walk through like originally, what we were thinking is that once that graph 16 gets unblocked on Starknet, we would just implement it in Cairo. But if we did it with this way, what would that architecture look like?
00:31:28.828 - 00:32:12.464, Speaker C: I mean, as of today, it's changing a bit because there is a new built in being added to Cairo, which is very specifically like modular arithmetic. And this is not yet supported by Stone, I believe. But that's a good question to some starker folks. But yeah, like this version was possible from what I recall, to just prove it, you know, with normal Cairo, then you throw it into stone and voila, we have a stark proof that proves the verification of the graph 16 proof. So that was possible. But I think right now with this new Cisco, just do it directly. There is no need to wrap it, but it's maybe going to enable lower latency.
00:32:12.464 - 00:32:22.704, Speaker C: But the question is also going to be around the cost, because maybe it will be the case that it's still cheaper to verify a storage proof. A storage proof really depends.
00:32:23.164 - 00:32:24.660, Speaker A: Interesting. Cool.
00:32:24.852 - 00:32:35.684, Speaker C: But you can also aggregate, you can generate a star proof that verifies, that proves the execution of many gross 16 proofs. Yeah, there is like a lot of these things that can be used here.
00:32:36.024 - 00:32:37.044, Speaker A: So you said.
00:32:37.624 - 00:33:52.684, Speaker B: Yeah, I just wanted to add one thing to think about, right. Is that, so there's like this, like V two, right, of Blobstream X, where you were verifying the already existing Blobstream X proof on Cairo through like grot 16 and grog and whatnot. And obviously that has the benefit of now it shares the same proof as the Ethereum one version, etcetera. But there is also the possibility, I'm not saying it's a simple task, but you could build Blobstream X or the logic underneath blobstream X, which is tenderminx as a Cairo program. Given that if you were to put side by side like blobstream and Blobstream X. Like the main difference is like how you verify that, like a data commitment or a batch of headers is valid, right? In v one, it's like you have to loop through signatures and verify all those in Blobstream X. You verify this grot 16 proof of the planky three proof or, sorry, planky two proof and that's it.
00:33:52.684 - 00:34:46.813, Speaker B: Right. So you could in maybe like a b three or b 2.5, I don't know, you could try to build tenderminx, but using Cairo, and that way you no longer need to wait for this pairing. You could verify it with integrity. But another thing about Tendermin X, right, is that like, yeah, it's used for blobstream and that would help a lot with blobstream X. But because tendermin access is proving tendermint consensus, right, you could, for example, use this for other applications that might want to talk with other or interact with other cosmos based, like chains, right? Or chains that use tendermint under the hood, basically. I think that's like worth exploring in the future.
00:34:47.353 - 00:35:12.924, Speaker C: Yeah, definitely. Like Cairo is really powerful. It's a Gkvm. You can do quite a lot of stuff with it. So literally nothing prevents you from implementing a program that just verifies a bunch of signature and then call it consensus verification. I guess you can do it. The question is, what's going to be the benefit of that? Probably you avoid going through graph 16, so you don't need to generate a graph 16 proof, which probably takes a while.
00:35:12.924 - 00:35:18.824, Speaker C: You just go directly through a stark. Yeah, there is a lot of possibilities.
00:35:18.904 - 00:35:21.608, Speaker B: The question is, you know.
00:35:21.656 - 00:35:21.840, Speaker A: Yeah.
00:35:21.872 - 00:35:23.288, Speaker C: Is it actually worth it?
00:35:23.456 - 00:35:24.204, Speaker B: Yeah.
00:35:25.904 - 00:35:44.174, Speaker A: Let'S build it. Let's see. Sweet, sweet. This has been awesome conversation, guys. Yeah. I want to thank, I want to thank Marcello for joining, I want to thank Diego for joining, thank both you guys for, for helping with the integration to where we're at. There's obviously a lot of exciting work to be done.
00:35:44.174 - 00:36:10.954, Speaker A: Like we've, like we've kind of just talked about a lot of avenues to take, a lot of code to write. So if you are listening to this and you're a dev, we would love to have you. The repo is GitHub.com, keep Starknet strange, blobstream, Starknet, and you can also find us on Twitter or on telegram. So yeah, once again, thank you guys. I really appreciate it. This has been awesome and have a great afternoon or evening.
00:36:12.174 - 00:36:12.942, Speaker C: Thanks.
00:36:13.118 - 00:36:15.634, Speaker B: Have a good one. Bye.
