00:00:02.570 - 00:00:40.758, Speaker A: Be able to publish the recording later on for people want to know what we said in this community. So without further ado, let's start. So Kyle is with us today. He will present Zoro. Then we'll have Tom and maybe Louis if you're available to speak to, and we'll be able to talk a bit more about what's going for Starknet Alpha in the next few weeks. And yeah, so, Kyle, the floor is yours. We're listening.
00:00:40.758 - 00:00:51.820, Speaker A: I'm super curious. You released your Twitter profile and a website. I had heard about Zoro a bit from the past, but I'm very curious to hear you present it.
00:00:52.510 - 00:01:28.460, Speaker B: Absolutely, yes. I'm excited to talk about it as well. And I will definitely try and keep it short because I'm also excited to hear about from Luis and just the starware folks about the new release that's coming up. But I am very happy to give a brief overview of Zorro. Like I said, I'll try and keep this brief. I kind of have a couple of segments in the presentation. First, I'm going to just give a brief overview of what we're building, why we think it's an important problem, and then I'm going to talk about what we've learned as we've been building on top of Starknet and working with Starkware for the last few months.
00:01:28.460 - 00:01:41.302, Speaker B: Hopefully things that will be useful for others considering or on the same path. Cool. I'm hoping. Henry, can you see my. You should be able to see the screen share for folks.
00:01:41.366 - 00:01:42.540, Speaker A: I can see the screen.
00:01:42.910 - 00:02:09.074, Speaker B: Great. Okay. And then again, there is a link in the discord community calls chat for anyone listening on discord if you want to see the presentation. But I'll try and talk through it so it comes through on the audio as well. Cool. So first I'm going to give a brief introduction to the problem we are trying to solve as we build Zoro. And so the general name for the type of product Zoro is, is called proof of personhood.
00:02:09.074 - 00:02:45.380, Speaker B: And basically, proof of personhood is the ability to demonstrate online that you are a person and that you are a unique person. Okay, so this is somewhat different from Captchas, which a lot of people are familiar with. With a CAPtCHA, you're just showing that you are a person. But a captcha does not protect you against one person creating multiple accounts, because one person could just create an account and solve the caption, then create another account, solve the captcha again. So proof of personhood is not only showing that the person operating the computer. Right now is a person, but that they're a unique person. They only have one account with this specific service that they're interacting with.
00:02:45.380 - 00:03:45.390, Speaker B: And the reason why that's important is because it unlocks a lot of interesting, I guess, organization types that really can't exist online today. So if you're looking at the screen, you'll see a chart that I just put together before this kind of explaining the difference between basically the new types of applications that will be available online if we have a reliable proof of personhood protocol available. So you can see there's a horizontal axis here, basically going from things that are less democratic to more democratic. And democratic. I'm using that term somewhat loosely in this specific context. By democratic, I just mean basically that you weigh every human equally, or every human gets an equal voice, is treated equally by the protocol. That's kind of what I mean by democratic in this context.
00:03:45.390 - 00:04:27.746, Speaker B: So on the very kind of undemocratic level, you have sort of a traditional corporation. Generally, these are quite hierarchical. They have a CEO ultimately called shots. And then even if the CEO gets overruled, it's usually overruled by a board of directors who, again, is based on ownership in the company, not by sort of like a company vote or something like that. And then you can get kind of. I would say it's a little bit more democratic. If there's a lot of protocols on chain today that use coin weighted voting to decide on protocol changes, I would call this somewhat more democratic, even though there's nothing enforcing that.
00:04:27.746 - 00:05:02.994, Speaker B: The coins are evenly distributed and not just one person controlling everything, but in practice, usually protocols that see a lot of usage also have somewhat more distributed ownership. That's another reason that's somewhat more democratic. Next you get. I'm not sure, Zoom popped up. Weird dialogue. Hopefully everyone can still see me. And then there are certainly protocols that try and do things like airdrops based on wallets that have interacted.
00:05:02.994 - 00:05:47.946, Speaker B: ENS had a big airdrop recently, was based on unique domain names, and they're trying to make it more democratic. Certainly because you figure in the ENS case, most people register a limited number of domains, but there's nothing really enforcing that because one person could just create a bunch of addresses and sign up for a bunch of domains. There's nothing really enforcing that. Different ethereum addresses, in that case belong to different people. So those are all things that are possible today without any proof of personhood. And then moving further right on the axis, I have several examples of things that really, these are generally all the things on the right side are kind of like things in the offline world that don't have a good online equivalent right now. And I would argue the reason they don't have a good online equivalent is.
00:05:47.968 - 00:05:48.540, Speaker C: Because.
00:05:50.750 - 00:06:52.282, Speaker B: It'S quite hard to govern these sort of informal or in some cases, formal organizations democratically, when it's just really easy to create duplicate accounts and no one can really tell. So we have things like local clubs, like sports leagues, things like that, things that often exist in the real world, and they'll often have memberships and you can vote in them and things, but that doesn't work as well online because, again, people can create lots of accounts you've got in the real world. Hoas, this is a big thing, and certainly in the United States and in other countries as well, I know where a local neighborhood will maybe try and work together to all improve their local environment. And generally, those are done on a democratic basis, where everyone who owns a home kind of has an equal voice. Moving more in the democratic direction, you get elections. So in well functioning democratic countries, everyone's vote is counted equally. And that's actually not fully to the right on the democratic thing, because there's still requirements.
00:06:52.282 - 00:07:49.038, Speaker B: Right? And like, for example, to vote an election, you often have to be a citizen or certainly a resident of the country. It's not like everyone's voice is counted equally in the world. And I think that for most applications, that makes sense, and that's probably right. I think it would not probably be effective for your local soccer club to let anyone in the world who just happens to stop by, cast a vote on the game schedule or something. So I do think that it makes sense to combine other requirements along with, just, like, the fact that you are a person to give voting power, and all of these do. Maybe one big exception to that is with Ubi or universal basic income, where if you're trying to do this at a global level, it may make sense to literally give everyone an equal voice in it. But, yeah, for most things, you probably want to combine a proof of personhood with some other, perhaps proof of membership or investment or something like that, as is the case with all of these traditional organizations.
00:07:49.038 - 00:08:35.262, Speaker B: So anyway, basically, what we're trying to solve with Zoro is letting all of these things on the right side of the page exist online, even though you have a hard time today of figuring out whether someone is unique person or not. Cool. All right, so basically, I kind of explained this already, but Zoro lets you prove your unique person. There are a few attributes there are existing protocols. Proof of humanity is one that we sort of spun out of, and there are other protocols as well that try and solve this problem with Zoro. We're specifically trying to make this as fast and as cheap as possible, ideally free, while still being very secure. So it's quite difficult and quite expensive to create a fake account and get it past the security checks.
00:08:35.262 - 00:09:09.130, Speaker B: And also, we think privacy is really important. So with our implementation, we do have a public registry of everyone who signed up, but then we have a design to use zero knowledge proofs to disconnect that from your specific on chain activity. Yeah, so that's what Zoro is. So we've been building this the last four or five know. As far as the actual deployment on Startnet, we're very close to done. There are a few features we're still waiting on, maybe announced today. Not sure things like getting the timestamp is important for this protocol.
00:09:09.130 - 00:10:05.786, Speaker B: We have a live testnet. We've been testing it internally. We'll be launching a public testnet launch very likely for this month, in the next couple of weeks, and then at some point we will graduate to mainnet. Okay, so now that you have a little bit of background of what Zoro is and what we're trying to accomplish with this, I thought it would be particularly useful for this audience to talk about how we landed and what we were looking for and why we decided to build on top of Startnet. So the first thing, and really, to be frank, the most important consideration was just the fees, the gas fees specifically, and how startnet could help us solve that problem. So I signed up a few months back for proof of humanity, which is a similar protocol on Ethereum main net. It ended up costing me about $150 just in gas fees to get my profile registered.
00:10:05.786 - 00:11:11.300, Speaker B: And that's just. I mean, I understand it's not their fault, but that's pretty exclusionary. There's a lot of folks who can't or don't want to spend that much money on registering their profile. So solving that problem was really important to, we think, making this inclusive and widely adopted again, because the fees are so much lower on startnet specifically for compute, but also even for data storage, we felt we had a broader protocol design space. We could use more transactions if we needed to. We could do more computation, more checks to make sure everything matches the requirements, and do that all on chain in a very trustless way, as opposed to having to spend a lot more time gas golfing. If we were writing in Ethereum or in solidity on main net, and this translates downstream into a better user experience, again, because we have that wider design space and also because the fees to the end user are lower.
00:11:11.300 - 00:11:56.770, Speaker B: Another reason why, compared even to other roll ups, we landed on Startnet is because we were really excited by the Ellium concept, which startnet I believe invented, but certainly has prominently discussed on their roadmap. That's really important to us. It'll drive fees even lower. Right now, we think just the data storage costs for the Zoro protocol will cost about $5 per profile, which is a lot better than if we were running on Ethereum main net, but still significant on a per user basis. And if we're able to use a validium that could drop to much lower just depending on what the data storage costs are. Primarily. Those were kind of the main considerations we had in mind and why we decided to build on Startnet.
00:11:56.770 - 00:12:46.720, Speaker B: So once we started, we certainly have learned a lot over the last few months as we've been building one of the first early products on top of Startnet, along with probably other people on this call. And so I thought it would be helpful to share a few of the things we've learned as we've gone through that process. Okay, so first one, Cairo, the language which is used on. Well, I guess I specifically was a little bit concerned when I first started learning Cairo because it's very low level. There's a lot of kind of like syntactic sugar that's missing, a lot of kind of these magic incantations where you have to kind of thread built ins through and alloc locals and things like that. So it felt like it was easy to mess up. In practice, that hasn't been an issue at all.
00:12:46.720 - 00:13:58.342, Speaker B: The nice thing is, if something blows up, if you do something wrong, it kind of like the compiler tells you in your face like something is very wrong. And so that's much better than kind of like a subtle bug slipping in and leading to a vulnerability in the contract. And so at least for the sort of logic that we're writing for Zoro, I think actually Cairo has been a really good choice. My co founder, Ted, who has written more of the contract than I have commented that he feels like it's actually better than solidity, because even though it's lower level, you know exactly what's going on, it feels like there's less room for foot guns, and if you do something wrong, the compiler yells at you. And so that's a nice feeling, nice guide rails. Now, on the other hand, one of the downsides compared specifically to solidity, which is the main alternative we were considering as we were trying to figure out what to write this in, is that the ecosystem around Cairo and around Startnet as well is still of course very young, very early. It feels like there's a lot of either missing infrastructure or sort of infrastructure that's being built just in time as we're building it.
00:13:58.342 - 00:14:49.174, Speaker B: We started right around the time startnet JS was released and so that started out being pretty immature. It pretty much covers our needs now, but we kind of had to wait and contribute a little bit to get that to a good spot. Same with Argent X. That wallet didn't exist and is quickly getting to a spot where it does everything we need. But we didn't have originally the local development environment. It's kind of hard to get it set up right. Right now we're deploying everything against Testnet because just like getting a local development set up where we had starting to running locally and then talking to a local ethereum thing as well, because we do have some places in our contract where we have to talk to the elbow as well.
00:14:49.174 - 00:15:17.410, Speaker B: That was just very hard to get set up locally. So anyway, very young, definitely a lot of rough edges there. We've spent a lot of time, Ted especially spent a lot of time in the startnet discord, talking to perhaps some of you on this call and figuring it out. But it is maturing rapidly. A lot of those issues are already solved or being solved. And then of course same thing. There are some features, things like the timestamps, the fee schedule to make sure we're not doing anything terribly expensive.
00:15:17.410 - 00:15:48.826, Speaker B: Having a well supported ERC 20 for us specifically, we'd really like wrapped Ethereum is really important before we can go live. So that said, those are all things that are actively being worked on. I expect. We don't expect that these will be lockers for our launch. And that's definitely a credit to the Starcore team and how quickly they're moving, which has been really fun and really inspiring to watch. Okay, and I'm almost done. Just a few other things I wanted to share.
00:15:48.826 - 00:16:29.270, Speaker B: So those were kind of like lessons learned, some positive, some negative. There's also just been some fun, positive surprises we've had, especially in the last few weeks as we've been launching, that we've learned from more, I guess validation that building on Starknet and with Starkware was a great choice. So we launched, we publicly announced about a week ago at this point and we didn't expect much from that initial launch, because we weren't working on publicizing it. The protocol isn't public yet. We have a white paper, we have a landing page. We haven't done any public testing of the actual flow yet. And so we didn't expect to get much attention.
00:16:29.270 - 00:17:22.730, Speaker B: And we've been really floored with how much attention we have got, primarily coming in from members of the starware community just really excited about things being built on Starkware. And so we got, within a few days, 1000 Twitter followers. We have 300 people in our discord, and that's without us doing any publicity or having a product. So that was just built energy felt exciting. And then also kind of this next one is, it's harder to quantify. But as we've been talking to specific dows who are interested in democratic governance, specific integrations, folks generally have been really excited, really supportive, and just been excited to talk to us about our experience building on Startnet. I think it has a perception within the wider web3 ecosystem of being secure, being fast, being cheap, and there's just a lot of excitement around startnet in general.
00:17:22.730 - 00:18:00.710, Speaker B: And so by building on top of that, it certainly seems like some of that has rubbed off on our protocol as well, which has helped us out as we're having those initial conversations. So that's also been a positive surprise. And in fact, there's a couple of projects we're talking to right now who are kind of like, seriously considering rewriting and moving to startnet themselves. And so, of course, we've been able to talk to them about what that experience is like. And also, it's much easier if they're rewriting in starnet and we're already on startnet for them to integrate with us as they're working on that. So that's been a surprising and positive outcome as well. Anyway.
00:18:00.710 - 00:18:09.030, Speaker B: And, yeah, that's it. So I am happy to answer questions if we have time. But anyway, that's everything I have prepared.
00:18:12.570 - 00:18:48.390, Speaker A: Fantastic. Thank you for your presentation. This is really interesting. So if people in the audience have questions, you can ask them in the community poll channel, and we'll answer them. If you don't, I have a few, so I don't see questions, so maybe I'll start. Actually, you know what? There's a question that's something I wanted to mention, something that I find interesting. You mentioned proof of humanity, saying that you're close to them, actually have this t shirt.
00:18:48.390 - 00:19:59.686, Speaker A: Anyway, from proof of humanity, I hope I'll get a zoro t shirt, something that happened to a friend of my brother to whom I told hey, you should register. It's something, it's for human. And it was his first time in Ethereum. He created an Ethereum address and then when he published it, his profile, he made a mistake when he copied his Ethereum address and so his profile was marked as invalid and he lost his deposit. And this is like on top of the gas fee and everything, this is not a great experience for a newbie. So I think this is great that you'll have a lower fee to access these kind of protocols. And I'm wondering, how do you think the user experience for people who are not familiar to the space will differ from Ethereum to staring in it? Because of course we have a bit less tooling, but we have some tools that are pretty useful, like for example, humanity.
00:19:59.686 - 00:20:15.746, Speaker A: If you want to submit your profile, you need eth. So you need a person who has a wallet. With east you can abstract that away in Starknet, right? Because you could use a relayer. You could do a bunch of nice tricks to avoid that. How do you expect this experience to change? Do you think it will be significantly different or not that much?
00:20:15.928 - 00:20:46.890, Speaker B: Yes, I think it will be a big difference both quantitatively and qualitatively. So quantitatively, because the fees are so much lower to submit a profile on startnet, we can get away. Even if you had basically ported over the existing proof of humanity experience directly, it would be much cheaper. The gas fees, like they said, we're estimating about $5 to submit a profile. And that's even without. And that's assuming we have to store everything in l one call data. So with validiums we hope it'll come down even further.
00:20:46.890 - 00:21:36.490, Speaker B: And we think that qualitatively we can also make the experience very different. So we have some early grants and we're hoping that at least for our first few, maybe tens of thousands of profiles, we can fully subsidize the cost of creating the profile. So that means users, they won't even have to interact with the chain at all to submit their profile because we'll cover the fees for them as long as they give a valid profile. And so we have in our white paper we kind of explain how that process works. We have a notary system that will be decentralized and run by basically approved members of the community. And so they'll be the folks responsible for certifying that a profile is correct. And if so, then we'll use our grants and our protocol treasury to submit the profile on their behalf.
00:21:36.490 - 00:21:54.850, Speaker B: And so that should make the experience much smoother, much easier for a couple of reasons. First of all, because you have a notary checking over your profile so you won't run into situations like your brother did, where you submit and then realize you lost your deposit. And also just because you won't have to put down any money at all, which of course, will make it much smoother.
00:21:57.350 - 00:22:04.850, Speaker A: Great. Thank you. So there are some questions here. So one person is asking, does the project relate to Claros and democracy Earth?
00:22:05.690 - 00:22:47.518, Speaker B: Yeah, so we are using Claros as sort of our challenge. So it is possible to challenge a profile that has been submitted. There's basically a deposit submitted with every profile, and if you challenge successfully, you get the deposit. And we are using the Claros court system to basically adjudicate those challenges and democracy Earth. So certainly nothing to announce right now, but we are definitely talking very closely with folks there. And of course, the UbI project that they have deployed right now. I think there's a lot of people excited about making that more inclusive.
00:22:47.518 - 00:22:50.820, Speaker B: And being on Starknet might be one way to do that.
00:22:51.590 - 00:23:32.670, Speaker A: Super cool. So Kadjam has a bunch of questions. Who has the ability to delete the Zoro personhood we create? Who has the ability to attach merits to the personhood or remove them? And who will your merits be visible to? So I think these questions are very app specific. So I don't know if you can give a global overview of maybe Optim protocol. And specifically to the question, who will your merits be visible to compared to, for example, proof of humanity? Would you add some kind of zero knowledge flavors that you can prove some stuff without disclosing them to everyone, necessarily?
00:23:33.190 - 00:23:58.274, Speaker B: Yeah. So let's see. There's several questions here, I guess. First, deleting personhood that's not implemented yet, but it's definitely like an easy thing to do, and it would only be the individual in question and then removing them. You can challenge profiles, and if you are successful, then it is removed. So merits. Yeah, so this is a concept.
00:23:58.274 - 00:24:34.638, Speaker B: I call them credentials. It sounds like the same thing you're referring to as merits here. But yes, we don't have that built into the protocol directly. However, we expect either we will build it into the protocol or someone else will build on top. It doesn't have to be part of the protocol, a system where within the protocol, we will have a system of basically being able to create multiple identities, and each identity lives within a namespace. And so that means you can have different identities that are all linked back to the same Zoro protocol or the same Zoro profile. And each one you can use, if you want to use, say, different addresses or different contracts.
00:24:34.638 - 00:25:30.390, Speaker B: If they're on startnet, different wallet contracts with different apps, they can all point back. You can prove with each different contract that you are a person as long as each of them is in a different namespace. So as long as an app only accepts contracts with a certain namespace, then the app can be sure that everyone using it is a unique user. But if you go connect to a different app that uses a different namespace with Zoro, then they will have no way of connecting you to the first app. And then as far as moving, say, credentials or merits, as you call them, between them. Yeah, that's actually pretty trivial to do. You can write a zero knowledge proof that basically shows, hey, one of the aliases I have in one of the namespaces has this certain merit, and you can apply that, and within the proof, you can basically link that merit to any of your other aliases.
00:25:32.330 - 00:25:41.846, Speaker A: I think that's the first time I hear somebody say, oh yeah, zero h proof. This is pretty trivial, but I'm guessing that's good. It means the space is maturing.
00:25:41.878 - 00:25:46.458, Speaker B: It's maturing, yeah, I think that's probably what's an indicator of great.
00:25:46.544 - 00:25:49.980, Speaker A: So synoptic is asking, will you have an ambassador's program?
00:25:51.250 - 00:25:53.920, Speaker B: Let's see, is that in the Discord channel?
00:25:54.530 - 00:25:55.760, Speaker A: It's in the community.
00:25:56.370 - 00:25:57.726, Speaker B: Oh, cool. Yeah.
00:25:57.908 - 00:25:58.302, Speaker C: Yes.
00:25:58.356 - 00:26:29.960, Speaker B: So there's going to be lots of space for community contributions early on. We'll definitely be looking for help with notarizing applications. We expect that that's going to be something that could use a lot of help from the community. And then also I think there's going to be specifically around ambassadors. We don't have a program planned, but it does seem like the kind of role that we're interested in. We definitely want to use the community's energy to make this more.
00:26:32.010 - 00:26:47.600, Speaker A: Thank you. So Mario is asking, what are your thoughts on someone skipping solidity and picking up Cairo directly? Would that change how you would advise to learn it?
00:26:48.130 - 00:27:43.934, Speaker B: Yeah, that's a good question, Mario. So I think if you're interacting cross chain, which I think to build most things today you'll end up having to do, you probably will have to pick up at least a little bit of solidity. That said, I don't think you certainly shouldn't feel like you need to learn solidity as a prerequisite for learning Cairo. They're very different languages. Come from very different places. And so I don't think that even, I mean, I would say if you understand kind of like smart contract development in solidity, that does help you to the degree that you understand kind of the common patterns of like, oh, this is kind of like how you would map addresses, maybe, or this is kind of like how an ERC token works internally and maps balances and things like that. So those kind of concepts, I think will carry over, but the actual language, I don't think there's much that would carry over.
00:27:43.934 - 00:28:02.070, Speaker B: So I would recommend, I think you're totally fine to learn Cairo first, and then there's going to be things just in the existing smart contract ecosystem that you can pick up over. I wouldn't, I wouldn't probably prioritize learning solidity if you're planning on deploying something on Starknet.
00:28:02.730 - 00:28:35.134, Speaker A: Thank you. Actually, related to this question, I have another one. You mentioned that the challenges will be managed through Claros. So I'm guessing on l one, or at least on another chain. And so this means that for your application, you relied on the messaging breach between Starknet and l one. I was curious if you talk a bit about that, what were challenges? Good things, how you approach this. Because the way I understand what it is you're doing, you're not just transferring ERC 20.
00:28:35.134 - 00:28:53.880, Speaker A: Right. You have to send data from one DaP on l two to another Dap on l one and back. And so in a way, you can send message, but the content of this message, the way it is formatted, is totally up to you. Right. So you had to design some kind of protocol, I imagine. I was curious if you could talk a bit about that.
00:28:54.490 - 00:29:25.482, Speaker B: Yeah, good question. So, yes, that's actually something that we finished up quite recently. And you were correct. So the Claros court lives on ethereum l one. They do have plans, like most people on l one to eventually move off that, but it's going to take a while. So right now, yes, we are basically. So the way the challenge protocol works is when you're on Zoro and you challenge a profile, you submit that challenge as basically like a transaction on l two.
00:29:25.482 - 00:30:00.918, Speaker B: So you submit that to Startnet and that starts a challenge process. And actually the first thing that happens after that challenge happens is we do an on startnet adjudication. And the reason why is just because it's so much faster and so much cheaper. I mean, just paying the gas fees and the court keep fees in Claros is so expensive that we'd have to have very large deposits for it to make sense if we were moving there for every challenge. So basically, the first thing that happens is someone within Zoro. So, I mean, it's myself and my co founder right now. We obviously are going to bring more people into that process as soon as we're live, will look at the challenge and make a ruling on whether it's valid.
00:30:00.918 - 00:30:35.266, Speaker B: Now, the thing is, though, we definitely don't want this to just be like a registry of the people that we have approved. And so once we've made a ruling, then anyone can go in and appeal that ruling. And that's at the point where it goes to Claros. So when you appeal the ruling, basically what happens is this was actually kind of like a tricky thing to get right on the right design. But essentially what happens is we make a ruling on the l two within the Cairo contract on Startnet. And so that puts the profile into an appealable state. And so for the next three days after we've made a ruling, anyone can appeal.
00:30:35.266 - 00:31:34.330, Speaker B: And the way you appeal is you go to l one. And I mean, of course you're doing this all within the same Dap on the website. But what actually happens is you're submitting a transaction to l one and to a sort of bridge contract we have on the l one that sends a message from the ethereum l one to the startnet contract on l two. And that message essentially says, like, okay, someone has opened a dispute on the given profile, so you have to submit the specific profile that you are challenging. And then when that hits l two, the l two contract has to check whether that profile is currently in an appealable state. So basically, if it's recently been ruled on, and if it's not, then basically your appeal is considered spurious and it's thrown away. And if it is, then it's like set within the contract that this is the specific appeal.
00:31:34.330 - 00:32:11.154, Speaker B: And so then from there, the case goes normally within the Claros side. That all happens on l one. That all happens out of our code. That happens in Claros's code. One of the steps is the people, the jurors have to check and make sure that this dispute was successfully set in the l two. Basically, we have a Ui they can look at where they can make sure that the profile was essentially in a disputable state at the time that the court case was opened. And then anyway, so they rule on that.
00:32:11.154 - 00:32:55.460, Speaker B: Eventually Claros decides, yes, this profile is valid, or no, it's not valid, and then that just sends a second message to l two, which says, okay, for this profile and this dispute id, this was the outcome. And at that point, it's pretty simple. We just set that outcome within the. So basically when Claris finishes, it sends back a message to our bridge contract, which is on l one. And then the bridge contract is what sends a message to l two. And that bridge contract, that message to l two is very simple. It just sends a profile id, a dispute id, and then the outcome of the court case, if it was positive or negative, and then we received that within our Cairo contract and then just basically set the profile state based on the outcome from.
00:32:55.460 - 00:33:20.266, Speaker B: Yeah, it was honestly pretty straightforward. I mean, the hard parts. The hard parts. The infrastructure is actually hard and kind of annoying because it's hard to have a local test net for Ethereum and start net running locally right now, which makes it just hard to test. But my understanding is that's getting built. So hopefully that won't be as much as painful for the next people who.
00:33:20.288 - 00:33:21.200, Speaker C: Have to do this.
00:33:25.090 - 00:33:45.858, Speaker A: Okay. Thank you. So let me check if we have other questions. It looks like we have answered most questions, so, yeah. Tyler, thank you again for taking time to share. I'm sorry I was muted on discord. Now people can hear me.
00:33:45.858 - 00:34:20.094, Speaker A: So, yeah, there are no more questions. Thank you for your time, Kyle and Frankie, for taking time to present what you're building on. It looks really interesting and I really appreciate the fact that you guys take time to explain what are the challenges and what are things that work? Things that work. It's less on Starknet. And for example, there took time to write a guide from ecommerce to Cairo. I think it brings a lot of value to the community. I think this is great.
00:34:20.094 - 00:34:20.734, Speaker A: Thank you.
00:34:20.772 - 00:34:21.134, Speaker C: Thank you.
00:34:21.172 - 00:34:25.266, Speaker B: Yeah, it's fun. It's a great community. We love what you're building.
00:34:25.448 - 00:34:49.980, Speaker A: Great. And so with that, I think we can move to the second part of our community call and we can call up our next speaker, who is Tom. Our very own Tom brand will talk with us about the upcoming features to Starknet and we will know if Kyle's cliffhanger will work. Will he get the features he requires? Is there to go live?
00:34:51.630 - 00:34:52.522, Speaker C: Are you here, Tom?
00:34:52.576 - 00:35:00.740, Speaker A: Can you hear us? I can hear you. Let me check. I don't think. Yes, you're in the discord too.
00:35:02.170 - 00:35:08.680, Speaker C: Yeah, I think I'm on the discord and on Zoom. Awesome. Yeah. So hi, everybody.
00:35:09.690 - 00:35:12.680, Speaker A: Yeah, I'll let the floor up to you, Tom.
00:35:13.950 - 00:35:52.618, Speaker C: Thanks. Okay, so today we are upgrading Starknet, Alpha and Garly to the new version, which is pretty big version and we're currently updating it. There will seem to be some problems. So the system is working now, but things are a little bit slow. Hopefully it will be solved soon. In any case, we can still go over what is expected to be added. So I think the best thing would be to just go over the post that we wrote.
00:35:52.618 - 00:36:02.950, Speaker C: So I will share it on zoom, but I will also just go over it. So feel free to stay on Discord or join zoom, whatever you want.
00:36:03.100 - 00:36:07.420, Speaker A: Can we share the post on discord too? Is it public yet?
00:36:10.750 - 00:36:16.410, Speaker C: Yeah, why not? We wanted the system to be stable.
00:36:19.870 - 00:36:21.740, Speaker A: Direct from the found break.
00:36:23.730 - 00:36:42.360, Speaker C: Okay. So I posted it on the community calls channel right now. Okay. And I'm also sharing my screen on the zoom. Can you see it?
00:36:43.450 - 00:36:44.680, Speaker A: Yes, we can.
00:36:45.850 - 00:37:26.142, Speaker C: Okay great. So starting with Alpha 0.7 was released to Gurley today. The first thing I wanted to say, which is maybe the least important one, but just so nobody will be confused, so we changed the naming convention of the alpha versions. If you remember, we had different numbers for the stagnet alpha and for the Cairo package, which was, I don't know, a decision which we made. I'm not sure it was a good one, but in any case it created more confusion than anything else. So we now just removed the numbers of the starnet alpha.
00:37:26.142 - 00:38:11.042, Speaker C: So the latest or the previous version was alpha four. So we're not continuing it and calling this version alpha five, we're just sticking with the Chirolank versions. So this is starting at Alpha 0.7 and respectively, it comes along with an update to the Chirolank package of 0.7, version 0.7, also to the Caroline package. Okay, so hopefully it won't create a lot of confusion, but in any case this is a very big version and we highlighted the most important list in our opinion features in this post.
00:38:11.042 - 00:38:41.962, Speaker C: But you can also go to the Caroline repository and see the full release notes there. And I think the three most important things that were added was first of all, contracts can now be upgraded if they are using the proxy pattern. I will explain it in a minute. We have events. Yeah, we have events. So contracts, you can use events in contracts. I will go over it in a second again.
00:38:41.962 - 00:39:33.702, Speaker C: And we also have system calls to get block number and block timestamps. So hopefully it will allow many applications that waited for it to continue in their development. Okay, so this is the TLDR. Let's go one by one. Okay, so contract upgradability, open Zeppelin's proxy upgrade pattern is probably the most common way to upgrade contracts in Ethereum and we now fully support it. On Starknet there were basically two required features in order to support it. One of them was added in the last version and the second one was added in this version.
00:39:33.702 - 00:40:09.186, Speaker C: So now it is possible. We also created a short tutorial on the hello Starknet documentation which you can follow and understand exactly how it works. I won't go into it right now, but open Zeppelin are already working on a standard contract that would allow to do it on Starknet, and you can see a prototype which is already being developed. So it's very exciting. So this is the poxy pattern.
00:40:09.298 - 00:40:32.430, Speaker A: If I can add something just very quickly here, this does not mean that all smart contracts are upgradable. It means that a specific app feature which is upgradability for some smart contracts that decide to do so, they can implement it when they couldn't. I just want to underline that smart contracts are not upgradable by default on StarCraft.
00:40:33.010 - 00:41:44.738, Speaker C: Yeah, this is true and good point. If you want to read on what is the proxy pattern, you can just go to the open Zeppelin and described it here. But basically it's a very nice pattern that allows user or contract to maintain ownership over a specific address while still updating the logic of what is being executed. So it means that you need to deploy your contract in a specific way that can allow it. But I think it's a very important feature at that point of time for stagnat alpha because since many of the features are not yet available, but will be available very soon, it makes sense for applications to deploy using this proxy python to allow adding those features as we progress. And also it is very convenient to deploy an account contract with this proxy pattern because it means you can add features to your account contract and still keeping the same address. Okay, so this is contract availability.
00:41:44.738 - 00:42:10.510, Speaker C: Next we have the block number and the block timestamp, which is, it was asked many times by many of the applications and now it's available. I don't think there's a lot to say here, but you can go and read the tutorial. Basically you have get block number which returns the current block number, and you have get block timestamp which returns the creation timestamp that the sequencer gave to this block.
00:42:10.850 - 00:42:20.020, Speaker A: I think it doesn't look like much, but I can hear from here 1000 developers signing reliefs saying oh yes, we have it now.
00:42:20.630 - 00:43:20.980, Speaker C: Yeah, this is true, this is true. Okay, the next feature is events, which was a bit of surprise because we actually didn't intended it to be included in this version, but in the next version. But it was ready, so why not? And I think it's very similar to what you are used to from solidity. Even the underlying mechanics are very similar. But basically you have a syntax to define events, and you have a syntax to emit events. We have a page on it in the technical documentation that describes exactly all the technical details. But we also have a nice tutorial that just guides through how to add events to one of the contracts from the tutorial and to see how you can retrieve them.
00:43:20.980 - 00:43:53.110, Speaker C: So again, I think it can make a lot of change the fact that we have it now. Now we have two very nice additions. And I think they are nice because they were, how would I say it? They are the result of discussions in the community, which, like I know how.
00:43:53.120 - 00:44:10.500, Speaker A: To say, basically, yeah, they're coming from you guys. Basically, they came from feedback that the community gave us that we wouldn't have had without you. So big thanks to you for providing this feedback. We implemented some things that are useful for you. Thanks to your feedback. So keep on saying it.
00:44:11.370 - 00:44:54.786, Speaker C: Yes, thank you, Henry. So the first thing is that there was a nice discussion over the stagnant chairman on how can we support contracts extensibility pattern. I think Martin proposed this pattern. And one of the problems with the pattern is that you had to be very mindful on how you define built ins in the different contracts that you want to import from. So what we did in this version is we just removed this built in directive. Right. So if you had to define a contract like this, now it just won't have this built in.
00:44:54.786 - 00:45:49.170, Speaker C: And it also means that you don't need to be minded for it when you're writing your contracts in this extensibility pattern. So, thank you for the discussion. And actually, open Zeppelin already transitioned their ERC standard contract to use this pattern. So you can go check it out. And the second thing is that there was a discussion on how to support multicols in account contracts. What is multiple? Multicol is basically the ability to have more than one call in one transaction. So, for example, let's say I want to, I don't know, send a transaction that increase the allowance in an ERC 20 contract, and then send a transaction that calls the transfer from, or something like that, multicolored, allow you to do it in one transaction, which.
00:45:49.170 - 00:46:26.750, Speaker C: This is like an obvious use case, but I'm sure there are many, many powerful use cases. And again, this was done because after a discussion and a request to add this feature. Okay, so those are two, maybe minor. What is the feature? I didn't say. So. The feature is the ability to, to support array of structs in external functions. So external functions can now receive as input array of structs and also return array of structs.
00:46:26.750 - 00:47:18.830, Speaker C: And now we have few improvements to the Starknet CLI which comes with the Caro package and also to the testing framework. So you can now use the Starknet CLI to query pending blocks. If you remember, pending blocks was introduced in the last alpha version. And basically they allow the sequencer to return much faster confirmations on transactions. So now you can query data with respect to this pending block state. And we also added support for account contracts. So with the arrival of the fee mechanism in the next version, users won't be able anymore to send transactions to Starknet.
00:47:18.830 - 00:48:17.390, Speaker C: Users will have to send transactions to Starknet through an account contract which will pay fees. So the Starknet CLI now allows you to interact with Starknet via an account contract. You can create an account, you can deploy an account contract and you can send transactions to Starknet directly from it, and you can check the tutorial to see exactly how to set it up and how to do it. And actually this feature was also added to Starknet Py and to Nile in the last month and hopefully to also tos very soon. So all the infrastructure which will allow users to seamlessly interact with the network even when fees will be enabled, is already in motion. So this is the Stagnet CLI. And there's also an improvement to the testing framework.
00:48:17.390 - 00:49:15.606, Speaker C: And one of the most important one of them is we introduced what we call the postman, which is basically a class that simulates the sequencer behavior in the l one l two messaging protocol. And this is very important because it will allow, first of all having these features in the testing framework and will allow developers to test more complicated flows that involves also l one contracts. And it will also be included in the Devnet that chartlabs are working on. And the devnet will also simulate now this mechanism and layer one and L2 interactions. This is like the main features. You can see the full change log on GitHub. It is actually a very big one, so take your time to go over it.
00:49:15.606 - 00:49:19.800, Speaker C: And if there is something that is not clear, feel free to ask.
00:49:24.170 - 00:49:28.940, Speaker A: Matthew, asking what about transactions originating from l one to l two?
00:49:35.010 - 00:49:53.430, Speaker C: What do you mean what about is it also supported in the fee mechanism in the starting testing framework? If this is the question, then the answer is. Yes. Okay. Both from l two to l one and from l one to l two. So you will be able to test the full flow.
00:49:56.010 - 00:49:56.760, Speaker A: Amazing.
00:49:57.930 - 00:50:44.360, Speaker C: If this is not your question, then let me know. Yeah. Okay. So the next version, the main feature that we will add there is the fee mechanism, or basically enabling the fee mechanism. It still won't be enforced to allow users and applications the transition period. So this is basically it. I think if there's no more questions on what is included in this version, we can maybe just share a little bit what we're working on and what you should expect in the coming weeks.
00:50:46.410 - 00:51:04.970, Speaker A: Yes, that'd be fantastic. Thanks, Tom. So Julian is asking our contracts. So account contracts migrated from alpha four to alpha 0.7.0. I think the question is, is there a state reset?
00:51:05.470 - 00:51:16.560, Speaker C: There is no state reset. Yes, the state remain the same. Great.
00:51:18.130 - 00:51:45.080, Speaker A: And then I have four questions, if you can answer them. I can answer some of them. But there's a question that apparently pops regularly on the discord. What is the background of the Cairo language? Is it a cross between ASM and C? Closer to C. So can you share a bit? How did Cairo evolve to having this syntax and where does it come from? It's a broad question.
00:51:45.930 - 00:52:43.562, Speaker C: Yeah, it's a good question, and I don't think I should be the one answering it. So maybe for the next community call we can either bring Leor Rochachal, which are the co inventors of Cairo, and are also the main force behind the language and specifically the syntax. So I think it will be interesting to. Great idea to discuss this. Okay, so a few things I think are worth noting and being aware of. So, first of all, I don't know if all of you have seen, but Ellie, which is the co founder of Starkwell, posted on shamans, I think yesterday, a post describing our thoughts about licensing in the context of Starknet. I think it's very open and inviting to hear the community thought.
00:52:43.562 - 00:53:58.302, Speaker C: So it'll be great to hear what people are thinking. This is the first thing, as I've said, the next version will include the fee, but we're also working toward having a more, I wouldn't say restrictive, but a more structured account obstruction approach. So we are now working both with Ethereum and with Argent and with the Openzeppelin to understand, to derive some proposal. And I think that you should also expect something to be posted on shamans, which describes our thoughts and what we are going to do on that front. This probably will be a little bit more time, let's say by the end of January. But we are at a point where we have some concrete proposals to share on how should the leader election of Starknet will look like in the decentralized phase. So we are planning also to write it and share it on stagnate shamans.
00:53:58.302 - 00:54:28.090, Speaker C: And to start, we will probably also do like a dedicated call to it and start discussions on the trade offs and the various approaches we can take in that aspect, and also to see if there are other proposals or things that we didn't take into account. So just wanted to share what is on the horizon. Perfect.
00:54:28.160 - 00:55:20.000, Speaker A: Thank you, Tom. So yeah, do join the license discussion on Chaman. I think it's a very interesting one. And I just shared the link on Discord and I'm very eager to see the decentralization discussion which shamans do. I think it's going to be a really interesting one. Somebody posted a question on discord asking, can you explain a bit about recursive starts? How would it affect the gas cost and whatever impact it might have? And the second question is, what is the current optimistic and actual finality time in terms of number? So these are two different questions. If you have an insight on recursive starts and how it will affect the gas cost and the usability of starting, I think that would be great.
00:55:26.070 - 00:56:17.490, Speaker C: Yeah, I was muted just a second. Too many place to unmute. Okay, so you can hear me now? Yes. Okay, so recursive proofs will have big impact in many fronts. First of all, it will allow applications that use proofs in their business logic, for example, privacy applications, or zoro for example, to implement the logic on startnet. Because you need to have recursive proofs for it to happen. Specifically, you need to have a verifier of proofs in Starknet.
00:56:17.490 - 00:57:18.040, Speaker C: So this is the first implication. It's not like a protocol level implication, but it's an application level implication. And it will also allow us to migrate the Starkx applications to work over Starknet. There is a post we published on it that describes why we think it has a lot of advantages. But those are like the two implications of this. If we look at Starknet as a protocol, then I think that the most important implication it has is the ability to create much larger poops in much smaller time. So we will have bigger scalability on one hand, and on the other hand, we will have shorter finality to l one.
00:57:18.040 - 00:58:40.274, Speaker C: We can achieve it via some sophisticated, I wouldn't say sophisticated, right, because it's a Berkeley. But we can take the statement of a state transition and construct it in such a way that allows us to save a lot of time or even to distribute the required proving power between many, many machines instead of just one big machine. Yes, exactly. For example, if we take a state transition of 1000 transactions and divide it into many small state transitions of, let's say ten transactions, then we can generate all those proofs in parallel, which is much faster, 100 times faster. And then we can, with recursive proofs, you can imagine a binary tree of proofs, generate one proof that says basically I've seen such and such proofs that prove the state transitions of this one k transaction. I hope it was clear, but it allows you to. Okay, great.
00:58:40.274 - 00:59:04.220, Speaker C: And also we can have a different construction, which is like a rolling mountain view tree. Okay, never mind. Anyway, the bottom line is that we can have more scalability with faster proving times.
00:59:06.110 - 00:59:07.530, Speaker A: And more privacy.
00:59:08.670 - 00:59:21.680, Speaker C: Exactly. On the plugative part, we can allow applications that use proofs to use proofs in Starknet. And what was the second question?
00:59:22.050 - 01:00:10.698, Speaker A: The question is, what's the current optimistic and actual finality times in terms of a number? The answer, from my understanding, and please correct me if I'm wrong, is that right now, block time is not fixed on startnet. This is why you're seeing blocks at different intervals of time. On Testnet and on Mainnet, a block will be emitted either after a certain amount of time has passed or after a certain quantity of gas has been consumed by transactions within a block. These parameters can be adjusted. They would have deadjusted in the futures. But right now, I think on Testnet we have a block about every two minutes, and we have on main net a block every 2 hours. That's for l two finality.
01:00:10.698 - 01:00:32.018, Speaker A: Now for l one finality, it means your transaction is final and secured by l one once the batch has been proven and verified. On l one, this happens every 8 hours, I think, on main net. And I'm not sure how often it happens on testnet.
01:00:32.194 - 01:00:33.720, Speaker C: Something like 30 minutes.
01:00:34.250 - 01:00:37.240, Speaker A: About every 30 minutes. That's pretty cool.
01:00:38.010 - 01:01:37.346, Speaker C: Yeah, this is true. I would add two things about it, and I said a lot of parameters which are currently not easily available to developers. So we are now working on an API that will expose all the relevant parameters, which are for example, what Henry described right now and many more, because it is important. But you're right in the sense that right now it is an optimistic finality in the sense that the developers and the users trust the sequencer, which is currently only stalq. So there's no finality guarantee other than that, until the proof hits layer one. Right. And in that sense you also have the pending block finality, which is like an intermediate snapshot of the state even before the block is closed.
01:01:37.346 - 01:02:06.018, Speaker C: So for example, on Mainet you don't have to wait 2 hours to know if your transaction was accepted and is valid and to know what is the state after this transaction execution, you can query the pending block. Right. As I've said, you can also now do it from the sideman Cli. Those are the finality times on today. Any more questions?
01:02:06.104 - 01:02:22.882, Speaker A: Thank you. No. So I still have three questions that our all stars sent us. So yeah. By the way, in terms of discord moderation, you may have noticed we have new moderators. We have Odin and Tetris Dunko. So thank you for joining.
01:02:22.882 - 01:03:03.794, Speaker A: This is great and they're great assets and they're helping us maintain discord a lot, which is great. So don't hesitate and ask questions, they will answer them. And if they can't, they will redirect the question to us. And if we don't see them and we will answer them. And so they surfaced some questions that come back often on the discord. One of them was, can I get paid to learn Cairo? And I would say that if you're a good developer, there are a lot of applications looking for Cairo devs and there are not a lot of Cairo devs that are available. So you can probably find people willing to hire you as a dev in order to develop in Cairo.
01:03:03.794 - 01:03:53.634, Speaker A: And I encourage you to look at the channel community job on Discord where people post job offers or collaboration proposals when they have some. Then the other question was, can I directly learn Cairo as a noob? Should I start with python solidity or other? Kyle answered that question earlier, and I totally agree with his answer. You don't really need solidity. What is very useful is a global understanding on how you deal with smart contracts, because they're a bit of a weird animal. They're different than your traditional program. So it's good to have an understanding of how to program smart contracts. And once you have written your application on Starknet, probably at some point you'll want to interact with layer one.
01:03:53.634 - 01:04:05.590, Speaker A: That will be useful for you to have some notion of what does solidity do, so that you're able to talk with solidity developers who will be your counterparts in building something that is cross chain.
01:04:07.150 - 01:04:09.498, Speaker C: I see there's another quote, sorry.
01:04:09.664 - 01:04:55.186, Speaker A: And then there's a third question, and we can move back to this question. Will Starcakes projects move to Starknet as l three? Or will there be a bridge or standalone forever? I think this question remains open. It really depends on the individual applications. Sona applications will want to stay on Starkx forever. Maybe, I don't see why, but maybe, and it's their prerogative, maybe some of them will want to move to l three and be a Starkx instance on top of Starknet. Maybe some of them will want to be a pure Starknet instance. Another option is also for them to be a Starknet program inside a substarknet instance that is itself an l three to Starknet.
01:04:55.186 - 01:05:45.978, Speaker A: So Starknet on top of a Starknet that is dedicated to an app, for example. So there's a big design space here. And overall I think the main message here is that it really depends on the app and what they want to do. We don't want to say, oh, this is what they will have to do. We offer possibility and then they'll choose eventually. So I've just seen a question which is will contract ash be part of compiled JSON incoming versions? I'm wondering if it's Janik who chose a different pseudonym to ask the question. I'm teasing because this is a very valid question that we've had before and I don't think it was included in this version, but we've noted it and it's on our feature request list.
01:05:45.978 - 01:05:46.940, Speaker A: Right Tom?
01:05:47.790 - 01:06:22.950, Speaker C: Yeah, Yannick is creating a lobby with pseudonym we need. So I've seen the discussion on the stagnate JS issue and the problem is that the Peterson hash on JavaScript is really slow, so you can't just compute the contract hash. So yeah, I think it is an easy change and hopefully we'll be able to edit soon. Great.
01:06:23.100 - 01:06:40.090, Speaker A: Another feature that I saw kind of linked to that do we have on our roadmap or should I write it on the board, a feature request, some kind of xcode Ash. Cisco. Where I can get the ash of the code from within a smart contract.
01:06:41.710 - 01:06:43.260, Speaker C: Sorry, what was the question?
01:06:43.630 - 01:06:56.960, Speaker A: So in Ethereum for example, you can check the hash of the code of a contract from within a smart contract. I don't think we can do that right now. In startner, is it something we plan on implementing too?
01:07:01.750 - 01:07:12.710, Speaker C: I have it in my, in my list, but I did. It's not like concrete version if it's more just like not in the priority.
01:07:14.890 - 01:07:19.080, Speaker A: Okay, so we'll get to it eventually, but it's not going to be next week.
01:07:20.170 - 01:07:22.280, Speaker C: No, it's not going to be next week. No.
01:07:22.650 - 01:08:03.720, Speaker A: Pretty cool. Okay, so thank you Tom for your time and these explanations. I don't see more questions so I think we can wrap it up. In order to close this community poll, I want to mention that I posted on chairman the schedule for the next community poll. So the community calls were kind of an emerging initiative that we started. It's the 6th one, so we are taking our marks a little bit, but now we think we are at the stage where we can formalize it a little bit more. So as you see, we are trying to have cool projects presenting what they're doing.
01:08:03.720 - 01:09:09.514, Speaker A: So I've created a post on shamans where I detail when the next community call will be held and where you can submit and you can say, hey, I'd like to present my project so that this is open. If you are building something on Starknet and want to showcase it to the community if you want to make it coincidental with your launch date, if you want to gather feedback, please reach out there so that we can schedule and have you present during these community calls. It's also a good venue for you to write questions, if you have them, that you want us to address during these community calls. And I'm wondering how we should publish and talk about these community calls. For this one, for example, we didn't make an announcement on channels or anything so the event was created and scheduled in discord. So I guess that's why a good number of you showed up. But do let us know if you want to organize this differently, if you want a reminder and what we can do to make this better.
01:09:09.514 - 01:09:53.080, Speaker A: That being said, almost 100 people showed up, so I'm guessing this is good. This is about what we have usually. Okay, so with that I think we can wrap it up. Thanks a lot folks, and I hope you're as psyched as I am for Starknet 0.7.0. I think these new features will mean that I will write a few more exercises for the Starknet Cairo 101 tutorial. So if you manage to get 22 points, be sure to check back in a few. Okay, maybe next week or the following one because I'll add more exercises for you to try and deal with events and with a few more stuff.
01:09:53.080 - 01:10:01.250, Speaker A: Okay, so with that, I'll let you go back to working on your smart contracts. And thanks again for your time everyone. Bye.
