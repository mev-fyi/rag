00:00:03.830 - 00:00:28.740, Speaker A: Hello, I'm Luis. I work with this project called Shutter Network, and I work at Brainbot, which is a software and company and venture builder in the Ethereum space. And I'm sort of the product manager at Shutter. So please bear with me. I'm more focused on the partnerships and product side, less on the really deep tech. So if you have very technical questions, please bear with me. I'm trying to answer.
00:00:28.740 - 00:01:29.414, Speaker A: I'll talk about our solution to front running and sensor protection, but also more generally speaking, about sort of the need for it. And why do we need base layer neutrality a little bit as well? So where does it come from? Right. So we have these two, we think, existential threats to generally speaking, marketplaces on Ethereum or all public blockchains. So originally we were saying the whole value proposition of something like Ethereum is censorship resistance, and is sort of this neutral base layer. But we think these two aspects. So the malicious subset of MeV and also the censorship which we see now within blocks, essentially, we think threatens that base layer neutrality. How is it looking like so we can measure the amount of front running? Here's this cool explorer from P.
00:01:29.414 - 00:02:15.266, Speaker A: McGuhan, who he says he discovered MeV in 2014, and he has this really cool block explorer where you can inspect and measure the amount of front running happening per hour or per block. You're seeing $50,000 of front running just over this last hour. We think the real harm caused is larger and we think there's even more sort of funds and investors being sidelined because they know there is front running. So that's not even measured in here, but they're just waiting and not even interacting with DeFi because they know there is front running. And generally speaking, it just causes a lot of activity. Some of it is good, some of it is bad. I'll touch on this later.
00:02:15.266 - 00:02:41.834, Speaker A: We're seeing this censorship topic, which the censorship is very related to front running. Essentially, the entity or actor that is selecting and ordering transactions is the same. Who will be able to censor usually. So that's sort of the same issue. This is a different page of it. Let me touch a little bit on how we are trying to address it.
00:02:41.872 - 00:02:42.122, Speaker B: Right.
00:02:42.176 - 00:03:31.210, Speaker A: Generally speaking, we're trying to infuse the base layer neurality with threshold encryption to combat front running and censorship. Right. Maybe a word on this. In crypto, we have kind of two tools. We have decentralization against censorship, but we think we can also have add encryption and have that also be a tool really against censorship. And that's what we're trying to do. And we think shutter fits into this kind of modular l two landscape as one other building block where l two s or even side chains can use this as a plugin and enhance their roll up essentially, or against side chain with front running and sensor resistance.
00:03:31.210 - 00:04:46.350, Speaker A: We are targeting the malicious mev. So we do think there is lots of kind of positive or neutral mev, mainly the arbitrage and liquidations, but we are more focused really on preventing the malicious types of mev. And we think the malicious types of mev, generally speaking, overlap with what is the front running related mev. I talked about this, we're using threshold encryption. So generally speaking on a high level, how it works is we encrypt transactions at the user level and have them be batched, and then have the block producer sign off on and commit to the inclusion and the certain order of transactions while the transactions are still encrypted, such that that block producer be that the sequencer or the validator, that they don't even see what's in interactions. So that's why also they can't censor front run. And then we need to use threshold encryption to decentralize this encryptor and decryptor role.
00:04:46.350 - 00:05:58.166, Speaker A: So if you were to allow any single entity to encrypt or decrypt that entity, then would have this outsized sort of control and power over the system, and would have this power to essentially not to decrypt and withhold transactions. So with partial encryption, we have this nice property that there's never a last person to be left to decrypt. So we always have this uncertainty who's going to be the last person to decrypt. And this is the nice property of you don't have to trust a single entity to encrypt and decrypt, and especially decrypt. I said we are sort of aiming at implementing this mev or front rating protection mechanism, ideally sort of in protocol, into an l two, and that's what we call rolling shutter. The nice thing is, sort of by design, it only prevents the front running and the malicious types of MeV in our view, and it can't even prevent these mentioned more benign or even positive types of MEV, such as arbitration liquidations. And it also adds this layer of censorship resistance.
00:05:58.166 - 00:07:00.590, Speaker A: So roll ups are censorship resistant if you have an l one transaction, if you have the ability to post transactions on l one. But a, some of them don't even have that, and b, that's not real time censorship resistance. Right? So a rolling shutter would add this layer of real time censorship resistance. And there's one really interesting outlook, is that if shutter can protect essentially against censorship, and if we assume that the intention of sequence decentralization is also to protect against censorship, there might be a case to be made to say maybe with shutter, we do not have to decentralize sequencer. So basically we can reap all the benefits of a decentralized sequence setup. Well, mainly censorship without the high cost of decentralizing the sequencer, the latency, and generally the complexity. And in that case, we would say that setup would have a better latency actually, compared to a decentralized sequence setup.
00:07:00.590 - 00:08:27.450, Speaker A: So we have been working on this for quite a long time now, and our most advanced implementation is working with the gnosis chain to implement this into the base layer of the gnosis chain. We have this nice kind of more practical first milestone, which we call opt in chatterized block building. And that's what will serve then as an example for other l two s or l ones. And here this last Slide is talking about a potential sort of idea of building it as an app application layer, front earning protection. So in case the roll up doesn't have shutter integrated, we could, or like a threshold encryption DKG integrated, we could also build it again as this sort of application layer system, which would mean deploying a shutter smart contract, which takes the same role, as I said before, kind of encrypting transactions, in this case passing them on to the target smart contract. And thus the result of this would be this sort of a walled garden where within all the Dapps could be front running protected. And you can still have this then as a fully optional system and have other Dapps be outside the system.
00:08:27.450 - 00:09:10.194, Speaker A: Right. Nice thing would be here. We don't have to change the protocol level and just build it on top. I still have a what's already live. So we already have this DKG and threshold encryption mechanism running live as a plugin to snapshot. And here we are not actually preventing meV, but we are preventing certain voter misbehavior, strategic voting within DaO voting. And yeah, if you have a snapshot dow, or if you're admin of a snapshot dow, this is how you do it.
00:09:10.194 - 00:09:12.140, Speaker A: Essentially, you just switch it on.
00:09:14.830 - 00:09:15.146, Speaker B: In.
00:09:15.168 - 00:09:55.370, Speaker A: The admin settings and from then on, all your votes within that snapshot space will be encrypted. And then again, very similar to the MEV protection mechanism will be decrypted afterwards. I said the updated slide deck, but we didn't have the last slide, but it's not important. That's it. Any questions? Yeah.
00:09:57.100 - 00:10:06.940, Speaker B: Can you go through the conduction flow? So it seems that it sent encrypted to delegate or some sort of node.
00:10:09.680 - 00:10:27.570, Speaker A: Yeah, there wasn't a lot of time, so let me go back to the, I can't control right now, sorry. Okay. Yeah, thanks. That's the new one. Oh, thank you. Yeah, great. But I still can't control.
00:10:27.570 - 00:11:23.158, Speaker A: Or can I use this? No. And I think this is also not on. Hello. Because now that's a different. Okay, no worries. Okay. Yeah.
00:11:23.158 - 00:12:25.690, Speaker A: You ask about the specific transaction flow. Right. So how this works, like is this keeper system. The nodes that are running the threshold encryption mechanism, DKG, they start by collaborating to generate the encryption key which they broadcast, and then the user picks that up, uses it to encrypt transactions. They send that to what we call the collater. Ultimately that role will be either the validator or the l two sequencer and they batch the transactions, receive them encrypted and batch them, and they sign off, basically commit to that batch of transactions and only then will the keepers collaborate again to generate the decryption key, which the sequencer then uses to then generate and broadcast the key. And then sequencer uses it to decrypt.
00:12:25.690 - 00:12:59.976, Speaker A: Yeah, they can collude. So the nice thing is you need a certain threshold to collude. Right. So as long as you have a certain amount of honest parties, we would hope that. Yeah, but the risk of collusion is there. And what that means is the risk is if they collude, if they collude and then also collude with the sequencer, they can then front run again, decrypt early and front run, which is sort of going back to status quo. Right.
00:12:59.976 - 00:13:01.784, Speaker A: Because the sequencer now can already front run.
00:13:01.822 - 00:13:02.072, Speaker B: Yeah.
00:13:02.126 - 00:13:42.676, Speaker A: So the status quo is not as bad. Sorry, the worst case is not as bad. Worst case just going back to status quo. But the risk of collusion is something that is a problem. And it essentially is something where we say we have to assume a certain level of honesty along the keepers. And how we're proposing to kind of mitigate this is by having a Dow select the keepers and select certain civil resistance mechanisms to make sure that this set is honest and also to continuously manage the keeper set. Right, evict malicious keepers if they misbehave.
00:13:42.676 - 00:14:30.268, Speaker A: So misbehavior can't be proven cryptographically, but it'll be very obvious. We can detect front running. And if there is front running, we have to assume that there was collusion and then we can remove those keepers from the keeper set or slash. I can't really go deeply into this, but essentially we have an epoch key and an eon key. So we have sort of a master key that gets set up and that only has to be generated every time you change the keeper set. And then this epoch key is derived more quickly and doesn't need this whole ceremony in this. Yeah, thanks.
00:14:30.268 - 00:14:39.070, Speaker A: Any other questions? Thanks very much.
