00:00:00.810 - 00:00:30.230, Speaker A: All right, can you all hear me? Just want to make sure my mic's working. Yes. All right, nice. Well, thank you, everybody, for coming. Excited to be here with the Starware team and Kakarot. I think we're all working on super interesting things, and they just work together in a really nice and elegant way. So we're going to be covering a few things today, really touching on kind of the key things here from each team.
00:00:30.230 - 00:01:06.026, Speaker A: And so one big thing that happened recently on the Starkware end of things is that we got a new version of Cairo. And I don't know if you all have had a chance to kind of go poke around and look at it, but, yeah, it's a pretty substantial improvement. And so we'll be covering that, talking about how it provides for a better developer experience and what the Starquare team imagines. People are going to be building with this. We're going to be going more over Omni as well. This is actually our first AmA as the Omni network. So, yeah, basically the way that we are going to be working together with Starkware is that we're going to make it easier to pull liquidity into the Starquare network.
00:01:06.026 - 00:01:36.860, Speaker A: And then Kakarot, Kakarot, we're going to be talking about how basically it just makes it much easier to take advantage of the performance advantages that you get in the Starquare ecosystem while still keeping a pretty easy developer experience that people have gotten used to in crypto. So let's just kind of do a quick lap here for all the participants that are going to be speaking on each of these teams. Alex, do you want to kick it off for the Starquare side here? Just give an overview of your role in the team.
00:01:37.310 - 00:01:52.750, Speaker B: Yeah, sure. So, yeah, I'm starkware for about a year now as a PM. And yeah, I'm working around mostly startnet stuff, Cairo development, et cetera.
00:01:55.750 - 00:01:56.162, Speaker A: Great.
00:01:56.216 - 00:01:57.490, Speaker B: Yeah. Elias.
00:01:58.550 - 00:02:00.930, Speaker C: Hey, guys, can you hear me well?
00:02:01.080 - 00:02:01.810, Speaker A: Yep.
00:02:02.310 - 00:02:28.490, Speaker C: Cool. My name is Elias. I'm leading Kakar right now. We're an EVM on top of Starknet. So we are a Zkey VM. We're essentially, right now trying to make it so that solidity devs can deploy their code bases as is with all the tools they know, like hard hat and foundry and metamask, and use their daps with metamask and so on, and all of this on top of Starknet and the stark ecosystem.
00:02:30.750 - 00:02:31.258, Speaker A: Awesome.
00:02:31.344 - 00:02:31.642, Speaker B: Yeah.
00:02:31.696 - 00:03:05.878, Speaker A: Glad to have you both here. And I'm Austin. I'm one of the co founders of the Omni network. Basically, Omni was created because we're having a number of l two s spring up and we care a lot about just making sure that the Ethereum ecosystem can really scale into what it promises to. We care a lot about the value of just an open and free economy, and all the teams here talking today care about that as well. And we're all kind of working together to make a future where that's possible. So Omni is basically an interoperability protocol for the Ethereum ecosystem, and it's secured by Ethereum itself.
00:03:05.878 - 00:03:48.150, Speaker A: We achieved that using Eigen layer, and so we'll kind of dive deeper into each of these teams. But to kick it off, Alex, obviously a lot happened going from Cairo zero point x to 1.0. For anybody who hasn't used Cairo zero point x and then gone and looked at the docs for Cairo 1.0, it's a big change. Alex, can you kind of give an overview of how you as the Starquare team are looking at the evolution of Cairo? I know you guys care a lot about just like really having the most performant environment for people to build applications. And so yeah, would love to hear kind of your overall take on Cairo now that you have made such a big milestone in its growth.
00:03:49.290 - 00:05:02.320, Speaker B: Yeah, thanks, Austin. Yeah, indeed, you're right. If you haven't been in the Cairo zero era, it would look completely different. And coming into it now, you probably wouldn't recognize it and wouldn't even know what was this Cairo zero thing. So Cairo was initially developed as an internal project that was used for Starkx application and basically making that code that was mostly internal run well and wasn't at first envisioned as something that would be part of Starknet and be used for smart contract development. So as time went by and people were getting into the ecosystem and getting more into contract development, wanted a better development experience. Eventually there was a decision to rethink this whole environment, the language, the compiler, and build up something new, learn from the experience of the past.
00:05:02.320 - 00:06:15.540, Speaker B: But of course creating something that is much better, much more convenient for developers, as you have said. So Cairo is developed to be ZK friendly, to be prover friendly, but the compiler makes a lot of these things invisible to the user and can be just used as a regular development language. So some of the key features that were changed from Cairo Zero to Cairo one are basically everything. Everything became much better and much more performant. But I guess some of the key features that I'd like to point out is overall the readability and the usability of the code. Kyro one takes a lot of inspiration from Rust, which is a known and loved language. People who are using it, myself included, would tell you how much rust is fun.
00:06:15.540 - 00:07:49.294, Speaker B: So a lot of the syntax, a lot of the concepts are the same, which contributes a lot to how readable the code is, especially compared to Cairo Zero, which was kind of its own thing. Additionally, safety is one of the important new pillars. So again, learning from past experience with Cairo Zero itself and also the development of smart contracts in general, security of smart contracts is very important, and for us as well. So now in Cairo one, many important features are baked into the compiler. Bugs that could have been fatal to protocols are now caught basically at compilation time, overflows, castings, stuff like that, arithmetic operations, a lot of that is handled by the compiler now, which I think contributes a lot to the safety of the network and the contracts developing on it in the future. Additionally, speed and the whole experience of running tests, developing, compiling, all that is going to substantially improve the new compiler. Some of the other components written in rust, it's also open for the community to contribute.
00:07:49.294 - 00:08:13.430, Speaker B: Welcome to check out the repository. I guess we'll talk about resources at the end. And compiling code is super fast. Running tests is much faster than it used to be in Cairo zero. And overall, once you try it, you can never look back, basically. Yeah, that's about it.
00:08:14.760 - 00:08:37.564, Speaker A: Yeah. So we were playing around with Cairo zero point x. Can you guys hear me right now? Just making sure. Yeah, cool. Yeah, you're definitely not lying. The improvement from Cairo Zero to Cairo 1.0 and obviously on multiple layers, but the readability and usability is a huge one for us.
00:08:37.564 - 00:09:16.120, Speaker A: We got pretty excited about it initially at Omni because we've been following starquare for a long time and we see the performance advantages that you can get, but it was definitely harder to build more scaled out applications and protocols in Cairo zero. I remember kind of looking at some of the original code that we drafted up in just some kind of early experiments and comparing just literally even the lines of code and the readability of each line compared to Cairo 1.0, it's like an order of magnitude difference. It's a huge jump in just actually the developer experience in the starknet ecosystem.
00:09:18.460 - 00:09:37.950, Speaker B: Yeah, you're absolutely right. The team there, the gigaheads, Ori and Dior and Shahad, all the guys working on it, really doing an amazing job. And it's only going to get better as we go.
00:09:39.040 - 00:09:54.150, Speaker C: And for anyone who wants to try play around with Kero one what should they do? Right now I remember we used to use Protostar for Kero zero point x. Can they just go and download the library protostar and just write a contract or what?
00:09:55.560 - 00:10:11.610, Speaker B: Yeah, Protostar works, supports Cairo one already. Also, there are quite some good examples of using the internal Cairo test runner. So either both are good examples, but yeah, Protostar works.
00:10:12.380 - 00:10:20.008, Speaker C: When you say kero test runner, you mean like they should fork the compiler, the Karo compiler, the Karo one compiler, and just play locally?
00:10:20.104 - 00:10:29.250, Speaker B: Yeah, you can install the Cairo test executable from the crates or play locally or fork it, as you said.
00:10:33.730 - 00:11:27.530, Speaker A: Yeah, and I think this matters a ton as well, even on the just thinking about getting audits on the code. Obviously with the level of security that's needed, you not only need that at the actual language level, but readability helps so much with that. So I'm really excited for Cairo 1.0 because I think it's so much more approachable now and I think it's going to catalyze a lot of developer activity in the Starknet ecosystem. Alex, I'm curious to hear as well what are some of the core use cases. So I know you all have been super focused on really leveraging performance advantages that you get out of building something that was kind of started from the ground up to be ZK friendly. We're seeing a different strategy by a number of other companies in the space that really are trying to get ZK to conform to our existing standards.
00:11:27.530 - 00:11:51.350, Speaker A: And Elliot's like, you know, obviously Kakarot is working a lot in this dimension as well, but we're trying to bring this technology and get it to conform to solidity and the types of developer tools that we have out there today. Alex, I'm curious to hear what are some of the use cases that you all get most excited about on the Starquare team that you think are like primitives that need to get built out in the ecosystem?
00:11:54.170 - 00:13:02.986, Speaker B: Yeah, good question. So as you said, the approach here is a bit different. Not necessarily following the concept of just focusing on the EVM as a base to build upon, but rather building an architecture, a VM, the Cairo VM, which is in a sense much slimmer and much more optimized for validity proofs and proving. So this opens up very interesting possibilities. So first of all, I think Kakarot is one of the most brilliant examples of that, that you can actually build the EVM on top of it, right. So this is the base layer. You can build the EVM on it and have something that is similar to the EVM.
00:13:02.986 - 00:14:23.880, Speaker B: And you can build something completely different, right? You can try out maybe different architectures, maybe different concepts, something that is more cosmos like and other ideas that are emerging and being developed in this space that don't necessarily require the EVM concepts at all, like ML on Starknet or using sharp directly, which is some interesting things that are being built out now. And it's really cool to see how this is also beginning to emerge now in the chir one space, people are starting to build the libraries vector multiplication, matrix multiplication. It's probably going to get even cooler and evolved and be abstracted away in a super efficient way and simple to use. So you'll just import your ML library for Cairo and be able to run some inference and prove that something is a cat, but on chain and in a verifiable way.
00:14:25.930 - 00:15:23.750, Speaker A: Yeah, I think you all have done a great job. An ecosystem of teams who are really thinking about frontier cases like this I've talked with modulus Labs is one that comes to mind that yeah, you clearly have a very forward thinking developer ecosystem. I've just had a lot of great conversations with people thinking about frontier use cases like that, and personally with Omni. The thing that we're most excited about is Omni is obviously an interop protocol for the Ethereum ecosystem. But I think one of the most exciting opportunities here is it just actually makes for a better user experience for end users. So if they have their liquidity on another roll up or somewhere, maybe even on l one, it can make it just pretty seamlessly. It can give the users a pretty seamless experience where they can start to access these super powerful applications in the starknet ecosystem without even having to think about some more of these complexities.
00:15:23.750 - 00:15:44.100, Speaker A: So yeah, it's just great to be working with you all because there's great synergies between our products here. And so Ellis, I'm curious to hear as well, you all are obviously playing a pretty important role in the Starknet ecosystem. What led to starting this? How did you all start building? Yeah, kind of. What's the origin story here?
00:15:45.590 - 00:16:27.838, Speaker C: If I'm not mistaken, the origin story is actually a tweet by Leo OSha. I don't remember, but one of the Coinbank terms of Kiro, they essentially said the same thing that Alex said is basically kro. VM is the base layer. You can essentially do anything because it's incomplete, minus the infinite loops, but you can do anything you want. So essentially you could build the EVM on top of it, and one you would have a zitkey EVM for free. And second, you would have a very lightweight EVM because Cairo is quite expressive as opposed to building circuits, one by opcode per opcode. So that it started from a tweet, I think almost a year ago.
00:16:27.838 - 00:17:03.574, Speaker C: Then Abdel and a bunch of people from the open source community also picked up on it around October 2022. And we all met at the start CC in Lisbon, Abdel from Starkware, Lucas, me, Clement, Danilo. The core team. So many people. We are like 18 at hacker building and lots of people joined Kakarot. The core team was about ten people, but we've got more than 45 unique contributors. And just, we built it and realized it started from a moonshot, like a tweet, like a challenge, and it ended up feasible.
00:17:03.574 - 00:17:11.630, Speaker C: And right now we have 100% of code equivalents, eight out of nine pre compiled. And it works. You can run solidity on top of Starknet.
00:17:12.530 - 00:17:30.420, Speaker A: Yeah, it's a pretty wild story, especially just hearing how much some of these ZkebM teams have with this goal. Kind of like homegrown, the way that Kakarot has evolved. And you all have made progress on the project.
00:17:32.710 - 00:17:50.940, Speaker C: Yeah, we're super lucky that we don't have to be cryptographers. I think that one was a big one, that we didn't have to build actual circuits. So, I mean, kudos to the scroll team or even polygons at TVM who built either circuits or even intermediary languages. We started out with Kero and we were super happy about.
00:17:51.390 - 00:18:25.330, Speaker A: Yeah, yeah, no, I definitely feel you on that front. Our team got pretty deep into ck ourselves, but I feel like one of the most powerful things happening in the space is that this is all kind of abstracted away. Like the tooling is getting to a point where it's abstracted away from the developers themselves, needing to know all the intermediate steps that are actually going on here. And we can understand the abstract concepts that are happening and just use simple out of the box toolkits like Cairo to achieve applications with zero knowledge powers.
00:18:26.070 - 00:19:01.714, Speaker C: I think it's the way to go. Right, because you should almost always do that, kind of. I don't know if you guys know it, but mud and also dojo are doing that, but mud, like a gaming framework on solidity. But you would actually write typescript and the solidity would be generated for you. Most of it actually for a game engine. And I feel like Carol is a bit the same. You would describe what your business logic is, but you would delegate to Starkware and a team of dedicated engineers, the approvability of it, and you can pretty easily check that they're doing a good job by just checking l one and making sure that the math is sound.
00:19:01.714 - 00:19:03.300, Speaker C: That's very cool.
00:19:04.070 - 00:19:30.454, Speaker A: Yeah, for sure. Alex. I'm curious to hear as well. Obviously probably anybody who's listening right now has heard a lot about these zkebms coming online. We had ZK sync and Polygon ZkebM recently, but Starkware has taken a pretty interesting path. Kind of like you said, Cairo started out as an internal project. I don't even know how long ago that was that it started internally.
00:19:30.454 - 00:20:13.750, Speaker A: But you all have taken a very incremental path in terms of starting with Starkx and then progressively maturing the technologies to Starknet to be this more generalizable platform for people to build on top of. Curious to hear. How are you all thinking about Starknet's role in the future of the Ethereum ecosystem compared to these other ZkebM platforms? I know we've talked some about how because of the way that it's built specifically to target the powerful advantages you get of performance, really when you're just building it ground up. But yeah, I want to hear more of your perspective because that's probably what some people in the audience are thinking about, just given that it's been a hot topic recently.
00:20:15.690 - 00:21:58.486, Speaker B: Yeah, sure, we are thinking about it as we are doing our thing basically. But yeah, I guess I can talk a bit about some of the advantages of this approach. So first of all, the incremental approach means that we try to ship things when they are ready, right? It's not like we are necessarily watching things, but we're not tying ourselves down by achieving some perfection, right? So stocknet went live as an alpha when it was ready enough and things are improving. But at that time there has been a lot of knowledge that has been gained. So the trust in the system, the ecosystem that was built around the developers that are coming, like Elias, like yourself, that are coming to the ecosystem and are trusting it. And it's not just the technology, which is also always great and interesting. I think the ecosystems and the builders and the people who are making up the core of what starknet is, is not something that can be easily replaced.
00:21:58.486 - 00:22:57.514, Speaker B: And think people here who are participating in it do think that is something special, something else that's also a reasoning. Is that unbinding yourself from constraints really, I think opens up new possibilities and maybe even forces you to think about things differently. Right? So account abstraction is one of those things that is. I think it is. Starknet is leading in user experience on that front because you don't have the fallback of the EOA and the private and public key. Everything was built around the fact that everything is an account, everything is a contract. Wallets need to adapt to that.
00:22:57.514 - 00:24:17.074, Speaker B: Of course we have wallets, argent and Bravos who are happy to embrace this paradigm of account abstraction from the get go. You have to set up this new wallet, you have to set up the account abstraction. But as developers, you build it in a way that for the user is seamless for them. It's not a different experience than using metamask, it just looks different, or is called differently, whatever. But from there the experience they get is improved on so many levels. So if it's fee abstractions that will be coming in the future, or just the safety of using contracts and interacting with Dapps, the whole infinite approval, which has spent people so much money, so much has been lost on that is easily solved just by bundling a multicol into a single transaction, that it all just happened for the regular user. You don't need to send five transactions to interact with the protocol.
00:24:17.074 - 00:24:41.306, Speaker B: You want to do one click, one action, whatever needs to be approved and happen in the background, that all can be abstracted away. So it's better and safer. And that's a result of not being necessarily limited to adopting what has been the standard so far.
00:24:41.488 - 00:25:26.906, Speaker C: Yeah, to be fair, as a builder, multicol and also account abstraction out of the box feels really good because I have an argent wallet on L one and transaction fees are like times five what I would have on metamask. It feels pretty bad and multicolored as well. So these are things that are really cool on Starknet, things that are less cool, but I know that they're going to be cooler later. But we just have to bear a bit little with the startner team is that the tooling is still a bit rough around the edges. So the way you deploy contracts or integration tests or things are still not on par with the EVM. But the EVM has like years in advance. But these are cool things to remember we need to catch up on.
00:25:26.906 - 00:25:29.980, Speaker C: But overall, the experience is so much better.
00:25:30.450 - 00:26:28.106, Speaker A: Yeah, I think it's fascinating when you go all the way deep in the weeds and you're thinking about things as technical as account abstraction, how actually, if you take that all the way to the other end, all the way to the actual user experience, you can just get fundamentally better user experiences out of the box. Using argent and Braavos is a different UX than using metamask. It's much smoother. And that only comes from kind of this ground up rethinking about using these new design patterns like account abstraction. And I think one other thing, Alex, that you touched on that I think is really an important point here because this is something that's quite difficult in the crypto space, just iterating on product and expanding it over time. In Web two world, I feel like people have gotten extremely used to a pattern of shipping constantly like multiple times a day. Like CICD is a whole industry in its own that allows developers to ship faster.
00:26:28.106 - 00:27:13.280, Speaker A: Obviously in crypto that's harder because we have very high security standards. These things tend to move around money and so it's much harder to have just like a rapid iteration pipeline. But I think that the Starcore team has done a great job managing to do that. It's been over a period of years, but I think if you all tried to build Starknet out of the box, you wouldn't have been able to incorporate the learnings that you had in the initial Starkx applications that you all built out. And so I think your team has done a great job of having really ambitious goals, but at the same time being pragmatic about what you need to do on a quarterly or an annual basis to actually get to the ultimate vision there.
00:27:15.490 - 00:27:29.060, Speaker B: Yeah, thanks, I guess. I completely agree. And yeah, that's one of the guidelines, I guess, of how we are looking at this progress at this.
00:27:34.730 - 00:28:40.726, Speaker A: Know, most of our work, it's a roll up interop protocol. And so a majority of these other roll ups are kind of just leaning into the EVM side of the world. That means that a lot of the code that we have to interact with is solidity in our world. It's interesting, I was pretty excited to learn about Kakarot when we started talking more with the Starquare team because this is a huge thing that just makes it much easier for us not only to build things in the Starquare ecosystem, but we can create automated pipelines so that people can deploy apps and they just automatically are available on Starkware as well because they can kind of get propagated. Like they can run in solidity, it can get propagated and be available in the Starknet system as a whole. So I'm curious to hear your thoughts on Kakarot's role in the Starknet ecosystem. It almost like a flank strategy going on here where Cairo out of the box, it goes deep, you get all the performance advantages in the Starknet ecosystem.
00:28:40.726 - 00:28:45.930, Speaker A: So curious to hear how you all are thinking about using cacrot to expand the ecosystem.
00:28:48.850 - 00:29:54.174, Speaker C: That's a good question, actually. At first I thought it was a weird twofold bet where we would bet on the KoVM as the best toolbox for Zk scaling, which I think and believe and at the same time saying, okay, but for the next five years or foreseeable future, 80% of the devs are going to be solidity devs, and 80% of the mind power and mind share is going to go towards the EVM as an abstraction layer for everyone building apps. So whether it be innovation audits courses. So I still kind of think that, yeah, I think DVM is the least worst common thing we have. So I wouldn't be surprised if Kro has strong adoption. But over time, and in the meantime, I think kakao can be a really cool use case. And even to add to that in the long run, even if there's some kind of equilibrium or whatever, teams that do multi chain don't want to maintain two code bases.
00:29:54.174 - 00:30:27.850, Speaker C: It's kind of like the react native versus Android plus swift code bases or stuff like that. So I do think that Kakarot brings a lot of value in giving developers choice. So if you're starting a new project and you think, okay, my project is stocknet bound, I'm going to learn Kro and I'm going to deploy on Kro. And that would make sense. If you're adapting a protocol to stocknet, you might want to choose calcarat because it's a one click process, kind of. And then of course if we deliver, it's a one click process. Maybe there's a few things, but currently everything works.
00:30:27.850 - 00:31:07.590, Speaker C: And if you have nine pre compiles out of nine pre compiles and 100% opcode equivalent, your code base just works. And then I guess there's a middle ground. Like if you're forward thinking and you might not want some kind of vendor lock in into a language, then you could also choose Kakarot. But I think Starknet and Kakarot marry very well because Kakarot might even go up a layer in a year or so. So becoming either an LP or even an SDK to create your own app chain. And here Starknet would become a settlement layer for fractal scaling and app chains. And we're even seeing that already with some people.
00:31:07.590 - 00:31:48.150, Speaker C: Frontier doing some frontier work on Mada, a stocknet sequencer that can be used to pop l three s and the dojo team, it's an open source gaming engine, are trying to do that. So anyone wanting to deploy gamefi like app chains or even defi appchains, Oracle app chains could use technically Kakao as their layer three SDK. So all in all, I think Kakao and Stocknet have a lot of synergies and kind of fates are tied because we rely on the success of the Starcore team and we could really bring a lot of user adoption through solidity.
00:31:48.730 - 00:32:38.358, Speaker A: Yeah, 100%. I imagine Cacrot will be an essential tool as Omni's scaling to mainnet here, because really at Omni what we're trying to do is just make it easier for developers to access more users. That's kind of like behind the scenes, there's all this fancy stuff we can talk about the interoperability and the security properties behind it, but really we're just trying to make it easier for app developers to reach more users. That's kind of like what we're doing, simply put. And a tool like Hackrot is pretty essential in that as we're starting to work with more teams who already have their code bases in solidity and getting them to expand to new couldn't. There's not really a great way to do that in the starknet ecosystem because of Cairo, if something like Hackrot did not exist. And so yeah, we're excited to be working together.
00:32:38.358 - 00:33:15.502, Speaker A: This is just like something that, it's a great synergy of all the projects going on here. So we've been going for about 30 minutes now. Want to wrap it up, unless you guys have any last minute things that you want to talk about. But let's just take a lap with everybody who's up here. I want to give you each an opportunity to share any resources that you think are relevant to anybody who's listening. And then also, if you have any upcoming announcements that you want to tell people about, feel free to cover that here as well. Do you?
00:33:15.636 - 00:34:38.826, Speaker B: Yeah. So first of all, yeah, thanks for inviting and joining us in this Twitter space. Just something to consider is that it's interesting how a lot of what we talked about here is abstraction, right? So as Kakarot is in some sense abstracting away for some developers learning new language, learning Cairo, and Omni is abstracting away the multi chain. So it's interesting and still you need some strong base layer to build all of this on top of. So just a thought in terms of things that are coming up in the pipeline. So quite an exciting time in the next versions of starring that are coming up. Besides additional improvements to the compilers and finally loops that will be available, the performance is really the focus now of much of the work that is being done.
00:34:38.826 - 00:35:34.400, Speaker B: And there is the whole stack is being rewritten in rust, the sequencer and the compiler and the nodes and Madara and things really are looking up. And if you want to take a look at Cairo, look for the Cairo repository on GitHub. There are some open issues there. If you want to experience it firsthand in a nice tutorial way, look for Stark links Cairo. One great tutorial to get started with the concepts and really get acquainted with it. If you know rust, you'll feel right at home. And also there is a Cairo book which is being written by the community also pretty cool.
00:35:34.400 - 00:35:39.760, Speaker B: Go take a read and. Yeah, that's it. Thank you.
00:35:41.730 - 00:35:42.618, Speaker C: Thanks, Alex.
00:35:42.714 - 00:35:43.390, Speaker A: Alex.
00:35:43.890 - 00:35:49.186, Speaker C: Yeah, I'll even add that Cairo is in and of itself an abstraction over circuits, which is so cool.
00:35:49.288 - 00:35:51.970, Speaker B: Think of it polynomials.
00:35:53.850 - 00:36:16.266, Speaker C: Yeah, polynomials. And so that's pretty cool. Yeah. I guess for Kakarot the kerose x effort is over, so we're going to start the migration soon, but nonetheless we expect to have a testnet working by the end of the summer. That would be really cool. Yeah, that's it. You can go check it out.
00:36:16.266 - 00:36:53.862, Speaker C: Also on GitHub, Kakarot. That does it. Keyvm we've been open source from day one and also you can join our telegram, you can dm me if you'd like to join, just like listen in on calls or even just grab an issue if you'd like. Everything is open for contributors. Sure there's a core team and it's not so easy, but I invite you to jump in if you'd like, and everyone's welcome and thanks for having us. By the way, Austin, looking forward to integrating with Omni network and I'm super bullish on restaking. I didn't know egg and layer for a while, but now.
00:36:53.862 - 00:36:55.430, Speaker C: Sounds very promising.
00:36:56.090 - 00:37:29.554, Speaker A: Yeah, for sure, yeah. Thank you guys for joining. And just kind of as a final recap on the Omni side for anybody who we just announced pretty recently and so pretty excited. With all the community growth that we've seen, it seems like people are just kind of aligned with what we're shooting for here. We just care a lot about creating an open and free economy for everybody in the world. And we really think the best place to do that is Ethereum. And so that's why we built an interoperability protocol for Ethereum l two s that is also secured by Ethereum l one.
00:37:29.554 - 00:38:13.626, Speaker A: And so we're early in our journey, but we do have a lot coming in the pipeline, but we do have a few blog posts out. If anybody's interested in learning more about how we achieve the security properties that we do for our interoperability protocol, you can go to just docs Omni network and yeah, we'll have some more news coming out in the relatively near future here. We've been building out an internal testnet, and so more news about that will be coming in the future. If you want to listen to or follow at omni FDN on Twitter, that'd be a great place to get the latest news on it. But yeah, thank you guys for joining. Thank you everybody in the audience for listening along. Excited to be working with these two teams.
00:38:13.626 - 00:38:16.480, Speaker A: And yeah, hope you all have a great rest of your day.
00:38:17.730 - 00:38:19.740, Speaker C: Thanks, guys. Have a good one.
