00:00:00.490 - 00:00:20.270, Speaker A: So we're going to start basically from scratch. I'm sure everyone has kind of differing skill levels with Cairo. And you know, some people might find this tedious, some might find this hard, but we're just going to basically start absolutely from scratch and see how far we can get into making adapt.
00:00:21.490 - 00:00:22.240, Speaker B: So.
00:00:26.250 - 00:01:03.070, Speaker A: The format of this dap. So we're going to have a view js front end and there's a lot of different libraries and js and front end libraries that have been created by the community. I know view the best, so it's just easier for me to bootstrap it with that. I know react has some really good support, but we'll just get started with view. And sorry for this camera. I went out and snagged it like an hour ago and it feels like it's like right up my nose. Cool.
00:01:05.300 - 00:01:09.970, Speaker B: Yeah. Let's start off with a view project.
00:01:11.300 - 00:01:26.710, Speaker A: We'll use the view Cli to bootstrap this thing. So I should already have it, but if you need it. And yeah, you should be able to code along with me if you want to.
00:01:27.960 - 00:01:30.196, Speaker B: And if not, you can kind of.
00:01:30.218 - 00:01:41.720, Speaker A: Just go back and look at the recording. If you missed any steps along the way, we'll probably start to move a little faster as we get into it. So name of our project.
00:01:41.790 - 00:01:47.180, Speaker B: We're going to call this darknet.edu GitHub IO.
00:01:48.160 - 00:01:49.724, Speaker A: Sure some of you know why, some.
00:01:49.762 - 00:01:56.220, Speaker B: Of you will see it later. View three. We'll go ahead and use view three. And sure we'll use NPM.
00:02:06.920 - 00:02:18.150, Speaker A: Is a boilerplate app that I wrote. You can find it a couple different places, but one of the best is just awesome.
00:02:18.680 - 00:02:19.940, Speaker B: Starknet.
00:02:20.620 - 00:02:32.490, Speaker A: And yeah, again, there's so many good resources here. You can basically find everything that the community has kind of gathered around to collaborate on.
00:02:33.340 - 00:02:35.764, Speaker B: I'm going to be looking for you.
00:02:35.902 - 00:03:21.610, Speaker A: But again, yeah, so above this there's react examples, other scaffolding. Okay, so I will be coding along with this just to get started. With the view Cli gives us the hint there will build us with a default webpack config that the VCLI spins up. It gives us a dev server so you can see. Okay, pretty stock, pretty simple. Was there a question?
00:03:23.020 - 00:03:31.150, Speaker B: Yeah, I was just wondering if you could increase the font size in the ide. It's a little hard to read. Sorry. No worries.
00:03:31.840 - 00:03:36.270, Speaker A: Yeah, anything like that, feel free to ask. Is that better?
00:03:39.920 - 00:03:42.590, Speaker B: Yeah, that's good for me. Thank you. Okay, cool.
00:03:43.760 - 00:03:46.350, Speaker A: Okay, so we will go.
00:03:48.320 - 00:03:49.070, Speaker B: I.
00:03:50.920 - 00:04:00.976, Speaker A: And we go into our project. I just created a couple. It turns out I have a bunch of starknet projects.
00:04:01.008 - 00:04:01.930, Speaker B: Who would have thought.
00:04:04.300 - 00:04:20.188, Speaker A: I just spun up a couple simple icons. So I'll move those from my downloads folder to source assets. I'm not sure if you guys are familiar with view, but let's take a.
00:04:20.194 - 00:04:21.710, Speaker B: Look at the code base real quick.
00:04:22.240 - 00:04:40.580, Speaker A: And again, this won't be a view tutorial, so we'll just quickly go over it. You got your view config your readme. So we'll write some notes out in here. Node modules. So this is the dependencies that node needs. Public. This is our public assets.
00:04:40.580 - 00:05:01.800, Speaker A: Not much in here, just an index HTML to spin up the view js application. And then this is where a lot of the view meat and potatoes are. So I just copied that to the assets folder. This was that view, that view logo, and is now our cool Mandelbrotz logo.
00:05:02.300 - 00:05:03.240, Speaker B: Metal.
00:05:04.080 - 00:05:05.116, Speaker A: All right, so what are we going.
00:05:05.138 - 00:05:11.870, Speaker B: To be writing and where the f.
00:05:15.840 - 00:06:28.020, Speaker A: Okay, so the thought is, hey, we have these live sessions which have just a handful of people that have attended and I'm sure it's just because everybody else is in Amsterdam and they're super busy. There would have been hundreds of people on here if that wasn't the case. So I want to be able to ward the people that kind of sat through a live coding session in real time. So we're going to do an NFT project, ERC 721. I want that project to have try to have only the members of the live stream mint. So we're going to do that by restricting it to certain blocks. So we'll say users can only mint in the 60 blocks from contract deployment and we'll have just some God mode features for me to be able to screw around with.
00:06:28.020 - 00:06:45.576, Speaker A: Like let's say I want to have a live stream in the future, but I want to keep the NFTs in the same contract. I don't want to spin up a new contract. I just want to say, hey, let's open this mint window back up. So grab mode for owner to slide.
00:06:45.768 - 00:06:47.020, Speaker B: Mint window.
00:06:48.880 - 00:07:22.868, Speaker A: And then what are we doing with this whole view js thing is just going to be a minting interface. So we'll go through some of the primitives just that have already been built by the community. Like the Argent X wallet is so good, we'll show you how to interact with that. And then the Starknet JS by Oxon will do a little bit of that. But mostly the Argent X team has already provided a pretty good wrapper around that. Yeah, so this is what we will be minting.
00:07:22.964 - 00:07:28.090, Speaker B: So let's go into it.
00:07:32.060 - 00:07:39.244, Speaker A: I'm going to reference the boilerplate quite a bit. So just to make sure we get it all hooked up.
00:07:39.282 - 00:07:42.236, Speaker B: And I don't want this to be.
00:07:42.258 - 00:07:44.872, Speaker A: A watch Ben squirm with view session.
00:07:44.936 - 00:07:55.208, Speaker B: So we'll try to get the view out pretty quick. Modules.
00:07:55.304 - 00:07:57.390, Speaker A: Modules is where we'll keep our.
00:08:00.520 - 00:08:01.270, Speaker B: Store.
00:08:01.640 - 00:08:24.040, Speaker A: Is where we'll keep our state. Our app state. So view has view in tandem with Viewx. You can keep a concept of an application wide state. It's really easy to handle things like the l two wallet, l two signer, l two provider.
00:08:25.360 - 00:08:34.750, Speaker B: So this is a nice place to have this is a nice place to have a lot of your app wide state.
00:08:39.300 - 00:09:06.756, Speaker A: All right, so we can just copy and paste this from the boilerplate and modules for now. Let's just make sure everything's wired up. Like I said, we'll have a state that needs to be kept for now. We'll just make it l two active.
00:09:06.788 - 00:09:11.000, Speaker B: Account, and we'll have it default null.
00:09:14.620 - 00:09:29.692, Speaker A: We'll have a function that lets us get that state. And I am not particularly savvy at front end. So if some of you guys are and are watching me do this and are cringing, I apologize.
00:09:29.756 - 00:09:32.192, Speaker B: But that's just how it is.
00:09:32.246 - 00:09:51.376, Speaker A: Unfortunately, it okay, actions. So actions are things that actions we are actions we take against the state. These are things like log in, log out. Just to make sure that we're wired up.
00:09:51.418 - 00:10:09.470, Speaker B: I'm just going to, let's say hello, world. Hello, world again.
00:10:14.000 - 00:10:32.496, Speaker A: All right. And then we have mutations. Mutations are mutations of the state. If you want to look more into view, it's a pretty cool model view controller scheme. It's pretty easy to spin up applications.
00:10:32.528 - 00:10:36.150, Speaker B: As you'll see here. We'll do set.
00:10:50.040 - 00:10:52.004, Speaker A: And again, if you guys have any.
00:10:52.042 - 00:11:01.084, Speaker B: Questions, feel free to hang them out. It cool.
00:11:01.202 - 00:11:09.070, Speaker A: So that gives us just a little, hey, let's test the wiring. And.
00:11:19.160 - 00:11:38.660, Speaker B: It view doesn't come for free. So we will install it. Install Shex.
00:11:41.740 - 00:11:45.276, Speaker A: And we have to do a little bit of config to set it up.
00:11:45.298 - 00:12:00.780, Speaker B: But I actually think we already did. That's all right. So let's go back to our template, our boilerplate.
00:12:00.940 - 00:12:10.896, Speaker A: We got the wires set up. We have done the plumbing to get the state ready in main js.
00:12:10.928 - 00:12:20.230, Speaker B: No, we have not. So we will plumb it through. Here's our store.
00:12:21.080 - 00:12:24.936, Speaker A: And this middleware here tells view we.
00:12:24.958 - 00:12:28.330, Speaker B: Want to use the store global state.
00:12:38.880 - 00:12:48.192, Speaker A: So how do we test? We're going to do a couple things. I am really, like I mentioned, terrible at UI, so I'm going to import.
00:12:48.326 - 00:12:55.250, Speaker B: A library called Naive UI, which is an app name.
00:13:02.200 - 00:13:05.844, Speaker A: It's a component library so I don't have to go in and make each.
00:13:05.882 - 00:13:09.860, Speaker B: Component, which is just awful.
00:13:11.800 - 00:13:22.232, Speaker A: It's similar to bootstrap. I'm sure a lot of you guys have used bootstrap or materialize. Materialize is another good front end framework for component building. And we can do things like just.
00:13:22.286 - 00:13:25.724, Speaker B: Call the component button and it gives.
00:13:25.762 - 00:13:36.344, Speaker A: Us a nice, beautiful button. Instead of two clicks right, two clicks left. There's no worse time than trying to.
00:13:36.482 - 00:13:46.944, Speaker B: Horizontally center something in HTML and CSS. My server didn't like some of that, but let's see if webpack was just.
00:13:46.982 - 00:13:50.230, Speaker A: Complaining while the modules were being built.
00:13:54.760 - 00:14:15.850, Speaker B: Something more sinister. Can't resolve store because it's in assets. So I put this in the wrong spot. Needs to be under src. Let's see if that went away. Cool. All right.
00:14:19.100 - 00:14:23.484, Speaker A: So we have our app view and in our components we have our hello view.
00:14:23.522 - 00:14:27.152, Speaker B: So if we look at our little.
00:14:27.286 - 00:14:32.528, Speaker A: Application here, Mandelbots, this is where all the junk here is.
00:14:32.694 - 00:14:34.370, Speaker B: We can just get rid of that.
00:14:38.980 - 00:14:53.252, Speaker A: This will keep this. So there's some text here, even though we didn't get it's because it's injecting it through the props. Again, this is a view specific thing, but it's passing it here in the higher level component.
00:14:53.316 - 00:15:10.924, Speaker B: So we'll say welcome to the wonderful world of man robots. Tons of exclamation marks. Cool.
00:15:11.122 - 00:15:12.510, Speaker A: Okay, so.
00:15:14.480 - 00:15:22.050, Speaker B: We are going to test our plumbing like I've been saying for hours now.
00:15:26.100 - 00:15:28.610, Speaker A: We're going to create another component here.
00:15:29.240 - 00:15:31.670, Speaker B: Called mint button.
00:15:34.680 - 00:15:40.996, Speaker A: View. And if we go into some of.
00:15:41.018 - 00:15:46.216, Speaker B: The naive UI documentation here, you can.
00:15:46.238 - 00:15:52.200, Speaker A: See that they like to split their templating up into different components.
00:15:56.710 - 00:15:59.330, Speaker B: Let's look at their secondary button code.
00:15:59.400 - 00:16:03.730, Speaker A: So they have a template specifically for these buttons.
00:16:05.910 - 00:16:10.710, Speaker B: I will just start template.
00:16:13.290 - 00:16:19.000, Speaker A: All right, so we're going to have an end button, which is their syntax for a button, for a pretty button that I don't have to write.
00:16:21.850 - 00:16:22.600, Speaker B: End.
00:16:25.710 - 00:16:28.426, Speaker A: And in view, in order to call.
00:16:28.528 - 00:16:34.320, Speaker B: A method on a click of a button, we say this. So.
00:16:36.210 - 00:16:37.680, Speaker A: Our stubbed out.
00:16:39.970 - 00:17:05.080, Speaker B: Module function is called hello World. So we'll call hello World here just to make sure our phone is good. I'm going to copy and paste this section so we can get a little bit.
00:17:07.290 - 00:17:36.338, Speaker A: All right, so Viewx has a couple utility functions, Mapgetter and map actions getters is the functions we saw here. So it'll get a piece of our state. Actions is here. And then you can also do mutations, which we won't do in this tutorial. So we've defined a component. We have imported the naive Ui button, and we have a bunch of stuff here which we'll use in a bit.
00:17:36.504 - 00:17:45.730, Speaker B: For now we'll just say methods, map, actions.
00:17:47.270 - 00:18:00.714, Speaker A: I think stark was the name of the specific store and we will hello World. All right, if everything looks good here.
00:18:00.912 - 00:18:11.178, Speaker B: Everything should look good here, and we'll inspect element. We do not have a button.
00:18:11.264 - 00:18:19.350, Speaker A: That is because nothing is importing this component. So our hello world obviously is being shown.
00:18:19.510 - 00:18:52.740, Speaker B: So we're going to import our branch new shiny button and we will define it in our components and we will.
00:18:52.810 - 00:18:54.870, Speaker A: Just put it below our message.
00:19:07.290 - 00:19:10.214, Speaker B: And it does not show up.
00:19:10.412 - 00:19:20.090, Speaker A: Okay, so we do not use map getters even though we define it. So we'll use it later. Let's bub it out. And we will just keep actions.
00:19:24.030 - 00:19:28.780, Speaker B: All right, this is a button. We have a button.
00:19:33.010 - 00:19:46.034, Speaker A: And it prints hello world. So looks like we are all good. So new component, new store, new state carrier with Vuex. Let's take out some of the things.
00:19:46.072 - 00:19:52.900, Speaker B: We used test to test and start breaking stuff.
00:19:54.790 - 00:20:22.590, Speaker A: All right, so we know we want to connect to the wallet because we know we want the people on this live stream to be able to mint. And we know that if they connect to the wallet, we want to expose certain things that Argentx exposes. So Argentx is the most used wallet on Starknet right now. And Argent X is a nice wrapper around Starknet js.
00:20:29.250 - 00:20:31.760, Speaker B: What better place to find it?
00:20:39.590 - 00:21:21.630, Speaker A: So this gives us some good ideas about what we need to import it. Some of the same functions that we just talked about. So get Starknet gives us Starknet js and then we can start interacting with the user's wallet if they have it installed. So this also does not come for free. So we install. And actually I was playing around earlier and for me, the new version of Get Starknet from Starkx was not working. So that's why you're going to see me import a specific version.
00:21:21.630 - 00:21:38.486, Speaker A: All right, so we'll import that. And we're all sorts of broken over.
00:21:38.508 - 00:21:39.640, Speaker B: Here, but that's okay.
00:21:44.530 - 00:21:52.146, Speaker A: And where are we going? So we know we need a bunch of stuff that is actually already available.
00:21:52.248 - 00:22:00.280, Speaker B: To us in the boilerplate. Kill that.
00:22:03.050 - 00:22:04.454, Speaker A: We're going to use a lot of this.
00:22:04.492 - 00:22:04.694, Speaker B: So.
00:22:04.732 - 00:22:15.638, Speaker A: L two active account. L two active account. Signer. L two active signer. L two, active provider. You might not need it all for what we want to build, we will need most of it. So we'll come back to the mint.
00:22:15.654 - 00:22:17.774, Speaker B: Button in one sec and we'll start.
00:22:17.812 - 00:22:19.120, Speaker A: Building out our store.
00:22:21.730 - 00:22:27.200, Speaker B: So we'll steal this. We will steal this.
00:22:33.510 - 00:22:37.090, Speaker A: We will build this out in this session.
00:22:38.550 - 00:23:31.170, Speaker B: We will steal this. And that is all. Steal that. Spellers will steal the air state. Cool. Looks wrong.
00:23:32.580 - 00:23:55.656, Speaker A: Okay, so we have the getters, we have the state, and we have the mutations that we'll want done on that state. I have a linter, but for some reason I think I need to install prettier on it.
00:23:55.678 - 00:23:56.504, Speaker B: But anyway.
00:23:56.702 - 00:24:24.080, Speaker A: Okay, so we want to connect to the wallet. Async l two connect wallet on 37 here. Let's start without async and see if we need it. So l two connect wallet. We're going to commit to the state some various pieces that are going to be given to us by Argent X. And those things are the things that we need, like the provider.
00:24:28.120 - 00:24:29.136, Speaker B: And the signer.
00:24:29.168 - 00:24:39.050, Speaker A: So 38, 39. This all looks really similar to Argent X's documentation. In fact, it might be line for line.
00:24:44.460 - 00:24:46.330, Speaker B: So we will steal it.
00:24:51.520 - 00:24:54.204, Speaker A: All right, so get Starknet, which means.
00:24:54.242 - 00:24:55.516, Speaker B: That we need it from.
00:24:55.618 - 00:25:03.630, Speaker A: We already imported it into our dependencies. Now we're not using Stark itself.
00:25:05.360 - 00:25:07.070, Speaker B: So we have the wallet address.
00:25:08.880 - 00:25:12.590, Speaker A: Let's just print some stuff out to prove that we're doing something at all.
00:25:13.640 - 00:25:41.644, Speaker B: It's all right. Let's spin our server back up. That same error is going to crop up. It looks like I did not set.
00:25:41.682 - 00:25:46.544, Speaker A: This meeting for long enough. We're not even into the Cairo stuff.
00:25:46.582 - 00:25:51.250, Speaker B: And Zoom just popped up a warning to me.
00:25:54.500 - 00:26:05.076, Speaker A: So maybe right before this meeting cuts me off, I'll kind of open it up to you guys to ask if you have some time, if you want to keep digging in, if you want to dig into the Cairo stuff. But for now, I think we still.
00:26:05.098 - 00:26:06.950, Speaker B: Have a bit of time.
00:26:11.420 - 00:26:13.448, Speaker A: Okay, so to see if we're really.
00:26:13.534 - 00:26:14.490, Speaker B: Doing anything.
00:26:16.460 - 00:26:19.290, Speaker A: Heat map actions, instead of hello world.
00:26:26.300 - 00:26:29.800, Speaker B: We will import our l two connect wallet.
00:27:07.290 - 00:27:12.230, Speaker A: I'm assuming since you guys are on this live coding session, that you're also.
00:27:12.300 - 00:27:59.970, Speaker B: Feeling the fomo of not going to devconnect in Amsterdam. I am as well. There's the await we needed. Make sure it's an async function. More errors. We don't use commit here. All right, have we done anything? We have.
00:28:04.260 - 00:28:09.676, Speaker A: This must have cached the DaP connection.
00:28:09.708 - 00:28:21.144, Speaker B: So let me go in and reset that. All right, so the wallet knows nothing.
00:28:21.182 - 00:28:25.320, Speaker A: About localhost 80 80 now. So now it should ask me for permission.
00:28:25.980 - 00:28:29.160, Speaker B: And there it goes. Yes, we do want to connect.
00:28:29.230 - 00:28:31.610, Speaker A: And now it's popping that out.
00:28:33.600 - 00:28:34.108, Speaker B: Cool.
00:28:34.194 - 00:28:35.324, Speaker A: We're doing things.
00:28:35.442 - 00:28:40.750, Speaker B: We're making changes. Do things. That's always good.
00:28:48.170 - 00:29:04.300, Speaker A: All right, so we have the wallet address and we have the wallet address, and we have a state management system in Vuex. So here's where our commits will come in, and this will allow us to use it elsewhere in the app. So.
00:29:07.310 - 00:29:25.970, Speaker B: If Starknet is connected, we'll do something, and if not, we'll commit our error.
00:29:44.730 - 00:30:07.950, Speaker A: We're just going to save, we're just going to save a bunch of our important pieces. So we're going to call our mutations set l two active account, set l two active signer, set l two active provider. And set l two is connected. So now once we exit this function, this action, we don't lose all this important information like the wallet address, the Starknet signer, and the Starknet provider.
00:30:11.650 - 00:30:12.400, Speaker B: Cool.
00:30:13.990 - 00:30:25.536, Speaker A: So let's make it a little prettier to see what's going on on the front end. And let's provide a little bit more.
00:30:25.558 - 00:30:26.972, Speaker B: Information to the user.
00:30:27.036 - 00:30:32.230, Speaker A: So view has a conditional rendering system.
00:30:33.960 - 00:30:35.190, Speaker B: So if.
00:30:37.080 - 00:30:38.404, Speaker A: Same check that we just.
00:30:38.442 - 00:30:43.224, Speaker B: Did, l two active account do one.
00:30:43.262 - 00:30:43.850, Speaker A: Thing.
00:30:45.580 - 00:30:48.970, Speaker B: The else do another thing.
00:30:51.820 - 00:30:59.900, Speaker A: And if the user is not connected, we'll connect them. And if the user is connected, we'll.
00:31:06.980 - 00:31:08.332, Speaker B: Mint our bot.
00:31:08.476 - 00:31:14.688, Speaker A: And now we need some of these state queries like l two connected and.
00:31:14.774 - 00:31:20.084, Speaker B: L two active account, which is also.
00:31:20.122 - 00:31:21.670, Speaker A: Why we need this line.
00:31:26.280 - 00:31:27.030, Speaker B: Great.
00:31:31.990 - 00:31:43.026, Speaker A: And then this gives us a boolean for l two is active. So right now we're saying, l two is active. Please connect your wallet, which we want the inverse of.
00:31:43.208 - 00:31:44.700, Speaker B: And it.
00:31:48.430 - 00:31:51.580, Speaker A: And just for nicety sake, we'll say.
00:31:54.030 - 00:32:03.966, Speaker B: Or we will say mint and give the user some information to make sure.
00:32:03.988 - 00:33:12.062, Speaker A: They understand who they're minting as. And then some nice little Ui sugar from the naive library. One thing I love about webpack is you can see it work as we, as we can see a little bit of the way that the Argent X wallet works and a little bit of the behind the scenes of it here. And it happened actually on my first page load when the Argent x wallet had cached localhost 80 80. So if I connect here, it actually doesn't spin up a modal again, it just says, hey, I know who you are. You're localhost 80 80. You're in my whitelisted pages.
00:33:12.126 - 00:33:15.154, Speaker B: So now I'm connected and now the.
00:33:15.192 - 00:33:42.906, Speaker A: State is stored in our viewx. So that is about as far as I want to go with the UI until we have contracts because we have a UI that can basically access the signer which is the public and private starknet key pair. So that is how the Starknet contract will identify you as you. So let's start writing some cairo while.
00:33:42.928 - 00:33:43.560, Speaker B: We have some time.
