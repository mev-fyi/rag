00:00:00.570 - 00:01:44.090, Speaker A: It. I'm going to go live now just so the community doesn't wait. Go live. We are live. So if community is waiting, we're just going to give another minute or two for more people to join. All right, I think we can get started. Let me just do a few more things to set up on my end.
00:01:44.090 - 00:02:56.610, Speaker A: Okay. Good afternoon to those in Europe. Good morning to those in the Americas. Let's call it. And good evening to those to the east of us. Today we have special guests from consensus coming to present to us different products that. I apologize.
00:02:56.610 - 00:03:31.670, Speaker A: Sorry, I just had an echo in my end. I think it's solved. So anyways, the consensus team is building a lot of products, both in the Ethereum space and also in the l two space. And today we are going to talk a bit about what they're doing on the star connect front. So just to get started, can each person on this call perhaps introduce yourselves and what team you're on at consensus? Should we start with you, David?
00:03:33.450 - 00:03:43.770, Speaker B: Yep. David Killen. I'm an engineer with truffle, so I'm working on, in particular, on the layer two integration and scaling teams at Truffle.
00:03:45.950 - 00:03:50.160, Speaker A: Thank you. And maybe Joran, do you want to go next?
00:03:51.410 - 00:03:52.350, Speaker B: Yeah, no problem.
00:03:52.420 - 00:04:00.530, Speaker C: Hey, everyone. Jorn. I'm on the diligence team at consensus, working on security, tooling and auditing.
00:04:02.070 - 00:04:04.130, Speaker A: Great. And then Ludo.
00:04:04.950 - 00:04:11.910, Speaker D: Hello, everyone. Nice to see you all. I'm Ludovic, project manager at Consensus, working on Metamask snaps.
00:04:12.570 - 00:04:15.000, Speaker A: And Sharon, do you want to introduce yourself?
00:04:15.370 - 00:04:28.620, Speaker E: Sure. Thanks, Leron. Hi, I'm Sharon Bern Carter. I'm on the infura team, and I'm doing product management work in regards to enabling l two s like Starknet and multichain networks on the infuria platform.
00:04:30.350 - 00:05:00.820, Speaker A: Thank you for that. So I think certainly before I joined the industry, I was a bit taken aback when I realized that consensus had so many products that they're working on that are all really under this consensus umbrella. So can one of you maybe just give an introduction, taking a step back, like, what is consensus in the broadest sense and what consensus does?
00:05:02.950 - 00:05:42.770, Speaker E: I could give it a shot if you'd like. Lee Ron, consensus is really a blockchain technology company very much focused on product for adoption of blockchain, which then implies building a really awesome web three stack. And I think the representatives on the call today will demonstrate that to you, that we're laser focused on providing the tooling, the security, and the ability to deploy excellent web three applications. So that's the core of consensus in a nutshell.
00:05:43.910 - 00:06:24.694, Speaker A: Thanks a lot, Sharon. Yeah, I think that's really helpful. All right, let's just shift gears a bit to Starknet more specifically. So I'm here to ask the questions today. I usually answer some of these questions, but I'm happy to ask them today. How do you see how Starknet is different, and why does its technology stand out? Should I nominate somebody to answer, or does somebody want to step forward? Ludovic, do you want to give it a bit of a go? Yeah, sure.
00:06:24.732 - 00:07:47.220, Speaker D: So I might not be the best person to talk, generally speaking, about. So I think the reason why everyone is so excited about working with the Starcore team on Starknet is really because there are some fundamental characteristics of Ethereum that are overcome by technology that Starknet is providing. And so this comes with challenges, obviously. So on the metamask part specifically, one of the issue that comes with the fact that there is so much innovation coming from Starnet is that, for example, the cryptography that is being used in Starknet is a bit different from the one that is used on Ethereum. And so, as a result, for example, metamask is not natively compatible with Starknet. And so that's one of the things that we have worked on with a solution that is called snaps in order to provide users with a Starknet address. And so benefiting from all the great improvements in terms of scalability and privacy that Starknet is providing down to metamask users, the more than 30 million metamask users that we have.
00:07:47.590 - 00:08:19.098, Speaker A: 30 million. What a number. Yeah. So I think in a few minutes we'll go deeper into metamask and the actual tech integration there. But, yeah, I would agree. I think the Starknet paradigm of the validity roll ups is a huge differentiator, and interesting differentiator on the technological standpoint. Now, maybe your end for anybody here.
00:08:19.098 - 00:08:34.000, Speaker A: So it's been for a few months that this partnership of consensus with Starknet has been announced. Why did you choose Starknet? And how far back exactly do the two of us go together?
00:08:36.050 - 00:09:38.870, Speaker C: So I can speak towards the partnership, at least on the security side. I'm sure that things happened before that as well, but I think it goes at least as far back as one and a half years ago. This is at least when at the diligentness team, we really started talking with the team over at Starkware, because what we saw l two s coming, everybody saw them coming, and we figured that it was going to be very important to make sure that smart contracts on l two s were going to be as secure as the ones on l ones. And with Starknet different from other solutions. One of the things, probably the biggest difference is that smart contracts are generally written in Cairo, although there is of course the wire that aims to introduce compatibility with solidity. But the fact that everything happens in Cairo now kind of introduces these things. Whereas a security engineer or as an auditor, you have to think about a lot of different things.
00:09:38.870 - 00:10:22.050, Speaker C: So at that point we kind of started working together to train some auditors and to essentially build some security knowledge. So I say training, but really this is more of like a collaborative research project because it's not like there was a lot of resources available at that time. But yeah, it's been great. And yeah, we did some audits and security reviews of what came before Starknet. So that was Starkx and that was great, but that's only my part. Maybe someone else can reflect on all the other stuff that consensus does together with Starkware.
00:10:22.950 - 00:11:42.742, Speaker E: Actually we've been working with Stark where I think since around 2020 we actually stood up one of the DAC nodes for being a data availability committee member. So it's gone back a while, but this bigger, larger partnership was sort of formed in June and it has been really collaborative. It's a pleasure working with the Starknet team. They're really responsive and on the infura side, we found it very easy to stand up the network with their support using the Pathfinder client, which is built by equilibrium. And seeing Starknet in comparison to optimistic roll ups, it's very interesting to look at the differences, the speed that they're looking to achieve, the ability for users to extract their funds same day as opposed to the seven day delay. So it offers new opportunities and different capabilities for our user base and broadens that marketplace for developers to consider deploying their applications. So it's been a really great partnership and really enjoy working with both the Starknet team Ariel and then the Pathfinder team Merco.
00:11:42.742 - 00:11:44.080, Speaker E: It's been really great.
00:11:46.210 - 00:12:52.766, Speaker B: Yeah, well, I can speak to Truffle was probably about this time last year the new, relatively new l two team at Truffle started doing research on ZK roll ups. From there we were led into Starknet. Of course, it seemed to be at the time the most advanced of the ZK roll ups. So that's probably why it was selected to begin with, because it was something we could start using and start building towards and looking at how we might integrate that into truffle in terms of building tooling that properly started at the beginning of this year. We've had some interactions with a number of the Starknet team. We met up with some of them in Amsterdam at Devconnect and gave them an early demo of some work that we had been doing. So I feel like the newcomer when I hear about how long everybody else has been working with Startnet.
00:12:52.766 - 00:13:02.360, Speaker B: But we've really enjoyed working with the people at Startnet, too. They've been more than helpful and other members of the community as well.
00:13:04.570 - 00:13:38.740, Speaker A: Thanks, David. And for those listening in, David, it's 12:30 a.m. For him, 1245 now. So thanks for staying up so late. Just on this note, somebody asked how long we've been working on Starknet since for. And somebody says, it feels like one month, one year and ten years all at the same time. With the way the pace of the singer develops, going to shift gears now and enable screen share, I think this will be the meat of the call today.
00:13:38.740 - 00:14:10.810, Speaker A: I just want to go back one by one with each of you and go into more depth on what each tool can bring to audiences using Starknet. And perhaps if you want to go through a demo or through some slides or give some information, feel free to do that. I think. Let's start with Ludovic. Do you want to start with you and go over metamask and the snap solution as a workaround to get it integrated with Starknet?
00:14:11.390 - 00:15:09.440, Speaker D: Yeah, sure, definitely. So I think that what you will see today is that every single component that we are going to talk about or demonstrate is really coming nicely together when you are a developer working on Stacknet. And so what I'm going to show you is one specific aspect of it, which is like wallets. So before I jump into a demo, I just want to maybe tell to everyone in this call what snaps is, as I've been mentioning that before. So metamask snaps is basically a system that allows anyone to expand the capabilities of metamask. What a snap is, at its root, is really a program that is going to run within metamask. And this program has the ability to customize the wallet experience.
00:15:09.440 - 00:15:44.300, Speaker D: And some of the things that we can do with snaps is, for example, adding support to different blockchain protocols that are currently not compatible with metamask, or modify existing functionalities using any kind of APIs that you want to add to metamask. And so the reason why I'm here today is because we have been very lucky to work with Starknet on a snap that I'm happy to show right now. Let me share my screen.
00:15:46.670 - 00:15:48.060, Speaker B: Can you see my screen?
00:15:48.910 - 00:15:49.754, Speaker A: Yeah.
00:15:49.952 - 00:16:38.662, Speaker D: Excellent. So I'm currently on Snaps consensus net, which is the repository where we share some of the snaps that have been built internally by consensus. And I'm going to go on a website that is dedicated for Stacknet. And so basically this DAP is allowing users to manage their stacknet based assets using a snap. So I'm going to go through the flow. So basically the first thing that I want to do is I want to be able to connect with Metamask Flask. Metamask Flask is a developer preview of Metamask where snaps as a feature is available, and the team is currently working on releasing snaps on the generally available version of Metamask.
00:16:38.662 - 00:17:22.194, Speaker D: So I'm going to click on connect. I have a permission request here in order to connect. That's something that users are very much used to in the ecosystem connecting metamask to adapt automatically, that there is going to be recognition that I don't have the Starknet snap already installed. And so this is going to allow me to install this snap again. Snap is a program that is going to be installed and run within metamask. So I'm going to approve this. There is a quick confirmation screen to make sure that I trust the source of this snap and I'm going to confirm this installation.
00:17:22.194 - 00:18:13.654, Speaker D: What is currently happening in the background is that the snap is being installed and there is something that you all that are familiar with the starnet ecosystem is happening, which is the deployment of an account contract here. I'm currently actually on an account that I already had before, which is the reason why I have some ETH already on this account. And as you can see, I'm not on the main net, I'm currently on the testnet. What's very interesting here is that I actually have a new address that has been created. So this address is a starknet account, which is different from the address that I have here in Metamask. And so this address is my starknet address that I'm going to be able to use in order to receive assets and send assets. And so very simply here I have the list of my assets.
00:18:13.654 - 00:19:16.350, Speaker D: I have the ability to add other tokens that currently live on Starknet. And the one thing that everyone obviously is going to do with this is for example, I'm going to use Argentex is here, which I'm sure a lot of people in the community are using today, or bravos. I'm going to copy the address here and I have the ability very simply to send a few if on an address, that is going to be my address. I can do the flow. I have some estimation of the fees that are going to load. That is taking a bit of time as always, and I'm able to confirm the transaction. And so what is going to happen here is that in metamask I have again a notification that is going to pop up in order to give me information about what I'm currently about to sign using the snap, and I'm going to approve that which is going to send the transaction.
00:19:16.350 - 00:19:57.050, Speaker D: I'm going to stop here for the demo. What's important to understand here is that there is a snap which is the program that runs within metamask. This program I can show you in setting snaps. So I have multiple snaps that are currently installed. And here I have the starknet one that has been used for this demo and this darknet snap can connect to any DAP. So here a Dap that is specifically used in order to manage your starknet assets. But any DAP developer can use this nap in order to add compatibility with metamask directly in their DAP.
00:19:57.050 - 00:20:12.800, Speaker D: If you want more information on snaps, you can visit Metamask IO slash snaps where you will have more information about snap as this feature. And if you want to find again the demo that I presented to you with the Starknet snap, you can visit snaps consensus net.
00:20:17.130 - 00:20:36.880, Speaker A: Thanks. Maybe just a few questions on snaps, perhaps? Let's just explain why the functionality is needed to begin with. Why isn't the metamask extension, as it stands, sufficient or adequate to integrate directly to starknet or to other chains that are on?
00:20:38.050 - 00:21:34.320, Speaker D: So, so here it's mainly related to the cryptographic that is used. So metamask has been built in order to answer the specific needs of Ethereum. And so the approach that metamask is currently taking is that metamask could obviously integrate every single protocol. But then there is a question of which one is going to be integrated first, how do we make sure that we keep everything updated? And so the answer to this big problem, which is like how do we add more protocols to metamask, has been to say, okay, let's actually open up this issue to the community and allow anyone in the community to build a snap that is going to allow this configuration. And so anyone in the community can participate by creating a snap and by adding the compatibility for their own protocol where they see fit.
00:21:36.070 - 00:21:46.980, Speaker A: Got you. Thank you. That makes a lot of sense. And these questions are always hard to answer, but is there a rougher timeline that the community can expect for general availability of this?
00:21:49.110 - 00:22:34.034, Speaker D: Yes. What's important to understand is that first snaps is currently available, but on Metamask Flask, which is the developer preview version of Metamask. So anyone can already use the Starknet snap today and experiment with it. And we have got actually a good amount of traction on the stocknet snap is the most used snap currently today, which is very exciting. And then there is your question about so when is this going to be available for everyone that is currently using in Metamask? So, like the general availability of this feature and the current target is for the first half of next year.
00:22:34.232 - 00:22:47.320, Speaker A: Awesome. That is very exciting. All right, let's maybe move to should we do truffle next? David, do you want to give us a bit of an overview of.
00:22:48.250 - 00:23:56.800, Speaker B: So what we're building at the moment is what's called a truffle box. If you're not aware of what a truffle box is, if you used truffle before, it's basically a boilerplate code, package of boilerplate code, which you can use to essentially scaffold a project. So if you already have truffle installed, you can use a simple command to grab that box from our repository and it will set up the project for you. So you'll have a base project there ready to go to play with. There'll be a couple of sample contracts in the box which you can start playing with and then go from there. Really, the idea with the box is that without integrating into truffle more deeply, it allows us to build and test and experiment with different networks. And we've built another number of l two boxes as well.
00:23:56.800 - 00:24:38.090, Speaker B: But it's probably good if I just give you a little bit of a demo. This is a preview. The box is not released yet, so there may be some changes still, and I guess I'll just give you a demo of what we've got. That's probably the easiest thing to do. So first of all, it's a command line tool, just like truffle. I've just got three directories here, just to sort of outline some of the structure of it. We've got the contracts directory, which has Ethereum and Starknet contracts.
00:24:38.090 - 00:25:58.834, Speaker B: As you can see here, there's a separate one for accounts in the build directory. So the outputs, your compiled contracts and your ABI files into separate directories within that build directory. And then I've got this other one here called Starknet accounts, which essentially has a collection of accounts that I've been using for the different networks that I'm using to test with. So I guess the first thing to do is just demonstrate. So this is just going to essentially compile all the contracts that I have or all the Starknet contracts other than the account contract because that needs some special treatment in compilation. And that's done now by default out of the box, pardon the pun. The Starknet box will come configured to use infura.
00:25:58.834 - 00:26:13.050, Speaker B: So the infuria endpoints there. So if you've got your infura accounts, it's a matter of logging in there, creating a starknet project and you're up and going. It uses a n file.
00:26:14.830 - 00:26:15.354, Speaker A: For your.
00:26:15.392 - 00:26:36.100, Speaker B: API key and then the box does the rest. Anyway. Once the box is released there'll be a fairly comprehensive documentation that comes with it which explains how to get all that set up. But for this demonstration, given that can take some time to demonstrate another feature of the box as well.
00:26:45.080 - 00:26:45.568, Speaker A: We'Re just.
00:26:45.594 - 00:27:52.466, Speaker B: Going to start up Devnet. So this is the Starknet Devnet. So the box is also configured to be able to use Devnet as well. So that's got some pre configured accounts in there that we can use and from there we can deploy a contract. So we're just going to do that. Often the P and the O are too close to each other and the people. So what I'm going to do is I'm just going to select, and I think before I do this, I'll just confirm that this is the configuration file.
00:27:52.466 - 00:28:32.814, Speaker B: And what I've done in here is I've just set my default network to Devnet. So the box has a concept of default network. So if you're continuously using either Devnet or one of the testnets you can set that as your default there. And it just alleviates a little bit of typing from using the command line. Less typing on the command line is a good thing. I'm just going to use, I can provide an account. So this is one of the accounts from Devnet.
00:28:32.814 - 00:29:41.160, Speaker B: So we're just going to use that as the account to do the deployment. We're going to tell it we want to use our ERC 20 contract and we need some use the first account as our owner. So these are the constructor arguments for the contract. And we have an initial mint of tokens and it's a U two five six. So it needs two numbers. So that's just a little idiot sync using these tokens to this address.
00:29:49.760 - 00:29:58.430, Speaker A: And just stating the obvious for the listeners. These smart contracts are written in Cairo and being deployed in the stock. Yeah, very cool.
00:30:04.580 - 00:31:00.896, Speaker B: So then we've got our contracts deployed. I'm mindful of taking up too much time so that others get a chance to just quickly. There is some unit testing in there with Pytest available, so you can write some unit test in Python. That one's just running essentially the simple contract tests, which people might be familiar with from some of the Starknet tutorials, but also has. Once it's completed, we'll have capabilities to interact with your contracts on chain as well, once you've deployed them. So call and invoke and then getting information about contracts as well, with transaction statuses and those sort of things as well. But yeah, that's sort of what it's going to look like.
00:31:00.896 - 00:31:25.210, Speaker B: That's probably pretty close to what it will look like once it's done. As I said, we don't have a release date for it, but it's not far off. There'll be some document, there'll be a comprehensive set of documentation that comes with it, and we'll be working on some tutorials as well once it's released. So yeah, that's where we're at.
00:31:26.380 - 00:31:43.912, Speaker A: Thanks, David. It's very exciting. Yeah. I remember my first ever Ethereum smart contract deployed on testnet using truffle. I think it was like a pet shop. That's the standard one.
00:31:43.986 - 00:32:00.870, Speaker B: Okay. Yeah. Our whole sort of goal was to provide a tool set where developers can develop both their l one and l two contracts in that same project. So that's essentially what we're working towards.
00:32:01.400 - 00:32:01.812, Speaker D: Yeah.
00:32:01.866 - 00:32:10.000, Speaker A: With a command line that is similar, or if you're not identical to the one they're familiar with. That's fantastic.
00:32:10.080 - 00:32:11.140, Speaker B: Yeah, indeed.
00:32:12.520 - 00:32:19.480, Speaker A: All right, Yoran, do you want to give a bit of an overview of consensus, diligence, your plans on darknet?
00:32:20.320 - 00:32:21.070, Speaker D: Sure.
00:32:22.960 - 00:33:34.364, Speaker C: So unfortunately I don't have a demo because what we do is when you look at it, it is kind of boring because our main process is essentially looking at code. What we do, our main business is auditing. So this is essentially the review of smart contracts or code in general. So we've done some audits of other types of systems as well, and then to find if there's any particular risks or vulnerabilities that might be exploited and that can make you lose a lot of funds. That's half of what we do in the audits. The other half of what an audit report provides you is recommendations and guidelines on how you can improve the quality of your code altogether, outside of just fixing the vulnerabilities that we found. So you should really see audit as kind of a combination of things that allow you to fix vulnerabilities and make sure that your code overall gets way more secure.
00:33:34.364 - 00:35:21.284, Speaker C: So like I said, a little bit more towards the beginning of this call, we started researching Cairo and Cairo related vulnerabilities, and now starknet specifically, we've looked at and learned a lot about how there can be different types of vulnerabilities and what kinds of things to look for when you assess a Cairo smart contract. And so our offering now includes audits for Cairo based smart contracts as well. Or if you have a non starknet contract, if it's written in Cairo, we can also have a look at it. There's a lot of cool new types of bugs that we can find in Cairo smart contracts, and this is specifically in the Cairo pre one version, one smart contracts, because there were a few cool, I'm not sure what you would call them, but features or aspects of the language that made it somewhat easy to shoot yourself in the foot, so to say. So there were cool features like automatically importing external functions or accidentally, sometimes that could really mess up your system and you could accidentally lose a lot of value. There's also a lot of other cool things that we looked at, some of the initial experiments and smart contracts that were written out there, and we found some cool little vulnerabilities. Luckily, the Starkware team is awesome and they actually fixed this.
00:35:21.284 - 00:36:14.420, Speaker C: And a lot of other language aspects where, I shouldn't say fixed, they improved the language to such an extent that it's much, much more difficult now to actually shoot yourself in the foot. We're also looking forward to the new Starknet version, or the new Cairo version, I guess, which improves on the language even more, kind of making our job harder or easier. Depends on how you look at it, because there's going to be less easy vulnerabilities. But it's also much better for us because we essentially get to focus on the business logic and figuring out if there's something wrong with that, instead of having to focus all of our time figuring out whether you have these more like logic language level bugs.
00:36:15.320 - 00:36:18.260, Speaker A: Yes, that's kind of the high level overview.
00:36:18.340 - 00:36:21.480, Speaker C: So in one word, we do audits.
00:36:23.340 - 00:36:23.752, Speaker B: Yeah.
00:36:23.806 - 00:36:26.456, Speaker C: And if there's questions later in the.
00:36:26.478 - 00:36:40.780, Speaker A: Call, I'd love to answer them. That makes sense. I think a lot of auditors, you hope that you don't uncover bugs in the language, and if you are uncovering bugs and more on the business logic.
00:36:43.920 - 00:37:08.890, Speaker C: So it's not a bug in a language per se, it's more of like solidity pre eight didn't have overflow checks and it was really easy for people to mess it up. But because solidity eight now has overflow checks, it's kind of like that. The language in a certain sense made it easier to write secure code, and Cairo has gone through that process as well, which is great to see.
00:37:09.660 - 00:37:36.080, Speaker A: So just two follow up questions. Firstly, you mentioned this transition from Cairo pre 1.0 to Cairo 1.0. Just for the benefit of some listeners, I think there are people in the community who are not even familiar with this update. Do you want to perhaps give a bit of an overview of this new language from an auditor perspective? Maybe I'll add a few comments myself as well afterwards.
00:37:36.500 - 00:38:38.852, Speaker C: Okay, so I'm not the expert on this and I don't believe it's out yet, right. So I haven't actually seen everything how it is now, and that's new. So just remember the post and everything we've talked about with people from Starquare. But in general, if you look at Cairo pre 1.0 and some of the contracts that have been written over time, it's very visible that Cairo is a language that's grown and you can see that there are features that got added over time to fix problems that people encountered. So in the beginning, Cairo was a very low level language that was almost assembly like people wrote loops by creating labels and jump tubes. And if you look at some of the Cairo libraries, you will see very difficult to read code because it uses all of this.
00:38:38.852 - 00:39:27.120, Speaker C: And it was very normal that you access the memory register yourself, like the AP register for some of you. And there were all these low level things. And then over time in the library there came a lot of improvements, like things, for example, dealing with dictaxis. It automatically handled pointer updates for you, removing all of these rough edges. But the language itself still had all these low level features and all these low level things that you needed to do, like you need to allocate the stack yourself. And there's a difference between tempfars and stack vars variables. And this is all very low level, complex things that you don't need to worry about as a developer or don't want to worry about it as a developer.
00:39:27.120 - 00:40:19.780, Speaker C: So as I understand it, a lot of these building blocks that were part of building Cairo pre 1.0 have been smoothed out and removed where they aren't necessary anymore. And then in addition to that, I believe that Cairo 1.0 also has learned some things from languages like rust and its styling and functionality and rust for those. I'm sure most of you are familiar with it, but it's a language that's hyper focused around security and writing secure code, and its compiler is kind of mean. If you do something that's kind of wrong, it tells you hey, you're doing something wrong. And the nice effect of this and the typing system that comes with it is that it's much, much more easy to write code that is correct.
00:40:19.780 - 00:40:47.710, Speaker C: It's much more easy to write code, or I should say differently, it's much harder to write bugs in your code. And so I haven't played around with the new Cairo version yet, but I expect that all those things will present themselves as well in some form, and they might not make it much more easy to write the code, but they will make it more easy to write secure code.
00:40:49.360 - 00:41:52.044, Speaker A: That's a good summary, Yorin. I'll just add a few points on this Cairo 1.0 now that we've gone into this tangent, because it is worth mentioning on a community call. Yeah, historically speaking, Cairo was developed actually as an internal tool at starkware to avoid these iterations of having to write new polynomial constraints for every time we wanted to generate a stark proof for a new use case. So the Cairo team, Leo Goldberg, Shakhapapini, and a few others developed this language with these 49 polynomial constraints that you could write anything in. And then because it was for internal use, it was very low level, like you're saying, managing the registry, managing memory, and no for loops, no while loops, and also other issues that you could only assert that something was true or false. You couldn't assert that a transaction reverted or a transaction failed.
00:41:52.044 - 00:42:47.396, Speaker A: So transitioning to a decentralized network like Starknet will eventually be you need to have Chiro bulletproof. For a decentralized network, I need to support proof of reverted transactions or failed transactions, and also syntax that is sufficiently high level that an average developer can go and write in that language and not just go too crazy. So if I'm oversimplifying with analogies, it's like going from c to Python in terms of syntax lightness. Like C, you're managing memory, Python you can keep much more high level, and hopefully that will also help the developer experience complementing all of these products that consensus is doing. Just to be clear, Cairo 1.0 is a separate effort to this call on the auditing front, if you have existing Cairo 0.9 code and you're going to be rewriting your Cairo to 1.0,
00:42:47.396 - 00:43:00.650, Speaker A: it is definitely worthwhile reaching out to Yoran. Yes. And so that leads me to my final question for you, Yoran. If developers want to get in touch with you, what is the best way to reach out?
00:43:02.540 - 00:43:36.710, Speaker C: So we have a website consensus net slash diligence and there will be a form there where you can just put in your information and then we'll reach out to you. And otherwise, I'm on Twitter and a lot of our people are on Twitter, so keeping us a ping there usually also works. But the contact form really is if you want an audit, that's really the main way to contact us. If you want to just chat about Cairo security, then some of these other mediums are probably going to be better.
00:43:37.320 - 00:43:53.320, Speaker A: Great. And you're also always welcome to reach out to us and we can put you in touch with Jorn and the diligence team directly. Yes. Okay, shifting gears to Sharon, let's learn a bit more about infura.
00:43:53.900 - 00:44:05.710, Speaker E: Sure, I'll share my screen. I'm going to take the opportunity to walk people through how to get started. So let me just do that.
00:44:09.360 - 00:44:10.220, Speaker A: Bigger.
00:44:11.680 - 00:45:05.004, Speaker E: So just here on the infura website you can see when you land here. Okay, I want to learn about Starknet. So you can go to the Starknet page and it's very informative. It gives you links to more information about ZK rollups and also getting started, which brings you to our docs and developer resources. And then assuming you want to sign up, you'd sign up and that would be here. But I'm already signed up, funny enough, because I work for Infura. But once you're in your dashboard, you can create a new key, which is your API key and that's going to give you your full URL with your unique API key to put in your decentralized, you know, assuming that you've created a project, you can then select which of the networks you want to work with.
00:45:05.004 - 00:45:52.440, Speaker E: And in this case it would be starknet. And here you can get the URL. Probably you'll start with the Gerdy testnet and then later the main net. Not going to stay on this page too long because I don't want to reveal my own API key, but it's very straightforward and easy for people to set up very quickly and access these all for free at 100,000 requests a day. So it's a great start. The docs are very explanatory and link back to a lot of Starkware's great material and they list all the JSON rpcs that are supported so that people can get started with that. But I do think there is a bit of a learning curve with the Cairo, and I think Joan made it sound very friendly because he's so smart.
00:45:52.440 - 00:47:13.416, Speaker E: But we've built a very simple tutorial that I would recommend people take a look at. And the reason for that is that it points people to Openzeppen, where you can maybe pull down a Cairo template and start with that if you're an existing solidity developer. And so you can do a very quick comparison and deploy that very quickly through infura to the testnet and just get that end to end experience and start hacking around with that. And this is all available on the Infura blog site, on our infura IO site. And there's also, if you're not familiar with Infuria, a very simple getting started blog as well, how to sign up, how to connect and get your endpoints for a network, in this case startnet. So that's just a very simplistic overview of the resources that are available for developers because we really want to help developers have an easy onboarding experience. And I'll just actually drop those getting started blog and the tutorial to mint your first NFT within Fura on Starknet into the chat there for everyone.
00:47:13.416 - 00:47:17.428, Speaker E: And maybe you'll share those later Lewon with meeting notes.
00:47:17.604 - 00:47:36.620, Speaker A: But that's, yeah, we'll add that in the description after the. That's great. The infura dashboard is identical to the dashboard that you would see for your Ethereum integration as a developer, if I understand correctly.
00:47:36.700 - 00:48:00.810, Speaker E: Exactly. Yeah. So you just sign up, create your API key, and then you have the option of ten networks that we have available. More coming very soon. And so it's a great marketplace for developers to deploy to EBM and non EVM as required. But Starknet being an l two gives you that scalability. So that's something extra nice.
00:48:02.540 - 00:49:03.000, Speaker A: Great. So I think that wraps up the demos of each individual product. If anybody's listening and wants to post questions into the chat on YouTube, please feel free to. I know we usually run these calls in discord, so you're also welcome to ask in Discord and my colleague will send questions through to me and I'll ask them to the consensus team. So just in the next few minutes, should I do that? As we wrap up the call, perhaps some concluding remarks or questions? I'll open it up to all of you. Let's just go through perhaps a user story. So let's say I'm a hobbyist Ethereum developer I know how to write solidity.
00:49:03.000 - 00:49:43.450, Speaker A: I'm not doing this professional capacity, I'm just doing at my night when I'm at home. What are you recommending to me after this call? What are the calls to action? Perhaps maybe you'll just be repeating some of the stuff you've mentioned the past 45 minutes, but I think it's just worth wrapping up the previous presentations to doing this. I assume as this hobbyist developer will be able to go to the Infuria blog post, perhaps shall post in the YouTube chat now?
00:49:45.420 - 00:50:20.710, Speaker E: Yeah, that could be a good start. Start tinkering around. I would start with that blog, set up a free account, no cost, nothing to lose. And I would encourage people to maybe if they're confident, try writing that smart contract themselves, but leverage templates that are there and do that comparison and get that comfort level and also play around with the metamask snaps. I don't know. Ludo, anything you'd recommend on how to get started with that?
00:50:22.760 - 00:52:03.860, Speaker D: Yeah, so I will be sharing also a link in the chat and maybe also dropping in on YouTube so everyone can access that. But I think that ultimately what we have presented to you is really a set of tools that any developer, from their early experimentations on Starknet to the deployment production with thousands of users, all those tools are targeted for them to be used at different stages and for some of them all along the cycle. So you would be using truffle at the very beginning just to get used to writing in carol contracts. And along the way, for everything that is related to development, you would be using Inferra in order to get a very simple and easy to use access to the network. Once you get to something that has monetary implications and you want something that is very strong and secure, you could be relying on diligence in order to get an audit and make sure that what you have been doing is perfectly secure. And when it comes to deploying prod with getting access to millions of users, you have the Starknet snap that allows you to get access to all those users. So really, from early experimentations to production, all those tools are here for you if you have an aspiring starnet developer or somewhere that is much more experienced.
00:52:05.400 - 00:52:09.640, Speaker A: Thanks Navik. You really summarized that really well. Did you want to add something, David?
00:52:10.140 - 00:52:46.020, Speaker B: Yeah, just quickly. Obviously the Starknet Truffle box is not available yet, but it is coming. It won't be too far off. So for now, get into trufflesuite.com, download Truffle, get it installed and have a play with that just get to learn it. There's some great tools in there for developing your l one contracts. So we've got the truffle suite of tools available there to you, which includes things like Ganache, so that you can test your contracts locally.
00:52:46.020 - 00:53:13.470, Speaker B: If anyone's used ganache before, it's coming along in leaps and bounds with the other truffle tools as well. There's a lot happening in truffle, so it's worth taking a look at that now and get yourself ready for when the Starknet box is available, and you can start toying around with the Cora contract as well.
00:53:15.600 - 00:53:40.710, Speaker A: Thanks, David. Okay, I think that wraps up the call. So the calls to action will send in the YouTube description and in the discord. If community members watching this as a recording watching this live do have questions, feel free to write us in the discord. Message us on Twitter. I want to make sure the right team, the right people see the questions. So thank you for tuning in.
00:53:40.710 - 00:53:43.430, Speaker A: Bye bye, everybody.
00:53:44.200 - 00:53:44.930, Speaker D: Thank you very much.
