00:00:03.140 - 00:01:09.516, Speaker A: Hi everyone, my name is Casey Westcott, and I'm really excited to be talking to you about the musical possibilities of Starknet. My main focus has been on several different topics. One is the symbolic representation of music on Starknet. Two is music composition in using Cairo programs, using those generative models in Cairo programs, and integrating that into application logic, specifically games, music apps, sound installations as around the corner, which is driven by Starknet, as well as other sort of tools and like sleep apps. And I can show you one of those things a little later. The last thing I'll also be discussing is using Starknet as a peer to peer network for musical collaboration. So when we talk about music on Starknet, I'm not talking about mp3 s and storing them on there.
00:01:09.516 - 00:01:59.176, Speaker A: I'm talking about symbolic representation notes, essentially sheet music on the blockchain. And this can be in the form of midi or Json, or it can be pitch classes. And to step back a little bit, some of the building blocks of music we can represent in Cairo, some of them are pitch classes. And then we can have higher order structures like modes and scales. And then we can perform computations on these bass pitches based on these scales to modally transpose or change tempos or those sort of things. So my background is generative musician, and I also play in bands. And to give you a clear example of what I mean by a generative model, in my band Fleet foxes, we have a lot of vocal harmonies.
00:01:59.176 - 00:02:24.150, Speaker A: And the singer had a song with chords and a vocal line. And I wanted to generate hundreds of different harmonies based on different harmonic criteria and pick out the best ones that I thought were most interesting and most appropriate for the song. And I'll play one of those examples now. And this should play it.
00:02:24.840 - 00:02:27.616, Speaker B: If I had not, here's the vocal.
00:02:27.648 - 00:02:30.950, Speaker A: Line, and I'm adding successive lines in.
00:02:31.880 - 00:02:34.950, Speaker B: I'd work till I'm wrong.
00:02:37.260 - 00:02:51.720, Speaker A: So pick five part texture and this band comes in. And then this is another intro of a song with a sort of counterpunchful texture.
00:02:54.780 - 00:02:55.530, Speaker B: You.
00:03:10.760 - 00:03:56.560, Speaker A: So you can see that generative models are really powerful for coming up with a variety variation on a basic theme. And we can translate all of this into Cairo. So all of those auto harmonization algorithms can be put into view calls as Cairo functions, which are great because they're very cheap and affordable computation. And so this is a web app that loads up a mIDI file of a melody and passes arguments, the key and the mode to a starknet contract, and then reharmonizes those in the style of chords from Ravel's string quartet.
00:04:10.460 - 00:04:11.210, Speaker B: It.
00:04:11.660 - 00:05:22.136, Speaker A: And I should note that this harmonization is different every single block. And so if you introduce some randomness into it, every single time you query the contract, you can get new musical unique data back. And that can be really interesting for when you are both composing, but also integrating into applications. And that can be music tools or games. And I'd like to share one project that I did in collaboration with topology called Moomu, which is a music generation game where users choose these primitive objects and create these formulas that change over the course of a musical grid to create all of these interesting harmonic melodic textures. And in this case, this is an entirely on chain game, and every on chain computation has a corresponding musical computation mapped to it. And because it's composable, this music can be shared, remixed within the browser and shared on a leaderboard.
00:05:22.136 - 00:06:53.420, Speaker A: So this is one example of how music can be integrated into applications. And here's an example of what that sounds like. All the different pitches, different chord changes, melodic changes, are all based on the events happening in this musical grid here. So now that we've seen a sort of musical type game, let's talk about integrating into video games into music. So we have a lot of experience that growing up, we remember playing Tetris, and as the stat got higher, the music got faster, the chords got minor. And this happens in a lot of different games. And whether you've got low HP and you start to hear alert notifications, there's so many different audio phenomenon that you can use to expand the user experience of games.
00:06:53.420 - 00:08:05.600, Speaker A: And one of the ways that we've been doing that is using Cairo contracts to compose for video games. So you have some sort of game state that you pass back to a Cairo contract, just like that melody in the previous example. And based on that game state, it can pass you some sort of information. And that could be really handy for when you're wanting to set environments for different scenes, and you want to associate certain songs with nfts or physical locations within the games, and you can use all of these different sort of operations, like modulation of the tempo of the key and the like. And so one thing that we've been doing is composing. So that will also be different every time. And here's an example of a Cairo contract outputting piano music that is different every time you call it, and can be used in the sort of video game situation where it's very mellow and maybe you're back home and you're.
00:08:48.740 - 00:08:49.056, Speaker B: And.
00:08:49.078 - 00:10:08.396, Speaker A: We can also represent an entire score of a song for video game in a Cairo contract as well. And I'll just play tiny hair of this. This has midi being stored on chain sent back to the browser and resynthesized using sound fonts that are reading in JSON objects of musical data. And so this goes over the whole course, and this can be varied depending on game state or user arguments. So the last thing I'd like to discuss, and this is something I'm really excited about, and we can all check out a little later today, but it's the idea of musical collaboration using Starknet as a peer to peer network. So what we have here in this other room is you've got this space with speakers, and I'm using a Starknet contract, damn near stateless, to emit user events based on a web app. So you've got a web app and you're pressing buttons that are triggering these sounds in space and controlling these bespoke synthesizers.
00:10:08.396 - 00:11:45.724, Speaker A: And the contract is emitting those events on Starknet. And I have an Opibara indexer scraping all of those events, indexing them in, interpreting them as musical events in a database, and sending those out as OSC messages so that synthesizers can listen and then play that data. And so that's what we have here where anyone around the world can pick up their app, and the app link name is autonomousaudio Forcell app. And if you have some testnet eth on your phone, you can load up and go into that room, walk around and start to trigger musical events and change the chords, change the synthesizers. And this is really exciting to me because it sort of affords new collaborative encounters with perfect strangers all over the world in a way that can affect local areas and spaces that can also be collaborated. And I've got some Nintendo controllers in the room that are also controlling the music as well. So you can create this really interesting hub of people contributing to music via I want to talk about some contacts, I score music for dope Wars, Cartridge Realms, Biblier, Tecadao, and also want to talk about a couple of other people that have been exploring music on Starknet.
00:11:45.724 - 00:12:08.180, Speaker A: Raphael from Giza has developed a really interesting midi to JSON library that takes a midi file and converts it into a Cairo contract. And if you're interested in games or game music, reach out to me or any of these folks. Matchbox cartridge topology. And Opibara is the indexing tool that I use. So yeah, thanks a lot for listening.
