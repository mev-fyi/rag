00:00:04.210 - 00:00:35.710, Speaker A: Hi everybody, thanks for attending the talk. I'm Dima from fortify, and today I will tell you about how we're building secure Starcrek support to our MPC wallet. And actually, all the hard work in the project was done by Yar and Aviv, who are also here in the audience. So for those unfamiliar with MPC wallet, let me give you a little bit of background. So, MPC wallets are primarily used by organization. So there is a set of users who want to jointly use the same set of keys. And in an NPC wallet, the keys aren't actually stored on any single device.
00:00:35.710 - 00:01:46.306, Speaker A: They're sharded between multiple devices, which could be mobile devices of users, it could be servers in the cloud. And when a user submits a transaction, for example, by using a DAP and a browser extension, then the wallet can actually enforce a transaction policy that's defined by the organization and which determines which users need to approve each type of transaction. And so the required set of approvers, they get a notification on their phones, they can review the transaction, and once they approve the transaction, the MPC protocol, the multiparty computation protocol, runs between the different nodes, and the protocol produces a signature, and the signature is returned to the DAP. And let me give you a little bit more context about the wallet that we're building. So we're building an institutional NPC wallet that's focused on DeFI use cases. What that means we have our own browser extension, and as well as an API for programmatic use cases, we support both EVM and non EVM chains. And some of the DeFi specific features that our wallet has is, for example, transaction enrichment, meaning we provide a human readable description of every transaction, as well as provide additional contextual information that makes the approval process much more meaningful.
00:01:46.306 - 00:02:48.394, Speaker A: And our transaction policy also allows encoding different types of DeFi attributes to exactly set the right set of approvers for every type of transactions and block other transactions. And the type of customers that we're working with includes crypto funds, trading firms, market makers, digital asset issuers, and so on. And you can see some of our investors, including a shout out to Starquare here on the slide. So let me now explain, what's the core problem when it comes to supporting Starkx with an NPC wallet? So the Starkx Dapps, as many of you probably know, even though they use ECDSA signatures, the elliptic curve in the signature scheme is not a standard curve like the one used in bitcoin or ethereum. It's actually a special curve that's optimized for generating the stark proofs. And most wallets, like metamask, for instance, ledgers, they don't actually support this kind of signature scheme, they don't support this curve. And so the Dapps cannot really use the wallet in the most straightforward way.
00:02:48.394 - 00:03:31.074, Speaker A: So how do DApps end up still working? Dapps end up working. So there's actually a workaround that many of the Dapps use. What they do is they generate the stark private key as part of the DAP in the user's browser. So the way it works is that when a user onboards a DAP, the DAP requests the user's L1 Ethereum wallet for an EIP seven one two message signature on, say, some message that includes the DAP's name. The user approves the signature on their wallet, and so the wallet provides returns to the DAP, a message signature on that message. And then the DAP uses this message signature to deterministically derive the stark private key. And this is the private key that the user uses for their l two transactions.
00:03:31.074 - 00:04:04.958, Speaker A: And this private key is stored in the browser. And notice that one consequence of this is that when the user wants to perform additional actions as part of the DAP, the key is already in the DAP, so the user doesn't really need to, the DAP doesn't need to interact with the wallet anymore. It can just kind of use the user's key directly in the DAP. And so you end up in the situation. This is actually, we're looking at developer tools. When running DyDX, you can see clearly the private star key just laying here in the browser. And I think, as we kind of know by this point, that this is not a great idea to put private keys in the user's browser.
00:04:04.958 - 00:04:37.638, Speaker A: This is, for instance, it's worse than keeping it in metamask in an extension. This is actually in the local storage of the Dap. So any malware on this device, any malicious script, any supply chain attack, this key is susceptible. And the problem is actually worse when it comes to NPC wallets. So, first of all, storing the private key in a single device, it goes against everything that an NPC wallet tries to prevent of not having the key in a single point. And so the key can, as we said, the key can be compromised on the client side. For instance, it could be by a malware, but can also be a malicious user.
00:04:37.638 - 00:05:31.038, Speaker A: Right? Because in an organizational setting, you don't really trust any individual, whereas here, any individuals that get access to the star key can just do everything they want. And so another consequence is that a wallet can no longer enforce policy and approvals because as we said, transactions doesn't really require the wallet interacting with the wallet. Another artifact is that you cannot really revoke access from a user once they leave the organization, because once they were exposed to the key, there's no going back. And another consequence is that lots of these wallets, for example, like we, we operate in a non custodial mode. But here, the way that the Dapps derive the key, they derive it from message signature. And message signatures are usually not treated as a secret, right, in wallets. And so they can be logged anywhere, they can be stored in the wallet database and the wallet provider, because they see those message signatures, can actually derive the user's private key, which kind of beats the purpose of non custodial wallets, I think.
00:05:31.038 - 00:06:10.086, Speaker A: And so, you know, MPC wallets provider, they end up in the situation where they either can choose not to support Starkx DApps or can they choose to support them this really insecure way. And I should say we're not the only one that noticed these problems. Our colleagues at Safeher and Slowmist are also working on it. We discussed it with them and they were super helpful as well. And so when our customers came to us and they asked us to support Starkx Dapps, for instance, DYDX, we were not really comfortable with this insecure way. So we were looking to do it in a better way. And so over the past couple of months, we've actually been collaborating with Starquare, with canvas to try and come up with a better way to support Starkex.
00:06:10.086 - 00:06:56.434, Speaker A: And so what we've done, we've done a couple of things. So first, we've added the support to star curves as part of our NPC library, such that our NPC protocol natively supports generating star keys and signing with star keys. We're adding it to our API, meaning that programmatic users can just access and be able to benefit from NPC for stark signatures. And we're also adding a new interface to our browser extension that would enable Dapps to benefit from this native Starkx support. And so the benefits of our approach is that essentially you recover all the advantages of NPC wallets back. So stark private keys never leave the wallet, and this is where they belong, right? They're not on client devices. We, as a wallet provider, we no longer need to use this message signature derivation flow.
00:06:56.434 - 00:07:31.562, Speaker A: And so we are not exposed to the user's private keys and you get all the benefits back right. You can enforce organizational approval policy, you can revoke access from users. Yeah, I think we believe that's the right approach. And what we'll do in the remaining time, we'll do a demo, actually a live demo, when we'll see how our wallet used to sign an actual DyDX transaction. So, one thing is that we're building this solution. The real DyDX hasn't integrated with it yet. So what we did now is we actually modified our extension to inject a script that actually retrofits the actual unmodified DyDX to use the new interface of our wallet.
00:07:31.562 - 00:07:37.240, Speaker A: And this is what you'll see today. You'll see the entire flow with the NPC and the signature. And yar will run the.
00:07:40.410 - 00:07:47.820, Speaker B: So, hey everyone, I'm Yar and defi team lead at fortify. What you can see here is.
00:07:50.110 - 00:07:51.180, Speaker A: Right, actually.
00:07:51.950 - 00:08:32.146, Speaker B: Okay, on the left, you can see our mobile wallet. It's connected to the other MPC participants. And over there, you will soon see our transactions. And on the right, you can see DyDX trading platform, where we can send orders. We also have the fortify extension installed on the browser here. We already onboarded a user, and in a way that the private key is only held inside our MPC world. So the DAP never held, the private key was never compromised.
00:08:32.146 - 00:09:27.478, Speaker B: Now we'll do a simple order on DyDX. Let's say I want to buy some eth on the current market price, and I'll place my limit order. Now you can see my browser extension popping up. We can see that my DyDX vault is the one that is about to sign it. It's on the Stackx network, on the DyDX platform. And we can also see the DyDX trading policy taking place where my user for that vault has permission or has some policy in place to decide if I can sign this transaction or not. Once I create it, I'll move to my wallet, which after the policy engine decided that I can sign this transaction, got the signature request.
00:09:27.478 - 00:10:04.150, Speaker B: I can see clearly all of the parameters of the order I just sent, and I can sign it. First my face id will be verified, and then the MPC will run against our secure enclave. And now that the order is signed, it will send back to the DAP which place it and send it to the Stargx contracts and we can see the order in place. That's about it. Sorry, back to DiMA.
00:10:04.570 - 00:10:52.258, Speaker A: Yeah, so this is a live demo working. Cool. So just to conclude in terms of next steps, so we are working with Starkware to standardize the wallet interface so that other Dapps can benefit from it. And if you're a DAP developer building on top of Starkx and you want to integrate and benefit from the secure interface, then please come talk to us. And yeah, the hope is that we will be launching this solution and so the institutional customers will benefit from the secure access to Starkx Dapps. And so if you're also in an institution or a treasury, or anyone that wants to securely interact with DyDx or Defi in general, come chat with us as well and you can find more info on our blog. And also feel free to reach out to me directly.
00:10:52.258 - 00:11:51.500, Speaker A: Thank you very much. That's the idea. At least. If you enable that part, is it still safe? It's a really good question. That part would be enabled still on on the wallet's end. And so you can, for example, set fine grained rules around which type of orders would be signed automatically and which ones would require user intervention. You kind of shift it from the DAP to the wallet to manage it.
00:11:51.500 - 00:11:57.960, Speaker A: Thank you.
