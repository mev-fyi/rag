00:00:00.250 - 00:00:24.998, Speaker A: A bit for. Okay, go live. Going live. Okay, we are live. Hello, everyone, and thank you so much for joining us today for this very interesting ERC 721 workshop that's going to start in just a couple of minutes. Before that, we have Brianne from Screenshot Labs. And.
00:00:24.998 - 00:00:48.170, Speaker A: And the motto of screenshot Labs is that by empowering creators, they aspire to onboard the next million digital asset owners. And I'm going to let Brian talk about his project for a bit, and then we'll have Robert, who you can see on screen, join us to walk through the ERC 721 contract, which everybody has been waiting for. So, Brian, it's all yours.
00:00:48.510 - 00:01:05.922, Speaker B: Okay, cool. Well, thank you very much, guys. So if you don't mind, I will actually share you my screen, so it could be a little bit easier. And please feel free to interrupt if you want to ask questions or whatever. I guess we can do it this way as well. Let me know if you see my screen.
00:01:05.976 - 00:01:12.820, Speaker A: Well, yes, I've added your screen to the stream, so you should be good to.
00:01:13.670 - 00:01:16.306, Speaker B: Right. So should I go? All good?
00:01:16.408 - 00:01:17.060, Speaker A: Yeah.
00:01:17.610 - 00:01:54.180, Speaker B: All right. So I can make you a little introduction. So basically, I'm Brianne Sisak from screenshot Labs, or everi team, maybe you guys know. Actually the two different teams, it's like all the robot picture that you may see into the stocknet ecosystem. So basically, with my team, we've been spending the past two years on trying to build around what we call non fungible assets. So basically, in the alternative economy that we know, into the blockchain, we think there is two typology of assets, fungible ones and non fungible ones. Correct.
00:01:54.180 - 00:02:47.970, Speaker B: And so specifically us, we think that we have a high interest with the team to build around non fungible ones because we think it can relate to a lot of use cases that we think are interesting for the future, specifically gaming, finance, collectible arts, whatever. Actually, we think there is many of different use cases that have not been explored yet and that will be coming in the future. And we just want to enable this to happen. So basically, we have been spending the past two years on b, two c projects. We've been in forefront trying to use the NFT into the project themselves. And we've been on Ethereum layer one, mostly, actually. And this is where actually we realized all the constraints of the ecosystem and what was missing and what would be better in the future if we wanted to make something better for creators.
00:02:47.970 - 00:03:47.060, Speaker B: And just in quick step. So gamer Blocks was one of the first decentralized game back in 2017 on Ethereum layer one. So this is one of the first project that we've done with the team and then Evrai, maybe you guys know a little bit about this, but we was one of the top 250 collection on openc back last year. And so of course now we have transited everything towards stacknet actually right now. So basically when we have builded those applications, we've realized like six main things that we wanted to address and that we thought was really hard and painful while we were creators, of course there was the aspect of the low blockchain performance. So every time it was really slow to build in place any projects, we have always these high gas fees and I guess us as creators, we've been spending so much money onto it, last year especially. But I guess as well some people from the audition has done as well.
00:03:47.060 - 00:04:44.066, Speaker B: We've seen as well a lot of problem on our side and our perspective on the fact that it was really hard to hoard people because the user experience was really rough and really bad. And of course, I don't personally think that self custody wallet is made for everyone. That's my opinion. And then on the market side, we have like disparate standard for marketplace and royalty. So we saw really different royalty way of doing things on Opensea blur and all those things that happen, we could get a little bit into it a little bit later. And asset interoperability, we saw it's really hard as well to interact with the assets and as well with the marketplace data accessibility, specifically on OpenSea, if you guys were there back then, it was really hard to get the APIs, to try to get the information from there. And so basically taken all of those things, we understood that we've done application, but we understood well what it takes, what it took to build good infrastructure.
00:04:44.066 - 00:05:34.440, Speaker B: And so we started slowly to try to imagine and think all the infrastructure that we needed to be able to build the best application, because basically all the time we had as well to build both the business and the infrastructure. And so this is how the ArC project was born. The ARC project, which is basically the infrastructure that we want to provide on stacknets that will be supposed to bring a much better environment for creators for the future. Thus our talking point. So basically we think that starnet is the best place for us to build, of course, because we think it's the best way technically to scale Ethereum. We think account abstraction will bring huge mass market adoption specifically because we think eventually cost it. And wallet could be a really good thing, really good way to do it.
00:05:34.440 - 00:06:35.770, Speaker B: And of course, we know there is a lot of great builders around the space and it just keep increasing every day. So we feel really glad to be part of them, and so believe this is what we want to do. So we want to give the creators the good tools to be able to provide the best experience in this through Stacknet. So just to maybe explain a little bit about this story, and I'm just going to try to get into it, but let me know if you have any question, by the way, guys, I don't know if I just keep going through or if you want me to answer some questions. So basically, if I give more the storytelling of how Ethereum worked, basically at the beginning on Ethereum, there was no kind of a vision to where we should bring non fungible assets towards. So there was nothing much. And so what started to happen is we started to see competition coming into Ethereum, and we had opensea, blur and many other marketplaces that came in and they all tried to do the same thing.
00:06:35.770 - 00:07:25.686, Speaker B: Basically, they all try to absorb the liquidity in a centralized way. So I don't know if you know really well how marketplace works, either exchange or marketplaces, but it's always pretty much the same thing. You have the interface. So Opensea has its own interface, Blur has its own interface, and there is a technology which is underlying, which is called the order book. And so the order book is basically the tool that managed the offer and the demand and make them match together and exchange them. And so basically there was a lot of bias by having all those competitors trying to fight for the same market shares on different order book, because you saw there was different prices on Opensea, different prices on blur, floor price bid, selling price. And so it was a really inefficient market overall.
00:07:25.686 - 00:08:46.046, Speaker B: And as well, we saw a lot of bad aspect of it by seeing that, for example, Opensea and Blur decided to put the rarities of the crater down to 0% almost. And so basically we really realized that it was highly centralized and not good at all in our perspective for creators. So basically what we say is, like with the team, we said, okay, we know this is the case this way, but doesn't matter because we think anyway, where the place is going to be for mass market is going to be on starhead, because the gas fees are going to be much less important and the performance of the infrastructure will be much better. And anyway, the market on iterium one is already fragmented, so we can't do much anything about it anymore. And basically, so what we're going to try to do with our team what we're going to try to realize that we are going to build on Stacknet, a decentralized order book that is actually supposed to be not binded to one interface, but that will be able to be used by every interface. So basically you're going to be able to have a marketplace, you're going to be able to have a marketplace into an application. And whenever you are going to actually mint an NFT on one place, everything will be visible on every marketplace of the ecosystem.
00:08:46.046 - 00:09:46.150, Speaker B: So basically, this is how we create interoperability. This is how we create as well the capacity for people to have access to much more liquidity and have known the fragmented liquidity in the space. And what we're going to do, we are going to enforce the royalties into the market, into the order book. So this way when creators will be saying, for example, I have 5% fees, that I want to sell my assets, whenever it's going to be on the other marketplaces, the royalties will be enforced. So everybody will have to pay the same price everywhere. So basically we create a market which is much more efficient, which is much less, which is much better as a business perspective as well. And so this being said, we are going to build the API SDK and record for every project marketplaces to build their own marketplaces into their own application, be it like bulk marketplaces or be it for gaming companies, applications, financial, social, that will be able to build them everywhere.
00:09:46.150 - 00:11:08.690, Speaker B: And one thing that we are about to launch right now, so I don't know if you guys saw recently there was like Minsquare, that unfortunately we stopped to be running by the end of the month. And so it's pretty challenging aspect for us because we want obviously to be the NFT ecosystem, to be striving on Stocknet. And so what we've decided to do is we had this white label marketplace that was supposed to be the place where people would directly from the white label marketplace have the decentralized order book integrated so they could bootstrap much faster their own application. But with what's happening right now with Minsquare, we decided to focalize on the white label marketplace. And so we are going to build the marketplaces that will be open sourced, open source afterwards, and that will be connected to the decentralized of the book. So in 15 days a month from now, we're going to be able to release the marketplace and to be able to provide a good alternative solution from the fact that Minsquare will be stopping so that's kind of the big overall perspective of it. And then of course people will be able to use our infrastructure and based on this infrastructure they will be able to have a context traction and then have their own application in gaming, defi social whatever to implement NFT marketplaces into their own applications.
00:11:10.070 - 00:11:28.140, Speaker A: Thanks Brian. I think if you have any links through which people can interact with your project or anything else that you have for folks, you can also share with me and I'll post it on the YouTube stream so when people are watching the recording, et cetera, they can always take a look.
00:11:28.750 - 00:11:29.354, Speaker C: Sure.
00:11:29.472 - 00:11:30.326, Speaker B: Pleasure.
00:11:30.518 - 00:11:38.460, Speaker A: Right? Thank you so much. Yeah, thanks for coming the workshop today and best of luck for your project.
00:11:38.910 - 00:11:40.140, Speaker B: Thank you very much.
00:11:40.530 - 00:12:21.946, Speaker A: Yeah, thanks. All right, after the special guest, now we get started with our ERC 721 workshop. I'm myself super pumped for it. I've installed everything and kept my vs code open, so I'm going to be coding hopefully along with Robert. But first off, I want to thank Robert for coming and doing this workshop for us. He has been a super amazing contributor to the Staffnet ecosystem and he has contributed to both basecamp and is contributing to the WTF Academy as a stocknet contributor. He's currently working as a blockchain engineer at Xtop IO, a blockchain consultancy company.
00:12:21.946 - 00:12:32.590, Speaker A: And of course you're familiar with me, I'm Gan. I'm one of the dev advocates with stockware. And without further ado, let's get started with our ERC 721 workshop.
00:12:33.890 - 00:13:02.550, Speaker C: Thank you very much for the introduction. Just give me 1 second to share my screen. Let's see if this works. Okay, cool. Everything is working right. Everybody can see it. So hello everyone, my name is Robert and today we will start presenting the Startnet ERC 721 workshop.
00:13:02.550 - 00:14:39.686, Speaker C: You will see that this says part one, mainly because this workshop will be divided in two parts. The first part will aim to focus on more of the introductionary level of the ERC 721, how to set up the contract understanding the basics how to create, implement and deploy your 721 contract, and finally interact with the evaluator that we created. The second part is still a work in progress, but it should be released by the end of this month. The second part will include more advanced features such as min price attributes to the 721 or let's say NFT, and how to have it deployed on a marketplace as well. So to start with, before you start this going into the exercises of the evaluator, first we'll have to understand the interface a little bit. So I've tried to explain everything here in the readme file what you have to follow up. Again, you can follow along if you go to the stocknet ERC 721 and you will see there's basically draft pr in progress, but this should be deployed, this should be merged to the main branch by the end of this week.
00:14:39.686 - 00:15:33.762, Speaker C: We're working on some of the improving some of the descriptions, but yes, if you want to follow along, you can see it from here. Good. So to start, basically we'll have to understand a little bit the interface of the ERC 721. And you can find this into the source folder if you go here and then the ERC 721 and here you should have the interface itself. These are the function names for the ERC 721. And also when you're creating your NFD, you should also follow along with the same naming as the evaluator uses these functions. And if you name, for example, you have the get name some name differently than the evaluator.
00:15:33.762 - 00:16:23.160, Speaker C: One will fail if it tries to call this name and doesn't sign it. Good. So kind of like to explain here. It's pretty straightforward. The getname function basically returns the name of the NFT that you provided. The get symbol returns the name of the symbol of your NFD the owner of if you provide a token id with the UT 56 type, it will return the contract address of that token id. The balance of function basically will have as a contract as input, and then it will return the number of nfds owned by that account.
00:16:23.160 - 00:17:32.282, Speaker C: What the approve function does is it gives permissions for a certain token id or a certain NFT to a certain contract address that you provide. Set the proof for all function. It gives permissions to interact with all the NFTs for a certain contract address that you provide. Getapproved is a function that if you provide the token id, it returns the contract address who has the permissions for that certain NFT is approved. Again, you have to provide the contract address, and then from that you'll receive if that certain contract address has the permissions. Now the last three functions are the mint, which basically is used to mint the NFT itself. The burn function burns the NFT.
00:17:32.282 - 00:18:29.200, Speaker C: If you provide the token id function and then the transfer from if you provide the sender and then the receiver with the token id, that's the transfer from function. To get more details about it, you could definitely follow along. Open Zeppelin's documentation. They provide a very good overview of how an ERC 721 should be set up and with that being said, this workshop, it mainly focuses on kind of like, understanding the basics, so we won't focus on the security aspect of it. So if you want to understand the security aspect of it, definitely follow along. Open Zeppelin's standards. I know they're working on their own implementation of the NFT itself, so you have to check their GitHub, but, yeah, cool.
00:18:29.200 - 00:19:15.326, Speaker C: What are the steps? So we have two contracts. Mainly we're going to deal with the evaluator, so you can follow along on the star scan or Voyager link. And I have it open, I think this tab, and then the ERC 20, which is the points counter, and basically these two contracts. So this is the ERC 20. And this will, if you go to the read write contract and the read tab here, you can get the balance of your points. So if you validate an exercise, then you're going to add your address here, and then you're going to get the total points that you have. And then this is the validator itself.
00:19:15.326 - 00:19:46.834, Speaker C: You go again to the read write contract. And then here you have the read and the write tab. And I'll start explaining these functions in a minute. So these are the whole exercises that you have to basically solve for yourself. What are the task list? What we will focus on. We have six exercises. So part one is divided into six exercises.
00:19:46.834 - 00:19:50.390, Speaker C: And. Apologize for my voice.
00:19:52.350 - 00:20:03.246, Speaker A: Sorry, quick question. Could you share the link to this with me so I can put it up for folks who might want to just do it along? Okay, thank you.
00:20:03.268 - 00:20:04.080, Speaker C: There you go.
00:20:08.050 - 00:20:09.886, Speaker A: Yeah. Sorry to interrupt. Please continue.
00:20:09.988 - 00:20:29.254, Speaker C: Yeah. Okay, cool. So, as I mentioned, it's divided into six exercises. Each exercise has two points attributed to it. So if you correctly do it, then you're going to receive two points. And then you can check with the points counter. The links are here.
00:20:29.254 - 00:21:08.382, Speaker C: And then you can check if you receive those points. So for the first exercise, what you need to do is to initialize, I mean, to build your constructor function and the get name and the get symbol function. And this is what you have to first define in your ERC 721. Then you have to interact with the evaluator. And then this exercise actually will do together. So maybe I'll just skip through it and then we will see how we do it this together. But just to say you'll have to go through the evaluator.
00:21:08.382 - 00:21:45.360, Speaker C: You have to access the get user slot function, and you'll receive a certain user slot number. And that user slot number. You'll have specific name and symbol attributed to that number. So it's a bit complicated, but with that name and symbol, that's the name and symbol that you have to initialize your constructor. This is to kind of like introduce a bit more randomness. Not necessarily randomness, but it's a bit more dynamic. So you can name your nft by that.
00:21:45.360 - 00:22:35.634, Speaker C: Then you have to deploy it. You'll have to call the submit exercise, and then you can call the exercise one, initialize, and then you'll receive the points. Second exercise focuses on minting of the NFT. You can follow along the bullet points here. The third exercise is burning of the NFT, where you have to create the burn function, and then you have to deploy your contract. And then again submit the exercise and then validate your contract. Fourth exercise is approving the NFD.
00:22:35.634 - 00:23:10.140, Speaker C: So this is where you focus on the approve function method. The fifth exercise is approve all function, where you have to set up the set, approve for all. And then the 6th exercise is transferring the token with the transfer from function. Yes. And then there's some little bit details, like if you want to contribute to these workshops, feel free to do so. And there's also other automated workshops, but yeah, let's try to get into it. Right.
00:23:10.140 - 00:24:05.302, Speaker C: Give me 1 second. So first of all, if you want to kind of understand what's happening for a certain exercise, what you can do is go straight to the evaluator. And then here, let me know if the font is big enough for everybody to see. And what you can do is kind of like go through the evaluator itself and then see what happens here. So for example, the first exercise that you'll have to complete is the initialize function. And then what happens here is basically the evaluator checks the submitted exercise that you did, receives the address that's being called from. And then here what the evaluator is doing is it's getting the name from the submitted exercise that you submitted.
00:24:05.302 - 00:24:44.326, Speaker C: So that's why I said you have to follow the names in the interface from the ERCSM 21. It receives the name and the symbol. And then here we have the assigned user slot that you have. And then based on that user slot, each user slot has a unique name and symbol attributed to it. And then we do a bit of assertion here to check if the symbol and the name is correct. And then if those are correct, then the exercise is being validated and the points are distributed. The same thing goes for the minting function.
00:24:44.326 - 00:25:28.818, Speaker C: But feel free to look at these functions and interact with them. Try to understand what's happening here. And yeah, I think from here we can start going into some, to do our first exercise. I have already initialized my project, but if you're not familiar how to initialize your project, you can use scarp. It's a package manager. It's a very good package manager. And then once you create your folder, you can just call scarf in it and then initialize your folder structure and it creates lib cairo scarb tumble.
00:25:28.818 - 00:26:13.170, Speaker C: And from here you can create additional Cairo files. What I did is created the ERc 721 Cairo and I've imported this in the lib file. And here I'll start building my first NFD contract. Before this, make sure to, I'm not entirely sure, I think we are on Scarb 0.3. So on scar 0.3 you'll have to state your dependencies as such with Starknet, and you have to say the version that you're on. And then you have to say the target starknet contract.
00:26:13.170 - 00:27:17.270, Speaker C: Cool. Everybody's following along. Or if yes, then it's perfect. So first of all, as I mentioned, let's go back to exercise one. And then if you follow here along, you'll see that we'll have to create the get name function, a get symbol, and also a constructor function, right? So to do this, what we're going to do is first we're going to have to state we create a storage, so we say storage, storage, and then spelled storage. And then we're going to say name as file 252 and then symbol as file 252. And of course as you go along the exercise here, you'll have additional variables that you will have to define.
00:27:17.270 - 00:28:41.620, Speaker C: Okay, now you have to create the constructor function. So we'll start by creating the constructor function first, and then let's define the constructor, and then in the constructor function, usually what you initialize the contract with the name first and then the symbol we use underscore, because it's good practice to define them like that because later on you will see that you might use the same variable to write to the storage and it might get confused at one point. And yeah, it's good practice. In the constructive function, what we're going to do first is, well, we receive the name and the symbol, and then here we want to write these inputs to the storage itself. So what we're going to do is do name write, and then we're going to say the name itself, and then symbol write, and then symbol. Okay, and that's it. We're almost done.
00:28:41.620 - 00:29:26.818, Speaker C: The constructor function is done, but now we have to create the view functions as well so that we can check our name and the symbol has been attributed. So to do that, we created the view function. And then we call this fn. And then here you have to follow the interface that was here. Right. So you'll see you get name and then this interface also says what type of variables are as inputs and what you should get back from that function. So we have get name and get symbol that we have to say.
00:29:26.818 - 00:30:15.810, Speaker C: So get name. As a return function we have 52. And then what we're doing is we read the storage and then we return the function. We don't put semicolon because if we put the semicolon, then we'll have to say return name. So if we don't put the semicolon automatically returns the value. Finally we're going to create the symbol, get symbol 52, and then we have symbol read. And this is where we read from storage.
00:30:15.810 - 00:30:39.562, Speaker C: Cool. And that should be it for our first exercise. This is how your first exercise looks like. But again, before actually deploying the contract, make sure to go through the evaluator first. I think I have a dummy wallet set up. Let me just quickly check. Yes.
00:30:39.562 - 00:31:35.962, Speaker C: So you go to the evaluator, and then once you connect your wallet, first you have to assign a user slot. And then from that number that you're assigned, you'll have to retrieve your specific name and symbol. And that information is going to be used into building your constructor. For example, if you haven't assigned the user slot, what you can do is maybe, let's say you're going to try to call the first exercise, but it's going to throw out an error, the transaction failure predicted. And there's a certain failure reason. Well, the hex is not really understandable. What you can do is there's a tool that I use, I think you can get it from here.
00:31:35.962 - 00:31:41.600, Speaker C: So stark utils. I can probably drop this as well in the.
00:31:43.250 - 00:31:44.000, Speaker A: Yeah.
00:31:47.650 - 00:32:13.398, Speaker C: There we go. And this is a useful converter that helps you convert anything. Like the hex is automatically converted into file string and whatnot. So again, we take that. I think I already pasted this in. So if I take this and I put it here, you're going to see that the equivalent in string, it says assign user slot first. Right.
00:32:13.398 - 00:32:53.730, Speaker C: And then if you want to kind of like debug the process of it, what you can do is you go back to the evaluator itself. And then let's see. So we say here, like verify like this line, there's a function name of verify. And then if we go to that function verify, let's see where the verify is. I think it's at the end here. This function is called, and this function basically checks if you have an assigned slot and if you don't have, then it's going to draw out an error that you have to assign it first. Right.
00:32:53.730 - 00:33:17.100, Speaker C: And then similarly, if you haven't submitted a solution and you try to invoke that function, you're going to get this error. So you can go through debugging the contract like this as well. Okay, let's see. Go back to the evaluator. This failed. So because we haven't signed the user slot first. So what we're going to do is first do that.
00:33:17.100 - 00:34:09.954, Speaker C: It's going to take a bit, couple of seconds, I guess. And then just to mention the constructor update class, set random names and set random symbols are functions that are mainly for the admins to set up the contract. The only functions that you will interact with are everything that's named exercise two. And so on. The submit exercise and assign user slot. And then in the read tab you will see that you have a get user slot player exercise solution. And then these are the two functions that you will retrieve your name and symbol.
00:34:09.954 - 00:35:02.494, Speaker C: So now we'll wait for the transaction to be approved. Takes a bit anyway, so I know the account will take, let's say you go to and then until the, oh, it's already submitted. Okay, perfect. Cool. So I'll take my address, I'll put it here and I'll check what users clause I have assigned. So it's two, right? So for that I go here, check exactly, what's the name I have to use and the symbol I have to use. And these are the name and the symbol I have to use.
00:35:02.494 - 00:35:46.090, Speaker C: And this is what I have to initialize it with. So I'll grab the Hex version of it and go back to my function or the contract that I created. And then right now let's try to deploy these contracts. So for that I usually use make file to kind of have shortcuts for my functions. But what you can do is if you're not familiar with the make file, then you can create this. It's very simple, but you can also call the CLI directly and say startnet actually first. Before I do that, we have to build with Scarp the contract itself.
00:35:46.090 - 00:36:48.622, Speaker C: So let's do that first before declaring because we don't have anything to declare. So with Scarp build, you'll see that you have a target folder and then in the target folder, in the dev folder you'll have your CRF file. And this is basically the build that you receive from Scarp. And this is the one that we're going to first declare it and then deploy it to the testnet. So we go back to make file and what you can say here is it's either startnet declare contract and then we're going to say the folder location or the file location target dev. And then here we have ERC 721 file and then you have to state the account that you're going to deploy with and that's it. Show trace is not necessarily show trace is very useful if you want to debug a bit.
00:36:48.622 - 00:37:50.002, Speaker C: Something doesn't go accordingly. If you first time build it and it might declare successfully, you won't have this error. But what this error means is that I've already created this contract and this class with the hash already exists. So this is nothing to be concerned of. What you can do is just copy the class hash and then you can use this class hash into the deploy function. So startnet deploy class hash and then we say the class hash that we waited account version two and then give me 1 second. And then here we're going to state the inputs, right.
00:37:50.002 - 00:38:20.880, Speaker C: And then it's useful too. It's easy to get them as hex from here if you have already an assigned user slot. And then you have to follow the order that you sell like name. It's the first and then the symbol the second. Make sure to follow along. And then we take the symbol from the get info symbol and that's it. I should be able to deploy this.
00:38:20.880 - 00:38:48.340, Speaker C: Okay. And it's already deployed. We'll have to wait a bit until this contract has been deployed. But I've already deployed something like this in advance. That's why you see this error in the first place, because it says class already deployed or declared. Sorry. So I have my contract address here, this is the one that I've deployed earlier and I think it's open here, right.
00:38:48.340 - 00:39:21.390, Speaker C: And then you can see that the get name and the get symbol that we created and the constructor, obviously. And if I go here and I query this, you'll receive the ERC 721 workshop two. And this should be similar as the one that was assigned to us, if I'm correct. Yeah. Okay. So what we're doing now is take this contract, you can go also to the overview and then copy it from there. Go back to the right tab.
00:39:21.390 - 00:40:01.234, Speaker C: Connect first my wallet. And now what I want to do is submit the exercise. I submit my exercise. The exercise is the contract that we created and deployed on Testnet and should take a bit, 30 seconds, hopefully. And then once this has been conferred, I mean, we can follow along if we want to. Um, until then, maybe we can talk about something else until it confirmed. Yeah.
00:40:01.234 - 00:40:30.862, Speaker C: So make fall the reason why I say it's very useful because you can see like make starknet declare, for example. And then here I just have to, for example, say the file equals two and then actually let's do deploy. So it makes more sense. Deploy. And then hash equals two. And I'll take this, where is the hash? This one. Right.
00:40:30.862 - 00:40:54.760, Speaker C: And I say this hash and then automatically runs the same function. And it's super fast, so it's useful to have it. Let's see if this has been confirmed. Not yet. So any questions until then or do we have any questions until our transaction is being confirmed?
00:40:54.840 - 00:41:58.408, Speaker A: Yeah, I don't see anything on the YouTube yet, but maybe another thing that I can share is that how Robert is doing the exercises, by sending in some value and getting some inputs and things like that, as he mentioned earlier as well, you can also do these exercises on your own and if you complete the exercises, you will be getting some points. So once you start doing it, it's quite addictive to want to get to the end and to want to get all the points. So that will be very interesting. And the idea is throughout the exercise, at every step of the, every step of the exercise, you would get to learn about different elements of writing Cairo contract. So that's a really fun way to learn. And we have some other exercises as well. Not just ERC 721, but Cairo 101 exercises which you can look at right now to just understand the basic syntax of Cairo.
00:41:58.408 - 00:42:30.730, Speaker A: How do you write functions in Cairo, how do you return values in Cairo, how do you take in arguments in Cairo, et cetera. So you can start with this one, which is the stocknet Cairo 101 automated workshop, and then make your way through the different other tutorials that are there, like the ERC 721 built by Robert. Then there's going to be a messaging bridge tutorial that's also built by Andre from our team, which is going to be live soon. So these are some of the interesting things that will help you hopefully pick up your Cairo skills in a fun way.
00:42:32.300 - 00:43:28.376, Speaker C: Thank you for that additional information. Definitely Cairo 101 is a very good place to start and I really suggest that I did it myself and it's a very interactive workshop. So I think our transaction was finally confirmed after a century. So let's try to see if we managed to do it correctly. Right. So we go back to exercise one and then what we need to do is like the final step from, if you read the readme file, like here, we already called the submit exercise and finally we just have to verify if our contract has been deployed correctly. Now we're going to just press the right button and seems like we don't have any failures, which means that we correctly to initialize the contract with the correct name and correct symbol.
00:43:28.376 - 00:44:21.788, Speaker C: And once this transaction has been confirmed, we can go back. Actually, let me do that now so you can see the difference. We can go back to the ERC 20 and then if I query this, it should be zero. But if we wait for a little bit, then we should receive some points. Let's see. Yeah, again we have to wait a couple of minutes, but going back to the workshop, the 101, it's a very good place to start. And then the 721 workshop, it's a very good place to continue building your skills, to learn how to deploy and build 721.
00:44:21.788 - 00:45:05.400, Speaker C: The second part will be even more interesting because we will implement more advanced features that you can use with Cairo one, but also you can also see and interact with your NFT on the marketplace itself. So that was going to be exciting. Cool. Seems like our transaction got deployed. I'm going to query again the balance off and we should see that we received two points or I think this is in Gui so that amount of points. So I hope you like this exercise. I really invite you to go through all the exercises where you learn how to mint, burn, approve and so on.
00:45:05.400 - 00:45:21.890, Speaker C: And if you find it interesting, make sure to leave your feedback. If you have anything else that you want to explore, let us know. And yeah, thank you very much for this opportunity to showcase the workshop. Are there any questions?
00:45:23.140 - 00:46:10.252, Speaker A: Let me check if there are any questions. No, there's just some conversation on think we are good. Thank you so much Robert, thanks for your time and basically building this entire really cool tutorial where people can learn about ERC 721, especially in Cairo, and also get some points. So that's super cool. And we hope that all of you are able to solve these exercises. I've posted the link to the exercise on the YouTube live so you can pick up the GitHub repo from there and you can start getting those points. If you have any questions, you can also reach out to anyone from the dev advocacy team on Discord.
00:46:10.252 - 00:46:22.630, Speaker A: Or you can also reach out to Robert. So Robert, if you have any social links that you want to share as well, please do so with me and I will share that on the YouTube livestream as well.
00:46:23.320 - 00:47:02.816, Speaker C: Yeah, the only one is my Twitter account, so feel free to reach out to me there. Otherwise I'll be hanging in the Discord channel and in the Starknet Discord channel. And yes, I do want to say that I would like to thank Zero x Kubitos for helping contribute to the workshop itself. And I also invite everybody from the community to get involved, contribute, and build workshops and fun exercises together. Because like this, we build the community. It's making more interactive and fun. So yeah, I would like to thank everybody.
00:47:02.816 - 00:47:03.904, Speaker C: Thank you.
00:47:04.102 - 00:47:28.000, Speaker A: Yeah, amazing. Thank you Robert. And yeah, feel free to contribute to this existing repo or any other fun new exercise that you do want to build on. Skyro one is fairly new, so we are looking for contributors who want to learn and also contribute back to the ecosystem. Thank you so much once again, Robert. And this was workshop number 15. We'll see you in a community call next Tuesday.
00:47:28.000 - 00:47:30.308, Speaker A: Thanks everyone and have a good day.
00:47:30.474 - 00:47:31.776, Speaker C: Thank you everyone. Bye.
