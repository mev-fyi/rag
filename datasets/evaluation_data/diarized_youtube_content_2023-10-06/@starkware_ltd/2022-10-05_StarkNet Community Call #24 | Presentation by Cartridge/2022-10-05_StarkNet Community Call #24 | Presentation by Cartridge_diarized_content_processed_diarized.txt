00:00:01.930 - 00:00:21.710, Speaker A: And we're live. Congratulations. Hello everyone on YouTube. And hello everyone on Discord. Let's start now. So welcome to this 24th community call for Starknet. And today we'll have two topics we're talking about.
00:00:21.710 - 00:01:13.794, Speaker A: We'll have. First we, we'll hear about cartridge with our great guest Terence. We'll talk a bit about what he's doing at cartridge and what they're building and when exactly we can expect things from them. And then we are going to have a small recap of the new Regenesis plan for Starknet. So if you followed along news of the network in the past few weeks, you may be aware that Starknet will have some pretty big changes coming in the next few months. And we're going to cover what that means, what that means for you who are building application and how you can mitigate that or take advantage of it. So that's for the second part of our community call.
00:01:13.794 - 00:01:17.880, Speaker A: Stay tuned. And in the meanwhile, welcome, Terrence, thank you for joining us.
00:01:18.570 - 00:01:25.346, Speaker B: Hey, good morning from New York. Thank you for having me. I'm excited to tell you a little bit more about cartridge.
00:01:25.458 - 00:01:57.620, Speaker A: It's great to have know cartridge is one of those names I've read about and I've seen in the ecosystem for a while. And if I'm honest, I'm not exactly sure what you guys do. I know you built some great tooling, you built a great indexer that uses Kygo. And I know that because my colleague Ben can't have good enough words about the work you guys do with this indexer and with Kygo, but that's about what I know. So what exactly is cartridge and what are you guys building?
00:01:58.390 - 00:03:18.726, Speaker B: Yeah, awesome. So we've been working on Cartridge now since the beginning of this year, but kind of the journey started with launching Dopores last year. So I'm not sure how much of the community is familiar with dopores, but like last year, August, we issued an NFT that was basically like a derivative of the loot ecosystem, but was more focused on street, kind of like almost like GTA style. So you got like Air Jordans and stuff like that. And we started building out an open ecosystem around it. And as part of that, this was a pure dow where all of the funds from the initial NFT was free to mint, but the 10% of royalties from secondary market sales went into a Dow which was then managed by the token holders themselves. As part of that, we started funding a bunch of different ecosystem initiatives and one of them, very early on in October, someone by the name of Parama, who was kind of like an OG on the Starknet ecosystem, came to the dope wars ecosystem, the dopores Dow, and he said, hey, so dope wars, I should mention is dope wars is based on this original game that was built in, I think it was 1986, on Emers dots.
00:03:18.726 - 00:03:36.660, Speaker B: It was called Drug wars, and it was basically a command line interface. And the goal of the game was essentially you would start the game in debt to a loan shark, and you would have to buy and sell drugs and go between different locations and arbitrage markets in order to make enough money to pay back the loan sharks before.
00:03:38.150 - 00:03:56.760, Speaker A: I'm fairly sure. I played this game on my Ti 80 something on my calculator in class. You could connect this with a small cable, and I'm fairly sure I play with this one. You could buy speed aeroin, then sell it, and you would randomly get a probability of getting shot or finding money. Right?
00:03:57.290 - 00:04:37.614, Speaker B: Yeah. It's quite amazing, actually, how many people have the shared experience before the Internet and online gaming and everything, how many people were playing this one game. If you think about it, it's kind of crazy. You had this game that the only way to distribute it was to go to someone else with the calculator and plug your cable into it. And when we released dope pores, thousands of people around the world had that same shared experience in their childhood. So it's kind of incredible to think of how that happened before, really, like the Internet and App Stores and stuff like that. But yeah, Parama came to the Dow and was like, hey, I want to rebuild this game on Starknet.
00:04:37.614 - 00:05:04.522, Speaker B: And the game is really well suited to be an onchain blockchain game because it's very similar to what people do in the blockchain ecosystem today. You're like arbitraging. You're buying and selling tokens and arbitraging them between marketplaces. And we're just adding elements of randomness. It might get mugged or you might get chased by the cops and stuff like that. But anyways, we started building out this game on Starknet. Parama really started pioneering in the space.
00:05:04.522 - 00:05:50.098, Speaker B: We built out a game engine called roll your own, which is like the foundation of some of the other games in the ecosystem today. And this really opened our eyes to the power of what's possible with on chain games in Starknet. So we started going down that path for quite a while, but soon recognized there's a lot of challenges. You can build really cool games on Starknet and enables really cool things. But the ecosystem is so young that it is very unlikely that people will be able to play your games, at least a lot of large audience of people. So with cartridge, what we call it is the Starknet gaming console. And our goal is basically to provide similar APIs that you would get if you are a developer on top of Xbox or PlayStation or even on PC with things like Steam.
00:05:50.098 - 00:06:28.860, Speaker B: And so those are around player identity, around interacting with the blockchain, around game distribution, and then also surfacing some of the unique capabilities of the blockchain, around modding. And this ability for people to build new things on top of foundations. For example, right now the matchbox Dow hackathon with Realms is going on and the entire goal of it is to have other people build new things on top of realms, right, which is something you don't see in the traditional gaming ecosystem. Typically publishers are very protective of their ip and they don't want people necessarily to build things on top of it.
00:06:31.790 - 00:07:15.094, Speaker A: I think there's also the other way around, right? Gaming studio don't necessarily want people to build on top of their ip, but content creator also feel like building on somebody else's platform might get them to be rug pulled, basically. I mean like you can't count how many articles there are about this or that publisher that started a business on Facebook and then all of a sudden their revenue dropped because the search engine stopped referencing them in Facebook. Or the same thing on Google or the same thing for their business get copied, right? I mean, when you're building on somebody else's ip, you never know what might. So the argument goes both way, right?
00:07:15.292 - 00:08:03.106, Speaker B: Yeah. And to be fair, the biggest games today are basically games like Roblox and Minecraft where almost all the content is user generated. But to your point, you're always subject to the whims of the publisher underneath you who could rug pull the API. At some point if they find some feature or something you build that's starting to generate a lot of revenue, they'll be like, okay, we should just make that a first part thing and they'll pull it in. And it's still quite early. And there hasn't been too much of this in the new games like Roblox and Minecraft, but historically there's been a lot of this. For example with Warcraft three and Dota and then League of Legends, these massive franchises that spun out as different organizations because Blizzard.
00:08:03.106 - 00:08:32.430, Speaker B: But anyways, we're getting maybe a little bit deep down the rabbit hole of what's interesting about on chain games. But yeah, I'd love to share a little bit more about what we're working on with cartridge. I can show you. One of the things that we're really excited about is, and we've been working on developing pretty closely with the Starkware team, is support for web authentic credential verification, which we think is going to create a much easier way for users to interact with the blockchain.
00:08:33.410 - 00:08:38.450, Speaker A: Can you explain a bit more what that is? What do you mean? Like a web free authentication?
00:08:39.190 - 00:09:22.526, Speaker B: Yeah. So there's something called web off then. And so most devices today, like Android phones or iPhones and even newer laptops, have secure elements inside of them where they can generate private keys securely and store them at the hardware level, shielded from the rest of the operating system, so they're more securely managed on the device. And so the iPhone obviously does that with Face ID, your MacBook does it with finger ID. The Androids have similar things, and the same with Windows and webwath then, is basically like a standardized specification of how you interact with these and you can issue credentials and validate them. And so with this capability, just to.
00:09:22.548 - 00:10:04.974, Speaker A: Make sure I understand, I'm not super familiar with all of this. So in most devices today, you say there is some kind of like, if we say, making the parallel with the crypto community, there's some kind of hardware wallet that is able to store keys that are not keys meant to store funds and interact with the blockchain, but they are meant to authenticate yourself towards different services. And so they can sign messages and you can use these to authenticate yourself. For example, with. You're right. Now my bank account doesn't need me to put the pin, it can read my face. So what happens is my phone reads my face and then uses the key that are in his hardware wallet to authenticate me.
00:10:04.974 - 00:10:05.920, Speaker A: Is that it?
00:10:06.610 - 00:10:39.190, Speaker B: Yeah, that's exactly correct. And so one of the challenges most wallets today that exist on the iPhone or in the browser, for example, because the keys that are supported by these secure elements or the algorithms aren't compatible with the blockchain, right, to which is not supported by the devices themselves, they support the same similar curve, but just like a different flavor.
00:10:39.350 - 00:11:04.820, Speaker A: I see what you mean. Since the hardware wallet inside your phone, the keys never live. You can't just use any kind of mathematic algorithm to sign stuff with it. You have to sign the one that are pre built in your phone. And the mathematical tool we use in the blockchain world are not the same that we use in the mobile world. And so you can't, for example, sign an ethereum transaction with your phone, but account.
00:11:06.070 - 00:11:51.614, Speaker B: Yeah, exactly. So one of the cool things that is uniquely enabled by Starknet is the option to implement signature validation on your own. Right. So you have the native Starknet curve, which is obviously quite easy to work with, but then you also have the ability to implement your own validation logic. And so what we've worked on at cartridge is implementing basically the validation logic that's necessary as well as with some other people in the ecosystem to validate web end signatures. And so what that means is now you can start taking advantage of the secure element in your phone or in your device. You can take advantage of something called keys that Apple and Android are releasing rolling out right now.
00:11:51.614 - 00:12:26.460, Speaker B: And so one cool thing with passkeys is on your Apple devices, you have the option, if you generate a credential to back it up with your iCloud keychain and Android has something similar, and then it'll synchronize between your devices and then you basically have a recovery mechanism built in through that platform provider. Right. And you don't really have to change your trust assumptions because if you're using a wallet on an iPhone or an Android, you're already trusting the platform provider. Right. Anyway.
00:12:26.830 - 00:12:48.580, Speaker A: Okay, I see what you mean. So essentially, instead of waiting for these mobile devices to implement things that we need, so the specific signature curves that we need, you guys were able to use what the mobile world already used to use in the blockchain world and to have it in a safe way. That's super cool.
00:12:49.270 - 00:12:51.970, Speaker B: Yeah. So I can show you what that looks like.
00:12:52.120 - 00:12:52.530, Speaker A: Please.
00:12:52.600 - 00:12:59.782, Speaker B: I can give it a quick demonstration. I'm going to use my camera here and I'll show you how. Go ahead.
00:12:59.916 - 00:13:17.420, Speaker A: Yeah, I was going to say, by the way, for people listening on Discord, the poll is happening also on YouTube. And so if you want to see Terrence's screen or Terrence's camera, actually, you can go on the YouTube link. I'm going to post it in the community calls channel. Yeah. Wait, you can share your screen?
00:13:19.950 - 00:13:23.406, Speaker B: Well, I can share, but I'm going to show you on the mobile phone as well.
00:13:23.588 - 00:13:24.320, Speaker A: Sorry.
00:13:26.850 - 00:13:29.440, Speaker B: Can I share my screen in discord? Is that possible?
00:13:30.050 - 00:13:33.810, Speaker A: I don't think you can, unfortunately, but we have it on YouTube.
00:13:35.510 - 00:14:07.462, Speaker B: Okay, cool. So what I'll show you, basically one of the cool things that it enables is the ability to synchronize your account between devices very easily. So I can come on my phone and I can log in with my account here and it's going to do the Face ID. So it's going to say, do you want to sign into cartridge GG with your pass key for Terrence, which is my username? And I'll say, continue. It'll do the Face id and then it'll log me in. So now I have access to my account here. I can do this very easily on other devices.
00:14:07.526 - 00:14:09.820, Speaker A: That's a lot.
00:14:10.510 - 00:14:17.834, Speaker B: Yeah. So this is like what we call the cartridge controller, and it's designed for interacting with games.
00:14:17.962 - 00:14:22.720, Speaker A: So you logged in the website, but are you able to sign transaction with it also?
00:14:23.810 - 00:15:27.080, Speaker B: Yes, you can sign transactions with this. Basically we have an architecture that is more similar to what traditional authentication logic looks like in web two, where you issue device specific credentials. So you have web authent, which manages the root authority on the controller, and it can issue additional credentials on a per device, so you can revoke them from devices and stuff like that if you would like. And the controller itself is one thing I'll mention is we're working with Argent and ledger and some of the other people in the ecosystem, what's called like a plugin account architecture. And so the controller itself can be plugged in and is complementary to existing solutions like argent. Right. So the controller is specific for games and you can have a controller and an argent at the same account on Startnet, which is something that I think is going to be super cool.
00:15:27.080 - 00:15:31.160, Speaker B: And we're going to start rolling that out in the alpha next month.
00:15:32.730 - 00:16:06.180, Speaker A: Anyway, this is super cool. I think what's really fascinating with what you're saying is that we've been in crypto for a while. I mean, crypto has been around for a while and the definition of a wallet is relatively straightforward for most people. And now you guys are about to introduce new concepts, new abilities that fundamentally shift what it means to have a wallet like what a wallet is. And the fact that you have plugins in your wallet is super interesting, I think.
00:16:06.950 - 00:17:02.194, Speaker B: Yeah, I think that's like a whole subject on its own that I'm incredibly excited about the capabilities. It makes the account like infrastructure less zero sum. I feel in ethereum and stuff, it's very zero sum between you use this wallet or that wallet, whereas now you get the option to have like a self custodial cartridge controller. We might onboard game like people that were interested in just playing games early on, right? And they want to come with a cartridge controller and they're not too worried about a lot of security, but as they might transition into more powerful users in the blockchain ecosystem. They might be like, okay, now I want some additional security. So they might install the argent security module and have social recovery and some of the capabilities that that provides. So you have this nice ingredient for a user to have the same account and upgrade its security over time and the way that they can interact with things.
00:17:02.194 - 00:17:08.178, Speaker B: So you can have a very nice onboarding flow that's enabled by basically account abstraction.
00:17:08.194 - 00:17:10.920, Speaker A: At the end of the day, that's really cool.
00:17:13.210 - 00:17:46.450, Speaker B: Please, I'll show you one other cool thing. So now I have the account to my phone that I created on my phone. I can go on my computer and I can type in the same username. And in this case we use the username to derive deterministically the account id. If you deploy your account through cartridge. So the username is kind of mapped to your account id. And so I can log in here and with Webauthn on the computer, it'll ask me a couple of different options.
00:17:46.450 - 00:18:31.870, Speaker B: You can say I want to use a QR code so I can sign in on my laptop with the credential that I created on my phone. So if I have for example an Android phone and a Mac computer, I can still authenticate across them. I can use a USB security key, which is like a Fido key, which so you can use as well like for example a ledger to create an account. So you can also have that level of security where the ledger is like you mentioned, the hardware wallet instead of your phone. And you can use this device, in which case it'll use like a synchronized credential or create a new credential. In this case, I'm just going to say like use a QR code. And I can take my phone, I can scan the QR code of the camera app.
00:18:31.870 - 00:19:08.570, Speaker B: It's going to ask me the same prompt. It's going to say like, do you want to sign in with cartridge? I said continue, do the face id. And then we signed in the same account on the computer. So now I've registered a new device that I can use with my account. So that's one thing that we're pretty excited about enabling with Webhoffn. And I think it has other interesting capabilities once you start to incorporate things like sensation keys and plugins and stuff like that. I think count infrastructure on startnet is going to be really incredible what we can enable.
00:19:09.390 - 00:19:38.086, Speaker A: Yeah, I think we think a lot in terms of security when we think about account abstraction or social recovery, stuff like that. But I think that in terms of Ux for newcomers, we have a shot of having people being in full custody of their keys and doing new stuff, while at the same time being in full custody of their keys and having a super lean user experience much closer to what people are used to in web two world, right?
00:19:38.268 - 00:19:54.090, Speaker B: Yeah, 100%. And I think outside of the Starknet ecosystem, the approaches that you see are basically custodial solutions to provide the same level of ux, which in my opinion is not a great starting point for users in blockchain.
00:19:55.470 - 00:19:57.020, Speaker A: So when main net.
00:20:00.030 - 00:20:33.510, Speaker B: We have some hints that are getting whitelisted in the next ten one of Cairo, and then we're working on with some. There's a lot of things that we've had to implement to enable this. One is extending the shot to 56 hashing implementation. To support arbitrary size inputs. We've had to build like base 64 encoding. We've had to basically implement web authentic parsing. Because it's not like very simple like web authent is a specification that's a lot more expressive than what typically.
00:20:33.510 - 00:21:08.930, Speaker B: Usually you sign a message and you just get the raw signature and you just validate that. In this case you would sign a transaction hash and then you'd get that signature and it'd be quite easy to validate it with web authentic. You're actually getting like a JSON bundle that describes parameters around the authenticator. So you can say I want to make sure that the user is verified, I want to make sure that they scan their id means either face id, fingerprint id, or enter the pin code. You want to make sure that you can have different parameters around whether the credential is allowed to roam between devices. You can have different signing algorithms.
00:21:09.910 - 00:21:26.230, Speaker A: Account abstraction abstracted, right? Yeah, I mean, in a way that's, this like account abstraction is abstracting away the validation part so that you can put it in a programmable layer. And this is putting an extra programmable layer on top of the programmable layer from what I understand.
00:21:26.300 - 00:21:41.046, Speaker B: Yeah, it's quite cool. So yeah, to answer your question, when Mainnet, we're pushing for it in the next couple of months, but we want to obviously make sure something on Mainnet is secure since it's going to be interacting with user funds.
00:21:41.158 - 00:21:57.860, Speaker A: And so when people will be able to use weboff and do you have games you're working with or you guys started as a gaming company, right? Cartridges, yeah. Is your focus tooling or do you guys plan on doing games also?
00:22:01.110 - 00:22:02.500, Speaker B: Can you hear me still?
00:22:02.870 - 00:22:04.820, Speaker A: I can hear you and I can see your screen.
00:22:07.750 - 00:23:09.030, Speaker B: We went a little bit on a tangent on one particular feature of the cartridge platform that we're excited about, but I can show you a little bit more, I would say at a high level. One of the core things we're focused on is user onboarding. So one of them is the ability is this web authentic functionality that we're pretty excited to bring to the ecosystem, and it's open source, and we're hoping that other people will take advantage of it as well. Generally I can show you cartridge onboarding. We have a few different products, and we're working with a bunch of different games. You can see the different games in the cartridge arcade, deus influence, realms for an Xamprick Isaac from topology, no game Redline, Iker Imperium wars. And we're working on a couple other games internally that are going to be like kind of fun first party games just to demonstrate some of the capabilities that we're working on, the different integration points.
00:23:09.030 - 00:23:58.360, Speaker B: So this one I'll show you, you can just do with this device, and I can just use my face, my fingerprint ID to create the account. One of the cool things that we're working on with a bunch of games is starter packs. So a lot of blockchain games you need outside of just needing an account, you maybe need some assets in order to play the game. So this is just the base cartridge, starter pack. So when you create a cartridge controller, you basically get an avatar, which is like a procedurally generated avatar that upgrades as you participate in the Starknet gaming ecosystem. And on testnet we'll just give you some funds, in that we give you the option of using a credit card to fund it, or a layer one account, or you can install it as a plugin on argent. That flow will also be supported on Testnet and is coming in the next couple of weeks.
00:23:58.360 - 00:24:58.262, Speaker B: So once you have your account, this is the controller itself, you have a few different things. You have like the inventory of your player, you have your procedurally generated avatar, and then we have some quests. So we're actually gamifying the account, the player profile itself. So you have your identity and the ability to complete quests on chain quests in different games, similar to how you would do that in a traditional gaming ecosystem, and then build up reputation over time, which will give you points. And as you earn points in a cartridge ecosystem, you upgrade your profile so you get more reputation in the space. And we think the gamer identity is like a very interesting horizontal component of playing different games in the ecosystem for players to build up. The other functionality of the controller is just session management.
00:24:58.262 - 00:25:46.570, Speaker B: So you can connect your wallet to different games and it supports session tokens and stuff like that as well. So you can have different scopes that are pre approved for games that games can then you can interact with without necessarily having to sign transactions. Every time you interact with them, you can set up a few different balance like this one. When you first create your controller, it's just connected to cartridge by default. And in the next couple of weeks, we're going to be rolling out with some other games like influence and some of the other ones in the ecosystem to support the cartridge controller. And so what that will look like is you can go inside of a game, an arcade, you can learn about a game, you can see the different tokens that exist within. This is an example of influence.
00:25:46.570 - 00:26:36.982, Speaker B: We have some first party quests coming in for the different games. You'll be able to just click play, and play will take you to the influence game with your cartridge controller connected and the ability to play without having to connect a wallet and stuff like that. I think I have some designs I can show you of what's in the pipeline and isn't in the product yet, which might be interesting for sure. Can you see this okay? Yes, we can make it a little bit bigger. So this is like the example with influence. You have achievements that you can earn inside the game. You have quests, you have the inventory, which is the items that you own inside of their ecosystem.
00:26:36.982 - 00:27:21.622, Speaker B: You can see some of the activity that you have and you can go to your player profile. So this is shared across different games. And I think there's a bunch of interesting things that we're thinking about here. One of them is a lot of games. When you want to bootstrap an ecosystem, you want to maybe attract particular gamers that are highly engaged in the ecosystem. So for example, if you have a lot of cartridge points, you might have access to minting new tokens for a game is one obvious example. Or the ability to alpha test or beta test a game, get into kind of gated experiences based on your existing participation in the ecosystem.
00:27:21.622 - 00:27:52.800, Speaker B: So we're actually launching a game later this year that will be based on you'll be able to participate based on how many cartridge points you have. So having done some kind of quest or achievements in the ecosystem. And this is like some of the quest screen that I showed you earlier and the different activity. What else can I show you here? The one other cool one that we have is starter packs. See if I have a mock for starter packs here.
00:28:07.390 - 00:29:03.360, Speaker A: It's back to something while it's loading. I'll just address one question that I see in the chat with regards to account extraction. Where do my funds reside? Is it in an account contract or with a signer? And the answer is simple, is with an account contract, your funds belong to a smart contract. So the signer can trigger events or can trigger things in the smart contract, but the funds sit with the smart contract. So if you have a backup mechanism or disaster recovery mechanism, you don't lose everything if you lose your signer.
00:29:05.320 - 00:30:02.740, Speaker B: Yeah, and I think that's one of the cool things. Right? Like in the traditional ecosystem, I can't find the prototype right now and look for life. But, yeah, I'll mention real quick is that the starter packs. So the different integration points that we have for games is basically the onboarding experience and giving people the things they need to play a game with starter packs, the quests and achievements and then discovery through arcade itself and then some stuff that we're pushing on with mods in the future and surfacing a lot of the third party tools and interfaces that people are building for the games themselves. And then just to touch on the question that you just answered, I think Ethereum, for example, with externally undercurrents, if you want to increase the security of your account, you basically have to give up your address. Right?
00:30:02.890 - 00:30:03.590, Speaker A: Yeah.
00:30:04.120 - 00:30:09.236, Speaker B: And the cool thing with starknet and account obstruction is you can just swap out the signer.
00:30:09.428 - 00:30:18.670, Speaker A: Yeah, you're right. You can basically upgrade the security mechanism of your account and keep your address. It's pretty cool. Very nice.
00:30:19.360 - 00:30:19.964, Speaker B: Cool.
00:30:20.082 - 00:31:25.250, Speaker A: Well, Terrence, thank you a lot for this presentation. It looks like you guys have a lot of really interesting things cooking, so I'm definitely looking forward to deploying a controller and playing all of these games. So thank you for this. If there are questions in the audience, feel free to ask them. You can ask them in the community calls channel on Discord or in the chat in YouTube. All right, so actually, Terence, I'm going to keep you around for a bit as my guinea pig because for the second part of this community call, I want to talk a bit about Regenesis and the state reset discussion that has been around in the community for the past few weeks and that has had some new inputs this before. Actually, Terrence, if you followed a bit this discussion, what is your perception of what state reset is, or Regenesis is, what have you understood about it so far?
00:31:27.300 - 00:32:21.716, Speaker B: Well, so my original understanding was basically Starknet has been in Alpha for a while, and then you guys have been rapidly iterating and making things available as you go during that iteration process. You've taken on baggage as things have iterated. And the regenesis is basically an attempt to start from scratch with a clean slate and to basically not have to bring with us all of the baggage. That was kind of an artifact of iterating quickly, publicly with the original Alpha network into the future. And originally it was going to be a clean cut, as in two separate networks, and then like a migration from one network to another. And then my understanding of the current plan is it's going to be more of like an incremental transition and the network itself is going to stay the same.
00:32:21.898 - 00:33:03.440, Speaker A: Yeah, that's in a nutshell. This is the correct answer. So as you mentioned, starkness is still in Alpha and it moved forward quite a bit and pretty fast actually. But it has accrued a bunch of technical know things like syscalls that were allowed for a while that are not allowed, but still have some contracts deployed with these. Or the fact that Cairo, the way you write Cairo code is evolving. And we'll have a newer version of Cairo coming up soon. So we have a lot of technical depth on Starknet and state reset regenesis.
00:33:03.440 - 00:33:43.324, Speaker A: We could have also called it technical depth Jubilee, because you erase all depths and you start from a clean slate. And the objective was that. And the only way we thought about it was, okay, we'll have to basically create a new network, as you mentioned, and then redeploy everything and ask people to move from one network to the other. Turns out, and this is definitely something that I see as a big win. I mean, I see two big wins. First, we don't have to do this anymore, so we don't have to create a new network. We found a way to do it without having to shut down the network and create a new one.
00:33:43.324 - 00:34:16.010, Speaker A: That's the big, big win. The second big win is that this is not our id. This was suggested by someone from the community specifically, I think someone from software mentioned. And I think it says a lot about the development of the community and starknet in general, in the sense that you guys have a voice in what is happening. We've heard what a lot of people were saying, that this was too disruptive, that they would have to wait for things to deploy. And some of you even made suggestion. And now we're able to have this new path forward.
00:34:16.010 - 00:35:25.550, Speaker A: So the way you should think about Regenerasis now is not as much as we're going to stop the network and then redeploy to a new network. It's more like a hard fork where code that is deployed right now will become unusable. Somewhere down the line, if you imagine kind of is some upcodes from your Cairo code today will become unusable in the future. So you have to replace these upcodes with others, so you have to change the code of your smart contract. And specifically the biggest update we want to introduce is Cairo one, which is a new version of Cairo which will allow a bunch of neat things, but the neatest things of all is that it will allow much much better error handling. Meaning that right now if there is an assert that fails in your smart contract you can't have a failed transaction, you just have your transaction is rejected. And this is a huge vulnerability on the network because if a transaction is rejected it is still executed by the sequencer, but the sequencer can't charge money for it.
00:35:25.550 - 00:36:33.620, Speaker A: And this is an issue because you could send just a bunch of shitty transactions to the sequencer and he would have to execute them, but he will not be able to charge you for that. Cairo one, which should come online, which should be available for people to build with by the end of this year will allow much better error handling and will avoid this problem altogether. Meaning that you won't have any transaction that can't be proven, meaning that if something fails in your smart contract you will be able to prove that this thing failed and the sequencer will be able to charge money for that. It allows basically solving this huge pain point which is crucial to decentralization. We can't really decentralize a network if there's a DOS attack vector. Now the thing is this will come with Cairo one, but currently deployed Cairo code, which is Cairo zero, won't change, right, still deployed. So we need to retire this code to make it impossible altogether to have a transaction that is not provable.
00:36:33.620 - 00:37:15.024, Speaker A: So that's why we need, basically the objective is within the next six months or a year to have all the code in Starknet be Cairo one code. So what does this mean for DAP developers? It means that they will have to change the code of their application. Now for a bunch of application this may be kind of difficult to manage. I mean how do you update your application when it's already deployed for? Actually I don't know if there are questions, so I'm checking the questions on YouTube or on the community calls channel. I don't see any. If you have questions, feel free to ask. Them.
00:37:15.024 - 00:38:21.910, Speaker A: Terrence, if there are questions about how this will happen, feel free to ask them. But basically, we've come up with a mechanism that allow any smart contract. If it calls a specific system syscall, it will make it possible for this smart contract to change the code that it is using while keeping the same address. This will basically enable you to deploy today Cairo zero code, and further down the line to deploy Cairo one code at the same address by keeping the storage also. So it means you can deploy your token today and still use it once you have migrated to Cairo one code. It means that it's absolutely possible for you to deploy your code today and go to Mainnet today and still reap the benefit of Cairo one and new stocknet somewhere down the line. Basically, we've reduced the time it will take for you to be able to deploy to mainnet by making it possible to do it now.
00:38:21.910 - 00:38:26.810, Speaker A: So, yeah, in a nutshell, I don't know if this makes sense or if you have questions.
00:38:28.140 - 00:38:52.400, Speaker B: Definitely makes sense. I think one thing that is kind of like fundamental to this is the bytecode for the backwards compatible contracts or whatever, won't like the hashing function that's used for computing the count address. Those constraints won't hold anymore.
00:38:53.940 - 00:39:38.350, Speaker A: Yes, and that's one of the downside of this plan. And my colleague Luca, I know he was in the community call earlier, so shout out to you, Luca, because that's what he was complaining about, he said. But basically, contract addresses won't mean anything anymore because right now your contract address is ash of a bunch of things. But amongst the things you ash is the contract ash. Yes. This means that the contract ash of your contract will change. And so there won't be necessarily a correspondence, but we've determined that the network should be able to live with it if it allows a smoother transition, if it allows people to deploy now and keep the same address.
00:39:40.900 - 00:39:45.916, Speaker B: It will only affect legacy accounts or addresses that are upgraded.
00:39:45.948 - 00:39:54.310, Speaker A: Yes, exactly. It will affect only accounts and smart contracts with Cairo zero code that were deployed pre Cairo one.
00:39:55.720 - 00:40:15.530, Speaker B: So when you upgrade the bytecode of a contract like today, the bytecode is uniquely identified by the class hash. Right. And a bunch of different contracts might use the same implementation with the same class hash. Right?
00:40:15.900 - 00:40:18.444, Speaker A: I'm not sure I get your question. Oh, yeah, sure.
00:40:18.642 - 00:40:31.520, Speaker B: Like you declare, basically the first step in deploying a contract to startnet is to declare it, which gives you a class hash, and then you deploy a contract that uses that logic, right?
00:40:31.590 - 00:40:32.064, Speaker A: Yeah.
00:40:32.182 - 00:40:40.772, Speaker B: And so when you upgrade the contracts with Cairo 1.0. Does the class hash change?
00:40:40.906 - 00:41:14.380, Speaker A: Yeah, basically your Cairo zero code, your Cairo one. Cairo one is a sort of abstraction on top of Cairo. It's called Sierra. It's basically a system of constraints and functions that will give you better error handling, but it compiles to the same kind of Cairo bytecode that you had before. So this means that if you upgrade your code to Cairo one code, you'll use a bunch of other calls and methods that will change the hash of your class. So it will result in a different class hash.
00:41:15.280 - 00:41:23.628, Speaker B: So the upgrade is very similar then to upgrading contracts today before it is just like basically switching out the implementation.
00:41:23.804 - 00:42:03.944, Speaker A: Exactly. So I would say there's one difference though, is like when you're using a proxy today, when you're upgrading your contract, you have your proxy and your proxy will point to a new class. Right? But your proxy doesn't change. The code of your proxy doesn't change with regenesis. You'll also have to implement something that will change the code of your proxy. So say you have your application deployed today. You will have to declare at some point a Cairo one code, a Cairo one class hash that include a call to the syscall that will change the class hash of the proxy.
00:42:03.992 - 00:42:04.204, Speaker B: Right.
00:42:04.242 - 00:42:46.940, Speaker A: And then you will have to call your proxy to say, hey, use this implementation, use this new syscall, and with this new syscall change to that class hash, that class hash will be the proxy implementation and you will change the code of your proxy that way. But other than mean, the new Cisco we'll introduce is essentially a way to have native proxy Cisco without it being implemented at the smart contract level. And it's going to be live for a while so that we can have the transition. But eventually it's going to be deprecated because it's not meant to be a long term solution. Right. So you will go back to using a proxy. I see two questions on Discord.
00:42:46.940 - 00:43:27.176, Speaker A: I see Luca complaining about the addresses on YouTube. Sorry, Luca. Okay, so I see darkest nightmare asking, do you have a rough timing for Cairo one on Testnet? And when could we try out the upgrade to Cairo one method? So there are two things here and I can't commit to any. So that's a rough ballpark, right? You will be able to write and have specifications for Cairo one by end of year. I've heard December float around. So you'll be able to write Cairo one, compile it, and write and compile it hopefully in December. Right.
00:43:27.176 - 00:44:37.724, Speaker A: Then it will take a bit of time for the smart chaps at software Mansion, Starknet, JS Shardlabs, who are doing hard hat and Devnet to upgrade their tooling so that you are able to test your Cairo one code. And Cairo one should be deployable on Testnet in the beginning of next year, like early next year. Now, when will the new Cisco be introduced? That's a different question. So it may come at the same time, I'm not entirely sure, and we kind of improvise this discussion today because I see there's a lot of questions, but we plan on having a more in depth Ama about regenesis in two weeks with Tom, so be sure to be there. And I think we're going to hold Amas about it for the next few calls because I think it's important people are aware of it. So the rough estimate is you'll be able to have Cairo one first call, the first compilation with Cairo one by the end of this year. You'll be able to deploy Cairo one on Testnet in January.
00:44:37.724 - 00:45:38.800, Speaker A: And we want this transition to happen fast, so the new syscall to change the class hash will come probably early next year also. Okay, so Laurie is asking if Cairo one code can be deployed to the same address as Cairo zero code, doesn't this open up big vulnerabilities? What kind of restrictions are there? Does the bytecode have to stay the same? If not, can any bytecode get deployed at this address? By whom? That's a great question. If you do find glaring vulnerabilities in what we're suggesting, please single them and tell us we don't want to ship something that won't work. So what I see from your question is, does the Byteco have to be the same? No. So essentially what this new Cisco give is a new ability, it's a native ability to manipulate. Your address has a proxy. So this means two things.
00:45:38.800 - 00:46:41.844, Speaker A: If your contract is deployed today and doesn't have this syscol, you're going to have to move the contract of the state of your contract to a new contract regardless. So you won't be able to keep your address. If you're using an upgradable smart contract deployment, then it means that you'll be able to change to Cairo one code, but then it's the same kind of attack vector that you have with a proxy, meaning that the operator is able to change the code. So I don't think it opens up new vulnerabilities. What it does do is that it will force people who will deploy in the next two to three months to use an upgradable pattern, whether they want it. I mean, they will have to think about how do we deploy Caro's one code further down the line. And so the only downside I see is that people who are not very used to manipulating proxy deployments will have to grow that culture and grow that thing.
00:46:41.844 - 00:46:44.970, Speaker A: They won't have to maintain it for long, because once it's here.
00:46:46.780 - 00:46:47.176, Speaker B: They can.
00:46:47.198 - 00:47:30.212, Speaker A: Get rid of the proxy. The nice thing also is that think about it. If you're deploying a proxy contract today, your contract will always be a proxy, right? It will never change with this new syscall. If you said yes, but I wanted to manipulate my contract, not as a proxy, as a perfect implementation of my contract. Well, you can still do that. You can deploy it as a proxy today, and you can use the new syscall to point to the actual implementation of your Cairo one code. And then you will have your app, absolutely an upgradable, not a proxy until the end of time, which is pretty cool.
00:47:30.212 - 00:47:31.430, Speaker A: Does that make sense?
00:47:32.440 - 00:47:33.750, Speaker B: That makes sense.
00:47:34.920 - 00:47:43.800, Speaker A: It answers your question, but feel free, Laurie. I'm not sure if it answers your question, but feel free to ask. If not. Sorry I cut you off, Terrence.
00:47:44.880 - 00:47:53.736, Speaker B: I was just going to ask, will the Starcore team create, like, a canonical proxy implementation that you guys will open source?
00:47:53.928 - 00:48:40.072, Speaker A: We don't really write smart contract codes except to do some fun tutorials, but that would be more on open zeppelin's ally, right? So, yeah, I think they will upgrade most of their code. I mean, all the code. They will update it eventually to Cairo one code, and I think that one of the first they will work on is indeed the proxy pattern so that people can start using it because the timeline will be roughly like this. Imagine you've deployed. If you're a project waiting to deploy to mainnet and you want to wait for a genesis, you don't have to. Here's what you can do. You first deploy a proxy.
00:48:40.072 - 00:49:24.796, Speaker A: Then you deploy your smart contract. I mean, you declare your smart contract class hash, and you point your proxy to this hash. Now, your users will be able to use your contract, and it will be all stored in the first contract you declared. That is the proxy. Then once Cairo one becomes available, you wait for the proxy update. That is Cairo one, right? At this point, you will call your proxy to update the class hash so that you use a class hash that will make use of the new syscall. At that point, you make a second call to your proxy by saying, hey, call the new syscall to change my proxy implementation to Cairo 1.0.
00:49:24.796 - 00:50:17.580, Speaker A: At this point, you will have a Cairo 1.0 proxy and a Cairo zero contract class, and then you can declare your new class hash in Cairo 1.0. And you call your proxy to say, use this new implementation, and at that point, you'll have a proxy in Cairo 10 and an implementation in Cairo 1.0. And if you don't want to have a proxy and you don't want to deal with that in the future, you can do the following. You can declare with the proxy today. It will be the easiest way for you to manipulate that in the future. And once Cairo one and the new Cisco are available, you deploy a new implementation that uses the new Cisco, right? You declare it, and you point your proxy to that implementation.
00:50:17.580 - 00:51:01.172, Speaker A: Then you will create your carrier one code that you are fine with forever, and you declare it. At this point, you will call your proxy smart contract so that it uses the new Cisco, and it points directly to the Cairo one implementation of your contract. And at this point, at your address will leave the code of your application. It won't be a proxy anymore, so you won't be able to change it in the future, but it will be your Cairo code, your Cairo one code. Then we're all happy and we can drink beer and relax. I see Laurie made an extra comment. Bottom line, Cairo zero contracts should be upgradable if they want to be able to keep their address after a genesis.
00:51:01.172 - 00:51:02.312, Speaker A: Did I get it?
00:51:02.446 - 00:51:02.936, Speaker B: Yes.
00:51:03.038 - 00:51:24.850, Speaker A: Yes. Essentially, you can deploy now on main net by using proxy to make it upgradable, and you'll be able to keep your address after a genesis, and you'll be able to make it non upgradable and canonical even if you do that. All right.
00:51:26.980 - 00:51:33.910, Speaker B: Could you talk maybe a little bit about. I saw that there was something in particular that accounts need to do. Is there something?
00:51:34.600 - 00:51:51.188, Speaker A: Yeah, well, user accounts. That's a great question. No, it's the same. Accounts are also a smart contract. Right. And right now, when you're deploying a wallet, whether it be a Bravos or a Narjan wallet, they're proxy. They're upgradable.
00:51:51.188 - 00:52:33.910, Speaker A: Right. So your account will need to be graded at some point. So if you're telling your users, hey, come online and use my app and create an Arjon wallet, just make sure that in the next six months, they will connect maybe once a month or once every couple of months, so that they will be told by Arjon, hey, you need to do some kind of update, because at this point, Arjon Bravos will ship a Cairo one implementation of the proxy and will ship a Cairo one implementation of the smart contract wallet, and they will make them do the upgrade. So your users will need to connect at some point.
00:52:36.680 - 00:52:52.284, Speaker B: Got it. So one takeaway is all of the addresses that exist today on Starknet will all change because it will require a new proxy implementation, which will result in a new address for any contract that wants to transition to Cairo one.
00:52:52.482 - 00:53:12.150, Speaker A: All contracts that are deployed today that are non upgradable, their address will have to change. All contracts, all your contracts that are deployed and are upgradable today won't have to change their address. And all contracts that are deployed tomorrow, if they're upgradable, can keep their address.
00:53:13.480 - 00:53:16.980, Speaker B: But don't you need a new proxy implementation with the syscall?
00:53:19.160 - 00:53:41.484, Speaker A: You do, but you can keep the same address, right? Your proxy implementation can change when you're using the new syscall. What it will change is the class hash of it won't change the class hash as pointed in the proxy. It will change the class hash as pointed in starknet. And so it will change the implementation of the proxy. Is that your question?
00:53:41.522 - 00:53:57.200, Speaker B: Okay, so the syscall that you call is actually. Okay, is exposed on the class hash that the proxy is pointing to. So if you have an upgradable proxy today in strengthnet, then you can keep that address?
00:53:57.270 - 00:53:59.170, Speaker A: Basically, yes, exactly.
00:53:59.780 - 00:54:01.270, Speaker B: Okay, got it.
00:54:01.720 - 00:54:39.664, Speaker A: And I think that's one of the main differences with how we're used to working with proxy. The code executed by a proxy can change the storage, but it can't change the code of the proxy. This makes it possible. I see that there's a question brewing here by darkest nightmare, so we're going to wait 2 seconds for him to finish. Yeah. And I don't see much more questions, so I hope this was clear for everyone. Dorka's nightmare was no question.
00:54:39.664 - 00:55:09.416, Speaker A: It was just going to post what you did in telegram a while ago. Okay, cool. Looking forward to it. All right, well, I think if there are no more questions, and again, these things need to percolate a bit, so I want everyone to feel super familiar. Don't feel bad asking questions. It's a new situation. We're going where no person has been yet.
00:55:09.416 - 00:55:55.770, Speaker A: Right. This is all new, so we're figuring out things as we go. It's both incredibly exciting and incredibly humbling because you're not sure what are the good decision. And we're very grateful to be able to be building this with all of you. And we're very grateful for all the inputs that led to this, which is a much less disruptive plan than we had thought initially. And now we just want to make sure that you guys have everything you need to start building, start shipping, and be able to build your use cases, your games, your businesses, and not think too much about how will things change too much in next six months. We just want to make sure that everybody feels comfortable building.
00:55:55.770 - 00:56:12.280, Speaker A: All right, Terrence, thanks again for your time, and thanks for being my guinea pig in this improvised Ama. I hope you had fun. And until next time, of course, thanks for having me. Cool.
00:56:12.350 - 00:56:13.064, Speaker B: See you guys.
00:56:13.182 - 00:56:14.420, Speaker A: See you in two weeks. Bye.
