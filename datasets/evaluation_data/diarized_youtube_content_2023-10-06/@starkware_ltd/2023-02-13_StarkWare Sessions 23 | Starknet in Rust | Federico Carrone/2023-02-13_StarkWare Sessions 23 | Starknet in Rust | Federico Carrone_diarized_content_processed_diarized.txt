00:00:03.430 - 00:00:55.514, Speaker A: Okay, well, I hope those people here, first of all, thanks all for coming. My name is Herman, I am touch lead in charge of lambda class effort related to Stagnet. And he's Bono. He's also a touch lead in charge of specifically stagnet. So, okay, we can start. So what we are going to be looking here? For me, the main goal of this workshop is to get you, the participant, start contributing with this report to strengthen in rust. And also, why not Kyrs? So this workshop would succeed if some of you guys send some prs and start working on it, that would be really good.
00:00:55.514 - 00:01:32.520, Speaker A: And for that, if I talk here, you listen to me. Yeah. Okay, awesome. So for that we are going to be having an overview, a general overview of the project that we have been working, and also an overview of how the Starnet business logic work. The Starnet business logic is the second project that we are working on. And after that we are going to have some onboarding for you guys to start contributing. So let's start.
00:01:32.520 - 00:02:12.370, Speaker A: Well, first of all, who we are, we are lambda class. I think a good word to describe us is a software powerhouse, meaning that we love finding really hard problems, to learn a lot and to study a lot and then deliver fast. So we are a software company. It has, I think, more than ten years in the industry. And we are located in Latam, in Argentina, Uruguay and Spain too. Okay. And specifically in Starnet.
00:02:12.370 - 00:02:52.282, Speaker A: What we have been doing is basically porting a large part of the starnet ecosystem in rust to rust, in order to make it faster and predictable and reliable. So let's go into our first project. The first project was Cairo rest. That is basically a reimplementation of the Cairo VM in Rust is also finished. The Cairo one use Cairo rest. So here are some benchmark, I think. Yes, that is already updated.
00:02:52.282 - 00:03:38.330, Speaker A: We make it 100 times faster, but with some optimization that one of the guys, I think here, Palito is here. I know it's already 150 times faster, so that's really good. And it's around 20 times faster than the Pipi interpreter, but it consumes twelve times less memory. So pretty good results here. And after that we have to implement Kyrospy, that is basically Python FFA bindings for rust. It's in order to integrate our vm that is in rust. It's in order to share memory between rust and Python.
00:03:38.330 - 00:04:23.398, Speaker A: We have to do that in order to integrate it with Starnet that is currently in Python. It's already finished. We tested with several projects, namely the devnet is in production you can use the Devnet. With our VM Kakarot, we make it eight times faster serial c in prototype Pythinder. And what we found is that the mailbottonek is the context switching and the memory passing through rust and Python. So that's why we start working on the. Starting in rust, basically, as I already say, is implementation rust of the Starnet business logic.
00:04:23.398 - 00:05:07.210, Speaker A: That is, Starnet business logic is a core part of a sequencer that is a library that hold a state and is basically the one that executes the transaction. Yes, I have it there. Yeah. So basically this library, the inputs are transactions declare, deploying bulk, and the outputs is state if and execution info. And what is the state? So staggering state. You can think it basically as four hash maps. Like one implementation, it's a mapping between the class hash and a contract class.
00:05:07.210 - 00:05:47.826, Speaker A: A contract class is basically the JSON and the specific of the contract. And then you have the second part of the state. That is the instances of a contract. You know that in Starnet everything is a contract. And then you have instances of that contract. And for that you have a mapping between the address, like that instance of the contract, and the storage key that basically hosts whatever value you want to store. You have mapping between the address and the class hash and also address and don'ts.
00:05:47.826 - 00:06:32.630, Speaker A: Don'ts is basically the number of time of the contract being called. Here we have like one implementation of the state. But the important thing is the functionalities that that state had to have. And for that in rust, to abstract the functionalities, we have traits. Those are the functions that a given state has to implement. Some of the issue here that we are going to see now have to reimplement and refactor some stuff here. And it's basically getters and writers.
00:06:32.630 - 00:06:55.040, Speaker A: Nothing too strange here. I think that's all. I think that is now good to jump to the code that Bono is going to be introduced. Okay. Yeah.
00:07:00.370 - 00:07:43.370, Speaker B: Okay. First, as a first requirement, you need rust and python three installed. And let's move to the issues. Yeah. For this workshop, the idea is to take several issues and you can work, for example, there is an ector that you can just make in a couple of minutes. Then you have things like testing already implemented. Functionalities like the validation of the contract class I think is doable.
00:07:43.370 - 00:08:35.260, Speaker B: In this workshop you can see that there are some hard ones. They require some experience with rust and involves more understanding of the code days. And finally, there is a gold tier. And yeah, this is like we choose some issues that are more difficult than the harder ones and maybe they require a bigger effort. But yeah, I think it depends on the appearance of the participant. So yeah, the idea is that you can pick one, you can comment. Okay, I'm going to work in this one.
00:08:35.260 - 00:09:08.760, Speaker B: It's even better if you work in groups. You can, I don't know, three or four people and yeah, let's hack something. And if you have any questions, you can find people from Lambda class that are experienced in this code base. And yeah, you can ask about the implementation and if you have another approach or an idea about it, we can just talk.
00:09:12.170 - 00:09:12.786, Speaker A: Nice.
00:09:12.908 - 00:09:19.974, Speaker B: Yeah. Please comment to avoid implementing several times the same ticket.
00:09:20.022 - 00:09:58.180, Speaker A: Yeah, maybe we can make some groups like this, divide these tables and be like four. Four. So whatever you want. We are going to be like hanging around and if you have any comments, please let us know. Sorry that they don't do label. It's because yesterday we were finishing making the issues and we start receiving pr. So now you are free to do it.
00:09:58.180 - 00:10:05.920, Speaker A: So yeah, does anyone have any question or something?
