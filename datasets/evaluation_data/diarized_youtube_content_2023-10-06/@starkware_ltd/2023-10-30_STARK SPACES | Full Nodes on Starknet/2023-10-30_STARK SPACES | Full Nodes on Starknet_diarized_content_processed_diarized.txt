00:00:00.330 - 00:00:28.546, Speaker A: Okay, great. So sorry for the delay. Let's just start with a quick rounds of intros. I'm Dan. I'm from Starquare. I joined about four years ago after completing my phd in cryptography. During this period, I was part of the East out project in Stockware, which involves open sourcing portion of our improver for the rescue.
00:00:28.546 - 00:00:58.510, Speaker A: Hush statement. I played a role in a perpetual exchange team where we developed a scaling solution for perpetual trading, and currently I'm a member of the team working on constructing a full node for Stocknet. So this Twitter space will be about full node for Stocknet. I understand we have some technical issues. I'm not sure even with us from the talker.
00:01:01.650 - 00:01:31.610, Speaker B: Yeah, I'm here and able to speak. This is Josh from Nethermind. I'm a software engineer working on the Juno Starknet client. I've been working on Juno for about a year now, and it's been such an amazing experience to work alongside the amazing builders in the Starknet ecosystem and watch Starknet mature. I think we're headed into the most exciting time in Starknet's roadmap, and I'm really looking forward to diving into the role that full nodes will play in that roadmap.
00:01:32.030 - 00:01:39.100, Speaker A: I see. Hi, Josh. So how did you get involved in the stocknet ecosystem to begin with?
00:01:40.190 - 00:01:57.090, Speaker B: It was actually through the incredible Nethermind internship program. I started working on Juno May of 2022. That was the project that I was working on basically from day one as an intern, then worked part time through school and graduated just a few months ago, and then now working full time on Juneau.
00:01:57.990 - 00:02:13.080, Speaker A: Congratulations. So coming from Nethermind, who has its own Ethereum client, I wonder how is working on a Starknet client differs in that sense?
00:02:14.250 - 00:02:53.940, Speaker B: Yeah. So personally, I haven't touched the Nethermind client code base, but I can say that building a client Nethermind has been a really amazing experience because we get to take and learn from a lot of the work that's been done on the Ethereum side and build that on Stark now we're really looking forward to rolling out some new sync methods over the next six ish months that we're really excited about. And that's all taken from the Nethermind core team. So we've had core team members help out with the Juno Starknet client, and it's been super helpful. So it's definitely a great place to build a full node given the depth of experience on the team.
00:02:55.030 - 00:03:02.934, Speaker A: I see. Interesting. Were you able to reuse parts of the code or the infrastructure, no.
00:03:02.972 - 00:03:10.040, Speaker B: So we haven't been able to reuse the code. The Nethermind client is written in c sharp, and then the Juno client is written in go.
00:03:12.970 - 00:03:31.840, Speaker A: Let's see, how would you explain difference for someone who is not from this ecosystem? How would you explain the difference between an Ethereum and a Starknet node? Specifically in Starknet, for example, the node doesn't necessarily have to re execute transactions, right?
00:03:33.810 - 00:04:15.886, Speaker B: Right. There are a few differences. Most of the if you go and read the code, a lot of it looks very similar. You still have RPC, you still store a lot of stuff in a database. In the future, as Starknet grows and matures, nodes will share that data over p to p. This space was downloaded via spacesdown.com. Visit to download your spaces today network I guess one interesting difference is, as you mentioned, how consensus will eventually work, you may be able to have more interesting forms of light, clients who can just verify stark proofs, for example.
00:04:15.886 - 00:04:20.960, Speaker B: But for the most part I would say that they're very similar.
00:04:22.710 - 00:05:05.870, Speaker A: I see. For me it's interesting, I always think about the trade off between scale and latency. Meaning I know that our node paparos can validate blocks without reexecuting transactions, but then you'll have a latency for the finality. I mean, you would only be certain about the block after you've seen the proof. On the other hand, it enables greater scale. So it's a different set of mind from Ethereum, where you have to execute each and every transaction in order to validate.
00:05:07.330 - 00:05:33.320, Speaker B: Absolutely. Yeah, I think that's a great point. The design space for full nodes on l two s, and especially Starknet, it really widens because you have this extra, almost extra mode of operation you can tap into. If you're willing to wait just a little bit longer, then you don't have to re execute transactions at all. And if you want to be at the cutting edge, then you can reexecute transactions right away. So you have this additional optionality that you don't have in an l one.
00:05:33.930 - 00:06:06.580, Speaker A: Yeah. Okay. One of the challenges I encounter is dealing with a constantly evolving target. I mean, the specification undergo changes and more functionalities are added frequently. I'm curious about your experience with this. Do you also face these circumstances? Do you feel as if you play a role in influencing the specification and the overall system?
00:06:08.470 - 00:06:41.470, Speaker B: Yeah, I think we face similar challenges. Obviously starknet is moving at breakneck speed, so keeping up with all of the updates and the moving targets is definitely a challenge to make improvements to the underlying node itself. Make optimizations alongside of that is obviously a challenge, but it's a very exciting one. To be able to participate in those discussions as the protocol rapidly evolves and actually implement the final decision is a very exciting task.
00:06:43.650 - 00:06:53.300, Speaker A: Do you feel as if you can influence the specification, the protocol, or just following whatever is there?
00:06:54.710 - 00:07:38.910, Speaker B: It depends from the amount of involvement from any individual member of the team varies from time to time. We participate actively in discussions around our thoughts on if something should be changed. In RPC specification, for example, we have other team members who are working quite actively and giving feedback on the evolving p to p specification. So it varies if a new aspect of the protocol is announced or we find out about it a few months beforehand and we start implementing it and we notice something maybe doesn't feel right, then we'll kind of discuss and see if something should be changed, but otherwise we may just implement it as is without any needed adjustments.
00:07:40.050 - 00:07:46.100, Speaker A: I see you mentioned p to p implementation. How far along are you in those?
00:07:47.510 - 00:08:35.380, Speaker B: Yeah, so this is an exciting development to everyone who's not following Starknet on a day by day basis, the network is gradually moving toward we're decentralizing, as I like to say, the data plane where nodes will gossip, blocks and transactions to each other, so you'll be able to sync from peers instead of exclusively from the sequencer. Our implementation is moving nicely. We hope to have a small Juno testnet up here relatively soon, next few months, and that'll be really exciting to see. And I'm curious to hear on the pepper side as well how you guys think the PDP spec is evolving and if you change anything or when you expect to have a testnet up.
00:08:37.510 - 00:09:46.310, Speaker A: So we don't expect a whole testnet anytime soon, but I think that in the coming two weeks we'll have an endpoint to start integration on specific protocols from the spec. Currently only the header stream, which means request for a header and signatures and get a whole bunch of headers. Because as I see, the specs doesn't always says everything. Even given a good specs, there are still unknowns and I guess let's say integration would be very interesting phase for us. So this is what we plan for the coming few weeks. Currently we're still working on the functionality of the node, supporting the depending for a very long time, some storage optimization, and overall just benchmarking our node from sync to RTC latencies.
00:09:49.630 - 00:09:50.490, Speaker B: Exciting?
00:09:51.070 - 00:10:05.070, Speaker A: Yeah, very much. Let's see, do you have any interesting technical challenge or bug that you encountered while developing the node?
00:10:07.890 - 00:10:53.200, Speaker B: Challenging, challenging bug nothing's coming to mind off the top of my head of a challenging bug, I guess. One interesting technical challenge for building Juno, right from the start, was thinking about what the database layout would look like. This is something that we've worked really hard on to optimize as much as possible to make sure that the database size is as small as possible. And we've been super happy with the results. So that's been a really interesting technical challenge, is making sure that the database size is manageable as darknet rapidly grows, and making sure that Juno can keep up with that. So we've been quite happy with the results there. I'm sorry, go ahead.
00:10:53.570 - 00:10:59.150, Speaker A: Sorry I asked, what is the current storage requirement of a Juno node?
00:10:59.570 - 00:11:14.890, Speaker B: Yeah, I believe our last benchmark was around 70gb for the main net state. It may be a little bit more than that now that the blockchain has obviously grown since then, but something on that order of magnitude.
00:11:15.070 - 00:11:19.510, Speaker A: That's for a full archive node.
00:11:20.010 - 00:11:22.230, Speaker B: Yes, that's full archive.
00:11:22.650 - 00:11:24.642, Speaker A: That's very impressive.
00:11:24.786 - 00:11:27.000, Speaker B: Great, thank you.
00:11:32.010 - 00:12:20.780, Speaker A: I often get asked, why do we in stock, or why do we build another client for stock, given that we already have Pathfinder, I hope Mirko would be able to join us. And having Juno from Nethermind. And as I see it, other than the obvious reason of building block toward the decentralized sequencer, I believe that getting your hands dirty also helps in other aspects, such as defining the specs. Only after trying to build a node, I can better understand the specs. I understand the requirement, what is feasible, what won't work, and I wonder why. Do you think having a bunch of clients is important? Do you think it's important?
00:12:22.510 - 00:13:13.900, Speaker B: Yeah, I think it's absolutely important. First of all, just having client diversity, so if there is, in a world where we do have decentralized sequencers, you don't want a specific client or a single client to be used and have a bug, which could potentially derail the network. And also, as you mentioned, there are kind of those intangible aspects that maybe indirectly affect the security or performance of the network, where having just multiple teams from different backgrounds, different organizations, collaborating on the same set of specifications and growing the protocol has a lot of intangible benefits. And I think Ethereum's fast way of organizations constantly contributing to the protocol is one of the reasons why Ethereum has been so successful. Those network effects are very hard to go without.
00:13:16.030 - 00:13:27.710, Speaker A: I see. Is Kyo playing a part in Juno in code? Did you have any experience coding with Cairo?
00:13:28.770 - 00:13:57.954, Speaker B: So this is actually a really exciting aspect for some of Juno's future developments. We recently, or just over the last few months, have been kind of prototyping and Cairo VM and go. Right now we're using the Rust VM. So if you do a trace transaction, call to Juno, then it'll actually call into the Rust VM. And this has been working. It's functional. You can use it today, but for optimal performance, we're always trying to achieve that next level performance.
00:13:57.954 - 00:14:03.290, Speaker B: We would like to have a VM in go, so we don't need to call into rust currently.
00:14:03.360 - 00:14:06.620, Speaker A: Use a binding for us whenever you want to.
00:14:08.350 - 00:14:38.470, Speaker B: So it's, it's good, it works, but we'd like to do better, as always. And so we've been building. There's an amazing group of builders at Nethermind who've been working on a Cairo VM in Go and starting to get some very promising results. So that probably won't be out super soon, but we're definitely looking forward to integrating that into Juno later on and getting Cairo execution support really nailed down and optimized.
00:14:41.370 - 00:15:17.470, Speaker A: Sounds great. Just a moment. Sorry. So you mentioned implementing a VM in Go and peer to peer, walking on pin to peer. What's next for Juno other than that? I mean, in the near future?
00:15:18.720 - 00:15:56.324, Speaker B: Yeah, so I would say near future. One thing that we're excited to roll out is websocket subscriptions. So if you want to, for example, receive a notification every time that a new block is added to the chain, we would love to support that. Also things like notifying when a transaction status changes. So this would be useful for wallets. If you send a transaction through a wallet, it would be nice to receive a notification or for the wallet to be able to receive notifications about when the transaction is added to the l two chain and when it's actually finalized on l one. So that's another thing.
00:15:56.324 - 00:16:11.900, Speaker B: And then we always have database optimizations on the backlog, things we want to add along those lines. So I'd say that that's one of the major upcoming items that we'd like to release. How about Papris? Anything exciting on your roadmap besides PDP and execution?
00:16:13.680 - 00:17:08.460, Speaker A: So, in stockware, we're in the phase of a deprecation of the fitter gateway and moving the entire ecosystem towards using the JSON RPC as part of that. So the full node in stockware is playing several aspects. One of them is just another full node from the ecosystem. But other than that, we are building something to use within Sarquil for our sequencer implementation. So we have two hats for everything. So we mentioned execution. One of the execution models today for Starknet is a blockifier, which is a rust grade implemented in Starquil for execution transaction in a context of block.
00:17:08.460 - 00:18:04.160, Speaker A: And one of the big scale jumps that we have in the Startnet sequencer is having this blockifier using a festal storage indexing, which happens to be the one we use in mean we are writing a node and we also supporting the scale of Starknet. So this is something that we always do concurrently. That's one interesting thing that we work on. So whatever Stocknet is working on, we have to work on as well. Other than that, we're interested in defining the node as a whole node, meaning add Memphis functionality to the node.
00:18:06.500 - 00:18:07.008, Speaker B: Better.
00:18:07.094 - 00:19:04.664, Speaker A: Peer to peer, not only polling for new blocks, but also being able to push nodes and decentralizing the sequencer as well. That's a lot of work. Not everything is done in the team of papyrus, but in some aspects we're related to everything going on there. Also deprecating the fiddle gateway. So I guess that the current plan is for integration environment is to have one of the full nodes as just node provider. We might use PEF iris for that as exciting. One of the things that I kind of envy Pathfinder and happy that I'm not there is having them burden the whole production of stagnet.
00:19:04.664 - 00:19:35.020, Speaker A: So today we don't have to deal with clients complaining about this and that don't work. But on the other hand, we don't have many users. So I would love to get more feedback on our implementation. So that's exciting. We can provide a node for the ecosystem to use. How about you in Juno? Do you have any feedback from users for the node?
00:19:35.680 - 00:20:24.590, Speaker B: Yeah, so just to piggyback on a lot of what you said there, and to answer your question, yeah, we have started to see some more users and really grateful if there are any Juno users in the audience. If you have any feedback, we'd love to hear from you on Telegram or Twitter or wherever. Yes, we have started to get more feedback, some very helpful bug reports, some interesting feedback on ideas on how we can improve things like log messages and usability. And one thing we're really excited. Similar to what you mentioned with Pappyris, Nethermind is standing up an RPC service that will run Juno nodes to start with here soon. And so if you're an adapt developer and you're looking for another node to run, that's an option. So we're really excited to get more users through that.
00:20:26.080 - 00:20:49.430, Speaker A: Yeah. So for anyone who can join us on this wizard space, I think it's good to know that we have a Juno implementation that we can use. Also, if someone wants to get involved, what would you suggest? Are there any good first issues at your project? Or maybe other things?
00:20:50.760 - 00:21:22.370, Speaker B: Yeah, we do have good first issues labeled on our issues on GitHub, GitHub, Nethermind, eth Juno. You'll also find our telegram, discord, Twitter linked in the readme of the GitHub project if you're interested in reaching out on socials. Also, Nethermind will be hosting a Nethermind summit dev connect, and we'll have most of the Juno team will be there. So if you want to see us in person, make sure to stop by in Istanbul, November cool.
00:21:23.060 - 00:21:25.490, Speaker A: How many are you today in the team?
00:21:27.060 - 00:21:39.590, Speaker B: Right now there's four or five of us working full time, and then another mind internship brings in some excellent interns now and then who are able to help out as well.
00:21:40.520 - 00:21:41.220, Speaker A: Cool.
00:21:41.370 - 00:21:45.448, Speaker B: How about the Pappyrus team? How big is the team today?
00:21:45.614 - 00:22:08.220, Speaker A: We are five. It's a five person show, but as I mentioned in Starquare, we shifted most of what we're doing today towards decentralizing Starknet, so I can expect more people from current Starcore Walker to come and work on something related to the node.
00:22:09.060 - 00:22:11.570, Speaker B: Nice. Yeah.
00:22:13.300 - 00:22:18.450, Speaker A: Do you have any other topic you would like to discuss or maybe to say?
00:22:20.740 - 00:22:41.784, Speaker B: Nothing coming to mind right now. Just thank you for having me and thanks to everyone for listening again. If you have any questions about Juno or full nodes in general, you can find all of our socials at GitHub, Nethermind, Juna, and yeah, looking forward to decentralizing Starknet with you all.
00:22:41.982 - 00:22:45.240, Speaker A: Sure. It was pleasure to have you on. Thank you very much, Josh.
00:22:45.660 - 00:22:47.860, Speaker B: Thank you. Have a good day. Bye.
