00:00:01.130 - 00:00:22.440, Speaker A: Hey everybody, just going to give it a minute or two and we're going to get started. Do we have everybody from the Starknet and Nethermind side? Can you guys hear me?
00:00:23.130 - 00:00:25.240, Speaker B: Yes, I believe we have everyone.
00:00:26.490 - 00:00:36.460, Speaker A: Cool. Then if we have one, then I think we get started. Is gal here?
00:00:41.070 - 00:00:47.162, Speaker C: Yeah, by sending an invitation to speak. Do you mind making Starquare a co host?
00:00:47.306 - 00:00:48.000, Speaker A: Sure.
00:00:55.070 - 00:00:56.060, Speaker B: Hey everyone.
00:00:57.230 - 00:01:26.210, Speaker A: Hey. Ok, I think we can get started. Welcome to our Twitter spaces. Today we have myself, I'm Ken from the Uniswap foundation. We have the Starkware team. We also have Devin and York and Swapnil from Nethermind. And today we're going to talk about deploying Uniswap V three on Starknet.
00:01:26.210 - 00:02:18.154, Speaker A: So just to add some color and context, Nethermind recently put forth proposal to deploy Unisoft V three on Starknet. It's permissionless zk roll up and heritage security from Ethereum. Starknet runs on Cairo VM, a virtual machine optimized for generating zero knowledge proofs about l two state transitions. Cairo is their high level language used for writing smart contracts on Starknet. And so what Nethermind has done is successfully used warp, which is a transpiler from solidity to Cairo in order to transpile the V three core contracts to Cairo. Unison V three core is currently running on a local Starknet testnet. It's passed all provided tests, and another mine team may use warp to transpile the V three code base and deploy it on Starknet.
00:02:18.154 - 00:03:05.454, Speaker A: So today we're going to talk about where we are, where we're heading, and how we do that. So this proposal is going to be extremely meaningful because it would be the first non EVM deployment of Uniswap, which has brought a bunch of novel questions that the community has been asking. And it would be great to sort of address that really interesting sort of trade offs here. So as mentioned before, we have the Nethermind team, who's leading the Starknet development, Jorge and Swapnal. Devin, who is the CSO at Nethermind. We have Galron, who is a PM at Starkware. And just as a heads up, Nethermind is not Starkware and they are not Starknet foundation.
00:03:05.454 - 00:03:21.980, Speaker A: So all separate entities. We are the Uniswap foundation, we are not uniswap Labs. So to start off, would love to sort of get Starknet like Gal, speak about Starknet. Tell us about what exactly Starknet is. Gal, are you here?
00:03:23.710 - 00:03:32.794, Speaker D: I'm here. And we also have Alex, who's also a PM from the Starkware side. He's one of my teammates.
00:03:32.842 - 00:03:35.710, Speaker A: Hey Alex, do I need to add him as a speaker?
00:03:37.010 - 00:03:39.822, Speaker D: I think he is amazing. Cool.
00:03:39.876 - 00:03:40.800, Speaker A: Take it away.
00:03:44.290 - 00:04:45.480, Speaker D: Yeah, so I can kick us off with a quick intro to what Starknet is and why it's needed. I'm really going to try to make it brief so that we have enough time to dive into the proposal. And what the Nethermind team has been doing with Warp Stargnet is a L2 network on top of Ethereum that basically increases the throughput. Add scalability to Ethereum, meaning basically letting users send cheap and fast transactions while enjoying the security benefits and also the composability of Ethereum. So let's try to break it down. I think that there are three interesting questions in that context. First, why is Ethereum not scalable as it is today? Then what is Starknet? And how does darknet solve the scalability problem? And then I want to touch on what's the state of Starknet today, and maybe say a couple of words about where we had it.
00:04:45.480 - 00:05:51.286, Speaker D: So first, if you think about Ethereum, people like calling Ethereum a decentralized network. But actually I think that a better term would be a replicated network. Because every node, every miner on the Ethereum network runs every transaction, and every block that propagates in the network, basically everyone does the same work. Every transaction that's being sent is executed by all the entities in the network. And we like redundancy, so we encourage more nodes to join the network, and as more nodes join, we have more duplicate work, and this creates more expensive transactions. That increases the fee in the network. And since we don't want to prevent anyone from participating as an operator in the network, we'd also have to limit the block size, because otherwise the smaller miners would be excluded from participating in the operation of the network.
00:05:51.286 - 00:06:54.346, Speaker D: So we end up with a network that by definition has a very limited capacity. That's why Ethereum has to have a limit on its throughput as it is today. What Starknet does is basically operates another blockchain that periodically commits its state into Ethereum. Right now, we commit our state to Ethereum every roughly 8 hours. And in Starknet, every time, only one operator in the network executes every transaction. And alongside the processing of this transaction, the miner would generate what's called a zero knowledge proof, or a validity proof that attests to the integrity or to the validity of the processing of that transaction. So basically what it means is that instead of having all the operators in the network run all transactions at every point in time we have only one entity that runs each transaction.
00:06:54.346 - 00:08:06.390, Speaker D: And what propagates in the network is not the transaction itself, but rather a proof that shows that whoever processed that transaction did that with integrity. The underlying technology that allows all this magic to exist is zero knowledge proofs or zero knowledge technology, which has been an academic field for the past 20 years. And in the past three or four years we've started seeing implemented into operational systems like Starkx, which is sort of like the early days, more like enterprise solution developed by Starkware, and systems like Starknet, Zksync, Polygon, ZKVM. We have more and more systems come to production. So that's darknet. And one caveat. One important thing to mention here is that proving the execution of some computation is a very non trivial task.
00:08:06.390 - 00:09:07.270, Speaker D: And more particularly we had to create our own programming language that is ZK provable, that is Cairo. So at startware we developed a new programming language that we could then use our technologies to prove its execution. This language is called Cairo, and smart contracts that developers deploy to start have to be written in Cairo. And Cairo isuring complete, which basically means that you can use Cairo. It might be hard, might be a little frustrating at times, but you can use Cairo to write basically anything you want, including the code of the EVM itself, or implementing a C or C compiler or a JavaScript or a Python interpreter. So Cairo is an underlying layer that allows everything built on top of it to be provable. So that's what we use in Starknet today.
00:09:07.270 - 00:10:01.974, Speaker D: But I think that in the next couple of minutes and isa my team are going to step in and talk a little bit about warp and how warp allows running solidity code on. So that's about Starknet. And the last thing I wanted to mention for the intro is maybe say a couple of words about the state of Starknet today. So Starknet has been on Mainet for a little over a year now, since November of last year, like November 21. Our biggest effort right now is two biggest efforts are one, increasing or improving the performance of the network. In other words, allowing more transactions and higher TPS and cheaper fees. And alongside that we do a lot of work in the area of decentralization and governance.
00:10:01.974 - 00:10:41.658, Speaker D: So our plan for the next six to twelve months is to start operating Starknet as a truly decentralized network. We have two main components in the network. One is the sequencer and the other one is approver. So first we're going to decentralize the sequencer. In other words, allow other entities than starkware to operate their own sequencer and participate in processing transactions. And another exciting thing that happened recently is the formation of the Starkit foundation. So that's another entity that spun out of it, actually didn't spin out of starkware.
00:10:41.658 - 00:11:01.182, Speaker D: It was created as an independent entity that now takes over the majority of tokens, and that's going to be the entity that operates the network as it gets decentralized. So that was, I think, a little over five minutes on Starknet and where we are today.
00:11:01.316 - 00:11:07.070, Speaker A: That was perfect. Thank you so much. And now we'll toss it over to Devin.
00:11:08.850 - 00:11:19.890, Speaker C: I'm actually going to give an additional pass off to York, who leads our Starnet development team at Nethermine. I think it'll give a little more context of the proposal.
00:11:20.870 - 00:12:28.678, Speaker B: Thank you, Devin. Yeah, so I work on a lot of the Starknet technology that we have in Nethermind. Nethermind has partnered very closely with Starkware over the years and has taken on a number of large projects in the ecosystem, and is heavily invested in the growth of Starknet because we believe it is one of the best ways, I think, if not the best way, to scale Ethereum at the. So in order to do this, we started with the block explorer Voyager, and then we quickly moved on to writing the warp compiler, which I will explain in a moment. And we are now also working on a full node implementation for the Starknote network. This is going to be quite an interesting space over the next couple of months as the network heads towards its own form of decentralization to help with some of the other security properties that Starknet wishes to provide. Now also on the call is Swapnil, who is like the technical lead on all of these Starknet projects as well, and who will be hopping in and out when it comes to doing technical explanation of warp.
00:12:28.678 - 00:13:33.470, Speaker B: Now, what warp brings to the ecosystem is a compiler. It compiles solidity code and lets you execute it on the Starknet network. This means that every project that's been written for an EVM thing other than Viper projects, but everything that has solidity compatible or written in solidity can be run on Starknet, and we've basically done this by transpiling it over to Cairo. But it is not a very trivial process because Cairo has some very particular semantics or design choices which allow the zero knowledge proofs for them to be generated efficiently. It also means you can write very efficient descriptions of your program which have lower performance overheads than otherwise. So for example, Encircle has a write once memory model, which means that every memory cell you can only assign to once and you cannot change it. This is amazing.
00:13:33.470 - 00:14:23.710, Speaker B: If you want to write efficient programs and actually is what is used by the zero knowledge proof system to generate the proofs. But in solidity where you can have pointers and references, this is a nightmare. So we needed to implement our own translation of this abstraction of having immutable memory. We actually use memory dict in Cairo if you want to get into the details, but we need to basically hide away all these details and make this literally just work perfectly. Also, contract to contract calling needs to be mapped over to Cairo's version of contract to contract calling. And certain semantics, like sending value, like sending east directly, need to either be changed or removed depending on what the use case is. You can write really efficient programs in Cairo, and most native Cairo is very well written.
00:14:23.710 - 00:15:13.774, Speaker B: Warp adds a certain amount of overhead because of this semantic change, and that's one of the things that you pay instead of writing it by hand. This is quite normal in transportation and compilation circumstances, and what you gain here is the ability to move very quickly between targets. So with warp coming recently into full scale, covering all of the features required, now all of the solidity projects that are out there can transition to Starknet, which is major. That's a huge deal, and I'm very proud to be part of that project. I think that kind of describes what Warp does. This team at Nethermind has been working hard on getting uniswap v three working. We made a post about it a while ago.
00:15:13.774 - 00:15:39.750, Speaker B: It's running on testnets. We've also been building infrastructure around it which tests or allows all of the hard hat tests and all of the tests that work in solidity to work against the startnet network to show that the semantics of the transport program are the same. I think that's enough of a description. So I might leave Devantek over here to explain where we want to go with this and what this means for uniswap.
00:15:42.170 - 00:15:43.030, Speaker C: Sweet.
00:15:45.530 - 00:15:46.038, Speaker B: York.
00:15:46.124 - 00:15:47.720, Speaker C: You want to mute yourself really quick.
00:15:48.330 - 00:15:49.080, Speaker A: Great.
00:15:50.730 - 00:17:31.850, Speaker C: Yeah, so I mean, kind of just like recapping where we're left off at is a place where Starknet uses Cairo VM to be able to generate zero knowledge proofs to prove things about state transitions. It's a very difficult problem to do zero knowledge circuit computation on a stack based vm, which the EVM is stack based. Other ZK vms of different types have different ways of going about this, but basically the way that Starknet is solving this or one of the ways is building a transpiler on top of the existing Cairo virtual machine, which is what Nethermind's done with warp. And really what we want to underline here is that with any transpolation process or any process of running code in its non native VM, you lose some of the security guarantees that you had when running the code on the original Vm. So Uniswap V three has been battle tested, deployed on EVM execution in an EVM execution environment, been battle tested with real value for years now. So we can be sure that that code works and there aren't issues when we're transpiling into another language or running it on a different vm with alternative bytecodes. If there's some translation going on, no matter what level of abstraction that happens at, we no longer can say that this code has been battle tested for years in the exact state that it is because there's been some translation that's occurred.
00:17:31.850 - 00:18:41.870, Speaker C: So basically, kind of what we need to figure out with this proposal is when we're deploying Uniswap on something that's not EVM native, what kind of procedures do we need to put in place to make the community feel comfortable that this deployment is valid, this deployment is safe. This deployment has the same security benefits as Uniswap V three does on main net. So kind of what we're proposing mostly revolves around a liquidity cap on the Starknet deployment as well as a set of permission pools. So that would probably look like an initial period where after launching on testnet, after launching on testnet with a front end. And there's some interesting things where Nethermind will have to develop a custom front end to handle all of the calls for starknet functions. Potentially the, I think Uniswap Labs front end will support this eventually. But at least for our testnet deployment, we'll need to develop something custom to support all the Starknet calls, Stark RPC, all that account abstraction wallets.
00:18:41.870 - 00:20:03.590, Speaker C: And then within that deployment we're suggesting that we have a liquidity cap and a set of permission pools that governance would be able to control. So basically we would say, hey, we're going to deploy, we're only going to allow an initial ETH USDC pool with say a liquidity cap of basically hand the keys over to governance, Uniswap layer one governance, and say, if you want to increase this liquidity cap, if you want to add more pools, or remove the liquidity cap and allow permissionless listing of pools only Ethereum l one Uniswap governance would have the power to do so. So this is just a suggestion on our end and kind of what we're looking to get feedback on. If this makes the community comfortable, as well as kind of what metrics the community would be looking for to potentially raise that liquidity cap or add more pools. These would probably look at metrics of how long the deployment has happened, how many swaps it's handled. Potentially the market cap of other assets on Starknet could be a metric for adding new pools during this kind of probationary period. Yeah, so these are kind of what the current considerations are for the proposal.
00:20:03.590 - 00:21:06.320, Speaker C: Just to be kind of clear on the timeline that we're looking at, we're looking to have a deployed front end available before going to vote, ideally, and this would allow. So we've already transpiled the Uniswap v three core contracts, which is enough to kind of get going with swaps and adding liquidity and whatnot. But we haven't gotten to periphery and router yet, those currently being worked on. And Swapnop can kind of weigh in on the progress on that side. But we're looking to have a front end that can support the core functionality of Uniswap on Testnet. So users can kind of play around it with it beforehand, get some use out of account abstraction wallets, and see kind of like how that interplays with the testnet phase before going to vote. Yeah, maybe Swapno, you can weigh a little bit in on kind of what goes into creating a front end to support this deployment and why that's also kind of a difficult process.
00:21:07.250 - 00:21:42.310, Speaker E: Yeah, thanks, seven. That warp transpires solidity to Cairo. WAP also changes the ABI set a bit because the ABI from solidity is not compatible with the ABF. Cairo. Mainly the types change because the only primitive type that's really available on Cairo right now is felt, which is a field element. It has some different properties about how wide it is compared to a UN 56, and how we pack maybe a unit, eight into it and 24 into it. So we do some translation of all those types to felt types.
00:21:42.310 - 00:22:16.370, Speaker E: We also change the function names because chiro doesn't allow function overloading. So we need to make the function names unique. So we append the study selector. So these kind of changes make it hard to just make the Kyle contracts callable with the same AVI. So that transition needs to be done by the front end. Apart from that, the transaction type and the transaction structure on start is also different from EVM chains. So our front end needs to make sure that we are using the startnet equivalent of transactions, equivalent of work transactions and call transactions to do its actions.
00:22:16.370 - 00:23:01.806, Speaker E: And those are the major concerns we have of writing front end. So right now, how we're tackling this right now is on two fronts. In general, we want to improve the situation for startnet facility contracts on Startnet. So we are overriding some functionality of ethersjs to make it seamlessly work with startnet contracts for the user experience. You will provide all your solidity APIs and solidity inputs, and our overrides on ethersjs will do the automatic translation so that you don't have to as a user or the developers don't have to care what they're actually working with. For our first initial MVP of Uniswap, we are handwriting a front end which will do explicitly the calls to Startnet. And it won't use our ethersjs override library.
00:23:01.806 - 00:23:21.660, Speaker E: It will just use the equivalent of ethersjs called Startnet js and just do the manual calls to start net equivalents. We will do some ease of life things like translate through the inputs to chiro inputs so that the user doesn't have to care what the input should look like. But that's how we're detecting the issue for now.
00:23:24.590 - 00:23:42.990, Speaker C: Devin Sweet, thanks. Wap. No, yeah, I think there's probably like we could go on forever just kind of talking about where we're at in production and so on, but I'd probably at this point want to at least open up the floor to questions. Maybe we can move to that kind of style format.
00:23:44.530 - 00:24:44.210, Speaker A: Yeah, that would be perfect. Thank you so much for telling us all about the deployment, where you guys are at, what's next? Really excited to see this come to life, especially with the growing Starbucks ecosystem. Maybe this is a bit spicy to start, but really curious about the risk area here. I think in terms of having this done, in terms of actually getting this deployed, I think there's a lot of questions the community has about what their risk tolerance is for getting the deployment. It seems like a lot of this stuff is still in flux and there's a lot of open questions around what could happen, what could go wrong. And obviously like the upside here is tremendous. So thinking through what are potential downsides, what are some things that we should be looking out for, and are there ways for the community to step in to help? And what have you guys sort of considered, and when you think about the risk of deploying v three on Starknet?
00:24:50.010 - 00:25:47.720, Speaker C: Yeah, I think one of the biggest risk areas, which I kind of covered earlier, is just during the transpolation process. It's really hard to make guarantees that, well, you can't make guarantees that the code 100% is exactly the same and will always function exactly the same as the original deployment. While you can kind of be very certain of these things, actually proving it kind of, there's always some assumptions that you're going to have to make, which, because we can't make statements like that, is why we're kind of proposing this kind of probationary period for a starknet uniswap deployment, which is also something that the community should think about, because now we're talking about a permission deployment of Uniswap, which I don't believe has been done before. And potentially that does get into some things about ethos and whatnot. York, do you have anything to add?
00:25:50.970 - 00:26:07.760, Speaker E: Sorry, on the community front, I think what, once we deploy to a testnet, we would like the community to come and try to break uniswap and basically pawn us so that we can figure out what bugs warp introduces in its translation process and how should we go about fixing them.
00:26:11.250 - 00:27:00.894, Speaker B: Yeah, I just wanted to add a little bit more context on why this is a difficult problem here. So when you're trying to talk about the trust of the system, there are a number of different aspects you need to look at. You need to look at is your virtual machine correct? Are the starknet proof systems correct? Now these things have been heavily tested and audited. Then the last question that we have is, is the transpolation of the code correct? And compilers are actually quite large and complicated systems, and you'll notice that when they are released, it takes a few years before they get to the levels of audit. Now warp is a little bit simpler, like the source and target is not. Like we're not targeting some really weird unitary LvM semantics. Like, the translations are simpler in my opinion, but it is still an incredibly complicated system.
00:27:00.894 - 00:27:50.560, Speaker B: So what we have looked at is we've looked at auditing subsets of the compiler, and that is a process that we started a while ago checking. Like have we done the memory translation correctly, for example? And while we can do some of this, doing this at a full scale right now is too difficult and actually just straight up much too expensive. So the compiler needs to build up a little bit of a trust. The way we've done this is we've done lots and lots of small projects. Uniswap is not the first protocol that we've transpiled it's also not the first protocol that we've tested. Right. There are a lot of internal projects that we've done this with and now we are stepping out into the world and we're saying we're ready to try and see this in action, but we need to go very slowly is basically the statement that we're making.
00:27:50.560 - 00:28:26.620, Speaker B: So the question is what does the community find comfortable and how do we slowly increase the capabilities and availability that warp will provide? Yeah, this is not uncommon. I actually encourage everyone to take a look at the Uniswap output and have a look at how it works. If you're very technically inclined and do some audit, it's somewhat readable and if you have any questions about it, just reach out to us. We'd be very keen to answer anything else.
00:28:27.230 - 00:29:12.140, Speaker A: That's amazing. I love the idea of just building out in the open and sort of seeing how people can as soft, no, put it, just break the type of deployment. I think it's really cool that you guys are approaching in this manner because it is difficult. Right. I mean, I think this really sets the precedent for many different things to come. And I think Devin, you were talking about the cap know, we look at sort of the Ave cap for different phasing on know, how do you think about what is the best way to approach caps for Uniswap? And what should we as a community be considering when we use the testnet deployment? Or how do we think about when do we feel ready that this is good to go?
00:29:15.130 - 00:30:21.260, Speaker C: Yeah, that's a really deep question. I think that just kind of maybe to give some context into both the project moving Ave onto Starknet and the project moving maker Dai onto Starknet. So Ave has completed a phase one which was basically just an. A token bridge. So they allow a tokens to be held and potentially traded on dexes and whatnot on Starknet. So that a token deployment I think had a cap of just kind of like an initial Aave community releasing something that could be tested out with enough capital where it was reasonable to say that it was tested but not too much that if things went wrong, there would be a huge loss of funds. The Starknet die bridge had an initial cap of 200,000 and I believe recently it was raised to 1 million.
00:30:21.260 - 00:31:43.618, Speaker C: Yeah, if you think about it, adding vaults on maker is a lot less code, a lot simpler process than launching all of v three on Starknet. And that's why we've kind of, at least initially, kind of proposed a somewhat smaller number because the code base is large. It's not simple deployment of a few contracts that we can be sure the functionality, we can pretty much tell what the functionality does just by looking at the code. Yeah. So I think that those are just kind of like context for why we suggested the initial liquidity cap of think there needs to be a little more research done into whether that's enough comparatively for a Dex that was just kind of pulled off of what Ave had done for their initial phase one. So definitely looking for feedback on that number, whether the community feels comfortable with that amount of funds being allowed to be locked into a starknet deployment. And again, this deployment would be hosted by, would be accessible on testnet at first, and that would be happening before any of this comes to vote.
00:31:43.618 - 00:32:28.980, Speaker C: So I think even just that initial testnet period, even though it's not actual value being traded, the community will be able to kind of go out and try to break these contracts, which I think is a really good initial first phase. And then introducing a small amount of capital into that I think increases the incentives and makes it more of a, hey, try to break these contracts. There's actually value stored in them. Yeah. So I think that thinking of this process slowly, as a lot of other communities have opted to, is probably the way to go. And that's what we're going to continue proposing and looking feedback into, I guess, exact numbers.
00:32:30.790 - 00:32:31.250, Speaker B: Awesome.
00:32:31.320 - 00:33:07.060, Speaker A: Yeah, I think this is the right approach. And I guess in thinking through involving the community here, are you thinking, and not to put you on the spot or anything, are you thinking about bug bounties? You're thinking about doing more of a community based, sort of like a c four spirit? Or are you thinking, just come in, try it, break it, and just, let's build this together. What's on your guys'mind in terms of community engagement? Is it more formalized or is it more of like an unstructured, please come help. This is better for all of us.
00:33:11.770 - 00:34:05.030, Speaker C: At least. With my experience with both neither mind and Starknet community, I think things have worked out pretty well for us in relatively unstructured like, hey, come out, we're all building over here. We do have a pretty large community kind of behind us in the starknet ecosystem that tends to be pretty technical and ready to get their hands dirty just at the drop of a hat. But that being said, potentially that's not how the Uniswap community traditionally operates. And we need to explore more of a more formalized bug bounty program. I can say that that's not initially where we're leaning towards because that extremely raises the cost of this deployment, having to pair it with a bug bounty program with capital that nevermind, doesn't exactly have to put up immediately. So that would kind of slow the timeline and add a lot more logistics into this deployment.
00:34:05.030 - 00:34:21.340, Speaker C: Yeah, I think kind of the immediate first step would definitely be a testnet deployment with a front end operable. Again, really, the issue with the testnet deployment is having a front end available for people to use.
00:34:24.270 - 00:35:19.410, Speaker A: Yeah, that makes a lot of sense. I think we've seen on many different sides of this, how engaged, how active and sort of how readily available the Unisoft community, the starkware community, especially looking at how all these open sort of systems are, how readily available they are to kind of jump in and sort of just contribute. So I think this is great. I'm really excited for this, to kind of see how the community kind of jumps in and takes action here. So we have about 20 minutes left. I want to open the floor up for questions. Does anyone in the audience want to ask a question? Maybe not.
00:35:19.410 - 00:36:09.120, Speaker A: Okay, well, the opportunity is there. If anyone in the audience wants to raise their hand, we have more questions. We can kind of keep jumping in. I'd love to think about sort of the trade offs between how we are going about building this with warp and kind of looking comparatively to a Cairo refactor. I'm very curious how much time sort of is here when we think about, or when we're considering sort of the trade offs for a rewrite. And then obviously warp is, as a transpiler is significantly faster.
00:36:11.940 - 00:36:40.940, Speaker B: I'd be happy to talk about this too. Yeah, so this is something we've been thinking about a lot. Right. Because the trade offs are significant on both sides. With warp you get speed and convenience and you know that all the unisoft features are going to be implemented and are ready to go. And I don't think we've said this publicly, but we do actually have a testnet deployment of uniswap v three in full on the live testnet. So if you want to go digging through some old contracts, you might be able to find it somewhere.
00:36:40.940 - 00:37:34.830, Speaker B: So in that sense, with Warp we could pull the trigger in a couple of days, but we won't because we still need to do the front end and we need to make sure that everything is ready and that we've got the changes required. Been able to do liquidity caps, which we would also like to try and test in testnet itself and get the bridging mechanism correct. But with warp. We could technically deploy it today on main net and say, go ahead and use this. There's no problem. Writing it by hand does give some very interesting benefits. Well, the main drawback is that it would take roughly maybe two to three months of a full team to write out the whole protocol and then also factor in all the changes required to do like bridging of the governance and so on.
00:37:34.830 - 00:38:46.500, Speaker B: But the output would be auditable in a more classic sense, where you can just give it to an audit team or a couple of them, and then they can all go through the code and come to some consensus on whether or not they think that it's trustworthy. Either way. I think the really important thing to note here is that the Starknet ecosystem is an incredible opportunity for Uniswap, and that whichever path this project takes, I think Uniswap should seriously consider trying to get onto Starknet. Right. So the question that we're trying to settle now is, do we trust the warp way? Can we do this? Because this also sets the foundation for a lot of other things to come over to Starknet. That Uniswap would also benefit from having like much more liquidity all of the surrounding ecosystem and hats that people with Uniswap would be interacting with. And if we manage to formalize this here and it works, then it's a major win for Uniswap, it's a major win for Warp, huge win for Starknet, and a huge win for both ecosystems overall.
00:38:46.500 - 00:39:20.940, Speaker B: But if it doesn't, then I think it's still incredibly valuable to Uniswap to be deployed. So the trade offs are warp is faster, but is now being slowed down because it's one of the first times that Uniswap has faced this problem and that Starknet itself has faced this problem. Or we can do the rewrite, but that is going to be quite costly because it requires quite a large upfront capital investment in developer. So those are the tradeoffs.
00:39:24.340 - 00:39:32.964, Speaker A: Thanks, Jork. So we have a bunch of speakers up now. Jack, I see you first. Do you want to ask your question?
00:39:33.162 - 00:39:47.384, Speaker C: Yeah, sure, everyone. So I'd love to have you guys talk a bit about the difference between a solution like warp as opposed to a Zke EVM, like something that Polygon is working on.
00:39:47.422 - 00:39:47.864, Speaker B: Right.
00:39:47.982 - 00:39:52.970, Speaker C: Like what's the primary technical differences and what are the trade offs being made there?
00:39:58.080 - 00:40:52.350, Speaker B: Right. Well, one of the first things you need to note is that Starkware and Starknet were one of the first to reach mainnet because they decided to not try and reach Zkevm compatibility and build their own language, which was honestly think was a very smart move at the time. The main thing to consider about ZkeVM is that you pay over quite a large overhead trying to model the EVM system in the ZK proofs, which Cairo doesn't have. Right. So Wharf basically fills in this role. It closes the gap between ZkeVM and Starknet. One of the things to consider here is that, sorry, I'm kind of fumbling here, but Swaplam, can you take over?
00:40:53.680 - 00:42:05.690, Speaker E: Yeah, I think it's consideration of which level of abstraction do you choose to implement the EVM compatibility in the DKE EVM model, you choose to implement it at the opcode layer. The trade off there is that all the programs that run on your network now will have this overhead of this compatibility that you pay of running EVM in a ZK proof system, whereas in starter what you can do is have some systems that run natively in the language Kylo, so you will have most optimal performance. And some systems running in solidity or compile solidity, which have some overhead. So it gives you more choice in what tradeoffs you want to make in some sense. An analogy would be is now that your assembly for the language, assembly language has some overhead across all instructions, whereas in satnet you have some more efficient assembly that you can reach out to if you want to implement some really gas efficient solutions, but also use solidity. If the general gas savings by Startnet are good enough for you.
00:42:07.580 - 00:43:06.810, Speaker F: I can also try adding to that that the proposal is mainly about deploying Uniswap to Startnet, which is already running, which already has TVL, and it has some exciting new features coming up. The language itself is also evolving, and Starknet will be running on Cairo. And the interesting aspect of this proposal is how do we port this existing system to Starknet and make it work? Well, not necessarily. Should we be porting it to other ZKE EVM networks makes sense.
00:43:08.540 - 00:43:58.476, Speaker D: I also want to add this, that basically all other ZK chains have some underlying middle layer between. Even like EVM equivalent or EVM compatible chains. They don't directly prove EVM bytecode, but they have some middle layer that the EVM bytecode is translated into. And that middle layer is being proven. In our case, that middle layer you can think of, that middle layer is Cairo. And it's more of like a strategic decision that we've made to make Cairo accessible to the general public and to start having developers use Cairo directly. I think that the benefit of this is that we were able to launch relatively early.
00:43:58.476 - 00:44:51.550, Speaker D: And as we mentioned before, we already own mainnet for a little over a year. And there's another product called Starkx which is on mainnet for almost two and a half years, but also uses. So it helped us reach a situation where Cairo is battle tested and now it's ready for projects to do things like maybe implementing an EVM with Cairo. So we actually have a project, a community project that was not initiated or supported by Starkware called Kakarot, and that's an EVM implementation in Cairo. So once Kakarot is deployed on Starknet, you may argue that Starknet itself is not a ZKe EVM, but there is a ZK EVM running on Starknet. That's the way I like looking at it.
00:44:54.550 - 00:45:00.918, Speaker C: Okay, these are all great answers and appreciate you guys taking the time to answer my question. It's good to learn more about sort.
00:45:00.924 - 00:45:02.502, Speaker B: Of the differences in the ZK space.
00:45:02.556 - 00:45:10.710, Speaker A: Thank you guys. Thanks, Jack. And next, big sky.
00:45:13.530 - 00:45:14.278, Speaker B: Hey everybody.
00:45:14.364 - 00:45:41.060, Speaker G: Awesome, awesome panel. So super, super helpful. I would love to hear from kind of like the Starknet team, maybe the Nethermind team. Like best case scenario, say it gets deployed, it's live, basically all the base case is proven, we're good to go. What does this look like six months from now, a year from now? What are we going to be able to implement on v three that is currently not possible on Ethereum main net?
00:45:47.590 - 00:47:08.800, Speaker C: I maybe don't want to be the only one to answer this question, but definitely want to weigh in. Just some quick initial thoughts or like Starknet, Cairo VM already has native account abstraction on it and two pretty popular account abstraction wallets. I imagine that the tooling could go as far as I'm using my face id to make uniswap transactions. I think that kind of alone in its existing form already adds some huge benefit to uniswap. Just right off the bat, getting access to that account abstraction tooling, obviously with kind of the super efficient computation possible in Cairo, I think that you one have really cheap gas costs for swaps. There's probably some really highly computationally efficient oracle computations you can do as well on top of V three. Yeah, and I guess on top of that, when you're talking about lowered gas costs for v three, you're also talking about lower gas costs for liquidity vault managers on top of v three and all of these existing tooling around it, which potentially does enable some novel applications as well.
00:47:11.810 - 00:48:10.110, Speaker F: Thanks Devin. I'll chime in on that as well. Some features that are perhaps also very interesting to explore is basically liquidity efficiency. So unlike optimistic rollups where it can take a week or two weeks for funds to move between chains. So here, because it is a validity roll up, so once the proof reaches l one, the state is guaranteed to be correct and finalized. So that allows a lot faster movement of funds so we can think about how liquidity providers can utilize it. Now to think, where do I deploy my liquidity cross chain? And not necessarily just within the same protocol, on the same chain and between ticks.
00:48:10.110 - 00:48:17.090, Speaker F: So that's another aspect that could open up new frontiers to explore.
00:48:22.310 - 00:49:09.940, Speaker B: Yeah, something Devon already mentioned, which is that the gas costs are significantly reduced. And there's two ways of thinking about gas costs. You can either say everything is cheaper for everybody, or you can say you can now do more at the same cost. Right. These are two perspectives on the same outcome. So Uniswap will be able to integrate with a bunch of other protocols that are doing step changes in what is actually possible with the amount of compute that they have. So I don't have concrete examples for this, but I think being there and realizing that there is now an aggregator that does a crazy amount of stuff across lots of different pools might be a very powerful position for Uniswap to be.
00:49:16.810 - 00:49:20.840, Speaker A: Thanks everybody. Thanks, guy. Do you feel good?
00:49:22.670 - 00:49:29.260, Speaker G: Yeah, I'm getting more and more hyped from every answer. It's going to be awesome.
00:49:30.110 - 00:49:41.950, Speaker A: Yeah, this is going to be extremely, extremely impactful, moving the space forward, both on many levels. I think the last person we have up is Din.
00:49:44.290 - 00:49:57.166, Speaker H: Hi, can you clarify on you say that there's effort involved in deploying the front end codes? I thought the front end for the same on different chains.
00:49:57.198 - 00:49:57.394, Speaker B: Right.
00:49:57.432 - 00:50:20.970, Speaker H: So there should be almost no change. And secondly, if I'm already have my USDC on DyDX on Stocknet, can I just move it across to uniswap straight away when you're alive, or do I have to transfer back to l one first and then do a transfer again to Stucknet for Uniswap?
00:50:21.550 - 00:51:09.034, Speaker B: Yeah, that's a great question. So with the front end, there are a few unsolved problems, right? So we can have a front end, which perfectly works with Starnet that expects the Ethereum semantics. But we need to solve certain of the translation problems that are happening now. We've already solved one in part, which is the ethics JS library, which says, like if you call a solidity API, it automatically translates to the Cairo one. But the way that the front end works with the various different accounts is different because the API between accounts that are deployed, the API with wallets is different on Ethereum than Starknet. So we need to put in more and more translation here. And this is a process that we want to work on as an ecosystem as a whole.
00:51:09.034 - 00:51:48.166, Speaker B: And we need to talk to all the different partners of Starknet and figure out how do we get perfect solidity Ethereum compatibility. And this is a much longer conversation than what we are expecting for the Uniswap deployment. Right. It will probably be the case that in the future, all the technology that we build for this we will use to just remove our version of Unisoft front end and use the native unisoft front end with minimal changes. And that is the place that we want to go. But I think trying to reach that and also reach this deployment is going to be too much at once. Right.
00:51:48.166 - 00:52:37.954, Speaker B: So our proposed solution is to write a front end with all of the features, basically forking the front end and then changing out a lot of the parts to actually interact with Starknet directly. And doing this by hand with one or two developers who are interested in working in this space, which I think is definitely how we're going to get to a unisoft front end the fastest and in the most stable manner than trying to solve all the tooling problems that relate to this. It's not just the ethos JS plugin. There are more, and we need to tackle each one systematically in a way that actually works for the ecosystem. So that's a conversation that we are currently having with Starkware, and it's a conversation that we will be taking off with wallet providers and so on in the future. But that's a work in progress. To answer your second question about your Starkx funds, Starkx is not on Starknet.
00:52:37.954 - 00:52:54.640, Speaker B: It's a different system that predates the Starknet technology. So you will have to exit from Starkx onto l one and then l one over to Starknet. If I'm right on that. If any of the Starkware guys want to talk about whether or not you build bridges in this area, I have no idea.
00:53:01.410 - 00:53:20.230, Speaker D: The long term plan as I know it for Starkx is perhaps we'd want to deploy Starkx as a layer three on top of Starknet. This would make bridging of funds much easier. But that's, I think, more of like, at this stage, it's more of like an experimental idea than a concrete suggestion.
00:53:26.960 - 00:53:28.350, Speaker B: Okay, thanks, guys.
00:53:30.720 - 00:53:44.672, Speaker A: Amazing. Thank you everybody, for all these questions. We have about two minutes left. Maybe one last minute question. If not, we can wrap up anyone? All right, one question.
00:53:44.726 - 00:53:49.750, Speaker G: Where's the best place for people to get involved if they want to learn more and help out?
00:53:51.640 - 00:53:53.220, Speaker A: Fantastic segue.
00:53:55.160 - 00:54:23.976, Speaker E: If you want to help out with a compiler, then head on to Netamile's GitHub repo under warp. That's where the activity is happening. There's also the repo called Unistark under the Nethermind GitHub organization, which is where the reputation of the Unistark, the warped version of Uniswap swap is. And there's also a tool that we're developing hard at Warp, which is also under the Nethermine organization, which is where we're translating basically Ethereum tools to work with Darknet.
00:54:24.168 - 00:54:36.610, Speaker B: Yeah, you can also reach out to us on the Nethermind discord or on the Starkware discord. We have representations and tools on both, and I recommend that you come and talk to us. And also dms are open.
00:54:41.000 - 00:54:45.590, Speaker D: And also there's the community forum. So the proposal went up on the Uniswap community?
00:54:48.440 - 00:55:12.860, Speaker A: Yes, yes. I was going to plug the governance. Please, please vote and ask questions. As Rick and everyone else mentioned, discord is great. If you want to reach out to the minersarkware teams, also open issues on GitHub. Please take a look if interested. And yeah, governance forums will always be open and always be available for discussion.
00:55:12.860 - 00:55:23.812, Speaker A: Any closing statements from the Nethermind and Starkware teams? All right, Devin.
00:55:23.876 - 00:55:58.230, Speaker C: Yeah, just, just quickly want to thank everyone for coming out. Really, again, we're kind of doing this out in the open. That's a lot of the ethos of both Starkware, neither mine, Starknet ecosystem. So we really appreciate any feedback on the community forum about kind of our plan for deployment. If you think a liquidity cap is not enough and we need to go harder on a bug bounty program, please express that we're open to all options. We want to do this in a way that both the Uniswap community and Starknet community feel satisfied. So again, just doing everything out in the open.
00:55:58.230 - 00:56:00.420, Speaker C: Please engage on the forum.
00:56:01.400 - 00:56:01.812, Speaker B: Yes.
00:56:01.866 - 00:56:22.650, Speaker A: Thank you all so much. The Unitswap community is extremely grateful. You all are on the task, and this is really going to be game changing for everyone involved. So really excited to see this moving forward. Thank you to all the speakers that joined us. Thank you for everyone who listened to us, and keep an eye out on Twitter Discord and the governance forums for next steps. Thanks, everybody.
00:56:24.940 - 00:56:25.510, Speaker D: Thank you, guys.
