00:00:01.930 - 00:01:03.762, Speaker A: Okay, I guess we can start. So hello everyone. Let's do a Twitter space to talk about Madara and Starnet app chains. I'm very happy because I have a very great lineup of speakers, so I will let them introduce themselves briefly. So I'm Abdel, I'm leading the exploration team in starware. Basically the goal is to create some exciting open source projects to push the frontier of the technology of Starknet and Cairo and also to onboard a lot of contributors to those projects. And at some point those projects can become fully autonomous and can become actual companies building products like Kakarot, for example.
00:01:03.762 - 00:01:22.520, Speaker A: And we have clement there, who is a co founder of Kakarot. And yeah, one of the recent projects that we started in the exploration team is Madara. And we will talk about Madara today. Who want to go next?
00:01:27.530 - 00:01:29.682, Speaker B: I can go next if you want.
00:01:29.836 - 00:01:30.700, Speaker A: Go ahead.
00:01:31.870 - 00:02:16.674, Speaker B: So you mentioned Kakarot. So thanks a lot for inviting me to this space. I'm Clemore, co founder of Kakarot right now. I've met Abdel and started ecosystem more than a year ago, and so started to build community project Kakarot and to lead it in the meantime, also started to work on Madara when the project kick started around maybe January or February. I don't. I don't remember exactly. And so yes, pleased to be here to talk about Madara, which is something like really great for the whole ecosystem and something that we plan to use definitely in production for Kakarot and for those who don't know, maybe just Kakarot.
00:02:16.674 - 00:02:34.830, Speaker B: So right now, ZK EVM written in Cairo and short term should be an interoperability layer for the stacked ecosystem to enable people to use EVM tools and wallets and stuff. And long term, just going down to being a type one EVM, hopefully.
00:02:35.170 - 00:02:38.480, Speaker A: Nice. Feder, you want to go next?
00:02:39.330 - 00:03:14.410, Speaker C: Yeah, sure. So I'm Feder, I'm from Lambda class. We are collaborating with Oak in the project. Myself, I'm a newbie in the substrate world. I'm learning Abdel substrate me, pill me or something like that. The last few months, I think it's a very good project, especially because of the big community that Abdel on the rest of the teams managed to gather around this so interesting project and I hope that it becomes one of the most successful ltrees in the market, I think has everything to be the leader.
00:03:14.990 - 00:03:38.180, Speaker A: Yeah, thank you, Fede. I really wanted to have you because not only you are contributing to Madara, but also you are building your own sequencer, et cetera. So it will be interesting to compare the different approaches and see the pros and cons of using a framework like subset versus building from scratch. So I really wanted to have you. So thank you for being there. Matthias, you want to go next?
00:03:39.270 - 00:03:39.730, Speaker D: Sure.
00:03:39.800 - 00:04:21.950, Speaker E: So, hello, everyone. I'm Matthias. I'm the co founder of Pragma, which is a decentralized oracle built on Fortnet. Also was there at the very beginning of Madara, and basically in the context of pragma. We recently announced Pragma X, which will basically be the next iteration of the Oracle built as a sparknet upchain. Hence why I've been mostly spending my time building on Madara for the past few months and overall very excited about the whole interoperability between all the Madara chains and starknet app chains, and going to solve a lot of problems, I think, in the ecosystem and creating new unique use cases.
00:04:23.910 - 00:04:27.570, Speaker A: Thank you. And finally, we have Terrence.
00:04:29.910 - 00:05:10.640, Speaker D: Hey, everyone. Thank you for having me. I'm Terrence. I'm a co founder of cartridge, and we're building games, tooling and infrastructure in the stocknet ecosystem. And we're using Madara to host game specific roll ups for games that have different requirements from the layers that they're settling on, mostly around latency and throughput, and don't necessarily need access to the shared context of a shared execution layer. And we have actually a game that's live today on the Rinnegan Madara instance that you can check out and play, and the UX and the transaction confirmation times make it for a really great user experience.
00:05:11.250 - 00:05:43.942, Speaker A: Thank you, Terrence. So, yeah, let's go. So we'll talk about Madara, about NetApp chains and how you guys plan to use it for your different projects, and also talk a bit more about the technical architecture, et cetera. So, first of all, I will give a brief overview of what is Madara. So, Madara is a stacknet sequencer. So in validity roll up architecture, you have two main components. You have the sequencer and the proverb.
00:05:43.942 - 00:06:58.866, Speaker A: So the sequencer is responsible of taking transactions from the users and then creating the blocks and moving the chain and the state forward. And then asynchronously, you have the prover that is responsible of generating the validity proofs, and then you submit the proof to the settlement layer. So for stocknet, the settlement layer is ethereum. Okay, so Madara is a starknet sequencer. That means it's compatible with Starknet RPC specification, and it is capable of running Starknet smart contracts written in Cairo and the goal is to be able to run Starknet app chains using Madara. And those app chains can be either a layer two or layer three. And the goal really with Madara is to be really flexible and to give the possibility to appchains, to really configure everything and choose, for example, the data availability layer, stuff like that.
00:06:58.866 - 00:07:22.780, Speaker A: We'll go into more details later, but that's the main idea of Madara. So we decided to build it using substrate framework. So Matthias, you want to give an introduction about substrate and why we decided to use it for sure.
00:07:23.150 - 00:08:35.646, Speaker E: So at first, actually, if we go back to the history at Pragma, we really wanted to build our own custom starknet back in January, when basically there was nothing, there was not even anyone talking about Starknet stack or things like this. And we started by looking into the cosmos SDK and going from there, maybe going even from ten domain from scratch. But the fact it was, we're slowly witnessing the whole Starknet ecosystem moving to rust with the CarovM, all the starknet in rust, all the things our lambda class are building, but also starquare with the blockifier and all these. The biggest libraries and tools were built in rust, especially the VM. So rewriting everything go was just very hard to do and probably not optimal. And then talking with Abdel about substrate, we realized a substrate, what is a very powerful framework that is very generic. It's basically used in all the Polkadot ecosystem, by all the parachains, and it doesn't make any assumption about nothing, about the block time, about the hashing functions.
00:08:35.646 - 00:09:24.240, Speaker E: It gives you some consensus to play with, but technically you could implement your own consensus. And it's just a very powerful framework really leveraging rust, I think to its most, like there are a bunch of macros everywhere, and it also is decentralized out of the box. It comes with a bunch of tooling, like telemetry, just a bunch of tooling, because it's a very old piece of software, it has been there for the last six years, and that's something we can really leverage to just go way faster. That's why we managed to make something like almost pretty much usable in just a few months. I think in two, three months we already had something working. Pretty nice.
00:09:25.090 - 00:09:25.466, Speaker C: Yeah.
00:09:25.508 - 00:09:34.578, Speaker E: And that's just the main advantage. I don't know if you guys see other things I might have forgotten, but on my side, I think that's already a lot.
00:09:34.664 - 00:10:23.060, Speaker A: Okay, thank you. Yeah, that's a pretty nice overview. I think it's important to emphasize that first of all that, we have a very great diversity in terms of the stocknet stack in the ecosystem. We have many implementations of full nodes, many implementation of sequencers, et cetera. So that's very strong aspect of Starknet ecosystem. And we have some good examples here with the speakers, because Feder is building another sequencer and Terence is also building another sequencer for development purposes. So, Fede, Terence, can you please talk a bit about the sequencers you are building and the purposes of your sequencers and architectural choices you made?
00:10:24.550 - 00:10:26.562, Speaker C: Yeah, sure. It was called Kraken.
00:10:26.626 - 00:10:27.202, Speaker F: Originally.
00:10:27.266 - 00:11:02.174, Speaker C: We changed the name to Starnet Stack so that we have a common name for all the different implementations that are already existing in the Stratnet ecosystem. It's a very small project for now. You can check it on our GitHub. Actually, some of the things we're doing on that project, we want to port them for Madara. For example, yesterday we were playing with Kyronative. We already managed to have rc 20s working, and we're going to do some performance analysis. And also we have starnet in Ras becoming faster on the blockifier in the coming weeks.
00:11:02.174 - 00:11:39.786, Speaker C: We already have a few patches to make it really fast, and we're also doing the hashing that blockifier is not doing. So we want to port all this work to Madara. I think in some sense we have more flexibility, but at the same time we don't have all the features that Madara has. I think Madara is better to have something to go to the market in the short term for the l three s and maybe our sequencer more for the long run on the l two. So I don't see them as competitors, more like it's a cross polarization. How do you say cross polarization? I think of ideas from the two communities. For example, we can play more closely with Kyron native because we're working on that.
00:11:39.786 - 00:12:05.298, Speaker C: The two teams are really close, but we want to talk with Oak and you to see how we can already start doing some tests in Kyra native on top of Madeara. So from my point of view, there's going to be some shared ideas and some differences, and I'm eager to learn way more about all the things that substrate has that it's very difficult that we can implement them really quick. Like for example, what's her name? Abdel. The fact that you can do upgrades, software, right?
00:12:05.384 - 00:12:08.114, Speaker A: Yeah, forkless upgrades. Yeah, it's a very powerful feature.
00:12:08.162 - 00:12:08.760, Speaker C: Exactly.
00:12:09.210 - 00:12:11.000, Speaker A: We can talk about it later.
00:12:12.170 - 00:12:25.466, Speaker C: So those things, we won't be able to support them. Obviously, substrate has been development for many years. So I think we'll have different options for different types of features, and that's good for the network. It makes time more resilient on better.
00:12:25.648 - 00:12:37.194, Speaker A: Yeah, definitely agree on that. This diversity is a very strong advantage that we have because you can build different piece of software with different technologies, with different architecture to serve different purposes.
00:12:37.242 - 00:12:37.406, Speaker D: So.
00:12:37.428 - 00:12:40.240, Speaker A: Yeah, that's great. Terrence, you want to speak a bit about.
00:12:41.970 - 00:13:23.626, Speaker D: Yeah, sure. We started building katana as part of the dojo tool chain earlier this year. And initially, the goal of katana is to be a very simple sequencer. And right now it's focused more, like you mentioned, on development purposes. So it doesn't have to be concerned about things like consensus and additional complexity that incorporating like a peer to peer stack and stuff adds to the code base. So katana is super simple. I mean, it's basically Cairo Rs as a foundation wrapped with blockifyer, which introduced the startnet OS on top of the OS, and then we wrap it in an RPC provider.
00:13:23.626 - 00:14:42.840, Speaker D: It's designed to be modular, so you can easily extend it. We have a katana RPC namespace with some development rpCs. The plan going forward is to use katana for experimentation with different kinds of architectures for game specific rollups. So in a lot of cases, for game applications, you might be willing to give up censorship resistance and not care about decentralization and having the ability for multiple people to operate sequences and have consensus in order to have much lower latency or to have regional sequencers for specific games in a particular region. So katana, I think, will serve as kind of a foundation for experimentation with these kind of architectures because it's so much simpler, it's easy to play around with things. And then I think the pipeline will probably be like, would potentially be like, you can easily demonstrate, hack something together in katana and if it starts to make sense and you want to roll it out into a more mature ecosystem, or like a game actually starts to have the requirement that it needs to centralization and stuff like these features can be upstreamed into modera or the Starknet stack or other sequencers and incorporate there as well.
00:14:43.850 - 00:14:56.970, Speaker A: Okay, very cool. We have Mongata, who joined the Twitter space. Do you want to explain briefly what is mangata and how you plan to use Madara?
00:14:58.270 - 00:15:26.318, Speaker F: Yeah, sure. Thanks for letting me on stage. Yeah, sure. So we are mangata finance and we are building an interchange. So the primary problem that we are looking at is that centralized exchanges and decentralized exchanges have different advantages. And disadvantages. Most people want to trade on a decentralized exchange, but at the moment it's just not as convenient as a centralized exchange.
00:15:26.318 - 00:16:19.414, Speaker F: And when you look at cross chain native swaps, so if you're coming from the perspective of a regular trader that is trading on a centralized exchange, you just want to swap tokens. So you want to swap eth, dot, atom and so on and so on and so on. And currently it's not possible to do this on a regular decentralized exchange other than trading bridge tokens. But bridge tokens come up with a lot of problems. You see that even if a bridge is optimally implemented, it's still carrying limitations and you will always have to hold bridged tokens, which is just an issue. There are problems with both approaches, and what we want to do is build an interchange exchange that basically rolls up to several ecosystems at the same time. So we call this the multi roll up, and Madara is giving us this opportunity.
00:16:19.414 - 00:16:44.750, Speaker F: So natively we started developing on Polkadot. So you're building on a substrate based chain. So the step to Madara is ideal for us because now we can leverage the power of starkware and build a roll up that rolls up to ethereum or other evms and a polkadot, and in the future even other ecosystems at the same time.
00:16:44.900 - 00:17:18.140, Speaker A: Awesome. Thank you. Thank you very much. Before we dive into more details about smarter architecture, we said that we are using substrate. We briefly talked about the advantages. I want also to talk about the cons because obviously there is no silver bullet. And I want you, Fede, to discuss about that and why you thought that it would be interesting to explore another approach and why using substrate has some limitations, according to you.
00:17:21.980 - 00:18:08.996, Speaker C: Sorry, did you mention me? Yeah. So this is not only a comment from substrate. I think that software. Let me think how to explain it, but the general idea is that I believe that every time you choose a path, you're not choosing another one. In science and engineering, there's always some type of trade off. You cannot get bias and variance at the same time or momentum. In science, you always have to choose when you're choosing something like substrate or even tender or Cosmos SDK the good thing is that you get a lot of things for free, right? Because you have a lot of code that already does a lot of things for you.
00:18:08.996 - 00:18:43.536, Speaker C: The downside of it, it's exactly that, that you get a lot of things and it's difficult to debug it. That doesn't mean it's bad, it just means you need to know very well, the stack. And you need to understand exactly how each part of the system is working if you're going to be a user. That's not so important, right? Because you want to abstract things. You don't need to know how an engine works to be able to use a car. But however, if you are the person developing it, you need to understand very well, substrate or tendermint. And I'm sure Abdel, you do.
00:18:43.536 - 00:19:24.908, Speaker C: But for example, me, I don't. So whenever we create sync systems, I always congrats my team whenever they send prs that are deleting code rather than adding code. I come from OpenBSD on security background, so I like, in engineering terms, to remove code. I don't like adding too many lines of code. For example, the new vm we're doing, we're going to try to do it in 15,000 lines of code in a clear way without being too short. But the general message is like, I think that it's very good to have a complex solution or a solution that has many features, but also, I believe, minimalism on having things that are clear on, easy to debug, especially when there's something breaking in. Production is very important.
00:19:24.908 - 00:20:01.044, Speaker C: Actually, one of the few critics I have in Ethereum, I am a person that loves Ethereum. The only critic I have is that the stack got so complicated in the last two or three years. We're trying to do a consensus node right now under so many are called eips or different improvements on the protocol that it's very difficult in your head to have all the things. That's, for example, why I like socks. Stocks are simple in comparison to snarks in many ways. So the short message is like, I'm saying that substrate is really good. I had some pre, how do you say, prejudgments.
00:20:01.044 - 00:20:24.112, Speaker C: But I'm already saying that I was wrong on. Abdel showed me that it was in some ways better than Cosmos SDK. That said, I do like tendermint, but the only problem I have with these solutions is that you need to understand everything if you're going to modify them. That's not bad. It's just that it's a downside. Yeah, I hope it doesn't badly. I'm not using.
00:20:24.166 - 00:20:27.970, Speaker A: No, that's a very interesting take, and I totally agree with you.
00:20:30.820 - 00:20:48.840, Speaker B: I have a question for you, Feder, regarding this rebuilding versus using substrate. Do you think that not only in terms of security, but also maybe in terms of performance, we will in the long run lose against a customized, developed sequencer like if we stick to substrate.
00:20:50.460 - 00:21:35.140, Speaker C: To be honest I'm sure yes but speed is not the only important thing. For example one issue we have kyonative uses MLIR. We're already seeing that compiling that to wasm is going to be difficult. We're already doing some things. Probably we'll be able to compile it to WASM but maybe not be nostdd compatible for example that's a shortcut it gives you some benefits but it also blocks you in other ways. On the message is like if you have too many layers debugging that or making it faster is going to be more difficult but again I don't think it's bad actually I think it's good. We are going to have a solution working right now but in the long run I do believe that something that is way shorter, smaller and can be easily debugged and modified and seen is going to be faster.
00:21:36.840 - 00:21:41.360, Speaker B: Do you think that there should be like as we have spec for the RPC.
