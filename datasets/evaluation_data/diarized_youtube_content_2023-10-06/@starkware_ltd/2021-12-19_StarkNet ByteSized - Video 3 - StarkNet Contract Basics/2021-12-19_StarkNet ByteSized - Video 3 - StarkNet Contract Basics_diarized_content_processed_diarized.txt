00:00:04.380 - 00:00:49.580, Speaker A: To kick this series off, we begin with our first simple starnet contract. In this case, a simple contract that maintains some arbitrary balance on layer two. Now, you'll note that these contracts are written in the Cairo language, and this series won't dive too deep into Cairo specific implementation. However, where relevant, I'll provide a brief clause for specific things that you might need to note about Cairo. To start off, every starknet contract begins with the Lang directive highlighted at the top of the file here. This directive indicates to the Cairo compiler that this code should be compiled as a standard starknet contract. Next up we have our first storage variable balance.
00:00:49.580 - 00:01:26.200, Speaker A: Storage variables, often referred to as the contract state, allow us to store information on the contract, read it, and write to it as we see fit. Any storage variable defined in the contract automatically provides you with two inbuilt methods. Read and write accordingly. A quick point to note, you'll see felt recurring in this file. This is the native chirotype, short for field element, and for most intents and purposes you can refer to them as regular integers. Next we have our contract functions. Increase balance and get balance.
00:01:26.200 - 00:02:06.220, Speaker A: Note that by default any function written in a contract is internal. For that contract usage only. By using the external or the view directives we indicate that these functions are external, meaning that once the contract is deployed to the starknet system, we'll be able to interact with it using these functions. So what's the difference between the external and the view directives? Well, the difference is whether the function is allowed to change the state, as with increased balance, which increases our storage variable, or only allowed to read the state, as with get balance, which simply returns the value stored in our storage variable.
