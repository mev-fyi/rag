00:00:02.650 - 00:00:47.270, Speaker A: As I said. Hi, I'm Maximilian, I'm currently the late engineer of Stark's foundry, and today I would like to give you a short overview of the project and explain how you can get involved in the project so you can become a contributor to the Starkin ecosystem through the project itself. Okay, so maybe think. And of course today with me is Artur, she will be helping you later with me in the practical part. Okay, so as I said, I'm from software mentioned. We are mostly software agency based in Poland and we are doing lots of things. We are mostly focused on react native.
00:00:47.270 - 00:01:17.190, Speaker A: One of the co founders is one of creators of react native. And also aside of that we are doing multimedia streaming and blockchain, mostly collaborating with Starkware on Starknet tools. You might know us from other tools we created for Starknet. If you know, it's like Starknet Foundry before it was protostar. If you use it before it has. And also scarf is also built in house. So I hope at least some of you heard about those tools.
00:01:17.190 - 00:02:13.574, Speaker A: Okay, so what is Starknet Foundry? Starknet Foundry is implementation of Ethereum Foundry on Starknet. So basically it's a tool for testing and developing Starknet contracts. And the goal is to make it basically fast. And it's basically, as I said, collaboration between foundry, Starknet and everything is sprinkled with rust and it works very fast and it's actively developed. Okay, so what, because I said, it's like implementation of Foundry, but Foundry itself is a very big tool and has lots of features. So I want to explain what we achieved for now because the project was officially raised, I believe one month and a half ago. So we have two main components of the project.
00:02:13.574 - 00:02:48.150, Speaker A: It's forge, and Forge is a testing tool for Cairo contract. So basically it's test runner and it has lots of interesting features that can help you write better tests. And I think it's the crown jewel of the whole tool. And it's a cast as well. And cast is kind of DevOps tool for Startnet. I could call it, and it right now just supports set of comments to interact with starnet. And long term, as I said, we would like to make it a DevOps tool for Startnet.
00:02:48.150 - 00:03:43.380, Speaker A: So it will include like deployment scripts for contracts and stuff like that, but maybe later about this. Okay, so to give a general feeling, how do you write tests in stocking foundry? So basically if you are familiar with Kyra native or Kyo one or not, if not, it's still useful. Basically it's pretty similar. You just define test functions mark them with test attributes and you are ready to go. You can either just test pure Cairo functions, not including any startup stuff, or import your contract dispatchers and deploy them and just test contract interactions on chain. Yeah, and I think this is it. You can probably see it here.
00:03:43.380 - 00:04:10.640, Speaker A: Okay. It's the basic part. I think it's not sufficient to just be able to deploy contracts and it was achieved long time ago by different tools. So what is unique for Starknet Foundry and it's unique right now is why I put it here. Sorry, it's my mistake. Then I accidentally replaced this site with different. Never mind, sorry for that.
00:04:10.640 - 00:04:26.658, Speaker A: We'll go back to this later. Okay. Interesting features we have. Sorry. For example, of course you want to test your contract behavior. That's nice. But there are many different other stuff you would like to test.
00:04:26.658 - 00:05:28.130, Speaker A: Example, your contracts can emit events and you want to check that. So we have functions and utilities to help you track events that are emitted while you're calling your contract. And you can assert certain events was emitted by specific contracts. Another stuff we support is parsing takes the files and right now we are working on JSON files. I believe pr is open already and it's very useful because lots of projects basically have some very long and large cases and parameters for test and they want to run them, all of them, and they store them in JSON files. So it's very useful, for example for building parametric tests yourself. Another maybe interesting on the other slide actually I think I accidentally changed just before are mocking contract calls.
00:05:28.130 - 00:06:27.574, Speaker A: So you basically can don't have to deploy every contract you want to test interaction with, but instead you can just basically say, okay, under this address and this entry point I want this data to be returned and startken foundry can handle that. Another maybe interesting feature is l one and l two interactions. Right now I think you can simulate, for example call from l one to your contract. I think other way around. It's currently work in progress. Okay, I think this gives you general overview of features we have right now. So what is like cooking right now and what we are working on next? I think few weeks, two or four I believe is like I said, reading from data from files right now.
00:06:27.574 - 00:07:11.000, Speaker A: Text file, text files are supported, but jsons are work in progress. We're working on state forking. So basically we'll be able to specify you want to fork starting state to your tests and your tests will run on this Tarkin state you forked, which is very useful in some cases because sometimes your contract has a lot of dependencies and simulating everything like locally is pain. So it solves that. Also I think very soon guess estimations will be included there as well. And of course more cheat codes. I also of course show you all the part of them and there are, I think at least a dozen of them right now.
00:07:11.000 - 00:08:23.578, Speaker A: Okay, this is the, I think, short term plan and what we are doing right now and a bit my maybe more end game. It's not really an end game, it's a bit like few months from now I believe we'll be able to support transaction gas profiling. I don't know if any of you used Protestar in the past, but Protostar supported very nice profiling of transactions and specifying how much gas each function used. So we want to have similar feature for Kyo one in token foundry. Also we want to support test coverage, so you will be able to analyze what code you have covered and fast testing and some additional debugging lt list utilities which are undefined right now. And we are still thinking what will be the best ideas there to improve. Okay, going from the user part, because this is contributor workshop, I would like to give you some overview of the infra architecture and internals and how things work under the hood.
00:08:23.578 - 00:09:26.900, Speaker A: So basically if you look on this nice graph, you can see as I said, we are two main components and CLis. There is forge, which is test runner for Cairo, and it's cast. So maybe start with cast because it's simpler one, it's basically a CLi CLI for Starknet, which allows you interactive starknet. And it's like under the hood, it's written in rust, so it uses Starknet arrest under the hood and it's integrated with Scarp as well. So you can specify arguments in Scarp tomo which makes things nicer. And I think that's all I can say about architecture of cast. I think Forge is a bit more interesting in this matter because basically forge itself holds Kyo VM instance which is used to run tests one by one.
00:09:26.900 - 00:10:53.786, Speaker A: It uses Scarp to compile contracts. Tests are now compiled by force itself, but we are working on offloading into Scarp as well. So right now we are tied up to specific Cairo compiler version, but the plan is to just forge, be independent of Cairo compiler version, you will be able to use with any version you want. And what is I think interesting about architecture of Forge is under the hood it uses something we call chitnet which basically is modify an instance of blockifier and which I had here, and basically it extends the blockifier is an implementation of basically execution engine for Starknet, and it extends the blockifier state with some additional cheat code data which we use to modify the behavior of blockifier. You can implement cheat codes, for example mocking some transaction data or mocking some, I don't know, call data or anything you want to do, which is a very flexible model to work with. Okay. I think it's, it about overview architecture.
00:10:53.786 - 00:11:32.330, Speaker A: Of course there are lots of different things that can hiding there and it's a broad overview, but it's probably best to get hands on with that and understand it more deeply looking into the code. Okay, so how cheat cards are implemented I want to give you. Of course, sorry. Yeah, tester written in Cairo. Sorry, I specified that. No, that's already in Cairo. It's like foundry style, so in Cairo, but project itself implemented in rust.
00:11:32.330 - 00:12:49.154, Speaker A: Okay, how are cheat codes implemented generally? I think I left it as a maybe short overview. Basically if you look into the standard library of we have exposed something like sn port library, standard library. And if you look into implementation of cheat code there, you can see for example for starterall cheat code, you can see it basically under the hood calls something that is called cheat code, which is a library function implemented by Cairo compiler. And what we do, we have a Cairo Vm, you can inject new Cairo VM, something which is called hint processor. And hint processor can implement like implements basically logic of hints. So if you write something like this, it basically compiles to a hint under the hood and we implement the logic in hint processor. And then if you want to like probably this one modifies this cheated state.
00:12:49.154 - 00:13:28.112, Speaker A: I show you before, for example adds okay, this contract is now rolled and this is the value you should return. And then there is some logic modified in blockifier which checks if contract is rolled. If it's rolled, it instead returns the value that is specified in the cheated state. It's pretty hard to explain it. I will have access to this slide later, so you can check it out later in the practical part. Okay. And useful resources.
00:13:28.112 - 00:14:08.320, Speaker A: I believe telegram groups are very useful. The left one is for contributors and general discussions about the project. And the right one is for the users. If you want to scan them, it's a good moment to do so. If you can do it now, I will say the slides will be available at the end, so no worries. Yeah, and those two also there is Starknet Foundry book which explains documentation for Starknet foundry but targeted towards users. And it includes some tutorial how to set up development environment.
00:14:08.320 - 00:14:39.608, Speaker A: Okay. And I think it's all about resources and maybe I want to give you short information why you might be interested in getting involved. So basically I think a project itself is very cool engineering challenge. You can learn a lot how Starknet and Cairo work under the hood, because you work a lot with Cairo virtual machine and like Cairo compiler. I think it's interesting. I hope you share that. It is very nice community.
00:14:39.608 - 00:15:26.250, Speaker A: I think we have a couple of, excluding the standard team that works in house which is pretty big right now. We have some regular contributors which collaborate with us and implement also critical features. And we try to build a good infrastructure and community for contributors to be able to work with us regularly and be more involved, more involved with one feature or something. And we host something like weekly community calls when you basically can discuss what you want to work on. We can help you with your questions. And it's every Thursday I believe. Yeah, I think it's always announced on the Telegram group if it happens.
00:15:26.250 - 00:16:11.510, Speaker A: What else? I think it's like great opportunity to, as I said, great opportunity to learn rust and Starknet if you're interested in that. Okay. And how to get involved, I think you can do it right now because we prepared a list of issues which are accessible for new users and you can URL at the top and you can check it out right now. Also you have access to the slides and we will be available right now here so we can explain things to you and help get on board it. Yeah, I think that's all about speaking part and we can just get hands on right now. So cool.
