00:00:03.050 - 00:00:39.100, Speaker A: Hello everyone. Good afternoon. Great seeing this wonderful crown at this hour of the day. So I'm Alex. I work as a PM and researcher in Starquare and today I'll be talking to you about appchains. First of all, just to let you know you're missing out on great talks by ily on decentralization Gi. And this will be a bit similar to Ugh's talk yesterday, but I'll talk about more of an overview of what upchains are and what can be done with them and where are they going in the near future.
00:00:39.100 - 00:01:58.670, Speaker A: So what are upchains? Basically, unlike l one and l two s that we all know and love that run a variety of contracts and applications, upchains are more dedicated to a specific use case and are built to do this use case very well. So upchains are not a new idea, but something that is gaining more traction and we'll see how. So they existed for a while, but really made more popular and first class citizens with the cosmos and Polkadot systems. But Stalkex has also been quite a popular variety of chains. So we have Dydx that are doing trading Soraya for nfts and immutable x for gaming applications. So these are great use cases where you want something to be very efficient, do it really well, and not necessarily anything else, but be very good at that. So you're an application builder, you want to think, okay, how am I going to deploy my application? Should I just deploy a contract or should I use an upchain? You might have these considerations to prefer an upchain.
00:01:58.670 - 00:03:01.480, Speaker A: So first of all, maybe, obviously it's scale. So even with l two s that are really good at expanding the capacity and throughput of the network as a whole, even l two s like Starknet, they still might have the same limitations as l ones. So when there is high demand for block space, fees might still go up. And you, as someone who has an application on l two, might deliver a worse experience to your user than if demand only goes up when it is happening on your upchain. Second is customizability. So you might not like the tokenomics or the consensus protocol of the specific option that you are using of the network that you are using. And by building an option, this is something that you can play with, right? You set the rules, you set the fees and how everything plays out.
00:03:01.480 - 00:03:46.440, Speaker A: And ecosystem is more of a point of why wouldn't you deploy your own l one or completely separate network? So by building an upchain, you are still hooking into some infrastructure that does exist within the ecosystem that you're building on. Right? So if it's Starknet or Starkx, you're still hooking into Ethereum, liquidity, et cetera. Don't need to worry about some of these things. You already have some of the toolings which might not exist if you build a new l one. Of course, not all cakes can be had in eaten. So some of the limitations that have traditionally existed with upchains, we'll go over some of them. So first of all, security.
00:03:46.440 - 00:04:40.630, Speaker A: So traditionally you had to amass validators that will validate your chain that will need to lock up stake, lock up some funds, which also reduces the capital efficiency. And once the TVL of the network becomes high enough, it might become a problem. You might have a majority attack, majority stake attack. So not perfect unless your appchain is really popular. Second is composability. So by design, the appchain was meant to run this one thing really well, so you won't be able to interact with other contracts that exist on the same network easily within the same transaction. And for simplicity, although you do have some of the benefits of the ecosystem, it is still more complicated than just deploying a new contract.
00:04:40.630 - 00:06:34.870, Speaker A: So pros and cons for upchains, but the purpose of the talk is to see how by building them on validity roll ups and on Starknet, you can gain the entire stack, mainly building on the security of the l one, on some composability or interoperability of layer two, and gaining all the benefits of the scale of the appchain on its own. So for security with recursions and with sharp proofs can be submitted to Starknet. In this example, if Starknet is a layer two verified there, this gets verified on Ethereum and then you have your upchain on l three. But you gain the security of Ethereum without any need for mass capital locks composability. So yes, it is not perfect. In the case of upchains, you still won't be able to make a flash loan from Ave and execute it on a dydx, but you do get a lot from running it as an l three, it will be possible, with better bridging, better tooling to move funds around between upchains quite cheaply. Right? If now it is rather expensive, you need to withdraw things, go to Ethereum, pay high gas fees for both withdrawals, and moving to a new upchain when everything happens through the layer two, both validation is much cheaper.
00:06:34.870 - 00:08:05.160, Speaker A: And if validation is also cheap and there is enough demand it can also happen much faster, right? So not as long of a wait between these transfers. And this also solves the problem of yes, there can be lps on both sides that help you move funds, but if you are the LP now, you gain the security of the bridge, much more capital efficiency when moving between your upchains. And finally, for simplicity, frameworks that are going to come up and some of you are going to build them that will make this one click affair to spin up a new chain that will do exactly as you want and all the features that you want. So ideally we'll build like in the vision of where upchains are going, you'll have a way to mix and match all the of features that you would like to execute and we'll see some examples later. So you'll be able to choose your execution engine, choose whatever consensus that you want to use and whether you want data availability to happen on l one, on l two, et cetera. So some of these are already available and some of these are going to be experimented with in the near future. So Starkx as an l three already something that is in the works.
00:08:05.160 - 00:09:26.894, Speaker A: At first it will be validated on l one and messaged to l two just to gain from the aggregated proofs that sharp is producing. But later, just as proofs on l two. Custom Starnet also not something that is available to all, but an option running a starknet instance that is only dedicated for a specific app. And another interesting aspect is running something that will be proven directly with the sharp proverb. So this is interesting, something that also is not available yet, but there is a talk later for work that is being done on that. Basically you run Cairo code, execute it on sharp directly, and there you can implement any logic that you want, including your own execution engine, your own vm, et cetera. So things that can be built with these tools on chain gaming that will move not just assets as things that live on chain, but the entire gaming logic on chain AI, you can have inference that will happen and be validated and proven on chain.
00:09:26.894 - 00:10:33.240, Speaker A: Interesting things we can think about how oracles can use this and your idea to build. So again, interesting space to watch. Some of these apps are already building some of these ideas. For example, running Kakarot, super interesting project that you might have heard about as a vm, as an l three, it's going to be executing Ethereum code, validating it on stagnet or Ethereum directly. So thanks azio for the meme with the power f sharp and recursive proving you might think, why shouldn't I build l three of my own? Thank you. Follow us. And if you have questions and you are building in this space, building infrastructure for upchains and l three s, or building l three s that are only possible by building them with an upchain or proving them to sharp, then come talk to me.
00:10:33.240 - 00:11:19.216, Speaker A: Thank you. I think we have time for questions. Yes. Aha, so you mean the first step when it's going to l one first or later? So that would depend on how much you want to pay. Right. If you are running the subchain on your own whenever you want to make the proof. But yeah, I mean, it's going to depend on traffic and the cost.
00:11:19.216 - 00:12:12.048, Speaker A: Obviously the more proofs you aggregate together is going to be cheaper. But it's semantics. Like, it's not something that is concretely defined. If there is demand for higher throughput, lower latency, it's something that can be, that can be done. Yes, exactly. So this is exactly like building one big l two with all the apps on it. Obviously we want to make l two s and starknet scale well and be able to execute as much as possible on it in a secure and cheap way.
00:12:12.048 - 00:13:03.714, Speaker A: But as I said, there are some other things that you might want to consider, like running evm code. Right. Not necessarily something you can do easily with pure Cairo. You might want to make some adjustments, maybe some other things, tokenomics and tailor it to exactly what your users need. Yes. What's the competitive edge? So obviously, yeah. It's not the only place where l three is happening, which is good.
00:13:03.714 - 00:13:39.680, Speaker A: Competition is good. Some of the advantages that we mentioned is, for example, the security. Right. You get validity proofs either to l one or on l two. And that means your execution is correct and provable regardless of how much do validators stake, right. On an upchain on cosmos, this is something that can happen if validators decide to together to be malicious. So that's one example.
00:13:39.680 - 00:14:25.080, Speaker A: Yeah. And there are chains that are already running, like BYDx, which is super successful, which is a good example of who can find this useful. Okay, thank you. You build it a. Yes, it's that. Okay, thank you.
