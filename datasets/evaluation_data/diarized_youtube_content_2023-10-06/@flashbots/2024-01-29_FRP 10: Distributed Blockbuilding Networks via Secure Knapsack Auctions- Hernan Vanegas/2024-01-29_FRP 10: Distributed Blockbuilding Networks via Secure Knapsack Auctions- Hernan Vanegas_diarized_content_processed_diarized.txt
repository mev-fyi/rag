00:00:00.570 - 00:00:55.920, Speaker A: Hi everyone, my name is Fernand Vanegas. I am a research engineer at Haskloak, and I will be talking about distributed block building networks via Napsack options as a motivation of our work. There are some successful tools for block building, like for example, Mapboost. However, the winning block builders are starting to centralize in a top few, which is not ideal if we want a fully decentralized network in the block building process, multiple heuristics have been used. For example, the first come, first serve some actions and some greedy algorithms. In this work, we will tackle the problem of block building in such a way that we obtain a decentralized and a private process. We do this by considering the blockbuilding as a napsack problem.
00:00:55.920 - 00:01:56.260, Speaker A: Remember that in the napsack problem we have a napsack that has certain capacity and a set of objects. Each object has weight and a profit. The profit is included in the napsack. The idea of the napsack problem is to chose the correct subset of objects to include in the napsack in such a way that the total weight will not surpass the napsack capacity, but we obtain the maximum profit, the maximum possible profit. Now, in terms of the blockchain, we can consider the transactions as objects. So we have a set of transactions that are ready to be included in a block. Each transaction has a gas that, in terms of the napsack problem, is the weight of each object.
00:01:56.260 - 00:03:06.470, Speaker A: Also, each transaction has a profit, that is, the amount to be paid if the transaction is included into the block. The block itself is considered as the napsack. This block has a block gas limit, so the gas of the transactions included in the block, the total amount of gas, will not surpass the block gas limit. The idea is that a set of nodes, the builders, will engage in a protocol to choose the correct subset of transactions to be included in the block. The idea to solve this problem is to consider the block building as an NPC protocol. Here, each party will provide a set of transactions. The weight and the profit of each transaction, and this weight and this profit will be private.
00:03:06.470 - 00:04:32.370, Speaker A: In the protocol execution, the capacity of the block will be a public value. Now, to do this, we use the fantastic four protocol, that is a general proposed NPC protocol. The idea is that we represent the algorithm for the knapsack solvers as an arithmetic circuit, and this arithmetic circuit is used, specified in such a way that the protocol will execute, will evaluate this arithmetic circuit in a secure way. The fantastic four protocol allows four parties and one corruption. This protocol is secure against malicious or active security. Active adversaries, sorry, and works over rings, which means that the underlying algebraic structure of the fantastic four protocol is a ring of the form c two to decay. This protocol offers an additional characteristic, that is the private robustness, which means that the protocol will end successfully, and this success will not affect the privacy of each node participating in the protocol.
00:04:32.370 - 00:05:30.520, Speaker A: We explored three alternatives to solve the napsack problem. One is a traditional solver using Olivia's ram. Another solution is an oblivion solver without the Olivia's ram, and a third one is the greedy solver, which is an approximation. We will see more details in the next slide. The three alternatives are implemented in the MPSP framework, which is a framework that allows us to specify these algorithms in a high level, and then it is compiled in a set of instructions that are executed in a virtual machine. Each node is like an execution of the virtual machine and is executed in a distributed, secure way. More details here about the alternatives for solving the napsack problem.
00:05:30.520 - 00:06:37.530, Speaker A: First, we have a basic solver. This basic solver is a translation of the traditional dynamic programming algorithm into the MPC setting using an oblivion. Remember that the dynamic programming solution for the napsack problem involves filling a matrix. We instantiate this matrix in the MPC setting using an oblivious ram that it can be talked as a distributed data structure that stores secret values but can be indexed also using secret indexes. Now, with a maximum capacity of 50,000 and 330 transactions per party, the protocol finishes in around 2.4 days, which is not practical and is very, very slow for the current state of the blockchain parameters. The second solution is a shifting solver, which removes the oblivious ram of the previous solver by using a shifting process between the columns of the dynamic programming matrix.
00:06:37.530 - 00:07:48.340, Speaker A: With a maximum capacity of 200,030 transactions per party, the protocol finishes in around 23 hours, which is more practical than the previous solution, but is slow for realistic blockchain parameters. The third solution is a grid dissolver that obtains an approximation of the solution. It's not an exact solution. This protocol uses oblivious sorting, and it does not need an oblivious ram. Also different to the previous two solution, this solution does not depend on the block gas limit. Instead, this solution depends on the number of transactions, the total number of transactions that are being considered to be included in the block. With a capacity of 30,002,000 transactions per party, it takes around 64 seconds for the protocol to finish, which is practical and fast.
00:07:48.340 - 00:09:14.560, Speaker A: Some conclusions and observations here. The grid in Absac solver is more performant, although it returns an approximate solution, not an exact one. Choosing the fantastic four protocol speeds of the computation. This is because the underlying algebraic structure is more compatible with the operations that are predominant in the napsack solvers, which are the comparisons. Some research is still needed to obtain an exact solution for the napsack problem using MPC in such a way that the performance is achieved using the correct and practical parameters of the blockchain. There are many open questions, for example, more complex greedy conditions that are present in the real world blockchain. Another question is how to distribute the incentives among the parties involved in the protocol of block building, and also study and research about the special proportion pc protocol for this particular case of the Napsack problem.
00:09:14.560 - 00:09:31.690, Speaker A: Here we have the link to the original blog post. However, we have made some improvements over the results that are presented in there. Thank you very much for your attention.
