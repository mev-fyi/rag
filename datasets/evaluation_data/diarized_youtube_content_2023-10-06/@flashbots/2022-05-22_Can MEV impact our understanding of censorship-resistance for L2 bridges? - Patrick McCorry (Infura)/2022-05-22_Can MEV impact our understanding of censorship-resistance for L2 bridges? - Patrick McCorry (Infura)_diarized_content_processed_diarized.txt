00:00:00.090 - 00:00:44.458, Speaker A: Um, and today I'm going to talk about more of a fun topic. You know, can we use mev strategies to impact our understanding and what it means for censorship resistance? And since this is a cross domain, you know, section, I'm going to apply this to layer two protocols. And it's more of a fun topic and an outstanding research question. So there's no guaranteed answer here when I've lots of disclaimers throughout this talk. So there's three sections to the talk. One, I'm going to briefly introduce the idea of mev, although I'm sure most people here are already aware of what it means. Two, I'm going to talk about layer two bridges and how they work.
00:00:44.458 - 00:01:34.698, Speaker A: And then eventually I'm going to ask the question, is there a risk of censorship? So, mev strategies. Now, let's just say Alice signs a transaction, she'll broadcast it to the network and she wants to make some money from this transaction. As most people here are probably aware, when you send it to the peer to peer network, there is this dark forest, these searchers, these mev people who just want to steal all of your money. So they'll take this transaction, they'll inspect it, and they'll work out if they can apply some strategy to steal all of your money or all of your profit. And there's three ways to do this. And also I stole this infographic from Gnosis, see if they've got a great picture and I've just chopped it up for my own use. So the first approach is front running.
00:01:34.698 - 00:02:05.086, Speaker A: And the basic idea there is that I see your transaction, I can copy, I can paste it, I can broadcast it myself. And if I get my transaction executed before yours, then I can steal all of your profit. And typically this would mean the user's transaction will fail and the mev searcher stole all of your money or all of your profit. Sorry, not your money. The second approach is back running. So let's just say you're a wheel. You want to buy a Lambo, you need to trade your ETH into some USDC.
00:02:05.086 - 00:02:37.706, Speaker A: And I don't know, you treat it like a million dollars and then you move the exchange rate. Someone could send a transaction, get an arbitrage moment and obviously profit from your transaction that way as well. And the third approach is this sandwich attack. So let's just say you're going to perform a trade. You set 5% slippage. So either you get a dollar or you get a dollar and $0.05. If the mev searcher is good enough, they can get their transaction in before you and after you and extract out your slippage and effectively steal that $0.05
00:02:37.706 - 00:03:07.874, Speaker A: from your transaction. So you always get the minimum price. That's like the basic idea behind some of these strategies. And why does this work? It works because when Alice signs her transaction, she signs it thinking it will do a but by the time it gets executed, it ends up doing b because the action really depends on the state of the smart contract at the time of execution. And of course, who controls that. Well, the block producers do. They get to decide the order of transactions.
00:03:07.874 - 00:03:42.658, Speaker A: And of course, who gets executed before who. Now, most people, when you think of mev, you think of people in their bedrooms writing these bots, trying to make lots of money and sending it off to the block producers using Flashbots. Today. I guess every talk also has this mantle model, which is why I want to talk about censorship resistance. Can we leverage Mev for something else? And this is really good. I was watching this last night, actually, this podcast on Uncommon Course. It was perfect timing for me, and Charlie had this wonderful phrase in it.
00:03:42.658 - 00:04:17.486, Speaker A: But the basic idea is the following. What some searchers do if they see a trade hitting uniswap and let's say it has 1% slippage and it will cost a few dollars to move the price and feel their transaction. Some searchers will do that. They'll make the user's transaction feel because it only costs a few dollars. With the hope they'll reissue the transaction with more slippage, then they can just extract more value from that transaction. And that's interesting. By failing the user's transaction, you nudge them to go do something else where you can make more money.
00:04:17.486 - 00:04:37.282, Speaker A: And in a way, that's a form of censorship because you force someone's transaction to fail and they were unable to transact. Another great example, and I don't know if anyone remembers this. Raise your hand if you remember Vitalik dumping the Shiba tokens. Look at that. Yeah, it was really exciting to watch. I was watching this in Ether scan and tell my girlfriend about it. She thought I was nuts.
00:04:37.282 - 00:05:27.250, Speaker A: But what was interesting, though, was that as he's dumping these tokens, some of his transactions started to feel. And you can see there's four field transactions here. Now, I've always believed I mean, I guess maybe there's better data for this, but my understanding was that Mevbots noticed Vitalik was dumping these tokens and they just applied their Mev strategies and they forced his transactions to fail. Because his transactions failed, he couldn't dump his tokens, and he was effectively censored by the Dark Forest. Now, I believe and we can ask him, he was around in this room not in this room, but his venue. I think he used cowswap to get around the Dark Forest or flashbacks. And so when we think of Ethereum, the way we get censorship resistance is two following two assumptions.
00:05:27.250 - 00:06:19.558, Speaker A: One, there's one honest block producer out there who will take your transaction and put it in a block. And that block producer is basically guaranteeing your transaction will be executed as intended. The second assumption is that there's an honest majority that the other block producers will not fork away that block, the offending block that includes your transaction but for the most part, we just need the one honest party to include your transaction and guarantee his execution. So that's how he got around the Dark Forest. And so can mev be used for censorship? Well, it looks like it can, but then if you're a researcher, because this is what I haven't done yet, the following questions are what category of transactions can be mevable? Which ones can be censored? A simple payment, probably not. A trade? Yes. Withdrawing your liquidity? Yes.
00:06:19.558 - 00:07:29.114, Speaker A: The other question is, what capital do you need to perform the censorship? If I need to move the price of ETH the Uni or ETH the dollar, do I need a million dollars to effectively move the price, or just a few dollars, like in the Shiba example? And how much will it cost the attacker to keep repeating this attack? If you have to keep paying the uniswap LPs, then maybe it becomes too expensive over time. I don't have the data, but that's really easy to quantify for anyone who's interested. And also, what's the risk to the attacker if I fail someone's transaction and I move the price? What if someone else in the Dark Forest has backruns me and then arbitrages me and steals my money as well? Really, it's risk free if you can try to sandwich the attacker, but what's the guarantee a sandwich attack works? So, disclaimer this may not actually be a problem whatsoever. It may turn out to be a dud or a dead end, but I think it's an interesting observation that's worth investigating. Okay, so that's MAV strategies and the idea that there could be censorship. What about the L two bridges? So raise your hand, guys, if you've ever transacted on a roll up. Oh, look at this.
00:07:29.114 - 00:07:56.542, Speaker A: I hope you've got the little monkey NFT for Arbitrum. That's a really great avatar. PFP. But under the hood for all these roll ups, what we've really been doing is this bridge engineering. We've just been building a bridge and conceptually, there's this off chain database that has the account balances and the program state. And you can consider this the liabilities of the system. It describes all the balances that people are owed.
00:07:56.542 - 00:08:37.726, Speaker A: And then you have the bridge contract on Ethereum that holds all of the assets. So some of the bridges today hold billions of dollars. And really, the bridge contract needs to be convinced that this database is alive or well intact and is always making progress. And that's sort of the trust assumption, what roll ups are trying to solve. But the question is, I guess I really need to ask that question. Can we transact on an off chain system without actually trusting anyone to protect the database? And that's what these validating bridges are building the roll ups, the Arbitrums loop rings, Eksync, Starkware it's all about removing the trust of the operators. And we only have to trust the bridge of our funds.
00:08:37.726 - 00:09:07.062, Speaker A: And that guarantee the integrity of that database. Okay, so why is this important? So let's deep dive first and have an understanding of how these validating bridges work under the hood. So we're going to cover the agents, an overview of the validating bridge and finally the security properties, which will be important for of course, mev. So the agents are the following. We have the honest user, Alice. Alice likes Mooncats. She has a Mooncat on the roll up and she wants to transact.
00:09:07.062 - 00:09:40.918, Speaker A: We have the sequencer who will take transactions from the user and order the transactions for execution. And then we have the executor who will take the order transactions and then execute them and convince the bridge that this is indeed a valid update to the database. So at a high level, we have Alice, and Alice wants to transact on the system. She will deposit funds into this bridge contract. And then Bob comes along. Hi, Bob. And Alice wants to send one coin to Bob on the layer two system.
00:09:40.918 - 00:10:22.978, Speaker A: So she'll sign a transaction, she will give it to Bob, or sorry, she'll give it to the sequencer, and then the sequencer can notify Bob to say, bob, you're going to receive one coin, but it's not yet confirmed, it's not yet final. The sequencer just holds a copy of it. Then over time, we wait until there's more transactions, and eventually the sequencer will take the list of transactions that are pending, order them and send it to the bridge contract. And the bridge contract is responsible for finalizing the order of execution for these transactions. Then over time, we wait. They're pending, they're ordered, but they're not yet confirmed or final. And then the executor comes along.
00:10:22.978 - 00:11:13.700, Speaker A: He'll take the ordered list of transactions, execute them with my wonderful 1990 animation, and then he'll post a little checkpoint to the bridge with some indisputable evidence that this is the new state of the database, is a valid update. According to those transactions, and this just happens continuously, the bridge will order transactions and then of course, it will then receive the checkpoint and confirm its execution. So what are the security properties that we care about then for these bridges? Well, the ultimate goal is that we want to protect the safety and the liveness for the off chain database. And there's three goals we care about there. One is data availability. The bridge contract needs to be convinced that all the data is publicly available for anyone. The access.
00:11:13.700 - 00:11:46.446, Speaker A: The second property is state transition integrity, the optimistic versus the ZK roll ups. The bridge needs to be convinced that all updates to the database are valid. Now, the one we care about is censorship resistance. The bridge needs to be confirmed. The bridge needs to be convinced that Alice can always transact on the system even if all the operators are malicious. So all we care about for this is censorship resistance. Okay.
00:11:46.446 - 00:12:18.882, Speaker A: Now how would you get censored on a rule know, it's pretty straightforward. Alice will give the transaction to the sequencer. The sequencer will say, no, sorry, Alice, you're not allowed to transact. You're stuck forever. Ha. So what's important here? What is the role of the sequencer and the executor for censorship resistance? The sequencer has absolutely nothing to do with censorship resistance whatsoever. The sequencer's only job is to offer the fast path to execution this optimistic confirmation.
00:12:18.882 - 00:12:52.830, Speaker A: It's really the executor, and we have to assume there's one honest executor, which could be anyone here, and the bridge contract. The bridge contract can accept transactions from the user and order them for execution, and then they'll eventually get executed. Now this is where we start getting to the interesting part. I know that was a lot of background information, so let's consider how censorship resistance is implemented. So in the know, there's two transactions that have been confirmed and finalized, transaction one and transaction two. Olive sends the transaction to the sequencer. She gets ignored.
00:12:52.830 - 00:13:26.910, Speaker A: She can then send it to the bridge contract, and the bridge contract will order this for execution. Then eventually an executor can pick it up and then finalize its execution. And we call this the slow path. The slow path to get your transaction confirmed and processed. So how is censorship resistance implemented here? It's different to Ethereum or at least how we solved it before. All the bridge contract guarantees is that a transaction will eventually be ordered for execution. It only guarantees ordering.
00:13:26.910 - 00:14:03.670, Speaker A: So now we understand mev and we understand the bridge contracts. So is there a risk of censorship resistance or censorship risk? So I still seen Ed come in out there, actually. So Tubebody missed this because this is his code. This is the Arbitrum Bridge. Pick. I have a disclaimer here, I'm not picking on Arbitrum, but they're one of the only projects that actually implements something that is censorship resistant. So my only example out there anyway, so in their contract, in their bridge, the sequencer has priority.
00:14:03.670 - 00:15:04.830, Speaker A: The sequencer's transactions can always be ordered before the users, and they have like a ten minute window or such they get the sequencer's transactions in. Okay, so let's have a visual example of this. So what would happen? Oh, cool, awesome. So what would happen is that the user will submit transaction three, and then sometime afterwards, the sequencer can look at that, evaluate it, and then they can submit transaction five and four, and inside the bridge, it will execute the sequencer's transaction first before the user's transactions. Okay, now, why is this important? Why do we care about this? The sequencer is guaranteed that they can always front run every user transaction and also back run every user transaction. Put another way, they are guaranteed to perform sandwich attacks if any user goes via the slowpath. Of course, when you go into the detail, maybe there's like a list of user pending transactions and it's a bit tricky, but for now, we keep it simple and say they can get this guarantee.
00:15:04.830 - 00:16:05.098, Speaker A: So if Vitalik was doing as an arbitram and he started using the slow path because the sequencer centered him, there's no cal swap that can see of you now because you'll post it to the slow path. And then anyone could give the sequencer the transactions to then feel your transactions because they'll always be executed first before anything in the bridge. So what can we do about that? Can we fix this for layer two? So the sequencer or anyone using the sequencer can abuse any transactions that are submitted by the user. So one way to think about it is that when the user submits their transaction, maybe the bridge is forced to make sure this transaction will always pass. It can never be a field transaction, but that's not really possible. Can you think of any problems of that if the user submitted a transaction and it always had to pass? Now, the issue there is really the bridge only receives the transaction data. It doesn't evaluate the transaction.
00:16:05.098 - 00:16:49.674, Speaker A: So it can't actually guarantee this will be a successful transaction. And you could end up halting the entire system if it does feel, but you can't allow it to feel. So the only real way to solve it, from my understanding, is you would submit the transaction and a proof that, based on the previous checkpoint, this is indeed a successful transaction. So maybe it's only relevant for the ZK roll ups, but generally I don't have a better solution to it. That's basically the end of the talk. My future work would be based on these observations, I would try to work out how effective is it? Is it possible to center transactions in a way that's financially effective? Or maybe is it done? It's a dead end, I don't know. But maybe a PhD student would want to take it up and evaluate it a little bit further.
00:16:49.674 - 00:16:57.090, Speaker A: So that's basically it. And I have a little bit time for questions from the looks of it. So awesome. GG, guys. GM.
00:17:04.230 - 00:17:35.946, Speaker B: Hey, Patty. Thank you for the presentation. Just a question or maybe clarification on this final point you gave. I think it's less about guaranteeing that the transaction will result in correct execution, but mostly about avoiding l two reorgs and the sequencer being able to give fast confirmations. Because whichever state you're confirming through the force inclusion path it needs to always be reorg resistant for the L one side so that you know you're acting on the correct tip of the chain and also so that the sequencer doesn't know what to build upon.
00:17:35.978 - 00:17:36.414, Speaker A: Right.
00:17:36.532 - 00:17:45.962, Speaker B: So I guess in POS you can maybe do different things, but I think it's less so about ensuring that the result of execution will be correct and that the transactions, for example, well formed.
00:17:46.026 - 00:18:17.738, Speaker A: Yeah. So maybe the summarizer is saying if they get a guarantee here, you should try to guarantee the sequencer can't really interfere with it. Maybe it gets ordered, then it's ordered, but the trade off is that you will lose the fast penalty off chain because maybe someone front runs a transaction they just gave to the sequencer and messes everyone out. Yeah, so I was chatting to someone outside and there does seem to be this trade off between offering a really good user experience and trying to minimize mev. So I would probably stick with the instant finality. Right know it's probably a better trade off. Any other questions? I think there's time for one more.
00:18:17.738 - 00:18:31.100, Speaker A: I put a timer on. Cool. So I think we're safu then. So, GM, everyone, I hope you enjoyed this. And I think GM's press was up next, but I can't see oh, there he is. There's his golden hair. So, come on up.
