00:00:02.920 - 00:00:34.482, Speaker A: Okay, hi everybody. I'm going to speak today on execution tickets and mev distribution in shared and base sequencing. So this is what Justin was referencing at the end of his talk is how the big question of this talk will be. Shared sequencing is great, but roll ups aren't going to use it if it means that they lose all of their mev revenue. So I'm the lead researcher and I'm also an engineer at Espresso. This Ben Fish was originally supposed to give this talk, but he had some issues with his planck flight. So I'm filling it.
00:00:34.482 - 00:01:19.200, Speaker A: So the general structure of this talk is we're going to go over what's isolated sequencing, what's shared sequencing, and then how can we build a mechanism that redistributes mev in shared sequencers? Okay, so let's start with what sequencing is. So we have roll ups, they horizontally scale ethereum, like we know, and they all settle to the layer one either using, you know, fraud proofs or ZK proofs. There's a lot of advantages to this. One of them is that they can shard computation across a lot of different roll ups. This includes having different vms that are maybe niche and are built for specific use cases. And they're also really good because they also give heterogeneity. So we can leverage powerful nodes that can produce ZK proofs that can be verified by very weak nodes.
00:01:19.200 - 00:02:03.874, Speaker A: So this is all really wonderful, but roll ups today run isolated zone. And so isolated sequencers are basically, each roll up has a server, usually like a centralized server, but it could be decentralized. And each of these servers, a user submits their transactions to them. Each of these servers does not know about the sequence of transactions submitted to other roll ups. And so the drawback of this is obviously interoperability. So if you have these isolated sequencers, interoperability is difficult because if you want to interop in a safe way, you need to settle to the l one and then have another roll up read what you settle to the l one and then have that first roll up read again what the second roll up settled to the l one. This is all quite slow.
00:02:03.874 - 00:02:35.600, Speaker A: The other drawback is that you can't actually have atomic execution. So atomic execution being that a set of transactions will either all execute or all fail. You can't do this unless you have a shared sequencer. So. Well, what's the job of the sequencer to begin with? So we have users, they submit their transactions to this server. The server puts them all in a total order, puts them into a block and it posts this to the l one. But another really powerful thing that the sequencers can do is provide pre confirmations.
00:02:35.600 - 00:03:18.940, Speaker A: So pre confirmations are very powerful for a lot of ways. There's preconfirmations could be an entire talk just by themselves. But preconfirmations, the biggest thing that they provide is this kind of fast finality. If you trust that the sequencer is honest, then you can trust that your transaction is finally, when it's pre confirmed and you don't have to wait for l one settlement. And then finally, um, the third thing that sequencers can do is they can optimize for data compression. So instead of having to post every single roll up block to the l one, which can be costly, um, they can post, you know, a chunk of blocks every few minutes, for example, like arbitrum posts every few minutes. Um, okay, so you say, well, a natural extension of a sequencer is that they can run an option.
00:03:18.940 - 00:03:43.204, Speaker A: And this is something that we already see in Ethereum today. This is very similar to what PBS is in Ethereum today. It's an auction to build the most profitable block. Sequencers can do this too. We don't see sequencers do this right now, but it's more than possible that they could. Okay, so that was an isolated sequencer. Now let's talk about what a shared sequencer is, aka what based rollup is.
00:03:43.204 - 00:04:16.204, Speaker A: In this case, the users are actually sending their transactions to the l one. The l one is a shared sequencer, and then the roll ups can execute their roll up from the data on the l one. But note that the users are not sending their transactions to specific roll ups, they're sending them to the l one. And this is really great, as Justin mentioned in the last talk, because we have the security and the decentralization and the credible neutrality of the l one. This is all really good. And you also get improved interoperability. Now there's two parts to the interoperability that you get.
00:04:16.204 - 00:04:49.934, Speaker A: So one is you get really great interoperability between all of your l two s. You can now do these atomic transitions transactions. But even better. Well, maybe not even better, but also the really important part is that you get atomic transactions between the l one as well. So what was on the previous slide is kind of like vanilla based sequencing. And on this slide I'm going to offer maybe another version of base sequencing that's a little bit different, but is also a shared sequencer. In this case we have this layer 1.5
00:04:49.934 - 00:05:17.332, Speaker A: that sits between the l one and the l two s. So in this case, the users submit their transactions to this layer 1.5 sequencer. The sequencer does ordering and it also provides data availability on all of the transactions. The roll ups read the data from layer 1.5, they execute, and then they post their state transitions and proves to ethereum just like normal. And so you may be asking, well, like what's the point of adding this extra layer 1.5
00:05:17.332 - 00:05:56.300, Speaker A: in there? And I'll discuss that in a few slides. Okay, so similar though to what I was saying earlier, how a natural development of, you know, isolated sequencing or anything is that you naturally are going to run an auction to see who can propose the most valuable block. And so that's going to happen in shared sequencing as well. So a few key points about this auction. So auctions, um, will basically auction who has the right to update all of the roll ups or a subset of rollups at once. We'll kind of get into the details of this a little bit later. Um, and then another good thing is that the proposers of this auction can offer atomicity over transactions.
00:05:56.300 - 00:06:31.638, Speaker A: So they can offer, um, you know, atomic execution. They can also fulfill user intents via pre confirmations. Um, the point here is that these auctions and the proposers of these auctions can be very flexible. So as a result of this auction, you will end up having like a big super block that contains all of the individual l two blocks. They also will contain any cross roll up transactions, and this can be settled to the l one. So again, this is very similar to the PBS paradigm in ethereum today. Okay, so let's look at shared versus isolated auctions.
00:06:31.638 - 00:07:39.234, Speaker A: We might ask. Okay, shared auctions seem pretty good, but there's a few open questions about them. One is how do you share the revenue? In this case, where you have the shared sequencer, they're deciding the ordering of the transactions, and that means that they get to extract all of the MeV. So maybe that's not so good. The other thing is, well, if you are going to share the mev allocation among roll ups, how do you do it? How do you decide which roll up gets which percentage of, of the revenue? And then finally, is there a stable mechanism through which roll ups can dynamically participate? So perhaps a roll up wants to participate in shared sequencing only if it meets a certain threshold of value for them, but they don't want to otherwise. Is there some mechanism we can develop that rollups have full sovereignty and customization over whether or not they participate in this? All right, so there's many analogies for kind of this problem of like MEV or in general profit reallocation. So a few analogies are bands playing at a music festival.
00:07:39.234 - 00:08:34.150, Speaker A: The festival sells tickets to the entire festival, but obviously some bands are going to bring in more attendees than others. So how do you decide which bands get which portion of the revenue? Another analogy would be a travel agency selling tickets. If the travel agency sells tickets from two different airlines, how do you decide which airline gets which part of the revenue? So this is just an open problem in many spaces. Another example might be to kind of make this point is a shoe auction. So if you have a company that manufacturers left shoes and then a company that manufactures right shoes, to us, it seems intuitive that you would sell the shoes together. Like, why would you not do that? But if we're looking at this from just, you know, a pure kind of theoretical perspective, you need to prove to both company and a that they're actually better off selling their shoes together than they are separately. So how can you do that? And the goal is that they should always be better off.
00:08:34.150 - 00:09:24.132, Speaker A: Otherwise they don't want to participate in this shared auction. Okay, so that's kind of how we can frame this problem of like, how do we distribute mev? All right, so now, actually, let's try to solve this. I'm going to offer a strawman solution first. Okay? So we have each individual roll up, ABCD and E, and then we have a bundle that contains all of these roll ups. So our first attempt might be that bidders who build the blocks, they can bid on the bundle, or they can build on the individual roll ups, or they could bid on both. Each roll up will have some bid associated with it. And basically you either decide that you're going to bundle all of the roll ups together, or you're going to sequence them separately.
00:09:24.132 - 00:10:17.994, Speaker A: And so how do you decide this? You say, okay, well, if the sum of all of the individual bids for the roll ups is less than the sum or less than the bid for the entire bundle, then you say, okay, I'm going to sequence the bundle. If the individual roll ups all add up to a higher amount than the bid for the bundle, you say, okay, we're going to sequence them all separately. And then when you give your revenue back, you say, okay, well, each roll up receives, like, their proportion of the bid. So if you had the bundle and you had a bunch of bids, say the bundle bid was 20, and then each roll up had these individual bids, you would reallocate the revenue proportional to the amount that was bid for them. This way, hopefully each roll up is getting back revenue proportional to the amount of value that they're adding to the shared sequencing ecosystem. But you might think this has a little bit of a problem. And the problem is still bidding.
00:10:17.994 - 00:10:46.884, Speaker A: The example is, well, let's say roll up a and B artificially bid for a really high price. Say like in this example, they bid for like $10, even though they're only worth like three. Well, what can happen is two cases. So one, this roll up artificially bids higher. And then if the bundle wins, they get more of the MEV redistribution than they really should because their value is actually three. But now they're getting like ten back. So this is not good.
00:10:46.884 - 00:11:21.744, Speaker A: You can also have the case where let's say you have roll ups a and b, who are both shill bidding and are both bidding higher than they're actually worth. Well, then the bundle might not actually win the auction. And then you get all of the roll up blocks are sequenced individually, and you lose your shared sequencing. And basically your roll up a and b can ruin it for everybody else. So this isn't a very good solution. And the issue is that shill bidding can prevent the efficient allocation of MEV redistribution. Okay, so, well, let's try to fix this.
00:11:21.744 - 00:12:02.770, Speaker A: So if a and b are going to shill bid and overbid their values, well, maybe we just allow proposers to bid on only subsets of rollups. So instead of a proposer having to bid on a bundle of all of the roll ups, they can say, hey, I'm just going to bid on the bundle of c, d and e because I believe that that bundle is like, matches the value. But they think, let's say they think roll up a and b, their bids are too high, they can exclude them from the bundle. So now proposers can bid on arbitrary bundles. This can be any combination of roll ups. Shill bidders, if they shill bid too high risk, being excluded from the winning bundle. So that's not good for them.
00:12:02.770 - 00:12:49.502, Speaker A: Um, and then optionally, you know, you could burn part, part of the bid to disincentivize shill bidding. So this would be an example. Um, instead of sequencing all of the transactions, uh, you know, you would just sequence together, say, roll ups b, c and d. Um, all right, so we say, well, okay, shill bidding is a problem, but I think shill bidding actually represents, um, something that rollups want, which is a reserve price. So why might a roll up want to shill bid one? Yes, it could be just to increase their revenue, but it could also be that they have a minimum price, um, that they want to get before allowing someone else to sequence for them. So the idea is that rollups can reset a reserve price. So basically this is that each roll up has this reserve price.
00:12:49.502 - 00:13:29.644, Speaker A: And if no one bids higher than that reserve price, then the roll up sequences for themselves individually. But if someone does bid higher than the reserve price, then the person who bid higher will win and they get to sequence for that roll up. And a very interesting thing about this is that the reserve price can be dynamically adjusted. So you can think of a few extremes. You could think of a roll up who wants to participate in a shared sequencer, but maybe is in like a transitionary period. They could set the reserve price very, very high at first, maybe caution or protect themselves from something and then lower it as time goes on. Reserve prices could be adjusted based on like some oracle of price, et cetera.
00:13:29.644 - 00:14:12.658, Speaker A: So these have a lot of flexibility and they're pretty powerful. And the point here at the bottom is what I call ad hoc shared sequencing. So ad hoc shared sequencing is basically a marketplace for roll ups to sell the block proposal rights by the slot. So this means that a roll up can decide to participate in this shared sequencing market. Um, for each individual slot, they can decide to sequence themselves for slot one and then do a shared sequencer for slot two, et cetera. Um, but you can, but you might say, okay, there's a couple of caveats. Um, you say, well, how do you actually implement this? So if you'll notice a couple of slides ago I said that proposers can bid on any combination of bundles.
00:14:12.658 - 00:15:16.804, Speaker A: Well that might work for like when you have like five roll ups, but when you start to get to 100 or a thousand, you have this combinatorial problem where you have so many combinations, and how does this work? How are you going to possibly find the most optimal allocation for all of the roll ups? So the solution is that you can just find a good allocation, something that's just good enough, e. G, one bundle plus a few individual roll ups. But you run this auction well enough in advance that you give users time to find a better one. So for example, if whoever is running the auction finds a certain solution, and then a few minutes later someone else is actually, here's a more optimal solution that produces even higher revenue for all of the roll ups. You can then switch to that other solution. But an important requirement of that is that you need to run the auction well enough in advance to give people time to do this and then the bids also need to be public. But if these two requirements are met, then it's very easy to check if a certain allocation is more profitable than a previous allocation.
00:15:16.804 - 00:15:55.214, Speaker A: So, okay, that's problem one, and there's a solution to it. But you might say, okay, well, if the auction has to be run so far ahead of time, well, bidders don't know the value of the blocks. So this is where it's very different than like proposer builder separation today, where blocks are produced, you know, just in time, only milliseconds before they need to be sent. You say, well, bidders don't know the value of the block, so they have to bid on the expected value of the block. But the expected value of the block probably isn't going to change. So MeV itself can be very spiky, but in the expected long run, you don't know which slots the MEV is going to spike or not. So you have to bid on this kind of flat expected value.
00:15:55.214 - 00:16:32.914, Speaker A: Well, if the expected value is all the same, then the bids are always going to be the same and the same people are always going to win the auction. So have you really done much here? Because we're just going to get the same builders over and over again. The solution, we can run a lottery instead of an auction. So let's dive into what that looks like. Okay, so we will sell lottery tickets. You know, we'll start with some starting price of the lottery tickets and basically, so we'll sell these lottery tickets for some price. There'll be a cap on the number of tickets for each sale and there'll be initial ticket prices.
00:16:32.914 - 00:17:31.216, Speaker A: If all of the tickets were sold for some lottery, then you raise the price in the next round. If there were significantly fewer, then you lowered the price. So this way the price of lottery tickets is dynamically adjusted over time. And then you take all of the bundles that were bid on and you find some sort of revenue maximizing combination of the bundles. If there are ticket purchasers who have bid on bundles that don't make it into the final bundle, like let's say I bid on to billed for roll up a and b, but actually a bundle for a, B and C one, well, then I'll be refunded since I bid on roll up or the bundle a and B. And then finally you randomly pick tickets from each of the winning bundles. So, for example, if you have a bundle of roll ups a, b and c, and the bids for that bundle were like eight, nine and $10 you would randomly pick from the bidders of eight, nine and ten to see who actually gets the rights.
00:17:31.216 - 00:18:15.204, Speaker A: And this can also be weighted on the bid, you know, so, for example, if someone bid really low, only $1, they would have a very low chance of winning this randomized lottery. All right, so finally, just wrapping up the final portion of this is, we say, okay, so we have this mechanism where we can do Mev sharing. We run this auction, or this actual lottery is based on these combinatorial bundles. And in this way, these bundles are capturing the actual value that rollups have. And we're returning this value back to the roll ups. But how does this actually integrate into consensus? So, a few things. One is proposer attester separation.
00:18:15.204 - 00:19:14.166, Speaker A: So, execution tickets, this works very well with execution tickets because the proposers are not randomly elected, but they're people who have to buy these lottery tickets. And so parties bid for the right to become a proposer, just like the parties are bidding for all of these different bundles. So this is how we implement this lottery into consensus, like proposer selection. What about censorship resistance? So a really good thing about how allowing proposers to bid on multiple bundles and not have to bid on the entire bundle of all rollups is that you get some better censorship resistance. So, for example, some roll ups, maybe privacy roll ups or other roll ups that might have, say, OFAC Sanct sanction transactions on them. A lot of proposers might not want to sequence for them because they don't want to deal with that risk. So if you allow, you know, multiple proposers to propose at once, you can have proposers that say, hey, I don't want to touch, you know, this privacy roll up, and they won't bid for it.
00:19:14.166 - 00:20:09.554, Speaker A: But you can have other proposers that will bid for it who don't mind these sanctions. So this is a really important thing for censorship resistance, is that you don't have just one party sequencing for everybody, because that one party might not align with the incentives for all of those roll ups. Another example might be you have a roll up that wants to do first come, first serve ordering. Well, maybe some proposers, they don't want to deal with that because that's not revenue maximizing for them, but a proposer that values first come, first serve ordering will agree to sequence for them. And then finally, an open question is, well, how do you actually support all of these simultaneous proposers inside consensus? So, this is personally something that I am very actively working on right now. The idea is that, okay, you can naively basically just run. So if you have n proposers, you could just run n versions of consensus all at once.
00:20:09.554 - 00:21:05.602, Speaker A: That would be a naive way to do it, but, you know, there's probably a lot more efficient ways, for example, aggregating things or using some sort of a zero knowledge proof to prove that a proposer's block is valid, etcetera. But this is a pretty open, open question. And then finally, just some final thoughts are that, you know, how should we actually redistribute that revenue proportions to different roll ups? Um, this is an open question. Um, you could also, um, you can imagine a future where maybe you have tight knit communities like super chains or hyperchains, and they all participate as a group. Um, that's very possible within this framework. Um, you could say, okay, well, is this compatible with based sequencing without making changes to the ethereum? L1? Uh, so this goes back to several slides ago when I said you have this layer 1.5, and I'm like, well, why would you have this layer 1.5?
00:21:05.602 - 00:21:32.934, Speaker A: Uh, this is one of the big reasons is that you can actually do based sequencing with that layer 1.5 without having to make core changes to ethereum. So, and to be fair, that is what espresso is doing. And then finally, um, you know, how often should you run the lottery? Obviously the lottery can be very complex. You're trying to optimize for this combinatorial auction. Uh, so the more you run it, the more complexity it has. But also, you know, perhaps the better, the better reflection of price that you get.
00:21:32.934 - 00:22:10.064, Speaker A: So anyway, that is all I have. I guess a summary, a takeaway of this is that you can redistribute revenue among roll ups using a mechanism where you allow multiple proposers at once. So instead of having one single proposer for all of the roll ups, you allow different people to bid on either individual roll ups or bundles of those roll ups. You choose the most optimal allocation based on revenue, and then you have multiple proposers, and this has a lot of benefits like censorship, resistance, you know, better, better, more proportional allocation of revenue, et cetera. Anyway, thank you very much.
