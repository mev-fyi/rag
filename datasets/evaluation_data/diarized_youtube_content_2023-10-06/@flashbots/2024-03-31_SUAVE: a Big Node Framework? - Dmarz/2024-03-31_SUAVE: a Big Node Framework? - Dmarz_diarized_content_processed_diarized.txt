00:00:02.160 - 00:00:20.102, Speaker A: Cool. All right, last talk of the day, you should have a notepad under your seat. We're going to be doing some differential equations. No, just kidding. There will just be a couple jokes, some shilling, and then maybe a panel, I'm not sure. Okay, cool. Yes.
00:00:20.102 - 00:00:55.074, Speaker A: So suave a big node framework. So if you haven't been around all day, often we've been talking about this framework of small and big nodes. The TLDR is, it's a much simpler sort of mental model for thinking through protocol actors. Instead of having, like 15 different actors all across multiple different domains, you have two, you have big nodes. These are heavy resourced machines. These are typically block builders, sequencers. They potentially run multiple vms and benefit from the network effects of operating multiple vms.
00:00:55.074 - 00:01:36.160, Speaker A: They also do things like data availability, sampling, and generating ZK snarks, all for the small nodes who are validators of chains. And they sort of take this information, they will just validate the blocks that come out of these nodes. Cool. So let's get into it. So what happens when small nodes and a big node love each other? Well, you get a scalable blockchain. What happens when small nodes and big nodes love each other? That's plural. Big nodes, you get a scalable, decentralized blockchain, and this is basically the endgame.
00:01:36.160 - 00:02:24.224, Speaker A: And so multiple paths sort of lead to this world where we have a couple big nodes producing rocks and just tons of small validators validating these blocks. And some of the key points are you need one honest builder to serve the network for liveness and censorship resistance. We only need two for an efficient market, and we just need an honest majority on the validator set to remain decentralized. So why do big nodes need small nodes? Well, they're searching for validation. Joke from quintus. So, do big nodes and small nodes always form a happy union? There's two ways to look at this. One is l one PBS.
00:02:24.224 - 00:03:10.004, Speaker A: The other is l two. So, sequencers generally, we haven't seen too many issues with sequencers and l one validators becoming too annoyed with each other. And also generally on l one, we've also seen that this union is pretty happy. Blockbuilders make validators much more money. Validators now don't need to do this heavy computation that would probably take them ages to be able to spin up, or they would most likely outsource anyways. There's one small exception of the unbundling attack, which happened. I won't go into it, but someone spun up a validator and then abused some trust for the blockbuilder because of a bug in the boost protocol.
00:03:10.004 - 00:04:05.044, Speaker A: But yeah, so we talk a lot about this big node and small node union, and particularly in the context of PBS. But one thing we don't talk a lot about is how users fit into this picture. So we're going to dive a bit into some of the ways in which users are perhaps disadvantaged in this union with a case study on the big, bad, big nodes on Ethereum. So if you've ever read the Daily Mev, it's a very hot newspaper here in London. So one of the concerns is builder centralization. And so, as we mentioned, we just need two for an efficient market. We've already reached points where there have been builders that have gotten over 50% of the blocks won in like, a seven day period, I believe.
00:04:05.044 - 00:04:45.088, Speaker A: And so while we only need two, and that still leaves room for two, that's great. The jump from, I would say, like, from ten to 50%, or even one to 10% is much larger than the jump from 50% to 100%. Already, anecdotally heard that builders that are. One of the builders that has gotten over 50% is self limiting the amount of blocks they won, which is sort of a story we also hear with liquid staking pools. Another one is builders leaking private transactions. This has happened on multiple occasions. A user trusts a blockbuilder with their transactions.
00:04:45.088 - 00:05:12.850, Speaker A: There's an agreement, they won't leak it, and for some reason it comes out. Um. Another one is builders leaking block data so often dirt. Well, there. There's been a few scenarios where. So at the end of the block, there's still some, like, arbitrage left on the table. So block builders are trying to capture this by giving, you know, information or the ability for searchers to back run the entire block.
00:05:12.850 - 00:05:52.514, Speaker A: And while that's great, when the user consents to this, you know, you plug in an RPC, you know where you're sending it to. They publicly advertise that this is a functionality they do. Some blockbuilders are not advertising this functionality, and they still do it behind the scene. And additionally, we have no observability into this type of behavior, so it's potentially risky. Additionally, you can imagine really bad scenarios where, like, if there's a white hat rescue transaction involved in the block, this now gets leaked, and it's concerning builders back. Running user transactions is another one. There's multiple order flow auctions on the Ethereum network today.
00:05:52.514 - 00:06:32.484, Speaker A: This is a way for me as a user. I submit a transaction I let a network of searchers submit back, runs this service, then picks the best one and sends it to blockbuilders. We've seen some scenarios where block builders are back running these transactions as well, when there's still Mev left on the table and they're not attributing it back to the user as these protocols were designed to be. Builder verticalization. This is also a story as old as PBS. So there's verticalization between searchers and builders, builders and relays. Now we're also hearing stories of builders also directly petitioning validators to vertically integrate.
00:06:32.484 - 00:07:26.766, Speaker A: Yeah, and then builder incompetence. This is just, you know, it's hard running a big node, so it's hard to estimate the amount of value that's been lost by hiccups in builder infrastructure. Okay, so taking a step back, what properties do we want from the markets? We mentioned liveness, so we want it to be expensive to cause miss slots. We've already seen relays which operate in optimistic mode, failing to demote builders who have submitted invalid blocks, causing to, I think upwards of seven to ten blocks have been sent to the network that were invalid. And, you know, the chain doesn't halt, but there are no transactions during this period, which is bad censorship resistance. So there's multiple mechanisms there that are being worked on. So CR lists are a popular one.
00:07:26.766 - 00:08:12.344, Speaker A: Also, multiple concurrent blockbuilders or proposers is another interesting space, user protection. So encrypted mempools and then credible compute. As a user, I would like to know that what the builder advertises is what's actually being run on my order flow. And then there's a couple other ones like revenue maximization, geographical decentralization to avoid regulatory capture, and permissionless, which, permissionlessness, which we won't go into. So there's two relevant trends here. We expect big nodes to continue to be a thing and to continue to become larger and larger. Searchers are becoming more sophisticated, solvers are becoming more sophisticated.
00:08:12.344 - 00:09:20.124, Speaker A: We even have ZK provers and ZK prover markets that are now coming online, which are additionally requiring more and more resources to do their job properly. And then lastly, we also expect it to be useful to be able to hook into this logic in a much more customized manner. And so that is basically you want your application to hook into this big node block production process. So one example of this is the Cal swap protocol. Users send in intents and then solvers find the best routes through these intents to match users so they have a piece of off chain infrastructure which scores these solutions that solvers send in. And it's the case that often, or not often, but sometimes, because they score these solutions on top of block simulations, where it actually gets simulated, where it actually gets inserted in the block once it lands on chain, is actually subpar compared to a solution they threw out. So this is just one example of how being able to more intimately hook into the block construction logic is ideal.
00:09:20.124 - 00:09:57.644, Speaker A: Again, though, to be able to use this functionality requires more resources and to be a bigger node. So we believe obviously that suave is the answer to both of these trends. We want to satisfy these ideals and then also provide a generalized platform for anyone to be able to build on top of this and insert your own logic. So what is suave in? Sort of the joke theme. In the beginning, it's a prenup between the users, the big nodes, and the small nodes. Users want to be able to enforce certain guarantees between these parties before they are to join in. Holy matrimony.
00:09:57.644 - 00:10:29.074, Speaker A: So yes, you can think of suave as a programmable mempool that you can put your big node on top of. We provide a couple things. One is advanced privacy primitives. So from our experience in running Mevshare and some of our other off chain applications, not one set of privacy rules fits all applications. In fact, some applications don't want any privacy. Some applications, like dark pools, want complete privacy. So we give you the ability to program your privacy primitives.
00:10:29.074 - 00:11:15.284, Speaker A: Next is credible compute capabilities. So this is, as mentioned earlier, you want to be able to ensure that when you use a builder, they're doing what they said they did. And then low latency message passing is obviously another feature to basically allow communication between a lot of these big nodes. So yeah, applications on suave can take on a variety of forms, mostly in this talk we're discussing block building. So you can imagine a block building protocol as being one of these big nodes that lives on top of this programmable mempool layer. But additionally you can build trading protocols ofas searchers and even crazy stuff like AI and web. Two applications, we do have an LLM running in a TE.
00:11:15.284 - 00:12:21.192, Speaker A: Talk to me later about that. And then the other cool thing is, typically you get no composability in the off chain environment, but because we're using solidity and trying to put as many of these nodes on sort of the same cluster of hardware as possible, you actually can achieve off chain interoperability between these protocols. So what does it mean to build your application on suave? Yeah, so it's a place where you can define this off chain logic, whether it's block building, whether it's an auction, whether it's intent platform. It's also a way to define your data storage requirements. And then if you want to make your application decentralized, you can also define consensus and your peer to peer protocol as well. On top of it. And then as well, in order to keep with the current paradigm where when you deploy a smart contract on L1, you don't have to operate it anymore, you can also pay a network of te co processors to run this application for you all autonomously.
00:12:21.192 - 00:13:18.154, Speaker A: You could even do crazy things where perhaps the protocol pays for the fees itself. Yeah, and then it's also a place to define multi chain applications. So in that previous example, let's say you had protocol logic with your ethereum node setup. You could also do, you could set up a cluster of these nodes running with an optimism chain node and allow these two to operate together and settle cross chain intents. And you can keep kind of stacking these protocols on top of each other, sort of like legos. Yeah. So the TLDR is basically, if you're looking to provide your users guarantees that you're not abusing them, the swab platform provides integrity on your application logic if you're looking to provide your users privacy on their data.
00:13:18.154 - 00:14:00.894, Speaker A: We also offer trusted execution environments which are available today, as opposed to a lot of other solutions like MPC and FHE, which we also hope to support, but are just not latency compatible with the current requirements. And then additionally, we provide you a way to decentralize your application. Yeah, so that was basically it on the sort of explainer of how suave can, how you can run your big node on suave. And so this last section will just talk a little bit about what people are building, because they be building. So if you have ideas, come to the flashbots forum. We will help you validate and build them. There's already been a ton of examples on that.
00:14:00.894 - 00:14:51.884, Speaker A: The first one is we've had a PoC of integrating suave as the block builder on Astria, which is super cool. I recommend checking that out. We've had a composable block building example by Jinsook at Nethermind, who. It's essentially a protocol for a block builder to work on half of a block and then share that with another block builder, but still be able to come out with one coherent block and distribute the revenue between them. Miha from Eden Network also has built a binance, Oracle, which is a super cool primitive if you're trying to build some type of LVR minimizing off chain auction. We've also had an example of a frequent batch auction that was built. We had a hackathon project to build a blob merger which is exciting since blobs go live tomorrow.
00:14:51.884 - 00:15:33.876, Speaker A: We think this will be very interesting for rollups, especially smaller rollups who don't need the entire blob space in the next couple of months. There was also a multi chain intent application that was also built and prototyped. Then. Lastly, this isn't a prototype but we've recently been getting a lot of interest for supporting RIp 7560 which is a standard for native account abstraction and so this would allow you to set up a wallet on suave which allows you to control remote accounts on separate chains. All from that chain. Yeah. So that's it.
00:15:33.876 - 00:15:43.264, Speaker A: Yeah. Come and hack on the alpha rigid testnet. That's our suave testnet. APIs are in flux though so it is for true pirates only. Thanks.
