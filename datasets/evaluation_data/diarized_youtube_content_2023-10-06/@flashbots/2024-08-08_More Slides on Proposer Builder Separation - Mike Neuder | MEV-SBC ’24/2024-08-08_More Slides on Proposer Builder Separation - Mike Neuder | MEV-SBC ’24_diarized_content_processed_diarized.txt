00:00:02.720 - 00:00:15.166, Speaker A: Cool. Yeah. Thanks Sarah, for the invitation. Hey everyone. Hope you're doing well. Hope you're long yen. I actually was in Japan yesterday, so bear with me.
00:00:15.166 - 00:00:43.398, Speaker A: I'm on a weird time zone here, but hopefully this will be fun. Yeah. The name of my talk is more slides about proposer builder separation. This is kind of a riff on the title of an article Barnaby wrote called more words about proposal builder separation. So yeah, um, it's a bit of a survey talk. I'm not going to introduce any new concepts. It's just stuff that um, we've kind of been talking about and writing about, trying to fit it all into kind of a few different frameworks to understand how these pieces fit together.
00:00:43.398 - 00:01:02.440, Speaker A: Um, which is why there's a bowl of Alphabet soup. Um, I'll try and cover most things, um, without too much, um. Yeah, detail. So hopefully everyone can follow along. But. Right. So before jumping in, I just wanted to shout out kind of some of the many people involved in this line of research.
00:01:02.440 - 00:01:36.048, Speaker A: It truly does take a village. And I think this topic specifically has seen a ton of engagement kind of in the ecosystem broadly, which has been great. So first hat tip to Barnaby for being a great Kol. This is an acronym I learned from TINA, which is a key opinion leader. I think that's right. And yeah, Barnaby has kind of been leading the charge, but kind of the direction of the research and has been doing a great job summarizing things. Julian, Tomah, Francesco and everyone has been working on a bunch of inclusion list proposals.
00:01:36.048 - 00:02:03.510, Speaker A: There's like, if you're following ETH research, there's like a new proposal every week which has been kind of, maybe too much, but it's been great to see that evolve. Terence and Potas. Terence is in the crowd here. Oh, somewhere who've been pushing relentlessly on the EPbs front. It's been awesome to see Elijah, Max and Malesh is in the crowd too. Have been talking about multiple proposers for like a year now. So it's awesome that it's getting some more airtime now.
00:02:03.510 - 00:02:37.770, Speaker A: But yeah, they've kind of been leading the charge. So definitely check out some of these references and many more if you want to kind of dig deeper on these topics. But again, I'm going to kind of survey the landscape and I thought it would make sense to start with kind of asking what. What we actually want from. One sec. Yeah, what we actually want from a PBS mechanism. So all of these proposals are basically different ways of the protocol, internalizing some view of MEV and how MEV is being extracted.
00:02:37.770 - 00:03:27.634, Speaker A: That's fundamentally what we're trying to do. And one of the primary reasons for this is we want to reduce validator rewards from MEV. And this isn't like a qualitative or even a quantitative judgment on validators being overpaid or anything, but it's more about reducing the sophistication needed to be a validator. So we want the economics of being a solo staker to mirror or at least closely approximate what it would be if you're a more sophisticated entity, a well capitalized staking provider like Coinbase, for example. The second thing that feels like a core thing to preserve is neutrality. And one way of doing that is by hardening the protocol, censorship, resistance. So neutrality is this idea that a transaction that pays the base fee and has a non zero tip gets included in the chain.
00:03:27.634 - 00:04:14.024, Speaker A: That's an important thing to preserve, and one of the core principles that these MeV enshrinement mechanisms aim to achieve. And this kind of is the time in my talk where I use this quote, which is a quote I kind of bring up every time, and it's from a Vitalik post in 2021. It says, block production is centralized, block validation is trustless and highly decentralized, and censorship is still prese, uh, prevented. So, yeah, this is kind of from the beginning. You know, the first half of this sentence is talking about reducing sophistication, making sure that solo staking is still a viable form of participating in the network. And you have decentralization. The decentralization is like a means to the end, the end being censorship, resistance, and credible neutrality of the protocol.
00:04:14.024 - 00:04:39.746, Speaker A: So I still view these two things as very core when we're considering these MeV proposals. And I'll kind of focus deep on each of them moving forward through the rest of the talk. Now, there's a few other things that often get brought up. The first is removing relays. Relays are these trusted third parties that currently broker the exchange between a proposer and a builder. Um, people talk a lot about how these are kind of points, single points of failure. There's trust.
00:04:39.746 - 00:05:28.192, Speaker A: And so kind of in the spirit of minimizing trust and, and reducing our reliance on these, on these actors, removing the relays is like, definitely a desirable thing. I'm not sure I'm convinced that any of the proposals will actually do so, but this is something that gets brought up a lot. And lastly, um, I put maximally burn eth in question mark. Um, as you'll see, a lot of these proposals kind of end up in a situation where you have some oracle of the amount of MeV being produced during a block. Typically the most neutral way of dealing with that MEV is to burn it, because there's no real reason it should go anywhere except get destroyed. So this isn't burning for the sake of burning, it's more burning for the sake of endogenizing that value and capturing it. And this is useful to think about in terms of efficiency.
00:05:28.192 - 00:06:02.602, Speaker A: The protocol should be efficient and aware of the MEV it produces in order to have visibility into what goes into the sequencing of the transactions. And you can also think about efficiency as economic efficiency of transactions like the highest paying transactions should get included. People who have. You shouldn't have many transactions that end up reverting on chain these types of things. So all of this comes into view when we think about how to design a PBS system for the protocol. Cool. So with all this in mind, I'm just going to run through a list of six different proposals.
00:06:02.602 - 00:06:28.306, Speaker A: Don't worry too much about the details. If you haven't seen, if you haven't seen these or read them, there's like posts about each of them. I'll highlight kind of one thing about each as we go through, and then the rest of the presentation will be trying to like put these into context with each other. So I put epbs oldie, but. Goody. So EPBS has been discussed since before the merge. Vitalik is a post from called, I forget the exact name of it, but yeah, it's pre merge.
00:06:28.306 - 00:06:50.434, Speaker A: And the whole point was to separate these roles of consensus and execution. So in this picture here, the kind of one thing I'll point out, does this have a laser pointer? I don't think so. Oh, no. Okay, whatever. The one thing I'll point out is on the. Oh, I think I can use my mouse. Yeah, nice.
00:06:50.434 - 00:07:18.070, Speaker A: So the Cl block is the consensus layer block. This is kind of the portion that the validator is responsible for producing. The execution payload is that actual set of transactions. So this is like the state update that the builders build. And it takes a lot of sophistication to sequence that part. So EPBS is just this idea of having, splitting these blocks into two separate things, having attestations over both of them as part of the core protocol itself. Execution tickets.
00:07:18.070 - 00:08:13.070, Speaker A: This is kind of a very similar idea, but instead of the beacon block and the execution block being kind of produced by the same, well, being, one object, from the view of the protocol here you have two different proposers. You have the beacon proposer and the execution proposer, that's the core difference. The selection of the execution proposer happens through this mechanism of a ticket, where a ticket is randomly selected as a lottery. That's the main idea there. Execution auctions, again, don't worry too much about following each of these diagrams super precisely, but execution auctions is kind of similar. The protocol gives this proposing right to the beacon proposer still, but now the proposer is forced to auction it off in advance. And the difference here between tickets and execution auctions is who executes the auction itself.
00:08:13.070 - 00:08:47.046, Speaker A: So in tickets, the protocol is doing the auction. In this execution auctions thing, the beacon proposer is doing the auction. That's the only difference. And again, we'll highlight that moving forward. Concurrent proposers, which has kind of been the meta on Twitter for the past few days, is this idea of having multiple people produce blocks, each slot, instead of a single proposer. So there's kind of many different things that come into discussions around this. Mainly, if you have two people producing blocks, how do you get a final order on the sets of transactions that they each have? You could do deterministic ordering.
00:08:47.046 - 00:09:22.590, Speaker A: You could have, like, system where the transactions that they produce turn into a final set, and then you reorder those kind of arbitrarily. But, yeah, that's one of the things we'll talk about. No free lunch. I ls this diagram has way too much going on. But the key point is that inclusion lists are this idea of one proposer being able to enforce some constraint on the next proposer. So even if, um, they're not building the block themselves, they specify a set of constraints for the slot n plus one proposer. Um, that's, that's kind of the basic inclusionless design.
00:09:22.590 - 00:10:01.478, Speaker A: The more complicated inclusionless design just has a committee of inclusionless builders. Again, this is a diagram with a lot going on, but the focus here is this, um, this tan diamond on the left, which shows that there's a committee of inclusion list proposers. You aggregate all of the committee's views together to make the final inclusion list, and that sets the constraint for the contents of the next block. Right. So that was kind of the Alphabet soup portion. And now, hopefully, we can see how these things fit together. But before we get there, this is a very important question, which is, do you know what Jigglypuff looks like? Hopefully you do.
00:10:01.478 - 00:10:32.696, Speaker A: If you don't, this is what she looks like. This will make sense in a second. Cool. Okay, back to the MEV stuff, right? So we have our two things that we're trying to do right, we're trying to reduce sophistication and we're trying to preserve neutrality. So now I kind of think of this as a 2d space that we're fitting our six different designs into somewhere and how they kind of relate to these two things. And I view epbs and concurrent proposers as kind of right in the middle. Right.
00:10:32.696 - 00:11:06.452, Speaker A: They're both mechanisms to reduce the sophistication required to be a validator in the system. They kind of encourage you to outsource your block production in some way or to make the block production simpler if everyone's producing blocks at the same time. And they both try and preserve the neutrality of the protocol. Now, execution auctions and execution tickets, I would say, are kind of on the left side of this space. They're more about reducing sophistication. They're trying to say, hey, there's rewards from mev. These rewards are very difficult to extract.
00:11:06.452 - 00:11:45.280, Speaker A: So we're going to make that extraction process explicit in the protocol and everything else they kind of ignore. And then inclusionless and fossil, the kind of two inclusionless proposals, are more on the right side of this figure. So they're more about preserving the neutrality. They're not necessarily reducing the complexity because now you might have multiple inclusion lists. They have to get aggregated together, these types of things. So it's not totally clear in terms of complexity what they do. But the goal is very explicitly to preserve the neutrality of the protocol and increase the probability that transactions are not able to be censored.
00:11:45.280 - 00:12:19.036, Speaker A: Cool. Now we can start trying to connect some of these dots. Epbs to go from original epbs, as we described, to execution auctions, you sell slots instead of selling blocks. So what this means is in epbs, you have to sell. When you sell a block, you also sell specifically the contents. Like the person who buys the slot has to commit to a specific block. And this means that you can only really do the auction during the slot itself because the person competing in that auction needs to know the contents of the block while they're bidding.
00:12:19.036 - 00:12:47.500, Speaker A: In execution auctions, they sell the slot outright. And this allows you to do stuff like sell it ahead of time. This might be desirable. There's different views on the impact there. But that's how you would transition from epbs to execution auctions. To go from execution auctions to execution tickets, you change. Who actually facilitates the auction? Who's the auctioneer in this game? In execution auctions, the auctioneer is the proposer themselves.
00:12:47.500 - 00:13:32.026, Speaker A: In execution tickets, the auctioneer is more like the protocol. And so that's kind of how you move from between those two data points in the space now going the other direction. Epbs kind of depends on inclusion lists for credible neutrality. And to go from inclusion list to fossil, you kind of just take the number of inclusion lists and multiply it by a bunch of proposers. So that's kind of the relationship between the two. And if you actually think about fossil, which is this idea where a bunch of people produce inclusion lists, that sounds a lot like concurrent proposers. The difference between the two is that concurrent proposers might have stronger constraints on the final ordering of transactions rather than fossil.
00:13:32.026 - 00:14:22.774, Speaker A: So inclusion lists just say a transaction has to be included, whereas a more strict ordering rule would say the transaction is included and this is the order in which it's executed. So that's kind of the difference between, um, between the two, right. So hopefully you see where I'm going with this. Um, this is why I asked you if you know what Jigglypuff looked like. But yeah, anyway, I, again, I just came from Japan. Maybe this is like too many video game characters or something, right? So yeah, now I think it's, it's kind of worth taking a step back and saying, okay, we saw kind of how these two things fit together, this preserving neutrality and this um, reducing sophistication. Now, what are some themes that come up in the designs of these, of these systems? So one is block co creation.
00:14:22.774 - 00:14:56.534, Speaker A: So I'll just read this sentence. Fossil top of block, rest of block split and concurrent proposers allow multiple parties to collaborate on block construction. So this idea is just, you get a bunch of voices in the room instead of having a single leader. This reduces the monopolist power of the proposer and hopefully like leads to better censorship, resistance properties, maybe leads to more competition, et cetera. Um, another really common theme is committee enforcement. So I'll read this sentence. Timeliness committee asserts over builder payloads, attesters enforce bid thresholds, validators assure availability and validity of IL objects on gossip.
00:14:56.534 - 00:15:45.336, Speaker A: So this is the idea that like our security model for this whole system is an honest majority, right. And using that honest majority to curtail the power of a single party in the system is like a very common theme that comes up in all of these designs. And lastly, we have protocol incentives, so missed slot penalties to punish timing games burning is a neutral way of internalizing MEV and conditional tips to disincentivize censorship. I don't have time to talk about conditional tips too much, but ask Milesh or Max, if you're interested. But, yeah, this is kind of like the third tool in our toolkit that's very much part of these designs. So that's kind of what we're working with. But there's also some fundamental trade offs that feel kind of inherent to the design space, and we can't really have both sides of them.
00:15:45.336 - 00:16:12.718, Speaker A: So, for example, auction timing. So jit means just in time. And this is the regime that we live in today. There's a block auction that takes place during the slot itself, so it happens every 12 seconds. And this is great for competition, because now the builders compete every slot, and they have to be able to win the auction in order to. To be the producer of the block. But it has this value in flight problem, and that is these blocks change value dramatically over the course of a slot.
00:16:12.718 - 00:16:58.740, Speaker A: And in particular, right at the end of the slot, where, like, a lot of the arbitrage happens, the value might change dramatically. And this makes it very prone to sophistication and latency and kind of this vertical integration that we're seeing today. X anti, which would be selling the slots ahead of time. Like, if you just did the auction, like, ten minutes before the slot actually happened, you might have lower sophistication, meaning the value doesn't change underneath you. You don't have to be co located with the builders. But this predictability could expose sort of a different threat model, which is if a builder knows that they have multiple slots in a row, they can do multi slot MeV. The simplest version of this is you just censor some set of transactions for the first block and include them in the second block once more time has elapsed.
00:16:58.740 - 00:17:31.690, Speaker A: That's kind of like one thing that it feels like when you design this auction, you have to decide where in time it's happening. And this is one of the trade offs that I don't think you can have both of. Another example of this, or of this fundamental trade off, is these transaction inclusion rules. So you could think of inclusionless rule that says if you have an inclusion list, a transaction that lands in any of them is guaranteed to become part of the chain. And this has stronger censorship resistance properties because it means, oh, I just need one person building an inclusion list to want my transaction in. And that's good. Good enough.
00:17:31.690 - 00:18:17.586, Speaker A: But this is potentially more gameable, because then let's say there's a deterministic ordering of transactions. Once they land in the list, you only have to land in one. So you might want to bribe someone to let your transaction in late, you might play timing games around when you release the block, et cetera. A different transaction inclusion rule, given the same version that we had. If you have any inclusion lists, and you need maybe a quorum like 51% or two thirds of them to include your transaction, this might have weaker inclusion guarantees, but also has less game ability. There's less mev exposed by this type of thing. So how the transactions actually end up getting included feels like an important trade off that needs to be made and then just partial synchrony.
00:18:17.586 - 00:18:54.270, Speaker A: If you have faster synchrony assumptions, then things are more efficient. But if you take more time, then you have better liveness guarantees. The issues here is like, if you reduce slot times way down to 2 seconds, then this could impact your aliveness. For example, if someone isn't able to download the block in time, they can't decide which is the true head of the chain and they end up voting incorrectly. So that's kind of another fundamental trade off that is made when thinking about these designs. Cool. So the last minute, I'll just talk about three different routes that we could take moving forward.
00:18:54.270 - 00:19:53.658, Speaker A: The first is, and these are kind of, these have been discussed broadly before, but I think it's worth doing so in the context of the talk. The first is incrementalism. The simple approach would be the one we're on now, which is you start with block auction epbs, which is mev boost of today, and you add inclusionless, you enshrine that, then you go to slot auction epbs, and then you go to execution auction. There's a clear, incremental set of steps you could take to get towards the end game if you want execution auctions as the final version of the protocol. Um, so Max and paradigm have been really kind of vocal on Twitter in the past few days, pushing for this kind of version of the world where you have concurrent proposers, deterministic ordering, and miss slot penalties. So this is kind of one way I could see us progressing to that. Um, another option is what I call Meckenstein, um, or frankenism, which, yeah, fun play on words.
00:19:53.658 - 00:20:25.394, Speaker A: Um, and this idea is like, okay, let's take fossil, which is our committee based inclusionless design. Let's do just in time top of block auctions and then x anti rest of block auctions. So it's pretty clear why this is like a Frankenstein of a bunch of different things, but it might solve the value in flight problem along with kind of the multi slot mev things that we were talking about before. So I'm super excited about this, if you want to talk about it after. Super happy to think on it. Yeah. And I'll just conclude with a set of questions that are important to ask.
00:20:25.394 - 00:20:59.898, Speaker A: Who's involved in block construction? When does it take place? How are the transactions sequenced? And I think number four is something that people don't ask enough, which is, is this complexity worth the enshrinement? Right. So all of these things impact the fork choice rule. Fork choice is just how you decide what the head of the chain is. And all of these objects, you know, take votes, they take some amount of network latency to propagate these messages. And all of the complexity might. Might be worth avoiding, if we can, at all costs. And question five is the most important.
00:20:59.898 - 00:21:11.790, Speaker A: Are you having fun? So, thank you very much. I refer you to this block construction session document that Barnaby wrote. Again, a ton of this was coming out of these discussions, so, yeah, thanks very much.
00:21:20.460 - 00:21:36.996, Speaker B: Hey, thanks for the talk. How does the concurrent proposers design tie with reducing the sophistication of the validators? I mean, is it going to be implemented through EPBS or any kind of a PBS implementation? Again, yeah.
00:21:37.028 - 00:22:06.890, Speaker A: So I think there's a few ways. I think the way Max would respond to this question is by saying there's less sophistication needed because actual, like, there's less value to be extracted from being a block producer. Right. If everyone's producing a block, then you don't really have that much say over the end game ordering of the transactions. So you should just produce the block based on your local view of the mempool and call it a day. There's this new proposal called Braid that he published, like, two days ago. I haven't even read it yet.
00:22:06.890 - 00:22:18.130, Speaker A: So maybe things have changed since then. Maybe Milesh will talk about it. But, yeah, I would say that's kind of my initial reaction. Any additional questions?
00:22:21.870 - 00:22:25.770, Speaker B: Why were the MCP emojis cows?
00:22:27.550 - 00:22:32.010, Speaker A: So I use, whenever I refer to a staker, I use a cow. Cause steak.
00:22:32.390 - 00:22:37.890, Speaker B: Ah, nice. But there's a steak emoji. Yeah, it's more gruesome.
00:22:40.080 - 00:22:41.100, Speaker A: Both work.
00:22:42.960 - 00:22:44.140, Speaker B: That's all I have.
00:22:45.320 - 00:22:46.660, Speaker A: The important question.
