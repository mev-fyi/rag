00:00:09.610 - 00:00:28.680, Speaker A: So thank you, everyone, for coming. I think the purpose of this conversation is to talk about Mev and the interactions out there Vitalk and the interactions of it with the consensual layer and the design. But before we start, it might be worth going around the room and doing intros. So, Chris, you want to start?
00:00:29.290 - 00:00:41.110, Speaker B: Thanks, all. I'm Christopher. I previously designed the IBC protocol for the Cosmos project, which has some interesting relevance to cross domain MOV. And now I work on the Nova protocols.
00:00:42.090 - 00:01:06.558, Speaker C: I'm Anska I'm with Quilt, which is a small Ethereum code development team with Consensus and the foundation. And I basically just helped design kind of some of the iterations for Ethereum, mostly on the execution side, actually. But of course, Mevs kind of permeates everything. So, yeah, a lot to take into account there as well.
00:01:06.724 - 00:01:11.300, Speaker D: I'm vitalik, I guess. I hang out and give presentations from time to time.
00:01:13.030 - 00:01:15.780, Speaker E: And I'm Justin from different foundation research.
00:01:16.230 - 00:01:48.030, Speaker A: Nice. So the way that we can structure this conversation and feel free to rearrange as you wish is that we can talk about, first the effects of Mev and the design space around Consensus for how Mev is created, and then we can talk about mitigations at the Consensus layer and then about where things are going. So maybe to start, it would be worth hearing, how does Mev affect your day to day when working on Consensus related research or client design or implementation? Maybe starting with Chris.
00:01:49.250 - 00:02:58.034, Speaker B: One of the questions for me as someone working on, say, a protocol that is not Ethereum, is, are there interesting points in the design space that we can explore that are different, that would provide useful experimental data for future protocol designers? The honest answer after the morning of talks and last few days for Me is that I'm not sure if there are. Your presentation, Justin, on combining different steps of slots to prevent certain kinds of attacks seems to me to be very similar to the discussions we're having around pipelining threshold, decryption and tendermint. And I'm starting to wonder if some of these constraints are really like information theoretic. But even so, there might be some cryptographic choices or, like, choices on the mechanisms of implementation, especially if they're Cryptonomic or crypto economic instead of cryptographic, which change equilibria of how these systems would work in practice and how centralized or decentralized they might be. So one question for me is just, are there interesting different points in the design space? Can we predict equilibria just by looking at those points without actually building the systems, or do we have to build the systems and run them in production for a while in order to see what happens?
00:02:58.232 - 00:03:05.560, Speaker A: And maybe as a metapoint, because we have a lot of questions to go through, and maybe we'll have also questions from the audience. Let's try to give answers. One, two minutes.
00:03:06.810 - 00:03:39.140, Speaker C: Sure. So, for me, I think day to day, it's probably a little bit less than for most other people here whenever there are topics. Like for example, right now we're looking into resource pricing on Ethereum like multidimensional 50, 59 mechanisms and every time you basically have anything that even remotely touches the intent of lay on Ethereum you always have these interactions. And so you just always have to make sure that at the end of the day whatever systems you design basically stay intentive compatible. So I think that's primarily where it touches what I'm doing.
00:03:39.670 - 00:04:36.420, Speaker D: Yeah, and I think I definitely agree with all that. Like Mev does just touch many parts of the core of Ethereum protocol design and even other layers of the Ethereum ecosystem it affects how you think about resource pricing is one example and in that case kind of both positively and negatively. Right? So one example there is the possibility of proposal builder separation and specialized builders makes it easier to justify including and getting the benefits of multidimensional pricing, for example and then thinking about things like the structure of when proposals happen like how the cycle of one slot and the next slot works. You have to think about is that incentive compatible and how do those incentives interact with the incentives to get transactions included or get Mev for yourself?
00:04:37.670 - 00:05:20.850, Speaker E: I guess for Me on the day to day it's just very intellectually stimulating because it's an evolving story and it forces you to rethink the fundamentals and the end game. I guess it's also a forcing function to kind of prioritize things. So for example, Mev is incentivizing people to attack Ethereum post merge because proposals are public. And so one of the things that I've been trying to prioritize is the secret leader election to at least have ready in our back pocket if indeed the beacon chain does get unstable.
00:05:21.750 - 00:06:11.058, Speaker C: Maybe just to very briefly say I think because you said intellectually stimulating I think it's really interesting that I think before Mev we usually whenever we kind of made design choices on Ethereum they were purely kind of limited by whatever is technically possible and then we basically tried to make the optimal choice within that scope. And now for the first time we basically have this economic constraint, right? And basically the design space is very much narrowed now where basically we have to also take into account all the kind of incentive compatibility. And I think it really is very healthy for us to basically be forced into this, because now, as we're talking about also with other things like liquid staking and whatnot, there are more and more of these more economic incentive, kind of forcing functions that narrow our design space. And so it's really kind of less and less that it's really bound by just what's technically possible. But yeah, this is really interesting.
00:06:11.144 - 00:06:36.170, Speaker A: So if Mev act as a feedback loop like a force back into the consensus layer design how should somebody designing consensus protocols be thinking about where mev can manifest and what should they do about that. I'm curious to hear maybe a summary from Justin's previous talk because some people were not here on how you're thinking about it and then I'm also curious to hear for non ethereum chains, right?
00:06:36.320 - 00:07:13.030, Speaker E: So I guess mev is a bit like flash loans, right? They help exhibit vulnerabilities leaks in your system and I guess it's just a muscle you need to train when you look at a design like try and try and think mev. And I guess the trdr of my talk is for all the known mev leaks there is cryptography that can solve it. So the heuristic is we're going to make it with cryptography because every time we find a leak we can patch it. So yeah, that's the trdr.
00:07:13.530 - 00:07:15.990, Speaker A: How does that change outside of ethereum?
00:07:16.890 - 00:08:17.210, Speaker B: I think maybe one way it changes is more practical or engineering wise rather than theoretical. I'm not actually sure if it changes in the theoretical information way. In a practical way it's maybe easier to use certain primitives because you can change more of the system. So for example, in using threshold decryption where we also want guaranteed decryption, as you're talking about, we can have threshold decryption shares allocated exactly proportional to stake among tendermint validators and we can inline basically or pipeline the threshold. Decryption into the stages of voting so that you're always if you have the usual liveness assumptions that you're making already, you are guaranteed to be able to decrypt transactions. So I'm not sure that that's different in the asymmetric time goes to infinity way. I think maybe it's different in the practical way and maybe it's easier to try some of these systems out and provide data on just like what other economic layers form in practice above them and if that impacts the consensus design constraints.
00:08:18.190 - 00:08:43.540, Speaker A: So we've heard of the term conservation of mev that no matter what you do the mev kind of moves around the stack. So I wonder, just to play devil's advocate, is it possible that while in the process of patching the system and introducing new mechanisms to combat mev form A, you introduce mev in form B and that is harder to mitigate and I have some ideas around that but don't want to influence the group?
00:08:43.990 - 00:09:27.700, Speaker D: I don't think that's necessarily true. There definitely are cases where you have different mechanisms to do the same thing and some of them actually do just have as much mev or much more mev than others. Auctions are definitely one good example of this. Even just like one very trivial example is how large is the liquidation bounty on some collateralized thing, right? Like if you set it to 20% instead of 10% you've created twice as much mev. So there's definitely some choices where you're basically deciding are you giving me V to the miners or are you capturing mev to some other mechanism which is still sometimes a really important thing to do. But then there's also some cases where you actually can't have more of it or less of it.
00:09:30.630 - 00:10:01.420, Speaker A: All right, this covers, I think, a bit like on the design space. So maybe let's switch over to Mitigations. So again, we can use multiple techniques at various levels of the stack, either at the application layer like Cowswap, or at the RPC layer like flashboards, or at the protocol layer, all the stuff that Justin has said. So the question is, how do we design mechanisms that are friendly to Mev Mitigation? And how should we be thinking about that? Are there some desired properties that we're looking for here?
00:10:04.000 - 00:10:57.630, Speaker B: I mean, for me, one of the changes to the design philosophy that seems to emerge when we consider mev is that we have to think a lot about returns to Sophistication. And if sophisticated actors can make more from the system, especially if they can make nonlinearly more, then we're faced with this kind of centralizing force and I think that's a different model than we've been using previously. Like often the sort of rational actor models treat computation as this thing that just happens and you can do infinite amounts of it and that is fine when the amount of computation is kind of small or fixed size. So it's a reasonable forced order approximation. But in mev land, where we're dealing with very complex spaces of computation or computational search space, I think that assumption no longer holds and we have to rethink some of our protocol design on those grounds. Maybe that was too abstract an answer.
00:10:59.680 - 00:11:50.700, Speaker E: I can put MOV into two buckets. There's the fundamental stuff and then the non fundamental stuff. And basically the non fundamental stuff is everything that can be encrypted to prevent front running. I think what will happen is that as soon as I think 95% of transactions will end up being encrypted and non front runnable and that will make up the bulk of the block. And then at the very top, the 5% of the transactions are going to be like highly specialized and doing all the arbitrage and cleaning up all the fundamental. Mev. And it won't be encrypted and it will just be produced basically by the supply chain that was mentioned and the mev will be split to whoever does the actual work or is in a position of power to extract the mev.
00:11:51.440 - 00:12:45.790, Speaker D: I'm going to disagree with the 95% figure, I think very plausibly, under 50, basically. I just think that we often forget that the majority of stuff that people do on chains isn't like fancy hypertime sensitive DFI stuff. It's like, I want to send you some money or I want to make a CDP, I want to update an ENS name and just all sorts of just tiny random stuff. And for those things, you don't really care if you get front run and you actually want to broadcast your transaction to as many people as possible. If your wallet starts doing exclusive order flow, like you want to get a better wallet because you want to maximize the chance that your transaction will get included within the next lot because that's the most convenient for you. Now there are also other types of transactions that don't have that property, but I think both categories exist and both are large.
00:12:46.800 - 00:12:47.308, Speaker B: Right?
00:12:47.394 - 00:12:52.224, Speaker E: Well, I guess this category of transactions don't have mev to start with.
00:12:52.342 - 00:12:52.816, Speaker D: Agree.
00:12:52.918 - 00:13:05.328, Speaker E: And the other thing is that it's kind of good practice maybe if they were to opt into this encryption scheme because then it provides more, maybe more privacy for the other set of transactions.
00:13:05.424 - 00:13:13.770, Speaker D: I don't know. On the other hand, it also risks entrenching particular second layer things that you just have to be part of if you want to be a builder or whatever.
00:13:16.220 - 00:13:22.270, Speaker E: Yeah, but I'm optimistic that all this other infrastructure will be eventually public good stuff.
00:13:23.600 - 00:13:44.592, Speaker B: Is there any interesting design space to your point of the talk earlier in between like no smart contracts, bitcoin land and full programmability ethereum land where you have something like protocol enshrined AMM or other kinds of certain mev relevant economic infrastructure but don't allow full programmability? And would that change the distribution here.
00:13:44.646 - 00:14:13.400, Speaker D: Or no, I mean, I guess in principle you totally can create you don't even need to forbid other stuff. It's like for every category of stuff that people ends up doing, you just make a protocol enshrined version and slightly subsidize it. Right. And everyone uses it then. But I'm not sure that that approach is the right approach. I feel like the approach of layer separation is probably the better approach for this sort of stuff, like make it possible but in some way that's somehow one step insulated from the sensitive parts of the ecosystem.
00:14:13.740 - 00:14:37.910, Speaker C: Okay, then maybe like a related question, of course we have this vision now where basically the ethereum base layer becomes more and more just like a layer two settlement layer. And so is there any case to be made to say like maybe in the long run we want our kind of execution environment to be more of like a specialized virtual machine that maybe is in a sense more restricted and more controllable for us in that way?
00:14:38.280 - 00:14:50.900, Speaker D: I guess the main challenge there is the politics of breaking backwards compatibility, right? Because I've been yelling about banning self destruct for like two years and it's going to happen, but it's a battle.
00:14:51.960 - 00:14:55.912, Speaker C: Sure, but we could turn the current chain at some point into like a roll up or something.
00:14:56.046 - 00:14:57.290, Speaker D: Yeah, I guess.
00:14:59.180 - 00:15:25.490, Speaker E: My position on this is that we want to go with full programmability but the application layer won't be able to provide everything fully trustless and so maybe there's going to be a little delta where we want to kind of enshrine with additional consensus layer infrastructure. I mean, this may be a bad example because it's very contentious, but potentially if we can't do fully trustless Oracles at layer two, maybe we should consider doing them at layer one.
00:15:26.340 - 00:15:42.280, Speaker A: So there's a lot of shiny things that we're talking about and this can mean frequently lack of focus. So I'm curious to hear from each one of you. What do you think is the single most important thing that needs to be done yesterday on Ethereum or Anoma to.
00:15:42.430 - 00:15:44.856, Speaker E: Achieve Ssle for me?
00:15:45.038 - 00:15:54.524, Speaker A: Why? Well, as I mentioned, if you can break out the acronym yeah, basically the.
00:15:54.722 - 00:17:06.092, Speaker E: Secret leader election, the most important word is secret. So what we have on the beacon chain today is that proposers are known in advance and post merge there will be a small period of time, or maybe not so small period of time, where proposers will still be known ahead of time. And what you can do is that you can fairly easily map proposer pub key identities to IP addresses. So if you know how to DDoS IP addresses and that's something a script kiddie can do, then there's kind of two things that could potentially happen. One is like some sort of malicious attacker who wants to spend $1,000 a day just disrupting Ethereum could potentially disrupt maybe the Home Validators or things like that. But maybe more worryingly is that there's going to be quite a lot of mev on a block by block basis on the order of $1,000. And there's this attack whereby if your proposal at slot N and you DDoS the proposal at slot N minus one, you get to get the Mev of slot N minus one.
00:17:06.092 - 00:17:21.736, Speaker E: So basically you're now doubling your mev at the cost of attacking your fellow Validators. I don't expect most people to do that, but I am expecting some kind of extractors to be doing it.
00:17:21.838 - 00:17:40.590, Speaker A: Just in pushing back a bit on the Dos point, in general, infrastructure providers not getting say a reasonable person would say it's a solved problem with Sentry nodes and proper load balancing infrastructure. So I wonder why specifically the fixation of the dos part.
00:17:41.600 - 00:18:34.176, Speaker E: Well, yes, you can have fancy networking setups and the exchanges will have it, the pool operators will have it. The bad thing here is that it's more difficult to do from home and I think the clients are starting to build out this infrastructure. But it's possible that you need two internet connections as opposed to one. It's possible that you need to get VPNs and that's going to kind of add friction for home users. And it's possible that if there are going to be attacks and this might be kind of a centralization vector where Home Validators kind of throw the towel and say I'm being attacked, I'm just going to move to some exchange. So I think one of the reasons why I'm prioritizing Ssel is partly for the health of the network, but also partly for the kind of the long.
00:18:34.198 - 00:18:39.250, Speaker A: Term decentralization makes sense, vitalik. What is the most important thing?
00:18:40.420 - 00:19:07.800, Speaker D: I don't know, I think there's a lot of important things. I'll probably just go back to a kind of way that I described my own goal when I was making a presentation earlier today, which is basically just protect the really important parts of layer one and make sure that they don't centralize as a result of any economies of scale that do exist at other layers of the stack.
00:19:08.540 - 00:19:13.560, Speaker A: So how is that solved? What's the solution for that or the action item?
00:19:14.140 - 00:19:33.856, Speaker D: Action items are one is continue research on the stuff that we have already and the other is to just, I guess continue the sort of more open ended brainstorm. I feel like there's probably things other than our current ideas around layer twos and separating out builders that should be exploited as well.
00:19:33.958 - 00:19:40.976, Speaker A: Can you unpack a bit the argument around why proposer builder separation is important and maybe talk a bit about Cr lists?
00:19:41.088 - 00:20:58.428, Speaker D: Yeah, I mean, basically proposer builder separation, it separates out the proposer market from the builder market and so it makes sure that the economies of scale in the builder market don't end up spilling over onto the proposer market. And so proposers can still continue to be relatively dumb nodes, just people installing a piece of software onto a fairly simple computer and running it even while builders become this kind of crazy game where everyone keeps optimizing lots of things. One of the challenges of that is like the risk that there is a monopoly builder and monopoly builders could easily start censoring. I think there is some protection against that censoring already. Because if you censor even one transaction, then the builder would basically have to pay or either pay or kind of lose an opportunity cost sense an amount of east equal to the gas cost of that transaction for pretty much every block, which is a pretty high price, but sometimes it's not enough. And so there's this idea of adding explicit kind of further infrastructure to create more channels in parallel through which a chain can force inclusion of transactions. So a Cr list, a censorship resistance lists are one example of this.
00:20:58.428 - 00:21:16.560, Speaker D: Basically proposers could just create a list where they flag all the transactions that they see that seem to be worthy of being included and then the next block by builder just has to actually include the transaction or else that block is not accepted by the fork choice rule.
00:21:18.100 - 00:22:42.952, Speaker C: Yeah, I think I would largely agree or go in a similar direction to what Justin Vitalik have been saying. And I think kind of the way I think about it is, as I was saying earlier, we have now more and more incentive based kind of design space constraints. And I think it's really important to figure out exactly what types of centralizations basically will be inevitable, and then separately figure out what types of centralization are unacceptable for us or what types of decentralization we really, really care about and want to retain, and how can we make sure that those two kind of things overlap and keep overlapping, right? And I think right now, for example, we seem to all try and be okay with something like PBS and still that I think there's also still quite a few things to be worked out to be sure that this would actually be fine for the network. And then on the validator side, we really really want to keep decentralization and it's also not yet clear that this is within the possible design space. Right, but there are also then other things, right? I think, for example, less sexy, maybe because it's not like a current topic, but I think write up from even four years ago already, or three years ago they're talking about how right now, basically fork choice on ethereum. Is like, we have automatic rules, then we have social consensus that can override this and then we have circle that basically chooses which fork actually honors. USDC.
00:22:42.952 - 00:22:52.220, Speaker C: Right? And that would in practice override social consensus on ethereum, like in many scenarios, just because on the other side DeFi would collapse and the entire chain would crumble.
00:22:52.300 - 00:22:52.688, Speaker D: Right?
00:22:52.774 - 00:23:12.024, Speaker C: And that's also that's a completely separate example. But it's another one where basically are we okay with this? How can we influence this as a base chain? Is that something that's inevitable just in general? Right? This whole topic of how can we make sure that what will need to happen and what we really want to happen? How can we keep those overlapping basically?
00:23:12.142 - 00:23:18.810, Speaker A: And which technological solution do you think is the one that you're the most excited to spend all your productive time on?
00:23:21.020 - 00:23:35.710, Speaker C: I really don't think there's like a silver bullet. I think every one of those problems has a separate kind of design space, a separate solution. So it's really important that we just make sure we keep track of all of them and try really hard to solve all of them.
00:23:36.320 - 00:23:43.440, Speaker A: I guess it gets back a little to my point around prioritization and focus, but I'll take that Chris.
00:23:44.100 - 00:24:22.716, Speaker B: Yeah, I mean, to me, mev seems like this sort of iterated game between the protocol designers and the people trying to exploit mev. And I think it's good that we are playing this game and that both sides can. Iterate and that both sides are not fighting each other tooth and nail but also understand that there is a game going on and that only through some progression there. I think if there are rational actors with sophistication they will exploit the easiest opportunity. And there's this information flow topology all the way from some users submitting things to those transactions being settled. And if we push things to L two S, then sophisticated actors will go after L. Two S.
00:24:22.716 - 00:25:01.208, Speaker B: I have not thought enough about that problem to know whether it's easier or harder or we'll have higher or lower returns to. Sophistication it does push it to somebody else, like it's not us. So that's good. But it's also perhaps concerning. Yeah, I think it's like another case where this is clear. This Iterated game thing is I completely agree that proposer dos is a concerning problem in principle, especially if you want home operated, validators in practice and tendermint networks. It's not a priority because it's just not worth the cost of building up sophisticated systems to do it yet probably we can reason somewhat about when that might become a priority and try to fix it then.
00:25:01.208 - 00:25:16.030, Speaker B: And that kind of Iterated game modeling the actors maybe determines prioritization until we either converge to some final thing where there's an architecture that seems to be a stable equilibrium or we just keep going forever. I don't know if it ends or not.
00:25:16.400 - 00:25:39.670, Speaker E: That makes sense. And one aspect of this Iterated game is the deterrence game. And so you kind of want to have in your back pocket all these cars that you can play if you do have an attack, so that you're basically disincentivizing the upfront investment. And as you said in the case of proposer DDoS, you probably have to invest at least a month's worth of dev time.
00:25:44.940 - 00:26:14.450, Speaker A: It is a fact that we live in a multi chain world at this point. And I wonder how you guys are thinking about cross chain mev and how it affects the consensus layer decisions or solutions. For example, we'll already seeing Cosmos MAV Extractors who run validators on two chains and they ARB among the two chains Atomically, when they're elected as the proposer for both chains. So how are you thinking about that? And does that concern ethereum, if at all?
00:26:14.820 - 00:27:31.240, Speaker D: One very specific way that it might affect things is in PBS there's this discussion of are we auctioning off hashes or are we auctioning off the builder identity? Right? Like basically when you make a bid, do you have to commit to what you're going to be including in your block? And that basically forces the builder to make bids based on what they can include at that particular moment when the auction happens versus if you just leave it free. Then it's like the builders bid based on their expectations of how much MVV they'll be able to see in the next slot. And I think historically we've been generally more in favor of the approach that requires builders to include hashes because that way builders can guarantee what their revenue is going to be and that makes it easier to be a builder. But in a cross chain world, there are arguments for kind of leaving that open as well, basically because in a cross chain world, if you want it to be possible to kind of get these gains from being the proposer in multiple domains at the same time, then that only becomes possible to do inside the game. If you actually do have that free opportunity on both domains.
00:27:31.740 - 00:27:35.230, Speaker A: Is a world with MultiChain bundles a good world?
00:27:36.560 - 00:27:49.600, Speaker D: I mean, in general, I feel like a more complicated world is a less good world. But the question is what's the counterfactual? And if the counterfactual is even more incentive for people to join the biggest staking pool, then I'd rather have MultiChain bundles.
00:27:50.900 - 00:28:34.936, Speaker B: So I'm sitting on the wrong couch. I should be on the light mode couch with the answer to this question. I'm mildly optimistic about maybe not like the full cross domain, but at least cross chain mev for the reason that I don't think it requires agreement on too many components of the architecture. I think it mostly requires agreement on clocks. So if we're using threshold decryption systems, it matters a lot in a cross domain context whether or not those periods of threshold decryption are synchronized across the domains. If they're happening at lots of different times across the domains, then there's going to be a lot of asymmetric information among block proposers. But if they're happening in a more synchronized time, then everyone kind of has to make decisions about ordering and then everything gets decrypted.
00:28:34.936 - 00:28:45.920, Speaker B: And maybe there's still the 5% 10%, but it seems like you can synchronize some things without necessarily agreeing on consensus or agreeing on other more fundamental architectural decisions.
00:28:46.420 - 00:29:12.140, Speaker E: So my opinion is that cross layer one mev is bad. But ironically, this is a great thing. And the reason it's a great thing is that it pushes the shared security model. And so the question is, the real question is, can we scale shared security? And it's my belief that we can. And if we can, then it would be a winner take most and therefore there wouldn't be so much cross layer one mev.
00:29:14.080 - 00:29:14.830, Speaker D: Interesting.
00:29:16.400 - 00:29:46.800, Speaker A: So we have nine minutes, so let's spend four minutes on the next question and then something about the future and then let's open up to the audience for any questions. So mev traditionally has been painted as a curse in a way, but I wonder if there is a galaxy brain where you can invert it and use it for good. The obvious examples are Arbitrage and liquidations, but maybe in chains without a block reward, you can use mev as a security budget or something in that neighborhood.
00:29:46.960 - 00:30:37.364, Speaker D: Interesting. Yeah, I guess if you auction the builder slot very far ahead of time, then you can do the transaction fees for security thing and basically avoid having the big spikes in what the reward is. But then I guess the counterargument is you could do that the other way as well. Right? Like if you have EAP 1559 burns, you can just release them retroactively, like basically put the burn into a plot and then every block release like one over 100,000 of the plot. I think the direction where if you kind of surrender to a block building specialization where you get a lot of gains is the question of can you have. More sophisticated resource limits and multidimensional. EP 1559 is one good example.
00:30:37.364 - 00:31:05.680, Speaker D: Another good example is if you start having multithreaded and parallel EVMs, then that also would require the concept of gas to kind of become more complex to reflect the actual constraints that nodes have. And if you just say we have this other way to just deal with optimal block production being really complicated, then there's just a lot of other hard decisions that you just totally don't have to make and things that become easier.
00:31:07.380 - 00:31:42.648, Speaker E: Yeah. So mev can be kind of good for several things. One is that it can increase security because there's more rewards of validators, but it can also be used to increase scarcity if you can find a way to burn it. And there are some designs where we have mev burn and basically you can be in a situation where you just rely on the proof of stake issuance for security and everything else just leads to more scarcity. I think kind of another reason why mev is good is that it's kind of a Tanant magnet and it kind of has this accelerationist aspect to it and this room is proof of it.
00:31:42.734 - 00:31:46.300, Speaker A: You always find ways to add more ultrasound to the ultrasound.
00:31:47.600 - 00:31:48.648, Speaker E: Ultra. Ultra.
00:31:48.744 - 00:32:36.248, Speaker B: All right, now I'm on the right couch because I'm going to take the contrarian position. I feel like there might be some conservation of demand here where ultimately users want to use blockchains because some semantics of the state transition of sending someone money or trading some asset is the thing that they want to do. And if they're doing that slightly less efficiently because they're not getting as much of the asset as they could have gotten, because there's some mev that changes maybe who gets specific parts of whatever that demand translates to in terms of transaction fees or mev. But I'm not sure it changes how much of it there is. Which isn't to say that mev isn't like an interesting tool in the protocol designers toolkit, but I'm not sure it can be used to add security that wouldn't have already been somehow provided by the fundamental demand.
00:32:36.424 - 00:33:01.732, Speaker C: Just one point of protocol. Well, security budget, I would definitely say. Justin has said that I think it's very important to never directly couple protocol income and security spending just because conceptually, those really should be freely floating against each other, right? You should set a security budget and then you have an income and that can be more or less and that determines the soundness of your money.
00:33:01.786 - 00:33:02.052, Speaker E: Maybe.
00:33:02.106 - 00:33:21.290, Speaker C: But if you're basically artificially forced if Bitcoin is today, and I hope they'll move towards some 50 50 line style mechanism, but right now they just artificially coupled their security to the fees and that just doesn't make sense, right? Because then you're floating security guarantees. That's never what you want.
00:33:22.160 - 00:33:23.870, Speaker A: What did we not talk about?
00:33:32.320 - 00:33:34.750, Speaker D: What should we change the Ethereum logo to?
00:33:36.820 - 00:33:40.560, Speaker A: All right, do we have any questions from the crowd.
00:33:47.110 - 00:34:41.994, Speaker F: To your point, Vitalik, at the beginning you said users mostly wanted to do just transfers, right. So I wonder if there are some possibilities out there for MVP mitigation that are more not on chain design and in protocol, but actually, for example, if we're able to enable intents at the end user level, where the intent is not just I want to transfer assets from A to B, but where I can say, for example, I would like this transfer to happen, but I also would like it not. I would like to not be front run and I would like to pay this much as long as that is guaranteed. So I wonder if there are some potential in the space by just enable end user intents to just be more expressive to the worried.
00:34:42.142 - 00:35:32.230, Speaker D: I mean, that is what some of these fancier exchange protocols are trying to do, right? Basically allowing users to kind of set more conditions and basically making AMMS have some of the properties of order books and kind of pushing exploring the design space in the middle by starting from the AMM side and then making it look more ordery that feels like that's already doing some of that and a stronger mev ecosystem. I think it can even help there because users can create conditions that are very strict like you can even set silivage to zero if they want or whatever and things like that can be handled more effectively.
00:35:32.730 - 00:35:46.326, Speaker A: Flashboards is adding that to the RPC where you can opt in on certain kinds of mev to be extracted from your transaction and it only goes to certain searchers that look for that. I think we have one more question and we got a wrap.
00:35:46.518 - 00:35:47.260, Speaker E: Yeah.
00:35:47.710 - 00:35:52.140, Speaker G: So I'm going to start a little off and then I'm sure you'll understand why.
00:35:52.750 - 00:35:55.098, Speaker A: Sorry. Because we're tight. Like if you can get okay, I'm.
00:35:55.104 - 00:36:40.490, Speaker G: Going to get to the point then. Okay, good. So other industries, let's say airplane mining, oil and gas, et cetera, have spent the inordinate amount of time and money and effort on trying to figure out why accidents happen. And it turns out that of course, accidents happen because people are stupid and technological issues and whatnot, but a good chunk of it actually happens because they try to put more and more safeguards into place. And these safeguards tend to eventually interact in complex and complicated and unknown ways. And then it blows up into the face of the people who built it. And I feel like there's been a lot of work being put forward here that says, okay, well this is the system, the way we understand it and this is the way we're going to try to put these even more and more and more complex ways of trying to fix it.
00:36:40.490 - 00:37:03.198, Speaker G: And I'm wondering, are you afraid of these complex systems that are meant to safeguard the system from the current issues that you see right now will eventually interact in ways that will blow up into our face and whether it's best to sort of accept the risk that we have already and live with it rather than try to fix it and then create potentially way more risk than what you're thinking you're fixing.
00:37:03.374 - 00:37:08.740, Speaker A: Maybe at LDR would be complexity solves things. But is complexity okay?
00:37:10.310 - 00:37:37.918, Speaker E: I mean, I think the answer here is just modularity. You want to try and encapsulate as much as possible. And so, for example, within the beacon chain, there's all these different modules. So, for example, we have randomness generation and this can be a very well encapsulated thing. And we can have an ideal functionality. It just provides unbiased randomness. If you just do this for every single module, then you're kind of limiting complexity in a big way.
00:37:37.918 - 00:37:52.400, Speaker E: And this is kind of going against the flow of mev. Mev is this kind of force towards being systemically seeping through every single crack. And so it's a good counterbalance to try and modularize as much as possible.
00:37:54.370 - 00:37:54.830, Speaker B: Great.
00:37:54.900 - 00:38:05.570, Speaker A: Thank you all for coming. Thank you to the group. It's.
