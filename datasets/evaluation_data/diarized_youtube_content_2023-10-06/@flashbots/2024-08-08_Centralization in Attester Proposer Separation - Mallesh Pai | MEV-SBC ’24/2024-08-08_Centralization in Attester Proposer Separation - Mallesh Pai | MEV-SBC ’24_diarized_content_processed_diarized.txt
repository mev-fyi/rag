00:00:03.120 - 00:00:24.926, Speaker A: All right. Can folks hear me just fine? Yeah. Okay. Thanks to the organizers for this wonderful day and for including this paper on the program. I didn't know Mike was going before me, or I didn't know the content of his talk. So he has previewed some of the setting the ground introduction. I'll go faster through that, but slow me down.
00:00:24.926 - 00:01:13.298, Speaker A: So the point of this paper is we want to look into a tester proposal separation, which has been proposed. It's like a catch all moniker for execution tickets and execution auctions. And we want to point out to a centralization vector that we don't think has been pointed out yet and we think is pretty damaging to this direction. So the outline of what I wanted to do was give you a quick refresher of proposal builder separation. You don't necessarily need that if you were paying attention in Mike's talk, but might be useful just to skip out the part that I want to talk about, I'll talk about what is a tester proposal separation. For those of you who don't obsessively follow e three search in the EF posts and then just, this is a one theorem paper. So it's pretty simple.
00:01:13.298 - 00:02:08.578, Speaker A: All right, so why propose a builder separation? We're at Mev Day, we kind of know the story, but the idea is that the fact that there is a leader proposing the block, deciding what gets included, what gets excluded, what order things execute in, that makes it particularly valuable. We know it can be really valuable. So, for example, Monday, while Mike was flying back from Japan after causing trouble there, blocks were selling, a single block was selling for like 360 eth. All right, so that's over a million dollars at previous prices. Um, exercising this monopoly right while you have that monopoly right, as a proposer, executing this monopoly right is a very specialized activity. You need access to capital to do, um, you know, various kinds of orbs. You need access to searches to do other kinds of orbs, you need access to order floor to be able to create valuable blocks.
00:02:08.578 - 00:02:48.996, Speaker A: And, um, all of this is, is sort of something that the average validator proposer might not have. And there was a concern going back to well before I was involved in this space that this better access would lead to centralization. So we pulled the ripcord and we said, let's do PBS. Any proposer can show up and just say, ok, I want to sell the right, I'm going to sell my right of proposal and these third parties that we created overnight called builders who are specializing in extracting this. I mean, we will bid for that. Right? And the story was, well, if all proposers have access to this market, it's a nice level playing field. And happy days are back.
00:02:48.996 - 00:03:14.358, Speaker A: Michael, you did this. In his talk, Terrence is here. He can tell you the businesses doing this in proposal, doing this real time selling in protocol is kind of tricky. There's a lot of work needed to make that happen. So we've not finished that work yet. So the current compromise was to do it out of protocol. Right, Mavboost? Thank you.
00:03:14.358 - 00:03:54.052, Speaker A: Flashbots goes ahead and does this. And to a first approximation, all I want to talk about is that it is a just in time auction, which means the right to propose the block is being sold in real time all the way right up to the second you're supposed to propose the block, or in many cases, 2 seconds after you're supposed to propose the block. And secondly, it's permissionless to a first order. Anyone can become a builder and build and biddenness. Okay, so the system is to the purposes we, for what we designed it, it's working pretty well, so why change it? And there are two stories. One is we just don't like reliance on out of protocol sidecars. This is a critical part of the protocol's functionality.
00:03:54.052 - 00:04:34.628, Speaker A: What is getting in? And we've just outsourced it to three builders, now two builders, and so on and so forth. And the second part is that the revenue from the auction accrues to the proposal, not to the protocol, not to Dapps, not to users. So maybe when you sell it out of protocol, you don't know how much it's going for directly, so you can't appropriately redistribute it. So maybe we can do something different. What is a tester proposal separation? A tester proposal separation is the idea that being a validator currently gives you two rights. You get to a tester blocks, everyone does that. And every now and then, you get your lottery number called up and you get to propose a block.
00:04:34.628 - 00:05:16.390, Speaker A: Okay. AP's just splits it and says you still have to do the consensus part, so you still get to be an attester, but the proposal right doesn't come to you automatically just because you are a validator. Instead, there is a separate right to propose the block that is being sold off. We still don't know how to sell these things in real time. If we did, that would be epbs. So what are the two proposed implementations? One proposed implementation is called execution tickets. So execution tickets is we're going to sell these lottery tickets separately from being a proposer and in advance of the slot, the lottery winner is going to be determined, and the owner of the winning lottery ticket gets to propose that block.
00:05:16.390 - 00:06:09.052, Speaker A: And the execution auction idea is some amount of time in advance. So, for example, one epoch in advance or two epochs in advance, or you pick that parameter, you just auction off the right. So you get, please participate in an auction. Now, if you want to bid, if you want to be the proposer, or if you want to own the right to be a proposer, 32 blocks from now. Okay, so that's an execution auction. Now, the analysis is sort of, there were these lovely ETH research posts that sort of analyzed it, and the main point that they make is that in advance of the block, no one knows what the revenue from the MEV is going to be. You don't know what the order flows are, you don't know what price movements are happening.
00:06:09.052 - 00:06:59.270, Speaker A: You're 32 blocks or 64 blocks in advance. So for you, even for a sophisticated party, it's just a random number. So their sort of conjecture, if you will, was that the auction price will rise to the expectation of that random variable. If you're selling it by auction, or if you're selling n tickets, it'll rise to one over n of that expectation. And of course, they correctly caveat that there is potential risk aversion, there are capital constraints, there's time discounting. But maybe this is okay to a first order. Okay, what is our more detailed analysis? Our more detailed analysis is roughly, just because how much mev in the block is unknown ex ante doesn't mean that everyone values it at expectation of that unknown value.
00:06:59.270 - 00:07:29.050, Speaker A: Why? Because at the end of the day, it's an oligopolistic market. There's only three builders. At the time of writing these slides, it was only three builders, which was a month ago. If you check again today, it's like two builders producing 93 92% of our blocks. And even these builders are heterogeneous. They are heterogeneous in their ability to extract mev. If they were homogenous in their ability to extract mev, you'd expect them to be winning roughly one third of the time each.
00:07:29.050 - 00:08:46.584, Speaker A: Thirdly, even if you win the right to be a proposer in the execution auction, nothing's stopping you from reselling that right via your own version of mevboost as a just in time thing. So we claim that this combination of things, the heterogeneity coupled with the right of resale, is going to actually change who values it at how much? So this is, by the way, the current last 14 days. As always, the lovely. This is 90% of blocks are being produced by two builders. So why does this matter? Well, only three builders win 90% of the blocks. These numbers are slightly off because one simple thought experiment you could do is the following, which is, look, currently, Rsync is winning half the blocks, Titan is winning 40% of the blocks, and, sorry, Rsync is winning 10% of the blocks, Beaver is winning 50% of the blocks, and Titan is winning 40% of the blocks. If there was no ability to resell, then just sort of doing a back of the envelope analysis.
00:08:46.584 - 00:09:26.694, Speaker A: That means that, on average, because Beaver is winning the blocks most of the time, you could maybe say that Beaver has a higher expected value than Titan, has a higher expected value than Rsync. So if there was no resale allowed, then you're already toast, because you're selling the block in advance, and in advance of beaver expects to have the highest expected value. They'll bid the most and win. Next you'll say, aha. Rights can be resold. Indeed, the proposals point out that you want an efficient market. Well, the point is that this isn't an efficient market.
00:09:26.694 - 00:10:08.210, Speaker A: There are only three builders. So the oligopoly is something that you want to model. So let's do a simplified model. I'm going to start with, in the paper, which will be up shortly, there's a model with three builders. But just for the purposes of our math, let's do two builders today, two builders that should be beaver, not Rsync, I'm sorry, are winning 90% of the blocks. So there's only two builders for our model, and each of these builders will, in the future, at the time of proposal, have a value for the block. Builder I is going to have a value vi that's drawn from some distribution.
00:10:08.210 - 00:10:59.430, Speaker A: Each party understands the other party's distribution. We're going to assume that these two distributions are independent. And the critical assumption we're going to make is that builder one's distribution of values, the distribution of the value that they will have in the future, is dominant over the other ones in the hazard rate order. So the hazard rate order is a particular order that, among stochastic orders, it implies first order, stochastic dominance. So you can think of it as saying it is a slightly stronger version of just saying that, on average, builder one expects to have a higher value than builder two. This is our simple game three, which is you do the execution auction in period one. Once the execution auction happens.
00:10:59.430 - 00:12:07.504, Speaker A: Either builder one wins or builder two wins. Let's not worry about the case where some third anon wins it and then tries to resell it to builder one or builder two. In period two, nature is the actual block is going to come around and these builders are going to actually get the values that they have for the right to propose that particular block, but they can potentially turn around and resell. So even though I, as Beaver, have a value of one eth for the block, I can go ahead to Titan and say, hey, titan, would you like to buy this block out from me? Now, what's important to notice here is that if I'm only selling to one builder, I don't necessarily want to. If I have a one ETH value block, the optimal thing for me to do is not to offer it to the other guy at one eth. Then I get one eth either way, whether he buys it from me or whether he doesn't buy it from me, and I propose my one eth block. What I should do is offer a higher price, which sort of optimally maximizes my expected revenue.
00:12:07.504 - 00:13:04.926, Speaker A: My expected revenue being whatever price I offer to him times the probability he buys plus the probability that he doesn't buy times my one is. So each builder is going to offer a value offer the proposal right up for resale with a reserve price that depends on their own value. The theorem is just straightforward. If we have two builders and this extends if we have two builders and one builder is better than the other in the hazard rate order, then in the equilibrium builder one always wins the period one execution auction. It's not just that builder one always wins the period one execution auction. In equilibrium builder one, because they're marking up the price when they resell, it ends up proposing the blocks more often than they would have if the blocks were sold in real time. So we think this is a massive centralization vector.
00:13:04.926 - 00:13:31.824, Speaker A: How am I doing on time? Sorry. Yeah, so the proof idea is fairly straightforward. You just solve the game tree by backward induction. So in, let's just imagine that builder one wins the auction. So if builder one wins the auction in period two, they have the right to propose. They also have the right to resell this block to build it to. They know their own value for the block.
00:13:31.824 - 00:14:01.502, Speaker A: Let's call that v one. Well, what is the optimal offer for them to make to build it to? Well, it's the optimal offer is the value v that solves this one equation on the board. Okay, so this is their value that maximizes their expected revenue. If builder two says, nah, that's too rich for me, I'm not going to take you up on that. Then I just turn around and propose the block that I have and take home v one. Okay, so that's what I'm going to do in v one now. Sorry.
00:14:01.502 - 00:14:45.262, Speaker A: That's what I'm going to do in period two. Each builder understands that they're going to do this in period two, that they're going to resell the block or they're going to try to resell the block with a markup relative to their own price. So now you can do the backward induction and ask, in period one, how should I bid? Well, I understand that in period one, if I own the resale right, then I get to run this optimal auction. If I don't own the resale right, then I am stuck with just whatever surplus I make when the other guy tries to resell it to me. So you can calculate those two numbers. The first one is my expected revenue from the optimal auction. The second one is my expected revenue from buying it off.
00:14:45.262 - 00:15:17.388, Speaker A: Expected net profit from buying it off. The other guy. My willingness to pay in period one is the difference between these two numbers. And the main part of the proof is just to show that under our assumptions, builder one is always willing to pay more than builder two for the execution auction. We then you might say, ok, these execution, sorry, this optimal auction sounds kind of funky and you only have two builders. So we just went ahead and did this with three builders. So we redid it numerically with three builders and we did something simple.
00:15:17.388 - 00:16:33.100, Speaker A: Like we said, when the builder wins in the, whichever builder wins in the first round goes ahead and offers it up for a 10% markup. So they just, they just, they know their own value. In the second round, they're just going to sell it to whoever comes at a 10% markup. That's better for them in terms of expected revenue than selling it at their own value. Well, what happens if you do that? Well, the, this is just, this is, these are not to scale, but this gives you the same sort of idea, the same things happen, which is if you were doing it as a JIT, if you were selling it using the current Mav boost, then you get, you know, whatever current market shares there are and you get the distribution of surpluses profits across the builders that you currently see. If instead you sell it as a execution auction, then the pink guy, the guy who was winning most often in the first round in the old world, in the Mav boost world, will now win the execution auction every time. They will then propose the actual block more often than they would have under mev boost, and they're going to have a lion's share of the actual realized surplus relative to what the other people make.
00:16:33.100 - 00:17:41.798, Speaker A: That's our main punchline. What are the takeaways? The takeaways are, well, JIt auctions are hard, maybe impossible. I don't know, smarter people than me on these things are working on that. But they allow, the important thing about JIT auctions is that they allow realized values to matter. And this means that even if you're a statistically weaker builder, sometimes you just happen to have some really juicy order flow. And I, you can win out a few blocks, but in the absence of your realized value being able to matter in the ahead of time auction, the stronger, statistically stronger builder is always going to win the auction, and they're going to be able to squeeze these other builders out. This could have, in the long term, this could be even worse for us, because who'd want to be the 7th largest builder in this environment, you know? So, and of course, as Mike already pointed out, this centralization, a monopolization vector could.
00:17:41.798 - 00:18:35.138, Speaker A: The fact that this is happening means that you could. The fact that there's one guy under our model who's winning every execution auction means that they don't have to resell. They could even do more harmful stuff like multi block MEV, which can be extremely destabilizing for Defi. But this model is not driven by the fact that you have attacks like multiblock Mev enabled by execution auction. We've not formally modeled execution tickets in this setting because execution tickets, you'd have to tell me exactly how these execution tickets are being sold. That's under specified right now. But the main point is the same idea goes through in the execution tickets, in the sense that when you think about who values execution tickets, any given execution tickets, builder one is going to value execution tickets more than everyone else.
00:18:35.138 - 00:18:53.230, Speaker A: Okay, so that's the paper. That's my talk. All right. Elaine had a question. Alex had a question. Elaine, Sandra end up first. I'll go with that.
00:18:53.230 - 00:18:54.640, Speaker A: Sorry.
00:18:55.100 - 00:19:06.276, Speaker B: Can you go back to that game tree? I guess I don't understand the game, or maybe I'm lost on the notation. So, v one and v two are fixed. Are they random variables?
00:19:06.308 - 00:19:09.840, Speaker A: They're random, but they're only realized in period two.
00:19:10.180 - 00:19:12.404, Speaker B: So v one and v two are random variables?
00:19:12.452 - 00:19:25.094, Speaker A: Yes, they're random variables that are drawn from known distributions. So this is a game of incomplete information. In period one, I know that I will have a value drawn from this distribution. In period two, I actually get that value from that distribution.
00:19:25.142 - 00:19:32.878, Speaker B: So basically, v one is like when the block and when the transactions actually come, how much the, how much the.
00:19:32.894 - 00:19:33.790, Speaker A: MAV is in that.
00:19:33.870 - 00:19:38.610, Speaker B: Yeah, I see. Okay. I see it.
00:19:44.590 - 00:20:12.310, Speaker C: So one of the interesting things about private order flow is that it accumulates, and what that results in is a block of value that is in some way actually dependent on how long since the last block that proposer or that actually that builder was included. You go ten blocks in a row without a block, you have a lot of private order flow. That's very valuable. How would something like that impact this model?
00:20:12.730 - 00:20:53.040, Speaker A: You're right about that. But now, I guess if you take the current private order flow contracts as fixed, then you're right that eight blocks in, I haven't won any execution auctions. I have a ton of private order flow for 32 blocks from now. I know that I want to win because I will have something like that. But if you think one step back, how much do I sign? Like, who do I sign with already? It's tricky for me to sign as a private order flow provider with anyone other than SAP or Titan. But now it's going to be even worse. There's one guy who's winning all the execution auctions.
00:20:53.040 - 00:21:04.320, Speaker A: But you're right. If a big private order flow provider went to somebody who was a suboptimal builder, they could stay relevant for much longer.
00:21:04.860 - 00:21:05.452, Speaker C: Got it.
00:21:05.516 - 00:21:06.604, Speaker A: That's outside the model. Yeah.
00:21:06.652 - 00:21:07.400, Speaker C: Thank you.
00:21:08.940 - 00:21:17.580, Speaker A: Quintus has had his hand up, or I don't know. Yeah, you can always catch me later, whoever. And then there was one more. Sorry. Yeah.
00:21:27.600 - 00:21:59.548, Speaker D: Sorry, Marcus. I guess just a comment on the order flow thing. I think there's actually a lot of open questions that come out of that, because right now there's this incentive for people to over builders to treat their flow well because they have this repeated game. They want the flow to come back. But in a world where you are the monopolist, there's no real incentive to do that. And so that probably changes how order flow gets executed. Probably there's much more incentive for builders to sandwich, etcetera.
00:21:59.548 - 00:22:26.260, Speaker D: But my question was, so in this second period, I wasn't sure what kind of auction you were discussing, and I was curious. I would imagine probably you have the same result, but I'd wonder if you've thought about a setting where you have some sort of, like, we require the holder of an execution to post a price in some sort of like a hauberk tax kind of setup. Do you think that changes things?
00:22:26.420 - 00:22:59.834, Speaker A: I mean, depends on when they have to post that price, if they have to post that price just in time. The main point is they're never going to post that price equal to their value for the block, because that's just a strictly dominated strategy. I already have a block that's worth one eth. I should never offer to sell it to you for one eth. I can get one eth just by proposing my own block. So whatever it is, 1.11.2, you believe our math? But I will have an advantage because I will mark up my block relative to the.
00:22:59.834 - 00:23:04.338, Speaker A: I will mark up the resale relative to the right I have, and you can't stop me from doing that.
00:23:04.434 - 00:23:21.554, Speaker D: Right. I think what you would ideally want, and I don't know if this is possible, is to require them to post the price as soon as they hold the right, and then I see. And then tax them in some way to disincentivize them from stating a very large number.
00:23:21.682 - 00:23:58.552, Speaker A: Well, but I mean, if there's no new information that's come in from the moment they own the right, they're going to put up basically their willingness to pay in the x anti auction, which is higher than anyone else's willingness to pay. It's only exposed when I suddenly say, oh, I'm an inferior builder to Quintus, but, ooh, I got a bunch of order flow, or I got a bunch of searcher flow, or something happened and I want to outbid you. That's when I can turn around and wanna bind you. But if you're the statistically strongest builder, long before we know anything, you're the only person who's. Or you're willing to go to a price that no one else is willing to go. Yeah.
00:23:58.576 - 00:24:16.888, Speaker D: Okay. I don't want to drag this on too much longer, but I'll just make a last point before I get back to Mike. I think that I didn't understand that point, really, because surely the valuations are evolving as time goes by and more information is revealed. If the price is posted on chain for that whole period, a relinquish the.
00:24:16.904 - 00:24:35.830, Speaker A: Mic, if you could do real time updates, maybe that would change things. But really, what we're talking about is 32 blocks before, and then most of the information is maybe one or two blocks in. So we'll be back to similar problems. Okay. And we'll take one more quick question while Kartik sets up, please. Sorry.
00:24:40.970 - 00:24:59.810, Speaker E: Thanks. So just quick one, we already enforced client diversity by bullying large staking pools into running multiple clients. What if we just don't. In the no resale allowed scenario, what if we just also bully large proposer pools into selling to multiple builders?
00:25:00.110 - 00:25:13.846, Speaker A: I mean, I think we enforce the sort of client diversity. Well, we don't enforce the client's diversity. We sort of do it. But the civil problem in builders is probably large, right?
00:25:13.958 - 00:25:15.590, Speaker C: Like, yeah, yeah.
00:25:15.630 - 00:25:17.982, Speaker E: Disabling definitely becomes an issue, but it's kind of interesting.
00:25:18.046 - 00:25:22.950, Speaker A: Titan becomes Titan one, Titan two, three. So, yeah, that's, I think, a concern.
