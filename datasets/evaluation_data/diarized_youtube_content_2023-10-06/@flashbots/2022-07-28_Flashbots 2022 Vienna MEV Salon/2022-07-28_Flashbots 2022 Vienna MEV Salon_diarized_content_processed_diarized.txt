00:00:00.170 - 00:01:12.834, Speaker A: Them an opportunity to censor everyone, extract even more revenue from the chain, 51% attack the chain and just do way more nasty stuff. Basically, to the extent that some amount of mev is not removable, the PBS has a better mitigation strategy because instead of sort of putting it into the same box, you risk validators centralizing. You put it into this other thing where that thing being centralized and unfair is less harmful. And once again, this is not yet that part of the presentation, but later on in the presentation I will talk about some ways of potentially kind of reducing the harm of someone dominating the mev market even more. And you could even I guess this is a bit of a spoiler, you could even have design a thing that wins the mev market where that thing itself is like some kind of decentralized system. Okay, getting ahead of ourselves, but section one of three done.
00:01:12.872 - 00:01:17.270, Speaker B: So happy to take questions Uri had wanted to speak.
00:01:17.420 - 00:01:22.440, Speaker A: Okay, yeah, I'll do it super quick.
00:01:26.170 - 00:01:26.920, Speaker C: Sorry.
00:01:29.870 - 00:01:37.734, Speaker D: I think everybody agrees that there is an advantage to explicit auction to avoid.
00:01:37.782 - 00:01:39.942, Speaker E: All sorts of messes around it.
00:01:40.096 - 00:02:12.550, Speaker D: But if you look at the PBS on the table, I'm actually concerned about loss of the mempool. There's no longer peer to peer propagation of transaction, at least not to DeFi transactions, because if they propagate this way they get screwed. So all the transaction will be sent directly either to blocksroute or block native or flashbot block builder. And I just wonder if the harm is bigger than the benefit. I don't know that it is, but that's a concern from my perspective.
00:02:18.320 - 00:03:01.710, Speaker A: Even if Prism is more dangerous in some absolute sense like this, if Prism has a low market share, there's still kind of incentives or as long as its failures are kind of not correlated, then there's an incentive to kind of push toward it. Or another example might be if lots of people are staking on AWS, then you have an incentive to not stake on AWS. And even if you want to stake in some other cloud, you would have an incentive to just choose a different cloud provider just because or another one is like if there's lots of staking in China, then it's in your interest to instead staking India or whatever. So the goal is to try to kind of encourage people to also decentralize on all of these different levels as well.
00:03:05.910 - 00:03:07.314, Speaker F: So continue.
00:03:07.512 - 00:03:16.150, Speaker A: Yay. Okay. What kind of PBS? This is the next topic.
00:03:20.410 - 00:03:21.160, Speaker G: Right?
00:03:21.770 - 00:04:26.330, Speaker A: So proposal builder separation is this idea of separating out what we call the block proposer, which is the validator that happens to be randomly chosen to be the one who kind of does the finishing step of the block. Proposal process from the block builder where the block builder is the entity that kind of actually constructs the block and chooses transaction by transaction. So the way that DBS is generally structured is kind of generally all the same, right? So step one, each block builder makes a bid for the next lot. So they say, hey, I can make a block for the next lot and I'm willing to pay zero point 22 E for that privilege. Someone else might say, hey, I'm willing to make a block for the next lot and I'm willing to pay zero point 23 E for that privilege. And so you have like a bunch of these bids floating around and the block proposer's job is just a very easy one. They just choose the bid that has the highest number on it, right? The block builder, once the proposer kind of chooses then or only the winning builder publishes the corresponding block.
00:04:26.330 - 00:05:11.442, Speaker A: So three step game. Step one, bid. Step two, accept. Step three, publish. But as we'll see, there's lots of different ways to fill in the details of this game. So just as to kind of motivate why this is hard here's two of the key properties that we want to preserve. So one property that we want to preserve is we want to make sure that the builder cannot cheat proposers, right? So the builder can't we do not want the builder to be able to refuse to publish their block and deny the proposer their revenue, right? So this would be one reason why just like a very simple mechanism where it's like step one, people publish their bids.
00:05:11.442 - 00:05:50.742, Speaker A: Step two, the proposer accepts, the proposer publishes the block header. And then step three, the block builder releases the block body and that's it. This is why that kind of mechanism is not sufficient, right? Because in that kind of very simple mechanism, the block builder could choose to not publish the block. And when they don't publish the block, then they basically deny the block proposer the ability to get the revenue. And there's a lot of different reasons why they might want to do that. For example, they might be colluding with the next proposer and they want to get that mev in the next lot instead. So it's generally not something we want to allow.
00:05:50.742 - 00:06:56.746, Speaker A: So that's one property. Another property is we don't want the proposer to be able to cheat builders. So this is more subtle because there's more subtle kinds of cheating going on. But one simple example is we don't want the proposer to be able to look at the builder's block and do what we call strategy stealing, right? So let's say the builder's block contains a transaction that goes to takes Justin's son's CDP and grabs $100 million from it because it can be liquidated. We don't want the block proposer to be able to basically run their own automated algorithm agreement, right? One straw man. That kind of satisfies option one but does not satisfy or satisfies criterion one, but does not satisfy criterion two is, well, what if we required the bids to just contain full block bodies? There's actually two reasons why that doesn't work. One reason is that it just makes the whole mempool very clogged because you could have potentially hundreds of full bodies floating around.
00:06:56.746 - 00:07:13.122, Speaker A: And the other reason is because it's vulnerable to strategy stealing. Right? So step one, publish bids. Step two, accept bids. Step three, publish a full body, doesn't work. And step one, publish full blocks. And step two, propose or accept a full block also doesn't work.
00:07:13.176 - 00:07:15.090, Speaker G: So you have to be more sophisticated.
00:07:17.990 - 00:08:02.910, Speaker A: So this is the kind of approximate design of the Flashbots mev boost, which is the thing that the Flashbots team is helpfully working on. And it is a kind of federated semi trustless, but semi trusted solution to the PBS problem that does not rely on any changes to the ethereum protocol, but that does rely on this trusted actor in the middle that we call a relayer. So the way that this works is basically that the builder first sends their payload, which means sends their full block body to a relayer. Then the relayer sends just the block header to the proposer. And this is a header. It also contains a bid. Right.
00:08:02.910 - 00:08:22.646, Speaker A: So it sends the header and the bid to the proposer. The proposer chooses the highest bid, they send their proposal, which is like the block header of their block that includes kind of the hashes of what the builder said that they would include and it includes the proposer's signature. And then once the relayer sees this, then the relayer publishes the full body, right?
00:08:22.748 - 00:08:23.574, Speaker E: Yes. Right.
00:08:23.612 - 00:08:25.122, Speaker C: Now, in the credit setup, the relayer.
00:08:25.186 - 00:08:32.042, Speaker E: Sends execution payload back to the proposer and the proposers. But the relayer could right?
00:08:32.096 - 00:08:42.910, Speaker A: Yes. So the relayer needs the ability to broadcast because we don't want the proposer to be able to cheat the builder. But yes, it's a good optimization.
00:08:43.330 - 00:08:46.030, Speaker H: What is the difference between the builder and the relayer?
00:08:47.330 - 00:08:48.350, Speaker G: Same entity.
00:08:54.000 - 00:08:54.750, Speaker B: Okay.
00:08:57.760 - 00:08:59.100, Speaker E: Also a relayer.
00:09:00.320 - 00:09:59.376, Speaker A: Yes. So the builder and the relayer can be the same entity and in some cases they will be. But the idea is that this allows people to basically just run open source relayers that accept anyone. So if the teuvin decides that they want to leverage their reputation as a nice trusted actor and they decide they just want to be a relayer, then the process of them doing that would just require them to just run a computer and have a couple of RPC endpoints and just maintain a node. Right. So they don't need to do sophisticated buildering themselves. And then what that allows you to do is that allows, let's say, for example, some random person from China who, let's say people in Europe don't trust and they've never heard of and they've never heard of any of the people that he claims as references.
00:09:59.376 - 00:10:41.760, Speaker A: And so he can basically just create block bodies and go through this relayer. And that way you kind of overcome the trust gap. Right, because the proposers don't have to kind of trust this builder that they've never heard of, but the builder also has this ability to participate despite kind of not being plugged into this global trust graph. Right. And I think, in general, the goal here is that in order to prevent centralization of validators, remember, proposals here are just like Ethereum Validators. We also do not want to require the validators to have to frequently update their configs. Right.
00:10:41.760 - 00:11:16.460, Speaker A: And we expect builders to come in frequently. We expect there to be lots of builders. And it would be annoying if proposers had to constantly update their trust lists. And so if you just have a relayer in the middle where that relayer is there's a specific set of relayers. And when the proposer just starts up they include a list of trusted relayers into their config. Once then the builders could use any one of those relayers and kind of things will be more stable for the proposer.
00:11:18.320 - 00:11:24.072, Speaker H: Can you maybe explain again or I didn't get it. How the relayer actually solves the two.
00:11:24.226 - 00:12:02.360, Speaker A: Yes. Okay, so going back to the two problems, right? So the reason why the builder can't cheat the proposer in this model is that cheating the proposer basically means refusing to publish. Right. But in order for the relayer to be willing to send the bid to the proposer, the relayer has to have the full body. And so if the proposer accepts a bid, then the proposer knows that the block corresponding to the bid is in the hands of the relayer. And so the relayer, like, if they want to, they can publish, or if they want to, they can send to the proposer and the proposal, they publish.
00:12:02.440 - 00:12:06.590, Speaker H: But then again, the proposal shouldn't use the Ethermine relay or whatever.
00:12:09.920 - 00:12:27.970, Speaker A: I think the proposers, the intended design is that when you set up an Ethereum Validator as part of your config, you would have a list of relayers that you're willing to trust, and you just make that list once, and you're willing to trust them.
00:12:29.940 - 00:12:31.828, Speaker E: Much more realistic right now.
00:12:31.914 - 00:12:32.580, Speaker A: Right? Exactly.
00:12:32.650 - 00:12:33.270, Speaker G: Yeah.
00:12:35.160 - 00:12:43.384, Speaker A: The ideal is that I personally want there to just be several dozen nonprofits around the world running a relayer, and.
00:12:43.502 - 00:12:52.200, Speaker E: It should be this thing is running a relay profitable? There are no incentives to run one. That's the reason why there's only two.
00:12:52.350 - 00:13:19.490, Speaker A: Right, that's true. I mean, personally, I think Flashbots should just give grants to do this. Or maybe the Ethereum Foundation give grants to do this if no one else wants to. Then I could give grants for you if anyone wants to run a real Is. I mean, remember mev boost is not perfect, and it does rely on some social incentives, and it's clunky in that way. So it is a stop gap. But while we have the stop gap, I think we should try to make it work as well as we can.
00:13:20.420 - 00:13:22.912, Speaker C: How to see it working in a nonprofit manner.
00:13:23.056 - 00:13:27.796, Speaker E: It's infrastructure intensive because you have to accept block submission by the builders, you.
00:13:27.818 - 00:13:29.336, Speaker C: Have to verify them, simulate them, make.
00:13:29.358 - 00:13:29.930, Speaker A: Sure.
00:13:31.740 - 00:13:38.970, Speaker C: It opens a few venues for spamming and dosing. A little bit tricky infrastructure to run.
00:13:39.900 - 00:13:41.610, Speaker E: It's quite hard to run.
00:13:43.020 - 00:13:45.210, Speaker G: There are no incentives to run it.
00:13:45.740 - 00:13:47.600, Speaker E: And require the knowledge.
00:13:47.780 - 00:14:01.840, Speaker A: I feel like there is a lot that can be done to make it cheaper. What's not even being done. The whole spam thing. You could require builders to actually register on chain somehow.
00:14:05.140 - 00:14:05.890, Speaker G: Yeah.
00:14:09.320 - 00:15:15.400, Speaker A: In general I think we should be trying to sort of leverage the kind of the sophistication of builders to try to reduce the level of sophistication required on the relayer side, ideally. And there are kind of SGX based tricks that could reduce the amount of trust that needed in the relayer but also talk about that later. But this is kind of the approach that doesn't require protocol changes, but it requires this extra trust assumption and it requires this extra kind of community work to manage the trust assumption. But it is what we have for now. So in protocol PBS, right? This is the, I think, more likely candidate for in protocol PBS. And the basic idea is very simple and dumb. It's the two slot system, right? Basically in even numbered slots, you just have a system where the blog proposer chooses the bid and then in OD numbered slots, essentially whoever won the bid is the proposer and they propose what the block is.
00:15:15.400 - 00:15:16.330, Speaker A: Very simple.
00:15:18.300 - 00:15:19.050, Speaker G: So.
00:15:21.340 - 00:15:31.976, Speaker A: The benefit of this kind of approach is essentially the chain becomes able to detect kind of like discriminate between three scenarios.
00:15:32.008 - 00:15:32.156, Speaker E: Right?
00:15:32.178 - 00:16:18.830, Speaker A: Like one scenario is that the proposer was missing, the second scenario is that the proposer was there but the builder is missing. And then the third scenario is that the proposer is there and the builder is there. Right. So the reason why the builder can't cheat the proposer is because if the proposer is there but the builder is missing, then the fact that the builder is missing gets recorded by attesters in consensus. And so once that happens, the consensus rules can basically say, well, whoever won the auction has to pay the bid anyway, despite the fact because the fact that they did not publishes their own fault. And so the proposer still gets the exact same revenue they would have otherwise gotten. Right.
00:16:20.640 - 00:16:23.048, Speaker H: The proposal can just say I didn't get it.
00:16:23.234 - 00:16:30.930, Speaker A: No. Right. So the proposer can refuse to disappear over here, right?
00:16:32.900 - 00:16:35.356, Speaker H: If the proposer says that the builder.
00:16:35.388 - 00:16:46.950, Speaker A: Didn'T send the block oh, I see. No, sorry. It's not the proposer's job to check whether or not the block was published. There's like an entire committee of attestations. So it's like all the validators do it.
00:16:48.380 - 00:16:49.130, Speaker G: Okay.
00:16:50.220 - 00:17:51.708, Speaker A: And then the proposer can't cheat the builder because well, the blocks are only published after the auction is won and in fact the builder only publishes the block. After there's a proposal and even after there's a round of attestations on the proposal. So even if the proposer kind of equivocates and lets themselves get slashed, even then they can't kind of grab the mev and switch over which block is going to get proposed, which is like a really nice and strong property, right. So it's a very nice, it's a very robust system. The main weakness of it is that the slot time instead of being like 12 seconds, has to be potentially about almost double. Now you can avoid it being exactly double because you can basically say that the number of people attesting here can be much smaller than the number of people being attesting here. So you could say instead of 12 seconds, the slot time is 20 seconds, but it's still kind of not very nice.
00:17:51.708 - 00:18:59.580, Speaker A: Right. The delay comes from yeah. So the reason why we have to have a slot time is because we need to have a fairly conservative assumption on networking delay and basically so that we can prove that as long as actual latency is within that networking delay, the whole chain kind of converges and everything is safe. And the reason why the time between blocks will double here is because you need two slots instead of one to accept every block. So one slot PBS is this kind of alternative design that I came up with that hasn't seen too much enthusiasm, and possibly it hasn't seen too much enthusiasm for good reason. But I figure it's worth mentioning for completeness. The basic idea is like the ethereum chain acts as a decentralized relayer or basically a tester's act as a decentralized relayer, right? So the goal basically take mev boost, take out the relayer and you replace it with a threshold thing consists of like 128 random attesters.
00:18:59.580 - 00:19:47.788, Speaker A: So step one builder sends the header and they split encrypt and send the different chunks to the payload. So basically they secret share the payload, right? So the payload is like the full block body. They take that body, split it up into 100 pieces, use erasure coding to extend that to 200 pieces. And erasure coding basically means that you can take any 100 of those 200 pieces to reconstruct the original block. And then you separately encrypt each of those pieces to a different committee member and then each committee member tries to decrypt. And if the thing that they decrypted matches the commitment. So you would use some polynomial commitment here, because polynomial commitments can kind of verify that even the original coding is done correctly.
00:19:47.788 - 00:20:56.864, Speaker A: So if they see that they have the correct chunk, then they send a signature. And then if you have enough signatures from the committee, then the proposer would receive that bid and then the proposer would take the best bid, they send the proposal. And then when the committee sees the proposal, they would kind of decrypt the chunks and they would broadcast. Right, so it's like the same thing as mev boost except it's like decentralized mev boost where instead of having the function of the relayer is done by this kind of basically threshold cryptography but it's kind of done in a decentralized way by some randomly selected set of Validators. The reasons to be scared of this kind of model are I think one is that it just adds kind of more cryptographic assumptions. And this is like the reason why I personally have generally been kind of skeptical of adding threshold encryption things into Ethereum which other chains are sort of more aggressive on this. Right? So like Polkadot, as I remember, is kind of proud of having sort of in protocol secret sharing.
00:20:56.864 - 00:22:13.660, Speaker A: The reason why I'm scared of this is basically because 51% attacks totally can happen, right? And 51% attacks against a threshold encryption are much worse than 51% attacks against consensus because they're invisible. Right? Like if 51% of the validators collude to censor people or to do some attack where they revert the chain and revert finalize blocks, that's something that the community can detect. The community can pick up on it. Either they get slashed or the community does some soft work where they get penalized and they lose a big part of their deposits. But if on the other hand, 51% of stakers quietly accept a bribe to kind of give their kind of feed the decrypted shares to the NSA, then the NSA is going to be able to front run everyone and no one's going to see that this is happening. So that's the reason why I think in general people are scared of that or at least I'm scared of relying too much on threshold cryptography and a lot of other people are because you can 51% attack it silently. So those are kind of three different approaches.
00:22:13.660 - 00:22:51.404, Speaker A: None of them are perfect. Creating something that's even better is an open research problem. So if you want to work on this, there is a research community that would love to see the answer. If you create and publish something amazing, then I hear that publishing amazing ideas is often a path to getting hired by the Ethereum Foundation. But yeah, this is open fun challenge. So that's one of the rabbit holes that we can go down on in the question of what kind of PBS we should have. Right.
00:22:51.404 - 00:23:20.496, Speaker A: Basically it's like different technical approaches to trying to solve the problem of making sure proposers can't cheat builders and making sure builders can't cheat proposers. Right. And the reason why I think it's important to kind of make sure the different side that both sides can't cheat the other is because once one of the sides can cheat the other, then the other side has an incentive to rely on reputation. And reputation is much easier to have if you're like a big and centralized actor. And so it starts creating centralization pressure.
00:23:20.528 - 00:23:20.724, Speaker E: Right.
00:23:20.762 - 00:23:54.804, Speaker A: Like I think we want to create a world where any random guy with 32 east can be a competitive staker, and any random person with some cool algorithm comes out of some red in a village in China and be an amazing builder. Even if you're our hazard, another dimension of research is do builders have to.
00:23:54.842 - 00:23:58.320, Speaker G: Pre commit to block content?
00:23:58.410 - 00:25:53.852, Speaker A: So this is the issue here, right? Basically, the way that some of these existing designs are built. So basically the way that all three of these are, I think, conceived is that the bids contain the block hash, right? So the bid basically says, I want to produce a block, and the block has this particular hash, so they're committing to the contents of the block, and I'm willing to pay zero point 22 ETH if you let me include this block. So that's one approach. Another approach is you might say, if you give me full freedom to create the next block, then I'm willing to pay zero point 22 E for that privilege. So it's a very subtle difference between these two models. I think one of the practical consequences of this difference is that basically the question is what information the mev collected is based off of, right? I think this diagram here is really helpful, right? Basically, if you require the bids to publish their bids over here, and where those bids include blog hashes, then the time that they have to figure out what to include is over here, right? And the information that they can work off of is going to be over here. And so the kind of price discrepancies that they can arbitrage off of are going to be like, basically the price discrepancy between over here and over here, right? But on the other hand, if you let builders just have free rein to choose what they build, then they would be able to choose their block contents over here, and so they would be able to kind of choose mev based on anything that happens over here, based on any kind of price discrepancies that happen over here, based on any transactions that get published over here.
00:25:53.852 - 00:26:43.820, Speaker A: Right. So it's like, in both cases, you have a two slot window of stuff you can extract mev off of, but in one case, the window kind of ends over here, and the other case, the window ends over here, right? So this does have some pretty practical consequences. One of the practical consequences is that if builders have to pre commit the block contents, then builder profits become deterministic and guaranteed, right, because the builder's bid is like a number, and it's part of the bid. And the profit that the builder can get is also going to be from the block contents, where the block contents are also going to be committed, right? And so the builder knows, like, hey, I'm bidding zero point 22, and this block is going to be able to give me zero point 23.
00:26:43.890 - 00:26:44.988, Speaker G: And so I'm going to get a.
00:26:44.994 - 00:28:26.408, Speaker A: Profit of 0.3, right? Now this is not entirely true because if the Mev depends on Arbitraging, on binance, then their kind of complete cycle would actually depend on being able to actually go on binance as soon as the block is confirmed to make the trades. And maybe prices will move a little bit between when they make their bid and when they'll be sure whether or not they won. So it's not entirely deterministic, but it's like pretty deterministic. But on the other hand, if you're just auctioning off slots and you're saying I pay zero point 22 E in exchange for kind of free rein in this figuring out what happens in the SWAT, then you only have half the transactions and half the kind of price information that you need, right? Because basically what's going on is that you're making your bid over here and the previous block was made over here and when you're making the previous block was made over here and so you're making your bid based on transactions that have happened over here, based on price movements that have happened over here. But you also know that when you actually make your block, there's going to be more price movements that will happen, there's going to be more transactions that will come in, right? So being a builder becomes a more probabilistic thing. It becomes like a thing that requires more sophisticated algorithms, it becomes more professionalized in a lot of ways and so it does become kind of more capital intensive and potentially more sophisticated and economies of scaling.
00:28:26.408 - 00:29:16.504, Speaker A: But there are also benefits to giving block builders kind of free range that depends on being the builder, say, both on Ethereum and on optimism, both on Ethereum and on, like Solana, for example. Then you could do something clever that basically says, I am going to compete to be the block producer both on this side and on this side, and knowing that if I win, then I will be able to kind of choose the block contents based on the fact.
00:29:16.542 - 00:29:18.020, Speaker E: That I won in both sides.
00:29:18.180 - 00:30:39.168, Speaker A: If you don't allow this, then it becomes harder to do this, right? If you don't allow people to build a house free brain, then this becomes harder to do, right, because you have to pre commit to the contents before you know whether or not you've won. And so you have to pre commit to the contents before you know whether or not you've won on both sides. So you can't really do cross domain stuff. And so there's still a benefit to being a proposer and to being in this kind of activist proposer that does sophisticated stuff, right? So in this way, to the extent that Crosscom AWV is a big deal, then builders having free rein is more decentralizing. Another fun one is that winning builders could offer pre confirmation services, right? So what you could do is you could say, I send a transaction where that transaction has a priority fee of, let's say, two Glay. But then I also add on top another priority fee that says if you, the builder, responds to me within 500 milliseconds with a cryptographically enforceable promise that you will include this transaction, then I'm willing to pay an extra five way. And obviously this promise, it can't be enforced by the blockchain itself because the blockchain's kind of tick time is 12 seconds and we're talking about guarantees in 500 milliseconds.
00:30:39.168 - 00:31:38.440, Speaker A: But you could imagine, like, a system based on chain link that does this, right? And if chain link is good enough and it works well enough, or you could even run it on Salana, you could imagine a trusted timestamping actor. You could imagine something that has reasonable enough assumptions that works. And in this way, basically, Transactors could pay extra for this kind of extra privilege of getting really fast confirmations. And this would be this kind of really nice backdoor way by which Ethereum users could basically get their transactions confirmed within 400 milliseconds. And Ethereum would sort of, in some ways, be competitive with fast chains, which I think is kind of cool. Okay, how to improve PBS, right? So this is the section where I talk about some downsides or some kind of subtleties of how PBS works today and some ways to improve it.
00:31:38.510 - 00:31:38.744, Speaker I: Anyway.
00:31:38.782 - 00:31:40.676, Speaker A: Is this my water? Mine.
00:31:40.708 - 00:31:41.144, Speaker I: Okay.
00:31:41.262 - 00:31:46.680, Speaker A: Can I have a water? I just wanted to take a water break before I get back to Blabbing.
00:31:49.360 - 00:31:58.430, Speaker B: Quite trying to be mindful of our audience, they were kicked out by Alpha software. Alpha spatial coupled on.
00:32:01.120 - 00:32:34.004, Speaker A: Soyva. Wait, this one is also met. Fine. Yeah. Can you just dump more water into my tea in my class? I don't care if it's cold, I just yeah. Oh, amazing. Yes, the owner my favorite word in the German language, but I've always joked.
00:32:34.052 - 00:32:34.650, Speaker G: About.
00:32:37.900 - 00:32:39.150, Speaker C: I love you.
00:32:41.120 - 00:32:41.870, Speaker E: Yeah.
00:32:49.180 - 00:32:54.970, Speaker G: I don't think it's much for the.
00:32:58.780 - 00:33:36.120, Speaker A: Proposed. The committee totally can collude with the proposal. The argument is that this is not as big of a risk because the committee is randomly sampled. And so you need like 51% of the validators to be involved to properly pull that off. But as I said, the argument against is like well, actually, 51% of people can and will collude if they can do it silently without if there's like we're talking about like five or ten pools and they know they're not going to get caught. So it's a good argument against anything threshold based, like the sum, like, ran down in the previous slot.
00:33:39.180 - 00:33:40.090, Speaker E: Most of.
00:33:44.860 - 00:33:46.330, Speaker G: Them interesting.
00:33:46.700 - 00:34:19.430, Speaker A: That could happen. Yeah, I guess Binance is going to be better at arping Binance than anyone else. Now I will talk about alternative market, like kind of what some other possibilities are for who ends up winning the builder market. So this is actually part of a third section. So this is basically the third section is basically it's. All about mitigating builder centralization, right? So this is like the section that I think a lot of people have been waiting for.
00:34:28.140 - 00:34:30.104, Speaker B: We got a request for anyone who.
00:34:30.142 - 00:34:34.140, Speaker F: Asks questions in this room to be loud.
00:34:34.960 - 00:34:50.716, Speaker B: There has been, I think, like seven or ten people pop up in the space and each trying to they've been having a lot of fun, although we muted all of them. So when they're trying to speak, I think I figure out what's the problem. But there's also a lot of compounding.
00:34:50.748 - 00:34:52.400, Speaker G: Problem with spatial software.
00:34:53.220 - 00:34:56.208, Speaker B: We'll deal with that after this presentation.
00:34:56.384 - 00:34:59.908, Speaker A: Oh, by the way, I appreciate the time on the computer being UTC time.
00:34:59.994 - 00:35:01.536, Speaker G: Wang chuan would approve.
00:35:01.648 - 00:35:03.830, Speaker F: Oh, yes, certainly.
00:35:05.160 - 00:35:05.668, Speaker G: Okay.
00:35:05.754 - 00:35:06.576, Speaker B: The miners.
00:35:06.688 - 00:36:08.728, Speaker A: Yeah. So I guess so. Talking a bit about censorship in BBS, right? So censoring transactions in BBS is still expensive. And this is the kind of argument about why, basically, if there is one transaction that a winning builder, and even, let's say, a hypothetical builder that's so good that they're winning, every slot wants to censor, and that transaction has a priority fee of X, then the winning builder basically has to pay X in every single slot that they censor. Right? So the griefing factor, if you're censoring is very against the censor. The sensor has to pay essentially hundreds or thousands of times X if they want to really censor the transaction properly. And the reason why is basically that the non censoring builders, if the transaction has a fee of P, without the transaction, they'd be able to win M or they would be able to bid M.
00:36:08.728 - 00:36:28.204, Speaker A: And with that transaction, they'd be able to bid M plus B. And the attacker has some advantage that's M plus A, right. Where this is A is like the advantage between the attacker and let's say the best honest debt builder that's not censoring, a could be less than P, a could also be greater than P. The math actually works out to be the same in all cases.
00:36:28.252 - 00:36:28.656, Speaker G: Right?
00:36:28.758 - 00:37:41.248, Speaker A: So if the A is less than P, then because the attacker has this constraint that they have to censor, then the attacker just loses because they get outbid by the non censoring builders, right, or potentially the attacker has to lose money. Like basically the attacker has to kind of go over here and bid higher. And so instead of the attacker biding like a bit higher than M and getting A, the attacker has to bid a bit higher than M plus P and they lose P minus A, right? So instead of a winning A, the attacker loses P minus A. So the attacker kind of loses P. And this basically happens kind of every single slot during which they keep trying to block this transaction. Now, if A is greater than P, then basically, instead of the attacker being able to bid a little bit higher than M, the attacker has to bid a little bit higher than M plus P, and if A is greater than P, then the attacker is still making a profit. But every SWAT they're going to make a profit that's like only a minus P instead of being A, right? So it's like if I send a transaction whose priority fee is like, even $0.05,
00:37:41.248 - 00:38:39.192, Speaker A: then if you censor my transaction, then you have to just keep on paying $0.05 every single slot. And if you want to censor forever, you have to keep paying five cents a slot forever. So the economics of censoring are still not very good for a relayer that wants to censor. But I think you can make a strong case that this is still not good enough, right? So, for example, if you only care about censoring someone for 20 minutes because, say, you want to do something bad to them in a D Five platform, or you have an on chain vote and you want to prevent them from voting in the vote only last 20 minutes or whatever, then there's a lot of applications where delaying people by 20 minutes is still very harmful. Right? And 20 minutes is 100 slots, so it's still a griefing factor of 100 to one. But there's a lot of cases where you could imagine people being willing to pay 100 to one griefing factor, right? I don't know.
00:38:39.192 - 00:39:51.452, Speaker A: The US. Government would totally be willing to pay 100 to one griefing factors against Edward Soda, for example. Right? So basically the question is, like, can we get censorship resistance to be kind of back to something closer to the level where it is today, right? And the reason why censorship resistance is very good today is because today, if you want to censor someone, you have to not only kind of outbid them in every block, but you also have to create full blocks, like double full blocks. So instead of 15 million gas, what's 30 million gas? Where all of those transactions are full of basically have priority fees that go above what you're willing to pay. And then you have to just kind of keep on letting the base fee go up and go up to the point where whatever amount that you're willing to pay for your transaction, the attacker has to be willing to pay that fee times 15 million gas every block. So the griefing ratio is like it's not even like one to one times the number of blocks. It's like the number of blocks times the size of a block divided by the size of your transaction.
00:39:51.452 - 00:40:50.580, Speaker A: So to delay someone by 20 minutes, instead of the griefing factor being 100 to one, it's like 10,000 to one. Right. By the way, grieving factor is like this is a term that I think people in crypto sometimes use. The grieving factor is X, when in order to force someone else to lose one dollars, you have to lose X dollars. Right? In this case, the reason why we're talking in terms of forcing people to lose money is because the assumption is people who are being censored can always raise their fees. And so the question is like, well, how much does the censor have to lose in order to kind of push the amount that the victim has to pay to a level higher than what they can afford? So status quo briefing factor is like 10,000 to one. Like, if I have a transaction and I'm willing to pay $5 to get it included, you have to pay like $50,000 to censor it for 20 minutes.
00:40:50.580 - 00:41:49.700, Speaker A: But with PBS, it does decrease to about 500 to one. And the argument is this is going to happen anyway because if PBS didn't exist, then Validators would eventually start to have their own infrastructure and that infrastructure itself could start accepting bribes to not include transactions. Right? Basically, censorship is kind of decreasing the griefing factor. Decreasing is an equilibrium to some extent, but we want to try to fix it, right? So we have two ideas for trying to fix this. One of them is this concept of secondary blocks where you basically have many block bodies that the proposal accepts in parallel. So instead of having one auction per slot, imagine like 20 different auctions per slot. And normally the first auction would be the only one that really has anything non empty.
00:41:49.700 - 00:42:10.620, Speaker A: But if transactions are being censored, then other people will make secondary blocks where they offer to include that transaction. And if you want to censor someone, you'd basically have to outbid not just the primary auction, but you would also have to outbid all of the secondary auctions. So this is one of the ideas.
00:42:12.960 - 00:42:15.020, Speaker B: Uri would like to counter.
00:42:17.940 - 00:42:19.264, Speaker F: Uri, you're on.
00:42:19.382 - 00:42:20.050, Speaker A: Okay.
00:42:20.820 - 00:42:22.290, Speaker B: Oh, no music.
00:42:22.900 - 00:42:23.650, Speaker G: Amazing.
00:42:24.760 - 00:42:25.510, Speaker A: Yeah.
00:42:28.600 - 00:42:30.070, Speaker F: Can someone speak.
00:42:34.680 - 00:42:39.450, Speaker G: It'S? That is can someone speak?
00:42:39.820 - 00:42:41.210, Speaker F: Can someone speak?
00:42:47.100 - 00:43:02.940, Speaker B: He is speaking, but we can't hear him. Unfortunately, you may have to rejoin. This happens with spatial where individuals somehow get randomly muted without you doing anything. You may need to quit and rejoin.
00:43:06.660 - 00:43:08.210, Speaker D: Can you guys hear me now?
00:43:09.620 - 00:43:10.370, Speaker E: Yes.
00:43:11.300 - 00:43:11.712, Speaker B: Okay.
00:43:11.766 - 00:43:12.930, Speaker F: Also no music.
00:43:13.780 - 00:43:14.624, Speaker A: Okay.
00:43:14.822 - 00:43:16.640, Speaker D: Still strong echo.
00:43:20.340 - 00:43:21.090, Speaker C: Okay.
00:43:21.460 - 00:44:03.440, Speaker D: Vitalik for always being the bad guy encountering. But isn't your analysis analysis of ignoring and basically the tip that a builder would make is significantly smaller than the cost of his own transaction. So basically all builders are somewhat incentivized to ignore all non DeFi transactions, push the base fee down so their own bundles, either their own bundles are cheaper or other people bundles are more profitable.
00:44:05.800 - 00:44:40.716, Speaker A: Right? I mean, this gets into the EIP 1559 debate. I would say no, because EIP 1559 in general has this property that unless close to 50% of participants of Validators are participating in a collusion to make empty blocks, then they're not going to decrease the base fee at all. Right. It's not even like a slight curve. It's like flat until some point. And the reason why is because if a transaction does not get included in block N, it'll just get included in block N plus one. Right.
00:44:40.716 - 00:44:47.570, Speaker A: And so the long run effect on the equilibrium base fee is just going to be exactly the same.
00:44:48.500 - 00:44:55.322, Speaker G: So in, right?
00:44:55.376 - 00:45:33.458, Speaker A: Yeah. So like, basically censoring isn't and then the other thing is like, if you censor a transaction for a really long time, then that would reduce the base fee. But then that also kind of changes the economic equilibrium and then it makes it worth it for other people, for some other person to transact. Right. Because there's kind of this long run law that the target is going to be 15 million gas, right? Because the base fee decreases until blocks have 15 million gas on average. And so if you're censoring, then you are right, okay. No, sorry.
00:45:33.458 - 00:46:09.940, Speaker A: The equilibrium, it does push down the base fee by a bit, but that's not going to increase priority fees. Right. The thing that could increase priority fees is obviously if builders start all censoring, everyone that doesn't pay a really high priority fee. But then if they're just censoring for economic reasons, then just because the economics of censorship are so unfavorable, you would just need one honest builder to be able to outcompete them, I think.
00:46:12.730 - 00:46:13.058, Speaker E: It'S.
00:46:13.074 - 00:46:29.526, Speaker D: Not to get the tip right. It's in order to make their base fee cheaper. So you're not trying to push others to pay a higher fee. You just make your own bundles more profitable. And you know, all the other block.
00:46:29.558 - 00:46:30.250, Speaker E: Builders.
00:46:34.190 - 00:46:46.880, Speaker A: Does making the base fee cheaper make your own bundles more profitable? I guess it does a little bit for one block because of the supply curve. But it's not like if the base fee goes down by five GWe, you can earn the five GWe, right?
00:46:47.810 - 00:46:58.850, Speaker D: No, but every bundle, I include a transaction which costs $10, and if I can push the base fee down, it will cost me $5. So the bundle.
00:47:00.650 - 00:47:02.386, Speaker G: Is more profitable.
00:47:02.578 - 00:47:29.130, Speaker A: Well, no, because validators are not going to increase their priority fees just because the base fee went down. Basically, your revenue as a block builder is dependent on what the priority fees are. And priority fees, like priority fees are just priority fees. They're not going to increase just because the base fee decreases.
00:47:29.290 - 00:47:48.050, Speaker D: No, you're missing the point. Tips are going. Priority fee is not going to go. But there's a base fee in each bundle of having a transaction, capturing arbitrage or front running, et cetera. And that would be cheaper. The bundle would be more profitable.
00:47:48.870 - 00:47:50.238, Speaker E: Would be more profitable.
00:47:50.334 - 00:48:04.300, Speaker A: But why would it be like the base fee is just something that goes straight from transactors, like straight into the ethereum pool. How does it make the bundle more profitable? Right, but that would be a little bit right.
00:48:06.110 - 00:48:07.210, Speaker E: In the limit.
00:48:09.950 - 00:48:17.710, Speaker A: Yeah, right. Because arbitrages are going to have like a very fat tail. It's like the first five arbitrages you make is like 99% of your arbitrage.
00:48:29.760 - 00:48:44.352, Speaker D: If somebody at the room could make the argument better. The communication is a bit hard, but basically not about the revenue, it's about the cost revenue. It's about the cost producing bundles become.
00:48:44.406 - 00:48:45.120, Speaker E: Cheaper.
00:48:48.900 - 00:48:53.670, Speaker G: Charges is so small that it doesn't right.
00:48:55.480 - 00:49:06.250, Speaker A: I don't think it's philosophically correct to even think of the base fee as being costs that you as a bundler pay. It's costs that transactors pay.
00:49:09.030 - 00:49:09.666, Speaker G: But like.
00:49:09.688 - 00:49:11.570, Speaker A: A transaction creating the bundle.
00:49:15.750 - 00:49:16.770, Speaker E: Transaction.
00:49:17.110 - 00:49:19.126, Speaker G: Right, right.
00:49:19.228 - 00:49:48.640, Speaker A: Okay. So the cost of doing front running and back running decreases. But in general the front running operations, I guess it depends on what the market structure actually looks like, but I definitely have the synth stick that there's a power lap. And if you reduce the cost of a front run by like 10%, you're not going to get 10% more front running revenue. Like you might get 1% or 2%.
00:49:50.790 - 00:49:56.500, Speaker D: Yes, but you'll make a lot more money than tips. Tips are nothing.
00:49:58.070 - 00:50:06.440, Speaker A: No, but the difference between the front runs that you can make at a base fee of 50 GWe versus the front runs that you can make at a base Fe 45 way is also nothing.
00:50:09.740 - 00:50:25.384, Speaker D: It's five times more than the transaction if the tip is one G wave and you can cut down the cost significantly.
00:50:25.432 - 00:50:42.320, Speaker A: Sure. Okay. Right. You can get an extra five way of revenue from front runs, but front runs are only a small portion of block contents as well. Right? Like you're not going to have a block full of like 5 million gas of front runs.
00:50:44.280 - 00:50:44.644, Speaker G: Right.
00:50:44.682 - 00:51:00.340, Speaker D: So basically it's a debate between igniting or ignoring them for a day, pushing the base down, and then go back to consensus. Sorry, the equilibrium.
00:51:02.700 - 00:51:14.590, Speaker A: So if you ignore one single transaction for a day, the impact on the base fee is going to be negligible, but the amount that you would have to pay that base fee over the course of that entire day.
00:51:18.240 - 00:51:20.104, Speaker D: I'll try to make a better argument.
00:51:20.152 - 00:51:23.892, Speaker E: On e three search drivers.
00:51:23.976 - 00:51:24.610, Speaker H: Okay.
00:51:27.220 - 00:51:53.544, Speaker A: Then I'll move on to idea two for now. So idea one, right? Basically secondary blocks, they have multiple auctions in parallel. So as a sensor, you have to outbid on all of them. So I think the argument is like, whatever your opinions are on how viable it is to win the auction or how viable it is for a sensor to outbid. Like if there's eight parallel secondary auctions, it increases by a factor of eight.
00:51:53.742 - 00:51:59.260, Speaker C: The sensor submit marginally lower secondary blocks.
00:52:00.000 - 00:52:10.556, Speaker A: Well, they would have to submit a secondary like to censor one transaction, they would have to submit a secondary block that loses money, that has a higher bid on all of the channels.
00:52:10.588 - 00:52:10.736, Speaker E: Right.
00:52:10.758 - 00:52:29.030, Speaker A: So in order to bid, if the transaction pays X to censored, you have to eight X plus one. Okay, so idea two is what we call censorship resistance lists or Cr lists. So the idea here is that.
00:52:30.760 - 00:52:31.664, Speaker G: Proposers.
00:52:31.712 - 00:54:18.760, Speaker A: Create lists of transactions that they've seen with a rule that the builder has to include those transactions unless the block is too full to include. Like actually this gets back to the question of like, well, is PBS going to just destroy the mempool? This is basically saying, well, no, we're actually going to keep the mempool and we're even going to give people a reason to use the mempool, basically, because if you send a transaction, then as soon as a proposer sees it and they include it in ACR list, then that transaction has to get included in the there's even this added incentive to use the Mempool to send things. So very simple proposal, right? Like basically the proposer just has a list of transactions that they've seen and the list doesn't even have to be limited. It can be very big and the proposer kind of publishes this list and the bids have to reference that list. And so the blocks have to include not necessarily either include all of the transactions or include some of those transactions and not have enough space to include any more of them. So in the long term, basically that means that either the Cr list gets included in one slot or blocks are like double fall until the Cr list does all get included. So this is just leveraging altruistic proposals, right? Like even if 10% of proposers are altruistic and they have non MTCR lists, then a transaction is going to get included within ten slots.
00:54:18.760 - 00:54:59.300, Speaker A: Potentially. You could even do some kind of really mean stuff and extend it. And you could have weird logic where attesters are only willing to attest to proposals if that proposal has a big enough Cr list. So you could even expand it further if you want to. But that's just the general design, right? It allows proposers to kind of be altruistic and be censorship, resistance, backstops if they want to. But even if they do that, those proposers would still be able to plug into the PBS market and they would still be able to get the highest revenue from any honest builder.
00:55:02.360 - 00:55:10.600, Speaker H: Why don't think this idea to the extreme and mandate that every transaction has to be in the Cr list?
00:55:10.750 - 00:55:28.216, Speaker A: Well, you can't mandate that every transaction has to be in the Cr list because you don't have network wide agreements on what every transaction is. You could have transactions that are published close to the deadline and you could have sort of lack of consensus about whether or not they were published early enough to be eligible.
00:55:28.328 - 00:55:28.652, Speaker G: Right?
00:55:28.706 - 00:55:33.288, Speaker H: This is the same problem I'll have with the smaller crisis as well.
00:55:33.394 - 00:55:44.530, Speaker A: Well, no, because in this case, the proposer just kind of like a bottleneck. The proposer chooses what the list is and so guarantees that everyone sees them.
00:55:46.100 - 00:55:52.820, Speaker H: Why not just let the propose do the same thing, but force the builders to only pick things from the CRF.
00:55:53.240 - 00:56:29.490, Speaker A: Oh, I see. If he wants to, you could do that. I think the reason not to do that is because we want the builders to be able to kind of do specialized things that require adding their own transactions. So you want builders to be able to front run uniswap, for example, right, which requires the builders to add their own transaction. Because if the builders can't do that, then you're just bringing back the incentive to be a proposer that's running these fancy algorithms yourself.
00:56:32.590 - 00:56:34.620, Speaker C: What do you see the downsides of this?
00:56:35.250 - 00:57:15.770, Speaker A: Yeah, I think the downsides are one is that it works to the extent that it relies on honesty. Right. So if only 10% of proposers are honest, then you have to wait ten swats, which is not optimal. Maybe there's ways to make it better. There's actually a much more subtle downside, which is there are actually benefits to removing the concept of an in protocol mem pool. Basically, the downsides have to do with account abstraction and stuff like ERC four three seven. Basically, people being able to use smart contracts as wallets.
00:57:15.770 - 00:58:13.094, Speaker A: That becomes something that's very easy to do if you don't have a protocol level concept of a transaction, meaning a user operation, because you could just create L2 mem pools that kind of work with different kinds of smart contract wallets. And if you have a censorship resistance design that's based on secondary blocks, then it doesn't have to be aware of transactions, it can just work with whatever. But if you have censorship resistance to lists, then Cr lists have to be aware of what the concept of a transaction is. They have to be aware of this concept of an object of user intent. And so in order to do account abstraction, in order to make ERC four three seven fit into this model, you have to do a bit of extra work. You have to maybe even enshrine not all of yours a 34337, but some parts of it. But that's a disadvantage.
00:58:13.094 - 00:58:37.220, Speaker A: That's an advantage of literally getting rid of the memble and getting rid of ethereum, being aware of transactions. So if you think that is a net good, then you basically already think if you think that public memble is continuing to exist as a net good, then I think you already think that disadvantage is outweighed by the other advantages, and Cr lists are probably better.
00:58:39.030 - 00:58:39.780, Speaker G: Okay.
00:58:41.590 - 00:58:57.670, Speaker A: So those are just some ideas for improving censorship resistance and for kind of keeping up an incentive to have and continue to use the public vent pool. So next we can talk about internally decentralized builders.
00:58:57.750 - 00:58:58.234, Speaker G: Right?
00:58:58.352 - 01:00:45.238, Speaker A: So the hope here, and I think this is a hope that's strongly felt by even a lot of flashbots people, is that the builder that wins a market that wins the market might even itself be a builder that is internally decentralized. And there are unique advantages that internally decentralized builders have right? So the dream is basically that you have builders that decentralize internally where the builder is a system that accepts bundles from an open market of actors that are called searchers. So searchers submit bundles. Bundles are sets of transactions and those bundles, like a bundle, could be one transaction, a bundle could be an entire block, a bundle could be a collection of transactions, a bundle could be a collection of transactions, plus the requirement that that bundle appears first. So you can have many different kinds of bundles. And the job of the builder is to take the bundles provided by searchers, take the ones that pay the highest fee, kind of arrange them in order, and just publish that just as a block body, right? So instead of the builder being like a single tightly coordinated actor, the builder itself is this kind of market. So what's the benefit of this, right? And what's the reason why this might conceivably be able to win the market? The reason is basically that searchers become an open market, right? So instead of just being like, say, James Street being a builder or Binance being a builder, and they hire 100 of their own employees to do all of the kind of searching for mev opportunities and no one else can participate.
01:00:45.238 - 01:02:42.158, Speaker A: You have an open market and you have random people all around the world that all create their own strategies that specialize in particular things. So you might have some searchers that specialize in binance arbitrage, some searchers that specialize in collecting liquidation, some searchers that specialize in giving people guarantees that their transaction will be included in doing that really quickly. So you could have different searchers that have different roles, and so you could have this really big set of searchers that's much bigger than the number of employees a single company can hire and the open market can kind of aggregate, all of them and basically be able to create this combined block offer that can bid higher than a single company that only has, like, a limited set of strategies can bid. The key challenge in this design is how to prevent builders and other searchers from cheating searchers, right? So if I'm a searcher and I have some strategies that make me really good at binance arbitrage or make me really good at collecting liquidations, then if you're running this builder marketplace, then how can we prevent you from being able to look at my bundle and basically search and replace my address for your address and try to kind of steal my strategy. So it's the same challenge as builder proposal separation, but kind of one layer back, right? So it's like we're basically going from a block construction being like a one layer task to being a two layer task and then to be even being a three layer task. And if you really wanted to, you could even have sort of meta searchers that aggregate different searchers. So the general solution path that I know about is, like, searcher bundles are encrypted until a block is locked in, right? So searchers publish encrypted bundles.
01:02:42.158 - 01:02:45.278, Speaker A: The builder operates only over encrypted bundles.
01:02:45.454 - 01:02:46.180, Speaker G: And.
01:02:48.390 - 01:03:28.430, Speaker A: Everything is encrypted until the moment where the block proposer agrees. And to make it even more robust, it could wait until after the block proposer agrees and attesters agree. So even the block proposer can't, like, equivocate and get slashed and cheat people. Only then does everything get decrypted and the block proposer publishes and everyone sees what's going on. Now the question is how to do this magic encryption, right? So the magic encryption has to have two properties. One is it has to have guaranteed decryption when the proposer agrees and when the block is locked in. And two, you have to be able to combine partial bundles, right? Like you have to be able to combine different sets of transactions.
01:03:28.430 - 01:04:33.826, Speaker A: You might even want to be able to kind of verify proofs that the transactions are valid. And what if some of the transactions are not valid in the context of other transactions? And so the searcher might even have to prove that they are making fees in a way that is kind of not dependent on ordering. So one way to do this is to have a trusted builder and basically to have a builder that's like, hey, I'm the builder, trust me, and I have a look, I'm angel, I have a halo over my head and you can trust me. So this is pretty close to what Flashbots does today. The second strategy is to use SGX to use trusted hardware. So basically all the searcher bundles get encrypted to a public key, where the private key only is accessible inside of an SGX module. Or you could use other trusted hardware and then you would have basically the entire system that actually combines bundles and creates blocks.
01:04:33.826 - 01:05:14.210, Speaker A: And all of that would just live entirely inside of SGX. And everything would be like they would not be able to see any bundles in the clear. They would only see the final blocks. Or you could have instead of SGX, you could also do multiparty computation, but that probably has overhead that's way too high. Or you might be able to do it if you have fast ZK Snarks, right? Like you could have a ZK Snark that says like, hey, these are three transactions. And if you apply these transactions, then you have these three transactions. The last transaction includes this payments to the builder.
01:05:14.210 - 01:06:03.294, Speaker A: And you basically have sets of encrypted transactions that come with proofs that they're encryptions of something valid. And then you just kind of have lots of these and the builder then once the proposer proposes, the builder sort of decrypts all of them. And the only thing the builder has to do is compute a state route at the end, right, and compute a witness. I think it does require kind of snarks over encryption, it might require snarks over the EVM. Actually, I haven't fully thought through this. Maybe there's a really clever way to avoid requiring starks over the EVM. But the good news is that starks over the EVM are something that's increasingly getting better and better, so might even be viable.
01:06:03.294 - 01:06:58.740, Speaker A: Right? So maybe there's a clever way to avoid a trusted builder and avoid SGX. But this is a research problem. Right. But in general, if you can make a decentralized builder and you can make a decentralized builder that's actually good, then this would be another way kind of out of the world, where Finance controls 60% of Ethereum blocks and Jane Street controls another 35% more paths to the same goal. Right. So we can talk about like PBS in general, it ensures validator decentralization by sort of pushing all the centralizing stuff to the builder. There is the question of like, well, what happens if builders become hyper centralized? One way to do it is to mitigate the censorship externality and the other way to do it is to try to create a decentralized builder that can beat out the centralized ones and try to sort of fight for their.
01:07:00.570 - 01:07:02.230, Speaker H: Builder can never compete.
01:07:04.330 - 01:07:06.114, Speaker A: Okay, give me an argument.
01:07:06.162 - 01:07:11.334, Speaker H: Right. Apart from all this very complicated student.
01:07:11.372 - 01:07:12.902, Speaker G: Knowledge stuff, you have to kind of.
01:07:12.956 - 01:07:31.130, Speaker H: Prove these builders grappling separately, right? They kind of always miss the opportunities. A centralized party who sees all of this and can run this all in one ecosystem and one umbrella cannot discross.
01:07:31.290 - 01:07:46.660, Speaker A: Well, right. But on the other hand, the argument is that because the decentralized builder is an open market, it's going to have access to a much larger number of people that can find it's an open market structure question.
01:07:50.250 - 01:07:58.680, Speaker B: I think Francesco wants to speak up. He has a couple of questions, but he's afraid of echo. So Francesco, you could try.
01:08:01.210 - 01:08:01.650, Speaker G: You could.
01:08:01.660 - 01:08:02.860, Speaker B: Try to unmute yourself.
01:08:04.270 - 01:08:12.854, Speaker E: Yeah, I believe that the centralized builder.
01:08:12.902 - 01:08:13.660, Speaker I: Should have.
01:08:15.650 - 01:08:20.782, Speaker E: But I don't really understand why. How could we get to a point.
01:08:20.836 - 01:08:21.440, Speaker G: Where.
01:08:23.570 - 01:08:48.600, Speaker E: Centralized builder wouldn't also have access to basically we still be able to naive as far as vacant. So if everyone sophisticated, anything maybe have some extra?
01:08:54.590 - 01:09:45.900, Speaker A: Yeah, definitely a very good question. I think the argument here is basically that in order for a builder to be able to plug into searchers, this open market of searchers, it would needs to be able to convince them that it's not strategy stealing. And the only way to convince them that it's not strategy stealing basically is to do this sort of thing where you use encryption of some kind. And so even if the thing lives in a data center, you still have this property that the searcher has privacy and that actually already is enough decentralization. Right. Because if we're talking about censorship resistance, then the searcher would be basically any technique that's good enough to prevent strategy stealing would also be a technique. That's good enough to prevent the yes or allow the searcher to include transactions that the centralized builder would want to send.
01:09:51.420 - 01:09:52.410, Speaker G: Go ahead.
01:09:53.580 - 01:10:02.540, Speaker H: If we imagine we have this magic encryption whatever thing, then we could also do just encrypt transactions, order them by.
01:10:02.610 - 01:10:04.750, Speaker G: Fee and.
01:10:06.960 - 01:10:08.350, Speaker H: Basically be done.
01:10:10.880 - 01:10:11.516, Speaker G: Instead of.
01:10:11.538 - 01:10:12.750, Speaker H: All of the other things.
01:10:15.380 - 01:11:14.950, Speaker A: Then we have like the complete well, it depends. The encrypt transaction thing is it is a bit limited, right, because you could encrypt the contents and you could have some mechanism where in some future block the next honest proposer just includes the decryption key and they can kind of collect fees from it or whatever. But the problem is you would still have to keep in plain text who the sender is and the verification logic because Ethereum would have to somehow know that whatever the thing is that it's including it will be able to pay a fee. Right. So if you want to censor a particular operation, you might be able to censor but if you want to censor or you might not be able to censor but if you want to censor an address, you would still be able to totally censor it. You could prevent someone from sending anything. So that's like one way in which just encryption by itself is not good enough.
01:11:14.950 - 01:11:43.420, Speaker A: You could, if you really wanted to get around that with a wrapper transaction where you have a transaction, basically one of the things that it does is it does like a call internally but then that's the sort of technique that could be done in any other system as well, I guess. Right, so at that point the question is how is that better than just proposed censorship resistance lists?
01:11:46.140 - 01:11:46.648, Speaker G: Right?
01:11:46.734 - 01:12:07.824, Speaker H: Basically the argument is more like the last thing you kind of presented. The assumptions there are so great that you can also solve all these problems there. You can just build a much simpler system. This is my basis point. For example, if you see this trusted hardware box, then you can just right.
01:12:07.862 - 01:12:59.330, Speaker A: Well, I think the issue is that there's a lot of fancy cryptography that people are willing to put into L2, but they're not willing to layer one because that fancy cryptography is like trusted hardware especially, right. It is likely to break and if you really use it, you'd have to be ready to frequently update it. And even a lot of this fancy ZK stuff, it might be complicated and in a way that layer one would not be willing to do it, but L2 can because the consequences of things breaking at L2 are smaller. So often I think the rationale for Ethereum doing things in these L2 ways, once theoretically it could bake everything into layer one basically is just that Ethereum strives to have a simpler base layer and so the complexity has to be shifted to L2. Sometimes.
01:13:01.140 - 01:13:03.570, Speaker I: Francesco has another second question.
01:13:05.960 - 01:13:10.148, Speaker F: No, he said, right, makes sense.
01:13:10.234 - 01:13:11.190, Speaker B: And no.
01:13:13.800 - 01:13:15.824, Speaker I: What they do is searches.
01:13:15.872 - 01:13:17.430, Speaker G: Proposed funnels which.
01:13:22.860 - 01:13:55.700, Speaker A: Right, okay, so that's a good one. One thing you could do was you could do fancy said intersection stuff with proposal, with sender addresses, but that would be hard and that might break things. I think the more realistic approach is to just do a hard work to modify ethereum so that transactions that are invalid for sender nonce reasons, they are valid, they just don't do anything. And so that way if you have bundles you can always concatenate them and they're still valid.
01:13:57.720 - 01:13:59.380, Speaker H: Not a second transaction.
01:14:00.760 - 01:14:02.870, Speaker G: Right. Basically.
01:14:05.000 - 01:15:27.768, Speaker A: The argument is it's the searcher's responsibility when the searcher makes the bid in their bundle, to kind of be comfortable with the fact that maybe there will be something else in some previous bundle that conflicts with their bundle and they just have to be okay with taking the risk of paying the fee for their bundle but not getting the benefits. So I guess kind of challenges in the PBS space in general. One is to kind of agree on the in protocol PBS design. So which is like two challenges, right? One of them is that there's a lot of different designs and there's possibly other designs that haven't been considered yet. There's even more moderate designs. I've heard people that propose things like oh, most of the mev actually comes from the first five transactions in a block and so how about we just let, we just have a proposed, a builder market for the first five transactions and we let the proposer choose all the other transactions. But then I would argue that that particular idea is probably worse than just doing a Cr list and the Cr list has basically the same effect.
01:15:27.768 - 01:16:43.828, Speaker A: But the point is there's still a space that you can think in and there's still to the extent that these existing designs have weaknesses, there's still kind of room to think through and try to come up with some approach that doesn't have those weaknesses. And also the second issue is that the PBS design may depend on changes to a future ethereum consensus, right? So we're actively researching this concept of single slot finality where instead of the chain finalizing after like two epochs which is 64 slots or about 13 minutes, the chain would finalize after. So I have a full consensus around kind of tendermint style left for every single slot. And this has a lot of advantages in making the chain more robust. But it does mean that we saw in the two slot design, right, like how the PBS design is very closely interwoven into the consensus, right. And if you want to properly optimize and kind of reduce lot times then you are going to have to sort of design the consensus around the PBS and design the PBS around the consensus to some extent. And so it may well be possible that we'll only end up just getting all both of these things at the time.
01:16:43.828 - 01:16:58.536, Speaker A: So that's one challenge come up with a better maximally solve censorship resistance. So figure out secondary blocks, cr lists, modifications to ERC four, three, seven to support Cr lists. I wrote up a document on that.
01:16:58.558 - 01:16:59.320, Speaker G: Recently.
01:17:01.100 - 01:17:10.156, Speaker H: Just a nuance to send them to. If I, as a user want to make a transaction which shouldn't be front run, I have no ability to do that.
01:17:10.178 - 01:17:32.130, Speaker A: Right? Well, I mean, the current approach is you could send it through flashblots protect and I guess the hope in the future is that there will be searchers that specialize in this task of you send them a transaction and they just include a bundle that just contains your transaction. And the only thing they do is just not show it to anyone.
01:17:33.380 - 01:17:36.224, Speaker G: Yeah, whatever.
01:17:36.422 - 01:17:37.170, Speaker A: Well.
01:17:41.320 - 01:17:43.204, Speaker H: Right, I think this is something.
01:17:43.402 - 01:18:38.040, Speaker A: Yeah, I don't know, I agree, there's definitely an assumption baked in here that users are going to not users but wallets are going to get more sophisticated. Right. So one of the ideas I mentioned is this idea that users could pay extra priority fees for the privilege of getting a promise of inclusion within 1 second. And if you do that, then that requires the wallet to understand it, that requires the wallet to understand which mechanisms for verifying these promises that trust and so forth. Or if you want to do a kind of front run resistance thing, then you would have to choose which searcher marketplaces you trust. Actually, you might not even have to trust a searcher. You as a user could just create the one transaction, bundle yourself and just ship it straight into the decentralized builder marketplace.
01:18:38.040 - 01:18:50.510, Speaker A: But then to do that you'd also have to kind of trust SGX or trust fancy witness encryption to kind of decrypt things automatically or whatever. Right, so.
01:18:54.560 - 01:18:56.924, Speaker G: That'S yeah.
01:18:56.962 - 01:19:59.440, Speaker A: So, like, basically the idea here is that, like, the, like, wallets are probably one of the things that's going to end up sort of complexifying a little bit as a result of this transition, but the kind of positive thing that will come out of that hopefully as kind of better protection for users. Such a persistence. Make it explore this idea of building market winning, internally decentralized builders. Right, so I think these are kind of the two tracks for how to mitigate how to make the world where finance creates 60% of the or constructs 60% of the blocks in Jane Street, constructs another 35% kind of as a nondisclopian as possible. One of them is solve censorship resistance as using some kind of backup layer and the other one is beat them both with a builder that's internally decentralized and better and basically make it good enough to present the case for why Binance and Jane Street should be searchers instead of being builders.
01:19:59.780 - 01:20:03.072, Speaker B: How do you define internally decentralized builders?
01:20:03.216 - 01:21:06.324, Speaker A: The idea that a builder instead of being a firm in the yes. Coasian sense of the firm is itself some kind of marketplace that has open participation. That would be one definition. Another kind of very pragmatic definition would be that an internally decentralized builder is a builder that accepts bundles from the outside and has the property that it doesn't know what it's accepting until after. Or basically, it accepts bundles from the outside and has some kind of mechanism where even if whoever's operating the builder doesn't want to, they might still get forced to accept other transactions. So they can't censor. Definition one, instead of being a firm, they're a marketplace.
01:21:06.324 - 01:21:34.210, Speaker A: Definition two, they can't censor, and definition three, they can't strategy steal. And then another challenge is more exploration into this cross domain mev issue, because cross domain mevo is also going to affect what the optimal designs in a lot of these cases are. And I think this is roughly where the space of dealing with mev centralization is at.
01:21:36.980 - 01:21:39.456, Speaker G: Yeah, very interesting. Thanks a lot.
01:21:39.558 - 01:21:49.936, Speaker B: Yeah, thank you. I think this is the most thorough PBS talk I've been to. Although it's been yeah, I mean, it's.
01:21:49.968 - 01:21:53.540, Speaker A: The first one that you allowed to be, like, glad length.
01:21:55.820 - 01:21:59.370, Speaker B: Right? That's like plus two hour plus, right?
01:22:01.340 - 01:22:02.090, Speaker F: Yes.
01:22:05.420 - 01:22:07.008, Speaker B: We forgot we have audience.
01:22:07.124 - 01:22:07.790, Speaker F: Sorry.
01:22:09.440 - 01:22:12.060, Speaker B: Oh, there are people jumping and clapping.
01:22:15.600 - 01:22:17.420, Speaker F: Okay, thanks for jumping.
01:22:18.160 - 01:29:12.584, Speaker B: Okay. Yeah. So I think next we have a discussion around Mapboost, and there's no slides or presentation, but if we can all see the HackMD doc, I have referenced all of the existing documentation that there is on Mapboost as well as Mapboost. The GitHub repo. It's live on testnet. So do we want to take a quick break and get some water? Yeah, five minute break and then we'll be back. All right, let's get started.
01:29:12.584 - 01:29:17.004, Speaker B: Metacris, what would you like to share?
01:29:17.042 - 01:29:22.220, Speaker E: The screen, I think just go to the Map boost.
01:29:25.760 - 01:29:26.508, Speaker G: Yeah.
01:29:26.674 - 01:29:31.840, Speaker B: You can have control over this, although it's displaying on multiple screens.
01:29:32.260 - 01:29:33.136, Speaker C: All right.
01:29:33.238 - 01:29:33.890, Speaker F: Yeah.
01:29:36.180 - 01:29:49.364, Speaker G: Let'S start here. Going to let's go into keep okay.
01:29:49.402 - 01:30:27.188, Speaker C: Let'S keep this then a little bit shorter, like, not an hour. But I was thinking now I think it's maybe a good time to just give a quick overview of the stable things at flashboards, at the development nephews, the relays, and then maybe we can discuss a few parts about the relays themselves. There has been a very interesting build up so far, and the relays themselves, they pose a strong trust requirement. They have trust requirements from the builders, from the proposers, and there's a few like I would like to mention a few of the risks, some mitigations that.
01:30:27.194 - 01:30:30.644, Speaker G: We have in mind and then where.
01:30:30.762 - 01:31:20.630, Speaker C: To move from here. I hope people in Spatial can also hear me. I will just leave this open. There's also API spec draft of the relays. That includes APIs for the proposers as we worked them out with the EF guys in the builder specs, but also includes the APIs for block builders and also includes some data APIs that seem pretty important to get data. Out of the relays about what payloads have been delivered to proposers specifically, but also kind of what bids have been received by Builders and a few other events. For instance? Okay, current state of things, let's keep it real short.
01:31:20.630 - 01:31:59.810, Speaker C: Thanks to a lot of collaboration with people from all over, from the consensus clients, from the EF light cloud and so on the specs they are finalized. Boost is basically feature complete and is being tested on all the networks. And I think the last thing is that a few consensus clients are still wrapping up the implementation. So Techu and Prism have full implementation, lodestar is also just getting done and Lighthouse has an.
01:32:01.700 - 01:32:03.584, Speaker G: That'S a little bit.
01:32:03.622 - 01:32:18.680, Speaker C: On secondary priority to get this finished, I think. And Nimbus is also in the process of finishing it. So all in all, this side of things looks pretty good. We have our relays.
01:32:21.180 - 01:32:22.170, Speaker G: Yeah, sure.
01:32:22.940 - 01:32:36.830, Speaker C: You can now run it. There is like some apr that you can build yourself and then some guide to how to do that and run it. So the function is there, but yeah, they will be there. Are you planning on using?
01:32:41.840 - 01:32:48.530, Speaker E: There is no M and B books available. People will just switch back again. Then we end up with the same problem that there is.
01:32:49.540 - 01:32:54.720, Speaker C: Yes, absolutely. The good thing is that we can wholeheartedly also recommend steku.
01:32:57.220 - 01:32:58.480, Speaker E: Everyone will switch.
01:33:03.080 - 01:33:39.170, Speaker C: Yeah. The concern maybe for online participants is that if not all connected clients are ready then this will lead to more adoption of those clients that have the builder specs implemented and is not helpful for the client diversity. But from the current point of view everybody is like in the final stages of implementation and this seems to be fine. There is not too much time left, I would say, but at least three out of the five are currently being tested also in the shadowforks and.
01:33:43.800 - 01:33:44.164, Speaker G: The.
01:33:44.202 - 01:34:31.964, Speaker C: Relays are particularly interesting pieces. So as a proposer you add the relays with the relay public key as basically your trusted relay or a number of trusted relays and the bits that the proposers receive from the relay are signed and mapboost verifies that this is actually coming from the relay that you trust. Some of the risks here include both on chain chain liveness risks. For instance, if there's basically three problems that can arise from the relays. Once a proposer signs a payload, which is the relay cannot release the block.
01:34:32.012 - 01:34:35.216, Speaker G: The payload that can be folded, the.
01:34:35.238 - 01:35:29.620, Speaker C: Relay can propose a bad block with incorrect transactions or other incorrect properties, or the value that it's claiming to send to the proposer is not what's actually inside the block. And there's these different mitigation ideas. So for the withholding part it's kind of hard to attest this properly because it can also be network issues. There can be a networking issue on this side or on that side. And it's really hard to attribute that to malicious really behavior, especially if it's like happening once. It's kind of impossible to know that really in this case we felt like without a committee or some way of broadcasting the payload, it's not easy to say whether this was malicious behavior.
01:35:30.840 - 01:35:32.436, Speaker H: What does the proposal do in this.
01:35:32.458 - 01:35:36.032, Speaker G: Case then the proposer misses the slot.
01:35:36.096 - 01:35:38.520, Speaker C: And this is a slot without block.
01:35:40.620 - 01:35:43.690, Speaker H: Apart from that, nothing, no slashing, no.
01:35:44.460 - 01:36:18.864, Speaker C: Nothing very bad happens. It can just lead to a cascading, to a continuous if one of multiple relays that most of the validators have configured keep withholding then there can be like a long chain of just empty slots. This is basically kind of the worst case from the withholding perspective here. The mitigation that we are currently thinking about and working on is a circle.
01:36:18.912 - 01:36:22.292, Speaker G: Breaker mechanism inside the beacon nodes that.
01:36:22.346 - 01:36:40.700, Speaker C: If there is like too many empty slots that beacon nodes would stop using, the builder network would stop. Using interacting with Mapboost and that they would require a special API call or a restart or whatever mechanism to restart using the external builder network.
01:36:41.120 - 01:36:42.430, Speaker G: So this is like.
01:36:48.050 - 01:37:50.930, Speaker C: One proposers can another approach here is a really monitor which is possibly again a trusted service thing that proposals can configure that they send the bits also to the relay monitor and to the relay. And the relay monitor requests the payload as well as the proposal itself requesting the payload from the relay. In this case, the relay monitor would also receive the final payload could simulate it could verify that the block is valid and that the payment is correct and if that a relay is not doing that correctly could penalize the relay and leading basically to all the proposals using the relay monitor having information about problems arising with any specific proposal.
01:37:53.830 - 01:38:11.260, Speaker E: Like the opposite as a solar validator depending on more entity depends on the roof then it depends on I don't know what depends on the builder. Okay, we depend on the relay, but.
01:38:12.670 - 01:38:14.166, Speaker H: Everybody depends on the relay.
01:38:14.198 - 01:38:52.530, Speaker E: Actually yeah, kind of like maybe a feature request, I don't know. But most of them right now is the arbitrage or sandwich. Those three things capture most of them. So maybe have something like M and B where you just have a wallet where you deposit your own funds as a solar staker and you locally do the mev stuff yourself instead of depending on the relay. And only then when the relay has a better block than you have, then you actually take the block from the relay.
01:38:54.410 - 01:38:57.010, Speaker C: This means like you run your own builder?
01:38:57.170 - 01:38:58.246, Speaker G: Yes you do.
01:38:58.348 - 01:39:31.490, Speaker E: And also for most NAV you don't need that much. I think 100 EASA does most of the MOV and I think people also understand how much ease I mean they already need 32 to get started. The chances of them having more influence, maybe make accessible. Do we have good numbers on how much energy you can get just with onchain stuff? How much you can get with also having a binance.
01:39:35.990 - 01:39:36.740, Speaker G: On?
01:39:38.490 - 01:39:41.334, Speaker B: Well, Elaine is online from our data.
01:39:41.372 - 01:39:48.150, Speaker G: Team, represents the question, do we have.
01:39:48.220 - 01:40:11.040, Speaker E: Good statistics on how much mev can be collected just by running kind of pure algorithms on only Ethereum transaction memple data versus how much can be collected by also plugging into binance? Doing arbitrage against binance versus comelage can be collected through more complicated cross domain stuff.
01:40:12.210 - 01:40:16.800, Speaker I: I think there's no comparison, but she just recently did an analysis on.
01:40:20.450 - 01:40:23.620, Speaker C: Yeah, she might be a person who reached out.
01:40:24.470 - 01:40:25.746, Speaker E: Is there a number?
01:40:25.928 - 01:40:28.120, Speaker C: Not that we have right now. I think.
01:40:30.890 - 01:40:33.734, Speaker I: Presented it internally, but I don't recall the number.
01:40:33.852 - 01:40:35.080, Speaker E: But it was a lot.
01:40:35.450 - 01:40:36.198, Speaker A: Right?
01:40:36.364 - 01:40:37.880, Speaker E: If the number is a lot.
01:40:43.450 - 01:40:44.198, Speaker A: Basically.
01:40:44.364 - 01:40:49.754, Speaker I: I think the takeaway was that cross chain in terms of on chain and.
01:40:49.792 - 01:40:51.900, Speaker E: Off chain is a lot.
01:40:53.710 - 01:40:55.498, Speaker I: Now, I thought that the profit was higher.
01:40:55.584 - 01:41:26.726, Speaker E: So currently that profitability is like 95% go to the miners there. It was like 10%. So profit for research is a lot. I said people could also do other drugs on finance themselves. Right. They won't depend on right, but like then you're talking about homestakers. It isn't but it doesn't rely on finance sending you the no, but it will look, we need to have a.
01:41:26.748 - 01:41:27.720, Speaker G: Finance again.
01:41:29.610 - 01:41:37.050, Speaker B: I'm not sure whether this assumption or this conclusion stands. Like when there is competition.
01:41:39.710 - 01:41:40.780, Speaker E: You mean this?
01:41:42.270 - 01:41:42.586, Speaker A: Yeah.
01:41:42.608 - 01:41:44.126, Speaker I: I think the statistic point like this.
01:41:44.148 - 01:41:47.838, Speaker E: 20% basically tells you there is not.
01:41:47.844 - 01:41:49.294, Speaker I: A lot of competition because if there.
01:41:49.332 - 01:41:49.920, Speaker A: Was.
01:41:53.090 - 01:41:55.478, Speaker E: A lot more would go to a minor.
01:41:55.594 - 01:42:01.214, Speaker B: Yeah, well, I think it's the suggestion like that solo stakers become builders.
01:42:01.342 - 01:42:01.826, Speaker G: Right.
01:42:01.928 - 01:42:04.306, Speaker E: Well, that was what was brought up.
01:42:04.328 - 01:42:04.514, Speaker A: Right.
01:42:04.552 - 01:42:11.206, Speaker E: And the statistic I want to know is, is it the case that if you're just running bits and class and.
01:42:11.228 - 01:42:14.466, Speaker G: You get an algorithm transactions, on average.
01:42:14.498 - 01:42:35.970, Speaker E: You can get like zero point 23 watt, but if you also have a mining arbitrage, you can get zero point 24? Or is it zero point 45 or is it 0.345? I don't have percentage numbers, but the Ethermine has its own arbitrage box, which only does this arbitrage and we don't do any. So it's just arbitrage.
01:42:36.070 - 01:42:39.658, Speaker G: And I think over the last I'm.
01:42:39.674 - 01:42:44.160, Speaker E: Not sure, like one year, it's made around 3000.
01:42:45.270 - 01:42:46.020, Speaker G: Okay.
01:42:50.070 - 01:43:11.234, Speaker E: So one year about two and a half million blocks. So Ether mine is like some portion of that to about 7000 blocks, 3000. So that's going to be about 0.5 per block, which is like a pretty substantial fraction of maybe, I think.
01:43:11.292 - 01:43:11.900, Speaker A: Right.
01:43:12.510 - 01:43:16.730, Speaker B: But there was a question about your bidding strategy.
01:43:17.950 - 01:43:19.260, Speaker G: What was the question?
01:43:20.270 - 01:43:24.810, Speaker B: That will get a step deeper later. Last time we talked about, I think.
01:43:24.880 - 01:43:28.606, Speaker G: That you bid at the highest yes.
01:43:28.708 - 01:43:38.670, Speaker B: You peep into the medical oh, you peep into sorry. So you will pay as high as the highest bidder?
01:43:39.750 - 01:43:41.346, Speaker E: I mean it's right now it's that.
01:43:41.368 - 01:43:49.846, Speaker G: Way but I think once we'll just use and see how it goes the.
01:43:49.868 - 01:43:56.054, Speaker E: Only reason why we are able to use freshwater only is because of front.
01:43:56.092 - 01:44:00.114, Speaker G: Running and compliance reasons. Interesting.
01:44:00.252 - 01:44:08.060, Speaker B: Yeah, well we'll go back to compliance reasons over there but yes.
01:44:11.470 - 01:44:50.280, Speaker C: The other issues that relays malfunctioning relays could pose is that they claim incorrect values or do not verify the biller values correctly because the beacon node right now it has no way to actually verify the values yeah, the claim value in the bits. So it just takes whatever relay gives the highest value on face value here it would be really useful if the NVD boost has a way or the picker node has a way to actually.
01:44:56.570 - 01:45:31.320, Speaker E: Get values is probably the worst kind of invalid blocks and missing blocks are basically the same. It's like all that you can do, all that the builder can do is they can just not publish or be like they cannot publish. The proposal loses but the builder also loses and the builder maybe gets some complicated strategy or the proposer in the next round and getting that's much less. But if they cheat on the bid then they can basically steal the proposer's entire.
01:45:33.850 - 01:45:37.030, Speaker A: Is this the simplest strategy to fix.
01:45:37.180 - 01:45:47.290, Speaker E: Or to kind of protect against those kinds of attacks to just show the local branch showing from the block header to the transaction?
01:45:53.150 - 01:46:02.670, Speaker C: I know that internally there was, I think Tamash mentioned that wouldn't you need a separate state route to verify.
01:46:05.110 - 01:46:06.530, Speaker E: The first transaction?
01:46:10.070 - 01:46:11.774, Speaker A: It doesn't even have to be the first transaction.
01:46:11.822 - 01:46:22.390, Speaker E: Second, it could be any transaction because if that transaction was valid for any reason, like if it doesn't have an update or whatever, then that blocks are valid.
01:46:32.670 - 01:46:57.630, Speaker C: Question can a builder, if he has a transaction payment transaction at the end of the block already access the funds he would have received in the transaction before? Yeah, so payment proof here would be helpful. Also important to consider that builder payments.
01:46:57.790 - 01:46:58.500, Speaker G: Are.
01:47:01.350 - 01:47:10.930, Speaker C: In case of a reorg. The builder payment transactions will also go and become public so they need some kind of reorg protection.
01:47:12.550 - 01:47:16.082, Speaker G: One way you could have builder payments.
01:47:16.146 - 01:47:19.526, Speaker E: Coming out of a Fresh account where that Fresh account kind of grabs all.
01:47:19.548 - 01:47:21.430, Speaker A: Of the using the Wikipedia.
01:47:22.970 - 01:47:26.774, Speaker G: Right, but then that would not be.
01:47:26.812 - 01:47:30.106, Speaker E: Provable because from the outside that it.
01:47:30.128 - 01:47:31.740, Speaker A: Wants to have but that one's zero.
01:47:39.510 - 01:47:39.970, Speaker G: Right?
01:47:40.040 - 01:47:45.390, Speaker E: Yeah. Okay. So the builder would have to risk.
01:47:45.470 - 01:47:49.326, Speaker G: And actually is there anything it feels.
01:47:49.358 - 01:47:55.646, Speaker E: Like that kind of like created fresh account thing is like equal way to avoid the risk.
01:47:55.678 - 01:47:56.030, Speaker A: Right.
01:47:56.120 - 01:47:59.206, Speaker E: Unless the payment itself happens like one.
01:47:59.228 - 01:48:00.570, Speaker G: Block later or something.
01:48:00.720 - 01:48:11.500, Speaker C: It could go through a smart contract where it provides a certainty that the block is actually this number no.
01:48:15.710 - 01:48:20.666, Speaker E: Whatever block. Well, I guess if there's an offroad.
01:48:20.698 - 01:48:37.490, Speaker G: For this watch, then you based on do you want to go into the proof?
01:48:40.870 - 01:48:41.620, Speaker A: Yeah.
01:48:45.910 - 01:48:48.360, Speaker H: Do you want to proof for what exactly?
01:48:49.850 - 01:49:11.482, Speaker C: Can you go back to the other tab? So on the one side you want the proposal to know or to have certain guarantees that the payment that the bid claims is also actually in there in the block where you don't see the transactions beforehand. This is what you want to prove of a payment proof.
01:49:11.546 - 01:49:12.062, Speaker G: Okay.
01:49:12.196 - 01:49:15.854, Speaker H: So that the builder knows already where.
01:49:15.892 - 01:49:17.520, Speaker G: The feed should be paid to.
01:49:18.450 - 01:49:20.874, Speaker C: Yes, the builder already knows the proposal.
01:49:21.002 - 01:49:31.874, Speaker H: He wants to prove that and you get the money to the relay in the first, it should be included in.
01:49:31.992 - 01:49:55.420, Speaker C: The bid that the relay sends to the proposer. Actually the really could also construct the payment proof probably like it doesn't need to come from the builder necessarily. Because in the end, the proposer trusts whatever they really sends them. There is like no requirement on any builder. Signature is on the one side.
01:49:59.490 - 01:49:59.806, Speaker G: That.
01:49:59.828 - 01:50:14.820, Speaker C: Would give the proposer some knowledge about what's happening inside this block. That the payment is not just a number that is claimed in a bit, but actually has proof that this is inside. And on the other side, here, there.
01:50:16.790 - 01:50:19.090, Speaker H: Will have to also prove that the block is better.
01:50:19.160 - 01:50:19.780, Speaker G: Right?
01:50:21.530 - 01:50:24.200, Speaker H: Because otherwise there is no guarantee again.
01:50:28.580 - 01:50:33.152, Speaker G: Because the merging front screen works, right? It should work.
01:50:33.206 - 01:50:36.070, Speaker C: I don't recall why we had.
01:50:38.680 - 01:50:38.996, Speaker G: What.
01:50:39.018 - 01:50:41.830, Speaker C: Was the discussions about that detail?
01:50:43.320 - 01:50:48.292, Speaker G: I know that Thomas had some well.
01:50:48.346 - 01:50:57.160, Speaker H: Either way, you trust the relay verifying the puzzle is actually like the bundle is actually a good one. Like having the bundle.
01:50:57.980 - 01:51:16.480, Speaker C: Yeah, having the block and then the relay knows the block. Part of the relay's responsibilities is making sure that the block is correct. All the transfers are correct, that the payment is correct. But you still trust the relay on that? A payment proof would reduce the trust needed somewhat.
01:51:20.150 - 01:51:23.186, Speaker G: I think it's trust the relay on.
01:51:23.208 - 01:51:30.440, Speaker E: The on the pit. You mentioned this 100 million. So maybe it's worth to cheat once.
01:51:31.050 - 01:51:32.614, Speaker I: Yeah, if you can cheat with 100.
01:51:32.652 - 01:51:33.906, Speaker E: Million to say that I'm a trusted.
01:51:33.938 - 01:51:35.862, Speaker I: Relay, then I'm okay with cheating once.
01:51:35.916 - 01:51:37.910, Speaker G: 100 million requirement rent.
01:51:42.650 - 01:51:43.400, Speaker C: Yeah.
01:51:47.130 - 01:51:48.946, Speaker B: Without money and sick.
01:51:49.058 - 01:51:54.334, Speaker E: Right. And like, I guess it's still things.
01:51:54.372 - 01:51:57.310, Speaker G: That like just able to avoid.
01:51:59.170 - 01:51:59.486, Speaker I: One.
01:51:59.508 - 01:52:02.366, Speaker E: Kind of attack and the other kind.
01:52:02.388 - 01:52:10.398, Speaker G: Of attack is like not attributable anyway. Can you explain the second one?
01:52:10.484 - 01:52:12.670, Speaker E: Oh, the second is just like block unavailability.
01:52:15.650 - 01:52:20.280, Speaker B: So you don't think the prop payment.
01:52:23.050 - 01:52:23.960, Speaker E: In general.
01:52:37.470 - 01:52:49.200, Speaker C: It would still require changes to the clients or the execution of your client. Especially because there is currently, as far as I am aware, not an API that the Deacon, Mount or Mapboost could use.
01:52:49.650 - 01:52:50.640, Speaker G: Right, but.
01:52:53.170 - 01:52:54.686, Speaker A: This is not a proposal site thing.
01:52:54.708 - 01:52:55.920, Speaker G: This is the builder side.
01:52:58.530 - 01:53:05.018, Speaker C: The builder has to create the proof. But ideally math boost or the proposal would be able to verify but there's.
01:53:05.034 - 01:53:07.720, Speaker E: Already legislative libraries program.
01:53:12.010 - 01:53:12.760, Speaker C: Right?
01:53:14.490 - 01:53:15.510, Speaker E: Verifying.
01:53:23.930 - 01:54:01.014, Speaker C: Cool. Yeah, and then on the other side of the equation could be swap proof. If this could not automatically be proven, but that should actually be possible where anybody could submit proof of misbehavior of a relay and this would penalize the relay. There has been some discussions about that earlier here on this second document that is linked. And also in what is happening.
01:54:01.212 - 01:54:02.230, Speaker G: I didn't.
01:54:05.690 - 01:54:06.440, Speaker B: Yes.
01:54:09.630 - 01:54:43.200, Speaker C: And also in this GitHub issue here about gain liveness. Yeah, well, other points of discussion were like permissionless builder access from the proposer and not from another builder.
01:54:45.220 - 01:54:46.560, Speaker G: Are they signed?
01:54:49.540 - 01:55:20.350, Speaker C: Well, when a builder submits a bit to the relay, it's signed by the builder, but then the relay changes the data structure, makes a blinded payload of that, and then signs it retails and provides it with a Get header API that the proposer is using, but that also anybody else can use because it's exactly. And it's not restricted currently, because there is no proposal signature. And then that would be then a closed beat auction, because.
01:55:28.960 - 01:55:31.600, Speaker I: Like, only the next proposal.
01:55:36.580 - 01:55:36.944, Speaker G: Yeah.
01:55:36.982 - 01:55:37.810, Speaker A: So so.
01:55:39.940 - 01:55:41.570, Speaker I: Half open, half.
01:55:43.540 - 01:55:49.680, Speaker C: Because the builders don't see each other. But a proposal could colludes.
01:55:51.060 - 01:55:52.600, Speaker H: We the lower bits.
01:55:54.540 - 01:55:55.236, Speaker C: Lower bits.
01:55:55.268 - 01:56:05.200, Speaker G: Why's?
01:56:09.300 - 01:56:12.836, Speaker H: Option theory, but if you have, like.
01:56:12.858 - 01:56:20.890, Speaker C: Only one bit to place, then you kind of try to I would imagine that the builder price a bit higher.
01:56:24.460 - 01:56:40.710, Speaker G: Marketing that's hard like this, I can be the one that predicts.
01:56:44.510 - 01:56:45.690, Speaker E: More comparable.
01:56:48.910 - 01:56:49.850, Speaker G: Minimum.
01:56:51.070 - 01:57:06.638, Speaker E: You could just have the builder publish after this one. Yeah. Then I guess other people would be the same one. But if I like it, there's an advantage for me, like a plan that's.
01:57:06.654 - 01:57:09.780, Speaker G: A huge opportunity for I can.
01:57:13.210 - 01:57:13.974, Speaker I: I can do that.
01:57:14.012 - 01:57:15.240, Speaker E: And I have, like, something.
01:57:18.570 - 01:57:18.966, Speaker I: I can.
01:57:18.988 - 01:57:20.120, Speaker G: Develop that I have.
01:57:23.690 - 01:57:27.880, Speaker H: This is exactly why we don't want the threat. Because you want you guys want it.
01:57:31.470 - 01:57:37.100, Speaker E: What do you want to find? It is possible, right. At some point set it down.
01:57:40.670 - 01:57:47.870, Speaker G: Because that's fine. Just kind of chrono everyone gets, like, a shape.
01:57:50.370 - 01:58:10.630, Speaker E: That right. Well, the challenge is, like, if the I guess if the book Loser has the exclusive view one, that's what the biding patterns are. That's like well, it's not too bad because you just have to bribe, like, a one or two between the proposer and the relayer.
01:58:14.090 - 01:58:14.502, Speaker A: Honest.
01:58:14.556 - 01:58:16.710, Speaker E: But if we set the social normal.
01:58:21.790 - 01:58:45.760, Speaker C: I will add a link to the GitHub issue here about the field versus OpenBit, because there has been, like, a lot of discussion and a lot of participants also from Chain Street, people chiming in here in favor of open bid auctions and the auction dynamics. And I'm not sure, but it seems to change this.
01:58:46.850 - 01:58:56.920, Speaker B: Robert literally just was like, can you please make sure that we have something over here? Because there's no conclusion on field versus open.
01:59:00.170 - 01:59:02.440, Speaker E: I guess what happens. If there's just.
01:59:06.270 - 01:59:12.010, Speaker C: The problem is that you can't do the closed approach because the proposals don't add a signature.
01:59:14.110 - 01:59:15.100, Speaker G: Oh, yeah.
01:59:15.950 - 01:59:23.534, Speaker C: Okay. Well, that's an interesting thought experiment. Like what would happen now?
01:59:23.732 - 01:59:25.070, Speaker A: How would you decide.
01:59:29.490 - 01:59:52.380, Speaker C: Also decides the highest value. Some relays do it closed, some release do it open. flashboard could run two relays like one with sealed and one with open bits. See how it's developing.
01:59:55.680 - 02:00:08.076, Speaker H: Interesting thought. Yeah, I didn't do lots of different people. I don't know. They probably have awesome advantages disadvantages like with voting.
02:00:08.108 - 02:00:12.512, Speaker G: Right. There's no perfect voting. I don't know.
02:00:12.566 - 02:00:13.936, Speaker C: Yes, sure.
02:00:14.118 - 02:00:19.350, Speaker H: So I guess maybe we'll be trying adding the thing so we can implement both.
02:00:20.360 - 02:00:21.110, Speaker A: Probably.
02:00:23.880 - 02:00:24.630, Speaker H: Not.
02:00:26.360 - 02:00:34.372, Speaker C: Really an interesting playground for trying for where different ideas could get tried out. I know there's some receipts.
02:00:34.436 - 02:00:35.770, Speaker H: It makes much of difference.
02:00:38.300 - 02:00:39.450, Speaker G: I don't believe.
02:00:41.980 - 02:00:44.596, Speaker H: Yeah, I think you can spend ages.
02:00:44.628 - 02:00:45.210, Speaker G: On.
02:00:51.000 - 02:00:52.936, Speaker H: Deciding on what makes feeling about it.
02:00:52.958 - 02:01:11.136, Speaker B: I think it matters a lot for the market. It matters to all the and also it matters in some sense to the trust or like the fairness. Is that why, like right now it's.
02:01:11.158 - 02:01:13.570, Speaker G: One of the most I think.
02:01:17.940 - 02:01:18.476, Speaker C: Sealed.
02:01:18.508 - 02:01:36.890, Speaker H: I think makes it like if you have it sealed, you open it up for more strategic whatever. If you have the skilled information games right. You give them more options in a way to kind of play around.
02:01:37.660 - 02:01:39.610, Speaker G: But actually, I think this is.
02:01:41.740 - 02:01:44.920, Speaker E: Mainly one I think if you were against.
02:01:44.990 - 02:02:01.470, Speaker G: One yeah, very specific find units that optimize and get custom workshops with a big Swiss and more.
02:02:04.080 - 02:02:07.676, Speaker E: Of course they want they want completely trivial strategies and then buy a hybrid.
02:02:07.708 - 02:02:09.010, Speaker G: And land next to.
02:02:13.560 - 02:02:14.244, Speaker H: Because it's much.
02:02:14.282 - 02:02:15.990, Speaker E: Easier to find a person.
02:02:17.720 - 02:02:18.612, Speaker G: Optimize it.
02:02:18.666 - 02:02:40.168, Speaker E: Than to find a person that creatively thinks and trains like a customer. Of course they want to reduce the strategy complexity and increase infrastructure. Like you, for example. You don't have the manpower to trade.
02:02:40.184 - 02:02:43.644, Speaker G: On like 400 exchanges and they do.
02:02:43.682 - 02:02:51.756, Speaker E: Extremely ember or something like that. They have extremely simple software that just is very optimized and runs on exchanges because they have people that is influenced.
02:02:51.788 - 02:02:52.800, Speaker G: And it's much easier.
02:02:57.700 - 02:02:58.752, Speaker E: Complex game.
02:02:58.806 - 02:03:03.760, Speaker G: That's exactly what it's paid off in Nitrition.
02:03:06.680 - 02:03:07.328, Speaker I: Rules.
02:03:07.424 - 02:03:09.236, Speaker E: You can't do specific strategies and then.
02:03:09.258 - 02:03:12.372, Speaker G: It just walk up that's like that's okay.
02:03:12.426 - 02:03:13.510, Speaker E: Right, but that's not.
02:03:16.220 - 02:03:16.868, Speaker G: I think that's.
02:03:16.884 - 02:03:18.650, Speaker E: It Q and A and I don't think.
02:03:23.260 - 02:03:41.176, Speaker C: Thanks for input. I think very interesting discussions. I think maybe we conclude this part now and considering the time we may want to move on to more lightning blocks.
02:03:41.288 - 02:03:54.720, Speaker B: Yeah, I think let's go through the lightning talks and then let's head out to dinner at like eight something. It's like 20 minutes walking from here that's we have a reservation.
02:03:56.420 - 02:03:57.984, Speaker C: We leave in 1 hour.
02:03:58.182 - 02:03:59.908, Speaker B: Yes, we leave in 1 hour.
02:03:59.994 - 02:04:00.820, Speaker G: We're good.
02:04:00.970 - 02:04:08.936, Speaker B: But this is super, I think important and relevant discussion. I think there's also time sensitivity to.
02:04:08.958 - 02:04:11.752, Speaker G: The sealed versus I mean, I think.
02:04:11.886 - 02:04:57.290, Speaker C: Not necessarily because I think for different words, it's just kind of set in stone for now, that this is not a short term change to make it a silt bit unless there is a lot of high level push in that direction and discussions. But there are so many moving parts that I think this point has passed for now and this is something that could be considered for later on. You can change it later. Yeah, I mean, the consensus layer clients, they are a bit resistant to adding new signature routines. There's maybe ways around that, but it's all something that is now already too packed and resource constraints to.
02:04:59.100 - 02:04:59.496, Speaker G: This is.
02:04:59.518 - 02:05:08.940, Speaker C: Like the impression that I had that it needs to be more consensus and resources from consensus guarantees to implement this, to even enable big auctions.
02:05:09.440 - 02:05:17.576, Speaker B: Basically we're going forward unless there's some issue that arise.
02:05:17.688 - 02:05:29.056, Speaker C: Yes. This is my impression that it's like just also because of the data discussions and the technical simplicity to just do what is possible right now.
02:05:29.238 - 02:05:35.750, Speaker B: Is there any like with the me before the merge? What do you think are the biggest challenges that.
02:05:38.600 - 02:05:39.670, Speaker G: Various other.
02:05:45.240 - 02:05:49.240, Speaker B: Or maybe get some help from ecoin to contribute?
02:05:50.460 - 02:06:18.828, Speaker C: I think it's mostly about the impact on proposers of misbehaving relays because Map boost itself is I mean it's basically done, it's feature completed, it's just a really multiplexer the challenges arise what happens when relays are not behaving. Well, the areas where like reputation systems which will really monitor the payment proofs.
02:06:18.844 - 02:06:26.850, Speaker G: And yes, it is really monitor.
02:06:29.110 - 02:06:38.200, Speaker B: For why we need it.
02:06:39.230 - 02:07:07.470, Speaker C: Yes, I think just ideally, we want to make it easier to detect and automatically act on misbehaving relays. But to also make it easier to propose adding other relays, like right now, it's kind of a tough call to say, add also these five relays, and we recommend this list of ten relays, like each relay added to your proposal list. This adds possible risk.
02:07:07.550 - 02:07:20.726, Speaker E: That's why I'm saying there are no people around them. Second of all, nobody's promoting any other relates because everyone just transact. There are so many things there is.
02:07:20.748 - 02:07:25.880, Speaker H: No reason for you should only pick one because every other security.
02:07:34.270 - 02:07:34.826, Speaker I: Makes it.
02:07:34.848 - 02:07:36.762, Speaker E: Even more complicated for anyone else.
02:07:36.816 - 02:07:37.420, Speaker G: To.
02:07:39.230 - 02:07:53.290, Speaker C: That's true, I think. I mean blockscroud is setting themselves up with no front running relay like an ethical relay branding kind of thing where this could be one differentiating factor.
02:07:53.370 - 02:07:57.286, Speaker E: That's what I was done in relay.
02:07:57.338 - 02:07:57.940, Speaker G: And.
02:08:01.190 - 02:08:06.626, Speaker E: Anyone who promoted idea can run it who will run it?
02:08:06.648 - 02:08:07.540, Speaker G: If it was.
02:08:09.610 - 02:08:10.582, Speaker E: Most of the people.
02:08:10.636 - 02:08:11.240, Speaker G: Just.
02:08:13.130 - 02:08:14.374, Speaker C: Yeah, if you just care about.
02:08:14.412 - 02:08:17.110, Speaker E: The sorry, just one thought on this.
02:08:17.180 - 02:08:49.266, Speaker H: So, actually, if you think you really want this and it's not all about profit, right, then you, in the end, have to make it on the protocol level, and then people would actually use it on the protocol lever. This is the only way you kind of could get, I think, these non economical ideas, definition of ordering or whatever you kind of want in there. But to get those into the system, you have to step away from these economic models and then you can only.
02:08:49.288 - 02:08:53.860, Speaker E: Do them like very deep procularity transition to the.
02:08:58.090 - 02:09:22.540, Speaker B: Our researchers also think a lot about these kind of questions and what we're trying to doing. So yeah, what do I have to do? I think you just is your tab open? Just switch to the other tab. Sorry, what is and then you open it.
02:09:24.050 - 02:09:24.800, Speaker G: Yes.
02:09:27.170 - 02:09:27.920, Speaker E: Perfect.
02:09:29.250 - 02:09:29.614, Speaker G: Yes.
02:09:29.652 - 02:09:32.080, Speaker B: And then you can do the presentation list.
02:09:36.510 - 02:09:38.570, Speaker I: Don't find that any spelling errors.
02:09:45.790 - 02:09:48.294, Speaker E: Big shout out for the ISO format.
02:09:48.342 - 02:09:48.970, Speaker G: Dave.
02:09:54.050 - 02:09:55.694, Speaker I: Why am I holding this?
02:09:55.892 - 02:09:57.998, Speaker C: As soon as all the participants can hear you.
02:09:58.084 - 02:09:58.826, Speaker I: Microphone.
02:09:58.938 - 02:09:59.600, Speaker B: Okay.
02:10:00.550 - 02:10:01.886, Speaker I: Hello, internet.
02:10:02.078 - 02:10:03.860, Speaker G: You have a microphone, right?
02:10:09.030 - 02:10:10.018, Speaker F: We'll learn.
02:10:10.184 - 02:10:10.658, Speaker I: Okay.
02:10:10.744 - 02:10:10.994, Speaker G: Yeah.
02:10:11.032 - 02:10:16.550, Speaker I: So I'm going to make this quick so there's less time between us and the lunch or dinner.
02:10:18.010 - 02:10:20.680, Speaker H: Between us and dinner it is.
02:10:21.770 - 02:10:52.420, Speaker I: Well, anyway, so this is about the first come, first serve ordering chain idea. The name is not don't take it grain of salt. So it has a little bit of first come, first serve, much of ordering and basically no chain. It's joint work with Alex from Flashpods. We presented this beginning of May or so internally in Flashpods and now sended it a little bit for Vienna Square.
02:10:53.110 - 02:11:02.974, Speaker B: So I guess a question I have for you is that is this a serious proposal or is it a yeah.
02:11:03.032 - 02:11:27.126, Speaker I: Well, I'm going to come to that. I mean, it's more like exploration of the solution space with I think at least for us, like interesting insights. Much more than a serious solution. But we tried to achieve the solution, but we didn't succeed. This is my Mccurrence.
02:11:27.318 - 02:11:28.860, Speaker H: We didn't succeed yet.
02:11:29.710 - 02:11:30.460, Speaker A: Yes.
02:11:32.910 - 02:11:34.060, Speaker G: Continue again.
02:11:38.750 - 02:11:43.250, Speaker A: You MMM fate also works normally.
02:11:47.910 - 02:11:48.322, Speaker G: Because.
02:11:48.376 - 02:11:52.840, Speaker E: The arrows oh, maybe once, maybe.
02:11:55.610 - 02:11:56.166, Speaker G: I.
02:11:56.268 - 02:11:57.160, Speaker B: Do not.
02:11:59.930 - 02:12:05.400, Speaker I: But it cannot even cannot even yeah, can be from the.
02:12:07.470 - 02:12:07.834, Speaker G: I.
02:12:07.872 - 02:12:30.130, Speaker B: Tried there's nothing this is so maybe we go no, it happens usually sometimes in Rachel this kind of happens. It happens even more likely when you have muscle displays and connectivity.
02:12:33.670 - 02:12:36.100, Speaker I: It does work. But it did work only in the.
02:12:36.870 - 02:12:40.338, Speaker C: Here it works preview, but it's not working there.
02:12:40.504 - 02:12:41.170, Speaker F: Right.
02:12:41.320 - 02:12:45.320, Speaker B: So it's a screen display issue.
02:12:46.650 - 02:12:54.860, Speaker H: The most reliable so far. Used to be so much like company.
02:12:56.830 - 02:12:59.900, Speaker F: Yeah, I'm pretty sure it's a screen sharing thing.
02:13:00.270 - 02:13:03.580, Speaker E: Yeah, one of those.
02:13:06.770 - 02:13:07.520, Speaker F: Okay.
02:13:08.210 - 02:13:09.440, Speaker G: There you go.
02:13:13.970 - 02:13:14.720, Speaker B: Perfect.
02:13:15.330 - 02:13:16.320, Speaker F: Got it.
02:13:17.730 - 02:13:21.140, Speaker B: Try it again. Don't full screen this time.
02:13:25.350 - 02:13:26.100, Speaker G: Yeah.
02:13:30.950 - 02:13:35.880, Speaker B: Let'S try to go through it. Sorry about that, everyone.
02:13:38.010 - 02:14:16.530, Speaker I: Okay. That's about the say, ordering thing. The question that brought me to that is like, is MEB inevitable or can prevent it? So the question kind of haunts me now for some time and I still don't have an answer. For example, ordering chain is kind of more in the area of it can be prevented. So that was the idea. Let's have a look at why does med exist in the first place? So, if we look at attacks on transactions, we have like replay attacks. So we have countermeasures.
02:14:16.530 - 02:15:06.450, Speaker I: If you think about what prevents replay of transactions, we have nonsense. What prevents the modification of transactions? We have digital signatures, but what prevents the reordering of transactions? There is nothing. We don't have any countermeasures. And this is the very reason that mev exists in the first place. So now you could just say like, well, order all the transactions, problem solved. And intuitively, like first come, first serve, transaction ordering is what everyone has in mind. If you think about transaction ordering, what your method to order transactions? First come, first serve is what people come up with intuitively.
02:15:06.450 - 02:15:33.286, Speaker I: We have discussed initially we have an upcoming article specifically on first come, first serve ordering protocols. The Tldra is like the first come, first serve ordering protocols alone can only mitigate reordering attacks to a certain extent. It cannot prevent them completely unless you go for permissioned networks or are willing.
02:15:33.318 - 02:15:37.634, Speaker G: To make maybe unreasonable assumptions.
02:15:37.782 - 02:15:41.838, Speaker I: But nonetheless, we had a look at first come, first transaction ordering as a.
02:15:41.844 - 02:15:44.000, Speaker G: Building block for this idea here.
02:15:47.810 - 02:16:09.800, Speaker I: What were the goals? The goals were to prevent so called bad med to this like, no, we want to prevent front running, we want to prevent sandwiching and we want to have everyone else participate in all the remaining MVD. So everyone should have access to arbitrage and background. So these were the goals. And as I said in the beginning, this is more like an exploration than.
02:16:10.170 - 02:16:13.526, Speaker G: A real solution, but still going to.
02:16:13.548 - 02:17:20.652, Speaker I: Explain what we came up with. So the system in a nutshell is basically three entities. You have users on the left hand side in the middle, like a first come, first serve ordering mempool blockbuildingsystem and on the right hand side, miners user sends unordered encrypted transactions and the block building system outputs blocks that miners have to use. So this requires a change in the consensus rule. Miners have to use your battery is running low. So the idea here, like in order to for the for the block building system to be able to use first come, first serve right, and not cheat, why should they have to use have to work on encrypted data? Otherwise they could just cheat. But if they work on encrypted data, they don't know exactly what they are ordering.
02:17:20.652 - 02:17:29.410, Speaker I: So there's no incentive to cheat. They're just basically ordering random data from the perspective of this ordering system.
02:17:32.340 - 02:17:35.610, Speaker G: You good. Thanks.
02:17:37.260 - 02:17:38.040, Speaker I: Um.
02:17:40.940 - 02:17:41.352, Speaker G: Right.
02:17:41.406 - 02:18:42.886, Speaker I: And since the the output of the of the block billing system should be valid blocks, users have to also submit and prove that they are actually submitting lit transactions. Okay, so why encrypted transactions? Well, actually encrypted twice, so the transactions are encrypted that the ordering system cannot manipulate the order of transactions in some meaningful way. At the end of the ordering step, the first layer of encryption is removed. But at that point, the ordering system has a kind of an advantage, right? They are the first ones to see the transactions in the clear. So while the order is fixed, we could still do they're the first ones to see the clear, and they could take all the arbitrage and background and.
02:18:42.908 - 02:18:48.006, Speaker G: Opportunity because they could see the first.
02:18:48.108 - 02:19:11.230, Speaker I: In clear text, react on that, submit their own transactions, get it ordered first. So we don't want that. So in order to mitigate that, users also encrypt to miners or validators such that this first come, first serve ordering pool cannot has no advantage in back running or arbitration.
02:19:13.890 - 02:19:16.880, Speaker G: Yeah, northern minus, right?
02:19:17.810 - 02:19:19.040, Speaker C: Completely right.
02:19:20.770 - 02:20:23.426, Speaker I: I mentioned validity proofs. So in order to come up with valid valid blocks this users also need to attach validity proofs for the transactions. There's a lot of questions like, is this even feasible technical issues, right? But we're not going even have the code here. So now if you say, okay, first goal is reached, like this front running is prevented, sandwiching is prevented. What about this good MEB? Can everyone participate in good MEB that Philip already said like, well, miners seem to have an advantage, right? Miners are now in a position to take all the back running and arbitrage opportunities because they are the first one to see the transactions in clear text, can submit the transactions. And because they're ordered first come, first serve, they get basically the large chunk of the cake. So this is kind of a latency game.
02:20:23.426 - 02:21:10.750, Speaker I: So what we thought like, okay, how can we make this then accessible to everyone, right? And this was basically the second goal. Make this arbitrage and back running opportunities accessible to everyone. And for this, this ordering system needs to distinguish between conflicting and non conflicting transactions. Think about it. This arbitraging or backgrounding opportunities is like a conflict as a single resource, like an EVM address that multiple transactions want to write to. And you need to come up with a precedence, like who is going to read? One can read and the other are non conflicting transactions and you can just run them in parallel. I think Shin mentioned in this article about EVM parallelization.
02:21:10.750 - 02:21:37.420, Speaker I: You could just execute them in parallel because they are not touching the same EVM network space. But the conflicting transactions, they need to come up with something, how to resolve this conflict. So what we had like two ideas. You could do some kind of auctions auctions or some kind of lottery where you buy tickets and the more tickets you have, the higher the probability of you winning. Could be something like that.
02:21:42.130 - 02:21:44.078, Speaker H: If you think about like, we have.
02:21:44.084 - 02:21:48.542, Speaker G: An assuming slot, then get it first.
02:21:48.596 - 02:22:10.334, Speaker H: But like, the slot get it seconds earlier than everybody else. So there's still 11 seconds left for blocks to kind of fill up based on bets, like automatically or something. Like first option here. Then I think you're pretty close to making Arbitrage more accessible.
02:22:10.382 - 02:22:10.980, Speaker G: Right?
02:22:11.350 - 02:22:12.050, Speaker E: Right.
02:22:12.200 - 02:23:00.040, Speaker I: There's many open questions like, how would you implement an option system here? Like in a non, non trusted way? Also, how much information do you leak? Okay, so some insights we gained from exploring this. For us, this was kind of not intuitive. Alex came up with the term like conflict resolution, and it kind of stuck to me. Like, MEB seems to be all about conflict resolution. You have this microtransactions. They all want to go for the same EVM address, want to write to, and somehow need to resolve this conflict. And it was an interesting thing, like, to think about it that way.
02:23:02.090 - 02:23:02.840, Speaker G: And.
02:23:05.710 - 02:23:20.350, Speaker I: All the other transactions. Let's assume you have a conflict resolution mechanism, whatever it is, and it works well. All the remaining transactions, you can literally be ordered in any way. It doesn't matter because they don't conflict.
02:23:23.170 - 02:23:23.920, Speaker G: Yeah.
02:23:24.850 - 02:23:45.022, Speaker I: So it comes down to, like, a conflict resolution. And this first come, first serve ordering is just a very particular way of resolving this conflict. It's like, okay, you were first, so you should be the one who wins. But it's like, while it's intuitive, it's also very particular. Maybe it's not the conflict resolution mechanism.
02:23:45.166 - 02:23:46.100, Speaker G: We want.
02:23:51.680 - 02:24:19.744, Speaker I: Open questions. I started with the goals. We want to prevent front running, and we want to make Arbitrage and back running accessible. But are these really the right goals? Because depending on how you set them, you can come up with totally different systems. Personally, I would argue, feels good. Like preventing front running, people access an Arbitrage, I feel good. But there's also people arguing differently.
02:24:19.744 - 02:24:24.630, Speaker I: It seems like it's not the most optimal prevent front running.
02:24:26.280 - 02:24:29.704, Speaker G: For me, there's an open question like.
02:24:29.742 - 02:24:57.650, Speaker I: How to incentivize the ordering man pool the nodes in the ordering mempool, or a conflict finding or resolution mechanism, how do you incentivize them not to collude? And how much information is leaked to a conflict resolution mechanism? Like, if you have, for example, you need access lists in order to figure out what EVM addresses transactions are touching, how much information is leaked by that.
02:25:00.440 - 02:25:01.190, Speaker G: Yeah.
02:25:03.240 - 02:25:04.390, Speaker I: That'S all really.
02:25:04.920 - 02:25:06.500, Speaker G: What are the arguments?
02:25:09.960 - 02:25:50.800, Speaker I: I'm not just repeating the argument. I'm not in favor of it. But it's about efficiency. So you can have a more optimal welfare optimizing way before, if you think about it depends on how you define front running. But if you have multiple swaps on the decks, for example, you have free buys, free cells, then you have three buys in a row and then free cells. It's more optimal to say, like, one buy one cell, another buy another cell front running. But like a reordering that's optimizing the welfare of users.
02:25:52.600 - 02:25:58.470, Speaker G: Simple, over the course lock on buy.
02:26:01.720 - 02:26:13.640, Speaker E: Submit an Arbitrage transaction to even swap every 200 milliseconds. And that leads to lots of gas overhead on chain. Whereas if you kind of make it more discreet than that efficiency.
02:26:15.520 - 02:26:16.460, Speaker G: I guess.
02:26:16.610 - 02:27:00.100, Speaker E: That'S one another line of arguments would be the kind of auction by another means argument that if you put a premium on time, there are ways to kind of still get ahead on time. Basically going back to sort of the old high frequency trading world like if you have better cables and I think the arguments for kind of just having options instead of this even if this works really well, I think would look very similar to the argument. One other question, like how exactly would this ordering.
02:27:01.960 - 02:27:03.444, Speaker G: Resolution work?
02:27:03.562 - 02:27:05.220, Speaker E: Like what single limitation?
02:27:06.120 - 02:27:08.744, Speaker I: Yeah, well, if you think about first.
02:27:08.782 - 02:27:12.072, Speaker G: Come, first serve, right?
02:27:12.126 - 02:27:29.500, Speaker I: I mean like a very simple very simple one. Let's put it this way let's think you have just a single entity. Like in the single entity you send transactions to super easy to order the transactions by the time the entity receives the transactions.
02:27:32.320 - 02:27:32.684, Speaker G: Right?
02:27:32.722 - 02:27:34.670, Speaker I: If you have a single entity, it's easy.
02:27:36.800 - 02:27:37.164, Speaker G: Right?
02:27:37.202 - 02:27:54.644, Speaker I: That's easy. Now, if it gets more tricky, if you have multiple entities and you should come to a consensus like what is the order? Right? I think this is basically equivalent to clock synchronization problem in distributed systems because.
02:27:54.682 - 02:27:57.190, Speaker G: This basically comes down to exactly that.
02:27:58.140 - 02:28:09.016, Speaker I: In a more malicious setting because you have maybe nodes that you cannot trust. But it's basically that cross synchronization is.
02:28:09.038 - 02:28:11.964, Speaker G: Basically the order of events distributed system.
02:28:12.002 - 02:28:15.676, Speaker I: And this is what we work here. It's like the order of transactions that.
02:28:15.698 - 02:28:16.750, Speaker G: Is the same thing.
02:28:17.680 - 02:28:28.610, Speaker I: And there you have the issue that the granularity that you can there are multiple exist multiple clock synchronization algorithms. You can apply basically any of them.
02:28:31.780 - 02:28:32.192, Speaker G: Right?
02:28:32.246 - 02:28:32.850, Speaker A: Yeah.
02:28:34.420 - 02:28:36.188, Speaker I: Let's say you can also do like.
02:28:36.214 - 02:28:38.756, Speaker G: A simple vaulting, let's say if you.
02:28:38.778 - 02:28:41.030, Speaker I: Have just three entities, you can take the media.
02:28:44.360 - 02:28:45.236, Speaker E: Well, you can't just do.
02:28:45.258 - 02:28:47.270, Speaker G: The media by itself because that would be one.
02:28:49.800 - 02:28:58.410, Speaker E: Equivocation. Like people can send multiple messages or some of the participants might even kind of go offline for a while and then come back after.
02:29:00.240 - 02:29:06.700, Speaker G: Right? Typically the best you could do is.
02:29:06.770 - 02:29:13.600, Speaker H: Some form of two third majority inputs like use inputs and two thirds of nodes.
02:29:14.900 - 02:29:20.450, Speaker G: Kind of have to assume that better.
02:29:23.140 - 02:29:31.316, Speaker H: You cannot ensure that you can use more inputs like this. Transactions are sent to all nodes, right? And then in the end you get.
02:29:31.338 - 02:29:34.980, Speaker G: A fair ordering from two thirds of those nodes.
02:29:36.780 - 02:29:39.560, Speaker E: This isn't one of those like correct regressions.
02:29:43.180 - 02:29:44.170, Speaker G: After like.
02:29:47.660 - 02:29:48.568, Speaker H: You have in the.
02:29:48.574 - 02:29:52.328, Speaker G: End you have two thirds agreed on.
02:29:52.414 - 02:29:55.676, Speaker E: Right, but what they are will you should write but like what if one.
02:29:55.698 - 02:29:57.900, Speaker G: Set of two third degrees of one median?
02:29:59.520 - 02:30:03.470, Speaker H: Well, the conservative there is only one basically, right?
02:30:07.120 - 02:30:08.316, Speaker G: I don't know.
02:30:08.498 - 02:30:16.096, Speaker E: The issue is what we don't want to see is like hundreds of signed messages overhead for a transaction.
02:30:16.168 - 02:30:18.356, Speaker G: It's like the whole point of the.
02:30:18.378 - 02:30:23.110, Speaker A: Blockchain is that we do things like that way.
02:30:24.840 - 02:30:30.528, Speaker G: Yeah, but then you can just decision.
02:30:30.704 - 02:30:32.390, Speaker H: Or like fetch it.
02:30:35.820 - 02:30:41.976, Speaker E: At some point you're just basically saying we're going to make a chain and have options within your chain but have the block time.
02:30:41.998 - 02:30:43.210, Speaker G: Be like 1 second.
02:30:47.740 - 02:30:48.650, Speaker H: Get it?
02:30:49.200 - 02:30:51.196, Speaker A: Once you start doing batches and then.
02:30:51.218 - 02:30:56.076, Speaker E: You start then you're obviously going to end up with auction batches and at.
02:30:56.098 - 02:31:02.850, Speaker G: That point you're just saying like we're going to do some auctions but with just much shorter walk time.
02:31:10.900 - 02:31:20.650, Speaker I: I think the problem this time here is that you have only some granularity to which you can order transactions like on some distributed system is.
02:31:22.620 - 02:31:23.316, Speaker G: Much worse.
02:31:23.348 - 02:31:31.820, Speaker I: Than intuitively people think it is. It has this end to end delay uncertainties they affect the granularity and it's.
02:31:34.720 - 02:31:37.070, Speaker H: Bigger problem everybody lies about everything.
02:31:37.600 - 02:31:39.212, Speaker E: One kind of way to break something.
02:31:39.266 - 02:31:41.950, Speaker G: To make would be to allow the.
02:31:43.360 - 02:31:56.050, Speaker E: Wish to search for the proposal would still have some freedom, and there would still be some proposal. Maybe you might want to auction that, but then it would still be really constrained. Your transaction will be.
02:31:58.740 - 02:32:03.910, Speaker H: I don't think anybody proposal shouldn't be able to do anything.
02:32:05.320 - 02:32:07.990, Speaker G: I don't know the only way around.
02:32:08.360 - 02:32:10.496, Speaker H: They shouldn't be allowed to decide.
02:32:10.688 - 02:32:20.456, Speaker G: Consentless algorithms are like more efficient bottlenecks right about single action model Macs there.
02:32:20.478 - 02:32:22.108, Speaker E: Are consensus algorithms that avoid it but.
02:32:22.114 - 02:32:31.676, Speaker G: They'Re way more complicated. Yeah, there is versions of Hotspot for.
02:32:31.698 - 02:32:45.570, Speaker H: Example which they have leaders but their only job is to take what somebody like a quorum of people is saying so they kind of decide on anything on their own, right?
02:32:46.340 - 02:32:54.730, Speaker G: How would that even work? Like if a quorum already agrees.
02:32:58.030 - 02:33:00.330, Speaker H: In the process of getting agreement.
02:33:02.770 - 02:33:03.406, Speaker I: Process you.
02:33:03.428 - 02:33:08.960, Speaker G: Have already have it right? So the process of getting.
02:33:12.850 - 02:33:13.646, Speaker A: Whatever you.
02:33:13.668 - 02:33:31.404, Speaker G: Just have in one well, that's kind.
02:33:31.442 - 02:33:33.464, Speaker H: Of I don't know if the leader.
02:33:33.512 - 02:33:34.110, Speaker A: Can.
02:33:36.340 - 02:33:38.272, Speaker H: I actually don't think this is.
02:33:38.326 - 02:33:41.648, Speaker G: Necessarily the case, but yeah, if you.
02:33:41.654 - 02:33:49.590, Speaker H: Have an honest agreement, you have to resolve in the end. Like Lampard's famous result, either you don't terminate or.
02:33:55.960 - 02:33:59.830, Speaker G: Kind of convert to some.
02:34:03.980 - 02:34:20.556, Speaker E: There are consensus algorithms that do avoid the leaders, but one of the early versions of Zombie Williams is stuff, but tried really hard to use them, but then eventually they gave up on them. Not really sure why because the map was really cool but I guess they.
02:34:20.578 - 02:34:22.110, Speaker A: Just decided that it's hard.
02:34:26.750 - 02:34:31.980, Speaker E: Basically there's just like this complexity cost that I would be worried about.
02:34:40.130 - 02:34:47.514, Speaker H: One more thought I think not necessarily avoiding leaders but like restricting what leaders.
02:34:47.562 - 02:34:52.960, Speaker G: Are allowed to do. More.
02:34:54.770 - 02:35:00.286, Speaker H: Kind of limit limit every limit options of what a validator note can decide.
02:35:00.318 - 02:35:01.522, Speaker A: I guess what I mean is that.
02:35:01.576 - 02:35:10.230, Speaker G: If that limit is greater than which.
02:35:10.300 - 02:35:13.320, Speaker E: Could be fine if that role is worth.
02:35:20.100 - 02:35:49.736, Speaker I: Regarding the consensus, I think that Mohina's original work on this fair order consensus. I'm not sure about the exact number but they get to consensus pretty quickly. The point is, I think my argument there would be that the granularity is super weak. So you have basically a lot of uncertainty on the order of the transactions. But as soon as you like, let's.
02:35:49.768 - 02:35:54.520, Speaker G: Say transactions are sent two blocks apart.
02:35:54.600 - 02:35:56.012, Speaker I: Then it's easy to find an order.
02:35:56.066 - 02:35:57.150, Speaker G: Or let's say.
02:35:58.960 - 02:36:12.080, Speaker I: One block time apart then it's easy to find an order also with their algorithm. But if you send transactions within a second or two then you will have a lot of uncertainty and they will be ordered wrongly.
02:36:12.500 - 02:36:13.212, Speaker G: Right.
02:36:13.366 - 02:36:20.608, Speaker E: I think my worry would be that would have the edge case of what happened precisely in those moments when they're.
02:36:20.624 - 02:36:22.404, Speaker G: Worse than us at this point.
02:36:22.442 - 02:36:44.300, Speaker I: Yeah, that's my main counterargument against this particular algorithm. But I guess you could still have some. Personally, if I were to scientists I would totally use first an assumption on synchronized clocks and then go from there.
02:36:45.230 - 02:36:50.620, Speaker G: Then make it more efficient. Very.
02:36:54.270 - 02:36:58.480, Speaker I: I mean we at least we know the limits of those protocols already.
02:37:04.220 - 02:37:05.210, Speaker G: Thank you.
02:37:06.720 - 02:37:16.430, Speaker B: Well, I guess we transition to yours. I think the order is yours next.
02:37:17.280 - 02:37:21.410, Speaker H: Yeah, I make it very quick. Maybe you can just.
02:37:23.220 - 02:37:26.210, Speaker G: Go down yeah.
02:37:28.580 - 02:37:31.520, Speaker C: About 25 minutes in total until we leave.
02:37:31.670 - 02:37:34.832, Speaker G: Yes, I try to make it quick.
02:37:34.966 - 02:37:35.650, Speaker B: Amazing.
02:37:38.820 - 02:37:39.570, Speaker I: Yeah.
02:37:42.660 - 02:37:43.690, Speaker C: All got.
02:37:47.660 - 02:37:59.400, Speaker H: No, just the picture for first for the maximum maybe we can make it a bit bigger.
02:38:05.180 - 02:38:07.450, Speaker B: It's not doing what it's supposed to.
02:38:13.140 - 02:38:22.210, Speaker G: Yeah. Yes, maybe perfect.
02:38:23.640 - 02:39:19.236, Speaker H: So we actually did a quite simple and easy to understand paper I would say on so called opportunistic algorithmic double spends which is kind of a different form of double spend from what we all used to see and hear about and know. On the left side we have a classical double spend where there is a fork in the blockchain and we basically aggregate and try to push a different transaction in. And for an algorithmic double spend we basically use the transaction semantic itself and the fact that in certain blockchains this transaction semantic might depend on blockchain state, on context, on external information to do something else.
02:39:19.418 - 02:39:20.052, Speaker G: Right.
02:39:20.186 - 02:39:53.376, Speaker H: And this actually for the case for Ethereum for example, we can implement such a we call this semantically malleable transaction with very few overheads. So for an ESC 20 transfer, for example, we have about 8% cost increase to doing that. Which basically means that if somebody would use this or if it would be.
02:39:53.398 - 02:39:58.268, Speaker G: Widely used as a kind of strategy.
02:39:58.364 - 02:41:26.584, Speaker H: To use these kind of transactions, then in case some fork happens to kind of have an interesting cascading effect of the whole blockchain state. Like you had fork and the whole blockchain state kind of diverges and has very systematic implications from basically a simple idea that just embed some different kind of logic. Simplest thing is like you build on a block hash from a previous block or block height. But actually the same issue also applies in other systems which don't have this full Turing complete language to write your scripts or contracts in for example, in Bitcoin you have these dependencies on the upxos and in principle your transaction is like fully deterministic and you may assume that this is actually not possible there. But actually there is a corner case where this problem even arises in bitcoin on this 100 block bound for the minor reward paid out and even like systems like cardano which use this UTXO.
02:41:26.632 - 02:41:31.840, Speaker G: Model kind of face this problem and.
02:41:31.990 - 02:42:11.630, Speaker H: Similar patterns to these are kind of observed already in lots of kind of math related contracts and patterns. And the opcodes which can be used to implement such mall transactions are I don't know, there is a figure in the paper, I don't recall the number, but lots of transactions actually use this kind of opcode and maybe could lead to such effects we basically described here. But this is a very simple high level idea behind the paper, what we had a closer look at.
02:42:13.760 - 02:42:14.172, Speaker G: Yeah.
02:42:14.226 - 02:42:27.920, Speaker H: And actually just want to credit to the other guys in the team. So actually I was just very briefly involved with this and most of the work was done not by myself but by Nicholas and Ayosha on this topic.
02:42:29.220 - 02:42:33.030, Speaker G: Yeah, I think that's I forgot something.
02:42:34.760 - 02:43:00.972, Speaker H: If I should mention some important other things. Yeah. We have like in detail shown when this is a problem in which cases and formally shown different things about it. Yeah, mitigations, maybe it's one point how.
02:43:01.026 - 02:43:03.980, Speaker G: Could you deal with this issue?
02:43:04.050 - 02:43:13.360, Speaker H: Right. And probably the easiest one is like as for most things is you get fast consensus finality and you actually get finality.
02:43:16.500 - 02:43:16.864, Speaker G: Yeah.
02:43:16.902 - 02:43:45.560, Speaker H: But in systems where you have this kind of forks and test behavior where everybody builds on stuff which isn't really confirmed and they I think we didn't even once mentioned that. Okay, a block might be reverted and we have cross block mev opportunities and maybe it makes sense to fork a block as an opportunity to expect even more values. Then it really becomes a big issue. And if everybody does this kind of thing, it gets even worse.
02:43:49.770 - 02:43:55.714, Speaker G: Like basically the very short brief overview.
02:43:55.762 - 02:44:21.810, Speaker H: Of what we did there. Well, the first one is like you have pair block finality. So if this reduces for normal users, they basically don't have to worry about it anymore. You're doing that in issue.
02:44:26.660 - 02:44:27.410, Speaker G: Yeah.
02:44:32.520 - 02:44:33.270, Speaker B: Right.
02:44:35.000 - 02:44:37.030, Speaker G: Asking what is.
02:44:40.200 - 02:44:44.070, Speaker B: Beyond half a person actually working on it.
02:44:48.460 - 02:44:50.010, Speaker A: There's more than half a person.
02:44:50.780 - 02:44:53.050, Speaker E: Well, I guess there's half a Francesco and.
02:44:54.860 - 02:44:55.930, Speaker B: Okay, fine.
02:44:57.340 - 02:45:03.310, Speaker H: But if you have like some more you have something about it, like a draft or whatever.
02:45:04.560 - 02:45:05.630, Speaker G: If you search.
02:45:10.400 - 02:45:55.310, Speaker H: Happen to take a closer, closer look, there is another interesting countermeasure. You can use the attack against itself. So you can kind of hedge against if you're a merchant, greg and. You're afraid that somebody does this to you, then you like yourself when you pay some money received to such a transaction, you just pay again with such a transaction, you kind of leverage the same kind of attack to protect against it. So there's this kind of recursive use of this thing, which kind of an interesting strategy makes it a fun headline in the title of the paper.
02:46:05.940 - 02:46:06.690, Speaker G: Yeah.
02:46:11.960 - 02:46:42.984, Speaker H: You don't even have to know when it happens. You don't even have to recognize it. Just if a fork occurs for whatever reason and be it like a long range fork issue, we have seen in, I don't know, Ethereum Classic or something, and then you get all your money back. This is like an amazing thing. We have a contract which basically can do this forwards thing that pipes whatever you want to do through a contract.
02:46:43.112 - 02:46:44.910, Speaker G: Does exactly that, then.
02:46:53.990 - 02:46:57.670, Speaker H: Massively reworks for this. This is like a massive.
02:47:08.430 - 02:47:09.740, Speaker E: Yeah, like.
02:47:11.630 - 02:47:12.380, Speaker G: Yeah.
02:47:14.590 - 02:47:18.410, Speaker E: It'S it's like triple state by itself.
02:47:18.480 - 02:47:28.082, Speaker G: Like like you have a large fraction of all the validators then like single slip and they kind of put them further. No.
02:47:28.136 - 02:47:32.082, Speaker B: Isn't there a patch didn't you during.
02:47:32.136 - 02:47:33.940, Speaker G: The New York saga, didn't you.
02:47:36.230 - 02:47:39.714, Speaker E: The one with Georgios yes. Well, the one with Giorgio's just like.
02:47:39.832 - 02:47:43.526, Speaker G: Points out that or at least our.
02:47:43.548 - 02:47:44.998, Speaker E: Version of proven state makes it harder.
02:47:45.014 - 02:47:45.740, Speaker G: To do.
02:47:50.910 - 02:47:56.650, Speaker E: Like proof of stake. I mean, when it is a proof of staker.
02:47:57.230 - 02:47:59.050, Speaker A: Right, but arguments was like a proof.
02:47:59.050 - 02:48:00.720, Speaker E: Of stake versus proof of work thing.
02:48:01.490 - 02:48:04.990, Speaker G: Gasper does many parallel settings.
02:48:06.450 - 02:48:29.058, Speaker H: The thing is actually it's quite interesting which kind of proof of stake design. So Casper with this kind of slashing is much less there is much less of a problem. But like in Cardano, for example, they added a feature where you can specify a window where a transaction is valid and they don't have slashing in the consensus.
02:48:29.234 - 02:48:33.654, Speaker G: So there it actually is very easy.
02:48:33.692 - 02:48:37.334, Speaker H: To implement and it don't have this slashing.
02:48:37.382 - 02:48:38.300, Speaker G: You can just.
02:48:42.140 - 02:48:44.552, Speaker H: It'S still kind of a longest chain rule. Yeah.
02:48:44.606 - 02:48:55.022, Speaker G: Okay. Yeah.
02:48:55.076 - 02:49:10.760, Speaker H: I think the original heroboros is like old school, but they're using a variant of prowess. Since Prowls, not much has changed how it works in like yeah, definitely.
02:49:14.330 - 02:49:15.426, Speaker G: Northina.
02:49:15.538 - 02:49:16.200, Speaker C: You.
02:49:19.530 - 02:49:29.030, Speaker B: I guess sorry, you have to send me your slide. Can you send me the link or is it a local file?
02:49:29.770 - 02:49:30.520, Speaker G: It.
02:49:42.510 - 02:49:42.922, Speaker F: Yes.
02:49:42.976 - 02:49:45.290, Speaker B: Oh, you send it to Telegram.
02:49:45.370 - 02:49:46.000, Speaker G: Okay.
02:49:49.730 - 02:49:51.886, Speaker H: What are the constraints you would consider.
02:49:51.988 - 02:49:54.830, Speaker G: Like a single slot solution?
02:49:56.610 - 02:50:04.270, Speaker H: Imagine I don't know, it probably comes with some penalty on hardware requirements for validators.
02:50:05.430 - 02:50:38.046, Speaker A: All kind of it turns out that it's actually not that bad bandwidth wise. It's interesting. I think we realized that we were like basically for Ethereum as it is today. The bottleneck in scaling to supporting more validators isn't just like elliptical curve verification, it's the aggregation process. And it turns out that you actually can do the signature verification going all the way up to several hundred thousand per slot. Aggregation is something that you'd have to.
02:50:38.068 - 02:50:56.130, Speaker E: Change, but we have ideas how to optimize it so it could actually be done with relative but the attestation aggregation.
02:50:57.670 - 02:51:00.326, Speaker A: Yeah, aggregate verification is like just one.
02:51:00.348 - 02:51:06.520, Speaker E: EC ad, perhaps a quarter of an EC ad per.
02:51:10.170 - 02:51:15.130, Speaker G: Points. Cool.
02:51:17.760 - 02:53:09.570, Speaker F: I just quickly tell what we did, but the research focused on Bitcoin blockchain and UTX based blockchain and I also told Tina maybe it's not related to the discussion today and she just suggested to go through with that and then maybe we can discuss it with ethereum or something like that. We did a study based on interviews and questionnaire a user perceived privacy and the mental model of their understanding of privacy issues in Bitcoin and their preferences on privacy reserving techniques implemented by wallets or other privacy coins. And then to see if to answer these main questions that to what extent they are aware of privacy issues and also the privacy enhancing technologies and what preferences they have. Do they for instance prefer using add on privacy techniques on top of Bitcoin or do they prefer using privacy points? And for this are they willing to use these privacy preserving techniques despite the higher fees and delays? So do they trust privacy preserving third party services for it? So I will skip most of the slides as I just want to explain the findings somehow. It's not.
02:53:12.420 - 02:53:19.270, Speaker B: Sorry, this is another of the screen sharing issue I think. Yeah.
02:53:24.520 - 02:53:26.068, Speaker F: No oh actually sorry, you are.
02:53:26.074 - 02:53:28.310, Speaker B: Open because you're not sharing your light.
02:53:30.600 - 02:53:31.350, Speaker A: Yeah.
02:53:35.560 - 02:53:44.590, Speaker G: It'S a different screenplay, you.
02:54:00.290 - 02:55:48.980, Speaker F: Skip these fundamentals and basic concepts. But here I just explained the privacy issues in Bitcoin and all the attacks over the privacy in Bitcoin. Let's see, let me show this one. It's an example of coin join transaction and coin join. As you know, maybe it's one of the main and first proposed techniques to provide privacy, but it has a problem that the equal size output makes it clear for everyone that someone uses CoinJoin transactions. And there are some wallets now join market wasabi Samorai providing these coin joint transactions? But they are distinguishable in the blockchain and yeah, I skip all of them to show just people slide for the privacy awareness. When we ask users about the questions, we found some interesting points that one of them was lack of knowledge of difference between custodial wallets such as exchanges and also noncustodial wallets and some of them were even unaware the privacy issues with using custodial wallets.
02:55:48.980 - 02:56:11.900, Speaker F: And also some of them preferred continue using exchanges as they were so easy to play with them. Actually, some of them mentioned that recovering the cryptography piece is more complex than recovering a password for an exchange.
02:56:14.800 - 02:56:16.424, Speaker E: How many users did you survey?
02:56:16.472 - 02:56:51.240, Speaker F: Actually for the interview it was twelve participants, but we run quantitative study actually with 101 participants. But the main concern was for the interviews inequality and there were also privacy misconception conception. As an example, one of the user told that it's going to be based on encryption algorithm which makes it anonymous.
02:56:56.240 - 02:57:00.220, Speaker G: All of the users are using yes.
02:57:00.290 - 02:57:48.710, Speaker F: They were cryptocurrency users, but they were nontechnical users. And for instance, one of the users also told that the user don't know to whom the public belongs. It's an alphanumeric phrase and all the identities are hidden in the network. And one of the interesting points was mitigation in case of awareness. As an example, one of the user at the end of the interview one of them told that I have never heard about this privacy issue, but if I knew about them, I would have research possible solution to mitigate them.
02:57:49.820 - 02:57:50.570, Speaker G: And.
02:57:55.260 - 02:59:40.016, Speaker F: When we asked about some well renowned attacks over Bitcoin address reuse and information from exchange have increased attention and most of the users have heard about these attacks. And also maybe we can say that it was the power of education by Wallace person when they suggest to make a new address every time then most of them knew that they should prevent reusing the address. But one of the interesting things was that most of them have never heard about common input ownership heuristic in Bitcoin when it's the first heuristic in the privacy attacks that consider all the inputs to the transactions belong to the same user and also privacy tools was unpopular among non technical users. They either have never heard about them or if they have heard Zcash or Monero. They didn't know which kind of privacy is provided by these privacy coins. And also and also it was distrust of privacy. For instance, one of the users told us I don't want to run away from taxes, I have no reason to be anonymous.
02:59:40.016 - 03:00:13.904, Speaker F: So they just thought that using privacy techniques maybe is for tax evasion, for doing criminal activities and something like that and it was a negative understanding of privacy and for privacy preferences. When we ask users whether they prefer to use privacy preserving techniques on top of Bitcoin or they prefer using privacy coins, more than half of them preferred.
03:00:13.952 - 03:00:15.460, Speaker G: Using privacy coins.
03:00:17.880 - 03:00:41.720, Speaker F: And also those who prefer to use add on techniques they expected built in improvement to the Bitcoin in the future. We also yeah, and users also accepted longer transaction times but half of them dismissed the idea of paying extra fees.
03:00:41.800 - 03:00:53.580, Speaker G: To have privacy and those who were.
03:00:53.650 - 03:01:07.920, Speaker F: Aware of distinguishability of Coin Jones were not willing to use it. They preferred doing ordinary transactions rather than using a privacy preserving techniques which is distinguishable in the blockchain.
03:01:10.660 - 03:01:11.664, Speaker I: Longer waiting time.
03:01:11.702 - 03:01:13.288, Speaker E: This could be related to NAD.
03:01:13.404 - 03:01:16.004, Speaker G: We could say that you're willing to.
03:01:16.042 - 03:01:21.136, Speaker E: Wait for longer extracted from the transaction.
03:01:21.248 - 03:01:23.540, Speaker G: And you're not paying I mean it's.
03:01:23.880 - 03:01:25.270, Speaker E: Not related to price.
03:01:30.840 - 03:01:31.908, Speaker I: Like not willing.
03:01:31.924 - 03:01:33.850, Speaker E: To pay fees, willing to wait.
03:01:37.840 - 03:01:38.300, Speaker G: And.
03:01:38.370 - 03:02:47.970, Speaker F: For the privacy wallets the wallets still struggle to attract more users as they are still unpopular, at least among non technical users. And there is also a complexity for using these wallets. And using these wallets needs minimum understanding of privacy concepts. For instance, when you ask someone to do a conjunct transaction with one of these wallets, they may really skip some of the in some of the tasks. We also did study for user study on privacy wallets, and some of the users even failed to complete the conjoined transactions. For instance, as it was, some of the parts were too complicated and they couldn't understand why they cannot finish the task. And I cannot go.
03:02:51.560 - 03:02:52.816, Speaker B: Cannot go to the next slide.
03:02:52.848 - 03:02:54.710, Speaker F: No. Maybe no.
03:02:56.840 - 03:02:57.956, Speaker B: I think that's the end.
03:02:57.978 - 03:03:01.030, Speaker F: Of your no, it's 50 out of 56.
03:03:01.400 - 03:03:04.870, Speaker G: Okay, maybe just press the down button.
03:03:05.740 - 03:03:07.530, Speaker F: Yeah, I did that.
03:03:08.380 - 03:03:12.090, Speaker G: I think it's one of those things.
03:03:13.020 - 03:03:16.836, Speaker F: Maybe twice I shared the link already.
03:03:16.958 - 03:03:19.740, Speaker G: Okay, in a minute.
03:03:23.760 - 03:05:08.090, Speaker F: And another item for the privacy wallet was that the government bans and also some of the exchanges banned conjunction and the aspect of conjoined transactions and it would be a barrier for using these wallets. And also another interesting fact was that users preferred wallets that support different coins rather than installing a different wallet for their privacy and learning their functions to improve their privacy. If I want to finish actually my presentation, some of the problems was little knowledge of privacy issues and privacy enhancing and privacy techniques were too technical for ordinary users and there were negative understanding of privacy for criminal activities and also tax evasion. And for the solutions, maybe we can consider education, integration with the wallets or documentation and social media. And we can also consider proposing privacy techniques for, let's say, public privacy rather than, for instance, we can provide privacy on blockchain, but we know that wallets and exchanges have some information about the users, but we can at least keep them private from whole world. Thank you.
03:05:09.060 - 03:05:12.496, Speaker G: You're? Yeah.
03:05:12.598 - 03:05:15.260, Speaker B: I'm curious how that impacts well, I ordered.
