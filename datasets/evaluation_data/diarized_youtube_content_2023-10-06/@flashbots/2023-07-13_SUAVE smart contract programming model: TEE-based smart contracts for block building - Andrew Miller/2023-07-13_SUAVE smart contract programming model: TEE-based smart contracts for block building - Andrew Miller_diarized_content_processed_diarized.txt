00:00:02.810 - 00:00:56.558, Speaker A: All right, I'm new to Flashbots as past few weeks, past couple of months. But in the past few weeks I've been meeting a lot of my computer security distributed systems colleagues and explaining why the hell I'm working on Flashbots for my Sabbatical project. And so I put a bunch of slide decks together to explain this kind of quickly to some particular friends who have PyCon text with me on technical, you know, easy conversations with them, but who either are unfamiliar with Flashbots or have pre existing strong negative interpretations of Flashbots. And so these are fairly opinionated slides I made, you know, kind of quickly. But Tina, others like the presentation, so encourage me this way. The caveats I would give to them as well are that I'm just going kind of quick on what I've observed or think about Flashbots. So I got to read all the old notion drafts and just simplify stuff from everyone.
00:00:56.558 - 00:01:32.460, Speaker A: So some bits are like way oversimplified, some are deliberately oversimplified. But I basically have a very simplistic model that's like, everything's just uniswap v two transactions and that's the only thing that really exists. Apparently. The data team says that's not entirely far off, but I leave out in my mental model things like centralized exchange prices so those won't show up. And then this is very much like a vision of slob that I think is an interpretation of what's existed before, but maybe it shapes something a little bit. So take it as like a personal vision. Maybe it'll come true.
00:01:32.460 - 00:02:25.260, Speaker A: The first thing especially aimed at researchers who have a pre existing negative opinion of what Flashbots does, it normally it's really strange. The first CMU thing that I went to after joining Flashbots and encountering all of these people, and they would say in hush tones like, how are we going to stop Flashbots? Well, I've heard Flashbots is using Teas to extract even more amoebia than they did before. And so after studying myself, I've come into the interpretation that's neither what Flashbots aims to do or what it does. I'm telling you, I think I'm preaching to a choir here, so no one thinks this, but yeah, you'll hear from my way. So I don't even think the extracting mev framing is all that accurate. So to me, what Flashbots is already doing and continues to do is two things preventing front running and making back running better again. In the only world of uniswap v two transactions, those are really only the two things you can do.
00:02:25.260 - 00:03:05.814, Speaker A: I come from the world of computer security research, and I've done Snarks and NPC crypto things. But in the last year I've been obsessed with hardware based smart contracts like secret Network. I don't have in this thing on things, on disclosures and security bugs in secret network. But that's been like the long story of my research groups, like last year of stuff. So I can mention those on questions, but say forgetting that the basic thing of Secret Network is that it's only got one mem pool and it is a private mem pool because all of the transactions in Secret Network are encrypted. This is like what the encrypted ciphertext looks like. And the only way that Secret network transactions get into a block is by tendermin validators putting them in order.
00:03:05.814 - 00:03:51.634, Speaker A: But you can't do anything with the ciphertext until the block is already finalized and then you only get to execute them in the next block. That actually wasn't always the case, but that is the case now after our most recent security vulnerability disclosures to them. But the upshot of that is that Secret Network is already a little bit like suave in that they have a uniswap V Two clone. Every blockchain does. Their uniswap V Two clone automatically has front running resistance because of that built in blind ordering applied to every transaction that's sent through Secret Network. So Sienna swap is their uniswap and it eliminates the nearest possibility of front running LDA replay Prevention. That's sort of accurate, but to me, what's taken a long time to adapt to is to realize that that alone doesn't kind of solve the whole problem you want to solve.
00:03:51.634 - 00:04:28.130, Speaker A: Because if you just have the fair ordering, then you have really messy arbitrage that comes later. This is a new illustration that I've done to convey what this looks like. So messy arbitrage opportunities are the result of shitty user trades. A shitty user trade is one where you only trade on one pool, but most of the liquidity is fragmented on other pools, so the user gets a terrible price. I've skipped to the seeker network version where this is like a private trade so you don't see it. You only see it after the block is finalized. Then you get to see what the result of the trade was in time for the beginning of the process of the next block.
00:04:28.130 - 00:05:33.750, Speaker A: What happens then? A priority gas auction war breaks out because whoever can get the transaction at the top of block gets to take all the arbitrage opportunity, restoring the balance of the pools. But they get to pocket that arbitrage difference. And so not getting to swab like how this could be done more trust minimize just what Mevshare at Flashbots does today. Is it's like the same thing as in Secret Network in that your transaction is private until it gets settled, but with Mevshare backrunners get to bid on getting to put the transaction immediately after yours, even in the same block. But when bidding, they have to share the larger percentage of the arbitrage that they take back with the original user. So the result is that it's like at a technical level, it is implemented as extract and then redistribute. I prefer to think of it as you are getting a competitive auction to arbitragers for a commission for them to do the backRunning for you automatically upgrading your shitty user transaction into a more sophisticated Arbitrage free transaction that results.
00:05:33.750 - 00:06:07.090, Speaker A: I think that's pretty realistic. I mean, that's okay with just the uniswap. Things like central exchanges are a little bit different. What's Suave compared to Flashbots as it exists today? It's three things roughly in sequence. So just like T based smart contracts, it's replacing trust in the operator Flashbots to keep the privacy with trusted hardware so that they can't peek at it even if they wanted to. This could also be combined or replaced with cryptography or threshold kind of things. But for now, just say it's going to be the Te version.
00:06:07.090 - 00:06:43.206, Speaker A: If you can replace the trust in the operator with Tees, then that opens up the ability to make the execution decentralized. So you can have lots of different nodes, not even all controlled by Flashbots. Some could be lower trust environments. And then the third thing is maybe the new perspective. I think it was already implicit in stuff Shin had written talking about builder gas long ago, but no one had extracted it as such this way. But these market mechanisms will now be user programmable because they are written as smart contracts. So if you don't like the way mevshare distributes the rules, you can just fork the mevshare smart contract and replace it with a different rule.
00:06:43.206 - 00:07:35.390, Speaker A: No one can stop you from uploading a different smart contract to swab. And if you can convince users to send their transactions to that one instead, no one can stop them from picking your contract if they want. So that's what it means to be contestable. This also makes it an open marketplace, because Flashbots doesn't have to just come up with the perfect auction structure smart contract designers can do. So a starting point of what this would look like is, as a starting point, just replicate everything that's in the ecosystem today. Make mebshare auction a mebshare matchmaker, I guess a background smart contract, make the Flashbots builder a block building contract, and so on. This notion of an open marketplace, we've found this paper that's really surprising from literally 20 years ago, but it sounds like a modern description of Suave.
00:07:35.390 - 00:08:19.482, Speaker A: It didn't foresee smart contracts exactly, and it isn't aimed at the preventing private negotiation aspect. It's just concerned about efficiency of market mechanisms. But it basically says all the impossibility results of perfect auctions there is not going to be a perfect mechanism. So the best this advocates to aim for is the right level of lightweight components. It basically says you should have an open system where anyone can propose innovative new market design components that are compositional and can interact with each other. And in that way, market designers can innovate on parts of this, and you can have an ecosystem of gradually improving market mechanisms. Of course, smart contracts is like the only tool for open composition and innovation we've ever seen.
00:08:19.482 - 00:09:02.330, Speaker A: So that's kind of a natural fit. And again, they only focus on performance like efficiency of the market. They didn't go into the flashbot's doomer thesis. But that's kind of like the natural follow on. If you don't have this open contestable marketplace where the market designs are public smart contracts, you can look at analyze and fork if you want to. Then the alternative is that the market dominator may become entrenched through private, negotiated bulb deals, at which point it's impossible to dislodge them because you can't tell how they did their negotiations and so on. The bit of this that's now specifically aimed at cryptography researchers in my friend group this is try to pitch them that this is like an open research project.
00:09:02.330 - 00:09:41.542, Speaker A: So in cryptography we use ideal functionalities to make a specification so it's like a hypothetical trusted third party. Of course today we have an actual trusted third party so it's not far off but this persists as like an idealized version. So if you skip the tes and the decentralization and actually just did a trusted smart contract system with a central third party it would look exactly like this. But for cryptographers this is understood as a security definition. It just describes the interface. Anyway. The interface is that there's a service that has smart contracts on it and private data storage on it, just like secret Network and the different kinds of interfaces are market design.
00:09:41.542 - 00:10:26.626, Speaker A: Innovators can make new contracts and push them onto the chain. Users can interact with the smart contracts and there's still room for searchers arbitragers who get explicit hints like the mev share hints or anything that they can infer from side channels that are captured in the specification and they can invoke their own smart contract transactions and input arbitrage inputs and so on. And of course the important thing is that this outputs an L1 block up to ethereum and then this is like the very high level architecture view but now this is what suave should look like. There's smart contracts on Suave. There is a suave chain. There's a mem pool of pending Suave bids as well as the bids that are finalized. Being in a chain, being committed in Swab chain doesn't mean the bid is satisfied yet.
00:10:26.626 - 00:11:01.870, Speaker A: It just means it is sequenced and has data availability. And you can't ignore it on the Swab chain. And not all of the execution happens on Swab chain. That kind of suggests like very linear maybe bottleneck and latency bottlenecking. So really the point is that we will have off swave chain execution. So roll up of a roll up or something or side chain of a side chain. Anyway, the execution is off chain of suavechain but still carried out in fussed hardware execution enclaves by executors we call T kettles.
00:11:01.870 - 00:11:42.570, Speaker A: And so they can have access through their kettles to the confidential data, but only according to the rules of the smart contracts as defined. So each smart contract defines the program rules for interacting with that contract's private data. I don't know stale now, but this is my little mental model of what an ecosystem of separate market components looks like as contracts. I don't think this adds much new, but just imagine like there's mev share. It's like a component that is kind of close to user bids and towards the right hand side you have like larger bundles and near blocks. And finally a PBS export comes out the right hand side. Just a little image.
00:11:42.570 - 00:12:27.990, Speaker A: I think this slide doesn't add too much more other than maybe okay, we imagine there is some mem pool of pending Suave bids. And this goes in a little bit into some of the detail. Not super clear from this description, but the whiteboard can be for that about what off chain execution means. So Suave blocks probably come much faster than L1 blocks, but not infinitely fast. So the thing that will make this realistically performant is being able to do concurrent execution of useful stuff by lots of different separate enclave nodes, multiple cores on each enclave and that sort of thing. Each 1 may be doing some simulation. Whether you can do simulation or not is kind of up to the contract rules to define.
00:12:27.990 - 00:13:08.802, Speaker A: Like I said, in Secret Network, it used to be that they allowed open simulation so you can simulate transactions even before they're finalized in a block. So you can simulate a front run and the victim and a back run to see, and then if it succeed, increase the front run and try again. And then in that way you just do the mev on Seeker network. So after our security disclosures, they have patched that. So now you can only execute them, like I said at the beginning, after the block was finalized. But it would be useful if smart contract authors could approve some functions to be done with local simulation. It just gives more flexibility to the Suave app designers to address the natural concerns about tees.
00:13:08.802 - 00:13:38.718, Speaker A: Here's some concept of it. The motton Bailey military concept is also an argumentation concept. The military part is like you want to have your people working in the fields where it's sunny and you have all of your crops, but you're spread out. And if you're under attack, then everyone retreats into the fortified thing. But then it's like dank and Musty and you can't work in the field. So you want to be in the Bailey wherever possible and retreat to the Mott when you have to. So there's a sequence or a spectrum of ways of deploying tes.
00:13:38.718 - 00:14:11.018, Speaker A: The most aggressive operating point is what Seeker Network does, where anyone at all with a te can join. It can be person in a cloud, it could be a person at home, it could be in a side channels lab. You have no control over who's running them and they have physical access. So it's like the worst case scenario. Any breach here means that people with physical access could exploit even there's lots of breaks on SGX over time. Some of them can be exploited with just software, those are the worst cases. Others can be exploited but require some level of physical access to be able to do so.
00:14:11.018 - 00:15:03.370, Speaker A: So in this case any kind of breach would be problematic for your system. Something in between is maybe only approved cloud vendors are eligible to VT kettles running so anyone could have the account. It could be in any country that has one of these clouds, have a data center there but you're relying on the cloud having their own security guards fortified data center and bigger fish to fry. Even if it's lucrative, they're not going to risk embarrassing themselves in front of their juicy cloud enterprise customers just to extract ethereum blocks. Like an additional kind of justification for security and on the very extreme end, which all else equal you would like to be if performance could get there. So maybe in the future you do some multiparty computation threshold fag stuff where you have multiple nodes doing each interaction. If you break any one node you don't get anything.
00:15:03.370 - 00:15:46.700, Speaker A: You have to not only break SGX and have physical access, but get more than one of the nodes or plurality of them to be able to do anything about it. So maybe all of these are feasible. Maybe something in the middle is kind of conservative. It depends on how far you want to push it. And maybe even these could be dynamically. Like when a breach notice occurs, maybe you shut off access to physical access kind of nodes and run on reputable cloud only at least for a little while, until patches are way done over. So it's a little bit fuzzy and not like a complete answer to I don't expect this to completely flip someone from hates the Te model to being totally okay with it, but you're not only talking about the worst case scenario operating point is all.
00:15:46.700 - 00:16:49.742, Speaker A: So I teased that the new thing is thinking about Swab as explicitly smart contracts and explicitly what we're calling builder Solidity, which is you will actually be writing all of these in specifically Solidity. It's Solidity with some additional precompiles EVM with some pre compiles, mevm with some pre compiles that are useful for building blocks and simulating EVM transactions. So you have a keyword to refer to the ethereum l one, this is running like on Swab chain but you can simulate an EVM transaction passed as data but that's a pre compile. So it's not like I'm saying write the EVM in Solidity, that would be gassy. This is like a pre compile that just makes that efficient and then so this is like pseudocode for what the Flashbots builder might look like. It's the two passes, right? Like simulate all the bundles it has as though it were the only bundle in the block and then sort them based on that estimate and then do a confirmation pass. Simulating them in order this time.
00:16:49.742 - 00:17:48.034, Speaker A: And if in order they fail or they fail, or the estimate turns out to be way off, then just discard that bundle. This is just pseudocode replicating what the flashbot's builder does now, but now it's in pseudocode. So you could imagine forking it and changing the rule if you wanted and convince users to send transactions bundles there instead. And like exporting block to the L1 through PBS could be an opcode as well. There's a new proposal for a suave app from one of the newest flashbots researchers, Sergio, which is Walrus Swave. So this is saying if you have a batch of uniswap transactions, if you just process each of the uniswap transactions, each one pays a fee to the liquidity providers, right? But if you have a batch, you should first see if you can make as many of them as they can settle amongst themselves, not having to pay the liquidity providers for it. And you can just do a solution to find the strike price for that.
00:17:48.034 - 00:18:24.122, Speaker A: And then what's left of residual demand would get forwarded in a batch to uniswap other pools. So that could be modeled in this pseudocode as two entry points. One is to submit a bid to this contract that just adds it to some storage. This is implicitly all private, by the way. Right, so you submit your bid to Swab. These are encrypted only processed by hardware enclave, so it keeps your quantity and reserve price hidden. And then the second entry point is to process bids, which does that settling, and then forwards this bundle on to that builder contract nev share.
00:18:24.122 - 00:19:13.770, Speaker A: You could also model as a contract with like three entry points. One to submit a bundle and specify what hints you want to reveal, like the token pair you're trading on but nothing else. As a blind arbitrager, you can see one of those bundles based on its hints. This should be bundle ID. The point is, like, if you have the hint as the name of a bundle, then you can bid on putting your transaction in background position right after that bundle. And all that does is it doesn't even simulate it here, it just packages up that bundle and again forwards that on to the nevoost sorter estimator builder contract. Okay, so the only thing that's left was I didn't say how this does the kickback or giving the user back the arbitrage from mevshare, that seems like it has to be implemented by modifying that builder contract.
00:19:13.770 - 00:20:00.646, Speaker A: Maybe there's a more modular way to do it with like a callback function. But yeah, this is sort of stale pseudocode, but maybe you get the idea. One of the questions that in my sphere I get a lot is where does the fair ordering come into this? Or like, is fair ordering is it or is it not a subset of suave or like the opposite of swab. And so this is to say yes, it's compatible. It's clearly a special case of suave. You can write a fair ordering prof style builder contract. Basically prof says what if you have a fair ordering service that makes a bundle but you want that bundle to bypass any sort of simulation you don't want to go to a builder that simulates it at least doesn't simulate it for ordering it can simulate it to produce the header.
00:20:00.646 - 00:20:48.806, Speaker A: It kind of has to to get the post date execution route but so this would basically be a builder rule that can take prof blocks but prof blocks would only be forwarded to this if it followed this rule which is that it won't actually simulate the prof blocks to estimate them at all. So it can insert them at the end of a block but it can't determine what the price it is. So it just has to take it or leave it no ability to simulate how much mev that prof block generates. That's mostly it there's kind of a technical thing that's a little bit new. I said that we want this off chain execution. This concept of roll ups is something that I've been looking at recently for our proposal to secret network. So one of the secret network disclosures is about access pattern leakage breaking their sender receiver privacy.
00:20:48.806 - 00:21:50.170, Speaker A: They really need to use oblivious Ram but they don't have a good way of adding oblivious Ram because that's expensive to do it on chain. So we came up with a proposal to do off chain oblivious Ram and what's interesting is that doesn't require a new system or like a new roll up to secret network. It's actually just something you can do with the existing secret network smart contracts. It's a little bit technical and subtle but basically maybe you get the idea that you can do some kind of computation on things off chain but you would have to put the result back on chain like a roll up. Normally you would need a Snark proof or an optimistic frog proof. But in the Te world, you sort of have a replacement for Snarks because the Tees can have a secret signing key, so you can take a signature. From the tee smart contract as like in lieu of a right as long as you trust the Te model then only that running that smart contract can produce a signature under that public key associated with the smart contract.
00:21:50.170 - 00:22:27.574, Speaker A: So in their existing programming model of te based smart contracts, you already have cheap roll ups. And so maybe this doesn't illustrate the whole thing, but basically, if you wanted to do a linear scan and you wanted to do it concurrently, it's not linear, like sequentially, but just linear. Like you touch everything, regardless of which thing you're actually accessing. You can do this in read only views and each view can output an encrypted and signed, updated state. Like, that's expensive compute wise, but you're not paying gas for it. And then only the outputs of the thing that you want to query have to go back on chain where they can be checked kind of easily. This is off of swab.
00:22:27.574 - 00:23:02.822, Speaker A: This is just saying this is this roll ups for free programming model that works for Secret Network, but it's the same concept for swab. This is the same programming model would be how you could do off chain distributed block building that way. Yeah, maybe I might leave it here. This is kind of aimed at posing open questions for the computer security researchers. I pitched that there's like an ideal functionality kind of thing. So there's actual formal modeling and protocol design for this sort of thing to do. How to do the programming model is, I think, fairly open.
00:23:02.822 - 00:23:36.900, Speaker A: I think that if you get down the path of saying, what if we just use Solidity for this? It's cool. Because the idea should be you're already familiar with Solidity. As much of your programming model expectations should also carry over to making suave apps. I mean, you have to be thinking about, okay, you're in this privacy setting. Like what you can do with signatures and stuff is a little bit maybe unfamiliar, unless you've just been in Oasis and Secret Network for a while. But that at least gives you a design intuition like principle of least surprise. If you have no other strong prevailing reason, then as platform designers, we should make it as much like familiar EVM as possible.
00:23:36.900 - 00:24:20.574, Speaker A: And then that's also the invitation to you folks, I guess, if that inspires you, what kind of swab apps you might make and how you might think of making them. Now is still time to collect input on what pre compiles might make sense or programming patterns might emerge. We've basically been jamming on pseudocode of different variations of these things we can imagine, but there's just, like, so many different designs. You can start by replicating existing designs, tweaking them a little bit, come up with something kind of wild. How to integrate the cryptography with the Tes is definitely open. I think Mev Share is like a pure mechanism design open challenge. I don't think Mev Share I think Mev Share is a novel mechanism that doesn't really exist anywhere else.
00:24:20.574 - 00:24:44.040, Speaker A: I'm not thoroughly knowledgeable about all such mechanism design stuff, so maybe that doesn't bear out. But that's like conjecture law. So that's like a nice thing to analyze. Yeah, that's it. People have, like, this elephant, so I will show it. There's lots of aspects of suave people, even at Flashbots, see it all different ways. So this is in part an effort at trying to unify some of the different threads that have been sitting together.
00:24:44.040 - 00:24:45.700, Speaker A: Yeah, stop there.
