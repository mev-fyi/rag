00:00:01.520 - 00:00:04.542, Speaker A: You also want to record a call or is the YouTube recording fine?
00:00:04.566 - 00:00:20.690, Speaker B: It's going to be seven twenty p. I think that's fine. All right. All right, we're live. Cool. I'm going to make you host Twitter. Let me know if I should come back.
00:00:20.690 - 00:00:39.060, Speaker B: I'm not sure. I'm not super proficient in Zoom. Maybe someone else will want to take over that. I don't know what I need to do as a host. So it's mainly if you want to stop the live stream. Okay. All right.
00:00:40.000 - 00:00:42.980, Speaker C: Will it stop automatically after we finish the zoom call?
00:00:43.680 - 00:00:49.264, Speaker B: Yeah, but you might want to stop for some reason.
00:00:49.432 - 00:00:50.500, Speaker A: All right, cool.
00:00:51.000 - 00:01:01.760, Speaker B: Can you stop and start again? Unfortunately not. Okay, cool. All right, bye.
00:01:02.140 - 00:01:14.280, Speaker C: Thank you. Fred. Do we expect any more people to join?
00:01:17.100 - 00:01:51.850, Speaker B: Well, there's a few more people invited, but I think some of them will join. And later on. Okay, so now I'm screen sharing? No, I'm not.
00:01:53.070 - 00:01:59.530, Speaker A: You do? Yeah, we can see your screen.
00:02:00.310 - 00:02:56.660, Speaker B: We have a few topics that we can work on. From the top of my head I thought about four different topics. One of course is the running r builder inside the YoctotdX VM image, and there's different steps to get there. I've collected all these in linear, but there's also this sub notion that's describing it. I think also a very fun task would be to enable the Bob YoctotdX VM image. We really don't need much here, just need to figure out how we can insert the ssh keys to the image. And then I would also like to ask the question of how can we keep this configuration separate from the r builder configuration.
00:02:56.660 - 00:04:07.150, Speaker B: This will require a bit more deeper understanding and knowledge of Yocto, and it's more addressed here in this way. Like if we want to have explore reproducible builds, can we like, what is an easy way to set up the project? Like if you can want to tell other people, look, you can come to the same image as ours, these are the steps, and currently we're far from that. I mean, there's only one Yocto project on the server, we're using that one, but there's not even a manual how to get to that same state. So I think that's something we could look at, but it's more of an advanced thing. So I would probably concentrate on these three and then maybe at some point later on we can look at exploring this reproducible part. Is there any preferences? What do you want to work on first?
00:04:10.060 - 00:04:48.110, Speaker C: I think one and two both require the prerequisite a TDX Vm. Right. So. And the third one as well. So maybe we just start with getting ourselves familiar with Yocto and the images building process. And then all of them, all these three are just the expansion on what goes into the VM.
00:04:48.530 - 00:05:56.544, Speaker B: Okay, yeah, that sounds like a good idea. So I made some notes. I think it's best if I could have a terminal on the side and, and guide you through it. Let me see if I can get that working. Just, I'm just gonna share the whole screen. Yeah, I think that works. So let's start from the beginning.
00:05:56.544 - 00:07:13.140, Speaker B: So we have this base level directory and it contains the pokey distribution of Yakuto. So yocto is the build system and pokey is a reference distribution. I just started from there because it's easy. They have several templates especially there's one that's like a minimal Linux VM and I've modified that to fit our needs. And then if you want to just start like how can I build it? Let's first start with this one. You go into this directory, you source the build environment and then you can bitbake the CVM image. And initially this will take a huge amount of time but since I've already built it it's not going to take that much time.
00:07:13.140 - 00:08:17.370, Speaker B: And it's just adding, you know, it's just compiling all of the binaries or all of the dependencies and then creating an image and. Yeah, that's it. And once that's done you can find these images, you can find the created images in this directory and then I'll. Once I was finished I can explain to you exactly what the different steps are to get to the image. Are there questions so far so we can answer something while we're waiting?
00:08:17.990 - 00:08:21.102, Speaker A: Yes, I have a small question. Can you hear me? Actually?
00:08:21.206 - 00:08:22.078, Speaker B: Yep, I can hear you.
00:08:22.094 - 00:08:53.620, Speaker A: Yeah, perfect. Perfect. So maybe this will come later. But when you are building this image, how do we configure it? The configuration should probably happen beforehand before building it, where do we configure to which remove the stuff that we don't need to make it as minimal as possible? Is that possible here or is it already fixed? This is the binaries and dependencies that should be included and that's it.
00:08:56.900 - 00:09:37.610, Speaker B: There's a lot of places where you can configure this. I think ideally at some point we come to a place where we know exactly what we want to configure and then provide one single config file where you provide all the configuration and then from there on it spreads throughout the project and places the configuration and specific environment variables of different files. But at this moment we're not at that point. So I can show you a few places where you can configure stuff. I'm going to do that after I show you how this image directory looks like.
00:09:37.770 - 00:09:41.110, Speaker A: Yeah, cool.
00:09:47.090 - 00:10:31.282, Speaker B: So everything under built temp directory basically is stuff that has been, that contains built dependencies or binaries or stuff like that. So I think the important one is the final, let's see. Oh, I remember now. At some point we unpacked one of the images and so now we have a root file system here as well. And I didn't clean it up. Okay. There must be a vMDK image somewhere.
00:10:31.282 - 00:11:06.640, Speaker B: So that's a vic image. This one is important. This one you can boot with chemo. And then there's the VHD. So basically the vic is the final image and then the VHD is, is a conversion to another image that you can boot with azure. And before that vic you have the, you need to have the intrum must be around here somewhere as well. Well you have the, you have the kernel image.
00:11:06.640 - 00:11:35.890, Speaker B: There's a root fs. I think the root fs is. No, that's, that's actually the final image. But somewhere most awesome. The, here you have the inner drama fest. So I think that's, these are the main parts and they construct the whole image. I can give you an example here.
00:11:35.890 - 00:12:08.700, Speaker B: This one, this file describes the fe disk image partitioning. So you can also see how it's built up. So let's have a look at this one. Sorry, are you also having this copy paste issue with notion that you have to really wait a few seconds until it actually takes the thing that you selected?
00:12:11.080 - 00:12:14.220, Speaker C: Yes, I think yes, it's super annoying.
00:12:14.840 - 00:12:55.180, Speaker B: Okay, so it basically creates two partitions. One is the Fe with partition image and that contains the unified kernel which is the kernel plus the edit ram disk and the system deboot binary which basically acts as an Fe loader. If you have questions here, if you don't know what an Fe loader is or stuff like that, then just ask and I can explain.
00:12:56.960 - 00:13:00.240, Speaker C: Wait, why is their system g something?
00:13:01.300 - 00:13:46.286, Speaker B: The system d boot isn't just an Fe loader. It's not systemd itself. It's just a small binary that acts as an Fe loader. So you basically, the boot processes, you have ufe booting and then that looks for an evi loader which is system deboot that is started and then as a next step, this one will start the unified kernel image, which will start the kernel, unpack the round disk and continue. And then there is one partition which is the SDA partition. There's nothing on it. We're not writing to this at this moment.
00:13:46.286 - 00:15:04.760, Speaker B: It's just a placeholder for in future. Like once we boot the image, we want to repartition this SDA to make it bigger than encrypted and then we can place our stuff there. But for now that's just a placeholder. And yeah, you need to have the bootloader configuration which also contains the kernel command line, which I think is important because I want, with the kernel command line, I would want to explore whether it's possible to add additional parameters to the kernel command line without having to rebuild the whole image. That's interesting for the Bob use case where you could add an SSH public key to the command line, possibly. I don't know if the kernel will complain if you supply it with a parameter that it doesn't know, but once the image is booted, you can read from the kernel command line and you can extract the public key. And then yeah, if you don't need to change the image for that, you would have one single image for all bob builder images.
00:15:04.760 - 00:16:06.466, Speaker B: So that would be interesting. One way to approach it, but yeah, so that's how the image looks like. And how do you configure it? So there's several ways and several points where you configure stuff. You start off initially in the conf local. So that's your local configuration file, and there's several things you can configure. Like for example, here's a go ethereum version, you could configure that, but, so there's lots of stuff like which machine do you want to build for SAvSMP or TDX, which distro. There's, normally there's the QeMu distro, but for us it's the confidential VM distro of course, and it goes on.
00:16:06.466 - 00:16:54.640, Speaker B: So these are custom configurations, but the rest you see here is pretty much standard and can go and read through and try to understand what each configuration does. So that's the local one. Yeah, but I think maybe it's better to show you to solve one problem and then you can see what different configurations are touched and how that fits together. I think it's better if I, if I do this, then I'm just explaining different configuration files because you won't remember anyways afterwards.
00:16:58.510 - 00:16:59.690, Speaker C: Yeah, I agree.
00:17:08.030 - 00:17:51.050, Speaker B: Yeah. So once the image is built, you can start it locally on QEMU. Having a bit of trouble because I can't see what I'm typing. Can I minimize this one? Okay, this is the issue we faced during the hackathon, the other one in Spain. But we can just skip this for now. We need to figure out what's, what's causing this. It actually has the bootloader.
00:17:51.050 - 00:18:32.754, Speaker B: So if we exit the fe shell, go into the boot manager and boot the QEMu hard disk, it will continue. This doesn't happen if you run it on Azure. So this is just a local issue, which I'm just fine to just skip it? Skip fixing it for now. Then you're at the boot prompt. You can log in as root and you can play around with it. But there is still networking missing. And basically the reason for that is gimu wants to configure the networking via kernel command line.
00:18:32.754 - 00:19:12.680, Speaker B: But because we've passed in the whole image rather than just the kernel and the boot image. Sorry, the inner ram disk, it can't do that. So it's expecting a static ip address, but the image itself doesn't know which one. So you just have to manually configure the whole thing. I just wrote the small script and it works right away. So if we ping Google, we have never connection. Yeah.
00:19:12.680 - 00:19:55.934, Speaker B: Okay, so now we're, so now we started the TDX VM locally. It's not within the cloud. We can discover this part as well, like pushing it to the cloud and starting it there. But I would love to do development instead. Yeah. Another part like reproducible builds. We want to check the PCR values of the TPM, like whether they are the same as the image that we're compiling.
00:19:55.934 - 00:20:50.536, Speaker B: And that's also important for reproducible builds. Like is the kernel the same, is the inner drum disk the same? And the whole package together. And there's some scripts located here. Sorry. They basically give you the measurements for the PCR. Twelve, four and nine. I can't remember exactly which ones they are, but I think it's command line kernel Andromedesk or something like that.
00:20:50.536 - 00:20:57.770, Speaker B: Well, we can figure this out. So that's pretty much the intro. Do you have any questions?
00:21:03.510 - 00:21:25.850, Speaker C: Can we. Yeah, I just pasted the flags for chemo to avoid configuring the network statically. Can you maybe try to supply this? Does it work for me locally?
00:21:32.470 - 00:21:36.290, Speaker B: Sorry, I didn't get this one. Can you, can you explain what you did? Exactly.
00:21:37.230 - 00:21:48.130, Speaker C: So these are the flags that you can pass to Kimo command because you probably don't pass any network related commands.
00:21:49.870 - 00:22:14.000, Speaker B: There's, there's network related commands that are being passed. There's a whole tap interface that's been created, but it's configured static. It doesn't have DHCP server as part of the configuration and that's why you need to give it a static ip address. It's pretty much the whole thing. Getting networking running within the VM.
00:22:15.660 - 00:22:35.920, Speaker C: Yeah, but with the flags that I provided I was able to, well, basically chemo it seems, spins up a DHCP server so it auto configures the network. That's just a minor kind of comment.
00:22:36.470 - 00:22:44.334, Speaker B: Is that did you pass that as part of the run chemo or did you pass, did you have a different one?
00:22:44.502 - 00:23:00.450, Speaker C: I have, I just run it directly with Kimo system binary. I don't use run chemo, but I have been using this for my build root builds, not yokto, but I think they are configured similarly because it should be default configuration.
00:23:01.830 - 00:23:03.330, Speaker B: Okay, let's try this.
00:23:03.890 - 00:23:25.710, Speaker C: Because run chemo is a wrapper script, right? So you maybe can just add it to the script. No, I think there's.
00:23:36.180 - 00:23:54.820, Speaker A: Regarding this start issue that we are getting with run kuimu, I think there was also like a flag that you can set with run Kyimo where you can provide the path to the feboot on the start. So you don't have to do this manually every time, right? Or am I missed?
00:23:56.230 - 00:25:29.980, Speaker C: Regarding the Efi boot, I think the issue here is that to run an UEFI compatible image, you have to have the UEFI subsystem instead of bios. Yes, it is provided as part of the separate image and it supports provisioning so called EFi variables. So these EFi variables are the ones that control the boot process and select the boot device, et cetera, et cetera. So you should be able either to provision this EFI variables directly through a command line, which I don't know how to do exactly. Or I was able to do this without a separate EFi bootloader, but instead using so called Efi stub, which is a feature of a Linux kernel. So it pretends to be UEFi loader and you don't need to do any specific disk layout, etcetera. It just works.
00:25:29.980 - 00:26:12.350, Speaker C: I'm not sure about, not sure about the internals, but it places itself on the boot partition and you don't need to configure any, any variables. So I think it just somehow uses the default ones. Again, it was the case for build root, but maybe not the case with Yokto. So basically it fixed our issue with Yocto. I need, I think we just need to provide provision UEFI variables to explicitly say where the bootloader is.
00:26:16.330 - 00:26:34.360, Speaker B: It did work at some point, right? I mean the first time we started it and when I was using it last year, I never had these issues, but I think this just is. So we're sorry, we're talking about the fact that when we boot it up, it doesn't find a boot, the right boot parameters, is that correct?
00:26:37.860 - 00:27:35.120, Speaker C: Not the boot parameters, but specifically the EFI variables that needs to be supplied to a bootloader. So it's the one, it's the variables that the UEFI image baked, usually baked into the motherboard, which you configure through the UEFi bios. It is these particular variables that motherboard supplies to a bootloader in the very, very initial boot stage. So because we don't have, because we are virtualizing and we don't have a hardware, if I chip on the motherboard, we need to supply these variables ourselves manually to a chemo command.
00:27:35.620 - 00:27:44.460, Speaker B: Yeah, I think, I mean this is, I don't know, takes like 2 seconds to skip all the stuff. So I think it's fine to skip it for now. It's not.
00:27:44.500 - 00:27:46.320, Speaker C: Yeah, it's totally fine for now.
00:27:48.140 - 00:28:00.650, Speaker B: But yeah. So your commands actually did work. So where did I begin? It did add another ETH network device.
00:28:02.870 - 00:28:10.878, Speaker C: Yeah, because there are probably two now, one in the run chemo wrapper script itself. And then we added another one.
00:28:11.014 - 00:28:53.168, Speaker B: Exactly. And so I did have to do a small change in this file because, so I changed these two lines, but this one we don't need. And this one is, they have a backslash here. And I don't know why the script fails here and I don't know why it's having a backslash here. Maybe we should just provide a patch that removes this one. But it looks like some kind of configuration because it's also here. So I changed, I took away this, restarted the script and then I have an IP address here and I can ping outside.
00:28:53.168 - 00:29:22.550, Speaker B: And DNS resolving is also working. So I'm going to add that as another way of doing it. Okay, so what do you, what do you want to start with?
00:29:28.690 - 00:29:29.738, Speaker C: Yeah, go ahead.
00:29:29.914 - 00:29:32.790, Speaker A: Sorry. No, I didn't want to interrupt you start.
00:29:34.820 - 00:30:16.450, Speaker C: I think one kind of common use case that we are going to face with is how do we install packages into the image. So it's a base image, but we probably want some I don't know, ssh client there or SSH server or wireguard server or basically any other third party binary that we want to add to the image. We probably need to make it as part of the base image.
00:30:19.350 - 00:30:38.720, Speaker B: The pokey distro itself already provides a few stuff things, and all of that is going to be saved within the inner drum disk because we don't have a disk itself, we just have, we were booting from in a drum and that's it. We're not going to mount a disk. So, and that's the place where you want to configure yourself.
00:30:47.620 - 00:31:27.560, Speaker A: So if I understood you correctly, it's adding, it's adding the third party binaries directly in the initrum and not in the disk image of the image itself. Or how has it been done? Because I was trying with the TDX canonical VM last Friday, sorry, last Wednesday on a way how to add it. Like for example add binaries inside the image, inside the initram. And it's not so straightforward compared to injecting it inside the disk image itself and then execute it through systemd files or manually or whatever. So how has it been done here?
00:31:27.900 - 00:32:16.574, Speaker B: Yeah, here basically you build your, you built all the applications you want to have inside and then you put inside. So that's how you do it here? Yeah, that's where inside of the inner drum disk there's two, so Yocto has two different stages. It's built the inner drum disk and then it's going to build the whole disk like the SDA you remember from the boot partitioning. There was one partition SDA, which was a placeholder. Usually there you put your whole built image, which is then you put the inner disk and then you mount the actual image. And I think then you discard the inner drum disk. But here we just boot into inner disk and we don't have the whole image.
00:32:16.574 - 00:32:56.270, Speaker B: But I, Yocto still wants to build it because it's used to not only having intruded. So I'm saying this because there's another file where you can actually configure the disk image and it's applications and dependencies. But this file here is the one that configures the ram disk and its dependencies. Here we need to add it. If you want to have curlae we added here. If we want to have Ssh, we add drop beer and all the other things like flower was the binary that we had.
00:32:59.490 - 00:33:00.470, Speaker A: Interesting.
00:33:01.050 - 00:33:11.180, Speaker C: By the way, isn't initrumfs a thing that loads before the kernel and then passes the control to kernel?
00:33:13.600 - 00:33:19.260, Speaker B: No, I don't think so. I think you start the kernel and the kernel will populate in a drama fest.
00:33:21.640 - 00:33:56.242, Speaker C: Because my impression was that initial is a thing that is a kind of helper for the kernel because you don't want to always include all the modules and all the device handling inside the kernel itself. So any drama fest just facilitates the, let's say you are loading from a raid array and any trmfs just facilitates the communication between the device itself.
00:33:56.426 - 00:34:45.794, Speaker B: I think the best example you have here is disk encryption. You want to, you, you want to start your os and you don't want to give it immediately access to the whole disk because it's encrypted, but you need to provide some kind of binaries so you can have the decryption mechanism and stuff like that. And this is then part of the ram disk and it will decrypt the rootfs and then mount it and then discard the inner drum disk. That's the idea. But you start with a kernel, you boot the kernel and at least that's my understanding. But yeah, there might be some funky binary that first populates the inner disk and then starts to kernel on top of that. I don't know, but it doesn't make any difference.
00:34:45.794 - 00:34:46.430, Speaker B: Right.
00:34:48.730 - 00:35:30.650, Speaker A: I have a suggestion. Could we, maybe it's not, but should we make like for example, just, just to show it an example of hello word, for example binary where we want it to be directly embedded inside the nhramfs, for example the startup and execute it. How would that process would look like? Imagine having a binary given by a third party and you want to run it embedded here. So what's the step should be done and that would be a great intro. Like, all right, you have this binary and what steps. Now what should I do? I want to embed it and execute the VM or create an image.
00:35:31.590 - 00:36:07.256, Speaker B: That's basically the steps you would do if you want to have ref or the r builder inside. Exactly. There's different ways. Ideally at some point we will definitely build Reth and the R builder as part of the Yocto build process. But currently we're experiencing issues with some external c dependencies and it's just not building straight out of the box. So we can just add a binary and we've done that as part of the Spain Oslac hackathon. Hackathon.
00:36:07.256 - 00:36:27.010, Speaker B: So it's an easy task. We can just copy the flower directory and change some stuff. So this is easy. We can do that. Yeah. Do you still have the ref binary that's built without external dependencies.
00:36:28.270 - 00:36:36.990, Speaker A: I can do it quickly, it's just a simple, I don't have it now on my hand, but I can build it for you and send it to you if you want.
00:36:37.150 - 00:36:53.840, Speaker B: Yeah, you could send it into the, into the server and then we can take it from there. Is everyone okay if we do this as a first example, I think it fits well. Gives you a feeling like you understand something.
00:36:56.420 - 00:37:00.520, Speaker A: Can you give me which server you want to be on so I can build it directly there?
00:37:00.900 - 00:37:06.214, Speaker B: That's the, it's this one.
00:37:06.382 - 00:37:10.886, Speaker A: Is it the DX zero that we are running now on the arbiter or which one?
00:37:11.038 - 00:37:15.610, Speaker B: No, it's this one here. It's the old server hosted on.
00:37:16.310 - 00:37:24.050, Speaker A: This is the Grameen dev that I was. Okay, this is where we were experimenting. Grameen and Holiski, if I'm not wrong.
00:37:25.950 - 00:37:27.410, Speaker B: Yeah, I think so. Yeah.
00:37:28.150 - 00:37:34.870, Speaker A: Yes, I'm on it. All right, I'm gonna, I'm gonna pull rest and unbuild it for you there.
00:37:39.010 - 00:38:47.670, Speaker B: I'm going to take this step to explain a bit more. There's different layers in iocto and layers start with meta and then whatever is containing that layer. In this example we have the meta confidential compute layer which includes all the configuration necessary to build a confidential VM disk image. And there's another custom layer which is meta EVM which contains all the configuration to build stuff like EVM nodes and which is specifically for Ethereum or Ethereum builders and stuff like that. So we're going to change that into this directory and into recipe nodes, which contains all the recipes for stuff that we want to build. There's already a rest project, but this one doesn't work. So we're just going to copy the flower plot project to.
00:38:47.670 - 00:39:26.970, Speaker B: And this will be the folder where we configure, just uploading, just adding the rest binary which we have built reproducibility via some other build mechanism. And then we're just going to add the binary here. We don't need adjacent stuff, we don't need the flower binary. And this is going to be named Prev.
00:39:27.950 - 00:40:01.070, Speaker A: So if I understood you correctly here, you have to put inside this folder meta evm or recipe nodes. You create another folder with the binaries that you want to include, which includes the binary plus this manifest like file like the bb. And do we know how this like bb look like and how to configure it? Like, does it like. Okay, is it like a sandbox where you write what services you need to expose for this binary or what does it explain to you?
00:40:01.150 - 00:40:48.382, Speaker B: Wbb stands for bitbake. It's a bitbake recipe. And bitbake is just basically a tool with which you can build applications. It's mostly used in the embedded Linux ecosystem, which is also why it's used in Yocto. And it's huge and large and I would have to explain a lot of stuff and I don't know a lot of stuff, but for now we can just look at this file and it will tell us exactly what we need. So I'll give you an example. So there's the license parameter which is for us right now just closed, because that's the easiest way to configure it.
00:40:48.382 - 00:41:47.950, Speaker B: If we have to configure the license as well. It's going to take some time. So we're just going to leave the closed file extra paths. From the top of my head I don't, I think it's a, regarding these, so there's some source Uri and for this one we want to have, instead of the flower binary, we want to have the rest binary. These are the three files we don't need. I don't think we need this one, we're just going to leave it and then there's an install script which installs the binary into what is bind here. Well it's been a long time, I don't know exactly what it does, but I think it places the rest binary into the user bin or something like that.
00:41:47.950 - 00:43:09.100, Speaker B: And then we need to skip some stuff because usually it expects like the output, the binary, it expects a debugger binary which hasn't been stripped and during the build process it will do all this stuff. But because you're already supplying us with one, we're just going to skip these steps and yeah, I think that's pretty much, I can't read the upper one. I think that's just a description. Is that sufficient for you to understand what it does? So you have to give it some source which for us it's just the, it's just the binary itself, we don't have any sort and you have to do you have to install it in some way usually. Like if you look at other examples I can give you one for go ethereum. This one just includes a include file. So let's have a look at the include file.
00:43:09.100 - 00:43:50.640, Speaker B: Sorry. Yeah, so imagine this is the bitbake file, the BB file, so you have a description homepage license. This is the actual how it would look in the end define the license, you define the license checksums and then you inherit some stuff. Like for this example, you inherit go mod, which gives you all the things that you need to build go binaries. You want to install the geth command. I don't know what this one does. You give it some linker flags.
00:43:50.640 - 00:44:39.976, Speaker B: You need to define some stuff for reproducible builds, and rdpens are basically stuff that, so that's reverse depends. Like these are any dependencies that you need during the build process. And for some reason it needs bash for the build processes. And the do compile during network means that you want to have networking enabled during compiling, which by default is not enabled with bitbake. But because go is special and you need to download your dependencies during the compile time it's enabled. So that's another way of doing a bit back file. There's the rust version, that's different.
00:44:40.128 - 00:44:44.380, Speaker A: Yeah, this is not the bb file, this is ink.
00:44:46.720 - 00:45:24.850, Speaker B: But that's just because Inc is like a generic file that I'm, you see here, there's different bb files. Like for the def version of Go, Ethereum, and then for the builder version, and then for the def version of the builder. So in each, all, in all of them, I'm including the ink file. Okay. And then I'm defining some special stuff. Like, okay, I'm giving you a different example because that's. So let's look at the builder.
00:45:24.850 - 00:45:51.620, Speaker B: So let's look at this one here. I'm changing some stuff. Like I'm changing the source Uri, I'm giving it some patches and stuff like that. But it starts with somewhere. It would need to include the ink file, but I can't see it because is it somewhere on top? Because I can't see the first two lines.
00:45:52.240 - 00:46:11.384, Speaker A: The first two lines are goinstall and go import. Goinstall is a repo of the geth and the import is GitHub flashbot builder, which is the flashbots G builder. We also didn't see these two lines. Interesting.
00:46:11.512 - 00:46:17.630, Speaker B: So it includes this one. Okay, yeah, I see.
00:46:18.210 - 00:46:20.666, Speaker A: So it's kind of importing another file inside of it.
00:46:20.698 - 00:46:21.550, Speaker B: Okay, cool.
00:46:21.890 - 00:46:44.196, Speaker A: I see. I noticed that your src Uris, you have to specify each file separately. Is there a way where you can do it recursively? Like you provide a directory and it takes everything in it just for the sake of like if you have a huge configuration that you have to add, do you have to add them manually, one by one?
00:46:44.308 - 00:46:46.836, Speaker B: I tried to use wild cards, it didn't work.
00:46:47.028 - 00:46:59.240, Speaker A: Okay, never mind. Anyway, for the sake of time, I pulled the repository. I had to fix something, but now it's built. I will move the binary now to the home directory. You should be able to see it shortly.
00:47:00.500 - 00:47:02.600, Speaker B: So you're going to move it here.
00:47:03.220 - 00:47:05.556, Speaker A: I'll move it under home directory, just.
00:47:05.588 - 00:47:08.400, Speaker B: Right, you can move it right into here if you want to.
00:47:09.700 - 00:47:17.612, Speaker A: Okay, let me see if it's there. Let me move it to that path that you tell me.
00:47:17.716 - 00:47:25.280, Speaker C: Frieder, Frieder, can you try to move this zoom over low?
00:47:26.100 - 00:47:28.780, Speaker B: Okay, I'm going to try it now because it's really annoying.
00:47:28.900 - 00:47:34.880, Speaker C: Can I just, you just can point at it and it should be, you should be able to move.
00:47:38.290 - 00:48:00.390, Speaker A: Okay, shit, sorry, I moved it wrong and now I will remove something. I sent a folder to do something shortly. All right, so you can check now.
00:48:01.950 - 00:48:04.410, Speaker B: Okay, so this one should just execute.
00:48:05.750 - 00:48:14.250, Speaker A: That should we can do ldd and see if it's even statically built. You can check beforehand.
00:48:15.710 - 00:48:21.490, Speaker B: Yeah great. Okay, so it's rest now I think I configured it.
00:48:23.870 - 00:48:27.770, Speaker A: Yes. I named it like this because it will conflict with the name of the folder.
00:48:34.170 - 00:49:03.450, Speaker B: Okay, so if everything is configured correctly. Oh sorry. Wow. So I can hide the meeting controls, but if I press escape which I need for Vim, it's appearing again and then I can change the first sentence which I wanted to do. Okay, let's just leave it as that.
00:49:04.910 - 00:49:06.290, Speaker A: You can use nano.
00:49:08.670 - 00:50:02.390, Speaker B: Yeah, maybe I can move it. Okay. I can't move it. All right, so if we bit back red bin, this should actually work. But let's see, nothing provides ref bin. Maybe we need to add it at some point, at some stage in the layer directory.
00:50:12.140 - 00:50:24.164, Speaker A: Could it be that the binary should be the same name as the service that you named it, the restbin or like because the guests.
00:50:24.212 - 00:50:34.364, Speaker B: Oh, I see, yeah. Okay. It doesn't. Okay. Because, yeah, I actually need to name the bitbacking file. Okay.
00:50:34.532 - 00:50:37.170, Speaker A: Yes, it.
00:51:08.080 - 00:52:39.550, Speaker B: Okay, looks better. Okay, so now we can build it. Now it's somewhere like as a package and now we need to add it to the EDrAm file, if you remember this one. So now we're building the, the image, the VM image. And once that's done we can, well hopefully that's done and then we can, we can start QMU and then we can check whether ref is actually starting or not. And as a next step we could also add rbuilder mo. Do you think you can provide us with an R builder?
00:52:39.710 - 00:52:50.000, Speaker A: Yes, let me fetch that. Let me fetch that and send it to you to the same. Oh, can you create folder for that? For the R builder bin I so I can send it to there as well.
00:53:10.380 - 00:53:18.750, Speaker B: The inner gram of this size has been too large. Let's see if we can just throw stuff out. I think we can.
00:53:22.010 - 00:53:27.150, Speaker C: We'll need this one and just increase the max size.
00:53:27.650 - 00:53:28.470, Speaker B: Yeah.
00:53:50.380 - 00:54:04.642, Speaker A: Yeah. I need to create a GitHub authentication token because it's private, it might take some time.
00:54:04.796 - 00:54:28.250, Speaker B: No, you don't need to do that. There's a way where you can add your ssh key to your ssh. I mean you're authenticating to GitHub with the ssh key and you can add that to your remote ssh session. Then you don't need to have the private GitHub token.
00:54:28.550 - 00:54:59.060, Speaker A: I think I already did this, but it still asked me for that. Let me try again then. Maybe I misclicked something. Let me check. Yeah, permission denied. For some reason my public key is not allowed. Maybe because I have many ssh keys and I'm working on the work laptop.
00:54:59.060 - 00:55:10.550, Speaker A: Anyway, I'll do it quickly. No worries. Or maybe you can pull it for me and then I can do the building if it's faster. If you're already set up for that.
00:55:10.630 - 00:55:12.090, Speaker B: Okay, let me try that.
00:55:13.630 - 00:55:16.930, Speaker A: If not, it's no problem. Generating a token is not hard.
00:55:34.080 - 00:55:35.740, Speaker B: Is it? Arbuilder.
00:55:36.440 - 00:55:37.660, Speaker A: Arbuilder, private.
00:55:40.280 - 00:55:41.660, Speaker B: Arbuilder and then private.
00:55:43.040 - 00:55:44.940, Speaker A: You are saying the repo, right?
00:55:45.280 - 00:55:48.620, Speaker B: Yeah. What was the repo's name? Do you know?
00:55:48.960 - 00:55:50.660, Speaker A: Arbuilder private?
00:55:59.550 - 00:56:01.330, Speaker B: I don't have access to this one.
00:56:01.790 - 00:56:38.780, Speaker A: Okay, I will. I created another token. No worries. I just renewed my token and I'll use it instead. Yeah, I pulled it. Let me build it quickly. And it's building.
00:57:02.690 - 00:57:45.890, Speaker B: Okay, so let's switch back to this tab. It built successfully so we can run Kimu and see if we can start with. No, there's an issue. 1 second. You see the error? I don't see the error.
00:57:46.910 - 00:57:51.486, Speaker A: Warning. Couldn't run bit bake minus Erville.
00:57:51.598 - 00:57:53.210, Speaker B: Okay, I need. Oh.
00:58:02.520 - 00:58:12.980, Speaker A: Can you somehow exclude our builder for now for the bitbake command? Or why is it taking the RBU and we didn't bake our builder in it yet.
00:58:14.360 - 00:58:27.230, Speaker B: It was just parsing for that binary because it just looked through all the configuration files and I didn't find it and that's why I threw an error. I just touched the file that fixed the problem.
00:58:28.410 - 00:58:29.190, Speaker A: Cool.
00:58:31.650 - 00:58:35.390, Speaker B: Okay, so.
00:58:37.170 - 00:58:56.420, Speaker A: Awesome. So I assume can you write which rest like the which command and rest I want to see where are they being installed. The binaries that you are picking in them inside. Like which, which are where? Yeah, I, maybe we're same. Yeah. So they are being installed under user bin. Interesting.
00:58:58.840 - 00:59:01.380, Speaker B: Yeah that's just, that's probably just some.
00:59:05.880 - 00:59:10.580, Speaker A: It'S this um, that the bin directory.
00:59:13.920 - 00:59:17.936, Speaker B: Bindar is probably bin and d is user.
00:59:18.088 - 00:59:19.380, Speaker A: The user. Yeah.
00:59:20.120 - 00:59:39.860, Speaker B: And if you want to know exactly why that is the case, there is this interesting trick. You can just check out the single page Yahtzee documentation. So that's a single page. So you can control f. And then let's just.
00:59:42.250 - 00:59:43.030, Speaker A: Cool.
00:59:45.130 - 00:59:48.746, Speaker B: Maybe I can find some explanation for.
00:59:48.858 - 01:00:07.350, Speaker A: The, okay, can you tell me again where do you find this? I mean the single page.
01:00:10.180 - 01:00:56.494, Speaker B: Do you all have the TDX hackathon? I'm going to share it. And there you would go to this intro yocto TDX Vm like finding your way around the Yocto TDX project and then. Sorry no it's not here, it's in reference. It's below that single page Yakto documentation. It's this one.
01:00:56.662 - 01:00:57.730, Speaker A: Cool, thanks.
01:00:58.600 - 01:01:07.384, Speaker B: But yeah. From, I can't find one right now. It's, yeah, I mean we know, you kind of know you should be able.
01:01:07.432 - 01:01:16.020, Speaker A: Now to see the binary where you are now on your binary, your terminal.
01:01:17.120 - 01:01:18.140, Speaker B: It's still.
01:01:22.120 - 01:01:22.456, Speaker A: There.
01:01:22.488 - 01:01:25.890, Speaker B: It is arbuilder, right?
01:01:26.270 - 01:01:31.730, Speaker A: It is, it should be. Did I copy the wrong one?
01:01:33.190 - 01:01:35.530, Speaker B: Maybe it's because I touched the file before.
01:01:39.590 - 01:01:44.890, Speaker A: Can you check? Yeah, exactly. Yeah.
01:01:45.510 - 01:01:47.410, Speaker B: Okay cool, cool.
01:02:16.570 - 01:02:27.750, Speaker A: So you have to run bitbake for each binary yet you create here under the recipes and then you run the bitbake again for the CVM image to create the whole image with all those.
01:02:29.090 - 01:03:04.600, Speaker B: No, that, that was an unnecessary step. I just did it to verify that this works. But if, if you provide this as part of the, if you provide it as part of the initromfs dependencies then it will automatically build it because it's a dependency. So we can add it here.
01:03:10.030 - 01:03:16.678, Speaker A: Ah, so it builds it directly so we don't need to build it. What you just did. Big R builder bin.
01:03:16.814 - 01:03:20.370, Speaker B: Yeah, I see. Interesting about the helmet.
01:03:21.430 - 01:03:37.804, Speaker A: Yeah. Does this create here in the output the measurement of the final image or. No, this is a separate thing.
01:03:37.932 - 01:03:46.196, Speaker B: No, but we could add it, we could add a script that outputs the measurement as part of the build process, which would be really nice.
01:03:46.388 - 01:03:46.740, Speaker A: Yes.
01:03:46.780 - 01:03:53.348, Speaker B: Or at least create a file that contains the measurements. I think that would be even better.
01:03:53.524 - 01:04:12.620, Speaker A: Yeah. This is an interesting point because for TD export, what I understood now from the whole documentations are you need to, to boot it first in order to fetch the measurement of that image. However I've seen.
01:04:13.280 - 01:04:16.260, Speaker B: Is that the case, do you actually need to boot it to fetch?
01:04:17.840 - 01:05:16.530, Speaker A: If I understood correctly from the TDX canonical GitHub repository, yes, you need to do the, you need to boot it and run the scripts there in order to fetch the measurement. But I have seen scripts, for example for the AMDS EVSNP, where you can fetch the measurement without booting damage. So I don't know, how does it work? Maybe it relies on the TDX module or I mean the TD module, that's why you need to boot it. But I'm not sure. So there should be a way where you can simulate that and create the measurement without booting. But yeah, it's just a thing that I want to explore and see if we can do this because it would be great to do it without booting because to make a reproducible build where others can reproduce it themselves, see the measurement and then compare it with a deployed one, they should be able also to create the measurement. Right.
01:05:16.530 - 01:05:25.052, Speaker A: So we don't assume that everyone has a TDX machine there to be able to run and create the measurement.
01:05:25.236 - 01:06:43.000, Speaker B: I mean, there's another thing I wanted to show you. So this is the cctest, right? So that could actually be a TDX vm. And then where did I store this? 1 second. And then here you have a check TDX guest shell script that's checking for things you would need to check if you, if you want to be sure that you're running in a guest. Yes, all of these, if I run them on Azure, on the Azure TDX machine, they just, I mean, do you know what the CCel tables are?
01:06:44.180 - 01:06:49.360, Speaker A: Ccel tables, I don't know what they stand for.
01:06:53.460 - 01:07:26.638, Speaker B: I figured this out because I wanted to like this devtDX get is the one that you're using to get your, the TDX report. Yes, I think this is, and it's not there now if I run this image without, I think if I run this image without TDX support, it doesn't work on Azure, but for some reason they just removed all of the stuff. So I mean, maybe it's just because it's a public preview, but there's still a lot of stuff missing.
01:07:26.814 - 01:07:36.522, Speaker A: Yes. Can you go up in this directory that you opened? I think the CDX tools in general, this repo is decommissioned from their side. If you go to the main.
01:07:36.586 - 01:07:57.070, Speaker B: It's decommissioned. It's decommissioned. But I'm looking at the TDX one 1.5 branch, which is not the default one. And I thought because they have been working on this three months ago. So they decommissioned it. Yes, but there is still some very interesting stuff, so we recommend having a look at it.
01:07:58.250 - 01:08:00.790, Speaker C: And it's not available even with Sudo.
01:08:01.850 - 01:08:08.470, Speaker B: No, you can also, a funny thing is you can also mudprop to the X guest.
01:08:09.570 - 01:08:12.310, Speaker A: So it exists somehow it exists.
01:08:12.970 - 01:08:27.220, Speaker B: It's not even a module. I think it's part of the kernel itself. Yeah, it's just not, I mean if I look, I searched for TDX guest as a model but I couldn't find it. So yeah.
01:08:27.920 - 01:08:28.900, Speaker A: Interesting.
01:08:30.400 - 01:08:31.300, Speaker B: Okay.
01:08:31.800 - 01:08:50.040, Speaker A: But yeah, if you open to the X Canonical GitHub repository, you would see there, there are other scripts that you can do talk and get attestation measurement from within TDX VM.
01:08:50.160 - 01:08:51.380, Speaker B: Did you try these?
01:08:51.970 - 01:09:13.710, Speaker A: Not yet, but I think Andrew did and he was able to. This is set up? Guess. Yes. So this is how to set it up. And then there's another folder there which is called attestation outside and it's responsible for setting up the attestation for the guest and then calling it.
01:09:19.820 - 01:09:25.240, Speaker B: Okay, so it's checking for an MSR. Let's try this one.
01:09:33.060 - 01:10:05.449, Speaker A: I think set e is just to take the environments variable. Now you'd be able pseudo. Yeah.
01:10:06.589 - 01:10:08.449, Speaker B: Zero production.
01:10:09.280 - 01:10:12.180, Speaker A: If it's zero, then it's production, which is correct.
01:10:12.720 - 01:10:22.740, Speaker B: Yeah. Okay. I'm still not super convinced.
01:10:26.760 - 01:10:28.160, Speaker C: What does it mean exactly?
01:10:28.280 - 01:10:33.582, Speaker B: Production, I mean it's a production TDX VM I guess, but yeah.
01:10:33.736 - 01:10:43.910, Speaker A: Oh yeah, it's, you can compare to, if I, if I assume correctly, you can compare to simulation and non simulation mode in the GX.
01:10:44.450 - 01:10:56.590, Speaker B: Yeah, we probably, we would need to go into the TDX documentation. Documentation and check out the msrs. And if this aligns then yeah, I would start to be convinced.
01:10:57.690 - 01:11:07.250, Speaker A: Yeah. But yeah, this is not the measurement. So the measurement part. Yeah. I still need to look into this or maybe Andrew, if he joins later, he can shed some lights.
01:11:07.630 - 01:11:24.930, Speaker B: Yeah, that's true. Okay, so let's go back here. It compiled successfully, we can start it again and I don't know if that makes sense, but we can just check if our builder works as well.
01:11:28.960 - 01:11:33.180, Speaker A: I think eight gigs is not enough eventually, but. Yeah, let's see.
01:11:35.040 - 01:11:39.340, Speaker B: Yeah. Do you want to actually sync it?
01:11:39.800 - 01:12:00.520, Speaker A: Yeah, of course not. This is the next question here. So imagine now we are running them and let them sync together. Now here is the arbiter going to sync the whole stuff inside the ram or is it, is there anything mounted as a disk there. Like how does it look in Yocto at this point?
01:12:03.620 - 01:12:33.880, Speaker B: This is only run, so that's, it's configured to take half of the memory available. We have a lot of memory available on this machine, so we can actually run it all in ram. But there is, let's see. Yeah, SDA is available, but it's, it's, it's only, um. It's very small.
01:12:34.820 - 01:12:41.360, Speaker A: Interesting. Ls maybe you can run ls minus la or.
01:12:42.060 - 01:12:53.316, Speaker B: Yeah, it's small. It's very small. We can increase that, but maybe we can ask um, QMu to add, to add another disk.
01:12:53.508 - 01:13:04.400, Speaker A: Okay, so I see, like you have three directories with 3.9 gigs, but you just started the machine with eight gigs. Is there something here wrong or is this somehow they're sharing?
01:13:05.260 - 01:13:30.280, Speaker B: So I started the machine with 8gb of memory and ram disk. If you just mount a ram disk, by default, it will provide the half of the amount of memory as. Yeah, so that's, that's basically what you're seeing. Whenever something is mounted, it's just being provided half the amount of memory.
01:13:33.300 - 01:13:38.920, Speaker A: But the sum of all of them together is much more than the eight. That's what I meant, I meant. So how to interpret this?
01:13:40.820 - 01:13:47.396, Speaker B: My guess is if you put, if you fill all of them, you will crash at some point.
01:13:47.428 - 01:13:48.920, Speaker A: Okay, I see.
01:13:49.900 - 01:13:53.560, Speaker B: All right, probably not crash, but you can write, you can continue writing.
01:13:53.940 - 01:14:10.590, Speaker A: Yeah. And the mounting stuff of the disk and so on is not a bit big issue. It's a QMO command. Right. Like if you want to mount a hard disk at the startup of the image, or is it something in a bit biggest that you can include and be part of the attestation as well?
01:14:11.090 - 01:14:26.710, Speaker B: Well, there's this SDA placeholder which is part of the image itself. And I don't know if you can, you can write to this, it will change the image. We can try that. Let's try it.
01:14:36.300 - 01:14:44.760, Speaker A: But you have to do it from within. Like can't you do it in the bitbake manifest file that you are creating the image with?
01:14:45.100 - 01:15:07.062, Speaker B: Yeah, you could, but it doesn't make any sense because you want to increase the size eventually. At this point it's very small, but if you boot azure vm and give it a disk of, I don't know, two terabytes or something like that, at that point you could increase the size of SDA and the size of the second partition.
01:15:07.246 - 01:15:15.690, Speaker A: Yeah, I see. So you kind of provide a cloud init file where you can do this dynamically. This dynamic configuration after boot, right?
01:15:18.470 - 01:15:24.450, Speaker B: Yeah, I think. I'm not sure if I understood your question correctly, but I think so.
01:15:25.880 - 01:15:37.408, Speaker A: So if I understood correctly, you can provide cloud init within your image. So upon booting your image it does some kind of dynamic configuration for your image after booting. Yeah, I'm not sure.
01:15:37.544 - 01:15:49.608, Speaker B: Yeah, I wouldn't provide cloud in it because it just opens a really big hole into your vm. But we can do it as part of a script, we can resize the whole thing.
01:15:49.784 - 01:16:05.524, Speaker A: Yes. This was my follow up question is how is this part like what's the cloud init is doing? Is it this dynamic configuration would be part of the attestation or probably not because it's been done afterwards. So I don't know like how, how.
01:16:05.572 - 01:16:21.560, Speaker B: We would, the configuration of the disk image is part of the attestation because the configuration will happen as part of a script which is inside of the TCB, the script is inside of the, and then you can attest that.
01:16:22.020 - 01:16:35.716, Speaker A: Yeah, but you are testing the script, you are not attesting what the script is installing afterwards. You are just attesting what the script is doing but not what the real installed one are not being attested like the version for example.
01:16:35.868 - 01:16:46.362, Speaker B: But why, what do you want to install with the script? It's a custom script that just mounts the partitions mounted and encrypt them.
01:16:46.516 - 01:17:23.350, Speaker A: You are correct. Yeah, I was thinking differently. I was using it in a different way. I'm not using Yocto, I was creating images through some scripting and I wanted to do through cloud init to do the installation of my binaries and so on. And then I found out that this is not the perfect way because attestation would be basically you're just attesting that this script is installing the binaries that you want and not really what the binaries verging are and so on. But yeah, you're correct. You would use it here only for making the disk and so on and probably the encryption disk encryption.
01:17:23.350 - 01:17:26.050, Speaker A: Maybe we should take, take a look at this.
01:17:29.670 - 01:18:15.218, Speaker C: I think what we should also consider is if we are doing anything dynamically on the startup or throughout the lifecycle of the VM, then, well specifically for installing the binaries, then we should also specify the checksum of every binary that we install. If it's a third party binary and we don't compile this directly, we just include all the checksums for all the binaries that we install, let's say during the boot process. So that just by looking at the provisioning script, one can tell what's going to be installed. Exactly.
01:18:15.394 - 01:18:52.850, Speaker B: Well you're going to do that anyway. If you're checking the ram disk, the hashtag of the Ram disk, you're going to check whatever is inside. We just need to provide a way to get to that same image and that's more like a configuration issue where you provide the whole configuration with one single command that will fetch all the different parts, compile them to an image. And if that matches up, you have the same code running.
01:18:53.550 - 01:19:40.892, Speaker A: Yes. And not to mention this process would be hard then for upgradability of the stuff like in case you want to upgrade your binary, that you just started your image or booted image, then it would be hard to do this in a testable way. Right. If I'm not wrong then, because then you would have to update also your dynamic configuration. And probably you need to reboot the image in order to make it detestable with the new upgraded version of the binaries. So maybe you should think about this. But yeah, I was more, more or less thinking about using this dynamic cloud init thingy in order to do the disk encryption and using the ceiling key of the TDX.
01:19:40.892 - 01:20:24.690, Speaker A: So basically that disk load init file, upon booting it will be fetching the TDX ceiling key from within the TDX enclave, like the TDX version machine, and then does the encryption disk encryption and also automating it in case the TDX machine gets rebooted by Azure as happened to us last weekend. Because yeah, suddenly the disk is not mounted anymore and for mounting it you would require the key again. So if we use the ceiling key of the TDEM reproducible to the module, then basically we can overcome this issue, I think, in my opinion. But yeah.
01:20:24.730 - 01:20:27.910, Speaker B: Does anyone have an idea how we can get to the ceiling key?
01:20:28.530 - 01:20:39.950, Speaker A: I think yeah, Andrew posted something in the channel. I haven't done this yet as well, but it's also on my agenda. But yeah, it just came.
01:20:40.810 - 01:20:43.880, Speaker C: What is linky exactly.
01:20:46.980 - 01:20:48.916, Speaker A: Frieder, do you want to take?
01:20:48.948 - 01:20:52.764, Speaker B: Please go ahead. Please go ahead. I'm going to create a ticket for this one.
01:20:52.932 - 01:22:26.794, Speaker A: So I haven't done it with the TDX yet. I know it in the GX world. So the ceiling key is the key that's part uh, let's say the way where the enclave would be able to um, to, to have like each enclave based on its setup and configuration, it has a unique ceiling key that it can use in order to seal data outside the enclave in a cryptographical way. So basically the, the untrusted side would not be able to inspect the data because they are encrypted with ceiling key. And the ceiling key is only in a quotation known to the enclave itself, because based on its measurement and the way that you configured your enclave, then this ceiling key is then generated upon booting the enclave. If you want to transfer now this knowledge to the TDX world, basically your reproducible TDX VM would generate, based on the way you configure that and its measurement, it can also generate a, known for it, a unique TDX seeding key that it can use potentially to do some encryption on untrusted side, which is the disk, because for the TDX, everything that is not in the memory is not considered trusted. So if you put some stuff on the disk, if your application is writing to the disk, then what's written on the disk should be encrypted.
01:22:26.794 - 01:23:07.890, Speaker A: And then you would, in this case, probably you can consider either generating key pairs from within your application, like RAm memory, or you can use the TDX ceiling key, which would be reproducible because since your image is always this measurement and you can make sure that the TDX ceiling key is identical each time you request it with the, and the GX world, you can request it with the e get key, I think instructions and yeah, I hope that, I hope I was able to explain it in an easy way.
01:23:08.710 - 01:23:22.672, Speaker C: Does it mean that if you rebuild the VM and the, does it mean that if you rebuild the VM, it will change the encryption key if you.
01:23:22.696 - 01:23:58.020, Speaker A: Rebuild the VM and modify it, so it has a different measurement? Yes, yes, yes. It think it would. Maybe here, Frieda can correct me if I'm wrong. However, ceiling, there are two types of ceiling. You can use the measurement, the key that is extracted from the measurement. And there is another way where you can use the key that extracts extracted from the mister signer. So the mister signer and enclave word, all the enclaves that are signed by the same signer or measurement signer could read and decrypt this data.
01:23:58.020 - 01:24:21.040, Speaker A: So yeah, either you use the, the unique one for each enclave, which basically based on their measurement, or you use based on the signer of those enclaves, which basically all these enclaves that are signed by the signer can decrypt the data and then the TDX, I'm not sure. So yeah, here Frieder is sharing a screen regarding the ceiling. Maybe they have here some description.
01:24:22.220 - 01:24:25.080, Speaker B: It's not super obvious at this moment.
01:24:25.500 - 01:24:39.360, Speaker A: The TDX model supports sign TD's and Clk's. So there they have also signed TD's and Cl keys. So I assume they have also the same two separation and TDG and measurement get key get. And.
01:24:42.460 - 01:24:59.404, Speaker C: But the point here is you don't need to supply any secret whatsoever to a VM image somehow, but it will still be able to use the encryption key based on the measurement.
01:24:59.572 - 01:25:32.270, Speaker A: Measurement, yes, exactly. This is the idea of it. So this key is not known to anyone besides the enclave itself or here in this case. In this scenario is TD VM itself. So it's not known. It cannot be leaked unless you explicitly try to leak it or you are getting attacked by some side channel attacks that was able to somehow circumvented. But this is different topic.
01:25:34.130 - 01:26:12.720, Speaker C: Okay. I mean, I think none of us at this point understand how exactly. Well I. I can understand how it would work for a single build. So you do the VM attestation, but then let's say you add another binary or you just change exact one bit of something inside the VM and then that station will be different. And now the. The key, the previous key, because we have to reuse the same key for decrypting the volume.
01:26:12.720 - 01:26:14.560, Speaker C: We are not going.
01:26:15.100 - 01:26:31.804, Speaker B: Yeah, at this point. At this point you're going to lose all your data. Which is fine because a software update means you have to discard your existing VM and you need to restart one. And that needs to sync again.
01:26:31.972 - 01:27:01.960, Speaker A: Yes. Or there is another process which is called DCV recovery and the key rotation mechanism if you want to somehow recover your data. But yeah, as Frieder mentioned, you should consider each time you update your binary for security reasons, you should consider. Yeah, do fresh start because otherwise. Yeah, but you would be exposing it to attacks or.
01:27:04.700 - 01:27:08.840, Speaker C: But then this encrypted volume, what do we need it exactly for?
01:27:09.180 - 01:27:25.150, Speaker A: So in this case you would need encrypted volume in case you have a state. For example, in this case, if you are working on an archive node where the state is. I think the last of my knowledge was 2.4 or 3.3 gigs terabytes.
01:27:25.270 - 01:27:27.974, Speaker C: No, no. The archive is now twelve terabytes or something.
01:27:28.022 - 01:27:50.812, Speaker A: Or twelve terabytes. All right, so let's go for 1212 terabytes. I don't think. Yeah. Starting TDX VM was twelve terabytes. Let's assume if that's feasible, twelve terabytes of ram. Putting all the states in memory is probably going to become an issue, like a scalability issue.
01:27:50.812 - 01:28:02.940, Speaker A: So you would put the state in disk, but we want also to keep the states the access to this case integrity and confidentiality protected. So in this case you would require to do an extra step, which is the disk encryption.
01:28:03.100 - 01:28:07.396, Speaker C: Why do we need the state encryption?
01:28:07.428 - 01:29:14.590, Speaker A: Because. Yes, because then if you don't do the encryption, you would be making it like the access on these and writing and reading on the state be accessible to the hypervisor or the OS or the admin. So the admin can see what you actually currently now writing into and reading from the whole time and can inspect what you are doing based on your access pattern and what you're doing inside there. Can basically infer, infer a lot of information from your current. So basically it can even if you have some proprietary algorithm that is accessing some data regularly, you don't want to show like this access and writing basically because you can infer your proprietary algorithm way of what is doing and do reverse engineering potentially and be able. I know it's a hard thing to do, but then you make it feasible if you don't do encryption and add ORM potentially in order to make it more secure or hardened for such attacks.
01:29:16.450 - 01:29:17.190, Speaker C: But.
01:29:23.370 - 01:29:37.190, Speaker A: Yeah, so yeah, just adding layers of security more or less just to make the life harder for the attackers that are trying to do some malicious or curious attacks.
01:29:39.450 - 01:29:56.744, Speaker C: But will it be too much of the exposure if we not encrypt the state disk and we don't try to anything to it. So only read.
01:29:56.912 - 01:30:36.694, Speaker A: Yeah, only read only. You can also conduct attacks such as basically access pattern. Each time you read the hypervisor can drop some pages from the memory tables and see each time you access it there is a page fault and can read which exact pages you are accessing regularly. And I from that gain some knowledge that they should not gain. But then you can consider OrM for that. So for read only you can consider different mechanisms to defend besides encryption. In this case probably encryption is not really necessary.
01:30:36.694 - 01:31:36.634, Speaker A: If you're confident, let's say it like this. If confidentiality here is not an issue for you and integrity is anyway it's only in read only state, so you cannot write. So you would require different protection mechanisms such as Oram to defend against access pattern attacks. So it's always way you have to study the requirements of your, of your application and see which scenario now is applicable for you. Like do you need confidentiality here? If yes, do encryption, do you need integrity because you don't want to let the hypervisor inject to your state stuff. Then you would also need your also encryption and probably mercury state checking inside and do you need protection against access pattern. You would require an Oram and different mechanisms against such access pattern attacks.
01:31:36.634 - 01:32:03.396, Speaker A: There are timing attacks that were then cache timing attacks that were mitigated through micro benchmarks from intel themselves and such as like. Yeah, there are many kind of types of attacks that site generous and this would require its own session. So I think that's. Yeah, that's not divert from that and sorry for taking the whole time.
01:32:03.468 - 01:32:05.900, Speaker C: No, no thank you. Thank you for the explanation.
01:32:06.060 - 01:32:20.900, Speaker B: We can like one way we could skip this is if we would patch breath to not keep a chain history and just keep the current state. And this one we can just keep in memory. Then we don't need any disk access.
01:32:24.320 - 01:32:27.820, Speaker C: Can we just make a ram disk and say it's a disk?
01:32:28.520 - 01:32:49.390, Speaker B: Yeah, but we don't have enough memory for that. I mean that's. We would need at least 1. We don't have enough for that. But if we only keep the state which is 500gb, we can do that. But the history will not fit in there.
01:32:50.810 - 01:32:58.670, Speaker C: But we don't need an archive node. Right. We just need the latest current lock.
01:32:59.240 - 01:33:06.580, Speaker B: It's still, it's rethink, configured to keep the whole chain history. And that's already 500 gigs. Something like that.
01:33:07.400 - 01:33:10.380, Speaker A: I think 1.1 terabytes, if I'm not wrong.
01:33:11.520 - 01:33:31.700, Speaker B: Yeah, that's the whole thing. But only the chain history I think is about half of that. And the rest, the other half is the state which we can, which we might be able to reduce. There's some things we can definitely improve.
01:33:32.800 - 01:33:48.660, Speaker C: Yeah. Even if you set pruning to one, because by default I think it's 1000. Now if you, let's say we configure Reth with pruning set to one.
01:33:50.490 - 01:33:52.630, Speaker B: Yeah, we can try something out like that.
01:33:54.450 - 01:34:08.190, Speaker A: Did you, did you try this now for testing purposes now to show like rest and Rbuilder and the TDX machine that you just created. You wanted to show this like not syncing it, but just to show them running side by side.
01:34:09.690 - 01:34:19.810, Speaker B: Do you think it makes sense? I mean, I would rather work on a script that starts them up directly. I mean we could start them and at the same time write the script.
01:34:23.550 - 01:34:40.130, Speaker A: That's a good question. How would you make now with bitbake to add commands that to run specific binaries on the startup of the machine so you don't require Ssh. We want eventually, potentially at the end to have an image without any Ssh access. Right.
01:34:40.750 - 01:34:43.740, Speaker B: Yeah. Let's see. Let's have a look.
01:34:44.120 - 01:34:54.060, Speaker C: I think we need an init system of some kind. I was thinking about OpenRC, which is a lightweight init system.
01:34:56.280 - 01:35:20.920, Speaker B: I think we already have OpenRC, so there's already this directory and then has different in a script and we do have it. Let me check. No, it's cis Vinet.
01:35:21.540 - 01:35:29.880, Speaker C: Sysvenit is bit dated. I mean maybe it's still supported, but it's like very old.
01:35:33.670 - 01:35:35.610, Speaker B: How is it different to init RC?
01:35:42.150 - 01:35:51.530, Speaker C: I don't have an answer. I don't know. Let me just quickly check.
01:36:02.640 - 01:36:08.472, Speaker A: I mean, I mean if it fulfills the purpose, what we need it for, then it doesn't matter, right?
01:36:08.616 - 01:36:10.980, Speaker B: Yeah, I think we can just keep it for now.
01:36:13.920 - 01:36:38.940, Speaker C: Yeah, I'm just, I'm just saying for the sake of security reasons whether it's still well supported and how much do we add to the tcp by installing CSV in it? But yeah, for now we definitely can it.
01:36:46.960 - 01:36:54.030, Speaker B: Okay, so it's part of the Bitbank recipe.
01:37:00.250 - 01:37:08.950, Speaker C: So you want to write the startup script for ref and our builder, right?
01:37:12.930 - 01:37:28.400, Speaker B: Yeah, exactly. And yeah, I see here it's part of the, it's part of the bitbig script. So let's see.
01:37:31.300 - 01:37:33.000, Speaker C: Let'S ask chat GPT.
01:37:44.190 - 01:38:07.260, Speaker B: Okay, so we need to copy this one here and then. So it's part of the install. So yeah, so we're taking.
01:38:09.280 - 01:39:04.680, Speaker C: Does bitbake support overlaying a file system? Like instead of declarative, instead of, instead of coding it as a script, we can just create a directory, a root fs layout on your work machine so that it will just copy this skeleton onto the image. Let's say we could, instead of doing CP of the CCV init script, we could just place it into rc directory and the bake will just copy it into the resulting image.
01:39:06.380 - 01:39:25.450, Speaker B: I think we can do that, but does it make sense for me, this init script is a part of this rest binary. If you want to install ref, it will come with an init script and it should take care of installing the initial script at the correct directory.
01:39:27.150 - 01:39:33.382, Speaker A: Where does this init script comes from? Like what you are currently adding the CP you're copying an init from?
01:39:33.446 - 01:39:52.950, Speaker B: Yeah, we're going to add it now. We're going, it's, it's not, it's not there yet. Ah, okay, okay, see, just copying whatever we need. Like um, but we actually also need this one. Yeah, in case that doesn't exist yet.
01:39:53.490 - 01:39:55.070, Speaker A: Yeah, you have to install it.
01:39:55.450 - 01:40:00.110, Speaker B: I need to install the directory and what else.
01:40:02.850 - 01:40:04.258, Speaker A: Seems to be it?
01:40:04.434 - 01:40:06.630, Speaker B: I'm wondering this one is.
01:40:11.730 - 01:40:15.400, Speaker A: Maybe you can go to the file, the updaterc.
01:40:24.180 - 01:40:26.320, Speaker B: Okay, so we need this one as well.
01:40:26.780 - 01:40:27.920, Speaker A: What does it do?
01:40:28.980 - 01:40:35.948, Speaker B: The updaterc class usesrc to safely install an initialization script on behalf of the package.
01:40:36.124 - 01:40:42.370, Speaker A: I see. Oops.
01:40:48.270 - 01:40:59.890, Speaker B: Okay. Anything else? Yeah, this one as well.
01:41:02.390 - 01:41:03.330, Speaker A: Which one?
01:41:03.910 - 01:41:12.510, Speaker B: These two inner script name and parameters. Um, interesting. So what will, it will be started on startup.
01:41:19.930 - 01:41:23.670, Speaker A: So we are naming this, the init script. The same as the binary itself.
01:41:25.490 - 01:41:30.790, Speaker B: Yeah, why not? Do you have any complaints?
01:41:31.090 - 01:41:36.290, Speaker A: It's a bit confusing. That's it? Wouldn't complain, I would say, but yeah.
01:41:39.830 - 01:41:41.770, Speaker B: I'm open to suggestions.
01:41:43.350 - 01:42:03.720, Speaker A: No, I was just wondering if there were some kind of conventions such as, I don't know, binary bin and scripts, Sc or something like this would be much more humanly readable. This should work for now. I would say. It wouldn't make much a difference, right?
01:42:04.740 - 01:42:10.640, Speaker B: No, it doesn't make any difference, but you're right. I'm just wondering, should I give it like breadth in it?
01:42:11.420 - 01:42:18.284, Speaker C: No, I think the convention is just to use the name of the binary, at least from what charger Pt is suggesting.
01:42:18.452 - 01:42:20.360, Speaker A: Okay, interesting.
01:42:24.710 - 01:42:26.090, Speaker B: This is all the same.
01:42:26.390 - 01:42:44.050, Speaker C: Okay, so, so Yogta is already kinda has all the options for creating the init script, right? So you just pass two parameters and it will create the init script for you.
01:42:44.390 - 01:42:57.100, Speaker B: No, we, now we need to create the init script. That's the next step. Just gonna copy the one I have. Sorry.
01:42:58.880 - 01:43:05.260, Speaker A: I would wonder if they have a command like that, creates a template in its script that you can then take and work upon.
01:43:06.600 - 01:43:07.900, Speaker B: No, I don't think so.
01:43:08.240 - 01:44:12.140, Speaker A: Okay, Sadeena, maybe question for later to be answered, but when doing all of this and you have now your final version of your whole bitbake configuration for the whole image, is this in any way reproducible in the sense that each time you build this image, it will always be the same? Or are there components that are non deterministic that could lead to a different measurement each time you build? Like such as, I don't know. There were at some point I read somewhere that in each image there are some components that are mounted or configured inside your virtual machine that might lead to non determinism and they include some data like timestamps and such stuff. This not the, not the case here. Like is the generated image always reproducible, is always the same?
01:44:13.040 - 01:45:05.790, Speaker B: I tested this and I can confirm this, but I haven't tested it on different machines. So there might be some stuff where it's using local binaries to build like a local linker or local cc or stuff like that, and that might change it, as far as I understand, Yocto, it shouldn't, but I've seen in the case of rust binaries that it does building rust binaries, but that's not an unofficial project. So maybe they have some different convention here. Yeah, but yeah, regards to timestamps and I, stuff like that. I've checked and it's, this is not the case. It's really taking, taking out everything.
01:45:06.450 - 01:45:08.430, Speaker A: That's great. That's great to hear.
01:45:11.450 - 01:45:29.200, Speaker B: There's also p. This is the script to start the geth node. Most of the, we don't need anything of it, so I'm just gonna. We can use these tests, secret keys and stuff like that. Still keep them?
01:45:30.300 - 01:45:50.120, Speaker A: Yeah. I mean, potentially you would need something similar to a for rest, right? Like some commands are similar to rest support and some of them are not. Should I share with you something?
01:45:50.710 - 01:45:51.730, Speaker B: We need a.
01:45:53.190 - 01:46:01.490, Speaker A: Should I share with you the way where you start? Rest, like which, which commands that you pass? The rest here?
01:46:01.830 - 01:46:03.210, Speaker B: Yeah, that will be great.
01:46:03.710 - 01:46:05.690, Speaker A: Okay, let me fetch them for you.
01:46:12.390 - 01:46:13.450, Speaker C: Okay already.
01:46:25.760 - 01:46:27.460, Speaker A: Where should I post it for you?
01:46:28.240 - 01:46:31.020, Speaker B: I don't know yet. No idea.
01:46:32.920 - 01:46:34.660, Speaker A: I'll post it here in the chat.
01:46:35.760 - 01:47:03.190, Speaker B: Do you want to take over? I think that would be interesting if you could because. Okay. I'm not sure, what do you think you want to try this? I mean it's just basically. Well, I have a better idea. Let's first start the VM and see whether we can get rest starting. And then we can just paste the command we're using in here.
01:47:05.530 - 01:47:10.160, Speaker A: Yes, what do you mean by command we are using?
01:47:13.580 - 01:47:19.120, Speaker C: Yeah, I mean we still need to provide some default flags.
01:47:20.060 - 01:47:33.120, Speaker A: Yeah, I shared with you the commands that you passed to the rest node. If you want. Or let me, let me provide everything. Here you go. It.
01:48:59.090 - 01:49:03.802, Speaker B: There'S two. Which one is the right one? You send two things.
01:49:03.866 - 01:49:09.186, Speaker A: The second one, because the first one was without the node command like.
01:49:09.378 - 01:49:22.260, Speaker B: Okay, this is for what? For us. For which. For which is it mainnet?
01:49:23.120 - 01:49:24.640, Speaker A: Yes, this is Mainnet.
01:49:24.800 - 01:49:27.260, Speaker B: Maybe can we do Halski?
01:49:27.600 - 01:49:46.270, Speaker A: For Halski? Let me check how to fetch this for Halski. I think I would tell you how to do it. 1 second. It's just so to run it with Holski you just write minus, minus chain Halski.
01:49:47.050 - 01:49:47.950, Speaker B: Okay.
01:49:50.890 - 01:49:54.866, Speaker A: But probably you need a lighthouse as well. You don't have a lighthouse there?
01:49:55.018 - 01:49:59.470, Speaker B: No, we need, we need to start one somewhere.
01:50:00.330 - 01:50:01.150, Speaker A: Yep.
01:50:03.010 - 01:50:05.070, Speaker B: Somebody wants to cover the task.
01:50:07.860 - 01:50:09.880, Speaker C: Can I just run it on the same node?
01:50:11.100 - 01:50:12.400, Speaker B: Yeah, sure.
01:50:16.140 - 01:50:22.520, Speaker A: So creating also a recipe for lighthouse, you mean, or what do you mean on the same node?
01:50:23.660 - 01:50:31.760, Speaker B: Yes, I wouldn't run it inside of the VM. It's not necessary to have it there. It's bulk.
01:50:32.070 - 01:50:38.530, Speaker A: Yes, because I wouldn't. Yeah. If it's not security critical, we can keep it out.
01:50:42.070 - 01:50:47.170, Speaker C: Yeah, I can try to start it on the host.
01:50:47.870 - 01:50:50.810, Speaker A: I can keep it on the same machine though. Yeah.
01:50:54.710 - 01:50:59.350, Speaker C: I'm not sure though if VM has access to the host.
01:51:00.170 - 01:51:18.590, Speaker A: That's a good question. Is there, where? There, I think, yes. This is a Qemo command that can open the host for it. Right. I remember recall there was a command that you passed to Qamo when you on the startup where you pass the host, like start bridging.
01:51:19.130 - 01:51:21.338, Speaker B: I think it does have access to the host.
01:51:21.514 - 01:51:24.030, Speaker A: Yeah, yeah. To give it access to the host.
01:51:26.280 - 01:51:32.300, Speaker B: It's. Where's the gateway?
01:51:35.400 - 01:51:37.820, Speaker C: Just write ip route.
01:51:43.080 - 01:51:55.390, Speaker B: Okay, let's see if I can. Yep.
01:51:56.890 - 01:51:57.630, Speaker A: Nice.
01:52:14.050 - 01:52:19.450, Speaker C: There's actually already lighthouse service on the host. It just.
01:52:19.490 - 01:52:20.026, Speaker A: Yes.
01:52:20.178 - 01:52:21.190, Speaker C: Is it running?
01:52:21.530 - 01:52:23.882, Speaker A: Is it. Let me check. Is it.
01:52:24.026 - 01:52:25.110, Speaker C: It's mainnet.
01:52:25.410 - 01:52:27.070, Speaker A: Yeah, we need it for.
01:52:28.530 - 01:52:30.390, Speaker C: Okay, I will make another one.
01:52:31.170 - 01:52:39.350, Speaker A: I mean you can reuse it. I think we can just change the. Change the configuration to run Holsky, right?
01:52:40.450 - 01:52:44.910, Speaker C: Yes, but I prefer to create a new one.
01:52:47.410 - 01:53:02.162, Speaker A: Wait a second, I think I have Halsky lighthouse there on this machine because I was doing halski tests. Let me check. Should be there called Halsky Lighthouse or something like this under the systemd files.
01:53:02.306 - 01:53:04.510, Speaker C: Yeah, it's lighthouse. Halsky service.
01:53:04.930 - 01:53:40.560, Speaker A: Yeah. You can reuse this? We can run it? Yeah, we can immediately run that actually, but we need to change the parts to make it to the default ports because I added one to each one of them because I was running one for the light, the vanilla holosky, and one for the SGX holoski. So I had to add one to each port number like the local host, as you can see. I can. Let me do this for you.
01:53:43.340 - 01:53:52.920, Speaker C: Wait, but execution endpoint should be, should be referring to the rest node, right?
01:53:56.940 - 01:53:58.040, Speaker A: What do you mean?
01:53:59.270 - 01:54:04.530, Speaker C: So the lighthouse pushes the updates to the rest node?
01:54:04.910 - 01:54:12.810, Speaker A: Well, it pushes it to a specific part, if I'm not wrong. And then the light. This should be configured on the rest side. Yeah.
01:54:13.470 - 01:54:28.056, Speaker C: Yes, but then it means that the host should also have access to a VM because right now we only check this. Now we only checked that VM has access to the host but not vice versa.
01:54:28.208 - 01:54:36.256, Speaker A: Yes. Let me check this. Can you show me your IP address in the VM filter so I can.
01:54:36.288 - 01:54:39.540, Speaker C: Ping it ten O 215.
01:54:45.080 - 01:54:48.260, Speaker A: Oh, I cannot ping it from outside. From the house.
01:54:49.600 - 01:54:51.218, Speaker B: You can ping it from outside.
01:54:51.394 - 01:54:54.830, Speaker A: Nope, that's dropping all the packets.
01:54:56.650 - 01:54:58.470, Speaker B: Can you ssh to it?
01:54:59.370 - 01:55:16.402, Speaker A: Ssh as a root. What's the user root root at? Ten. Okay, artium already said no, I cannot ssh. So I think it's a qemo command. So what you, what you opened?
01:55:16.506 - 01:55:23.910, Speaker B: Okay, 1 second. Oh, we can fix this, no problem. I just have to take the different networking solution.
01:55:24.210 - 01:55:24.690, Speaker A: Yes.
01:55:24.770 - 01:55:31.310, Speaker B: Which is I'll have to restart the VM. Just checking if I have anything.
01:55:32.370 - 01:55:33.910, Speaker A: Yeah, no worries.
01:55:35.130 - 01:55:45.280, Speaker C: You should also expose the listening address to 100 215 on the ref.
01:55:46.380 - 01:56:12.490, Speaker A: I will, I will change the one, the light holoski instead. Like I will return them back to normal. I will remove the ones. No worries. If you recall, we added to each part, we added a one prepended one. I will remove these and them back to the original parts. So basically you wouldn't have to do any changes there.
01:56:12.950 - 01:56:13.854, Speaker B: Okay.
01:56:14.022 - 01:56:41.400, Speaker A: All right, I'm restarting the lighthouse holoski. Okay, it started right now on the host. Yeah, it's running but we should also.
01:56:41.440 - 01:56:42.632, Speaker C: Check the execution endpoint.
01:56:42.696 - 01:56:53.940, Speaker B: Right, but I changed so the IP address has changed. So it's now. This is the IP address of the VM.
01:56:56.320 - 01:57:02.130, Speaker A: What did you do? Changes right now. Like in order to make it open to the outside, did you do something different?
01:57:02.830 - 01:57:14.530, Speaker B: Yes, I used a different network device which was configured by the run queue mu.
01:57:17.310 - 01:57:44.190, Speaker A: Interesting because this is probably also important for the whole setup. Potentially. Orlando for the onboarding. Let me ping what you just created and see if we can reach it. Ping. I can ping it.
01:57:47.850 - 01:57:50.390, Speaker C: Are you going to change the execution endpoint?
01:57:52.660 - 01:57:58.560, Speaker A: Lighthouse holeski service where, which exit, which one exactly are you talking about?
01:57:58.980 - 01:58:05.000, Speaker C: The flag execution endpoint. It should reference the ip of the rest node.
01:58:05.940 - 01:58:11.780, Speaker A: Ip I cannot open it because I think you are already being edited. Okay, 1 second.
01:58:11.820 - 01:58:12.520, Speaker C: Try again.
01:58:13.300 - 01:58:46.490, Speaker A: All right, so I'm looking at it right now, which on check by execution endpoint is the localhost eight. Ah yeah, it should be the address of the. All right, let me see the address again. It was 192168. What was the rest? 7.27.2 and then under 8551 or no, rest was different, right? Or am I wrong?
01:58:46.870 - 01:58:50.410, Speaker B: No, it's 8551. I have a config.
01:58:50.750 - 01:58:53.438, Speaker A: All right, cool. Then this should.
01:58:53.494 - 01:58:55.890, Speaker B: Oh, and you need this.
01:58:58.110 - 01:58:59.470, Speaker C: JDlt secret.
01:58:59.630 - 01:59:00.370, Speaker B: Yeah.
01:59:02.750 - 01:59:06.094, Speaker A: Maybe share it in the chat and then I will change it.
01:59:06.262 - 01:59:07.290, Speaker B: 1 second.
01:59:31.360 - 01:59:35.826, Speaker A: Just to be sure. Those secrets are not important, right. Like these private keys.
01:59:35.978 - 01:59:40.830, Speaker B: No, they are already on GitHub. For anyone's listening, you don't have to type them down.
01:59:41.290 - 01:59:51.470, Speaker A: All right, cool, cool. Did you share with me this JVT secret somewhere?
01:59:52.170 - 01:59:53.510, Speaker B: Yeah, it's in the chat.
01:59:56.370 - 02:00:01.590, Speaker A: Okay. For some reason my chat does not update correctly. Okay, cool. I will change it.
02:00:06.250 - 02:00:10.150, Speaker B: Let me know when you restart it and give it a try.
02:00:11.850 - 02:01:33.460, Speaker A: Give me one sec, just to fetch where it is being located. 1 second. I need to restart the daemon reload. I have triggered the restart command, but it should be restarted now. Jordan control, what IP address did you put for your rest? For the. You cannot use probably the localhost for the lighthouse, right?
02:01:34.280 - 02:01:43.770, Speaker B: No, for the rest I don't need to provide the lighthouse because lighthouse connecting directly to rest. But for the R builder, we need to provide an IP address.
02:01:44.190 - 02:01:50.290, Speaker A: I see. No, wait, second. An IP address for our builder.
02:01:51.150 - 02:01:59.010, Speaker B: No, the R builder needs an IP address for the lighthouse because it's asking for something that it needs during the blockbuilding process.
02:01:59.430 - 02:02:01.330, Speaker A: I'll check that for you.
02:02:02.030 - 02:02:06.970, Speaker B: But yeah, I don't need it right now. Do you have. Is it running?
02:02:07.710 - 02:02:08.890, Speaker A: It's running, yeah.
02:02:14.850 - 02:02:17.310, Speaker B: Okay, how do we see that whether they are connected?
02:02:17.770 - 02:02:47.680, Speaker A: You open lighthouse now on the host you do journal control minus a few and you can see if they are starting to sync between each other or there are some kind of this service lighthouse dash call this key. No, no, not this one. Yeah, but it's not moving, which means they're not connected yet.
02:02:52.780 - 02:02:58.960, Speaker B: It's also. It's also syncing because.
02:03:01.430 - 02:03:10.950, Speaker A: Yeah, there was before. Yes, but we started guess with it. Actually not. Right. Should I remove the databases and.
02:03:11.110 - 02:03:11.850, Speaker B: Yes.
02:03:12.310 - 02:03:15.330, Speaker A: Yeah, I'll try this. Let me see.
02:03:17.950 - 02:03:27.650, Speaker B: You can just add purge DB as an option. It's probably better because we're going to. Yeah, better add purge DB to the service. You want me to do that?
02:03:28.510 - 02:04:01.420, Speaker A: Okay, let me add this command then. Okay, minus, minus, minus minus purge db. How? It's just minus, minus purge minus db. Or what exact command is SSP dB. Okay, cool. Then I will restart it. Let me just daemon reload.
02:04:01.420 - 02:04:27.930, Speaker A: And now we can do journal control. Yeah, they started a new one. It's downloading a genesis state.
02:04:29.590 - 02:04:51.340, Speaker B: How big is Seleski? Like the. Not the consensus, but the execution client. Does anyone know again, how big Cholesky execution client database. Like, how big is the horoscopy rest database?
02:04:51.800 - 02:04:58.840, Speaker A: I'm not sure, I don't recall. You mean what type of database is?
02:04:58.880 - 02:05:07.032, Speaker B: If it's pebble or we received a port choice update. So it's working, is it?
02:05:07.136 - 02:05:11.730, Speaker A: Because for me it's still not moving. The lighthouse.
02:05:11.810 - 02:05:27.670, Speaker B: I was kidding. If there's a fork choice update. Maybe, maybe that was before we stopped it and restarted it. Maybe that's the reason. Yeah, maybe now it's still, maybe it's still syncing.
02:05:31.570 - 02:05:56.380, Speaker A: Not sure. It stopped at info block. Production disabled. And since then not moving. But it would be interesting to know if it's, they are connected to each other somehow. You try to ping, to ping the host from within the machine. Right.
02:05:58.400 - 02:06:02.514, Speaker C: I mean, I think it's still starting, so we just need to wait maybe.
02:06:02.562 - 02:06:20.150, Speaker A: Yeah. All right, while waiting, should we talk about the different approach in order to make this networking work for both directions other than this, or is this the solution, not what you did? Like is it a hack around or.
02:06:21.370 - 02:06:34.720, Speaker B: It's just for, it's just for the local devnet environment. So it's just a hack. Yeah. The Azure VM should work out of the box.
02:06:35.380 - 02:06:43.840, Speaker A: All right, cool. So we should do too much efforts in the networking part, if I understood you correctly.
02:06:44.460 - 02:06:46.640, Speaker B: Yeah, just executing the script.
02:06:47.100 - 02:06:47.740, Speaker A: Cool.
02:06:47.860 - 02:06:56.240, Speaker C: But then on Azure it's not going to be, I mean, we should have lighthouse running somewhere on some other vm.
02:06:57.820 - 02:06:59.560, Speaker B: Yes, yes.
02:07:02.020 - 02:07:06.560, Speaker A: Oh yeah. Now it's, now it's moving. The lighthouse is moving.
02:07:07.420 - 02:07:11.040, Speaker B: Okay. Yeah. On the rest node as well.
02:07:11.740 - 02:07:15.880, Speaker A: Cool. Yeah, they started syncing. Nice. This is nice.
02:07:17.180 - 02:07:31.890, Speaker B: So I stopped, um, the rest node again because now we want to configure the script in such way that the next time we start the vm, it would start with automatically, right?
02:07:33.390 - 02:07:36.370, Speaker A: Yes. So basically kind of a systemd file.
02:07:37.230 - 02:07:38.690, Speaker B: Yeah. Okay.
02:07:39.030 - 02:07:41.798, Speaker A: Can't we actually file. Sorry.
02:07:41.974 - 02:07:48.984, Speaker C: Before we, before we move on, actually lighthouse cannot reach out to the rest.
02:07:49.032 - 02:07:52.060, Speaker B: Not because I stopped it again.
02:07:52.880 - 02:07:54.260, Speaker C: Okay, sorry.
02:07:56.760 - 02:07:57.696, Speaker B: Okay.
02:07:57.888 - 02:08:09.480, Speaker A: All right, so back to the question. Is there, is there a way to do system d file and baked image, like to pass it inside and to be part of the image?
02:08:09.600 - 02:08:12.334, Speaker C: There is nothing going to be a system d there.
02:08:12.422 - 02:08:19.974, Speaker A: Okay. There is not going to be a system d. Is there any, something similar to system d with the SysV init?
02:08:20.062 - 02:08:21.662, Speaker C: That's what we are going to use.
02:08:21.806 - 02:08:29.918, Speaker B: That's a script like the script you're seeing right now, which I'm sharing is sort of the system, the equivalent of init script.
02:08:29.974 - 02:08:43.560, Speaker A: Okay. It makes sense because you were following it with journal control from within the VM. So I was like assuming that this is, is a system d or something like this, but. Yeah. Yeah. Cool.
02:08:47.860 - 02:09:11.960, Speaker B: Okay, so the SYSV init gives us the start stop demon binary. Is it? I'm not sure if it's sysvinit, but we have the start stop demon binary. That's usually the way you do cv init scripts. And this is how you would start the rest node.
02:09:18.420 - 02:09:24.560, Speaker A: So this is the NS file that you have to provide for each baked binary that you want to add, right?
02:09:26.260 - 02:09:30.620, Speaker B: Yeah, sort of. We have to adapt it, but yeah.
02:09:31.800 - 02:09:41.220, Speaker A: And why you are not adding the rest name binary before the node like to execute it or where does it know that this is for rest?
02:09:41.520 - 02:09:44.540, Speaker B: It's the demon.
02:09:45.240 - 02:09:53.180, Speaker A: Ah, you are providing it up in the path. I see, sorry, in the demon. Yeah, I see, I see, I see, I see, cool.
02:09:55.130 - 02:10:06.550, Speaker B: And another thing we're doing is we remounting the tempfs. Normally you do 50%, but we want 90% so we have more headroom.
02:10:10.250 - 02:10:12.850, Speaker A: For what reason you are mounting this.
02:10:12.890 - 02:10:24.540, Speaker B: Normally the temp fs only provides you with 50% of the memory and we don't, we want probably more than 90%. But now for testing. It's okay?
02:10:24.700 - 02:10:25.440, Speaker A: Yeah.
02:10:29.100 - 02:10:34.956, Speaker B: Anything else? Yes.
02:10:34.988 - 02:10:48.670, Speaker C: So are this the, the commands, this mount and. Yeah, this echo is because we are doing. If you're going to do start.
02:10:50.170 - 02:10:58.426, Speaker A: Yeah, yeah. I would assume also like to be not mounting the 90% of the next 90%. Imagine.
02:10:58.458 - 02:11:05.070, Speaker B: No, it's. Repeat the question. I'm not sure if I understood correctly.
02:11:06.410 - 02:11:19.928, Speaker A: If the commands that are being executed are then potent. So it means like if you run remounthing, it's not remounting each time, 90% of the previous 90% that you already remounted, is that correct? What you mean? Yeah, artyom.
02:11:20.064 - 02:11:31.500, Speaker C: Yeah, yeah. Because with this type of scripts, we should be careful not to introduce any side effects into the start command.
02:11:32.320 - 02:11:42.570, Speaker B: No, it's taking the whole size of the memory and then it's taking a 90% chunk of the whole.
02:11:43.990 - 02:11:46.290, Speaker A: So yeah, potent. Cool.
02:11:47.790 - 02:12:26.898, Speaker B: And actually, what I said earlier, if you have multiple temp fs which are mounted with 50% and they are all getting written full, it's not good. Like if you're lucky, just cannot continue writing, but most likely you're just going to crash the system because what will the system do? The memory is getting full and doesn't know how to, how to deal with it. Right. So there's something that we should maybe take care of. I don't know how, but is there.
02:12:26.914 - 02:12:35.870, Speaker A: A way to enable swapping in this case? Like if also the VM, if it over exceeds that, does swap, like, is there a flag for swapping?
02:12:38.810 - 02:12:43.314, Speaker B: No, I haven't enabled swapping it and I would be careful to do it anyway.
02:12:43.362 - 02:12:50.750, Speaker A: Yes, of course. But in general, like does the Yocto images allow or is this not really Yocto related issue?
02:12:51.490 - 02:13:16.890, Speaker B: I think there's not yocto related issue, but you need to configure it somehow. Swapping, I mean it's just, it's, you can write a script, you just need to swap on binaries which you might have. Yeah, that it's come, it comes as part of, probably comes as part of. Is it busy box?
02:13:16.930 - 02:13:19.550, Speaker C: Maybe probably busybox.
02:13:22.140 - 02:13:27.240, Speaker A: Where is, where is or which one of the two would work.
02:13:29.140 - 02:13:31.840, Speaker B: It's not, I can't find, I use it.
02:13:32.420 - 02:13:36.200, Speaker A: Can you use which, which you used to, which.
02:13:39.740 - 02:13:47.162, Speaker B: Okay, yeah, busybox.
02:13:47.306 - 02:13:57.990, Speaker A: Busybox, okay. Can you give a short introduction of what Busybox is for the people who are not familiar with Busybox?
02:13:58.890 - 02:15:14.344, Speaker B: So Busybox provides you with most of the, like most of the very common tools you would want to have in a Linux system, like for example the swap on, but also copy and the shell and stuff like that. And it does so by providing one single binary and all of the different commands are inside this busy box and it will automatically detect how you executed it. So, so if I run swapon, it will look inside this binary, it will realize, okay, I've been started using swap on and then it will direct to the code that's defined as swapon. So you have one single binary that provides a lot of different commands like copy move, a shell, but also swapon and other important Linux stuff. I think we will most likely also use it. I mean it's not necessary. Eventually we could skip needing a shell and busy box.
02:15:14.344 - 02:15:22.580, Speaker B: We could just start the r builder directly, but we're still in development phase.
02:15:26.320 - 02:16:13.580, Speaker A: Thanks for that. Thanks for the explanation. Yeah, probably all of these unnecessary tools later for the production ready image would be removed, so would be interesting to see. But we would still be needing somehow a way where we can do health checks. If the image that we just deploy is really running the binaries like because since we don't have any potential access, SSH access into it and so on, how would you be making sure that the rest that you ran or any, any third party binary is actually running and not crashing in a loop or something?
02:16:16.160 - 02:16:18.688, Speaker C: We just need to ship the locks somewhere.
02:16:18.744 - 02:16:20.144, Speaker B: Yeah, yeah.
02:16:20.232 - 02:16:35.748, Speaker A: So the locks, which should be somehow since it's sanitized in such a way, not exposing too much critical data. This is also next topic that should be put in mind.
02:16:35.884 - 02:16:39.476, Speaker C: I remember we just agreed to delay the logs for a few minutes.
02:16:39.668 - 02:17:03.720, Speaker A: Yeah. In this use case scenario, delaying the logs would be basically because then sooner or later they will become public anyway. But for. I mean, in general, like for a general use case where we are discussing running third party binaries in a te way, sandboxed, then we should figure out a way how to do the logging, not to log everything.
02:17:06.460 - 02:17:10.760, Speaker B: Yeah. Okay. So it's working.
02:17:12.980 - 02:17:14.200, Speaker C: On the first try.
02:17:15.060 - 02:17:16.320, Speaker B: On the first try.
02:17:19.740 - 02:17:20.520, Speaker A: Sick.
02:17:23.620 - 02:17:28.380, Speaker B: Okay, I have to take a five minute break. Five to ten minutes. Is that okay?
02:17:28.540 - 02:17:34.428, Speaker A: We can, we can make a break. You can stop it and then we can continue after lunch if you want. If all of you agree.
02:17:34.604 - 02:17:36.988, Speaker C: Yeah. I also would like to have lunch.
02:17:37.164 - 02:17:38.040, Speaker A: Me too.
02:17:38.700 - 02:17:43.510, Speaker B: So then let's make a big, like, what do you say? Half an hour?
02:17:43.890 - 02:17:49.018, Speaker A: Yes, still three. We can resume if you are all okay with this. Yeah.
02:17:49.154 - 02:17:55.226, Speaker B: How do you do that? Like how, what are we going to do with the recording?
02:17:55.418 - 02:18:11.649, Speaker A: So I assume that if we go out now, it will close. So if we all ditch the meeting, it will turn, shut down and then we have to contact again Freddy to start a new session for us. So probably it's going to be two sessions.
02:18:12.789 - 02:18:20.149, Speaker C: I can just, I can just stay here so that we don't restart the session. And I mean, me too.
02:18:20.189 - 02:18:21.849, Speaker A: I can also stay here and just.
02:18:22.349 - 02:18:24.009, Speaker B: Stay because I have the.
02:18:25.749 - 02:18:35.180, Speaker C: Okay, can we just like put a banner, like we will be back in 40 minutes.
02:18:41.920 - 02:18:51.740, Speaker A: Or maybe frieder, once you do the pause, you can share screen with one. With one image. Yeah, exactly. Say we are coming back at 15.
02:18:56.440 - 02:18:57.340, Speaker B: Okay.
02:18:57.760 - 02:18:58.740, Speaker A: What's the heck?
02:18:59.040 - 02:18:59.780, Speaker B: But.
02:19:03.400 - 02:19:04.340, Speaker A: See you later.
03:01:48.080 - 03:01:49.580, Speaker B: Miltos, can you hear me?
03:01:57.710 - 03:01:59.090, Speaker A: Is anyone back?
03:02:01.830 - 03:02:02.662, Speaker B: Yeah.
03:02:02.846 - 03:02:14.210, Speaker A: Oh, yeah. Nice. I see some drawings.
03:02:18.790 - 03:02:34.750, Speaker B: I think we're just waiting for our team. Maybe Andrew. I see that Andrew has joined, but, um, I can't, um, there's no mic microphone sign with him, so he might not be locked in yet.
03:02:35.970 - 03:02:44.230, Speaker A: Interesting. I mean, I don't see microphone beside me on you as well. Probably he's just not muted.
03:02:46.970 - 03:02:53.382, Speaker B: Okay. No, I do see a microphone side on your side, so interesting.
03:02:53.566 - 03:02:56.690, Speaker A: Okay, then he's just a listener.
03:03:00.150 - 03:03:28.016, Speaker B: Yeah, I mean, we can. Maybe we should wait a few more minutes. Maybe somebody wants to. Sure. But I'll take the time to introduce Miltos. So really nice that you can join Miltos. He's a friend of mine and he's actually, I would even call him a yocto expert.
03:03:28.016 - 03:03:59.360, Speaker B: He's been working on Yocto stuff professionally and I told him that we're doing some work on Yokto and he said he can have a look at running or compiling the rust binaries with Yocto so we don't have to have this additional step that we just implemented of compiling the binaries outside and then putting them into the built image already in compiled state.
03:04:00.620 - 03:04:14.510, Speaker A: I have a question here. What difference does it make if you let the Yogto do the compiling or you just do it like on a separate way and script it just to put the final binary there? Like is there a big difference?
03:04:15.690 - 03:05:14.640, Speaker B: Well, the end result, there's not really a big difference, but it does make a big huge devx difference. If you compile it outside, put it back inside, and then also the reproducibility part of it. We have to figure out how we can introduce the binaries in a deterministic way. Yes, with Yocto we already, I believe it. With Yocto, I mean, it comes with like if you compile a Yocto image, it doesn't only compile the, I think it doesn't only compile the dependencies which go inside of the image, but it compiles the whole dependency tree. So it also compiles the stuff that needs, that you need for compilation. That's why you get reproducibility so easily.
03:05:14.640 - 03:06:05.630, Speaker B: You basically, you have a very deterministic build system from the start. So that would be really nice to have rust working there as well. Yeah, but again, this rust bin project, this layer which we're using right now, it's not an official layer, and they're doing some stuff differently. Like they're taking the C compiler from the host system, which I would expect not to do in any case, because that really destroys the reproducibility of the whole process because I mean, everyone uses a different host system and everyone has a different c compiler there. So this is what I'd be concerned about.
03:06:05.970 - 03:06:25.202, Speaker A: Is there a way we can dockerize this process completely, like shift this Yocto building stuff to a docker image, and then basically it will be then reproducible because everyone will be running the same Env in this case, yeah, there is.
03:06:25.226 - 03:06:35.066, Speaker B: A Yocto images that I think there's some Yocto Docker images, so we don't have to build it ourselves.
03:06:35.258 - 03:07:05.002, Speaker A: That's great. I mean, this is a step forward to reproducibility, I would say. But yeah, as you mentioned. Now I'm interested in the question. So you mentioned that Yocto baking, the dependencies, the treat of dependencies from the root till like down. Does this mean like these dependencies are potentially diversioning. They are taking some kind of information from the host that is compiling them that might affect the reproducibility in this case.
03:07:05.002 - 03:07:38.880, Speaker A: So for example, I can give you an example when for example, Yocto is compiling some rust code using cargo, I would assume, or maybe not. Maybe you can. Yeah, correct me here, but if they are using cargo in the background, cargo is actually using some kind of host versions of the dependencies that are currently installed and so on. Yada yada. Does this mean this is the same for Yocto or is it, are you defining the versioning as well before you are compiling your rust binary there, for example?
03:07:40.380 - 03:07:42.160, Speaker B: I. Sorry, I couldn't have.
03:07:43.010 - 03:08:00.402, Speaker A: Yes. So yeah, the main question is here, are we defining specific versionings for the dependencies when Yocto is building the tree of dependencies? So for each dependency we are specifying the version.
03:08:00.546 - 03:08:03.070, Speaker B: Yes, that's exactly how it works.
03:08:03.450 - 03:08:16.560, Speaker A: Okay, cool. Then this should be easy. Interesting.
03:08:20.300 - 03:08:24.640, Speaker B: Miltos, I can see that you're trying to say something, but I don't hear you.
03:08:25.540 - 03:08:46.210, Speaker A: Your mic is not connected. You still can't hear you. Maybe you should select the right microphone. If you click on the little arrow on.
03:08:47.350 - 03:09:31.890, Speaker B: Yes, maybe if I can, I'll make you a co host. Maybe now it works. Can you try again? No, doesn't work, sorry. Okay, well, we'll see if you can get your microphone problems fixed. Yeah. So where should we continue? Should we just continue or should we give a small update? I don't know.
03:09:33.310 - 03:09:43.570, Speaker A: So the current state is we, you can, you can give, give a short brief of what we achieved so far and, and then we can continue from there, I would say.
03:09:44.670 - 03:10:56.710, Speaker B: Okay, so yeah, currently the point where we're currently at is that we've managed to include ref and the r builder within the VM image. It's running locally on Qemu right now. And we've written a script that, a startup script, an init script that starts up ref. And as you can see here now, this is within the image. It's life syncing right now, the holosky chain. I think the next step, which is probably not that difficult, is to actually, maybe it's a bit more difficult, but the next step is to start r builder as well as part of an init script. And then when we start the image, then basically ref and rbuilder will start to sync automatically.
03:10:56.710 - 03:12:35.370, Speaker B: But I think for our rbuilder it's going to be a bit more difficult because we need to add a lot of different private stuff like the private keys and we also need to connect to the beacon node, which in this case we don't because the beacon node connects to rest, but the R builder needs to connect to the beacon node. So that's the other way around. So we need to provide it with an IP address. So that's more of the in depth state, I think the general state that we're currently at. We're trying to build a reproducible VM image with Yocto that we can then run within a confidential VM which is currently we're using TDX as a technology and we want to have that reproducible because we want to be able to use remote attestation and prove to our users that we're actually running this code inside our VM and it's confidential. So you want to provide them with an integrity guarantees that we're running this kind of code like the ref and the builder. And we want to also provide them with confidentiality guarantees that if they want to send private bundles to our builder like private transactions, then these transactions would stay confidential and be processed within this confidential VM as part of the build process and only be released the moment the block has been sent to the relay.
03:12:35.370 - 03:13:03.110, Speaker B: I think that's a yeah. So I'm giving an in depth and a very top level explanation. So yeah, let's, let's see if we can apply this to the R builder or do you have any other suggestions? I mean there is, there was other topics that we could have a look at.
03:13:07.650 - 03:13:33.740, Speaker C: Are we going to be able to run our builder because it will require some private keys and I, well even if we able to run this, it will not produce blocks probably.
03:13:36.440 - 03:13:49.470, Speaker A: I mean for the current run we don't want it to produce blocks because we still need to sync it completely. But I would say for regarding the keys, we can generate them on spot like we can generate now some dummy keys, which is not a big issue.
03:13:52.050 - 03:14:46.940, Speaker B: I would give them as an HTTP service because that's actually how cloud and it works. At least for Azure you have an HTTP service outside of the VM, only the VM can access that. And this HTTP service will provide you with JSON or multiple JSON config files or other kind of config files. And the cloud init would basically then set up the VM based on these configurations and the configurations we can supply while deploying the image on Azure. We can basically just write a script that parses a JSON object and takes whatever private or whatever secrets we need and then start up the builder.
03:14:48.400 - 03:15:10.324, Speaker A: Can't we generate these secrets based on the ceiling key? Like for example we use the ceiling key from within the D VM through like a cloud init for example script such that it uses this as a, as a parent root seed and then we can extract whatever keys we need based from it.
03:15:10.452 - 03:15:12.120, Speaker B: We don't have the ceiling key yet.
03:15:12.420 - 03:15:23.188, Speaker A: Yes, exactly. I mean the final, final version would be that. Right? Like the final way. We don't want to rely on any unprotected ways of creating key pairs.
03:15:23.244 - 03:16:20.690, Speaker B: Well, I'm kind of, I'm hesitant because I mean these are, these are builder keys and I. So that's basically a way to publicly identify them. Also on the relay side, if we use some that are based on that specific state of the VM, then whenever we update or we choose to run a builder on a different, on a different cpu, then we'll have to, we'll basically get a different, instead of keys. So I would probably not. In the end we, we also need to provide different secrets like the Auth RPC secret for connecting to the beacon. And we definitely need to provide that. We can create that on the fly or we can, but we need to somehow read it from, from the VM image.
03:16:20.690 - 03:16:23.080, Speaker B: We nicer to use static.
03:16:23.820 - 03:16:34.000, Speaker A: I see. I understand. The question is how to embed those secrets such a testable way and make sure that they are not leaked in the process. That's the hard part.
03:16:38.380 - 03:16:54.110, Speaker C: I think we were going to use secret storage, either some cloud secret storage or vault which is hosted on our site for keeping such secrets.
03:16:54.270 - 03:17:29.840, Speaker B: The secrets we don't like, we don't need to protect these secrets from, from ourselves there we know these secrets and even if we provide them to the VM, we're not, we're not messing with the integrity of the VM or stuff like that. That basically private keys that the builder will use to sign messages and stuff like that. It will still attest to others that it's running within a TDX. I don't think there's an issue here.
03:17:30.000 - 03:17:38.470, Speaker A: Yeah, makes sense. It only has to do somehow like authentication that the VM doesn't take these keys from anyone, it's just from us. Because otherwise.
03:17:38.640 - 03:17:39.550, Speaker B: Exactly.
03:17:41.250 - 03:17:46.110, Speaker A: But yeah, I agree. We can do this since our keys are ours in this case. Yeah.
03:17:50.090 - 03:18:08.212, Speaker C: Okay, so let's make script for our builder. I can unwrap the config from our existing host and we can just put the into our init script and then regenerate the keys.
03:18:08.356 - 03:18:40.140, Speaker B: Yeah, let's do that by the way it's live syncing in progress and it's saying remaining box of one. Why is it. And this is since quite a while, only one remaining block. Does that mean. No, it's still syncing. So it's still live syncing. It's not sync yet.
03:18:41.040 - 03:18:55.420, Speaker A: No. I think in order to follow it completely, you can follow it on the host running like seeing the holiski. What is doing the lighthouse? Let me see, because there you will see more information.
03:19:00.570 - 03:19:06.790, Speaker B: It has only used three megabytes of storage yet. So there's something wrong.
03:19:08.130 - 03:19:39.282, Speaker A: So on the Holiski side it says it requires one day and 11 hours estimated time to completely sync. And the speed is eight slots per second. And it's moving slowly. So I would assume it's some kind of network bottleneck. In this case, no.
03:19:39.306 - 03:19:52.710, Speaker B: But this is for, this is for the beacon mode. Yes, the beacon client, what it does if you.
03:19:54.370 - 03:20:02.138, Speaker A: But it relies on the execution layer in order to execution client like the rest, in order to progress. Right?
03:20:02.314 - 03:20:38.740, Speaker B: Yeah, but we already checkpoint synced to be conclient. So we gave it a checkpoint and it synced from that checkpoint to the head. And now it's a flying. And now what it's doing in the background, it's syncing the whole thing. But it kind of already trusts the head. So this is just like a way to verify whether or not it should really trust the head. So if it eventually we find out this doesn't match up, it would probably break at least my guess.
03:20:38.740 - 03:20:54.110, Speaker B: But it's already communicating and sending beacon stuff updates for choice updates.
03:20:55.490 - 03:20:56.270, Speaker A: Yes.
03:20:58.770 - 03:21:07.700, Speaker B: What I'm curious is the memory only 2.9 megabytes.
03:21:09.040 - 03:21:20.260, Speaker A: Interesting. Is this part of your rest configuration that you're running it with? Like, it's just putting the state there? Yeah.
03:21:38.530 - 03:21:44.042, Speaker B: Oh, it's interesting. Now here it says it's 4gb, but.
03:21:44.066 - 03:21:47.790, Speaker A: Maybe it already used the half.
03:21:52.850 - 03:21:53.210, Speaker B: Of.
03:21:53.250 - 03:21:55.338, Speaker A: Your ram that you already passed.
03:21:55.474 - 03:21:58.944, Speaker B: No, I increased, I increased them. I increased the ram.
03:21:59.112 - 03:22:00.140, Speaker A: Oh, okay.
03:22:13.600 - 03:22:18.380, Speaker B: But maybe that's a sparse file. Now I can check sparse files.
03:22:22.610 - 03:22:24.870, Speaker A: What do you mean again?
03:22:28.290 - 03:22:40.110, Speaker B: A sparse file is a file where you say it's this big, but it's only taking part of, part of the file spaces, disk space.
03:22:42.330 - 03:22:45.818, Speaker A: It reserves the space, but it's not actually using it fully. Yeah.
03:22:45.954 - 03:22:53.528, Speaker B: And actually I'm seeing it here on this side it's only saying 1.8 megabytes. And here it's saying that's a sparse file.
03:22:53.704 - 03:22:54.460, Speaker A: Yeah.
03:22:54.960 - 03:23:08.300, Speaker B: Okay. Yeah. I don't know. Do we want to investigate this further or should we just leave that for another moment?
03:23:09.280 - 03:23:12.860, Speaker A: Would it be a blocker for the next one? For the next task?
03:23:13.450 - 03:23:17.190, Speaker B: No, we can start the builder anyway. We'll just not be able to build.
03:23:17.490 - 03:23:22.870, Speaker A: Yeah, and that's anyway because we need to sync completely. Right. In order to be able to build.
03:23:23.370 - 03:23:25.470, Speaker B: Okay, let's do that.
03:23:30.930 - 03:23:33.470, Speaker A: I don't think we will be building any time soon.
03:23:36.450 - 03:23:37.430, Speaker B: Okay.
03:23:39.780 - 03:23:42.716, Speaker A: How much did you increase the memory size of this vm?
03:23:42.788 - 03:23:45.680, Speaker B: Just in, 128 gigs.
03:23:46.020 - 03:24:20.086, Speaker A: I think this will be fitting for Haloski, I think because it was 18. Two gigs. Right. State something in that direction. I still have the data. Yeah. 107 gigs.
03:24:20.086 - 03:24:27.570, Speaker A: The vanilla Holiski state plus the chain data a month ago.
03:24:30.680 - 03:24:31.580, Speaker B: How much?
03:24:32.360 - 03:25:23.830, Speaker A: 107 gigs. That was to the time when I was doing experiments. So it should fit. So we are now copying the bitbake manifest for arbuilder. Right. And in it as well.
03:25:25.310 - 03:25:56.220, Speaker B: Yeah. So this is for the R builder. I just copied the red one. It should do the same. And I just replaced rest with R builder. Let's have a look at the index bit. Yeah, we can just replace here as well.
03:25:56.220 - 03:26:21.580, Speaker B: Don't really need remounting because that's. No, we don't need this one. We also don't need the JWT hex because it's not part of. We need secrets and we need these. Yes.
03:26:24.080 - 03:26:26.020, Speaker A: You mainly need three secrets.
03:26:33.440 - 03:26:34.180, Speaker B: Three?
03:26:35.160 - 03:26:47.930, Speaker A: Yes. It was relay secret key, optimistic relay secret key and Coinbase secret key for the wallet that signs the transfer.
03:26:47.970 - 03:26:51.230, Speaker B: We don't need it will work without it.
03:26:52.010 - 03:26:52.870, Speaker A: Okay.
03:26:56.010 - 03:26:56.790, Speaker B: Yeah.
03:26:58.530 - 03:27:03.070, Speaker A: It should be named, not rest. Right. It should be our builder provides our builder.
03:27:03.530 - 03:27:04.550, Speaker B: That's true.
03:27:12.100 - 03:27:36.782, Speaker A: And then description should be rBuilder. It's not really node. Right. Builder rbuilder builder. Yes. Rossbuilder. Yeah.
03:27:36.782 - 03:27:40.890, Speaker A: Should I fetch for you the commands to start this?
03:27:41.670 - 03:27:43.574, Speaker C: I already pasted in the chat.
03:27:43.742 - 03:27:47.490, Speaker A: Oh, okay. That's cool.
03:27:50.030 - 03:27:55.450, Speaker C: And I'm now preparing the config file.
03:27:56.190 - 03:28:20.094, Speaker A: Yeah, the config file should be copied in at the startup. This is also an interesting question. How do you do an abyss bake copying file from the current setup that you're creating inside the virtual machine to be put in a specific path, like mounting a specific file to the image. Is there such a way to do this?
03:28:20.262 - 03:28:23.606, Speaker B: Sorry, I really didn't understand your question. Could you rephrase?
03:28:23.798 - 03:28:40.860, Speaker A: Okay, so if I have a config file that I need to start my binary that I gave you to put inside the image, how would you mount that file inside that image or not really mount copy it. And how would you bake it inside.
03:28:40.940 - 03:28:52.320, Speaker B: Can you copy it like the edit file? Just. Yeah, can we do that? Or is there something all static or is there something we need to.
03:28:52.620 - 03:29:02.664, Speaker A: You have to pass that like as a start execution for your binary. For example, when you run proprietary binary and the first command should be the path to that configuration file.
03:29:02.712 - 03:29:07.380, Speaker B: Yeah, I understand, but the config itself, is it static or do we need to change stuff?
03:29:07.760 - 03:29:21.218, Speaker A: It takes. No, it's static so far, but it takes stuff from the environment variables. For example, if you have some environment variables like let's say relay secret key in the environment, it, it reads it from there.
03:29:21.394 - 03:29:27.270, Speaker B: Okay, that's cool. No problem. Yeah. Then we can just use the static one and we just copy it over like the init file.
03:29:28.450 - 03:29:40.074, Speaker A: Okay, where do we do the copy of init file? It's in the different. It's here actually. Should be here somewhere. The copying or not.
03:29:40.242 - 03:29:48.958, Speaker B: No, I mean it will be part of the. I'll show you. 1 second.
03:29:49.094 - 03:29:52.690, Speaker A: Yeah, this is the init file. So all good.
03:29:56.870 - 03:30:00.230, Speaker B: Config. I mean config, exactly.
03:30:00.270 - 03:30:01.090, Speaker A: You have to.
03:30:01.670 - 03:30:06.854, Speaker B: Etc. Config, something like that.
03:30:07.022 - 03:30:10.930, Speaker A: Yeah, exactly. All right, so we change this.
03:30:12.280 - 03:30:27.580, Speaker C: Well I just shared with you a config. Can you. In the DM. In the in slug DM. Can you please check if there is no sensitive info in it? I cleaned it up, but maybe I left out something.
03:30:28.040 - 03:30:47.410, Speaker A: Yeah, let me quickly scan it. Are you passing the write relay flashbuster? Are we going to use this relay? No, this is relay mainnet. We should probably reuse the different relay for the configuration, but the rest looks.
03:30:47.910 - 03:30:51.410, Speaker C: Do we have even a relay for the testnets?
03:30:53.110 - 03:30:57.050, Speaker A: No, in general, like we cannot send to the, to the mainnet relay, right?
03:30:57.790 - 03:31:01.902, Speaker C: Yes, but I mean do we, do we have a relay for the testnets?
03:31:02.086 - 03:31:08.010, Speaker A: Good question. Frieder, are you aware of flashbots will provide relay for Haldesky? I think should, right?
03:31:08.670 - 03:31:10.850, Speaker B: Yeah, should be the case.
03:31:12.070 - 03:31:37.320, Speaker A: Let me check if we have a relay. I found it. I will send it to you in the chat. Or this is the one. Or at least I think so. The address is on top.
03:31:38.460 - 03:31:39.320, Speaker C: Okay.
03:31:40.180 - 03:31:44.120, Speaker A: You can change it, you can edit it in place and then.
03:31:44.660 - 03:31:55.880, Speaker C: Yeah. And other than that is this is bundle mergeable signers as the public key, right?
03:31:56.240 - 03:32:12.936, Speaker A: Yes I see. We are using all the builders. Yeah, we can reduce the builders. We can only use one or the first two, but we can keep them, it's not a big issue. And the rest is. Yeah, the effect lists. We should provide also the effect list.
03:32:12.936 - 03:32:49.648, Speaker A: Somehow we copy it and similar to what we are doing. Yes, we need to rework this because the configuration file Frieder, it includes passes to other files that are potentially read by the ARB builder during initialization step, such as the OFAC file. It says read it from, for example backslash mount Backslash arbuilder of blacklist. And we should probably have such path as either this or.
03:32:49.784 - 03:32:55.180, Speaker B: What about do we have a, can we provide a URL?
03:32:56.480 - 03:33:04.300, Speaker A: No, that would be great actually. So we don't have to do this manually every time actually, but maybe we should.
03:33:05.040 - 03:33:16.826, Speaker B: Why isn't there a URL yet? I mean there must be a reason. Much nicer to have it so you never have to reconfigure it.
03:33:16.978 - 03:33:32.578, Speaker A: Yes, actually this is a good point. I was discussing this earlier that we should automate this process and it was deprioritized due to the operationalizing the TDX first. But this should be now on our agenda. I think I have a question.
03:33:32.754 - 03:33:35.146, Speaker C: Can we, can we just do this in dry run?
03:33:35.218 - 03:33:37.390, Speaker B: That was also very useful, right.
03:33:37.690 - 03:33:39.910, Speaker C: And we don't have to worry about any of this.
03:33:41.530 - 03:33:45.390, Speaker B: Sorry, I didn't, it was acoustically hard to understand you.
03:33:45.730 - 03:33:46.234, Speaker A: Sorry.
03:33:46.322 - 03:33:48.670, Speaker C: We can also use the dry run mode.
03:33:50.090 - 03:33:51.030, Speaker B: Dry run?
03:33:51.370 - 03:33:57.750, Speaker A: Yeah, for now. You mean for the arbiter dry run.
03:33:58.050 - 03:34:00.858, Speaker C: Yeah, and also there's no offac for Holoski.
03:34:00.914 - 03:34:17.630, Speaker A: You know, it's true, there is no effect for host because we are discussing this like for the final funnel build. So potentially we need the oFac somehow to be inside the bitbig. All right, that's a good point. We can do it in try run for now.
03:34:20.370 - 03:34:23.058, Speaker C: But we still need a config, right? Or not?
03:34:23.194 - 03:34:55.120, Speaker A: Yes, sure, sure. Rbuilder won't start without config, but you can pass a parameter in the config to put it in dry run mode. As you can see, false. You can set it to true. And. Yeah, and the dry run validation URL, as you can see, there are some parameters there that are targeting localhost and such stuff. Maybe we can comment these out for now with the dry run.
03:34:55.120 - 03:34:56.460, Speaker A: You don't need them anyway.
03:34:57.920 - 03:34:59.060, Speaker C: Dry run will.
03:35:00.260 - 03:35:21.000, Speaker A: Yes, yeah, this is another point feeder. Some parameters inside the config, if I'm not wrong, they are specifying addresses and parts. In this case, for example, the consensus layer node address.
03:35:21.540 - 03:35:31.110, Speaker B: The config file can take environment variables, right? So we can just replace them by some kind of environment variable and then we'll.
03:35:33.210 - 03:36:22.960, Speaker A: Yeah, they have, they have to be of course implemented in the parser inside our builder, our builder so far, if I recall correctly, from the, from the diff, the reading from the environment, I think yes, it should be working as well. But we should be double checking with Vitaly regarding this for the addresses and ports. Okay, because so far I know it's like this environment. Files inside the config are for the secret keys that you have this schema of writing and double point, like a column and the name. But yeah, you're right. If you can do this as an environment variable, then this is solved as well. These are all good points.
03:36:25.820 - 03:36:55.222, Speaker B: Okay, so I've modified the script to include the rbuilder config. It will install this under etc builder configured same with ofac JSON. We'll install the file under our builder of JSON. And then where do you see AdC that says conf.
03:36:55.286 - 03:36:58.610, Speaker A: Dear, I thought that d is user.
03:37:01.030 - 03:37:31.992, Speaker B: Apparently not. Miltos, have you fixed your, your mic yet? Maybe we can ask you a question. Yes. Ok. Can you explain to us why is it a d in front of this is conftier? I imagine maybe D is root, like the first slash. The d is the new system. So the final systrote of the system.
03:37:31.992 - 03:38:11.102, Speaker B: So in that case, if you are for example building an image, then that would be. But you can actually print all of those stuff. Let me if you, I think do. Wait a second. Okay, so maybe just for me to try to understand this. So d is basically the directory of the final sys route, but during the build, during build time. So d is basically the whole path, which is like home freedr, home user, freer, pokey and so on until it gets to the final build path.
03:38:11.102 - 03:38:26.018, Speaker B: And so it's copying it into this route. Yes, you are in the correct direction. So you can actually do bitpeg minus e. Can you actually run bitpig?
03:38:26.094 - 03:38:26.710, Speaker A: Oh.
03:38:28.610 - 03:39:12.836, Speaker B: Yeah, you can actually run bit big then you can. Yeah, bitpig minus e, the recipe, the rest. I don't know which recipe you are. And then pipe grep or air builder. Yes, and then pipe grep and then grab the thing that you would like to see. In that case, maybe not d because you're gonna spit out a lot of stuff, but maybe it had another variable inside there so it was sist. Or you can just save the output in a log file and then open it with vim and then actually do a search so that you can actually, I will do it in that way so that you can actually see what is the values of all of this stuff.
03:39:12.836 - 03:39:27.830, Speaker B: So just not pipe it then maybe save it or less yeah, it's a yde good point. And yeah. Okay. I've not finished my. I'll have to do a few fixes.
03:39:30.330 - 03:39:30.730, Speaker A: Yeah.
03:39:30.770 - 03:40:06.320, Speaker B: Funny enough, I can also, I cannot also do it here in myself because I also broke something. Otherwise I would have done it to tell you the exact value. But yeah, all of these values are because we say this is truth of your final image. But this image is under a specific path in your installation. So this just gets replaced by a huge path, actually. So this looks correct. Right.
03:40:06.320 - 03:40:44.476, Speaker B: And now I can. 1 second, I wanted to, I wanted to open this configuration. Okay. We need now to find where it's exactly getting replaced. Yeah. Express. Okay, does everybody.
03:40:44.476 - 03:40:47.040, Speaker B: So there you see the native.
03:40:48.260 - 03:40:48.596, Speaker A: Yeah.
03:40:48.628 - 03:41:14.268, Speaker B: So the native is from your PC. But long story short, you can just bitpeg e and I also try to save this file into an environment sh and then I actually open it with my editor and then I release it. Just search the word that I want and then you can really see the value that it gets during build. Yes, yes.
03:41:14.444 - 03:41:15.324, Speaker A: Exportee.
03:41:15.412 - 03:41:18.080, Speaker B: Or in that case.
03:41:21.500 - 03:41:31.662, Speaker A: Does this mean that it takes for every configuration has a different value for the DNA or what does this mean then?
03:41:31.846 - 03:42:05.328, Speaker B: If I, for example, if for example, three days now you build bit baking the project, then it's under his username. If I would bitpeg something, then it would be my username just change. And then the path would also change. So these values are changing on the fly. That's why I cannot say to you, it's, it's, it's, it has this specific path currently. That's a great answer. It's, it actually answers a lot and it makes things much more understandable.
03:42:05.328 - 03:42:15.420, Speaker B: So basically d is, is a variable that, that can change. It's just based on the path where, where you're building your stuff.
03:42:15.720 - 03:42:16.248, Speaker A: Yes.
03:42:16.344 - 03:42:18.060, Speaker B: Correct. Yes.
03:42:18.400 - 03:42:39.776, Speaker A: So in this, in this Yocto one page documentation that you shared with me earlier, it says that d variable is like abbreviation for destination directory, which is correct. Which corresponds to work directory slash image. I'm not sure what this means.
03:42:39.968 - 03:42:57.310, Speaker B: So you are currently. Urine is currently in build let dual nls. I'm sorry? If you are in currently in the build folder, I think you can then go inside the temp and then work, I think. I'm not 100% sure, but then.
03:43:01.010 - 03:43:01.370, Speaker C: Which.
03:43:01.410 - 03:43:08.106, Speaker B: Colleague just said which you said the destination.
03:43:08.258 - 03:43:08.650, Speaker C: Yeah.
03:43:08.690 - 03:43:09.270, Speaker B: So.
03:43:13.050 - 03:43:15.390, Speaker A: Which, which file you said?
03:43:15.890 - 03:43:17.230, Speaker B: I forgot it.
03:43:19.410 - 03:43:22.194, Speaker A: Work directory image. Like backslash image.
03:43:22.322 - 03:43:56.610, Speaker B: Yeah. The work directory is the work directory of the actual bitback package that you're currently building. So for each. So for each package that you're building, like say for example ref bin or r builder bin, you have your own directory and it will then copy that over. So let's see. I can, I can try to build our builder and then we can try to find the config. Just, I think it's a.
03:43:56.610 - 03:44:09.260, Speaker B: Yeah, so it's the way of understanding stuff. So it's the recipe specific c root. And.
03:44:31.730 - 03:44:47.026, Speaker A: I wonder if you can just add to this do install commands that you are putting, for example inside your bitbake. If you can do just an echo for the d and see what it is, if you understand what I mean.
03:44:47.178 - 03:45:46.128, Speaker B: Yeah, but I found it now. So it's basically, it's in several places basis. But I would probably guess that either one of these two, probably this one is the work directory. So this is where the, this is the specific directory for our builder bin for building it. And there's the different stuff inside. Maybe Mentos, do you have an idea what these different folders are? I mean there's a lot. Maybe it's not, doesn't make sense.
03:45:46.128 - 03:45:56.068, Speaker B: I mean there's lots of stuff like folders for package QA. There's a lot of different build steps. But I mean, I can see the.
03:45:56.084 - 03:45:57.868, Speaker A: Image there, by the way.
03:45:58.044 - 03:46:02.132, Speaker B: Yeah, because it's copied over. It's copied over in this case.
03:46:02.316 - 03:46:15.930, Speaker A: Yeah. So I think it's inside that image. No, no, I mean backslash image. You can see it in there. So this is, as their documentation say, is swart directly backslash image.
03:46:16.470 - 03:46:23.462, Speaker B: Yeah, it seems like it's copying, it's having different, like it's, it's in three different file folders.
03:46:23.526 - 03:46:24.822, Speaker A: Oh, I see.
03:46:24.966 - 03:47:07.970, Speaker B: But yeah, we can look at each, any one of them and you see how the end, like, you'll see what, what eventually will be shipped to as part of the, the final vm image. Right. So you have the two config files in the bin. You will find probably the rbuilder binary and the init, you'll find the init script. So that's artyom. You mentioned that there's like a skeleton image or skeleton tree of this package. Something like that.
03:47:11.630 - 03:47:18.810, Speaker C: Yeah. I mean, in my build root experiments, you can just put the.
03:47:20.510 - 03:47:21.370, Speaker A: Entire.
03:47:23.110 - 03:47:34.222, Speaker C: Directory tree on your localhost in some specific directory and build root will pick this up and copy over the final root.
03:47:34.246 - 03:47:37.890, Speaker B: Of s. Okay, so this is more like an overlay, right?
03:47:38.230 - 03:47:39.690, Speaker C: Yes, it's an overlay.
03:47:40.070 - 03:47:40.970, Speaker B: Okay.
03:47:45.910 - 03:47:49.890, Speaker C: Is it the same with Yogta?
03:47:52.150 - 03:48:11.740, Speaker B: I will probably not. For me, this looks more like a, like an actual package that I think. And you actually have now the option to convert this to a package that you can later install in an image like a dev package or something similar.
03:48:13.640 - 03:48:16.580, Speaker C: Why would you want to convert this to a package?
03:48:17.800 - 03:48:47.030, Speaker B: I mean Yogto is a distribution for Linux distributions and they basically ship a minimal or some kind of standard distribution with standard packages and then you can start to install additional stuff. But that's one feature. But you can also provide it as a stand, as a default package already installed.
03:48:48.980 - 03:49:19.090, Speaker C: Yeah, I mean a package as a binary is fine and we can probably do this. But the configuration I think should be separate because we want to have mostly identical, well identical vms with identical binaries but with different configuration. And for that configuration should be separate from package if I understand the term package correct.
03:49:26.510 - 03:49:28.570, Speaker B: Now I'm confused, but.
03:49:35.750 - 03:49:37.570, Speaker C: What are you trying to achieve?
03:49:37.950 - 03:49:49.400, Speaker B: No, I just trying to explain to people and trying to understand myself how this works. Is there like. Do you have any questions regarding this?
03:49:55.580 - 03:50:11.390, Speaker C: No, I think, I mean I shared with you the conflict. Are we ready to bake this into our image?
03:50:11.550 - 03:50:25.690, Speaker B: Well, it depends on what kind of config is it static config? Then yes, I would prefer to just bake it in. But if it's any kind of secrets or anything that we need to dynamically provide to the image on boot, then I would do it in a different way.
03:50:29.750 - 03:51:00.350, Speaker C: Well it's a, it's a config. There is no secrets there and there are, there are no parameters that cannot be inferred before boot. So we can have it fully static, I think, and we can bake this into the image.
03:51:03.730 - 03:51:59.210, Speaker B: Yeah, because I think the importance here is that we should put as much of configuration within the image as static because the more room you allow via configuration afterwards you could actually open any kind of security hole. Like imagine you get to find paths where the state is stored. Maybe then you could change the place where the state is stored rather in an unencrypted path or on disk, stuff like that. So yeah, I think the goal here is to make the most like make everything static. That doesn't need to be dynamic.
03:52:00.030 - 03:52:39.420, Speaker A: I mean it is like this, it is static in the sense that when you start our builder it reads it once and then that's it and it's set up. So even if you change it on runtime, you would require required to restart our builder from scratch in order to take the new configuration that you changed during runtime. For example, changing the state where it's saved. Then you would require to restart our builder. So in this case, it would be noticed that the binary got restarted. So I think this is not an issue. So it is kind of a static.
03:52:39.420 - 03:52:58.950, Speaker A: The only non static part of it is the way where we include the secrets, which is currently through environment variables. But in this case, we would need to figure out another way, like from a vault or something.
03:53:01.490 - 03:53:12.400, Speaker B: Okay, well, maybe let's focus on how we can get this, how we can get the R builder running. I mean, we have the init script now.
03:53:15.860 - 03:53:19.880, Speaker C: Yes. I also shared with you the config file for the R builder.
03:53:20.500 - 03:53:21.788, Speaker B: Where can I find it?
03:53:21.924 - 03:53:23.320, Speaker C: In the DM slug.
03:53:26.980 - 03:53:28.800, Speaker B: Stop sharing for a moment.
03:53:30.300 - 03:53:33.520, Speaker C: We just need to tweak some addresses there.
03:53:35.660 - 03:54:00.090, Speaker A: Did you tweak the relay address to Holosky? Good. I wonder if we need. Still need probably, we should still need probably the secret keys for the dry run as well. Like to provide even dummy keys, but just.
03:54:01.590 - 03:54:16.650, Speaker B: Is there anything, is there anything that I shouldn't. There's a. I can see. Can I share my screen now looking at this config or do I need to delete stuff?
03:54:18.350 - 03:54:22.530, Speaker C: I shared this with more and satisfying.
03:54:23.110 - 03:54:36.600, Speaker A: No, sharing it for. He meant sharing it on YouTube. I'm not sure if it includes any data that it's critical. Maybe.
03:54:36.760 - 03:54:41.800, Speaker B: Mateos, can I see the s bundle mergeable signers?
03:54:41.960 - 03:54:43.040, Speaker A: Yes, exactly.
03:54:43.160 - 03:54:51.852, Speaker B: Looks like a public key. And then there is the relay, which has a. Yeah, the relay is a public.
03:54:51.936 - 03:54:57.320, Speaker C: It's a public key. I grabbed it from the site. From our site.
03:54:57.940 - 03:54:58.316, Speaker A: Yes.
03:54:58.348 - 03:55:01.800, Speaker B: Okay. Okay. All right. I think then we can share it.
03:55:12.580 - 03:55:21.850, Speaker A: I mean. Okay, before you share it. Never mind, it's already shared now. Too late.
03:55:23.430 - 03:55:31.890, Speaker C: Blocks processor URL should be set to. What?
03:55:34.950 - 03:55:36.170, Speaker B: What's URL?
03:55:36.550 - 03:55:37.886, Speaker A: Blocks processor.
03:55:37.998 - 03:55:39.730, Speaker C: Blocks processor URL.
03:55:40.990 - 03:55:42.050, Speaker B: What is that?
03:55:43.520 - 03:55:44.580, Speaker C: I don't know.
03:55:46.800 - 03:56:30.110, Speaker A: Let me check my configuration. Ah, wait a second. So mine is, is referring to an internal Kubernetes AV's instance backslash API. I don't know what this is. Maybe we can ask Anton. Let's just.
03:56:31.810 - 03:56:35.928, Speaker C: Comment this out for now, see if it will start.
03:56:36.104 - 03:56:36.860, Speaker A: Yeah.
03:56:37.280 - 03:57:21.918, Speaker B: Okay. I just need to check one. So that's okay. So I'm setting the. The paths already. So everything is under our volatile and we're going to comment out the blocks processor URL and then we're going to start from the beginning. We don't have telemetry or.
03:57:21.918 - 03:57:26.330, Speaker B: That's the telemetry that's being provided by our builder.
03:57:26.880 - 03:57:29.260, Speaker C: Yes, it's a Prometheus metrics.
03:57:29.640 - 03:57:30.580, Speaker B: Okay.
03:57:32.320 - 03:57:37.100, Speaker C: We don't need this now, but we can keep it. I think it's on by default.
03:57:40.040 - 03:57:49.100, Speaker B: This is all fine. Fine. Let's try.
03:58:10.050 - 03:58:11.150, Speaker A: Interesting.
03:58:14.970 - 03:58:16.750, Speaker B: Can you explain what's interesting?
03:58:18.420 - 03:58:47.210, Speaker A: I'm interested to see if the R builder already have an implementation for it or it has to be specifically, is it a general way of implementation or is it specific to those three secrets? Let's see. But you have to provide a value in environment variables.
03:58:48.990 - 03:58:50.010, Speaker B: Yeah, exactly.
03:58:50.350 - 03:59:00.670, Speaker A: Do you, do you add the environment variables also in a bitbake file like in the bb? Is there a way to pass n variables, like to bake them inside directly?
03:59:00.830 - 03:59:01.262, Speaker B: Yes.
03:59:01.326 - 03:59:04.250, Speaker A: Or that would be also nice.
03:59:12.400 - 03:59:21.580, Speaker B: IPC is, what's the IPC path of ref. Where is that configured?
03:59:23.640 - 03:59:34.620, Speaker C: I think it will be the same. Should be the same. Is it always, it's by default there.
03:59:34.780 - 04:00:01.426, Speaker B: Okay, cool. It's not correct. What's the dry run validation URL? Do we, we need this one?
04:00:01.578 - 04:00:02.866, Speaker A: It's commented out.
04:00:03.018 - 04:00:03.306, Speaker C: Yeah.
04:00:03.338 - 04:00:08.950, Speaker B: Okay. Mergeable signers?
04:00:11.330 - 04:00:11.818, Speaker D: I don't know.
04:00:11.834 - 04:00:13.230, Speaker C: Let's keep it.
04:00:20.690 - 04:00:45.520, Speaker B: Okay, looks good. Okay, so for the time being I would just add the Cl node URL here. You know, the port.
04:00:52.270 - 04:00:53.530, Speaker C: Just a sec.
04:01:01.070 - 04:01:05.650, Speaker A: Isn't it 8645 or am I wrong? I'm not sure.
04:01:05.990 - 04:01:09.890, Speaker C: No. 3500.
04:01:10.830 - 04:01:12.838, Speaker A: Ah, okay. This is the different one, but it.
04:01:12.854 - 04:01:16.090, Speaker C: Should be HTTP as well, prefixed with HTTP.
04:01:23.800 - 04:01:28.900, Speaker B: What about the US relay API token? Do we need this one?
04:01:29.440 - 04:01:30.180, Speaker C: No.
04:01:31.160 - 04:01:34.060, Speaker B: So I can just remove it.
04:01:34.360 - 04:01:39.180, Speaker C: Coinbase as well. And optimistic relay as well.
04:01:40.320 - 04:01:43.350, Speaker B: But maybe we want to add them at a later point, right?
04:01:45.810 - 04:01:50.070, Speaker C: Yeah, but for now, optimistic commented out in the config.
04:01:57.410 - 04:02:13.880, Speaker B: Okay. Relay secret key. Is this the builder secret? No relay secret key. Why do we need it? Which one is that? Is it builder transaction signing key or the or builder secret key?
04:02:14.380 - 04:02:19.604, Speaker A: This is this, these are, I think what you're looking at are for the guests.
04:02:19.772 - 04:02:25.640, Speaker B: Exactly. But the get builder will probably, I mean, one of these I can use, right?
04:02:25.980 - 04:02:37.730, Speaker A: Yes, I would use the secret key because the signing key is the same as the Coinbase which signs the transactions from the wallet before submitting them.
04:02:38.110 - 04:02:39.010, Speaker B: Okay.
04:02:42.950 - 04:02:54.970, Speaker A: So you could use the Coinbase secret key and pass it the builder TX signing key if you want, in case the R builder starts screaming, not running because it requires that variable.
04:03:02.240 - 04:03:03.140, Speaker B: Okay.
04:03:07.840 - 04:03:14.220, Speaker A: Do you need to add also a slash after the Cl node URL since they are underneath? Exactly.
04:03:15.880 - 04:03:16.660, Speaker B: Maybe.
04:03:19.080 - 04:03:28.670, Speaker A: Anything else looks good to me. Do they need to be in quotations or not necessarily.
04:03:30.090 - 04:03:31.150, Speaker B: Which ones?
04:03:31.530 - 04:03:34.090, Speaker A: The environment variables that you are passing.
04:03:34.250 - 04:03:36.130, Speaker B: No, it's fine.
04:03:36.290 - 04:03:37.070, Speaker A: All right.
04:03:39.330 - 04:03:45.110, Speaker B: No, it's fine. I doubt it will work, but.
04:03:47.330 - 04:03:53.200, Speaker A: I mean we managed to run the system vi init in one try.
04:04:06.660 - 04:04:09.720, Speaker B: Miltos, have you ever worked with Boltrose?
04:04:11.340 - 04:04:15.292, Speaker A: He just left. If you ask. If you are asking him, he wrote that he has to leave.
04:04:15.476 - 04:04:17.770, Speaker B: Okay. Unfortunately.
04:04:34.830 - 04:04:47.650, Speaker A: At some point are we going to look into reducing the TCB by removing stops stuff from the configuration later, like from the image, or is it not on the agenda for now?
04:04:48.590 - 04:05:15.660, Speaker B: I don't think so. I don't think it will be on the agenda. I would probably do something different. Like I noticed that in terms of kernel security, a lot of the mitigations for side channels haven't been enabled because it's such a small kernel config. So this is something I would probably want to look at.
04:05:19.760 - 04:05:22.280, Speaker A: Now. What do you mean, like by enabling them or.
04:05:22.440 - 04:05:23.340, Speaker B: Exactly.
04:05:24.000 - 04:05:27.180, Speaker A: Okay, aren't they enabled by default?
04:05:29.920 - 04:06:51.170, Speaker B: It looks like they are not with a small kernel configuration that we have, like the tiny version of the VM, but we're having issues with our bitbig server. Okay, it's. Did we change something? Looks like we changed something.
04:06:53.220 - 04:06:57.400, Speaker A: Not to my knowledge. We only. Ah, you changed the arbiter.
04:06:58.220 - 04:07:19.730, Speaker B: Yeah. This is rebuilding a lot of stuff. Okay, I'll take the opportunity to take a small break. See you in two.
04:07:35.750 - 04:07:37.370, Speaker A: Oh no, something broke.
04:08:56.220 - 04:08:57.160, Speaker B: I'm back.
04:08:58.340 - 04:09:03.040, Speaker A: Yeah, it broke at some point after you left. A second after you left.
04:09:08.820 - 04:09:10.240, Speaker B: Some peril issue.
04:09:12.220 - 04:09:19.200, Speaker A: It says like config not found. So you were passing config sh or something?
04:09:19.580 - 04:09:22.320, Speaker C: No, there are lots of files that does not exist.
04:09:25.150 - 04:09:42.770, Speaker B: It's still packaging. Packaging glip c. So I'm gonna wait for this one and then probably the solution is to clean the package and then retry it. Looks like somebody synced the repository.
04:09:45.070 - 04:09:46.010, Speaker C: Nope.
04:09:50.320 - 04:09:51.060, Speaker A: It.
04:10:42.420 - 04:10:45.760, Speaker B: I'm trying again after cleaning the image.
04:10:49.140 - 04:10:52.060, Speaker C: Does it mean we have to rebuild everything from scratch or.
04:10:52.180 - 04:11:55.230, Speaker B: No, I don't think so. Yeah, I think if. Fix it. Yeah, it's already. I'm building the unit ram fs. It's one of the latest stages. Okay, cool.
04:11:55.230 - 04:12:17.308, Speaker B: Let's see if that works. Oh, and that even fixed somehow.
04:12:17.364 - 04:12:20.720, Speaker C: Yes. Unrecognized command stored.
04:12:21.340 - 04:12:23.440, Speaker A: What is this? Unrecognized command?
04:12:24.830 - 04:12:28.090, Speaker B: Looks like the. The init script of the r builder.
04:12:28.670 - 04:12:29.450, Speaker C: Yeah.
04:12:30.110 - 04:12:30.890, Speaker A: Yes.
04:12:31.670 - 04:12:34.090, Speaker B: S 99. R builder command.
04:12:35.390 - 04:12:44.210, Speaker C: Okay, I think we just forgot some escaping or quads or something like this.
04:12:45.430 - 04:12:48.170, Speaker A: Is there a way where we can. Oh yeah, it's there.
04:12:54.960 - 04:13:07.180, Speaker B: So this is, this is r builder and for some reason it's. Before that it's giving an s 99.
04:13:12.240 - 04:13:23.262, Speaker C: Well, is there like a, a validation command for CSV init. Oh, what's that?
04:13:23.446 - 04:13:30.810, Speaker B: Whoops. Yeah, stop.
04:13:31.470 - 04:13:32.690, Speaker A: It's bricked.
04:13:34.790 - 04:13:41.010, Speaker B: Okay, I know the reason. Yeah, because it's, it's a binary.
04:13:44.240 - 04:13:46.100, Speaker A: It is supposed to be a binary.
04:13:46.800 - 04:13:49.560, Speaker B: No, the init shouldn't be a binary.
04:13:49.720 - 04:13:51.848, Speaker A: The init, all right, the init is.
04:13:51.864 - 04:15:04.090, Speaker B: A binary and that's okay. Why is it a binary? So we're copying in it and then. Yeah, here, that's where it's wrong. How big are these images? The binaries of rbuilder and rest? Oh, quite big. Why is arbiter that big?
04:15:05.030 - 04:15:25.260, Speaker A: Because arbuilder also uses a lot of dependencies that are, yeah, a lot of dependencies. I mean, when I build it with cargo in a static mode, it's verical correctly still. It's 1300 something dependencies in it.
04:15:25.640 - 04:15:26.780, Speaker B: That's huge.
04:15:27.120 - 04:16:09.826, Speaker A: Yep. Breadth has even less, but it's still bigger. I assume that its dependencies is just simply bigger. Interesting. Now it starts directly cool, this confidential vm snapshot. And this number afterwards, this hex number, is it the measurement by some chance? After the snapshot?
04:16:10.018 - 04:16:21.920, Speaker B: No, this is likely one of the git components. It I see of pokey proudly.
04:16:22.540 - 04:16:26.600, Speaker A: Okay. I thought like it's random, each time is different. I thought.
04:16:35.820 - 04:16:46.490, Speaker B: I didn't change this line. It's the URL for the, for the boost relay and it's giving a ton of parser.
04:16:49.310 - 04:17:01.690, Speaker A: I know why, I think because after, after you write URL you should put it in quotation and it's not in quotation in your like, look, it said expected quotation is missing.
04:17:02.350 - 04:17:04.650, Speaker C: Yes. So quotes are missing.
04:17:09.680 - 04:18:11.036, Speaker A: So yeah, before and after. Do you have to restart the system file or does it do it by.
04:18:11.068 - 04:18:20.200, Speaker B: Its own or I restarted it and now it's giving an error, invalid string length. After putting out the first.
04:18:23.470 - 04:18:55.550, Speaker A: Invert string length of what exactly? I recall seeing this somewhere. It is regarding the secrets that you pass at the start after the change. I think there are some, yeah, there are some variables that are missing and expecting in the file. I think you pass the coinbase, you pass the relay secret key, but you didn't pass the optimistic, you can pass optimistic mystic as well. And just you can even if you.
04:18:55.630 - 04:18:58.250, Speaker C: Want, even if you have this disabled.
04:18:59.670 - 04:19:01.090, Speaker A: What do you mean disabled?
04:19:01.830 - 04:19:04.622, Speaker C: Because we explicitly disabled. Optimistic.
04:19:04.766 - 04:19:13.930, Speaker A: Yeah, I think, I think, I think, I think they are a must. I think at this point there are a must. These three, optimistic, realistic, risky and so on.
04:19:16.560 - 04:19:18.940, Speaker B: Just going to take the relay key.
04:19:21.320 - 04:19:36.820, Speaker A: Yeah, you can use the same one and did it solve it? No, actually.
04:19:40.720 - 04:19:41.900, Speaker B: Infinitely.
04:19:42.450 - 04:20:25.360, Speaker A: Yeah, because here it's, well, it starts and then reads the configuration and then there is something that is missing from the configuration that tells you invalid string length. But let me remember what was exactly the missing part. Yes, it should be part of the configuration. So can you go to the configuration?
04:20:27.940 - 04:20:59.738, Speaker B: Yeah, I have the configuration of, I'm just going to replace the, the cl node because we weren't sure whether that's going to work or not with the actual value. See if that's going to fix it. And no, it's not. Didn't fix it. So.
04:20:59.914 - 04:21:07.418, Speaker A: Okay, can you open the config s quickly? Where are the three secrets? They should be here somewhere.
04:21:07.594 - 04:21:12.170, Speaker B: Reading from the env, there's only one secret.
04:21:12.250 - 04:21:30.640, Speaker A: That's being, that's, that's, that's what they meant. They should be here, the three of them, like you should, you should really write optimistic under underscore relay, underscore secret, underscore x key and then get them from the end because the config file expects these three to be there.
04:21:31.340 - 04:21:38.240, Speaker B: So that's, that will be coinbase secret key and optimistic. Okay.
04:21:38.660 - 04:21:42.720, Speaker A: Yeah, but they have different writing. Like they aren't small.
04:21:43.380 - 04:21:45.480, Speaker B: Yeah, but they have the same.
04:21:46.180 - 04:21:56.010, Speaker A: Yes, yes, they have the same, yeah. Okay, let me fetch them for you. Maybe you can just copy paste them from the chat instead.
04:21:56.310 - 04:21:59.570, Speaker C: Yeah, I just pasted the three of them.
04:22:02.310 - 04:22:04.970, Speaker A: Yes, exactly. That's how they should look like.
04:22:07.630 - 04:22:13.050, Speaker C: Sorry about that because I removed them before sending you.
04:22:13.670 - 04:22:49.120, Speaker A: No problem, I just recalled it because I saw this issue when one of the instances crashed after the update of the binary. I mean the error message was not very helpful as well, like invalid string length is kind of misleading.
04:23:22.870 - 04:23:28.890, Speaker B: Hi, sorry, I just dropped out. Can you hear me?
04:23:29.470 - 04:23:30.210, Speaker C: Yes.
04:23:38.880 - 04:23:44.220, Speaker A: Do you still have, do you still have the co host rights? But it seems you are so.
04:23:47.760 - 04:23:57.220, Speaker B: But I missed, all of the chat messages are gone. Could you resend them? The last part?
04:23:58.040 - 04:24:19.924, Speaker A: Yes. So this is the part that you need to copy paste and side because it is expecting them to be looking like this. All of them? All three of them. Do you want me to copy all the chat or this is enough for now?
04:24:20.052 - 04:24:39.770, Speaker B: No, that's enough for now. Thanks. Blocklist file. Okay, I have the wrong blacklist file. Can somebody give me the block list file? The effect?
04:24:40.670 - 04:24:46.686, Speaker A: Yeah, I can send it to you. Where do you want it? Let me copy, send it to your machine.
04:24:46.838 - 04:24:49.650, Speaker C: Can I just put the empty JSON array?
04:24:50.790 - 04:24:52.930, Speaker B: Yeah, maybe I can do that.
04:24:53.720 - 04:25:07.300, Speaker C: Not the square brackets. Yep. Okay.
04:25:09.760 - 04:25:51.800, Speaker A: No validation URL's ah, so you still need the validation URL despite the dry run, so you can provide the validation URL and yeah, how does that look like? Ah, you cannot, wait a second, I think you cannot enable both optimistic and dry run. Maybe disabled optimistic, it is already optimistic enabled, false. Then just uncomment this one since, but then we need to make sure that the address is correct.
04:25:53.100 - 04:25:55.636, Speaker B: This one, the dry run validation URL.
04:25:55.788 - 04:26:03.068, Speaker A: Yes, you can uncomment it and give it the address above that you gave 192. I think this is the host, if.
04:26:03.084 - 04:26:07.748, Speaker B: I'm not wrong, this looks like it's a rest node.
04:26:07.884 - 04:26:09.760, Speaker A: Oh, and then you keep it localhost.
04:26:10.950 - 04:26:12.358, Speaker B: So that's correct, right?
04:26:12.534 - 04:26:15.890, Speaker A: Yeah, it should be localhost since both running on the same machine.
04:26:17.550 - 04:26:19.370, Speaker B: I'm going to try this one again.
04:26:39.720 - 04:26:41.780, Speaker A: Unable to open database file.
04:26:45.040 - 04:26:53.432, Speaker C: You run it as a root user. Yeah, maybe the pass does not exist. The directory should exist I think.
04:26:53.496 - 04:26:54.140, Speaker A: Yeah.
04:27:21.210 - 04:27:23.070, Speaker B: Database path is correct.
04:27:24.490 - 04:27:28.000, Speaker C: Is there a ret directory in the variable tile?
04:27:28.940 - 04:27:43.520, Speaker B: Yeah, let's see here. Does it, is it requiring a sync database?
04:27:45.460 - 04:27:52.760, Speaker C: I don't think so. Is there a static files directory also exist?
04:28:05.140 - 04:28:07.600, Speaker B: I mean this could be several things.
04:28:13.020 - 04:28:17.100, Speaker C: And it's running as root, right? The service is running as root.
04:28:17.220 - 04:28:38.880, Speaker B: Yeah, I mean there's some special, I don't know, but there's some special lock I remember required to open the database. And maybe this is not supported by this minimal Linux kernel.
04:28:40.420 - 04:28:53.330, Speaker C: No, I don't think that's the issue. Can I show the LSLA on the database directory?
04:29:10.200 - 04:29:16.300, Speaker A: I can see it's only read only, but yeah, we are running it under root, so you can, it should be able to write as well.
04:29:18.880 - 04:29:21.856, Speaker C: No, it's a read write, yes, only.
04:29:21.888 - 04:29:25.220, Speaker A: For root I think, or only for user?
04:29:35.650 - 04:29:38.190, Speaker B: Yeah, obviously I'm root.
04:29:41.210 - 04:30:06.870, Speaker C: Can you show me the config file once again? Ah, maybe this far volatile or builder directory does not exist. The error storage path parameter.
04:30:36.380 - 04:30:37.640, Speaker B: Oh, looks good.
04:30:52.140 - 04:30:53.480, Speaker A: Looks good to me.
04:30:56.070 - 04:30:58.490, Speaker C: Yes, something is running.
04:30:59.950 - 04:31:07.410, Speaker A: Yeah, it seems to be stable, but of course it's not building anything because it's waiting for rest to sync.
04:31:09.350 - 04:31:17.570, Speaker B: Cool. Okay, I'm going to take the time to sync what we've done here with the actual config files.
04:31:18.070 - 04:31:37.804, Speaker A: Yes, maybe copy everything from the config file from within the vm and then paste it in the config file outside the host so it will be the same. Oh, okay.
04:31:37.852 - 04:31:46.610, Speaker B: Or this, I mean I can't access it, so I hope to like this.
04:31:50.150 - 04:31:56.130, Speaker A: I mean if you, no, apparently, wasn't this the address of the host?
04:31:57.230 - 04:31:59.490, Speaker B: No, that's one. One.
04:31:59.790 - 04:32:00.650, Speaker A: Okay.
04:32:01.110 - 04:32:05.690, Speaker C: But it's not two, it's 25, something like this.
04:32:13.920 - 04:32:18.060, Speaker B: Oh, that's interesting. I didn't enable it at all.
04:32:20.160 - 04:32:32.060, Speaker A: How is it even getting the ha. Okay, I think it's not connected to the lighthouse then.
04:32:33.600 - 04:33:06.320, Speaker B: Yeah, we didn't check the, didn't check the note. Okay, so which are the ones I want to copy.
04:33:09.100 - 04:33:13.292, Speaker A: You can use directly SCP and then get it from there to here.
04:33:13.436 - 04:33:21.500, Speaker B: Yeah, I'm just wondering, was the init that I changed or was there anything else that I changed? Yeah, we need to, we need, um.
04:33:21.660 - 04:33:29.010, Speaker A: Yeah, slightly changed. The init where you added the. Yeah, the keys. And.
04:34:10.599 - 04:35:15.822, Speaker B: And the other one was the configured. Okay, and the other, what is the US relay API tokenization? Does anyone know whether we're going to need that or can I just remove.
04:35:16.006 - 04:35:17.570, Speaker C: You can just remove it.
04:35:22.350 - 04:36:17.989, Speaker B: Good. For now. Oh, what another thing we need to add here is, I wonder why isn't. So we have this config and I'm giving it the r builder as that's the arrow storage path. Is there any other place where also this is the only one, so maybe I just change the error storage path. Right, it's maybe into temp. Does the r builder have a folder itself?
04:36:20.849 - 04:36:42.280, Speaker C: No, but I mean on our builders we define a working directory so it works with, it can work with relative paths, but I mean here we have to do default pass. The absolute path.
04:36:44.020 - 04:36:46.372, Speaker B: Is. Okay, if I just set it to.
04:36:46.396 - 04:36:53.246, Speaker C: Temp, should be fine. Maybe we can just even comment this out, but I'm not sure if it will work.
04:36:53.438 - 04:36:54.330, Speaker B: Okay.
04:36:56.230 - 04:37:05.190, Speaker A: Also you created a directory somewhere, and can we include in the bitbake that this directory is created beforehand so we.
04:37:05.230 - 04:37:12.078, Speaker B: No, exactly. That's why I've changed this line here, because now we don't create a directory anymore.
04:37:12.254 - 04:37:17.939, Speaker A: All right, fair enough. It.
04:37:48.130 - 04:38:20.160, Speaker B: Yeah, that's it. Now the dry run. Hey, this took a bit longer, but that's good, I think. I hope this helps with you getting more familiar with the octave.
04:38:23.540 - 04:38:50.690, Speaker A: Yeah, definitely. That's actually very cool. Thank you for doing this. I'm still very interested in configuring it to minimize its service. Besides that file that you shared with us, where you are adding the dependencies, is there any other place where you can configure it or that's the only.
04:38:50.990 - 04:39:49.695, Speaker B: Spot where you can. There's more. You can configure the whole kernel in ways you want it. Like you can give either the whole kernel config or modification files that change just a few kernel variables, kernel config variables, I mean, what else? But I mean, the inert ramfest is the thing that's most important because there you put all the code which eventually lands in the image. So that's the init ramfs, the kernel, and the rest of the boot process. I mean, we had the EFI loader, which is very small, so we can ignore that. And there's the kernel, and then there's the init ramfest.
04:39:49.695 - 04:40:12.990, Speaker B: And there you can, you can try to reduce things more. But I think like busybox is something we probably, definitely need. Init system is also very nice, but maybe we can skip that. I think the init system is something we could probably skip and run our own, but it's also not very big. Let's start.
04:40:14.010 - 04:40:22.614, Speaker A: Is the octo like I saw, you can't define the configuration like TDX as your target. Is this from Yocto or is it from you?
04:40:22.662 - 04:40:42.970, Speaker B: Like you, that's what I wrote. I give a special TDX target and SAV SMP target, and depending on which target you give, it changes. For example the kernel configuration, which is like now it doesn't include the SCV SMP drivers, but for the TDX.
04:40:45.350 - 04:40:51.046, Speaker A: So these are your changes, like your configurations, and they were not supported by Yocto before.
04:40:51.238 - 04:40:52.210, Speaker B: Exactly.
04:40:53.750 - 04:41:20.770, Speaker A: Awesome. Because I was wondering if it's, if it's TDX aware and in the sense like if you look at the TDX canonical repo, they have some scripts that to set up the host and the set up the guests. Are you doing something similar to set up the guest as well when you are doing these changes or not yet regarding for attestation other purposes?
04:41:21.910 - 04:41:28.410, Speaker B: No, I think I was distracted by this error. Could you repeat the question?
04:41:30.550 - 04:42:49.130, Speaker A: I was wondering if you are doing like when you are setting up the configuration to make it TDX aware this image, if you are doing similar to the TDX canonical part where they are copying scripts to set up the host and the guest, like there are scripts for guest and there are scripts for host and there are also some kind of setup for attestation on host and attestation on guest. I can show you if you open the repo, if you go to the file guest tools, sorry, folder guest tools. They have here image and inside image they have this created the image and then created the image. They go through the process what they are doing here and at some point they are copying down inside the vert customize down, down. Yes, inside here they are copying not only these, they are copying over also some kind of files down. Yeah exactly. Down the scripts, many scripts which.
04:42:49.250 - 04:42:53.494, Speaker B: Sorry, I'm lost here. Down.
04:42:53.682 - 04:43:37.420, Speaker A: Yeah, yeah it's down. It's copy in exactly the scripts and then upon starting the VM they are also executing those scripts in cloud init upon and then. Yeah, you see the setup sh is basically being executed and then setup sh is running these scripts that's being copied over. And then basically your image then will be created with all of those setup where it will be TDX aware and has the support of attestation and so on. Okay. I was like just wondering if your changes here with a kernel configuration is doing something similar to what they are doing to enable.
04:43:37.800 - 04:44:08.790, Speaker B: For now the only TDX enablement is just, I mean I can show you. Give me 1 second. So that's, that's it, I've upped the Linux version, I've up the Yocto version, poke version and then.
04:44:09.970 - 04:44:13.440, Speaker A: I'm sorry, where did you get this scart?
04:44:14.380 - 04:44:24.764, Speaker B: That's basically, it's like, I don't know, what are your current Ubuntu versions? It's a name for the version.
04:44:24.932 - 04:44:27.052, Speaker A: It's okay. Like focal and so on. Okay.
04:44:27.196 - 04:44:52.720, Speaker B: Yeah. And then this is the machine config definition. I think this is. Just copy it over from SCV as in and change a few specifics. Let's see, where's the. Somewhere. I'm probably going to give it some TDX info here.
04:44:52.720 - 04:44:55.240, Speaker B: This. No.
04:44:57.460 - 04:45:10.070, Speaker A: Yeah, I recall Qamo could simulate the X environment if you are running it on a TDX host machine like enabled TDX host machine.
04:45:16.490 - 04:45:20.202, Speaker B: No it's probably not. Here, let's look further.
04:45:20.386 - 04:45:21.230, Speaker A: Okay.
04:45:26.370 - 04:46:06.240, Speaker B: This is I think a fixed to this, just a fix to make it work with the recent pokey image package install. There's also nothing. Also just a fix. And here. Yeah here I think these are the important ones. So within the Linux yacht. So bitbake, I'm defining a kernel machine, TDX, and it's compatible with a TDX machine.
04:46:06.240 - 04:46:40.330, Speaker B: And the, so if I'm, if I'm building with a TDX machine, it basically says add these kernel features. These are not TDX related so they should be commented out and added in some other way. But those ones are definitely TDX related. You can see up here, it's basically I just copy pasted the SeV SMP, remove this part and added this part.
04:46:40.670 - 04:46:42.170, Speaker A: Yeah, makes sense.
04:46:43.270 - 04:47:04.240, Speaker B: And this is the actual TDX config of kernel. Those are the environment variables that I've added. Yeah, that's it. That's the even part of is just fixing other stuff. So TDX enablement was very, very small.
04:47:05.540 - 04:47:06.720, Speaker A: Yeah, that's great.
04:47:08.300 - 04:47:36.010, Speaker B: Okay, so this doesn't work. Didn't work. No headers and static files checker, static files path configuration. I remember I did one thing wrong and that was to give the OFAC JSON an empty list. Maybe that fixes it.
04:47:38.200 - 04:47:42.980, Speaker C: No, I think it's about the static files directory which we checked and it exists.
04:47:48.800 - 04:48:12.890, Speaker B: Okay, so maybe, oh so maybe if I rerun it now it will work because the rest. So we, there isn't a race condition here because ref probably didn't start for some reason. So maybe I need to give Reth as a dependency for our builder.
04:48:12.930 - 04:48:17.790, Speaker A: Yes. Like some similar to a system D where you say after execute, after.
04:48:18.850 - 04:48:30.000, Speaker B: Okay, I don't know how to do that.
04:48:32.500 - 04:48:33.720, Speaker C: I'm going to check.
04:48:37.660 - 04:48:38.684, Speaker B: See if it.
04:48:38.852 - 04:48:53.840, Speaker C: Is a required start header like this. You should add it to the beginning of the unit file to the service.
04:48:56.980 - 04:49:09.320, Speaker B: Give it that did the trick for this. And now let's look card start. And I would put breath here.
04:49:09.980 - 04:49:11.440, Speaker C: Yes, yes.
04:49:17.780 - 04:49:24.680, Speaker B: This is for SYSV in it, right. Okay, I see required start working.
04:49:30.420 - 04:49:35.220, Speaker A: But isn't this commented out? You have to edit. Edit, right? Or am I wrong?
04:49:35.380 - 04:49:46.010, Speaker B: No, I think these are comments that definitely are being read. I mean it defines the default start levels and the levels.
04:49:46.510 - 04:49:55.030, Speaker A: Oh, okay. Should it have a dollar sign before it.
04:49:55.150 - 04:50:05.810, Speaker B: Let's have a look. So there's networking.
04:50:07.030 - 04:50:09.610, Speaker A: Yes, I would put a dollar sign before.
04:50:13.530 - 04:50:36.610, Speaker B: I don't see a syslog here. And remote FSD.
04:50:49.180 - 04:51:09.050, Speaker C: Just, just keep it as is. I think the doc say it's, it can be either, whatever that means. The explicit unit name or, or a descriptive placeholder, whatever that means.
04:51:10.470 - 04:51:13.570, Speaker B: Okay. And I'll try it like that.
04:51:24.350 - 04:51:28.370, Speaker A: So you don't require the dollar sign before the thingy.
04:51:28.910 - 04:51:36.010, Speaker C: You may or may not include this. I mean it will mean different things. But.
04:51:37.710 - 04:51:38.730, Speaker A: Interesting.
04:51:40.950 - 04:51:42.210, Speaker B: By the way, this is.
04:51:44.230 - 04:51:46.014, Speaker A: This is huge, right?
04:51:46.182 - 04:52:01.220, Speaker B: No, it's you, you have to count in the 125 or maybe even more megabytes of, of the binaries of breadth and r builder.
04:52:03.240 - 04:52:08.700, Speaker A: Oh, wait a second. But I thought those only the inits. What you are measuring here and not.
04:52:09.320 - 04:52:10.980, Speaker B: I'm measuring the whole system.
04:52:11.600 - 04:52:26.786, Speaker A: Ah, you are the whole system. Never mind. Okay, okay. Okay. I thought you are. Yeah, yeah, that makes sense. The r builder and the r builder and rest together are almost 140.
04:52:26.786 - 04:52:35.310, Speaker A: And the rest is like 235 megabytes for the rest.
04:52:40.130 - 04:53:03.880, Speaker B: Okay. Yeah. So of these 175 megabytes, user takes up 165. There is seven megabytes in lib. We have some certificates.
04:53:05.220 - 04:53:11.680, Speaker A: Do we need the lips? Since all the binaries are statically built, probably nothing. Okay.
04:53:18.540 - 04:54:06.340, Speaker B: Well part of it we need for, we do need it for fdisk and I think probably some stuff like fsv size but yeah, not much. And then. Yeah, but most of this is strace. We can remove and every, everything you see here that's busybox. So pretty small. Rest is big. Our builder is big.
04:54:06.340 - 04:54:10.420, Speaker B: Openssl. Why do we need openssl? I don't know.
04:54:10.920 - 04:54:16.980, Speaker A: Because maybe you added it in the dependencies in a bitbake, the big file. So that was added.
04:54:17.920 - 04:54:18.780, Speaker B: Okay.
04:54:20.000 - 04:54:21.900, Speaker A: The flower we don't need. Yeah.
04:54:22.520 - 04:54:28.540, Speaker B: And we also don't need these ones. So yeah, we can reduce some, some stuff.
04:54:28.840 - 04:54:32.500, Speaker A: Yeah, definitely. But cool.
04:54:44.200 - 04:55:02.630, Speaker B: Just see we have 3 hours left and it looks like we're almost done with this part. Hopefully. Any thoughts or wishes regarding what we should do next.
04:55:05.450 - 04:55:12.786, Speaker A: Attestation, if we can somehow make it aware. Andrew? Andrew is there, I see there. Hi.
04:55:12.938 - 04:55:13.950, Speaker B: Hi Andrew.
04:55:15.090 - 04:55:33.000, Speaker D: Yeah, any progress on attestation would be cool. And I was also thinking this has gone into a bunch of the builder specific things and I'm interested in the hello world or the trusted setup or other small examples too. And if we're going to attack hello attestation, maybe I'm one of those too.
04:55:36.380 - 04:56:11.792, Speaker B: At the station. So attestation we can do, but that will require us to push the image to the cloud to verify it because it depends on azure and pushing it to the cloud is each image you create. It takes roughly 15 to 20 minutes to push it. So that's a bit, not that much fun to wait for this time.
04:56:11.976 - 04:56:43.052, Speaker D: Could we try instead to poke at how to get the SGX enclave or TDX guest device available? Yeah, you had mentioned earlier before the break that we could look through some of the scripts in canonical TDX because that's what they used to set up these guest tools on the Ubuntu image. And maybe it's possible to get some of those. Yeah, basically I think if we could get the TDX guest device to pop up in Yocto that would be most of the way.
04:56:43.236 - 04:56:51.800, Speaker B: But this is, this is Ubuntu. Right. And it doesn't have the TDX guest image.
04:56:55.980 - 04:57:43.560, Speaker D: But this isn't from the, you know, this is running, I think the Amazon modified one, not the canonical TDX one that it does on the other, like on our bare metal TDX instances, like we have a reference machine elsewhere that has the guest enclave there. But yeah, it's got a slightly different kernel. And yeah, I'm surprised when you did, because you did mod probe TDX. So there is a TDX module, which makes sense because it's using TDX somehow. So maybe just this guest has the wrong version or somehow has disabled or not included the relevant TDX device, other than trying to compare against the Ubuntu reference that does have it versus this one in Azure, that doesn't. That's the only way I could think of to approach it.
04:57:44.300 - 04:58:26.030, Speaker B: Well, I can tell you that I've run other than Ubuntu, I've run red hat confidential vms with their image, and I've run this Yocto VM and TDX, and all of them haven't been able. With all of them, the TDX guessed at the station part. Like the device didn't show up. And I know for a fact that at least this one, the VM image, it does have them included. This is actually here somewhere. Yeah, here's the TDX guest driver.
04:58:28.130 - 04:58:46.242, Speaker D: So the driver's present. Is there some way to look at log messages from the driver? I mean, how is the driver present? I mean, if it was failing because you load the driver and it crashes, then, okay, I wouldn't expect it there. But given that there is the TDX driver, but there's not any TDX guest image like that.
04:58:46.266 - 04:58:46.830, Speaker C: Just.
04:58:49.010 - 04:59:02.590, Speaker D: Surprising. And again, my point is that we have a ubuntu that does have it, and we have this Ubuntu that does not have it. So by comparing those, we might be able to figure out what it takes to make it show up.
04:59:04.690 - 05:00:01.970, Speaker B: Yeah, let's look at the scripts. Let me just quickly fix this. If we have those running. No, that didn't fix it. But I mean, we can. We know what the problem is and we can look later. Does somebody want to take over for the moment? I need to take a small break.
05:00:01.970 - 05:00:04.700, Speaker B: Two minutes. I'm back it.
05:00:41.770 - 05:02:01.832, Speaker A: So far, this looks actually very, very interesting with the octo, if we can, lower end target would be like to have this complete, reproducible build with all the binary. I think the next step would be to make it somehow in a dockerized way so basically everyone else could be able to reproduce it, because I think it's still using some kind of off the host dependencies while building. So probably this should be also on the final agenda. I would be interested also, like, in what's really included. Like, of course, now we just saw, like, there are many stuff that can be taken out, but what are the, like this mini minimally optokernal if. Is it the most minimum thing that we can reach to or is there like we can do more? And does it include or can we include or should we include the micro patches that intel provides against some attacks, side chain attacks like the mitigation regarding spectre and wait second, Andrew is asking.
05:02:01.896 - 05:02:03.060, Speaker D: Yeah, I added myself.
05:02:03.520 - 05:02:14.238, Speaker A: Yeah. Awesome. Yeah. So cool. So what do you think, Andrew, about the whole thing? I'm not sure if he was there from the start of the call.
05:02:14.384 - 05:02:19.830, Speaker D: Yeah, I caught up from the start of the. Caught up. I listened on two x speed and so I caught all of them.
05:02:20.490 - 05:02:20.778, Speaker B: Yeah.
05:02:20.794 - 05:02:43.600, Speaker D: And I loved all the discussion that you had, especially on these reproducibility and attestation topics. Oh, and you know what it takes to make it to have an end to end guarantee when you consider updating the code because you might want to apply an update and maybe you apply the update to the builder binary that's in the image without having to read start it necessarily. But then what is it that your attestation is giving you?
05:02:43.900 - 05:02:44.724, Speaker A: Exactly.
05:02:44.852 - 05:02:46.280, Speaker D: Interesting discussion.
05:02:47.020 - 05:03:18.630, Speaker A: Exactly. That was also part of the discussion. So, yeah, we mentioned you when you were not there regarding if you were able to produce like a testation code from TDX. And I told them that you did. Yep. And yeah, we were looking to it. Yeah, we were looking into it because Frieder was looking at that, at that repository, which is decommissioned from intel, if you call it.
05:03:18.630 - 05:03:29.678, Speaker A: They were using this TDX guest device, which is not anymore there. So, yeah, that's why we mentioned that you might have more lights there that.
05:03:29.694 - 05:03:30.690, Speaker B: You can show us.
05:03:31.080 - 05:03:40.700, Speaker D: I mean, is. Well, is that the case, that it's decommissioned? I mean, like deprecated? Like they're no longer. The plan is no longer to use the TDX device at all in.
05:03:41.440 - 05:03:46.816, Speaker A: That's a good question. So the repo itself, they said it's decommissioned and not being continued. So the repo.
05:03:46.888 - 05:03:47.232, Speaker C: Yeah.
05:03:47.296 - 05:03:47.584, Speaker A: Yeah.
05:03:47.632 - 05:04:17.466, Speaker D: Well, I assume that was just moving somehow. I got that. I got that it was somehow a. What to say about it, a tech preview and that they haven't necessarily kept the tech preview, you know, fully that ran for its thing and now it's not necessarily the way it's going. But I wasn't sure that there was a specific deprecation, you know, thing on that. I know what you mean about the. Well, I mean, and for that matter, this repo doesn't say it's decommissioned at all either.
05:04:17.466 - 05:04:29.920, Speaker D: This can be local TDX here. I'm only sharing my terminal window. Not my whole browser, but. Okay, so this one's not decommissioned and this one makes available the device. So I'm not sure what you mean.
05:04:31.460 - 05:04:44.000, Speaker A: Yes, I mean we tried to show these devices on one of the TDX instances on Azure and they were not there. So that was a weird thing.
05:04:44.860 - 05:05:28.028, Speaker D: How do you build, what Ubuntu do you start from? I'm running from a particular version of 23 ten that has some host stuff in it that was intel built and came with it. This is on the intel software development, an intel provided environment that is bare metal. So I'm on this host here and I have the ability to run my own entire thing from scratch. So I have the bare metal, this is the bare metal node then basically. But I am running their recommended starting image, which has host support for TDX. This Azure must be running some equivalent of, but completely opaque. You have no idea.
05:05:28.028 - 05:05:33.884, Speaker D: They don't make any claim about what is Azure running as their host kernel. That's behind the abstraction, as part of.
05:05:33.892 - 05:05:42.000, Speaker B: Their, they're not even running Linux, it's Hyper V, their windows.
05:05:46.900 - 05:06:11.688, Speaker D: When I follow the instructions for setting up a guest, there's a similar thing where it pulls a kernel or some things from some third party. So I'm not sure how to follow through those. I can try to redo what I did too, actually here. I don't even see where I created these image, but there was a little build image thing here.
05:06:11.864 - 05:06:12.620, Speaker A: Yes.
05:06:13.080 - 05:06:15.620, Speaker D: Yeah, the create TD image.
05:06:17.080 - 05:06:17.860, Speaker A: Yes.
05:06:20.080 - 05:06:44.710, Speaker D: Does this in some ways start from a different base image? Obviously the octolinux is an entirely separate base. Oh, but for the Ubuntu that you have. Yeah, for the Ubuntu in Azure, does it start from a meaningfully different base image? Is it possible to see where it likes, you know, convert diverges from, you know, from this, like they use a different version of the TDX driver? I'm not sure if that's what.
05:06:45.530 - 05:07:13.010, Speaker A: That's a good question. I can test now actually with the ones that we are running. Let me look at it. So the one that you are running is in Ubuntu 22, not 23 for starter. And it's not the server version, it's the 220 four. So it's the version. So they are definitely different.
05:07:13.010 - 05:07:57.090, Speaker A: I was playing with these actually, maybe it would be great later if you can give me access to this bare metal if I'm allowed to, because I'm creating some kind of scripts based on this to canonical and trying to make a reproducible build where I can inject binaries using this repo. So I'm building on top of it. But I would, I was more interested in what Friedr is doing with the yocto part because I want something minimal. But I also wanted to play around at the station and this repo was the only hope for me to test it. But I couldn't because I didn't have any hardware and creamo didn't help me either because my machine does not support DDX so it ended in depth.
05:07:57.550 - 05:08:30.282, Speaker D: Well, okay, as soon as I flip off here, I'll add you to this node so you have it to test. I mean, the way that I would proceed then is maybe we can look for how the code for. I mean, I believe that this is all just open and this is in the Ubuntu 23 ten stuff. So I'm not surprised if that's not available in the image that you have now. And that won't for Azure. And that will matter anyway if our goal is to make this available in Yokto. But if we look at how they instantiate that TDX guest device, then that can be how we go about adding it into Yocto, which is maybe too hard for right now.
05:08:30.282 - 05:08:53.570, Speaker D: But that's obviously, I guess hopefully where we end up and that'll shed light on what it takes to add it to there. And maybe for Azure it's possible to run one of these, something based on this instead. Maybe then that'll automatically have both ways of doing attestation. Yeah, definitely. Okay. Yeah. Before I close my thing, I will show, just show going through the attestation then.
05:09:04.310 - 05:09:05.810, Speaker B: All right, so this is.
05:09:07.550 - 05:09:09.370, Speaker D: We have that TDX cast.
05:09:09.750 - 05:09:10.650, Speaker A: Oh, cool.
05:09:20.010 - 05:10:06.142, Speaker D: Coming up from a user directory. I can't remember where. What stuff's I followed to do. Okay, maybe this is something that's mentioned. It's just in their readme steps that I followed. I don't know about this intel trust authority stuff that seems to me like the TDx version of IIs was with Deskgx and Epid and stuff. I think that that's one way of doing it.
05:10:06.142 - 05:10:21.206, Speaker D: But then the quote library verification is better. So I think I skipped that one and just tried to get the. Oh, okay. I should be looking. Okay, I think this is, yeah, after.
05:10:21.398 - 05:10:30.040, Speaker A: If you follow their steps, the setup of the attestation, they install these under that path and then you can use it in order to generate an attestation.
05:10:30.620 - 05:10:59.622, Speaker D: Okay, so great. This is on there and I clearly had just unmake this and you can run this and probably suddenly. Great. All right. And this I don't care about because I don't think I needed those. And yeah, so this did that whole thing and then I had the quote and then this is how I would generate quotes. And then, you know, I did something for parsing and looking at the quotes.
05:10:59.622 - 05:11:26.940, Speaker D: I think I remember trying to make Gramine, I don't know if Grammy on the guest here, but um, this was parsimony from the first inspection. This matched what we expected from the TDX decap quote format. So I'd know straight where to go from there. And then there's the quoting verification library. So that would be the next step to go for verifying those. Okay, I'll yield the screen share, but um. Yeah.
05:11:28.840 - 05:11:58.400, Speaker A: Very nice. Yeah, so I don't know, like the next step, would we be able to reproduce what the TDX canonical, those scripts that are setting up the station parts, could we just try to put them into Yocto and see if they would work out of the box or would they require much more work because the script seems not so large and what they are doing is not too heavy to what I saw.
05:11:59.660 - 05:12:10.240, Speaker B: Do you know what exactly is required? Like, I mean there's quite a few things running in those scripts. Yes, like installing software.
05:12:13.190 - 05:12:30.678, Speaker A: They are doing several stuff. So I didn't go through script by script because I wasn't able to produce the attestation. But besides installing the software, setting up the guests with attestation, can you share your screen maybe to show the.
05:12:30.854 - 05:12:32.010, Speaker B: Yeah, 1 second.
05:12:34.430 - 05:12:53.690, Speaker A: They'Re adding their own software that does the LibtDX attest dev and the CLI for it. And then they are doing the installation in that path that Andrew just showed us under user shared doc libtdx attestdev examples.
05:12:54.390 - 05:12:57.410, Speaker B: Are you talking about this script?
05:12:58.830 - 05:14:12.708, Speaker A: Let me see your screen. Yes. So for example, this is one of the scripts that is being copied into the VM through the cloud init and other the guest tools where they create Td Vm and basically they copy all these scripts and then run them inside the VM as well in order to set it up after the first boot. And then afterwards you are able to use the TDX guest module and generate attestation as Andrew did. The question is now if we have now this yocto that we bit baked and with all the binaries that we have since the start, maybe you could also add these scripts as a cloud init, for example, that they are executed upon the first boot because cloud init is only executed once after the first boot and set it up to be able to generate attestations afterwards. So this would be probably the next step that we should do. See if Yocto is compatible with these libraries that they are adding here.
05:14:12.708 - 05:14:23.640, Speaker A: And if yes then that would be great. Actually then we have a minimal yocto image with attestation libraries that we can generate quote.
05:14:24.030 - 05:14:31.974, Speaker B: So you see here there's a libtdx a test dev. Exactly where did they get this from?
05:14:32.142 - 05:14:45.170, Speaker A: It's from the repository above that they are adding from Kabul team to the x release. So if I understood this correctly, this is an in house implementation. Let me look where this is coming from.
05:14:45.590 - 05:14:48.900, Speaker B: It looks like a dev library. So it's just source code right?
05:14:49.070 - 05:14:58.480, Speaker A: Yes it's from the canonical team by the way, like but let me check where it is coming from.
05:14:58.520 - 05:15:05.584, Speaker B: If it's what is the TDX attest binary? Is that what you just ran?
05:15:05.752 - 05:15:14.820, Speaker A: I think this is, I think this is the binary that speaks to the, to the TDX guest module that generates the.
05:15:15.680 - 05:15:24.688, Speaker B: I don't see anything yet that's enabling the TDX attest. Sorry the TDX get device.
05:15:24.864 - 05:16:09.484, Speaker A: Yeah the device is being passed by the QMO command. And the other if you go to the guest tools, the folder on the left, no on the left or here, never mind. Here too there is run td sh I hope I'm not wrong. Down you are running the qemo command and you are passing some file. Yeah exactly. You are passing here confidential guest support tdx above then minus machine up 39 and yeah exactly. And here you are passing confidential guest support equal to the x and I assume this qaemo version when you pass this command.
05:16:09.484 - 05:16:24.000, Speaker A: I wasn't able to run this command because my QMO didn't support it but I assumed that this is basically what is enabling the device inside the vm upon startup.
05:16:25.980 - 05:16:44.094, Speaker C: One question I don't remember. I also checked out this repository but they installing this chemo also from some patched repositories because I think vanilla chemo doesn't have this gdf support yet.
05:16:44.142 - 05:17:33.120, Speaker A: Yes I mean in this report they didn't mention to install specific chemo but I would assume yes you would require specific patched qemo. Maybe it is one of the setup in the setup scripts there setup guest sorry setup Tdx host maybe it's part of it where it's patching your cueball to take that patch probably and rebuild it. By the way also line 38 object TDX guest this was also I wasn't able to run it with this command so I had to remove this as well, in order to make my experimentation to work. But yes, I think I. These two additions to the Qemo run command would make it TDX aware and run the write.
05:17:34.540 - 05:17:38.604, Speaker B: You are aware that we cannot do this on Azure because we don't have.
05:17:38.652 - 05:17:50.970, Speaker A: Yes, yes, exactly. So this is the question here of those setup files. Those setup, okay, your meaning in general that Azure is not enabling these for you wonder.
05:17:51.590 - 05:17:57.370, Speaker D: I mean, we also don't know that they're not. Right. It's possible that it's something on the guest side, like this is host side.
05:17:57.910 - 05:17:58.318, Speaker A: Exactly.
05:17:58.334 - 05:18:06.530, Speaker D: And it's possible that the host is doing everything sufficient and we just need to do something on the guest side to have the TDX guest device appear.
05:18:06.990 - 05:18:52.930, Speaker A: Exactly. Also, to my understanding from this repo that you only can generate the attestation after you boot your machine and then generate it from within the machine. But I would like to experiment how would I generate this measurement without booting this machine? Like if I can build the image and then from outside generate the measurement, this would be actually more, more devx, better like for the devex than just booting the image once to generate the measurement and then close it because yeah, I wouldn't expect everyone that is trying to use service running in tee to build reproducibly the image and then reboot it once to get the measurement and then do the attestation. This would be too much.
05:18:56.350 - 05:19:06.490, Speaker D: Yeah, I definitely think that you shouldn't have to run a TDX image and do the attestation step just to figure out what the reference value should be. You definitely don't have to in SGX.
05:19:07.190 - 05:19:20.620, Speaker A: Exactly. And I want to have something like that. I want to build it if it's not even there, maybe we can look into ways to expose it if we use the specs, if they offer such a thing, and we can build it on our own.
05:19:22.040 - 05:19:50.590, Speaker D: I found that there was an Ubuntu package that is Linux modules. I found this pilot searching for issues in that canonical TDX repo. But I don't know, maybe it's relevant. I'm just suggesting other things that are troubleshooting that might add support for the TDX guest device client guest side. So clearly TDX is there, but maybe the, maybe there's something simple to add the TDX guest.
05:19:51.970 - 05:19:55.538, Speaker A: What are you looking at? Frieder? This is interesting.
05:19:55.714 - 05:20:27.730, Speaker B: This is the initial Linux patch for enabling TDX guest support. And it's actually just talking about the report generation. And I'll give you another, just to give you an idea. So this is constellation enabling their TDX for Azure? They mentioned something here.
05:20:29.270 - 05:20:38.690, Speaker C: I have the links to all the patches that intel tried or tries or is trying to upstream. I'm going to share it here.
05:20:39.270 - 05:22:08.950, Speaker B: So this is what they said end of last year. The early evaluation results is they're missing a feature which is exactly this. It's not possible to access the TD report within Azure and that's a missing requirement for the remote attestation. And if you've read the Slack channel, like the sub messages for the attestation that I've been talking to with Andrew, we figured out that you can get the TD report for the VTPM VM, but you can't let so that you can get an attestation and a quote, a TD quote for this one, but you can't get it for the actual vm you're running. And like Azure is just using their own remote attestation and telling you yes, you're running inside of a TDX VM. So that's the idea I have of it. Now I just wanted to check here this patch whether or not we need to add anything additionally to get the TDX guest module running or how we could verify whether it's running or nothing.
05:22:11.040 - 05:22:41.616, Speaker A: Interesting. So if I understood correctly, this post is from end of 2023. So it's quite recent, but maybe they did some changes for that. But if not, my first thought is if we have some connections there that we can reach out and ask them. But yeah, this seems like if I understood you also correctly, that means that we are, when we are attesting is actually, we are not really attesting our vms that we are running there. We are basically attesting their vtpms. So basically their cloud, it's kind of cloud attestation more or less.
05:22:41.616 - 05:22:43.300, Speaker A: Not really VM attestation.
05:22:44.000 - 05:22:58.864, Speaker B: Yeah, we're testing their vtpms and we don't have the source code for that. We might have, there's a VTPM image on GitHub that supports reproducible builds. We could check whether that's the same.
05:22:59.032 - 05:23:13.640, Speaker A: Okay, so it's kind of blind, that is even, I'm sorry, so it's kind of type of a blind attestation even like we are just attesting against, against an image that they created without being weaving able to inspect it. Right.
05:23:15.340 - 05:23:23.324, Speaker B: I don't understand it yet. And we definitely need someone, somebody from azure explaining this to us because, yeah, it doesn't make sense.
05:23:23.492 - 05:23:51.290, Speaker A: Yeah, it doesn't make sense for attestation purposes if it's like this. But yeah, we should definitely be able to reach to the TDX guest module to be able to generate this TD report otherwise. Yeah, this is not the way to do it. Or at least I don't see where this is just trust me issue.
05:23:51.630 - 05:24:00.350, Speaker B: Yeah, and I just see this is the wrong patch I'm looking for. It says here support for the TD report generation already exists in the TDX driver.
05:24:01.730 - 05:24:11.082, Speaker A: Could it be possible that you're, that you have to install this driver manually on your VM machine upon boot upon like upon the first startup?
05:24:11.226 - 05:24:19.692, Speaker B: No, it's a Linux driver. And so can you tell me about.
05:24:19.716 - 05:24:41.560, Speaker D: The TDX module in the Ubuntu that you have? I'm curious if we can look up the version of it. I mean all the things that I can tell basically say looking for the TDX guest device is the main way to check if you've got the TDX driver. And clearly we have some kind of TDX mod probe that's present but I wonder if it comes with a version number or something like that.
05:24:43.270 - 05:25:02.150, Speaker B: I think this is the TDX driver. If I'm not private it doesn't give me any errors. So my guess is, and I couldn't find it as a module. So I guess it's just, it's not added as a module but directly within the kernel.
05:25:02.310 - 05:25:25.980, Speaker D: That's just, we look at the packages that are installed like for. Well that's going to get something to search for that had TDX. But the one that I'm thinking of. I mean with the TDX or with the canonical TDX Ubuntu one. It's this Linux module's extra package.
05:25:27.280 - 05:25:28.620, Speaker B: Yeah, let's have a.
05:25:43.410 - 05:25:46.350, Speaker D: This is in the Sara TDxguest sh.
05:26:05.340 - 05:26:19.880, Speaker B: I'm not going to do this on the production machine. Maybe we should do it on a different one. I don't know. This could easily mess up the whole system and then we don't have any TDX builder anymore.
05:26:21.700 - 05:26:43.400, Speaker A: Maybe, could we somehow, maybe Mateusz could, could we just run, create a new instance for TDX? Just a minimal one, not very big and just for playing our own purposes for the attestation and breaking it and breaking it and so on.
05:26:44.340 - 05:26:46.080, Speaker B: I mean I can do that.
05:26:47.900 - 05:27:38.642, Speaker A: So yeah, let's do this. I would say let's just create a new instance, very minimal one. We don't need 500 gigs of ram just to break it and see if we can get in this TD report or TD guest module. Running this would be great actually we can manage this here. The images that you can select from, which is the latest one that you are able to have. Because the TD canonical start with 24, I think, or 23. Oh, the latest 22.
05:27:38.642 - 05:27:43.070, Speaker A: Interesting. See all images? Maybe they are more.
05:27:46.380 - 05:27:49.160, Speaker D: Aren't we just building our own images or we're.
05:27:49.540 - 05:27:59.720, Speaker B: No, we're just taking these ones. So there's a red hat and a yibuntu and that's it.
05:28:00.820 - 05:28:03.308, Speaker A: Could we provide. Ah, here, Ubuntu 24.
05:28:03.444 - 05:28:04.600, Speaker D: I saw 24.
05:28:08.710 - 05:28:13.730, Speaker A: But it's not a server. But it's okay. We can use this, I think.
05:28:15.150 - 05:28:16.570, Speaker B: How can I use it?
05:28:18.630 - 05:28:25.930, Speaker A: By selecting the one, if you go back, there was a select. Yeah.
05:28:28.110 - 05:28:30.530, Speaker B: No, it's not compatible.
05:28:31.190 - 05:28:43.140, Speaker A: Oh, well, okay, so these are the recently used. Is there a compatible one for confidential VM? Like Ubuntu confidential VM 24?
05:28:44.040 - 05:28:57.220, Speaker B: No, like a search for. And no, I don't see any.
05:28:58.240 - 05:29:12.310, Speaker A: That's sad. Is there a way where we can provide them our own built image of Ubuntu? Like if we pass them this for example, the one that we just built?
05:29:13.690 - 05:29:17.430, Speaker B: Yeah, there's a possibility, this possibility.
05:29:17.850 - 05:29:41.480, Speaker A: I wonder if we can follow the TDX canonical steps where we can create the TDX VM guest VM and then put it up there instead and see if that will expose the TDX guest instead. That would be. What do you think, Andrew? I think that should probably allow it.
05:29:43.940 - 05:29:51.680, Speaker D: Yeah, that would be. Yeah, if you just upload your own guest image and that's one of the options, then that would think of that.
05:29:53.120 - 05:30:04.180, Speaker A: Yeah, exactly. Because when we upload it there, then it will include also the setup files of the testation that they had in the canonical, so we can directly run them up and see what will happen.
05:30:13.760 - 05:30:30.350, Speaker B: Okay, so these are the only images that pop up with configuration. If I search for confidential, and this one I tested and it didn't work. So we can only, of the images available from canonical is the only one that works.
05:30:36.370 - 05:30:41.270, Speaker D: I mean, when you said you ran the 2401, did you run the setup TDX guest things?
05:30:41.730 - 05:30:48.550, Speaker B: No, it's, if I add this here, it will just say, no, you cannot add it. It's not supported.
05:30:49.170 - 05:30:50.070, Speaker D: Oh wow.
05:30:50.770 - 05:30:54.510, Speaker A: Yeah, it's not confidential. Not configured.
05:31:00.010 - 05:31:07.610, Speaker D: Oh wow. Okay. And presumably if we just upload our own image, it also won't. Yeah, I'm confused.
05:31:07.650 - 05:31:30.140, Speaker A: Then it should, because then we are giving a configured one from, from the canonical repo itself. So basically it's being configured. But I don't see here the option where we can upload our own image. Maybe three year nose.
05:31:30.480 - 05:31:58.310, Speaker B: Yeah, there is an option we can upload one, but that's quite a complex thing. You need to have your own image gallery, which I have configured so. But you need a vm, sorry, a vHD file. And that VHD file needs to be in a special format and yeah, we can do it, but, but it's going to take, it's going to take more time than we have left.
05:31:58.610 - 05:32:19.432, Speaker A: I see. Okay, no problem. But would be definitely like beneficial to try if we have the time for later, not today, but at some point because it'd be interesting to see if we can achieve this on Azure and expose like exposed module.
05:32:19.576 - 05:32:22.912, Speaker B: Yeah, I mean the plan is I'm just gonna start this VM and then.
05:32:22.936 - 05:32:42.120, Speaker A: I'm gonna run the scripts directly. Yeah, I assume they won't work because they expect, I think somewhere I read that they expect ubuntu 23 and above, not 22, but let me check this again just to be sure. I don't want to give false info.
05:32:46.580 - 05:32:59.774, Speaker D: I mean there should be no problem in, well, this is running the guest image, not the, not the host. I just got confused about the difference between this and the STP.
05:32:59.862 - 05:33:22.100, Speaker A: Yeah, yeah. At some point they put requirements for this and then required for that and then you get confused between the two. But yeah, you're right, it should be just for the host. All right, then it should be working. It.
05:33:48.690 - 05:33:49.630, Speaker B: Okay.
05:33:51.370 - 05:33:52.350, Speaker A: Let'S go.
05:34:43.830 - 05:34:46.010, Speaker B: Yeah, I just saw an issue here.
05:34:49.390 - 05:35:11.780, Speaker A: What does it say? Yeah, exactly. That's what I saw somewhere. So I'm not sure if it's gonna work out of the box. No, but we shall see.
05:35:22.440 - 05:35:27.100, Speaker B: I'm not sure if we're gonna, if we're wasting a lot of time here, because.
05:35:28.800 - 05:35:33.674, Speaker A: I mean, if it's explicitly says this, then it might not work, right?
05:35:33.722 - 05:36:12.500, Speaker B: No, I mean like. So canonical provides a Ubuntu image for TDX on Azure, and it's explicitly, and if I mod prop the TDX guest, there's no error. So I'm guessing it's a inside of the kernel. Let me, let me think about this.
05:36:13.480 - 05:36:16.460, Speaker A: I wonder if it's suppressed or somehow.
05:36:16.760 - 05:36:46.930, Speaker B: No, I'm just thinking what if hyper V, like what if Azure has not enabled this in their hyper V implementation of TDX? What if that's the reason why we're seeing this? What if it's, the reason is actually that it's a preview and that's why we can't get the TD quotes in this way, but we have to get it in another way or something like that.
05:36:48.270 - 05:36:53.586, Speaker A: I mean, even the other way, it's not really getting the TDEm code. You are getting the VTpM quote somehow.
05:36:53.658 - 05:37:05.138, Speaker B: Not the VTPM quote, but maybe, yeah, I'm not sure it's clear that TDX.
05:37:05.194 - 05:37:17.080, Speaker D: Require, I mean, that attestation, you know, requires this extra support from the host, so it's not. Yeah, exactly what you suggested. Treater is I think a very likely second.
05:37:20.140 - 05:37:42.040, Speaker B: So should we go further into this path or should we just accept that we need more info and we need to talk to Azure and other people who might know, and I mean, that would save us more time and they can tell us, look, this is the case, this is what's going on. And then.
05:37:46.460 - 05:38:00.920, Speaker D: I mean, I would suggest that if we have, I mean, what we want to be able to figure out how to do is how to have the guest support in Yocto anyway. So I mean, even if we don't need Azure to go down that path.
05:38:01.260 - 05:38:01.644, Speaker A: Yes.
05:38:01.692 - 05:38:04.440, Speaker B: Well there's guest support in Yokto already.
05:38:06.380 - 05:38:08.520, Speaker D: Including the TDX guest device.
05:38:08.700 - 05:38:09.460, Speaker B: Yes.
05:38:10.200 - 05:38:16.504, Speaker D: Oh, can we finish attestation on Yocto? We already have the TDX guest device there.
05:38:16.672 - 05:38:17.232, Speaker B: Okay. Yeah.
05:38:17.256 - 05:38:25.660, Speaker D: Then we, then the only thing next should be to run that sample code, which is just that lib TDX test package.
05:38:26.080 - 05:38:43.300, Speaker B: The TDX guest, like the kernel driver for TDX guest is in the kernel for the octo image. But if I run it on Azure, I'm not seeing the station device.
05:38:44.000 - 05:38:46.940, Speaker D: But let's try running it on one of the other hosts.
05:38:47.640 - 05:38:55.700, Speaker A: Or let's try, try to run it on the bare metal that Andrew has. So basically we can run it there. So already set up.
05:38:56.600 - 05:38:57.340, Speaker B: Sure.
05:39:00.610 - 05:39:29.148, Speaker A: But now you already run the script and it went through without any errors. Could you see where like if you can see device somehow or if you can see that path that is installed where you can go to the examples and maybe generate the quote. Maybe, who knows? Most probably it won't work, but it.
05:39:29.164 - 05:39:36.116, Speaker B: Looks like it just added some modules and some kernel configuration. I might need to reboot.
05:39:36.188 - 05:40:04.060, Speaker A: Restart. Yeah, I need to reboot. Also, another question. So you mentioned that you can do mode probe to the X guest and it doesn't fault, which I saw with you earlier today. The question is if we try now from within TDX virtual machine on Azure to read like to use that device from like from the library that Andrew show us, would it say like device not found or would it still be.
05:40:06.040 - 05:40:09.032, Speaker B: The device not there but still like.
05:40:09.056 - 05:40:15.860, Speaker A: The mod probe was actually enabling it somehow but not really enable. Okay, I see it was suppressed down.
05:40:17.570 - 05:40:18.390, Speaker B: Hmm.
05:40:20.650 - 05:40:26.390, Speaker A: I wonder what's the rational decision behind this, from their side.
05:40:26.890 - 05:40:32.834, Speaker B: I don't know. We need to figure out, but I think we're wasting time here.
05:40:33.002 - 05:40:44.430, Speaker A: Yeah. All right, then let's try the bare metal now, since we already have a host. Already configured and the image is already built, just the creator.
05:41:16.020 - 05:41:32.360, Speaker B: So this, these are the images that we have at this point. Are you able to boot dot vic images, Andrew, on the bare.
05:41:32.940 - 05:41:40.470, Speaker D: On the bare metal? Not sure how not sure.
05:41:43.050 - 05:41:52.030, Speaker B: Okay. I might be able to provide you. What do you need? Is it Q cow or something? What do you need.
05:41:56.410 - 05:42:38.450, Speaker D: To boot a TD guest from the. From the bare metal host? Yeah, a few cows, I think. Yeah. Kikatu.
05:42:52.360 - 05:42:53.100, Speaker A: It.
05:43:20.250 - 05:43:27.910, Speaker B: Can you copy it over to your place? The bare metal, is that possible?
05:43:31.890 - 05:43:38.070, Speaker D: Yeah, I think that should work. I thought I already added you on this and I know I just added mo now I'm trying to make sure he's set up.
05:43:40.690 - 05:43:50.432, Speaker A: Yeah, I recall Frieder got access to it. It got added to it reader, I think, two weeks ago or one week ago.
05:43:50.576 - 05:43:55.980, Speaker B: Yeah, I remember as well. I don't think I've followed the setup.
05:43:58.840 - 05:44:07.420, Speaker A: I can share with you the command that once Andrew shared with you how to log into it.
05:44:09.690 - 05:44:13.150, Speaker B: Do I need a password? Because then I need to stop sharing.
05:44:13.810 - 05:44:22.690, Speaker A: I didn't need. Andrew gave me a password. Okay, exactly.
05:44:22.850 - 05:44:28.106, Speaker B: I just need the username and IP address. Can you share that with me?
05:44:28.298 - 05:45:19.970, Speaker A: Yes. Let me fetch it. Where was that? It was a while ago, apparently. Yeah, I saw the conversation. Let me see. Was this one for some reason I can see that the discussion was far, far away in the past.
05:45:24.030 - 05:45:25.788, Speaker B: Oh, I'll have a look at both.
05:45:25.934 - 05:46:17.640, Speaker A: It. It.
05:50:21.150 - 05:50:34.420, Speaker B: Okay. I have access and I've built the image. I'm going to start again.
05:50:35.080 - 05:50:35.860, Speaker A: Cool.
05:50:58.450 - 05:51:23.870, Speaker B: Yeah, that's the qcommiche, just the most recent one, but I'm not sure I need all of this like proxy command and stuff like that. Can I just escape?
05:51:27.460 - 05:51:41.760, Speaker D: Should work. I have. I mean, yeah, I have this just for the little page guide thing that I have. I've added those parameters rather than a one line. I can show you what I add to my Ssh config and then SCP works.
05:51:42.220 - 05:51:46.520, Speaker B: Okay. Like this doesn't work. Okay.
05:51:47.540 - 05:51:55.380, Speaker D: There's a way to make it into one line, but you almost have to pass the Ssh. You have to pass it slightly differently. It's easier if I just show you the.
05:51:55.720 - 05:51:56.820, Speaker B: Yep. Please.
05:51:57.440 - 05:51:58.500, Speaker D: First here.
05:52:02.440 - 05:52:06.200, Speaker B: You want to share your screen or are you going to paste it in there?
05:52:06.240 - 05:52:07.820, Speaker D: I'm going to paste for you inside.
05:52:08.680 - 05:52:11.320, Speaker B: Can you place it in the chat probably.
05:52:11.440 - 05:52:12.820, Speaker D: Yeah, I can do that.
05:52:16.930 - 05:52:17.670, Speaker A: It.
05:53:01.420 - 05:53:58.460, Speaker B: It works. That's low. Where is it located?
05:54:03.010 - 05:54:23.270, Speaker D: This is in California and it's basically locked down so I don't have any good way to share it except by this page kite outgoing tunnel thing.
05:54:25.220 - 05:54:35.600, Speaker B: Is it from intel or where did you get the. Yeah, from intel, but it's only. How long do you get the access for? A month or how long?
05:54:37.180 - 05:54:42.996, Speaker D: I'm going to do internship project on it so maybe they'll extend it for me, but don't know yet.
05:54:43.188 - 05:54:51.330, Speaker B: Yeah. Okay. Is that where you going to extend the TDX module to get the ax notify?
05:54:51.830 - 05:54:54.330, Speaker D: Yeah exactly. That's the main hook part.
05:54:54.710 - 05:54:56.450, Speaker B: This is such a nice project.
05:54:57.230 - 05:54:58.090, Speaker D: Totally.
05:55:09.590 - 05:55:18.050, Speaker A: So you're going to build something similar to VM exit notify, like VM aware of exiting and re entering?
05:55:19.350 - 05:56:25.320, Speaker D: Yeah, that's the plan, yeah. I mean, yeah, exactly like what AEX notify does for SGX, you know, to do TDX notify for the same reason and ideally use AEX notify not just to prevent single stepping like its main uses, but also use it to prevent, you know, you can abort if you can detect a page fault has occurred, which would indicate an access oracle being exploited and so some kind of anti dexterity. But there shouldn't be anything distinct about this environment, this SDP environment. So like the Alibaba one, I mean Azure seems to be the odd one out that has their own interlayer. You know, you submit a guest image to them and they take care of the running it for you, like the Alibaba one. And OVH seem to be closer to this where you have access to the host and it's up to you to run your own Kimu instruction to run your TD.
05:56:28.980 - 05:56:45.130, Speaker B: The problem is with OVH we don't have any kind of cloud attestation, so a TDX server running with an OBH is the same thing as running it in your side channels lab.
05:56:45.470 - 05:57:12.390, Speaker D: I see what you mean. You can't, they don't. I was thinking that, I mean I take what you're saying to me that they don't provide a way that's streamlined at least, or that you can tell that you can certify that this is an OVH node, but I was wondering whether or not there's a way to retrofit one. They might not, you know, try to make it impossible. It's just not a feature that they've added. But maybe there's some plausible ways to give some evidence.
05:57:12.730 - 05:58:15.060, Speaker B: I think this is some, this is a really interesting project to have, have something, I don't know, some kind of way to, for cloud providers to prove that the TDX VM is actually running within their real, that could actually be even be implemented as software and as part of the code within the VM. Like if we could, if the, if OVH would run a server that lets you connect and from the TDX VM you can connect and you can just check the latency. But again, the answer from OVH must be in this in a way that you can verify that it's actually coming from OVH, stuff like that.
05:58:15.480 - 05:58:16.260, Speaker D: Yeah.
05:58:29.130 - 05:58:59.780, Speaker A: But isn't this orthogonal? A little bit, regarding the attestation itself? Like if you can attest the VM itself, and this would be one thing, and attesting that this is running on an OVH machine, this is something not part of. Like it's separate, orthogonal to the attestation process itself. Right. Like, or complementary, I would say, but not really attestation specific if I'm not wrong.
05:59:00.880 - 05:59:09.660, Speaker B: No, it's, it's complementary. So cloud attestation, it just helps you to verify that it's running on that premise.
05:59:11.090 - 05:59:30.710, Speaker A: Yeah, but in general this is also a main problem. Like it's not TDX problem, it's also sgx problem. So yeah, if I have a rack here running your sGx, you wouldn't know if it's aws or some rack somewhere.
05:59:47.820 - 06:00:02.570, Speaker B: So just copying over the image, I've removed the r builder and Reth and the flower binary and it's a little bit more than ten megabytes of size, right?
06:00:04.550 - 06:00:11.610, Speaker A: That's small but not unique. Kernel small.
06:00:12.030 - 06:00:42.740, Speaker B: No. Andrew, do you want to take over from here? I think you have the Qemu commands set up and you know how to start it, right?
06:00:44.800 - 06:00:46.248, Speaker D: Yeah, I guess so.
06:00:46.424 - 06:00:47.140, Speaker B: Sure.
06:00:48.960 - 06:00:50.460, Speaker A: The command can be taken.
06:00:51.760 - 06:01:11.830, Speaker D: I can do that because I'll just go copy this and place it where the other QCoW is and we'll either rename them or change how it's run in the script. I think that makes sense.
06:01:16.450 - 06:01:20.220, Speaker B: Do you have a serial console to access when you start the.
06:01:23.200 - 06:01:54.230, Speaker D: What do you mean? Well yeah, when I run it, it try, it suggests it prints a little message to recommend connecting by ssh. And so yeah, I think you're right. I don't think I have that. Yeah, I'm sure I can figure out how to deal with it. We'll start with. Okay, maybe I'll start looking around an image and then do run. So I just want to, I'll just copy over from yours.
06:01:56.130 - 06:02:18.850, Speaker A: I wonder if you need to run this command that created the image because some part of it it's doing vert customize on the image itself to add the setup files and attestation files and running them in cloud initial so on. Maybe in this case, I don't know, maybe you don't need to do this. Maybe you can just run it and clone the repository and install.
06:02:19.750 - 06:02:24.290, Speaker B: No, it's a CVM image. It starts.
06:02:26.550 - 06:02:27.850, Speaker D: I see this one.
06:02:29.990 - 06:02:31.490, Speaker A: Yes, this one.
06:02:48.880 - 06:03:52.680, Speaker D: Okay. Are these all right? Are they all plus x? I don't know if that's important. And. Okay, so I was simply going to change it like this. All right. That should be the only difference.
06:04:01.940 - 06:04:16.160, Speaker A: It might not work out of the box because of the, of the setup of the image setup, right. Because it's creating the guests and so on the user. But maybe I'm wrong.
06:04:18.100 - 06:04:33.450, Speaker B: It's probably the, it will fail because it will have setting up the networking. Is there a way you can solve?
06:04:36.270 - 06:04:45.540, Speaker D: Yeah, I mean maybe you can just tell me what to do. I didn't pay close enough attention to the QEMU functions you would be running, but I assume that that's something I can just do through here. Here.
06:04:45.840 - 06:04:52.180, Speaker B: Can you remove the demonize? It's in the behind, no graphic.
06:04:52.960 - 06:05:04.980, Speaker D: I see. I don't know if that's going to work, but let's see here.
06:05:17.770 - 06:05:34.270, Speaker A: What's this error discarding ram in private file mapping. Okay, in what way we are discarding ram and private files?
06:05:47.340 - 06:05:55.440, Speaker B: I don't know. I would like to just see the error again, but.
06:06:01.510 - 06:06:27.620, Speaker A: There it is. No, I'm not sure. This temp to the X guestd log probably is the file that is dumping it.
06:06:54.130 - 06:07:00.990, Speaker B: Oh no, it has KVM acceleration enabled.
06:07:14.170 - 06:08:29.928, Speaker A: Just to see if it's working. Andrew, can you go to the run tdem sh file again and comment out a couple of lines just to see if it works? Can you go down to the minus object TDx this comment if you want to comment this out and also in the line downwards there is this memory encryption equal to the X if you can also remove it or just comment it out and then run the virtual machine without it because this way you would be running it without TDX aware, like without TDX virtual machine support just to see if it runs and if it's just regarding visit problem in general, because if it runs now it means. What happened? Suddenly this error is happening everywhere.
06:08:30.024 - 06:08:36.620, Speaker B: What is GTK? Why is it trying to initialize GTK? Are you. No, you're not trying to.
06:08:40.020 - 06:08:56.920, Speaker A: Because I was able to run the mine without the minus object and without that thing and the minus machine, and it still worked. I had demonized inside. You can add the demonized now and see if it would work.
06:08:58.460 - 06:09:12.720, Speaker B: No, the demonize won't work because you, you won't, you won't be able to ssh inside because there's, there's a networking error with the image.
06:09:13.300 - 06:09:30.570, Speaker A: Okay, then let me, let's see if it's regarding the changes. Now it's erroring or regarding something else. I don't know why it's failing. That's weird.
06:09:36.350 - 06:09:42.650, Speaker B: Maybe I don't have the no default. Maybe you can remove that one.
06:09:44.630 - 06:09:45.630, Speaker A: Which one?
06:09:45.790 - 06:09:46.970, Speaker B: No defaults.
06:09:49.150 - 06:09:50.290, Speaker A: I have it.
06:09:56.920 - 06:10:18.140, Speaker B: And then there is a, how about, like, what is the process and debug threads on. Oh.
06:10:20.050 - 06:10:48.492, Speaker A: Wait a second, wait a second. I think I know why. Let me share with you something, Andrew. The minus machine at the end, this memory back end ram, L. Can you change it to. Can you remove it and put HP equal off and. No, no, remove the.
06:10:48.492 - 06:11:21.872, Speaker A: Exactly. And then hpet equals off comma. Exactly. And then, no, no, you didn't add HPT equals off like only hPET equals off the memory encryption. You remove it because it's also TDX specific. The memory backend, I think. What's this, this object thingy? Oh, I think there is a delay.
06:11:21.872 - 06:11:42.818, Speaker A: So just remove the memory backend equals hpEd. This is not necessary. And the line below it seems wrong. This is all wrong. I would remove it. This whole line. I would remove it.
06:11:42.818 - 06:11:44.070, Speaker A: Yes, exactly.
06:11:48.970 - 06:11:53.070, Speaker B: I think you have to re enable the name stuff.
06:11:53.930 - 06:12:15.938, Speaker A: Yeah. And also there are no defaults. Never mind. Yes. You are too quick for my stream. Still failing.
06:12:16.074 - 06:12:21.270, Speaker B: Okay, so just GTK initialization. What's GTK?
06:12:22.730 - 06:12:27.960, Speaker D: GTK is the graphics toolkit. I'm still baffled that that shows up at all.
06:12:30.220 - 06:12:39.840, Speaker B: Can you add a no VGA as a try?
06:12:45.060 - 06:12:47.680, Speaker A: Okay, I will give you my command in the chat.
06:12:48.060 - 06:12:48.920, Speaker D: Okay.
06:12:49.660 - 06:13:16.338, Speaker A: I sent you the command in the chat that you can replace with this in the script complete and try it now instead of this what you have, replace it with it and just see if it's going to make a difference because this is what I'm running to run it on my laptop without TDX. I made it just to make it reproducibility.
06:13:16.394 - 06:13:17.346, Speaker D: Here, you just run this anyway.
06:13:17.378 - 06:13:17.522, Speaker B: Yeah.
06:13:17.546 - 06:13:19.110, Speaker D: Okay, so this is a good starting point.
06:13:19.600 - 06:13:34.580, Speaker A: Yeah, great. This one should be working. It's not what's happened? Maybe the indentation or something.
06:13:35.680 - 06:13:38.088, Speaker D: No, it says, I mean, everything says fine.
06:13:38.264 - 06:13:39.020, Speaker A: Yeah.
06:13:41.880 - 06:13:43.900, Speaker D: Is it using the same tv image?
06:13:44.800 - 06:13:45.568, Speaker B: Yeah, it is.
06:13:45.664 - 06:13:46.360, Speaker D: Okay.
06:13:46.520 - 06:13:52.500, Speaker A: It is. It is. So can you.
06:13:55.520 - 06:13:57.208, Speaker D: Do you think Ssh should work?
06:13:57.384 - 06:14:03.860, Speaker A: No, no, you can. You can ssh now. And I think it should. If it's running, then it means that.
06:14:04.680 - 06:14:13.240, Speaker B: It'S not going to. It's. It will have difficulty setting up the network networking device. So you can use demonize.
06:14:13.700 - 06:14:14.580, Speaker A: Ah. So. Okay.
06:14:14.620 - 06:14:14.772, Speaker D: Yeah.
06:14:14.796 - 06:14:15.440, Speaker B: Okay.
06:14:15.780 - 06:14:43.718, Speaker A: Yeah. But if it now works for some reason, then it would only mean that this Yocto image is not TDX aware for some reason. And it's not. Yeah. Some changes should be done in what happened. Now for me, it's kind of frozen. Interesting.
06:14:43.774 - 06:15:02.010, Speaker D: What am I expecting? Maybe it's still stuck on the network. If you think that's.
06:15:07.120 - 06:15:10.420, Speaker A: Could it be the networking stuff? Breeder?
06:15:12.160 - 06:15:16.060, Speaker B: No, don't think so.
06:15:18.000 - 06:15:35.530, Speaker A: So it's a different issue. By the way, would you try on your site reader if you can run that image directly with your KMLA with the normal commands and see if it would work from like by chance?
06:15:35.830 - 06:15:41.046, Speaker B: Yeah. We've been doing, doing this the whole time. Running it in queue.
06:15:41.238 - 06:15:46.730, Speaker A: Yeah. But not the QCow two, right. Different type we were running.
06:15:47.950 - 06:15:55.440, Speaker B: Okay. Do you think it's the imaging of the QCow? I don't know. The moving it, like converting the image. Go.
06:15:56.220 - 06:16:00.868, Speaker A: Maybe after we tried, not after, maybe I can just.
06:16:01.004 - 06:16:02.560, Speaker B: Yeah, I mean, I could.
06:16:08.100 - 06:16:12.440, Speaker A: Just to rule out some potential outliers.
06:16:24.070 - 06:16:30.810, Speaker D: When I cancel the script, it reports similar trouble. I guess.
06:16:33.790 - 06:16:37.810, Speaker A: I guess it's somewhere looping inside doing some.
06:16:45.800 - 06:16:47.380, Speaker B: No, it boots for me.
06:16:48.080 - 06:16:56.592, Speaker A: It boots for you. Okay. So some of those commands are. Yeah, I see you added.
06:16:56.696 - 06:17:14.470, Speaker B: Yeah, if you check out my. I also pasted the command which is how I run it in Qemu in the chat. You could try using that. But it. It introduces some stuff that we might need to change.
06:17:16.210 - 06:17:18.218, Speaker D: You pasted it in the zoom chat?
06:17:18.354 - 06:17:24.190, Speaker B: Yep. It's older. It's above mo.
06:17:25.210 - 06:17:26.830, Speaker D: Oh, okay.
06:17:30.210 - 06:17:36.910, Speaker A: Oh yeah. But you need to change probably some kind of passes there. The file home ubuntu feeder, pokey.
06:17:42.420 - 06:17:46.320, Speaker B: You can remove some stuff like I don't think you need to use P devices.
06:17:50.180 - 06:17:59.196, Speaker A: But then you can run this directly here without changing the script. Andrew, you can run QMO. Run. Run QMO and pass these.
06:17:59.228 - 06:17:59.772, Speaker B: Just run it.
06:17:59.796 - 06:17:59.980, Speaker C: Right?
06:18:00.020 - 06:18:04.844, Speaker D: Yeah, no real reason to. I don't think I picked up the whole thing.
06:18:04.892 - 06:18:05.640, Speaker B: Hold on.
06:18:10.740 - 06:18:17.116, Speaker A: And also there is the file passed to the image. Probably should change, which is your defreer pokey build.
06:18:17.188 - 06:18:22.308, Speaker B: Yeah. There's quite a few things you need to change. I would probably add it, add it to the script.
06:18:22.364 - 06:18:29.360, Speaker D: This looks like it's incomplete. If you meant that you just pasted the arguments that come after the cumulative, that's fine. But.
06:18:30.220 - 06:18:57.018, Speaker B: Okay. The way it's configured here, it's expecting a network device, a tap device. It's already set up by a different script. So this one you would also remove, I think for beginners, the. This doesn't matter. We, we don't need networking.
06:18:57.074 - 06:18:57.922, Speaker D: This will not.
06:18:58.066 - 06:18:59.910, Speaker B: Okay, yeah, you can just remove it.
06:19:01.570 - 06:19:06.722, Speaker D: All right. Uh, this. Divert this whole thing that, for networking. Yeah. Okay.
06:19:06.906 - 06:19:09.954, Speaker B: Not sure if we need the random, random number. Just.
06:19:10.042 - 06:19:11.710, Speaker D: I don't want to do cryptography.
06:19:12.250 - 06:19:25.720, Speaker B: Okay. Yeah, that's the, um. You would probably want to give it a.
06:19:33.780 - 06:19:35.588, Speaker D: All right, that should pick up that one.
06:19:35.724 - 06:19:41.520, Speaker B: Oh, well, no, you need to give it the Q cow, not the raw format.
06:19:41.980 - 06:20:02.810, Speaker D: Oh, I'll go fix that in a second. So I hit enter, usb, tablet, keyboard, flash. You have this other one, a second one.
06:20:04.110 - 06:20:13.130, Speaker B: Oh, that's the UeFI. And you'll probably, you have added that as well, but in a different way.
06:20:15.070 - 06:20:19.270, Speaker D: Okay, so that's something also that's in the images file, but I think it just hadn't changed.
06:20:19.350 - 06:20:19.702, Speaker B: All else.
06:20:19.726 - 06:20:25.490, Speaker D: I could double check that one in a second. Cpu, that stuff, I don't know.
06:20:29.590 - 06:20:30.610, Speaker B: Yeah, I think.
06:20:33.510 - 06:20:35.890, Speaker D: Those, and get wrong files. Okay.
06:20:51.160 - 06:20:51.616, Speaker A: And then.
06:20:51.648 - 06:20:58.144, Speaker D: Is there an ovmh or something? I'm not sure what to put for this. Or just remove it.
06:20:58.272 - 06:21:06.450, Speaker B: Checking your TD run TD script, it mentions Anhejdehe ovh Ovmf.
06:21:10.710 - 06:21:14.622, Speaker D: Or you can use TDBF firmware. Well, it says bios. That's different.
06:21:14.686 - 06:21:26.010, Speaker B: Right, so that's. Yeah. What, what is in the TDF TDFV firmware argument?
06:21:26.590 - 06:21:35.328, Speaker A: This thing I just posted in the chat, the user share OVMF. OVMF file descriptor.
06:21:35.504 - 06:21:46.660, Speaker B: Okay, well, yeah, maybe you can just remove them. The drive. The, the, yeah, I mean, maybe you can just add it like that.
06:21:47.760 - 06:22:06.306, Speaker D: Okay, I'll remove the drive and add it like that. And I'll put that. Okay, next.
06:22:06.498 - 06:22:07.590, Speaker B: Ovmf.
06:22:07.930 - 06:22:09.070, Speaker C: OVMF.
06:22:09.930 - 06:22:16.070, Speaker A: No, small, small ovMf. The first one. And now.
06:22:16.890 - 06:22:19.830, Speaker D: Oh, hell yeah. I want TCAC snakeoil.
06:22:22.060 - 06:22:22.840, Speaker B: All right.
06:22:26.900 - 06:22:50.050, Speaker D: Was I too clever there that didn't pick this up? Okay, got further.
06:22:53.870 - 06:22:58.890, Speaker B: Complains about a failed Bible.
06:23:07.990 - 06:23:13.260, Speaker D: How do you break out? Oops. Went further than I meant to.
06:23:33.120 - 06:23:34.620, Speaker B: Do you have any idea?
06:23:38.650 - 06:23:56.150, Speaker C: Yeah, maybe pass this as a kernel command line. I just paste it in the chat.
06:24:10.860 - 06:24:15.800, Speaker A: A Q is missing at the start from the QMO command.
06:24:21.660 - 06:24:23.160, Speaker C: Okay. No.
06:24:26.260 - 06:24:54.180, Speaker B: Yeah, but I see this command has two serial arguments which were missing in the run TD script. Maybe these are the ones that will allow us to have a serialization. So.
06:24:55.880 - 06:25:02.980, Speaker C: No, but now the problem is that the boot device is not there or Kimu thinks that it's not there.
06:25:14.440 - 06:25:19.872, Speaker B: Yeah, because here we have, we're defining a bias and the other one, it's.
06:25:20.016 - 06:25:33.860, Speaker C: Wait, wait, why? The format is raw. It should be qcal. So the if, if equals none, blah blah blah. And the end of this is, should be qcal two.
06:25:35.200 - 06:25:36.180, Speaker A: That's true.
06:25:40.320 - 06:25:43.780, Speaker D: Was the error we saw consistent with it getting stuck there? I could just remove that.
06:25:46.410 - 06:25:47.310, Speaker C: Come again?
06:25:49.130 - 06:25:49.910, Speaker B: Yeah.
06:26:05.210 - 06:26:28.830, Speaker A: Here we go. Yeah, this is still, by the way, this is without no root. Root login is root and without password. Yeah. This is however without TDX parameters for the QAMo. I wonder if we pass now the TDX parameter, if we make it to the x. Aware if that would be.
06:26:28.830 - 06:26:31.230, Speaker A: It would make it run or not.
06:26:31.810 - 06:26:34.510, Speaker B: Yeah, definitely. Let's try it.
06:26:34.810 - 06:26:45.526, Speaker A: So the ones that you commented out earlier, Andrew, from the, from the scripts, that's the minus object, TDX and so on. If you can add them to this.
06:26:45.558 - 06:26:46.210, Speaker D: Command.
06:26:48.230 - 06:26:56.370, Speaker A: And the minus machine as well. There was also something for the memory encryption. If you can add them to it. Test.
06:26:57.390 - 06:27:02.450, Speaker D: Yeah, so I can get it from.
06:27:04.760 - 06:27:05.208, Speaker B: Script.
06:27:05.264 - 06:27:06.860, Speaker D: This should be good enough for that.
06:27:07.760 - 06:27:09.920, Speaker A: And the format. Row the format.
06:27:09.960 - 06:27:12.264, Speaker D: What's the best way to kill Kimo?
06:27:12.432 - 06:27:14.100, Speaker B: Troll A and then X.
06:27:19.280 - 06:27:20.096, Speaker D: Great.
06:27:20.288 - 06:27:27.220, Speaker C: Can you also remove this cpu Ivy bridge, because that's the ancient one. It should copy the host config.
06:27:28.040 - 06:27:28.900, Speaker B: Okay.
06:27:34.290 - 06:27:38.914, Speaker C: And why are we adding this USB tablet and USB keyboard?
06:27:39.042 - 06:27:40.470, Speaker B: Yeah, we can remove it.
06:27:49.170 - 06:27:51.978, Speaker A: The TDX part is missing though. The object.
06:27:52.034 - 06:27:53.230, Speaker D: Yeah, I'll add that next.
06:27:55.620 - 06:27:57.520, Speaker A: No, such a file directory.
06:28:00.220 - 06:28:13.600, Speaker B: I'm wondering maybe the GTK initialization is something failing before the QMU system command.
06:28:21.510 - 06:28:35.078, Speaker D: Sort myself out of this. I can go back to my reference for a second. What do we specifically want to try again to get further? Oh, just adding in the TDX objects, right?
06:28:35.254 - 06:28:40.930, Speaker A: Yeah, the TDX objects. And in the machine there was also an extra thing that you can pass for the.
06:28:49.480 - 06:29:08.192, Speaker D: Yeah, the cpu. Make sure that's still good. Okay. And object TDX guest IDTDX.
06:29:08.296 - 06:29:25.868, Speaker A: That's the main one and the one in the machine as well, which is. No, not here. No. Up, up. If you go up to the original memory encryption. Yes, memory encryption and the memory backend. These two are.
06:29:25.964 - 06:29:36.800, Speaker D: Okay. All right. Even before that I get this was adding in the object TDX.
06:29:37.140 - 06:29:38.360, Speaker A: It's panicking.
06:29:39.010 - 06:29:39.790, Speaker B: Yeah.
06:29:40.410 - 06:29:47.138, Speaker A: So this means the Yocto image is not TDX aware. Somehow not configured for TDX.
06:29:47.274 - 06:29:50.986, Speaker B: Are you sure you didn't enable the memory encryption? Maybe that's the reason.
06:29:51.138 - 06:30:06.452, Speaker A: Yeah, let's try. Let's try adding the memory encryption. Maybe that's the reason. Let's make it fully. That's a good point. The split part is also missing. I see.
06:30:06.452 - 06:30:15.320, Speaker A: In this minus machine. How was it again? Yes.
06:30:28.420 - 06:30:36.530, Speaker D: All right. So we don't have the definition of the back memory. So we need to do.
06:30:40.710 - 06:30:44.646, Speaker A: The memory backend we had. Okay, interesting.
06:30:44.678 - 06:30:45.850, Speaker D: Okay, so we have a.
06:30:49.110 - 06:30:49.494, Speaker B: So we.
06:30:49.502 - 06:30:54.206, Speaker D: Define a memory object. This one's. There an alternative?
06:30:54.398 - 06:31:07.404, Speaker A: I think this is something that you did, Andrew. Right. Because this is not in the memory main repo. Or am I wrong? At least in my part? I don't have it. Let me check.
06:31:07.572 - 06:31:12.480, Speaker B: Can you add that object, the memory backend Ram? I didn't.
06:31:13.820 - 06:31:14.560, Speaker A: Because.
06:31:19.060 - 06:31:21.440, Speaker B: It'S complaining about dismissing. Right?
06:31:22.540 - 06:31:25.000, Speaker D: Well, I don't know it's complaining about that.
06:31:25.980 - 06:31:43.908, Speaker A: Let me share with you here, Andrew. We can maybe look, so this is in the main repo of the canonical TDX and this script. They don't have that completely, this line. They also don't use the Ram L. They use Ram one. They use. They don't have it at all, actually.
06:31:43.908 - 06:31:51.308, Speaker A: They use confidential guest minus support equal to the x. This is why I was confused what you had there. The memory encryption is not.
06:31:51.364 - 06:31:52.596, Speaker D: Where did I get that from?
06:31:52.788 - 06:31:57.156, Speaker A: Yeah, exactly. I was confused why you have such a different configuration.
06:31:57.348 - 06:32:13.520, Speaker C: That's because it's coming from the older branch that was default, maybe before the default branch was 23. Ubuntu 23. Now the default branch is 24 and the startup screen is different.
06:32:14.460 - 06:32:15.720, Speaker A: That makes sense.
06:32:16.300 - 06:32:20.090, Speaker B: Which version we need 23 or 24.
06:32:20.790 - 06:32:25.810, Speaker C: Let's refer. Let's use 23 as a reference. It's closer to our district.
06:32:30.230 - 06:32:32.210, Speaker A: So let's use this.
06:32:36.710 - 06:32:47.140, Speaker C: Unless we used, unless you, Andrew, used scripts from 24 branch for configuring the TDX host.
06:32:50.120 - 06:32:57.060, Speaker D: I don't think I did. So I think that this will all be, everything I'm on here is the 23 23.1 version.
06:33:02.040 - 06:33:06.620, Speaker A: So the memory encryption, I'm not sure if this should be equal to DX.
06:33:11.330 - 06:34:00.164, Speaker D: I mean, I assume this is about whether it's using like private memory backends. I'd expect this is something that we have to configure like that. So we could either defer that for now or try to include it, but it wouldn't surprise me if that has to. You can have meaningful TDX attestation even without using that. So in a way, I consider that a good optional one, especially if we're getting close to attestation working, potentially. And so it is still panicking and only removing the TDX guest object.
06:34:00.212 - 06:34:00.396, Speaker A: Right.
06:34:00.428 - 06:34:01.816, Speaker D: Was making that difference.
06:34:02.008 - 06:34:11.260, Speaker A: Yes. So that's why I wanted to check if it's TDX issue or a normal image issue.
06:34:12.360 - 06:34:23.580, Speaker C: But we didn't add the RaM object, so we only added TDX. Right. But we didn't configure the Ram object, whatever that means.
06:34:24.640 - 06:34:26.220, Speaker A: You mean Ram L object?
06:34:26.570 - 06:34:27.350, Speaker C: Yeah.
06:34:28.090 - 06:34:39.946, Speaker A: I'm not sure if they are. Like, if the two are the same time necessary to be, but maybe. Broken pipe.
06:34:40.098 - 06:34:41.030, Speaker D: Oh, man.
06:34:41.930 - 06:34:43.050, Speaker A: What's happening?
06:34:43.210 - 06:34:47.674, Speaker D: I don't know. Maybe whatever I'm using as a front end isn't.
06:34:47.722 - 06:34:48.350, Speaker A: Um.
06:34:51.650 - 06:35:04.820, Speaker C: I just need to something at least that. What they do in the 23 branch of the repository, they configure both the memory backend and then the device.
06:35:05.360 - 06:35:05.728, Speaker B: Okay.
06:35:05.744 - 06:35:10.936, Speaker A: It seems to be panicking in any way with or without the DX. So something is wrong.
06:35:11.008 - 06:35:11.660, Speaker D: Yeah.
06:35:12.080 - 06:35:12.664, Speaker C: Can we.
06:35:12.712 - 06:35:13.816, Speaker D: Yeah, that's right.
06:35:14.008 - 06:35:24.394, Speaker C: There are two m options at least that I see conflicting. What's that minus m memory?
06:35:24.442 - 06:35:26.150, Speaker D: One, I say 129.
06:35:29.330 - 06:35:30.590, Speaker A: That's two times.
06:35:30.890 - 06:35:40.270, Speaker B: You don't need that many. So you can. You can make it smaller. Second, that's probably too much. That's not enough.
06:35:43.380 - 06:35:53.520, Speaker D: Okay, well, this is. Now I'm lost because I know that we did get further before. I have to go see what all has changed. I think we made a couple of changes at a time that actually.
06:36:00.420 - 06:36:00.732, Speaker B: We.
06:36:00.756 - 06:36:03.040, Speaker D: Removed all those USB devices for one.
06:36:04.660 - 06:36:10.410, Speaker B: But that still worked. I think that was the last one that actually work.
06:36:27.030 - 06:36:29.290, Speaker D: All right, maybe I do need to go debug this.
06:36:40.320 - 06:36:49.460, Speaker A: Maybe change their minus memory from 128 gigs to eight gigs because. But yeah.
06:36:52.600 - 06:37:00.752, Speaker D: Yeah, I might also go and try to make it. I felt more comfortable working from the script now, although clearly the script does.
06:37:00.776 - 06:37:03.380, Speaker A: Have a lot of shoes.
06:37:04.000 - 06:37:09.500, Speaker D: Yeah. Issues in it. But just copy the CMU to the network.
06:37:13.280 - 06:37:45.230, Speaker A: Would it be much more troubles if we. If we make the machine the host, and, like, make the host of Window 24 and update everything to the up to date Kakano Nicole ones, just in case? Or. What do you think about this? Because it seems this run TD sh now is much more seamless like that. They define only one flag that sets. That sets it to TDX aware.
06:37:46.050 - 06:37:49.110, Speaker D: Yeah, that's reasonable too. We can go through that.
06:37:52.050 - 06:38:30.920, Speaker A: But yeah, definitely we should check out if this Yocto image is actually TDx aware or not. And if yes, it's perfect. If not, then probably we should do much more investigation on how to set up the kernel inside the Yocto image, I think why they're two times minus m. Oh yeah. Never mind.
06:38:36.180 - 06:38:42.560, Speaker D: I don't remember seeing those serial things present in one of the versions here.
06:38:47.110 - 06:39:13.940, Speaker A: Interesting. After the object in the second line, you didn't add the slash at the end. Thanks.
06:39:20.600 - 06:39:22.700, Speaker D: So that's still panic causing.
06:39:33.480 - 06:39:43.880, Speaker A: Could it be that there's an instance of KM was running still from the previous run that you started and not exited correctly and then when you are running it again is basically flashing?
06:39:45.780 - 06:39:54.640, Speaker D: That's quite possible. One of the things that the run TD would do is try to kill a bunch of stuff. And so maybe I get that running from that script but not otherwise.
06:39:54.980 - 06:40:09.370, Speaker A: Yeah. Then maybe we could fetch in the P's if there is some kind of process running and kill it ourselves.
06:40:21.030 - 06:40:22.490, Speaker D: Maybe that just isn't.
06:40:23.350 - 06:40:25.170, Speaker A: Or you can restart the machine.
06:40:27.630 - 06:40:29.770, Speaker D: Yeah. What could I look for?
06:40:30.440 - 06:41:08.874, Speaker A: You can do P's minus minus a ux, I think. And then grep because it's still gonna be too much. Grab something. Regarding QMo, nothing. Not sure if it turned out to be a zombie process. Tries to see in htop if your memory is being used for something else. So you have.
06:41:08.874 - 06:41:21.190, Speaker A: You are using ten gigs of memory for some process. Could it be the one e six?
06:41:22.180 - 06:41:25.360, Speaker D: You're saying that because I've got that much in total that I could be from.
06:41:25.980 - 06:41:30.400, Speaker B: I mean there's so small memory.
06:41:33.340 - 06:41:44.840, Speaker D: Well, there's quite a bit might have. Maybe he's doing something with that much.
06:41:51.070 - 06:42:00.734, Speaker B: Can you just remove the random generator? I know you like it, but sure. I think the.
06:42:00.822 - 06:42:01.930, Speaker D: Get rid of this too.
06:42:19.600 - 06:42:20.860, Speaker B: Where does it stop?
06:42:21.800 - 06:42:27.712, Speaker A: Wait a second. You ran run TD, not the run two script, right?
06:42:27.776 - 06:42:33.216, Speaker D: Yeah. Yeah, I've been. Just because I wanted to pick up at some cleaning filling stuff.
06:42:33.408 - 06:42:34.180, Speaker A: Yes.
06:42:36.000 - 06:42:40.532, Speaker D: Because I'm not running daemonize right now. I really am. Nothing. I don't think that that's happening.
06:42:40.716 - 06:42:41.440, Speaker A: Yeah.
06:42:44.260 - 06:43:28.610, Speaker D: I think that I'm still just not picking up some. I mean, I got one of these to run. We don't know that it's not just an option that I haven't picked and record with all these, which they were. Yeah. I could start from this was it that I start from and within two got it to work and login. I think it was copying freeders.
06:43:35.280 - 06:43:38.660, Speaker B: Maybe try the one where USB is still enabled.
06:43:54.480 - 06:44:08.800, Speaker D: I think I have. I think all of those were still present in the last one I tried. Yeah, all the USB was present here. Those are all the same.
06:44:15.260 - 06:45:04.820, Speaker B: Hmm. Can you, can you give me the sha hash of the QCUb file? 1 second, I need to get it for myself again.
06:45:20.450 - 06:45:25.430, Speaker C: Where this machine, I 8042 comes from.
06:45:31.130 - 06:45:36.190, Speaker D: Yeah, that was what in, it was in readers when I started copying from it.
06:45:37.170 - 06:45:38.920, Speaker C: I'm gonna try to remove this.
06:45:41.060 - 06:46:06.290, Speaker D: Yeah. Let me see if the CPU IV bridge works. That's the only thing I've changed. Okay. Not that. No, obviously I'm in the wrong, that's confusing myself.
06:46:20.670 - 06:46:26.170, Speaker B: Do you have the shot 25256 of the image?
06:46:26.750 - 06:46:29.250, Speaker D: Yeah. You want to paste it in the chat?
06:46:31.330 - 06:46:34.030, Speaker B: Yeah, let me just. In the chat.
06:46:39.170 - 06:46:40.554, Speaker C: Yeah, that's the correct one.
06:46:40.642 - 06:46:55.920, Speaker A: That's the correct one. Yeah, it.
06:47:44.310 - 06:47:47.360, Speaker D: Okay, so CPU IV bridge seemed important.
06:47:51.660 - 06:47:57.000, Speaker C: Can you pass cpu host? Because I did bridge?
06:48:00.780 - 06:48:01.720, Speaker D: Yes, sir.
06:48:05.620 - 06:48:07.520, Speaker C: Let me check the actual.
06:48:10.340 - 06:48:17.050, Speaker D: Yeah, like cpu host.
06:48:19.390 - 06:48:24.290, Speaker A: It will take the host cpu architecture if you do this, I think.
06:48:25.870 - 06:48:28.622, Speaker C: Yeah, okay, that's good. And all the features.
06:48:28.806 - 06:49:11.050, Speaker A: Yes, and all the feature of the host. Yeah. Cool. Now if we add the TDX stuff, would it still panic? I think because we removed this. Yeah, I think we removed this iv with, while adding the TDX stuff. That's why. And also the, regarding the memory encryption, which is up the main one.
06:49:11.050 - 06:49:30.210, Speaker A: Right. So it just crashes and throws you out of the machine.
06:49:32.160 - 06:50:40.420, Speaker D: Yeah, I'm certain that this is something happening at my front end proxy thing that I have to, seems intermittent, but I gotta resolve that. Okay, so get the TDX and then also the ram thing. All right. That memory backend object. Well, I mean, I was thinking that we could first add the TDX object. And I don't think that you need to use the private ram.
06:50:43.080 - 06:50:46.980, Speaker A: Okay, we can start with this. Did it start at least?
06:50:51.330 - 06:51:10.190, Speaker D: I think I left some junk in. Okay, now it says, warning, host doesn't support requested feature. That looks interesting.
06:51:14.760 - 06:51:25.100, Speaker B: You need to change the machine stuff as well. Um, no.
06:51:25.520 - 06:51:27.860, Speaker D: Like how so? Like that, that's the only other.
06:51:28.480 - 06:51:32.584, Speaker B: No, no, the one you have up. More, more. That's the one. You.
06:51:32.712 - 06:51:35.480, Speaker D: Okay, yeah.
06:51:35.600 - 06:51:48.390, Speaker A: To take the original one, which was. Yeah, exactly. This line. And also the line two lines below the minus object memory backend. Ram id ram one size two.
06:51:48.430 - 06:51:56.570, Speaker D: Yeah, okay, I got that one. I got that one here. But I thought that I could add that second because I think that that's optional. I think you shouldn't need that to have the.
06:51:57.870 - 06:52:11.360, Speaker A: You added it in the wrong line. I think you should add it exactly there. Yeah, exactly. But now if you don't do that line, it will tell you ram l is not defined.
06:52:11.400 - 06:52:13.352, Speaker D: Or why don't I just remove this?
06:52:13.536 - 06:52:16.540, Speaker A: You can, you can, you can. Why not? Let's try it.
06:52:17.480 - 06:52:32.270, Speaker D: Let me. I'll stay here because I think that this is likely to, you know, work. But let me first start with. Without those and without that. And I should be able to add those paths, but.
06:52:40.370 - 06:52:41.950, Speaker A: Oh, here we go.
06:52:45.970 - 06:52:49.710, Speaker D: See if it's only the adding that device that does it.
06:52:51.210 - 06:53:06.364, Speaker A: I don't recall introducing something else in the original one. I don't recall. You have I 800. Yeah, exactly. This one is not there. Plus, toss something else you still have.
06:53:06.492 - 06:53:09.000, Speaker B: Maybe there's still a VM running.
06:53:18.060 - 06:53:34.610, Speaker D: Doesn't seem like it. Oh, boy. Like I'm missing, uh.
06:53:46.430 - 06:53:48.980, Speaker B: Now it's exactly as it was before, right?
06:53:49.280 - 06:54:00.900, Speaker D: I think so, yeah. Now what am I missing?
06:54:13.040 - 06:54:15.470, Speaker C: White complaints about again?
06:54:18.130 - 06:54:21.710, Speaker D: Oh, did I still have the object TDX? And maybe. I mean, maybe that's.
06:54:35.290 - 06:54:35.602, Speaker B: Right.
06:54:35.626 - 06:54:46.720, Speaker D: Now I have nothing in there. That's. Yeah, very confused. Now.
06:55:08.070 - 06:55:12.730, Speaker C: Is it failing because of the chemo command or because of the GTK error?
06:55:13.990 - 06:55:21.170, Speaker B: Yeah, maybe it's something in the script above. Can you add an echo just before the q.
06:55:56.170 - 06:55:56.910, Speaker A: It?
06:56:24.020 - 06:56:25.840, Speaker D: No, I've lost it.
06:56:26.340 - 06:56:50.210, Speaker B: I'll show it up. You still have the object TDX. Guest.
06:57:01.350 - 06:57:56.082, Speaker D: Could we have this on video? I can probably look at the recording when I saw the screen where it would have worked. I'm still, again, this. I'm not seeing anything that's different since the last time that it was working. Remove the USB stuff. But that clearly still worked after that. Oh, I've been doing that with a given order. Not working.
06:57:56.082 - 06:57:57.190, Speaker D: That's possible.
06:58:15.060 - 06:58:20.884, Speaker A: Okay. I found the exact moment in the video where it was running.
06:58:21.012 - 06:58:29.720, Speaker D: Let me, you know, we figured out that the hash marks is the problem. Can't comment outline, I can't comment out lines in the middle of.
06:58:30.040 - 06:58:39.592, Speaker A: Yeah, I asked about this. I asked about this, and I wasn't sure that this is causing the problem, actually. But, yeah, apparently it's weird.
06:58:39.656 - 06:58:40.540, Speaker D: There we go.
06:58:41.360 - 06:58:58.258, Speaker A: Nice. Cool, cool, cool. So now we can continue with the TDX experimentation. So we can add the object to the x and then the machine stuff. Yeah, but, yeah, you are missing the machine stuff, right?
06:58:58.394 - 06:59:25.320, Speaker D: Yeah, I'll add a little at a time, I think. Actually, this. I don't understand what that is. That came in only when I added this.
06:59:31.060 - 06:59:46.160, Speaker A: I think it's when you added the other one. Yes. The minus object memory backend ram. Well, that's weird.
06:59:49.590 - 07:00:00.558, Speaker D: Complaining about it sure looks like it's a white space issue, but which white space? It's like one of these tab and not space.
07:00:00.614 - 07:00:02.890, Speaker A: And that's not here.
07:00:13.320 - 07:00:14.100, Speaker B: Wow.
07:00:14.520 - 07:00:17.496, Speaker A: Yes. You cannot tap after the slide.
07:00:17.528 - 07:00:26.544, Speaker D: I wouldn't have even known to, I wouldn't have known to worry about that. All right. Okay. Let's go a little bit more at a time.
07:00:26.672 - 07:00:28.500, Speaker A: Let's go.
07:00:37.650 - 07:00:45.430, Speaker D: Okay, great. So added nothing. No memory, just the TDX thing and it boots. But now we can see if there's.
07:00:55.490 - 07:01:01.270, Speaker A: And with that we can stop our stream and leave it as a suspense moment for the next episode.
07:01:01.930 - 07:01:03.190, Speaker B: Small teaser.
07:01:03.630 - 07:01:04.890, Speaker A: Small teaser.
07:01:27.630 - 07:01:39.060, Speaker B: But I don't see it. Um, and the, and the part above, t must be TD. It doesn't look like it's there.
07:01:39.520 - 07:01:52.100, Speaker A: Then we can grab it because I don't think it prints everything directly or. No, it does. There are not too many. Nevermind.
07:01:52.800 - 07:01:54.110, Speaker B: Yeah, it's not there.
07:01:54.280 - 07:01:54.990, Speaker A: It.
07:02:24.500 - 07:02:29.640, Speaker D: Yeah, I don't see that there. That's a good way to.
07:02:33.420 - 07:02:38.400, Speaker B: There'S no modules. The guest of the station is part of the kernel itself.
07:02:39.380 - 07:03:15.670, Speaker A: So Andrew, I think for that you need, after you log in and that machine, you need to pull, you need to clone the repository and do the setup because, because this Yocto image was created, image was not created using the, create TD VM from within, which does for you this cloud init, which does after the first boot install the station and the setup and the whole stuff. So probably you need to do this manually in this image in order to have this module enabled.
07:03:16.650 - 07:03:23.346, Speaker D: That makes sense even to, you have to do that even to get the, that makes sense.
07:03:23.538 - 07:03:30.230, Speaker A: Yeah. So maybe you can now do git clone of the TD's chronicle and run the scripts manually.
07:03:31.410 - 07:03:44.610, Speaker B: But the scripts, I mean they're just, it doesn't have anything inside. We won't be able to clone stuff. But I mean, the scripts, we had a look at this.
07:03:44.950 - 07:03:46.250, Speaker D: I don't even have to get.
07:03:48.110 - 07:03:49.290, Speaker B: You don't even have.
07:03:55.830 - 07:03:59.370, Speaker A: We already started with the productionized version of the.
07:04:05.760 - 07:04:11.512, Speaker B: No. Maybe. Can we get it to run with encrypted memory? I would like to see that.
07:04:11.696 - 07:04:31.150, Speaker D: Okay. Just to see if those options go. Yeah. Okay. So you can just add the.
07:04:40.090 - 07:04:43.010, Speaker B: And you missed the machine.
07:04:43.050 - 07:04:43.906, Speaker A: The machines.
07:04:44.098 - 07:04:45.270, Speaker B: The machine stuff.
07:04:47.290 - 07:05:10.640, Speaker A: Right. It didn't have originally that I. 804. Right. So do we need.
07:05:11.180 - 07:05:32.970, Speaker D: Maybe nothing. Memory size does not match.
07:05:35.270 - 07:05:41.490, Speaker A: Maybe add to the background maybe. Yes. Or eight.
07:05:50.120 - 07:05:53.740, Speaker B: What does the default script say about memory?
07:05:55.120 - 07:05:59.460, Speaker A: It was 256 megabyte, if I'm not wrong.
07:06:00.440 - 07:06:13.932, Speaker B: M SMP two. Maybe. Maybe I have sMp two g. I.
07:06:13.956 - 07:06:22.760, Speaker A: Think we have their SMP. Four even. Yeah. Just the number of threads. Right. Or cores.
07:06:25.020 - 07:06:28.812, Speaker B: It's actually simultaneously multi processing.
07:06:28.956 - 07:06:32.480, Speaker A: Yes. So a number of cores that you assign for this image, right?
07:06:33.980 - 07:06:35.120, Speaker B: Maybe, yeah.
07:06:36.060 - 07:06:37.080, Speaker C: Interesting.
07:06:38.870 - 07:06:46.086, Speaker A: Now it's failing for no such a file or directory. But where are we passing?
07:06:46.118 - 07:06:52.290, Speaker D: No, no, this is the thing that's, I think, failing. Then it core dumps right there.
07:06:53.710 - 07:07:06.060, Speaker A: Invalid argument. Interesting.
07:08:42.670 - 07:08:52.180, Speaker B: Does the canonical TDX repo mention any kernel configs for the TDX enablement?
07:08:54.720 - 07:09:01.460, Speaker A: Yes. There are some steps that you have to do on the host side and then on the guest side.
07:09:03.360 - 07:09:07.060, Speaker B: And like actual kernel configurations.
07:09:07.840 - 07:09:08.600, Speaker D: Yeah.
07:09:08.760 - 07:09:12.894, Speaker A: Yes, for the, for the host for sure. But for the guests I think.
07:09:12.942 - 07:09:14.542, Speaker D: Oh, but we've already done them on the host, right?
07:09:14.566 - 07:09:26.810, Speaker A: I mean, yes, the host is already done, but for the guest, I think there should be also some kind of kernel changes that you should do. Let me check.
07:09:28.070 - 07:09:30.690, Speaker D: Okay. These would be certainly things that are part of the.
07:09:44.320 - 07:09:51.300, Speaker B: Do we have an oVH machine that can run TDX? Have we figured this out?
07:09:52.320 - 07:09:53.340, Speaker D: I think so.
07:09:58.000 - 07:09:59.100, Speaker B: Who has access?
07:10:02.000 - 07:10:04.860, Speaker D: I feel like I associate that with RTM, but I'm not sure.
07:10:07.010 - 07:10:08.430, Speaker B: I'll ask. Good slide.
07:11:03.510 - 07:11:36.516, Speaker A: So Frieder, the setup. TDX guess script and canonical TDX, they install like this is the script that you run within your vm image. They do install the TDX guest modules there that script and execute started. And also they do kind of changes to the grub of the kernel for the next restart. So that's why they tell you run the script and then restart your vm.
07:11:36.708 - 07:11:44.980, Speaker B: Yeah, that's because they're using a default Ubuntu kernel and then they're adding these modules.
07:11:45.140 - 07:11:45.920, Speaker A: Yes.
07:11:48.630 - 07:12:01.610, Speaker B: Before the Yocto image case, I've just configured them to be part of the kernel itself. So the TDX guest driver is not a module, but the kernel part of the kernel itself.
07:12:02.950 - 07:14:44.920, Speaker A: They are installing, however, the TDX modules from ApT installed and they are installing some kind of tools there. Oh, interesting. They are installing the TDX tools guest that you showed me earlier, the one that's supposed to be decommissioned. Not sure how would we achieve this now in the yoctool set up or what the necessary steps for it to be to the x overdose it that seems to do it.
07:14:48.790 - 07:14:57.410, Speaker D: Yeah. When I'm doing the other. What's the Ubuntu.
07:14:59.270 - 07:15:00.366, Speaker A: I see. Yeah.
07:15:00.478 - 07:15:20.380, Speaker D: Yeah. So that has the object for the memory backend present, just doesn't use it in the machine.
07:15:25.240 - 07:15:38.750, Speaker A: If you do dmessage, would you see the DDX thingy on the startup of the octo image. Like anything message regarding that word, but doesn't, right.
07:15:39.890 - 07:15:43.586, Speaker D: No, I mean, I see something about it in the, just that it's the TDX key.
07:15:43.618 - 07:16:28.530, Speaker A: Mew something. Wait second, I think I know the issue. It's saying something regarding it.
07:16:58.040 - 07:17:27.490, Speaker D: Okay, so I mean the memory wasn't working, but I don't know where I got this particular set of memory things from that's also not working in Ubuntu as well as Yocto. Okay, so there's really no indication that that's something wrong. I think I might have just been trying to set up like the encrypted memory and I TDX and it's not gone too far to try and.
07:17:38.070 - 07:17:57.168, Speaker A: But now in any way we wouldn't be able to see, like even if we make it now run the queue the Yocto image, we would still not be able to see the module because, because apparently it needs to be installed if I listed correctly. So what do you think about this reader?
07:17:57.224 - 07:18:06.888, Speaker B: Like, I'm still not convinced that it needs to be installed. What you see in the script is that it actually installs kernel modules.
07:18:07.064 - 07:18:07.860, Speaker A: Yes.
07:18:09.760 - 07:18:23.190, Speaker B: And I'm arguing you don't need to install kernel modules for the Yocto image because like the DDX enablement is already part of the kernel itself.
07:18:24.050 - 07:18:24.830, Speaker A: Yes.
07:18:26.770 - 07:18:39.950, Speaker B: But maybe, maybe I'm wrong here. Maybe we're also not running the right TDX, the right kernel. I don't know.
07:18:40.510 - 07:19:07.820, Speaker A: That would be also interesting to know, like the image example that you have Andrew with the Ubuntu. Could you run it? Just, could you run to check which Linux image it's having? Yeah, that would be interesting to know if it's 6.6 or newer. Probably newer, 6.15.
07:19:14.840 - 07:19:25.260, Speaker B: But that will not really give us any information because canonical has a huge, like a significant offset.
07:19:47.090 - 07:19:49.430, Speaker A: So it is actually.
07:19:50.410 - 07:20:48.380, Speaker D: Okay, you know what? They pointed me to the particular kernel sources that that came from. Yeah, there's a repo for it, but it's not the most obvious one. Let me see if I have that. Well, he pasted that for me. It.
07:21:38.740 - 07:22:23.810, Speaker A: It. Okay. It doesn't seem to have also TDX in this one either.
07:22:24.430 - 07:22:27.582, Speaker D: Yeah, not in the D message, so.
07:22:27.646 - 07:22:30.170, Speaker A: It'S not the octo issue. Okay.
07:22:42.390 - 07:22:49.054, Speaker B: Is there the TDX guest device available? Doesn't look like it, right?
07:22:49.182 - 07:23:23.786, Speaker D: Oh yeah, yeah, it's got a wait. Really? I sure was able to. What was that?
07:23:23.978 - 07:23:25.310, Speaker A: What's happening here?
07:23:25.730 - 07:23:31.590, Speaker D: I don't know. Yeah, no idea.
07:23:32.610 - 07:23:34.870, Speaker A: You were kicked out of the image.
07:23:36.170 - 07:25:11.712, Speaker D: Yeah, I think just through bad e commands or something. What did I do for the test? I did the. What was that user attestation thing. Yeah, we were just here and this was the exact same image that user shared, doc. Okay, so now it's failing to get the report. So this is meaningful. We're still making progress then.
07:25:11.712 - 07:25:28.700, Speaker D: So somehow between whatever I was doing originally and whatever this script is launching, it is not picking up the TDX device even in Ubuntu when it was before. So we are down to differences in how we're launching this with Kimu.
07:25:30.840 - 07:25:38.340, Speaker A: Yeah. How are you running your ubuntu? Because this is not the original command, right?
07:25:38.720 - 07:25:39.660, Speaker D: That's right.
07:25:41.040 - 07:25:43.976, Speaker A: So probably we changed something from the original command.
07:25:44.008 - 07:25:48.980, Speaker D: That looks like excel KVM is missing. I see there's enable KVM.
07:25:50.040 - 07:25:56.310, Speaker A: I see some stuff are missing. Not only that, um.
07:26:10.130 - 07:26:14.270, Speaker B: There'S the no defaults. Maybe this one as well.
07:26:16.290 - 07:26:26.948, Speaker A: And no default is missing as well. And CPU host is missing the thing. Oh no, never mind, it's there.
07:26:27.084 - 07:26:32.560, Speaker D: Looks like it was present both. Let me make sure I'm looking at the original one. I guess this is the earlier original one.
07:26:33.420 - 07:26:36.960, Speaker A: Yes, you can just copy it.
07:26:37.620 - 07:26:43.240, Speaker D: Okay. But yeah, CPU is there. Maybe I'll do excel KVM instead of enable KVM. But I don't think that's it.
07:26:43.660 - 07:26:46.600, Speaker A: Demonize is. Demonize is missing.
07:26:47.430 - 07:28:03.918, Speaker D: But that shouldn't matter. It's just the, that won't matter anyway. So as excel KVM, other differences. We could try the no defaults. Try the new graphic.
07:28:03.994 - 07:28:04.610, Speaker B: It.
07:28:34.840 - 07:28:36.980, Speaker D: No vga, non valid option.
07:28:49.840 - 07:28:53.380, Speaker B: The no vgA. We added that later on. You can ignore that.
07:29:10.060 - 07:29:12.000, Speaker D: Install our TDX guest.
07:29:13.060 - 07:29:16.840, Speaker B: Can you check if the guest module is loaded?
07:29:36.070 - 07:30:28.950, Speaker D: Just not for TDX. That's a little weird then too. I'm using this different, I'm using a different one of those, I think. No, I'm not. That was the same one as before. Okay, it's not that. Differences.
07:30:45.420 - 07:30:56.200, Speaker B: Yeah, I see something. There's the machine part. And that has equals TDX and memory backend equals raml.
07:30:56.540 - 07:31:02.640, Speaker D: Yeah, that one we were ignoring. Because that one is not how it originally is in the.
07:31:03.030 - 07:31:04.678, Speaker B: Okay, I see.
07:31:04.774 - 07:31:14.090, Speaker D: Even in, even in the 23 ten, I don't think that it's. Well actually in the 23 ten it is like that. Yeah.
07:31:15.790 - 07:31:20.330, Speaker B: But that won't cause the, the error that we didn't know how to fix it. Right.
07:31:26.030 - 07:32:09.730, Speaker D: I guess that's a good point. Maybe. Okay, right. So I was keeping that out because that was problem for. Yeah, for yocto. I don't know if that's a problem that I should have been working with Ubuntu, then there were these quote Arg's things. Maybe the.
07:32:09.730 - 07:32:32.320, Speaker D: If the only reason that you even have the TDX devices for attestation, then maybe that is relevant somehow. Actually. I mean, maybe that is exactly what that is. Okay, so that worked with the memory being present in Ubuntu, but still there's no oh, now there's the TDX.
07:32:34.780 - 07:32:35.600, Speaker B: All right.
07:32:36.100 - 07:33:01.330, Speaker D: Okay, so that memory being present helped. Now can we do yocto then the same way? There you go. TDX, guess present.
07:33:02.230 - 07:33:08.126, Speaker B: Okay, so then the answer is there's.
07:33:08.158 - 07:33:10.650, Speaker D: Something wrong with now let's add the attestation then too.
07:33:12.350 - 07:33:13.330, Speaker B: I'm sorry.
07:33:14.400 - 07:33:54.750, Speaker D: I should try adding the attestation then too with these quote args. Should I worry about the p two id file?
07:34:01.050 - 07:34:06.680, Speaker B: You're missing a backslash on the TDF firmware after the TDF room. Thanks.
07:34:20.380 - 07:34:43.690, Speaker D: Okay, so that's fine. We have the TDX device and everything. Amazed. Somehow I thought this wasn't gonna. Okay, and so I could try to do the attestation example then. Is there going to be an easiest way to do this? I mean, without git being present? Maybe I should go through the pokey thing or do it this way.
07:34:46.350 - 07:35:05.900, Speaker B: I mean, one way is if that's, if you're compiling a static, static binary, then you can just copy it inside of the vm. If not, then it's going to be a bit more difficult. We'll have to add it at the QMU. Sorry. At the Yocto build stage.
07:35:22.330 - 07:35:39.470, Speaker D: Return where this was already. Oh well, it was present in. Okay, I know how to find it and I can go run it.
07:35:46.660 - 07:35:47.400, Speaker A: It.
07:37:25.850 - 07:37:45.450, Speaker D: What's the best way to get this? It's only present in. I don't really know where to find that sample code that I ran from Ubuntu because it was just packaged into the user share directory of it. I think it's based on this SGX decap samples, but it doesn't seem like it's exactly that.
07:37:47.110 - 07:37:51.770, Speaker B: Is it maybe part of the canonical TDX?
07:38:02.960 - 07:38:09.420, Speaker A: It says it's under user share doc libtDX test dev examples.
07:38:12.200 - 07:38:36.150, Speaker D: Yeah, but I don't have it. It's not present on the host. I could go run the TD with the Ubuntu, compile it, copy it out to the host, and then copy it back into the other guest images. I can't think of anything else. Maybe the only good way. Just because I don't know how to, I don't know how to go get that sample lib sgx code and just build it locally.
07:38:37.370 - 07:38:42.910, Speaker A: I think this part should be inside the TD, if I'm not wrong, not the host, right?
07:38:43.290 - 07:38:49.280, Speaker D: That's right. Yeah. How do I copy something out of team?
07:38:51.740 - 07:38:58.000, Speaker B: Ssh, SSA, Ssh, FCP.
07:38:59.740 - 07:40:11.160, Speaker D: I see. We don't have network set up in this. Okay, so this needs TDX test hdd links against some TDx attest library. But that is the only library that needs. So maybe I can just compile this on static.
07:41:45.940 - 07:41:46.680, Speaker A: It.
07:42:35.390 - 07:43:27.570, Speaker B: But I mean, one interesting thing that we figured out, that if you give the yocto image the correct TDX configuration on the host side, the hypervisor boots the vm, and then the TDX guest device is available, whereas if we're booting it from Azure, it's not available. So this concludes like constellation has mentioned that they, they can find the TD report and can access it. I'm wondering whether they found a different way of getting the TD report. Maybe, maybe Azure has implemented this in a different way.
07:43:29.960 - 07:43:31.180, Speaker D: Yeah, great point.
07:43:46.400 - 07:43:56.976, Speaker A: Could we reach out actually to the constellation team to see how did they reach to the part? Like do they run ubuntu or yaktu or. What kind of image do they have?
07:43:57.128 - 07:44:02.400, Speaker B: They have their own image. Like one.
07:44:02.440 - 07:44:03.260, Speaker A: Even better.
07:44:03.600 - 07:44:08.980, Speaker B: One thing is, one thing we could do is figure it out from their source code.
07:44:09.320 - 07:44:10.100, Speaker A: Yes.
07:44:12.440 - 07:44:18.540, Speaker B: And the other thing, of course, get in contact with them, which I did, but I haven't gotten any replay.
07:44:18.960 - 07:44:31.580, Speaker A: Okay, that's also interesting. Okay, cool. Because if they created their own image, it would be much easier, like, to transfer that knowledge to apply it on yupto if possible. Of course.
07:44:32.040 - 07:44:32.820, Speaker B: Yeah.
07:44:35.320 - 07:44:43.060, Speaker A: And do you know by chance if their image is minimal or big as Ubuntu or based on what did they build their image?
07:44:45.560 - 07:44:46.580, Speaker B: Let me check.
07:44:55.020 - 07:44:58.400, Speaker A: I mean, so far, the stable ones that I saw, they were ubuntu.
07:45:19.270 - 07:45:22.530, Speaker B: I think it's based on coral or fedora.
07:45:22.870 - 07:45:24.806, Speaker A: On what? Fedora. Okay.
07:45:24.918 - 07:45:33.530, Speaker B: Or core os, which is fedora. Here you go.
07:45:37.240 - 07:45:37.980, Speaker A: It.
07:46:10.090 - 07:46:22.910, Speaker D: So I think this should result be resolvable. I mean, this test, TDX attest, all the code for it is just in this, in the DCAP library, basically.
07:46:23.410 - 07:46:50.090, Speaker B: Okay. Then I think one last thing we would need to do is get networking working within the Yocto image. Can you show me the ESD? Yeah, we're still missing the networking device, right?
07:46:51.190 - 07:46:51.606, Speaker C: Yep.
07:46:51.638 - 07:46:54.930, Speaker D: Yeah, I can add that back in. So here, I just had this.
07:46:55.440 - 07:47:18.060, Speaker B: Yeah, I think that will work. And then as a final step, you would need to copy over an updated image from an updated Yocto Vm image. I copied it over into my usernames account.
07:47:18.560 - 07:47:20.358, Speaker D: Okay. So I could copy it again from yours?
07:47:20.464 - 07:47:21.110, Speaker B: Yep.
07:47:35.010 - 07:47:35.482, Speaker D: This one?
07:47:35.506 - 07:47:42.150, Speaker B: Yeah, yeah, it's just the plain one without the date, without the timestamp.
07:47:45.900 - 07:47:46.640, Speaker A: It.
07:48:51.560 - 07:48:56.340, Speaker D: Saw ssh server messages somewhere. Okay. Just said starting.
07:48:57.160 - 07:49:53.880, Speaker B: All right, can you, can you log in and see if you have access to the Internet? Like ping? Okay, can you ping without DNS? Eight. Eight. No. Okay. What does IP IPA say? What? It's, it says, it's actually um, a bit without a dash. Just ip a ip and then a, yeah. Okay, so it has, so maybe can you check if you, can you check if you can ssh into it from, from the host? Yeah, the host.
07:49:53.880 - 07:49:57.960, Speaker B: Just maybe it's just not forwarding packages.
07:50:02.900 - 07:50:04.440, Speaker D: Yeah, that's probably right.
07:50:05.460 - 07:50:23.142, Speaker B: Okay, cool. You need to give the root as.
07:50:23.206 - 07:50:35.610, Speaker D: I just have to do as root? Yeah. Okay cool. Yeah, that was ssh.
07:50:36.190 - 07:50:42.198, Speaker B: So then with this you can copy the binary over once it's statically built.
07:50:42.254 - 07:50:43.206, Speaker D: Oh, I see what you mean.
07:50:43.278 - 07:50:46.640, Speaker B: Okay, then you can, you can run the attestation.
07:50:47.420 - 07:50:48.260, Speaker D: Okay, got it.
07:50:48.300 - 07:50:48.516, Speaker A: All right.
07:50:48.548 - 07:51:05.228, Speaker D: So it's got ssh open. That's fine. So that's an easy way to sCp to it so it could finish that way. This doesn't have like any build tools or anything. So I mean it, can it do shared libraries at all? Like should the goal be to not have any shared libraries or if, well.
07:51:05.244 - 07:51:19.550, Speaker B: It does have some shared libraries, but they're very specific to that build system. So if I, if you want to have something not statically compiled, you would basically add it during the build process of the image.
07:51:23.850 - 07:51:30.070, Speaker D: I mean, I assume everything that we prepare like that. Yeah. Would be put into the build process of the image.
07:51:48.020 - 07:51:54.920, Speaker B: Okay. So I'm gonna log out soon.
07:51:56.580 - 07:51:58.640, Speaker D: Stop here is good for me too, actually.
07:52:05.710 - 07:52:53.900, Speaker B: Pretty nice hackathon. It was a fun, fun one. I mean, what did we achieve? We got the r builder and ref running in the Yocto image. We verified that the Yocto image has the TDX guest drivers installed. There's some issue with other azure. We need to figure that out. But yeah, I think was a big step forward also, I don't know about you, but maybe you also learned some stuff about Yocto, which would be my goal in the end.
07:52:53.900 - 07:53:10.030, Speaker B: Cool. Then let's wrap it up mode. Do you have any, any comments on your side?
07:53:11.530 - 07:53:16.470, Speaker A: Not really. I'm also kind of blocked now and brain locked.
07:53:17.250 - 07:53:29.680, Speaker B: All right. Thank you all for joining. And maybe, I don't know, maybe we can repeat that. Maybe a bit smaller. Not that eight hour session, but maybe 6 hours, I think.
07:53:32.940 - 07:53:37.520, Speaker A: Yeah, definitely. It was fun and learned a lot. Thanks. Thanks, Frieder, for hosting it.
07:53:37.820 - 07:53:41.800, Speaker B: Cool. All right, fabulous.
07:53:43.340 - 07:53:43.780, Speaker A: See ya.
