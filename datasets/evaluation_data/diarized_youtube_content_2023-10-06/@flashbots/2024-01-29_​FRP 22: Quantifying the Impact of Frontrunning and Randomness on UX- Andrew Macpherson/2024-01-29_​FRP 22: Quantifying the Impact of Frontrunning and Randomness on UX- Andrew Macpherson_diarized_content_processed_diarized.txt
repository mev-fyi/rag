00:00:00.890 - 00:01:35.050, Speaker A: Hi and thanks for the invitation. I'm here to talk about exotic cues and sandwiches, which is the subject of a research project which has been funded by a couple of FRP grants, and whose topic is viewing the MEV supply chain through the lens of queuing theory and using the ideas of queuing theory to give nomenclature and classification tools to MEV infrastructure, viewing them as queue disciplines, and to make probabilistic statements about user outcomes. And that includes both wait time, which is the purview of classical queuing theory, and execution quality, which is naturally of interest to participants in the trading ecosystem. So as everyone here is familiar, pending transactions waiting to get entered into a blockchain waits in a very interesting type of queue. Now, if everybody in the network ran their nodes with default settings, then in fact it would be a standard type of queue, which is a priority ordered batch queue with a Kendall notation of MDB one B is the batch size, but it's not mandatory, it's not part of the protocol to run this queue. In fact, scheduler is highly up to the discretion of the scheduler what to do about inclusion and omission, holding back transactions for multiple blocks and reordering them, and even creating their own transactions to include. So it's a very unusual Q discipline, which is far beyond the things that people studied in network design and telephony.
00:01:35.050 - 00:02:26.410, Speaker A: This type of scheduling activity naturally breaks up into many kinds. I will focus on two fairly basic kinds, which are extremely well known in the industry. Front running, where the scheduler creates a transaction to insert ahead of a target transaction, and back running, where the created transaction is inserted after the target. Now, these types of manipulations have qualitatively different desirabilities for different participants. So a front run is used to manipulate state ahead of execution of a transaction, and so it directly impacts the execution quality of that user's transaction, often negatively impacting the user. So for that reason, front running is often considered to be bad. It certainly increases unpredictability of executions.
00:02:26.410 - 00:03:50.934, Speaker A: On the other hand, back running does not directly impact the execution of the target transaction, and it's often used in practice to carry out essential market maintenance activities like arbitrage and liquidations. So it does depend a bit on who you ask, but at least from the perspective of the target user, it's at worst neutral and in fact maybe considered good or helpful. So in the context of queuing theory, one way to simplify, apparently simplify things and eliminate this type of behavior is to simply disallow all of that order manipulation stuff and go back to first to come, first serve queue, or a priority order queue, and make that enforced. But it's also interesting to consider special types of queue which facilitate the type of desirable mev activity while making it difficult to perform the other types. And a couple of papers have appeared about this type of approach, of which are one I'll talk about today, which is the output of FRP 34 and is on the archive. Now, do background auctions protect traders? So I'm going to talk about a model for a type of queue called a backrun auction, which abstracts and generalizes two systems which are in deployment today. That's cal protocol's MeV blocker and Flashbot's MEV share.
00:03:50.934 - 00:05:14.354, Speaker A: In such systems, user orders gather in a pool, let's label them, say, by a hash. And if these orders are transactions, market orders on a constant function market maker decks, we can imagine their contents as being parameterized by a real number indicating their size and direction. These transactions are going to be then placed into some order by a scheduler, possibly out of the control of any of the parties under consideration here. So that's this function tx, which you get transactions tx one up to txk, and then there's a second lane through which a pool of searchers can insert their own transactions that to each user order they'll be allocated a searcher a of h. And that searcher has an opportunity to create a backrun, which will be atomically sequenced after the target. So that means that while the overall ordering tx one up to txk may be arbitrary, it's guaranteed that for all n, txn will be immediately followed by its background Aftxn, or the transaction created by searcher Aftxn. So we want to think about the dynamics of this model from the perspective of a searcher who may have imperfect information about the values of those parameters, so they might not know the contents of the target trades, or they may know partial information.
00:05:14.354 - 00:06:21.682, Speaker A: For example, in mev share, it's possible for users to conceal part or all of the information about the contents of the trade from the backrunners. Similarly, they may know reduced information about the allocation function and about the absolute ordering. So we got some examples. Interesting cases where the backrunners have no information about absolute ordering, but they do know something about which target transactions they will be able to backrun. So a is deterministic is one extreme is that more generally a could be determined by some auction where backrunners bid for allocations, and as a random variable, a will represent the beliefs of the searcher about the outcomes of that auction. So it's important to note that in this example, even if a is deterministic, meaning that the searcher knows his target transaction, depending on the distribution of searches and the ordering, the searcher may know nothing about the overall ordering of transactions. In particular, they don't know which user trade will be sequenced after their backrun transaction.
00:06:21.682 - 00:07:08.760, Speaker A: That makes it difficult to front run. So now let's focus on the case of a constant function market maker pool. So the main strategy for a front runner in this context would be to manipulate the price in order to close a sandwich with a backrun. So in order to pull that off, you need to be allocated the slot either side of a target user trade. That's two backruns in a row. Now, in an idealized situation, searcher competition is too intense, and there's no way any searcher will be expect to get any two slots in a row. And in that context, their best strategy is to do a straightforward pass through arbitrage, where they move the price back to the price on the largest external markets, for example, the binance price.
00:07:08.760 - 00:08:29.230, Speaker A: On the other hand, in essentially all other cases it is profitable to try to attempt a sandwich if the probability of achieving it is non zero. This is easiest to see in the case of a searcher monopoly, where one searcher will land, is guaranteed to land all of the backruns, and that searcher has a lot of information about the ordering and contents of trades. But what might be less obvious is even if the searcher doesn't know very much about the contents of trades, and nothing at all about the ordering, it's still profitable and expected value for them to attempt sandwiches by doing a little bit of price manipulation. So the question is, how bad is it? Well, fortunately in our model, it's possible to get some kind of bound on how bad the price manipulation gets. There's this result which I'll explain verbally. We find that if the trade size is very small, or the searcher market power, which is a proxy for the probability of a searcher to land two background slots in a row, is close to zero, then searchers have a dominant strategy for setting prices, and that strategy is to manipulate prices a bit. But that manipulation coefficient is close to zero, where zero means no manipulation, just use the binance price.
00:08:29.230 - 00:09:39.042, Speaker A: What's more, we know how close to zero that thing is. We can get control of it with a straightforward explicit function which has known parameters that we can compute. There's the MGF of the trade distribution, the distribution of size and direction of a trade, the search and market power, and a number that can be computed from the curve of the CFMM. If the CFMM, for example, is a balancer style weighted CPMM, then that number is the share in the pool of the numerair. So this result gives exchange designers a way to make claims about the fairness of pricing on their pool. Given this queue structure, and as I mentioned at the start, the paper is now on the archive, I'll just finish by saying something about the next steps that need to happen for this research to be really useful in the real world. We should be extending this simple one batch model to account for multi block strategies, where, by analogy with a prisoner's dilemma, repeated block allow coordination behaviors to emerge and a price fixing ring.
00:09:39.042 - 00:09:47.880, Speaker A: And this is exacerbated by the possibility of making smart contract commitments. That's all. Thank you.
