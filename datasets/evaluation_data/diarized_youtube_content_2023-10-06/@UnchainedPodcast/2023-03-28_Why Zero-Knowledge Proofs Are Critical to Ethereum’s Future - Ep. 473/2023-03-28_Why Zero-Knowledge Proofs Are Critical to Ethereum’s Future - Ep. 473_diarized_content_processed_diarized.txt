00:00:00.250 - 00:00:00.800, Speaker A: You.
00:00:03.810 - 00:00:26.358, Speaker B: Hi, everyone. Welcome to Unchained, your no Hype resource for all things crypto. I'm your host, Laura Shin, author of The Cryptopians. I started covering crypto seven years ago, and as a senior editor at Forbes, was the first mainstream media reporter to cover cryptocurrency full time. This is the March 28, 2023 episode of Unchained. Buy, earn, and spend crypto on the crypto.com app.
00:00:26.358 - 00:00:52.462, Speaker B: New users can enjoy zero credit card fees on crypto purchases in the first seven days. Download the crypto.com app and get $25 with the code Laura link in the description web. Three projects lost nearly $4 billion of crypto assets in 2022. But nothing is more expensive than losing trust. Secure your company with Hallborne's best in class security advisory solutions. Visit hallborne.com
00:00:52.462 - 00:01:10.334, Speaker B: for more. Today's topic is Zero knowledge technology. Here to discuss are Ali Yahya, general partner at A 16 Z Crypto and Dan Bonet, professor of Computer Science and Electrical Engineering at Stanford University and Senior Research advisor at A 16 Z Crypto. Welcome ali and Dan.
00:01:10.462 - 00:01:12.126, Speaker C: It's great to be here. Thank you, Laura.
00:01:12.238 - 00:01:12.974, Speaker A: Thanks, Laura.
00:01:13.022 - 00:01:17.982, Speaker B: Let's start with each of your backgrounds. Ali, how did you come to be general partner at A 16 C crypto?
00:01:18.126 - 00:01:44.970, Speaker C: Sure. I'll give you a quick rundown of my story. I was born and raised in Mexico City. I was always into tech from an early age. I was always into computers, and I knew I wanted to come to the US. So I came to Stanford, studied computer science, focused on computer systems, computer security, computer networking. And actually in 2010, I was doing computer security research under David Mizieris, who's a colleagues of Dan's and a professor at Stanford.
00:01:44.970 - 00:02:41.146, Speaker C: And that's when I first discovered the Bitcoin white paper, which was actually too early to discover it, because 2010, this is very early, it was very easy to think that it was just a toy, which I did. And so even though I mined it and played with it, I didn't really keep track of any of the private keys for anything that I mined. So that was my first very visceral lesson in crypto, and that was seared into my memory thereafter, especially in 2013 or so, when I started to pay more attention and it started to dawn on me how important technological innovation was at the core of Bitcoin. I was super interested in the space. Since then, it was hard to actually work full time in the space. And so I actually took a job at Google X working on machine learning for robotics, and then moved over to Google Brain, where I did a little bit of the same. And throughout this time, I got fascinated by Ethereum and was thinking about it and playing with it nights and weekends.
00:02:41.146 - 00:03:15.674, Speaker C: And then finally, in 2017, I got connected to the firm, to Chris Dixon, who had been investing in crypto for a long time and had started the practice, the crypto investing practice here at the firm. And back then it was all still kind of consolidated with the main firm. So his pitch to me was, you should leave Google, you should join us and we should start a crypto fund. This was before the kind of the proper crypto fund really existed. And so I joined. We kind of saw eye to eye just about everything, so it felt like a great opportunity. I joined in 2017, and in 2018 we started the first crypto fund.
00:03:15.674 - 00:03:34.594, Speaker C: We recruited a number of other people and that team, like just me and Chris, grew eventually to now include something like 80 people or so. Like, the full crypto team has become a much bigger effort within the firm and has been quite a ride. So that's a quick rundown of my story. I'll pass it over to Dan. Great.
00:03:34.632 - 00:03:55.958, Speaker A: Thanks, Ellie. Let's see. So I fell in love with cryptography pretty early on. It's a field that involves beautiful mathematics and people really care about the results. It's applicable in the real world. So how can you not fall in love with cryptography? A wonderful, wonderful field to work in. And then I've been a professor here at Stanford for, let's just say a long time.
00:03:55.958 - 00:04:43.574, Speaker A: I focus on cryptography, computer security, blockchains and all things like that. I teach all the classes on those topics here on campus. I'd say about a decade ago, my students started asking me about this thing called Bitcoin, and we started looking into it and we realized, wait a minute, this is like an incredible application of cryptography. And so I kind of switched gears to kind of work on blockchains, or at least kind of applications of cryptography to blockchains. And it's been so much fun, I can tell you, the past decade, it's the most fun I've had in my entire career. Just because there are so many new problems, the blockchain sort of opens up very new challenges in cryptography. It's very interesting questions to think about.
00:04:43.574 - 00:04:59.466, Speaker A: And not only is it interesting to think and develop ideas to solve these problems, people really care. They take these ideas and deploy them and they're then used in the real world to protect real assets. So it's been so much fun to work in the space that I really.
00:04:59.568 - 00:05:07.150, Speaker B: Yeah, I feel the same way. Out of 25 years of doing journalism, the last eight covering this space has been definitely the most fun. There's just no question.
00:05:07.300 - 00:05:27.542, Speaker A: Actually, one thing that maybe I'll add quickly is that when people ask me what I work on, I like to say that I work on the science of blockchains. And there really is a lot of science in the area of blockchains, which is basically all the underlying technology that makes blockchains possible. So it's really kind of an amazing area with lots it's very interdisciplinary and there's like room for anyone.
00:05:27.596 - 00:05:46.714, Speaker C: Yeah. Dan, what you say is basically it brings in aspects of cryptography distributed systems mechanism design and game theory, mechanomics, even political science with questions of governance. It's just kind of hard. It's actually hard to find a scientific field that is more interdisciplinary than crypto and blockchains in particular.
00:05:46.832 - 00:05:56.462, Speaker A: And I'll say that even the community is very inclusive in that anyone who has an interest in contributing, they'll be heard and they can make.
00:05:56.516 - 00:06:30.380, Speaker B: Yeah, it's funny because sometimes people will ask me how to work in this space, and I'm like, everybody that works in it was doing something else before. So I'm sure you can figure out a way to contribute. Our topic, as we mentioned, is zero knowledge technology, which is also actually quite multidisciplinary. And people in the blockchain space are super excited about it for a number of reasons, such as privacy and scaling, among other things. But let's start by defining a bunch of terms. So let's just actually explain what zero knowledge technology is or zero knowledge proofs are.
00:06:30.910 - 00:07:10.370, Speaker A: Maybe I'll define it in two steps. The first step is what we would call generally a proof system, a succinct proof system. Sometimes these are called snarks succinct non interactive arguments of knowledge is what this stands for. And what it allows you to do is basically it allows approver to convince a verifier that a certain fact is true. Yeah, and the amazing thing is that no matter how complex the fact is, the proof that the fact is true is going to be succinct, which means that it's very short and it's very fast to verify. So I can take an incredibly complicated computation and the prover will be able to generate a succinct proof. So it's fast.
00:07:10.370 - 00:07:54.846, Speaker A: So it's short and fast to verify a succinct proof that the computation ran correctly. The verifier can easily be convinced by checking the proof that the computation ran correctly. Then things will proceed. Yeah. So this is the concept of a succinct proof system, again, what's called a Snark, a succinct non interactive argument of knowledge. So that's just for proving that a certain computation ran correctly, when you add in zero knowledge to it, not only do we want to prove that something worked correctly, we also want to prove it in zero knowledge, which means that we prove that it's correct, but we reveal nothing else about why it's correct. So there could be secrets involved in explaining why something is correct, but I can prove it to you without revealing those secrets.
00:07:54.846 - 00:08:13.510, Speaker A: And I guess the classic I have to give the classic example we can't not give the classic example, which is you have a puzzle. I guess people always like to give the example of a Suduko puzzle. And I want to prove to you that I know a solution to the Suduko puzzle. I can do it in zero knowledge, meaning that you'll be convinced that I know the solution, but you'll know nothing about what the solution.
00:08:13.590 - 00:08:59.110, Speaker B: Another example was in this wired video that was in the zero knowledge canon that you guys sent me. And he explained it to a ten or eleven year old. He said, okay, I have this image here and it's a bunch of penguins, but there is one puffin in this image and I know where it is. And the way he proved it to her was he had a bigger piece of paper that had a single hole in it, and then he put the image of the penguins behind the paper in such a way that only the puffin would be visible in that little hole. And so he proved to her that he knew where it was without revealing anything about where it was. And I just thought, oh wow, what a great analogy.
00:08:59.450 - 00:09:45.974, Speaker C: Just to add, I think both of those examples highlight both the privacy aspect, the zero knowledge aspect, because you're not revealing the actual solution. But they also highlight the succinctness aspect in that both of them are really efficient. To verify that you actually, as the person who's receiving this zero knowledge proof, can very immediately know that actually, yes, the person who's proving this fact to you does, in fact, have the answer. And in the first case, in the case of the Sudoku puzzle, it's usually the case that verifying that a Sudoku puzzle is correct is much faster than actually solving the Sudoku puzzle. So it's succinct in that sense. And then same thing with the cutout, the puffin penguin cutout. You can actually see the penguin that has the right color through the cutout, and so you know that it exists, but you don't know where it is.
00:09:45.974 - 00:09:51.660, Speaker C: And you can do that efficiently and sort of verify that that proof is correct very quickly.
00:09:52.030 - 00:10:04.606, Speaker B: So one other aspect of this that I want to explain for people is in the process of creating one of these there's different entities such as the prover and the verifier. Can you explain those terms?
00:10:04.788 - 00:10:28.446, Speaker A: Yeah, maybe just to step back 1 second again. I think it is kind of important to understand that there are two separate concepts here. One is this concept of a succinct proof. I just want to prove to you that something is correct. There are no secrets involved. I just want to prove to you that something is correct. Like, for example, that the falling solution to a Sudoku puzzle is really a valid solution to the Sudoko puzzle.
00:10:28.446 - 00:10:58.990, Speaker A: There's no secrets. I just want to prove to you that something is correct. And the point is, there should be a short proof that's fast to verify, no matter how complicated the computation is. That's one concept. So here there are no secrets. And then an additional feature that you could add on is the zero knowledge feature, which you could say, not only do I want a proof to be short and fast to verify, I also want it to be zero knowledge so that it reveals nothing about why the statement is correct. And those are two it's kind of important to understand that those are two separate concepts.
00:10:58.990 - 00:11:43.818, Speaker A: The players in the space are the proofer and the verifier, as you say. There's a third player which we'll add in just a minute. So the prover is the one that is producing a proof that the statement is correct. That, for example, the computation ran correctly and the verifier is the one that is sort of limited in compute power and it needs to be able to verify the statement. It needs to be able to verify the proof very quickly. And so those are the two players. There's a third player which is sometimes called the setup player, which is used or maybe sometimes it's called the preprocessing player, which is used to sort of set up the system so that the prover and the verifier can actually one can generate the proof and the other one can verify it.
00:11:43.818 - 00:11:47.786, Speaker A: And so those are the three players in the system, but we'll primarily focus on the proof.
00:11:47.818 - 00:11:53.246, Speaker B: And then in my research, I also came across the proof generator. Is that different than prover or the.
00:11:53.268 - 00:11:56.722, Speaker A: Same that's the prover, yeah. Proof generator approver. Yeah.
00:11:56.776 - 00:12:10.338, Speaker B: Okay. And one thing that I kind of wondered when I was researching this is so if there is this one prover, then does that mean that when you use your knowledge technologies that there has to be an aspect of centralization involved?
00:12:10.434 - 00:12:49.694, Speaker A: Not at all. Not at all. Actually, that's a wonderful, wonderful question. So traditionally, when the prover wants to prove that a statement is correct, it is true that this single prover would generate the proof. But in fact, just in the last two or three years, there's this concept called a collaborative proof that allows a collection of provers to jointly generate a proof that a certain statement is true. So imagine each one of the provers knows one aspect of why the statement is true. Think of, like, the big elephant and each prover only has one side of the elephant and together they want to jointly prove that what they're looking at is an elephant.
00:12:49.694 - 00:13:20.742, Speaker A: And so it turns out even that is possible. That's called a collaborative proof, where they jointly they talk to one another through what's called a multiparty computation and together they're able to generate a proof that the statement is correct using the combination of their witnesses. Nobody reveals anything about their witness other than the fact that the statement is true. Overall, yeah, usually we do talk about a single prover, but that's not inherent in the concept. We could actually have multiple provers.
00:13:20.806 - 00:14:09.578, Speaker C: And in the cases where you do have a single prover, even though there's only one individual or one entity that's generating the proof, it's also the case that they are not really able to falsify the proof and that the work that they're doing has to be correct. By construction, the proof ultimately guarantees that whatever it is that they are responsible for doing whatever computation they're responsible for running will ultimately be correct. And so even though in that case you could say that there's a central entity that's doing the work, there's very little that that entity could do to try to subvert the system. So the centralization isn't as bad as it would be in the case of, say, like a consensus system where if it were controlled by a single entity, that centralized entity could essentially take control of the whole system or sort of subvert the system in some meaningful way.
00:14:09.664 - 00:14:17.466, Speaker B: Okay, one other term that I want to define is also there's ZK starks. So how is that different from a ZK snark?
00:14:17.578 - 00:14:42.242, Speaker A: Yeah, so Starks are basically a particular type of proof system, typically, at least that's how the term is used. So a snark is basically, I would say, snark, or a ZK snark is kind of the umbrella term. And what we now use the term stark as a way to refer to a particular type of proof system, a particular instantiation of a snark.
00:14:42.306 - 00:15:01.034, Speaker B: Okay, so let's also now talk about why it is that there's so much buz about this now. Like what developments have we seen in recent years that have enabled zero knowledge technology and zero knowledge proofs to kind of it feels like they're almost on the precipice of some kind of tipping point or something.
00:15:01.152 - 00:15:58.522, Speaker A: Oh, yeah, that's a great question. I mean, the question is always like, why did it happen now? Why didn't it happen? Why didn't it take off 20 years from now or 20 years ago or 20 years from now? Why now? Why at this particular time? And I think snarks and generally zero knowledge proof systems or proof systems in general, is a remarkable success story for the theory of computer science. Yeah, this is an idea, the idea of proof systems and zero knowledge proof systems. That idea dates back to the 1980s. It's not a new idea, dates back to the 1980s. But for many years it was considered this theoretical thing that a is not clear exactly where it applies, and B, it had performance issues in that it looked like it was quite difficult to generate proofs for very complicated statements. And what's happened over the last couple of years is, first of all, this became like a pretty critical enabling technology for blockchains.
00:15:58.522 - 00:16:54.498, Speaker A: It's important to understand this, that for blockchains to evolve to the next level, they need these proof systems. Yeah, they're kind of pretty critical enabling technology for blockchains to continue to develop. And so what's happened is there's a lot of effort from industry and from academia, of course, to try and make these things as practical as possible. I want to mention that, like in the early 2000, around 2012, 2013, there were a couple of critical results that basically showed how to improve these are algorithmic results. This showed how to improve the provers. So better algorithms for generating proofs. In particular, what happened is prover time used to be quadratic in the size of the statement, which meant that we can only do proofs for relatively small statements, and that was reduced to linear or quasilinear in the early two thousand and ten s.
00:16:54.498 - 00:17:39.390, Speaker A: Yeah. And the fact that now all of a sudden we have linear time provers that actually enabled us to develop proof systems that can do proofs for much more complicated systems. And that is what made it practical. And then of course, what happened is all the commercial need for these things meant that there is a need to develop platforms and frameworks that make it easy for everyday developers to use these systems. And as a result, the field kind of literally just took off over the last couple of years. And I think Ali would agree that these days we can do things in proof systems that just a few years ago looked like science fiction. I mean, this is like unbelievable, unbelievable advance that we've seen over the last couple of years.
00:17:39.390 - 00:17:59.018, Speaker A: I mean, there aren't that many examples of technologies where 510 years ago, things that looked like science fiction are now completely possible. And that's really the massive transformation that has happened. And that is due to both theoretical contributions and the fact that blockchains need these technologies to continue to evolve.
00:17:59.054 - 00:19:08.666, Speaker C: Yeah, it goes to show, I think, the rate of improvement that you end up having when you have a whole ecosystem of startups working closely with researchers and academia to make all of these things much better than they used to be. And that is largely because zero knowledge proofs or ZK technology is kind of like the Holy Grail cryptographic primitive for blockchains. And I think it's actually worthwhile explaining why that is. And I think it pops out of the definition that Dan gave at the beginning, which is that one of the uses of zero knowledge proofs is to prove that the output of a computation is correct. And one of the things that your listeners may already know is that a blockchain, the best way to think of a blockchain like Ethereum is as a computer. And it's a computer that is controlled by a broad and diverse community, which is to say that it's decentralized. And the way that a blockchain like Ethereum guarantees that the computations that run on top of it are correct today is that every node in the network has to run every instruction of every computation that users submit to this computer.
00:19:08.666 - 00:19:50.886, Speaker C: And of course that's a very inefficient process. It's what causes blockchains to not really scale, at least not in the form that they exist today. And it's also what makes zero knowledge proof such a perfect primitive to solve this problem. Because with zero knowledge proofs, what you could do instead is have any one node run the computation and generate a proof of its correctness. And then because that proof is succinct, which again means that it's small and it's very fast to verify. Every other node in the network can just verify that proof without having to do the heavy lifting of actually running the computation themselves. And so because zero knowledge proofs have this beautiful application to blockchains, they have improved dramatically over the course of the last five years or so by many orders of magnitude.
00:19:50.886 - 00:20:25.170, Speaker C: Like the proverb generation costs are much lower than they used to be. We've got much better algorithms, we have optimized implementations of some of these algorithms, and then we're also starting to see hardware acceleration for all of these things such that it all becomes so much better. And it's now becoming feasible to reimagine what a blockchain might look like in terms of zero knowledge proofs now that they were available. And that's maybe something that we can dig into. I think it's an exciting application of zero knowledge proofs to this space, and we haven't even started to touch the ideas of privacy, which is a whole other kind of interesting section that we can also discuss.
00:20:25.320 - 00:20:57.018, Speaker A: But actually, let's build on that, actually, if it's okay, Laura, I'd like to actually I think what Ali said is like a fantastic way to introduce roll ups. So let's build on that just a little bit in that really the application. The reason why proof systems are so useful for blockchains is that they fundamentally enable us to outsource computation into an external server. Yeah. So you can think of a blockchain, as Ali said, the blockchain is a computer. Yeah. You can think of it as like a computer, but that will run arbitrary programs.
00:20:57.018 - 00:21:26.486, Speaker A: The problem is that it's a very slow and very expensive computer to run. Yes. And so just to keep you always have to keep in mind, ethereum can process like 15 transactions a second. So it's a computer, but it's a slow and expensive computer. And so if we ask this computer to do a very complicated computation, we're going to run into trouble because it's going to take a long time and it's going to be very expensive to do. So what we'd like to do is we'd like to move as much computation off this computer as we can. Yeah.
00:21:26.486 - 00:21:31.606, Speaker A: And in fact, there's massive industry effort in just getting computation off of the blockchain.
00:21:31.638 - 00:21:31.786, Speaker C: Right.
00:21:31.808 - 00:21:52.254, Speaker A: So the blockchain can just do as little as possible because it's such a slow and expensive computer. When we talk about outsourcing computation, we'd like the computation to run on some external server that's like fast and cheap to execute. The problem then is how do we know that what the server told us is correct?
00:21:52.372 - 00:21:52.606, Speaker C: Right.
00:21:52.628 - 00:22:03.474, Speaker A: So the server is going to push the results back to the blockchain, but how does the blockchain know that what the server computed is actually the correct result? And that's exactly where proof systems come in.
00:22:03.512 - 00:22:03.666, Speaker C: Right.
00:22:03.688 - 00:22:53.026, Speaker A: So proof system let us do is they let us move computation from a slow computer onto a very fast one. That fast computer will compute the result and will also attach a proof to that result. And that proof is going to be short and it's going to be fast to verify, so that when we push it onto the blockchain, the blockchain can now quickly get confidence that the result that it's looking at is correct and everything follows from that. By the way, I'll say that it's not just blockchains that can benefit from these proof systems. Also, if you need to do a computation on your wristwatch, right? Your wristwatch is not a very powerful computer. It's the same principle. You can move the computation to a fast server in the cloud and the server can generate a proof along with the result to convince the watch that the computation is correct.
00:22:53.026 - 00:23:50.306, Speaker A: And really a lot of the applications follow from that. And Ali mentioned ZK rollups which allow you to process many transactions, right? So we can take 1000 transactions, have a remote server process those thousand transactions and produce a proof that they were processed correctly and now we just push the proof onto the chain. So now all of a sudden every transaction that's sent to the chain actually corresponds to 1000 transactions. So instead of 15 transactions per second now, boom, we're at 15,000 transactions per second and that's where the scaling comes from. But there are many other reasons to push computations off of the chain and maybe I'll mention them quickly and we can come back to them later. It turns out when you come to bridge between blockchains building a bridge between different blockchains there's a need to push computation off chain. It turns out if you're doing complicated financial modeling that you'd like to do on the chain it makes sense to do the financial modeling off chain and push proofs on chain.
00:23:50.306 - 00:24:04.838, Speaker A: And so this idea of outsourcing is a very powerful idea. It really allows the blockchain to do things that it simply can't do today and again, that's why this technology is such a critical piece of technology for the continued evolution of Ethereum.
00:24:04.934 - 00:24:25.838, Speaker B: Well, one application that people are also excited about is just straight up Zke EVMs and I wondered what your thoughts were on those. I think around the time this comes out polygon will be releasing its zero knowledge ethereum virtual machine is what that means. EVM so what's your take on Zkevms?
00:24:25.934 - 00:25:57.290, Speaker C: Yeah, I mean, one way to think about a Zkevm is as an instance or a way of implementing what we've been describing, namely a zero knowledge roll up where you have some way of proving EVM bytecode computation using a zero knowledge proof that can be outsourced from the layer one blockchain to some faster computer. As Dan was saying, something that can actually perform all of those computations off chain produce a proof for them and then push them back to L1 and then have L1 just verify the resulting proof very efficiently. And a zkvm just suggests or just alludes to the fact that it should be backwards compatible with the EVM, that you should be able to take a solidity smart contract and compile it down to the EVM and then have the resulting bytecode still be provable by the ZK roll up. So it's one way of essentially scaling, I think the interesting just to step back, the interesting thing about zero knowledge proofs is that it unlocks this whole new design space for new architectures for blockchains that are able to scale better than existing blockchains. One approach is this ZK roll up approach which is a combination of a layer one like ethereum plus a L2 like Polygon, as you mentioned. And there are many others like Matterlabs and scroll and there are many other projects that are working on similar approaches which essentially outsource the computation to a sequencer. Sequencer is this faster computer that performs all of those computations and produces a proof.
00:25:57.290 - 00:26:56.686, Speaker C: Other approaches might include rearchitecting the entire blockchain from scratch. So instead of having an L1 like ethereum that already exists and attaching an L two on top, you could build, for example, a blockchain that's sharded. And this goes back to many of the attempts from 2017 and 2018 to build a sharded blockchain. But the difference now is that zero knowledge proofs are much more efficient. So the problem of building a sharded blockchain has gotten much much easier because before the challenge was if you have multiple shards, multiple interconnected blockchains that are somewhat independent from each other, how do you know that the work that the other shard did is correct? And before, in 2018, there were all of these kind of game theoretic solutions to try to get at a solution. But now, because of zero knowledge proofs, again you can do the same thing. Have one shard, have the nodes in one shard, generate proofs for the computations in that shard that other shards can then verify.
00:26:56.686 - 00:27:49.582, Speaker C: So the problem of securing a multi shard system becomes much easier. And that would be a completely new architecture that is now possible, that may have not been possible before, and it might also be compatible with the EVM. And so technically would be another instance or another form of a zke EVM. Another architecture might actually, as Dan was alluding, you can actually have the computation be done either fully on chain in a data center or you could imagine the computation be done on the client. You might not have a server at all and you might have the browser or the phone do the computation associated with the transaction that it submits to the blockchain on the phone and then submit the transaction together with its proof to the blockchain. And then have the blockchain simply just incorporate it such that you don't even need something like a sequencer or a server. That generates the proof.
00:27:49.582 - 00:28:09.942, Speaker C: Essentially the user can become their own prover. So that's just to illustrate that there are many new kinds of architectures that have become possible and that will become increasingly viable as the technology improves. Some of which will be compatible with the EVM and therefore deserve the moniker Zke EVM and some of which might actually take a completely different approach and might not be backwards compatible. It might be better in other ways.
00:28:09.996 - 00:28:36.286, Speaker A: Lauren, maybe I could give you also an example because what you asked is such an important question. Maybe it's worthwhile going through an example in that. Suppose you have a program that you want to run. Yeah. So typically if you want to run this program on the Ethereum computer, you would write it in a language called Solidity, which I'm sure many of your listeners are familiar with. And then you compile it to Byte, which runs on top of the EVM, right, the Ethereum virtual machine. To run this program.
00:28:36.286 - 00:29:09.782, Speaker A: One thing you can do is you can just send the program to the blockchain and then have the Ethereum blockchain itself execute the program. But be expensive, right, because programs could take a while to run and so on. So this could be again, it's a slow and expensive computer, so that could be expensive. What's cool is that now we can actually outsource the of this program. We can outsource it to a remote server. So the remote server will actually execute the EVM bytecode that you give it. It will produce a proof that it ran it correctly and then push the proof onto the chain.
00:29:09.782 - 00:29:30.706, Speaker A: So the chain now, instead of running the actual program that it's supposed to run, all it has to do is just look at the proof, verify that the proof is correct, and then it trusts that the program ran correctly. So you're able to move computation, a lot of computation off chain to this remote server and that's exactly what these succinct proofs enable you to do.
00:29:30.808 - 00:30:00.438, Speaker B: All right, so in a moment we're going to talk about privacy applications of ZK technology. But first, a quick word from the sponsors who make this show possible. Join over 50 million people using crypto.com one of the easiest places to buy, earn and spend over 250 cryptocurrencies. New users enjoy zero credit card fees on crypto purchases in their first seven days with crypto.com, earn get industryleading interest rates of up to 14.5% on over 30 coins, including Bitcoin.
00:30:00.438 - 00:30:41.734, Speaker B: Earn up to 8.5% on stablecoins. With the Crypto.com Visa card, you can spend your crypto anywhere, enjoy up to 5% cash back instantly, plus 100% rebates for your Netflix and Spotify subscriptions and zero annual fee. $3.8 billion of value was stolen from crypto projects last year due to compromised private keys, exit scams, loan exploits and other preventable causes. Hallborne offers preventative security solutions for every stage of your software development lifecycle from Smart Contracts layer one and DevOps audits to advanced penetration tests, risk assessments and incident response.
00:30:41.734 - 00:31:24.178, Speaker B: With over 150 industry partners, including Animoca Brands, Salana Foundation and Ava Labs, hallborne's Bestinclass security advisory solutions ensure the safety of company assets and user trust. Visit hallborn.com for more. Back to my conversation with Ali and Dan. So there's been a lot of activity also in applying ZK technology to privacy, to these very public blockchain, which unfortunately some of the criminals in the crypto world have unfortunately realized that it's really not as private as they thought. So what are the ways that we're seeing this technology being applied to privacy?
00:31:24.354 - 00:31:42.730, Speaker A: Maybe before we talk about, we should probably talk about first the need for privacy, right? So right now blockchains are not private. At least Ethereum is not a private blockchain in the sense that if you look at the Ethereum transactions, you can see exactly who's transacting with who that sort of fundamentally is not compatible with businesses.
00:31:42.810 - 00:31:43.102, Speaker C: Right?
00:31:43.156 - 00:32:28.134, Speaker A: So if businesses, like if the university decided that they want to pay my salary in crypto, everybody will see exactly what my salary is, or if manufacturer wanted to pay its suppliers in crypto, everybody will see exactly how much they're paying for parts that's fundamentally kind of not acceptable to businesses. And so if the chain is ever going to be used for businesses, there's a need for privacy, private transactions. Right? So that's kind of a starting point. And because people realize this actually fairly early on, we do need some version, some privacy mechanism on the chain. And there have been many, many proposals and attempts and actually deployed systems to provide private payments on the blockchain.
00:32:28.182 - 00:33:27.194, Speaker C: Let me actually also add a couple of other good reasons why privacy is important. I think one of them is what Dan alluded to, which is that if you wanted to run anything that's akin to a business using a blockchain system, there's just no way that you could do that without privacy. But there are also many other kinds of applications that aren't really possible without privacy that are kind of independent of whether or not they have anything to do with payments or anything to do with running a business. And a few good examples. So there's this big category in the space known as decentralized social people building decentralized social networks. Things that look a little bit like Twitter but don't have. A monopolistic tech giant in the middle that controls everything and that is able to censor any one user or deplatform any one user or control who you get to follow and not follow and instead has all of the relevant functionality on chain.
00:33:27.194 - 00:34:21.018, Speaker C: In a decentralized system such that users own their own data, users decide who they get to follow, users decide what client they install such that they can determine and decide on what recommendation algorithms are used for the feeds that they are exposed to. And building something like that is possible with a lot of the technology that already exists. But you could imagine that certain aspects of that might have to be private. Like for example, the recommendation algorithms that the system uses. It might not be a good idea for that to be fully public because if it were, it could be easily gamed. So you might want to have a notion of a private recommendation algorithm that is still verifiable, that you can still generate a proof for because people in the community would want to know that it's being sort of correctly applied and then it's not discriminating. And that could be one use of zero knowledge proofs.
00:34:21.018 - 00:35:20.034, Speaker C: It could also be that maybe users want their data to be private in some way but still be able to prove aspects of that data to other users. So decentralized social networks, huge area of application for zero knowledge proofs and in particular for the privacy aspect of zero knowledge proofs. Another application area is that of gaming. There's a very big movement of people in the gaming world who are now intersecting with crypto people who are building games that are crypto enabled in some way. And that could be that the game has an inbuilt crypto economy that's real, that is connected to a blockchain and therefore makes the in game items portable. It makes it possible for a user to actually own the things that they own in the game, to take those things out of the game and potentially take them into another game and to therefore have a persistent identity. In this multi game world that starts to actually allude to this whole vision of the metaverse, which is a whole rabbit hole that maybe we can save for another time.
00:35:20.034 - 00:36:53.150, Speaker C: But I think if you wanted to build a decentralized game where most of the logic and most of the activity happens on chain, you might also need privacy to some extent because you might want to be able to add to the game a notion of a fog of war, like a layer of uncertainty that players can't pierce through such that players cannot know what other players are doing. Because if they did, maybe the game wouldn't be as fun. Uncertainty is often a fun and important component of games and Dark Forest, by the way, is a good example of a game that's mostly on chain that implements the fog of war using zero knowledge proofs and using the privacy aspect of zero knowledge proofs to make sure that there is uncertainty in the state of the universe and that players cannot just automatically know everything that there is to know about the game in particular. And maybe a third interesting application for why privacy is important you can think of this whole new intersection of fields between crypto and AI. So there's this kind of ZK machine learning world where you could imagine having a machine learning model that produces predictions. And you can imagine wanting to make the model private for the same reason that you would want to make the recommendation algorithm in a social network private such that people can't see how the model does what it does. Maybe the model is like a trading strategy in a DeFi protocol and it would not be good if that model were fully public because then the trading strategy would be useless if everybody can see what it does.
00:36:53.150 - 00:37:38.746, Speaker C: So you would want it to be private and maybe you would want to prove that the strategy is being executed correctly. So again, you could use a zero knowledge proof. And then it could also be that the inputs to the model, like a user might be submitting, for example, their information, their personal information, to a machine learning model that produces a credit worthiness score, like a credit rating. You wouldn't want the user's personal data to have to be public. Right? So same here. You would want to maybe obscure or encrypt those inputs, the personal user information using ZK technology to have this machine learning model that produces a credit score work in a verifiable way without kind of revealing personal identifying information and like that. There are many other applications.
00:37:38.746 - 00:37:50.850, Speaker C: So privacy is important, not just because users care about their own privacy, but because it unlocks a whole new region of the design space that is just fully inaccessible today with public blockchains as they work today.
00:37:51.000 - 00:38:02.466, Speaker A: Laura, actually, can I give two more examples that I think are very appropriate given the times? So Ali gave a fantastic overview of kind of different ways in which privacy could be used, particularly zero knowledge proofs.
00:38:02.498 - 00:38:02.646, Speaker C: Right?
00:38:02.668 - 00:38:40.866, Speaker A: So now we're not just talking about proof systems, we're talking about zero knowledge proof systems that prove that something is true without revealing why it's true. And so maybe one more example that is very appropriate. These days, when assets are recorded on chain, it's actually possible to give what's called a zero knowledge proof of solvency. So you can actually prove as an exchange, for example, you can prove that you're a solvent. In other words, you have more assets than obligations to your customers and you could do it in a zero knowledge way. So without revealing how many assets you have and without revealing what your obligations to your customers are. Yeah.
00:38:40.866 - 00:39:00.122, Speaker A: And so because it's automatic and it can be done in zero knowledge, you can imagine that banks or exchanges could, like every day, generate a zero knowledge proof of solvency. I guess this is all very relevant these days. Very. So a very nice application of zero knowledge and I'm very hopeful that this will actually be put to use in the near future.
00:39:00.176 - 00:39:07.910, Speaker C: Yeah, we're recording this just on the tail end of the Silicon Valley bank situation. So definitely very apropos.
00:39:07.990 - 00:39:08.186, Speaker A: Yeah.
00:39:08.208 - 00:39:56.086, Speaker B: And Signature also being closed. Yeah. One other thing I wanted to cite was polygon ID, I guess was just rolled out and that's another way to have identity, which is obviously an area where people want privacy using zero knowledge technology. And from reading that and just some of the other things around that I realized like, oh, this could be combined maybe or you tell me, with kind of like antimoney laundering know your customer type compliance controls. And even I was reading something else that made it seem like you could also provide auditing trails for regulators or something using zero knowledge proofs so you would maintain the privacy without it being like a complete black box for compliance purposes.
00:39:56.198 - 00:41:02.558, Speaker C: Yeah, absolutely. I think it is connected to the use case of being able to prove something about who you are or the state of your finances or your solvency or whatever else in a way that still preserves some of your privacy. So, from a KYC standpoint, instead of providing all of your personally identifying information, like a copy of your driver's license and passport to some centralized entity that then stores it in a way that can then get leaked or hacked, you could instead provide them with a proof that's maybe signed by your bank, that your balance is greater than some amount. Right? Or that they're kind of underwriting you for a certain level of risk or whatever else. And it could be compounded with maybe signatures from other parties into one thing that can give the party that you are interacting with confidence that you're either a real human or a human who's solvent or a human who has certain characteristics without you having to essentially share everything as you do today in a KYC process.
00:41:02.644 - 00:41:26.098, Speaker B: All right, so now let's talk about some either problems or disadvantages to zero knowledge technology. One that I've read about, and I don't know if this has been mitigated in any fashion, but for a long time people have talked about the quote unquote trusted setup problem. So can you define that for people and then talk about how much of a problem that is nowadays? I don't know if it's been mitigated in any fashion.
00:41:26.194 - 00:42:23.618, Speaker A: Yeah, I guess this is kind of the third player that we mentioned at the beginning, the setup player. So some of the zero knowledge proof systems that have been deployed require this trusted setup. And what does that mean? That basically means that there is some sort of a system that generates these parameters that the prover and the Verifier will use to generate and then verify proofs. And the issue is the reason it's called a trusted setup is that if somehow someone subverts this trusted setup mechanism, in particular, there's randomness involved in a trusted setup. And if this randomness becomes publicly available, that would allow the prover to produce false proofs. Yeah, and producing false proofs is a terrible situation in this world because basically it would allow me to prove to you that certain things that are false actually are correct and that basically results in theft of assets. The trust is set up.
00:42:23.618 - 00:43:16.310, Speaker A: The difficulty with it is that it does require some secrets to be kept secret from the prover so that the proof system is sound. Typically, when proof systems need a trusted setup, what happens is that that's done through a massive distributed computation and as long as one member of the distributed computation is honest and honestly destroys the randomness that they used, then the trusted setup is fine. Yeah, so that's one way we mitigate the trusted setup. We just run it across a large number of parties and as long as one party is honest, everything is perfectly fine. And in fact, as you may know, the Ethereum Foundation is actually taking steps now to do a trusted setup ceremony across a huge number of participants. And as long as one of those participants destroys the randomness, the trusted setup will succeed. Another way to mitigate the trusted setup is to just get rid of it altogether.
00:43:16.310 - 00:43:48.678, Speaker A: And those are called transparent proof systems that require no trusted setup. And now actually, we have better and better transparent proof systems. They still seem to generate longer proofs than proof systems that do require a trusted setup. So in one case, in the trusted setup case, the proofs are shorter and faster to verify. In the other case, they're a little bit longer, but they're getting better. And so we have ways to do proof systems with our trusted setup, but there is currently some cost to doing that.
00:43:48.764 - 00:44:14.350, Speaker B: So one other issue that I came across is that zero knowledge proofs don't also give 100% guarantees that the claims are valid. So what's the best way to deal with that? Because as far as I understand, you would need to do like a large number of computations or there would need to be a large number of interactions between the proverb and verifier to get closer to that 100%, which obviously is burdensome.
00:44:14.770 - 00:44:38.786, Speaker A: Okay, so I think I know what you're referring to and honestly, this is mostly boils down to correct configuration. Yeah. So these proof systems, they have to be configured correctly. And if they're configured correctly, their soundness error is negligible, sufficiently negligible. And so we know how to do things correctly. It's just whoever is deploying the systems has to take the steps to make sure that they're configured correctly.
00:44:38.898 - 00:44:52.714, Speaker B: Okay, so one other thing is that I think the technology maybe can be relatively slow or take a lot of computing power. So what are some of the technological constraints that we have right now that need to be overcome for this to be more widely used?
00:44:52.832 - 00:45:42.738, Speaker A: Oh my God, we could spend the whole hour just on that question. That is a long and fascinating, fascinating question. In some sense, the research of the last ten years has literally been focused on exactly what you just asked. Right? How do we get the prover to run as quickly as possible? There are many innovations that are happening in this area. This is actually the fact that provers are getting faster is why this technology now is being deployed so widely. Let's see. So if we can put on our technical hats for just 1 second, I can tell you that the expensive parts of proof generation or two of the expensive parts of proof generation, one is called multiscalar multiplication or MSM and the other one is called a fast Fourier transform or FFT.
00:45:42.738 - 00:45:54.842, Speaker A: And question is how to speed those two steps, the MSMs and the FFTs. And in fact, actually, Ali, maybe you want to describe the Zprize effort that took place to accelerate.
00:45:54.906 - 00:47:21.742, Speaker C: Yeah. So actually Alio, which is one of the projects in the space that's building a blockchain that uses zero knowledge proofs for privacy, it's essentially a blockchain that's somewhat like ethereum, but where all smart contracts that run on top. Of it are private hosted this competition known as a Zprize competition to encourage the whole ecosystem to submit solutions to the problem of speeding up for your transforms and MSMs as much as possible. It was kind of encouraging to see sort of the submissions that came, some of which came from actually outside of the crypto world, from people who work at places like Nvidia who leverage very specific features of hardware, namely Nvidia GPUs, to end up with an optimized implementation that dramatically outperforms everything else. Which kind of goes to show, I think, the ways of improving the performance of the prover piece of a zero knowledge proof can come from deep research, like things like algorithmic improvements, which I think have happened over the course of the last five years, but can also happen through both. Just optimized implementations, really smart people who write very efficient code that maybe targets special purpose hardware, either GPUs or maybe eventually we end up with things like Asics to speed some of these things up. And I think things like the Zprize and other prizes that incentivize people to come up with better solutions will probably be a big part of what gets us to the next level of performance.
00:47:21.826 - 00:48:21.126, Speaker A: Yeah, so there's room here, definitely. I mean, there's room for engineers that are needed to speed up the implementations of these provers and then there's a need for algorithms folks to speed up, to come up with better algorithms for doing these proofs. So I can tell you again that kind of the two heavy steps are this or two of the heavy steps are MSMs and FFTs. In some modern proof systems, actually we're able to get rid of the MSMs so we can kind of simplify the proving process somewhat by removing one component. Those still tend to lead to relatively long proofs so there's still a lot of room for improvement. Another area, since you asked about the cost of computing these proofs, I'll tell you that another area is not for improvement, is not just the actual compute time. It turns out when you go to very large proofs that you're trying proving very large statements, it turns out actually just the bandwidth between the CPU and main memory.
00:48:21.126 - 00:48:34.462, Speaker A: Yeah, these provers actually are saturating the bus that connects the CPU and main memory. And so part of the effort actually in the last year has been can we actually build proof systems where the memory requirements are not so bad?
00:48:34.516 - 00:48:34.686, Speaker C: Right.
00:48:34.708 - 00:48:38.782, Speaker A: So that maybe we don't have to saturate the bus between the memory and the CPU?
00:48:38.846 - 00:48:39.074, Speaker C: Yes.
00:48:39.112 - 00:49:31.182, Speaker A: So there's a lot of effort on reducing the memory footprint. And then I'll say another area that's seen a lot of improvement is this area called Recursive Snarks. Now, Recursive Snarks are these things that will blow your mind. This is like one of these things that are really quite magical in that remember how we said that a proof system proves that a statement is correct? Well, a recursive proof system proves not that a statement is correct, but it proves that I have a proof that a statement is correct. Yeah, I don't prove that a statement is correct, prove that I have a proof and you can further recurse, I can prove that I have a proof, that I have a proof, that I have a proof that a statement is correct, and so on and so forth. And it turns out these recursive proof systems, they have a lot of benefits. One easy benefit to understand is that in the regular proof systems, you have to have the entire statement in your hands in order to start producing the proof.
00:49:31.182 - 00:50:09.738, Speaker A: But using recursive proof proof systems, you can actually stream the statement. So think of a roll up system where you have transactions from the public. You're trying to process 1000 transactions from the public. Normally you would need to collect all 1000 transactions, and only then you can start building the proof that these transactions were processed correctly. With the recursive proof systems, you can take the first batch of 100 transactions and produce a proof that they're correct. Then you take the second batch of 100 transactions, produce a proof that they're correct, and then you produce a proof of a proof that those two proofs that you just generated are themselves correct. So now you're proving that you know a proof.
00:50:09.738 - 00:50:59.626, Speaker A: And that's kind of the power of recursion generally what they allow you to do. And again, this is for your audience. I highly encourage you to go look up the concept of recursive proof systems. It's really kind of a fascinating, fascinating concept. What it allows you to do is to take a very large proof and break it into many, many smaller proofs, which you can kind of prove on their own, and then produce a proof of a proof that all these smaller pieces are correct. Like I said, this is an area that's also evolving quite rapidly and also holds a promise to build faster provers. So as we said, this is a pretty active area and hopefully as more ideas come in and there's a lot of room for your listeners to contribute to this area, as more ideas come in, we'll end up with faster and faster.
00:50:59.658 - 00:52:42.240, Speaker C: By the way, another big area of improvement is the tool chain that goes from the developer all the way down to the actual circuit that gets proven and that includes often a compiler. A compiler is a thing that translates a high level programming language that is useful and intuitive for a developer to use, kind of like Solidity down to the very bare metal, down to something that can actually be proven by a proof system. And there is a lot of work that's being done in building compilers that work with programming languages that are intuitive but that also optimize that translation that goes from something like Solidity to a ZK proof such that it's more efficient. And so improvements in the compilation process might also lead to another order of magnitude improvement in performance, but it might also actually allow for special applications that are maybe not just solidity smart contracts, but are more specific things. Like for example, if you wanted to compile down a machine learning neural network down to a zero knowledge proof, you could come up with a compiler that is specifically optimized and specifically engineered to do that such that the proofs or the circuits that emerge on the other side are much more easy to prove than if you were to try to do it from, say, something like solidity, which is general purpose and is not optimized for machine learning. And so I think the tool chains that people will come up with to compile down programs of any kind, whether they be general purpose, validity, smart contracts or more specific things like machine learning models or other things will also play a big role in making all of this more performant and mitigate this challenge that today running approver is an expensive thing to do.
00:52:42.610 - 00:52:56.734, Speaker B: And also are there hardware issues here as well? Because just in my research it seems like hardware is a component of this. So are there further developments needed on that side to make this more widespread?
00:52:56.862 - 00:53:32.046, Speaker A: Yeah, for sure. We told you that when you ask about performance approvers this is a big topic and there's a lot to say. So definitely developing specific hardware to speed up Provers is a big deal. Like specifically speeding up these multiscaler multiplications, speeding up these FFTs. This is kind of a big area where dedicated hardware asics can actually help a lot. And in fact there are a lot of hardware engineers right now who have knowledge in how to construct asics what they're working on is accelerators for provers. It's really quite wonderful to see.
00:53:32.046 - 00:54:41.542, Speaker A: I'll say one more area that I think will be interesting to you and your listeners in that there's also a coming marketplace for provers. Yeah, so today if you want to prove a complicated statement. You want to generate a proof that the statement is correct, you kind of have to do it yourself. You go and you have to buy the hardware and generate the proof yourself. But that's kind of voiceful, right? There are a lot of people who have invested in GPUs for playing games or maybe for cloud applications and such, and they don't use these GPUs all the time. Sometimes they're idle, right? And so it makes sense that if you have a fancy GPU because you set up a fancy gaming rig for yourself, maybe when you're not playing a game, you can say, well, use my GPU to generate proofs, right? And so there's actually a very interesting marketplace of GPUs and general, potentially even Asics and FPGAs, that people can make them available for people who need to generate proofs, and then they'll be used to generate those proofs, and they'll be compensated for that in some way. And there are lots of very interesting open problems in how to set up such.
00:54:41.596 - 00:55:21.918, Speaker C: And Laura, this actually touches on your earlier question about whether or not the prover is a point of centralization. And I think that once we have something like a decentralized marketplace for proving capacity, that will be a way of mitigating that problem. And you could have something like a zero knowledge roll up on top of Ethereum hook to a decentralized prover network. A marketplace of this kind to always have some prover somewhere available to be able to generate the proofs. That it needs to be able to make progress and continue to work and to not have a single point of failure that might at any point make the system grind to a halt.
00:55:22.014 - 00:55:45.894, Speaker B: All right, so now let's turn to a question that I think perennially comes up whenever people talk about privacy, which has to do with crime. As I alluded to earlier, there have been a lot of crypto crimes that have been solved by the government or other investigators looking at these public blockchains. And I wondered if you thought the implementation of zero knowledge technology in crypto will make it harder to solve these types of crimes.
00:55:45.942 - 00:57:15.650, Speaker C: I think it may be worthwhile talking specifically about private transactions first, and then we can move on to talk about private computation. In particular, maybe we can address the whole issue with tornado cash. The fact that tornado cash was a protocol, an on chain protocol whose address was sanctioned by OFAC because of the fact that tornado cash was used to some extent by the Lazarus group, which is associated with North Korea, to launder funds that had been stolen from another protocol earlier in the year. Some of the work that Dan and other people on our team have done tries to bridge the essentially toe the line and strike the right balance between maintaining the privacy of users while still preserving some ability to comply with laws and regulation. And one way to do that, and I think Dan can talk about this a little bit more as well, and we can dive into the tech details, is that you can use zero knowledge proofs to maintain users'privacy while still maintaining the ability to freeze any funds that are connected with any address in a list that is provided externally. And that list could be the list of addresses that are sanctioned by OFAC. And so, for example, if Tornado Cash had implemented this as a solution, it could have been possible for all funds.
00:57:15.650 - 00:58:22.582, Speaker C: As soon as the address as an address of the attacker gets added to the list to the OFAC list, which is, by the way, broadcasted by Chainalysis on chain tornado. Cash could just freeze all funds associated with that address without leaking anybody's privacy. And that alone is a powerful disincentive for the attacker to use tornado cash in the first place, because there's always this risk. If I, as an attacker use tornado Cash to try to launder the funds that I have stolen, it's very likely I will end up with my funds being frozen, so might as well not even try. And so that could be one solution that simultaneously protects people's privacy and then also disincentivizes the incorrect criminal use of the protocol for uses that are not intended. And there are many other ways that you can try to balance these two things and strike sort of different parts or regions of this trade off. And one of them could be to actually force the de anonymization of funds that are on that address, which I think would give more power to the government and less power like the trade off there is that you as a user might at some point get de anonymized.
00:58:22.582 - 00:58:47.038, Speaker C: And that might be undesirable, but maybe that's better because it kind of AIDS law enforcement. So there's this whole spectrum and a slider that you can play with to try to essentially find the right balance and get to the right tradeoff between protecting users'privacy and then also not encouraging illicit activity. I don't know. Dan, do you want to yeah, actually, yeah.
00:58:47.064 - 00:59:12.634, Speaker A: I think the examples that Ali gave are fantastic. So maybe generalizing this a little bit. I would say that on the one hand, there's this desire for privacy in the payment system. As we explained, there's all these applications and businesses needed and so on. On the other hand, there's a need to be compliant, right? If we're in the US. And we're using some technology to do payments, we have to comply with US. Banking laws or us.
00:59:12.634 - 00:59:51.954, Speaker A: Payment laws and so on. Yeah, there's compliance requirements. And so those two things, they seem like they're contradictory, right? On the one hand, we need privacy. On the other hand, we need to be compliant. And so this is a very common example in cryptography where we have seemingly contradictory requirements. Well, how can you be compliant if everything is fully private, where in fact, cryptography can resolve the conflict and so can resolve this contradiction. Really, the issue is just how do we design systems that provide privacy to the end user but are also at the same time compliant with local regulations? Yeah, and there are all sorts of designs.
00:59:51.954 - 01:00:30.998, Speaker A: Ali gave a really good example there. There's like a whole bunch of designs that we can do. And so at the end of the day, this becomes kind of an interesting technical question. We can decide on what is the policy that we want to implement in this blockchain based payment system that would support both privacy and address the needs of law enforcement. And then we can go and design a system that seems that, to the best of our abilities, satisfies both requirements. And again, Ali gave really good examples of that. So in the case of tornado, I think you mentioned tornado cash or Ali mentioned tornado cash.
01:00:30.998 - 01:00:50.506, Speaker A: The question is basically how do we build a compliant version of tornado cash? Yeah, and it seems completely doable to do that. We have the technology to do it. And fortunately, there are now forks of tornado cash that are starting to implement that. And it's going to be very interesting to see how that yeah, one of.
01:00:50.528 - 01:01:20.054, Speaker B: Them was privacy pools, which amen Salimani, who I feel like he's always sort of at the center of certain cutting edge or controversial uses for crypto and blockchain. He launched this tool and it uses ZK proofs to prove that a private transaction was not connected to criminal activity or I think it's the sanctioned activity. So that's definitely one of these examples. And it's a tornado cash fork that he used to do that.
01:01:20.172 - 01:01:33.066, Speaker C: Yeah, it's a perfect application of zero knowledge proofs because it allows you to prove that you're not connected to a particular set of addresses whilst not revealing anything about who you are. So therefore resolves this paradox. Resolves the trade off.
01:01:33.168 - 01:01:37.206, Speaker B: Yeah. And it lets people have that privacy that they seek.
01:01:37.318 - 01:02:16.710, Speaker A: Maybe I could give you like a very concrete example, just might help the listeners in that you know that, for example, the travel rule in the US. Requires the transactions over $10,000. There's extra reporting requirement required on those transactions. So you could ask, well, if I'm posting, say, encrypted transactions to the blockchain, how can anyone looking tell whether this is over $10,000 or under $10,000? Right. So they don't know whether the extra reporting applies to this transaction or not. Well, you can attach a zero knowledge proof to that encrypted transaction to say, well, this is an encryption of a particular transaction and the amount being transferred is less than $10,000.
01:02:16.780 - 01:02:17.014, Speaker C: Right.
01:02:17.052 - 01:02:23.286, Speaker A: And that's a proof that you don't need to do any more recording that's relevant to that transaction.
01:02:23.398 - 01:02:23.626, Speaker C: Yeah.
01:02:23.648 - 01:02:28.486, Speaker A: And so that's a very simple and concrete example of how zero knowledge proofs can be used for compliance.
01:02:28.518 - 01:02:44.766, Speaker B: Great example. All right. We've covered quite a lot of things, but I've also left a number of questions on the cutting room floor due to time. But are there any specific topics that you feel we didn't discuss that we really should let the listeners know about?
01:02:44.948 - 01:02:55.886, Speaker A: Oh, my God. We only scratch the surface. To be honest. This is such a big topic. We literally only scratch the surface. I would say, first of all, the Canon is a really good resource. The zero knowledge.
01:02:55.886 - 01:03:17.706, Speaker A: Canon. If your listeners want to learn more, I really would direct them to that list. It's a wonderful, wonderful resource. That's a great way to get started and learn more. In terms of topics that we haven't touched on, there are other applications of these proof systems. For example, for bridging between blockchains, this is actually an up and coming area where proof systems are going to play.
01:03:17.728 - 01:03:21.502, Speaker B: An important role, and that's to improve security, I believe.
01:03:21.636 - 01:03:22.320, Speaker A: Exactly.
01:03:23.090 - 01:03:32.126, Speaker B: Bridge security has been a huge problem in crypto over the last 18 months or something like that. So I think it's something people would be interested in.
01:03:32.308 - 01:03:32.766, Speaker C: Let's see.
01:03:32.788 - 01:04:04.102, Speaker A: So I guess we have to explain a little bit what a bridge is. Right. So the problem is there are multiple blockchains out there, and let's say I own an NFT on one blockchain, and I want to sell my NFT on a marketplace that's on another blockchain. Right. Well, I need to move my NFT from one blockchain to another. Well, how do I move it? Yeah. And that's one application of a bridge where what I could do is I could kind of lock my NFT on one blockchain and have a wrapped asset released on the other blockchain.
01:04:04.102 - 01:04:09.894, Speaker A: Then I can participate in the marketplace on the other blockchain, and then I can also move it in the opposite direction.
01:04:10.022 - 01:04:10.266, Speaker C: Yeah.
01:04:10.288 - 01:04:23.466, Speaker A: So that's what bridges allow us to do. They allow us to move assets from one chain to another. What I just described is what's called a lock and mint bridge, which locks assets on one chain and then mints corresponding tokens on the other chain.
01:04:23.578 - 01:04:24.106, Speaker C: Yeah.
01:04:24.228 - 01:04:30.814, Speaker A: Now, the issue is, how does the target chain know that the source chain actually locked the asset?
01:04:30.942 - 01:04:31.282, Speaker C: Right.
01:04:31.336 - 01:04:55.338, Speaker A: That's a pretty fundamental thing that the bridge has to implement correctly. Right. If it releases tokens at the wrong time, well, that would result in a loss of assets. Yeah. And so, basically, convincing one chain that something happened on another chain is a fundamental thing that a bridge has to do. And that's exactly where proof systems can help.
01:04:55.424 - 01:04:55.674, Speaker C: Right.
01:04:55.712 - 01:05:23.198, Speaker A: Because what proof systems can do is, well, one chain can ask an off chain server to produce a proof that the state of consensus on that chain says that the assets were, in fact, locked, that proof could be presented to the other chain, and then the other chain says, oh, yeah. Now, I believed that the state of consensus on the source chain says that the asset was locked and therefore it's okay to release tokens on the target chain.
01:05:23.374 - 01:05:23.666, Speaker C: Yeah.
01:05:23.688 - 01:05:46.300, Speaker A: So these proof systems allow you to prove the state of consensus from one chain to another, or more abstractly, they allow one chain to send a message securely to another chain, and then the other chain can process that message accordingly. So that's kind of why these are up and coming in the Bridging area. And there's a number of projects now that actually try to implement and deploy this.
01:05:46.830 - 01:06:44.190, Speaker C: And that, by the way, is in contrast to the way that most bridges are implemented today, which is that you require a trusted intermediary in the middle to essentially make that guarantee to the target chain. And of course, that often is the source of the problem. The fact that having a bridge that's actually secure is very difficult because that trusted intermediary could be hacked or they could be dishonest, they could censor, they could lie. So there are many ways in which a bridge that depends on a single trusted intermediary will not really work in the end, especially given that the amount of assets that can flow through a bridge can be very significant. And so there's a lot of interest in leveraging zero knowledge proofs to make this a truly trustless process, such that you don't really have to trust anyone other than the consensus of the source chain, given that you have a proof that its consensus accurately converged on the state that you are receiving as a message.
01:06:44.340 - 01:07:27.786, Speaker B: All right. Yeah, there's just so many other things that we could have discussed and for people who were interested in what we were talking about. I actually also strongly urge you to look at non blockchain uses for ZK technology because that is a whole nother rabbit hole that is also super fascinating. We'll probably just have to do more episodes on this because I think it's just going to become more widely used in our space and there's going to be, I think, a lot of crossover with some of the other kind of things happening in tech. So we'll just have to have you back or other people to talk about all this because there are so many developments. Well, it's been such a pleasure having both of you. Where can people learn more about each of you and your work?
01:07:27.888 - 01:07:33.950, Speaker A: Yeah, I'm really easy to find. My web page is at Stanford, so if you just Google my name, you'll find my web page right away.
01:07:34.100 - 01:07:42.350, Speaker C: And then for us, we are at a 16 Zcrypto.com. And then also I'm on Twitter at Alive underscore ETH.
01:07:42.930 - 01:07:46.126, Speaker B: Perfect. Well, thank you both for coming on the show.
01:07:46.308 - 01:07:47.322, Speaker C: Thank you, Lara.
01:07:47.386 - 01:07:50.082, Speaker A: Thank you, Laura. This has been a lot of fun. Again, thank you so much.
01:07:50.216 - 01:08:10.050, Speaker B: Thanks so much for joining us today. To learn more about Ali Dan and Zero Knowledge technology, check out the show notes for this episode. Unchained is produced by me, laura Shin without from Anthony Yoon, Mark Murdoch, Matt Pilchard, Zach Stewart Juana Vanovich Sam Sriram Jenny Hogan, Ben Munster, Jeff Benson, Leandro Camino, Pama Jimdar Shashank and CLK transcription thanks for listening.
