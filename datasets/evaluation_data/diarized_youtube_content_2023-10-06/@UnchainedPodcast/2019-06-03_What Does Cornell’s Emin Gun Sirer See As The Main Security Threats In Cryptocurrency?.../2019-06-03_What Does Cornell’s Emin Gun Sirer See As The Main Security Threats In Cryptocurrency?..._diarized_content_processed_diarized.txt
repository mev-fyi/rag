00:00:03.130 - 00:00:31.650, Speaker A: Welcome to forbes podcasts. Hi everyone. Welcome to unchained, a Forbes podcast produced by fractal recording. I'm your host, Laura Shin, a Forbes contributor covering blockchain, cryptocurrencies, and fintech. Thanks for tuning in. If you've been listening to the show and like what you've been hearing, please review rate and subscribe to the show on your preferred platform. It helps get the word out about unchained.
00:00:31.650 - 00:01:15.902, Speaker A: For today's episode, I'm speaking with Eman Gunseer, associate professor of computer science at Cornell university, who works on operating systems, networking, and distributed systems. He is extremely active in the cryptocurrency community. He and his team have written several influential white papers and even blog posts that have changed the trajectory of cryptocurrencies. They've also been behind some improvements to the code in bitcoin and ethereum. He's also co director of the initiative for cryptocurrencies and contracts, an initiative put together by professors at Cornell, cornell tech, berkeley, and other universities to help advance the adoption of cryptocurrencies and smart contracts. He also writes a popular blog at hacking distributed. Hi Gun.
00:01:15.902 - 00:01:17.042, Speaker A: Welcome to the show.
00:01:17.176 - 00:01:20.454, Speaker B: Thank you, Laura. Thank you very much for having me on.
00:01:20.652 - 00:01:25.480, Speaker A: So tell me about your work and how you became involved in the cryptocurrency and blockchain space.
00:01:26.010 - 00:02:16.438, Speaker B: Sure. So my involvement in this space goes back to, I guess, my graduate student years when I was working on operating systems. But I had an eye towards I always was fascinated by systems that can self configure, that are sort of living things in and of themselves, if you will. And I also was exposed early on to Millisent, which was one of the early microcommerce systems. That was back in the 90s, early in 2000s. My research when I became a professor, my research took a turn towards peer to peer systems, and I did a bunch of things in that space that I won't bore you with, but in almost every system we built, there was a problem of incentivization. It's very difficult in a peer to peer setting to make sure that everybody behaves well.
00:02:16.438 - 00:02:53.022, Speaker B: Your listeners probably have heard of leechers in torrents, right? So there are people who contribute or who participate in sort of taking whatever it is, sharing resources, but don't put up any resources themselves. They just leech on the system. This is an undesirable situation. You want to incentivize them to do the right thing for the community. And to that end, I built one of the earliest systems that uses proof of work. It was a currency, a single currency, a real currency called karma. And so it was widely cited.
00:02:53.022 - 00:03:34.178, Speaker B: It's academically, very well known, but I did not sort of proselytize it beyond academics, so it wasn't adopted. This was back in 2002, 2003. And so then I kind of sat on that work for a while. My interest veered off to other topics. I went back to my roots on operating systems, sort of flipped back, and and meanwhile, satoshi came up and came up with a very cool idea and a breakthrough in how he uses proof of work and combines it with a bunch of other things. And not only those technical things, but he also built a community, and with any currency system, that is really key. That is what gives it its value.
00:03:34.178 - 00:04:15.118, Speaker B: And so that got me and my interest back in cryptocurrencies. I took a closer look at bitcoin, and we then did the work on selfish mining, where we discovered that you could misbehave and end up making more money than your fair share. We came up with a fix for selfish mining. To the extent that it could be fixed, there are regions where you cannot fix it, and from there, it's just sort of history. Then I got pulled into more and more into blockchain and cryptocurrencies and have been working on this topic since. It's a fertile space, and there's a lot of excitement in it, and rightfully so. There's so much to do and so many exciting computer science problems.
00:04:15.118 - 00:04:21.840, Speaker B: So that's how I got involved, and that's sort of what's shaped my view coming into the system.
00:04:22.210 - 00:04:37.400, Speaker A: And I'm so interested to know, as somebody who kind of developed your own prior version of bitcoin, I guess you could say, how did you first learn about it and what were your thoughts when you learned about it, and also when was that?
00:04:37.850 - 00:05:23.634, Speaker B: So I first heard about bitcoin around 2010, 2011. And one of the first things you do when you hear about something like this is you download the white paper and you'll look at sort of what the core idea is. And the core idea seemed really interesting. It had been previously discussed in some depth by some other people. Arvind Krishnamurti and James Aspnes had done some work on sort of continually solving proof of work puzzles. And so it immediately made me think of related work. And then the other thing you do is you check to see if you're cited, right? So you look at the white paper like, oh, satoshi didn't know about my work.
00:05:23.634 - 00:05:57.520, Speaker B: Satoshi ends up citing some other work related to spam deterrence. The work that satoshi cites, it uses proof of work as well, but it's not a currency. So if you read that white paper, there's a bunch of stuff that's missing. So anyway, so you think about the kind of person that he might be. You, of course, get pulled into the human story. A pseudonymous person? Is it a single person? Is it multiple people? Is there something more behind it? How did the currency get started? How much money did one put up to prop up the currency in its initial days and so forth. So there's a lot that draws you in.
00:05:57.520 - 00:06:30.226, Speaker B: And so that was my first reaction to it. And then, of course, can I game it? Are there security holes? And so? So the can I game it question sort of got really serious for me with itai Ayal's appearance at Cornell. Itai ayal is a postdoc here. He's about to become a professor at the Technion. He's about to go to Israel. And itai came here as a postdoc. In his spare time, he was interested in bitcoin.
00:06:30.226 - 00:06:53.950, Speaker B: His main task was something else related to consensus protocols, or traditional consensus protocols. But in his spare time, he was interested in bitcoin. And he came by one day and he said, you know, I think there are some issues with the consensus protocol in bitcoin, and I think we can game it and make more money than we should make. So that got me going again, and that led to the work known as selfish mining.
00:06:54.290 - 00:07:03.474, Speaker A: And that sort of leads us to the work that you guys are doing with IC three. What does IC three do, and how did it come to be so?
00:07:03.512 - 00:07:24.454, Speaker B: IC three is a much, much greater, bigger effort. So far. I described to you sort of how I got into this, and that's my group that's a group of, I don't know, maybe eight people total. IC three is an initiative at Cornell that we started. I'm one of the co directors. There are three co directors. The other two are Elaine she and Ari Jules.
00:07:24.454 - 00:08:06.150, Speaker B: And so what essentially happened is that a number of well, the three of us got together, and we all were supremely excited about cryptocurrencies, and we could see certain trends in action. One big trend, of course, is the financial industry needs some help. There's no way to sugarcoat this. They just got caught way behind the main game. Their systems are aging. They haven't really done any investment in their infrastructure for, I would say, about 16 years. And the last time they did any investment was for the y two k bug, right? So they are way behind the times.
00:08:06.150 - 00:08:43.666, Speaker B: They're struggling with simple things like auditability, with being able to reconcile ledgers, keeping ledgers in sync, being able to transparently prove to regulators that they did not misbehave, and so forth. There are lots of issues facing them. And so it was clear to us that the finance industry had to take a close look at the way they did things. It was also clear to us that there's a big social movement saying, hey, we need other systems for managing money. And of course, there's the whole issue of smart contracts, one of the next big steps to come after bitcoin. So there are all sorts of fancy things. You can build new instruments, you can build new systems, you can build that manage money.
00:08:43.666 - 00:09:13.930, Speaker B: And the excitement around this is immense. So maybe I'm veering off topic a little bit, but I'm so excited about it. So all my colleagues, they write programs that let's leave aside the roboticists. They write programs that actually move things, but everybody else, they just manipulate pixels on a screen, right? You give them input, and the program some input, it generates some output. You print it, maybe that's the extent of what you do. But with smart contracts, you've got programs that manage money flows. That's an amazing new capability.
00:09:13.930 - 00:09:50.486, Speaker B: And nobody knows how to write these things. It's really easy to get things wrong. So we thought, hey, we have to do something to provide structure to this space, to provide some entity that will organize the efforts in this space. And we got some of our friends together. We wrote a proposal to NSF, and NSF very kindly funded us to quite a good level. And so now we have a fairly strong initiative with industry support. So once you have something that creates the backbone of an organization, then you have industry start to start to pay attention.
00:09:50.486 - 00:10:34.562, Speaker B: So we now have a number of sponsors, some of them fairly well known, others very well known, smaller startups that are well known within their communities. So it's a wonderful situation. The sum total number of people I think, is somewhere between 50 to 60, maybe more. At IC Three, I would say that, well, okay, so at least 14 or 15 have PhDs. So this I think, is the largest concentration of academics under one roof. Not literal roof, because some of us are at Berkeley, some of us are in New York City, some of us are in Ithaca. But it's a large concentration of people who work together on timely, interesting topics on blockchains.
00:10:34.706 - 00:10:37.442, Speaker A: And who are some of the sponsors, the sponsor?
00:10:37.506 - 00:10:58.720, Speaker B: Let's see. So IBM is one of them, intel is one of them. Let's see, Chain is obviously one of them, and there are a bunch of others in the works that we are working on. So those are the three that are the three public ones and they are our sponsor, the gold level sponsors of IC Three.
00:10:59.410 - 00:11:22.854, Speaker A: One of the big themes I see in your work is around the security of public blockchains. And certainly security has been a big issue this summer, both with the Bitfinex hack and then also the security of smart contracts with the so I'm curious, what do you see as the main security threats in the cryptocurrency space and what are some of your proposals for resolving them?
00:11:22.972 - 00:12:17.406, Speaker B: So that's such a great question. Where to start? So what is the main security threat? Everything. When you have so much value, everything you've got is essentially a bounty, right? Bitcoin has become the universal bug bounty. In the good old days, we used to sort know you'd find a flaw in, I don't know, when I was a grad student, I found a flaw in Java virtual machines, both at Microsoft and at Netscape. And then you disclose and then they deny that they had a vulnerability. And then if they're good, they finally admit and they give you a few thousand dollars or something. But that's not how it works anymore, right? So there are a bunch of people who are constantly looking for bugs, and the moment they find one, they infiltrate your system, they take your bitcoin, they become rich, and your cash is their bounty.
00:12:17.406 - 00:12:50.642, Speaker B: And this is clearly no firm infrastructure to base the rest of our financial infrastructure. This is not how we build things. Imagine that you've got this cool technology, it's called a brick. Except the Ukrainian hackers can come in and make your entire skyscraper collapse by digging underneath it. We can't have this happen. So the security issues facing bitcoin, I would divide into two different categories. At the very highest level, I would say client side security is a real issue.
00:12:50.642 - 00:13:32.782, Speaker B: It has always been. And the flip side of it is, of course, server side security. The security of the bitcoins that you necessarily place in the hands of other people, although you shouldn't. But there are many, many legitimate circumstances where you kind of have to. And in those circumstances, sadly, you typically end up giving up all control and currently end up becoming vulnerable to all sorts of attacks from the server side. And so the scientific challenge facing us is, can we do something better than the current state of affairs? And the current state of affairs is really dismal. Right, so you lose your private keys, all your bitcoins are gone.
00:13:32.782 - 00:14:03.130, Speaker B: And how often do you lose them? Well, it depends. Right. There is the guy who tossed out his disk, and it could happen to me. I kind of think of myself as a semi sophisticated user, but I mislay disks all the time. I misplace stuff. And there are some very well known people I think a lot of your viewers might have heard of christian decker, I think he was adopter number seven or so of bitcoin. It was very, very early on.
00:14:03.130 - 00:14:43.942, Speaker B: He was a grad student in Switzerland. I was on his PhD committee, and he just got his doctorate about six months ago. Incredibly bright fellow and had incredible foresight. Mined a lot of coins early on and had about 10,000 bitcoins. And guess what happened one day, he discovered that his bitcoins had gone missing. And it wasn't an unsophisticated setup, it was behind two firewalls, and somehow people had traced him back, traced his machine back, took his coins. So question here is, can we do better? And I believe we can.
00:14:43.942 - 00:14:57.158, Speaker B: So I can expand on that later on, if you like. We've done a bunch of work on something called vaults and covenants, and those can help people recover their own coins and only their own coins in the case of a hack.
00:14:57.254 - 00:15:01.402, Speaker A: Yeah, I actually wanted you to describe those for the listeners.
00:15:01.546 - 00:15:02.240, Speaker B: Sure.
00:15:02.770 - 00:15:03.182, Speaker A: Okay.
00:15:03.236 - 00:15:59.150, Speaker B: So recently, last February, we published a paper called covenants. And the core idea with covenants is to enable people to put riders on how certain coins can be spent and what's a rider essentially restrictions. And what does this allow you to do? Well, it allows you to implement all sorts of things in general, but I want to focus on one thing, which is this idea called vaults. So what you can do with vaults based on covenants is essentially designate some of your money as cold storage. Essentially what you do is you say, look, I have my wallet right now, and I normally would spend out of it and everything would be in it and life would be fine. But I know that most of it I'm not going to need. So I'm going to take whatever, some percent of it, 90%, say I'm going to move it into a special vault.
00:15:59.150 - 00:16:29.174, Speaker B: Vault is just like every other Bitcoin address, except it has two keys associated with it. You can use one key to unvault the money. So any money that's in your vault, you would use the regular unvaulting key to turn back and move back into your hot wallet. Okay, so suppose I decide, for whatever reason, I'm going to spend all my Bitcoins. Well, I'm going to have to take my money out of my vault. So I use my unvolting key. And that unvaulting process takes some time.
00:16:29.174 - 00:17:04.594, Speaker B: It necessarily takes a certain designated amount of time. You decide what that time ought to be yourself. So for my use cases, I think that would be typically say 24 hours, maybe 72 hours. I don't have any urgent purchases that I do with Bitcoin during that time frame. What you can do is you can actually override an unvaulting operation with the second key. We call that the recovery key. So what does that mean? In the usual use case, it means that you just put your money in the vault, you then take it out.
00:17:04.594 - 00:18:01.414, Speaker B: You have to wait a little bit, however amount of time, however much you designated it to be, and then after that time you just use it out of your hot wallet and everything's great. But much more importantly, suppose I'm at the beach or whatever, and I'm hanging out and somebody hacks into my machine and they start moving my funds. Then I have the duration of that unvaulting period to say, no, this wasn't me. Even though this person has the unvaulting key just like I do, even though to the system he looks indistinguishable from me, it's actually not me. And I can prove that by producing this recovery key with which I override his transaction. And so that recovery key, which I keep in a separate, safer place, if I were to produce it, I would be able to say, no, you don't get to take this money out, I get to revert this money back into my hot wallet. So this, I think, is a fairly simple idea.
00:18:01.414 - 00:18:29.982, Speaker B: It takes a while to describe how it works, but deep down all it is is a second key that says, no, stop this, with some restrictions. That's why these covenants are there, these riders in place, so that nobody, no merchant can be fooled about these transactions. Vaults are vaults and they're separate from hot wallets. So it's not the case that I would be able to buy something from you and I would use the recovery key to get my money back. That's not how it works at all.
00:18:30.116 - 00:18:31.866, Speaker A: And how do you keep the recovery.
00:18:31.898 - 00:19:18.554, Speaker B: Key safe so you don't need it for any day to day operation? You would just print it out and put it wherever you put incredibly safe things. If you were to have your recovery key also compromised, that's the worst possible scenario. Then you're in this deep bind. There is absolutely nothing distinguishing you from the thief then what the vaults allow you to do in that terrible scenario, disaster case scenario is you can burn the money. You essentially get to say, look, that person says move the money, unvolt the money to that location, I'm telling you to burn the money. And then the money is burned. And what that does is it takes away from the thief any potential for a positive outcome.
00:19:18.554 - 00:20:15.534, Speaker B: He can hack all he wants into your systems, but if your money is in a vault, it's really safe. He's not going to get any of it if you actually intervene in a timely fashion. So we envision that there will be services that actually watch the blockchain for you and can intervene. So this I think is a pretty cool idea because all of a sudden you've taken away the universal bug bounty. These people can come in and hack all they want but they're not going to get anything. And that can drastically shift the gameplay here because at the moment every bitcoin user is just a juicy target like every Ukrainian kid. Why aren't they going in and attacking everybody? You know, we see these I picked on Ukraine here because the story of Christian Decker involves a hack from Ukraine, but essentially you've got hackers everywhere and you've got all these juicy targets everywhere else and so you're constantly seeing these attacks and why shouldn't you? The expected outcome is positive.
00:20:15.534 - 00:20:32.082, Speaker B: You try. Every hacker has a portfolio of tricks they know, they just throw them at you and with some probability they will get in and they will make money with vaults, even if they get in, they make no money. So now they're going to have to move to a different target and that's a great outcome.
00:20:32.226 - 00:21:03.650, Speaker A: Yeah. So I love how this system that you just described changes the incentive mechanisms and that's another big theme that I see in your work. You often look at kind of how perverse incentives can arise where they're not intended. And I'm so curious, how do you work out these different scenarios and how can you be sure that you've covered them all? And how do you think creators of smart contracts can write code that creates the incentives that they actually intend?
00:21:05.190 - 00:21:38.140, Speaker B: Yeah, that's a good question. I thought a little bit about this and there is no structured answer I can give you. There is no sort of playbook. It helps to have grown up in an environment where I saw a lot of scams. Essentially what you do is you kind of eyeball the situation and you're like, you know, if I were malicious, what would I do? And then things usually fall apart fairly rapidly. I don't know. But it takes a certain kind of adversarial thinking.
00:21:38.140 - 00:22:12.306, Speaker B: Some people have this in spades and some others are different. They're more constructive thinkers. I tend to think of myself mostly as a constructive person actually. So most of my work is about building new systems. On occasion, though not on occasion, but in many cases it's actually the new systems we build are motivated by problems, adversarial problems that we've identified. So there's an interplay between the two. And there are two hats I wear and when I wear my adversarial hat.
00:22:12.306 - 00:22:47.890, Speaker B: You're essentially just probing every single thing you can about the protocol. Essentially you're doing a big search. The search space is immensely big right at this point in the protocol. What if I were I'm expected to send a message x, but what if I don't? What if I delay it? What if I send message y? What if I change a field and so forth. So you have to think through those circumstances. And when you're doing so there are so many that it's not always feasible to do it automatically with the help of a computer. So verification of these systems is difficult.
00:22:47.890 - 00:22:55.910, Speaker B: So a trained eye can typically sort of navigate that space and find the cases that are going to lead to a compromise.
00:22:56.410 - 00:23:06.470, Speaker A: And so what suggestions would you give to creators of smart contracts so that way their programs end up really executing what they intend them to execute?
00:23:08.110 - 00:24:07.222, Speaker B: This is the big question, right? So I think before we tackle this, let's talk a little bit about the Dao because I think it's a good running example. So what happened with the Dao was, as I think many of your listeners know about the collapse there. But before the collapse, me and my colleagues Vlad Zamfir and Dino Mark looked into the code of the Dow and we issued a call for a moratorium saying, look, this is a fascinating contract. It's amassed an enormous amount of money, $220,000,000 success beyond anybody dreamed of. But it's vulnerable. It is not adequate for doing the task it's set out to do. In particular, it's set out to sort of make funding decisions on behalf of its investors and to make those decisions with the help of a voting scheme.
00:24:07.222 - 00:24:41.894, Speaker B: Well, the voting scheme is gameable. They're like umpteen, different ways. I think. We ended up counting nine separate issues with it by which the Dow could be subverted and not carry out its task of finding the optimal asset allocation. Let's see. So what are some general techniques for writing correct programs is one question, and I think this is an open research issue. It's one of the grand challenges facing computer science today.
00:24:41.894 - 00:25:17.010, Speaker B: So if you think about your desktop programs, right, they're supposed to carry out functions and they're supposed to not crash. And I don't know about you guys, but I see mine crash fairly often, right? Blue screen of death. Everyone's had it at least once in their lifetime and some of us many, many times. So when it comes to smart contracts, it's much more dire. Like there's real money at stake, sometimes a lot of money at stake. And the bugs can be subtle. So in this whole game, or war, really, there are a couple of tools that are useful.
00:25:17.010 - 00:25:54.214, Speaker B: So generically speaking, it's incredibly useful to have a spec. If you don't have a specification of what you want to do, then you're just navigating blind. You're going to get to wherever you get to, and that's going to be your destination. If code is law, then there is no greater truth than what you've got. And if it's got bugs in it, then you're screwed. Essentially. It's kind of OD, right? A lot of people think it's like they kind of view themselves as that famous justice who said pornography.
00:25:54.214 - 00:26:28.140, Speaker B: I know it when I see it. Well, you know a bug when you see it. But if you don't have a spec, how is anybody else going to agree with you? So the very first thing is to have a spec, not only to prove to others that this was unintended, but to also document for yourself what it is that you want to do. The second level up from a spec is a formal proof that the code you have matches the spec you've got. And a lot of people think that that's the end all, that. This is sort of the golden standard. It is by no means a golden standard.
00:26:28.140 - 00:27:35.118, Speaker B: It can, in fact be misleading to have a formal proof because there can easily be flaws in the spec and there can easily be properties of your code that you want it to have but are not embodied in your spec. So if we were to go back to the Dow case, the current technology we have for specifying things formally can specify basic what we call safety properties. So what's a safety property? Well, the code will not divide by zero, so that's an easy thing to check, relatively speaking. I can go through the code and prove to myself that all the divisions will be made by numbers greater than zero or I can put checks in it to ensure that that doesn't happen, et cetera. But the actual spec for the Dao is much more high level, right? The spec in English is, the Dao shall reflect the voting preferences of its constituents. Now, I don't know how to write that in logic, in first order logic, or in any amended logic. That I'm aware of.
00:27:35.118 - 00:28:28.190, Speaker B: It's very difficult to specify what that means, especially when you've got concurrent votes and so forth that are happening in the Dow. The complexity of the system is really high, and as of now, I don't know of anybody who has the core science, the fundamentals, to even be able to express the spec, let alone prove it. So there is a very long road ahead of us with a lot of core science that's needed to make sure that smart contracts are trustworthy, but basic stuff of the kind that the hacker initially exploited to break into the dow contract, those we can hope to sort of keep under control. So he ended up taking advantage of a recursive call error, and essentially that stemmed from the entire community not understanding that these recursive calls were there and could be problematic.
00:28:30.690 - 00:28:33.530, Speaker A: Can you define recursive call for the listeners?
00:28:33.610 - 00:29:18.560, Speaker B: Oh, sure. Okay, so what happened is the dow hacker ended up it was actually the hacker or hackers were very sophisticated, so they ended up using multiple exploits. The initial exploit that they used took advantage of a little known feature in solidity, the language that is used to program smart contracts on ethereum. So the dao, on occasion allows okay, so here's what you can do with the dao. You can invoke a dow function to transfer some funds to a subdao, a child dao. That you control. And in that process of transferring funds, the dow invokes a function that you provide.
00:29:18.560 - 00:29:48.630, Speaker B: So if in that function you call the dao. Back, then you can get the dow to go into a loop. It's like inception, right? So you call the dao. It calls your code to transfer the funds for your code to receive them, in essence. And when you're receiving them, you call the dow again. And because of the way the dow code was structured, it's sort of oblivious about what it's doing, what's in the middle of doing. And it ended up saying, oh, okay, you want to transfer some funds? Okay, I'll call you again.
00:29:48.630 - 00:30:43.498, Speaker B: And so it calls you again, and you call it again, and so forth. And instead of making one call, you could or the hacker did end up making a gazillion calls, some total of which ended up transferring about $50 to $60 million out of the Dow to a child of the dow. So that was an enormous hack. Heist, whatever you want to call it, or some people would call it just use, not abuse even. But whatever it was, it ended up transferring a lot of money out of the Dow, making everyone poorer and teaching the entire ethereum community about this one feature that everybody had forgotten about whereby contracts could be exploited. So this is a problematic issue, but these kinds of issues we can make headway towards eliminating them.
00:30:43.664 - 00:31:19.510, Speaker A: So ethereum is very young, and there were differences of opinion on how to resolve this issue. And obviously we have the one side of the community that believes that immutability is an extremely important characteristic. And they were against kind of rolling back the network to be able to return the funds to the people who had lost them. But that is what the majority of the community ended up doing. And tell us what your stance was on that and how you came to that decision.
00:31:20.490 - 00:32:33.120, Speaker B: So, let's see, I was mostly neutral in the beginning, but looking at what was happening at this, it seemed like the Dow investors were essentially consisted of a lot of people who had sort of committed to Ethereum as a platform. They wanted to see Ethereum succeed. They saw the Dao as an investment vehicle that was going to make the community richer, that would invest in things that benefited Ethereum as a whole. And sinking so much money into this hole in the ground where the hacker stood and burning, it seemed, at ODS with what the community wanted. So the situation then was actually quite dire. If you look at what happened the day of the hack, you look forward at your options and you've got two options. You can burn the cash and say the hacker earns this money, or you can say, well, we're going to claw it back and we're going to make the hacker poorer and we're going to revert this one transaction that was unintended and took advantage of one feature that essentially was forgotten by the community.
00:32:33.120 - 00:33:08.982, Speaker B: And both options are pretty bad. In fact, both options are pretty terrible. But given these two terrible options, it seemed like the fork option was better in the sense that it led to greater utility, greater happiness for the community. You have to remember that cryptocurrencies and blockchains do not stand on their own. They all serve a function. Distributed systems only prosper to the extent that they serve a societal need. And a currency system can only do that which its community wants.
00:33:08.982 - 00:33:56.070, Speaker B: If it's not doing that, then it's something else. It's a fetish, right? It's not the case that I am and there are people out there who just love a blockchain. They just love a bunch of proofs of work, a bunch of crypto puzzles that depend on each other. I call these people blockchain fetishists. And blockchain fetishism is not going to get us to a good community. I think what is important is at the end of the day, where does the value go? What does the community want it to do? And in the case of Ethereum, the community clearly wanted it to fork it's like it was 86% or more. I think at the last poll that I looked at that wanted the hack to be undone and revert the funds from the hacker.
00:33:56.070 - 00:34:07.610, Speaker B: So then there was an issue of whether to fork it soft or fork it hard. And then there was of course, the fork itself and the aftermath involving Ethereum classic.
00:34:08.190 - 00:34:32.910, Speaker A: So before we get into that, I actually just wanted to ask you about the soft fork, because you had written a blog post that outlined a way that the soft fork could be attacked. And as a result of that blog post, the Ethereum community changed its mind. So can you tell the story of what happened and how in general, you see your role in these public blockchains?
00:34:33.070 - 00:34:59.354, Speaker B: Sure. So that was interesting. So once the community decided to fork, the initial idea was, well, let's do a soft fork. And what's a soft fork in this case? Let's have the miners evaluate smart contracts. And if the smart contract ends up touching the dow, then let's not add it to the Ethereum blockchain. Let's freeze the dow. Everything related to the dow, we freeze to buy ourselves time.
00:34:59.354 - 00:35:32.898, Speaker B: This is an incredibly sensible idea, right? It feels like it would be my first reaction too. And it was my first reaction. And initially when I thought about it, I thought, well, okay, that's not so bad. You can implement this. But I received a message, an email from a student with whom I had actually interacted nine months prior, or six months prior when I first interacted with him. He was a high school student and he had written to me out of the blue, and he said, I'm very excited about blockchains. And I encouraged him to apply to Cornell.
00:35:32.898 - 00:36:30.060, Speaker B: And he had applied to Cornell. In the meantime, he'd been accepted to Cornell, but he was still in high school and he'd just finished high school and he was doing an internship at Consensus in New York City. And he said, Well, professor sir, wouldn't it be the case that if we were to do a soft fork, then the network would be vulnerable to an enormous attack? Wouldn't it be the case that somebody could flood it with transactions that cost almost nothing to generate and are very expensive to evaluate for the miners? The miners would have to execute them for potentially a long time, only to discover at the very end that this thing touches the dow and then they have to toss it out. So normally a big invariant in systems like Ethereum is the transactions have to pay gas for their operations. The more computation you do, the more gas you pay. And in this case, you could get the miners to do enormous computations and pay nothing, and you could do this all day long, forever. 724 just bogging the entire thing down.
00:36:30.060 - 00:37:21.558, Speaker B: And therefore, this was an enormous denial of service vulnerability. So we wrote our blog post. It ended up coming out maybe two and a half days before the soft fork was scheduled to go out, and everyone was slated to do it. And suddenly the opinion changed and everyone was like, no, of course we don't want a denial of service attack. Of course we do not want the soft work if it's going to end up hurting Ethereum more. And I thought it was an enormous success story by these well, I should have mentioned it wasn't just the student, the one student, Jaden Hess, but also his friend river and River Kiefer. So river and Jaden were the ones who came up with this, essentially.
00:37:21.558 - 00:37:55.026, Speaker B: And they did it, they just got in. It's kind of like in the movies right before the clock's about to expire. And I think they did an enormous service by keeping Ethereum from getting bogged down by attacks. Had the software gone forward, we would have been looking at a disaster scenario. We would have seen attackers come out full force, attack the system. It would have easily crashed and burned to zero. As it is with our announcement, ethereum's valuation went from 1 billion to 900 million.
00:37:55.026 - 00:38:20.700, Speaker B: And for a second or so I was like, well, that wasn't so good, we lost 10% there. But I kind of view our work as having preserved 90% of the value of the coin and it really would have gone down to zero had it been open to such a blatant vulnerability. So I think calling off the soft fork was a very good outcome and I'm glad we got it done in the nick of time.
00:38:21.470 - 00:38:57.878, Speaker A: So, in terms of outcomes that maybe didn't go or didn't happen in such an ideal manner, let's talk about the hard fork. You had written a blog post that laid out several of your fears around the hard fork and one was that the minority fork might survive. And that, of course happens. So Ethereum split into what is Ethereum, which is the part of the network that did roll back so as to return the funds invested in the Dao. And then there's Ether Classic, which did not. So what do you think it will happen to Ether Classic going forward?
00:38:58.044 - 00:39:36.690, Speaker B: So that's a good question. Let's maybe talk a little bit about what happened with that split. Right, so before the split, as you pointed out, I had written this blog post saying, look, the game theory says there will be one dominant fork, but there will be a minority fork if it's subsidized. So if there is somebody throwing money at it to succeed, then it can linger. So at a high level, there's a lot of noise that came out. In fact, the trolls were out in full force. Twitter was full of everybody and their brothers saying all sorts of things about how the fork went.
00:39:36.690 - 00:40:02.358, Speaker B: But from my perspective, the fork actually was a huge success. It ended up doing what it intended to do. It ended up reverting the funds. Everybody who put their Ether into the Dow got their Ether back. That is a hugely awesome outcome, right? And that's much better than having to fight it out with some hacker playing core wars. Hacker on hacker. Kind of like they write some code, you write some code, you try to keep them from transferring their funds.
00:40:02.358 - 00:40:45.580, Speaker B: And that game would have been an unending source of strife and a huge loss of value for everybody who participated. The community would have turned away a lot of the early adopters. So I think Ethereum would have really taken a huge hit if not just died, if the money had not been reverted. So as far as Ether is concerned, the fork was a huge success. Now the fork gave rise to an opportunity for people who were not vested in Ethereum to step in. And behind the scenes I saw some of this. There were some people trying to buy up old coins and I know exactly who they are.
00:40:45.580 - 00:41:26.982, Speaker B: And it was interesting, the initial people who started this process, and it was a malicious effort, it was essentially money that wanted Ethereum to die, that falsely saw Ethereum as a competitor. With other cryptocurrencies, particularly with bitcoin, I think this is a false view. I don't think these two currencies compete, and I have a very simple litmus test for it. If you think about bitcoin and bitcoiners, and if you look at what they do, they typically worry about merchants. And if you think about Ethereum people, they think about applications. It's just night and day, it's water and oil. These two things are very different.
00:41:26.982 - 00:42:01.870, Speaker B: Sure, there's the same kinds of consensus protocols going on, but it's kind of like a file system person getting upset, I don't know, at distributed naming service or something. Yes, the protocols used under the covers are very similar. They're completely different functions. And yes, there are tokens and yes, there are people who speculate in them, but the speculation is that what we want to do, that's not what we want to do, that is not what's a societally good outcome is, not to enable speculators.
00:42:01.950 - 00:42:32.640, Speaker A: But aren't they converging slightly in the sense well, maybe converging isn't the word, but there are ways in which they're becoming more similar. For instance, we have rootstock being developed on bitcoin which intends to bring kind of like the smart contract capability of Ethereum to bitcoin. And so maybe now bitcoin and Ethereum seem rather different, but there is a way where you could look down the line and say, well, they could be more similar in the future.
00:42:33.650 - 00:43:18.838, Speaker B: Potentially that's true. But what you see happening there is bitcoin deciding to branch out of its actual function. Bitcoin's function currently is value transfer and Ethereum's function right now is computation. These are two separate domains. The fact that bitcoin wants now to go into the Ethereum space, that's fine, that's nice, but that's going to take a bunch of years and I don't know that it will happen in the same form as Ethereum. Ethereum already is the established dominant player there to sort of look at a potential perceived competitor down the line and to get sort of obsessive about it. That's kind of weird.
00:43:18.838 - 00:43:48.870, Speaker B: That is not at least how I work. And I don't know that that's good. That is infighting between, we've seen the infighting between bitcoin factions. It's not been good for bitcoin. And infighting between bitcoin and ethereum and other cryptocurrencies is also not going to be good for the entire space. So I think that's a terrible line of reasoning to say, well, multiple years down the line, I might be in the same space as you. So I'm now going to take an adversarial position.
00:43:48.870 - 00:43:58.360, Speaker B: I'm going to try to hamper whatever it is, your progress. There is going to be strife. These are not good things. I don't think we should engage in them.
00:43:58.970 - 00:44:19.920, Speaker A: So, speaking of infighting, I also did want to ask you about the scaling of public blockchains, which has been, as you mentioned, a big point of contention bitcoin. How do you think developers can best accomplish this, though, particularly for these public blockchains where they have these sort of grand visions of what they would be able to do for the world?
00:44:20.290 - 00:44:36.686, Speaker B: So there are lots of issues on the table when it comes to scaling bitcoin. So if we were to look at it narrowly, which is how do we scale bitcoin? Well, there's only one answer. You scale it on chain. That's the only answer I know of because of the way the question is framed.
00:44:36.798 - 00:44:40.706, Speaker A: And just for listeners. So how do you define scaling on chain?
00:44:40.818 - 00:45:32.982, Speaker B: Scaling on chain, to me, means the chain must grow in some fashion to accommodate more than three and a half transactions per second. So currently the chain works by issuing about one block every ten minutes, and that block is one megabytes big. So that comes out to three and a half transactions per second. And that's the max bitcoin can do. And so if you want bitcoin to sort of be bitcoin and scale up, well, you got to improve that number somehow. When I say on chain, I mean without changing the fundamental structure of bitcoin itself. And that fundamental structure to me and in my worldview, and I think almost all of your listeners will share, this is one based on Satoshi's initial vision outlined in the white paper.
00:45:32.982 - 00:46:19.058, Speaker B: It's a bunch of blocks that reference each other and build a blockchain. So that's the only way forward. Now, the way the chain is generated will need to change for us to be able to do that. So we might have to have bigger blocks, but there is a limit to how big you can make the blocks and get scale. So you can't make them 1000 times bigger, then that would cause all sorts of problems. But we want to make the number of transactions about at least 1000 times, if not 100,000 times larger. So how do we get there? So my group has done some work on protocols that retain the entire bitcoin structure, just change some mechanistic issues on the wire about how the blocks are generated.
00:46:19.058 - 00:46:59.326, Speaker B: The protocol here is called Bitcoin ng bitcoin next generation. And it essentially is a way to generate the exact same blockchain as outlined in the white paper, but in a slightly different fashion and issuing it in a slightly different manner so as to keep the pipeline full and to generate many more transactions per second than would be allowed by 1 MB blocks every ten minutes. So that's one way. There are other techniques. Extend blocks is one, compact blocks is another, et cetera. And there are also sort of layer two solutions. I'm a little skeptical about layer two solutions.
00:46:59.326 - 00:47:48.254, Speaker B: So layer two solutions are solutions. One of the most famous ones is called the Lightning Network. Essentially what these do is they build a credit network on top of bitcoin. So, for example, Laura, I know you at least a little bit, and I know you sufficiently to front, say, $100 on your behalf to someone around here. So if you ever wanted to transfer some money, and I happen to know that person, you could ask me and I'll give that person some money out of my own pocket, and you and I will settle later, and perhaps I want to transfer some money to somebody who happens to live near you. And this can go back and forth and we can sort of without having to hit the main blockchain, the underlying blockchain, the bitcoin blockchain. The two of us can have a back and forth of money transfers and thus get some scale.
00:47:48.254 - 00:48:36.900, Speaker B: But there are a bunch of problems with this. The main one, of course, is we're not doing bitcoin at this point. The Lightning Network, even though it uses the same syntax for transactions as Bitcoin, even though it uses a similar sort of style of addressing it, is not the bitcoin network that we're transferring the funds over. We're now transferring the funds over a credit network, and doing so has a whole lot of issues of its own. So, first of all, you might say, well, what are these issues? Well, first of all, we don't know what the performance of this network is because we don't know what this network looks like. I happen to know you and there's an edge between us, but I don't know a bunch of other people and the people I know that you want to transfer money to, who are they, et cetera. Can we really create these paths and what is their capacity? So that's an open question.
00:48:36.900 - 00:49:05.420, Speaker B: The performance and the scale you're going to get with a layer two solution is unclear. Nobody knows what that's going to look like. Anybody who tells you they know the answer to this is flat out lying. We don't know the human interaction patterns. I know I have a lot of friends on Facebook. I don't know how many of them I'd actually front money for, by the way, and how much that would be. So that particular credit network hasn't emerged in any form or any medium that I know of.
00:49:05.420 - 00:49:52.890, Speaker B: So that is an enormously big problem. It's a big unknown, and we're not going to settle this until it emerges. And anybody who says that this is going to solve our problems is essentially making a blind faith assumption that when this thing arrives, it's going to solve these problems. The second issue, of course, is the protocols haven't been developed yet, so finding these routes is difficult and finding these routes in a privacy preserving manner, it's new territory. I don't know. I haven't seen any protocols I would put my faith in, and I certainly don't want some random Joe to discover that I happen to know you, that you and I have a credit relationship. Why should they? I have a bunch of credit relationships with a lot of merchants and nobody should know who those merchants are.
00:49:52.890 - 00:50:31.442, Speaker B: Why should you know who my best friends are, what their credit limits are? So it's going to be fairly difficult to design a decentralized peer to peer protocol that's going to preserve privacy and guarantee anonymity to participants. I haven't seen it yet. So we're going blind into the lightning network, assuming that these challenges can be solved, and I haven't seen them solved yet. So these are two problems. The third one, and also a major problem, is the user experience. So it's hard enough with bitcoin to get somebody else to use it, right? It's like, oh, I sent some transaction. Where is it going? It got stuck.
00:50:31.442 - 00:51:02.542, Speaker B: The failure scenarios are really complicated. Everybody understands credit cards, right? You sort of give somebody your credential, it's just a terrible idea, right? So you can get a lot access to a lot of my money if you know my credit card number. So credit cards are bad, but at least they're simple, and that's a key feature. So bitcoin, sadly, is not simple. It's very hard. Try explaining to an audience how bitcoin works. I've done this to many general audiences by now.
00:51:02.542 - 00:51:49.034, Speaker B: I've briefed all sorts of people in government on bitcoin, and it takes at least 20 minutes to describe how bitcoin works. Now, you add on top of this how lightning works, it's just going to be at least an hour, and then the user experience of what can go wrong. My transaction is lost. Well, where do I look for it? Where is it? Where could it be? What state is the payment channel in? It'll just explode and get very complicated. So I think these three fundamental issues are currently unsolved, and the first one, of course, is unsolvable until deployment. So putting one's blind faith into layer two solutions, I currently see as quite optimistic and not the path of a Prudent technologist.
00:51:49.162 - 00:52:07.320, Speaker A: Well, when you look at this space, and not just bitcoin, but just the whole space of cryptocurrencies, smart contracts, all of this stuff that's enabled by this type of technology, what do you think is the most cutting edge or promising technology or project that you're seeing right now.
00:52:07.770 - 00:52:56.102, Speaker B: So there is a lot of work going on on all sorts of fronts. It's very difficult to answer that question. So there's a lot of work happening at the forefront of consensus protocols, and I want to put aside bitcoin for a second. So the bitcoin use case is special and it requires its own special treatment, but there's a lot of exciting work on deploying blockchain protocols for different scenarios. These are not competing with bitcoin in any shape or form, and with ethereum for that matter, but essentially providing to financial institutions new tools and techniques. And there's a lot of exciting work on that. Front.
00:52:56.102 - 00:53:41.650, Speaker B: My group is doing some of it. Joe Bonel at stanford, arvind narayanan at princeton, and brian ford at EPFL. So these are some of the groups that are looking at new consensus protocols and or new techniques. And I think there is quite fascinating work happening in the fintech space that is independent of anything that might happen with bitcoin and has essentially nothing to do with it. You could apply these techniques to all sorts of things that have nothing to do with money actually. And I think some of the exciting use cases have very little to do with money. So there is that on the bitcoin front, there is interesting or bitcoin like value transfer systems front, there is interesting work happening on confidentiality.
00:53:41.650 - 00:54:31.202, Speaker B: So in the early days of bitcoin, it was billed as an anonymous system. That narrative got reverted to pseudonymous as people figured out that these addresses were leaking information. I think as of today, very few people would actually advise you to use bitcoin as it is. If you want to actually retain some privacy, you would need to do at least something like coin join or something of that kind to hide what's going on. Otherwise your employer can easily see where your money is going, and that is not a good outcome. So zcash is a promising protocol, I think, in providing confidentiality. There are other competing protocols that people are pushing, and there are a bazillion other efforts as well.
00:54:31.202 - 00:54:41.400, Speaker B: There are lots and lots of altcoins, as you well know, and most of them offer no value whatsoever, but some of them are they have interesting features here and there.
00:54:41.850 - 00:54:48.200, Speaker A: Well, this has been such a fascinating discussion. Thank you so much. Where can our listeners find more of your work or contact you in the future?
00:54:48.570 - 00:55:20.020, Speaker B: So they can see me rant about various different topics@hackingdistributed.com, and that's where I do most of my sort of pontification about things related to cryptocurrencies. And I also have a twitter account. It's hard to well, I'll spell it out. It's elite hacksor e l 33 t h four XOR. So they're welcome to come and follow me there. It's ingest, by the way, the name.
00:55:20.020 - 00:55:31.350, Speaker B: So that's where I do my pontification. We also have the IC three web page. That's where we do our serious academic work. And that is initc three.
00:55:31.850 - 00:55:34.006, Speaker A: Well, thanks so much for coming on the show.
00:55:34.108 - 00:55:36.246, Speaker B: Thank you very much, Laura, for having me.
00:55:36.428 - 00:55:55.790, Speaker A: Thanks for joining us today. If you're interested in hearing or learning more about gun, check out the show notes, which are available on my Forbes page. Forbes.com. Slash. Slights slash. Laurashin and if you've been enjoying the podcast, please remember to review, rate and subscribe to it to help others find out about it. Thanks again for listening.
00:55:55.790 - 00:56:12.700, Speaker A: You just enjoyed a Forbes podcast. To learn more about our other shows, visit forbes.com. Slash podcasts. Thank you.
