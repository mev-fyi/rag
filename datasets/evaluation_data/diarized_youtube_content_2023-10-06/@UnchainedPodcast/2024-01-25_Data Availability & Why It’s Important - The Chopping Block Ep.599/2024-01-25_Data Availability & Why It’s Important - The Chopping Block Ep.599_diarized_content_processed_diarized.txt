00:00:00.650 - 00:00:17.002, Speaker A: If we zoom out and you're listening to the show and you're like, who the fuck cares about this data storage thing? Why is ephemeral storage versus long term? Who cares? All you need to think about is this allows you to lower fees in some certain way, not a dividend. It's a tale of two Quan.
00:00:17.066 - 00:00:19.722, Speaker B: Now your losses are on someone else's balance sheet.
00:00:19.786 - 00:00:22.282, Speaker C: Generally speaking, airdrops are kind of pointless anyways.
00:00:22.426 - 00:00:25.122, Speaker B: Unnamed trading firms who are very involved.
00:00:25.226 - 00:00:27.826, Speaker A: Alec ETH is the ultimate Defi.
00:00:27.858 - 00:00:30.360, Speaker D: Protocols are the antidote to this problem.
00:00:31.850 - 00:00:42.250, Speaker B: Hello, everyone. Welcome to the chopping block. Every couple weeks, the four of us get together and give the industry insider's perspective on the crypto topics of the day. So quick intros. First you got Tom, the defi maven and master of memes.
00:00:42.590 - 00:00:43.660, Speaker A: Hello, everyone.
00:00:44.830 - 00:00:54.190, Speaker B: Next we've got Robert the cryptocurrency and czar of Superstate GM, everybody. Then we've got Tarun the gigabrain and grand Pooba at Gauntlet.
00:00:54.610 - 00:00:55.470, Speaker A: Yo.
00:00:56.850 - 00:01:27.638, Speaker B: Finally, I'm Haseeb, the head hype man at Dragonfly. So we are early stage investors in crypto, but I want to caveat that nothing we say here is investment advice, legal advice, or even life advice. Please see chopping block XYZ for more disclosures. Okay, so we finally got into the post ETF hangover. I think as much as we're tired of the ETF, it looks like the market is even more tired of the ETF because the market has just been basically puking for the last, I don't know, three, four days. BTC is down about 20% from the high. So it was at 49K on the high side.
00:01:27.638 - 00:02:21.080, Speaker B: It was threatening to touch fifty K. And as the ETF has been live, it's just been kind of slowly drooping downward to today, as a press time, it's something on the order of about 40K, kind of circling up and down. It hit a low of, I think it blew below 38. So a lot of the downshift in BTC has been blamed on GBTC. So if you recall from the previous shows, we were talking about the net inflows to the other ETF products. I think Blackrock finally hit a billion in net inflows and almost all the other products have been net inflows, but that has not been able to counter the outflows coming from GBTC. So initially, I think last week we tallied up the GBTC outflows, I think a day or two after the ETFs had launched, and it got into about 500 million of outflows and we were like, wow, that actually doesn't seem like that much, given the 20 some odd billion they have.
00:02:21.080 - 00:03:04.390, Speaker B: However, it looks like people were eventually waking up and realizing like, oh shit, I'm paying all these fees in GBTC, it's time for me to get out. And there's been now net estimated something on the order of $4 billion in total GBTC outflows. And it looks like that's not being balanced with inflows for other ETFs. And so a lot of these people are not just rotating out of GBTC into other ETFs, they're just selling and getting the hell out. So this seems to be a big drag on the overall market. Apparently the FTX estate has sold over a billion dollars of gbtc shares. And so it looks like if this is to be expected, there may just be more puking to go as GBTC continues.
00:03:04.390 - 00:03:13.194, Speaker B: Many of these people who have higher cost bases rotating out of GBTC and just getting out of their positions, well.
00:03:13.232 - 00:03:59.900, Speaker D: I'll be the first one to actually take a slight disagreeing position on this one. So I don't think you can blame gptc because the total net flows across the entire ETF and ETP complex for all of the bitcoin products is actually positive. So GBTC, we can look at the exact data as of this morning, was about $3.4 billion of outflows or so. And there was about $4 billion across every single product of inflows. And so in aggregate, the flows were, call it ballpark, close to zero. Over the last week, no more money has been moving in or out of bitcoin in the aggregate through these products.
00:03:59.900 - 00:04:54.250, Speaker D: It's basically flat and the price is down dramatically, even with roughly flat flows. And this is just, in my opinion, a result of the fact that there's hype leaving the market. And what we're not seeing are the flows outside of the exchange traded complex. We're seeing only the exchange traded complex. There's clearly net sales action in spot markets elsewhere. And you can blame JPDC, that's the product that's losing the most money, but it just seems to be moving into other products, into iShares, moving into bitwise, moving into all of the other products, and really just a transfer from GBTC. Yeah, if GBTC didn't exist at all, or if the SEC had know Grayscale's application while approving all of the others, we might see a significantly larger net flow in the ETFs.
00:04:55.390 - 00:05:19.746, Speaker B: Well, if you look at the flows basis, my understanding was that, like, day one, day two, it was quite positive, right. And basically it's been turning negative to balance out and end up zeroing out. And I think this was the opposite of what people were expecting, which is that GBTC maybe pukes day one, but then everything else starts really gaining and we end up in a net positive flow position. But it seems like we went from positive to negative, which ended up net flat. Yeah.
00:05:19.768 - 00:05:43.050, Speaker D: I mean, the bad day was the day where GBTC lost a billion dollars. And I think it completely transformed the narrative around the ETFs into one in which there was more assets at stake to leave the products than there was to enter them in the aggregate. And I think that's really transformed the narrative across the market and has led to a declining price, even though the flows in the aggregate since launch are positive.
00:05:43.950 - 00:05:48.742, Speaker B: Right. But the expectation was that they'd be even more positive. It's always a question of relative to expectations.
00:05:48.806 - 00:05:49.420, Speaker D: Yeah.
00:05:50.350 - 00:06:36.330, Speaker C: I mean, a billion dollars net sounds like a lot, but for an asset that trades $40 billion a day over several days, it's really pretty insignificant. And there are a lot of forced sellers like the FTX estate and things like that. But I also think there's a little bit of reflexivity to GPTC too, where if you think, hey, people who are in loss are the ones who are selling, where it's like if you add any sort of incremental negative sell pressure, then more people are going to be lost and more inclined to rotate. So I don't think it's exactly a super efficient market, and I don't know what that sort of cost basis breakdown looks like for gptc holders, but people are sort of optimistic that volumes on GPTC are going down over time. And so hopefully we're sort of reaching the end, but who knows?
00:06:38.190 - 00:07:09.894, Speaker B: Yeah, that seems plausible to me. And I guess the other thing is, I think this market is probably going to continue being spooked until we see the GBTC outflows stop and it finally finds the equilibrium of, okay, these were all the sellers, they're done. Now we go back to net inflows, because all the other ETFs are only going to accumulate capital over the year as the financial advisors and allocators finally start getting some of their clients into this product, which I don't think we expected to be all at once.
00:07:09.932 - 00:07:10.086, Speaker A: Right.
00:07:10.108 - 00:07:12.840, Speaker B: I think it's kind of a slow grind over the course of the year.
00:07:14.170 - 00:07:16.102, Speaker C: Tarun looks so bored right now.
00:07:16.236 - 00:07:18.470, Speaker D: Tarun hates the bitcoin ETFs.
00:07:20.330 - 00:07:21.334, Speaker B: Wake up. Wake up.
00:07:21.372 - 00:07:24.666, Speaker A: Please kill me. Please kill me if I have to hear about this again.
00:07:24.848 - 00:07:29.420, Speaker D: This will be the last show where we talk about the bitcoin ETFs for at least one show.
00:07:31.010 - 00:07:57.202, Speaker B: I don't know if that's true. We'll see. I hope that's true. All right, look, we've made our sacrifice to the ETF gods. I think we can move on now. There was one much more interesting crypto native story, which was around a bug in one of the Ethereum clients called Nethermind. So I think it's maybe worth doing a bit of backstory just so people understand what the story is about.
00:07:57.202 - 00:08:34.606, Speaker B: So, Ethereum, back in the day, Ethereum had one client. When we say client, we mean the program that people run in order to validate the Ethereum network. Back in the day, Ethereum basically just had guess which was the Go Ethereum client written in the programming language go, which basically existed from the very beginning of time. Essentially when Ethereum first came into existence, when Ethereum went to Ethereum 2.0, they split up into two clients. One is called the execution client and one is the consensus client. The consensus client runs basically the staking and the consensus layer, what was called the beacon chain.
00:08:34.606 - 00:09:16.986, Speaker B: And the execution client actually runs the code on Ethereum. And right now there's been this big hullabaloo around what's called client diversity, which is basically how much concentration is there in which client everybody is running to actually validate the Ethereum network or to run execution on the Ethereum network. On the consensus layer for Ethereum, there's actually very good client diversity. There are many different clients, like prismatic labs and Nethermind and whatever. All these different people have clients, and there's a good distribution where I think it's like 40, 30, 20 or whatever. It's pretty good. The execution clients, however, are a very, very different story on the execution clients.
00:09:16.986 - 00:09:22.110, Speaker B: More than, what is it, like 90% or like 85% or something?
00:09:22.180 - 00:09:23.790, Speaker C: 78% are geth.
00:09:24.930 - 00:09:49.000, Speaker B: 78%, I see. Okay, so about 80% of the clients that run execution on Ethereum are running Geth. So now geth again, it's the oldest. It's also the one that most other networks that fork the EVM also use geth. So most of the roll ups, avalanche, Phantom, all these other guys, as far as I know, pretty much everybody runs geth. It's just the most battle tested and it's the most used. Now, the problem with this.
00:09:49.000 - 00:10:35.218, Speaker B: So this came to a head on January 21. There was a critical bug in Nethermind in their Ethereum client, which powers roughly 8% of validators. And now Nethermind is a minority client. It's not the most used client. But this got people worried that like, hey, what if this bug, instead of being in Nethermind, was in Geth? Ethereum was able to continue running because Nethermind was such a small portion of the Ethereum validator set. But if this bug was in geth, then this would completely halt the network and it would mean that ethereum would stop producing blocks and it would just get stuck until somebody would go in and fix the geth bug. And there'd be no realistic way that people could rotate clients in that period of time rather than just waiting for the bug to somehow get fixed.
00:10:35.218 - 00:11:13.614, Speaker B: And so this has led to a big conversation in Ethereum about should we work to intentionally increase client diversity and move away from the monopoly that Geth has over execution in Ethereum. So a lot of people going back and forth. One thing to also note is that this is pretty weird in the sense that almost no other blockchain has client diversity at all. So if you look at bitcoin, bitcoin core is the bitcoin spec. There is no other client that has any meaningful market share. You look at other chains like Solana or Nier or whatever, none of them have any other client. There's only the canonical client, effectively.
00:11:13.614 - 00:11:40.162, Speaker B: So Ethereum is unique in having other clients to begin with, but it's increasingly being talked about as, hey, maybe we need to push, as consumers of staking services or the exchanges push them to start adopting other clients to enforce client diversity. So what do you guys think about this whole client diversity debacle and debate? And where do you feel like this is going? Do you think that client diversity can happen, or is this a pipe dream?
00:11:40.246 - 00:12:34.190, Speaker D: Well, I personally don't think that client diversity is necessary. What you need is operator diversity, geographic diversity, resilience and strength through numbers. It doesn't matter if you have twelve different clients running the network. It's about at the end of the day, how many different validators are there, and having diversity and resilience from how wide your validation is. I think it's almost safer to have one completely battle hardened client that everybody's focused on, as opposed to assuming that through having multiple clients it doesn't matter if there's an issue. Yes, bitcoin core moves slowly, and yes, geth moves slowly as well. But implementing clients in the first place is unbelievably complicated.
00:12:34.190 - 00:13:24.390, Speaker D: The effort that it would take to create, I think multiple new clients, hypothetically, would be astounding. Implementing the Ethereum spec, so to speak, is not easy. It's like not trivial. The ODs that you get it wrong I think are significantly higher from a new client that's originated from scratch than an existing one. When I entered the Ethereum world in 2016, 2017, this was actually a pretty big conversation back then, and I feel like the conversations died out over the years. And it was oh well, we need to implement this in multiple languages. Geth was go, how do we implement this in rust? How do we implement this in Java? How do we do this in different programming languages? Because the idea was that one language itself wasn't dependable.
00:13:24.390 - 00:13:45.300, Speaker D: I mean, I think that's a risk that can be taken. And I think it's almost more reasonable to have the entire community get behind Geth, make it strong and perfect than to try to spin up new clients, which is a Herculean effort. And the amount of effort that goes into getting it right, I almost think.
00:13:45.690 - 00:13:49.240, Speaker B: Potentially can't even be done safely at this point.
00:13:51.690 - 00:15:13.682, Speaker A: Yeah, I would mainly echo that, although I think if you look at the history of sort of mission critical open source software, so like compilers, Linux operating systems, you generally do see this thing where there's some core component that is conserved, there's very few sort of core kernels. There's all these people who make research kernels in academia, but there's not really something that's used in millions of production servers that differs that much from the core Linux kernel. Like obviously you have modules and stuff in the operating system that are different, but there's also the same thing with compilers. It took so long for there to be compiler to competitor to GCC in LLVM. And there's sort of this question of why you want to do it. Usually one of the reasons people kind of, when they take a mission critical piece of software and they want to rewrite know Linux did it because it got over licensing and patenting issues from Bell Labs and Unix and then Windows eventually. That makes sense, right? That's a reason to make another operating system.
00:15:13.682 - 00:16:10.430, Speaker A: It's cheaper, open source AI, it's the same thing. It's like getting around sort of the licensing agreements and stuff. But if you look at other mission critical software, it's very rarely that there's a reason to do it that's like, hey, we want to make sure that there's Kumbaya for every possible programming language, right? There's a reason almost all compilers still just use the C plus plus compiler to see compilers at the bottom of the stack and then write stuff around it as opposed to writing their own from first principles. It's just very easy to make mistake, and then mistake is catastrophic and very hard to find. On the other hand, I do think there is some benefit. Sorry. Another reason that people will make mission critical things that are not just closed source competitor is extensibility.
00:16:10.430 - 00:16:53.754, Speaker A: So in order to make a system more modular, so you have the core component and then things that people can extend, you may have to rewrite the main thing because it was initially written as this monolithic single code base, and so you can't really break it apart into pieces. And there's a reason to make another one. So in the compiler case for LLVM, that was sort of the big deal, right? Like it separated the front end and back end more cleanly and so people could build compilers for other programming languages using it. And so it kind of had this nice little feedback loop. I don't really see an argument for that here either. It's not like adding other clients makes you more modular. Adding other clients does give you some new functionality.
00:16:53.754 - 00:18:00.674, Speaker A: Like you can double check particular implementations of very core cryptography. You can make sure that, hey, multiple people have seen it in different languages and come to the same thing. So everyone's agreeing on the math correctly. But I think there's kind of always been this war, like Robert was saying, I think it's only become kind of more interesting with staking derivatives and also with the fact that there are tons of forks of these clients for different purposes that exist and maintaining the forks, the forks you could think of as like the modular components, right? Like I have the main thing, I can add these other pieces and use it for my use case. So I guess, long story short, I think client diversity is generally a bad idea. I think it is a good idea as an academic exercise of proving, hey, there's like these faults that you can correct. But I don't think it's necessarily a good production software exercise, because like I said, I think there's only really two reasons you rewrite mission critical software.
00:18:00.674 - 00:18:08.258, Speaker A: One is licensing, getting over licenses, and the other is kind of this modularity thing. And neither of those applied to this scenario.
00:18:08.354 - 00:18:20.826, Speaker C: I thought that the Linux kernel analogies is actually really apt. The difference is that the Linux kernel does not update nearly as frequently as something like gethrate Geth is expected to be this sort of core that then people sort of, sort of, I think.
00:18:20.928 - 00:18:24.910, Speaker A: Linus torvolds from the 90s would be offended by what you just said.
00:18:25.060 - 00:18:32.442, Speaker C: No, I think if anything, that's the whole point, is they're very protective, and he's an asshole about the kernel, so that it is solid and robust.
00:18:32.506 - 00:18:34.574, Speaker A: Yeah, I just meant in the 90s it was updating.
00:18:34.622 - 00:19:16.026, Speaker C: Like, oh, sure, everyone does crazy shit in their 20s, but I think it really comes down to an incentive issue. Right. If you look at the clients today, and actually, to your point around get, if you remember back in the day, there was also parody, right? And the idea with parody is that we're going to be more sort of for profit, red hat fedora kind of style, and therefore there was sort of a profit motive to it. There's maybe a story around modernization these days. All of the clients are basically sort of research or grant driven development. There's ref, which is coming out of paradigm, so it is possible to build a new client, but there's not really a profit motive. There's not really a business incentive.
00:19:16.026 - 00:19:44.120, Speaker C: There's not really anything sort of self serving around developing it. And so I think, therefore, there isn't really a desire or movement or any reason to, hey, have a competitive marketplace of these things. These are kind of like R and d projects, almost sort of like nonprofits in a way. And so it's like, how are you going to incentivize people to build new clients and run new clients if there isn't really any sort of marketplace for these kinds of things?
00:19:45.450 - 00:20:20.750, Speaker B: So I will gently take the other side of that. Although I'm somewhat sympathetic to the arguments you guys have levied, I think if you look at the execution layer, it kind of looks like, okay, well, clearly this is impossible, right? There's just naturally going to be centralization in the most robust version of the ethereum client, which is geth. And the end. If you look at the consensus layer, it's kind of the existence proof that's not necessarily true. The consensus layer is pretty dispersed. Like, there is not a lot of concentration in a single client. And Tarun, you're making the point that look something that is actually mission critical.
00:20:20.750 - 00:20:44.826, Speaker B: You have one implementation, and that's the implementation. And that's the view that bitcoin has always taken, is that, look, bitcoin core is the spec for bitcoin. There is no external thing that is bitcoin. There's just bitcoin core. Literally, this piece of code is the spec for the protocol. Ethereum does not take that view. And I think in a way that is, in some ways, you could say it slows it down in other ways.
00:20:44.826 - 00:20:46.490, Speaker B: You could say. I think it makes it more robust.
00:20:46.990 - 00:21:04.670, Speaker A: To be fair, I think bitcoin is a weird example nowadays because now people are making all these custom clients for ordinal support and l two s and stuff. Bitcoin actually, I think is evolving more quickly than you think right now. But I agree, like the three year ago vision.
00:21:06.370 - 00:21:10.642, Speaker B: It'S sort of like Linux in the way you're describing, right, where core is the kernel and you can kind of add.
00:21:10.696 - 00:21:18.050, Speaker A: Yeah, but I think these add ons now, thanks to ordinals, have been getting seeping in more into innards, if.
00:21:18.120 - 00:21:24.230, Speaker B: True, true. But I mean, RSK was doing that back in the day and there's all sorts of other stuff, like lightning is kind of this weird.
00:21:24.650 - 00:21:44.810, Speaker A: Think of it as the thing that's worth remembering is the first ethereum client was neither in rust nor in go. It was C plus plus Ethereum, written by Gavin Wood. And it's very important to remember that Ethereum itself flipped its client pretty quickly. And that's a historical vestige that's quite different than bitcoin.
00:21:45.230 - 00:22:25.542, Speaker B: Right. And there was also Ethereum J, which was the, I think what Tron originally was a fork of Ethereum J, which is the Java version. So there have been many ethereum clients over the years and they've come and gone. But I guess the point that I'm trying to make here is that actually, I thought the analogy you were making like, okay, mission critical software means there's one implementation. The one canonical example that I actually remember learning about when I first got into crypto was space shuttles. Space shuttles actually do precisely this, which is that they have, I think it was four implementations by different programmers of the same mission critical code. Because a space shuttle, it's like if there's a bug, at least especially back in the day when you can't do over the air updates, if there's a bug, it's like game over the space shuttle crap.
00:22:25.542 - 00:23:03.586, Speaker B: There's billions of dollars down the toilet. And so they have four implementations of the same code or the same program, and they run byzantine fault tolerance over those, like a byzantine fault tolerant algorithm over those four implementations of the same code. Because of course there can be bugs, there can be cosmic rays flipping bits and all sorts of craziness. And that's what mission critical comes from. Space shuttles. That's where the term comes from. And that is the place where, yes, you actually do want this reimplementation of code because it's very, very important that this thing always works now in normal software, right? If I'm just running like an operating.
00:23:03.618 - 00:23:29.600, Speaker A: System, this is why I left. The trapdoor of like, the academic exercise of using it is good. I think in production it's kind of annoying. I think the thing about space shuttles that's very nice is they have a finite lifetime, so you need it to work for this uturn lifetime. I think the problem with blockchains is they have this perpetual nature that makes the running multiple versions a lot more hairy to deal with.
00:23:31.410 - 00:23:56.514, Speaker B: Yes, it's true. And obviously Ethereum moves pretty slowly. I mean, obviously bitcoin moves slowly too. So maybe it's more a function of age than of the fact that there are multiple clients. But you can tell Ethereum development moves very slowly because of all the coordination that's required across all of the client development. That said, that's just kind of where Ethereum's at. I would never recommend Solana or any new generation of blockchain.
00:23:56.514 - 00:24:30.546, Speaker B: Start by saying, great, let's go multi client and support multiple clients simultaneously. Although Solana is trying to do that a little bit with fire dancer, but they're still saying, look, we're not going to slow down for fire dancer to catch up, we're just going to keep iterating and keep improving the tech. And I think that's right when you are a startup, when you are in sort of first flush as a new blockchain, trying to get your footing. But I think where ethereum's at, I think it's possible. And you're seeing it right now. Like there was this tweet thread from, who's the guy who yelled at Coinbase and was like, I'm pulling out all.
00:24:30.568 - 00:24:32.210, Speaker A: My stake from Rocket.
00:24:33.510 - 00:24:58.160, Speaker B: No, let me see who it was. Whatever. I don't remember. There was some guy who was like, hey, I'm pulling out my money from Coinbase because I don't like the fact that Coinbase is all running on Geth. And Brian Armstrong replied and said, hey, we're going to look into this and fix it and make Coinbase cloud go multi client and make sure that we're staking through different validators.
00:24:58.660 - 00:24:59.600, Speaker C: Investor.
00:25:00.100 - 00:25:33.208, Speaker B: DT investor. Yeah, exactly. DC investor. So now look, it's one guy. I don't know that there's this flood of people who are going to be following in his footsteps, but I think it's relatively easy for a small number of players to just kind of feel the zeal that's coming at them and decide to change their minds the same way that in bitcoin mining pools, people just got mad on Twitter and then the things changed even though the incentives weren't really there. Right, we know, look, the bug was not in Geth, the bug was in Nethermind, which is a minority client. There was a bug previously in Besu, which is another minority client.
00:25:33.208 - 00:26:03.190, Speaker B: Most of the bugs are in the minority clients. So the reason why Geth is dominant is not because people are lazy, it's because people are rational, is that they know this is the most battle tested and the oldest of the realistic clients that one can use. So people are smart, people are maximizing their own profit. But if consumers can change the incentives and say, hey, it's really important to me that you actually lower your usage of the majority client, it's kind of like the ethereum version of ESG. I think it can work and I think it's already starting to work.
00:26:09.480 - 00:26:50.916, Speaker A: It's not that I don't think it's possible, it's that I think investors have never fucking done DevOps in their life and had to do an on call. And all I gotta say is fuck you people who've never had to do that because it is very stressful. Let me tell you, in many different contexts, it's like the worst. And it's usually just some when token asshole yelling at Peter s one of the main maintainers of about shit like this. And I'm like, I don't know how that guy does the thankless job. Not only does he have to deal with the emergency stuff, he has to deal with these fucking asshole airdrop farmers. It is kind of like a very thankless thing to work on.
00:26:50.916 - 00:26:51.780, Speaker A: Bitcoin.
00:26:52.120 - 00:26:52.944, Speaker B: On Ethereum?
00:26:52.992 - 00:27:16.750, Speaker A: No, sorry. In his Twitter, if you ever see him complaining about tokens, the airdrop farmers will just be like giving him shit. And you're like, you wouldn't have any airdrops without this guy. They're just so dumb. It's actually impressively idiotic in some ways.
00:27:17.920 - 00:27:53.832, Speaker C: Yeah, I mean, look, it's obviously technically possible to have client diversity. I think the point is it's not natural, it's very inefficient, and you have to sort of force it and be willing to eat the inefficiency. You're buying a ton of tail risk insurance, which you're basically never going to cash in. And so you're like, hey, this is just something that we're going to eat. And even the consensus client example like prism and lighthouse are pretty much a duopoly. So it's not that actually diverse. And that was also a very concerted effort with ETH too, as you said, where large grants from the Ethereum foundation from consensus went out to build these things.
00:27:53.832 - 00:28:26.260, Speaker C: If you went through the ETH staking flow on ethereum.org, they pushed you to choose a more diverse client. It was a very concerted effort. And so I think if there is willingness to basically burn cash for the sake of sort of this tailwind insurance, then yes, you absolutely can do it. My question is more how can you make this sort of self reinforcing? How can you make the market desire client diversity? How can you make entrepreneurs want to go out and make a brand new client? I don't really know what that answer looks like today. If you have an answer for that, then I think you kind of have a self sustaining solution.
00:28:28.680 - 00:28:35.460, Speaker B: No, that's a fair point. I don't know that you're ever going to get an economic mechanism to make this kind of thing happen.
00:28:35.530 - 00:28:35.764, Speaker A: Right?
00:28:35.802 - 00:29:13.810, Speaker B: And blockchains, I think they are about tail risk because it's about being like the whole point of blockchain. It's up all the time, it's usable all the time. And the one thing that could really shatter Ethereum's story is that it fails in a catastrophic way. At the same time, look, it's almost certainly the case that there are bugs in Geth. There's no way that there are zero bugs in geth. I mean, we've had bugs in OpensSL and the Linux kernel and things that have been around much, much longer than Geth and have had many fewer eyeballs on them over that period of time. So there's just no way that there's literally zero and we'll never find another bug in geth ever again.
00:29:13.810 - 00:29:53.858, Speaker B: So there will be bugs, and at some point we are going to have a bug that ends up causing some kind of consensus failure. It will just happen. If it's not a chain split, then some kind of massive downtime for Ethereum. And so I think it's a matter of creating the resilience to, I think, what is more or less inevitable at the expense of, yeah, we're going to eat more complexity and we're going to move slower in the meantime. But I don't think Ethereum at this point is about being the fastest to iterate or to move. I think it's probably wrong for Ethereum to prioritize that at this point in its lifecycle. Yeah, maybe.
00:29:53.964 - 00:30:24.794, Speaker A: But I think that's also, there's a sort of bandit problem type of thing here. I have a fixed amount of resources. I have a bunch of different places I can spend them. I could spend them on having ten clients, or I could spend them on having one client, but get dank sharding working, or 48, 44. And from an engineering organization standpoint, I think it's a different trade off point on the trade off surface.
00:30:24.842 - 00:30:25.438, Speaker C: Right.
00:30:25.604 - 00:31:22.366, Speaker A: The Salana version of this is kind of interesting, because they somehow outsourced clients to other people, which is a bizarro. Well, I mean, yes, but they also have jeto, they also have the forks of the Solana labs validator that I think Solana is actually much more diverse than you think. All the people doing SVM roll ups also have kind of client forks. It is starting to look like Ethereum's ecosystem, probably the only l one that has that many client implementations. But I just think you have to remember, whenever people are complaining about like, oh, my feature didn't make it into mainnet, or, why do we have no bandwidth on L two s? And we need alt da layers. All of that stuff stems from the fact that we split the fixed engineering pie, fixed budget across many places. And look, it's a values judgment as community made that values.
00:31:22.398 - 00:31:35.820, Speaker B: But hold on, I'm just pointing out for Solana. Yeah, for Solana. My understanding, I mean, correct me if I'm wrong, but my understanding is like, everything is derived from the Solana core client, and they added little things on the same way that people have added stuff on again. Oh, no, it's all still the same.
00:31:36.670 - 00:31:37.900, Speaker A: So many little.
00:31:42.110 - 00:31:43.834, Speaker B: But fire dancer is an ad.
00:31:43.872 - 00:31:45.706, Speaker A: Totally different. Fire dancer and C plus.
00:31:45.728 - 00:32:00.818, Speaker B: Yeah, fire dancer. Fire dancers is a ground of rewrite, but fire dancer, didn't they constrain their initial launch to say, like, look, we actually, a bunch of the stuff, we're just going to run the original code, and then we're just going to add modules over time, because the ground up rewrite was just way too big for.
00:32:00.824 - 00:32:08.690, Speaker A: Them to actually, they changed everything. Even the erasure codes are completely rewritten. I think you should.
00:32:08.760 - 00:32:09.780, Speaker B: In the V one.
00:32:10.150 - 00:32:27.366, Speaker A: Yeah, I mean, the read solvent implementation there is completely different, at least from what I see in their GitHub bit, which is my north star on this. I think you should really consider fire dancer a complete. It's like wrath.
00:32:27.398 - 00:32:50.286, Speaker B: And that's my, that's my assumption, is that they want to eventually get to a complete rewrite where they jettison all the old code. But my understanding was that they were basically like, look, we're going to bite off something that we can actually chew initially, as opposed to waiting until we have the entire client rewritten. But, yeah, look, fair point, I understand. Obviously, fire dancer is not live well.
00:32:50.308 - 00:32:52.470, Speaker D: I just think there's a lot of willingness.
00:32:52.570 - 00:32:56.382, Speaker A: They chose different engineering choices.
00:32:56.446 - 00:32:56.674, Speaker B: Right?
00:32:56.712 - 00:33:18.540, Speaker A: Like fire dancer chose particular optimizations they want to do. They're going to rewrite it, whatever. But they didn't hold up hard fork inclusion. Right. It wasn't like they had engineering resources that would have gone towards adding new features for the next hard fork into maintaining another client. Right. Whereas in Ethereum, I do think that's actually true.
00:33:18.540 - 00:34:25.694, Speaker A: I don't think the pool of people working on clients is growing anywhere near as fast as, like, transaction demand is growing and you have this finite resource and you have to allocate it, and you chose an allocation as a community to spread it across clients. But you could have imagined an alternative universe where all these features that everyone talks about, which aren't implemented, actually are already in the chain, because instead of rewriting the client x times, you actually added the feature. So there's also, what are all these features that you're, I mean, dank sharding and all of the data availability related stuff? Are you kidding me? There's tens of billions of dollars of market cap that have arisen because of how slow this is. Never forget that. Right? Literally, because people just didn't want to invest time. So it is a management thing, it's an organizational behavior thing of like, we have finite resources and we're treating them as if they're not finite, but they actually are. And so what's the opportunity cost? Well, it's this thing, and then.
00:34:25.694 - 00:34:28.480, Speaker A: So now we have a DA layer war.
00:34:30.050 - 00:35:21.554, Speaker B: So actually, maybe there's a good transition to talk about Denkun. So Denkun is the name for the upgrade that is going to be actually shipping protodank sharding. So protodank sharding. For those who are not familiar, long story short, this is essentially what's going to implement EIP 4844, which is the blob storage. So essentially what this is going to do is right now, if you're a roll up and you want to post some data to Ethereum, you have to pay a lot of money. And basically you're taking up the same space that every other computation in Ethereum is taking up of writing volatile storage onto Ethereum. In a proto dank sharding world, there's going to be a separate lane that is only going to be for data availability, basically, meaning it's going to be short term storage where you can just dump some blob of data, arbitrary data.
00:35:21.554 - 00:36:05.214, Speaker B: Ethereum doesn't care what you're putting there, it's just anything, and it's stored in retrieval for a short amount of time. Essentially, this is more or less ready to go. I think people are projecting right now maybe like end of Q one. I think this is projected to potentially hit mainet. There was a testnet trial run that was taking place on Gurley, apparently didn't go very well, and so they're now kind of going back to the drawing board. That may end up delaying things, but this is projected to lower the data availability costs for roll ups on Ethereum significantly. Now that being said, from what I've read, the expectation for the throughput, meaning the total amount of data that's going to be writable to the blob storage on Ethereum, is something on the order of 0.6
00:36:05.214 - 00:36:41.770, Speaker B: megabytes per second, something like that. We don't know the exact numbers right now, but it's not huge relative to what people are talking about. For data availability layers like Celestia or avail or eigenda, those are projected to be more in like the many megabytes per second of total data throughput that they can withstand. Ethereum is going to be relatively low, and so there's a lot of projection that even in a protodank sharding world, although it will lower costs for roll up significantly, the total demand for DA is so high that we're still going to have to use external DA in order to withstand all the demand for data availability.
00:36:42.110 - 00:36:57.760, Speaker A: Usually you are the person who forces everyone to stop and define some terms, but I'm going to flip the script on you and make you define data availability for the listener. I used it first, but I'm going to still make you do it.
00:36:58.130 - 00:37:38.186, Speaker B: Okay, thank you. No, good shout. So, data availability, it's the new hot term that everybody's talking about. Celestia, eigenda and avail are all data availability layers. Data availability is basically the very simple explanation is that there are certain kinds of storage that are not needed for long term storage, but basically short term storage or medium term storage. So for example, for roll ups, especially optimistic roll ups, oftentimes you have what's called this challenge period where you need to be able to see the data that has been committed to this layer two for up to two weeks or up to a week or two weeks, or whatever. Different roll ups parameterize it differently.
00:37:38.186 - 00:38:38.730, Speaker B: And so data availability is a mechanism to prove this data has been stored and it's available for up to some short period of time. It's not forever, like a network like Filecoin or rweave, what's the infinite story? Rweave, right, or rweave, which claims that it stores data forever, or Filecoin, which stores data up to some long contract period, but instead it's like, hey, this data is going to be available for X period of time, and then no bets are off on whether or not this data will continue to be available. And the replication and the availability is very important to roll ups in particular. So almost everybody, when we talk about data availability, we're mostly pointing at roll ups. Almost nobody else really has this data access pattern. But roll ups are the big story for Ethereum scaling. And that's why data availability has become such an important idea that many different teams are trying to add on to the capacity of Ethereum in a proto dank sharding world to give it more data availability capacity.
00:38:38.730 - 00:39:00.982, Speaker B: So what do you guys think is going to happen when we get data availability increases? A lot of people are now projecting that because of the total demand and the total number of roll ups increasing so much that we may actually not even get the discount in DA prices that people are projecting with protodank sharding, because basically as soon as we get more capacity, demand just increases. Fill it up.
00:39:01.036 - 00:39:04.920, Speaker A: So do you know what braces paradox is?
00:39:06.910 - 00:39:08.300, Speaker B: Oh, is that the.
00:39:09.790 - 00:39:32.740, Speaker A: Yes, exactly. It's one where when you add a road, you actually increase congestion in certain networks under certain types of flows. I feel like this is a nice apt version of this, where sometimes you build a road and actually all you do is increase congestion because everyone wants to take the fastest road or the safest road or whatever, and so they all just kind of.
00:39:35.030 - 00:39:49.682, Speaker B: Keep doing that. On the face of it, it seems implausible today because almost everyone is using the main road. Ethereum as da yeah, everyone is using the main road. Right. So I think braces paradox only works if there's already multiple roads.
00:39:49.746 - 00:40:17.200, Speaker A: Yeah, you need roads of different amounts of traffic. Like you need roads that are highways and that they kind of have constant speed. That doesn't, the speed it takes you doesn't depend on how many other people are on the road versus single lane roads where speed you go at depends on. But you could argue that a lot of the alternative DA layers, now, in a world where you have multiple of them, you might actually start having this kind of brace like effect.
00:40:17.890 - 00:40:29.310, Speaker D: Well, what's going to happen is the newest data availability layer that people get excited about will be the one with this paradox because everyone's going to race to whichever layer.
00:40:29.390 - 00:40:38.130, Speaker A: Yeah, I kind of agree with that. Well, they're all fighting to be the layer. Everyone wants to be the brace paradox. You want to be the brace data availability.
00:40:38.290 - 00:40:45.820, Speaker D: Right. That's the paradox. It's a double paradox is that it's going to happen because the road itself wants to happen.
00:40:47.710 - 00:41:11.006, Speaker B: Well, data availability is kind of weird because it is in a sense like a B to b thing in that consumers don't know where their data is being made available because they don't necessarily care. Yeah, exactly. Would that not be an indication that actually the protocols themselves are likely to be pretty rational and sort of allocate efficiently across all the roads, so to speak?
00:41:11.028 - 00:41:50.640, Speaker A: I mean, I think we're seeing certain roll ups or like people who have moved some of their applications to their own roll up, like Avo announced today they're using Celestia. Avo is like a large perpetuals, decentralized perpetuals exchange. That disclaimer, I think everyone in this shows investor in. And I think there's Lyra finance a couple of weeks ago. So you're starting to see people who have real users and are paying the DA costs suddenly be like, wait, I don't want to pay the DA costs anymore. And I think the market is starting to flip into this fee mindset now. I was talking to someone today.
00:41:50.640 - 00:42:50.202, Speaker A: Even if the DA layers lower the fees to Solana like levels for a lot of these applications, I think that's the goal in some ways of, if we zoom out and you're listening to the show and you're like, who the fuck cares about this data storage thing? Why is ephemeral storage versus long term? Who cares? All you need to think about is this allows you to lower fees in some certain way because it turns out these data storage fees are quite high if you make them perpetual, but if you time bound them, you can make them cheaper. And I still don't think that you can say that roll up UX is like, roll ups are like one to one with Salana just because the fees are the same, because I really think the UX difference is still not very nontrivial between the two. I mean, how do you feel when you, do you feel like if you went to a roll up to use an application and the fee went down 100 x, you'd be like, okay, great, I'm going to stay here versus moving to a cheaper.
00:42:50.346 - 00:43:05.558, Speaker B: Yeah, I don't know how much. I mean, this is actually also an interesting argument. I think there's like, if the fee is low, it doesn't really change the UX, at least not for me. If the fee is like $0.10 versus, like a 10th of a cent, I.
00:43:05.564 - 00:43:17.930, Speaker A: Think for meme coin traders, that's the only place where it matters, because it's like people who are like, I have $10. I want to buy ten different meme coins right now. It's like, okay, then you're very fee sensitive.
00:43:18.910 - 00:43:45.178, Speaker B: Yes, but I mean, if you look at finance smart chain or you look at Polygon, fees are not. I don't think there's a lot of evidence that you need to be that basically demand is responsive to fractions of a fraction of a cent. I think maybe there's a theory that, oh, the guy with $10, he can do all these things on Salana, he can't do on finance smart chain. But I just don't think there's a lot of actual evidence for that story being a driver of behavior.
00:43:45.274 - 00:44:02.134, Speaker A: Well, I'm just saying that this is something I feel like I hear all the time that people are saying. It's like, oh, like, are like Solana, then we will compete for the meme. Coins don't feel like that's true to me, but I'm willing to be wrong.
00:44:02.172 - 00:44:04.390, Speaker B: It doesn't feel like that's true to me either. I don't know. Tom, what do you think?
00:44:04.460 - 00:44:32.270, Speaker C: Oh, I was going to say, I mean, I think sort of like the whole log versus linear wealth debate. I think there's sort of like a inverse log cost debate here thing, too, where I think you're right, if you go from, I think, a 10th of a cent to 100th of a percent or 1000th of a. Like, it's actually so negligible at that point. And I think even we get this argument, too, around latency as well. People say, okay, Salana, you have a few hundred millisecond block times versus 1 second confirmation time on a roll up.
00:44:32.420 - 00:44:32.878, Speaker B: Sure.
00:44:32.964 - 00:45:12.378, Speaker C: Maybe if you're a high frequency trader, maybe you're trying to do Nasdaq on chain. That is a meaningful difference. For people who are trying to send USDT back and forth to their friends or mint an NFT, that is really not a meaningful difference. And so I just find it hard to believe that that is going to be where people are sort of making their decision. I think it's going to be much more around where do developers want to actually build their next application? Is this a place where they feel like they can find users and they can find capital and they can find a great experience to build on top of. Again, I think that's more where Solana succeeds versus a roll up, is that it's simple, it's monolithic. You can come up and you can deploy.
00:45:12.378 - 00:45:42.358, Speaker C: But obviously, the downsides of the SVM, people having to bridge over having to find new users and capital. So I think in many respects, the cost of the tech are a very minor determiner of usage, and it's much more about sort of these other factors. As I go back to your fee question, there's actually a polymarket for the gas price per blob one month after EIP 4844. I don't know what one blob you.
00:45:42.364 - 00:45:43.240, Speaker A: Want to show us.
00:45:44.030 - 00:45:49.594, Speaker D: Yeah, I have not done the back of the envelope math to even grock the base.
00:45:49.632 - 00:45:51.340, Speaker B: Yeah, I didn't know what this means.
00:45:55.790 - 00:46:14.580, Speaker C: We actually are like one unit off from an average transaction or call data amount or storage size. But interesting. There are already a market here. I guess if listeners know what a blob corresponds to in terms of practical usage, I'd be curious to hear.
00:46:16.550 - 00:46:18.660, Speaker B: Okay, so none of us actually know what this means.
00:46:19.030 - 00:46:19.986, Speaker C: No, I guess not.
00:46:20.088 - 00:46:29.282, Speaker B: I'm glad we threw it up. Here is a roll up, settling one blob per. Yeah. So is it like one blob per block?
00:46:29.346 - 00:46:33.654, Speaker C: Okay. A blob is 128 temporary data.
00:46:33.772 - 00:46:35.060, Speaker A: Yeah, it's just 100.
00:46:35.550 - 00:46:36.346, Speaker B: Okay.
00:46:36.528 - 00:46:49.550, Speaker D: This doesn't seem that off. I mean, in this prediction market, it doesn't seem that off from vaguely what the costs are today in the status quo. I mean, looking at the upper bounds of like, 0.1 ether and stuff, to 0.1 ether.
00:46:51.650 - 00:46:52.698, Speaker A: No, that is cheaper.
00:46:52.714 - 00:46:53.322, Speaker D: It is cheaper.
00:46:53.386 - 00:46:57.034, Speaker C: Yeah. The market is pricing in a ten x reflection.
00:46:57.082 - 00:46:57.694, Speaker D: Effectively, yes.
00:46:57.732 - 00:46:58.442, Speaker B: All right.
00:46:58.596 - 00:47:31.098, Speaker D: Yeah, if it's 128K. Let me zoom out. Let me zoom out and look at this from first principles for a second. So I think data availability does lead to different types of applications fundamentally. And I think everyone's focused on like, oh, it leads to l two s being efficient. But I also think it could lead potentially to very different things. When you look at what is the cost of writing something to a blockchain, some data.
00:47:31.098 - 00:48:06.086, Speaker D: The reason it's so expensive is because you're not writing it to one computer, you're writing it to 200,000 computers and forever. That's like the notion that most people have about bitcoin or Ethereum. Data is crazy expensive because you're writing it all over the place and you're writing it in forever versus writing it all over the place for a short amount of time. That's way cheaper. Right. But it's still fundamentally, like crazy expensive because you're writing it all over the place. To write one hundred and twenty eight k of data to an S three bucket is nothing.
00:48:06.086 - 00:48:25.350, Speaker D: Right? It's free forever. So I think what happens is you start to innovate on the data availability products. Oh, it's not forever. It's for a week. It's for two weeks. It's for two minutes. You get different applications entirely.
00:48:25.350 - 00:49:10.940, Speaker D: I actually think crypto gaming actually might be a weird long term beneficiary of blobs and more transient storage in general. Just because if I'm making a video game, I don't need the data to persist for 20 years. I need it to persist for like, I don't know, maybe a couple of months in some sense, and maybe it just completely unlocks a new type of application there. And yeah, maybe there's a lot of on chain Nasdaq like trading that just doesn't function at all. But when it's more transient, it does function. And I'm curious to know what sort of, like, the use cases that erupt from this are, that aren't just like, oh, this was designed for l two s to post data that you'd need for exactly two weeks.
00:49:13.470 - 00:49:37.890, Speaker B: Yeah. So far, I don't think I've seen a single game. I don't think I've seen a single application claim to me that they're going to use DA for this alternate use case. That said, the further away you get from the more crypto native stuff of like DFI or layer twos or whatever, the less people even care about any of these concepts. They're like, oh, yeah. I mean, look, my game is already centralized, so I might as well just store all the shit myself.
00:49:38.040 - 00:49:43.400, Speaker A: There's a $15 billion market cap coin that says there's some amount of care.
00:49:45.210 - 00:49:47.094, Speaker B: A 15 billion market cap coin that.
00:49:47.132 - 00:49:50.950, Speaker A: Wait, what about Celestia care and these things? I'm saying, I'm just.
00:49:51.100 - 00:49:51.682, Speaker B: FTV.
00:49:51.746 - 00:49:52.214, Speaker A: Excuse me?
00:49:52.252 - 00:49:54.882, Speaker B: FTV. Let's not say market cap. FTV.
00:49:54.946 - 00:49:55.270, Speaker A: Sorry.
00:49:55.340 - 00:50:23.038, Speaker B: FTV. Okay. Market cap. Yeah, look. Yes. Okay. Here's the other thing I would say, and kind of going back to the previous point about performance, right? Because I want to continue this thread of, like, how much are people sensitive to fees? And also how much are people sensitive to latency, because I think this is also a big part of the story about rollups and about Solana and about why people are going to be moving away from Ethereum, Mainet and these traditional experiences.
00:50:23.134 - 00:50:34.820, Speaker A: I mean, this is also something, by the way, is unique to crypto. This like fee versus latency trade off in UX design. Right. If I made Robinhood or revolute, I don't really ever think about that. Right.
00:50:35.670 - 00:50:40.550, Speaker B: Well, you do in that you want to get as low as possible. Yeah, exactly. You make both zero. Yeah, exactly.
00:50:40.620 - 00:50:44.790, Speaker D: But the data is plentiful because you just store it on one server.
00:50:45.530 - 00:50:46.146, Speaker B: Oh, totally.
00:50:46.178 - 00:50:48.150, Speaker D: And you can do it unlimited scale.
00:50:48.230 - 00:51:10.394, Speaker B: I mean, ironically, I'm pretty sure that storing stuff on our weave, which is supposed to be forever, is cheaper than call date on Ethereum, which is supposed to be temporary. Right. I think the absolute externality is not how these things are being priced. It's just a market. And there's some constraints that are being set somewhat arbitrarily on why is Ethereum call data more expensive?
00:51:10.442 - 00:51:17.346, Speaker D: But the data on our weaver storage on our weave can't really do anything. There's no other applications that are composable with that data, really, at least to.
00:51:17.368 - 00:51:22.174, Speaker B: My current knowledge, there's no applications composable with call data. Right. Call data is transient.
00:51:22.222 - 00:51:42.010, Speaker D: Yeah, that's true. But on Ethereum and on Solana and all these places, the data is super valuable because it represents token balances and the transfer of those tokens. And it's like extremely valuable data, like storing like a photo or a movie or something like that. It's not as valuable.
00:51:43.230 - 00:52:30.534, Speaker A: I also think there's kind of this weird thing that I still have not been able to philosophically get around, which is like, philosophically blockchain started as append only, right? There's no notion of this delete transient behavior. Right. Of course, you eventually add that back on. But the history of computing has always been this kind of like just in time storage, just in time compute, right? Like that's how the cache hierarchy kind of means that whatever. You're not really a von Norman architecture computer in any sense of the word, in a modern computer. But it's never been clear to me what blockchains get from these types of caching optimizations. I think l two s are an example, but it's sort of a blockchain eating a blockchain.
00:52:30.534 - 00:52:53.810, Speaker A: It's not like a caching thing that without the caching, you would just never work. Right? Like l two s are working right now without blot space. They're just more expensive in some sense. So there's just kind of this weird thing to me where I haven't seen something that isn't just like, what's the use case of this particular thing? Another blockchain we haven't quite gotten.
00:52:55.750 - 00:53:03.534, Speaker B: That is true. That said, we love blockchains, especially on the show. We love blockchains. That's the best Christmas present is more blockchain.
00:53:03.582 - 00:53:05.490, Speaker D: Yeah, the chopping blockchain.
00:53:06.010 - 00:53:06.758, Speaker B: Yeah, exactly.
00:53:06.844 - 00:53:09.320, Speaker A: I'm just saying I would like to see some.
00:53:11.130 - 00:53:14.310, Speaker B: How could you? You're ruining.
00:53:15.290 - 00:53:26.394, Speaker A: Sorry, I'm sorry. I'm just saying it would be cool if to Robert's point of like, is there something else? Because, okay, yes, I agree.
00:53:26.512 - 00:53:27.130, Speaker D: What is there?
00:53:27.200 - 00:53:35.514, Speaker B: Tarun, you are in the wrong industry. If you're asking, is there something else, I think maybe you need to take a vacation, come back, renew your love of blockchain.
00:53:35.562 - 00:53:36.382, Speaker A: No, I love.
00:53:36.436 - 00:53:40.100, Speaker B: Personally, I think if there are more blockchains, that's fucking awesome.
00:53:40.550 - 00:54:33.662, Speaker A: I just think caching enabled a lot of things in operating systems, like window managers. Why do you have the UX that you have with having multiple windows? Caching helps a lot at a very basic level for that. That's like some application that was enabled, not just strictly like, oh, I could do more of this compute. And I just feel like somehow that is not obvious to me in a lot of these systems, like where that comes from, other than fee. Like the fee part I get, right. I honestly would say something like privy and embedded wallets is much better for user UX than this ten x fee reduction because it makes it feel closer to a web two app or Salana. And the fee reduction matters until some point, right? People aren't elastic like what we were just saying, right?
00:54:33.796 - 00:54:38.562, Speaker B: Yeah, but we're not anywhere near that point for something like Ethereum, right? Ethereum fees are crazy, I agree.
00:54:38.616 - 00:54:57.874, Speaker A: But now suppose we take the DA layers we made the fee Solana fees. I still think the marginal utility to the user actually goes up more from the privy style embedded wallet experience versus the fee beyond. Like there's some threshold at which they completely flip.
00:54:57.922 - 00:55:28.802, Speaker B: Right. But here's the point that I was going to make, is that l two s also enable a lot of this. Not necessarily, you don't need a privy style thing, but you just need the fact that l two s have these sequencers who basically run the chain, right. It's potentially even a centralized entity, although people want it to be decentralized sequencers over time. One of the advantages of these sequencers is that you can give people these optimistic confirmations instead of saying, okay, we're going to fully achieve consensus and do all this fancy shit. Instead. We're going to say, look, we're going to tell you thumbs up, you're in the blockchain even though you're not actually in the blockchain yet.
00:55:28.802 - 00:56:24.466, Speaker B: But I promise you, you'll be in the blockchain. And if you're not, you can at me and take some, I'll pay you some money. I'll give you a refund later if it turns out you're not in the blockchain. And this actually enables really great ux at even lower latencies than Salana, right? You can basically say like, look, the moment you ping my IP and I give you a checkmark, you're good. So that can get you down to like 100 millisecond latency or like more web two style latencies. I think the intermediated architecture where you have this optimistic layer in between yourself and the chain confirmation, I think this is going to be the direction that all blockchains go over time, or not all blockchains, but I should say all applications go over time, right? If you're a Dex, if you're a game, I'm not actually going to wait until the blockchain says yay or nay because, yeah, even if I'm a game, even if I'm on Salana, I don't want people to wait 400 milliseconds. That sucks.
00:56:24.466 - 00:56:29.494, Speaker B: No game would ever say great, we have to wait 400 milliseconds because the block time says so.
00:56:29.532 - 00:56:36.120, Speaker D: Well, it does ask the server very quickly, did you get the kill shot or not or whatever.
00:56:36.730 - 00:56:48.586, Speaker B: Exactly. But it doesn't wait 400 milliseconds to ask whether you got the kill shot, right. It needs super snappy latency and it used a lot of optimistic tricks to assume the answer is yes. And if the answer is no, then I go and revert.
00:56:48.698 - 00:57:03.522, Speaker A: This optimistic thing is effectively the same as in some ways what caches in a processor do, right? They optimistically store a cache line even if it doesn't know it needs to read it because it assumes there's some sequentiality and you'll get some benefit from that.
00:57:03.576 - 00:57:08.002, Speaker B: Well, it's more like the sort of super scalar processors, sure.
00:57:08.136 - 00:57:42.762, Speaker A: But to me there's still kind of this missing thing of like I open Phantom and I use salon applications and it's very responsive. I mean, they have problems with transactions not landing, they have tons of problems with spam. So let's ignore that. But the actual application usage is just so much easier onboarding for a new user than an L two. An L two, you kind of need an intermediary lending you money on the L two. Otherwise you have to go through the canonical bridge. It takes forever.
00:57:42.762 - 00:57:48.366, Speaker A: You don't have the same onboarding ux either, I feel like. And that's something I've been thinking.
00:57:48.388 - 00:57:52.814, Speaker C: I disagree. There are exchanges that will give you a direct deposit on an L two.
00:57:52.932 - 00:57:56.146, Speaker A: Going to base is easy. Going to base looks nice.
00:57:56.248 - 00:57:57.746, Speaker C: This is like a very like on.
00:57:57.768 - 00:58:00.814, Speaker B: Finance, it's like almost every l two, they support direct withdrawals.
00:58:00.942 - 00:58:25.180, Speaker C: Yeah, I guess I was going to say, imagine this is like a twist on chinese room argument. You're sending transactions into a box and on the outside they say, hey, transaction was confirmed. Does it matter if it's just a single server sitting somewhere that's actually pausing all the transactions or it's the entire Solana blockchain going through consensus practically not. Especially if the end result is going to get you to the same point several days down the line.
00:58:25.790 - 00:58:42.400, Speaker A: Yeah, I just think somehow features that improve UX seem to never get any priority in these roadmaps. And again, maybe we're back to where we started of like, hey, we have fixed engineering budget, maybe we shouldn't spend it on duplicating the thing more than three times.
00:58:44.550 - 00:59:08.090, Speaker B: Going back to Vitalik's post about cypherpunk values, I think it is really like, yes, look, you're totally right. And obviously four of us are investors and we care a lot about creating great products as opposed to just great protocols. But Ethereum is Ethereum because of the values that it espouses. For sure. We're not focused on UX. The UX of Ethereum is shit.
00:59:09.070 - 00:59:10.620, Speaker D: No, it's like C plus.
00:59:12.670 - 00:59:25.630, Speaker B: Okay, well that's. I mean, I don't know. For a startup that's shit, right? From the perspective of product building. And bitcoin is even worse. Yeah, and bitcoin, it's like, yeah, yes, you're right, it's bad. And it's going to stay bad forever. God bless bitcoin.
00:59:27.010 - 00:59:42.126, Speaker A: Well, that I actually am I would be willing to bet against on the next chopping block. I think the bitcoin roll ups, bitcoin roll up world really kind of interesting lately.
00:59:42.238 - 00:59:45.138, Speaker B: Okay, all right, interesting. Maybe we'll have to revisit.
00:59:45.234 - 01:00:13.182, Speaker A: But I guess to me it's just more like I want to kind of feel like the L two progress is more than just fees because I get the fees are important, but I think the fees are not linearly elastic it's not like I decrease the fees. Ten X, I get ten X more utility for a user. And I somehow think that keeps just being completely missed in ways that annoy me when I try to use some products.
01:00:13.316 - 01:00:17.758, Speaker C: Yeah, there's definitely diminishing marginal utility for reducing fees, but we're not there yet.
01:00:17.844 - 01:00:18.190, Speaker A: Right.
01:00:18.260 - 01:00:23.070, Speaker C: We can still reduce and you will get a much better ux.
01:00:23.490 - 01:00:45.830, Speaker B: Yeah. Yeah. I think that gap is between Solana and the roll ups is where. Or like Salana and Polygon. Right. That's where there is this just inelasticity where nobody really cares if it's like a 10th of a cent or a thousandth of a cent, but people really, really do care between, like, it's $2 to do a swap versus it's two cent to do a swap. I think there's a lot of elasticity in that gap.
01:00:45.830 - 01:00:58.422, Speaker B: Anyway, we're up on time. We'll be back next week. I'm sure there's going to be no more ETF conversations at all in any way. So look forward to for the record block.
01:00:58.486 - 01:01:06.442, Speaker A: I feel like somehow someone on the Internet will interpret what I said as being a Solana shill. So I want to let the record be straight.
01:01:06.506 - 01:01:07.950, Speaker B: Are you not a Solana shill?
01:01:08.850 - 01:01:44.074, Speaker A: I think there's duality where both ecosystems have their right, and using products in both places, it just gives you a lot more insight into. There are things they could learn from each other, but instead, everyone's just constantly beating each other up. And I think the code bases the products. If you use those and read the code, there's a lot of lessons that could be learned. And somehow I just think in ETH, this obsession with optimizing DA, I feel like at some point, the returns to that are going to zero. Right. And so we need to do something else.
01:01:44.074 - 01:01:50.982, Speaker A: And I think that's why people are excited about restaking, because it has, like, yes, there's da, but then there's more. Right?
01:01:51.136 - 01:02:02.300, Speaker B: I don't know, it sounds like something a Solana shill would say. All right. With that. Thank you for giving us last word, Tarun. We're going to sign off. Thank you, everybody.
