00:00:00.330 - 00:00:02.474, Speaker A: Not a dividend, it's a tale of Tucson.
00:00:02.522 - 00:00:05.162, Speaker B: Now your losses are on someone else's balance sheet.
00:00:05.226 - 00:00:07.626, Speaker C: Generally speaking, airdrops are kind of pointless anyways.
00:00:07.738 - 00:00:27.042, Speaker B: Some unnamed trading firms who are very involved. D Five protocols are the antidote to this problem. Hello, everybody, welcome to the chopping block. Every couple weeks, the four of us get together and give the industry insider's perspective on the crypto topics of the day. So, quick intros. First. You've got the DeFi maven and master of memes.
00:00:27.042 - 00:00:59.742, Speaker B: Next, we've got Tarun, the gigabrain and grandpuba at Gauntlet. Then today special guest, we've got Lawrence, the smart contract cyber sleuth. And then you got Myself, a massive the head Hype man at Dragonfly. So we are early stage investors in crypto, but I want to caveat that nothing we say here is investment advice, legal advice or even life advice. Please see Choppingblock at XYZ for more disclosures. Lawrence, welcome to the show. We have you here in somewhat inauspicious circumstances because there's been a lot of mayhem going on in DeFi and we thought you were just the guy to help us decipher everything that's going on.
00:00:59.796 - 00:01:04.250, Speaker D: I'm not sure there's been a day in this quarter that would qualify as an auspicious day to appear on a podcast.
00:01:04.410 - 00:01:11.380, Speaker B: To be honest with you. There was one day when ripple went up a lot that I thought was the rest of them have been pretty.
00:01:11.830 - 00:01:26.690, Speaker A: You know, I think for the audience who might not know, lawrence himself has dealt with creating a protocol that has had a attack. And so maybe a bit of history on your experience would be good for the listeners. Edification.
00:01:26.850 - 00:02:05.570, Speaker D: Yeah, I'm happy to talk about that. So, in 2001, I worked as a contributor to a protocol called Indexed Finance. The idea was there was that you could model like, index funds using Balancer LPs or fork of Balancer LPs. They were attacked in October of 2021 using it was a flash loan attack combined with some overflowing of some sushi tokens into a particular pool. Honestly, it's been a year and a half now and the details are starting to slip from me. But all this to say, I know what it's like to be on the other side of that and to kind of pick through things as they happen. I wouldn't wish it on anyone.
00:02:05.720 - 00:02:14.040, Speaker C: And now you've been, I think, giving talks about sort of the state of the art when it comes to white hatting. And you're working on your own new project now, correct?
00:02:14.410 - 00:02:38.698, Speaker D: Yes. It turns out my bit last year, ETCC, was a rough overview of the attacks that had happened. I think we'd had like over 50 attacks that had appeared. Like last year was a particularly bad one for DFI hacks and Bridges in particular. And this one seems to be a lot more muted. And it had been commented on Twitter that it seemed that the pace had slowed down a bit. So people are starting to look into slightly more esoteric places, which we will get to over the course of this chat.
00:02:38.698 - 00:02:44.702, Speaker D: But, yeah, I never thought that my bit would be the attack to becomes the commentator, but here we are.
00:02:44.836 - 00:03:33.034, Speaker B: Well, look, I think it's a line of work that you're going to be able to make some good money in this industry for quite a while, as long as these smart contracts keep getting hacked. So let's maybe jump into it because I think actually there's a lot of different angles to this story, and it's one that touches on different stories that we've explored through previous episodes of The Chopping Block. So for those of you who are not aware, one of the largest on chain protocols in DeFi is called Curve. So it's an AMM. It's an automated market maker that basically allows you to trade assets that are tightly pegged against each other, most commonly trading stablecoins. So what happened over the weekend was that there was a hack of Curve, and this hack particularly targeted these very old pools that were all deployed, I think, a couple of years ago. One of them was jpegged.
00:03:33.034 - 00:04:01.094, Speaker B: PE, metronome se and Alchemyx's al ETH. So these three pools in particular, in total, it was on the order of about $40 million in total that were hacked. These were all third party pools. So Curve allows you to have third parties deploy certain pools of their own configuration. Then there are kind of the core pools of the three pool. And whatnot that those were not affected by this. And particularly the reason why these pools were affected is that they all used an old version of Viper.
00:04:01.094 - 00:05:01.274, Speaker B: So Viper, for those of you who are not aware, viper is a smart contract language that's written to be a competitor to Solidity, that has more Python like syntax, which is a little bit different than Solidity, which is kind of more JavaScript esque type language. And so this older version, now, newer versions, actually, all of Curve is actually written in Viper, but newer versions of Viper do not have this bug. It was fixed, I believe, in 2011 or something. So the rest of Curve is not vulnerable to this bug, but these older versions were. So this bug freaked people out because Curve is one of the most well known, longest standing stalwart protocols in DeFi, and is actually one of the largest protocols in DeFi by TVL. At the time of the bug, it had about $3 billion in total assets in Curve. And in large part as a result of the panic that set in after people realized this bug took place, half of all the capital in Curve has pulled out.
00:05:01.274 - 00:05:39.558, Speaker B: Curve is now down almost 50% of all of the assets in Curve, meaning $1.5 billion was withdrawn from Curve over the last call. It 48 ish hours. Let me pause there because I think for a lot of folks, they may not understand the contours of what it means when to say that there was a bug in a smart contract language or in a compiler. A lot of people have been pointing fingers and saying, oh my God, how did Curve mess this up? Why are these people asleep at the wheel? Because this bug was a re entrance bug. Re entrancy has a very long history in crypto as being famously, the bug that took down the dow. It's a bug that keeps rearing its head over and over again.
00:05:39.558 - 00:05:49.578, Speaker B: So, Lawrence, could you explain for us, one, help us understand how Viper and this bug fits into it and what people mean by reentrancy. Can you walk through that for us?
00:05:49.744 - 00:06:48.320, Speaker D: I think there's probably going to be better resources than me to talk about the nature of what reentrancy is, but basically kind of re entering a function more than once in the same call. I think this one's particularly interesting because, as you say yourself, right, when people talk about reenterrancy being a root cause for hacks, it's very common, right? It stretches back five years, six years, and this is for the most part, if you're dealing with topics, modern approaches for things, it's a solved problem in this particular instance. So, as you mentioned, curve is written in Viper, and there are three particular versions of the Viper release, I think 215, 216, and three, which had an issue in the way that one of the most common ways of preventing reentrancy is to just have a modifier that's just reentrancy lock, that just says, I'm executing a bunch of code. There is no more reentrancy allowed here. You can't reenter into things for the most part. If you rely on that, then that's an assumption that you make and you're fine. You go in, you execute code, and then you're out.
00:06:48.320 - 00:07:45.562, Speaker D: The way that it looked on a much lower level for Viper here in these three particular versions is that the storage slot, the part in the smart contract that looks at whether or not you're in a lock or not, was reading and writing was reading from the wrong place. So it would say, here's where I'm storing my status, and then I'm reading somewhere else to look and go, this is am I in a lock or not? And your answer would always be no, because you're not looking at the place that says temporarily, yes. This was fixed in Viper 3.1, which was released, I think, December 2021. So this is a zero day that's lived and died two years ago. It's ancient history in crypto terms. The part about it that some people are starting to point some fingers about, I think, wrongly, in my opinion, is that when it was fixed, the way that it was dealt with was fix allocation of unused storage slots in the releases.
00:07:45.562 - 00:08:29.518, Speaker D: It didn't have a flashing highlight that said, hey, there's a bug here, there's something that needs to be dealt with and reach out to people. And you can kind of do that for Curve because it's a smaller alternative language. For the EVM, if it was something in Solidity, for example, you would have a much harder time because you'd have to reach out to everyone. For Viper, you've got Curve and you've got Yearn and there's a couple of forks. Of course, if you're just reading the release notes and you see there's no urgent flag, then you go, okay, well that's fine, I don't need to upgrade. And for the most part, if you're writing smart contracts and deploying them, you don't necessarily want to push to redeploy things or upgrade them to the most recent language version of your compiler anyway because they're bleeding edge. There might be things that haven't been discovered yet.
00:08:29.518 - 00:09:32.370, Speaker D: There's a couple of strange qualitative questions that come around when things like this happen. I think this is the first time that we've seen a wave of bugs all around the same kind of topic based on a trust assumption. And whilst we all say trust don't verify here in crypto, when you are looking at things that are lower down the stack than the language you're programming in, when you're looking a layer beneath at the thing that translates things to the EVM, you assume, and I think assume is a bad word here, but we do that. Everyone working closer to the bytecode knows what they're doing right, and we're human. I worked as a compilation engineer, I know how this goes. There's some interesting questions that are coming around right now about, okay, so who was responsible? Is anyone, is everyone? How do you resolve this going forwards? Does this mean there should be more financial incentive to look at a lower stack layer 0.5 if you were to consider the compiler to be that level? If so, who's paying that? VCs don't necessarily see a return on that, even though it falls under their stack.
00:09:32.370 - 00:09:45.782, Speaker D: Developers perhaps, but developers will often be the ones taking external funding. It's a really fascinating conversation that I think has only just started and I think we'll see this roll over the next month, six weeks or so.
00:09:45.836 - 00:11:00.234, Speaker A: A curious comparison is if we look at the most successful commercial compiler in history, it's by far Nvidia's compiler at this point in terms of dollars managed or dollars that are kind of using it. And it's kind of interesting that people had tried to make open source compilers, including Intel, ATI, AMD, et cetera, for graphics processors for a long time and it somehow got beat by the proprietary one. I think an interesting question is what's the equivalent here? It won't necessarily be that it'll be a proprietary compiler but there'll be someone who has some sort of like market, let's not say monopoly, it's probably more like a monopsony where they have some sort of indirect network effect that ensures that they get most of the order flow of some form. And the monopsony is sort of incentivized to fund this type of stuff. I don't think that, to be honest, like the Ethereum Foundation or people who are doing consensus stuff care that much about this. It's sort of like, well, we gave you Solidity, you want to make another language go fuck off, right? Which is like not, unfortunately, for better or worse, that is vitalik.
00:11:00.282 - 00:11:01.838, Speaker B: Wasn't Vitalik involved in the development of.
00:11:01.844 - 00:11:05.054, Speaker A: Viper in the sure, everyone wants other.
00:11:05.092 - 00:11:06.670, Speaker B: Languages, if I recall.
00:11:06.750 - 00:11:11.474, Speaker A: Everyone wants other languages. No one wants to maintain other languages. That's where this fight comes true.
00:11:11.512 - 00:11:11.762, Speaker D: Right?
00:11:11.816 - 00:12:16.866, Speaker A: The key thing is that all of the funding, if you look at the funding from the base protocol, most of it is like Viper's got a couple of little grants, but it's mainly going to solidity development verification. What was the E Two deposit contract written in? Right, the initial version, the test was in Viper. But my point is there is this concentration effect, and this is one of these things where I know there's a very heated battle amongst protocol engineers, but there's a battle over whether it's a good idea to have many clients for a particular blockchain or whether you should just have one. Because if you have many clients and there's an error that all of them have, that is something that's outside of the specifications of the client, well, it's possible that they each implemented the error slightly differently and then you get these kind of like production bugs that look way crazier than if everyone was running the same client. And we actually have seen a couple of those in the E Two beacon chain. But I guess there's always going to be this kind of fight. I think the place I'm more convinced will be the actual funding source for Compiler.
00:12:16.866 - 00:12:43.646, Speaker A: Security, ironically, is going to come from a lot of ZK stuff because ZK circuits are much worse in terms of security vulnerabilities in some. Ways than the raw code, because you need the code to execute correctly as well as the proof. And they have to be synchronized. And there's lots of ways they can stay out, get out of sync and in some. Ways. If there's more value locked there, I could see that being the place, that.
00:12:43.828 - 00:13:24.410, Speaker D: There'S something to be said there for, then perhaps money. Funding flowing to languages such as Solidity and Viper in the process of, say, verifying a transpiler down to something that works for ZK. That's around the house's way of doing it. But I think you raise a really good point. We talk so much about client diversity on the execution and consensus layers, and then we kind of seem to have accepted that for the most part, if you're writing code, you should be learning some JavaScript and you should be doing it in Solidity. And I can see from a cynical business perspective why that makes sense. Woe be it for a catastrophic consequence if something like this was found in Sol C.
00:13:24.410 - 00:13:30.714, Speaker D: And there's part of me that goes, we should have more. Languages, we should be more diverse and yeah, it turns out it's very much the yeah, show me the incentives.
00:13:30.762 - 00:13:32.960, Speaker A: I mean yeah, your PhD is in.
00:13:34.370 - 00:14:21.070, Speaker D: I mean, I will admit, the last time I looked at anything compiler, level for the EVM, was HEBM? So I very much have qualifications in this regard. So, yeah, I have opinions. Don't think we should be doing compiling from a Haskell DSL down and making it mainstream, but I think we should have more. But as we see, even two is causing something of a stoppage in the dam of where funds go and what goes where. I think this is weirdly, an argument, perhaps, for this is the first time I've thought this through. We talk about things like where ethers burns to, I don't know, set aside a little bit of it for that, for ecosystem development. But that raises a whole bunch of weird questions about who's doing the development, who stewards the funds.
00:14:23.250 - 00:14:27.754, Speaker C: Is this the plug for what's that chain that has sort of the dad.
00:14:27.802 - 00:14:28.400, Speaker A: Fund.
00:14:30.790 - 00:14:37.698, Speaker D: I was expecting not going to say CSR but it's the kind of idea like expenditure is public good and.
00:14:37.704 - 00:14:43.110, Speaker A: Where you are given how much people get angry about anytime I mention them on here I'm just going to say no comment.
00:14:43.530 - 00:14:45.654, Speaker D: Yeah it's good to see you all.
00:14:45.692 - 00:15:16.306, Speaker C: Yeah to your point I don't think it's a philosophical like oh we need more languages or fewer clients or whatever. I think it's more like a funding and sort of incentives problem right? This kind of reminds me of kind of like the log forge vulnerability from two years ago or kind of like that. You remember there's an Xkcd comic of sort of the modern stack and there's a one little egg and it's like you have some library maintained by a dude in Kansas and thanklessly maintained by.
00:15:16.328 - 00:15:18.674, Speaker D: A guy in Nebraska since 2005.
00:15:18.712 - 00:15:41.210, Speaker C: Yeah and comparison with the Nvidia compiler it's like yeah obviously you have a multibillion dollar company maintaining this thing. There are sort of different set of and different capacities to do so and so yeah I mean a couple of dudes who are maintaining Viper they probably don't have the resources to thoroughly test and produce as production grade not to shut it up I think overall yeah exactly.
00:15:41.280 - 00:15:49.340, Speaker A: I was about to say it's kind of a valiant effort to try to run one of these fork languages right you're like you have no support.
00:15:51.710 - 00:15:52.074, Speaker B: You.
00:15:52.112 - 00:16:39.306, Speaker A: Generally have a smaller team. There's going to be technical issues where you can't be one to one with the main language that's supported and then the tooling doesn't really support you. It kind of will do the bare minimum so that hey I can deploy my contract but all the security tooling won't support you and that in and of itself gets to a bunch of nuanced issues. But the reason you should be worried about these types of bugs is they're very insidious in the sense that if you find one, they affect many places all at once at the same time, which is very different than most smart contract bugs, which are usually isolated. Now, of course, there's going to be a ton of people who are like, hey, why don't you use my particular blockchain? We have these particular oh, one is.
00:16:39.328 - 00:16:43.166, Speaker D: Safe by construction, and you hear it eight, so you're like, okay, chief, which.
00:16:43.188 - 00:16:45.920, Speaker A: Is never quite true. Never quite true.
00:16:46.850 - 00:17:26.326, Speaker B: But this is one of the points that I also made on Twitter, which is that whenever you see something like this, regardless of whether or not you put the blame at the feet of the developers, there's going to be some sense of like, okay, why did you get cute? Why didn't you just use Solidity and kind of sit in the sort of technological monoculture that it's like, look? Solidity just has the most eyeballs. It's the most battle tested. It's got the most essentially, it's got the biggest. Bounty on finding something broken, such that if there was some zero day sitting in the wings, it would have been found much earlier than presumably it would be for Viper, which basically has one big honeypot, which is like I don't.
00:17:26.358 - 00:17:54.050, Speaker D: Think that assumption holds. Right. Because there were enough people looking at viper stuff, and this stuff sat there for two years in the open, right? You just had to look back a little bit. I mean, how many people do we know that we can say, like, hand on heart, know the solidity code base I've barely looked at? I I have my bugbears about how it compiles and the vir stuff, but like, this was my stick, and I barely know it myself. Of course.
00:17:54.120 - 00:18:46.820, Speaker B: Look, I'm not saying that I would blame the people. I would blame the people who are using Viper. But I mean, Curve now has to answer this, whether some people are going to give them the benefit of the doubt, as you just did. Some people won't, and some people will think like, wow, I'll just use uniswap from now on. Like I don't even want to fuck with Curve, because who knows what other mistakes they're making? Or who knows if Viper is at all secure, given that this bug has been sitting around for two years and they never had the foresight to be able to notice that, hey, there's $60 million sitting or whatever, $40 million sitting on this old version. And in absolute terms, $40 million on this old version of Viper is not a big bounty, right? There's like, a very minor protocol sitting on page two of DeFi llama. That's not a place where I'd expect a lot of eyeballs to be poured over.
00:18:46.820 - 00:18:52.018, Speaker B: So maybe it's not surprising that it took two years for someone to figure out that, hey, there's this reentrancy bug.
00:18:52.114 - 00:18:57.960, Speaker D: I'd be fascinated to see the process by which it finally came out. Did someone finally decompile something old and see it.
00:19:00.030 - 00:19:58.646, Speaker A: Or were they just fuzzing? Yeah, expected translation unit versus deployed translation unit. You could totally see that type of thing accidentally working and you're just like brute forced and you didn't think that hard and then you're like, oh okay, this must be the reason. Because once you see it's, like if you're doing parallel programming and you see a lock or a mutex not working, it's like, oh, you know, that part of your code is broken. There's so many ways that it could have been found. But I think the other point I guess this brings is like this is a problem that does occur a lot in security. Like you do run into these compiler bugs, it's just that they've never ever been quite as high stakes. I think the idea that the high Stake compiler bug lasts forever in a blockchain versus high stakes compiler bug, my code is running and constantly being changed.
00:19:58.646 - 00:20:04.638, Speaker A: It's local. That's a very different modality of what's it goes through.
00:20:04.644 - 00:20:35.094, Speaker B: The assumptions about mutability, right? Like the idea that, okay, this thing should be immutable kind of assumes that there's never a reason to change the bytecode even if the solidity code corresponding to it is the same or the Viper code corresponding to it is the same. That sort of assumes that the compiler is always correct and there's no reason why one might ever need to swap that out, which you wouldn't make in any other environment. It's only really in crypto that we kind of bake this assumption in from the very beginning, is that as long as this is a solidity code, not true.
00:20:35.212 - 00:20:41.926, Speaker A: Spacecraft aerospace stuff does do the same thing where it's like you make it once and you had something that was.
00:20:41.948 - 00:20:43.978, Speaker D: Built in the it works just fine.
00:20:44.064 - 00:20:49.786, Speaker A: We'Re still getting signals from it. Yeah, there are like mission critical technologies that end up and that's where they.
00:20:49.808 - 00:21:01.626, Speaker B: Do and when they do in space, they do like the multiple versions of the same thing that are implemented in different languages. Right, exactly. And they do like some Byzantine fancy stuff between them in case they're slightly.
00:21:01.738 - 00:21:04.366, Speaker A: Bit flips, they're not wise identical, but.
00:21:04.388 - 00:21:10.866, Speaker B: Also from cosmic rays, I read about this also in case cosmic rays like flip bits in the instruction set or whatever.
00:21:10.968 - 00:21:42.682, Speaker A: So I think you just have to have that mindset, which ends up meaning you can't move as fast. And I think that's sort of why blockchains are interesting in that they bring some people who are of the move fast, always break things, don't care mindset with people who are like, absolutely not. This is like an immortal tomb that you can never desecrate and has to be written perfectly up front. Right. Whereas in aerospace it's like you always treat it like the latter and in the rest of tech, you always treat it like the former. Somehow you're interpolating between the two.
00:21:42.816 - 00:22:02.254, Speaker D: It's weird Yearn ended up being one of the latter because a lot of their stuff was in Viper, but they pinned to an ancient version of Viper. And I don't know to this day if this was kind of just laziness and not wanting to go, this will do, we don't need it to change that much. The thing that changes is the strategies, and those are often elsewhere.
00:22:02.382 - 00:22:57.806, Speaker A: Yeah, one interesting thing, another framework to think about it is like if I take the sets of types of vulnerabilities in normal software development, like I take just normal code execution bug. Like logic doesn't match what it's supposed to. I take environment execution bug. I found a way to get into something that's talking to that program and has privileged access and can change it. And then you have sort of like supply chain attacks, like code that a particular piece of code depends on is itself. You can kind of mutate it in place in normal software development no matter how much every year, probably once a year I read some post or something that's like NPM, which is the main package manager in JavaScript and every single web application somewhere in the world eventually uses it, except for very esoteric web stuff. NPM people are always like, oh, NPM has tons of supply chain attacks.
00:22:57.806 - 00:23:08.786, Speaker A: Every once in a while there's like a little thing that phishes you or some type of browser extension that phishes you or something like that. Certainly Board Ape owners have been recipient.
00:23:08.818 - 00:23:12.194, Speaker D: Of such attacks with this one NPM package.
00:23:12.322 - 00:23:31.742, Speaker A: Yeah, no, but I think that some of the craziest phishing attacks end up coming this way. But supply chain attacks to a normal software developer, if I ranked all of those, they're probably like in the bottom 20% of security things. They're not anywhere near the top ten. But this says that in crypto they have to be in your top three.
00:23:31.796 - 00:23:39.522, Speaker D: Yes. Easy, because your compiler is effectively your entire like your supply chain. Yeah, it is. That is the whole chain. Yeah.
00:23:39.656 - 00:24:21.018, Speaker B: Also, it occurs to me that some people might not know what a compiler is. So maybe before we I want to move on a little bit, but let me just quickly explain what a compiler is. So when you write code, you write code in a high level language like Solidity is one we often talk about, viper is this other one that we were just referring to that was involved in this attack. But Ethereum itself does not understand that high level code. That high level code is written to be easily understood by humans. But what Ethereum understands is much lower level instructions like add this, move this over here, flip these two bytes, whatever, and these instructions, which are called bytecode or often called machine code. These instructions have to be translated from the higher level language to the lower level language.
00:24:21.018 - 00:24:59.738, Speaker B: And that's what a compiler does. It basically turns this higher level language into this lower level language. And that's where the bug was that caused this reentrancy attack in Curve, and that's why we're talking so much about supply chains. Now, part of what I want to discuss here as well is about communication around security vulnerabilities, because that was also a lot of the drama that I was seeing on Twitter. Was not just that, okay, this thing went wrong and money was stolen, but also the way in which this ended up getting divulged seemed to have made things worse. And I know a lot of security people have had strong opinions about the way in which people communicate about vulnerabilities in Blockchain, because it's not the same as it is in other domains. Do you want to speak to this a little bit?
00:24:59.744 - 00:25:25.330, Speaker D: Lawrence yeah. So often when these things happen, we don't have time to file a CVE. We don't have time. We often if you're dealing with anonymous teams, you can't even find a contact to speak to. And when there's something that's active in the wild, not neutralized. I think it's just incredibly silly to talk about. I think Bantek talked about this like, do not talk about live vulnerabilities until completely mitigated.
00:25:25.330 - 00:26:03.700, Speaker D: And there are a couple of companies and security order places that I generally respect who did the whole, hey, just by the way, here's a thing that's happened. I think the first one that was hit was jpegged. This is an active problem with Viper. Here are some other places that are affected by the same thing. And I just head in my hands, and Alchemyx was attacked three minutes later. If you've replicated that thing to start with, it does not take you three minutes to just point at different addresses and head into a private mempool. I think that's the thing I'm angriest about in this.
00:26:03.700 - 00:26:35.686, Speaker D: I said on Twitter that it was clout, adult stupidity hitherto unseen. And I can see similarly, the argument to go, people should know. I'm like, no, they probably shouldn't. I think that maybe 30 minutes of silence while people worked out and let people argue. I realize I'm being a little bit contra to my everything should be transparent, but as soon as you make that transparent and it's gotten, there's an argument for saying just, I don't know, hit a Telegram war room. We have Telegram chats for this. We have ETH.
00:26:35.686 - 00:26:39.738, Speaker D: Security people are probably, can you take.
00:26:39.744 - 00:26:55.182, Speaker B: Us a little bit behind the scenes? Lawrence when something like this happens, okay, let's say, boom, you hear that something has been compromised. Viper, blah, blah, blah. No one knows exactly what's happening. There's fog of war. What happens? Like, what is the chain reaction that happens behind the scenes that results in the Telegram war room and who's in there?
00:26:55.236 - 00:27:04.450, Speaker D: The funny thing is, I'm not going to give. You the answer you want, mostly because the process of talking this means I will never be invited to another one. That is how it is.
00:27:04.520 - 00:27:05.074, Speaker B: Okay, got it.
00:27:05.112 - 00:27:29.434, Speaker D: There are telegram channels which exist and things form very quickly between as soon as you realize if it's a library that's affected or a particular protocol, there's generally someone that's kind of proficient. There are some people now that handle the generalist side of things. Okay, we need to start communicating people. We need change, checkers, et cetera. That's as much as I'm going to give you simply because I like helping out where I can. And if I get told you're going to media and saying, then that's it for me.
00:27:29.472 - 00:27:34.522, Speaker B: Got it? So there's a code of silence among the people who are sort of the.
00:27:34.576 - 00:27:48.530, Speaker D: No, it's weird because code of silence isn't the right thing to do, but you certainly don't want to say to anyone that would be kind of acting in a malicious way, be like, okay, if I do this, this is the timer that I have. This is the playbook that I need to kind of be working contrary to no, I understand.
00:27:48.680 - 00:28:24.522, Speaker B: I'm kind of poking fun. I think what's clear, I think, to most people who have been in the space long enough, is that there's a group of folks, presumably you're one of them who are these kind of security people and white hats who are kind of on call, basically, when something goes wrong on chain, figure out what can we do to mitigate what is affected, what's not affected, how do we communicate this to the right parties and make sure that everything kind of happens? It's a weird kind of distributed ethereum defense team that often it's the same players who show up and call to try to mitigate these things.
00:28:24.576 - 00:28:51.058, Speaker D: You flatter me. I wouldn't necessarily call myself one of them anymore simply because I find myself busy with a child nowadays. But like I said, as you say, right, there are people that are around and are willing to help and so there are security telegrams, I think often within seconds of a PEC shield tweet going up. There are people chatting. Often there are protocols that are working in the back noticing, and you see it appear in like six places at once if it's something known.
00:28:51.154 - 00:29:36.580, Speaker A: Big. One thing I would point out though, is that I think you kind of need this radio silence more for these supply chain attacks because remember, these supply chain attacks are like if it's a bug of that form, every single thing that's ever been built with it is vulnerable at the same time. Versus if it's a specific protocol, then it becomes something more like, oh, well, all the forks are vulnerable, and maybe the forks are just like it's harder to do the attack because of the deployment. There's a lot of kind of nuanced reasons, whereas when it's a supply chain thing, of like this particular thing is always true for anything created in this way, then it becomes much more, much more.
00:29:37.510 - 00:29:57.418, Speaker D: To speak to that, I think we can, to the degree that you can consider something like this, which is awful and shouldn't have happened, lucky in the sense that the blast zone was effectively constrained to two major protocols of which one of them was out of the picture because of an older version of the compiler. Right.
00:29:57.584 - 00:30:59.742, Speaker B: So let's continue on the story. So just to kind of recap where we are so far. So these old pools and Curve were compromised because of this re entrance bug almost instantly because of somebody going on Twitter and basically saying oh hey, look at this, this is happening on Chain and everything that uses the same compiler version seems to also be vulnerable including these other protocols. Very quickly you had a bunch of folks jumping in and exploiting basically everything that was vulnerable within minutes. Now one of the things that's happening on chain as kind of this on chain background radiation is this phenomenon we call generalized front running. And so generalized front running is basically when you have these folks who are monitoring the mempool looking for transactions that may make money in any possible way, they simulate that transaction as though they were the person submitting the transaction instead of the actual person submitting the transaction. And if it'd be profitable for them to do so, then they automatically will submit that transaction and try to go faster than you.
00:30:59.742 - 00:31:46.910, Speaker B: So if you make a trade that's going to be profitable, they'll try to front run the trade. And that also means if you're going to hack something and that hack would be profitable as all hacks are, or most hacks are, I guess the useful ones, then they will do the hack instead and front run you on the hack. And because they're doing this automatically most of the time these generalized frontrunners, they don't know what they're doing. It's just running while they're at a ball game or they're asleep or they're whatever. And this thing is just like doing whatever it's doing on the background. And so we had a very interesting mev day where some generalized frontrunners ended up picking off some of the hacked funds that were otherwise being targeted by presumably copycats. Lawrence, did you get a sense of what was going on here and how that story played out?
00:31:46.980 - 00:32:41.870, Speaker D: I'd been busy watching and talking to some people at some of the other effective protocols like Alchemyx when I realized that Curve had been hit for the first time. And then I noticed that coffee babe, god bless coffee babe, by the way, if you ever watch this, had intercepted I think 5 million out of the Curve attack. I think one of the things that before I go a little bit further into this, I think one of the things that I find really fascinating, and I say this a lot on Twitter, is that it's incredible that it's still basically a coin flip between whether someone who's performing an incredibly complex attack, be it at the protocol level or be it, as we have here, somewhere less than that. Maybe someone's aped the vector whether they have the sophistication to change their ethereum RPC to a flashbot thing or not. You get people who are still going. Here is eight figures of crime that I'm about to do. Let me broadcast it into the public mempool.
00:32:41.870 - 00:33:09.366, Speaker D: It's one of these incredible, incredible skill and then robbing a bank and then stopping at the red light. It's baffling to me. I'm grateful that they're doing it because we have wonderful situations. Like, you have searches that are intercepting these things and as people will have seen, I think there was a lot of chat about Mev searcher. Coffee Babe picked up a bunch of it, and others have as well. I think there's a lot of credit to other people as well, such as Pascal Cavasaccio and so on and so forth. I'm not going to name them all.
00:33:09.366 - 00:33:53.000, Speaker D: Wonderful work who went, okay, I've got this. I'm going to return it to the address of my thing and then chat and say, okay, I've picked this up. Where does it go? And I think a large chunk of it has gone back to I think Metronomes received a bunch back because they were hit as well as Pendle and hang on, it was JPEG, Metronome, Pendle, Alchemyx, the Curve Pool, Dbridge and Ellipsis were all hit. I think some of those were all like, Here, have it back. Which is great. I think this is a weird offshoot of White Hattery where someone has effectively sleepwalked into millions of dollars and just goes, no, I'm all right, chief, you take it back.
00:33:53.930 - 00:34:37.206, Speaker B: It is really beautiful. And in a way, it's a testament to the culture that Ethereum has that you've got these people who are effectively kind of built from the same material you might think as like, hedge fund magnates who are just ruthlessly out there competing every single day for every iota of expected value. But then when something really goes wrong, they're like, hey, everyone's got to buckle up and defend ourselves against the real attackers. Which are, of course, the folks who are hacking this thing in the first place. So I thought it was a beautiful little vignette and also for those of I imagine many folks have never heard of generalized front running, but in situations like this, it ends up becoming an important part of the story. So, okay, let's move on to the financial part of the story. Okay, so, so far we've been talking.
00:34:37.228 - 00:34:39.746, Speaker D: About the technology, the mechanics.
00:34:39.938 - 00:35:46.618, Speaker B: I know. I love how multi layered the story is, even though it's obviously a fucking tragedy, but it's also a very teachable moment, I think, for DeFi and cybersecurity on this taking place. Obviously, people pulled a lot of money out of curve and the value of CRV, the native token of curve, went down quite a bit, and so it dropped more than 20% over the span of a day and a half. And if you remember from a previous episode of the Chopping block, we talked about michael Igorov, who is the founder of curve, and he has a very large amount of curve that he owns on chain, against which he was borrowed a lot of money and purchased a lot of real estate in the real world. And so presumably he has a limited liquidity profile given how much he's balling in real life. And as the value of this curve has gone down, in addition to just what's happened broadly with DFI going down over the last year and many of these tokens getting hit, he was already extended pretty far in. If you recall, I think it was ave at that time that originally he was at the risk of getting margin called.
00:35:46.618 - 00:36:55.810, Speaker B: Now all of a sudden with the value of CRV going down 25% plus and threatening to go down even more as not only are people worried about, oh, my god, is there going to be some death spiral that's happening here, but now the fear is okay. Michael Igorov, will he exacerbate that liquidity spiral, causing CRV to just basically get vomited out into the market when his massive positions get liquidated? What is that going to do to ave? What is that going to do to fracs, which are all places where he's also borrowed a significant amount against his CRV holdings. So there was basically a kind of mass contagion of fear as CRV started getting hurt worse and worse, as people started realizing this, and further, in some ways, many people shorting CRV to try to facilitate this and bring it on and say, hey, if we just get it to hit this threshold, boom. We can kind of knock his position entirely over and kill CRV. What michael ended up doing is he went OTC because of course there's nowhere near enough liquidity for all the CRV that he owns. Struck up a bunch of CRV deals. I'm sorry.
00:36:55.880 - 00:36:58.210, Speaker D: Well, not anymore. Now that the kiosk.
00:37:00.070 - 00:37:47.898, Speaker B: Once upon a time, there were people willing to buy and sell CRV. He ended up striking deals with justin sun, DCF god, and DWF labs, among several others, to basically sell them OTC big chunks of CRV to give him liquidity in pretty significant discounts to market with very small lockups so that he could repay a bunch of his debt and lower his liquidation thresholds. So I think now it's pretty safe to say that we're out of the woods on that front. Last I saw his, he was, he was pretty close to, I want to say, like, the liquidation price was pretty close to like forty cents. Now it's closer to 30 something. Just because he's repaid so much of his debt on Ave FRAX lend and on Abracadabra. So I think things are looking much safer now.
00:37:47.898 - 00:37:51.058, Speaker B: Correct me if I'm wrong, if anybody has more up to date numbers.
00:37:51.224 - 00:37:56.760, Speaker D: His biggest vault is on Ave and currently has a health factor of 1.69, which is much better than it was.
00:37:57.370 - 00:38:16.058, Speaker C: Yeah, the big issue, though is he still owns so much of the circulating supply. There's like 900 mil curve outstanding and he owns 300, 400 mil, something like that. Even if you get liquidated, there's just no amount of where's it going.
00:38:16.144 - 00:38:16.662, Speaker D: Bids.
00:38:16.726 - 00:38:29.920, Speaker C: Yeah, exactly. So it's like, in reality, ave v three FC fixes this and then they can limit bars per asset type. But yeah, I mean, it's, it's, it's kind of a mutually assured destruction at this point.
00:38:30.850 - 00:38:39.410, Speaker B: Tarun, given that you were involved with this ave kerfuffle a few weeks ago, what's your take on this whole deleveraging?
00:38:40.470 - 00:39:02.090, Speaker A: You know, there's not too much similar to Lawrence. It's actually still somewhat there's still things going on. So I probably will not say okay. But I will say we've spent a lot of time making proposals of trying to mitigate this historically.
00:39:02.830 - 00:39:05.210, Speaker B: Is this an I told you so moment for you guys?
00:39:05.360 - 00:39:12.700, Speaker A: No, this is more just, hey, look, we've made these proposals, we've gone through this before.
00:39:16.130 - 00:39:18.686, Speaker B: If you had only listened to us. If you'd only listened to us.
00:39:18.708 - 00:39:57.386, Speaker A: It's more like directionally, it was correct, things are kind of consistent, but the point of a dow is that, hey, the dow can be like we don't want to do anyway, you know, we put up another version of some of our old proposals. We're going to try to keep monitoring this. I mean, I think the emergency would have been if the fraxland interest rate. So one thing that's worth noting is fraxland. So Michael had two big positions. Of course, Ave is the biggest one and then the second one was Fraxland. Fraxland has sort of a PID controller style interest rate.
00:39:57.386 - 00:40:13.466, Speaker A: So the interest rate adjusts. So the longer the utilization is high, so the longer the funds are lent out, the more the interest rate goes up, the lower the funds aren't lent out. Vice versa, with the idea that, hey, they keep increasing the interest rate, then they can bring down the utilization, which lowers the risk.
00:40:13.498 - 00:40:13.694, Speaker D: Right?
00:40:13.732 - 00:41:00.638, Speaker A: So, like, imagine you're a lender in the real world, you've lent out all your funds, but now you're worried that some of your risky borrowers are going to default. You may try to make the adjustable rates for your adjustable rate component go up because you want to compensate for those defaults. So that's sort of the thesis of the way they're looking at this, the way FRAC's land is designed. But the problem is, at the current time, they were at 100% utilization, so the interest rate just keeps going up on its own. And there is a cycle between the two loans where in order to keep paying. Like one would be draining faster because the interest rate is going up. The other one's sort of constant ish and you borrow against the one that's constant to pay the one that's going up.
00:41:00.638 - 00:41:05.838, Speaker A: And that was where there was a lot of worry and cycles of things that could go wrong.
00:41:05.924 - 00:41:59.090, Speaker D: It was interesting to watch people trying to hunt him on fracs lend because the way that worked was, yeah, people would deposit Curve, they'd withdraw fracs APY plus plus because of the PID. And I think there was a couple of hours where people are just sitting there going like just watching ping ponging between the two, which I found fascinating. I have this more qualitative thing question. The what if about we talk about the nature of using these lending protocols that have long tail asset support for the tax free leveraging of assets to borrow against them or the selling without doing as much and kind of saying that any bad debt that's incurred is not a me problem. It's a you problem. And I think today was the day where everyone kind of en masse responsible for things was like, oh, it's a me problem, and actually started kind of like making efforts to mitigate some of that. I said I think there were some really distasteful characters that were included in the OTC deals.
00:41:59.090 - 00:42:38.538, Speaker D: My personal take on some of those people, which I found fascinating because it was at $0.40 on the curve with a three six month handshake deal. Or you can sell if it goes up to $0.80. Which I found fascinating as kind of like this weird, locked in situation between a bunch of big money about something which could be a massive headache for Ave in particular. I find that it's so strange. I mean, GCR clearly thought that something was going to go the way of the dodo because he added a bunch of ethereum single sided on V three aiming at like three to Curve. I think that might be psyops.
00:42:38.538 - 00:42:51.060, Speaker D: He's probably smart enough to know that wouldn't have happened with a liquidation because of chain link, the way that it's weighted towards central exchanges. But it was certainly a weird moment to see that happen. Yeah.
00:42:52.870 - 00:43:47.670, Speaker B: I will say on the whole, it does seem like this saga is coming to a close. Now, I want to give just a few minutes for us to kind of take the broader reflections on what it means. A lot of the people I mean, it was a wild 48 hours, I will say very entertaining and many different angles to the story, which is also part of what makes it so fascinating. A lot of people were saying that, oh, I mean, this kind of shows that DeFi isn't all that it was chalked up to be and that it means you can't really trust this stuff because Curve was one of the biggest and everyone trusted it and blah, blah, blah. I do like to remind people that, look, the curve pools that were affected were all very tiny old pools that were kind of third party pools. The main curve pools themselves were completely unaffected by this. And on the whole, Curve had what, 3 billion in TVL, of which roughly 30 something million was actually affected by this bug.
00:43:47.670 - 00:44:37.650, Speaker B: And of course, pretty quickly people kind of came together, figured out what was wrong and with a few caveats here and there, more or less got to getting everything else back in order. We didn't get a CRV cascade, we didn't get a bunch of bad debt proliferating on a bunch of protocols. People kind of came together and worked together to help keep DeFi resilient. And I thought that was a great example of it's not always just about the mechanisms. People talk about that a lot in DeFi that oh, these mechanisms, they're self reinforcing, they're self sustaining, they're super powerful. But a lot of it is really about how you build your norms and the community and the culture that's a lot of what kept DeFi safe is just the instincts people had about communicating with each other and working together to help this problem from getting worse.
00:44:37.730 - 00:45:27.734, Speaker A: I prefer another way of looking at it, which is in traditional finance you can't really see all these positions. In some ways people are always like, oh, we should have perfect privacy. Private DeFi already. There's some sense in which you want these kind of bugs in public DeFi fixed, discovered and dealt with first before you ever get to private DeFi. In traditional finance you already have the private thing, but because you can't really prove any properties of what people's positions are, you never really know if they're solvent or not. You never really know the liquidity, especially for more liquid things. So in that sense, you would not be able to identify the types of things we're talking about of like, hey, someone is using their older loan to pay off their future loan until after it happens.
00:45:27.734 - 00:45:48.300, Speaker A: And in some sense that transparency is actually extremely useful for figuring out mitigations and also for other users who are impacted by that to adjust their strategies, which you can't really do in traditional finance, I would say, like, you're usually guessing what other users are doing, you're not knowing what other users are doing.
00:45:49.310 - 00:46:29.190, Speaker B: There is the trade off though, right? Because we also talked about the adversarial nature of when it's on chain, you can see the stop and you know, kind of how to hunt it down and you can spread FUD about this and that because everybody was looking for okay, what's the level that it's going to take for basically curve to have this kind of cascading liquidation spiral? That is something that you wouldn't have in a completely private system. So there's pros and cons. It's not obvious to me which of those two is better, but it's pretty clear right now that it's not a choice in front of us, really. We kind of have to go DeFi is DeFi and unfortunately we don't really have a viable private version of it. At least not yet.
00:46:29.340 - 00:47:08.726, Speaker D: Yeah, one of my favorite analogies recently is talking about kind of flashpot RPCs is dark pools, the analogy of like treadfi. And it'll be interesting to kind of see the way in which as we start getting kind of more base level privacy, the way in which stuff starts splitting off into different things. That's kind of an auxiliary interest of mine. Recently I'm working personally on trying to do stuff like bringing kind of deals on chain and kind of walking the walk in terms of DeFi. And the degree to which I think maybe that just adds signal instead of noise is yet to be seen. It fascinates me. Although I am not as big brained as people like who look at this stuff for a living, I would like.
00:47:08.748 - 00:47:27.622, Speaker B: To see more private mean. It is clear that especially for large players, I mean, Michael Ligorov is probably the primary example of somebody who would benefit, at least from his perspective, from having some financial privacy. Having viable forms of on chain privacy I think would be a big boon.
00:47:27.686 - 00:48:16.650, Speaker A: To I'm certainly not saying that obviously I should add some Addendum. I certainly think it is necessary. But two things to remember is finance can never be fully private. There always is some public information, like a price, a rate, something has to be public for people to trade on some set of metrics and those metrics have to leak something about the actual underlying assets. And so there's always this trade off. But the real question is how can you make these things stable? And I would rather learn the mistakes with the fully transparent public stuff before going fully to private. And I think we have this now library of these mistakes to avoid.
00:48:17.070 - 00:49:04.214, Speaker D: Well, we have a library, but they've not been deleted anywhere. That's the thing I wrote last year that whenever we see an error like this, if it's novel, sorry, if it's old hat, like if it's a repeat of something, then everyone just gets strips torn off of them. If it's novel, then people within 48 hours will confidently assert that anyone could have seen it and only the malicious or the novice would have overlooked it. We saw it even happen at the Dow. We've started seeing it now with the Viper incident. And I think one thing I'd like to bang on about is some group of us need to kind of put the book together of the Watu to know like a Hitchhiker's guide to not getting wrecked at some level. And I don't think it's ever going to exist.
00:49:04.342 - 00:49:39.350, Speaker A: So the nature of security, much like the nature of finances, it's always this cat and mouse game. Whatever edge you have is hard to make public. So anything that gets written is always a bit post hoc, never kind of can be written in the moment. And I think that's sort of the thing you face here. But the transparency means that the documentation is there, right? It exists. Right. Just think about how many financial crisis must have existed in the world where there is basically no recollection or documentation of the cause or the solution.
00:49:39.350 - 00:49:49.190, Speaker A: I bet you there's a lot of those, many countries, and in some sense, at least here you have the chain as the form of reference forever.
00:49:49.690 - 00:49:50.342, Speaker D: Yeah.
00:49:50.476 - 00:50:35.000, Speaker C: I think it would be very entertaining to read the histories of some of the big hacks in crypto. But I think to Terunce point, it's kind of like rules are written in blood. And I think that's kind of true for crypto where after any new novel hack, people change their auditing practices and testing practices and security practices and what we sort of consider safe and stuff gets better over time. Even the concept of viper having a library for less reenterency guard wouldn't have been a thing six, seven years stuff. As we sort of learn about different ways of attacking, I think we sort of as an institution build those sort of natural antibodies, but not in a sort of implicit way instead of an explicit way.
00:50:35.770 - 00:50:54.000, Speaker B: It did make me reflect, to be honest, that I feel like working in crypto this long has broken my brain. Because on Monday I know on Monday when I saw that curve was hacked and I was like, oh shit, how much was it hacked for? And it was like, oh, 30 million. I was like, oh, it's fine.
00:50:57.330 - 00:51:00.554, Speaker D: It's not the length of my phone number. I'm not yet I sleep.
00:51:00.682 - 00:51:42.842, Speaker B: Yeah, exactly. Looking back on this from where DFI started, when literally all the money in DFI was about $100 million, I don't know. It does feel like security has to get simpler. Can't be. I mean, to your point, Tom, of all of the earned knowledge that is kind of tribal and you go through the maze of all the decisions you can make building a protocol, and at some of those corners, they're just bones of protocols that came before you that fucked up in that particular way. It can't be that it's that tribal. The knowledge of how to build things safely in DeFi, that aspect of it has to get better.
00:51:42.842 - 00:52:27.290, Speaker B: And I don't know how much easier it seems to be getting. It seems to me the answer is more and more that it's not easy and it's going to stay not easy. And instead we are just kind of investing more and more eyeballs resources and security into the few protocols that are super, super secure and everything else, it's just caveat and tour. And that ultimately means that there's I mean, part of that is just that few things really have product market fit in DeFi. But the other side of it is that it's almost even harder for something new to get that product market fit when there's such a gap in security between things like uniswap and curve and the next protocol that just is new on the block.
00:52:27.710 - 00:52:40.320, Speaker D: If you had another hour to spare, I would give you my soliloquy on the tactics and techniques of auditing firms in DeFi nowadays, but I don't feel like getting canceled by some of my friends, so that'll have to wait.
00:52:41.410 - 00:52:47.280, Speaker A: Now I really want to hear wait. We should really talk about the Bald stuff.
00:52:49.330 - 00:52:51.774, Speaker B: All right, that could probably fit in five minutes.
00:52:51.892 - 00:52:53.600, Speaker D: Yeah, it's not that much.
00:52:55.210 - 00:53:03.366, Speaker A: I was just, like, looking at the clock, and I was like, Come on. The best story of this week is this.
00:53:03.388 - 00:53:08.838, Speaker B: The best? Okay, Tarun, I'm going to let you give the exposition for balls, given that it's the best story.
00:53:09.004 - 00:53:27.120, Speaker A: As many of you know, Coinbase is launching a L2 protocol called Base. I believe on a prior episode of this here podcast, I quoted a tweet that I saw that described it as binance smart chain for white people, which got me canceled on LinkedIn, but not Twitter, which should tell you everything.
00:53:28.130 - 00:53:29.230, Speaker D: It's also not wrong.
00:53:29.300 - 00:53:31.886, Speaker B: How can you get canceled on LinkedIn? What does it even mean?
00:53:31.988 - 00:53:41.026, Speaker A: Just people being like this, people unconnected with no, no, Laura. I believe Laura posts these on LinkedIn. I remember I saw some comments that.
00:53:41.048 - 00:53:42.066, Speaker B: Were, okay, got it.
00:53:42.088 - 00:53:45.886, Speaker A: I don't know if they were, like, directly in her thing or some other thing, but I think she doesn't tag.
00:53:45.918 - 00:53:47.458, Speaker B: Me on them, which I'm very grateful for.
00:53:47.544 - 00:53:52.226, Speaker A: I kept getting tagged in these things of this incentive. I was like, hey, I'm just reading someone else's tweet.
00:53:52.258 - 00:53:55.000, Speaker D: I think it was a Tuber special. I'm pretty sure it was him.
00:53:57.050 - 00:54:25.460, Speaker A: And so Base has been launched in sort of, like, developer only mode. The chain exists. You can bridge onto it. Layer twos that are optimistic, of course, have this withdrawal period, so you may have to wait to get your money back. But I guess in honor of the fact that the people who are in trials with the SEC are bald or the ones who win, I forget exactly what the meme is. Do you guys know why?
00:54:28.550 - 00:54:35.686, Speaker D: Got to be confident. When the guy at the top is bald. Bald is like, yeah, strong. Meaning there's a great meme, like you.
00:54:35.708 - 00:54:36.866, Speaker A: Are with this show with Haseeb.
00:54:36.898 - 00:54:37.046, Speaker B: Right.
00:54:37.068 - 00:54:38.258, Speaker A: You're very confident.
00:54:38.434 - 00:54:39.160, Speaker B: Exactly.
00:54:42.970 - 00:55:56.394, Speaker A: Someone made a meme coin called Bald and they deployed it. And of course, we had this fervor of 50, $60 million moving into Base, which sort of it was meant to be a developer test net, not totally meant for real funds, but you can't stop the apes when they ape. So all this money went in, and then the deployer developers sort of rug pulled the people. In some ways, I think there's still debate as to how much. Of that is true. But once that happened, what happened was what always happens in these crypto scenarios where something awry happens, whether it's the curve thing, whether it's this there is this community of these people on the Internet who are just constantly sleuthing and trying to figure out what they can about an entity, an address, a set of assets on the Internet. And it turned out the Bald Deployer is very connected to had done a lot of seven figure trades with Alameda, had made a lot of posts on the dYdX forums about how they should change their incentives, had clearly been doing algorithmic yield farming for a while and not like manual.
00:55:56.394 - 00:56:23.000, Speaker A: You could tell from some of the rebalance moves. And it was sort of a thing that was like, this is a more sophisticated person. How are they so dumb to deploy off this address that has so much provenance then that led of course to the natural SBF deployed it meme. Which I don't think is true. No I don't. But there are of course a ton of ex Alameda employees who could have very easily been this entity. And that's where I suspect it.
00:56:26.730 - 00:56:41.046, Speaker D: Well, the deployer has come back now posted I think about an hour and a half before this. I realize you've got your hard stop, has come back now saying as soon as there's another Dex that works, we're going to put more liquidity back and any profits are going to effective altruism like nonprofits.
00:56:41.078 - 00:56:42.490, Speaker B: No, you said to nonprofits.
00:56:44.290 - 00:56:55.810, Speaker D: Because I'm not profitable. So I'm looking forward to getting paid by an Alameda associate. But of course, I mean, this is psyops, you can't fool me. I am familiar with your game ball deployer.
00:56:56.630 - 00:57:04.526, Speaker A: Well, the best part was, I think there was another meme coin launch today called Hair, which has there was also fuck Bald.
00:57:04.638 - 00:57:18.150, Speaker D: Yeah, there were loads. Fuck bald was a honeypot. And then of course, like Leech itself went down because of an exploit, because it was solidly fork code. It's been an auspicious start for bases. Developer only mode, I'll say that much.
00:57:18.300 - 00:57:23.850, Speaker B: I don't understand how a developer only mode, how you can ape into a developer only mode.
00:57:24.590 - 00:57:34.090, Speaker A: They just made it harder. There's no UX, whatever it is functionally running. It's just that there's none of the creature comforts of easy to do for MetaMask.
00:57:34.670 - 00:57:40.990, Speaker D: You just have to sign direct to a contract on mainnet and it would do a self transaction and you're like, well that's not a barrier.
00:57:42.930 - 00:58:01.234, Speaker A: This whole thing reminded me of when during 2021 in the peak bull market, there were like all these TikTok influencers teaching you how to use change your RPC to finance smart chain and go farm things binance smart chain. What was the thing that had a safe moon?
00:58:01.362 - 00:58:08.818, Speaker D: Right? I think that was one of god, we need a safe moon on base. I'm telling you now, boy, someday you're.
00:58:08.834 - 00:58:14.882, Speaker B: Going to be telling your kids about the days when you had to manually change your RPC to use another chain.
00:58:15.026 - 00:58:16.754, Speaker D: I'm going to get called a boomer.
00:58:16.802 - 00:58:20.360, Speaker A: Because do we sound like the people who talk about the dial up sound?
00:58:44.890 - 00:58:56.470, Speaker B: Maybe we'll cover that at some point, but for now, we got to log off. Thank you, everybody, and we'll be back next week. Thanks, Lawrence. See you, everybody.
00:58:56.540 - 00:58:57.700, Speaker D: Cheers, everyone. Thank you very much.
