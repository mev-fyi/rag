00:00:10.440 - 00:01:08.934, Speaker A: Welcome to the Infinite Jungle. On today's show, we're going to be recapping all core developers consensus call number 134, ACDC 134. But before we get into what developers discussed on the latest ACD call, I do want to share a quick programming note about the episodes for this week, as while you're listening to this, you might notice that we didn't actually publish an episode this week. On Tuesday, this episode that you're listening to will be the only episode for this week. There was some very last minute disruptions to the publishing cadence. I was at Coindesk Consensus, which is an annual, major kind of big tent crypto conference, and we did record a live episode of Infinite Jungle there at the conference during Coindesk Consensus 2024. But unfortunately we haven't been able to get our hands on the recording of that show.
00:01:08.934 - 00:01:36.420, Speaker A: So please stay tuned for that live episode. We will hopefully be able to air it shortly. But in the meanwhile, I still wanted to give everybody a recap of AC DC 134. It has already been a couple days since that call, but better to have something to listen to in the meanwhile. So thank you for joining me on the show, even though it's a bit delayed. Before we get started, as per usual, here is a quick show discussion.
00:01:36.602 - 00:01:53.368, Speaker B: I need to remind you to please refer to the disclaimer linked in the podcast show notes and note that none of the information in this podcast constitutes investment advice, an offer, recommendation, or solicitation by Galaxy Digital or any of its affiliates to buy or sell any securities.
00:01:53.536 - 00:03:00.664, Speaker A: All right, so ACDC 134 developers were back after, I would say, like a two week hiatus. As a reminder, developers did have their usual ACD call last week, but that was ACD, a call that is focused on discussing code changes about the execution layer of Ethereum. This one was focused primarily on consensus layer protocol changes, and it was hosted by Ethereum foundation researcher Alex Stokes, who's filling in for these calls for Danny Ryan. Danny Ryan is also an Ethereum foundation researcher who usually chairs the AC DC calls, but he's on a bit of a vacation, I think until the end of the summer, if not possibly longer. But on the call yesterday, there was quite a bit that developers talked about. Mainly there is a bunch of learnings from the latest Devnet that went live, Devnet Zero. While janky, as in the words of core developers, the Devnet obviously tested.
00:03:00.664 - 00:03:55.938, Speaker A: It, activated a bunch of different code changes that have already been approved for inclusion in the Pectra upgrade. But there was obviously a lot of bugs and a lot of different issues that developers noticed. They discussed some of the open questions from Devnet Zero that appeared. One of them, of course, was around EIP 7251. EIP 7251 is about the consolidation of validators stake and the ability to run a validator with an effective staked ETH balance of greater than 32 etH. Effectively, after the pectra upgrade, stakers and validators will now be able to earn auto compounding rewards. They'll be able to earn rewards on a balance of stake ETH that's greater than 32.
00:03:55.938 - 00:04:59.190, Speaker A: Right now, all of the validators on Ethereum are earning rewards from their balance of 32 etH, and if they wanted to earn more, they can't really earn any additional rewards from a staked ETH balance of 40 eth or 50 eth. They have to spin up a whole new 32 ETH validator. So that's EIP 7251. And developers still have yet to really finalize the implementation of EIP 7251. They rediscussed yeah, they rediscussed on AC DC 134. Whether or not the consolidations of staked ETH balances for existing validators should be an operation that is triggerable from the execution layer instead of the console census layer, this would be a really great feature for staking pools, smart contract based staking pools that exist on ethereum like Lido rocket pool. They, as a smart contract based staking solution, would be able to trigger these consolidations through a smart contract operation if developers do decide to enable consolidations through the execution layer.
00:04:59.190 - 00:05:59.388, Speaker A: But that is still a topic that developers are discussing. They didn't reach a resolution, they didn't come to a consensus, but discussed it a bit and said that it is definitely a detail of EIP 7251 that they'll have to determine sooner or later. They also discussed a few changes to the engine API in light of the new Pectra eips. The Enjin API is a piece of software that allows the execution layer client and the consensus layer software client to communicate with one another. There was also a proposal for a different version of EIP 7685. EIP 7685 is the generalized execution layer request. There's quite a few code changes going into Pectra that will allow different operations to be triggered from the execution layer that impact the consensus layer, and EIP 7685 is a generalized format to be able to house those requests on AC DC.
00:05:59.388 - 00:07:05.800, Speaker A: Number let me double check what number 134 they talked about a different design for those generalized requests, basically an alternative to EIP 7685. This was proposed by Mikhail Kalinin who is a Tecu developer, I believe. Yeah, for the tecu client, software client, he recommended a different design to be able to trigger these execution layer requests basically as a sidecar to execution layer blocks. This is similar in design to how blobs RS sidecar to execution layer blocks. So it was a pretty new design solution that was raised for the first time on the latest AC DC call. So developers agreed to look into it more and be ready to rediscuss it on the next AC DC call. So quite a bit of still open questions that developers are working through in terms of the eips that have already been included into Pectra.
00:07:05.800 - 00:08:32.298, Speaker A: And of course for the majority of the rest of the call, developers talked about what else should be included in the upgrade. I have to say since March, which is when the previous Ethereum upgrade was activated, the Denkun upgrade. I had figured by now, since it's been about three months, the scope of Petra, the scope of this upgrade would have been finalized already. Developers, even before den Koon went live in March, had talked about what should be going into Pectra as early as the beginning of this year in January. And while developers are already testing Pectra eips on devnets, they still are very unsure. There's still quite a few open questions, not only about the eips that have already been finalized and going into Pectra, but quite a few open questions about major code changes that may or may not still be going into Pectra and significantly change the complexity of the upgrade as well as its timeline. So developers on the latest AC DC call did talk about the scope of Pectra again and came to a decision about including a pretty major co change, a pretty major co change to Pectra, they're going to be including it into the upgrade with a slight caveat.
00:08:32.298 - 00:10:02.982, Speaker A: This co change will be activated on a different epoch than the other eips, which means Ethereum will have a hard fork activating all of the Petra eips that have already been finalized, and then this one will get activated in some time afterwards on the network. The idea is that node operators, validator node operators, people that are running Ethereum software, they only need to upgrade their device once. But within that upgrade there are two activation epochs for Pektra. Of course, developers talked about, if you know this later, code change, which I'm going to be talking about in a bit, peer Das if peer Das is ready by the time developers are ready to activate the other Pectra eips, and they're very confident in its safety and in all of the features, then they have no problem to activate everything together and make that switch. But in the off chance in the case that peer DAS is not ready, then developers will basically remove it from the upgrade, remove that second activation epoch, remove peer das from the upgrade. And developers were very confident about the fact that the impact of peer Das on the other Eips would be quite minimal. There would be very little interdependencies between peer Das and the other pectra eips.
00:10:02.982 - 00:11:37.006, Speaker A: But I will note that peer das in and of itself is a pretty complex upgrade. It is a complex code change that rivals, say Max EB, which we talked about, the change to the effective balance, the changes to the attestation format on Ethereum that's already going into Pektra. This is up there in terms of a pretty major change. And developers were very, I would say in consensus about the fact that while the complexity of peer DAs and Max EB and all of the other code changes that have already been included, while although the complexity of these code changes are significant, developers, well, one developer in particular, Arne Bedok, I think that's a pseudonym. A lot of developers were in consensus that peer Das among all these eips is the most quote unquote interesting. It's the feature that developers are the most excited about working on, that all of the eips that have thus far been included in Pipetra are okay in terms of impact on the network and users, and developers are, I would say, lukewarm about these code changes, but peer das is really the one that developers are the most excited to work on. This was a little bit of news to me, but this was the sentiment that I was getting from the conversation and the call that developers are just very, very excited about.
00:11:37.006 - 00:12:24.936, Speaker A: Peer desk in comparison to these other code changes that have already been included in Pectra, talk a little bit about peer Das and what that code change entails. Let's go back to the Denkun upgrade, which is the latest upgrade that Ethereum developers have activated. And the primary code change that went into Denkun was EIP 4844. It introduced a new transaction type to Ethereum blobs. And this transaction type is ephemeral. It stores data, arbitrary data objects, and it stores them temporarily on the consensus layer of Ethereum. It is not a transaction type that smart contracts and the execution layer of Ethereum really interacts with.
00:12:24.936 - 00:13:52.666, Speaker A: It's primarily blob stands for binary large objects, binary large data objects and blobs are primarily supposed to be used by L2 rollups. Layer two rollups don't have to interact very much on the execution layer of Ethereum. They primarily rely on Ethereum in order to batch together transactions that have already been executed, already been triggered on the L2. And they batch together the data from those transactions and they commit it down to Ethereum so that the data from those transactions lives somewhere on a robust, decentralized network like Ethereum. So that anybody who's verifying the Ethereum blockchain will be able to see that data and know that the transactions and the data that was verified, that was executed initially on the L2, there's a record of those transactions having happened, and a period of time in which the entire node operator base, the entire stakeholder base, that is Ethereum, can verify that data from the L2. So L2 s are trying to inherit the benefits of decentralization and security from the l one ethereum. And for Ethereum to behave in this way, we often call Ethereum the data availability layer for rollups.
00:13:52.666 - 00:14:57.614, Speaker A: Before blobs were a thing on Ethereum, before den Koon happened, Ethereum was not designed to be a DA layer. Ethereum was designed to be a general purpose blockchain. It was designed for people to be able to execute their transactions directly on Ethereum and have those transactions confirmed, verified and finalized all on the same chain. But with the shift to a more roll up centric roadmap, Ethereum is now trying to scale and trying to grow its ecosystem through L2 s. So with the introduction of Den Koon and blobs, you have additional block space, additional ability for and a special type of transaction for rollups. To be able to use Ethereum as a DA layer, be able to do so in a much more cost effective way than the way they had to before. They basically had to use the call data field of a regular transaction on Ethereum, meaning that rollups were competing with all the other types of transactions that users were submitting to Ethereum.
00:14:57.614 - 00:16:00.158, Speaker A: But now they have a dedicated block space, a dedicated type of transaction for data availability needs exclusively. These are blobs and peer DAS is the next iteration, the next step in which Ethereum developers are trying to expand Ethereum's data availability capabilities, make Ethereum a much more cost effective solution for rollups. Of course, there's been some leaps and some improvements made through Denkun. Pure DAS is really the next step of that. Peer DAS is expected to be able to increase the number of blob transactions that can be attached to a block from a target of three blobs per block to maybe 64 blobs or more. It's not clear exactly the increase that developers will be able to activate through peer das, like the increase in the number of blobs, but developers expect it to be extremely significant, like multiples more blobs. Because pure DAS is all about data availability sampling.
00:16:00.158 - 00:17:29.794, Speaker A: Instead of a node having to download all of the data in the blob transaction, they sample data in every single blob and thereby the computational load on nodes in order to support a higher number of blobs per block is a lot lower. If a node was just trying to verify 64 blobs and the entirety of their data contents, that would really overwork and overload the nodes on Ethereum. So data availability sampling is a way to increase the data availability capacity of Ethereum without significantly also increasing the computational resources that these nodes need. So peer das is a really important, I would say code change for Ethereum's roll up centric roadmap, and developers in the latest ACD call have agreed to activate it. And I think this creates quite a few different questions. The first, of course is is the inclusion of Peerdask going to delay the activation of Pectra? And as I said on this show multiple times already, I don't think that it was really ever possible, or I don't think the likelihood, I would say is very high for developers to be able to activate pectra in this year in 2024. I think that developers will most likely activate Pektra in 2025.
00:17:29.794 - 00:18:07.836, Speaker A: With the inclusion of peer Das now into the upgrade, I think developers will need a bit more time to work on everything to work on peer Das in parallel to the Pectra eips. I think yes, the upgrade is already shaping up to be larger than developers initially intended. There is no such thing. I think another developer said this at some .1 of these called but there is no such thing as a small fork. Developers had initially wanted Petra to be a small fork. Lo and behold, the scope of the fork continues to increase.
00:18:07.836 - 00:19:38.344, Speaker A: So I still maintain the highest likelihood is that the fork activates sometime early 2025. And yes, I do think that the additional complexity of pure das is going to cause developers to need more time for testing and need more time for development for this upgrade. I think the other thing that I'll note also is that while developers continue to discuss what else should be included into pectra on the consensus layer and have decided to do this like two epoch activation of code changes, there is still the possibility that on next ACD call, which is Acde, where developers discuss the code changes impacting the execution layer of Ethereum primarily on the next call. If developers decide that they want to include even more code changes, and these code changes impacting more the complexity of the execution layer of upgrade, the prog upgrade, there is still the possibility that we might actually just get two separate forks. We might have Pectra, this one upgrade now activated on two different times, two different epochs, and potentially a few execution layer code changes that get activated on the second part of Pektra. One of those code changes that I'm thinking about and that we've talked on this show before is EOF. There may be a few others that are packed in.
00:19:38.344 - 00:21:31.102, Speaker A: I think that developers are also still considering if they want to include another major co change on the consensus layer side, which is the SSC container format. This is a continuation of a long conversation about making Ethereum's data format between the execution layer and the consensus layer more consistent, there's obviously no decisions have been made yet about that code change, in particular the SSE code change. Neither has there been any conversation or decision yet about the EOf part. But this upcoming call, the next Acde call, is where I think that developers will really try and finalize the scope of Pectra. Because Pektra because consensus layer developers have decided to do this two epoch activation window for Pektra, I think there is a higher likelihood that potentially in the next ACD call, developers may toy around more with the idea of activating code changes on two different epochs, potentially moving, say certain EIPs that have already been included in Pectra, either in the second activation epoch or including say like a new EIP like the EOF EIPs or some other execution layer EIPs, and activating them on the second epoch. The idea is that if any of the work and if any of the development that goes into the eips that have been included in the second epoch get delayed and start to drag down the timeline for activation for all of the eips going into the first epoch activation, then they can just drop it. Then developers will just drop whatever is going into that second EpoC.
00:21:31.102 - 00:23:20.494, Speaker A: But I think that logic kind of already, as you can tell as I'm talking about this, developers are going to be spending their time ensuring that both are ready that both are as ready as possible for the activation of Pektra. And I don't think that developers are really likely to put in a ton of work preparing both sides of the upgrade and then just drop one completely. If anything, developers may activate the first epoch, the first eips going into the first pectra epoch activation day, oh my gosh, these words. And then developers will probably try and activate the second set of vip's in pectra thereafter and this will of course delay then the code changes that developers have already planned for the upgrade after Pektra. I believe that one, at least on the execution layer side, is called Osaka, and the big co change that developers want to implement into Osaka is of course the Verkle upgrade, another major overhaul to the data structure of Ethereum, primarily impacting the execution layer only though. So lots to think about. I think the biggest thing of course to keep watching for is will developers really move forward with a two fork activation of this upgrade? And if so, I think that with just pyradas going into the second activation epoch, that in and of itself I think there is still the possibility that the fork does not become too large, that the fork doesn't delay verkle and Osaka significantly.
00:23:20.494 - 00:24:29.424, Speaker A: But I think if there's more co changes that are bundled into that second part of the upgrade, then essentially you just have two hard forks, you just have two upgrades on Ethereum on a short timeline, one after the other. And I think rather than trying to tie them together, it may be safer for the network for developers to be able to activate them one after the other, for developers to be able to have some time in between them to really test the network, make sure that the network is stable. But who knows, if developers do bundle those code releases together and node operators really only have to upgrade their software once and then the two hard forks activate thereafter automatically. I think that will be the first for Ethereum to be able to activate a two part upgrade through just one software release. I think that'll be the first ever on the network to see something like that. And I think there are still quite a few questions about how to test an upgrade like that. Again, we're not sure if that's actually going to happen.
00:24:29.424 - 00:25:38.562, Speaker A: Developers may just double down on splitting this fork into two different hard forks, Pektra one and Petra two. And yes, that means that the Verkle upgrade will get delayed, but in my opinion I don't think that that's really a huge concern. I truly think that there isn't really a deadline for these upgrades. When the upgrade is ready to shift, the upgrade will ship. And so honestly I don't think developers really need to worry that much about a few more months or really even over six months of delay until developers get to the vertical upgrade. Especially if the code changes that they want to include in the Petra upgrade, in their view, are interesting and are the ones that they believe will have the most beneficial impact to the ethereum ecosystem. And one final thing that I'll say about the upgrade and the scope planning is I really hope that in the next two calls, basically the upcoming ac de call and then the next AC DC call, that developers will finalize the scope of Pectra.
00:25:38.562 - 00:26:57.784, Speaker A: I think one of the things that is continuing to drag down developers progress on Pektra and developers progress with these implementations is this constant discussion of oh well, what else can we include and how will this fork really be activated? I think once developers just finalize that and recognize that there are some code changes that aren't going to get into Pectra that will have to be pushed to the next fork, I think the focus on just the bundle of eaps that they have will really help the development process, the testing work that's being done right now, developers are kind of working. Client teams are really building out software on shifting sand on a foundation that isn't really set. So in order for Pectra to not be delayed further, I really think that finalizing the scope of Pectra should be the goal for the next two calls. And from what I hear, it is definitely going to potentially be the goal, hopefully be the goal for the next ac de call. But we'll see. I think this has definitely been a desire from developers too to finalize the scope, but there's so many competing interests and so many different ways. I think developers are really evaluating reevaluating how the Petra fork could go live.
00:26:57.784 - 00:27:26.724, Speaker A: So yeah, that's it for today's show. Thank you everyone for listening to this recap of AC DC number 134. I hope you'll tune in again next week. I hope that you learned something new about Ethereum on this show. I am signing off from the concrete jungle and I hope everyone has a fantastic week. Until next time, stay safe out there, everyone.
