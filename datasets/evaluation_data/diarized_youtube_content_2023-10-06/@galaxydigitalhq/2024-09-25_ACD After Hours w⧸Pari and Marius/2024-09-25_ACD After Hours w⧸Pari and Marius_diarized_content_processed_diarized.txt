00:00:10.360 - 00:00:35.265, Speaker A: Welcome to the Infinite Jungle. On today's show, I have two people from the Ethereum foundation who I listen to almost every single week on the All Core Developers call on today's show. Very exciting. First, I'd like to introduce Perry, a DevOps engineer at the Ethereum Foundation. He's usually one that giving the Devnet updates that I give on these calls, but he's the original, so thank you Perry for being on the show.
00:00:36.165 - 00:00:37.541, Speaker B: Thank you for having me.
00:00:37.693 - 00:00:55.865, Speaker A: And we also have Marius on the show as well. He is a guest developer. He's usually the one with the very spicy takes on these calls. You'll know him infamously for the EOF episode that I did, I literally named the episode after what Marius said on the call. Hi Marius, thanks for being on the show.
00:00:56.725 - 00:01:07.965, Speaker C: Hi, thank you for having me. Yeah, I have that episode bookmarked and I haven't had time to listen to it, but yeah, that call was pretty spicy.
00:01:08.985 - 00:01:09.729, Speaker A: Wow, you did it.
00:01:09.737 - 00:01:12.665, Speaker B: Like he also has spicy takes outside of the call.
00:01:12.785 - 00:01:19.565, Speaker C: Yeah, my spicy takes off the calls are usually even funnier.
00:01:20.505 - 00:01:40.655, Speaker A: Okay, well that's good because this episode is going to be kind of like a ACD after hours. We're going to talk about what happened on the latest All Core Developers call, which was also spicy. But I was surprised, Marius, I mean you didn't talk that much on the call, so I am curious to get your true thoughts on everything that happened.
00:01:41.755 - 00:02:12.545, Speaker C: I can tell you why I didn't talk that much today because I bought a new wardrobe and we had a lot of paper where the wardrobe was sent in and I had to cut it down for the garbage can and that's what I've what I was doing the whole call and so I couldn't, couldn't do the spicy takes. I, I wrote some in the, in, in the chat though.
00:02:12.925 - 00:02:35.779, Speaker B: But yeah, I don't know if you know about this, Christine, but around like a year ago I, I think we stopped it by now. But we used to have the party lounge at Ether, so immediately after all core devs was over, everyone would sort of move into or not everyone but like decent chunk of people would move into the party lounge. And then the hot takes really got in. I don't know why we stopped that. That used to be fun.
00:02:35.907 - 00:02:38.099, Speaker C: Yeah, we should, we should start that again.
00:02:38.267 - 00:03:02.085, Speaker A: Oh, I didn't know that that was a thing. The party lounge and the discord. Yeah, we should definitely start that back up because I too would like more kind of spicy takes after hours from the calls running through all the decisions that were made. But oh my gosh, Marius, priorities. I mean, this is the future of Ethereum we're talking about here. And here you are cutting down boxes in the middle of a very important meeting.
00:03:02.465 - 00:04:04.505, Speaker C: Yes, but I listened to it and it's also the old code of consensus layer meeting. Right. We have these two meetings and my takes are usually more needed in the execution layer meeting than in the consensus layer meeting. And I think the. Alex is actually a very, very good moderator of these and he has shown time and time again that he can like give everyone room to express their feelings about the topic and, but also like move the debate forward. And so there isn't that much that, like, where we need so much input from my side or where I feel that I have to speak that much because it kind of moved along very nicely.
00:04:05.645 - 00:04:57.215, Speaker A: Okay, let's dig into that because I do want to talk a little bit about Alex's moderation style, especially on this call. But before we get started with all of the questions for our listeners, here is a quick show disclaimer. I need to remind you to please refer to the disclaimer linked in the podcast show Notes. And note that none of the information in this podcast constitutes investment advice, an offer recommendation or solicitation by Galaxy Digital or any of its affiliates to buy or sell any securities. So, Marius, about Alex's moderation. On the call from me, a third party viewer into the call listening in this week, it sounded as though the decision to split Petra had already been made. Alex had proposed from last week's all core developer call.
00:04:57.215 - 00:05:44.545, Speaker A: Here's how I think Petra should be split. It should be the EIPS on DevNet 3 and the rest of the EIPS in Pectra in the second fork. That idea, of course, was brought up again repeatedly, primarily by Alex and the whole call. There was so much confusion, so many questions about whether to freeze pectoral one or not, whether to freeze pectoral two. If we do go ahead with the split, what do we keep in? What do we take out? To what extent do you agree that the decision had already been made before the call and to what extent do you think that, you know, the conversation and the confusion that was happening on the call didn't accurately reflect, like the decision that was ultimately made?
00:05:46.485 - 00:07:08.815, Speaker C: Yeah, I think many people felt the same way as Alex did with regard to splitting the call, splitting the fork before the call. And yeah, we kind of need this. We still need to make the discussion on the call still to still have the discussion and make the decision on the call, even though I felt like everyone was already in agreement that folks should be split, I think the biggest confusion came about on this call, particularly because people kept mixing in other decisions into this decision. So basically we were talking about two or three different decisions, whether to. Whether to split the fork, whether to keep the first fork and like, whether to keep the first fork as is or add something more to the first fork, or whether to. To also to add stuff to the second fork. And people have different views of what is really needed right now.
00:07:08.815 - 00:08:19.337, Speaker C: People have different views of what is already kind of finished and what can be easily put into a fork now and then. Also people have, like, they want to get their cool feature that they've been working on into the fork. And so there were a bunch of these champions of different proposals that started discussing whether to open up the first fork for the stable containers, or whether to open up the second fork for other features, or whether to prioritize worker in the second fork over eof. And so these three kind of different debates got mixed into the original debate of whether to split the fork. And that's why I think it took so much time, this call, to make that one decision. And I guess one more thing I.
00:08:19.361 - 00:09:29.685, Speaker B: Do kind of want to add is over the last week, almost every breakout room has had this as a topic, like, do we want to split the fork or not? So while if you just jumped from last week's call to this week's call, it's like, oh, why is the decision already been made? We've kind of been talking about this on calls, checking if people have any objection to it. Are they worried about something? And I think most of the worry is indeed this question of feature creep. Like, if we split the fork, will it. Will the next fork stay the way it is? And like Maria said, then that adds into so much more confusion because it's now a question of, okay, does this mean we're only taking the existing eips and making it into two forks? Are we adding new stuff to the next fork? Are we adding new. Are we adding small stuff to this fork? If we're adding stuff, then how small is too small? What features required? And this becomes really, really complicated to get through on a call. So that's like, I do really want to give credit to Alex. Like Marius said, it was a really confusing, loaded call.
00:09:29.685 - 00:09:53.705, Speaker B: And I think historically when a call has been this loaded, we would have dragged this on for two months. And I'm really glad that this cycle we were able to get it down to like two calls. Let's do a lot of async comms. I think TECU had a asynchronous note published. Aragon had an asynchronous node. RET had an asynchronous note. Ethpandops team can be warned.
00:09:53.705 - 00:10:22.339, Speaker B: The forks split from day one, so we didn't publish anything else. But so a lot of teams also did some asynchronous communication. So it's kind of this amalgamation of everything that Alex was, I guess trying to say, okay, here's the base decision. We have to walk away today with everything else. We can still bike shed, we can talk about, we can figure out if that stuff will probably still take two months. But let's not leave this one decision stuck with everything else to also take two months.
00:10:22.467 - 00:10:57.533, Speaker A: Yeah, it did really sound like from last week's call to this week's call, that base decision had been made. And like you said, there was all these breakout meetings, there was other asynchronous communication leading up to that. And in today's call, almost everything outside of that base decision, outside of like the eight Pectras on Devnet 3 being, you know, a shoe in for Pectra 1, everything outside of that was still up in the air. You know, what else would be added into what else is going to go into picture two, you know, and I.
00:10:57.549 - 00:11:29.981, Speaker B: Think the moment someone even makes like a passing comment, for example, why don't we add this one EIP here? Then people's alarm bells go off, they're like, oh, but that's not what I agreed to. I'm taking my decision back. Like we shouldn't do the fork split. And then I think it takes a bit of explaining that. No, that was just one comment. That doesn't mean that's changing the whole decision. We're only today agreeing that three is what we want to ship, of course, with changes as in updates to the EIP and so on.
00:11:29.981 - 00:11:52.745, Speaker B: But everything else is still, we'll figure it out over the next months. And I think that we will figure it out also scares some people. They're like, well, if we're going to figure out everything for the next fork, then maybe we agree to not split it and then we get all the EIPs we want. It gets very complicated, I think.
00:11:52.825 - 00:12:51.507, Speaker A: So I want to get both of your two's personal view on how you would like to see Picture one look and ideally, you know, your thoughts, your general thoughts on picture two. But before we move into kind of like, where do we Go from here. Now that the call has happened, I want to ask Perry you1 question about again, this is going to sound like a conspiracy theory, but I swear it's not about the way that Ethereum researchers generally champion the direction that these calls go in. So your team, Perry, originally initiated the idea, let's split the fork. Back in May, it wasn't seriously considered. All of a sudden Alex brings it up and now it's the base decision that was made for this call. There were code changes like SSC and EOF that many developers on the call have been championing and trying to push for.
00:12:51.507 - 00:13:19.385, Speaker A: It's very, very difficult to see these co changes go into an upgrade. But as soon as you talk about pure DAs, potentially in putting in a blob increase into the first hard fork and all these researchers on the calls being very in favor of it, it seems like it's a lot more likely to go into an upgrade. I mean, how much of an important role do you think and weight do you think researchers have on these calls? And do you think that's a good thing? Do you think that that's the way things should be?
00:13:19.965 - 00:13:57.465, Speaker B: I don't think there's a massive weight that they have. So maybe I can start with the first thing first. It was a complete fluke that the fork split happened the way that it did in the original document that we wrote. I don't think that had anything to do with because we wrote it that way, that's what happened. I think in my personal view, I would have also seen stuff like pure does happen first, etc. It was just from a testing perspective and I think the Ethpanda OPS team is one of the few teams that tends to work with ELs and CLs. So we kind of understand better in the testing team as well.
00:13:57.465 - 00:14:26.885, Speaker B: We understand quite well what bandwidth each teams have. So it was an educated guess that we cannot ship 20 something EIPS at once. So that's why we were suggesting that, hey, maybe we split it in the middle, do one section first and another section later. Because from an EL's perspective they're like, yeah, well we have five EIPs, we're good. And from the CL's perspective they'd be like, oh, we have five EIPs, we're good. But they don't necessarily think about all the other complications there. Okay.
00:14:26.885 - 00:14:49.779, Speaker B: That being said, I don't necessarily think researchers have the final say in what's going to go on in the fork. I think that's always going to be with the Client teams because in the end they're the ones that will have to implement it. They're the ones that will actually make the releases and that's what will show up. But I think researchers do think sort of long term.
00:14:49.827 - 00:14:50.035, Speaker C: Right.
00:14:50.075 - 00:15:40.519, Speaker B: So they're showing up on these calls and they're not necessarily doing the stuff that's immediately next, but they have to keep an idea of where Ethereum wants to go and what is important for Ethereum to get there. So them showcasing support is also a way for the client team to be like, okay, maybe it does make sense because this is the roadmap we agree to. These are the changes we want to get to. So maybe it makes sense to do something ther stuff this time. So I wouldn't necessarily say it's some sort of like conspiracy group, but it is the group that I guess has the longest term view of Ethereum. Client teams I guess tend to have a really great view of their own client as well as the next fork and maybe one fork after that, but not necessarily two forks down the line or three forks down the line.
00:15:40.567 - 00:15:41.135, Speaker C: Right.
00:15:41.295 - 00:15:45.131, Speaker A: Marius, would you largely agree with what Perry's saying?
00:15:45.323 - 00:17:26.485, Speaker C: Yes, I would totally agree. I think one thing why everyone was kind of on board with this idea is that we had these features since Nairobi. We had this kind of feature set since Nairobi, except for 3,074 which was replaced with 7,702. But client teams kind of had or everyone kind of, at least from my point of view, it felt like everyone felt like this is a very kind of complete fork that we've been testing for three defnets now that's going on the next, on the fourth devnet we have fuzzing for it, we have tests for it, we have these defnets. So it kind of feels like, okay, it's done and now we want to wait another two or three months for these other kind of five features to finish to bring them into the same fork. And I think a lot of teams or a lot of people kind of felt, felt this way about the fork and that's why it was such, such an easy decision to kind of split the fork. Because it makes no sense if we have like five features completed now to wait until we completed the two big, very complicated, very complex features in the future and then delay, delay the features that we have ready right now for that.
00:17:26.485 - 00:17:54.001, Speaker C: And I think that that was kind of my view of why and like de risking the fork and whatever. But the main thing was we kind of have fully done fork or almost done fork and now we're waiting on way more stuff to make it in and that's just not a good way of shipping things, in my opinion.
00:17:54.163 - 00:18:30.743, Speaker B: I also think if you went back a few months, it wasn't as clear as to which features would be more ready. So MaxCB, for example, when we met at the NOTA Interop, MaxCB had no way to realistically do consolidations. Yet at the time we were still talking about custom ceilings. 7702 didn't really exist. Slash was heavily being bike shedded. At the same time EOF had implementations, EOF had quite a lot of local tests, et cetera. And the DevNet cycle that was most successful during NEOTA was the peer DAS devnets.
00:18:30.743 - 00:18:57.609, Speaker B: So they were technically all in the running at the time. It's just that the changes chain set that was required to extra that we want to ship as a happened to be easier than expected and we removed some features. So custom ceilings, for example, doesn't exist anymore. Consolidations became easier. Initially we were thinking of doing it by an API. Now it looks completely different. 7702.
00:18:57.609 - 00:19:42.645, Speaker B: It took a while and a few iterations to get there, but my client and a lot of people in the abstraction space put a lot of time and effort into getting stuff up and running. Not to say that the other teams didn't, but Peerdesk, for example, there was a lot of complications that came up and client teams are still figuring that out. There's an optimization required for some verification that they're figuring out. Eof. I've been told a lot more clients now have, but it's just starting to get to the stage where a lot of security people are looking at it like Marius is looking at it and other people are looking at it as well. So I'd also say it might seem like we envisioned that this is going to happen today, but honestly, it could have looked very different.
00:19:43.385 - 00:20:19.425, Speaker A: That's fair. Hindsight is always 2020 and I know we still have quite a ways to go. Many more calls, like you said, Perry, to really flesh out what this split is going to look like in practice. But at this point, now, here in time, realistically speaking, can you give me, both of you, can you give me your best guess as to what Pectra 1 will look like and when and possibly even Pectra 2? And could you maybe contrast this with realistically what would happen but ideally, if it was up to you?
00:20:20.525 - 00:21:46.477, Speaker C: Yeah, I think we kind of have like I kind of subscribe to this idea that Petra 1 should be what we have on DevNet 3 right now with the changes that we still want to make. So no feature creep, none of the EAPs should be thrown out in my opinion. They all look kind of okay to me. Obviously if something like really security critical comes up with them then we will need to pull them. And I think we can have the debate on Petra 2. I think that is more up in the air than PETRA one. I think from timeline wise it would be good to have a very clear spec of what is going to be picture one by defcon so that we always schedule some time for the developers to meet around defcon so all of the developers, all of the researchers meet privately so we can discuss about upcoming features, upcoming forks.
00:21:46.477 - 00:22:17.485, Speaker C: And it would be great to have this fork tied down by then so we can actually discuss what's next instead of still discussing this fork. So I would hope that by defcon November we would have at least the defnet, sorry, the feature set tied down and maybe start a testnet with it. I think Perry, you had the idea of a named testnet by defcon.
00:22:18.145 - 00:22:53.095, Speaker B: Yeah, maybe I can go. It's pretty much similar to what Marius said. I also like how DevNet 3 looks also from a feature set. I think there are still two things I would want to change like EIP wise in an ideal world. But if the world looks like opening the discussion to change any EIP gets chaotic versus shutting that door, I would prefer to shut that door. But in an ideal world where I get to choose, I would want to increase the target of the number of blobs we have. So from three to four.
00:22:53.095 - 00:23:35.855, Speaker B: While this doesn't require almost any testing, we're not changing the network throughput, we're not changing that much. All we're changing is what the targeting mechanism looks like. In my opinion, that's like the safest way to get like a minor bump in blobs until we ship pure das. And another one that the second one's a bit more work. It's the CL telling the EL how many blobs are supposed to be in a slot. So this is a EIP from Alex and this means in the future, whenever we want to do any sort of blob changes, we don't need coordination with the ELSA el. Just listen to what the CL set, it's one place you have to set it.
00:23:35.855 - 00:24:24.239, Speaker B: And this does need some work. But for me peer does implies that we're going to do a blob change and it would be nice if we don't have to change if we don't have to touch the mechanism of how to do a blob change in the same fork. So I would want to move that one thing forward such that we can just focus on pure Das blobs eof the next time. But again, in a world where opening the door to bike shedding VIPs versus closing the door, I would prefer to close the door any day. And I'm very happy with how like DevNet 3 looks. And from a timeline perspective, the idea is to now have some sort of public test net. So similar like Kintsugi that we had for the merge, we're still looking for names.
00:24:24.239 - 00:24:47.755, Speaker B: So if someone has name suggestions, please reach out. Current contender might actually be fruits. Like Thai fruits. Yeah, all Thai metro stations. But yeah, we have to figure that out. That's the hardest part of coming up with a testnet. But the idea is that there'll be a relatively longer living testnet that everyone who's having hackathons around devcon can play with that.
00:24:47.755 - 00:25:25.745, Speaker B: It becomes that location where if you want to try something at devcon, that's the place you can try it. And the main reason not to directly target for a testnet like Sepolia is that we still haven't feature frozen everything. There's still some audits missing and stuff like that. So we don't want to just speedrun Sepolia and leave it in a state where it shouldn't be. And just having like a separate testnet is a bit cleaner of a way of promising something at least in the future. And that would sort of imply end of this year, early next year we should be more or less ready for a fork, hopefully.
00:25:26.155 - 00:25:51.683, Speaker A: Yeah, that makes sense. A tad ambitious, but we shall see. I guess it does depend on, you know, whether or not there's a little bit more added to the to the picture one fork. Interesting. Interesting that you guys both did not mention the SSE related eips. I think you're right. Everybody is very afraid about opening up that cam uniforms, like even opening up the door a little bit to any change.
00:25:51.683 - 00:26:32.359, Speaker A: It could just like fling the door wide open. And so everybody is very deathly afraid of that happening. Two very kind of quick questions that I want to ask specifically to each of you. First off, Marius, I have to ask you about what the heck is going on with the Virkal team. Angath, this call, there is a severe disconnect. I will let you know about the urgency and the readiness of VirQL. There were people on the call saying that Verkal could even be more ready to implement than EOF.
00:26:32.359 - 00:27:00.355, Speaker A: And there was intense disagreement about whether or not Verkal should even be what developers do for Picture two instead of all these other code changes. This was reiterated by certain client teams on the call, but also primarily by the people on your team. So could you please speak to how I think contentious the Verkal upgrade has become?
00:27:00.855 - 00:28:06.185, Speaker C: Yes, I can talk a bit about it. So we in the guest team, we don't really, I think other teams have more of a team opinion where everyone in the team is kind of sharing the same opinion. And I think in the guest team we always handle these calls and our involvement in the process as everyone is free to share their own opinions. And I think that's very good. And so we also sometimes have disagreements about what other people share or talk about on the call. I think with the worker trees in, I think that the vocal team or the people working on vocal trees have been looking at it like they're looking at it every day, all day, every day. The same as some people.
00:28:06.185 - 00:29:38.909, Speaker C: Like the EOF team is looking at EOF all day, every day. So each team kind of knows their code is approaching readiness and in addition, they have a very shallow understanding, I guess from the other project. And so they kind of underestimate or over, like overestimate their own progress and underestimate the progress that the other team is. The other teams are doing the thing with. Like, I've been very openly against EOF I think in the past, but I'm still working on it. We have a client that is passing all of the tests, but even then I recently, like last week found a bug or a test case, an edge case that was not covered under the test, or it was covered under parts of the test, but not others. And so it's just, it's an extremely complex change where the devil is in the details, while the vocal stuff it feels more of if it works, it works.
00:29:38.909 - 00:31:04.655, Speaker C: And there's not so much so many like, small details in it. But yeah, regarding the thing is, kind of both teams see or both, like people in both teams see their work as the most important one. And people in both teams kind of see the issues that happen if their stuff is not shipped first. So for eof, if it's not shipped first, it will mean we will have like another year or two of not having EOF on mainnet, which will mean that EOF is also not available on L2S and either we will have less buy in to the EVM ecosystem or we will have a harder time to switch to EOF later down the road. I think this is a main concern. Why not shipping, why we should ship EOF quickly. And for the vocal team, the problem is the transition.
00:31:04.655 - 00:32:22.317, Speaker C: The longer we wait, the more the state of Ethereum grows. And that means that the time that we need to transition the state from the Merkle tree to the Mercury tree goes up as well. And so that is kind of like why they want to do it as soon as possible. And so yeah, we have these kind of these two sides within the development community and I think we just need at the end, we just need to sit down and see what is done now, what can go, what can we schedule and then we will schedule what's finished. And I think some of the, like the frustration that especially Guillaume has was some of the things that the EOF team said about eof, that it's that it's done, that we can ship it and that we just need like one engineer for three months to implement it on each team. And that was just. It wasn't true.
00:32:22.317 - 00:32:41.111, Speaker C: It was way more work than that. And it's still not really finished, I would say. So it's not in a state where we can ship it this year. And so yeah, there's been some discussions about this.
00:32:41.303 - 00:33:29.295, Speaker A: Yeah, I appreciate your thoughts, Marius. And it's taken well that the Guff team all has diverse opinions, a diversity of thoughts on this. And yeah, I think developers definitely aren't seeing eye to eye here. I think with the splitting of Petra on today's, not today's call by the time the show has come out. But on the most recent call there was also lots of disagreement on the priorities between not just EOF and VirQL, but Verkal and Peerdas. And that also starting to ruffle feathers between developers because of this intense kind of belief that Verkal should be the next fork or upgrade after Petra. But we shall see.
00:33:29.295 - 00:34:16.975, Speaker A: Perry, my question for you was around one of the comments that you had shared on the latest call that you wanted to change some things about the ACD process and that this was going to be something you wanted to propose at devcon. Could you give us a little bit of a precursor or initial thoughts on how you would like to see the ACD process change? Because it's clear there are EIP champions and there is an abundance of differing opinions about what needs to come first. How do you think the ACD process can change for the better, to create consensus to become more. A more functional, to become More functional.
00:34:18.515 - 00:35:02.940, Speaker B: Yeah, maybe some context helps. Right, so if you went back to an academic in 2018, the problem wasn't having too many EIPs to ship. The problem was almost exactly the opposite. We had too little to ship and we couldn't agree on when something was ready to ship it. There are literally forks in the past where the entire fork is just a difficulty bond pushback, which you can't even imagine doing today because there are like so many EIPs that we want to ship, so many more client teams, etc. Also, back in the day there were just fewer client teams. I think if a super set of like, what, three client teams agreed on something to ship, that was pretty much it.
00:35:02.940 - 00:35:45.527, Speaker B: We were basically on easy mode and I think the whole ACD process was on easy mode and stuff got added along the time, along the way. Right. We got way more ELs in there. Then the CLs came in, then we did the merge. Now two layers have to discuss how stuff goes and the process itself hasn't changed that much, while at the same time what we want to ship on Ethereum has also drastically grown. And then we also have this third entity that didn't necessarily exist back then, which was not just the client teams, but also testing teams. I don't think the testing team was Vocal in any ACD pre 2020Probably, or I don't know.
00:35:45.527 - 00:36:40.101, Speaker B: I only started attending ACDC while the whole process has kind of evolved. I don't think we've necessarily gotten better at deciding how do we work on a certain set of EIPs while someone is literally working on a day in and day out and yet being able to say, hey, this is not going to go in next, There is no process for it right now. I think there needs to be some sort of mechanism where we can push forward different features and then decide which is most feature complete and at that point decide to ship that. So instead of saying, this is what we're going to ship today, this is the next fork, this is the next fork. If you don't get in one of these forks, see you in two years. We need a better way. I feel like Petra is hinting at that because we said, hey, there are these three feature sets.
00:36:40.101 - 00:37:07.363, Speaker B: These three feature sets are more or less on the same level of discussion. Let's work on them, let's print on them. And then three, four, five months down the line, we're like, okay, let's take a step back and see which ones are ready. These seem ready. Let's spend the next Two months shipping them, the other two continue working on it, and then we'll do this reevaluation process in the future. Except the. Because we didn't explicitly set out the process this way.
00:37:07.363 - 00:37:32.075, Speaker B: Some features, sse, for example, or Worker didn't get the benefit of someone working on it full time for these few months. And the teams themselves are not set up for this. Get has what, 10 people? Let's say you assign one person per feature. I've named five features. Five people are just right there. And no one's even looking at the GET issues. No one's maintaining the code base, no one's doing anything yet.
00:37:32.075 - 00:38:09.111, Speaker B: And you're not calculating, like, people taking time off a vacation. Same for testing teams, right? We rely on like a bunch of tools. If you tell me that Fork X is next, I can optimize and merge in all of these tools. But if now there are four features, literally for Worker, there's. There's the Genesis tool that has a fork inside a fork inside a fork, and there's just like four or five replace functions in Go. And like last week, Proto is still like the maintainer of all the Genesis tools. And I'm still actively, like, doing subsystem.
00:38:09.111 - 00:38:57.353, Speaker B: Since Proto is not with the EF anymore. He just left a comment saying, this saddens me. That's it. And I'm like, yeah, I get that it saddens you, but that's kind of the reality, because we can't merge anything in because we don't know when workers going in on what feature. Whereas if we went in with this mindset that, hey, they're just features, let's enable them, then we'd structure stuff differently. And I think that would also help de risk this feature of I have to claim that my feature is done, because if I don't claim it, if I don't want to ship it, I have to wait two years now, and I don't want to wait two years for something. So, yeah, I don't have a direct answer, but, like, this sort of thought flow is what I want to discuss it at defcon.
00:38:57.353 - 00:39:07.145, Speaker B: And I'm sure over the next month it'll get refined, there'll be more people talking into it. This is literally like a random thought over the last days. It might not even be the most coherent one.
00:39:07.185 - 00:39:43.691, Speaker C: But still, I think one issue is that client teams are just strapped for time. So you cannot. Usually the client teams look at the feature as soon as it is considered for inclusion or scheduled for the fork. This is where the Client teams do most of the work. It happened so many times in the past where we were. Everyone was kind of aligned on something. And then Peter came in, looked at it, and it's like, that makes absolutely no sense.
00:39:43.691 - 00:40:03.787, Speaker C: And everyone was like, yeah, you're kind of right. And he showed us a way of doing it very differently, which was way, way, way better and way smarter. And yeah, it's. It's go, go. Peter, definitely. He's. He has.
00:40:03.787 - 00:41:11.765, Speaker C: He and Martin and there are a few people that just have such a knowledge of the overall protocol and how things work together and just like, just the assertions in their head about how the protocol should function that they can just like, sometimes just like, swoop in, look at something for two hours where everyone else would. Would look at it for, like, weeks on end and just say, okay, have you tried doing it this way? And it's just a way more elegant and nicer solution of doing it. And yeah, but these people, they have a lot of other work to do in order to maintain Ethereum. And so it's. Yeah, it's complicated to do it. But I also agree that we need to change something since we've grown so fast, we have so many people in the call now. There's so many different.
00:41:11.805 - 00:41:34.515, Speaker B: Maybe the solutions even, like, picking instead of like, this is what the next work is. These are most likely features that we want to ship in the short term. And then, of course, it doesn't matter if someone looks at all of the features on day one, but at least at the time that everyone else is working on it and pushing it forward, we could then redecide stuff, I don't know, a few months in.
00:41:35.055 - 00:42:10.913, Speaker A: Yeah. I also think it's a mistake to plan future forks outside of the next immediate one. I always feel like that's a recipe for disaster on these calls. And I gotta agree, like with you, Marius, that having those people that understand the protocol is so important. But it's also getting harder and harder to have that kind of view of the protocol as the protocol becomes far more complex and those people are leaving. When I got the news that Danny was leaving at the foundation, I was like, oh, well, that's kind of. He has such a wealth of knowledge.
00:42:10.913 - 00:42:50.095, Speaker A: When Ben Edgington said that he was going to go to do the optimism stuff, I was like, oh, that's such a wealth of knowledge that's leaving. And of course, there's ways to mentor new people. And there's always an opportunity, I think, for more people to come and infuse fresh Perspectives, So not the end of the world is what I'm saying. But it is becoming harder, I think, and there's becoming fewer people who have that kind of built up knowledge. I have taken up so much of your guys time. So thank you for being on the show and for spending time sharing your thoughts with me. Like very nuanced takes which I really appreciate.
00:42:50.095 - 00:43:37.725, Speaker A: No, like, yeah, black and white kind of easy answers here, but I get it because it's, it's a lot of complicated topics. One final question though for the both of you and please try and keep your answers short because I realize I should let you guys know, like let you guys go. It's late over there. Very high level Ethereum is. Many people are worried about Ethereum's future and many people are worried about Ethereum's value. And I get it, developers don't care about the price, but there are many of us who do who care about the eth price. But more broadly we care about Ethereum as a technology having utility and having resilience over the next couple of years and continuing to attract a lot of value and users.
00:43:37.725 - 00:44:23.309, Speaker A: And there's clearly a lot of disagreement about what the most important upgrade for Ethereum is. I think the merge was schelling point. It was the milestone that everybody was racing towards and that really brought people together. What is Ethereum's biggest priority now? What does Ethereum need to be successful, to succeed, to stick around? Is there one upgrade, like one thing that you think Ethereum really needs and then it's set, like its value is going to go up, like we're going to go to the moon. What is the biggest priority you think for Ethereum right now? Yeah. Marius, do you want to go first?
00:44:23.477 - 00:45:21.365, Speaker C: Sure. I don't think there's anything, to be honest. I think Ethereum is delivering on its promise of decentralization and censorship, resistance and being a global selling point. There are small improvements that we need to make over time and we are definitely not there yet. We can just not, we can not go away. Like maybe the bitcoin developers can go and hope that our machine will run forever. It's kind of like we're kind of always fighting, we're always fighting against these forces of centralization and these forces of censorship on the network.
00:45:21.365 - 00:46:29.595, Speaker C: And I think we kind of have solutions envisioned to most of the problems that Ethereum currently faces and we still need time to implement those solutions and bring them. But I don't really see one big thing that we need to change for Ethereum to work Ethereum works. And Ethereum works for millions of people around the world who can use it to send transactions, to transact, to take part in this new economy, this emerging economy. And so, yeah, just making small improvements, making it better for everyday users is a thing that I think we're working towards.
00:46:30.575 - 00:46:59.875, Speaker B: I definitely agree. I think Ethereum already has a lot of features there. But one thing that's always bothered me over the last year is usability. Like, for example, yes, I can use Ethereum. Can my dad use Ethereum easily? He has. I mean, he manages. But it's clearly still a while away and I'm hoping that EIP's X7702 would really help, like boost how Ethereum is used.
00:46:59.875 - 00:48:01.355, Speaker B: I think initially I was still envisioning that. So for example, a year ago, if you were out for dinner and then you were trying to pay for stuff and you wanted to settle on Ethereum, that was still quite hard. But today with L2s and apps that really have like native L2 integration, that problem is kind of solved. So I want to see more scalability with nicer ux. That also means the roadmap for me is very focused, very much focused on like stateless ethereum or peer DAs or from, at least from what I've been told, ERF helping, security, etc. So I do think there's like a core feature set that I do want to see on Ethereum over the next years and of course censorship, resistance as well, with some form of ielts, epbs, et cetera. So I do think the set of like four or five different big features, all of which are, I think, being researched and actively worked on one ship, should fundamentally change how well Ethereum works for the regular person.
00:48:02.215 - 00:48:07.213, Speaker A: Native account abstraction, is that on your mind as one of those big milestone?
00:48:07.389 - 00:48:32.693, Speaker B: Ideally it would be amazing, but I mean step by step, let's first do 7702. Let's learn from 7702. I'm sure everything won't be perfect. I'm sure there'll be a lot of mistakes. So that's also why I'm just never a fan of committing to this big blue sky project. Let's do the small thing, learn about how we failed in the small thing. Because let's be real, everything fails in some degree or the other.
00:48:32.693 - 00:48:48.875, Speaker B: And then let's improve it and iteratively make it better until we reach the space that we want to be, rather than like going into a side closet for five years, building account abstraction, coming out like here it is and no one wants to use it. I would always prefer doing these iterative things.
00:48:48.995 - 00:49:20.545, Speaker A: It sounds like everything is a gradual scope creep, but that was also the way that this conversation went. A gradual scope creep of this conversation getting longer and longer, but so relevant. So I thank you guys again so much for the thoughts and I hope to have you guys again on the show at some point. Thank you to all of our listeners who are listening to this episode of the Infinite Jungle. We hope that you learned something new about Ethereum, and we hope that in your explorations of the Infinite Jungle that is Ethereum, be sure to stay safe out there.
