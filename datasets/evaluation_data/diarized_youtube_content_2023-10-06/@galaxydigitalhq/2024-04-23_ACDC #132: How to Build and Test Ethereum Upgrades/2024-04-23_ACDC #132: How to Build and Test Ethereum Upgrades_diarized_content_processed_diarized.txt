00:00:10.120 - 00:00:37.030, Speaker A: Welcome to the infinite Jungle, the podcast about the evolution of Ethereum. Today on the show we're going to be talking about the initial code specifications for the electra upgrade and more broadly talk about how the upgrade is going to come together, the process in which developers are now going to build out the electra upgrade. So buckle in, get ready. Before we start the show, I'm going to give you a quick show disclaimer.
00:00:37.222 - 00:00:54.046, Speaker B: I need to remind you to please refer to the disclaimer linked in the podcast show notes and note that none of the information in this podcast constitutes investment advice, an offer, recommendation, or solicitation by Galaxy Digital or any of its affiliates to buy or sell any securities.
00:00:54.230 - 00:02:17.044, Speaker A: Yesterday, Ethereum foundation researcher Alex Steve Stokes, who was chairing yesterday's dev call, shared that the initial specifications for the electra upgrade has finally been released. Well, I guess it's not really finally because we're really in the early stages of building out this upgrade. It hasn't been that long since Ethereum completed the Denkun upgrade, and it really is actually only a couple of weeks since the Denkun upgrade went live. But as we've been talking on this show for the last couple weeks, developers have been debating what should go into the upgrade, what shouldn't, and now, since there's some amount of consensus on at least the core parts of the electra upgrade, developers have built out the initial code specifications for Electra. This is the first draft of Elektra specs. For those of our listeners who may not know what specs are, specs are really the guideline for client teams to use in order to implement all the code changes that's going into the electra upgrade. So we have these teams, these client teams that are all building out software that people are going to run on their computers so that they can connect to the Ethereum blockchain.
00:02:17.044 - 00:03:12.062, Speaker A: And this software is called clients. So you have different kinds of Ethereum clients, Ethereum clients that are all implemented in different computer programming languages. So some of them are written in rust coding language, some are written in go, the go language, computer language, and some are written in Java. So these are all different clients and there is no central authority. This isn't like one company that's pumping out all the different Ethereum clients. There are about four major client teams for the execution layer of Ethereum and about four major client teams for the consensus layer of Ethereum. And all these teams are funded and they operate in different ways.
00:03:12.062 - 00:04:28.916, Speaker A: So one of them is the Bayesu and the Tecu team are funded and supported by the consensus. The consensus company, consensys also builds products like Metamask and a bunch of others like Infura. Some of these other client teams are grant funded, so they get grant money from major entities in the Ethereum ecosystem, like the Ethereum foundation, while others are employed by L2 teams. So like Arbitrum supports the prism client. So you have all these different client teams, and once developers, once client teams agree on what's going into an upgrade, they have to figure out how to implement all these code changes. And if you don't have a unified specdoc, then chances are these client teams are going to be implementing one EIP in a vastly different way than another team. So Ethereum foundation researchers are usually the ones to draft and release these, these specifications for how the upgrade should look.
00:04:28.916 - 00:05:22.900, Speaker A: It specifies EIP, whatever number it is. These are the details and the guidelines for how they should be implemented in a client. And now clients will still have small differences in how they implement the code changes, but nothing that would break the consensus of the network. So if I run one client and somebody else runs another, I should still be able to connect to the same decentralized network that is Ethereum. So specs really are the guidelines that client teams need in order to confidently start working on building out the upgrade and implementing the code changes. So that's what specs are. And the very first specs, very first draft of specs came out for Elektra recently, and developers on the latest developer call were talking about all of the questions about the spec.
00:05:22.900 - 00:07:01.330, Speaker A: They were talking about different gaps in the spec that need to be filled at some point. Now that the specifications are out, developers were talking about how certain parts of the spec are definitely going to change, but you should still keep working on it, and here's why. One of them was around the implementation of increasing the maximum effective balance. We've talked about that co change quite a bit on this show, and as listeners of the show should know already, one of the big questions is whether or not consolidation of state between validators should be whether that should be an operation that's initiated from the consensus layer directly, or also can be initiated from the execution layer. So basically, should a smart contract on the execution layer be able to trigger a consolidation of stake, a consolidation of stake and pass over that kind of operation, say like if there's a lido or a rocket pool, these kind of staking pools, these staking pools that are run by smart contracts, self executing code, should that code be able to initiate consolidations of stake and consolidation of validators that live on the consensus layer of Ethereum. And it seems like developers are leaning towards doing that, towards creating that feature and making that possible on Ethereum during the electra upgrade. But as the specifications for Electra stand right now, that hasn't yet been baked in.
00:07:01.330 - 00:08:07.466, Speaker A: So Stokes on the call was talking about how developers should still build out all the functionality for enabling consolidation of validators on the consensus layer. And later a part of the specs that will be added is an operation to trigger that behavior from the execution layer. Another open question was around a different EIP going into Electra that is going to make the attestation aggregate process more efficient. So every time we have a block, you have validators that are voting on the block, attesting to the block's validity. And to make that process more efficient, there's going to be changes coming to the attestation format. And developers were talking yesterday about how we deal with that transition from the old format to the new format. How do we ensure that attestations that are invalidated before Elektra is activated? How do we make sure that transition happens in a smooth way? Any major decisions decided on how exactly to change the specs.
00:08:07.466 - 00:09:34.536, Speaker A: But that is an open question that developers had mentioned, and another really important one that I want to mention on the show. Another open question around electrospecs is this idea of a generalized structure, a generalized format for execution layer messages to be passed to the consensus layer. So we just talked about, we just talked about the messages to trigger validator consolidations. So you have validators on the consensus layer, validating transactions and bringing together the consensus of the network, making sure that Ethereum continues to progress as a decentralized blockchain. And more and more, there's a greater popularity for operating those validators and having staking as an activity, doing that through smart contracts, doing that instead of running a validator yourself or creating your validator by going through a centralized company using a smart contract based protocol like Lido or rocket pool to run those validators. This is becoming increasingly more popular. I think Lido has about one third, roughly one third of total controls, roughly one third of total e staked on Ethereum.
00:09:34.536 - 00:10:38.112, Speaker A: And it's not just the consolidation of validators. There's two other code changes that have already been approved for Electra. One of them is to enable new validator deposits to be processed and validated from the execution layer rather than the consensus layer. There's also another code change that's going to enable validators, validator exits to be triggered from the execution layer, instead of only strictly through the consensus layer. So whenever you want to withdraw a validator completely from the network, this is something that smart contracts will be able to do after the electra upgrade is activated. So you have all these different kinds of operations now impacting the consensus layer, impacting validators that will actually be initiated from the execution layer. And hence there was discussion yesterday of a generalized format for these types of messages.
00:10:38.112 - 00:11:48.132, Speaker A: This would be helpful so that when developers do increase even more functionality, so that more validator operations can be triggered by smart contracts from the execution layer. It doesn't have to be a one off change. It can be a change that is implemented to the generalized format. This will help with testing. This will help with ensuring that these updates to how messages are passed from the execution layer to the consensus layer is contained in this format, a format that makes future changes a lot easier for developers to implement. So this kind of if developers do decide to implement the code changes that I mentioned, Max eV validator consolidations triggering validator exits with a generalized format, then the specs would need to change. Because right now, the way that the electra specs are written, it doesn't include anything about a generalized format.
00:11:48.132 - 00:13:20.844, Speaker A: It simply implements these code changes, each in their own contained way. So in order to exit a validator and initiate that operation from the execution layer, here's how you would be able to complete that one process, that one new update to the protocol that is ethereum, but with a generalized format, then you would have that template. And in order to implement a change, like being able to exit a validator from the execution layer, you would make an update to that template, to that generalized format for passing execution layer messages to the consensus layer. So developers have been talking about that generalized format, recognizing the benefits for it and how much it would pretty drastically change the specifications for Elektra. And so developers had talked about trying to get consensus around the generalized format as soon as possible so that client teams can start working on it, and they don't have to implement all of these code changes, and then have to make major changes to that implementation again when the generalized format is ready to go. So this is a kind of a perfect example of how Ethereum upgrades generally work, and how Ethereum upgrades are prepared. There is a document that's released that gives you the guidelines for how these code changes should be implemented.
00:13:20.844 - 00:14:32.656, Speaker A: Client teams try and implement it. They discuss it, they talk about open questions around it, gaps in the spec that they need more specification on the clients are the client teams and the Ethereum foundation researchers do a lot of back and forth. There's a lot of communication that happens between the spec and the implementation work, and the implementation work informs changes to the spec. So we have the first draft of Elektra, but it's very unlikely that the specifications that for Elektra that are out right now are really going to be how the specifications look once Elektra is fully implemented on Mainnet. So there's lots of back and forth. Expect the specifications to continue changing and for developers in future calls to continue to bring up these kinds of open questions on how the specs should be changed and how the implementation work is going across client teams. The third and the last step that I'll mention in this process that developers are already really excited to get to is once you've implemented the specs across different clients, you want to test them on a network.
00:14:32.656 - 00:16:19.810, Speaker A: Of course, not the actual Ethereum main net, but you want to test it on a closed private network to make sure that these clients are all communicating with each other properly, working in the way intended. And these are our, these closed private networks for testing are usually called net devnets. So developer focused testnets devnets and the amount of tooling for devnets and the amount of tooling for testing to catch bugs between different clients, to be able to spin up new devnets really easily that maybe mimic the same environment as Ethereum mainnet. These are all tools that have become a lot more robust and the testing process has become generally a lot more streamlined on Ethereum over the last few years, I would say since the Ethereum merge upgrade, when Ethereum had its major transition from a proof of work consensus protocol to proof of stake. And so once there's an initial draft of specifications and client teams try to implement it, and they feel confident about their implementations, they move on to a devnet, and on this devnet they are able to see the software running and interacting with other clients and one of the main teams responsible for the testing part of seeing how clients interact and seeing how the implementations are interacting with one another. This team is called the Ethereum Foundation DevOps team, developer operations team. I think that's the full name, and the shorthand is DevOps, the EF DevOps team.
00:16:19.810 - 00:17:36.172, Speaker A: And there's quite a few members of that team that you'll hear very frequently on the developer calls. On the Ethereum developer calls. One of the main DevOps engineers that I really respect and that I love to hear updates from is Perry and in the last couple of weeks, I'm going to link to this in our show notes, but I'm going to link the DevOps Twitter handle in our show notes, because in the last couple weeks, the DevOps team has announced and open sourced several testing tools that the EF uses to test Ethereum upgrades. So they've released, I think, three or four different testing tools for spinning up these devnets, for easily catching bugs between different clients and resolving them. A whole bunch of pretty useful tools that anyone in the Ethereum ecosystem can use to prototype an Ethereum improvement proposal. So prototype a code change that you want to see, go into the protocol to be able to do your own type of testing on the Ethereum, on the Ethereum protocol. So based on the Ethereum protocol, so pretty powerful stuff.
00:17:36.172 - 00:19:03.674, Speaker A: And once testing happens on these devnets, so once the Ethereum DevOps teams start to really like break apart the implementations that have happened, that feedback goes back to client teams. Client teams work on updates to their clients, and that usually also informs different areas of the spec. So the spec, the client implementations, and then the devnets primarily run by the DevOps teams. All three of these groups of people, some of which have overlap, this is the bulk of what takes the longest to prepare an Ethereum upgrade. You're going to have the devnets inform feedback to the implementation for the clients. The client teams are going to have feedback for the specs, and on and on until developers on all three teams are very confident that what they have is a product that doesn't have any bugs and works very smoothly with one another and is very well defined in specifications. So this is how once they get to that stage, once this kind of back and forth has finally resolved itself, that's when you're ready to share the software that you've built, share all the client implementations with the broader Ethereum ecosystem, and have all node operators publicly be able to see the.
00:19:03.674 - 00:19:52.154, Speaker A: Well, you can see any stage of this process technically, because all of this happens in a very open source way. On GitHub, you can see the initial specifications for Elektra. But when I say public, I mean the client teams release the software for Elektra, for node operators, for any node operator to run on their own devices on a public Ethereum testnet. So devnets are private and they're not. Node operators on Ethereum are not encouraged to run any of these software because developers themselves are just testing it. They're pretty confident there's going to be bugs in it. But once they get to a stage where developers are confident that these clients are ready and that these versions are sound.
00:19:52.154 - 00:20:58.124, Speaker A: That's when you have announcements and blog posts from the Ethereum foundation announcing upgrades to public Ethereum testnets, and on these public Ethereum testnets, that's when validator node operators and anyone in the Ethereum ecosystem is encouraged to try out these client implementations and these new versions of the clients that they run and prepare for the upgrade. Prepare for things like validator consolidation and the increasing of the effective balance of validators and see how their machines operate. Three rounds of public testnet upgrades before you get to mainnet. So it's a pretty long and drawn out process. And as you can see, we are really on stage one. We've just had the initial specs, we're just having the initial conversations around the open questions of these specifications. There's going to be a lot of back and forth between the client teams, the EF researchers and the EF DevOps team before we really even get to the public testnet phase.
00:20:58.124 - 00:22:07.904, Speaker A: But once we get to the public testnet phase, I think it's quite clear that there's been a lot of testing. It's not common that major bugs are found in the public testnet stage of the preparation of an Ethereum upgrade, although it has happened in the past. And by the time it gets to Mainnet, it's very rare that you see major bugs from the upgrade because of how long and drawn out and how many eyes are really on all of these code changes and all of these specs. By that point you have the developers are really focused on the electra specs right now. But once we get to the public testnet phase, there's going to be a lot more eyes on the code. The entire Ethereum ecosystem is going to be encouraged to take a look at the software, run the software themselves on these public test nets, and there's going to be bug bounties that are released to make sure that people are incentivized, even financially, to try and hack the code. So that's really all you have to look forward to for the electra upgrade.
00:22:07.904 - 00:22:47.874, Speaker A: I know that developers set out to make Elektra a small fork, but based on the code changes that have already been slated for Elektra, I think it's safe to say it's a medium fork. And the process in which developers are going to the time developers are going to need to hammer out and finalize the specifications is going to take a while. So we're in for a long journey, but we're in it together. That's it for today's show. I hope that you learned something new about Ethereum from the show today. Until next time, my fellow explorers, stay safe out there.
