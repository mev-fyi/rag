00:00:10.120 - 00:00:24.342, Speaker A: Welcome to the infinite Jungle. On today's show I'm going to be summarizing and sharing the key takeaways from all core developers execution call number 193. But before we begin the show, here is a quick show disclaimer.
00:00:24.526 - 00:00:41.096, Speaker B: I need to remind you to please refer to the disclaimer linked in the podcast show notes and note that none of the information in this podcast constitutes investment advice, an offer, recommendation, or solicitation by Galaxy Digital or any of its affiliates to buy or sell any securities.
00:00:41.208 - 00:02:11.402, Speaker A: On today's show I'm going to be going over the main decisions that were made on Acde 193. There wasn't a ton, but I'll quickly go over the key agenda items from the call and then I will highlight probably what I thought was the most interesting part of the call, which was the discussion on the Virkal upgrade for Ethereum. Virkal is this major overhaul to Ethereum's data structure that developers have been thinking about for quite some time now. They have prescheduled it as the main feature of the next upgrade after Pektra. But for the first time, I think I heard quite a bit, quite a bit of questions around whether Verkle should be prioritized and whether or not Verkl is really the type of data structure that developers want to spend the time transitioning over to from the Merkle Patricia trie data structure tree structure that Ethereum has today. So let me first quickly go over the call and then we'll get into really what I thought was the most interesting. So very quickly, Pectra Devnet two was relaunched and developers for this relaunch have agreed to not test EIP 7702 transactions on the Devnet.
00:02:11.402 - 00:03:31.350, Speaker A: If you recall from the last infinite jungle episode that we did talking about the last ACD call developers, when they tried to test EIP 7702 transactions, it caused pretty major network disruptions. There was multiple forks of the Devnet that were created. And so with this relaunch, developers have agreed not to test EIP 7702 until a future Devnet developers are still TBD on Devnet three. Of course, because developers are figuring out the bugs of Devnet two, they're working on the client implementations. There's still a couple of issues that they want to work through, make sure that clients are in a real steady state. Before moving on to Devnet three, developers did talk about how the specifications and what types of code changes are going to be featured on Devnet three, how things are going to change from Devnet two to Devnet three, and it doesn't look like much is going to change one really good thing. And after talking about the Devnet updates, developers moved on to talking about EIP 7702, which for months developers have been waffling on.
00:03:31.350 - 00:05:01.510, Speaker A: It's been hard for them to figure out the design that everybody can agree on. For EIP 7702, this is the code change that will give greater functionality to user controlled accounts on Ethereum. It'll be able to give an EOA an externally owned account temporarily, some smart contract functionality and so EIP 7702 for months developers have been kind of debating the security concerns around this EIP, and particularly trying to figure out the revocation mechanism for EIP 7702. It sounds from the latest Ethereum call that these discussions have reached a resolution and that developers are simply going to continue to move forward with the EIP 7700 design in its current state. And developers have agreed that any other changes to the EIP should be done post seeing how this EIP functions on devnets. So developers agreed to put EIP 7702 in its latest design into Devnet three and really test the EIP earnestly on Devnet three. There was some talk about potential changes to EIP 7702 when thinking about its interaction with other Petra EIPs like the EOF code changes, which is the major overhaul to Ethereum's execution environment, the EVM.
00:05:01.510 - 00:06:15.772, Speaker A: But for now, I think the wallet community, the smart contract wallet community has agreed to with Ethereum protocol developers to move forward with EIP 7702 in its current design. So that is the state of some of those pectra code changes, a few other pectra updates that were shared on the call a guest developer by the name of Felix one note about the way that I do these calls and the way that I cover them. These calls are basically a live recording of a Zoom meeting. And so oftentimes on Zoom meetings the full name and background of developers will not be shared. You'll just see a box or even sometimes just an image and somebody talking on these calls live and the calls are streamed to YouTube, but very frequently I'm nothing knowing. I don't know who's actually talking. I have to do a little bit of Google searching on my own to see the background of the person.
00:06:15.772 - 00:07:16.628, Speaker A: And as much as possible, as much as that information is available, I try and include them into the call notes to give some context on who's speaking. And sometimes on the calls, the developers themselves will introduce themselves, give a little bit of background on what they're working on. But that's also not infrequent. So in this case, there was a, a person on the Zoom call and their screen name was Felix, and I believe BICO introduced them as a guest developer. But anyways, so this developer had shared another important kind of rationale for why Ethereum should eventually move to SSE. We've talked about SSE on this show before, but it's basically the data serialization format of the Ethereum consensus layer. And developers will eventually have to move over to SSC, because right now the serialization format of the Ethereum execution layer is different from what's on the consensus layer.
00:07:16.628 - 00:09:23.060, Speaker A: And that does cause unnecessary protocol complexity when moving data from the execution layer to the consensus layer in terms of decoding that data and processing that data. And there's of course eips and other code chains changes that developers are considering on the consensus layer side to create the stepping stones for making that full SSE transition. And on the latest call, again, this developer, Felix noted that for EIP 6110, which is already approved for the Pectra upgrade, and what it does is it makes the validator deposit process more efficient. Instead of validators, instead of people that want to become a validator on Ethereum, which requires 32 ETH staked onto the network, instead of having the network verify that the deposit for becoming a validator that to 32 ETH staked has been correctly staked through the deposit contract on the execution layer side. And then, you know, having the consensus layer validators vote again on those deposits, EIP 6110 basically moves the responsibility of keeping track of those deposits and relaying the information of what new deposits for validators have come in fully to the execution layer side. And what Felix pointed out was that there is a bit of decoding work that needs to happen on the execution layer side for these deposit requests, and it seems silly to him to have to decode this all into a format that the consensus layer will have to reformat anyways into SSC. And so he had mentioned, why not make a first foray into doing this SSC transition by having the deposit requests formatted in SSC instead of decoded into JSON, and in this way start to make these improvements and start to reduce the protocol complexity of Ethereum.
00:09:23.060 - 00:10:42.938, Speaker A: Of course, though, this would take more work, this would take more effort by client teams, and technically for Devnet one and Devnet two, on which EIP 6110 has been tested already. Client teams have already implemented this EIP in such a way where they are utilizing the current data serialization format of the execution layer RLP and and what Biko was saying, who chairs these calls? If I didn't, if you didn't know that, you're just joining in, hopping into the conversation. Tim Biko, who chairs the calls he had mentioned because there's so much work that still needs to be done on Pectra, EIP 7702 is not fully implemented. EOF hasn't even gotten into a devnet. It doesn't make sense to add this additional work to change the implementation of the deposit request for EIP 6110 just yet. So he recommended that developers hold off on making those changes until the specifications for the rest of the specifications for pectra are finalized. And one other note that I'll make on EOF EOF it sounds as though EOF will not actually be included in Devnet three.
00:10:42.938 - 00:11:59.174, Speaker A: It sounds as though the main change from Devnet two to Devnet three will be simply the testing of latest EIP seven, seven specifications. But I think it's important, as I've said on prior calls, to keep an eye out for when EOF is added into a devnet and when other pending code changes like for example, peer Das on the consensus layer side, is carried over to the picture devnets. Because seeing all of these code changes work in tandem with one another. That is an important part of the testing process for the upgrade. Testing these code changes in isolation, of course, is important for catching bugs early on and isolating the reason for certain bugs and issues that are happening. But eventually developers will need to mash all of these eips together, and testing all of the interactions between them is going to be a lot of work. There was also an update on a new API method, a new engine API method for the way that consensus layer clients fetch blob transactions from the execution layer.
00:11:59.174 - 00:13:29.480, Speaker A: The method is called engined get blobs v one. From the way that developers were talking about this, it sounded like a very optional kind of new call that consensus layer clients can incorporate into their operations to make the way that they handle blob transactions more efficient. The one thing that developers had discussed was the proper way in which to utilize this new feature, this new call of the engine API, so as not to abuse the new feature. In some ways I wasn't 100% clear exactly on the technicalities of this API call, but basically, developers recommended creating a new change to consensus layer specifications that detail exactly how this method should be used and in what context, under what circumstances, and for this to be brought up again on the consensus layer call next week. Today's call was more focused on the execution layer side of Ethereum protocol development. Next week there's going to be a consensus layer, an all core developers call that is focused on the consensus layer. That was the decision made on the latest and the newest engine API method.
00:13:29.480 - 00:14:43.190, Speaker A: There was some discussion on EIP 7212, which is a precompile that enables signature verification for the SECP 256 r1 elliptic curve. I really do not know. I've never used any of this kind of cryptography, but apparently this is a, a type of cryptography that a lot of modern devices use, like Apple and Android mobile phones, for signature verification. And this is a type of cryptography that would be able to unlock more use cases, better usability for users that are interacting with the Ethereum blockchain via their wallets. And this is a precompiler that has already been implemented on the L2 of on L2 rollups on Ethereum. And of course L2 rollups are trying to ensure the most maximum amount of compatibility with Ethereum Mainnet and hence roll up. Teams have pushed and requested that this signature scheme, that this precompile also be added to the Ethereum protocol, also be added to Ethereum.
00:14:43.190 - 00:15:49.968, Speaker A: The base layer. Developers again, sort of similar to that rationale around changing the implementation vip 6110 developers agreed to hold off on adding anything else to the upgrade until developers are further along in the testing and the implementation process for the other eips. So TBD on EIP 7212. But one of the researchers on the call, one of the Ethereum foundation researchers, Ansgar, he said that in his view, it was unlikely that developers would include more things into the upgrade, say three, four months from now. And I'm inclined to agree with that. I think that it is unlikely that we're going to see the upgrade increase even more. But who knows then developers did talk about the quantum resistance, talk about ways to becoming quantum resistant, and I'm going to put a pin in this discussion because I want to go into it a little bit in more detail with, with you all so very quickly.
00:15:49.968 - 00:17:51.828, Speaker A: The last two updates from the call that were shared outside of the discussion on quantum resistance was a few updates on state and history expiry. So if you think about all of the data that is currently being managed by the Ethereum blockchain, you have people that are creating new accounts every single day. And the state of Ethereum is basically the current balance of all of those accounts, the verification of every single new activity that happens on chain. It keeps record of all of the balances of the accounts, the current state of the blockchain is, that's actually poor, horrible way to explain the state of Ethereum. I'm sure there's a better explanation, but if you think about, I guess, the current, I guess, status maybe is another word, the status of Ethereum accounts on Ethereum. But whether they be smart contracts or user controlled accounts, and the state of Ethereum continues to grow as more people use the blockchain, as more people create new accounts, new user controlled, as more people start interacting with the chain, and in order to ensure that the people that are verifying all of the activity on the chain and continuing to keep the chain going, in order to ensure that their hardware doesn't have to exponentially, or I guess, continuously increase to keep up with all of the data that's being managed by Ethereum, in order to keep the people that are running the software to verify all of those rules and keep record of the state of Ethereum. There is a lot of effort to try and bound in some way or limit the growth of Ethereum state.
00:17:51.828 - 00:19:07.946, Speaker A: And it's the same idea for history expiry, if you think about all of the transactions that have ever happened. So it's not the current state of an ethereum account, but say, all of the transactions that led up to what the balance is currently on Ethereum, the balance for, say, somebody's account on Ethereum, that's of course, a lot bigger, a lot more data to maintain. But that data also continues to grow over time. And so there was a new EIP that was shared by two developers on the call. It's EIP 7736. And it offers a way to implement state expiry, to have certain accounts on Ethereum that have never been interacted with, has not done any activity over a certain period of time, say, I don't know, six months or a year, for some way for the protocol to recognize that part, part of Ethereum state as inactive and make it more expensive for people to resurrect that piece of state, or in some ways to kind of lighten the load on Ethereum nodes, which are basically computers that are contributing to the verification and the operations of Ethereum. And so, yeah, I'd say so.
00:19:07.946 - 00:20:00.790, Speaker A: This proposal is one that would work in tandem with the vertical upgrade. So with the transition over to a more efficient data structure on Ethereum, this EIP would be another addition to either to be activated along with Verkl or post Virkel, to be able to implement some sort of type of state expiry. And then the other one, history expiry, that one developers have been working on for quite some time, even as they've been working on Pektra. This one is EIP 4444. And I would say that it's a lot more further along in the development and implementation process than of course, this entirely new proposal that was shared on the latest call, EIP 4444. Developers just say four. Four, which makes sense.
00:20:00.790 - 00:21:14.380, Speaker A: So on four fours, one of the Ethereum Foundation DevOps engineers, Perry had shared that he has made some updates to the way that expired history, basically parts of Ethereum history, that nodes on Ethereum no longer service. So if you wanted to figure out what all the transactions in this block ten years ago was actually, is Ethereum even? No, Ethereum is nine years old as a blockchain. So I don't know, say eight years ago what the history was eight years ago. You would have to request that data, request that, that pruned historical data that is no longer being maintained or stored by regular Ethereum nodes. You'd have to get that from a separate peer to peer network. You'd have to get that from either a major blockchain infrastructure company like say, Infuria, or get it through torrents. Get it through what Perry was talking about, about using torrents to be able to serve this data in an alternative way.
00:21:14.380 - 00:22:17.194, Speaker A: So there's some progress being made on both state and history expiry. But I think that these are pretty large initiatives that will take more time, take more time for developers to really flesh out and for users to be able to start seeing the impacts of this kind of work on Ethereum Mainnet. So let's go back very quickly to the part of the call that I found the most interesting, which is the discussion on quantum resistance. It's so funny because every time I prepare for these shows, I always think that the summary part of what I'm talking about will be really quick. I'll be able to just go through all of the decisions and the updates made on the call in say five minutes. And then I look and I'm like, oh wow, 20 minutes have gone by. But anyways, the part of the call that I found the most interesting was raised by Andrew, who is a client developer for the Aragon client, the execution leader client Aragon.
00:22:17.194 - 00:23:38.170, Speaker A: And he shared that he was listening to Vitalik Buterin's talk, Vitalik, who's the co founder of Ethereum, his talk at ECC, which I went to and I also shared takeaways from in a prior episode. He shared that during Vitalik's talk. Vitalik was saying how quantum computers experts are saying that quantum computers will be able to break cryptography that is widely used around the world sooner than people expect, basically, in the decade of the. This is quite alarming because there is very, the Ethereum code base lies very heavily on elliptic curve cryptography, which, with the advent of quantum computers, would be completely broken. And it's not just really Ethereum that we're talking about that would be vulnerable in a reality where quantum computers become a thing, become working. I don't know a ton. I'm not an expert on quantum computers, but I know at a very high level that quantum computers, if they are able to solve and do these mathematical problems that our regular computers today cannot be able to solve.
00:23:38.170 - 00:25:17.986, Speaker A: This would not only be a problem for just Ethereum, because the kind of cryptography that Ethereum relies on, the elliptic curve cryptography, is something that bitcoin relies on, too, and not just bitcoin, but large swaths of the Internet. So, of course, the advent of quantum computers is something that scientists and cryptographers have been working on for decades. And it is definitely, definitely a problem that when that reality comes, it's going to be a problem not just for Ethereum, but large, large parts of the world as we know it today, and much larger cryptocurrencies like bitcoin. So 2030 is, I guess, I suppose, the number that was shared or the date that was shared. And this, of course, created the concerns by Andrew, who was talking about, well, do we have a plan around this? What are we going to do? How much is this going to impact Ethereum? And should there be preparations being made today to make Ethereum quantum resistant? And while the broader implications of a quantum computer that is functional is while many developers on the call were skeptical even of whether or not quantum computers would be ready in the, you know, whether, you know, the biggest problem in this reality would be Ethereum and the. And the ability for somebody to hack Ethereum with their quantum computer. Andrew also focused the discussion on Verkle.
00:25:17.986 - 00:26:36.330, Speaker A: So Verkle, as we just talked about, or as we've mentioned quite a bit on this show, is this overhaul to Ethereum's data structure. And Verkle is one of those upgrades that would not work. It would not be secure anymore for Ethereum to rely on Verkl in a reality where quantum computers exist and are functional and say, lots of people can access quantum computers, people that, say, have a reason to maliciously attack Ethereum, whatever that reason may be, and whoever that person may be I don't even know how expensive quantum computers might become when they're commercialized. But anyways, this is besides the point. So honestly, I think the discussion around making Ethereum quantum resistant is of course interesting. But this change in the conversation to focusing on the vertical upgrade and whether or not vertical is something that developers want to spend their time on for the next Ethereum upgrade was quite interesting. Before this call, I was under the impression that the VRKL upgrade was that developers were very confident that this was going to be the next stage of Ethereum's roadmap.
00:26:36.330 - 00:28:11.186, Speaker A: And as I've shared on this call before, it's been very difficult with the pectra upgrade because developers have been very unsure about what the priorities of Ethereum are. But when it came to post fercal or post not post fercal, post pectrade, there was quite a bit of consensus around developers, at least before this call on the fact that once we figure out pectra, depending on whatever those priorities may be, at least developers were very, very on the same page about what would happen next. And with the quantum computer threat looming in the background, there were a couple of concerns around VRKL that was also raised. The first one being is VRKL really all that important? Verkle is meant to decrease the proof sizes of Ethereum, so being able to verify also retrieve data on Ethereum is supposed to become a lot more efficient through Verkle and be able to deal with the state growth of Ethereum. But as I mentioned earlier on this call, of course the size of Ethereum's history and the history growth of Ethereum is a much larger problem. And so developers on the call were also sharing. Should Verkle be the priority if state growth isn't the biggest problem of Ethereum? Causing Ethereum nodes to become more computationally require more computational resources to run.
00:28:11.186 - 00:30:05.210, Speaker A: And the other kind of concern around VRKL was if it's true that quantum computers are coming in the say, the next two decades, should developers really be expending all this time to make the vertical transition if they're only going to have to transition again to a quantum resistant data structure shortly thereafter, in a few years thereafter, and to this, one of the primary people that have been working on Virkel for the last, I would say several months, if not years. He was mentioning that all of the tools and all the testing needed to make this change once for Verkl is something that can be reused again for another data structure transition, and he mentioned how he himself didn't believe that Verkl would really be the last, the last change to last overhaul to Ethereum's data structure that there ever would be, but that it has immediate term, short term benefits that developers should focus on now and then. Finally, another concern around Virkle that was shared was around other alternatives to the vertical data structure. There appears to be some research on other types of trees, other types of data trees that developers could potentially look into. And all of this questioning around VRKL, its relative priority compared to others, whether or not it really is the best solution for Ethereum. All of this did create quite a bit of disagreement again on the call contention. It felt almost like a dangerous topic to dive into that developers have been wary about really even bringing up to the surface on an all core developers call.
00:30:05.210 - 00:31:44.796, Speaker A: It seemed almost dangerous to say for a developer to express that they weren't as confident about Virkle being the most important next step for Ethereum after Pektra. It seemed almost dangerous for developers to say that on the call, and it definitely was taken with apprehension and there was some strong disagreement from the developers on the call that were working on Virkl and that had spent a lot of time and resources on doing this to affirm that in their view, Verkle should be the next priority. So its a big discussion. Its probably not going to be an important discussion obviously in the context of Petrae because that is the most next immediate upgrade for Ethereum developers to focus on. But I would say over the next six months this is an important area of debate and contention that developers will get into more and it will certainly be a basis I think for continued, I think continued discussion, but also just continued to continue to keep tabs on the closer developers get to being ready to talk and give more bandwidth with to figuring out the next upgrade after Pektra. It doesn't seem like Verkl is the done deal just yet, which is a pretty sizable shift from, I think, what people had been thinking before this call and very quickly before we end off today's episode. As always, you can get the full call summary on galaxy.com
00:31:44.796 - 00:32:18.680, Speaker A: dot. It'll be linked in the show notes as well, very quickly for what to expect from the next ACD call the next time we talk. All of these ACD calls, they happen on Thursdays. Once a week they switch between focus on execution layer and consensus layer. But for the next call on the consensus layer, we're going to see more updates on the Pectra devnets. That of course is important we may also see a decision on the SSC eips on the consensus layer side, and similar to what we saw on today's call. I do think that there will be developers.
00:32:18.680 - 00:33:38.652, Speaker A: I do think that the decision there's a high likelihood the decision may be let's figure out the consensus census layer eips that we have in Petra right now, and then a couple months down the line, revisit the inclusion of any new eips. I have a feeling like that might be the way that developers move ahead with the topic of the two SSE eips that we had talked about on the consensus layer side on the last infinite jungle episode. And then finally, I'm really hoping that in the next consensus layer call we get more information about what the peer Das upgrade what data availability sampling could look like without sampling as an initial part of the peer Das upgrade. That was a new idea shared on the last consensus layer call that I'm hoping we get a bit more information about next week. So thank you very much for tuning in to another episode of infinite Jungle. I hope that you learned something new about Ethereum, and I hope you enjoyed listening. I am signing off from New York the concrete jungle in your explorations of the infinite jungle that is Ethereum.
00:33:38.652 - 00:33:39.540, Speaker A: Stay safe out there.
