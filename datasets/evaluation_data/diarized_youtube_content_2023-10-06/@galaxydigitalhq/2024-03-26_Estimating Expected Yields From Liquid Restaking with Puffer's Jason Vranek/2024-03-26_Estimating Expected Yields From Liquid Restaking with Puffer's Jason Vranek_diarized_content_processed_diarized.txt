00:00:10.280 - 00:00:58.234, Speaker A: Welcome to the infinite Jungle, the podcast about the evolution of Ethereum. I'm your host, Christine Kim, VP of research at Galaxy. On today's show we have a special guest. We have the CTO and co founder of Puffer Labs, Jason Vernack, joining us on the show to talk about the liquid restaking dynamics that are happening on Ethereum. It's been a very hot topic, so we'll get into everything about liquid restaking and liquid staking in the second half of the show. But to start off the show, we're going to be talking about a pretty major decision that was made on the most recent Ethereum developer call. Developers agreed to include Max EB into the next Ethereum upgrade, Electra.
00:00:58.234 - 00:01:38.554, Speaker A: So hats off to everybody who vied for this upgrade to get into the next Ethereum to get into the next upgrade. Who vied for Max Ev to get into the next Ethereum upgrade. We've talked about Max Eb on the show before, and my listeners will know how supportive I am of this quote, change. So we'll talk a little bit about that decision. We'll talk a little bit, give a little bit of a summary for people who are new to the show just joining. We'll give a precursor on what Max EB is and talk a little bit more about what else is going, what else may or may not go into Elektra. So that's the show for you today.
00:01:38.554 - 00:02:36.174, Speaker A: Let's start off, though, with a quick disclaimer. I need to remind you to please refer to the disclaimer linked in the podcast show notes and note that none of the information in this podcast constitutes investment advice, an offer, recommendation, or solicitation by Galaxy Digital or any of its affiliates to buy or sell any securities. All right, so yesterday, ethereum developers agreed to include Max EB in the Pektra upgrade. Pectra is the combined upgrade name for the upgrade that's coming up. Developers are aiming to try and get that upgrade implemented on Mainnet before the end of the year. And as you know, or as we've talked about in this show before, these upgrade names have many different names. Pektra is the combined name, but the name that you'll also hear that references the same upgrade is Prague as well as Elektra.
00:02:36.174 - 00:03:11.390, Speaker A: Prague references the upgrade that is happening on the execution layer of Ethereum, and Elektra is the upgrade name that refers to the upgrade happening on the consensus layer. And now those two upgrades are happening at the same time, on the same day. And so to refer to both of those upgrades and just that upgrade in general, we call the upgrade pectra. This is also what happened with Denkun. Denkun is the combined upgrade names of Deneb and Cancun. There we go. And Dancun was obviously a success.
00:03:11.390 - 00:04:11.554, Speaker A: And on the most recent developer call, developers were scoping out what to include in the next Ethereum hard fork. And yesterday's call was focused primarily on the code changes that are going into the consensus layer, the layer of Ethereum that focuses primarily on how validators, the security providers of the network, come to consensus about what blocks are valid, what transactions are valid or not valid. And there are a certain number of code changes that developers have been discussing for the consensus layer for quite a while now. And one of the ones that we talked about on this show already is Max EB. Max EB allows validator balances, effective balances to be greater than 32 ETH. Right now, what that means is that right now, validators have an effective balance of a maximum effective balance of 32 ETH. You can only earn rewards on the effective balance of 32 ETH.
00:04:11.554 - 00:05:08.334, Speaker A: If you wanted to earn rewards higher than what you have with your 32 ETH balance, then you'd have to spin up a new validator. And that validator has to have a minimum balance of 32 ETH, and it can only earn rewards on that balance of 32 ETH. If you stake or put in an effective balance of 33 ETH or 34 ETH, you're not going to earn any more rewards than another validator that has an effective balance of 32 ETH. So that's what is the current situation. And because of this, people who own large, large amounts of ETH, as well as staking pools, who are delegated a lot of ETH from other users, they've had to spin up hundreds and thousands of validators. This has caused quite a bit of networking load on Ethereum. Every single validator represents a message, a cryptographic signature that needs to be aggregated on the network.
00:05:08.334 - 00:06:20.770, Speaker A: Every single time a block is proposed and the network continues to progress, it needs to aggregate these signatures, and there's a lot of messages being propagated throughout the network. And this is causing strains on nodes on the computers that are connecting to Ethereum and verifying the blockchain chain. And so what Max EB is trying to do is to reduce the pressures and reduce the increasing amount of networking load on Ethereum by allowing validators to console large validators to consolidate their ETH into one validator, as well as create validators with effective balances that are larger than 32 ETH. So you can have validators with an effective balance of up to 2048 ETH. You can earn rewards on not just 32 ETH, but anywhere in the threshold between 32 and 2048 ETH. You can earn rewards accordingly across that spectrum. So the more that you stake into your effective balance, the higher rewards that you're going to be able to earn as a validator.
00:06:20.770 - 00:07:35.214, Speaker A: And this is expected to greatly shrink the number of validators on Ethereum and thereby improve the health of Ethereum. It's also expected to help at home independent stakers, because right now, if you are staking on Ethereum with your 32 ETH and you over time earn one ETH, and you want to somehow make the rewards that you've earned, put it to use and have it somehow earn also rewards for you. You don't have to drop that one ETH into a staking pool. You can now actually restake it yourself into your validator and start earning compounding rewards that you're earning from your validator instead of going to a pool. So this is expected to also help independent at home stakers continue to utilize their own software, their own hardware, rather than relying on a pool to try and earn more rewards by pooling together their ETH with other people's ETH. So expected to help network health as well as at home validators. And it's also expected this upgrade to help major large staking operators as well.
00:07:35.214 - 00:08:33.794, Speaker A: You know, managing the keys of thousands of validators is not an easy thing to do, but to be able to consolidate your stake so that you can wind down certain, say, computers, nodes on which hundreds of validators are running, so that now you can consolidate those operations into perhaps a single node as opposed to several nodes. It's supposed to simplify staking operations for these large, large validator node operators. So all in all, a pretty positive upgrade, a code change that I am very, very pleased to hear that is going into Elektra. You know, shout out to everyone who listened to this podcast, but also to all the developers on the call who were fighting for this code change to be included in the electra upgrade. We did it. Woohoo. Pat on the back for all of us folks for getting that through.
00:08:33.794 - 00:10:31.934, Speaker A: And now I think a big question, a big question. And now that we know that this is going into the upgrade, validator node operators is particularly major. Staking pools like Lido, rocket pool, any other infrastructure providers that are running hardware needs to now prepare for this code change. This is going to be probably the biggest change to validator dynamics since the Shanghai upgrade, which implemented staked ETH withdrawals. And so now validator node operators at home, independent node operators, and even large ones, they're going to have to prepare for this upgrade. They're going to have to think, to what extent do I consolidate my validators and where do I put my balance, my effective balance threshold? Do I want to be earning rewards on 50 ETH as opposed to, say, 40 ETH, or do I want to leave take some rewards off the table? These are questions in which the operations of running your validator, these are questions that validator node operators are going to have to answer in the months to come as we prepare for this upgrade. So to what extent do I consolidate the validators under my control? And once they are consolidated, where do I set that effective balance threshold? Do I set it at the full amount? Am I staking and locking in my ethnicity all 64 ETH that I own, or will I put that effective balance at, say 50 and then do something else with the remaining ETH that I have put it into decentralized finance or, I don't know, buy an NFT with it? So these are questions that validator node operators will now have to think about.
00:10:31.934 - 00:11:58.884, Speaker A: The other major code change that developers are still grappling with, whether or not to include it in Elektra is the inclusion lists. We've also talked about inclusion lists on this show, and as listeners who have been following along will know, I'm not a huge fan of inclusion lists. I talked about inclusionless quite a bit with a previous guest on this show, Ethereum core developer Terence Sao, who's working on the prism client. And one of the key assumptions of inclusion lists is that the censoring activity that's happening on Ethereum by builders and relays is a much greater problem and issue than, say, the censoring activity that is happening by validator node operators. So to give a little bit of background, the majority of blocks being built on Ethereum are not built by validators who are the security providers of Ethereum. They're built by these third party entities that are extremely specialized blocks with the most valuable transactions in the most valuable, lucrative transaction order as possible. And because this is a very highly specialized activity, these builders, there are not many builders, let's say, that can do this job well and compete in the builder market.
00:11:58.884 - 00:13:12.572, Speaker A: And you know, there's a high number of builders, the majority of builders are intentionally censoring transactions out of blocks for regulatory reasons. Most of the transactions that are being censored are transactions that interact with OFAC sanctioned addresses. Ethereum, as a decentralized, permissionless protocol is meant to be censorship resistance. So the fact that the majority of blocks on Ethereum are being built in such a way where these blocks are, there are transactions intentionally being censored out of them is not a good thing. Validators thing. The Ethereum community, I should say as a whole, is trying to, is trying to make Ethereum more resilient as a censorship resistant blockchain by one of the ways is through this thing called inclusionless, which would put the onus on validators to create a list of transactions that the builder must include in their block. So this inclusion list is a list of transactions that a validator creates and passes to the builder.
00:13:12.572 - 00:14:06.696, Speaker A: And the builder has to include these transactions in order for their block to be considered valid. And there are different designs for this. There is a way where the validator just sends that list directly to the builder, or the validator sends that list to the next validator who's about to propose a block, and then the builder for the next block actually has to include that inclusion list. For the details around how these inclusion list design works, I point my listeners point you guys to the interview that I had with Terence Zhao. He explains it in quite a bit of detail. This code change is still being considered by developers, and one of the primary reasons that I am not as supportive of inclusionless is because I don't think that validators are likely, more likely not to censor transactions than builders. I think validators themselves are.
00:14:06.696 - 00:15:31.654, Speaker A: Many validators are operated by professional entities, regulated entities that, like builders will choose, would prefer to censor transactions than not censor them. So I don't think that inclusion lists will really have that large of an impact on the censoring activity happening on Ethereum. And I think there may be other solutions for improving Ethereum censorship resistance that may be more effective or have the same impact as inclusionless, but not actually touch the Ethereum protocol or slash change the Ethereum protocol. So honestly, my views have not changed that much on inclusion lists, but so that my listeners are aware, this is being seriously considered for the electra upgrade and developers will probably try and make a final decision on whether or not it goes in or out in the next one to four weeks. So yeah, so those are the two biggest code changes that I would say developers talked about. Next week we'll probably get more of an update on what developers are considering for the execution layer side of the Pektra upgrade for the Prague upgrade. There's quite a bit of changes that developers are considering that will impact the application layer of Ethereum, smart contract developers on Ethereum and the execution machine, the execution engine of Ethereum.
00:15:31.654 - 00:16:17.402, Speaker A: So we can look forward to that for next week's call. And now we are going to be chatting with Jason Vreeneck, the co founder and CTO of Puffer Labs. We are going to be talking about the liquid restaking rewards that are happening on Ethereum right now. I will note, even though restaking is not actually yet possible on Ethereum, there is no restaking protocol to really restake two or really have real restaking yield. There is no restaking yield. But anyways, these liquid restaking protocols still exist now and they are a major hot topic. So we're going to talk about this dynamic and we're going to talk about what's really going on behind the scenes with liquid restaking with Jason.
00:16:17.402 - 00:16:35.284, Speaker A: So let's go chat with Jason now. Welcome back to the show, you guys. I have with me Jason Renek, the co founder and CTO of Puffer Labs, one of the top liquid restaking protocols on Ethereum. So excited to have you on the show, Jason.
00:16:35.864 - 00:16:41.204, Speaker B: Thank you so much, Christine. Actually, my very first podcast, so excited to be jungle pod.
00:16:41.784 - 00:17:38.578, Speaker A: Oh my gosh. Amazing. That's great. That's very exciting. I feel honored that this will be the first podcast where you're featured, and I want to get into all the things that puffer Labs is doing, especially as it relates to liquid restaking. Liquid restaking is such a hot topic nowadays in the ethereum ecosystem. So maybe to start off for our listeners, can you give a overview of how puffer works? Obviously, every liquid restaking protocol will have differences in the way that it functions, but can you give kind of an overview of when a user stakes their ETH or their liquid staking token, like Steth? What happens after that? What are the next steps following?
00:17:38.746 - 00:18:31.504, Speaker B: Yeah, absolutely. So I'll preface that with like, the point that we're going for with puffer was to improve the viability of home stakers. And so in building that, we built a native liquid re staking protocol. So that means validators, ETH is, and this is in contrast to like LST restaking, where you take STE or some other LST and delegate that to an operator for native restaurants. Because the validators are involved, they're going to be sharing in some of the revenue generated from these, like Abs's. So from the user's point of view, they would take their ETH deposit it into puffer. This would be pooled and allocated to our set of permissionless validators.
00:18:31.504 - 00:19:19.196, Speaker B: So I can dive into some of the technical details later. But we worked on really bringing down the bond requirements so that you only need one e to run the validator. From there you can kind of think of this like a rocket tool style permissionless liquid staking protocol at the bottom, and more of this permission set of operators that run the actual restaking activities. And our goal is to make that top layer permissionless in the future. A lot of this really depends on how slashing evolves in the eigen layer ecosystem. So what happens is your ETH gets allocated to one of these, we call them noops or node operators. They run a validator and the validators.
00:19:19.196 - 00:19:40.204, Speaker B: ETH is then restaked and delegated to one of these like permissioned operators, and they'll be running these myriad of AVM and generating the rest of rewards. And these rewards will all trickle back down to the puff either LRT holders.
00:19:41.704 - 00:21:32.824, Speaker A: Gotcha. So when a user stakes their ETH and delegates it to a node operator in the puffer finance ecosystem, I too, when I first, actually when I first heard about puffer, I heard about it as a liquid staking protocol, as this protocol where it introduces these novel technologies which, where the validator set can have a very low probability of slashing and users can very permissionlessly delegate their ETH to this validator set because of the technology that puffer enables, which is, I think, secure. Is it the secure, secure signer? Secure signer. The secure signer technology, this new layer though, of now the node operators redelegating to other node operators that are restaking that part of the equation. I need a little bit more detail on. So these validator node operators, I'm under the impression that they can now also run software, run clients that will secure Eigen layer ABS's secure other protocols and thereby earn greater rewards. But doesn't that require, require additional kind of permissions, additional hoops that you have to jump through in order to be considered for the Eigen layer validator set? Can you talk a little bit more about the process in which puffer node operators what they have to do in order to actually get restaking rewards? Because initially I completely understood the dynamic between users and validators.
00:21:32.824 - 00:22:01.334, Speaker A: It's very similar to, to why you would put your ETH into say a lido or a rocket pool. But of course, the advantage with puffer is that it's permissionless, but you can have a lower staked collateral requirement for the validators. But this additional layer where the node operators of puffer are now engaging with the Eigen layer protocol, the restaking protocol. Can you talk about how that happened and how that works?
00:22:01.924 - 00:22:41.394, Speaker B: Yeah, absolutely. So I think maybe it's worth starting a little bit backwards, like at the beginning of what we were targeting here. And that was, of course, like we wanted to make it more accessible to run these validators. Kind of rocket pull paved the way here, but we are trying to target a more capital efficient protocol. And so this is where we started working with Justin Jake and built what became secure signer. So this is the hardware based anti slasher, and this allows you to essentially bring down the bond requirement significantly. But it was just like one of kind of multiple challenges in trying to build this permissionlessly.
00:22:41.394 - 00:23:51.228, Speaker B: And arguably, there's a handful of these eips that we're all kind of excited for as protocol developers. One of them is for seven, eight, eight, which is going to make reporting a lot of things more trustless. You can use ZPP's to do that now, but beyond that, there's EIP 7002 to allow for us to kind of eject validators without requiring custody. And of course bls pre compiled. So given that though, we saw that there are these trends towards centralization in the liquid staking market and built this kind of proactively, knowing that we might not get 7002 for a while, and this is looking back about a year and a half now. And so we had to add this thing called the guardians, which are essentially a security council with some of this extra trusted execution environments to reduce the trust dependencies there. And so now we're able to get around, think of this as training wheels until 7002 comes out and we can deprecate this as well.
00:23:51.228 - 00:24:06.004, Speaker B: Another one I think less talked about is on BLS precompiles, which is another way to allow for checklist registrations of validators. That starts to get really scary when 32 ETH can kind of get sent into a black hole that you can better get back.
00:24:06.584 - 00:24:23.564, Speaker A: And bls pre compiles are also going into the next upgrade. It's been a while, but I'm telling you, 7002 and BLS, and then we already have the EVM, the beacon route, exposing the EVM for the Denkun upgrade. So we're making progress. It takes a long time, but, you know, anyway.
00:24:23.684 - 00:24:51.784, Speaker B: Absolutely. Yeah, no, absolutely. Love that. I think we always try to view ourselves as trying to be kind of like these out of protocol agents that are trying to make things sort of pave the way while we're waiting for these enshrined solutions. So, yeah, so maybe just to zoom back out now. So, like, we tried to build these things to make it easier to run validators, like, lower bond requirement. There was a whole other thing which maybe I could talk about later on incentives.
00:24:51.784 - 00:25:55.264, Speaker B: And, like, how do we deal with what Justin had termed rug pooling, where validators are incentivized to steal EV from the pool? This becomes more and more likely as your bond requirement lowers. But essentially, we built this thing and we're like, okay, we made it simpler or cheaper to run a validator, but the profit margins are still pretty low. And so to justify running all the hardware, a lot of people are going to end up having to stack multiple validators on the same server. This essentially brings back up the capital requirement that we are trying to lower, sort of defeating the purpose. Like, I think we're going naive to at the beginning thinking like, let's just lower this bond, make it for the people, and the people will come, but really we need to incentivize it a little more. And that's really where this collaboration with freedom and Eigen layer started. We were looking into alternative revenue streams to help kind of subsidize these validators.
00:25:55.264 - 00:27:10.138, Speaker B: And so this is where the native rest taking side of it comes in. But now to your question on, like, sort of, what is the dynamics of the restaking? So definitely we're still in the Wild west here in terms of like, Eigen layer protocol being very in this nation state. Like, there's a lot of maybe features that will eventually be added. But one of the things now is on slashing is considered, like, all or nothing slashing. So it becomes very difficult to allow for kind of this untrusted set of validators to engage in re speaking when in one action they could get slashed 32 ETH, whereas in proof of stake, it's pretty hard to slash 32 ETH unless you control, like, the majority of 33% of the validators. So with that limitation in mind is why we've added this layer of delegation right now. So what happens if I'm a validator on puffer? I'm delegating my validators 32 e to one of these more reputable operators.
00:27:10.138 - 00:27:48.164, Speaker B: And of course, like, part of the point of puffer at the beginning was we don't want to rely on reputation, we want to rely on economic security, and we're moving in that direction. We're going to add more anti slashes with these AVss but we're still in those early phases where we need to take steps. But what this results in is just by running a validator within the puffer ecosystem, you're earning your normal proof of stake rewards, but also you're getting exposure to re seeking rewards without actually having to run the additional ABS requirements.
00:27:49.444 - 00:28:38.526, Speaker A: So technically speaking, the node operator still runs the consensus layer, the execution layer, the mev boost. They run the node to get staking rewards from Ethereum. And then they also have a mechanism through which they can restake to a eigen layer node operator. And that node operator runs the software for whatever protocol that they're trying to secure. And any rewards that they earn from these other protocols, namely Eigen DA, is probably going to be the first AV's, which you can earn restaking rewards from. Those rewards then accrue back to the node operator, the puffer node operator, and then that accrues, trickles back down to the user, is that right?
00:28:38.630 - 00:28:40.034, Speaker B: Exactly, exactly.
00:28:40.594 - 00:29:02.854, Speaker A: And the kinds of rewards that you get from the AV's from connecting to the Eigen layer restaker, are those rewards, though denominated in ETH? I was under the impression that it would probably be in a different token. How do rewards then kind of get calculated back to the user in their puff ETH?
00:29:03.394 - 00:29:52.154, Speaker B: Yeah, definitely. Good question. And something that I think all of us are kind of working in different directions towards and kind of going with the information that we have. So I have heard before that Eigen DA would pay out in, which makes our lives easier as a native free speaking protocol. But I don't know, maybe they'll pay us in points, maybe some future token. It's sort of unclear on that front, but I think if we look towards maybe not just Ign, but towards other Abs's, there is this trend towards like paying out native token. And so there's this concept in the future of dual token staking, where an AV will require the operator to put down like beacon chain ETH plus their own token in the future.
00:29:52.154 - 00:30:37.794, Speaker B: Right now it's only just whatever collateral is accepted from Eigen layer. So an LST or beacon chain Ethan. But the rewards would be paid out in token. And I think kind of the point of Eigen Laird in their white paper was like, we don't really need these native tokens to secure these abs's. But it still is useful from, I guess their point for bootstrapping their protocol to have their own native token for governance. Things like that can pay us in the token. And I think part of the thesis is well, borrow the security from ethereum validators, allow your protocol to grow in value to the point where you can start using your own token as this dual security.
00:30:38.934 - 00:31:31.728, Speaker A: Okay, okay, that makes sense. I mean, to be determined, maybe cross that bridge once we get there in terms of if these avss start paying out in other tokens, maybe they don't have to, based on the kind of rationale that you just expect explained. The other major question around this though is also the unknown around yields. The main impetus for why we're adding restaking to puffer is because it's not enough to incentivize users to use this permissionless protocol. Even when you lower the collateral requirement from 16 ETH to like one ETH, it's still not enough for people to really choose puffer. The rewards for the Ethereum staking protocol naturally accrue to the largest staker, and that's Lido. Lido doesn't have any collateral requirements.
00:31:31.728 - 00:32:37.424, Speaker A: It's also got the highest amount of liquidity. So as a liquid staking token, your token has the snowball effect. The more liquidity it has, the more users it draws, the larger it becomes, the more staking rewards it accrues because it's running more validators, probability wise, getting more block proposals and trying to compete in this market. As puffer, you're looking towards Eigen layer restaking to get more yield, looking to points, but I'm curious to know from your perspective, it's a question as to whether or not the yield from restaking in Eigen layer will really be enough. And we haven't really gotten into points yet, but like are these incentives really enough to be sustainable to offer sustainable demand for puffer? Because from my point of view, there's just so many unknowns in these new kind of attractive solutions that you guys are looking at.
00:32:38.284 - 00:33:33.834, Speaker B: Totally. Yeah, I think this is another one of those open questions in the industry. Like maybe what are the abs's that are going to be producing like the most yield? And of course this is always a game of like most yield, least risk. And definitely on that point though, like we want to focus on like the ABS's that have this endogenous risk is how freeroam always puts it. Like the slashing has to be kind of in your own hands and not dependent on some other variable like the price of ETH. Because like sure, you can have avss build like that and they might have a lot of yields, but very risky for the LRT. So if you're doing the native starts to become very risky for just ethereum in general if sort of the fate of a lot of value depends on like the slashing condition of some sketchy AV's.
00:33:33.834 - 00:34:25.554, Speaker B: But in terms of the yields we're really trying to focus on more fundamentally, what are some of these different categories that are going to be revenue generating? And I guess maybe I think people have different numbers in their head. I don't really see yield as being substantially or let's just say on the order of magnitude of this normal validator yield, because that's all denominated in ETH. ETH is the largest network. To generate something with as much revenue, you would need a equally large enough protocol to secure. But I do think that starting to squeeze out some of these smaller margins is really going to help differentiate some of these protocols from the existing lidos who are just purely LSD.
00:34:26.314 - 00:34:51.814, Speaker A: Do you have numbers in mind by chance? So like 4%? Let's just assume that three to 4% is what you would get from consensus layer rewards on Ethereum, and let's just say you tack on maybe another like 1% from MEV and priority fees. How much more are we talking in terms of margins from restaking and endpoints?
00:34:52.374 - 00:35:15.874, Speaker B: So optimistically, I would say half a percent would be something that we would be happy with. I think of course this number is just constantly getting diluted as the size of eigen layers tbl just grows and grows. We need to have more and more profitable ABS's coming to the market as well, but I'd say half a percent would be great.
00:35:17.334 - 00:36:44.062, Speaker A: On the topic of differentiation as well, though between puffer as now a liquid restaking protocol and others. One of the differentiating factors between puffer as a liquid staking protocol was it's permissionless and as maximally permissionless and decentralized as possible. But introducing this permissioned operator set from restaking now I think does kind of dilute the brand and the difference, the differentiation between puffer and other liquid restaking protocols. Can you talk a little bit more about that value and how you expect puffer to compete against other liquid restaking protocols? There's quite a few now, I think the largest liquid restaking protocol is a protocol called Etherfi, and I'd love to get your views about the competitive dynamics between how this all plays out. I'm under the impression that puffer has been one of those protocols that really tries to differentiate itself by not relying on permissioned sets. But given that the nascent see of the Eigen layer protocol now requires a permissioned operator set you guys kind of have your hands tied. How are you guys thinking about differentiation in this LRT liquid restaking competitive landscape?
00:36:44.238 - 00:37:22.944, Speaker B: Totally. So I think there's maybe I'll explain kind of the short term differentiator, but also just to your point on like this. Yeah, this is always definitely a hard decision from the team to have to move in that direction. But version two, what we're going to be focusing on is at the expense of capital efficiency. You can add like a higher bond requirement back into the mix to allow them like your average home staker to participate in the re staking. We'll get there. I think kind of just the big limitation on that is, let's just say it was completely permissionless today.
00:37:22.944 - 00:38:20.664, Speaker B: There's a hard limit for a lot of these abs, like Eigen DA in particular, can only support an operator set of around 200. So even though the technology is built to be horizontally scaling and would in the future cater to that home staker that wants that extra yield from Eigen Da, we're kind of still on the roadmap to get there. And this requires some extra ZKP to aggregate a lot of these signatures, but it's BLS aggregation on the smart contract level that's really limiting this capacity. So we'll get there, but maybe back rewind a bit about how is puffer really differentiating from the other lrts. And I think really it comes down to this permissionless nature. So of having, having the base layer of validators as permissionless. So maybe I'll walk you through the straw man example.
00:38:20.664 - 00:39:31.566, Speaker B: What's bad if you don't do that? Well, if you decide I'm going to spin up a liquid restaking protocol, I'm going to get to market quickly. So I'm just going to run all the validators through some professional operator, and then I'm going to have them also go and run all of the ABS's as well. We start to get into this one that's just very centralized, just going back to the old arguments of rocket pool versus Lido. But in the eigen layer space now we've created this vendor lock in problem where let's say I don't like this operator and I want someone better to run the abs's for me. Now it requires me exiting from Eigen layer and then having them exit all of their validators and then kind of re enter. And this really creates a lot of friction and also just builds this kind of fragile protocol. So the difference in puffer is the base layer is entirely permissionless decentralized.
00:39:31.566 - 00:40:06.914, Speaker B: It's just like the people that you're delegating to our permissions for now. And it's easy now from the protocols point of view to say hey, operator a, you're underperforming, we want to replace you. We can do that by simply replacing the operator, and we can because we've decoupled the validator set, so that makes it more flexible in terms of in the future when we're talking about rebalancing the protocols, AV's obligations, things like that.
00:40:08.414 - 00:41:01.984, Speaker A: And how simple is it in practice? Or I guess this is probably something that we'll have to find out. But in the early stages of when Eigen layer launches, I'd be curious to know how easy it is to swap out operators for an AV's like Eigen DA, maybe preliminary AVss. I wonder how many operators there might be to choose from, how centralized decentralized they are, how permissioned they are. I believe that the node operators for Eigen layer are all permissioned, that they themselves go through a vetting program in Eigen layer. That Eigen layer will start off with a permissioned do. Correct me if I'm wrong, but will all be permissioned node operators all highly vetted. And now puffer is selecting from that selected pool.
00:41:01.984 - 00:41:26.514, Speaker A: I wonder how those dynamics will kind of play out. But I guess really only time will tell, given that so many of these features and these milestones have still yet to be reached of even getting to the final node operator set for Eigen layer and then having puffer start to build the rails to connect to these operators.
00:41:26.974 - 00:42:11.834, Speaker B: Yeah, maybe just a slight clarification. So definitely the AVss are more on the permission side like I think Eigenva. And then there's going to be a handful that roll out kind of slowly over the course of the year. And that's mainly in place because that's where most of the slashing like the would happen. Like because it's a permissionless platform like this is, the risk is someone can go spin up an AV's with an arbitrary slashing condition. And just if people aren't vetting that roughly, they go join slashed. And this especially becomes worse when we're talking about attributable slash, where the money that was like slashed goes to the victim.
00:42:11.834 - 00:42:41.544, Speaker B: And if you're spinning up like AV's and there's like a back door or something, and you make yourself a victim, that's the easy way to drain these protocols. So definitely the AV's side is rolling out permissions but I think the operators are completely open. It's just becomes like a capital problem now. And this goes back to that limit of around 200 operators. Probably the 200 with the most stake weight will be the ones in the set.
00:42:42.644 - 00:42:48.344, Speaker A: Gotcha. And just to confirm, the 200 operators per AV's, right?
00:42:48.924 - 00:43:06.254, Speaker B: Yes. And I mean, also this is just for eigenvalue specific case. Like I can maybe do an abs where I do the BLS aggregation on an l two and I can have much more. But I think because eigenda is so foundational, it needs to be on the home one.
00:43:07.234 - 00:43:58.486, Speaker A: Gotcha. Well, this has been really fascinating talking to you through, talking with you through the dynamics of how puffer is thinking about restaking, how puffer is thinking about competing in the liquid restaking arena. As a final question, could you go through the timeline for all of this to happen? Because so much of what we're talking about has yet to really even happen. Eigen layer is not really fully launched. There are no avss, there is no Eigen DA, there is no restaking rewards. I believe puffer has not yet launched on mainnet either. So this workflow of a user being able to put their ETH into a pool of permissionless node operators and then have those node operators then delegate to an Eigen layer node operator.
00:43:58.486 - 00:44:17.854, Speaker A: Like, when is all of this going to happen and in what stages? Can you give us a sense of timeline and of the progression through which all of this will start to happen? And I will note on Twitter, it sounds like all of this is already happening, but it's not totally.
00:44:17.894 - 00:44:45.134, Speaker B: Yeah, I'll try and give you some as accurate estimates as I can. So maybe starting with buffer. What's been going on with us has been our pre mainnet deposit campaign. So our main net protocol is entering like the auditing phase. We're getting ready to launch that on Mainnet in the next. Hopefully towards late April would be our goal. And then anyone can go and participate, run a validator.
00:44:45.134 - 00:44:48.114, Speaker B: But right now, so may next late.
00:44:48.154 - 00:44:52.004, Speaker A: April, may not late April is the goal.
00:44:54.704 - 00:45:46.304, Speaker B: Yeah. And so what we've been doing so far has been accepting Steve deposits. And like, part of our goal initially with buffer was kind of thinking of us as kind of give some decentralization Runway to the theory core developers to roll out things like execution tickets, all these things that can help kind of keep things decentralized. And so part of that has been like, how can we reduce some of Lido's dominance on the market, keep them under this 33% threshold? And I think we're so happy that a lot of people have been supporting this. And right now, when we go to this main net phase, we're going to start redeeming a lot of this steed from Lido. And it should, I think the last time I checked, bring them down from around 33% to 32%. So we have about 1% of the.
00:45:47.724 - 00:45:54.740, Speaker A: Yeah, there's 1% of lido. Steeth is with puffer. Is that what you're saying?
00:45:54.892 - 00:46:00.984, Speaker B: Well, I think it's more like three or 4% of Leidos teeth, but 1% of the validator set.
00:46:02.124 - 00:46:13.356, Speaker A: 1% of the validator set and three to 4% of lidos. So you'll redeem all of that for puffer, for ETH, for native steak.
00:46:13.420 - 00:46:18.344, Speaker B: Yeah. So that'll turn into native ETH and fund all the permissionless validators.
00:46:19.324 - 00:46:27.424, Speaker A: That's great. That's. Congratulations. You are slowly but surely making a very tiny dent into Lydo's dominance.
00:46:28.044 - 00:47:10.184, Speaker B: That was the goal. So, yeah, then moving on in the mainnet time, we're going to start that whole process. And yeah, Eigen layer, I've heard things like in the next month or two months, Eigenvalue will go live. And then from there it's just a lot of different roadmaps. So I've kind of viewed like the Eigen layer roadmap as, and this is, for my own words, not from their team or anything, but like stage one has been about building up this foundational security of a lot of the TVL to provide to these ABS's. The next iteration for Mainnet is going to be delegations. And actually running APS is starting with eigenvalue.
00:47:10.184 - 00:47:42.064, Speaker B: Because like right now on Mainnet, if you have an eigenpod sitting there, you can actually engage in restaking. It just is sitting there waiting for it. Once this next mainnet update comes out, we'll be able to start delegating to these objects operators. Then the next stage, I think is focusing more on incentives. So m two is like the name of their main net, two for eigenpods. That's what's coming out next. There's no slashing there.
00:47:42.064 - 00:48:12.034, Speaker B: So a lot of these AbS's are going to be getting probably a lot of security from these lrts because there is no slashing risk. But then in M three, they're going to add both payments and splashing. So incentivize and disincentivize the operators. And then kind of, I think attributable slashing hopefully is like in one of those either in the m three upgrade or possibly after that one.
00:48:13.934 - 00:49:16.254, Speaker A: That's a lot of stages. This sounds like a multi year old roadmap. This does not sound like a 2024 stage thing. However, it sounds like, at the very least, puffer is gonna be delivering on a quicker timeline, kind of at least the liquid staking part, and putting a dent into Lido's dominance in the next couple months. And then as Eigen Lair launches start to add in the restaking part, it's fascinating to hear also that Eigen layer and its M two and M three will slowly start to roll out its incentives and its penalties, like slashing, and also its rewards and kind of toggle with that iteratively makes sense, because this is a very. It comes with a lot of risks and an additional layer of complexity. Well, yeah.
00:49:16.254 - 00:49:33.358, Speaker A: Well, thank you so much, Jason, for sharing with me all of this insight around the liquid restaking space and also sharing with me what puffer's been up to. It's been really fascinating to hear about this. Thank you so much for joining the show.
00:49:33.486 - 00:49:35.474, Speaker B: Yeah, thanks so much for having me, Christine.
00:49:37.374 - 00:49:57.524, Speaker A: This is it for the infinite Jungle episode this week. Thank you to everyone also for listening to the show. Please be sure, sure to tune in again next week for a new episode. Please do also like and subscribe to the show if you haven't already, and I will chat with all of you again next week. Bye, guys.
