00:00:10.040 - 00:00:26.510, Speaker A: Welcome to the infinite Jungle, the podcast about the evolution of Ethereum. On today's show, we're going to be talking about what Ethereum developers decided to include, exclude and keep debating for the Prague upgrade. But first, here's a quick show disclaimer.
00:00:26.702 - 00:00:43.502, Speaker B: I need to remind you to please refer to the disclaimer linked in the podcast show notes and note that none of the information in this podcast constitutes investment advice, an offer, recommendation, or solicitation by Galaxy Digital or any of its affiliates to buy or sell any securities.
00:00:43.678 - 00:01:50.012, Speaker A: On the latest Ethereum developer, call Acde 185 developers agreed to include two new code changes into the Prague upgrade. The prog upgrade is the execution layer upgrade, the next execution layer upgrade happening on Ethereum that will be simultaneously activated with the consensus layer upgrade Electra. Since the merge, all Ethereum upgrades have been a simultaneous upgrade of two different upgrades, the execution layer and the consensus layer. And on last week's show, we talked about what code changes are going into the electra upgrade, the consensus layer upgrade. We know the four main code changes going into electra and these code changes. While they do primarily impact the consensus layer of Ethereum, they also will require some changes to the execution layer. So the execution layer, client teams and developers are working on those upgrades, in addition to a few other eips, a few other code changes that will primarily impact the execution layer.
00:01:50.012 - 00:02:31.638, Speaker A: So on today's show, we're going to primarily talk about the prog upgrade and what code changes, what new code changes developers decided very recently to add to Prague. The first one is EIP 3074. It is a code change that will help improve the user experience, hopefully help improve the user experience on Ethereum. We've talked a little bit on this show before about account abstraction. And while this isn't a full blown let's bring native account abstraction to Ethereum, it will make user controlled accounts on Ethereum more flexible. So user controlled accounts on Ethereum are called eoas, externally owned accounts. Eoas.
00:02:31.638 - 00:03:14.010, Speaker A: These eoas are controlled by a user controlled by an externally, something outside of the protocol. Outside of Ethereum, a user needs to go in and sign a transaction. They need to. There's like an external force happening that actually authorizes transactions from that account. And the flip side of an EOA is a smart contract account, which the rules of that smart contract self execute. On Ethereum, there is no external user or party that needs to get the smart contract that is dictating how the smart contract works. When a smart contract, when you create the code for a smart contract.
00:03:14.010 - 00:04:08.464, Speaker A: When you set up the rules for the smart contract and you execute it on Ethereum, it's live, it's up and running on the Ethereum blockchain. And all those rules will self execute, they'll be self enforced by the Ethereum blockchain. And so users can interact with that smart contract. And so long as there's enough funds, gas to continue to be able to execute all the operations of that smart contract, it's live, it's perpetually just living on the blockchain. And so you'll also actually see different versions of applications, like older versions of certain decentralized applications like Uniswap continue to run on Ethereum even after new versions of that applications are launched on Ethereum. So that's kind of like an interesting dynamic of you can never really tear down or take away smart contract code from Ethereum. It's running in perpetuity.
00:04:08.464 - 00:05:25.800, Speaker A: So back to EIP 3074. 3074 allows users to delegate control, delegate control of their user owned account, of their EOA to a smart contract. And this is really great because user controlled accounts are very rigid in how transactions are authorized. Again, you have to sign off on every single transaction, um, but with smart contracts, you can allow more programmability, allow more flexibility into what different, um, transactions should or shouldn't be authorized from the user controlled account. So you can, you can delegate, um, you can authorize a smart contract, um, to be able to execute certain rules for how transactions in that EOA, um, should be, should be signed off on and should, what type, what type of authorizations are needed for that user controlled account to send funds and receive funds and interact with certain types of smart contracts, etcetera. So it's an upgrade, it's a code change. EIP 3074 is a code change that developers have been working on for quite a bit of time.
00:05:25.800 - 00:06:38.214, Speaker A: There's quite a few concerns about the security considerations of users willy nilly signing off on control of their EOA to a malicious smart contract. But all of these edge cases have been quite heavily discussed, and developers have definitely changed EIP 3074 over the past few months to get it ready for implementation and to make it as secure as possible. So that's one that developers did agree to include in the Prague upgrade. And the other one, EIP 29 35, I think, 29 35, you can definitely double check all of these eips in the call notes that we have in the show notes for today. I do a full write up of these calls every week. But the other code change that was included in Prague is a code change that basically lays the foundation, or at least part of the foundation, for Ethereum to update its data structures. Ethereum right now stores all of its state data in a Merkle tree structure.
00:06:38.214 - 00:08:00.004, Speaker A: These are technical terms for basically the structure where nodes, which are computers that are running Ethereum software, Ethereum client software, every time they want to sync up to the network, look up data, verify data, they are interacting with the data structure of Ethereum with this Merkel Patricia tri structure. When Ethereum launched, it was a very reliable data structure to use for the Ethereum blockchain. But now Ethereum developers are wanting to overhaul that data structure and move to a more efficient, more secure data structure called verkle tries. And actually Ben Edgington, one of the guests on our show, had talked about this upgrade. So definitely do check out that interview if you're interested in learning more. But these vertical tries offer nodes the ability to be able to sync to the chain, to be able to create proofs and verify the state of Ethereum using less energy and taking less time. So this is a pretty big upgrade for Ethereum that is going to be upcoming after Prague.
00:08:00.004 - 00:08:49.536, Speaker A: Vertical upgrade to really transition over to an entirely new data structure for Ethereum is coming in the next upgrade after Prague. But I mean one thing at a time. And this EIP, which saves historical block hashes to the state of Ethereum is a precursor to the verkle upgrade. It basically is something that is needed anyways if developers do decide to go with this transition over to Verkle. So because developers are very confident they want to do verkle in the next upgrade, they decided to include this EIP, start saving the historical block hashes into Ethereum state, which is going to be needed for the vertical upgrade. Start doing that now. Include that in Prague to the real actual transition from Merckle.
00:08:49.536 - 00:10:11.784, Speaker A: Patricia tries to VRKL in the next execution layer upgrade, which already has a name, Osaka. The timing for Osaka though is a little bit uncertain. Yeah, so those were the two code changes that developers agreed to include in Prague on the latest developer call, and two that they decided to exclude from Prague is inclusion lists, and also a fairly new proposal to increase the gas cost of hash functions on Ethereum. Now I'm going to encourage listeners to check out the call notes for Acde 185 if you want to learn more about the nature of these code changes, primarily because neither of them is going in Prague, so we'll have time to talk about them when we talk about Osaka, when we talk about future upgrades, so I'm not going to spend a lot of time on them on this episode. Plus, as some people may know, if you've been following along with the show in prior episodes, I'm not a huge fan of inclusion lists. I don't actually think they're a really great mechanism for improving Ethereum censorship resistance. So I'm not going to spend a ton of time other than to let you know, let my listeners know that developers will not be including them in the prog upgrade.
00:10:11.784 - 00:11:11.464, Speaker A: There are two other code changes that developers spent quite a bit of time debating, one more than the other, and just could not reach a decision on. There was so much discussion on them, and basically the conclusion from the latest Ethereum dev call is to let's talk about them again in a future call. Once we look into them more, maybe discuss them a little bit more on other channels, let's basically delay the decision on whether or not they're going into Prague. And one of them I really want to talk about quite a bit about on this show because it's also a code change that would primarily impact the user experience, the smart contract developer experience. It really impacts Ethereum's, the way that smart contracts are executed on Ethereum. It's called EOf. Ethereum virtual machine object format.
00:11:11.464 - 00:12:27.764, Speaker A: It's been a code change that developers have been debating for years now. It was potentially going to go into Shanghai upgrade, which is when Ethereum developers activated staked ETH withdrawals. But at the time developers said, look, touching the EVM of Ethereum, the very heart of the execution engine of Ethereum, we shouldn't do it willy nilly. And it sounds like these small changes to the EVM are going to require more changes later on, so why not spend the time to think about EOf a little bit more? And now that EOF, there has been more time, and there's a lot more going into EOF than there was initially proposed for the Shanghai upgrade. It's a bigger overhaul to the EVM. Developers are now concerned that the complexity of the EOF upgrade is simply too large to include in the Prague upgrade, without delaying Prague, without taking away resources from client teams to focus on other parallel initiatives like the verkle upgrade, like data availability, sampling, etcetera. For our listeners that might not be super familiar with what the EVM is, I want to spend some time to talk a little bit about the importance of the EVM on Ethereum.
00:12:27.764 - 00:13:25.294, Speaker A: So the EVM is really what makes Ethereum unique. It was the first of its kind when Ethereum launched in 2015. It's really what made Ethereum the world's first general purpose blockchain, the first blockchain which you could execute code of arbitrary complexity. This is also what programmers sometimes call Turing complete, what made Ethereum a Turing complete blockchain. There is a mechanism, an engine on Ethereum, that is able to understand code of arbitrary complexity, and that is the EVM. That is the Ethereum virtual machine. But because it was the first of its kind in 2015, there's quite a bit of enhancements and improvements that people have suggested over the years to improve the way that the EVM works, the way that smart contract code is processed through the EVM, and also executed by the EVM.
00:13:25.294 - 00:14:39.672, Speaker A: And since 2015, since the EVM launched, there hasn't been that many major overhauls to how the EVM works. And it kind of makes sense because the EVM is so core to Ethereum's functionality, it's not really something that developers want to play around with or willy nilly upgrade. But the EOF upgrade, it really targets several different kind of changes to the EVM. It primarily makes the EVM a lot more consistent in the way that it processes data versus code. It makes the EVM different opcodes, different operations that you execute on Ethereum. It makes these operations a lot more intuitive and more secure for smart contract developers to use. And it also makes the EVM more upgradeable, so that when developers do want to make a change to the EVM, it doesn't have to be such a large, arduous procedure that requires a ton of of testing for various edge cases, impacts on smart contracts, etcetera.
00:14:39.672 - 00:16:16.656, Speaker A: So this is, this upgrade to the EVM called EOF, is a long time coming. It's an amalgamation of many different code changes, I think from the last I saw on the eof specifications, it's ten different eips, ten different code changes that would be bundled together, all targeting how the EVM functions, and because of how large this overhaul to the EVM would be. Developers on the latest Ethereum developer call was hesitant about including it in the prog upgrade, especially because developers had wanted to make Prague an upgrade that they could potentially execute before the end of the year. And to those considerations, there were other developers on the call, such as Georgios from the Reth team, who was encouraging developers to kind of try and go the extra mile to include EOF and try to pack as much as developers can into this prague upgrade. And there was also many people who had been working on EOF since Shanghai or even earlier. That had expressed frustration at how, at how developers enthusiasm for the upgrade kept shifting. So again, talking a little bit about the feedback to people working on the EOF upgrade during the Shanghai, during the time when developers were planning Shanghai, they had said, oh look, touching.
00:16:16.656 - 00:17:33.539, Speaker A: The EVM is a really, really major, it's a major operation. And so we want to make sure that the upgrade is, its an upgrade that if we do it once we know for certain with some amount of certainty, that we wont need to have another major change to the EVM shortly thereafter. Which is why the EOF proposal has kind of grown since then, has become a lot more thought out. Theres been a lot more testing and implementation done for EOF since then. But now developers, now the broader Ethereum protocol developer community, now that they're talking about really putting EOF into Prague, kind of putting their money where their math is, there's a bit of pushback and it's unclear whether or not EOF is actually going to go into Prague. And one of the things that all developers seem to be in agreement with is the fact that if EOF is not included in Prague, it's likely that it probably will not be included on Ethereum for the next two to three years. Because as I said earlier in this episode, developers are quite confident, they want to prioritize the virtual upgrade for the next upgrade after Prague Osaka.
00:17:33.539 - 00:18:31.746, Speaker A: And it was very clear on the call that such a major change to the data structure of Ethereum, it's too risky to bundle EOF with an upgrade like Verkle. So developers are confident, they want to prioritize Verkl for the next upgrade, Osaka. And they're also quite confident that Verkle is such a big upgrade that they're not going to be able to do both at the same time, EOF and Verkl. Which means that if EOF is not included in Prague, it probably will take another few years for there to be an upgrade to do EOF and to make these enhancements to the EVM. And so lots of debate, lots of back and forth on EOF. And I got to say, I think I agree a lot more with developers who are arguing that there is no such thing as a small fork. There is no such thing as a small upgrade on Ethereum.
00:18:31.746 - 00:19:54.670, Speaker A: And if Ethereum developers are putting in the time to coordinate, to create all these testnets, to really put their resources into executing Prague, why not bundle Prague? Why not put as many code changes as they feasibly can into Prague to make it as effective of an upgrade as possible. Of course that means that the Prague timeline, of course it means that Prague may not happen this year, though I think if you add in a major change like EOF, it basically means that Prague happens sometime in 2025, which may mean that the verkel upgrade is delayed thereafter. But again, I think that focusing on what is possible today and what is achievable today and then working as quickly as developers can to the next milestone, but kind of focusing on just one thing at a time, I think is probably the wisest strategy to go with. But that being said, it's really uncertain whether or not Eof is going to go in or not. It would present major improvements to the smart contract developer experience on ethereum, and it is about time to introduce some major improvements to the EVM. Since there hasn't really been any since the EVM launched in 2015. And it again is the first of its kind.
00:19:54.670 - 00:20:58.592, Speaker A: Ethereum was the first general purpose blockchain. And so, yeah, aside from eof, there's one other code change that developers are debating, and that is the increase to call data costs. Call data is basically the data that is attached with an Ethereum transaction. And people can put any type, arbitrary types of data into this little call data space in a transaction. And before our most recent Ethereum hard fork, people had put in, one of the main reasons call data was used was for L2 rollups. They would batch user transactions and put that data into an Ethereum transaction, into the call data field of an Ethereum transaction, and thereby use Ethereum as this layer for data availability. And so you have a record of user transactions that happen from the L2 on Ethereum Lal one.
00:20:58.592 - 00:22:28.550, Speaker A: But ever since blobs have been introduced, there's now a different type of transaction where L2 s can actually put that user transaction data in for a lot cheaper. And given that developers are trying to increase the number of blobs on Ethereum shortly and really work on improving Ethereum scalability through L2 s, it seems as though developers can increase the cost of call data now that that really isn't the field where L2 s really should be even interacting with. They should primarily be using blob space. So, and by increasing the cost of using call data, they can also ensure that the maximum block size of ethereum is reduced. Because really if you try and put a lot of data into the call data space of a transaction, that transaction becomes very large and very heavy. And so if a lot of people are using call data for whatever reason, and they're putting those transactions into blocks, the blocks become a lot heavier, harder to propagate through the network. And so to encourage developers to encourage L2 s to use blobs and shrink kind of the size, the maximum size of what an Ethereum block could be, developers are weighing this other code change of increasing the call data costs, and a lot of analysis has gone into this.
00:22:28.550 - 00:23:29.384, Speaker A: There's an Ethereum foundation researcher, Tony Worstatter, that is primarily working on this, working on this proposal. And there were a few questions about its implementation impacts on various applications on Ethereum that had been raised about this EIP. And so I think the, and so the conclusion was really that there would be, Tony would work on answering some of these questions about the EIP's implementation and its impacts and go from there. So those are the two main code changes that developers will continue to debate and discuss for inclusion in Prague. EOF and increases to the call data cost. I think EOF is a pretty important one that developers are very divided about, and it's not clear one way or the other whether or not it's going to go in at this moment. So something to keep an eye out for.
00:23:29.384 - 00:24:47.994, Speaker A: And again, I do think that that more, I think really the question is like, is EOF and are these improvements to the EVM something that can wait two to three years or can be included now? And it seems as though, at least from my perspective, there doesn't seem to be a strong reason to hold it back for another few years while developers figure out, figure out Verkl and figure out some of the other code changes that we know are coming into Osaka. So, yeah, so that's the latest update on Prague next week. On next week's Ethereum developer call, it's going to be a developer call primarily focused on the consensus layer. So we'll get some updates on Elektra and we may even get some discussion on changes to Ethereum's issuance policy, which is always a spot by sea debate. If you want to hear a little bit more on the conversation around changes to Ethereum's issuance policy, changes to Ethereum's monetary policy, be sure to check out last week's episode with Nixo. We debate that topic quite fiercely. And while I'm still confident that I don't think there will be issuance changes in the electra upgrade.
00:24:47.994 - 00:25:14.924, Speaker A: Never say never, right? So that's kind of what to expect for, for the upcoming developer call. That's it for today's episode. Thank you for listening. Please be sure to like and subscribe if you haven't already, if you enjoyed this episode, we'll have another episode of infinite Jungle coming out tomorrow, so be sure to tune in. But until then, my fellow explorers, stay safe and stay curious.
