00:00:11.200 - 00:01:05.314, Speaker A: Welcome to the infinite Jungle, the podcast about the evolution of Ethereum. I'm your host, Christine Kim, VP of research at Galaxy, and today we're going to be talking about inclusion lists. This is a code change that has been that is in consideration for the Prague electra upgrade. And while developers are evaluating a number of different priorities for the prog electra upgrade combined upgrade name is Pectra. You might hear me use all three terms throughout this episode. But while developers are evaluating a bunch of different code changes for that upgrade, this is one that I think is particularly important to the value of censorship resistance on Ethereum, which is why I want to get into it, to talk a little bit about what it does. And then for the second half of the show, we are going to be joined by my dear, dear friend, Ben Edgington.
00:01:05.314 - 00:02:09.932, Speaker A: Ben, I've known Ben for several years, basically ever since I started working in the crypto space. He used to be very, up until recently, he used to be a developer for the tecu consensus layer client that is owned by consensus, the ethereum venture capital company that builds products like Metamask and whatnot. But now he is at optimism op Labs. He is the lead technical manager there. So we're going to talk a little bit about what prompted that transition and kind of his thoughts around the l two roll up world, because op Labs builds one of the most, like the largest, the most popular l two rollup optimism. So it's very cool to see him transition, and I'm excited to find out more about his work and what prompted that switch. So we're going to get into it.
00:02:09.932 - 00:03:14.784, Speaker A: But before we dive into inclusion lists and our conversation with Ben, here's a quick disclaimer. I need to remind you to please refer to the disclaimer linked in the podcast show notes and note that none of the information in this podcast constitutes investment advice, an offer, recommendation, or solicitation by Galaxy Digital or any of its affiliates to buy or sell any securities. Before I get into inclusion lists, I suppose people listening to the pod or watching the video on YouTube will want a quick update on the Denkun upgrade, which is the most. Which is the next upgrade that's going to happen on Ethereum? Unfortunately. I mean, there's really not much to share. Developers picked a date for Mainnet activation March 13, which we talked a little bit about on the last episode of this show, and there hasn't been that much change since then. Client teams are continuing to prepare their final software releases for the upgrade.
00:03:14.784 - 00:04:34.516, Speaker A: Client teams had given an update on the call yesterday on all core developers execution call number 181. They shared that they're getting close and plan to release all the final versions of the software needed for the upgrade sometime next week. And after that, developers are going to do one final Testnet dry run with all those final client releases, just to make sure that those releases are good to go and good for node operators to be able to use through a Mainnet Shadowfork a Mainnet Shadowfork is basically a type of testnet where where you can activate upgrades in an environment that mimics the state and the activity that's happening on an existing testnet. So developers are going to do a main net shadow fork of the Denkun upgrade with all the final client releases sometime at the end of next week, which I think puts it at the 23rd. The 23rd. I'm checking my notes here Friday the 23rd. And once the mainnet shadow fork happens, they see that the upgrade goes well and there's no major issues with the client releases the Monday thereafter.
00:04:34.516 - 00:05:51.384, Speaker A: After on the 23rd, the Ethereum foundation will likely push out a blog post officially announcing the upgrade, officially saying that, you know, March 13 is the date, and node operators please all upgrade your software before that date so that we can see the Denkun upgrade go live. There's not that much to discuss anymore around Denkun going to happen, and developers are really just kind of at the near finish line in terms of preparing what they need to prepare. On the other hand, the upgrade after Denkun Pectra is very much still up in the air, and there's quite a bit of discussion and debate on what exactly should be included in the Pectra upgrade. In the next upgrade, there's a lot of competing priorities. On the most recent dev call Acde 181, there was nine eips that was discussed on the call for whether or not they should be included in Pectra. Developers shared lots of different sentiment, and shared and expressed positive sentiments around certain eips for inclusion. And there's a lot of debate, particularly on the timing of this upgrade.
00:05:51.384 - 00:06:53.698, Speaker A: Not only is it debated what should be included in the upgrade, but kind of similarly. If the upgrade is going to happen sometime this year after the Denkun upgrade, then what gets included into Pektra has to be a lot more narrow in scope. And so developers, while talking about the content of the upgrade, is also talking about the timing of the upgrade. Do we really want the upgrade to happen this year in 2024? Because if not, then we probably have more bandwidth to include more eips into the pectra upgrade. So both of those discussions, I think, are really top of mind right now. And one of the code changes that I really wanted to get into very quickly at the top part of this show is inclusion lists. It wasn't discussed super heavily on Acde 181 on the call yesterday, but it is one that developers are talking about quite a bit.
00:06:53.698 - 00:08:14.722, Speaker A: And there was a separate meeting that happened today. We're recording this show on the Friday after AcdE 181, and there was a breakout meeting that happened today just for inclusion lists, just to talk about the details for its implementation. Inclusion lists are a way for validators to be able to express certain transactions that need to be included in a block and express those choices, express those transactions to a third party block builder. In case people who are listening to this episode aren't aware, being able to include certain transactions in a block, exclude them, order them in a certain way, it's a phenomenal, it's a very valuable power. There's a lot of, of money that you can make from ordering transactions, from excluding certain transactions, but including others. And that kind of power on Ethereum is held and given to validators, validator node operators. They are the block producers, but in an attempt to kind of ensure that validators and validator node operators don't become too sophisticated as actors.
00:08:14.722 - 00:09:39.854, Speaker A: And one validator node operator becomes extremely more sophisticated than other validator node operators, creating centralization of who gets to build blocks on Ethereum. The way that Ethereum is structured is that the responsibility of creating valuable blocks and producing blocks that contain additional rewards by reordering transactions, which is also called meV, that responsibility is handed off to another party, or can be handed off to another party. No validator is for to kind of rely on third party block builders, but many, many, many validators do that, because when they do that, they're able to earn additional rewards from the block. So validators, they have this relationship with builders, and builders are the sophisticated entities that can execute very sophisticated strategies around what makes a block valuable, how to earn additional rewards through that block by including and reordering certain transactions. And there's a party that sits in the middle between validators and builders, and that's the relay. And the relay is really the software that ensures that blocks, not blocks, that builders and validators are communicating fairly with one another, that no one party is frontrunning the other. So that's a little bit of an overview.
00:09:39.854 - 00:10:42.124, Speaker A: You've got builders, relays and validators. And what inclusion lists do is ensure that validators can express to the builder. Look, these set of transactions need to be included in the block. And why would a validator want to do that? Perhaps it's because the builder is censoring transactions. Perhaps the builder is operated by a regulated entity that is not able to include transactions that are interacting with an address that is on the OFAC sanctions. Listen, since 2018, there has been this concern, especially because the US treasury has started to include certain cryptocurrency addresses on the US sanctions list that have caused big entities like cryptocurrency exchanges from interacting with those addresses. Any transactions going to those addresses, leaving those addresses, they're not serviced by crypto exchanges or entities.
00:10:42.124 - 00:11:48.954, Speaker A: And there is a way to kind of track on chain whether or not these transactions are being included or excluded in a block. And Ethereum developers are certain that builders on Ethereum are censoring transactions, certain relays are censoring transactions, and most likely certain validators too. And so what inclusion lists tries to do is to give that power back to validators to say, look, if your builder is censoring transactions, giving you a block that has purposefully excluded these sanctioned transactions and addresses, excluded them, then you have the power to force inclusion of these transactions back into the block. And technically, as I said, validators don't need to rely on third party builders. They can do that anyways. Now, by not relying on builders or relays, they can just build their block locally, include whatever transactions that they want. But in doing so, the validator, because it's not a sophisticated entity like a builder, is unable to earn the additional rewards that come with MEV.
00:11:48.954 - 00:12:46.004, Speaker A: So by still allowing validators to interact with builders and do so in a way that they can enforce inclusion of certain transactions, then the validator can not only get their additional rewards, their MEV, but they can also ensure that they are building a block that is uncensored. So as I'm explaining this to you, you might think, oh, that's great, inclusionless. Woohoo. We can create these blocks that are uncensored. We can help make Ethereum more censorship resistant than it is today. But one of the things that I have concern about with this design is would not validators, would not validators kind of opt out of the feature of inclusion lists? There are not a ton of validators that are run on Ethereum, that are run by independent, at home stakers. Ben, who we're going to be talking to later on this episode, runs his own independent validator.
00:12:46.004 - 00:15:31.826, Speaker A: But most the majority of people that have validators or are running validators are running it as a professional entity, as a staking, as a service provider, as a staking pool, as infrastructure provider. These are the vast majority of validators are being run by regulated entities. And I can't imagine that if they had the choice to include transactions that should be censored according to us law, that they would then still opt in to including those transactions in a block, especially if there are regulatory concerns around that. So I think that's one area that really needs to be thought through, through a little bit more heavily of will inclusion lists really improve the censorship of censorship resistance of Ethereum in practice, given that the vast majority of validators on Ethereum are already being operated by regulated entities, and those regulated entities are probably relying on the builder or the relay to censor those transactions, and if the onus had fallen to the validator node operator to censor or not censor those transactions, I wonder if validator node operators would choose to not censor, given that they are regulated entities. I think that one of the questions beyond this, that's another important question to ask, and that takes a little bit of a step back, is how can Ethereum encourage independent at home staking? So many people don't have the technical know how to be able to operate the validator. Many people don't have desire to operate the software, to be able to connect to the Ethereum blockchain and do so in a way that, and do so in a way that requires them to kind of manage all their private keys and make sure that their validator constantly has uptime, and many people would just rather kind of have someone more sophisticated or professional do it for them. And so I think there's a broader question of, like, how do we make it easy for any user around the world, not just in the US, but like everywhere globally, how do we make it easy for people to verify the blockchain, to be able to connect to Ethereum, to be able to protect the censorship resistance of Ethereum by operating their own independent validators and be able to verify using their own devices that they have at home the validity of the blockchain? So it's a big topic.
00:15:31.826 - 00:16:33.772, Speaker A: I think censorship resistance is really one that beyond inclusion lists and beyond this one upgrade, Prague electra developers are going to continue to be talking about. But I hope this short explainer of what inclusion lists is helpful to you, my listeners, to be able to engage in this discussion of should this be an upgrade that is prioritized for Prague Electra? And if not for Prague Electra then when and what versions of this inclusionless design should developers kind of prioritize or think more through? So we're going to talk to a former Ethereum core developer. Actually, I hope Ben still is going to be participating in Ethereum core development, but we're going to go chat with Ben now and talk a little bit about this further with him. Let's go chat with Ben. All right, everyone, back to the show. And I have with me Ben Edgington, my dear, dear friend. Like I said at the top of the show, Ben and I go way back, and we used to have a podcast together called mapping out Eve two.
00:16:33.772 - 00:16:36.964, Speaker A: Those were fun days. Ben, welcome to the infinite Jungle show.
00:16:37.044 - 00:16:51.434, Speaker B: Christine, it's wonderful to be back with you, to get the team back together. Just love it. And enjoying your new podcast is great. I love hearing you go through the upgrades. You're so much into the details, inspiring. So thanks for doing that.
00:16:51.554 - 00:17:34.134, Speaker A: Thank you. I so appreciate it. And I gotta say, ben, I really do miss, you know, our shows together aren't now in our episodes. And I feel like ever since, you know, I transitioned over from Coindesk to Galaxy, you know, I was thinking a little bit about, oh, like we should, I should bring back another podcast that goes into the technical details of what's happening on Ethereum. And so infinite Jungle is really kind of born out of mapping out ETH two. I think all of the good times that we had there helped me to continue to think, like, we need to keep something like that going. So it really was inspired from the show we had together.
00:17:34.634 - 00:17:36.850, Speaker B: We love the technical details, don't we?
00:17:37.002 - 00:18:11.094, Speaker A: Yeah. And I gotta say, I mean, now for you, one of the things I wanted to mention to our listeners today is that Ben, for the longest time, was an Ethereum core developer building one of the consensus layer clients of Ethereum Tecu, but recently announced that moving to op Labs, which is the development team behind optimism, a L2 roll up. This sounds like a very big transition to me, going from consensus layer client building to now a L2 roll up. Ben, tell me a little bit about what prompted this move.
00:18:12.334 - 00:18:48.104, Speaker B: Yeah, thanks, Christine. It has been. In some ways it's a big jump, and in some ways it's not a big jump. So, yeah, I was at consensus for over six years. In the end, I built the R and D team there, then moved over to building Tecu. And really, my passion for the last six or seven years has been two things. Get Ethereum onto proof of stake, that's number one, and make Ethereum scale and that's really been absolutely underpinning what I wake up in the morning thinking about for the last six or seven years.
00:18:48.104 - 00:19:44.514, Speaker B: And so we delivered proof of stake about a year and a half ago, and we did the merge, and that was great. And that just felt like a huge moment, a massive accomplishment by everybody in the community. And tecu, which was something I started but was built by the dev teams, that was a key part of delivering the merge, and I'm very proud of that. But since then, the l one scaling narrative has changed, really l one. Things have revolved around different concerns, and my passion has been about scaling stuff. And so I just thought maybe it's time for a change. Opportunity came up at op labs and talked to them and know if you could bottle enthusiasm and kind of, you know, waft it around, that would be op labs.
00:19:44.514 - 00:20:04.960, Speaker B: They are brilliant engineers. Adrian, who worked on Tecu, not going to lie. He left and joined optimism a year ago. One of the best engineers I know, and, you know, I'm just delighted to be working with him again. And there was a lot to like about op labs. I don't see it as a different mission. Right.
00:20:04.960 - 00:20:23.896, Speaker B: It's all about scaling Ethereum. I don't feel like I've transitioned away from ethereum core dev stuff. I feel very much that I'm still doing that, but I'm not a layer one core dev, but still delivering the Ethereum mission scale the thing be the settlement layer for the planet.
00:20:24.080 - 00:20:44.646, Speaker A: There are L2 roll up teams like Arbitrum that have consensus layer client. Teams like Arbitrum has prism. Is op labs in your transition? Does that kind of indicate that op labs is trying to build out their own consensus layer client? Or is your work really going to be on the L2 roll up stack?
00:20:44.710 - 00:21:02.022, Speaker B: Yeah. Not aware of any plan to build out a consensus client or to own a consensus client yet? No. Very much around delivering the super chain vision, getting that out of the door. My role is technical program manager. I like to emphasize the technical part of that. I'm a program manager. That's technical.
00:21:02.022 - 00:21:19.714, Speaker B: I'm not just a program manager that happens to be managing technical stuff. And yeah, it's very much about facilitating, helping the op labs to play their role in delivering the super chain future. That's the sort of immediate goal.
00:21:20.214 - 00:21:23.314, Speaker A: What is the super chain future? What does that mean?
00:21:24.014 - 00:22:25.104, Speaker B: Yeah, so the super chain is part of the optimism stack future. So optimism has this technology they call the op stack, which runs the op mainnet and a bunch of other chains like base from Coinbase. And the super chain is a sort of coordinated collection of those chains in parallel under a single governance mechanism, which is the decentralized governments of optimism foundation, but also with ultimately cross chain message passing and quite tightly coupled chains. And then the chain becomes very much a commodity. I think of it as a supermassive processor in a computer, everything is multi threaded. Now, back when I was young, processors were single threaded and just monolithic. And now processor has 12, 16, 32 cores, whatever.
00:22:25.104 - 00:22:32.720, Speaker B: Even my laptop's got like 16 cores or something. And it is just like adding cores and threads on the processor.
00:22:32.752 - 00:22:33.832, Speaker A: Computational energy.
00:22:33.928 - 00:23:29.476, Speaker B: The core is, yeah, so you're parallelizing. So. And in that sense, it's kind of similar to the original, if you recall, Christine, the original three phase roadmap for ETH two, where we were to do data sharding and then we were going to deliver execution sharding is kind of like execution sharding in a sense, but without being enshrined in the ethereum based protocol. So I see it as a successor, in a sense, to that execution sharding model. So, yeah, it delivers parallelism and scale and a very convenient environment to deploy chains and lots of opportunities for cross chain communications on. I'm only a week into the job, so I can't speak authoritatively about any of this stuff. I'm learning the ropes just as much as everybody, but it's, yeah, very exciting.
00:23:29.620 - 00:24:55.988, Speaker A: That's a whole new design landscape, I gotta say. And the amount of conviction that I hear from not just L2 roll up teams, because of course they would be convicted about the L2 vision and the super chain vision and being able to scale through rollups, but also from Ethereum core developers when they talk about the Denkun upgrade, about EIP 4844, really supporting L2 roll ups a lot better by allowing them to be able to be able to batch transactions and commit them down to Ethereum at a cheaper cost. But I wonder, how certain are we that L2s are the way to scale Ethereum? I know that your second goal after getting Ethereum to proof of stake, which, amazing. We achieved that technically, you guys achieved that, really didn't take much pride in that. But the next step is scaling Ethereum. And I wonder if L2s, I mean, what is the, how convicted are we that L2s are the way to go? Because I think L2 is clearly, there's so much experimentation that still needs to happen, so much technology around l two s that have yet to really be tested, really yet to be figured out so many questions around L2 interoperability latencies about questions of whether or not L2s will even have the censorship resistance decentralization of Ethereum. I'm worried.
00:24:55.988 - 00:25:04.304, Speaker A: I'm worried if L2s are the end game for ethereum scalability. I mean, how convicted are you about this, Ben?
00:25:05.484 - 00:25:54.828, Speaker B: I don't think we have any other ideas. I mean, I think this is it. This is the roadmap we committed to way back when Vitalik did his roll up centric roadmap post. I mean that was predated the idea of Ethereum l one being a data availability layer primarily. It came up a year or two earlier than that. And yeah, I think scaling at l one, enshrining it at l one is a dead end. I think it was right, a very ethereum thing to do, to sort of unleash the innovation by saying we're not going to hold this close and just try to build this slowly in l one and enshrine it.
00:25:54.828 - 00:26:45.884, Speaker B: We're going to say pivot to the roll up centric roadmap and unleash the brilliance of these l two teams and the engineering talent and the vision and yeah, so on the one hand you've got the kind of the engineering side of things, just so many teams building in different ways, exploring the space and delivering the innovation. But on the other hand, it's a technical delivery, the technical aspect, doing it in a sort of monolithic way just seems to be a dead end. So yeah, we don't have any other ideas. I mean, the alternatives, like cranking up tps by having a big, bigger nodes, is not an ethereum direction. We love the small stakers. It's seen as part of the DNA, and rightly so.
00:26:46.344 - 00:27:23.700, Speaker A: Yeah. I do want to get into at home independent stakers because at the top of this call I talked a little bit about inclusion lists and the importance of trying to protect Ethereum censorship resistance, but I wasn't sure if inclusion lists really are the best way to do that, given that so many validators are run by node operator or professional staking entities that are regulated and that are not at home. You are one of the few, Ben. You are one of the few that operate an at home independent staker. Do you connect to Mev Boost? Do you get Mev blocks?
00:27:23.772 - 00:27:30.624, Speaker B: I don't, I build, you know, on the rare occasions blocks come along these days I am building my own blocks.
00:27:30.744 - 00:28:44.624, Speaker A: Wow. Yeah. I mean that kind of activity is becoming fewer in number and I'm not sure if inclusion lists are really the be all, end all to encourage vanilla building or blocks that can contain censoring transactions or censoring activity. On this topic of kind of independent at home stakers and priorities for how to improve Ethereum censorship resistance is from your view and from kind of all the experience that you've had in the core development sphere on Ethereum is to what extent do you think that inclusionless should be a priority? To what extent do you think some of these other eips that are being debated for Prague Electra should be, should be prioritized for the upgrade? I think developers are really at a crossroads here of what to include, what not to include, and also about the timing. Should it be in this year or should we try and figure things out for 2025? It's big questions and I feel like your voice still carries a lot of weight, so I'd be curious to know what your thoughts are on those.
00:28:45.084 - 00:29:32.934, Speaker B: Yeah, it would be nice to think so. I mean, I'm in the kind of fork, early fork often camp, which I would love to see us have a cadence of more frequent upgrades to the core protocol and including more of the long tail of VIP's that are never quite important enough to include in a major upgrade but just sit on the shelf for a long time. I'd really like to see a more frequent cadence of upgrade. And people talk about the overhead of the coordination overhead and everything, and it is extra work, but that's just a muscle that we need to exercise more. And we have great tooling now. Things have come on in leaps and bounds in the last two, three years. The EF DevOps people are wizards.
00:29:32.934 - 00:30:41.704, Speaker B: And the whole shadow forking thing and the testing frameworks and the test nets that we have, I seriously think we can reduce the overhead of doing more frequent updates, and we should. I'd be all for a 2024 upgrade, and that seems to be a direction of travel. It's kind of hard to read the kind of core devs meeting fully, but the sense I'm getting is that we're moving in the direction of having a lighter weight 2024 upgrade before putting in some big things. Maybe next year. And yeah, I think inclusion lists are going to be important, some forced censorship resistance is going to be important just because the end game is that we have a small number of block builders who build blocks in the network. The idea that we all build blocks at home is a nice pipe dream, but is not the reality. In any year's time we are going to rely on specialized block builders and we're in that place now, just de facto through Mevboost.
00:30:41.704 - 00:31:13.510, Speaker B: In that world, the block builders don't have a lot of freedom. They can only really order transactions or censor transactions. And the thing we really care about is censorship. Censoring transactions, that's what we want to prevent them from doing. So we need mechanisms in protocol to do that. And one good candidate is the inclusion list. I'm not sure we've necessarily landed on the right solution yet, but we're iterating towards it.
00:31:13.582 - 00:32:12.108, Speaker A: Yeah, I want to push back a little bit on the fork fast and fork often. I mean, I hear you and I got to say, Ben, there was a moment on one of these calls when we were talking about Dencoune and the activation of the Denkun upgrade. You really pushed it forward. Like, developers were very close to kind of like delaying it another week or month, but you were really on the ball about, no, guys, we got to do this sooner rather than later. And with Pectra, with the Pectra upgrade, I think there are candidates, EIP candidates for Pectra that hold a lot of significance in that, like, inclusion lists are about the censorship, resistance of Ethereum. Censoring activity is happening at a wide scale, large scale now, validator. The size of Ethereum's validator set, that's a problem now, as in like, it's, there is really no mitigation for if the validator set grows behind beyond 1.5
00:32:12.108 - 00:32:59.284, Speaker A: million validators and the network would be in major trouble. There are certain upgrades that I think are pressing, are urgent. And I don't know if trying to schedule the upgrade earlier and cutting out these kind of important high priority issues just because they can't be ready within 2024, just punting them to 2025 to another upgrade is the best way to go. I mean, what are your thoughts around that of some of these changes will take longer than 2024 to get ready, but they are higher priority than, say, the small eips, like BLS compile signatures that you could probably get in the next couple of months. But is that really what we should be working on in comparison to, say, max Ev?
00:33:00.584 - 00:33:49.364, Speaker B: Yeah, so, I mean, the big ones are like vocal trees. Max Eb, the EOf thing has been on the shelf for a long time. I think teams, I've come out to, one of the dev teams, led them for like five years. We have capacity to do more. We can work in parallel, right? I mean, in any team, you're not going to devote the entire team for the next year to doing vertical trees, there is capacity to do other things alongside that in parallel and to deliver upgrades. The alternative is that we roll up everything that's pending into a massive upgrade, and then the testing just becomes much harder. You've got so many more interdependent components and a much riskier upgrade.
00:33:49.364 - 00:34:28.124, Speaker B: In some ways, it's a judgment call, right? As to which is preferred, I prefer to move fast and not break things, but I think we're experienced enough now to safely deliver faster upgrades and work in parallel on different things, big things like vocal trees, very intrusive into the execution layer. But on the consensus layer, we can, you know, that barely affects us. I mean, we can do other things in parallel to that.
00:34:28.244 - 00:35:05.686, Speaker A: I feel like I've tried on this show, even though this show is very young, I've tried on this show to explain what verkle trees are. Could you give like two sentences or like, you know, on what verkle trees? Because I get the general idea that, you know, smaller proof sizes to verify ethereum state is great because then you can have like, maybe more lightweight nodes, but then, you know, Verkle gets kind of bundled in with a lot of buzzwords like statelessness. And I just, I need. Please give me your wisdom here. I think this will be very helpful for many episodes to come. And we're going to keep talking about Verkle, so I need your technical know how around this.
00:35:05.830 - 00:35:39.634, Speaker B: Oh, boy. Well, I'll do my best. So what's the end goal? The end goal is exactly what you said, stateless. So the biggest burden on running an execution client today is managing, navigating this massive state of Ethereum. And this state is the account data, the smart contract, smart contract storage that sits there. And every time a transaction is done, you have to go through this entire state to find the right bits of data and update them. This is slow because this is a huge database.
00:35:39.634 - 00:36:44.982, Speaker B: And so if we want to be able to run nodes on very, very lightweight hardware, we basically need to relieve them of this burden of the disk access times and also storing the sheer amount of data that's required half a terabyte or whatever it is. Now, one way to do that is with every transaction you send to the network, all the data necessary to validate that the transaction is valid. And so, and you can do that by sending the data, the bits of data, like the account balances. So if I want to send you one ETH, I send a proof that I've got one ETH, and I send a transaction to you. So basically, all I need to do is include a proof that I've got one ETH, and that after the transaction my balance has decreased by one ethnic. So the node that's validating that only has to check those bits of data. It doesn't have to have that in its storage at all times.
00:36:44.982 - 00:37:30.268, Speaker B: It can just check that, say, yep, that's fine, that was a good transaction, and go through the block and check all the transactions into it. So in principle, we can do that. Today we have this Merkel Patricia tree structure within Ethereum, and you can construct proofs with it. But the proofs are very, very large, so that would increase block size massively and make it cumbersome to send them around the network. So the idea of vocal trees is to make these proofs very small, so you can construct a kind of self verifying block, almost. It contains all the data and all the proofs you need, so that my node just needs to go through the block and say, yep, yep, yep, yep, all good. And doesn't need to store anything locally at all about the contents of the chain storage.
00:37:30.268 - 00:37:46.812, Speaker B: So this is the chain state. So this is very attractive to do. And the vocal tree is a kind of cryptographic construction which we needn't go into, but it uses elliptic curve pairings and stuff like that. Good. Deep crypto voodoo.
00:37:46.948 - 00:37:47.904, Speaker A: Gotcha.
00:37:48.524 - 00:38:01.002, Speaker B: And just on a side note, I'm really happy that crypto started using proper cryptography now. I mean, for years we were just using kind of signatures and hashes that have been around since the 1970s. So finally we're using some funky cryptography.
00:38:01.138 - 00:38:05.898, Speaker A: Merkel Patricia trees are not like the top end in terms of cryptography.
00:38:05.946 - 00:38:20.866, Speaker B: No, not really. They're just using hashes which have been around for decades. Hopefully that explanation is not too obscure. That can.
00:38:20.970 - 00:39:07.404, Speaker A: No, I thought that was really helpful. So right now, nodes need to store all of that data because they can't just generate a very succinct proof. To be able to prove that, like, yes, Ben can send me this amount of ETH on the network, they have to just continue to store all the state, because there's no way to just verify the actions or verify the transactions with a small cryptographic proof. That's why nodes have such large data storage capacities, because they have to maintain the entire state, check, check through their logs and be like, yep, that actually happened, but rely on their own database. Whereas after verbal, because you have these proofs, or like this proof sizes are smaller, you don't actually have to hold any of that state. You can just prove it using the verkle tree structure. Is that right?
00:39:07.984 - 00:39:51.662, Speaker B: Yeah, yeah, that's right. And you know, it's kind of crazy that, you know, metal Albert, my node here, who you're familiar with, you know, it contains, it contains the balances of every single ethereum account that's ever been, ever been created, ever had ETH in it, along with every single ERC 20 token that's ever been created, even though I personally am going to only ever interact with a tiny, tiny fraction of them. That's massive overhead that my node has to store just because it has to validate any transaction that comes in. So if the transaction comes in with its own proof of validity, then it all becomes very easy.
00:39:51.838 - 00:40:46.294, Speaker A: Wow, fascinating. Okay, now, I think I really do, I do have a stronger grasp on why Verkle is cool, because for the longest time, I think my stance, and I think still to this extent, I don't find vertical like that urgent of an upgrade compared to some of the other ones. And I've heard developers say that it's a very involved upgrade. It's going to be a very hard one to move forward with. But in terms of the data and running your own node, I know that Denkun also increases the capacity in which your node needs to operate. And I hear that for the transition, for vertical, there's going to be a period where nodes have to work a lot harder. Are you concerned at all that in the meantime, before statelessness is reached, which who knows when that could be, that at home, stakers are just, it's just a lot harder.
00:40:46.294 - 00:40:50.994, Speaker A: It's going to become a lot harder to run your node and to operate your node. On Ethereum.
00:40:51.854 - 00:41:53.830, Speaker B: Yeah, this is some of the background to the block gas limit conversation that's been going on for the last couple of months. And there is a reluctance amongst core devs to speak up and say, let's double the block gas limit, even though a lot of people in the community are saying that this is fine. And simplistic metrics indicate that we could operate at a much higher block gas limit. So the problem is that the more you raise the gas limit of a block, the more the state size grows, and so the more overhead on each individual node. And the home stakers at some point begin to struggle. We're already talking about making a four terabyte nvme drive, pretty much the standard. And so the attraction of the verkle upgrade is that you could then, in principle, increase the block gas limit dramatically without impacting the home stakers.
00:41:53.830 - 00:42:26.704, Speaker B: So for the time being, keeping the block gas limit relatively low or not increasing it in an ad hoc way is a way to protect the, the small stakers and keep that decentralization in Ethereum, but it's not viable long term. At some point we need to crank it up. And the response to that is the vocal approach where small stakers can just get rid of this state, don't need to worry about it, and then they don't become a blocker on increasing the block gas limit.
00:42:27.164 - 00:42:35.506, Speaker A: Gotcha. Yeah, that makes sense. I like it conservative. In the short run, we can go wild after virtual.
00:42:35.690 - 00:42:49.814, Speaker B: Yeah, so that's some of the urgency around doing the vocal transition is simply to allow us to increase the block gas limit and stop having these conversations all the time where it feels like devs against users.
00:42:52.114 - 00:43:51.368, Speaker A: Okay, so this is probably going to be my last question because I know we're at time and I literally asked you for just until noon, and now we're over time anyways. Vertical and increasing block sizes, increasing Ethereum's basically execution layer capacity, being able to have scalability on the base layer. There's a little bit of an identity crisis that I think is happening on Ethereum right now. There's some upgrades that really would improve the user experience on Ethereum, but there's again, your vision of trying to scale Ethereum through l two s. I'm concerned that there's difficulty now around the narrative of Ethereum. What does it mean to really be Ethereum aligned? Because some of these upgrades make Ethereum a better execution layer. And some of these code changes are very focused on roll ups, like EIP 4844 is a great example, but EOF, not so much vertical, maybe not so much.
00:43:51.368 - 00:44:16.554, Speaker A: I mean, I'm a little bit confused that like, where, to what extent is Ethereum going to continue to be the world's best general purpose blockchain? Are we truly throwing away that vision? Because then I feel like Ethereum doesn't really have an advantage over other da layers like Celestia. So I can see why we want to keep that going, but I just. Is that not part of the picture anymore?
00:44:17.934 - 00:44:43.804, Speaker B: Yeah, there's a lot to unpack there, Christine. Succinctly, we'll need another podcast. But. So Ethereum is base layer, l one plus roll ups. I mean, this is the vision. So I think putting a distinction, a hard line between l one and the roll up ecosystem is not the right way to think about it. So.
00:44:43.804 - 00:45:37.886, Speaker B: And I mean, I can speak for optimism in a sense. We have, we're very intentionally extremely EVM aligned. So in the sense that the optimism core protocol depends on the l one core dev process, there's a sort of feedback loop here. So I still attend the core dev meetings because they have a direct impact on the core protocol of optimism as well. And I feel that as part of that ecosystem, that we should feed back into that process, and we can do both. We can improve the l one at the same time. And if we're improving the EVM, that then feeds up into the roll ups that have decided to remain EVM tightly coupled to the EVM, we can improve scalability on the L1.
00:45:37.886 - 00:46:09.324, Speaker B: But it's only ever going to be linear improvements. It might be a factor of two here and a factor of four there or something, but it's not going to be ten x 100 x 1000 x, which is what we really need for that. We need to get into the ultimate data availability scaling, and the whole parallelism through the roll ups thing is not going to be happening at the base layer. So, yeah, we can do all these things. And in my mind, this is all ethereum. This is all one thing. It's all part of the vision and part of the roadmap.
00:46:09.704 - 00:46:15.194, Speaker A: Yeah, it's a big roadmap and constantly changing. It's hard to keep up with, I got to tell you, Ben.
00:46:15.614 - 00:46:16.806, Speaker B: Tell me about it.
00:46:16.990 - 00:46:44.564, Speaker A: Yeah. But I'm really glad that you're. Yeah. That now I have another incredible person who's going to be super knowledgeable about l two s, and especially op's, like super chain vision as it becomes more concrete, because it's going to become more important. And the way that you explained Ethereum 2.0 technical details, gosh, like, if knowing that that kind of translation is going to happen now for l two s, I'm very happy.
00:46:45.464 - 00:46:57.952, Speaker B: I'll do my best. Thank you, Christine. Yes, I'm learning fast. I've deliberately ignored the whole l two ecosystem until now, which, because there was enough going on at l one, but I'm learning fast. It's a bit of a whirlwind.
00:46:58.088 - 00:47:19.404, Speaker A: Okay. Thank you so much, Ben. I'm so glad that you were able to join me on infinite Jungle, and it's been a very, as always, enlightening conversation about not just Ethereum technical specs, but also just Ethereum vision and values. Very excited to hear more about your role, too at op labs, and I hope you'll come back on the show, too.
00:47:20.024 - 00:47:37.644, Speaker B: I would love that, Christine, thank you as ever, and really appreciate your summaries of the core dev schools. They're such great help sometimes in the course of the meeting. So in the weeds, it's hard to fully follow what's going on. So your summaries are superb, and I really appreciate that.
00:47:38.194 - 00:47:57.346, Speaker A: Thank you. Thank you. I try. I try. Thank you to all my listeners for the infinite jungle pod. This has been another episode. Please be sure to, like, subscribe, click the buttons that make you interact with the show, and we'll be back again next week with another episode.
00:47:57.346 - 00:48:02.634, Speaker A: Thank you all. Have a good weekend.
