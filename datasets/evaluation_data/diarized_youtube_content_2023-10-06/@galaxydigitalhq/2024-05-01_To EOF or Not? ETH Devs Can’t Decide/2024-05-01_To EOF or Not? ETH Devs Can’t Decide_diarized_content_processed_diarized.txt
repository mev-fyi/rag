00:00:10.600 - 00:00:24.942, Speaker A: Welcome back to the infinite Jungle podcast, the podcast about the evolution of Ethereum. On the show today, I'm joined by Dan O'Farran, independent Ethereum protocol developer, to talk about EOF. Thank you for being on the show, Dano.
00:00:25.118 - 00:00:26.674, Speaker B: Thank you for inviting me.
00:00:27.544 - 00:01:45.370, Speaker A: We are going to get into all of what Eof is. It is the controversy around whether or not it's going into the Petra upgrade, whether it's not going into the Petra upgrade, and different conversations about why the EOF bundle of code changes is important to the Ethereum ecosystem. But first, before we get started with that conversation, here is a quick show disclaimer. I need to remind you to please refer to the disclaimer linked in the podcast show notes and note that none of the information in this podcast constitutes investment advice, an offer, recommendation, or solicitation by Galaxy Digital or any of its affiliates to buy or sell any securities. Okay, so, Dano, I have to apologize to you, because when I write my Ethereum dev call notes, which I do every single week, I for the longest time have been struggling, struggling to know exactly how to place you or like basically introduce you in my pieces of what you do in the Ethereum protocol space. You know, doing quick Google searches, I noticed. Oh, you know, Dano worked for Hedera, but then they spun out into Squirrel's lab.
00:01:45.370 - 00:02:44.730, Speaker A: But I think he's a Beisu maintainer, which would be really nice because. Cause then I could kind of loop him into the conversation as like a client team, as a core dev, or like, I don't like using the term core dev, but as a client team maintainer. And then in preparation for this podcast, I have now learned that you are independent. You are contributing to the Ethereum protocol as an independent, as just an independent, no affiliation person. And so now I finally have the right way to introduce you into the write up. But I thought before we get into what you're doing currently for the Ethereum protocol, which is around eoF, we'd have a little bit of a talk about your journey, of how you got here and how you got involved into the Ethereum protocol. So with that apology, I also thought we should start off the discussion with how did you get involved in the Ethereum protocol space? And tell us about your journey to where you are now.
00:02:44.882 - 00:03:18.174, Speaker B: Okay, so in a prior career, I was a Java desktop developer. I wrote swing apps, iPhone killed it. I worked at Oracle for a bit. And while I was there, I got interested in blockchain because I wanted to do some UI visualizations of an interesting acyclic directed graph that at the time was the bitcoin Utxos. I briefly toyed with the idea of creating a forensics company. I don't have the business contacts to do that, right. So I sold it off to someone and I thought I'd go work at Google and just get this blockchain stuff out of my system.
00:03:18.174 - 00:03:20.458, Speaker B: Didn't work. I followed.
00:03:20.506 - 00:03:21.442, Speaker A: What year was that?
00:03:21.578 - 00:03:22.250, Speaker B: Huh?
00:03:22.402 - 00:03:24.994, Speaker A: What year was that? Working on Blockchain at Google?
00:03:25.154 - 00:03:42.994, Speaker B: I wasn't working at Blockchain at Google. I was just in the payments group doing, like, banking stuff. And that was 2015 to 2019. So about just under three years, December 2015. So I was working there, trying to get out of my system and saying, you know, this is a fad. Didn't. Didn't succeed.
00:03:42.994 - 00:03:57.730, Speaker B: I paid attention to the whole time. I watched the whole growth of ethereum from nothing. And I was skeptical at first. Then cryptokitties happened. My mind was blown. It's just like, yeah, I understand it now. So a recruiter from consensus called me up, saw little bits on my resume.
00:03:57.730 - 00:04:16.414, Speaker B: So I was doing a lot of Java at Google and said, hey, would you like to help build besuit? I'm like, yes, I would. So it was, you know, kind of, you know, Google, you ship between projects all the time. I was between projects. It was a perfect time to transition over. So I joined consensus, worked there for almost three years. That was consensus 1.0 for the most part.
00:04:16.414 - 00:04:31.064, Speaker B: The transition to consensus 2.0 employees were required to enter into a forced arbitration agreement. And I decided I'd rather not work there than enter into one. I tried to change it. They had no interest in changing it, so I left. I mean, that's. You ultimately vote with your feet.
00:04:31.064 - 00:04:57.012, Speaker B: So I tried Reddit for six months. Their project isn't what I thought it was. And then I landed at Hedera. And what I did at Hedera is I improved their EVM, EVM that they were using for their smart contract system. They had an old version from an older Java Ethereum project, and it was really old. So I brought the Baesu EVM. I made a library out of it, brought it in, and so I was still contributing to Baesu because, I mean, that was like, this is like the perfect thing.
00:04:57.012 - 00:05:25.890, Speaker B: I can still contribute to Baesu and still get paid for it. I don't have to work with consensus, and they've got policies that were more acceptable to me. I spent the time, I did a lot of performance work on the eVm. I did some work but not as much work as I could have integrating things at Hedera. Ultimately, I decided I didn't want to work at Hedera anymore. They kept asking me to build things for Hedera and I didn't want to. And I'm like, well, that's not really cool.
00:05:25.890 - 00:06:02.824, Speaker B: So I decided to leave. If you're not willing to work for the company that's paying you to do stuff, why are you there? So I left and now I'm independent. The market's been good, I have other sources getting some grants here and there. We'll see how long I stay independent. But the reason why I'm not jumping into another job is because I feel I am very invested in making EOF work. As part of the work I've been doing, getting EVM up to date, I've been understanding some of the deeper issues that are preventing it from, you know, being really stable and really great. And that's why a lot of things in EOF spoke to me and why I'm really invested in trying to make it happen.
00:06:02.824 - 00:06:11.656, Speaker B: So at least until EOf gets its clarity, I'm going to probably be in this independent state. And, you know, depending upon what the clarity is, I have no idea what I'm going to do after that.
00:06:11.720 - 00:07:24.812, Speaker A: So that's pretty cool though, that you are intentionally focusing this time in between jobs and this time where you've decided to be independent to really trying to make, make eof happen on Ethereum. And I want to jump into that because it's a lot of sacrifice and a lot of time and resources and mental energy that you're putting for potentially this very precarious situation where EOF may not go into Petra may not go into the upgrade. And that is, that must be giving me anxiety. I can't imagine the anxiety it's giving you. So let's, before we get into the talk about whether or not EOF is going to go into pectra or not, can you give a quick summary of what EOF is to our audience? I've definitely explained it multiple times in the show, but I definitely don't think that I have given a good explanation of Eof. I mainly summarize it as an upgrade to the Ethereum virtual machine that will make it more upgradeable and more efficient for smart contract developers. But that's about the extent to which I know how exactly eof is really going to impact Ethereum.
00:07:24.868 - 00:07:48.082, Speaker B: So please, and without diving into the gory details, I think that's a perfect description of it. EOF stands for EVM object framework. It's a container format for the existing EVM code. We're not changing fundamental things about the EVM. We're not changing how message calls pass, we're not changing how you call contracts. We're not changing the memory model. We're changing how you package the EOf code itself.
00:07:48.082 - 00:08:16.584, Speaker B: Right now it's just a random binary stream of data. And you point your EVM PC zero, and you start executing and hope things come to the same answer. What we're doing is we're putting a bit more formality and intentionality around that. Instead of just parting it at zero, we put a container that says at the beginning, hi, I am EOF version one. I have this many code sections, I have this much data, I have these subcontainers. And then it goes in and says, okay, here's code section one. Here's where you start.
00:08:16.584 - 00:08:40.844, Speaker B: And from that structure we can do interesting things like subroutines. There's no subroutines in the EVM. You can call subroutines within your call. You have to do full on message calls to get anything like that. Right now that's really expensive. It has data and code separation. Right now, unless you're using modern versions of solidity, your data might show up at random parts of the code and perspect.
00:08:40.844 - 00:09:10.986, Speaker B: They can show up at any random part. You can quote any part of your code and bring it elsewhere. So separating the data from the code is something that this format enables. It's paying down a lot of tech debt like that and doing some forward looking changes for where we want to take the EVM. I mean, the EVM is not the x 86 processing system. You're not going to run an operating system from it, but you might want to make a stronger ZK system out of it with better guarantees. The ZK people are now done amazing things with what they have to work with.
00:09:10.986 - 00:09:44.988, Speaker B: It's not the best solution. There's lots of compromises. But if we do things like say, you will never see EVM code in memory, and people will never be able to assemble random EVM code from a contract call and deploy it, then that makes their jobs a lot easier. If they know their EVM code comes external to the system, they can be a bit more intentional on how they prepare for it. And even some of the smaller changes, like we're changing jumps from being dynamic to static. So when you do a jump to another location, you know exactly where you're going. And in the current EVM, you don't.
00:09:44.988 - 00:10:18.634, Speaker B: And that causes the ZK systems and ahead of time compilation systems and just in time compilation systems to have to go through a bit of contortions to figure out where to do that. But if you impose some regularity in the stack, you can do some amazing transformations with the code that are very well understood. And we're not doing groundbreaking stuff with this container format. This stuff was all worked through in the 20th century. We're just applying well known and well established computer science principles to a very specific field.
00:10:19.494 - 00:11:25.884, Speaker A: I didn't realize that it is so unpredictable when you write smart contract code and then execute it exactly how it's going to function after it's executed. I didn't realize that there's elements of randomness because of the way that the EVM is structured. That is, as a smart contract developer, you're not fully aware of exactly how this code could work in the live environment of Ethereum, and probably why a lot of smart contract developers rely on testnets and rely on these other networks to see how the code operates, change it a little bit, and then redeploy it and then change it, and to introduce some more predictability in that execution process. One very quick question on, because you were explaining a few of those benefits, and one of the first ones you mentioned was subroutines, can you quickly go into what that is and how beneficial it is or why that's a good to have for smart contract developers?
00:11:26.064 - 00:12:07.664, Speaker B: Right? So let's say you have this repeated thing you're doing all the time. Like, you know, very simple one, it's, this is too small to be optimized, but you're adding two numbers and you have some rules about how you add them. Like you're checking for overflow and underflow. So you might do the addition, you might check for overflow and underflow. And if you duplicate that all over the code, there's a lot of repeated stuff. There's a design principle in at least the software development dry, don't repeat yourself. So with that subroutine, we can take that add and overflow and underflow check, put it in a separate code section, and everyone, when they need to do the overflow and underflow checked add, they can just say, call this function, and from that they can just localize that code, write it once.
00:12:07.664 - 00:12:42.594, Speaker B: And there's one well understood place to do it. Typically it saves you byte codes doing it like this. It makes code more efficient and more dense and makes the code smaller. When you can bring these subroutines up out. There are some techniques that they can do to simulate subroutines in the EVM right there, but they're kind of fragile and this just bakes it right into the EVM. I mean, this was one of the first major proposed changes to the EVM, all the way back to EIP 615, which predates even my time in Ethereum. We've been trying to get this in forever.
00:12:42.594 - 00:13:17.774, Speaker B: It was almost in Berlin, and one of the issues there was solidity, analyzed it and said, we're not going to support this. So that got pulled out pretty late. From that experience in trying to get EOF, we've learned from that. The Ipsalon team's learned, Greg's learned, I've learned we need to get the compiler teams on board on this. I really consider now the compiler teams to be like our first class customer. Other people can write custom EOf by hand and everything, but if solidity won't spit out EoF, it's a feature that is just dead in the water.
00:13:18.564 - 00:14:01.204, Speaker A: Yes. So let's talk about that process and the people involved. You had mentioned, obviously you're working on this full time, and the Ipsalon team, which is this Ethereum foundation funded research group for the EVM. And one of the things that you had mentioned on the call, the latest Ethereum dev call, is that a lot of this work and the scope of EOF going into Pectra is only what solidity, the team writing the smart contract programming language that team will be able to support. So once you've made these changes to the EVM, you are now working with the solidity team, which is the smart contract programming language team to have. Sorry.
00:14:01.324 - 00:14:02.508, Speaker B: And the Viper team.
00:14:02.676 - 00:14:12.188, Speaker A: And the Viper, another smart contract programming language team to ensure that those changes are reflected in the code that people are writing to Ethereum. Is that right?
00:14:12.316 - 00:14:13.694, Speaker B: Right, right.
00:14:13.734 - 00:14:14.198, Speaker A: Okay.
00:14:14.286 - 00:14:47.812, Speaker B: There's some, some of the changes that happened in the past year were explicitly at their request. There's like a new exchange operation that Viper's really excited about. There is. What was some of the solidities we discussed, some stuff that returned in copy. There's some really inside baseball things we discussed changing. We couldn't accommodate everything because we can't spend five years designing everything. There's been some requests for, like variable length encodings, which would set us back about a year, design and implementation wise, but it also unlocks potentially infinitely sized contracts and a couple of other features.
00:14:47.812 - 00:15:04.744, Speaker B: That design is like, at some point you have to put the pen down and say, we need to ship this, and I think that's where EOF is right now. We have enough that's going to make things better. Solidity is on board with the minimum scope. We just need to ship it and get it out there. Perfect's the enemy of done.
00:15:05.524 - 00:16:29.224, Speaker A: I think that is one of the large questions around EOF, though, is the concern that if you implement this major change to the EVM, create a new version of it that people can interact with. How soon before you have to do another change to the EVM to upgrade it to make it more compatible? Not with 20th century code, but say like the latest virtual machine features that are on Solana or these other kind of more newfangled blockchains, layer ones. And I noticed that developers have been going back and forth about this concern that if we make this EOf up, do this EOf upgrade now, is it too large, too complex? But if we scope it down, is it too small and something we have to basically upgrade very soon after it goes live? Can you talk a little bit about the controversy and the kind of back and forth there? I know you've expressed frustration that developers really, the broader protocol developer community, really can't seem to figure out what the nice midpoint is. How are developers going to reach a consensus about this when for years they've been going back and forth on this issue? It kind of sounds like there's consensus is a little bit impossible for EOF and the scope of EOF.
00:16:29.524 - 00:17:24.148, Speaker B: Right. So first, as far as the size, we're trying to split things into changes that require a breaking change and changes that can be done in a forward compatible fashion that don't require a breaking change. If the solution involves adding new opcodes or adding a new code section and there's no other changes, I would say those are the forward compatible. So we don't need to break anything in the object format or the EVM to add those features. What we're getting in right now is there's been concern about, the real concern is like, well, how many of these breaking changes are we doing? So we step back, we looked and we saw what are the critical breaking changes? And we're trying to do all the breaking changes that we need to do for the next ten years or so, we're doing them at once. And it seems like the consensus is it rolls down to a few things. The container format itself, code visibility and code introspection and gas visibility and gas introspection and those things.
00:17:24.148 - 00:19:23.564, Speaker B: We have to ban a lot of things once we want to get that out of the way once. So what we had. This isn't the first time we tried to get EOF into a release it was scheduled for Shanghai and late in the process we brought solidity in a bit too late in the process and they discovered that they couldn't do one of their favorite techniques which is to modify the code to get their invariable data to get their immutable data in there it's like you have a split contract you don't want the pair contracts changing on you, you want to burn that in in the code. So, you know, we couldn't extend data into the data section there are ways to do it there was a real simple fix we could have done to patch it in and get in Cancun but at one of our interop events, you know, a lot of us got together and talked about what the real long term needs were and pointed out that well, we want to get rid of code introspection so we can bring everything to a ZK system so stuff won't change unpredictably to reduce the unpredictability ness that was a big, big request that we had to accommodate and that's bringing in a lot of the complexity around stuff like EOF create, TX create we recently took Txcreate out that's more of a forward compatible change that's the sort of thing that might come back but things like introducing the data section and prohibiting ext code copy things like that are to further that aim a lot of it comes down to what we're doing and it seems like there's a lot of opcodes 19 opcodes but the vast majority of them were banning the existing opcode and bringing an alternative that works within the rules one example is the three call series opcodes we don't want you to be able to specify how much gas you pass in so we got to ban the four existing opcodes and put in three replacement opcodes. So that's a net change of seven opcodes right there but it's the exact same functionality under the COVID But to maintain maximum tool compatibility we can't just say by the way, delegate call now takes three arguments instead of six that's just a nightmare maintenance wise, so.
00:19:24.144 - 00:20:36.382, Speaker A: Gotcha. But it does kind of sound like you've put in quite a bit of thought to make sure that all the breaking changes are in in this version and the ones that are optional, the ones that just add too much complexity you've taken out you've brought in the solidity team early on into the process so that, you know, the front end users, the smart contract developers will really be able to have firsthand access to all the new changes going into the EVM. You've talked at least on the ACD calls about client implementations that are already ongoing for EOF. You mentioned that tests are being written. It sounds to me like all that can be done for EOf has been done. And so I'm curious to know at this stage, at this point of the game, what really is there left to do that you think will move the needle on getting eof into Pectra? There's continued, there's more. Yesterday, or the latest ethereum dev call which, which happened yesterday at time of recording, developers said we need another breakout meeting.
00:20:36.382 - 00:20:49.070, Speaker A: Let's everybody go into the eof breakout meeting. What more is there really to discuss? I need to know like what else is there to do for EOf that's going to change whether or not it goes into Petra.
00:20:49.262 - 00:21:57.606, Speaker B: So I think a lot of it is just good old traditional project management, talking to people, listening to their concerns, figuring out if their concerns are already taken care of. Because a lot in some of the cases we're talking to people, it's like their big concerns, like oh no, you're putting a new transaction format in there. It's like we got rid of that a few weeks ago. So some of it is communication, some of it is, I hate to say it, I don't mean it in a pejorative way, but some of it's just politics. It's like, which feature is more important? Where do we spend our resources? Where do we balance limited resources? What risk do we want to take on? What risk is too much? A lot of people have good intentions, they just have different perspectives on what the risk entails and what the real impact of it is. I think part of it is because the EVM devs are very specialized compared to the typical consensus focused developers. Because on the basic team I don't work too much on stuff like the engine API, I don't work on the JSON RPC API that much.
00:21:57.606 - 00:22:28.842, Speaker B: I work almost exclusively on the EVM. So they might not understand what's going on in EOF and they'll often come to me and ask what's going on with it. I think a lot of the client teams are kind of in that same situation. And I think that's just part of the nature of how Ethereum is growing, is that there's some specialties that are growing up and being specialized. And I think the EVM is in a unique position. It's like, well, things are not as good as they should be, but it's not a crisis. We're not going to have validators fall over because we have too much Ethereum staked.
00:22:28.842 - 00:23:18.922, Speaker B: We're not going to have people concerned because they can't receive their withdrawals from Ethereum. We're not overcharging people by millions of dollars because we don't have a fee market. And a lot of these changes that have been the headliners for the last few releases, you can point to a sky is falling moment. And I think one of the fundamental problems with EOf that as people look into it and start to understand it, they see it's more that it's laying a foundation for good quality future changes. The house isn't on fire, there's just a hole in the ground and needs a better foundation. And that's I think a bit of a harder sell in getting resource allocations like, well, let's just leave that hole in the ground for two more years. What bad could possibly happen? And the problem is that EVM changes have been pushed off for coming up on five, six years all the way back at 615.
00:23:18.922 - 00:23:52.784, Speaker B: These changes have been tried to brought into the system. There's technical reasons why we have to use a container format relating sway, immediate codes and jump test analysis work. So to get a real quality change requires a higher level change to get these. And it's been pushed back so many times, if it gets pushed back one more time, a lot of the people involved in the process are just like, you know what, EVM is ossified, it's never changing again. And I think that would be ossifying too early because there are some fundamental design issues with the way the EVM works that makes zks kind of wonky to work with.
00:23:53.204 - 00:24:22.158, Speaker A: So to confirm if EOF does not get into Pectra, do you think that this is the end of the road for EOF, period? As in like the input that has been put in by the Ipsalon team, by you, by the solidity team, by client maintainers for EOF? If it doesn't get into pectra, how much of an appetite is there to get it into a future upgrade is there? Zero. Is this the end of the road for EOF if it doesn't get into vector?
00:24:22.326 - 00:24:47.180, Speaker B: So I won't speak for anyone else, I won't speak for Epsilon, I won't speak for any other people because there's people on all the teams that are interested in EVM. But for me personally, I am all in to get clarity. And if the clarity is that, it's out. I'm going to need to get a job in a different area. I got a mortgage to pay, I got kids at college. I got to pay for bills. But I am invested enough to spend this time being an independent consultant to get clarity.
00:24:47.180 - 00:25:25.854, Speaker B: And clarity is either in or out. I think the worst state that EOF has been in for the past couple of years has been, well, maybe they'll show up in the future, maybe it won't. And that's just, you know, lack of clarity, I don't think is good for any, any engineer in the process. So, and it doesn't have to be in Pectra, but there needs to be a path to where that it's going to, you know, progress forward. There needs to be a clear path as to how it's going to ship. And I think we're getting some of those, some of those pieces. We're getting the reference test cases written, we're getting the spec close to finalized and frozen.
00:25:25.854 - 00:25:43.210, Speaker B: We're getting client implementations. More than just one or two. They're really invested in it. Cats getting implementation. Nethermind re engaged this morning. They had a Shanghai implementation, so now they're going to bring it back up. EVM one is that they've been the reference implementation for EOF forever.
00:25:43.210 - 00:26:23.818, Speaker B: So, you know, silkworm on Aragon's good. So getting these implementations there, I think, is a very important thing. And typically the shelling point for saying this is the standard is ship it a fork, and maybe there's a future where the shelling point shifts somewhere else, where it's like, here is a standard. Whether or not it's in a fork, it may or may not be there, but it's implemented in clients, you can verify the correctness. And if l two s want to pick it up and add it to their chains, they're welcome to. So getting in Pectra and out of Pectra is not a Fisher cut bait moment, but it's typically been the shelling point to say this is a feature, this is what it looks like, this is what's not changing anymore.
00:26:23.946 - 00:27:42.058, Speaker A: And maybe we can, and I'm sure that all of the work that has been done for EOF in lead up to Pectro, regardless of whether or not it gets in, that is work that will, I'm sure, benefit, have some benefits beyond Ethereum, perhaps for l two s, perhaps for other smart contract developers and people in the broader crypto ecosystem. I'm curious to know your thoughts. Not that I want to fixate too much on Petra, but in the last two minutes of our conversation I want to know your thoughts on whether or not you think EOF has a higher likelihood of going into the Petra upgrade if it is significantly reduced and scoped. Right now it's about ten eips, I think ten different code changes. And from my perspective I truly don't think it matters at this point how big or small eof is. I don't think that will actually impact client teams willingness to include EOF in Pectra. They've already, I think several execution layer teams, ref team and a few others have already signaled their support for having EOF in Pectra when it was as is, you know, the what we have now.
00:27:42.058 - 00:28:11.550, Speaker A: But I think it was Guillaume from the Geth team brought up again in the latest Ethereum dev call of what happens if we reduce the scope of EOF. And I think he also agreed, like that won't help, or at least that'll be very difficult to do. But in your view, is making EOF a smaller upgrade, is that something that will increase the probability of it going into Petra or no.
00:28:11.742 - 00:29:04.200, Speaker B: So the metric I don't think for me is the size, the metric for me is the risk. And if we make EOF smaller and break it up into three chunks and we have three different versions of EOF, then the network has to support three potential versions of contracts forever. If we do where we do all the breaking changes first and add forward stuff later, then it's not really three changes, we add opcodes all the time. But if we have a version where we allow introspection, then we have a version where we ban introspection, then we've got the legacy, we've got the container, we've got the container without introspection, and then clients have to support all three versions forever. And that's not just short term risk, that's long term risk and that's long term technical debt. So I think what's really going to change minds is reducing risk, not reducing scope. And if we can reduce risk by reducing scope, then I think that's something we should very strongly consider and implement.
00:29:04.200 - 00:29:42.430, Speaker B: But we need to make sure whatever scope changes happen that it ends up reducing the risk and the surfaces where things could go wrong. So I think that's the real metric. And getting reference tests written, getting fuzzing up and running again and getting positive results out of that I think will show that the risk is reduced or it will find the flaws we're not aware of and pull it out. Either way, it's a good thing. We need to get the testing turned up. We need to get everything validating together and, you know, get, whether it's, it's good or bad, whether it's ready or not. So that's, you know, the testing is going to help figure out whether we agree on everything or not.
00:29:42.430 - 00:29:55.914, Speaker B: And that's, for me, that's the real metric is the risk. What are the odds we're going to ship different versions of EVM on different clients and halt the network. That's the real risk and that's the real metric I think people are making their judgments against.
00:29:57.134 - 00:30:59.494, Speaker A: Right. I'm still of the opinion that so much has been put into EOf that at this point, if you don't know what the risk is for EOF, I mean, it's like how much more, how much more work really needs to be done here. But I also understand and agree that it really is in kind of like the final stages of implementation of really committing to this, that you start to refine it, start, start to really like, question some of its design to keep some parts in, some parts out. That's happening for EIP 3074, the Auth and Auth call. It's happening for Max EB, it's happening for all of these code changes, because now it's finally in the stage of implementation. And I really think that that's kind of already happening for EOF, and yet it doesn't really have the same amount of certainty. So, you know, I've said this on the show before, but I am a supporter of seeing it in Pektra, and I appreciate the time that of you coming onto the show to explain to our listeners a little bit more about it.
00:30:59.494 - 00:31:24.054, Speaker A: As a final question, from your view, from your standpoint right now, percentage wise, can you give a percentage answer of how likely you think EOf is going to be? How likely eOf with its scope right now, how likely it's going to go into the Petra upgrade based on the conversations you've had, based on how things stand now, what do you think?
00:31:25.274 - 00:31:50.954, Speaker B: I would say 70% in Pectora, 20% shipping in a different form that may not involve being in Pectra. And I still think there's a 10% chance that EOF might not happen. So I'm keeping appraised of that. But as far as, and I'm invested in the system, I have stake in it. So I don't know if I'd take those odds to Vegas, but that's where my perspective on where it's at right now.
00:31:51.414 - 00:32:07.874, Speaker A: Gotcha. All right, well, thank you so much, Dano, for the time. I appreciate it. Again, the additional color that you gave me on the process for EOF and the governance efforts happening behind it to get it into the upgrade.
00:32:08.734 - 00:32:10.994, Speaker B: Thank you. Thanks for inviting me on your podcast.
00:32:12.214 - 00:32:29.134, Speaker A: So that's it for today's episode of infinite Jungle. I hope everyone enjoyed listening to the episode, and more importantly, I hope you learned something new about Ethereum, the vast infinite jungle. That is Ethereum. Until next time, everyone, stay safe out there.
